
try_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018790  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000340c  08018990  08018990  00028990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801bd9c  0801bd9c  0002bd9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801bda4  0801bda4  0002bda4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801bda8  0801bda8  0002bda8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001ec  20000000  0801bdac  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000998c  200001ec  0801bf98  000301ec  2**2
                  ALLOC
  8 ._user_heap_stack 00001800  20009b78  0801bf98  00039b78  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000301ec  2**0
                  CONTENTS, READONLY
 10 .debug_info   00047be4  00000000  00000000  0003021c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00007ecc  00000000  00000000  00077e00  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00002880  00000000  00000000  0007fcd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00002700  00000000  00000000  00082550  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0001969a  00000000  00000000  00084c50  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000cea0  00000000  00000000  0009e2ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000ab18a  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000b2ac  00000000  00000000  000ab208  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .RxDecripSection 00000080  2007c000  2007c000  0003c000  2**2
                  ALLOC
 19 .TxDescripSection 00000080  2007c080  2007c080  0003c080  2**2
                  ALLOC
 20 .RxarraySection 000017d0  2007c100  2007c100  0003c100  2**2
                  ALLOC
 21 .TxarraySection 000017d0  2007d8d0  2007d8d0  0003d8d0  2**2
                  ALLOC

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001ec 	.word	0x200001ec
 800021c:	00000000 	.word	0x00000000
 8000220:	08018978 	.word	0x08018978

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001f0 	.word	0x200001f0
 800023c:	08018978 	.word	0x08018978

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b97a 	b.w	80005fc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	468c      	mov	ip, r1
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	9e08      	ldr	r6, [sp, #32]
 800032c:	2b00      	cmp	r3, #0
 800032e:	d151      	bne.n	80003d4 <__udivmoddi4+0xb4>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d96d      	bls.n	8000412 <__udivmoddi4+0xf2>
 8000336:	fab2 fe82 	clz	lr, r2
 800033a:	f1be 0f00 	cmp.w	lr, #0
 800033e:	d00b      	beq.n	8000358 <__udivmoddi4+0x38>
 8000340:	f1ce 0c20 	rsb	ip, lr, #32
 8000344:	fa01 f50e 	lsl.w	r5, r1, lr
 8000348:	fa20 fc0c 	lsr.w	ip, r0, ip
 800034c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000350:	ea4c 0c05 	orr.w	ip, ip, r5
 8000354:	fa00 f40e 	lsl.w	r4, r0, lr
 8000358:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800035c:	0c25      	lsrs	r5, r4, #16
 800035e:	fbbc f8fa 	udiv	r8, ip, sl
 8000362:	fa1f f987 	uxth.w	r9, r7
 8000366:	fb0a cc18 	mls	ip, sl, r8, ip
 800036a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800036e:	fb08 f309 	mul.w	r3, r8, r9
 8000372:	42ab      	cmp	r3, r5
 8000374:	d90a      	bls.n	800038c <__udivmoddi4+0x6c>
 8000376:	19ed      	adds	r5, r5, r7
 8000378:	f108 32ff 	add.w	r2, r8, #4294967295
 800037c:	f080 8123 	bcs.w	80005c6 <__udivmoddi4+0x2a6>
 8000380:	42ab      	cmp	r3, r5
 8000382:	f240 8120 	bls.w	80005c6 <__udivmoddi4+0x2a6>
 8000386:	f1a8 0802 	sub.w	r8, r8, #2
 800038a:	443d      	add	r5, r7
 800038c:	1aed      	subs	r5, r5, r3
 800038e:	b2a4      	uxth	r4, r4
 8000390:	fbb5 f0fa 	udiv	r0, r5, sl
 8000394:	fb0a 5510 	mls	r5, sl, r0, r5
 8000398:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800039c:	fb00 f909 	mul.w	r9, r0, r9
 80003a0:	45a1      	cmp	r9, r4
 80003a2:	d909      	bls.n	80003b8 <__udivmoddi4+0x98>
 80003a4:	19e4      	adds	r4, r4, r7
 80003a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003aa:	f080 810a 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80003ae:	45a1      	cmp	r9, r4
 80003b0:	f240 8107 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80003b4:	3802      	subs	r0, #2
 80003b6:	443c      	add	r4, r7
 80003b8:	eba4 0409 	sub.w	r4, r4, r9
 80003bc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003c0:	2100      	movs	r1, #0
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d061      	beq.n	800048a <__udivmoddi4+0x16a>
 80003c6:	fa24 f40e 	lsr.w	r4, r4, lr
 80003ca:	2300      	movs	r3, #0
 80003cc:	6034      	str	r4, [r6, #0]
 80003ce:	6073      	str	r3, [r6, #4]
 80003d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d907      	bls.n	80003e8 <__udivmoddi4+0xc8>
 80003d8:	2e00      	cmp	r6, #0
 80003da:	d054      	beq.n	8000486 <__udivmoddi4+0x166>
 80003dc:	2100      	movs	r1, #0
 80003de:	e886 0021 	stmia.w	r6, {r0, r5}
 80003e2:	4608      	mov	r0, r1
 80003e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e8:	fab3 f183 	clz	r1, r3
 80003ec:	2900      	cmp	r1, #0
 80003ee:	f040 808e 	bne.w	800050e <__udivmoddi4+0x1ee>
 80003f2:	42ab      	cmp	r3, r5
 80003f4:	d302      	bcc.n	80003fc <__udivmoddi4+0xdc>
 80003f6:	4282      	cmp	r2, r0
 80003f8:	f200 80fa 	bhi.w	80005f0 <__udivmoddi4+0x2d0>
 80003fc:	1a84      	subs	r4, r0, r2
 80003fe:	eb65 0503 	sbc.w	r5, r5, r3
 8000402:	2001      	movs	r0, #1
 8000404:	46ac      	mov	ip, r5
 8000406:	2e00      	cmp	r6, #0
 8000408:	d03f      	beq.n	800048a <__udivmoddi4+0x16a>
 800040a:	e886 1010 	stmia.w	r6, {r4, ip}
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	b912      	cbnz	r2, 800041a <__udivmoddi4+0xfa>
 8000414:	2701      	movs	r7, #1
 8000416:	fbb7 f7f2 	udiv	r7, r7, r2
 800041a:	fab7 fe87 	clz	lr, r7
 800041e:	f1be 0f00 	cmp.w	lr, #0
 8000422:	d134      	bne.n	800048e <__udivmoddi4+0x16e>
 8000424:	1beb      	subs	r3, r5, r7
 8000426:	0c3a      	lsrs	r2, r7, #16
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	2101      	movs	r1, #1
 800042e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000432:	0c25      	lsrs	r5, r4, #16
 8000434:	fb02 3318 	mls	r3, r2, r8, r3
 8000438:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800043c:	fb0c f308 	mul.w	r3, ip, r8
 8000440:	42ab      	cmp	r3, r5
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x134>
 8000444:	19ed      	adds	r5, r5, r7
 8000446:	f108 30ff 	add.w	r0, r8, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x132>
 800044c:	42ab      	cmp	r3, r5
 800044e:	f200 80d1 	bhi.w	80005f4 <__udivmoddi4+0x2d4>
 8000452:	4680      	mov	r8, r0
 8000454:	1aed      	subs	r5, r5, r3
 8000456:	b2a3      	uxth	r3, r4
 8000458:	fbb5 f0f2 	udiv	r0, r5, r2
 800045c:	fb02 5510 	mls	r5, r2, r0, r5
 8000460:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000464:	fb0c fc00 	mul.w	ip, ip, r0
 8000468:	45a4      	cmp	ip, r4
 800046a:	d907      	bls.n	800047c <__udivmoddi4+0x15c>
 800046c:	19e4      	adds	r4, r4, r7
 800046e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000472:	d202      	bcs.n	800047a <__udivmoddi4+0x15a>
 8000474:	45a4      	cmp	ip, r4
 8000476:	f200 80b8 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 800047a:	4618      	mov	r0, r3
 800047c:	eba4 040c 	sub.w	r4, r4, ip
 8000480:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000484:	e79d      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000486:	4631      	mov	r1, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048e:	f1ce 0420 	rsb	r4, lr, #32
 8000492:	fa05 f30e 	lsl.w	r3, r5, lr
 8000496:	fa07 f70e 	lsl.w	r7, r7, lr
 800049a:	fa20 f804 	lsr.w	r8, r0, r4
 800049e:	0c3a      	lsrs	r2, r7, #16
 80004a0:	fa25 f404 	lsr.w	r4, r5, r4
 80004a4:	ea48 0803 	orr.w	r8, r8, r3
 80004a8:	fbb4 f1f2 	udiv	r1, r4, r2
 80004ac:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80004b0:	fb02 4411 	mls	r4, r2, r1, r4
 80004b4:	fa1f fc87 	uxth.w	ip, r7
 80004b8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80004bc:	fb01 f30c 	mul.w	r3, r1, ip
 80004c0:	42ab      	cmp	r3, r5
 80004c2:	fa00 f40e 	lsl.w	r4, r0, lr
 80004c6:	d909      	bls.n	80004dc <__udivmoddi4+0x1bc>
 80004c8:	19ed      	adds	r5, r5, r7
 80004ca:	f101 30ff 	add.w	r0, r1, #4294967295
 80004ce:	f080 808a 	bcs.w	80005e6 <__udivmoddi4+0x2c6>
 80004d2:	42ab      	cmp	r3, r5
 80004d4:	f240 8087 	bls.w	80005e6 <__udivmoddi4+0x2c6>
 80004d8:	3902      	subs	r1, #2
 80004da:	443d      	add	r5, r7
 80004dc:	1aeb      	subs	r3, r5, r3
 80004de:	fa1f f588 	uxth.w	r5, r8
 80004e2:	fbb3 f0f2 	udiv	r0, r3, r2
 80004e6:	fb02 3310 	mls	r3, r2, r0, r3
 80004ea:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004ee:	fb00 f30c 	mul.w	r3, r0, ip
 80004f2:	42ab      	cmp	r3, r5
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x1e6>
 80004f6:	19ed      	adds	r5, r5, r7
 80004f8:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fc:	d26f      	bcs.n	80005de <__udivmoddi4+0x2be>
 80004fe:	42ab      	cmp	r3, r5
 8000500:	d96d      	bls.n	80005de <__udivmoddi4+0x2be>
 8000502:	3802      	subs	r0, #2
 8000504:	443d      	add	r5, r7
 8000506:	1aeb      	subs	r3, r5, r3
 8000508:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800050c:	e78f      	b.n	800042e <__udivmoddi4+0x10e>
 800050e:	f1c1 0720 	rsb	r7, r1, #32
 8000512:	fa22 f807 	lsr.w	r8, r2, r7
 8000516:	408b      	lsls	r3, r1
 8000518:	fa05 f401 	lsl.w	r4, r5, r1
 800051c:	ea48 0303 	orr.w	r3, r8, r3
 8000520:	fa20 fe07 	lsr.w	lr, r0, r7
 8000524:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000528:	40fd      	lsrs	r5, r7
 800052a:	ea4e 0e04 	orr.w	lr, lr, r4
 800052e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000532:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000536:	fb0c 5519 	mls	r5, ip, r9, r5
 800053a:	fa1f f883 	uxth.w	r8, r3
 800053e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000542:	fb09 f408 	mul.w	r4, r9, r8
 8000546:	42ac      	cmp	r4, r5
 8000548:	fa02 f201 	lsl.w	r2, r2, r1
 800054c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000550:	d908      	bls.n	8000564 <__udivmoddi4+0x244>
 8000552:	18ed      	adds	r5, r5, r3
 8000554:	f109 30ff 	add.w	r0, r9, #4294967295
 8000558:	d243      	bcs.n	80005e2 <__udivmoddi4+0x2c2>
 800055a:	42ac      	cmp	r4, r5
 800055c:	d941      	bls.n	80005e2 <__udivmoddi4+0x2c2>
 800055e:	f1a9 0902 	sub.w	r9, r9, #2
 8000562:	441d      	add	r5, r3
 8000564:	1b2d      	subs	r5, r5, r4
 8000566:	fa1f fe8e 	uxth.w	lr, lr
 800056a:	fbb5 f0fc 	udiv	r0, r5, ip
 800056e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000572:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000576:	fb00 f808 	mul.w	r8, r0, r8
 800057a:	45a0      	cmp	r8, r4
 800057c:	d907      	bls.n	800058e <__udivmoddi4+0x26e>
 800057e:	18e4      	adds	r4, r4, r3
 8000580:	f100 35ff 	add.w	r5, r0, #4294967295
 8000584:	d229      	bcs.n	80005da <__udivmoddi4+0x2ba>
 8000586:	45a0      	cmp	r8, r4
 8000588:	d927      	bls.n	80005da <__udivmoddi4+0x2ba>
 800058a:	3802      	subs	r0, #2
 800058c:	441c      	add	r4, r3
 800058e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000592:	eba4 0408 	sub.w	r4, r4, r8
 8000596:	fba0 8902 	umull	r8, r9, r0, r2
 800059a:	454c      	cmp	r4, r9
 800059c:	46c6      	mov	lr, r8
 800059e:	464d      	mov	r5, r9
 80005a0:	d315      	bcc.n	80005ce <__udivmoddi4+0x2ae>
 80005a2:	d012      	beq.n	80005ca <__udivmoddi4+0x2aa>
 80005a4:	b156      	cbz	r6, 80005bc <__udivmoddi4+0x29c>
 80005a6:	ebba 030e 	subs.w	r3, sl, lr
 80005aa:	eb64 0405 	sbc.w	r4, r4, r5
 80005ae:	fa04 f707 	lsl.w	r7, r4, r7
 80005b2:	40cb      	lsrs	r3, r1
 80005b4:	431f      	orrs	r7, r3
 80005b6:	40cc      	lsrs	r4, r1
 80005b8:	6037      	str	r7, [r6, #0]
 80005ba:	6074      	str	r4, [r6, #4]
 80005bc:	2100      	movs	r1, #0
 80005be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005c2:	4618      	mov	r0, r3
 80005c4:	e6f8      	b.n	80003b8 <__udivmoddi4+0x98>
 80005c6:	4690      	mov	r8, r2
 80005c8:	e6e0      	b.n	800038c <__udivmoddi4+0x6c>
 80005ca:	45c2      	cmp	sl, r8
 80005cc:	d2ea      	bcs.n	80005a4 <__udivmoddi4+0x284>
 80005ce:	ebb8 0e02 	subs.w	lr, r8, r2
 80005d2:	eb69 0503 	sbc.w	r5, r9, r3
 80005d6:	3801      	subs	r0, #1
 80005d8:	e7e4      	b.n	80005a4 <__udivmoddi4+0x284>
 80005da:	4628      	mov	r0, r5
 80005dc:	e7d7      	b.n	800058e <__udivmoddi4+0x26e>
 80005de:	4640      	mov	r0, r8
 80005e0:	e791      	b.n	8000506 <__udivmoddi4+0x1e6>
 80005e2:	4681      	mov	r9, r0
 80005e4:	e7be      	b.n	8000564 <__udivmoddi4+0x244>
 80005e6:	4601      	mov	r1, r0
 80005e8:	e778      	b.n	80004dc <__udivmoddi4+0x1bc>
 80005ea:	3802      	subs	r0, #2
 80005ec:	443c      	add	r4, r7
 80005ee:	e745      	b.n	800047c <__udivmoddi4+0x15c>
 80005f0:	4608      	mov	r0, r1
 80005f2:	e708      	b.n	8000406 <__udivmoddi4+0xe6>
 80005f4:	f1a8 0802 	sub.w	r8, r8, #2
 80005f8:	443d      	add	r5, r7
 80005fa:	e72b      	b.n	8000454 <__udivmoddi4+0x134>

080005fc <__aeabi_idiv0>:
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop

08000600 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000604:	2003      	movs	r0, #3
 8000606:	f000 f8f6 	bl	80007f6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800060a:	2000      	movs	r0, #0
 800060c:	f016 fdd8 	bl	80171c0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000610:	f016 fbfa 	bl	8016e08 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000614:	2300      	movs	r3, #0
}
 8000616:	4618      	mov	r0, r3
 8000618:	bd80      	pop	{r7, pc}
	...

0800061c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000620:	4b06      	ldr	r3, [pc, #24]	; (800063c <HAL_IncTick+0x20>)
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	461a      	mov	r2, r3
 8000626:	4b06      	ldr	r3, [pc, #24]	; (8000640 <HAL_IncTick+0x24>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4413      	add	r3, r2
 800062c:	4a04      	ldr	r2, [pc, #16]	; (8000640 <HAL_IncTick+0x24>)
 800062e:	6013      	str	r3, [r2, #0]
}
 8000630:	bf00      	nop
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	20000004 	.word	0x20000004
 8000640:	2000480c 	.word	0x2000480c

08000644 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  return uwTick;
 8000648:	4b03      	ldr	r3, [pc, #12]	; (8000658 <HAL_GetTick+0x14>)
 800064a:	681b      	ldr	r3, [r3, #0]
}
 800064c:	4618      	mov	r0, r3
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	2000480c 	.word	0x2000480c

0800065c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b084      	sub	sp, #16
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000664:	f7ff ffee 	bl	8000644 <HAL_GetTick>
 8000668:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000674:	d005      	beq.n	8000682 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000676:	4b09      	ldr	r3, [pc, #36]	; (800069c <HAL_Delay+0x40>)
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	461a      	mov	r2, r3
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	4413      	add	r3, r2
 8000680:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000682:	bf00      	nop
 8000684:	f7ff ffde 	bl	8000644 <HAL_GetTick>
 8000688:	4602      	mov	r2, r0
 800068a:	68bb      	ldr	r3, [r7, #8]
 800068c:	1ad2      	subs	r2, r2, r3
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	429a      	cmp	r2, r3
 8000692:	d3f7      	bcc.n	8000684 <HAL_Delay+0x28>
  {
  }
}
 8000694:	bf00      	nop
 8000696:	3710      	adds	r7, #16
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	20000004 	.word	0x20000004

080006a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b085      	sub	sp, #20
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	f003 0307 	and.w	r3, r3, #7
 80006ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006b0:	4b0b      	ldr	r3, [pc, #44]	; (80006e0 <__NVIC_SetPriorityGrouping+0x40>)
 80006b2:	68db      	ldr	r3, [r3, #12]
 80006b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006b6:	68ba      	ldr	r2, [r7, #8]
 80006b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006bc:	4013      	ands	r3, r2
 80006be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006c4:	68bb      	ldr	r3, [r7, #8]
 80006c6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80006c8:	4b06      	ldr	r3, [pc, #24]	; (80006e4 <__NVIC_SetPriorityGrouping+0x44>)
 80006ca:	4313      	orrs	r3, r2
 80006cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006ce:	4a04      	ldr	r2, [pc, #16]	; (80006e0 <__NVIC_SetPriorityGrouping+0x40>)
 80006d0:	68bb      	ldr	r3, [r7, #8]
 80006d2:	60d3      	str	r3, [r2, #12]
}
 80006d4:	bf00      	nop
 80006d6:	3714      	adds	r7, #20
 80006d8:	46bd      	mov	sp, r7
 80006da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006de:	4770      	bx	lr
 80006e0:	e000ed00 	.word	0xe000ed00
 80006e4:	05fa0000 	.word	0x05fa0000

080006e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006ec:	4b04      	ldr	r3, [pc, #16]	; (8000700 <__NVIC_GetPriorityGrouping+0x18>)
 80006ee:	68db      	ldr	r3, [r3, #12]
 80006f0:	0a1b      	lsrs	r3, r3, #8
 80006f2:	f003 0307 	and.w	r3, r3, #7
}
 80006f6:	4618      	mov	r0, r3
 80006f8:	46bd      	mov	sp, r7
 80006fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fe:	4770      	bx	lr
 8000700:	e000ed00 	.word	0xe000ed00

08000704 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000704:	b480      	push	{r7}
 8000706:	b083      	sub	sp, #12
 8000708:	af00      	add	r7, sp, #0
 800070a:	4603      	mov	r3, r0
 800070c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800070e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000712:	2b00      	cmp	r3, #0
 8000714:	db0b      	blt.n	800072e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000716:	4909      	ldr	r1, [pc, #36]	; (800073c <__NVIC_EnableIRQ+0x38>)
 8000718:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800071c:	095b      	lsrs	r3, r3, #5
 800071e:	79fa      	ldrb	r2, [r7, #7]
 8000720:	f002 021f 	and.w	r2, r2, #31
 8000724:	2001      	movs	r0, #1
 8000726:	fa00 f202 	lsl.w	r2, r0, r2
 800072a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800072e:	bf00      	nop
 8000730:	370c      	adds	r7, #12
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop
 800073c:	e000e100 	.word	0xe000e100

08000740 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000740:	b480      	push	{r7}
 8000742:	b083      	sub	sp, #12
 8000744:	af00      	add	r7, sp, #0
 8000746:	4603      	mov	r3, r0
 8000748:	6039      	str	r1, [r7, #0]
 800074a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800074c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000750:	2b00      	cmp	r3, #0
 8000752:	db0a      	blt.n	800076a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000754:	490d      	ldr	r1, [pc, #52]	; (800078c <__NVIC_SetPriority+0x4c>)
 8000756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800075a:	683a      	ldr	r2, [r7, #0]
 800075c:	b2d2      	uxtb	r2, r2
 800075e:	0112      	lsls	r2, r2, #4
 8000760:	b2d2      	uxtb	r2, r2
 8000762:	440b      	add	r3, r1
 8000764:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000768:	e00a      	b.n	8000780 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800076a:	4909      	ldr	r1, [pc, #36]	; (8000790 <__NVIC_SetPriority+0x50>)
 800076c:	79fb      	ldrb	r3, [r7, #7]
 800076e:	f003 030f 	and.w	r3, r3, #15
 8000772:	3b04      	subs	r3, #4
 8000774:	683a      	ldr	r2, [r7, #0]
 8000776:	b2d2      	uxtb	r2, r2
 8000778:	0112      	lsls	r2, r2, #4
 800077a:	b2d2      	uxtb	r2, r2
 800077c:	440b      	add	r3, r1
 800077e:	761a      	strb	r2, [r3, #24]
}
 8000780:	bf00      	nop
 8000782:	370c      	adds	r7, #12
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr
 800078c:	e000e100 	.word	0xe000e100
 8000790:	e000ed00 	.word	0xe000ed00

08000794 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000794:	b480      	push	{r7}
 8000796:	b089      	sub	sp, #36	; 0x24
 8000798:	af00      	add	r7, sp, #0
 800079a:	60f8      	str	r0, [r7, #12]
 800079c:	60b9      	str	r1, [r7, #8]
 800079e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	f003 0307 	and.w	r3, r3, #7
 80007a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007a8:	69fb      	ldr	r3, [r7, #28]
 80007aa:	f1c3 0307 	rsb	r3, r3, #7
 80007ae:	2b04      	cmp	r3, #4
 80007b0:	bf28      	it	cs
 80007b2:	2304      	movcs	r3, #4
 80007b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007b6:	69fb      	ldr	r3, [r7, #28]
 80007b8:	3304      	adds	r3, #4
 80007ba:	2b06      	cmp	r3, #6
 80007bc:	d902      	bls.n	80007c4 <NVIC_EncodePriority+0x30>
 80007be:	69fb      	ldr	r3, [r7, #28]
 80007c0:	3b03      	subs	r3, #3
 80007c2:	e000      	b.n	80007c6 <NVIC_EncodePriority+0x32>
 80007c4:	2300      	movs	r3, #0
 80007c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007c8:	2201      	movs	r2, #1
 80007ca:	69bb      	ldr	r3, [r7, #24]
 80007cc:	fa02 f303 	lsl.w	r3, r2, r3
 80007d0:	1e5a      	subs	r2, r3, #1
 80007d2:	68bb      	ldr	r3, [r7, #8]
 80007d4:	401a      	ands	r2, r3
 80007d6:	697b      	ldr	r3, [r7, #20]
 80007d8:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007da:	2101      	movs	r1, #1
 80007dc:	697b      	ldr	r3, [r7, #20]
 80007de:	fa01 f303 	lsl.w	r3, r1, r3
 80007e2:	1e59      	subs	r1, r3, #1
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007e8:	4313      	orrs	r3, r2
         );
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	3724      	adds	r7, #36	; 0x24
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr

080007f6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007f6:	b580      	push	{r7, lr}
 80007f8:	b082      	sub	sp, #8
 80007fa:	af00      	add	r7, sp, #0
 80007fc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007fe:	6878      	ldr	r0, [r7, #4]
 8000800:	f7ff ff4e 	bl	80006a0 <__NVIC_SetPriorityGrouping>
}
 8000804:	bf00      	nop
 8000806:	3708      	adds	r7, #8
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}

0800080c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800080c:	b580      	push	{r7, lr}
 800080e:	b086      	sub	sp, #24
 8000810:	af00      	add	r7, sp, #0
 8000812:	4603      	mov	r3, r0
 8000814:	60b9      	str	r1, [r7, #8]
 8000816:	607a      	str	r2, [r7, #4]
 8000818:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800081a:	2300      	movs	r3, #0
 800081c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800081e:	f7ff ff63 	bl	80006e8 <__NVIC_GetPriorityGrouping>
 8000822:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000824:	687a      	ldr	r2, [r7, #4]
 8000826:	68b9      	ldr	r1, [r7, #8]
 8000828:	6978      	ldr	r0, [r7, #20]
 800082a:	f7ff ffb3 	bl	8000794 <NVIC_EncodePriority>
 800082e:	4602      	mov	r2, r0
 8000830:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000834:	4611      	mov	r1, r2
 8000836:	4618      	mov	r0, r3
 8000838:	f7ff ff82 	bl	8000740 <__NVIC_SetPriority>
}
 800083c:	bf00      	nop
 800083e:	3718      	adds	r7, #24
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}

08000844 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	4603      	mov	r3, r0
 800084c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800084e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000852:	4618      	mov	r0, r3
 8000854:	f7ff ff56 	bl	8000704 <__NVIC_EnableIRQ>
}
 8000858:	bf00      	nop
 800085a:	3708      	adds	r7, #8
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}

08000860 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000864:	f3bf 8f5f 	dmb	sy
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000868:	4a06      	ldr	r2, [pc, #24]	; (8000884 <HAL_MPU_Disable+0x24>)
 800086a:	4b06      	ldr	r3, [pc, #24]	; (8000884 <HAL_MPU_Disable+0x24>)
 800086c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800086e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000872:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000874:	4b04      	ldr	r3, [pc, #16]	; (8000888 <HAL_MPU_Disable+0x28>)
 8000876:	2200      	movs	r2, #0
 8000878:	605a      	str	r2, [r3, #4]
}
 800087a:	bf00      	nop
 800087c:	46bd      	mov	sp, r7
 800087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000882:	4770      	bx	lr
 8000884:	e000ed00 	.word	0xe000ed00
 8000888:	e000ed90 	.word	0xe000ed90

0800088c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000894:	4a0a      	ldr	r2, [pc, #40]	; (80008c0 <HAL_MPU_Enable+0x34>)
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	f043 0301 	orr.w	r3, r3, #1
 800089c:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800089e:	4a09      	ldr	r2, [pc, #36]	; (80008c4 <HAL_MPU_Enable+0x38>)
 80008a0:	4b08      	ldr	r3, [pc, #32]	; (80008c4 <HAL_MPU_Enable+0x38>)
 80008a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008a8:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80008aa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80008ae:	f3bf 8f6f 	isb	sy
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80008b2:	bf00      	nop
 80008b4:	370c      	adds	r7, #12
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	e000ed90 	.word	0xe000ed90
 80008c4:	e000ed00 	.word	0xe000ed00

080008c8 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b083      	sub	sp, #12
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80008d0:	4a1e      	ldr	r2, [pc, #120]	; (800094c <HAL_MPU_ConfigRegion+0x84>)
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	785b      	ldrb	r3, [r3, #1]
 80008d6:	6093      	str	r3, [r2, #8]

  if ((MPU_Init->Enable) != RESET)
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d028      	beq.n	8000932 <HAL_MPU_ConfigRegion+0x6a>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 80008e0:	4a1a      	ldr	r2, [pc, #104]	; (800094c <HAL_MPU_ConfigRegion+0x84>)
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	685b      	ldr	r3, [r3, #4]
 80008e6:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80008e8:	4918      	ldr	r1, [pc, #96]	; (800094c <HAL_MPU_ConfigRegion+0x84>)
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	7b1b      	ldrb	r3, [r3, #12]
 80008ee:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	7adb      	ldrb	r3, [r3, #11]
 80008f4:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80008f6:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	7a9b      	ldrb	r3, [r3, #10]
 80008fc:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80008fe:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	7b5b      	ldrb	r3, [r3, #13]
 8000904:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000906:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	7b9b      	ldrb	r3, [r3, #14]
 800090c:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800090e:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	7bdb      	ldrb	r3, [r3, #15]
 8000914:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000916:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	7a5b      	ldrb	r3, [r3, #9]
 800091c:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800091e:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	7a1b      	ldrb	r3, [r3, #8]
 8000924:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000926:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8000928:	687a      	ldr	r2, [r7, #4]
 800092a:	7812      	ldrb	r2, [r2, #0]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800092c:	4313      	orrs	r3, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800092e:	610b      	str	r3, [r1, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8000930:	e005      	b.n	800093e <HAL_MPU_ConfigRegion+0x76>
    MPU->RBAR = 0x00;
 8000932:	4b06      	ldr	r3, [pc, #24]	; (800094c <HAL_MPU_ConfigRegion+0x84>)
 8000934:	2200      	movs	r2, #0
 8000936:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8000938:	4b04      	ldr	r3, [pc, #16]	; (800094c <HAL_MPU_ConfigRegion+0x84>)
 800093a:	2200      	movs	r2, #0
 800093c:	611a      	str	r2, [r3, #16]
}
 800093e:	bf00      	nop
 8000940:	370c      	adds	r7, #12
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	e000ed90 	.word	0xe000ed90

08000950 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b088      	sub	sp, #32
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8000958:	2300      	movs	r3, #0
 800095a:	61fb      	str	r3, [r7, #28]
 800095c:	2300      	movs	r3, #0
 800095e:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8000960:	4ba9      	ldr	r3, [pc, #676]	; (8000c08 <HAL_ETH_Init+0x2b8>)
 8000962:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8000964:	2300      	movs	r3, #0
 8000966:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8000968:	2300      	movs	r3, #0
 800096a:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	2b00      	cmp	r3, #0
 8000970:	d101      	bne.n	8000976 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8000972:	2301      	movs	r3, #1
 8000974:	e183      	b.n	8000c7e <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800097c:	b2db      	uxtb	r3, r3
 800097e:	2b00      	cmp	r3, #0
 8000980:	d106      	bne.n	8000990 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	2200      	movs	r2, #0
 8000986:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800098a:	6878      	ldr	r0, [r7, #4]
 800098c:	f014 fd4c 	bl	8015428 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000990:	4a9e      	ldr	r2, [pc, #632]	; (8000c0c <HAL_ETH_Init+0x2bc>)
 8000992:	4b9e      	ldr	r3, [pc, #632]	; (8000c0c <HAL_ETH_Init+0x2bc>)
 8000994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000996:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800099a:	6453      	str	r3, [r2, #68]	; 0x44
 800099c:	4b9b      	ldr	r3, [pc, #620]	; (8000c0c <HAL_ETH_Init+0x2bc>)
 800099e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009a4:	60bb      	str	r3, [r7, #8]
 80009a6:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80009a8:	4a99      	ldr	r2, [pc, #612]	; (8000c10 <HAL_ETH_Init+0x2c0>)
 80009aa:	4b99      	ldr	r3, [pc, #612]	; (8000c10 <HAL_ETH_Init+0x2c0>)
 80009ac:	685b      	ldr	r3, [r3, #4]
 80009ae:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80009b2:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80009b4:	4996      	ldr	r1, [pc, #600]	; (8000c10 <HAL_ETH_Init+0x2c0>)
 80009b6:	4b96      	ldr	r3, [pc, #600]	; (8000c10 <HAL_ETH_Init+0x2c0>)
 80009b8:	685a      	ldr	r2, [r3, #4]
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	6a1b      	ldr	r3, [r3, #32]
 80009be:	4313      	orrs	r3, r2
 80009c0:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	687a      	ldr	r2, [r7, #4]
 80009c8:	6812      	ldr	r2, [r2, #0]
 80009ca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80009ce:	6812      	ldr	r2, [r2, #0]
 80009d0:	f042 0201 	orr.w	r2, r2, #1
 80009d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80009d8:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80009da:	f7ff fe33 	bl	8000644 <HAL_GetTick>
 80009de:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80009e0:	e011      	b.n	8000a06 <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80009e2:	f7ff fe2f 	bl	8000644 <HAL_GetTick>
 80009e6:	4602      	mov	r2, r0
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	1ad3      	subs	r3, r2, r3
 80009ec:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80009f0:	d909      	bls.n	8000a06 <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	2203      	movs	r2, #3
 80009f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	2200      	movs	r2, #0
 80009fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8000a02:	2303      	movs	r3, #3
 8000a04:	e13b      	b.n	8000c7e <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	f003 0301 	and.w	r3, r3, #1
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d1e4      	bne.n	80009e2 <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	691b      	ldr	r3, [r3, #16]
 8000a1e:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8000a20:	69fb      	ldr	r3, [r7, #28]
 8000a22:	f023 031c 	bic.w	r3, r3, #28
 8000a26:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8000a28:	f002 f8ea 	bl	8002c00 <HAL_RCC_GetHCLKFreq>
 8000a2c:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8000a2e:	69bb      	ldr	r3, [r7, #24]
 8000a30:	4a78      	ldr	r2, [pc, #480]	; (8000c14 <HAL_ETH_Init+0x2c4>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d908      	bls.n	8000a48 <HAL_ETH_Init+0xf8>
 8000a36:	69bb      	ldr	r3, [r7, #24]
 8000a38:	4a77      	ldr	r2, [pc, #476]	; (8000c18 <HAL_ETH_Init+0x2c8>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d804      	bhi.n	8000a48 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8000a3e:	69fb      	ldr	r3, [r7, #28]
 8000a40:	f043 0308 	orr.w	r3, r3, #8
 8000a44:	61fb      	str	r3, [r7, #28]
 8000a46:	e027      	b.n	8000a98 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8000a48:	69bb      	ldr	r3, [r7, #24]
 8000a4a:	4a73      	ldr	r2, [pc, #460]	; (8000c18 <HAL_ETH_Init+0x2c8>)
 8000a4c:	4293      	cmp	r3, r2
 8000a4e:	d908      	bls.n	8000a62 <HAL_ETH_Init+0x112>
 8000a50:	69bb      	ldr	r3, [r7, #24]
 8000a52:	4a72      	ldr	r2, [pc, #456]	; (8000c1c <HAL_ETH_Init+0x2cc>)
 8000a54:	4293      	cmp	r3, r2
 8000a56:	d804      	bhi.n	8000a62 <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8000a58:	69fb      	ldr	r3, [r7, #28]
 8000a5a:	f043 030c 	orr.w	r3, r3, #12
 8000a5e:	61fb      	str	r3, [r7, #28]
 8000a60:	e01a      	b.n	8000a98 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8000a62:	69bb      	ldr	r3, [r7, #24]
 8000a64:	4a6d      	ldr	r2, [pc, #436]	; (8000c1c <HAL_ETH_Init+0x2cc>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d903      	bls.n	8000a72 <HAL_ETH_Init+0x122>
 8000a6a:	69bb      	ldr	r3, [r7, #24]
 8000a6c:	4a6c      	ldr	r2, [pc, #432]	; (8000c20 <HAL_ETH_Init+0x2d0>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d911      	bls.n	8000a96 <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8000a72:	69bb      	ldr	r3, [r7, #24]
 8000a74:	4a6a      	ldr	r2, [pc, #424]	; (8000c20 <HAL_ETH_Init+0x2d0>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d908      	bls.n	8000a8c <HAL_ETH_Init+0x13c>
 8000a7a:	69bb      	ldr	r3, [r7, #24]
 8000a7c:	4a69      	ldr	r2, [pc, #420]	; (8000c24 <HAL_ETH_Init+0x2d4>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d804      	bhi.n	8000a8c <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8000a82:	69fb      	ldr	r3, [r7, #28]
 8000a84:	f043 0304 	orr.w	r3, r3, #4
 8000a88:	61fb      	str	r3, [r7, #28]
 8000a8a:	e005      	b.n	8000a98 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8000a8c:	69fb      	ldr	r3, [r7, #28]
 8000a8e:	f043 0310 	orr.w	r3, r3, #16
 8000a92:	61fb      	str	r3, [r7, #28]
 8000a94:	e000      	b.n	8000a98 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8000a96:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	69fa      	ldr	r2, [r7, #28]
 8000a9e:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8000aa0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	6878      	ldr	r0, [r7, #4]
 8000aa8:	f000 fc19 	bl	80012de <HAL_ETH_WritePHYRegister>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d00b      	beq.n	8000aca <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8000ab6:	6939      	ldr	r1, [r7, #16]
 8000ab8:	6878      	ldr	r0, [r7, #4]
 8000aba:	f000 fdcd 	bl	8001658 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	e0d9      	b.n	8000c7e <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8000aca:	20ff      	movs	r0, #255	; 0xff
 8000acc:	f7ff fdc6 	bl	800065c <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	685b      	ldr	r3, [r3, #4]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	f000 80a7 	beq.w	8000c28 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8000ada:	f7ff fdb3 	bl	8000644 <HAL_GetTick>
 8000ade:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000ae0:	f107 030c 	add.w	r3, r7, #12
 8000ae4:	461a      	mov	r2, r3
 8000ae6:	2101      	movs	r1, #1
 8000ae8:	6878      	ldr	r0, [r7, #4]
 8000aea:	f000 fb90 	bl	800120e <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8000aee:	f7ff fda9 	bl	8000644 <HAL_GetTick>
 8000af2:	4602      	mov	r2, r0
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	1ad3      	subs	r3, r2, r3
 8000af8:	f241 3288 	movw	r2, #5000	; 0x1388
 8000afc:	4293      	cmp	r3, r2
 8000afe:	d90f      	bls.n	8000b20 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8000b00:	2301      	movs	r3, #1
 8000b02:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8000b04:	6939      	ldr	r1, [r7, #16]
 8000b06:	6878      	ldr	r0, [r7, #4]
 8000b08:	f000 fda6 	bl	8001658 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	2201      	movs	r2, #1
 8000b10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	2200      	movs	r2, #0
 8000b18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8000b1c:	2303      	movs	r3, #3
 8000b1e:	e0ae      	b.n	8000c7e <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	f003 0304 	and.w	r3, r3, #4
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d0da      	beq.n	8000ae0 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8000b2a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b2e:	2100      	movs	r1, #0
 8000b30:	6878      	ldr	r0, [r7, #4]
 8000b32:	f000 fbd4 	bl	80012de <HAL_ETH_WritePHYRegister>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d00b      	beq.n	8000b54 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000b40:	6939      	ldr	r1, [r7, #16]
 8000b42:	6878      	ldr	r0, [r7, #4]
 8000b44:	f000 fd88 	bl	8001658 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8000b50:	2301      	movs	r3, #1
 8000b52:	e094      	b.n	8000c7e <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8000b54:	f7ff fd76 	bl	8000644 <HAL_GetTick>
 8000b58:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000b5a:	f107 030c 	add.w	r3, r7, #12
 8000b5e:	461a      	mov	r2, r3
 8000b60:	2101      	movs	r1, #1
 8000b62:	6878      	ldr	r0, [r7, #4]
 8000b64:	f000 fb53 	bl	800120e <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8000b68:	f7ff fd6c 	bl	8000644 <HAL_GetTick>
 8000b6c:	4602      	mov	r2, r0
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	1ad3      	subs	r3, r2, r3
 8000b72:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d90f      	bls.n	8000b9a <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8000b7e:	6939      	ldr	r1, [r7, #16]
 8000b80:	6878      	ldr	r0, [r7, #4]
 8000b82:	f000 fd69 	bl	8001658 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	2201      	movs	r2, #1
 8000b8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	2200      	movs	r2, #0
 8000b92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8000b96:	2303      	movs	r3, #3
 8000b98:	e071      	b.n	8000c7e <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	f003 0320 	and.w	r3, r3, #32
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d0da      	beq.n	8000b5a <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8000ba4:	f107 030c 	add.w	r3, r7, #12
 8000ba8:	461a      	mov	r2, r3
 8000baa:	211f      	movs	r1, #31
 8000bac:	6878      	ldr	r0, [r7, #4]
 8000bae:	f000 fb2e 	bl	800120e <HAL_ETH_ReadPHYRegister>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d00b      	beq.n	8000bd0 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000bbc:	6939      	ldr	r1, [r7, #16]
 8000bbe:	6878      	ldr	r0, [r7, #4]
 8000bc0:	f000 fd4a 	bl	8001658 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8000bcc:	2301      	movs	r3, #1
 8000bce:	e056      	b.n	8000c7e <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	f003 0310 	and.w	r3, r3, #16
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d004      	beq.n	8000be4 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000be0:	60da      	str	r2, [r3, #12]
 8000be2:	e002      	b.n	8000bea <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	2200      	movs	r2, #0
 8000be8:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	f003 0304 	and.w	r3, r3, #4
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d003      	beq.n	8000bfc <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	609a      	str	r2, [r3, #8]
 8000bfa:	e037      	b.n	8000c6c <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c02:	609a      	str	r2, [r3, #8]
 8000c04:	e032      	b.n	8000c6c <HAL_ETH_Init+0x31c>
 8000c06:	bf00      	nop
 8000c08:	03938700 	.word	0x03938700
 8000c0c:	40023800 	.word	0x40023800
 8000c10:	40013800 	.word	0x40013800
 8000c14:	01312cff 	.word	0x01312cff
 8000c18:	02160ebf 	.word	0x02160ebf
 8000c1c:	039386ff 	.word	0x039386ff
 8000c20:	05f5e0ff 	.word	0x05f5e0ff
 8000c24:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	68db      	ldr	r3, [r3, #12]
 8000c2c:	08db      	lsrs	r3, r3, #3
 8000c2e:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	689b      	ldr	r3, [r3, #8]
 8000c34:	085b      	lsrs	r3, r3, #1
 8000c36:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8000c38:	4313      	orrs	r3, r2
 8000c3a:	b29b      	uxth	r3, r3
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	2100      	movs	r1, #0
 8000c40:	6878      	ldr	r0, [r7, #4]
 8000c42:	f000 fb4c 	bl	80012de <HAL_ETH_WritePHYRegister>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d00b      	beq.n	8000c64 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000c50:	6939      	ldr	r1, [r7, #16]
 8000c52:	6878      	ldr	r0, [r7, #4]
 8000c54:	f000 fd00 	bl	8001658 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8000c60:	2301      	movs	r3, #1
 8000c62:	e00c      	b.n	8000c7e <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8000c64:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000c68:	f7ff fcf8 	bl	800065c <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8000c6c:	6939      	ldr	r1, [r7, #16]
 8000c6e:	6878      	ldr	r0, [r7, #4]
 8000c70:	f000 fcf2 	bl	8001658 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	2201      	movs	r2, #1
 8000c78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8000c7c:	2300      	movs	r3, #0
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3720      	adds	r7, #32
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop

08000c88 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b087      	sub	sp, #28
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	60f8      	str	r0, [r7, #12]
 8000c90:	60b9      	str	r1, [r7, #8]
 8000c92:	607a      	str	r2, [r7, #4]
 8000c94:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8000c96:	2300      	movs	r3, #0
 8000c98:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000ca0:	2b01      	cmp	r3, #1
 8000ca2:	d101      	bne.n	8000ca8 <HAL_ETH_DMATxDescListInit+0x20>
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	e052      	b.n	8000d4e <HAL_ETH_DMATxDescListInit+0xc6>
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	2201      	movs	r2, #1
 8000cac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	2202      	movs	r2, #2
 8000cb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	68ba      	ldr	r2, [r7, #8]
 8000cbc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	617b      	str	r3, [r7, #20]
 8000cc2:	e030      	b.n	8000d26 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	015b      	lsls	r3, r3, #5
 8000cc8:	68ba      	ldr	r2, [r7, #8]
 8000cca:	4413      	add	r3, r2
 8000ccc:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8000cce:	693b      	ldr	r3, [r7, #16]
 8000cd0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000cd4:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000cdc:	fb02 f303 	mul.w	r3, r2, r3
 8000ce0:	687a      	ldr	r2, [r7, #4]
 8000ce2:	4413      	add	r3, r2
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	693b      	ldr	r3, [r7, #16]
 8000ce8:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	69db      	ldr	r3, [r3, #28]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d105      	bne.n	8000cfe <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8000cf2:	693b      	ldr	r3, [r7, #16]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8000cfa:	693b      	ldr	r3, [r7, #16]
 8000cfc:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	1e5a      	subs	r2, r3, #1
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	429a      	cmp	r2, r3
 8000d06:	d908      	bls.n	8000d1a <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	3301      	adds	r3, #1
 8000d0c:	015b      	lsls	r3, r3, #5
 8000d0e:	68ba      	ldr	r2, [r7, #8]
 8000d10:	4413      	add	r3, r2
 8000d12:	461a      	mov	r2, r3
 8000d14:	693b      	ldr	r3, [r7, #16]
 8000d16:	60da      	str	r2, [r3, #12]
 8000d18:	e002      	b.n	8000d20 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8000d1a:	68ba      	ldr	r2, [r7, #8]
 8000d1c:	693b      	ldr	r3, [r7, #16]
 8000d1e:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	3301      	adds	r3, #1
 8000d24:	617b      	str	r3, [r7, #20]
 8000d26:	697a      	ldr	r2, [r7, #20]
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	429a      	cmp	r2, r3
 8000d2c:	d3ca      	bcc.n	8000cc4 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	6819      	ldr	r1, [r3, #0]
 8000d32:	68ba      	ldr	r2, [r7, #8]
 8000d34:	f241 0310 	movw	r3, #4112	; 0x1010
 8000d38:	440b      	add	r3, r1
 8000d3a:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	2201      	movs	r2, #1
 8000d40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	2200      	movs	r2, #0
 8000d48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8000d4c:	2300      	movs	r3, #0
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	371c      	adds	r7, #28
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr

08000d5a <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8000d5a:	b480      	push	{r7}
 8000d5c:	b087      	sub	sp, #28
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	60f8      	str	r0, [r7, #12]
 8000d62:	60b9      	str	r1, [r7, #8]
 8000d64:	607a      	str	r2, [r7, #4]
 8000d66:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000d72:	2b01      	cmp	r3, #1
 8000d74:	d101      	bne.n	8000d7a <HAL_ETH_DMARxDescListInit+0x20>
 8000d76:	2302      	movs	r3, #2
 8000d78:	e056      	b.n	8000e28 <HAL_ETH_DMARxDescListInit+0xce>
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	2202      	movs	r2, #2
 8000d86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	68ba      	ldr	r2, [r7, #8]
 8000d8e:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 8000d90:	2300      	movs	r3, #0
 8000d92:	617b      	str	r3, [r7, #20]
 8000d94:	e034      	b.n	8000e00 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	015b      	lsls	r3, r3, #5
 8000d9a:	68ba      	ldr	r2, [r7, #8]
 8000d9c:	4413      	add	r3, r2
 8000d9e:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8000da0:	693b      	ldr	r3, [r7, #16]
 8000da2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000da6:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8000da8:	693b      	ldr	r3, [r7, #16]
 8000daa:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8000dae:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000db6:	fb02 f303 	mul.w	r3, r2, r3
 8000dba:	687a      	ldr	r2, [r7, #4]
 8000dbc:	4413      	add	r3, r2
 8000dbe:	461a      	mov	r2, r3
 8000dc0:	693b      	ldr	r3, [r7, #16]
 8000dc2:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	699b      	ldr	r3, [r3, #24]
 8000dc8:	2b01      	cmp	r3, #1
 8000dca:	d105      	bne.n	8000dd8 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8000dcc:	693b      	ldr	r3, [r7, #16]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000dd4:	693b      	ldr	r3, [r7, #16]
 8000dd6:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	1e5a      	subs	r2, r3, #1
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	429a      	cmp	r2, r3
 8000de0:	d908      	bls.n	8000df4 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	3301      	adds	r3, #1
 8000de6:	015b      	lsls	r3, r3, #5
 8000de8:	68ba      	ldr	r2, [r7, #8]
 8000dea:	4413      	add	r3, r2
 8000dec:	461a      	mov	r2, r3
 8000dee:	693b      	ldr	r3, [r7, #16]
 8000df0:	60da      	str	r2, [r3, #12]
 8000df2:	e002      	b.n	8000dfa <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8000df4:	68ba      	ldr	r2, [r7, #8]
 8000df6:	693b      	ldr	r3, [r7, #16]
 8000df8:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	3301      	adds	r3, #1
 8000dfe:	617b      	str	r3, [r7, #20]
 8000e00:	697a      	ldr	r2, [r7, #20]
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	429a      	cmp	r2, r3
 8000e06:	d3c6      	bcc.n	8000d96 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	6819      	ldr	r1, [r3, #0]
 8000e0c:	68ba      	ldr	r2, [r7, #8]
 8000e0e:	f241 030c 	movw	r3, #4108	; 0x100c
 8000e12:	440b      	add	r3, r1
 8000e14:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	2201      	movs	r2, #1
 8000e1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	2200      	movs	r2, #0
 8000e22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8000e26:	2300      	movs	r3, #0
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	371c      	adds	r7, #28
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr

08000e34 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b087      	sub	sp, #28
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
 8000e3c:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	617b      	str	r3, [r7, #20]
 8000e42:	2300      	movs	r3, #0
 8000e44:	60fb      	str	r3, [r7, #12]
 8000e46:	2300      	movs	r3, #0
 8000e48:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000e50:	2b01      	cmp	r3, #1
 8000e52:	d101      	bne.n	8000e58 <HAL_ETH_TransmitFrame+0x24>
 8000e54:	2302      	movs	r3, #2
 8000e56:	e0cd      	b.n	8000ff4 <HAL_ETH_TransmitFrame+0x1c0>
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	2202      	movs	r2, #2
 8000e64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d109      	bne.n	8000e82 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	2201      	movs	r2, #1
 8000e72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	2200      	movs	r2, #0
 8000e7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8000e7e:	2301      	movs	r3, #1
 8000e80:	e0b8      	b.n	8000ff4 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	da09      	bge.n	8000ea0 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2212      	movs	r2, #18
 8000e90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2200      	movs	r2, #0
 8000e98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	e0a9      	b.n	8000ff4 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d915      	bls.n	8000ed6 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	4a54      	ldr	r2, [pc, #336]	; (8001000 <HAL_ETH_TransmitFrame+0x1cc>)
 8000eae:	fba2 2303 	umull	r2, r3, r2, r3
 8000eb2:	0a9b      	lsrs	r3, r3, #10
 8000eb4:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8000eb6:	683a      	ldr	r2, [r7, #0]
 8000eb8:	4b51      	ldr	r3, [pc, #324]	; (8001000 <HAL_ETH_TransmitFrame+0x1cc>)
 8000eba:	fba3 1302 	umull	r1, r3, r3, r2
 8000ebe:	0a9b      	lsrs	r3, r3, #10
 8000ec0:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8000ec4:	fb01 f303 	mul.w	r3, r1, r3
 8000ec8:	1ad3      	subs	r3, r2, r3
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d005      	beq.n	8000eda <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	617b      	str	r3, [r7, #20]
 8000ed4:	e001      	b.n	8000eda <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	2b01      	cmp	r3, #1
 8000ede:	d11c      	bne.n	8000f1a <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ee4:	687a      	ldr	r2, [r7, #4]
 8000ee6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000ee8:	6812      	ldr	r2, [r2, #0]
 8000eea:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8000eee:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ef4:	683a      	ldr	r2, [r7, #0]
 8000ef6:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8000efa:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f00:	687a      	ldr	r2, [r7, #4]
 8000f02:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000f04:	6812      	ldr	r2, [r2, #0]
 8000f06:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000f0a:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f10:	68db      	ldr	r3, [r3, #12]
 8000f12:	461a      	mov	r2, r3
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f18:	e04b      	b.n	8000fb2 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	613b      	str	r3, [r7, #16]
 8000f1e:	e044      	b.n	8000faa <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f24:	687a      	ldr	r2, [r7, #4]
 8000f26:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000f28:	6812      	ldr	r2, [r2, #0]
 8000f2a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000f2e:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 8000f30:	693b      	ldr	r3, [r7, #16]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d107      	bne.n	8000f46 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f3a:	687a      	ldr	r2, [r7, #4]
 8000f3c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000f3e:	6812      	ldr	r2, [r2, #0]
 8000f40:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000f44:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f4a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000f4e:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	1e5a      	subs	r2, r3, #1
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	429a      	cmp	r2, r3
 8000f58:	d116      	bne.n	8000f88 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f5e:	687a      	ldr	r2, [r7, #4]
 8000f60:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000f62:	6812      	ldr	r2, [r2, #0]
 8000f64:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8000f68:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	4a25      	ldr	r2, [pc, #148]	; (8001004 <HAL_ETH_TransmitFrame+0x1d0>)
 8000f6e:	fb02 f203 	mul.w	r2, r2, r3
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	4413      	add	r3, r2
 8000f76:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8000f7a:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f80:	68fa      	ldr	r2, [r7, #12]
 8000f82:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8000f86:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f8c:	687a      	ldr	r2, [r7, #4]
 8000f8e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000f90:	6812      	ldr	r2, [r2, #0]
 8000f92:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000f96:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f9c:	68db      	ldr	r3, [r3, #12]
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	613b      	str	r3, [r7, #16]
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	429a      	cmp	r2, r3
 8000fb0:	d3b6      	bcc.n	8000f20 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681a      	ldr	r2, [r3, #0]
 8000fb6:	f241 0314 	movw	r3, #4116	; 0x1014
 8000fba:	4413      	add	r3, r2
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f003 0304 	and.w	r3, r3, #4
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d00d      	beq.n	8000fe2 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681a      	ldr	r2, [r3, #0]
 8000fca:	f241 0314 	movw	r3, #4116	; 0x1014
 8000fce:	4413      	add	r3, r2
 8000fd0:	2204      	movs	r2, #4
 8000fd2:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	f241 0304 	movw	r3, #4100	; 0x1004
 8000fdc:	4413      	add	r3, r2
 8000fde:	2200      	movs	r2, #0
 8000fe0:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2200      	movs	r2, #0
 8000fee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8000ff2:	2300      	movs	r3, #0
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	371c      	adds	r7, #28
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr
 8001000:	ac02b00b 	.word	0xac02b00b
 8001004:	fffffa0c 	.word	0xfffffa0c

08001008 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8001008:	b480      	push	{r7}
 800100a:	b085      	sub	sp, #20
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0;
 8001010:	2300      	movs	r3, #0
 8001012:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800101a:	2b01      	cmp	r3, #1
 800101c:	d101      	bne.n	8001022 <HAL_ETH_GetReceivedFrame_IT+0x1a>
 800101e:	2302      	movs	r3, #2
 8001020:	e074      	b.n	800110c <HAL_ETH_GetReceivedFrame_IT+0x104>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2201      	movs	r2, #1
 8001026:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2202      	movs	r2, #2
 800102e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8001032:	e05a      	b.n	80010ea <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	3301      	adds	r3, #1
 8001038:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001044:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001048:	d10d      	bne.n	8001066 <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1;   
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2201      	movs	r2, #1
 8001056:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800105c:	68db      	ldr	r3, [r3, #12]
 800105e:	461a      	mov	r2, r3
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	629a      	str	r2, [r3, #40]	; 0x28
 8001064:	e041      	b.n	80010ea <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001070:	2b00      	cmp	r3, #0
 8001072:	d10b      	bne.n	800108c <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001078:	1c5a      	adds	r2, r3, #1
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	461a      	mov	r2, r3
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	629a      	str	r2, [r3, #40]	; 0x28
 800108a:	e02e      	b.n	80010ea <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001098:	1c5a      	adds	r2, r3, #1
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d103      	bne.n	80010ae <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	0c1b      	lsrs	r3, r3, #16
 80010b6:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80010ba:	1f1a      	subs	r2, r3, #4
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c4:	689a      	ldr	r2, [r3, #8]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	461a      	mov	r2, r3
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2201      	movs	r2, #1
 80010da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2200      	movs	r2, #0
 80010e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 80010e6:	2300      	movs	r3, #0
 80010e8:	e010      	b.n	800110c <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	db02      	blt.n	80010fa <HAL_ETH_GetReceivedFrame_IT+0xf2>
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	2b03      	cmp	r3, #3
 80010f8:	d99c      	bls.n	8001034 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2201      	movs	r2, #1
 80010fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2200      	movs	r2, #0
 8001106:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
}
 800110c:	4618      	mov	r0, r3
 800110e:	3714      	adds	r7, #20
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr

08001118 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	f241 0314 	movw	r3, #4116	; 0x1014
 8001128:	4413      	add	r3, r2
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001130:	2b40      	cmp	r3, #64	; 0x40
 8001132:	d112      	bne.n	800115a <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001134:	6878      	ldr	r0, [r7, #4]
 8001136:	f014 fa37 	bl	80155a8 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	f241 0314 	movw	r3, #4116	; 0x1014
 8001142:	4413      	add	r3, r2
 8001144:	2240      	movs	r2, #64	; 0x40
 8001146:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2201      	movs	r2, #1
 800114c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2200      	movs	r2, #0
 8001154:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001158:	e01b      	b.n	8001192 <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	f241 0314 	movw	r3, #4116	; 0x1014
 8001162:	4413      	add	r3, r2
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f003 0301 	and.w	r3, r3, #1
 800116a:	2b01      	cmp	r3, #1
 800116c:	d111      	bne.n	8001192 <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f000 f839 	bl	80011e6 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	f241 0314 	movw	r3, #4116	; 0x1014
 800117c:	4413      	add	r3, r2
 800117e:	2201      	movs	r2, #1
 8001180:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2201      	movs	r2, #1
 8001186:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2200      	movs	r2, #0
 800118e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	f241 0314 	movw	r3, #4116	; 0x1014
 800119a:	4413      	add	r3, r2
 800119c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80011a0:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	f241 0314 	movw	r3, #4116	; 0x1014
 80011aa:	4413      	add	r3, r2
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80011b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80011b6:	d112      	bne.n	80011de <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	f000 f81e 	bl	80011fa <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	f241 0314 	movw	r3, #4116	; 0x1014
 80011c6:	4413      	add	r3, r2
 80011c8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011cc:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2201      	movs	r2, #1
 80011d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2200      	movs	r2, #0
 80011da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 80011de:	bf00      	nop
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}

080011e6 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 80011e6:	b480      	push	{r7}
 80011e8:	b083      	sub	sp, #12
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 80011ee:	bf00      	nop
 80011f0:	370c      	adds	r7, #12
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr

080011fa <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 80011fa:	b480      	push	{r7}
 80011fc:	b083      	sub	sp, #12
 80011fe:	af00      	add	r7, sp, #0
 8001200:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */ 
}
 8001202:	bf00      	nop
 8001204:	370c      	adds	r7, #12
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr

0800120e <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 800120e:	b580      	push	{r7, lr}
 8001210:	b086      	sub	sp, #24
 8001212:	af00      	add	r7, sp, #0
 8001214:	60f8      	str	r0, [r7, #12]
 8001216:	460b      	mov	r3, r1
 8001218:	607a      	str	r2, [r7, #4]
 800121a:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 800121c:	2300      	movs	r3, #0
 800121e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001220:	2300      	movs	r3, #0
 8001222:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800122a:	b2db      	uxtb	r3, r3
 800122c:	2b82      	cmp	r3, #130	; 0x82
 800122e:	d101      	bne.n	8001234 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001230:	2302      	movs	r3, #2
 8001232:	e050      	b.n	80012d6 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	2282      	movs	r2, #130	; 0x82
 8001238:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	691b      	ldr	r3, [r3, #16]
 8001242:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	f003 031c 	and.w	r3, r3, #28
 800124a:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	8a1b      	ldrh	r3, [r3, #16]
 8001250:	02db      	lsls	r3, r3, #11
 8001252:	b29b      	uxth	r3, r3
 8001254:	697a      	ldr	r2, [r7, #20]
 8001256:	4313      	orrs	r3, r2
 8001258:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 800125a:	897b      	ldrh	r3, [r7, #10]
 800125c:	019b      	lsls	r3, r3, #6
 800125e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001262:	697a      	ldr	r2, [r7, #20]
 8001264:	4313      	orrs	r3, r2
 8001266:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	f023 0302 	bic.w	r3, r3, #2
 800126e:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	f043 0301 	orr.w	r3, r3, #1
 8001276:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	697a      	ldr	r2, [r7, #20]
 800127e:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001280:	f7ff f9e0 	bl	8000644 <HAL_GetTick>
 8001284:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001286:	e015      	b.n	80012b4 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001288:	f7ff f9dc 	bl	8000644 <HAL_GetTick>
 800128c:	4602      	mov	r2, r0
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001296:	d309      	bcc.n	80012ac <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	2201      	movs	r2, #1
 800129c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	2200      	movs	r2, #0
 80012a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80012a8:	2303      	movs	r3, #3
 80012aa:	e014      	b.n	80012d6 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	691b      	ldr	r3, [r3, #16]
 80012b2:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	f003 0301 	and.w	r3, r3, #1
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d1e4      	bne.n	8001288 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	695b      	ldr	r3, [r3, #20]
 80012c4:	b29b      	uxth	r3, r3
 80012c6:	461a      	mov	r2, r3
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	2201      	movs	r2, #1
 80012d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80012d4:	2300      	movs	r3, #0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3718      	adds	r7, #24
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}

080012de <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 80012de:	b580      	push	{r7, lr}
 80012e0:	b086      	sub	sp, #24
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	60f8      	str	r0, [r7, #12]
 80012e6:	460b      	mov	r3, r1
 80012e8:	607a      	str	r2, [r7, #4]
 80012ea:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 80012ec:	2300      	movs	r3, #0
 80012ee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 80012f0:	2300      	movs	r3, #0
 80012f2:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	2b42      	cmp	r3, #66	; 0x42
 80012fe:	d101      	bne.n	8001304 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001300:	2302      	movs	r3, #2
 8001302:	e04e      	b.n	80013a2 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	2242      	movs	r2, #66	; 0x42
 8001308:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	691b      	ldr	r3, [r3, #16]
 8001312:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	f003 031c 	and.w	r3, r3, #28
 800131a:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	8a1b      	ldrh	r3, [r3, #16]
 8001320:	02db      	lsls	r3, r3, #11
 8001322:	b29b      	uxth	r3, r3
 8001324:	697a      	ldr	r2, [r7, #20]
 8001326:	4313      	orrs	r3, r2
 8001328:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 800132a:	897b      	ldrh	r3, [r7, #10]
 800132c:	019b      	lsls	r3, r3, #6
 800132e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001332:	697a      	ldr	r2, [r7, #20]
 8001334:	4313      	orrs	r3, r2
 8001336:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	f043 0302 	orr.w	r3, r3, #2
 800133e:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	f043 0301 	orr.w	r3, r3, #1
 8001346:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	687a      	ldr	r2, [r7, #4]
 800134e:	b292      	uxth	r2, r2
 8001350:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	697a      	ldr	r2, [r7, #20]
 8001358:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800135a:	f7ff f973 	bl	8000644 <HAL_GetTick>
 800135e:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001360:	e015      	b.n	800138e <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001362:	f7ff f96f 	bl	8000644 <HAL_GetTick>
 8001366:	4602      	mov	r2, r0
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	1ad3      	subs	r3, r2, r3
 800136c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001370:	d309      	bcc.n	8001386 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	2201      	movs	r2, #1
 8001376:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	2200      	movs	r2, #0
 800137e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001382:	2303      	movs	r3, #3
 8001384:	e00d      	b.n	80013a2 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	691b      	ldr	r3, [r3, #16]
 800138c:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	f003 0301 	and.w	r3, r3, #1
 8001394:	2b00      	cmp	r3, #0
 8001396:	d1e4      	bne.n	8001362 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	2201      	movs	r2, #1
 800139c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 80013a0:	2300      	movs	r3, #0
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3718      	adds	r7, #24
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}

080013aa <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 80013aa:	b580      	push	{r7, lr}
 80013ac:	b082      	sub	sp, #8
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	d101      	bne.n	80013c0 <HAL_ETH_Start+0x16>
 80013bc:	2302      	movs	r3, #2
 80013be:	e01f      	b.n	8001400 <HAL_ETH_Start+0x56>
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2201      	movs	r2, #1
 80013c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2202      	movs	r2, #2
 80013cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	f000 fb41 	bl	8001a58 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 80013d6:	6878      	ldr	r0, [r7, #4]
 80013d8:	f000 fb78 	bl	8001acc <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f000 fc0f 	bl	8001c00 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f000 fbac 	bl	8001b40 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	f000 fbd9 	bl	8001ba0 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2201      	movs	r2, #1
 80013f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2200      	movs	r2, #0
 80013fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80013fe:	2300      	movs	r3, #0
}
 8001400:	4618      	mov	r0, r3
 8001402:	3708      	adds	r7, #8
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}

08001408 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001416:	2b01      	cmp	r3, #1
 8001418:	d101      	bne.n	800141e <HAL_ETH_Stop+0x16>
 800141a:	2302      	movs	r3, #2
 800141c:	e01f      	b.n	800145e <HAL_ETH_Stop+0x56>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2201      	movs	r2, #1
 8001422:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2202      	movs	r2, #2
 800142a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 800142e:	6878      	ldr	r0, [r7, #4]
 8001430:	f000 fb9e 	bl	8001b70 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f000 fbcb 	bl	8001bd0 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f000 fb63 	bl	8001b06 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001440:	6878      	ldr	r0, [r7, #4]
 8001442:	f000 fbdd 	bl	8001c00 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f000 fb23 	bl	8001a92 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2201      	movs	r2, #1
 8001450:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2200      	movs	r2, #0
 8001458:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800145c:	2300      	movs	r3, #0
}
 800145e:	4618      	mov	r0, r3
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
	...

08001468 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8001472:	2300      	movs	r3, #0
 8001474:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800147c:	2b01      	cmp	r3, #1
 800147e:	d101      	bne.n	8001484 <HAL_ETH_ConfigMAC+0x1c>
 8001480:	2302      	movs	r3, #2
 8001482:	e0e3      	b.n	800164c <HAL_ETH_ConfigMAC+0x1e4>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2201      	movs	r2, #1
 8001488:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2202      	movs	r2, #2
 8001490:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	2b00      	cmp	r3, #0
 8001498:	f000 80b0 	beq.w	80015fc <HAL_ETH_ConfigMAC+0x194>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 80014a4:	68fa      	ldr	r2, [r7, #12]
 80014a6:	4b6b      	ldr	r3, [pc, #428]	; (8001654 <HAL_ETH_ConfigMAC+0x1ec>)
 80014a8:	4013      	ands	r3, r2
 80014aa:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 80014b4:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 80014ba:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 80014c0:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 80014c6:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 80014cc:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 80014d2:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 80014d8:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 80014de:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 80014e4:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 80014ea:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 80014f0:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 80014f6:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 80014f8:	68fa      	ldr	r2, [r7, #12]
 80014fa:	4313      	orrs	r3, r2
 80014fc:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	68fa      	ldr	r2, [r7, #12]
 8001504:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800150e:	2001      	movs	r0, #1
 8001510:	f7ff f8a4 	bl	800065c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	68fa      	ldr	r2, [r7, #12]
 800151a:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	683a      	ldr	r2, [r7, #0]
 8001522:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8001524:	683a      	ldr	r2, [r7, #0]
 8001526:	6b12      	ldr	r2, [r2, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001528:	4311      	orrs	r1, r2
                                          macconf->PassControlFrames |
 800152a:	683a      	ldr	r2, [r7, #0]
 800152c:	6b52      	ldr	r2, [r2, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 800152e:	4311      	orrs	r1, r2
                                          macconf->BroadcastFramesReception | 
 8001530:	683a      	ldr	r2, [r7, #0]
 8001532:	6b92      	ldr	r2, [r2, #56]	; 0x38
                                          macconf->PassControlFrames |
 8001534:	4311      	orrs	r1, r2
                                          macconf->DestinationAddrFilter |
 8001536:	683a      	ldr	r2, [r7, #0]
 8001538:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 800153a:	4311      	orrs	r1, r2
                                          macconf->PromiscuousMode |
 800153c:	683a      	ldr	r2, [r7, #0]
 800153e:	6c12      	ldr	r2, [r2, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8001540:	4311      	orrs	r1, r2
                                          macconf->MulticastFramesFilter |
 8001542:	683a      	ldr	r2, [r7, #0]
 8001544:	6c52      	ldr	r2, [r2, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8001546:	4311      	orrs	r1, r2
                                          macconf->UnicastFramesFilter);
 8001548:	683a      	ldr	r2, [r7, #0]
 800154a:	6c92      	ldr	r2, [r2, #72]	; 0x48
                                          macconf->MulticastFramesFilter |
 800154c:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800154e:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFFR;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001558:	2001      	movs	r0, #1
 800155a:	f7ff f87f 	bl	800065c <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	68fa      	ldr	r2, [r7, #12]
 8001564:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	683a      	ldr	r2, [r7, #0]
 800156c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800156e:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	683a      	ldr	r2, [r7, #0]
 8001576:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001578:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg = (heth->Instance)->MACFCR;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	699b      	ldr	r3, [r3, #24]
 8001580:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8001582:	68fa      	ldr	r2, [r7, #12]
 8001584:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001588:	4013      	ands	r3, r2
 800158a:	60fb      	str	r3, [r7, #12]
     
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001590:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8001596:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 800159c:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 80015a2:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 80015a8:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 80015ae:	4313      	orrs	r3, r2
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 80015b0:	68fa      	ldr	r2, [r7, #12]
 80015b2:	4313      	orrs	r3, r2
 80015b4:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	68fa      	ldr	r2, [r7, #12]
 80015bc:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFCR;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	699b      	ldr	r3, [r3, #24]
 80015c4:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80015c6:	2001      	movs	r0, #1
 80015c8:	f7ff f848 	bl	800065c <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	68fa      	ldr	r2, [r7, #12]
 80015d2:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	683a      	ldr	r2, [r7, #0]
 80015da:	6ed1      	ldr	r1, [r2, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 80015dc:	683a      	ldr	r2, [r7, #0]
 80015de:	6f12      	ldr	r2, [r2, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 80015e0:	430a      	orrs	r2, r1
 80015e2:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg = (heth->Instance)->MACVLANTR;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	69db      	ldr	r3, [r3, #28]
 80015ea:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 80015ec:	2001      	movs	r0, #1
 80015ee:	f7ff f835 	bl	800065c <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	68fa      	ldr	r2, [r7, #12]
 80015f8:	61da      	str	r2, [r3, #28]
 80015fa:	e01e      	b.n	800163a <HAL_ETH_ConfigMAC+0x1d2>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg &= ~((uint32_t)0x00004800);
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800160a:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	689a      	ldr	r2, [r3, #8]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	4313      	orrs	r3, r2
 8001616:	68fa      	ldr	r2, [r7, #12]
 8001618:	4313      	orrs	r3, r2
 800161a:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	68fa      	ldr	r2, [r7, #12]
 8001622:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800162c:	2001      	movs	r0, #1
 800162e:	f7ff f815 	bl	800065c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	68fa      	ldr	r2, [r7, #12]
 8001638:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2201      	movs	r2, #1
 800163e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2200      	movs	r2, #0
 8001646:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 800164a:	2300      	movs	r3, #0
}
 800164c:	4618      	mov	r0, r3
 800164e:	3710      	adds	r7, #16
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	ff20810f 	.word	0xff20810f

08001658 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b0b0      	sub	sp, #192	; 0xc0
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8001662:	2300      	movs	r3, #0
 8001664:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d007      	beq.n	800167e <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001674:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800167c:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 800167e:	2300      	movs	r3, #0
 8001680:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001682:	2300      	movs	r3, #0
 8001684:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001686:	2300      	movs	r3, #0
 8001688:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800168a:	2300      	movs	r3, #0
 800168c:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 800168e:	2300      	movs	r3, #0
 8001690:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001692:	2300      	movs	r3, #0
 8001694:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	69db      	ldr	r3, [r3, #28]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d103      	bne.n	80016a6 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 800169e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016a2:	663b      	str	r3, [r7, #96]	; 0x60
 80016a4:	e001      	b.n	80016aa <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80016a6:	2300      	movs	r3, #0
 80016a8:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 80016aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016ae:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 80016b0:	2300      	movs	r3, #0
 80016b2:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80016b4:	2300      	movs	r3, #0
 80016b6:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 80016b8:	2300      	movs	r3, #0
 80016ba:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 80016bc:	2300      	movs	r3, #0
 80016be:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 80016c0:	2300      	movs	r3, #0
 80016c2:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 80016c4:	2340      	movs	r3, #64	; 0x40
 80016c6:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 80016c8:	2300      	movs	r3, #0
 80016ca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 80016ce:	2300      	movs	r3, #0
 80016d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 80016d4:	2300      	movs	r3, #0
 80016d6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 80016da:	2300      	movs	r3, #0
 80016dc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80016e0:	2300      	movs	r3, #0
 80016e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 80016e6:	2300      	movs	r3, #0
 80016e8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 80016ec:	2300      	movs	r3, #0
 80016ee:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 80016f2:	2300      	movs	r3, #0
 80016f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 80016f8:	2380      	movs	r3, #128	; 0x80
 80016fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80016fe:	2300      	movs	r3, #0
 8001700:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001704:	2300      	movs	r3, #0
 8001706:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800170a:	2300      	movs	r3, #0
 800170c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001710:	2300      	movs	r3, #0
 8001712:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8001716:	2300      	movs	r3, #0
 8001718:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 800171c:	2300      	movs	r3, #0
 800171e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 800172c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001730:	4baa      	ldr	r3, [pc, #680]	; (80019dc <ETH_MACDMAConfig+0x384>)
 8001732:	4013      	ands	r3, r2
 8001734:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001738:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 800173a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800173c:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 800173e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8001740:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8001742:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8001744:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 800174a:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 800174c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 800174e:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8001750:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8001752:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8001758:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 800175a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 800175c:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 800175e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8001760:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8001762:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8001764:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8001766:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8001768:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 800176a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 800176c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800176e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001772:	4313      	orrs	r3, r2
 8001774:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001780:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800178c:	2001      	movs	r0, #1
 800178e:	f7fe ff65 	bl	800065c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800179a:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	6f79      	ldr	r1, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 80017a2:	6fba      	ldr	r2, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80017a4:	4311      	orrs	r1, r2
                                        macinit.PassControlFrames |
 80017a6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 80017a8:	4311      	orrs	r1, r2
                                        macinit.BroadcastFramesReception | 
 80017aa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 80017ae:	4311      	orrs	r1, r2
                                        macinit.DestinationAddrFilter |
 80017b0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 80017b4:	4311      	orrs	r1, r2
                                        macinit.PromiscuousMode |
 80017b6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 80017ba:	4311      	orrs	r1, r2
                                        macinit.MulticastFramesFilter |
 80017bc:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 80017c0:	4311      	orrs	r1, r2
                                        macinit.UnicastFramesFilter);
 80017c2:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
                                        macinit.MulticastFramesFilter |
 80017c6:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80017c8:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80017d4:	2001      	movs	r0, #1
 80017d6:	f7fe ff41 	bl	800065c <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80017e2:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80017ec:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80017f6:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	699b      	ldr	r3, [r3, #24]
 80017fe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8001802:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001806:	f64f 7341 	movw	r3, #65345	; 0xff41
 800180a:	4013      	ands	r3, r2
 800180c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001810:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001814:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8001816:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800181a:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 800181c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8001820:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8001822:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8001826:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8001828:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 800182c:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 800182e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8001832:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001834:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001838:	4313      	orrs	r3, r2
 800183a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001846:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	699b      	ldr	r3, [r3, #24]
 800184e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001852:	2001      	movs	r0, #1
 8001854:	f7fe ff02 	bl	800065c <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001860:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 800186a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800186e:	430a      	orrs	r2, r1
 8001870:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	69db      	ldr	r3, [r3, #28]
 8001878:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800187c:	2001      	movs	r0, #1
 800187e:	f7fe feed 	bl	800065c <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800188a:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 800188c:	2300      	movs	r3, #0
 800188e:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8001890:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001894:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8001896:	2300      	movs	r3, #0
 8001898:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 800189a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800189e:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80018a0:	2300      	movs	r3, #0
 80018a2:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 80018a4:	2300      	movs	r3, #0
 80018a6:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 80018a8:	2300      	movs	r3, #0
 80018aa:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80018ac:	2300      	movs	r3, #0
 80018ae:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 80018b0:	2304      	movs	r3, #4
 80018b2:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 80018b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 80018ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018be:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80018c0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80018c4:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80018c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018ca:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 80018cc:	2380      	movs	r3, #128	; 0x80
 80018ce:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 80018d0:	2300      	movs	r3, #0
 80018d2:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80018d4:	2300      	movs	r3, #0
 80018d6:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	f241 0318 	movw	r3, #4120	; 0x1018
 80018e0:	4413      	add	r3, r2
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 80018e8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80018ec:	4b3c      	ldr	r3, [pc, #240]	; (80019e0 <ETH_MACDMAConfig+0x388>)
 80018ee:	4013      	ands	r3, r2
 80018f0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80018f4:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 80018f6:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80018f8:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 80018fa:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 80018fc:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 80018fe:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8001900:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8001902:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8001904:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8001906:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8001908:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 800190a:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 800190c:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 800190e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8001910:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8001912:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8001914:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001916:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800191a:	4313      	orrs	r3, r2
 800191c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	f241 0318 	movw	r3, #4120	; 0x1018
 8001928:	4413      	add	r3, r2
 800192a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800192e:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	f241 0318 	movw	r3, #4120	; 0x1018
 8001938:	4413      	add	r3, r2
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001940:	2001      	movs	r0, #1
 8001942:	f7fe fe8b 	bl	800065c <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	f241 0318 	movw	r3, #4120	; 0x1018
 800194e:	4413      	add	r3, r2
 8001950:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001954:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 800195c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800195e:	4311      	orrs	r1, r2
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001960:	6b7a      	ldr	r2, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8001962:	4311      	orrs	r1, r2
                                          dmainit.TxDMABurstLength |
 8001964:	6bba      	ldr	r2, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001966:	4311      	orrs	r1, r2
                                          dmainit.EnhancedDescriptorFormat |
 8001968:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 800196a:	4311      	orrs	r1, r2
                                          (dmainit.DescriptorSkipLength << 2) |
 800196c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800196e:	0092      	lsls	r2, r2, #2
                                          dmainit.EnhancedDescriptorFormat |
 8001970:	4311      	orrs	r1, r2
                                          dmainit.DMAArbitration |
 8001972:	6c7a      	ldr	r2, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8001974:	430a      	orrs	r2, r1
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001976:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800197a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800197e:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800198e:	2001      	movs	r0, #1
 8001990:	f7fe fe64 	bl	800065c <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800199c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80019a0:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	699b      	ldr	r3, [r3, #24]
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d10d      	bne.n	80019c6 <ETH_MACDMAConfig+0x36e>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6819      	ldr	r1, [r3, #0]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	f241 031c 	movw	r3, #4124	; 0x101c
 80019b6:	4413      	add	r3, r2
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a0a      	ldr	r2, [pc, #40]	; (80019e4 <ETH_MACDMAConfig+0x38c>)
 80019bc:	431a      	orrs	r2, r3
 80019be:	f241 031c 	movw	r3, #4124	; 0x101c
 80019c2:	440b      	add	r3, r1
 80019c4:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	695b      	ldr	r3, [r3, #20]
 80019ca:	461a      	mov	r2, r3
 80019cc:	2100      	movs	r1, #0
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f000 f80a 	bl	80019e8 <ETH_MACAddressConfig>
}
 80019d4:	bf00      	nop
 80019d6:	37c0      	adds	r7, #192	; 0xc0
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	ff20810f 	.word	0xff20810f
 80019e0:	f8de3f23 	.word	0xf8de3f23
 80019e4:	00010040 	.word	0x00010040

080019e8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b087      	sub	sp, #28
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	60f8      	str	r0, [r7, #12]
 80019f0:	60b9      	str	r1, [r7, #8]
 80019f2:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	3305      	adds	r3, #5
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	021b      	lsls	r3, r3, #8
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	3204      	adds	r2, #4
 8001a00:	7812      	ldrb	r2, [r2, #0]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8001a06:	68ba      	ldr	r2, [r7, #8]
 8001a08:	4b11      	ldr	r3, [pc, #68]	; (8001a50 <ETH_MACAddressConfig+0x68>)
 8001a0a:	4413      	add	r3, r2
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	3303      	adds	r3, #3
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	061a      	lsls	r2, r3, #24
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	3302      	adds	r3, #2
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	041b      	lsls	r3, r3, #16
 8001a22:	431a      	orrs	r2, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	3301      	adds	r3, #1
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	021b      	lsls	r3, r3, #8
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	7812      	ldrb	r2, [r2, #0]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8001a36:	68ba      	ldr	r2, [r7, #8]
 8001a38:	4b06      	ldr	r3, [pc, #24]	; (8001a54 <ETH_MACAddressConfig+0x6c>)
 8001a3a:	4413      	add	r3, r2
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	6013      	str	r3, [r2, #0]
}
 8001a42:	bf00      	nop
 8001a44:	371c      	adds	r7, #28
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	40028040 	.word	0x40028040
 8001a54:	40028044 	.word	0x40028044

08001a58 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001a60:	2300      	movs	r3, #0
 8001a62:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	687a      	ldr	r2, [r7, #4]
 8001a6a:	6812      	ldr	r2, [r2, #0]
 8001a6c:	6812      	ldr	r2, [r2, #0]
 8001a6e:	f042 0208 	orr.w	r2, r2, #8
 8001a72:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a7c:	2001      	movs	r0, #1
 8001a7e:	f7fe fded 	bl	800065c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	68fa      	ldr	r2, [r7, #12]
 8001a88:	601a      	str	r2, [r3, #0]
}
 8001a8a:	bf00      	nop
 8001a8c:	3710      	adds	r7, #16
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b084      	sub	sp, #16
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	687a      	ldr	r2, [r7, #4]
 8001aa4:	6812      	ldr	r2, [r2, #0]
 8001aa6:	6812      	ldr	r2, [r2, #0]
 8001aa8:	f022 0208 	bic.w	r2, r2, #8
 8001aac:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ab6:	2001      	movs	r0, #1
 8001ab8:	f7fe fdd0 	bl	800065c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	68fa      	ldr	r2, [r7, #12]
 8001ac2:	601a      	str	r2, [r3, #0]
}
 8001ac4:	bf00      	nop
 8001ac6:	3710      	adds	r7, #16
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}

08001acc <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b084      	sub	sp, #16
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	687a      	ldr	r2, [r7, #4]
 8001ade:	6812      	ldr	r2, [r2, #0]
 8001ae0:	6812      	ldr	r2, [r2, #0]
 8001ae2:	f042 0204 	orr.w	r2, r2, #4
 8001ae6:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001af0:	2001      	movs	r0, #1
 8001af2:	f7fe fdb3 	bl	800065c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	68fa      	ldr	r2, [r7, #12]
 8001afc:	601a      	str	r2, [r3, #0]
}
 8001afe:	bf00      	nop
 8001b00:	3710      	adds	r7, #16
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}

08001b06 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8001b06:	b580      	push	{r7, lr}
 8001b08:	b084      	sub	sp, #16
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	6812      	ldr	r2, [r2, #0]
 8001b1a:	6812      	ldr	r2, [r2, #0]
 8001b1c:	f022 0204 	bic.w	r2, r2, #4
 8001b20:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b2a:	2001      	movs	r0, #1
 8001b2c:	f7fe fd96 	bl	800065c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	68fa      	ldr	r2, [r7, #12]
 8001b36:	601a      	str	r2, [r3, #0]
}
 8001b38:	bf00      	nop
 8001b3a:	3710      	adds	r7, #16
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}

08001b40 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6819      	ldr	r1, [r3, #0]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	f241 0318 	movw	r3, #4120	; 0x1018
 8001b54:	4413      	add	r3, r2
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001b5c:	f241 0318 	movw	r3, #4120	; 0x1018
 8001b60:	440b      	add	r3, r1
 8001b62:	601a      	str	r2, [r3, #0]
}
 8001b64:	bf00      	nop
 8001b66:	370c      	adds	r7, #12
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr

08001b70 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6819      	ldr	r1, [r3, #0]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	f241 0318 	movw	r3, #4120	; 0x1018
 8001b84:	4413      	add	r3, r2
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8001b8c:	f241 0318 	movw	r3, #4120	; 0x1018
 8001b90:	440b      	add	r3, r1
 8001b92:	601a      	str	r2, [r3, #0]
}
 8001b94:	bf00      	nop
 8001b96:	370c      	adds	r7, #12
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr

08001ba0 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6819      	ldr	r1, [r3, #0]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	f241 0318 	movw	r3, #4120	; 0x1018
 8001bb4:	4413      	add	r3, r2
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f043 0202 	orr.w	r2, r3, #2
 8001bbc:	f241 0318 	movw	r3, #4120	; 0x1018
 8001bc0:	440b      	add	r3, r1
 8001bc2:	601a      	str	r2, [r3, #0]
}
 8001bc4:	bf00      	nop
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6819      	ldr	r1, [r3, #0]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	f241 0318 	movw	r3, #4120	; 0x1018
 8001be4:	4413      	add	r3, r2
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f023 0202 	bic.w	r2, r3, #2
 8001bec:	f241 0318 	movw	r3, #4120	; 0x1018
 8001bf0:	440b      	add	r3, r1
 8001bf2:	601a      	str	r2, [r3, #0]
}
 8001bf4:	bf00      	nop
 8001bf6:	370c      	adds	r7, #12
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr

08001c00 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b084      	sub	sp, #16
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6819      	ldr	r1, [r3, #0]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	f241 0318 	movw	r3, #4120	; 0x1018
 8001c18:	4413      	add	r3, r2
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001c20:	f241 0318 	movw	r3, #4120	; 0x1018
 8001c24:	440b      	add	r3, r1
 8001c26:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	f241 0318 	movw	r3, #4120	; 0x1018
 8001c30:	4413      	add	r3, r2
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c36:	2001      	movs	r0, #1
 8001c38:	f7fe fd10 	bl	800065c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6819      	ldr	r1, [r3, #0]
 8001c40:	68fa      	ldr	r2, [r7, #12]
 8001c42:	f241 0318 	movw	r3, #4120	; 0x1018
 8001c46:	440b      	add	r3, r1
 8001c48:	601a      	str	r2, [r3, #0]
}
 8001c4a:	bf00      	nop
 8001c4c:	3710      	adds	r7, #16
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
	...

08001c54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b089      	sub	sp, #36	; 0x24
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001c62:	2300      	movs	r3, #0
 8001c64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001c66:	2300      	movs	r3, #0
 8001c68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001c6e:	2300      	movs	r3, #0
 8001c70:	61fb      	str	r3, [r7, #28]
 8001c72:	e175      	b.n	8001f60 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001c74:	2201      	movs	r2, #1
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	4013      	ands	r3, r2
 8001c86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c88:	693a      	ldr	r2, [r7, #16]
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	f040 8164 	bne.w	8001f5a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d00b      	beq.n	8001cb2 <HAL_GPIO_Init+0x5e>
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d007      	beq.n	8001cb2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ca6:	2b11      	cmp	r3, #17
 8001ca8:	d003      	beq.n	8001cb2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	2b12      	cmp	r3, #18
 8001cb0:	d130      	bne.n	8001d14 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	005b      	lsls	r3, r3, #1
 8001cbc:	2203      	movs	r2, #3
 8001cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc2:	43db      	mvns	r3, r3
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	68da      	ldr	r2, [r3, #12]
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	005b      	lsls	r3, r3, #1
 8001cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd6:	69ba      	ldr	r2, [r7, #24]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	69ba      	ldr	r2, [r7, #24]
 8001ce0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ce8:	2201      	movs	r2, #1
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf0:	43db      	mvns	r3, r3
 8001cf2:	69ba      	ldr	r2, [r7, #24]
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	091b      	lsrs	r3, r3, #4
 8001cfe:	f003 0201 	and.w	r2, r3, #1
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	fa02 f303 	lsl.w	r3, r2, r3
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	005b      	lsls	r3, r3, #1
 8001d1e:	2203      	movs	r2, #3
 8001d20:	fa02 f303 	lsl.w	r3, r2, r3
 8001d24:	43db      	mvns	r3, r3
 8001d26:	69ba      	ldr	r2, [r7, #24]
 8001d28:	4013      	ands	r3, r2
 8001d2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	689a      	ldr	r2, [r3, #8]
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	005b      	lsls	r3, r3, #1
 8001d34:	fa02 f303 	lsl.w	r3, r2, r3
 8001d38:	69ba      	ldr	r2, [r7, #24]
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	69ba      	ldr	r2, [r7, #24]
 8001d42:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	2b02      	cmp	r3, #2
 8001d4a:	d003      	beq.n	8001d54 <HAL_GPIO_Init+0x100>
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	2b12      	cmp	r3, #18
 8001d52:	d123      	bne.n	8001d9c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	08da      	lsrs	r2, r3, #3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	3208      	adds	r2, #8
 8001d5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	f003 0307 	and.w	r3, r3, #7
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	220f      	movs	r2, #15
 8001d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d70:	43db      	mvns	r3, r3
 8001d72:	69ba      	ldr	r2, [r7, #24]
 8001d74:	4013      	ands	r3, r2
 8001d76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	691a      	ldr	r2, [r3, #16]
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	f003 0307 	and.w	r3, r3, #7
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	fa02 f303 	lsl.w	r3, r2, r3
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	08da      	lsrs	r2, r3, #3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	3208      	adds	r2, #8
 8001d96:	69b9      	ldr	r1, [r7, #24]
 8001d98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	005b      	lsls	r3, r3, #1
 8001da6:	2203      	movs	r2, #3
 8001da8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dac:	43db      	mvns	r3, r3
 8001dae:	69ba      	ldr	r2, [r7, #24]
 8001db0:	4013      	ands	r3, r2
 8001db2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f003 0203 	and.w	r2, r3, #3
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	005b      	lsls	r3, r3, #1
 8001dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc4:	69ba      	ldr	r2, [r7, #24]
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	f000 80be 	beq.w	8001f5a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dde:	4a65      	ldr	r2, [pc, #404]	; (8001f74 <HAL_GPIO_Init+0x320>)
 8001de0:	4b64      	ldr	r3, [pc, #400]	; (8001f74 <HAL_GPIO_Init+0x320>)
 8001de2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001de8:	6453      	str	r3, [r2, #68]	; 0x44
 8001dea:	4b62      	ldr	r3, [pc, #392]	; (8001f74 <HAL_GPIO_Init+0x320>)
 8001dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001df2:	60fb      	str	r3, [r7, #12]
 8001df4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001df6:	4a60      	ldr	r2, [pc, #384]	; (8001f78 <HAL_GPIO_Init+0x324>)
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	089b      	lsrs	r3, r3, #2
 8001dfc:	3302      	adds	r3, #2
 8001dfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e02:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	f003 0303 	and.w	r3, r3, #3
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	220f      	movs	r2, #15
 8001e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e12:	43db      	mvns	r3, r3
 8001e14:	69ba      	ldr	r2, [r7, #24]
 8001e16:	4013      	ands	r3, r2
 8001e18:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4a57      	ldr	r2, [pc, #348]	; (8001f7c <HAL_GPIO_Init+0x328>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d037      	beq.n	8001e92 <HAL_GPIO_Init+0x23e>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4a56      	ldr	r2, [pc, #344]	; (8001f80 <HAL_GPIO_Init+0x32c>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d031      	beq.n	8001e8e <HAL_GPIO_Init+0x23a>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4a55      	ldr	r2, [pc, #340]	; (8001f84 <HAL_GPIO_Init+0x330>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d02b      	beq.n	8001e8a <HAL_GPIO_Init+0x236>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4a54      	ldr	r2, [pc, #336]	; (8001f88 <HAL_GPIO_Init+0x334>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d025      	beq.n	8001e86 <HAL_GPIO_Init+0x232>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a53      	ldr	r2, [pc, #332]	; (8001f8c <HAL_GPIO_Init+0x338>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d01f      	beq.n	8001e82 <HAL_GPIO_Init+0x22e>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a52      	ldr	r2, [pc, #328]	; (8001f90 <HAL_GPIO_Init+0x33c>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d019      	beq.n	8001e7e <HAL_GPIO_Init+0x22a>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a51      	ldr	r2, [pc, #324]	; (8001f94 <HAL_GPIO_Init+0x340>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d013      	beq.n	8001e7a <HAL_GPIO_Init+0x226>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a50      	ldr	r2, [pc, #320]	; (8001f98 <HAL_GPIO_Init+0x344>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d00d      	beq.n	8001e76 <HAL_GPIO_Init+0x222>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a4f      	ldr	r2, [pc, #316]	; (8001f9c <HAL_GPIO_Init+0x348>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d007      	beq.n	8001e72 <HAL_GPIO_Init+0x21e>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a4e      	ldr	r2, [pc, #312]	; (8001fa0 <HAL_GPIO_Init+0x34c>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d101      	bne.n	8001e6e <HAL_GPIO_Init+0x21a>
 8001e6a:	2309      	movs	r3, #9
 8001e6c:	e012      	b.n	8001e94 <HAL_GPIO_Init+0x240>
 8001e6e:	230a      	movs	r3, #10
 8001e70:	e010      	b.n	8001e94 <HAL_GPIO_Init+0x240>
 8001e72:	2308      	movs	r3, #8
 8001e74:	e00e      	b.n	8001e94 <HAL_GPIO_Init+0x240>
 8001e76:	2307      	movs	r3, #7
 8001e78:	e00c      	b.n	8001e94 <HAL_GPIO_Init+0x240>
 8001e7a:	2306      	movs	r3, #6
 8001e7c:	e00a      	b.n	8001e94 <HAL_GPIO_Init+0x240>
 8001e7e:	2305      	movs	r3, #5
 8001e80:	e008      	b.n	8001e94 <HAL_GPIO_Init+0x240>
 8001e82:	2304      	movs	r3, #4
 8001e84:	e006      	b.n	8001e94 <HAL_GPIO_Init+0x240>
 8001e86:	2303      	movs	r3, #3
 8001e88:	e004      	b.n	8001e94 <HAL_GPIO_Init+0x240>
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	e002      	b.n	8001e94 <HAL_GPIO_Init+0x240>
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e000      	b.n	8001e94 <HAL_GPIO_Init+0x240>
 8001e92:	2300      	movs	r3, #0
 8001e94:	69fa      	ldr	r2, [r7, #28]
 8001e96:	f002 0203 	and.w	r2, r2, #3
 8001e9a:	0092      	lsls	r2, r2, #2
 8001e9c:	4093      	lsls	r3, r2
 8001e9e:	69ba      	ldr	r2, [r7, #24]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001ea4:	4934      	ldr	r1, [pc, #208]	; (8001f78 <HAL_GPIO_Init+0x324>)
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	089b      	lsrs	r3, r3, #2
 8001eaa:	3302      	adds	r3, #2
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001eb2:	4b3c      	ldr	r3, [pc, #240]	; (8001fa4 <HAL_GPIO_Init+0x350>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	43db      	mvns	r3, r3
 8001ebc:	69ba      	ldr	r2, [r7, #24]
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d003      	beq.n	8001ed6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001ece:	69ba      	ldr	r2, [r7, #24]
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ed6:	4a33      	ldr	r2, [pc, #204]	; (8001fa4 <HAL_GPIO_Init+0x350>)
 8001ed8:	69bb      	ldr	r3, [r7, #24]
 8001eda:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001edc:	4b31      	ldr	r3, [pc, #196]	; (8001fa4 <HAL_GPIO_Init+0x350>)
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	43db      	mvns	r3, r3
 8001ee6:	69ba      	ldr	r2, [r7, #24]
 8001ee8:	4013      	ands	r3, r2
 8001eea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d003      	beq.n	8001f00 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001ef8:	69ba      	ldr	r2, [r7, #24]
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f00:	4a28      	ldr	r2, [pc, #160]	; (8001fa4 <HAL_GPIO_Init+0x350>)
 8001f02:	69bb      	ldr	r3, [r7, #24]
 8001f04:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f06:	4b27      	ldr	r3, [pc, #156]	; (8001fa4 <HAL_GPIO_Init+0x350>)
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	43db      	mvns	r3, r3
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	4013      	ands	r3, r2
 8001f14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d003      	beq.n	8001f2a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001f22:	69ba      	ldr	r2, [r7, #24]
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f2a:	4a1e      	ldr	r2, [pc, #120]	; (8001fa4 <HAL_GPIO_Init+0x350>)
 8001f2c:	69bb      	ldr	r3, [r7, #24]
 8001f2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f30:	4b1c      	ldr	r3, [pc, #112]	; (8001fa4 <HAL_GPIO_Init+0x350>)
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	43db      	mvns	r3, r3
 8001f3a:	69ba      	ldr	r2, [r7, #24]
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d003      	beq.n	8001f54 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f54:	4a13      	ldr	r2, [pc, #76]	; (8001fa4 <HAL_GPIO_Init+0x350>)
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	61fb      	str	r3, [r7, #28]
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	2b0f      	cmp	r3, #15
 8001f64:	f67f ae86 	bls.w	8001c74 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001f68:	bf00      	nop
 8001f6a:	3724      	adds	r7, #36	; 0x24
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr
 8001f74:	40023800 	.word	0x40023800
 8001f78:	40013800 	.word	0x40013800
 8001f7c:	40020000 	.word	0x40020000
 8001f80:	40020400 	.word	0x40020400
 8001f84:	40020800 	.word	0x40020800
 8001f88:	40020c00 	.word	0x40020c00
 8001f8c:	40021000 	.word	0x40021000
 8001f90:	40021400 	.word	0x40021400
 8001f94:	40021800 	.word	0x40021800
 8001f98:	40021c00 	.word	0x40021c00
 8001f9c:	40022000 	.word	0x40022000
 8001fa0:	40022400 	.word	0x40022400
 8001fa4:	40013c00 	.word	0x40013c00

08001fa8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	807b      	strh	r3, [r7, #2]
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fb8:	787b      	ldrb	r3, [r7, #1]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d003      	beq.n	8001fc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fbe:	887a      	ldrh	r2, [r7, #2]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001fc4:	e003      	b.n	8001fce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001fc6:	887b      	ldrh	r3, [r7, #2]
 8001fc8:	041a      	lsls	r2, r3, #16
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	619a      	str	r2, [r3, #24]
}
 8001fce:	bf00      	nop
 8001fd0:	370c      	adds	r7, #12
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr

08001fda <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001fda:	b480      	push	{r7}
 8001fdc:	b085      	sub	sp, #20
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	6078      	str	r0, [r7, #4]
 8001fe2:	460b      	mov	r3, r1
 8001fe4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	695b      	ldr	r3, [r3, #20]
 8001fea:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001fec:	887a      	ldrh	r2, [r7, #2]
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	041a      	lsls	r2, r3, #16
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	43d9      	mvns	r1, r3
 8001ff8:	887b      	ldrh	r3, [r7, #2]
 8001ffa:	400b      	ands	r3, r1
 8001ffc:	431a      	orrs	r2, r3
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	619a      	str	r2, [r3, #24]
}
 8002002:	bf00      	nop
 8002004:	3714      	adds	r7, #20
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
	...

08002010 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d101      	bne.n	8002022 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e07e      	b.n	8002120 <HAL_I2C_Init+0x110>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002028:	b2db      	uxtb	r3, r3
 800202a:	2b00      	cmp	r3, #0
 800202c:	d106      	bne.n	800203c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f014 ff0e 	bl	8016e58 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2224      	movs	r2, #36	; 0x24
 8002040:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	6812      	ldr	r2, [r2, #0]
 800204c:	6812      	ldr	r2, [r2, #0]
 800204e:	f022 0201 	bic.w	r2, r2, #1
 8002052:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	6852      	ldr	r2, [r2, #4]
 800205c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002060:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	6812      	ldr	r2, [r2, #0]
 800206a:	6892      	ldr	r2, [r2, #8]
 800206c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002070:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	68db      	ldr	r3, [r3, #12]
 8002076:	2b01      	cmp	r3, #1
 8002078:	d107      	bne.n	800208a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	6892      	ldr	r2, [r2, #8]
 8002082:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002086:	609a      	str	r2, [r3, #8]
 8002088:	e006      	b.n	8002098 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	6892      	ldr	r2, [r2, #8]
 8002092:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002096:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	2b02      	cmp	r3, #2
 800209e:	d104      	bne.n	80020aa <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80020a8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	6859      	ldr	r1, [r3, #4]
 80020b4:	4b1c      	ldr	r3, [pc, #112]	; (8002128 <HAL_I2C_Init+0x118>)
 80020b6:	430b      	orrs	r3, r1
 80020b8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	6812      	ldr	r2, [r2, #0]
 80020c2:	68d2      	ldr	r2, [r2, #12]
 80020c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80020c8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	6911      	ldr	r1, [r2, #16]
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	6952      	ldr	r2, [r2, #20]
 80020d6:	4311      	orrs	r1, r2
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	6992      	ldr	r2, [r2, #24]
 80020dc:	0212      	lsls	r2, r2, #8
 80020de:	430a      	orrs	r2, r1
 80020e0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	69d1      	ldr	r1, [r2, #28]
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	6a12      	ldr	r2, [r2, #32]
 80020ee:	430a      	orrs	r2, r1
 80020f0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	6812      	ldr	r2, [r2, #0]
 80020fa:	6812      	ldr	r2, [r2, #0]
 80020fc:	f042 0201 	orr.w	r2, r2, #1
 8002100:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2200      	movs	r2, #0
 8002106:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2220      	movs	r2, #32
 800210c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2200      	movs	r2, #0
 8002114:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2200      	movs	r2, #0
 800211a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800211e:	2300      	movs	r3, #0
}
 8002120:	4618      	mov	r0, r3
 8002122:	3708      	adds	r7, #8
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	02008000 	.word	0x02008000

0800212c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800213c:	b2db      	uxtb	r3, r3
 800213e:	2b20      	cmp	r3, #32
 8002140:	d138      	bne.n	80021b4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002148:	2b01      	cmp	r3, #1
 800214a:	d101      	bne.n	8002150 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800214c:	2302      	movs	r3, #2
 800214e:	e032      	b.n	80021b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2201      	movs	r2, #1
 8002154:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2224      	movs	r2, #36	; 0x24
 800215c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	687a      	ldr	r2, [r7, #4]
 8002166:	6812      	ldr	r2, [r2, #0]
 8002168:	6812      	ldr	r2, [r2, #0]
 800216a:	f022 0201 	bic.w	r2, r2, #1
 800216e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	687a      	ldr	r2, [r7, #4]
 8002176:	6812      	ldr	r2, [r2, #0]
 8002178:	6812      	ldr	r2, [r2, #0]
 800217a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800217e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	6812      	ldr	r2, [r2, #0]
 8002188:	6811      	ldr	r1, [r2, #0]
 800218a:	683a      	ldr	r2, [r7, #0]
 800218c:	430a      	orrs	r2, r1
 800218e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	6812      	ldr	r2, [r2, #0]
 8002198:	6812      	ldr	r2, [r2, #0]
 800219a:	f042 0201 	orr.w	r2, r2, #1
 800219e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2220      	movs	r2, #32
 80021a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2200      	movs	r2, #0
 80021ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80021b0:	2300      	movs	r3, #0
 80021b2:	e000      	b.n	80021b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80021b4:	2302      	movs	r3, #2
  }
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	370c      	adds	r7, #12
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr

080021c2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80021c2:	b480      	push	{r7}
 80021c4:	b085      	sub	sp, #20
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	6078      	str	r0, [r7, #4]
 80021ca:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	2b20      	cmp	r3, #32
 80021d6:	d139      	bne.n	800224c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d101      	bne.n	80021e6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80021e2:	2302      	movs	r3, #2
 80021e4:	e033      	b.n	800224e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2201      	movs	r2, #1
 80021ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2224      	movs	r2, #36	; 0x24
 80021f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	6812      	ldr	r2, [r2, #0]
 80021fe:	6812      	ldr	r2, [r2, #0]
 8002200:	f022 0201 	bic.w	r2, r2, #1
 8002204:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002214:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	021b      	lsls	r3, r3, #8
 800221a:	68fa      	ldr	r2, [r7, #12]
 800221c:	4313      	orrs	r3, r2
 800221e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	68fa      	ldr	r2, [r7, #12]
 8002226:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	6812      	ldr	r2, [r2, #0]
 8002230:	6812      	ldr	r2, [r2, #0]
 8002232:	f042 0201 	orr.w	r2, r2, #1
 8002236:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2220      	movs	r2, #32
 800223c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2200      	movs	r2, #0
 8002244:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002248:	2300      	movs	r3, #0
 800224a:	e000      	b.n	800224e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800224c:	2302      	movs	r3, #2
  }
}
 800224e:	4618      	mov	r0, r3
 8002250:	3714      	adds	r7, #20
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
	...

0800225c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002260:	4a05      	ldr	r2, [pc, #20]	; (8002278 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002262:	4b05      	ldr	r3, [pc, #20]	; (8002278 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800226a:	6013      	str	r3, [r2, #0]
}
 800226c:	bf00      	nop
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr
 8002276:	bf00      	nop
 8002278:	40007000 	.word	0x40007000

0800227c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002282:	2300      	movs	r3, #0
 8002284:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002286:	4a23      	ldr	r2, [pc, #140]	; (8002314 <HAL_PWREx_EnableOverDrive+0x98>)
 8002288:	4b22      	ldr	r3, [pc, #136]	; (8002314 <HAL_PWREx_EnableOverDrive+0x98>)
 800228a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002290:	6413      	str	r3, [r2, #64]	; 0x40
 8002292:	4b20      	ldr	r3, [pc, #128]	; (8002314 <HAL_PWREx_EnableOverDrive+0x98>)
 8002294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800229a:	603b      	str	r3, [r7, #0]
 800229c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800229e:	4a1e      	ldr	r2, [pc, #120]	; (8002318 <HAL_PWREx_EnableOverDrive+0x9c>)
 80022a0:	4b1d      	ldr	r3, [pc, #116]	; (8002318 <HAL_PWREx_EnableOverDrive+0x9c>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022a8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80022aa:	f7fe f9cb 	bl	8000644 <HAL_GetTick>
 80022ae:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80022b0:	e009      	b.n	80022c6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80022b2:	f7fe f9c7 	bl	8000644 <HAL_GetTick>
 80022b6:	4602      	mov	r2, r0
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80022c0:	d901      	bls.n	80022c6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e022      	b.n	800230c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80022c6:	4b14      	ldr	r3, [pc, #80]	; (8002318 <HAL_PWREx_EnableOverDrive+0x9c>)
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022d2:	d1ee      	bne.n	80022b2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80022d4:	4a10      	ldr	r2, [pc, #64]	; (8002318 <HAL_PWREx_EnableOverDrive+0x9c>)
 80022d6:	4b10      	ldr	r3, [pc, #64]	; (8002318 <HAL_PWREx_EnableOverDrive+0x9c>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022de:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80022e0:	f7fe f9b0 	bl	8000644 <HAL_GetTick>
 80022e4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80022e6:	e009      	b.n	80022fc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80022e8:	f7fe f9ac 	bl	8000644 <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80022f6:	d901      	bls.n	80022fc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80022f8:	2303      	movs	r3, #3
 80022fa:	e007      	b.n	800230c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80022fc:	4b06      	ldr	r3, [pc, #24]	; (8002318 <HAL_PWREx_EnableOverDrive+0x9c>)
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002304:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002308:	d1ee      	bne.n	80022e8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800230a:	2300      	movs	r3, #0
}
 800230c:	4618      	mov	r0, r3
 800230e:	3708      	adds	r7, #8
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	40023800 	.word	0x40023800
 8002318:	40007000 	.word	0x40007000

0800231c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b086      	sub	sp, #24
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002324:	2300      	movs	r3, #0
 8002326:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d101      	bne.n	8002332 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e29b      	b.n	800286a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0301 	and.w	r3, r3, #1
 800233a:	2b00      	cmp	r3, #0
 800233c:	f000 8087 	beq.w	800244e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002340:	4b96      	ldr	r3, [pc, #600]	; (800259c <HAL_RCC_OscConfig+0x280>)
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	f003 030c 	and.w	r3, r3, #12
 8002348:	2b04      	cmp	r3, #4
 800234a:	d00c      	beq.n	8002366 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800234c:	4b93      	ldr	r3, [pc, #588]	; (800259c <HAL_RCC_OscConfig+0x280>)
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	f003 030c 	and.w	r3, r3, #12
 8002354:	2b08      	cmp	r3, #8
 8002356:	d112      	bne.n	800237e <HAL_RCC_OscConfig+0x62>
 8002358:	4b90      	ldr	r3, [pc, #576]	; (800259c <HAL_RCC_OscConfig+0x280>)
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002360:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002364:	d10b      	bne.n	800237e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002366:	4b8d      	ldr	r3, [pc, #564]	; (800259c <HAL_RCC_OscConfig+0x280>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d06c      	beq.n	800244c <HAL_RCC_OscConfig+0x130>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d168      	bne.n	800244c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e275      	b.n	800286a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002386:	d106      	bne.n	8002396 <HAL_RCC_OscConfig+0x7a>
 8002388:	4a84      	ldr	r2, [pc, #528]	; (800259c <HAL_RCC_OscConfig+0x280>)
 800238a:	4b84      	ldr	r3, [pc, #528]	; (800259c <HAL_RCC_OscConfig+0x280>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002392:	6013      	str	r3, [r2, #0]
 8002394:	e02e      	b.n	80023f4 <HAL_RCC_OscConfig+0xd8>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d10c      	bne.n	80023b8 <HAL_RCC_OscConfig+0x9c>
 800239e:	4a7f      	ldr	r2, [pc, #508]	; (800259c <HAL_RCC_OscConfig+0x280>)
 80023a0:	4b7e      	ldr	r3, [pc, #504]	; (800259c <HAL_RCC_OscConfig+0x280>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023a8:	6013      	str	r3, [r2, #0]
 80023aa:	4a7c      	ldr	r2, [pc, #496]	; (800259c <HAL_RCC_OscConfig+0x280>)
 80023ac:	4b7b      	ldr	r3, [pc, #492]	; (800259c <HAL_RCC_OscConfig+0x280>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023b4:	6013      	str	r3, [r2, #0]
 80023b6:	e01d      	b.n	80023f4 <HAL_RCC_OscConfig+0xd8>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023c0:	d10c      	bne.n	80023dc <HAL_RCC_OscConfig+0xc0>
 80023c2:	4a76      	ldr	r2, [pc, #472]	; (800259c <HAL_RCC_OscConfig+0x280>)
 80023c4:	4b75      	ldr	r3, [pc, #468]	; (800259c <HAL_RCC_OscConfig+0x280>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023cc:	6013      	str	r3, [r2, #0]
 80023ce:	4a73      	ldr	r2, [pc, #460]	; (800259c <HAL_RCC_OscConfig+0x280>)
 80023d0:	4b72      	ldr	r3, [pc, #456]	; (800259c <HAL_RCC_OscConfig+0x280>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023d8:	6013      	str	r3, [r2, #0]
 80023da:	e00b      	b.n	80023f4 <HAL_RCC_OscConfig+0xd8>
 80023dc:	4a6f      	ldr	r2, [pc, #444]	; (800259c <HAL_RCC_OscConfig+0x280>)
 80023de:	4b6f      	ldr	r3, [pc, #444]	; (800259c <HAL_RCC_OscConfig+0x280>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023e6:	6013      	str	r3, [r2, #0]
 80023e8:	4a6c      	ldr	r2, [pc, #432]	; (800259c <HAL_RCC_OscConfig+0x280>)
 80023ea:	4b6c      	ldr	r3, [pc, #432]	; (800259c <HAL_RCC_OscConfig+0x280>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d013      	beq.n	8002424 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023fc:	f7fe f922 	bl	8000644 <HAL_GetTick>
 8002400:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002402:	e008      	b.n	8002416 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002404:	f7fe f91e 	bl	8000644 <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	2b64      	cmp	r3, #100	; 0x64
 8002410:	d901      	bls.n	8002416 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002412:	2303      	movs	r3, #3
 8002414:	e229      	b.n	800286a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002416:	4b61      	ldr	r3, [pc, #388]	; (800259c <HAL_RCC_OscConfig+0x280>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d0f0      	beq.n	8002404 <HAL_RCC_OscConfig+0xe8>
 8002422:	e014      	b.n	800244e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002424:	f7fe f90e 	bl	8000644 <HAL_GetTick>
 8002428:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800242a:	e008      	b.n	800243e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800242c:	f7fe f90a 	bl	8000644 <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	2b64      	cmp	r3, #100	; 0x64
 8002438:	d901      	bls.n	800243e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e215      	b.n	800286a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800243e:	4b57      	ldr	r3, [pc, #348]	; (800259c <HAL_RCC_OscConfig+0x280>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d1f0      	bne.n	800242c <HAL_RCC_OscConfig+0x110>
 800244a:	e000      	b.n	800244e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800244c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0302 	and.w	r3, r3, #2
 8002456:	2b00      	cmp	r3, #0
 8002458:	d069      	beq.n	800252e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800245a:	4b50      	ldr	r3, [pc, #320]	; (800259c <HAL_RCC_OscConfig+0x280>)
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	f003 030c 	and.w	r3, r3, #12
 8002462:	2b00      	cmp	r3, #0
 8002464:	d00b      	beq.n	800247e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002466:	4b4d      	ldr	r3, [pc, #308]	; (800259c <HAL_RCC_OscConfig+0x280>)
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	f003 030c 	and.w	r3, r3, #12
 800246e:	2b08      	cmp	r3, #8
 8002470:	d11c      	bne.n	80024ac <HAL_RCC_OscConfig+0x190>
 8002472:	4b4a      	ldr	r3, [pc, #296]	; (800259c <HAL_RCC_OscConfig+0x280>)
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d116      	bne.n	80024ac <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800247e:	4b47      	ldr	r3, [pc, #284]	; (800259c <HAL_RCC_OscConfig+0x280>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0302 	and.w	r3, r3, #2
 8002486:	2b00      	cmp	r3, #0
 8002488:	d005      	beq.n	8002496 <HAL_RCC_OscConfig+0x17a>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	2b01      	cmp	r3, #1
 8002490:	d001      	beq.n	8002496 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e1e9      	b.n	800286a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002496:	4941      	ldr	r1, [pc, #260]	; (800259c <HAL_RCC_OscConfig+0x280>)
 8002498:	4b40      	ldr	r3, [pc, #256]	; (800259c <HAL_RCC_OscConfig+0x280>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	691b      	ldr	r3, [r3, #16]
 80024a4:	00db      	lsls	r3, r3, #3
 80024a6:	4313      	orrs	r3, r2
 80024a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024aa:	e040      	b.n	800252e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d023      	beq.n	80024fc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024b4:	4a39      	ldr	r2, [pc, #228]	; (800259c <HAL_RCC_OscConfig+0x280>)
 80024b6:	4b39      	ldr	r3, [pc, #228]	; (800259c <HAL_RCC_OscConfig+0x280>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f043 0301 	orr.w	r3, r3, #1
 80024be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c0:	f7fe f8c0 	bl	8000644 <HAL_GetTick>
 80024c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024c6:	e008      	b.n	80024da <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024c8:	f7fe f8bc 	bl	8000644 <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d901      	bls.n	80024da <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e1c7      	b.n	800286a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024da:	4b30      	ldr	r3, [pc, #192]	; (800259c <HAL_RCC_OscConfig+0x280>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0302 	and.w	r3, r3, #2
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d0f0      	beq.n	80024c8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024e6:	492d      	ldr	r1, [pc, #180]	; (800259c <HAL_RCC_OscConfig+0x280>)
 80024e8:	4b2c      	ldr	r3, [pc, #176]	; (800259c <HAL_RCC_OscConfig+0x280>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	691b      	ldr	r3, [r3, #16]
 80024f4:	00db      	lsls	r3, r3, #3
 80024f6:	4313      	orrs	r3, r2
 80024f8:	600b      	str	r3, [r1, #0]
 80024fa:	e018      	b.n	800252e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024fc:	4a27      	ldr	r2, [pc, #156]	; (800259c <HAL_RCC_OscConfig+0x280>)
 80024fe:	4b27      	ldr	r3, [pc, #156]	; (800259c <HAL_RCC_OscConfig+0x280>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f023 0301 	bic.w	r3, r3, #1
 8002506:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002508:	f7fe f89c 	bl	8000644 <HAL_GetTick>
 800250c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800250e:	e008      	b.n	8002522 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002510:	f7fe f898 	bl	8000644 <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	2b02      	cmp	r3, #2
 800251c:	d901      	bls.n	8002522 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e1a3      	b.n	800286a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002522:	4b1e      	ldr	r3, [pc, #120]	; (800259c <HAL_RCC_OscConfig+0x280>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0302 	and.w	r3, r3, #2
 800252a:	2b00      	cmp	r3, #0
 800252c:	d1f0      	bne.n	8002510 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0308 	and.w	r3, r3, #8
 8002536:	2b00      	cmp	r3, #0
 8002538:	d038      	beq.n	80025ac <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	695b      	ldr	r3, [r3, #20]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d019      	beq.n	8002576 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002542:	4a16      	ldr	r2, [pc, #88]	; (800259c <HAL_RCC_OscConfig+0x280>)
 8002544:	4b15      	ldr	r3, [pc, #84]	; (800259c <HAL_RCC_OscConfig+0x280>)
 8002546:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002548:	f043 0301 	orr.w	r3, r3, #1
 800254c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800254e:	f7fe f879 	bl	8000644 <HAL_GetTick>
 8002552:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002554:	e008      	b.n	8002568 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002556:	f7fe f875 	bl	8000644 <HAL_GetTick>
 800255a:	4602      	mov	r2, r0
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	2b02      	cmp	r3, #2
 8002562:	d901      	bls.n	8002568 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002564:	2303      	movs	r3, #3
 8002566:	e180      	b.n	800286a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002568:	4b0c      	ldr	r3, [pc, #48]	; (800259c <HAL_RCC_OscConfig+0x280>)
 800256a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800256c:	f003 0302 	and.w	r3, r3, #2
 8002570:	2b00      	cmp	r3, #0
 8002572:	d0f0      	beq.n	8002556 <HAL_RCC_OscConfig+0x23a>
 8002574:	e01a      	b.n	80025ac <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002576:	4a09      	ldr	r2, [pc, #36]	; (800259c <HAL_RCC_OscConfig+0x280>)
 8002578:	4b08      	ldr	r3, [pc, #32]	; (800259c <HAL_RCC_OscConfig+0x280>)
 800257a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800257c:	f023 0301 	bic.w	r3, r3, #1
 8002580:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002582:	f7fe f85f 	bl	8000644 <HAL_GetTick>
 8002586:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002588:	e00a      	b.n	80025a0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800258a:	f7fe f85b 	bl	8000644 <HAL_GetTick>
 800258e:	4602      	mov	r2, r0
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	2b02      	cmp	r3, #2
 8002596:	d903      	bls.n	80025a0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002598:	2303      	movs	r3, #3
 800259a:	e166      	b.n	800286a <HAL_RCC_OscConfig+0x54e>
 800259c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025a0:	4b92      	ldr	r3, [pc, #584]	; (80027ec <HAL_RCC_OscConfig+0x4d0>)
 80025a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025a4:	f003 0302 	and.w	r3, r3, #2
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d1ee      	bne.n	800258a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0304 	and.w	r3, r3, #4
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	f000 80a4 	beq.w	8002702 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025ba:	4b8c      	ldr	r3, [pc, #560]	; (80027ec <HAL_RCC_OscConfig+0x4d0>)
 80025bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d10d      	bne.n	80025e2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80025c6:	4a89      	ldr	r2, [pc, #548]	; (80027ec <HAL_RCC_OscConfig+0x4d0>)
 80025c8:	4b88      	ldr	r3, [pc, #544]	; (80027ec <HAL_RCC_OscConfig+0x4d0>)
 80025ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025d0:	6413      	str	r3, [r2, #64]	; 0x40
 80025d2:	4b86      	ldr	r3, [pc, #536]	; (80027ec <HAL_RCC_OscConfig+0x4d0>)
 80025d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025da:	60bb      	str	r3, [r7, #8]
 80025dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025de:	2301      	movs	r3, #1
 80025e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025e2:	4b83      	ldr	r3, [pc, #524]	; (80027f0 <HAL_RCC_OscConfig+0x4d4>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d118      	bne.n	8002620 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80025ee:	4a80      	ldr	r2, [pc, #512]	; (80027f0 <HAL_RCC_OscConfig+0x4d4>)
 80025f0:	4b7f      	ldr	r3, [pc, #508]	; (80027f0 <HAL_RCC_OscConfig+0x4d4>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025fa:	f7fe f823 	bl	8000644 <HAL_GetTick>
 80025fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002600:	e008      	b.n	8002614 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002602:	f7fe f81f 	bl	8000644 <HAL_GetTick>
 8002606:	4602      	mov	r2, r0
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	2b64      	cmp	r3, #100	; 0x64
 800260e:	d901      	bls.n	8002614 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002610:	2303      	movs	r3, #3
 8002612:	e12a      	b.n	800286a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002614:	4b76      	ldr	r3, [pc, #472]	; (80027f0 <HAL_RCC_OscConfig+0x4d4>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800261c:	2b00      	cmp	r3, #0
 800261e:	d0f0      	beq.n	8002602 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	2b01      	cmp	r3, #1
 8002626:	d106      	bne.n	8002636 <HAL_RCC_OscConfig+0x31a>
 8002628:	4a70      	ldr	r2, [pc, #448]	; (80027ec <HAL_RCC_OscConfig+0x4d0>)
 800262a:	4b70      	ldr	r3, [pc, #448]	; (80027ec <HAL_RCC_OscConfig+0x4d0>)
 800262c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800262e:	f043 0301 	orr.w	r3, r3, #1
 8002632:	6713      	str	r3, [r2, #112]	; 0x70
 8002634:	e02d      	b.n	8002692 <HAL_RCC_OscConfig+0x376>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d10c      	bne.n	8002658 <HAL_RCC_OscConfig+0x33c>
 800263e:	4a6b      	ldr	r2, [pc, #428]	; (80027ec <HAL_RCC_OscConfig+0x4d0>)
 8002640:	4b6a      	ldr	r3, [pc, #424]	; (80027ec <HAL_RCC_OscConfig+0x4d0>)
 8002642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002644:	f023 0301 	bic.w	r3, r3, #1
 8002648:	6713      	str	r3, [r2, #112]	; 0x70
 800264a:	4a68      	ldr	r2, [pc, #416]	; (80027ec <HAL_RCC_OscConfig+0x4d0>)
 800264c:	4b67      	ldr	r3, [pc, #412]	; (80027ec <HAL_RCC_OscConfig+0x4d0>)
 800264e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002650:	f023 0304 	bic.w	r3, r3, #4
 8002654:	6713      	str	r3, [r2, #112]	; 0x70
 8002656:	e01c      	b.n	8002692 <HAL_RCC_OscConfig+0x376>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	2b05      	cmp	r3, #5
 800265e:	d10c      	bne.n	800267a <HAL_RCC_OscConfig+0x35e>
 8002660:	4a62      	ldr	r2, [pc, #392]	; (80027ec <HAL_RCC_OscConfig+0x4d0>)
 8002662:	4b62      	ldr	r3, [pc, #392]	; (80027ec <HAL_RCC_OscConfig+0x4d0>)
 8002664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002666:	f043 0304 	orr.w	r3, r3, #4
 800266a:	6713      	str	r3, [r2, #112]	; 0x70
 800266c:	4a5f      	ldr	r2, [pc, #380]	; (80027ec <HAL_RCC_OscConfig+0x4d0>)
 800266e:	4b5f      	ldr	r3, [pc, #380]	; (80027ec <HAL_RCC_OscConfig+0x4d0>)
 8002670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002672:	f043 0301 	orr.w	r3, r3, #1
 8002676:	6713      	str	r3, [r2, #112]	; 0x70
 8002678:	e00b      	b.n	8002692 <HAL_RCC_OscConfig+0x376>
 800267a:	4a5c      	ldr	r2, [pc, #368]	; (80027ec <HAL_RCC_OscConfig+0x4d0>)
 800267c:	4b5b      	ldr	r3, [pc, #364]	; (80027ec <HAL_RCC_OscConfig+0x4d0>)
 800267e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002680:	f023 0301 	bic.w	r3, r3, #1
 8002684:	6713      	str	r3, [r2, #112]	; 0x70
 8002686:	4a59      	ldr	r2, [pc, #356]	; (80027ec <HAL_RCC_OscConfig+0x4d0>)
 8002688:	4b58      	ldr	r3, [pc, #352]	; (80027ec <HAL_RCC_OscConfig+0x4d0>)
 800268a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800268c:	f023 0304 	bic.w	r3, r3, #4
 8002690:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d015      	beq.n	80026c6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800269a:	f7fd ffd3 	bl	8000644 <HAL_GetTick>
 800269e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026a0:	e00a      	b.n	80026b8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026a2:	f7fd ffcf 	bl	8000644 <HAL_GetTick>
 80026a6:	4602      	mov	r2, r0
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d901      	bls.n	80026b8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80026b4:	2303      	movs	r3, #3
 80026b6:	e0d8      	b.n	800286a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026b8:	4b4c      	ldr	r3, [pc, #304]	; (80027ec <HAL_RCC_OscConfig+0x4d0>)
 80026ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026bc:	f003 0302 	and.w	r3, r3, #2
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d0ee      	beq.n	80026a2 <HAL_RCC_OscConfig+0x386>
 80026c4:	e014      	b.n	80026f0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026c6:	f7fd ffbd 	bl	8000644 <HAL_GetTick>
 80026ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026cc:	e00a      	b.n	80026e4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026ce:	f7fd ffb9 	bl	8000644 <HAL_GetTick>
 80026d2:	4602      	mov	r2, r0
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80026dc:	4293      	cmp	r3, r2
 80026de:	d901      	bls.n	80026e4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80026e0:	2303      	movs	r3, #3
 80026e2:	e0c2      	b.n	800286a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026e4:	4b41      	ldr	r3, [pc, #260]	; (80027ec <HAL_RCC_OscConfig+0x4d0>)
 80026e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026e8:	f003 0302 	and.w	r3, r3, #2
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d1ee      	bne.n	80026ce <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80026f0:	7dfb      	ldrb	r3, [r7, #23]
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d105      	bne.n	8002702 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026f6:	4a3d      	ldr	r2, [pc, #244]	; (80027ec <HAL_RCC_OscConfig+0x4d0>)
 80026f8:	4b3c      	ldr	r3, [pc, #240]	; (80027ec <HAL_RCC_OscConfig+0x4d0>)
 80026fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002700:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	699b      	ldr	r3, [r3, #24]
 8002706:	2b00      	cmp	r3, #0
 8002708:	f000 80ae 	beq.w	8002868 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800270c:	4b37      	ldr	r3, [pc, #220]	; (80027ec <HAL_RCC_OscConfig+0x4d0>)
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	f003 030c 	and.w	r3, r3, #12
 8002714:	2b08      	cmp	r3, #8
 8002716:	d06d      	beq.n	80027f4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	699b      	ldr	r3, [r3, #24]
 800271c:	2b02      	cmp	r3, #2
 800271e:	d14b      	bne.n	80027b8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002720:	4a32      	ldr	r2, [pc, #200]	; (80027ec <HAL_RCC_OscConfig+0x4d0>)
 8002722:	4b32      	ldr	r3, [pc, #200]	; (80027ec <HAL_RCC_OscConfig+0x4d0>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800272a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800272c:	f7fd ff8a 	bl	8000644 <HAL_GetTick>
 8002730:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002732:	e008      	b.n	8002746 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002734:	f7fd ff86 	bl	8000644 <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	2b02      	cmp	r3, #2
 8002740:	d901      	bls.n	8002746 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e091      	b.n	800286a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002746:	4b29      	ldr	r3, [pc, #164]	; (80027ec <HAL_RCC_OscConfig+0x4d0>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d1f0      	bne.n	8002734 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002752:	4926      	ldr	r1, [pc, #152]	; (80027ec <HAL_RCC_OscConfig+0x4d0>)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	69da      	ldr	r2, [r3, #28]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6a1b      	ldr	r3, [r3, #32]
 800275c:	431a      	orrs	r2, r3
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002762:	019b      	lsls	r3, r3, #6
 8002764:	431a      	orrs	r2, r3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800276a:	085b      	lsrs	r3, r3, #1
 800276c:	3b01      	subs	r3, #1
 800276e:	041b      	lsls	r3, r3, #16
 8002770:	431a      	orrs	r2, r3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002776:	061b      	lsls	r3, r3, #24
 8002778:	431a      	orrs	r2, r3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277e:	071b      	lsls	r3, r3, #28
 8002780:	4313      	orrs	r3, r2
 8002782:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002784:	4a19      	ldr	r2, [pc, #100]	; (80027ec <HAL_RCC_OscConfig+0x4d0>)
 8002786:	4b19      	ldr	r3, [pc, #100]	; (80027ec <HAL_RCC_OscConfig+0x4d0>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800278e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002790:	f7fd ff58 	bl	8000644 <HAL_GetTick>
 8002794:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002796:	e008      	b.n	80027aa <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002798:	f7fd ff54 	bl	8000644 <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d901      	bls.n	80027aa <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e05f      	b.n	800286a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027aa:	4b10      	ldr	r3, [pc, #64]	; (80027ec <HAL_RCC_OscConfig+0x4d0>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d0f0      	beq.n	8002798 <HAL_RCC_OscConfig+0x47c>
 80027b6:	e057      	b.n	8002868 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027b8:	4a0c      	ldr	r2, [pc, #48]	; (80027ec <HAL_RCC_OscConfig+0x4d0>)
 80027ba:	4b0c      	ldr	r3, [pc, #48]	; (80027ec <HAL_RCC_OscConfig+0x4d0>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c4:	f7fd ff3e 	bl	8000644 <HAL_GetTick>
 80027c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ca:	e008      	b.n	80027de <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027cc:	f7fd ff3a 	bl	8000644 <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d901      	bls.n	80027de <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e045      	b.n	800286a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027de:	4b03      	ldr	r3, [pc, #12]	; (80027ec <HAL_RCC_OscConfig+0x4d0>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d1f0      	bne.n	80027cc <HAL_RCC_OscConfig+0x4b0>
 80027ea:	e03d      	b.n	8002868 <HAL_RCC_OscConfig+0x54c>
 80027ec:	40023800 	.word	0x40023800
 80027f0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80027f4:	4b1f      	ldr	r3, [pc, #124]	; (8002874 <HAL_RCC_OscConfig+0x558>)
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	699b      	ldr	r3, [r3, #24]
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d030      	beq.n	8002864 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800280c:	429a      	cmp	r2, r3
 800280e:	d129      	bne.n	8002864 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800281a:	429a      	cmp	r2, r3
 800281c:	d122      	bne.n	8002864 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800281e:	68fa      	ldr	r2, [r7, #12]
 8002820:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002824:	4013      	ands	r3, r2
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800282a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800282c:	4293      	cmp	r3, r2
 800282e:	d119      	bne.n	8002864 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800283a:	085b      	lsrs	r3, r3, #1
 800283c:	3b01      	subs	r3, #1
 800283e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002840:	429a      	cmp	r2, r3
 8002842:	d10f      	bne.n	8002864 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800284e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002850:	429a      	cmp	r2, r3
 8002852:	d107      	bne.n	8002864 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002860:	429a      	cmp	r2, r3
 8002862:	d001      	beq.n	8002868 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e000      	b.n	800286a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002868:	2300      	movs	r3, #0
}
 800286a:	4618      	mov	r0, r3
 800286c:	3718      	adds	r7, #24
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	40023800 	.word	0x40023800

08002878 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b084      	sub	sp, #16
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002882:	2300      	movs	r3, #0
 8002884:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d101      	bne.n	8002890 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e0d0      	b.n	8002a32 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002890:	4b6a      	ldr	r3, [pc, #424]	; (8002a3c <HAL_RCC_ClockConfig+0x1c4>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 020f 	and.w	r2, r3, #15
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	429a      	cmp	r2, r3
 800289c:	d210      	bcs.n	80028c0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800289e:	4967      	ldr	r1, [pc, #412]	; (8002a3c <HAL_RCC_ClockConfig+0x1c4>)
 80028a0:	4b66      	ldr	r3, [pc, #408]	; (8002a3c <HAL_RCC_ClockConfig+0x1c4>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f023 020f 	bic.w	r2, r3, #15
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ae:	4b63      	ldr	r3, [pc, #396]	; (8002a3c <HAL_RCC_ClockConfig+0x1c4>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 020f 	and.w	r2, r3, #15
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d001      	beq.n	80028c0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e0b8      	b.n	8002a32 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0302 	and.w	r3, r3, #2
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d020      	beq.n	800290e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 0304 	and.w	r3, r3, #4
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d005      	beq.n	80028e4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028d8:	4a59      	ldr	r2, [pc, #356]	; (8002a40 <HAL_RCC_ClockConfig+0x1c8>)
 80028da:	4b59      	ldr	r3, [pc, #356]	; (8002a40 <HAL_RCC_ClockConfig+0x1c8>)
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80028e2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0308 	and.w	r3, r3, #8
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d005      	beq.n	80028fc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028f0:	4a53      	ldr	r2, [pc, #332]	; (8002a40 <HAL_RCC_ClockConfig+0x1c8>)
 80028f2:	4b53      	ldr	r3, [pc, #332]	; (8002a40 <HAL_RCC_ClockConfig+0x1c8>)
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80028fa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028fc:	4950      	ldr	r1, [pc, #320]	; (8002a40 <HAL_RCC_ClockConfig+0x1c8>)
 80028fe:	4b50      	ldr	r3, [pc, #320]	; (8002a40 <HAL_RCC_ClockConfig+0x1c8>)
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	4313      	orrs	r3, r2
 800290c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0301 	and.w	r3, r3, #1
 8002916:	2b00      	cmp	r3, #0
 8002918:	d040      	beq.n	800299c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	2b01      	cmp	r3, #1
 8002920:	d107      	bne.n	8002932 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002922:	4b47      	ldr	r3, [pc, #284]	; (8002a40 <HAL_RCC_ClockConfig+0x1c8>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d115      	bne.n	800295a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e07f      	b.n	8002a32 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	2b02      	cmp	r3, #2
 8002938:	d107      	bne.n	800294a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800293a:	4b41      	ldr	r3, [pc, #260]	; (8002a40 <HAL_RCC_ClockConfig+0x1c8>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d109      	bne.n	800295a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e073      	b.n	8002a32 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800294a:	4b3d      	ldr	r3, [pc, #244]	; (8002a40 <HAL_RCC_ClockConfig+0x1c8>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0302 	and.w	r3, r3, #2
 8002952:	2b00      	cmp	r3, #0
 8002954:	d101      	bne.n	800295a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e06b      	b.n	8002a32 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800295a:	4939      	ldr	r1, [pc, #228]	; (8002a40 <HAL_RCC_ClockConfig+0x1c8>)
 800295c:	4b38      	ldr	r3, [pc, #224]	; (8002a40 <HAL_RCC_ClockConfig+0x1c8>)
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	f023 0203 	bic.w	r2, r3, #3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	4313      	orrs	r3, r2
 800296a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800296c:	f7fd fe6a 	bl	8000644 <HAL_GetTick>
 8002970:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002972:	e00a      	b.n	800298a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002974:	f7fd fe66 	bl	8000644 <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002982:	4293      	cmp	r3, r2
 8002984:	d901      	bls.n	800298a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e053      	b.n	8002a32 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800298a:	4b2d      	ldr	r3, [pc, #180]	; (8002a40 <HAL_RCC_ClockConfig+0x1c8>)
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	f003 020c 	and.w	r2, r3, #12
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	429a      	cmp	r2, r3
 800299a:	d1eb      	bne.n	8002974 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800299c:	4b27      	ldr	r3, [pc, #156]	; (8002a3c <HAL_RCC_ClockConfig+0x1c4>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 020f 	and.w	r2, r3, #15
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d910      	bls.n	80029cc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029aa:	4924      	ldr	r1, [pc, #144]	; (8002a3c <HAL_RCC_ClockConfig+0x1c4>)
 80029ac:	4b23      	ldr	r3, [pc, #140]	; (8002a3c <HAL_RCC_ClockConfig+0x1c4>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f023 020f 	bic.w	r2, r3, #15
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	4313      	orrs	r3, r2
 80029b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ba:	4b20      	ldr	r3, [pc, #128]	; (8002a3c <HAL_RCC_ClockConfig+0x1c4>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 020f 	and.w	r2, r3, #15
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d001      	beq.n	80029cc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e032      	b.n	8002a32 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0304 	and.w	r3, r3, #4
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d008      	beq.n	80029ea <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029d8:	4919      	ldr	r1, [pc, #100]	; (8002a40 <HAL_RCC_ClockConfig+0x1c8>)
 80029da:	4b19      	ldr	r3, [pc, #100]	; (8002a40 <HAL_RCC_ClockConfig+0x1c8>)
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	68db      	ldr	r3, [r3, #12]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0308 	and.w	r3, r3, #8
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d009      	beq.n	8002a0a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80029f6:	4912      	ldr	r1, [pc, #72]	; (8002a40 <HAL_RCC_ClockConfig+0x1c8>)
 80029f8:	4b11      	ldr	r3, [pc, #68]	; (8002a40 <HAL_RCC_ClockConfig+0x1c8>)
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	691b      	ldr	r3, [r3, #16]
 8002a04:	00db      	lsls	r3, r3, #3
 8002a06:	4313      	orrs	r3, r2
 8002a08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a0a:	f000 f821 	bl	8002a50 <HAL_RCC_GetSysClockFreq>
 8002a0e:	4601      	mov	r1, r0
 8002a10:	4b0b      	ldr	r3, [pc, #44]	; (8002a40 <HAL_RCC_ClockConfig+0x1c8>)
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	091b      	lsrs	r3, r3, #4
 8002a16:	f003 030f 	and.w	r3, r3, #15
 8002a1a:	4a0a      	ldr	r2, [pc, #40]	; (8002a44 <HAL_RCC_ClockConfig+0x1cc>)
 8002a1c:	5cd3      	ldrb	r3, [r2, r3]
 8002a1e:	fa21 f303 	lsr.w	r3, r1, r3
 8002a22:	4a09      	ldr	r2, [pc, #36]	; (8002a48 <HAL_RCC_ClockConfig+0x1d0>)
 8002a24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a26:	4b09      	ldr	r3, [pc, #36]	; (8002a4c <HAL_RCC_ClockConfig+0x1d4>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f014 fbc8 	bl	80171c0 <HAL_InitTick>

  return HAL_OK;
 8002a30:	2300      	movs	r3, #0
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3710      	adds	r7, #16
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	40023c00 	.word	0x40023c00
 8002a40:	40023800 	.word	0x40023800
 8002a44:	0801bbe0 	.word	0x0801bbe0
 8002a48:	20000018 	.word	0x20000018
 8002a4c:	20000000 	.word	0x20000000

08002a50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a54:	b08f      	sub	sp, #60	; 0x3c
 8002a56:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	637b      	str	r3, [r7, #52]	; 0x34
 8002a60:	2300      	movs	r3, #0
 8002a62:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t sysclockfreq = 0;
 8002a64:	2300      	movs	r3, #0
 8002a66:	633b      	str	r3, [r7, #48]	; 0x30

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a68:	4b62      	ldr	r3, [pc, #392]	; (8002bf4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	f003 030c 	and.w	r3, r3, #12
 8002a70:	2b04      	cmp	r3, #4
 8002a72:	d007      	beq.n	8002a84 <HAL_RCC_GetSysClockFreq+0x34>
 8002a74:	2b08      	cmp	r3, #8
 8002a76:	d008      	beq.n	8002a8a <HAL_RCC_GetSysClockFreq+0x3a>
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	f040 80b2 	bne.w	8002be2 <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a7e:	4b5e      	ldr	r3, [pc, #376]	; (8002bf8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002a80:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002a82:	e0b1      	b.n	8002be8 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a84:	4b5d      	ldr	r3, [pc, #372]	; (8002bfc <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002a86:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002a88:	e0ae      	b.n	8002be8 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a8a:	4b5a      	ldr	r3, [pc, #360]	; (8002bf4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a92:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002a94:	4b57      	ldr	r3, [pc, #348]	; (8002bf4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d04e      	beq.n	8002b3e <HAL_RCC_GetSysClockFreq+0xee>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002aa0:	4b54      	ldr	r3, [pc, #336]	; (8002bf4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	099b      	lsrs	r3, r3, #6
 8002aa6:	f04f 0400 	mov.w	r4, #0
 8002aaa:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002aae:	f04f 0200 	mov.w	r2, #0
 8002ab2:	ea01 0103 	and.w	r1, r1, r3
 8002ab6:	ea02 0204 	and.w	r2, r2, r4
 8002aba:	460b      	mov	r3, r1
 8002abc:	4614      	mov	r4, r2
 8002abe:	0160      	lsls	r0, r4, #5
 8002ac0:	6278      	str	r0, [r7, #36]	; 0x24
 8002ac2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002ac4:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8002ac8:	6278      	str	r0, [r7, #36]	; 0x24
 8002aca:	015b      	lsls	r3, r3, #5
 8002acc:	623b      	str	r3, [r7, #32]
 8002ace:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002ad2:	1a5b      	subs	r3, r3, r1
 8002ad4:	eb64 0402 	sbc.w	r4, r4, r2
 8002ad8:	ea4f 1984 	mov.w	r9, r4, lsl #6
 8002adc:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 8002ae0:	ea4f 1883 	mov.w	r8, r3, lsl #6
 8002ae4:	ebb8 0803 	subs.w	r8, r8, r3
 8002ae8:	eb69 0904 	sbc.w	r9, r9, r4
 8002aec:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002af0:	61fb      	str	r3, [r7, #28]
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002af8:	61fb      	str	r3, [r7, #28]
 8002afa:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8002afe:	61bb      	str	r3, [r7, #24]
 8002b00:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8002b04:	eb18 0801 	adds.w	r8, r8, r1
 8002b08:	eb49 0902 	adc.w	r9, r9, r2
 8002b0c:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8002b10:	617b      	str	r3, [r7, #20]
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8002b18:	617b      	str	r3, [r7, #20]
 8002b1a:	ea4f 2348 	mov.w	r3, r8, lsl #9
 8002b1e:	613b      	str	r3, [r7, #16]
 8002b20:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8002b24:	4640      	mov	r0, r8
 8002b26:	4649      	mov	r1, r9
 8002b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b2a:	f04f 0400 	mov.w	r4, #0
 8002b2e:	461a      	mov	r2, r3
 8002b30:	4623      	mov	r3, r4
 8002b32:	f7fd fbdd 	bl	80002f0 <__aeabi_uldivmod>
 8002b36:	4603      	mov	r3, r0
 8002b38:	460c      	mov	r4, r1
 8002b3a:	637b      	str	r3, [r7, #52]	; 0x34
 8002b3c:	e043      	b.n	8002bc6 <HAL_RCC_GetSysClockFreq+0x176>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b3e:	4b2d      	ldr	r3, [pc, #180]	; (8002bf4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	099b      	lsrs	r3, r3, #6
 8002b44:	f04f 0400 	mov.w	r4, #0
 8002b48:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002b4c:	f04f 0200 	mov.w	r2, #0
 8002b50:	ea01 0103 	and.w	r1, r1, r3
 8002b54:	ea02 0204 	and.w	r2, r2, r4
 8002b58:	460b      	mov	r3, r1
 8002b5a:	4614      	mov	r4, r2
 8002b5c:	0160      	lsls	r0, r4, #5
 8002b5e:	60f8      	str	r0, [r7, #12]
 8002b60:	68f8      	ldr	r0, [r7, #12]
 8002b62:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8002b66:	60f8      	str	r0, [r7, #12]
 8002b68:	015b      	lsls	r3, r3, #5
 8002b6a:	60bb      	str	r3, [r7, #8]
 8002b6c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002b70:	1a5b      	subs	r3, r3, r1
 8002b72:	eb64 0402 	sbc.w	r4, r4, r2
 8002b76:	01a6      	lsls	r6, r4, #6
 8002b78:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 8002b7c:	019d      	lsls	r5, r3, #6
 8002b7e:	1aed      	subs	r5, r5, r3
 8002b80:	eb66 0604 	sbc.w	r6, r6, r4
 8002b84:	00f3      	lsls	r3, r6, #3
 8002b86:	607b      	str	r3, [r7, #4]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8002b8e:	607b      	str	r3, [r7, #4]
 8002b90:	00eb      	lsls	r3, r5, #3
 8002b92:	603b      	str	r3, [r7, #0]
 8002b94:	e897 0060 	ldmia.w	r7, {r5, r6}
 8002b98:	186d      	adds	r5, r5, r1
 8002b9a:	eb46 0602 	adc.w	r6, r6, r2
 8002b9e:	ea4f 2b86 	mov.w	fp, r6, lsl #10
 8002ba2:	ea4b 5b95 	orr.w	fp, fp, r5, lsr #22
 8002ba6:	ea4f 2a85 	mov.w	sl, r5, lsl #10
 8002baa:	4655      	mov	r5, sl
 8002bac:	465e      	mov	r6, fp
 8002bae:	4628      	mov	r0, r5
 8002bb0:	4631      	mov	r1, r6
 8002bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bb4:	f04f 0400 	mov.w	r4, #0
 8002bb8:	461a      	mov	r2, r3
 8002bba:	4623      	mov	r3, r4
 8002bbc:	f7fd fb98 	bl	80002f0 <__aeabi_uldivmod>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	460c      	mov	r4, r1
 8002bc4:	637b      	str	r3, [r7, #52]	; 0x34
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002bc6:	4b0b      	ldr	r3, [pc, #44]	; (8002bf4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	0c1b      	lsrs	r3, r3, #16
 8002bcc:	f003 0303 	and.w	r3, r3, #3
 8002bd0:	3301      	adds	r3, #1
 8002bd2:	005b      	lsls	r3, r3, #1
 8002bd4:	62bb      	str	r3, [r7, #40]	; 0x28

      sysclockfreq = pllvco / pllp;
 8002bd6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bda:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bde:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002be0:	e002      	b.n	8002be8 <HAL_RCC_GetSysClockFreq+0x198>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002be2:	4b05      	ldr	r3, [pc, #20]	; (8002bf8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002be4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002be6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	373c      	adds	r7, #60	; 0x3c
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002bf4:	40023800 	.word	0x40023800
 8002bf8:	00f42400 	.word	0x00f42400
 8002bfc:	007a1200 	.word	0x007a1200

08002c00 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c00:	b480      	push	{r7}
 8002c02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c04:	4b03      	ldr	r3, [pc, #12]	; (8002c14 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c06:	681b      	ldr	r3, [r3, #0]
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
 8002c12:	bf00      	nop
 8002c14:	20000018 	.word	0x20000018

08002c18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c1c:	f7ff fff0 	bl	8002c00 <HAL_RCC_GetHCLKFreq>
 8002c20:	4601      	mov	r1, r0
 8002c22:	4b05      	ldr	r3, [pc, #20]	; (8002c38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	0a9b      	lsrs	r3, r3, #10
 8002c28:	f003 0307 	and.w	r3, r3, #7
 8002c2c:	4a03      	ldr	r2, [pc, #12]	; (8002c3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c2e:	5cd3      	ldrb	r3, [r2, r3]
 8002c30:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	40023800 	.word	0x40023800
 8002c3c:	0801bbf0 	.word	0x0801bbf0

08002c40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002c44:	f7ff ffdc 	bl	8002c00 <HAL_RCC_GetHCLKFreq>
 8002c48:	4601      	mov	r1, r0
 8002c4a:	4b05      	ldr	r3, [pc, #20]	; (8002c60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	0b5b      	lsrs	r3, r3, #13
 8002c50:	f003 0307 	and.w	r3, r3, #7
 8002c54:	4a03      	ldr	r2, [pc, #12]	; (8002c64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c56:	5cd3      	ldrb	r3, [r2, r3]
 8002c58:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	40023800 	.word	0x40023800
 8002c64:	0801bbf0 	.word	0x0801bbf0

08002c68 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	220f      	movs	r2, #15
 8002c76:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002c78:	4b12      	ldr	r3, [pc, #72]	; (8002cc4 <HAL_RCC_GetClockConfig+0x5c>)
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	f003 0203 	and.w	r2, r3, #3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002c84:	4b0f      	ldr	r3, [pc, #60]	; (8002cc4 <HAL_RCC_GetClockConfig+0x5c>)
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002c90:	4b0c      	ldr	r3, [pc, #48]	; (8002cc4 <HAL_RCC_GetClockConfig+0x5c>)
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002c9c:	4b09      	ldr	r3, [pc, #36]	; (8002cc4 <HAL_RCC_GetClockConfig+0x5c>)
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	08db      	lsrs	r3, r3, #3
 8002ca2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002caa:	4b07      	ldr	r3, [pc, #28]	; (8002cc8 <HAL_RCC_GetClockConfig+0x60>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 020f 	and.w	r2, r3, #15
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	601a      	str	r2, [r3, #0]
}
 8002cb6:	bf00      	nop
 8002cb8:	370c      	adds	r7, #12
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr
 8002cc2:	bf00      	nop
 8002cc4:	40023800 	.word	0x40023800
 8002cc8:	40023c00 	.word	0x40023c00

08002ccc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b088      	sub	sp, #32
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0301 	and.w	r3, r3, #1
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d012      	beq.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002cf4:	4a69      	ldr	r2, [pc, #420]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cf6:	4b69      	ldr	r3, [pc, #420]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002cfe:	6093      	str	r3, [r2, #8]
 8002d00:	4966      	ldr	r1, [pc, #408]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d02:	4b66      	ldr	r3, [pc, #408]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d04:	689a      	ldr	r2, [r3, #8]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d101      	bne.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002d16:	2301      	movs	r3, #1
 8002d18:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d017      	beq.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d26:	495d      	ldr	r1, [pc, #372]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d28:	4b5c      	ldr	r3, [pc, #368]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d2e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d36:	4313      	orrs	r3, r2
 8002d38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d40:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d44:	d101      	bne.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002d46:	2301      	movs	r3, #1
 8002d48:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d101      	bne.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002d52:	2301      	movs	r3, #1
 8002d54:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d017      	beq.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002d62:	494e      	ldr	r1, [pc, #312]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d64:	4b4d      	ldr	r3, [pc, #308]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d6a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d72:	4313      	orrs	r3, r2
 8002d74:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d80:	d101      	bne.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002d82:	2301      	movs	r3, #1
 8002d84:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d101      	bne.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d001      	beq.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0320 	and.w	r3, r3, #32
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	f000 808b 	beq.w	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002db0:	4a3a      	ldr	r2, [pc, #232]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002db2:	4b3a      	ldr	r3, [pc, #232]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dba:	6413      	str	r3, [r2, #64]	; 0x40
 8002dbc:	4b37      	ldr	r3, [pc, #220]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dc4:	60bb      	str	r3, [r7, #8]
 8002dc6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002dc8:	4a35      	ldr	r2, [pc, #212]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002dca:	4b35      	ldr	r3, [pc, #212]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dd2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dd4:	f7fd fc36 	bl	8000644 <HAL_GetTick>
 8002dd8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002dda:	e008      	b.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ddc:	f7fd fc32 	bl	8000644 <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	2b64      	cmp	r3, #100	; 0x64
 8002de8:	d901      	bls.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e38d      	b.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002dee:	4b2c      	ldr	r3, [pc, #176]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d0f0      	beq.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002dfa:	4b28      	ldr	r3, [pc, #160]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e02:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d035      	beq.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0e:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d02e      	beq.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e18:	4b20      	ldr	r3, [pc, #128]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e20:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e22:	4a1e      	ldr	r2, [pc, #120]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e24:	4b1d      	ldr	r3, [pc, #116]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e2c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e2e:	4a1b      	ldr	r2, [pc, #108]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e30:	4b1a      	ldr	r3, [pc, #104]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e38:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002e3a:	4a18      	ldr	r2, [pc, #96]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002e40:	4b16      	ldr	r3, [pc, #88]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e44:	f003 0301 	and.w	r3, r3, #1
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d114      	bne.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e4c:	f7fd fbfa 	bl	8000644 <HAL_GetTick>
 8002e50:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e52:	e00a      	b.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e54:	f7fd fbf6 	bl	8000644 <HAL_GetTick>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d901      	bls.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e34f      	b.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e6a:	4b0c      	ldr	r3, [pc, #48]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e6e:	f003 0302 	and.w	r3, r3, #2
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d0ee      	beq.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e82:	d111      	bne.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002e84:	4805      	ldr	r0, [pc, #20]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e86:	4b05      	ldr	r3, [pc, #20]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e92:	4b04      	ldr	r3, [pc, #16]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002e94:	400b      	ands	r3, r1
 8002e96:	4313      	orrs	r3, r2
 8002e98:	6083      	str	r3, [r0, #8]
 8002e9a:	e00b      	b.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002e9c:	40023800 	.word	0x40023800
 8002ea0:	40007000 	.word	0x40007000
 8002ea4:	0ffffcff 	.word	0x0ffffcff
 8002ea8:	4ab2      	ldr	r2, [pc, #712]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8002eaa:	4bb2      	ldr	r3, [pc, #712]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002eb2:	6093      	str	r3, [r2, #8]
 8002eb4:	49af      	ldr	r1, [pc, #700]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8002eb6:	4baf      	ldr	r3, [pc, #700]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8002eb8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ebe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0310 	and.w	r3, r3, #16
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d010      	beq.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002ed2:	4aa8      	ldr	r2, [pc, #672]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8002ed4:	4ba7      	ldr	r3, [pc, #668]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8002ed6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002eda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ede:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002ee2:	49a4      	ldr	r1, [pc, #656]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8002ee4:	4ba3      	ldr	r3, [pc, #652]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8002ee6:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d00a      	beq.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f00:	499c      	ldr	r1, [pc, #624]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8002f02:	4b9c      	ldr	r3, [pc, #624]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8002f04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f08:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f10:	4313      	orrs	r3, r2
 8002f12:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d00a      	beq.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002f22:	4994      	ldr	r1, [pc, #592]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8002f24:	4b93      	ldr	r3, [pc, #588]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8002f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f2a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f32:	4313      	orrs	r3, r2
 8002f34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d00a      	beq.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f44:	498b      	ldr	r1, [pc, #556]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8002f46:	4b8b      	ldr	r3, [pc, #556]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8002f48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f4c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f54:	4313      	orrs	r3, r2
 8002f56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d00a      	beq.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002f66:	4983      	ldr	r1, [pc, #524]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8002f68:	4b82      	ldr	r3, [pc, #520]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8002f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f6e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f76:	4313      	orrs	r3, r2
 8002f78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d00a      	beq.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f88:	497a      	ldr	r1, [pc, #488]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8002f8a:	4b7a      	ldr	r3, [pc, #488]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8002f8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f90:	f023 0203 	bic.w	r2, r3, #3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d00a      	beq.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002faa:	4972      	ldr	r1, [pc, #456]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8002fac:	4b71      	ldr	r3, [pc, #452]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8002fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fb2:	f023 020c 	bic.w	r2, r3, #12
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d00a      	beq.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002fcc:	4969      	ldr	r1, [pc, #420]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8002fce:	4b69      	ldr	r3, [pc, #420]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8002fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fd4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d00a      	beq.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002fee:	4961      	ldr	r1, [pc, #388]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8002ff0:	4b60      	ldr	r3, [pc, #384]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8002ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ff6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ffe:	4313      	orrs	r3, r2
 8003000:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800300c:	2b00      	cmp	r3, #0
 800300e:	d00a      	beq.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003010:	4958      	ldr	r1, [pc, #352]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8003012:	4b58      	ldr	r3, [pc, #352]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8003014:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003018:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003020:	4313      	orrs	r3, r2
 8003022:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800302e:	2b00      	cmp	r3, #0
 8003030:	d00a      	beq.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003032:	4950      	ldr	r1, [pc, #320]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8003034:	4b4f      	ldr	r3, [pc, #316]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8003036:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800303a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003042:	4313      	orrs	r3, r2
 8003044:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003050:	2b00      	cmp	r3, #0
 8003052:	d00a      	beq.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003054:	4947      	ldr	r1, [pc, #284]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8003056:	4b47      	ldr	r3, [pc, #284]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8003058:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800305c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003064:	4313      	orrs	r3, r2
 8003066:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d00a      	beq.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003076:	493f      	ldr	r1, [pc, #252]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8003078:	4b3e      	ldr	r3, [pc, #248]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 800307a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800307e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003086:	4313      	orrs	r3, r2
 8003088:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003094:	2b00      	cmp	r3, #0
 8003096:	d00a      	beq.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003098:	4936      	ldr	r1, [pc, #216]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 800309a:	4b36      	ldr	r3, [pc, #216]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 800309c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030a0:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80030a8:	4313      	orrs	r3, r2
 80030aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d011      	beq.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80030ba:	492e      	ldr	r1, [pc, #184]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80030bc:	4b2d      	ldr	r3, [pc, #180]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80030be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030c2:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030ca:	4313      	orrs	r3, r2
 80030cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80030d8:	d101      	bne.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80030da:	2301      	movs	r3, #1
 80030dc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0308 	and.w	r3, r3, #8
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d001      	beq.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80030ea:	2301      	movs	r3, #1
 80030ec:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d00a      	beq.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80030fa:	491e      	ldr	r1, [pc, #120]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80030fc:	4b1d      	ldr	r3, [pc, #116]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80030fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003102:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800310a:	4313      	orrs	r3, r2
 800310c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003118:	2b00      	cmp	r3, #0
 800311a:	d00b      	beq.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800311c:	4915      	ldr	r1, [pc, #84]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 800311e:	4b15      	ldr	r3, [pc, #84]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8003120:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003124:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800312e:	4313      	orrs	r3, r2
 8003130:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800313c:	2b00      	cmp	r3, #0
 800313e:	d00b      	beq.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003140:	490c      	ldr	r1, [pc, #48]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8003142:	4b0c      	ldr	r3, [pc, #48]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8003144:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003148:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003152:	4313      	orrs	r3, r2
 8003154:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003160:	2b00      	cmp	r3, #0
 8003162:	d00e      	beq.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003164:	4903      	ldr	r1, [pc, #12]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8003166:	4b03      	ldr	r3, [pc, #12]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8003168:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800316c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	e001      	b.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
 8003174:	40023800 	.word	0x40023800
 8003178:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800317c:	4313      	orrs	r3, r2
 800317e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d00b      	beq.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800318e:	4981      	ldr	r1, [pc, #516]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003190:	4b80      	ldr	r3, [pc, #512]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003192:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003196:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031a0:	4313      	orrs	r3, r2
 80031a2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d006      	beq.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	f000 80d6 	beq.w	8003366 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80031ba:	4a76      	ldr	r2, [pc, #472]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80031bc:	4b75      	ldr	r3, [pc, #468]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80031c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031c6:	f7fd fa3d 	bl	8000644 <HAL_GetTick>
 80031ca:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80031cc:	e008      	b.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80031ce:	f7fd fa39 	bl	8000644 <HAL_GetTick>
 80031d2:	4602      	mov	r2, r0
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	2b64      	cmp	r3, #100	; 0x64
 80031da:	d901      	bls.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80031dc:	2303      	movs	r3, #3
 80031de:	e194      	b.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80031e0:	4b6c      	ldr	r3, [pc, #432]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d1f0      	bne.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0301 	and.w	r3, r3, #1
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d021      	beq.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x570>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d11d      	bne.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003200:	4b64      	ldr	r3, [pc, #400]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003202:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003206:	0c1b      	lsrs	r3, r3, #16
 8003208:	f003 0303 	and.w	r3, r3, #3
 800320c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800320e:	4b61      	ldr	r3, [pc, #388]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003210:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003214:	0e1b      	lsrs	r3, r3, #24
 8003216:	f003 030f 	and.w	r3, r3, #15
 800321a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800321c:	495d      	ldr	r1, [pc, #372]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	019a      	lsls	r2, r3, #6
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	041b      	lsls	r3, r3, #16
 8003228:	431a      	orrs	r2, r3
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	061b      	lsls	r3, r3, #24
 800322e:	431a      	orrs	r2, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	071b      	lsls	r3, r3, #28
 8003236:	4313      	orrs	r3, r2
 8003238:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003244:	2b00      	cmp	r3, #0
 8003246:	d004      	beq.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800324c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003250:	d00a      	beq.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800325a:	2b00      	cmp	r3, #0
 800325c:	d02e      	beq.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003262:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003266:	d129      	bne.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003268:	4b4a      	ldr	r3, [pc, #296]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800326a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800326e:	0c1b      	lsrs	r3, r3, #16
 8003270:	f003 0303 	and.w	r3, r3, #3
 8003274:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003276:	4b47      	ldr	r3, [pc, #284]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003278:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800327c:	0f1b      	lsrs	r3, r3, #28
 800327e:	f003 0307 	and.w	r3, r3, #7
 8003282:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003284:	4943      	ldr	r1, [pc, #268]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	019a      	lsls	r2, r3, #6
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	041b      	lsls	r3, r3, #16
 8003290:	431a      	orrs	r2, r3
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	68db      	ldr	r3, [r3, #12]
 8003296:	061b      	lsls	r3, r3, #24
 8003298:	431a      	orrs	r2, r3
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	071b      	lsls	r3, r3, #28
 800329e:	4313      	orrs	r3, r2
 80032a0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80032a4:	493b      	ldr	r1, [pc, #236]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80032a6:	4b3b      	ldr	r3, [pc, #236]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80032a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032ac:	f023 021f 	bic.w	r2, r3, #31
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b4:	3b01      	subs	r3, #1
 80032b6:	4313      	orrs	r3, r2
 80032b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d01d      	beq.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80032c8:	4b32      	ldr	r3, [pc, #200]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80032ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032ce:	0e1b      	lsrs	r3, r3, #24
 80032d0:	f003 030f 	and.w	r3, r3, #15
 80032d4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80032d6:	4b2f      	ldr	r3, [pc, #188]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80032d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032dc:	0f1b      	lsrs	r3, r3, #28
 80032de:	f003 0307 	and.w	r3, r3, #7
 80032e2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80032e4:	492b      	ldr	r1, [pc, #172]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	019a      	lsls	r2, r3, #6
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	691b      	ldr	r3, [r3, #16]
 80032f0:	041b      	lsls	r3, r3, #16
 80032f2:	431a      	orrs	r2, r3
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	061b      	lsls	r3, r3, #24
 80032f8:	431a      	orrs	r2, r3
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	071b      	lsls	r3, r3, #28
 80032fe:	4313      	orrs	r3, r2
 8003300:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800330c:	2b00      	cmp	r3, #0
 800330e:	d011      	beq.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003310:	4920      	ldr	r1, [pc, #128]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	019a      	lsls	r2, r3, #6
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	691b      	ldr	r3, [r3, #16]
 800331c:	041b      	lsls	r3, r3, #16
 800331e:	431a      	orrs	r2, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	061b      	lsls	r3, r3, #24
 8003326:	431a      	orrs	r2, r3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	071b      	lsls	r3, r3, #28
 800332e:	4313      	orrs	r3, r2
 8003330:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003334:	4a17      	ldr	r2, [pc, #92]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003336:	4b17      	ldr	r3, [pc, #92]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800333e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003340:	f7fd f980 	bl	8000644 <HAL_GetTick>
 8003344:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003346:	e008      	b.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003348:	f7fd f97c 	bl	8000644 <HAL_GetTick>
 800334c:	4602      	mov	r2, r0
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	2b64      	cmp	r3, #100	; 0x64
 8003354:	d901      	bls.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	e0d7      	b.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800335a:	4b0e      	ldr	r3, [pc, #56]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d0f0      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003366:	69bb      	ldr	r3, [r7, #24]
 8003368:	2b01      	cmp	r3, #1
 800336a:	f040 80cd 	bne.w	8003508 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800336e:	4a09      	ldr	r2, [pc, #36]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003370:	4b08      	ldr	r3, [pc, #32]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003378:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800337a:	f7fd f963 	bl	8000644 <HAL_GetTick>
 800337e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003380:	e00a      	b.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003382:	f7fd f95f 	bl	8000644 <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	2b64      	cmp	r3, #100	; 0x64
 800338e:	d903      	bls.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003390:	2303      	movs	r3, #3
 8003392:	e0ba      	b.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8003394:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003398:	4b5e      	ldr	r3, [pc, #376]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80033a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033a4:	d0ed      	beq.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d003      	beq.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d009      	beq.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d02e      	beq.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d12a      	bne.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80033ce:	4b51      	ldr	r3, [pc, #324]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80033d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033d4:	0c1b      	lsrs	r3, r3, #16
 80033d6:	f003 0303 	and.w	r3, r3, #3
 80033da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80033dc:	4b4d      	ldr	r3, [pc, #308]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80033de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033e2:	0f1b      	lsrs	r3, r3, #28
 80033e4:	f003 0307 	and.w	r3, r3, #7
 80033e8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80033ea:	494a      	ldr	r1, [pc, #296]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	695b      	ldr	r3, [r3, #20]
 80033f0:	019a      	lsls	r2, r3, #6
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	041b      	lsls	r3, r3, #16
 80033f6:	431a      	orrs	r2, r3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	699b      	ldr	r3, [r3, #24]
 80033fc:	061b      	lsls	r3, r3, #24
 80033fe:	431a      	orrs	r2, r3
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	071b      	lsls	r3, r3, #28
 8003404:	4313      	orrs	r3, r2
 8003406:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800340a:	4942      	ldr	r1, [pc, #264]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800340c:	4b41      	ldr	r3, [pc, #260]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800340e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003412:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800341a:	3b01      	subs	r3, #1
 800341c:	021b      	lsls	r3, r3, #8
 800341e:	4313      	orrs	r3, r2
 8003420:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800342c:	2b00      	cmp	r3, #0
 800342e:	d022      	beq.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003434:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003438:	d11d      	bne.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800343a:	4b36      	ldr	r3, [pc, #216]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800343c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003440:	0e1b      	lsrs	r3, r3, #24
 8003442:	f003 030f 	and.w	r3, r3, #15
 8003446:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003448:	4b32      	ldr	r3, [pc, #200]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800344a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800344e:	0f1b      	lsrs	r3, r3, #28
 8003450:	f003 0307 	and.w	r3, r3, #7
 8003454:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003456:	492f      	ldr	r1, [pc, #188]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	695b      	ldr	r3, [r3, #20]
 800345c:	019a      	lsls	r2, r3, #6
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6a1b      	ldr	r3, [r3, #32]
 8003462:	041b      	lsls	r3, r3, #16
 8003464:	431a      	orrs	r2, r3
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	061b      	lsls	r3, r3, #24
 800346a:	431a      	orrs	r2, r3
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	071b      	lsls	r3, r3, #28
 8003470:	4313      	orrs	r3, r2
 8003472:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0308 	and.w	r3, r3, #8
 800347e:	2b00      	cmp	r3, #0
 8003480:	d028      	beq.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003482:	4b24      	ldr	r3, [pc, #144]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003484:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003488:	0e1b      	lsrs	r3, r3, #24
 800348a:	f003 030f 	and.w	r3, r3, #15
 800348e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003490:	4b20      	ldr	r3, [pc, #128]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003492:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003496:	0c1b      	lsrs	r3, r3, #16
 8003498:	f003 0303 	and.w	r3, r3, #3
 800349c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800349e:	491d      	ldr	r1, [pc, #116]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	695b      	ldr	r3, [r3, #20]
 80034a4:	019a      	lsls	r2, r3, #6
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	041b      	lsls	r3, r3, #16
 80034aa:	431a      	orrs	r2, r3
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	061b      	lsls	r3, r3, #24
 80034b0:	431a      	orrs	r2, r3
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	69db      	ldr	r3, [r3, #28]
 80034b6:	071b      	lsls	r3, r3, #28
 80034b8:	4313      	orrs	r3, r2
 80034ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80034be:	4915      	ldr	r1, [pc, #84]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80034c0:	4b14      	ldr	r3, [pc, #80]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80034c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034c6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ce:	4313      	orrs	r3, r2
 80034d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80034d4:	4a0f      	ldr	r2, [pc, #60]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80034d6:	4b0f      	ldr	r3, [pc, #60]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034e0:	f7fd f8b0 	bl	8000644 <HAL_GetTick>
 80034e4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80034e6:	e008      	b.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80034e8:	f7fd f8ac 	bl	8000644 <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	2b64      	cmp	r3, #100	; 0x64
 80034f4:	d901      	bls.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	e007      	b.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80034fa:	4b06      	ldr	r3, [pc, #24]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003502:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003506:	d1ef      	bne.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8003508:	2300      	movs	r3, #0
}
 800350a:	4618      	mov	r0, r3
 800350c:	3720      	adds	r7, #32
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	40023800 	.word	0x40023800

08003518 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b082      	sub	sp, #8
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d101      	bne.n	800352a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e01c      	b.n	8003564 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	795b      	ldrb	r3, [r3, #5]
 800352e:	b2db      	uxtb	r3, r3
 8003530:	2b00      	cmp	r3, #0
 8003532:	d105      	bne.n	8003540 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f013 fcd0 	bl	8016ee0 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2202      	movs	r2, #2
 8003544:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	6812      	ldr	r2, [r2, #0]
 800354e:	6812      	ldr	r2, [r2, #0]
 8003550:	f042 0204 	orr.w	r2, r2, #4
 8003554:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2201      	movs	r2, #1
 800355a:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2200      	movs	r2, #0
 8003560:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8003562:	2300      	movs	r3, #0
}
 8003564:	4618      	mov	r0, r3
 8003566:	3708      	adds	r7, #8
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}

0800356c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b082      	sub	sp, #8
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d101      	bne.n	800357e <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e081      	b.n	8003682 <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	7f5b      	ldrb	r3, [r3, #29]
 8003582:	b2db      	uxtb	r3, r3
 8003584:	2b00      	cmp	r3, #0
 8003586:	d105      	bne.n	8003594 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2200      	movs	r2, #0
 800358c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f013 fcc6 	bl	8016f20 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2202      	movs	r2, #2
 8003598:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	22ca      	movs	r2, #202	; 0xca
 80035a0:	625a      	str	r2, [r3, #36]	; 0x24
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	2253      	movs	r2, #83	; 0x53
 80035a8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f000 f9fe 	bl	80039ac <RTC_EnterInitMode>
 80035b0:	4603      	mov	r3, r0
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d008      	beq.n	80035c8 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	22ff      	movs	r2, #255	; 0xff
 80035bc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2204      	movs	r2, #4
 80035c2:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e05c      	b.n	8003682 <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	6899      	ldr	r1, [r3, #8]
 80035d2:	4b2e      	ldr	r3, [pc, #184]	; (800368c <HAL_RTC_Init+0x120>)
 80035d4:	400b      	ands	r3, r1
 80035d6:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	687a      	ldr	r2, [r7, #4]
 80035de:	6812      	ldr	r2, [r2, #0]
 80035e0:	6891      	ldr	r1, [r2, #8]
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	6850      	ldr	r0, [r2, #4]
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	6912      	ldr	r2, [r2, #16]
 80035ea:	4310      	orrs	r0, r2
 80035ec:	687a      	ldr	r2, [r7, #4]
 80035ee:	6952      	ldr	r2, [r2, #20]
 80035f0:	4302      	orrs	r2, r0
 80035f2:	430a      	orrs	r2, r1
 80035f4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	68d2      	ldr	r2, [r2, #12]
 80035fe:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	6812      	ldr	r2, [r2, #0]
 8003608:	6911      	ldr	r1, [r2, #16]
 800360a:	687a      	ldr	r2, [r7, #4]
 800360c:	6892      	ldr	r2, [r2, #8]
 800360e:	0412      	lsls	r2, r2, #16
 8003610:	430a      	orrs	r2, r1
 8003612:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	687a      	ldr	r2, [r7, #4]
 800361a:	6812      	ldr	r2, [r2, #0]
 800361c:	68d2      	ldr	r2, [r2, #12]
 800361e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003622:	60da      	str	r2, [r3, #12]
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	f003 0320 	and.w	r3, r3, #32
 800362e:	2b00      	cmp	r3, #0
 8003630:	d10e      	bne.n	8003650 <HAL_RTC_Init+0xe4>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f000 f992 	bl	800395c <HAL_RTC_WaitForSynchro>
 8003638:	4603      	mov	r3, r0
 800363a:	2b00      	cmp	r3, #0
 800363c:	d008      	beq.n	8003650 <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	22ff      	movs	r2, #255	; 0xff
 8003644:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2204      	movs	r2, #4
 800364a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e018      	b.n	8003682 <HAL_RTC_Init+0x116>
      }
    }
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	687a      	ldr	r2, [r7, #4]
 8003656:	6812      	ldr	r2, [r2, #0]
 8003658:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800365a:	f022 0208 	bic.w	r2, r2, #8
 800365e:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	687a      	ldr	r2, [r7, #4]
 8003666:	6812      	ldr	r2, [r2, #0]
 8003668:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	6992      	ldr	r2, [r2, #24]
 800366e:	430a      	orrs	r2, r1
 8003670:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	22ff      	movs	r2, #255	; 0xff
 8003678:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2201      	movs	r2, #1
 800367e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8003680:	2300      	movs	r3, #0
  }
}
 8003682:	4618      	mov	r0, r3
 8003684:	3708      	adds	r7, #8
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
 800368a:	bf00      	nop
 800368c:	ff8fffbf 	.word	0xff8fffbf

08003690 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003690:	b590      	push	{r4, r7, lr}
 8003692:	b087      	sub	sp, #28
 8003694:	af00      	add	r7, sp, #0
 8003696:	60f8      	str	r0, [r7, #12]
 8003698:	60b9      	str	r1, [r7, #8]
 800369a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800369c:	2300      	movs	r3, #0
 800369e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	7f1b      	ldrb	r3, [r3, #28]
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d101      	bne.n	80036ac <HAL_RTC_SetTime+0x1c>
 80036a8:	2302      	movs	r3, #2
 80036aa:	e0a8      	b.n	80037fe <HAL_RTC_SetTime+0x16e>
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2201      	movs	r2, #1
 80036b0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2202      	movs	r2, #2
 80036b6:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d126      	bne.n	800370c <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d102      	bne.n	80036d2 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	2200      	movs	r2, #0
 80036d0:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	781b      	ldrb	r3, [r3, #0]
 80036d6:	4618      	mov	r0, r3
 80036d8:	f000 f994 	bl	8003a04 <RTC_ByteToBcd2>
 80036dc:	4603      	mov	r3, r0
 80036de:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	785b      	ldrb	r3, [r3, #1]
 80036e4:	4618      	mov	r0, r3
 80036e6:	f000 f98d 	bl	8003a04 <RTC_ByteToBcd2>
 80036ea:	4603      	mov	r3, r0
 80036ec:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80036ee:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	789b      	ldrb	r3, [r3, #2]
 80036f4:	4618      	mov	r0, r3
 80036f6:	f000 f985 	bl	8003a04 <RTC_ByteToBcd2>
 80036fa:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80036fc:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	7b1b      	ldrb	r3, [r3, #12]
 8003704:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8003706:	4313      	orrs	r3, r2
 8003708:	617b      	str	r3, [r7, #20]
 800370a:	e018      	b.n	800373e <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003716:	2b00      	cmp	r3, #0
 8003718:	d102      	bne.n	8003720 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	2200      	movs	r2, #0
 800371e:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	781b      	ldrb	r3, [r3, #0]
 8003724:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	785b      	ldrb	r3, [r3, #1]
 800372a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800372c:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800372e:	68ba      	ldr	r2, [r7, #8]
 8003730:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8003732:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	7b1b      	ldrb	r3, [r3, #12]
 8003738:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800373a:	4313      	orrs	r3, r2
 800373c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	22ca      	movs	r2, #202	; 0xca
 8003744:	625a      	str	r2, [r3, #36]	; 0x24
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	2253      	movs	r2, #83	; 0x53
 800374c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800374e:	68f8      	ldr	r0, [r7, #12]
 8003750:	f000 f92c 	bl	80039ac <RTC_EnterInitMode>
 8003754:	4603      	mov	r3, r0
 8003756:	2b00      	cmp	r3, #0
 8003758:	d00b      	beq.n	8003772 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	22ff      	movs	r2, #255	; 0xff
 8003760:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2204      	movs	r2, #4
 8003766:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2200      	movs	r2, #0
 800376c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e045      	b.n	80037fe <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	6979      	ldr	r1, [r7, #20]
 8003778:	4b23      	ldr	r3, [pc, #140]	; (8003808 <HAL_RTC_SetTime+0x178>)
 800377a:	400b      	ands	r3, r1
 800377c:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	68fa      	ldr	r2, [r7, #12]
 8003784:	6812      	ldr	r2, [r2, #0]
 8003786:	6892      	ldr	r2, [r2, #8]
 8003788:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800378c:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	68fa      	ldr	r2, [r7, #12]
 8003794:	6812      	ldr	r2, [r2, #0]
 8003796:	6891      	ldr	r1, [r2, #8]
 8003798:	68ba      	ldr	r2, [r7, #8]
 800379a:	6910      	ldr	r0, [r2, #16]
 800379c:	68ba      	ldr	r2, [r7, #8]
 800379e:	6952      	ldr	r2, [r2, #20]
 80037a0:	4302      	orrs	r2, r0
 80037a2:	430a      	orrs	r2, r1
 80037a4:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	68fa      	ldr	r2, [r7, #12]
 80037ac:	6812      	ldr	r2, [r2, #0]
 80037ae:	68d2      	ldr	r2, [r2, #12]
 80037b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80037b4:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	f003 0320 	and.w	r3, r3, #32
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d111      	bne.n	80037e8 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80037c4:	68f8      	ldr	r0, [r7, #12]
 80037c6:	f000 f8c9 	bl	800395c <HAL_RTC_WaitForSynchro>
 80037ca:	4603      	mov	r3, r0
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d00b      	beq.n	80037e8 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	22ff      	movs	r2, #255	; 0xff
 80037d6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2204      	movs	r2, #4
 80037dc:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2200      	movs	r2, #0
 80037e2:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e00a      	b.n	80037fe <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	22ff      	movs	r2, #255	; 0xff
 80037ee:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2201      	movs	r2, #1
 80037f4:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2200      	movs	r2, #0
 80037fa:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 80037fc:	2300      	movs	r3, #0
  }
}
 80037fe:	4618      	mov	r0, r3
 8003800:	371c      	adds	r7, #28
 8003802:	46bd      	mov	sp, r7
 8003804:	bd90      	pop	{r4, r7, pc}
 8003806:	bf00      	nop
 8003808:	007f7f7f 	.word	0x007f7f7f

0800380c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800380c:	b590      	push	{r4, r7, lr}
 800380e:	b087      	sub	sp, #28
 8003810:	af00      	add	r7, sp, #0
 8003812:	60f8      	str	r0, [r7, #12]
 8003814:	60b9      	str	r1, [r7, #8]
 8003816:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8003818:	2300      	movs	r3, #0
 800381a:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	7f1b      	ldrb	r3, [r3, #28]
 8003820:	2b01      	cmp	r3, #1
 8003822:	d101      	bne.n	8003828 <HAL_RTC_SetDate+0x1c>
 8003824:	2302      	movs	r3, #2
 8003826:	e092      	b.n	800394e <HAL_RTC_SetDate+0x142>
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2201      	movs	r2, #1
 800382c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2202      	movs	r2, #2
 8003832:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d10e      	bne.n	8003858 <HAL_RTC_SetDate+0x4c>
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	785b      	ldrb	r3, [r3, #1]
 800383e:	f003 0310 	and.w	r3, r3, #16
 8003842:	2b00      	cmp	r3, #0
 8003844:	d008      	beq.n	8003858 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	785b      	ldrb	r3, [r3, #1]
 800384a:	f023 0310 	bic.w	r3, r3, #16
 800384e:	b2db      	uxtb	r3, r3
 8003850:	330a      	adds	r3, #10
 8003852:	b2da      	uxtb	r2, r3
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d11c      	bne.n	8003898 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	78db      	ldrb	r3, [r3, #3]
 8003862:	4618      	mov	r0, r3
 8003864:	f000 f8ce 	bl	8003a04 <RTC_ByteToBcd2>
 8003868:	4603      	mov	r3, r0
 800386a:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	785b      	ldrb	r3, [r3, #1]
 8003870:	4618      	mov	r0, r3
 8003872:	f000 f8c7 	bl	8003a04 <RTC_ByteToBcd2>
 8003876:	4603      	mov	r3, r0
 8003878:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800387a:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	789b      	ldrb	r3, [r3, #2]
 8003880:	4618      	mov	r0, r3
 8003882:	f000 f8bf 	bl	8003a04 <RTC_ByteToBcd2>
 8003886:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8003888:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	781b      	ldrb	r3, [r3, #0]
 8003890:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8003892:	4313      	orrs	r3, r2
 8003894:	617b      	str	r3, [r7, #20]
 8003896:	e00e      	b.n	80038b6 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	78db      	ldrb	r3, [r3, #3]
 800389c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	785b      	ldrb	r3, [r3, #1]
 80038a2:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80038a4:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80038a6:	68ba      	ldr	r2, [r7, #8]
 80038a8:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 80038aa:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80038b2:	4313      	orrs	r3, r2
 80038b4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	22ca      	movs	r2, #202	; 0xca
 80038bc:	625a      	str	r2, [r3, #36]	; 0x24
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	2253      	movs	r2, #83	; 0x53
 80038c4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80038c6:	68f8      	ldr	r0, [r7, #12]
 80038c8:	f000 f870 	bl	80039ac <RTC_EnterInitMode>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d00b      	beq.n	80038ea <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	22ff      	movs	r2, #255	; 0xff
 80038d8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2204      	movs	r2, #4
 80038de:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2200      	movs	r2, #0
 80038e4:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e031      	b.n	800394e <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	6979      	ldr	r1, [r7, #20]
 80038f0:	4b19      	ldr	r3, [pc, #100]	; (8003958 <HAL_RTC_SetDate+0x14c>)
 80038f2:	400b      	ands	r3, r1
 80038f4:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	68fa      	ldr	r2, [r7, #12]
 80038fc:	6812      	ldr	r2, [r2, #0]
 80038fe:	68d2      	ldr	r2, [r2, #12]
 8003900:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003904:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	f003 0320 	and.w	r3, r3, #32
 8003910:	2b00      	cmp	r3, #0
 8003912:	d111      	bne.n	8003938 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003914:	68f8      	ldr	r0, [r7, #12]
 8003916:	f000 f821 	bl	800395c <HAL_RTC_WaitForSynchro>
 800391a:	4603      	mov	r3, r0
 800391c:	2b00      	cmp	r3, #0
 800391e:	d00b      	beq.n	8003938 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	22ff      	movs	r2, #255	; 0xff
 8003926:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2204      	movs	r2, #4
 800392c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2200      	movs	r2, #0
 8003932:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e00a      	b.n	800394e <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	22ff      	movs	r2, #255	; 0xff
 800393e:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2201      	movs	r2, #1
 8003944:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2200      	movs	r2, #0
 800394a:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800394c:	2300      	movs	r3, #0
  }
}
 800394e:	4618      	mov	r0, r3
 8003950:	371c      	adds	r7, #28
 8003952:	46bd      	mov	sp, r7
 8003954:	bd90      	pop	{r4, r7, pc}
 8003956:	bf00      	nop
 8003958:	00ffff3f 	.word	0x00ffff3f

0800395c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003964:	2300      	movs	r3, #0
 8003966:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	6812      	ldr	r2, [r2, #0]
 8003970:	68d2      	ldr	r2, [r2, #12]
 8003972:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003976:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003978:	f7fc fe64 	bl	8000644 <HAL_GetTick>
 800397c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800397e:	e009      	b.n	8003994 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003980:	f7fc fe60 	bl	8000644 <HAL_GetTick>
 8003984:	4602      	mov	r2, r0
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800398e:	d901      	bls.n	8003994 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003990:	2303      	movs	r3, #3
 8003992:	e007      	b.n	80039a4 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	f003 0320 	and.w	r3, r3, #32
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d0ee      	beq.n	8003980 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80039a2:	2300      	movs	r3, #0
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3710      	adds	r7, #16
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}

080039ac <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b084      	sub	sp, #16
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80039b4:	2300      	movs	r3, #0
 80039b6:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	68db      	ldr	r3, [r3, #12]
 80039be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d119      	bne.n	80039fa <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f04f 32ff 	mov.w	r2, #4294967295
 80039ce:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80039d0:	f7fc fe38 	bl	8000644 <HAL_GetTick>
 80039d4:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80039d6:	e009      	b.n	80039ec <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80039d8:	f7fc fe34 	bl	8000644 <HAL_GetTick>
 80039dc:	4602      	mov	r2, r0
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80039e6:	d901      	bls.n	80039ec <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80039e8:	2303      	movs	r3, #3
 80039ea:	e007      	b.n	80039fc <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	68db      	ldr	r3, [r3, #12]
 80039f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d0ee      	beq.n	80039d8 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80039fa:	2300      	movs	r3, #0
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	3710      	adds	r7, #16
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}

08003a04 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b085      	sub	sp, #20
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 8003a12:	e005      	b.n	8003a20 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	3301      	adds	r3, #1
 8003a18:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 8003a1a:	79fb      	ldrb	r3, [r7, #7]
 8003a1c:	3b0a      	subs	r3, #10
 8003a1e:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 8003a20:	79fb      	ldrb	r3, [r7, #7]
 8003a22:	2b09      	cmp	r3, #9
 8003a24:	d8f6      	bhi.n	8003a14 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	011b      	lsls	r3, r3, #4
 8003a2c:	b2da      	uxtb	r2, r3
 8003a2e:	79fb      	ldrb	r3, [r7, #7]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	b2db      	uxtb	r3, r3
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	3714      	adds	r7, #20
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr

08003a40 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b084      	sub	sp, #16
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d101      	bne.n	8003a52 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e09b      	b.n	8003b8a <HAL_SPI_Init+0x14a>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d108      	bne.n	8003a6c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a62:	d009      	beq.n	8003a78 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2200      	movs	r2, #0
 8003a68:	61da      	str	r2, [r3, #28]
 8003a6a:	e005      	b.n	8003a78 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d106      	bne.n	8003a98 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f013 fa5e 	bl	8016f54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2202      	movs	r2, #2
 8003a9c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	687a      	ldr	r2, [r7, #4]
 8003aa6:	6812      	ldr	r2, [r2, #0]
 8003aa8:	6812      	ldr	r2, [r2, #0]
 8003aaa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003aae:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ab8:	d902      	bls.n	8003ac0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003aba:	2300      	movs	r3, #0
 8003abc:	60fb      	str	r3, [r7, #12]
 8003abe:	e002      	b.n	8003ac6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003ac0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ac4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003ace:	d007      	beq.n	8003ae0 <HAL_SPI_Init+0xa0>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ad8:	d002      	beq.n	8003ae0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2200      	movs	r2, #0
 8003ade:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	687a      	ldr	r2, [r7, #4]
 8003ae6:	6852      	ldr	r2, [r2, #4]
 8003ae8:	f402 7182 	and.w	r1, r2, #260	; 0x104
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	6892      	ldr	r2, [r2, #8]
 8003af0:	f402 4204 	and.w	r2, r2, #33792	; 0x8400
 8003af4:	4311      	orrs	r1, r2
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	6912      	ldr	r2, [r2, #16]
 8003afa:	f002 0202 	and.w	r2, r2, #2
 8003afe:	4311      	orrs	r1, r2
 8003b00:	687a      	ldr	r2, [r7, #4]
 8003b02:	6952      	ldr	r2, [r2, #20]
 8003b04:	f002 0201 	and.w	r2, r2, #1
 8003b08:	4311      	orrs	r1, r2
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	6992      	ldr	r2, [r2, #24]
 8003b0e:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8003b12:	4311      	orrs	r1, r2
 8003b14:	687a      	ldr	r2, [r7, #4]
 8003b16:	69d2      	ldr	r2, [r2, #28]
 8003b18:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8003b1c:	4311      	orrs	r1, r2
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	6a12      	ldr	r2, [r2, #32]
 8003b22:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8003b26:	4311      	orrs	r1, r2
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003b2c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003b30:	430a      	orrs	r2, r1
 8003b32:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	687a      	ldr	r2, [r7, #4]
 8003b3a:	6992      	ldr	r2, [r2, #24]
 8003b3c:	0c12      	lsrs	r2, r2, #16
 8003b3e:	f002 0104 	and.w	r1, r2, #4
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b46:	f002 0210 	and.w	r2, r2, #16
 8003b4a:	4311      	orrs	r1, r2
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003b50:	f002 0208 	and.w	r2, r2, #8
 8003b54:	4311      	orrs	r1, r2
 8003b56:	687a      	ldr	r2, [r7, #4]
 8003b58:	68d2      	ldr	r2, [r2, #12]
 8003b5a:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 8003b5e:	4311      	orrs	r1, r2
 8003b60:	68fa      	ldr	r2, [r7, #12]
 8003b62:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003b66:	430a      	orrs	r2, r1
 8003b68:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	6812      	ldr	r2, [r2, #0]
 8003b72:	69d2      	ldr	r2, [r2, #28]
 8003b74:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b78:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2201      	movs	r2, #1
 8003b84:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003b88:	2300      	movs	r3, #0
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3710      	adds	r7, #16
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}

08003b92 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b92:	b580      	push	{r7, lr}
 8003b94:	b082      	sub	sp, #8
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d101      	bne.n	8003ba4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e049      	b.n	8003c38 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d106      	bne.n	8003bbe <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	f013 fa7d 	bl	80170b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2202      	movs	r2, #2
 8003bc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	3304      	adds	r3, #4
 8003bce:	4619      	mov	r1, r3
 8003bd0:	4610      	mov	r0, r2
 8003bd2:	f000 faaf 	bl	8004134 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2201      	movs	r2, #1
 8003bda:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2201      	movs	r2, #1
 8003be2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2201      	movs	r2, #1
 8003bea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2201      	movs	r2, #1
 8003c02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2201      	movs	r2, #1
 8003c0a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2201      	movs	r2, #1
 8003c12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2201      	movs	r2, #1
 8003c1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2201      	movs	r2, #1
 8003c22:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2201      	movs	r2, #1
 8003c2a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2201      	movs	r2, #1
 8003c32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c36:	2300      	movs	r3, #0
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3708      	adds	r7, #8
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}

08003c40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b085      	sub	sp, #20
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d001      	beq.n	8003c58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e054      	b.n	8003d02 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2202      	movs	r2, #2
 8003c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	6812      	ldr	r2, [r2, #0]
 8003c68:	68d2      	ldr	r2, [r2, #12]
 8003c6a:	f042 0201 	orr.w	r2, r2, #1
 8003c6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a26      	ldr	r2, [pc, #152]	; (8003d10 <HAL_TIM_Base_Start_IT+0xd0>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d022      	beq.n	8003cc0 <HAL_TIM_Base_Start_IT+0x80>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c82:	d01d      	beq.n	8003cc0 <HAL_TIM_Base_Start_IT+0x80>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a22      	ldr	r2, [pc, #136]	; (8003d14 <HAL_TIM_Base_Start_IT+0xd4>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d018      	beq.n	8003cc0 <HAL_TIM_Base_Start_IT+0x80>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a21      	ldr	r2, [pc, #132]	; (8003d18 <HAL_TIM_Base_Start_IT+0xd8>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d013      	beq.n	8003cc0 <HAL_TIM_Base_Start_IT+0x80>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a1f      	ldr	r2, [pc, #124]	; (8003d1c <HAL_TIM_Base_Start_IT+0xdc>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d00e      	beq.n	8003cc0 <HAL_TIM_Base_Start_IT+0x80>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a1e      	ldr	r2, [pc, #120]	; (8003d20 <HAL_TIM_Base_Start_IT+0xe0>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d009      	beq.n	8003cc0 <HAL_TIM_Base_Start_IT+0x80>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a1c      	ldr	r2, [pc, #112]	; (8003d24 <HAL_TIM_Base_Start_IT+0xe4>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d004      	beq.n	8003cc0 <HAL_TIM_Base_Start_IT+0x80>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a1b      	ldr	r2, [pc, #108]	; (8003d28 <HAL_TIM_Base_Start_IT+0xe8>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d115      	bne.n	8003cec <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	689a      	ldr	r2, [r3, #8]
 8003cc6:	4b19      	ldr	r3, [pc, #100]	; (8003d2c <HAL_TIM_Base_Start_IT+0xec>)
 8003cc8:	4013      	ands	r3, r2
 8003cca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2b06      	cmp	r3, #6
 8003cd0:	d015      	beq.n	8003cfe <HAL_TIM_Base_Start_IT+0xbe>
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cd8:	d011      	beq.n	8003cfe <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	6812      	ldr	r2, [r2, #0]
 8003ce2:	6812      	ldr	r2, [r2, #0]
 8003ce4:	f042 0201 	orr.w	r2, r2, #1
 8003ce8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cea:	e008      	b.n	8003cfe <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	6812      	ldr	r2, [r2, #0]
 8003cf4:	6812      	ldr	r2, [r2, #0]
 8003cf6:	f042 0201 	orr.w	r2, r2, #1
 8003cfa:	601a      	str	r2, [r3, #0]
 8003cfc:	e000      	b.n	8003d00 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cfe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003d00:	2300      	movs	r3, #0
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3714      	adds	r7, #20
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr
 8003d0e:	bf00      	nop
 8003d10:	40010000 	.word	0x40010000
 8003d14:	40000400 	.word	0x40000400
 8003d18:	40000800 	.word	0x40000800
 8003d1c:	40000c00 	.word	0x40000c00
 8003d20:	40010400 	.word	0x40010400
 8003d24:	40014000 	.word	0x40014000
 8003d28:	40001800 	.word	0x40001800
 8003d2c:	00010007 	.word	0x00010007

08003d30 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b082      	sub	sp, #8
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	691b      	ldr	r3, [r3, #16]
 8003d3e:	f003 0302 	and.w	r3, r3, #2
 8003d42:	2b02      	cmp	r3, #2
 8003d44:	d122      	bne.n	8003d8c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	f003 0302 	and.w	r3, r3, #2
 8003d50:	2b02      	cmp	r3, #2
 8003d52:	d11b      	bne.n	8003d8c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f06f 0202 	mvn.w	r2, #2
 8003d5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2201      	movs	r2, #1
 8003d62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	699b      	ldr	r3, [r3, #24]
 8003d6a:	f003 0303 	and.w	r3, r3, #3
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d003      	beq.n	8003d7a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f000 f9c0 	bl	80040f8 <HAL_TIM_IC_CaptureCallback>
 8003d78:	e005      	b.n	8003d86 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f000 f9b2 	bl	80040e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f000 f9c3 	bl	800410c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	691b      	ldr	r3, [r3, #16]
 8003d92:	f003 0304 	and.w	r3, r3, #4
 8003d96:	2b04      	cmp	r3, #4
 8003d98:	d122      	bne.n	8003de0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	68db      	ldr	r3, [r3, #12]
 8003da0:	f003 0304 	and.w	r3, r3, #4
 8003da4:	2b04      	cmp	r3, #4
 8003da6:	d11b      	bne.n	8003de0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f06f 0204 	mvn.w	r2, #4
 8003db0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2202      	movs	r2, #2
 8003db6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	699b      	ldr	r3, [r3, #24]
 8003dbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d003      	beq.n	8003dce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f000 f996 	bl	80040f8 <HAL_TIM_IC_CaptureCallback>
 8003dcc:	e005      	b.n	8003dda <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f000 f988 	bl	80040e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f000 f999 	bl	800410c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	691b      	ldr	r3, [r3, #16]
 8003de6:	f003 0308 	and.w	r3, r3, #8
 8003dea:	2b08      	cmp	r3, #8
 8003dec:	d122      	bne.n	8003e34 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	f003 0308 	and.w	r3, r3, #8
 8003df8:	2b08      	cmp	r3, #8
 8003dfa:	d11b      	bne.n	8003e34 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f06f 0208 	mvn.w	r2, #8
 8003e04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2204      	movs	r2, #4
 8003e0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	69db      	ldr	r3, [r3, #28]
 8003e12:	f003 0303 	and.w	r3, r3, #3
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d003      	beq.n	8003e22 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f000 f96c 	bl	80040f8 <HAL_TIM_IC_CaptureCallback>
 8003e20:	e005      	b.n	8003e2e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f000 f95e 	bl	80040e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e28:	6878      	ldr	r0, [r7, #4]
 8003e2a:	f000 f96f 	bl	800410c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2200      	movs	r2, #0
 8003e32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	691b      	ldr	r3, [r3, #16]
 8003e3a:	f003 0310 	and.w	r3, r3, #16
 8003e3e:	2b10      	cmp	r3, #16
 8003e40:	d122      	bne.n	8003e88 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	f003 0310 	and.w	r3, r3, #16
 8003e4c:	2b10      	cmp	r3, #16
 8003e4e:	d11b      	bne.n	8003e88 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f06f 0210 	mvn.w	r2, #16
 8003e58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2208      	movs	r2, #8
 8003e5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	69db      	ldr	r3, [r3, #28]
 8003e66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d003      	beq.n	8003e76 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f000 f942 	bl	80040f8 <HAL_TIM_IC_CaptureCallback>
 8003e74:	e005      	b.n	8003e82 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f000 f934 	bl	80040e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	f000 f945 	bl	800410c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	691b      	ldr	r3, [r3, #16]
 8003e8e:	f003 0301 	and.w	r3, r3, #1
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d10e      	bne.n	8003eb4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	f003 0301 	and.w	r3, r3, #1
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d107      	bne.n	8003eb4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f06f 0201 	mvn.w	r2, #1
 8003eac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f012 ff94 	bl	8016ddc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	691b      	ldr	r3, [r3, #16]
 8003eba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ebe:	2b80      	cmp	r3, #128	; 0x80
 8003ec0:	d10e      	bne.n	8003ee0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ecc:	2b80      	cmp	r3, #128	; 0x80
 8003ece:	d107      	bne.n	8003ee0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ed8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f000 fafc 	bl	80044d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	691b      	ldr	r3, [r3, #16]
 8003ee6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003eee:	d10e      	bne.n	8003f0e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	68db      	ldr	r3, [r3, #12]
 8003ef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003efa:	2b80      	cmp	r3, #128	; 0x80
 8003efc:	d107      	bne.n	8003f0e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003f06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	f000 faef 	bl	80044ec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	691b      	ldr	r3, [r3, #16]
 8003f14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f18:	2b40      	cmp	r3, #64	; 0x40
 8003f1a:	d10e      	bne.n	8003f3a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	68db      	ldr	r3, [r3, #12]
 8003f22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f26:	2b40      	cmp	r3, #64	; 0x40
 8003f28:	d107      	bne.n	8003f3a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f000 f8f3 	bl	8004120 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	691b      	ldr	r3, [r3, #16]
 8003f40:	f003 0320 	and.w	r3, r3, #32
 8003f44:	2b20      	cmp	r3, #32
 8003f46:	d10e      	bne.n	8003f66 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	f003 0320 	and.w	r3, r3, #32
 8003f52:	2b20      	cmp	r3, #32
 8003f54:	d107      	bne.n	8003f66 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f06f 0220 	mvn.w	r2, #32
 8003f5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f000 faaf 	bl	80044c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f66:	bf00      	nop
 8003f68:	3708      	adds	r7, #8
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}
	...

08003f70 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b084      	sub	sp, #16
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d101      	bne.n	8003f88 <HAL_TIM_ConfigClockSource+0x18>
 8003f84:	2302      	movs	r3, #2
 8003f86:	e0a6      	b.n	80040d6 <HAL_TIM_ConfigClockSource+0x166>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2202      	movs	r2, #2
 8003f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003fa0:	68fa      	ldr	r2, [r7, #12]
 8003fa2:	4b4f      	ldr	r3, [pc, #316]	; (80040e0 <HAL_TIM_ConfigClockSource+0x170>)
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003fae:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	68fa      	ldr	r2, [r7, #12]
 8003fb6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	2b40      	cmp	r3, #64	; 0x40
 8003fbe:	d067      	beq.n	8004090 <HAL_TIM_ConfigClockSource+0x120>
 8003fc0:	2b40      	cmp	r3, #64	; 0x40
 8003fc2:	d80b      	bhi.n	8003fdc <HAL_TIM_ConfigClockSource+0x6c>
 8003fc4:	2b10      	cmp	r3, #16
 8003fc6:	d073      	beq.n	80040b0 <HAL_TIM_ConfigClockSource+0x140>
 8003fc8:	2b10      	cmp	r3, #16
 8003fca:	d802      	bhi.n	8003fd2 <HAL_TIM_ConfigClockSource+0x62>
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d06f      	beq.n	80040b0 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003fd0:	e078      	b.n	80040c4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003fd2:	2b20      	cmp	r3, #32
 8003fd4:	d06c      	beq.n	80040b0 <HAL_TIM_ConfigClockSource+0x140>
 8003fd6:	2b30      	cmp	r3, #48	; 0x30
 8003fd8:	d06a      	beq.n	80040b0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003fda:	e073      	b.n	80040c4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003fdc:	2b70      	cmp	r3, #112	; 0x70
 8003fde:	d00d      	beq.n	8003ffc <HAL_TIM_ConfigClockSource+0x8c>
 8003fe0:	2b70      	cmp	r3, #112	; 0x70
 8003fe2:	d804      	bhi.n	8003fee <HAL_TIM_ConfigClockSource+0x7e>
 8003fe4:	2b50      	cmp	r3, #80	; 0x50
 8003fe6:	d033      	beq.n	8004050 <HAL_TIM_ConfigClockSource+0xe0>
 8003fe8:	2b60      	cmp	r3, #96	; 0x60
 8003fea:	d041      	beq.n	8004070 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003fec:	e06a      	b.n	80040c4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003fee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ff2:	d066      	beq.n	80040c2 <HAL_TIM_ConfigClockSource+0x152>
 8003ff4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ff8:	d017      	beq.n	800402a <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003ffa:	e063      	b.n	80040c4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6818      	ldr	r0, [r3, #0]
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	6899      	ldr	r1, [r3, #8]
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	685a      	ldr	r2, [r3, #4]
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	f000 f9ac 	bl	8004368 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800401e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	68fa      	ldr	r2, [r7, #12]
 8004026:	609a      	str	r2, [r3, #8]
      break;
 8004028:	e04c      	b.n	80040c4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6818      	ldr	r0, [r3, #0]
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	6899      	ldr	r1, [r3, #8]
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	685a      	ldr	r2, [r3, #4]
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	68db      	ldr	r3, [r3, #12]
 800403a:	f000 f995 	bl	8004368 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	6812      	ldr	r2, [r2, #0]
 8004046:	6892      	ldr	r2, [r2, #8]
 8004048:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800404c:	609a      	str	r2, [r3, #8]
      break;
 800404e:	e039      	b.n	80040c4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6818      	ldr	r0, [r3, #0]
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	6859      	ldr	r1, [r3, #4]
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	461a      	mov	r2, r3
 800405e:	f000 f909 	bl	8004274 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	2150      	movs	r1, #80	; 0x50
 8004068:	4618      	mov	r0, r3
 800406a:	f000 f962 	bl	8004332 <TIM_ITRx_SetConfig>
      break;
 800406e:	e029      	b.n	80040c4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6818      	ldr	r0, [r3, #0]
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	6859      	ldr	r1, [r3, #4]
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	461a      	mov	r2, r3
 800407e:	f000 f928 	bl	80042d2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	2160      	movs	r1, #96	; 0x60
 8004088:	4618      	mov	r0, r3
 800408a:	f000 f952 	bl	8004332 <TIM_ITRx_SetConfig>
      break;
 800408e:	e019      	b.n	80040c4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6818      	ldr	r0, [r3, #0]
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	6859      	ldr	r1, [r3, #4]
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	461a      	mov	r2, r3
 800409e:	f000 f8e9 	bl	8004274 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	2140      	movs	r1, #64	; 0x40
 80040a8:	4618      	mov	r0, r3
 80040aa:	f000 f942 	bl	8004332 <TIM_ITRx_SetConfig>
      break;
 80040ae:	e009      	b.n	80040c4 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4619      	mov	r1, r3
 80040ba:	4610      	mov	r0, r2
 80040bc:	f000 f939 	bl	8004332 <TIM_ITRx_SetConfig>
        break;
 80040c0:	e000      	b.n	80040c4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80040c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2200      	movs	r2, #0
 80040d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80040d4:	2300      	movs	r3, #0
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3710      	adds	r7, #16
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}
 80040de:	bf00      	nop
 80040e0:	fffeff88 	.word	0xfffeff88

080040e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b083      	sub	sp, #12
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80040ec:	bf00      	nop
 80040ee:	370c      	adds	r7, #12
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr

080040f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b083      	sub	sp, #12
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004100:	bf00      	nop
 8004102:	370c      	adds	r7, #12
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr

0800410c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800410c:	b480      	push	{r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004114:	bf00      	nop
 8004116:	370c      	adds	r7, #12
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr

08004120 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004128:	bf00      	nop
 800412a:	370c      	adds	r7, #12
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr

08004134 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004134:	b480      	push	{r7}
 8004136:	b085      	sub	sp, #20
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	4a40      	ldr	r2, [pc, #256]	; (8004248 <TIM_Base_SetConfig+0x114>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d013      	beq.n	8004174 <TIM_Base_SetConfig+0x40>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004152:	d00f      	beq.n	8004174 <TIM_Base_SetConfig+0x40>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	4a3d      	ldr	r2, [pc, #244]	; (800424c <TIM_Base_SetConfig+0x118>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d00b      	beq.n	8004174 <TIM_Base_SetConfig+0x40>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	4a3c      	ldr	r2, [pc, #240]	; (8004250 <TIM_Base_SetConfig+0x11c>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d007      	beq.n	8004174 <TIM_Base_SetConfig+0x40>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	4a3b      	ldr	r2, [pc, #236]	; (8004254 <TIM_Base_SetConfig+0x120>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d003      	beq.n	8004174 <TIM_Base_SetConfig+0x40>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	4a3a      	ldr	r2, [pc, #232]	; (8004258 <TIM_Base_SetConfig+0x124>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d108      	bne.n	8004186 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800417a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	68fa      	ldr	r2, [r7, #12]
 8004182:	4313      	orrs	r3, r2
 8004184:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4a2f      	ldr	r2, [pc, #188]	; (8004248 <TIM_Base_SetConfig+0x114>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d02b      	beq.n	80041e6 <TIM_Base_SetConfig+0xb2>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004194:	d027      	beq.n	80041e6 <TIM_Base_SetConfig+0xb2>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4a2c      	ldr	r2, [pc, #176]	; (800424c <TIM_Base_SetConfig+0x118>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d023      	beq.n	80041e6 <TIM_Base_SetConfig+0xb2>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4a2b      	ldr	r2, [pc, #172]	; (8004250 <TIM_Base_SetConfig+0x11c>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d01f      	beq.n	80041e6 <TIM_Base_SetConfig+0xb2>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4a2a      	ldr	r2, [pc, #168]	; (8004254 <TIM_Base_SetConfig+0x120>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d01b      	beq.n	80041e6 <TIM_Base_SetConfig+0xb2>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a29      	ldr	r2, [pc, #164]	; (8004258 <TIM_Base_SetConfig+0x124>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d017      	beq.n	80041e6 <TIM_Base_SetConfig+0xb2>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a28      	ldr	r2, [pc, #160]	; (800425c <TIM_Base_SetConfig+0x128>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d013      	beq.n	80041e6 <TIM_Base_SetConfig+0xb2>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a27      	ldr	r2, [pc, #156]	; (8004260 <TIM_Base_SetConfig+0x12c>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d00f      	beq.n	80041e6 <TIM_Base_SetConfig+0xb2>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4a26      	ldr	r2, [pc, #152]	; (8004264 <TIM_Base_SetConfig+0x130>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d00b      	beq.n	80041e6 <TIM_Base_SetConfig+0xb2>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a25      	ldr	r2, [pc, #148]	; (8004268 <TIM_Base_SetConfig+0x134>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d007      	beq.n	80041e6 <TIM_Base_SetConfig+0xb2>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a24      	ldr	r2, [pc, #144]	; (800426c <TIM_Base_SetConfig+0x138>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d003      	beq.n	80041e6 <TIM_Base_SetConfig+0xb2>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4a23      	ldr	r2, [pc, #140]	; (8004270 <TIM_Base_SetConfig+0x13c>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d108      	bne.n	80041f8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	68db      	ldr	r3, [r3, #12]
 80041f2:	68fa      	ldr	r2, [r7, #12]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	695b      	ldr	r3, [r3, #20]
 8004202:	4313      	orrs	r3, r2
 8004204:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	68fa      	ldr	r2, [r7, #12]
 800420a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	689a      	ldr	r2, [r3, #8]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	4a0a      	ldr	r2, [pc, #40]	; (8004248 <TIM_Base_SetConfig+0x114>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d003      	beq.n	800422c <TIM_Base_SetConfig+0xf8>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	4a0c      	ldr	r2, [pc, #48]	; (8004258 <TIM_Base_SetConfig+0x124>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d103      	bne.n	8004234 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	691a      	ldr	r2, [r3, #16]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2201      	movs	r2, #1
 8004238:	615a      	str	r2, [r3, #20]
}
 800423a:	bf00      	nop
 800423c:	3714      	adds	r7, #20
 800423e:	46bd      	mov	sp, r7
 8004240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004244:	4770      	bx	lr
 8004246:	bf00      	nop
 8004248:	40010000 	.word	0x40010000
 800424c:	40000400 	.word	0x40000400
 8004250:	40000800 	.word	0x40000800
 8004254:	40000c00 	.word	0x40000c00
 8004258:	40010400 	.word	0x40010400
 800425c:	40014000 	.word	0x40014000
 8004260:	40014400 	.word	0x40014400
 8004264:	40014800 	.word	0x40014800
 8004268:	40001800 	.word	0x40001800
 800426c:	40001c00 	.word	0x40001c00
 8004270:	40002000 	.word	0x40002000

08004274 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004274:	b480      	push	{r7}
 8004276:	b087      	sub	sp, #28
 8004278:	af00      	add	r7, sp, #0
 800427a:	60f8      	str	r0, [r7, #12]
 800427c:	60b9      	str	r1, [r7, #8]
 800427e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6a1b      	ldr	r3, [r3, #32]
 8004284:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	6a1b      	ldr	r3, [r3, #32]
 800428a:	f023 0201 	bic.w	r2, r3, #1
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	699b      	ldr	r3, [r3, #24]
 8004296:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800429e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	011b      	lsls	r3, r3, #4
 80042a4:	693a      	ldr	r2, [r7, #16]
 80042a6:	4313      	orrs	r3, r2
 80042a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	f023 030a 	bic.w	r3, r3, #10
 80042b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80042b2:	697a      	ldr	r2, [r7, #20]
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	693a      	ldr	r2, [r7, #16]
 80042be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	697a      	ldr	r2, [r7, #20]
 80042c4:	621a      	str	r2, [r3, #32]
}
 80042c6:	bf00      	nop
 80042c8:	371c      	adds	r7, #28
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr

080042d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042d2:	b480      	push	{r7}
 80042d4:	b087      	sub	sp, #28
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	60f8      	str	r0, [r7, #12]
 80042da:	60b9      	str	r1, [r7, #8]
 80042dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	6a1b      	ldr	r3, [r3, #32]
 80042e2:	f023 0210 	bic.w	r2, r3, #16
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	699b      	ldr	r3, [r3, #24]
 80042ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6a1b      	ldr	r3, [r3, #32]
 80042f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80042fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	031b      	lsls	r3, r3, #12
 8004302:	697a      	ldr	r2, [r7, #20]
 8004304:	4313      	orrs	r3, r2
 8004306:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800430e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	011b      	lsls	r3, r3, #4
 8004314:	693a      	ldr	r2, [r7, #16]
 8004316:	4313      	orrs	r3, r2
 8004318:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	697a      	ldr	r2, [r7, #20]
 800431e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	693a      	ldr	r2, [r7, #16]
 8004324:	621a      	str	r2, [r3, #32]
}
 8004326:	bf00      	nop
 8004328:	371c      	adds	r7, #28
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr

08004332 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004332:	b480      	push	{r7}
 8004334:	b085      	sub	sp, #20
 8004336:	af00      	add	r7, sp, #0
 8004338:	6078      	str	r0, [r7, #4]
 800433a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004348:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800434a:	683a      	ldr	r2, [r7, #0]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	4313      	orrs	r3, r2
 8004350:	f043 0307 	orr.w	r3, r3, #7
 8004354:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	68fa      	ldr	r2, [r7, #12]
 800435a:	609a      	str	r2, [r3, #8]
}
 800435c:	bf00      	nop
 800435e:	3714      	adds	r7, #20
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr

08004368 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004368:	b480      	push	{r7}
 800436a:	b087      	sub	sp, #28
 800436c:	af00      	add	r7, sp, #0
 800436e:	60f8      	str	r0, [r7, #12]
 8004370:	60b9      	str	r1, [r7, #8]
 8004372:	607a      	str	r2, [r7, #4]
 8004374:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004382:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	021a      	lsls	r2, r3, #8
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	431a      	orrs	r2, r3
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	4313      	orrs	r3, r2
 8004390:	697a      	ldr	r2, [r7, #20]
 8004392:	4313      	orrs	r3, r2
 8004394:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	697a      	ldr	r2, [r7, #20]
 800439a:	609a      	str	r2, [r3, #8]
}
 800439c:	bf00      	nop
 800439e:	371c      	adds	r7, #28
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr

080043a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b085      	sub	sp, #20
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d101      	bne.n	80043c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80043bc:	2302      	movs	r3, #2
 80043be:	e06d      	b.n	800449c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2202      	movs	r2, #2
 80043cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a30      	ldr	r2, [pc, #192]	; (80044a8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d004      	beq.n	80043f4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a2f      	ldr	r2, [pc, #188]	; (80044ac <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d108      	bne.n	8004406 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80043fa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	68fa      	ldr	r2, [r7, #12]
 8004402:	4313      	orrs	r3, r2
 8004404:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800440c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	68fa      	ldr	r2, [r7, #12]
 8004414:	4313      	orrs	r3, r2
 8004416:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	68fa      	ldr	r2, [r7, #12]
 800441e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a20      	ldr	r2, [pc, #128]	; (80044a8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d022      	beq.n	8004470 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004432:	d01d      	beq.n	8004470 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a1d      	ldr	r2, [pc, #116]	; (80044b0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d018      	beq.n	8004470 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a1c      	ldr	r2, [pc, #112]	; (80044b4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d013      	beq.n	8004470 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a1a      	ldr	r2, [pc, #104]	; (80044b8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d00e      	beq.n	8004470 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a15      	ldr	r2, [pc, #84]	; (80044ac <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d009      	beq.n	8004470 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a16      	ldr	r2, [pc, #88]	; (80044bc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d004      	beq.n	8004470 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a15      	ldr	r2, [pc, #84]	; (80044c0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d10c      	bne.n	800448a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004476:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	68ba      	ldr	r2, [r7, #8]
 800447e:	4313      	orrs	r3, r2
 8004480:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	68ba      	ldr	r2, [r7, #8]
 8004488:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2201      	movs	r2, #1
 800448e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2200      	movs	r2, #0
 8004496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800449a:	2300      	movs	r3, #0
}
 800449c:	4618      	mov	r0, r3
 800449e:	3714      	adds	r7, #20
 80044a0:	46bd      	mov	sp, r7
 80044a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a6:	4770      	bx	lr
 80044a8:	40010000 	.word	0x40010000
 80044ac:	40010400 	.word	0x40010400
 80044b0:	40000400 	.word	0x40000400
 80044b4:	40000800 	.word	0x40000800
 80044b8:	40000c00 	.word	0x40000c00
 80044bc:	40014000 	.word	0x40014000
 80044c0:	40001800 	.word	0x40001800

080044c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b083      	sub	sp, #12
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80044cc:	bf00      	nop
 80044ce:	370c      	adds	r7, #12
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr

080044d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80044d8:	b480      	push	{r7}
 80044da:	b083      	sub	sp, #12
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80044e0:	bf00      	nop
 80044e2:	370c      	adds	r7, #12
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr

080044ec <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80044f4:	bf00      	nop
 80044f6:	370c      	adds	r7, #12
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr

08004500 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b082      	sub	sp, #8
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d101      	bne.n	8004512 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	e040      	b.n	8004594 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004516:	2b00      	cmp	r3, #0
 8004518:	d106      	bne.n	8004528 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2200      	movs	r2, #0
 800451e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f012 fe08 	bl	8017138 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2224      	movs	r2, #36	; 0x24
 800452c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	6812      	ldr	r2, [r2, #0]
 8004536:	6812      	ldr	r2, [r2, #0]
 8004538:	f022 0201 	bic.w	r2, r2, #1
 800453c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f000 f98e 	bl	8004860 <UART_SetConfig>
 8004544:	4603      	mov	r3, r0
 8004546:	2b01      	cmp	r3, #1
 8004548:	d101      	bne.n	800454e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	e022      	b.n	8004594 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004552:	2b00      	cmp	r3, #0
 8004554:	d002      	beq.n	800455c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f000 fbe2 	bl	8004d20 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	687a      	ldr	r2, [r7, #4]
 8004562:	6812      	ldr	r2, [r2, #0]
 8004564:	6852      	ldr	r2, [r2, #4]
 8004566:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800456a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	6812      	ldr	r2, [r2, #0]
 8004574:	6892      	ldr	r2, [r2, #8]
 8004576:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800457a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	687a      	ldr	r2, [r7, #4]
 8004582:	6812      	ldr	r2, [r2, #0]
 8004584:	6812      	ldr	r2, [r2, #0]
 8004586:	f042 0201 	orr.w	r2, r2, #1
 800458a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	f000 fc69 	bl	8004e64 <UART_CheckIdleState>
 8004592:	4603      	mov	r3, r0
}
 8004594:	4618      	mov	r0, r3
 8004596:	3708      	adds	r7, #8
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}

0800459c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b08a      	sub	sp, #40	; 0x28
 80045a0:	af02      	add	r7, sp, #8
 80045a2:	60f8      	str	r0, [r7, #12]
 80045a4:	60b9      	str	r1, [r7, #8]
 80045a6:	603b      	str	r3, [r7, #0]
 80045a8:	4613      	mov	r3, r2
 80045aa:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045b0:	2b20      	cmp	r3, #32
 80045b2:	d17f      	bne.n	80046b4 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d002      	beq.n	80045c0 <HAL_UART_Transmit+0x24>
 80045ba:	88fb      	ldrh	r3, [r7, #6]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d101      	bne.n	80045c4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	e078      	b.n	80046b6 <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d101      	bne.n	80045d2 <HAL_UART_Transmit+0x36>
 80045ce:	2302      	movs	r3, #2
 80045d0:	e071      	b.n	80046b6 <HAL_UART_Transmit+0x11a>
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2201      	movs	r2, #1
 80045d6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2200      	movs	r2, #0
 80045de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2221      	movs	r2, #33	; 0x21
 80045e6:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80045e8:	f7fc f82c 	bl	8000644 <HAL_GetTick>
 80045ec:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	88fa      	ldrh	r2, [r7, #6]
 80045f2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	88fa      	ldrh	r2, [r7, #6]
 80045fa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004606:	d108      	bne.n	800461a <HAL_UART_Transmit+0x7e>
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	691b      	ldr	r3, [r3, #16]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d104      	bne.n	800461a <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8004610:	2300      	movs	r3, #0
 8004612:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	61bb      	str	r3, [r7, #24]
 8004618:	e003      	b.n	8004622 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800461e:	2300      	movs	r3, #0
 8004620:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2200      	movs	r2, #0
 8004626:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800462a:	e02b      	b.n	8004684 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	9300      	str	r3, [sp, #0]
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	2200      	movs	r2, #0
 8004634:	2180      	movs	r1, #128	; 0x80
 8004636:	68f8      	ldr	r0, [r7, #12]
 8004638:	f000 fc5d 	bl	8004ef6 <UART_WaitOnFlagUntilTimeout>
 800463c:	4603      	mov	r3, r0
 800463e:	2b00      	cmp	r3, #0
 8004640:	d001      	beq.n	8004646 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8004642:	2303      	movs	r3, #3
 8004644:	e037      	b.n	80046b6 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8004646:	69fb      	ldr	r3, [r7, #28]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d10a      	bne.n	8004662 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	69ba      	ldr	r2, [r7, #24]
 8004652:	8812      	ldrh	r2, [r2, #0]
 8004654:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004658:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800465a:	69bb      	ldr	r3, [r7, #24]
 800465c:	3302      	adds	r3, #2
 800465e:	61bb      	str	r3, [r7, #24]
 8004660:	e007      	b.n	8004672 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	69fa      	ldr	r2, [r7, #28]
 8004668:	7812      	ldrb	r2, [r2, #0]
 800466a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800466c:	69fb      	ldr	r3, [r7, #28]
 800466e:	3301      	adds	r3, #1
 8004670:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004678:	b29b      	uxth	r3, r3
 800467a:	3b01      	subs	r3, #1
 800467c:	b29a      	uxth	r2, r3
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800468a:	b29b      	uxth	r3, r3
 800468c:	2b00      	cmp	r3, #0
 800468e:	d1cd      	bne.n	800462c <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	9300      	str	r3, [sp, #0]
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	2200      	movs	r2, #0
 8004698:	2140      	movs	r1, #64	; 0x40
 800469a:	68f8      	ldr	r0, [r7, #12]
 800469c:	f000 fc2b 	bl	8004ef6 <UART_WaitOnFlagUntilTimeout>
 80046a0:	4603      	mov	r3, r0
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d001      	beq.n	80046aa <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80046a6:	2303      	movs	r3, #3
 80046a8:	e005      	b.n	80046b6 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2220      	movs	r2, #32
 80046ae:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80046b0:	2300      	movs	r3, #0
 80046b2:	e000      	b.n	80046b6 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 80046b4:	2302      	movs	r3, #2
  }
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3720      	adds	r7, #32
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}

080046be <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046be:	b580      	push	{r7, lr}
 80046c0:	b08a      	sub	sp, #40	; 0x28
 80046c2:	af02      	add	r7, sp, #8
 80046c4:	60f8      	str	r0, [r7, #12]
 80046c6:	60b9      	str	r1, [r7, #8]
 80046c8:	603b      	str	r3, [r7, #0]
 80046ca:	4613      	mov	r3, r2
 80046cc:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046d2:	2b20      	cmp	r3, #32
 80046d4:	f040 80be 	bne.w	8004854 <HAL_UART_Receive+0x196>
  {
    if ((pData == NULL) || (Size == 0U))
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d002      	beq.n	80046e4 <HAL_UART_Receive+0x26>
 80046de:	88fb      	ldrh	r3, [r7, #6]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d101      	bne.n	80046e8 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	e0b6      	b.n	8004856 <HAL_UART_Receive+0x198>
    }

    __HAL_LOCK(huart);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d101      	bne.n	80046f6 <HAL_UART_Receive+0x38>
 80046f2:	2302      	movs	r3, #2
 80046f4:	e0af      	b.n	8004856 <HAL_UART_Receive+0x198>
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2201      	movs	r2, #1
 80046fa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2200      	movs	r2, #0
 8004702:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2222      	movs	r2, #34	; 0x22
 800470a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2200      	movs	r2, #0
 8004710:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004712:	f7fb ff97 	bl	8000644 <HAL_GetTick>
 8004716:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	88fa      	ldrh	r2, [r7, #6]
 800471c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	88fa      	ldrh	r2, [r7, #6]
 8004724:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004730:	d10e      	bne.n	8004750 <HAL_UART_Receive+0x92>
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	691b      	ldr	r3, [r3, #16]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d105      	bne.n	8004746 <HAL_UART_Receive+0x88>
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004740:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004744:	e02d      	b.n	80047a2 <HAL_UART_Receive+0xe4>
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	22ff      	movs	r2, #255	; 0xff
 800474a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800474e:	e028      	b.n	80047a2 <HAL_UART_Receive+0xe4>
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d10d      	bne.n	8004774 <HAL_UART_Receive+0xb6>
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	691b      	ldr	r3, [r3, #16]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d104      	bne.n	800476a <HAL_UART_Receive+0xac>
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	22ff      	movs	r2, #255	; 0xff
 8004764:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004768:	e01b      	b.n	80047a2 <HAL_UART_Receive+0xe4>
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	227f      	movs	r2, #127	; 0x7f
 800476e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004772:	e016      	b.n	80047a2 <HAL_UART_Receive+0xe4>
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800477c:	d10d      	bne.n	800479a <HAL_UART_Receive+0xdc>
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	691b      	ldr	r3, [r3, #16]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d104      	bne.n	8004790 <HAL_UART_Receive+0xd2>
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	227f      	movs	r2, #127	; 0x7f
 800478a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800478e:	e008      	b.n	80047a2 <HAL_UART_Receive+0xe4>
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	223f      	movs	r2, #63	; 0x3f
 8004794:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004798:	e003      	b.n	80047a2 <HAL_UART_Receive+0xe4>
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2200      	movs	r2, #0
 800479e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80047a8:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047b2:	d108      	bne.n	80047c6 <HAL_UART_Receive+0x108>
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	691b      	ldr	r3, [r3, #16]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d104      	bne.n	80047c6 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 80047bc:	2300      	movs	r3, #0
 80047be:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	61bb      	str	r3, [r7, #24]
 80047c4:	e003      	b.n	80047ce <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80047ca:	2300      	movs	r3, #0
 80047cc:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2200      	movs	r2, #0
 80047d2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80047d6:	e032      	b.n	800483e <HAL_UART_Receive+0x180>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	9300      	str	r3, [sp, #0]
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	2200      	movs	r2, #0
 80047e0:	2120      	movs	r1, #32
 80047e2:	68f8      	ldr	r0, [r7, #12]
 80047e4:	f000 fb87 	bl	8004ef6 <UART_WaitOnFlagUntilTimeout>
 80047e8:	4603      	mov	r3, r0
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d001      	beq.n	80047f2 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 80047ee:	2303      	movs	r3, #3
 80047f0:	e031      	b.n	8004856 <HAL_UART_Receive+0x198>
      }
      if (pdata8bits == NULL)
 80047f2:	69fb      	ldr	r3, [r7, #28]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d10c      	bne.n	8004812 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047fe:	b29a      	uxth	r2, r3
 8004800:	8a7b      	ldrh	r3, [r7, #18]
 8004802:	4013      	ands	r3, r2
 8004804:	b29a      	uxth	r2, r3
 8004806:	69bb      	ldr	r3, [r7, #24]
 8004808:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800480a:	69bb      	ldr	r3, [r7, #24]
 800480c:	3302      	adds	r3, #2
 800480e:	61bb      	str	r3, [r7, #24]
 8004810:	e00c      	b.n	800482c <HAL_UART_Receive+0x16e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004818:	b2da      	uxtb	r2, r3
 800481a:	8a7b      	ldrh	r3, [r7, #18]
 800481c:	b2db      	uxtb	r3, r3
 800481e:	4013      	ands	r3, r2
 8004820:	b2da      	uxtb	r2, r3
 8004822:	69fb      	ldr	r3, [r7, #28]
 8004824:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004826:	69fb      	ldr	r3, [r7, #28]
 8004828:	3301      	adds	r3, #1
 800482a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004832:	b29b      	uxth	r3, r3
 8004834:	3b01      	subs	r3, #1
 8004836:	b29a      	uxth	r2, r3
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004844:	b29b      	uxth	r3, r3
 8004846:	2b00      	cmp	r3, #0
 8004848:	d1c6      	bne.n	80047d8 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2220      	movs	r2, #32
 800484e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004850:	2300      	movs	r3, #0
 8004852:	e000      	b.n	8004856 <HAL_UART_Receive+0x198>
  }
  else
  {
    return HAL_BUSY;
 8004854:	2302      	movs	r3, #2
  }
}
 8004856:	4618      	mov	r0, r3
 8004858:	3720      	adds	r7, #32
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
	...

08004860 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b088      	sub	sp, #32
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004868:	2300      	movs	r3, #0
 800486a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	689a      	ldr	r2, [r3, #8]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	691b      	ldr	r3, [r3, #16]
 8004874:	431a      	orrs	r2, r3
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	695b      	ldr	r3, [r3, #20]
 800487a:	431a      	orrs	r2, r3
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	69db      	ldr	r3, [r3, #28]
 8004880:	4313      	orrs	r3, r2
 8004882:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	6819      	ldr	r1, [r3, #0]
 800488e:	4bb3      	ldr	r3, [pc, #716]	; (8004b5c <UART_SetConfig+0x2fc>)
 8004890:	400b      	ands	r3, r1
 8004892:	6979      	ldr	r1, [r7, #20]
 8004894:	430b      	orrs	r3, r1
 8004896:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	687a      	ldr	r2, [r7, #4]
 800489e:	6812      	ldr	r2, [r2, #0]
 80048a0:	6852      	ldr	r2, [r2, #4]
 80048a2:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 80048a6:	687a      	ldr	r2, [r7, #4]
 80048a8:	68d2      	ldr	r2, [r2, #12]
 80048aa:	430a      	orrs	r2, r1
 80048ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	699b      	ldr	r3, [r3, #24]
 80048b2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6a1b      	ldr	r3, [r3, #32]
 80048b8:	697a      	ldr	r2, [r7, #20]
 80048ba:	4313      	orrs	r3, r2
 80048bc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	687a      	ldr	r2, [r7, #4]
 80048c4:	6812      	ldr	r2, [r2, #0]
 80048c6:	6892      	ldr	r2, [r2, #8]
 80048c8:	f422 6130 	bic.w	r1, r2, #2816	; 0xb00
 80048cc:	697a      	ldr	r2, [r7, #20]
 80048ce:	430a      	orrs	r2, r1
 80048d0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4aa2      	ldr	r2, [pc, #648]	; (8004b60 <UART_SetConfig+0x300>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d121      	bne.n	8004920 <UART_SetConfig+0xc0>
 80048dc:	4ba1      	ldr	r3, [pc, #644]	; (8004b64 <UART_SetConfig+0x304>)
 80048de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048e2:	f003 0303 	and.w	r3, r3, #3
 80048e6:	2b03      	cmp	r3, #3
 80048e8:	d816      	bhi.n	8004918 <UART_SetConfig+0xb8>
 80048ea:	a201      	add	r2, pc, #4	; (adr r2, 80048f0 <UART_SetConfig+0x90>)
 80048ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048f0:	08004901 	.word	0x08004901
 80048f4:	0800490d 	.word	0x0800490d
 80048f8:	08004907 	.word	0x08004907
 80048fc:	08004913 	.word	0x08004913
 8004900:	2301      	movs	r3, #1
 8004902:	77fb      	strb	r3, [r7, #31]
 8004904:	e150      	b.n	8004ba8 <UART_SetConfig+0x348>
 8004906:	2302      	movs	r3, #2
 8004908:	77fb      	strb	r3, [r7, #31]
 800490a:	e14d      	b.n	8004ba8 <UART_SetConfig+0x348>
 800490c:	2304      	movs	r3, #4
 800490e:	77fb      	strb	r3, [r7, #31]
 8004910:	e14a      	b.n	8004ba8 <UART_SetConfig+0x348>
 8004912:	2308      	movs	r3, #8
 8004914:	77fb      	strb	r3, [r7, #31]
 8004916:	e147      	b.n	8004ba8 <UART_SetConfig+0x348>
 8004918:	2310      	movs	r3, #16
 800491a:	77fb      	strb	r3, [r7, #31]
 800491c:	bf00      	nop
 800491e:	e143      	b.n	8004ba8 <UART_SetConfig+0x348>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a90      	ldr	r2, [pc, #576]	; (8004b68 <UART_SetConfig+0x308>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d134      	bne.n	8004994 <UART_SetConfig+0x134>
 800492a:	4b8e      	ldr	r3, [pc, #568]	; (8004b64 <UART_SetConfig+0x304>)
 800492c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004930:	f003 030c 	and.w	r3, r3, #12
 8004934:	2b0c      	cmp	r3, #12
 8004936:	d829      	bhi.n	800498c <UART_SetConfig+0x12c>
 8004938:	a201      	add	r2, pc, #4	; (adr r2, 8004940 <UART_SetConfig+0xe0>)
 800493a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800493e:	bf00      	nop
 8004940:	08004975 	.word	0x08004975
 8004944:	0800498d 	.word	0x0800498d
 8004948:	0800498d 	.word	0x0800498d
 800494c:	0800498d 	.word	0x0800498d
 8004950:	08004981 	.word	0x08004981
 8004954:	0800498d 	.word	0x0800498d
 8004958:	0800498d 	.word	0x0800498d
 800495c:	0800498d 	.word	0x0800498d
 8004960:	0800497b 	.word	0x0800497b
 8004964:	0800498d 	.word	0x0800498d
 8004968:	0800498d 	.word	0x0800498d
 800496c:	0800498d 	.word	0x0800498d
 8004970:	08004987 	.word	0x08004987
 8004974:	2300      	movs	r3, #0
 8004976:	77fb      	strb	r3, [r7, #31]
 8004978:	e116      	b.n	8004ba8 <UART_SetConfig+0x348>
 800497a:	2302      	movs	r3, #2
 800497c:	77fb      	strb	r3, [r7, #31]
 800497e:	e113      	b.n	8004ba8 <UART_SetConfig+0x348>
 8004980:	2304      	movs	r3, #4
 8004982:	77fb      	strb	r3, [r7, #31]
 8004984:	e110      	b.n	8004ba8 <UART_SetConfig+0x348>
 8004986:	2308      	movs	r3, #8
 8004988:	77fb      	strb	r3, [r7, #31]
 800498a:	e10d      	b.n	8004ba8 <UART_SetConfig+0x348>
 800498c:	2310      	movs	r3, #16
 800498e:	77fb      	strb	r3, [r7, #31]
 8004990:	bf00      	nop
 8004992:	e109      	b.n	8004ba8 <UART_SetConfig+0x348>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a74      	ldr	r2, [pc, #464]	; (8004b6c <UART_SetConfig+0x30c>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d120      	bne.n	80049e0 <UART_SetConfig+0x180>
 800499e:	4b71      	ldr	r3, [pc, #452]	; (8004b64 <UART_SetConfig+0x304>)
 80049a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049a4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80049a8:	2b10      	cmp	r3, #16
 80049aa:	d00f      	beq.n	80049cc <UART_SetConfig+0x16c>
 80049ac:	2b10      	cmp	r3, #16
 80049ae:	d802      	bhi.n	80049b6 <UART_SetConfig+0x156>
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d005      	beq.n	80049c0 <UART_SetConfig+0x160>
 80049b4:	e010      	b.n	80049d8 <UART_SetConfig+0x178>
 80049b6:	2b20      	cmp	r3, #32
 80049b8:	d005      	beq.n	80049c6 <UART_SetConfig+0x166>
 80049ba:	2b30      	cmp	r3, #48	; 0x30
 80049bc:	d009      	beq.n	80049d2 <UART_SetConfig+0x172>
 80049be:	e00b      	b.n	80049d8 <UART_SetConfig+0x178>
 80049c0:	2300      	movs	r3, #0
 80049c2:	77fb      	strb	r3, [r7, #31]
 80049c4:	e0f0      	b.n	8004ba8 <UART_SetConfig+0x348>
 80049c6:	2302      	movs	r3, #2
 80049c8:	77fb      	strb	r3, [r7, #31]
 80049ca:	e0ed      	b.n	8004ba8 <UART_SetConfig+0x348>
 80049cc:	2304      	movs	r3, #4
 80049ce:	77fb      	strb	r3, [r7, #31]
 80049d0:	e0ea      	b.n	8004ba8 <UART_SetConfig+0x348>
 80049d2:	2308      	movs	r3, #8
 80049d4:	77fb      	strb	r3, [r7, #31]
 80049d6:	e0e7      	b.n	8004ba8 <UART_SetConfig+0x348>
 80049d8:	2310      	movs	r3, #16
 80049da:	77fb      	strb	r3, [r7, #31]
 80049dc:	bf00      	nop
 80049de:	e0e3      	b.n	8004ba8 <UART_SetConfig+0x348>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a62      	ldr	r2, [pc, #392]	; (8004b70 <UART_SetConfig+0x310>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d120      	bne.n	8004a2c <UART_SetConfig+0x1cc>
 80049ea:	4b5e      	ldr	r3, [pc, #376]	; (8004b64 <UART_SetConfig+0x304>)
 80049ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049f0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80049f4:	2b40      	cmp	r3, #64	; 0x40
 80049f6:	d00f      	beq.n	8004a18 <UART_SetConfig+0x1b8>
 80049f8:	2b40      	cmp	r3, #64	; 0x40
 80049fa:	d802      	bhi.n	8004a02 <UART_SetConfig+0x1a2>
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d005      	beq.n	8004a0c <UART_SetConfig+0x1ac>
 8004a00:	e010      	b.n	8004a24 <UART_SetConfig+0x1c4>
 8004a02:	2b80      	cmp	r3, #128	; 0x80
 8004a04:	d005      	beq.n	8004a12 <UART_SetConfig+0x1b2>
 8004a06:	2bc0      	cmp	r3, #192	; 0xc0
 8004a08:	d009      	beq.n	8004a1e <UART_SetConfig+0x1be>
 8004a0a:	e00b      	b.n	8004a24 <UART_SetConfig+0x1c4>
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	77fb      	strb	r3, [r7, #31]
 8004a10:	e0ca      	b.n	8004ba8 <UART_SetConfig+0x348>
 8004a12:	2302      	movs	r3, #2
 8004a14:	77fb      	strb	r3, [r7, #31]
 8004a16:	e0c7      	b.n	8004ba8 <UART_SetConfig+0x348>
 8004a18:	2304      	movs	r3, #4
 8004a1a:	77fb      	strb	r3, [r7, #31]
 8004a1c:	e0c4      	b.n	8004ba8 <UART_SetConfig+0x348>
 8004a1e:	2308      	movs	r3, #8
 8004a20:	77fb      	strb	r3, [r7, #31]
 8004a22:	e0c1      	b.n	8004ba8 <UART_SetConfig+0x348>
 8004a24:	2310      	movs	r3, #16
 8004a26:	77fb      	strb	r3, [r7, #31]
 8004a28:	bf00      	nop
 8004a2a:	e0bd      	b.n	8004ba8 <UART_SetConfig+0x348>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a50      	ldr	r2, [pc, #320]	; (8004b74 <UART_SetConfig+0x314>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d124      	bne.n	8004a80 <UART_SetConfig+0x220>
 8004a36:	4b4b      	ldr	r3, [pc, #300]	; (8004b64 <UART_SetConfig+0x304>)
 8004a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a44:	d012      	beq.n	8004a6c <UART_SetConfig+0x20c>
 8004a46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a4a:	d802      	bhi.n	8004a52 <UART_SetConfig+0x1f2>
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d007      	beq.n	8004a60 <UART_SetConfig+0x200>
 8004a50:	e012      	b.n	8004a78 <UART_SetConfig+0x218>
 8004a52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a56:	d006      	beq.n	8004a66 <UART_SetConfig+0x206>
 8004a58:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a5c:	d009      	beq.n	8004a72 <UART_SetConfig+0x212>
 8004a5e:	e00b      	b.n	8004a78 <UART_SetConfig+0x218>
 8004a60:	2300      	movs	r3, #0
 8004a62:	77fb      	strb	r3, [r7, #31]
 8004a64:	e0a0      	b.n	8004ba8 <UART_SetConfig+0x348>
 8004a66:	2302      	movs	r3, #2
 8004a68:	77fb      	strb	r3, [r7, #31]
 8004a6a:	e09d      	b.n	8004ba8 <UART_SetConfig+0x348>
 8004a6c:	2304      	movs	r3, #4
 8004a6e:	77fb      	strb	r3, [r7, #31]
 8004a70:	e09a      	b.n	8004ba8 <UART_SetConfig+0x348>
 8004a72:	2308      	movs	r3, #8
 8004a74:	77fb      	strb	r3, [r7, #31]
 8004a76:	e097      	b.n	8004ba8 <UART_SetConfig+0x348>
 8004a78:	2310      	movs	r3, #16
 8004a7a:	77fb      	strb	r3, [r7, #31]
 8004a7c:	bf00      	nop
 8004a7e:	e093      	b.n	8004ba8 <UART_SetConfig+0x348>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a3c      	ldr	r2, [pc, #240]	; (8004b78 <UART_SetConfig+0x318>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d124      	bne.n	8004ad4 <UART_SetConfig+0x274>
 8004a8a:	4b36      	ldr	r3, [pc, #216]	; (8004b64 <UART_SetConfig+0x304>)
 8004a8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a90:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004a94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a98:	d012      	beq.n	8004ac0 <UART_SetConfig+0x260>
 8004a9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a9e:	d802      	bhi.n	8004aa6 <UART_SetConfig+0x246>
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d007      	beq.n	8004ab4 <UART_SetConfig+0x254>
 8004aa4:	e012      	b.n	8004acc <UART_SetConfig+0x26c>
 8004aa6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004aaa:	d006      	beq.n	8004aba <UART_SetConfig+0x25a>
 8004aac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ab0:	d009      	beq.n	8004ac6 <UART_SetConfig+0x266>
 8004ab2:	e00b      	b.n	8004acc <UART_SetConfig+0x26c>
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	77fb      	strb	r3, [r7, #31]
 8004ab8:	e076      	b.n	8004ba8 <UART_SetConfig+0x348>
 8004aba:	2302      	movs	r3, #2
 8004abc:	77fb      	strb	r3, [r7, #31]
 8004abe:	e073      	b.n	8004ba8 <UART_SetConfig+0x348>
 8004ac0:	2304      	movs	r3, #4
 8004ac2:	77fb      	strb	r3, [r7, #31]
 8004ac4:	e070      	b.n	8004ba8 <UART_SetConfig+0x348>
 8004ac6:	2308      	movs	r3, #8
 8004ac8:	77fb      	strb	r3, [r7, #31]
 8004aca:	e06d      	b.n	8004ba8 <UART_SetConfig+0x348>
 8004acc:	2310      	movs	r3, #16
 8004ace:	77fb      	strb	r3, [r7, #31]
 8004ad0:	bf00      	nop
 8004ad2:	e069      	b.n	8004ba8 <UART_SetConfig+0x348>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a28      	ldr	r2, [pc, #160]	; (8004b7c <UART_SetConfig+0x31c>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d124      	bne.n	8004b28 <UART_SetConfig+0x2c8>
 8004ade:	4b21      	ldr	r3, [pc, #132]	; (8004b64 <UART_SetConfig+0x304>)
 8004ae0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ae4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004ae8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004aec:	d012      	beq.n	8004b14 <UART_SetConfig+0x2b4>
 8004aee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004af2:	d802      	bhi.n	8004afa <UART_SetConfig+0x29a>
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d007      	beq.n	8004b08 <UART_SetConfig+0x2a8>
 8004af8:	e012      	b.n	8004b20 <UART_SetConfig+0x2c0>
 8004afa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004afe:	d006      	beq.n	8004b0e <UART_SetConfig+0x2ae>
 8004b00:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004b04:	d009      	beq.n	8004b1a <UART_SetConfig+0x2ba>
 8004b06:	e00b      	b.n	8004b20 <UART_SetConfig+0x2c0>
 8004b08:	2300      	movs	r3, #0
 8004b0a:	77fb      	strb	r3, [r7, #31]
 8004b0c:	e04c      	b.n	8004ba8 <UART_SetConfig+0x348>
 8004b0e:	2302      	movs	r3, #2
 8004b10:	77fb      	strb	r3, [r7, #31]
 8004b12:	e049      	b.n	8004ba8 <UART_SetConfig+0x348>
 8004b14:	2304      	movs	r3, #4
 8004b16:	77fb      	strb	r3, [r7, #31]
 8004b18:	e046      	b.n	8004ba8 <UART_SetConfig+0x348>
 8004b1a:	2308      	movs	r3, #8
 8004b1c:	77fb      	strb	r3, [r7, #31]
 8004b1e:	e043      	b.n	8004ba8 <UART_SetConfig+0x348>
 8004b20:	2310      	movs	r3, #16
 8004b22:	77fb      	strb	r3, [r7, #31]
 8004b24:	bf00      	nop
 8004b26:	e03f      	b.n	8004ba8 <UART_SetConfig+0x348>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a14      	ldr	r2, [pc, #80]	; (8004b80 <UART_SetConfig+0x320>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d138      	bne.n	8004ba4 <UART_SetConfig+0x344>
 8004b32:	4b0c      	ldr	r3, [pc, #48]	; (8004b64 <UART_SetConfig+0x304>)
 8004b34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b38:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004b3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b40:	d026      	beq.n	8004b90 <UART_SetConfig+0x330>
 8004b42:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b46:	d802      	bhi.n	8004b4e <UART_SetConfig+0x2ee>
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d01b      	beq.n	8004b84 <UART_SetConfig+0x324>
 8004b4c:	e026      	b.n	8004b9c <UART_SetConfig+0x33c>
 8004b4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b52:	d01a      	beq.n	8004b8a <UART_SetConfig+0x32a>
 8004b54:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004b58:	d01d      	beq.n	8004b96 <UART_SetConfig+0x336>
 8004b5a:	e01f      	b.n	8004b9c <UART_SetConfig+0x33c>
 8004b5c:	efff69f3 	.word	0xefff69f3
 8004b60:	40011000 	.word	0x40011000
 8004b64:	40023800 	.word	0x40023800
 8004b68:	40004400 	.word	0x40004400
 8004b6c:	40004800 	.word	0x40004800
 8004b70:	40004c00 	.word	0x40004c00
 8004b74:	40005000 	.word	0x40005000
 8004b78:	40011400 	.word	0x40011400
 8004b7c:	40007800 	.word	0x40007800
 8004b80:	40007c00 	.word	0x40007c00
 8004b84:	2300      	movs	r3, #0
 8004b86:	77fb      	strb	r3, [r7, #31]
 8004b88:	e00e      	b.n	8004ba8 <UART_SetConfig+0x348>
 8004b8a:	2302      	movs	r3, #2
 8004b8c:	77fb      	strb	r3, [r7, #31]
 8004b8e:	e00b      	b.n	8004ba8 <UART_SetConfig+0x348>
 8004b90:	2304      	movs	r3, #4
 8004b92:	77fb      	strb	r3, [r7, #31]
 8004b94:	e008      	b.n	8004ba8 <UART_SetConfig+0x348>
 8004b96:	2308      	movs	r3, #8
 8004b98:	77fb      	strb	r3, [r7, #31]
 8004b9a:	e005      	b.n	8004ba8 <UART_SetConfig+0x348>
 8004b9c:	2310      	movs	r3, #16
 8004b9e:	77fb      	strb	r3, [r7, #31]
 8004ba0:	bf00      	nop
 8004ba2:	e001      	b.n	8004ba8 <UART_SetConfig+0x348>
 8004ba4:	2310      	movs	r3, #16
 8004ba6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	69db      	ldr	r3, [r3, #28]
 8004bac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bb0:	d15c      	bne.n	8004c6c <UART_SetConfig+0x40c>
  {
    switch (clocksource)
 8004bb2:	7ffb      	ldrb	r3, [r7, #31]
 8004bb4:	2b08      	cmp	r3, #8
 8004bb6:	d828      	bhi.n	8004c0a <UART_SetConfig+0x3aa>
 8004bb8:	a201      	add	r2, pc, #4	; (adr r2, 8004bc0 <UART_SetConfig+0x360>)
 8004bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bbe:	bf00      	nop
 8004bc0:	08004be5 	.word	0x08004be5
 8004bc4:	08004bed 	.word	0x08004bed
 8004bc8:	08004bf5 	.word	0x08004bf5
 8004bcc:	08004c0b 	.word	0x08004c0b
 8004bd0:	08004bfb 	.word	0x08004bfb
 8004bd4:	08004c0b 	.word	0x08004c0b
 8004bd8:	08004c0b 	.word	0x08004c0b
 8004bdc:	08004c0b 	.word	0x08004c0b
 8004be0:	08004c03 	.word	0x08004c03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004be4:	f7fe f818 	bl	8002c18 <HAL_RCC_GetPCLK1Freq>
 8004be8:	61b8      	str	r0, [r7, #24]
        break;
 8004bea:	e013      	b.n	8004c14 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004bec:	f7fe f828 	bl	8002c40 <HAL_RCC_GetPCLK2Freq>
 8004bf0:	61b8      	str	r0, [r7, #24]
        break;
 8004bf2:	e00f      	b.n	8004c14 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bf4:	4b49      	ldr	r3, [pc, #292]	; (8004d1c <UART_SetConfig+0x4bc>)
 8004bf6:	61bb      	str	r3, [r7, #24]
        break;
 8004bf8:	e00c      	b.n	8004c14 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bfa:	f7fd ff29 	bl	8002a50 <HAL_RCC_GetSysClockFreq>
 8004bfe:	61b8      	str	r0, [r7, #24]
        break;
 8004c00:	e008      	b.n	8004c14 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c06:	61bb      	str	r3, [r7, #24]
        break;
 8004c08:	e004      	b.n	8004c14 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	77bb      	strb	r3, [r7, #30]
        break;
 8004c12:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c14:	69bb      	ldr	r3, [r7, #24]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d074      	beq.n	8004d04 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004c1a:	69bb      	ldr	r3, [r7, #24]
 8004c1c:	005a      	lsls	r2, r3, #1
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	085b      	lsrs	r3, r3, #1
 8004c24:	441a      	add	r2, r3
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c2e:	b29b      	uxth	r3, r3
 8004c30:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	2b0f      	cmp	r3, #15
 8004c36:	d916      	bls.n	8004c66 <UART_SetConfig+0x406>
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c3e:	d212      	bcs.n	8004c66 <UART_SetConfig+0x406>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	f023 030f 	bic.w	r3, r3, #15
 8004c48:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	085b      	lsrs	r3, r3, #1
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	f003 0307 	and.w	r3, r3, #7
 8004c54:	b29a      	uxth	r2, r3
 8004c56:	89fb      	ldrh	r3, [r7, #14]
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	89fa      	ldrh	r2, [r7, #14]
 8004c62:	60da      	str	r2, [r3, #12]
 8004c64:	e04e      	b.n	8004d04 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	77bb      	strb	r3, [r7, #30]
 8004c6a:	e04b      	b.n	8004d04 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004c6c:	7ffb      	ldrb	r3, [r7, #31]
 8004c6e:	2b08      	cmp	r3, #8
 8004c70:	d827      	bhi.n	8004cc2 <UART_SetConfig+0x462>
 8004c72:	a201      	add	r2, pc, #4	; (adr r2, 8004c78 <UART_SetConfig+0x418>)
 8004c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c78:	08004c9d 	.word	0x08004c9d
 8004c7c:	08004ca5 	.word	0x08004ca5
 8004c80:	08004cad 	.word	0x08004cad
 8004c84:	08004cc3 	.word	0x08004cc3
 8004c88:	08004cb3 	.word	0x08004cb3
 8004c8c:	08004cc3 	.word	0x08004cc3
 8004c90:	08004cc3 	.word	0x08004cc3
 8004c94:	08004cc3 	.word	0x08004cc3
 8004c98:	08004cbb 	.word	0x08004cbb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c9c:	f7fd ffbc 	bl	8002c18 <HAL_RCC_GetPCLK1Freq>
 8004ca0:	61b8      	str	r0, [r7, #24]
        break;
 8004ca2:	e013      	b.n	8004ccc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ca4:	f7fd ffcc 	bl	8002c40 <HAL_RCC_GetPCLK2Freq>
 8004ca8:	61b8      	str	r0, [r7, #24]
        break;
 8004caa:	e00f      	b.n	8004ccc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004cac:	4b1b      	ldr	r3, [pc, #108]	; (8004d1c <UART_SetConfig+0x4bc>)
 8004cae:	61bb      	str	r3, [r7, #24]
        break;
 8004cb0:	e00c      	b.n	8004ccc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cb2:	f7fd fecd 	bl	8002a50 <HAL_RCC_GetSysClockFreq>
 8004cb6:	61b8      	str	r0, [r7, #24]
        break;
 8004cb8:	e008      	b.n	8004ccc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cbe:	61bb      	str	r3, [r7, #24]
        break;
 8004cc0:	e004      	b.n	8004ccc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	77bb      	strb	r3, [r7, #30]
        break;
 8004cca:	bf00      	nop
    }

    if (pclk != 0U)
 8004ccc:	69bb      	ldr	r3, [r7, #24]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d018      	beq.n	8004d04 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	085a      	lsrs	r2, r3, #1
 8004cd8:	69bb      	ldr	r3, [r7, #24]
 8004cda:	441a      	add	r2, r3
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	2b0f      	cmp	r3, #15
 8004cec:	d908      	bls.n	8004d00 <UART_SetConfig+0x4a0>
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cf4:	d204      	bcs.n	8004d00 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = usartdiv;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	693a      	ldr	r2, [r7, #16]
 8004cfc:	60da      	str	r2, [r3, #12]
 8004cfe:	e001      	b.n	8004d04 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2200      	movs	r2, #0
 8004d08:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004d10:	7fbb      	ldrb	r3, [r7, #30]
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3720      	adds	r7, #32
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}
 8004d1a:	bf00      	nop
 8004d1c:	00f42400 	.word	0x00f42400

08004d20 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b083      	sub	sp, #12
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2c:	f003 0301 	and.w	r3, r3, #1
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d00a      	beq.n	8004d4a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	687a      	ldr	r2, [r7, #4]
 8004d3a:	6812      	ldr	r2, [r2, #0]
 8004d3c:	6852      	ldr	r2, [r2, #4]
 8004d3e:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 8004d42:	687a      	ldr	r2, [r7, #4]
 8004d44:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004d46:	430a      	orrs	r2, r1
 8004d48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d4e:	f003 0302 	and.w	r3, r3, #2
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d00a      	beq.n	8004d6c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	6812      	ldr	r2, [r2, #0]
 8004d5e:	6852      	ldr	r2, [r2, #4]
 8004d60:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 8004d64:	687a      	ldr	r2, [r7, #4]
 8004d66:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004d68:	430a      	orrs	r2, r1
 8004d6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d70:	f003 0304 	and.w	r3, r3, #4
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d00a      	beq.n	8004d8e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	6812      	ldr	r2, [r2, #0]
 8004d80:	6852      	ldr	r2, [r2, #4]
 8004d82:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 8004d86:	687a      	ldr	r2, [r7, #4]
 8004d88:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004d8a:	430a      	orrs	r2, r1
 8004d8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d92:	f003 0308 	and.w	r3, r3, #8
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d00a      	beq.n	8004db0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	687a      	ldr	r2, [r7, #4]
 8004da0:	6812      	ldr	r2, [r2, #0]
 8004da2:	6852      	ldr	r2, [r2, #4]
 8004da4:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 8004da8:	687a      	ldr	r2, [r7, #4]
 8004daa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004dac:	430a      	orrs	r2, r1
 8004dae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db4:	f003 0310 	and.w	r3, r3, #16
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d00a      	beq.n	8004dd2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	687a      	ldr	r2, [r7, #4]
 8004dc2:	6812      	ldr	r2, [r2, #0]
 8004dc4:	6892      	ldr	r2, [r2, #8]
 8004dc6:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 8004dca:	687a      	ldr	r2, [r7, #4]
 8004dcc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004dce:	430a      	orrs	r2, r1
 8004dd0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd6:	f003 0320 	and.w	r3, r3, #32
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d00a      	beq.n	8004df4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	6812      	ldr	r2, [r2, #0]
 8004de6:	6892      	ldr	r2, [r2, #8]
 8004de8:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8004dec:	687a      	ldr	r2, [r7, #4]
 8004dee:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004df0:	430a      	orrs	r2, r1
 8004df2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d01a      	beq.n	8004e36 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	687a      	ldr	r2, [r7, #4]
 8004e06:	6812      	ldr	r2, [r2, #0]
 8004e08:	6852      	ldr	r2, [r2, #4]
 8004e0a:	f422 1180 	bic.w	r1, r2, #1048576	; 0x100000
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004e12:	430a      	orrs	r2, r1
 8004e14:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e1e:	d10a      	bne.n	8004e36 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	687a      	ldr	r2, [r7, #4]
 8004e26:	6812      	ldr	r2, [r2, #0]
 8004e28:	6852      	ldr	r2, [r2, #4]
 8004e2a:	f422 01c0 	bic.w	r1, r2, #6291456	; 0x600000
 8004e2e:	687a      	ldr	r2, [r7, #4]
 8004e30:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004e32:	430a      	orrs	r2, r1
 8004e34:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d00a      	beq.n	8004e58 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	687a      	ldr	r2, [r7, #4]
 8004e48:	6812      	ldr	r2, [r2, #0]
 8004e4a:	6852      	ldr	r2, [r2, #4]
 8004e4c:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 8004e50:	687a      	ldr	r2, [r7, #4]
 8004e52:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004e54:	430a      	orrs	r2, r1
 8004e56:	605a      	str	r2, [r3, #4]
  }
}
 8004e58:	bf00      	nop
 8004e5a:	370c      	adds	r7, #12
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e62:	4770      	bx	lr

08004e64 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b086      	sub	sp, #24
 8004e68:	af02      	add	r7, sp, #8
 8004e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004e74:	f7fb fbe6 	bl	8000644 <HAL_GetTick>
 8004e78:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f003 0308 	and.w	r3, r3, #8
 8004e84:	2b08      	cmp	r3, #8
 8004e86:	d10e      	bne.n	8004ea6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e88:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e8c:	9300      	str	r3, [sp, #0]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2200      	movs	r2, #0
 8004e92:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f000 f82d 	bl	8004ef6 <UART_WaitOnFlagUntilTimeout>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d001      	beq.n	8004ea6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ea2:	2303      	movs	r3, #3
 8004ea4:	e023      	b.n	8004eee <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f003 0304 	and.w	r3, r3, #4
 8004eb0:	2b04      	cmp	r3, #4
 8004eb2:	d10e      	bne.n	8004ed2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004eb4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004eb8:	9300      	str	r3, [sp, #0]
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f000 f817 	bl	8004ef6 <UART_WaitOnFlagUntilTimeout>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d001      	beq.n	8004ed2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ece:	2303      	movs	r3, #3
 8004ed0:	e00d      	b.n	8004eee <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2220      	movs	r2, #32
 8004ed6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2220      	movs	r2, #32
 8004edc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004eec:	2300      	movs	r3, #0
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3710      	adds	r7, #16
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}

08004ef6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004ef6:	b580      	push	{r7, lr}
 8004ef8:	b084      	sub	sp, #16
 8004efa:	af00      	add	r7, sp, #0
 8004efc:	60f8      	str	r0, [r7, #12]
 8004efe:	60b9      	str	r1, [r7, #8]
 8004f00:	603b      	str	r3, [r7, #0]
 8004f02:	4613      	mov	r3, r2
 8004f04:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f06:	e05e      	b.n	8004fc6 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f08:	69bb      	ldr	r3, [r7, #24]
 8004f0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f0e:	d05a      	beq.n	8004fc6 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f10:	f7fb fb98 	bl	8000644 <HAL_GetTick>
 8004f14:	4602      	mov	r2, r0
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	1ad2      	subs	r2, r2, r3
 8004f1a:	69bb      	ldr	r3, [r7, #24]
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d802      	bhi.n	8004f26 <UART_WaitOnFlagUntilTimeout+0x30>
 8004f20:	69bb      	ldr	r3, [r7, #24]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d11b      	bne.n	8004f5e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	68fa      	ldr	r2, [r7, #12]
 8004f2c:	6812      	ldr	r2, [r2, #0]
 8004f2e:	6812      	ldr	r2, [r2, #0]
 8004f30:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004f34:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	68fa      	ldr	r2, [r7, #12]
 8004f3c:	6812      	ldr	r2, [r2, #0]
 8004f3e:	6892      	ldr	r2, [r2, #8]
 8004f40:	f022 0201 	bic.w	r2, r2, #1
 8004f44:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2220      	movs	r2, #32
 8004f4a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2220      	movs	r2, #32
 8004f50:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2200      	movs	r2, #0
 8004f56:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004f5a:	2303      	movs	r3, #3
 8004f5c:	e043      	b.n	8004fe6 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f003 0304 	and.w	r3, r3, #4
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d02c      	beq.n	8004fc6 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	69db      	ldr	r3, [r3, #28]
 8004f72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f7a:	d124      	bne.n	8004fc6 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f84:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	68fa      	ldr	r2, [r7, #12]
 8004f8c:	6812      	ldr	r2, [r2, #0]
 8004f8e:	6812      	ldr	r2, [r2, #0]
 8004f90:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004f94:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	68fa      	ldr	r2, [r7, #12]
 8004f9c:	6812      	ldr	r2, [r2, #0]
 8004f9e:	6892      	ldr	r2, [r2, #8]
 8004fa0:	f022 0201 	bic.w	r2, r2, #1
 8004fa4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2220      	movs	r2, #32
 8004faa:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2220      	movs	r2, #32
 8004fb0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2220      	movs	r2, #32
 8004fb6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004fc2:	2303      	movs	r3, #3
 8004fc4:	e00f      	b.n	8004fe6 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	69da      	ldr	r2, [r3, #28]
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	401a      	ands	r2, r3
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	bf0c      	ite	eq
 8004fd6:	2301      	moveq	r3, #1
 8004fd8:	2300      	movne	r3, #0
 8004fda:	b2db      	uxtb	r3, r3
 8004fdc:	461a      	mov	r2, r3
 8004fde:	79fb      	ldrb	r3, [r7, #7]
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d091      	beq.n	8004f08 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004fe4:	2300      	movs	r3, #0
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3710      	adds	r7, #16
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}

08004fee <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004fee:	b480      	push	{r7}
 8004ff0:	b085      	sub	sp, #20
 8004ff2:	af00      	add	r7, sp, #0
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004ffc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005000:	2b84      	cmp	r3, #132	; 0x84
 8005002:	d005      	beq.n	8005010 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005004:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	4413      	add	r3, r2
 800500c:	3303      	adds	r3, #3
 800500e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005010:	68fb      	ldr	r3, [r7, #12]
}
 8005012:	4618      	mov	r0, r3
 8005014:	3714      	adds	r7, #20
 8005016:	46bd      	mov	sp, r7
 8005018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501c:	4770      	bx	lr

0800501e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800501e:	b480      	push	{r7}
 8005020:	b083      	sub	sp, #12
 8005022:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005024:	f3ef 8305 	mrs	r3, IPSR
 8005028:	607b      	str	r3, [r7, #4]
  return(result);
 800502a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800502c:	2b00      	cmp	r3, #0
 800502e:	bf14      	ite	ne
 8005030:	2301      	movne	r3, #1
 8005032:	2300      	moveq	r3, #0
 8005034:	b2db      	uxtb	r3, r3
}
 8005036:	4618      	mov	r0, r3
 8005038:	370c      	adds	r7, #12
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	4770      	bx	lr

08005042 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005042:	b580      	push	{r7, lr}
 8005044:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005046:	f002 f88f 	bl	8007168 <vTaskStartScheduler>
  
  return osOK;
 800504a:	2300      	movs	r3, #0
}
 800504c:	4618      	mov	r0, r3
 800504e:	bd80      	pop	{r7, pc}

08005050 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8005054:	f7ff ffe3 	bl	800501e <inHandlerMode>
 8005058:	4603      	mov	r3, r0
 800505a:	2b00      	cmp	r3, #0
 800505c:	d003      	beq.n	8005066 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800505e:	f002 f9a1 	bl	80073a4 <xTaskGetTickCountFromISR>
 8005062:	4603      	mov	r3, r0
 8005064:	e002      	b.n	800506c <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8005066:	f002 f98d 	bl	8007384 <xTaskGetTickCount>
 800506a:	4603      	mov	r3, r0
  }
}
 800506c:	4618      	mov	r0, r3
 800506e:	bd80      	pop	{r7, pc}

08005070 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005070:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005072:	b089      	sub	sp, #36	; 0x24
 8005074:	af04      	add	r7, sp, #16
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	695b      	ldr	r3, [r3, #20]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d020      	beq.n	80050c4 <osThreadCreate+0x54>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	699b      	ldr	r3, [r3, #24]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d01c      	beq.n	80050c4 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	685c      	ldr	r4, [r3, #4]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681d      	ldr	r5, [r3, #0]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	691e      	ldr	r6, [r3, #16]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800509c:	4618      	mov	r0, r3
 800509e:	f7ff ffa6 	bl	8004fee <makeFreeRtosPriority>
 80050a2:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	695b      	ldr	r3, [r3, #20]
 80050a8:	687a      	ldr	r2, [r7, #4]
 80050aa:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80050ac:	9202      	str	r2, [sp, #8]
 80050ae:	9301      	str	r3, [sp, #4]
 80050b0:	9100      	str	r1, [sp, #0]
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	4632      	mov	r2, r6
 80050b6:	4629      	mov	r1, r5
 80050b8:	4620      	mov	r0, r4
 80050ba:	f001 fe88 	bl	8006dce <xTaskCreateStatic>
 80050be:	4603      	mov	r3, r0
 80050c0:	60fb      	str	r3, [r7, #12]
 80050c2:	e01c      	b.n	80050fe <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	685c      	ldr	r4, [r3, #4]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80050d0:	b29e      	uxth	r6, r3
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80050d8:	4618      	mov	r0, r3
 80050da:	f7ff ff88 	bl	8004fee <makeFreeRtosPriority>
 80050de:	4602      	mov	r2, r0
 80050e0:	f107 030c 	add.w	r3, r7, #12
 80050e4:	9301      	str	r3, [sp, #4]
 80050e6:	9200      	str	r2, [sp, #0]
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	4632      	mov	r2, r6
 80050ec:	4629      	mov	r1, r5
 80050ee:	4620      	mov	r0, r4
 80050f0:	f001 fecd 	bl	8006e8e <xTaskCreate>
 80050f4:	4603      	mov	r3, r0
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	d001      	beq.n	80050fe <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80050fa:	2300      	movs	r3, #0
 80050fc:	e000      	b.n	8005100 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80050fe:	68fb      	ldr	r3, [r7, #12]
}
 8005100:	4618      	mov	r0, r3
 8005102:	3714      	adds	r7, #20
 8005104:	46bd      	mov	sp, r7
 8005106:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005108 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b084      	sub	sp, #16
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d001      	beq.n	800511e <osDelay+0x16>
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	e000      	b.n	8005120 <osDelay+0x18>
 800511e:	2301      	movs	r3, #1
 8005120:	4618      	mov	r0, r3
 8005122:	f001 ffeb 	bl	80070fc <vTaskDelay>
  
  return osOK;
 8005126:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005128:	4618      	mov	r0, r3
 800512a:	3710      	adds	r7, #16
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}

08005130 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b082      	sub	sp, #8
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d007      	beq.n	8005150 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	4619      	mov	r1, r3
 8005146:	2001      	movs	r0, #1
 8005148:	f001 f859 	bl	80061fe <xQueueCreateMutexStatic>
 800514c:	4603      	mov	r3, r0
 800514e:	e003      	b.n	8005158 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8005150:	2001      	movs	r0, #1
 8005152:	f001 f83c 	bl	80061ce <xQueueCreateMutex>
 8005156:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8005158:	4618      	mov	r0, r3
 800515a:	3708      	adds	r7, #8
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}

08005160 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b084      	sub	sp, #16
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
 8005168:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800516a:	2300      	movs	r3, #0
 800516c:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d101      	bne.n	8005178 <osMutexWait+0x18>
    return osErrorParameter;
 8005174:	2380      	movs	r3, #128	; 0x80
 8005176:	e03a      	b.n	80051ee <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8005178:	2300      	movs	r3, #0
 800517a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005182:	d103      	bne.n	800518c <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8005184:	f04f 33ff 	mov.w	r3, #4294967295
 8005188:	60fb      	str	r3, [r7, #12]
 800518a:	e009      	b.n	80051a0 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d006      	beq.n	80051a0 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d101      	bne.n	80051a0 <osMutexWait+0x40>
      ticks = 1;
 800519c:	2301      	movs	r3, #1
 800519e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80051a0:	f7ff ff3d 	bl	800501e <inHandlerMode>
 80051a4:	4603      	mov	r3, r0
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d017      	beq.n	80051da <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80051aa:	f107 0308 	add.w	r3, r7, #8
 80051ae:	461a      	mov	r2, r3
 80051b0:	2100      	movs	r1, #0
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f001 fc60 	bl	8006a78 <xQueueReceiveFromISR>
 80051b8:	4603      	mov	r3, r0
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d001      	beq.n	80051c2 <osMutexWait+0x62>
      return osErrorOS;
 80051be:	23ff      	movs	r3, #255	; 0xff
 80051c0:	e015      	b.n	80051ee <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d011      	beq.n	80051ec <osMutexWait+0x8c>
 80051c8:	4b0b      	ldr	r3, [pc, #44]	; (80051f8 <osMutexWait+0x98>)
 80051ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051ce:	601a      	str	r2, [r3, #0]
 80051d0:	f3bf 8f4f 	dsb	sy
 80051d4:	f3bf 8f6f 	isb	sy
 80051d8:	e008      	b.n	80051ec <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 80051da:	68f9      	ldr	r1, [r7, #12]
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f001 fb3b 	bl	8006858 <xQueueSemaphoreTake>
 80051e2:	4603      	mov	r3, r0
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	d001      	beq.n	80051ec <osMutexWait+0x8c>
    return osErrorOS;
 80051e8:	23ff      	movs	r3, #255	; 0xff
 80051ea:	e000      	b.n	80051ee <osMutexWait+0x8e>
  }
  
  return osOK;
 80051ec:	2300      	movs	r3, #0
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3710      	adds	r7, #16
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}
 80051f6:	bf00      	nop
 80051f8:	e000ed04 	.word	0xe000ed04

080051fc <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b084      	sub	sp, #16
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8005204:	2300      	movs	r3, #0
 8005206:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8005208:	2300      	movs	r3, #0
 800520a:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800520c:	f7ff ff07 	bl	800501e <inHandlerMode>
 8005210:	4603      	mov	r3, r0
 8005212:	2b00      	cmp	r3, #0
 8005214:	d016      	beq.n	8005244 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8005216:	f107 0308 	add.w	r3, r7, #8
 800521a:	4619      	mov	r1, r3
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	f001 f9a7 	bl	8006570 <xQueueGiveFromISR>
 8005222:	4603      	mov	r3, r0
 8005224:	2b01      	cmp	r3, #1
 8005226:	d001      	beq.n	800522c <osMutexRelease+0x30>
      return osErrorOS;
 8005228:	23ff      	movs	r3, #255	; 0xff
 800522a:	e017      	b.n	800525c <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d013      	beq.n	800525a <osMutexRelease+0x5e>
 8005232:	4b0c      	ldr	r3, [pc, #48]	; (8005264 <osMutexRelease+0x68>)
 8005234:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005238:	601a      	str	r2, [r3, #0]
 800523a:	f3bf 8f4f 	dsb	sy
 800523e:	f3bf 8f6f 	isb	sy
 8005242:	e00a      	b.n	800525a <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8005244:	2300      	movs	r3, #0
 8005246:	2200      	movs	r2, #0
 8005248:	2100      	movs	r1, #0
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f000 fff2 	bl	8006234 <xQueueGenericSend>
 8005250:	4603      	mov	r3, r0
 8005252:	2b01      	cmp	r3, #1
 8005254:	d001      	beq.n	800525a <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8005256:	23ff      	movs	r3, #255	; 0xff
 8005258:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800525a:	68fb      	ldr	r3, [r7, #12]
}
 800525c:	4618      	mov	r0, r3
 800525e:	3710      	adds	r7, #16
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}
 8005264:	e000ed04 	.word	0xe000ed04

08005268 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8005268:	b580      	push	{r7, lr}
 800526a:	b086      	sub	sp, #24
 800526c:	af02      	add	r7, sp, #8
 800526e:	6078      	str	r0, [r7, #4]
 8005270:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d010      	beq.n	800529c <osSemaphoreCreate+0x34>
    if (count == 1) {
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	2b01      	cmp	r3, #1
 800527e:	d10b      	bne.n	8005298 <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	685a      	ldr	r2, [r3, #4]
 8005284:	2303      	movs	r3, #3
 8005286:	9300      	str	r3, [sp, #0]
 8005288:	4613      	mov	r3, r2
 800528a:	2200      	movs	r2, #0
 800528c:	2100      	movs	r1, #0
 800528e:	2001      	movs	r0, #1
 8005290:	f000 fea6 	bl	8005fe0 <xQueueGenericCreateStatic>
 8005294:	4603      	mov	r3, r0
 8005296:	e016      	b.n	80052c6 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8005298:	2300      	movs	r3, #0
 800529a:	e014      	b.n	80052c6 <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	2b01      	cmp	r3, #1
 80052a0:	d110      	bne.n	80052c4 <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 80052a2:	2203      	movs	r2, #3
 80052a4:	2100      	movs	r1, #0
 80052a6:	2001      	movs	r0, #1
 80052a8:	f000 ff17 	bl	80060da <xQueueGenericCreate>
 80052ac:	60f8      	str	r0, [r7, #12]
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d005      	beq.n	80052c0 <osSemaphoreCreate+0x58>
 80052b4:	2300      	movs	r3, #0
 80052b6:	2200      	movs	r2, #0
 80052b8:	2100      	movs	r1, #0
 80052ba:	68f8      	ldr	r0, [r7, #12]
 80052bc:	f000 ffba 	bl	8006234 <xQueueGenericSend>
      return sema;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	e000      	b.n	80052c6 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80052c4:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3710      	adds	r7, #16
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
	...

080052d0 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b084      	sub	sp, #16
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
 80052d8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80052da:	2300      	movs	r3, #0
 80052dc:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d101      	bne.n	80052e8 <osSemaphoreWait+0x18>
    return osErrorParameter;
 80052e4:	2380      	movs	r3, #128	; 0x80
 80052e6:	e03a      	b.n	800535e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80052e8:	2300      	movs	r3, #0
 80052ea:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052f2:	d103      	bne.n	80052fc <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80052f4:	f04f 33ff 	mov.w	r3, #4294967295
 80052f8:	60fb      	str	r3, [r7, #12]
 80052fa:	e009      	b.n	8005310 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d006      	beq.n	8005310 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d101      	bne.n	8005310 <osSemaphoreWait+0x40>
      ticks = 1;
 800530c:	2301      	movs	r3, #1
 800530e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8005310:	f7ff fe85 	bl	800501e <inHandlerMode>
 8005314:	4603      	mov	r3, r0
 8005316:	2b00      	cmp	r3, #0
 8005318:	d017      	beq.n	800534a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800531a:	f107 0308 	add.w	r3, r7, #8
 800531e:	461a      	mov	r2, r3
 8005320:	2100      	movs	r1, #0
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f001 fba8 	bl	8006a78 <xQueueReceiveFromISR>
 8005328:	4603      	mov	r3, r0
 800532a:	2b01      	cmp	r3, #1
 800532c:	d001      	beq.n	8005332 <osSemaphoreWait+0x62>
      return osErrorOS;
 800532e:	23ff      	movs	r3, #255	; 0xff
 8005330:	e015      	b.n	800535e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d011      	beq.n	800535c <osSemaphoreWait+0x8c>
 8005338:	4b0b      	ldr	r3, [pc, #44]	; (8005368 <osSemaphoreWait+0x98>)
 800533a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800533e:	601a      	str	r2, [r3, #0]
 8005340:	f3bf 8f4f 	dsb	sy
 8005344:	f3bf 8f6f 	isb	sy
 8005348:	e008      	b.n	800535c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800534a:	68f9      	ldr	r1, [r7, #12]
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	f001 fa83 	bl	8006858 <xQueueSemaphoreTake>
 8005352:	4603      	mov	r3, r0
 8005354:	2b01      	cmp	r3, #1
 8005356:	d001      	beq.n	800535c <osSemaphoreWait+0x8c>
    return osErrorOS;
 8005358:	23ff      	movs	r3, #255	; 0xff
 800535a:	e000      	b.n	800535e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800535c:	2300      	movs	r3, #0
}
 800535e:	4618      	mov	r0, r3
 8005360:	3710      	adds	r7, #16
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}
 8005366:	bf00      	nop
 8005368:	e000ed04 	.word	0xe000ed04

0800536c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b084      	sub	sp, #16
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8005374:	2300      	movs	r3, #0
 8005376:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8005378:	2300      	movs	r3, #0
 800537a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800537c:	f7ff fe4f 	bl	800501e <inHandlerMode>
 8005380:	4603      	mov	r3, r0
 8005382:	2b00      	cmp	r3, #0
 8005384:	d016      	beq.n	80053b4 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8005386:	f107 0308 	add.w	r3, r7, #8
 800538a:	4619      	mov	r1, r3
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	f001 f8ef 	bl	8006570 <xQueueGiveFromISR>
 8005392:	4603      	mov	r3, r0
 8005394:	2b01      	cmp	r3, #1
 8005396:	d001      	beq.n	800539c <osSemaphoreRelease+0x30>
      return osErrorOS;
 8005398:	23ff      	movs	r3, #255	; 0xff
 800539a:	e017      	b.n	80053cc <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d013      	beq.n	80053ca <osSemaphoreRelease+0x5e>
 80053a2:	4b0c      	ldr	r3, [pc, #48]	; (80053d4 <osSemaphoreRelease+0x68>)
 80053a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053a8:	601a      	str	r2, [r3, #0]
 80053aa:	f3bf 8f4f 	dsb	sy
 80053ae:	f3bf 8f6f 	isb	sy
 80053b2:	e00a      	b.n	80053ca <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80053b4:	2300      	movs	r3, #0
 80053b6:	2200      	movs	r2, #0
 80053b8:	2100      	movs	r1, #0
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f000 ff3a 	bl	8006234 <xQueueGenericSend>
 80053c0:	4603      	mov	r3, r0
 80053c2:	2b01      	cmp	r3, #1
 80053c4:	d001      	beq.n	80053ca <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80053c6:	23ff      	movs	r3, #255	; 0xff
 80053c8:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80053ca:	68fb      	ldr	r3, [r7, #12]
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	3710      	adds	r7, #16
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}
 80053d4:	e000ed04 	.word	0xe000ed04

080053d8 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80053d8:	b590      	push	{r4, r7, lr}
 80053da:	b085      	sub	sp, #20
 80053dc:	af02      	add	r7, sp, #8
 80053de:	6078      	str	r0, [r7, #4]
 80053e0:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	689b      	ldr	r3, [r3, #8]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d012      	beq.n	8005410 <osMessageCreate+0x38>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	68db      	ldr	r3, [r3, #12]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d00e      	beq.n	8005410 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6818      	ldr	r0, [r3, #0]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6859      	ldr	r1, [r3, #4]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	689a      	ldr	r2, [r3, #8]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	68dc      	ldr	r4, [r3, #12]
 8005402:	2300      	movs	r3, #0
 8005404:	9300      	str	r3, [sp, #0]
 8005406:	4623      	mov	r3, r4
 8005408:	f000 fdea 	bl	8005fe0 <xQueueGenericCreateStatic>
 800540c:	4603      	mov	r3, r0
 800540e:	e008      	b.n	8005422 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6818      	ldr	r0, [r3, #0]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	2200      	movs	r2, #0
 800541a:	4619      	mov	r1, r3
 800541c:	f000 fe5d 	bl	80060da <xQueueGenericCreate>
 8005420:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8005422:	4618      	mov	r0, r3
 8005424:	370c      	adds	r7, #12
 8005426:	46bd      	mov	sp, r7
 8005428:	bd90      	pop	{r4, r7, pc}
	...

0800542c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b086      	sub	sp, #24
 8005430:	af00      	add	r7, sp, #0
 8005432:	60f8      	str	r0, [r7, #12]
 8005434:	60b9      	str	r1, [r7, #8]
 8005436:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8005438:	2300      	movs	r3, #0
 800543a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d101      	bne.n	800544a <osMessagePut+0x1e>
    ticks = 1;
 8005446:	2301      	movs	r3, #1
 8005448:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800544a:	f7ff fde8 	bl	800501e <inHandlerMode>
 800544e:	4603      	mov	r3, r0
 8005450:	2b00      	cmp	r3, #0
 8005452:	d018      	beq.n	8005486 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8005454:	f107 0210 	add.w	r2, r7, #16
 8005458:	f107 0108 	add.w	r1, r7, #8
 800545c:	2300      	movs	r3, #0
 800545e:	68f8      	ldr	r0, [r7, #12]
 8005460:	f000 ffea 	bl	8006438 <xQueueGenericSendFromISR>
 8005464:	4603      	mov	r3, r0
 8005466:	2b01      	cmp	r3, #1
 8005468:	d001      	beq.n	800546e <osMessagePut+0x42>
      return osErrorOS;
 800546a:	23ff      	movs	r3, #255	; 0xff
 800546c:	e018      	b.n	80054a0 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d014      	beq.n	800549e <osMessagePut+0x72>
 8005474:	4b0c      	ldr	r3, [pc, #48]	; (80054a8 <osMessagePut+0x7c>)
 8005476:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800547a:	601a      	str	r2, [r3, #0]
 800547c:	f3bf 8f4f 	dsb	sy
 8005480:	f3bf 8f6f 	isb	sy
 8005484:	e00b      	b.n	800549e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8005486:	f107 0108 	add.w	r1, r7, #8
 800548a:	2300      	movs	r3, #0
 800548c:	697a      	ldr	r2, [r7, #20]
 800548e:	68f8      	ldr	r0, [r7, #12]
 8005490:	f000 fed0 	bl	8006234 <xQueueGenericSend>
 8005494:	4603      	mov	r3, r0
 8005496:	2b01      	cmp	r3, #1
 8005498:	d001      	beq.n	800549e <osMessagePut+0x72>
      return osErrorOS;
 800549a:	23ff      	movs	r3, #255	; 0xff
 800549c:	e000      	b.n	80054a0 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800549e:	2300      	movs	r3, #0
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3718      	adds	r7, #24
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}
 80054a8:	e000ed04 	.word	0xe000ed04

080054ac <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80054ac:	b590      	push	{r4, r7, lr}
 80054ae:	b08b      	sub	sp, #44	; 0x2c
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	60f8      	str	r0, [r7, #12]
 80054b4:	60b9      	str	r1, [r7, #8]
 80054b6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80054bc:	2300      	movs	r3, #0
 80054be:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d10a      	bne.n	80054dc <osMessageGet+0x30>
    event.status = osErrorParameter;
 80054c6:	2380      	movs	r3, #128	; 0x80
 80054c8:	617b      	str	r3, [r7, #20]
    return event;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	461c      	mov	r4, r3
 80054ce:	f107 0314 	add.w	r3, r7, #20
 80054d2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80054d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80054da:	e054      	b.n	8005586 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80054dc:	2300      	movs	r3, #0
 80054de:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80054e0:	2300      	movs	r3, #0
 80054e2:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054ea:	d103      	bne.n	80054f4 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80054ec:	f04f 33ff 	mov.w	r3, #4294967295
 80054f0:	627b      	str	r3, [r7, #36]	; 0x24
 80054f2:	e009      	b.n	8005508 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d006      	beq.n	8005508 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80054fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005500:	2b00      	cmp	r3, #0
 8005502:	d101      	bne.n	8005508 <osMessageGet+0x5c>
      ticks = 1;
 8005504:	2301      	movs	r3, #1
 8005506:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8005508:	f7ff fd89 	bl	800501e <inHandlerMode>
 800550c:	4603      	mov	r3, r0
 800550e:	2b00      	cmp	r3, #0
 8005510:	d01c      	beq.n	800554c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8005512:	f107 0220 	add.w	r2, r7, #32
 8005516:	f107 0314 	add.w	r3, r7, #20
 800551a:	3304      	adds	r3, #4
 800551c:	4619      	mov	r1, r3
 800551e:	68b8      	ldr	r0, [r7, #8]
 8005520:	f001 faaa 	bl	8006a78 <xQueueReceiveFromISR>
 8005524:	4603      	mov	r3, r0
 8005526:	2b01      	cmp	r3, #1
 8005528:	d102      	bne.n	8005530 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800552a:	2310      	movs	r3, #16
 800552c:	617b      	str	r3, [r7, #20]
 800552e:	e001      	b.n	8005534 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8005530:	2300      	movs	r3, #0
 8005532:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005534:	6a3b      	ldr	r3, [r7, #32]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d01d      	beq.n	8005576 <osMessageGet+0xca>
 800553a:	4b15      	ldr	r3, [pc, #84]	; (8005590 <osMessageGet+0xe4>)
 800553c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005540:	601a      	str	r2, [r3, #0]
 8005542:	f3bf 8f4f 	dsb	sy
 8005546:	f3bf 8f6f 	isb	sy
 800554a:	e014      	b.n	8005576 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800554c:	f107 0314 	add.w	r3, r7, #20
 8005550:	3304      	adds	r3, #4
 8005552:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005554:	4619      	mov	r1, r3
 8005556:	68b8      	ldr	r0, [r7, #8]
 8005558:	f001 f89c 	bl	8006694 <xQueueReceive>
 800555c:	4603      	mov	r3, r0
 800555e:	2b01      	cmp	r3, #1
 8005560:	d102      	bne.n	8005568 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8005562:	2310      	movs	r3, #16
 8005564:	617b      	str	r3, [r7, #20]
 8005566:	e006      	b.n	8005576 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8005568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800556a:	2b00      	cmp	r3, #0
 800556c:	d101      	bne.n	8005572 <osMessageGet+0xc6>
 800556e:	2300      	movs	r3, #0
 8005570:	e000      	b.n	8005574 <osMessageGet+0xc8>
 8005572:	2340      	movs	r3, #64	; 0x40
 8005574:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	461c      	mov	r4, r3
 800557a:	f107 0314 	add.w	r3, r7, #20
 800557e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005582:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8005586:	68f8      	ldr	r0, [r7, #12]
 8005588:	372c      	adds	r7, #44	; 0x2c
 800558a:	46bd      	mov	sp, r7
 800558c:	bd90      	pop	{r4, r7, pc}
 800558e:	bf00      	nop
 8005590:	e000ed04 	.word	0xe000ed04

08005594 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005594:	b480      	push	{r7}
 8005596:	b083      	sub	sp, #12
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f103 0208 	add.w	r2, r3, #8
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f04f 32ff 	mov.w	r2, #4294967295
 80055ac:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	f103 0208 	add.w	r2, r3, #8
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	f103 0208 	add.w	r2, r3, #8
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2200      	movs	r2, #0
 80055c6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80055c8:	bf00      	nop
 80055ca:	370c      	adds	r7, #12
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr

080055d4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80055d4:	b480      	push	{r7}
 80055d6:	b083      	sub	sp, #12
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2200      	movs	r2, #0
 80055e0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80055e2:	bf00      	nop
 80055e4:	370c      	adds	r7, #12
 80055e6:	46bd      	mov	sp, r7
 80055e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ec:	4770      	bx	lr

080055ee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80055ee:	b480      	push	{r7}
 80055f0:	b085      	sub	sp, #20
 80055f2:	af00      	add	r7, sp, #0
 80055f4:	6078      	str	r0, [r7, #4]
 80055f6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	68fa      	ldr	r2, [r7, #12]
 8005602:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	689a      	ldr	r2, [r3, #8]
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	683a      	ldr	r2, [r7, #0]
 8005612:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	683a      	ldr	r2, [r7, #0]
 8005618:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	687a      	ldr	r2, [r7, #4]
 800561e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	1c5a      	adds	r2, r3, #1
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	601a      	str	r2, [r3, #0]
}
 800562a:	bf00      	nop
 800562c:	3714      	adds	r7, #20
 800562e:	46bd      	mov	sp, r7
 8005630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005634:	4770      	bx	lr

08005636 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005636:	b480      	push	{r7}
 8005638:	b085      	sub	sp, #20
 800563a:	af00      	add	r7, sp, #0
 800563c:	6078      	str	r0, [r7, #4]
 800563e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800564c:	d103      	bne.n	8005656 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	691b      	ldr	r3, [r3, #16]
 8005652:	60fb      	str	r3, [r7, #12]
 8005654:	e00c      	b.n	8005670 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	3308      	adds	r3, #8
 800565a:	60fb      	str	r3, [r7, #12]
 800565c:	e002      	b.n	8005664 <vListInsert+0x2e>
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	60fb      	str	r3, [r7, #12]
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	681a      	ldr	r2, [r3, #0]
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	429a      	cmp	r2, r3
 800566e:	d9f6      	bls.n	800565e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	685a      	ldr	r2, [r3, #4]
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	683a      	ldr	r2, [r7, #0]
 800567e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	68fa      	ldr	r2, [r7, #12]
 8005684:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	683a      	ldr	r2, [r7, #0]
 800568a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	687a      	ldr	r2, [r7, #4]
 8005690:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	1c5a      	adds	r2, r3, #1
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	601a      	str	r2, [r3, #0]
}
 800569c:	bf00      	nop
 800569e:	3714      	adds	r7, #20
 80056a0:	46bd      	mov	sp, r7
 80056a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a6:	4770      	bx	lr

080056a8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80056a8:	b480      	push	{r7}
 80056aa:	b085      	sub	sp, #20
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	691b      	ldr	r3, [r3, #16]
 80056b4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	687a      	ldr	r2, [r7, #4]
 80056bc:	6892      	ldr	r2, [r2, #8]
 80056be:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	689b      	ldr	r3, [r3, #8]
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	6852      	ldr	r2, [r2, #4]
 80056c8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	685a      	ldr	r2, [r3, #4]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d103      	bne.n	80056dc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	689a      	ldr	r2, [r3, #8]
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2200      	movs	r2, #0
 80056e0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	1e5a      	subs	r2, r3, #1
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	3714      	adds	r7, #20
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr

080056fc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80056fc:	b480      	push	{r7}
 80056fe:	b085      	sub	sp, #20
 8005700:	af00      	add	r7, sp, #0
 8005702:	60f8      	str	r0, [r7, #12]
 8005704:	60b9      	str	r1, [r7, #8]
 8005706:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	3b04      	subs	r3, #4
 800570c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005714:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	3b04      	subs	r3, #4
 800571a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	f023 0201 	bic.w	r2, r3, #1
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	3b04      	subs	r3, #4
 800572a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800572c:	4a0c      	ldr	r2, [pc, #48]	; (8005760 <pxPortInitialiseStack+0x64>)
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	3b14      	subs	r3, #20
 8005736:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005738:	687a      	ldr	r2, [r7, #4]
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	3b04      	subs	r3, #4
 8005742:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f06f 0202 	mvn.w	r2, #2
 800574a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	3b20      	subs	r3, #32
 8005750:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005752:	68fb      	ldr	r3, [r7, #12]
}
 8005754:	4618      	mov	r0, r3
 8005756:	3714      	adds	r7, #20
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr
 8005760:	08005765 	.word	0x08005765

08005764 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005764:	b480      	push	{r7}
 8005766:	b085      	sub	sp, #20
 8005768:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800576a:	2300      	movs	r3, #0
 800576c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800576e:	4b13      	ldr	r3, [pc, #76]	; (80057bc <prvTaskExitError+0x58>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005776:	d00b      	beq.n	8005790 <prvTaskExitError+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800577c:	b672      	cpsid	i
 800577e:	f383 8811 	msr	BASEPRI, r3
 8005782:	f3bf 8f6f 	isb	sy
 8005786:	f3bf 8f4f 	dsb	sy
 800578a:	b662      	cpsie	i
 800578c:	60fb      	str	r3, [r7, #12]
 800578e:	e7fe      	b.n	800578e <prvTaskExitError+0x2a>
 8005790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005794:	b672      	cpsid	i
 8005796:	f383 8811 	msr	BASEPRI, r3
 800579a:	f3bf 8f6f 	isb	sy
 800579e:	f3bf 8f4f 	dsb	sy
 80057a2:	b662      	cpsie	i
 80057a4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80057a6:	bf00      	nop
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d0fc      	beq.n	80057a8 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80057ae:	bf00      	nop
 80057b0:	3714      	adds	r7, #20
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr
 80057ba:	bf00      	nop
 80057bc:	20000008 	.word	0x20000008

080057c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80057c0:	4b07      	ldr	r3, [pc, #28]	; (80057e0 <pxCurrentTCBConst2>)
 80057c2:	6819      	ldr	r1, [r3, #0]
 80057c4:	6808      	ldr	r0, [r1, #0]
 80057c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057ca:	f380 8809 	msr	PSP, r0
 80057ce:	f3bf 8f6f 	isb	sy
 80057d2:	f04f 0000 	mov.w	r0, #0
 80057d6:	f380 8811 	msr	BASEPRI, r0
 80057da:	4770      	bx	lr
 80057dc:	f3af 8000 	nop.w

080057e0 <pxCurrentTCBConst2>:
 80057e0:	20003e28 	.word	0x20003e28
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80057e4:	bf00      	nop
 80057e6:	bf00      	nop

080057e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80057e8:	4808      	ldr	r0, [pc, #32]	; (800580c <prvPortStartFirstTask+0x24>)
 80057ea:	6800      	ldr	r0, [r0, #0]
 80057ec:	6800      	ldr	r0, [r0, #0]
 80057ee:	f380 8808 	msr	MSP, r0
 80057f2:	f04f 0000 	mov.w	r0, #0
 80057f6:	f380 8814 	msr	CONTROL, r0
 80057fa:	b662      	cpsie	i
 80057fc:	b661      	cpsie	f
 80057fe:	f3bf 8f4f 	dsb	sy
 8005802:	f3bf 8f6f 	isb	sy
 8005806:	df00      	svc	0
 8005808:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800580a:	bf00      	nop
 800580c:	e000ed08 	.word	0xe000ed08

08005810 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b084      	sub	sp, #16
 8005814:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005816:	4b36      	ldr	r3, [pc, #216]	; (80058f0 <xPortStartScheduler+0xe0>)
 8005818:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	781b      	ldrb	r3, [r3, #0]
 800581e:	b2db      	uxtb	r3, r3
 8005820:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	22ff      	movs	r2, #255	; 0xff
 8005826:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	781b      	ldrb	r3, [r3, #0]
 800582c:	b2db      	uxtb	r3, r3
 800582e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005830:	78fb      	ldrb	r3, [r7, #3]
 8005832:	b2db      	uxtb	r3, r3
 8005834:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005838:	b2da      	uxtb	r2, r3
 800583a:	4b2e      	ldr	r3, [pc, #184]	; (80058f4 <xPortStartScheduler+0xe4>)
 800583c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800583e:	4b2e      	ldr	r3, [pc, #184]	; (80058f8 <xPortStartScheduler+0xe8>)
 8005840:	2207      	movs	r2, #7
 8005842:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005844:	e009      	b.n	800585a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8005846:	4b2c      	ldr	r3, [pc, #176]	; (80058f8 <xPortStartScheduler+0xe8>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	3b01      	subs	r3, #1
 800584c:	4a2a      	ldr	r2, [pc, #168]	; (80058f8 <xPortStartScheduler+0xe8>)
 800584e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005850:	78fb      	ldrb	r3, [r7, #3]
 8005852:	b2db      	uxtb	r3, r3
 8005854:	005b      	lsls	r3, r3, #1
 8005856:	b2db      	uxtb	r3, r3
 8005858:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800585a:	78fb      	ldrb	r3, [r7, #3]
 800585c:	b2db      	uxtb	r3, r3
 800585e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005862:	2b80      	cmp	r3, #128	; 0x80
 8005864:	d0ef      	beq.n	8005846 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005866:	4b24      	ldr	r3, [pc, #144]	; (80058f8 <xPortStartScheduler+0xe8>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f1c3 0307 	rsb	r3, r3, #7
 800586e:	2b04      	cmp	r3, #4
 8005870:	d00b      	beq.n	800588a <xPortStartScheduler+0x7a>
 8005872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005876:	b672      	cpsid	i
 8005878:	f383 8811 	msr	BASEPRI, r3
 800587c:	f3bf 8f6f 	isb	sy
 8005880:	f3bf 8f4f 	dsb	sy
 8005884:	b662      	cpsie	i
 8005886:	60bb      	str	r3, [r7, #8]
 8005888:	e7fe      	b.n	8005888 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800588a:	4b1b      	ldr	r3, [pc, #108]	; (80058f8 <xPortStartScheduler+0xe8>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	021b      	lsls	r3, r3, #8
 8005890:	4a19      	ldr	r2, [pc, #100]	; (80058f8 <xPortStartScheduler+0xe8>)
 8005892:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005894:	4b18      	ldr	r3, [pc, #96]	; (80058f8 <xPortStartScheduler+0xe8>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800589c:	4a16      	ldr	r2, [pc, #88]	; (80058f8 <xPortStartScheduler+0xe8>)
 800589e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	b2da      	uxtb	r2, r3
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80058a8:	4a14      	ldr	r2, [pc, #80]	; (80058fc <xPortStartScheduler+0xec>)
 80058aa:	4b14      	ldr	r3, [pc, #80]	; (80058fc <xPortStartScheduler+0xec>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80058b2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80058b4:	4a11      	ldr	r2, [pc, #68]	; (80058fc <xPortStartScheduler+0xec>)
 80058b6:	4b11      	ldr	r3, [pc, #68]	; (80058fc <xPortStartScheduler+0xec>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80058be:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80058c0:	f000 f8d4 	bl	8005a6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80058c4:	4b0e      	ldr	r3, [pc, #56]	; (8005900 <xPortStartScheduler+0xf0>)
 80058c6:	2200      	movs	r2, #0
 80058c8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80058ca:	f000 f8f3 	bl	8005ab4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80058ce:	4a0d      	ldr	r2, [pc, #52]	; (8005904 <xPortStartScheduler+0xf4>)
 80058d0:	4b0c      	ldr	r3, [pc, #48]	; (8005904 <xPortStartScheduler+0xf4>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80058d8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80058da:	f7ff ff85 	bl	80057e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80058de:	f001 fe2d 	bl	800753c <vTaskSwitchContext>
	prvTaskExitError();
 80058e2:	f7ff ff3f 	bl	8005764 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80058e6:	2300      	movs	r3, #0
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	3710      	adds	r7, #16
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}
 80058f0:	e000e400 	.word	0xe000e400
 80058f4:	20000208 	.word	0x20000208
 80058f8:	2000020c 	.word	0x2000020c
 80058fc:	e000ed20 	.word	0xe000ed20
 8005900:	20000008 	.word	0x20000008
 8005904:	e000ef34 	.word	0xe000ef34

08005908 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005908:	b480      	push	{r7}
 800590a:	b083      	sub	sp, #12
 800590c:	af00      	add	r7, sp, #0
 800590e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005912:	b672      	cpsid	i
 8005914:	f383 8811 	msr	BASEPRI, r3
 8005918:	f3bf 8f6f 	isb	sy
 800591c:	f3bf 8f4f 	dsb	sy
 8005920:	b662      	cpsie	i
 8005922:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005924:	4b0f      	ldr	r3, [pc, #60]	; (8005964 <vPortEnterCritical+0x5c>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	3301      	adds	r3, #1
 800592a:	4a0e      	ldr	r2, [pc, #56]	; (8005964 <vPortEnterCritical+0x5c>)
 800592c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800592e:	4b0d      	ldr	r3, [pc, #52]	; (8005964 <vPortEnterCritical+0x5c>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	2b01      	cmp	r3, #1
 8005934:	d110      	bne.n	8005958 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005936:	4b0c      	ldr	r3, [pc, #48]	; (8005968 <vPortEnterCritical+0x60>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	b2db      	uxtb	r3, r3
 800593c:	2b00      	cmp	r3, #0
 800593e:	d00b      	beq.n	8005958 <vPortEnterCritical+0x50>
 8005940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005944:	b672      	cpsid	i
 8005946:	f383 8811 	msr	BASEPRI, r3
 800594a:	f3bf 8f6f 	isb	sy
 800594e:	f3bf 8f4f 	dsb	sy
 8005952:	b662      	cpsie	i
 8005954:	603b      	str	r3, [r7, #0]
 8005956:	e7fe      	b.n	8005956 <vPortEnterCritical+0x4e>
	}
}
 8005958:	bf00      	nop
 800595a:	370c      	adds	r7, #12
 800595c:	46bd      	mov	sp, r7
 800595e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005962:	4770      	bx	lr
 8005964:	20000008 	.word	0x20000008
 8005968:	e000ed04 	.word	0xe000ed04

0800596c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800596c:	b480      	push	{r7}
 800596e:	b083      	sub	sp, #12
 8005970:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005972:	4b12      	ldr	r3, [pc, #72]	; (80059bc <vPortExitCritical+0x50>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d10b      	bne.n	8005992 <vPortExitCritical+0x26>
 800597a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800597e:	b672      	cpsid	i
 8005980:	f383 8811 	msr	BASEPRI, r3
 8005984:	f3bf 8f6f 	isb	sy
 8005988:	f3bf 8f4f 	dsb	sy
 800598c:	b662      	cpsie	i
 800598e:	607b      	str	r3, [r7, #4]
 8005990:	e7fe      	b.n	8005990 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8005992:	4b0a      	ldr	r3, [pc, #40]	; (80059bc <vPortExitCritical+0x50>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	3b01      	subs	r3, #1
 8005998:	4a08      	ldr	r2, [pc, #32]	; (80059bc <vPortExitCritical+0x50>)
 800599a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800599c:	4b07      	ldr	r3, [pc, #28]	; (80059bc <vPortExitCritical+0x50>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d104      	bne.n	80059ae <vPortExitCritical+0x42>
 80059a4:	2300      	movs	r3, #0
 80059a6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80059ae:	bf00      	nop
 80059b0:	370c      	adds	r7, #12
 80059b2:	46bd      	mov	sp, r7
 80059b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b8:	4770      	bx	lr
 80059ba:	bf00      	nop
 80059bc:	20000008 	.word	0x20000008

080059c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80059c0:	f3ef 8009 	mrs	r0, PSP
 80059c4:	f3bf 8f6f 	isb	sy
 80059c8:	4b15      	ldr	r3, [pc, #84]	; (8005a20 <pxCurrentTCBConst>)
 80059ca:	681a      	ldr	r2, [r3, #0]
 80059cc:	f01e 0f10 	tst.w	lr, #16
 80059d0:	bf08      	it	eq
 80059d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80059d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059da:	6010      	str	r0, [r2, #0]
 80059dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80059e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80059e4:	b672      	cpsid	i
 80059e6:	f380 8811 	msr	BASEPRI, r0
 80059ea:	f3bf 8f4f 	dsb	sy
 80059ee:	f3bf 8f6f 	isb	sy
 80059f2:	b662      	cpsie	i
 80059f4:	f001 fda2 	bl	800753c <vTaskSwitchContext>
 80059f8:	f04f 0000 	mov.w	r0, #0
 80059fc:	f380 8811 	msr	BASEPRI, r0
 8005a00:	bc09      	pop	{r0, r3}
 8005a02:	6819      	ldr	r1, [r3, #0]
 8005a04:	6808      	ldr	r0, [r1, #0]
 8005a06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a0a:	f01e 0f10 	tst.w	lr, #16
 8005a0e:	bf08      	it	eq
 8005a10:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005a14:	f380 8809 	msr	PSP, r0
 8005a18:	f3bf 8f6f 	isb	sy
 8005a1c:	4770      	bx	lr
 8005a1e:	bf00      	nop

08005a20 <pxCurrentTCBConst>:
 8005a20:	20003e28 	.word	0x20003e28
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005a24:	bf00      	nop
 8005a26:	bf00      	nop

08005a28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b082      	sub	sp, #8
 8005a2c:	af00      	add	r7, sp, #0
	__asm volatile
 8005a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a32:	b672      	cpsid	i
 8005a34:	f383 8811 	msr	BASEPRI, r3
 8005a38:	f3bf 8f6f 	isb	sy
 8005a3c:	f3bf 8f4f 	dsb	sy
 8005a40:	b662      	cpsie	i
 8005a42:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005a44:	f001 fcc0 	bl	80073c8 <xTaskIncrementTick>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d003      	beq.n	8005a56 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005a4e:	4b06      	ldr	r3, [pc, #24]	; (8005a68 <SysTick_Handler+0x40>)
 8005a50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a54:	601a      	str	r2, [r3, #0]
 8005a56:	2300      	movs	r3, #0
 8005a58:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8005a60:	bf00      	nop
 8005a62:	3708      	adds	r7, #8
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}
 8005a68:	e000ed04 	.word	0xe000ed04

08005a6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005a70:	4b0b      	ldr	r3, [pc, #44]	; (8005aa0 <vPortSetupTimerInterrupt+0x34>)
 8005a72:	2200      	movs	r2, #0
 8005a74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005a76:	4b0b      	ldr	r3, [pc, #44]	; (8005aa4 <vPortSetupTimerInterrupt+0x38>)
 8005a78:	2200      	movs	r2, #0
 8005a7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005a7c:	4a0a      	ldr	r2, [pc, #40]	; (8005aa8 <vPortSetupTimerInterrupt+0x3c>)
 8005a7e:	4b0b      	ldr	r3, [pc, #44]	; (8005aac <vPortSetupTimerInterrupt+0x40>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	490b      	ldr	r1, [pc, #44]	; (8005ab0 <vPortSetupTimerInterrupt+0x44>)
 8005a84:	fba1 1303 	umull	r1, r3, r1, r3
 8005a88:	099b      	lsrs	r3, r3, #6
 8005a8a:	3b01      	subs	r3, #1
 8005a8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005a8e:	4b04      	ldr	r3, [pc, #16]	; (8005aa0 <vPortSetupTimerInterrupt+0x34>)
 8005a90:	2207      	movs	r2, #7
 8005a92:	601a      	str	r2, [r3, #0]
}
 8005a94:	bf00      	nop
 8005a96:	46bd      	mov	sp, r7
 8005a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9c:	4770      	bx	lr
 8005a9e:	bf00      	nop
 8005aa0:	e000e010 	.word	0xe000e010
 8005aa4:	e000e018 	.word	0xe000e018
 8005aa8:	e000e014 	.word	0xe000e014
 8005aac:	20000018 	.word	0x20000018
 8005ab0:	10624dd3 	.word	0x10624dd3

08005ab4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005ab4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005ac4 <vPortEnableVFP+0x10>
 8005ab8:	6801      	ldr	r1, [r0, #0]
 8005aba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005abe:	6001      	str	r1, [r0, #0]
 8005ac0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005ac2:	bf00      	nop
 8005ac4:	e000ed88 	.word	0xe000ed88

08005ac8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005ac8:	b480      	push	{r7}
 8005aca:	b085      	sub	sp, #20
 8005acc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005ace:	f3ef 8305 	mrs	r3, IPSR
 8005ad2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2b0f      	cmp	r3, #15
 8005ad8:	d915      	bls.n	8005b06 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005ada:	4a18      	ldr	r2, [pc, #96]	; (8005b3c <vPortValidateInterruptPriority+0x74>)
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	4413      	add	r3, r2
 8005ae0:	781b      	ldrb	r3, [r3, #0]
 8005ae2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005ae4:	4b16      	ldr	r3, [pc, #88]	; (8005b40 <vPortValidateInterruptPriority+0x78>)
 8005ae6:	781b      	ldrb	r3, [r3, #0]
 8005ae8:	7afa      	ldrb	r2, [r7, #11]
 8005aea:	429a      	cmp	r2, r3
 8005aec:	d20b      	bcs.n	8005b06 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8005aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005af2:	b672      	cpsid	i
 8005af4:	f383 8811 	msr	BASEPRI, r3
 8005af8:	f3bf 8f6f 	isb	sy
 8005afc:	f3bf 8f4f 	dsb	sy
 8005b00:	b662      	cpsie	i
 8005b02:	607b      	str	r3, [r7, #4]
 8005b04:	e7fe      	b.n	8005b04 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005b06:	4b0f      	ldr	r3, [pc, #60]	; (8005b44 <vPortValidateInterruptPriority+0x7c>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005b0e:	4b0e      	ldr	r3, [pc, #56]	; (8005b48 <vPortValidateInterruptPriority+0x80>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	429a      	cmp	r2, r3
 8005b14:	d90b      	bls.n	8005b2e <vPortValidateInterruptPriority+0x66>
 8005b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b1a:	b672      	cpsid	i
 8005b1c:	f383 8811 	msr	BASEPRI, r3
 8005b20:	f3bf 8f6f 	isb	sy
 8005b24:	f3bf 8f4f 	dsb	sy
 8005b28:	b662      	cpsie	i
 8005b2a:	603b      	str	r3, [r7, #0]
 8005b2c:	e7fe      	b.n	8005b2c <vPortValidateInterruptPriority+0x64>
	}
 8005b2e:	bf00      	nop
 8005b30:	3714      	adds	r7, #20
 8005b32:	46bd      	mov	sp, r7
 8005b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b38:	4770      	bx	lr
 8005b3a:	bf00      	nop
 8005b3c:	e000e3f0 	.word	0xe000e3f0
 8005b40:	20000208 	.word	0x20000208
 8005b44:	e000ed0c 	.word	0xe000ed0c
 8005b48:	2000020c 	.word	0x2000020c

08005b4c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b08a      	sub	sp, #40	; 0x28
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005b54:	2300      	movs	r3, #0
 8005b56:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005b58:	f001 fb68 	bl	800722c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005b5c:	4b5a      	ldr	r3, [pc, #360]	; (8005cc8 <pvPortMalloc+0x17c>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d101      	bne.n	8005b68 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005b64:	f000 f916 	bl	8005d94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005b68:	4b58      	ldr	r3, [pc, #352]	; (8005ccc <pvPortMalloc+0x180>)
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	4013      	ands	r3, r2
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	f040 8090 	bne.w	8005c96 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d01e      	beq.n	8005bba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005b7c:	2208      	movs	r2, #8
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	4413      	add	r3, r2
 8005b82:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f003 0307 	and.w	r3, r3, #7
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d015      	beq.n	8005bba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f023 0307 	bic.w	r3, r3, #7
 8005b94:	3308      	adds	r3, #8
 8005b96:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	f003 0307 	and.w	r3, r3, #7
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d00b      	beq.n	8005bba <pvPortMalloc+0x6e>
 8005ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ba6:	b672      	cpsid	i
 8005ba8:	f383 8811 	msr	BASEPRI, r3
 8005bac:	f3bf 8f6f 	isb	sy
 8005bb0:	f3bf 8f4f 	dsb	sy
 8005bb4:	b662      	cpsie	i
 8005bb6:	617b      	str	r3, [r7, #20]
 8005bb8:	e7fe      	b.n	8005bb8 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d06a      	beq.n	8005c96 <pvPortMalloc+0x14a>
 8005bc0:	4b43      	ldr	r3, [pc, #268]	; (8005cd0 <pvPortMalloc+0x184>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	687a      	ldr	r2, [r7, #4]
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	d865      	bhi.n	8005c96 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005bca:	4b42      	ldr	r3, [pc, #264]	; (8005cd4 <pvPortMalloc+0x188>)
 8005bcc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005bce:	4b41      	ldr	r3, [pc, #260]	; (8005cd4 <pvPortMalloc+0x188>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005bd4:	e004      	b.n	8005be0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be2:	685a      	ldr	r2, [r3, #4]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	429a      	cmp	r2, r3
 8005be8:	d203      	bcs.n	8005bf2 <pvPortMalloc+0xa6>
 8005bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d1f1      	bne.n	8005bd6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005bf2:	4b35      	ldr	r3, [pc, #212]	; (8005cc8 <pvPortMalloc+0x17c>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bf8:	429a      	cmp	r2, r3
 8005bfa:	d04c      	beq.n	8005c96 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005bfc:	6a3b      	ldr	r3, [r7, #32]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	2208      	movs	r2, #8
 8005c02:	4413      	add	r3, r2
 8005c04:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c08:	681a      	ldr	r2, [r3, #0]
 8005c0a:	6a3b      	ldr	r3, [r7, #32]
 8005c0c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c10:	685a      	ldr	r2, [r3, #4]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	1ad2      	subs	r2, r2, r3
 8005c16:	2308      	movs	r3, #8
 8005c18:	005b      	lsls	r3, r3, #1
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	d920      	bls.n	8005c60 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005c1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	4413      	add	r3, r2
 8005c24:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c26:	69bb      	ldr	r3, [r7, #24]
 8005c28:	f003 0307 	and.w	r3, r3, #7
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d00b      	beq.n	8005c48 <pvPortMalloc+0xfc>
 8005c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c34:	b672      	cpsid	i
 8005c36:	f383 8811 	msr	BASEPRI, r3
 8005c3a:	f3bf 8f6f 	isb	sy
 8005c3e:	f3bf 8f4f 	dsb	sy
 8005c42:	b662      	cpsie	i
 8005c44:	613b      	str	r3, [r7, #16]
 8005c46:	e7fe      	b.n	8005c46 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c4a:	685a      	ldr	r2, [r3, #4]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	1ad2      	subs	r2, r2, r3
 8005c50:	69bb      	ldr	r3, [r7, #24]
 8005c52:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c56:	687a      	ldr	r2, [r7, #4]
 8005c58:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005c5a:	69b8      	ldr	r0, [r7, #24]
 8005c5c:	f000 f8fc 	bl	8005e58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005c60:	4b1b      	ldr	r3, [pc, #108]	; (8005cd0 <pvPortMalloc+0x184>)
 8005c62:	681a      	ldr	r2, [r3, #0]
 8005c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	1ad3      	subs	r3, r2, r3
 8005c6a:	4a19      	ldr	r2, [pc, #100]	; (8005cd0 <pvPortMalloc+0x184>)
 8005c6c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005c6e:	4b18      	ldr	r3, [pc, #96]	; (8005cd0 <pvPortMalloc+0x184>)
 8005c70:	681a      	ldr	r2, [r3, #0]
 8005c72:	4b19      	ldr	r3, [pc, #100]	; (8005cd8 <pvPortMalloc+0x18c>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	429a      	cmp	r2, r3
 8005c78:	d203      	bcs.n	8005c82 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005c7a:	4b15      	ldr	r3, [pc, #84]	; (8005cd0 <pvPortMalloc+0x184>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a16      	ldr	r2, [pc, #88]	; (8005cd8 <pvPortMalloc+0x18c>)
 8005c80:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c84:	685a      	ldr	r2, [r3, #4]
 8005c86:	4b11      	ldr	r3, [pc, #68]	; (8005ccc <pvPortMalloc+0x180>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	431a      	orrs	r2, r3
 8005c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c8e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c92:	2200      	movs	r2, #0
 8005c94:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005c96:	f001 fad7 	bl	8007248 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c9a:	69fb      	ldr	r3, [r7, #28]
 8005c9c:	f003 0307 	and.w	r3, r3, #7
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d00b      	beq.n	8005cbc <pvPortMalloc+0x170>
 8005ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ca8:	b672      	cpsid	i
 8005caa:	f383 8811 	msr	BASEPRI, r3
 8005cae:	f3bf 8f6f 	isb	sy
 8005cb2:	f3bf 8f4f 	dsb	sy
 8005cb6:	b662      	cpsie	i
 8005cb8:	60fb      	str	r3, [r7, #12]
 8005cba:	e7fe      	b.n	8005cba <pvPortMalloc+0x16e>
	return pvReturn;
 8005cbc:	69fb      	ldr	r3, [r7, #28]
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3728      	adds	r7, #40	; 0x28
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}
 8005cc6:	bf00      	nop
 8005cc8:	20003e18 	.word	0x20003e18
 8005ccc:	20003e24 	.word	0x20003e24
 8005cd0:	20003e1c 	.word	0x20003e1c
 8005cd4:	20003e10 	.word	0x20003e10
 8005cd8:	20003e20 	.word	0x20003e20

08005cdc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b086      	sub	sp, #24
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d04a      	beq.n	8005d84 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005cee:	2308      	movs	r3, #8
 8005cf0:	425b      	negs	r3, r3
 8005cf2:	697a      	ldr	r2, [r7, #20]
 8005cf4:	4413      	add	r3, r2
 8005cf6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	685a      	ldr	r2, [r3, #4]
 8005d00:	4b22      	ldr	r3, [pc, #136]	; (8005d8c <vPortFree+0xb0>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4013      	ands	r3, r2
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d10b      	bne.n	8005d22 <vPortFree+0x46>
 8005d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d0e:	b672      	cpsid	i
 8005d10:	f383 8811 	msr	BASEPRI, r3
 8005d14:	f3bf 8f6f 	isb	sy
 8005d18:	f3bf 8f4f 	dsb	sy
 8005d1c:	b662      	cpsie	i
 8005d1e:	60fb      	str	r3, [r7, #12]
 8005d20:	e7fe      	b.n	8005d20 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d00b      	beq.n	8005d42 <vPortFree+0x66>
 8005d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d2e:	b672      	cpsid	i
 8005d30:	f383 8811 	msr	BASEPRI, r3
 8005d34:	f3bf 8f6f 	isb	sy
 8005d38:	f3bf 8f4f 	dsb	sy
 8005d3c:	b662      	cpsie	i
 8005d3e:	60bb      	str	r3, [r7, #8]
 8005d40:	e7fe      	b.n	8005d40 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	685a      	ldr	r2, [r3, #4]
 8005d46:	4b11      	ldr	r3, [pc, #68]	; (8005d8c <vPortFree+0xb0>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4013      	ands	r3, r2
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d019      	beq.n	8005d84 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005d50:	693b      	ldr	r3, [r7, #16]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d115      	bne.n	8005d84 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	685a      	ldr	r2, [r3, #4]
 8005d5c:	4b0b      	ldr	r3, [pc, #44]	; (8005d8c <vPortFree+0xb0>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	43db      	mvns	r3, r3
 8005d62:	401a      	ands	r2, r3
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005d68:	f001 fa60 	bl	800722c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	685a      	ldr	r2, [r3, #4]
 8005d70:	4b07      	ldr	r3, [pc, #28]	; (8005d90 <vPortFree+0xb4>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4413      	add	r3, r2
 8005d76:	4a06      	ldr	r2, [pc, #24]	; (8005d90 <vPortFree+0xb4>)
 8005d78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005d7a:	6938      	ldr	r0, [r7, #16]
 8005d7c:	f000 f86c 	bl	8005e58 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005d80:	f001 fa62 	bl	8007248 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005d84:	bf00      	nop
 8005d86:	3718      	adds	r7, #24
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}
 8005d8c:	20003e24 	.word	0x20003e24
 8005d90:	20003e1c 	.word	0x20003e1c

08005d94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005d94:	b480      	push	{r7}
 8005d96:	b085      	sub	sp, #20
 8005d98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005d9a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005d9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005da0:	4b27      	ldr	r3, [pc, #156]	; (8005e40 <prvHeapInit+0xac>)
 8005da2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f003 0307 	and.w	r3, r3, #7
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d00c      	beq.n	8005dc8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	3307      	adds	r3, #7
 8005db2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	f023 0307 	bic.w	r3, r3, #7
 8005dba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005dbc:	68ba      	ldr	r2, [r7, #8]
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	1ad3      	subs	r3, r2, r3
 8005dc2:	4a1f      	ldr	r2, [pc, #124]	; (8005e40 <prvHeapInit+0xac>)
 8005dc4:	4413      	add	r3, r2
 8005dc6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005dcc:	4a1d      	ldr	r2, [pc, #116]	; (8005e44 <prvHeapInit+0xb0>)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005dd2:	4b1c      	ldr	r3, [pc, #112]	; (8005e44 <prvHeapInit+0xb0>)
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005dd8:	687a      	ldr	r2, [r7, #4]
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	4413      	add	r3, r2
 8005dde:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005de0:	2208      	movs	r2, #8
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	1a9b      	subs	r3, r3, r2
 8005de6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	f023 0307 	bic.w	r3, r3, #7
 8005dee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	4a15      	ldr	r2, [pc, #84]	; (8005e48 <prvHeapInit+0xb4>)
 8005df4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005df6:	4b14      	ldr	r3, [pc, #80]	; (8005e48 <prvHeapInit+0xb4>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005dfe:	4b12      	ldr	r3, [pc, #72]	; (8005e48 <prvHeapInit+0xb4>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	2200      	movs	r2, #0
 8005e04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	68fa      	ldr	r2, [r7, #12]
 8005e0e:	1ad2      	subs	r2, r2, r3
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005e14:	4b0c      	ldr	r3, [pc, #48]	; (8005e48 <prvHeapInit+0xb4>)
 8005e16:	681a      	ldr	r2, [r3, #0]
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	4a0a      	ldr	r2, [pc, #40]	; (8005e4c <prvHeapInit+0xb8>)
 8005e22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	4a09      	ldr	r2, [pc, #36]	; (8005e50 <prvHeapInit+0xbc>)
 8005e2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005e2c:	4b09      	ldr	r3, [pc, #36]	; (8005e54 <prvHeapInit+0xc0>)
 8005e2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005e32:	601a      	str	r2, [r3, #0]
}
 8005e34:	bf00      	nop
 8005e36:	3714      	adds	r7, #20
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr
 8005e40:	20000210 	.word	0x20000210
 8005e44:	20003e10 	.word	0x20003e10
 8005e48:	20003e18 	.word	0x20003e18
 8005e4c:	20003e20 	.word	0x20003e20
 8005e50:	20003e1c 	.word	0x20003e1c
 8005e54:	20003e24 	.word	0x20003e24

08005e58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b085      	sub	sp, #20
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005e60:	4b28      	ldr	r3, [pc, #160]	; (8005f04 <prvInsertBlockIntoFreeList+0xac>)
 8005e62:	60fb      	str	r3, [r7, #12]
 8005e64:	e002      	b.n	8005e6c <prvInsertBlockIntoFreeList+0x14>
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	60fb      	str	r3, [r7, #12]
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681a      	ldr	r2, [r3, #0]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	429a      	cmp	r2, r3
 8005e74:	d3f7      	bcc.n	8005e66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	68ba      	ldr	r2, [r7, #8]
 8005e80:	441a      	add	r2, r3
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	429a      	cmp	r2, r3
 8005e86:	d108      	bne.n	8005e9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	685a      	ldr	r2, [r3, #4]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	441a      	add	r2, r3
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	68ba      	ldr	r2, [r7, #8]
 8005ea4:	441a      	add	r2, r3
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	429a      	cmp	r2, r3
 8005eac:	d118      	bne.n	8005ee0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681a      	ldr	r2, [r3, #0]
 8005eb2:	4b15      	ldr	r3, [pc, #84]	; (8005f08 <prvInsertBlockIntoFreeList+0xb0>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	429a      	cmp	r2, r3
 8005eb8:	d00d      	beq.n	8005ed6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	685a      	ldr	r2, [r3, #4]
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	441a      	add	r2, r3
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	681a      	ldr	r2, [r3, #0]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	601a      	str	r2, [r3, #0]
 8005ed4:	e008      	b.n	8005ee8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005ed6:	4b0c      	ldr	r3, [pc, #48]	; (8005f08 <prvInsertBlockIntoFreeList+0xb0>)
 8005ed8:	681a      	ldr	r2, [r3, #0]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	601a      	str	r2, [r3, #0]
 8005ede:	e003      	b.n	8005ee8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681a      	ldr	r2, [r3, #0]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005ee8:	68fa      	ldr	r2, [r7, #12]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	429a      	cmp	r2, r3
 8005eee:	d002      	beq.n	8005ef6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	687a      	ldr	r2, [r7, #4]
 8005ef4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005ef6:	bf00      	nop
 8005ef8:	3714      	adds	r7, #20
 8005efa:	46bd      	mov	sp, r7
 8005efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f00:	4770      	bx	lr
 8005f02:	bf00      	nop
 8005f04:	20003e10 	.word	0x20003e10
 8005f08:	20003e18 	.word	0x20003e18

08005f0c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b084      	sub	sp, #16
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
 8005f14:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d10b      	bne.n	8005f38 <xQueueGenericReset+0x2c>
 8005f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f24:	b672      	cpsid	i
 8005f26:	f383 8811 	msr	BASEPRI, r3
 8005f2a:	f3bf 8f6f 	isb	sy
 8005f2e:	f3bf 8f4f 	dsb	sy
 8005f32:	b662      	cpsie	i
 8005f34:	60bb      	str	r3, [r7, #8]
 8005f36:	e7fe      	b.n	8005f36 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 8005f38:	f7ff fce6 	bl	8005908 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681a      	ldr	r2, [r3, #0]
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f44:	68f9      	ldr	r1, [r7, #12]
 8005f46:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005f48:	fb01 f303 	mul.w	r3, r1, r3
 8005f4c:	441a      	add	r2, r3
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2200      	movs	r2, #0
 8005f56:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681a      	ldr	r2, [r3, #0]
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f68:	3b01      	subs	r3, #1
 8005f6a:	68f9      	ldr	r1, [r7, #12]
 8005f6c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005f6e:	fb01 f303 	mul.w	r3, r1, r3
 8005f72:	441a      	add	r2, r3
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	22ff      	movs	r2, #255	; 0xff
 8005f7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	22ff      	movs	r2, #255	; 0xff
 8005f84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d114      	bne.n	8005fb8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	691b      	ldr	r3, [r3, #16]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d01a      	beq.n	8005fcc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	3310      	adds	r3, #16
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f001 fb50 	bl	8007640 <xTaskRemoveFromEventList>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d012      	beq.n	8005fcc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005fa6:	4b0d      	ldr	r3, [pc, #52]	; (8005fdc <xQueueGenericReset+0xd0>)
 8005fa8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fac:	601a      	str	r2, [r3, #0]
 8005fae:	f3bf 8f4f 	dsb	sy
 8005fb2:	f3bf 8f6f 	isb	sy
 8005fb6:	e009      	b.n	8005fcc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	3310      	adds	r3, #16
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	f7ff fae9 	bl	8005594 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	3324      	adds	r3, #36	; 0x24
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f7ff fae4 	bl	8005594 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005fcc:	f7ff fcce 	bl	800596c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005fd0:	2301      	movs	r3, #1
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	3710      	adds	r7, #16
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bd80      	pop	{r7, pc}
 8005fda:	bf00      	nop
 8005fdc:	e000ed04 	.word	0xe000ed04

08005fe0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b08e      	sub	sp, #56	; 0x38
 8005fe4:	af02      	add	r7, sp, #8
 8005fe6:	60f8      	str	r0, [r7, #12]
 8005fe8:	60b9      	str	r1, [r7, #8]
 8005fea:	607a      	str	r2, [r7, #4]
 8005fec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d10b      	bne.n	800600c <xQueueGenericCreateStatic+0x2c>
 8005ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ff8:	b672      	cpsid	i
 8005ffa:	f383 8811 	msr	BASEPRI, r3
 8005ffe:	f3bf 8f6f 	isb	sy
 8006002:	f3bf 8f4f 	dsb	sy
 8006006:	b662      	cpsie	i
 8006008:	62bb      	str	r3, [r7, #40]	; 0x28
 800600a:	e7fe      	b.n	800600a <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d10b      	bne.n	800602a <xQueueGenericCreateStatic+0x4a>
 8006012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006016:	b672      	cpsid	i
 8006018:	f383 8811 	msr	BASEPRI, r3
 800601c:	f3bf 8f6f 	isb	sy
 8006020:	f3bf 8f4f 	dsb	sy
 8006024:	b662      	cpsie	i
 8006026:	627b      	str	r3, [r7, #36]	; 0x24
 8006028:	e7fe      	b.n	8006028 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d002      	beq.n	8006036 <xQueueGenericCreateStatic+0x56>
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d001      	beq.n	800603a <xQueueGenericCreateStatic+0x5a>
 8006036:	2301      	movs	r3, #1
 8006038:	e000      	b.n	800603c <xQueueGenericCreateStatic+0x5c>
 800603a:	2300      	movs	r3, #0
 800603c:	2b00      	cmp	r3, #0
 800603e:	d10b      	bne.n	8006058 <xQueueGenericCreateStatic+0x78>
 8006040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006044:	b672      	cpsid	i
 8006046:	f383 8811 	msr	BASEPRI, r3
 800604a:	f3bf 8f6f 	isb	sy
 800604e:	f3bf 8f4f 	dsb	sy
 8006052:	b662      	cpsie	i
 8006054:	623b      	str	r3, [r7, #32]
 8006056:	e7fe      	b.n	8006056 <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d102      	bne.n	8006064 <xQueueGenericCreateStatic+0x84>
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d101      	bne.n	8006068 <xQueueGenericCreateStatic+0x88>
 8006064:	2301      	movs	r3, #1
 8006066:	e000      	b.n	800606a <xQueueGenericCreateStatic+0x8a>
 8006068:	2300      	movs	r3, #0
 800606a:	2b00      	cmp	r3, #0
 800606c:	d10b      	bne.n	8006086 <xQueueGenericCreateStatic+0xa6>
 800606e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006072:	b672      	cpsid	i
 8006074:	f383 8811 	msr	BASEPRI, r3
 8006078:	f3bf 8f6f 	isb	sy
 800607c:	f3bf 8f4f 	dsb	sy
 8006080:	b662      	cpsie	i
 8006082:	61fb      	str	r3, [r7, #28]
 8006084:	e7fe      	b.n	8006084 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006086:	2348      	movs	r3, #72	; 0x48
 8006088:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	2b48      	cmp	r3, #72	; 0x48
 800608e:	d00b      	beq.n	80060a8 <xQueueGenericCreateStatic+0xc8>
 8006090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006094:	b672      	cpsid	i
 8006096:	f383 8811 	msr	BASEPRI, r3
 800609a:	f3bf 8f6f 	isb	sy
 800609e:	f3bf 8f4f 	dsb	sy
 80060a2:	b662      	cpsie	i
 80060a4:	61bb      	str	r3, [r7, #24]
 80060a6:	e7fe      	b.n	80060a6 <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80060a8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80060ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d00d      	beq.n	80060d0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80060b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060b6:	2201      	movs	r2, #1
 80060b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80060bc:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80060c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060c2:	9300      	str	r3, [sp, #0]
 80060c4:	4613      	mov	r3, r2
 80060c6:	687a      	ldr	r2, [r7, #4]
 80060c8:	68b9      	ldr	r1, [r7, #8]
 80060ca:	68f8      	ldr	r0, [r7, #12]
 80060cc:	f000 f846 	bl	800615c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80060d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3730      	adds	r7, #48	; 0x30
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}

080060da <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80060da:	b580      	push	{r7, lr}
 80060dc:	b08a      	sub	sp, #40	; 0x28
 80060de:	af02      	add	r7, sp, #8
 80060e0:	60f8      	str	r0, [r7, #12]
 80060e2:	60b9      	str	r1, [r7, #8]
 80060e4:	4613      	mov	r3, r2
 80060e6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d10b      	bne.n	8006106 <xQueueGenericCreate+0x2c>
 80060ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f2:	b672      	cpsid	i
 80060f4:	f383 8811 	msr	BASEPRI, r3
 80060f8:	f3bf 8f6f 	isb	sy
 80060fc:	f3bf 8f4f 	dsb	sy
 8006100:	b662      	cpsie	i
 8006102:	613b      	str	r3, [r7, #16]
 8006104:	e7fe      	b.n	8006104 <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d102      	bne.n	8006112 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800610c:	2300      	movs	r3, #0
 800610e:	61fb      	str	r3, [r7, #28]
 8006110:	e004      	b.n	800611c <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	68ba      	ldr	r2, [r7, #8]
 8006116:	fb02 f303 	mul.w	r3, r2, r3
 800611a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800611c:	69fb      	ldr	r3, [r7, #28]
 800611e:	3348      	adds	r3, #72	; 0x48
 8006120:	4618      	mov	r0, r3
 8006122:	f7ff fd13 	bl	8005b4c <pvPortMalloc>
 8006126:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006128:	69bb      	ldr	r3, [r7, #24]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d011      	beq.n	8006152 <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800612e:	69bb      	ldr	r3, [r7, #24]
 8006130:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	3348      	adds	r3, #72	; 0x48
 8006136:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006138:	69bb      	ldr	r3, [r7, #24]
 800613a:	2200      	movs	r2, #0
 800613c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006140:	79fa      	ldrb	r2, [r7, #7]
 8006142:	69bb      	ldr	r3, [r7, #24]
 8006144:	9300      	str	r3, [sp, #0]
 8006146:	4613      	mov	r3, r2
 8006148:	697a      	ldr	r2, [r7, #20]
 800614a:	68b9      	ldr	r1, [r7, #8]
 800614c:	68f8      	ldr	r0, [r7, #12]
 800614e:	f000 f805 	bl	800615c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006152:	69bb      	ldr	r3, [r7, #24]
	}
 8006154:	4618      	mov	r0, r3
 8006156:	3720      	adds	r7, #32
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}

0800615c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b084      	sub	sp, #16
 8006160:	af00      	add	r7, sp, #0
 8006162:	60f8      	str	r0, [r7, #12]
 8006164:	60b9      	str	r1, [r7, #8]
 8006166:	607a      	str	r2, [r7, #4]
 8006168:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d103      	bne.n	8006178 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006170:	69bb      	ldr	r3, [r7, #24]
 8006172:	69ba      	ldr	r2, [r7, #24]
 8006174:	601a      	str	r2, [r3, #0]
 8006176:	e002      	b.n	800617e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006178:	69bb      	ldr	r3, [r7, #24]
 800617a:	687a      	ldr	r2, [r7, #4]
 800617c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800617e:	69bb      	ldr	r3, [r7, #24]
 8006180:	68fa      	ldr	r2, [r7, #12]
 8006182:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006184:	69bb      	ldr	r3, [r7, #24]
 8006186:	68ba      	ldr	r2, [r7, #8]
 8006188:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800618a:	2101      	movs	r1, #1
 800618c:	69b8      	ldr	r0, [r7, #24]
 800618e:	f7ff febd 	bl	8005f0c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006192:	bf00      	nop
 8006194:	3710      	adds	r7, #16
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}

0800619a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800619a:	b580      	push	{r7, lr}
 800619c:	b082      	sub	sp, #8
 800619e:	af00      	add	r7, sp, #0
 80061a0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d00e      	beq.n	80061c6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2200      	movs	r2, #0
 80061ac:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2200      	movs	r2, #0
 80061b2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2200      	movs	r2, #0
 80061b8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80061ba:	2300      	movs	r3, #0
 80061bc:	2200      	movs	r2, #0
 80061be:	2100      	movs	r1, #0
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f000 f837 	bl	8006234 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80061c6:	bf00      	nop
 80061c8:	3708      	adds	r7, #8
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}

080061ce <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80061ce:	b580      	push	{r7, lr}
 80061d0:	b086      	sub	sp, #24
 80061d2:	af00      	add	r7, sp, #0
 80061d4:	4603      	mov	r3, r0
 80061d6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80061d8:	2301      	movs	r3, #1
 80061da:	617b      	str	r3, [r7, #20]
 80061dc:	2300      	movs	r3, #0
 80061de:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80061e0:	79fb      	ldrb	r3, [r7, #7]
 80061e2:	461a      	mov	r2, r3
 80061e4:	6939      	ldr	r1, [r7, #16]
 80061e6:	6978      	ldr	r0, [r7, #20]
 80061e8:	f7ff ff77 	bl	80060da <xQueueGenericCreate>
 80061ec:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80061ee:	68f8      	ldr	r0, [r7, #12]
 80061f0:	f7ff ffd3 	bl	800619a <prvInitialiseMutex>

		return xNewQueue;
 80061f4:	68fb      	ldr	r3, [r7, #12]
	}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3718      	adds	r7, #24
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}

080061fe <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80061fe:	b580      	push	{r7, lr}
 8006200:	b088      	sub	sp, #32
 8006202:	af02      	add	r7, sp, #8
 8006204:	4603      	mov	r3, r0
 8006206:	6039      	str	r1, [r7, #0]
 8006208:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800620a:	2301      	movs	r3, #1
 800620c:	617b      	str	r3, [r7, #20]
 800620e:	2300      	movs	r3, #0
 8006210:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006212:	79fb      	ldrb	r3, [r7, #7]
 8006214:	9300      	str	r3, [sp, #0]
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	2200      	movs	r2, #0
 800621a:	6939      	ldr	r1, [r7, #16]
 800621c:	6978      	ldr	r0, [r7, #20]
 800621e:	f7ff fedf 	bl	8005fe0 <xQueueGenericCreateStatic>
 8006222:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006224:	68f8      	ldr	r0, [r7, #12]
 8006226:	f7ff ffb8 	bl	800619a <prvInitialiseMutex>

		return xNewQueue;
 800622a:	68fb      	ldr	r3, [r7, #12]
	}
 800622c:	4618      	mov	r0, r3
 800622e:	3718      	adds	r7, #24
 8006230:	46bd      	mov	sp, r7
 8006232:	bd80      	pop	{r7, pc}

08006234 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b08e      	sub	sp, #56	; 0x38
 8006238:	af00      	add	r7, sp, #0
 800623a:	60f8      	str	r0, [r7, #12]
 800623c:	60b9      	str	r1, [r7, #8]
 800623e:	607a      	str	r2, [r7, #4]
 8006240:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006242:	2300      	movs	r3, #0
 8006244:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800624a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800624c:	2b00      	cmp	r3, #0
 800624e:	d10b      	bne.n	8006268 <xQueueGenericSend+0x34>
 8006250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006254:	b672      	cpsid	i
 8006256:	f383 8811 	msr	BASEPRI, r3
 800625a:	f3bf 8f6f 	isb	sy
 800625e:	f3bf 8f4f 	dsb	sy
 8006262:	b662      	cpsie	i
 8006264:	62bb      	str	r3, [r7, #40]	; 0x28
 8006266:	e7fe      	b.n	8006266 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d103      	bne.n	8006276 <xQueueGenericSend+0x42>
 800626e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006272:	2b00      	cmp	r3, #0
 8006274:	d101      	bne.n	800627a <xQueueGenericSend+0x46>
 8006276:	2301      	movs	r3, #1
 8006278:	e000      	b.n	800627c <xQueueGenericSend+0x48>
 800627a:	2300      	movs	r3, #0
 800627c:	2b00      	cmp	r3, #0
 800627e:	d10b      	bne.n	8006298 <xQueueGenericSend+0x64>
 8006280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006284:	b672      	cpsid	i
 8006286:	f383 8811 	msr	BASEPRI, r3
 800628a:	f3bf 8f6f 	isb	sy
 800628e:	f3bf 8f4f 	dsb	sy
 8006292:	b662      	cpsie	i
 8006294:	627b      	str	r3, [r7, #36]	; 0x24
 8006296:	e7fe      	b.n	8006296 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	2b02      	cmp	r3, #2
 800629c:	d103      	bne.n	80062a6 <xQueueGenericSend+0x72>
 800629e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062a2:	2b01      	cmp	r3, #1
 80062a4:	d101      	bne.n	80062aa <xQueueGenericSend+0x76>
 80062a6:	2301      	movs	r3, #1
 80062a8:	e000      	b.n	80062ac <xQueueGenericSend+0x78>
 80062aa:	2300      	movs	r3, #0
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d10b      	bne.n	80062c8 <xQueueGenericSend+0x94>
 80062b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062b4:	b672      	cpsid	i
 80062b6:	f383 8811 	msr	BASEPRI, r3
 80062ba:	f3bf 8f6f 	isb	sy
 80062be:	f3bf 8f4f 	dsb	sy
 80062c2:	b662      	cpsie	i
 80062c4:	623b      	str	r3, [r7, #32]
 80062c6:	e7fe      	b.n	80062c6 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80062c8:	f001 fb78 	bl	80079bc <xTaskGetSchedulerState>
 80062cc:	4603      	mov	r3, r0
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d102      	bne.n	80062d8 <xQueueGenericSend+0xa4>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d101      	bne.n	80062dc <xQueueGenericSend+0xa8>
 80062d8:	2301      	movs	r3, #1
 80062da:	e000      	b.n	80062de <xQueueGenericSend+0xaa>
 80062dc:	2300      	movs	r3, #0
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d10b      	bne.n	80062fa <xQueueGenericSend+0xc6>
 80062e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062e6:	b672      	cpsid	i
 80062e8:	f383 8811 	msr	BASEPRI, r3
 80062ec:	f3bf 8f6f 	isb	sy
 80062f0:	f3bf 8f4f 	dsb	sy
 80062f4:	b662      	cpsie	i
 80062f6:	61fb      	str	r3, [r7, #28]
 80062f8:	e7fe      	b.n	80062f8 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80062fa:	f7ff fb05 	bl	8005908 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80062fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006300:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006306:	429a      	cmp	r2, r3
 8006308:	d302      	bcc.n	8006310 <xQueueGenericSend+0xdc>
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	2b02      	cmp	r3, #2
 800630e:	d129      	bne.n	8006364 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006310:	683a      	ldr	r2, [r7, #0]
 8006312:	68b9      	ldr	r1, [r7, #8]
 8006314:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006316:	f000 fc4a 	bl	8006bae <prvCopyDataToQueue>
 800631a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800631c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800631e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006320:	2b00      	cmp	r3, #0
 8006322:	d010      	beq.n	8006346 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006326:	3324      	adds	r3, #36	; 0x24
 8006328:	4618      	mov	r0, r3
 800632a:	f001 f989 	bl	8007640 <xTaskRemoveFromEventList>
 800632e:	4603      	mov	r3, r0
 8006330:	2b00      	cmp	r3, #0
 8006332:	d013      	beq.n	800635c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006334:	4b3f      	ldr	r3, [pc, #252]	; (8006434 <xQueueGenericSend+0x200>)
 8006336:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800633a:	601a      	str	r2, [r3, #0]
 800633c:	f3bf 8f4f 	dsb	sy
 8006340:	f3bf 8f6f 	isb	sy
 8006344:	e00a      	b.n	800635c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006348:	2b00      	cmp	r3, #0
 800634a:	d007      	beq.n	800635c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800634c:	4b39      	ldr	r3, [pc, #228]	; (8006434 <xQueueGenericSend+0x200>)
 800634e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006352:	601a      	str	r2, [r3, #0]
 8006354:	f3bf 8f4f 	dsb	sy
 8006358:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800635c:	f7ff fb06 	bl	800596c <vPortExitCritical>
				return pdPASS;
 8006360:	2301      	movs	r3, #1
 8006362:	e063      	b.n	800642c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d103      	bne.n	8006372 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800636a:	f7ff faff 	bl	800596c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800636e:	2300      	movs	r3, #0
 8006370:	e05c      	b.n	800642c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006374:	2b00      	cmp	r3, #0
 8006376:	d106      	bne.n	8006386 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006378:	f107 0314 	add.w	r3, r7, #20
 800637c:	4618      	mov	r0, r3
 800637e:	f001 f9c3 	bl	8007708 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006382:	2301      	movs	r3, #1
 8006384:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006386:	f7ff faf1 	bl	800596c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800638a:	f000 ff4f 	bl	800722c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800638e:	f7ff fabb 	bl	8005908 <vPortEnterCritical>
 8006392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006394:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006398:	b25b      	sxtb	r3, r3
 800639a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800639e:	d103      	bne.n	80063a8 <xQueueGenericSend+0x174>
 80063a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063a2:	2200      	movs	r2, #0
 80063a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80063ae:	b25b      	sxtb	r3, r3
 80063b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063b4:	d103      	bne.n	80063be <xQueueGenericSend+0x18a>
 80063b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063b8:	2200      	movs	r2, #0
 80063ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80063be:	f7ff fad5 	bl	800596c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80063c2:	1d3a      	adds	r2, r7, #4
 80063c4:	f107 0314 	add.w	r3, r7, #20
 80063c8:	4611      	mov	r1, r2
 80063ca:	4618      	mov	r0, r3
 80063cc:	f001 f9b2 	bl	8007734 <xTaskCheckForTimeOut>
 80063d0:	4603      	mov	r3, r0
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d124      	bne.n	8006420 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80063d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80063d8:	f000 fce1 	bl	8006d9e <prvIsQueueFull>
 80063dc:	4603      	mov	r3, r0
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d018      	beq.n	8006414 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80063e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063e4:	3310      	adds	r3, #16
 80063e6:	687a      	ldr	r2, [r7, #4]
 80063e8:	4611      	mov	r1, r2
 80063ea:	4618      	mov	r0, r3
 80063ec:	f001 f902 	bl	80075f4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80063f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80063f2:	f000 fc6c 	bl	8006cce <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80063f6:	f000 ff27 	bl	8007248 <xTaskResumeAll>
 80063fa:	4603      	mov	r3, r0
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	f47f af7c 	bne.w	80062fa <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8006402:	4b0c      	ldr	r3, [pc, #48]	; (8006434 <xQueueGenericSend+0x200>)
 8006404:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006408:	601a      	str	r2, [r3, #0]
 800640a:	f3bf 8f4f 	dsb	sy
 800640e:	f3bf 8f6f 	isb	sy
 8006412:	e772      	b.n	80062fa <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006414:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006416:	f000 fc5a 	bl	8006cce <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800641a:	f000 ff15 	bl	8007248 <xTaskResumeAll>
 800641e:	e76c      	b.n	80062fa <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006420:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006422:	f000 fc54 	bl	8006cce <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006426:	f000 ff0f 	bl	8007248 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800642a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800642c:	4618      	mov	r0, r3
 800642e:	3738      	adds	r7, #56	; 0x38
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}
 8006434:	e000ed04 	.word	0xe000ed04

08006438 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b08e      	sub	sp, #56	; 0x38
 800643c:	af00      	add	r7, sp, #0
 800643e:	60f8      	str	r0, [r7, #12]
 8006440:	60b9      	str	r1, [r7, #8]
 8006442:	607a      	str	r2, [r7, #4]
 8006444:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800644a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800644c:	2b00      	cmp	r3, #0
 800644e:	d10b      	bne.n	8006468 <xQueueGenericSendFromISR+0x30>
 8006450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006454:	b672      	cpsid	i
 8006456:	f383 8811 	msr	BASEPRI, r3
 800645a:	f3bf 8f6f 	isb	sy
 800645e:	f3bf 8f4f 	dsb	sy
 8006462:	b662      	cpsie	i
 8006464:	627b      	str	r3, [r7, #36]	; 0x24
 8006466:	e7fe      	b.n	8006466 <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d103      	bne.n	8006476 <xQueueGenericSendFromISR+0x3e>
 800646e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006472:	2b00      	cmp	r3, #0
 8006474:	d101      	bne.n	800647a <xQueueGenericSendFromISR+0x42>
 8006476:	2301      	movs	r3, #1
 8006478:	e000      	b.n	800647c <xQueueGenericSendFromISR+0x44>
 800647a:	2300      	movs	r3, #0
 800647c:	2b00      	cmp	r3, #0
 800647e:	d10b      	bne.n	8006498 <xQueueGenericSendFromISR+0x60>
 8006480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006484:	b672      	cpsid	i
 8006486:	f383 8811 	msr	BASEPRI, r3
 800648a:	f3bf 8f6f 	isb	sy
 800648e:	f3bf 8f4f 	dsb	sy
 8006492:	b662      	cpsie	i
 8006494:	623b      	str	r3, [r7, #32]
 8006496:	e7fe      	b.n	8006496 <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	2b02      	cmp	r3, #2
 800649c:	d103      	bne.n	80064a6 <xQueueGenericSendFromISR+0x6e>
 800649e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064a2:	2b01      	cmp	r3, #1
 80064a4:	d101      	bne.n	80064aa <xQueueGenericSendFromISR+0x72>
 80064a6:	2301      	movs	r3, #1
 80064a8:	e000      	b.n	80064ac <xQueueGenericSendFromISR+0x74>
 80064aa:	2300      	movs	r3, #0
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d10b      	bne.n	80064c8 <xQueueGenericSendFromISR+0x90>
 80064b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064b4:	b672      	cpsid	i
 80064b6:	f383 8811 	msr	BASEPRI, r3
 80064ba:	f3bf 8f6f 	isb	sy
 80064be:	f3bf 8f4f 	dsb	sy
 80064c2:	b662      	cpsie	i
 80064c4:	61fb      	str	r3, [r7, #28]
 80064c6:	e7fe      	b.n	80064c6 <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80064c8:	f7ff fafe 	bl	8005ac8 <vPortValidateInterruptPriority>
	__asm volatile
 80064cc:	f3ef 8211 	mrs	r2, BASEPRI
 80064d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064d4:	b672      	cpsid	i
 80064d6:	f383 8811 	msr	BASEPRI, r3
 80064da:	f3bf 8f6f 	isb	sy
 80064de:	f3bf 8f4f 	dsb	sy
 80064e2:	b662      	cpsie	i
 80064e4:	61ba      	str	r2, [r7, #24]
 80064e6:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80064e8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80064ea:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80064ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064f4:	429a      	cmp	r2, r3
 80064f6:	d302      	bcc.n	80064fe <xQueueGenericSendFromISR+0xc6>
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	2b02      	cmp	r3, #2
 80064fc:	d12c      	bne.n	8006558 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80064fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006500:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006504:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006508:	683a      	ldr	r2, [r7, #0]
 800650a:	68b9      	ldr	r1, [r7, #8]
 800650c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800650e:	f000 fb4e 	bl	8006bae <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006512:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800651a:	d112      	bne.n	8006542 <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800651c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800651e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006520:	2b00      	cmp	r3, #0
 8006522:	d016      	beq.n	8006552 <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006526:	3324      	adds	r3, #36	; 0x24
 8006528:	4618      	mov	r0, r3
 800652a:	f001 f889 	bl	8007640 <xTaskRemoveFromEventList>
 800652e:	4603      	mov	r3, r0
 8006530:	2b00      	cmp	r3, #0
 8006532:	d00e      	beq.n	8006552 <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d00b      	beq.n	8006552 <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2201      	movs	r2, #1
 800653e:	601a      	str	r2, [r3, #0]
 8006540:	e007      	b.n	8006552 <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006542:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006546:	3301      	adds	r3, #1
 8006548:	b2db      	uxtb	r3, r3
 800654a:	b25a      	sxtb	r2, r3
 800654c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800654e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006552:	2301      	movs	r3, #1
 8006554:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006556:	e001      	b.n	800655c <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006558:	2300      	movs	r3, #0
 800655a:	637b      	str	r3, [r7, #52]	; 0x34
 800655c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800655e:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006566:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006568:	4618      	mov	r0, r3
 800656a:	3738      	adds	r7, #56	; 0x38
 800656c:	46bd      	mov	sp, r7
 800656e:	bd80      	pop	{r7, pc}

08006570 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b08e      	sub	sp, #56	; 0x38
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
 8006578:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800657e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006580:	2b00      	cmp	r3, #0
 8006582:	d10b      	bne.n	800659c <xQueueGiveFromISR+0x2c>
	__asm volatile
 8006584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006588:	b672      	cpsid	i
 800658a:	f383 8811 	msr	BASEPRI, r3
 800658e:	f3bf 8f6f 	isb	sy
 8006592:	f3bf 8f4f 	dsb	sy
 8006596:	b662      	cpsie	i
 8006598:	623b      	str	r3, [r7, #32]
 800659a:	e7fe      	b.n	800659a <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800659c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800659e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d00b      	beq.n	80065bc <xQueueGiveFromISR+0x4c>
 80065a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065a8:	b672      	cpsid	i
 80065aa:	f383 8811 	msr	BASEPRI, r3
 80065ae:	f3bf 8f6f 	isb	sy
 80065b2:	f3bf 8f4f 	dsb	sy
 80065b6:	b662      	cpsie	i
 80065b8:	61fb      	str	r3, [r7, #28]
 80065ba:	e7fe      	b.n	80065ba <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80065bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d103      	bne.n	80065cc <xQueueGiveFromISR+0x5c>
 80065c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065c6:	689b      	ldr	r3, [r3, #8]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d101      	bne.n	80065d0 <xQueueGiveFromISR+0x60>
 80065cc:	2301      	movs	r3, #1
 80065ce:	e000      	b.n	80065d2 <xQueueGiveFromISR+0x62>
 80065d0:	2300      	movs	r3, #0
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d10b      	bne.n	80065ee <xQueueGiveFromISR+0x7e>
 80065d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065da:	b672      	cpsid	i
 80065dc:	f383 8811 	msr	BASEPRI, r3
 80065e0:	f3bf 8f6f 	isb	sy
 80065e4:	f3bf 8f4f 	dsb	sy
 80065e8:	b662      	cpsie	i
 80065ea:	61bb      	str	r3, [r7, #24]
 80065ec:	e7fe      	b.n	80065ec <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80065ee:	f7ff fa6b 	bl	8005ac8 <vPortValidateInterruptPriority>
	__asm volatile
 80065f2:	f3ef 8211 	mrs	r2, BASEPRI
 80065f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065fa:	b672      	cpsid	i
 80065fc:	f383 8811 	msr	BASEPRI, r3
 8006600:	f3bf 8f6f 	isb	sy
 8006604:	f3bf 8f4f 	dsb	sy
 8006608:	b662      	cpsie	i
 800660a:	617a      	str	r2, [r7, #20]
 800660c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800660e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006610:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006616:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800661a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800661c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800661e:	429a      	cmp	r2, r3
 8006620:	d92b      	bls.n	800667a <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006624:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006628:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800662c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800662e:	1c5a      	adds	r2, r3, #1
 8006630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006632:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006634:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800663c:	d112      	bne.n	8006664 <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800663e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006642:	2b00      	cmp	r3, #0
 8006644:	d016      	beq.n	8006674 <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006648:	3324      	adds	r3, #36	; 0x24
 800664a:	4618      	mov	r0, r3
 800664c:	f000 fff8 	bl	8007640 <xTaskRemoveFromEventList>
 8006650:	4603      	mov	r3, r0
 8006652:	2b00      	cmp	r3, #0
 8006654:	d00e      	beq.n	8006674 <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d00b      	beq.n	8006674 <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	2201      	movs	r2, #1
 8006660:	601a      	str	r2, [r3, #0]
 8006662:	e007      	b.n	8006674 <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006664:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006668:	3301      	adds	r3, #1
 800666a:	b2db      	uxtb	r3, r3
 800666c:	b25a      	sxtb	r2, r3
 800666e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006670:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006674:	2301      	movs	r3, #1
 8006676:	637b      	str	r3, [r7, #52]	; 0x34
 8006678:	e001      	b.n	800667e <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800667a:	2300      	movs	r3, #0
 800667c:	637b      	str	r3, [r7, #52]	; 0x34
 800667e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006680:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006688:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800668a:	4618      	mov	r0, r3
 800668c:	3738      	adds	r7, #56	; 0x38
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}
	...

08006694 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b08c      	sub	sp, #48	; 0x30
 8006698:	af00      	add	r7, sp, #0
 800669a:	60f8      	str	r0, [r7, #12]
 800669c:	60b9      	str	r1, [r7, #8]
 800669e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80066a0:	2300      	movs	r3, #0
 80066a2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80066a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d10b      	bne.n	80066c6 <xQueueReceive+0x32>
	__asm volatile
 80066ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066b2:	b672      	cpsid	i
 80066b4:	f383 8811 	msr	BASEPRI, r3
 80066b8:	f3bf 8f6f 	isb	sy
 80066bc:	f3bf 8f4f 	dsb	sy
 80066c0:	b662      	cpsie	i
 80066c2:	623b      	str	r3, [r7, #32]
 80066c4:	e7fe      	b.n	80066c4 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d103      	bne.n	80066d4 <xQueueReceive+0x40>
 80066cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d101      	bne.n	80066d8 <xQueueReceive+0x44>
 80066d4:	2301      	movs	r3, #1
 80066d6:	e000      	b.n	80066da <xQueueReceive+0x46>
 80066d8:	2300      	movs	r3, #0
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d10b      	bne.n	80066f6 <xQueueReceive+0x62>
 80066de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e2:	b672      	cpsid	i
 80066e4:	f383 8811 	msr	BASEPRI, r3
 80066e8:	f3bf 8f6f 	isb	sy
 80066ec:	f3bf 8f4f 	dsb	sy
 80066f0:	b662      	cpsie	i
 80066f2:	61fb      	str	r3, [r7, #28]
 80066f4:	e7fe      	b.n	80066f4 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80066f6:	f001 f961 	bl	80079bc <xTaskGetSchedulerState>
 80066fa:	4603      	mov	r3, r0
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d102      	bne.n	8006706 <xQueueReceive+0x72>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d101      	bne.n	800670a <xQueueReceive+0x76>
 8006706:	2301      	movs	r3, #1
 8006708:	e000      	b.n	800670c <xQueueReceive+0x78>
 800670a:	2300      	movs	r3, #0
 800670c:	2b00      	cmp	r3, #0
 800670e:	d10b      	bne.n	8006728 <xQueueReceive+0x94>
 8006710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006714:	b672      	cpsid	i
 8006716:	f383 8811 	msr	BASEPRI, r3
 800671a:	f3bf 8f6f 	isb	sy
 800671e:	f3bf 8f4f 	dsb	sy
 8006722:	b662      	cpsie	i
 8006724:	61bb      	str	r3, [r7, #24]
 8006726:	e7fe      	b.n	8006726 <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006728:	f7ff f8ee 	bl	8005908 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800672c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800672e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006730:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006734:	2b00      	cmp	r3, #0
 8006736:	d01f      	beq.n	8006778 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006738:	68b9      	ldr	r1, [r7, #8]
 800673a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800673c:	f000 faa1 	bl	8006c82 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006742:	1e5a      	subs	r2, r3, #1
 8006744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006746:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800674a:	691b      	ldr	r3, [r3, #16]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d00f      	beq.n	8006770 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006752:	3310      	adds	r3, #16
 8006754:	4618      	mov	r0, r3
 8006756:	f000 ff73 	bl	8007640 <xTaskRemoveFromEventList>
 800675a:	4603      	mov	r3, r0
 800675c:	2b00      	cmp	r3, #0
 800675e:	d007      	beq.n	8006770 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006760:	4b3c      	ldr	r3, [pc, #240]	; (8006854 <xQueueReceive+0x1c0>)
 8006762:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006766:	601a      	str	r2, [r3, #0]
 8006768:	f3bf 8f4f 	dsb	sy
 800676c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006770:	f7ff f8fc 	bl	800596c <vPortExitCritical>
				return pdPASS;
 8006774:	2301      	movs	r3, #1
 8006776:	e069      	b.n	800684c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d103      	bne.n	8006786 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800677e:	f7ff f8f5 	bl	800596c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006782:	2300      	movs	r3, #0
 8006784:	e062      	b.n	800684c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006788:	2b00      	cmp	r3, #0
 800678a:	d106      	bne.n	800679a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800678c:	f107 0310 	add.w	r3, r7, #16
 8006790:	4618      	mov	r0, r3
 8006792:	f000 ffb9 	bl	8007708 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006796:	2301      	movs	r3, #1
 8006798:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800679a:	f7ff f8e7 	bl	800596c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800679e:	f000 fd45 	bl	800722c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80067a2:	f7ff f8b1 	bl	8005908 <vPortEnterCritical>
 80067a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80067ac:	b25b      	sxtb	r3, r3
 80067ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067b2:	d103      	bne.n	80067bc <xQueueReceive+0x128>
 80067b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067b6:	2200      	movs	r2, #0
 80067b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80067c2:	b25b      	sxtb	r3, r3
 80067c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067c8:	d103      	bne.n	80067d2 <xQueueReceive+0x13e>
 80067ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067cc:	2200      	movs	r2, #0
 80067ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80067d2:	f7ff f8cb 	bl	800596c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80067d6:	1d3a      	adds	r2, r7, #4
 80067d8:	f107 0310 	add.w	r3, r7, #16
 80067dc:	4611      	mov	r1, r2
 80067de:	4618      	mov	r0, r3
 80067e0:	f000 ffa8 	bl	8007734 <xTaskCheckForTimeOut>
 80067e4:	4603      	mov	r3, r0
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d123      	bne.n	8006832 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80067ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067ec:	f000 fac1 	bl	8006d72 <prvIsQueueEmpty>
 80067f0:	4603      	mov	r3, r0
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d017      	beq.n	8006826 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80067f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067f8:	3324      	adds	r3, #36	; 0x24
 80067fa:	687a      	ldr	r2, [r7, #4]
 80067fc:	4611      	mov	r1, r2
 80067fe:	4618      	mov	r0, r3
 8006800:	f000 fef8 	bl	80075f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006804:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006806:	f000 fa62 	bl	8006cce <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800680a:	f000 fd1d 	bl	8007248 <xTaskResumeAll>
 800680e:	4603      	mov	r3, r0
 8006810:	2b00      	cmp	r3, #0
 8006812:	d189      	bne.n	8006728 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006814:	4b0f      	ldr	r3, [pc, #60]	; (8006854 <xQueueReceive+0x1c0>)
 8006816:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800681a:	601a      	str	r2, [r3, #0]
 800681c:	f3bf 8f4f 	dsb	sy
 8006820:	f3bf 8f6f 	isb	sy
 8006824:	e780      	b.n	8006728 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006826:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006828:	f000 fa51 	bl	8006cce <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800682c:	f000 fd0c 	bl	8007248 <xTaskResumeAll>
 8006830:	e77a      	b.n	8006728 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006832:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006834:	f000 fa4b 	bl	8006cce <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006838:	f000 fd06 	bl	8007248 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800683c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800683e:	f000 fa98 	bl	8006d72 <prvIsQueueEmpty>
 8006842:	4603      	mov	r3, r0
 8006844:	2b00      	cmp	r3, #0
 8006846:	f43f af6f 	beq.w	8006728 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800684a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800684c:	4618      	mov	r0, r3
 800684e:	3730      	adds	r7, #48	; 0x30
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}
 8006854:	e000ed04 	.word	0xe000ed04

08006858 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b08e      	sub	sp, #56	; 0x38
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
 8006860:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006862:	2300      	movs	r3, #0
 8006864:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800686a:	2300      	movs	r3, #0
 800686c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800686e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006870:	2b00      	cmp	r3, #0
 8006872:	d10b      	bne.n	800688c <xQueueSemaphoreTake+0x34>
 8006874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006878:	b672      	cpsid	i
 800687a:	f383 8811 	msr	BASEPRI, r3
 800687e:	f3bf 8f6f 	isb	sy
 8006882:	f3bf 8f4f 	dsb	sy
 8006886:	b662      	cpsie	i
 8006888:	623b      	str	r3, [r7, #32]
 800688a:	e7fe      	b.n	800688a <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800688c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800688e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006890:	2b00      	cmp	r3, #0
 8006892:	d00b      	beq.n	80068ac <xQueueSemaphoreTake+0x54>
 8006894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006898:	b672      	cpsid	i
 800689a:	f383 8811 	msr	BASEPRI, r3
 800689e:	f3bf 8f6f 	isb	sy
 80068a2:	f3bf 8f4f 	dsb	sy
 80068a6:	b662      	cpsie	i
 80068a8:	61fb      	str	r3, [r7, #28]
 80068aa:	e7fe      	b.n	80068aa <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80068ac:	f001 f886 	bl	80079bc <xTaskGetSchedulerState>
 80068b0:	4603      	mov	r3, r0
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d102      	bne.n	80068bc <xQueueSemaphoreTake+0x64>
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d101      	bne.n	80068c0 <xQueueSemaphoreTake+0x68>
 80068bc:	2301      	movs	r3, #1
 80068be:	e000      	b.n	80068c2 <xQueueSemaphoreTake+0x6a>
 80068c0:	2300      	movs	r3, #0
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d10b      	bne.n	80068de <xQueueSemaphoreTake+0x86>
 80068c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ca:	b672      	cpsid	i
 80068cc:	f383 8811 	msr	BASEPRI, r3
 80068d0:	f3bf 8f6f 	isb	sy
 80068d4:	f3bf 8f4f 	dsb	sy
 80068d8:	b662      	cpsie	i
 80068da:	61bb      	str	r3, [r7, #24]
 80068dc:	e7fe      	b.n	80068dc <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80068de:	f7ff f813 	bl	8005908 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80068e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068e6:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80068e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d024      	beq.n	8006938 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80068ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068f0:	1e5a      	subs	r2, r3, #1
 80068f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068f4:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80068f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d104      	bne.n	8006908 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80068fe:	f001 fa1f 	bl	8007d40 <pvTaskIncrementMutexHeldCount>
 8006902:	4602      	mov	r2, r0
 8006904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006906:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800690a:	691b      	ldr	r3, [r3, #16]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d00f      	beq.n	8006930 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006912:	3310      	adds	r3, #16
 8006914:	4618      	mov	r0, r3
 8006916:	f000 fe93 	bl	8007640 <xTaskRemoveFromEventList>
 800691a:	4603      	mov	r3, r0
 800691c:	2b00      	cmp	r3, #0
 800691e:	d007      	beq.n	8006930 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006920:	4b54      	ldr	r3, [pc, #336]	; (8006a74 <xQueueSemaphoreTake+0x21c>)
 8006922:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006926:	601a      	str	r2, [r3, #0]
 8006928:	f3bf 8f4f 	dsb	sy
 800692c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006930:	f7ff f81c 	bl	800596c <vPortExitCritical>
				return pdPASS;
 8006934:	2301      	movs	r3, #1
 8006936:	e098      	b.n	8006a6a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d112      	bne.n	8006964 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800693e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006940:	2b00      	cmp	r3, #0
 8006942:	d00b      	beq.n	800695c <xQueueSemaphoreTake+0x104>
 8006944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006948:	b672      	cpsid	i
 800694a:	f383 8811 	msr	BASEPRI, r3
 800694e:	f3bf 8f6f 	isb	sy
 8006952:	f3bf 8f4f 	dsb	sy
 8006956:	b662      	cpsie	i
 8006958:	617b      	str	r3, [r7, #20]
 800695a:	e7fe      	b.n	800695a <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800695c:	f7ff f806 	bl	800596c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006960:	2300      	movs	r3, #0
 8006962:	e082      	b.n	8006a6a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006964:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006966:	2b00      	cmp	r3, #0
 8006968:	d106      	bne.n	8006978 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800696a:	f107 030c 	add.w	r3, r7, #12
 800696e:	4618      	mov	r0, r3
 8006970:	f000 feca 	bl	8007708 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006974:	2301      	movs	r3, #1
 8006976:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006978:	f7fe fff8 	bl	800596c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800697c:	f000 fc56 	bl	800722c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006980:	f7fe ffc2 	bl	8005908 <vPortEnterCritical>
 8006984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006986:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800698a:	b25b      	sxtb	r3, r3
 800698c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006990:	d103      	bne.n	800699a <xQueueSemaphoreTake+0x142>
 8006992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006994:	2200      	movs	r2, #0
 8006996:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800699a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800699c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80069a0:	b25b      	sxtb	r3, r3
 80069a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069a6:	d103      	bne.n	80069b0 <xQueueSemaphoreTake+0x158>
 80069a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069aa:	2200      	movs	r2, #0
 80069ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80069b0:	f7fe ffdc 	bl	800596c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80069b4:	463a      	mov	r2, r7
 80069b6:	f107 030c 	add.w	r3, r7, #12
 80069ba:	4611      	mov	r1, r2
 80069bc:	4618      	mov	r0, r3
 80069be:	f000 feb9 	bl	8007734 <xTaskCheckForTimeOut>
 80069c2:	4603      	mov	r3, r0
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d132      	bne.n	8006a2e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80069c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80069ca:	f000 f9d2 	bl	8006d72 <prvIsQueueEmpty>
 80069ce:	4603      	mov	r3, r0
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d026      	beq.n	8006a22 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80069d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d109      	bne.n	80069f0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80069dc:	f7fe ff94 	bl	8005908 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80069e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069e2:	689b      	ldr	r3, [r3, #8]
 80069e4:	4618      	mov	r0, r3
 80069e6:	f001 f807 	bl	80079f8 <xTaskPriorityInherit>
 80069ea:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80069ec:	f7fe ffbe 	bl	800596c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80069f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069f2:	3324      	adds	r3, #36	; 0x24
 80069f4:	683a      	ldr	r2, [r7, #0]
 80069f6:	4611      	mov	r1, r2
 80069f8:	4618      	mov	r0, r3
 80069fa:	f000 fdfb 	bl	80075f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80069fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006a00:	f000 f965 	bl	8006cce <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006a04:	f000 fc20 	bl	8007248 <xTaskResumeAll>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	f47f af67 	bne.w	80068de <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8006a10:	4b18      	ldr	r3, [pc, #96]	; (8006a74 <xQueueSemaphoreTake+0x21c>)
 8006a12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a16:	601a      	str	r2, [r3, #0]
 8006a18:	f3bf 8f4f 	dsb	sy
 8006a1c:	f3bf 8f6f 	isb	sy
 8006a20:	e75d      	b.n	80068de <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006a22:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006a24:	f000 f953 	bl	8006cce <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006a28:	f000 fc0e 	bl	8007248 <xTaskResumeAll>
 8006a2c:	e757      	b.n	80068de <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006a2e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006a30:	f000 f94d 	bl	8006cce <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006a34:	f000 fc08 	bl	8007248 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006a38:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006a3a:	f000 f99a 	bl	8006d72 <prvIsQueueEmpty>
 8006a3e:	4603      	mov	r3, r0
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	f43f af4c 	beq.w	80068de <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d00d      	beq.n	8006a68 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8006a4c:	f7fe ff5c 	bl	8005908 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006a50:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006a52:	f000 f894 	bl	8006b7e <prvGetDisinheritPriorityAfterTimeout>
 8006a56:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a5a:	689b      	ldr	r3, [r3, #8]
 8006a5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006a5e:	4618      	mov	r0, r3
 8006a60:	f001 f8d2 	bl	8007c08 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006a64:	f7fe ff82 	bl	800596c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006a68:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	3738      	adds	r7, #56	; 0x38
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}
 8006a72:	bf00      	nop
 8006a74:	e000ed04 	.word	0xe000ed04

08006a78 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b08e      	sub	sp, #56	; 0x38
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	60f8      	str	r0, [r7, #12]
 8006a80:	60b9      	str	r1, [r7, #8]
 8006a82:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d10b      	bne.n	8006aa6 <xQueueReceiveFromISR+0x2e>
 8006a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a92:	b672      	cpsid	i
 8006a94:	f383 8811 	msr	BASEPRI, r3
 8006a98:	f3bf 8f6f 	isb	sy
 8006a9c:	f3bf 8f4f 	dsb	sy
 8006aa0:	b662      	cpsie	i
 8006aa2:	623b      	str	r3, [r7, #32]
 8006aa4:	e7fe      	b.n	8006aa4 <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d103      	bne.n	8006ab4 <xQueueReceiveFromISR+0x3c>
 8006aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d101      	bne.n	8006ab8 <xQueueReceiveFromISR+0x40>
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	e000      	b.n	8006aba <xQueueReceiveFromISR+0x42>
 8006ab8:	2300      	movs	r3, #0
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d10b      	bne.n	8006ad6 <xQueueReceiveFromISR+0x5e>
 8006abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ac2:	b672      	cpsid	i
 8006ac4:	f383 8811 	msr	BASEPRI, r3
 8006ac8:	f3bf 8f6f 	isb	sy
 8006acc:	f3bf 8f4f 	dsb	sy
 8006ad0:	b662      	cpsie	i
 8006ad2:	61fb      	str	r3, [r7, #28]
 8006ad4:	e7fe      	b.n	8006ad4 <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006ad6:	f7fe fff7 	bl	8005ac8 <vPortValidateInterruptPriority>
	__asm volatile
 8006ada:	f3ef 8211 	mrs	r2, BASEPRI
 8006ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ae2:	b672      	cpsid	i
 8006ae4:	f383 8811 	msr	BASEPRI, r3
 8006ae8:	f3bf 8f6f 	isb	sy
 8006aec:	f3bf 8f4f 	dsb	sy
 8006af0:	b662      	cpsie	i
 8006af2:	61ba      	str	r2, [r7, #24]
 8006af4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006af6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006af8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006afe:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d02f      	beq.n	8006b66 <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b08:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006b0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006b10:	68b9      	ldr	r1, [r7, #8]
 8006b12:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b14:	f000 f8b5 	bl	8006c82 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b1a:	1e5a      	subs	r2, r3, #1
 8006b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b1e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006b20:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b28:	d112      	bne.n	8006b50 <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b2c:	691b      	ldr	r3, [r3, #16]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d016      	beq.n	8006b60 <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b34:	3310      	adds	r3, #16
 8006b36:	4618      	mov	r0, r3
 8006b38:	f000 fd82 	bl	8007640 <xTaskRemoveFromEventList>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d00e      	beq.n	8006b60 <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d00b      	beq.n	8006b60 <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	601a      	str	r2, [r3, #0]
 8006b4e:	e007      	b.n	8006b60 <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006b50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b54:	3301      	adds	r3, #1
 8006b56:	b2db      	uxtb	r3, r3
 8006b58:	b25a      	sxtb	r2, r3
 8006b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006b60:	2301      	movs	r3, #1
 8006b62:	637b      	str	r3, [r7, #52]	; 0x34
 8006b64:	e001      	b.n	8006b6a <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 8006b66:	2300      	movs	r3, #0
 8006b68:	637b      	str	r3, [r7, #52]	; 0x34
 8006b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b6c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006b74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3738      	adds	r7, #56	; 0x38
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}

08006b7e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006b7e:	b480      	push	{r7}
 8006b80:	b085      	sub	sp, #20
 8006b82:	af00      	add	r7, sp, #0
 8006b84:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d006      	beq.n	8006b9c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f1c3 0307 	rsb	r3, r3, #7
 8006b98:	60fb      	str	r3, [r7, #12]
 8006b9a:	e001      	b.n	8006ba0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
	}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	3714      	adds	r7, #20
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bac:	4770      	bx	lr

08006bae <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006bae:	b580      	push	{r7, lr}
 8006bb0:	b086      	sub	sp, #24
 8006bb2:	af00      	add	r7, sp, #0
 8006bb4:	60f8      	str	r0, [r7, #12]
 8006bb6:	60b9      	str	r1, [r7, #8]
 8006bb8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bc2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d10d      	bne.n	8006be8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d14d      	bne.n	8006c70 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	689b      	ldr	r3, [r3, #8]
 8006bd8:	4618      	mov	r0, r3
 8006bda:	f000 ff8d 	bl	8007af8 <xTaskPriorityDisinherit>
 8006bde:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	2200      	movs	r2, #0
 8006be4:	609a      	str	r2, [r3, #8]
 8006be6:	e043      	b.n	8006c70 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d119      	bne.n	8006c22 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	6858      	ldr	r0, [r3, #4]
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bf6:	461a      	mov	r2, r3
 8006bf8:	68b9      	ldr	r1, [r7, #8]
 8006bfa:	f010 fcb2 	bl	8017562 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	685a      	ldr	r2, [r3, #4]
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c06:	441a      	add	r2, r3
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	685a      	ldr	r2, [r3, #4]
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	689b      	ldr	r3, [r3, #8]
 8006c14:	429a      	cmp	r2, r3
 8006c16:	d32b      	bcc.n	8006c70 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681a      	ldr	r2, [r3, #0]
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	605a      	str	r2, [r3, #4]
 8006c20:	e026      	b.n	8006c70 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	68d8      	ldr	r0, [r3, #12]
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c2a:	461a      	mov	r2, r3
 8006c2c:	68b9      	ldr	r1, [r7, #8]
 8006c2e:	f010 fc98 	bl	8017562 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	68da      	ldr	r2, [r3, #12]
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c3a:	425b      	negs	r3, r3
 8006c3c:	441a      	add	r2, r3
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	68da      	ldr	r2, [r3, #12]
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	429a      	cmp	r2, r3
 8006c4c:	d207      	bcs.n	8006c5e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	689a      	ldr	r2, [r3, #8]
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c56:	425b      	negs	r3, r3
 8006c58:	441a      	add	r2, r3
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2b02      	cmp	r3, #2
 8006c62:	d105      	bne.n	8006c70 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d002      	beq.n	8006c70 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	3b01      	subs	r3, #1
 8006c6e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	1c5a      	adds	r2, r3, #1
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006c78:	697b      	ldr	r3, [r7, #20]
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	3718      	adds	r7, #24
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}

08006c82 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006c82:	b580      	push	{r7, lr}
 8006c84:	b082      	sub	sp, #8
 8006c86:	af00      	add	r7, sp, #0
 8006c88:	6078      	str	r0, [r7, #4]
 8006c8a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d018      	beq.n	8006cc6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	68da      	ldr	r2, [r3, #12]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c9c:	441a      	add	r2, r3
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	68da      	ldr	r2, [r3, #12]
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	689b      	ldr	r3, [r3, #8]
 8006caa:	429a      	cmp	r2, r3
 8006cac:	d303      	bcc.n	8006cb6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681a      	ldr	r2, [r3, #0]
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	68d9      	ldr	r1, [r3, #12]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cbe:	461a      	mov	r2, r3
 8006cc0:	6838      	ldr	r0, [r7, #0]
 8006cc2:	f010 fc4e 	bl	8017562 <memcpy>
	}
}
 8006cc6:	bf00      	nop
 8006cc8:	3708      	adds	r7, #8
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}

08006cce <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006cce:	b580      	push	{r7, lr}
 8006cd0:	b084      	sub	sp, #16
 8006cd2:	af00      	add	r7, sp, #0
 8006cd4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006cd6:	f7fe fe17 	bl	8005908 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ce0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006ce2:	e011      	b.n	8006d08 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d012      	beq.n	8006d12 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	3324      	adds	r3, #36	; 0x24
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	f000 fca5 	bl	8007640 <xTaskRemoveFromEventList>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d001      	beq.n	8006d00 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006cfc:	f000 fd7e 	bl	80077fc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006d00:	7bfb      	ldrb	r3, [r7, #15]
 8006d02:	3b01      	subs	r3, #1
 8006d04:	b2db      	uxtb	r3, r3
 8006d06:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006d08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	dce9      	bgt.n	8006ce4 <prvUnlockQueue+0x16>
 8006d10:	e000      	b.n	8006d14 <prvUnlockQueue+0x46>
					break;
 8006d12:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	22ff      	movs	r2, #255	; 0xff
 8006d18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006d1c:	f7fe fe26 	bl	800596c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006d20:	f7fe fdf2 	bl	8005908 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006d2a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006d2c:	e011      	b.n	8006d52 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	691b      	ldr	r3, [r3, #16]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d012      	beq.n	8006d5c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	3310      	adds	r3, #16
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	f000 fc80 	bl	8007640 <xTaskRemoveFromEventList>
 8006d40:	4603      	mov	r3, r0
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d001      	beq.n	8006d4a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006d46:	f000 fd59 	bl	80077fc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006d4a:	7bbb      	ldrb	r3, [r7, #14]
 8006d4c:	3b01      	subs	r3, #1
 8006d4e:	b2db      	uxtb	r3, r3
 8006d50:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006d52:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	dce9      	bgt.n	8006d2e <prvUnlockQueue+0x60>
 8006d5a:	e000      	b.n	8006d5e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006d5c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	22ff      	movs	r2, #255	; 0xff
 8006d62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006d66:	f7fe fe01 	bl	800596c <vPortExitCritical>
}
 8006d6a:	bf00      	nop
 8006d6c:	3710      	adds	r7, #16
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}

08006d72 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006d72:	b580      	push	{r7, lr}
 8006d74:	b084      	sub	sp, #16
 8006d76:	af00      	add	r7, sp, #0
 8006d78:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006d7a:	f7fe fdc5 	bl	8005908 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d102      	bne.n	8006d8c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006d86:	2301      	movs	r3, #1
 8006d88:	60fb      	str	r3, [r7, #12]
 8006d8a:	e001      	b.n	8006d90 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006d90:	f7fe fdec 	bl	800596c <vPortExitCritical>

	return xReturn;
 8006d94:	68fb      	ldr	r3, [r7, #12]
}
 8006d96:	4618      	mov	r0, r3
 8006d98:	3710      	adds	r7, #16
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}

08006d9e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006d9e:	b580      	push	{r7, lr}
 8006da0:	b084      	sub	sp, #16
 8006da2:	af00      	add	r7, sp, #0
 8006da4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006da6:	f7fe fdaf 	bl	8005908 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006db2:	429a      	cmp	r2, r3
 8006db4:	d102      	bne.n	8006dbc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006db6:	2301      	movs	r3, #1
 8006db8:	60fb      	str	r3, [r7, #12]
 8006dba:	e001      	b.n	8006dc0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006dc0:	f7fe fdd4 	bl	800596c <vPortExitCritical>

	return xReturn;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
}
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	3710      	adds	r7, #16
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}

08006dce <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006dce:	b580      	push	{r7, lr}
 8006dd0:	b08e      	sub	sp, #56	; 0x38
 8006dd2:	af04      	add	r7, sp, #16
 8006dd4:	60f8      	str	r0, [r7, #12]
 8006dd6:	60b9      	str	r1, [r7, #8]
 8006dd8:	607a      	str	r2, [r7, #4]
 8006dda:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006ddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d10b      	bne.n	8006dfa <xTaskCreateStatic+0x2c>
	__asm volatile
 8006de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006de6:	b672      	cpsid	i
 8006de8:	f383 8811 	msr	BASEPRI, r3
 8006dec:	f3bf 8f6f 	isb	sy
 8006df0:	f3bf 8f4f 	dsb	sy
 8006df4:	b662      	cpsie	i
 8006df6:	623b      	str	r3, [r7, #32]
 8006df8:	e7fe      	b.n	8006df8 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 8006dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d10b      	bne.n	8006e18 <xTaskCreateStatic+0x4a>
 8006e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e04:	b672      	cpsid	i
 8006e06:	f383 8811 	msr	BASEPRI, r3
 8006e0a:	f3bf 8f6f 	isb	sy
 8006e0e:	f3bf 8f4f 	dsb	sy
 8006e12:	b662      	cpsie	i
 8006e14:	61fb      	str	r3, [r7, #28]
 8006e16:	e7fe      	b.n	8006e16 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006e18:	2354      	movs	r3, #84	; 0x54
 8006e1a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	2b54      	cmp	r3, #84	; 0x54
 8006e20:	d00b      	beq.n	8006e3a <xTaskCreateStatic+0x6c>
 8006e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e26:	b672      	cpsid	i
 8006e28:	f383 8811 	msr	BASEPRI, r3
 8006e2c:	f3bf 8f6f 	isb	sy
 8006e30:	f3bf 8f4f 	dsb	sy
 8006e34:	b662      	cpsie	i
 8006e36:	61bb      	str	r3, [r7, #24]
 8006e38:	e7fe      	b.n	8006e38 <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006e3a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d01e      	beq.n	8006e80 <xTaskCreateStatic+0xb2>
 8006e42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d01b      	beq.n	8006e80 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e4a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e50:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e54:	2202      	movs	r2, #2
 8006e56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	9303      	str	r3, [sp, #12]
 8006e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e60:	9302      	str	r3, [sp, #8]
 8006e62:	f107 0314 	add.w	r3, r7, #20
 8006e66:	9301      	str	r3, [sp, #4]
 8006e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e6a:	9300      	str	r3, [sp, #0]
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	687a      	ldr	r2, [r7, #4]
 8006e70:	68b9      	ldr	r1, [r7, #8]
 8006e72:	68f8      	ldr	r0, [r7, #12]
 8006e74:	f000 f850 	bl	8006f18 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006e78:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006e7a:	f000 f8d5 	bl	8007028 <prvAddNewTaskToReadyList>
 8006e7e:	e001      	b.n	8006e84 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006e80:	2300      	movs	r3, #0
 8006e82:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006e84:	697b      	ldr	r3, [r7, #20]
	}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3728      	adds	r7, #40	; 0x28
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}

08006e8e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006e8e:	b580      	push	{r7, lr}
 8006e90:	b08c      	sub	sp, #48	; 0x30
 8006e92:	af04      	add	r7, sp, #16
 8006e94:	60f8      	str	r0, [r7, #12]
 8006e96:	60b9      	str	r1, [r7, #8]
 8006e98:	603b      	str	r3, [r7, #0]
 8006e9a:	4613      	mov	r3, r2
 8006e9c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006e9e:	88fb      	ldrh	r3, [r7, #6]
 8006ea0:	009b      	lsls	r3, r3, #2
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	f7fe fe52 	bl	8005b4c <pvPortMalloc>
 8006ea8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006eaa:	697b      	ldr	r3, [r7, #20]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d00e      	beq.n	8006ece <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006eb0:	2054      	movs	r0, #84	; 0x54
 8006eb2:	f7fe fe4b 	bl	8005b4c <pvPortMalloc>
 8006eb6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006eb8:	69fb      	ldr	r3, [r7, #28]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d003      	beq.n	8006ec6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006ebe:	69fb      	ldr	r3, [r7, #28]
 8006ec0:	697a      	ldr	r2, [r7, #20]
 8006ec2:	631a      	str	r2, [r3, #48]	; 0x30
 8006ec4:	e005      	b.n	8006ed2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006ec6:	6978      	ldr	r0, [r7, #20]
 8006ec8:	f7fe ff08 	bl	8005cdc <vPortFree>
 8006ecc:	e001      	b.n	8006ed2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006ed2:	69fb      	ldr	r3, [r7, #28]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d017      	beq.n	8006f08 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006ed8:	69fb      	ldr	r3, [r7, #28]
 8006eda:	2200      	movs	r2, #0
 8006edc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006ee0:	88fa      	ldrh	r2, [r7, #6]
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	9303      	str	r3, [sp, #12]
 8006ee6:	69fb      	ldr	r3, [r7, #28]
 8006ee8:	9302      	str	r3, [sp, #8]
 8006eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eec:	9301      	str	r3, [sp, #4]
 8006eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ef0:	9300      	str	r3, [sp, #0]
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	68b9      	ldr	r1, [r7, #8]
 8006ef6:	68f8      	ldr	r0, [r7, #12]
 8006ef8:	f000 f80e 	bl	8006f18 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006efc:	69f8      	ldr	r0, [r7, #28]
 8006efe:	f000 f893 	bl	8007028 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006f02:	2301      	movs	r3, #1
 8006f04:	61bb      	str	r3, [r7, #24]
 8006f06:	e002      	b.n	8006f0e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006f08:	f04f 33ff 	mov.w	r3, #4294967295
 8006f0c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006f0e:	69bb      	ldr	r3, [r7, #24]
	}
 8006f10:	4618      	mov	r0, r3
 8006f12:	3720      	adds	r7, #32
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}

08006f18 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b088      	sub	sp, #32
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	60f8      	str	r0, [r7, #12]
 8006f20:	60b9      	str	r1, [r7, #8]
 8006f22:	607a      	str	r2, [r7, #4]
 8006f24:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f2a:	6879      	ldr	r1, [r7, #4]
 8006f2c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8006f30:	440b      	add	r3, r1
 8006f32:	009b      	lsls	r3, r3, #2
 8006f34:	4413      	add	r3, r2
 8006f36:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006f38:	69bb      	ldr	r3, [r7, #24]
 8006f3a:	f023 0307 	bic.w	r3, r3, #7
 8006f3e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006f40:	69bb      	ldr	r3, [r7, #24]
 8006f42:	f003 0307 	and.w	r3, r3, #7
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d00b      	beq.n	8006f62 <prvInitialiseNewTask+0x4a>
 8006f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f4e:	b672      	cpsid	i
 8006f50:	f383 8811 	msr	BASEPRI, r3
 8006f54:	f3bf 8f6f 	isb	sy
 8006f58:	f3bf 8f4f 	dsb	sy
 8006f5c:	b662      	cpsie	i
 8006f5e:	617b      	str	r3, [r7, #20]
 8006f60:	e7fe      	b.n	8006f60 <prvInitialiseNewTask+0x48>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d01f      	beq.n	8006fa8 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006f68:	2300      	movs	r3, #0
 8006f6a:	61fb      	str	r3, [r7, #28]
 8006f6c:	e012      	b.n	8006f94 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006f6e:	68ba      	ldr	r2, [r7, #8]
 8006f70:	69fb      	ldr	r3, [r7, #28]
 8006f72:	4413      	add	r3, r2
 8006f74:	7819      	ldrb	r1, [r3, #0]
 8006f76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f78:	69fb      	ldr	r3, [r7, #28]
 8006f7a:	4413      	add	r3, r2
 8006f7c:	3334      	adds	r3, #52	; 0x34
 8006f7e:	460a      	mov	r2, r1
 8006f80:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006f82:	68ba      	ldr	r2, [r7, #8]
 8006f84:	69fb      	ldr	r3, [r7, #28]
 8006f86:	4413      	add	r3, r2
 8006f88:	781b      	ldrb	r3, [r3, #0]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d006      	beq.n	8006f9c <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006f8e:	69fb      	ldr	r3, [r7, #28]
 8006f90:	3301      	adds	r3, #1
 8006f92:	61fb      	str	r3, [r7, #28]
 8006f94:	69fb      	ldr	r3, [r7, #28]
 8006f96:	2b0f      	cmp	r3, #15
 8006f98:	d9e9      	bls.n	8006f6e <prvInitialiseNewTask+0x56>
 8006f9a:	e000      	b.n	8006f9e <prvInitialiseNewTask+0x86>
			{
				break;
 8006f9c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006fa6:	e003      	b.n	8006fb0 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006faa:	2200      	movs	r2, #0
 8006fac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fb2:	2b06      	cmp	r3, #6
 8006fb4:	d901      	bls.n	8006fba <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006fb6:	2306      	movs	r3, #6
 8006fb8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006fbe:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006fc4:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fc8:	2200      	movs	r2, #0
 8006fca:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fce:	3304      	adds	r3, #4
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	f7fe faff 	bl	80055d4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fd8:	3318      	adds	r3, #24
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f7fe fafa 	bl	80055d4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fe2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006fe4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fe8:	f1c3 0207 	rsb	r2, r3, #7
 8006fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fee:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ff2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ff4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ffe:	2200      	movs	r2, #0
 8007000:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007004:	683a      	ldr	r2, [r7, #0]
 8007006:	68f9      	ldr	r1, [r7, #12]
 8007008:	69b8      	ldr	r0, [r7, #24]
 800700a:	f7fe fb77 	bl	80056fc <pxPortInitialiseStack>
 800700e:	4602      	mov	r2, r0
 8007010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007012:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007016:	2b00      	cmp	r3, #0
 8007018:	d002      	beq.n	8007020 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800701a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800701c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800701e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007020:	bf00      	nop
 8007022:	3720      	adds	r7, #32
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}

08007028 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b082      	sub	sp, #8
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007030:	f7fe fc6a 	bl	8005908 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007034:	4b2a      	ldr	r3, [pc, #168]	; (80070e0 <prvAddNewTaskToReadyList+0xb8>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	3301      	adds	r3, #1
 800703a:	4a29      	ldr	r2, [pc, #164]	; (80070e0 <prvAddNewTaskToReadyList+0xb8>)
 800703c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800703e:	4b29      	ldr	r3, [pc, #164]	; (80070e4 <prvAddNewTaskToReadyList+0xbc>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d109      	bne.n	800705a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007046:	4a27      	ldr	r2, [pc, #156]	; (80070e4 <prvAddNewTaskToReadyList+0xbc>)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800704c:	4b24      	ldr	r3, [pc, #144]	; (80070e0 <prvAddNewTaskToReadyList+0xb8>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	2b01      	cmp	r3, #1
 8007052:	d110      	bne.n	8007076 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007054:	f000 fbf6 	bl	8007844 <prvInitialiseTaskLists>
 8007058:	e00d      	b.n	8007076 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800705a:	4b23      	ldr	r3, [pc, #140]	; (80070e8 <prvAddNewTaskToReadyList+0xc0>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d109      	bne.n	8007076 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007062:	4b20      	ldr	r3, [pc, #128]	; (80070e4 <prvAddNewTaskToReadyList+0xbc>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800706c:	429a      	cmp	r2, r3
 800706e:	d802      	bhi.n	8007076 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007070:	4a1c      	ldr	r2, [pc, #112]	; (80070e4 <prvAddNewTaskToReadyList+0xbc>)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007076:	4b1d      	ldr	r3, [pc, #116]	; (80070ec <prvAddNewTaskToReadyList+0xc4>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	3301      	adds	r3, #1
 800707c:	4a1b      	ldr	r2, [pc, #108]	; (80070ec <prvAddNewTaskToReadyList+0xc4>)
 800707e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007084:	2201      	movs	r2, #1
 8007086:	409a      	lsls	r2, r3
 8007088:	4b19      	ldr	r3, [pc, #100]	; (80070f0 <prvAddNewTaskToReadyList+0xc8>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4313      	orrs	r3, r2
 800708e:	4a18      	ldr	r2, [pc, #96]	; (80070f0 <prvAddNewTaskToReadyList+0xc8>)
 8007090:	6013      	str	r3, [r2, #0]
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007096:	4613      	mov	r3, r2
 8007098:	009b      	lsls	r3, r3, #2
 800709a:	4413      	add	r3, r2
 800709c:	009b      	lsls	r3, r3, #2
 800709e:	4a15      	ldr	r2, [pc, #84]	; (80070f4 <prvAddNewTaskToReadyList+0xcc>)
 80070a0:	441a      	add	r2, r3
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	3304      	adds	r3, #4
 80070a6:	4619      	mov	r1, r3
 80070a8:	4610      	mov	r0, r2
 80070aa:	f7fe faa0 	bl	80055ee <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80070ae:	f7fe fc5d 	bl	800596c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80070b2:	4b0d      	ldr	r3, [pc, #52]	; (80070e8 <prvAddNewTaskToReadyList+0xc0>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d00e      	beq.n	80070d8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80070ba:	4b0a      	ldr	r3, [pc, #40]	; (80070e4 <prvAddNewTaskToReadyList+0xbc>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070c4:	429a      	cmp	r2, r3
 80070c6:	d207      	bcs.n	80070d8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80070c8:	4b0b      	ldr	r3, [pc, #44]	; (80070f8 <prvAddNewTaskToReadyList+0xd0>)
 80070ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070ce:	601a      	str	r2, [r3, #0]
 80070d0:	f3bf 8f4f 	dsb	sy
 80070d4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80070d8:	bf00      	nop
 80070da:	3708      	adds	r7, #8
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}
 80070e0:	20003f28 	.word	0x20003f28
 80070e4:	20003e28 	.word	0x20003e28
 80070e8:	20003f34 	.word	0x20003f34
 80070ec:	20003f44 	.word	0x20003f44
 80070f0:	20003f30 	.word	0x20003f30
 80070f4:	20003e2c 	.word	0x20003e2c
 80070f8:	e000ed04 	.word	0xe000ed04

080070fc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b084      	sub	sp, #16
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007104:	2300      	movs	r3, #0
 8007106:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d018      	beq.n	8007140 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800710e:	4b14      	ldr	r3, [pc, #80]	; (8007160 <vTaskDelay+0x64>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d00b      	beq.n	800712e <vTaskDelay+0x32>
 8007116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800711a:	b672      	cpsid	i
 800711c:	f383 8811 	msr	BASEPRI, r3
 8007120:	f3bf 8f6f 	isb	sy
 8007124:	f3bf 8f4f 	dsb	sy
 8007128:	b662      	cpsie	i
 800712a:	60bb      	str	r3, [r7, #8]
 800712c:	e7fe      	b.n	800712c <vTaskDelay+0x30>
			vTaskSuspendAll();
 800712e:	f000 f87d 	bl	800722c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007132:	2100      	movs	r1, #0
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f000 fe17 	bl	8007d68 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800713a:	f000 f885 	bl	8007248 <xTaskResumeAll>
 800713e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d107      	bne.n	8007156 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007146:	4b07      	ldr	r3, [pc, #28]	; (8007164 <vTaskDelay+0x68>)
 8007148:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800714c:	601a      	str	r2, [r3, #0]
 800714e:	f3bf 8f4f 	dsb	sy
 8007152:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007156:	bf00      	nop
 8007158:	3710      	adds	r7, #16
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}
 800715e:	bf00      	nop
 8007160:	20003f50 	.word	0x20003f50
 8007164:	e000ed04 	.word	0xe000ed04

08007168 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b08a      	sub	sp, #40	; 0x28
 800716c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800716e:	2300      	movs	r3, #0
 8007170:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007172:	2300      	movs	r3, #0
 8007174:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007176:	463a      	mov	r2, r7
 8007178:	1d39      	adds	r1, r7, #4
 800717a:	f107 0308 	add.w	r3, r7, #8
 800717e:	4618      	mov	r0, r3
 8007180:	f00e fd6e 	bl	8015c60 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007184:	6839      	ldr	r1, [r7, #0]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	68ba      	ldr	r2, [r7, #8]
 800718a:	9202      	str	r2, [sp, #8]
 800718c:	9301      	str	r3, [sp, #4]
 800718e:	2300      	movs	r3, #0
 8007190:	9300      	str	r3, [sp, #0]
 8007192:	2300      	movs	r3, #0
 8007194:	460a      	mov	r2, r1
 8007196:	491f      	ldr	r1, [pc, #124]	; (8007214 <vTaskStartScheduler+0xac>)
 8007198:	481f      	ldr	r0, [pc, #124]	; (8007218 <vTaskStartScheduler+0xb0>)
 800719a:	f7ff fe18 	bl	8006dce <xTaskCreateStatic>
 800719e:	4602      	mov	r2, r0
 80071a0:	4b1e      	ldr	r3, [pc, #120]	; (800721c <vTaskStartScheduler+0xb4>)
 80071a2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80071a4:	4b1d      	ldr	r3, [pc, #116]	; (800721c <vTaskStartScheduler+0xb4>)
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d002      	beq.n	80071b2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80071ac:	2301      	movs	r3, #1
 80071ae:	617b      	str	r3, [r7, #20]
 80071b0:	e001      	b.n	80071b6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80071b2:	2300      	movs	r3, #0
 80071b4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	2b01      	cmp	r3, #1
 80071ba:	d117      	bne.n	80071ec <vTaskStartScheduler+0x84>
 80071bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071c0:	b672      	cpsid	i
 80071c2:	f383 8811 	msr	BASEPRI, r3
 80071c6:	f3bf 8f6f 	isb	sy
 80071ca:	f3bf 8f4f 	dsb	sy
 80071ce:	b662      	cpsie	i
 80071d0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80071d2:	4b13      	ldr	r3, [pc, #76]	; (8007220 <vTaskStartScheduler+0xb8>)
 80071d4:	f04f 32ff 	mov.w	r2, #4294967295
 80071d8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80071da:	4b12      	ldr	r3, [pc, #72]	; (8007224 <vTaskStartScheduler+0xbc>)
 80071dc:	2201      	movs	r2, #1
 80071de:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80071e0:	4b11      	ldr	r3, [pc, #68]	; (8007228 <vTaskStartScheduler+0xc0>)
 80071e2:	2200      	movs	r2, #0
 80071e4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80071e6:	f7fe fb13 	bl	8005810 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80071ea:	e00f      	b.n	800720c <vTaskStartScheduler+0xa4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80071ec:	697b      	ldr	r3, [r7, #20]
 80071ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071f2:	d10b      	bne.n	800720c <vTaskStartScheduler+0xa4>
 80071f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071f8:	b672      	cpsid	i
 80071fa:	f383 8811 	msr	BASEPRI, r3
 80071fe:	f3bf 8f6f 	isb	sy
 8007202:	f3bf 8f4f 	dsb	sy
 8007206:	b662      	cpsie	i
 8007208:	60fb      	str	r3, [r7, #12]
 800720a:	e7fe      	b.n	800720a <vTaskStartScheduler+0xa2>
}
 800720c:	bf00      	nop
 800720e:	3718      	adds	r7, #24
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}
 8007214:	08018990 	.word	0x08018990
 8007218:	08007815 	.word	0x08007815
 800721c:	20003f4c 	.word	0x20003f4c
 8007220:	20003f48 	.word	0x20003f48
 8007224:	20003f34 	.word	0x20003f34
 8007228:	20003f2c 	.word	0x20003f2c

0800722c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800722c:	b480      	push	{r7}
 800722e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007230:	4b04      	ldr	r3, [pc, #16]	; (8007244 <vTaskSuspendAll+0x18>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	3301      	adds	r3, #1
 8007236:	4a03      	ldr	r2, [pc, #12]	; (8007244 <vTaskSuspendAll+0x18>)
 8007238:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800723a:	bf00      	nop
 800723c:	46bd      	mov	sp, r7
 800723e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007242:	4770      	bx	lr
 8007244:	20003f50 	.word	0x20003f50

08007248 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b084      	sub	sp, #16
 800724c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800724e:	2300      	movs	r3, #0
 8007250:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007252:	2300      	movs	r3, #0
 8007254:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007256:	4b42      	ldr	r3, [pc, #264]	; (8007360 <xTaskResumeAll+0x118>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d10b      	bne.n	8007276 <xTaskResumeAll+0x2e>
 800725e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007262:	b672      	cpsid	i
 8007264:	f383 8811 	msr	BASEPRI, r3
 8007268:	f3bf 8f6f 	isb	sy
 800726c:	f3bf 8f4f 	dsb	sy
 8007270:	b662      	cpsie	i
 8007272:	603b      	str	r3, [r7, #0]
 8007274:	e7fe      	b.n	8007274 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007276:	f7fe fb47 	bl	8005908 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800727a:	4b39      	ldr	r3, [pc, #228]	; (8007360 <xTaskResumeAll+0x118>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	3b01      	subs	r3, #1
 8007280:	4a37      	ldr	r2, [pc, #220]	; (8007360 <xTaskResumeAll+0x118>)
 8007282:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007284:	4b36      	ldr	r3, [pc, #216]	; (8007360 <xTaskResumeAll+0x118>)
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d161      	bne.n	8007350 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800728c:	4b35      	ldr	r3, [pc, #212]	; (8007364 <xTaskResumeAll+0x11c>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d05d      	beq.n	8007350 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007294:	e02e      	b.n	80072f4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007296:	4b34      	ldr	r3, [pc, #208]	; (8007368 <xTaskResumeAll+0x120>)
 8007298:	68db      	ldr	r3, [r3, #12]
 800729a:	68db      	ldr	r3, [r3, #12]
 800729c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	3318      	adds	r3, #24
 80072a2:	4618      	mov	r0, r3
 80072a4:	f7fe fa00 	bl	80056a8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	3304      	adds	r3, #4
 80072ac:	4618      	mov	r0, r3
 80072ae:	f7fe f9fb 	bl	80056a8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072b6:	2201      	movs	r2, #1
 80072b8:	409a      	lsls	r2, r3
 80072ba:	4b2c      	ldr	r3, [pc, #176]	; (800736c <xTaskResumeAll+0x124>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4313      	orrs	r3, r2
 80072c0:	4a2a      	ldr	r2, [pc, #168]	; (800736c <xTaskResumeAll+0x124>)
 80072c2:	6013      	str	r3, [r2, #0]
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072c8:	4613      	mov	r3, r2
 80072ca:	009b      	lsls	r3, r3, #2
 80072cc:	4413      	add	r3, r2
 80072ce:	009b      	lsls	r3, r3, #2
 80072d0:	4a27      	ldr	r2, [pc, #156]	; (8007370 <xTaskResumeAll+0x128>)
 80072d2:	441a      	add	r2, r3
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	3304      	adds	r3, #4
 80072d8:	4619      	mov	r1, r3
 80072da:	4610      	mov	r0, r2
 80072dc:	f7fe f987 	bl	80055ee <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072e4:	4b23      	ldr	r3, [pc, #140]	; (8007374 <xTaskResumeAll+0x12c>)
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072ea:	429a      	cmp	r2, r3
 80072ec:	d302      	bcc.n	80072f4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80072ee:	4b22      	ldr	r3, [pc, #136]	; (8007378 <xTaskResumeAll+0x130>)
 80072f0:	2201      	movs	r2, #1
 80072f2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80072f4:	4b1c      	ldr	r3, [pc, #112]	; (8007368 <xTaskResumeAll+0x120>)
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d1cc      	bne.n	8007296 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d001      	beq.n	8007306 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007302:	f000 fb3b 	bl	800797c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007306:	4b1d      	ldr	r3, [pc, #116]	; (800737c <xTaskResumeAll+0x134>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d010      	beq.n	8007334 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007312:	f000 f859 	bl	80073c8 <xTaskIncrementTick>
 8007316:	4603      	mov	r3, r0
 8007318:	2b00      	cmp	r3, #0
 800731a:	d002      	beq.n	8007322 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800731c:	4b16      	ldr	r3, [pc, #88]	; (8007378 <xTaskResumeAll+0x130>)
 800731e:	2201      	movs	r2, #1
 8007320:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	3b01      	subs	r3, #1
 8007326:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d1f1      	bne.n	8007312 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800732e:	4b13      	ldr	r3, [pc, #76]	; (800737c <xTaskResumeAll+0x134>)
 8007330:	2200      	movs	r2, #0
 8007332:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007334:	4b10      	ldr	r3, [pc, #64]	; (8007378 <xTaskResumeAll+0x130>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d009      	beq.n	8007350 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800733c:	2301      	movs	r3, #1
 800733e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007340:	4b0f      	ldr	r3, [pc, #60]	; (8007380 <xTaskResumeAll+0x138>)
 8007342:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007346:	601a      	str	r2, [r3, #0]
 8007348:	f3bf 8f4f 	dsb	sy
 800734c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007350:	f7fe fb0c 	bl	800596c <vPortExitCritical>

	return xAlreadyYielded;
 8007354:	68bb      	ldr	r3, [r7, #8]
}
 8007356:	4618      	mov	r0, r3
 8007358:	3710      	adds	r7, #16
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}
 800735e:	bf00      	nop
 8007360:	20003f50 	.word	0x20003f50
 8007364:	20003f28 	.word	0x20003f28
 8007368:	20003ee8 	.word	0x20003ee8
 800736c:	20003f30 	.word	0x20003f30
 8007370:	20003e2c 	.word	0x20003e2c
 8007374:	20003e28 	.word	0x20003e28
 8007378:	20003f3c 	.word	0x20003f3c
 800737c:	20003f38 	.word	0x20003f38
 8007380:	e000ed04 	.word	0xe000ed04

08007384 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007384:	b480      	push	{r7}
 8007386:	b083      	sub	sp, #12
 8007388:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800738a:	4b05      	ldr	r3, [pc, #20]	; (80073a0 <xTaskGetTickCount+0x1c>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007390:	687b      	ldr	r3, [r7, #4]
}
 8007392:	4618      	mov	r0, r3
 8007394:	370c      	adds	r7, #12
 8007396:	46bd      	mov	sp, r7
 8007398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739c:	4770      	bx	lr
 800739e:	bf00      	nop
 80073a0:	20003f2c 	.word	0x20003f2c

080073a4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b082      	sub	sp, #8
 80073a8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80073aa:	f7fe fb8d 	bl	8005ac8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80073ae:	2300      	movs	r3, #0
 80073b0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80073b2:	4b04      	ldr	r3, [pc, #16]	; (80073c4 <xTaskGetTickCountFromISR+0x20>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80073b8:	683b      	ldr	r3, [r7, #0]
}
 80073ba:	4618      	mov	r0, r3
 80073bc:	3708      	adds	r7, #8
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}
 80073c2:	bf00      	nop
 80073c4:	20003f2c 	.word	0x20003f2c

080073c8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b086      	sub	sp, #24
 80073cc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80073ce:	2300      	movs	r3, #0
 80073d0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80073d2:	4b4f      	ldr	r3, [pc, #316]	; (8007510 <xTaskIncrementTick+0x148>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	f040 8089 	bne.w	80074ee <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80073dc:	4b4d      	ldr	r3, [pc, #308]	; (8007514 <xTaskIncrementTick+0x14c>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	3301      	adds	r3, #1
 80073e2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80073e4:	4a4b      	ldr	r2, [pc, #300]	; (8007514 <xTaskIncrementTick+0x14c>)
 80073e6:	693b      	ldr	r3, [r7, #16]
 80073e8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80073ea:	693b      	ldr	r3, [r7, #16]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d121      	bne.n	8007434 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80073f0:	4b49      	ldr	r3, [pc, #292]	; (8007518 <xTaskIncrementTick+0x150>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d00b      	beq.n	8007412 <xTaskIncrementTick+0x4a>
 80073fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073fe:	b672      	cpsid	i
 8007400:	f383 8811 	msr	BASEPRI, r3
 8007404:	f3bf 8f6f 	isb	sy
 8007408:	f3bf 8f4f 	dsb	sy
 800740c:	b662      	cpsie	i
 800740e:	603b      	str	r3, [r7, #0]
 8007410:	e7fe      	b.n	8007410 <xTaskIncrementTick+0x48>
 8007412:	4b41      	ldr	r3, [pc, #260]	; (8007518 <xTaskIncrementTick+0x150>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	60fb      	str	r3, [r7, #12]
 8007418:	4b40      	ldr	r3, [pc, #256]	; (800751c <xTaskIncrementTick+0x154>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	4a3e      	ldr	r2, [pc, #248]	; (8007518 <xTaskIncrementTick+0x150>)
 800741e:	6013      	str	r3, [r2, #0]
 8007420:	4a3e      	ldr	r2, [pc, #248]	; (800751c <xTaskIncrementTick+0x154>)
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	6013      	str	r3, [r2, #0]
 8007426:	4b3e      	ldr	r3, [pc, #248]	; (8007520 <xTaskIncrementTick+0x158>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	3301      	adds	r3, #1
 800742c:	4a3c      	ldr	r2, [pc, #240]	; (8007520 <xTaskIncrementTick+0x158>)
 800742e:	6013      	str	r3, [r2, #0]
 8007430:	f000 faa4 	bl	800797c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007434:	4b3b      	ldr	r3, [pc, #236]	; (8007524 <xTaskIncrementTick+0x15c>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	693a      	ldr	r2, [r7, #16]
 800743a:	429a      	cmp	r2, r3
 800743c:	d348      	bcc.n	80074d0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800743e:	4b36      	ldr	r3, [pc, #216]	; (8007518 <xTaskIncrementTick+0x150>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d104      	bne.n	8007452 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007448:	4b36      	ldr	r3, [pc, #216]	; (8007524 <xTaskIncrementTick+0x15c>)
 800744a:	f04f 32ff 	mov.w	r2, #4294967295
 800744e:	601a      	str	r2, [r3, #0]
					break;
 8007450:	e03e      	b.n	80074d0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007452:	4b31      	ldr	r3, [pc, #196]	; (8007518 <xTaskIncrementTick+0x150>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	68db      	ldr	r3, [r3, #12]
 8007458:	68db      	ldr	r3, [r3, #12]
 800745a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	685b      	ldr	r3, [r3, #4]
 8007460:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007462:	693a      	ldr	r2, [r7, #16]
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	429a      	cmp	r2, r3
 8007468:	d203      	bcs.n	8007472 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800746a:	4a2e      	ldr	r2, [pc, #184]	; (8007524 <xTaskIncrementTick+0x15c>)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007470:	e02e      	b.n	80074d0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	3304      	adds	r3, #4
 8007476:	4618      	mov	r0, r3
 8007478:	f7fe f916 	bl	80056a8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007480:	2b00      	cmp	r3, #0
 8007482:	d004      	beq.n	800748e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	3318      	adds	r3, #24
 8007488:	4618      	mov	r0, r3
 800748a:	f7fe f90d 	bl	80056a8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007492:	2201      	movs	r2, #1
 8007494:	409a      	lsls	r2, r3
 8007496:	4b24      	ldr	r3, [pc, #144]	; (8007528 <xTaskIncrementTick+0x160>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4313      	orrs	r3, r2
 800749c:	4a22      	ldr	r2, [pc, #136]	; (8007528 <xTaskIncrementTick+0x160>)
 800749e:	6013      	str	r3, [r2, #0]
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074a4:	4613      	mov	r3, r2
 80074a6:	009b      	lsls	r3, r3, #2
 80074a8:	4413      	add	r3, r2
 80074aa:	009b      	lsls	r3, r3, #2
 80074ac:	4a1f      	ldr	r2, [pc, #124]	; (800752c <xTaskIncrementTick+0x164>)
 80074ae:	441a      	add	r2, r3
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	3304      	adds	r3, #4
 80074b4:	4619      	mov	r1, r3
 80074b6:	4610      	mov	r0, r2
 80074b8:	f7fe f899 	bl	80055ee <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074c0:	4b1b      	ldr	r3, [pc, #108]	; (8007530 <xTaskIncrementTick+0x168>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074c6:	429a      	cmp	r2, r3
 80074c8:	d3b9      	bcc.n	800743e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80074ca:	2301      	movs	r3, #1
 80074cc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80074ce:	e7b6      	b.n	800743e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80074d0:	4b17      	ldr	r3, [pc, #92]	; (8007530 <xTaskIncrementTick+0x168>)
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074d6:	4915      	ldr	r1, [pc, #84]	; (800752c <xTaskIncrementTick+0x164>)
 80074d8:	4613      	mov	r3, r2
 80074da:	009b      	lsls	r3, r3, #2
 80074dc:	4413      	add	r3, r2
 80074de:	009b      	lsls	r3, r3, #2
 80074e0:	440b      	add	r3, r1
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	2b01      	cmp	r3, #1
 80074e6:	d907      	bls.n	80074f8 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 80074e8:	2301      	movs	r3, #1
 80074ea:	617b      	str	r3, [r7, #20]
 80074ec:	e004      	b.n	80074f8 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80074ee:	4b11      	ldr	r3, [pc, #68]	; (8007534 <xTaskIncrementTick+0x16c>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	3301      	adds	r3, #1
 80074f4:	4a0f      	ldr	r2, [pc, #60]	; (8007534 <xTaskIncrementTick+0x16c>)
 80074f6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80074f8:	4b0f      	ldr	r3, [pc, #60]	; (8007538 <xTaskIncrementTick+0x170>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d001      	beq.n	8007504 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 8007500:	2301      	movs	r3, #1
 8007502:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007504:	697b      	ldr	r3, [r7, #20]
}
 8007506:	4618      	mov	r0, r3
 8007508:	3718      	adds	r7, #24
 800750a:	46bd      	mov	sp, r7
 800750c:	bd80      	pop	{r7, pc}
 800750e:	bf00      	nop
 8007510:	20003f50 	.word	0x20003f50
 8007514:	20003f2c 	.word	0x20003f2c
 8007518:	20003ee0 	.word	0x20003ee0
 800751c:	20003ee4 	.word	0x20003ee4
 8007520:	20003f40 	.word	0x20003f40
 8007524:	20003f48 	.word	0x20003f48
 8007528:	20003f30 	.word	0x20003f30
 800752c:	20003e2c 	.word	0x20003e2c
 8007530:	20003e28 	.word	0x20003e28
 8007534:	20003f38 	.word	0x20003f38
 8007538:	20003f3c 	.word	0x20003f3c

0800753c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800753c:	b480      	push	{r7}
 800753e:	b087      	sub	sp, #28
 8007540:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007542:	4b27      	ldr	r3, [pc, #156]	; (80075e0 <vTaskSwitchContext+0xa4>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d003      	beq.n	8007552 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800754a:	4b26      	ldr	r3, [pc, #152]	; (80075e4 <vTaskSwitchContext+0xa8>)
 800754c:	2201      	movs	r2, #1
 800754e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007550:	e040      	b.n	80075d4 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8007552:	4b24      	ldr	r3, [pc, #144]	; (80075e4 <vTaskSwitchContext+0xa8>)
 8007554:	2200      	movs	r2, #0
 8007556:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007558:	4b23      	ldr	r3, [pc, #140]	; (80075e8 <vTaskSwitchContext+0xac>)
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	fab3 f383 	clz	r3, r3
 8007564:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007566:	7afb      	ldrb	r3, [r7, #11]
 8007568:	f1c3 031f 	rsb	r3, r3, #31
 800756c:	617b      	str	r3, [r7, #20]
 800756e:	491f      	ldr	r1, [pc, #124]	; (80075ec <vTaskSwitchContext+0xb0>)
 8007570:	697a      	ldr	r2, [r7, #20]
 8007572:	4613      	mov	r3, r2
 8007574:	009b      	lsls	r3, r3, #2
 8007576:	4413      	add	r3, r2
 8007578:	009b      	lsls	r3, r3, #2
 800757a:	440b      	add	r3, r1
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d10b      	bne.n	800759a <vTaskSwitchContext+0x5e>
	__asm volatile
 8007582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007586:	b672      	cpsid	i
 8007588:	f383 8811 	msr	BASEPRI, r3
 800758c:	f3bf 8f6f 	isb	sy
 8007590:	f3bf 8f4f 	dsb	sy
 8007594:	b662      	cpsie	i
 8007596:	607b      	str	r3, [r7, #4]
 8007598:	e7fe      	b.n	8007598 <vTaskSwitchContext+0x5c>
 800759a:	697a      	ldr	r2, [r7, #20]
 800759c:	4613      	mov	r3, r2
 800759e:	009b      	lsls	r3, r3, #2
 80075a0:	4413      	add	r3, r2
 80075a2:	009b      	lsls	r3, r3, #2
 80075a4:	4a11      	ldr	r2, [pc, #68]	; (80075ec <vTaskSwitchContext+0xb0>)
 80075a6:	4413      	add	r3, r2
 80075a8:	613b      	str	r3, [r7, #16]
 80075aa:	693b      	ldr	r3, [r7, #16]
 80075ac:	685b      	ldr	r3, [r3, #4]
 80075ae:	685a      	ldr	r2, [r3, #4]
 80075b0:	693b      	ldr	r3, [r7, #16]
 80075b2:	605a      	str	r2, [r3, #4]
 80075b4:	693b      	ldr	r3, [r7, #16]
 80075b6:	685a      	ldr	r2, [r3, #4]
 80075b8:	693b      	ldr	r3, [r7, #16]
 80075ba:	3308      	adds	r3, #8
 80075bc:	429a      	cmp	r2, r3
 80075be:	d104      	bne.n	80075ca <vTaskSwitchContext+0x8e>
 80075c0:	693b      	ldr	r3, [r7, #16]
 80075c2:	685b      	ldr	r3, [r3, #4]
 80075c4:	685a      	ldr	r2, [r3, #4]
 80075c6:	693b      	ldr	r3, [r7, #16]
 80075c8:	605a      	str	r2, [r3, #4]
 80075ca:	693b      	ldr	r3, [r7, #16]
 80075cc:	685b      	ldr	r3, [r3, #4]
 80075ce:	68db      	ldr	r3, [r3, #12]
 80075d0:	4a07      	ldr	r2, [pc, #28]	; (80075f0 <vTaskSwitchContext+0xb4>)
 80075d2:	6013      	str	r3, [r2, #0]
}
 80075d4:	bf00      	nop
 80075d6:	371c      	adds	r7, #28
 80075d8:	46bd      	mov	sp, r7
 80075da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075de:	4770      	bx	lr
 80075e0:	20003f50 	.word	0x20003f50
 80075e4:	20003f3c 	.word	0x20003f3c
 80075e8:	20003f30 	.word	0x20003f30
 80075ec:	20003e2c 	.word	0x20003e2c
 80075f0:	20003e28 	.word	0x20003e28

080075f4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b084      	sub	sp, #16
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
 80075fc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d10b      	bne.n	800761c <vTaskPlaceOnEventList+0x28>
 8007604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007608:	b672      	cpsid	i
 800760a:	f383 8811 	msr	BASEPRI, r3
 800760e:	f3bf 8f6f 	isb	sy
 8007612:	f3bf 8f4f 	dsb	sy
 8007616:	b662      	cpsie	i
 8007618:	60fb      	str	r3, [r7, #12]
 800761a:	e7fe      	b.n	800761a <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800761c:	4b07      	ldr	r3, [pc, #28]	; (800763c <vTaskPlaceOnEventList+0x48>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	3318      	adds	r3, #24
 8007622:	4619      	mov	r1, r3
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	f7fe f806 	bl	8005636 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800762a:	2101      	movs	r1, #1
 800762c:	6838      	ldr	r0, [r7, #0]
 800762e:	f000 fb9b 	bl	8007d68 <prvAddCurrentTaskToDelayedList>
}
 8007632:	bf00      	nop
 8007634:	3710      	adds	r7, #16
 8007636:	46bd      	mov	sp, r7
 8007638:	bd80      	pop	{r7, pc}
 800763a:	bf00      	nop
 800763c:	20003e28 	.word	0x20003e28

08007640 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b086      	sub	sp, #24
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	68db      	ldr	r3, [r3, #12]
 800764c:	68db      	ldr	r3, [r3, #12]
 800764e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007650:	693b      	ldr	r3, [r7, #16]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d10b      	bne.n	800766e <xTaskRemoveFromEventList+0x2e>
 8007656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800765a:	b672      	cpsid	i
 800765c:	f383 8811 	msr	BASEPRI, r3
 8007660:	f3bf 8f6f 	isb	sy
 8007664:	f3bf 8f4f 	dsb	sy
 8007668:	b662      	cpsie	i
 800766a:	60fb      	str	r3, [r7, #12]
 800766c:	e7fe      	b.n	800766c <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800766e:	693b      	ldr	r3, [r7, #16]
 8007670:	3318      	adds	r3, #24
 8007672:	4618      	mov	r0, r3
 8007674:	f7fe f818 	bl	80056a8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007678:	4b1d      	ldr	r3, [pc, #116]	; (80076f0 <xTaskRemoveFromEventList+0xb0>)
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d11c      	bne.n	80076ba <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007680:	693b      	ldr	r3, [r7, #16]
 8007682:	3304      	adds	r3, #4
 8007684:	4618      	mov	r0, r3
 8007686:	f7fe f80f 	bl	80056a8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800768a:	693b      	ldr	r3, [r7, #16]
 800768c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800768e:	2201      	movs	r2, #1
 8007690:	409a      	lsls	r2, r3
 8007692:	4b18      	ldr	r3, [pc, #96]	; (80076f4 <xTaskRemoveFromEventList+0xb4>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	4313      	orrs	r3, r2
 8007698:	4a16      	ldr	r2, [pc, #88]	; (80076f4 <xTaskRemoveFromEventList+0xb4>)
 800769a:	6013      	str	r3, [r2, #0]
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076a0:	4613      	mov	r3, r2
 80076a2:	009b      	lsls	r3, r3, #2
 80076a4:	4413      	add	r3, r2
 80076a6:	009b      	lsls	r3, r3, #2
 80076a8:	4a13      	ldr	r2, [pc, #76]	; (80076f8 <xTaskRemoveFromEventList+0xb8>)
 80076aa:	441a      	add	r2, r3
 80076ac:	693b      	ldr	r3, [r7, #16]
 80076ae:	3304      	adds	r3, #4
 80076b0:	4619      	mov	r1, r3
 80076b2:	4610      	mov	r0, r2
 80076b4:	f7fd ff9b 	bl	80055ee <vListInsertEnd>
 80076b8:	e005      	b.n	80076c6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80076ba:	693b      	ldr	r3, [r7, #16]
 80076bc:	3318      	adds	r3, #24
 80076be:	4619      	mov	r1, r3
 80076c0:	480e      	ldr	r0, [pc, #56]	; (80076fc <xTaskRemoveFromEventList+0xbc>)
 80076c2:	f7fd ff94 	bl	80055ee <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80076c6:	693b      	ldr	r3, [r7, #16]
 80076c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076ca:	4b0d      	ldr	r3, [pc, #52]	; (8007700 <xTaskRemoveFromEventList+0xc0>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076d0:	429a      	cmp	r2, r3
 80076d2:	d905      	bls.n	80076e0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80076d4:	2301      	movs	r3, #1
 80076d6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80076d8:	4b0a      	ldr	r3, [pc, #40]	; (8007704 <xTaskRemoveFromEventList+0xc4>)
 80076da:	2201      	movs	r2, #1
 80076dc:	601a      	str	r2, [r3, #0]
 80076de:	e001      	b.n	80076e4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80076e0:	2300      	movs	r3, #0
 80076e2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80076e4:	697b      	ldr	r3, [r7, #20]
}
 80076e6:	4618      	mov	r0, r3
 80076e8:	3718      	adds	r7, #24
 80076ea:	46bd      	mov	sp, r7
 80076ec:	bd80      	pop	{r7, pc}
 80076ee:	bf00      	nop
 80076f0:	20003f50 	.word	0x20003f50
 80076f4:	20003f30 	.word	0x20003f30
 80076f8:	20003e2c 	.word	0x20003e2c
 80076fc:	20003ee8 	.word	0x20003ee8
 8007700:	20003e28 	.word	0x20003e28
 8007704:	20003f3c 	.word	0x20003f3c

08007708 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007708:	b480      	push	{r7}
 800770a:	b083      	sub	sp, #12
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007710:	4b06      	ldr	r3, [pc, #24]	; (800772c <vTaskInternalSetTimeOutState+0x24>)
 8007712:	681a      	ldr	r2, [r3, #0]
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007718:	4b05      	ldr	r3, [pc, #20]	; (8007730 <vTaskInternalSetTimeOutState+0x28>)
 800771a:	681a      	ldr	r2, [r3, #0]
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	605a      	str	r2, [r3, #4]
}
 8007720:	bf00      	nop
 8007722:	370c      	adds	r7, #12
 8007724:	46bd      	mov	sp, r7
 8007726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772a:	4770      	bx	lr
 800772c:	20003f40 	.word	0x20003f40
 8007730:	20003f2c 	.word	0x20003f2c

08007734 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b088      	sub	sp, #32
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
 800773c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d10b      	bne.n	800775c <xTaskCheckForTimeOut+0x28>
 8007744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007748:	b672      	cpsid	i
 800774a:	f383 8811 	msr	BASEPRI, r3
 800774e:	f3bf 8f6f 	isb	sy
 8007752:	f3bf 8f4f 	dsb	sy
 8007756:	b662      	cpsie	i
 8007758:	613b      	str	r3, [r7, #16]
 800775a:	e7fe      	b.n	800775a <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d10b      	bne.n	800777a <xTaskCheckForTimeOut+0x46>
 8007762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007766:	b672      	cpsid	i
 8007768:	f383 8811 	msr	BASEPRI, r3
 800776c:	f3bf 8f6f 	isb	sy
 8007770:	f3bf 8f4f 	dsb	sy
 8007774:	b662      	cpsie	i
 8007776:	60fb      	str	r3, [r7, #12]
 8007778:	e7fe      	b.n	8007778 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 800777a:	f7fe f8c5 	bl	8005908 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800777e:	4b1d      	ldr	r3, [pc, #116]	; (80077f4 <xTaskCheckForTimeOut+0xc0>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	685b      	ldr	r3, [r3, #4]
 8007788:	69ba      	ldr	r2, [r7, #24]
 800778a:	1ad3      	subs	r3, r2, r3
 800778c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007796:	d102      	bne.n	800779e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007798:	2300      	movs	r3, #0
 800779a:	61fb      	str	r3, [r7, #28]
 800779c:	e023      	b.n	80077e6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681a      	ldr	r2, [r3, #0]
 80077a2:	4b15      	ldr	r3, [pc, #84]	; (80077f8 <xTaskCheckForTimeOut+0xc4>)
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	429a      	cmp	r2, r3
 80077a8:	d007      	beq.n	80077ba <xTaskCheckForTimeOut+0x86>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	685a      	ldr	r2, [r3, #4]
 80077ae:	69bb      	ldr	r3, [r7, #24]
 80077b0:	429a      	cmp	r2, r3
 80077b2:	d802      	bhi.n	80077ba <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80077b4:	2301      	movs	r3, #1
 80077b6:	61fb      	str	r3, [r7, #28]
 80077b8:	e015      	b.n	80077e6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	681a      	ldr	r2, [r3, #0]
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	429a      	cmp	r2, r3
 80077c2:	d90b      	bls.n	80077dc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	681a      	ldr	r2, [r3, #0]
 80077c8:	697b      	ldr	r3, [r7, #20]
 80077ca:	1ad2      	subs	r2, r2, r3
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	f7ff ff99 	bl	8007708 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80077d6:	2300      	movs	r3, #0
 80077d8:	61fb      	str	r3, [r7, #28]
 80077da:	e004      	b.n	80077e6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	2200      	movs	r2, #0
 80077e0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80077e2:	2301      	movs	r3, #1
 80077e4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80077e6:	f7fe f8c1 	bl	800596c <vPortExitCritical>

	return xReturn;
 80077ea:	69fb      	ldr	r3, [r7, #28]
}
 80077ec:	4618      	mov	r0, r3
 80077ee:	3720      	adds	r7, #32
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bd80      	pop	{r7, pc}
 80077f4:	20003f2c 	.word	0x20003f2c
 80077f8:	20003f40 	.word	0x20003f40

080077fc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80077fc:	b480      	push	{r7}
 80077fe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007800:	4b03      	ldr	r3, [pc, #12]	; (8007810 <vTaskMissedYield+0x14>)
 8007802:	2201      	movs	r2, #1
 8007804:	601a      	str	r2, [r3, #0]
}
 8007806:	bf00      	nop
 8007808:	46bd      	mov	sp, r7
 800780a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780e:	4770      	bx	lr
 8007810:	20003f3c 	.word	0x20003f3c

08007814 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b082      	sub	sp, #8
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800781c:	f000 f852 	bl	80078c4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007820:	4b06      	ldr	r3, [pc, #24]	; (800783c <prvIdleTask+0x28>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	2b01      	cmp	r3, #1
 8007826:	d9f9      	bls.n	800781c <prvIdleTask+0x8>
			{
				taskYIELD();
 8007828:	4b05      	ldr	r3, [pc, #20]	; (8007840 <prvIdleTask+0x2c>)
 800782a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800782e:	601a      	str	r2, [r3, #0]
 8007830:	f3bf 8f4f 	dsb	sy
 8007834:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007838:	e7f0      	b.n	800781c <prvIdleTask+0x8>
 800783a:	bf00      	nop
 800783c:	20003e2c 	.word	0x20003e2c
 8007840:	e000ed04 	.word	0xe000ed04

08007844 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b082      	sub	sp, #8
 8007848:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800784a:	2300      	movs	r3, #0
 800784c:	607b      	str	r3, [r7, #4]
 800784e:	e00c      	b.n	800786a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007850:	687a      	ldr	r2, [r7, #4]
 8007852:	4613      	mov	r3, r2
 8007854:	009b      	lsls	r3, r3, #2
 8007856:	4413      	add	r3, r2
 8007858:	009b      	lsls	r3, r3, #2
 800785a:	4a12      	ldr	r2, [pc, #72]	; (80078a4 <prvInitialiseTaskLists+0x60>)
 800785c:	4413      	add	r3, r2
 800785e:	4618      	mov	r0, r3
 8007860:	f7fd fe98 	bl	8005594 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	3301      	adds	r3, #1
 8007868:	607b      	str	r3, [r7, #4]
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2b06      	cmp	r3, #6
 800786e:	d9ef      	bls.n	8007850 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007870:	480d      	ldr	r0, [pc, #52]	; (80078a8 <prvInitialiseTaskLists+0x64>)
 8007872:	f7fd fe8f 	bl	8005594 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007876:	480d      	ldr	r0, [pc, #52]	; (80078ac <prvInitialiseTaskLists+0x68>)
 8007878:	f7fd fe8c 	bl	8005594 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800787c:	480c      	ldr	r0, [pc, #48]	; (80078b0 <prvInitialiseTaskLists+0x6c>)
 800787e:	f7fd fe89 	bl	8005594 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007882:	480c      	ldr	r0, [pc, #48]	; (80078b4 <prvInitialiseTaskLists+0x70>)
 8007884:	f7fd fe86 	bl	8005594 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007888:	480b      	ldr	r0, [pc, #44]	; (80078b8 <prvInitialiseTaskLists+0x74>)
 800788a:	f7fd fe83 	bl	8005594 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800788e:	4b0b      	ldr	r3, [pc, #44]	; (80078bc <prvInitialiseTaskLists+0x78>)
 8007890:	4a05      	ldr	r2, [pc, #20]	; (80078a8 <prvInitialiseTaskLists+0x64>)
 8007892:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007894:	4b0a      	ldr	r3, [pc, #40]	; (80078c0 <prvInitialiseTaskLists+0x7c>)
 8007896:	4a05      	ldr	r2, [pc, #20]	; (80078ac <prvInitialiseTaskLists+0x68>)
 8007898:	601a      	str	r2, [r3, #0]
}
 800789a:	bf00      	nop
 800789c:	3708      	adds	r7, #8
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}
 80078a2:	bf00      	nop
 80078a4:	20003e2c 	.word	0x20003e2c
 80078a8:	20003eb8 	.word	0x20003eb8
 80078ac:	20003ecc 	.word	0x20003ecc
 80078b0:	20003ee8 	.word	0x20003ee8
 80078b4:	20003efc 	.word	0x20003efc
 80078b8:	20003f14 	.word	0x20003f14
 80078bc:	20003ee0 	.word	0x20003ee0
 80078c0:	20003ee4 	.word	0x20003ee4

080078c4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b082      	sub	sp, #8
 80078c8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80078ca:	e019      	b.n	8007900 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80078cc:	f7fe f81c 	bl	8005908 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078d0:	4b0f      	ldr	r3, [pc, #60]	; (8007910 <prvCheckTasksWaitingTermination+0x4c>)
 80078d2:	68db      	ldr	r3, [r3, #12]
 80078d4:	68db      	ldr	r3, [r3, #12]
 80078d6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	3304      	adds	r3, #4
 80078dc:	4618      	mov	r0, r3
 80078de:	f7fd fee3 	bl	80056a8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80078e2:	4b0c      	ldr	r3, [pc, #48]	; (8007914 <prvCheckTasksWaitingTermination+0x50>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	3b01      	subs	r3, #1
 80078e8:	4a0a      	ldr	r2, [pc, #40]	; (8007914 <prvCheckTasksWaitingTermination+0x50>)
 80078ea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80078ec:	4b0a      	ldr	r3, [pc, #40]	; (8007918 <prvCheckTasksWaitingTermination+0x54>)
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	3b01      	subs	r3, #1
 80078f2:	4a09      	ldr	r2, [pc, #36]	; (8007918 <prvCheckTasksWaitingTermination+0x54>)
 80078f4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80078f6:	f7fe f839 	bl	800596c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f000 f80e 	bl	800791c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007900:	4b05      	ldr	r3, [pc, #20]	; (8007918 <prvCheckTasksWaitingTermination+0x54>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d1e1      	bne.n	80078cc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007908:	bf00      	nop
 800790a:	3708      	adds	r7, #8
 800790c:	46bd      	mov	sp, r7
 800790e:	bd80      	pop	{r7, pc}
 8007910:	20003efc 	.word	0x20003efc
 8007914:	20003f28 	.word	0x20003f28
 8007918:	20003f10 	.word	0x20003f10

0800791c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800791c:	b580      	push	{r7, lr}
 800791e:	b084      	sub	sp, #16
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800792a:	2b00      	cmp	r3, #0
 800792c:	d108      	bne.n	8007940 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007932:	4618      	mov	r0, r3
 8007934:	f7fe f9d2 	bl	8005cdc <vPortFree>
				vPortFree( pxTCB );
 8007938:	6878      	ldr	r0, [r7, #4]
 800793a:	f7fe f9cf 	bl	8005cdc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800793e:	e019      	b.n	8007974 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007946:	2b01      	cmp	r3, #1
 8007948:	d103      	bne.n	8007952 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f7fe f9c6 	bl	8005cdc <vPortFree>
	}
 8007950:	e010      	b.n	8007974 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007958:	2b02      	cmp	r3, #2
 800795a:	d00b      	beq.n	8007974 <prvDeleteTCB+0x58>
 800795c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007960:	b672      	cpsid	i
 8007962:	f383 8811 	msr	BASEPRI, r3
 8007966:	f3bf 8f6f 	isb	sy
 800796a:	f3bf 8f4f 	dsb	sy
 800796e:	b662      	cpsie	i
 8007970:	60fb      	str	r3, [r7, #12]
 8007972:	e7fe      	b.n	8007972 <prvDeleteTCB+0x56>
	}
 8007974:	bf00      	nop
 8007976:	3710      	adds	r7, #16
 8007978:	46bd      	mov	sp, r7
 800797a:	bd80      	pop	{r7, pc}

0800797c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800797c:	b480      	push	{r7}
 800797e:	b083      	sub	sp, #12
 8007980:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007982:	4b0c      	ldr	r3, [pc, #48]	; (80079b4 <prvResetNextTaskUnblockTime+0x38>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d104      	bne.n	8007996 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800798c:	4b0a      	ldr	r3, [pc, #40]	; (80079b8 <prvResetNextTaskUnblockTime+0x3c>)
 800798e:	f04f 32ff 	mov.w	r2, #4294967295
 8007992:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007994:	e008      	b.n	80079a8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007996:	4b07      	ldr	r3, [pc, #28]	; (80079b4 <prvResetNextTaskUnblockTime+0x38>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	68db      	ldr	r3, [r3, #12]
 800799c:	68db      	ldr	r3, [r3, #12]
 800799e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	685b      	ldr	r3, [r3, #4]
 80079a4:	4a04      	ldr	r2, [pc, #16]	; (80079b8 <prvResetNextTaskUnblockTime+0x3c>)
 80079a6:	6013      	str	r3, [r2, #0]
}
 80079a8:	bf00      	nop
 80079aa:	370c      	adds	r7, #12
 80079ac:	46bd      	mov	sp, r7
 80079ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b2:	4770      	bx	lr
 80079b4:	20003ee0 	.word	0x20003ee0
 80079b8:	20003f48 	.word	0x20003f48

080079bc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80079bc:	b480      	push	{r7}
 80079be:	b083      	sub	sp, #12
 80079c0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80079c2:	4b0b      	ldr	r3, [pc, #44]	; (80079f0 <xTaskGetSchedulerState+0x34>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d102      	bne.n	80079d0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80079ca:	2301      	movs	r3, #1
 80079cc:	607b      	str	r3, [r7, #4]
 80079ce:	e008      	b.n	80079e2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80079d0:	4b08      	ldr	r3, [pc, #32]	; (80079f4 <xTaskGetSchedulerState+0x38>)
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d102      	bne.n	80079de <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80079d8:	2302      	movs	r3, #2
 80079da:	607b      	str	r3, [r7, #4]
 80079dc:	e001      	b.n	80079e2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80079de:	2300      	movs	r3, #0
 80079e0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80079e2:	687b      	ldr	r3, [r7, #4]
	}
 80079e4:	4618      	mov	r0, r3
 80079e6:	370c      	adds	r7, #12
 80079e8:	46bd      	mov	sp, r7
 80079ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ee:	4770      	bx	lr
 80079f0:	20003f34 	.word	0x20003f34
 80079f4:	20003f50 	.word	0x20003f50

080079f8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b084      	sub	sp, #16
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007a04:	2300      	movs	r3, #0
 8007a06:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d069      	beq.n	8007ae2 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a12:	4b36      	ldr	r3, [pc, #216]	; (8007aec <xTaskPriorityInherit+0xf4>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a18:	429a      	cmp	r2, r3
 8007a1a:	d259      	bcs.n	8007ad0 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	699b      	ldr	r3, [r3, #24]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	db06      	blt.n	8007a32 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a24:	4b31      	ldr	r3, [pc, #196]	; (8007aec <xTaskPriorityInherit+0xf4>)
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a2a:	f1c3 0207 	rsb	r2, r3, #7
 8007a2e:	68bb      	ldr	r3, [r7, #8]
 8007a30:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	6959      	ldr	r1, [r3, #20]
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a3a:	4613      	mov	r3, r2
 8007a3c:	009b      	lsls	r3, r3, #2
 8007a3e:	4413      	add	r3, r2
 8007a40:	009b      	lsls	r3, r3, #2
 8007a42:	4a2b      	ldr	r2, [pc, #172]	; (8007af0 <xTaskPriorityInherit+0xf8>)
 8007a44:	4413      	add	r3, r2
 8007a46:	4299      	cmp	r1, r3
 8007a48:	d13a      	bne.n	8007ac0 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007a4a:	68bb      	ldr	r3, [r7, #8]
 8007a4c:	3304      	adds	r3, #4
 8007a4e:	4618      	mov	r0, r3
 8007a50:	f7fd fe2a 	bl	80056a8 <uxListRemove>
 8007a54:	4603      	mov	r3, r0
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d115      	bne.n	8007a86 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8007a5a:	68bb      	ldr	r3, [r7, #8]
 8007a5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a5e:	4924      	ldr	r1, [pc, #144]	; (8007af0 <xTaskPriorityInherit+0xf8>)
 8007a60:	4613      	mov	r3, r2
 8007a62:	009b      	lsls	r3, r3, #2
 8007a64:	4413      	add	r3, r2
 8007a66:	009b      	lsls	r3, r3, #2
 8007a68:	440b      	add	r3, r1
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d10a      	bne.n	8007a86 <xTaskPriorityInherit+0x8e>
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a74:	2201      	movs	r2, #1
 8007a76:	fa02 f303 	lsl.w	r3, r2, r3
 8007a7a:	43da      	mvns	r2, r3
 8007a7c:	4b1d      	ldr	r3, [pc, #116]	; (8007af4 <xTaskPriorityInherit+0xfc>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	4013      	ands	r3, r2
 8007a82:	4a1c      	ldr	r2, [pc, #112]	; (8007af4 <xTaskPriorityInherit+0xfc>)
 8007a84:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007a86:	4b19      	ldr	r3, [pc, #100]	; (8007aec <xTaskPriorityInherit+0xf4>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a94:	2201      	movs	r2, #1
 8007a96:	409a      	lsls	r2, r3
 8007a98:	4b16      	ldr	r3, [pc, #88]	; (8007af4 <xTaskPriorityInherit+0xfc>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	4313      	orrs	r3, r2
 8007a9e:	4a15      	ldr	r2, [pc, #84]	; (8007af4 <xTaskPriorityInherit+0xfc>)
 8007aa0:	6013      	str	r3, [r2, #0]
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007aa6:	4613      	mov	r3, r2
 8007aa8:	009b      	lsls	r3, r3, #2
 8007aaa:	4413      	add	r3, r2
 8007aac:	009b      	lsls	r3, r3, #2
 8007aae:	4a10      	ldr	r2, [pc, #64]	; (8007af0 <xTaskPriorityInherit+0xf8>)
 8007ab0:	441a      	add	r2, r3
 8007ab2:	68bb      	ldr	r3, [r7, #8]
 8007ab4:	3304      	adds	r3, #4
 8007ab6:	4619      	mov	r1, r3
 8007ab8:	4610      	mov	r0, r2
 8007aba:	f7fd fd98 	bl	80055ee <vListInsertEnd>
 8007abe:	e004      	b.n	8007aca <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007ac0:	4b0a      	ldr	r3, [pc, #40]	; (8007aec <xTaskPriorityInherit+0xf4>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ac6:	68bb      	ldr	r3, [r7, #8]
 8007ac8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007aca:	2301      	movs	r3, #1
 8007acc:	60fb      	str	r3, [r7, #12]
 8007ace:	e008      	b.n	8007ae2 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007ad0:	68bb      	ldr	r3, [r7, #8]
 8007ad2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007ad4:	4b05      	ldr	r3, [pc, #20]	; (8007aec <xTaskPriorityInherit+0xf4>)
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ada:	429a      	cmp	r2, r3
 8007adc:	d201      	bcs.n	8007ae2 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007ade:	2301      	movs	r3, #1
 8007ae0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
	}
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	3710      	adds	r7, #16
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bd80      	pop	{r7, pc}
 8007aec:	20003e28 	.word	0x20003e28
 8007af0:	20003e2c 	.word	0x20003e2c
 8007af4:	20003f30 	.word	0x20003f30

08007af8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b086      	sub	sp, #24
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007b04:	2300      	movs	r3, #0
 8007b06:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d070      	beq.n	8007bf0 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007b0e:	4b3b      	ldr	r3, [pc, #236]	; (8007bfc <xTaskPriorityDisinherit+0x104>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	693a      	ldr	r2, [r7, #16]
 8007b14:	429a      	cmp	r2, r3
 8007b16:	d00b      	beq.n	8007b30 <xTaskPriorityDisinherit+0x38>
 8007b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b1c:	b672      	cpsid	i
 8007b1e:	f383 8811 	msr	BASEPRI, r3
 8007b22:	f3bf 8f6f 	isb	sy
 8007b26:	f3bf 8f4f 	dsb	sy
 8007b2a:	b662      	cpsie	i
 8007b2c:	60fb      	str	r3, [r7, #12]
 8007b2e:	e7fe      	b.n	8007b2e <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 8007b30:	693b      	ldr	r3, [r7, #16]
 8007b32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d10b      	bne.n	8007b50 <xTaskPriorityDisinherit+0x58>
 8007b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b3c:	b672      	cpsid	i
 8007b3e:	f383 8811 	msr	BASEPRI, r3
 8007b42:	f3bf 8f6f 	isb	sy
 8007b46:	f3bf 8f4f 	dsb	sy
 8007b4a:	b662      	cpsie	i
 8007b4c:	60bb      	str	r3, [r7, #8]
 8007b4e:	e7fe      	b.n	8007b4e <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 8007b50:	693b      	ldr	r3, [r7, #16]
 8007b52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b54:	1e5a      	subs	r2, r3, #1
 8007b56:	693b      	ldr	r3, [r7, #16]
 8007b58:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007b5a:	693b      	ldr	r3, [r7, #16]
 8007b5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b5e:	693b      	ldr	r3, [r7, #16]
 8007b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b62:	429a      	cmp	r2, r3
 8007b64:	d044      	beq.n	8007bf0 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007b66:	693b      	ldr	r3, [r7, #16]
 8007b68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d140      	bne.n	8007bf0 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007b6e:	693b      	ldr	r3, [r7, #16]
 8007b70:	3304      	adds	r3, #4
 8007b72:	4618      	mov	r0, r3
 8007b74:	f7fd fd98 	bl	80056a8 <uxListRemove>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d115      	bne.n	8007baa <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007b7e:	693b      	ldr	r3, [r7, #16]
 8007b80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b82:	491f      	ldr	r1, [pc, #124]	; (8007c00 <xTaskPriorityDisinherit+0x108>)
 8007b84:	4613      	mov	r3, r2
 8007b86:	009b      	lsls	r3, r3, #2
 8007b88:	4413      	add	r3, r2
 8007b8a:	009b      	lsls	r3, r3, #2
 8007b8c:	440b      	add	r3, r1
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d10a      	bne.n	8007baa <xTaskPriorityDisinherit+0xb2>
 8007b94:	693b      	ldr	r3, [r7, #16]
 8007b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b98:	2201      	movs	r2, #1
 8007b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8007b9e:	43da      	mvns	r2, r3
 8007ba0:	4b18      	ldr	r3, [pc, #96]	; (8007c04 <xTaskPriorityDisinherit+0x10c>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	4013      	ands	r3, r2
 8007ba6:	4a17      	ldr	r2, [pc, #92]	; (8007c04 <xTaskPriorityDisinherit+0x10c>)
 8007ba8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007baa:	693b      	ldr	r3, [r7, #16]
 8007bac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007bae:	693b      	ldr	r3, [r7, #16]
 8007bb0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007bb2:	693b      	ldr	r3, [r7, #16]
 8007bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bb6:	f1c3 0207 	rsb	r2, r3, #7
 8007bba:	693b      	ldr	r3, [r7, #16]
 8007bbc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007bbe:	693b      	ldr	r3, [r7, #16]
 8007bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bc2:	2201      	movs	r2, #1
 8007bc4:	409a      	lsls	r2, r3
 8007bc6:	4b0f      	ldr	r3, [pc, #60]	; (8007c04 <xTaskPriorityDisinherit+0x10c>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	4313      	orrs	r3, r2
 8007bcc:	4a0d      	ldr	r2, [pc, #52]	; (8007c04 <xTaskPriorityDisinherit+0x10c>)
 8007bce:	6013      	str	r3, [r2, #0]
 8007bd0:	693b      	ldr	r3, [r7, #16]
 8007bd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bd4:	4613      	mov	r3, r2
 8007bd6:	009b      	lsls	r3, r3, #2
 8007bd8:	4413      	add	r3, r2
 8007bda:	009b      	lsls	r3, r3, #2
 8007bdc:	4a08      	ldr	r2, [pc, #32]	; (8007c00 <xTaskPriorityDisinherit+0x108>)
 8007bde:	441a      	add	r2, r3
 8007be0:	693b      	ldr	r3, [r7, #16]
 8007be2:	3304      	adds	r3, #4
 8007be4:	4619      	mov	r1, r3
 8007be6:	4610      	mov	r0, r2
 8007be8:	f7fd fd01 	bl	80055ee <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007bec:	2301      	movs	r3, #1
 8007bee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007bf0:	697b      	ldr	r3, [r7, #20]
	}
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	3718      	adds	r7, #24
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bd80      	pop	{r7, pc}
 8007bfa:	bf00      	nop
 8007bfc:	20003e28 	.word	0x20003e28
 8007c00:	20003e2c 	.word	0x20003e2c
 8007c04:	20003f30 	.word	0x20003f30

08007c08 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b088      	sub	sp, #32
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
 8007c10:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007c16:	2301      	movs	r3, #1
 8007c18:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	f000 8085 	beq.w	8007d2c <vTaskPriorityDisinheritAfterTimeout+0x124>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007c22:	69bb      	ldr	r3, [r7, #24]
 8007c24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d10b      	bne.n	8007c42 <vTaskPriorityDisinheritAfterTimeout+0x3a>
 8007c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c2e:	b672      	cpsid	i
 8007c30:	f383 8811 	msr	BASEPRI, r3
 8007c34:	f3bf 8f6f 	isb	sy
 8007c38:	f3bf 8f4f 	dsb	sy
 8007c3c:	b662      	cpsie	i
 8007c3e:	60fb      	str	r3, [r7, #12]
 8007c40:	e7fe      	b.n	8007c40 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007c42:	69bb      	ldr	r3, [r7, #24]
 8007c44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	429a      	cmp	r2, r3
 8007c4a:	d202      	bcs.n	8007c52 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	61fb      	str	r3, [r7, #28]
 8007c50:	e002      	b.n	8007c58 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007c52:	69bb      	ldr	r3, [r7, #24]
 8007c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c56:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007c58:	69bb      	ldr	r3, [r7, #24]
 8007c5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c5c:	69fb      	ldr	r3, [r7, #28]
 8007c5e:	429a      	cmp	r2, r3
 8007c60:	d064      	beq.n	8007d2c <vTaskPriorityDisinheritAfterTimeout+0x124>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007c62:	69bb      	ldr	r3, [r7, #24]
 8007c64:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007c66:	697b      	ldr	r3, [r7, #20]
 8007c68:	429a      	cmp	r2, r3
 8007c6a:	d15f      	bne.n	8007d2c <vTaskPriorityDisinheritAfterTimeout+0x124>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007c6c:	4b31      	ldr	r3, [pc, #196]	; (8007d34 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	69ba      	ldr	r2, [r7, #24]
 8007c72:	429a      	cmp	r2, r3
 8007c74:	d10b      	bne.n	8007c8e <vTaskPriorityDisinheritAfterTimeout+0x86>
 8007c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c7a:	b672      	cpsid	i
 8007c7c:	f383 8811 	msr	BASEPRI, r3
 8007c80:	f3bf 8f6f 	isb	sy
 8007c84:	f3bf 8f4f 	dsb	sy
 8007c88:	b662      	cpsie	i
 8007c8a:	60bb      	str	r3, [r7, #8]
 8007c8c:	e7fe      	b.n	8007c8c <vTaskPriorityDisinheritAfterTimeout+0x84>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007c8e:	69bb      	ldr	r3, [r7, #24]
 8007c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c92:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007c94:	69bb      	ldr	r3, [r7, #24]
 8007c96:	69fa      	ldr	r2, [r7, #28]
 8007c98:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007c9a:	69bb      	ldr	r3, [r7, #24]
 8007c9c:	699b      	ldr	r3, [r3, #24]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	db04      	blt.n	8007cac <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ca2:	69fb      	ldr	r3, [r7, #28]
 8007ca4:	f1c3 0207 	rsb	r2, r3, #7
 8007ca8:	69bb      	ldr	r3, [r7, #24]
 8007caa:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007cac:	69bb      	ldr	r3, [r7, #24]
 8007cae:	6959      	ldr	r1, [r3, #20]
 8007cb0:	693a      	ldr	r2, [r7, #16]
 8007cb2:	4613      	mov	r3, r2
 8007cb4:	009b      	lsls	r3, r3, #2
 8007cb6:	4413      	add	r3, r2
 8007cb8:	009b      	lsls	r3, r3, #2
 8007cba:	4a1f      	ldr	r2, [pc, #124]	; (8007d38 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8007cbc:	4413      	add	r3, r2
 8007cbe:	4299      	cmp	r1, r3
 8007cc0:	d134      	bne.n	8007d2c <vTaskPriorityDisinheritAfterTimeout+0x124>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007cc2:	69bb      	ldr	r3, [r7, #24]
 8007cc4:	3304      	adds	r3, #4
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	f7fd fcee 	bl	80056a8 <uxListRemove>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d115      	bne.n	8007cfe <vTaskPriorityDisinheritAfterTimeout+0xf6>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007cd2:	69bb      	ldr	r3, [r7, #24]
 8007cd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cd6:	4918      	ldr	r1, [pc, #96]	; (8007d38 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8007cd8:	4613      	mov	r3, r2
 8007cda:	009b      	lsls	r3, r3, #2
 8007cdc:	4413      	add	r3, r2
 8007cde:	009b      	lsls	r3, r3, #2
 8007ce0:	440b      	add	r3, r1
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d10a      	bne.n	8007cfe <vTaskPriorityDisinheritAfterTimeout+0xf6>
 8007ce8:	69bb      	ldr	r3, [r7, #24]
 8007cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cec:	2201      	movs	r2, #1
 8007cee:	fa02 f303 	lsl.w	r3, r2, r3
 8007cf2:	43da      	mvns	r2, r3
 8007cf4:	4b11      	ldr	r3, [pc, #68]	; (8007d3c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	4013      	ands	r3, r2
 8007cfa:	4a10      	ldr	r2, [pc, #64]	; (8007d3c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8007cfc:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007cfe:	69bb      	ldr	r3, [r7, #24]
 8007d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d02:	2201      	movs	r2, #1
 8007d04:	409a      	lsls	r2, r3
 8007d06:	4b0d      	ldr	r3, [pc, #52]	; (8007d3c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	4313      	orrs	r3, r2
 8007d0c:	4a0b      	ldr	r2, [pc, #44]	; (8007d3c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8007d0e:	6013      	str	r3, [r2, #0]
 8007d10:	69bb      	ldr	r3, [r7, #24]
 8007d12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d14:	4613      	mov	r3, r2
 8007d16:	009b      	lsls	r3, r3, #2
 8007d18:	4413      	add	r3, r2
 8007d1a:	009b      	lsls	r3, r3, #2
 8007d1c:	4a06      	ldr	r2, [pc, #24]	; (8007d38 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8007d1e:	441a      	add	r2, r3
 8007d20:	69bb      	ldr	r3, [r7, #24]
 8007d22:	3304      	adds	r3, #4
 8007d24:	4619      	mov	r1, r3
 8007d26:	4610      	mov	r0, r2
 8007d28:	f7fd fc61 	bl	80055ee <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007d2c:	bf00      	nop
 8007d2e:	3720      	adds	r7, #32
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bd80      	pop	{r7, pc}
 8007d34:	20003e28 	.word	0x20003e28
 8007d38:	20003e2c 	.word	0x20003e2c
 8007d3c:	20003f30 	.word	0x20003f30

08007d40 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007d40:	b480      	push	{r7}
 8007d42:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007d44:	4b07      	ldr	r3, [pc, #28]	; (8007d64 <pvTaskIncrementMutexHeldCount+0x24>)
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d004      	beq.n	8007d56 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007d4c:	4b05      	ldr	r3, [pc, #20]	; (8007d64 <pvTaskIncrementMutexHeldCount+0x24>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007d52:	3201      	adds	r2, #1
 8007d54:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8007d56:	4b03      	ldr	r3, [pc, #12]	; (8007d64 <pvTaskIncrementMutexHeldCount+0x24>)
 8007d58:	681b      	ldr	r3, [r3, #0]
	}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d62:	4770      	bx	lr
 8007d64:	20003e28 	.word	0x20003e28

08007d68 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b084      	sub	sp, #16
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
 8007d70:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007d72:	4b29      	ldr	r3, [pc, #164]	; (8007e18 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007d78:	4b28      	ldr	r3, [pc, #160]	; (8007e1c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	3304      	adds	r3, #4
 8007d7e:	4618      	mov	r0, r3
 8007d80:	f7fd fc92 	bl	80056a8 <uxListRemove>
 8007d84:	4603      	mov	r3, r0
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d10b      	bne.n	8007da2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007d8a:	4b24      	ldr	r3, [pc, #144]	; (8007e1c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d90:	2201      	movs	r2, #1
 8007d92:	fa02 f303 	lsl.w	r3, r2, r3
 8007d96:	43da      	mvns	r2, r3
 8007d98:	4b21      	ldr	r3, [pc, #132]	; (8007e20 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	4013      	ands	r3, r2
 8007d9e:	4a20      	ldr	r2, [pc, #128]	; (8007e20 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007da0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007da8:	d10a      	bne.n	8007dc0 <prvAddCurrentTaskToDelayedList+0x58>
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d007      	beq.n	8007dc0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007db0:	4b1a      	ldr	r3, [pc, #104]	; (8007e1c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	3304      	adds	r3, #4
 8007db6:	4619      	mov	r1, r3
 8007db8:	481a      	ldr	r0, [pc, #104]	; (8007e24 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007dba:	f7fd fc18 	bl	80055ee <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007dbe:	e026      	b.n	8007e0e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007dc0:	68fa      	ldr	r2, [r7, #12]
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	4413      	add	r3, r2
 8007dc6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007dc8:	4b14      	ldr	r3, [pc, #80]	; (8007e1c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	68ba      	ldr	r2, [r7, #8]
 8007dce:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007dd0:	68ba      	ldr	r2, [r7, #8]
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	429a      	cmp	r2, r3
 8007dd6:	d209      	bcs.n	8007dec <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007dd8:	4b13      	ldr	r3, [pc, #76]	; (8007e28 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007dda:	681a      	ldr	r2, [r3, #0]
 8007ddc:	4b0f      	ldr	r3, [pc, #60]	; (8007e1c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	3304      	adds	r3, #4
 8007de2:	4619      	mov	r1, r3
 8007de4:	4610      	mov	r0, r2
 8007de6:	f7fd fc26 	bl	8005636 <vListInsert>
}
 8007dea:	e010      	b.n	8007e0e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007dec:	4b0f      	ldr	r3, [pc, #60]	; (8007e2c <prvAddCurrentTaskToDelayedList+0xc4>)
 8007dee:	681a      	ldr	r2, [r3, #0]
 8007df0:	4b0a      	ldr	r3, [pc, #40]	; (8007e1c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	3304      	adds	r3, #4
 8007df6:	4619      	mov	r1, r3
 8007df8:	4610      	mov	r0, r2
 8007dfa:	f7fd fc1c 	bl	8005636 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007dfe:	4b0c      	ldr	r3, [pc, #48]	; (8007e30 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	68ba      	ldr	r2, [r7, #8]
 8007e04:	429a      	cmp	r2, r3
 8007e06:	d202      	bcs.n	8007e0e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007e08:	4a09      	ldr	r2, [pc, #36]	; (8007e30 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	6013      	str	r3, [r2, #0]
}
 8007e0e:	bf00      	nop
 8007e10:	3710      	adds	r7, #16
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}
 8007e16:	bf00      	nop
 8007e18:	20003f2c 	.word	0x20003f2c
 8007e1c:	20003e28 	.word	0x20003e28
 8007e20:	20003f30 	.word	0x20003f30
 8007e24:	20003f14 	.word	0x20003f14
 8007e28:	20003ee4 	.word	0x20003ee4
 8007e2c:	20003ee0 	.word	0x20003ee0
 8007e30:	20003f48 	.word	0x20003f48

08007e34 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b084      	sub	sp, #16
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
 8007e3c:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8007e3e:	f00c fc1b 	bl	8014678 <sys_timeouts_sleeptime>
 8007e42:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e4a:	d10b      	bne.n	8007e64 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8007e4c:	4813      	ldr	r0, [pc, #76]	; (8007e9c <tcpip_timeouts_mbox_fetch+0x68>)
 8007e4e:	f00d fa9a 	bl	8015386 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8007e52:	2200      	movs	r2, #0
 8007e54:	6839      	ldr	r1, [r7, #0]
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	f00d fa0c 	bl	8015274 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8007e5c:	480f      	ldr	r0, [pc, #60]	; (8007e9c <tcpip_timeouts_mbox_fetch+0x68>)
 8007e5e:	f00d fa83 	bl	8015368 <sys_mutex_lock>
    return;
 8007e62:	e018      	b.n	8007e96 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d102      	bne.n	8007e70 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8007e6a:	f00c fbcf 	bl	801460c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8007e6e:	e7e6      	b.n	8007e3e <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8007e70:	480a      	ldr	r0, [pc, #40]	; (8007e9c <tcpip_timeouts_mbox_fetch+0x68>)
 8007e72:	f00d fa88 	bl	8015386 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8007e76:	68fa      	ldr	r2, [r7, #12]
 8007e78:	6839      	ldr	r1, [r7, #0]
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f00d f9fa 	bl	8015274 <sys_arch_mbox_fetch>
 8007e80:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8007e82:	4806      	ldr	r0, [pc, #24]	; (8007e9c <tcpip_timeouts_mbox_fetch+0x68>)
 8007e84:	f00d fa70 	bl	8015368 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e8e:	d102      	bne.n	8007e96 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8007e90:	f00c fbbc 	bl	801460c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8007e94:	e7d3      	b.n	8007e3e <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8007e96:	3710      	adds	r7, #16
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bd80      	pop	{r7, pc}
 8007e9c:	20004810 	.word	0x20004810

08007ea0 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b084      	sub	sp, #16
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8007ea8:	4810      	ldr	r0, [pc, #64]	; (8007eec <tcpip_thread+0x4c>)
 8007eaa:	f00d fa5d 	bl	8015368 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8007eae:	4b10      	ldr	r3, [pc, #64]	; (8007ef0 <tcpip_thread+0x50>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d005      	beq.n	8007ec2 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8007eb6:	4b0e      	ldr	r3, [pc, #56]	; (8007ef0 <tcpip_thread+0x50>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	4a0e      	ldr	r2, [pc, #56]	; (8007ef4 <tcpip_thread+0x54>)
 8007ebc:	6812      	ldr	r2, [r2, #0]
 8007ebe:	4610      	mov	r0, r2
 8007ec0:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8007ec2:	f107 030c 	add.w	r3, r7, #12
 8007ec6:	4619      	mov	r1, r3
 8007ec8:	480b      	ldr	r0, [pc, #44]	; (8007ef8 <tcpip_thread+0x58>)
 8007eca:	f7ff ffb3 	bl	8007e34 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d106      	bne.n	8007ee2 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8007ed4:	4b09      	ldr	r3, [pc, #36]	; (8007efc <tcpip_thread+0x5c>)
 8007ed6:	2291      	movs	r2, #145	; 0x91
 8007ed8:	4909      	ldr	r1, [pc, #36]	; (8007f00 <tcpip_thread+0x60>)
 8007eda:	480a      	ldr	r0, [pc, #40]	; (8007f04 <tcpip_thread+0x64>)
 8007edc:	f00f fc1a 	bl	8017714 <iprintf>
      continue;
 8007ee0:	e003      	b.n	8007eea <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	f000 f80f 	bl	8007f08 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8007eea:	e7ea      	b.n	8007ec2 <tcpip_thread+0x22>
 8007eec:	20004810 	.word	0x20004810
 8007ef0:	20003f54 	.word	0x20003f54
 8007ef4:	20003f58 	.word	0x20003f58
 8007ef8:	20003f5c 	.word	0x20003f5c
 8007efc:	08018998 	.word	0x08018998
 8007f00:	080189c8 	.word	0x080189c8
 8007f04:	080189e8 	.word	0x080189e8

08007f08 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b082      	sub	sp, #8
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	781b      	ldrb	r3, [r3, #0]
 8007f14:	2b01      	cmp	r3, #1
 8007f16:	d018      	beq.n	8007f4a <tcpip_thread_handle_msg+0x42>
 8007f18:	2b02      	cmp	r3, #2
 8007f1a:	d021      	beq.n	8007f60 <tcpip_thread_handle_msg+0x58>
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d126      	bne.n	8007f6e <tcpip_thread_handle_msg+0x66>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	68db      	ldr	r3, [r3, #12]
 8007f24:	687a      	ldr	r2, [r7, #4]
 8007f26:	6850      	ldr	r0, [r2, #4]
 8007f28:	687a      	ldr	r2, [r7, #4]
 8007f2a:	6892      	ldr	r2, [r2, #8]
 8007f2c:	4611      	mov	r1, r2
 8007f2e:	4798      	blx	r3
 8007f30:	4603      	mov	r3, r0
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d004      	beq.n	8007f40 <tcpip_thread_handle_msg+0x38>
        pbuf_free(msg->msg.inp.p);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	685b      	ldr	r3, [r3, #4]
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	f005 fdce 	bl	800dadc <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8007f40:	6879      	ldr	r1, [r7, #4]
 8007f42:	2009      	movs	r0, #9
 8007f44:	f004 fef6 	bl	800cd34 <memp_free>
      break;
 8007f48:	e018      	b.n	8007f7c <tcpip_thread_handle_msg+0x74>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	685b      	ldr	r3, [r3, #4]
 8007f4e:	687a      	ldr	r2, [r7, #4]
 8007f50:	6892      	ldr	r2, [r2, #8]
 8007f52:	4610      	mov	r0, r2
 8007f54:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8007f56:	6879      	ldr	r1, [r7, #4]
 8007f58:	2008      	movs	r0, #8
 8007f5a:	f004 feeb 	bl	800cd34 <memp_free>
      break;
 8007f5e:	e00d      	b.n	8007f7c <tcpip_thread_handle_msg+0x74>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	685b      	ldr	r3, [r3, #4]
 8007f64:	687a      	ldr	r2, [r7, #4]
 8007f66:	6892      	ldr	r2, [r2, #8]
 8007f68:	4610      	mov	r0, r2
 8007f6a:	4798      	blx	r3
      break;
 8007f6c:	e006      	b.n	8007f7c <tcpip_thread_handle_msg+0x74>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8007f6e:	4b05      	ldr	r3, [pc, #20]	; (8007f84 <tcpip_thread_handle_msg+0x7c>)
 8007f70:	22cf      	movs	r2, #207	; 0xcf
 8007f72:	4905      	ldr	r1, [pc, #20]	; (8007f88 <tcpip_thread_handle_msg+0x80>)
 8007f74:	4805      	ldr	r0, [pc, #20]	; (8007f8c <tcpip_thread_handle_msg+0x84>)
 8007f76:	f00f fbcd 	bl	8017714 <iprintf>
      break;
 8007f7a:	bf00      	nop
  }
}
 8007f7c:	bf00      	nop
 8007f7e:	3708      	adds	r7, #8
 8007f80:	46bd      	mov	sp, r7
 8007f82:	bd80      	pop	{r7, pc}
 8007f84:	08018998 	.word	0x08018998
 8007f88:	080189c8 	.word	0x080189c8
 8007f8c:	080189e8 	.word	0x080189e8

08007f90 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b086      	sub	sp, #24
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	60f8      	str	r0, [r7, #12]
 8007f98:	60b9      	str	r1, [r7, #8]
 8007f9a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8007f9c:	481a      	ldr	r0, [pc, #104]	; (8008008 <tcpip_inpkt+0x78>)
 8007f9e:	f00d f9a8 	bl	80152f2 <sys_mbox_valid>
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d105      	bne.n	8007fb4 <tcpip_inpkt+0x24>
 8007fa8:	4b18      	ldr	r3, [pc, #96]	; (800800c <tcpip_inpkt+0x7c>)
 8007faa:	22fc      	movs	r2, #252	; 0xfc
 8007fac:	4918      	ldr	r1, [pc, #96]	; (8008010 <tcpip_inpkt+0x80>)
 8007fae:	4819      	ldr	r0, [pc, #100]	; (8008014 <tcpip_inpkt+0x84>)
 8007fb0:	f00f fbb0 	bl	8017714 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8007fb4:	2009      	movs	r0, #9
 8007fb6:	f004 fe6b 	bl	800cc90 <memp_malloc>
 8007fba:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8007fbc:	697b      	ldr	r3, [r7, #20]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d102      	bne.n	8007fc8 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8007fc2:	f04f 33ff 	mov.w	r3, #4294967295
 8007fc6:	e01a      	b.n	8007ffe <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8007fc8:	697b      	ldr	r3, [r7, #20]
 8007fca:	2200      	movs	r2, #0
 8007fcc:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8007fce:	697b      	ldr	r3, [r7, #20]
 8007fd0:	68fa      	ldr	r2, [r7, #12]
 8007fd2:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8007fd4:	697b      	ldr	r3, [r7, #20]
 8007fd6:	68ba      	ldr	r2, [r7, #8]
 8007fd8:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8007fda:	697b      	ldr	r3, [r7, #20]
 8007fdc:	687a      	ldr	r2, [r7, #4]
 8007fde:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8007fe0:	6979      	ldr	r1, [r7, #20]
 8007fe2:	4809      	ldr	r0, [pc, #36]	; (8008008 <tcpip_inpkt+0x78>)
 8007fe4:	f00d f92c 	bl	8015240 <sys_mbox_trypost>
 8007fe8:	4603      	mov	r3, r0
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d006      	beq.n	8007ffc <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8007fee:	6979      	ldr	r1, [r7, #20]
 8007ff0:	2009      	movs	r0, #9
 8007ff2:	f004 fe9f 	bl	800cd34 <memp_free>
    return ERR_MEM;
 8007ff6:	f04f 33ff 	mov.w	r3, #4294967295
 8007ffa:	e000      	b.n	8007ffe <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8007ffc:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8007ffe:	4618      	mov	r0, r3
 8008000:	3718      	adds	r7, #24
 8008002:	46bd      	mov	sp, r7
 8008004:	bd80      	pop	{r7, pc}
 8008006:	bf00      	nop
 8008008:	20003f5c 	.word	0x20003f5c
 800800c:	08018998 	.word	0x08018998
 8008010:	08018a10 	.word	0x08018a10
 8008014:	080189e8 	.word	0x080189e8

08008018 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b082      	sub	sp, #8
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
 8008020:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008028:	f003 0318 	and.w	r3, r3, #24
 800802c:	2b00      	cmp	r3, #0
 800802e:	d006      	beq.n	800803e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8008030:	4a08      	ldr	r2, [pc, #32]	; (8008054 <tcpip_input+0x3c>)
 8008032:	6839      	ldr	r1, [r7, #0]
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f7ff ffab 	bl	8007f90 <tcpip_inpkt>
 800803a:	4603      	mov	r3, r0
 800803c:	e005      	b.n	800804a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800803e:	4a06      	ldr	r2, [pc, #24]	; (8008058 <tcpip_input+0x40>)
 8008040:	6839      	ldr	r1, [r7, #0]
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f7ff ffa4 	bl	8007f90 <tcpip_inpkt>
 8008048:	4603      	mov	r3, r0
}
 800804a:	4618      	mov	r0, r3
 800804c:	3708      	adds	r7, #8
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}
 8008052:	bf00      	nop
 8008054:	08015051 	.word	0x08015051
 8008058:	0800af55 	.word	0x0800af55

0800805c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b084      	sub	sp, #16
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
 8008064:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8008066:	4819      	ldr	r0, [pc, #100]	; (80080cc <tcpip_try_callback+0x70>)
 8008068:	f00d f943 	bl	80152f2 <sys_mbox_valid>
 800806c:	4603      	mov	r3, r0
 800806e:	2b00      	cmp	r3, #0
 8008070:	d106      	bne.n	8008080 <tcpip_try_callback+0x24>
 8008072:	4b17      	ldr	r3, [pc, #92]	; (80080d0 <tcpip_try_callback+0x74>)
 8008074:	f240 125d 	movw	r2, #349	; 0x15d
 8008078:	4916      	ldr	r1, [pc, #88]	; (80080d4 <tcpip_try_callback+0x78>)
 800807a:	4817      	ldr	r0, [pc, #92]	; (80080d8 <tcpip_try_callback+0x7c>)
 800807c:	f00f fb4a 	bl	8017714 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8008080:	2008      	movs	r0, #8
 8008082:	f004 fe05 	bl	800cc90 <memp_malloc>
 8008086:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d102      	bne.n	8008094 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800808e:	f04f 33ff 	mov.w	r3, #4294967295
 8008092:	e017      	b.n	80080c4 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	2201      	movs	r2, #1
 8008098:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	687a      	ldr	r2, [r7, #4]
 800809e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	683a      	ldr	r2, [r7, #0]
 80080a4:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80080a6:	68f9      	ldr	r1, [r7, #12]
 80080a8:	4808      	ldr	r0, [pc, #32]	; (80080cc <tcpip_try_callback+0x70>)
 80080aa:	f00d f8c9 	bl	8015240 <sys_mbox_trypost>
 80080ae:	4603      	mov	r3, r0
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d006      	beq.n	80080c2 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 80080b4:	68f9      	ldr	r1, [r7, #12]
 80080b6:	2008      	movs	r0, #8
 80080b8:	f004 fe3c 	bl	800cd34 <memp_free>
    return ERR_MEM;
 80080bc:	f04f 33ff 	mov.w	r3, #4294967295
 80080c0:	e000      	b.n	80080c4 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 80080c2:	2300      	movs	r3, #0
}
 80080c4:	4618      	mov	r0, r3
 80080c6:	3710      	adds	r7, #16
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bd80      	pop	{r7, pc}
 80080cc:	20003f5c 	.word	0x20003f5c
 80080d0:	08018998 	.word	0x08018998
 80080d4:	08018a10 	.word	0x08018a10
 80080d8:	080189e8 	.word	0x080189e8

080080dc <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b084      	sub	sp, #16
 80080e0:	af02      	add	r7, sp, #8
 80080e2:	6078      	str	r0, [r7, #4]
 80080e4:	6039      	str	r1, [r7, #0]
  lwip_init();
 80080e6:	f001 fdab 	bl	8009c40 <lwip_init>

  tcpip_init_done = initfunc;
 80080ea:	4a17      	ldr	r2, [pc, #92]	; (8008148 <tcpip_init+0x6c>)
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 80080f0:	4a16      	ldr	r2, [pc, #88]	; (800814c <tcpip_init+0x70>)
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 80080f6:	2106      	movs	r1, #6
 80080f8:	4815      	ldr	r0, [pc, #84]	; (8008150 <tcpip_init+0x74>)
 80080fa:	f00d f87f 	bl	80151fc <sys_mbox_new>
 80080fe:	4603      	mov	r3, r0
 8008100:	2b00      	cmp	r3, #0
 8008102:	d006      	beq.n	8008112 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8008104:	4b13      	ldr	r3, [pc, #76]	; (8008154 <tcpip_init+0x78>)
 8008106:	f240 2261 	movw	r2, #609	; 0x261
 800810a:	4913      	ldr	r1, [pc, #76]	; (8008158 <tcpip_init+0x7c>)
 800810c:	4813      	ldr	r0, [pc, #76]	; (800815c <tcpip_init+0x80>)
 800810e:	f00f fb01 	bl	8017714 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8008112:	4813      	ldr	r0, [pc, #76]	; (8008160 <tcpip_init+0x84>)
 8008114:	f00d f90c 	bl	8015330 <sys_mutex_new>
 8008118:	4603      	mov	r3, r0
 800811a:	2b00      	cmp	r3, #0
 800811c:	d006      	beq.n	800812c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800811e:	4b0d      	ldr	r3, [pc, #52]	; (8008154 <tcpip_init+0x78>)
 8008120:	f240 2265 	movw	r2, #613	; 0x265
 8008124:	490f      	ldr	r1, [pc, #60]	; (8008164 <tcpip_init+0x88>)
 8008126:	480d      	ldr	r0, [pc, #52]	; (800815c <tcpip_init+0x80>)
 8008128:	f00f faf4 	bl	8017714 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800812c:	2300      	movs	r3, #0
 800812e:	9300      	str	r3, [sp, #0]
 8008130:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008134:	2200      	movs	r2, #0
 8008136:	490c      	ldr	r1, [pc, #48]	; (8008168 <tcpip_init+0x8c>)
 8008138:	480c      	ldr	r0, [pc, #48]	; (800816c <tcpip_init+0x90>)
 800813a:	f00d f931 	bl	80153a0 <sys_thread_new>
}
 800813e:	bf00      	nop
 8008140:	3708      	adds	r7, #8
 8008142:	46bd      	mov	sp, r7
 8008144:	bd80      	pop	{r7, pc}
 8008146:	bf00      	nop
 8008148:	20003f54 	.word	0x20003f54
 800814c:	20003f58 	.word	0x20003f58
 8008150:	20003f5c 	.word	0x20003f5c
 8008154:	08018998 	.word	0x08018998
 8008158:	08018a20 	.word	0x08018a20
 800815c:	080189e8 	.word	0x080189e8
 8008160:	20004810 	.word	0x20004810
 8008164:	08018a44 	.word	0x08018a44
 8008168:	08007ea1 	.word	0x08007ea1
 800816c:	08018a68 	.word	0x08018a68

08008170 <httpc_free_state>:
} httpc_state_t;

/** Free http client state and deallocate all resources within */
static err_t
httpc_free_state(httpc_state_t* req)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b084      	sub	sp, #16
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
  struct altcp_pcb* tpcb;

  if (req->request != NULL) {
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	691b      	ldr	r3, [r3, #16]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d007      	beq.n	8008190 <httpc_free_state+0x20>
    pbuf_free(req->request);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	691b      	ldr	r3, [r3, #16]
 8008184:	4618      	mov	r0, r3
 8008186:	f005 fca9 	bl	800dadc <pbuf_free>
    req->request = NULL;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2200      	movs	r2, #0
 800818e:	611a      	str	r2, [r3, #16]
  }
  if (req->rx_hdrs != NULL) {
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	695b      	ldr	r3, [r3, #20]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d007      	beq.n	80081a8 <httpc_free_state+0x38>
    pbuf_free(req->rx_hdrs);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	695b      	ldr	r3, [r3, #20]
 800819c:	4618      	mov	r0, r3
 800819e:	f005 fc9d 	bl	800dadc <pbuf_free>
    req->rx_hdrs = NULL;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2200      	movs	r2, #0
 80081a6:	615a      	str	r2, [r3, #20]
  }

  tpcb = req->pcb;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	60fb      	str	r3, [r7, #12]
  mem_free(req);
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	f004 fa52 	bl	800c658 <mem_free>
  req = NULL;
 80081b4:	2300      	movs	r3, #0
 80081b6:	607b      	str	r3, [r7, #4]

  if (tpcb != NULL) {
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d023      	beq.n	8008206 <httpc_free_state+0x96>
    err_t r;
    altcp_arg(tpcb, NULL);
 80081be:	2100      	movs	r1, #0
 80081c0:	68f8      	ldr	r0, [r7, #12]
 80081c2:	f007 fc83 	bl	800facc <tcp_arg>
    altcp_recv(tpcb, NULL);
 80081c6:	2100      	movs	r1, #0
 80081c8:	68f8      	ldr	r0, [r7, #12]
 80081ca:	f007 fc91 	bl	800faf0 <tcp_recv>
    altcp_err(tpcb, NULL);
 80081ce:	2100      	movs	r1, #0
 80081d0:	68f8      	ldr	r0, [r7, #12]
 80081d2:	f007 fcd1 	bl	800fb78 <tcp_err>
    altcp_poll(tpcb, NULL, 0);
 80081d6:	2200      	movs	r2, #0
 80081d8:	2100      	movs	r1, #0
 80081da:	68f8      	ldr	r0, [r7, #12]
 80081dc:	f007 fcee 	bl	800fbbc <tcp_poll>
    altcp_sent(tpcb, NULL);
 80081e0:	2100      	movs	r1, #0
 80081e2:	68f8      	ldr	r0, [r7, #12]
 80081e4:	f007 fca6 	bl	800fb34 <tcp_sent>
    r = altcp_close(tpcb);
 80081e8:	68f8      	ldr	r0, [r7, #12]
 80081ea:	f006 fb49 	bl	800e880 <tcp_close>
 80081ee:	4603      	mov	r3, r0
 80081f0:	72fb      	strb	r3, [r7, #11]
    if (r != ERR_OK) {
 80081f2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d005      	beq.n	8008206 <httpc_free_state+0x96>
      altcp_abort(tpcb);
 80081fa:	68f8      	ldr	r0, [r7, #12]
 80081fc:	f006 fc2a 	bl	800ea54 <tcp_abort>
      return ERR_ABRT;
 8008200:	f06f 030c 	mvn.w	r3, #12
 8008204:	e000      	b.n	8008208 <httpc_free_state+0x98>
    }
  }
  return ERR_OK;
 8008206:	2300      	movs	r3, #0
}
 8008208:	4618      	mov	r0, r3
 800820a:	3710      	adds	r7, #16
 800820c:	46bd      	mov	sp, r7
 800820e:	bd80      	pop	{r7, pc}

08008210 <httpc_close>:

/** Close the connection: call finished callback and free the state */
static err_t
httpc_close(httpc_state_t* req, httpc_result_t result, u32_t server_response, err_t err)
{
 8008210:	b590      	push	{r4, r7, lr}
 8008212:	b087      	sub	sp, #28
 8008214:	af02      	add	r7, sp, #8
 8008216:	60f8      	str	r0, [r7, #12]
 8008218:	607a      	str	r2, [r7, #4]
 800821a:	461a      	mov	r2, r3
 800821c:	460b      	mov	r3, r1
 800821e:	72fb      	strb	r3, [r7, #11]
 8008220:	4613      	mov	r3, r2
 8008222:	72bb      	strb	r3, [r7, #10]
  if (req != NULL) {
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d01a      	beq.n	8008260 <httpc_close+0x50>
    if (req->conn_settings != NULL) {
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	6a1b      	ldr	r3, [r3, #32]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d011      	beq.n	8008256 <httpc_close+0x46>
      if (req->conn_settings->result_fn != NULL) {
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	6a1b      	ldr	r3, [r3, #32]
 8008236:	689b      	ldr	r3, [r3, #8]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d00c      	beq.n	8008256 <httpc_close+0x46>
        req->conn_settings->result_fn(req->callback_arg, result, req->rx_content_len, server_response, err);
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	6a1b      	ldr	r3, [r3, #32]
 8008240:	689c      	ldr	r4, [r3, #8]
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800824a:	7af9      	ldrb	r1, [r7, #11]
 800824c:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8008250:	9300      	str	r3, [sp, #0]
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	47a0      	blx	r4
      }
    }
    return httpc_free_state(req);
 8008256:	68f8      	ldr	r0, [r7, #12]
 8008258:	f7ff ff8a 	bl	8008170 <httpc_free_state>
 800825c:	4603      	mov	r3, r0
 800825e:	e000      	b.n	8008262 <httpc_close+0x52>
  }
  return ERR_OK;
 8008260:	2300      	movs	r3, #0
}
 8008262:	4618      	mov	r0, r3
 8008264:	3714      	adds	r7, #20
 8008266:	46bd      	mov	sp, r7
 8008268:	bd90      	pop	{r4, r7, pc}
	...

0800826c <http_parse_response_status>:

/** Parse http header response line 1 */
static err_t
http_parse_response_status(struct pbuf *p, u16_t *http_version, u16_t *http_status, u16_t *http_status_str_offset)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b08c      	sub	sp, #48	; 0x30
 8008270:	af00      	add	r7, sp, #0
 8008272:	60f8      	str	r0, [r7, #12]
 8008274:	60b9      	str	r1, [r7, #8]
 8008276:	607a      	str	r2, [r7, #4]
 8008278:	603b      	str	r3, [r7, #0]
  u16_t end1 = pbuf_memfind(p, "\r\n", 2, 0);
 800827a:	2300      	movs	r3, #0
 800827c:	2202      	movs	r2, #2
 800827e:	4948      	ldr	r1, [pc, #288]	; (80083a0 <http_parse_response_status+0x134>)
 8008280:	68f8      	ldr	r0, [r7, #12]
 8008282:	f006 f8c0 	bl	800e406 <pbuf_memfind>
 8008286:	4603      	mov	r3, r0
 8008288:	857b      	strh	r3, [r7, #42]	; 0x2a
  if (end1 != 0xFFFF) {
 800828a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800828c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008290:	4293      	cmp	r3, r2
 8008292:	d07e      	beq.n	8008392 <http_parse_response_status+0x126>
    /* get parts of first line */
    u16_t space1, space2;
    space1 = pbuf_memfind(p, " ", 1, 0);
 8008294:	2300      	movs	r3, #0
 8008296:	2201      	movs	r2, #1
 8008298:	4942      	ldr	r1, [pc, #264]	; (80083a4 <http_parse_response_status+0x138>)
 800829a:	68f8      	ldr	r0, [r7, #12]
 800829c:	f006 f8b3 	bl	800e406 <pbuf_memfind>
 80082a0:	4603      	mov	r3, r0
 80082a2:	853b      	strh	r3, [r7, #40]	; 0x28
    if (space1 != 0xFFFF) {
 80082a4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80082a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80082aa:	4293      	cmp	r3, r2
 80082ac:	d071      	beq.n	8008392 <http_parse_response_status+0x126>
      if ((pbuf_memcmp(p, 0, "HTTP/", 5) == 0)  && (pbuf_get_at(p, 6) == '.')) {
 80082ae:	2305      	movs	r3, #5
 80082b0:	4a3d      	ldr	r2, [pc, #244]	; (80083a8 <http_parse_response_status+0x13c>)
 80082b2:	2100      	movs	r1, #0
 80082b4:	68f8      	ldr	r0, [r7, #12]
 80082b6:	f006 f84e 	bl	800e356 <pbuf_memcmp>
 80082ba:	4603      	mov	r3, r0
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d168      	bne.n	8008392 <http_parse_response_status+0x126>
 80082c0:	2106      	movs	r1, #6
 80082c2:	68f8      	ldr	r0, [r7, #12]
 80082c4:	f005 ffec 	bl	800e2a0 <pbuf_get_at>
 80082c8:	4603      	mov	r3, r0
 80082ca:	2b2e      	cmp	r3, #46	; 0x2e
 80082cc:	d161      	bne.n	8008392 <http_parse_response_status+0x126>
        char status_num[10];
        size_t status_num_len;
        /* parse http version */
        u16_t version = pbuf_get_at(p, 5) - '0';
 80082ce:	2105      	movs	r1, #5
 80082d0:	68f8      	ldr	r0, [r7, #12]
 80082d2:	f005 ffe5 	bl	800e2a0 <pbuf_get_at>
 80082d6:	4603      	mov	r3, r0
 80082d8:	b29b      	uxth	r3, r3
 80082da:	3b30      	subs	r3, #48	; 0x30
 80082dc:	84fb      	strh	r3, [r7, #38]	; 0x26
        version <<= 8;
 80082de:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80082e0:	021b      	lsls	r3, r3, #8
 80082e2:	84fb      	strh	r3, [r7, #38]	; 0x26
        version |= pbuf_get_at(p, 7) - '0';
 80082e4:	2107      	movs	r1, #7
 80082e6:	68f8      	ldr	r0, [r7, #12]
 80082e8:	f005 ffda 	bl	800e2a0 <pbuf_get_at>
 80082ec:	4603      	mov	r3, r0
 80082ee:	3b30      	subs	r3, #48	; 0x30
 80082f0:	b21a      	sxth	r2, r3
 80082f2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80082f6:	4313      	orrs	r3, r2
 80082f8:	b21b      	sxth	r3, r3
 80082fa:	84fb      	strh	r3, [r7, #38]	; 0x26
        *http_version = version;
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008300:	801a      	strh	r2, [r3, #0]

        /* parse http status number */
        space2 = pbuf_memfind(p, " ", 1, space1 + 1);
 8008302:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008304:	3301      	adds	r3, #1
 8008306:	b29b      	uxth	r3, r3
 8008308:	2201      	movs	r2, #1
 800830a:	4926      	ldr	r1, [pc, #152]	; (80083a4 <http_parse_response_status+0x138>)
 800830c:	68f8      	ldr	r0, [r7, #12]
 800830e:	f006 f87a 	bl	800e406 <pbuf_memfind>
 8008312:	4603      	mov	r3, r0
 8008314:	84bb      	strh	r3, [r7, #36]	; 0x24
        if (space2 != 0xFFFF) {
 8008316:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008318:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800831c:	4293      	cmp	r3, r2
 800831e:	d00a      	beq.n	8008336 <http_parse_response_status+0xca>
          *http_status_str_offset = space2 + 1;
 8008320:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008322:	3301      	adds	r3, #1
 8008324:	b29a      	uxth	r2, r3
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	801a      	strh	r2, [r3, #0]
          status_num_len = space2 - space1 - 1;
 800832a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800832c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800832e:	1ad3      	subs	r3, r2, r3
 8008330:	3b01      	subs	r3, #1
 8008332:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008334:	e004      	b.n	8008340 <http_parse_response_status+0xd4>
        } else {
          status_num_len = end1 - space1 - 1;
 8008336:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8008338:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800833a:	1ad3      	subs	r3, r2, r3
 800833c:	3b01      	subs	r3, #1
 800833e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        memset(status_num, 0, sizeof(status_num));
 8008340:	f107 0314 	add.w	r3, r7, #20
 8008344:	220a      	movs	r2, #10
 8008346:	2100      	movs	r1, #0
 8008348:	4618      	mov	r0, r3
 800834a:	f00f f92f 	bl	80175ac <memset>
        if (pbuf_copy_partial(p, status_num, (u16_t)status_num_len, space1 + 1) == status_num_len) {
 800834e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008350:	b29a      	uxth	r2, r3
 8008352:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008354:	3301      	adds	r3, #1
 8008356:	b29b      	uxth	r3, r3
 8008358:	f107 0114 	add.w	r1, r7, #20
 800835c:	68f8      	ldr	r0, [r7, #12]
 800835e:	f005 fdc3 	bl	800dee8 <pbuf_copy_partial>
 8008362:	4603      	mov	r3, r0
 8008364:	461a      	mov	r2, r3
 8008366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008368:	429a      	cmp	r2, r3
 800836a:	d112      	bne.n	8008392 <http_parse_response_status+0x126>
          int status = atoi(status_num);
 800836c:	f107 0314 	add.w	r3, r7, #20
 8008370:	4618      	mov	r0, r3
 8008372:	f00f f892 	bl	801749a <atoi>
 8008376:	6238      	str	r0, [r7, #32]
          if ((status > 0) && (status <= 0xFFFF)) {
 8008378:	6a3b      	ldr	r3, [r7, #32]
 800837a:	2b00      	cmp	r3, #0
 800837c:	dd09      	ble.n	8008392 <http_parse_response_status+0x126>
 800837e:	6a3b      	ldr	r3, [r7, #32]
 8008380:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008384:	da05      	bge.n	8008392 <http_parse_response_status+0x126>
            *http_status = (u16_t)status;
 8008386:	6a3b      	ldr	r3, [r7, #32]
 8008388:	b29a      	uxth	r2, r3
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	801a      	strh	r2, [r3, #0]
            return ERR_OK;
 800838e:	2300      	movs	r3, #0
 8008390:	e001      	b.n	8008396 <http_parse_response_status+0x12a>
          }
        }
      }
    }
  }
  return ERR_VAL;
 8008392:	f06f 0305 	mvn.w	r3, #5
}
 8008396:	4618      	mov	r0, r3
 8008398:	3730      	adds	r7, #48	; 0x30
 800839a:	46bd      	mov	sp, r7
 800839c:	bd80      	pop	{r7, pc}
 800839e:	bf00      	nop
 80083a0:	08018a78 	.word	0x08018a78
 80083a4:	08018a7c 	.word	0x08018a7c
 80083a8:	08018a80 	.word	0x08018a80

080083ac <http_wait_headers>:

/** Wait for all headers to be received, return its length and content-length (if available) */
static err_t
http_wait_headers(struct pbuf *p, u32_t *content_length, u16_t *total_header_len)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b08c      	sub	sp, #48	; 0x30
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	60f8      	str	r0, [r7, #12]
 80083b4:	60b9      	str	r1, [r7, #8]
 80083b6:	607a      	str	r2, [r7, #4]
  u16_t end1 = pbuf_memfind(p, "\r\n\r\n", 4, 0);
 80083b8:	2300      	movs	r3, #0
 80083ba:	2204      	movs	r2, #4
 80083bc:	4930      	ldr	r1, [pc, #192]	; (8008480 <http_wait_headers+0xd4>)
 80083be:	68f8      	ldr	r0, [r7, #12]
 80083c0:	f006 f821 	bl	800e406 <pbuf_memfind>
 80083c4:	4603      	mov	r3, r0
 80083c6:	85fb      	strh	r3, [r7, #46]	; 0x2e
  if (end1 < (0xFFFF - 2)) {
 80083c8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80083ca:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 80083ce:	4293      	cmp	r3, r2
 80083d0:	d84f      	bhi.n	8008472 <http_wait_headers+0xc6>
    /* all headers received */
    /* check if we have a content length (@todo: case insensitive?) */
    u16_t content_len_hdr;
    *content_length = HTTPC_CONTENT_LEN_INVALID;
 80083d2:	68bb      	ldr	r3, [r7, #8]
 80083d4:	f04f 32ff 	mov.w	r2, #4294967295
 80083d8:	601a      	str	r2, [r3, #0]
    *total_header_len = end1 + 4;
 80083da:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80083dc:	3304      	adds	r3, #4
 80083de:	b29a      	uxth	r2, r3
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	801a      	strh	r2, [r3, #0]

    content_len_hdr = pbuf_memfind(p, "Content-Length: ", 16, 0);
 80083e4:	2300      	movs	r3, #0
 80083e6:	2210      	movs	r2, #16
 80083e8:	4926      	ldr	r1, [pc, #152]	; (8008484 <http_wait_headers+0xd8>)
 80083ea:	68f8      	ldr	r0, [r7, #12]
 80083ec:	f006 f80b 	bl	800e406 <pbuf_memfind>
 80083f0:	4603      	mov	r3, r0
 80083f2:	85bb      	strh	r3, [r7, #44]	; 0x2c
    if (content_len_hdr != 0xFFFF) {
 80083f4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80083f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80083fa:	4293      	cmp	r3, r2
 80083fc:	d037      	beq.n	800846e <http_wait_headers+0xc2>
      u16_t content_len_line_end = pbuf_memfind(p, "\r\n", 2, content_len_hdr);
 80083fe:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008400:	2202      	movs	r2, #2
 8008402:	4921      	ldr	r1, [pc, #132]	; (8008488 <http_wait_headers+0xdc>)
 8008404:	68f8      	ldr	r0, [r7, #12]
 8008406:	f005 fffe 	bl	800e406 <pbuf_memfind>
 800840a:	4603      	mov	r3, r0
 800840c:	857b      	strh	r3, [r7, #42]	; 0x2a
      if (content_len_line_end != 0xFFFF) {
 800840e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008410:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008414:	4293      	cmp	r3, r2
 8008416:	d02a      	beq.n	800846e <http_wait_headers+0xc2>
        char content_len_num[16];
        u16_t content_len_num_len = (u16_t)(content_len_line_end - content_len_hdr - 16);
 8008418:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800841a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800841c:	1ad3      	subs	r3, r2, r3
 800841e:	b29b      	uxth	r3, r3
 8008420:	3b10      	subs	r3, #16
 8008422:	853b      	strh	r3, [r7, #40]	; 0x28
        memset(content_len_num, 0, sizeof(content_len_num));
 8008424:	f107 0314 	add.w	r3, r7, #20
 8008428:	2210      	movs	r2, #16
 800842a:	2100      	movs	r1, #0
 800842c:	4618      	mov	r0, r3
 800842e:	f00f f8bd 	bl	80175ac <memset>
        if (pbuf_copy_partial(p, content_len_num, content_len_num_len, content_len_hdr + 16) == content_len_num_len) {
 8008432:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008434:	3310      	adds	r3, #16
 8008436:	b29b      	uxth	r3, r3
 8008438:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800843a:	f107 0114 	add.w	r1, r7, #20
 800843e:	68f8      	ldr	r0, [r7, #12]
 8008440:	f005 fd52 	bl	800dee8 <pbuf_copy_partial>
 8008444:	4603      	mov	r3, r0
 8008446:	461a      	mov	r2, r3
 8008448:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800844a:	4293      	cmp	r3, r2
 800844c:	d10f      	bne.n	800846e <http_wait_headers+0xc2>
          int len = atoi(content_len_num);
 800844e:	f107 0314 	add.w	r3, r7, #20
 8008452:	4618      	mov	r0, r3
 8008454:	f00f f821 	bl	801749a <atoi>
 8008458:	6278      	str	r0, [r7, #36]	; 0x24
          if ((len >= 0) && ((u32_t)len < HTTPC_CONTENT_LEN_INVALID)) {
 800845a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800845c:	2b00      	cmp	r3, #0
 800845e:	db06      	blt.n	800846e <http_wait_headers+0xc2>
 8008460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008462:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008466:	d002      	beq.n	800846e <http_wait_headers+0xc2>
            *content_length = (u32_t)len;
 8008468:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	601a      	str	r2, [r3, #0]
          }
        }
      }
    }
    return ERR_OK;
 800846e:	2300      	movs	r3, #0
 8008470:	e001      	b.n	8008476 <http_wait_headers+0xca>
  }
  return ERR_VAL;
 8008472:	f06f 0305 	mvn.w	r3, #5
}
 8008476:	4618      	mov	r0, r3
 8008478:	3730      	adds	r7, #48	; 0x30
 800847a:	46bd      	mov	sp, r7
 800847c:	bd80      	pop	{r7, pc}
 800847e:	bf00      	nop
 8008480:	08018a88 	.word	0x08018a88
 8008484:	08018a90 	.word	0x08018a90
 8008488:	08018a78 	.word	0x08018a78

0800848c <httpc_tcp_recv>:

/** http client tcp recv callback */
static err_t
httpc_tcp_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t r)
{
 800848c:	b590      	push	{r4, r7, lr}
 800848e:	b08d      	sub	sp, #52	; 0x34
 8008490:	af02      	add	r7, sp, #8
 8008492:	60f8      	str	r0, [r7, #12]
 8008494:	60b9      	str	r1, [r7, #8]
 8008496:	607a      	str	r2, [r7, #4]
 8008498:	70fb      	strb	r3, [r7, #3]
  httpc_state_t* req = (httpc_state_t*)arg;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	623b      	str	r3, [r7, #32]
  LWIP_UNUSED_ARG(r);

  if (p == NULL) {
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d125      	bne.n	80084f0 <httpc_tcp_recv+0x64>
    httpc_result_t result;
    if (req->parse_state != HTTPC_PARSE_RX_DATA) {
 80084a4:	6a3b      	ldr	r3, [r7, #32]
 80084a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80084aa:	2b02      	cmp	r3, #2
 80084ac:	d003      	beq.n	80084b6 <httpc_tcp_recv+0x2a>
      /* did not get RX data yet */
      result = HTTPC_RESULT_ERR_CLOSED;
 80084ae:	2304      	movs	r3, #4
 80084b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80084b4:	e011      	b.n	80084da <httpc_tcp_recv+0x4e>
    } else if ((req->hdr_content_len != HTTPC_CONTENT_LEN_INVALID) &&
 80084b6:	6a3b      	ldr	r3, [r7, #32]
 80084b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084be:	d009      	beq.n	80084d4 <httpc_tcp_recv+0x48>
      (req->hdr_content_len != req->rx_content_len)) {
 80084c0:	6a3b      	ldr	r3, [r7, #32]
 80084c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084c4:	6a3b      	ldr	r3, [r7, #32]
 80084c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    } else if ((req->hdr_content_len != HTTPC_CONTENT_LEN_INVALID) &&
 80084c8:	429a      	cmp	r2, r3
 80084ca:	d003      	beq.n	80084d4 <httpc_tcp_recv+0x48>
      /* header has been received with content length but not all data received */
      result = HTTPC_RESULT_ERR_CONTENT_LEN;
 80084cc:	2309      	movs	r3, #9
 80084ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80084d2:	e002      	b.n	80084da <httpc_tcp_recv+0x4e>
    } else {
      /* receiving data and either all data received or no content length header */
      result = HTTPC_RESULT_OK;
 80084d4:	2300      	movs	r3, #0
 80084d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    return httpc_close(req, result, req->rx_status, ERR_OK);
 80084da:	6a3b      	ldr	r3, [r7, #32]
 80084dc:	8b5b      	ldrh	r3, [r3, #26]
 80084de:	461a      	mov	r2, r3
 80084e0:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 80084e4:	2300      	movs	r3, #0
 80084e6:	6a38      	ldr	r0, [r7, #32]
 80084e8:	f7ff fe92 	bl	8008210 <httpc_close>
 80084ec:	4603      	mov	r3, r0
 80084ee:	e0a7      	b.n	8008640 <httpc_tcp_recv+0x1b4>
  }
  if (req->parse_state != HTTPC_PARSE_RX_DATA) {
 80084f0:	6a3b      	ldr	r3, [r7, #32]
 80084f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80084f6:	2b02      	cmp	r3, #2
 80084f8:	d07a      	beq.n	80085f0 <httpc_tcp_recv+0x164>
    if (req->rx_hdrs == NULL) {
 80084fa:	6a3b      	ldr	r3, [r7, #32]
 80084fc:	695b      	ldr	r3, [r3, #20]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d103      	bne.n	800850a <httpc_tcp_recv+0x7e>
      req->rx_hdrs = p;
 8008502:	6a3b      	ldr	r3, [r7, #32]
 8008504:	687a      	ldr	r2, [r7, #4]
 8008506:	615a      	str	r2, [r3, #20]
 8008508:	e005      	b.n	8008516 <httpc_tcp_recv+0x8a>
    } else {
      pbuf_cat(req->rx_hdrs, p);
 800850a:	6a3b      	ldr	r3, [r7, #32]
 800850c:	695b      	ldr	r3, [r3, #20]
 800850e:	6879      	ldr	r1, [r7, #4]
 8008510:	4618      	mov	r0, r3
 8008512:	f005 fbb1 	bl	800dc78 <pbuf_cat>
    }
    if (req->parse_state == HTTPC_PARSE_WAIT_FIRST_LINE) {
 8008516:	6a3b      	ldr	r3, [r7, #32]
 8008518:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800851c:	2b00      	cmp	r3, #0
 800851e:	d115      	bne.n	800854c <httpc_tcp_recv+0xc0>
      u16_t status_str_off;
      err_t err = http_parse_response_status(req->rx_hdrs, &req->rx_http_version, &req->rx_status, &status_str_off);
 8008520:	6a3b      	ldr	r3, [r7, #32]
 8008522:	6958      	ldr	r0, [r3, #20]
 8008524:	6a3b      	ldr	r3, [r7, #32]
 8008526:	f103 0118 	add.w	r1, r3, #24
 800852a:	6a3b      	ldr	r3, [r7, #32]
 800852c:	f103 021a 	add.w	r2, r3, #26
 8008530:	f107 0316 	add.w	r3, r7, #22
 8008534:	f7ff fe9a 	bl	800826c <http_parse_response_status>
 8008538:	4603      	mov	r3, r0
 800853a:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800853c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d103      	bne.n	800854c <httpc_tcp_recv+0xc0>
        /* don't care status string */
        req->parse_state = HTTPC_PARSE_WAIT_HEADERS;
 8008544:	6a3b      	ldr	r3, [r7, #32]
 8008546:	2201      	movs	r2, #1
 8008548:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
    }
    if (req->parse_state == HTTPC_PARSE_WAIT_HEADERS) {
 800854c:	6a3b      	ldr	r3, [r7, #32]
 800854e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008552:	2b01      	cmp	r3, #1
 8008554:	d14c      	bne.n	80085f0 <httpc_tcp_recv+0x164>
      u16_t total_header_len;
      err_t err = http_wait_headers(req->rx_hdrs, &req->hdr_content_len, &total_header_len);
 8008556:	6a3b      	ldr	r3, [r7, #32]
 8008558:	6958      	ldr	r0, [r3, #20]
 800855a:	6a3b      	ldr	r3, [r7, #32]
 800855c:	332c      	adds	r3, #44	; 0x2c
 800855e:	f107 0214 	add.w	r2, r7, #20
 8008562:	4619      	mov	r1, r3
 8008564:	f7ff ff22 	bl	80083ac <http_wait_headers>
 8008568:	4603      	mov	r3, r0
 800856a:	77bb      	strb	r3, [r7, #30]
      if (err == ERR_OK) {
 800856c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d13d      	bne.n	80085f0 <httpc_tcp_recv+0x164>
        struct pbuf *q;
        /* full header received, send window update for header bytes and call into client callback */
        altcp_recved(pcb, total_header_len);
 8008574:	8abb      	ldrh	r3, [r7, #20]
 8008576:	4619      	mov	r1, r3
 8008578:	68b8      	ldr	r0, [r7, #8]
 800857a:	f006 fad3 	bl	800eb24 <tcp_recved>
        if (req->conn_settings) {
 800857e:	6a3b      	ldr	r3, [r7, #32]
 8008580:	6a1b      	ldr	r3, [r3, #32]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d023      	beq.n	80085ce <httpc_tcp_recv+0x142>
          if (req->conn_settings->headers_done_fn) {
 8008586:	6a3b      	ldr	r3, [r7, #32]
 8008588:	6a1b      	ldr	r3, [r3, #32]
 800858a:	68db      	ldr	r3, [r3, #12]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d01e      	beq.n	80085ce <httpc_tcp_recv+0x142>
            err = req->conn_settings->headers_done_fn(req, req->callback_arg, req->rx_hdrs, total_header_len, req->hdr_content_len);
 8008590:	6a3b      	ldr	r3, [r7, #32]
 8008592:	6a1b      	ldr	r3, [r3, #32]
 8008594:	68dc      	ldr	r4, [r3, #12]
 8008596:	6a3b      	ldr	r3, [r7, #32]
 8008598:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800859a:	6a3b      	ldr	r3, [r7, #32]
 800859c:	695a      	ldr	r2, [r3, #20]
 800859e:	8ab8      	ldrh	r0, [r7, #20]
 80085a0:	6a3b      	ldr	r3, [r7, #32]
 80085a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085a4:	9300      	str	r3, [sp, #0]
 80085a6:	4603      	mov	r3, r0
 80085a8:	6a38      	ldr	r0, [r7, #32]
 80085aa:	47a0      	blx	r4
 80085ac:	4603      	mov	r3, r0
 80085ae:	77bb      	strb	r3, [r7, #30]
            if (err != ERR_OK) {
 80085b0:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d00a      	beq.n	80085ce <httpc_tcp_recv+0x142>
              return httpc_close(req, HTTPC_RESULT_LOCAL_ABORT, req->rx_status, err);
 80085b8:	6a3b      	ldr	r3, [r7, #32]
 80085ba:	8b5b      	ldrh	r3, [r3, #26]
 80085bc:	461a      	mov	r2, r3
 80085be:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80085c2:	2108      	movs	r1, #8
 80085c4:	6a38      	ldr	r0, [r7, #32]
 80085c6:	f7ff fe23 	bl	8008210 <httpc_close>
 80085ca:	4603      	mov	r3, r0
 80085cc:	e038      	b.n	8008640 <httpc_tcp_recv+0x1b4>
            }
          }
        }
        /* hide header bytes in pbuf */
        q = pbuf_free_header(req->rx_hdrs, total_header_len);
 80085ce:	6a3b      	ldr	r3, [r7, #32]
 80085d0:	695b      	ldr	r3, [r3, #20]
 80085d2:	8aba      	ldrh	r2, [r7, #20]
 80085d4:	4611      	mov	r1, r2
 80085d6:	4618      	mov	r0, r3
 80085d8:	f005 fa4d 	bl	800da76 <pbuf_free_header>
 80085dc:	61b8      	str	r0, [r7, #24]
        p = q;
 80085de:	69bb      	ldr	r3, [r7, #24]
 80085e0:	607b      	str	r3, [r7, #4]
        req->rx_hdrs = NULL;
 80085e2:	6a3b      	ldr	r3, [r7, #32]
 80085e4:	2200      	movs	r2, #0
 80085e6:	615a      	str	r2, [r3, #20]
        /* go on with data */
        req->parse_state = HTTPC_PARSE_RX_DATA;
 80085e8:	6a3b      	ldr	r3, [r7, #32]
 80085ea:	2202      	movs	r2, #2
 80085ec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
    }
  }
  if ((p != NULL) && (req->parse_state == HTTPC_PARSE_RX_DATA)) {
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d023      	beq.n	800863e <httpc_tcp_recv+0x1b2>
 80085f6:	6a3b      	ldr	r3, [r7, #32]
 80085f8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80085fc:	2b02      	cmp	r3, #2
 80085fe:	d11e      	bne.n	800863e <httpc_tcp_recv+0x1b2>
    req->rx_content_len += p->tot_len;
 8008600:	6a3b      	ldr	r3, [r7, #32]
 8008602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008604:	687a      	ldr	r2, [r7, #4]
 8008606:	8912      	ldrh	r2, [r2, #8]
 8008608:	441a      	add	r2, r3
 800860a:	6a3b      	ldr	r3, [r7, #32]
 800860c:	629a      	str	r2, [r3, #40]	; 0x28
    if (req->recv_fn != NULL) {
 800860e:	6a3b      	ldr	r3, [r7, #32]
 8008610:	69db      	ldr	r3, [r3, #28]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d00a      	beq.n	800862c <httpc_tcp_recv+0x1a0>
      /* directly return here: the connection migth already be aborted from the callback! */
      return req->recv_fn(req->callback_arg, pcb, p, r);
 8008616:	6a3b      	ldr	r3, [r7, #32]
 8008618:	69dc      	ldr	r4, [r3, #28]
 800861a:	6a3b      	ldr	r3, [r7, #32]
 800861c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800861e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008622:	687a      	ldr	r2, [r7, #4]
 8008624:	68b9      	ldr	r1, [r7, #8]
 8008626:	47a0      	blx	r4
 8008628:	4603      	mov	r3, r0
 800862a:	e009      	b.n	8008640 <httpc_tcp_recv+0x1b4>
    } else {
      altcp_recved(pcb, p->tot_len);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	891b      	ldrh	r3, [r3, #8]
 8008630:	4619      	mov	r1, r3
 8008632:	68b8      	ldr	r0, [r7, #8]
 8008634:	f006 fa76 	bl	800eb24 <tcp_recved>
      pbuf_free(p);
 8008638:	6878      	ldr	r0, [r7, #4]
 800863a:	f005 fa4f 	bl	800dadc <pbuf_free>
    }
  }
  return ERR_OK;
 800863e:	2300      	movs	r3, #0
}
 8008640:	4618      	mov	r0, r3
 8008642:	372c      	adds	r7, #44	; 0x2c
 8008644:	46bd      	mov	sp, r7
 8008646:	bd90      	pop	{r4, r7, pc}

08008648 <httpc_tcp_err>:

/** http client tcp err callback */
static void
httpc_tcp_err(void *arg, err_t err)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b084      	sub	sp, #16
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
 8008650:	460b      	mov	r3, r1
 8008652:	70fb      	strb	r3, [r7, #3]
  httpc_state_t* req = (httpc_state_t*)arg;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	60fb      	str	r3, [r7, #12]
  if (req != NULL) {
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d009      	beq.n	8008672 <httpc_tcp_err+0x2a>
    /* pcb has already been deallocated */
    req->pcb = NULL;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	2200      	movs	r2, #0
 8008662:	601a      	str	r2, [r3, #0]
    httpc_close(req, HTTPC_RESULT_ERR_CLOSED, 0, err);
 8008664:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008668:	2200      	movs	r2, #0
 800866a:	2104      	movs	r1, #4
 800866c:	68f8      	ldr	r0, [r7, #12]
 800866e:	f7ff fdcf 	bl	8008210 <httpc_close>
  }
}
 8008672:	bf00      	nop
 8008674:	3710      	adds	r7, #16
 8008676:	46bd      	mov	sp, r7
 8008678:	bd80      	pop	{r7, pc}

0800867a <httpc_tcp_poll>:

/** http client tcp poll callback */
static err_t
httpc_tcp_poll(void *arg, struct altcp_pcb *pcb)
{
 800867a:	b580      	push	{r7, lr}
 800867c:	b084      	sub	sp, #16
 800867e:	af00      	add	r7, sp, #0
 8008680:	6078      	str	r0, [r7, #4]
 8008682:	6039      	str	r1, [r7, #0]
  /* implement timeout */
  httpc_state_t* req = (httpc_state_t*)arg;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(pcb);
  if (req != NULL) {
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d014      	beq.n	80086b8 <httpc_tcp_poll+0x3e>
    if (req->timeout_ticks) {
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	68db      	ldr	r3, [r3, #12]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d004      	beq.n	80086a0 <httpc_tcp_poll+0x26>
      req->timeout_ticks--;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	68db      	ldr	r3, [r3, #12]
 800869a:	1e5a      	subs	r2, r3, #1
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	60da      	str	r2, [r3, #12]
    }
    if (!req->timeout_ticks) {
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	68db      	ldr	r3, [r3, #12]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d107      	bne.n	80086b8 <httpc_tcp_poll+0x3e>
      return httpc_close(req, HTTPC_RESULT_ERR_TIMEOUT, 0, ERR_OK);
 80086a8:	2300      	movs	r3, #0
 80086aa:	2200      	movs	r2, #0
 80086ac:	2105      	movs	r1, #5
 80086ae:	68f8      	ldr	r0, [r7, #12]
 80086b0:	f7ff fdae 	bl	8008210 <httpc_close>
 80086b4:	4603      	mov	r3, r0
 80086b6:	e000      	b.n	80086ba <httpc_tcp_poll+0x40>
    }
  }
  return ERR_OK;
 80086b8:	2300      	movs	r3, #0
}
 80086ba:	4618      	mov	r0, r3
 80086bc:	3710      	adds	r7, #16
 80086be:	46bd      	mov	sp, r7
 80086c0:	bd80      	pop	{r7, pc}

080086c2 <httpc_tcp_sent>:

/** http client tcp sent callback */
static err_t
httpc_tcp_sent(void *arg, struct altcp_pcb *pcb, u16_t len)
{
 80086c2:	b480      	push	{r7}
 80086c4:	b085      	sub	sp, #20
 80086c6:	af00      	add	r7, sp, #0
 80086c8:	60f8      	str	r0, [r7, #12]
 80086ca:	60b9      	str	r1, [r7, #8]
 80086cc:	4613      	mov	r3, r2
 80086ce:	80fb      	strh	r3, [r7, #6]
  /* nothing to do here for now */
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(len);
  return ERR_OK;
 80086d0:	2300      	movs	r3, #0
}
 80086d2:	4618      	mov	r0, r3
 80086d4:	3714      	adds	r7, #20
 80086d6:	46bd      	mov	sp, r7
 80086d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086dc:	4770      	bx	lr

080086de <httpc_tcp_connected>:

/** http client tcp connected callback */
static err_t
httpc_tcp_connected(void *arg, struct altcp_pcb *pcb, err_t err)
{
 80086de:	b580      	push	{r7, lr}
 80086e0:	b086      	sub	sp, #24
 80086e2:	af00      	add	r7, sp, #0
 80086e4:	60f8      	str	r0, [r7, #12]
 80086e6:	60b9      	str	r1, [r7, #8]
 80086e8:	4613      	mov	r3, r2
 80086ea:	71fb      	strb	r3, [r7, #7]
  err_t r;
  httpc_state_t* req = (httpc_state_t*)arg;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	617b      	str	r3, [r7, #20]
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(err);

  /* send request; last char is zero termination */
  r = altcp_write(req->pcb, req->request->payload, req->request->len - 1, TCP_WRITE_FLAG_COPY);
 80086f0:	697b      	ldr	r3, [r7, #20]
 80086f2:	6818      	ldr	r0, [r3, #0]
 80086f4:	697b      	ldr	r3, [r7, #20]
 80086f6:	691b      	ldr	r3, [r3, #16]
 80086f8:	6859      	ldr	r1, [r3, #4]
 80086fa:	697b      	ldr	r3, [r7, #20]
 80086fc:	691b      	ldr	r3, [r3, #16]
 80086fe:	895b      	ldrh	r3, [r3, #10]
 8008700:	3b01      	subs	r3, #1
 8008702:	b29a      	uxth	r2, r3
 8008704:	2301      	movs	r3, #1
 8008706:	f00a f907 	bl	8012918 <tcp_write>
 800870a:	4603      	mov	r3, r0
 800870c:	74fb      	strb	r3, [r7, #19]
  if (r != ERR_OK) {
 800870e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d008      	beq.n	8008728 <httpc_tcp_connected+0x4a>
     /* could not write the single small request -> fail, don't retry */
     return httpc_close(req, HTTPC_RESULT_ERR_MEM, 0, r);
 8008716:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800871a:	2200      	movs	r2, #0
 800871c:	2107      	movs	r1, #7
 800871e:	6978      	ldr	r0, [r7, #20]
 8008720:	f7ff fd76 	bl	8008210 <httpc_close>
 8008724:	4603      	mov	r3, r0
 8008726:	e00d      	b.n	8008744 <httpc_tcp_connected+0x66>
  }
  /* everything written, we can free the request */
  pbuf_free(req->request);
 8008728:	697b      	ldr	r3, [r7, #20]
 800872a:	691b      	ldr	r3, [r3, #16]
 800872c:	4618      	mov	r0, r3
 800872e:	f005 f9d5 	bl	800dadc <pbuf_free>
  req->request = NULL;
 8008732:	697b      	ldr	r3, [r7, #20]
 8008734:	2200      	movs	r2, #0
 8008736:	611a      	str	r2, [r3, #16]

  altcp_output(req->pcb);
 8008738:	697b      	ldr	r3, [r7, #20]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	4618      	mov	r0, r3
 800873e:	f00a fedb 	bl	80134f8 <tcp_output>
  return ERR_OK;
 8008742:	2300      	movs	r3, #0
}
 8008744:	4618      	mov	r0, r3
 8008746:	3718      	adds	r7, #24
 8008748:	46bd      	mov	sp, r7
 800874a:	bd80      	pop	{r7, pc}

0800874c <httpc_get_internal_addr>:

/** Start the http request when the server IP addr is known */
static err_t
httpc_get_internal_addr(httpc_state_t* req, const ip_addr_t *ipaddr)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b084      	sub	sp, #16
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
 8008754:	6039      	str	r1, [r7, #0]
  err_t err;
  LWIP_ASSERT("req != NULL", req != NULL);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d106      	bne.n	800876a <httpc_get_internal_addr+0x1e>
 800875c:	4b13      	ldr	r3, [pc, #76]	; (80087ac <httpc_get_internal_addr+0x60>)
 800875e:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8008762:	4913      	ldr	r1, [pc, #76]	; (80087b0 <httpc_get_internal_addr+0x64>)
 8008764:	4813      	ldr	r0, [pc, #76]	; (80087b4 <httpc_get_internal_addr+0x68>)
 8008766:	f00e ffd5 	bl	8017714 <iprintf>

  if (&req->remote_addr != ipaddr) {
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	1d1a      	adds	r2, r3, #4
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	429a      	cmp	r2, r3
 8008772:	d003      	beq.n	800877c <httpc_get_internal_addr+0x30>
    /* fill in remote addr if called externally */
    req->remote_addr = *ipaddr;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	683a      	ldr	r2, [r7, #0]
 8008778:	6812      	ldr	r2, [r2, #0]
 800877a:	605a      	str	r2, [r3, #4]
  }

  err = altcp_connect(req->pcb, &req->remote_addr, req->remote_port, httpc_tcp_connected);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	6818      	ldr	r0, [r3, #0]
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	1d19      	adds	r1, r3, #4
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	891a      	ldrh	r2, [r3, #8]
 8008788:	4b0b      	ldr	r3, [pc, #44]	; (80087b8 <httpc_get_internal_addr+0x6c>)
 800878a:	f006 fa61 	bl	800ec50 <tcp_connect>
 800878e:	4603      	mov	r3, r0
 8008790:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8008792:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d101      	bne.n	800879e <httpc_get_internal_addr+0x52>
    return ERR_OK;
 800879a:	2300      	movs	r3, #0
 800879c:	e001      	b.n	80087a2 <httpc_get_internal_addr+0x56>
  }
  LWIP_DEBUGF(HTTPC_DEBUG_WARN_STATE, ("tcp_connect failed: %d\n", (int)err));
  return err;
 800879e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80087a2:	4618      	mov	r0, r3
 80087a4:	3710      	adds	r7, #16
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd80      	pop	{r7, pc}
 80087aa:	bf00      	nop
 80087ac:	08018aa4 	.word	0x08018aa4
 80087b0:	08018ae0 	.word	0x08018ae0
 80087b4:	08018aec 	.word	0x08018aec
 80087b8:	080086df 	.word	0x080086df

080087bc <httpc_dns_found>:
/** DNS callback
 * If ipaddr is non-NULL, resolving succeeded and the request can be sent, otherwise it failed.
 */
static void
httpc_dns_found(const char* hostname, const ip_addr_t *ipaddr, void *arg)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b086      	sub	sp, #24
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	60f8      	str	r0, [r7, #12]
 80087c4:	60b9      	str	r1, [r7, #8]
 80087c6:	607a      	str	r2, [r7, #4]
  httpc_state_t* req = (httpc_state_t*)arg;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	613b      	str	r3, [r7, #16]
  err_t err;
  httpc_result_t result;

  LWIP_UNUSED_ARG(hostname);

  if (ipaddr != NULL) {
 80087cc:	68bb      	ldr	r3, [r7, #8]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d00c      	beq.n	80087ec <httpc_dns_found+0x30>
    err = httpc_get_internal_addr(req, ipaddr);
 80087d2:	68b9      	ldr	r1, [r7, #8]
 80087d4:	6938      	ldr	r0, [r7, #16]
 80087d6:	f7ff ffb9 	bl	800874c <httpc_get_internal_addr>
 80087da:	4603      	mov	r3, r0
 80087dc:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 80087de:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d00e      	beq.n	8008804 <httpc_dns_found+0x48>
      return;
    }
    result = HTTPC_RESULT_ERR_CONNECT;
 80087e6:	2302      	movs	r3, #2
 80087e8:	75bb      	strb	r3, [r7, #22]
 80087ea:	e003      	b.n	80087f4 <httpc_dns_found+0x38>
  } else {
    LWIP_DEBUGF(HTTPC_DEBUG_WARN_STATE, ("httpc_dns_found: failed to resolve hostname: %s\n",
      hostname));
    result = HTTPC_RESULT_ERR_HOSTNAME;
 80087ec:	2303      	movs	r3, #3
 80087ee:	75bb      	strb	r3, [r7, #22]
    err = ERR_ARG;
 80087f0:	23f0      	movs	r3, #240	; 0xf0
 80087f2:	75fb      	strb	r3, [r7, #23]
  }
  httpc_close(req, result, 0, err);
 80087f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80087f8:	7db9      	ldrb	r1, [r7, #22]
 80087fa:	2200      	movs	r2, #0
 80087fc:	6938      	ldr	r0, [r7, #16]
 80087fe:	f7ff fd07 	bl	8008210 <httpc_close>
 8008802:	e000      	b.n	8008806 <httpc_dns_found+0x4a>
      return;
 8008804:	bf00      	nop
}
 8008806:	3718      	adds	r7, #24
 8008808:	46bd      	mov	sp, r7
 800880a:	bd80      	pop	{r7, pc}

0800880c <httpc_get_internal_dns>:
#endif /* LWIP_DNS */

/** Start the http request after converting 'server_name' to ip address (DNS or address string) */
static err_t
httpc_get_internal_dns(httpc_state_t* req, const char* server_name)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b084      	sub	sp, #16
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
 8008814:	6039      	str	r1, [r7, #0]
  err_t err;
  LWIP_ASSERT("req != NULL", req != NULL);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d106      	bne.n	800882a <httpc_get_internal_dns+0x1e>
 800881c:	4b14      	ldr	r3, [pc, #80]	; (8008870 <httpc_get_internal_dns+0x64>)
 800881e:	f240 12d5 	movw	r2, #469	; 0x1d5
 8008822:	4914      	ldr	r1, [pc, #80]	; (8008874 <httpc_get_internal_dns+0x68>)
 8008824:	4814      	ldr	r0, [pc, #80]	; (8008878 <httpc_get_internal_dns+0x6c>)
 8008826:	f00e ff75 	bl	8017714 <iprintf>

#if LWIP_DNS
  err = dns_gethostbyname(server_name, &req->remote_addr, httpc_dns_found, req);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	1d19      	adds	r1, r3, #4
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	4a12      	ldr	r2, [pc, #72]	; (800887c <httpc_get_internal_dns+0x70>)
 8008832:	6838      	ldr	r0, [r7, #0]
 8008834:	f001 f9ac 	bl	8009b90 <dns_gethostbyname>
 8008838:	4603      	mov	r3, r0
 800883a:	73fb      	strb	r3, [r7, #15]
#else
  err = ipaddr_aton(server_name, &req->remote_addr) ? ERR_OK : ERR_ARG;
#endif

  if (err == ERR_OK) {
 800883c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d108      	bne.n	8008856 <httpc_get_internal_dns+0x4a>
    /* cached or IP-string */
    err = httpc_get_internal_addr(req, &req->remote_addr);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	3304      	adds	r3, #4
 8008848:	4619      	mov	r1, r3
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	f7ff ff7e 	bl	800874c <httpc_get_internal_addr>
 8008850:	4603      	mov	r3, r0
 8008852:	73fb      	strb	r3, [r7, #15]
 8008854:	e006      	b.n	8008864 <httpc_get_internal_dns+0x58>
  } else if (err == ERR_INPROGRESS) {
 8008856:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800885a:	f113 0f05 	cmn.w	r3, #5
 800885e:	d101      	bne.n	8008864 <httpc_get_internal_dns+0x58>
    return ERR_OK;
 8008860:	2300      	movs	r3, #0
 8008862:	e001      	b.n	8008868 <httpc_get_internal_dns+0x5c>
  }
  return err;
 8008864:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008868:	4618      	mov	r0, r3
 800886a:	3710      	adds	r7, #16
 800886c:	46bd      	mov	sp, r7
 800886e:	bd80      	pop	{r7, pc}
 8008870:	08018aa4 	.word	0x08018aa4
 8008874:	08018ae0 	.word	0x08018ae0
 8008878:	08018aec 	.word	0x08018aec
 800887c:	080087bd 	.word	0x080087bd

08008880 <httpc_create_request_string>:

static int
httpc_create_request_string(const httpc_connection_t *settings, const char* server_name, int server_port, const char* uri,
                            int use_host, char *buffer, size_t buffer_size)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b088      	sub	sp, #32
 8008884:	af04      	add	r7, sp, #16
 8008886:	60f8      	str	r0, [r7, #12]
 8008888:	60b9      	str	r1, [r7, #8]
 800888a:	607a      	str	r2, [r7, #4]
 800888c:	603b      	str	r3, [r7, #0]
  if (settings->use_proxy) {
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	799b      	ldrb	r3, [r3, #6]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d02a      	beq.n	80088ec <httpc_create_request_string+0x6c>
    LWIP_ASSERT("server_name != NULL", server_name != NULL);
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d106      	bne.n	80088aa <httpc_create_request_string+0x2a>
 800889c:	4b26      	ldr	r3, [pc, #152]	; (8008938 <httpc_create_request_string+0xb8>)
 800889e:	f240 12eb 	movw	r2, #491	; 0x1eb
 80088a2:	4926      	ldr	r1, [pc, #152]	; (800893c <httpc_create_request_string+0xbc>)
 80088a4:	4826      	ldr	r0, [pc, #152]	; (8008940 <httpc_create_request_string+0xc0>)
 80088a6:	f00e ff35 	bl	8017714 <iprintf>
    if (server_port != HTTP_DEFAULT_PORT) {
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2b50      	cmp	r3, #80	; 0x50
 80088ae:	d00f      	beq.n	80088d0 <httpc_create_request_string+0x50>
      return snprintf(buffer, buffer_size, HTTPC_REQ_11_PROXY_PORT_FORMAT(server_name, server_port, uri, server_name));
 80088b0:	68bb      	ldr	r3, [r7, #8]
 80088b2:	9303      	str	r3, [sp, #12]
 80088b4:	4b23      	ldr	r3, [pc, #140]	; (8008944 <httpc_create_request_string+0xc4>)
 80088b6:	9302      	str	r3, [sp, #8]
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	9301      	str	r3, [sp, #4]
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	9300      	str	r3, [sp, #0]
 80088c0:	68bb      	ldr	r3, [r7, #8]
 80088c2:	4a21      	ldr	r2, [pc, #132]	; (8008948 <httpc_create_request_string+0xc8>)
 80088c4:	6a39      	ldr	r1, [r7, #32]
 80088c6:	69f8      	ldr	r0, [r7, #28]
 80088c8:	f00e ff86 	bl	80177d8 <sniprintf>
 80088cc:	4603      	mov	r3, r0
 80088ce:	e02f      	b.n	8008930 <httpc_create_request_string+0xb0>
    } else {
      return snprintf(buffer, buffer_size, HTTPC_REQ_11_PROXY_FORMAT(server_name, uri, server_name));
 80088d0:	68bb      	ldr	r3, [r7, #8]
 80088d2:	9302      	str	r3, [sp, #8]
 80088d4:	4b1b      	ldr	r3, [pc, #108]	; (8008944 <httpc_create_request_string+0xc4>)
 80088d6:	9301      	str	r3, [sp, #4]
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	9300      	str	r3, [sp, #0]
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	4a1b      	ldr	r2, [pc, #108]	; (800894c <httpc_create_request_string+0xcc>)
 80088e0:	6a39      	ldr	r1, [r7, #32]
 80088e2:	69f8      	ldr	r0, [r7, #28]
 80088e4:	f00e ff78 	bl	80177d8 <sniprintf>
 80088e8:	4603      	mov	r3, r0
 80088ea:	e021      	b.n	8008930 <httpc_create_request_string+0xb0>
    }
  } else if (use_host) {
 80088ec:	69bb      	ldr	r3, [r7, #24]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d015      	beq.n	800891e <httpc_create_request_string+0x9e>
    LWIP_ASSERT("server_name != NULL", server_name != NULL);
 80088f2:	68bb      	ldr	r3, [r7, #8]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d106      	bne.n	8008906 <httpc_create_request_string+0x86>
 80088f8:	4b0f      	ldr	r3, [pc, #60]	; (8008938 <httpc_create_request_string+0xb8>)
 80088fa:	f44f 72f9 	mov.w	r2, #498	; 0x1f2
 80088fe:	490f      	ldr	r1, [pc, #60]	; (800893c <httpc_create_request_string+0xbc>)
 8008900:	480f      	ldr	r0, [pc, #60]	; (8008940 <httpc_create_request_string+0xc0>)
 8008902:	f00e ff07 	bl	8017714 <iprintf>
    return snprintf(buffer, buffer_size, HTTPC_REQ_11_HOST_FORMAT(uri, server_name));
 8008906:	68bb      	ldr	r3, [r7, #8]
 8008908:	9301      	str	r3, [sp, #4]
 800890a:	4b0e      	ldr	r3, [pc, #56]	; (8008944 <httpc_create_request_string+0xc4>)
 800890c:	9300      	str	r3, [sp, #0]
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	4a0f      	ldr	r2, [pc, #60]	; (8008950 <httpc_create_request_string+0xd0>)
 8008912:	6a39      	ldr	r1, [r7, #32]
 8008914:	69f8      	ldr	r0, [r7, #28]
 8008916:	f00e ff5f 	bl	80177d8 <sniprintf>
 800891a:	4603      	mov	r3, r0
 800891c:	e008      	b.n	8008930 <httpc_create_request_string+0xb0>
  } else {
    return snprintf(buffer, buffer_size, HTTPC_REQ_11_FORMAT(uri));
 800891e:	4b09      	ldr	r3, [pc, #36]	; (8008944 <httpc_create_request_string+0xc4>)
 8008920:	9300      	str	r3, [sp, #0]
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	4a0b      	ldr	r2, [pc, #44]	; (8008954 <httpc_create_request_string+0xd4>)
 8008926:	6a39      	ldr	r1, [r7, #32]
 8008928:	69f8      	ldr	r0, [r7, #28]
 800892a:	f00e ff55 	bl	80177d8 <sniprintf>
 800892e:	4603      	mov	r3, r0
  }
}
 8008930:	4618      	mov	r0, r3
 8008932:	3710      	adds	r7, #16
 8008934:	46bd      	mov	sp, r7
 8008936:	bd80      	pop	{r7, pc}
 8008938:	08018aa4 	.word	0x08018aa4
 800893c:	08018b14 	.word	0x08018b14
 8008940:	08018aec 	.word	0x08018aec
 8008944:	08018b84 	.word	0x08018b84
 8008948:	08018b28 	.word	0x08018b28
 800894c:	08018bbc 	.word	0x08018bbc
 8008950:	08018c14 	.word	0x08018c14
 8008954:	08018c64 	.word	0x08018c64

08008958 <httpc_init_connection_common>:

/** Initialize the connection struct */
static err_t
httpc_init_connection_common(httpc_state_t **connection, const httpc_connection_t *settings, const char* server_name,
                      u16_t server_port, const char* uri, altcp_recv_fn recv_fn, void* callback_arg, int use_host)
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b08e      	sub	sp, #56	; 0x38
 800895c:	af04      	add	r7, sp, #16
 800895e:	60f8      	str	r0, [r7, #12]
 8008960:	60b9      	str	r1, [r7, #8]
 8008962:	607a      	str	r2, [r7, #4]
 8008964:	807b      	strh	r3, [r7, #2]
  httpc_state_t *req;
#if HTTPC_DEBUG_REQUEST
  size_t server_name_len, uri_len;
#endif

  LWIP_ASSERT("uri != NULL", uri != NULL);
 8008966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008968:	2b00      	cmp	r3, #0
 800896a:	d106      	bne.n	800897a <httpc_init_connection_common+0x22>
 800896c:	4b65      	ldr	r3, [pc, #404]	; (8008b04 <httpc_init_connection_common+0x1ac>)
 800896e:	f240 2206 	movw	r2, #518	; 0x206
 8008972:	4965      	ldr	r1, [pc, #404]	; (8008b08 <httpc_init_connection_common+0x1b0>)
 8008974:	4865      	ldr	r0, [pc, #404]	; (8008b0c <httpc_init_connection_common+0x1b4>)
 8008976:	f00e fecd 	bl	8017714 <iprintf>

  /* get request len */
  req_len = httpc_create_request_string(settings, server_name, server_port, uri, use_host, NULL, 0);
 800897a:	887a      	ldrh	r2, [r7, #2]
 800897c:	2300      	movs	r3, #0
 800897e:	9302      	str	r3, [sp, #8]
 8008980:	2300      	movs	r3, #0
 8008982:	9301      	str	r3, [sp, #4]
 8008984:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008986:	9300      	str	r3, [sp, #0]
 8008988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800898a:	6879      	ldr	r1, [r7, #4]
 800898c:	68b8      	ldr	r0, [r7, #8]
 800898e:	f7ff ff77 	bl	8008880 <httpc_create_request_string>
 8008992:	6278      	str	r0, [r7, #36]	; 0x24
  if ((req_len < 0) || (req_len > 0xFFFF)) {
 8008994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008996:	2b00      	cmp	r3, #0
 8008998:	db03      	blt.n	80089a2 <httpc_init_connection_common+0x4a>
 800899a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800899c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80089a0:	db02      	blt.n	80089a8 <httpc_init_connection_common+0x50>
    return ERR_VAL;
 80089a2:	f06f 0305 	mvn.w	r3, #5
 80089a6:	e0a9      	b.n	8008afc <httpc_init_connection_common+0x1a4>
  }
  /* alloc state and request in one block */
  alloc_len = sizeof(httpc_state_t);
 80089a8:	2334      	movs	r3, #52	; 0x34
 80089aa:	623b      	str	r3, [r7, #32]
#if HTTPC_DEBUG_REQUEST
  server_name_len = server_name ? strlen(server_name) : 0;
  uri_len = strlen(uri);
  alloc_len += server_name_len + 1 + uri_len + 1;
#endif
  mem_alloc_len = (mem_size_t)alloc_len;
 80089ac:	6a3b      	ldr	r3, [r7, #32]
 80089ae:	83fb      	strh	r3, [r7, #30]
  if ((mem_alloc_len < alloc_len) || (req_len + 1 > 0xFFFF)) {
 80089b0:	8bfa      	ldrh	r2, [r7, #30]
 80089b2:	6a3b      	ldr	r3, [r7, #32]
 80089b4:	429a      	cmp	r2, r3
 80089b6:	d304      	bcc.n	80089c2 <httpc_init_connection_common+0x6a>
 80089b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ba:	3301      	adds	r3, #1
 80089bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80089c0:	db02      	blt.n	80089c8 <httpc_init_connection_common+0x70>
    return ERR_VAL;
 80089c2:	f06f 0305 	mvn.w	r3, #5
 80089c6:	e099      	b.n	8008afc <httpc_init_connection_common+0x1a4>
  }

  req = (httpc_state_t*)mem_malloc((mem_size_t)alloc_len);
 80089c8:	6a3b      	ldr	r3, [r7, #32]
 80089ca:	b29b      	uxth	r3, r3
 80089cc:	4618      	mov	r0, r3
 80089ce:	f003 ffdd 	bl	800c98c <mem_malloc>
 80089d2:	61b8      	str	r0, [r7, #24]
  if(req == NULL) {
 80089d4:	69bb      	ldr	r3, [r7, #24]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d102      	bne.n	80089e0 <httpc_init_connection_common+0x88>
    return ERR_MEM;
 80089da:	f04f 33ff 	mov.w	r3, #4294967295
 80089de:	e08d      	b.n	8008afc <httpc_init_connection_common+0x1a4>
  }
  memset(req, 0, sizeof(httpc_state_t));
 80089e0:	2234      	movs	r2, #52	; 0x34
 80089e2:	2100      	movs	r1, #0
 80089e4:	69b8      	ldr	r0, [r7, #24]
 80089e6:	f00e fde1 	bl	80175ac <memset>
  req->timeout_ticks = HTTPC_POLL_TIMEOUT;
 80089ea:	69bb      	ldr	r3, [r7, #24]
 80089ec:	221e      	movs	r2, #30
 80089ee:	60da      	str	r2, [r3, #12]
  req->request = pbuf_alloc(PBUF_RAW, (u16_t)(req_len + 1), PBUF_RAM);
 80089f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089f2:	b29b      	uxth	r3, r3
 80089f4:	3301      	adds	r3, #1
 80089f6:	b29b      	uxth	r3, r3
 80089f8:	f44f 7220 	mov.w	r2, #640	; 0x280
 80089fc:	4619      	mov	r1, r3
 80089fe:	2000      	movs	r0, #0
 8008a00:	f004 fd58 	bl	800d4b4 <pbuf_alloc>
 8008a04:	4602      	mov	r2, r0
 8008a06:	69bb      	ldr	r3, [r7, #24]
 8008a08:	611a      	str	r2, [r3, #16]
  if (req->request == NULL) {
 8008a0a:	69bb      	ldr	r3, [r7, #24]
 8008a0c:	691b      	ldr	r3, [r3, #16]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d105      	bne.n	8008a1e <httpc_init_connection_common+0xc6>
    httpc_free_state(req);
 8008a12:	69b8      	ldr	r0, [r7, #24]
 8008a14:	f7ff fbac 	bl	8008170 <httpc_free_state>
    return ERR_MEM;
 8008a18:	f04f 33ff 	mov.w	r3, #4294967295
 8008a1c:	e06e      	b.n	8008afc <httpc_init_connection_common+0x1a4>
  }
  if (req->request->next != NULL) {
 8008a1e:	69bb      	ldr	r3, [r7, #24]
 8008a20:	691b      	ldr	r3, [r3, #16]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d005      	beq.n	8008a34 <httpc_init_connection_common+0xdc>
    /* need a pbuf in one piece */
    httpc_free_state(req);
 8008a28:	69b8      	ldr	r0, [r7, #24]
 8008a2a:	f7ff fba1 	bl	8008170 <httpc_free_state>
    return ERR_MEM;
 8008a2e:	f04f 33ff 	mov.w	r3, #4294967295
 8008a32:	e063      	b.n	8008afc <httpc_init_connection_common+0x1a4>
  }
  req->hdr_content_len = HTTPC_CONTENT_LEN_INVALID;
 8008a34:	69bb      	ldr	r3, [r7, #24]
 8008a36:	f04f 32ff 	mov.w	r2, #4294967295
 8008a3a:	62da      	str	r2, [r3, #44]	; 0x2c
    memcpy(req->server_name, server_name, server_name_len + 1);
  }
  req->uri = req->server_name + server_name_len + 1;
  memcpy(req->uri, uri, uri_len + 1);
#endif
  req->pcb = altcp_new(settings->altcp_allocator);
 8008a3c:	f007 f83e 	bl	800fabc <tcp_new>
 8008a40:	4602      	mov	r2, r0
 8008a42:	69bb      	ldr	r3, [r7, #24]
 8008a44:	601a      	str	r2, [r3, #0]
  if(req->pcb == NULL) {
 8008a46:	69bb      	ldr	r3, [r7, #24]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d105      	bne.n	8008a5a <httpc_init_connection_common+0x102>
    httpc_free_state(req);
 8008a4e:	69b8      	ldr	r0, [r7, #24]
 8008a50:	f7ff fb8e 	bl	8008170 <httpc_free_state>
    return ERR_MEM;
 8008a54:	f04f 33ff 	mov.w	r3, #4294967295
 8008a58:	e050      	b.n	8008afc <httpc_init_connection_common+0x1a4>
  }
  req->remote_port = settings->use_proxy ? settings->proxy_port : server_port;
 8008a5a:	68bb      	ldr	r3, [r7, #8]
 8008a5c:	799b      	ldrb	r3, [r3, #6]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d002      	beq.n	8008a68 <httpc_init_connection_common+0x110>
 8008a62:	68bb      	ldr	r3, [r7, #8]
 8008a64:	889b      	ldrh	r3, [r3, #4]
 8008a66:	e000      	b.n	8008a6a <httpc_init_connection_common+0x112>
 8008a68:	887b      	ldrh	r3, [r7, #2]
 8008a6a:	69ba      	ldr	r2, [r7, #24]
 8008a6c:	8113      	strh	r3, [r2, #8]
  altcp_arg(req->pcb, req);
 8008a6e:	69bb      	ldr	r3, [r7, #24]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	69b9      	ldr	r1, [r7, #24]
 8008a74:	4618      	mov	r0, r3
 8008a76:	f007 f829 	bl	800facc <tcp_arg>
  altcp_recv(req->pcb, httpc_tcp_recv);
 8008a7a:	69bb      	ldr	r3, [r7, #24]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	4924      	ldr	r1, [pc, #144]	; (8008b10 <httpc_init_connection_common+0x1b8>)
 8008a80:	4618      	mov	r0, r3
 8008a82:	f007 f835 	bl	800faf0 <tcp_recv>
  altcp_err(req->pcb, httpc_tcp_err);
 8008a86:	69bb      	ldr	r3, [r7, #24]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	4922      	ldr	r1, [pc, #136]	; (8008b14 <httpc_init_connection_common+0x1bc>)
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	f007 f873 	bl	800fb78 <tcp_err>
  altcp_poll(req->pcb, httpc_tcp_poll, HTTPC_POLL_INTERVAL);
 8008a92:	69bb      	ldr	r3, [r7, #24]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	2201      	movs	r2, #1
 8008a98:	491f      	ldr	r1, [pc, #124]	; (8008b18 <httpc_init_connection_common+0x1c0>)
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	f007 f88e 	bl	800fbbc <tcp_poll>
  altcp_sent(req->pcb, httpc_tcp_sent);
 8008aa0:	69bb      	ldr	r3, [r7, #24]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	491d      	ldr	r1, [pc, #116]	; (8008b1c <httpc_init_connection_common+0x1c4>)
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	f007 f844 	bl	800fb34 <tcp_sent>

  /* set up request buffer */
  req_len2 = httpc_create_request_string(settings, server_name, server_port, uri, use_host,
 8008aac:	8879      	ldrh	r1, [r7, #2]
    (char *)req->request->payload, req_len + 1);
 8008aae:	69bb      	ldr	r3, [r7, #24]
 8008ab0:	691b      	ldr	r3, [r3, #16]
 8008ab2:	685b      	ldr	r3, [r3, #4]
 8008ab4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ab6:	3201      	adds	r2, #1
  req_len2 = httpc_create_request_string(settings, server_name, server_port, uri, use_host,
 8008ab8:	9202      	str	r2, [sp, #8]
 8008aba:	9301      	str	r3, [sp, #4]
 8008abc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008abe:	9300      	str	r3, [sp, #0]
 8008ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ac2:	460a      	mov	r2, r1
 8008ac4:	6879      	ldr	r1, [r7, #4]
 8008ac6:	68b8      	ldr	r0, [r7, #8]
 8008ac8:	f7ff feda 	bl	8008880 <httpc_create_request_string>
 8008acc:	6178      	str	r0, [r7, #20]
  if (req_len2 != req_len) {
 8008ace:	697a      	ldr	r2, [r7, #20]
 8008ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ad2:	429a      	cmp	r2, r3
 8008ad4:	d005      	beq.n	8008ae2 <httpc_init_connection_common+0x18a>
    httpc_free_state(req);
 8008ad6:	69b8      	ldr	r0, [r7, #24]
 8008ad8:	f7ff fb4a 	bl	8008170 <httpc_free_state>
    return ERR_VAL;
 8008adc:	f06f 0305 	mvn.w	r3, #5
 8008ae0:	e00c      	b.n	8008afc <httpc_init_connection_common+0x1a4>
  }

  req->recv_fn = recv_fn;
 8008ae2:	69bb      	ldr	r3, [r7, #24]
 8008ae4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008ae6:	61da      	str	r2, [r3, #28]
  req->conn_settings = settings;
 8008ae8:	69bb      	ldr	r3, [r7, #24]
 8008aea:	68ba      	ldr	r2, [r7, #8]
 8008aec:	621a      	str	r2, [r3, #32]
  req->callback_arg = callback_arg;
 8008aee:	69bb      	ldr	r3, [r7, #24]
 8008af0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008af2:	625a      	str	r2, [r3, #36]	; 0x24

  *connection = req;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	69ba      	ldr	r2, [r7, #24]
 8008af8:	601a      	str	r2, [r3, #0]
  return ERR_OK;
 8008afa:	2300      	movs	r3, #0
}
 8008afc:	4618      	mov	r0, r3
 8008afe:	3728      	adds	r7, #40	; 0x28
 8008b00:	46bd      	mov	sp, r7
 8008b02:	bd80      	pop	{r7, pc}
 8008b04:	08018aa4 	.word	0x08018aa4
 8008b08:	08018ca8 	.word	0x08018ca8
 8008b0c:	08018aec 	.word	0x08018aec
 8008b10:	0800848d 	.word	0x0800848d
 8008b14:	08008649 	.word	0x08008649
 8008b18:	0800867b 	.word	0x0800867b
 8008b1c:	080086c3 	.word	0x080086c3

08008b20 <httpc_init_connection>:
 * Initialize the connection struct
 */
static err_t
httpc_init_connection(httpc_state_t **connection, const httpc_connection_t *settings, const char* server_name,
                      u16_t server_port, const char* uri, altcp_recv_fn recv_fn, void* callback_arg)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b088      	sub	sp, #32
 8008b24:	af04      	add	r7, sp, #16
 8008b26:	60f8      	str	r0, [r7, #12]
 8008b28:	60b9      	str	r1, [r7, #8]
 8008b2a:	607a      	str	r2, [r7, #4]
 8008b2c:	807b      	strh	r3, [r7, #2]
  return httpc_init_connection_common(connection, settings, server_name, server_port, uri, recv_fn, callback_arg, 1);
 8008b2e:	887a      	ldrh	r2, [r7, #2]
 8008b30:	2301      	movs	r3, #1
 8008b32:	9303      	str	r3, [sp, #12]
 8008b34:	6a3b      	ldr	r3, [r7, #32]
 8008b36:	9302      	str	r3, [sp, #8]
 8008b38:	69fb      	ldr	r3, [r7, #28]
 8008b3a:	9301      	str	r3, [sp, #4]
 8008b3c:	69bb      	ldr	r3, [r7, #24]
 8008b3e:	9300      	str	r3, [sp, #0]
 8008b40:	4613      	mov	r3, r2
 8008b42:	687a      	ldr	r2, [r7, #4]
 8008b44:	68b9      	ldr	r1, [r7, #8]
 8008b46:	68f8      	ldr	r0, [r7, #12]
 8008b48:	f7ff ff06 	bl	8008958 <httpc_init_connection_common>
 8008b4c:	4603      	mov	r3, r0
}
 8008b4e:	4618      	mov	r0, r3
 8008b50:	3710      	adds	r7, #16
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bd80      	pop	{r7, pc}
	...

08008b58 <httpc_get_file_dns>:
 *         or an error code
 */
err_t
httpc_get_file_dns(const char* server_name, u16_t port, const char* uri, const httpc_connection_t *settings,
                   altcp_recv_fn recv_fn, void* callback_arg, httpc_state_t **connection)
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b08a      	sub	sp, #40	; 0x28
 8008b5c:	af04      	add	r7, sp, #16
 8008b5e:	60f8      	str	r0, [r7, #12]
 8008b60:	607a      	str	r2, [r7, #4]
 8008b62:	603b      	str	r3, [r7, #0]
 8008b64:	460b      	mov	r3, r1
 8008b66:	817b      	strh	r3, [r7, #10]
  err_t err;
  httpc_state_t* req;

  LWIP_ERROR("invalid parameters", (server_name != NULL) && (uri != NULL) && (recv_fn != NULL), return ERR_ARG;);
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d005      	beq.n	8008b7a <httpc_get_file_dns+0x22>
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d002      	beq.n	8008b7a <httpc_get_file_dns+0x22>
 8008b74:	6a3b      	ldr	r3, [r7, #32]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d109      	bne.n	8008b8e <httpc_get_file_dns+0x36>
 8008b7a:	4b25      	ldr	r3, [pc, #148]	; (8008c10 <httpc_get_file_dns+0xb8>)
 8008b7c:	f240 22ab 	movw	r2, #683	; 0x2ab
 8008b80:	4924      	ldr	r1, [pc, #144]	; (8008c14 <httpc_get_file_dns+0xbc>)
 8008b82:	4825      	ldr	r0, [pc, #148]	; (8008c18 <httpc_get_file_dns+0xc0>)
 8008b84:	f00e fdc6 	bl	8017714 <iprintf>
 8008b88:	f06f 030f 	mvn.w	r3, #15
 8008b8c:	e03c      	b.n	8008c08 <httpc_get_file_dns+0xb0>

  err = httpc_init_connection(&req, settings, server_name, port, uri, recv_fn, callback_arg);
 8008b8e:	897a      	ldrh	r2, [r7, #10]
 8008b90:	f107 0010 	add.w	r0, r7, #16
 8008b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b96:	9302      	str	r3, [sp, #8]
 8008b98:	6a3b      	ldr	r3, [r7, #32]
 8008b9a:	9301      	str	r3, [sp, #4]
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	9300      	str	r3, [sp, #0]
 8008ba0:	4613      	mov	r3, r2
 8008ba2:	68fa      	ldr	r2, [r7, #12]
 8008ba4:	6839      	ldr	r1, [r7, #0]
 8008ba6:	f7ff ffbb 	bl	8008b20 <httpc_init_connection>
 8008baa:	4603      	mov	r3, r0
 8008bac:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 8008bae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d002      	beq.n	8008bbc <httpc_get_file_dns+0x64>
    return err;
 8008bb6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008bba:	e025      	b.n	8008c08 <httpc_get_file_dns+0xb0>
  }

  if (settings->use_proxy) {
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	799b      	ldrb	r3, [r3, #6]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d008      	beq.n	8008bd6 <httpc_get_file_dns+0x7e>
    err = httpc_get_internal_addr(req, &settings->proxy_addr);
 8008bc4:	693b      	ldr	r3, [r7, #16]
 8008bc6:	683a      	ldr	r2, [r7, #0]
 8008bc8:	4611      	mov	r1, r2
 8008bca:	4618      	mov	r0, r3
 8008bcc:	f7ff fdbe 	bl	800874c <httpc_get_internal_addr>
 8008bd0:	4603      	mov	r3, r0
 8008bd2:	75fb      	strb	r3, [r7, #23]
 8008bd4:	e006      	b.n	8008be4 <httpc_get_file_dns+0x8c>
  } else {
    err = httpc_get_internal_dns(req, server_name);
 8008bd6:	693b      	ldr	r3, [r7, #16]
 8008bd8:	68f9      	ldr	r1, [r7, #12]
 8008bda:	4618      	mov	r0, r3
 8008bdc:	f7ff fe16 	bl	800880c <httpc_get_internal_dns>
 8008be0:	4603      	mov	r3, r0
 8008be2:	75fb      	strb	r3, [r7, #23]
  }
  if(err != ERR_OK) {
 8008be4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d006      	beq.n	8008bfa <httpc_get_file_dns+0xa2>
    httpc_free_state(req);
 8008bec:	693b      	ldr	r3, [r7, #16]
 8008bee:	4618      	mov	r0, r3
 8008bf0:	f7ff fabe 	bl	8008170 <httpc_free_state>
    return err;
 8008bf4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008bf8:	e006      	b.n	8008c08 <httpc_get_file_dns+0xb0>
  }

  if (connection != NULL) {
 8008bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d002      	beq.n	8008c06 <httpc_get_file_dns+0xae>
    *connection = req;
 8008c00:	693a      	ldr	r2, [r7, #16]
 8008c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c04:	601a      	str	r2, [r3, #0]
  }
  return ERR_OK;
 8008c06:	2300      	movs	r3, #0
}
 8008c08:	4618      	mov	r0, r3
 8008c0a:	3718      	adds	r7, #24
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	bd80      	pop	{r7, pc}
 8008c10:	08018aa4 	.word	0x08018aa4
 8008c14:	08018cb4 	.word	0x08018cb4
 8008c18:	08018aec 	.word	0x08018aec

08008c1c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8008c1c:	b480      	push	{r7}
 8008c1e:	b083      	sub	sp, #12
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	4603      	mov	r3, r0
 8008c24:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8008c26:	88fb      	ldrh	r3, [r7, #6]
 8008c28:	021b      	lsls	r3, r3, #8
 8008c2a:	b21a      	sxth	r2, r3
 8008c2c:	88fb      	ldrh	r3, [r7, #6]
 8008c2e:	0a1b      	lsrs	r3, r3, #8
 8008c30:	b29b      	uxth	r3, r3
 8008c32:	b21b      	sxth	r3, r3
 8008c34:	4313      	orrs	r3, r2
 8008c36:	b21b      	sxth	r3, r3
 8008c38:	b29b      	uxth	r3, r3
}
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	370c      	adds	r7, #12
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c44:	4770      	bx	lr

08008c46 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8008c46:	b480      	push	{r7}
 8008c48:	b083      	sub	sp, #12
 8008c4a:	af00      	add	r7, sp, #0
 8008c4c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	061a      	lsls	r2, r3, #24
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	021b      	lsls	r3, r3, #8
 8008c56:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008c5a:	431a      	orrs	r2, r3
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	0a1b      	lsrs	r3, r3, #8
 8008c60:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008c64:	431a      	orrs	r2, r3
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	0e1b      	lsrs	r3, r3, #24
 8008c6a:	4313      	orrs	r3, r2
}
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	370c      	adds	r7, #12
 8008c70:	46bd      	mov	sp, r7
 8008c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c76:	4770      	bx	lr

08008c78 <lwip_strnicmp>:
 * lwIP default implementation for strnicmp() non-standard function.
 * This can be \#defined to strnicmp() depending on your platform port.
 */
int
lwip_strnicmp(const char *str1, const char *str2, size_t len)
{
 8008c78:	b480      	push	{r7}
 8008c7a:	b087      	sub	sp, #28
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	60f8      	str	r0, [r7, #12]
 8008c80:	60b9      	str	r1, [r7, #8]
 8008c82:	607a      	str	r2, [r7, #4]
  char c1, c2;

  do {
    c1 = *str1++;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	1c5a      	adds	r2, r3, #1
 8008c88:	60fa      	str	r2, [r7, #12]
 8008c8a:	781b      	ldrb	r3, [r3, #0]
 8008c8c:	75fb      	strb	r3, [r7, #23]
    c2 = *str2++;
 8008c8e:	68bb      	ldr	r3, [r7, #8]
 8008c90:	1c5a      	adds	r2, r3, #1
 8008c92:	60ba      	str	r2, [r7, #8]
 8008c94:	781b      	ldrb	r3, [r3, #0]
 8008c96:	75bb      	strb	r3, [r7, #22]
    if (c1 != c2) {
 8008c98:	7dfa      	ldrb	r2, [r7, #23]
 8008c9a:	7dbb      	ldrb	r3, [r7, #22]
 8008c9c:	429a      	cmp	r2, r3
 8008c9e:	d016      	beq.n	8008cce <lwip_strnicmp+0x56>
      char c1_upc = c1 | 0x20;
 8008ca0:	7dfb      	ldrb	r3, [r7, #23]
 8008ca2:	f043 0320 	orr.w	r3, r3, #32
 8008ca6:	757b      	strb	r3, [r7, #21]
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 8008ca8:	7d7b      	ldrb	r3, [r7, #21]
 8008caa:	2b60      	cmp	r3, #96	; 0x60
 8008cac:	d90c      	bls.n	8008cc8 <lwip_strnicmp+0x50>
 8008cae:	7d7b      	ldrb	r3, [r7, #21]
 8008cb0:	2b7a      	cmp	r3, #122	; 0x7a
 8008cb2:	d809      	bhi.n	8008cc8 <lwip_strnicmp+0x50>
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
 8008cb4:	7dbb      	ldrb	r3, [r7, #22]
 8008cb6:	f043 0320 	orr.w	r3, r3, #32
 8008cba:	753b      	strb	r3, [r7, #20]
        if (c1_upc != c2_upc) {
 8008cbc:	7d7a      	ldrb	r2, [r7, #21]
 8008cbe:	7d3b      	ldrb	r3, [r7, #20]
 8008cc0:	429a      	cmp	r2, r3
 8008cc2:	d003      	beq.n	8008ccc <lwip_strnicmp+0x54>
          /* still not equal */
          /* don't care for < or > */
          return 1;
 8008cc4:	2301      	movs	r3, #1
 8008cc6:	e00c      	b.n	8008ce2 <lwip_strnicmp+0x6a>
        }
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
 8008cc8:	2301      	movs	r3, #1
 8008cca:	e00a      	b.n	8008ce2 <lwip_strnicmp+0x6a>
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 8008ccc:	bf00      	nop
      }
    }
    len--;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	3b01      	subs	r3, #1
 8008cd2:	607b      	str	r3, [r7, #4]
  } while ((len != 0) && (c1 != 0));
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d002      	beq.n	8008ce0 <lwip_strnicmp+0x68>
 8008cda:	7dfb      	ldrb	r3, [r7, #23]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d1d1      	bne.n	8008c84 <lwip_strnicmp+0xc>
  return 0;
 8008ce0:	2300      	movs	r3, #0
}
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	371c      	adds	r7, #28
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cec:	4770      	bx	lr

08008cee <dns_init>:
 * Initialize the resolver: set up the UDP pcb and configure the default server
 * (if DNS_SERVER_ADDRESS is set).
 */
void
dns_init(void)
{
 8008cee:	b480      	push	{r7}
 8008cf0:	af00      	add	r7, sp, #0
#endif

#if DNS_LOCAL_HOSTLIST
  dns_init_local();
#endif
}
 8008cf2:	bf00      	nop
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfa:	4770      	bx	lr

08008cfc <dns_setserver>:
 * @param numdns the index of the DNS server to set must be < DNS_MAX_SERVERS
 * @param dnsserver IP address of the DNS server to set
 */
void
dns_setserver(u8_t numdns, const ip_addr_t *dnsserver)
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	b083      	sub	sp, #12
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	4603      	mov	r3, r0
 8008d04:	6039      	str	r1, [r7, #0]
 8008d06:	71fb      	strb	r3, [r7, #7]
  if (numdns < DNS_MAX_SERVERS) {
 8008d08:	79fb      	ldrb	r3, [r7, #7]
 8008d0a:	2b01      	cmp	r3, #1
 8008d0c:	d80f      	bhi.n	8008d2e <dns_setserver+0x32>
    if (dnsserver != NULL) {
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d006      	beq.n	8008d22 <dns_setserver+0x26>
      dns_servers[numdns] = (*dnsserver);
 8008d14:	79fb      	ldrb	r3, [r7, #7]
 8008d16:	4909      	ldr	r1, [pc, #36]	; (8008d3c <dns_setserver+0x40>)
 8008d18:	683a      	ldr	r2, [r7, #0]
 8008d1a:	6812      	ldr	r2, [r2, #0]
 8008d1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    } else {
      dns_servers[numdns] = *IP_ADDR_ANY;
    }
  }
}
 8008d20:	e005      	b.n	8008d2e <dns_setserver+0x32>
      dns_servers[numdns] = *IP_ADDR_ANY;
 8008d22:	79fb      	ldrb	r3, [r7, #7]
 8008d24:	4905      	ldr	r1, [pc, #20]	; (8008d3c <dns_setserver+0x40>)
 8008d26:	4a06      	ldr	r2, [pc, #24]	; (8008d40 <dns_setserver+0x44>)
 8008d28:	6812      	ldr	r2, [r2, #0]
 8008d2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008d2e:	bf00      	nop
 8008d30:	370c      	adds	r7, #12
 8008d32:	46bd      	mov	sp, r7
 8008d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d38:	4770      	bx	lr
 8008d3a:	bf00      	nop
 8008d3c:	200043e4 	.word	0x200043e4
 8008d40:	0801ba9c 	.word	0x0801ba9c

08008d44 <dns_tmr>:
 * The DNS resolver client timer - handle retries and timeouts and should
 * be called every DNS_TMR_INTERVAL milliseconds (every second by default).
 */
void
dns_tmr(void)
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	af00      	add	r7, sp, #0
  LWIP_DEBUGF(DNS_DEBUG, ("dns_tmr: dns_check_entries\n"));
  dns_check_entries();
 8008d48:	f000 fc56 	bl	80095f8 <dns_check_entries>
}
 8008d4c:	bf00      	nop
 8008d4e:	bd80      	pop	{r7, pc}

08008d50 <dns_lookup>:
 *         was not found in the cached dns_table.
 * @return ERR_OK if found, ERR_ARG if not found
 */
static err_t
dns_lookup(const char *name, ip_addr_t *addr LWIP_DNS_ADDRTYPE_ARG(u8_t dns_addrtype))
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b084      	sub	sp, #16
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
 8008d58:	6039      	str	r1, [r7, #0]
    return ERR_OK;
  }
#endif /* DNS_LOOKUP_LOCAL_EXTERN */

  /* Walk through name list, return entry if found. If not, return NULL. */
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	73fb      	strb	r3, [r7, #15]
 8008d5e:	e02e      	b.n	8008dbe <dns_lookup+0x6e>
    if ((dns_table[i].state == DNS_STATE_DONE) &&
 8008d60:	7bfa      	ldrb	r2, [r7, #15]
 8008d62:	491b      	ldr	r1, [pc, #108]	; (8008dd0 <dns_lookup+0x80>)
 8008d64:	4613      	mov	r3, r2
 8008d66:	011b      	lsls	r3, r3, #4
 8008d68:	4413      	add	r3, r2
 8008d6a:	011b      	lsls	r3, r3, #4
 8008d6c:	440b      	add	r3, r1
 8008d6e:	330a      	adds	r3, #10
 8008d70:	781b      	ldrb	r3, [r3, #0]
 8008d72:	2b03      	cmp	r3, #3
 8008d74:	d120      	bne.n	8008db8 <dns_lookup+0x68>
        (lwip_strnicmp(name, dns_table[i].name, sizeof(dns_table[i].name)) == 0) &&
 8008d76:	7bfa      	ldrb	r2, [r7, #15]
 8008d78:	4613      	mov	r3, r2
 8008d7a:	011b      	lsls	r3, r3, #4
 8008d7c:	4413      	add	r3, r2
 8008d7e:	011b      	lsls	r3, r3, #4
 8008d80:	3310      	adds	r3, #16
 8008d82:	4a13      	ldr	r2, [pc, #76]	; (8008dd0 <dns_lookup+0x80>)
 8008d84:	4413      	add	r3, r2
 8008d86:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008d8a:	4619      	mov	r1, r3
 8008d8c:	6878      	ldr	r0, [r7, #4]
 8008d8e:	f7ff ff73 	bl	8008c78 <lwip_strnicmp>
 8008d92:	4603      	mov	r3, r0
    if ((dns_table[i].state == DNS_STATE_DONE) &&
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d10f      	bne.n	8008db8 <dns_lookup+0x68>
        LWIP_DNS_ADDRTYPE_MATCH_IP(dns_addrtype, dns_table[i].ipaddr)) {
      LWIP_DEBUGF(DNS_DEBUG, ("dns_lookup: \"%s\": found = ", name));
      ip_addr_debug_print_val(DNS_DEBUG, dns_table[i].ipaddr);
      LWIP_DEBUGF(DNS_DEBUG, ("\n"));
      if (addr) {
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d00a      	beq.n	8008db4 <dns_lookup+0x64>
        ip_addr_copy(*addr, dns_table[i].ipaddr);
 8008d9e:	7bfa      	ldrb	r2, [r7, #15]
 8008da0:	490b      	ldr	r1, [pc, #44]	; (8008dd0 <dns_lookup+0x80>)
 8008da2:	4613      	mov	r3, r2
 8008da4:	011b      	lsls	r3, r3, #4
 8008da6:	4413      	add	r3, r2
 8008da8:	011b      	lsls	r3, r3, #4
 8008daa:	440b      	add	r3, r1
 8008dac:	3304      	adds	r3, #4
 8008dae:	681a      	ldr	r2, [r3, #0]
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	601a      	str	r2, [r3, #0]
      }
      return ERR_OK;
 8008db4:	2300      	movs	r3, #0
 8008db6:	e007      	b.n	8008dc8 <dns_lookup+0x78>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 8008db8:	7bfb      	ldrb	r3, [r7, #15]
 8008dba:	3301      	adds	r3, #1
 8008dbc:	73fb      	strb	r3, [r7, #15]
 8008dbe:	7bfb      	ldrb	r3, [r7, #15]
 8008dc0:	2b03      	cmp	r3, #3
 8008dc2:	d9cd      	bls.n	8008d60 <dns_lookup+0x10>
    }
  }

  return ERR_ARG;
 8008dc4:	f06f 030f 	mvn.w	r3, #15
}
 8008dc8:	4618      	mov	r0, r3
 8008dca:	3710      	adds	r7, #16
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bd80      	pop	{r7, pc}
 8008dd0:	20003f74 	.word	0x20003f74

08008dd4 <dns_compare_name>:
 * @param start_offset offset into p where the name starts
 * @return 0xFFFF: names differ, other: names equal -> offset behind name
 */
static u16_t
dns_compare_name(const char *query, struct pbuf *p, u16_t start_offset)
{
 8008dd4:	b590      	push	{r4, r7, lr}
 8008dd6:	b089      	sub	sp, #36	; 0x24
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	60f8      	str	r0, [r7, #12]
 8008ddc:	60b9      	str	r1, [r7, #8]
 8008dde:	4613      	mov	r3, r2
 8008de0:	80fb      	strh	r3, [r7, #6]
  int n;
  u16_t response_offset = start_offset;
 8008de2:	88fb      	ldrh	r3, [r7, #6]
 8008de4:	837b      	strh	r3, [r7, #26]

  do {
    n = pbuf_try_get_at(p, response_offset);
 8008de6:	8b7b      	ldrh	r3, [r7, #26]
 8008de8:	4619      	mov	r1, r3
 8008dea:	68b8      	ldr	r0, [r7, #8]
 8008dec:	f005 fa6f 	bl	800e2ce <pbuf_try_get_at>
 8008df0:	61f8      	str	r0, [r7, #28]
    if ((n < 0) || (response_offset == 0xFFFF)) {
 8008df2:	69fb      	ldr	r3, [r7, #28]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	db04      	blt.n	8008e02 <dns_compare_name+0x2e>
 8008df8:	8b7b      	ldrh	r3, [r7, #26]
 8008dfa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008dfe:	4293      	cmp	r3, r2
 8008e00:	d102      	bne.n	8008e08 <dns_compare_name+0x34>
      /* error or overflow */
      return 0xFFFF;
 8008e02:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008e06:	e070      	b.n	8008eea <dns_compare_name+0x116>
    }
    response_offset++;
 8008e08:	8b7b      	ldrh	r3, [r7, #26]
 8008e0a:	3301      	adds	r3, #1
 8008e0c:	837b      	strh	r3, [r7, #26]
    /** @see RFC 1035 - 4.1.4. Message compression */
    if ((n & 0xc0) == 0xc0) {
 8008e0e:	69fb      	ldr	r3, [r7, #28]
 8008e10:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008e14:	2bc0      	cmp	r3, #192	; 0xc0
 8008e16:	d148      	bne.n	8008eaa <dns_compare_name+0xd6>
      /* Compressed name: cannot be equal since we don't send them */
      return 0xFFFF;
 8008e18:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008e1c:	e065      	b.n	8008eea <dns_compare_name+0x116>
    } else {
      /* Not compressed name */
      while (n > 0) {
        int c = pbuf_try_get_at(p, response_offset);
 8008e1e:	8b7b      	ldrh	r3, [r7, #26]
 8008e20:	4619      	mov	r1, r3
 8008e22:	68b8      	ldr	r0, [r7, #8]
 8008e24:	f005 fa53 	bl	800e2ce <pbuf_try_get_at>
 8008e28:	6178      	str	r0, [r7, #20]
        if (c < 0) {
 8008e2a:	697b      	ldr	r3, [r7, #20]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	da02      	bge.n	8008e36 <dns_compare_name+0x62>
          return 0xFFFF;
 8008e30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008e34:	e059      	b.n	8008eea <dns_compare_name+0x116>
        }
        if (lwip_tolower((*query)) != lwip_tolower((u8_t)c)) {
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	781b      	ldrb	r3, [r3, #0]
 8008e3a:	74fb      	strb	r3, [r7, #19]
 8008e3c:	f00e fb5a 	bl	80174f4 <__locale_ctype_ptr>
 8008e40:	4602      	mov	r2, r0
 8008e42:	7cfb      	ldrb	r3, [r7, #19]
 8008e44:	3301      	adds	r3, #1
 8008e46:	4413      	add	r3, r2
 8008e48:	781b      	ldrb	r3, [r3, #0]
 8008e4a:	f003 0303 	and.w	r3, r3, #3
 8008e4e:	2b01      	cmp	r3, #1
 8008e50:	d103      	bne.n	8008e5a <dns_compare_name+0x86>
 8008e52:	7cfb      	ldrb	r3, [r7, #19]
 8008e54:	f103 0420 	add.w	r4, r3, #32
 8008e58:	e000      	b.n	8008e5c <dns_compare_name+0x88>
 8008e5a:	7cfc      	ldrb	r4, [r7, #19]
 8008e5c:	697b      	ldr	r3, [r7, #20]
 8008e5e:	74bb      	strb	r3, [r7, #18]
 8008e60:	f00e fb48 	bl	80174f4 <__locale_ctype_ptr>
 8008e64:	4602      	mov	r2, r0
 8008e66:	7cbb      	ldrb	r3, [r7, #18]
 8008e68:	3301      	adds	r3, #1
 8008e6a:	4413      	add	r3, r2
 8008e6c:	781b      	ldrb	r3, [r3, #0]
 8008e6e:	f003 0303 	and.w	r3, r3, #3
 8008e72:	2b01      	cmp	r3, #1
 8008e74:	d102      	bne.n	8008e7c <dns_compare_name+0xa8>
 8008e76:	7cbb      	ldrb	r3, [r7, #18]
 8008e78:	3320      	adds	r3, #32
 8008e7a:	e000      	b.n	8008e7e <dns_compare_name+0xaa>
 8008e7c:	7cbb      	ldrb	r3, [r7, #18]
 8008e7e:	429c      	cmp	r4, r3
 8008e80:	d002      	beq.n	8008e88 <dns_compare_name+0xb4>
          return 0xFFFF;
 8008e82:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008e86:	e030      	b.n	8008eea <dns_compare_name+0x116>
        }
        if (response_offset == 0xFFFF) {
 8008e88:	8b7b      	ldrh	r3, [r7, #26]
 8008e8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008e8e:	4293      	cmp	r3, r2
 8008e90:	d102      	bne.n	8008e98 <dns_compare_name+0xc4>
          /* would overflow */
          return 0xFFFF;
 8008e92:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008e96:	e028      	b.n	8008eea <dns_compare_name+0x116>
        }
        response_offset++;
 8008e98:	8b7b      	ldrh	r3, [r7, #26]
 8008e9a:	3301      	adds	r3, #1
 8008e9c:	837b      	strh	r3, [r7, #26]
        ++query;
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	3301      	adds	r3, #1
 8008ea2:	60fb      	str	r3, [r7, #12]
        --n;
 8008ea4:	69fb      	ldr	r3, [r7, #28]
 8008ea6:	3b01      	subs	r3, #1
 8008ea8:	61fb      	str	r3, [r7, #28]
      while (n > 0) {
 8008eaa:	69fb      	ldr	r3, [r7, #28]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	dcb6      	bgt.n	8008e1e <dns_compare_name+0x4a>
      }
      ++query;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	3301      	adds	r3, #1
 8008eb4:	60fb      	str	r3, [r7, #12]
    }
    n = pbuf_try_get_at(p, response_offset);
 8008eb6:	8b7b      	ldrh	r3, [r7, #26]
 8008eb8:	4619      	mov	r1, r3
 8008eba:	68b8      	ldr	r0, [r7, #8]
 8008ebc:	f005 fa07 	bl	800e2ce <pbuf_try_get_at>
 8008ec0:	61f8      	str	r0, [r7, #28]
    if (n < 0) {
 8008ec2:	69fb      	ldr	r3, [r7, #28]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	da02      	bge.n	8008ece <dns_compare_name+0xfa>
      return 0xFFFF;
 8008ec8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008ecc:	e00d      	b.n	8008eea <dns_compare_name+0x116>
    }
  } while (n != 0);
 8008ece:	69fb      	ldr	r3, [r7, #28]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d188      	bne.n	8008de6 <dns_compare_name+0x12>

  if (response_offset == 0xFFFF) {
 8008ed4:	8b7b      	ldrh	r3, [r7, #26]
 8008ed6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008eda:	4293      	cmp	r3, r2
 8008edc:	d102      	bne.n	8008ee4 <dns_compare_name+0x110>
    /* would overflow */
    return 0xFFFF;
 8008ede:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008ee2:	e002      	b.n	8008eea <dns_compare_name+0x116>
  }
  return (u16_t)(response_offset + 1);
 8008ee4:	8b7b      	ldrh	r3, [r7, #26]
 8008ee6:	3301      	adds	r3, #1
 8008ee8:	b29b      	uxth	r3, r3
}
 8008eea:	4618      	mov	r0, r3
 8008eec:	3724      	adds	r7, #36	; 0x24
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	bd90      	pop	{r4, r7, pc}

08008ef2 <dns_skip_name>:
 * @param query_idx start index into p pointing to encoded DNS name in the DNS server response
 * @return index to end of the name
 */
static u16_t
dns_skip_name(struct pbuf *p, u16_t query_idx)
{
 8008ef2:	b580      	push	{r7, lr}
 8008ef4:	b084      	sub	sp, #16
 8008ef6:	af00      	add	r7, sp, #0
 8008ef8:	6078      	str	r0, [r7, #4]
 8008efa:	460b      	mov	r3, r1
 8008efc:	807b      	strh	r3, [r7, #2]
  int n;
  u16_t offset = query_idx;
 8008efe:	887b      	ldrh	r3, [r7, #2]
 8008f00:	81fb      	strh	r3, [r7, #14]

  do {
    n = pbuf_try_get_at(p, offset++);
 8008f02:	89fb      	ldrh	r3, [r7, #14]
 8008f04:	1c5a      	adds	r2, r3, #1
 8008f06:	81fa      	strh	r2, [r7, #14]
 8008f08:	4619      	mov	r1, r3
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	f005 f9df 	bl	800e2ce <pbuf_try_get_at>
 8008f10:	60b8      	str	r0, [r7, #8]
    if ((n < 0) || (offset == 0)) {
 8008f12:	68bb      	ldr	r3, [r7, #8]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	db02      	blt.n	8008f1e <dns_skip_name+0x2c>
 8008f18:	89fb      	ldrh	r3, [r7, #14]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d102      	bne.n	8008f24 <dns_skip_name+0x32>
      return 0xFFFF;
 8008f1e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008f22:	e02f      	b.n	8008f84 <dns_skip_name+0x92>
    }
    /** @see RFC 1035 - 4.1.4. Message compression */
    if ((n & 0xc0) == 0xc0) {
 8008f24:	68bb      	ldr	r3, [r7, #8]
 8008f26:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008f2a:	2bc0      	cmp	r3, #192	; 0xc0
 8008f2c:	d01e      	beq.n	8008f6c <dns_skip_name+0x7a>
      /* Compressed name: since we only want to skip it (not check it), stop here */
      break;
    } else {
      /* Not compressed name */
      if (offset + n >= p->tot_len) {
 8008f2e:	89fa      	ldrh	r2, [r7, #14]
 8008f30:	68bb      	ldr	r3, [r7, #8]
 8008f32:	4413      	add	r3, r2
 8008f34:	687a      	ldr	r2, [r7, #4]
 8008f36:	8912      	ldrh	r2, [r2, #8]
 8008f38:	4293      	cmp	r3, r2
 8008f3a:	db02      	blt.n	8008f42 <dns_skip_name+0x50>
        return 0xFFFF;
 8008f3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008f40:	e020      	b.n	8008f84 <dns_skip_name+0x92>
      }
      offset = (u16_t)(offset + n);
 8008f42:	68bb      	ldr	r3, [r7, #8]
 8008f44:	b29a      	uxth	r2, r3
 8008f46:	89fb      	ldrh	r3, [r7, #14]
 8008f48:	4413      	add	r3, r2
 8008f4a:	81fb      	strh	r3, [r7, #14]
    }
    n = pbuf_try_get_at(p, offset);
 8008f4c:	89fb      	ldrh	r3, [r7, #14]
 8008f4e:	4619      	mov	r1, r3
 8008f50:	6878      	ldr	r0, [r7, #4]
 8008f52:	f005 f9bc 	bl	800e2ce <pbuf_try_get_at>
 8008f56:	60b8      	str	r0, [r7, #8]
    if (n < 0) {
 8008f58:	68bb      	ldr	r3, [r7, #8]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	da02      	bge.n	8008f64 <dns_skip_name+0x72>
      return 0xFFFF;
 8008f5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008f62:	e00f      	b.n	8008f84 <dns_skip_name+0x92>
    }
  } while (n != 0);
 8008f64:	68bb      	ldr	r3, [r7, #8]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d1cb      	bne.n	8008f02 <dns_skip_name+0x10>
 8008f6a:	e000      	b.n	8008f6e <dns_skip_name+0x7c>
      break;
 8008f6c:	bf00      	nop

  if (offset == 0xFFFF) {
 8008f6e:	89fb      	ldrh	r3, [r7, #14]
 8008f70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008f74:	4293      	cmp	r3, r2
 8008f76:	d102      	bne.n	8008f7e <dns_skip_name+0x8c>
    return 0xFFFF;
 8008f78:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008f7c:	e002      	b.n	8008f84 <dns_skip_name+0x92>
  }
  return (u16_t)(offset + 1);
 8008f7e:	89fb      	ldrh	r3, [r7, #14]
 8008f80:	3301      	adds	r3, #1
 8008f82:	b29b      	uxth	r3, r3
}
 8008f84:	4618      	mov	r0, r3
 8008f86:	3710      	adds	r7, #16
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bd80      	pop	{r7, pc}

08008f8c <dns_send>:
 * @param idx the DNS table entry index for which to send a request
 * @return ERR_OK if packet is sent; an err_t indicating the problem otherwise
 */
static err_t
dns_send(u8_t idx)
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b090      	sub	sp, #64	; 0x40
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	4603      	mov	r3, r0
 8008f94:	71fb      	strb	r3, [r7, #7]
  struct pbuf *p;
  u16_t query_idx, copy_len;
  const char *hostname, *hostname_part;
  u8_t n;
  u8_t pcb_idx;
  struct dns_table_entry *entry = &dns_table[idx];
 8008f96:	79fa      	ldrb	r2, [r7, #7]
 8008f98:	4613      	mov	r3, r2
 8008f9a:	011b      	lsls	r3, r3, #4
 8008f9c:	4413      	add	r3, r2
 8008f9e:	011b      	lsls	r3, r3, #4
 8008fa0:	4a6c      	ldr	r2, [pc, #432]	; (8009154 <dns_send+0x1c8>)
 8008fa2:	4413      	add	r3, r2
 8008fa4:	633b      	str	r3, [r7, #48]	; 0x30

  LWIP_DEBUGF(DNS_DEBUG, ("dns_send: dns_servers[%"U16_F"] \"%s\": request\n",
                          (u16_t)(entry->server_idx), entry->name));
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 8008fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fa8:	7adb      	ldrb	r3, [r3, #11]
 8008faa:	2b01      	cmp	r3, #1
 8008fac:	d906      	bls.n	8008fbc <dns_send+0x30>
 8008fae:	4b6a      	ldr	r3, [pc, #424]	; (8009158 <dns_send+0x1cc>)
 8008fb0:	f240 22fa 	movw	r2, #762	; 0x2fa
 8008fb4:	4969      	ldr	r1, [pc, #420]	; (800915c <dns_send+0x1d0>)
 8008fb6:	486a      	ldr	r0, [pc, #424]	; (8009160 <dns_send+0x1d4>)
 8008fb8:	f00e fbac 	bl	8017714 <iprintf>
  if (ip_addr_isany_val(dns_servers[entry->server_idx])
 8008fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fbe:	7adb      	ldrb	r3, [r3, #11]
 8008fc0:	461a      	mov	r2, r3
 8008fc2:	4b68      	ldr	r3, [pc, #416]	; (8009164 <dns_send+0x1d8>)
 8008fc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d109      	bne.n	8008fe0 <dns_send+0x54>
      && !entry->is_mdns
#endif
     ) {
    /* DNS server not valid anymore, e.g. PPP netif has been shut down */
    /* call specified callback function if provided */
    dns_call_found(idx, NULL);
 8008fcc:	79fb      	ldrb	r3, [r7, #7]
 8008fce:	2100      	movs	r1, #0
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	f000 f959 	bl	8009288 <dns_call_found>
    /* flush this entry */
    entry->state = DNS_STATE_UNUSED;
 8008fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fd8:	2200      	movs	r2, #0
 8008fda:	729a      	strb	r2, [r3, #10]
    return ERR_OK;
 8008fdc:	2300      	movs	r3, #0
 8008fde:	e0b4      	b.n	800914a <dns_send+0x1be>
  }

  /* if here, we have either a new query or a retry on a previous query to process */
  p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(SIZEOF_DNS_HDR + strlen(entry->name) + 2 +
 8008fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fe2:	3310      	adds	r3, #16
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	f7f7 f92b 	bl	8000240 <strlen>
 8008fea:	4603      	mov	r3, r0
 8008fec:	b29b      	uxth	r3, r3
 8008fee:	3312      	adds	r3, #18
 8008ff0:	b29b      	uxth	r3, r3
 8008ff2:	f44f 7220 	mov.w	r2, #640	; 0x280
 8008ff6:	4619      	mov	r1, r3
 8008ff8:	2036      	movs	r0, #54	; 0x36
 8008ffa:	f004 fa5b 	bl	800d4b4 <pbuf_alloc>
 8008ffe:	62f8      	str	r0, [r7, #44]	; 0x2c
                                         SIZEOF_DNS_QUERY), PBUF_RAM);
  if (p != NULL) {
 8009000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009002:	2b00      	cmp	r3, #0
 8009004:	f000 8095 	beq.w	8009132 <dns_send+0x1a6>
    const ip_addr_t *dst;
    u16_t dst_port;
    /* fill dns header */
    memset(&hdr, 0, SIZEOF_DNS_HDR);
 8009008:	f107 0310 	add.w	r3, r7, #16
 800900c:	220c      	movs	r2, #12
 800900e:	2100      	movs	r1, #0
 8009010:	4618      	mov	r0, r3
 8009012:	f00e facb 	bl	80175ac <memset>
    hdr.id = lwip_htons(entry->txid);
 8009016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009018:	891b      	ldrh	r3, [r3, #8]
 800901a:	4618      	mov	r0, r3
 800901c:	f7ff fdfe 	bl	8008c1c <lwip_htons>
 8009020:	4603      	mov	r3, r0
 8009022:	823b      	strh	r3, [r7, #16]
    hdr.flags1 = DNS_FLAG1_RD;
 8009024:	2301      	movs	r3, #1
 8009026:	74bb      	strb	r3, [r7, #18]
    hdr.numquestions = PP_HTONS(1);
 8009028:	f44f 7380 	mov.w	r3, #256	; 0x100
 800902c:	82bb      	strh	r3, [r7, #20]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 800902e:	f107 0310 	add.w	r3, r7, #16
 8009032:	220c      	movs	r2, #12
 8009034:	4619      	mov	r1, r3
 8009036:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009038:	f005 f804 	bl	800e044 <pbuf_take>
    hostname = entry->name;
 800903c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800903e:	3310      	adds	r3, #16
 8009040:	63bb      	str	r3, [r7, #56]	; 0x38
    --hostname;
 8009042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009044:	3b01      	subs	r3, #1
 8009046:	63bb      	str	r3, [r7, #56]	; 0x38

    /* convert hostname into suitable query format. */
    query_idx = SIZEOF_DNS_HDR;
 8009048:	230c      	movs	r3, #12
 800904a:	87bb      	strh	r3, [r7, #60]	; 0x3c
    do {
      ++hostname;
 800904c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800904e:	3301      	adds	r3, #1
 8009050:	63bb      	str	r3, [r7, #56]	; 0x38
      hostname_part = hostname;
 8009052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009054:	62bb      	str	r3, [r7, #40]	; 0x28
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 8009056:	2300      	movs	r3, #0
 8009058:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800905c:	e007      	b.n	800906e <dns_send+0xe2>
        ++n;
 800905e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009062:	3301      	adds	r3, #1
 8009064:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 8009068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800906a:	3301      	adds	r3, #1
 800906c:	63bb      	str	r3, [r7, #56]	; 0x38
 800906e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009070:	781b      	ldrb	r3, [r3, #0]
 8009072:	2b2e      	cmp	r3, #46	; 0x2e
 8009074:	d003      	beq.n	800907e <dns_send+0xf2>
 8009076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009078:	781b      	ldrb	r3, [r3, #0]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d1ef      	bne.n	800905e <dns_send+0xd2>
      }
      copy_len = (u16_t)(hostname - hostname_part);
 800907e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009082:	1ad3      	subs	r3, r2, r3
 8009084:	84fb      	strh	r3, [r7, #38]	; 0x26
      if (query_idx + n + 1 > 0xFFFF) {
 8009086:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8009088:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800908c:	4413      	add	r3, r2
 800908e:	3301      	adds	r3, #1
 8009090:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009094:	da53      	bge.n	800913e <dns_send+0x1b2>
        /* u16_t overflow */
        goto overflow_return;
      }
      pbuf_put_at(p, query_idx, n);
 8009096:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800909a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800909c:	4619      	mov	r1, r3
 800909e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80090a0:	f005 f937 	bl	800e312 <pbuf_put_at>
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
 80090a4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80090a6:	3301      	adds	r3, #1
 80090a8:	b29b      	uxth	r3, r3
 80090aa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80090ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80090ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80090b0:	f005 f85a 	bl	800e168 <pbuf_take_at>
      query_idx = (u16_t)(query_idx + n + 1);
 80090b4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80090b8:	b29a      	uxth	r2, r3
 80090ba:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80090bc:	4413      	add	r3, r2
 80090be:	b29b      	uxth	r3, r3
 80090c0:	3301      	adds	r3, #1
 80090c2:	87bb      	strh	r3, [r7, #60]	; 0x3c
    } while (*hostname != 0);
 80090c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090c6:	781b      	ldrb	r3, [r3, #0]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d1bf      	bne.n	800904c <dns_send+0xc0>
    pbuf_put_at(p, query_idx, 0);
 80090cc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80090ce:	2200      	movs	r2, #0
 80090d0:	4619      	mov	r1, r3
 80090d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80090d4:	f005 f91d 	bl	800e312 <pbuf_put_at>
    query_idx++;
 80090d8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80090da:	3301      	adds	r3, #1
 80090dc:	87bb      	strh	r3, [r7, #60]	; 0x3c

    /* fill dns query */
    if (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype)) {
      qry.type = PP_HTONS(DNS_RRTYPE_AAAA);
    } else {
      qry.type = PP_HTONS(DNS_RRTYPE_A);
 80090de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80090e2:	81bb      	strh	r3, [r7, #12]
    }
    qry.cls = PP_HTONS(DNS_RRCLASS_IN);
 80090e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80090e8:	81fb      	strh	r3, [r7, #14]
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 80090ea:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80090ec:	f107 010c 	add.w	r1, r7, #12
 80090f0:	2204      	movs	r2, #4
 80090f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80090f4:	f005 f838 	bl	800e168 <pbuf_take_at>

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
    pcb_idx = entry->pcb_idx;
 80090f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090fa:	7bdb      	ldrb	r3, [r3, #15]
 80090fc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
      }
#endif
    } else
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
    {
      dst_port = DNS_SERVER_PORT;
 8009100:	2335      	movs	r3, #53	; 0x35
 8009102:	847b      	strh	r3, [r7, #34]	; 0x22
      dst = &dns_servers[entry->server_idx];
 8009104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009106:	7adb      	ldrb	r3, [r3, #11]
 8009108:	009b      	lsls	r3, r3, #2
 800910a:	4a16      	ldr	r2, [pc, #88]	; (8009164 <dns_send+0x1d8>)
 800910c:	4413      	add	r3, r2
 800910e:	61fb      	str	r3, [r7, #28]
    }
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 8009110:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8009114:	4a14      	ldr	r2, [pc, #80]	; (8009168 <dns_send+0x1dc>)
 8009116:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800911a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800911c:	69fa      	ldr	r2, [r7, #28]
 800911e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009120:	f00b fca0 	bl	8014a64 <udp_sendto>
 8009124:	4603      	mov	r3, r0
 8009126:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

    /* free pbuf */
    pbuf_free(p);
 800912a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800912c:	f004 fcd6 	bl	800dadc <pbuf_free>
 8009130:	e002      	b.n	8009138 <dns_send+0x1ac>
  } else {
    err = ERR_MEM;
 8009132:	23ff      	movs	r3, #255	; 0xff
 8009134:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return err;
 8009138:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800913c:	e005      	b.n	800914a <dns_send+0x1be>
        goto overflow_return;
 800913e:	bf00      	nop
overflow_return:
  pbuf_free(p);
 8009140:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009142:	f004 fccb 	bl	800dadc <pbuf_free>
  return ERR_VAL;
 8009146:	f06f 0305 	mvn.w	r3, #5
}
 800914a:	4618      	mov	r0, r3
 800914c:	3740      	adds	r7, #64	; 0x40
 800914e:	46bd      	mov	sp, r7
 8009150:	bd80      	pop	{r7, pc}
 8009152:	bf00      	nop
 8009154:	20003f74 	.word	0x20003f74
 8009158:	08018cc8 	.word	0x08018cc8
 800915c:	08018cf8 	.word	0x08018cf8
 8009160:	08018d10 	.word	0x08018d10
 8009164:	200043e4 	.word	0x200043e4
 8009168:	20003f60 	.word	0x20003f60

0800916c <dns_alloc_random_port>:

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
static struct udp_pcb *
dns_alloc_random_port(void)
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b084      	sub	sp, #16
 8009170:	af00      	add	r7, sp, #0
  err_t err;
  struct udp_pcb *pcb;

  pcb = udp_new_ip_type(IPADDR_TYPE_ANY);
 8009172:	202e      	movs	r0, #46	; 0x2e
 8009174:	f00b ff2f 	bl	8014fd6 <udp_new_ip_type>
 8009178:	60b8      	str	r0, [r7, #8]
  if (pcb == NULL) {
 800917a:	68bb      	ldr	r3, [r7, #8]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d101      	bne.n	8009184 <dns_alloc_random_port+0x18>
    /* out of memory, have to reuse an existing pcb */
    return NULL;
 8009180:	2300      	movs	r3, #0
 8009182:	e026      	b.n	80091d2 <dns_alloc_random_port+0x66>
  }
  do {
    u16_t port = (u16_t)DNS_RAND_TXID();
 8009184:	f00e fade 	bl	8017744 <rand>
 8009188:	4603      	mov	r3, r0
 800918a:	80fb      	strh	r3, [r7, #6]
    if (DNS_PORT_ALLOWED(port)) {
 800918c:	88fb      	ldrh	r3, [r7, #6]
 800918e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009192:	d308      	bcc.n	80091a6 <dns_alloc_random_port+0x3a>
      err = udp_bind(pcb, IP_ANY_TYPE, port);
 8009194:	88fb      	ldrh	r3, [r7, #6]
 8009196:	461a      	mov	r2, r3
 8009198:	4910      	ldr	r1, [pc, #64]	; (80091dc <dns_alloc_random_port+0x70>)
 800919a:	68b8      	ldr	r0, [r7, #8]
 800919c:	f00b fe1a 	bl	8014dd4 <udp_bind>
 80091a0:	4603      	mov	r3, r0
 80091a2:	73fb      	strb	r3, [r7, #15]
 80091a4:	e001      	b.n	80091aa <dns_alloc_random_port+0x3e>
    } else {
      /* this port is not allowed, try again */
      err = ERR_USE;
 80091a6:	23f8      	movs	r3, #248	; 0xf8
 80091a8:	73fb      	strb	r3, [r7, #15]
    }
  } while (err == ERR_USE);
 80091aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80091ae:	f113 0f08 	cmn.w	r3, #8
 80091b2:	d0e7      	beq.n	8009184 <dns_alloc_random_port+0x18>
  if (err != ERR_OK) {
 80091b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d004      	beq.n	80091c6 <dns_alloc_random_port+0x5a>
    udp_remove(pcb);
 80091bc:	68b8      	ldr	r0, [r7, #8]
 80091be:	f00b feb1 	bl	8014f24 <udp_remove>
    return NULL;
 80091c2:	2300      	movs	r3, #0
 80091c4:	e005      	b.n	80091d2 <dns_alloc_random_port+0x66>
  }
  udp_recv(pcb, dns_recv, NULL);
 80091c6:	2200      	movs	r2, #0
 80091c8:	4905      	ldr	r1, [pc, #20]	; (80091e0 <dns_alloc_random_port+0x74>)
 80091ca:	68b8      	ldr	r0, [r7, #8]
 80091cc:	f00b fe8a 	bl	8014ee4 <udp_recv>
  return pcb;
 80091d0:	68bb      	ldr	r3, [r7, #8]
}
 80091d2:	4618      	mov	r0, r3
 80091d4:	3710      	adds	r7, #16
 80091d6:	46bd      	mov	sp, r7
 80091d8:	bd80      	pop	{r7, pc}
 80091da:	bf00      	nop
 80091dc:	0801ba9c 	.word	0x0801ba9c
 80091e0:	0800968d 	.word	0x0800968d

080091e4 <dns_alloc_pcb>:
 *
 * @return an index into dns_pcbs
 */
static u8_t
dns_alloc_pcb(void)
{
 80091e4:	b590      	push	{r4, r7, lr}
 80091e6:	b083      	sub	sp, #12
 80091e8:	af00      	add	r7, sp, #0
  u8_t i;
  u8_t idx;

  for (i = 0; i < DNS_MAX_SOURCE_PORTS; i++) {
 80091ea:	2300      	movs	r3, #0
 80091ec:	71fb      	strb	r3, [r7, #7]
 80091ee:	e008      	b.n	8009202 <dns_alloc_pcb+0x1e>
    if (dns_pcbs[i] == NULL) {
 80091f0:	79fb      	ldrb	r3, [r7, #7]
 80091f2:	4a23      	ldr	r2, [pc, #140]	; (8009280 <dns_alloc_pcb+0x9c>)
 80091f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d006      	beq.n	800920a <dns_alloc_pcb+0x26>
  for (i = 0; i < DNS_MAX_SOURCE_PORTS; i++) {
 80091fc:	79fb      	ldrb	r3, [r7, #7]
 80091fe:	3301      	adds	r3, #1
 8009200:	71fb      	strb	r3, [r7, #7]
 8009202:	79fb      	ldrb	r3, [r7, #7]
 8009204:	2b03      	cmp	r3, #3
 8009206:	d9f3      	bls.n	80091f0 <dns_alloc_pcb+0xc>
 8009208:	e000      	b.n	800920c <dns_alloc_pcb+0x28>
      break;
 800920a:	bf00      	nop
    }
  }
  if (i < DNS_MAX_SOURCE_PORTS) {
 800920c:	79fb      	ldrb	r3, [r7, #7]
 800920e:	2b03      	cmp	r3, #3
 8009210:	d811      	bhi.n	8009236 <dns_alloc_pcb+0x52>
    dns_pcbs[i] = dns_alloc_random_port();
 8009212:	79fc      	ldrb	r4, [r7, #7]
 8009214:	f7ff ffaa 	bl	800916c <dns_alloc_random_port>
 8009218:	4602      	mov	r2, r0
 800921a:	4b19      	ldr	r3, [pc, #100]	; (8009280 <dns_alloc_pcb+0x9c>)
 800921c:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    if (dns_pcbs[i] != NULL) {
 8009220:	79fb      	ldrb	r3, [r7, #7]
 8009222:	4a17      	ldr	r2, [pc, #92]	; (8009280 <dns_alloc_pcb+0x9c>)
 8009224:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d004      	beq.n	8009236 <dns_alloc_pcb+0x52>
      /* succeeded */
      dns_last_pcb_idx = i;
 800922c:	4a15      	ldr	r2, [pc, #84]	; (8009284 <dns_alloc_pcb+0xa0>)
 800922e:	79fb      	ldrb	r3, [r7, #7]
 8009230:	7013      	strb	r3, [r2, #0]
      return i;
 8009232:	79fb      	ldrb	r3, [r7, #7]
 8009234:	e020      	b.n	8009278 <dns_alloc_pcb+0x94>
    }
  }
  /* if we come here, creating a new UDP pcb failed, so we have to use
     an already existing one (so overflow is no issue) */
  for (i = 0, idx = (u8_t)(dns_last_pcb_idx + 1); i < DNS_MAX_SOURCE_PORTS; i++, idx++) {
 8009236:	2300      	movs	r3, #0
 8009238:	71fb      	strb	r3, [r7, #7]
 800923a:	4b12      	ldr	r3, [pc, #72]	; (8009284 <dns_alloc_pcb+0xa0>)
 800923c:	781b      	ldrb	r3, [r3, #0]
 800923e:	3301      	adds	r3, #1
 8009240:	71bb      	strb	r3, [r7, #6]
 8009242:	e015      	b.n	8009270 <dns_alloc_pcb+0x8c>
    if (idx >= DNS_MAX_SOURCE_PORTS) {
 8009244:	79bb      	ldrb	r3, [r7, #6]
 8009246:	2b03      	cmp	r3, #3
 8009248:	d901      	bls.n	800924e <dns_alloc_pcb+0x6a>
      idx = 0;
 800924a:	2300      	movs	r3, #0
 800924c:	71bb      	strb	r3, [r7, #6]
    }
    if (dns_pcbs[idx] != NULL) {
 800924e:	79bb      	ldrb	r3, [r7, #6]
 8009250:	4a0b      	ldr	r2, [pc, #44]	; (8009280 <dns_alloc_pcb+0x9c>)
 8009252:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d004      	beq.n	8009264 <dns_alloc_pcb+0x80>
      dns_last_pcb_idx = idx;
 800925a:	4a0a      	ldr	r2, [pc, #40]	; (8009284 <dns_alloc_pcb+0xa0>)
 800925c:	79bb      	ldrb	r3, [r7, #6]
 800925e:	7013      	strb	r3, [r2, #0]
      return idx;
 8009260:	79bb      	ldrb	r3, [r7, #6]
 8009262:	e009      	b.n	8009278 <dns_alloc_pcb+0x94>
  for (i = 0, idx = (u8_t)(dns_last_pcb_idx + 1); i < DNS_MAX_SOURCE_PORTS; i++, idx++) {
 8009264:	79fb      	ldrb	r3, [r7, #7]
 8009266:	3301      	adds	r3, #1
 8009268:	71fb      	strb	r3, [r7, #7]
 800926a:	79bb      	ldrb	r3, [r7, #6]
 800926c:	3301      	adds	r3, #1
 800926e:	71bb      	strb	r3, [r7, #6]
 8009270:	79fb      	ldrb	r3, [r7, #7]
 8009272:	2b03      	cmp	r3, #3
 8009274:	d9e6      	bls.n	8009244 <dns_alloc_pcb+0x60>
    }
  }
  return DNS_MAX_SOURCE_PORTS;
 8009276:	2304      	movs	r3, #4
}
 8009278:	4618      	mov	r0, r3
 800927a:	370c      	adds	r7, #12
 800927c:	46bd      	mov	sp, r7
 800927e:	bd90      	pop	{r4, r7, pc}
 8009280:	20003f60 	.word	0x20003f60
 8009284:	20003f70 	.word	0x20003f70

08009288 <dns_call_found>:
 * @param idx dns table index of the entry that is resolved or removed
 * @param addr IP address for the hostname (or NULL on error or memory shortage)
 */
static void
dns_call_found(u8_t idx, ip_addr_t *addr)
{
 8009288:	b590      	push	{r4, r7, lr}
 800928a:	b085      	sub	sp, #20
 800928c:	af00      	add	r7, sp, #0
 800928e:	4603      	mov	r3, r0
 8009290:	6039      	str	r1, [r7, #0]
 8009292:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8009294:	2300      	movs	r3, #0
 8009296:	73fb      	strb	r3, [r7, #15]
 8009298:	e03d      	b.n	8009316 <dns_call_found+0x8e>
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
 800929a:	7bfa      	ldrb	r2, [r7, #15]
 800929c:	4957      	ldr	r1, [pc, #348]	; (80093fc <dns_call_found+0x174>)
 800929e:	4613      	mov	r3, r2
 80092a0:	005b      	lsls	r3, r3, #1
 80092a2:	4413      	add	r3, r2
 80092a4:	009b      	lsls	r3, r3, #2
 80092a6:	440b      	add	r3, r1
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d030      	beq.n	8009310 <dns_call_found+0x88>
 80092ae:	7bfa      	ldrb	r2, [r7, #15]
 80092b0:	4952      	ldr	r1, [pc, #328]	; (80093fc <dns_call_found+0x174>)
 80092b2:	4613      	mov	r3, r2
 80092b4:	005b      	lsls	r3, r3, #1
 80092b6:	4413      	add	r3, r2
 80092b8:	009b      	lsls	r3, r3, #2
 80092ba:	440b      	add	r3, r1
 80092bc:	3308      	adds	r3, #8
 80092be:	781b      	ldrb	r3, [r3, #0]
 80092c0:	79fa      	ldrb	r2, [r7, #7]
 80092c2:	429a      	cmp	r2, r3
 80092c4:	d124      	bne.n	8009310 <dns_call_found+0x88>
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 80092c6:	7bfa      	ldrb	r2, [r7, #15]
 80092c8:	494c      	ldr	r1, [pc, #304]	; (80093fc <dns_call_found+0x174>)
 80092ca:	4613      	mov	r3, r2
 80092cc:	005b      	lsls	r3, r3, #1
 80092ce:	4413      	add	r3, r2
 80092d0:	009b      	lsls	r3, r3, #2
 80092d2:	440b      	add	r3, r1
 80092d4:	681c      	ldr	r4, [r3, #0]
 80092d6:	79fa      	ldrb	r2, [r7, #7]
 80092d8:	4613      	mov	r3, r2
 80092da:	011b      	lsls	r3, r3, #4
 80092dc:	4413      	add	r3, r2
 80092de:	011b      	lsls	r3, r3, #4
 80092e0:	3310      	adds	r3, #16
 80092e2:	4a47      	ldr	r2, [pc, #284]	; (8009400 <dns_call_found+0x178>)
 80092e4:	1898      	adds	r0, r3, r2
 80092e6:	7bfa      	ldrb	r2, [r7, #15]
 80092e8:	4944      	ldr	r1, [pc, #272]	; (80093fc <dns_call_found+0x174>)
 80092ea:	4613      	mov	r3, r2
 80092ec:	005b      	lsls	r3, r3, #1
 80092ee:	4413      	add	r3, r2
 80092f0:	009b      	lsls	r3, r3, #2
 80092f2:	440b      	add	r3, r1
 80092f4:	3304      	adds	r3, #4
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	461a      	mov	r2, r3
 80092fa:	6839      	ldr	r1, [r7, #0]
 80092fc:	47a0      	blx	r4
      /* flush this entry */
      dns_requests[i].found = NULL;
 80092fe:	7bfa      	ldrb	r2, [r7, #15]
 8009300:	493e      	ldr	r1, [pc, #248]	; (80093fc <dns_call_found+0x174>)
 8009302:	4613      	mov	r3, r2
 8009304:	005b      	lsls	r3, r3, #1
 8009306:	4413      	add	r3, r2
 8009308:	009b      	lsls	r3, r3, #2
 800930a:	440b      	add	r3, r1
 800930c:	2200      	movs	r2, #0
 800930e:	601a      	str	r2, [r3, #0]
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8009310:	7bfb      	ldrb	r3, [r7, #15]
 8009312:	3301      	adds	r3, #1
 8009314:	73fb      	strb	r3, [r7, #15]
 8009316:	7bfb      	ldrb	r3, [r7, #15]
 8009318:	2b03      	cmp	r3, #3
 800931a:	d9be      	bls.n	800929a <dns_call_found+0x12>
  }
  dns_requests[idx].found = NULL;
#endif
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
  /* close the pcb used unless other request are using it */
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 800931c:	2300      	movs	r3, #0
 800931e:	73fb      	strb	r3, [r7, #15]
 8009320:	e031      	b.n	8009386 <dns_call_found+0xfe>
    if (i == idx) {
 8009322:	7bfa      	ldrb	r2, [r7, #15]
 8009324:	79fb      	ldrb	r3, [r7, #7]
 8009326:	429a      	cmp	r2, r3
 8009328:	d029      	beq.n	800937e <dns_call_found+0xf6>
      continue; /* only check other requests */
    }
    if (dns_table[i].state == DNS_STATE_ASKING) {
 800932a:	7bfa      	ldrb	r2, [r7, #15]
 800932c:	4934      	ldr	r1, [pc, #208]	; (8009400 <dns_call_found+0x178>)
 800932e:	4613      	mov	r3, r2
 8009330:	011b      	lsls	r3, r3, #4
 8009332:	4413      	add	r3, r2
 8009334:	011b      	lsls	r3, r3, #4
 8009336:	440b      	add	r3, r1
 8009338:	330a      	adds	r3, #10
 800933a:	781b      	ldrb	r3, [r3, #0]
 800933c:	2b02      	cmp	r3, #2
 800933e:	d11f      	bne.n	8009380 <dns_call_found+0xf8>
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
 8009340:	7bfa      	ldrb	r2, [r7, #15]
 8009342:	492f      	ldr	r1, [pc, #188]	; (8009400 <dns_call_found+0x178>)
 8009344:	4613      	mov	r3, r2
 8009346:	011b      	lsls	r3, r3, #4
 8009348:	4413      	add	r3, r2
 800934a:	011b      	lsls	r3, r3, #4
 800934c:	440b      	add	r3, r1
 800934e:	330f      	adds	r3, #15
 8009350:	7819      	ldrb	r1, [r3, #0]
 8009352:	79fa      	ldrb	r2, [r7, #7]
 8009354:	482a      	ldr	r0, [pc, #168]	; (8009400 <dns_call_found+0x178>)
 8009356:	4613      	mov	r3, r2
 8009358:	011b      	lsls	r3, r3, #4
 800935a:	4413      	add	r3, r2
 800935c:	011b      	lsls	r3, r3, #4
 800935e:	4403      	add	r3, r0
 8009360:	330f      	adds	r3, #15
 8009362:	781b      	ldrb	r3, [r3, #0]
 8009364:	4299      	cmp	r1, r3
 8009366:	d10b      	bne.n	8009380 <dns_call_found+0xf8>
        /* another request is still using the same pcb */
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 8009368:	79fa      	ldrb	r2, [r7, #7]
 800936a:	4925      	ldr	r1, [pc, #148]	; (8009400 <dns_call_found+0x178>)
 800936c:	4613      	mov	r3, r2
 800936e:	011b      	lsls	r3, r3, #4
 8009370:	4413      	add	r3, r2
 8009372:	011b      	lsls	r3, r3, #4
 8009374:	440b      	add	r3, r1
 8009376:	330f      	adds	r3, #15
 8009378:	2204      	movs	r2, #4
 800937a:	701a      	strb	r2, [r3, #0]
        break;
 800937c:	e006      	b.n	800938c <dns_call_found+0x104>
      continue; /* only check other requests */
 800937e:	bf00      	nop
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8009380:	7bfb      	ldrb	r3, [r7, #15]
 8009382:	3301      	adds	r3, #1
 8009384:	73fb      	strb	r3, [r7, #15]
 8009386:	7bfb      	ldrb	r3, [r7, #15]
 8009388:	2b03      	cmp	r3, #3
 800938a:	d9ca      	bls.n	8009322 <dns_call_found+0x9a>
      }
    }
  }
  if (dns_table[idx].pcb_idx < DNS_MAX_SOURCE_PORTS) {
 800938c:	79fa      	ldrb	r2, [r7, #7]
 800938e:	491c      	ldr	r1, [pc, #112]	; (8009400 <dns_call_found+0x178>)
 8009390:	4613      	mov	r3, r2
 8009392:	011b      	lsls	r3, r3, #4
 8009394:	4413      	add	r3, r2
 8009396:	011b      	lsls	r3, r3, #4
 8009398:	440b      	add	r3, r1
 800939a:	330f      	adds	r3, #15
 800939c:	781b      	ldrb	r3, [r3, #0]
 800939e:	2b03      	cmp	r3, #3
 80093a0:	d827      	bhi.n	80093f2 <dns_call_found+0x16a>
    /* if we come here, the pcb is not used any more and can be removed */
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
 80093a2:	79fa      	ldrb	r2, [r7, #7]
 80093a4:	4916      	ldr	r1, [pc, #88]	; (8009400 <dns_call_found+0x178>)
 80093a6:	4613      	mov	r3, r2
 80093a8:	011b      	lsls	r3, r3, #4
 80093aa:	4413      	add	r3, r2
 80093ac:	011b      	lsls	r3, r3, #4
 80093ae:	440b      	add	r3, r1
 80093b0:	330f      	adds	r3, #15
 80093b2:	781b      	ldrb	r3, [r3, #0]
 80093b4:	461a      	mov	r2, r3
 80093b6:	4b13      	ldr	r3, [pc, #76]	; (8009404 <dns_call_found+0x17c>)
 80093b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093bc:	4618      	mov	r0, r3
 80093be:	f00b fdb1 	bl	8014f24 <udp_remove>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 80093c2:	79fa      	ldrb	r2, [r7, #7]
 80093c4:	490e      	ldr	r1, [pc, #56]	; (8009400 <dns_call_found+0x178>)
 80093c6:	4613      	mov	r3, r2
 80093c8:	011b      	lsls	r3, r3, #4
 80093ca:	4413      	add	r3, r2
 80093cc:	011b      	lsls	r3, r3, #4
 80093ce:	440b      	add	r3, r1
 80093d0:	330f      	adds	r3, #15
 80093d2:	781b      	ldrb	r3, [r3, #0]
 80093d4:	4619      	mov	r1, r3
 80093d6:	4b0b      	ldr	r3, [pc, #44]	; (8009404 <dns_call_found+0x17c>)
 80093d8:	2200      	movs	r2, #0
 80093da:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
    dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 80093de:	79fa      	ldrb	r2, [r7, #7]
 80093e0:	4907      	ldr	r1, [pc, #28]	; (8009400 <dns_call_found+0x178>)
 80093e2:	4613      	mov	r3, r2
 80093e4:	011b      	lsls	r3, r3, #4
 80093e6:	4413      	add	r3, r2
 80093e8:	011b      	lsls	r3, r3, #4
 80093ea:	440b      	add	r3, r1
 80093ec:	330f      	adds	r3, #15
 80093ee:	2204      	movs	r2, #4
 80093f0:	701a      	strb	r2, [r3, #0]
  }
#endif
}
 80093f2:	bf00      	nop
 80093f4:	3714      	adds	r7, #20
 80093f6:	46bd      	mov	sp, r7
 80093f8:	bd90      	pop	{r4, r7, pc}
 80093fa:	bf00      	nop
 80093fc:	200043b4 	.word	0x200043b4
 8009400:	20003f74 	.word	0x20003f74
 8009404:	20003f60 	.word	0x20003f60

08009408 <dns_create_txid>:

/* Create a query transmission ID that is unique for all outstanding queries */
static u16_t
dns_create_txid(void)
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b082      	sub	sp, #8
 800940c:	af00      	add	r7, sp, #0
  u16_t txid;
  u8_t i;

again:
  txid = (u16_t)DNS_RAND_TXID();
 800940e:	f00e f999 	bl	8017744 <rand>
 8009412:	4603      	mov	r3, r0
 8009414:	80bb      	strh	r3, [r7, #4]

  /* check whether the ID is unique */
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 8009416:	2300      	movs	r3, #0
 8009418:	71fb      	strb	r3, [r7, #7]
 800941a:	e01a      	b.n	8009452 <dns_create_txid+0x4a>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 800941c:	79fa      	ldrb	r2, [r7, #7]
 800941e:	4911      	ldr	r1, [pc, #68]	; (8009464 <dns_create_txid+0x5c>)
 8009420:	4613      	mov	r3, r2
 8009422:	011b      	lsls	r3, r3, #4
 8009424:	4413      	add	r3, r2
 8009426:	011b      	lsls	r3, r3, #4
 8009428:	440b      	add	r3, r1
 800942a:	330a      	adds	r3, #10
 800942c:	781b      	ldrb	r3, [r3, #0]
 800942e:	2b02      	cmp	r3, #2
 8009430:	d10c      	bne.n	800944c <dns_create_txid+0x44>
        (dns_table[i].txid == txid)) {
 8009432:	79fa      	ldrb	r2, [r7, #7]
 8009434:	490b      	ldr	r1, [pc, #44]	; (8009464 <dns_create_txid+0x5c>)
 8009436:	4613      	mov	r3, r2
 8009438:	011b      	lsls	r3, r3, #4
 800943a:	4413      	add	r3, r2
 800943c:	011b      	lsls	r3, r3, #4
 800943e:	440b      	add	r3, r1
 8009440:	3308      	adds	r3, #8
 8009442:	881b      	ldrh	r3, [r3, #0]
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 8009444:	88ba      	ldrh	r2, [r7, #4]
 8009446:	429a      	cmp	r2, r3
 8009448:	d100      	bne.n	800944c <dns_create_txid+0x44>
      /* ID already used by another pending query */
      goto again;
 800944a:	e7e0      	b.n	800940e <dns_create_txid+0x6>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 800944c:	79fb      	ldrb	r3, [r7, #7]
 800944e:	3301      	adds	r3, #1
 8009450:	71fb      	strb	r3, [r7, #7]
 8009452:	79fb      	ldrb	r3, [r7, #7]
 8009454:	2b03      	cmp	r3, #3
 8009456:	d9e1      	bls.n	800941c <dns_create_txid+0x14>
    }
  }

  return txid;
 8009458:	88bb      	ldrh	r3, [r7, #4]
}
 800945a:	4618      	mov	r0, r3
 800945c:	3708      	adds	r7, #8
 800945e:	46bd      	mov	sp, r7
 8009460:	bd80      	pop	{r7, pc}
 8009462:	bf00      	nop
 8009464:	20003f74 	.word	0x20003f74

08009468 <dns_backupserver_available>:
/**
 * Check whether there are other backup DNS servers available to try
 */
static u8_t
dns_backupserver_available(struct dns_table_entry *pentry)
{
 8009468:	b480      	push	{r7}
 800946a:	b085      	sub	sp, #20
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
  u8_t ret = 0;
 8009470:	2300      	movs	r3, #0
 8009472:	73fb      	strb	r3, [r7, #15]

  if (pentry) {
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d00e      	beq.n	8009498 <dns_backupserver_available+0x30>
    if ((pentry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[pentry->server_idx + 1])) {
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	7adb      	ldrb	r3, [r3, #11]
 800947e:	3301      	adds	r3, #1
 8009480:	2b01      	cmp	r3, #1
 8009482:	dc09      	bgt.n	8009498 <dns_backupserver_available+0x30>
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	7adb      	ldrb	r3, [r3, #11]
 8009488:	3301      	adds	r3, #1
 800948a:	4a07      	ldr	r2, [pc, #28]	; (80094a8 <dns_backupserver_available+0x40>)
 800948c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d001      	beq.n	8009498 <dns_backupserver_available+0x30>
      ret = 1;
 8009494:	2301      	movs	r3, #1
 8009496:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8009498:	7bfb      	ldrb	r3, [r7, #15]
}
 800949a:	4618      	mov	r0, r3
 800949c:	3714      	adds	r7, #20
 800949e:	46bd      	mov	sp, r7
 80094a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a4:	4770      	bx	lr
 80094a6:	bf00      	nop
 80094a8:	200043e4 	.word	0x200043e4

080094ac <dns_check_entry>:
 *
 * @param i index of the dns_table entry to check
 */
static void
dns_check_entry(u8_t i)
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b084      	sub	sp, #16
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	4603      	mov	r3, r0
 80094b4:	71fb      	strb	r3, [r7, #7]
  err_t err;
  struct dns_table_entry *entry = &dns_table[i];
 80094b6:	79fa      	ldrb	r2, [r7, #7]
 80094b8:	4613      	mov	r3, r2
 80094ba:	011b      	lsls	r3, r3, #4
 80094bc:	4413      	add	r3, r2
 80094be:	011b      	lsls	r3, r3, #4
 80094c0:	4a48      	ldr	r2, [pc, #288]	; (80095e4 <dns_check_entry+0x138>)
 80094c2:	4413      	add	r3, r2
 80094c4:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 80094c6:	79fb      	ldrb	r3, [r7, #7]
 80094c8:	2b03      	cmp	r3, #3
 80094ca:	d906      	bls.n	80094da <dns_check_entry+0x2e>
 80094cc:	4b46      	ldr	r3, [pc, #280]	; (80095e8 <dns_check_entry+0x13c>)
 80094ce:	f240 421c 	movw	r2, #1052	; 0x41c
 80094d2:	4946      	ldr	r1, [pc, #280]	; (80095ec <dns_check_entry+0x140>)
 80094d4:	4846      	ldr	r0, [pc, #280]	; (80095f0 <dns_check_entry+0x144>)
 80094d6:	f00e f91d 	bl	8017714 <iprintf>

  switch (entry->state) {
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	7a9b      	ldrb	r3, [r3, #10]
 80094de:	2b03      	cmp	r3, #3
 80094e0:	d86f      	bhi.n	80095c2 <dns_check_entry+0x116>
 80094e2:	a201      	add	r2, pc, #4	; (adr r2, 80094e8 <dns_check_entry+0x3c>)
 80094e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094e8:	080095d3 	.word	0x080095d3
 80094ec:	080094f9 	.word	0x080094f9
 80094f0:	0800952b 	.word	0x0800952b
 80094f4:	080095a1 	.word	0x080095a1
    case DNS_STATE_NEW:
      /* initialize new entry */
      entry->txid = dns_create_txid();
 80094f8:	f7ff ff86 	bl	8009408 <dns_create_txid>
 80094fc:	4603      	mov	r3, r0
 80094fe:	461a      	mov	r2, r3
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	811a      	strh	r2, [r3, #8]
      entry->state = DNS_STATE_ASKING;
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	2202      	movs	r2, #2
 8009508:	729a      	strb	r2, [r3, #10]
      entry->server_idx = 0;
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	2200      	movs	r2, #0
 800950e:	72da      	strb	r2, [r3, #11]
      entry->tmr = 1;
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	2201      	movs	r2, #1
 8009514:	731a      	strb	r2, [r3, #12]
      entry->retries = 0;
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	2200      	movs	r2, #0
 800951a:	735a      	strb	r2, [r3, #13]

      /* send DNS packet for this entry */
      err = dns_send(i);
 800951c:	79fb      	ldrb	r3, [r7, #7]
 800951e:	4618      	mov	r0, r3
 8009520:	f7ff fd34 	bl	8008f8c <dns_send>
 8009524:	4603      	mov	r3, r0
 8009526:	72fb      	strb	r3, [r7, #11]
      if (err != ERR_OK) {
        LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                    ("dns_send returned error: %s\n", lwip_strerr(err)));
      }
      break;
 8009528:	e058      	b.n	80095dc <dns_check_entry+0x130>
    case DNS_STATE_ASKING:
      if (--entry->tmr == 0) {
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	7b1b      	ldrb	r3, [r3, #12]
 800952e:	3b01      	subs	r3, #1
 8009530:	b2da      	uxtb	r2, r3
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	731a      	strb	r2, [r3, #12]
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	7b1b      	ldrb	r3, [r3, #12]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d14b      	bne.n	80095d6 <dns_check_entry+0x12a>
        if (++entry->retries == DNS_MAX_RETRIES) {
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	7b5b      	ldrb	r3, [r3, #13]
 8009542:	3301      	adds	r3, #1
 8009544:	b2da      	uxtb	r2, r3
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	735a      	strb	r2, [r3, #13]
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	7b5b      	ldrb	r3, [r3, #13]
 800954e:	2b0b      	cmp	r3, #11
 8009550:	d11b      	bne.n	800958a <dns_check_entry+0xde>
          if (dns_backupserver_available(entry)
 8009552:	68f8      	ldr	r0, [r7, #12]
 8009554:	f7ff ff88 	bl	8009468 <dns_backupserver_available>
 8009558:	4603      	mov	r3, r0
 800955a:	2b00      	cmp	r3, #0
 800955c:	d00c      	beq.n	8009578 <dns_check_entry+0xcc>
#if LWIP_DNS_SUPPORT_MDNS_QUERIES
              && !entry->is_mdns
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
             ) {
            /* change of server */
            entry->server_idx++;
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	7adb      	ldrb	r3, [r3, #11]
 8009562:	3301      	adds	r3, #1
 8009564:	b2da      	uxtb	r2, r3
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	72da      	strb	r2, [r3, #11]
            entry->tmr = 1;
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	2201      	movs	r2, #1
 800956e:	731a      	strb	r2, [r3, #12]
            entry->retries = 0;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	2200      	movs	r2, #0
 8009574:	735a      	strb	r2, [r3, #13]
 8009576:	e00c      	b.n	8009592 <dns_check_entry+0xe6>
          } else {
            LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": timeout\n", entry->name));
            /* call specified callback function if provided */
            dns_call_found(i, NULL);
 8009578:	79fb      	ldrb	r3, [r7, #7]
 800957a:	2100      	movs	r1, #0
 800957c:	4618      	mov	r0, r3
 800957e:	f7ff fe83 	bl	8009288 <dns_call_found>
            /* flush this entry */
            entry->state = DNS_STATE_UNUSED;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	2200      	movs	r2, #0
 8009586:	729a      	strb	r2, [r3, #10]
            break;
 8009588:	e028      	b.n	80095dc <dns_check_entry+0x130>
          }
        } else {
          /* wait longer for the next retry */
          entry->tmr = entry->retries;
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	7b5a      	ldrb	r2, [r3, #13]
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	731a      	strb	r2, [r3, #12]
        }

        /* send DNS packet for this entry */
        err = dns_send(i);
 8009592:	79fb      	ldrb	r3, [r7, #7]
 8009594:	4618      	mov	r0, r3
 8009596:	f7ff fcf9 	bl	8008f8c <dns_send>
 800959a:	4603      	mov	r3, r0
 800959c:	72fb      	strb	r3, [r7, #11]
        if (err != ERR_OK) {
          LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                      ("dns_send returned error: %s\n", lwip_strerr(err)));
        }
      }
      break;
 800959e:	e01a      	b.n	80095d6 <dns_check_entry+0x12a>
    case DNS_STATE_DONE:
      /* if the time to live is nul */
      if ((entry->ttl == 0) || (--entry->ttl == 0)) {
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d008      	beq.n	80095ba <dns_check_entry+0x10e>
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	1e5a      	subs	r2, r3, #1
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	601a      	str	r2, [r3, #0]
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d10f      	bne.n	80095da <dns_check_entry+0x12e>
        LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": flush\n", entry->name));
        /* flush this entry, there cannot be any related pending entries in this state */
        entry->state = DNS_STATE_UNUSED;
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	2200      	movs	r2, #0
 80095be:	729a      	strb	r2, [r3, #10]
      }
      break;
 80095c0:	e00b      	b.n	80095da <dns_check_entry+0x12e>
    case DNS_STATE_UNUSED:
      /* nothing to do */
      break;
    default:
      LWIP_ASSERT("unknown dns_table entry state:", 0);
 80095c2:	4b09      	ldr	r3, [pc, #36]	; (80095e8 <dns_check_entry+0x13c>)
 80095c4:	f240 425b 	movw	r2, #1115	; 0x45b
 80095c8:	490a      	ldr	r1, [pc, #40]	; (80095f4 <dns_check_entry+0x148>)
 80095ca:	4809      	ldr	r0, [pc, #36]	; (80095f0 <dns_check_entry+0x144>)
 80095cc:	f00e f8a2 	bl	8017714 <iprintf>
      break;
 80095d0:	e004      	b.n	80095dc <dns_check_entry+0x130>
      break;
 80095d2:	bf00      	nop
 80095d4:	e002      	b.n	80095dc <dns_check_entry+0x130>
      break;
 80095d6:	bf00      	nop
 80095d8:	e000      	b.n	80095dc <dns_check_entry+0x130>
      break;
 80095da:	bf00      	nop
  }
}
 80095dc:	bf00      	nop
 80095de:	3710      	adds	r7, #16
 80095e0:	46bd      	mov	sp, r7
 80095e2:	bd80      	pop	{r7, pc}
 80095e4:	20003f74 	.word	0x20003f74
 80095e8:	08018cc8 	.word	0x08018cc8
 80095ec:	08018d38 	.word	0x08018d38
 80095f0:	08018d10 	.word	0x08018d10
 80095f4:	08018d54 	.word	0x08018d54

080095f8 <dns_check_entries>:
/**
 * Call dns_check_entry for each entry in dns_table - check all entries.
 */
static void
dns_check_entries(void)
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b082      	sub	sp, #8
 80095fc:	af00      	add	r7, sp, #0
  u8_t i;

  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 80095fe:	2300      	movs	r3, #0
 8009600:	71fb      	strb	r3, [r7, #7]
 8009602:	e006      	b.n	8009612 <dns_check_entries+0x1a>
    dns_check_entry(i);
 8009604:	79fb      	ldrb	r3, [r7, #7]
 8009606:	4618      	mov	r0, r3
 8009608:	f7ff ff50 	bl	80094ac <dns_check_entry>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 800960c:	79fb      	ldrb	r3, [r7, #7]
 800960e:	3301      	adds	r3, #1
 8009610:	71fb      	strb	r3, [r7, #7]
 8009612:	79fb      	ldrb	r3, [r7, #7]
 8009614:	2b03      	cmp	r3, #3
 8009616:	d9f5      	bls.n	8009604 <dns_check_entries+0xc>
  }
}
 8009618:	bf00      	nop
 800961a:	3708      	adds	r7, #8
 800961c:	46bd      	mov	sp, r7
 800961e:	bd80      	pop	{r7, pc}

08009620 <dns_correct_response>:
/**
 * Save TTL and call dns_call_found for correct response.
 */
static void
dns_correct_response(u8_t idx, u32_t ttl)
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b084      	sub	sp, #16
 8009624:	af00      	add	r7, sp, #0
 8009626:	4603      	mov	r3, r0
 8009628:	6039      	str	r1, [r7, #0]
 800962a:	71fb      	strb	r3, [r7, #7]
  struct dns_table_entry *entry = &dns_table[idx];
 800962c:	79fa      	ldrb	r2, [r7, #7]
 800962e:	4613      	mov	r3, r2
 8009630:	011b      	lsls	r3, r3, #4
 8009632:	4413      	add	r3, r2
 8009634:	011b      	lsls	r3, r3, #4
 8009636:	4a13      	ldr	r2, [pc, #76]	; (8009684 <dns_correct_response+0x64>)
 8009638:	4413      	add	r3, r2
 800963a:	60fb      	str	r3, [r7, #12]

  entry->state = DNS_STATE_DONE;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	2203      	movs	r2, #3
 8009640:	729a      	strb	r2, [r3, #10]
  LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": response = ", entry->name));
  ip_addr_debug_print_val(DNS_DEBUG, entry->ipaddr);
  LWIP_DEBUGF(DNS_DEBUG, ("\n"));

  /* read the answer resource record's TTL, and maximize it if needed */
  entry->ttl = ttl;
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	683a      	ldr	r2, [r7, #0]
 8009646:	601a      	str	r2, [r3, #0]
  if (entry->ttl > DNS_MAX_TTL) {
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	4a0e      	ldr	r2, [pc, #56]	; (8009688 <dns_correct_response+0x68>)
 800964e:	4293      	cmp	r3, r2
 8009650:	d902      	bls.n	8009658 <dns_correct_response+0x38>
    entry->ttl = DNS_MAX_TTL;
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	4a0c      	ldr	r2, [pc, #48]	; (8009688 <dns_correct_response+0x68>)
 8009656:	601a      	str	r2, [r3, #0]
  }
  dns_call_found(idx, &entry->ipaddr);
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	1d1a      	adds	r2, r3, #4
 800965c:	79fb      	ldrb	r3, [r7, #7]
 800965e:	4611      	mov	r1, r2
 8009660:	4618      	mov	r0, r3
 8009662:	f7ff fe11 	bl	8009288 <dns_call_found>

  if (entry->ttl == 0) {
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d106      	bne.n	800967c <dns_correct_response+0x5c>
    /* RFC 883, page 29: "Zero values are
       interpreted to mean that the RR can only be used for the
       transaction in progress, and should not be cached."
       -> flush this entry now */
    /* entry reused during callback? */
    if (entry->state == DNS_STATE_DONE) {
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	7a9b      	ldrb	r3, [r3, #10]
 8009672:	2b03      	cmp	r3, #3
 8009674:	d102      	bne.n	800967c <dns_correct_response+0x5c>
      entry->state = DNS_STATE_UNUSED;
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	2200      	movs	r2, #0
 800967a:	729a      	strb	r2, [r3, #10]
    }
  }
}
 800967c:	bf00      	nop
 800967e:	3710      	adds	r7, #16
 8009680:	46bd      	mov	sp, r7
 8009682:	bd80      	pop	{r7, pc}
 8009684:	20003f74 	.word	0x20003f74
 8009688:	00093a80 	.word	0x00093a80

0800968c <dns_recv>:
/**
 * Receive input function for DNS response packets arriving for the dns UDP pcb.
 */
static void
dns_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 800968c:	b590      	push	{r4, r7, lr}
 800968e:	b091      	sub	sp, #68	; 0x44
 8009690:	af00      	add	r7, sp, #0
 8009692:	60f8      	str	r0, [r7, #12]
 8009694:	60b9      	str	r1, [r7, #8]
 8009696:	607a      	str	r2, [r7, #4]
 8009698:	603b      	str	r3, [r7, #0]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(port);

  /* is the dns message big enough ? */
  if (p->tot_len < (SIZEOF_DNS_HDR + SIZEOF_DNS_QUERY)) {
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	891b      	ldrh	r3, [r3, #8]
 800969e:	2b0f      	cmp	r3, #15
 80096a0:	f240 811e 	bls.w	80098e0 <dns_recv+0x254>
    /* free pbuf and return */
    goto ignore_packet;
  }

  /* copy dns payload inside static buffer for processing */
  if (pbuf_copy_partial(p, &hdr, SIZEOF_DNS_HDR, 0) == SIZEOF_DNS_HDR) {
 80096a4:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80096a8:	2300      	movs	r3, #0
 80096aa:	220c      	movs	r2, #12
 80096ac:	6878      	ldr	r0, [r7, #4]
 80096ae:	f004 fc1b 	bl	800dee8 <pbuf_copy_partial>
 80096b2:	4603      	mov	r3, r0
 80096b4:	2b0c      	cmp	r3, #12
 80096b6:	f040 812a 	bne.w	800990e <dns_recv+0x282>
    /* Match the ID in the DNS header with the name table. */
    txid = lwip_htons(hdr.id);
 80096ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80096bc:	4618      	mov	r0, r3
 80096be:	f7ff faad 	bl	8008c1c <lwip_htons>
 80096c2:	4603      	mov	r3, r0
 80096c4:	873b      	strh	r3, [r7, #56]	; 0x38
    for (i = 0; i < DNS_TABLE_SIZE; i++) {
 80096c6:	2300      	movs	r3, #0
 80096c8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80096cc:	e102      	b.n	80098d4 <dns_recv+0x248>
      struct dns_table_entry *entry = &dns_table[i];
 80096ce:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80096d2:	4613      	mov	r3, r2
 80096d4:	011b      	lsls	r3, r3, #4
 80096d6:	4413      	add	r3, r2
 80096d8:	011b      	lsls	r3, r3, #4
 80096da:	4a90      	ldr	r2, [pc, #576]	; (800991c <dns_recv+0x290>)
 80096dc:	4413      	add	r3, r2
 80096de:	637b      	str	r3, [r7, #52]	; 0x34
      if ((entry->state == DNS_STATE_ASKING) &&
 80096e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096e2:	7a9b      	ldrb	r3, [r3, #10]
 80096e4:	2b02      	cmp	r3, #2
 80096e6:	f040 80f0 	bne.w	80098ca <dns_recv+0x23e>
          (entry->txid == txid)) {
 80096ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096ec:	891b      	ldrh	r3, [r3, #8]
      if ((entry->state == DNS_STATE_ASKING) &&
 80096ee:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80096f0:	429a      	cmp	r2, r3
 80096f2:	f040 80ea 	bne.w	80098ca <dns_recv+0x23e>

        /* We only care about the question(s) and the answers. The authrr
           and the extrarr are simply discarded. */
        nquestions = lwip_htons(hdr.numquestions);
 80096f6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80096f8:	4618      	mov	r0, r3
 80096fa:	f7ff fa8f 	bl	8008c1c <lwip_htons>
 80096fe:	4603      	mov	r3, r0
 8009700:	867b      	strh	r3, [r7, #50]	; 0x32
        nanswers   = lwip_htons(hdr.numanswers);
 8009702:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009704:	4618      	mov	r0, r3
 8009706:	f7ff fa89 	bl	8008c1c <lwip_htons>
 800970a:	4603      	mov	r3, r0
 800970c:	877b      	strh	r3, [r7, #58]	; 0x3a

        /* Check for correct response. */
        if ((hdr.flags1 & DNS_FLAG1_RESPONSE) == 0) {
 800970e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009712:	b25b      	sxtb	r3, r3
 8009714:	2b00      	cmp	r3, #0
 8009716:	f280 80e5 	bge.w	80098e4 <dns_recv+0x258>
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": not a response\n", entry->name));
          goto ignore_packet; /* ignore this packet */
        }
        if (nquestions != 1) {
 800971a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800971c:	2b01      	cmp	r3, #1
 800971e:	f040 80e3 	bne.w	80098e8 <dns_recv+0x25c>
        if (!entry->is_mdns)
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
        {
          /* Check whether response comes from the same network address to which the
             question was sent. (RFC 5452) */
          if (!ip_addr_cmp(addr, &dns_servers[entry->server_idx])) {
 8009722:	683b      	ldr	r3, [r7, #0]
 8009724:	681a      	ldr	r2, [r3, #0]
 8009726:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009728:	7adb      	ldrb	r3, [r3, #11]
 800972a:	4619      	mov	r1, r3
 800972c:	4b7c      	ldr	r3, [pc, #496]	; (8009920 <dns_recv+0x294>)
 800972e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009732:	429a      	cmp	r2, r3
 8009734:	f040 80da 	bne.w	80098ec <dns_recv+0x260>
          }
        }

        /* Check if the name in the "question" part match with the name in the entry and
           skip it if equal. */
        res_idx = dns_compare_name(entry->name, p, SIZEOF_DNS_HDR);
 8009738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800973a:	3310      	adds	r3, #16
 800973c:	220c      	movs	r2, #12
 800973e:	6879      	ldr	r1, [r7, #4]
 8009740:	4618      	mov	r0, r3
 8009742:	f7ff fb47 	bl	8008dd4 <dns_compare_name>
 8009746:	4603      	mov	r3, r0
 8009748:	87bb      	strh	r3, [r7, #60]	; 0x3c
        if (res_idx == 0xFFFF) {
 800974a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800974c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009750:	4293      	cmp	r3, r2
 8009752:	f000 80cd 	beq.w	80098f0 <dns_recv+0x264>
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": response not match to query\n", entry->name));
          goto ignore_packet; /* ignore this packet */
        }

        /* check if "question" part matches the request */
        if (pbuf_copy_partial(p, &qry, SIZEOF_DNS_QUERY, res_idx) != SIZEOF_DNS_QUERY) {
 8009756:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009758:	f107 0114 	add.w	r1, r7, #20
 800975c:	2204      	movs	r2, #4
 800975e:	6878      	ldr	r0, [r7, #4]
 8009760:	f004 fbc2 	bl	800dee8 <pbuf_copy_partial>
 8009764:	4603      	mov	r3, r0
 8009766:	2b04      	cmp	r3, #4
 8009768:	f040 80c4 	bne.w	80098f4 <dns_recv+0x268>
          goto ignore_packet; /* ignore this packet */
        }
        if ((qry.cls != PP_HTONS(DNS_RRCLASS_IN)) ||
 800976c:	8afb      	ldrh	r3, [r7, #22]
 800976e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009772:	f040 80cc 	bne.w	800990e <dns_recv+0x282>
            (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype) && (qry.type != PP_HTONS(DNS_RRTYPE_AAAA))) ||
            (!LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype) && (qry.type != PP_HTONS(DNS_RRTYPE_A)))) {
 8009776:	8abb      	ldrh	r3, [r7, #20]
            (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype) && (qry.type != PP_HTONS(DNS_RRTYPE_AAAA))) ||
 8009778:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800977c:	f040 80c7 	bne.w	800990e <dns_recv+0x282>
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": response not match to query\n", entry->name));
          goto ignore_packet; /* ignore this packet */
        }
        /* skip the rest of the "question" part */
        if (res_idx + SIZEOF_DNS_QUERY > 0xFFFF) {
 8009780:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009782:	3304      	adds	r3, #4
 8009784:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009788:	f280 80b6 	bge.w	80098f8 <dns_recv+0x26c>
          goto ignore_packet;
        }
        res_idx = (u16_t)(res_idx + SIZEOF_DNS_QUERY);
 800978c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800978e:	3304      	adds	r3, #4
 8009790:	87bb      	strh	r3, [r7, #60]	; 0x3c

        /* Check for error. If so, call callback to inform. */
        if (hdr.flags2 & DNS_FLAG2_ERR_MASK) {
 8009792:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009796:	f003 030f 	and.w	r3, r3, #15
 800979a:	2b00      	cmp	r3, #0
 800979c:	d078      	beq.n	8009890 <dns_recv+0x204>
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": error in flags\n", entry->name));

          /* if there is another backup DNS server to try
           * then don't stop the DNS request
           */
          if (dns_backupserver_available(entry)) {
 800979e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80097a0:	f7ff fe62 	bl	8009468 <dns_backupserver_available>
 80097a4:	4603      	mov	r3, r0
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d07a      	beq.n	80098a0 <dns_recv+0x214>
            /* avoid retrying the same server */
            entry->retries = DNS_MAX_RETRIES-1;
 80097aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097ac:	220a      	movs	r2, #10
 80097ae:	735a      	strb	r2, [r3, #13]
            entry->tmr     = 1;
 80097b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097b2:	2201      	movs	r2, #1
 80097b4:	731a      	strb	r2, [r3, #12]

            /* contact next available server for this entry */
            dns_check_entry(i);
 80097b6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80097ba:	4618      	mov	r0, r3
 80097bc:	f7ff fe76 	bl	80094ac <dns_check_entry>

            goto ignore_packet;
 80097c0:	e0a5      	b.n	800990e <dns_recv+0x282>
          }
        } else {
          while ((nanswers > 0) && (res_idx < p->tot_len)) {
            /* skip answer resource record's host name */
            res_idx = dns_skip_name(p, res_idx);
 80097c2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80097c4:	4619      	mov	r1, r3
 80097c6:	6878      	ldr	r0, [r7, #4]
 80097c8:	f7ff fb93 	bl	8008ef2 <dns_skip_name>
 80097cc:	4603      	mov	r3, r0
 80097ce:	87bb      	strh	r3, [r7, #60]	; 0x3c
            if (res_idx == 0xFFFF) {
 80097d0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80097d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80097d6:	4293      	cmp	r3, r2
 80097d8:	f000 8090 	beq.w	80098fc <dns_recv+0x270>
              goto ignore_packet; /* ignore this packet */
            }

            /* Check for IP address type and Internet class. Others are discarded. */
            if (pbuf_copy_partial(p, &ans, SIZEOF_DNS_ANSWER, res_idx) != SIZEOF_DNS_ANSWER) {
 80097dc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80097de:	f107 0118 	add.w	r1, r7, #24
 80097e2:	220a      	movs	r2, #10
 80097e4:	6878      	ldr	r0, [r7, #4]
 80097e6:	f004 fb7f 	bl	800dee8 <pbuf_copy_partial>
 80097ea:	4603      	mov	r3, r0
 80097ec:	2b0a      	cmp	r3, #10
 80097ee:	f040 8087 	bne.w	8009900 <dns_recv+0x274>
              goto ignore_packet; /* ignore this packet */
            }
            if (res_idx + SIZEOF_DNS_ANSWER > 0xFFFF) {
 80097f2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80097f4:	330a      	adds	r3, #10
 80097f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80097fa:	f280 8083 	bge.w	8009904 <dns_recv+0x278>
              goto ignore_packet;
            }
            res_idx = (u16_t)(res_idx + SIZEOF_DNS_ANSWER);
 80097fe:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009800:	330a      	adds	r3, #10
 8009802:	87bb      	strh	r3, [r7, #60]	; 0x3c

            if (ans.cls == PP_HTONS(DNS_RRCLASS_IN)) {
 8009804:	8b7b      	ldrh	r3, [r7, #26]
 8009806:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800980a:	d12b      	bne.n	8009864 <dns_recv+0x1d8>
#if LWIP_IPV4
              if ((ans.type == PP_HTONS(DNS_RRTYPE_A)) && (ans.len == PP_HTONS(sizeof(ip4_addr_t)))) {
 800980c:	8b3b      	ldrh	r3, [r7, #24]
 800980e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009812:	d127      	bne.n	8009864 <dns_recv+0x1d8>
 8009814:	8c3b      	ldrh	r3, [r7, #32]
 8009816:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800981a:	d123      	bne.n	8009864 <dns_recv+0x1d8>
                if (!LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
                {
                  ip4_addr_t ip4addr;
                  /* read the IP address after answer resource record's header */
                  if (pbuf_copy_partial(p, &ip4addr, sizeof(ip4_addr_t), res_idx) != sizeof(ip4_addr_t)) {
 800981c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800981e:	f107 0110 	add.w	r1, r7, #16
 8009822:	2204      	movs	r2, #4
 8009824:	6878      	ldr	r0, [r7, #4]
 8009826:	f004 fb5f 	bl	800dee8 <pbuf_copy_partial>
 800982a:	4603      	mov	r3, r0
 800982c:	2b04      	cmp	r3, #4
 800982e:	d16b      	bne.n	8009908 <dns_recv+0x27c>
                    goto ignore_packet; /* ignore this packet */
                  }
                  ip_addr_copy_from_ip4(dns_table[i].ipaddr, ip4addr);
 8009830:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8009834:	6939      	ldr	r1, [r7, #16]
 8009836:	4839      	ldr	r0, [pc, #228]	; (800991c <dns_recv+0x290>)
 8009838:	4613      	mov	r3, r2
 800983a:	011b      	lsls	r3, r3, #4
 800983c:	4413      	add	r3, r2
 800983e:	011b      	lsls	r3, r3, #4
 8009840:	4403      	add	r3, r0
 8009842:	3304      	adds	r3, #4
 8009844:	6019      	str	r1, [r3, #0]
                  pbuf_free(p);
 8009846:	6878      	ldr	r0, [r7, #4]
 8009848:	f004 f948 	bl	800dadc <pbuf_free>
                  /* handle correct response */
                  dns_correct_response(i, lwip_ntohl(ans.ttl));
 800984c:	69fb      	ldr	r3, [r7, #28]
 800984e:	4618      	mov	r0, r3
 8009850:	f7ff f9f9 	bl	8008c46 <lwip_htonl>
 8009854:	4602      	mov	r2, r0
 8009856:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800985a:	4611      	mov	r1, r2
 800985c:	4618      	mov	r0, r3
 800985e:	f7ff fedf 	bl	8009620 <dns_correct_response>
 8009862:	e058      	b.n	8009916 <dns_recv+0x28a>
                }
              }
#endif /* LWIP_IPV6 */
            }
            /* skip this answer */
            if ((int)(res_idx + lwip_htons(ans.len)) > 0xFFFF) {
 8009864:	8fbc      	ldrh	r4, [r7, #60]	; 0x3c
 8009866:	8c3b      	ldrh	r3, [r7, #32]
 8009868:	4618      	mov	r0, r3
 800986a:	f7ff f9d7 	bl	8008c1c <lwip_htons>
 800986e:	4603      	mov	r3, r0
 8009870:	4423      	add	r3, r4
 8009872:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009876:	da49      	bge.n	800990c <dns_recv+0x280>
              goto ignore_packet; /* ignore this packet */
            }
            res_idx = (u16_t)(res_idx + lwip_htons(ans.len));
 8009878:	8c3b      	ldrh	r3, [r7, #32]
 800987a:	4618      	mov	r0, r3
 800987c:	f7ff f9ce 	bl	8008c1c <lwip_htons>
 8009880:	4603      	mov	r3, r0
 8009882:	461a      	mov	r2, r3
 8009884:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009886:	4413      	add	r3, r2
 8009888:	87bb      	strh	r3, [r7, #60]	; 0x3c
            --nanswers;
 800988a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800988c:	3b01      	subs	r3, #1
 800988e:	877b      	strh	r3, [r7, #58]	; 0x3a
          while ((nanswers > 0) && (res_idx < p->tot_len)) {
 8009890:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8009892:	2b00      	cmp	r3, #0
 8009894:	d004      	beq.n	80098a0 <dns_recv+0x214>
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	891b      	ldrh	r3, [r3, #8]
 800989a:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800989c:	429a      	cmp	r2, r3
 800989e:	d390      	bcc.n	80097c2 <dns_recv+0x136>
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": error in response\n", entry->name));
        }
        /* call callback to indicate error, clean up memory and return */
        pbuf_free(p);
 80098a0:	6878      	ldr	r0, [r7, #4]
 80098a2:	f004 f91b 	bl	800dadc <pbuf_free>
        dns_call_found(i, NULL);
 80098a6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80098aa:	2100      	movs	r1, #0
 80098ac:	4618      	mov	r0, r3
 80098ae:	f7ff fceb 	bl	8009288 <dns_call_found>
        dns_table[i].state = DNS_STATE_UNUSED;
 80098b2:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80098b6:	4919      	ldr	r1, [pc, #100]	; (800991c <dns_recv+0x290>)
 80098b8:	4613      	mov	r3, r2
 80098ba:	011b      	lsls	r3, r3, #4
 80098bc:	4413      	add	r3, r2
 80098be:	011b      	lsls	r3, r3, #4
 80098c0:	440b      	add	r3, r1
 80098c2:	330a      	adds	r3, #10
 80098c4:	2200      	movs	r2, #0
 80098c6:	701a      	strb	r2, [r3, #0]
        return;
 80098c8:	e025      	b.n	8009916 <dns_recv+0x28a>
    for (i = 0; i < DNS_TABLE_SIZE; i++) {
 80098ca:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80098ce:	3301      	adds	r3, #1
 80098d0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80098d4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80098d8:	2b03      	cmp	r3, #3
 80098da:	f67f aef8 	bls.w	80096ce <dns_recv+0x42>
 80098de:	e016      	b.n	800990e <dns_recv+0x282>
    goto ignore_packet;
 80098e0:	bf00      	nop
 80098e2:	e014      	b.n	800990e <dns_recv+0x282>
          goto ignore_packet; /* ignore this packet */
 80098e4:	bf00      	nop
 80098e6:	e012      	b.n	800990e <dns_recv+0x282>
          goto ignore_packet; /* ignore this packet */
 80098e8:	bf00      	nop
 80098ea:	e010      	b.n	800990e <dns_recv+0x282>
            goto ignore_packet; /* ignore this packet */
 80098ec:	bf00      	nop
 80098ee:	e00e      	b.n	800990e <dns_recv+0x282>
          goto ignore_packet; /* ignore this packet */
 80098f0:	bf00      	nop
 80098f2:	e00c      	b.n	800990e <dns_recv+0x282>
          goto ignore_packet; /* ignore this packet */
 80098f4:	bf00      	nop
 80098f6:	e00a      	b.n	800990e <dns_recv+0x282>
          goto ignore_packet;
 80098f8:	bf00      	nop
 80098fa:	e008      	b.n	800990e <dns_recv+0x282>
              goto ignore_packet; /* ignore this packet */
 80098fc:	bf00      	nop
 80098fe:	e006      	b.n	800990e <dns_recv+0x282>
              goto ignore_packet; /* ignore this packet */
 8009900:	bf00      	nop
 8009902:	e004      	b.n	800990e <dns_recv+0x282>
              goto ignore_packet;
 8009904:	bf00      	nop
 8009906:	e002      	b.n	800990e <dns_recv+0x282>
                    goto ignore_packet; /* ignore this packet */
 8009908:	bf00      	nop
 800990a:	e000      	b.n	800990e <dns_recv+0x282>
              goto ignore_packet; /* ignore this packet */
 800990c:	bf00      	nop
    }
  }

ignore_packet:
  /* deallocate memory and return */
  pbuf_free(p);
 800990e:	6878      	ldr	r0, [r7, #4]
 8009910:	f004 f8e4 	bl	800dadc <pbuf_free>
  return;
 8009914:	bf00      	nop
}
 8009916:	3744      	adds	r7, #68	; 0x44
 8009918:	46bd      	mov	sp, r7
 800991a:	bd90      	pop	{r4, r7, pc}
 800991c:	20003f74 	.word	0x20003f74
 8009920:	200043e4 	.word	0x200043e4

08009924 <dns_enqueue>:
 * @return err_t return code.
 */
static err_t
dns_enqueue(const char *name, size_t hostnamelen, dns_found_callback found,
            void *callback_arg LWIP_DNS_ADDRTYPE_ARG(u8_t dns_addrtype) LWIP_DNS_ISMDNS_ARG(u8_t is_mdns))
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b08a      	sub	sp, #40	; 0x28
 8009928:	af00      	add	r7, sp, #0
 800992a:	60f8      	str	r0, [r7, #12]
 800992c:	60b9      	str	r1, [r7, #8]
 800992e:	607a      	str	r2, [r7, #4]
 8009930:	603b      	str	r3, [r7, #0]
  u8_t i;
  u8_t lseq, lseqi;
  struct dns_table_entry *entry = NULL;
 8009932:	2300      	movs	r3, #0
 8009934:	623b      	str	r3, [r7, #32]
  struct dns_req_entry *req;

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  u8_t r;
  /* check for duplicate entries */
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 8009936:	2300      	movs	r3, #0
 8009938:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800993c:	e056      	b.n	80099ec <dns_enqueue+0xc8>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 800993e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8009942:	4990      	ldr	r1, [pc, #576]	; (8009b84 <dns_enqueue+0x260>)
 8009944:	4613      	mov	r3, r2
 8009946:	011b      	lsls	r3, r3, #4
 8009948:	4413      	add	r3, r2
 800994a:	011b      	lsls	r3, r3, #4
 800994c:	440b      	add	r3, r1
 800994e:	330a      	adds	r3, #10
 8009950:	781b      	ldrb	r3, [r3, #0]
 8009952:	2b02      	cmp	r3, #2
 8009954:	d145      	bne.n	80099e2 <dns_enqueue+0xbe>
        (lwip_strnicmp(name, dns_table[i].name, sizeof(dns_table[i].name)) == 0)) {
 8009956:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800995a:	4613      	mov	r3, r2
 800995c:	011b      	lsls	r3, r3, #4
 800995e:	4413      	add	r3, r2
 8009960:	011b      	lsls	r3, r3, #4
 8009962:	3310      	adds	r3, #16
 8009964:	4a87      	ldr	r2, [pc, #540]	; (8009b84 <dns_enqueue+0x260>)
 8009966:	4413      	add	r3, r2
 8009968:	f44f 7280 	mov.w	r2, #256	; 0x100
 800996c:	4619      	mov	r1, r3
 800996e:	68f8      	ldr	r0, [r7, #12]
 8009970:	f7ff f982 	bl	8008c78 <lwip_strnicmp>
 8009974:	4603      	mov	r3, r0
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 8009976:	2b00      	cmp	r3, #0
 8009978:	d133      	bne.n	80099e2 <dns_enqueue+0xbe>
           for the same host should not be that common */
        continue;
      }
#endif /* LWIP_IPV4 && LWIP_IPV6 */
      /* this is a duplicate entry, find a free request entry */
      for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 800997a:	2300      	movs	r3, #0
 800997c:	76fb      	strb	r3, [r7, #27]
 800997e:	e02d      	b.n	80099dc <dns_enqueue+0xb8>
        if (dns_requests[r].found == 0) {
 8009980:	7efa      	ldrb	r2, [r7, #27]
 8009982:	4981      	ldr	r1, [pc, #516]	; (8009b88 <dns_enqueue+0x264>)
 8009984:	4613      	mov	r3, r2
 8009986:	005b      	lsls	r3, r3, #1
 8009988:	4413      	add	r3, r2
 800998a:	009b      	lsls	r3, r3, #2
 800998c:	440b      	add	r3, r1
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d120      	bne.n	80099d6 <dns_enqueue+0xb2>
          dns_requests[r].found = found;
 8009994:	7efa      	ldrb	r2, [r7, #27]
 8009996:	497c      	ldr	r1, [pc, #496]	; (8009b88 <dns_enqueue+0x264>)
 8009998:	4613      	mov	r3, r2
 800999a:	005b      	lsls	r3, r3, #1
 800999c:	4413      	add	r3, r2
 800999e:	009b      	lsls	r3, r3, #2
 80099a0:	440b      	add	r3, r1
 80099a2:	687a      	ldr	r2, [r7, #4]
 80099a4:	601a      	str	r2, [r3, #0]
          dns_requests[r].arg = callback_arg;
 80099a6:	7efa      	ldrb	r2, [r7, #27]
 80099a8:	4977      	ldr	r1, [pc, #476]	; (8009b88 <dns_enqueue+0x264>)
 80099aa:	4613      	mov	r3, r2
 80099ac:	005b      	lsls	r3, r3, #1
 80099ae:	4413      	add	r3, r2
 80099b0:	009b      	lsls	r3, r3, #2
 80099b2:	440b      	add	r3, r1
 80099b4:	3304      	adds	r3, #4
 80099b6:	683a      	ldr	r2, [r7, #0]
 80099b8:	601a      	str	r2, [r3, #0]
          dns_requests[r].dns_table_idx = i;
 80099ba:	7efa      	ldrb	r2, [r7, #27]
 80099bc:	4972      	ldr	r1, [pc, #456]	; (8009b88 <dns_enqueue+0x264>)
 80099be:	4613      	mov	r3, r2
 80099c0:	005b      	lsls	r3, r3, #1
 80099c2:	4413      	add	r3, r2
 80099c4:	009b      	lsls	r3, r3, #2
 80099c6:	440b      	add	r3, r1
 80099c8:	3308      	adds	r3, #8
 80099ca:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80099ce:	701a      	strb	r2, [r3, #0]
          LWIP_DNS_SET_ADDRTYPE(dns_requests[r].reqaddrtype, dns_addrtype);
          LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": duplicate request\n", name));
          return ERR_INPROGRESS;
 80099d0:	f06f 0304 	mvn.w	r3, #4
 80099d4:	e0d1      	b.n	8009b7a <dns_enqueue+0x256>
      for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 80099d6:	7efb      	ldrb	r3, [r7, #27]
 80099d8:	3301      	adds	r3, #1
 80099da:	76fb      	strb	r3, [r7, #27]
 80099dc:	7efb      	ldrb	r3, [r7, #27]
 80099de:	2b03      	cmp	r3, #3
 80099e0:	d9ce      	bls.n	8009980 <dns_enqueue+0x5c>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 80099e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80099e6:	3301      	adds	r3, #1
 80099e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80099ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80099f0:	2b03      	cmp	r3, #3
 80099f2:	d9a4      	bls.n	800993e <dns_enqueue+0x1a>
  }
  /* no duplicate entries found */
#endif

  /* search an unused entry, or the oldest one */
  lseq = 0;
 80099f4:	2300      	movs	r3, #0
 80099f6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  lseqi = DNS_TABLE_SIZE;
 80099fa:	2304      	movs	r3, #4
 80099fc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 8009a00:	2300      	movs	r3, #0
 8009a02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009a06:	e027      	b.n	8009a58 <dns_enqueue+0x134>
    entry = &dns_table[i];
 8009a08:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8009a0c:	4613      	mov	r3, r2
 8009a0e:	011b      	lsls	r3, r3, #4
 8009a10:	4413      	add	r3, r2
 8009a12:	011b      	lsls	r3, r3, #4
 8009a14:	4a5b      	ldr	r2, [pc, #364]	; (8009b84 <dns_enqueue+0x260>)
 8009a16:	4413      	add	r3, r2
 8009a18:	623b      	str	r3, [r7, #32]
    /* is it an unused entry ? */
    if (entry->state == DNS_STATE_UNUSED) {
 8009a1a:	6a3b      	ldr	r3, [r7, #32]
 8009a1c:	7a9b      	ldrb	r3, [r3, #10]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d01f      	beq.n	8009a62 <dns_enqueue+0x13e>
      break;
    }
    /* check if this is the oldest completed entry */
    if (entry->state == DNS_STATE_DONE) {
 8009a22:	6a3b      	ldr	r3, [r7, #32]
 8009a24:	7a9b      	ldrb	r3, [r3, #10]
 8009a26:	2b03      	cmp	r3, #3
 8009a28:	d111      	bne.n	8009a4e <dns_enqueue+0x12a>
      u8_t age = (u8_t)(dns_seqno - entry->seqno);
 8009a2a:	4b58      	ldr	r3, [pc, #352]	; (8009b8c <dns_enqueue+0x268>)
 8009a2c:	781a      	ldrb	r2, [r3, #0]
 8009a2e:	6a3b      	ldr	r3, [r7, #32]
 8009a30:	7b9b      	ldrb	r3, [r3, #14]
 8009a32:	1ad3      	subs	r3, r2, r3
 8009a34:	76bb      	strb	r3, [r7, #26]
      if (age > lseq) {
 8009a36:	7eba      	ldrb	r2, [r7, #26]
 8009a38:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009a3c:	429a      	cmp	r2, r3
 8009a3e:	d906      	bls.n	8009a4e <dns_enqueue+0x12a>
        lseq = age;
 8009a40:	7ebb      	ldrb	r3, [r7, #26]
 8009a42:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        lseqi = i;
 8009a46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009a4a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 8009a4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009a52:	3301      	adds	r3, #1
 8009a54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009a58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009a5c:	2b03      	cmp	r3, #3
 8009a5e:	d9d3      	bls.n	8009a08 <dns_enqueue+0xe4>
 8009a60:	e000      	b.n	8009a64 <dns_enqueue+0x140>
      break;
 8009a62:	bf00      	nop
      }
    }
  }

  /* if we don't have found an unused entry, use the oldest completed one */
  if (i == DNS_TABLE_SIZE) {
 8009a64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009a68:	2b04      	cmp	r3, #4
 8009a6a:	d11f      	bne.n	8009aac <dns_enqueue+0x188>
    if ((lseqi >= DNS_TABLE_SIZE) || (dns_table[lseqi].state != DNS_STATE_DONE)) {
 8009a6c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8009a70:	2b03      	cmp	r3, #3
 8009a72:	d80b      	bhi.n	8009a8c <dns_enqueue+0x168>
 8009a74:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8009a78:	4942      	ldr	r1, [pc, #264]	; (8009b84 <dns_enqueue+0x260>)
 8009a7a:	4613      	mov	r3, r2
 8009a7c:	011b      	lsls	r3, r3, #4
 8009a7e:	4413      	add	r3, r2
 8009a80:	011b      	lsls	r3, r3, #4
 8009a82:	440b      	add	r3, r1
 8009a84:	330a      	adds	r3, #10
 8009a86:	781b      	ldrb	r3, [r3, #0]
 8009a88:	2b03      	cmp	r3, #3
 8009a8a:	d002      	beq.n	8009a92 <dns_enqueue+0x16e>
      /* no entry can be used now, table is full */
      LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": DNS entries table is full\n", name));
      return ERR_MEM;
 8009a8c:	f04f 33ff 	mov.w	r3, #4294967295
 8009a90:	e073      	b.n	8009b7a <dns_enqueue+0x256>
    } else {
      /* use the oldest completed one */
      i = lseqi;
 8009a92:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8009a96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      entry = &dns_table[i];
 8009a9a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8009a9e:	4613      	mov	r3, r2
 8009aa0:	011b      	lsls	r3, r3, #4
 8009aa2:	4413      	add	r3, r2
 8009aa4:	011b      	lsls	r3, r3, #4
 8009aa6:	4a37      	ldr	r2, [pc, #220]	; (8009b84 <dns_enqueue+0x260>)
 8009aa8:	4413      	add	r3, r2
 8009aaa:	623b      	str	r3, [r7, #32]
    }
  }

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  /* find a free request entry */
  req = NULL;
 8009aac:	2300      	movs	r3, #0
 8009aae:	61fb      	str	r3, [r7, #28]
  for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	76fb      	strb	r3, [r7, #27]
 8009ab4:	e015      	b.n	8009ae2 <dns_enqueue+0x1be>
    if (dns_requests[r].found == NULL) {
 8009ab6:	7efa      	ldrb	r2, [r7, #27]
 8009ab8:	4933      	ldr	r1, [pc, #204]	; (8009b88 <dns_enqueue+0x264>)
 8009aba:	4613      	mov	r3, r2
 8009abc:	005b      	lsls	r3, r3, #1
 8009abe:	4413      	add	r3, r2
 8009ac0:	009b      	lsls	r3, r3, #2
 8009ac2:	440b      	add	r3, r1
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d108      	bne.n	8009adc <dns_enqueue+0x1b8>
      req = &dns_requests[r];
 8009aca:	7efa      	ldrb	r2, [r7, #27]
 8009acc:	4613      	mov	r3, r2
 8009ace:	005b      	lsls	r3, r3, #1
 8009ad0:	4413      	add	r3, r2
 8009ad2:	009b      	lsls	r3, r3, #2
 8009ad4:	4a2c      	ldr	r2, [pc, #176]	; (8009b88 <dns_enqueue+0x264>)
 8009ad6:	4413      	add	r3, r2
 8009ad8:	61fb      	str	r3, [r7, #28]
      break;
 8009ada:	e005      	b.n	8009ae8 <dns_enqueue+0x1c4>
  for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 8009adc:	7efb      	ldrb	r3, [r7, #27]
 8009ade:	3301      	adds	r3, #1
 8009ae0:	76fb      	strb	r3, [r7, #27]
 8009ae2:	7efb      	ldrb	r3, [r7, #27]
 8009ae4:	2b03      	cmp	r3, #3
 8009ae6:	d9e6      	bls.n	8009ab6 <dns_enqueue+0x192>
    }
  }
  if (req == NULL) {
 8009ae8:	69fb      	ldr	r3, [r7, #28]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d102      	bne.n	8009af4 <dns_enqueue+0x1d0>
    /* no request entry can be used now, table is full */
    LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": DNS request entries table is full\n", name));
    return ERR_MEM;
 8009aee:	f04f 33ff 	mov.w	r3, #4294967295
 8009af2:	e042      	b.n	8009b7a <dns_enqueue+0x256>
  }
  req->dns_table_idx = i;
 8009af4:	69fb      	ldr	r3, [r7, #28]
 8009af6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8009afa:	721a      	strb	r2, [r3, #8]

  /* use this entry */
  LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": use DNS entry %"U16_F"\n", name, (u16_t)(i)));

  /* fill the entry */
  entry->state = DNS_STATE_NEW;
 8009afc:	6a3b      	ldr	r3, [r7, #32]
 8009afe:	2201      	movs	r2, #1
 8009b00:	729a      	strb	r2, [r3, #10]
  entry->seqno = dns_seqno;
 8009b02:	4b22      	ldr	r3, [pc, #136]	; (8009b8c <dns_enqueue+0x268>)
 8009b04:	781a      	ldrb	r2, [r3, #0]
 8009b06:	6a3b      	ldr	r3, [r7, #32]
 8009b08:	739a      	strb	r2, [r3, #14]
  LWIP_DNS_SET_ADDRTYPE(entry->reqaddrtype, dns_addrtype);
  LWIP_DNS_SET_ADDRTYPE(req->reqaddrtype, dns_addrtype);
  req->found = found;
 8009b0a:	69fb      	ldr	r3, [r7, #28]
 8009b0c:	687a      	ldr	r2, [r7, #4]
 8009b0e:	601a      	str	r2, [r3, #0]
  req->arg   = callback_arg;
 8009b10:	69fb      	ldr	r3, [r7, #28]
 8009b12:	683a      	ldr	r2, [r7, #0]
 8009b14:	605a      	str	r2, [r3, #4]
  namelen = LWIP_MIN(hostnamelen, DNS_MAX_NAME_LENGTH - 1);
 8009b16:	68bb      	ldr	r3, [r7, #8]
 8009b18:	2bff      	cmp	r3, #255	; 0xff
 8009b1a:	bf28      	it	cs
 8009b1c:	23ff      	movcs	r3, #255	; 0xff
 8009b1e:	617b      	str	r3, [r7, #20]
  MEMCPY(entry->name, name, namelen);
 8009b20:	6a3b      	ldr	r3, [r7, #32]
 8009b22:	3310      	adds	r3, #16
 8009b24:	697a      	ldr	r2, [r7, #20]
 8009b26:	68f9      	ldr	r1, [r7, #12]
 8009b28:	4618      	mov	r0, r3
 8009b2a:	f00d fd1a 	bl	8017562 <memcpy>
  entry->name[namelen] = 0;
 8009b2e:	6a3a      	ldr	r2, [r7, #32]
 8009b30:	697b      	ldr	r3, [r7, #20]
 8009b32:	4413      	add	r3, r2
 8009b34:	3310      	adds	r3, #16
 8009b36:	2200      	movs	r2, #0
 8009b38:	701a      	strb	r2, [r3, #0]

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
  entry->pcb_idx = dns_alloc_pcb();
 8009b3a:	f7ff fb53 	bl	80091e4 <dns_alloc_pcb>
 8009b3e:	4603      	mov	r3, r0
 8009b40:	461a      	mov	r2, r3
 8009b42:	6a3b      	ldr	r3, [r7, #32]
 8009b44:	73da      	strb	r2, [r3, #15]
  if (entry->pcb_idx >= DNS_MAX_SOURCE_PORTS) {
 8009b46:	6a3b      	ldr	r3, [r7, #32]
 8009b48:	7bdb      	ldrb	r3, [r3, #15]
 8009b4a:	2b03      	cmp	r3, #3
 8009b4c:	d908      	bls.n	8009b60 <dns_enqueue+0x23c>
    /* failed to get a UDP pcb */
    LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": failed to allocate a pcb\n", name));
    entry->state = DNS_STATE_UNUSED;
 8009b4e:	6a3b      	ldr	r3, [r7, #32]
 8009b50:	2200      	movs	r2, #0
 8009b52:	729a      	strb	r2, [r3, #10]
    req->found = NULL;
 8009b54:	69fb      	ldr	r3, [r7, #28]
 8009b56:	2200      	movs	r2, #0
 8009b58:	601a      	str	r2, [r3, #0]
    return ERR_MEM;
 8009b5a:	f04f 33ff 	mov.w	r3, #4294967295
 8009b5e:	e00c      	b.n	8009b7a <dns_enqueue+0x256>

#if LWIP_DNS_SUPPORT_MDNS_QUERIES
  entry->is_mdns = is_mdns;
#endif

  dns_seqno++;
 8009b60:	4b0a      	ldr	r3, [pc, #40]	; (8009b8c <dns_enqueue+0x268>)
 8009b62:	781b      	ldrb	r3, [r3, #0]
 8009b64:	3301      	adds	r3, #1
 8009b66:	b2da      	uxtb	r2, r3
 8009b68:	4b08      	ldr	r3, [pc, #32]	; (8009b8c <dns_enqueue+0x268>)
 8009b6a:	701a      	strb	r2, [r3, #0]

  /* force to send query without waiting timer */
  dns_check_entry(i);
 8009b6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009b70:	4618      	mov	r0, r3
 8009b72:	f7ff fc9b 	bl	80094ac <dns_check_entry>

  /* dns query is enqueued */
  return ERR_INPROGRESS;
 8009b76:	f06f 0304 	mvn.w	r3, #4
}
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	3728      	adds	r7, #40	; 0x28
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	bd80      	pop	{r7, pc}
 8009b82:	bf00      	nop
 8009b84:	20003f74 	.word	0x20003f74
 8009b88:	200043b4 	.word	0x200043b4
 8009b8c:	20003f71 	.word	0x20003f71

08009b90 <dns_gethostbyname>:
 * @return a err_t return code.
 */
err_t
dns_gethostbyname(const char *hostname, ip_addr_t *addr, dns_found_callback found,
                  void *callback_arg)
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b086      	sub	sp, #24
 8009b94:	af02      	add	r7, sp, #8
 8009b96:	60f8      	str	r0, [r7, #12]
 8009b98:	60b9      	str	r1, [r7, #8]
 8009b9a:	607a      	str	r2, [r7, #4]
 8009b9c:	603b      	str	r3, [r7, #0]
  return dns_gethostbyname_addrtype(hostname, addr, found, callback_arg, LWIP_DNS_ADDRTYPE_DEFAULT);
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	9300      	str	r3, [sp, #0]
 8009ba2:	683b      	ldr	r3, [r7, #0]
 8009ba4:	687a      	ldr	r2, [r7, #4]
 8009ba6:	68b9      	ldr	r1, [r7, #8]
 8009ba8:	68f8      	ldr	r0, [r7, #12]
 8009baa:	f000 f805 	bl	8009bb8 <dns_gethostbyname_addrtype>
 8009bae:	4603      	mov	r3, r0
}
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	3710      	adds	r7, #16
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	bd80      	pop	{r7, pc}

08009bb8 <dns_gethostbyname_addrtype>:
 *                     - LWIP_DNS_ADDRTYPE_IPV6: try to resolve IPv6 only
 */
err_t
dns_gethostbyname_addrtype(const char *hostname, ip_addr_t *addr, dns_found_callback found,
                           void *callback_arg, u8_t dns_addrtype)
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b086      	sub	sp, #24
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	60f8      	str	r0, [r7, #12]
 8009bc0:	60b9      	str	r1, [r7, #8]
 8009bc2:	607a      	str	r2, [r7, #4]
 8009bc4:	603b      	str	r3, [r7, #0]
#if LWIP_DNS_SUPPORT_MDNS_QUERIES
  u8_t is_mdns;
#endif
  /* not initialized or no valid server yet, or invalid addr pointer
   * or invalid hostname or invalid hostname length */
  if ((addr == NULL) ||
 8009bc6:	68bb      	ldr	r3, [r7, #8]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d006      	beq.n	8009bda <dns_gethostbyname_addrtype+0x22>
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d003      	beq.n	8009bda <dns_gethostbyname_addrtype+0x22>
      (!hostname) || (!hostname[0])) {
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	781b      	ldrb	r3, [r3, #0]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d102      	bne.n	8009be0 <dns_gethostbyname_addrtype+0x28>
    return ERR_ARG;
 8009bda:	f06f 030f 	mvn.w	r3, #15
 8009bde:	e029      	b.n	8009c34 <dns_gethostbyname_addrtype+0x7c>
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) == 0)
  if (dns_pcbs[0] == NULL) {
    return ERR_ARG;
  }
#endif
  hostnamelen = strlen(hostname);
 8009be0:	68f8      	ldr	r0, [r7, #12]
 8009be2:	f7f6 fb2d 	bl	8000240 <strlen>
 8009be6:	6178      	str	r0, [r7, #20]
  if (hostnamelen >= DNS_MAX_NAME_LENGTH) {
 8009be8:	697b      	ldr	r3, [r7, #20]
 8009bea:	2bff      	cmp	r3, #255	; 0xff
 8009bec:	d902      	bls.n	8009bf4 <dns_gethostbyname_addrtype+0x3c>
    LWIP_DEBUGF(DNS_DEBUG, ("dns_gethostbyname: name too long to resolve"));
    return ERR_ARG;
 8009bee:	f06f 030f 	mvn.w	r3, #15
 8009bf2:	e01f      	b.n	8009c34 <dns_gethostbyname_addrtype+0x7c>
    return ERR_OK;
  }
#endif /* LWIP_HAVE_LOOPIF */

  /* host name already in octet notation? set ip addr and return ERR_OK */
  if (ipaddr_aton(hostname, addr)) {
 8009bf4:	68b9      	ldr	r1, [r7, #8]
 8009bf6:	68f8      	ldr	r0, [r7, #12]
 8009bf8:	f001 fbe6 	bl	800b3c8 <ip4addr_aton>
 8009bfc:	4603      	mov	r3, r0
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d001      	beq.n	8009c06 <dns_gethostbyname_addrtype+0x4e>
#if LWIP_IPV4 && LWIP_IPV6
    if ((IP_IS_V6(addr) && (dns_addrtype != LWIP_DNS_ADDRTYPE_IPV4)) ||
        (IP_IS_V4(addr) && (dns_addrtype != LWIP_DNS_ADDRTYPE_IPV6)))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
    {
      return ERR_OK;
 8009c02:	2300      	movs	r3, #0
 8009c04:	e016      	b.n	8009c34 <dns_gethostbyname_addrtype+0x7c>
    }
  }
  /* already have this address cached? */
  if (dns_lookup(hostname, addr LWIP_DNS_ADDRTYPE_ARG(dns_addrtype)) == ERR_OK) {
 8009c06:	68b9      	ldr	r1, [r7, #8]
 8009c08:	68f8      	ldr	r0, [r7, #12]
 8009c0a:	f7ff f8a1 	bl	8008d50 <dns_lookup>
 8009c0e:	4603      	mov	r3, r0
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d101      	bne.n	8009c18 <dns_gethostbyname_addrtype+0x60>
    return ERR_OK;
 8009c14:	2300      	movs	r3, #0
 8009c16:	e00d      	b.n	8009c34 <dns_gethostbyname_addrtype+0x7c>

  if (!is_mdns)
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
  {
    /* prevent calling found callback if no server is set, return error instead */
    if (ip_addr_isany_val(dns_servers[0])) {
 8009c18:	4b08      	ldr	r3, [pc, #32]	; (8009c3c <dns_gethostbyname_addrtype+0x84>)
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d102      	bne.n	8009c26 <dns_gethostbyname_addrtype+0x6e>
      return ERR_VAL;
 8009c20:	f06f 0305 	mvn.w	r3, #5
 8009c24:	e006      	b.n	8009c34 <dns_gethostbyname_addrtype+0x7c>
    }
  }

  /* queue query with specified callback */
  return dns_enqueue(hostname, hostnamelen, found, callback_arg LWIP_DNS_ADDRTYPE_ARG(dns_addrtype)
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	687a      	ldr	r2, [r7, #4]
 8009c2a:	6979      	ldr	r1, [r7, #20]
 8009c2c:	68f8      	ldr	r0, [r7, #12]
 8009c2e:	f7ff fe79 	bl	8009924 <dns_enqueue>
 8009c32:	4603      	mov	r3, r0
                     LWIP_DNS_ISMDNS_ARG(is_mdns));
}
 8009c34:	4618      	mov	r0, r3
 8009c36:	3718      	adds	r7, #24
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	bd80      	pop	{r7, pc}
 8009c3c:	200043e4 	.word	0x200043e4

08009c40 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b082      	sub	sp, #8
 8009c44:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8009c46:	2300      	movs	r3, #0
 8009c48:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8009c4a:	f00b fb63 	bl	8015314 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8009c4e:	f002 fc75 	bl	800c53c <mem_init>
  memp_init();
 8009c52:	f002 ffd1 	bl	800cbf8 <memp_init>
  pbuf_init();
  netif_init();
 8009c56:	f003 f897 	bl	800cd88 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8009c5a:	f00a fd41 	bl	80146e0 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8009c5e:	f004 fc07 	bl	800e470 <tcp_init>
#endif /* LWIP_TCP */
#if LWIP_IGMP
  igmp_init();
#endif /* LWIP_IGMP */
#if LWIP_DNS
  dns_init();
 8009c62:	f7ff f844 	bl	8008cee <dns_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8009c66:	f00a fc8b 	bl	8014580 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8009c6a:	bf00      	nop
 8009c6c:	3708      	adds	r7, #8
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	bd80      	pop	{r7, pc}
	...

08009c74 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b082      	sub	sp, #8
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8009c7c:	4915      	ldr	r1, [pc, #84]	; (8009cd4 <etharp_free_entry+0x60>)
 8009c7e:	687a      	ldr	r2, [r7, #4]
 8009c80:	4613      	mov	r3, r2
 8009c82:	005b      	lsls	r3, r3, #1
 8009c84:	4413      	add	r3, r2
 8009c86:	00db      	lsls	r3, r3, #3
 8009c88:	440b      	add	r3, r1
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d013      	beq.n	8009cb8 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8009c90:	4910      	ldr	r1, [pc, #64]	; (8009cd4 <etharp_free_entry+0x60>)
 8009c92:	687a      	ldr	r2, [r7, #4]
 8009c94:	4613      	mov	r3, r2
 8009c96:	005b      	lsls	r3, r3, #1
 8009c98:	4413      	add	r3, r2
 8009c9a:	00db      	lsls	r3, r3, #3
 8009c9c:	440b      	add	r3, r1
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	f003 ff1b 	bl	800dadc <pbuf_free>
    arp_table[i].q = NULL;
 8009ca6:	490b      	ldr	r1, [pc, #44]	; (8009cd4 <etharp_free_entry+0x60>)
 8009ca8:	687a      	ldr	r2, [r7, #4]
 8009caa:	4613      	mov	r3, r2
 8009cac:	005b      	lsls	r3, r3, #1
 8009cae:	4413      	add	r3, r2
 8009cb0:	00db      	lsls	r3, r3, #3
 8009cb2:	440b      	add	r3, r1
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8009cb8:	4906      	ldr	r1, [pc, #24]	; (8009cd4 <etharp_free_entry+0x60>)
 8009cba:	687a      	ldr	r2, [r7, #4]
 8009cbc:	4613      	mov	r3, r2
 8009cbe:	005b      	lsls	r3, r3, #1
 8009cc0:	4413      	add	r3, r2
 8009cc2:	00db      	lsls	r3, r3, #3
 8009cc4:	440b      	add	r3, r1
 8009cc6:	3314      	adds	r3, #20
 8009cc8:	2200      	movs	r2, #0
 8009cca:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8009ccc:	bf00      	nop
 8009cce:	3708      	adds	r7, #8
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	bd80      	pop	{r7, pc}
 8009cd4:	200043ec 	.word	0x200043ec

08009cd8 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b082      	sub	sp, #8
 8009cdc:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8009cde:	2300      	movs	r3, #0
 8009ce0:	607b      	str	r3, [r7, #4]
 8009ce2:	e096      	b.n	8009e12 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8009ce4:	494f      	ldr	r1, [pc, #316]	; (8009e24 <etharp_tmr+0x14c>)
 8009ce6:	687a      	ldr	r2, [r7, #4]
 8009ce8:	4613      	mov	r3, r2
 8009cea:	005b      	lsls	r3, r3, #1
 8009cec:	4413      	add	r3, r2
 8009cee:	00db      	lsls	r3, r3, #3
 8009cf0:	440b      	add	r3, r1
 8009cf2:	3314      	adds	r3, #20
 8009cf4:	781b      	ldrb	r3, [r3, #0]
 8009cf6:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8009cf8:	78fb      	ldrb	r3, [r7, #3]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	f000 8086 	beq.w	8009e0c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8009d00:	4948      	ldr	r1, [pc, #288]	; (8009e24 <etharp_tmr+0x14c>)
 8009d02:	687a      	ldr	r2, [r7, #4]
 8009d04:	4613      	mov	r3, r2
 8009d06:	005b      	lsls	r3, r3, #1
 8009d08:	4413      	add	r3, r2
 8009d0a:	00db      	lsls	r3, r3, #3
 8009d0c:	440b      	add	r3, r1
 8009d0e:	3312      	adds	r3, #18
 8009d10:	881b      	ldrh	r3, [r3, #0]
 8009d12:	3301      	adds	r3, #1
 8009d14:	b298      	uxth	r0, r3
 8009d16:	4943      	ldr	r1, [pc, #268]	; (8009e24 <etharp_tmr+0x14c>)
 8009d18:	687a      	ldr	r2, [r7, #4]
 8009d1a:	4613      	mov	r3, r2
 8009d1c:	005b      	lsls	r3, r3, #1
 8009d1e:	4413      	add	r3, r2
 8009d20:	00db      	lsls	r3, r3, #3
 8009d22:	440b      	add	r3, r1
 8009d24:	3312      	adds	r3, #18
 8009d26:	4602      	mov	r2, r0
 8009d28:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8009d2a:	493e      	ldr	r1, [pc, #248]	; (8009e24 <etharp_tmr+0x14c>)
 8009d2c:	687a      	ldr	r2, [r7, #4]
 8009d2e:	4613      	mov	r3, r2
 8009d30:	005b      	lsls	r3, r3, #1
 8009d32:	4413      	add	r3, r2
 8009d34:	00db      	lsls	r3, r3, #3
 8009d36:	440b      	add	r3, r1
 8009d38:	3312      	adds	r3, #18
 8009d3a:	881b      	ldrh	r3, [r3, #0]
 8009d3c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8009d40:	d215      	bcs.n	8009d6e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8009d42:	4938      	ldr	r1, [pc, #224]	; (8009e24 <etharp_tmr+0x14c>)
 8009d44:	687a      	ldr	r2, [r7, #4]
 8009d46:	4613      	mov	r3, r2
 8009d48:	005b      	lsls	r3, r3, #1
 8009d4a:	4413      	add	r3, r2
 8009d4c:	00db      	lsls	r3, r3, #3
 8009d4e:	440b      	add	r3, r1
 8009d50:	3314      	adds	r3, #20
 8009d52:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8009d54:	2b01      	cmp	r3, #1
 8009d56:	d10e      	bne.n	8009d76 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8009d58:	4932      	ldr	r1, [pc, #200]	; (8009e24 <etharp_tmr+0x14c>)
 8009d5a:	687a      	ldr	r2, [r7, #4]
 8009d5c:	4613      	mov	r3, r2
 8009d5e:	005b      	lsls	r3, r3, #1
 8009d60:	4413      	add	r3, r2
 8009d62:	00db      	lsls	r3, r3, #3
 8009d64:	440b      	add	r3, r1
 8009d66:	3312      	adds	r3, #18
 8009d68:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8009d6a:	2b04      	cmp	r3, #4
 8009d6c:	d903      	bls.n	8009d76 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8009d6e:	6878      	ldr	r0, [r7, #4]
 8009d70:	f7ff ff80 	bl	8009c74 <etharp_free_entry>
 8009d74:	e04a      	b.n	8009e0c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8009d76:	492b      	ldr	r1, [pc, #172]	; (8009e24 <etharp_tmr+0x14c>)
 8009d78:	687a      	ldr	r2, [r7, #4]
 8009d7a:	4613      	mov	r3, r2
 8009d7c:	005b      	lsls	r3, r3, #1
 8009d7e:	4413      	add	r3, r2
 8009d80:	00db      	lsls	r3, r3, #3
 8009d82:	440b      	add	r3, r1
 8009d84:	3314      	adds	r3, #20
 8009d86:	781b      	ldrb	r3, [r3, #0]
 8009d88:	2b03      	cmp	r3, #3
 8009d8a:	d10a      	bne.n	8009da2 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8009d8c:	4925      	ldr	r1, [pc, #148]	; (8009e24 <etharp_tmr+0x14c>)
 8009d8e:	687a      	ldr	r2, [r7, #4]
 8009d90:	4613      	mov	r3, r2
 8009d92:	005b      	lsls	r3, r3, #1
 8009d94:	4413      	add	r3, r2
 8009d96:	00db      	lsls	r3, r3, #3
 8009d98:	440b      	add	r3, r1
 8009d9a:	3314      	adds	r3, #20
 8009d9c:	2204      	movs	r2, #4
 8009d9e:	701a      	strb	r2, [r3, #0]
 8009da0:	e034      	b.n	8009e0c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8009da2:	4920      	ldr	r1, [pc, #128]	; (8009e24 <etharp_tmr+0x14c>)
 8009da4:	687a      	ldr	r2, [r7, #4]
 8009da6:	4613      	mov	r3, r2
 8009da8:	005b      	lsls	r3, r3, #1
 8009daa:	4413      	add	r3, r2
 8009dac:	00db      	lsls	r3, r3, #3
 8009dae:	440b      	add	r3, r1
 8009db0:	3314      	adds	r3, #20
 8009db2:	781b      	ldrb	r3, [r3, #0]
 8009db4:	2b04      	cmp	r3, #4
 8009db6:	d10a      	bne.n	8009dce <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8009db8:	491a      	ldr	r1, [pc, #104]	; (8009e24 <etharp_tmr+0x14c>)
 8009dba:	687a      	ldr	r2, [r7, #4]
 8009dbc:	4613      	mov	r3, r2
 8009dbe:	005b      	lsls	r3, r3, #1
 8009dc0:	4413      	add	r3, r2
 8009dc2:	00db      	lsls	r3, r3, #3
 8009dc4:	440b      	add	r3, r1
 8009dc6:	3314      	adds	r3, #20
 8009dc8:	2202      	movs	r2, #2
 8009dca:	701a      	strb	r2, [r3, #0]
 8009dcc:	e01e      	b.n	8009e0c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8009dce:	4915      	ldr	r1, [pc, #84]	; (8009e24 <etharp_tmr+0x14c>)
 8009dd0:	687a      	ldr	r2, [r7, #4]
 8009dd2:	4613      	mov	r3, r2
 8009dd4:	005b      	lsls	r3, r3, #1
 8009dd6:	4413      	add	r3, r2
 8009dd8:	00db      	lsls	r3, r3, #3
 8009dda:	440b      	add	r3, r1
 8009ddc:	3314      	adds	r3, #20
 8009dde:	781b      	ldrb	r3, [r3, #0]
 8009de0:	2b01      	cmp	r3, #1
 8009de2:	d113      	bne.n	8009e0c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8009de4:	490f      	ldr	r1, [pc, #60]	; (8009e24 <etharp_tmr+0x14c>)
 8009de6:	687a      	ldr	r2, [r7, #4]
 8009de8:	4613      	mov	r3, r2
 8009dea:	005b      	lsls	r3, r3, #1
 8009dec:	4413      	add	r3, r2
 8009dee:	00db      	lsls	r3, r3, #3
 8009df0:	440b      	add	r3, r1
 8009df2:	3308      	adds	r3, #8
 8009df4:	6818      	ldr	r0, [r3, #0]
 8009df6:	687a      	ldr	r2, [r7, #4]
 8009df8:	4613      	mov	r3, r2
 8009dfa:	005b      	lsls	r3, r3, #1
 8009dfc:	4413      	add	r3, r2
 8009dfe:	00db      	lsls	r3, r3, #3
 8009e00:	4a08      	ldr	r2, [pc, #32]	; (8009e24 <etharp_tmr+0x14c>)
 8009e02:	4413      	add	r3, r2
 8009e04:	3304      	adds	r3, #4
 8009e06:	4619      	mov	r1, r3
 8009e08:	f000 fe6e 	bl	800aae8 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	3301      	adds	r3, #1
 8009e10:	607b      	str	r3, [r7, #4]
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	2b09      	cmp	r3, #9
 8009e16:	f77f af65 	ble.w	8009ce4 <etharp_tmr+0xc>
      }
    }
  }
}
 8009e1a:	bf00      	nop
 8009e1c:	3708      	adds	r7, #8
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	bd80      	pop	{r7, pc}
 8009e22:	bf00      	nop
 8009e24:	200043ec 	.word	0x200043ec

08009e28 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b08a      	sub	sp, #40	; 0x28
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	60f8      	str	r0, [r7, #12]
 8009e30:	460b      	mov	r3, r1
 8009e32:	607a      	str	r2, [r7, #4]
 8009e34:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8009e36:	230a      	movs	r3, #10
 8009e38:	84fb      	strh	r3, [r7, #38]	; 0x26
 8009e3a:	230a      	movs	r3, #10
 8009e3c:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8009e3e:	230a      	movs	r3, #10
 8009e40:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8009e42:	2300      	movs	r3, #0
 8009e44:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8009e46:	230a      	movs	r3, #10
 8009e48:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	83bb      	strh	r3, [r7, #28]
 8009e4e:	2300      	movs	r3, #0
 8009e50:	837b      	strh	r3, [r7, #26]
 8009e52:	2300      	movs	r3, #0
 8009e54:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8009e56:	2300      	movs	r3, #0
 8009e58:	843b      	strh	r3, [r7, #32]
 8009e5a:	e0ae      	b.n	8009fba <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8009e5c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8009e60:	49a6      	ldr	r1, [pc, #664]	; (800a0fc <etharp_find_entry+0x2d4>)
 8009e62:	4613      	mov	r3, r2
 8009e64:	005b      	lsls	r3, r3, #1
 8009e66:	4413      	add	r3, r2
 8009e68:	00db      	lsls	r3, r3, #3
 8009e6a:	440b      	add	r3, r1
 8009e6c:	3314      	adds	r3, #20
 8009e6e:	781b      	ldrb	r3, [r3, #0]
 8009e70:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8009e72:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8009e76:	2b0a      	cmp	r3, #10
 8009e78:	d105      	bne.n	8009e86 <etharp_find_entry+0x5e>
 8009e7a:	7dfb      	ldrb	r3, [r7, #23]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d102      	bne.n	8009e86 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8009e80:	8c3b      	ldrh	r3, [r7, #32]
 8009e82:	847b      	strh	r3, [r7, #34]	; 0x22
 8009e84:	e095      	b.n	8009fb2 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8009e86:	7dfb      	ldrb	r3, [r7, #23]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	f000 8092 	beq.w	8009fb2 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8009e8e:	7dfb      	ldrb	r3, [r7, #23]
 8009e90:	2b01      	cmp	r3, #1
 8009e92:	d009      	beq.n	8009ea8 <etharp_find_entry+0x80>
 8009e94:	7dfb      	ldrb	r3, [r7, #23]
 8009e96:	2b01      	cmp	r3, #1
 8009e98:	d806      	bhi.n	8009ea8 <etharp_find_entry+0x80>
 8009e9a:	4b99      	ldr	r3, [pc, #612]	; (800a100 <etharp_find_entry+0x2d8>)
 8009e9c:	f44f 7292 	mov.w	r2, #292	; 0x124
 8009ea0:	4998      	ldr	r1, [pc, #608]	; (800a104 <etharp_find_entry+0x2dc>)
 8009ea2:	4899      	ldr	r0, [pc, #612]	; (800a108 <etharp_find_entry+0x2e0>)
 8009ea4:	f00d fc36 	bl	8017714 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d020      	beq.n	8009ef0 <etharp_find_entry+0xc8>
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	6819      	ldr	r1, [r3, #0]
 8009eb2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8009eb6:	4891      	ldr	r0, [pc, #580]	; (800a0fc <etharp_find_entry+0x2d4>)
 8009eb8:	4613      	mov	r3, r2
 8009eba:	005b      	lsls	r3, r3, #1
 8009ebc:	4413      	add	r3, r2
 8009ebe:	00db      	lsls	r3, r3, #3
 8009ec0:	4403      	add	r3, r0
 8009ec2:	3304      	adds	r3, #4
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	4299      	cmp	r1, r3
 8009ec8:	d112      	bne.n	8009ef0 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d00c      	beq.n	8009eea <etharp_find_entry+0xc2>
 8009ed0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8009ed4:	4989      	ldr	r1, [pc, #548]	; (800a0fc <etharp_find_entry+0x2d4>)
 8009ed6:	4613      	mov	r3, r2
 8009ed8:	005b      	lsls	r3, r3, #1
 8009eda:	4413      	add	r3, r2
 8009edc:	00db      	lsls	r3, r3, #3
 8009ede:	440b      	add	r3, r1
 8009ee0:	3308      	adds	r3, #8
 8009ee2:	681a      	ldr	r2, [r3, #0]
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	429a      	cmp	r2, r3
 8009ee8:	d102      	bne.n	8009ef0 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8009eea:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8009eee:	e100      	b.n	800a0f2 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8009ef0:	7dfb      	ldrb	r3, [r7, #23]
 8009ef2:	2b01      	cmp	r3, #1
 8009ef4:	d140      	bne.n	8009f78 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8009ef6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8009efa:	4980      	ldr	r1, [pc, #512]	; (800a0fc <etharp_find_entry+0x2d4>)
 8009efc:	4613      	mov	r3, r2
 8009efe:	005b      	lsls	r3, r3, #1
 8009f00:	4413      	add	r3, r2
 8009f02:	00db      	lsls	r3, r3, #3
 8009f04:	440b      	add	r3, r1
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d01a      	beq.n	8009f42 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8009f0c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8009f10:	497a      	ldr	r1, [pc, #488]	; (800a0fc <etharp_find_entry+0x2d4>)
 8009f12:	4613      	mov	r3, r2
 8009f14:	005b      	lsls	r3, r3, #1
 8009f16:	4413      	add	r3, r2
 8009f18:	00db      	lsls	r3, r3, #3
 8009f1a:	440b      	add	r3, r1
 8009f1c:	3312      	adds	r3, #18
 8009f1e:	881b      	ldrh	r3, [r3, #0]
 8009f20:	8bba      	ldrh	r2, [r7, #28]
 8009f22:	429a      	cmp	r2, r3
 8009f24:	d845      	bhi.n	8009fb2 <etharp_find_entry+0x18a>
            old_queue = i;
 8009f26:	8c3b      	ldrh	r3, [r7, #32]
 8009f28:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8009f2a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8009f2e:	4973      	ldr	r1, [pc, #460]	; (800a0fc <etharp_find_entry+0x2d4>)
 8009f30:	4613      	mov	r3, r2
 8009f32:	005b      	lsls	r3, r3, #1
 8009f34:	4413      	add	r3, r2
 8009f36:	00db      	lsls	r3, r3, #3
 8009f38:	440b      	add	r3, r1
 8009f3a:	3312      	adds	r3, #18
 8009f3c:	881b      	ldrh	r3, [r3, #0]
 8009f3e:	83bb      	strh	r3, [r7, #28]
 8009f40:	e037      	b.n	8009fb2 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8009f42:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8009f46:	496d      	ldr	r1, [pc, #436]	; (800a0fc <etharp_find_entry+0x2d4>)
 8009f48:	4613      	mov	r3, r2
 8009f4a:	005b      	lsls	r3, r3, #1
 8009f4c:	4413      	add	r3, r2
 8009f4e:	00db      	lsls	r3, r3, #3
 8009f50:	440b      	add	r3, r1
 8009f52:	3312      	adds	r3, #18
 8009f54:	881b      	ldrh	r3, [r3, #0]
 8009f56:	8b7a      	ldrh	r2, [r7, #26]
 8009f58:	429a      	cmp	r2, r3
 8009f5a:	d82a      	bhi.n	8009fb2 <etharp_find_entry+0x18a>
            old_pending = i;
 8009f5c:	8c3b      	ldrh	r3, [r7, #32]
 8009f5e:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8009f60:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8009f64:	4965      	ldr	r1, [pc, #404]	; (800a0fc <etharp_find_entry+0x2d4>)
 8009f66:	4613      	mov	r3, r2
 8009f68:	005b      	lsls	r3, r3, #1
 8009f6a:	4413      	add	r3, r2
 8009f6c:	00db      	lsls	r3, r3, #3
 8009f6e:	440b      	add	r3, r1
 8009f70:	3312      	adds	r3, #18
 8009f72:	881b      	ldrh	r3, [r3, #0]
 8009f74:	837b      	strh	r3, [r7, #26]
 8009f76:	e01c      	b.n	8009fb2 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8009f78:	7dfb      	ldrb	r3, [r7, #23]
 8009f7a:	2b01      	cmp	r3, #1
 8009f7c:	d919      	bls.n	8009fb2 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8009f7e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8009f82:	495e      	ldr	r1, [pc, #376]	; (800a0fc <etharp_find_entry+0x2d4>)
 8009f84:	4613      	mov	r3, r2
 8009f86:	005b      	lsls	r3, r3, #1
 8009f88:	4413      	add	r3, r2
 8009f8a:	00db      	lsls	r3, r3, #3
 8009f8c:	440b      	add	r3, r1
 8009f8e:	3312      	adds	r3, #18
 8009f90:	881b      	ldrh	r3, [r3, #0]
 8009f92:	8b3a      	ldrh	r2, [r7, #24]
 8009f94:	429a      	cmp	r2, r3
 8009f96:	d80c      	bhi.n	8009fb2 <etharp_find_entry+0x18a>
            old_stable = i;
 8009f98:	8c3b      	ldrh	r3, [r7, #32]
 8009f9a:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8009f9c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8009fa0:	4956      	ldr	r1, [pc, #344]	; (800a0fc <etharp_find_entry+0x2d4>)
 8009fa2:	4613      	mov	r3, r2
 8009fa4:	005b      	lsls	r3, r3, #1
 8009fa6:	4413      	add	r3, r2
 8009fa8:	00db      	lsls	r3, r3, #3
 8009faa:	440b      	add	r3, r1
 8009fac:	3312      	adds	r3, #18
 8009fae:	881b      	ldrh	r3, [r3, #0]
 8009fb0:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8009fb2:	8c3b      	ldrh	r3, [r7, #32]
 8009fb4:	3301      	adds	r3, #1
 8009fb6:	b29b      	uxth	r3, r3
 8009fb8:	843b      	strh	r3, [r7, #32]
 8009fba:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8009fbe:	2b09      	cmp	r3, #9
 8009fc0:	f77f af4c 	ble.w	8009e5c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8009fc4:	7afb      	ldrb	r3, [r7, #11]
 8009fc6:	f003 0302 	and.w	r3, r3, #2
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d108      	bne.n	8009fe0 <etharp_find_entry+0x1b8>
 8009fce:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8009fd2:	2b0a      	cmp	r3, #10
 8009fd4:	d107      	bne.n	8009fe6 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8009fd6:	7afb      	ldrb	r3, [r7, #11]
 8009fd8:	f003 0301 	and.w	r3, r3, #1
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d102      	bne.n	8009fe6 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8009fe0:	f04f 33ff 	mov.w	r3, #4294967295
 8009fe4:	e085      	b.n	800a0f2 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8009fe6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8009fea:	2b09      	cmp	r3, #9
 8009fec:	dc02      	bgt.n	8009ff4 <etharp_find_entry+0x1cc>
    i = empty;
 8009fee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009ff0:	843b      	strh	r3, [r7, #32]
 8009ff2:	e039      	b.n	800a068 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8009ff4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8009ff8:	2b09      	cmp	r3, #9
 8009ffa:	dc14      	bgt.n	800a026 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8009ffc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009ffe:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800a000:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a004:	493d      	ldr	r1, [pc, #244]	; (800a0fc <etharp_find_entry+0x2d4>)
 800a006:	4613      	mov	r3, r2
 800a008:	005b      	lsls	r3, r3, #1
 800a00a:	4413      	add	r3, r2
 800a00c:	00db      	lsls	r3, r3, #3
 800a00e:	440b      	add	r3, r1
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d018      	beq.n	800a048 <etharp_find_entry+0x220>
 800a016:	4b3a      	ldr	r3, [pc, #232]	; (800a100 <etharp_find_entry+0x2d8>)
 800a018:	f240 126d 	movw	r2, #365	; 0x16d
 800a01c:	493b      	ldr	r1, [pc, #236]	; (800a10c <etharp_find_entry+0x2e4>)
 800a01e:	483a      	ldr	r0, [pc, #232]	; (800a108 <etharp_find_entry+0x2e0>)
 800a020:	f00d fb78 	bl	8017714 <iprintf>
 800a024:	e010      	b.n	800a048 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800a026:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800a02a:	2b09      	cmp	r3, #9
 800a02c:	dc02      	bgt.n	800a034 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800a02e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a030:	843b      	strh	r3, [r7, #32]
 800a032:	e009      	b.n	800a048 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800a034:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800a038:	2b09      	cmp	r3, #9
 800a03a:	dc02      	bgt.n	800a042 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800a03c:	8bfb      	ldrh	r3, [r7, #30]
 800a03e:	843b      	strh	r3, [r7, #32]
 800a040:	e002      	b.n	800a048 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800a042:	f04f 33ff 	mov.w	r3, #4294967295
 800a046:	e054      	b.n	800a0f2 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800a048:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800a04c:	2b09      	cmp	r3, #9
 800a04e:	dd06      	ble.n	800a05e <etharp_find_entry+0x236>
 800a050:	4b2b      	ldr	r3, [pc, #172]	; (800a100 <etharp_find_entry+0x2d8>)
 800a052:	f240 127f 	movw	r2, #383	; 0x17f
 800a056:	492e      	ldr	r1, [pc, #184]	; (800a110 <etharp_find_entry+0x2e8>)
 800a058:	482b      	ldr	r0, [pc, #172]	; (800a108 <etharp_find_entry+0x2e0>)
 800a05a:	f00d fb5b 	bl	8017714 <iprintf>
    etharp_free_entry(i);
 800a05e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800a062:	4618      	mov	r0, r3
 800a064:	f7ff fe06 	bl	8009c74 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800a068:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800a06c:	2b09      	cmp	r3, #9
 800a06e:	dd06      	ble.n	800a07e <etharp_find_entry+0x256>
 800a070:	4b23      	ldr	r3, [pc, #140]	; (800a100 <etharp_find_entry+0x2d8>)
 800a072:	f240 1283 	movw	r2, #387	; 0x183
 800a076:	4926      	ldr	r1, [pc, #152]	; (800a110 <etharp_find_entry+0x2e8>)
 800a078:	4823      	ldr	r0, [pc, #140]	; (800a108 <etharp_find_entry+0x2e0>)
 800a07a:	f00d fb4b 	bl	8017714 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800a07e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a082:	491e      	ldr	r1, [pc, #120]	; (800a0fc <etharp_find_entry+0x2d4>)
 800a084:	4613      	mov	r3, r2
 800a086:	005b      	lsls	r3, r3, #1
 800a088:	4413      	add	r3, r2
 800a08a:	00db      	lsls	r3, r3, #3
 800a08c:	440b      	add	r3, r1
 800a08e:	3314      	adds	r3, #20
 800a090:	781b      	ldrb	r3, [r3, #0]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d006      	beq.n	800a0a4 <etharp_find_entry+0x27c>
 800a096:	4b1a      	ldr	r3, [pc, #104]	; (800a100 <etharp_find_entry+0x2d8>)
 800a098:	f240 1285 	movw	r2, #389	; 0x185
 800a09c:	491d      	ldr	r1, [pc, #116]	; (800a114 <etharp_find_entry+0x2ec>)
 800a09e:	481a      	ldr	r0, [pc, #104]	; (800a108 <etharp_find_entry+0x2e0>)
 800a0a0:	f00d fb38 	bl	8017714 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d00b      	beq.n	800a0c2 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800a0aa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	6819      	ldr	r1, [r3, #0]
 800a0b2:	4812      	ldr	r0, [pc, #72]	; (800a0fc <etharp_find_entry+0x2d4>)
 800a0b4:	4613      	mov	r3, r2
 800a0b6:	005b      	lsls	r3, r3, #1
 800a0b8:	4413      	add	r3, r2
 800a0ba:	00db      	lsls	r3, r3, #3
 800a0bc:	4403      	add	r3, r0
 800a0be:	3304      	adds	r3, #4
 800a0c0:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800a0c2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a0c6:	490d      	ldr	r1, [pc, #52]	; (800a0fc <etharp_find_entry+0x2d4>)
 800a0c8:	4613      	mov	r3, r2
 800a0ca:	005b      	lsls	r3, r3, #1
 800a0cc:	4413      	add	r3, r2
 800a0ce:	00db      	lsls	r3, r3, #3
 800a0d0:	440b      	add	r3, r1
 800a0d2:	3312      	adds	r3, #18
 800a0d4:	2200      	movs	r2, #0
 800a0d6:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800a0d8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a0dc:	4907      	ldr	r1, [pc, #28]	; (800a0fc <etharp_find_entry+0x2d4>)
 800a0de:	4613      	mov	r3, r2
 800a0e0:	005b      	lsls	r3, r3, #1
 800a0e2:	4413      	add	r3, r2
 800a0e4:	00db      	lsls	r3, r3, #3
 800a0e6:	440b      	add	r3, r1
 800a0e8:	3308      	adds	r3, #8
 800a0ea:	687a      	ldr	r2, [r7, #4]
 800a0ec:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800a0ee:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	3728      	adds	r7, #40	; 0x28
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	bd80      	pop	{r7, pc}
 800a0fa:	bf00      	nop
 800a0fc:	200043ec 	.word	0x200043ec
 800a100:	08018d74 	.word	0x08018d74
 800a104:	08018dac 	.word	0x08018dac
 800a108:	08018dec 	.word	0x08018dec
 800a10c:	08018e14 	.word	0x08018e14
 800a110:	08018e2c 	.word	0x08018e2c
 800a114:	08018e40 	.word	0x08018e40

0800a118 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b088      	sub	sp, #32
 800a11c:	af02      	add	r7, sp, #8
 800a11e:	60f8      	str	r0, [r7, #12]
 800a120:	60b9      	str	r1, [r7, #8]
 800a122:	607a      	str	r2, [r7, #4]
 800a124:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a12c:	2b06      	cmp	r3, #6
 800a12e:	d006      	beq.n	800a13e <etharp_update_arp_entry+0x26>
 800a130:	4b48      	ldr	r3, [pc, #288]	; (800a254 <etharp_update_arp_entry+0x13c>)
 800a132:	f240 12a9 	movw	r2, #425	; 0x1a9
 800a136:	4948      	ldr	r1, [pc, #288]	; (800a258 <etharp_update_arp_entry+0x140>)
 800a138:	4848      	ldr	r0, [pc, #288]	; (800a25c <etharp_update_arp_entry+0x144>)
 800a13a:	f00d faeb 	bl	8017714 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800a13e:	68bb      	ldr	r3, [r7, #8]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d012      	beq.n	800a16a <etharp_update_arp_entry+0x52>
 800a144:	68bb      	ldr	r3, [r7, #8]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d00e      	beq.n	800a16a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800a14c:	68bb      	ldr	r3, [r7, #8]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	68f9      	ldr	r1, [r7, #12]
 800a152:	4618      	mov	r0, r3
 800a154:	f001 f8f6 	bl	800b344 <ip4_addr_isbroadcast_u32>
 800a158:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d105      	bne.n	800a16a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800a15e:	68bb      	ldr	r3, [r7, #8]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800a166:	2be0      	cmp	r3, #224	; 0xe0
 800a168:	d102      	bne.n	800a170 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800a16a:	f06f 030f 	mvn.w	r3, #15
 800a16e:	e06c      	b.n	800a24a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800a170:	78fb      	ldrb	r3, [r7, #3]
 800a172:	68fa      	ldr	r2, [r7, #12]
 800a174:	4619      	mov	r1, r3
 800a176:	68b8      	ldr	r0, [r7, #8]
 800a178:	f7ff fe56 	bl	8009e28 <etharp_find_entry>
 800a17c:	4603      	mov	r3, r0
 800a17e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800a180:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800a184:	2b00      	cmp	r3, #0
 800a186:	da02      	bge.n	800a18e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800a188:	8afb      	ldrh	r3, [r7, #22]
 800a18a:	b25b      	sxtb	r3, r3
 800a18c:	e05d      	b.n	800a24a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800a18e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800a192:	4933      	ldr	r1, [pc, #204]	; (800a260 <etharp_update_arp_entry+0x148>)
 800a194:	4613      	mov	r3, r2
 800a196:	005b      	lsls	r3, r3, #1
 800a198:	4413      	add	r3, r2
 800a19a:	00db      	lsls	r3, r3, #3
 800a19c:	440b      	add	r3, r1
 800a19e:	3314      	adds	r3, #20
 800a1a0:	2202      	movs	r2, #2
 800a1a2:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800a1a4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800a1a8:	492d      	ldr	r1, [pc, #180]	; (800a260 <etharp_update_arp_entry+0x148>)
 800a1aa:	4613      	mov	r3, r2
 800a1ac:	005b      	lsls	r3, r3, #1
 800a1ae:	4413      	add	r3, r2
 800a1b0:	00db      	lsls	r3, r3, #3
 800a1b2:	440b      	add	r3, r1
 800a1b4:	3308      	adds	r3, #8
 800a1b6:	68fa      	ldr	r2, [r7, #12]
 800a1b8:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800a1ba:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800a1be:	4613      	mov	r3, r2
 800a1c0:	005b      	lsls	r3, r3, #1
 800a1c2:	4413      	add	r3, r2
 800a1c4:	00db      	lsls	r3, r3, #3
 800a1c6:	3308      	adds	r3, #8
 800a1c8:	4a25      	ldr	r2, [pc, #148]	; (800a260 <etharp_update_arp_entry+0x148>)
 800a1ca:	4413      	add	r3, r2
 800a1cc:	3304      	adds	r3, #4
 800a1ce:	2206      	movs	r2, #6
 800a1d0:	6879      	ldr	r1, [r7, #4]
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	f00d f9c5 	bl	8017562 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800a1d8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800a1dc:	4920      	ldr	r1, [pc, #128]	; (800a260 <etharp_update_arp_entry+0x148>)
 800a1de:	4613      	mov	r3, r2
 800a1e0:	005b      	lsls	r3, r3, #1
 800a1e2:	4413      	add	r3, r2
 800a1e4:	00db      	lsls	r3, r3, #3
 800a1e6:	440b      	add	r3, r1
 800a1e8:	3312      	adds	r3, #18
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800a1ee:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800a1f2:	491b      	ldr	r1, [pc, #108]	; (800a260 <etharp_update_arp_entry+0x148>)
 800a1f4:	4613      	mov	r3, r2
 800a1f6:	005b      	lsls	r3, r3, #1
 800a1f8:	4413      	add	r3, r2
 800a1fa:	00db      	lsls	r3, r3, #3
 800a1fc:	440b      	add	r3, r1
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d021      	beq.n	800a248 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800a204:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800a208:	4915      	ldr	r1, [pc, #84]	; (800a260 <etharp_update_arp_entry+0x148>)
 800a20a:	4613      	mov	r3, r2
 800a20c:	005b      	lsls	r3, r3, #1
 800a20e:	4413      	add	r3, r2
 800a210:	00db      	lsls	r3, r3, #3
 800a212:	440b      	add	r3, r1
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800a218:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800a21c:	4910      	ldr	r1, [pc, #64]	; (800a260 <etharp_update_arp_entry+0x148>)
 800a21e:	4613      	mov	r3, r2
 800a220:	005b      	lsls	r3, r3, #1
 800a222:	4413      	add	r3, r2
 800a224:	00db      	lsls	r3, r3, #3
 800a226:	440b      	add	r3, r1
 800a228:	2200      	movs	r2, #0
 800a22a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800a232:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a236:	9300      	str	r3, [sp, #0]
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	6939      	ldr	r1, [r7, #16]
 800a23c:	68f8      	ldr	r0, [r7, #12]
 800a23e:	f00a ff95 	bl	801516c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800a242:	6938      	ldr	r0, [r7, #16]
 800a244:	f003 fc4a 	bl	800dadc <pbuf_free>
  }
  return ERR_OK;
 800a248:	2300      	movs	r3, #0
}
 800a24a:	4618      	mov	r0, r3
 800a24c:	3718      	adds	r7, #24
 800a24e:	46bd      	mov	sp, r7
 800a250:	bd80      	pop	{r7, pc}
 800a252:	bf00      	nop
 800a254:	08018d74 	.word	0x08018d74
 800a258:	08018e6c 	.word	0x08018e6c
 800a25c:	08018dec 	.word	0x08018dec
 800a260:	200043ec 	.word	0x200043ec

0800a264 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800a264:	b580      	push	{r7, lr}
 800a266:	b084      	sub	sp, #16
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800a26c:	2300      	movs	r3, #0
 800a26e:	60fb      	str	r3, [r7, #12]
 800a270:	e01e      	b.n	800a2b0 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800a272:	4913      	ldr	r1, [pc, #76]	; (800a2c0 <etharp_cleanup_netif+0x5c>)
 800a274:	68fa      	ldr	r2, [r7, #12]
 800a276:	4613      	mov	r3, r2
 800a278:	005b      	lsls	r3, r3, #1
 800a27a:	4413      	add	r3, r2
 800a27c:	00db      	lsls	r3, r3, #3
 800a27e:	440b      	add	r3, r1
 800a280:	3314      	adds	r3, #20
 800a282:	781b      	ldrb	r3, [r3, #0]
 800a284:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800a286:	7afb      	ldrb	r3, [r7, #11]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d00e      	beq.n	800a2aa <etharp_cleanup_netif+0x46>
 800a28c:	490c      	ldr	r1, [pc, #48]	; (800a2c0 <etharp_cleanup_netif+0x5c>)
 800a28e:	68fa      	ldr	r2, [r7, #12]
 800a290:	4613      	mov	r3, r2
 800a292:	005b      	lsls	r3, r3, #1
 800a294:	4413      	add	r3, r2
 800a296:	00db      	lsls	r3, r3, #3
 800a298:	440b      	add	r3, r1
 800a29a:	3308      	adds	r3, #8
 800a29c:	681a      	ldr	r2, [r3, #0]
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	429a      	cmp	r2, r3
 800a2a2:	d102      	bne.n	800a2aa <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800a2a4:	68f8      	ldr	r0, [r7, #12]
 800a2a6:	f7ff fce5 	bl	8009c74 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	3301      	adds	r3, #1
 800a2ae:	60fb      	str	r3, [r7, #12]
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	2b09      	cmp	r3, #9
 800a2b4:	dddd      	ble.n	800a272 <etharp_cleanup_netif+0xe>
    }
  }
}
 800a2b6:	bf00      	nop
 800a2b8:	3710      	adds	r7, #16
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	bd80      	pop	{r7, pc}
 800a2be:	bf00      	nop
 800a2c0:	200043ec 	.word	0x200043ec

0800a2c4 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800a2c4:	b5b0      	push	{r4, r5, r7, lr}
 800a2c6:	b08a      	sub	sp, #40	; 0x28
 800a2c8:	af04      	add	r7, sp, #16
 800a2ca:	6078      	str	r0, [r7, #4]
 800a2cc:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800a2ce:	683b      	ldr	r3, [r7, #0]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d107      	bne.n	800a2e4 <etharp_input+0x20>
 800a2d4:	4b3d      	ldr	r3, [pc, #244]	; (800a3cc <etharp_input+0x108>)
 800a2d6:	f240 228a 	movw	r2, #650	; 0x28a
 800a2da:	493d      	ldr	r1, [pc, #244]	; (800a3d0 <etharp_input+0x10c>)
 800a2dc:	483d      	ldr	r0, [pc, #244]	; (800a3d4 <etharp_input+0x110>)
 800a2de:	f00d fa19 	bl	8017714 <iprintf>
 800a2e2:	e06f      	b.n	800a3c4 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	685b      	ldr	r3, [r3, #4]
 800a2e8:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800a2ea:	693b      	ldr	r3, [r7, #16]
 800a2ec:	881b      	ldrh	r3, [r3, #0]
 800a2ee:	b29b      	uxth	r3, r3
 800a2f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a2f4:	d10c      	bne.n	800a310 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800a2f6:	693b      	ldr	r3, [r7, #16]
 800a2f8:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800a2fa:	2b06      	cmp	r3, #6
 800a2fc:	d108      	bne.n	800a310 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800a2fe:	693b      	ldr	r3, [r7, #16]
 800a300:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800a302:	2b04      	cmp	r3, #4
 800a304:	d104      	bne.n	800a310 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800a306:	693b      	ldr	r3, [r7, #16]
 800a308:	885b      	ldrh	r3, [r3, #2]
 800a30a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800a30c:	2b08      	cmp	r3, #8
 800a30e:	d003      	beq.n	800a318 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800a310:	6878      	ldr	r0, [r7, #4]
 800a312:	f003 fbe3 	bl	800dadc <pbuf_free>
    return;
 800a316:	e055      	b.n	800a3c4 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800a318:	693b      	ldr	r3, [r7, #16]
 800a31a:	330e      	adds	r3, #14
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800a320:	693b      	ldr	r3, [r7, #16]
 800a322:	3318      	adds	r3, #24
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800a328:	683b      	ldr	r3, [r7, #0]
 800a32a:	3304      	adds	r3, #4
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d102      	bne.n	800a338 <etharp_input+0x74>
    for_us = 0;
 800a332:	2300      	movs	r3, #0
 800a334:	75fb      	strb	r3, [r7, #23]
 800a336:	e009      	b.n	800a34c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800a338:	68ba      	ldr	r2, [r7, #8]
 800a33a:	683b      	ldr	r3, [r7, #0]
 800a33c:	3304      	adds	r3, #4
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	429a      	cmp	r2, r3
 800a342:	bf0c      	ite	eq
 800a344:	2301      	moveq	r3, #1
 800a346:	2300      	movne	r3, #0
 800a348:	b2db      	uxtb	r3, r3
 800a34a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800a34c:	693b      	ldr	r3, [r7, #16]
 800a34e:	f103 0208 	add.w	r2, r3, #8
 800a352:	7dfb      	ldrb	r3, [r7, #23]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d001      	beq.n	800a35c <etharp_input+0x98>
 800a358:	2301      	movs	r3, #1
 800a35a:	e000      	b.n	800a35e <etharp_input+0x9a>
 800a35c:	2302      	movs	r3, #2
 800a35e:	f107 010c 	add.w	r1, r7, #12
 800a362:	6838      	ldr	r0, [r7, #0]
 800a364:	f7ff fed8 	bl	800a118 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800a368:	693b      	ldr	r3, [r7, #16]
 800a36a:	88db      	ldrh	r3, [r3, #6]
 800a36c:	b29b      	uxth	r3, r3
 800a36e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a372:	d003      	beq.n	800a37c <etharp_input+0xb8>
 800a374:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a378:	d01e      	beq.n	800a3b8 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800a37a:	e020      	b.n	800a3be <etharp_input+0xfa>
      if (for_us) {
 800a37c:	7dfb      	ldrb	r3, [r7, #23]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d01c      	beq.n	800a3bc <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800a382:	683b      	ldr	r3, [r7, #0]
 800a384:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800a388:	693b      	ldr	r3, [r7, #16]
 800a38a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800a38e:	683b      	ldr	r3, [r7, #0]
 800a390:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800a394:	683b      	ldr	r3, [r7, #0]
 800a396:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800a398:	693a      	ldr	r2, [r7, #16]
 800a39a:	3208      	adds	r2, #8
        etharp_raw(netif,
 800a39c:	2102      	movs	r1, #2
 800a39e:	9103      	str	r1, [sp, #12]
 800a3a0:	f107 010c 	add.w	r1, r7, #12
 800a3a4:	9102      	str	r1, [sp, #8]
 800a3a6:	9201      	str	r2, [sp, #4]
 800a3a8:	9300      	str	r3, [sp, #0]
 800a3aa:	462b      	mov	r3, r5
 800a3ac:	4622      	mov	r2, r4
 800a3ae:	4601      	mov	r1, r0
 800a3b0:	6838      	ldr	r0, [r7, #0]
 800a3b2:	f000 faeb 	bl	800a98c <etharp_raw>
      break;
 800a3b6:	e001      	b.n	800a3bc <etharp_input+0xf8>
      break;
 800a3b8:	bf00      	nop
 800a3ba:	e000      	b.n	800a3be <etharp_input+0xfa>
      break;
 800a3bc:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800a3be:	6878      	ldr	r0, [r7, #4]
 800a3c0:	f003 fb8c 	bl	800dadc <pbuf_free>
}
 800a3c4:	3718      	adds	r7, #24
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	bdb0      	pop	{r4, r5, r7, pc}
 800a3ca:	bf00      	nop
 800a3cc:	08018d74 	.word	0x08018d74
 800a3d0:	08018ec4 	.word	0x08018ec4
 800a3d4:	08018dec 	.word	0x08018dec

0800a3d8 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	b086      	sub	sp, #24
 800a3dc:	af02      	add	r7, sp, #8
 800a3de:	60f8      	str	r0, [r7, #12]
 800a3e0:	60b9      	str	r1, [r7, #8]
 800a3e2:	4613      	mov	r3, r2
 800a3e4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800a3e6:	79fa      	ldrb	r2, [r7, #7]
 800a3e8:	4944      	ldr	r1, [pc, #272]	; (800a4fc <etharp_output_to_arp_index+0x124>)
 800a3ea:	4613      	mov	r3, r2
 800a3ec:	005b      	lsls	r3, r3, #1
 800a3ee:	4413      	add	r3, r2
 800a3f0:	00db      	lsls	r3, r3, #3
 800a3f2:	440b      	add	r3, r1
 800a3f4:	3314      	adds	r3, #20
 800a3f6:	781b      	ldrb	r3, [r3, #0]
 800a3f8:	2b01      	cmp	r3, #1
 800a3fa:	d806      	bhi.n	800a40a <etharp_output_to_arp_index+0x32>
 800a3fc:	4b40      	ldr	r3, [pc, #256]	; (800a500 <etharp_output_to_arp_index+0x128>)
 800a3fe:	f240 22ef 	movw	r2, #751	; 0x2ef
 800a402:	4940      	ldr	r1, [pc, #256]	; (800a504 <etharp_output_to_arp_index+0x12c>)
 800a404:	4840      	ldr	r0, [pc, #256]	; (800a508 <etharp_output_to_arp_index+0x130>)
 800a406:	f00d f985 	bl	8017714 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800a40a:	79fa      	ldrb	r2, [r7, #7]
 800a40c:	493b      	ldr	r1, [pc, #236]	; (800a4fc <etharp_output_to_arp_index+0x124>)
 800a40e:	4613      	mov	r3, r2
 800a410:	005b      	lsls	r3, r3, #1
 800a412:	4413      	add	r3, r2
 800a414:	00db      	lsls	r3, r3, #3
 800a416:	440b      	add	r3, r1
 800a418:	3314      	adds	r3, #20
 800a41a:	781b      	ldrb	r3, [r3, #0]
 800a41c:	2b02      	cmp	r3, #2
 800a41e:	d153      	bne.n	800a4c8 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800a420:	79fa      	ldrb	r2, [r7, #7]
 800a422:	4936      	ldr	r1, [pc, #216]	; (800a4fc <etharp_output_to_arp_index+0x124>)
 800a424:	4613      	mov	r3, r2
 800a426:	005b      	lsls	r3, r3, #1
 800a428:	4413      	add	r3, r2
 800a42a:	00db      	lsls	r3, r3, #3
 800a42c:	440b      	add	r3, r1
 800a42e:	3312      	adds	r3, #18
 800a430:	881b      	ldrh	r3, [r3, #0]
 800a432:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800a436:	d919      	bls.n	800a46c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800a438:	79fa      	ldrb	r2, [r7, #7]
 800a43a:	4613      	mov	r3, r2
 800a43c:	005b      	lsls	r3, r3, #1
 800a43e:	4413      	add	r3, r2
 800a440:	00db      	lsls	r3, r3, #3
 800a442:	4a2e      	ldr	r2, [pc, #184]	; (800a4fc <etharp_output_to_arp_index+0x124>)
 800a444:	4413      	add	r3, r2
 800a446:	3304      	adds	r3, #4
 800a448:	4619      	mov	r1, r3
 800a44a:	68f8      	ldr	r0, [r7, #12]
 800a44c:	f000 fb4c 	bl	800aae8 <etharp_request>
 800a450:	4603      	mov	r3, r0
 800a452:	2b00      	cmp	r3, #0
 800a454:	d138      	bne.n	800a4c8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800a456:	79fa      	ldrb	r2, [r7, #7]
 800a458:	4928      	ldr	r1, [pc, #160]	; (800a4fc <etharp_output_to_arp_index+0x124>)
 800a45a:	4613      	mov	r3, r2
 800a45c:	005b      	lsls	r3, r3, #1
 800a45e:	4413      	add	r3, r2
 800a460:	00db      	lsls	r3, r3, #3
 800a462:	440b      	add	r3, r1
 800a464:	3314      	adds	r3, #20
 800a466:	2203      	movs	r2, #3
 800a468:	701a      	strb	r2, [r3, #0]
 800a46a:	e02d      	b.n	800a4c8 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800a46c:	79fa      	ldrb	r2, [r7, #7]
 800a46e:	4923      	ldr	r1, [pc, #140]	; (800a4fc <etharp_output_to_arp_index+0x124>)
 800a470:	4613      	mov	r3, r2
 800a472:	005b      	lsls	r3, r3, #1
 800a474:	4413      	add	r3, r2
 800a476:	00db      	lsls	r3, r3, #3
 800a478:	440b      	add	r3, r1
 800a47a:	3312      	adds	r3, #18
 800a47c:	881b      	ldrh	r3, [r3, #0]
 800a47e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800a482:	d321      	bcc.n	800a4c8 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800a484:	79fa      	ldrb	r2, [r7, #7]
 800a486:	4613      	mov	r3, r2
 800a488:	005b      	lsls	r3, r3, #1
 800a48a:	4413      	add	r3, r2
 800a48c:	00db      	lsls	r3, r3, #3
 800a48e:	4a1b      	ldr	r2, [pc, #108]	; (800a4fc <etharp_output_to_arp_index+0x124>)
 800a490:	4413      	add	r3, r2
 800a492:	1d19      	adds	r1, r3, #4
 800a494:	79fa      	ldrb	r2, [r7, #7]
 800a496:	4613      	mov	r3, r2
 800a498:	005b      	lsls	r3, r3, #1
 800a49a:	4413      	add	r3, r2
 800a49c:	00db      	lsls	r3, r3, #3
 800a49e:	3308      	adds	r3, #8
 800a4a0:	4a16      	ldr	r2, [pc, #88]	; (800a4fc <etharp_output_to_arp_index+0x124>)
 800a4a2:	4413      	add	r3, r2
 800a4a4:	3304      	adds	r3, #4
 800a4a6:	461a      	mov	r2, r3
 800a4a8:	68f8      	ldr	r0, [r7, #12]
 800a4aa:	f000 fafb 	bl	800aaa4 <etharp_request_dst>
 800a4ae:	4603      	mov	r3, r0
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d109      	bne.n	800a4c8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800a4b4:	79fa      	ldrb	r2, [r7, #7]
 800a4b6:	4911      	ldr	r1, [pc, #68]	; (800a4fc <etharp_output_to_arp_index+0x124>)
 800a4b8:	4613      	mov	r3, r2
 800a4ba:	005b      	lsls	r3, r3, #1
 800a4bc:	4413      	add	r3, r2
 800a4be:	00db      	lsls	r3, r3, #3
 800a4c0:	440b      	add	r3, r1
 800a4c2:	3314      	adds	r3, #20
 800a4c4:	2203      	movs	r2, #3
 800a4c6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800a4ce:	79fa      	ldrb	r2, [r7, #7]
 800a4d0:	4613      	mov	r3, r2
 800a4d2:	005b      	lsls	r3, r3, #1
 800a4d4:	4413      	add	r3, r2
 800a4d6:	00db      	lsls	r3, r3, #3
 800a4d8:	3308      	adds	r3, #8
 800a4da:	4a08      	ldr	r2, [pc, #32]	; (800a4fc <etharp_output_to_arp_index+0x124>)
 800a4dc:	4413      	add	r3, r2
 800a4de:	1d1a      	adds	r2, r3, #4
 800a4e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a4e4:	9300      	str	r3, [sp, #0]
 800a4e6:	4613      	mov	r3, r2
 800a4e8:	460a      	mov	r2, r1
 800a4ea:	68b9      	ldr	r1, [r7, #8]
 800a4ec:	68f8      	ldr	r0, [r7, #12]
 800a4ee:	f00a fe3d 	bl	801516c <ethernet_output>
 800a4f2:	4603      	mov	r3, r0
}
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	3710      	adds	r7, #16
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	bd80      	pop	{r7, pc}
 800a4fc:	200043ec 	.word	0x200043ec
 800a500:	08018d74 	.word	0x08018d74
 800a504:	08018ee4 	.word	0x08018ee4
 800a508:	08018dec 	.word	0x08018dec

0800a50c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b08a      	sub	sp, #40	; 0x28
 800a510:	af02      	add	r7, sp, #8
 800a512:	60f8      	str	r0, [r7, #12]
 800a514:	60b9      	str	r1, [r7, #8]
 800a516:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d106      	bne.n	800a530 <etharp_output+0x24>
 800a522:	4b73      	ldr	r3, [pc, #460]	; (800a6f0 <etharp_output+0x1e4>)
 800a524:	f240 321e 	movw	r2, #798	; 0x31e
 800a528:	4972      	ldr	r1, [pc, #456]	; (800a6f4 <etharp_output+0x1e8>)
 800a52a:	4873      	ldr	r0, [pc, #460]	; (800a6f8 <etharp_output+0x1ec>)
 800a52c:	f00d f8f2 	bl	8017714 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800a530:	68bb      	ldr	r3, [r7, #8]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d106      	bne.n	800a544 <etharp_output+0x38>
 800a536:	4b6e      	ldr	r3, [pc, #440]	; (800a6f0 <etharp_output+0x1e4>)
 800a538:	f240 321f 	movw	r2, #799	; 0x31f
 800a53c:	496f      	ldr	r1, [pc, #444]	; (800a6fc <etharp_output+0x1f0>)
 800a53e:	486e      	ldr	r0, [pc, #440]	; (800a6f8 <etharp_output+0x1ec>)
 800a540:	f00d f8e8 	bl	8017714 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d106      	bne.n	800a558 <etharp_output+0x4c>
 800a54a:	4b69      	ldr	r3, [pc, #420]	; (800a6f0 <etharp_output+0x1e4>)
 800a54c:	f44f 7248 	mov.w	r2, #800	; 0x320
 800a550:	496b      	ldr	r1, [pc, #428]	; (800a700 <etharp_output+0x1f4>)
 800a552:	4869      	ldr	r0, [pc, #420]	; (800a6f8 <etharp_output+0x1ec>)
 800a554:	f00d f8de 	bl	8017714 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	68f9      	ldr	r1, [r7, #12]
 800a55e:	4618      	mov	r0, r3
 800a560:	f000 fef0 	bl	800b344 <ip4_addr_isbroadcast_u32>
 800a564:	4603      	mov	r3, r0
 800a566:	2b00      	cmp	r3, #0
 800a568:	d002      	beq.n	800a570 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800a56a:	4b66      	ldr	r3, [pc, #408]	; (800a704 <etharp_output+0x1f8>)
 800a56c:	61fb      	str	r3, [r7, #28]
 800a56e:	e0af      	b.n	800a6d0 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a578:	2be0      	cmp	r3, #224	; 0xe0
 800a57a:	d118      	bne.n	800a5ae <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800a57c:	2301      	movs	r3, #1
 800a57e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800a580:	2300      	movs	r3, #0
 800a582:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800a584:	235e      	movs	r3, #94	; 0x5e
 800a586:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	3301      	adds	r3, #1
 800a58c:	781b      	ldrb	r3, [r3, #0]
 800a58e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a592:	b2db      	uxtb	r3, r3
 800a594:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	3302      	adds	r3, #2
 800a59a:	781b      	ldrb	r3, [r3, #0]
 800a59c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	3303      	adds	r3, #3
 800a5a2:	781b      	ldrb	r3, [r3, #0]
 800a5a4:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800a5a6:	f107 0310 	add.w	r3, r7, #16
 800a5aa:	61fb      	str	r3, [r7, #28]
 800a5ac:	e090      	b.n	800a6d0 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681a      	ldr	r2, [r3, #0]
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	3304      	adds	r3, #4
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	405a      	eors	r2, r3
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	3308      	adds	r3, #8
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	4013      	ands	r3, r2
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d012      	beq.n	800a5ec <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800a5cc:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800a5d0:	4293      	cmp	r3, r2
 800a5d2:	d00b      	beq.n	800a5ec <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	330c      	adds	r3, #12
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d003      	beq.n	800a5e6 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	330c      	adds	r3, #12
 800a5e2:	61bb      	str	r3, [r7, #24]
 800a5e4:	e002      	b.n	800a5ec <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800a5e6:	f06f 0303 	mvn.w	r3, #3
 800a5ea:	e07d      	b.n	800a6e8 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800a5ec:	4b46      	ldr	r3, [pc, #280]	; (800a708 <etharp_output+0x1fc>)
 800a5ee:	781b      	ldrb	r3, [r3, #0]
 800a5f0:	4619      	mov	r1, r3
 800a5f2:	4a46      	ldr	r2, [pc, #280]	; (800a70c <etharp_output+0x200>)
 800a5f4:	460b      	mov	r3, r1
 800a5f6:	005b      	lsls	r3, r3, #1
 800a5f8:	440b      	add	r3, r1
 800a5fa:	00db      	lsls	r3, r3, #3
 800a5fc:	4413      	add	r3, r2
 800a5fe:	3314      	adds	r3, #20
 800a600:	781b      	ldrb	r3, [r3, #0]
 800a602:	2b01      	cmp	r3, #1
 800a604:	d925      	bls.n	800a652 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800a606:	4b40      	ldr	r3, [pc, #256]	; (800a708 <etharp_output+0x1fc>)
 800a608:	781b      	ldrb	r3, [r3, #0]
 800a60a:	4619      	mov	r1, r3
 800a60c:	4a3f      	ldr	r2, [pc, #252]	; (800a70c <etharp_output+0x200>)
 800a60e:	460b      	mov	r3, r1
 800a610:	005b      	lsls	r3, r3, #1
 800a612:	440b      	add	r3, r1
 800a614:	00db      	lsls	r3, r3, #3
 800a616:	4413      	add	r3, r2
 800a618:	3308      	adds	r3, #8
 800a61a:	681a      	ldr	r2, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	429a      	cmp	r2, r3
 800a620:	d117      	bne.n	800a652 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800a622:	69bb      	ldr	r3, [r7, #24]
 800a624:	681a      	ldr	r2, [r3, #0]
 800a626:	4b38      	ldr	r3, [pc, #224]	; (800a708 <etharp_output+0x1fc>)
 800a628:	781b      	ldrb	r3, [r3, #0]
 800a62a:	4618      	mov	r0, r3
 800a62c:	4937      	ldr	r1, [pc, #220]	; (800a70c <etharp_output+0x200>)
 800a62e:	4603      	mov	r3, r0
 800a630:	005b      	lsls	r3, r3, #1
 800a632:	4403      	add	r3, r0
 800a634:	00db      	lsls	r3, r3, #3
 800a636:	440b      	add	r3, r1
 800a638:	3304      	adds	r3, #4
 800a63a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800a63c:	429a      	cmp	r2, r3
 800a63e:	d108      	bne.n	800a652 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800a640:	4b31      	ldr	r3, [pc, #196]	; (800a708 <etharp_output+0x1fc>)
 800a642:	781b      	ldrb	r3, [r3, #0]
 800a644:	461a      	mov	r2, r3
 800a646:	68b9      	ldr	r1, [r7, #8]
 800a648:	68f8      	ldr	r0, [r7, #12]
 800a64a:	f7ff fec5 	bl	800a3d8 <etharp_output_to_arp_index>
 800a64e:	4603      	mov	r3, r0
 800a650:	e04a      	b.n	800a6e8 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800a652:	2300      	movs	r3, #0
 800a654:	75fb      	strb	r3, [r7, #23]
 800a656:	e031      	b.n	800a6bc <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800a658:	7dfa      	ldrb	r2, [r7, #23]
 800a65a:	492c      	ldr	r1, [pc, #176]	; (800a70c <etharp_output+0x200>)
 800a65c:	4613      	mov	r3, r2
 800a65e:	005b      	lsls	r3, r3, #1
 800a660:	4413      	add	r3, r2
 800a662:	00db      	lsls	r3, r3, #3
 800a664:	440b      	add	r3, r1
 800a666:	3314      	adds	r3, #20
 800a668:	781b      	ldrb	r3, [r3, #0]
 800a66a:	2b01      	cmp	r3, #1
 800a66c:	d923      	bls.n	800a6b6 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800a66e:	7dfa      	ldrb	r2, [r7, #23]
 800a670:	4926      	ldr	r1, [pc, #152]	; (800a70c <etharp_output+0x200>)
 800a672:	4613      	mov	r3, r2
 800a674:	005b      	lsls	r3, r3, #1
 800a676:	4413      	add	r3, r2
 800a678:	00db      	lsls	r3, r3, #3
 800a67a:	440b      	add	r3, r1
 800a67c:	3308      	adds	r3, #8
 800a67e:	681a      	ldr	r2, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	429a      	cmp	r2, r3
 800a684:	d117      	bne.n	800a6b6 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800a686:	69bb      	ldr	r3, [r7, #24]
 800a688:	6819      	ldr	r1, [r3, #0]
 800a68a:	7dfa      	ldrb	r2, [r7, #23]
 800a68c:	481f      	ldr	r0, [pc, #124]	; (800a70c <etharp_output+0x200>)
 800a68e:	4613      	mov	r3, r2
 800a690:	005b      	lsls	r3, r3, #1
 800a692:	4413      	add	r3, r2
 800a694:	00db      	lsls	r3, r3, #3
 800a696:	4403      	add	r3, r0
 800a698:	3304      	adds	r3, #4
 800a69a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800a69c:	4299      	cmp	r1, r3
 800a69e:	d10a      	bne.n	800a6b6 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800a6a0:	4a19      	ldr	r2, [pc, #100]	; (800a708 <etharp_output+0x1fc>)
 800a6a2:	7dfb      	ldrb	r3, [r7, #23]
 800a6a4:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800a6a6:	7dfb      	ldrb	r3, [r7, #23]
 800a6a8:	461a      	mov	r2, r3
 800a6aa:	68b9      	ldr	r1, [r7, #8]
 800a6ac:	68f8      	ldr	r0, [r7, #12]
 800a6ae:	f7ff fe93 	bl	800a3d8 <etharp_output_to_arp_index>
 800a6b2:	4603      	mov	r3, r0
 800a6b4:	e018      	b.n	800a6e8 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800a6b6:	7dfb      	ldrb	r3, [r7, #23]
 800a6b8:	3301      	adds	r3, #1
 800a6ba:	75fb      	strb	r3, [r7, #23]
 800a6bc:	7dfb      	ldrb	r3, [r7, #23]
 800a6be:	2b09      	cmp	r3, #9
 800a6c0:	d9ca      	bls.n	800a658 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800a6c2:	68ba      	ldr	r2, [r7, #8]
 800a6c4:	69b9      	ldr	r1, [r7, #24]
 800a6c6:	68f8      	ldr	r0, [r7, #12]
 800a6c8:	f000 f822 	bl	800a710 <etharp_query>
 800a6cc:	4603      	mov	r3, r0
 800a6ce:	e00b      	b.n	800a6e8 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800a6d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a6da:	9300      	str	r3, [sp, #0]
 800a6dc:	69fb      	ldr	r3, [r7, #28]
 800a6de:	68b9      	ldr	r1, [r7, #8]
 800a6e0:	68f8      	ldr	r0, [r7, #12]
 800a6e2:	f00a fd43 	bl	801516c <ethernet_output>
 800a6e6:	4603      	mov	r3, r0
}
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	3720      	adds	r7, #32
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	bd80      	pop	{r7, pc}
 800a6f0:	08018d74 	.word	0x08018d74
 800a6f4:	08018ec4 	.word	0x08018ec4
 800a6f8:	08018dec 	.word	0x08018dec
 800a6fc:	08018f14 	.word	0x08018f14
 800a700:	08018eb4 	.word	0x08018eb4
 800a704:	0801bbc8 	.word	0x0801bbc8
 800a708:	200044dc 	.word	0x200044dc
 800a70c:	200043ec 	.word	0x200043ec

0800a710 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800a710:	b580      	push	{r7, lr}
 800a712:	b08c      	sub	sp, #48	; 0x30
 800a714:	af02      	add	r7, sp, #8
 800a716:	60f8      	str	r0, [r7, #12]
 800a718:	60b9      	str	r1, [r7, #8]
 800a71a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	3326      	adds	r3, #38	; 0x26
 800a720:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800a722:	23ff      	movs	r3, #255	; 0xff
 800a724:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800a728:	2300      	movs	r3, #0
 800a72a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800a72c:	68bb      	ldr	r3, [r7, #8]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	68f9      	ldr	r1, [r7, #12]
 800a732:	4618      	mov	r0, r3
 800a734:	f000 fe06 	bl	800b344 <ip4_addr_isbroadcast_u32>
 800a738:	4603      	mov	r3, r0
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d10c      	bne.n	800a758 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800a73e:	68bb      	ldr	r3, [r7, #8]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800a746:	2be0      	cmp	r3, #224	; 0xe0
 800a748:	d006      	beq.n	800a758 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800a74a:	68bb      	ldr	r3, [r7, #8]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d003      	beq.n	800a758 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800a750:	68bb      	ldr	r3, [r7, #8]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d102      	bne.n	800a75e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800a758:	f06f 030f 	mvn.w	r3, #15
 800a75c:	e102      	b.n	800a964 <etharp_query+0x254>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800a75e:	68fa      	ldr	r2, [r7, #12]
 800a760:	2101      	movs	r1, #1
 800a762:	68b8      	ldr	r0, [r7, #8]
 800a764:	f7ff fb60 	bl	8009e28 <etharp_find_entry>
 800a768:	4603      	mov	r3, r0
 800a76a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800a76c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a770:	2b00      	cmp	r3, #0
 800a772:	da02      	bge.n	800a77a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800a774:	8a7b      	ldrh	r3, [r7, #18]
 800a776:	b25b      	sxtb	r3, r3
 800a778:	e0f4      	b.n	800a964 <etharp_query+0x254>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800a77a:	8a7b      	ldrh	r3, [r7, #18]
 800a77c:	2b7e      	cmp	r3, #126	; 0x7e
 800a77e:	d906      	bls.n	800a78e <etharp_query+0x7e>
 800a780:	4b7a      	ldr	r3, [pc, #488]	; (800a96c <etharp_query+0x25c>)
 800a782:	f240 32c1 	movw	r2, #961	; 0x3c1
 800a786:	497a      	ldr	r1, [pc, #488]	; (800a970 <etharp_query+0x260>)
 800a788:	487a      	ldr	r0, [pc, #488]	; (800a974 <etharp_query+0x264>)
 800a78a:	f00c ffc3 	bl	8017714 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800a78e:	8a7b      	ldrh	r3, [r7, #18]
 800a790:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800a792:	7c7a      	ldrb	r2, [r7, #17]
 800a794:	4978      	ldr	r1, [pc, #480]	; (800a978 <etharp_query+0x268>)
 800a796:	4613      	mov	r3, r2
 800a798:	005b      	lsls	r3, r3, #1
 800a79a:	4413      	add	r3, r2
 800a79c:	00db      	lsls	r3, r3, #3
 800a79e:	440b      	add	r3, r1
 800a7a0:	3314      	adds	r3, #20
 800a7a2:	781b      	ldrb	r3, [r3, #0]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d115      	bne.n	800a7d4 <etharp_query+0xc4>
    is_new_entry = 1;
 800a7a8:	2301      	movs	r3, #1
 800a7aa:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800a7ac:	7c7a      	ldrb	r2, [r7, #17]
 800a7ae:	4972      	ldr	r1, [pc, #456]	; (800a978 <etharp_query+0x268>)
 800a7b0:	4613      	mov	r3, r2
 800a7b2:	005b      	lsls	r3, r3, #1
 800a7b4:	4413      	add	r3, r2
 800a7b6:	00db      	lsls	r3, r3, #3
 800a7b8:	440b      	add	r3, r1
 800a7ba:	3314      	adds	r3, #20
 800a7bc:	2201      	movs	r2, #1
 800a7be:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800a7c0:	7c7a      	ldrb	r2, [r7, #17]
 800a7c2:	496d      	ldr	r1, [pc, #436]	; (800a978 <etharp_query+0x268>)
 800a7c4:	4613      	mov	r3, r2
 800a7c6:	005b      	lsls	r3, r3, #1
 800a7c8:	4413      	add	r3, r2
 800a7ca:	00db      	lsls	r3, r3, #3
 800a7cc:	440b      	add	r3, r1
 800a7ce:	3308      	adds	r3, #8
 800a7d0:	68fa      	ldr	r2, [r7, #12]
 800a7d2:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800a7d4:	7c7a      	ldrb	r2, [r7, #17]
 800a7d6:	4968      	ldr	r1, [pc, #416]	; (800a978 <etharp_query+0x268>)
 800a7d8:	4613      	mov	r3, r2
 800a7da:	005b      	lsls	r3, r3, #1
 800a7dc:	4413      	add	r3, r2
 800a7de:	00db      	lsls	r3, r3, #3
 800a7e0:	440b      	add	r3, r1
 800a7e2:	3314      	adds	r3, #20
 800a7e4:	781b      	ldrb	r3, [r3, #0]
 800a7e6:	2b01      	cmp	r3, #1
 800a7e8:	d011      	beq.n	800a80e <etharp_query+0xfe>
 800a7ea:	7c7a      	ldrb	r2, [r7, #17]
 800a7ec:	4962      	ldr	r1, [pc, #392]	; (800a978 <etharp_query+0x268>)
 800a7ee:	4613      	mov	r3, r2
 800a7f0:	005b      	lsls	r3, r3, #1
 800a7f2:	4413      	add	r3, r2
 800a7f4:	00db      	lsls	r3, r3, #3
 800a7f6:	440b      	add	r3, r1
 800a7f8:	3314      	adds	r3, #20
 800a7fa:	781b      	ldrb	r3, [r3, #0]
 800a7fc:	2b01      	cmp	r3, #1
 800a7fe:	d806      	bhi.n	800a80e <etharp_query+0xfe>
 800a800:	4b5a      	ldr	r3, [pc, #360]	; (800a96c <etharp_query+0x25c>)
 800a802:	f240 32cf 	movw	r2, #975	; 0x3cf
 800a806:	495d      	ldr	r1, [pc, #372]	; (800a97c <etharp_query+0x26c>)
 800a808:	485a      	ldr	r0, [pc, #360]	; (800a974 <etharp_query+0x264>)
 800a80a:	f00c ff83 	bl	8017714 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800a80e:	6a3b      	ldr	r3, [r7, #32]
 800a810:	2b00      	cmp	r3, #0
 800a812:	d102      	bne.n	800a81a <etharp_query+0x10a>
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	2b00      	cmp	r3, #0
 800a818:	d10c      	bne.n	800a834 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800a81a:	68b9      	ldr	r1, [r7, #8]
 800a81c:	68f8      	ldr	r0, [r7, #12]
 800a81e:	f000 f963 	bl	800aae8 <etharp_request>
 800a822:	4603      	mov	r3, r0
 800a824:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d102      	bne.n	800a834 <etharp_query+0x124>
      return result;
 800a82e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a832:	e097      	b.n	800a964 <etharp_query+0x254>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d106      	bne.n	800a848 <etharp_query+0x138>
 800a83a:	4b4c      	ldr	r3, [pc, #304]	; (800a96c <etharp_query+0x25c>)
 800a83c:	f240 32e1 	movw	r2, #993	; 0x3e1
 800a840:	494f      	ldr	r1, [pc, #316]	; (800a980 <etharp_query+0x270>)
 800a842:	484c      	ldr	r0, [pc, #304]	; (800a974 <etharp_query+0x264>)
 800a844:	f00c ff66 	bl	8017714 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800a848:	7c7a      	ldrb	r2, [r7, #17]
 800a84a:	494b      	ldr	r1, [pc, #300]	; (800a978 <etharp_query+0x268>)
 800a84c:	4613      	mov	r3, r2
 800a84e:	005b      	lsls	r3, r3, #1
 800a850:	4413      	add	r3, r2
 800a852:	00db      	lsls	r3, r3, #3
 800a854:	440b      	add	r3, r1
 800a856:	3314      	adds	r3, #20
 800a858:	781b      	ldrb	r3, [r3, #0]
 800a85a:	2b01      	cmp	r3, #1
 800a85c:	d918      	bls.n	800a890 <etharp_query+0x180>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800a85e:	4a49      	ldr	r2, [pc, #292]	; (800a984 <etharp_query+0x274>)
 800a860:	7c7b      	ldrb	r3, [r7, #17]
 800a862:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800a864:	7c7a      	ldrb	r2, [r7, #17]
 800a866:	4613      	mov	r3, r2
 800a868:	005b      	lsls	r3, r3, #1
 800a86a:	4413      	add	r3, r2
 800a86c:	00db      	lsls	r3, r3, #3
 800a86e:	3308      	adds	r3, #8
 800a870:	4a41      	ldr	r2, [pc, #260]	; (800a978 <etharp_query+0x268>)
 800a872:	4413      	add	r3, r2
 800a874:	1d1a      	adds	r2, r3, #4
 800a876:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a87a:	9300      	str	r3, [sp, #0]
 800a87c:	4613      	mov	r3, r2
 800a87e:	697a      	ldr	r2, [r7, #20]
 800a880:	6879      	ldr	r1, [r7, #4]
 800a882:	68f8      	ldr	r0, [r7, #12]
 800a884:	f00a fc72 	bl	801516c <ethernet_output>
 800a888:	4603      	mov	r3, r0
 800a88a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a88e:	e067      	b.n	800a960 <etharp_query+0x250>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800a890:	7c7a      	ldrb	r2, [r7, #17]
 800a892:	4939      	ldr	r1, [pc, #228]	; (800a978 <etharp_query+0x268>)
 800a894:	4613      	mov	r3, r2
 800a896:	005b      	lsls	r3, r3, #1
 800a898:	4413      	add	r3, r2
 800a89a:	00db      	lsls	r3, r3, #3
 800a89c:	440b      	add	r3, r1
 800a89e:	3314      	adds	r3, #20
 800a8a0:	781b      	ldrb	r3, [r3, #0]
 800a8a2:	2b01      	cmp	r3, #1
 800a8a4:	d15c      	bne.n	800a960 <etharp_query+0x250>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	61fb      	str	r3, [r7, #28]
    while (p) {
 800a8ae:	e01c      	b.n	800a8ea <etharp_query+0x1da>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800a8b0:	69fb      	ldr	r3, [r7, #28]
 800a8b2:	895a      	ldrh	r2, [r3, #10]
 800a8b4:	69fb      	ldr	r3, [r7, #28]
 800a8b6:	891b      	ldrh	r3, [r3, #8]
 800a8b8:	429a      	cmp	r2, r3
 800a8ba:	d10a      	bne.n	800a8d2 <etharp_query+0x1c2>
 800a8bc:	69fb      	ldr	r3, [r7, #28]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d006      	beq.n	800a8d2 <etharp_query+0x1c2>
 800a8c4:	4b29      	ldr	r3, [pc, #164]	; (800a96c <etharp_query+0x25c>)
 800a8c6:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800a8ca:	492f      	ldr	r1, [pc, #188]	; (800a988 <etharp_query+0x278>)
 800a8cc:	4829      	ldr	r0, [pc, #164]	; (800a974 <etharp_query+0x264>)
 800a8ce:	f00c ff21 	bl	8017714 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800a8d2:	69fb      	ldr	r3, [r7, #28]
 800a8d4:	7b1b      	ldrb	r3, [r3, #12]
 800a8d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d002      	beq.n	800a8e4 <etharp_query+0x1d4>
        copy_needed = 1;
 800a8de:	2301      	movs	r3, #1
 800a8e0:	61bb      	str	r3, [r7, #24]
        break;
 800a8e2:	e005      	b.n	800a8f0 <etharp_query+0x1e0>
      }
      p = p->next;
 800a8e4:	69fb      	ldr	r3, [r7, #28]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	61fb      	str	r3, [r7, #28]
    while (p) {
 800a8ea:	69fb      	ldr	r3, [r7, #28]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d1df      	bne.n	800a8b0 <etharp_query+0x1a0>
    }
    if (copy_needed) {
 800a8f0:	69bb      	ldr	r3, [r7, #24]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d007      	beq.n	800a906 <etharp_query+0x1f6>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800a8f6:	687a      	ldr	r2, [r7, #4]
 800a8f8:	f44f 7120 	mov.w	r1, #640	; 0x280
 800a8fc:	200e      	movs	r0, #14
 800a8fe:	f003 fc9d 	bl	800e23c <pbuf_clone>
 800a902:	61f8      	str	r0, [r7, #28]
 800a904:	e004      	b.n	800a910 <etharp_query+0x200>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800a90a:	69f8      	ldr	r0, [r7, #28]
 800a90c:	f003 f98c 	bl	800dc28 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800a910:	69fb      	ldr	r3, [r7, #28]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d021      	beq.n	800a95a <etharp_query+0x24a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800a916:	7c7a      	ldrb	r2, [r7, #17]
 800a918:	4917      	ldr	r1, [pc, #92]	; (800a978 <etharp_query+0x268>)
 800a91a:	4613      	mov	r3, r2
 800a91c:	005b      	lsls	r3, r3, #1
 800a91e:	4413      	add	r3, r2
 800a920:	00db      	lsls	r3, r3, #3
 800a922:	440b      	add	r3, r1
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d00a      	beq.n	800a940 <etharp_query+0x230>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800a92a:	7c7a      	ldrb	r2, [r7, #17]
 800a92c:	4912      	ldr	r1, [pc, #72]	; (800a978 <etharp_query+0x268>)
 800a92e:	4613      	mov	r3, r2
 800a930:	005b      	lsls	r3, r3, #1
 800a932:	4413      	add	r3, r2
 800a934:	00db      	lsls	r3, r3, #3
 800a936:	440b      	add	r3, r1
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	4618      	mov	r0, r3
 800a93c:	f003 f8ce 	bl	800dadc <pbuf_free>
      }
      arp_table[i].q = p;
 800a940:	7c7a      	ldrb	r2, [r7, #17]
 800a942:	490d      	ldr	r1, [pc, #52]	; (800a978 <etharp_query+0x268>)
 800a944:	4613      	mov	r3, r2
 800a946:	005b      	lsls	r3, r3, #1
 800a948:	4413      	add	r3, r2
 800a94a:	00db      	lsls	r3, r3, #3
 800a94c:	440b      	add	r3, r1
 800a94e:	69fa      	ldr	r2, [r7, #28]
 800a950:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800a952:	2300      	movs	r3, #0
 800a954:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a958:	e002      	b.n	800a960 <etharp_query+0x250>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800a95a:	23ff      	movs	r3, #255	; 0xff
 800a95c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800a960:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800a964:	4618      	mov	r0, r3
 800a966:	3728      	adds	r7, #40	; 0x28
 800a968:	46bd      	mov	sp, r7
 800a96a:	bd80      	pop	{r7, pc}
 800a96c:	08018d74 	.word	0x08018d74
 800a970:	08018f20 	.word	0x08018f20
 800a974:	08018dec 	.word	0x08018dec
 800a978:	200043ec 	.word	0x200043ec
 800a97c:	08018f30 	.word	0x08018f30
 800a980:	08018f14 	.word	0x08018f14
 800a984:	200044dc 	.word	0x200044dc
 800a988:	08018f58 	.word	0x08018f58

0800a98c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b08a      	sub	sp, #40	; 0x28
 800a990:	af02      	add	r7, sp, #8
 800a992:	60f8      	str	r0, [r7, #12]
 800a994:	60b9      	str	r1, [r7, #8]
 800a996:	607a      	str	r2, [r7, #4]
 800a998:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800a99a:	2300      	movs	r3, #0
 800a99c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d106      	bne.n	800a9b2 <etharp_raw+0x26>
 800a9a4:	4b3a      	ldr	r3, [pc, #232]	; (800aa90 <etharp_raw+0x104>)
 800a9a6:	f240 4257 	movw	r2, #1111	; 0x457
 800a9aa:	493a      	ldr	r1, [pc, #232]	; (800aa94 <etharp_raw+0x108>)
 800a9ac:	483a      	ldr	r0, [pc, #232]	; (800aa98 <etharp_raw+0x10c>)
 800a9ae:	f00c feb1 	bl	8017714 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800a9b2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800a9b6:	211c      	movs	r1, #28
 800a9b8:	200e      	movs	r0, #14
 800a9ba:	f002 fd7b 	bl	800d4b4 <pbuf_alloc>
 800a9be:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800a9c0:	69bb      	ldr	r3, [r7, #24]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d102      	bne.n	800a9cc <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800a9c6:	f04f 33ff 	mov.w	r3, #4294967295
 800a9ca:	e05d      	b.n	800aa88 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800a9cc:	69bb      	ldr	r3, [r7, #24]
 800a9ce:	895b      	ldrh	r3, [r3, #10]
 800a9d0:	2b1b      	cmp	r3, #27
 800a9d2:	d806      	bhi.n	800a9e2 <etharp_raw+0x56>
 800a9d4:	4b2e      	ldr	r3, [pc, #184]	; (800aa90 <etharp_raw+0x104>)
 800a9d6:	f240 4263 	movw	r2, #1123	; 0x463
 800a9da:	4930      	ldr	r1, [pc, #192]	; (800aa9c <etharp_raw+0x110>)
 800a9dc:	482e      	ldr	r0, [pc, #184]	; (800aa98 <etharp_raw+0x10c>)
 800a9de:	f00c fe99 	bl	8017714 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800a9e2:	69bb      	ldr	r3, [r7, #24]
 800a9e4:	685b      	ldr	r3, [r3, #4]
 800a9e6:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800a9e8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	f7fe f916 	bl	8008c1c <lwip_htons>
 800a9f0:	4603      	mov	r3, r0
 800a9f2:	461a      	mov	r2, r3
 800a9f4:	697b      	ldr	r3, [r7, #20]
 800a9f6:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a9fe:	2b06      	cmp	r3, #6
 800aa00:	d006      	beq.n	800aa10 <etharp_raw+0x84>
 800aa02:	4b23      	ldr	r3, [pc, #140]	; (800aa90 <etharp_raw+0x104>)
 800aa04:	f240 426a 	movw	r2, #1130	; 0x46a
 800aa08:	4925      	ldr	r1, [pc, #148]	; (800aaa0 <etharp_raw+0x114>)
 800aa0a:	4823      	ldr	r0, [pc, #140]	; (800aa98 <etharp_raw+0x10c>)
 800aa0c:	f00c fe82 	bl	8017714 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800aa10:	697b      	ldr	r3, [r7, #20]
 800aa12:	3308      	adds	r3, #8
 800aa14:	2206      	movs	r2, #6
 800aa16:	6839      	ldr	r1, [r7, #0]
 800aa18:	4618      	mov	r0, r3
 800aa1a:	f00c fda2 	bl	8017562 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800aa1e:	697b      	ldr	r3, [r7, #20]
 800aa20:	3312      	adds	r3, #18
 800aa22:	2206      	movs	r2, #6
 800aa24:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800aa26:	4618      	mov	r0, r3
 800aa28:	f00c fd9b 	bl	8017562 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800aa2c:	697b      	ldr	r3, [r7, #20]
 800aa2e:	330e      	adds	r3, #14
 800aa30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aa32:	6812      	ldr	r2, [r2, #0]
 800aa34:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800aa36:	697b      	ldr	r3, [r7, #20]
 800aa38:	3318      	adds	r3, #24
 800aa3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa3c:	6812      	ldr	r2, [r2, #0]
 800aa3e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800aa40:	697b      	ldr	r3, [r7, #20]
 800aa42:	2200      	movs	r2, #0
 800aa44:	701a      	strb	r2, [r3, #0]
 800aa46:	2200      	movs	r2, #0
 800aa48:	f042 0201 	orr.w	r2, r2, #1
 800aa4c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800aa4e:	697b      	ldr	r3, [r7, #20]
 800aa50:	2200      	movs	r2, #0
 800aa52:	f042 0208 	orr.w	r2, r2, #8
 800aa56:	709a      	strb	r2, [r3, #2]
 800aa58:	2200      	movs	r2, #0
 800aa5a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800aa5c:	697b      	ldr	r3, [r7, #20]
 800aa5e:	2206      	movs	r2, #6
 800aa60:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800aa62:	697b      	ldr	r3, [r7, #20]
 800aa64:	2204      	movs	r2, #4
 800aa66:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800aa68:	f640 0306 	movw	r3, #2054	; 0x806
 800aa6c:	9300      	str	r3, [sp, #0]
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	68ba      	ldr	r2, [r7, #8]
 800aa72:	69b9      	ldr	r1, [r7, #24]
 800aa74:	68f8      	ldr	r0, [r7, #12]
 800aa76:	f00a fb79 	bl	801516c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800aa7a:	69b8      	ldr	r0, [r7, #24]
 800aa7c:	f003 f82e 	bl	800dadc <pbuf_free>
  p = NULL;
 800aa80:	2300      	movs	r3, #0
 800aa82:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800aa84:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800aa88:	4618      	mov	r0, r3
 800aa8a:	3720      	adds	r7, #32
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	bd80      	pop	{r7, pc}
 800aa90:	08018d74 	.word	0x08018d74
 800aa94:	08018ec4 	.word	0x08018ec4
 800aa98:	08018dec 	.word	0x08018dec
 800aa9c:	08018f74 	.word	0x08018f74
 800aaa0:	08018fa8 	.word	0x08018fa8

0800aaa4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b088      	sub	sp, #32
 800aaa8:	af04      	add	r7, sp, #16
 800aaaa:	60f8      	str	r0, [r7, #12]
 800aaac:	60b9      	str	r1, [r7, #8]
 800aaae:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800aac0:	2201      	movs	r2, #1
 800aac2:	9203      	str	r2, [sp, #12]
 800aac4:	68ba      	ldr	r2, [r7, #8]
 800aac6:	9202      	str	r2, [sp, #8]
 800aac8:	4a06      	ldr	r2, [pc, #24]	; (800aae4 <etharp_request_dst+0x40>)
 800aaca:	9201      	str	r2, [sp, #4]
 800aacc:	9300      	str	r3, [sp, #0]
 800aace:	4603      	mov	r3, r0
 800aad0:	687a      	ldr	r2, [r7, #4]
 800aad2:	68f8      	ldr	r0, [r7, #12]
 800aad4:	f7ff ff5a 	bl	800a98c <etharp_raw>
 800aad8:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800aada:	4618      	mov	r0, r3
 800aadc:	3710      	adds	r7, #16
 800aade:	46bd      	mov	sp, r7
 800aae0:	bd80      	pop	{r7, pc}
 800aae2:	bf00      	nop
 800aae4:	0801bbd0 	.word	0x0801bbd0

0800aae8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800aae8:	b580      	push	{r7, lr}
 800aaea:	b082      	sub	sp, #8
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	6078      	str	r0, [r7, #4]
 800aaf0:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800aaf2:	4a05      	ldr	r2, [pc, #20]	; (800ab08 <etharp_request+0x20>)
 800aaf4:	6839      	ldr	r1, [r7, #0]
 800aaf6:	6878      	ldr	r0, [r7, #4]
 800aaf8:	f7ff ffd4 	bl	800aaa4 <etharp_request_dst>
 800aafc:	4603      	mov	r3, r0
}
 800aafe:	4618      	mov	r0, r3
 800ab00:	3708      	adds	r7, #8
 800ab02:	46bd      	mov	sp, r7
 800ab04:	bd80      	pop	{r7, pc}
 800ab06:	bf00      	nop
 800ab08:	0801bbc8 	.word	0x0801bbc8

0800ab0c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b08e      	sub	sp, #56	; 0x38
 800ab10:	af04      	add	r7, sp, #16
 800ab12:	6078      	str	r0, [r7, #4]
 800ab14:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800ab16:	4b79      	ldr	r3, [pc, #484]	; (800acfc <icmp_input+0x1f0>)
 800ab18:	689b      	ldr	r3, [r3, #8]
 800ab1a:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800ab1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab1e:	781b      	ldrb	r3, [r3, #0]
 800ab20:	f003 030f 	and.w	r3, r3, #15
 800ab24:	b2db      	uxtb	r3, r3
 800ab26:	009b      	lsls	r3, r3, #2
 800ab28:	b2db      	uxtb	r3, r3
 800ab2a:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800ab2c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ab2e:	2b13      	cmp	r3, #19
 800ab30:	f240 80cd 	bls.w	800acce <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	895b      	ldrh	r3, [r3, #10]
 800ab38:	2b03      	cmp	r3, #3
 800ab3a:	f240 80ca 	bls.w	800acd2 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	685b      	ldr	r3, [r3, #4]
 800ab42:	781b      	ldrb	r3, [r3, #0]
 800ab44:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800ab48:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	f000 80b7 	beq.w	800acc0 <icmp_input+0x1b4>
 800ab52:	2b08      	cmp	r3, #8
 800ab54:	f040 80b7 	bne.w	800acc6 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800ab58:	4b69      	ldr	r3, [pc, #420]	; (800ad00 <icmp_input+0x1f4>)
 800ab5a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800ab5c:	4b67      	ldr	r3, [pc, #412]	; (800acfc <icmp_input+0x1f0>)
 800ab5e:	695b      	ldr	r3, [r3, #20]
 800ab60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ab64:	2be0      	cmp	r3, #224	; 0xe0
 800ab66:	f000 80bb 	beq.w	800ace0 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800ab6a:	4b64      	ldr	r3, [pc, #400]	; (800acfc <icmp_input+0x1f0>)
 800ab6c:	695a      	ldr	r2, [r3, #20]
 800ab6e:	4b63      	ldr	r3, [pc, #396]	; (800acfc <icmp_input+0x1f0>)
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	4619      	mov	r1, r3
 800ab74:	4610      	mov	r0, r2
 800ab76:	f000 fbe5 	bl	800b344 <ip4_addr_isbroadcast_u32>
 800ab7a:	4603      	mov	r3, r0
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	f040 80b1 	bne.w	800ace4 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	891b      	ldrh	r3, [r3, #8]
 800ab86:	2b07      	cmp	r3, #7
 800ab88:	f240 80a5 	bls.w	800acd6 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800ab8c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ab8e:	330e      	adds	r3, #14
 800ab90:	4619      	mov	r1, r3
 800ab92:	6878      	ldr	r0, [r7, #4]
 800ab94:	f002 feda 	bl	800d94c <pbuf_add_header>
 800ab98:	4603      	mov	r3, r0
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d04b      	beq.n	800ac36 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	891a      	ldrh	r2, [r3, #8]
 800aba2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800aba4:	4413      	add	r3, r2
 800aba6:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	891b      	ldrh	r3, [r3, #8]
 800abac:	8b7a      	ldrh	r2, [r7, #26]
 800abae:	429a      	cmp	r2, r3
 800abb0:	f0c0 809a 	bcc.w	800ace8 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800abb4:	8b7b      	ldrh	r3, [r7, #26]
 800abb6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800abba:	4619      	mov	r1, r3
 800abbc:	200e      	movs	r0, #14
 800abbe:	f002 fc79 	bl	800d4b4 <pbuf_alloc>
 800abc2:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800abc4:	697b      	ldr	r3, [r7, #20]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	f000 8090 	beq.w	800acec <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800abcc:	697b      	ldr	r3, [r7, #20]
 800abce:	895b      	ldrh	r3, [r3, #10]
 800abd0:	461a      	mov	r2, r3
 800abd2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800abd4:	3308      	adds	r3, #8
 800abd6:	429a      	cmp	r2, r3
 800abd8:	d203      	bcs.n	800abe2 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800abda:	6978      	ldr	r0, [r7, #20]
 800abdc:	f002 ff7e 	bl	800dadc <pbuf_free>
          goto icmperr;
 800abe0:	e085      	b.n	800acee <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800abe2:	697b      	ldr	r3, [r7, #20]
 800abe4:	685b      	ldr	r3, [r3, #4]
 800abe6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800abe8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800abea:	4618      	mov	r0, r3
 800abec:	f00c fcb9 	bl	8017562 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800abf0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800abf2:	4619      	mov	r1, r3
 800abf4:	6978      	ldr	r0, [r7, #20]
 800abf6:	f002 feb9 	bl	800d96c <pbuf_remove_header>
 800abfa:	4603      	mov	r3, r0
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d009      	beq.n	800ac14 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800ac00:	4b40      	ldr	r3, [pc, #256]	; (800ad04 <icmp_input+0x1f8>)
 800ac02:	22b6      	movs	r2, #182	; 0xb6
 800ac04:	4940      	ldr	r1, [pc, #256]	; (800ad08 <icmp_input+0x1fc>)
 800ac06:	4841      	ldr	r0, [pc, #260]	; (800ad0c <icmp_input+0x200>)
 800ac08:	f00c fd84 	bl	8017714 <iprintf>
          pbuf_free(r);
 800ac0c:	6978      	ldr	r0, [r7, #20]
 800ac0e:	f002 ff65 	bl	800dadc <pbuf_free>
          goto icmperr;
 800ac12:	e06c      	b.n	800acee <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800ac14:	6879      	ldr	r1, [r7, #4]
 800ac16:	6978      	ldr	r0, [r7, #20]
 800ac18:	f003 f894 	bl	800dd44 <pbuf_copy>
 800ac1c:	4603      	mov	r3, r0
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d003      	beq.n	800ac2a <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800ac22:	6978      	ldr	r0, [r7, #20]
 800ac24:	f002 ff5a 	bl	800dadc <pbuf_free>
          goto icmperr;
 800ac28:	e061      	b.n	800acee <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800ac2a:	6878      	ldr	r0, [r7, #4]
 800ac2c:	f002 ff56 	bl	800dadc <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800ac30:	697b      	ldr	r3, [r7, #20]
 800ac32:	607b      	str	r3, [r7, #4]
 800ac34:	e00f      	b.n	800ac56 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800ac36:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ac38:	330e      	adds	r3, #14
 800ac3a:	4619      	mov	r1, r3
 800ac3c:	6878      	ldr	r0, [r7, #4]
 800ac3e:	f002 fe95 	bl	800d96c <pbuf_remove_header>
 800ac42:	4603      	mov	r3, r0
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d006      	beq.n	800ac56 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800ac48:	4b2e      	ldr	r3, [pc, #184]	; (800ad04 <icmp_input+0x1f8>)
 800ac4a:	22c7      	movs	r2, #199	; 0xc7
 800ac4c:	4930      	ldr	r1, [pc, #192]	; (800ad10 <icmp_input+0x204>)
 800ac4e:	482f      	ldr	r0, [pc, #188]	; (800ad0c <icmp_input+0x200>)
 800ac50:	f00c fd60 	bl	8017714 <iprintf>
          goto icmperr;
 800ac54:	e04b      	b.n	800acee <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	685b      	ldr	r3, [r3, #4]
 800ac5a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800ac5c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ac5e:	4619      	mov	r1, r3
 800ac60:	6878      	ldr	r0, [r7, #4]
 800ac62:	f002 fe73 	bl	800d94c <pbuf_add_header>
 800ac66:	4603      	mov	r3, r0
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d12b      	bne.n	800acc4 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	685b      	ldr	r3, [r3, #4]
 800ac70:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800ac72:	69fb      	ldr	r3, [r7, #28]
 800ac74:	681a      	ldr	r2, [r3, #0]
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800ac7a:	4b20      	ldr	r3, [pc, #128]	; (800acfc <icmp_input+0x1f0>)
 800ac7c:	691a      	ldr	r2, [r3, #16]
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800ac82:	693b      	ldr	r3, [r7, #16]
 800ac84:	2200      	movs	r2, #0
 800ac86:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800ac88:	693b      	ldr	r3, [r7, #16]
 800ac8a:	2200      	movs	r2, #0
 800ac8c:	709a      	strb	r2, [r3, #2]
 800ac8e:	2200      	movs	r2, #0
 800ac90:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	22ff      	movs	r2, #255	; 0xff
 800ac96:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	729a      	strb	r2, [r3, #10]
 800ac9e:	2200      	movs	r2, #0
 800aca0:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800aca2:	683b      	ldr	r3, [r7, #0]
 800aca4:	9302      	str	r3, [sp, #8]
 800aca6:	2301      	movs	r3, #1
 800aca8:	9301      	str	r3, [sp, #4]
 800acaa:	2300      	movs	r3, #0
 800acac:	9300      	str	r3, [sp, #0]
 800acae:	23ff      	movs	r3, #255	; 0xff
 800acb0:	2200      	movs	r2, #0
 800acb2:	69f9      	ldr	r1, [r7, #28]
 800acb4:	6878      	ldr	r0, [r7, #4]
 800acb6:	f000 fa6d 	bl	800b194 <ip4_output_if>
 800acba:	4603      	mov	r3, r0
 800acbc:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800acbe:	e001      	b.n	800acc4 <icmp_input+0x1b8>
      break;
 800acc0:	bf00      	nop
 800acc2:	e000      	b.n	800acc6 <icmp_input+0x1ba>
      break;
 800acc4:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800acc6:	6878      	ldr	r0, [r7, #4]
 800acc8:	f002 ff08 	bl	800dadc <pbuf_free>
  return;
 800accc:	e013      	b.n	800acf6 <icmp_input+0x1ea>
    goto lenerr;
 800acce:	bf00      	nop
 800acd0:	e002      	b.n	800acd8 <icmp_input+0x1cc>
    goto lenerr;
 800acd2:	bf00      	nop
 800acd4:	e000      	b.n	800acd8 <icmp_input+0x1cc>
        goto lenerr;
 800acd6:	bf00      	nop
lenerr:
  pbuf_free(p);
 800acd8:	6878      	ldr	r0, [r7, #4]
 800acda:	f002 feff 	bl	800dadc <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800acde:	e00a      	b.n	800acf6 <icmp_input+0x1ea>
        goto icmperr;
 800ace0:	bf00      	nop
 800ace2:	e004      	b.n	800acee <icmp_input+0x1e2>
        goto icmperr;
 800ace4:	bf00      	nop
 800ace6:	e002      	b.n	800acee <icmp_input+0x1e2>
          goto icmperr;
 800ace8:	bf00      	nop
 800acea:	e000      	b.n	800acee <icmp_input+0x1e2>
          goto icmperr;
 800acec:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800acee:	6878      	ldr	r0, [r7, #4]
 800acf0:	f002 fef4 	bl	800dadc <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800acf4:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800acf6:	3728      	adds	r7, #40	; 0x28
 800acf8:	46bd      	mov	sp, r7
 800acfa:	bd80      	pop	{r7, pc}
 800acfc:	20004814 	.word	0x20004814
 800ad00:	20004828 	.word	0x20004828
 800ad04:	08018fec 	.word	0x08018fec
 800ad08:	08019024 	.word	0x08019024
 800ad0c:	0801905c 	.word	0x0801905c
 800ad10:	08019084 	.word	0x08019084

0800ad14 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b082      	sub	sp, #8
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
 800ad1c:	460b      	mov	r3, r1
 800ad1e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800ad20:	78fb      	ldrb	r3, [r7, #3]
 800ad22:	461a      	mov	r2, r3
 800ad24:	2103      	movs	r1, #3
 800ad26:	6878      	ldr	r0, [r7, #4]
 800ad28:	f000 f814 	bl	800ad54 <icmp_send_response>
}
 800ad2c:	bf00      	nop
 800ad2e:	3708      	adds	r7, #8
 800ad30:	46bd      	mov	sp, r7
 800ad32:	bd80      	pop	{r7, pc}

0800ad34 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b082      	sub	sp, #8
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
 800ad3c:	460b      	mov	r3, r1
 800ad3e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800ad40:	78fb      	ldrb	r3, [r7, #3]
 800ad42:	461a      	mov	r2, r3
 800ad44:	210b      	movs	r1, #11
 800ad46:	6878      	ldr	r0, [r7, #4]
 800ad48:	f000 f804 	bl	800ad54 <icmp_send_response>
}
 800ad4c:	bf00      	nop
 800ad4e:	3708      	adds	r7, #8
 800ad50:	46bd      	mov	sp, r7
 800ad52:	bd80      	pop	{r7, pc}

0800ad54 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b08c      	sub	sp, #48	; 0x30
 800ad58:	af04      	add	r7, sp, #16
 800ad5a:	6078      	str	r0, [r7, #4]
 800ad5c:	460b      	mov	r3, r1
 800ad5e:	70fb      	strb	r3, [r7, #3]
 800ad60:	4613      	mov	r3, r2
 800ad62:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800ad64:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ad68:	2124      	movs	r1, #36	; 0x24
 800ad6a:	2022      	movs	r0, #34	; 0x22
 800ad6c:	f002 fba2 	bl	800d4b4 <pbuf_alloc>
 800ad70:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800ad72:	69fb      	ldr	r3, [r7, #28]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d04c      	beq.n	800ae12 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800ad78:	69fb      	ldr	r3, [r7, #28]
 800ad7a:	895b      	ldrh	r3, [r3, #10]
 800ad7c:	2b23      	cmp	r3, #35	; 0x23
 800ad7e:	d806      	bhi.n	800ad8e <icmp_send_response+0x3a>
 800ad80:	4b26      	ldr	r3, [pc, #152]	; (800ae1c <icmp_send_response+0xc8>)
 800ad82:	f240 1269 	movw	r2, #361	; 0x169
 800ad86:	4926      	ldr	r1, [pc, #152]	; (800ae20 <icmp_send_response+0xcc>)
 800ad88:	4826      	ldr	r0, [pc, #152]	; (800ae24 <icmp_send_response+0xd0>)
 800ad8a:	f00c fcc3 	bl	8017714 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	685b      	ldr	r3, [r3, #4]
 800ad92:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800ad94:	69fb      	ldr	r3, [r7, #28]
 800ad96:	685b      	ldr	r3, [r3, #4]
 800ad98:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800ad9a:	697b      	ldr	r3, [r7, #20]
 800ad9c:	78fa      	ldrb	r2, [r7, #3]
 800ad9e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800ada0:	697b      	ldr	r3, [r7, #20]
 800ada2:	78ba      	ldrb	r2, [r7, #2]
 800ada4:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800ada6:	697b      	ldr	r3, [r7, #20]
 800ada8:	2200      	movs	r2, #0
 800adaa:	711a      	strb	r2, [r3, #4]
 800adac:	2200      	movs	r2, #0
 800adae:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800adb0:	697b      	ldr	r3, [r7, #20]
 800adb2:	2200      	movs	r2, #0
 800adb4:	719a      	strb	r2, [r3, #6]
 800adb6:	2200      	movs	r2, #0
 800adb8:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800adba:	69fb      	ldr	r3, [r7, #28]
 800adbc:	685b      	ldr	r3, [r3, #4]
 800adbe:	f103 0008 	add.w	r0, r3, #8
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	685b      	ldr	r3, [r3, #4]
 800adc6:	221c      	movs	r2, #28
 800adc8:	4619      	mov	r1, r3
 800adca:	f00c fbca 	bl	8017562 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800adce:	69bb      	ldr	r3, [r7, #24]
 800add0:	68db      	ldr	r3, [r3, #12]
 800add2:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800add4:	f107 030c 	add.w	r3, r7, #12
 800add8:	4618      	mov	r0, r3
 800adda:	f000 f825 	bl	800ae28 <ip4_route>
 800adde:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800ade0:	693b      	ldr	r3, [r7, #16]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d011      	beq.n	800ae0a <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800ade6:	697b      	ldr	r3, [r7, #20]
 800ade8:	2200      	movs	r2, #0
 800adea:	709a      	strb	r2, [r3, #2]
 800adec:	2200      	movs	r2, #0
 800adee:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800adf0:	f107 020c 	add.w	r2, r7, #12
 800adf4:	693b      	ldr	r3, [r7, #16]
 800adf6:	9302      	str	r3, [sp, #8]
 800adf8:	2301      	movs	r3, #1
 800adfa:	9301      	str	r3, [sp, #4]
 800adfc:	2300      	movs	r3, #0
 800adfe:	9300      	str	r3, [sp, #0]
 800ae00:	23ff      	movs	r3, #255	; 0xff
 800ae02:	2100      	movs	r1, #0
 800ae04:	69f8      	ldr	r0, [r7, #28]
 800ae06:	f000 f9c5 	bl	800b194 <ip4_output_if>
  }
  pbuf_free(q);
 800ae0a:	69f8      	ldr	r0, [r7, #28]
 800ae0c:	f002 fe66 	bl	800dadc <pbuf_free>
 800ae10:	e000      	b.n	800ae14 <icmp_send_response+0xc0>
    return;
 800ae12:	bf00      	nop
}
 800ae14:	3720      	adds	r7, #32
 800ae16:	46bd      	mov	sp, r7
 800ae18:	bd80      	pop	{r7, pc}
 800ae1a:	bf00      	nop
 800ae1c:	08018fec 	.word	0x08018fec
 800ae20:	080190b8 	.word	0x080190b8
 800ae24:	0801905c 	.word	0x0801905c

0800ae28 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800ae28:	b480      	push	{r7}
 800ae2a:	b085      	sub	sp, #20
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800ae30:	4b31      	ldr	r3, [pc, #196]	; (800aef8 <ip4_route+0xd0>)
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	60fb      	str	r3, [r7, #12]
 800ae36:	e033      	b.n	800aea0 <ip4_route+0x78>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ae3e:	f003 0301 	and.w	r3, r3, #1
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d029      	beq.n	800ae9a <ip4_route+0x72>
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ae4c:	f003 0304 	and.w	r3, r3, #4
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d022      	beq.n	800ae9a <ip4_route+0x72>
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	3304      	adds	r3, #4
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d01d      	beq.n	800ae9a <ip4_route+0x72>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	681a      	ldr	r2, [r3, #0]
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	3304      	adds	r3, #4
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	405a      	eors	r2, r3
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	3308      	adds	r3, #8
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	4013      	ands	r3, r2
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d101      	bne.n	800ae7a <ip4_route+0x52>
        /* return netif on which to forward IP packet */
        return netif;
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	e038      	b.n	800aeec <ip4_route+0xc4>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ae80:	f003 0302 	and.w	r3, r3, #2
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d108      	bne.n	800ae9a <ip4_route+0x72>
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681a      	ldr	r2, [r3, #0]
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	330c      	adds	r3, #12
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	429a      	cmp	r2, r3
 800ae94:	d101      	bne.n	800ae9a <ip4_route+0x72>
        /* return netif on which to forward IP packet */
        return netif;
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	e028      	b.n	800aeec <ip4_route+0xc4>
  NETIF_FOREACH(netif) {
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	60fb      	str	r3, [r7, #12]
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d1c8      	bne.n	800ae38 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800aea6:	4b15      	ldr	r3, [pc, #84]	; (800aefc <ip4_route+0xd4>)
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d01a      	beq.n	800aee4 <ip4_route+0xbc>
 800aeae:	4b13      	ldr	r3, [pc, #76]	; (800aefc <ip4_route+0xd4>)
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800aeb6:	f003 0301 	and.w	r3, r3, #1
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d012      	beq.n	800aee4 <ip4_route+0xbc>
 800aebe:	4b0f      	ldr	r3, [pc, #60]	; (800aefc <ip4_route+0xd4>)
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800aec6:	f003 0304 	and.w	r3, r3, #4
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d00a      	beq.n	800aee4 <ip4_route+0xbc>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800aece:	4b0b      	ldr	r3, [pc, #44]	; (800aefc <ip4_route+0xd4>)
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	3304      	adds	r3, #4
 800aed4:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d004      	beq.n	800aee4 <ip4_route+0xbc>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	b2db      	uxtb	r3, r3
 800aee0:	2b7f      	cmp	r3, #127	; 0x7f
 800aee2:	d101      	bne.n	800aee8 <ip4_route+0xc0>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800aee4:	2300      	movs	r3, #0
 800aee6:	e001      	b.n	800aeec <ip4_route+0xc4>
  }

  return netif_default;
 800aee8:	4b04      	ldr	r3, [pc, #16]	; (800aefc <ip4_route+0xd4>)
 800aeea:	681b      	ldr	r3, [r3, #0]
}
 800aeec:	4618      	mov	r0, r3
 800aeee:	3714      	adds	r7, #20
 800aef0:	46bd      	mov	sp, r7
 800aef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef6:	4770      	bx	lr
 800aef8:	20009614 	.word	0x20009614
 800aefc:	20009618 	.word	0x20009618

0800af00 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800af00:	b580      	push	{r7, lr}
 800af02:	b082      	sub	sp, #8
 800af04:	af00      	add	r7, sp, #0
 800af06:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800af0e:	f003 0301 	and.w	r3, r3, #1
 800af12:	2b00      	cmp	r3, #0
 800af14:	d016      	beq.n	800af44 <ip4_input_accept+0x44>
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	3304      	adds	r3, #4
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d011      	beq.n	800af44 <ip4_input_accept+0x44>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800af20:	4b0b      	ldr	r3, [pc, #44]	; (800af50 <ip4_input_accept+0x50>)
 800af22:	695a      	ldr	r2, [r3, #20]
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	3304      	adds	r3, #4
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	429a      	cmp	r2, r3
 800af2c:	d008      	beq.n	800af40 <ip4_input_accept+0x40>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800af2e:	4b08      	ldr	r3, [pc, #32]	; (800af50 <ip4_input_accept+0x50>)
 800af30:	695b      	ldr	r3, [r3, #20]
 800af32:	6879      	ldr	r1, [r7, #4]
 800af34:	4618      	mov	r0, r3
 800af36:	f000 fa05 	bl	800b344 <ip4_addr_isbroadcast_u32>
 800af3a:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d001      	beq.n	800af44 <ip4_input_accept+0x44>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800af40:	2301      	movs	r3, #1
 800af42:	e000      	b.n	800af46 <ip4_input_accept+0x46>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800af44:	2300      	movs	r3, #0
}
 800af46:	4618      	mov	r0, r3
 800af48:	3708      	adds	r7, #8
 800af4a:	46bd      	mov	sp, r7
 800af4c:	bd80      	pop	{r7, pc}
 800af4e:	bf00      	nop
 800af50:	20004814 	.word	0x20004814

0800af54 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800af54:	b580      	push	{r7, lr}
 800af56:	b086      	sub	sp, #24
 800af58:	af00      	add	r7, sp, #0
 800af5a:	6078      	str	r0, [r7, #4]
 800af5c:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	685b      	ldr	r3, [r3, #4]
 800af62:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800af64:	697b      	ldr	r3, [r7, #20]
 800af66:	781b      	ldrb	r3, [r3, #0]
 800af68:	091b      	lsrs	r3, r3, #4
 800af6a:	b2db      	uxtb	r3, r3
 800af6c:	2b04      	cmp	r3, #4
 800af6e:	d004      	beq.n	800af7a <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800af70:	6878      	ldr	r0, [r7, #4]
 800af72:	f002 fdb3 	bl	800dadc <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800af76:	2300      	movs	r3, #0
 800af78:	e104      	b.n	800b184 <ip4_input+0x230>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800af7a:	697b      	ldr	r3, [r7, #20]
 800af7c:	781b      	ldrb	r3, [r3, #0]
 800af7e:	f003 030f 	and.w	r3, r3, #15
 800af82:	b2db      	uxtb	r3, r3
 800af84:	009b      	lsls	r3, r3, #2
 800af86:	b2db      	uxtb	r3, r3
 800af88:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800af8a:	697b      	ldr	r3, [r7, #20]
 800af8c:	885b      	ldrh	r3, [r3, #2]
 800af8e:	b29b      	uxth	r3, r3
 800af90:	4618      	mov	r0, r3
 800af92:	f7fd fe43 	bl	8008c1c <lwip_htons>
 800af96:	4603      	mov	r3, r0
 800af98:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	891b      	ldrh	r3, [r3, #8]
 800af9e:	89ba      	ldrh	r2, [r7, #12]
 800afa0:	429a      	cmp	r2, r3
 800afa2:	d204      	bcs.n	800afae <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800afa4:	89bb      	ldrh	r3, [r7, #12]
 800afa6:	4619      	mov	r1, r3
 800afa8:	6878      	ldr	r0, [r7, #4]
 800afaa:	f002 fbdd 	bl	800d768 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	895b      	ldrh	r3, [r3, #10]
 800afb2:	89fa      	ldrh	r2, [r7, #14]
 800afb4:	429a      	cmp	r2, r3
 800afb6:	d807      	bhi.n	800afc8 <ip4_input+0x74>
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	891b      	ldrh	r3, [r3, #8]
 800afbc:	89ba      	ldrh	r2, [r7, #12]
 800afbe:	429a      	cmp	r2, r3
 800afc0:	d802      	bhi.n	800afc8 <ip4_input+0x74>
 800afc2:	89fb      	ldrh	r3, [r7, #14]
 800afc4:	2b13      	cmp	r3, #19
 800afc6:	d804      	bhi.n	800afd2 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800afc8:	6878      	ldr	r0, [r7, #4]
 800afca:	f002 fd87 	bl	800dadc <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800afce:	2300      	movs	r3, #0
 800afd0:	e0d8      	b.n	800b184 <ip4_input+0x230>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800afd2:	697b      	ldr	r3, [r7, #20]
 800afd4:	691b      	ldr	r3, [r3, #16]
 800afd6:	4a6d      	ldr	r2, [pc, #436]	; (800b18c <ip4_input+0x238>)
 800afd8:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800afda:	697b      	ldr	r3, [r7, #20]
 800afdc:	68db      	ldr	r3, [r3, #12]
 800afde:	4a6b      	ldr	r2, [pc, #428]	; (800b18c <ip4_input+0x238>)
 800afe0:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800afe2:	4b6a      	ldr	r3, [pc, #424]	; (800b18c <ip4_input+0x238>)
 800afe4:	695b      	ldr	r3, [r3, #20]
 800afe6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800afea:	2be0      	cmp	r3, #224	; 0xe0
 800afec:	d111      	bne.n	800b012 <ip4_input+0xbe>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800afee:	683b      	ldr	r3, [r7, #0]
 800aff0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800aff4:	f003 0301 	and.w	r3, r3, #1
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d007      	beq.n	800b00c <ip4_input+0xb8>
 800affc:	683b      	ldr	r3, [r7, #0]
 800affe:	3304      	adds	r3, #4
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	2b00      	cmp	r3, #0
 800b004:	d002      	beq.n	800b00c <ip4_input+0xb8>
      netif = inp;
 800b006:	683b      	ldr	r3, [r7, #0]
 800b008:	613b      	str	r3, [r7, #16]
 800b00a:	e02a      	b.n	800b062 <ip4_input+0x10e>
    } else {
      netif = NULL;
 800b00c:	2300      	movs	r3, #0
 800b00e:	613b      	str	r3, [r7, #16]
 800b010:	e027      	b.n	800b062 <ip4_input+0x10e>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800b012:	6838      	ldr	r0, [r7, #0]
 800b014:	f7ff ff74 	bl	800af00 <ip4_input_accept>
 800b018:	4603      	mov	r3, r0
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d002      	beq.n	800b024 <ip4_input+0xd0>
      netif = inp;
 800b01e:	683b      	ldr	r3, [r7, #0]
 800b020:	613b      	str	r3, [r7, #16]
 800b022:	e01e      	b.n	800b062 <ip4_input+0x10e>
    } else {
      netif = NULL;
 800b024:	2300      	movs	r3, #0
 800b026:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800b028:	4b58      	ldr	r3, [pc, #352]	; (800b18c <ip4_input+0x238>)
 800b02a:	695b      	ldr	r3, [r3, #20]
 800b02c:	b2db      	uxtb	r3, r3
 800b02e:	2b7f      	cmp	r3, #127	; 0x7f
 800b030:	d017      	beq.n	800b062 <ip4_input+0x10e>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800b032:	4b57      	ldr	r3, [pc, #348]	; (800b190 <ip4_input+0x23c>)
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	613b      	str	r3, [r7, #16]
 800b038:	e00e      	b.n	800b058 <ip4_input+0x104>
          if (netif == inp) {
 800b03a:	693a      	ldr	r2, [r7, #16]
 800b03c:	683b      	ldr	r3, [r7, #0]
 800b03e:	429a      	cmp	r2, r3
 800b040:	d006      	beq.n	800b050 <ip4_input+0xfc>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800b042:	6938      	ldr	r0, [r7, #16]
 800b044:	f7ff ff5c 	bl	800af00 <ip4_input_accept>
 800b048:	4603      	mov	r3, r0
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d108      	bne.n	800b060 <ip4_input+0x10c>
 800b04e:	e000      	b.n	800b052 <ip4_input+0xfe>
            continue;
 800b050:	bf00      	nop
        NETIF_FOREACH(netif) {
 800b052:	693b      	ldr	r3, [r7, #16]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	613b      	str	r3, [r7, #16]
 800b058:	693b      	ldr	r3, [r7, #16]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d1ed      	bne.n	800b03a <ip4_input+0xe6>
 800b05e:	e000      	b.n	800b062 <ip4_input+0x10e>
            break;
 800b060:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800b062:	4b4a      	ldr	r3, [pc, #296]	; (800b18c <ip4_input+0x238>)
 800b064:	691b      	ldr	r3, [r3, #16]
 800b066:	6839      	ldr	r1, [r7, #0]
 800b068:	4618      	mov	r0, r3
 800b06a:	f000 f96b 	bl	800b344 <ip4_addr_isbroadcast_u32>
 800b06e:	4603      	mov	r3, r0
 800b070:	2b00      	cmp	r3, #0
 800b072:	d105      	bne.n	800b080 <ip4_input+0x12c>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800b074:	4b45      	ldr	r3, [pc, #276]	; (800b18c <ip4_input+0x238>)
 800b076:	691b      	ldr	r3, [r3, #16]
 800b078:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800b07c:	2be0      	cmp	r3, #224	; 0xe0
 800b07e:	d104      	bne.n	800b08a <ip4_input+0x136>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800b080:	6878      	ldr	r0, [r7, #4]
 800b082:	f002 fd2b 	bl	800dadc <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800b086:	2300      	movs	r3, #0
 800b088:	e07c      	b.n	800b184 <ip4_input+0x230>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800b08a:	693b      	ldr	r3, [r7, #16]
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d104      	bne.n	800b09a <ip4_input+0x146>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800b090:	6878      	ldr	r0, [r7, #4]
 800b092:	f002 fd23 	bl	800dadc <pbuf_free>
    return ERR_OK;
 800b096:	2300      	movs	r3, #0
 800b098:	e074      	b.n	800b184 <ip4_input+0x230>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800b09a:	697b      	ldr	r3, [r7, #20]
 800b09c:	88db      	ldrh	r3, [r3, #6]
 800b09e:	b29b      	uxth	r3, r3
 800b0a0:	461a      	mov	r2, r3
 800b0a2:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800b0a6:	4013      	ands	r3, r2
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d00b      	beq.n	800b0c4 <ip4_input+0x170>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800b0ac:	6878      	ldr	r0, [r7, #4]
 800b0ae:	f000 fe53 	bl	800bd58 <ip4_reass>
 800b0b2:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d101      	bne.n	800b0be <ip4_input+0x16a>
      return ERR_OK;
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	e062      	b.n	800b184 <ip4_input+0x230>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	685b      	ldr	r3, [r3, #4]
 800b0c2:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800b0c4:	4a31      	ldr	r2, [pc, #196]	; (800b18c <ip4_input+0x238>)
 800b0c6:	693b      	ldr	r3, [r7, #16]
 800b0c8:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800b0ca:	4a30      	ldr	r2, [pc, #192]	; (800b18c <ip4_input+0x238>)
 800b0cc:	683b      	ldr	r3, [r7, #0]
 800b0ce:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800b0d0:	4a2e      	ldr	r2, [pc, #184]	; (800b18c <ip4_input+0x238>)
 800b0d2:	697b      	ldr	r3, [r7, #20]
 800b0d4:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800b0d6:	697b      	ldr	r3, [r7, #20]
 800b0d8:	781b      	ldrb	r3, [r3, #0]
 800b0da:	f003 030f 	and.w	r3, r3, #15
 800b0de:	b2db      	uxtb	r3, r3
 800b0e0:	009b      	lsls	r3, r3, #2
 800b0e2:	b2db      	uxtb	r3, r3
 800b0e4:	b29a      	uxth	r2, r3
 800b0e6:	4b29      	ldr	r3, [pc, #164]	; (800b18c <ip4_input+0x238>)
 800b0e8:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800b0ea:	89fb      	ldrh	r3, [r7, #14]
 800b0ec:	4619      	mov	r1, r3
 800b0ee:	6878      	ldr	r0, [r7, #4]
 800b0f0:	f002 fc3c 	bl	800d96c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800b0f4:	697b      	ldr	r3, [r7, #20]
 800b0f6:	7a5b      	ldrb	r3, [r3, #9]
 800b0f8:	2b06      	cmp	r3, #6
 800b0fa:	d009      	beq.n	800b110 <ip4_input+0x1bc>
 800b0fc:	2b11      	cmp	r3, #17
 800b0fe:	d002      	beq.n	800b106 <ip4_input+0x1b2>
 800b100:	2b01      	cmp	r3, #1
 800b102:	d00a      	beq.n	800b11a <ip4_input+0x1c6>
 800b104:	e00e      	b.n	800b124 <ip4_input+0x1d0>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800b106:	6839      	ldr	r1, [r7, #0]
 800b108:	6878      	ldr	r0, [r7, #4]
 800b10a:	f009 fb97 	bl	801483c <udp_input>
        break;
 800b10e:	e026      	b.n	800b15e <ip4_input+0x20a>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800b110:	6839      	ldr	r1, [r7, #0]
 800b112:	6878      	ldr	r0, [r7, #4]
 800b114:	f004 ff4a 	bl	800ffac <tcp_input>
        break;
 800b118:	e021      	b.n	800b15e <ip4_input+0x20a>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800b11a:	6839      	ldr	r1, [r7, #0]
 800b11c:	6878      	ldr	r0, [r7, #4]
 800b11e:	f7ff fcf5 	bl	800ab0c <icmp_input>
        break;
 800b122:	e01c      	b.n	800b15e <ip4_input+0x20a>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800b124:	4b19      	ldr	r3, [pc, #100]	; (800b18c <ip4_input+0x238>)
 800b126:	695b      	ldr	r3, [r3, #20]
 800b128:	6939      	ldr	r1, [r7, #16]
 800b12a:	4618      	mov	r0, r3
 800b12c:	f000 f90a 	bl	800b344 <ip4_addr_isbroadcast_u32>
 800b130:	4603      	mov	r3, r0
 800b132:	2b00      	cmp	r3, #0
 800b134:	d10f      	bne.n	800b156 <ip4_input+0x202>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800b136:	4b15      	ldr	r3, [pc, #84]	; (800b18c <ip4_input+0x238>)
 800b138:	695b      	ldr	r3, [r3, #20]
 800b13a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800b13e:	2be0      	cmp	r3, #224	; 0xe0
 800b140:	d009      	beq.n	800b156 <ip4_input+0x202>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800b142:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800b146:	4619      	mov	r1, r3
 800b148:	6878      	ldr	r0, [r7, #4]
 800b14a:	f002 fc82 	bl	800da52 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800b14e:	2102      	movs	r1, #2
 800b150:	6878      	ldr	r0, [r7, #4]
 800b152:	f7ff fddf 	bl	800ad14 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800b156:	6878      	ldr	r0, [r7, #4]
 800b158:	f002 fcc0 	bl	800dadc <pbuf_free>
        break;
 800b15c:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800b15e:	4b0b      	ldr	r3, [pc, #44]	; (800b18c <ip4_input+0x238>)
 800b160:	2200      	movs	r2, #0
 800b162:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800b164:	4b09      	ldr	r3, [pc, #36]	; (800b18c <ip4_input+0x238>)
 800b166:	2200      	movs	r2, #0
 800b168:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800b16a:	4b08      	ldr	r3, [pc, #32]	; (800b18c <ip4_input+0x238>)
 800b16c:	2200      	movs	r2, #0
 800b16e:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800b170:	4b06      	ldr	r3, [pc, #24]	; (800b18c <ip4_input+0x238>)
 800b172:	2200      	movs	r2, #0
 800b174:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800b176:	4b05      	ldr	r3, [pc, #20]	; (800b18c <ip4_input+0x238>)
 800b178:	2200      	movs	r2, #0
 800b17a:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800b17c:	4b03      	ldr	r3, [pc, #12]	; (800b18c <ip4_input+0x238>)
 800b17e:	2200      	movs	r2, #0
 800b180:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800b182:	2300      	movs	r3, #0
}
 800b184:	4618      	mov	r0, r3
 800b186:	3718      	adds	r7, #24
 800b188:	46bd      	mov	sp, r7
 800b18a:	bd80      	pop	{r7, pc}
 800b18c:	20004814 	.word	0x20004814
 800b190:	20009614 	.word	0x20009614

0800b194 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800b194:	b580      	push	{r7, lr}
 800b196:	b08a      	sub	sp, #40	; 0x28
 800b198:	af04      	add	r7, sp, #16
 800b19a:	60f8      	str	r0, [r7, #12]
 800b19c:	60b9      	str	r1, [r7, #8]
 800b19e:	607a      	str	r2, [r7, #4]
 800b1a0:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800b1a2:	68bb      	ldr	r3, [r7, #8]
 800b1a4:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d009      	beq.n	800b1c0 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800b1ac:	68bb      	ldr	r3, [r7, #8]
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d003      	beq.n	800b1ba <ip4_output_if+0x26>
 800b1b2:	68bb      	ldr	r3, [r7, #8]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d102      	bne.n	800b1c0 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800b1ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1bc:	3304      	adds	r3, #4
 800b1be:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800b1c0:	78fa      	ldrb	r2, [r7, #3]
 800b1c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1c4:	9302      	str	r3, [sp, #8]
 800b1c6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b1ca:	9301      	str	r3, [sp, #4]
 800b1cc:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b1d0:	9300      	str	r3, [sp, #0]
 800b1d2:	4613      	mov	r3, r2
 800b1d4:	687a      	ldr	r2, [r7, #4]
 800b1d6:	6979      	ldr	r1, [r7, #20]
 800b1d8:	68f8      	ldr	r0, [r7, #12]
 800b1da:	f000 f805 	bl	800b1e8 <ip4_output_if_src>
 800b1de:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	3718      	adds	r7, #24
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	bd80      	pop	{r7, pc}

0800b1e8 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800b1e8:	b580      	push	{r7, lr}
 800b1ea:	b088      	sub	sp, #32
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	60f8      	str	r0, [r7, #12]
 800b1f0:	60b9      	str	r1, [r7, #8]
 800b1f2:	607a      	str	r2, [r7, #4]
 800b1f4:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	7b9b      	ldrb	r3, [r3, #14]
 800b1fa:	2b01      	cmp	r3, #1
 800b1fc:	d006      	beq.n	800b20c <ip4_output_if_src+0x24>
 800b1fe:	4b4b      	ldr	r3, [pc, #300]	; (800b32c <ip4_output_if_src+0x144>)
 800b200:	f44f 7255 	mov.w	r2, #852	; 0x354
 800b204:	494a      	ldr	r1, [pc, #296]	; (800b330 <ip4_output_if_src+0x148>)
 800b206:	484b      	ldr	r0, [pc, #300]	; (800b334 <ip4_output_if_src+0x14c>)
 800b208:	f00c fa84 	bl	8017714 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d060      	beq.n	800b2d4 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800b212:	2314      	movs	r3, #20
 800b214:	83fb      	strh	r3, [r7, #30]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800b216:	2114      	movs	r1, #20
 800b218:	68f8      	ldr	r0, [r7, #12]
 800b21a:	f002 fb97 	bl	800d94c <pbuf_add_header>
 800b21e:	4603      	mov	r3, r0
 800b220:	2b00      	cmp	r3, #0
 800b222:	d002      	beq.n	800b22a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800b224:	f06f 0301 	mvn.w	r3, #1
 800b228:	e07c      	b.n	800b324 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	685b      	ldr	r3, [r3, #4]
 800b22e:	61bb      	str	r3, [r7, #24]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	895b      	ldrh	r3, [r3, #10]
 800b234:	2b13      	cmp	r3, #19
 800b236:	d806      	bhi.n	800b246 <ip4_output_if_src+0x5e>
 800b238:	4b3c      	ldr	r3, [pc, #240]	; (800b32c <ip4_output_if_src+0x144>)
 800b23a:	f240 3289 	movw	r2, #905	; 0x389
 800b23e:	493e      	ldr	r1, [pc, #248]	; (800b338 <ip4_output_if_src+0x150>)
 800b240:	483c      	ldr	r0, [pc, #240]	; (800b334 <ip4_output_if_src+0x14c>)
 800b242:	f00c fa67 	bl	8017714 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800b246:	69bb      	ldr	r3, [r7, #24]
 800b248:	78fa      	ldrb	r2, [r7, #3]
 800b24a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800b24c:	69bb      	ldr	r3, [r7, #24]
 800b24e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800b252:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681a      	ldr	r2, [r3, #0]
 800b258:	69bb      	ldr	r3, [r7, #24]
 800b25a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800b25c:	8bfb      	ldrh	r3, [r7, #30]
 800b25e:	089b      	lsrs	r3, r3, #2
 800b260:	b29b      	uxth	r3, r3
 800b262:	b2db      	uxtb	r3, r3
 800b264:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b268:	b2da      	uxtb	r2, r3
 800b26a:	69bb      	ldr	r3, [r7, #24]
 800b26c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800b26e:	69bb      	ldr	r3, [r7, #24]
 800b270:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800b274:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	891b      	ldrh	r3, [r3, #8]
 800b27a:	4618      	mov	r0, r3
 800b27c:	f7fd fcce 	bl	8008c1c <lwip_htons>
 800b280:	4603      	mov	r3, r0
 800b282:	461a      	mov	r2, r3
 800b284:	69bb      	ldr	r3, [r7, #24]
 800b286:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800b288:	69bb      	ldr	r3, [r7, #24]
 800b28a:	2200      	movs	r2, #0
 800b28c:	719a      	strb	r2, [r3, #6]
 800b28e:	2200      	movs	r2, #0
 800b290:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800b292:	4b2a      	ldr	r3, [pc, #168]	; (800b33c <ip4_output_if_src+0x154>)
 800b294:	881b      	ldrh	r3, [r3, #0]
 800b296:	4618      	mov	r0, r3
 800b298:	f7fd fcc0 	bl	8008c1c <lwip_htons>
 800b29c:	4603      	mov	r3, r0
 800b29e:	461a      	mov	r2, r3
 800b2a0:	69bb      	ldr	r3, [r7, #24]
 800b2a2:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800b2a4:	4b25      	ldr	r3, [pc, #148]	; (800b33c <ip4_output_if_src+0x154>)
 800b2a6:	881b      	ldrh	r3, [r3, #0]
 800b2a8:	3301      	adds	r3, #1
 800b2aa:	b29a      	uxth	r2, r3
 800b2ac:	4b23      	ldr	r3, [pc, #140]	; (800b33c <ip4_output_if_src+0x154>)
 800b2ae:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800b2b0:	68bb      	ldr	r3, [r7, #8]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d104      	bne.n	800b2c0 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800b2b6:	4b22      	ldr	r3, [pc, #136]	; (800b340 <ip4_output_if_src+0x158>)
 800b2b8:	681a      	ldr	r2, [r3, #0]
 800b2ba:	69bb      	ldr	r3, [r7, #24]
 800b2bc:	60da      	str	r2, [r3, #12]
 800b2be:	e003      	b.n	800b2c8 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800b2c0:	68bb      	ldr	r3, [r7, #8]
 800b2c2:	681a      	ldr	r2, [r3, #0]
 800b2c4:	69bb      	ldr	r3, [r7, #24]
 800b2c6:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800b2c8:	69bb      	ldr	r3, [r7, #24]
 800b2ca:	2200      	movs	r2, #0
 800b2cc:	729a      	strb	r2, [r3, #10]
 800b2ce:	2200      	movs	r2, #0
 800b2d0:	72da      	strb	r2, [r3, #11]
 800b2d2:	e00f      	b.n	800b2f4 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	895b      	ldrh	r3, [r3, #10]
 800b2d8:	2b13      	cmp	r3, #19
 800b2da:	d802      	bhi.n	800b2e2 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800b2dc:	f06f 0301 	mvn.w	r3, #1
 800b2e0:	e020      	b.n	800b324 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	685b      	ldr	r3, [r3, #4]
 800b2e6:	61bb      	str	r3, [r7, #24]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800b2e8:	69bb      	ldr	r3, [r7, #24]
 800b2ea:	691b      	ldr	r3, [r3, #16]
 800b2ec:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800b2ee:	f107 0314 	add.w	r3, r7, #20
 800b2f2:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800b2f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2f6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d00c      	beq.n	800b316 <ip4_output_if_src+0x12e>
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	891a      	ldrh	r2, [r3, #8]
 800b300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b302:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800b304:	429a      	cmp	r2, r3
 800b306:	d906      	bls.n	800b316 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800b308:	687a      	ldr	r2, [r7, #4]
 800b30a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b30c:	68f8      	ldr	r0, [r7, #12]
 800b30e:	f000 ff0b 	bl	800c128 <ip4_frag>
 800b312:	4603      	mov	r3, r0
 800b314:	e006      	b.n	800b324 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800b316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b318:	695b      	ldr	r3, [r3, #20]
 800b31a:	687a      	ldr	r2, [r7, #4]
 800b31c:	68f9      	ldr	r1, [r7, #12]
 800b31e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b320:	4798      	blx	r3
 800b322:	4603      	mov	r3, r0
}
 800b324:	4618      	mov	r0, r3
 800b326:	3720      	adds	r7, #32
 800b328:	46bd      	mov	sp, r7
 800b32a:	bd80      	pop	{r7, pc}
 800b32c:	080190e4 	.word	0x080190e4
 800b330:	08019118 	.word	0x08019118
 800b334:	08019124 	.word	0x08019124
 800b338:	0801914c 	.word	0x0801914c
 800b33c:	200044de 	.word	0x200044de
 800b340:	0801ba9c 	.word	0x0801ba9c

0800b344 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800b344:	b480      	push	{r7}
 800b346:	b085      	sub	sp, #20
 800b348:	af00      	add	r7, sp, #0
 800b34a:	6078      	str	r0, [r7, #4]
 800b34c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b358:	d002      	beq.n	800b360 <ip4_addr_isbroadcast_u32+0x1c>
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d101      	bne.n	800b364 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800b360:	2301      	movs	r3, #1
 800b362:	e02a      	b.n	800b3ba <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800b364:	683b      	ldr	r3, [r7, #0]
 800b366:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b36a:	f003 0302 	and.w	r3, r3, #2
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d101      	bne.n	800b376 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800b372:	2300      	movs	r3, #0
 800b374:	e021      	b.n	800b3ba <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800b376:	683b      	ldr	r3, [r7, #0]
 800b378:	3304      	adds	r3, #4
 800b37a:	681a      	ldr	r2, [r3, #0]
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	429a      	cmp	r2, r3
 800b380:	d101      	bne.n	800b386 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800b382:	2300      	movs	r3, #0
 800b384:	e019      	b.n	800b3ba <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800b386:	68fa      	ldr	r2, [r7, #12]
 800b388:	683b      	ldr	r3, [r7, #0]
 800b38a:	3304      	adds	r3, #4
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	405a      	eors	r2, r3
 800b390:	683b      	ldr	r3, [r7, #0]
 800b392:	3308      	adds	r3, #8
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	4013      	ands	r3, r2
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d10d      	bne.n	800b3b8 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800b39c:	683b      	ldr	r3, [r7, #0]
 800b39e:	3308      	adds	r3, #8
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	43da      	mvns	r2, r3
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800b3a8:	683b      	ldr	r3, [r7, #0]
 800b3aa:	3308      	adds	r3, #8
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800b3b0:	429a      	cmp	r2, r3
 800b3b2:	d101      	bne.n	800b3b8 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800b3b4:	2301      	movs	r3, #1
 800b3b6:	e000      	b.n	800b3ba <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800b3b8:	2300      	movs	r3, #0
  }
}
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	3714      	adds	r7, #20
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c4:	4770      	bx	lr
	...

0800b3c8 <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 800b3c8:	b5b0      	push	{r4, r5, r7, lr}
 800b3ca:	b08a      	sub	sp, #40	; 0x28
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	6078      	str	r0, [r7, #4]
 800b3d0:	6039      	str	r1, [r7, #0]
  u32_t val;
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;
 800b3d2:	f107 030c 	add.w	r3, r7, #12
 800b3d6:	61fb      	str	r3, [r7, #28]

  c = *cp;
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	781b      	ldrb	r3, [r3, #0]
 800b3dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!lwip_isdigit(c)) {
 800b3e0:	f00c f888 	bl	80174f4 <__locale_ctype_ptr>
 800b3e4:	4602      	mov	r2, r0
 800b3e6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b3ea:	3301      	adds	r3, #1
 800b3ec:	4413      	add	r3, r2
 800b3ee:	781b      	ldrb	r3, [r3, #0]
 800b3f0:	f003 0304 	and.w	r3, r3, #4
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d101      	bne.n	800b3fc <ip4addr_aton+0x34>
      return 0;
 800b3f8:	2300      	movs	r3, #0
 800b3fa:	e10d      	b.n	800b618 <ip4addr_aton+0x250>
    }
    val = 0;
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	627b      	str	r3, [r7, #36]	; 0x24
    base = 10;
 800b400:	230a      	movs	r3, #10
 800b402:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (c == '0') {
 800b406:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b40a:	2b30      	cmp	r3, #48	; 0x30
 800b40c:	d11c      	bne.n	800b448 <ip4addr_aton+0x80>
      c = *++cp;
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	3301      	adds	r3, #1
 800b412:	607b      	str	r3, [r7, #4]
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	781b      	ldrb	r3, [r3, #0]
 800b418:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (c == 'x' || c == 'X') {
 800b41c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b420:	2b78      	cmp	r3, #120	; 0x78
 800b422:	d003      	beq.n	800b42c <ip4addr_aton+0x64>
 800b424:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b428:	2b58      	cmp	r3, #88	; 0x58
 800b42a:	d10a      	bne.n	800b442 <ip4addr_aton+0x7a>
        base = 16;
 800b42c:	2310      	movs	r3, #16
 800b42e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        c = *++cp;
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	3301      	adds	r3, #1
 800b436:	607b      	str	r3, [r7, #4]
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	781b      	ldrb	r3, [r3, #0]
 800b43c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800b440:	e002      	b.n	800b448 <ip4addr_aton+0x80>
      } else {
        base = 8;
 800b442:	2308      	movs	r3, #8
 800b444:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      }
    }
    for (;;) {
      if (lwip_isdigit(c)) {
 800b448:	f00c f854 	bl	80174f4 <__locale_ctype_ptr>
 800b44c:	4602      	mov	r2, r0
 800b44e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b452:	3301      	adds	r3, #1
 800b454:	4413      	add	r3, r2
 800b456:	781b      	ldrb	r3, [r3, #0]
 800b458:	f003 0304 	and.w	r3, r3, #4
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d011      	beq.n	800b484 <ip4addr_aton+0xbc>
        val = (val * base) + (u32_t)(c - '0');
 800b460:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b464:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b466:	fb02 f203 	mul.w	r2, r2, r3
 800b46a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b46e:	4413      	add	r3, r2
 800b470:	3b30      	subs	r3, #48	; 0x30
 800b472:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	3301      	adds	r3, #1
 800b478:	607b      	str	r3, [r7, #4]
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	781b      	ldrb	r3, [r3, #0]
 800b47e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800b482:	e7e1      	b.n	800b448 <ip4addr_aton+0x80>
      } else if (base == 16 && lwip_isxdigit(c)) {
 800b484:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b488:	2b10      	cmp	r3, #16
 800b48a:	d12b      	bne.n	800b4e4 <ip4addr_aton+0x11c>
 800b48c:	f00c f832 	bl	80174f4 <__locale_ctype_ptr>
 800b490:	4602      	mov	r2, r0
 800b492:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b496:	3301      	adds	r3, #1
 800b498:	4413      	add	r3, r2
 800b49a:	781b      	ldrb	r3, [r3, #0]
 800b49c:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d01f      	beq.n	800b4e4 <ip4addr_aton+0x11c>
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 800b4a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4a6:	011c      	lsls	r4, r3, #4
 800b4a8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b4ac:	f103 050a 	add.w	r5, r3, #10
 800b4b0:	f00c f820 	bl	80174f4 <__locale_ctype_ptr>
 800b4b4:	4602      	mov	r2, r0
 800b4b6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b4ba:	3301      	adds	r3, #1
 800b4bc:	4413      	add	r3, r2
 800b4be:	781b      	ldrb	r3, [r3, #0]
 800b4c0:	f003 0303 	and.w	r3, r3, #3
 800b4c4:	2b02      	cmp	r3, #2
 800b4c6:	d101      	bne.n	800b4cc <ip4addr_aton+0x104>
 800b4c8:	2361      	movs	r3, #97	; 0x61
 800b4ca:	e000      	b.n	800b4ce <ip4addr_aton+0x106>
 800b4cc:	2341      	movs	r3, #65	; 0x41
 800b4ce:	1aeb      	subs	r3, r5, r3
 800b4d0:	4323      	orrs	r3, r4
 800b4d2:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	3301      	adds	r3, #1
 800b4d8:	607b      	str	r3, [r7, #4]
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	781b      	ldrb	r3, [r3, #0]
 800b4de:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (lwip_isdigit(c)) {
 800b4e2:	e7b1      	b.n	800b448 <ip4addr_aton+0x80>
      } else {
        break;
      }
    }
    if (c == '.') {
 800b4e4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b4e8:	2b2e      	cmp	r3, #46	; 0x2e
 800b4ea:	d114      	bne.n	800b516 <ip4addr_aton+0x14e>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 800b4ec:	f107 030c 	add.w	r3, r7, #12
 800b4f0:	330c      	adds	r3, #12
 800b4f2:	69fa      	ldr	r2, [r7, #28]
 800b4f4:	4293      	cmp	r3, r2
 800b4f6:	d801      	bhi.n	800b4fc <ip4addr_aton+0x134>
        return 0;
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	e08d      	b.n	800b618 <ip4addr_aton+0x250>
      }
      *pp++ = val;
 800b4fc:	69fb      	ldr	r3, [r7, #28]
 800b4fe:	1d1a      	adds	r2, r3, #4
 800b500:	61fa      	str	r2, [r7, #28]
 800b502:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b504:	601a      	str	r2, [r3, #0]
      c = *++cp;
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	3301      	adds	r3, #1
 800b50a:	607b      	str	r3, [r7, #4]
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	781b      	ldrb	r3, [r3, #0]
 800b510:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (!lwip_isdigit(c)) {
 800b514:	e764      	b.n	800b3e0 <ip4addr_aton+0x18>
    } else {
      break;
 800b516:	bf00      	nop
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !lwip_isspace(c)) {
 800b518:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d00d      	beq.n	800b53c <ip4addr_aton+0x174>
 800b520:	f00b ffe8 	bl	80174f4 <__locale_ctype_ptr>
 800b524:	4602      	mov	r2, r0
 800b526:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b52a:	3301      	adds	r3, #1
 800b52c:	4413      	add	r3, r2
 800b52e:	781b      	ldrb	r3, [r3, #0]
 800b530:	f003 0308 	and.w	r3, r3, #8
 800b534:	2b00      	cmp	r3, #0
 800b536:	d101      	bne.n	800b53c <ip4addr_aton+0x174>
    return 0;
 800b538:	2300      	movs	r3, #0
 800b53a:	e06d      	b.n	800b618 <ip4addr_aton+0x250>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 800b53c:	69fa      	ldr	r2, [r7, #28]
 800b53e:	f107 030c 	add.w	r3, r7, #12
 800b542:	1ad3      	subs	r3, r2, r3
 800b544:	109b      	asrs	r3, r3, #2
 800b546:	3301      	adds	r3, #1
 800b548:	2b04      	cmp	r3, #4
 800b54a:	d853      	bhi.n	800b5f4 <ip4addr_aton+0x22c>
 800b54c:	a201      	add	r2, pc, #4	; (adr r2, 800b554 <ip4addr_aton+0x18c>)
 800b54e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b552:	bf00      	nop
 800b554:	0800b569 	.word	0x0800b569
 800b558:	0800b603 	.word	0x0800b603
 800b55c:	0800b56d 	.word	0x0800b56d
 800b560:	0800b58f 	.word	0x0800b58f
 800b564:	0800b5bd 	.word	0x0800b5bd

    case 0:
      return 0;       /* initial nondigit */
 800b568:	2300      	movs	r3, #0
 800b56a:	e055      	b.n	800b618 <ip4addr_aton+0x250>

    case 1:             /* a -- 32 bits */
      break;

    case 2:             /* a.b -- 8.24 bits */
      if (val > 0xffffffUL) {
 800b56c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b56e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b572:	d301      	bcc.n	800b578 <ip4addr_aton+0x1b0>
        return 0;
 800b574:	2300      	movs	r3, #0
 800b576:	e04f      	b.n	800b618 <ip4addr_aton+0x250>
      }
      if (parts[0] > 0xff) {
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	2bff      	cmp	r3, #255	; 0xff
 800b57c:	d901      	bls.n	800b582 <ip4addr_aton+0x1ba>
        return 0;
 800b57e:	2300      	movs	r3, #0
 800b580:	e04a      	b.n	800b618 <ip4addr_aton+0x250>
      }
      val |= parts[0] << 24;
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	061b      	lsls	r3, r3, #24
 800b586:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b588:	4313      	orrs	r3, r2
 800b58a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800b58c:	e03a      	b.n	800b604 <ip4addr_aton+0x23c>

    case 3:             /* a.b.c -- 8.8.16 bits */
      if (val > 0xffff) {
 800b58e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b590:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b594:	d301      	bcc.n	800b59a <ip4addr_aton+0x1d2>
        return 0;
 800b596:	2300      	movs	r3, #0
 800b598:	e03e      	b.n	800b618 <ip4addr_aton+0x250>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	2bff      	cmp	r3, #255	; 0xff
 800b59e:	d802      	bhi.n	800b5a6 <ip4addr_aton+0x1de>
 800b5a0:	693b      	ldr	r3, [r7, #16]
 800b5a2:	2bff      	cmp	r3, #255	; 0xff
 800b5a4:	d901      	bls.n	800b5aa <ip4addr_aton+0x1e2>
        return 0;
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	e036      	b.n	800b618 <ip4addr_aton+0x250>
      }
      val |= (parts[0] << 24) | (parts[1] << 16);
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	061a      	lsls	r2, r3, #24
 800b5ae:	693b      	ldr	r3, [r7, #16]
 800b5b0:	041b      	lsls	r3, r3, #16
 800b5b2:	4313      	orrs	r3, r2
 800b5b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b5b6:	4313      	orrs	r3, r2
 800b5b8:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800b5ba:	e023      	b.n	800b604 <ip4addr_aton+0x23c>

    case 4:             /* a.b.c.d -- 8.8.8.8 bits */
      if (val > 0xff) {
 800b5bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5be:	2bff      	cmp	r3, #255	; 0xff
 800b5c0:	d901      	bls.n	800b5c6 <ip4addr_aton+0x1fe>
        return 0;
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	e028      	b.n	800b618 <ip4addr_aton+0x250>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	2bff      	cmp	r3, #255	; 0xff
 800b5ca:	d805      	bhi.n	800b5d8 <ip4addr_aton+0x210>
 800b5cc:	693b      	ldr	r3, [r7, #16]
 800b5ce:	2bff      	cmp	r3, #255	; 0xff
 800b5d0:	d802      	bhi.n	800b5d8 <ip4addr_aton+0x210>
 800b5d2:	697b      	ldr	r3, [r7, #20]
 800b5d4:	2bff      	cmp	r3, #255	; 0xff
 800b5d6:	d901      	bls.n	800b5dc <ip4addr_aton+0x214>
        return 0;
 800b5d8:	2300      	movs	r3, #0
 800b5da:	e01d      	b.n	800b618 <ip4addr_aton+0x250>
      }
      val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	061a      	lsls	r2, r3, #24
 800b5e0:	693b      	ldr	r3, [r7, #16]
 800b5e2:	041b      	lsls	r3, r3, #16
 800b5e4:	431a      	orrs	r2, r3
 800b5e6:	697b      	ldr	r3, [r7, #20]
 800b5e8:	021b      	lsls	r3, r3, #8
 800b5ea:	4313      	orrs	r3, r2
 800b5ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b5ee:	4313      	orrs	r3, r2
 800b5f0:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800b5f2:	e007      	b.n	800b604 <ip4addr_aton+0x23c>
    default:
      LWIP_ASSERT("unhandled", 0);
 800b5f4:	4b0a      	ldr	r3, [pc, #40]	; (800b620 <ip4addr_aton+0x258>)
 800b5f6:	22f9      	movs	r2, #249	; 0xf9
 800b5f8:	490a      	ldr	r1, [pc, #40]	; (800b624 <ip4addr_aton+0x25c>)
 800b5fa:	480b      	ldr	r0, [pc, #44]	; (800b628 <ip4addr_aton+0x260>)
 800b5fc:	f00c f88a 	bl	8017714 <iprintf>
      break;
 800b600:	e000      	b.n	800b604 <ip4addr_aton+0x23c>
      break;
 800b602:	bf00      	nop
  }
  if (addr) {
 800b604:	683b      	ldr	r3, [r7, #0]
 800b606:	2b00      	cmp	r3, #0
 800b608:	d005      	beq.n	800b616 <ip4addr_aton+0x24e>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 800b60a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b60c:	f7fd fb1b 	bl	8008c46 <lwip_htonl>
 800b610:	4602      	mov	r2, r0
 800b612:	683b      	ldr	r3, [r7, #0]
 800b614:	601a      	str	r2, [r3, #0]
  }
  return 1;
 800b616:	2301      	movs	r3, #1
}
 800b618:	4618      	mov	r0, r3
 800b61a:	3728      	adds	r7, #40	; 0x28
 800b61c:	46bd      	mov	sp, r7
 800b61e:	bdb0      	pop	{r4, r5, r7, pc}
 800b620:	0801917c 	.word	0x0801917c
 800b624:	080191b8 	.word	0x080191b8
 800b628:	080191c4 	.word	0x080191c4

0800b62c <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 800b62c:	b580      	push	{r7, lr}
 800b62e:	b082      	sub	sp, #8
 800b630:	af00      	add	r7, sp, #0
 800b632:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 800b634:	2210      	movs	r2, #16
 800b636:	4904      	ldr	r1, [pc, #16]	; (800b648 <ip4addr_ntoa+0x1c>)
 800b638:	6878      	ldr	r0, [r7, #4]
 800b63a:	f000 f807 	bl	800b64c <ip4addr_ntoa_r>
 800b63e:	4603      	mov	r3, r0
}
 800b640:	4618      	mov	r0, r3
 800b642:	3708      	adds	r7, #8
 800b644:	46bd      	mov	sp, r7
 800b646:	bd80      	pop	{r7, pc}
 800b648:	200044e0 	.word	0x200044e0

0800b64c <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 800b64c:	b480      	push	{r7}
 800b64e:	b08d      	sub	sp, #52	; 0x34
 800b650:	af00      	add	r7, sp, #0
 800b652:	60f8      	str	r0, [r7, #12]
 800b654:	60b9      	str	r1, [r7, #8]
 800b656:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 800b658:	2300      	movs	r3, #0
 800b65a:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	61bb      	str	r3, [r7, #24]

  rp = buf;
 800b662:	68bb      	ldr	r3, [r7, #8]
 800b664:	62fb      	str	r3, [r7, #44]	; 0x2c
  ap = (u8_t *)&s_addr;
 800b666:	f107 0318 	add.w	r3, r7, #24
 800b66a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 800b66c:	2300      	movs	r3, #0
 800b66e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b672:	e059      	b.n	800b728 <ip4addr_ntoa_r+0xdc>
    i = 0;
 800b674:	2300      	movs	r3, #0
 800b676:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    do {
      rem = *ap % (u8_t)10;
 800b67a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b67c:	781a      	ldrb	r2, [r3, #0]
 800b67e:	4b33      	ldr	r3, [pc, #204]	; (800b74c <ip4addr_ntoa_r+0x100>)
 800b680:	fba3 1302 	umull	r1, r3, r3, r2
 800b684:	08d9      	lsrs	r1, r3, #3
 800b686:	460b      	mov	r3, r1
 800b688:	009b      	lsls	r3, r3, #2
 800b68a:	440b      	add	r3, r1
 800b68c:	005b      	lsls	r3, r3, #1
 800b68e:	1ad3      	subs	r3, r2, r3
 800b690:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 800b692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b694:	781b      	ldrb	r3, [r3, #0]
 800b696:	4a2d      	ldr	r2, [pc, #180]	; (800b74c <ip4addr_ntoa_r+0x100>)
 800b698:	fba2 2303 	umull	r2, r3, r2, r3
 800b69c:	08db      	lsrs	r3, r3, #3
 800b69e:	b2da      	uxtb	r2, r3
 800b6a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6a2:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 800b6a4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b6a8:	1c5a      	adds	r2, r3, #1
 800b6aa:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 800b6ae:	4619      	mov	r1, r3
 800b6b0:	7ffb      	ldrb	r3, [r7, #31]
 800b6b2:	3330      	adds	r3, #48	; 0x30
 800b6b4:	b2da      	uxtb	r2, r3
 800b6b6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b6ba:	440b      	add	r3, r1
 800b6bc:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 800b6c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6c2:	781b      	ldrb	r3, [r3, #0]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d1d8      	bne.n	800b67a <ip4addr_ntoa_r+0x2e>
    while (i--) {
 800b6c8:	e012      	b.n	800b6f0 <ip4addr_ntoa_r+0xa4>
      if (len++ >= buflen) {
 800b6ca:	6a3b      	ldr	r3, [r7, #32]
 800b6cc:	1c5a      	adds	r2, r3, #1
 800b6ce:	623a      	str	r2, [r7, #32]
 800b6d0:	687a      	ldr	r2, [r7, #4]
 800b6d2:	4293      	cmp	r3, r2
 800b6d4:	db01      	blt.n	800b6da <ip4addr_ntoa_r+0x8e>
        return NULL;
 800b6d6:	2300      	movs	r3, #0
 800b6d8:	e031      	b.n	800b73e <ip4addr_ntoa_r+0xf2>
      }
      *rp++ = inv[i];
 800b6da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6dc:	1c5a      	adds	r2, r3, #1
 800b6de:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b6e0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800b6e4:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800b6e8:	440a      	add	r2, r1
 800b6ea:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 800b6ee:	701a      	strb	r2, [r3, #0]
    while (i--) {
 800b6f0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b6f4:	1e5a      	subs	r2, r3, #1
 800b6f6:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d1e5      	bne.n	800b6ca <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 800b6fe:	6a3b      	ldr	r3, [r7, #32]
 800b700:	1c5a      	adds	r2, r3, #1
 800b702:	623a      	str	r2, [r7, #32]
 800b704:	687a      	ldr	r2, [r7, #4]
 800b706:	4293      	cmp	r3, r2
 800b708:	db01      	blt.n	800b70e <ip4addr_ntoa_r+0xc2>
      return NULL;
 800b70a:	2300      	movs	r3, #0
 800b70c:	e017      	b.n	800b73e <ip4addr_ntoa_r+0xf2>
    }
    *rp++ = '.';
 800b70e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b710:	1c5a      	adds	r2, r3, #1
 800b712:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b714:	222e      	movs	r2, #46	; 0x2e
 800b716:	701a      	strb	r2, [r3, #0]
    ap++;
 800b718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b71a:	3301      	adds	r3, #1
 800b71c:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 800b71e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b722:	3301      	adds	r3, #1
 800b724:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b728:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b72c:	2b03      	cmp	r3, #3
 800b72e:	d9a1      	bls.n	800b674 <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 800b730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b732:	3b01      	subs	r3, #1
 800b734:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b738:	2200      	movs	r2, #0
 800b73a:	701a      	strb	r2, [r3, #0]
  return buf;
 800b73c:	68bb      	ldr	r3, [r7, #8]
}
 800b73e:	4618      	mov	r0, r3
 800b740:	3734      	adds	r7, #52	; 0x34
 800b742:	46bd      	mov	sp, r7
 800b744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b748:	4770      	bx	lr
 800b74a:	bf00      	nop
 800b74c:	cccccccd 	.word	0xcccccccd

0800b750 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800b750:	b580      	push	{r7, lr}
 800b752:	b084      	sub	sp, #16
 800b754:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800b756:	2300      	movs	r3, #0
 800b758:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800b75a:	4b12      	ldr	r3, [pc, #72]	; (800b7a4 <ip_reass_tmr+0x54>)
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800b760:	e018      	b.n	800b794 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	7fdb      	ldrb	r3, [r3, #31]
 800b766:	2b00      	cmp	r3, #0
 800b768:	d00b      	beq.n	800b782 <ip_reass_tmr+0x32>
      r->timer--;
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	7fdb      	ldrb	r3, [r3, #31]
 800b76e:	3b01      	subs	r3, #1
 800b770:	b2da      	uxtb	r2, r3
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	60fb      	str	r3, [r7, #12]
 800b780:	e008      	b.n	800b794 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800b78c:	68b9      	ldr	r1, [r7, #8]
 800b78e:	6878      	ldr	r0, [r7, #4]
 800b790:	f000 f80a 	bl	800b7a8 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	2b00      	cmp	r3, #0
 800b798:	d1e3      	bne.n	800b762 <ip_reass_tmr+0x12>
    }
  }
}
 800b79a:	bf00      	nop
 800b79c:	3710      	adds	r7, #16
 800b79e:	46bd      	mov	sp, r7
 800b7a0:	bd80      	pop	{r7, pc}
 800b7a2:	bf00      	nop
 800b7a4:	200044f0 	.word	0x200044f0

0800b7a8 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b088      	sub	sp, #32
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
 800b7b0:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800b7b6:	683a      	ldr	r2, [r7, #0]
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	429a      	cmp	r2, r3
 800b7bc:	d105      	bne.n	800b7ca <ip_reass_free_complete_datagram+0x22>
 800b7be:	4b45      	ldr	r3, [pc, #276]	; (800b8d4 <ip_reass_free_complete_datagram+0x12c>)
 800b7c0:	22ab      	movs	r2, #171	; 0xab
 800b7c2:	4945      	ldr	r1, [pc, #276]	; (800b8d8 <ip_reass_free_complete_datagram+0x130>)
 800b7c4:	4845      	ldr	r0, [pc, #276]	; (800b8dc <ip_reass_free_complete_datagram+0x134>)
 800b7c6:	f00b ffa5 	bl	8017714 <iprintf>
  if (prev != NULL) {
 800b7ca:	683b      	ldr	r3, [r7, #0]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d00a      	beq.n	800b7e6 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800b7d0:	683b      	ldr	r3, [r7, #0]
 800b7d2:	681a      	ldr	r2, [r3, #0]
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	429a      	cmp	r2, r3
 800b7d8:	d005      	beq.n	800b7e6 <ip_reass_free_complete_datagram+0x3e>
 800b7da:	4b3e      	ldr	r3, [pc, #248]	; (800b8d4 <ip_reass_free_complete_datagram+0x12c>)
 800b7dc:	22ad      	movs	r2, #173	; 0xad
 800b7de:	4940      	ldr	r1, [pc, #256]	; (800b8e0 <ip_reass_free_complete_datagram+0x138>)
 800b7e0:	483e      	ldr	r0, [pc, #248]	; (800b8dc <ip_reass_free_complete_datagram+0x134>)
 800b7e2:	f00b ff97 	bl	8017714 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	685b      	ldr	r3, [r3, #4]
 800b7ea:	685b      	ldr	r3, [r3, #4]
 800b7ec:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800b7ee:	697b      	ldr	r3, [r7, #20]
 800b7f0:	889b      	ldrh	r3, [r3, #4]
 800b7f2:	b29b      	uxth	r3, r3
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d12a      	bne.n	800b84e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	685b      	ldr	r3, [r3, #4]
 800b7fc:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800b7fe:	697b      	ldr	r3, [r7, #20]
 800b800:	681a      	ldr	r2, [r3, #0]
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800b806:	69bb      	ldr	r3, [r7, #24]
 800b808:	6858      	ldr	r0, [r3, #4]
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	3308      	adds	r3, #8
 800b80e:	2214      	movs	r2, #20
 800b810:	4619      	mov	r1, r3
 800b812:	f00b fea6 	bl	8017562 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800b816:	2101      	movs	r1, #1
 800b818:	69b8      	ldr	r0, [r7, #24]
 800b81a:	f7ff fa8b 	bl	800ad34 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800b81e:	69b8      	ldr	r0, [r7, #24]
 800b820:	f002 f9ea 	bl	800dbf8 <pbuf_clen>
 800b824:	4603      	mov	r3, r0
 800b826:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800b828:	8bfa      	ldrh	r2, [r7, #30]
 800b82a:	8a7b      	ldrh	r3, [r7, #18]
 800b82c:	4413      	add	r3, r2
 800b82e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b832:	db05      	blt.n	800b840 <ip_reass_free_complete_datagram+0x98>
 800b834:	4b27      	ldr	r3, [pc, #156]	; (800b8d4 <ip_reass_free_complete_datagram+0x12c>)
 800b836:	22bc      	movs	r2, #188	; 0xbc
 800b838:	492a      	ldr	r1, [pc, #168]	; (800b8e4 <ip_reass_free_complete_datagram+0x13c>)
 800b83a:	4828      	ldr	r0, [pc, #160]	; (800b8dc <ip_reass_free_complete_datagram+0x134>)
 800b83c:	f00b ff6a 	bl	8017714 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800b840:	8bfa      	ldrh	r2, [r7, #30]
 800b842:	8a7b      	ldrh	r3, [r7, #18]
 800b844:	4413      	add	r3, r2
 800b846:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800b848:	69b8      	ldr	r0, [r7, #24]
 800b84a:	f002 f947 	bl	800dadc <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	685b      	ldr	r3, [r3, #4]
 800b852:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800b854:	e01f      	b.n	800b896 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800b856:	69bb      	ldr	r3, [r7, #24]
 800b858:	685b      	ldr	r3, [r3, #4]
 800b85a:	617b      	str	r3, [r7, #20]
    pcur = p;
 800b85c:	69bb      	ldr	r3, [r7, #24]
 800b85e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800b860:	697b      	ldr	r3, [r7, #20]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800b866:	68f8      	ldr	r0, [r7, #12]
 800b868:	f002 f9c6 	bl	800dbf8 <pbuf_clen>
 800b86c:	4603      	mov	r3, r0
 800b86e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800b870:	8bfa      	ldrh	r2, [r7, #30]
 800b872:	8a7b      	ldrh	r3, [r7, #18]
 800b874:	4413      	add	r3, r2
 800b876:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b87a:	db05      	blt.n	800b888 <ip_reass_free_complete_datagram+0xe0>
 800b87c:	4b15      	ldr	r3, [pc, #84]	; (800b8d4 <ip_reass_free_complete_datagram+0x12c>)
 800b87e:	22cc      	movs	r2, #204	; 0xcc
 800b880:	4918      	ldr	r1, [pc, #96]	; (800b8e4 <ip_reass_free_complete_datagram+0x13c>)
 800b882:	4816      	ldr	r0, [pc, #88]	; (800b8dc <ip_reass_free_complete_datagram+0x134>)
 800b884:	f00b ff46 	bl	8017714 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800b888:	8bfa      	ldrh	r2, [r7, #30]
 800b88a:	8a7b      	ldrh	r3, [r7, #18]
 800b88c:	4413      	add	r3, r2
 800b88e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800b890:	68f8      	ldr	r0, [r7, #12]
 800b892:	f002 f923 	bl	800dadc <pbuf_free>
  while (p != NULL) {
 800b896:	69bb      	ldr	r3, [r7, #24]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d1dc      	bne.n	800b856 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800b89c:	6839      	ldr	r1, [r7, #0]
 800b89e:	6878      	ldr	r0, [r7, #4]
 800b8a0:	f000 f8c2 	bl	800ba28 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800b8a4:	4b10      	ldr	r3, [pc, #64]	; (800b8e8 <ip_reass_free_complete_datagram+0x140>)
 800b8a6:	881b      	ldrh	r3, [r3, #0]
 800b8a8:	8bfa      	ldrh	r2, [r7, #30]
 800b8aa:	429a      	cmp	r2, r3
 800b8ac:	d905      	bls.n	800b8ba <ip_reass_free_complete_datagram+0x112>
 800b8ae:	4b09      	ldr	r3, [pc, #36]	; (800b8d4 <ip_reass_free_complete_datagram+0x12c>)
 800b8b0:	22d2      	movs	r2, #210	; 0xd2
 800b8b2:	490e      	ldr	r1, [pc, #56]	; (800b8ec <ip_reass_free_complete_datagram+0x144>)
 800b8b4:	4809      	ldr	r0, [pc, #36]	; (800b8dc <ip_reass_free_complete_datagram+0x134>)
 800b8b6:	f00b ff2d 	bl	8017714 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800b8ba:	4b0b      	ldr	r3, [pc, #44]	; (800b8e8 <ip_reass_free_complete_datagram+0x140>)
 800b8bc:	881a      	ldrh	r2, [r3, #0]
 800b8be:	8bfb      	ldrh	r3, [r7, #30]
 800b8c0:	1ad3      	subs	r3, r2, r3
 800b8c2:	b29a      	uxth	r2, r3
 800b8c4:	4b08      	ldr	r3, [pc, #32]	; (800b8e8 <ip_reass_free_complete_datagram+0x140>)
 800b8c6:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800b8c8:	8bfb      	ldrh	r3, [r7, #30]
}
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	3720      	adds	r7, #32
 800b8ce:	46bd      	mov	sp, r7
 800b8d0:	bd80      	pop	{r7, pc}
 800b8d2:	bf00      	nop
 800b8d4:	080191ec 	.word	0x080191ec
 800b8d8:	08019228 	.word	0x08019228
 800b8dc:	08019234 	.word	0x08019234
 800b8e0:	0801925c 	.word	0x0801925c
 800b8e4:	08019270 	.word	0x08019270
 800b8e8:	200044f4 	.word	0x200044f4
 800b8ec:	08019290 	.word	0x08019290

0800b8f0 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800b8f0:	b580      	push	{r7, lr}
 800b8f2:	b08a      	sub	sp, #40	; 0x28
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	6078      	str	r0, [r7, #4]
 800b8f8:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800b8fa:	2300      	movs	r3, #0
 800b8fc:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800b8fe:	2300      	movs	r3, #0
 800b900:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800b902:	2300      	movs	r3, #0
 800b904:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800b906:	2300      	movs	r3, #0
 800b908:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800b90a:	2300      	movs	r3, #0
 800b90c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800b90e:	4b28      	ldr	r3, [pc, #160]	; (800b9b0 <ip_reass_remove_oldest_datagram+0xc0>)
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800b914:	e030      	b.n	800b978 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800b916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b918:	695a      	ldr	r2, [r3, #20]
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	68db      	ldr	r3, [r3, #12]
 800b91e:	429a      	cmp	r2, r3
 800b920:	d10c      	bne.n	800b93c <ip_reass_remove_oldest_datagram+0x4c>
 800b922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b924:	699a      	ldr	r2, [r3, #24]
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	691b      	ldr	r3, [r3, #16]
 800b92a:	429a      	cmp	r2, r3
 800b92c:	d106      	bne.n	800b93c <ip_reass_remove_oldest_datagram+0x4c>
 800b92e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b930:	899a      	ldrh	r2, [r3, #12]
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	889b      	ldrh	r3, [r3, #4]
 800b936:	b29b      	uxth	r3, r3
 800b938:	429a      	cmp	r2, r3
 800b93a:	d014      	beq.n	800b966 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800b93c:	693b      	ldr	r3, [r7, #16]
 800b93e:	3301      	adds	r3, #1
 800b940:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800b942:	6a3b      	ldr	r3, [r7, #32]
 800b944:	2b00      	cmp	r3, #0
 800b946:	d104      	bne.n	800b952 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800b948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b94a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800b94c:	69fb      	ldr	r3, [r7, #28]
 800b94e:	61bb      	str	r3, [r7, #24]
 800b950:	e009      	b.n	800b966 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800b952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b954:	7fda      	ldrb	r2, [r3, #31]
 800b956:	6a3b      	ldr	r3, [r7, #32]
 800b958:	7fdb      	ldrb	r3, [r3, #31]
 800b95a:	429a      	cmp	r2, r3
 800b95c:	d803      	bhi.n	800b966 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800b95e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b960:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800b962:	69fb      	ldr	r3, [r7, #28]
 800b964:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800b966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d001      	beq.n	800b972 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800b96e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b970:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800b972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800b978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d1cb      	bne.n	800b916 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800b97e:	6a3b      	ldr	r3, [r7, #32]
 800b980:	2b00      	cmp	r3, #0
 800b982:	d008      	beq.n	800b996 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800b984:	69b9      	ldr	r1, [r7, #24]
 800b986:	6a38      	ldr	r0, [r7, #32]
 800b988:	f7ff ff0e 	bl	800b7a8 <ip_reass_free_complete_datagram>
 800b98c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800b98e:	697a      	ldr	r2, [r7, #20]
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	4413      	add	r3, r2
 800b994:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800b996:	697a      	ldr	r2, [r7, #20]
 800b998:	683b      	ldr	r3, [r7, #0]
 800b99a:	429a      	cmp	r2, r3
 800b99c:	da02      	bge.n	800b9a4 <ip_reass_remove_oldest_datagram+0xb4>
 800b99e:	693b      	ldr	r3, [r7, #16]
 800b9a0:	2b01      	cmp	r3, #1
 800b9a2:	dcac      	bgt.n	800b8fe <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800b9a4:	697b      	ldr	r3, [r7, #20]
}
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	3728      	adds	r7, #40	; 0x28
 800b9aa:	46bd      	mov	sp, r7
 800b9ac:	bd80      	pop	{r7, pc}
 800b9ae:	bf00      	nop
 800b9b0:	200044f0 	.word	0x200044f0

0800b9b4 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800b9b4:	b580      	push	{r7, lr}
 800b9b6:	b084      	sub	sp, #16
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	6078      	str	r0, [r7, #4]
 800b9bc:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800b9be:	2004      	movs	r0, #4
 800b9c0:	f001 f966 	bl	800cc90 <memp_malloc>
 800b9c4:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d110      	bne.n	800b9ee <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800b9cc:	6839      	ldr	r1, [r7, #0]
 800b9ce:	6878      	ldr	r0, [r7, #4]
 800b9d0:	f7ff ff8e 	bl	800b8f0 <ip_reass_remove_oldest_datagram>
 800b9d4:	4602      	mov	r2, r0
 800b9d6:	683b      	ldr	r3, [r7, #0]
 800b9d8:	429a      	cmp	r2, r3
 800b9da:	db03      	blt.n	800b9e4 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800b9dc:	2004      	movs	r0, #4
 800b9de:	f001 f957 	bl	800cc90 <memp_malloc>
 800b9e2:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d101      	bne.n	800b9ee <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	e016      	b.n	800ba1c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800b9ee:	2220      	movs	r2, #32
 800b9f0:	2100      	movs	r1, #0
 800b9f2:	68f8      	ldr	r0, [r7, #12]
 800b9f4:	f00b fdda 	bl	80175ac <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	220f      	movs	r2, #15
 800b9fc:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800b9fe:	4b09      	ldr	r3, [pc, #36]	; (800ba24 <ip_reass_enqueue_new_datagram+0x70>)
 800ba00:	681a      	ldr	r2, [r3, #0]
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800ba06:	4a07      	ldr	r2, [pc, #28]	; (800ba24 <ip_reass_enqueue_new_datagram+0x70>)
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	3308      	adds	r3, #8
 800ba10:	2214      	movs	r2, #20
 800ba12:	6879      	ldr	r1, [r7, #4]
 800ba14:	4618      	mov	r0, r3
 800ba16:	f00b fda4 	bl	8017562 <memcpy>
  return ipr;
 800ba1a:	68fb      	ldr	r3, [r7, #12]
}
 800ba1c:	4618      	mov	r0, r3
 800ba1e:	3710      	adds	r7, #16
 800ba20:	46bd      	mov	sp, r7
 800ba22:	bd80      	pop	{r7, pc}
 800ba24:	200044f0 	.word	0x200044f0

0800ba28 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	b082      	sub	sp, #8
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	6078      	str	r0, [r7, #4]
 800ba30:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800ba32:	4b10      	ldr	r3, [pc, #64]	; (800ba74 <ip_reass_dequeue_datagram+0x4c>)
 800ba34:	681a      	ldr	r2, [r3, #0]
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	429a      	cmp	r2, r3
 800ba3a:	d104      	bne.n	800ba46 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	4a0c      	ldr	r2, [pc, #48]	; (800ba74 <ip_reass_dequeue_datagram+0x4c>)
 800ba42:	6013      	str	r3, [r2, #0]
 800ba44:	e00d      	b.n	800ba62 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800ba46:	683b      	ldr	r3, [r7, #0]
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d106      	bne.n	800ba5a <ip_reass_dequeue_datagram+0x32>
 800ba4c:	4b0a      	ldr	r3, [pc, #40]	; (800ba78 <ip_reass_dequeue_datagram+0x50>)
 800ba4e:	f240 1245 	movw	r2, #325	; 0x145
 800ba52:	490a      	ldr	r1, [pc, #40]	; (800ba7c <ip_reass_dequeue_datagram+0x54>)
 800ba54:	480a      	ldr	r0, [pc, #40]	; (800ba80 <ip_reass_dequeue_datagram+0x58>)
 800ba56:	f00b fe5d 	bl	8017714 <iprintf>
    prev->next = ipr->next;
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	681a      	ldr	r2, [r3, #0]
 800ba5e:	683b      	ldr	r3, [r7, #0]
 800ba60:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800ba62:	6879      	ldr	r1, [r7, #4]
 800ba64:	2004      	movs	r0, #4
 800ba66:	f001 f965 	bl	800cd34 <memp_free>
}
 800ba6a:	bf00      	nop
 800ba6c:	3708      	adds	r7, #8
 800ba6e:	46bd      	mov	sp, r7
 800ba70:	bd80      	pop	{r7, pc}
 800ba72:	bf00      	nop
 800ba74:	200044f0 	.word	0x200044f0
 800ba78:	080191ec 	.word	0x080191ec
 800ba7c:	080192b4 	.word	0x080192b4
 800ba80:	08019234 	.word	0x08019234

0800ba84 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800ba84:	b580      	push	{r7, lr}
 800ba86:	b08c      	sub	sp, #48	; 0x30
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	60f8      	str	r0, [r7, #12]
 800ba8c:	60b9      	str	r1, [r7, #8]
 800ba8e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800ba90:	2300      	movs	r3, #0
 800ba92:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800ba94:	2301      	movs	r3, #1
 800ba96:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800ba98:	68bb      	ldr	r3, [r7, #8]
 800ba9a:	685b      	ldr	r3, [r3, #4]
 800ba9c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800ba9e:	69fb      	ldr	r3, [r7, #28]
 800baa0:	885b      	ldrh	r3, [r3, #2]
 800baa2:	b29b      	uxth	r3, r3
 800baa4:	4618      	mov	r0, r3
 800baa6:	f7fd f8b9 	bl	8008c1c <lwip_htons>
 800baaa:	4603      	mov	r3, r0
 800baac:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800baae:	69fb      	ldr	r3, [r7, #28]
 800bab0:	781b      	ldrb	r3, [r3, #0]
 800bab2:	f003 030f 	and.w	r3, r3, #15
 800bab6:	b2db      	uxtb	r3, r3
 800bab8:	009b      	lsls	r3, r3, #2
 800baba:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800babc:	7e7b      	ldrb	r3, [r7, #25]
 800babe:	b29b      	uxth	r3, r3
 800bac0:	8b7a      	ldrh	r2, [r7, #26]
 800bac2:	429a      	cmp	r2, r3
 800bac4:	d202      	bcs.n	800bacc <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800bac6:	f04f 33ff 	mov.w	r3, #4294967295
 800baca:	e135      	b.n	800bd38 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800bacc:	7e7b      	ldrb	r3, [r7, #25]
 800bace:	b29b      	uxth	r3, r3
 800bad0:	8b7a      	ldrh	r2, [r7, #26]
 800bad2:	1ad3      	subs	r3, r2, r3
 800bad4:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800bad6:	69fb      	ldr	r3, [r7, #28]
 800bad8:	88db      	ldrh	r3, [r3, #6]
 800bada:	b29b      	uxth	r3, r3
 800badc:	4618      	mov	r0, r3
 800bade:	f7fd f89d 	bl	8008c1c <lwip_htons>
 800bae2:	4603      	mov	r3, r0
 800bae4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bae8:	b29b      	uxth	r3, r3
 800baea:	00db      	lsls	r3, r3, #3
 800baec:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800baee:	68bb      	ldr	r3, [r7, #8]
 800baf0:	685b      	ldr	r3, [r3, #4]
 800baf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800baf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baf6:	2200      	movs	r2, #0
 800baf8:	701a      	strb	r2, [r3, #0]
 800bafa:	2200      	movs	r2, #0
 800bafc:	705a      	strb	r2, [r3, #1]
 800bafe:	2200      	movs	r2, #0
 800bb00:	709a      	strb	r2, [r3, #2]
 800bb02:	2200      	movs	r2, #0
 800bb04:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800bb06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb08:	8afa      	ldrh	r2, [r7, #22]
 800bb0a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800bb0c:	8afa      	ldrh	r2, [r7, #22]
 800bb0e:	8b7b      	ldrh	r3, [r7, #26]
 800bb10:	4413      	add	r3, r2
 800bb12:	b29a      	uxth	r2, r3
 800bb14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb16:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800bb18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb1a:	88db      	ldrh	r3, [r3, #6]
 800bb1c:	b29b      	uxth	r3, r3
 800bb1e:	8afa      	ldrh	r2, [r7, #22]
 800bb20:	429a      	cmp	r2, r3
 800bb22:	d902      	bls.n	800bb2a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800bb24:	f04f 33ff 	mov.w	r3, #4294967295
 800bb28:	e106      	b.n	800bd38 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	685b      	ldr	r3, [r3, #4]
 800bb2e:	627b      	str	r3, [r7, #36]	; 0x24
 800bb30:	e068      	b.n	800bc04 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800bb32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb34:	685b      	ldr	r3, [r3, #4]
 800bb36:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800bb38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb3a:	889b      	ldrh	r3, [r3, #4]
 800bb3c:	b29a      	uxth	r2, r3
 800bb3e:	693b      	ldr	r3, [r7, #16]
 800bb40:	889b      	ldrh	r3, [r3, #4]
 800bb42:	b29b      	uxth	r3, r3
 800bb44:	429a      	cmp	r2, r3
 800bb46:	d235      	bcs.n	800bbb4 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800bb48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb4c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800bb4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d020      	beq.n	800bb96 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800bb54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb56:	889b      	ldrh	r3, [r3, #4]
 800bb58:	b29a      	uxth	r2, r3
 800bb5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb5c:	88db      	ldrh	r3, [r3, #6]
 800bb5e:	b29b      	uxth	r3, r3
 800bb60:	429a      	cmp	r2, r3
 800bb62:	d307      	bcc.n	800bb74 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800bb64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb66:	88db      	ldrh	r3, [r3, #6]
 800bb68:	b29a      	uxth	r2, r3
 800bb6a:	693b      	ldr	r3, [r7, #16]
 800bb6c:	889b      	ldrh	r3, [r3, #4]
 800bb6e:	b29b      	uxth	r3, r3
 800bb70:	429a      	cmp	r2, r3
 800bb72:	d902      	bls.n	800bb7a <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800bb74:	f04f 33ff 	mov.w	r3, #4294967295
 800bb78:	e0de      	b.n	800bd38 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800bb7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb7c:	68ba      	ldr	r2, [r7, #8]
 800bb7e:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800bb80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb82:	88db      	ldrh	r3, [r3, #6]
 800bb84:	b29a      	uxth	r2, r3
 800bb86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb88:	889b      	ldrh	r3, [r3, #4]
 800bb8a:	b29b      	uxth	r3, r3
 800bb8c:	429a      	cmp	r2, r3
 800bb8e:	d03d      	beq.n	800bc0c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800bb90:	2300      	movs	r3, #0
 800bb92:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800bb94:	e03a      	b.n	800bc0c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800bb96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb98:	88db      	ldrh	r3, [r3, #6]
 800bb9a:	b29a      	uxth	r2, r3
 800bb9c:	693b      	ldr	r3, [r7, #16]
 800bb9e:	889b      	ldrh	r3, [r3, #4]
 800bba0:	b29b      	uxth	r3, r3
 800bba2:	429a      	cmp	r2, r3
 800bba4:	d902      	bls.n	800bbac <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800bba6:	f04f 33ff 	mov.w	r3, #4294967295
 800bbaa:	e0c5      	b.n	800bd38 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	68ba      	ldr	r2, [r7, #8]
 800bbb0:	605a      	str	r2, [r3, #4]
      break;
 800bbb2:	e02b      	b.n	800bc0c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800bbb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbb6:	889b      	ldrh	r3, [r3, #4]
 800bbb8:	b29a      	uxth	r2, r3
 800bbba:	693b      	ldr	r3, [r7, #16]
 800bbbc:	889b      	ldrh	r3, [r3, #4]
 800bbbe:	b29b      	uxth	r3, r3
 800bbc0:	429a      	cmp	r2, r3
 800bbc2:	d102      	bne.n	800bbca <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800bbc4:	f04f 33ff 	mov.w	r3, #4294967295
 800bbc8:	e0b6      	b.n	800bd38 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800bbca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbcc:	889b      	ldrh	r3, [r3, #4]
 800bbce:	b29a      	uxth	r2, r3
 800bbd0:	693b      	ldr	r3, [r7, #16]
 800bbd2:	88db      	ldrh	r3, [r3, #6]
 800bbd4:	b29b      	uxth	r3, r3
 800bbd6:	429a      	cmp	r2, r3
 800bbd8:	d202      	bcs.n	800bbe0 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800bbda:	f04f 33ff 	mov.w	r3, #4294967295
 800bbde:	e0ab      	b.n	800bd38 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800bbe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d009      	beq.n	800bbfa <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800bbe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbe8:	88db      	ldrh	r3, [r3, #6]
 800bbea:	b29a      	uxth	r2, r3
 800bbec:	693b      	ldr	r3, [r7, #16]
 800bbee:	889b      	ldrh	r3, [r3, #4]
 800bbf0:	b29b      	uxth	r3, r3
 800bbf2:	429a      	cmp	r2, r3
 800bbf4:	d001      	beq.n	800bbfa <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800bbfa:	693b      	ldr	r3, [r7, #16]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800bc00:	693b      	ldr	r3, [r7, #16]
 800bc02:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800bc04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d193      	bne.n	800bb32 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800bc0a:	e000      	b.n	800bc0e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800bc0c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800bc0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d12d      	bne.n	800bc70 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800bc14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d01c      	beq.n	800bc54 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800bc1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc1c:	88db      	ldrh	r3, [r3, #6]
 800bc1e:	b29a      	uxth	r2, r3
 800bc20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc22:	889b      	ldrh	r3, [r3, #4]
 800bc24:	b29b      	uxth	r3, r3
 800bc26:	429a      	cmp	r2, r3
 800bc28:	d906      	bls.n	800bc38 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800bc2a:	4b45      	ldr	r3, [pc, #276]	; (800bd40 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800bc2c:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800bc30:	4944      	ldr	r1, [pc, #272]	; (800bd44 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800bc32:	4845      	ldr	r0, [pc, #276]	; (800bd48 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800bc34:	f00b fd6e 	bl	8017714 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800bc38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc3a:	68ba      	ldr	r2, [r7, #8]
 800bc3c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800bc3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc40:	88db      	ldrh	r3, [r3, #6]
 800bc42:	b29a      	uxth	r2, r3
 800bc44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc46:	889b      	ldrh	r3, [r3, #4]
 800bc48:	b29b      	uxth	r3, r3
 800bc4a:	429a      	cmp	r2, r3
 800bc4c:	d010      	beq.n	800bc70 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800bc4e:	2300      	movs	r3, #0
 800bc50:	623b      	str	r3, [r7, #32]
 800bc52:	e00d      	b.n	800bc70 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	685b      	ldr	r3, [r3, #4]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d006      	beq.n	800bc6a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800bc5c:	4b38      	ldr	r3, [pc, #224]	; (800bd40 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800bc5e:	f240 12bf 	movw	r2, #447	; 0x1bf
 800bc62:	493a      	ldr	r1, [pc, #232]	; (800bd4c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800bc64:	4838      	ldr	r0, [pc, #224]	; (800bd48 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800bc66:	f00b fd55 	bl	8017714 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	68ba      	ldr	r2, [r7, #8]
 800bc6e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d105      	bne.n	800bc82 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	7f9b      	ldrb	r3, [r3, #30]
 800bc7a:	f003 0301 	and.w	r3, r3, #1
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d059      	beq.n	800bd36 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800bc82:	6a3b      	ldr	r3, [r7, #32]
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d04f      	beq.n	800bd28 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	685b      	ldr	r3, [r3, #4]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d006      	beq.n	800bc9e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	685b      	ldr	r3, [r3, #4]
 800bc94:	685b      	ldr	r3, [r3, #4]
 800bc96:	889b      	ldrh	r3, [r3, #4]
 800bc98:	b29b      	uxth	r3, r3
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d002      	beq.n	800bca4 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800bc9e:	2300      	movs	r3, #0
 800bca0:	623b      	str	r3, [r7, #32]
 800bca2:	e041      	b.n	800bd28 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800bca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bca6:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800bca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800bcae:	e012      	b.n	800bcd6 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800bcb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcb2:	685b      	ldr	r3, [r3, #4]
 800bcb4:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800bcb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcb8:	88db      	ldrh	r3, [r3, #6]
 800bcba:	b29a      	uxth	r2, r3
 800bcbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcbe:	889b      	ldrh	r3, [r3, #4]
 800bcc0:	b29b      	uxth	r3, r3
 800bcc2:	429a      	cmp	r2, r3
 800bcc4:	d002      	beq.n	800bccc <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	623b      	str	r3, [r7, #32]
            break;
 800bcca:	e007      	b.n	800bcdc <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800bccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcce:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800bcd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800bcd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d1e9      	bne.n	800bcb0 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800bcdc:	6a3b      	ldr	r3, [r7, #32]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d022      	beq.n	800bd28 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	685b      	ldr	r3, [r3, #4]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d106      	bne.n	800bcf8 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800bcea:	4b15      	ldr	r3, [pc, #84]	; (800bd40 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800bcec:	f240 12df 	movw	r2, #479	; 0x1df
 800bcf0:	4917      	ldr	r1, [pc, #92]	; (800bd50 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800bcf2:	4815      	ldr	r0, [pc, #84]	; (800bd48 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800bcf4:	f00b fd0e 	bl	8017714 <iprintf>
          LWIP_ASSERT("sanity check",
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	685b      	ldr	r3, [r3, #4]
 800bcfc:	685a      	ldr	r2, [r3, #4]
 800bcfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd00:	429a      	cmp	r2, r3
 800bd02:	d106      	bne.n	800bd12 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800bd04:	4b0e      	ldr	r3, [pc, #56]	; (800bd40 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800bd06:	f240 12e1 	movw	r2, #481	; 0x1e1
 800bd0a:	4911      	ldr	r1, [pc, #68]	; (800bd50 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800bd0c:	480e      	ldr	r0, [pc, #56]	; (800bd48 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800bd0e:	f00b fd01 	bl	8017714 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800bd12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d006      	beq.n	800bd28 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800bd1a:	4b09      	ldr	r3, [pc, #36]	; (800bd40 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800bd1c:	f240 12e3 	movw	r2, #483	; 0x1e3
 800bd20:	490c      	ldr	r1, [pc, #48]	; (800bd54 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800bd22:	4809      	ldr	r0, [pc, #36]	; (800bd48 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800bd24:	f00b fcf6 	bl	8017714 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800bd28:	6a3b      	ldr	r3, [r7, #32]
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	bf14      	ite	ne
 800bd2e:	2301      	movne	r3, #1
 800bd30:	2300      	moveq	r3, #0
 800bd32:	b2db      	uxtb	r3, r3
 800bd34:	e000      	b.n	800bd38 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800bd36:	2300      	movs	r3, #0
}
 800bd38:	4618      	mov	r0, r3
 800bd3a:	3730      	adds	r7, #48	; 0x30
 800bd3c:	46bd      	mov	sp, r7
 800bd3e:	bd80      	pop	{r7, pc}
 800bd40:	080191ec 	.word	0x080191ec
 800bd44:	080192d0 	.word	0x080192d0
 800bd48:	08019234 	.word	0x08019234
 800bd4c:	080192f0 	.word	0x080192f0
 800bd50:	08019328 	.word	0x08019328
 800bd54:	08019338 	.word	0x08019338

0800bd58 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800bd58:	b580      	push	{r7, lr}
 800bd5a:	b08e      	sub	sp, #56	; 0x38
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	685b      	ldr	r3, [r3, #4]
 800bd64:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800bd66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd68:	781b      	ldrb	r3, [r3, #0]
 800bd6a:	f003 030f 	and.w	r3, r3, #15
 800bd6e:	b2db      	uxtb	r3, r3
 800bd70:	009b      	lsls	r3, r3, #2
 800bd72:	b2db      	uxtb	r3, r3
 800bd74:	2b14      	cmp	r3, #20
 800bd76:	f040 8165 	bne.w	800c044 <ip4_reass+0x2ec>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800bd7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd7c:	88db      	ldrh	r3, [r3, #6]
 800bd7e:	b29b      	uxth	r3, r3
 800bd80:	4618      	mov	r0, r3
 800bd82:	f7fc ff4b 	bl	8008c1c <lwip_htons>
 800bd86:	4603      	mov	r3, r0
 800bd88:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bd8c:	b29b      	uxth	r3, r3
 800bd8e:	00db      	lsls	r3, r3, #3
 800bd90:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800bd92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd94:	885b      	ldrh	r3, [r3, #2]
 800bd96:	b29b      	uxth	r3, r3
 800bd98:	4618      	mov	r0, r3
 800bd9a:	f7fc ff3f 	bl	8008c1c <lwip_htons>
 800bd9e:	4603      	mov	r3, r0
 800bda0:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800bda2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bda4:	781b      	ldrb	r3, [r3, #0]
 800bda6:	f003 030f 	and.w	r3, r3, #15
 800bdaa:	b2db      	uxtb	r3, r3
 800bdac:	009b      	lsls	r3, r3, #2
 800bdae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800bdb2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bdb6:	b29b      	uxth	r3, r3
 800bdb8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800bdba:	429a      	cmp	r2, r3
 800bdbc:	f0c0 8144 	bcc.w	800c048 <ip4_reass+0x2f0>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800bdc0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bdc4:	b29b      	uxth	r3, r3
 800bdc6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800bdc8:	1ad3      	subs	r3, r2, r3
 800bdca:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800bdcc:	6878      	ldr	r0, [r7, #4]
 800bdce:	f001 ff13 	bl	800dbf8 <pbuf_clen>
 800bdd2:	4603      	mov	r3, r0
 800bdd4:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800bdd6:	4ba1      	ldr	r3, [pc, #644]	; (800c05c <ip4_reass+0x304>)
 800bdd8:	881b      	ldrh	r3, [r3, #0]
 800bdda:	461a      	mov	r2, r3
 800bddc:	8c3b      	ldrh	r3, [r7, #32]
 800bdde:	4413      	add	r3, r2
 800bde0:	2b0a      	cmp	r3, #10
 800bde2:	dd10      	ble.n	800be06 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800bde4:	8c3b      	ldrh	r3, [r7, #32]
 800bde6:	4619      	mov	r1, r3
 800bde8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bdea:	f7ff fd81 	bl	800b8f0 <ip_reass_remove_oldest_datagram>
 800bdee:	4603      	mov	r3, r0
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	f000 812a 	beq.w	800c04a <ip4_reass+0x2f2>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800bdf6:	4b99      	ldr	r3, [pc, #612]	; (800c05c <ip4_reass+0x304>)
 800bdf8:	881b      	ldrh	r3, [r3, #0]
 800bdfa:	461a      	mov	r2, r3
 800bdfc:	8c3b      	ldrh	r3, [r7, #32]
 800bdfe:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800be00:	2b0a      	cmp	r3, #10
 800be02:	f300 8122 	bgt.w	800c04a <ip4_reass+0x2f2>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800be06:	4b96      	ldr	r3, [pc, #600]	; (800c060 <ip4_reass+0x308>)
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	633b      	str	r3, [r7, #48]	; 0x30
 800be0c:	e015      	b.n	800be3a <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800be0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be10:	695a      	ldr	r2, [r3, #20]
 800be12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be14:	68db      	ldr	r3, [r3, #12]
 800be16:	429a      	cmp	r2, r3
 800be18:	d10c      	bne.n	800be34 <ip4_reass+0xdc>
 800be1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be1c:	699a      	ldr	r2, [r3, #24]
 800be1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be20:	691b      	ldr	r3, [r3, #16]
 800be22:	429a      	cmp	r2, r3
 800be24:	d106      	bne.n	800be34 <ip4_reass+0xdc>
 800be26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be28:	899a      	ldrh	r2, [r3, #12]
 800be2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be2c:	889b      	ldrh	r3, [r3, #4]
 800be2e:	b29b      	uxth	r3, r3
 800be30:	429a      	cmp	r2, r3
 800be32:	d006      	beq.n	800be42 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800be34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	633b      	str	r3, [r7, #48]	; 0x30
 800be3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d1e6      	bne.n	800be0e <ip4_reass+0xb6>
 800be40:	e000      	b.n	800be44 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800be42:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800be44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be46:	2b00      	cmp	r3, #0
 800be48:	d109      	bne.n	800be5e <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800be4a:	8c3b      	ldrh	r3, [r7, #32]
 800be4c:	4619      	mov	r1, r3
 800be4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be50:	f7ff fdb0 	bl	800b9b4 <ip_reass_enqueue_new_datagram>
 800be54:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800be56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d11c      	bne.n	800be96 <ip4_reass+0x13e>
      goto nullreturn;
 800be5c:	e0f5      	b.n	800c04a <ip4_reass+0x2f2>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800be5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be60:	88db      	ldrh	r3, [r3, #6]
 800be62:	b29b      	uxth	r3, r3
 800be64:	4618      	mov	r0, r3
 800be66:	f7fc fed9 	bl	8008c1c <lwip_htons>
 800be6a:	4603      	mov	r3, r0
 800be6c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800be70:	2b00      	cmp	r3, #0
 800be72:	d110      	bne.n	800be96 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800be74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be76:	89db      	ldrh	r3, [r3, #14]
 800be78:	4618      	mov	r0, r3
 800be7a:	f7fc fecf 	bl	8008c1c <lwip_htons>
 800be7e:	4603      	mov	r3, r0
 800be80:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800be84:	2b00      	cmp	r3, #0
 800be86:	d006      	beq.n	800be96 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800be88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be8a:	3308      	adds	r3, #8
 800be8c:	2214      	movs	r2, #20
 800be8e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800be90:	4618      	mov	r0, r3
 800be92:	f00b fb66 	bl	8017562 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800be96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be98:	88db      	ldrh	r3, [r3, #6]
 800be9a:	b29b      	uxth	r3, r3
 800be9c:	f003 0320 	and.w	r3, r3, #32
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	bf0c      	ite	eq
 800bea4:	2301      	moveq	r3, #1
 800bea6:	2300      	movne	r3, #0
 800bea8:	b2db      	uxtb	r3, r3
 800beaa:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800beac:	69fb      	ldr	r3, [r7, #28]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d00e      	beq.n	800bed0 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800beb2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800beb4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800beb6:	4413      	add	r3, r2
 800beb8:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800beba:	8b7a      	ldrh	r2, [r7, #26]
 800bebc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bebe:	429a      	cmp	r2, r3
 800bec0:	f0c0 80a1 	bcc.w	800c006 <ip4_reass+0x2ae>
 800bec4:	8b7b      	ldrh	r3, [r7, #26]
 800bec6:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800beca:	4293      	cmp	r3, r2
 800becc:	f200 809b 	bhi.w	800c006 <ip4_reass+0x2ae>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800bed0:	69fa      	ldr	r2, [r7, #28]
 800bed2:	6879      	ldr	r1, [r7, #4]
 800bed4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bed6:	f7ff fdd5 	bl	800ba84 <ip_reass_chain_frag_into_datagram_and_validate>
 800beda:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800bedc:	697b      	ldr	r3, [r7, #20]
 800bede:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bee2:	f000 808f 	beq.w	800c004 <ip4_reass+0x2ac>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800bee6:	4b5d      	ldr	r3, [pc, #372]	; (800c05c <ip4_reass+0x304>)
 800bee8:	881a      	ldrh	r2, [r3, #0]
 800beea:	8c3b      	ldrh	r3, [r7, #32]
 800beec:	4413      	add	r3, r2
 800beee:	b29a      	uxth	r2, r3
 800bef0:	4b5a      	ldr	r3, [pc, #360]	; (800c05c <ip4_reass+0x304>)
 800bef2:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800bef4:	69fb      	ldr	r3, [r7, #28]
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d00d      	beq.n	800bf16 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800befa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800befc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800befe:	4413      	add	r3, r2
 800bf00:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800bf02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf04:	8a7a      	ldrh	r2, [r7, #18]
 800bf06:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800bf08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf0a:	7f9b      	ldrb	r3, [r3, #30]
 800bf0c:	f043 0301 	orr.w	r3, r3, #1
 800bf10:	b2da      	uxtb	r2, r3
 800bf12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf14:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800bf16:	697b      	ldr	r3, [r7, #20]
 800bf18:	2b01      	cmp	r3, #1
 800bf1a:	d171      	bne.n	800c000 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800bf1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf1e:	8b9b      	ldrh	r3, [r3, #28]
 800bf20:	3314      	adds	r3, #20
 800bf22:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800bf24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf26:	685b      	ldr	r3, [r3, #4]
 800bf28:	685b      	ldr	r3, [r3, #4]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800bf2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf30:	685b      	ldr	r3, [r3, #4]
 800bf32:	685b      	ldr	r3, [r3, #4]
 800bf34:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800bf36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf38:	3308      	adds	r3, #8
 800bf3a:	2214      	movs	r2, #20
 800bf3c:	4619      	mov	r1, r3
 800bf3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bf40:	f00b fb0f 	bl	8017562 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800bf44:	8a3b      	ldrh	r3, [r7, #16]
 800bf46:	4618      	mov	r0, r3
 800bf48:	f7fc fe68 	bl	8008c1c <lwip_htons>
 800bf4c:	4603      	mov	r3, r0
 800bf4e:	461a      	mov	r2, r3
 800bf50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf52:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800bf54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf56:	2200      	movs	r2, #0
 800bf58:	719a      	strb	r2, [r3, #6]
 800bf5a:	2200      	movs	r2, #0
 800bf5c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800bf5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf60:	2200      	movs	r2, #0
 800bf62:	729a      	strb	r2, [r3, #10]
 800bf64:	2200      	movs	r2, #0
 800bf66:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800bf68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf6a:	685b      	ldr	r3, [r3, #4]
 800bf6c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800bf6e:	e00d      	b.n	800bf8c <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800bf70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf72:	685b      	ldr	r3, [r3, #4]
 800bf74:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800bf76:	2114      	movs	r1, #20
 800bf78:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800bf7a:	f001 fcf7 	bl	800d96c <pbuf_remove_header>
      pbuf_cat(p, r);
 800bf7e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800bf80:	6878      	ldr	r0, [r7, #4]
 800bf82:	f001 fe79 	bl	800dc78 <pbuf_cat>
      r = iprh->next_pbuf;
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800bf8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d1ee      	bne.n	800bf70 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800bf92:	4b33      	ldr	r3, [pc, #204]	; (800c060 <ip4_reass+0x308>)
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bf98:	429a      	cmp	r2, r3
 800bf9a:	d102      	bne.n	800bfa2 <ip4_reass+0x24a>
      ipr_prev = NULL;
 800bf9c:	2300      	movs	r3, #0
 800bf9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bfa0:	e010      	b.n	800bfc4 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800bfa2:	4b2f      	ldr	r3, [pc, #188]	; (800c060 <ip4_reass+0x308>)
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bfa8:	e007      	b.n	800bfba <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800bfaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfac:	681a      	ldr	r2, [r3, #0]
 800bfae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfb0:	429a      	cmp	r2, r3
 800bfb2:	d006      	beq.n	800bfc2 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800bfb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bfba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d1f4      	bne.n	800bfaa <ip4_reass+0x252>
 800bfc0:	e000      	b.n	800bfc4 <ip4_reass+0x26c>
          break;
 800bfc2:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800bfc4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bfc6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bfc8:	f7ff fd2e 	bl	800ba28 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800bfcc:	6878      	ldr	r0, [r7, #4]
 800bfce:	f001 fe13 	bl	800dbf8 <pbuf_clen>
 800bfd2:	4603      	mov	r3, r0
 800bfd4:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800bfd6:	4b21      	ldr	r3, [pc, #132]	; (800c05c <ip4_reass+0x304>)
 800bfd8:	881b      	ldrh	r3, [r3, #0]
 800bfda:	8c3a      	ldrh	r2, [r7, #32]
 800bfdc:	429a      	cmp	r2, r3
 800bfde:	d906      	bls.n	800bfee <ip4_reass+0x296>
 800bfe0:	4b20      	ldr	r3, [pc, #128]	; (800c064 <ip4_reass+0x30c>)
 800bfe2:	f240 229b 	movw	r2, #667	; 0x29b
 800bfe6:	4920      	ldr	r1, [pc, #128]	; (800c068 <ip4_reass+0x310>)
 800bfe8:	4820      	ldr	r0, [pc, #128]	; (800c06c <ip4_reass+0x314>)
 800bfea:	f00b fb93 	bl	8017714 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800bfee:	4b1b      	ldr	r3, [pc, #108]	; (800c05c <ip4_reass+0x304>)
 800bff0:	881a      	ldrh	r2, [r3, #0]
 800bff2:	8c3b      	ldrh	r3, [r7, #32]
 800bff4:	1ad3      	subs	r3, r2, r3
 800bff6:	b29a      	uxth	r2, r3
 800bff8:	4b18      	ldr	r3, [pc, #96]	; (800c05c <ip4_reass+0x304>)
 800bffa:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	e028      	b.n	800c052 <ip4_reass+0x2fa>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800c000:	2300      	movs	r3, #0
 800c002:	e026      	b.n	800c052 <ip4_reass+0x2fa>
    goto nullreturn_ipr;
 800c004:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800c006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d106      	bne.n	800c01a <ip4_reass+0x2c2>
 800c00c:	4b15      	ldr	r3, [pc, #84]	; (800c064 <ip4_reass+0x30c>)
 800c00e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800c012:	4917      	ldr	r1, [pc, #92]	; (800c070 <ip4_reass+0x318>)
 800c014:	4815      	ldr	r0, [pc, #84]	; (800c06c <ip4_reass+0x314>)
 800c016:	f00b fb7d 	bl	8017714 <iprintf>
  if (ipr->p == NULL) {
 800c01a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c01c:	685b      	ldr	r3, [r3, #4]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d113      	bne.n	800c04a <ip4_reass+0x2f2>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800c022:	4b0f      	ldr	r3, [pc, #60]	; (800c060 <ip4_reass+0x308>)
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c028:	429a      	cmp	r2, r3
 800c02a:	d006      	beq.n	800c03a <ip4_reass+0x2e2>
 800c02c:	4b0d      	ldr	r3, [pc, #52]	; (800c064 <ip4_reass+0x30c>)
 800c02e:	f240 22ab 	movw	r2, #683	; 0x2ab
 800c032:	4910      	ldr	r1, [pc, #64]	; (800c074 <ip4_reass+0x31c>)
 800c034:	480d      	ldr	r0, [pc, #52]	; (800c06c <ip4_reass+0x314>)
 800c036:	f00b fb6d 	bl	8017714 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800c03a:	2100      	movs	r1, #0
 800c03c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c03e:	f7ff fcf3 	bl	800ba28 <ip_reass_dequeue_datagram>
 800c042:	e002      	b.n	800c04a <ip4_reass+0x2f2>
    goto nullreturn;
 800c044:	bf00      	nop
 800c046:	e000      	b.n	800c04a <ip4_reass+0x2f2>
    goto nullreturn;
 800c048:	bf00      	nop
  }

nullreturn:
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800c04a:	6878      	ldr	r0, [r7, #4]
 800c04c:	f001 fd46 	bl	800dadc <pbuf_free>
  return NULL;
 800c050:	2300      	movs	r3, #0
}
 800c052:	4618      	mov	r0, r3
 800c054:	3738      	adds	r7, #56	; 0x38
 800c056:	46bd      	mov	sp, r7
 800c058:	bd80      	pop	{r7, pc}
 800c05a:	bf00      	nop
 800c05c:	200044f4 	.word	0x200044f4
 800c060:	200044f0 	.word	0x200044f0
 800c064:	080191ec 	.word	0x080191ec
 800c068:	0801935c 	.word	0x0801935c
 800c06c:	08019234 	.word	0x08019234
 800c070:	08019378 	.word	0x08019378
 800c074:	08019384 	.word	0x08019384

0800c078 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800c078:	b580      	push	{r7, lr}
 800c07a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800c07c:	2005      	movs	r0, #5
 800c07e:	f000 fe07 	bl	800cc90 <memp_malloc>
 800c082:	4603      	mov	r3, r0
}
 800c084:	4618      	mov	r0, r3
 800c086:	bd80      	pop	{r7, pc}

0800c088 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800c088:	b580      	push	{r7, lr}
 800c08a:	b082      	sub	sp, #8
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	2b00      	cmp	r3, #0
 800c094:	d106      	bne.n	800c0a4 <ip_frag_free_pbuf_custom_ref+0x1c>
 800c096:	4b07      	ldr	r3, [pc, #28]	; (800c0b4 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800c098:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800c09c:	4906      	ldr	r1, [pc, #24]	; (800c0b8 <ip_frag_free_pbuf_custom_ref+0x30>)
 800c09e:	4807      	ldr	r0, [pc, #28]	; (800c0bc <ip_frag_free_pbuf_custom_ref+0x34>)
 800c0a0:	f00b fb38 	bl	8017714 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800c0a4:	6879      	ldr	r1, [r7, #4]
 800c0a6:	2005      	movs	r0, #5
 800c0a8:	f000 fe44 	bl	800cd34 <memp_free>
}
 800c0ac:	bf00      	nop
 800c0ae:	3708      	adds	r7, #8
 800c0b0:	46bd      	mov	sp, r7
 800c0b2:	bd80      	pop	{r7, pc}
 800c0b4:	080191ec 	.word	0x080191ec
 800c0b8:	080193a4 	.word	0x080193a4
 800c0bc:	08019234 	.word	0x08019234

0800c0c0 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800c0c0:	b580      	push	{r7, lr}
 800c0c2:	b084      	sub	sp, #16
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d106      	bne.n	800c0e0 <ipfrag_free_pbuf_custom+0x20>
 800c0d2:	4b11      	ldr	r3, [pc, #68]	; (800c118 <ipfrag_free_pbuf_custom+0x58>)
 800c0d4:	f240 22ce 	movw	r2, #718	; 0x2ce
 800c0d8:	4910      	ldr	r1, [pc, #64]	; (800c11c <ipfrag_free_pbuf_custom+0x5c>)
 800c0da:	4811      	ldr	r0, [pc, #68]	; (800c120 <ipfrag_free_pbuf_custom+0x60>)
 800c0dc:	f00b fb1a 	bl	8017714 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800c0e0:	68fa      	ldr	r2, [r7, #12]
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	429a      	cmp	r2, r3
 800c0e6:	d006      	beq.n	800c0f6 <ipfrag_free_pbuf_custom+0x36>
 800c0e8:	4b0b      	ldr	r3, [pc, #44]	; (800c118 <ipfrag_free_pbuf_custom+0x58>)
 800c0ea:	f240 22cf 	movw	r2, #719	; 0x2cf
 800c0ee:	490d      	ldr	r1, [pc, #52]	; (800c124 <ipfrag_free_pbuf_custom+0x64>)
 800c0f0:	480b      	ldr	r0, [pc, #44]	; (800c120 <ipfrag_free_pbuf_custom+0x60>)
 800c0f2:	f00b fb0f 	bl	8017714 <iprintf>
  if (pcr->original != NULL) {
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	695b      	ldr	r3, [r3, #20]
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d004      	beq.n	800c108 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	695b      	ldr	r3, [r3, #20]
 800c102:	4618      	mov	r0, r3
 800c104:	f001 fcea 	bl	800dadc <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800c108:	68f8      	ldr	r0, [r7, #12]
 800c10a:	f7ff ffbd 	bl	800c088 <ip_frag_free_pbuf_custom_ref>
}
 800c10e:	bf00      	nop
 800c110:	3710      	adds	r7, #16
 800c112:	46bd      	mov	sp, r7
 800c114:	bd80      	pop	{r7, pc}
 800c116:	bf00      	nop
 800c118:	080191ec 	.word	0x080191ec
 800c11c:	080193b0 	.word	0x080193b0
 800c120:	08019234 	.word	0x08019234
 800c124:	080193bc 	.word	0x080193bc

0800c128 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800c128:	b580      	push	{r7, lr}
 800c12a:	b094      	sub	sp, #80	; 0x50
 800c12c:	af02      	add	r7, sp, #8
 800c12e:	60f8      	str	r0, [r7, #12]
 800c130:	60b9      	str	r1, [r7, #8]
 800c132:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800c134:	2300      	movs	r3, #0
 800c136:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800c13a:	68bb      	ldr	r3, [r7, #8]
 800c13c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c13e:	3b14      	subs	r3, #20
 800c140:	2b00      	cmp	r3, #0
 800c142:	da00      	bge.n	800c146 <ip4_frag+0x1e>
 800c144:	3307      	adds	r3, #7
 800c146:	10db      	asrs	r3, r3, #3
 800c148:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800c14a:	2314      	movs	r3, #20
 800c14c:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	685b      	ldr	r3, [r3, #4]
 800c152:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800c154:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c156:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800c158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c15a:	781b      	ldrb	r3, [r3, #0]
 800c15c:	f003 030f 	and.w	r3, r3, #15
 800c160:	b2db      	uxtb	r3, r3
 800c162:	009b      	lsls	r3, r3, #2
 800c164:	b2db      	uxtb	r3, r3
 800c166:	2b14      	cmp	r3, #20
 800c168:	d002      	beq.n	800c170 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800c16a:	f06f 0305 	mvn.w	r3, #5
 800c16e:	e10f      	b.n	800c390 <ip4_frag+0x268>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	895b      	ldrh	r3, [r3, #10]
 800c174:	2b13      	cmp	r3, #19
 800c176:	d809      	bhi.n	800c18c <ip4_frag+0x64>
 800c178:	4b87      	ldr	r3, [pc, #540]	; (800c398 <ip4_frag+0x270>)
 800c17a:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800c17e:	4987      	ldr	r1, [pc, #540]	; (800c39c <ip4_frag+0x274>)
 800c180:	4887      	ldr	r0, [pc, #540]	; (800c3a0 <ip4_frag+0x278>)
 800c182:	f00b fac7 	bl	8017714 <iprintf>
 800c186:	f06f 0305 	mvn.w	r3, #5
 800c18a:	e101      	b.n	800c390 <ip4_frag+0x268>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800c18c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c18e:	88db      	ldrh	r3, [r3, #6]
 800c190:	b29b      	uxth	r3, r3
 800c192:	4618      	mov	r0, r3
 800c194:	f7fc fd42 	bl	8008c1c <lwip_htons>
 800c198:	4603      	mov	r3, r0
 800c19a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800c19c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c19e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c1a2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800c1a6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c1a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c1ac:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	891b      	ldrh	r3, [r3, #8]
 800c1b2:	3b14      	subs	r3, #20
 800c1b4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800c1b8:	e0e0      	b.n	800c37c <ip4_frag+0x254>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800c1ba:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800c1bc:	00db      	lsls	r3, r3, #3
 800c1be:	b29a      	uxth	r2, r3
 800c1c0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c1c4:	4293      	cmp	r3, r2
 800c1c6:	bf28      	it	cs
 800c1c8:	4613      	movcs	r3, r2
 800c1ca:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800c1cc:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c1d0:	2114      	movs	r1, #20
 800c1d2:	200e      	movs	r0, #14
 800c1d4:	f001 f96e 	bl	800d4b4 <pbuf_alloc>
 800c1d8:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800c1da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	f000 80d4 	beq.w	800c38a <ip4_frag+0x262>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800c1e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1e4:	895b      	ldrh	r3, [r3, #10]
 800c1e6:	2b13      	cmp	r3, #19
 800c1e8:	d806      	bhi.n	800c1f8 <ip4_frag+0xd0>
 800c1ea:	4b6b      	ldr	r3, [pc, #428]	; (800c398 <ip4_frag+0x270>)
 800c1ec:	f240 3225 	movw	r2, #805	; 0x325
 800c1f0:	496c      	ldr	r1, [pc, #432]	; (800c3a4 <ip4_frag+0x27c>)
 800c1f2:	486b      	ldr	r0, [pc, #428]	; (800c3a0 <ip4_frag+0x278>)
 800c1f4:	f00b fa8e 	bl	8017714 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800c1f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1fa:	685b      	ldr	r3, [r3, #4]
 800c1fc:	2214      	movs	r2, #20
 800c1fe:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c200:	4618      	mov	r0, r3
 800c202:	f00b f9ae 	bl	8017562 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800c206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c208:	685b      	ldr	r3, [r3, #4]
 800c20a:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800c20c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800c20e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800c212:	e064      	b.n	800c2de <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	895a      	ldrh	r2, [r3, #10]
 800c218:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c21a:	1ad3      	subs	r3, r2, r3
 800c21c:	847b      	strh	r3, [r7, #34]	; 0x22
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	895b      	ldrh	r3, [r3, #10]
 800c222:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800c224:	429a      	cmp	r2, r3
 800c226:	d906      	bls.n	800c236 <ip4_frag+0x10e>
 800c228:	4b5b      	ldr	r3, [pc, #364]	; (800c398 <ip4_frag+0x270>)
 800c22a:	f240 322d 	movw	r2, #813	; 0x32d
 800c22e:	495e      	ldr	r1, [pc, #376]	; (800c3a8 <ip4_frag+0x280>)
 800c230:	485b      	ldr	r0, [pc, #364]	; (800c3a0 <ip4_frag+0x278>)
 800c232:	f00b fa6f 	bl	8017714 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800c236:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c238:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800c23c:	4293      	cmp	r3, r2
 800c23e:	bf28      	it	cs
 800c240:	4613      	movcs	r3, r2
 800c242:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800c246:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d105      	bne.n	800c25a <ip4_frag+0x132>
        poff = 0;
 800c24e:	2300      	movs	r3, #0
 800c250:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	60fb      	str	r3, [r7, #12]
        continue;
 800c258:	e041      	b.n	800c2de <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800c25a:	f7ff ff0d 	bl	800c078 <ip_frag_alloc_pbuf_custom_ref>
 800c25e:	61f8      	str	r0, [r7, #28]
      if (pcr == NULL) {
 800c260:	69fb      	ldr	r3, [r7, #28]
 800c262:	2b00      	cmp	r3, #0
 800c264:	d103      	bne.n	800c26e <ip4_frag+0x146>
        pbuf_free(rambuf);
 800c266:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c268:	f001 fc38 	bl	800dadc <pbuf_free>
        goto memerr;
 800c26c:	e08e      	b.n	800c38c <ip4_frag+0x264>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800c26e:	69f8      	ldr	r0, [r7, #28]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800c274:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c276:	4413      	add	r3, r2
 800c278:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800c27c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800c280:	9201      	str	r2, [sp, #4]
 800c282:	9300      	str	r3, [sp, #0]
 800c284:	4603      	mov	r3, r0
 800c286:	2241      	movs	r2, #65	; 0x41
 800c288:	2000      	movs	r0, #0
 800c28a:	f001 fa39 	bl	800d700 <pbuf_alloced_custom>
 800c28e:	61b8      	str	r0, [r7, #24]
      if (newpbuf == NULL) {
 800c290:	69bb      	ldr	r3, [r7, #24]
 800c292:	2b00      	cmp	r3, #0
 800c294:	d106      	bne.n	800c2a4 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800c296:	69f8      	ldr	r0, [r7, #28]
 800c298:	f7ff fef6 	bl	800c088 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800c29c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c29e:	f001 fc1d 	bl	800dadc <pbuf_free>
        goto memerr;
 800c2a2:	e073      	b.n	800c38c <ip4_frag+0x264>
      }
      pbuf_ref(p);
 800c2a4:	68f8      	ldr	r0, [r7, #12]
 800c2a6:	f001 fcbf 	bl	800dc28 <pbuf_ref>
      pcr->original = p;
 800c2aa:	69fb      	ldr	r3, [r7, #28]
 800c2ac:	68fa      	ldr	r2, [r7, #12]
 800c2ae:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800c2b0:	69fb      	ldr	r3, [r7, #28]
 800c2b2:	4a3e      	ldr	r2, [pc, #248]	; (800c3ac <ip4_frag+0x284>)
 800c2b4:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800c2b6:	69b9      	ldr	r1, [r7, #24]
 800c2b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c2ba:	f001 fcdd 	bl	800dc78 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800c2be:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800c2c2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800c2c6:	1ad3      	subs	r3, r2, r3
 800c2c8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800c2cc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d004      	beq.n	800c2de <ip4_frag+0x1b6>
        poff = 0;
 800c2d4:	2300      	movs	r3, #0
 800c2d6:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800c2de:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d196      	bne.n	800c214 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800c2e6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800c2e8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800c2ec:	4413      	add	r3, r2
 800c2ee:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800c2f0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c2f4:	68bb      	ldr	r3, [r7, #8]
 800c2f6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c2f8:	3b14      	subs	r3, #20
 800c2fa:	429a      	cmp	r2, r3
 800c2fc:	bfd4      	ite	le
 800c2fe:	2301      	movle	r3, #1
 800c300:	2300      	movgt	r3, #0
 800c302:	b2db      	uxtb	r3, r3
 800c304:	617b      	str	r3, [r7, #20]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800c306:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800c30a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c30e:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800c310:	697b      	ldr	r3, [r7, #20]
 800c312:	2b00      	cmp	r3, #0
 800c314:	d002      	beq.n	800c31c <ip4_frag+0x1f4>
 800c316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d003      	beq.n	800c324 <ip4_frag+0x1fc>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800c31c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c31e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800c322:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800c324:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c326:	4618      	mov	r0, r3
 800c328:	f7fc fc78 	bl	8008c1c <lwip_htons>
 800c32c:	4603      	mov	r3, r0
 800c32e:	461a      	mov	r2, r3
 800c330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c332:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800c334:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800c336:	3314      	adds	r3, #20
 800c338:	b29b      	uxth	r3, r3
 800c33a:	4618      	mov	r0, r3
 800c33c:	f7fc fc6e 	bl	8008c1c <lwip_htons>
 800c340:	4603      	mov	r3, r0
 800c342:	461a      	mov	r2, r3
 800c344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c346:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800c348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c34a:	2200      	movs	r2, #0
 800c34c:	729a      	strb	r2, [r3, #10]
 800c34e:	2200      	movs	r2, #0
 800c350:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800c352:	68bb      	ldr	r3, [r7, #8]
 800c354:	695b      	ldr	r3, [r3, #20]
 800c356:	687a      	ldr	r2, [r7, #4]
 800c358:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c35a:	68b8      	ldr	r0, [r7, #8]
 800c35c:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800c35e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c360:	f001 fbbc 	bl	800dadc <pbuf_free>
    left = (u16_t)(left - fragsize);
 800c364:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c368:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800c36a:	1ad3      	subs	r3, r2, r3
 800c36c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800c370:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800c374:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800c376:	4413      	add	r3, r2
 800c378:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800c37c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c380:	2b00      	cmp	r3, #0
 800c382:	f47f af1a 	bne.w	800c1ba <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800c386:	2300      	movs	r3, #0
 800c388:	e002      	b.n	800c390 <ip4_frag+0x268>
      goto memerr;
 800c38a:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800c38c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c390:	4618      	mov	r0, r3
 800c392:	3748      	adds	r7, #72	; 0x48
 800c394:	46bd      	mov	sp, r7
 800c396:	bd80      	pop	{r7, pc}
 800c398:	080191ec 	.word	0x080191ec
 800c39c:	080193c8 	.word	0x080193c8
 800c3a0:	08019234 	.word	0x08019234
 800c3a4:	080193e4 	.word	0x080193e4
 800c3a8:	08019404 	.word	0x08019404
 800c3ac:	0800c0c1 	.word	0x0800c0c1

0800c3b0 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800c3b0:	b480      	push	{r7}
 800c3b2:	b083      	sub	sp, #12
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	4603      	mov	r3, r0
 800c3b8:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800c3ba:	4b05      	ldr	r3, [pc, #20]	; (800c3d0 <ptr_to_mem+0x20>)
 800c3bc:	681a      	ldr	r2, [r3, #0]
 800c3be:	88fb      	ldrh	r3, [r7, #6]
 800c3c0:	4413      	add	r3, r2
}
 800c3c2:	4618      	mov	r0, r3
 800c3c4:	370c      	adds	r7, #12
 800c3c6:	46bd      	mov	sp, r7
 800c3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3cc:	4770      	bx	lr
 800c3ce:	bf00      	nop
 800c3d0:	200044f8 	.word	0x200044f8

0800c3d4 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800c3d4:	b480      	push	{r7}
 800c3d6:	b083      	sub	sp, #12
 800c3d8:	af00      	add	r7, sp, #0
 800c3da:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	4a05      	ldr	r2, [pc, #20]	; (800c3f4 <mem_to_ptr+0x20>)
 800c3e0:	6812      	ldr	r2, [r2, #0]
 800c3e2:	1a9b      	subs	r3, r3, r2
 800c3e4:	b29b      	uxth	r3, r3
}
 800c3e6:	4618      	mov	r0, r3
 800c3e8:	370c      	adds	r7, #12
 800c3ea:	46bd      	mov	sp, r7
 800c3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f0:	4770      	bx	lr
 800c3f2:	bf00      	nop
 800c3f4:	200044f8 	.word	0x200044f8

0800c3f8 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800c3f8:	b590      	push	{r4, r7, lr}
 800c3fa:	b085      	sub	sp, #20
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800c400:	4b45      	ldr	r3, [pc, #276]	; (800c518 <plug_holes+0x120>)
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	687a      	ldr	r2, [r7, #4]
 800c406:	429a      	cmp	r2, r3
 800c408:	d206      	bcs.n	800c418 <plug_holes+0x20>
 800c40a:	4b44      	ldr	r3, [pc, #272]	; (800c51c <plug_holes+0x124>)
 800c40c:	f240 12df 	movw	r2, #479	; 0x1df
 800c410:	4943      	ldr	r1, [pc, #268]	; (800c520 <plug_holes+0x128>)
 800c412:	4844      	ldr	r0, [pc, #272]	; (800c524 <plug_holes+0x12c>)
 800c414:	f00b f97e 	bl	8017714 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800c418:	4b43      	ldr	r3, [pc, #268]	; (800c528 <plug_holes+0x130>)
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	687a      	ldr	r2, [r7, #4]
 800c41e:	429a      	cmp	r2, r3
 800c420:	d306      	bcc.n	800c430 <plug_holes+0x38>
 800c422:	4b3e      	ldr	r3, [pc, #248]	; (800c51c <plug_holes+0x124>)
 800c424:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800c428:	4940      	ldr	r1, [pc, #256]	; (800c52c <plug_holes+0x134>)
 800c42a:	483e      	ldr	r0, [pc, #248]	; (800c524 <plug_holes+0x12c>)
 800c42c:	f00b f972 	bl	8017714 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	791b      	ldrb	r3, [r3, #4]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d006      	beq.n	800c446 <plug_holes+0x4e>
 800c438:	4b38      	ldr	r3, [pc, #224]	; (800c51c <plug_holes+0x124>)
 800c43a:	f240 12e1 	movw	r2, #481	; 0x1e1
 800c43e:	493c      	ldr	r1, [pc, #240]	; (800c530 <plug_holes+0x138>)
 800c440:	4838      	ldr	r0, [pc, #224]	; (800c524 <plug_holes+0x12c>)
 800c442:	f00b f967 	bl	8017714 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	881b      	ldrh	r3, [r3, #0]
 800c44a:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800c44e:	d906      	bls.n	800c45e <plug_holes+0x66>
 800c450:	4b32      	ldr	r3, [pc, #200]	; (800c51c <plug_holes+0x124>)
 800c452:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800c456:	4937      	ldr	r1, [pc, #220]	; (800c534 <plug_holes+0x13c>)
 800c458:	4832      	ldr	r0, [pc, #200]	; (800c524 <plug_holes+0x12c>)
 800c45a:	f00b f95b 	bl	8017714 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	881b      	ldrh	r3, [r3, #0]
 800c462:	4618      	mov	r0, r3
 800c464:	f7ff ffa4 	bl	800c3b0 <ptr_to_mem>
 800c468:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800c46a:	687a      	ldr	r2, [r7, #4]
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	429a      	cmp	r2, r3
 800c470:	d024      	beq.n	800c4bc <plug_holes+0xc4>
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	791b      	ldrb	r3, [r3, #4]
 800c476:	2b00      	cmp	r3, #0
 800c478:	d120      	bne.n	800c4bc <plug_holes+0xc4>
 800c47a:	4b2b      	ldr	r3, [pc, #172]	; (800c528 <plug_holes+0x130>)
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	68fa      	ldr	r2, [r7, #12]
 800c480:	429a      	cmp	r2, r3
 800c482:	d01b      	beq.n	800c4bc <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800c484:	4b2c      	ldr	r3, [pc, #176]	; (800c538 <plug_holes+0x140>)
 800c486:	681a      	ldr	r2, [r3, #0]
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	429a      	cmp	r2, r3
 800c48c:	d102      	bne.n	800c494 <plug_holes+0x9c>
      lfree = mem;
 800c48e:	4a2a      	ldr	r2, [pc, #168]	; (800c538 <plug_holes+0x140>)
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	881a      	ldrh	r2, [r3, #0]
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	881b      	ldrh	r3, [r3, #0]
 800c4a0:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800c4a4:	d00a      	beq.n	800c4bc <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	881b      	ldrh	r3, [r3, #0]
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	f7ff ff80 	bl	800c3b0 <ptr_to_mem>
 800c4b0:	4604      	mov	r4, r0
 800c4b2:	6878      	ldr	r0, [r7, #4]
 800c4b4:	f7ff ff8e 	bl	800c3d4 <mem_to_ptr>
 800c4b8:	4603      	mov	r3, r0
 800c4ba:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	885b      	ldrh	r3, [r3, #2]
 800c4c0:	4618      	mov	r0, r3
 800c4c2:	f7ff ff75 	bl	800c3b0 <ptr_to_mem>
 800c4c6:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800c4c8:	68ba      	ldr	r2, [r7, #8]
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	429a      	cmp	r2, r3
 800c4ce:	d01f      	beq.n	800c510 <plug_holes+0x118>
 800c4d0:	68bb      	ldr	r3, [r7, #8]
 800c4d2:	791b      	ldrb	r3, [r3, #4]
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d11b      	bne.n	800c510 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800c4d8:	4b17      	ldr	r3, [pc, #92]	; (800c538 <plug_holes+0x140>)
 800c4da:	681a      	ldr	r2, [r3, #0]
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	429a      	cmp	r2, r3
 800c4e0:	d102      	bne.n	800c4e8 <plug_holes+0xf0>
      lfree = pmem;
 800c4e2:	4a15      	ldr	r2, [pc, #84]	; (800c538 <plug_holes+0x140>)
 800c4e4:	68bb      	ldr	r3, [r7, #8]
 800c4e6:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	881a      	ldrh	r2, [r3, #0]
 800c4ec:	68bb      	ldr	r3, [r7, #8]
 800c4ee:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	881b      	ldrh	r3, [r3, #0]
 800c4f4:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800c4f8:	d00a      	beq.n	800c510 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	881b      	ldrh	r3, [r3, #0]
 800c4fe:	4618      	mov	r0, r3
 800c500:	f7ff ff56 	bl	800c3b0 <ptr_to_mem>
 800c504:	4604      	mov	r4, r0
 800c506:	68b8      	ldr	r0, [r7, #8]
 800c508:	f7ff ff64 	bl	800c3d4 <mem_to_ptr>
 800c50c:	4603      	mov	r3, r0
 800c50e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800c510:	bf00      	nop
 800c512:	3714      	adds	r7, #20
 800c514:	46bd      	mov	sp, r7
 800c516:	bd90      	pop	{r4, r7, pc}
 800c518:	200044f8 	.word	0x200044f8
 800c51c:	08019414 	.word	0x08019414
 800c520:	08019444 	.word	0x08019444
 800c524:	0801945c 	.word	0x0801945c
 800c528:	200044fc 	.word	0x200044fc
 800c52c:	08019484 	.word	0x08019484
 800c530:	080194a0 	.word	0x080194a0
 800c534:	080194bc 	.word	0x080194bc
 800c538:	20004504 	.word	0x20004504

0800c53c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800c53c:	b580      	push	{r7, lr}
 800c53e:	b082      	sub	sp, #8
 800c540:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800c542:	4b1f      	ldr	r3, [pc, #124]	; (800c5c0 <mem_init+0x84>)
 800c544:	3303      	adds	r3, #3
 800c546:	f023 0303 	bic.w	r3, r3, #3
 800c54a:	461a      	mov	r2, r3
 800c54c:	4b1d      	ldr	r3, [pc, #116]	; (800c5c4 <mem_init+0x88>)
 800c54e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800c550:	4b1c      	ldr	r3, [pc, #112]	; (800c5c4 <mem_init+0x88>)
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 800c55c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	2200      	movs	r2, #0
 800c562:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	2200      	movs	r2, #0
 800c568:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800c56a:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 800c56e:	f7ff ff1f 	bl	800c3b0 <ptr_to_mem>
 800c572:	4602      	mov	r2, r0
 800c574:	4b14      	ldr	r3, [pc, #80]	; (800c5c8 <mem_init+0x8c>)
 800c576:	601a      	str	r2, [r3, #0]
  ram_end->used = 1;
 800c578:	4b13      	ldr	r3, [pc, #76]	; (800c5c8 <mem_init+0x8c>)
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	2201      	movs	r2, #1
 800c57e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800c580:	4b11      	ldr	r3, [pc, #68]	; (800c5c8 <mem_init+0x8c>)
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 800c588:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800c58a:	4b0f      	ldr	r3, [pc, #60]	; (800c5c8 <mem_init+0x8c>)
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 800c592:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800c594:	4b0b      	ldr	r3, [pc, #44]	; (800c5c4 <mem_init+0x88>)
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	4a0c      	ldr	r2, [pc, #48]	; (800c5cc <mem_init+0x90>)
 800c59a:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800c59c:	480c      	ldr	r0, [pc, #48]	; (800c5d0 <mem_init+0x94>)
 800c59e:	f008 fec7 	bl	8015330 <sys_mutex_new>
 800c5a2:	4603      	mov	r3, r0
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d006      	beq.n	800c5b6 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800c5a8:	4b0a      	ldr	r3, [pc, #40]	; (800c5d4 <mem_init+0x98>)
 800c5aa:	f240 221f 	movw	r2, #543	; 0x21f
 800c5ae:	490a      	ldr	r1, [pc, #40]	; (800c5d8 <mem_init+0x9c>)
 800c5b0:	480a      	ldr	r0, [pc, #40]	; (800c5dc <mem_init+0xa0>)
 800c5b2:	f00b f8af 	bl	8017714 <iprintf>
  }
}
 800c5b6:	bf00      	nop
 800c5b8:	3708      	adds	r7, #8
 800c5ba:	46bd      	mov	sp, r7
 800c5bc:	bd80      	pop	{r7, pc}
 800c5be:	bf00      	nop
 800c5c0:	2000482c 	.word	0x2000482c
 800c5c4:	200044f8 	.word	0x200044f8
 800c5c8:	200044fc 	.word	0x200044fc
 800c5cc:	20004504 	.word	0x20004504
 800c5d0:	20004500 	.word	0x20004500
 800c5d4:	08019414 	.word	0x08019414
 800c5d8:	080194e8 	.word	0x080194e8
 800c5dc:	0801945c 	.word	0x0801945c

0800c5e0 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800c5e0:	b580      	push	{r7, lr}
 800c5e2:	b086      	sub	sp, #24
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800c5e8:	6878      	ldr	r0, [r7, #4]
 800c5ea:	f7ff fef3 	bl	800c3d4 <mem_to_ptr>
 800c5ee:	4603      	mov	r3, r0
 800c5f0:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	881b      	ldrh	r3, [r3, #0]
 800c5f6:	4618      	mov	r0, r3
 800c5f8:	f7ff feda 	bl	800c3b0 <ptr_to_mem>
 800c5fc:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	885b      	ldrh	r3, [r3, #2]
 800c602:	4618      	mov	r0, r3
 800c604:	f7ff fed4 	bl	800c3b0 <ptr_to_mem>
 800c608:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	881b      	ldrh	r3, [r3, #0]
 800c60e:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800c612:	d818      	bhi.n	800c646 <mem_link_valid+0x66>
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	885b      	ldrh	r3, [r3, #2]
 800c618:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800c61c:	d813      	bhi.n	800c646 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800c622:	8afa      	ldrh	r2, [r7, #22]
 800c624:	429a      	cmp	r2, r3
 800c626:	d004      	beq.n	800c632 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	881b      	ldrh	r3, [r3, #0]
 800c62c:	8afa      	ldrh	r2, [r7, #22]
 800c62e:	429a      	cmp	r2, r3
 800c630:	d109      	bne.n	800c646 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800c632:	4b08      	ldr	r3, [pc, #32]	; (800c654 <mem_link_valid+0x74>)
 800c634:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c636:	693a      	ldr	r2, [r7, #16]
 800c638:	429a      	cmp	r2, r3
 800c63a:	d006      	beq.n	800c64a <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800c63c:	693b      	ldr	r3, [r7, #16]
 800c63e:	885b      	ldrh	r3, [r3, #2]
 800c640:	8afa      	ldrh	r2, [r7, #22]
 800c642:	429a      	cmp	r2, r3
 800c644:	d001      	beq.n	800c64a <mem_link_valid+0x6a>
    return 0;
 800c646:	2300      	movs	r3, #0
 800c648:	e000      	b.n	800c64c <mem_link_valid+0x6c>
  }
  return 1;
 800c64a:	2301      	movs	r3, #1
}
 800c64c:	4618      	mov	r0, r3
 800c64e:	3718      	adds	r7, #24
 800c650:	46bd      	mov	sp, r7
 800c652:	bd80      	pop	{r7, pc}
 800c654:	200044fc 	.word	0x200044fc

0800c658 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800c658:	b580      	push	{r7, lr}
 800c65a:	b088      	sub	sp, #32
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	2b00      	cmp	r3, #0
 800c664:	d070      	beq.n	800c748 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	f003 0303 	and.w	r3, r3, #3
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d00d      	beq.n	800c68c <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800c670:	4b37      	ldr	r3, [pc, #220]	; (800c750 <mem_free+0xf8>)
 800c672:	f240 2273 	movw	r2, #627	; 0x273
 800c676:	4937      	ldr	r1, [pc, #220]	; (800c754 <mem_free+0xfc>)
 800c678:	4837      	ldr	r0, [pc, #220]	; (800c758 <mem_free+0x100>)
 800c67a:	f00b f84b 	bl	8017714 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c67e:	f008 feb5 	bl	80153ec <sys_arch_protect>
 800c682:	61f8      	str	r0, [r7, #28]
 800c684:	69f8      	ldr	r0, [r7, #28]
 800c686:	f008 febf 	bl	8015408 <sys_arch_unprotect>
    return;
 800c68a:	e05e      	b.n	800c74a <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	3b08      	subs	r3, #8
 800c690:	61bb      	str	r3, [r7, #24]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800c692:	4b32      	ldr	r3, [pc, #200]	; (800c75c <mem_free+0x104>)
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	69ba      	ldr	r2, [r7, #24]
 800c698:	429a      	cmp	r2, r3
 800c69a:	d306      	bcc.n	800c6aa <mem_free+0x52>
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	f103 020c 	add.w	r2, r3, #12
 800c6a2:	4b2f      	ldr	r3, [pc, #188]	; (800c760 <mem_free+0x108>)
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	429a      	cmp	r2, r3
 800c6a8:	d90d      	bls.n	800c6c6 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800c6aa:	4b29      	ldr	r3, [pc, #164]	; (800c750 <mem_free+0xf8>)
 800c6ac:	f240 227f 	movw	r2, #639	; 0x27f
 800c6b0:	492c      	ldr	r1, [pc, #176]	; (800c764 <mem_free+0x10c>)
 800c6b2:	4829      	ldr	r0, [pc, #164]	; (800c758 <mem_free+0x100>)
 800c6b4:	f00b f82e 	bl	8017714 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c6b8:	f008 fe98 	bl	80153ec <sys_arch_protect>
 800c6bc:	60f8      	str	r0, [r7, #12]
 800c6be:	68f8      	ldr	r0, [r7, #12]
 800c6c0:	f008 fea2 	bl	8015408 <sys_arch_unprotect>
    return;
 800c6c4:	e041      	b.n	800c74a <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800c6c6:	4828      	ldr	r0, [pc, #160]	; (800c768 <mem_free+0x110>)
 800c6c8:	f008 fe4e 	bl	8015368 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800c6cc:	69bb      	ldr	r3, [r7, #24]
 800c6ce:	791b      	ldrb	r3, [r3, #4]
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d110      	bne.n	800c6f6 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800c6d4:	4b1e      	ldr	r3, [pc, #120]	; (800c750 <mem_free+0xf8>)
 800c6d6:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800c6da:	4924      	ldr	r1, [pc, #144]	; (800c76c <mem_free+0x114>)
 800c6dc:	481e      	ldr	r0, [pc, #120]	; (800c758 <mem_free+0x100>)
 800c6de:	f00b f819 	bl	8017714 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800c6e2:	4821      	ldr	r0, [pc, #132]	; (800c768 <mem_free+0x110>)
 800c6e4:	f008 fe4f 	bl	8015386 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c6e8:	f008 fe80 	bl	80153ec <sys_arch_protect>
 800c6ec:	6178      	str	r0, [r7, #20]
 800c6ee:	6978      	ldr	r0, [r7, #20]
 800c6f0:	f008 fe8a 	bl	8015408 <sys_arch_unprotect>
    return;
 800c6f4:	e029      	b.n	800c74a <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800c6f6:	69b8      	ldr	r0, [r7, #24]
 800c6f8:	f7ff ff72 	bl	800c5e0 <mem_link_valid>
 800c6fc:	4603      	mov	r3, r0
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d110      	bne.n	800c724 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800c702:	4b13      	ldr	r3, [pc, #76]	; (800c750 <mem_free+0xf8>)
 800c704:	f240 2295 	movw	r2, #661	; 0x295
 800c708:	4919      	ldr	r1, [pc, #100]	; (800c770 <mem_free+0x118>)
 800c70a:	4813      	ldr	r0, [pc, #76]	; (800c758 <mem_free+0x100>)
 800c70c:	f00b f802 	bl	8017714 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800c710:	4815      	ldr	r0, [pc, #84]	; (800c768 <mem_free+0x110>)
 800c712:	f008 fe38 	bl	8015386 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c716:	f008 fe69 	bl	80153ec <sys_arch_protect>
 800c71a:	6138      	str	r0, [r7, #16]
 800c71c:	6938      	ldr	r0, [r7, #16]
 800c71e:	f008 fe73 	bl	8015408 <sys_arch_unprotect>
    return;
 800c722:	e012      	b.n	800c74a <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800c724:	69bb      	ldr	r3, [r7, #24]
 800c726:	2200      	movs	r2, #0
 800c728:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800c72a:	4b12      	ldr	r3, [pc, #72]	; (800c774 <mem_free+0x11c>)
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	69ba      	ldr	r2, [r7, #24]
 800c730:	429a      	cmp	r2, r3
 800c732:	d202      	bcs.n	800c73a <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800c734:	4a0f      	ldr	r2, [pc, #60]	; (800c774 <mem_free+0x11c>)
 800c736:	69bb      	ldr	r3, [r7, #24]
 800c738:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800c73a:	69b8      	ldr	r0, [r7, #24]
 800c73c:	f7ff fe5c 	bl	800c3f8 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800c740:	4809      	ldr	r0, [pc, #36]	; (800c768 <mem_free+0x110>)
 800c742:	f008 fe20 	bl	8015386 <sys_mutex_unlock>
 800c746:	e000      	b.n	800c74a <mem_free+0xf2>
    return;
 800c748:	bf00      	nop
}
 800c74a:	3720      	adds	r7, #32
 800c74c:	46bd      	mov	sp, r7
 800c74e:	bd80      	pop	{r7, pc}
 800c750:	08019414 	.word	0x08019414
 800c754:	08019504 	.word	0x08019504
 800c758:	0801945c 	.word	0x0801945c
 800c75c:	200044f8 	.word	0x200044f8
 800c760:	200044fc 	.word	0x200044fc
 800c764:	08019528 	.word	0x08019528
 800c768:	20004500 	.word	0x20004500
 800c76c:	08019544 	.word	0x08019544
 800c770:	0801956c 	.word	0x0801956c
 800c774:	20004504 	.word	0x20004504

0800c778 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800c778:	b580      	push	{r7, lr}
 800c77a:	b088      	sub	sp, #32
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	6078      	str	r0, [r7, #4]
 800c780:	460b      	mov	r3, r1
 800c782:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800c784:	887b      	ldrh	r3, [r7, #2]
 800c786:	3303      	adds	r3, #3
 800c788:	b29b      	uxth	r3, r3
 800c78a:	f023 0303 	bic.w	r3, r3, #3
 800c78e:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800c790:	8bfb      	ldrh	r3, [r7, #30]
 800c792:	2b0b      	cmp	r3, #11
 800c794:	d801      	bhi.n	800c79a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800c796:	230c      	movs	r3, #12
 800c798:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800c79a:	8bfb      	ldrh	r3, [r7, #30]
 800c79c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800c7a0:	d803      	bhi.n	800c7aa <mem_trim+0x32>
 800c7a2:	8bfa      	ldrh	r2, [r7, #30]
 800c7a4:	887b      	ldrh	r3, [r7, #2]
 800c7a6:	429a      	cmp	r2, r3
 800c7a8:	d201      	bcs.n	800c7ae <mem_trim+0x36>
    return NULL;
 800c7aa:	2300      	movs	r3, #0
 800c7ac:	e0d8      	b.n	800c960 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800c7ae:	4b6e      	ldr	r3, [pc, #440]	; (800c968 <mem_trim+0x1f0>)
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	687a      	ldr	r2, [r7, #4]
 800c7b4:	429a      	cmp	r2, r3
 800c7b6:	d304      	bcc.n	800c7c2 <mem_trim+0x4a>
 800c7b8:	4b6c      	ldr	r3, [pc, #432]	; (800c96c <mem_trim+0x1f4>)
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	687a      	ldr	r2, [r7, #4]
 800c7be:	429a      	cmp	r2, r3
 800c7c0:	d306      	bcc.n	800c7d0 <mem_trim+0x58>
 800c7c2:	4b6b      	ldr	r3, [pc, #428]	; (800c970 <mem_trim+0x1f8>)
 800c7c4:	f240 22d2 	movw	r2, #722	; 0x2d2
 800c7c8:	496a      	ldr	r1, [pc, #424]	; (800c974 <mem_trim+0x1fc>)
 800c7ca:	486b      	ldr	r0, [pc, #428]	; (800c978 <mem_trim+0x200>)
 800c7cc:	f00a ffa2 	bl	8017714 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800c7d0:	4b65      	ldr	r3, [pc, #404]	; (800c968 <mem_trim+0x1f0>)
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	687a      	ldr	r2, [r7, #4]
 800c7d6:	429a      	cmp	r2, r3
 800c7d8:	d304      	bcc.n	800c7e4 <mem_trim+0x6c>
 800c7da:	4b64      	ldr	r3, [pc, #400]	; (800c96c <mem_trim+0x1f4>)
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	687a      	ldr	r2, [r7, #4]
 800c7e0:	429a      	cmp	r2, r3
 800c7e2:	d307      	bcc.n	800c7f4 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c7e4:	f008 fe02 	bl	80153ec <sys_arch_protect>
 800c7e8:	60b8      	str	r0, [r7, #8]
 800c7ea:	68b8      	ldr	r0, [r7, #8]
 800c7ec:	f008 fe0c 	bl	8015408 <sys_arch_unprotect>
    return rmem;
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	e0b5      	b.n	800c960 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	3b08      	subs	r3, #8
 800c7f8:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800c7fa:	69b8      	ldr	r0, [r7, #24]
 800c7fc:	f7ff fdea 	bl	800c3d4 <mem_to_ptr>
 800c800:	4603      	mov	r3, r0
 800c802:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800c804:	69bb      	ldr	r3, [r7, #24]
 800c806:	881a      	ldrh	r2, [r3, #0]
 800c808:	8afb      	ldrh	r3, [r7, #22]
 800c80a:	1ad3      	subs	r3, r2, r3
 800c80c:	b29b      	uxth	r3, r3
 800c80e:	3b08      	subs	r3, #8
 800c810:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800c812:	8bfa      	ldrh	r2, [r7, #30]
 800c814:	8abb      	ldrh	r3, [r7, #20]
 800c816:	429a      	cmp	r2, r3
 800c818:	d906      	bls.n	800c828 <mem_trim+0xb0>
 800c81a:	4b55      	ldr	r3, [pc, #340]	; (800c970 <mem_trim+0x1f8>)
 800c81c:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800c820:	4956      	ldr	r1, [pc, #344]	; (800c97c <mem_trim+0x204>)
 800c822:	4855      	ldr	r0, [pc, #340]	; (800c978 <mem_trim+0x200>)
 800c824:	f00a ff76 	bl	8017714 <iprintf>
  if (newsize > size) {
 800c828:	8bfa      	ldrh	r2, [r7, #30]
 800c82a:	8abb      	ldrh	r3, [r7, #20]
 800c82c:	429a      	cmp	r2, r3
 800c82e:	d901      	bls.n	800c834 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800c830:	2300      	movs	r3, #0
 800c832:	e095      	b.n	800c960 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800c834:	8bfa      	ldrh	r2, [r7, #30]
 800c836:	8abb      	ldrh	r3, [r7, #20]
 800c838:	429a      	cmp	r2, r3
 800c83a:	d101      	bne.n	800c840 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	e08f      	b.n	800c960 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800c840:	484f      	ldr	r0, [pc, #316]	; (800c980 <mem_trim+0x208>)
 800c842:	f008 fd91 	bl	8015368 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800c846:	69bb      	ldr	r3, [r7, #24]
 800c848:	881b      	ldrh	r3, [r3, #0]
 800c84a:	4618      	mov	r0, r3
 800c84c:	f7ff fdb0 	bl	800c3b0 <ptr_to_mem>
 800c850:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800c852:	693b      	ldr	r3, [r7, #16]
 800c854:	791b      	ldrb	r3, [r3, #4]
 800c856:	2b00      	cmp	r3, #0
 800c858:	d13f      	bne.n	800c8da <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800c85a:	69bb      	ldr	r3, [r7, #24]
 800c85c:	881b      	ldrh	r3, [r3, #0]
 800c85e:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800c862:	d106      	bne.n	800c872 <mem_trim+0xfa>
 800c864:	4b42      	ldr	r3, [pc, #264]	; (800c970 <mem_trim+0x1f8>)
 800c866:	f240 22f5 	movw	r2, #757	; 0x2f5
 800c86a:	4946      	ldr	r1, [pc, #280]	; (800c984 <mem_trim+0x20c>)
 800c86c:	4842      	ldr	r0, [pc, #264]	; (800c978 <mem_trim+0x200>)
 800c86e:	f00a ff51 	bl	8017714 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800c872:	693b      	ldr	r3, [r7, #16]
 800c874:	881b      	ldrh	r3, [r3, #0]
 800c876:	81fb      	strh	r3, [r7, #14]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800c878:	8afa      	ldrh	r2, [r7, #22]
 800c87a:	8bfb      	ldrh	r3, [r7, #30]
 800c87c:	4413      	add	r3, r2
 800c87e:	b29b      	uxth	r3, r3
 800c880:	3308      	adds	r3, #8
 800c882:	81bb      	strh	r3, [r7, #12]
    if (lfree == mem2) {
 800c884:	4b40      	ldr	r3, [pc, #256]	; (800c988 <mem_trim+0x210>)
 800c886:	681a      	ldr	r2, [r3, #0]
 800c888:	693b      	ldr	r3, [r7, #16]
 800c88a:	429a      	cmp	r2, r3
 800c88c:	d106      	bne.n	800c89c <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800c88e:	89bb      	ldrh	r3, [r7, #12]
 800c890:	4618      	mov	r0, r3
 800c892:	f7ff fd8d 	bl	800c3b0 <ptr_to_mem>
 800c896:	4602      	mov	r2, r0
 800c898:	4b3b      	ldr	r3, [pc, #236]	; (800c988 <mem_trim+0x210>)
 800c89a:	601a      	str	r2, [r3, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800c89c:	89bb      	ldrh	r3, [r7, #12]
 800c89e:	4618      	mov	r0, r3
 800c8a0:	f7ff fd86 	bl	800c3b0 <ptr_to_mem>
 800c8a4:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800c8a6:	693b      	ldr	r3, [r7, #16]
 800c8a8:	2200      	movs	r2, #0
 800c8aa:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800c8ac:	693b      	ldr	r3, [r7, #16]
 800c8ae:	89fa      	ldrh	r2, [r7, #14]
 800c8b0:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800c8b2:	693b      	ldr	r3, [r7, #16]
 800c8b4:	8afa      	ldrh	r2, [r7, #22]
 800c8b6:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800c8b8:	69bb      	ldr	r3, [r7, #24]
 800c8ba:	89ba      	ldrh	r2, [r7, #12]
 800c8bc:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c8be:	693b      	ldr	r3, [r7, #16]
 800c8c0:	881b      	ldrh	r3, [r3, #0]
 800c8c2:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800c8c6:	d047      	beq.n	800c958 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800c8c8:	693b      	ldr	r3, [r7, #16]
 800c8ca:	881b      	ldrh	r3, [r3, #0]
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	f7ff fd6f 	bl	800c3b0 <ptr_to_mem>
 800c8d2:	4602      	mov	r2, r0
 800c8d4:	89bb      	ldrh	r3, [r7, #12]
 800c8d6:	8053      	strh	r3, [r2, #2]
 800c8d8:	e03e      	b.n	800c958 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800c8da:	8bfb      	ldrh	r3, [r7, #30]
 800c8dc:	f103 0214 	add.w	r2, r3, #20
 800c8e0:	8abb      	ldrh	r3, [r7, #20]
 800c8e2:	429a      	cmp	r2, r3
 800c8e4:	d838      	bhi.n	800c958 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800c8e6:	8afa      	ldrh	r2, [r7, #22]
 800c8e8:	8bfb      	ldrh	r3, [r7, #30]
 800c8ea:	4413      	add	r3, r2
 800c8ec:	b29b      	uxth	r3, r3
 800c8ee:	3308      	adds	r3, #8
 800c8f0:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800c8f2:	69bb      	ldr	r3, [r7, #24]
 800c8f4:	881b      	ldrh	r3, [r3, #0]
 800c8f6:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800c8fa:	d106      	bne.n	800c90a <mem_trim+0x192>
 800c8fc:	4b1c      	ldr	r3, [pc, #112]	; (800c970 <mem_trim+0x1f8>)
 800c8fe:	f240 3216 	movw	r2, #790	; 0x316
 800c902:	4920      	ldr	r1, [pc, #128]	; (800c984 <mem_trim+0x20c>)
 800c904:	481c      	ldr	r0, [pc, #112]	; (800c978 <mem_trim+0x200>)
 800c906:	f00a ff05 	bl	8017714 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800c90a:	89bb      	ldrh	r3, [r7, #12]
 800c90c:	4618      	mov	r0, r3
 800c90e:	f7ff fd4f 	bl	800c3b0 <ptr_to_mem>
 800c912:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800c914:	4b1c      	ldr	r3, [pc, #112]	; (800c988 <mem_trim+0x210>)
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	693a      	ldr	r2, [r7, #16]
 800c91a:	429a      	cmp	r2, r3
 800c91c:	d202      	bcs.n	800c924 <mem_trim+0x1ac>
      lfree = mem2;
 800c91e:	4a1a      	ldr	r2, [pc, #104]	; (800c988 <mem_trim+0x210>)
 800c920:	693b      	ldr	r3, [r7, #16]
 800c922:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800c924:	693b      	ldr	r3, [r7, #16]
 800c926:	2200      	movs	r2, #0
 800c928:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800c92a:	69bb      	ldr	r3, [r7, #24]
 800c92c:	881a      	ldrh	r2, [r3, #0]
 800c92e:	693b      	ldr	r3, [r7, #16]
 800c930:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800c932:	693b      	ldr	r3, [r7, #16]
 800c934:	8afa      	ldrh	r2, [r7, #22]
 800c936:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800c938:	69bb      	ldr	r3, [r7, #24]
 800c93a:	89ba      	ldrh	r2, [r7, #12]
 800c93c:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c93e:	693b      	ldr	r3, [r7, #16]
 800c940:	881b      	ldrh	r3, [r3, #0]
 800c942:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800c946:	d007      	beq.n	800c958 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800c948:	693b      	ldr	r3, [r7, #16]
 800c94a:	881b      	ldrh	r3, [r3, #0]
 800c94c:	4618      	mov	r0, r3
 800c94e:	f7ff fd2f 	bl	800c3b0 <ptr_to_mem>
 800c952:	4602      	mov	r2, r0
 800c954:	89bb      	ldrh	r3, [r7, #12]
 800c956:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800c958:	4809      	ldr	r0, [pc, #36]	; (800c980 <mem_trim+0x208>)
 800c95a:	f008 fd14 	bl	8015386 <sys_mutex_unlock>
  return rmem;
 800c95e:	687b      	ldr	r3, [r7, #4]
}
 800c960:	4618      	mov	r0, r3
 800c962:	3720      	adds	r7, #32
 800c964:	46bd      	mov	sp, r7
 800c966:	bd80      	pop	{r7, pc}
 800c968:	200044f8 	.word	0x200044f8
 800c96c:	200044fc 	.word	0x200044fc
 800c970:	08019414 	.word	0x08019414
 800c974:	080195a0 	.word	0x080195a0
 800c978:	0801945c 	.word	0x0801945c
 800c97c:	080195b8 	.word	0x080195b8
 800c980:	20004500 	.word	0x20004500
 800c984:	080195d8 	.word	0x080195d8
 800c988:	20004504 	.word	0x20004504

0800c98c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800c98c:	b580      	push	{r7, lr}
 800c98e:	b088      	sub	sp, #32
 800c990:	af00      	add	r7, sp, #0
 800c992:	4603      	mov	r3, r0
 800c994:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800c996:	88fb      	ldrh	r3, [r7, #6]
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d101      	bne.n	800c9a0 <mem_malloc+0x14>
    return NULL;
 800c99c:	2300      	movs	r3, #0
 800c99e:	e0e2      	b.n	800cb66 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800c9a0:	88fb      	ldrh	r3, [r7, #6]
 800c9a2:	3303      	adds	r3, #3
 800c9a4:	b29b      	uxth	r3, r3
 800c9a6:	f023 0303 	bic.w	r3, r3, #3
 800c9aa:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800c9ac:	8bbb      	ldrh	r3, [r7, #28]
 800c9ae:	2b0b      	cmp	r3, #11
 800c9b0:	d801      	bhi.n	800c9b6 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800c9b2:	230c      	movs	r3, #12
 800c9b4:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800c9b6:	8bbb      	ldrh	r3, [r7, #28]
 800c9b8:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800c9bc:	d803      	bhi.n	800c9c6 <mem_malloc+0x3a>
 800c9be:	8bba      	ldrh	r2, [r7, #28]
 800c9c0:	88fb      	ldrh	r3, [r7, #6]
 800c9c2:	429a      	cmp	r2, r3
 800c9c4:	d201      	bcs.n	800c9ca <mem_malloc+0x3e>
    return NULL;
 800c9c6:	2300      	movs	r3, #0
 800c9c8:	e0cd      	b.n	800cb66 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800c9ca:	4869      	ldr	r0, [pc, #420]	; (800cb70 <mem_malloc+0x1e4>)
 800c9cc:	f008 fccc 	bl	8015368 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800c9d0:	4b68      	ldr	r3, [pc, #416]	; (800cb74 <mem_malloc+0x1e8>)
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	f7ff fcfd 	bl	800c3d4 <mem_to_ptr>
 800c9da:	4603      	mov	r3, r0
 800c9dc:	83fb      	strh	r3, [r7, #30]
 800c9de:	e0b7      	b.n	800cb50 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800c9e0:	8bfb      	ldrh	r3, [r7, #30]
 800c9e2:	4618      	mov	r0, r3
 800c9e4:	f7ff fce4 	bl	800c3b0 <ptr_to_mem>
 800c9e8:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800c9ea:	697b      	ldr	r3, [r7, #20]
 800c9ec:	791b      	ldrb	r3, [r3, #4]
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	f040 80a7 	bne.w	800cb42 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800c9f4:	697b      	ldr	r3, [r7, #20]
 800c9f6:	881b      	ldrh	r3, [r3, #0]
 800c9f8:	461a      	mov	r2, r3
 800c9fa:	8bfb      	ldrh	r3, [r7, #30]
 800c9fc:	1ad3      	subs	r3, r2, r3
 800c9fe:	f1a3 0208 	sub.w	r2, r3, #8
 800ca02:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800ca04:	429a      	cmp	r2, r3
 800ca06:	f0c0 809c 	bcc.w	800cb42 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800ca0a:	697b      	ldr	r3, [r7, #20]
 800ca0c:	881b      	ldrh	r3, [r3, #0]
 800ca0e:	461a      	mov	r2, r3
 800ca10:	8bfb      	ldrh	r3, [r7, #30]
 800ca12:	1ad3      	subs	r3, r2, r3
 800ca14:	f1a3 0208 	sub.w	r2, r3, #8
 800ca18:	8bbb      	ldrh	r3, [r7, #28]
 800ca1a:	3314      	adds	r3, #20
 800ca1c:	429a      	cmp	r2, r3
 800ca1e:	d333      	bcc.n	800ca88 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800ca20:	8bfa      	ldrh	r2, [r7, #30]
 800ca22:	8bbb      	ldrh	r3, [r7, #28]
 800ca24:	4413      	add	r3, r2
 800ca26:	b29b      	uxth	r3, r3
 800ca28:	3308      	adds	r3, #8
 800ca2a:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800ca2c:	8a7b      	ldrh	r3, [r7, #18]
 800ca2e:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800ca32:	d106      	bne.n	800ca42 <mem_malloc+0xb6>
 800ca34:	4b50      	ldr	r3, [pc, #320]	; (800cb78 <mem_malloc+0x1ec>)
 800ca36:	f240 3287 	movw	r2, #903	; 0x387
 800ca3a:	4950      	ldr	r1, [pc, #320]	; (800cb7c <mem_malloc+0x1f0>)
 800ca3c:	4850      	ldr	r0, [pc, #320]	; (800cb80 <mem_malloc+0x1f4>)
 800ca3e:	f00a fe69 	bl	8017714 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800ca42:	8a7b      	ldrh	r3, [r7, #18]
 800ca44:	4618      	mov	r0, r3
 800ca46:	f7ff fcb3 	bl	800c3b0 <ptr_to_mem>
 800ca4a:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	2200      	movs	r2, #0
 800ca50:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800ca52:	697b      	ldr	r3, [r7, #20]
 800ca54:	881a      	ldrh	r2, [r3, #0]
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	8bfa      	ldrh	r2, [r7, #30]
 800ca5e:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800ca60:	697b      	ldr	r3, [r7, #20]
 800ca62:	8a7a      	ldrh	r2, [r7, #18]
 800ca64:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800ca66:	697b      	ldr	r3, [r7, #20]
 800ca68:	2201      	movs	r2, #1
 800ca6a:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	881b      	ldrh	r3, [r3, #0]
 800ca70:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800ca74:	d00b      	beq.n	800ca8e <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	881b      	ldrh	r3, [r3, #0]
 800ca7a:	4618      	mov	r0, r3
 800ca7c:	f7ff fc98 	bl	800c3b0 <ptr_to_mem>
 800ca80:	4602      	mov	r2, r0
 800ca82:	8a7b      	ldrh	r3, [r7, #18]
 800ca84:	8053      	strh	r3, [r2, #2]
 800ca86:	e002      	b.n	800ca8e <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800ca88:	697b      	ldr	r3, [r7, #20]
 800ca8a:	2201      	movs	r2, #1
 800ca8c:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800ca8e:	4b39      	ldr	r3, [pc, #228]	; (800cb74 <mem_malloc+0x1e8>)
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	697a      	ldr	r2, [r7, #20]
 800ca94:	429a      	cmp	r2, r3
 800ca96:	d127      	bne.n	800cae8 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800ca98:	4b36      	ldr	r3, [pc, #216]	; (800cb74 <mem_malloc+0x1e8>)
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800ca9e:	e005      	b.n	800caac <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800caa0:	69bb      	ldr	r3, [r7, #24]
 800caa2:	881b      	ldrh	r3, [r3, #0]
 800caa4:	4618      	mov	r0, r3
 800caa6:	f7ff fc83 	bl	800c3b0 <ptr_to_mem>
 800caaa:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800caac:	69bb      	ldr	r3, [r7, #24]
 800caae:	791b      	ldrb	r3, [r3, #4]
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d004      	beq.n	800cabe <mem_malloc+0x132>
 800cab4:	4b33      	ldr	r3, [pc, #204]	; (800cb84 <mem_malloc+0x1f8>)
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	69ba      	ldr	r2, [r7, #24]
 800caba:	429a      	cmp	r2, r3
 800cabc:	d1f0      	bne.n	800caa0 <mem_malloc+0x114>
          }
          lfree = cur;
 800cabe:	4a2d      	ldr	r2, [pc, #180]	; (800cb74 <mem_malloc+0x1e8>)
 800cac0:	69bb      	ldr	r3, [r7, #24]
 800cac2:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800cac4:	4b2b      	ldr	r3, [pc, #172]	; (800cb74 <mem_malloc+0x1e8>)
 800cac6:	681a      	ldr	r2, [r3, #0]
 800cac8:	4b2e      	ldr	r3, [pc, #184]	; (800cb84 <mem_malloc+0x1f8>)
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	429a      	cmp	r2, r3
 800cace:	d00b      	beq.n	800cae8 <mem_malloc+0x15c>
 800cad0:	4b28      	ldr	r3, [pc, #160]	; (800cb74 <mem_malloc+0x1e8>)
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	791b      	ldrb	r3, [r3, #4]
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d006      	beq.n	800cae8 <mem_malloc+0x15c>
 800cada:	4b27      	ldr	r3, [pc, #156]	; (800cb78 <mem_malloc+0x1ec>)
 800cadc:	f240 32b5 	movw	r2, #949	; 0x3b5
 800cae0:	4929      	ldr	r1, [pc, #164]	; (800cb88 <mem_malloc+0x1fc>)
 800cae2:	4827      	ldr	r0, [pc, #156]	; (800cb80 <mem_malloc+0x1f4>)
 800cae4:	f00a fe16 	bl	8017714 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800cae8:	4821      	ldr	r0, [pc, #132]	; (800cb70 <mem_malloc+0x1e4>)
 800caea:	f008 fc4c 	bl	8015386 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800caee:	8bba      	ldrh	r2, [r7, #28]
 800caf0:	697b      	ldr	r3, [r7, #20]
 800caf2:	4413      	add	r3, r2
 800caf4:	3308      	adds	r3, #8
 800caf6:	4a23      	ldr	r2, [pc, #140]	; (800cb84 <mem_malloc+0x1f8>)
 800caf8:	6812      	ldr	r2, [r2, #0]
 800cafa:	4293      	cmp	r3, r2
 800cafc:	d906      	bls.n	800cb0c <mem_malloc+0x180>
 800cafe:	4b1e      	ldr	r3, [pc, #120]	; (800cb78 <mem_malloc+0x1ec>)
 800cb00:	f240 32ba 	movw	r2, #954	; 0x3ba
 800cb04:	4921      	ldr	r1, [pc, #132]	; (800cb8c <mem_malloc+0x200>)
 800cb06:	481e      	ldr	r0, [pc, #120]	; (800cb80 <mem_malloc+0x1f4>)
 800cb08:	f00a fe04 	bl	8017714 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800cb0c:	697b      	ldr	r3, [r7, #20]
 800cb0e:	f003 0303 	and.w	r3, r3, #3
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d006      	beq.n	800cb24 <mem_malloc+0x198>
 800cb16:	4b18      	ldr	r3, [pc, #96]	; (800cb78 <mem_malloc+0x1ec>)
 800cb18:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 800cb1c:	491c      	ldr	r1, [pc, #112]	; (800cb90 <mem_malloc+0x204>)
 800cb1e:	4818      	ldr	r0, [pc, #96]	; (800cb80 <mem_malloc+0x1f4>)
 800cb20:	f00a fdf8 	bl	8017714 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800cb24:	697b      	ldr	r3, [r7, #20]
 800cb26:	f003 0303 	and.w	r3, r3, #3
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d006      	beq.n	800cb3c <mem_malloc+0x1b0>
 800cb2e:	4b12      	ldr	r3, [pc, #72]	; (800cb78 <mem_malloc+0x1ec>)
 800cb30:	f240 32be 	movw	r2, #958	; 0x3be
 800cb34:	4917      	ldr	r1, [pc, #92]	; (800cb94 <mem_malloc+0x208>)
 800cb36:	4812      	ldr	r0, [pc, #72]	; (800cb80 <mem_malloc+0x1f4>)
 800cb38:	f00a fdec 	bl	8017714 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800cb3c:	697b      	ldr	r3, [r7, #20]
 800cb3e:	3308      	adds	r3, #8
 800cb40:	e011      	b.n	800cb66 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800cb42:	8bfb      	ldrh	r3, [r7, #30]
 800cb44:	4618      	mov	r0, r3
 800cb46:	f7ff fc33 	bl	800c3b0 <ptr_to_mem>
 800cb4a:	4603      	mov	r3, r0
 800cb4c:	881b      	ldrh	r3, [r3, #0]
 800cb4e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800cb50:	8bfa      	ldrh	r2, [r7, #30]
 800cb52:	8bbb      	ldrh	r3, [r7, #28]
 800cb54:	f5c3 53c0 	rsb	r3, r3, #6144	; 0x1800
 800cb58:	429a      	cmp	r2, r3
 800cb5a:	f4ff af41 	bcc.w	800c9e0 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800cb5e:	4804      	ldr	r0, [pc, #16]	; (800cb70 <mem_malloc+0x1e4>)
 800cb60:	f008 fc11 	bl	8015386 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800cb64:	2300      	movs	r3, #0
}
 800cb66:	4618      	mov	r0, r3
 800cb68:	3720      	adds	r7, #32
 800cb6a:	46bd      	mov	sp, r7
 800cb6c:	bd80      	pop	{r7, pc}
 800cb6e:	bf00      	nop
 800cb70:	20004500 	.word	0x20004500
 800cb74:	20004504 	.word	0x20004504
 800cb78:	08019414 	.word	0x08019414
 800cb7c:	080195d8 	.word	0x080195d8
 800cb80:	0801945c 	.word	0x0801945c
 800cb84:	200044fc 	.word	0x200044fc
 800cb88:	080195ec 	.word	0x080195ec
 800cb8c:	08019608 	.word	0x08019608
 800cb90:	08019638 	.word	0x08019638
 800cb94:	08019668 	.word	0x08019668

0800cb98 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800cb98:	b480      	push	{r7}
 800cb9a:	b085      	sub	sp, #20
 800cb9c:	af00      	add	r7, sp, #0
 800cb9e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	689b      	ldr	r3, [r3, #8]
 800cba4:	2200      	movs	r2, #0
 800cba6:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	685b      	ldr	r3, [r3, #4]
 800cbac:	3303      	adds	r3, #3
 800cbae:	f023 0303 	bic.w	r3, r3, #3
 800cbb2:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800cbb4:	2300      	movs	r3, #0
 800cbb6:	60fb      	str	r3, [r7, #12]
 800cbb8:	e011      	b.n	800cbde <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	689b      	ldr	r3, [r3, #8]
 800cbbe:	681a      	ldr	r2, [r3, #0]
 800cbc0:	68bb      	ldr	r3, [r7, #8]
 800cbc2:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	689b      	ldr	r3, [r3, #8]
 800cbc8:	68ba      	ldr	r2, [r7, #8]
 800cbca:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	881b      	ldrh	r3, [r3, #0]
 800cbd0:	461a      	mov	r2, r3
 800cbd2:	68bb      	ldr	r3, [r7, #8]
 800cbd4:	4413      	add	r3, r2
 800cbd6:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	3301      	adds	r3, #1
 800cbdc:	60fb      	str	r3, [r7, #12]
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	885b      	ldrh	r3, [r3, #2]
 800cbe2:	461a      	mov	r2, r3
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	429a      	cmp	r2, r3
 800cbe8:	dce7      	bgt.n	800cbba <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800cbea:	bf00      	nop
 800cbec:	3714      	adds	r7, #20
 800cbee:	46bd      	mov	sp, r7
 800cbf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf4:	4770      	bx	lr
	...

0800cbf8 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800cbf8:	b580      	push	{r7, lr}
 800cbfa:	b082      	sub	sp, #8
 800cbfc:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800cbfe:	2300      	movs	r3, #0
 800cc00:	80fb      	strh	r3, [r7, #6]
 800cc02:	e009      	b.n	800cc18 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800cc04:	88fb      	ldrh	r3, [r7, #6]
 800cc06:	4a08      	ldr	r2, [pc, #32]	; (800cc28 <memp_init+0x30>)
 800cc08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc0c:	4618      	mov	r0, r3
 800cc0e:	f7ff ffc3 	bl	800cb98 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800cc12:	88fb      	ldrh	r3, [r7, #6]
 800cc14:	3301      	adds	r3, #1
 800cc16:	80fb      	strh	r3, [r7, #6]
 800cc18:	88fb      	ldrh	r3, [r7, #6]
 800cc1a:	2b0d      	cmp	r3, #13
 800cc1c:	d9f2      	bls.n	800cc04 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800cc1e:	bf00      	nop
 800cc20:	3708      	adds	r7, #8
 800cc22:	46bd      	mov	sp, r7
 800cc24:	bd80      	pop	{r7, pc}
 800cc26:	bf00      	nop
 800cc28:	0801bb48 	.word	0x0801bb48

0800cc2c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800cc2c:	b580      	push	{r7, lr}
 800cc2e:	b084      	sub	sp, #16
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800cc34:	f008 fbda 	bl	80153ec <sys_arch_protect>
 800cc38:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	689b      	ldr	r3, [r3, #8]
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800cc42:	68bb      	ldr	r3, [r7, #8]
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d015      	beq.n	800cc74 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	689b      	ldr	r3, [r3, #8]
 800cc4c:	68ba      	ldr	r2, [r7, #8]
 800cc4e:	6812      	ldr	r2, [r2, #0]
 800cc50:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800cc52:	68bb      	ldr	r3, [r7, #8]
 800cc54:	f003 0303 	and.w	r3, r3, #3
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d006      	beq.n	800cc6a <do_memp_malloc_pool+0x3e>
 800cc5c:	4b09      	ldr	r3, [pc, #36]	; (800cc84 <do_memp_malloc_pool+0x58>)
 800cc5e:	f240 1219 	movw	r2, #281	; 0x119
 800cc62:	4909      	ldr	r1, [pc, #36]	; (800cc88 <do_memp_malloc_pool+0x5c>)
 800cc64:	4809      	ldr	r0, [pc, #36]	; (800cc8c <do_memp_malloc_pool+0x60>)
 800cc66:	f00a fd55 	bl	8017714 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800cc6a:	68f8      	ldr	r0, [r7, #12]
 800cc6c:	f008 fbcc 	bl	8015408 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800cc70:	68bb      	ldr	r3, [r7, #8]
 800cc72:	e003      	b.n	800cc7c <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800cc74:	68f8      	ldr	r0, [r7, #12]
 800cc76:	f008 fbc7 	bl	8015408 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800cc7a:	2300      	movs	r3, #0
}
 800cc7c:	4618      	mov	r0, r3
 800cc7e:	3710      	adds	r7, #16
 800cc80:	46bd      	mov	sp, r7
 800cc82:	bd80      	pop	{r7, pc}
 800cc84:	0801968c 	.word	0x0801968c
 800cc88:	080196bc 	.word	0x080196bc
 800cc8c:	080196e0 	.word	0x080196e0

0800cc90 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800cc90:	b580      	push	{r7, lr}
 800cc92:	b084      	sub	sp, #16
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	4603      	mov	r3, r0
 800cc98:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800cc9a:	79fb      	ldrb	r3, [r7, #7]
 800cc9c:	2b0d      	cmp	r3, #13
 800cc9e:	d908      	bls.n	800ccb2 <memp_malloc+0x22>
 800cca0:	4b0a      	ldr	r3, [pc, #40]	; (800cccc <memp_malloc+0x3c>)
 800cca2:	f240 1257 	movw	r2, #343	; 0x157
 800cca6:	490a      	ldr	r1, [pc, #40]	; (800ccd0 <memp_malloc+0x40>)
 800cca8:	480a      	ldr	r0, [pc, #40]	; (800ccd4 <memp_malloc+0x44>)
 800ccaa:	f00a fd33 	bl	8017714 <iprintf>
 800ccae:	2300      	movs	r3, #0
 800ccb0:	e008      	b.n	800ccc4 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800ccb2:	79fb      	ldrb	r3, [r7, #7]
 800ccb4:	4a08      	ldr	r2, [pc, #32]	; (800ccd8 <memp_malloc+0x48>)
 800ccb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ccba:	4618      	mov	r0, r3
 800ccbc:	f7ff ffb6 	bl	800cc2c <do_memp_malloc_pool>
 800ccc0:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800ccc2:	68fb      	ldr	r3, [r7, #12]
}
 800ccc4:	4618      	mov	r0, r3
 800ccc6:	3710      	adds	r7, #16
 800ccc8:	46bd      	mov	sp, r7
 800ccca:	bd80      	pop	{r7, pc}
 800cccc:	0801968c 	.word	0x0801968c
 800ccd0:	0801971c 	.word	0x0801971c
 800ccd4:	080196e0 	.word	0x080196e0
 800ccd8:	0801bb48 	.word	0x0801bb48

0800ccdc <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800ccdc:	b580      	push	{r7, lr}
 800ccde:	b084      	sub	sp, #16
 800cce0:	af00      	add	r7, sp, #0
 800cce2:	6078      	str	r0, [r7, #4]
 800cce4:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800cce6:	683b      	ldr	r3, [r7, #0]
 800cce8:	f003 0303 	and.w	r3, r3, #3
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d006      	beq.n	800ccfe <do_memp_free_pool+0x22>
 800ccf0:	4b0d      	ldr	r3, [pc, #52]	; (800cd28 <do_memp_free_pool+0x4c>)
 800ccf2:	f240 126d 	movw	r2, #365	; 0x16d
 800ccf6:	490d      	ldr	r1, [pc, #52]	; (800cd2c <do_memp_free_pool+0x50>)
 800ccf8:	480d      	ldr	r0, [pc, #52]	; (800cd30 <do_memp_free_pool+0x54>)
 800ccfa:	f00a fd0b 	bl	8017714 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800ccfe:	683b      	ldr	r3, [r7, #0]
 800cd00:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800cd02:	f008 fb73 	bl	80153ec <sys_arch_protect>
 800cd06:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	689b      	ldr	r3, [r3, #8]
 800cd0c:	681a      	ldr	r2, [r3, #0]
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	689b      	ldr	r3, [r3, #8]
 800cd16:	68fa      	ldr	r2, [r7, #12]
 800cd18:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800cd1a:	68b8      	ldr	r0, [r7, #8]
 800cd1c:	f008 fb74 	bl	8015408 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800cd20:	bf00      	nop
 800cd22:	3710      	adds	r7, #16
 800cd24:	46bd      	mov	sp, r7
 800cd26:	bd80      	pop	{r7, pc}
 800cd28:	0801968c 	.word	0x0801968c
 800cd2c:	0801973c 	.word	0x0801973c
 800cd30:	080196e0 	.word	0x080196e0

0800cd34 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800cd34:	b580      	push	{r7, lr}
 800cd36:	b082      	sub	sp, #8
 800cd38:	af00      	add	r7, sp, #0
 800cd3a:	4603      	mov	r3, r0
 800cd3c:	6039      	str	r1, [r7, #0]
 800cd3e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800cd40:	79fb      	ldrb	r3, [r7, #7]
 800cd42:	2b0d      	cmp	r3, #13
 800cd44:	d907      	bls.n	800cd56 <memp_free+0x22>
 800cd46:	4b0c      	ldr	r3, [pc, #48]	; (800cd78 <memp_free+0x44>)
 800cd48:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800cd4c:	490b      	ldr	r1, [pc, #44]	; (800cd7c <memp_free+0x48>)
 800cd4e:	480c      	ldr	r0, [pc, #48]	; (800cd80 <memp_free+0x4c>)
 800cd50:	f00a fce0 	bl	8017714 <iprintf>
 800cd54:	e00c      	b.n	800cd70 <memp_free+0x3c>

  if (mem == NULL) {
 800cd56:	683b      	ldr	r3, [r7, #0]
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d008      	beq.n	800cd6e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800cd5c:	79fb      	ldrb	r3, [r7, #7]
 800cd5e:	4a09      	ldr	r2, [pc, #36]	; (800cd84 <memp_free+0x50>)
 800cd60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd64:	6839      	ldr	r1, [r7, #0]
 800cd66:	4618      	mov	r0, r3
 800cd68:	f7ff ffb8 	bl	800ccdc <do_memp_free_pool>
 800cd6c:	e000      	b.n	800cd70 <memp_free+0x3c>
    return;
 800cd6e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800cd70:	3708      	adds	r7, #8
 800cd72:	46bd      	mov	sp, r7
 800cd74:	bd80      	pop	{r7, pc}
 800cd76:	bf00      	nop
 800cd78:	0801968c 	.word	0x0801968c
 800cd7c:	0801975c 	.word	0x0801975c
 800cd80:	080196e0 	.word	0x080196e0
 800cd84:	0801bb48 	.word	0x0801bb48

0800cd88 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800cd88:	b480      	push	{r7}
 800cd8a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800cd8c:	bf00      	nop
 800cd8e:	46bd      	mov	sp, r7
 800cd90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd94:	4770      	bx	lr
	...

0800cd98 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800cd98:	b580      	push	{r7, lr}
 800cd9a:	b086      	sub	sp, #24
 800cd9c:	af00      	add	r7, sp, #0
 800cd9e:	60f8      	str	r0, [r7, #12]
 800cda0:	60b9      	str	r1, [r7, #8]
 800cda2:	607a      	str	r2, [r7, #4]
 800cda4:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d108      	bne.n	800cdbe <netif_add+0x26>
 800cdac:	4b57      	ldr	r3, [pc, #348]	; (800cf0c <netif_add+0x174>)
 800cdae:	f240 1227 	movw	r2, #295	; 0x127
 800cdb2:	4957      	ldr	r1, [pc, #348]	; (800cf10 <netif_add+0x178>)
 800cdb4:	4857      	ldr	r0, [pc, #348]	; (800cf14 <netif_add+0x17c>)
 800cdb6:	f00a fcad 	bl	8017714 <iprintf>
 800cdba:	2300      	movs	r3, #0
 800cdbc:	e0a2      	b.n	800cf04 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800cdbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d108      	bne.n	800cdd6 <netif_add+0x3e>
 800cdc4:	4b51      	ldr	r3, [pc, #324]	; (800cf0c <netif_add+0x174>)
 800cdc6:	f44f 7294 	mov.w	r2, #296	; 0x128
 800cdca:	4953      	ldr	r1, [pc, #332]	; (800cf18 <netif_add+0x180>)
 800cdcc:	4851      	ldr	r0, [pc, #324]	; (800cf14 <netif_add+0x17c>)
 800cdce:	f00a fca1 	bl	8017714 <iprintf>
 800cdd2:	2300      	movs	r3, #0
 800cdd4:	e096      	b.n	800cf04 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800cdd6:	68bb      	ldr	r3, [r7, #8]
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d101      	bne.n	800cde0 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800cddc:	4b4f      	ldr	r3, [pc, #316]	; (800cf1c <netif_add+0x184>)
 800cdde:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d101      	bne.n	800cdea <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800cde6:	4b4d      	ldr	r3, [pc, #308]	; (800cf1c <netif_add+0x184>)
 800cde8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800cdea:	683b      	ldr	r3, [r7, #0]
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d101      	bne.n	800cdf4 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800cdf0:	4b4a      	ldr	r3, [pc, #296]	; (800cf1c <netif_add+0x184>)
 800cdf2:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	2200      	movs	r2, #0
 800cdf8:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	2200      	movs	r2, #0
 800cdfe:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	2200      	movs	r2, #0
 800ce04:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	4a45      	ldr	r2, [pc, #276]	; (800cf20 <netif_add+0x188>)
 800ce0a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	2200      	movs	r2, #0
 800ce10:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	2200      	movs	r2, #0
 800ce16:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	2200      	movs	r2, #0
 800ce1e:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	6a3a      	ldr	r2, [r7, #32]
 800ce24:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800ce26:	4b3f      	ldr	r3, [pc, #252]	; (800cf24 <netif_add+0x18c>)
 800ce28:	781a      	ldrb	r2, [r3, #0]
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ce34:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800ce36:	683b      	ldr	r3, [r7, #0]
 800ce38:	687a      	ldr	r2, [r7, #4]
 800ce3a:	68b9      	ldr	r1, [r7, #8]
 800ce3c:	68f8      	ldr	r0, [r7, #12]
 800ce3e:	f000 f913 	bl	800d068 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800ce42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce44:	68f8      	ldr	r0, [r7, #12]
 800ce46:	4798      	blx	r3
 800ce48:	4603      	mov	r3, r0
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d001      	beq.n	800ce52 <netif_add+0xba>
    return NULL;
 800ce4e:	2300      	movs	r3, #0
 800ce50:	e058      	b.n	800cf04 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ce58:	2bff      	cmp	r3, #255	; 0xff
 800ce5a:	d103      	bne.n	800ce64 <netif_add+0xcc>
        netif->num = 0;
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	2200      	movs	r2, #0
 800ce60:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800ce64:	2300      	movs	r3, #0
 800ce66:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800ce68:	4b2f      	ldr	r3, [pc, #188]	; (800cf28 <netif_add+0x190>)
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	617b      	str	r3, [r7, #20]
 800ce6e:	e02b      	b.n	800cec8 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800ce70:	697a      	ldr	r2, [r7, #20]
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	429a      	cmp	r2, r3
 800ce76:	d106      	bne.n	800ce86 <netif_add+0xee>
 800ce78:	4b24      	ldr	r3, [pc, #144]	; (800cf0c <netif_add+0x174>)
 800ce7a:	f240 128b 	movw	r2, #395	; 0x18b
 800ce7e:	492b      	ldr	r1, [pc, #172]	; (800cf2c <netif_add+0x194>)
 800ce80:	4824      	ldr	r0, [pc, #144]	; (800cf14 <netif_add+0x17c>)
 800ce82:	f00a fc47 	bl	8017714 <iprintf>
        num_netifs++;
 800ce86:	693b      	ldr	r3, [r7, #16]
 800ce88:	3301      	adds	r3, #1
 800ce8a:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800ce8c:	693b      	ldr	r3, [r7, #16]
 800ce8e:	2bff      	cmp	r3, #255	; 0xff
 800ce90:	dd06      	ble.n	800cea0 <netif_add+0x108>
 800ce92:	4b1e      	ldr	r3, [pc, #120]	; (800cf0c <netif_add+0x174>)
 800ce94:	f240 128d 	movw	r2, #397	; 0x18d
 800ce98:	4925      	ldr	r1, [pc, #148]	; (800cf30 <netif_add+0x198>)
 800ce9a:	481e      	ldr	r0, [pc, #120]	; (800cf14 <netif_add+0x17c>)
 800ce9c:	f00a fc3a 	bl	8017714 <iprintf>
        if (netif2->num == netif->num) {
 800cea0:	697b      	ldr	r3, [r7, #20]
 800cea2:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ceac:	429a      	cmp	r2, r3
 800ceae:	d108      	bne.n	800cec2 <netif_add+0x12a>
          netif->num++;
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ceb6:	3301      	adds	r3, #1
 800ceb8:	b2da      	uxtb	r2, r3
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800cec0:	e005      	b.n	800cece <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800cec2:	697b      	ldr	r3, [r7, #20]
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	617b      	str	r3, [r7, #20]
 800cec8:	697b      	ldr	r3, [r7, #20]
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d1d0      	bne.n	800ce70 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800cece:	697b      	ldr	r3, [r7, #20]
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d1be      	bne.n	800ce52 <netif_add+0xba>
  }
  if (netif->num == 254) {
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ceda:	2bfe      	cmp	r3, #254	; 0xfe
 800cedc:	d103      	bne.n	800cee6 <netif_add+0x14e>
    netif_num = 0;
 800cede:	4b11      	ldr	r3, [pc, #68]	; (800cf24 <netif_add+0x18c>)
 800cee0:	2200      	movs	r2, #0
 800cee2:	701a      	strb	r2, [r3, #0]
 800cee4:	e006      	b.n	800cef4 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ceec:	3301      	adds	r3, #1
 800ceee:	b2da      	uxtb	r2, r3
 800cef0:	4b0c      	ldr	r3, [pc, #48]	; (800cf24 <netif_add+0x18c>)
 800cef2:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800cef4:	4b0c      	ldr	r3, [pc, #48]	; (800cf28 <netif_add+0x190>)
 800cef6:	681a      	ldr	r2, [r3, #0]
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800cefc:	4a0a      	ldr	r2, [pc, #40]	; (800cf28 <netif_add+0x190>)
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800cf02:	68fb      	ldr	r3, [r7, #12]
}
 800cf04:	4618      	mov	r0, r3
 800cf06:	3718      	adds	r7, #24
 800cf08:	46bd      	mov	sp, r7
 800cf0a:	bd80      	pop	{r7, pc}
 800cf0c:	08019778 	.word	0x08019778
 800cf10:	0801980c 	.word	0x0801980c
 800cf14:	080197c8 	.word	0x080197c8
 800cf18:	08019828 	.word	0x08019828
 800cf1c:	0801ba9c 	.word	0x0801ba9c
 800cf20:	0800d343 	.word	0x0800d343
 800cf24:	20004540 	.word	0x20004540
 800cf28:	20009614 	.word	0x20009614
 800cf2c:	0801984c 	.word	0x0801984c
 800cf30:	08019860 	.word	0x08019860

0800cf34 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800cf34:	b580      	push	{r7, lr}
 800cf36:	b082      	sub	sp, #8
 800cf38:	af00      	add	r7, sp, #0
 800cf3a:	6078      	str	r0, [r7, #4]
 800cf3c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800cf3e:	6839      	ldr	r1, [r7, #0]
 800cf40:	6878      	ldr	r0, [r7, #4]
 800cf42:	f002 ffe1 	bl	800ff08 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800cf46:	6839      	ldr	r1, [r7, #0]
 800cf48:	6878      	ldr	r0, [r7, #4]
 800cf4a:	f008 f851 	bl	8014ff0 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800cf4e:	bf00      	nop
 800cf50:	3708      	adds	r7, #8
 800cf52:	46bd      	mov	sp, r7
 800cf54:	bd80      	pop	{r7, pc}
	...

0800cf58 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800cf58:	b580      	push	{r7, lr}
 800cf5a:	b086      	sub	sp, #24
 800cf5c:	af00      	add	r7, sp, #0
 800cf5e:	60f8      	str	r0, [r7, #12]
 800cf60:	60b9      	str	r1, [r7, #8]
 800cf62:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800cf64:	68bb      	ldr	r3, [r7, #8]
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d106      	bne.n	800cf78 <netif_do_set_ipaddr+0x20>
 800cf6a:	4b1d      	ldr	r3, [pc, #116]	; (800cfe0 <netif_do_set_ipaddr+0x88>)
 800cf6c:	f240 12cb 	movw	r2, #459	; 0x1cb
 800cf70:	491c      	ldr	r1, [pc, #112]	; (800cfe4 <netif_do_set_ipaddr+0x8c>)
 800cf72:	481d      	ldr	r0, [pc, #116]	; (800cfe8 <netif_do_set_ipaddr+0x90>)
 800cf74:	f00a fbce 	bl	8017714 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d106      	bne.n	800cf8c <netif_do_set_ipaddr+0x34>
 800cf7e:	4b18      	ldr	r3, [pc, #96]	; (800cfe0 <netif_do_set_ipaddr+0x88>)
 800cf80:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800cf84:	4917      	ldr	r1, [pc, #92]	; (800cfe4 <netif_do_set_ipaddr+0x8c>)
 800cf86:	4818      	ldr	r0, [pc, #96]	; (800cfe8 <netif_do_set_ipaddr+0x90>)
 800cf88:	f00a fbc4 	bl	8017714 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800cf8c:	68bb      	ldr	r3, [r7, #8]
 800cf8e:	681a      	ldr	r2, [r3, #0]
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	3304      	adds	r3, #4
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	429a      	cmp	r2, r3
 800cf98:	d01c      	beq.n	800cfd4 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800cf9a:	68bb      	ldr	r3, [r7, #8]
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	3304      	adds	r3, #4
 800cfa4:	681a      	ldr	r2, [r3, #0]
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800cfaa:	f107 0314 	add.w	r3, r7, #20
 800cfae:	4619      	mov	r1, r3
 800cfb0:	6878      	ldr	r0, [r7, #4]
 800cfb2:	f7ff ffbf 	bl	800cf34 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800cfb6:	68bb      	ldr	r3, [r7, #8]
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d002      	beq.n	800cfc2 <netif_do_set_ipaddr+0x6a>
 800cfbc:	68bb      	ldr	r3, [r7, #8]
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	e000      	b.n	800cfc4 <netif_do_set_ipaddr+0x6c>
 800cfc2:	2300      	movs	r3, #0
 800cfc4:	68fa      	ldr	r2, [r7, #12]
 800cfc6:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800cfc8:	2101      	movs	r1, #1
 800cfca:	68f8      	ldr	r0, [r7, #12]
 800cfcc:	f000 f8d2 	bl	800d174 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800cfd0:	2301      	movs	r3, #1
 800cfd2:	e000      	b.n	800cfd6 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800cfd4:	2300      	movs	r3, #0
}
 800cfd6:	4618      	mov	r0, r3
 800cfd8:	3718      	adds	r7, #24
 800cfda:	46bd      	mov	sp, r7
 800cfdc:	bd80      	pop	{r7, pc}
 800cfde:	bf00      	nop
 800cfe0:	08019778 	.word	0x08019778
 800cfe4:	08019890 	.word	0x08019890
 800cfe8:	080197c8 	.word	0x080197c8

0800cfec <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800cfec:	b480      	push	{r7}
 800cfee:	b085      	sub	sp, #20
 800cff0:	af00      	add	r7, sp, #0
 800cff2:	60f8      	str	r0, [r7, #12]
 800cff4:	60b9      	str	r1, [r7, #8]
 800cff6:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800cff8:	68bb      	ldr	r3, [r7, #8]
 800cffa:	681a      	ldr	r2, [r3, #0]
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	3308      	adds	r3, #8
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	429a      	cmp	r2, r3
 800d004:	d00a      	beq.n	800d01c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800d006:	68bb      	ldr	r3, [r7, #8]
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d002      	beq.n	800d012 <netif_do_set_netmask+0x26>
 800d00c:	68bb      	ldr	r3, [r7, #8]
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	e000      	b.n	800d014 <netif_do_set_netmask+0x28>
 800d012:	2300      	movs	r3, #0
 800d014:	68fa      	ldr	r2, [r7, #12]
 800d016:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800d018:	2301      	movs	r3, #1
 800d01a:	e000      	b.n	800d01e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800d01c:	2300      	movs	r3, #0
}
 800d01e:	4618      	mov	r0, r3
 800d020:	3714      	adds	r7, #20
 800d022:	46bd      	mov	sp, r7
 800d024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d028:	4770      	bx	lr

0800d02a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800d02a:	b480      	push	{r7}
 800d02c:	b085      	sub	sp, #20
 800d02e:	af00      	add	r7, sp, #0
 800d030:	60f8      	str	r0, [r7, #12]
 800d032:	60b9      	str	r1, [r7, #8]
 800d034:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800d036:	68bb      	ldr	r3, [r7, #8]
 800d038:	681a      	ldr	r2, [r3, #0]
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	330c      	adds	r3, #12
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	429a      	cmp	r2, r3
 800d042:	d00a      	beq.n	800d05a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800d044:	68bb      	ldr	r3, [r7, #8]
 800d046:	2b00      	cmp	r3, #0
 800d048:	d002      	beq.n	800d050 <netif_do_set_gw+0x26>
 800d04a:	68bb      	ldr	r3, [r7, #8]
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	e000      	b.n	800d052 <netif_do_set_gw+0x28>
 800d050:	2300      	movs	r3, #0
 800d052:	68fa      	ldr	r2, [r7, #12]
 800d054:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800d056:	2301      	movs	r3, #1
 800d058:	e000      	b.n	800d05c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800d05a:	2300      	movs	r3, #0
}
 800d05c:	4618      	mov	r0, r3
 800d05e:	3714      	adds	r7, #20
 800d060:	46bd      	mov	sp, r7
 800d062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d066:	4770      	bx	lr

0800d068 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800d068:	b580      	push	{r7, lr}
 800d06a:	b088      	sub	sp, #32
 800d06c:	af00      	add	r7, sp, #0
 800d06e:	60f8      	str	r0, [r7, #12]
 800d070:	60b9      	str	r1, [r7, #8]
 800d072:	607a      	str	r2, [r7, #4]
 800d074:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800d076:	2300      	movs	r3, #0
 800d078:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800d07a:	2300      	movs	r3, #0
 800d07c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800d07e:	68bb      	ldr	r3, [r7, #8]
 800d080:	2b00      	cmp	r3, #0
 800d082:	d101      	bne.n	800d088 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800d084:	4b1c      	ldr	r3, [pc, #112]	; (800d0f8 <netif_set_addr+0x90>)
 800d086:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d101      	bne.n	800d092 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800d08e:	4b1a      	ldr	r3, [pc, #104]	; (800d0f8 <netif_set_addr+0x90>)
 800d090:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800d092:	683b      	ldr	r3, [r7, #0]
 800d094:	2b00      	cmp	r3, #0
 800d096:	d101      	bne.n	800d09c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800d098:	4b17      	ldr	r3, [pc, #92]	; (800d0f8 <netif_set_addr+0x90>)
 800d09a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800d09c:	68bb      	ldr	r3, [r7, #8]
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d003      	beq.n	800d0aa <netif_set_addr+0x42>
 800d0a2:	68bb      	ldr	r3, [r7, #8]
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d101      	bne.n	800d0ae <netif_set_addr+0x46>
 800d0aa:	2301      	movs	r3, #1
 800d0ac:	e000      	b.n	800d0b0 <netif_set_addr+0x48>
 800d0ae:	2300      	movs	r3, #0
 800d0b0:	617b      	str	r3, [r7, #20]
  if (remove) {
 800d0b2:	697b      	ldr	r3, [r7, #20]
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d006      	beq.n	800d0c6 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800d0b8:	f107 0310 	add.w	r3, r7, #16
 800d0bc:	461a      	mov	r2, r3
 800d0be:	68b9      	ldr	r1, [r7, #8]
 800d0c0:	68f8      	ldr	r0, [r7, #12]
 800d0c2:	f7ff ff49 	bl	800cf58 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800d0c6:	69fa      	ldr	r2, [r7, #28]
 800d0c8:	6879      	ldr	r1, [r7, #4]
 800d0ca:	68f8      	ldr	r0, [r7, #12]
 800d0cc:	f7ff ff8e 	bl	800cfec <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800d0d0:	69ba      	ldr	r2, [r7, #24]
 800d0d2:	6839      	ldr	r1, [r7, #0]
 800d0d4:	68f8      	ldr	r0, [r7, #12]
 800d0d6:	f7ff ffa8 	bl	800d02a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800d0da:	697b      	ldr	r3, [r7, #20]
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d106      	bne.n	800d0ee <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800d0e0:	f107 0310 	add.w	r3, r7, #16
 800d0e4:	461a      	mov	r2, r3
 800d0e6:	68b9      	ldr	r1, [r7, #8]
 800d0e8:	68f8      	ldr	r0, [r7, #12]
 800d0ea:	f7ff ff35 	bl	800cf58 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800d0ee:	bf00      	nop
 800d0f0:	3720      	adds	r7, #32
 800d0f2:	46bd      	mov	sp, r7
 800d0f4:	bd80      	pop	{r7, pc}
 800d0f6:	bf00      	nop
 800d0f8:	0801ba9c 	.word	0x0801ba9c

0800d0fc <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800d0fc:	b480      	push	{r7}
 800d0fe:	b083      	sub	sp, #12
 800d100:	af00      	add	r7, sp, #0
 800d102:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800d104:	4a04      	ldr	r2, [pc, #16]	; (800d118 <netif_set_default+0x1c>)
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800d10a:	bf00      	nop
 800d10c:	370c      	adds	r7, #12
 800d10e:	46bd      	mov	sp, r7
 800d110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d114:	4770      	bx	lr
 800d116:	bf00      	nop
 800d118:	20009618 	.word	0x20009618

0800d11c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800d11c:	b580      	push	{r7, lr}
 800d11e:	b082      	sub	sp, #8
 800d120:	af00      	add	r7, sp, #0
 800d122:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	2b00      	cmp	r3, #0
 800d128:	d107      	bne.n	800d13a <netif_set_up+0x1e>
 800d12a:	4b0f      	ldr	r3, [pc, #60]	; (800d168 <netif_set_up+0x4c>)
 800d12c:	f44f 7254 	mov.w	r2, #848	; 0x350
 800d130:	490e      	ldr	r1, [pc, #56]	; (800d16c <netif_set_up+0x50>)
 800d132:	480f      	ldr	r0, [pc, #60]	; (800d170 <netif_set_up+0x54>)
 800d134:	f00a faee 	bl	8017714 <iprintf>
 800d138:	e013      	b.n	800d162 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d140:	f003 0301 	and.w	r3, r3, #1
 800d144:	2b00      	cmp	r3, #0
 800d146:	d10c      	bne.n	800d162 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d14e:	f043 0301 	orr.w	r3, r3, #1
 800d152:	b2da      	uxtb	r2, r3
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800d15a:	2103      	movs	r1, #3
 800d15c:	6878      	ldr	r0, [r7, #4]
 800d15e:	f000 f809 	bl	800d174 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800d162:	3708      	adds	r7, #8
 800d164:	46bd      	mov	sp, r7
 800d166:	bd80      	pop	{r7, pc}
 800d168:	08019778 	.word	0x08019778
 800d16c:	08019900 	.word	0x08019900
 800d170:	080197c8 	.word	0x080197c8

0800d174 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800d174:	b580      	push	{r7, lr}
 800d176:	b082      	sub	sp, #8
 800d178:	af00      	add	r7, sp, #0
 800d17a:	6078      	str	r0, [r7, #4]
 800d17c:	460b      	mov	r3, r1
 800d17e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	2b00      	cmp	r3, #0
 800d184:	d106      	bne.n	800d194 <netif_issue_reports+0x20>
 800d186:	4b18      	ldr	r3, [pc, #96]	; (800d1e8 <netif_issue_reports+0x74>)
 800d188:	f240 326d 	movw	r2, #877	; 0x36d
 800d18c:	4917      	ldr	r1, [pc, #92]	; (800d1ec <netif_issue_reports+0x78>)
 800d18e:	4818      	ldr	r0, [pc, #96]	; (800d1f0 <netif_issue_reports+0x7c>)
 800d190:	f00a fac0 	bl	8017714 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d19a:	f003 0304 	and.w	r3, r3, #4
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d01e      	beq.n	800d1e0 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d1a8:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d017      	beq.n	800d1e0 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800d1b0:	78fb      	ldrb	r3, [r7, #3]
 800d1b2:	f003 0301 	and.w	r3, r3, #1
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d013      	beq.n	800d1e2 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	3304      	adds	r3, #4
 800d1be:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d00e      	beq.n	800d1e2 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d1ca:	f003 0308 	and.w	r3, r3, #8
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d007      	beq.n	800d1e2 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	3304      	adds	r3, #4
 800d1d6:	4619      	mov	r1, r3
 800d1d8:	6878      	ldr	r0, [r7, #4]
 800d1da:	f7fd fc85 	bl	800aae8 <etharp_request>
 800d1de:	e000      	b.n	800d1e2 <netif_issue_reports+0x6e>
    return;
 800d1e0:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800d1e2:	3708      	adds	r7, #8
 800d1e4:	46bd      	mov	sp, r7
 800d1e6:	bd80      	pop	{r7, pc}
 800d1e8:	08019778 	.word	0x08019778
 800d1ec:	0801991c 	.word	0x0801991c
 800d1f0:	080197c8 	.word	0x080197c8

0800d1f4 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800d1f4:	b580      	push	{r7, lr}
 800d1f6:	b082      	sub	sp, #8
 800d1f8:	af00      	add	r7, sp, #0
 800d1fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d107      	bne.n	800d212 <netif_set_down+0x1e>
 800d202:	4b12      	ldr	r3, [pc, #72]	; (800d24c <netif_set_down+0x58>)
 800d204:	f240 329b 	movw	r2, #923	; 0x39b
 800d208:	4911      	ldr	r1, [pc, #68]	; (800d250 <netif_set_down+0x5c>)
 800d20a:	4812      	ldr	r0, [pc, #72]	; (800d254 <netif_set_down+0x60>)
 800d20c:	f00a fa82 	bl	8017714 <iprintf>
 800d210:	e019      	b.n	800d246 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d218:	f003 0301 	and.w	r3, r3, #1
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d012      	beq.n	800d246 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d226:	f023 0301 	bic.w	r3, r3, #1
 800d22a:	b2da      	uxtb	r2, r3
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d238:	f003 0308 	and.w	r3, r3, #8
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d002      	beq.n	800d246 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800d240:	6878      	ldr	r0, [r7, #4]
 800d242:	f7fd f80f 	bl	800a264 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800d246:	3708      	adds	r7, #8
 800d248:	46bd      	mov	sp, r7
 800d24a:	bd80      	pop	{r7, pc}
 800d24c:	08019778 	.word	0x08019778
 800d250:	08019940 	.word	0x08019940
 800d254:	080197c8 	.word	0x080197c8

0800d258 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800d258:	b580      	push	{r7, lr}
 800d25a:	b082      	sub	sp, #8
 800d25c:	af00      	add	r7, sp, #0
 800d25e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	2b00      	cmp	r3, #0
 800d264:	d107      	bne.n	800d276 <netif_set_link_up+0x1e>
 800d266:	4b13      	ldr	r3, [pc, #76]	; (800d2b4 <netif_set_link_up+0x5c>)
 800d268:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800d26c:	4912      	ldr	r1, [pc, #72]	; (800d2b8 <netif_set_link_up+0x60>)
 800d26e:	4813      	ldr	r0, [pc, #76]	; (800d2bc <netif_set_link_up+0x64>)
 800d270:	f00a fa50 	bl	8017714 <iprintf>
 800d274:	e01b      	b.n	800d2ae <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d27c:	f003 0304 	and.w	r3, r3, #4
 800d280:	2b00      	cmp	r3, #0
 800d282:	d114      	bne.n	800d2ae <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d28a:	f043 0304 	orr.w	r3, r3, #4
 800d28e:	b2da      	uxtb	r2, r3
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800d296:	2103      	movs	r1, #3
 800d298:	6878      	ldr	r0, [r7, #4]
 800d29a:	f7ff ff6b 	bl	800d174 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	69db      	ldr	r3, [r3, #28]
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d003      	beq.n	800d2ae <netif_set_link_up+0x56>
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	69db      	ldr	r3, [r3, #28]
 800d2aa:	6878      	ldr	r0, [r7, #4]
 800d2ac:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800d2ae:	3708      	adds	r7, #8
 800d2b0:	46bd      	mov	sp, r7
 800d2b2:	bd80      	pop	{r7, pc}
 800d2b4:	08019778 	.word	0x08019778
 800d2b8:	08019960 	.word	0x08019960
 800d2bc:	080197c8 	.word	0x080197c8

0800d2c0 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800d2c0:	b580      	push	{r7, lr}
 800d2c2:	b082      	sub	sp, #8
 800d2c4:	af00      	add	r7, sp, #0
 800d2c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d107      	bne.n	800d2de <netif_set_link_down+0x1e>
 800d2ce:	4b11      	ldr	r3, [pc, #68]	; (800d314 <netif_set_link_down+0x54>)
 800d2d0:	f240 4206 	movw	r2, #1030	; 0x406
 800d2d4:	4910      	ldr	r1, [pc, #64]	; (800d318 <netif_set_link_down+0x58>)
 800d2d6:	4811      	ldr	r0, [pc, #68]	; (800d31c <netif_set_link_down+0x5c>)
 800d2d8:	f00a fa1c 	bl	8017714 <iprintf>
 800d2dc:	e017      	b.n	800d30e <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d2e4:	f003 0304 	and.w	r3, r3, #4
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d010      	beq.n	800d30e <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d2f2:	f023 0304 	bic.w	r3, r3, #4
 800d2f6:	b2da      	uxtb	r2, r3
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	69db      	ldr	r3, [r3, #28]
 800d302:	2b00      	cmp	r3, #0
 800d304:	d003      	beq.n	800d30e <netif_set_link_down+0x4e>
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	69db      	ldr	r3, [r3, #28]
 800d30a:	6878      	ldr	r0, [r7, #4]
 800d30c:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800d30e:	3708      	adds	r7, #8
 800d310:	46bd      	mov	sp, r7
 800d312:	bd80      	pop	{r7, pc}
 800d314:	08019778 	.word	0x08019778
 800d318:	08019984 	.word	0x08019984
 800d31c:	080197c8 	.word	0x080197c8

0800d320 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800d320:	b480      	push	{r7}
 800d322:	b083      	sub	sp, #12
 800d324:	af00      	add	r7, sp, #0
 800d326:	6078      	str	r0, [r7, #4]
 800d328:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d002      	beq.n	800d336 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	683a      	ldr	r2, [r7, #0]
 800d334:	61da      	str	r2, [r3, #28]
  }
}
 800d336:	bf00      	nop
 800d338:	370c      	adds	r7, #12
 800d33a:	46bd      	mov	sp, r7
 800d33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d340:	4770      	bx	lr

0800d342 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800d342:	b480      	push	{r7}
 800d344:	b085      	sub	sp, #20
 800d346:	af00      	add	r7, sp, #0
 800d348:	60f8      	str	r0, [r7, #12]
 800d34a:	60b9      	str	r1, [r7, #8]
 800d34c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800d34e:	f06f 030b 	mvn.w	r3, #11
}
 800d352:	4618      	mov	r0, r3
 800d354:	3714      	adds	r7, #20
 800d356:	46bd      	mov	sp, r7
 800d358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d35c:	4770      	bx	lr
	...

0800d360 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800d360:	b480      	push	{r7}
 800d362:	b085      	sub	sp, #20
 800d364:	af00      	add	r7, sp, #0
 800d366:	4603      	mov	r3, r0
 800d368:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800d36a:	79fb      	ldrb	r3, [r7, #7]
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d013      	beq.n	800d398 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800d370:	4b0d      	ldr	r3, [pc, #52]	; (800d3a8 <netif_get_by_index+0x48>)
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	60fb      	str	r3, [r7, #12]
 800d376:	e00c      	b.n	800d392 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d37e:	3301      	adds	r3, #1
 800d380:	b2db      	uxtb	r3, r3
 800d382:	79fa      	ldrb	r2, [r7, #7]
 800d384:	429a      	cmp	r2, r3
 800d386:	d101      	bne.n	800d38c <netif_get_by_index+0x2c>
        return netif; /* found! */
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	e006      	b.n	800d39a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	60fb      	str	r3, [r7, #12]
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	2b00      	cmp	r3, #0
 800d396:	d1ef      	bne.n	800d378 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800d398:	2300      	movs	r3, #0
}
 800d39a:	4618      	mov	r0, r3
 800d39c:	3714      	adds	r7, #20
 800d39e:	46bd      	mov	sp, r7
 800d3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a4:	4770      	bx	lr
 800d3a6:	bf00      	nop
 800d3a8:	20009614 	.word	0x20009614

0800d3ac <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800d3ac:	b580      	push	{r7, lr}
 800d3ae:	b082      	sub	sp, #8
 800d3b0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800d3b2:	f008 f81b 	bl	80153ec <sys_arch_protect>
 800d3b6:	6038      	str	r0, [r7, #0]
 800d3b8:	4b0d      	ldr	r3, [pc, #52]	; (800d3f0 <pbuf_free_ooseq+0x44>)
 800d3ba:	2200      	movs	r2, #0
 800d3bc:	701a      	strb	r2, [r3, #0]
 800d3be:	6838      	ldr	r0, [r7, #0]
 800d3c0:	f008 f822 	bl	8015408 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800d3c4:	4b0b      	ldr	r3, [pc, #44]	; (800d3f4 <pbuf_free_ooseq+0x48>)
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	607b      	str	r3, [r7, #4]
 800d3ca:	e00a      	b.n	800d3e2 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d003      	beq.n	800d3dc <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800d3d4:	6878      	ldr	r0, [r7, #4]
 800d3d6:	f002 fdd5 	bl	800ff84 <tcp_free_ooseq>
      return;
 800d3da:	e005      	b.n	800d3e8 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	68db      	ldr	r3, [r3, #12]
 800d3e0:	607b      	str	r3, [r7, #4]
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d1f1      	bne.n	800d3cc <pbuf_free_ooseq+0x20>
    }
  }
}
 800d3e8:	3708      	adds	r7, #8
 800d3ea:	46bd      	mov	sp, r7
 800d3ec:	bd80      	pop	{r7, pc}
 800d3ee:	bf00      	nop
 800d3f0:	2000961c 	.word	0x2000961c
 800d3f4:	20009624 	.word	0x20009624

0800d3f8 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800d3f8:	b580      	push	{r7, lr}
 800d3fa:	b082      	sub	sp, #8
 800d3fc:	af00      	add	r7, sp, #0
 800d3fe:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800d400:	f7ff ffd4 	bl	800d3ac <pbuf_free_ooseq>
}
 800d404:	bf00      	nop
 800d406:	3708      	adds	r7, #8
 800d408:	46bd      	mov	sp, r7
 800d40a:	bd80      	pop	{r7, pc}

0800d40c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800d40c:	b580      	push	{r7, lr}
 800d40e:	b082      	sub	sp, #8
 800d410:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800d412:	f007 ffeb 	bl	80153ec <sys_arch_protect>
 800d416:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800d418:	4b0f      	ldr	r3, [pc, #60]	; (800d458 <pbuf_pool_is_empty+0x4c>)
 800d41a:	781b      	ldrb	r3, [r3, #0]
 800d41c:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800d41e:	4b0e      	ldr	r3, [pc, #56]	; (800d458 <pbuf_pool_is_empty+0x4c>)
 800d420:	2201      	movs	r2, #1
 800d422:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800d424:	6878      	ldr	r0, [r7, #4]
 800d426:	f007 ffef 	bl	8015408 <sys_arch_unprotect>

  if (!queued) {
 800d42a:	78fb      	ldrb	r3, [r7, #3]
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d10f      	bne.n	800d450 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800d430:	2100      	movs	r1, #0
 800d432:	480a      	ldr	r0, [pc, #40]	; (800d45c <pbuf_pool_is_empty+0x50>)
 800d434:	f7fa fe12 	bl	800805c <tcpip_try_callback>
 800d438:	4603      	mov	r3, r0
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d008      	beq.n	800d450 <pbuf_pool_is_empty+0x44>
 800d43e:	f007 ffd5 	bl	80153ec <sys_arch_protect>
 800d442:	6078      	str	r0, [r7, #4]
 800d444:	4b04      	ldr	r3, [pc, #16]	; (800d458 <pbuf_pool_is_empty+0x4c>)
 800d446:	2200      	movs	r2, #0
 800d448:	701a      	strb	r2, [r3, #0]
 800d44a:	6878      	ldr	r0, [r7, #4]
 800d44c:	f007 ffdc 	bl	8015408 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800d450:	bf00      	nop
 800d452:	3708      	adds	r7, #8
 800d454:	46bd      	mov	sp, r7
 800d456:	bd80      	pop	{r7, pc}
 800d458:	2000961c 	.word	0x2000961c
 800d45c:	0800d3f9 	.word	0x0800d3f9

0800d460 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800d460:	b480      	push	{r7}
 800d462:	b085      	sub	sp, #20
 800d464:	af00      	add	r7, sp, #0
 800d466:	60f8      	str	r0, [r7, #12]
 800d468:	60b9      	str	r1, [r7, #8]
 800d46a:	4611      	mov	r1, r2
 800d46c:	461a      	mov	r2, r3
 800d46e:	460b      	mov	r3, r1
 800d470:	80fb      	strh	r3, [r7, #6]
 800d472:	4613      	mov	r3, r2
 800d474:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	2200      	movs	r2, #0
 800d47a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	68ba      	ldr	r2, [r7, #8]
 800d480:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	88fa      	ldrh	r2, [r7, #6]
 800d486:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	88ba      	ldrh	r2, [r7, #4]
 800d48c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800d48e:	8b3b      	ldrh	r3, [r7, #24]
 800d490:	b2da      	uxtb	r2, r3
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	7f3a      	ldrb	r2, [r7, #28]
 800d49a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	2201      	movs	r2, #1
 800d4a0:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	2200      	movs	r2, #0
 800d4a6:	73da      	strb	r2, [r3, #15]
}
 800d4a8:	bf00      	nop
 800d4aa:	3714      	adds	r7, #20
 800d4ac:	46bd      	mov	sp, r7
 800d4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4b2:	4770      	bx	lr

0800d4b4 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800d4b4:	b580      	push	{r7, lr}
 800d4b6:	b08c      	sub	sp, #48	; 0x30
 800d4b8:	af02      	add	r7, sp, #8
 800d4ba:	4603      	mov	r3, r0
 800d4bc:	71fb      	strb	r3, [r7, #7]
 800d4be:	460b      	mov	r3, r1
 800d4c0:	80bb      	strh	r3, [r7, #4]
 800d4c2:	4613      	mov	r3, r2
 800d4c4:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800d4c6:	79fb      	ldrb	r3, [r7, #7]
 800d4c8:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800d4ca:	887b      	ldrh	r3, [r7, #2]
 800d4cc:	2b41      	cmp	r3, #65	; 0x41
 800d4ce:	d00b      	beq.n	800d4e8 <pbuf_alloc+0x34>
 800d4d0:	2b41      	cmp	r3, #65	; 0x41
 800d4d2:	dc02      	bgt.n	800d4da <pbuf_alloc+0x26>
 800d4d4:	2b01      	cmp	r3, #1
 800d4d6:	d007      	beq.n	800d4e8 <pbuf_alloc+0x34>
 800d4d8:	e0c2      	b.n	800d660 <pbuf_alloc+0x1ac>
 800d4da:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800d4de:	d00b      	beq.n	800d4f8 <pbuf_alloc+0x44>
 800d4e0:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800d4e4:	d070      	beq.n	800d5c8 <pbuf_alloc+0x114>
 800d4e6:	e0bb      	b.n	800d660 <pbuf_alloc+0x1ac>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800d4e8:	887a      	ldrh	r2, [r7, #2]
 800d4ea:	88bb      	ldrh	r3, [r7, #4]
 800d4ec:	4619      	mov	r1, r3
 800d4ee:	2000      	movs	r0, #0
 800d4f0:	f000 f8d2 	bl	800d698 <pbuf_alloc_reference>
 800d4f4:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800d4f6:	e0bd      	b.n	800d674 <pbuf_alloc+0x1c0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800d4f8:	2300      	movs	r3, #0
 800d4fa:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800d4fc:	2300      	movs	r3, #0
 800d4fe:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800d500:	88bb      	ldrh	r3, [r7, #4]
 800d502:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800d504:	200d      	movs	r0, #13
 800d506:	f7ff fbc3 	bl	800cc90 <memp_malloc>
 800d50a:	6178      	str	r0, [r7, #20]
        if (q == NULL) {
 800d50c:	697b      	ldr	r3, [r7, #20]
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d109      	bne.n	800d526 <pbuf_alloc+0x72>
          PBUF_POOL_IS_EMPTY();
 800d512:	f7ff ff7b 	bl	800d40c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800d516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d002      	beq.n	800d522 <pbuf_alloc+0x6e>
            pbuf_free(p);
 800d51c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d51e:	f000 fadd 	bl	800dadc <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800d522:	2300      	movs	r3, #0
 800d524:	e0a7      	b.n	800d676 <pbuf_alloc+0x1c2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800d526:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d528:	3303      	adds	r3, #3
 800d52a:	b29b      	uxth	r3, r3
 800d52c:	f023 0303 	bic.w	r3, r3, #3
 800d530:	b29b      	uxth	r3, r3
 800d532:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800d536:	b29a      	uxth	r2, r3
 800d538:	8b7b      	ldrh	r3, [r7, #26]
 800d53a:	4293      	cmp	r3, r2
 800d53c:	bf28      	it	cs
 800d53e:	4613      	movcs	r3, r2
 800d540:	827b      	strh	r3, [r7, #18]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800d542:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d544:	3310      	adds	r3, #16
 800d546:	697a      	ldr	r2, [r7, #20]
 800d548:	4413      	add	r3, r2
 800d54a:	3303      	adds	r3, #3
 800d54c:	f023 0303 	bic.w	r3, r3, #3
 800d550:	4618      	mov	r0, r3
 800d552:	8a79      	ldrh	r1, [r7, #18]
 800d554:	8b7a      	ldrh	r2, [r7, #26]
 800d556:	2300      	movs	r3, #0
 800d558:	9301      	str	r3, [sp, #4]
 800d55a:	887b      	ldrh	r3, [r7, #2]
 800d55c:	9300      	str	r3, [sp, #0]
 800d55e:	460b      	mov	r3, r1
 800d560:	4601      	mov	r1, r0
 800d562:	6978      	ldr	r0, [r7, #20]
 800d564:	f7ff ff7c 	bl	800d460 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800d568:	697b      	ldr	r3, [r7, #20]
 800d56a:	685b      	ldr	r3, [r3, #4]
 800d56c:	f003 0303 	and.w	r3, r3, #3
 800d570:	2b00      	cmp	r3, #0
 800d572:	d006      	beq.n	800d582 <pbuf_alloc+0xce>
 800d574:	4b42      	ldr	r3, [pc, #264]	; (800d680 <pbuf_alloc+0x1cc>)
 800d576:	f240 1201 	movw	r2, #257	; 0x101
 800d57a:	4942      	ldr	r1, [pc, #264]	; (800d684 <pbuf_alloc+0x1d0>)
 800d57c:	4842      	ldr	r0, [pc, #264]	; (800d688 <pbuf_alloc+0x1d4>)
 800d57e:	f00a f8c9 	bl	8017714 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800d582:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d584:	3303      	adds	r3, #3
 800d586:	f023 0303 	bic.w	r3, r3, #3
 800d58a:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800d58e:	d106      	bne.n	800d59e <pbuf_alloc+0xea>
 800d590:	4b3b      	ldr	r3, [pc, #236]	; (800d680 <pbuf_alloc+0x1cc>)
 800d592:	f240 1203 	movw	r2, #259	; 0x103
 800d596:	493d      	ldr	r1, [pc, #244]	; (800d68c <pbuf_alloc+0x1d8>)
 800d598:	483b      	ldr	r0, [pc, #236]	; (800d688 <pbuf_alloc+0x1d4>)
 800d59a:	f00a f8bb 	bl	8017714 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800d59e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d102      	bne.n	800d5aa <pbuf_alloc+0xf6>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800d5a4:	697b      	ldr	r3, [r7, #20]
 800d5a6:	627b      	str	r3, [r7, #36]	; 0x24
 800d5a8:	e002      	b.n	800d5b0 <pbuf_alloc+0xfc>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800d5aa:	69fb      	ldr	r3, [r7, #28]
 800d5ac:	697a      	ldr	r2, [r7, #20]
 800d5ae:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800d5b0:	697b      	ldr	r3, [r7, #20]
 800d5b2:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800d5b4:	8b7a      	ldrh	r2, [r7, #26]
 800d5b6:	8a7b      	ldrh	r3, [r7, #18]
 800d5b8:	1ad3      	subs	r3, r2, r3
 800d5ba:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800d5bc:	2300      	movs	r3, #0
 800d5be:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800d5c0:	8b7b      	ldrh	r3, [r7, #26]
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d19e      	bne.n	800d504 <pbuf_alloc+0x50>
      break;
 800d5c6:	e055      	b.n	800d674 <pbuf_alloc+0x1c0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800d5c8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d5ca:	3303      	adds	r3, #3
 800d5cc:	b29b      	uxth	r3, r3
 800d5ce:	f023 0303 	bic.w	r3, r3, #3
 800d5d2:	b29a      	uxth	r2, r3
 800d5d4:	88bb      	ldrh	r3, [r7, #4]
 800d5d6:	3303      	adds	r3, #3
 800d5d8:	b29b      	uxth	r3, r3
 800d5da:	f023 0303 	bic.w	r3, r3, #3
 800d5de:	b29b      	uxth	r3, r3
 800d5e0:	4413      	add	r3, r2
 800d5e2:	823b      	strh	r3, [r7, #16]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800d5e4:	8a3b      	ldrh	r3, [r7, #16]
 800d5e6:	3310      	adds	r3, #16
 800d5e8:	81fb      	strh	r3, [r7, #14]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800d5ea:	8a3a      	ldrh	r2, [r7, #16]
 800d5ec:	88bb      	ldrh	r3, [r7, #4]
 800d5ee:	3303      	adds	r3, #3
 800d5f0:	f023 0303 	bic.w	r3, r3, #3
 800d5f4:	429a      	cmp	r2, r3
 800d5f6:	d306      	bcc.n	800d606 <pbuf_alloc+0x152>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800d5f8:	89fa      	ldrh	r2, [r7, #14]
 800d5fa:	88bb      	ldrh	r3, [r7, #4]
 800d5fc:	3303      	adds	r3, #3
 800d5fe:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800d602:	429a      	cmp	r2, r3
 800d604:	d201      	bcs.n	800d60a <pbuf_alloc+0x156>
        return NULL;
 800d606:	2300      	movs	r3, #0
 800d608:	e035      	b.n	800d676 <pbuf_alloc+0x1c2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800d60a:	89fb      	ldrh	r3, [r7, #14]
 800d60c:	4618      	mov	r0, r3
 800d60e:	f7ff f9bd 	bl	800c98c <mem_malloc>
 800d612:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800d614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d616:	2b00      	cmp	r3, #0
 800d618:	d101      	bne.n	800d61e <pbuf_alloc+0x16a>
        return NULL;
 800d61a:	2300      	movs	r3, #0
 800d61c:	e02b      	b.n	800d676 <pbuf_alloc+0x1c2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800d61e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d620:	3310      	adds	r3, #16
 800d622:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d624:	4413      	add	r3, r2
 800d626:	3303      	adds	r3, #3
 800d628:	f023 0303 	bic.w	r3, r3, #3
 800d62c:	4618      	mov	r0, r3
 800d62e:	88b9      	ldrh	r1, [r7, #4]
 800d630:	88ba      	ldrh	r2, [r7, #4]
 800d632:	2300      	movs	r3, #0
 800d634:	9301      	str	r3, [sp, #4]
 800d636:	887b      	ldrh	r3, [r7, #2]
 800d638:	9300      	str	r3, [sp, #0]
 800d63a:	460b      	mov	r3, r1
 800d63c:	4601      	mov	r1, r0
 800d63e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d640:	f7ff ff0e 	bl	800d460 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800d644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d646:	685b      	ldr	r3, [r3, #4]
 800d648:	f003 0303 	and.w	r3, r3, #3
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d010      	beq.n	800d672 <pbuf_alloc+0x1be>
 800d650:	4b0b      	ldr	r3, [pc, #44]	; (800d680 <pbuf_alloc+0x1cc>)
 800d652:	f240 1223 	movw	r2, #291	; 0x123
 800d656:	490e      	ldr	r1, [pc, #56]	; (800d690 <pbuf_alloc+0x1dc>)
 800d658:	480b      	ldr	r0, [pc, #44]	; (800d688 <pbuf_alloc+0x1d4>)
 800d65a:	f00a f85b 	bl	8017714 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800d65e:	e008      	b.n	800d672 <pbuf_alloc+0x1be>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800d660:	4b07      	ldr	r3, [pc, #28]	; (800d680 <pbuf_alloc+0x1cc>)
 800d662:	f240 1227 	movw	r2, #295	; 0x127
 800d666:	490b      	ldr	r1, [pc, #44]	; (800d694 <pbuf_alloc+0x1e0>)
 800d668:	4807      	ldr	r0, [pc, #28]	; (800d688 <pbuf_alloc+0x1d4>)
 800d66a:	f00a f853 	bl	8017714 <iprintf>
      return NULL;
 800d66e:	2300      	movs	r3, #0
 800d670:	e001      	b.n	800d676 <pbuf_alloc+0x1c2>
      break;
 800d672:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800d674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d676:	4618      	mov	r0, r3
 800d678:	3728      	adds	r7, #40	; 0x28
 800d67a:	46bd      	mov	sp, r7
 800d67c:	bd80      	pop	{r7, pc}
 800d67e:	bf00      	nop
 800d680:	080199a8 	.word	0x080199a8
 800d684:	080199d8 	.word	0x080199d8
 800d688:	08019a08 	.word	0x08019a08
 800d68c:	08019a30 	.word	0x08019a30
 800d690:	08019a64 	.word	0x08019a64
 800d694:	08019a90 	.word	0x08019a90

0800d698 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800d698:	b580      	push	{r7, lr}
 800d69a:	b086      	sub	sp, #24
 800d69c:	af02      	add	r7, sp, #8
 800d69e:	6078      	str	r0, [r7, #4]
 800d6a0:	460b      	mov	r3, r1
 800d6a2:	807b      	strh	r3, [r7, #2]
 800d6a4:	4613      	mov	r3, r2
 800d6a6:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800d6a8:	883b      	ldrh	r3, [r7, #0]
 800d6aa:	2b41      	cmp	r3, #65	; 0x41
 800d6ac:	d009      	beq.n	800d6c2 <pbuf_alloc_reference+0x2a>
 800d6ae:	883b      	ldrh	r3, [r7, #0]
 800d6b0:	2b01      	cmp	r3, #1
 800d6b2:	d006      	beq.n	800d6c2 <pbuf_alloc_reference+0x2a>
 800d6b4:	4b0f      	ldr	r3, [pc, #60]	; (800d6f4 <pbuf_alloc_reference+0x5c>)
 800d6b6:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800d6ba:	490f      	ldr	r1, [pc, #60]	; (800d6f8 <pbuf_alloc_reference+0x60>)
 800d6bc:	480f      	ldr	r0, [pc, #60]	; (800d6fc <pbuf_alloc_reference+0x64>)
 800d6be:	f00a f829 	bl	8017714 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800d6c2:	200c      	movs	r0, #12
 800d6c4:	f7ff fae4 	bl	800cc90 <memp_malloc>
 800d6c8:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d101      	bne.n	800d6d4 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800d6d0:	2300      	movs	r3, #0
 800d6d2:	e00b      	b.n	800d6ec <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800d6d4:	8879      	ldrh	r1, [r7, #2]
 800d6d6:	887a      	ldrh	r2, [r7, #2]
 800d6d8:	2300      	movs	r3, #0
 800d6da:	9301      	str	r3, [sp, #4]
 800d6dc:	883b      	ldrh	r3, [r7, #0]
 800d6de:	9300      	str	r3, [sp, #0]
 800d6e0:	460b      	mov	r3, r1
 800d6e2:	6879      	ldr	r1, [r7, #4]
 800d6e4:	68f8      	ldr	r0, [r7, #12]
 800d6e6:	f7ff febb 	bl	800d460 <pbuf_init_alloced_pbuf>
  return p;
 800d6ea:	68fb      	ldr	r3, [r7, #12]
}
 800d6ec:	4618      	mov	r0, r3
 800d6ee:	3710      	adds	r7, #16
 800d6f0:	46bd      	mov	sp, r7
 800d6f2:	bd80      	pop	{r7, pc}
 800d6f4:	080199a8 	.word	0x080199a8
 800d6f8:	08019aac 	.word	0x08019aac
 800d6fc:	08019a08 	.word	0x08019a08

0800d700 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800d700:	b580      	push	{r7, lr}
 800d702:	b088      	sub	sp, #32
 800d704:	af02      	add	r7, sp, #8
 800d706:	607b      	str	r3, [r7, #4]
 800d708:	4603      	mov	r3, r0
 800d70a:	73fb      	strb	r3, [r7, #15]
 800d70c:	460b      	mov	r3, r1
 800d70e:	81bb      	strh	r3, [r7, #12]
 800d710:	4613      	mov	r3, r2
 800d712:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800d714:	7bfb      	ldrb	r3, [r7, #15]
 800d716:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800d718:	8a7b      	ldrh	r3, [r7, #18]
 800d71a:	3303      	adds	r3, #3
 800d71c:	f023 0203 	bic.w	r2, r3, #3
 800d720:	89bb      	ldrh	r3, [r7, #12]
 800d722:	441a      	add	r2, r3
 800d724:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d726:	429a      	cmp	r2, r3
 800d728:	d901      	bls.n	800d72e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800d72a:	2300      	movs	r3, #0
 800d72c:	e018      	b.n	800d760 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800d72e:	6a3b      	ldr	r3, [r7, #32]
 800d730:	2b00      	cmp	r3, #0
 800d732:	d007      	beq.n	800d744 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800d734:	8a7b      	ldrh	r3, [r7, #18]
 800d736:	3303      	adds	r3, #3
 800d738:	f023 0303 	bic.w	r3, r3, #3
 800d73c:	6a3a      	ldr	r2, [r7, #32]
 800d73e:	4413      	add	r3, r2
 800d740:	617b      	str	r3, [r7, #20]
 800d742:	e001      	b.n	800d748 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800d744:	2300      	movs	r3, #0
 800d746:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800d748:	6878      	ldr	r0, [r7, #4]
 800d74a:	89b9      	ldrh	r1, [r7, #12]
 800d74c:	89ba      	ldrh	r2, [r7, #12]
 800d74e:	2302      	movs	r3, #2
 800d750:	9301      	str	r3, [sp, #4]
 800d752:	897b      	ldrh	r3, [r7, #10]
 800d754:	9300      	str	r3, [sp, #0]
 800d756:	460b      	mov	r3, r1
 800d758:	6979      	ldr	r1, [r7, #20]
 800d75a:	f7ff fe81 	bl	800d460 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800d75e:	687b      	ldr	r3, [r7, #4]
}
 800d760:	4618      	mov	r0, r3
 800d762:	3718      	adds	r7, #24
 800d764:	46bd      	mov	sp, r7
 800d766:	bd80      	pop	{r7, pc}

0800d768 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800d768:	b580      	push	{r7, lr}
 800d76a:	b084      	sub	sp, #16
 800d76c:	af00      	add	r7, sp, #0
 800d76e:	6078      	str	r0, [r7, #4]
 800d770:	460b      	mov	r3, r1
 800d772:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	2b00      	cmp	r3, #0
 800d778:	d106      	bne.n	800d788 <pbuf_realloc+0x20>
 800d77a:	4b3a      	ldr	r3, [pc, #232]	; (800d864 <pbuf_realloc+0xfc>)
 800d77c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800d780:	4939      	ldr	r1, [pc, #228]	; (800d868 <pbuf_realloc+0x100>)
 800d782:	483a      	ldr	r0, [pc, #232]	; (800d86c <pbuf_realloc+0x104>)
 800d784:	f009 ffc6 	bl	8017714 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	891b      	ldrh	r3, [r3, #8]
 800d78c:	887a      	ldrh	r2, [r7, #2]
 800d78e:	429a      	cmp	r2, r3
 800d790:	d264      	bcs.n	800d85c <pbuf_realloc+0xf4>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	891a      	ldrh	r2, [r3, #8]
 800d796:	887b      	ldrh	r3, [r7, #2]
 800d798:	1ad3      	subs	r3, r2, r3
 800d79a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800d79c:	887b      	ldrh	r3, [r7, #2]
 800d79e:	817b      	strh	r3, [r7, #10]
  q = p;
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800d7a4:	e018      	b.n	800d7d8 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	895b      	ldrh	r3, [r3, #10]
 800d7aa:	897a      	ldrh	r2, [r7, #10]
 800d7ac:	1ad3      	subs	r3, r2, r3
 800d7ae:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	891a      	ldrh	r2, [r3, #8]
 800d7b4:	893b      	ldrh	r3, [r7, #8]
 800d7b6:	1ad3      	subs	r3, r2, r3
 800d7b8:	b29a      	uxth	r2, r3
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d106      	bne.n	800d7d8 <pbuf_realloc+0x70>
 800d7ca:	4b26      	ldr	r3, [pc, #152]	; (800d864 <pbuf_realloc+0xfc>)
 800d7cc:	f240 12af 	movw	r2, #431	; 0x1af
 800d7d0:	4927      	ldr	r1, [pc, #156]	; (800d870 <pbuf_realloc+0x108>)
 800d7d2:	4826      	ldr	r0, [pc, #152]	; (800d86c <pbuf_realloc+0x104>)
 800d7d4:	f009 ff9e 	bl	8017714 <iprintf>
  while (rem_len > q->len) {
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	895b      	ldrh	r3, [r3, #10]
 800d7dc:	897a      	ldrh	r2, [r7, #10]
 800d7de:	429a      	cmp	r2, r3
 800d7e0:	d8e1      	bhi.n	800d7a6 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	7b1b      	ldrb	r3, [r3, #12]
 800d7e6:	f003 030f 	and.w	r3, r3, #15
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d122      	bne.n	800d834 <pbuf_realloc+0xcc>
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	895b      	ldrh	r3, [r3, #10]
 800d7f2:	897a      	ldrh	r2, [r7, #10]
 800d7f4:	429a      	cmp	r2, r3
 800d7f6:	d01d      	beq.n	800d834 <pbuf_realloc+0xcc>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	7b5b      	ldrb	r3, [r3, #13]
 800d7fc:	f003 0302 	and.w	r3, r3, #2
 800d800:	2b00      	cmp	r3, #0
 800d802:	d117      	bne.n	800d834 <pbuf_realloc+0xcc>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	685b      	ldr	r3, [r3, #4]
 800d808:	461a      	mov	r2, r3
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	1ad3      	subs	r3, r2, r3
 800d80e:	b29a      	uxth	r2, r3
 800d810:	897b      	ldrh	r3, [r7, #10]
 800d812:	4413      	add	r3, r2
 800d814:	b29b      	uxth	r3, r3
 800d816:	4619      	mov	r1, r3
 800d818:	68f8      	ldr	r0, [r7, #12]
 800d81a:	f7fe ffad 	bl	800c778 <mem_trim>
 800d81e:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	2b00      	cmp	r3, #0
 800d824:	d106      	bne.n	800d834 <pbuf_realloc+0xcc>
 800d826:	4b0f      	ldr	r3, [pc, #60]	; (800d864 <pbuf_realloc+0xfc>)
 800d828:	f240 12bd 	movw	r2, #445	; 0x1bd
 800d82c:	4911      	ldr	r1, [pc, #68]	; (800d874 <pbuf_realloc+0x10c>)
 800d82e:	480f      	ldr	r0, [pc, #60]	; (800d86c <pbuf_realloc+0x104>)
 800d830:	f009 ff70 	bl	8017714 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	897a      	ldrh	r2, [r7, #10]
 800d838:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	895a      	ldrh	r2, [r3, #10]
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	2b00      	cmp	r3, #0
 800d848:	d004      	beq.n	800d854 <pbuf_realloc+0xec>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	4618      	mov	r0, r3
 800d850:	f000 f944 	bl	800dadc <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	2200      	movs	r2, #0
 800d858:	601a      	str	r2, [r3, #0]
 800d85a:	e000      	b.n	800d85e <pbuf_realloc+0xf6>
    return;
 800d85c:	bf00      	nop

}
 800d85e:	3710      	adds	r7, #16
 800d860:	46bd      	mov	sp, r7
 800d862:	bd80      	pop	{r7, pc}
 800d864:	080199a8 	.word	0x080199a8
 800d868:	08019ac0 	.word	0x08019ac0
 800d86c:	08019a08 	.word	0x08019a08
 800d870:	08019ad8 	.word	0x08019ad8
 800d874:	08019af0 	.word	0x08019af0

0800d878 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800d878:	b580      	push	{r7, lr}
 800d87a:	b086      	sub	sp, #24
 800d87c:	af00      	add	r7, sp, #0
 800d87e:	60f8      	str	r0, [r7, #12]
 800d880:	60b9      	str	r1, [r7, #8]
 800d882:	4613      	mov	r3, r2
 800d884:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d106      	bne.n	800d89a <pbuf_add_header_impl+0x22>
 800d88c:	4b2c      	ldr	r3, [pc, #176]	; (800d940 <pbuf_add_header_impl+0xc8>)
 800d88e:	f240 12df 	movw	r2, #479	; 0x1df
 800d892:	492c      	ldr	r1, [pc, #176]	; (800d944 <pbuf_add_header_impl+0xcc>)
 800d894:	482c      	ldr	r0, [pc, #176]	; (800d948 <pbuf_add_header_impl+0xd0>)
 800d896:	f009 ff3d 	bl	8017714 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d003      	beq.n	800d8a8 <pbuf_add_header_impl+0x30>
 800d8a0:	68bb      	ldr	r3, [r7, #8]
 800d8a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d8a6:	d301      	bcc.n	800d8ac <pbuf_add_header_impl+0x34>
    return 1;
 800d8a8:	2301      	movs	r3, #1
 800d8aa:	e044      	b.n	800d936 <pbuf_add_header_impl+0xbe>
  }
  if (header_size_increment == 0) {
 800d8ac:	68bb      	ldr	r3, [r7, #8]
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d101      	bne.n	800d8b6 <pbuf_add_header_impl+0x3e>
    return 0;
 800d8b2:	2300      	movs	r3, #0
 800d8b4:	e03f      	b.n	800d936 <pbuf_add_header_impl+0xbe>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800d8b6:	68bb      	ldr	r3, [r7, #8]
 800d8b8:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	891a      	ldrh	r2, [r3, #8]
 800d8be:	8a7b      	ldrh	r3, [r7, #18]
 800d8c0:	4413      	add	r3, r2
 800d8c2:	b29b      	uxth	r3, r3
 800d8c4:	8a7a      	ldrh	r2, [r7, #18]
 800d8c6:	429a      	cmp	r2, r3
 800d8c8:	d901      	bls.n	800d8ce <pbuf_add_header_impl+0x56>
    return 1;
 800d8ca:	2301      	movs	r3, #1
 800d8cc:	e033      	b.n	800d936 <pbuf_add_header_impl+0xbe>
  }

  type_internal = p->type_internal;
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	7b1b      	ldrb	r3, [r3, #12]
 800d8d2:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800d8d4:	8a3b      	ldrh	r3, [r7, #16]
 800d8d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d00d      	beq.n	800d8fa <pbuf_add_header_impl+0x82>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	685a      	ldr	r2, [r3, #4]
 800d8e2:	68bb      	ldr	r3, [r7, #8]
 800d8e4:	425b      	negs	r3, r3
 800d8e6:	4413      	add	r3, r2
 800d8e8:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	f103 0210 	add.w	r2, r3, #16
 800d8f0:	697b      	ldr	r3, [r7, #20]
 800d8f2:	429a      	cmp	r2, r3
 800d8f4:	d90d      	bls.n	800d912 <pbuf_add_header_impl+0x9a>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800d8f6:	2301      	movs	r3, #1
 800d8f8:	e01d      	b.n	800d936 <pbuf_add_header_impl+0xbe>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800d8fa:	79fb      	ldrb	r3, [r7, #7]
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d006      	beq.n	800d90e <pbuf_add_header_impl+0x96>
      payload = (u8_t *)p->payload - header_size_increment;
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	685a      	ldr	r2, [r3, #4]
 800d904:	68bb      	ldr	r3, [r7, #8]
 800d906:	425b      	negs	r3, r3
 800d908:	4413      	add	r3, r2
 800d90a:	617b      	str	r3, [r7, #20]
 800d90c:	e001      	b.n	800d912 <pbuf_add_header_impl+0x9a>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800d90e:	2301      	movs	r3, #1
 800d910:	e011      	b.n	800d936 <pbuf_add_header_impl+0xbe>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	697a      	ldr	r2, [r7, #20]
 800d916:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	895a      	ldrh	r2, [r3, #10]
 800d91c:	8a7b      	ldrh	r3, [r7, #18]
 800d91e:	4413      	add	r3, r2
 800d920:	b29a      	uxth	r2, r3
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	891a      	ldrh	r2, [r3, #8]
 800d92a:	8a7b      	ldrh	r3, [r7, #18]
 800d92c:	4413      	add	r3, r2
 800d92e:	b29a      	uxth	r2, r3
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	811a      	strh	r2, [r3, #8]


  return 0;
 800d934:	2300      	movs	r3, #0
}
 800d936:	4618      	mov	r0, r3
 800d938:	3718      	adds	r7, #24
 800d93a:	46bd      	mov	sp, r7
 800d93c:	bd80      	pop	{r7, pc}
 800d93e:	bf00      	nop
 800d940:	080199a8 	.word	0x080199a8
 800d944:	08019b0c 	.word	0x08019b0c
 800d948:	08019a08 	.word	0x08019a08

0800d94c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800d94c:	b580      	push	{r7, lr}
 800d94e:	b082      	sub	sp, #8
 800d950:	af00      	add	r7, sp, #0
 800d952:	6078      	str	r0, [r7, #4]
 800d954:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800d956:	2200      	movs	r2, #0
 800d958:	6839      	ldr	r1, [r7, #0]
 800d95a:	6878      	ldr	r0, [r7, #4]
 800d95c:	f7ff ff8c 	bl	800d878 <pbuf_add_header_impl>
 800d960:	4603      	mov	r3, r0
}
 800d962:	4618      	mov	r0, r3
 800d964:	3708      	adds	r7, #8
 800d966:	46bd      	mov	sp, r7
 800d968:	bd80      	pop	{r7, pc}
	...

0800d96c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800d96c:	b580      	push	{r7, lr}
 800d96e:	b084      	sub	sp, #16
 800d970:	af00      	add	r7, sp, #0
 800d972:	6078      	str	r0, [r7, #4]
 800d974:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d106      	bne.n	800d98a <pbuf_remove_header+0x1e>
 800d97c:	4b20      	ldr	r3, [pc, #128]	; (800da00 <pbuf_remove_header+0x94>)
 800d97e:	f240 224b 	movw	r2, #587	; 0x24b
 800d982:	4920      	ldr	r1, [pc, #128]	; (800da04 <pbuf_remove_header+0x98>)
 800d984:	4820      	ldr	r0, [pc, #128]	; (800da08 <pbuf_remove_header+0x9c>)
 800d986:	f009 fec5 	bl	8017714 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d003      	beq.n	800d998 <pbuf_remove_header+0x2c>
 800d990:	683b      	ldr	r3, [r7, #0]
 800d992:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d996:	d301      	bcc.n	800d99c <pbuf_remove_header+0x30>
    return 1;
 800d998:	2301      	movs	r3, #1
 800d99a:	e02c      	b.n	800d9f6 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800d99c:	683b      	ldr	r3, [r7, #0]
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d101      	bne.n	800d9a6 <pbuf_remove_header+0x3a>
    return 0;
 800d9a2:	2300      	movs	r3, #0
 800d9a4:	e027      	b.n	800d9f6 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800d9a6:	683b      	ldr	r3, [r7, #0]
 800d9a8:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	895b      	ldrh	r3, [r3, #10]
 800d9ae:	89fa      	ldrh	r2, [r7, #14]
 800d9b0:	429a      	cmp	r2, r3
 800d9b2:	d908      	bls.n	800d9c6 <pbuf_remove_header+0x5a>
 800d9b4:	4b12      	ldr	r3, [pc, #72]	; (800da00 <pbuf_remove_header+0x94>)
 800d9b6:	f240 2255 	movw	r2, #597	; 0x255
 800d9ba:	4914      	ldr	r1, [pc, #80]	; (800da0c <pbuf_remove_header+0xa0>)
 800d9bc:	4812      	ldr	r0, [pc, #72]	; (800da08 <pbuf_remove_header+0x9c>)
 800d9be:	f009 fea9 	bl	8017714 <iprintf>
 800d9c2:	2301      	movs	r3, #1
 800d9c4:	e017      	b.n	800d9f6 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	685b      	ldr	r3, [r3, #4]
 800d9ca:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	685a      	ldr	r2, [r3, #4]
 800d9d0:	683b      	ldr	r3, [r7, #0]
 800d9d2:	441a      	add	r2, r3
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	895a      	ldrh	r2, [r3, #10]
 800d9dc:	89fb      	ldrh	r3, [r7, #14]
 800d9de:	1ad3      	subs	r3, r2, r3
 800d9e0:	b29a      	uxth	r2, r3
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	891a      	ldrh	r2, [r3, #8]
 800d9ea:	89fb      	ldrh	r3, [r7, #14]
 800d9ec:	1ad3      	subs	r3, r2, r3
 800d9ee:	b29a      	uxth	r2, r3
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800d9f4:	2300      	movs	r3, #0
}
 800d9f6:	4618      	mov	r0, r3
 800d9f8:	3710      	adds	r7, #16
 800d9fa:	46bd      	mov	sp, r7
 800d9fc:	bd80      	pop	{r7, pc}
 800d9fe:	bf00      	nop
 800da00:	080199a8 	.word	0x080199a8
 800da04:	08019b0c 	.word	0x08019b0c
 800da08:	08019a08 	.word	0x08019a08
 800da0c:	08019b18 	.word	0x08019b18

0800da10 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800da10:	b580      	push	{r7, lr}
 800da12:	b082      	sub	sp, #8
 800da14:	af00      	add	r7, sp, #0
 800da16:	6078      	str	r0, [r7, #4]
 800da18:	460b      	mov	r3, r1
 800da1a:	807b      	strh	r3, [r7, #2]
 800da1c:	4613      	mov	r3, r2
 800da1e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800da20:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800da24:	2b00      	cmp	r3, #0
 800da26:	da08      	bge.n	800da3a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800da28:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800da2c:	425b      	negs	r3, r3
 800da2e:	4619      	mov	r1, r3
 800da30:	6878      	ldr	r0, [r7, #4]
 800da32:	f7ff ff9b 	bl	800d96c <pbuf_remove_header>
 800da36:	4603      	mov	r3, r0
 800da38:	e007      	b.n	800da4a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800da3a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800da3e:	787a      	ldrb	r2, [r7, #1]
 800da40:	4619      	mov	r1, r3
 800da42:	6878      	ldr	r0, [r7, #4]
 800da44:	f7ff ff18 	bl	800d878 <pbuf_add_header_impl>
 800da48:	4603      	mov	r3, r0
  }
}
 800da4a:	4618      	mov	r0, r3
 800da4c:	3708      	adds	r7, #8
 800da4e:	46bd      	mov	sp, r7
 800da50:	bd80      	pop	{r7, pc}

0800da52 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800da52:	b580      	push	{r7, lr}
 800da54:	b082      	sub	sp, #8
 800da56:	af00      	add	r7, sp, #0
 800da58:	6078      	str	r0, [r7, #4]
 800da5a:	460b      	mov	r3, r1
 800da5c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800da5e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800da62:	2201      	movs	r2, #1
 800da64:	4619      	mov	r1, r3
 800da66:	6878      	ldr	r0, [r7, #4]
 800da68:	f7ff ffd2 	bl	800da10 <pbuf_header_impl>
 800da6c:	4603      	mov	r3, r0
}
 800da6e:	4618      	mov	r0, r3
 800da70:	3708      	adds	r7, #8
 800da72:	46bd      	mov	sp, r7
 800da74:	bd80      	pop	{r7, pc}

0800da76 <pbuf_free_header>:
 *                   takes an u16_t not s16_t!
 * @return the new head pbuf
 */
struct pbuf *
pbuf_free_header(struct pbuf *q, u16_t size)
{
 800da76:	b580      	push	{r7, lr}
 800da78:	b086      	sub	sp, #24
 800da7a:	af00      	add	r7, sp, #0
 800da7c:	6078      	str	r0, [r7, #4]
 800da7e:	460b      	mov	r3, r1
 800da80:	807b      	strh	r3, [r7, #2]
  struct pbuf *p = q;
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	617b      	str	r3, [r7, #20]
  u16_t free_left = size;
 800da86:	887b      	ldrh	r3, [r7, #2]
 800da88:	827b      	strh	r3, [r7, #18]
  while (free_left && p) {
 800da8a:	e01c      	b.n	800dac6 <pbuf_free_header+0x50>
    if (free_left >= p->len) {
 800da8c:	697b      	ldr	r3, [r7, #20]
 800da8e:	895b      	ldrh	r3, [r3, #10]
 800da90:	8a7a      	ldrh	r2, [r7, #18]
 800da92:	429a      	cmp	r2, r3
 800da94:	d310      	bcc.n	800dab8 <pbuf_free_header+0x42>
      struct pbuf *f = p;
 800da96:	697b      	ldr	r3, [r7, #20]
 800da98:	60fb      	str	r3, [r7, #12]
      free_left = (u16_t)(free_left - p->len);
 800da9a:	697b      	ldr	r3, [r7, #20]
 800da9c:	895b      	ldrh	r3, [r3, #10]
 800da9e:	8a7a      	ldrh	r2, [r7, #18]
 800daa0:	1ad3      	subs	r3, r2, r3
 800daa2:	827b      	strh	r3, [r7, #18]
      p = p->next;
 800daa4:	697b      	ldr	r3, [r7, #20]
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	617b      	str	r3, [r7, #20]
      f->next = 0;
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	2200      	movs	r2, #0
 800daae:	601a      	str	r2, [r3, #0]
      pbuf_free(f);
 800dab0:	68f8      	ldr	r0, [r7, #12]
 800dab2:	f000 f813 	bl	800dadc <pbuf_free>
 800dab6:	e006      	b.n	800dac6 <pbuf_free_header+0x50>
    } else {
      pbuf_remove_header(p, free_left);
 800dab8:	8a7b      	ldrh	r3, [r7, #18]
 800daba:	4619      	mov	r1, r3
 800dabc:	6978      	ldr	r0, [r7, #20]
 800dabe:	f7ff ff55 	bl	800d96c <pbuf_remove_header>
      free_left = 0;
 800dac2:	2300      	movs	r3, #0
 800dac4:	827b      	strh	r3, [r7, #18]
  while (free_left && p) {
 800dac6:	8a7b      	ldrh	r3, [r7, #18]
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d002      	beq.n	800dad2 <pbuf_free_header+0x5c>
 800dacc:	697b      	ldr	r3, [r7, #20]
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d1dc      	bne.n	800da8c <pbuf_free_header+0x16>
    }
  }
  return p;
 800dad2:	697b      	ldr	r3, [r7, #20]
}
 800dad4:	4618      	mov	r0, r3
 800dad6:	3718      	adds	r7, #24
 800dad8:	46bd      	mov	sp, r7
 800dada:	bd80      	pop	{r7, pc}

0800dadc <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800dadc:	b580      	push	{r7, lr}
 800dade:	b088      	sub	sp, #32
 800dae0:	af00      	add	r7, sp, #0
 800dae2:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d10b      	bne.n	800db02 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	2b00      	cmp	r3, #0
 800daee:	d106      	bne.n	800dafe <pbuf_free+0x22>
 800daf0:	4b3b      	ldr	r3, [pc, #236]	; (800dbe0 <pbuf_free+0x104>)
 800daf2:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800daf6:	493b      	ldr	r1, [pc, #236]	; (800dbe4 <pbuf_free+0x108>)
 800daf8:	483b      	ldr	r0, [pc, #236]	; (800dbe8 <pbuf_free+0x10c>)
 800dafa:	f009 fe0b 	bl	8017714 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800dafe:	2300      	movs	r3, #0
 800db00:	e069      	b.n	800dbd6 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800db02:	2300      	movs	r3, #0
 800db04:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800db06:	e062      	b.n	800dbce <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800db08:	f007 fc70 	bl	80153ec <sys_arch_protect>
 800db0c:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	7b9b      	ldrb	r3, [r3, #14]
 800db12:	2b00      	cmp	r3, #0
 800db14:	d106      	bne.n	800db24 <pbuf_free+0x48>
 800db16:	4b32      	ldr	r3, [pc, #200]	; (800dbe0 <pbuf_free+0x104>)
 800db18:	f240 22f1 	movw	r2, #753	; 0x2f1
 800db1c:	4933      	ldr	r1, [pc, #204]	; (800dbec <pbuf_free+0x110>)
 800db1e:	4832      	ldr	r0, [pc, #200]	; (800dbe8 <pbuf_free+0x10c>)
 800db20:	f009 fdf8 	bl	8017714 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	7b9b      	ldrb	r3, [r3, #14]
 800db28:	3b01      	subs	r3, #1
 800db2a:	b2da      	uxtb	r2, r3
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	739a      	strb	r2, [r3, #14]
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	7b9b      	ldrb	r3, [r3, #14]
 800db34:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800db36:	69b8      	ldr	r0, [r7, #24]
 800db38:	f007 fc66 	bl	8015408 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800db3c:	7dfb      	ldrb	r3, [r7, #23]
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d143      	bne.n	800dbca <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	7b1b      	ldrb	r3, [r3, #12]
 800db4c:	f003 030f 	and.w	r3, r3, #15
 800db50:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	7b5b      	ldrb	r3, [r3, #13]
 800db56:	f003 0302 	and.w	r3, r3, #2
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d011      	beq.n	800db82 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800db62:	68bb      	ldr	r3, [r7, #8]
 800db64:	691b      	ldr	r3, [r3, #16]
 800db66:	2b00      	cmp	r3, #0
 800db68:	d106      	bne.n	800db78 <pbuf_free+0x9c>
 800db6a:	4b1d      	ldr	r3, [pc, #116]	; (800dbe0 <pbuf_free+0x104>)
 800db6c:	f240 22ff 	movw	r2, #767	; 0x2ff
 800db70:	491f      	ldr	r1, [pc, #124]	; (800dbf0 <pbuf_free+0x114>)
 800db72:	481d      	ldr	r0, [pc, #116]	; (800dbe8 <pbuf_free+0x10c>)
 800db74:	f009 fdce 	bl	8017714 <iprintf>
        pc->custom_free_function(p);
 800db78:	68bb      	ldr	r3, [r7, #8]
 800db7a:	691b      	ldr	r3, [r3, #16]
 800db7c:	6878      	ldr	r0, [r7, #4]
 800db7e:	4798      	blx	r3
 800db80:	e01d      	b.n	800dbbe <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800db82:	7bfb      	ldrb	r3, [r7, #15]
 800db84:	2b02      	cmp	r3, #2
 800db86:	d104      	bne.n	800db92 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800db88:	6879      	ldr	r1, [r7, #4]
 800db8a:	200d      	movs	r0, #13
 800db8c:	f7ff f8d2 	bl	800cd34 <memp_free>
 800db90:	e015      	b.n	800dbbe <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800db92:	7bfb      	ldrb	r3, [r7, #15]
 800db94:	2b01      	cmp	r3, #1
 800db96:	d104      	bne.n	800dba2 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800db98:	6879      	ldr	r1, [r7, #4]
 800db9a:	200c      	movs	r0, #12
 800db9c:	f7ff f8ca 	bl	800cd34 <memp_free>
 800dba0:	e00d      	b.n	800dbbe <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800dba2:	7bfb      	ldrb	r3, [r7, #15]
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d103      	bne.n	800dbb0 <pbuf_free+0xd4>
          mem_free(p);
 800dba8:	6878      	ldr	r0, [r7, #4]
 800dbaa:	f7fe fd55 	bl	800c658 <mem_free>
 800dbae:	e006      	b.n	800dbbe <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800dbb0:	4b0b      	ldr	r3, [pc, #44]	; (800dbe0 <pbuf_free+0x104>)
 800dbb2:	f240 320f 	movw	r2, #783	; 0x30f
 800dbb6:	490f      	ldr	r1, [pc, #60]	; (800dbf4 <pbuf_free+0x118>)
 800dbb8:	480b      	ldr	r0, [pc, #44]	; (800dbe8 <pbuf_free+0x10c>)
 800dbba:	f009 fdab 	bl	8017714 <iprintf>
        }
      }
      count++;
 800dbbe:	7ffb      	ldrb	r3, [r7, #31]
 800dbc0:	3301      	adds	r3, #1
 800dbc2:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800dbc4:	693b      	ldr	r3, [r7, #16]
 800dbc6:	607b      	str	r3, [r7, #4]
 800dbc8:	e001      	b.n	800dbce <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800dbca:	2300      	movs	r3, #0
 800dbcc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d199      	bne.n	800db08 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800dbd4:	7ffb      	ldrb	r3, [r7, #31]
}
 800dbd6:	4618      	mov	r0, r3
 800dbd8:	3720      	adds	r7, #32
 800dbda:	46bd      	mov	sp, r7
 800dbdc:	bd80      	pop	{r7, pc}
 800dbde:	bf00      	nop
 800dbe0:	080199a8 	.word	0x080199a8
 800dbe4:	08019b0c 	.word	0x08019b0c
 800dbe8:	08019a08 	.word	0x08019a08
 800dbec:	08019b38 	.word	0x08019b38
 800dbf0:	08019b50 	.word	0x08019b50
 800dbf4:	08019b74 	.word	0x08019b74

0800dbf8 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800dbf8:	b480      	push	{r7}
 800dbfa:	b085      	sub	sp, #20
 800dbfc:	af00      	add	r7, sp, #0
 800dbfe:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800dc00:	2300      	movs	r3, #0
 800dc02:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800dc04:	e005      	b.n	800dc12 <pbuf_clen+0x1a>
    ++len;
 800dc06:	89fb      	ldrh	r3, [r7, #14]
 800dc08:	3301      	adds	r3, #1
 800dc0a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d1f6      	bne.n	800dc06 <pbuf_clen+0xe>
  }
  return len;
 800dc18:	89fb      	ldrh	r3, [r7, #14]
}
 800dc1a:	4618      	mov	r0, r3
 800dc1c:	3714      	adds	r7, #20
 800dc1e:	46bd      	mov	sp, r7
 800dc20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc24:	4770      	bx	lr
	...

0800dc28 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800dc28:	b580      	push	{r7, lr}
 800dc2a:	b084      	sub	sp, #16
 800dc2c:	af00      	add	r7, sp, #0
 800dc2e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d016      	beq.n	800dc64 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800dc36:	f007 fbd9 	bl	80153ec <sys_arch_protect>
 800dc3a:	60f8      	str	r0, [r7, #12]
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	7b9b      	ldrb	r3, [r3, #14]
 800dc40:	3301      	adds	r3, #1
 800dc42:	b2da      	uxtb	r2, r3
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	739a      	strb	r2, [r3, #14]
 800dc48:	68f8      	ldr	r0, [r7, #12]
 800dc4a:	f007 fbdd 	bl	8015408 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	7b9b      	ldrb	r3, [r3, #14]
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d106      	bne.n	800dc64 <pbuf_ref+0x3c>
 800dc56:	4b05      	ldr	r3, [pc, #20]	; (800dc6c <pbuf_ref+0x44>)
 800dc58:	f240 3242 	movw	r2, #834	; 0x342
 800dc5c:	4904      	ldr	r1, [pc, #16]	; (800dc70 <pbuf_ref+0x48>)
 800dc5e:	4805      	ldr	r0, [pc, #20]	; (800dc74 <pbuf_ref+0x4c>)
 800dc60:	f009 fd58 	bl	8017714 <iprintf>
  }
}
 800dc64:	bf00      	nop
 800dc66:	3710      	adds	r7, #16
 800dc68:	46bd      	mov	sp, r7
 800dc6a:	bd80      	pop	{r7, pc}
 800dc6c:	080199a8 	.word	0x080199a8
 800dc70:	08019b88 	.word	0x08019b88
 800dc74:	08019a08 	.word	0x08019a08

0800dc78 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800dc78:	b580      	push	{r7, lr}
 800dc7a:	b084      	sub	sp, #16
 800dc7c:	af00      	add	r7, sp, #0
 800dc7e:	6078      	str	r0, [r7, #4]
 800dc80:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d002      	beq.n	800dc8e <pbuf_cat+0x16>
 800dc88:	683b      	ldr	r3, [r7, #0]
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d107      	bne.n	800dc9e <pbuf_cat+0x26>
 800dc8e:	4b20      	ldr	r3, [pc, #128]	; (800dd10 <pbuf_cat+0x98>)
 800dc90:	f240 325a 	movw	r2, #858	; 0x35a
 800dc94:	491f      	ldr	r1, [pc, #124]	; (800dd14 <pbuf_cat+0x9c>)
 800dc96:	4820      	ldr	r0, [pc, #128]	; (800dd18 <pbuf_cat+0xa0>)
 800dc98:	f009 fd3c 	bl	8017714 <iprintf>
 800dc9c:	e034      	b.n	800dd08 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	60fb      	str	r3, [r7, #12]
 800dca2:	e00a      	b.n	800dcba <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	891a      	ldrh	r2, [r3, #8]
 800dca8:	683b      	ldr	r3, [r7, #0]
 800dcaa:	891b      	ldrh	r3, [r3, #8]
 800dcac:	4413      	add	r3, r2
 800dcae:	b29a      	uxth	r2, r3
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	60fb      	str	r3, [r7, #12]
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d1f0      	bne.n	800dca4 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	891a      	ldrh	r2, [r3, #8]
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	895b      	ldrh	r3, [r3, #10]
 800dcca:	429a      	cmp	r2, r3
 800dccc:	d006      	beq.n	800dcdc <pbuf_cat+0x64>
 800dcce:	4b10      	ldr	r3, [pc, #64]	; (800dd10 <pbuf_cat+0x98>)
 800dcd0:	f240 3262 	movw	r2, #866	; 0x362
 800dcd4:	4911      	ldr	r1, [pc, #68]	; (800dd1c <pbuf_cat+0xa4>)
 800dcd6:	4810      	ldr	r0, [pc, #64]	; (800dd18 <pbuf_cat+0xa0>)
 800dcd8:	f009 fd1c 	bl	8017714 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d006      	beq.n	800dcf2 <pbuf_cat+0x7a>
 800dce4:	4b0a      	ldr	r3, [pc, #40]	; (800dd10 <pbuf_cat+0x98>)
 800dce6:	f240 3263 	movw	r2, #867	; 0x363
 800dcea:	490d      	ldr	r1, [pc, #52]	; (800dd20 <pbuf_cat+0xa8>)
 800dcec:	480a      	ldr	r0, [pc, #40]	; (800dd18 <pbuf_cat+0xa0>)
 800dcee:	f009 fd11 	bl	8017714 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	891a      	ldrh	r2, [r3, #8]
 800dcf6:	683b      	ldr	r3, [r7, #0]
 800dcf8:	891b      	ldrh	r3, [r3, #8]
 800dcfa:	4413      	add	r3, r2
 800dcfc:	b29a      	uxth	r2, r3
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	683a      	ldr	r2, [r7, #0]
 800dd06:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800dd08:	3710      	adds	r7, #16
 800dd0a:	46bd      	mov	sp, r7
 800dd0c:	bd80      	pop	{r7, pc}
 800dd0e:	bf00      	nop
 800dd10:	080199a8 	.word	0x080199a8
 800dd14:	08019b9c 	.word	0x08019b9c
 800dd18:	08019a08 	.word	0x08019a08
 800dd1c:	08019bd4 	.word	0x08019bd4
 800dd20:	08019c04 	.word	0x08019c04

0800dd24 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800dd24:	b580      	push	{r7, lr}
 800dd26:	b082      	sub	sp, #8
 800dd28:	af00      	add	r7, sp, #0
 800dd2a:	6078      	str	r0, [r7, #4]
 800dd2c:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800dd2e:	6839      	ldr	r1, [r7, #0]
 800dd30:	6878      	ldr	r0, [r7, #4]
 800dd32:	f7ff ffa1 	bl	800dc78 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800dd36:	6838      	ldr	r0, [r7, #0]
 800dd38:	f7ff ff76 	bl	800dc28 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800dd3c:	bf00      	nop
 800dd3e:	3708      	adds	r7, #8
 800dd40:	46bd      	mov	sp, r7
 800dd42:	bd80      	pop	{r7, pc}

0800dd44 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800dd44:	b580      	push	{r7, lr}
 800dd46:	b086      	sub	sp, #24
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	6078      	str	r0, [r7, #4]
 800dd4c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800dd4e:	2300      	movs	r3, #0
 800dd50:	617b      	str	r3, [r7, #20]
 800dd52:	2300      	movs	r3, #0
 800dd54:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d008      	beq.n	800dd6e <pbuf_copy+0x2a>
 800dd5c:	683b      	ldr	r3, [r7, #0]
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d005      	beq.n	800dd6e <pbuf_copy+0x2a>
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	891a      	ldrh	r2, [r3, #8]
 800dd66:	683b      	ldr	r3, [r7, #0]
 800dd68:	891b      	ldrh	r3, [r3, #8]
 800dd6a:	429a      	cmp	r2, r3
 800dd6c:	d209      	bcs.n	800dd82 <pbuf_copy+0x3e>
 800dd6e:	4b57      	ldr	r3, [pc, #348]	; (800decc <pbuf_copy+0x188>)
 800dd70:	f240 32ca 	movw	r2, #970	; 0x3ca
 800dd74:	4956      	ldr	r1, [pc, #344]	; (800ded0 <pbuf_copy+0x18c>)
 800dd76:	4857      	ldr	r0, [pc, #348]	; (800ded4 <pbuf_copy+0x190>)
 800dd78:	f009 fccc 	bl	8017714 <iprintf>
 800dd7c:	f06f 030f 	mvn.w	r3, #15
 800dd80:	e09f      	b.n	800dec2 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	895b      	ldrh	r3, [r3, #10]
 800dd86:	461a      	mov	r2, r3
 800dd88:	697b      	ldr	r3, [r7, #20]
 800dd8a:	1ad2      	subs	r2, r2, r3
 800dd8c:	683b      	ldr	r3, [r7, #0]
 800dd8e:	895b      	ldrh	r3, [r3, #10]
 800dd90:	4619      	mov	r1, r3
 800dd92:	693b      	ldr	r3, [r7, #16]
 800dd94:	1acb      	subs	r3, r1, r3
 800dd96:	429a      	cmp	r2, r3
 800dd98:	d306      	bcc.n	800dda8 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800dd9a:	683b      	ldr	r3, [r7, #0]
 800dd9c:	895b      	ldrh	r3, [r3, #10]
 800dd9e:	461a      	mov	r2, r3
 800dda0:	693b      	ldr	r3, [r7, #16]
 800dda2:	1ad3      	subs	r3, r2, r3
 800dda4:	60fb      	str	r3, [r7, #12]
 800dda6:	e005      	b.n	800ddb4 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	895b      	ldrh	r3, [r3, #10]
 800ddac:	461a      	mov	r2, r3
 800ddae:	697b      	ldr	r3, [r7, #20]
 800ddb0:	1ad3      	subs	r3, r2, r3
 800ddb2:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	685a      	ldr	r2, [r3, #4]
 800ddb8:	697b      	ldr	r3, [r7, #20]
 800ddba:	18d0      	adds	r0, r2, r3
 800ddbc:	683b      	ldr	r3, [r7, #0]
 800ddbe:	685a      	ldr	r2, [r3, #4]
 800ddc0:	693b      	ldr	r3, [r7, #16]
 800ddc2:	4413      	add	r3, r2
 800ddc4:	68fa      	ldr	r2, [r7, #12]
 800ddc6:	4619      	mov	r1, r3
 800ddc8:	f009 fbcb 	bl	8017562 <memcpy>
    offset_to += len;
 800ddcc:	697a      	ldr	r2, [r7, #20]
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	4413      	add	r3, r2
 800ddd2:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800ddd4:	693a      	ldr	r2, [r7, #16]
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	4413      	add	r3, r2
 800ddda:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	895b      	ldrh	r3, [r3, #10]
 800dde0:	461a      	mov	r2, r3
 800dde2:	697b      	ldr	r3, [r7, #20]
 800dde4:	429a      	cmp	r2, r3
 800dde6:	d206      	bcs.n	800ddf6 <pbuf_copy+0xb2>
 800dde8:	4b38      	ldr	r3, [pc, #224]	; (800decc <pbuf_copy+0x188>)
 800ddea:	f240 32d9 	movw	r2, #985	; 0x3d9
 800ddee:	493a      	ldr	r1, [pc, #232]	; (800ded8 <pbuf_copy+0x194>)
 800ddf0:	4838      	ldr	r0, [pc, #224]	; (800ded4 <pbuf_copy+0x190>)
 800ddf2:	f009 fc8f 	bl	8017714 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800ddf6:	683b      	ldr	r3, [r7, #0]
 800ddf8:	895b      	ldrh	r3, [r3, #10]
 800ddfa:	461a      	mov	r2, r3
 800ddfc:	693b      	ldr	r3, [r7, #16]
 800ddfe:	429a      	cmp	r2, r3
 800de00:	d206      	bcs.n	800de10 <pbuf_copy+0xcc>
 800de02:	4b32      	ldr	r3, [pc, #200]	; (800decc <pbuf_copy+0x188>)
 800de04:	f240 32da 	movw	r2, #986	; 0x3da
 800de08:	4934      	ldr	r1, [pc, #208]	; (800dedc <pbuf_copy+0x198>)
 800de0a:	4832      	ldr	r0, [pc, #200]	; (800ded4 <pbuf_copy+0x190>)
 800de0c:	f009 fc82 	bl	8017714 <iprintf>
    if (offset_from >= p_from->len) {
 800de10:	683b      	ldr	r3, [r7, #0]
 800de12:	895b      	ldrh	r3, [r3, #10]
 800de14:	461a      	mov	r2, r3
 800de16:	693b      	ldr	r3, [r7, #16]
 800de18:	429a      	cmp	r2, r3
 800de1a:	d804      	bhi.n	800de26 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800de1c:	2300      	movs	r3, #0
 800de1e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800de20:	683b      	ldr	r3, [r7, #0]
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	895b      	ldrh	r3, [r3, #10]
 800de2a:	461a      	mov	r2, r3
 800de2c:	697b      	ldr	r3, [r7, #20]
 800de2e:	429a      	cmp	r2, r3
 800de30:	d114      	bne.n	800de5c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800de32:	2300      	movs	r3, #0
 800de34:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d10c      	bne.n	800de5c <pbuf_copy+0x118>
 800de42:	683b      	ldr	r3, [r7, #0]
 800de44:	2b00      	cmp	r3, #0
 800de46:	d009      	beq.n	800de5c <pbuf_copy+0x118>
 800de48:	4b20      	ldr	r3, [pc, #128]	; (800decc <pbuf_copy+0x188>)
 800de4a:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800de4e:	4924      	ldr	r1, [pc, #144]	; (800dee0 <pbuf_copy+0x19c>)
 800de50:	4820      	ldr	r0, [pc, #128]	; (800ded4 <pbuf_copy+0x190>)
 800de52:	f009 fc5f 	bl	8017714 <iprintf>
 800de56:	f06f 030f 	mvn.w	r3, #15
 800de5a:	e032      	b.n	800dec2 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800de5c:	683b      	ldr	r3, [r7, #0]
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d013      	beq.n	800de8a <pbuf_copy+0x146>
 800de62:	683b      	ldr	r3, [r7, #0]
 800de64:	895a      	ldrh	r2, [r3, #10]
 800de66:	683b      	ldr	r3, [r7, #0]
 800de68:	891b      	ldrh	r3, [r3, #8]
 800de6a:	429a      	cmp	r2, r3
 800de6c:	d10d      	bne.n	800de8a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800de6e:	683b      	ldr	r3, [r7, #0]
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	2b00      	cmp	r3, #0
 800de74:	d009      	beq.n	800de8a <pbuf_copy+0x146>
 800de76:	4b15      	ldr	r3, [pc, #84]	; (800decc <pbuf_copy+0x188>)
 800de78:	f240 32ea 	movw	r2, #1002	; 0x3ea
 800de7c:	4919      	ldr	r1, [pc, #100]	; (800dee4 <pbuf_copy+0x1a0>)
 800de7e:	4815      	ldr	r0, [pc, #84]	; (800ded4 <pbuf_copy+0x190>)
 800de80:	f009 fc48 	bl	8017714 <iprintf>
 800de84:	f06f 0305 	mvn.w	r3, #5
 800de88:	e01b      	b.n	800dec2 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d013      	beq.n	800deb8 <pbuf_copy+0x174>
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	895a      	ldrh	r2, [r3, #10]
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	891b      	ldrh	r3, [r3, #8]
 800de98:	429a      	cmp	r2, r3
 800de9a:	d10d      	bne.n	800deb8 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d009      	beq.n	800deb8 <pbuf_copy+0x174>
 800dea4:	4b09      	ldr	r3, [pc, #36]	; (800decc <pbuf_copy+0x188>)
 800dea6:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800deaa:	490e      	ldr	r1, [pc, #56]	; (800dee4 <pbuf_copy+0x1a0>)
 800deac:	4809      	ldr	r0, [pc, #36]	; (800ded4 <pbuf_copy+0x190>)
 800deae:	f009 fc31 	bl	8017714 <iprintf>
 800deb2:	f06f 0305 	mvn.w	r3, #5
 800deb6:	e004      	b.n	800dec2 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800deb8:	683b      	ldr	r3, [r7, #0]
 800deba:	2b00      	cmp	r3, #0
 800debc:	f47f af61 	bne.w	800dd82 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800dec0:	2300      	movs	r3, #0
}
 800dec2:	4618      	mov	r0, r3
 800dec4:	3718      	adds	r7, #24
 800dec6:	46bd      	mov	sp, r7
 800dec8:	bd80      	pop	{r7, pc}
 800deca:	bf00      	nop
 800decc:	080199a8 	.word	0x080199a8
 800ded0:	08019c50 	.word	0x08019c50
 800ded4:	08019a08 	.word	0x08019a08
 800ded8:	08019c80 	.word	0x08019c80
 800dedc:	08019c98 	.word	0x08019c98
 800dee0:	08019cb4 	.word	0x08019cb4
 800dee4:	08019cc4 	.word	0x08019cc4

0800dee8 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800dee8:	b580      	push	{r7, lr}
 800deea:	b088      	sub	sp, #32
 800deec:	af00      	add	r7, sp, #0
 800deee:	60f8      	str	r0, [r7, #12]
 800def0:	60b9      	str	r1, [r7, #8]
 800def2:	4611      	mov	r1, r2
 800def4:	461a      	mov	r2, r3
 800def6:	460b      	mov	r3, r1
 800def8:	80fb      	strh	r3, [r7, #6]
 800defa:	4613      	mov	r3, r2
 800defc:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800defe:	2300      	movs	r3, #0
 800df00:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800df02:	2300      	movs	r3, #0
 800df04:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d108      	bne.n	800df1e <pbuf_copy_partial+0x36>
 800df0c:	4b2b      	ldr	r3, [pc, #172]	; (800dfbc <pbuf_copy_partial+0xd4>)
 800df0e:	f240 420a 	movw	r2, #1034	; 0x40a
 800df12:	492b      	ldr	r1, [pc, #172]	; (800dfc0 <pbuf_copy_partial+0xd8>)
 800df14:	482b      	ldr	r0, [pc, #172]	; (800dfc4 <pbuf_copy_partial+0xdc>)
 800df16:	f009 fbfd 	bl	8017714 <iprintf>
 800df1a:	2300      	movs	r3, #0
 800df1c:	e04a      	b.n	800dfb4 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800df1e:	68bb      	ldr	r3, [r7, #8]
 800df20:	2b00      	cmp	r3, #0
 800df22:	d108      	bne.n	800df36 <pbuf_copy_partial+0x4e>
 800df24:	4b25      	ldr	r3, [pc, #148]	; (800dfbc <pbuf_copy_partial+0xd4>)
 800df26:	f240 420b 	movw	r2, #1035	; 0x40b
 800df2a:	4927      	ldr	r1, [pc, #156]	; (800dfc8 <pbuf_copy_partial+0xe0>)
 800df2c:	4825      	ldr	r0, [pc, #148]	; (800dfc4 <pbuf_copy_partial+0xdc>)
 800df2e:	f009 fbf1 	bl	8017714 <iprintf>
 800df32:	2300      	movs	r3, #0
 800df34:	e03e      	b.n	800dfb4 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	61fb      	str	r3, [r7, #28]
 800df3a:	e034      	b.n	800dfa6 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800df3c:	88bb      	ldrh	r3, [r7, #4]
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d00a      	beq.n	800df58 <pbuf_copy_partial+0x70>
 800df42:	69fb      	ldr	r3, [r7, #28]
 800df44:	895b      	ldrh	r3, [r3, #10]
 800df46:	88ba      	ldrh	r2, [r7, #4]
 800df48:	429a      	cmp	r2, r3
 800df4a:	d305      	bcc.n	800df58 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800df4c:	69fb      	ldr	r3, [r7, #28]
 800df4e:	895b      	ldrh	r3, [r3, #10]
 800df50:	88ba      	ldrh	r2, [r7, #4]
 800df52:	1ad3      	subs	r3, r2, r3
 800df54:	80bb      	strh	r3, [r7, #4]
 800df56:	e023      	b.n	800dfa0 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800df58:	69fb      	ldr	r3, [r7, #28]
 800df5a:	895a      	ldrh	r2, [r3, #10]
 800df5c:	88bb      	ldrh	r3, [r7, #4]
 800df5e:	1ad3      	subs	r3, r2, r3
 800df60:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800df62:	8b3a      	ldrh	r2, [r7, #24]
 800df64:	88fb      	ldrh	r3, [r7, #6]
 800df66:	429a      	cmp	r2, r3
 800df68:	d901      	bls.n	800df6e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800df6a:	88fb      	ldrh	r3, [r7, #6]
 800df6c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800df6e:	8b7b      	ldrh	r3, [r7, #26]
 800df70:	68ba      	ldr	r2, [r7, #8]
 800df72:	18d0      	adds	r0, r2, r3
 800df74:	69fb      	ldr	r3, [r7, #28]
 800df76:	685a      	ldr	r2, [r3, #4]
 800df78:	88bb      	ldrh	r3, [r7, #4]
 800df7a:	4413      	add	r3, r2
 800df7c:	8b3a      	ldrh	r2, [r7, #24]
 800df7e:	4619      	mov	r1, r3
 800df80:	f009 faef 	bl	8017562 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800df84:	8afa      	ldrh	r2, [r7, #22]
 800df86:	8b3b      	ldrh	r3, [r7, #24]
 800df88:	4413      	add	r3, r2
 800df8a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800df8c:	8b7a      	ldrh	r2, [r7, #26]
 800df8e:	8b3b      	ldrh	r3, [r7, #24]
 800df90:	4413      	add	r3, r2
 800df92:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800df94:	88fa      	ldrh	r2, [r7, #6]
 800df96:	8b3b      	ldrh	r3, [r7, #24]
 800df98:	1ad3      	subs	r3, r2, r3
 800df9a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800df9c:	2300      	movs	r3, #0
 800df9e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800dfa0:	69fb      	ldr	r3, [r7, #28]
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	61fb      	str	r3, [r7, #28]
 800dfa6:	88fb      	ldrh	r3, [r7, #6]
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d002      	beq.n	800dfb2 <pbuf_copy_partial+0xca>
 800dfac:	69fb      	ldr	r3, [r7, #28]
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d1c4      	bne.n	800df3c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800dfb2:	8afb      	ldrh	r3, [r7, #22]
}
 800dfb4:	4618      	mov	r0, r3
 800dfb6:	3720      	adds	r7, #32
 800dfb8:	46bd      	mov	sp, r7
 800dfba:	bd80      	pop	{r7, pc}
 800dfbc:	080199a8 	.word	0x080199a8
 800dfc0:	08019cf0 	.word	0x08019cf0
 800dfc4:	08019a08 	.word	0x08019a08
 800dfc8:	08019d10 	.word	0x08019d10

0800dfcc <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf *
pbuf_skip_const(const struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 800dfcc:	b480      	push	{r7}
 800dfce:	b087      	sub	sp, #28
 800dfd0:	af00      	add	r7, sp, #0
 800dfd2:	60f8      	str	r0, [r7, #12]
 800dfd4:	460b      	mov	r3, r1
 800dfd6:	607a      	str	r2, [r7, #4]
 800dfd8:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 800dfda:	897b      	ldrh	r3, [r7, #10]
 800dfdc:	82fb      	strh	r3, [r7, #22]
  const struct pbuf *q = in;
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 800dfe2:	e007      	b.n	800dff4 <pbuf_skip_const+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 800dfe4:	693b      	ldr	r3, [r7, #16]
 800dfe6:	895b      	ldrh	r3, [r3, #10]
 800dfe8:	8afa      	ldrh	r2, [r7, #22]
 800dfea:	1ad3      	subs	r3, r2, r3
 800dfec:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 800dfee:	693b      	ldr	r3, [r7, #16]
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 800dff4:	693b      	ldr	r3, [r7, #16]
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d004      	beq.n	800e004 <pbuf_skip_const+0x38>
 800dffa:	693b      	ldr	r3, [r7, #16]
 800dffc:	895b      	ldrh	r3, [r3, #10]
 800dffe:	8afa      	ldrh	r2, [r7, #22]
 800e000:	429a      	cmp	r2, r3
 800e002:	d2ef      	bcs.n	800dfe4 <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	2b00      	cmp	r3, #0
 800e008:	d002      	beq.n	800e010 <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	8afa      	ldrh	r2, [r7, #22]
 800e00e:	801a      	strh	r2, [r3, #0]
  }
  return q;
 800e010:	693b      	ldr	r3, [r7, #16]
}
 800e012:	4618      	mov	r0, r3
 800e014:	371c      	adds	r7, #28
 800e016:	46bd      	mov	sp, r7
 800e018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e01c:	4770      	bx	lr

0800e01e <pbuf_skip>:
 * @param out_offset resulting offset in the returned pbuf
 * @return the pbuf in the queue where the offset is
 */
struct pbuf *
pbuf_skip(struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 800e01e:	b580      	push	{r7, lr}
 800e020:	b086      	sub	sp, #24
 800e022:	af00      	add	r7, sp, #0
 800e024:	60f8      	str	r0, [r7, #12]
 800e026:	460b      	mov	r3, r1
 800e028:	607a      	str	r2, [r7, #4]
 800e02a:	817b      	strh	r3, [r7, #10]
  const struct pbuf *out = pbuf_skip_const(in, in_offset, out_offset);
 800e02c:	897b      	ldrh	r3, [r7, #10]
 800e02e:	687a      	ldr	r2, [r7, #4]
 800e030:	4619      	mov	r1, r3
 800e032:	68f8      	ldr	r0, [r7, #12]
 800e034:	f7ff ffca 	bl	800dfcc <pbuf_skip_const>
 800e038:	6178      	str	r0, [r7, #20]
  return LWIP_CONST_CAST(struct pbuf *, out);
 800e03a:	697b      	ldr	r3, [r7, #20]
}
 800e03c:	4618      	mov	r0, r3
 800e03e:	3718      	adds	r7, #24
 800e040:	46bd      	mov	sp, r7
 800e042:	bd80      	pop	{r7, pc}

0800e044 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 800e044:	b580      	push	{r7, lr}
 800e046:	b088      	sub	sp, #32
 800e048:	af00      	add	r7, sp, #0
 800e04a:	60f8      	str	r0, [r7, #12]
 800e04c:	60b9      	str	r1, [r7, #8]
 800e04e:	4613      	mov	r3, r2
 800e050:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 800e052:	88fb      	ldrh	r3, [r7, #6]
 800e054:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 800e056:	2300      	movs	r3, #0
 800e058:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d109      	bne.n	800e074 <pbuf_take+0x30>
 800e060:	4b3a      	ldr	r3, [pc, #232]	; (800e14c <pbuf_take+0x108>)
 800e062:	f240 42b3 	movw	r2, #1203	; 0x4b3
 800e066:	493a      	ldr	r1, [pc, #232]	; (800e150 <pbuf_take+0x10c>)
 800e068:	483a      	ldr	r0, [pc, #232]	; (800e154 <pbuf_take+0x110>)
 800e06a:	f009 fb53 	bl	8017714 <iprintf>
 800e06e:	f06f 030f 	mvn.w	r3, #15
 800e072:	e067      	b.n	800e144 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800e074:	68bb      	ldr	r3, [r7, #8]
 800e076:	2b00      	cmp	r3, #0
 800e078:	d109      	bne.n	800e08e <pbuf_take+0x4a>
 800e07a:	4b34      	ldr	r3, [pc, #208]	; (800e14c <pbuf_take+0x108>)
 800e07c:	f240 42b4 	movw	r2, #1204	; 0x4b4
 800e080:	4935      	ldr	r1, [pc, #212]	; (800e158 <pbuf_take+0x114>)
 800e082:	4834      	ldr	r0, [pc, #208]	; (800e154 <pbuf_take+0x110>)
 800e084:	f009 fb46 	bl	8017714 <iprintf>
 800e088:	f06f 030f 	mvn.w	r3, #15
 800e08c:	e05a      	b.n	800e144 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	891b      	ldrh	r3, [r3, #8]
 800e092:	88fa      	ldrh	r2, [r7, #6]
 800e094:	429a      	cmp	r2, r3
 800e096:	d909      	bls.n	800e0ac <pbuf_take+0x68>
 800e098:	4b2c      	ldr	r3, [pc, #176]	; (800e14c <pbuf_take+0x108>)
 800e09a:	f240 42b5 	movw	r2, #1205	; 0x4b5
 800e09e:	492f      	ldr	r1, [pc, #188]	; (800e15c <pbuf_take+0x118>)
 800e0a0:	482c      	ldr	r0, [pc, #176]	; (800e154 <pbuf_take+0x110>)
 800e0a2:	f009 fb37 	bl	8017714 <iprintf>
 800e0a6:	f04f 33ff 	mov.w	r3, #4294967295
 800e0aa:	e04b      	b.n	800e144 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d007      	beq.n	800e0c2 <pbuf_take+0x7e>
 800e0b2:	68bb      	ldr	r3, [r7, #8]
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d004      	beq.n	800e0c2 <pbuf_take+0x7e>
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	891b      	ldrh	r3, [r3, #8]
 800e0bc:	88fa      	ldrh	r2, [r7, #6]
 800e0be:	429a      	cmp	r2, r3
 800e0c0:	d902      	bls.n	800e0c8 <pbuf_take+0x84>
    return ERR_ARG;
 800e0c2:	f06f 030f 	mvn.w	r3, #15
 800e0c6:	e03d      	b.n	800e144 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	61fb      	str	r3, [r7, #28]
 800e0cc:	e028      	b.n	800e120 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 800e0ce:	69fb      	ldr	r3, [r7, #28]
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d106      	bne.n	800e0e2 <pbuf_take+0x9e>
 800e0d4:	4b1d      	ldr	r3, [pc, #116]	; (800e14c <pbuf_take+0x108>)
 800e0d6:	f240 42bd 	movw	r2, #1213	; 0x4bd
 800e0da:	4921      	ldr	r1, [pc, #132]	; (800e160 <pbuf_take+0x11c>)
 800e0dc:	481d      	ldr	r0, [pc, #116]	; (800e154 <pbuf_take+0x110>)
 800e0de:	f009 fb19 	bl	8017714 <iprintf>
    buf_copy_len = total_copy_len;
 800e0e2:	697b      	ldr	r3, [r7, #20]
 800e0e4:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 800e0e6:	69fb      	ldr	r3, [r7, #28]
 800e0e8:	895b      	ldrh	r3, [r3, #10]
 800e0ea:	461a      	mov	r2, r3
 800e0ec:	69bb      	ldr	r3, [r7, #24]
 800e0ee:	429a      	cmp	r2, r3
 800e0f0:	d202      	bcs.n	800e0f8 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 800e0f2:	69fb      	ldr	r3, [r7, #28]
 800e0f4:	895b      	ldrh	r3, [r3, #10]
 800e0f6:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 800e0f8:	69fb      	ldr	r3, [r7, #28]
 800e0fa:	6858      	ldr	r0, [r3, #4]
 800e0fc:	68ba      	ldr	r2, [r7, #8]
 800e0fe:	693b      	ldr	r3, [r7, #16]
 800e100:	4413      	add	r3, r2
 800e102:	69ba      	ldr	r2, [r7, #24]
 800e104:	4619      	mov	r1, r3
 800e106:	f009 fa2c 	bl	8017562 <memcpy>
    total_copy_len -= buf_copy_len;
 800e10a:	697a      	ldr	r2, [r7, #20]
 800e10c:	69bb      	ldr	r3, [r7, #24]
 800e10e:	1ad3      	subs	r3, r2, r3
 800e110:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 800e112:	693a      	ldr	r2, [r7, #16]
 800e114:	69bb      	ldr	r3, [r7, #24]
 800e116:	4413      	add	r3, r2
 800e118:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 800e11a:	69fb      	ldr	r3, [r7, #28]
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	61fb      	str	r3, [r7, #28]
 800e120:	697b      	ldr	r3, [r7, #20]
 800e122:	2b00      	cmp	r3, #0
 800e124:	d1d3      	bne.n	800e0ce <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 800e126:	697b      	ldr	r3, [r7, #20]
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d103      	bne.n	800e134 <pbuf_take+0xf0>
 800e12c:	88fa      	ldrh	r2, [r7, #6]
 800e12e:	693b      	ldr	r3, [r7, #16]
 800e130:	429a      	cmp	r2, r3
 800e132:	d006      	beq.n	800e142 <pbuf_take+0xfe>
 800e134:	4b05      	ldr	r3, [pc, #20]	; (800e14c <pbuf_take+0x108>)
 800e136:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 800e13a:	490a      	ldr	r1, [pc, #40]	; (800e164 <pbuf_take+0x120>)
 800e13c:	4805      	ldr	r0, [pc, #20]	; (800e154 <pbuf_take+0x110>)
 800e13e:	f009 fae9 	bl	8017714 <iprintf>
  return ERR_OK;
 800e142:	2300      	movs	r3, #0
}
 800e144:	4618      	mov	r0, r3
 800e146:	3720      	adds	r7, #32
 800e148:	46bd      	mov	sp, r7
 800e14a:	bd80      	pop	{r7, pc}
 800e14c:	080199a8 	.word	0x080199a8
 800e150:	08019d80 	.word	0x08019d80
 800e154:	08019a08 	.word	0x08019a08
 800e158:	08019d98 	.word	0x08019d98
 800e15c:	08019db4 	.word	0x08019db4
 800e160:	08019dd4 	.word	0x08019dd4
 800e164:	08019dec 	.word	0x08019dec

0800e168 <pbuf_take_at>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take_at(struct pbuf *buf, const void *dataptr, u16_t len, u16_t offset)
{
 800e168:	b580      	push	{r7, lr}
 800e16a:	b088      	sub	sp, #32
 800e16c:	af00      	add	r7, sp, #0
 800e16e:	60f8      	str	r0, [r7, #12]
 800e170:	60b9      	str	r1, [r7, #8]
 800e172:	4611      	mov	r1, r2
 800e174:	461a      	mov	r2, r3
 800e176:	460b      	mov	r3, r1
 800e178:	80fb      	strh	r3, [r7, #6]
 800e17a:	4613      	mov	r3, r2
 800e17c:	80bb      	strh	r3, [r7, #4]
  u16_t target_offset;
  struct pbuf *q = pbuf_skip(buf, offset, &target_offset);
 800e17e:	f107 0210 	add.w	r2, r7, #16
 800e182:	88bb      	ldrh	r3, [r7, #4]
 800e184:	4619      	mov	r1, r3
 800e186:	68f8      	ldr	r0, [r7, #12]
 800e188:	f7ff ff49 	bl	800e01e <pbuf_skip>
 800e18c:	61f8      	str	r0, [r7, #28]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->tot_len >= target_offset + len)) {
 800e18e:	69fb      	ldr	r3, [r7, #28]
 800e190:	2b00      	cmp	r3, #0
 800e192:	d047      	beq.n	800e224 <pbuf_take_at+0xbc>
 800e194:	69fb      	ldr	r3, [r7, #28]
 800e196:	891b      	ldrh	r3, [r3, #8]
 800e198:	461a      	mov	r2, r3
 800e19a:	8a3b      	ldrh	r3, [r7, #16]
 800e19c:	4619      	mov	r1, r3
 800e19e:	88fb      	ldrh	r3, [r7, #6]
 800e1a0:	440b      	add	r3, r1
 800e1a2:	429a      	cmp	r2, r3
 800e1a4:	db3e      	blt.n	800e224 <pbuf_take_at+0xbc>
    u16_t remaining_len = len;
 800e1a6:	88fb      	ldrh	r3, [r7, #6]
 800e1a8:	837b      	strh	r3, [r7, #26]
    const u8_t *src_ptr = (const u8_t *)dataptr;
 800e1aa:	68bb      	ldr	r3, [r7, #8]
 800e1ac:	617b      	str	r3, [r7, #20]
    /* copy the part that goes into the first pbuf */
    u16_t first_copy_len;
    LWIP_ASSERT("check pbuf_skip result", target_offset < q->len);
 800e1ae:	69fb      	ldr	r3, [r7, #28]
 800e1b0:	895a      	ldrh	r2, [r3, #10]
 800e1b2:	8a3b      	ldrh	r3, [r7, #16]
 800e1b4:	429a      	cmp	r2, r3
 800e1b6:	d806      	bhi.n	800e1c6 <pbuf_take_at+0x5e>
 800e1b8:	4b1d      	ldr	r3, [pc, #116]	; (800e230 <pbuf_take_at+0xc8>)
 800e1ba:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800e1be:	491d      	ldr	r1, [pc, #116]	; (800e234 <pbuf_take_at+0xcc>)
 800e1c0:	481d      	ldr	r0, [pc, #116]	; (800e238 <pbuf_take_at+0xd0>)
 800e1c2:	f009 faa7 	bl	8017714 <iprintf>
    first_copy_len = (u16_t)LWIP_MIN(q->len - target_offset, len);
 800e1c6:	69fb      	ldr	r3, [r7, #28]
 800e1c8:	895b      	ldrh	r3, [r3, #10]
 800e1ca:	461a      	mov	r2, r3
 800e1cc:	8a3b      	ldrh	r3, [r7, #16]
 800e1ce:	1ad2      	subs	r2, r2, r3
 800e1d0:	88fb      	ldrh	r3, [r7, #6]
 800e1d2:	429a      	cmp	r2, r3
 800e1d4:	da05      	bge.n	800e1e2 <pbuf_take_at+0x7a>
 800e1d6:	69fb      	ldr	r3, [r7, #28]
 800e1d8:	895a      	ldrh	r2, [r3, #10]
 800e1da:	8a3b      	ldrh	r3, [r7, #16]
 800e1dc:	1ad3      	subs	r3, r2, r3
 800e1de:	b29b      	uxth	r3, r3
 800e1e0:	e000      	b.n	800e1e4 <pbuf_take_at+0x7c>
 800e1e2:	88fb      	ldrh	r3, [r7, #6]
 800e1e4:	827b      	strh	r3, [r7, #18]
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
 800e1e6:	69fb      	ldr	r3, [r7, #28]
 800e1e8:	685b      	ldr	r3, [r3, #4]
 800e1ea:	8a3a      	ldrh	r2, [r7, #16]
 800e1ec:	4413      	add	r3, r2
 800e1ee:	8a7a      	ldrh	r2, [r7, #18]
 800e1f0:	68b9      	ldr	r1, [r7, #8]
 800e1f2:	4618      	mov	r0, r3
 800e1f4:	f009 f9b5 	bl	8017562 <memcpy>
    remaining_len = (u16_t)(remaining_len - first_copy_len);
 800e1f8:	8b7a      	ldrh	r2, [r7, #26]
 800e1fa:	8a7b      	ldrh	r3, [r7, #18]
 800e1fc:	1ad3      	subs	r3, r2, r3
 800e1fe:	837b      	strh	r3, [r7, #26]
    src_ptr += first_copy_len;
 800e200:	8a7b      	ldrh	r3, [r7, #18]
 800e202:	697a      	ldr	r2, [r7, #20]
 800e204:	4413      	add	r3, r2
 800e206:	617b      	str	r3, [r7, #20]
    if (remaining_len > 0) {
 800e208:	8b7b      	ldrh	r3, [r7, #26]
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d008      	beq.n	800e220 <pbuf_take_at+0xb8>
      return pbuf_take(q->next, src_ptr, remaining_len);
 800e20e:	69fb      	ldr	r3, [r7, #28]
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	8b7a      	ldrh	r2, [r7, #26]
 800e214:	6979      	ldr	r1, [r7, #20]
 800e216:	4618      	mov	r0, r3
 800e218:	f7ff ff14 	bl	800e044 <pbuf_take>
 800e21c:	4603      	mov	r3, r0
 800e21e:	e003      	b.n	800e228 <pbuf_take_at+0xc0>
    }
    return ERR_OK;
 800e220:	2300      	movs	r3, #0
 800e222:	e001      	b.n	800e228 <pbuf_take_at+0xc0>
  }
  return ERR_MEM;
 800e224:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e228:	4618      	mov	r0, r3
 800e22a:	3720      	adds	r7, #32
 800e22c:	46bd      	mov	sp, r7
 800e22e:	bd80      	pop	{r7, pc}
 800e230:	080199a8 	.word	0x080199a8
 800e234:	08019e04 	.word	0x08019e04
 800e238:	08019a08 	.word	0x08019a08

0800e23c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800e23c:	b580      	push	{r7, lr}
 800e23e:	b084      	sub	sp, #16
 800e240:	af00      	add	r7, sp, #0
 800e242:	4603      	mov	r3, r0
 800e244:	603a      	str	r2, [r7, #0]
 800e246:	71fb      	strb	r3, [r7, #7]
 800e248:	460b      	mov	r3, r1
 800e24a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800e24c:	683b      	ldr	r3, [r7, #0]
 800e24e:	8919      	ldrh	r1, [r3, #8]
 800e250:	88ba      	ldrh	r2, [r7, #4]
 800e252:	79fb      	ldrb	r3, [r7, #7]
 800e254:	4618      	mov	r0, r3
 800e256:	f7ff f92d 	bl	800d4b4 <pbuf_alloc>
 800e25a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800e25c:	68fb      	ldr	r3, [r7, #12]
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d101      	bne.n	800e266 <pbuf_clone+0x2a>
    return NULL;
 800e262:	2300      	movs	r3, #0
 800e264:	e011      	b.n	800e28a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800e266:	6839      	ldr	r1, [r7, #0]
 800e268:	68f8      	ldr	r0, [r7, #12]
 800e26a:	f7ff fd6b 	bl	800dd44 <pbuf_copy>
 800e26e:	4603      	mov	r3, r0
 800e270:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800e272:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800e276:	2b00      	cmp	r3, #0
 800e278:	d006      	beq.n	800e288 <pbuf_clone+0x4c>
 800e27a:	4b06      	ldr	r3, [pc, #24]	; (800e294 <pbuf_clone+0x58>)
 800e27c:	f240 5224 	movw	r2, #1316	; 0x524
 800e280:	4905      	ldr	r1, [pc, #20]	; (800e298 <pbuf_clone+0x5c>)
 800e282:	4806      	ldr	r0, [pc, #24]	; (800e29c <pbuf_clone+0x60>)
 800e284:	f009 fa46 	bl	8017714 <iprintf>
  return q;
 800e288:	68fb      	ldr	r3, [r7, #12]
}
 800e28a:	4618      	mov	r0, r3
 800e28c:	3710      	adds	r7, #16
 800e28e:	46bd      	mov	sp, r7
 800e290:	bd80      	pop	{r7, pc}
 800e292:	bf00      	nop
 800e294:	080199a8 	.word	0x080199a8
 800e298:	08019e1c 	.word	0x08019e1c
 800e29c:	08019a08 	.word	0x08019a08

0800e2a0 <pbuf_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p OR ZERO IF 'offset' >= p->tot_len
 */
u8_t
pbuf_get_at(const struct pbuf *p, u16_t offset)
{
 800e2a0:	b580      	push	{r7, lr}
 800e2a2:	b084      	sub	sp, #16
 800e2a4:	af00      	add	r7, sp, #0
 800e2a6:	6078      	str	r0, [r7, #4]
 800e2a8:	460b      	mov	r3, r1
 800e2aa:	807b      	strh	r3, [r7, #2]
  int ret = pbuf_try_get_at(p, offset);
 800e2ac:	887b      	ldrh	r3, [r7, #2]
 800e2ae:	4619      	mov	r1, r3
 800e2b0:	6878      	ldr	r0, [r7, #4]
 800e2b2:	f000 f80c 	bl	800e2ce <pbuf_try_get_at>
 800e2b6:	60f8      	str	r0, [r7, #12]
  if (ret >= 0) {
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	db02      	blt.n	800e2c4 <pbuf_get_at+0x24>
    return (u8_t)ret;
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	b2db      	uxtb	r3, r3
 800e2c2:	e000      	b.n	800e2c6 <pbuf_get_at+0x26>
  }
  return 0;
 800e2c4:	2300      	movs	r3, #0
}
 800e2c6:	4618      	mov	r0, r3
 800e2c8:	3710      	adds	r7, #16
 800e2ca:	46bd      	mov	sp, r7
 800e2cc:	bd80      	pop	{r7, pc}

0800e2ce <pbuf_try_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p [0..0xFF] OR negative if 'offset' >= p->tot_len
 */
int
pbuf_try_get_at(const struct pbuf *p, u16_t offset)
{
 800e2ce:	b580      	push	{r7, lr}
 800e2d0:	b084      	sub	sp, #16
 800e2d2:	af00      	add	r7, sp, #0
 800e2d4:	6078      	str	r0, [r7, #4]
 800e2d6:	460b      	mov	r3, r1
 800e2d8:	807b      	strh	r3, [r7, #2]
  u16_t q_idx;
  const struct pbuf *q = pbuf_skip_const(p, offset, &q_idx);
 800e2da:	f107 020a 	add.w	r2, r7, #10
 800e2de:	887b      	ldrh	r3, [r7, #2]
 800e2e0:	4619      	mov	r1, r3
 800e2e2:	6878      	ldr	r0, [r7, #4]
 800e2e4:	f7ff fe72 	bl	800dfcc <pbuf_skip_const>
 800e2e8:	60f8      	str	r0, [r7, #12]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d00a      	beq.n	800e306 <pbuf_try_get_at+0x38>
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	895a      	ldrh	r2, [r3, #10]
 800e2f4:	897b      	ldrh	r3, [r7, #10]
 800e2f6:	429a      	cmp	r2, r3
 800e2f8:	d905      	bls.n	800e306 <pbuf_try_get_at+0x38>
    return ((u8_t *)q->payload)[q_idx];
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	685b      	ldr	r3, [r3, #4]
 800e2fe:	897a      	ldrh	r2, [r7, #10]
 800e300:	4413      	add	r3, r2
 800e302:	781b      	ldrb	r3, [r3, #0]
 800e304:	e001      	b.n	800e30a <pbuf_try_get_at+0x3c>
  }
  return -1;
 800e306:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e30a:	4618      	mov	r0, r3
 800e30c:	3710      	adds	r7, #16
 800e30e:	46bd      	mov	sp, r7
 800e310:	bd80      	pop	{r7, pc}

0800e312 <pbuf_put_at>:
 * @param offset offset into p of the byte to write
 * @param data byte to write at an offset into p
 */
void
pbuf_put_at(struct pbuf *p, u16_t offset, u8_t data)
{
 800e312:	b580      	push	{r7, lr}
 800e314:	b084      	sub	sp, #16
 800e316:	af00      	add	r7, sp, #0
 800e318:	6078      	str	r0, [r7, #4]
 800e31a:	460b      	mov	r3, r1
 800e31c:	807b      	strh	r3, [r7, #2]
 800e31e:	4613      	mov	r3, r2
 800e320:	707b      	strb	r3, [r7, #1]
  u16_t q_idx;
  struct pbuf *q = pbuf_skip(p, offset, &q_idx);
 800e322:	f107 020a 	add.w	r2, r7, #10
 800e326:	887b      	ldrh	r3, [r7, #2]
 800e328:	4619      	mov	r1, r3
 800e32a:	6878      	ldr	r0, [r7, #4]
 800e32c:	f7ff fe77 	bl	800e01e <pbuf_skip>
 800e330:	60f8      	str	r0, [r7, #12]

  /* write requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	2b00      	cmp	r3, #0
 800e336:	d00a      	beq.n	800e34e <pbuf_put_at+0x3c>
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	895a      	ldrh	r2, [r3, #10]
 800e33c:	897b      	ldrh	r3, [r7, #10]
 800e33e:	429a      	cmp	r2, r3
 800e340:	d905      	bls.n	800e34e <pbuf_put_at+0x3c>
    ((u8_t *)q->payload)[q_idx] = data;
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	685b      	ldr	r3, [r3, #4]
 800e346:	897a      	ldrh	r2, [r7, #10]
 800e348:	4413      	add	r3, r2
 800e34a:	787a      	ldrb	r2, [r7, #1]
 800e34c:	701a      	strb	r2, [r3, #0]
  }
}
 800e34e:	bf00      	nop
 800e350:	3710      	adds	r7, #16
 800e352:	46bd      	mov	sp, r7
 800e354:	bd80      	pop	{r7, pc}

0800e356 <pbuf_memcmp>:
 * @return zero if equal, nonzero otherwise
 *         (0xffff if p is too short, diffoffset+1 otherwise)
 */
u16_t
pbuf_memcmp(const struct pbuf *p, u16_t offset, const void *s2, u16_t n)
{
 800e356:	b580      	push	{r7, lr}
 800e358:	b088      	sub	sp, #32
 800e35a:	af00      	add	r7, sp, #0
 800e35c:	60f8      	str	r0, [r7, #12]
 800e35e:	607a      	str	r2, [r7, #4]
 800e360:	461a      	mov	r2, r3
 800e362:	460b      	mov	r3, r1
 800e364:	817b      	strh	r3, [r7, #10]
 800e366:	4613      	mov	r3, r2
 800e368:	813b      	strh	r3, [r7, #8]
  u16_t start = offset;
 800e36a:	897b      	ldrh	r3, [r7, #10]
 800e36c:	83fb      	strh	r3, [r7, #30]
  const struct pbuf *q = p;
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	61bb      	str	r3, [r7, #24]
  u16_t i;

  /* pbuf long enough to perform check? */
  if (p->tot_len < (offset + n)) {
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	891b      	ldrh	r3, [r3, #8]
 800e376:	4619      	mov	r1, r3
 800e378:	897a      	ldrh	r2, [r7, #10]
 800e37a:	893b      	ldrh	r3, [r7, #8]
 800e37c:	4413      	add	r3, r2
 800e37e:	4299      	cmp	r1, r3
 800e380:	da0a      	bge.n	800e398 <pbuf_memcmp+0x42>
    return 0xffff;
 800e382:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e386:	e03a      	b.n	800e3fe <pbuf_memcmp+0xa8>
  }

  /* get the correct pbuf from chain. We know it succeeds because of p->tot_len check above. */
  while ((q != NULL) && (q->len <= start)) {
    start = (u16_t)(start - q->len);
 800e388:	69bb      	ldr	r3, [r7, #24]
 800e38a:	895b      	ldrh	r3, [r3, #10]
 800e38c:	8bfa      	ldrh	r2, [r7, #30]
 800e38e:	1ad3      	subs	r3, r2, r3
 800e390:	83fb      	strh	r3, [r7, #30]
    q = q->next;
 800e392:	69bb      	ldr	r3, [r7, #24]
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	61bb      	str	r3, [r7, #24]
  while ((q != NULL) && (q->len <= start)) {
 800e398:	69bb      	ldr	r3, [r7, #24]
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d004      	beq.n	800e3a8 <pbuf_memcmp+0x52>
 800e39e:	69bb      	ldr	r3, [r7, #24]
 800e3a0:	895b      	ldrh	r3, [r3, #10]
 800e3a2:	8bfa      	ldrh	r2, [r7, #30]
 800e3a4:	429a      	cmp	r2, r3
 800e3a6:	d2ef      	bcs.n	800e388 <pbuf_memcmp+0x32>
  }

  /* return requested data if pbuf is OK */
  for (i = 0; i < n; i++) {
 800e3a8:	2300      	movs	r3, #0
 800e3aa:	82fb      	strh	r3, [r7, #22]
 800e3ac:	e022      	b.n	800e3f4 <pbuf_memcmp+0x9e>
    /* We know pbuf_get_at() succeeds because of p->tot_len check above. */
    u8_t a = pbuf_get_at(q, (u16_t)(start + i));
 800e3ae:	8bfa      	ldrh	r2, [r7, #30]
 800e3b0:	8afb      	ldrh	r3, [r7, #22]
 800e3b2:	4413      	add	r3, r2
 800e3b4:	b29b      	uxth	r3, r3
 800e3b6:	4619      	mov	r1, r3
 800e3b8:	69b8      	ldr	r0, [r7, #24]
 800e3ba:	f7ff ff71 	bl	800e2a0 <pbuf_get_at>
 800e3be:	4603      	mov	r3, r0
 800e3c0:	757b      	strb	r3, [r7, #21]
    u8_t b = ((const u8_t *)s2)[i];
 800e3c2:	8afb      	ldrh	r3, [r7, #22]
 800e3c4:	687a      	ldr	r2, [r7, #4]
 800e3c6:	4413      	add	r3, r2
 800e3c8:	781b      	ldrb	r3, [r3, #0]
 800e3ca:	753b      	strb	r3, [r7, #20]
    if (a != b) {
 800e3cc:	7d7a      	ldrb	r2, [r7, #21]
 800e3ce:	7d3b      	ldrb	r3, [r7, #20]
 800e3d0:	429a      	cmp	r2, r3
 800e3d2:	d00c      	beq.n	800e3ee <pbuf_memcmp+0x98>
      return (u16_t)LWIP_MIN(i + 1, 0xFFFF);
 800e3d4:	8afb      	ldrh	r3, [r7, #22]
 800e3d6:	3301      	adds	r3, #1
 800e3d8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e3dc:	4293      	cmp	r3, r2
 800e3de:	dc03      	bgt.n	800e3e8 <pbuf_memcmp+0x92>
 800e3e0:	8afb      	ldrh	r3, [r7, #22]
 800e3e2:	3301      	adds	r3, #1
 800e3e4:	b29b      	uxth	r3, r3
 800e3e6:	e00a      	b.n	800e3fe <pbuf_memcmp+0xa8>
 800e3e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e3ec:	e007      	b.n	800e3fe <pbuf_memcmp+0xa8>
  for (i = 0; i < n; i++) {
 800e3ee:	8afb      	ldrh	r3, [r7, #22]
 800e3f0:	3301      	adds	r3, #1
 800e3f2:	82fb      	strh	r3, [r7, #22]
 800e3f4:	8afa      	ldrh	r2, [r7, #22]
 800e3f6:	893b      	ldrh	r3, [r7, #8]
 800e3f8:	429a      	cmp	r2, r3
 800e3fa:	d3d8      	bcc.n	800e3ae <pbuf_memcmp+0x58>
    }
  }
  return 0;
 800e3fc:	2300      	movs	r3, #0
}
 800e3fe:	4618      	mov	r0, r3
 800e400:	3720      	adds	r7, #32
 800e402:	46bd      	mov	sp, r7
 800e404:	bd80      	pop	{r7, pc}

0800e406 <pbuf_memfind>:
 * @param start_offset offset into p at which to start searching
 * @return 0xFFFF if substr was not found in p or the index where it was found
 */
u16_t
pbuf_memfind(const struct pbuf *p, const void *mem, u16_t mem_len, u16_t start_offset)
{
 800e406:	b580      	push	{r7, lr}
 800e408:	b086      	sub	sp, #24
 800e40a:	af00      	add	r7, sp, #0
 800e40c:	60f8      	str	r0, [r7, #12]
 800e40e:	60b9      	str	r1, [r7, #8]
 800e410:	4611      	mov	r1, r2
 800e412:	461a      	mov	r2, r3
 800e414:	460b      	mov	r3, r1
 800e416:	80fb      	strh	r3, [r7, #6]
 800e418:	4613      	mov	r3, r2
 800e41a:	80bb      	strh	r3, [r7, #4]
  u16_t i;
  u16_t max_cmp_start = (u16_t)(p->tot_len - mem_len);
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	891a      	ldrh	r2, [r3, #8]
 800e420:	88fb      	ldrh	r3, [r7, #6]
 800e422:	1ad3      	subs	r3, r2, r3
 800e424:	82bb      	strh	r3, [r7, #20]
  if (p->tot_len >= mem_len + start_offset) {
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	891b      	ldrh	r3, [r3, #8]
 800e42a:	4619      	mov	r1, r3
 800e42c:	88fa      	ldrh	r2, [r7, #6]
 800e42e:	88bb      	ldrh	r3, [r7, #4]
 800e430:	4413      	add	r3, r2
 800e432:	4299      	cmp	r1, r3
 800e434:	db16      	blt.n	800e464 <pbuf_memfind+0x5e>
    for (i = start_offset; i <= max_cmp_start; i++) {
 800e436:	88bb      	ldrh	r3, [r7, #4]
 800e438:	82fb      	strh	r3, [r7, #22]
 800e43a:	e00f      	b.n	800e45c <pbuf_memfind+0x56>
      u16_t plus = pbuf_memcmp(p, i, mem, mem_len);
 800e43c:	88fb      	ldrh	r3, [r7, #6]
 800e43e:	8af9      	ldrh	r1, [r7, #22]
 800e440:	68ba      	ldr	r2, [r7, #8]
 800e442:	68f8      	ldr	r0, [r7, #12]
 800e444:	f7ff ff87 	bl	800e356 <pbuf_memcmp>
 800e448:	4603      	mov	r3, r0
 800e44a:	827b      	strh	r3, [r7, #18]
      if (plus == 0) {
 800e44c:	8a7b      	ldrh	r3, [r7, #18]
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d101      	bne.n	800e456 <pbuf_memfind+0x50>
        return i;
 800e452:	8afb      	ldrh	r3, [r7, #22]
 800e454:	e008      	b.n	800e468 <pbuf_memfind+0x62>
    for (i = start_offset; i <= max_cmp_start; i++) {
 800e456:	8afb      	ldrh	r3, [r7, #22]
 800e458:	3301      	adds	r3, #1
 800e45a:	82fb      	strh	r3, [r7, #22]
 800e45c:	8afa      	ldrh	r2, [r7, #22]
 800e45e:	8abb      	ldrh	r3, [r7, #20]
 800e460:	429a      	cmp	r2, r3
 800e462:	d9eb      	bls.n	800e43c <pbuf_memfind+0x36>
      }
    }
  }
  return 0xFFFF;
 800e464:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800e468:	4618      	mov	r0, r3
 800e46a:	3718      	adds	r7, #24
 800e46c:	46bd      	mov	sp, r7
 800e46e:	bd80      	pop	{r7, pc}

0800e470 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800e470:	b580      	push	{r7, lr}
 800e472:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800e474:	f009 f966 	bl	8017744 <rand>
 800e478:	4603      	mov	r3, r0
 800e47a:	b29b      	uxth	r3, r3
 800e47c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800e480:	b29b      	uxth	r3, r3
 800e482:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800e486:	b29a      	uxth	r2, r3
 800e488:	4b01      	ldr	r3, [pc, #4]	; (800e490 <tcp_init+0x20>)
 800e48a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800e48c:	bf00      	nop
 800e48e:	bd80      	pop	{r7, pc}
 800e490:	2000000c 	.word	0x2000000c

0800e494 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800e494:	b580      	push	{r7, lr}
 800e496:	b082      	sub	sp, #8
 800e498:	af00      	add	r7, sp, #0
 800e49a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	7d1b      	ldrb	r3, [r3, #20]
 800e4a0:	2b01      	cmp	r3, #1
 800e4a2:	d105      	bne.n	800e4b0 <tcp_free+0x1c>
 800e4a4:	4b06      	ldr	r3, [pc, #24]	; (800e4c0 <tcp_free+0x2c>)
 800e4a6:	22d4      	movs	r2, #212	; 0xd4
 800e4a8:	4906      	ldr	r1, [pc, #24]	; (800e4c4 <tcp_free+0x30>)
 800e4aa:	4807      	ldr	r0, [pc, #28]	; (800e4c8 <tcp_free+0x34>)
 800e4ac:	f009 f932 	bl	8017714 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800e4b0:	6879      	ldr	r1, [r7, #4]
 800e4b2:	2001      	movs	r0, #1
 800e4b4:	f7fe fc3e 	bl	800cd34 <memp_free>
}
 800e4b8:	bf00      	nop
 800e4ba:	3708      	adds	r7, #8
 800e4bc:	46bd      	mov	sp, r7
 800e4be:	bd80      	pop	{r7, pc}
 800e4c0:	08019ea8 	.word	0x08019ea8
 800e4c4:	08019ed8 	.word	0x08019ed8
 800e4c8:	08019eec 	.word	0x08019eec

0800e4cc <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800e4cc:	b580      	push	{r7, lr}
 800e4ce:	b082      	sub	sp, #8
 800e4d0:	af00      	add	r7, sp, #0
 800e4d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	7d1b      	ldrb	r3, [r3, #20]
 800e4d8:	2b01      	cmp	r3, #1
 800e4da:	d105      	bne.n	800e4e8 <tcp_free_listen+0x1c>
 800e4dc:	4b06      	ldr	r3, [pc, #24]	; (800e4f8 <tcp_free_listen+0x2c>)
 800e4de:	22df      	movs	r2, #223	; 0xdf
 800e4e0:	4906      	ldr	r1, [pc, #24]	; (800e4fc <tcp_free_listen+0x30>)
 800e4e2:	4807      	ldr	r0, [pc, #28]	; (800e500 <tcp_free_listen+0x34>)
 800e4e4:	f009 f916 	bl	8017714 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800e4e8:	6879      	ldr	r1, [r7, #4]
 800e4ea:	2002      	movs	r0, #2
 800e4ec:	f7fe fc22 	bl	800cd34 <memp_free>
}
 800e4f0:	bf00      	nop
 800e4f2:	3708      	adds	r7, #8
 800e4f4:	46bd      	mov	sp, r7
 800e4f6:	bd80      	pop	{r7, pc}
 800e4f8:	08019ea8 	.word	0x08019ea8
 800e4fc:	08019f14 	.word	0x08019f14
 800e500:	08019eec 	.word	0x08019eec

0800e504 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800e504:	b580      	push	{r7, lr}
 800e506:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800e508:	f000 fff8 	bl	800f4fc <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800e50c:	4b07      	ldr	r3, [pc, #28]	; (800e52c <tcp_tmr+0x28>)
 800e50e:	781b      	ldrb	r3, [r3, #0]
 800e510:	3301      	adds	r3, #1
 800e512:	b2da      	uxtb	r2, r3
 800e514:	4b05      	ldr	r3, [pc, #20]	; (800e52c <tcp_tmr+0x28>)
 800e516:	701a      	strb	r2, [r3, #0]
 800e518:	4b04      	ldr	r3, [pc, #16]	; (800e52c <tcp_tmr+0x28>)
 800e51a:	781b      	ldrb	r3, [r3, #0]
 800e51c:	f003 0301 	and.w	r3, r3, #1
 800e520:	2b00      	cmp	r3, #0
 800e522:	d001      	beq.n	800e528 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800e524:	f000 fcac 	bl	800ee80 <tcp_slowtmr>
  }
}
 800e528:	bf00      	nop
 800e52a:	bd80      	pop	{r7, pc}
 800e52c:	20004541 	.word	0x20004541

0800e530 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800e530:	b580      	push	{r7, lr}
 800e532:	b084      	sub	sp, #16
 800e534:	af00      	add	r7, sp, #0
 800e536:	6078      	str	r0, [r7, #4]
 800e538:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800e53a:	683b      	ldr	r3, [r7, #0]
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d105      	bne.n	800e54c <tcp_remove_listener+0x1c>
 800e540:	4b0d      	ldr	r3, [pc, #52]	; (800e578 <tcp_remove_listener+0x48>)
 800e542:	22ff      	movs	r2, #255	; 0xff
 800e544:	490d      	ldr	r1, [pc, #52]	; (800e57c <tcp_remove_listener+0x4c>)
 800e546:	480e      	ldr	r0, [pc, #56]	; (800e580 <tcp_remove_listener+0x50>)
 800e548:	f009 f8e4 	bl	8017714 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	60fb      	str	r3, [r7, #12]
 800e550:	e00a      	b.n	800e568 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800e556:	683b      	ldr	r3, [r7, #0]
 800e558:	429a      	cmp	r2, r3
 800e55a:	d102      	bne.n	800e562 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	2200      	movs	r2, #0
 800e560:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	68db      	ldr	r3, [r3, #12]
 800e566:	60fb      	str	r3, [r7, #12]
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d1f1      	bne.n	800e552 <tcp_remove_listener+0x22>
    }
  }
}
 800e56e:	bf00      	nop
 800e570:	3710      	adds	r7, #16
 800e572:	46bd      	mov	sp, r7
 800e574:	bd80      	pop	{r7, pc}
 800e576:	bf00      	nop
 800e578:	08019ea8 	.word	0x08019ea8
 800e57c:	08019f30 	.word	0x08019f30
 800e580:	08019eec 	.word	0x08019eec

0800e584 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800e584:	b580      	push	{r7, lr}
 800e586:	b084      	sub	sp, #16
 800e588:	af00      	add	r7, sp, #0
 800e58a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d106      	bne.n	800e5a0 <tcp_listen_closed+0x1c>
 800e592:	4b14      	ldr	r3, [pc, #80]	; (800e5e4 <tcp_listen_closed+0x60>)
 800e594:	f240 1211 	movw	r2, #273	; 0x111
 800e598:	4913      	ldr	r1, [pc, #76]	; (800e5e8 <tcp_listen_closed+0x64>)
 800e59a:	4814      	ldr	r0, [pc, #80]	; (800e5ec <tcp_listen_closed+0x68>)
 800e59c:	f009 f8ba 	bl	8017714 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	7d1b      	ldrb	r3, [r3, #20]
 800e5a4:	2b01      	cmp	r3, #1
 800e5a6:	d006      	beq.n	800e5b6 <tcp_listen_closed+0x32>
 800e5a8:	4b0e      	ldr	r3, [pc, #56]	; (800e5e4 <tcp_listen_closed+0x60>)
 800e5aa:	f44f 7289 	mov.w	r2, #274	; 0x112
 800e5ae:	4910      	ldr	r1, [pc, #64]	; (800e5f0 <tcp_listen_closed+0x6c>)
 800e5b0:	480e      	ldr	r0, [pc, #56]	; (800e5ec <tcp_listen_closed+0x68>)
 800e5b2:	f009 f8af 	bl	8017714 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800e5b6:	2301      	movs	r3, #1
 800e5b8:	60fb      	str	r3, [r7, #12]
 800e5ba:	e00b      	b.n	800e5d4 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800e5bc:	4a0d      	ldr	r2, [pc, #52]	; (800e5f4 <tcp_listen_closed+0x70>)
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	6879      	ldr	r1, [r7, #4]
 800e5c8:	4618      	mov	r0, r3
 800e5ca:	f7ff ffb1 	bl	800e530 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	3301      	adds	r3, #1
 800e5d2:	60fb      	str	r3, [r7, #12]
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	2b03      	cmp	r3, #3
 800e5d8:	d9f0      	bls.n	800e5bc <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800e5da:	bf00      	nop
 800e5dc:	3710      	adds	r7, #16
 800e5de:	46bd      	mov	sp, r7
 800e5e0:	bd80      	pop	{r7, pc}
 800e5e2:	bf00      	nop
 800e5e4:	08019ea8 	.word	0x08019ea8
 800e5e8:	08019f58 	.word	0x08019f58
 800e5ec:	08019eec 	.word	0x08019eec
 800e5f0:	08019f64 	.word	0x08019f64
 800e5f4:	0801bb98 	.word	0x0801bb98

0800e5f8 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800e5f8:	b5b0      	push	{r4, r5, r7, lr}
 800e5fa:	b088      	sub	sp, #32
 800e5fc:	af04      	add	r7, sp, #16
 800e5fe:	6078      	str	r0, [r7, #4]
 800e600:	460b      	mov	r3, r1
 800e602:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	2b00      	cmp	r3, #0
 800e608:	d106      	bne.n	800e618 <tcp_close_shutdown+0x20>
 800e60a:	4b61      	ldr	r3, [pc, #388]	; (800e790 <tcp_close_shutdown+0x198>)
 800e60c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800e610:	4960      	ldr	r1, [pc, #384]	; (800e794 <tcp_close_shutdown+0x19c>)
 800e612:	4861      	ldr	r0, [pc, #388]	; (800e798 <tcp_close_shutdown+0x1a0>)
 800e614:	f009 f87e 	bl	8017714 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800e618:	78fb      	ldrb	r3, [r7, #3]
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d066      	beq.n	800e6ec <tcp_close_shutdown+0xf4>
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	7d1b      	ldrb	r3, [r3, #20]
 800e622:	2b04      	cmp	r3, #4
 800e624:	d003      	beq.n	800e62e <tcp_close_shutdown+0x36>
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	7d1b      	ldrb	r3, [r3, #20]
 800e62a:	2b07      	cmp	r3, #7
 800e62c:	d15e      	bne.n	800e6ec <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e632:	2b00      	cmp	r3, #0
 800e634:	d104      	bne.n	800e640 <tcp_close_shutdown+0x48>
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e63a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e63e:	d055      	beq.n	800e6ec <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	8b5b      	ldrh	r3, [r3, #26]
 800e644:	f003 0310 	and.w	r3, r3, #16
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d106      	bne.n	800e65a <tcp_close_shutdown+0x62>
 800e64c:	4b50      	ldr	r3, [pc, #320]	; (800e790 <tcp_close_shutdown+0x198>)
 800e64e:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800e652:	4952      	ldr	r1, [pc, #328]	; (800e79c <tcp_close_shutdown+0x1a4>)
 800e654:	4850      	ldr	r0, [pc, #320]	; (800e798 <tcp_close_shutdown+0x1a0>)
 800e656:	f009 f85d 	bl	8017714 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800e662:	687d      	ldr	r5, [r7, #4]
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	3304      	adds	r3, #4
 800e668:	687a      	ldr	r2, [r7, #4]
 800e66a:	8ad2      	ldrh	r2, [r2, #22]
 800e66c:	6879      	ldr	r1, [r7, #4]
 800e66e:	8b09      	ldrh	r1, [r1, #24]
 800e670:	9102      	str	r1, [sp, #8]
 800e672:	9201      	str	r2, [sp, #4]
 800e674:	9300      	str	r3, [sp, #0]
 800e676:	462b      	mov	r3, r5
 800e678:	4622      	mov	r2, r4
 800e67a:	4601      	mov	r1, r0
 800e67c:	6878      	ldr	r0, [r7, #4]
 800e67e:	f005 fd07 	bl	8014090 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800e682:	6878      	ldr	r0, [r7, #4]
 800e684:	f001 faca 	bl	800fc1c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800e688:	4b45      	ldr	r3, [pc, #276]	; (800e7a0 <tcp_close_shutdown+0x1a8>)
 800e68a:	681a      	ldr	r2, [r3, #0]
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	429a      	cmp	r2, r3
 800e690:	d105      	bne.n	800e69e <tcp_close_shutdown+0xa6>
 800e692:	4b43      	ldr	r3, [pc, #268]	; (800e7a0 <tcp_close_shutdown+0x1a8>)
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	68db      	ldr	r3, [r3, #12]
 800e698:	4a41      	ldr	r2, [pc, #260]	; (800e7a0 <tcp_close_shutdown+0x1a8>)
 800e69a:	6013      	str	r3, [r2, #0]
 800e69c:	e013      	b.n	800e6c6 <tcp_close_shutdown+0xce>
 800e69e:	4b40      	ldr	r3, [pc, #256]	; (800e7a0 <tcp_close_shutdown+0x1a8>)
 800e6a0:	681b      	ldr	r3, [r3, #0]
 800e6a2:	60fb      	str	r3, [r7, #12]
 800e6a4:	e00c      	b.n	800e6c0 <tcp_close_shutdown+0xc8>
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	68da      	ldr	r2, [r3, #12]
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	429a      	cmp	r2, r3
 800e6ae:	d104      	bne.n	800e6ba <tcp_close_shutdown+0xc2>
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	68da      	ldr	r2, [r3, #12]
 800e6b4:	68fb      	ldr	r3, [r7, #12]
 800e6b6:	60da      	str	r2, [r3, #12]
 800e6b8:	e005      	b.n	800e6c6 <tcp_close_shutdown+0xce>
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	68db      	ldr	r3, [r3, #12]
 800e6be:	60fb      	str	r3, [r7, #12]
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d1ef      	bne.n	800e6a6 <tcp_close_shutdown+0xae>
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	2200      	movs	r2, #0
 800e6ca:	60da      	str	r2, [r3, #12]
 800e6cc:	4b35      	ldr	r3, [pc, #212]	; (800e7a4 <tcp_close_shutdown+0x1ac>)
 800e6ce:	2201      	movs	r2, #1
 800e6d0:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800e6d2:	4b35      	ldr	r3, [pc, #212]	; (800e7a8 <tcp_close_shutdown+0x1b0>)
 800e6d4:	681a      	ldr	r2, [r3, #0]
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	429a      	cmp	r2, r3
 800e6da:	d102      	bne.n	800e6e2 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800e6dc:	f003 ff5c 	bl	8012598 <tcp_trigger_input_pcb_close>
 800e6e0:	e002      	b.n	800e6e8 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800e6e2:	6878      	ldr	r0, [r7, #4]
 800e6e4:	f7ff fed6 	bl	800e494 <tcp_free>
      }
      return ERR_OK;
 800e6e8:	2300      	movs	r3, #0
 800e6ea:	e04d      	b.n	800e788 <tcp_close_shutdown+0x190>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	7d1b      	ldrb	r3, [r3, #20]
 800e6f0:	2b01      	cmp	r3, #1
 800e6f2:	d02d      	beq.n	800e750 <tcp_close_shutdown+0x158>
 800e6f4:	2b02      	cmp	r3, #2
 800e6f6:	d036      	beq.n	800e766 <tcp_close_shutdown+0x16e>
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d13f      	bne.n	800e77c <tcp_close_shutdown+0x184>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	8adb      	ldrh	r3, [r3, #22]
 800e700:	2b00      	cmp	r3, #0
 800e702:	d021      	beq.n	800e748 <tcp_close_shutdown+0x150>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800e704:	4b29      	ldr	r3, [pc, #164]	; (800e7ac <tcp_close_shutdown+0x1b4>)
 800e706:	681a      	ldr	r2, [r3, #0]
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	429a      	cmp	r2, r3
 800e70c:	d105      	bne.n	800e71a <tcp_close_shutdown+0x122>
 800e70e:	4b27      	ldr	r3, [pc, #156]	; (800e7ac <tcp_close_shutdown+0x1b4>)
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	68db      	ldr	r3, [r3, #12]
 800e714:	4a25      	ldr	r2, [pc, #148]	; (800e7ac <tcp_close_shutdown+0x1b4>)
 800e716:	6013      	str	r3, [r2, #0]
 800e718:	e013      	b.n	800e742 <tcp_close_shutdown+0x14a>
 800e71a:	4b24      	ldr	r3, [pc, #144]	; (800e7ac <tcp_close_shutdown+0x1b4>)
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	60bb      	str	r3, [r7, #8]
 800e720:	e00c      	b.n	800e73c <tcp_close_shutdown+0x144>
 800e722:	68bb      	ldr	r3, [r7, #8]
 800e724:	68da      	ldr	r2, [r3, #12]
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	429a      	cmp	r2, r3
 800e72a:	d104      	bne.n	800e736 <tcp_close_shutdown+0x13e>
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	68da      	ldr	r2, [r3, #12]
 800e730:	68bb      	ldr	r3, [r7, #8]
 800e732:	60da      	str	r2, [r3, #12]
 800e734:	e005      	b.n	800e742 <tcp_close_shutdown+0x14a>
 800e736:	68bb      	ldr	r3, [r7, #8]
 800e738:	68db      	ldr	r3, [r3, #12]
 800e73a:	60bb      	str	r3, [r7, #8]
 800e73c:	68bb      	ldr	r3, [r7, #8]
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d1ef      	bne.n	800e722 <tcp_close_shutdown+0x12a>
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	2200      	movs	r2, #0
 800e746:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800e748:	6878      	ldr	r0, [r7, #4]
 800e74a:	f7ff fea3 	bl	800e494 <tcp_free>
      break;
 800e74e:	e01a      	b.n	800e786 <tcp_close_shutdown+0x18e>
    case LISTEN:
      tcp_listen_closed(pcb);
 800e750:	6878      	ldr	r0, [r7, #4]
 800e752:	f7ff ff17 	bl	800e584 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800e756:	6879      	ldr	r1, [r7, #4]
 800e758:	4815      	ldr	r0, [pc, #84]	; (800e7b0 <tcp_close_shutdown+0x1b8>)
 800e75a:	f001 faaf 	bl	800fcbc <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800e75e:	6878      	ldr	r0, [r7, #4]
 800e760:	f7ff feb4 	bl	800e4cc <tcp_free_listen>
      break;
 800e764:	e00f      	b.n	800e786 <tcp_close_shutdown+0x18e>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800e766:	6879      	ldr	r1, [r7, #4]
 800e768:	480d      	ldr	r0, [pc, #52]	; (800e7a0 <tcp_close_shutdown+0x1a8>)
 800e76a:	f001 faa7 	bl	800fcbc <tcp_pcb_remove>
 800e76e:	4b0d      	ldr	r3, [pc, #52]	; (800e7a4 <tcp_close_shutdown+0x1ac>)
 800e770:	2201      	movs	r2, #1
 800e772:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800e774:	6878      	ldr	r0, [r7, #4]
 800e776:	f7ff fe8d 	bl	800e494 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800e77a:	e004      	b.n	800e786 <tcp_close_shutdown+0x18e>
    default:
      return tcp_close_shutdown_fin(pcb);
 800e77c:	6878      	ldr	r0, [r7, #4]
 800e77e:	f000 f819 	bl	800e7b4 <tcp_close_shutdown_fin>
 800e782:	4603      	mov	r3, r0
 800e784:	e000      	b.n	800e788 <tcp_close_shutdown+0x190>
  }
  return ERR_OK;
 800e786:	2300      	movs	r3, #0
}
 800e788:	4618      	mov	r0, r3
 800e78a:	3710      	adds	r7, #16
 800e78c:	46bd      	mov	sp, r7
 800e78e:	bdb0      	pop	{r4, r5, r7, pc}
 800e790:	08019ea8 	.word	0x08019ea8
 800e794:	08019f7c 	.word	0x08019f7c
 800e798:	08019eec 	.word	0x08019eec
 800e79c:	08019f9c 	.word	0x08019f9c
 800e7a0:	20009624 	.word	0x20009624
 800e7a4:	20009620 	.word	0x20009620
 800e7a8:	20009638 	.word	0x20009638
 800e7ac:	20009630 	.word	0x20009630
 800e7b0:	2000962c 	.word	0x2000962c

0800e7b4 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800e7b4:	b580      	push	{r7, lr}
 800e7b6:	b084      	sub	sp, #16
 800e7b8:	af00      	add	r7, sp, #0
 800e7ba:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d106      	bne.n	800e7d0 <tcp_close_shutdown_fin+0x1c>
 800e7c2:	4b2c      	ldr	r3, [pc, #176]	; (800e874 <tcp_close_shutdown_fin+0xc0>)
 800e7c4:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800e7c8:	492b      	ldr	r1, [pc, #172]	; (800e878 <tcp_close_shutdown_fin+0xc4>)
 800e7ca:	482c      	ldr	r0, [pc, #176]	; (800e87c <tcp_close_shutdown_fin+0xc8>)
 800e7cc:	f008 ffa2 	bl	8017714 <iprintf>

  switch (pcb->state) {
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	7d1b      	ldrb	r3, [r3, #20]
 800e7d4:	2b04      	cmp	r3, #4
 800e7d6:	d010      	beq.n	800e7fa <tcp_close_shutdown_fin+0x46>
 800e7d8:	2b07      	cmp	r3, #7
 800e7da:	d01b      	beq.n	800e814 <tcp_close_shutdown_fin+0x60>
 800e7dc:	2b03      	cmp	r3, #3
 800e7de:	d126      	bne.n	800e82e <tcp_close_shutdown_fin+0x7a>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800e7e0:	6878      	ldr	r0, [r7, #4]
 800e7e2:	f004 fd49 	bl	8013278 <tcp_send_fin>
 800e7e6:	4603      	mov	r3, r0
 800e7e8:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e7ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d11f      	bne.n	800e832 <tcp_close_shutdown_fin+0x7e>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	2205      	movs	r2, #5
 800e7f6:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e7f8:	e01b      	b.n	800e832 <tcp_close_shutdown_fin+0x7e>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800e7fa:	6878      	ldr	r0, [r7, #4]
 800e7fc:	f004 fd3c 	bl	8013278 <tcp_send_fin>
 800e800:	4603      	mov	r3, r0
 800e802:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e804:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e808:	2b00      	cmp	r3, #0
 800e80a:	d114      	bne.n	800e836 <tcp_close_shutdown_fin+0x82>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	2205      	movs	r2, #5
 800e810:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e812:	e010      	b.n	800e836 <tcp_close_shutdown_fin+0x82>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800e814:	6878      	ldr	r0, [r7, #4]
 800e816:	f004 fd2f 	bl	8013278 <tcp_send_fin>
 800e81a:	4603      	mov	r3, r0
 800e81c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e81e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e822:	2b00      	cmp	r3, #0
 800e824:	d109      	bne.n	800e83a <tcp_close_shutdown_fin+0x86>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	2209      	movs	r2, #9
 800e82a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e82c:	e005      	b.n	800e83a <tcp_close_shutdown_fin+0x86>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800e82e:	2300      	movs	r3, #0
 800e830:	e01c      	b.n	800e86c <tcp_close_shutdown_fin+0xb8>
      break;
 800e832:	bf00      	nop
 800e834:	e002      	b.n	800e83c <tcp_close_shutdown_fin+0x88>
      break;
 800e836:	bf00      	nop
 800e838:	e000      	b.n	800e83c <tcp_close_shutdown_fin+0x88>
      break;
 800e83a:	bf00      	nop
  }

  if (err == ERR_OK) {
 800e83c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e840:	2b00      	cmp	r3, #0
 800e842:	d103      	bne.n	800e84c <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800e844:	6878      	ldr	r0, [r7, #4]
 800e846:	f004 fe57 	bl	80134f8 <tcp_output>
 800e84a:	e00d      	b.n	800e868 <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 800e84c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e850:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e854:	d108      	bne.n	800e868 <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	8b5b      	ldrh	r3, [r3, #26]
 800e85a:	f043 0308 	orr.w	r3, r3, #8
 800e85e:	b29a      	uxth	r2, r3
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800e864:	2300      	movs	r3, #0
 800e866:	e001      	b.n	800e86c <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 800e868:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e86c:	4618      	mov	r0, r3
 800e86e:	3710      	adds	r7, #16
 800e870:	46bd      	mov	sp, r7
 800e872:	bd80      	pop	{r7, pc}
 800e874:	08019ea8 	.word	0x08019ea8
 800e878:	08019f58 	.word	0x08019f58
 800e87c:	08019eec 	.word	0x08019eec

0800e880 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800e880:	b580      	push	{r7, lr}
 800e882:	b082      	sub	sp, #8
 800e884:	af00      	add	r7, sp, #0
 800e886:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d109      	bne.n	800e8a2 <tcp_close+0x22>
 800e88e:	4b0f      	ldr	r3, [pc, #60]	; (800e8cc <tcp_close+0x4c>)
 800e890:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800e894:	490e      	ldr	r1, [pc, #56]	; (800e8d0 <tcp_close+0x50>)
 800e896:	480f      	ldr	r0, [pc, #60]	; (800e8d4 <tcp_close+0x54>)
 800e898:	f008 ff3c 	bl	8017714 <iprintf>
 800e89c:	f06f 030f 	mvn.w	r3, #15
 800e8a0:	e00f      	b.n	800e8c2 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	7d1b      	ldrb	r3, [r3, #20]
 800e8a6:	2b01      	cmp	r3, #1
 800e8a8:	d006      	beq.n	800e8b8 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	8b5b      	ldrh	r3, [r3, #26]
 800e8ae:	f043 0310 	orr.w	r3, r3, #16
 800e8b2:	b29a      	uxth	r2, r3
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800e8b8:	2101      	movs	r1, #1
 800e8ba:	6878      	ldr	r0, [r7, #4]
 800e8bc:	f7ff fe9c 	bl	800e5f8 <tcp_close_shutdown>
 800e8c0:	4603      	mov	r3, r0
}
 800e8c2:	4618      	mov	r0, r3
 800e8c4:	3708      	adds	r7, #8
 800e8c6:	46bd      	mov	sp, r7
 800e8c8:	bd80      	pop	{r7, pc}
 800e8ca:	bf00      	nop
 800e8cc:	08019ea8 	.word	0x08019ea8
 800e8d0:	08019fb8 	.word	0x08019fb8
 800e8d4:	08019eec 	.word	0x08019eec

0800e8d8 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800e8d8:	b580      	push	{r7, lr}
 800e8da:	b08e      	sub	sp, #56	; 0x38
 800e8dc:	af04      	add	r7, sp, #16
 800e8de:	6078      	str	r0, [r7, #4]
 800e8e0:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d107      	bne.n	800e8f8 <tcp_abandon+0x20>
 800e8e8:	4b52      	ldr	r3, [pc, #328]	; (800ea34 <tcp_abandon+0x15c>)
 800e8ea:	f240 223d 	movw	r2, #573	; 0x23d
 800e8ee:	4952      	ldr	r1, [pc, #328]	; (800ea38 <tcp_abandon+0x160>)
 800e8f0:	4852      	ldr	r0, [pc, #328]	; (800ea3c <tcp_abandon+0x164>)
 800e8f2:	f008 ff0f 	bl	8017714 <iprintf>
 800e8f6:	e099      	b.n	800ea2c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	7d1b      	ldrb	r3, [r3, #20]
 800e8fc:	2b01      	cmp	r3, #1
 800e8fe:	d106      	bne.n	800e90e <tcp_abandon+0x36>
 800e900:	4b4c      	ldr	r3, [pc, #304]	; (800ea34 <tcp_abandon+0x15c>)
 800e902:	f240 2241 	movw	r2, #577	; 0x241
 800e906:	494e      	ldr	r1, [pc, #312]	; (800ea40 <tcp_abandon+0x168>)
 800e908:	484c      	ldr	r0, [pc, #304]	; (800ea3c <tcp_abandon+0x164>)
 800e90a:	f008 ff03 	bl	8017714 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	7d1b      	ldrb	r3, [r3, #20]
 800e912:	2b0a      	cmp	r3, #10
 800e914:	d107      	bne.n	800e926 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800e916:	6879      	ldr	r1, [r7, #4]
 800e918:	484a      	ldr	r0, [pc, #296]	; (800ea44 <tcp_abandon+0x16c>)
 800e91a:	f001 f9cf 	bl	800fcbc <tcp_pcb_remove>
    tcp_free(pcb);
 800e91e:	6878      	ldr	r0, [r7, #4]
 800e920:	f7ff fdb8 	bl	800e494 <tcp_free>
 800e924:	e082      	b.n	800ea2c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800e926:	2300      	movs	r3, #0
 800e928:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800e92a:	2300      	movs	r3, #0
 800e92c:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e932:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e938:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e940:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	691b      	ldr	r3, [r3, #16]
 800e946:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	7d1b      	ldrb	r3, [r3, #20]
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d126      	bne.n	800e99e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	8adb      	ldrh	r3, [r3, #22]
 800e954:	2b00      	cmp	r3, #0
 800e956:	d02e      	beq.n	800e9b6 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800e958:	4b3b      	ldr	r3, [pc, #236]	; (800ea48 <tcp_abandon+0x170>)
 800e95a:	681a      	ldr	r2, [r3, #0]
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	429a      	cmp	r2, r3
 800e960:	d105      	bne.n	800e96e <tcp_abandon+0x96>
 800e962:	4b39      	ldr	r3, [pc, #228]	; (800ea48 <tcp_abandon+0x170>)
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	68db      	ldr	r3, [r3, #12]
 800e968:	4a37      	ldr	r2, [pc, #220]	; (800ea48 <tcp_abandon+0x170>)
 800e96a:	6013      	str	r3, [r2, #0]
 800e96c:	e013      	b.n	800e996 <tcp_abandon+0xbe>
 800e96e:	4b36      	ldr	r3, [pc, #216]	; (800ea48 <tcp_abandon+0x170>)
 800e970:	681b      	ldr	r3, [r3, #0]
 800e972:	61fb      	str	r3, [r7, #28]
 800e974:	e00c      	b.n	800e990 <tcp_abandon+0xb8>
 800e976:	69fb      	ldr	r3, [r7, #28]
 800e978:	68da      	ldr	r2, [r3, #12]
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	429a      	cmp	r2, r3
 800e97e:	d104      	bne.n	800e98a <tcp_abandon+0xb2>
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	68da      	ldr	r2, [r3, #12]
 800e984:	69fb      	ldr	r3, [r7, #28]
 800e986:	60da      	str	r2, [r3, #12]
 800e988:	e005      	b.n	800e996 <tcp_abandon+0xbe>
 800e98a:	69fb      	ldr	r3, [r7, #28]
 800e98c:	68db      	ldr	r3, [r3, #12]
 800e98e:	61fb      	str	r3, [r7, #28]
 800e990:	69fb      	ldr	r3, [r7, #28]
 800e992:	2b00      	cmp	r3, #0
 800e994:	d1ef      	bne.n	800e976 <tcp_abandon+0x9e>
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	2200      	movs	r2, #0
 800e99a:	60da      	str	r2, [r3, #12]
 800e99c:	e00b      	b.n	800e9b6 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800e99e:	683b      	ldr	r3, [r7, #0]
 800e9a0:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	8adb      	ldrh	r3, [r3, #22]
 800e9a6:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800e9a8:	6879      	ldr	r1, [r7, #4]
 800e9aa:	4828      	ldr	r0, [pc, #160]	; (800ea4c <tcp_abandon+0x174>)
 800e9ac:	f001 f986 	bl	800fcbc <tcp_pcb_remove>
 800e9b0:	4b27      	ldr	r3, [pc, #156]	; (800ea50 <tcp_abandon+0x178>)
 800e9b2:	2201      	movs	r2, #1
 800e9b4:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	d004      	beq.n	800e9c8 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e9c2:	4618      	mov	r0, r3
 800e9c4:	f000 fe7a 	bl	800f6bc <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d004      	beq.n	800e9da <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e9d4:	4618      	mov	r0, r3
 800e9d6:	f000 fe71 	bl	800f6bc <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d004      	beq.n	800e9ec <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e9e6:	4618      	mov	r0, r3
 800e9e8:	f000 fe68 	bl	800f6bc <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800e9ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d00e      	beq.n	800ea10 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800e9f2:	6879      	ldr	r1, [r7, #4]
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	3304      	adds	r3, #4
 800e9f8:	687a      	ldr	r2, [r7, #4]
 800e9fa:	8b12      	ldrh	r2, [r2, #24]
 800e9fc:	9202      	str	r2, [sp, #8]
 800e9fe:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800ea00:	9201      	str	r2, [sp, #4]
 800ea02:	9300      	str	r3, [sp, #0]
 800ea04:	460b      	mov	r3, r1
 800ea06:	697a      	ldr	r2, [r7, #20]
 800ea08:	69b9      	ldr	r1, [r7, #24]
 800ea0a:	6878      	ldr	r0, [r7, #4]
 800ea0c:	f005 fb40 	bl	8014090 <tcp_rst>
    }
    last_state = pcb->state;
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	7d1b      	ldrb	r3, [r3, #20]
 800ea14:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800ea16:	6878      	ldr	r0, [r7, #4]
 800ea18:	f7ff fd3c 	bl	800e494 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800ea1c:	693b      	ldr	r3, [r7, #16]
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d004      	beq.n	800ea2c <tcp_abandon+0x154>
 800ea22:	693b      	ldr	r3, [r7, #16]
 800ea24:	f06f 010c 	mvn.w	r1, #12
 800ea28:	68f8      	ldr	r0, [r7, #12]
 800ea2a:	4798      	blx	r3
  }
}
 800ea2c:	3728      	adds	r7, #40	; 0x28
 800ea2e:	46bd      	mov	sp, r7
 800ea30:	bd80      	pop	{r7, pc}
 800ea32:	bf00      	nop
 800ea34:	08019ea8 	.word	0x08019ea8
 800ea38:	08019fec 	.word	0x08019fec
 800ea3c:	08019eec 	.word	0x08019eec
 800ea40:	0801a008 	.word	0x0801a008
 800ea44:	20009634 	.word	0x20009634
 800ea48:	20009630 	.word	0x20009630
 800ea4c:	20009624 	.word	0x20009624
 800ea50:	20009620 	.word	0x20009620

0800ea54 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800ea54:	b580      	push	{r7, lr}
 800ea56:	b082      	sub	sp, #8
 800ea58:	af00      	add	r7, sp, #0
 800ea5a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800ea5c:	2101      	movs	r1, #1
 800ea5e:	6878      	ldr	r0, [r7, #4]
 800ea60:	f7ff ff3a 	bl	800e8d8 <tcp_abandon>
}
 800ea64:	bf00      	nop
 800ea66:	3708      	adds	r7, #8
 800ea68:	46bd      	mov	sp, r7
 800ea6a:	bd80      	pop	{r7, pc}

0800ea6c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800ea6c:	b580      	push	{r7, lr}
 800ea6e:	b084      	sub	sp, #16
 800ea70:	af00      	add	r7, sp, #0
 800ea72:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d106      	bne.n	800ea88 <tcp_update_rcv_ann_wnd+0x1c>
 800ea7a:	4b26      	ldr	r3, [pc, #152]	; (800eb14 <tcp_update_rcv_ann_wnd+0xa8>)
 800ea7c:	f240 32a6 	movw	r2, #934	; 0x3a6
 800ea80:	4925      	ldr	r1, [pc, #148]	; (800eb18 <tcp_update_rcv_ann_wnd+0xac>)
 800ea82:	4826      	ldr	r0, [pc, #152]	; (800eb1c <tcp_update_rcv_ann_wnd+0xb0>)
 800ea84:	f008 fe46 	bl	8017714 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea8c:	687a      	ldr	r2, [r7, #4]
 800ea8e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800ea90:	4413      	add	r3, r2
 800ea92:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea98:	687a      	ldr	r2, [r7, #4]
 800ea9a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800ea9c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800eaa0:	d802      	bhi.n	800eaa8 <tcp_update_rcv_ann_wnd+0x3c>
 800eaa2:	687a      	ldr	r2, [r7, #4]
 800eaa4:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800eaa6:	e001      	b.n	800eaac <tcp_update_rcv_ann_wnd+0x40>
 800eaa8:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800eaac:	4413      	add	r3, r2
 800eaae:	68fa      	ldr	r2, [r7, #12]
 800eab0:	1ad3      	subs	r3, r2, r3
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	db08      	blt.n	800eac8 <tcp_update_rcv_ann_wnd+0x5c>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eac2:	68fa      	ldr	r2, [r7, #12]
 800eac4:	1ad3      	subs	r3, r2, r3
 800eac6:	e020      	b.n	800eb0a <tcp_update_rcv_ann_wnd+0x9e>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ead0:	1ad3      	subs	r3, r2, r3
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	dd03      	ble.n	800eade <tcp_update_rcv_ann_wnd+0x72>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	2200      	movs	r2, #0
 800eada:	855a      	strh	r2, [r3, #42]	; 0x2a
 800eadc:	e014      	b.n	800eb08 <tcp_update_rcv_ann_wnd+0x9c>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eae6:	1ad3      	subs	r3, r2, r3
 800eae8:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800eaea:	68bb      	ldr	r3, [r7, #8]
 800eaec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eaf0:	d306      	bcc.n	800eb00 <tcp_update_rcv_ann_wnd+0x94>
 800eaf2:	4b08      	ldr	r3, [pc, #32]	; (800eb14 <tcp_update_rcv_ann_wnd+0xa8>)
 800eaf4:	f240 32b6 	movw	r2, #950	; 0x3b6
 800eaf8:	4909      	ldr	r1, [pc, #36]	; (800eb20 <tcp_update_rcv_ann_wnd+0xb4>)
 800eafa:	4808      	ldr	r0, [pc, #32]	; (800eb1c <tcp_update_rcv_ann_wnd+0xb0>)
 800eafc:	f008 fe0a 	bl	8017714 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800eb00:	68bb      	ldr	r3, [r7, #8]
 800eb02:	b29a      	uxth	r2, r3
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800eb08:	2300      	movs	r3, #0
  }
}
 800eb0a:	4618      	mov	r0, r3
 800eb0c:	3710      	adds	r7, #16
 800eb0e:	46bd      	mov	sp, r7
 800eb10:	bd80      	pop	{r7, pc}
 800eb12:	bf00      	nop
 800eb14:	08019ea8 	.word	0x08019ea8
 800eb18:	0801a104 	.word	0x0801a104
 800eb1c:	08019eec 	.word	0x08019eec
 800eb20:	0801a128 	.word	0x0801a128

0800eb24 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800eb24:	b580      	push	{r7, lr}
 800eb26:	b084      	sub	sp, #16
 800eb28:	af00      	add	r7, sp, #0
 800eb2a:	6078      	str	r0, [r7, #4]
 800eb2c:	460b      	mov	r3, r1
 800eb2e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d107      	bne.n	800eb46 <tcp_recved+0x22>
 800eb36:	4b1f      	ldr	r3, [pc, #124]	; (800ebb4 <tcp_recved+0x90>)
 800eb38:	f240 32cf 	movw	r2, #975	; 0x3cf
 800eb3c:	491e      	ldr	r1, [pc, #120]	; (800ebb8 <tcp_recved+0x94>)
 800eb3e:	481f      	ldr	r0, [pc, #124]	; (800ebbc <tcp_recved+0x98>)
 800eb40:	f008 fde8 	bl	8017714 <iprintf>
 800eb44:	e032      	b.n	800ebac <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	7d1b      	ldrb	r3, [r3, #20]
 800eb4a:	2b01      	cmp	r3, #1
 800eb4c:	d106      	bne.n	800eb5c <tcp_recved+0x38>
 800eb4e:	4b19      	ldr	r3, [pc, #100]	; (800ebb4 <tcp_recved+0x90>)
 800eb50:	f240 32d3 	movw	r2, #979	; 0x3d3
 800eb54:	491a      	ldr	r1, [pc, #104]	; (800ebc0 <tcp_recved+0x9c>)
 800eb56:	4819      	ldr	r0, [pc, #100]	; (800ebbc <tcp_recved+0x98>)
 800eb58:	f008 fddc 	bl	8017714 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800eb60:	887b      	ldrh	r3, [r7, #2]
 800eb62:	4413      	add	r3, r2
 800eb64:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800eb66:	89fb      	ldrh	r3, [r7, #14]
 800eb68:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800eb6c:	d804      	bhi.n	800eb78 <tcp_recved+0x54>
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800eb72:	89fa      	ldrh	r2, [r7, #14]
 800eb74:	429a      	cmp	r2, r3
 800eb76:	d204      	bcs.n	800eb82 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800eb7e:	851a      	strh	r2, [r3, #40]	; 0x28
 800eb80:	e002      	b.n	800eb88 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	89fa      	ldrh	r2, [r7, #14]
 800eb86:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800eb88:	6878      	ldr	r0, [r7, #4]
 800eb8a:	f7ff ff6f 	bl	800ea6c <tcp_update_rcv_ann_wnd>
 800eb8e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800eb90:	68bb      	ldr	r3, [r7, #8]
 800eb92:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800eb96:	d309      	bcc.n	800ebac <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	8b5b      	ldrh	r3, [r3, #26]
 800eb9c:	f043 0302 	orr.w	r3, r3, #2
 800eba0:	b29a      	uxth	r2, r3
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800eba6:	6878      	ldr	r0, [r7, #4]
 800eba8:	f004 fca6 	bl	80134f8 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800ebac:	3710      	adds	r7, #16
 800ebae:	46bd      	mov	sp, r7
 800ebb0:	bd80      	pop	{r7, pc}
 800ebb2:	bf00      	nop
 800ebb4:	08019ea8 	.word	0x08019ea8
 800ebb8:	0801a144 	.word	0x0801a144
 800ebbc:	08019eec 	.word	0x08019eec
 800ebc0:	0801a15c 	.word	0x0801a15c

0800ebc4 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800ebc4:	b480      	push	{r7}
 800ebc6:	b083      	sub	sp, #12
 800ebc8:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800ebca:	2300      	movs	r3, #0
 800ebcc:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800ebce:	4b1e      	ldr	r3, [pc, #120]	; (800ec48 <tcp_new_port+0x84>)
 800ebd0:	881b      	ldrh	r3, [r3, #0]
 800ebd2:	3301      	adds	r3, #1
 800ebd4:	b29a      	uxth	r2, r3
 800ebd6:	4b1c      	ldr	r3, [pc, #112]	; (800ec48 <tcp_new_port+0x84>)
 800ebd8:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800ebda:	4b1b      	ldr	r3, [pc, #108]	; (800ec48 <tcp_new_port+0x84>)
 800ebdc:	881b      	ldrh	r3, [r3, #0]
 800ebde:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ebe2:	4293      	cmp	r3, r2
 800ebe4:	d103      	bne.n	800ebee <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800ebe6:	4b18      	ldr	r3, [pc, #96]	; (800ec48 <tcp_new_port+0x84>)
 800ebe8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800ebec:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800ebee:	2300      	movs	r3, #0
 800ebf0:	71fb      	strb	r3, [r7, #7]
 800ebf2:	e01e      	b.n	800ec32 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800ebf4:	79fb      	ldrb	r3, [r7, #7]
 800ebf6:	4a15      	ldr	r2, [pc, #84]	; (800ec4c <tcp_new_port+0x88>)
 800ebf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	603b      	str	r3, [r7, #0]
 800ec00:	e011      	b.n	800ec26 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800ec02:	683b      	ldr	r3, [r7, #0]
 800ec04:	8ada      	ldrh	r2, [r3, #22]
 800ec06:	4b10      	ldr	r3, [pc, #64]	; (800ec48 <tcp_new_port+0x84>)
 800ec08:	881b      	ldrh	r3, [r3, #0]
 800ec0a:	429a      	cmp	r2, r3
 800ec0c:	d108      	bne.n	800ec20 <tcp_new_port+0x5c>
        n++;
 800ec0e:	88bb      	ldrh	r3, [r7, #4]
 800ec10:	3301      	adds	r3, #1
 800ec12:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800ec14:	88bb      	ldrh	r3, [r7, #4]
 800ec16:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ec1a:	d3d8      	bcc.n	800ebce <tcp_new_port+0xa>
          return 0;
 800ec1c:	2300      	movs	r3, #0
 800ec1e:	e00d      	b.n	800ec3c <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800ec20:	683b      	ldr	r3, [r7, #0]
 800ec22:	68db      	ldr	r3, [r3, #12]
 800ec24:	603b      	str	r3, [r7, #0]
 800ec26:	683b      	ldr	r3, [r7, #0]
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d1ea      	bne.n	800ec02 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800ec2c:	79fb      	ldrb	r3, [r7, #7]
 800ec2e:	3301      	adds	r3, #1
 800ec30:	71fb      	strb	r3, [r7, #7]
 800ec32:	79fb      	ldrb	r3, [r7, #7]
 800ec34:	2b03      	cmp	r3, #3
 800ec36:	d9dd      	bls.n	800ebf4 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800ec38:	4b03      	ldr	r3, [pc, #12]	; (800ec48 <tcp_new_port+0x84>)
 800ec3a:	881b      	ldrh	r3, [r3, #0]
}
 800ec3c:	4618      	mov	r0, r3
 800ec3e:	370c      	adds	r7, #12
 800ec40:	46bd      	mov	sp, r7
 800ec42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec46:	4770      	bx	lr
 800ec48:	2000000c 	.word	0x2000000c
 800ec4c:	0801bb98 	.word	0x0801bb98

0800ec50 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 800ec50:	b580      	push	{r7, lr}
 800ec52:	b08a      	sub	sp, #40	; 0x28
 800ec54:	af00      	add	r7, sp, #0
 800ec56:	60f8      	str	r0, [r7, #12]
 800ec58:	60b9      	str	r1, [r7, #8]
 800ec5a:	603b      	str	r3, [r7, #0]
 800ec5c:	4613      	mov	r3, r2
 800ec5e:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 800ec60:	2300      	movs	r3, #0
 800ec62:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d109      	bne.n	800ec7e <tcp_connect+0x2e>
 800ec6a:	4b7d      	ldr	r3, [pc, #500]	; (800ee60 <tcp_connect+0x210>)
 800ec6c:	f240 4235 	movw	r2, #1077	; 0x435
 800ec70:	497c      	ldr	r1, [pc, #496]	; (800ee64 <tcp_connect+0x214>)
 800ec72:	487d      	ldr	r0, [pc, #500]	; (800ee68 <tcp_connect+0x218>)
 800ec74:	f008 fd4e 	bl	8017714 <iprintf>
 800ec78:	f06f 030f 	mvn.w	r3, #15
 800ec7c:	e0ec      	b.n	800ee58 <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800ec7e:	68bb      	ldr	r3, [r7, #8]
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d109      	bne.n	800ec98 <tcp_connect+0x48>
 800ec84:	4b76      	ldr	r3, [pc, #472]	; (800ee60 <tcp_connect+0x210>)
 800ec86:	f240 4236 	movw	r2, #1078	; 0x436
 800ec8a:	4978      	ldr	r1, [pc, #480]	; (800ee6c <tcp_connect+0x21c>)
 800ec8c:	4876      	ldr	r0, [pc, #472]	; (800ee68 <tcp_connect+0x218>)
 800ec8e:	f008 fd41 	bl	8017714 <iprintf>
 800ec92:	f06f 030f 	mvn.w	r3, #15
 800ec96:	e0df      	b.n	800ee58 <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	7d1b      	ldrb	r3, [r3, #20]
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d009      	beq.n	800ecb4 <tcp_connect+0x64>
 800eca0:	4b6f      	ldr	r3, [pc, #444]	; (800ee60 <tcp_connect+0x210>)
 800eca2:	f44f 6287 	mov.w	r2, #1080	; 0x438
 800eca6:	4972      	ldr	r1, [pc, #456]	; (800ee70 <tcp_connect+0x220>)
 800eca8:	486f      	ldr	r0, [pc, #444]	; (800ee68 <tcp_connect+0x218>)
 800ecaa:	f008 fd33 	bl	8017714 <iprintf>
 800ecae:	f06f 0309 	mvn.w	r3, #9
 800ecb2:	e0d1      	b.n	800ee58 <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 800ecb4:	68bb      	ldr	r3, [r7, #8]
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d002      	beq.n	800ecc0 <tcp_connect+0x70>
 800ecba:	68bb      	ldr	r3, [r7, #8]
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	e000      	b.n	800ecc2 <tcp_connect+0x72>
 800ecc0:	2300      	movs	r3, #0
 800ecc2:	68fa      	ldr	r2, [r7, #12]
 800ecc4:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	88fa      	ldrh	r2, [r7, #6]
 800ecca:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	7a1b      	ldrb	r3, [r3, #8]
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d006      	beq.n	800ece2 <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	7a1b      	ldrb	r3, [r3, #8]
 800ecd8:	4618      	mov	r0, r3
 800ecda:	f7fe fb41 	bl	800d360 <netif_get_by_index>
 800ecde:	6278      	str	r0, [r7, #36]	; 0x24
 800ece0:	e005      	b.n	800ecee <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	3304      	adds	r3, #4
 800ece6:	4618      	mov	r0, r3
 800ece8:	f7fc f89e 	bl	800ae28 <ip4_route>
 800ecec:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 800ecee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d102      	bne.n	800ecfa <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 800ecf4:	f06f 0303 	mvn.w	r3, #3
 800ecf8:	e0ae      	b.n	800ee58 <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d003      	beq.n	800ed08 <tcp_connect+0xb8>
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d111      	bne.n	800ed2c <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 800ed08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d002      	beq.n	800ed14 <tcp_connect+0xc4>
 800ed0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed10:	3304      	adds	r3, #4
 800ed12:	e000      	b.n	800ed16 <tcp_connect+0xc6>
 800ed14:	2300      	movs	r3, #0
 800ed16:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 800ed18:	69fb      	ldr	r3, [r7, #28]
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d102      	bne.n	800ed24 <tcp_connect+0xd4>
      return ERR_RTE;
 800ed1e:	f06f 0303 	mvn.w	r3, #3
 800ed22:	e099      	b.n	800ee58 <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800ed24:	69fb      	ldr	r3, [r7, #28]
 800ed26:	681a      	ldr	r2, [r3, #0]
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	8adb      	ldrh	r3, [r3, #22]
 800ed30:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	8adb      	ldrh	r3, [r3, #22]
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d10c      	bne.n	800ed54 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 800ed3a:	f7ff ff43 	bl	800ebc4 <tcp_new_port>
 800ed3e:	4603      	mov	r3, r0
 800ed40:	461a      	mov	r2, r3
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	8adb      	ldrh	r3, [r3, #22]
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d102      	bne.n	800ed54 <tcp_connect+0x104>
      return ERR_BUF;
 800ed4e:	f06f 0301 	mvn.w	r3, #1
 800ed52:	e081      	b.n	800ee58 <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 800ed54:	68f8      	ldr	r0, [r7, #12]
 800ed56:	f001 f845 	bl	800fde4 <tcp_next_iss>
 800ed5a:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	2200      	movs	r2, #0
 800ed60:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	697a      	ldr	r2, [r7, #20]
 800ed66:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 800ed68:	697b      	ldr	r3, [r7, #20]
 800ed6a:	1e5a      	subs	r2, r3, #1
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 800ed70:	697b      	ldr	r3, [r7, #20]
 800ed72:	1e5a      	subs	r2, r3, #1
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 800ed78:	697b      	ldr	r3, [r7, #20]
 800ed7a:	1e5a      	subs	r2, r3, #1
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800ed80:	68fb      	ldr	r3, [r7, #12]
 800ed82:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800ed86:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ed88:	68fb      	ldr	r3, [r7, #12]
 800ed8a:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800ed8c:	68fb      	ldr	r3, [r7, #12]
 800ed8e:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800ed9e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	f44f 7206 	mov.w	r2, #536	; 0x218
 800eda8:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 800edaa:	68fb      	ldr	r3, [r7, #12]
 800edac:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	3304      	adds	r3, #4
 800edb2:	461a      	mov	r2, r3
 800edb4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800edb6:	f001 f83b 	bl	800fe30 <tcp_eff_send_mss_netif>
 800edba:	4603      	mov	r3, r0
 800edbc:	461a      	mov	r2, r3
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 800edc2:	68fb      	ldr	r3, [r7, #12]
 800edc4:	2201      	movs	r2, #1
 800edc6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	683a      	ldr	r2, [r7, #0]
 800edce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 800edd2:	2102      	movs	r1, #2
 800edd4:	68f8      	ldr	r0, [r7, #12]
 800edd6:	f004 fa9f 	bl	8013318 <tcp_enqueue_flags>
 800edda:	4603      	mov	r3, r0
 800eddc:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 800edde:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d136      	bne.n	800ee54 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 800ede6:	68fb      	ldr	r3, [r7, #12]
 800ede8:	2202      	movs	r2, #2
 800edea:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 800edec:	8b7b      	ldrh	r3, [r7, #26]
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d021      	beq.n	800ee36 <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800edf2:	4b20      	ldr	r3, [pc, #128]	; (800ee74 <tcp_connect+0x224>)
 800edf4:	681a      	ldr	r2, [r3, #0]
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	429a      	cmp	r2, r3
 800edfa:	d105      	bne.n	800ee08 <tcp_connect+0x1b8>
 800edfc:	4b1d      	ldr	r3, [pc, #116]	; (800ee74 <tcp_connect+0x224>)
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	68db      	ldr	r3, [r3, #12]
 800ee02:	4a1c      	ldr	r2, [pc, #112]	; (800ee74 <tcp_connect+0x224>)
 800ee04:	6013      	str	r3, [r2, #0]
 800ee06:	e013      	b.n	800ee30 <tcp_connect+0x1e0>
 800ee08:	4b1a      	ldr	r3, [pc, #104]	; (800ee74 <tcp_connect+0x224>)
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	623b      	str	r3, [r7, #32]
 800ee0e:	e00c      	b.n	800ee2a <tcp_connect+0x1da>
 800ee10:	6a3b      	ldr	r3, [r7, #32]
 800ee12:	68da      	ldr	r2, [r3, #12]
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	429a      	cmp	r2, r3
 800ee18:	d104      	bne.n	800ee24 <tcp_connect+0x1d4>
 800ee1a:	68fb      	ldr	r3, [r7, #12]
 800ee1c:	68da      	ldr	r2, [r3, #12]
 800ee1e:	6a3b      	ldr	r3, [r7, #32]
 800ee20:	60da      	str	r2, [r3, #12]
 800ee22:	e005      	b.n	800ee30 <tcp_connect+0x1e0>
 800ee24:	6a3b      	ldr	r3, [r7, #32]
 800ee26:	68db      	ldr	r3, [r3, #12]
 800ee28:	623b      	str	r3, [r7, #32]
 800ee2a:	6a3b      	ldr	r3, [r7, #32]
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	d1ef      	bne.n	800ee10 <tcp_connect+0x1c0>
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	2200      	movs	r2, #0
 800ee34:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 800ee36:	4b10      	ldr	r3, [pc, #64]	; (800ee78 <tcp_connect+0x228>)
 800ee38:	681a      	ldr	r2, [r3, #0]
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	60da      	str	r2, [r3, #12]
 800ee3e:	4a0e      	ldr	r2, [pc, #56]	; (800ee78 <tcp_connect+0x228>)
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	6013      	str	r3, [r2, #0]
 800ee44:	f005 fae8 	bl	8014418 <tcp_timer_needed>
 800ee48:	4b0c      	ldr	r3, [pc, #48]	; (800ee7c <tcp_connect+0x22c>)
 800ee4a:	2201      	movs	r2, #1
 800ee4c:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 800ee4e:	68f8      	ldr	r0, [r7, #12]
 800ee50:	f004 fb52 	bl	80134f8 <tcp_output>
  }
  return ret;
 800ee54:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800ee58:	4618      	mov	r0, r3
 800ee5a:	3728      	adds	r7, #40	; 0x28
 800ee5c:	46bd      	mov	sp, r7
 800ee5e:	bd80      	pop	{r7, pc}
 800ee60:	08019ea8 	.word	0x08019ea8
 800ee64:	0801a184 	.word	0x0801a184
 800ee68:	08019eec 	.word	0x08019eec
 800ee6c:	0801a1a0 	.word	0x0801a1a0
 800ee70:	0801a1bc 	.word	0x0801a1bc
 800ee74:	20009630 	.word	0x20009630
 800ee78:	20009624 	.word	0x20009624
 800ee7c:	20009620 	.word	0x20009620

0800ee80 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800ee80:	b5b0      	push	{r4, r5, r7, lr}
 800ee82:	b090      	sub	sp, #64	; 0x40
 800ee84:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800ee86:	2300      	movs	r3, #0
 800ee88:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800ee8c:	4b94      	ldr	r3, [pc, #592]	; (800f0e0 <tcp_slowtmr+0x260>)
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	3301      	adds	r3, #1
 800ee92:	4a93      	ldr	r2, [pc, #588]	; (800f0e0 <tcp_slowtmr+0x260>)
 800ee94:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800ee96:	4b93      	ldr	r3, [pc, #588]	; (800f0e4 <tcp_slowtmr+0x264>)
 800ee98:	781b      	ldrb	r3, [r3, #0]
 800ee9a:	3301      	adds	r3, #1
 800ee9c:	b2da      	uxtb	r2, r3
 800ee9e:	4b91      	ldr	r3, [pc, #580]	; (800f0e4 <tcp_slowtmr+0x264>)
 800eea0:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800eea2:	2300      	movs	r3, #0
 800eea4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800eea6:	4b90      	ldr	r3, [pc, #576]	; (800f0e8 <tcp_slowtmr+0x268>)
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800eeac:	e29d      	b.n	800f3ea <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800eeae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eeb0:	7d1b      	ldrb	r3, [r3, #20]
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d106      	bne.n	800eec4 <tcp_slowtmr+0x44>
 800eeb6:	4b8d      	ldr	r3, [pc, #564]	; (800f0ec <tcp_slowtmr+0x26c>)
 800eeb8:	f240 42be 	movw	r2, #1214	; 0x4be
 800eebc:	498c      	ldr	r1, [pc, #560]	; (800f0f0 <tcp_slowtmr+0x270>)
 800eebe:	488d      	ldr	r0, [pc, #564]	; (800f0f4 <tcp_slowtmr+0x274>)
 800eec0:	f008 fc28 	bl	8017714 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800eec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eec6:	7d1b      	ldrb	r3, [r3, #20]
 800eec8:	2b01      	cmp	r3, #1
 800eeca:	d106      	bne.n	800eeda <tcp_slowtmr+0x5a>
 800eecc:	4b87      	ldr	r3, [pc, #540]	; (800f0ec <tcp_slowtmr+0x26c>)
 800eece:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800eed2:	4989      	ldr	r1, [pc, #548]	; (800f0f8 <tcp_slowtmr+0x278>)
 800eed4:	4887      	ldr	r0, [pc, #540]	; (800f0f4 <tcp_slowtmr+0x274>)
 800eed6:	f008 fc1d 	bl	8017714 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800eeda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eedc:	7d1b      	ldrb	r3, [r3, #20]
 800eede:	2b0a      	cmp	r3, #10
 800eee0:	d106      	bne.n	800eef0 <tcp_slowtmr+0x70>
 800eee2:	4b82      	ldr	r3, [pc, #520]	; (800f0ec <tcp_slowtmr+0x26c>)
 800eee4:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800eee8:	4984      	ldr	r1, [pc, #528]	; (800f0fc <tcp_slowtmr+0x27c>)
 800eeea:	4882      	ldr	r0, [pc, #520]	; (800f0f4 <tcp_slowtmr+0x274>)
 800eeec:	f008 fc12 	bl	8017714 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800eef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eef2:	7f9a      	ldrb	r2, [r3, #30]
 800eef4:	4b7b      	ldr	r3, [pc, #492]	; (800f0e4 <tcp_slowtmr+0x264>)
 800eef6:	781b      	ldrb	r3, [r3, #0]
 800eef8:	429a      	cmp	r2, r3
 800eefa:	d105      	bne.n	800ef08 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800eefc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eefe:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800ef00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef02:	68db      	ldr	r3, [r3, #12]
 800ef04:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800ef06:	e270      	b.n	800f3ea <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800ef08:	4b76      	ldr	r3, [pc, #472]	; (800f0e4 <tcp_slowtmr+0x264>)
 800ef0a:	781a      	ldrb	r2, [r3, #0]
 800ef0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef0e:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800ef10:	2300      	movs	r3, #0
 800ef12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800ef16:	2300      	movs	r3, #0
 800ef18:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800ef1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef1e:	7d1b      	ldrb	r3, [r3, #20]
 800ef20:	2b02      	cmp	r3, #2
 800ef22:	d10a      	bne.n	800ef3a <tcp_slowtmr+0xba>
 800ef24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef26:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ef2a:	2b05      	cmp	r3, #5
 800ef2c:	d905      	bls.n	800ef3a <tcp_slowtmr+0xba>
      ++pcb_remove;
 800ef2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ef32:	3301      	adds	r3, #1
 800ef34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ef38:	e11e      	b.n	800f178 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800ef3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef3c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ef40:	2b0b      	cmp	r3, #11
 800ef42:	d905      	bls.n	800ef50 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800ef44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ef48:	3301      	adds	r3, #1
 800ef4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ef4e:	e113      	b.n	800f178 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800ef50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef52:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	d075      	beq.n	800f046 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800ef5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d006      	beq.n	800ef70 <tcp_slowtmr+0xf0>
 800ef62:	4b62      	ldr	r3, [pc, #392]	; (800f0ec <tcp_slowtmr+0x26c>)
 800ef64:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800ef68:	4965      	ldr	r1, [pc, #404]	; (800f100 <tcp_slowtmr+0x280>)
 800ef6a:	4862      	ldr	r0, [pc, #392]	; (800f0f4 <tcp_slowtmr+0x274>)
 800ef6c:	f008 fbd2 	bl	8017714 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800ef70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d106      	bne.n	800ef86 <tcp_slowtmr+0x106>
 800ef78:	4b5c      	ldr	r3, [pc, #368]	; (800f0ec <tcp_slowtmr+0x26c>)
 800ef7a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800ef7e:	4961      	ldr	r1, [pc, #388]	; (800f104 <tcp_slowtmr+0x284>)
 800ef80:	485c      	ldr	r0, [pc, #368]	; (800f0f4 <tcp_slowtmr+0x274>)
 800ef82:	f008 fbc7 	bl	8017714 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800ef86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef88:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800ef8c:	2b0b      	cmp	r3, #11
 800ef8e:	d905      	bls.n	800ef9c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800ef90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ef94:	3301      	adds	r3, #1
 800ef96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ef9a:	e0ed      	b.n	800f178 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800ef9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef9e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800efa2:	3b01      	subs	r3, #1
 800efa4:	4a58      	ldr	r2, [pc, #352]	; (800f108 <tcp_slowtmr+0x288>)
 800efa6:	5cd3      	ldrb	r3, [r2, r3]
 800efa8:	77fb      	strb	r3, [r7, #31]
          if (pcb->persist_cnt < backoff_cnt) {
 800efaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efac:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800efb0:	7ffa      	ldrb	r2, [r7, #31]
 800efb2:	429a      	cmp	r2, r3
 800efb4:	d907      	bls.n	800efc6 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800efb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efb8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800efbc:	3301      	adds	r3, #1
 800efbe:	b2da      	uxtb	r2, r3
 800efc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efc2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800efc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efc8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800efcc:	7ffa      	ldrb	r2, [r7, #31]
 800efce:	429a      	cmp	r2, r3
 800efd0:	f200 80d2 	bhi.w	800f178 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800efd4:	2301      	movs	r3, #1
 800efd6:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800efd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efda:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d108      	bne.n	800eff4 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800efe2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800efe4:	f005 f94a 	bl	801427c <tcp_zero_window_probe>
 800efe8:	4603      	mov	r3, r0
 800efea:	2b00      	cmp	r3, #0
 800efec:	d014      	beq.n	800f018 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800efee:	2300      	movs	r3, #0
 800eff0:	623b      	str	r3, [r7, #32]
 800eff2:	e011      	b.n	800f018 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800eff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eff6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800effa:	4619      	mov	r1, r3
 800effc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800effe:	f003 fff1 	bl	8012fe4 <tcp_split_unsent_seg>
 800f002:	4603      	mov	r3, r0
 800f004:	2b00      	cmp	r3, #0
 800f006:	d107      	bne.n	800f018 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800f008:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f00a:	f004 fa75 	bl	80134f8 <tcp_output>
 800f00e:	4603      	mov	r3, r0
 800f010:	2b00      	cmp	r3, #0
 800f012:	d101      	bne.n	800f018 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800f014:	2300      	movs	r3, #0
 800f016:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800f018:	6a3b      	ldr	r3, [r7, #32]
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	f000 80ac 	beq.w	800f178 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800f020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f022:	2200      	movs	r2, #0
 800f024:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800f028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f02a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f02e:	2b06      	cmp	r3, #6
 800f030:	f200 80a2 	bhi.w	800f178 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800f034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f036:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f03a:	3301      	adds	r3, #1
 800f03c:	b2da      	uxtb	r2, r3
 800f03e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f040:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800f044:	e098      	b.n	800f178 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800f046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f048:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	db0f      	blt.n	800f070 <tcp_slowtmr+0x1f0>
 800f050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f052:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f056:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800f05a:	4293      	cmp	r3, r2
 800f05c:	d008      	beq.n	800f070 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800f05e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f060:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f064:	b29b      	uxth	r3, r3
 800f066:	3301      	adds	r3, #1
 800f068:	b29b      	uxth	r3, r3
 800f06a:	b21a      	sxth	r2, r3
 800f06c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f06e:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800f070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f072:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800f076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f078:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800f07c:	429a      	cmp	r2, r3
 800f07e:	db7b      	blt.n	800f178 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800f080:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f082:	f004 fd33 	bl	8013aec <tcp_rexmit_rto_prepare>
 800f086:	4603      	mov	r3, r0
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d007      	beq.n	800f09c <tcp_slowtmr+0x21c>
 800f08c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f08e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f090:	2b00      	cmp	r3, #0
 800f092:	d171      	bne.n	800f178 <tcp_slowtmr+0x2f8>
 800f094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f096:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d06d      	beq.n	800f178 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800f09c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f09e:	7d1b      	ldrb	r3, [r3, #20]
 800f0a0:	2b02      	cmp	r3, #2
 800f0a2:	d03a      	beq.n	800f11a <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800f0a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f0aa:	2b0c      	cmp	r3, #12
 800f0ac:	bf28      	it	cs
 800f0ae:	230c      	movcs	r3, #12
 800f0b0:	77bb      	strb	r3, [r7, #30]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800f0b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0b4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f0b8:	10db      	asrs	r3, r3, #3
 800f0ba:	b21b      	sxth	r3, r3
 800f0bc:	461a      	mov	r2, r3
 800f0be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0c0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f0c4:	4413      	add	r3, r2
 800f0c6:	7fba      	ldrb	r2, [r7, #30]
 800f0c8:	4910      	ldr	r1, [pc, #64]	; (800f10c <tcp_slowtmr+0x28c>)
 800f0ca:	5c8a      	ldrb	r2, [r1, r2]
 800f0cc:	4093      	lsls	r3, r2
 800f0ce:	61bb      	str	r3, [r7, #24]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800f0d0:	69bb      	ldr	r3, [r7, #24]
 800f0d2:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800f0d6:	4293      	cmp	r3, r2
 800f0d8:	dc1a      	bgt.n	800f110 <tcp_slowtmr+0x290>
 800f0da:	69bb      	ldr	r3, [r7, #24]
 800f0dc:	b21a      	sxth	r2, r3
 800f0de:	e019      	b.n	800f114 <tcp_slowtmr+0x294>
 800f0e0:	20009628 	.word	0x20009628
 800f0e4:	20004542 	.word	0x20004542
 800f0e8:	20009624 	.word	0x20009624
 800f0ec:	08019ea8 	.word	0x08019ea8
 800f0f0:	0801a1ec 	.word	0x0801a1ec
 800f0f4:	08019eec 	.word	0x08019eec
 800f0f8:	0801a218 	.word	0x0801a218
 800f0fc:	0801a244 	.word	0x0801a244
 800f100:	0801a274 	.word	0x0801a274
 800f104:	0801a2a8 	.word	0x0801a2a8
 800f108:	0801bb90 	.word	0x0801bb90
 800f10c:	0801bb80 	.word	0x0801bb80
 800f110:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800f114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f116:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800f11a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f11c:	2200      	movs	r2, #0
 800f11e:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800f120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f122:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f128:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f12c:	4293      	cmp	r3, r2
 800f12e:	bf28      	it	cs
 800f130:	4613      	movcs	r3, r2
 800f132:	82fb      	strh	r3, [r7, #22]
            pcb->ssthresh = eff_wnd >> 1;
 800f134:	8afb      	ldrh	r3, [r7, #22]
 800f136:	085b      	lsrs	r3, r3, #1
 800f138:	b29a      	uxth	r2, r3
 800f13a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f13c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800f140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f142:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800f146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f148:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f14a:	005b      	lsls	r3, r3, #1
 800f14c:	b29b      	uxth	r3, r3
 800f14e:	429a      	cmp	r2, r3
 800f150:	d206      	bcs.n	800f160 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800f152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f154:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f156:	005b      	lsls	r3, r3, #1
 800f158:	b29a      	uxth	r2, r3
 800f15a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f15c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800f160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f162:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800f164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f166:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800f16a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f16c:	2200      	movs	r2, #0
 800f16e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800f172:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f174:	f004 fd2a 	bl	8013bcc <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800f178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f17a:	7d1b      	ldrb	r3, [r3, #20]
 800f17c:	2b06      	cmp	r3, #6
 800f17e:	d111      	bne.n	800f1a4 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800f180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f182:	8b5b      	ldrh	r3, [r3, #26]
 800f184:	f003 0310 	and.w	r3, r3, #16
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d00b      	beq.n	800f1a4 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f18c:	4b9c      	ldr	r3, [pc, #624]	; (800f400 <tcp_slowtmr+0x580>)
 800f18e:	681a      	ldr	r2, [r3, #0]
 800f190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f192:	6a1b      	ldr	r3, [r3, #32]
 800f194:	1ad3      	subs	r3, r2, r3
 800f196:	2b28      	cmp	r3, #40	; 0x28
 800f198:	d904      	bls.n	800f1a4 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800f19a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f19e:	3301      	adds	r3, #1
 800f1a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800f1a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1a6:	7a5b      	ldrb	r3, [r3, #9]
 800f1a8:	f003 0308 	and.w	r3, r3, #8
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	d04a      	beq.n	800f246 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800f1b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1b2:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800f1b4:	2b04      	cmp	r3, #4
 800f1b6:	d003      	beq.n	800f1c0 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800f1b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1ba:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800f1bc:	2b07      	cmp	r3, #7
 800f1be:	d142      	bne.n	800f246 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f1c0:	4b8f      	ldr	r3, [pc, #572]	; (800f400 <tcp_slowtmr+0x580>)
 800f1c2:	681a      	ldr	r2, [r3, #0]
 800f1c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1c6:	6a1b      	ldr	r3, [r3, #32]
 800f1c8:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800f1ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1cc:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800f1d0:	4b8c      	ldr	r3, [pc, #560]	; (800f404 <tcp_slowtmr+0x584>)
 800f1d2:	440b      	add	r3, r1
 800f1d4:	498c      	ldr	r1, [pc, #560]	; (800f408 <tcp_slowtmr+0x588>)
 800f1d6:	fba1 1303 	umull	r1, r3, r1, r3
 800f1da:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f1dc:	429a      	cmp	r2, r3
 800f1de:	d90a      	bls.n	800f1f6 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800f1e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f1e4:	3301      	adds	r3, #1
 800f1e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800f1ea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f1ee:	3301      	adds	r3, #1
 800f1f0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f1f4:	e027      	b.n	800f246 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f1f6:	4b82      	ldr	r3, [pc, #520]	; (800f400 <tcp_slowtmr+0x580>)
 800f1f8:	681a      	ldr	r2, [r3, #0]
 800f1fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1fc:	6a1b      	ldr	r3, [r3, #32]
 800f1fe:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800f200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f202:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800f206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f208:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800f20c:	4618      	mov	r0, r3
 800f20e:	4b7f      	ldr	r3, [pc, #508]	; (800f40c <tcp_slowtmr+0x58c>)
 800f210:	fb03 f300 	mul.w	r3, r3, r0
 800f214:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800f216:	497c      	ldr	r1, [pc, #496]	; (800f408 <tcp_slowtmr+0x588>)
 800f218:	fba1 1303 	umull	r1, r3, r1, r3
 800f21c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f21e:	429a      	cmp	r2, r3
 800f220:	d911      	bls.n	800f246 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800f222:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f224:	f004 ffea 	bl	80141fc <tcp_keepalive>
 800f228:	4603      	mov	r3, r0
 800f22a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800f22e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800f232:	2b00      	cmp	r3, #0
 800f234:	d107      	bne.n	800f246 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800f236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f238:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800f23c:	3301      	adds	r3, #1
 800f23e:	b2da      	uxtb	r2, r3
 800f240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f242:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800f246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f248:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d011      	beq.n	800f272 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800f24e:	4b6c      	ldr	r3, [pc, #432]	; (800f400 <tcp_slowtmr+0x580>)
 800f250:	681a      	ldr	r2, [r3, #0]
 800f252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f254:	6a1b      	ldr	r3, [r3, #32]
 800f256:	1ad2      	subs	r2, r2, r3
 800f258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f25a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800f25e:	4619      	mov	r1, r3
 800f260:	460b      	mov	r3, r1
 800f262:	005b      	lsls	r3, r3, #1
 800f264:	440b      	add	r3, r1
 800f266:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800f268:	429a      	cmp	r2, r3
 800f26a:	d302      	bcc.n	800f272 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800f26c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f26e:	f000 fe89 	bl	800ff84 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800f272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f274:	7d1b      	ldrb	r3, [r3, #20]
 800f276:	2b03      	cmp	r3, #3
 800f278:	d10b      	bne.n	800f292 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f27a:	4b61      	ldr	r3, [pc, #388]	; (800f400 <tcp_slowtmr+0x580>)
 800f27c:	681a      	ldr	r2, [r3, #0]
 800f27e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f280:	6a1b      	ldr	r3, [r3, #32]
 800f282:	1ad3      	subs	r3, r2, r3
 800f284:	2b28      	cmp	r3, #40	; 0x28
 800f286:	d904      	bls.n	800f292 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800f288:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f28c:	3301      	adds	r3, #1
 800f28e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800f292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f294:	7d1b      	ldrb	r3, [r3, #20]
 800f296:	2b09      	cmp	r3, #9
 800f298:	d10b      	bne.n	800f2b2 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800f29a:	4b59      	ldr	r3, [pc, #356]	; (800f400 <tcp_slowtmr+0x580>)
 800f29c:	681a      	ldr	r2, [r3, #0]
 800f29e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2a0:	6a1b      	ldr	r3, [r3, #32]
 800f2a2:	1ad3      	subs	r3, r2, r3
 800f2a4:	2bf0      	cmp	r3, #240	; 0xf0
 800f2a6:	d904      	bls.n	800f2b2 <tcp_slowtmr+0x432>
        ++pcb_remove;
 800f2a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f2ac:	3301      	adds	r3, #1
 800f2ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800f2b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d060      	beq.n	800f37c <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800f2ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f2c0:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800f2c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f2c4:	f000 fcaa 	bl	800fc1c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800f2c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d010      	beq.n	800f2f0 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800f2ce:	4b50      	ldr	r3, [pc, #320]	; (800f410 <tcp_slowtmr+0x590>)
 800f2d0:	681b      	ldr	r3, [r3, #0]
 800f2d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f2d4:	429a      	cmp	r2, r3
 800f2d6:	d106      	bne.n	800f2e6 <tcp_slowtmr+0x466>
 800f2d8:	4b4e      	ldr	r3, [pc, #312]	; (800f414 <tcp_slowtmr+0x594>)
 800f2da:	f240 526d 	movw	r2, #1389	; 0x56d
 800f2de:	494e      	ldr	r1, [pc, #312]	; (800f418 <tcp_slowtmr+0x598>)
 800f2e0:	484e      	ldr	r0, [pc, #312]	; (800f41c <tcp_slowtmr+0x59c>)
 800f2e2:	f008 fa17 	bl	8017714 <iprintf>
        prev->next = pcb->next;
 800f2e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2e8:	68da      	ldr	r2, [r3, #12]
 800f2ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2ec:	60da      	str	r2, [r3, #12]
 800f2ee:	e00f      	b.n	800f310 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800f2f0:	4b47      	ldr	r3, [pc, #284]	; (800f410 <tcp_slowtmr+0x590>)
 800f2f2:	681a      	ldr	r2, [r3, #0]
 800f2f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2f6:	429a      	cmp	r2, r3
 800f2f8:	d006      	beq.n	800f308 <tcp_slowtmr+0x488>
 800f2fa:	4b46      	ldr	r3, [pc, #280]	; (800f414 <tcp_slowtmr+0x594>)
 800f2fc:	f240 5271 	movw	r2, #1393	; 0x571
 800f300:	4947      	ldr	r1, [pc, #284]	; (800f420 <tcp_slowtmr+0x5a0>)
 800f302:	4846      	ldr	r0, [pc, #280]	; (800f41c <tcp_slowtmr+0x59c>)
 800f304:	f008 fa06 	bl	8017714 <iprintf>
        tcp_active_pcbs = pcb->next;
 800f308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f30a:	68db      	ldr	r3, [r3, #12]
 800f30c:	4a40      	ldr	r2, [pc, #256]	; (800f410 <tcp_slowtmr+0x590>)
 800f30e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800f310:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f314:	2b00      	cmp	r3, #0
 800f316:	d013      	beq.n	800f340 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800f318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f31a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800f31c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f31e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800f320:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800f322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f324:	3304      	adds	r3, #4
 800f326:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f328:	8ad2      	ldrh	r2, [r2, #22]
 800f32a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f32c:	8b09      	ldrh	r1, [r1, #24]
 800f32e:	9102      	str	r1, [sp, #8]
 800f330:	9201      	str	r2, [sp, #4]
 800f332:	9300      	str	r3, [sp, #0]
 800f334:	462b      	mov	r3, r5
 800f336:	4622      	mov	r2, r4
 800f338:	4601      	mov	r1, r0
 800f33a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f33c:	f004 fea8 	bl	8014090 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800f340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f342:	691b      	ldr	r3, [r3, #16]
 800f344:	60fb      	str	r3, [r7, #12]
      last_state = pcb->state;
 800f346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f348:	7d1b      	ldrb	r3, [r3, #20]
 800f34a:	72fb      	strb	r3, [r7, #11]
      pcb2 = pcb;
 800f34c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f34e:	607b      	str	r3, [r7, #4]
      pcb = pcb->next;
 800f350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f352:	68db      	ldr	r3, [r3, #12]
 800f354:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800f356:	6878      	ldr	r0, [r7, #4]
 800f358:	f7ff f89c 	bl	800e494 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800f35c:	4b31      	ldr	r3, [pc, #196]	; (800f424 <tcp_slowtmr+0x5a4>)
 800f35e:	2200      	movs	r2, #0
 800f360:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800f362:	693b      	ldr	r3, [r7, #16]
 800f364:	2b00      	cmp	r3, #0
 800f366:	d004      	beq.n	800f372 <tcp_slowtmr+0x4f2>
 800f368:	693b      	ldr	r3, [r7, #16]
 800f36a:	f06f 010c 	mvn.w	r1, #12
 800f36e:	68f8      	ldr	r0, [r7, #12]
 800f370:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800f372:	4b2c      	ldr	r3, [pc, #176]	; (800f424 <tcp_slowtmr+0x5a4>)
 800f374:	781b      	ldrb	r3, [r3, #0]
 800f376:	2b00      	cmp	r3, #0
 800f378:	d037      	beq.n	800f3ea <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800f37a:	e592      	b.n	800eea2 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800f37c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f37e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800f380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f382:	68db      	ldr	r3, [r3, #12]
 800f384:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800f386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f388:	7f1b      	ldrb	r3, [r3, #28]
 800f38a:	3301      	adds	r3, #1
 800f38c:	b2da      	uxtb	r2, r3
 800f38e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f390:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800f392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f394:	7f1a      	ldrb	r2, [r3, #28]
 800f396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f398:	7f5b      	ldrb	r3, [r3, #29]
 800f39a:	429a      	cmp	r2, r3
 800f39c:	d325      	bcc.n	800f3ea <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800f39e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3a0:	2200      	movs	r2, #0
 800f3a2:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800f3a4:	4b1f      	ldr	r3, [pc, #124]	; (800f424 <tcp_slowtmr+0x5a4>)
 800f3a6:	2200      	movs	r2, #0
 800f3a8:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800f3aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d00b      	beq.n	800f3cc <tcp_slowtmr+0x54c>
 800f3b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f3ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f3bc:	6912      	ldr	r2, [r2, #16]
 800f3be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f3c0:	4610      	mov	r0, r2
 800f3c2:	4798      	blx	r3
 800f3c4:	4603      	mov	r3, r0
 800f3c6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800f3ca:	e002      	b.n	800f3d2 <tcp_slowtmr+0x552>
 800f3cc:	2300      	movs	r3, #0
 800f3ce:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800f3d2:	4b14      	ldr	r3, [pc, #80]	; (800f424 <tcp_slowtmr+0x5a4>)
 800f3d4:	781b      	ldrb	r3, [r3, #0]
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	d000      	beq.n	800f3dc <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800f3da:	e562      	b.n	800eea2 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800f3dc:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d102      	bne.n	800f3ea <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800f3e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f3e6:	f004 f887 	bl	80134f8 <tcp_output>
  while (pcb != NULL) {
 800f3ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3ec:	2b00      	cmp	r3, #0
 800f3ee:	f47f ad5e 	bne.w	800eeae <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800f3f2:	2300      	movs	r3, #0
 800f3f4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800f3f6:	4b0c      	ldr	r3, [pc, #48]	; (800f428 <tcp_slowtmr+0x5a8>)
 800f3f8:	681b      	ldr	r3, [r3, #0]
 800f3fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800f3fc:	e069      	b.n	800f4d2 <tcp_slowtmr+0x652>
 800f3fe:	bf00      	nop
 800f400:	20009628 	.word	0x20009628
 800f404:	000a4cb8 	.word	0x000a4cb8
 800f408:	10624dd3 	.word	0x10624dd3
 800f40c:	000124f8 	.word	0x000124f8
 800f410:	20009624 	.word	0x20009624
 800f414:	08019ea8 	.word	0x08019ea8
 800f418:	0801a2e0 	.word	0x0801a2e0
 800f41c:	08019eec 	.word	0x08019eec
 800f420:	0801a30c 	.word	0x0801a30c
 800f424:	20009620 	.word	0x20009620
 800f428:	20009634 	.word	0x20009634
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f42c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f42e:	7d1b      	ldrb	r3, [r3, #20]
 800f430:	2b0a      	cmp	r3, #10
 800f432:	d006      	beq.n	800f442 <tcp_slowtmr+0x5c2>
 800f434:	4b2a      	ldr	r3, [pc, #168]	; (800f4e0 <tcp_slowtmr+0x660>)
 800f436:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800f43a:	492a      	ldr	r1, [pc, #168]	; (800f4e4 <tcp_slowtmr+0x664>)
 800f43c:	482a      	ldr	r0, [pc, #168]	; (800f4e8 <tcp_slowtmr+0x668>)
 800f43e:	f008 f969 	bl	8017714 <iprintf>
    pcb_remove = 0;
 800f442:	2300      	movs	r3, #0
 800f444:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800f448:	4b28      	ldr	r3, [pc, #160]	; (800f4ec <tcp_slowtmr+0x66c>)
 800f44a:	681a      	ldr	r2, [r3, #0]
 800f44c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f44e:	6a1b      	ldr	r3, [r3, #32]
 800f450:	1ad3      	subs	r3, r2, r3
 800f452:	2bf0      	cmp	r3, #240	; 0xf0
 800f454:	d904      	bls.n	800f460 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800f456:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f45a:	3301      	adds	r3, #1
 800f45c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800f460:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f464:	2b00      	cmp	r3, #0
 800f466:	d02f      	beq.n	800f4c8 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800f468:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f46a:	f000 fbd7 	bl	800fc1c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800f46e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f470:	2b00      	cmp	r3, #0
 800f472:	d010      	beq.n	800f496 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800f474:	4b1e      	ldr	r3, [pc, #120]	; (800f4f0 <tcp_slowtmr+0x670>)
 800f476:	681b      	ldr	r3, [r3, #0]
 800f478:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f47a:	429a      	cmp	r2, r3
 800f47c:	d106      	bne.n	800f48c <tcp_slowtmr+0x60c>
 800f47e:	4b18      	ldr	r3, [pc, #96]	; (800f4e0 <tcp_slowtmr+0x660>)
 800f480:	f240 52af 	movw	r2, #1455	; 0x5af
 800f484:	491b      	ldr	r1, [pc, #108]	; (800f4f4 <tcp_slowtmr+0x674>)
 800f486:	4818      	ldr	r0, [pc, #96]	; (800f4e8 <tcp_slowtmr+0x668>)
 800f488:	f008 f944 	bl	8017714 <iprintf>
        prev->next = pcb->next;
 800f48c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f48e:	68da      	ldr	r2, [r3, #12]
 800f490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f492:	60da      	str	r2, [r3, #12]
 800f494:	e00f      	b.n	800f4b6 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800f496:	4b16      	ldr	r3, [pc, #88]	; (800f4f0 <tcp_slowtmr+0x670>)
 800f498:	681a      	ldr	r2, [r3, #0]
 800f49a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f49c:	429a      	cmp	r2, r3
 800f49e:	d006      	beq.n	800f4ae <tcp_slowtmr+0x62e>
 800f4a0:	4b0f      	ldr	r3, [pc, #60]	; (800f4e0 <tcp_slowtmr+0x660>)
 800f4a2:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800f4a6:	4914      	ldr	r1, [pc, #80]	; (800f4f8 <tcp_slowtmr+0x678>)
 800f4a8:	480f      	ldr	r0, [pc, #60]	; (800f4e8 <tcp_slowtmr+0x668>)
 800f4aa:	f008 f933 	bl	8017714 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800f4ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4b0:	68db      	ldr	r3, [r3, #12]
 800f4b2:	4a0f      	ldr	r2, [pc, #60]	; (800f4f0 <tcp_slowtmr+0x670>)
 800f4b4:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800f4b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4b8:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800f4ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4bc:	68db      	ldr	r3, [r3, #12]
 800f4be:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800f4c0:	6838      	ldr	r0, [r7, #0]
 800f4c2:	f7fe ffe7 	bl	800e494 <tcp_free>
 800f4c6:	e004      	b.n	800f4d2 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800f4c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4ca:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800f4cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4ce:	68db      	ldr	r3, [r3, #12]
 800f4d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800f4d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	d1a9      	bne.n	800f42c <tcp_slowtmr+0x5ac>
    }
  }
}
 800f4d8:	bf00      	nop
 800f4da:	3730      	adds	r7, #48	; 0x30
 800f4dc:	46bd      	mov	sp, r7
 800f4de:	bdb0      	pop	{r4, r5, r7, pc}
 800f4e0:	08019ea8 	.word	0x08019ea8
 800f4e4:	0801a338 	.word	0x0801a338
 800f4e8:	08019eec 	.word	0x08019eec
 800f4ec:	20009628 	.word	0x20009628
 800f4f0:	20009634 	.word	0x20009634
 800f4f4:	0801a368 	.word	0x0801a368
 800f4f8:	0801a390 	.word	0x0801a390

0800f4fc <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800f4fc:	b580      	push	{r7, lr}
 800f4fe:	b082      	sub	sp, #8
 800f500:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800f502:	4b2d      	ldr	r3, [pc, #180]	; (800f5b8 <tcp_fasttmr+0xbc>)
 800f504:	781b      	ldrb	r3, [r3, #0]
 800f506:	3301      	adds	r3, #1
 800f508:	b2da      	uxtb	r2, r3
 800f50a:	4b2b      	ldr	r3, [pc, #172]	; (800f5b8 <tcp_fasttmr+0xbc>)
 800f50c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800f50e:	4b2b      	ldr	r3, [pc, #172]	; (800f5bc <tcp_fasttmr+0xc0>)
 800f510:	681b      	ldr	r3, [r3, #0]
 800f512:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800f514:	e048      	b.n	800f5a8 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	7f9a      	ldrb	r2, [r3, #30]
 800f51a:	4b27      	ldr	r3, [pc, #156]	; (800f5b8 <tcp_fasttmr+0xbc>)
 800f51c:	781b      	ldrb	r3, [r3, #0]
 800f51e:	429a      	cmp	r2, r3
 800f520:	d03f      	beq.n	800f5a2 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800f522:	4b25      	ldr	r3, [pc, #148]	; (800f5b8 <tcp_fasttmr+0xbc>)
 800f524:	781a      	ldrb	r2, [r3, #0]
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	8b5b      	ldrh	r3, [r3, #26]
 800f52e:	f003 0301 	and.w	r3, r3, #1
 800f532:	2b00      	cmp	r3, #0
 800f534:	d010      	beq.n	800f558 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	8b5b      	ldrh	r3, [r3, #26]
 800f53a:	f043 0302 	orr.w	r3, r3, #2
 800f53e:	b29a      	uxth	r2, r3
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800f544:	6878      	ldr	r0, [r7, #4]
 800f546:	f003 ffd7 	bl	80134f8 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	8b5b      	ldrh	r3, [r3, #26]
 800f54e:	f023 0303 	bic.w	r3, r3, #3
 800f552:	b29a      	uxth	r2, r3
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	8b5b      	ldrh	r3, [r3, #26]
 800f55c:	f003 0308 	and.w	r3, r3, #8
 800f560:	2b00      	cmp	r3, #0
 800f562:	d009      	beq.n	800f578 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	8b5b      	ldrh	r3, [r3, #26]
 800f568:	f023 0308 	bic.w	r3, r3, #8
 800f56c:	b29a      	uxth	r2, r3
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800f572:	6878      	ldr	r0, [r7, #4]
 800f574:	f7ff f91e 	bl	800e7b4 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	68db      	ldr	r3, [r3, #12]
 800f57c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f582:	2b00      	cmp	r3, #0
 800f584:	d00a      	beq.n	800f59c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800f586:	4b0e      	ldr	r3, [pc, #56]	; (800f5c0 <tcp_fasttmr+0xc4>)
 800f588:	2200      	movs	r2, #0
 800f58a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800f58c:	6878      	ldr	r0, [r7, #4]
 800f58e:	f000 f819 	bl	800f5c4 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800f592:	4b0b      	ldr	r3, [pc, #44]	; (800f5c0 <tcp_fasttmr+0xc4>)
 800f594:	781b      	ldrb	r3, [r3, #0]
 800f596:	2b00      	cmp	r3, #0
 800f598:	d000      	beq.n	800f59c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800f59a:	e7b8      	b.n	800f50e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800f59c:	683b      	ldr	r3, [r7, #0]
 800f59e:	607b      	str	r3, [r7, #4]
 800f5a0:	e002      	b.n	800f5a8 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	68db      	ldr	r3, [r3, #12]
 800f5a6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	d1b3      	bne.n	800f516 <tcp_fasttmr+0x1a>
    }
  }
}
 800f5ae:	bf00      	nop
 800f5b0:	3708      	adds	r7, #8
 800f5b2:	46bd      	mov	sp, r7
 800f5b4:	bd80      	pop	{r7, pc}
 800f5b6:	bf00      	nop
 800f5b8:	20004542 	.word	0x20004542
 800f5bc:	20009624 	.word	0x20009624
 800f5c0:	20009620 	.word	0x20009620

0800f5c4 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800f5c4:	b590      	push	{r4, r7, lr}
 800f5c6:	b085      	sub	sp, #20
 800f5c8:	af00      	add	r7, sp, #0
 800f5ca:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d109      	bne.n	800f5e6 <tcp_process_refused_data+0x22>
 800f5d2:	4b37      	ldr	r3, [pc, #220]	; (800f6b0 <tcp_process_refused_data+0xec>)
 800f5d4:	f240 6209 	movw	r2, #1545	; 0x609
 800f5d8:	4936      	ldr	r1, [pc, #216]	; (800f6b4 <tcp_process_refused_data+0xf0>)
 800f5da:	4837      	ldr	r0, [pc, #220]	; (800f6b8 <tcp_process_refused_data+0xf4>)
 800f5dc:	f008 f89a 	bl	8017714 <iprintf>
 800f5e0:	f06f 030f 	mvn.w	r3, #15
 800f5e4:	e060      	b.n	800f6a8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f5ea:	7b5b      	ldrb	r3, [r3, #13]
 800f5ec:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f5f2:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	2200      	movs	r2, #0
 800f5f8:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f600:	2b00      	cmp	r3, #0
 800f602:	d00b      	beq.n	800f61c <tcp_process_refused_data+0x58>
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	6918      	ldr	r0, [r3, #16]
 800f60e:	2300      	movs	r3, #0
 800f610:	68ba      	ldr	r2, [r7, #8]
 800f612:	6879      	ldr	r1, [r7, #4]
 800f614:	47a0      	blx	r4
 800f616:	4603      	mov	r3, r0
 800f618:	73fb      	strb	r3, [r7, #15]
 800f61a:	e007      	b.n	800f62c <tcp_process_refused_data+0x68>
 800f61c:	2300      	movs	r3, #0
 800f61e:	68ba      	ldr	r2, [r7, #8]
 800f620:	6879      	ldr	r1, [r7, #4]
 800f622:	2000      	movs	r0, #0
 800f624:	f000 f8a2 	bl	800f76c <tcp_recv_null>
 800f628:	4603      	mov	r3, r0
 800f62a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800f62c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f630:	2b00      	cmp	r3, #0
 800f632:	d12a      	bne.n	800f68a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800f634:	7bbb      	ldrb	r3, [r7, #14]
 800f636:	f003 0320 	and.w	r3, r3, #32
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	d033      	beq.n	800f6a6 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f642:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f646:	d005      	beq.n	800f654 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f64c:	3301      	adds	r3, #1
 800f64e:	b29a      	uxth	r2, r3
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d00b      	beq.n	800f676 <tcp_process_refused_data+0xb2>
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	6918      	ldr	r0, [r3, #16]
 800f668:	2300      	movs	r3, #0
 800f66a:	2200      	movs	r2, #0
 800f66c:	6879      	ldr	r1, [r7, #4]
 800f66e:	47a0      	blx	r4
 800f670:	4603      	mov	r3, r0
 800f672:	73fb      	strb	r3, [r7, #15]
 800f674:	e001      	b.n	800f67a <tcp_process_refused_data+0xb6>
 800f676:	2300      	movs	r3, #0
 800f678:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800f67a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f67e:	f113 0f0d 	cmn.w	r3, #13
 800f682:	d110      	bne.n	800f6a6 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800f684:	f06f 030c 	mvn.w	r3, #12
 800f688:	e00e      	b.n	800f6a8 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800f68a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f68e:	f113 0f0d 	cmn.w	r3, #13
 800f692:	d102      	bne.n	800f69a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800f694:	f06f 030c 	mvn.w	r3, #12
 800f698:	e006      	b.n	800f6a8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	68ba      	ldr	r2, [r7, #8]
 800f69e:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800f6a0:	f06f 0304 	mvn.w	r3, #4
 800f6a4:	e000      	b.n	800f6a8 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800f6a6:	2300      	movs	r3, #0
}
 800f6a8:	4618      	mov	r0, r3
 800f6aa:	3714      	adds	r7, #20
 800f6ac:	46bd      	mov	sp, r7
 800f6ae:	bd90      	pop	{r4, r7, pc}
 800f6b0:	08019ea8 	.word	0x08019ea8
 800f6b4:	0801a3b8 	.word	0x0801a3b8
 800f6b8:	08019eec 	.word	0x08019eec

0800f6bc <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800f6bc:	b580      	push	{r7, lr}
 800f6be:	b084      	sub	sp, #16
 800f6c0:	af00      	add	r7, sp, #0
 800f6c2:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800f6c4:	e007      	b.n	800f6d6 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	681b      	ldr	r3, [r3, #0]
 800f6ca:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800f6cc:	6878      	ldr	r0, [r7, #4]
 800f6ce:	f000 f809 	bl	800f6e4 <tcp_seg_free>
    seg = next;
 800f6d2:	68fb      	ldr	r3, [r7, #12]
 800f6d4:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	d1f4      	bne.n	800f6c6 <tcp_segs_free+0xa>
  }
}
 800f6dc:	bf00      	nop
 800f6de:	3710      	adds	r7, #16
 800f6e0:	46bd      	mov	sp, r7
 800f6e2:	bd80      	pop	{r7, pc}

0800f6e4 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800f6e4:	b580      	push	{r7, lr}
 800f6e6:	b082      	sub	sp, #8
 800f6e8:	af00      	add	r7, sp, #0
 800f6ea:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d00c      	beq.n	800f70c <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	685b      	ldr	r3, [r3, #4]
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d004      	beq.n	800f704 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	685b      	ldr	r3, [r3, #4]
 800f6fe:	4618      	mov	r0, r3
 800f700:	f7fe f9ec 	bl	800dadc <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800f704:	6879      	ldr	r1, [r7, #4]
 800f706:	2003      	movs	r0, #3
 800f708:	f7fd fb14 	bl	800cd34 <memp_free>
  }
}
 800f70c:	bf00      	nop
 800f70e:	3708      	adds	r7, #8
 800f710:	46bd      	mov	sp, r7
 800f712:	bd80      	pop	{r7, pc}

0800f714 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800f714:	b580      	push	{r7, lr}
 800f716:	b084      	sub	sp, #16
 800f718:	af00      	add	r7, sp, #0
 800f71a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d106      	bne.n	800f730 <tcp_seg_copy+0x1c>
 800f722:	4b0f      	ldr	r3, [pc, #60]	; (800f760 <tcp_seg_copy+0x4c>)
 800f724:	f240 6282 	movw	r2, #1666	; 0x682
 800f728:	490e      	ldr	r1, [pc, #56]	; (800f764 <tcp_seg_copy+0x50>)
 800f72a:	480f      	ldr	r0, [pc, #60]	; (800f768 <tcp_seg_copy+0x54>)
 800f72c:	f007 fff2 	bl	8017714 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800f730:	2003      	movs	r0, #3
 800f732:	f7fd faad 	bl	800cc90 <memp_malloc>
 800f736:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800f738:	68fb      	ldr	r3, [r7, #12]
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	d101      	bne.n	800f742 <tcp_seg_copy+0x2e>
    return NULL;
 800f73e:	2300      	movs	r3, #0
 800f740:	e00a      	b.n	800f758 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800f742:	2210      	movs	r2, #16
 800f744:	6879      	ldr	r1, [r7, #4]
 800f746:	68f8      	ldr	r0, [r7, #12]
 800f748:	f007 ff0b 	bl	8017562 <memcpy>
  pbuf_ref(cseg->p);
 800f74c:	68fb      	ldr	r3, [r7, #12]
 800f74e:	685b      	ldr	r3, [r3, #4]
 800f750:	4618      	mov	r0, r3
 800f752:	f7fe fa69 	bl	800dc28 <pbuf_ref>
  return cseg;
 800f756:	68fb      	ldr	r3, [r7, #12]
}
 800f758:	4618      	mov	r0, r3
 800f75a:	3710      	adds	r7, #16
 800f75c:	46bd      	mov	sp, r7
 800f75e:	bd80      	pop	{r7, pc}
 800f760:	08019ea8 	.word	0x08019ea8
 800f764:	0801a3fc 	.word	0x0801a3fc
 800f768:	08019eec 	.word	0x08019eec

0800f76c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800f76c:	b580      	push	{r7, lr}
 800f76e:	b084      	sub	sp, #16
 800f770:	af00      	add	r7, sp, #0
 800f772:	60f8      	str	r0, [r7, #12]
 800f774:	60b9      	str	r1, [r7, #8]
 800f776:	607a      	str	r2, [r7, #4]
 800f778:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800f77a:	68bb      	ldr	r3, [r7, #8]
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d109      	bne.n	800f794 <tcp_recv_null+0x28>
 800f780:	4b12      	ldr	r3, [pc, #72]	; (800f7cc <tcp_recv_null+0x60>)
 800f782:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800f786:	4912      	ldr	r1, [pc, #72]	; (800f7d0 <tcp_recv_null+0x64>)
 800f788:	4812      	ldr	r0, [pc, #72]	; (800f7d4 <tcp_recv_null+0x68>)
 800f78a:	f007 ffc3 	bl	8017714 <iprintf>
 800f78e:	f06f 030f 	mvn.w	r3, #15
 800f792:	e016      	b.n	800f7c2 <tcp_recv_null+0x56>

  if (p != NULL) {
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	2b00      	cmp	r3, #0
 800f798:	d009      	beq.n	800f7ae <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	891b      	ldrh	r3, [r3, #8]
 800f79e:	4619      	mov	r1, r3
 800f7a0:	68b8      	ldr	r0, [r7, #8]
 800f7a2:	f7ff f9bf 	bl	800eb24 <tcp_recved>
    pbuf_free(p);
 800f7a6:	6878      	ldr	r0, [r7, #4]
 800f7a8:	f7fe f998 	bl	800dadc <pbuf_free>
 800f7ac:	e008      	b.n	800f7c0 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800f7ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	d104      	bne.n	800f7c0 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800f7b6:	68b8      	ldr	r0, [r7, #8]
 800f7b8:	f7ff f862 	bl	800e880 <tcp_close>
 800f7bc:	4603      	mov	r3, r0
 800f7be:	e000      	b.n	800f7c2 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800f7c0:	2300      	movs	r3, #0
}
 800f7c2:	4618      	mov	r0, r3
 800f7c4:	3710      	adds	r7, #16
 800f7c6:	46bd      	mov	sp, r7
 800f7c8:	bd80      	pop	{r7, pc}
 800f7ca:	bf00      	nop
 800f7cc:	08019ea8 	.word	0x08019ea8
 800f7d0:	0801a418 	.word	0x0801a418
 800f7d4:	08019eec 	.word	0x08019eec

0800f7d8 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800f7d8:	b580      	push	{r7, lr}
 800f7da:	b086      	sub	sp, #24
 800f7dc:	af00      	add	r7, sp, #0
 800f7de:	4603      	mov	r3, r0
 800f7e0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800f7e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	db01      	blt.n	800f7ee <tcp_kill_prio+0x16>
 800f7ea:	79fb      	ldrb	r3, [r7, #7]
 800f7ec:	e000      	b.n	800f7f0 <tcp_kill_prio+0x18>
 800f7ee:	237f      	movs	r3, #127	; 0x7f
 800f7f0:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800f7f2:	7afb      	ldrb	r3, [r7, #11]
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	d034      	beq.n	800f862 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800f7f8:	7afb      	ldrb	r3, [r7, #11]
 800f7fa:	3b01      	subs	r3, #1
 800f7fc:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800f7fe:	2300      	movs	r3, #0
 800f800:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800f802:	2300      	movs	r3, #0
 800f804:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f806:	4b19      	ldr	r3, [pc, #100]	; (800f86c <tcp_kill_prio+0x94>)
 800f808:	681b      	ldr	r3, [r3, #0]
 800f80a:	617b      	str	r3, [r7, #20]
 800f80c:	e01f      	b.n	800f84e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800f80e:	697b      	ldr	r3, [r7, #20]
 800f810:	7d5b      	ldrb	r3, [r3, #21]
 800f812:	7afa      	ldrb	r2, [r7, #11]
 800f814:	429a      	cmp	r2, r3
 800f816:	d80c      	bhi.n	800f832 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800f818:	697b      	ldr	r3, [r7, #20]
 800f81a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800f81c:	7afa      	ldrb	r2, [r7, #11]
 800f81e:	429a      	cmp	r2, r3
 800f820:	d112      	bne.n	800f848 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800f822:	4b13      	ldr	r3, [pc, #76]	; (800f870 <tcp_kill_prio+0x98>)
 800f824:	681a      	ldr	r2, [r3, #0]
 800f826:	697b      	ldr	r3, [r7, #20]
 800f828:	6a1b      	ldr	r3, [r3, #32]
 800f82a:	1ad2      	subs	r2, r2, r3
 800f82c:	68fb      	ldr	r3, [r7, #12]
 800f82e:	429a      	cmp	r2, r3
 800f830:	d30a      	bcc.n	800f848 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800f832:	4b0f      	ldr	r3, [pc, #60]	; (800f870 <tcp_kill_prio+0x98>)
 800f834:	681a      	ldr	r2, [r3, #0]
 800f836:	697b      	ldr	r3, [r7, #20]
 800f838:	6a1b      	ldr	r3, [r3, #32]
 800f83a:	1ad3      	subs	r3, r2, r3
 800f83c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800f83e:	697b      	ldr	r3, [r7, #20]
 800f840:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800f842:	697b      	ldr	r3, [r7, #20]
 800f844:	7d5b      	ldrb	r3, [r3, #21]
 800f846:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f848:	697b      	ldr	r3, [r7, #20]
 800f84a:	68db      	ldr	r3, [r3, #12]
 800f84c:	617b      	str	r3, [r7, #20]
 800f84e:	697b      	ldr	r3, [r7, #20]
 800f850:	2b00      	cmp	r3, #0
 800f852:	d1dc      	bne.n	800f80e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800f854:	693b      	ldr	r3, [r7, #16]
 800f856:	2b00      	cmp	r3, #0
 800f858:	d004      	beq.n	800f864 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800f85a:	6938      	ldr	r0, [r7, #16]
 800f85c:	f7ff f8fa 	bl	800ea54 <tcp_abort>
 800f860:	e000      	b.n	800f864 <tcp_kill_prio+0x8c>
    return;
 800f862:	bf00      	nop
  }
}
 800f864:	3718      	adds	r7, #24
 800f866:	46bd      	mov	sp, r7
 800f868:	bd80      	pop	{r7, pc}
 800f86a:	bf00      	nop
 800f86c:	20009624 	.word	0x20009624
 800f870:	20009628 	.word	0x20009628

0800f874 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800f874:	b580      	push	{r7, lr}
 800f876:	b086      	sub	sp, #24
 800f878:	af00      	add	r7, sp, #0
 800f87a:	4603      	mov	r3, r0
 800f87c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800f87e:	79fb      	ldrb	r3, [r7, #7]
 800f880:	2b08      	cmp	r3, #8
 800f882:	d009      	beq.n	800f898 <tcp_kill_state+0x24>
 800f884:	79fb      	ldrb	r3, [r7, #7]
 800f886:	2b09      	cmp	r3, #9
 800f888:	d006      	beq.n	800f898 <tcp_kill_state+0x24>
 800f88a:	4b1a      	ldr	r3, [pc, #104]	; (800f8f4 <tcp_kill_state+0x80>)
 800f88c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800f890:	4919      	ldr	r1, [pc, #100]	; (800f8f8 <tcp_kill_state+0x84>)
 800f892:	481a      	ldr	r0, [pc, #104]	; (800f8fc <tcp_kill_state+0x88>)
 800f894:	f007 ff3e 	bl	8017714 <iprintf>

  inactivity = 0;
 800f898:	2300      	movs	r3, #0
 800f89a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800f89c:	2300      	movs	r3, #0
 800f89e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f8a0:	4b17      	ldr	r3, [pc, #92]	; (800f900 <tcp_kill_state+0x8c>)
 800f8a2:	681b      	ldr	r3, [r3, #0]
 800f8a4:	617b      	str	r3, [r7, #20]
 800f8a6:	e017      	b.n	800f8d8 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800f8a8:	697b      	ldr	r3, [r7, #20]
 800f8aa:	7d1b      	ldrb	r3, [r3, #20]
 800f8ac:	79fa      	ldrb	r2, [r7, #7]
 800f8ae:	429a      	cmp	r2, r3
 800f8b0:	d10f      	bne.n	800f8d2 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800f8b2:	4b14      	ldr	r3, [pc, #80]	; (800f904 <tcp_kill_state+0x90>)
 800f8b4:	681a      	ldr	r2, [r3, #0]
 800f8b6:	697b      	ldr	r3, [r7, #20]
 800f8b8:	6a1b      	ldr	r3, [r3, #32]
 800f8ba:	1ad2      	subs	r2, r2, r3
 800f8bc:	68fb      	ldr	r3, [r7, #12]
 800f8be:	429a      	cmp	r2, r3
 800f8c0:	d307      	bcc.n	800f8d2 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800f8c2:	4b10      	ldr	r3, [pc, #64]	; (800f904 <tcp_kill_state+0x90>)
 800f8c4:	681a      	ldr	r2, [r3, #0]
 800f8c6:	697b      	ldr	r3, [r7, #20]
 800f8c8:	6a1b      	ldr	r3, [r3, #32]
 800f8ca:	1ad3      	subs	r3, r2, r3
 800f8cc:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800f8ce:	697b      	ldr	r3, [r7, #20]
 800f8d0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f8d2:	697b      	ldr	r3, [r7, #20]
 800f8d4:	68db      	ldr	r3, [r3, #12]
 800f8d6:	617b      	str	r3, [r7, #20]
 800f8d8:	697b      	ldr	r3, [r7, #20]
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	d1e4      	bne.n	800f8a8 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800f8de:	693b      	ldr	r3, [r7, #16]
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	d003      	beq.n	800f8ec <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800f8e4:	2100      	movs	r1, #0
 800f8e6:	6938      	ldr	r0, [r7, #16]
 800f8e8:	f7fe fff6 	bl	800e8d8 <tcp_abandon>
  }
}
 800f8ec:	bf00      	nop
 800f8ee:	3718      	adds	r7, #24
 800f8f0:	46bd      	mov	sp, r7
 800f8f2:	bd80      	pop	{r7, pc}
 800f8f4:	08019ea8 	.word	0x08019ea8
 800f8f8:	0801a434 	.word	0x0801a434
 800f8fc:	08019eec 	.word	0x08019eec
 800f900:	20009624 	.word	0x20009624
 800f904:	20009628 	.word	0x20009628

0800f908 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800f908:	b580      	push	{r7, lr}
 800f90a:	b084      	sub	sp, #16
 800f90c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800f90e:	2300      	movs	r3, #0
 800f910:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800f912:	2300      	movs	r3, #0
 800f914:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f916:	4b12      	ldr	r3, [pc, #72]	; (800f960 <tcp_kill_timewait+0x58>)
 800f918:	681b      	ldr	r3, [r3, #0]
 800f91a:	60fb      	str	r3, [r7, #12]
 800f91c:	e012      	b.n	800f944 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800f91e:	4b11      	ldr	r3, [pc, #68]	; (800f964 <tcp_kill_timewait+0x5c>)
 800f920:	681a      	ldr	r2, [r3, #0]
 800f922:	68fb      	ldr	r3, [r7, #12]
 800f924:	6a1b      	ldr	r3, [r3, #32]
 800f926:	1ad2      	subs	r2, r2, r3
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	429a      	cmp	r2, r3
 800f92c:	d307      	bcc.n	800f93e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800f92e:	4b0d      	ldr	r3, [pc, #52]	; (800f964 <tcp_kill_timewait+0x5c>)
 800f930:	681a      	ldr	r2, [r3, #0]
 800f932:	68fb      	ldr	r3, [r7, #12]
 800f934:	6a1b      	ldr	r3, [r3, #32]
 800f936:	1ad3      	subs	r3, r2, r3
 800f938:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800f93a:	68fb      	ldr	r3, [r7, #12]
 800f93c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f93e:	68fb      	ldr	r3, [r7, #12]
 800f940:	68db      	ldr	r3, [r3, #12]
 800f942:	60fb      	str	r3, [r7, #12]
 800f944:	68fb      	ldr	r3, [r7, #12]
 800f946:	2b00      	cmp	r3, #0
 800f948:	d1e9      	bne.n	800f91e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800f94a:	68bb      	ldr	r3, [r7, #8]
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d002      	beq.n	800f956 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800f950:	68b8      	ldr	r0, [r7, #8]
 800f952:	f7ff f87f 	bl	800ea54 <tcp_abort>
  }
}
 800f956:	bf00      	nop
 800f958:	3710      	adds	r7, #16
 800f95a:	46bd      	mov	sp, r7
 800f95c:	bd80      	pop	{r7, pc}
 800f95e:	bf00      	nop
 800f960:	20009634 	.word	0x20009634
 800f964:	20009628 	.word	0x20009628

0800f968 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800f968:	b580      	push	{r7, lr}
 800f96a:	b082      	sub	sp, #8
 800f96c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800f96e:	4b10      	ldr	r3, [pc, #64]	; (800f9b0 <tcp_handle_closepend+0x48>)
 800f970:	681b      	ldr	r3, [r3, #0]
 800f972:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800f974:	e014      	b.n	800f9a0 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	68db      	ldr	r3, [r3, #12]
 800f97a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	8b5b      	ldrh	r3, [r3, #26]
 800f980:	f003 0308 	and.w	r3, r3, #8
 800f984:	2b00      	cmp	r3, #0
 800f986:	d009      	beq.n	800f99c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	8b5b      	ldrh	r3, [r3, #26]
 800f98c:	f023 0308 	bic.w	r3, r3, #8
 800f990:	b29a      	uxth	r2, r3
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800f996:	6878      	ldr	r0, [r7, #4]
 800f998:	f7fe ff0c 	bl	800e7b4 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800f99c:	683b      	ldr	r3, [r7, #0]
 800f99e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	d1e7      	bne.n	800f976 <tcp_handle_closepend+0xe>
  }
}
 800f9a6:	bf00      	nop
 800f9a8:	3708      	adds	r7, #8
 800f9aa:	46bd      	mov	sp, r7
 800f9ac:	bd80      	pop	{r7, pc}
 800f9ae:	bf00      	nop
 800f9b0:	20009624 	.word	0x20009624

0800f9b4 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800f9b4:	b580      	push	{r7, lr}
 800f9b6:	b084      	sub	sp, #16
 800f9b8:	af00      	add	r7, sp, #0
 800f9ba:	4603      	mov	r3, r0
 800f9bc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f9be:	2001      	movs	r0, #1
 800f9c0:	f7fd f966 	bl	800cc90 <memp_malloc>
 800f9c4:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800f9c6:	68fb      	ldr	r3, [r7, #12]
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d126      	bne.n	800fa1a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800f9cc:	f7ff ffcc 	bl	800f968 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800f9d0:	f7ff ff9a 	bl	800f908 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f9d4:	2001      	movs	r0, #1
 800f9d6:	f7fd f95b 	bl	800cc90 <memp_malloc>
 800f9da:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800f9dc:	68fb      	ldr	r3, [r7, #12]
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	d11b      	bne.n	800fa1a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800f9e2:	2009      	movs	r0, #9
 800f9e4:	f7ff ff46 	bl	800f874 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f9e8:	2001      	movs	r0, #1
 800f9ea:	f7fd f951 	bl	800cc90 <memp_malloc>
 800f9ee:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800f9f0:	68fb      	ldr	r3, [r7, #12]
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d111      	bne.n	800fa1a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800f9f6:	2008      	movs	r0, #8
 800f9f8:	f7ff ff3c 	bl	800f874 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f9fc:	2001      	movs	r0, #1
 800f9fe:	f7fd f947 	bl	800cc90 <memp_malloc>
 800fa02:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	d107      	bne.n	800fa1a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800fa0a:	79fb      	ldrb	r3, [r7, #7]
 800fa0c:	4618      	mov	r0, r3
 800fa0e:	f7ff fee3 	bl	800f7d8 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800fa12:	2001      	movs	r0, #1
 800fa14:	f7fd f93c 	bl	800cc90 <memp_malloc>
 800fa18:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800fa1a:	68fb      	ldr	r3, [r7, #12]
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	d03f      	beq.n	800faa0 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800fa20:	229c      	movs	r2, #156	; 0x9c
 800fa22:	2100      	movs	r1, #0
 800fa24:	68f8      	ldr	r0, [r7, #12]
 800fa26:	f007 fdc1 	bl	80175ac <memset>
    pcb->prio = prio;
 800fa2a:	68fb      	ldr	r3, [r7, #12]
 800fa2c:	79fa      	ldrb	r2, [r7, #7]
 800fa2e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800fa30:	68fb      	ldr	r3, [r7, #12]
 800fa32:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800fa36:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800fa3a:	68fb      	ldr	r3, [r7, #12]
 800fa3c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800fa40:	855a      	strh	r2, [r3, #42]	; 0x2a
 800fa42:	68fb      	ldr	r3, [r7, #12]
 800fa44:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800fa46:	68fb      	ldr	r3, [r7, #12]
 800fa48:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800fa4a:	68fb      	ldr	r3, [r7, #12]
 800fa4c:	22ff      	movs	r2, #255	; 0xff
 800fa4e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800fa50:	68fb      	ldr	r3, [r7, #12]
 800fa52:	f44f 7206 	mov.w	r2, #536	; 0x218
 800fa56:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800fa58:	68fb      	ldr	r3, [r7, #12]
 800fa5a:	2206      	movs	r2, #6
 800fa5c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800fa60:	68fb      	ldr	r3, [r7, #12]
 800fa62:	2206      	movs	r2, #6
 800fa64:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800fa66:	68fb      	ldr	r3, [r7, #12]
 800fa68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fa6c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800fa6e:	68fb      	ldr	r3, [r7, #12]
 800fa70:	2201      	movs	r2, #1
 800fa72:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800fa76:	4b0d      	ldr	r3, [pc, #52]	; (800faac <tcp_alloc+0xf8>)
 800fa78:	681a      	ldr	r2, [r3, #0]
 800fa7a:	68fb      	ldr	r3, [r7, #12]
 800fa7c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800fa7e:	4b0c      	ldr	r3, [pc, #48]	; (800fab0 <tcp_alloc+0xfc>)
 800fa80:	781a      	ldrb	r2, [r3, #0]
 800fa82:	68fb      	ldr	r3, [r7, #12]
 800fa84:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800fa86:	68fb      	ldr	r3, [r7, #12]
 800fa88:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800fa8c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800fa90:	68fb      	ldr	r3, [r7, #12]
 800fa92:	4a08      	ldr	r2, [pc, #32]	; (800fab4 <tcp_alloc+0x100>)
 800fa94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800fa98:	68fb      	ldr	r3, [r7, #12]
 800fa9a:	4a07      	ldr	r2, [pc, #28]	; (800fab8 <tcp_alloc+0x104>)
 800fa9c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800faa0:	68fb      	ldr	r3, [r7, #12]
}
 800faa2:	4618      	mov	r0, r3
 800faa4:	3710      	adds	r7, #16
 800faa6:	46bd      	mov	sp, r7
 800faa8:	bd80      	pop	{r7, pc}
 800faaa:	bf00      	nop
 800faac:	20009628 	.word	0x20009628
 800fab0:	20004542 	.word	0x20004542
 800fab4:	0800f76d 	.word	0x0800f76d
 800fab8:	006ddd00 	.word	0x006ddd00

0800fabc <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 800fabc:	b580      	push	{r7, lr}
 800fabe:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 800fac0:	2040      	movs	r0, #64	; 0x40
 800fac2:	f7ff ff77 	bl	800f9b4 <tcp_alloc>
 800fac6:	4603      	mov	r3, r0
}
 800fac8:	4618      	mov	r0, r3
 800faca:	bd80      	pop	{r7, pc}

0800facc <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800facc:	b480      	push	{r7}
 800face:	b083      	sub	sp, #12
 800fad0:	af00      	add	r7, sp, #0
 800fad2:	6078      	str	r0, [r7, #4]
 800fad4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d002      	beq.n	800fae2 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	683a      	ldr	r2, [r7, #0]
 800fae0:	611a      	str	r2, [r3, #16]
  }
}
 800fae2:	bf00      	nop
 800fae4:	370c      	adds	r7, #12
 800fae6:	46bd      	mov	sp, r7
 800fae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faec:	4770      	bx	lr
	...

0800faf0 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800faf0:	b580      	push	{r7, lr}
 800faf2:	b082      	sub	sp, #8
 800faf4:	af00      	add	r7, sp, #0
 800faf6:	6078      	str	r0, [r7, #4]
 800faf8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d00e      	beq.n	800fb1e <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	7d1b      	ldrb	r3, [r3, #20]
 800fb04:	2b01      	cmp	r3, #1
 800fb06:	d106      	bne.n	800fb16 <tcp_recv+0x26>
 800fb08:	4b07      	ldr	r3, [pc, #28]	; (800fb28 <tcp_recv+0x38>)
 800fb0a:	f240 72df 	movw	r2, #2015	; 0x7df
 800fb0e:	4907      	ldr	r1, [pc, #28]	; (800fb2c <tcp_recv+0x3c>)
 800fb10:	4807      	ldr	r0, [pc, #28]	; (800fb30 <tcp_recv+0x40>)
 800fb12:	f007 fdff 	bl	8017714 <iprintf>
    pcb->recv = recv;
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	683a      	ldr	r2, [r7, #0]
 800fb1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800fb1e:	bf00      	nop
 800fb20:	3708      	adds	r7, #8
 800fb22:	46bd      	mov	sp, r7
 800fb24:	bd80      	pop	{r7, pc}
 800fb26:	bf00      	nop
 800fb28:	08019ea8 	.word	0x08019ea8
 800fb2c:	0801a444 	.word	0x0801a444
 800fb30:	08019eec 	.word	0x08019eec

0800fb34 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800fb34:	b580      	push	{r7, lr}
 800fb36:	b082      	sub	sp, #8
 800fb38:	af00      	add	r7, sp, #0
 800fb3a:	6078      	str	r0, [r7, #4]
 800fb3c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d00e      	beq.n	800fb62 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	7d1b      	ldrb	r3, [r3, #20]
 800fb48:	2b01      	cmp	r3, #1
 800fb4a:	d106      	bne.n	800fb5a <tcp_sent+0x26>
 800fb4c:	4b07      	ldr	r3, [pc, #28]	; (800fb6c <tcp_sent+0x38>)
 800fb4e:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800fb52:	4907      	ldr	r1, [pc, #28]	; (800fb70 <tcp_sent+0x3c>)
 800fb54:	4807      	ldr	r0, [pc, #28]	; (800fb74 <tcp_sent+0x40>)
 800fb56:	f007 fddd 	bl	8017714 <iprintf>
    pcb->sent = sent;
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	683a      	ldr	r2, [r7, #0]
 800fb5e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800fb62:	bf00      	nop
 800fb64:	3708      	adds	r7, #8
 800fb66:	46bd      	mov	sp, r7
 800fb68:	bd80      	pop	{r7, pc}
 800fb6a:	bf00      	nop
 800fb6c:	08019ea8 	.word	0x08019ea8
 800fb70:	0801a46c 	.word	0x0801a46c
 800fb74:	08019eec 	.word	0x08019eec

0800fb78 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800fb78:	b580      	push	{r7, lr}
 800fb7a:	b082      	sub	sp, #8
 800fb7c:	af00      	add	r7, sp, #0
 800fb7e:	6078      	str	r0, [r7, #4]
 800fb80:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	d00e      	beq.n	800fba6 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	7d1b      	ldrb	r3, [r3, #20]
 800fb8c:	2b01      	cmp	r3, #1
 800fb8e:	d106      	bne.n	800fb9e <tcp_err+0x26>
 800fb90:	4b07      	ldr	r3, [pc, #28]	; (800fbb0 <tcp_err+0x38>)
 800fb92:	f640 020d 	movw	r2, #2061	; 0x80d
 800fb96:	4907      	ldr	r1, [pc, #28]	; (800fbb4 <tcp_err+0x3c>)
 800fb98:	4807      	ldr	r0, [pc, #28]	; (800fbb8 <tcp_err+0x40>)
 800fb9a:	f007 fdbb 	bl	8017714 <iprintf>
    pcb->errf = err;
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	683a      	ldr	r2, [r7, #0]
 800fba2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800fba6:	bf00      	nop
 800fba8:	3708      	adds	r7, #8
 800fbaa:	46bd      	mov	sp, r7
 800fbac:	bd80      	pop	{r7, pc}
 800fbae:	bf00      	nop
 800fbb0:	08019ea8 	.word	0x08019ea8
 800fbb4:	0801a494 	.word	0x0801a494
 800fbb8:	08019eec 	.word	0x08019eec

0800fbbc <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800fbbc:	b580      	push	{r7, lr}
 800fbbe:	b084      	sub	sp, #16
 800fbc0:	af00      	add	r7, sp, #0
 800fbc2:	60f8      	str	r0, [r7, #12]
 800fbc4:	60b9      	str	r1, [r7, #8]
 800fbc6:	4613      	mov	r3, r2
 800fbc8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800fbca:	68fb      	ldr	r3, [r7, #12]
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	d107      	bne.n	800fbe0 <tcp_poll+0x24>
 800fbd0:	4b0e      	ldr	r3, [pc, #56]	; (800fc0c <tcp_poll+0x50>)
 800fbd2:	f640 023d 	movw	r2, #2109	; 0x83d
 800fbd6:	490e      	ldr	r1, [pc, #56]	; (800fc10 <tcp_poll+0x54>)
 800fbd8:	480e      	ldr	r0, [pc, #56]	; (800fc14 <tcp_poll+0x58>)
 800fbda:	f007 fd9b 	bl	8017714 <iprintf>
 800fbde:	e011      	b.n	800fc04 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800fbe0:	68fb      	ldr	r3, [r7, #12]
 800fbe2:	7d1b      	ldrb	r3, [r3, #20]
 800fbe4:	2b01      	cmp	r3, #1
 800fbe6:	d106      	bne.n	800fbf6 <tcp_poll+0x3a>
 800fbe8:	4b08      	ldr	r3, [pc, #32]	; (800fc0c <tcp_poll+0x50>)
 800fbea:	f640 023e 	movw	r2, #2110	; 0x83e
 800fbee:	490a      	ldr	r1, [pc, #40]	; (800fc18 <tcp_poll+0x5c>)
 800fbf0:	4808      	ldr	r0, [pc, #32]	; (800fc14 <tcp_poll+0x58>)
 800fbf2:	f007 fd8f 	bl	8017714 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800fbf6:	68fb      	ldr	r3, [r7, #12]
 800fbf8:	68ba      	ldr	r2, [r7, #8]
 800fbfa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800fbfe:	68fb      	ldr	r3, [r7, #12]
 800fc00:	79fa      	ldrb	r2, [r7, #7]
 800fc02:	775a      	strb	r2, [r3, #29]
}
 800fc04:	3710      	adds	r7, #16
 800fc06:	46bd      	mov	sp, r7
 800fc08:	bd80      	pop	{r7, pc}
 800fc0a:	bf00      	nop
 800fc0c:	08019ea8 	.word	0x08019ea8
 800fc10:	0801a4bc 	.word	0x0801a4bc
 800fc14:	08019eec 	.word	0x08019eec
 800fc18:	0801a4d4 	.word	0x0801a4d4

0800fc1c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800fc1c:	b580      	push	{r7, lr}
 800fc1e:	b082      	sub	sp, #8
 800fc20:	af00      	add	r7, sp, #0
 800fc22:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	2b00      	cmp	r3, #0
 800fc28:	d107      	bne.n	800fc3a <tcp_pcb_purge+0x1e>
 800fc2a:	4b21      	ldr	r3, [pc, #132]	; (800fcb0 <tcp_pcb_purge+0x94>)
 800fc2c:	f640 0251 	movw	r2, #2129	; 0x851
 800fc30:	4920      	ldr	r1, [pc, #128]	; (800fcb4 <tcp_pcb_purge+0x98>)
 800fc32:	4821      	ldr	r0, [pc, #132]	; (800fcb8 <tcp_pcb_purge+0x9c>)
 800fc34:	f007 fd6e 	bl	8017714 <iprintf>
 800fc38:	e037      	b.n	800fcaa <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	7d1b      	ldrb	r3, [r3, #20]
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	d033      	beq.n	800fcaa <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800fc46:	2b0a      	cmp	r3, #10
 800fc48:	d02f      	beq.n	800fcaa <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800fc4e:	2b01      	cmp	r3, #1
 800fc50:	d02b      	beq.n	800fcaa <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d007      	beq.n	800fc6a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fc5e:	4618      	mov	r0, r3
 800fc60:	f7fd ff3c 	bl	800dadc <pbuf_free>
      pcb->refused_data = NULL;
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	2200      	movs	r2, #0
 800fc68:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	d002      	beq.n	800fc78 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800fc72:	6878      	ldr	r0, [r7, #4]
 800fc74:	f000 f986 	bl	800ff84 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fc7e:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fc84:	4618      	mov	r0, r3
 800fc86:	f7ff fd19 	bl	800f6bc <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fc8e:	4618      	mov	r0, r3
 800fc90:	f7ff fd14 	bl	800f6bc <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	2200      	movs	r2, #0
 800fc98:	66da      	str	r2, [r3, #108]	; 0x6c
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	2200      	movs	r2, #0
 800fca6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800fcaa:	3708      	adds	r7, #8
 800fcac:	46bd      	mov	sp, r7
 800fcae:	bd80      	pop	{r7, pc}
 800fcb0:	08019ea8 	.word	0x08019ea8
 800fcb4:	0801a4f4 	.word	0x0801a4f4
 800fcb8:	08019eec 	.word	0x08019eec

0800fcbc <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800fcbc:	b580      	push	{r7, lr}
 800fcbe:	b084      	sub	sp, #16
 800fcc0:	af00      	add	r7, sp, #0
 800fcc2:	6078      	str	r0, [r7, #4]
 800fcc4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800fcc6:	683b      	ldr	r3, [r7, #0]
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	d106      	bne.n	800fcda <tcp_pcb_remove+0x1e>
 800fccc:	4b3e      	ldr	r3, [pc, #248]	; (800fdc8 <tcp_pcb_remove+0x10c>)
 800fcce:	f640 0283 	movw	r2, #2179	; 0x883
 800fcd2:	493e      	ldr	r1, [pc, #248]	; (800fdcc <tcp_pcb_remove+0x110>)
 800fcd4:	483e      	ldr	r0, [pc, #248]	; (800fdd0 <tcp_pcb_remove+0x114>)
 800fcd6:	f007 fd1d 	bl	8017714 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	d106      	bne.n	800fcee <tcp_pcb_remove+0x32>
 800fce0:	4b39      	ldr	r3, [pc, #228]	; (800fdc8 <tcp_pcb_remove+0x10c>)
 800fce2:	f640 0284 	movw	r2, #2180	; 0x884
 800fce6:	493b      	ldr	r1, [pc, #236]	; (800fdd4 <tcp_pcb_remove+0x118>)
 800fce8:	4839      	ldr	r0, [pc, #228]	; (800fdd0 <tcp_pcb_remove+0x114>)
 800fcea:	f007 fd13 	bl	8017714 <iprintf>

  TCP_RMV(pcblist, pcb);
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	681a      	ldr	r2, [r3, #0]
 800fcf2:	683b      	ldr	r3, [r7, #0]
 800fcf4:	429a      	cmp	r2, r3
 800fcf6:	d105      	bne.n	800fd04 <tcp_pcb_remove+0x48>
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	681b      	ldr	r3, [r3, #0]
 800fcfc:	68da      	ldr	r2, [r3, #12]
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	601a      	str	r2, [r3, #0]
 800fd02:	e013      	b.n	800fd2c <tcp_pcb_remove+0x70>
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	681b      	ldr	r3, [r3, #0]
 800fd08:	60fb      	str	r3, [r7, #12]
 800fd0a:	e00c      	b.n	800fd26 <tcp_pcb_remove+0x6a>
 800fd0c:	68fb      	ldr	r3, [r7, #12]
 800fd0e:	68da      	ldr	r2, [r3, #12]
 800fd10:	683b      	ldr	r3, [r7, #0]
 800fd12:	429a      	cmp	r2, r3
 800fd14:	d104      	bne.n	800fd20 <tcp_pcb_remove+0x64>
 800fd16:	683b      	ldr	r3, [r7, #0]
 800fd18:	68da      	ldr	r2, [r3, #12]
 800fd1a:	68fb      	ldr	r3, [r7, #12]
 800fd1c:	60da      	str	r2, [r3, #12]
 800fd1e:	e005      	b.n	800fd2c <tcp_pcb_remove+0x70>
 800fd20:	68fb      	ldr	r3, [r7, #12]
 800fd22:	68db      	ldr	r3, [r3, #12]
 800fd24:	60fb      	str	r3, [r7, #12]
 800fd26:	68fb      	ldr	r3, [r7, #12]
 800fd28:	2b00      	cmp	r3, #0
 800fd2a:	d1ef      	bne.n	800fd0c <tcp_pcb_remove+0x50>
 800fd2c:	683b      	ldr	r3, [r7, #0]
 800fd2e:	2200      	movs	r2, #0
 800fd30:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800fd32:	6838      	ldr	r0, [r7, #0]
 800fd34:	f7ff ff72 	bl	800fc1c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800fd38:	683b      	ldr	r3, [r7, #0]
 800fd3a:	7d1b      	ldrb	r3, [r3, #20]
 800fd3c:	2b0a      	cmp	r3, #10
 800fd3e:	d013      	beq.n	800fd68 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800fd40:	683b      	ldr	r3, [r7, #0]
 800fd42:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800fd44:	2b01      	cmp	r3, #1
 800fd46:	d00f      	beq.n	800fd68 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800fd48:	683b      	ldr	r3, [r7, #0]
 800fd4a:	8b5b      	ldrh	r3, [r3, #26]
 800fd4c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	d009      	beq.n	800fd68 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800fd54:	683b      	ldr	r3, [r7, #0]
 800fd56:	8b5b      	ldrh	r3, [r3, #26]
 800fd58:	f043 0302 	orr.w	r3, r3, #2
 800fd5c:	b29a      	uxth	r2, r3
 800fd5e:	683b      	ldr	r3, [r7, #0]
 800fd60:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800fd62:	6838      	ldr	r0, [r7, #0]
 800fd64:	f003 fbc8 	bl	80134f8 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800fd68:	683b      	ldr	r3, [r7, #0]
 800fd6a:	7d1b      	ldrb	r3, [r3, #20]
 800fd6c:	2b01      	cmp	r3, #1
 800fd6e:	d020      	beq.n	800fdb2 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800fd70:	683b      	ldr	r3, [r7, #0]
 800fd72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	d006      	beq.n	800fd86 <tcp_pcb_remove+0xca>
 800fd78:	4b13      	ldr	r3, [pc, #76]	; (800fdc8 <tcp_pcb_remove+0x10c>)
 800fd7a:	f640 0293 	movw	r2, #2195	; 0x893
 800fd7e:	4916      	ldr	r1, [pc, #88]	; (800fdd8 <tcp_pcb_remove+0x11c>)
 800fd80:	4813      	ldr	r0, [pc, #76]	; (800fdd0 <tcp_pcb_remove+0x114>)
 800fd82:	f007 fcc7 	bl	8017714 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800fd86:	683b      	ldr	r3, [r7, #0]
 800fd88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fd8a:	2b00      	cmp	r3, #0
 800fd8c:	d006      	beq.n	800fd9c <tcp_pcb_remove+0xe0>
 800fd8e:	4b0e      	ldr	r3, [pc, #56]	; (800fdc8 <tcp_pcb_remove+0x10c>)
 800fd90:	f640 0294 	movw	r2, #2196	; 0x894
 800fd94:	4911      	ldr	r1, [pc, #68]	; (800fddc <tcp_pcb_remove+0x120>)
 800fd96:	480e      	ldr	r0, [pc, #56]	; (800fdd0 <tcp_pcb_remove+0x114>)
 800fd98:	f007 fcbc 	bl	8017714 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800fd9c:	683b      	ldr	r3, [r7, #0]
 800fd9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	d006      	beq.n	800fdb2 <tcp_pcb_remove+0xf6>
 800fda4:	4b08      	ldr	r3, [pc, #32]	; (800fdc8 <tcp_pcb_remove+0x10c>)
 800fda6:	f640 0296 	movw	r2, #2198	; 0x896
 800fdaa:	490d      	ldr	r1, [pc, #52]	; (800fde0 <tcp_pcb_remove+0x124>)
 800fdac:	4808      	ldr	r0, [pc, #32]	; (800fdd0 <tcp_pcb_remove+0x114>)
 800fdae:	f007 fcb1 	bl	8017714 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800fdb2:	683b      	ldr	r3, [r7, #0]
 800fdb4:	2200      	movs	r2, #0
 800fdb6:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800fdb8:	683b      	ldr	r3, [r7, #0]
 800fdba:	2200      	movs	r2, #0
 800fdbc:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800fdbe:	bf00      	nop
 800fdc0:	3710      	adds	r7, #16
 800fdc2:	46bd      	mov	sp, r7
 800fdc4:	bd80      	pop	{r7, pc}
 800fdc6:	bf00      	nop
 800fdc8:	08019ea8 	.word	0x08019ea8
 800fdcc:	0801a510 	.word	0x0801a510
 800fdd0:	08019eec 	.word	0x08019eec
 800fdd4:	0801a52c 	.word	0x0801a52c
 800fdd8:	0801a54c 	.word	0x0801a54c
 800fddc:	0801a564 	.word	0x0801a564
 800fde0:	0801a580 	.word	0x0801a580

0800fde4 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800fde4:	b580      	push	{r7, lr}
 800fde6:	b082      	sub	sp, #8
 800fde8:	af00      	add	r7, sp, #0
 800fdea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	d106      	bne.n	800fe00 <tcp_next_iss+0x1c>
 800fdf2:	4b0a      	ldr	r3, [pc, #40]	; (800fe1c <tcp_next_iss+0x38>)
 800fdf4:	f640 02af 	movw	r2, #2223	; 0x8af
 800fdf8:	4909      	ldr	r1, [pc, #36]	; (800fe20 <tcp_next_iss+0x3c>)
 800fdfa:	480a      	ldr	r0, [pc, #40]	; (800fe24 <tcp_next_iss+0x40>)
 800fdfc:	f007 fc8a 	bl	8017714 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800fe00:	4b09      	ldr	r3, [pc, #36]	; (800fe28 <tcp_next_iss+0x44>)
 800fe02:	681a      	ldr	r2, [r3, #0]
 800fe04:	4b09      	ldr	r3, [pc, #36]	; (800fe2c <tcp_next_iss+0x48>)
 800fe06:	681b      	ldr	r3, [r3, #0]
 800fe08:	4413      	add	r3, r2
 800fe0a:	4a07      	ldr	r2, [pc, #28]	; (800fe28 <tcp_next_iss+0x44>)
 800fe0c:	6013      	str	r3, [r2, #0]
  return iss;
 800fe0e:	4b06      	ldr	r3, [pc, #24]	; (800fe28 <tcp_next_iss+0x44>)
 800fe10:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800fe12:	4618      	mov	r0, r3
 800fe14:	3708      	adds	r7, #8
 800fe16:	46bd      	mov	sp, r7
 800fe18:	bd80      	pop	{r7, pc}
 800fe1a:	bf00      	nop
 800fe1c:	08019ea8 	.word	0x08019ea8
 800fe20:	0801a598 	.word	0x0801a598
 800fe24:	08019eec 	.word	0x08019eec
 800fe28:	20000010 	.word	0x20000010
 800fe2c:	20009628 	.word	0x20009628

0800fe30 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800fe30:	b580      	push	{r7, lr}
 800fe32:	b086      	sub	sp, #24
 800fe34:	af00      	add	r7, sp, #0
 800fe36:	4603      	mov	r3, r0
 800fe38:	60b9      	str	r1, [r7, #8]
 800fe3a:	607a      	str	r2, [r7, #4]
 800fe3c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	d106      	bne.n	800fe52 <tcp_eff_send_mss_netif+0x22>
 800fe44:	4b14      	ldr	r3, [pc, #80]	; (800fe98 <tcp_eff_send_mss_netif+0x68>)
 800fe46:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800fe4a:	4914      	ldr	r1, [pc, #80]	; (800fe9c <tcp_eff_send_mss_netif+0x6c>)
 800fe4c:	4814      	ldr	r0, [pc, #80]	; (800fea0 <tcp_eff_send_mss_netif+0x70>)
 800fe4e:	f007 fc61 	bl	8017714 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800fe52:	68bb      	ldr	r3, [r7, #8]
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	d101      	bne.n	800fe5c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800fe58:	89fb      	ldrh	r3, [r7, #14]
 800fe5a:	e019      	b.n	800fe90 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800fe5c:	68bb      	ldr	r3, [r7, #8]
 800fe5e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800fe60:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800fe62:	8afb      	ldrh	r3, [r7, #22]
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	d012      	beq.n	800fe8e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800fe68:	2328      	movs	r3, #40	; 0x28
 800fe6a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800fe6c:	8afa      	ldrh	r2, [r7, #22]
 800fe6e:	8abb      	ldrh	r3, [r7, #20]
 800fe70:	429a      	cmp	r2, r3
 800fe72:	d904      	bls.n	800fe7e <tcp_eff_send_mss_netif+0x4e>
 800fe74:	8afa      	ldrh	r2, [r7, #22]
 800fe76:	8abb      	ldrh	r3, [r7, #20]
 800fe78:	1ad3      	subs	r3, r2, r3
 800fe7a:	b29b      	uxth	r3, r3
 800fe7c:	e000      	b.n	800fe80 <tcp_eff_send_mss_netif+0x50>
 800fe7e:	2300      	movs	r3, #0
 800fe80:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800fe82:	8a7a      	ldrh	r2, [r7, #18]
 800fe84:	89fb      	ldrh	r3, [r7, #14]
 800fe86:	4293      	cmp	r3, r2
 800fe88:	bf28      	it	cs
 800fe8a:	4613      	movcs	r3, r2
 800fe8c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800fe8e:	89fb      	ldrh	r3, [r7, #14]
}
 800fe90:	4618      	mov	r0, r3
 800fe92:	3718      	adds	r7, #24
 800fe94:	46bd      	mov	sp, r7
 800fe96:	bd80      	pop	{r7, pc}
 800fe98:	08019ea8 	.word	0x08019ea8
 800fe9c:	0801a5b4 	.word	0x0801a5b4
 800fea0:	08019eec 	.word	0x08019eec

0800fea4 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800fea4:	b580      	push	{r7, lr}
 800fea6:	b084      	sub	sp, #16
 800fea8:	af00      	add	r7, sp, #0
 800feaa:	6078      	str	r0, [r7, #4]
 800feac:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800feae:	683b      	ldr	r3, [r7, #0]
 800feb0:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	d119      	bne.n	800feec <tcp_netif_ip_addr_changed_pcblist+0x48>
 800feb8:	4b10      	ldr	r3, [pc, #64]	; (800fefc <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800feba:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800febe:	4910      	ldr	r1, [pc, #64]	; (800ff00 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800fec0:	4810      	ldr	r0, [pc, #64]	; (800ff04 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800fec2:	f007 fc27 	bl	8017714 <iprintf>

  while (pcb != NULL) {
 800fec6:	e011      	b.n	800feec <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800fec8:	68fb      	ldr	r3, [r7, #12]
 800feca:	681a      	ldr	r2, [r3, #0]
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	681b      	ldr	r3, [r3, #0]
 800fed0:	429a      	cmp	r2, r3
 800fed2:	d108      	bne.n	800fee6 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800fed4:	68fb      	ldr	r3, [r7, #12]
 800fed6:	68db      	ldr	r3, [r3, #12]
 800fed8:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800feda:	68f8      	ldr	r0, [r7, #12]
 800fedc:	f7fe fdba 	bl	800ea54 <tcp_abort>
      pcb = next;
 800fee0:	68bb      	ldr	r3, [r7, #8]
 800fee2:	60fb      	str	r3, [r7, #12]
 800fee4:	e002      	b.n	800feec <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800fee6:	68fb      	ldr	r3, [r7, #12]
 800fee8:	68db      	ldr	r3, [r3, #12]
 800feea:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800feec:	68fb      	ldr	r3, [r7, #12]
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d1ea      	bne.n	800fec8 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800fef2:	bf00      	nop
 800fef4:	3710      	adds	r7, #16
 800fef6:	46bd      	mov	sp, r7
 800fef8:	bd80      	pop	{r7, pc}
 800fefa:	bf00      	nop
 800fefc:	08019ea8 	.word	0x08019ea8
 800ff00:	0801a5dc 	.word	0x0801a5dc
 800ff04:	08019eec 	.word	0x08019eec

0800ff08 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800ff08:	b580      	push	{r7, lr}
 800ff0a:	b084      	sub	sp, #16
 800ff0c:	af00      	add	r7, sp, #0
 800ff0e:	6078      	str	r0, [r7, #4]
 800ff10:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	d02a      	beq.n	800ff6e <tcp_netif_ip_addr_changed+0x66>
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	681b      	ldr	r3, [r3, #0]
 800ff1c:	2b00      	cmp	r3, #0
 800ff1e:	d026      	beq.n	800ff6e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800ff20:	4b15      	ldr	r3, [pc, #84]	; (800ff78 <tcp_netif_ip_addr_changed+0x70>)
 800ff22:	681b      	ldr	r3, [r3, #0]
 800ff24:	4619      	mov	r1, r3
 800ff26:	6878      	ldr	r0, [r7, #4]
 800ff28:	f7ff ffbc 	bl	800fea4 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800ff2c:	4b13      	ldr	r3, [pc, #76]	; (800ff7c <tcp_netif_ip_addr_changed+0x74>)
 800ff2e:	681b      	ldr	r3, [r3, #0]
 800ff30:	4619      	mov	r1, r3
 800ff32:	6878      	ldr	r0, [r7, #4]
 800ff34:	f7ff ffb6 	bl	800fea4 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800ff38:	683b      	ldr	r3, [r7, #0]
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	d017      	beq.n	800ff6e <tcp_netif_ip_addr_changed+0x66>
 800ff3e:	683b      	ldr	r3, [r7, #0]
 800ff40:	681b      	ldr	r3, [r3, #0]
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	d013      	beq.n	800ff6e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ff46:	4b0e      	ldr	r3, [pc, #56]	; (800ff80 <tcp_netif_ip_addr_changed+0x78>)
 800ff48:	681b      	ldr	r3, [r3, #0]
 800ff4a:	60fb      	str	r3, [r7, #12]
 800ff4c:	e00c      	b.n	800ff68 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800ff4e:	68fb      	ldr	r3, [r7, #12]
 800ff50:	681a      	ldr	r2, [r3, #0]
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	681b      	ldr	r3, [r3, #0]
 800ff56:	429a      	cmp	r2, r3
 800ff58:	d103      	bne.n	800ff62 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800ff5a:	683b      	ldr	r3, [r7, #0]
 800ff5c:	681a      	ldr	r2, [r3, #0]
 800ff5e:	68fb      	ldr	r3, [r7, #12]
 800ff60:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ff62:	68fb      	ldr	r3, [r7, #12]
 800ff64:	68db      	ldr	r3, [r3, #12]
 800ff66:	60fb      	str	r3, [r7, #12]
 800ff68:	68fb      	ldr	r3, [r7, #12]
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d1ef      	bne.n	800ff4e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800ff6e:	bf00      	nop
 800ff70:	3710      	adds	r7, #16
 800ff72:	46bd      	mov	sp, r7
 800ff74:	bd80      	pop	{r7, pc}
 800ff76:	bf00      	nop
 800ff78:	20009624 	.word	0x20009624
 800ff7c:	20009630 	.word	0x20009630
 800ff80:	2000962c 	.word	0x2000962c

0800ff84 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800ff84:	b580      	push	{r7, lr}
 800ff86:	b082      	sub	sp, #8
 800ff88:	af00      	add	r7, sp, #0
 800ff8a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	d007      	beq.n	800ffa4 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ff98:	4618      	mov	r0, r3
 800ff9a:	f7ff fb8f 	bl	800f6bc <tcp_segs_free>
    pcb->ooseq = NULL;
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	2200      	movs	r2, #0
 800ffa2:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800ffa4:	bf00      	nop
 800ffa6:	3708      	adds	r7, #8
 800ffa8:	46bd      	mov	sp, r7
 800ffaa:	bd80      	pop	{r7, pc}

0800ffac <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800ffac:	b590      	push	{r4, r7, lr}
 800ffae:	b08d      	sub	sp, #52	; 0x34
 800ffb0:	af04      	add	r7, sp, #16
 800ffb2:	6078      	str	r0, [r7, #4]
 800ffb4:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	d105      	bne.n	800ffc8 <tcp_input+0x1c>
 800ffbc:	4b9b      	ldr	r3, [pc, #620]	; (801022c <tcp_input+0x280>)
 800ffbe:	2283      	movs	r2, #131	; 0x83
 800ffc0:	499b      	ldr	r1, [pc, #620]	; (8010230 <tcp_input+0x284>)
 800ffc2:	489c      	ldr	r0, [pc, #624]	; (8010234 <tcp_input+0x288>)
 800ffc4:	f007 fba6 	bl	8017714 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	685b      	ldr	r3, [r3, #4]
 800ffcc:	4a9a      	ldr	r2, [pc, #616]	; (8010238 <tcp_input+0x28c>)
 800ffce:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	895b      	ldrh	r3, [r3, #10]
 800ffd4:	2b13      	cmp	r3, #19
 800ffd6:	f240 83c2 	bls.w	801075e <tcp_input+0x7b2>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800ffda:	4b98      	ldr	r3, [pc, #608]	; (801023c <tcp_input+0x290>)
 800ffdc:	695a      	ldr	r2, [r3, #20]
 800ffde:	4b97      	ldr	r3, [pc, #604]	; (801023c <tcp_input+0x290>)
 800ffe0:	681b      	ldr	r3, [r3, #0]
 800ffe2:	4619      	mov	r1, r3
 800ffe4:	4610      	mov	r0, r2
 800ffe6:	f7fb f9ad 	bl	800b344 <ip4_addr_isbroadcast_u32>
 800ffea:	4603      	mov	r3, r0
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	f040 83bb 	bne.w	8010768 <tcp_input+0x7bc>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800fff2:	4b92      	ldr	r3, [pc, #584]	; (801023c <tcp_input+0x290>)
 800fff4:	695b      	ldr	r3, [r3, #20]
 800fff6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800fffa:	2be0      	cmp	r3, #224	; 0xe0
 800fffc:	f000 83b4 	beq.w	8010768 <tcp_input+0x7bc>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8010000:	4b8d      	ldr	r3, [pc, #564]	; (8010238 <tcp_input+0x28c>)
 8010002:	681b      	ldr	r3, [r3, #0]
 8010004:	899b      	ldrh	r3, [r3, #12]
 8010006:	b29b      	uxth	r3, r3
 8010008:	4618      	mov	r0, r3
 801000a:	f7f8 fe07 	bl	8008c1c <lwip_htons>
 801000e:	4603      	mov	r3, r0
 8010010:	0b1b      	lsrs	r3, r3, #12
 8010012:	b29b      	uxth	r3, r3
 8010014:	b2db      	uxtb	r3, r3
 8010016:	009b      	lsls	r3, r3, #2
 8010018:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 801001a:	7cbb      	ldrb	r3, [r7, #18]
 801001c:	2b13      	cmp	r3, #19
 801001e:	f240 83a3 	bls.w	8010768 <tcp_input+0x7bc>
 8010022:	7cbb      	ldrb	r3, [r7, #18]
 8010024:	b29a      	uxth	r2, r3
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	891b      	ldrh	r3, [r3, #8]
 801002a:	429a      	cmp	r2, r3
 801002c:	f200 839c 	bhi.w	8010768 <tcp_input+0x7bc>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8010030:	7cbb      	ldrb	r3, [r7, #18]
 8010032:	b29b      	uxth	r3, r3
 8010034:	3b14      	subs	r3, #20
 8010036:	b29a      	uxth	r2, r3
 8010038:	4b81      	ldr	r3, [pc, #516]	; (8010240 <tcp_input+0x294>)
 801003a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 801003c:	4b81      	ldr	r3, [pc, #516]	; (8010244 <tcp_input+0x298>)
 801003e:	2200      	movs	r2, #0
 8010040:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	895a      	ldrh	r2, [r3, #10]
 8010046:	7cbb      	ldrb	r3, [r7, #18]
 8010048:	b29b      	uxth	r3, r3
 801004a:	429a      	cmp	r2, r3
 801004c:	d309      	bcc.n	8010062 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 801004e:	4b7c      	ldr	r3, [pc, #496]	; (8010240 <tcp_input+0x294>)
 8010050:	881a      	ldrh	r2, [r3, #0]
 8010052:	4b7d      	ldr	r3, [pc, #500]	; (8010248 <tcp_input+0x29c>)
 8010054:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8010056:	7cbb      	ldrb	r3, [r7, #18]
 8010058:	4619      	mov	r1, r3
 801005a:	6878      	ldr	r0, [r7, #4]
 801005c:	f7fd fc86 	bl	800d96c <pbuf_remove_header>
 8010060:	e04e      	b.n	8010100 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	681b      	ldr	r3, [r3, #0]
 8010066:	2b00      	cmp	r3, #0
 8010068:	d105      	bne.n	8010076 <tcp_input+0xca>
 801006a:	4b70      	ldr	r3, [pc, #448]	; (801022c <tcp_input+0x280>)
 801006c:	22c2      	movs	r2, #194	; 0xc2
 801006e:	4977      	ldr	r1, [pc, #476]	; (801024c <tcp_input+0x2a0>)
 8010070:	4870      	ldr	r0, [pc, #448]	; (8010234 <tcp_input+0x288>)
 8010072:	f007 fb4f 	bl	8017714 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8010076:	2114      	movs	r1, #20
 8010078:	6878      	ldr	r0, [r7, #4]
 801007a:	f7fd fc77 	bl	800d96c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	895a      	ldrh	r2, [r3, #10]
 8010082:	4b71      	ldr	r3, [pc, #452]	; (8010248 <tcp_input+0x29c>)
 8010084:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8010086:	4b6e      	ldr	r3, [pc, #440]	; (8010240 <tcp_input+0x294>)
 8010088:	881a      	ldrh	r2, [r3, #0]
 801008a:	4b6f      	ldr	r3, [pc, #444]	; (8010248 <tcp_input+0x29c>)
 801008c:	881b      	ldrh	r3, [r3, #0]
 801008e:	1ad3      	subs	r3, r2, r3
 8010090:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8010092:	4b6d      	ldr	r3, [pc, #436]	; (8010248 <tcp_input+0x29c>)
 8010094:	881b      	ldrh	r3, [r3, #0]
 8010096:	4619      	mov	r1, r3
 8010098:	6878      	ldr	r0, [r7, #4]
 801009a:	f7fd fc67 	bl	800d96c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	681b      	ldr	r3, [r3, #0]
 80100a2:	895b      	ldrh	r3, [r3, #10]
 80100a4:	8a3a      	ldrh	r2, [r7, #16]
 80100a6:	429a      	cmp	r2, r3
 80100a8:	f200 835b 	bhi.w	8010762 <tcp_input+0x7b6>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	681b      	ldr	r3, [r3, #0]
 80100b0:	685b      	ldr	r3, [r3, #4]
 80100b2:	4a64      	ldr	r2, [pc, #400]	; (8010244 <tcp_input+0x298>)
 80100b4:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	681b      	ldr	r3, [r3, #0]
 80100ba:	8a3a      	ldrh	r2, [r7, #16]
 80100bc:	4611      	mov	r1, r2
 80100be:	4618      	mov	r0, r3
 80100c0:	f7fd fc54 	bl	800d96c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	891a      	ldrh	r2, [r3, #8]
 80100c8:	8a3b      	ldrh	r3, [r7, #16]
 80100ca:	1ad3      	subs	r3, r2, r3
 80100cc:	b29a      	uxth	r2, r3
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	895b      	ldrh	r3, [r3, #10]
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	d005      	beq.n	80100e6 <tcp_input+0x13a>
 80100da:	4b54      	ldr	r3, [pc, #336]	; (801022c <tcp_input+0x280>)
 80100dc:	22df      	movs	r2, #223	; 0xdf
 80100de:	495c      	ldr	r1, [pc, #368]	; (8010250 <tcp_input+0x2a4>)
 80100e0:	4854      	ldr	r0, [pc, #336]	; (8010234 <tcp_input+0x288>)
 80100e2:	f007 fb17 	bl	8017714 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	891a      	ldrh	r2, [r3, #8]
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	681b      	ldr	r3, [r3, #0]
 80100ee:	891b      	ldrh	r3, [r3, #8]
 80100f0:	429a      	cmp	r2, r3
 80100f2:	d005      	beq.n	8010100 <tcp_input+0x154>
 80100f4:	4b4d      	ldr	r3, [pc, #308]	; (801022c <tcp_input+0x280>)
 80100f6:	22e0      	movs	r2, #224	; 0xe0
 80100f8:	4956      	ldr	r1, [pc, #344]	; (8010254 <tcp_input+0x2a8>)
 80100fa:	484e      	ldr	r0, [pc, #312]	; (8010234 <tcp_input+0x288>)
 80100fc:	f007 fb0a 	bl	8017714 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8010100:	4b4d      	ldr	r3, [pc, #308]	; (8010238 <tcp_input+0x28c>)
 8010102:	681c      	ldr	r4, [r3, #0]
 8010104:	4b4c      	ldr	r3, [pc, #304]	; (8010238 <tcp_input+0x28c>)
 8010106:	681b      	ldr	r3, [r3, #0]
 8010108:	881b      	ldrh	r3, [r3, #0]
 801010a:	b29b      	uxth	r3, r3
 801010c:	4618      	mov	r0, r3
 801010e:	f7f8 fd85 	bl	8008c1c <lwip_htons>
 8010112:	4603      	mov	r3, r0
 8010114:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8010116:	4b48      	ldr	r3, [pc, #288]	; (8010238 <tcp_input+0x28c>)
 8010118:	681c      	ldr	r4, [r3, #0]
 801011a:	4b47      	ldr	r3, [pc, #284]	; (8010238 <tcp_input+0x28c>)
 801011c:	681b      	ldr	r3, [r3, #0]
 801011e:	885b      	ldrh	r3, [r3, #2]
 8010120:	b29b      	uxth	r3, r3
 8010122:	4618      	mov	r0, r3
 8010124:	f7f8 fd7a 	bl	8008c1c <lwip_htons>
 8010128:	4603      	mov	r3, r0
 801012a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 801012c:	4b42      	ldr	r3, [pc, #264]	; (8010238 <tcp_input+0x28c>)
 801012e:	681c      	ldr	r4, [r3, #0]
 8010130:	4b41      	ldr	r3, [pc, #260]	; (8010238 <tcp_input+0x28c>)
 8010132:	681b      	ldr	r3, [r3, #0]
 8010134:	685b      	ldr	r3, [r3, #4]
 8010136:	4618      	mov	r0, r3
 8010138:	f7f8 fd85 	bl	8008c46 <lwip_htonl>
 801013c:	4603      	mov	r3, r0
 801013e:	6063      	str	r3, [r4, #4]
 8010140:	6863      	ldr	r3, [r4, #4]
 8010142:	4a45      	ldr	r2, [pc, #276]	; (8010258 <tcp_input+0x2ac>)
 8010144:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8010146:	4b3c      	ldr	r3, [pc, #240]	; (8010238 <tcp_input+0x28c>)
 8010148:	681c      	ldr	r4, [r3, #0]
 801014a:	4b3b      	ldr	r3, [pc, #236]	; (8010238 <tcp_input+0x28c>)
 801014c:	681b      	ldr	r3, [r3, #0]
 801014e:	689b      	ldr	r3, [r3, #8]
 8010150:	4618      	mov	r0, r3
 8010152:	f7f8 fd78 	bl	8008c46 <lwip_htonl>
 8010156:	4603      	mov	r3, r0
 8010158:	60a3      	str	r3, [r4, #8]
 801015a:	68a3      	ldr	r3, [r4, #8]
 801015c:	4a3f      	ldr	r2, [pc, #252]	; (801025c <tcp_input+0x2b0>)
 801015e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8010160:	4b35      	ldr	r3, [pc, #212]	; (8010238 <tcp_input+0x28c>)
 8010162:	681c      	ldr	r4, [r3, #0]
 8010164:	4b34      	ldr	r3, [pc, #208]	; (8010238 <tcp_input+0x28c>)
 8010166:	681b      	ldr	r3, [r3, #0]
 8010168:	89db      	ldrh	r3, [r3, #14]
 801016a:	b29b      	uxth	r3, r3
 801016c:	4618      	mov	r0, r3
 801016e:	f7f8 fd55 	bl	8008c1c <lwip_htons>
 8010172:	4603      	mov	r3, r0
 8010174:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8010176:	4b30      	ldr	r3, [pc, #192]	; (8010238 <tcp_input+0x28c>)
 8010178:	681b      	ldr	r3, [r3, #0]
 801017a:	899b      	ldrh	r3, [r3, #12]
 801017c:	b29b      	uxth	r3, r3
 801017e:	4618      	mov	r0, r3
 8010180:	f7f8 fd4c 	bl	8008c1c <lwip_htons>
 8010184:	4603      	mov	r3, r0
 8010186:	b2db      	uxtb	r3, r3
 8010188:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801018c:	b2da      	uxtb	r2, r3
 801018e:	4b34      	ldr	r3, [pc, #208]	; (8010260 <tcp_input+0x2b4>)
 8010190:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	891a      	ldrh	r2, [r3, #8]
 8010196:	4b33      	ldr	r3, [pc, #204]	; (8010264 <tcp_input+0x2b8>)
 8010198:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 801019a:	4b31      	ldr	r3, [pc, #196]	; (8010260 <tcp_input+0x2b4>)
 801019c:	781b      	ldrb	r3, [r3, #0]
 801019e:	f003 0303 	and.w	r3, r3, #3
 80101a2:	2b00      	cmp	r3, #0
 80101a4:	d00c      	beq.n	80101c0 <tcp_input+0x214>
    tcplen++;
 80101a6:	4b2f      	ldr	r3, [pc, #188]	; (8010264 <tcp_input+0x2b8>)
 80101a8:	881b      	ldrh	r3, [r3, #0]
 80101aa:	3301      	adds	r3, #1
 80101ac:	b29a      	uxth	r2, r3
 80101ae:	4b2d      	ldr	r3, [pc, #180]	; (8010264 <tcp_input+0x2b8>)
 80101b0:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	891a      	ldrh	r2, [r3, #8]
 80101b6:	4b2b      	ldr	r3, [pc, #172]	; (8010264 <tcp_input+0x2b8>)
 80101b8:	881b      	ldrh	r3, [r3, #0]
 80101ba:	429a      	cmp	r2, r3
 80101bc:	f200 82d3 	bhi.w	8010766 <tcp_input+0x7ba>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80101c0:	2300      	movs	r3, #0
 80101c2:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80101c4:	4b28      	ldr	r3, [pc, #160]	; (8010268 <tcp_input+0x2bc>)
 80101c6:	681b      	ldr	r3, [r3, #0]
 80101c8:	61fb      	str	r3, [r7, #28]
 80101ca:	e09d      	b.n	8010308 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80101cc:	69fb      	ldr	r3, [r7, #28]
 80101ce:	7d1b      	ldrb	r3, [r3, #20]
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	d105      	bne.n	80101e0 <tcp_input+0x234>
 80101d4:	4b15      	ldr	r3, [pc, #84]	; (801022c <tcp_input+0x280>)
 80101d6:	22fb      	movs	r2, #251	; 0xfb
 80101d8:	4924      	ldr	r1, [pc, #144]	; (801026c <tcp_input+0x2c0>)
 80101da:	4816      	ldr	r0, [pc, #88]	; (8010234 <tcp_input+0x288>)
 80101dc:	f007 fa9a 	bl	8017714 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80101e0:	69fb      	ldr	r3, [r7, #28]
 80101e2:	7d1b      	ldrb	r3, [r3, #20]
 80101e4:	2b0a      	cmp	r3, #10
 80101e6:	d105      	bne.n	80101f4 <tcp_input+0x248>
 80101e8:	4b10      	ldr	r3, [pc, #64]	; (801022c <tcp_input+0x280>)
 80101ea:	22fc      	movs	r2, #252	; 0xfc
 80101ec:	4920      	ldr	r1, [pc, #128]	; (8010270 <tcp_input+0x2c4>)
 80101ee:	4811      	ldr	r0, [pc, #68]	; (8010234 <tcp_input+0x288>)
 80101f0:	f007 fa90 	bl	8017714 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80101f4:	69fb      	ldr	r3, [r7, #28]
 80101f6:	7d1b      	ldrb	r3, [r3, #20]
 80101f8:	2b01      	cmp	r3, #1
 80101fa:	d105      	bne.n	8010208 <tcp_input+0x25c>
 80101fc:	4b0b      	ldr	r3, [pc, #44]	; (801022c <tcp_input+0x280>)
 80101fe:	22fd      	movs	r2, #253	; 0xfd
 8010200:	491c      	ldr	r1, [pc, #112]	; (8010274 <tcp_input+0x2c8>)
 8010202:	480c      	ldr	r0, [pc, #48]	; (8010234 <tcp_input+0x288>)
 8010204:	f007 fa86 	bl	8017714 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010208:	69fb      	ldr	r3, [r7, #28]
 801020a:	7a1b      	ldrb	r3, [r3, #8]
 801020c:	2b00      	cmp	r3, #0
 801020e:	d033      	beq.n	8010278 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010210:	69fb      	ldr	r3, [r7, #28]
 8010212:	7a1a      	ldrb	r2, [r3, #8]
 8010214:	4b09      	ldr	r3, [pc, #36]	; (801023c <tcp_input+0x290>)
 8010216:	685b      	ldr	r3, [r3, #4]
 8010218:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801021c:	3301      	adds	r3, #1
 801021e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010220:	429a      	cmp	r2, r3
 8010222:	d029      	beq.n	8010278 <tcp_input+0x2cc>
      prev = pcb;
 8010224:	69fb      	ldr	r3, [r7, #28]
 8010226:	61bb      	str	r3, [r7, #24]
      continue;
 8010228:	e06b      	b.n	8010302 <tcp_input+0x356>
 801022a:	bf00      	nop
 801022c:	0801a610 	.word	0x0801a610
 8010230:	0801a644 	.word	0x0801a644
 8010234:	0801a65c 	.word	0x0801a65c
 8010238:	20004554 	.word	0x20004554
 801023c:	20004814 	.word	0x20004814
 8010240:	20004558 	.word	0x20004558
 8010244:	2000455c 	.word	0x2000455c
 8010248:	2000455a 	.word	0x2000455a
 801024c:	0801a684 	.word	0x0801a684
 8010250:	0801a694 	.word	0x0801a694
 8010254:	0801a6a0 	.word	0x0801a6a0
 8010258:	20004564 	.word	0x20004564
 801025c:	20004568 	.word	0x20004568
 8010260:	20004570 	.word	0x20004570
 8010264:	2000456e 	.word	0x2000456e
 8010268:	20009624 	.word	0x20009624
 801026c:	0801a6c0 	.word	0x0801a6c0
 8010270:	0801a6e8 	.word	0x0801a6e8
 8010274:	0801a714 	.word	0x0801a714
    }

    if (pcb->remote_port == tcphdr->src &&
 8010278:	69fb      	ldr	r3, [r7, #28]
 801027a:	8b1a      	ldrh	r2, [r3, #24]
 801027c:	4b94      	ldr	r3, [pc, #592]	; (80104d0 <tcp_input+0x524>)
 801027e:	681b      	ldr	r3, [r3, #0]
 8010280:	881b      	ldrh	r3, [r3, #0]
 8010282:	b29b      	uxth	r3, r3
 8010284:	429a      	cmp	r2, r3
 8010286:	d13a      	bne.n	80102fe <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8010288:	69fb      	ldr	r3, [r7, #28]
 801028a:	8ada      	ldrh	r2, [r3, #22]
 801028c:	4b90      	ldr	r3, [pc, #576]	; (80104d0 <tcp_input+0x524>)
 801028e:	681b      	ldr	r3, [r3, #0]
 8010290:	885b      	ldrh	r3, [r3, #2]
 8010292:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8010294:	429a      	cmp	r2, r3
 8010296:	d132      	bne.n	80102fe <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010298:	69fb      	ldr	r3, [r7, #28]
 801029a:	685a      	ldr	r2, [r3, #4]
 801029c:	4b8d      	ldr	r3, [pc, #564]	; (80104d4 <tcp_input+0x528>)
 801029e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 80102a0:	429a      	cmp	r2, r3
 80102a2:	d12c      	bne.n	80102fe <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80102a4:	69fb      	ldr	r3, [r7, #28]
 80102a6:	681a      	ldr	r2, [r3, #0]
 80102a8:	4b8a      	ldr	r3, [pc, #552]	; (80104d4 <tcp_input+0x528>)
 80102aa:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80102ac:	429a      	cmp	r2, r3
 80102ae:	d126      	bne.n	80102fe <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80102b0:	69fb      	ldr	r3, [r7, #28]
 80102b2:	68da      	ldr	r2, [r3, #12]
 80102b4:	69fb      	ldr	r3, [r7, #28]
 80102b6:	429a      	cmp	r2, r3
 80102b8:	d106      	bne.n	80102c8 <tcp_input+0x31c>
 80102ba:	4b87      	ldr	r3, [pc, #540]	; (80104d8 <tcp_input+0x52c>)
 80102bc:	f240 120d 	movw	r2, #269	; 0x10d
 80102c0:	4986      	ldr	r1, [pc, #536]	; (80104dc <tcp_input+0x530>)
 80102c2:	4887      	ldr	r0, [pc, #540]	; (80104e0 <tcp_input+0x534>)
 80102c4:	f007 fa26 	bl	8017714 <iprintf>
      if (prev != NULL) {
 80102c8:	69bb      	ldr	r3, [r7, #24]
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	d00a      	beq.n	80102e4 <tcp_input+0x338>
        prev->next = pcb->next;
 80102ce:	69fb      	ldr	r3, [r7, #28]
 80102d0:	68da      	ldr	r2, [r3, #12]
 80102d2:	69bb      	ldr	r3, [r7, #24]
 80102d4:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 80102d6:	4b83      	ldr	r3, [pc, #524]	; (80104e4 <tcp_input+0x538>)
 80102d8:	681a      	ldr	r2, [r3, #0]
 80102da:	69fb      	ldr	r3, [r7, #28]
 80102dc:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 80102de:	4a81      	ldr	r2, [pc, #516]	; (80104e4 <tcp_input+0x538>)
 80102e0:	69fb      	ldr	r3, [r7, #28]
 80102e2:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80102e4:	69fb      	ldr	r3, [r7, #28]
 80102e6:	68da      	ldr	r2, [r3, #12]
 80102e8:	69fb      	ldr	r3, [r7, #28]
 80102ea:	429a      	cmp	r2, r3
 80102ec:	d111      	bne.n	8010312 <tcp_input+0x366>
 80102ee:	4b7a      	ldr	r3, [pc, #488]	; (80104d8 <tcp_input+0x52c>)
 80102f0:	f240 1215 	movw	r2, #277	; 0x115
 80102f4:	497c      	ldr	r1, [pc, #496]	; (80104e8 <tcp_input+0x53c>)
 80102f6:	487a      	ldr	r0, [pc, #488]	; (80104e0 <tcp_input+0x534>)
 80102f8:	f007 fa0c 	bl	8017714 <iprintf>
      break;
 80102fc:	e009      	b.n	8010312 <tcp_input+0x366>
    }
    prev = pcb;
 80102fe:	69fb      	ldr	r3, [r7, #28]
 8010300:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010302:	69fb      	ldr	r3, [r7, #28]
 8010304:	68db      	ldr	r3, [r3, #12]
 8010306:	61fb      	str	r3, [r7, #28]
 8010308:	69fb      	ldr	r3, [r7, #28]
 801030a:	2b00      	cmp	r3, #0
 801030c:	f47f af5e 	bne.w	80101cc <tcp_input+0x220>
 8010310:	e000      	b.n	8010314 <tcp_input+0x368>
      break;
 8010312:	bf00      	nop
  }

  if (pcb == NULL) {
 8010314:	69fb      	ldr	r3, [r7, #28]
 8010316:	2b00      	cmp	r3, #0
 8010318:	f040 8095 	bne.w	8010446 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801031c:	4b73      	ldr	r3, [pc, #460]	; (80104ec <tcp_input+0x540>)
 801031e:	681b      	ldr	r3, [r3, #0]
 8010320:	61fb      	str	r3, [r7, #28]
 8010322:	e03f      	b.n	80103a4 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8010324:	69fb      	ldr	r3, [r7, #28]
 8010326:	7d1b      	ldrb	r3, [r3, #20]
 8010328:	2b0a      	cmp	r3, #10
 801032a:	d006      	beq.n	801033a <tcp_input+0x38e>
 801032c:	4b6a      	ldr	r3, [pc, #424]	; (80104d8 <tcp_input+0x52c>)
 801032e:	f240 121f 	movw	r2, #287	; 0x11f
 8010332:	496f      	ldr	r1, [pc, #444]	; (80104f0 <tcp_input+0x544>)
 8010334:	486a      	ldr	r0, [pc, #424]	; (80104e0 <tcp_input+0x534>)
 8010336:	f007 f9ed 	bl	8017714 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801033a:	69fb      	ldr	r3, [r7, #28]
 801033c:	7a1b      	ldrb	r3, [r3, #8]
 801033e:	2b00      	cmp	r3, #0
 8010340:	d009      	beq.n	8010356 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010342:	69fb      	ldr	r3, [r7, #28]
 8010344:	7a1a      	ldrb	r2, [r3, #8]
 8010346:	4b63      	ldr	r3, [pc, #396]	; (80104d4 <tcp_input+0x528>)
 8010348:	685b      	ldr	r3, [r3, #4]
 801034a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801034e:	3301      	adds	r3, #1
 8010350:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010352:	429a      	cmp	r2, r3
 8010354:	d122      	bne.n	801039c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8010356:	69fb      	ldr	r3, [r7, #28]
 8010358:	8b1a      	ldrh	r2, [r3, #24]
 801035a:	4b5d      	ldr	r3, [pc, #372]	; (80104d0 <tcp_input+0x524>)
 801035c:	681b      	ldr	r3, [r3, #0]
 801035e:	881b      	ldrh	r3, [r3, #0]
 8010360:	b29b      	uxth	r3, r3
 8010362:	429a      	cmp	r2, r3
 8010364:	d11b      	bne.n	801039e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8010366:	69fb      	ldr	r3, [r7, #28]
 8010368:	8ada      	ldrh	r2, [r3, #22]
 801036a:	4b59      	ldr	r3, [pc, #356]	; (80104d0 <tcp_input+0x524>)
 801036c:	681b      	ldr	r3, [r3, #0]
 801036e:	885b      	ldrh	r3, [r3, #2]
 8010370:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8010372:	429a      	cmp	r2, r3
 8010374:	d113      	bne.n	801039e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010376:	69fb      	ldr	r3, [r7, #28]
 8010378:	685a      	ldr	r2, [r3, #4]
 801037a:	4b56      	ldr	r3, [pc, #344]	; (80104d4 <tcp_input+0x528>)
 801037c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 801037e:	429a      	cmp	r2, r3
 8010380:	d10d      	bne.n	801039e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010382:	69fb      	ldr	r3, [r7, #28]
 8010384:	681a      	ldr	r2, [r3, #0]
 8010386:	4b53      	ldr	r3, [pc, #332]	; (80104d4 <tcp_input+0x528>)
 8010388:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801038a:	429a      	cmp	r2, r3
 801038c:	d107      	bne.n	801039e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 801038e:	69f8      	ldr	r0, [r7, #28]
 8010390:	f000 fb4e 	bl	8010a30 <tcp_timewait_input>
        }
        pbuf_free(p);
 8010394:	6878      	ldr	r0, [r7, #4]
 8010396:	f7fd fba1 	bl	800dadc <pbuf_free>
        return;
 801039a:	e1ea      	b.n	8010772 <tcp_input+0x7c6>
        continue;
 801039c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801039e:	69fb      	ldr	r3, [r7, #28]
 80103a0:	68db      	ldr	r3, [r3, #12]
 80103a2:	61fb      	str	r3, [r7, #28]
 80103a4:	69fb      	ldr	r3, [r7, #28]
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	d1bc      	bne.n	8010324 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80103aa:	2300      	movs	r3, #0
 80103ac:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80103ae:	4b51      	ldr	r3, [pc, #324]	; (80104f4 <tcp_input+0x548>)
 80103b0:	681b      	ldr	r3, [r3, #0]
 80103b2:	617b      	str	r3, [r7, #20]
 80103b4:	e02a      	b.n	801040c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80103b6:	697b      	ldr	r3, [r7, #20]
 80103b8:	7a1b      	ldrb	r3, [r3, #8]
 80103ba:	2b00      	cmp	r3, #0
 80103bc:	d00c      	beq.n	80103d8 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80103be:	697b      	ldr	r3, [r7, #20]
 80103c0:	7a1a      	ldrb	r2, [r3, #8]
 80103c2:	4b44      	ldr	r3, [pc, #272]	; (80104d4 <tcp_input+0x528>)
 80103c4:	685b      	ldr	r3, [r3, #4]
 80103c6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80103ca:	3301      	adds	r3, #1
 80103cc:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80103ce:	429a      	cmp	r2, r3
 80103d0:	d002      	beq.n	80103d8 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 80103d2:	697b      	ldr	r3, [r7, #20]
 80103d4:	61bb      	str	r3, [r7, #24]
        continue;
 80103d6:	e016      	b.n	8010406 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 80103d8:	697b      	ldr	r3, [r7, #20]
 80103da:	8ada      	ldrh	r2, [r3, #22]
 80103dc:	4b3c      	ldr	r3, [pc, #240]	; (80104d0 <tcp_input+0x524>)
 80103de:	681b      	ldr	r3, [r3, #0]
 80103e0:	885b      	ldrh	r3, [r3, #2]
 80103e2:	b29b      	uxth	r3, r3
 80103e4:	429a      	cmp	r2, r3
 80103e6:	d10c      	bne.n	8010402 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80103e8:	697b      	ldr	r3, [r7, #20]
 80103ea:	681a      	ldr	r2, [r3, #0]
 80103ec:	4b39      	ldr	r3, [pc, #228]	; (80104d4 <tcp_input+0x528>)
 80103ee:	695b      	ldr	r3, [r3, #20]
 80103f0:	429a      	cmp	r2, r3
 80103f2:	d00f      	beq.n	8010414 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80103f4:	697b      	ldr	r3, [r7, #20]
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	d00d      	beq.n	8010416 <tcp_input+0x46a>
 80103fa:	697b      	ldr	r3, [r7, #20]
 80103fc:	681b      	ldr	r3, [r3, #0]
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d009      	beq.n	8010416 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8010402:	697b      	ldr	r3, [r7, #20]
 8010404:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010406:	697b      	ldr	r3, [r7, #20]
 8010408:	68db      	ldr	r3, [r3, #12]
 801040a:	617b      	str	r3, [r7, #20]
 801040c:	697b      	ldr	r3, [r7, #20]
 801040e:	2b00      	cmp	r3, #0
 8010410:	d1d1      	bne.n	80103b6 <tcp_input+0x40a>
 8010412:	e000      	b.n	8010416 <tcp_input+0x46a>
            break;
 8010414:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8010416:	697b      	ldr	r3, [r7, #20]
 8010418:	2b00      	cmp	r3, #0
 801041a:	d014      	beq.n	8010446 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 801041c:	69bb      	ldr	r3, [r7, #24]
 801041e:	2b00      	cmp	r3, #0
 8010420:	d00a      	beq.n	8010438 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8010422:	697b      	ldr	r3, [r7, #20]
 8010424:	68da      	ldr	r2, [r3, #12]
 8010426:	69bb      	ldr	r3, [r7, #24]
 8010428:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801042a:	4b32      	ldr	r3, [pc, #200]	; (80104f4 <tcp_input+0x548>)
 801042c:	681a      	ldr	r2, [r3, #0]
 801042e:	697b      	ldr	r3, [r7, #20]
 8010430:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8010432:	4a30      	ldr	r2, [pc, #192]	; (80104f4 <tcp_input+0x548>)
 8010434:	697b      	ldr	r3, [r7, #20]
 8010436:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8010438:	6978      	ldr	r0, [r7, #20]
 801043a:	f000 f9fb 	bl	8010834 <tcp_listen_input>
      }
      pbuf_free(p);
 801043e:	6878      	ldr	r0, [r7, #4]
 8010440:	f7fd fb4c 	bl	800dadc <pbuf_free>
      return;
 8010444:	e195      	b.n	8010772 <tcp_input+0x7c6>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8010446:	69fb      	ldr	r3, [r7, #28]
 8010448:	2b00      	cmp	r3, #0
 801044a:	f000 815e 	beq.w	801070a <tcp_input+0x75e>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 801044e:	4b2a      	ldr	r3, [pc, #168]	; (80104f8 <tcp_input+0x54c>)
 8010450:	2200      	movs	r2, #0
 8010452:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	891a      	ldrh	r2, [r3, #8]
 8010458:	4b27      	ldr	r3, [pc, #156]	; (80104f8 <tcp_input+0x54c>)
 801045a:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 801045c:	4a26      	ldr	r2, [pc, #152]	; (80104f8 <tcp_input+0x54c>)
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8010462:	4b1b      	ldr	r3, [pc, #108]	; (80104d0 <tcp_input+0x524>)
 8010464:	681b      	ldr	r3, [r3, #0]
 8010466:	4a24      	ldr	r2, [pc, #144]	; (80104f8 <tcp_input+0x54c>)
 8010468:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 801046a:	4b24      	ldr	r3, [pc, #144]	; (80104fc <tcp_input+0x550>)
 801046c:	2200      	movs	r2, #0
 801046e:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8010470:	4b23      	ldr	r3, [pc, #140]	; (8010500 <tcp_input+0x554>)
 8010472:	2200      	movs	r2, #0
 8010474:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8010476:	4b23      	ldr	r3, [pc, #140]	; (8010504 <tcp_input+0x558>)
 8010478:	2200      	movs	r2, #0
 801047a:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 801047c:	4b22      	ldr	r3, [pc, #136]	; (8010508 <tcp_input+0x55c>)
 801047e:	781b      	ldrb	r3, [r3, #0]
 8010480:	f003 0308 	and.w	r3, r3, #8
 8010484:	2b00      	cmp	r3, #0
 8010486:	d006      	beq.n	8010496 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	7b5b      	ldrb	r3, [r3, #13]
 801048c:	f043 0301 	orr.w	r3, r3, #1
 8010490:	b2da      	uxtb	r2, r3
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8010496:	69fb      	ldr	r3, [r7, #28]
 8010498:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801049a:	2b00      	cmp	r3, #0
 801049c:	d038      	beq.n	8010510 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801049e:	69f8      	ldr	r0, [r7, #28]
 80104a0:	f7ff f890 	bl	800f5c4 <tcp_process_refused_data>
 80104a4:	4603      	mov	r3, r0
 80104a6:	f113 0f0d 	cmn.w	r3, #13
 80104aa:	d007      	beq.n	80104bc <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80104ac:	69fb      	ldr	r3, [r7, #28]
 80104ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	d02d      	beq.n	8010510 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80104b4:	4b15      	ldr	r3, [pc, #84]	; (801050c <tcp_input+0x560>)
 80104b6:	881b      	ldrh	r3, [r3, #0]
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	d029      	beq.n	8010510 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80104bc:	69fb      	ldr	r3, [r7, #28]
 80104be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	f040 8104 	bne.w	80106ce <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80104c6:	69f8      	ldr	r0, [r7, #28]
 80104c8:	f003 fe34 	bl	8014134 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80104cc:	e0ff      	b.n	80106ce <tcp_input+0x722>
 80104ce:	bf00      	nop
 80104d0:	20004554 	.word	0x20004554
 80104d4:	20004814 	.word	0x20004814
 80104d8:	0801a610 	.word	0x0801a610
 80104dc:	0801a73c 	.word	0x0801a73c
 80104e0:	0801a65c 	.word	0x0801a65c
 80104e4:	20009624 	.word	0x20009624
 80104e8:	0801a768 	.word	0x0801a768
 80104ec:	20009634 	.word	0x20009634
 80104f0:	0801a794 	.word	0x0801a794
 80104f4:	2000962c 	.word	0x2000962c
 80104f8:	20004544 	.word	0x20004544
 80104fc:	20004574 	.word	0x20004574
 8010500:	20004571 	.word	0x20004571
 8010504:	2000456c 	.word	0x2000456c
 8010508:	20004570 	.word	0x20004570
 801050c:	2000456e 	.word	0x2000456e
      }
    }
    tcp_input_pcb = pcb;
 8010510:	4a99      	ldr	r2, [pc, #612]	; (8010778 <tcp_input+0x7cc>)
 8010512:	69fb      	ldr	r3, [r7, #28]
 8010514:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8010516:	69f8      	ldr	r0, [r7, #28]
 8010518:	f000 fb06 	bl	8010b28 <tcp_process>
 801051c:	4603      	mov	r3, r0
 801051e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8010520:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010524:	f113 0f0d 	cmn.w	r3, #13
 8010528:	f000 80dc 	beq.w	80106e4 <tcp_input+0x738>
      if (recv_flags & TF_RESET) {
 801052c:	4b93      	ldr	r3, [pc, #588]	; (801077c <tcp_input+0x7d0>)
 801052e:	781b      	ldrb	r3, [r3, #0]
 8010530:	f003 0308 	and.w	r3, r3, #8
 8010534:	2b00      	cmp	r3, #0
 8010536:	d015      	beq.n	8010564 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8010538:	69fb      	ldr	r3, [r7, #28]
 801053a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801053e:	2b00      	cmp	r3, #0
 8010540:	d008      	beq.n	8010554 <tcp_input+0x5a8>
 8010542:	69fb      	ldr	r3, [r7, #28]
 8010544:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010548:	69fa      	ldr	r2, [r7, #28]
 801054a:	6912      	ldr	r2, [r2, #16]
 801054c:	f06f 010d 	mvn.w	r1, #13
 8010550:	4610      	mov	r0, r2
 8010552:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8010554:	69f9      	ldr	r1, [r7, #28]
 8010556:	488a      	ldr	r0, [pc, #552]	; (8010780 <tcp_input+0x7d4>)
 8010558:	f7ff fbb0 	bl	800fcbc <tcp_pcb_remove>
        tcp_free(pcb);
 801055c:	69f8      	ldr	r0, [r7, #28]
 801055e:	f7fd ff99 	bl	800e494 <tcp_free>
 8010562:	e0bf      	b.n	80106e4 <tcp_input+0x738>
      } else {
        err = ERR_OK;
 8010564:	2300      	movs	r3, #0
 8010566:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8010568:	4b86      	ldr	r3, [pc, #536]	; (8010784 <tcp_input+0x7d8>)
 801056a:	881b      	ldrh	r3, [r3, #0]
 801056c:	2b00      	cmp	r3, #0
 801056e:	d01d      	beq.n	80105ac <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8010570:	4b84      	ldr	r3, [pc, #528]	; (8010784 <tcp_input+0x7d8>)
 8010572:	881b      	ldrh	r3, [r3, #0]
 8010574:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8010576:	69fb      	ldr	r3, [r7, #28]
 8010578:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801057c:	2b00      	cmp	r3, #0
 801057e:	d00a      	beq.n	8010596 <tcp_input+0x5ea>
 8010580:	69fb      	ldr	r3, [r7, #28]
 8010582:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010586:	69fa      	ldr	r2, [r7, #28]
 8010588:	6910      	ldr	r0, [r2, #16]
 801058a:	89fa      	ldrh	r2, [r7, #14]
 801058c:	69f9      	ldr	r1, [r7, #28]
 801058e:	4798      	blx	r3
 8010590:	4603      	mov	r3, r0
 8010592:	74fb      	strb	r3, [r7, #19]
 8010594:	e001      	b.n	801059a <tcp_input+0x5ee>
 8010596:	2300      	movs	r3, #0
 8010598:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801059a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801059e:	f113 0f0d 	cmn.w	r3, #13
 80105a2:	f000 8096 	beq.w	80106d2 <tcp_input+0x726>
              goto aborted;
            }
          }
          recv_acked = 0;
 80105a6:	4b77      	ldr	r3, [pc, #476]	; (8010784 <tcp_input+0x7d8>)
 80105a8:	2200      	movs	r2, #0
 80105aa:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80105ac:	69f8      	ldr	r0, [r7, #28]
 80105ae:	f000 f901 	bl	80107b4 <tcp_input_delayed_close>
 80105b2:	4603      	mov	r3, r0
 80105b4:	2b00      	cmp	r3, #0
 80105b6:	f040 808e 	bne.w	80106d6 <tcp_input+0x72a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80105ba:	4b73      	ldr	r3, [pc, #460]	; (8010788 <tcp_input+0x7dc>)
 80105bc:	681b      	ldr	r3, [r3, #0]
 80105be:	2b00      	cmp	r3, #0
 80105c0:	d041      	beq.n	8010646 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80105c2:	69fb      	ldr	r3, [r7, #28]
 80105c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	d006      	beq.n	80105d8 <tcp_input+0x62c>
 80105ca:	4b70      	ldr	r3, [pc, #448]	; (801078c <tcp_input+0x7e0>)
 80105cc:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80105d0:	496f      	ldr	r1, [pc, #444]	; (8010790 <tcp_input+0x7e4>)
 80105d2:	4870      	ldr	r0, [pc, #448]	; (8010794 <tcp_input+0x7e8>)
 80105d4:	f007 f89e 	bl	8017714 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80105d8:	69fb      	ldr	r3, [r7, #28]
 80105da:	8b5b      	ldrh	r3, [r3, #26]
 80105dc:	f003 0310 	and.w	r3, r3, #16
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d008      	beq.n	80105f6 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 80105e4:	4b68      	ldr	r3, [pc, #416]	; (8010788 <tcp_input+0x7dc>)
 80105e6:	681b      	ldr	r3, [r3, #0]
 80105e8:	4618      	mov	r0, r3
 80105ea:	f7fd fa77 	bl	800dadc <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80105ee:	69f8      	ldr	r0, [r7, #28]
 80105f0:	f7fe fa30 	bl	800ea54 <tcp_abort>
            goto aborted;
 80105f4:	e076      	b.n	80106e4 <tcp_input+0x738>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80105f6:	69fb      	ldr	r3, [r7, #28]
 80105f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d00c      	beq.n	801061a <tcp_input+0x66e>
 8010600:	69fb      	ldr	r3, [r7, #28]
 8010602:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8010606:	69fb      	ldr	r3, [r7, #28]
 8010608:	6918      	ldr	r0, [r3, #16]
 801060a:	4b5f      	ldr	r3, [pc, #380]	; (8010788 <tcp_input+0x7dc>)
 801060c:	681a      	ldr	r2, [r3, #0]
 801060e:	2300      	movs	r3, #0
 8010610:	69f9      	ldr	r1, [r7, #28]
 8010612:	47a0      	blx	r4
 8010614:	4603      	mov	r3, r0
 8010616:	74fb      	strb	r3, [r7, #19]
 8010618:	e008      	b.n	801062c <tcp_input+0x680>
 801061a:	4b5b      	ldr	r3, [pc, #364]	; (8010788 <tcp_input+0x7dc>)
 801061c:	681a      	ldr	r2, [r3, #0]
 801061e:	2300      	movs	r3, #0
 8010620:	69f9      	ldr	r1, [r7, #28]
 8010622:	2000      	movs	r0, #0
 8010624:	f7ff f8a2 	bl	800f76c <tcp_recv_null>
 8010628:	4603      	mov	r3, r0
 801062a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 801062c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010630:	f113 0f0d 	cmn.w	r3, #13
 8010634:	d051      	beq.n	80106da <tcp_input+0x72e>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8010636:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801063a:	2b00      	cmp	r3, #0
 801063c:	d003      	beq.n	8010646 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 801063e:	4b52      	ldr	r3, [pc, #328]	; (8010788 <tcp_input+0x7dc>)
 8010640:	681a      	ldr	r2, [r3, #0]
 8010642:	69fb      	ldr	r3, [r7, #28]
 8010644:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8010646:	4b4d      	ldr	r3, [pc, #308]	; (801077c <tcp_input+0x7d0>)
 8010648:	781b      	ldrb	r3, [r3, #0]
 801064a:	f003 0320 	and.w	r3, r3, #32
 801064e:	2b00      	cmp	r3, #0
 8010650:	d030      	beq.n	80106b4 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 8010652:	69fb      	ldr	r3, [r7, #28]
 8010654:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010656:	2b00      	cmp	r3, #0
 8010658:	d009      	beq.n	801066e <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801065a:	69fb      	ldr	r3, [r7, #28]
 801065c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801065e:	69fa      	ldr	r2, [r7, #28]
 8010660:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8010662:	7b52      	ldrb	r2, [r2, #13]
 8010664:	f042 0220 	orr.w	r2, r2, #32
 8010668:	b2d2      	uxtb	r2, r2
 801066a:	735a      	strb	r2, [r3, #13]
 801066c:	e022      	b.n	80106b4 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801066e:	69fb      	ldr	r3, [r7, #28]
 8010670:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010672:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8010676:	d005      	beq.n	8010684 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8010678:	69fb      	ldr	r3, [r7, #28]
 801067a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801067c:	3301      	adds	r3, #1
 801067e:	b29a      	uxth	r2, r3
 8010680:	69fb      	ldr	r3, [r7, #28]
 8010682:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8010684:	69fb      	ldr	r3, [r7, #28]
 8010686:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801068a:	2b00      	cmp	r3, #0
 801068c:	d00b      	beq.n	80106a6 <tcp_input+0x6fa>
 801068e:	69fb      	ldr	r3, [r7, #28]
 8010690:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8010694:	69fb      	ldr	r3, [r7, #28]
 8010696:	6918      	ldr	r0, [r3, #16]
 8010698:	2300      	movs	r3, #0
 801069a:	2200      	movs	r2, #0
 801069c:	69f9      	ldr	r1, [r7, #28]
 801069e:	47a0      	blx	r4
 80106a0:	4603      	mov	r3, r0
 80106a2:	74fb      	strb	r3, [r7, #19]
 80106a4:	e001      	b.n	80106aa <tcp_input+0x6fe>
 80106a6:	2300      	movs	r3, #0
 80106a8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80106aa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80106ae:	f113 0f0d 	cmn.w	r3, #13
 80106b2:	d014      	beq.n	80106de <tcp_input+0x732>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80106b4:	4b30      	ldr	r3, [pc, #192]	; (8010778 <tcp_input+0x7cc>)
 80106b6:	2200      	movs	r2, #0
 80106b8:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80106ba:	69f8      	ldr	r0, [r7, #28]
 80106bc:	f000 f87a 	bl	80107b4 <tcp_input_delayed_close>
 80106c0:	4603      	mov	r3, r0
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	d10d      	bne.n	80106e2 <tcp_input+0x736>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80106c6:	69f8      	ldr	r0, [r7, #28]
 80106c8:	f002 ff16 	bl	80134f8 <tcp_output>
 80106cc:	e00a      	b.n	80106e4 <tcp_input+0x738>
        goto aborted;
 80106ce:	bf00      	nop
 80106d0:	e008      	b.n	80106e4 <tcp_input+0x738>
              goto aborted;
 80106d2:	bf00      	nop
 80106d4:	e006      	b.n	80106e4 <tcp_input+0x738>
          goto aborted;
 80106d6:	bf00      	nop
 80106d8:	e004      	b.n	80106e4 <tcp_input+0x738>
            goto aborted;
 80106da:	bf00      	nop
 80106dc:	e002      	b.n	80106e4 <tcp_input+0x738>
              goto aborted;
 80106de:	bf00      	nop
 80106e0:	e000      	b.n	80106e4 <tcp_input+0x738>
          goto aborted;
 80106e2:	bf00      	nop
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
    tcp_input_pcb = NULL;
 80106e4:	4b24      	ldr	r3, [pc, #144]	; (8010778 <tcp_input+0x7cc>)
 80106e6:	2200      	movs	r2, #0
 80106e8:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80106ea:	4b27      	ldr	r3, [pc, #156]	; (8010788 <tcp_input+0x7dc>)
 80106ec:	2200      	movs	r2, #0
 80106ee:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80106f0:	4b29      	ldr	r3, [pc, #164]	; (8010798 <tcp_input+0x7ec>)
 80106f2:	685b      	ldr	r3, [r3, #4]
 80106f4:	2b00      	cmp	r3, #0
 80106f6:	d03b      	beq.n	8010770 <tcp_input+0x7c4>
      pbuf_free(inseg.p);
 80106f8:	4b27      	ldr	r3, [pc, #156]	; (8010798 <tcp_input+0x7ec>)
 80106fa:	685b      	ldr	r3, [r3, #4]
 80106fc:	4618      	mov	r0, r3
 80106fe:	f7fd f9ed 	bl	800dadc <pbuf_free>
      inseg.p = NULL;
 8010702:	4b25      	ldr	r3, [pc, #148]	; (8010798 <tcp_input+0x7ec>)
 8010704:	2200      	movs	r2, #0
 8010706:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8010708:	e032      	b.n	8010770 <tcp_input+0x7c4>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 801070a:	4b24      	ldr	r3, [pc, #144]	; (801079c <tcp_input+0x7f0>)
 801070c:	681b      	ldr	r3, [r3, #0]
 801070e:	899b      	ldrh	r3, [r3, #12]
 8010710:	b29b      	uxth	r3, r3
 8010712:	4618      	mov	r0, r3
 8010714:	f7f8 fa82 	bl	8008c1c <lwip_htons>
 8010718:	4603      	mov	r3, r0
 801071a:	b2db      	uxtb	r3, r3
 801071c:	f003 0304 	and.w	r3, r3, #4
 8010720:	2b00      	cmp	r3, #0
 8010722:	d118      	bne.n	8010756 <tcp_input+0x7aa>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010724:	4b1e      	ldr	r3, [pc, #120]	; (80107a0 <tcp_input+0x7f4>)
 8010726:	6819      	ldr	r1, [r3, #0]
 8010728:	4b1e      	ldr	r3, [pc, #120]	; (80107a4 <tcp_input+0x7f8>)
 801072a:	881b      	ldrh	r3, [r3, #0]
 801072c:	461a      	mov	r2, r3
 801072e:	4b1e      	ldr	r3, [pc, #120]	; (80107a8 <tcp_input+0x7fc>)
 8010730:	681b      	ldr	r3, [r3, #0]
 8010732:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010734:	4b19      	ldr	r3, [pc, #100]	; (801079c <tcp_input+0x7f0>)
 8010736:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010738:	885b      	ldrh	r3, [r3, #2]
 801073a:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801073c:	4a17      	ldr	r2, [pc, #92]	; (801079c <tcp_input+0x7f0>)
 801073e:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010740:	8812      	ldrh	r2, [r2, #0]
 8010742:	b292      	uxth	r2, r2
 8010744:	9202      	str	r2, [sp, #8]
 8010746:	9301      	str	r3, [sp, #4]
 8010748:	4b18      	ldr	r3, [pc, #96]	; (80107ac <tcp_input+0x800>)
 801074a:	9300      	str	r3, [sp, #0]
 801074c:	4b18      	ldr	r3, [pc, #96]	; (80107b0 <tcp_input+0x804>)
 801074e:	4602      	mov	r2, r0
 8010750:	2000      	movs	r0, #0
 8010752:	f003 fc9d 	bl	8014090 <tcp_rst>
    pbuf_free(p);
 8010756:	6878      	ldr	r0, [r7, #4]
 8010758:	f7fd f9c0 	bl	800dadc <pbuf_free>
  return;
 801075c:	e008      	b.n	8010770 <tcp_input+0x7c4>
    goto dropped;
 801075e:	bf00      	nop
 8010760:	e002      	b.n	8010768 <tcp_input+0x7bc>
      goto dropped;
 8010762:	bf00      	nop
 8010764:	e000      	b.n	8010768 <tcp_input+0x7bc>
      goto dropped;
 8010766:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8010768:	6878      	ldr	r0, [r7, #4]
 801076a:	f7fd f9b7 	bl	800dadc <pbuf_free>
 801076e:	e000      	b.n	8010772 <tcp_input+0x7c6>
  return;
 8010770:	bf00      	nop
}
 8010772:	3724      	adds	r7, #36	; 0x24
 8010774:	46bd      	mov	sp, r7
 8010776:	bd90      	pop	{r4, r7, pc}
 8010778:	20009638 	.word	0x20009638
 801077c:	20004571 	.word	0x20004571
 8010780:	20009624 	.word	0x20009624
 8010784:	2000456c 	.word	0x2000456c
 8010788:	20004574 	.word	0x20004574
 801078c:	0801a610 	.word	0x0801a610
 8010790:	0801a7c4 	.word	0x0801a7c4
 8010794:	0801a65c 	.word	0x0801a65c
 8010798:	20004544 	.word	0x20004544
 801079c:	20004554 	.word	0x20004554
 80107a0:	20004568 	.word	0x20004568
 80107a4:	2000456e 	.word	0x2000456e
 80107a8:	20004564 	.word	0x20004564
 80107ac:	20004824 	.word	0x20004824
 80107b0:	20004828 	.word	0x20004828

080107b4 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80107b4:	b580      	push	{r7, lr}
 80107b6:	b082      	sub	sp, #8
 80107b8:	af00      	add	r7, sp, #0
 80107ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	2b00      	cmp	r3, #0
 80107c0:	d106      	bne.n	80107d0 <tcp_input_delayed_close+0x1c>
 80107c2:	4b17      	ldr	r3, [pc, #92]	; (8010820 <tcp_input_delayed_close+0x6c>)
 80107c4:	f240 225a 	movw	r2, #602	; 0x25a
 80107c8:	4916      	ldr	r1, [pc, #88]	; (8010824 <tcp_input_delayed_close+0x70>)
 80107ca:	4817      	ldr	r0, [pc, #92]	; (8010828 <tcp_input_delayed_close+0x74>)
 80107cc:	f006 ffa2 	bl	8017714 <iprintf>

  if (recv_flags & TF_CLOSED) {
 80107d0:	4b16      	ldr	r3, [pc, #88]	; (801082c <tcp_input_delayed_close+0x78>)
 80107d2:	781b      	ldrb	r3, [r3, #0]
 80107d4:	f003 0310 	and.w	r3, r3, #16
 80107d8:	2b00      	cmp	r3, #0
 80107da:	d01c      	beq.n	8010816 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	8b5b      	ldrh	r3, [r3, #26]
 80107e0:	f003 0310 	and.w	r3, r3, #16
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	d10d      	bne.n	8010804 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	d008      	beq.n	8010804 <tcp_input_delayed_close+0x50>
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80107f8:	687a      	ldr	r2, [r7, #4]
 80107fa:	6912      	ldr	r2, [r2, #16]
 80107fc:	f06f 010e 	mvn.w	r1, #14
 8010800:	4610      	mov	r0, r2
 8010802:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8010804:	6879      	ldr	r1, [r7, #4]
 8010806:	480a      	ldr	r0, [pc, #40]	; (8010830 <tcp_input_delayed_close+0x7c>)
 8010808:	f7ff fa58 	bl	800fcbc <tcp_pcb_remove>
    tcp_free(pcb);
 801080c:	6878      	ldr	r0, [r7, #4]
 801080e:	f7fd fe41 	bl	800e494 <tcp_free>
    return 1;
 8010812:	2301      	movs	r3, #1
 8010814:	e000      	b.n	8010818 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8010816:	2300      	movs	r3, #0
}
 8010818:	4618      	mov	r0, r3
 801081a:	3708      	adds	r7, #8
 801081c:	46bd      	mov	sp, r7
 801081e:	bd80      	pop	{r7, pc}
 8010820:	0801a610 	.word	0x0801a610
 8010824:	0801a7e0 	.word	0x0801a7e0
 8010828:	0801a65c 	.word	0x0801a65c
 801082c:	20004571 	.word	0x20004571
 8010830:	20009624 	.word	0x20009624

08010834 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8010834:	b590      	push	{r4, r7, lr}
 8010836:	b08b      	sub	sp, #44	; 0x2c
 8010838:	af04      	add	r7, sp, #16
 801083a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 801083c:	4b6f      	ldr	r3, [pc, #444]	; (80109fc <tcp_listen_input+0x1c8>)
 801083e:	781b      	ldrb	r3, [r3, #0]
 8010840:	f003 0304 	and.w	r3, r3, #4
 8010844:	2b00      	cmp	r3, #0
 8010846:	f040 80d3 	bne.w	80109f0 <tcp_listen_input+0x1bc>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	2b00      	cmp	r3, #0
 801084e:	d106      	bne.n	801085e <tcp_listen_input+0x2a>
 8010850:	4b6b      	ldr	r3, [pc, #428]	; (8010a00 <tcp_listen_input+0x1cc>)
 8010852:	f240 2281 	movw	r2, #641	; 0x281
 8010856:	496b      	ldr	r1, [pc, #428]	; (8010a04 <tcp_listen_input+0x1d0>)
 8010858:	486b      	ldr	r0, [pc, #428]	; (8010a08 <tcp_listen_input+0x1d4>)
 801085a:	f006 ff5b 	bl	8017714 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 801085e:	4b67      	ldr	r3, [pc, #412]	; (80109fc <tcp_listen_input+0x1c8>)
 8010860:	781b      	ldrb	r3, [r3, #0]
 8010862:	f003 0310 	and.w	r3, r3, #16
 8010866:	2b00      	cmp	r3, #0
 8010868:	d019      	beq.n	801089e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801086a:	4b68      	ldr	r3, [pc, #416]	; (8010a0c <tcp_listen_input+0x1d8>)
 801086c:	6819      	ldr	r1, [r3, #0]
 801086e:	4b68      	ldr	r3, [pc, #416]	; (8010a10 <tcp_listen_input+0x1dc>)
 8010870:	881b      	ldrh	r3, [r3, #0]
 8010872:	461a      	mov	r2, r3
 8010874:	4b67      	ldr	r3, [pc, #412]	; (8010a14 <tcp_listen_input+0x1e0>)
 8010876:	681b      	ldr	r3, [r3, #0]
 8010878:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801087a:	4b67      	ldr	r3, [pc, #412]	; (8010a18 <tcp_listen_input+0x1e4>)
 801087c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801087e:	885b      	ldrh	r3, [r3, #2]
 8010880:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010882:	4a65      	ldr	r2, [pc, #404]	; (8010a18 <tcp_listen_input+0x1e4>)
 8010884:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010886:	8812      	ldrh	r2, [r2, #0]
 8010888:	b292      	uxth	r2, r2
 801088a:	9202      	str	r2, [sp, #8]
 801088c:	9301      	str	r3, [sp, #4]
 801088e:	4b63      	ldr	r3, [pc, #396]	; (8010a1c <tcp_listen_input+0x1e8>)
 8010890:	9300      	str	r3, [sp, #0]
 8010892:	4b63      	ldr	r3, [pc, #396]	; (8010a20 <tcp_listen_input+0x1ec>)
 8010894:	4602      	mov	r2, r0
 8010896:	6878      	ldr	r0, [r7, #4]
 8010898:	f003 fbfa 	bl	8014090 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 801089c:	e0aa      	b.n	80109f4 <tcp_listen_input+0x1c0>
  } else if (flags & TCP_SYN) {
 801089e:	4b57      	ldr	r3, [pc, #348]	; (80109fc <tcp_listen_input+0x1c8>)
 80108a0:	781b      	ldrb	r3, [r3, #0]
 80108a2:	f003 0302 	and.w	r3, r3, #2
 80108a6:	2b00      	cmp	r3, #0
 80108a8:	f000 80a4 	beq.w	80109f4 <tcp_listen_input+0x1c0>
    npcb = tcp_alloc(pcb->prio);
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	7d5b      	ldrb	r3, [r3, #21]
 80108b0:	4618      	mov	r0, r3
 80108b2:	f7ff f87f 	bl	800f9b4 <tcp_alloc>
 80108b6:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80108b8:	697b      	ldr	r3, [r7, #20]
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	d111      	bne.n	80108e2 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	699b      	ldr	r3, [r3, #24]
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	d00a      	beq.n	80108dc <tcp_listen_input+0xa8>
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	699b      	ldr	r3, [r3, #24]
 80108ca:	687a      	ldr	r2, [r7, #4]
 80108cc:	6910      	ldr	r0, [r2, #16]
 80108ce:	f04f 32ff 	mov.w	r2, #4294967295
 80108d2:	2100      	movs	r1, #0
 80108d4:	4798      	blx	r3
 80108d6:	4603      	mov	r3, r0
 80108d8:	74fb      	strb	r3, [r7, #19]
      return;
 80108da:	e08c      	b.n	80109f6 <tcp_listen_input+0x1c2>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80108dc:	23f0      	movs	r3, #240	; 0xf0
 80108de:	74fb      	strb	r3, [r7, #19]
      return;
 80108e0:	e089      	b.n	80109f6 <tcp_listen_input+0x1c2>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80108e2:	4b50      	ldr	r3, [pc, #320]	; (8010a24 <tcp_listen_input+0x1f0>)
 80108e4:	695a      	ldr	r2, [r3, #20]
 80108e6:	697b      	ldr	r3, [r7, #20]
 80108e8:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80108ea:	4b4e      	ldr	r3, [pc, #312]	; (8010a24 <tcp_listen_input+0x1f0>)
 80108ec:	691a      	ldr	r2, [r3, #16]
 80108ee:	697b      	ldr	r3, [r7, #20]
 80108f0:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	8ada      	ldrh	r2, [r3, #22]
 80108f6:	697b      	ldr	r3, [r7, #20]
 80108f8:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80108fa:	4b47      	ldr	r3, [pc, #284]	; (8010a18 <tcp_listen_input+0x1e4>)
 80108fc:	681b      	ldr	r3, [r3, #0]
 80108fe:	881b      	ldrh	r3, [r3, #0]
 8010900:	b29a      	uxth	r2, r3
 8010902:	697b      	ldr	r3, [r7, #20]
 8010904:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8010906:	697b      	ldr	r3, [r7, #20]
 8010908:	2203      	movs	r2, #3
 801090a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 801090c:	4b41      	ldr	r3, [pc, #260]	; (8010a14 <tcp_listen_input+0x1e0>)
 801090e:	681b      	ldr	r3, [r3, #0]
 8010910:	1c5a      	adds	r2, r3, #1
 8010912:	697b      	ldr	r3, [r7, #20]
 8010914:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8010916:	697b      	ldr	r3, [r7, #20]
 8010918:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801091a:	697b      	ldr	r3, [r7, #20]
 801091c:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 801091e:	6978      	ldr	r0, [r7, #20]
 8010920:	f7ff fa60 	bl	800fde4 <tcp_next_iss>
 8010924:	60f8      	str	r0, [r7, #12]
    npcb->snd_wl2 = iss;
 8010926:	697b      	ldr	r3, [r7, #20]
 8010928:	68fa      	ldr	r2, [r7, #12]
 801092a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 801092c:	697b      	ldr	r3, [r7, #20]
 801092e:	68fa      	ldr	r2, [r7, #12]
 8010930:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8010932:	697b      	ldr	r3, [r7, #20]
 8010934:	68fa      	ldr	r2, [r7, #12]
 8010936:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8010938:	697b      	ldr	r3, [r7, #20]
 801093a:	68fa      	ldr	r2, [r7, #12]
 801093c:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801093e:	4b35      	ldr	r3, [pc, #212]	; (8010a14 <tcp_listen_input+0x1e0>)
 8010940:	681b      	ldr	r3, [r3, #0]
 8010942:	1e5a      	subs	r2, r3, #1
 8010944:	697b      	ldr	r3, [r7, #20]
 8010946:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	691a      	ldr	r2, [r3, #16]
 801094c:	697b      	ldr	r3, [r7, #20]
 801094e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8010950:	697b      	ldr	r3, [r7, #20]
 8010952:	687a      	ldr	r2, [r7, #4]
 8010954:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	7a5b      	ldrb	r3, [r3, #9]
 801095a:	f003 030c 	and.w	r3, r3, #12
 801095e:	b2da      	uxtb	r2, r3
 8010960:	697b      	ldr	r3, [r7, #20]
 8010962:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	7a1a      	ldrb	r2, [r3, #8]
 8010968:	697b      	ldr	r3, [r7, #20]
 801096a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 801096c:	4b2e      	ldr	r3, [pc, #184]	; (8010a28 <tcp_listen_input+0x1f4>)
 801096e:	681a      	ldr	r2, [r3, #0]
 8010970:	697b      	ldr	r3, [r7, #20]
 8010972:	60da      	str	r2, [r3, #12]
 8010974:	4a2c      	ldr	r2, [pc, #176]	; (8010a28 <tcp_listen_input+0x1f4>)
 8010976:	697b      	ldr	r3, [r7, #20]
 8010978:	6013      	str	r3, [r2, #0]
 801097a:	f003 fd4d 	bl	8014418 <tcp_timer_needed>
 801097e:	4b2b      	ldr	r3, [pc, #172]	; (8010a2c <tcp_listen_input+0x1f8>)
 8010980:	2201      	movs	r2, #1
 8010982:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8010984:	6978      	ldr	r0, [r7, #20]
 8010986:	f001 fd93 	bl	80124b0 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 801098a:	4b23      	ldr	r3, [pc, #140]	; (8010a18 <tcp_listen_input+0x1e4>)
 801098c:	681b      	ldr	r3, [r3, #0]
 801098e:	89db      	ldrh	r3, [r3, #14]
 8010990:	b29a      	uxth	r2, r3
 8010992:	697b      	ldr	r3, [r7, #20]
 8010994:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8010998:	697b      	ldr	r3, [r7, #20]
 801099a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801099e:	697b      	ldr	r3, [r7, #20]
 80109a0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80109a4:	697b      	ldr	r3, [r7, #20]
 80109a6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80109a8:	697b      	ldr	r3, [r7, #20]
 80109aa:	3304      	adds	r3, #4
 80109ac:	4618      	mov	r0, r3
 80109ae:	f7fa fa3b 	bl	800ae28 <ip4_route>
 80109b2:	4601      	mov	r1, r0
 80109b4:	697b      	ldr	r3, [r7, #20]
 80109b6:	3304      	adds	r3, #4
 80109b8:	461a      	mov	r2, r3
 80109ba:	4620      	mov	r0, r4
 80109bc:	f7ff fa38 	bl	800fe30 <tcp_eff_send_mss_netif>
 80109c0:	4603      	mov	r3, r0
 80109c2:	461a      	mov	r2, r3
 80109c4:	697b      	ldr	r3, [r7, #20]
 80109c6:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80109c8:	2112      	movs	r1, #18
 80109ca:	6978      	ldr	r0, [r7, #20]
 80109cc:	f002 fca4 	bl	8013318 <tcp_enqueue_flags>
 80109d0:	4603      	mov	r3, r0
 80109d2:	72fb      	strb	r3, [r7, #11]
    if (rc != ERR_OK) {
 80109d4:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80109d8:	2b00      	cmp	r3, #0
 80109da:	d004      	beq.n	80109e6 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80109dc:	2100      	movs	r1, #0
 80109de:	6978      	ldr	r0, [r7, #20]
 80109e0:	f7fd ff7a 	bl	800e8d8 <tcp_abandon>
      return;
 80109e4:	e007      	b.n	80109f6 <tcp_listen_input+0x1c2>
    tcp_output(npcb);
 80109e6:	6978      	ldr	r0, [r7, #20]
 80109e8:	f002 fd86 	bl	80134f8 <tcp_output>
  return;
 80109ec:	bf00      	nop
 80109ee:	e001      	b.n	80109f4 <tcp_listen_input+0x1c0>
    return;
 80109f0:	bf00      	nop
 80109f2:	e000      	b.n	80109f6 <tcp_listen_input+0x1c2>
  return;
 80109f4:	bf00      	nop
}
 80109f6:	371c      	adds	r7, #28
 80109f8:	46bd      	mov	sp, r7
 80109fa:	bd90      	pop	{r4, r7, pc}
 80109fc:	20004570 	.word	0x20004570
 8010a00:	0801a610 	.word	0x0801a610
 8010a04:	0801a808 	.word	0x0801a808
 8010a08:	0801a65c 	.word	0x0801a65c
 8010a0c:	20004568 	.word	0x20004568
 8010a10:	2000456e 	.word	0x2000456e
 8010a14:	20004564 	.word	0x20004564
 8010a18:	20004554 	.word	0x20004554
 8010a1c:	20004824 	.word	0x20004824
 8010a20:	20004828 	.word	0x20004828
 8010a24:	20004814 	.word	0x20004814
 8010a28:	20009624 	.word	0x20009624
 8010a2c:	20009620 	.word	0x20009620

08010a30 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8010a30:	b580      	push	{r7, lr}
 8010a32:	b086      	sub	sp, #24
 8010a34:	af04      	add	r7, sp, #16
 8010a36:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8010a38:	4b30      	ldr	r3, [pc, #192]	; (8010afc <tcp_timewait_input+0xcc>)
 8010a3a:	781b      	ldrb	r3, [r3, #0]
 8010a3c:	f003 0304 	and.w	r3, r3, #4
 8010a40:	2b00      	cmp	r3, #0
 8010a42:	d154      	bne.n	8010aee <tcp_timewait_input+0xbe>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	2b00      	cmp	r3, #0
 8010a48:	d106      	bne.n	8010a58 <tcp_timewait_input+0x28>
 8010a4a:	4b2d      	ldr	r3, [pc, #180]	; (8010b00 <tcp_timewait_input+0xd0>)
 8010a4c:	f240 22ee 	movw	r2, #750	; 0x2ee
 8010a50:	492c      	ldr	r1, [pc, #176]	; (8010b04 <tcp_timewait_input+0xd4>)
 8010a52:	482d      	ldr	r0, [pc, #180]	; (8010b08 <tcp_timewait_input+0xd8>)
 8010a54:	f006 fe5e 	bl	8017714 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8010a58:	4b28      	ldr	r3, [pc, #160]	; (8010afc <tcp_timewait_input+0xcc>)
 8010a5a:	781b      	ldrb	r3, [r3, #0]
 8010a5c:	f003 0302 	and.w	r3, r3, #2
 8010a60:	2b00      	cmp	r3, #0
 8010a62:	d02a      	beq.n	8010aba <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8010a64:	4b29      	ldr	r3, [pc, #164]	; (8010b0c <tcp_timewait_input+0xdc>)
 8010a66:	681a      	ldr	r2, [r3, #0]
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a6c:	1ad3      	subs	r3, r2, r3
 8010a6e:	2b00      	cmp	r3, #0
 8010a70:	db2d      	blt.n	8010ace <tcp_timewait_input+0x9e>
 8010a72:	4b26      	ldr	r3, [pc, #152]	; (8010b0c <tcp_timewait_input+0xdc>)
 8010a74:	681a      	ldr	r2, [r3, #0]
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a7a:	6879      	ldr	r1, [r7, #4]
 8010a7c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010a7e:	440b      	add	r3, r1
 8010a80:	1ad3      	subs	r3, r2, r3
 8010a82:	2b00      	cmp	r3, #0
 8010a84:	dc23      	bgt.n	8010ace <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010a86:	4b22      	ldr	r3, [pc, #136]	; (8010b10 <tcp_timewait_input+0xe0>)
 8010a88:	6819      	ldr	r1, [r3, #0]
 8010a8a:	4b22      	ldr	r3, [pc, #136]	; (8010b14 <tcp_timewait_input+0xe4>)
 8010a8c:	881b      	ldrh	r3, [r3, #0]
 8010a8e:	461a      	mov	r2, r3
 8010a90:	4b1e      	ldr	r3, [pc, #120]	; (8010b0c <tcp_timewait_input+0xdc>)
 8010a92:	681b      	ldr	r3, [r3, #0]
 8010a94:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010a96:	4b20      	ldr	r3, [pc, #128]	; (8010b18 <tcp_timewait_input+0xe8>)
 8010a98:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010a9a:	885b      	ldrh	r3, [r3, #2]
 8010a9c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010a9e:	4a1e      	ldr	r2, [pc, #120]	; (8010b18 <tcp_timewait_input+0xe8>)
 8010aa0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010aa2:	8812      	ldrh	r2, [r2, #0]
 8010aa4:	b292      	uxth	r2, r2
 8010aa6:	9202      	str	r2, [sp, #8]
 8010aa8:	9301      	str	r3, [sp, #4]
 8010aaa:	4b1c      	ldr	r3, [pc, #112]	; (8010b1c <tcp_timewait_input+0xec>)
 8010aac:	9300      	str	r3, [sp, #0]
 8010aae:	4b1c      	ldr	r3, [pc, #112]	; (8010b20 <tcp_timewait_input+0xf0>)
 8010ab0:	4602      	mov	r2, r0
 8010ab2:	6878      	ldr	r0, [r7, #4]
 8010ab4:	f003 faec 	bl	8014090 <tcp_rst>
      return;
 8010ab8:	e01c      	b.n	8010af4 <tcp_timewait_input+0xc4>
    }
  } else if (flags & TCP_FIN) {
 8010aba:	4b10      	ldr	r3, [pc, #64]	; (8010afc <tcp_timewait_input+0xcc>)
 8010abc:	781b      	ldrb	r3, [r3, #0]
 8010abe:	f003 0301 	and.w	r3, r3, #1
 8010ac2:	2b00      	cmp	r3, #0
 8010ac4:	d003      	beq.n	8010ace <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8010ac6:	4b17      	ldr	r3, [pc, #92]	; (8010b24 <tcp_timewait_input+0xf4>)
 8010ac8:	681a      	ldr	r2, [r3, #0]
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8010ace:	4b11      	ldr	r3, [pc, #68]	; (8010b14 <tcp_timewait_input+0xe4>)
 8010ad0:	881b      	ldrh	r3, [r3, #0]
 8010ad2:	2b00      	cmp	r3, #0
 8010ad4:	d00d      	beq.n	8010af2 <tcp_timewait_input+0xc2>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	8b5b      	ldrh	r3, [r3, #26]
 8010ada:	f043 0302 	orr.w	r3, r3, #2
 8010ade:	b29a      	uxth	r2, r3
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8010ae4:	6878      	ldr	r0, [r7, #4]
 8010ae6:	f002 fd07 	bl	80134f8 <tcp_output>
  }
  return;
 8010aea:	bf00      	nop
 8010aec:	e001      	b.n	8010af2 <tcp_timewait_input+0xc2>
    return;
 8010aee:	bf00      	nop
 8010af0:	e000      	b.n	8010af4 <tcp_timewait_input+0xc4>
  return;
 8010af2:	bf00      	nop
}
 8010af4:	3708      	adds	r7, #8
 8010af6:	46bd      	mov	sp, r7
 8010af8:	bd80      	pop	{r7, pc}
 8010afa:	bf00      	nop
 8010afc:	20004570 	.word	0x20004570
 8010b00:	0801a610 	.word	0x0801a610
 8010b04:	0801a828 	.word	0x0801a828
 8010b08:	0801a65c 	.word	0x0801a65c
 8010b0c:	20004564 	.word	0x20004564
 8010b10:	20004568 	.word	0x20004568
 8010b14:	2000456e 	.word	0x2000456e
 8010b18:	20004554 	.word	0x20004554
 8010b1c:	20004824 	.word	0x20004824
 8010b20:	20004828 	.word	0x20004828
 8010b24:	20009628 	.word	0x20009628

08010b28 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8010b28:	b590      	push	{r4, r7, lr}
 8010b2a:	b08d      	sub	sp, #52	; 0x34
 8010b2c:	af04      	add	r7, sp, #16
 8010b2e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8010b30:	2300      	movs	r3, #0
 8010b32:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8010b34:	2300      	movs	r3, #0
 8010b36:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	2b00      	cmp	r3, #0
 8010b3c:	d106      	bne.n	8010b4c <tcp_process+0x24>
 8010b3e:	4ba5      	ldr	r3, [pc, #660]	; (8010dd4 <tcp_process+0x2ac>)
 8010b40:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8010b44:	49a4      	ldr	r1, [pc, #656]	; (8010dd8 <tcp_process+0x2b0>)
 8010b46:	48a5      	ldr	r0, [pc, #660]	; (8010ddc <tcp_process+0x2b4>)
 8010b48:	f006 fde4 	bl	8017714 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8010b4c:	4ba4      	ldr	r3, [pc, #656]	; (8010de0 <tcp_process+0x2b8>)
 8010b4e:	781b      	ldrb	r3, [r3, #0]
 8010b50:	f003 0304 	and.w	r3, r3, #4
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	d04e      	beq.n	8010bf6 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	7d1b      	ldrb	r3, [r3, #20]
 8010b5c:	2b02      	cmp	r3, #2
 8010b5e:	d108      	bne.n	8010b72 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010b64:	4b9f      	ldr	r3, [pc, #636]	; (8010de4 <tcp_process+0x2bc>)
 8010b66:	681b      	ldr	r3, [r3, #0]
 8010b68:	429a      	cmp	r2, r3
 8010b6a:	d123      	bne.n	8010bb4 <tcp_process+0x8c>
        acceptable = 1;
 8010b6c:	2301      	movs	r3, #1
 8010b6e:	76fb      	strb	r3, [r7, #27]
 8010b70:	e020      	b.n	8010bb4 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010b76:	4b9c      	ldr	r3, [pc, #624]	; (8010de8 <tcp_process+0x2c0>)
 8010b78:	681b      	ldr	r3, [r3, #0]
 8010b7a:	429a      	cmp	r2, r3
 8010b7c:	d102      	bne.n	8010b84 <tcp_process+0x5c>
        acceptable = 1;
 8010b7e:	2301      	movs	r3, #1
 8010b80:	76fb      	strb	r3, [r7, #27]
 8010b82:	e017      	b.n	8010bb4 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010b84:	4b98      	ldr	r3, [pc, #608]	; (8010de8 <tcp_process+0x2c0>)
 8010b86:	681a      	ldr	r2, [r3, #0]
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b8c:	1ad3      	subs	r3, r2, r3
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	db10      	blt.n	8010bb4 <tcp_process+0x8c>
 8010b92:	4b95      	ldr	r3, [pc, #596]	; (8010de8 <tcp_process+0x2c0>)
 8010b94:	681a      	ldr	r2, [r3, #0]
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b9a:	6879      	ldr	r1, [r7, #4]
 8010b9c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010b9e:	440b      	add	r3, r1
 8010ba0:	1ad3      	subs	r3, r2, r3
 8010ba2:	2b00      	cmp	r3, #0
 8010ba4:	dc06      	bgt.n	8010bb4 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	8b5b      	ldrh	r3, [r3, #26]
 8010baa:	f043 0302 	orr.w	r3, r3, #2
 8010bae:	b29a      	uxth	r2, r3
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8010bb4:	7efb      	ldrb	r3, [r7, #27]
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	d01b      	beq.n	8010bf2 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	7d1b      	ldrb	r3, [r3, #20]
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	d106      	bne.n	8010bd0 <tcp_process+0xa8>
 8010bc2:	4b84      	ldr	r3, [pc, #528]	; (8010dd4 <tcp_process+0x2ac>)
 8010bc4:	f44f 724e 	mov.w	r2, #824	; 0x338
 8010bc8:	4988      	ldr	r1, [pc, #544]	; (8010dec <tcp_process+0x2c4>)
 8010bca:	4884      	ldr	r0, [pc, #528]	; (8010ddc <tcp_process+0x2b4>)
 8010bcc:	f006 fda2 	bl	8017714 <iprintf>
      recv_flags |= TF_RESET;
 8010bd0:	4b87      	ldr	r3, [pc, #540]	; (8010df0 <tcp_process+0x2c8>)
 8010bd2:	781b      	ldrb	r3, [r3, #0]
 8010bd4:	f043 0308 	orr.w	r3, r3, #8
 8010bd8:	b2da      	uxtb	r2, r3
 8010bda:	4b85      	ldr	r3, [pc, #532]	; (8010df0 <tcp_process+0x2c8>)
 8010bdc:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	8b5b      	ldrh	r3, [r3, #26]
 8010be2:	f023 0301 	bic.w	r3, r3, #1
 8010be6:	b29a      	uxth	r2, r3
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8010bec:	f06f 030d 	mvn.w	r3, #13
 8010bf0:	e37a      	b.n	80112e8 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8010bf2:	2300      	movs	r3, #0
 8010bf4:	e378      	b.n	80112e8 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8010bf6:	4b7a      	ldr	r3, [pc, #488]	; (8010de0 <tcp_process+0x2b8>)
 8010bf8:	781b      	ldrb	r3, [r3, #0]
 8010bfa:	f003 0302 	and.w	r3, r3, #2
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	d010      	beq.n	8010c24 <tcp_process+0xfc>
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	7d1b      	ldrb	r3, [r3, #20]
 8010c06:	2b02      	cmp	r3, #2
 8010c08:	d00c      	beq.n	8010c24 <tcp_process+0xfc>
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	7d1b      	ldrb	r3, [r3, #20]
 8010c0e:	2b03      	cmp	r3, #3
 8010c10:	d008      	beq.n	8010c24 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	8b5b      	ldrh	r3, [r3, #26]
 8010c16:	f043 0302 	orr.w	r3, r3, #2
 8010c1a:	b29a      	uxth	r2, r3
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8010c20:	2300      	movs	r3, #0
 8010c22:	e361      	b.n	80112e8 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	8b5b      	ldrh	r3, [r3, #26]
 8010c28:	f003 0310 	and.w	r3, r3, #16
 8010c2c:	2b00      	cmp	r3, #0
 8010c2e:	d103      	bne.n	8010c38 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8010c30:	4b70      	ldr	r3, [pc, #448]	; (8010df4 <tcp_process+0x2cc>)
 8010c32:	681a      	ldr	r2, [r3, #0]
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	2200      	movs	r2, #0
 8010c3c:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	2200      	movs	r2, #0
 8010c44:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8010c48:	6878      	ldr	r0, [r7, #4]
 8010c4a:	f001 fc31 	bl	80124b0 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	7d1b      	ldrb	r3, [r3, #20]
 8010c52:	3b02      	subs	r3, #2
 8010c54:	2b07      	cmp	r3, #7
 8010c56:	f200 8337 	bhi.w	80112c8 <tcp_process+0x7a0>
 8010c5a:	a201      	add	r2, pc, #4	; (adr r2, 8010c60 <tcp_process+0x138>)
 8010c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c60:	08010c81 	.word	0x08010c81
 8010c64:	08010eb1 	.word	0x08010eb1
 8010c68:	08011029 	.word	0x08011029
 8010c6c:	08011053 	.word	0x08011053
 8010c70:	08011177 	.word	0x08011177
 8010c74:	08011029 	.word	0x08011029
 8010c78:	08011203 	.word	0x08011203
 8010c7c:	08011293 	.word	0x08011293
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8010c80:	4b57      	ldr	r3, [pc, #348]	; (8010de0 <tcp_process+0x2b8>)
 8010c82:	781b      	ldrb	r3, [r3, #0]
 8010c84:	f003 0310 	and.w	r3, r3, #16
 8010c88:	2b00      	cmp	r3, #0
 8010c8a:	f000 80e4 	beq.w	8010e56 <tcp_process+0x32e>
 8010c8e:	4b54      	ldr	r3, [pc, #336]	; (8010de0 <tcp_process+0x2b8>)
 8010c90:	781b      	ldrb	r3, [r3, #0]
 8010c92:	f003 0302 	and.w	r3, r3, #2
 8010c96:	2b00      	cmp	r3, #0
 8010c98:	f000 80dd 	beq.w	8010e56 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010ca0:	1c5a      	adds	r2, r3, #1
 8010ca2:	4b50      	ldr	r3, [pc, #320]	; (8010de4 <tcp_process+0x2bc>)
 8010ca4:	681b      	ldr	r3, [r3, #0]
 8010ca6:	429a      	cmp	r2, r3
 8010ca8:	f040 80d5 	bne.w	8010e56 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8010cac:	4b4e      	ldr	r3, [pc, #312]	; (8010de8 <tcp_process+0x2c0>)
 8010cae:	681b      	ldr	r3, [r3, #0]
 8010cb0:	1c5a      	adds	r2, r3, #1
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8010cbe:	4b49      	ldr	r3, [pc, #292]	; (8010de4 <tcp_process+0x2bc>)
 8010cc0:	681a      	ldr	r2, [r3, #0]
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8010cc6:	4b4c      	ldr	r3, [pc, #304]	; (8010df8 <tcp_process+0x2d0>)
 8010cc8:	681b      	ldr	r3, [r3, #0]
 8010cca:	89db      	ldrh	r3, [r3, #14]
 8010ccc:	b29a      	uxth	r2, r3
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8010ce0:	4b41      	ldr	r3, [pc, #260]	; (8010de8 <tcp_process+0x2c0>)
 8010ce2:	681b      	ldr	r3, [r3, #0]
 8010ce4:	1e5a      	subs	r2, r3, #1
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	2204      	movs	r2, #4
 8010cee:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	3304      	adds	r3, #4
 8010cf8:	4618      	mov	r0, r3
 8010cfa:	f7fa f895 	bl	800ae28 <ip4_route>
 8010cfe:	4601      	mov	r1, r0
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	3304      	adds	r3, #4
 8010d04:	461a      	mov	r2, r3
 8010d06:	4620      	mov	r0, r4
 8010d08:	f7ff f892 	bl	800fe30 <tcp_eff_send_mss_netif>
 8010d0c:	4603      	mov	r3, r0
 8010d0e:	461a      	mov	r2, r3
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010d18:	009a      	lsls	r2, r3, #2
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010d1e:	005b      	lsls	r3, r3, #1
 8010d20:	f241 111c 	movw	r1, #4380	; 0x111c
 8010d24:	428b      	cmp	r3, r1
 8010d26:	bf38      	it	cc
 8010d28:	460b      	movcc	r3, r1
 8010d2a:	429a      	cmp	r2, r3
 8010d2c:	d204      	bcs.n	8010d38 <tcp_process+0x210>
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010d32:	009b      	lsls	r3, r3, #2
 8010d34:	b29b      	uxth	r3, r3
 8010d36:	e00d      	b.n	8010d54 <tcp_process+0x22c>
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010d3c:	005b      	lsls	r3, r3, #1
 8010d3e:	f241 121c 	movw	r2, #4380	; 0x111c
 8010d42:	4293      	cmp	r3, r2
 8010d44:	d904      	bls.n	8010d50 <tcp_process+0x228>
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010d4a:	005b      	lsls	r3, r3, #1
 8010d4c:	b29b      	uxth	r3, r3
 8010d4e:	e001      	b.n	8010d54 <tcp_process+0x22c>
 8010d50:	f241 131c 	movw	r3, #4380	; 0x111c
 8010d54:	687a      	ldr	r2, [r7, #4]
 8010d56:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	d106      	bne.n	8010d72 <tcp_process+0x24a>
 8010d64:	4b1b      	ldr	r3, [pc, #108]	; (8010dd4 <tcp_process+0x2ac>)
 8010d66:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8010d6a:	4924      	ldr	r1, [pc, #144]	; (8010dfc <tcp_process+0x2d4>)
 8010d6c:	481b      	ldr	r0, [pc, #108]	; (8010ddc <tcp_process+0x2b4>)
 8010d6e:	f006 fcd1 	bl	8017714 <iprintf>
        --pcb->snd_queuelen;
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010d78:	3b01      	subs	r3, #1
 8010d7a:	b29a      	uxth	r2, r3
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010d86:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8010d88:	69fb      	ldr	r3, [r7, #28]
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	d111      	bne.n	8010db2 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010d92:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8010d94:	69fb      	ldr	r3, [r7, #28]
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	d106      	bne.n	8010da8 <tcp_process+0x280>
 8010d9a:	4b0e      	ldr	r3, [pc, #56]	; (8010dd4 <tcp_process+0x2ac>)
 8010d9c:	f44f 725d 	mov.w	r2, #884	; 0x374
 8010da0:	4917      	ldr	r1, [pc, #92]	; (8010e00 <tcp_process+0x2d8>)
 8010da2:	480e      	ldr	r0, [pc, #56]	; (8010ddc <tcp_process+0x2b4>)
 8010da4:	f006 fcb6 	bl	8017714 <iprintf>
          pcb->unsent = rseg->next;
 8010da8:	69fb      	ldr	r3, [r7, #28]
 8010daa:	681a      	ldr	r2, [r3, #0]
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	66da      	str	r2, [r3, #108]	; 0x6c
 8010db0:	e003      	b.n	8010dba <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 8010db2:	69fb      	ldr	r3, [r7, #28]
 8010db4:	681a      	ldr	r2, [r3, #0]
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8010dba:	69f8      	ldr	r0, [r7, #28]
 8010dbc:	f7fe fc92 	bl	800f6e4 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	d11d      	bne.n	8010e04 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010dce:	861a      	strh	r2, [r3, #48]	; 0x30
 8010dd0:	e01f      	b.n	8010e12 <tcp_process+0x2ea>
 8010dd2:	bf00      	nop
 8010dd4:	0801a610 	.word	0x0801a610
 8010dd8:	0801a848 	.word	0x0801a848
 8010ddc:	0801a65c 	.word	0x0801a65c
 8010de0:	20004570 	.word	0x20004570
 8010de4:	20004568 	.word	0x20004568
 8010de8:	20004564 	.word	0x20004564
 8010dec:	0801a864 	.word	0x0801a864
 8010df0:	20004571 	.word	0x20004571
 8010df4:	20009628 	.word	0x20009628
 8010df8:	20004554 	.word	0x20004554
 8010dfc:	0801a884 	.word	0x0801a884
 8010e00:	0801a89c 	.word	0x0801a89c
        } else {
          pcb->rtime = 0;
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	2200      	movs	r2, #0
 8010e08:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	2200      	movs	r2, #0
 8010e0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	d00a      	beq.n	8010e32 <tcp_process+0x30a>
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010e22:	687a      	ldr	r2, [r7, #4]
 8010e24:	6910      	ldr	r0, [r2, #16]
 8010e26:	2200      	movs	r2, #0
 8010e28:	6879      	ldr	r1, [r7, #4]
 8010e2a:	4798      	blx	r3
 8010e2c:	4603      	mov	r3, r0
 8010e2e:	76bb      	strb	r3, [r7, #26]
 8010e30:	e001      	b.n	8010e36 <tcp_process+0x30e>
 8010e32:	2300      	movs	r3, #0
 8010e34:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8010e36:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010e3a:	f113 0f0d 	cmn.w	r3, #13
 8010e3e:	d102      	bne.n	8010e46 <tcp_process+0x31e>
          return ERR_ABRT;
 8010e40:	f06f 030c 	mvn.w	r3, #12
 8010e44:	e250      	b.n	80112e8 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	8b5b      	ldrh	r3, [r3, #26]
 8010e4a:	f043 0302 	orr.w	r3, r3, #2
 8010e4e:	b29a      	uxth	r2, r3
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8010e54:	e23a      	b.n	80112cc <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8010e56:	4b9d      	ldr	r3, [pc, #628]	; (80110cc <tcp_process+0x5a4>)
 8010e58:	781b      	ldrb	r3, [r3, #0]
 8010e5a:	f003 0310 	and.w	r3, r3, #16
 8010e5e:	2b00      	cmp	r3, #0
 8010e60:	f000 8234 	beq.w	80112cc <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010e64:	4b9a      	ldr	r3, [pc, #616]	; (80110d0 <tcp_process+0x5a8>)
 8010e66:	6819      	ldr	r1, [r3, #0]
 8010e68:	4b9a      	ldr	r3, [pc, #616]	; (80110d4 <tcp_process+0x5ac>)
 8010e6a:	881b      	ldrh	r3, [r3, #0]
 8010e6c:	461a      	mov	r2, r3
 8010e6e:	4b9a      	ldr	r3, [pc, #616]	; (80110d8 <tcp_process+0x5b0>)
 8010e70:	681b      	ldr	r3, [r3, #0]
 8010e72:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010e74:	4b99      	ldr	r3, [pc, #612]	; (80110dc <tcp_process+0x5b4>)
 8010e76:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010e78:	885b      	ldrh	r3, [r3, #2]
 8010e7a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010e7c:	4a97      	ldr	r2, [pc, #604]	; (80110dc <tcp_process+0x5b4>)
 8010e7e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010e80:	8812      	ldrh	r2, [r2, #0]
 8010e82:	b292      	uxth	r2, r2
 8010e84:	9202      	str	r2, [sp, #8]
 8010e86:	9301      	str	r3, [sp, #4]
 8010e88:	4b95      	ldr	r3, [pc, #596]	; (80110e0 <tcp_process+0x5b8>)
 8010e8a:	9300      	str	r3, [sp, #0]
 8010e8c:	4b95      	ldr	r3, [pc, #596]	; (80110e4 <tcp_process+0x5bc>)
 8010e8e:	4602      	mov	r2, r0
 8010e90:	6878      	ldr	r0, [r7, #4]
 8010e92:	f003 f8fd 	bl	8014090 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010e9c:	2b05      	cmp	r3, #5
 8010e9e:	f200 8215 	bhi.w	80112cc <tcp_process+0x7a4>
          pcb->rtime = 0;
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	2200      	movs	r2, #0
 8010ea6:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8010ea8:	6878      	ldr	r0, [r7, #4]
 8010eaa:	f002 feb7 	bl	8013c1c <tcp_rexmit_rto>
      break;
 8010eae:	e20d      	b.n	80112cc <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8010eb0:	4b86      	ldr	r3, [pc, #536]	; (80110cc <tcp_process+0x5a4>)
 8010eb2:	781b      	ldrb	r3, [r3, #0]
 8010eb4:	f003 0310 	and.w	r3, r3, #16
 8010eb8:	2b00      	cmp	r3, #0
 8010eba:	f000 80a1 	beq.w	8011000 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010ebe:	4b84      	ldr	r3, [pc, #528]	; (80110d0 <tcp_process+0x5a8>)
 8010ec0:	681a      	ldr	r2, [r3, #0]
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010ec6:	1ad3      	subs	r3, r2, r3
 8010ec8:	3b01      	subs	r3, #1
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	db7e      	blt.n	8010fcc <tcp_process+0x4a4>
 8010ece:	4b80      	ldr	r3, [pc, #512]	; (80110d0 <tcp_process+0x5a8>)
 8010ed0:	681a      	ldr	r2, [r3, #0]
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010ed6:	1ad3      	subs	r3, r2, r3
 8010ed8:	2b00      	cmp	r3, #0
 8010eda:	dc77      	bgt.n	8010fcc <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	2204      	movs	r2, #4
 8010ee0:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010ee6:	2b00      	cmp	r3, #0
 8010ee8:	d102      	bne.n	8010ef0 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8010eea:	23fa      	movs	r3, #250	; 0xfa
 8010eec:	76bb      	strb	r3, [r7, #26]
 8010eee:	e01d      	b.n	8010f2c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010ef4:	699b      	ldr	r3, [r3, #24]
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	d106      	bne.n	8010f08 <tcp_process+0x3e0>
 8010efa:	4b7b      	ldr	r3, [pc, #492]	; (80110e8 <tcp_process+0x5c0>)
 8010efc:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8010f00:	497a      	ldr	r1, [pc, #488]	; (80110ec <tcp_process+0x5c4>)
 8010f02:	487b      	ldr	r0, [pc, #492]	; (80110f0 <tcp_process+0x5c8>)
 8010f04:	f006 fc06 	bl	8017714 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010f0c:	699b      	ldr	r3, [r3, #24]
 8010f0e:	2b00      	cmp	r3, #0
 8010f10:	d00a      	beq.n	8010f28 <tcp_process+0x400>
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010f16:	699b      	ldr	r3, [r3, #24]
 8010f18:	687a      	ldr	r2, [r7, #4]
 8010f1a:	6910      	ldr	r0, [r2, #16]
 8010f1c:	2200      	movs	r2, #0
 8010f1e:	6879      	ldr	r1, [r7, #4]
 8010f20:	4798      	blx	r3
 8010f22:	4603      	mov	r3, r0
 8010f24:	76bb      	strb	r3, [r7, #26]
 8010f26:	e001      	b.n	8010f2c <tcp_process+0x404>
 8010f28:	23f0      	movs	r3, #240	; 0xf0
 8010f2a:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8010f2c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	d00a      	beq.n	8010f4a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8010f34:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010f38:	f113 0f0d 	cmn.w	r3, #13
 8010f3c:	d002      	beq.n	8010f44 <tcp_process+0x41c>
              tcp_abort(pcb);
 8010f3e:	6878      	ldr	r0, [r7, #4]
 8010f40:	f7fd fd88 	bl	800ea54 <tcp_abort>
            }
            return ERR_ABRT;
 8010f44:	f06f 030c 	mvn.w	r3, #12
 8010f48:	e1ce      	b.n	80112e8 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8010f4a:	6878      	ldr	r0, [r7, #4]
 8010f4c:	f000 fae0 	bl	8011510 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8010f50:	4b68      	ldr	r3, [pc, #416]	; (80110f4 <tcp_process+0x5cc>)
 8010f52:	881b      	ldrh	r3, [r3, #0]
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	d005      	beq.n	8010f64 <tcp_process+0x43c>
            recv_acked--;
 8010f58:	4b66      	ldr	r3, [pc, #408]	; (80110f4 <tcp_process+0x5cc>)
 8010f5a:	881b      	ldrh	r3, [r3, #0]
 8010f5c:	3b01      	subs	r3, #1
 8010f5e:	b29a      	uxth	r2, r3
 8010f60:	4b64      	ldr	r3, [pc, #400]	; (80110f4 <tcp_process+0x5cc>)
 8010f62:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010f68:	009a      	lsls	r2, r3, #2
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010f6e:	005b      	lsls	r3, r3, #1
 8010f70:	f241 111c 	movw	r1, #4380	; 0x111c
 8010f74:	428b      	cmp	r3, r1
 8010f76:	bf38      	it	cc
 8010f78:	460b      	movcc	r3, r1
 8010f7a:	429a      	cmp	r2, r3
 8010f7c:	d204      	bcs.n	8010f88 <tcp_process+0x460>
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010f82:	009b      	lsls	r3, r3, #2
 8010f84:	b29b      	uxth	r3, r3
 8010f86:	e00d      	b.n	8010fa4 <tcp_process+0x47c>
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010f8c:	005b      	lsls	r3, r3, #1
 8010f8e:	f241 121c 	movw	r2, #4380	; 0x111c
 8010f92:	4293      	cmp	r3, r2
 8010f94:	d904      	bls.n	8010fa0 <tcp_process+0x478>
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010f9a:	005b      	lsls	r3, r3, #1
 8010f9c:	b29b      	uxth	r3, r3
 8010f9e:	e001      	b.n	8010fa4 <tcp_process+0x47c>
 8010fa0:	f241 131c 	movw	r3, #4380	; 0x111c
 8010fa4:	687a      	ldr	r2, [r7, #4]
 8010fa6:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8010faa:	4b53      	ldr	r3, [pc, #332]	; (80110f8 <tcp_process+0x5d0>)
 8010fac:	781b      	ldrb	r3, [r3, #0]
 8010fae:	f003 0320 	and.w	r3, r3, #32
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	d037      	beq.n	8011026 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	8b5b      	ldrh	r3, [r3, #26]
 8010fba:	f043 0302 	orr.w	r3, r3, #2
 8010fbe:	b29a      	uxth	r2, r3
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	2207      	movs	r2, #7
 8010fc8:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8010fca:	e02c      	b.n	8011026 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010fcc:	4b40      	ldr	r3, [pc, #256]	; (80110d0 <tcp_process+0x5a8>)
 8010fce:	6819      	ldr	r1, [r3, #0]
 8010fd0:	4b40      	ldr	r3, [pc, #256]	; (80110d4 <tcp_process+0x5ac>)
 8010fd2:	881b      	ldrh	r3, [r3, #0]
 8010fd4:	461a      	mov	r2, r3
 8010fd6:	4b40      	ldr	r3, [pc, #256]	; (80110d8 <tcp_process+0x5b0>)
 8010fd8:	681b      	ldr	r3, [r3, #0]
 8010fda:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010fdc:	4b3f      	ldr	r3, [pc, #252]	; (80110dc <tcp_process+0x5b4>)
 8010fde:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010fe0:	885b      	ldrh	r3, [r3, #2]
 8010fe2:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010fe4:	4a3d      	ldr	r2, [pc, #244]	; (80110dc <tcp_process+0x5b4>)
 8010fe6:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010fe8:	8812      	ldrh	r2, [r2, #0]
 8010fea:	b292      	uxth	r2, r2
 8010fec:	9202      	str	r2, [sp, #8]
 8010fee:	9301      	str	r3, [sp, #4]
 8010ff0:	4b3b      	ldr	r3, [pc, #236]	; (80110e0 <tcp_process+0x5b8>)
 8010ff2:	9300      	str	r3, [sp, #0]
 8010ff4:	4b3b      	ldr	r3, [pc, #236]	; (80110e4 <tcp_process+0x5bc>)
 8010ff6:	4602      	mov	r2, r0
 8010ff8:	6878      	ldr	r0, [r7, #4]
 8010ffa:	f003 f849 	bl	8014090 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8010ffe:	e167      	b.n	80112d0 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8011000:	4b32      	ldr	r3, [pc, #200]	; (80110cc <tcp_process+0x5a4>)
 8011002:	781b      	ldrb	r3, [r3, #0]
 8011004:	f003 0302 	and.w	r3, r3, #2
 8011008:	2b00      	cmp	r3, #0
 801100a:	f000 8161 	beq.w	80112d0 <tcp_process+0x7a8>
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011012:	1e5a      	subs	r2, r3, #1
 8011014:	4b30      	ldr	r3, [pc, #192]	; (80110d8 <tcp_process+0x5b0>)
 8011016:	681b      	ldr	r3, [r3, #0]
 8011018:	429a      	cmp	r2, r3
 801101a:	f040 8159 	bne.w	80112d0 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 801101e:	6878      	ldr	r0, [r7, #4]
 8011020:	f002 fe1e 	bl	8013c60 <tcp_rexmit>
      break;
 8011024:	e154      	b.n	80112d0 <tcp_process+0x7a8>
 8011026:	e153      	b.n	80112d0 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8011028:	6878      	ldr	r0, [r7, #4]
 801102a:	f000 fa71 	bl	8011510 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801102e:	4b32      	ldr	r3, [pc, #200]	; (80110f8 <tcp_process+0x5d0>)
 8011030:	781b      	ldrb	r3, [r3, #0]
 8011032:	f003 0320 	and.w	r3, r3, #32
 8011036:	2b00      	cmp	r3, #0
 8011038:	f000 814c 	beq.w	80112d4 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	8b5b      	ldrh	r3, [r3, #26]
 8011040:	f043 0302 	orr.w	r3, r3, #2
 8011044:	b29a      	uxth	r2, r3
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	2207      	movs	r2, #7
 801104e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011050:	e140      	b.n	80112d4 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8011052:	6878      	ldr	r0, [r7, #4]
 8011054:	f000 fa5c 	bl	8011510 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8011058:	4b27      	ldr	r3, [pc, #156]	; (80110f8 <tcp_process+0x5d0>)
 801105a:	781b      	ldrb	r3, [r3, #0]
 801105c:	f003 0320 	and.w	r3, r3, #32
 8011060:	2b00      	cmp	r3, #0
 8011062:	d071      	beq.n	8011148 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011064:	4b19      	ldr	r3, [pc, #100]	; (80110cc <tcp_process+0x5a4>)
 8011066:	781b      	ldrb	r3, [r3, #0]
 8011068:	f003 0310 	and.w	r3, r3, #16
 801106c:	2b00      	cmp	r3, #0
 801106e:	d060      	beq.n	8011132 <tcp_process+0x60a>
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011074:	4b16      	ldr	r3, [pc, #88]	; (80110d0 <tcp_process+0x5a8>)
 8011076:	681b      	ldr	r3, [r3, #0]
 8011078:	429a      	cmp	r2, r3
 801107a:	d15a      	bne.n	8011132 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011080:	2b00      	cmp	r3, #0
 8011082:	d156      	bne.n	8011132 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	8b5b      	ldrh	r3, [r3, #26]
 8011088:	f043 0302 	orr.w	r3, r3, #2
 801108c:	b29a      	uxth	r2, r3
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8011092:	6878      	ldr	r0, [r7, #4]
 8011094:	f7fe fdc2 	bl	800fc1c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8011098:	4b18      	ldr	r3, [pc, #96]	; (80110fc <tcp_process+0x5d4>)
 801109a:	681a      	ldr	r2, [r3, #0]
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	429a      	cmp	r2, r3
 80110a0:	d105      	bne.n	80110ae <tcp_process+0x586>
 80110a2:	4b16      	ldr	r3, [pc, #88]	; (80110fc <tcp_process+0x5d4>)
 80110a4:	681b      	ldr	r3, [r3, #0]
 80110a6:	68db      	ldr	r3, [r3, #12]
 80110a8:	4a14      	ldr	r2, [pc, #80]	; (80110fc <tcp_process+0x5d4>)
 80110aa:	6013      	str	r3, [r2, #0]
 80110ac:	e02e      	b.n	801110c <tcp_process+0x5e4>
 80110ae:	4b13      	ldr	r3, [pc, #76]	; (80110fc <tcp_process+0x5d4>)
 80110b0:	681b      	ldr	r3, [r3, #0]
 80110b2:	617b      	str	r3, [r7, #20]
 80110b4:	e027      	b.n	8011106 <tcp_process+0x5de>
 80110b6:	697b      	ldr	r3, [r7, #20]
 80110b8:	68da      	ldr	r2, [r3, #12]
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	429a      	cmp	r2, r3
 80110be:	d11f      	bne.n	8011100 <tcp_process+0x5d8>
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	68da      	ldr	r2, [r3, #12]
 80110c4:	697b      	ldr	r3, [r7, #20]
 80110c6:	60da      	str	r2, [r3, #12]
 80110c8:	e020      	b.n	801110c <tcp_process+0x5e4>
 80110ca:	bf00      	nop
 80110cc:	20004570 	.word	0x20004570
 80110d0:	20004568 	.word	0x20004568
 80110d4:	2000456e 	.word	0x2000456e
 80110d8:	20004564 	.word	0x20004564
 80110dc:	20004554 	.word	0x20004554
 80110e0:	20004824 	.word	0x20004824
 80110e4:	20004828 	.word	0x20004828
 80110e8:	0801a610 	.word	0x0801a610
 80110ec:	0801a8b0 	.word	0x0801a8b0
 80110f0:	0801a65c 	.word	0x0801a65c
 80110f4:	2000456c 	.word	0x2000456c
 80110f8:	20004571 	.word	0x20004571
 80110fc:	20009624 	.word	0x20009624
 8011100:	697b      	ldr	r3, [r7, #20]
 8011102:	68db      	ldr	r3, [r3, #12]
 8011104:	617b      	str	r3, [r7, #20]
 8011106:	697b      	ldr	r3, [r7, #20]
 8011108:	2b00      	cmp	r3, #0
 801110a:	d1d4      	bne.n	80110b6 <tcp_process+0x58e>
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	2200      	movs	r2, #0
 8011110:	60da      	str	r2, [r3, #12]
 8011112:	4b77      	ldr	r3, [pc, #476]	; (80112f0 <tcp_process+0x7c8>)
 8011114:	2201      	movs	r2, #1
 8011116:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	220a      	movs	r2, #10
 801111c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 801111e:	4b75      	ldr	r3, [pc, #468]	; (80112f4 <tcp_process+0x7cc>)
 8011120:	681a      	ldr	r2, [r3, #0]
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	60da      	str	r2, [r3, #12]
 8011126:	4a73      	ldr	r2, [pc, #460]	; (80112f4 <tcp_process+0x7cc>)
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	6013      	str	r3, [r2, #0]
 801112c:	f003 f974 	bl	8014418 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8011130:	e0d2      	b.n	80112d8 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	8b5b      	ldrh	r3, [r3, #26]
 8011136:	f043 0302 	orr.w	r3, r3, #2
 801113a:	b29a      	uxth	r2, r3
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	2208      	movs	r2, #8
 8011144:	751a      	strb	r2, [r3, #20]
      break;
 8011146:	e0c7      	b.n	80112d8 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011148:	4b6b      	ldr	r3, [pc, #428]	; (80112f8 <tcp_process+0x7d0>)
 801114a:	781b      	ldrb	r3, [r3, #0]
 801114c:	f003 0310 	and.w	r3, r3, #16
 8011150:	2b00      	cmp	r3, #0
 8011152:	f000 80c1 	beq.w	80112d8 <tcp_process+0x7b0>
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801115a:	4b68      	ldr	r3, [pc, #416]	; (80112fc <tcp_process+0x7d4>)
 801115c:	681b      	ldr	r3, [r3, #0]
 801115e:	429a      	cmp	r2, r3
 8011160:	f040 80ba 	bne.w	80112d8 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011168:	2b00      	cmp	r3, #0
 801116a:	f040 80b5 	bne.w	80112d8 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	2206      	movs	r2, #6
 8011172:	751a      	strb	r2, [r3, #20]
      break;
 8011174:	e0b0      	b.n	80112d8 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8011176:	6878      	ldr	r0, [r7, #4]
 8011178:	f000 f9ca 	bl	8011510 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801117c:	4b60      	ldr	r3, [pc, #384]	; (8011300 <tcp_process+0x7d8>)
 801117e:	781b      	ldrb	r3, [r3, #0]
 8011180:	f003 0320 	and.w	r3, r3, #32
 8011184:	2b00      	cmp	r3, #0
 8011186:	f000 80a9 	beq.w	80112dc <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	8b5b      	ldrh	r3, [r3, #26]
 801118e:	f043 0302 	orr.w	r3, r3, #2
 8011192:	b29a      	uxth	r2, r3
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8011198:	6878      	ldr	r0, [r7, #4]
 801119a:	f7fe fd3f 	bl	800fc1c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801119e:	4b59      	ldr	r3, [pc, #356]	; (8011304 <tcp_process+0x7dc>)
 80111a0:	681a      	ldr	r2, [r3, #0]
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	429a      	cmp	r2, r3
 80111a6:	d105      	bne.n	80111b4 <tcp_process+0x68c>
 80111a8:	4b56      	ldr	r3, [pc, #344]	; (8011304 <tcp_process+0x7dc>)
 80111aa:	681b      	ldr	r3, [r3, #0]
 80111ac:	68db      	ldr	r3, [r3, #12]
 80111ae:	4a55      	ldr	r2, [pc, #340]	; (8011304 <tcp_process+0x7dc>)
 80111b0:	6013      	str	r3, [r2, #0]
 80111b2:	e013      	b.n	80111dc <tcp_process+0x6b4>
 80111b4:	4b53      	ldr	r3, [pc, #332]	; (8011304 <tcp_process+0x7dc>)
 80111b6:	681b      	ldr	r3, [r3, #0]
 80111b8:	613b      	str	r3, [r7, #16]
 80111ba:	e00c      	b.n	80111d6 <tcp_process+0x6ae>
 80111bc:	693b      	ldr	r3, [r7, #16]
 80111be:	68da      	ldr	r2, [r3, #12]
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	429a      	cmp	r2, r3
 80111c4:	d104      	bne.n	80111d0 <tcp_process+0x6a8>
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	68da      	ldr	r2, [r3, #12]
 80111ca:	693b      	ldr	r3, [r7, #16]
 80111cc:	60da      	str	r2, [r3, #12]
 80111ce:	e005      	b.n	80111dc <tcp_process+0x6b4>
 80111d0:	693b      	ldr	r3, [r7, #16]
 80111d2:	68db      	ldr	r3, [r3, #12]
 80111d4:	613b      	str	r3, [r7, #16]
 80111d6:	693b      	ldr	r3, [r7, #16]
 80111d8:	2b00      	cmp	r3, #0
 80111da:	d1ef      	bne.n	80111bc <tcp_process+0x694>
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	2200      	movs	r2, #0
 80111e0:	60da      	str	r2, [r3, #12]
 80111e2:	4b43      	ldr	r3, [pc, #268]	; (80112f0 <tcp_process+0x7c8>)
 80111e4:	2201      	movs	r2, #1
 80111e6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	220a      	movs	r2, #10
 80111ec:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80111ee:	4b41      	ldr	r3, [pc, #260]	; (80112f4 <tcp_process+0x7cc>)
 80111f0:	681a      	ldr	r2, [r3, #0]
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	60da      	str	r2, [r3, #12]
 80111f6:	4a3f      	ldr	r2, [pc, #252]	; (80112f4 <tcp_process+0x7cc>)
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	6013      	str	r3, [r2, #0]
 80111fc:	f003 f90c 	bl	8014418 <tcp_timer_needed>
      }
      break;
 8011200:	e06c      	b.n	80112dc <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8011202:	6878      	ldr	r0, [r7, #4]
 8011204:	f000 f984 	bl	8011510 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8011208:	4b3b      	ldr	r3, [pc, #236]	; (80112f8 <tcp_process+0x7d0>)
 801120a:	781b      	ldrb	r3, [r3, #0]
 801120c:	f003 0310 	and.w	r3, r3, #16
 8011210:	2b00      	cmp	r3, #0
 8011212:	d065      	beq.n	80112e0 <tcp_process+0x7b8>
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011218:	4b38      	ldr	r3, [pc, #224]	; (80112fc <tcp_process+0x7d4>)
 801121a:	681b      	ldr	r3, [r3, #0]
 801121c:	429a      	cmp	r2, r3
 801121e:	d15f      	bne.n	80112e0 <tcp_process+0x7b8>
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011224:	2b00      	cmp	r3, #0
 8011226:	d15b      	bne.n	80112e0 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8011228:	6878      	ldr	r0, [r7, #4]
 801122a:	f7fe fcf7 	bl	800fc1c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801122e:	4b35      	ldr	r3, [pc, #212]	; (8011304 <tcp_process+0x7dc>)
 8011230:	681a      	ldr	r2, [r3, #0]
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	429a      	cmp	r2, r3
 8011236:	d105      	bne.n	8011244 <tcp_process+0x71c>
 8011238:	4b32      	ldr	r3, [pc, #200]	; (8011304 <tcp_process+0x7dc>)
 801123a:	681b      	ldr	r3, [r3, #0]
 801123c:	68db      	ldr	r3, [r3, #12]
 801123e:	4a31      	ldr	r2, [pc, #196]	; (8011304 <tcp_process+0x7dc>)
 8011240:	6013      	str	r3, [r2, #0]
 8011242:	e013      	b.n	801126c <tcp_process+0x744>
 8011244:	4b2f      	ldr	r3, [pc, #188]	; (8011304 <tcp_process+0x7dc>)
 8011246:	681b      	ldr	r3, [r3, #0]
 8011248:	60fb      	str	r3, [r7, #12]
 801124a:	e00c      	b.n	8011266 <tcp_process+0x73e>
 801124c:	68fb      	ldr	r3, [r7, #12]
 801124e:	68da      	ldr	r2, [r3, #12]
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	429a      	cmp	r2, r3
 8011254:	d104      	bne.n	8011260 <tcp_process+0x738>
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	68da      	ldr	r2, [r3, #12]
 801125a:	68fb      	ldr	r3, [r7, #12]
 801125c:	60da      	str	r2, [r3, #12]
 801125e:	e005      	b.n	801126c <tcp_process+0x744>
 8011260:	68fb      	ldr	r3, [r7, #12]
 8011262:	68db      	ldr	r3, [r3, #12]
 8011264:	60fb      	str	r3, [r7, #12]
 8011266:	68fb      	ldr	r3, [r7, #12]
 8011268:	2b00      	cmp	r3, #0
 801126a:	d1ef      	bne.n	801124c <tcp_process+0x724>
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	2200      	movs	r2, #0
 8011270:	60da      	str	r2, [r3, #12]
 8011272:	4b1f      	ldr	r3, [pc, #124]	; (80112f0 <tcp_process+0x7c8>)
 8011274:	2201      	movs	r2, #1
 8011276:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	220a      	movs	r2, #10
 801127c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801127e:	4b1d      	ldr	r3, [pc, #116]	; (80112f4 <tcp_process+0x7cc>)
 8011280:	681a      	ldr	r2, [r3, #0]
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	60da      	str	r2, [r3, #12]
 8011286:	4a1b      	ldr	r2, [pc, #108]	; (80112f4 <tcp_process+0x7cc>)
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	6013      	str	r3, [r2, #0]
 801128c:	f003 f8c4 	bl	8014418 <tcp_timer_needed>
      }
      break;
 8011290:	e026      	b.n	80112e0 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8011292:	6878      	ldr	r0, [r7, #4]
 8011294:	f000 f93c 	bl	8011510 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8011298:	4b17      	ldr	r3, [pc, #92]	; (80112f8 <tcp_process+0x7d0>)
 801129a:	781b      	ldrb	r3, [r3, #0]
 801129c:	f003 0310 	and.w	r3, r3, #16
 80112a0:	2b00      	cmp	r3, #0
 80112a2:	d01f      	beq.n	80112e4 <tcp_process+0x7bc>
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80112a8:	4b14      	ldr	r3, [pc, #80]	; (80112fc <tcp_process+0x7d4>)
 80112aa:	681b      	ldr	r3, [r3, #0]
 80112ac:	429a      	cmp	r2, r3
 80112ae:	d119      	bne.n	80112e4 <tcp_process+0x7bc>
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	d115      	bne.n	80112e4 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 80112b8:	4b11      	ldr	r3, [pc, #68]	; (8011300 <tcp_process+0x7d8>)
 80112ba:	781b      	ldrb	r3, [r3, #0]
 80112bc:	f043 0310 	orr.w	r3, r3, #16
 80112c0:	b2da      	uxtb	r2, r3
 80112c2:	4b0f      	ldr	r3, [pc, #60]	; (8011300 <tcp_process+0x7d8>)
 80112c4:	701a      	strb	r2, [r3, #0]
      }
      break;
 80112c6:	e00d      	b.n	80112e4 <tcp_process+0x7bc>
    default:
      break;
 80112c8:	bf00      	nop
 80112ca:	e00c      	b.n	80112e6 <tcp_process+0x7be>
      break;
 80112cc:	bf00      	nop
 80112ce:	e00a      	b.n	80112e6 <tcp_process+0x7be>
      break;
 80112d0:	bf00      	nop
 80112d2:	e008      	b.n	80112e6 <tcp_process+0x7be>
      break;
 80112d4:	bf00      	nop
 80112d6:	e006      	b.n	80112e6 <tcp_process+0x7be>
      break;
 80112d8:	bf00      	nop
 80112da:	e004      	b.n	80112e6 <tcp_process+0x7be>
      break;
 80112dc:	bf00      	nop
 80112de:	e002      	b.n	80112e6 <tcp_process+0x7be>
      break;
 80112e0:	bf00      	nop
 80112e2:	e000      	b.n	80112e6 <tcp_process+0x7be>
      break;
 80112e4:	bf00      	nop
  }
  return ERR_OK;
 80112e6:	2300      	movs	r3, #0
}
 80112e8:	4618      	mov	r0, r3
 80112ea:	3724      	adds	r7, #36	; 0x24
 80112ec:	46bd      	mov	sp, r7
 80112ee:	bd90      	pop	{r4, r7, pc}
 80112f0:	20009620 	.word	0x20009620
 80112f4:	20009634 	.word	0x20009634
 80112f8:	20004570 	.word	0x20004570
 80112fc:	20004568 	.word	0x20004568
 8011300:	20004571 	.word	0x20004571
 8011304:	20009624 	.word	0x20009624

08011308 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8011308:	b5b0      	push	{r4, r5, r7, lr}
 801130a:	b084      	sub	sp, #16
 801130c:	af00      	add	r7, sp, #0
 801130e:	6078      	str	r0, [r7, #4]
 8011310:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	2b00      	cmp	r3, #0
 8011316:	d106      	bne.n	8011326 <tcp_oos_insert_segment+0x1e>
 8011318:	4b3b      	ldr	r3, [pc, #236]	; (8011408 <tcp_oos_insert_segment+0x100>)
 801131a:	f240 421f 	movw	r2, #1055	; 0x41f
 801131e:	493b      	ldr	r1, [pc, #236]	; (801140c <tcp_oos_insert_segment+0x104>)
 8011320:	483b      	ldr	r0, [pc, #236]	; (8011410 <tcp_oos_insert_segment+0x108>)
 8011322:	f006 f9f7 	bl	8017714 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	68db      	ldr	r3, [r3, #12]
 801132a:	899b      	ldrh	r3, [r3, #12]
 801132c:	b29b      	uxth	r3, r3
 801132e:	4618      	mov	r0, r3
 8011330:	f7f7 fc74 	bl	8008c1c <lwip_htons>
 8011334:	4603      	mov	r3, r0
 8011336:	b2db      	uxtb	r3, r3
 8011338:	f003 0301 	and.w	r3, r3, #1
 801133c:	2b00      	cmp	r3, #0
 801133e:	d027      	beq.n	8011390 <tcp_oos_insert_segment+0x88>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8011340:	6838      	ldr	r0, [r7, #0]
 8011342:	f7fe f9bb 	bl	800f6bc <tcp_segs_free>
    next = NULL;
 8011346:	2300      	movs	r3, #0
 8011348:	603b      	str	r3, [r7, #0]
 801134a:	e055      	b.n	80113f8 <tcp_oos_insert_segment+0xf0>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801134c:	683b      	ldr	r3, [r7, #0]
 801134e:	68db      	ldr	r3, [r3, #12]
 8011350:	899b      	ldrh	r3, [r3, #12]
 8011352:	b29b      	uxth	r3, r3
 8011354:	4618      	mov	r0, r3
 8011356:	f7f7 fc61 	bl	8008c1c <lwip_htons>
 801135a:	4603      	mov	r3, r0
 801135c:	b2db      	uxtb	r3, r3
 801135e:	f003 0301 	and.w	r3, r3, #1
 8011362:	2b00      	cmp	r3, #0
 8011364:	d00c      	beq.n	8011380 <tcp_oos_insert_segment+0x78>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	68dc      	ldr	r4, [r3, #12]
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	68db      	ldr	r3, [r3, #12]
 801136e:	899b      	ldrh	r3, [r3, #12]
 8011370:	b29d      	uxth	r5, r3
 8011372:	2001      	movs	r0, #1
 8011374:	f7f7 fc52 	bl	8008c1c <lwip_htons>
 8011378:	4603      	mov	r3, r0
 801137a:	432b      	orrs	r3, r5
 801137c:	b29b      	uxth	r3, r3
 801137e:	81a3      	strh	r3, [r4, #12]
      }
      old_seg = next;
 8011380:	683b      	ldr	r3, [r7, #0]
 8011382:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8011384:	683b      	ldr	r3, [r7, #0]
 8011386:	681b      	ldr	r3, [r3, #0]
 8011388:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 801138a:	68f8      	ldr	r0, [r7, #12]
 801138c:	f7fe f9aa 	bl	800f6e4 <tcp_seg_free>
    while (next &&
 8011390:	683b      	ldr	r3, [r7, #0]
 8011392:	2b00      	cmp	r3, #0
 8011394:	d00e      	beq.n	80113b4 <tcp_oos_insert_segment+0xac>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	891b      	ldrh	r3, [r3, #8]
 801139a:	461a      	mov	r2, r3
 801139c:	4b1d      	ldr	r3, [pc, #116]	; (8011414 <tcp_oos_insert_segment+0x10c>)
 801139e:	681b      	ldr	r3, [r3, #0]
 80113a0:	441a      	add	r2, r3
 80113a2:	683b      	ldr	r3, [r7, #0]
 80113a4:	68db      	ldr	r3, [r3, #12]
 80113a6:	685b      	ldr	r3, [r3, #4]
 80113a8:	6839      	ldr	r1, [r7, #0]
 80113aa:	8909      	ldrh	r1, [r1, #8]
 80113ac:	440b      	add	r3, r1
 80113ae:	1ad3      	subs	r3, r2, r3
    while (next &&
 80113b0:	2b00      	cmp	r3, #0
 80113b2:	dacb      	bge.n	801134c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 80113b4:	683b      	ldr	r3, [r7, #0]
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	d01e      	beq.n	80113f8 <tcp_oos_insert_segment+0xf0>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	891b      	ldrh	r3, [r3, #8]
 80113be:	461a      	mov	r2, r3
 80113c0:	4b14      	ldr	r3, [pc, #80]	; (8011414 <tcp_oos_insert_segment+0x10c>)
 80113c2:	681b      	ldr	r3, [r3, #0]
 80113c4:	441a      	add	r2, r3
 80113c6:	683b      	ldr	r3, [r7, #0]
 80113c8:	68db      	ldr	r3, [r3, #12]
 80113ca:	685b      	ldr	r3, [r3, #4]
 80113cc:	1ad3      	subs	r3, r2, r3
    if (next &&
 80113ce:	2b00      	cmp	r3, #0
 80113d0:	dd12      	ble.n	80113f8 <tcp_oos_insert_segment+0xf0>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80113d2:	683b      	ldr	r3, [r7, #0]
 80113d4:	68db      	ldr	r3, [r3, #12]
 80113d6:	685b      	ldr	r3, [r3, #4]
 80113d8:	b29a      	uxth	r2, r3
 80113da:	4b0e      	ldr	r3, [pc, #56]	; (8011414 <tcp_oos_insert_segment+0x10c>)
 80113dc:	681b      	ldr	r3, [r3, #0]
 80113de:	b29b      	uxth	r3, r3
 80113e0:	1ad3      	subs	r3, r2, r3
 80113e2:	b29a      	uxth	r2, r3
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	685a      	ldr	r2, [r3, #4]
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	891b      	ldrh	r3, [r3, #8]
 80113f0:	4619      	mov	r1, r3
 80113f2:	4610      	mov	r0, r2
 80113f4:	f7fc f9b8 	bl	800d768 <pbuf_realloc>
    }
  }
  cseg->next = next;
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	683a      	ldr	r2, [r7, #0]
 80113fc:	601a      	str	r2, [r3, #0]
}
 80113fe:	bf00      	nop
 8011400:	3710      	adds	r7, #16
 8011402:	46bd      	mov	sp, r7
 8011404:	bdb0      	pop	{r4, r5, r7, pc}
 8011406:	bf00      	nop
 8011408:	0801a610 	.word	0x0801a610
 801140c:	0801a8d0 	.word	0x0801a8d0
 8011410:	0801a65c 	.word	0x0801a65c
 8011414:	20004564 	.word	0x20004564

08011418 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8011418:	b5b0      	push	{r4, r5, r7, lr}
 801141a:	b086      	sub	sp, #24
 801141c:	af00      	add	r7, sp, #0
 801141e:	60f8      	str	r0, [r7, #12]
 8011420:	60b9      	str	r1, [r7, #8]
 8011422:	607a      	str	r2, [r7, #4]
 8011424:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8011426:	e03e      	b.n	80114a6 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8011428:	68bb      	ldr	r3, [r7, #8]
 801142a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 801142c:	68bb      	ldr	r3, [r7, #8]
 801142e:	681b      	ldr	r3, [r3, #0]
 8011430:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8011432:	697b      	ldr	r3, [r7, #20]
 8011434:	685b      	ldr	r3, [r3, #4]
 8011436:	4618      	mov	r0, r3
 8011438:	f7fc fbde 	bl	800dbf8 <pbuf_clen>
 801143c:	4603      	mov	r3, r0
 801143e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8011440:	68fb      	ldr	r3, [r7, #12]
 8011442:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011446:	8a7a      	ldrh	r2, [r7, #18]
 8011448:	429a      	cmp	r2, r3
 801144a:	d906      	bls.n	801145a <tcp_free_acked_segments+0x42>
 801144c:	4b2a      	ldr	r3, [pc, #168]	; (80114f8 <tcp_free_acked_segments+0xe0>)
 801144e:	f240 4257 	movw	r2, #1111	; 0x457
 8011452:	492a      	ldr	r1, [pc, #168]	; (80114fc <tcp_free_acked_segments+0xe4>)
 8011454:	482a      	ldr	r0, [pc, #168]	; (8011500 <tcp_free_acked_segments+0xe8>)
 8011456:	f006 f95d 	bl	8017714 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801145a:	68fb      	ldr	r3, [r7, #12]
 801145c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8011460:	8a7b      	ldrh	r3, [r7, #18]
 8011462:	1ad3      	subs	r3, r2, r3
 8011464:	b29a      	uxth	r2, r3
 8011466:	68fb      	ldr	r3, [r7, #12]
 8011468:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801146c:	697b      	ldr	r3, [r7, #20]
 801146e:	891a      	ldrh	r2, [r3, #8]
 8011470:	4b24      	ldr	r3, [pc, #144]	; (8011504 <tcp_free_acked_segments+0xec>)
 8011472:	881b      	ldrh	r3, [r3, #0]
 8011474:	4413      	add	r3, r2
 8011476:	b29a      	uxth	r2, r3
 8011478:	4b22      	ldr	r3, [pc, #136]	; (8011504 <tcp_free_acked_segments+0xec>)
 801147a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 801147c:	6978      	ldr	r0, [r7, #20]
 801147e:	f7fe f931 	bl	800f6e4 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8011482:	68fb      	ldr	r3, [r7, #12]
 8011484:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011488:	2b00      	cmp	r3, #0
 801148a:	d00c      	beq.n	80114a6 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 801148c:	68bb      	ldr	r3, [r7, #8]
 801148e:	2b00      	cmp	r3, #0
 8011490:	d109      	bne.n	80114a6 <tcp_free_acked_segments+0x8e>
 8011492:	683b      	ldr	r3, [r7, #0]
 8011494:	2b00      	cmp	r3, #0
 8011496:	d106      	bne.n	80114a6 <tcp_free_acked_segments+0x8e>
 8011498:	4b17      	ldr	r3, [pc, #92]	; (80114f8 <tcp_free_acked_segments+0xe0>)
 801149a:	f240 4262 	movw	r2, #1122	; 0x462
 801149e:	491a      	ldr	r1, [pc, #104]	; (8011508 <tcp_free_acked_segments+0xf0>)
 80114a0:	4817      	ldr	r0, [pc, #92]	; (8011500 <tcp_free_acked_segments+0xe8>)
 80114a2:	f006 f937 	bl	8017714 <iprintf>
  while (seg_list != NULL &&
 80114a6:	68bb      	ldr	r3, [r7, #8]
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	d020      	beq.n	80114ee <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80114ac:	68bb      	ldr	r3, [r7, #8]
 80114ae:	68db      	ldr	r3, [r3, #12]
 80114b0:	685b      	ldr	r3, [r3, #4]
 80114b2:	4618      	mov	r0, r3
 80114b4:	f7f7 fbc7 	bl	8008c46 <lwip_htonl>
 80114b8:	4604      	mov	r4, r0
 80114ba:	68bb      	ldr	r3, [r7, #8]
 80114bc:	891b      	ldrh	r3, [r3, #8]
 80114be:	461d      	mov	r5, r3
 80114c0:	68bb      	ldr	r3, [r7, #8]
 80114c2:	68db      	ldr	r3, [r3, #12]
 80114c4:	899b      	ldrh	r3, [r3, #12]
 80114c6:	b29b      	uxth	r3, r3
 80114c8:	4618      	mov	r0, r3
 80114ca:	f7f7 fba7 	bl	8008c1c <lwip_htons>
 80114ce:	4603      	mov	r3, r0
 80114d0:	b2db      	uxtb	r3, r3
 80114d2:	f003 0303 	and.w	r3, r3, #3
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	d001      	beq.n	80114de <tcp_free_acked_segments+0xc6>
 80114da:	2301      	movs	r3, #1
 80114dc:	e000      	b.n	80114e0 <tcp_free_acked_segments+0xc8>
 80114de:	2300      	movs	r3, #0
 80114e0:	442b      	add	r3, r5
 80114e2:	18e2      	adds	r2, r4, r3
 80114e4:	4b09      	ldr	r3, [pc, #36]	; (801150c <tcp_free_acked_segments+0xf4>)
 80114e6:	681b      	ldr	r3, [r3, #0]
 80114e8:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	dd9c      	ble.n	8011428 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80114ee:	68bb      	ldr	r3, [r7, #8]
}
 80114f0:	4618      	mov	r0, r3
 80114f2:	3718      	adds	r7, #24
 80114f4:	46bd      	mov	sp, r7
 80114f6:	bdb0      	pop	{r4, r5, r7, pc}
 80114f8:	0801a610 	.word	0x0801a610
 80114fc:	0801a8f8 	.word	0x0801a8f8
 8011500:	0801a65c 	.word	0x0801a65c
 8011504:	2000456c 	.word	0x2000456c
 8011508:	0801a920 	.word	0x0801a920
 801150c:	20004568 	.word	0x20004568

08011510 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8011510:	b5b0      	push	{r4, r5, r7, lr}
 8011512:	b094      	sub	sp, #80	; 0x50
 8011514:	af00      	add	r7, sp, #0
 8011516:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8011518:	2300      	movs	r3, #0
 801151a:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	2b00      	cmp	r3, #0
 8011520:	d106      	bne.n	8011530 <tcp_receive+0x20>
 8011522:	4ba6      	ldr	r3, [pc, #664]	; (80117bc <tcp_receive+0x2ac>)
 8011524:	f240 427b 	movw	r2, #1147	; 0x47b
 8011528:	49a5      	ldr	r1, [pc, #660]	; (80117c0 <tcp_receive+0x2b0>)
 801152a:	48a6      	ldr	r0, [pc, #664]	; (80117c4 <tcp_receive+0x2b4>)
 801152c:	f006 f8f2 	bl	8017714 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	7d1b      	ldrb	r3, [r3, #20]
 8011534:	2b03      	cmp	r3, #3
 8011536:	d806      	bhi.n	8011546 <tcp_receive+0x36>
 8011538:	4ba0      	ldr	r3, [pc, #640]	; (80117bc <tcp_receive+0x2ac>)
 801153a:	f240 427c 	movw	r2, #1148	; 0x47c
 801153e:	49a2      	ldr	r1, [pc, #648]	; (80117c8 <tcp_receive+0x2b8>)
 8011540:	48a0      	ldr	r0, [pc, #640]	; (80117c4 <tcp_receive+0x2b4>)
 8011542:	f006 f8e7 	bl	8017714 <iprintf>

  if (flags & TCP_ACK) {
 8011546:	4ba1      	ldr	r3, [pc, #644]	; (80117cc <tcp_receive+0x2bc>)
 8011548:	781b      	ldrb	r3, [r3, #0]
 801154a:	f003 0310 	and.w	r3, r3, #16
 801154e:	2b00      	cmp	r3, #0
 8011550:	f000 8269 	beq.w	8011a26 <tcp_receive+0x516>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801155a:	461a      	mov	r2, r3
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011560:	4413      	add	r3, r2
 8011562:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011568:	4b99      	ldr	r3, [pc, #612]	; (80117d0 <tcp_receive+0x2c0>)
 801156a:	681b      	ldr	r3, [r3, #0]
 801156c:	1ad3      	subs	r3, r2, r3
 801156e:	2b00      	cmp	r3, #0
 8011570:	db1b      	blt.n	80115aa <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011576:	4b96      	ldr	r3, [pc, #600]	; (80117d0 <tcp_receive+0x2c0>)
 8011578:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801157a:	429a      	cmp	r2, r3
 801157c:	d106      	bne.n	801158c <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011582:	4b94      	ldr	r3, [pc, #592]	; (80117d4 <tcp_receive+0x2c4>)
 8011584:	681b      	ldr	r3, [r3, #0]
 8011586:	1ad3      	subs	r3, r2, r3
 8011588:	2b00      	cmp	r3, #0
 801158a:	db0e      	blt.n	80115aa <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011590:	4b90      	ldr	r3, [pc, #576]	; (80117d4 <tcp_receive+0x2c4>)
 8011592:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011594:	429a      	cmp	r2, r3
 8011596:	d125      	bne.n	80115e4 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8011598:	4b8f      	ldr	r3, [pc, #572]	; (80117d8 <tcp_receive+0x2c8>)
 801159a:	681b      	ldr	r3, [r3, #0]
 801159c:	89db      	ldrh	r3, [r3, #14]
 801159e:	b29a      	uxth	r2, r3
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80115a6:	429a      	cmp	r2, r3
 80115a8:	d91c      	bls.n	80115e4 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80115aa:	4b8b      	ldr	r3, [pc, #556]	; (80117d8 <tcp_receive+0x2c8>)
 80115ac:	681b      	ldr	r3, [r3, #0]
 80115ae:	89db      	ldrh	r3, [r3, #14]
 80115b0:	b29a      	uxth	r2, r3
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80115c4:	429a      	cmp	r2, r3
 80115c6:	d205      	bcs.n	80115d4 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 80115d4:	4b7e      	ldr	r3, [pc, #504]	; (80117d0 <tcp_receive+0x2c0>)
 80115d6:	681a      	ldr	r2, [r3, #0]
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 80115dc:	4b7d      	ldr	r3, [pc, #500]	; (80117d4 <tcp_receive+0x2c4>)
 80115de:	681a      	ldr	r2, [r3, #0]
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80115e4:	4b7b      	ldr	r3, [pc, #492]	; (80117d4 <tcp_receive+0x2c4>)
 80115e6:	681a      	ldr	r2, [r3, #0]
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80115ec:	1ad3      	subs	r3, r2, r3
 80115ee:	2b00      	cmp	r3, #0
 80115f0:	dc5d      	bgt.n	80116ae <tcp_receive+0x19e>
      /* Clause 2 */
      if (tcplen == 0) {
 80115f2:	4b7a      	ldr	r3, [pc, #488]	; (80117dc <tcp_receive+0x2cc>)
 80115f4:	881b      	ldrh	r3, [r3, #0]
 80115f6:	2b00      	cmp	r3, #0
 80115f8:	d150      	bne.n	801169c <tcp_receive+0x18c>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80115fe:	687a      	ldr	r2, [r7, #4]
 8011600:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8011604:	441a      	add	r2, r3
 8011606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011608:	429a      	cmp	r2, r3
 801160a:	d147      	bne.n	801169c <tcp_receive+0x18c>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 801160c:	687b      	ldr	r3, [r7, #4]
 801160e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011612:	2b00      	cmp	r3, #0
 8011614:	db42      	blt.n	801169c <tcp_receive+0x18c>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801161a:	4b6e      	ldr	r3, [pc, #440]	; (80117d4 <tcp_receive+0x2c4>)
 801161c:	681b      	ldr	r3, [r3, #0]
 801161e:	429a      	cmp	r2, r3
 8011620:	d13c      	bne.n	801169c <tcp_receive+0x18c>
              found_dupack = 1;
 8011622:	2301      	movs	r3, #1
 8011624:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801162c:	3301      	adds	r3, #1
 801162e:	b2da      	uxtb	r2, r3
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011636:	429a      	cmp	r2, r3
 8011638:	d907      	bls.n	801164a <tcp_receive+0x13a>
                ++pcb->dupacks;
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011640:	3301      	adds	r3, #1
 8011642:	b2da      	uxtb	r2, r3
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011650:	2b03      	cmp	r3, #3
 8011652:	d91b      	bls.n	801168c <tcp_receive+0x17c>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801165e:	4413      	add	r3, r2
 8011660:	b29a      	uxth	r2, r3
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011668:	429a      	cmp	r2, r3
 801166a:	d30a      	bcc.n	8011682 <tcp_receive+0x172>
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011676:	4413      	add	r3, r2
 8011678:	b29a      	uxth	r2, r3
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8011680:	e004      	b.n	801168c <tcp_receive+0x17c>
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011688:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011692:	2b02      	cmp	r3, #2
 8011694:	d902      	bls.n	801169c <tcp_receive+0x18c>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8011696:	6878      	ldr	r0, [r7, #4]
 8011698:	f002 fb4e 	bl	8013d38 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801169c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801169e:	2b00      	cmp	r3, #0
 80116a0:	f040 8161 	bne.w	8011966 <tcp_receive+0x456>
        pcb->dupacks = 0;
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	2200      	movs	r2, #0
 80116a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80116ac:	e15b      	b.n	8011966 <tcp_receive+0x456>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80116ae:	4b49      	ldr	r3, [pc, #292]	; (80117d4 <tcp_receive+0x2c4>)
 80116b0:	681a      	ldr	r2, [r3, #0]
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80116b6:	1ad3      	subs	r3, r2, r3
 80116b8:	3b01      	subs	r3, #1
 80116ba:	2b00      	cmp	r3, #0
 80116bc:	f2c0 814e 	blt.w	801195c <tcp_receive+0x44c>
 80116c0:	4b44      	ldr	r3, [pc, #272]	; (80117d4 <tcp_receive+0x2c4>)
 80116c2:	681a      	ldr	r2, [r3, #0]
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80116c8:	1ad3      	subs	r3, r2, r3
 80116ca:	2b00      	cmp	r3, #0
 80116cc:	f300 8146 	bgt.w	801195c <tcp_receive+0x44c>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	8b5b      	ldrh	r3, [r3, #26]
 80116d4:	f003 0304 	and.w	r3, r3, #4
 80116d8:	2b00      	cmp	r3, #0
 80116da:	d010      	beq.n	80116fe <tcp_receive+0x1ee>
        tcp_clear_flags(pcb, TF_INFR);
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	8b5b      	ldrh	r3, [r3, #26]
 80116e0:	f023 0304 	bic.w	r3, r3, #4
 80116e4:	b29a      	uxth	r2, r3
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80116ea:	687b      	ldr	r3, [r7, #4]
 80116ec:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	2200      	movs	r2, #0
 80116fa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	2200      	movs	r2, #0
 8011702:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801170c:	10db      	asrs	r3, r3, #3
 801170e:	b21b      	sxth	r3, r3
 8011710:	b29a      	uxth	r2, r3
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011718:	b29b      	uxth	r3, r3
 801171a:	4413      	add	r3, r2
 801171c:	b29b      	uxth	r3, r3
 801171e:	b21a      	sxth	r2, r3
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8011726:	4b2b      	ldr	r3, [pc, #172]	; (80117d4 <tcp_receive+0x2c4>)
 8011728:	681b      	ldr	r3, [r3, #0]
 801172a:	b29a      	uxth	r2, r3
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011730:	b29b      	uxth	r3, r3
 8011732:	1ad3      	subs	r3, r2, r3
 8011734:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	2200      	movs	r2, #0
 801173a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 801173e:	4b25      	ldr	r3, [pc, #148]	; (80117d4 <tcp_receive+0x2c4>)
 8011740:	681a      	ldr	r2, [r3, #0]
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	7d1b      	ldrb	r3, [r3, #20]
 801174a:	2b03      	cmp	r3, #3
 801174c:	f240 8097 	bls.w	801187e <tcp_receive+0x36e>
        if (pcb->cwnd < pcb->ssthresh) {
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801175c:	429a      	cmp	r2, r3
 801175e:	d245      	bcs.n	80117ec <tcp_receive+0x2dc>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	8b5b      	ldrh	r3, [r3, #26]
 8011764:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011768:	2b00      	cmp	r3, #0
 801176a:	d001      	beq.n	8011770 <tcp_receive+0x260>
 801176c:	2301      	movs	r3, #1
 801176e:	e000      	b.n	8011772 <tcp_receive+0x262>
 8011770:	2302      	movs	r3, #2
 8011772:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8011776:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801177a:	b29a      	uxth	r2, r3
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011780:	fb12 f303 	smulbb	r3, r2, r3
 8011784:	b29a      	uxth	r2, r3
 8011786:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011788:	4293      	cmp	r3, r2
 801178a:	bf28      	it	cs
 801178c:	4613      	movcs	r3, r2
 801178e:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011796:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011798:	4413      	add	r3, r2
 801179a:	b29a      	uxth	r2, r3
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80117a2:	429a      	cmp	r2, r3
 80117a4:	d31c      	bcc.n	80117e0 <tcp_receive+0x2d0>
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80117ac:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80117ae:	4413      	add	r3, r2
 80117b0:	b29a      	uxth	r2, r3
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80117b8:	e061      	b.n	801187e <tcp_receive+0x36e>
 80117ba:	bf00      	nop
 80117bc:	0801a610 	.word	0x0801a610
 80117c0:	0801a940 	.word	0x0801a940
 80117c4:	0801a65c 	.word	0x0801a65c
 80117c8:	0801a95c 	.word	0x0801a95c
 80117cc:	20004570 	.word	0x20004570
 80117d0:	20004564 	.word	0x20004564
 80117d4:	20004568 	.word	0x20004568
 80117d8:	20004554 	.word	0x20004554
 80117dc:	2000456e 	.word	0x2000456e
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80117e6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80117ea:	e048      	b.n	801187e <tcp_receive+0x36e>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80117f2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80117f4:	4413      	add	r3, r2
 80117f6:	b29a      	uxth	r2, r3
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80117fe:	429a      	cmp	r2, r3
 8011800:	d309      	bcc.n	8011816 <tcp_receive+0x306>
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011808:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801180a:	4413      	add	r3, r2
 801180c:	b29a      	uxth	r2, r3
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8011814:	e004      	b.n	8011820 <tcp_receive+0x310>
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801181c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801182c:	429a      	cmp	r2, r3
 801182e:	d326      	bcc.n	801187e <tcp_receive+0x36e>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801183c:	1ad3      	subs	r3, r2, r3
 801183e:	b29a      	uxth	r2, r3
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011850:	4413      	add	r3, r2
 8011852:	b29a      	uxth	r2, r3
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801185a:	429a      	cmp	r2, r3
 801185c:	d30a      	bcc.n	8011874 <tcp_receive+0x364>
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011868:	4413      	add	r3, r2
 801186a:	b29a      	uxth	r2, r3
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8011872:	e004      	b.n	801187e <tcp_receive+0x36e>
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801187a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011886:	4a98      	ldr	r2, [pc, #608]	; (8011ae8 <tcp_receive+0x5d8>)
 8011888:	6878      	ldr	r0, [r7, #4]
 801188a:	f7ff fdc5 	bl	8011418 <tcp_free_acked_segments>
 801188e:	4602      	mov	r2, r0
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801189c:	4a93      	ldr	r2, [pc, #588]	; (8011aec <tcp_receive+0x5dc>)
 801189e:	6878      	ldr	r0, [r7, #4]
 80118a0:	f7ff fdba 	bl	8011418 <tcp_free_acked_segments>
 80118a4:	4602      	mov	r2, r0
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80118ae:	2b00      	cmp	r3, #0
 80118b0:	d104      	bne.n	80118bc <tcp_receive+0x3ac>
        pcb->rtime = -1;
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80118b8:	861a      	strh	r2, [r3, #48]	; 0x30
 80118ba:	e002      	b.n	80118c2 <tcp_receive+0x3b2>
      } else {
        pcb->rtime = 0;
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	2200      	movs	r2, #0
 80118c0:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	2200      	movs	r2, #0
 80118c6:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80118cc:	2b00      	cmp	r3, #0
 80118ce:	d103      	bne.n	80118d8 <tcp_receive+0x3c8>
        pcb->unsent_oversize = 0;
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	2200      	movs	r2, #0
 80118d4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80118de:	4b84      	ldr	r3, [pc, #528]	; (8011af0 <tcp_receive+0x5e0>)
 80118e0:	881b      	ldrh	r3, [r3, #0]
 80118e2:	4413      	add	r3, r2
 80118e4:	b29a      	uxth	r2, r3
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	8b5b      	ldrh	r3, [r3, #26]
 80118f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80118f4:	2b00      	cmp	r3, #0
 80118f6:	d035      	beq.n	8011964 <tcp_receive+0x454>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80118fc:	2b00      	cmp	r3, #0
 80118fe:	d118      	bne.n	8011932 <tcp_receive+0x422>
          if ((pcb->unsent == NULL) ||
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011904:	2b00      	cmp	r3, #0
 8011906:	d00c      	beq.n	8011922 <tcp_receive+0x412>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011910:	68db      	ldr	r3, [r3, #12]
 8011912:	685b      	ldr	r3, [r3, #4]
 8011914:	4618      	mov	r0, r3
 8011916:	f7f7 f996 	bl	8008c46 <lwip_htonl>
 801191a:	4603      	mov	r3, r0
 801191c:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 801191e:	2b00      	cmp	r3, #0
 8011920:	dc20      	bgt.n	8011964 <tcp_receive+0x454>
            tcp_clear_flags(pcb, TF_RTO);
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	8b5b      	ldrh	r3, [r3, #26]
 8011926:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801192a:	b29a      	uxth	r2, r3
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011930:	e018      	b.n	8011964 <tcp_receive+0x454>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801193a:	68db      	ldr	r3, [r3, #12]
 801193c:	685b      	ldr	r3, [r3, #4]
 801193e:	4618      	mov	r0, r3
 8011940:	f7f7 f981 	bl	8008c46 <lwip_htonl>
 8011944:	4603      	mov	r3, r0
 8011946:	1ae3      	subs	r3, r4, r3
 8011948:	2b00      	cmp	r3, #0
 801194a:	dc0b      	bgt.n	8011964 <tcp_receive+0x454>
          tcp_clear_flags(pcb, TF_RTO);
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	8b5b      	ldrh	r3, [r3, #26]
 8011950:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011954:	b29a      	uxth	r2, r3
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801195a:	e003      	b.n	8011964 <tcp_receive+0x454>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 801195c:	6878      	ldr	r0, [r7, #4]
 801195e:	f002 fbe9 	bl	8014134 <tcp_send_empty_ack>
 8011962:	e000      	b.n	8011966 <tcp_receive+0x456>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011964:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801196a:	2b00      	cmp	r3, #0
 801196c:	d05b      	beq.n	8011a26 <tcp_receive+0x516>
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011972:	4b60      	ldr	r3, [pc, #384]	; (8011af4 <tcp_receive+0x5e4>)
 8011974:	681b      	ldr	r3, [r3, #0]
 8011976:	1ad3      	subs	r3, r2, r3
 8011978:	2b00      	cmp	r3, #0
 801197a:	da54      	bge.n	8011a26 <tcp_receive+0x516>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801197c:	4b5e      	ldr	r3, [pc, #376]	; (8011af8 <tcp_receive+0x5e8>)
 801197e:	681b      	ldr	r3, [r3, #0]
 8011980:	b29a      	uxth	r2, r3
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011986:	b29b      	uxth	r3, r3
 8011988:	1ad3      	subs	r3, r2, r3
 801198a:	b29b      	uxth	r3, r3
 801198c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8011990:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801199a:	10db      	asrs	r3, r3, #3
 801199c:	b21b      	sxth	r3, r3
 801199e:	b29b      	uxth	r3, r3
 80119a0:	1ad3      	subs	r3, r2, r3
 80119a2:	b29b      	uxth	r3, r3
 80119a4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80119ae:	b29a      	uxth	r2, r3
 80119b0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80119b4:	4413      	add	r3, r2
 80119b6:	b29b      	uxth	r3, r3
 80119b8:	b21a      	sxth	r2, r3
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 80119be:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80119c2:	2b00      	cmp	r3, #0
 80119c4:	da05      	bge.n	80119d2 <tcp_receive+0x4c2>
        m = (s16_t) - m;
 80119c6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80119ca:	425b      	negs	r3, r3
 80119cc:	b29b      	uxth	r3, r3
 80119ce:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80119d2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80119dc:	109b      	asrs	r3, r3, #2
 80119de:	b21b      	sxth	r3, r3
 80119e0:	b29b      	uxth	r3, r3
 80119e2:	1ad3      	subs	r3, r2, r3
 80119e4:	b29b      	uxth	r3, r3
 80119e6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80119f0:	b29a      	uxth	r2, r3
 80119f2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80119f6:	4413      	add	r3, r2
 80119f8:	b29b      	uxth	r3, r3
 80119fa:	b21a      	sxth	r2, r3
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011a06:	10db      	asrs	r3, r3, #3
 8011a08:	b21b      	sxth	r3, r3
 8011a0a:	b29a      	uxth	r2, r3
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011a12:	b29b      	uxth	r3, r3
 8011a14:	4413      	add	r3, r2
 8011a16:	b29b      	uxth	r3, r3
 8011a18:	b21a      	sxth	r2, r3
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	2200      	movs	r2, #0
 8011a24:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8011a26:	4b35      	ldr	r3, [pc, #212]	; (8011afc <tcp_receive+0x5ec>)
 8011a28:	881b      	ldrh	r3, [r3, #0]
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	f000 84df 	beq.w	80123ee <tcp_receive+0xede>
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	7d1b      	ldrb	r3, [r3, #20]
 8011a34:	2b06      	cmp	r3, #6
 8011a36:	f200 84da 	bhi.w	80123ee <tcp_receive+0xede>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011a3e:	4b30      	ldr	r3, [pc, #192]	; (8011b00 <tcp_receive+0x5f0>)
 8011a40:	681b      	ldr	r3, [r3, #0]
 8011a42:	1ad3      	subs	r3, r2, r3
 8011a44:	3b01      	subs	r3, #1
 8011a46:	2b00      	cmp	r3, #0
 8011a48:	f2c0 808e 	blt.w	8011b68 <tcp_receive+0x658>
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011a50:	4b2a      	ldr	r3, [pc, #168]	; (8011afc <tcp_receive+0x5ec>)
 8011a52:	881b      	ldrh	r3, [r3, #0]
 8011a54:	4619      	mov	r1, r3
 8011a56:	4b2a      	ldr	r3, [pc, #168]	; (8011b00 <tcp_receive+0x5f0>)
 8011a58:	681b      	ldr	r3, [r3, #0]
 8011a5a:	440b      	add	r3, r1
 8011a5c:	1ad3      	subs	r3, r2, r3
 8011a5e:	3301      	adds	r3, #1
 8011a60:	2b00      	cmp	r3, #0
 8011a62:	f300 8081 	bgt.w	8011b68 <tcp_receive+0x658>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8011a66:	4b27      	ldr	r3, [pc, #156]	; (8011b04 <tcp_receive+0x5f4>)
 8011a68:	685b      	ldr	r3, [r3, #4]
 8011a6a:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011a70:	4b23      	ldr	r3, [pc, #140]	; (8011b00 <tcp_receive+0x5f0>)
 8011a72:	681b      	ldr	r3, [r3, #0]
 8011a74:	1ad3      	subs	r3, r2, r3
 8011a76:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8011a78:	4b22      	ldr	r3, [pc, #136]	; (8011b04 <tcp_receive+0x5f4>)
 8011a7a:	685b      	ldr	r3, [r3, #4]
 8011a7c:	2b00      	cmp	r3, #0
 8011a7e:	d106      	bne.n	8011a8e <tcp_receive+0x57e>
 8011a80:	4b21      	ldr	r3, [pc, #132]	; (8011b08 <tcp_receive+0x5f8>)
 8011a82:	f240 5294 	movw	r2, #1428	; 0x594
 8011a86:	4921      	ldr	r1, [pc, #132]	; (8011b0c <tcp_receive+0x5fc>)
 8011a88:	4821      	ldr	r0, [pc, #132]	; (8011b10 <tcp_receive+0x600>)
 8011a8a:	f005 fe43 	bl	8017714 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8011a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a90:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8011a94:	4293      	cmp	r3, r2
 8011a96:	d906      	bls.n	8011aa6 <tcp_receive+0x596>
 8011a98:	4b1b      	ldr	r3, [pc, #108]	; (8011b08 <tcp_receive+0x5f8>)
 8011a9a:	f240 5295 	movw	r2, #1429	; 0x595
 8011a9e:	491d      	ldr	r1, [pc, #116]	; (8011b14 <tcp_receive+0x604>)
 8011aa0:	481b      	ldr	r0, [pc, #108]	; (8011b10 <tcp_receive+0x600>)
 8011aa2:	f005 fe37 	bl	8017714 <iprintf>
      off = (u16_t)off32;
 8011aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011aa8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8011aac:	4b15      	ldr	r3, [pc, #84]	; (8011b04 <tcp_receive+0x5f4>)
 8011aae:	685b      	ldr	r3, [r3, #4]
 8011ab0:	891b      	ldrh	r3, [r3, #8]
 8011ab2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011ab6:	429a      	cmp	r2, r3
 8011ab8:	d906      	bls.n	8011ac8 <tcp_receive+0x5b8>
 8011aba:	4b13      	ldr	r3, [pc, #76]	; (8011b08 <tcp_receive+0x5f8>)
 8011abc:	f240 5297 	movw	r2, #1431	; 0x597
 8011ac0:	4915      	ldr	r1, [pc, #84]	; (8011b18 <tcp_receive+0x608>)
 8011ac2:	4813      	ldr	r0, [pc, #76]	; (8011b10 <tcp_receive+0x600>)
 8011ac4:	f005 fe26 	bl	8017714 <iprintf>
      inseg.len -= off;
 8011ac8:	4b0e      	ldr	r3, [pc, #56]	; (8011b04 <tcp_receive+0x5f4>)
 8011aca:	891a      	ldrh	r2, [r3, #8]
 8011acc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011ad0:	1ad3      	subs	r3, r2, r3
 8011ad2:	b29a      	uxth	r2, r3
 8011ad4:	4b0b      	ldr	r3, [pc, #44]	; (8011b04 <tcp_receive+0x5f4>)
 8011ad6:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8011ad8:	4b0a      	ldr	r3, [pc, #40]	; (8011b04 <tcp_receive+0x5f4>)
 8011ada:	685b      	ldr	r3, [r3, #4]
 8011adc:	891a      	ldrh	r2, [r3, #8]
 8011ade:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011ae2:	1ad3      	subs	r3, r2, r3
 8011ae4:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8011ae6:	e029      	b.n	8011b3c <tcp_receive+0x62c>
 8011ae8:	0801a978 	.word	0x0801a978
 8011aec:	0801a980 	.word	0x0801a980
 8011af0:	2000456c 	.word	0x2000456c
 8011af4:	20004568 	.word	0x20004568
 8011af8:	20009628 	.word	0x20009628
 8011afc:	2000456e 	.word	0x2000456e
 8011b00:	20004564 	.word	0x20004564
 8011b04:	20004544 	.word	0x20004544
 8011b08:	0801a610 	.word	0x0801a610
 8011b0c:	0801a988 	.word	0x0801a988
 8011b10:	0801a65c 	.word	0x0801a65c
 8011b14:	0801a998 	.word	0x0801a998
 8011b18:	0801a9a8 	.word	0x0801a9a8
        off -= p->len;
 8011b1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011b1e:	895b      	ldrh	r3, [r3, #10]
 8011b20:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011b24:	1ad3      	subs	r3, r2, r3
 8011b26:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8011b2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011b2c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8011b2e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8011b30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011b32:	2200      	movs	r2, #0
 8011b34:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8011b36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011b38:	681b      	ldr	r3, [r3, #0]
 8011b3a:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8011b3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011b3e:	895b      	ldrh	r3, [r3, #10]
 8011b40:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011b44:	429a      	cmp	r2, r3
 8011b46:	d8e9      	bhi.n	8011b1c <tcp_receive+0x60c>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8011b48:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011b4c:	4619      	mov	r1, r3
 8011b4e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8011b50:	f7fb ff0c 	bl	800d96c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8011b54:	4b91      	ldr	r3, [pc, #580]	; (8011d9c <tcp_receive+0x88c>)
 8011b56:	68db      	ldr	r3, [r3, #12]
 8011b58:	687a      	ldr	r2, [r7, #4]
 8011b5a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8011b5c:	4990      	ldr	r1, [pc, #576]	; (8011da0 <tcp_receive+0x890>)
 8011b5e:	600a      	str	r2, [r1, #0]
 8011b60:	4a8f      	ldr	r2, [pc, #572]	; (8011da0 <tcp_receive+0x890>)
 8011b62:	6812      	ldr	r2, [r2, #0]
 8011b64:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8011b66:	e00d      	b.n	8011b84 <tcp_receive+0x674>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8011b68:	4b8d      	ldr	r3, [pc, #564]	; (8011da0 <tcp_receive+0x890>)
 8011b6a:	681a      	ldr	r2, [r3, #0]
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b70:	1ad3      	subs	r3, r2, r3
 8011b72:	2b00      	cmp	r3, #0
 8011b74:	da06      	bge.n	8011b84 <tcp_receive+0x674>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	8b5b      	ldrh	r3, [r3, #26]
 8011b7a:	f043 0302 	orr.w	r3, r3, #2
 8011b7e:	b29a      	uxth	r2, r3
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011b84:	4b86      	ldr	r3, [pc, #536]	; (8011da0 <tcp_receive+0x890>)
 8011b86:	681a      	ldr	r2, [r3, #0]
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b8c:	1ad3      	subs	r3, r2, r3
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	f2c0 8428 	blt.w	80123e4 <tcp_receive+0xed4>
 8011b94:	4b82      	ldr	r3, [pc, #520]	; (8011da0 <tcp_receive+0x890>)
 8011b96:	681a      	ldr	r2, [r3, #0]
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b9c:	6879      	ldr	r1, [r7, #4]
 8011b9e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011ba0:	440b      	add	r3, r1
 8011ba2:	1ad3      	subs	r3, r2, r3
 8011ba4:	3301      	adds	r3, #1
 8011ba6:	2b00      	cmp	r3, #0
 8011ba8:	f300 841c 	bgt.w	80123e4 <tcp_receive+0xed4>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011bb0:	4b7b      	ldr	r3, [pc, #492]	; (8011da0 <tcp_receive+0x890>)
 8011bb2:	681b      	ldr	r3, [r3, #0]
 8011bb4:	429a      	cmp	r2, r3
 8011bb6:	f040 8298 	bne.w	80120ea <tcp_receive+0xbda>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8011bba:	4b78      	ldr	r3, [pc, #480]	; (8011d9c <tcp_receive+0x88c>)
 8011bbc:	891c      	ldrh	r4, [r3, #8]
 8011bbe:	4b77      	ldr	r3, [pc, #476]	; (8011d9c <tcp_receive+0x88c>)
 8011bc0:	68db      	ldr	r3, [r3, #12]
 8011bc2:	899b      	ldrh	r3, [r3, #12]
 8011bc4:	b29b      	uxth	r3, r3
 8011bc6:	4618      	mov	r0, r3
 8011bc8:	f7f7 f828 	bl	8008c1c <lwip_htons>
 8011bcc:	4603      	mov	r3, r0
 8011bce:	b2db      	uxtb	r3, r3
 8011bd0:	f003 0303 	and.w	r3, r3, #3
 8011bd4:	2b00      	cmp	r3, #0
 8011bd6:	d001      	beq.n	8011bdc <tcp_receive+0x6cc>
 8011bd8:	2301      	movs	r3, #1
 8011bda:	e000      	b.n	8011bde <tcp_receive+0x6ce>
 8011bdc:	2300      	movs	r3, #0
 8011bde:	4423      	add	r3, r4
 8011be0:	b29a      	uxth	r2, r3
 8011be2:	4b70      	ldr	r3, [pc, #448]	; (8011da4 <tcp_receive+0x894>)
 8011be4:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011bea:	4b6e      	ldr	r3, [pc, #440]	; (8011da4 <tcp_receive+0x894>)
 8011bec:	881b      	ldrh	r3, [r3, #0]
 8011bee:	429a      	cmp	r2, r3
 8011bf0:	d275      	bcs.n	8011cde <tcp_receive+0x7ce>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011bf2:	4b6a      	ldr	r3, [pc, #424]	; (8011d9c <tcp_receive+0x88c>)
 8011bf4:	68db      	ldr	r3, [r3, #12]
 8011bf6:	899b      	ldrh	r3, [r3, #12]
 8011bf8:	b29b      	uxth	r3, r3
 8011bfa:	4618      	mov	r0, r3
 8011bfc:	f7f7 f80e 	bl	8008c1c <lwip_htons>
 8011c00:	4603      	mov	r3, r0
 8011c02:	b2db      	uxtb	r3, r3
 8011c04:	f003 0301 	and.w	r3, r3, #1
 8011c08:	2b00      	cmp	r3, #0
 8011c0a:	d01f      	beq.n	8011c4c <tcp_receive+0x73c>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8011c0c:	4b63      	ldr	r3, [pc, #396]	; (8011d9c <tcp_receive+0x88c>)
 8011c0e:	68dc      	ldr	r4, [r3, #12]
 8011c10:	4b62      	ldr	r3, [pc, #392]	; (8011d9c <tcp_receive+0x88c>)
 8011c12:	68db      	ldr	r3, [r3, #12]
 8011c14:	899b      	ldrh	r3, [r3, #12]
 8011c16:	b29b      	uxth	r3, r3
 8011c18:	b21b      	sxth	r3, r3
 8011c1a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011c1e:	b21d      	sxth	r5, r3
 8011c20:	4b5e      	ldr	r3, [pc, #376]	; (8011d9c <tcp_receive+0x88c>)
 8011c22:	68db      	ldr	r3, [r3, #12]
 8011c24:	899b      	ldrh	r3, [r3, #12]
 8011c26:	b29b      	uxth	r3, r3
 8011c28:	4618      	mov	r0, r3
 8011c2a:	f7f6 fff7 	bl	8008c1c <lwip_htons>
 8011c2e:	4603      	mov	r3, r0
 8011c30:	b2db      	uxtb	r3, r3
 8011c32:	b29b      	uxth	r3, r3
 8011c34:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8011c38:	b29b      	uxth	r3, r3
 8011c3a:	4618      	mov	r0, r3
 8011c3c:	f7f6 ffee 	bl	8008c1c <lwip_htons>
 8011c40:	4603      	mov	r3, r0
 8011c42:	b21b      	sxth	r3, r3
 8011c44:	432b      	orrs	r3, r5
 8011c46:	b21b      	sxth	r3, r3
 8011c48:	b29b      	uxth	r3, r3
 8011c4a:	81a3      	strh	r3, [r4, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011c50:	4b52      	ldr	r3, [pc, #328]	; (8011d9c <tcp_receive+0x88c>)
 8011c52:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8011c54:	4b51      	ldr	r3, [pc, #324]	; (8011d9c <tcp_receive+0x88c>)
 8011c56:	68db      	ldr	r3, [r3, #12]
 8011c58:	899b      	ldrh	r3, [r3, #12]
 8011c5a:	b29b      	uxth	r3, r3
 8011c5c:	4618      	mov	r0, r3
 8011c5e:	f7f6 ffdd 	bl	8008c1c <lwip_htons>
 8011c62:	4603      	mov	r3, r0
 8011c64:	b2db      	uxtb	r3, r3
 8011c66:	f003 0302 	and.w	r3, r3, #2
 8011c6a:	2b00      	cmp	r3, #0
 8011c6c:	d005      	beq.n	8011c7a <tcp_receive+0x76a>
            inseg.len -= 1;
 8011c6e:	4b4b      	ldr	r3, [pc, #300]	; (8011d9c <tcp_receive+0x88c>)
 8011c70:	891b      	ldrh	r3, [r3, #8]
 8011c72:	3b01      	subs	r3, #1
 8011c74:	b29a      	uxth	r2, r3
 8011c76:	4b49      	ldr	r3, [pc, #292]	; (8011d9c <tcp_receive+0x88c>)
 8011c78:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8011c7a:	4b48      	ldr	r3, [pc, #288]	; (8011d9c <tcp_receive+0x88c>)
 8011c7c:	685a      	ldr	r2, [r3, #4]
 8011c7e:	4b47      	ldr	r3, [pc, #284]	; (8011d9c <tcp_receive+0x88c>)
 8011c80:	891b      	ldrh	r3, [r3, #8]
 8011c82:	4619      	mov	r1, r3
 8011c84:	4610      	mov	r0, r2
 8011c86:	f7fb fd6f 	bl	800d768 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8011c8a:	4b44      	ldr	r3, [pc, #272]	; (8011d9c <tcp_receive+0x88c>)
 8011c8c:	891c      	ldrh	r4, [r3, #8]
 8011c8e:	4b43      	ldr	r3, [pc, #268]	; (8011d9c <tcp_receive+0x88c>)
 8011c90:	68db      	ldr	r3, [r3, #12]
 8011c92:	899b      	ldrh	r3, [r3, #12]
 8011c94:	b29b      	uxth	r3, r3
 8011c96:	4618      	mov	r0, r3
 8011c98:	f7f6 ffc0 	bl	8008c1c <lwip_htons>
 8011c9c:	4603      	mov	r3, r0
 8011c9e:	b2db      	uxtb	r3, r3
 8011ca0:	f003 0303 	and.w	r3, r3, #3
 8011ca4:	2b00      	cmp	r3, #0
 8011ca6:	d001      	beq.n	8011cac <tcp_receive+0x79c>
 8011ca8:	2301      	movs	r3, #1
 8011caa:	e000      	b.n	8011cae <tcp_receive+0x79e>
 8011cac:	2300      	movs	r3, #0
 8011cae:	4423      	add	r3, r4
 8011cb0:	b29a      	uxth	r2, r3
 8011cb2:	4b3c      	ldr	r3, [pc, #240]	; (8011da4 <tcp_receive+0x894>)
 8011cb4:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8011cb6:	4b3b      	ldr	r3, [pc, #236]	; (8011da4 <tcp_receive+0x894>)
 8011cb8:	881b      	ldrh	r3, [r3, #0]
 8011cba:	461a      	mov	r2, r3
 8011cbc:	4b38      	ldr	r3, [pc, #224]	; (8011da0 <tcp_receive+0x890>)
 8011cbe:	681b      	ldr	r3, [r3, #0]
 8011cc0:	441a      	add	r2, r3
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011cc6:	6879      	ldr	r1, [r7, #4]
 8011cc8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011cca:	440b      	add	r3, r1
 8011ccc:	429a      	cmp	r2, r3
 8011cce:	d006      	beq.n	8011cde <tcp_receive+0x7ce>
 8011cd0:	4b35      	ldr	r3, [pc, #212]	; (8011da8 <tcp_receive+0x898>)
 8011cd2:	f240 52cc 	movw	r2, #1484	; 0x5cc
 8011cd6:	4935      	ldr	r1, [pc, #212]	; (8011dac <tcp_receive+0x89c>)
 8011cd8:	4835      	ldr	r0, [pc, #212]	; (8011db0 <tcp_receive+0x8a0>)
 8011cda:	f005 fd1b 	bl	8017714 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8011cde:	687b      	ldr	r3, [r7, #4]
 8011ce0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011ce2:	2b00      	cmp	r3, #0
 8011ce4:	f000 80e5 	beq.w	8011eb2 <tcp_receive+0x9a2>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011ce8:	4b2c      	ldr	r3, [pc, #176]	; (8011d9c <tcp_receive+0x88c>)
 8011cea:	68db      	ldr	r3, [r3, #12]
 8011cec:	899b      	ldrh	r3, [r3, #12]
 8011cee:	b29b      	uxth	r3, r3
 8011cf0:	4618      	mov	r0, r3
 8011cf2:	f7f6 ff93 	bl	8008c1c <lwip_htons>
 8011cf6:	4603      	mov	r3, r0
 8011cf8:	b2db      	uxtb	r3, r3
 8011cfa:	f003 0301 	and.w	r3, r3, #1
 8011cfe:	2b00      	cmp	r3, #0
 8011d00:	d010      	beq.n	8011d24 <tcp_receive+0x814>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8011d02:	e00a      	b.n	8011d1a <tcp_receive+0x80a>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011d08:	61fb      	str	r3, [r7, #28]
              pcb->ooseq = pcb->ooseq->next;
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011d0e:	681a      	ldr	r2, [r3, #0]
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8011d14:	69f8      	ldr	r0, [r7, #28]
 8011d16:	f7fd fce5 	bl	800f6e4 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011d1e:	2b00      	cmp	r3, #0
 8011d20:	d1f0      	bne.n	8011d04 <tcp_receive+0x7f4>
 8011d22:	e0c6      	b.n	8011eb2 <tcp_receive+0x9a2>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011d28:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8011d2a:	e050      	b.n	8011dce <tcp_receive+0x8be>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8011d2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011d2e:	68db      	ldr	r3, [r3, #12]
 8011d30:	899b      	ldrh	r3, [r3, #12]
 8011d32:	b29b      	uxth	r3, r3
 8011d34:	4618      	mov	r0, r3
 8011d36:	f7f6 ff71 	bl	8008c1c <lwip_htons>
 8011d3a:	4603      	mov	r3, r0
 8011d3c:	b2db      	uxtb	r3, r3
 8011d3e:	f003 0301 	and.w	r3, r3, #1
 8011d42:	2b00      	cmp	r3, #0
 8011d44:	d03b      	beq.n	8011dbe <tcp_receive+0x8ae>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8011d46:	4b15      	ldr	r3, [pc, #84]	; (8011d9c <tcp_receive+0x88c>)
 8011d48:	68db      	ldr	r3, [r3, #12]
 8011d4a:	899b      	ldrh	r3, [r3, #12]
 8011d4c:	b29b      	uxth	r3, r3
 8011d4e:	4618      	mov	r0, r3
 8011d50:	f7f6 ff64 	bl	8008c1c <lwip_htons>
 8011d54:	4603      	mov	r3, r0
 8011d56:	b2db      	uxtb	r3, r3
 8011d58:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8011d5c:	2b00      	cmp	r3, #0
 8011d5e:	d12e      	bne.n	8011dbe <tcp_receive+0x8ae>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8011d60:	4b0e      	ldr	r3, [pc, #56]	; (8011d9c <tcp_receive+0x88c>)
 8011d62:	68dc      	ldr	r4, [r3, #12]
 8011d64:	4b0d      	ldr	r3, [pc, #52]	; (8011d9c <tcp_receive+0x88c>)
 8011d66:	68db      	ldr	r3, [r3, #12]
 8011d68:	899b      	ldrh	r3, [r3, #12]
 8011d6a:	b29d      	uxth	r5, r3
 8011d6c:	2001      	movs	r0, #1
 8011d6e:	f7f6 ff55 	bl	8008c1c <lwip_htons>
 8011d72:	4603      	mov	r3, r0
 8011d74:	432b      	orrs	r3, r5
 8011d76:	b29b      	uxth	r3, r3
 8011d78:	81a3      	strh	r3, [r4, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8011d7a:	4b08      	ldr	r3, [pc, #32]	; (8011d9c <tcp_receive+0x88c>)
 8011d7c:	891c      	ldrh	r4, [r3, #8]
 8011d7e:	4b07      	ldr	r3, [pc, #28]	; (8011d9c <tcp_receive+0x88c>)
 8011d80:	68db      	ldr	r3, [r3, #12]
 8011d82:	899b      	ldrh	r3, [r3, #12]
 8011d84:	b29b      	uxth	r3, r3
 8011d86:	4618      	mov	r0, r3
 8011d88:	f7f6 ff48 	bl	8008c1c <lwip_htons>
 8011d8c:	4603      	mov	r3, r0
 8011d8e:	b2db      	uxtb	r3, r3
 8011d90:	f003 0303 	and.w	r3, r3, #3
 8011d94:	2b00      	cmp	r3, #0
 8011d96:	d00d      	beq.n	8011db4 <tcp_receive+0x8a4>
 8011d98:	2301      	movs	r3, #1
 8011d9a:	e00c      	b.n	8011db6 <tcp_receive+0x8a6>
 8011d9c:	20004544 	.word	0x20004544
 8011da0:	20004564 	.word	0x20004564
 8011da4:	2000456e 	.word	0x2000456e
 8011da8:	0801a610 	.word	0x0801a610
 8011dac:	0801a9b8 	.word	0x0801a9b8
 8011db0:	0801a65c 	.word	0x0801a65c
 8011db4:	2300      	movs	r3, #0
 8011db6:	4423      	add	r3, r4
 8011db8:	b29a      	uxth	r2, r3
 8011dba:	4b98      	ldr	r3, [pc, #608]	; (801201c <tcp_receive+0xb0c>)
 8011dbc:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8011dbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011dc0:	61bb      	str	r3, [r7, #24]
              next = next->next;
 8011dc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011dc4:	681b      	ldr	r3, [r3, #0]
 8011dc6:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8011dc8:	69b8      	ldr	r0, [r7, #24]
 8011dca:	f7fd fc8b 	bl	800f6e4 <tcp_seg_free>
            while (next &&
 8011dce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011dd0:	2b00      	cmp	r3, #0
 8011dd2:	d00e      	beq.n	8011df2 <tcp_receive+0x8e2>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8011dd4:	4b91      	ldr	r3, [pc, #580]	; (801201c <tcp_receive+0xb0c>)
 8011dd6:	881b      	ldrh	r3, [r3, #0]
 8011dd8:	461a      	mov	r2, r3
 8011dda:	4b91      	ldr	r3, [pc, #580]	; (8012020 <tcp_receive+0xb10>)
 8011ddc:	681b      	ldr	r3, [r3, #0]
 8011dde:	441a      	add	r2, r3
 8011de0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011de2:	68db      	ldr	r3, [r3, #12]
 8011de4:	685b      	ldr	r3, [r3, #4]
 8011de6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011de8:	8909      	ldrh	r1, [r1, #8]
 8011dea:	440b      	add	r3, r1
 8011dec:	1ad3      	subs	r3, r2, r3
            while (next &&
 8011dee:	2b00      	cmp	r3, #0
 8011df0:	da9c      	bge.n	8011d2c <tcp_receive+0x81c>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8011df2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011df4:	2b00      	cmp	r3, #0
 8011df6:	d059      	beq.n	8011eac <tcp_receive+0x99c>
                TCP_SEQ_GT(seqno + tcplen,
 8011df8:	4b88      	ldr	r3, [pc, #544]	; (801201c <tcp_receive+0xb0c>)
 8011dfa:	881b      	ldrh	r3, [r3, #0]
 8011dfc:	461a      	mov	r2, r3
 8011dfe:	4b88      	ldr	r3, [pc, #544]	; (8012020 <tcp_receive+0xb10>)
 8011e00:	681b      	ldr	r3, [r3, #0]
 8011e02:	441a      	add	r2, r3
 8011e04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e06:	68db      	ldr	r3, [r3, #12]
 8011e08:	685b      	ldr	r3, [r3, #4]
 8011e0a:	1ad3      	subs	r3, r2, r3
            if (next &&
 8011e0c:	2b00      	cmp	r3, #0
 8011e0e:	dd4d      	ble.n	8011eac <tcp_receive+0x99c>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8011e10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e12:	68db      	ldr	r3, [r3, #12]
 8011e14:	685b      	ldr	r3, [r3, #4]
 8011e16:	b29a      	uxth	r2, r3
 8011e18:	4b81      	ldr	r3, [pc, #516]	; (8012020 <tcp_receive+0xb10>)
 8011e1a:	681b      	ldr	r3, [r3, #0]
 8011e1c:	b29b      	uxth	r3, r3
 8011e1e:	1ad3      	subs	r3, r2, r3
 8011e20:	b29a      	uxth	r2, r3
 8011e22:	4b80      	ldr	r3, [pc, #512]	; (8012024 <tcp_receive+0xb14>)
 8011e24:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8011e26:	4b7f      	ldr	r3, [pc, #508]	; (8012024 <tcp_receive+0xb14>)
 8011e28:	68db      	ldr	r3, [r3, #12]
 8011e2a:	899b      	ldrh	r3, [r3, #12]
 8011e2c:	b29b      	uxth	r3, r3
 8011e2e:	4618      	mov	r0, r3
 8011e30:	f7f6 fef4 	bl	8008c1c <lwip_htons>
 8011e34:	4603      	mov	r3, r0
 8011e36:	b2db      	uxtb	r3, r3
 8011e38:	f003 0302 	and.w	r3, r3, #2
 8011e3c:	2b00      	cmp	r3, #0
 8011e3e:	d005      	beq.n	8011e4c <tcp_receive+0x93c>
                inseg.len -= 1;
 8011e40:	4b78      	ldr	r3, [pc, #480]	; (8012024 <tcp_receive+0xb14>)
 8011e42:	891b      	ldrh	r3, [r3, #8]
 8011e44:	3b01      	subs	r3, #1
 8011e46:	b29a      	uxth	r2, r3
 8011e48:	4b76      	ldr	r3, [pc, #472]	; (8012024 <tcp_receive+0xb14>)
 8011e4a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8011e4c:	4b75      	ldr	r3, [pc, #468]	; (8012024 <tcp_receive+0xb14>)
 8011e4e:	685a      	ldr	r2, [r3, #4]
 8011e50:	4b74      	ldr	r3, [pc, #464]	; (8012024 <tcp_receive+0xb14>)
 8011e52:	891b      	ldrh	r3, [r3, #8]
 8011e54:	4619      	mov	r1, r3
 8011e56:	4610      	mov	r0, r2
 8011e58:	f7fb fc86 	bl	800d768 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8011e5c:	4b71      	ldr	r3, [pc, #452]	; (8012024 <tcp_receive+0xb14>)
 8011e5e:	891c      	ldrh	r4, [r3, #8]
 8011e60:	4b70      	ldr	r3, [pc, #448]	; (8012024 <tcp_receive+0xb14>)
 8011e62:	68db      	ldr	r3, [r3, #12]
 8011e64:	899b      	ldrh	r3, [r3, #12]
 8011e66:	b29b      	uxth	r3, r3
 8011e68:	4618      	mov	r0, r3
 8011e6a:	f7f6 fed7 	bl	8008c1c <lwip_htons>
 8011e6e:	4603      	mov	r3, r0
 8011e70:	b2db      	uxtb	r3, r3
 8011e72:	f003 0303 	and.w	r3, r3, #3
 8011e76:	2b00      	cmp	r3, #0
 8011e78:	d001      	beq.n	8011e7e <tcp_receive+0x96e>
 8011e7a:	2301      	movs	r3, #1
 8011e7c:	e000      	b.n	8011e80 <tcp_receive+0x970>
 8011e7e:	2300      	movs	r3, #0
 8011e80:	4423      	add	r3, r4
 8011e82:	b29a      	uxth	r2, r3
 8011e84:	4b65      	ldr	r3, [pc, #404]	; (801201c <tcp_receive+0xb0c>)
 8011e86:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8011e88:	4b64      	ldr	r3, [pc, #400]	; (801201c <tcp_receive+0xb0c>)
 8011e8a:	881b      	ldrh	r3, [r3, #0]
 8011e8c:	461a      	mov	r2, r3
 8011e8e:	4b64      	ldr	r3, [pc, #400]	; (8012020 <tcp_receive+0xb10>)
 8011e90:	681b      	ldr	r3, [r3, #0]
 8011e92:	441a      	add	r2, r3
 8011e94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e96:	68db      	ldr	r3, [r3, #12]
 8011e98:	685b      	ldr	r3, [r3, #4]
 8011e9a:	429a      	cmp	r2, r3
 8011e9c:	d006      	beq.n	8011eac <tcp_receive+0x99c>
 8011e9e:	4b62      	ldr	r3, [pc, #392]	; (8012028 <tcp_receive+0xb18>)
 8011ea0:	f240 52fd 	movw	r2, #1533	; 0x5fd
 8011ea4:	4961      	ldr	r1, [pc, #388]	; (801202c <tcp_receive+0xb1c>)
 8011ea6:	4862      	ldr	r0, [pc, #392]	; (8012030 <tcp_receive+0xb20>)
 8011ea8:	f005 fc34 	bl	8017714 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011eb0:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8011eb2:	4b5a      	ldr	r3, [pc, #360]	; (801201c <tcp_receive+0xb0c>)
 8011eb4:	881b      	ldrh	r3, [r3, #0]
 8011eb6:	461a      	mov	r2, r3
 8011eb8:	4b59      	ldr	r3, [pc, #356]	; (8012020 <tcp_receive+0xb10>)
 8011eba:	681b      	ldr	r3, [r3, #0]
 8011ebc:	441a      	add	r2, r3
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011ec6:	4b55      	ldr	r3, [pc, #340]	; (801201c <tcp_receive+0xb0c>)
 8011ec8:	881b      	ldrh	r3, [r3, #0]
 8011eca:	429a      	cmp	r2, r3
 8011ecc:	d206      	bcs.n	8011edc <tcp_receive+0x9cc>
 8011ece:	4b56      	ldr	r3, [pc, #344]	; (8012028 <tcp_receive+0xb18>)
 8011ed0:	f240 6207 	movw	r2, #1543	; 0x607
 8011ed4:	4957      	ldr	r1, [pc, #348]	; (8012034 <tcp_receive+0xb24>)
 8011ed6:	4856      	ldr	r0, [pc, #344]	; (8012030 <tcp_receive+0xb20>)
 8011ed8:	f005 fc1c 	bl	8017714 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011ee0:	4b4e      	ldr	r3, [pc, #312]	; (801201c <tcp_receive+0xb0c>)
 8011ee2:	881b      	ldrh	r3, [r3, #0]
 8011ee4:	1ad3      	subs	r3, r2, r3
 8011ee6:	b29a      	uxth	r2, r3
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8011eec:	6878      	ldr	r0, [r7, #4]
 8011eee:	f7fc fdbd 	bl	800ea6c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8011ef2:	4b4c      	ldr	r3, [pc, #304]	; (8012024 <tcp_receive+0xb14>)
 8011ef4:	685b      	ldr	r3, [r3, #4]
 8011ef6:	891b      	ldrh	r3, [r3, #8]
 8011ef8:	2b00      	cmp	r3, #0
 8011efa:	d006      	beq.n	8011f0a <tcp_receive+0x9fa>
          recv_data = inseg.p;
 8011efc:	4b49      	ldr	r3, [pc, #292]	; (8012024 <tcp_receive+0xb14>)
 8011efe:	685b      	ldr	r3, [r3, #4]
 8011f00:	4a4d      	ldr	r2, [pc, #308]	; (8012038 <tcp_receive+0xb28>)
 8011f02:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8011f04:	4b47      	ldr	r3, [pc, #284]	; (8012024 <tcp_receive+0xb14>)
 8011f06:	2200      	movs	r2, #0
 8011f08:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011f0a:	4b46      	ldr	r3, [pc, #280]	; (8012024 <tcp_receive+0xb14>)
 8011f0c:	68db      	ldr	r3, [r3, #12]
 8011f0e:	899b      	ldrh	r3, [r3, #12]
 8011f10:	b29b      	uxth	r3, r3
 8011f12:	4618      	mov	r0, r3
 8011f14:	f7f6 fe82 	bl	8008c1c <lwip_htons>
 8011f18:	4603      	mov	r3, r0
 8011f1a:	b2db      	uxtb	r3, r3
 8011f1c:	f003 0301 	and.w	r3, r3, #1
 8011f20:	2b00      	cmp	r3, #0
 8011f22:	f000 80b8 	beq.w	8012096 <tcp_receive+0xb86>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8011f26:	4b45      	ldr	r3, [pc, #276]	; (801203c <tcp_receive+0xb2c>)
 8011f28:	781b      	ldrb	r3, [r3, #0]
 8011f2a:	f043 0320 	orr.w	r3, r3, #32
 8011f2e:	b2da      	uxtb	r2, r3
 8011f30:	4b42      	ldr	r3, [pc, #264]	; (801203c <tcp_receive+0xb2c>)
 8011f32:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8011f34:	e0af      	b.n	8012096 <tcp_receive+0xb86>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011f3a:	617b      	str	r3, [r7, #20]
          seqno = pcb->ooseq->tcphdr->seqno;
 8011f3c:	687b      	ldr	r3, [r7, #4]
 8011f3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011f40:	68db      	ldr	r3, [r3, #12]
 8011f42:	685b      	ldr	r3, [r3, #4]
 8011f44:	4a36      	ldr	r2, [pc, #216]	; (8012020 <tcp_receive+0xb10>)
 8011f46:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8011f48:	697b      	ldr	r3, [r7, #20]
 8011f4a:	891b      	ldrh	r3, [r3, #8]
 8011f4c:	461c      	mov	r4, r3
 8011f4e:	697b      	ldr	r3, [r7, #20]
 8011f50:	68db      	ldr	r3, [r3, #12]
 8011f52:	899b      	ldrh	r3, [r3, #12]
 8011f54:	b29b      	uxth	r3, r3
 8011f56:	4618      	mov	r0, r3
 8011f58:	f7f6 fe60 	bl	8008c1c <lwip_htons>
 8011f5c:	4603      	mov	r3, r0
 8011f5e:	b2db      	uxtb	r3, r3
 8011f60:	f003 0303 	and.w	r3, r3, #3
 8011f64:	2b00      	cmp	r3, #0
 8011f66:	d001      	beq.n	8011f6c <tcp_receive+0xa5c>
 8011f68:	2301      	movs	r3, #1
 8011f6a:	e000      	b.n	8011f6e <tcp_receive+0xa5e>
 8011f6c:	2300      	movs	r3, #0
 8011f6e:	4423      	add	r3, r4
 8011f70:	687a      	ldr	r2, [r7, #4]
 8011f72:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8011f74:	441a      	add	r2, r3
 8011f76:	687b      	ldr	r3, [r7, #4]
 8011f78:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011f7e:	461c      	mov	r4, r3
 8011f80:	697b      	ldr	r3, [r7, #20]
 8011f82:	891b      	ldrh	r3, [r3, #8]
 8011f84:	461d      	mov	r5, r3
 8011f86:	697b      	ldr	r3, [r7, #20]
 8011f88:	68db      	ldr	r3, [r3, #12]
 8011f8a:	899b      	ldrh	r3, [r3, #12]
 8011f8c:	b29b      	uxth	r3, r3
 8011f8e:	4618      	mov	r0, r3
 8011f90:	f7f6 fe44 	bl	8008c1c <lwip_htons>
 8011f94:	4603      	mov	r3, r0
 8011f96:	b2db      	uxtb	r3, r3
 8011f98:	f003 0303 	and.w	r3, r3, #3
 8011f9c:	2b00      	cmp	r3, #0
 8011f9e:	d001      	beq.n	8011fa4 <tcp_receive+0xa94>
 8011fa0:	2301      	movs	r3, #1
 8011fa2:	e000      	b.n	8011fa6 <tcp_receive+0xa96>
 8011fa4:	2300      	movs	r3, #0
 8011fa6:	442b      	add	r3, r5
 8011fa8:	429c      	cmp	r4, r3
 8011faa:	d206      	bcs.n	8011fba <tcp_receive+0xaaa>
 8011fac:	4b1e      	ldr	r3, [pc, #120]	; (8012028 <tcp_receive+0xb18>)
 8011fae:	f240 622c 	movw	r2, #1580	; 0x62c
 8011fb2:	4923      	ldr	r1, [pc, #140]	; (8012040 <tcp_receive+0xb30>)
 8011fb4:	481e      	ldr	r0, [pc, #120]	; (8012030 <tcp_receive+0xb20>)
 8011fb6:	f005 fbad 	bl	8017714 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8011fba:	697b      	ldr	r3, [r7, #20]
 8011fbc:	891b      	ldrh	r3, [r3, #8]
 8011fbe:	461c      	mov	r4, r3
 8011fc0:	697b      	ldr	r3, [r7, #20]
 8011fc2:	68db      	ldr	r3, [r3, #12]
 8011fc4:	899b      	ldrh	r3, [r3, #12]
 8011fc6:	b29b      	uxth	r3, r3
 8011fc8:	4618      	mov	r0, r3
 8011fca:	f7f6 fe27 	bl	8008c1c <lwip_htons>
 8011fce:	4603      	mov	r3, r0
 8011fd0:	b2db      	uxtb	r3, r3
 8011fd2:	f003 0303 	and.w	r3, r3, #3
 8011fd6:	2b00      	cmp	r3, #0
 8011fd8:	d001      	beq.n	8011fde <tcp_receive+0xace>
 8011fda:	2301      	movs	r3, #1
 8011fdc:	e000      	b.n	8011fe0 <tcp_receive+0xad0>
 8011fde:	2300      	movs	r3, #0
 8011fe0:	18e1      	adds	r1, r4, r3
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011fe6:	b28b      	uxth	r3, r1
 8011fe8:	1ad3      	subs	r3, r2, r3
 8011fea:	b29a      	uxth	r2, r3
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8011ff0:	6878      	ldr	r0, [r7, #4]
 8011ff2:	f7fc fd3b 	bl	800ea6c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8011ff6:	697b      	ldr	r3, [r7, #20]
 8011ff8:	685b      	ldr	r3, [r3, #4]
 8011ffa:	891b      	ldrh	r3, [r3, #8]
 8011ffc:	2b00      	cmp	r3, #0
 8011ffe:	d028      	beq.n	8012052 <tcp_receive+0xb42>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8012000:	4b0d      	ldr	r3, [pc, #52]	; (8012038 <tcp_receive+0xb28>)
 8012002:	681b      	ldr	r3, [r3, #0]
 8012004:	2b00      	cmp	r3, #0
 8012006:	d01d      	beq.n	8012044 <tcp_receive+0xb34>
              pbuf_cat(recv_data, cseg->p);
 8012008:	4b0b      	ldr	r3, [pc, #44]	; (8012038 <tcp_receive+0xb28>)
 801200a:	681a      	ldr	r2, [r3, #0]
 801200c:	697b      	ldr	r3, [r7, #20]
 801200e:	685b      	ldr	r3, [r3, #4]
 8012010:	4619      	mov	r1, r3
 8012012:	4610      	mov	r0, r2
 8012014:	f7fb fe30 	bl	800dc78 <pbuf_cat>
 8012018:	e018      	b.n	801204c <tcp_receive+0xb3c>
 801201a:	bf00      	nop
 801201c:	2000456e 	.word	0x2000456e
 8012020:	20004564 	.word	0x20004564
 8012024:	20004544 	.word	0x20004544
 8012028:	0801a610 	.word	0x0801a610
 801202c:	0801a9f0 	.word	0x0801a9f0
 8012030:	0801a65c 	.word	0x0801a65c
 8012034:	0801aa2c 	.word	0x0801aa2c
 8012038:	20004574 	.word	0x20004574
 801203c:	20004571 	.word	0x20004571
 8012040:	0801aa4c 	.word	0x0801aa4c
            } else {
              recv_data = cseg->p;
 8012044:	697b      	ldr	r3, [r7, #20]
 8012046:	685b      	ldr	r3, [r3, #4]
 8012048:	4a70      	ldr	r2, [pc, #448]	; (801220c <tcp_receive+0xcfc>)
 801204a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 801204c:	697b      	ldr	r3, [r7, #20]
 801204e:	2200      	movs	r2, #0
 8012050:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8012052:	697b      	ldr	r3, [r7, #20]
 8012054:	68db      	ldr	r3, [r3, #12]
 8012056:	899b      	ldrh	r3, [r3, #12]
 8012058:	b29b      	uxth	r3, r3
 801205a:	4618      	mov	r0, r3
 801205c:	f7f6 fdde 	bl	8008c1c <lwip_htons>
 8012060:	4603      	mov	r3, r0
 8012062:	b2db      	uxtb	r3, r3
 8012064:	f003 0301 	and.w	r3, r3, #1
 8012068:	2b00      	cmp	r3, #0
 801206a:	d00d      	beq.n	8012088 <tcp_receive+0xb78>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 801206c:	4b68      	ldr	r3, [pc, #416]	; (8012210 <tcp_receive+0xd00>)
 801206e:	781b      	ldrb	r3, [r3, #0]
 8012070:	f043 0320 	orr.w	r3, r3, #32
 8012074:	b2da      	uxtb	r2, r3
 8012076:	4b66      	ldr	r3, [pc, #408]	; (8012210 <tcp_receive+0xd00>)
 8012078:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	7d1b      	ldrb	r3, [r3, #20]
 801207e:	2b04      	cmp	r3, #4
 8012080:	d102      	bne.n	8012088 <tcp_receive+0xb78>
              pcb->state = CLOSE_WAIT;
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	2207      	movs	r2, #7
 8012086:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8012088:	697b      	ldr	r3, [r7, #20]
 801208a:	681a      	ldr	r2, [r3, #0]
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8012090:	6978      	ldr	r0, [r7, #20]
 8012092:	f7fd fb27 	bl	800f6e4 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801209a:	2b00      	cmp	r3, #0
 801209c:	d008      	beq.n	80120b0 <tcp_receive+0xba0>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80120a2:	68db      	ldr	r3, [r3, #12]
 80120a4:	685a      	ldr	r2, [r3, #4]
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 80120aa:	429a      	cmp	r2, r3
 80120ac:	f43f af43 	beq.w	8011f36 <tcp_receive+0xa26>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	8b5b      	ldrh	r3, [r3, #26]
 80120b4:	f003 0301 	and.w	r3, r3, #1
 80120b8:	2b00      	cmp	r3, #0
 80120ba:	d00e      	beq.n	80120da <tcp_receive+0xbca>
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	8b5b      	ldrh	r3, [r3, #26]
 80120c0:	f023 0301 	bic.w	r3, r3, #1
 80120c4:	b29a      	uxth	r2, r3
 80120c6:	687b      	ldr	r3, [r7, #4]
 80120c8:	835a      	strh	r2, [r3, #26]
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	8b5b      	ldrh	r3, [r3, #26]
 80120ce:	f043 0302 	orr.w	r3, r3, #2
 80120d2:	b29a      	uxth	r2, r3
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80120d8:	e188      	b.n	80123ec <tcp_receive+0xedc>
        tcp_ack(pcb);
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	8b5b      	ldrh	r3, [r3, #26]
 80120de:	f043 0301 	orr.w	r3, r3, #1
 80120e2:	b29a      	uxth	r2, r3
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80120e8:	e180      	b.n	80123ec <tcp_receive+0xedc>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80120ee:	2b00      	cmp	r3, #0
 80120f0:	d106      	bne.n	8012100 <tcp_receive+0xbf0>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80120f2:	4848      	ldr	r0, [pc, #288]	; (8012214 <tcp_receive+0xd04>)
 80120f4:	f7fd fb0e 	bl	800f714 <tcp_seg_copy>
 80120f8:	4602      	mov	r2, r0
 80120fa:	687b      	ldr	r3, [r7, #4]
 80120fc:	675a      	str	r2, [r3, #116]	; 0x74
 80120fe:	e16d      	b.n	80123dc <tcp_receive+0xecc>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8012100:	2300      	movs	r3, #0
 8012102:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012108:	63bb      	str	r3, [r7, #56]	; 0x38
 801210a:	e157      	b.n	80123bc <tcp_receive+0xeac>
            if (seqno == next->tcphdr->seqno) {
 801210c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801210e:	68db      	ldr	r3, [r3, #12]
 8012110:	685a      	ldr	r2, [r3, #4]
 8012112:	4b41      	ldr	r3, [pc, #260]	; (8012218 <tcp_receive+0xd08>)
 8012114:	681b      	ldr	r3, [r3, #0]
 8012116:	429a      	cmp	r2, r3
 8012118:	d11d      	bne.n	8012156 <tcp_receive+0xc46>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801211a:	4b3e      	ldr	r3, [pc, #248]	; (8012214 <tcp_receive+0xd04>)
 801211c:	891a      	ldrh	r2, [r3, #8]
 801211e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012120:	891b      	ldrh	r3, [r3, #8]
 8012122:	429a      	cmp	r2, r3
 8012124:	f240 814f 	bls.w	80123c6 <tcp_receive+0xeb6>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012128:	483a      	ldr	r0, [pc, #232]	; (8012214 <tcp_receive+0xd04>)
 801212a:	f7fd faf3 	bl	800f714 <tcp_seg_copy>
 801212e:	60b8      	str	r0, [r7, #8]
                if (cseg != NULL) {
 8012130:	68bb      	ldr	r3, [r7, #8]
 8012132:	2b00      	cmp	r3, #0
 8012134:	f000 8149 	beq.w	80123ca <tcp_receive+0xeba>
                  if (prev != NULL) {
 8012138:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801213a:	2b00      	cmp	r3, #0
 801213c:	d003      	beq.n	8012146 <tcp_receive+0xc36>
                    prev->next = cseg;
 801213e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012140:	68ba      	ldr	r2, [r7, #8]
 8012142:	601a      	str	r2, [r3, #0]
 8012144:	e002      	b.n	801214c <tcp_receive+0xc3c>
                  } else {
                    pcb->ooseq = cseg;
 8012146:	687b      	ldr	r3, [r7, #4]
 8012148:	68ba      	ldr	r2, [r7, #8]
 801214a:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 801214c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801214e:	68b8      	ldr	r0, [r7, #8]
 8012150:	f7ff f8da 	bl	8011308 <tcp_oos_insert_segment>
                }
                break;
 8012154:	e139      	b.n	80123ca <tcp_receive+0xeba>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8012156:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012158:	2b00      	cmp	r3, #0
 801215a:	d117      	bne.n	801218c <tcp_receive+0xc7c>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801215c:	4b2e      	ldr	r3, [pc, #184]	; (8012218 <tcp_receive+0xd08>)
 801215e:	681a      	ldr	r2, [r3, #0]
 8012160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012162:	68db      	ldr	r3, [r3, #12]
 8012164:	685b      	ldr	r3, [r3, #4]
 8012166:	1ad3      	subs	r3, r2, r3
 8012168:	2b00      	cmp	r3, #0
 801216a:	da57      	bge.n	801221c <tcp_receive+0xd0c>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801216c:	4829      	ldr	r0, [pc, #164]	; (8012214 <tcp_receive+0xd04>)
 801216e:	f7fd fad1 	bl	800f714 <tcp_seg_copy>
 8012172:	6138      	str	r0, [r7, #16]
                  if (cseg != NULL) {
 8012174:	693b      	ldr	r3, [r7, #16]
 8012176:	2b00      	cmp	r3, #0
 8012178:	f000 8129 	beq.w	80123ce <tcp_receive+0xebe>
                    pcb->ooseq = cseg;
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	693a      	ldr	r2, [r7, #16]
 8012180:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8012182:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012184:	6938      	ldr	r0, [r7, #16]
 8012186:	f7ff f8bf 	bl	8011308 <tcp_oos_insert_segment>
                  }
                  break;
 801218a:	e120      	b.n	80123ce <tcp_receive+0xebe>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801218c:	4b22      	ldr	r3, [pc, #136]	; (8012218 <tcp_receive+0xd08>)
 801218e:	681a      	ldr	r2, [r3, #0]
 8012190:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012192:	68db      	ldr	r3, [r3, #12]
 8012194:	685b      	ldr	r3, [r3, #4]
 8012196:	1ad3      	subs	r3, r2, r3
 8012198:	3b01      	subs	r3, #1
 801219a:	2b00      	cmp	r3, #0
 801219c:	db3e      	blt.n	801221c <tcp_receive+0xd0c>
 801219e:	4b1e      	ldr	r3, [pc, #120]	; (8012218 <tcp_receive+0xd08>)
 80121a0:	681a      	ldr	r2, [r3, #0]
 80121a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121a4:	68db      	ldr	r3, [r3, #12]
 80121a6:	685b      	ldr	r3, [r3, #4]
 80121a8:	1ad3      	subs	r3, r2, r3
 80121aa:	3301      	adds	r3, #1
 80121ac:	2b00      	cmp	r3, #0
 80121ae:	dc35      	bgt.n	801221c <tcp_receive+0xd0c>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80121b0:	4818      	ldr	r0, [pc, #96]	; (8012214 <tcp_receive+0xd04>)
 80121b2:	f7fd faaf 	bl	800f714 <tcp_seg_copy>
 80121b6:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 80121b8:	68fb      	ldr	r3, [r7, #12]
 80121ba:	2b00      	cmp	r3, #0
 80121bc:	f000 8109 	beq.w	80123d2 <tcp_receive+0xec2>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80121c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80121c2:	68db      	ldr	r3, [r3, #12]
 80121c4:	685b      	ldr	r3, [r3, #4]
 80121c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80121c8:	8912      	ldrh	r2, [r2, #8]
 80121ca:	441a      	add	r2, r3
 80121cc:	4b12      	ldr	r3, [pc, #72]	; (8012218 <tcp_receive+0xd08>)
 80121ce:	681b      	ldr	r3, [r3, #0]
 80121d0:	1ad3      	subs	r3, r2, r3
 80121d2:	2b00      	cmp	r3, #0
 80121d4:	dd12      	ble.n	80121fc <tcp_receive+0xcec>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80121d6:	4b10      	ldr	r3, [pc, #64]	; (8012218 <tcp_receive+0xd08>)
 80121d8:	681b      	ldr	r3, [r3, #0]
 80121da:	b29a      	uxth	r2, r3
 80121dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80121de:	68db      	ldr	r3, [r3, #12]
 80121e0:	685b      	ldr	r3, [r3, #4]
 80121e2:	b29b      	uxth	r3, r3
 80121e4:	1ad3      	subs	r3, r2, r3
 80121e6:	b29a      	uxth	r2, r3
 80121e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80121ea:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80121ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80121ee:	685a      	ldr	r2, [r3, #4]
 80121f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80121f2:	891b      	ldrh	r3, [r3, #8]
 80121f4:	4619      	mov	r1, r3
 80121f6:	4610      	mov	r0, r2
 80121f8:	f7fb fab6 	bl	800d768 <pbuf_realloc>
                    }
                    prev->next = cseg;
 80121fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80121fe:	68fa      	ldr	r2, [r7, #12]
 8012200:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8012202:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012204:	68f8      	ldr	r0, [r7, #12]
 8012206:	f7ff f87f 	bl	8011308 <tcp_oos_insert_segment>
                  }
                  break;
 801220a:	e0e2      	b.n	80123d2 <tcp_receive+0xec2>
 801220c:	20004574 	.word	0x20004574
 8012210:	20004571 	.word	0x20004571
 8012214:	20004544 	.word	0x20004544
 8012218:	20004564 	.word	0x20004564
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 801221c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801221e:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8012220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012222:	681b      	ldr	r3, [r3, #0]
 8012224:	2b00      	cmp	r3, #0
 8012226:	f040 80c6 	bne.w	80123b6 <tcp_receive+0xea6>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801222a:	4b80      	ldr	r3, [pc, #512]	; (801242c <tcp_receive+0xf1c>)
 801222c:	681a      	ldr	r2, [r3, #0]
 801222e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012230:	68db      	ldr	r3, [r3, #12]
 8012232:	685b      	ldr	r3, [r3, #4]
 8012234:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8012236:	2b00      	cmp	r3, #0
 8012238:	f340 80bd 	ble.w	80123b6 <tcp_receive+0xea6>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801223c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801223e:	68db      	ldr	r3, [r3, #12]
 8012240:	899b      	ldrh	r3, [r3, #12]
 8012242:	b29b      	uxth	r3, r3
 8012244:	4618      	mov	r0, r3
 8012246:	f7f6 fce9 	bl	8008c1c <lwip_htons>
 801224a:	4603      	mov	r3, r0
 801224c:	b2db      	uxtb	r3, r3
 801224e:	f003 0301 	and.w	r3, r3, #1
 8012252:	2b00      	cmp	r3, #0
 8012254:	f040 80bf 	bne.w	80123d6 <tcp_receive+0xec6>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8012258:	4875      	ldr	r0, [pc, #468]	; (8012430 <tcp_receive+0xf20>)
 801225a:	f7fd fa5b 	bl	800f714 <tcp_seg_copy>
 801225e:	4602      	mov	r2, r0
 8012260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012262:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8012264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012266:	681b      	ldr	r3, [r3, #0]
 8012268:	2b00      	cmp	r3, #0
 801226a:	f000 80b6 	beq.w	80123da <tcp_receive+0xeca>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801226e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012270:	68db      	ldr	r3, [r3, #12]
 8012272:	685b      	ldr	r3, [r3, #4]
 8012274:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012276:	8912      	ldrh	r2, [r2, #8]
 8012278:	441a      	add	r2, r3
 801227a:	4b6c      	ldr	r3, [pc, #432]	; (801242c <tcp_receive+0xf1c>)
 801227c:	681b      	ldr	r3, [r3, #0]
 801227e:	1ad3      	subs	r3, r2, r3
 8012280:	2b00      	cmp	r3, #0
 8012282:	dd12      	ble.n	80122aa <tcp_receive+0xd9a>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8012284:	4b69      	ldr	r3, [pc, #420]	; (801242c <tcp_receive+0xf1c>)
 8012286:	681b      	ldr	r3, [r3, #0]
 8012288:	b29a      	uxth	r2, r3
 801228a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801228c:	68db      	ldr	r3, [r3, #12]
 801228e:	685b      	ldr	r3, [r3, #4]
 8012290:	b29b      	uxth	r3, r3
 8012292:	1ad3      	subs	r3, r2, r3
 8012294:	b29a      	uxth	r2, r3
 8012296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012298:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801229a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801229c:	685a      	ldr	r2, [r3, #4]
 801229e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122a0:	891b      	ldrh	r3, [r3, #8]
 80122a2:	4619      	mov	r1, r3
 80122a4:	4610      	mov	r0, r2
 80122a6:	f7fb fa5f 	bl	800d768 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80122aa:	4b62      	ldr	r3, [pc, #392]	; (8012434 <tcp_receive+0xf24>)
 80122ac:	881b      	ldrh	r3, [r3, #0]
 80122ae:	461a      	mov	r2, r3
 80122b0:	4b5e      	ldr	r3, [pc, #376]	; (801242c <tcp_receive+0xf1c>)
 80122b2:	681b      	ldr	r3, [r3, #0]
 80122b4:	441a      	add	r2, r3
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80122ba:	6879      	ldr	r1, [r7, #4]
 80122bc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80122be:	440b      	add	r3, r1
 80122c0:	1ad3      	subs	r3, r2, r3
 80122c2:	2b00      	cmp	r3, #0
 80122c4:	f340 8089 	ble.w	80123da <tcp_receive+0xeca>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80122c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122ca:	681b      	ldr	r3, [r3, #0]
 80122cc:	68db      	ldr	r3, [r3, #12]
 80122ce:	899b      	ldrh	r3, [r3, #12]
 80122d0:	b29b      	uxth	r3, r3
 80122d2:	4618      	mov	r0, r3
 80122d4:	f7f6 fca2 	bl	8008c1c <lwip_htons>
 80122d8:	4603      	mov	r3, r0
 80122da:	b2db      	uxtb	r3, r3
 80122dc:	f003 0301 	and.w	r3, r3, #1
 80122e0:	2b00      	cmp	r3, #0
 80122e2:	d022      	beq.n	801232a <tcp_receive+0xe1a>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80122e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122e6:	681b      	ldr	r3, [r3, #0]
 80122e8:	68dc      	ldr	r4, [r3, #12]
 80122ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122ec:	681b      	ldr	r3, [r3, #0]
 80122ee:	68db      	ldr	r3, [r3, #12]
 80122f0:	899b      	ldrh	r3, [r3, #12]
 80122f2:	b29b      	uxth	r3, r3
 80122f4:	b21b      	sxth	r3, r3
 80122f6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80122fa:	b21d      	sxth	r5, r3
 80122fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122fe:	681b      	ldr	r3, [r3, #0]
 8012300:	68db      	ldr	r3, [r3, #12]
 8012302:	899b      	ldrh	r3, [r3, #12]
 8012304:	b29b      	uxth	r3, r3
 8012306:	4618      	mov	r0, r3
 8012308:	f7f6 fc88 	bl	8008c1c <lwip_htons>
 801230c:	4603      	mov	r3, r0
 801230e:	b2db      	uxtb	r3, r3
 8012310:	b29b      	uxth	r3, r3
 8012312:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8012316:	b29b      	uxth	r3, r3
 8012318:	4618      	mov	r0, r3
 801231a:	f7f6 fc7f 	bl	8008c1c <lwip_htons>
 801231e:	4603      	mov	r3, r0
 8012320:	b21b      	sxth	r3, r3
 8012322:	432b      	orrs	r3, r5
 8012324:	b21b      	sxth	r3, r3
 8012326:	b29b      	uxth	r3, r3
 8012328:	81a3      	strh	r3, [r4, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801232a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801232c:	681b      	ldr	r3, [r3, #0]
 801232e:	687a      	ldr	r2, [r7, #4]
 8012330:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8012332:	b291      	uxth	r1, r2
 8012334:	687a      	ldr	r2, [r7, #4]
 8012336:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8012338:	440a      	add	r2, r1
 801233a:	b291      	uxth	r1, r2
 801233c:	4a3b      	ldr	r2, [pc, #236]	; (801242c <tcp_receive+0xf1c>)
 801233e:	6812      	ldr	r2, [r2, #0]
 8012340:	b292      	uxth	r2, r2
 8012342:	1a8a      	subs	r2, r1, r2
 8012344:	b292      	uxth	r2, r2
 8012346:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8012348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801234a:	681b      	ldr	r3, [r3, #0]
 801234c:	685a      	ldr	r2, [r3, #4]
 801234e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012350:	681b      	ldr	r3, [r3, #0]
 8012352:	891b      	ldrh	r3, [r3, #8]
 8012354:	4619      	mov	r1, r3
 8012356:	4610      	mov	r0, r2
 8012358:	f7fb fa06 	bl	800d768 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801235c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801235e:	681b      	ldr	r3, [r3, #0]
 8012360:	891c      	ldrh	r4, [r3, #8]
 8012362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012364:	681b      	ldr	r3, [r3, #0]
 8012366:	68db      	ldr	r3, [r3, #12]
 8012368:	899b      	ldrh	r3, [r3, #12]
 801236a:	b29b      	uxth	r3, r3
 801236c:	4618      	mov	r0, r3
 801236e:	f7f6 fc55 	bl	8008c1c <lwip_htons>
 8012372:	4603      	mov	r3, r0
 8012374:	b2db      	uxtb	r3, r3
 8012376:	f003 0303 	and.w	r3, r3, #3
 801237a:	2b00      	cmp	r3, #0
 801237c:	d001      	beq.n	8012382 <tcp_receive+0xe72>
 801237e:	2301      	movs	r3, #1
 8012380:	e000      	b.n	8012384 <tcp_receive+0xe74>
 8012382:	2300      	movs	r3, #0
 8012384:	4423      	add	r3, r4
 8012386:	b29a      	uxth	r2, r3
 8012388:	4b2a      	ldr	r3, [pc, #168]	; (8012434 <tcp_receive+0xf24>)
 801238a:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801238c:	4b29      	ldr	r3, [pc, #164]	; (8012434 <tcp_receive+0xf24>)
 801238e:	881b      	ldrh	r3, [r3, #0]
 8012390:	461a      	mov	r2, r3
 8012392:	4b26      	ldr	r3, [pc, #152]	; (801242c <tcp_receive+0xf1c>)
 8012394:	681b      	ldr	r3, [r3, #0]
 8012396:	441a      	add	r2, r3
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801239c:	6879      	ldr	r1, [r7, #4]
 801239e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80123a0:	440b      	add	r3, r1
 80123a2:	429a      	cmp	r2, r3
 80123a4:	d019      	beq.n	80123da <tcp_receive+0xeca>
 80123a6:	4b24      	ldr	r3, [pc, #144]	; (8012438 <tcp_receive+0xf28>)
 80123a8:	f240 62f9 	movw	r2, #1785	; 0x6f9
 80123ac:	4923      	ldr	r1, [pc, #140]	; (801243c <tcp_receive+0xf2c>)
 80123ae:	4824      	ldr	r0, [pc, #144]	; (8012440 <tcp_receive+0xf30>)
 80123b0:	f005 f9b0 	bl	8017714 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80123b4:	e011      	b.n	80123da <tcp_receive+0xeca>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80123b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123b8:	681b      	ldr	r3, [r3, #0]
 80123ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80123bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123be:	2b00      	cmp	r3, #0
 80123c0:	f47f aea4 	bne.w	801210c <tcp_receive+0xbfc>
 80123c4:	e00a      	b.n	80123dc <tcp_receive+0xecc>
                break;
 80123c6:	bf00      	nop
 80123c8:	e008      	b.n	80123dc <tcp_receive+0xecc>
                break;
 80123ca:	bf00      	nop
 80123cc:	e006      	b.n	80123dc <tcp_receive+0xecc>
                  break;
 80123ce:	bf00      	nop
 80123d0:	e004      	b.n	80123dc <tcp_receive+0xecc>
                  break;
 80123d2:	bf00      	nop
 80123d4:	e002      	b.n	80123dc <tcp_receive+0xecc>
                  break;
 80123d6:	bf00      	nop
 80123d8:	e000      	b.n	80123dc <tcp_receive+0xecc>
                break;
 80123da:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 80123dc:	6878      	ldr	r0, [r7, #4]
 80123de:	f001 fea9 	bl	8014134 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 80123e2:	e003      	b.n	80123ec <tcp_receive+0xedc>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80123e4:	6878      	ldr	r0, [r7, #4]
 80123e6:	f001 fea5 	bl	8014134 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80123ea:	e01a      	b.n	8012422 <tcp_receive+0xf12>
 80123ec:	e019      	b.n	8012422 <tcp_receive+0xf12>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80123ee:	4b0f      	ldr	r3, [pc, #60]	; (801242c <tcp_receive+0xf1c>)
 80123f0:	681a      	ldr	r2, [r3, #0]
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80123f6:	1ad3      	subs	r3, r2, r3
 80123f8:	2b00      	cmp	r3, #0
 80123fa:	db0a      	blt.n	8012412 <tcp_receive+0xf02>
 80123fc:	4b0b      	ldr	r3, [pc, #44]	; (801242c <tcp_receive+0xf1c>)
 80123fe:	681a      	ldr	r2, [r3, #0]
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012404:	6879      	ldr	r1, [r7, #4]
 8012406:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012408:	440b      	add	r3, r1
 801240a:	1ad3      	subs	r3, r2, r3
 801240c:	3301      	adds	r3, #1
 801240e:	2b00      	cmp	r3, #0
 8012410:	dd07      	ble.n	8012422 <tcp_receive+0xf12>
      tcp_ack_now(pcb);
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	8b5b      	ldrh	r3, [r3, #26]
 8012416:	f043 0302 	orr.w	r3, r3, #2
 801241a:	b29a      	uxth	r2, r3
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8012420:	e7ff      	b.n	8012422 <tcp_receive+0xf12>
 8012422:	bf00      	nop
 8012424:	3750      	adds	r7, #80	; 0x50
 8012426:	46bd      	mov	sp, r7
 8012428:	bdb0      	pop	{r4, r5, r7, pc}
 801242a:	bf00      	nop
 801242c:	20004564 	.word	0x20004564
 8012430:	20004544 	.word	0x20004544
 8012434:	2000456e 	.word	0x2000456e
 8012438:	0801a610 	.word	0x0801a610
 801243c:	0801a9b8 	.word	0x0801a9b8
 8012440:	0801a65c 	.word	0x0801a65c

08012444 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8012444:	b480      	push	{r7}
 8012446:	b083      	sub	sp, #12
 8012448:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801244a:	4b15      	ldr	r3, [pc, #84]	; (80124a0 <tcp_get_next_optbyte+0x5c>)
 801244c:	881b      	ldrh	r3, [r3, #0]
 801244e:	1c5a      	adds	r2, r3, #1
 8012450:	b291      	uxth	r1, r2
 8012452:	4a13      	ldr	r2, [pc, #76]	; (80124a0 <tcp_get_next_optbyte+0x5c>)
 8012454:	8011      	strh	r1, [r2, #0]
 8012456:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8012458:	4b12      	ldr	r3, [pc, #72]	; (80124a4 <tcp_get_next_optbyte+0x60>)
 801245a:	681b      	ldr	r3, [r3, #0]
 801245c:	2b00      	cmp	r3, #0
 801245e:	d004      	beq.n	801246a <tcp_get_next_optbyte+0x26>
 8012460:	4b11      	ldr	r3, [pc, #68]	; (80124a8 <tcp_get_next_optbyte+0x64>)
 8012462:	881b      	ldrh	r3, [r3, #0]
 8012464:	88fa      	ldrh	r2, [r7, #6]
 8012466:	429a      	cmp	r2, r3
 8012468:	d208      	bcs.n	801247c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801246a:	4b10      	ldr	r3, [pc, #64]	; (80124ac <tcp_get_next_optbyte+0x68>)
 801246c:	681b      	ldr	r3, [r3, #0]
 801246e:	3314      	adds	r3, #20
 8012470:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8012472:	88fb      	ldrh	r3, [r7, #6]
 8012474:	683a      	ldr	r2, [r7, #0]
 8012476:	4413      	add	r3, r2
 8012478:	781b      	ldrb	r3, [r3, #0]
 801247a:	e00b      	b.n	8012494 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801247c:	88fb      	ldrh	r3, [r7, #6]
 801247e:	b2da      	uxtb	r2, r3
 8012480:	4b09      	ldr	r3, [pc, #36]	; (80124a8 <tcp_get_next_optbyte+0x64>)
 8012482:	881b      	ldrh	r3, [r3, #0]
 8012484:	b2db      	uxtb	r3, r3
 8012486:	1ad3      	subs	r3, r2, r3
 8012488:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801248a:	4b06      	ldr	r3, [pc, #24]	; (80124a4 <tcp_get_next_optbyte+0x60>)
 801248c:	681a      	ldr	r2, [r3, #0]
 801248e:	797b      	ldrb	r3, [r7, #5]
 8012490:	4413      	add	r3, r2
 8012492:	781b      	ldrb	r3, [r3, #0]
  }
}
 8012494:	4618      	mov	r0, r3
 8012496:	370c      	adds	r7, #12
 8012498:	46bd      	mov	sp, r7
 801249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801249e:	4770      	bx	lr
 80124a0:	20004560 	.word	0x20004560
 80124a4:	2000455c 	.word	0x2000455c
 80124a8:	2000455a 	.word	0x2000455a
 80124ac:	20004554 	.word	0x20004554

080124b0 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80124b0:	b580      	push	{r7, lr}
 80124b2:	b084      	sub	sp, #16
 80124b4:	af00      	add	r7, sp, #0
 80124b6:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	2b00      	cmp	r3, #0
 80124bc:	d106      	bne.n	80124cc <tcp_parseopt+0x1c>
 80124be:	4b31      	ldr	r3, [pc, #196]	; (8012584 <tcp_parseopt+0xd4>)
 80124c0:	f240 727d 	movw	r2, #1917	; 0x77d
 80124c4:	4930      	ldr	r1, [pc, #192]	; (8012588 <tcp_parseopt+0xd8>)
 80124c6:	4831      	ldr	r0, [pc, #196]	; (801258c <tcp_parseopt+0xdc>)
 80124c8:	f005 f924 	bl	8017714 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80124cc:	4b30      	ldr	r3, [pc, #192]	; (8012590 <tcp_parseopt+0xe0>)
 80124ce:	881b      	ldrh	r3, [r3, #0]
 80124d0:	2b00      	cmp	r3, #0
 80124d2:	d053      	beq.n	801257c <tcp_parseopt+0xcc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80124d4:	4b2f      	ldr	r3, [pc, #188]	; (8012594 <tcp_parseopt+0xe4>)
 80124d6:	2200      	movs	r2, #0
 80124d8:	801a      	strh	r2, [r3, #0]
 80124da:	e043      	b.n	8012564 <tcp_parseopt+0xb4>
      u8_t opt = tcp_get_next_optbyte();
 80124dc:	f7ff ffb2 	bl	8012444 <tcp_get_next_optbyte>
 80124e0:	4603      	mov	r3, r0
 80124e2:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80124e4:	7bfb      	ldrb	r3, [r7, #15]
 80124e6:	2b01      	cmp	r3, #1
 80124e8:	d03c      	beq.n	8012564 <tcp_parseopt+0xb4>
 80124ea:	2b02      	cmp	r3, #2
 80124ec:	d002      	beq.n	80124f4 <tcp_parseopt+0x44>
 80124ee:	2b00      	cmp	r3, #0
 80124f0:	d03f      	beq.n	8012572 <tcp_parseopt+0xc2>
 80124f2:	e026      	b.n	8012542 <tcp_parseopt+0x92>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80124f4:	f7ff ffa6 	bl	8012444 <tcp_get_next_optbyte>
 80124f8:	4603      	mov	r3, r0
 80124fa:	2b04      	cmp	r3, #4
 80124fc:	d13b      	bne.n	8012576 <tcp_parseopt+0xc6>
 80124fe:	4b25      	ldr	r3, [pc, #148]	; (8012594 <tcp_parseopt+0xe4>)
 8012500:	881b      	ldrh	r3, [r3, #0]
 8012502:	3302      	adds	r3, #2
 8012504:	4a22      	ldr	r2, [pc, #136]	; (8012590 <tcp_parseopt+0xe0>)
 8012506:	8812      	ldrh	r2, [r2, #0]
 8012508:	4293      	cmp	r3, r2
 801250a:	dc34      	bgt.n	8012576 <tcp_parseopt+0xc6>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801250c:	f7ff ff9a 	bl	8012444 <tcp_get_next_optbyte>
 8012510:	4603      	mov	r3, r0
 8012512:	b29b      	uxth	r3, r3
 8012514:	021b      	lsls	r3, r3, #8
 8012516:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8012518:	f7ff ff94 	bl	8012444 <tcp_get_next_optbyte>
 801251c:	4603      	mov	r3, r0
 801251e:	b29a      	uxth	r2, r3
 8012520:	89bb      	ldrh	r3, [r7, #12]
 8012522:	4313      	orrs	r3, r2
 8012524:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8012526:	89bb      	ldrh	r3, [r7, #12]
 8012528:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 801252c:	d804      	bhi.n	8012538 <tcp_parseopt+0x88>
 801252e:	89bb      	ldrh	r3, [r7, #12]
 8012530:	2b00      	cmp	r3, #0
 8012532:	d001      	beq.n	8012538 <tcp_parseopt+0x88>
 8012534:	89ba      	ldrh	r2, [r7, #12]
 8012536:	e001      	b.n	801253c <tcp_parseopt+0x8c>
 8012538:	f44f 7206 	mov.w	r2, #536	; 0x218
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8012540:	e010      	b.n	8012564 <tcp_parseopt+0xb4>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8012542:	f7ff ff7f 	bl	8012444 <tcp_get_next_optbyte>
 8012546:	4603      	mov	r3, r0
 8012548:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801254a:	7afb      	ldrb	r3, [r7, #11]
 801254c:	2b01      	cmp	r3, #1
 801254e:	d914      	bls.n	801257a <tcp_parseopt+0xca>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8012550:	7afb      	ldrb	r3, [r7, #11]
 8012552:	b29a      	uxth	r2, r3
 8012554:	4b0f      	ldr	r3, [pc, #60]	; (8012594 <tcp_parseopt+0xe4>)
 8012556:	881b      	ldrh	r3, [r3, #0]
 8012558:	4413      	add	r3, r2
 801255a:	b29b      	uxth	r3, r3
 801255c:	3b02      	subs	r3, #2
 801255e:	b29a      	uxth	r2, r3
 8012560:	4b0c      	ldr	r3, [pc, #48]	; (8012594 <tcp_parseopt+0xe4>)
 8012562:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8012564:	4b0b      	ldr	r3, [pc, #44]	; (8012594 <tcp_parseopt+0xe4>)
 8012566:	881a      	ldrh	r2, [r3, #0]
 8012568:	4b09      	ldr	r3, [pc, #36]	; (8012590 <tcp_parseopt+0xe0>)
 801256a:	881b      	ldrh	r3, [r3, #0]
 801256c:	429a      	cmp	r2, r3
 801256e:	d3b5      	bcc.n	80124dc <tcp_parseopt+0x2c>
 8012570:	e004      	b.n	801257c <tcp_parseopt+0xcc>
          return;
 8012572:	bf00      	nop
 8012574:	e002      	b.n	801257c <tcp_parseopt+0xcc>
            return;
 8012576:	bf00      	nop
 8012578:	e000      	b.n	801257c <tcp_parseopt+0xcc>
            return;
 801257a:	bf00      	nop
      }
    }
  }
}
 801257c:	3710      	adds	r7, #16
 801257e:	46bd      	mov	sp, r7
 8012580:	bd80      	pop	{r7, pc}
 8012582:	bf00      	nop
 8012584:	0801a610 	.word	0x0801a610
 8012588:	0801aa74 	.word	0x0801aa74
 801258c:	0801a65c 	.word	0x0801a65c
 8012590:	20004558 	.word	0x20004558
 8012594:	20004560 	.word	0x20004560

08012598 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8012598:	b480      	push	{r7}
 801259a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 801259c:	4b05      	ldr	r3, [pc, #20]	; (80125b4 <tcp_trigger_input_pcb_close+0x1c>)
 801259e:	781b      	ldrb	r3, [r3, #0]
 80125a0:	f043 0310 	orr.w	r3, r3, #16
 80125a4:	b2da      	uxtb	r2, r3
 80125a6:	4b03      	ldr	r3, [pc, #12]	; (80125b4 <tcp_trigger_input_pcb_close+0x1c>)
 80125a8:	701a      	strb	r2, [r3, #0]
}
 80125aa:	bf00      	nop
 80125ac:	46bd      	mov	sp, r7
 80125ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125b2:	4770      	bx	lr
 80125b4:	20004571 	.word	0x20004571

080125b8 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80125b8:	b580      	push	{r7, lr}
 80125ba:	b084      	sub	sp, #16
 80125bc:	af00      	add	r7, sp, #0
 80125be:	60f8      	str	r0, [r7, #12]
 80125c0:	60b9      	str	r1, [r7, #8]
 80125c2:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80125c4:	68fb      	ldr	r3, [r7, #12]
 80125c6:	2b00      	cmp	r3, #0
 80125c8:	d00a      	beq.n	80125e0 <tcp_route+0x28>
 80125ca:	68fb      	ldr	r3, [r7, #12]
 80125cc:	7a1b      	ldrb	r3, [r3, #8]
 80125ce:	2b00      	cmp	r3, #0
 80125d0:	d006      	beq.n	80125e0 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80125d2:	68fb      	ldr	r3, [r7, #12]
 80125d4:	7a1b      	ldrb	r3, [r3, #8]
 80125d6:	4618      	mov	r0, r3
 80125d8:	f7fa fec2 	bl	800d360 <netif_get_by_index>
 80125dc:	4603      	mov	r3, r0
 80125de:	e003      	b.n	80125e8 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80125e0:	6878      	ldr	r0, [r7, #4]
 80125e2:	f7f8 fc21 	bl	800ae28 <ip4_route>
 80125e6:	4603      	mov	r3, r0
  }
}
 80125e8:	4618      	mov	r0, r3
 80125ea:	3710      	adds	r7, #16
 80125ec:	46bd      	mov	sp, r7
 80125ee:	bd80      	pop	{r7, pc}

080125f0 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80125f0:	b590      	push	{r4, r7, lr}
 80125f2:	b087      	sub	sp, #28
 80125f4:	af00      	add	r7, sp, #0
 80125f6:	60f8      	str	r0, [r7, #12]
 80125f8:	60b9      	str	r1, [r7, #8]
 80125fa:	603b      	str	r3, [r7, #0]
 80125fc:	4613      	mov	r3, r2
 80125fe:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8012600:	68fb      	ldr	r3, [r7, #12]
 8012602:	2b00      	cmp	r3, #0
 8012604:	d105      	bne.n	8012612 <tcp_create_segment+0x22>
 8012606:	4b45      	ldr	r3, [pc, #276]	; (801271c <tcp_create_segment+0x12c>)
 8012608:	22a3      	movs	r2, #163	; 0xa3
 801260a:	4945      	ldr	r1, [pc, #276]	; (8012720 <tcp_create_segment+0x130>)
 801260c:	4845      	ldr	r0, [pc, #276]	; (8012724 <tcp_create_segment+0x134>)
 801260e:	f005 f881 	bl	8017714 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8012612:	68bb      	ldr	r3, [r7, #8]
 8012614:	2b00      	cmp	r3, #0
 8012616:	d105      	bne.n	8012624 <tcp_create_segment+0x34>
 8012618:	4b40      	ldr	r3, [pc, #256]	; (801271c <tcp_create_segment+0x12c>)
 801261a:	22a4      	movs	r2, #164	; 0xa4
 801261c:	4942      	ldr	r1, [pc, #264]	; (8012728 <tcp_create_segment+0x138>)
 801261e:	4841      	ldr	r0, [pc, #260]	; (8012724 <tcp_create_segment+0x134>)
 8012620:	f005 f878 	bl	8017714 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012624:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012628:	f003 0301 	and.w	r3, r3, #1
 801262c:	2b00      	cmp	r3, #0
 801262e:	d001      	beq.n	8012634 <tcp_create_segment+0x44>
 8012630:	2304      	movs	r3, #4
 8012632:	e000      	b.n	8012636 <tcp_create_segment+0x46>
 8012634:	2300      	movs	r3, #0
 8012636:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8012638:	2003      	movs	r0, #3
 801263a:	f7fa fb29 	bl	800cc90 <memp_malloc>
 801263e:	6138      	str	r0, [r7, #16]
 8012640:	693b      	ldr	r3, [r7, #16]
 8012642:	2b00      	cmp	r3, #0
 8012644:	d104      	bne.n	8012650 <tcp_create_segment+0x60>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8012646:	68b8      	ldr	r0, [r7, #8]
 8012648:	f7fb fa48 	bl	800dadc <pbuf_free>
    return NULL;
 801264c:	2300      	movs	r3, #0
 801264e:	e061      	b.n	8012714 <tcp_create_segment+0x124>
  }
  seg->flags = optflags;
 8012650:	693b      	ldr	r3, [r7, #16]
 8012652:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8012656:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8012658:	693b      	ldr	r3, [r7, #16]
 801265a:	2200      	movs	r2, #0
 801265c:	601a      	str	r2, [r3, #0]
  seg->p = p;
 801265e:	693b      	ldr	r3, [r7, #16]
 8012660:	68ba      	ldr	r2, [r7, #8]
 8012662:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8012664:	68bb      	ldr	r3, [r7, #8]
 8012666:	891a      	ldrh	r2, [r3, #8]
 8012668:	7dfb      	ldrb	r3, [r7, #23]
 801266a:	b29b      	uxth	r3, r3
 801266c:	429a      	cmp	r2, r3
 801266e:	d205      	bcs.n	801267c <tcp_create_segment+0x8c>
 8012670:	4b2a      	ldr	r3, [pc, #168]	; (801271c <tcp_create_segment+0x12c>)
 8012672:	22b0      	movs	r2, #176	; 0xb0
 8012674:	492d      	ldr	r1, [pc, #180]	; (801272c <tcp_create_segment+0x13c>)
 8012676:	482b      	ldr	r0, [pc, #172]	; (8012724 <tcp_create_segment+0x134>)
 8012678:	f005 f84c 	bl	8017714 <iprintf>
  seg->len = p->tot_len - optlen;
 801267c:	68bb      	ldr	r3, [r7, #8]
 801267e:	891a      	ldrh	r2, [r3, #8]
 8012680:	7dfb      	ldrb	r3, [r7, #23]
 8012682:	b29b      	uxth	r3, r3
 8012684:	1ad3      	subs	r3, r2, r3
 8012686:	b29a      	uxth	r2, r3
 8012688:	693b      	ldr	r3, [r7, #16]
 801268a:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801268c:	2114      	movs	r1, #20
 801268e:	68b8      	ldr	r0, [r7, #8]
 8012690:	f7fb f95c 	bl	800d94c <pbuf_add_header>
 8012694:	4603      	mov	r3, r0
 8012696:	2b00      	cmp	r3, #0
 8012698:	d004      	beq.n	80126a4 <tcp_create_segment+0xb4>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 801269a:	6938      	ldr	r0, [r7, #16]
 801269c:	f7fd f822 	bl	800f6e4 <tcp_seg_free>
    return NULL;
 80126a0:	2300      	movs	r3, #0
 80126a2:	e037      	b.n	8012714 <tcp_create_segment+0x124>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80126a4:	693b      	ldr	r3, [r7, #16]
 80126a6:	685b      	ldr	r3, [r3, #4]
 80126a8:	685a      	ldr	r2, [r3, #4]
 80126aa:	693b      	ldr	r3, [r7, #16]
 80126ac:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80126ae:	693b      	ldr	r3, [r7, #16]
 80126b0:	68dc      	ldr	r4, [r3, #12]
 80126b2:	68fb      	ldr	r3, [r7, #12]
 80126b4:	8adb      	ldrh	r3, [r3, #22]
 80126b6:	4618      	mov	r0, r3
 80126b8:	f7f6 fab0 	bl	8008c1c <lwip_htons>
 80126bc:	4603      	mov	r3, r0
 80126be:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80126c0:	693b      	ldr	r3, [r7, #16]
 80126c2:	68dc      	ldr	r4, [r3, #12]
 80126c4:	68fb      	ldr	r3, [r7, #12]
 80126c6:	8b1b      	ldrh	r3, [r3, #24]
 80126c8:	4618      	mov	r0, r3
 80126ca:	f7f6 faa7 	bl	8008c1c <lwip_htons>
 80126ce:	4603      	mov	r3, r0
 80126d0:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80126d2:	693b      	ldr	r3, [r7, #16]
 80126d4:	68dc      	ldr	r4, [r3, #12]
 80126d6:	6838      	ldr	r0, [r7, #0]
 80126d8:	f7f6 fab5 	bl	8008c46 <lwip_htonl>
 80126dc:	4603      	mov	r3, r0
 80126de:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80126e0:	693b      	ldr	r3, [r7, #16]
 80126e2:	68dc      	ldr	r4, [r3, #12]
 80126e4:	7dfb      	ldrb	r3, [r7, #23]
 80126e6:	089b      	lsrs	r3, r3, #2
 80126e8:	b2db      	uxtb	r3, r3
 80126ea:	b29b      	uxth	r3, r3
 80126ec:	3305      	adds	r3, #5
 80126ee:	b29b      	uxth	r3, r3
 80126f0:	031b      	lsls	r3, r3, #12
 80126f2:	b29a      	uxth	r2, r3
 80126f4:	79fb      	ldrb	r3, [r7, #7]
 80126f6:	b29b      	uxth	r3, r3
 80126f8:	4313      	orrs	r3, r2
 80126fa:	b29b      	uxth	r3, r3
 80126fc:	4618      	mov	r0, r3
 80126fe:	f7f6 fa8d 	bl	8008c1c <lwip_htons>
 8012702:	4603      	mov	r3, r0
 8012704:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8012706:	693b      	ldr	r3, [r7, #16]
 8012708:	68db      	ldr	r3, [r3, #12]
 801270a:	2200      	movs	r2, #0
 801270c:	749a      	strb	r2, [r3, #18]
 801270e:	2200      	movs	r2, #0
 8012710:	74da      	strb	r2, [r3, #19]
  return seg;
 8012712:	693b      	ldr	r3, [r7, #16]
}
 8012714:	4618      	mov	r0, r3
 8012716:	371c      	adds	r7, #28
 8012718:	46bd      	mov	sp, r7
 801271a:	bd90      	pop	{r4, r7, pc}
 801271c:	0801aa90 	.word	0x0801aa90
 8012720:	0801aac4 	.word	0x0801aac4
 8012724:	0801aae4 	.word	0x0801aae4
 8012728:	0801ab0c 	.word	0x0801ab0c
 801272c:	0801ab30 	.word	0x0801ab30

08012730 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8012730:	b580      	push	{r7, lr}
 8012732:	b086      	sub	sp, #24
 8012734:	af00      	add	r7, sp, #0
 8012736:	607b      	str	r3, [r7, #4]
 8012738:	4603      	mov	r3, r0
 801273a:	73fb      	strb	r3, [r7, #15]
 801273c:	460b      	mov	r3, r1
 801273e:	81bb      	strh	r3, [r7, #12]
 8012740:	4613      	mov	r3, r2
 8012742:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8012744:	89bb      	ldrh	r3, [r7, #12]
 8012746:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	2b00      	cmp	r3, #0
 801274c:	d105      	bne.n	801275a <tcp_pbuf_prealloc+0x2a>
 801274e:	4b30      	ldr	r3, [pc, #192]	; (8012810 <tcp_pbuf_prealloc+0xe0>)
 8012750:	22e8      	movs	r2, #232	; 0xe8
 8012752:	4930      	ldr	r1, [pc, #192]	; (8012814 <tcp_pbuf_prealloc+0xe4>)
 8012754:	4830      	ldr	r0, [pc, #192]	; (8012818 <tcp_pbuf_prealloc+0xe8>)
 8012756:	f004 ffdd 	bl	8017714 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801275a:	6a3b      	ldr	r3, [r7, #32]
 801275c:	2b00      	cmp	r3, #0
 801275e:	d105      	bne.n	801276c <tcp_pbuf_prealloc+0x3c>
 8012760:	4b2b      	ldr	r3, [pc, #172]	; (8012810 <tcp_pbuf_prealloc+0xe0>)
 8012762:	22e9      	movs	r2, #233	; 0xe9
 8012764:	492d      	ldr	r1, [pc, #180]	; (801281c <tcp_pbuf_prealloc+0xec>)
 8012766:	482c      	ldr	r0, [pc, #176]	; (8012818 <tcp_pbuf_prealloc+0xe8>)
 8012768:	f004 ffd4 	bl	8017714 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 801276c:	89ba      	ldrh	r2, [r7, #12]
 801276e:	897b      	ldrh	r3, [r7, #10]
 8012770:	429a      	cmp	r2, r3
 8012772:	d221      	bcs.n	80127b8 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8012774:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8012778:	f003 0302 	and.w	r3, r3, #2
 801277c:	2b00      	cmp	r3, #0
 801277e:	d111      	bne.n	80127a4 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8012780:	6a3b      	ldr	r3, [r7, #32]
 8012782:	8b5b      	ldrh	r3, [r3, #26]
 8012784:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8012788:	2b00      	cmp	r3, #0
 801278a:	d115      	bne.n	80127b8 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 801278c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012790:	2b00      	cmp	r3, #0
 8012792:	d007      	beq.n	80127a4 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8012794:	6a3b      	ldr	r3, [r7, #32]
 8012796:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8012798:	2b00      	cmp	r3, #0
 801279a:	d103      	bne.n	80127a4 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 801279c:	6a3b      	ldr	r3, [r7, #32]
 801279e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 80127a0:	2b00      	cmp	r3, #0
 80127a2:	d009      	beq.n	80127b8 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 80127a4:	89bb      	ldrh	r3, [r7, #12]
 80127a6:	f203 231b 	addw	r3, r3, #539	; 0x21b
 80127aa:	f023 0203 	bic.w	r2, r3, #3
 80127ae:	897b      	ldrh	r3, [r7, #10]
 80127b0:	4293      	cmp	r3, r2
 80127b2:	bf28      	it	cs
 80127b4:	4613      	movcs	r3, r2
 80127b6:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 80127b8:	8af9      	ldrh	r1, [r7, #22]
 80127ba:	7bfb      	ldrb	r3, [r7, #15]
 80127bc:	f44f 7220 	mov.w	r2, #640	; 0x280
 80127c0:	4618      	mov	r0, r3
 80127c2:	f7fa fe77 	bl	800d4b4 <pbuf_alloc>
 80127c6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80127c8:	693b      	ldr	r3, [r7, #16]
 80127ca:	2b00      	cmp	r3, #0
 80127cc:	d101      	bne.n	80127d2 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 80127ce:	2300      	movs	r3, #0
 80127d0:	e019      	b.n	8012806 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 80127d2:	693b      	ldr	r3, [r7, #16]
 80127d4:	681b      	ldr	r3, [r3, #0]
 80127d6:	2b00      	cmp	r3, #0
 80127d8:	d006      	beq.n	80127e8 <tcp_pbuf_prealloc+0xb8>
 80127da:	4b0d      	ldr	r3, [pc, #52]	; (8012810 <tcp_pbuf_prealloc+0xe0>)
 80127dc:	f240 120b 	movw	r2, #267	; 0x10b
 80127e0:	490f      	ldr	r1, [pc, #60]	; (8012820 <tcp_pbuf_prealloc+0xf0>)
 80127e2:	480d      	ldr	r0, [pc, #52]	; (8012818 <tcp_pbuf_prealloc+0xe8>)
 80127e4:	f004 ff96 	bl	8017714 <iprintf>
  *oversize = p->len - length;
 80127e8:	693b      	ldr	r3, [r7, #16]
 80127ea:	895a      	ldrh	r2, [r3, #10]
 80127ec:	89bb      	ldrh	r3, [r7, #12]
 80127ee:	1ad3      	subs	r3, r2, r3
 80127f0:	b29a      	uxth	r2, r3
 80127f2:	687b      	ldr	r3, [r7, #4]
 80127f4:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 80127f6:	693b      	ldr	r3, [r7, #16]
 80127f8:	89ba      	ldrh	r2, [r7, #12]
 80127fa:	811a      	strh	r2, [r3, #8]
 80127fc:	693b      	ldr	r3, [r7, #16]
 80127fe:	891a      	ldrh	r2, [r3, #8]
 8012800:	693b      	ldr	r3, [r7, #16]
 8012802:	815a      	strh	r2, [r3, #10]
  return p;
 8012804:	693b      	ldr	r3, [r7, #16]
}
 8012806:	4618      	mov	r0, r3
 8012808:	3718      	adds	r7, #24
 801280a:	46bd      	mov	sp, r7
 801280c:	bd80      	pop	{r7, pc}
 801280e:	bf00      	nop
 8012810:	0801aa90 	.word	0x0801aa90
 8012814:	0801ab48 	.word	0x0801ab48
 8012818:	0801aae4 	.word	0x0801aae4
 801281c:	0801ab6c 	.word	0x0801ab6c
 8012820:	0801ab8c 	.word	0x0801ab8c

08012824 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8012824:	b580      	push	{r7, lr}
 8012826:	b082      	sub	sp, #8
 8012828:	af00      	add	r7, sp, #0
 801282a:	6078      	str	r0, [r7, #4]
 801282c:	460b      	mov	r3, r1
 801282e:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8012830:	687b      	ldr	r3, [r7, #4]
 8012832:	2b00      	cmp	r3, #0
 8012834:	d106      	bne.n	8012844 <tcp_write_checks+0x20>
 8012836:	4b33      	ldr	r3, [pc, #204]	; (8012904 <tcp_write_checks+0xe0>)
 8012838:	f240 1233 	movw	r2, #307	; 0x133
 801283c:	4932      	ldr	r1, [pc, #200]	; (8012908 <tcp_write_checks+0xe4>)
 801283e:	4833      	ldr	r0, [pc, #204]	; (801290c <tcp_write_checks+0xe8>)
 8012840:	f004 ff68 	bl	8017714 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8012844:	687b      	ldr	r3, [r7, #4]
 8012846:	7d1b      	ldrb	r3, [r3, #20]
 8012848:	2b04      	cmp	r3, #4
 801284a:	d00e      	beq.n	801286a <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 801284c:	687b      	ldr	r3, [r7, #4]
 801284e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8012850:	2b07      	cmp	r3, #7
 8012852:	d00a      	beq.n	801286a <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8012858:	2b02      	cmp	r3, #2
 801285a:	d006      	beq.n	801286a <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8012860:	2b03      	cmp	r3, #3
 8012862:	d002      	beq.n	801286a <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8012864:	f06f 030a 	mvn.w	r3, #10
 8012868:	e048      	b.n	80128fc <tcp_write_checks+0xd8>
  } else if (len == 0) {
 801286a:	887b      	ldrh	r3, [r7, #2]
 801286c:	2b00      	cmp	r3, #0
 801286e:	d101      	bne.n	8012874 <tcp_write_checks+0x50>
    return ERR_OK;
 8012870:	2300      	movs	r3, #0
 8012872:	e043      	b.n	80128fc <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801287a:	887a      	ldrh	r2, [r7, #2]
 801287c:	429a      	cmp	r2, r3
 801287e:	d909      	bls.n	8012894 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012880:	687b      	ldr	r3, [r7, #4]
 8012882:	8b5b      	ldrh	r3, [r3, #26]
 8012884:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012888:	b29a      	uxth	r2, r3
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801288e:	f04f 33ff 	mov.w	r3, #4294967295
 8012892:	e033      	b.n	80128fc <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801289a:	2b08      	cmp	r3, #8
 801289c:	d909      	bls.n	80128b2 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	8b5b      	ldrh	r3, [r3, #26]
 80128a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80128a6:	b29a      	uxth	r2, r3
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80128ac:	f04f 33ff 	mov.w	r3, #4294967295
 80128b0:	e024      	b.n	80128fc <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 80128b2:	687b      	ldr	r3, [r7, #4]
 80128b4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80128b8:	2b00      	cmp	r3, #0
 80128ba:	d00f      	beq.n	80128dc <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 80128bc:	687b      	ldr	r3, [r7, #4]
 80128be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80128c0:	2b00      	cmp	r3, #0
 80128c2:	d11a      	bne.n	80128fa <tcp_write_checks+0xd6>
 80128c4:	687b      	ldr	r3, [r7, #4]
 80128c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80128c8:	2b00      	cmp	r3, #0
 80128ca:	d116      	bne.n	80128fa <tcp_write_checks+0xd6>
 80128cc:	4b0d      	ldr	r3, [pc, #52]	; (8012904 <tcp_write_checks+0xe0>)
 80128ce:	f44f 72ab 	mov.w	r2, #342	; 0x156
 80128d2:	490f      	ldr	r1, [pc, #60]	; (8012910 <tcp_write_checks+0xec>)
 80128d4:	480d      	ldr	r0, [pc, #52]	; (801290c <tcp_write_checks+0xe8>)
 80128d6:	f004 ff1d 	bl	8017714 <iprintf>
 80128da:	e00e      	b.n	80128fa <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80128e0:	2b00      	cmp	r3, #0
 80128e2:	d103      	bne.n	80128ec <tcp_write_checks+0xc8>
 80128e4:	687b      	ldr	r3, [r7, #4]
 80128e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80128e8:	2b00      	cmp	r3, #0
 80128ea:	d006      	beq.n	80128fa <tcp_write_checks+0xd6>
 80128ec:	4b05      	ldr	r3, [pc, #20]	; (8012904 <tcp_write_checks+0xe0>)
 80128ee:	f240 1259 	movw	r2, #345	; 0x159
 80128f2:	4908      	ldr	r1, [pc, #32]	; (8012914 <tcp_write_checks+0xf0>)
 80128f4:	4805      	ldr	r0, [pc, #20]	; (801290c <tcp_write_checks+0xe8>)
 80128f6:	f004 ff0d 	bl	8017714 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 80128fa:	2300      	movs	r3, #0
}
 80128fc:	4618      	mov	r0, r3
 80128fe:	3708      	adds	r7, #8
 8012900:	46bd      	mov	sp, r7
 8012902:	bd80      	pop	{r7, pc}
 8012904:	0801aa90 	.word	0x0801aa90
 8012908:	0801aba0 	.word	0x0801aba0
 801290c:	0801aae4 	.word	0x0801aae4
 8012910:	0801abc0 	.word	0x0801abc0
 8012914:	0801abfc 	.word	0x0801abfc

08012918 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8012918:	b5b0      	push	{r4, r5, r7, lr}
 801291a:	b09a      	sub	sp, #104	; 0x68
 801291c:	af04      	add	r7, sp, #16
 801291e:	60f8      	str	r0, [r7, #12]
 8012920:	60b9      	str	r1, [r7, #8]
 8012922:	4611      	mov	r1, r2
 8012924:	461a      	mov	r2, r3
 8012926:	460b      	mov	r3, r1
 8012928:	80fb      	strh	r3, [r7, #6]
 801292a:	4613      	mov	r3, r2
 801292c:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801292e:	2300      	movs	r3, #0
 8012930:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8012932:	2300      	movs	r3, #0
 8012934:	653b      	str	r3, [r7, #80]	; 0x50
 8012936:	2300      	movs	r3, #0
 8012938:	64fb      	str	r3, [r7, #76]	; 0x4c
 801293a:	2300      	movs	r3, #0
 801293c:	64bb      	str	r3, [r7, #72]	; 0x48
 801293e:	2300      	movs	r3, #0
 8012940:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8012942:	2300      	movs	r3, #0
 8012944:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8012948:	2300      	movs	r3, #0
 801294a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801294e:	2300      	movs	r3, #0
 8012950:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8012952:	2300      	movs	r3, #0
 8012954:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8012956:	2300      	movs	r3, #0
 8012958:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801295a:	68fb      	ldr	r3, [r7, #12]
 801295c:	2b00      	cmp	r3, #0
 801295e:	d109      	bne.n	8012974 <tcp_write+0x5c>
 8012960:	4ba6      	ldr	r3, [pc, #664]	; (8012bfc <tcp_write+0x2e4>)
 8012962:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8012966:	49a6      	ldr	r1, [pc, #664]	; (8012c00 <tcp_write+0x2e8>)
 8012968:	48a6      	ldr	r0, [pc, #664]	; (8012c04 <tcp_write+0x2ec>)
 801296a:	f004 fed3 	bl	8017714 <iprintf>
 801296e:	f06f 030f 	mvn.w	r3, #15
 8012972:	e32d      	b.n	8012fd0 <tcp_write+0x6b8>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8012974:	68fb      	ldr	r3, [r7, #12]
 8012976:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801297a:	085b      	lsrs	r3, r3, #1
 801297c:	b29a      	uxth	r2, r3
 801297e:	68fb      	ldr	r3, [r7, #12]
 8012980:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012982:	4293      	cmp	r3, r2
 8012984:	bf28      	it	cs
 8012986:	4613      	movcs	r3, r2
 8012988:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801298a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801298c:	2b00      	cmp	r3, #0
 801298e:	d102      	bne.n	8012996 <tcp_write+0x7e>
 8012990:	68fb      	ldr	r3, [r7, #12]
 8012992:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012994:	e000      	b.n	8012998 <tcp_write+0x80>
 8012996:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012998:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801299a:	68bb      	ldr	r3, [r7, #8]
 801299c:	2b00      	cmp	r3, #0
 801299e:	d109      	bne.n	80129b4 <tcp_write+0x9c>
 80129a0:	4b96      	ldr	r3, [pc, #600]	; (8012bfc <tcp_write+0x2e4>)
 80129a2:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 80129a6:	4998      	ldr	r1, [pc, #608]	; (8012c08 <tcp_write+0x2f0>)
 80129a8:	4896      	ldr	r0, [pc, #600]	; (8012c04 <tcp_write+0x2ec>)
 80129aa:	f004 feb3 	bl	8017714 <iprintf>
 80129ae:	f06f 030f 	mvn.w	r3, #15
 80129b2:	e30d      	b.n	8012fd0 <tcp_write+0x6b8>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 80129b4:	88fb      	ldrh	r3, [r7, #6]
 80129b6:	4619      	mov	r1, r3
 80129b8:	68f8      	ldr	r0, [r7, #12]
 80129ba:	f7ff ff33 	bl	8012824 <tcp_write_checks>
 80129be:	4603      	mov	r3, r0
 80129c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 80129c4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80129c8:	2b00      	cmp	r3, #0
 80129ca:	d002      	beq.n	80129d2 <tcp_write+0xba>
    return err;
 80129cc:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80129d0:	e2fe      	b.n	8012fd0 <tcp_write+0x6b8>
  }
  queuelen = pcb->snd_queuelen;
 80129d2:	68fb      	ldr	r3, [r7, #12]
 80129d4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80129d8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80129dc:	2300      	movs	r3, #0
 80129de:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 80129e2:	68fb      	ldr	r3, [r7, #12]
 80129e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80129e6:	2b00      	cmp	r3, #0
 80129e8:	f000 80fa 	beq.w	8012be0 <tcp_write+0x2c8>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80129ec:	68fb      	ldr	r3, [r7, #12]
 80129ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80129f0:	653b      	str	r3, [r7, #80]	; 0x50
 80129f2:	e002      	b.n	80129fa <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 80129f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80129f6:	681b      	ldr	r3, [r3, #0]
 80129f8:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80129fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80129fc:	681b      	ldr	r3, [r3, #0]
 80129fe:	2b00      	cmp	r3, #0
 8012a00:	d1f8      	bne.n	80129f4 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8012a02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012a04:	7a9b      	ldrb	r3, [r3, #10]
 8012a06:	f003 0301 	and.w	r3, r3, #1
 8012a0a:	2b00      	cmp	r3, #0
 8012a0c:	d001      	beq.n	8012a12 <tcp_write+0xfa>
 8012a0e:	2304      	movs	r3, #4
 8012a10:	e000      	b.n	8012a14 <tcp_write+0xfc>
 8012a12:	2300      	movs	r3, #0
 8012a14:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8012a16:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012a18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012a1a:	891b      	ldrh	r3, [r3, #8]
 8012a1c:	4619      	mov	r1, r3
 8012a1e:	8c3b      	ldrh	r3, [r7, #32]
 8012a20:	440b      	add	r3, r1
 8012a22:	429a      	cmp	r2, r3
 8012a24:	da06      	bge.n	8012a34 <tcp_write+0x11c>
 8012a26:	4b75      	ldr	r3, [pc, #468]	; (8012bfc <tcp_write+0x2e4>)
 8012a28:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8012a2c:	4977      	ldr	r1, [pc, #476]	; (8012c0c <tcp_write+0x2f4>)
 8012a2e:	4875      	ldr	r0, [pc, #468]	; (8012c04 <tcp_write+0x2ec>)
 8012a30:	f004 fe70 	bl	8017714 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8012a34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012a36:	891a      	ldrh	r2, [r3, #8]
 8012a38:	8c3b      	ldrh	r3, [r7, #32]
 8012a3a:	4413      	add	r3, r2
 8012a3c:	b29b      	uxth	r3, r3
 8012a3e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012a40:	1ad3      	subs	r3, r2, r3
 8012a42:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8012a44:	68fb      	ldr	r3, [r7, #12]
 8012a46:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012a4a:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8012a4c:	8a7b      	ldrh	r3, [r7, #18]
 8012a4e:	2b00      	cmp	r3, #0
 8012a50:	d027      	beq.n	8012aa2 <tcp_write+0x18a>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8012a52:	8a7b      	ldrh	r3, [r7, #18]
 8012a54:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012a56:	429a      	cmp	r2, r3
 8012a58:	d206      	bcs.n	8012a68 <tcp_write+0x150>
 8012a5a:	4b68      	ldr	r3, [pc, #416]	; (8012bfc <tcp_write+0x2e4>)
 8012a5c:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8012a60:	496b      	ldr	r1, [pc, #428]	; (8012c10 <tcp_write+0x2f8>)
 8012a62:	4868      	ldr	r0, [pc, #416]	; (8012c04 <tcp_write+0x2ec>)
 8012a64:	f004 fe56 	bl	8017714 <iprintf>
      seg = last_unsent;
 8012a68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012a6a:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8012a6c:	8a7b      	ldrh	r3, [r7, #18]
 8012a6e:	88fa      	ldrh	r2, [r7, #6]
 8012a70:	429a      	cmp	r2, r3
 8012a72:	d901      	bls.n	8012a78 <tcp_write+0x160>
 8012a74:	8a7b      	ldrh	r3, [r7, #18]
 8012a76:	e000      	b.n	8012a7a <tcp_write+0x162>
 8012a78:	88fb      	ldrh	r3, [r7, #6]
 8012a7a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012a7c:	4293      	cmp	r3, r2
 8012a7e:	bfa8      	it	ge
 8012a80:	4613      	movge	r3, r2
 8012a82:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8012a84:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012a88:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012a8a:	4413      	add	r3, r2
 8012a8c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8012a90:	8a7a      	ldrh	r2, [r7, #18]
 8012a92:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012a94:	1ad3      	subs	r3, r2, r3
 8012a96:	b29b      	uxth	r3, r3
 8012a98:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8012a9a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012a9c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012a9e:	1ad3      	subs	r3, r2, r3
 8012aa0:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8012aa2:	8a7b      	ldrh	r3, [r7, #18]
 8012aa4:	2b00      	cmp	r3, #0
 8012aa6:	d00b      	beq.n	8012ac0 <tcp_write+0x1a8>
 8012aa8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012aac:	88fb      	ldrh	r3, [r7, #6]
 8012aae:	429a      	cmp	r2, r3
 8012ab0:	d006      	beq.n	8012ac0 <tcp_write+0x1a8>
 8012ab2:	4b52      	ldr	r3, [pc, #328]	; (8012bfc <tcp_write+0x2e4>)
 8012ab4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012ab8:	4956      	ldr	r1, [pc, #344]	; (8012c14 <tcp_write+0x2fc>)
 8012aba:	4852      	ldr	r0, [pc, #328]	; (8012c04 <tcp_write+0x2ec>)
 8012abc:	f004 fe2a 	bl	8017714 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8012ac0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012ac4:	88fb      	ldrh	r3, [r7, #6]
 8012ac6:	429a      	cmp	r2, r3
 8012ac8:	f080 8167 	bcs.w	8012d9a <tcp_write+0x482>
 8012acc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012ace:	2b00      	cmp	r3, #0
 8012ad0:	f000 8163 	beq.w	8012d9a <tcp_write+0x482>
 8012ad4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012ad6:	891b      	ldrh	r3, [r3, #8]
 8012ad8:	2b00      	cmp	r3, #0
 8012ada:	f000 815e 	beq.w	8012d9a <tcp_write+0x482>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8012ade:	88fa      	ldrh	r2, [r7, #6]
 8012ae0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012ae4:	1ad2      	subs	r2, r2, r3
 8012ae6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012ae8:	4293      	cmp	r3, r2
 8012aea:	bfa8      	it	ge
 8012aec:	4613      	movge	r3, r2
 8012aee:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8012af0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012af2:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8012af4:	797b      	ldrb	r3, [r7, #5]
 8012af6:	f003 0301 	and.w	r3, r3, #1
 8012afa:	2b00      	cmp	r3, #0
 8012afc:	d027      	beq.n	8012b4e <tcp_write+0x236>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8012afe:	f107 0012 	add.w	r0, r7, #18
 8012b02:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012b04:	8bf9      	ldrh	r1, [r7, #30]
 8012b06:	2301      	movs	r3, #1
 8012b08:	9302      	str	r3, [sp, #8]
 8012b0a:	797b      	ldrb	r3, [r7, #5]
 8012b0c:	9301      	str	r3, [sp, #4]
 8012b0e:	68fb      	ldr	r3, [r7, #12]
 8012b10:	9300      	str	r3, [sp, #0]
 8012b12:	4603      	mov	r3, r0
 8012b14:	2000      	movs	r0, #0
 8012b16:	f7ff fe0b 	bl	8012730 <tcp_pbuf_prealloc>
 8012b1a:	6578      	str	r0, [r7, #84]	; 0x54
 8012b1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012b1e:	2b00      	cmp	r3, #0
 8012b20:	f000 8224 	beq.w	8012f6c <tcp_write+0x654>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8012b24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012b26:	6858      	ldr	r0, [r3, #4]
 8012b28:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012b2c:	68ba      	ldr	r2, [r7, #8]
 8012b2e:	4413      	add	r3, r2
 8012b30:	8bfa      	ldrh	r2, [r7, #30]
 8012b32:	4619      	mov	r1, r3
 8012b34:	f004 fd15 	bl	8017562 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8012b38:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8012b3a:	f7fb f85d 	bl	800dbf8 <pbuf_clen>
 8012b3e:	4603      	mov	r3, r0
 8012b40:	461a      	mov	r2, r3
 8012b42:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012b46:	4413      	add	r3, r2
 8012b48:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8012b4c:	e041      	b.n	8012bd2 <tcp_write+0x2ba>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8012b4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012b50:	685b      	ldr	r3, [r3, #4]
 8012b52:	637b      	str	r3, [r7, #52]	; 0x34
 8012b54:	e002      	b.n	8012b5c <tcp_write+0x244>
 8012b56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b58:	681b      	ldr	r3, [r3, #0]
 8012b5a:	637b      	str	r3, [r7, #52]	; 0x34
 8012b5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b5e:	681b      	ldr	r3, [r3, #0]
 8012b60:	2b00      	cmp	r3, #0
 8012b62:	d1f8      	bne.n	8012b56 <tcp_write+0x23e>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8012b64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b66:	7b1b      	ldrb	r3, [r3, #12]
 8012b68:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8012b6c:	2b00      	cmp	r3, #0
 8012b6e:	d115      	bne.n	8012b9c <tcp_write+0x284>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8012b70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b72:	685b      	ldr	r3, [r3, #4]
 8012b74:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012b76:	8952      	ldrh	r2, [r2, #10]
 8012b78:	441a      	add	r2, r3
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8012b7a:	68bb      	ldr	r3, [r7, #8]
 8012b7c:	429a      	cmp	r2, r3
 8012b7e:	d10d      	bne.n	8012b9c <tcp_write+0x284>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8012b80:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012b84:	2b00      	cmp	r3, #0
 8012b86:	d006      	beq.n	8012b96 <tcp_write+0x27e>
 8012b88:	4b1c      	ldr	r3, [pc, #112]	; (8012bfc <tcp_write+0x2e4>)
 8012b8a:	f240 2231 	movw	r2, #561	; 0x231
 8012b8e:	4922      	ldr	r1, [pc, #136]	; (8012c18 <tcp_write+0x300>)
 8012b90:	481c      	ldr	r0, [pc, #112]	; (8012c04 <tcp_write+0x2ec>)
 8012b92:	f004 fdbf 	bl	8017714 <iprintf>
          extendlen = seglen;
 8012b96:	8bfb      	ldrh	r3, [r7, #30]
 8012b98:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8012b9a:	e01a      	b.n	8012bd2 <tcp_write+0x2ba>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8012b9c:	8bfb      	ldrh	r3, [r7, #30]
 8012b9e:	2201      	movs	r2, #1
 8012ba0:	4619      	mov	r1, r3
 8012ba2:	2000      	movs	r0, #0
 8012ba4:	f7fa fc86 	bl	800d4b4 <pbuf_alloc>
 8012ba8:	6578      	str	r0, [r7, #84]	; 0x54
 8012baa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012bac:	2b00      	cmp	r3, #0
 8012bae:	f000 81df 	beq.w	8012f70 <tcp_write+0x658>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8012bb2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012bb6:	68ba      	ldr	r2, [r7, #8]
 8012bb8:	441a      	add	r2, r3
 8012bba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012bbc:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8012bbe:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8012bc0:	f7fb f81a 	bl	800dbf8 <pbuf_clen>
 8012bc4:	4603      	mov	r3, r0
 8012bc6:	461a      	mov	r2, r3
 8012bc8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012bcc:	4413      	add	r3, r2
 8012bce:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8012bd2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012bd6:	8bfb      	ldrh	r3, [r7, #30]
 8012bd8:	4413      	add	r3, r2
 8012bda:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8012bde:	e0dc      	b.n	8012d9a <tcp_write+0x482>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8012be0:	68fb      	ldr	r3, [r7, #12]
 8012be2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012be6:	2b00      	cmp	r3, #0
 8012be8:	f000 80d7 	beq.w	8012d9a <tcp_write+0x482>
 8012bec:	4b03      	ldr	r3, [pc, #12]	; (8012bfc <tcp_write+0x2e4>)
 8012bee:	f240 224b 	movw	r2, #587	; 0x24b
 8012bf2:	490a      	ldr	r1, [pc, #40]	; (8012c1c <tcp_write+0x304>)
 8012bf4:	4803      	ldr	r0, [pc, #12]	; (8012c04 <tcp_write+0x2ec>)
 8012bf6:	f004 fd8d 	bl	8017714 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8012bfa:	e0ce      	b.n	8012d9a <tcp_write+0x482>
 8012bfc:	0801aa90 	.word	0x0801aa90
 8012c00:	0801ac30 	.word	0x0801ac30
 8012c04:	0801aae4 	.word	0x0801aae4
 8012c08:	0801ac48 	.word	0x0801ac48
 8012c0c:	0801ac7c 	.word	0x0801ac7c
 8012c10:	0801ac94 	.word	0x0801ac94
 8012c14:	0801acb4 	.word	0x0801acb4
 8012c18:	0801acd4 	.word	0x0801acd4
 8012c1c:	0801ad00 	.word	0x0801ad00
    struct pbuf *p;
    u16_t left = len - pos;
 8012c20:	88fa      	ldrh	r2, [r7, #6]
 8012c22:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012c26:	1ad3      	subs	r3, r2, r3
 8012c28:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8012c2a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012c2e:	b29b      	uxth	r3, r3
 8012c30:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012c32:	1ad3      	subs	r3, r2, r3
 8012c34:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8012c36:	8b7a      	ldrh	r2, [r7, #26]
 8012c38:	8bbb      	ldrh	r3, [r7, #28]
 8012c3a:	4293      	cmp	r3, r2
 8012c3c:	bf28      	it	cs
 8012c3e:	4613      	movcs	r3, r2
 8012c40:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8012c42:	797b      	ldrb	r3, [r7, #5]
 8012c44:	f003 0301 	and.w	r3, r3, #1
 8012c48:	2b00      	cmp	r3, #0
 8012c4a:	d036      	beq.n	8012cba <tcp_write+0x3a2>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8012c4c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012c50:	b29a      	uxth	r2, r3
 8012c52:	8b3b      	ldrh	r3, [r7, #24]
 8012c54:	4413      	add	r3, r2
 8012c56:	b299      	uxth	r1, r3
 8012c58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012c5a:	2b00      	cmp	r3, #0
 8012c5c:	bf0c      	ite	eq
 8012c5e:	2301      	moveq	r3, #1
 8012c60:	2300      	movne	r3, #0
 8012c62:	b2db      	uxtb	r3, r3
 8012c64:	f107 0012 	add.w	r0, r7, #18
 8012c68:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012c6a:	9302      	str	r3, [sp, #8]
 8012c6c:	797b      	ldrb	r3, [r7, #5]
 8012c6e:	9301      	str	r3, [sp, #4]
 8012c70:	68fb      	ldr	r3, [r7, #12]
 8012c72:	9300      	str	r3, [sp, #0]
 8012c74:	4603      	mov	r3, r0
 8012c76:	2036      	movs	r0, #54	; 0x36
 8012c78:	f7ff fd5a 	bl	8012730 <tcp_pbuf_prealloc>
 8012c7c:	6338      	str	r0, [r7, #48]	; 0x30
 8012c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c80:	2b00      	cmp	r3, #0
 8012c82:	f000 8177 	beq.w	8012f74 <tcp_write+0x65c>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8012c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c88:	895b      	ldrh	r3, [r3, #10]
 8012c8a:	8b3a      	ldrh	r2, [r7, #24]
 8012c8c:	429a      	cmp	r2, r3
 8012c8e:	d906      	bls.n	8012c9e <tcp_write+0x386>
 8012c90:	4b8c      	ldr	r3, [pc, #560]	; (8012ec4 <tcp_write+0x5ac>)
 8012c92:	f240 2267 	movw	r2, #615	; 0x267
 8012c96:	498c      	ldr	r1, [pc, #560]	; (8012ec8 <tcp_write+0x5b0>)
 8012c98:	488c      	ldr	r0, [pc, #560]	; (8012ecc <tcp_write+0x5b4>)
 8012c9a:	f004 fd3b 	bl	8017714 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8012c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ca0:	685a      	ldr	r2, [r3, #4]
 8012ca2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012ca6:	18d0      	adds	r0, r2, r3
 8012ca8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012cac:	68ba      	ldr	r2, [r7, #8]
 8012cae:	4413      	add	r3, r2
 8012cb0:	8b3a      	ldrh	r2, [r7, #24]
 8012cb2:	4619      	mov	r1, r3
 8012cb4:	f004 fc55 	bl	8017562 <memcpy>
 8012cb8:	e02f      	b.n	8012d1a <tcp_write+0x402>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8012cba:	8a7b      	ldrh	r3, [r7, #18]
 8012cbc:	2b00      	cmp	r3, #0
 8012cbe:	d006      	beq.n	8012cce <tcp_write+0x3b6>
 8012cc0:	4b80      	ldr	r3, [pc, #512]	; (8012ec4 <tcp_write+0x5ac>)
 8012cc2:	f240 2271 	movw	r2, #625	; 0x271
 8012cc6:	4982      	ldr	r1, [pc, #520]	; (8012ed0 <tcp_write+0x5b8>)
 8012cc8:	4880      	ldr	r0, [pc, #512]	; (8012ecc <tcp_write+0x5b4>)
 8012cca:	f004 fd23 	bl	8017714 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8012cce:	8b3b      	ldrh	r3, [r7, #24]
 8012cd0:	2201      	movs	r2, #1
 8012cd2:	4619      	mov	r1, r3
 8012cd4:	2036      	movs	r0, #54	; 0x36
 8012cd6:	f7fa fbed 	bl	800d4b4 <pbuf_alloc>
 8012cda:	6178      	str	r0, [r7, #20]
 8012cdc:	697b      	ldr	r3, [r7, #20]
 8012cde:	2b00      	cmp	r3, #0
 8012ce0:	f000 814a 	beq.w	8012f78 <tcp_write+0x660>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8012ce4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012ce8:	68ba      	ldr	r2, [r7, #8]
 8012cea:	441a      	add	r2, r3
 8012cec:	697b      	ldr	r3, [r7, #20]
 8012cee:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8012cf0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012cf4:	b29b      	uxth	r3, r3
 8012cf6:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012cfa:	4619      	mov	r1, r3
 8012cfc:	2036      	movs	r0, #54	; 0x36
 8012cfe:	f7fa fbd9 	bl	800d4b4 <pbuf_alloc>
 8012d02:	6338      	str	r0, [r7, #48]	; 0x30
 8012d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d06:	2b00      	cmp	r3, #0
 8012d08:	d103      	bne.n	8012d12 <tcp_write+0x3fa>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8012d0a:	6978      	ldr	r0, [r7, #20]
 8012d0c:	f7fa fee6 	bl	800dadc <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8012d10:	e135      	b.n	8012f7e <tcp_write+0x666>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8012d12:	6979      	ldr	r1, [r7, #20]
 8012d14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012d16:	f7fa ffaf 	bl	800dc78 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8012d1a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012d1c:	f7fa ff6c 	bl	800dbf8 <pbuf_clen>
 8012d20:	4603      	mov	r3, r0
 8012d22:	461a      	mov	r2, r3
 8012d24:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012d28:	4413      	add	r3, r2
 8012d2a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8012d2e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012d32:	2b09      	cmp	r3, #9
 8012d34:	d903      	bls.n	8012d3e <tcp_write+0x426>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8012d36:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012d38:	f7fa fed0 	bl	800dadc <pbuf_free>
      goto memerr;
 8012d3c:	e11f      	b.n	8012f7e <tcp_write+0x666>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8012d3e:	68fb      	ldr	r3, [r7, #12]
 8012d40:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8012d42:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012d46:	441a      	add	r2, r3
 8012d48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012d4c:	9300      	str	r3, [sp, #0]
 8012d4e:	4613      	mov	r3, r2
 8012d50:	2200      	movs	r2, #0
 8012d52:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012d54:	68f8      	ldr	r0, [r7, #12]
 8012d56:	f7ff fc4b 	bl	80125f0 <tcp_create_segment>
 8012d5a:	64f8      	str	r0, [r7, #76]	; 0x4c
 8012d5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012d5e:	2b00      	cmp	r3, #0
 8012d60:	f000 810c 	beq.w	8012f7c <tcp_write+0x664>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8012d64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012d66:	2b00      	cmp	r3, #0
 8012d68:	d102      	bne.n	8012d70 <tcp_write+0x458>
      queue = seg;
 8012d6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012d6c:	647b      	str	r3, [r7, #68]	; 0x44
 8012d6e:	e00c      	b.n	8012d8a <tcp_write+0x472>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8012d70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012d72:	2b00      	cmp	r3, #0
 8012d74:	d106      	bne.n	8012d84 <tcp_write+0x46c>
 8012d76:	4b53      	ldr	r3, [pc, #332]	; (8012ec4 <tcp_write+0x5ac>)
 8012d78:	f240 22ab 	movw	r2, #683	; 0x2ab
 8012d7c:	4955      	ldr	r1, [pc, #340]	; (8012ed4 <tcp_write+0x5bc>)
 8012d7e:	4853      	ldr	r0, [pc, #332]	; (8012ecc <tcp_write+0x5b4>)
 8012d80:	f004 fcc8 	bl	8017714 <iprintf>
      prev_seg->next = seg;
 8012d84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012d86:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012d88:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8012d8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012d8c:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8012d8e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012d92:	8b3b      	ldrh	r3, [r7, #24]
 8012d94:	4413      	add	r3, r2
 8012d96:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8012d9a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012d9e:	88fb      	ldrh	r3, [r7, #6]
 8012da0:	429a      	cmp	r2, r3
 8012da2:	f4ff af3d 	bcc.w	8012c20 <tcp_write+0x308>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8012da6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012da8:	2b00      	cmp	r3, #0
 8012daa:	d02c      	beq.n	8012e06 <tcp_write+0x4ee>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8012dac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012dae:	685b      	ldr	r3, [r3, #4]
 8012db0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012db2:	e01e      	b.n	8012df2 <tcp_write+0x4da>
      p->tot_len += oversize_used;
 8012db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012db6:	891a      	ldrh	r2, [r3, #8]
 8012db8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012dba:	4413      	add	r3, r2
 8012dbc:	b29a      	uxth	r2, r3
 8012dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012dc0:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8012dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012dc4:	681b      	ldr	r3, [r3, #0]
 8012dc6:	2b00      	cmp	r3, #0
 8012dc8:	d110      	bne.n	8012dec <tcp_write+0x4d4>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8012dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012dcc:	685b      	ldr	r3, [r3, #4]
 8012dce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012dd0:	8952      	ldrh	r2, [r2, #10]
 8012dd2:	4413      	add	r3, r2
 8012dd4:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8012dd6:	68b9      	ldr	r1, [r7, #8]
 8012dd8:	4618      	mov	r0, r3
 8012dda:	f004 fbc2 	bl	8017562 <memcpy>
        p->len += oversize_used;
 8012dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012de0:	895a      	ldrh	r2, [r3, #10]
 8012de2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012de4:	4413      	add	r3, r2
 8012de6:	b29a      	uxth	r2, r3
 8012de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012dea:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8012dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012dee:	681b      	ldr	r3, [r3, #0]
 8012df0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012df4:	2b00      	cmp	r3, #0
 8012df6:	d1dd      	bne.n	8012db4 <tcp_write+0x49c>
      }
    }
    last_unsent->len += oversize_used;
 8012df8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012dfa:	891a      	ldrh	r2, [r3, #8]
 8012dfc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012dfe:	4413      	add	r3, r2
 8012e00:	b29a      	uxth	r2, r3
 8012e02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012e04:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8012e06:	8a7a      	ldrh	r2, [r7, #18]
 8012e08:	68fb      	ldr	r3, [r7, #12]
 8012e0a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8012e0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012e10:	2b00      	cmp	r3, #0
 8012e12:	d018      	beq.n	8012e46 <tcp_write+0x52e>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8012e14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012e16:	2b00      	cmp	r3, #0
 8012e18:	d106      	bne.n	8012e28 <tcp_write+0x510>
 8012e1a:	4b2a      	ldr	r3, [pc, #168]	; (8012ec4 <tcp_write+0x5ac>)
 8012e1c:	f240 22e1 	movw	r2, #737	; 0x2e1
 8012e20:	492d      	ldr	r1, [pc, #180]	; (8012ed8 <tcp_write+0x5c0>)
 8012e22:	482a      	ldr	r0, [pc, #168]	; (8012ecc <tcp_write+0x5b4>)
 8012e24:	f004 fc76 	bl	8017714 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8012e28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012e2a:	685b      	ldr	r3, [r3, #4]
 8012e2c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012e2e:	4618      	mov	r0, r3
 8012e30:	f7fa ff22 	bl	800dc78 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8012e34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012e36:	891a      	ldrh	r2, [r3, #8]
 8012e38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012e3a:	891b      	ldrh	r3, [r3, #8]
 8012e3c:	4413      	add	r3, r2
 8012e3e:	b29a      	uxth	r2, r3
 8012e40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012e42:	811a      	strh	r2, [r3, #8]
 8012e44:	e037      	b.n	8012eb6 <tcp_write+0x59e>
  } else if (extendlen > 0) {
 8012e46:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012e48:	2b00      	cmp	r3, #0
 8012e4a:	d034      	beq.n	8012eb6 <tcp_write+0x59e>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8012e4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012e4e:	2b00      	cmp	r3, #0
 8012e50:	d003      	beq.n	8012e5a <tcp_write+0x542>
 8012e52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012e54:	685b      	ldr	r3, [r3, #4]
 8012e56:	2b00      	cmp	r3, #0
 8012e58:	d106      	bne.n	8012e68 <tcp_write+0x550>
 8012e5a:	4b1a      	ldr	r3, [pc, #104]	; (8012ec4 <tcp_write+0x5ac>)
 8012e5c:	f240 22e7 	movw	r2, #743	; 0x2e7
 8012e60:	491e      	ldr	r1, [pc, #120]	; (8012edc <tcp_write+0x5c4>)
 8012e62:	481a      	ldr	r0, [pc, #104]	; (8012ecc <tcp_write+0x5b4>)
 8012e64:	f004 fc56 	bl	8017714 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8012e68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012e6a:	685b      	ldr	r3, [r3, #4]
 8012e6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8012e6e:	e009      	b.n	8012e84 <tcp_write+0x56c>
      p->tot_len += extendlen;
 8012e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e72:	891a      	ldrh	r2, [r3, #8]
 8012e74:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012e76:	4413      	add	r3, r2
 8012e78:	b29a      	uxth	r2, r3
 8012e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e7c:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8012e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e80:	681b      	ldr	r3, [r3, #0]
 8012e82:	62bb      	str	r3, [r7, #40]	; 0x28
 8012e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e86:	681b      	ldr	r3, [r3, #0]
 8012e88:	2b00      	cmp	r3, #0
 8012e8a:	d1f1      	bne.n	8012e70 <tcp_write+0x558>
    }
    p->tot_len += extendlen;
 8012e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e8e:	891a      	ldrh	r2, [r3, #8]
 8012e90:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012e92:	4413      	add	r3, r2
 8012e94:	b29a      	uxth	r2, r3
 8012e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e98:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8012e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e9c:	895a      	ldrh	r2, [r3, #10]
 8012e9e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012ea0:	4413      	add	r3, r2
 8012ea2:	b29a      	uxth	r2, r3
 8012ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ea6:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8012ea8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012eaa:	891a      	ldrh	r2, [r3, #8]
 8012eac:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012eae:	4413      	add	r3, r2
 8012eb0:	b29a      	uxth	r2, r3
 8012eb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012eb4:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8012eb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012eb8:	2b00      	cmp	r3, #0
 8012eba:	d111      	bne.n	8012ee0 <tcp_write+0x5c8>
    pcb->unsent = queue;
 8012ebc:	68fb      	ldr	r3, [r7, #12]
 8012ebe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012ec0:	66da      	str	r2, [r3, #108]	; 0x6c
 8012ec2:	e010      	b.n	8012ee6 <tcp_write+0x5ce>
 8012ec4:	0801aa90 	.word	0x0801aa90
 8012ec8:	0801ad30 	.word	0x0801ad30
 8012ecc:	0801aae4 	.word	0x0801aae4
 8012ed0:	0801ad70 	.word	0x0801ad70
 8012ed4:	0801ad80 	.word	0x0801ad80
 8012ed8:	0801ad94 	.word	0x0801ad94
 8012edc:	0801adcc 	.word	0x0801adcc
  } else {
    last_unsent->next = queue;
 8012ee0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012ee2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012ee4:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8012ee6:	68fb      	ldr	r3, [r7, #12]
 8012ee8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8012eea:	88fb      	ldrh	r3, [r7, #6]
 8012eec:	441a      	add	r2, r3
 8012eee:	68fb      	ldr	r3, [r7, #12]
 8012ef0:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8012ef2:	68fb      	ldr	r3, [r7, #12]
 8012ef4:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8012ef8:	88fb      	ldrh	r3, [r7, #6]
 8012efa:	1ad3      	subs	r3, r2, r3
 8012efc:	b29a      	uxth	r2, r3
 8012efe:	68fb      	ldr	r3, [r7, #12]
 8012f00:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8012f04:	68fb      	ldr	r3, [r7, #12]
 8012f06:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8012f0a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8012f0e:	68fb      	ldr	r3, [r7, #12]
 8012f10:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012f14:	2b00      	cmp	r3, #0
 8012f16:	d00e      	beq.n	8012f36 <tcp_write+0x61e>
    LWIP_ASSERT("tcp_write: valid queue length",
 8012f18:	68fb      	ldr	r3, [r7, #12]
 8012f1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012f1c:	2b00      	cmp	r3, #0
 8012f1e:	d10a      	bne.n	8012f36 <tcp_write+0x61e>
 8012f20:	68fb      	ldr	r3, [r7, #12]
 8012f22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012f24:	2b00      	cmp	r3, #0
 8012f26:	d106      	bne.n	8012f36 <tcp_write+0x61e>
 8012f28:	4b2b      	ldr	r3, [pc, #172]	; (8012fd8 <tcp_write+0x6c0>)
 8012f2a:	f240 3213 	movw	r2, #787	; 0x313
 8012f2e:	492b      	ldr	r1, [pc, #172]	; (8012fdc <tcp_write+0x6c4>)
 8012f30:	482b      	ldr	r0, [pc, #172]	; (8012fe0 <tcp_write+0x6c8>)
 8012f32:	f004 fbef 	bl	8017714 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8012f36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012f38:	2b00      	cmp	r3, #0
 8012f3a:	d015      	beq.n	8012f68 <tcp_write+0x650>
 8012f3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012f3e:	68db      	ldr	r3, [r3, #12]
 8012f40:	2b00      	cmp	r3, #0
 8012f42:	d011      	beq.n	8012f68 <tcp_write+0x650>
 8012f44:	797b      	ldrb	r3, [r7, #5]
 8012f46:	f003 0302 	and.w	r3, r3, #2
 8012f4a:	2b00      	cmp	r3, #0
 8012f4c:	d10c      	bne.n	8012f68 <tcp_write+0x650>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8012f4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012f50:	68dc      	ldr	r4, [r3, #12]
 8012f52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012f54:	68db      	ldr	r3, [r3, #12]
 8012f56:	899b      	ldrh	r3, [r3, #12]
 8012f58:	b29d      	uxth	r5, r3
 8012f5a:	2008      	movs	r0, #8
 8012f5c:	f7f5 fe5e 	bl	8008c1c <lwip_htons>
 8012f60:	4603      	mov	r3, r0
 8012f62:	432b      	orrs	r3, r5
 8012f64:	b29b      	uxth	r3, r3
 8012f66:	81a3      	strh	r3, [r4, #12]
  }

  return ERR_OK;
 8012f68:	2300      	movs	r3, #0
 8012f6a:	e031      	b.n	8012fd0 <tcp_write+0x6b8>
          goto memerr;
 8012f6c:	bf00      	nop
 8012f6e:	e006      	b.n	8012f7e <tcp_write+0x666>
            goto memerr;
 8012f70:	bf00      	nop
 8012f72:	e004      	b.n	8012f7e <tcp_write+0x666>
        goto memerr;
 8012f74:	bf00      	nop
 8012f76:	e002      	b.n	8012f7e <tcp_write+0x666>
        goto memerr;
 8012f78:	bf00      	nop
 8012f7a:	e000      	b.n	8012f7e <tcp_write+0x666>
      goto memerr;
 8012f7c:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012f7e:	68fb      	ldr	r3, [r7, #12]
 8012f80:	8b5b      	ldrh	r3, [r3, #26]
 8012f82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012f86:	b29a      	uxth	r2, r3
 8012f88:	68fb      	ldr	r3, [r7, #12]
 8012f8a:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8012f8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012f8e:	2b00      	cmp	r3, #0
 8012f90:	d002      	beq.n	8012f98 <tcp_write+0x680>
    pbuf_free(concat_p);
 8012f92:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8012f94:	f7fa fda2 	bl	800dadc <pbuf_free>
  }
  if (queue != NULL) {
 8012f98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012f9a:	2b00      	cmp	r3, #0
 8012f9c:	d002      	beq.n	8012fa4 <tcp_write+0x68c>
    tcp_segs_free(queue);
 8012f9e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8012fa0:	f7fc fb8c 	bl	800f6bc <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8012fa4:	68fb      	ldr	r3, [r7, #12]
 8012fa6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012faa:	2b00      	cmp	r3, #0
 8012fac:	d00e      	beq.n	8012fcc <tcp_write+0x6b4>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8012fae:	68fb      	ldr	r3, [r7, #12]
 8012fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012fb2:	2b00      	cmp	r3, #0
 8012fb4:	d10a      	bne.n	8012fcc <tcp_write+0x6b4>
 8012fb6:	68fb      	ldr	r3, [r7, #12]
 8012fb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012fba:	2b00      	cmp	r3, #0
 8012fbc:	d106      	bne.n	8012fcc <tcp_write+0x6b4>
 8012fbe:	4b06      	ldr	r3, [pc, #24]	; (8012fd8 <tcp_write+0x6c0>)
 8012fc0:	f44f 724a 	mov.w	r2, #808	; 0x328
 8012fc4:	4905      	ldr	r1, [pc, #20]	; (8012fdc <tcp_write+0x6c4>)
 8012fc6:	4806      	ldr	r0, [pc, #24]	; (8012fe0 <tcp_write+0x6c8>)
 8012fc8:	f004 fba4 	bl	8017714 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8012fcc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012fd0:	4618      	mov	r0, r3
 8012fd2:	3758      	adds	r7, #88	; 0x58
 8012fd4:	46bd      	mov	sp, r7
 8012fd6:	bdb0      	pop	{r4, r5, r7, pc}
 8012fd8:	0801aa90 	.word	0x0801aa90
 8012fdc:	0801ae04 	.word	0x0801ae04
 8012fe0:	0801aae4 	.word	0x0801aae4

08012fe4 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8012fe4:	b5b0      	push	{r4, r5, r7, lr}
 8012fe6:	b08a      	sub	sp, #40	; 0x28
 8012fe8:	af02      	add	r7, sp, #8
 8012fea:	6078      	str	r0, [r7, #4]
 8012fec:	460b      	mov	r3, r1
 8012fee:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8012ff0:	2300      	movs	r3, #0
 8012ff2:	61fb      	str	r3, [r7, #28]
 8012ff4:	2300      	movs	r3, #0
 8012ff6:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8012ff8:	2300      	movs	r3, #0
 8012ffa:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8012ffc:	687b      	ldr	r3, [r7, #4]
 8012ffe:	2b00      	cmp	r3, #0
 8013000:	d106      	bne.n	8013010 <tcp_split_unsent_seg+0x2c>
 8013002:	4b96      	ldr	r3, [pc, #600]	; (801325c <tcp_split_unsent_seg+0x278>)
 8013004:	f240 324b 	movw	r2, #843	; 0x34b
 8013008:	4995      	ldr	r1, [pc, #596]	; (8013260 <tcp_split_unsent_seg+0x27c>)
 801300a:	4896      	ldr	r0, [pc, #600]	; (8013264 <tcp_split_unsent_seg+0x280>)
 801300c:	f004 fb82 	bl	8017714 <iprintf>

  useg = pcb->unsent;
 8013010:	687b      	ldr	r3, [r7, #4]
 8013012:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013014:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8013016:	697b      	ldr	r3, [r7, #20]
 8013018:	2b00      	cmp	r3, #0
 801301a:	d102      	bne.n	8013022 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 801301c:	f04f 33ff 	mov.w	r3, #4294967295
 8013020:	e118      	b.n	8013254 <tcp_split_unsent_seg+0x270>
  }

  if (split == 0) {
 8013022:	887b      	ldrh	r3, [r7, #2]
 8013024:	2b00      	cmp	r3, #0
 8013026:	d109      	bne.n	801303c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8013028:	4b8c      	ldr	r3, [pc, #560]	; (801325c <tcp_split_unsent_seg+0x278>)
 801302a:	f240 3253 	movw	r2, #851	; 0x353
 801302e:	498e      	ldr	r1, [pc, #568]	; (8013268 <tcp_split_unsent_seg+0x284>)
 8013030:	488c      	ldr	r0, [pc, #560]	; (8013264 <tcp_split_unsent_seg+0x280>)
 8013032:	f004 fb6f 	bl	8017714 <iprintf>
    return ERR_VAL;
 8013036:	f06f 0305 	mvn.w	r3, #5
 801303a:	e10b      	b.n	8013254 <tcp_split_unsent_seg+0x270>
  }

  if (useg->len <= split) {
 801303c:	697b      	ldr	r3, [r7, #20]
 801303e:	891b      	ldrh	r3, [r3, #8]
 8013040:	887a      	ldrh	r2, [r7, #2]
 8013042:	429a      	cmp	r2, r3
 8013044:	d301      	bcc.n	801304a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8013046:	2300      	movs	r3, #0
 8013048:	e104      	b.n	8013254 <tcp_split_unsent_seg+0x270>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801304a:	687b      	ldr	r3, [r7, #4]
 801304c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801304e:	887a      	ldrh	r2, [r7, #2]
 8013050:	429a      	cmp	r2, r3
 8013052:	d906      	bls.n	8013062 <tcp_split_unsent_seg+0x7e>
 8013054:	4b81      	ldr	r3, [pc, #516]	; (801325c <tcp_split_unsent_seg+0x278>)
 8013056:	f240 325b 	movw	r2, #859	; 0x35b
 801305a:	4984      	ldr	r1, [pc, #528]	; (801326c <tcp_split_unsent_seg+0x288>)
 801305c:	4881      	ldr	r0, [pc, #516]	; (8013264 <tcp_split_unsent_seg+0x280>)
 801305e:	f004 fb59 	bl	8017714 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8013062:	697b      	ldr	r3, [r7, #20]
 8013064:	891b      	ldrh	r3, [r3, #8]
 8013066:	2b00      	cmp	r3, #0
 8013068:	d106      	bne.n	8013078 <tcp_split_unsent_seg+0x94>
 801306a:	4b7c      	ldr	r3, [pc, #496]	; (801325c <tcp_split_unsent_seg+0x278>)
 801306c:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8013070:	497f      	ldr	r1, [pc, #508]	; (8013270 <tcp_split_unsent_seg+0x28c>)
 8013072:	487c      	ldr	r0, [pc, #496]	; (8013264 <tcp_split_unsent_seg+0x280>)
 8013074:	f004 fb4e 	bl	8017714 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8013078:	697b      	ldr	r3, [r7, #20]
 801307a:	7a9b      	ldrb	r3, [r3, #10]
 801307c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801307e:	7bfb      	ldrb	r3, [r7, #15]
 8013080:	f003 0301 	and.w	r3, r3, #1
 8013084:	2b00      	cmp	r3, #0
 8013086:	d001      	beq.n	801308c <tcp_split_unsent_seg+0xa8>
 8013088:	2304      	movs	r3, #4
 801308a:	e000      	b.n	801308e <tcp_split_unsent_seg+0xaa>
 801308c:	2300      	movs	r3, #0
 801308e:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8013090:	697b      	ldr	r3, [r7, #20]
 8013092:	891a      	ldrh	r2, [r3, #8]
 8013094:	887b      	ldrh	r3, [r7, #2]
 8013096:	1ad3      	subs	r3, r2, r3
 8013098:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801309a:	7bbb      	ldrb	r3, [r7, #14]
 801309c:	b29a      	uxth	r2, r3
 801309e:	89bb      	ldrh	r3, [r7, #12]
 80130a0:	4413      	add	r3, r2
 80130a2:	b29b      	uxth	r3, r3
 80130a4:	f44f 7220 	mov.w	r2, #640	; 0x280
 80130a8:	4619      	mov	r1, r3
 80130aa:	2036      	movs	r0, #54	; 0x36
 80130ac:	f7fa fa02 	bl	800d4b4 <pbuf_alloc>
 80130b0:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80130b2:	693b      	ldr	r3, [r7, #16]
 80130b4:	2b00      	cmp	r3, #0
 80130b6:	f000 80b6 	beq.w	8013226 <tcp_split_unsent_seg+0x242>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80130ba:	697b      	ldr	r3, [r7, #20]
 80130bc:	685b      	ldr	r3, [r3, #4]
 80130be:	891a      	ldrh	r2, [r3, #8]
 80130c0:	697b      	ldr	r3, [r7, #20]
 80130c2:	891b      	ldrh	r3, [r3, #8]
 80130c4:	1ad3      	subs	r3, r2, r3
 80130c6:	b29a      	uxth	r2, r3
 80130c8:	887b      	ldrh	r3, [r7, #2]
 80130ca:	4413      	add	r3, r2
 80130cc:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80130ce:	697b      	ldr	r3, [r7, #20]
 80130d0:	6858      	ldr	r0, [r3, #4]
 80130d2:	693b      	ldr	r3, [r7, #16]
 80130d4:	685a      	ldr	r2, [r3, #4]
 80130d6:	7bbb      	ldrb	r3, [r7, #14]
 80130d8:	18d1      	adds	r1, r2, r3
 80130da:	897b      	ldrh	r3, [r7, #10]
 80130dc:	89ba      	ldrh	r2, [r7, #12]
 80130de:	f7fa ff03 	bl	800dee8 <pbuf_copy_partial>
 80130e2:	4603      	mov	r3, r0
 80130e4:	461a      	mov	r2, r3
 80130e6:	89bb      	ldrh	r3, [r7, #12]
 80130e8:	4293      	cmp	r3, r2
 80130ea:	f040 809e 	bne.w	801322a <tcp_split_unsent_seg+0x246>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80130ee:	697b      	ldr	r3, [r7, #20]
 80130f0:	68db      	ldr	r3, [r3, #12]
 80130f2:	899b      	ldrh	r3, [r3, #12]
 80130f4:	b29b      	uxth	r3, r3
 80130f6:	4618      	mov	r0, r3
 80130f8:	f7f5 fd90 	bl	8008c1c <lwip_htons>
 80130fc:	4603      	mov	r3, r0
 80130fe:	b2db      	uxtb	r3, r3
 8013100:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013104:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8013106:	2300      	movs	r3, #0
 8013108:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 801310a:	7efb      	ldrb	r3, [r7, #27]
 801310c:	f003 0308 	and.w	r3, r3, #8
 8013110:	2b00      	cmp	r3, #0
 8013112:	d007      	beq.n	8013124 <tcp_split_unsent_seg+0x140>
    split_flags &= ~TCP_PSH;
 8013114:	7efb      	ldrb	r3, [r7, #27]
 8013116:	f023 0308 	bic.w	r3, r3, #8
 801311a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801311c:	7ebb      	ldrb	r3, [r7, #26]
 801311e:	f043 0308 	orr.w	r3, r3, #8
 8013122:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8013124:	7efb      	ldrb	r3, [r7, #27]
 8013126:	f003 0301 	and.w	r3, r3, #1
 801312a:	2b00      	cmp	r3, #0
 801312c:	d007      	beq.n	801313e <tcp_split_unsent_seg+0x15a>
    split_flags &= ~TCP_FIN;
 801312e:	7efb      	ldrb	r3, [r7, #27]
 8013130:	f023 0301 	bic.w	r3, r3, #1
 8013134:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8013136:	7ebb      	ldrb	r3, [r7, #26]
 8013138:	f043 0301 	orr.w	r3, r3, #1
 801313c:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801313e:	697b      	ldr	r3, [r7, #20]
 8013140:	68db      	ldr	r3, [r3, #12]
 8013142:	685b      	ldr	r3, [r3, #4]
 8013144:	4618      	mov	r0, r3
 8013146:	f7f5 fd7e 	bl	8008c46 <lwip_htonl>
 801314a:	4602      	mov	r2, r0
 801314c:	887b      	ldrh	r3, [r7, #2]
 801314e:	18d1      	adds	r1, r2, r3
 8013150:	7eba      	ldrb	r2, [r7, #26]
 8013152:	7bfb      	ldrb	r3, [r7, #15]
 8013154:	9300      	str	r3, [sp, #0]
 8013156:	460b      	mov	r3, r1
 8013158:	6939      	ldr	r1, [r7, #16]
 801315a:	6878      	ldr	r0, [r7, #4]
 801315c:	f7ff fa48 	bl	80125f0 <tcp_create_segment>
 8013160:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8013162:	69fb      	ldr	r3, [r7, #28]
 8013164:	2b00      	cmp	r3, #0
 8013166:	d062      	beq.n	801322e <tcp_split_unsent_seg+0x24a>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8013168:	697b      	ldr	r3, [r7, #20]
 801316a:	685b      	ldr	r3, [r3, #4]
 801316c:	4618      	mov	r0, r3
 801316e:	f7fa fd43 	bl	800dbf8 <pbuf_clen>
 8013172:	4603      	mov	r3, r0
 8013174:	461a      	mov	r2, r3
 8013176:	687b      	ldr	r3, [r7, #4]
 8013178:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801317c:	1a9b      	subs	r3, r3, r2
 801317e:	b29a      	uxth	r2, r3
 8013180:	687b      	ldr	r3, [r7, #4]
 8013182:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8013186:	697b      	ldr	r3, [r7, #20]
 8013188:	6858      	ldr	r0, [r3, #4]
 801318a:	697b      	ldr	r3, [r7, #20]
 801318c:	685b      	ldr	r3, [r3, #4]
 801318e:	891a      	ldrh	r2, [r3, #8]
 8013190:	89bb      	ldrh	r3, [r7, #12]
 8013192:	1ad3      	subs	r3, r2, r3
 8013194:	b29b      	uxth	r3, r3
 8013196:	4619      	mov	r1, r3
 8013198:	f7fa fae6 	bl	800d768 <pbuf_realloc>
  useg->len -= remainder;
 801319c:	697b      	ldr	r3, [r7, #20]
 801319e:	891a      	ldrh	r2, [r3, #8]
 80131a0:	89bb      	ldrh	r3, [r7, #12]
 80131a2:	1ad3      	subs	r3, r2, r3
 80131a4:	b29a      	uxth	r2, r3
 80131a6:	697b      	ldr	r3, [r7, #20]
 80131a8:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80131aa:	697b      	ldr	r3, [r7, #20]
 80131ac:	68dc      	ldr	r4, [r3, #12]
 80131ae:	697b      	ldr	r3, [r7, #20]
 80131b0:	68db      	ldr	r3, [r3, #12]
 80131b2:	899b      	ldrh	r3, [r3, #12]
 80131b4:	b29d      	uxth	r5, r3
 80131b6:	7efb      	ldrb	r3, [r7, #27]
 80131b8:	b29b      	uxth	r3, r3
 80131ba:	4618      	mov	r0, r3
 80131bc:	f7f5 fd2e 	bl	8008c1c <lwip_htons>
 80131c0:	4603      	mov	r3, r0
 80131c2:	432b      	orrs	r3, r5
 80131c4:	b29b      	uxth	r3, r3
 80131c6:	81a3      	strh	r3, [r4, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80131c8:	697b      	ldr	r3, [r7, #20]
 80131ca:	685b      	ldr	r3, [r3, #4]
 80131cc:	4618      	mov	r0, r3
 80131ce:	f7fa fd13 	bl	800dbf8 <pbuf_clen>
 80131d2:	4603      	mov	r3, r0
 80131d4:	461a      	mov	r2, r3
 80131d6:	687b      	ldr	r3, [r7, #4]
 80131d8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80131dc:	4413      	add	r3, r2
 80131de:	b29a      	uxth	r2, r3
 80131e0:	687b      	ldr	r3, [r7, #4]
 80131e2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80131e6:	69fb      	ldr	r3, [r7, #28]
 80131e8:	685b      	ldr	r3, [r3, #4]
 80131ea:	4618      	mov	r0, r3
 80131ec:	f7fa fd04 	bl	800dbf8 <pbuf_clen>
 80131f0:	4603      	mov	r3, r0
 80131f2:	461a      	mov	r2, r3
 80131f4:	687b      	ldr	r3, [r7, #4]
 80131f6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80131fa:	4413      	add	r3, r2
 80131fc:	b29a      	uxth	r2, r3
 80131fe:	687b      	ldr	r3, [r7, #4]
 8013200:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8013204:	697b      	ldr	r3, [r7, #20]
 8013206:	681a      	ldr	r2, [r3, #0]
 8013208:	69fb      	ldr	r3, [r7, #28]
 801320a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 801320c:	697b      	ldr	r3, [r7, #20]
 801320e:	69fa      	ldr	r2, [r7, #28]
 8013210:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8013212:	69fb      	ldr	r3, [r7, #28]
 8013214:	681b      	ldr	r3, [r3, #0]
 8013216:	2b00      	cmp	r3, #0
 8013218:	d103      	bne.n	8013222 <tcp_split_unsent_seg+0x23e>
    pcb->unsent_oversize = 0;
 801321a:	687b      	ldr	r3, [r7, #4]
 801321c:	2200      	movs	r2, #0
 801321e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8013222:	2300      	movs	r3, #0
 8013224:	e016      	b.n	8013254 <tcp_split_unsent_seg+0x270>
    goto memerr;
 8013226:	bf00      	nop
 8013228:	e002      	b.n	8013230 <tcp_split_unsent_seg+0x24c>
    goto memerr;
 801322a:	bf00      	nop
 801322c:	e000      	b.n	8013230 <tcp_split_unsent_seg+0x24c>
    goto memerr;
 801322e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8013230:	69fb      	ldr	r3, [r7, #28]
 8013232:	2b00      	cmp	r3, #0
 8013234:	d006      	beq.n	8013244 <tcp_split_unsent_seg+0x260>
 8013236:	4b09      	ldr	r3, [pc, #36]	; (801325c <tcp_split_unsent_seg+0x278>)
 8013238:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 801323c:	490d      	ldr	r1, [pc, #52]	; (8013274 <tcp_split_unsent_seg+0x290>)
 801323e:	4809      	ldr	r0, [pc, #36]	; (8013264 <tcp_split_unsent_seg+0x280>)
 8013240:	f004 fa68 	bl	8017714 <iprintf>
  if (p != NULL) {
 8013244:	693b      	ldr	r3, [r7, #16]
 8013246:	2b00      	cmp	r3, #0
 8013248:	d002      	beq.n	8013250 <tcp_split_unsent_seg+0x26c>
    pbuf_free(p);
 801324a:	6938      	ldr	r0, [r7, #16]
 801324c:	f7fa fc46 	bl	800dadc <pbuf_free>
  }

  return ERR_MEM;
 8013250:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013254:	4618      	mov	r0, r3
 8013256:	3720      	adds	r7, #32
 8013258:	46bd      	mov	sp, r7
 801325a:	bdb0      	pop	{r4, r5, r7, pc}
 801325c:	0801aa90 	.word	0x0801aa90
 8013260:	0801ae24 	.word	0x0801ae24
 8013264:	0801aae4 	.word	0x0801aae4
 8013268:	0801ae48 	.word	0x0801ae48
 801326c:	0801ae6c 	.word	0x0801ae6c
 8013270:	0801ae7c 	.word	0x0801ae7c
 8013274:	0801ae8c 	.word	0x0801ae8c

08013278 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8013278:	b5b0      	push	{r4, r5, r7, lr}
 801327a:	b084      	sub	sp, #16
 801327c:	af00      	add	r7, sp, #0
 801327e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8013280:	687b      	ldr	r3, [r7, #4]
 8013282:	2b00      	cmp	r3, #0
 8013284:	d106      	bne.n	8013294 <tcp_send_fin+0x1c>
 8013286:	4b21      	ldr	r3, [pc, #132]	; (801330c <tcp_send_fin+0x94>)
 8013288:	f240 32eb 	movw	r2, #1003	; 0x3eb
 801328c:	4920      	ldr	r1, [pc, #128]	; (8013310 <tcp_send_fin+0x98>)
 801328e:	4821      	ldr	r0, [pc, #132]	; (8013314 <tcp_send_fin+0x9c>)
 8013290:	f004 fa40 	bl	8017714 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8013294:	687b      	ldr	r3, [r7, #4]
 8013296:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013298:	2b00      	cmp	r3, #0
 801329a:	d02d      	beq.n	80132f8 <tcp_send_fin+0x80>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801329c:	687b      	ldr	r3, [r7, #4]
 801329e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80132a0:	60fb      	str	r3, [r7, #12]
 80132a2:	e002      	b.n	80132aa <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80132a4:	68fb      	ldr	r3, [r7, #12]
 80132a6:	681b      	ldr	r3, [r3, #0]
 80132a8:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80132aa:	68fb      	ldr	r3, [r7, #12]
 80132ac:	681b      	ldr	r3, [r3, #0]
 80132ae:	2b00      	cmp	r3, #0
 80132b0:	d1f8      	bne.n	80132a4 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80132b2:	68fb      	ldr	r3, [r7, #12]
 80132b4:	68db      	ldr	r3, [r3, #12]
 80132b6:	899b      	ldrh	r3, [r3, #12]
 80132b8:	b29b      	uxth	r3, r3
 80132ba:	4618      	mov	r0, r3
 80132bc:	f7f5 fcae 	bl	8008c1c <lwip_htons>
 80132c0:	4603      	mov	r3, r0
 80132c2:	b2db      	uxtb	r3, r3
 80132c4:	f003 0307 	and.w	r3, r3, #7
 80132c8:	2b00      	cmp	r3, #0
 80132ca:	d115      	bne.n	80132f8 <tcp_send_fin+0x80>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80132cc:	68fb      	ldr	r3, [r7, #12]
 80132ce:	68dc      	ldr	r4, [r3, #12]
 80132d0:	68fb      	ldr	r3, [r7, #12]
 80132d2:	68db      	ldr	r3, [r3, #12]
 80132d4:	899b      	ldrh	r3, [r3, #12]
 80132d6:	b29d      	uxth	r5, r3
 80132d8:	2001      	movs	r0, #1
 80132da:	f7f5 fc9f 	bl	8008c1c <lwip_htons>
 80132de:	4603      	mov	r3, r0
 80132e0:	432b      	orrs	r3, r5
 80132e2:	b29b      	uxth	r3, r3
 80132e4:	81a3      	strh	r3, [r4, #12]
      tcp_set_flags(pcb, TF_FIN);
 80132e6:	687b      	ldr	r3, [r7, #4]
 80132e8:	8b5b      	ldrh	r3, [r3, #26]
 80132ea:	f043 0320 	orr.w	r3, r3, #32
 80132ee:	b29a      	uxth	r2, r3
 80132f0:	687b      	ldr	r3, [r7, #4]
 80132f2:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 80132f4:	2300      	movs	r3, #0
 80132f6:	e004      	b.n	8013302 <tcp_send_fin+0x8a>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80132f8:	2101      	movs	r1, #1
 80132fa:	6878      	ldr	r0, [r7, #4]
 80132fc:	f000 f80c 	bl	8013318 <tcp_enqueue_flags>
 8013300:	4603      	mov	r3, r0
}
 8013302:	4618      	mov	r0, r3
 8013304:	3710      	adds	r7, #16
 8013306:	46bd      	mov	sp, r7
 8013308:	bdb0      	pop	{r4, r5, r7, pc}
 801330a:	bf00      	nop
 801330c:	0801aa90 	.word	0x0801aa90
 8013310:	0801ae98 	.word	0x0801ae98
 8013314:	0801aae4 	.word	0x0801aae4

08013318 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8013318:	b580      	push	{r7, lr}
 801331a:	b08a      	sub	sp, #40	; 0x28
 801331c:	af02      	add	r7, sp, #8
 801331e:	6078      	str	r0, [r7, #4]
 8013320:	460b      	mov	r3, r1
 8013322:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8013324:	2300      	movs	r3, #0
 8013326:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8013328:	2300      	movs	r3, #0
 801332a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801332c:	78fb      	ldrb	r3, [r7, #3]
 801332e:	f003 0303 	and.w	r3, r3, #3
 8013332:	2b00      	cmp	r3, #0
 8013334:	d106      	bne.n	8013344 <tcp_enqueue_flags+0x2c>
 8013336:	4b68      	ldr	r3, [pc, #416]	; (80134d8 <tcp_enqueue_flags+0x1c0>)
 8013338:	f240 4212 	movw	r2, #1042	; 0x412
 801333c:	4967      	ldr	r1, [pc, #412]	; (80134dc <tcp_enqueue_flags+0x1c4>)
 801333e:	4868      	ldr	r0, [pc, #416]	; (80134e0 <tcp_enqueue_flags+0x1c8>)
 8013340:	f004 f9e8 	bl	8017714 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8013344:	687b      	ldr	r3, [r7, #4]
 8013346:	2b00      	cmp	r3, #0
 8013348:	d106      	bne.n	8013358 <tcp_enqueue_flags+0x40>
 801334a:	4b63      	ldr	r3, [pc, #396]	; (80134d8 <tcp_enqueue_flags+0x1c0>)
 801334c:	f240 4213 	movw	r2, #1043	; 0x413
 8013350:	4964      	ldr	r1, [pc, #400]	; (80134e4 <tcp_enqueue_flags+0x1cc>)
 8013352:	4863      	ldr	r0, [pc, #396]	; (80134e0 <tcp_enqueue_flags+0x1c8>)
 8013354:	f004 f9de 	bl	8017714 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8013358:	78fb      	ldrb	r3, [r7, #3]
 801335a:	f003 0302 	and.w	r3, r3, #2
 801335e:	2b00      	cmp	r3, #0
 8013360:	d001      	beq.n	8013366 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8013362:	2301      	movs	r3, #1
 8013364:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013366:	7ffb      	ldrb	r3, [r7, #31]
 8013368:	f003 0301 	and.w	r3, r3, #1
 801336c:	2b00      	cmp	r3, #0
 801336e:	d001      	beq.n	8013374 <tcp_enqueue_flags+0x5c>
 8013370:	2304      	movs	r3, #4
 8013372:	e000      	b.n	8013376 <tcp_enqueue_flags+0x5e>
 8013374:	2300      	movs	r3, #0
 8013376:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8013378:	7dfb      	ldrb	r3, [r7, #23]
 801337a:	b29b      	uxth	r3, r3
 801337c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013380:	4619      	mov	r1, r3
 8013382:	2036      	movs	r0, #54	; 0x36
 8013384:	f7fa f896 	bl	800d4b4 <pbuf_alloc>
 8013388:	6138      	str	r0, [r7, #16]
 801338a:	693b      	ldr	r3, [r7, #16]
 801338c:	2b00      	cmp	r3, #0
 801338e:	d109      	bne.n	80133a4 <tcp_enqueue_flags+0x8c>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013390:	687b      	ldr	r3, [r7, #4]
 8013392:	8b5b      	ldrh	r3, [r3, #26]
 8013394:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013398:	b29a      	uxth	r2, r3
 801339a:	687b      	ldr	r3, [r7, #4]
 801339c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801339e:	f04f 33ff 	mov.w	r3, #4294967295
 80133a2:	e095      	b.n	80134d0 <tcp_enqueue_flags+0x1b8>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80133a4:	693b      	ldr	r3, [r7, #16]
 80133a6:	895a      	ldrh	r2, [r3, #10]
 80133a8:	7dfb      	ldrb	r3, [r7, #23]
 80133aa:	b29b      	uxth	r3, r3
 80133ac:	429a      	cmp	r2, r3
 80133ae:	d206      	bcs.n	80133be <tcp_enqueue_flags+0xa6>
 80133b0:	4b49      	ldr	r3, [pc, #292]	; (80134d8 <tcp_enqueue_flags+0x1c0>)
 80133b2:	f240 423a 	movw	r2, #1082	; 0x43a
 80133b6:	494c      	ldr	r1, [pc, #304]	; (80134e8 <tcp_enqueue_flags+0x1d0>)
 80133b8:	4849      	ldr	r0, [pc, #292]	; (80134e0 <tcp_enqueue_flags+0x1c8>)
 80133ba:	f004 f9ab 	bl	8017714 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80133be:	687b      	ldr	r3, [r7, #4]
 80133c0:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80133c2:	78fa      	ldrb	r2, [r7, #3]
 80133c4:	7ffb      	ldrb	r3, [r7, #31]
 80133c6:	9300      	str	r3, [sp, #0]
 80133c8:	460b      	mov	r3, r1
 80133ca:	6939      	ldr	r1, [r7, #16]
 80133cc:	6878      	ldr	r0, [r7, #4]
 80133ce:	f7ff f90f 	bl	80125f0 <tcp_create_segment>
 80133d2:	60f8      	str	r0, [r7, #12]
 80133d4:	68fb      	ldr	r3, [r7, #12]
 80133d6:	2b00      	cmp	r3, #0
 80133d8:	d109      	bne.n	80133ee <tcp_enqueue_flags+0xd6>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80133da:	687b      	ldr	r3, [r7, #4]
 80133dc:	8b5b      	ldrh	r3, [r3, #26]
 80133de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80133e2:	b29a      	uxth	r2, r3
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80133e8:	f04f 33ff 	mov.w	r3, #4294967295
 80133ec:	e070      	b.n	80134d0 <tcp_enqueue_flags+0x1b8>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80133ee:	68fb      	ldr	r3, [r7, #12]
 80133f0:	68db      	ldr	r3, [r3, #12]
 80133f2:	f003 0303 	and.w	r3, r3, #3
 80133f6:	2b00      	cmp	r3, #0
 80133f8:	d006      	beq.n	8013408 <tcp_enqueue_flags+0xf0>
 80133fa:	4b37      	ldr	r3, [pc, #220]	; (80134d8 <tcp_enqueue_flags+0x1c0>)
 80133fc:	f240 4242 	movw	r2, #1090	; 0x442
 8013400:	493a      	ldr	r1, [pc, #232]	; (80134ec <tcp_enqueue_flags+0x1d4>)
 8013402:	4837      	ldr	r0, [pc, #220]	; (80134e0 <tcp_enqueue_flags+0x1c8>)
 8013404:	f004 f986 	bl	8017714 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8013408:	68fb      	ldr	r3, [r7, #12]
 801340a:	891b      	ldrh	r3, [r3, #8]
 801340c:	2b00      	cmp	r3, #0
 801340e:	d006      	beq.n	801341e <tcp_enqueue_flags+0x106>
 8013410:	4b31      	ldr	r3, [pc, #196]	; (80134d8 <tcp_enqueue_flags+0x1c0>)
 8013412:	f240 4243 	movw	r2, #1091	; 0x443
 8013416:	4936      	ldr	r1, [pc, #216]	; (80134f0 <tcp_enqueue_flags+0x1d8>)
 8013418:	4831      	ldr	r0, [pc, #196]	; (80134e0 <tcp_enqueue_flags+0x1c8>)
 801341a:	f004 f97b 	bl	8017714 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801341e:	687b      	ldr	r3, [r7, #4]
 8013420:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013422:	2b00      	cmp	r3, #0
 8013424:	d103      	bne.n	801342e <tcp_enqueue_flags+0x116>
    pcb->unsent = seg;
 8013426:	687b      	ldr	r3, [r7, #4]
 8013428:	68fa      	ldr	r2, [r7, #12]
 801342a:	66da      	str	r2, [r3, #108]	; 0x6c
 801342c:	e00d      	b.n	801344a <tcp_enqueue_flags+0x132>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801342e:	687b      	ldr	r3, [r7, #4]
 8013430:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013432:	61bb      	str	r3, [r7, #24]
 8013434:	e002      	b.n	801343c <tcp_enqueue_flags+0x124>
 8013436:	69bb      	ldr	r3, [r7, #24]
 8013438:	681b      	ldr	r3, [r3, #0]
 801343a:	61bb      	str	r3, [r7, #24]
 801343c:	69bb      	ldr	r3, [r7, #24]
 801343e:	681b      	ldr	r3, [r3, #0]
 8013440:	2b00      	cmp	r3, #0
 8013442:	d1f8      	bne.n	8013436 <tcp_enqueue_flags+0x11e>
    useg->next = seg;
 8013444:	69bb      	ldr	r3, [r7, #24]
 8013446:	68fa      	ldr	r2, [r7, #12]
 8013448:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801344a:	687b      	ldr	r3, [r7, #4]
 801344c:	2200      	movs	r2, #0
 801344e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8013452:	78fb      	ldrb	r3, [r7, #3]
 8013454:	f003 0302 	and.w	r3, r3, #2
 8013458:	2b00      	cmp	r3, #0
 801345a:	d104      	bne.n	8013466 <tcp_enqueue_flags+0x14e>
 801345c:	78fb      	ldrb	r3, [r7, #3]
 801345e:	f003 0301 	and.w	r3, r3, #1
 8013462:	2b00      	cmp	r3, #0
 8013464:	d004      	beq.n	8013470 <tcp_enqueue_flags+0x158>
    pcb->snd_lbb++;
 8013466:	687b      	ldr	r3, [r7, #4]
 8013468:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801346a:	1c5a      	adds	r2, r3, #1
 801346c:	687b      	ldr	r3, [r7, #4]
 801346e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8013470:	78fb      	ldrb	r3, [r7, #3]
 8013472:	f003 0301 	and.w	r3, r3, #1
 8013476:	2b00      	cmp	r3, #0
 8013478:	d006      	beq.n	8013488 <tcp_enqueue_flags+0x170>
    tcp_set_flags(pcb, TF_FIN);
 801347a:	687b      	ldr	r3, [r7, #4]
 801347c:	8b5b      	ldrh	r3, [r3, #26]
 801347e:	f043 0320 	orr.w	r3, r3, #32
 8013482:	b29a      	uxth	r2, r3
 8013484:	687b      	ldr	r3, [r7, #4]
 8013486:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8013488:	68fb      	ldr	r3, [r7, #12]
 801348a:	685b      	ldr	r3, [r3, #4]
 801348c:	4618      	mov	r0, r3
 801348e:	f7fa fbb3 	bl	800dbf8 <pbuf_clen>
 8013492:	4603      	mov	r3, r0
 8013494:	461a      	mov	r2, r3
 8013496:	687b      	ldr	r3, [r7, #4]
 8013498:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801349c:	4413      	add	r3, r2
 801349e:	b29a      	uxth	r2, r3
 80134a0:	687b      	ldr	r3, [r7, #4]
 80134a2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80134a6:	687b      	ldr	r3, [r7, #4]
 80134a8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80134ac:	2b00      	cmp	r3, #0
 80134ae:	d00e      	beq.n	80134ce <tcp_enqueue_flags+0x1b6>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80134b0:	687b      	ldr	r3, [r7, #4]
 80134b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80134b4:	2b00      	cmp	r3, #0
 80134b6:	d10a      	bne.n	80134ce <tcp_enqueue_flags+0x1b6>
 80134b8:	687b      	ldr	r3, [r7, #4]
 80134ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80134bc:	2b00      	cmp	r3, #0
 80134be:	d106      	bne.n	80134ce <tcp_enqueue_flags+0x1b6>
 80134c0:	4b05      	ldr	r3, [pc, #20]	; (80134d8 <tcp_enqueue_flags+0x1c0>)
 80134c2:	f240 4266 	movw	r2, #1126	; 0x466
 80134c6:	490b      	ldr	r1, [pc, #44]	; (80134f4 <tcp_enqueue_flags+0x1dc>)
 80134c8:	4805      	ldr	r0, [pc, #20]	; (80134e0 <tcp_enqueue_flags+0x1c8>)
 80134ca:	f004 f923 	bl	8017714 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80134ce:	2300      	movs	r3, #0
}
 80134d0:	4618      	mov	r0, r3
 80134d2:	3720      	adds	r7, #32
 80134d4:	46bd      	mov	sp, r7
 80134d6:	bd80      	pop	{r7, pc}
 80134d8:	0801aa90 	.word	0x0801aa90
 80134dc:	0801aeb4 	.word	0x0801aeb4
 80134e0:	0801aae4 	.word	0x0801aae4
 80134e4:	0801af0c 	.word	0x0801af0c
 80134e8:	0801af2c 	.word	0x0801af2c
 80134ec:	0801af68 	.word	0x0801af68
 80134f0:	0801af80 	.word	0x0801af80
 80134f4:	0801afac 	.word	0x0801afac

080134f8 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80134f8:	b5b0      	push	{r4, r5, r7, lr}
 80134fa:	b08a      	sub	sp, #40	; 0x28
 80134fc:	af00      	add	r7, sp, #0
 80134fe:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8013500:	687b      	ldr	r3, [r7, #4]
 8013502:	2b00      	cmp	r3, #0
 8013504:	d106      	bne.n	8013514 <tcp_output+0x1c>
 8013506:	4ba0      	ldr	r3, [pc, #640]	; (8013788 <tcp_output+0x290>)
 8013508:	f240 42e1 	movw	r2, #1249	; 0x4e1
 801350c:	499f      	ldr	r1, [pc, #636]	; (801378c <tcp_output+0x294>)
 801350e:	48a0      	ldr	r0, [pc, #640]	; (8013790 <tcp_output+0x298>)
 8013510:	f004 f900 	bl	8017714 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8013514:	687b      	ldr	r3, [r7, #4]
 8013516:	7d1b      	ldrb	r3, [r3, #20]
 8013518:	2b01      	cmp	r3, #1
 801351a:	d106      	bne.n	801352a <tcp_output+0x32>
 801351c:	4b9a      	ldr	r3, [pc, #616]	; (8013788 <tcp_output+0x290>)
 801351e:	f240 42e4 	movw	r2, #1252	; 0x4e4
 8013522:	499c      	ldr	r1, [pc, #624]	; (8013794 <tcp_output+0x29c>)
 8013524:	489a      	ldr	r0, [pc, #616]	; (8013790 <tcp_output+0x298>)
 8013526:	f004 f8f5 	bl	8017714 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801352a:	4b9b      	ldr	r3, [pc, #620]	; (8013798 <tcp_output+0x2a0>)
 801352c:	681a      	ldr	r2, [r3, #0]
 801352e:	687b      	ldr	r3, [r7, #4]
 8013530:	429a      	cmp	r2, r3
 8013532:	d101      	bne.n	8013538 <tcp_output+0x40>
    return ERR_OK;
 8013534:	2300      	movs	r3, #0
 8013536:	e1d0      	b.n	80138da <tcp_output+0x3e2>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8013538:	687b      	ldr	r3, [r7, #4]
 801353a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801353e:	687b      	ldr	r3, [r7, #4]
 8013540:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013544:	429a      	cmp	r2, r3
 8013546:	d203      	bcs.n	8013550 <tcp_output+0x58>
 8013548:	687b      	ldr	r3, [r7, #4]
 801354a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801354e:	e002      	b.n	8013556 <tcp_output+0x5e>
 8013550:	687b      	ldr	r3, [r7, #4]
 8013552:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013556:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8013558:	687b      	ldr	r3, [r7, #4]
 801355a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801355c:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 801355e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013560:	2b00      	cmp	r3, #0
 8013562:	d10b      	bne.n	801357c <tcp_output+0x84>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8013564:	687b      	ldr	r3, [r7, #4]
 8013566:	8b5b      	ldrh	r3, [r3, #26]
 8013568:	f003 0302 	and.w	r3, r3, #2
 801356c:	2b00      	cmp	r3, #0
 801356e:	f000 81a9 	beq.w	80138c4 <tcp_output+0x3cc>
      return tcp_send_empty_ack(pcb);
 8013572:	6878      	ldr	r0, [r7, #4]
 8013574:	f000 fdde 	bl	8014134 <tcp_send_empty_ack>
 8013578:	4603      	mov	r3, r0
 801357a:	e1ae      	b.n	80138da <tcp_output+0x3e2>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801357c:	6879      	ldr	r1, [r7, #4]
 801357e:	687b      	ldr	r3, [r7, #4]
 8013580:	3304      	adds	r3, #4
 8013582:	461a      	mov	r2, r3
 8013584:	6878      	ldr	r0, [r7, #4]
 8013586:	f7ff f817 	bl	80125b8 <tcp_route>
 801358a:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801358c:	697b      	ldr	r3, [r7, #20]
 801358e:	2b00      	cmp	r3, #0
 8013590:	d102      	bne.n	8013598 <tcp_output+0xa0>
    return ERR_RTE;
 8013592:	f06f 0303 	mvn.w	r3, #3
 8013596:	e1a0      	b.n	80138da <tcp_output+0x3e2>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8013598:	687b      	ldr	r3, [r7, #4]
 801359a:	2b00      	cmp	r3, #0
 801359c:	d003      	beq.n	80135a6 <tcp_output+0xae>
 801359e:	687b      	ldr	r3, [r7, #4]
 80135a0:	681b      	ldr	r3, [r3, #0]
 80135a2:	2b00      	cmp	r3, #0
 80135a4:	d111      	bne.n	80135ca <tcp_output+0xd2>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80135a6:	697b      	ldr	r3, [r7, #20]
 80135a8:	2b00      	cmp	r3, #0
 80135aa:	d002      	beq.n	80135b2 <tcp_output+0xba>
 80135ac:	697b      	ldr	r3, [r7, #20]
 80135ae:	3304      	adds	r3, #4
 80135b0:	e000      	b.n	80135b4 <tcp_output+0xbc>
 80135b2:	2300      	movs	r3, #0
 80135b4:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80135b6:	693b      	ldr	r3, [r7, #16]
 80135b8:	2b00      	cmp	r3, #0
 80135ba:	d102      	bne.n	80135c2 <tcp_output+0xca>
      return ERR_RTE;
 80135bc:	f06f 0303 	mvn.w	r3, #3
 80135c0:	e18b      	b.n	80138da <tcp_output+0x3e2>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80135c2:	693b      	ldr	r3, [r7, #16]
 80135c4:	681a      	ldr	r2, [r3, #0]
 80135c6:	687b      	ldr	r3, [r7, #4]
 80135c8:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80135ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135cc:	68db      	ldr	r3, [r3, #12]
 80135ce:	685b      	ldr	r3, [r3, #4]
 80135d0:	4618      	mov	r0, r3
 80135d2:	f7f5 fb38 	bl	8008c46 <lwip_htonl>
 80135d6:	4602      	mov	r2, r0
 80135d8:	687b      	ldr	r3, [r7, #4]
 80135da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80135dc:	1ad3      	subs	r3, r2, r3
 80135de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80135e0:	8912      	ldrh	r2, [r2, #8]
 80135e2:	441a      	add	r2, r3
 80135e4:	69bb      	ldr	r3, [r7, #24]
 80135e6:	429a      	cmp	r2, r3
 80135e8:	d927      	bls.n	801363a <tcp_output+0x142>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80135ea:	687b      	ldr	r3, [r7, #4]
 80135ec:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80135f0:	461a      	mov	r2, r3
 80135f2:	69bb      	ldr	r3, [r7, #24]
 80135f4:	429a      	cmp	r2, r3
 80135f6:	d114      	bne.n	8013622 <tcp_output+0x12a>
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80135fc:	2b00      	cmp	r3, #0
 80135fe:	d110      	bne.n	8013622 <tcp_output+0x12a>
 8013600:	687b      	ldr	r3, [r7, #4]
 8013602:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8013606:	2b00      	cmp	r3, #0
 8013608:	d10b      	bne.n	8013622 <tcp_output+0x12a>
      pcb->persist_cnt = 0;
 801360a:	687b      	ldr	r3, [r7, #4]
 801360c:	2200      	movs	r2, #0
 801360e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8013612:	687b      	ldr	r3, [r7, #4]
 8013614:	2201      	movs	r2, #1
 8013616:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 801361a:	687b      	ldr	r3, [r7, #4]
 801361c:	2200      	movs	r2, #0
 801361e:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8013622:	687b      	ldr	r3, [r7, #4]
 8013624:	8b5b      	ldrh	r3, [r3, #26]
 8013626:	f003 0302 	and.w	r3, r3, #2
 801362a:	2b00      	cmp	r3, #0
 801362c:	f000 814c 	beq.w	80138c8 <tcp_output+0x3d0>
      return tcp_send_empty_ack(pcb);
 8013630:	6878      	ldr	r0, [r7, #4]
 8013632:	f000 fd7f 	bl	8014134 <tcp_send_empty_ack>
 8013636:	4603      	mov	r3, r0
 8013638:	e14f      	b.n	80138da <tcp_output+0x3e2>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 801363a:	687b      	ldr	r3, [r7, #4]
 801363c:	2200      	movs	r2, #0
 801363e:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013646:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8013648:	6a3b      	ldr	r3, [r7, #32]
 801364a:	2b00      	cmp	r3, #0
 801364c:	f000 811b 	beq.w	8013886 <tcp_output+0x38e>
    for (; useg->next != NULL; useg = useg->next);
 8013650:	e002      	b.n	8013658 <tcp_output+0x160>
 8013652:	6a3b      	ldr	r3, [r7, #32]
 8013654:	681b      	ldr	r3, [r3, #0]
 8013656:	623b      	str	r3, [r7, #32]
 8013658:	6a3b      	ldr	r3, [r7, #32]
 801365a:	681b      	ldr	r3, [r3, #0]
 801365c:	2b00      	cmp	r3, #0
 801365e:	d1f8      	bne.n	8013652 <tcp_output+0x15a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8013660:	e111      	b.n	8013886 <tcp_output+0x38e>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8013662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013664:	68db      	ldr	r3, [r3, #12]
 8013666:	899b      	ldrh	r3, [r3, #12]
 8013668:	b29b      	uxth	r3, r3
 801366a:	4618      	mov	r0, r3
 801366c:	f7f5 fad6 	bl	8008c1c <lwip_htons>
 8013670:	4603      	mov	r3, r0
 8013672:	b2db      	uxtb	r3, r3
 8013674:	f003 0304 	and.w	r3, r3, #4
 8013678:	2b00      	cmp	r3, #0
 801367a:	d006      	beq.n	801368a <tcp_output+0x192>
 801367c:	4b42      	ldr	r3, [pc, #264]	; (8013788 <tcp_output+0x290>)
 801367e:	f240 5237 	movw	r2, #1335	; 0x537
 8013682:	4946      	ldr	r1, [pc, #280]	; (801379c <tcp_output+0x2a4>)
 8013684:	4842      	ldr	r0, [pc, #264]	; (8013790 <tcp_output+0x298>)
 8013686:	f004 f845 	bl	8017714 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801368a:	687b      	ldr	r3, [r7, #4]
 801368c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801368e:	2b00      	cmp	r3, #0
 8013690:	d01f      	beq.n	80136d2 <tcp_output+0x1da>
 8013692:	687b      	ldr	r3, [r7, #4]
 8013694:	8b5b      	ldrh	r3, [r3, #26]
 8013696:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801369a:	2b00      	cmp	r3, #0
 801369c:	d119      	bne.n	80136d2 <tcp_output+0x1da>
 801369e:	687b      	ldr	r3, [r7, #4]
 80136a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80136a2:	2b00      	cmp	r3, #0
 80136a4:	d00b      	beq.n	80136be <tcp_output+0x1c6>
 80136a6:	687b      	ldr	r3, [r7, #4]
 80136a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80136aa:	681b      	ldr	r3, [r3, #0]
 80136ac:	2b00      	cmp	r3, #0
 80136ae:	d110      	bne.n	80136d2 <tcp_output+0x1da>
 80136b0:	687b      	ldr	r3, [r7, #4]
 80136b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80136b4:	891a      	ldrh	r2, [r3, #8]
 80136b6:	687b      	ldr	r3, [r7, #4]
 80136b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80136ba:	429a      	cmp	r2, r3
 80136bc:	d209      	bcs.n	80136d2 <tcp_output+0x1da>
 80136be:	687b      	ldr	r3, [r7, #4]
 80136c0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80136c4:	2b00      	cmp	r3, #0
 80136c6:	d004      	beq.n	80136d2 <tcp_output+0x1da>
 80136c8:	687b      	ldr	r3, [r7, #4]
 80136ca:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80136ce:	2b08      	cmp	r3, #8
 80136d0:	d901      	bls.n	80136d6 <tcp_output+0x1de>
 80136d2:	2301      	movs	r3, #1
 80136d4:	e000      	b.n	80136d8 <tcp_output+0x1e0>
 80136d6:	2300      	movs	r3, #0
 80136d8:	2b00      	cmp	r3, #0
 80136da:	d106      	bne.n	80136ea <tcp_output+0x1f2>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80136dc:	687b      	ldr	r3, [r7, #4]
 80136de:	8b5b      	ldrh	r3, [r3, #26]
 80136e0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80136e4:	2b00      	cmp	r3, #0
 80136e6:	f000 80e3 	beq.w	80138b0 <tcp_output+0x3b8>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80136ea:	687b      	ldr	r3, [r7, #4]
 80136ec:	7d1b      	ldrb	r3, [r3, #20]
 80136ee:	2b02      	cmp	r3, #2
 80136f0:	d00c      	beq.n	801370c <tcp_output+0x214>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80136f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136f4:	68dc      	ldr	r4, [r3, #12]
 80136f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136f8:	68db      	ldr	r3, [r3, #12]
 80136fa:	899b      	ldrh	r3, [r3, #12]
 80136fc:	b29d      	uxth	r5, r3
 80136fe:	2010      	movs	r0, #16
 8013700:	f7f5 fa8c 	bl	8008c1c <lwip_htons>
 8013704:	4603      	mov	r3, r0
 8013706:	432b      	orrs	r3, r5
 8013708:	b29b      	uxth	r3, r3
 801370a:	81a3      	strh	r3, [r4, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 801370c:	697a      	ldr	r2, [r7, #20]
 801370e:	6879      	ldr	r1, [r7, #4]
 8013710:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013712:	f000 f907 	bl	8013924 <tcp_output_segment>
 8013716:	4603      	mov	r3, r0
 8013718:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801371a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801371e:	2b00      	cmp	r3, #0
 8013720:	d009      	beq.n	8013736 <tcp_output+0x23e>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013722:	687b      	ldr	r3, [r7, #4]
 8013724:	8b5b      	ldrh	r3, [r3, #26]
 8013726:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801372a:	b29a      	uxth	r2, r3
 801372c:	687b      	ldr	r3, [r7, #4]
 801372e:	835a      	strh	r2, [r3, #26]
      return err;
 8013730:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013734:	e0d1      	b.n	80138da <tcp_output+0x3e2>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8013736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013738:	681a      	ldr	r2, [r3, #0]
 801373a:	687b      	ldr	r3, [r7, #4]
 801373c:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 801373e:	687b      	ldr	r3, [r7, #4]
 8013740:	7d1b      	ldrb	r3, [r3, #20]
 8013742:	2b02      	cmp	r3, #2
 8013744:	d006      	beq.n	8013754 <tcp_output+0x25c>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013746:	687b      	ldr	r3, [r7, #4]
 8013748:	8b5b      	ldrh	r3, [r3, #26]
 801374a:	f023 0303 	bic.w	r3, r3, #3
 801374e:	b29a      	uxth	r2, r3
 8013750:	687b      	ldr	r3, [r7, #4]
 8013752:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8013754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013756:	68db      	ldr	r3, [r3, #12]
 8013758:	685b      	ldr	r3, [r3, #4]
 801375a:	4618      	mov	r0, r3
 801375c:	f7f5 fa73 	bl	8008c46 <lwip_htonl>
 8013760:	4604      	mov	r4, r0
 8013762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013764:	891b      	ldrh	r3, [r3, #8]
 8013766:	461d      	mov	r5, r3
 8013768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801376a:	68db      	ldr	r3, [r3, #12]
 801376c:	899b      	ldrh	r3, [r3, #12]
 801376e:	b29b      	uxth	r3, r3
 8013770:	4618      	mov	r0, r3
 8013772:	f7f5 fa53 	bl	8008c1c <lwip_htons>
 8013776:	4603      	mov	r3, r0
 8013778:	b2db      	uxtb	r3, r3
 801377a:	f003 0303 	and.w	r3, r3, #3
 801377e:	2b00      	cmp	r3, #0
 8013780:	d00e      	beq.n	80137a0 <tcp_output+0x2a8>
 8013782:	2301      	movs	r3, #1
 8013784:	e00d      	b.n	80137a2 <tcp_output+0x2aa>
 8013786:	bf00      	nop
 8013788:	0801aa90 	.word	0x0801aa90
 801378c:	0801afd4 	.word	0x0801afd4
 8013790:	0801aae4 	.word	0x0801aae4
 8013794:	0801afec 	.word	0x0801afec
 8013798:	20009638 	.word	0x20009638
 801379c:	0801b014 	.word	0x0801b014
 80137a0:	2300      	movs	r3, #0
 80137a2:	442b      	add	r3, r5
 80137a4:	4423      	add	r3, r4
 80137a6:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80137a8:	687b      	ldr	r3, [r7, #4]
 80137aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80137ac:	68bb      	ldr	r3, [r7, #8]
 80137ae:	1ad3      	subs	r3, r2, r3
 80137b0:	2b00      	cmp	r3, #0
 80137b2:	da02      	bge.n	80137ba <tcp_output+0x2c2>
      pcb->snd_nxt = snd_nxt;
 80137b4:	687b      	ldr	r3, [r7, #4]
 80137b6:	68ba      	ldr	r2, [r7, #8]
 80137b8:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80137ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137bc:	891b      	ldrh	r3, [r3, #8]
 80137be:	461c      	mov	r4, r3
 80137c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137c2:	68db      	ldr	r3, [r3, #12]
 80137c4:	899b      	ldrh	r3, [r3, #12]
 80137c6:	b29b      	uxth	r3, r3
 80137c8:	4618      	mov	r0, r3
 80137ca:	f7f5 fa27 	bl	8008c1c <lwip_htons>
 80137ce:	4603      	mov	r3, r0
 80137d0:	b2db      	uxtb	r3, r3
 80137d2:	f003 0303 	and.w	r3, r3, #3
 80137d6:	2b00      	cmp	r3, #0
 80137d8:	d001      	beq.n	80137de <tcp_output+0x2e6>
 80137da:	2301      	movs	r3, #1
 80137dc:	e000      	b.n	80137e0 <tcp_output+0x2e8>
 80137de:	2300      	movs	r3, #0
 80137e0:	4423      	add	r3, r4
 80137e2:	2b00      	cmp	r3, #0
 80137e4:	d049      	beq.n	801387a <tcp_output+0x382>
      seg->next = NULL;
 80137e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137e8:	2200      	movs	r2, #0
 80137ea:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80137ec:	687b      	ldr	r3, [r7, #4]
 80137ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80137f0:	2b00      	cmp	r3, #0
 80137f2:	d105      	bne.n	8013800 <tcp_output+0x308>
        pcb->unacked = seg;
 80137f4:	687b      	ldr	r3, [r7, #4]
 80137f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80137f8:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 80137fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137fc:	623b      	str	r3, [r7, #32]
 80137fe:	e03f      	b.n	8013880 <tcp_output+0x388>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8013800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013802:	68db      	ldr	r3, [r3, #12]
 8013804:	685b      	ldr	r3, [r3, #4]
 8013806:	4618      	mov	r0, r3
 8013808:	f7f5 fa1d 	bl	8008c46 <lwip_htonl>
 801380c:	4604      	mov	r4, r0
 801380e:	6a3b      	ldr	r3, [r7, #32]
 8013810:	68db      	ldr	r3, [r3, #12]
 8013812:	685b      	ldr	r3, [r3, #4]
 8013814:	4618      	mov	r0, r3
 8013816:	f7f5 fa16 	bl	8008c46 <lwip_htonl>
 801381a:	4603      	mov	r3, r0
 801381c:	1ae3      	subs	r3, r4, r3
 801381e:	2b00      	cmp	r3, #0
 8013820:	da24      	bge.n	801386c <tcp_output+0x374>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8013822:	687b      	ldr	r3, [r7, #4]
 8013824:	3370      	adds	r3, #112	; 0x70
 8013826:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8013828:	e002      	b.n	8013830 <tcp_output+0x338>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801382a:	69fb      	ldr	r3, [r7, #28]
 801382c:	681b      	ldr	r3, [r3, #0]
 801382e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8013830:	69fb      	ldr	r3, [r7, #28]
 8013832:	681b      	ldr	r3, [r3, #0]
 8013834:	2b00      	cmp	r3, #0
 8013836:	d011      	beq.n	801385c <tcp_output+0x364>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8013838:	69fb      	ldr	r3, [r7, #28]
 801383a:	681b      	ldr	r3, [r3, #0]
 801383c:	68db      	ldr	r3, [r3, #12]
 801383e:	685b      	ldr	r3, [r3, #4]
 8013840:	4618      	mov	r0, r3
 8013842:	f7f5 fa00 	bl	8008c46 <lwip_htonl>
 8013846:	4604      	mov	r4, r0
 8013848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801384a:	68db      	ldr	r3, [r3, #12]
 801384c:	685b      	ldr	r3, [r3, #4]
 801384e:	4618      	mov	r0, r3
 8013850:	f7f5 f9f9 	bl	8008c46 <lwip_htonl>
 8013854:	4603      	mov	r3, r0
 8013856:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8013858:	2b00      	cmp	r3, #0
 801385a:	dbe6      	blt.n	801382a <tcp_output+0x332>
          }
          seg->next = (*cur_seg);
 801385c:	69fb      	ldr	r3, [r7, #28]
 801385e:	681a      	ldr	r2, [r3, #0]
 8013860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013862:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8013864:	69fb      	ldr	r3, [r7, #28]
 8013866:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013868:	601a      	str	r2, [r3, #0]
 801386a:	e009      	b.n	8013880 <tcp_output+0x388>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801386c:	6a3b      	ldr	r3, [r7, #32]
 801386e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013870:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8013872:	6a3b      	ldr	r3, [r7, #32]
 8013874:	681b      	ldr	r3, [r3, #0]
 8013876:	623b      	str	r3, [r7, #32]
 8013878:	e002      	b.n	8013880 <tcp_output+0x388>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801387a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801387c:	f7fb ff32 	bl	800f6e4 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8013880:	687b      	ldr	r3, [r7, #4]
 8013882:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013884:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8013886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013888:	2b00      	cmp	r3, #0
 801388a:	d012      	beq.n	80138b2 <tcp_output+0x3ba>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801388c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801388e:	68db      	ldr	r3, [r3, #12]
 8013890:	685b      	ldr	r3, [r3, #4]
 8013892:	4618      	mov	r0, r3
 8013894:	f7f5 f9d7 	bl	8008c46 <lwip_htonl>
 8013898:	4602      	mov	r2, r0
 801389a:	687b      	ldr	r3, [r7, #4]
 801389c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801389e:	1ad3      	subs	r3, r2, r3
 80138a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80138a2:	8912      	ldrh	r2, [r2, #8]
 80138a4:	441a      	add	r2, r3
  while (seg != NULL &&
 80138a6:	69bb      	ldr	r3, [r7, #24]
 80138a8:	429a      	cmp	r2, r3
 80138aa:	f67f aeda 	bls.w	8013662 <tcp_output+0x16a>
 80138ae:	e000      	b.n	80138b2 <tcp_output+0x3ba>
      break;
 80138b0:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80138b2:	687b      	ldr	r3, [r7, #4]
 80138b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80138b6:	2b00      	cmp	r3, #0
 80138b8:	d107      	bne.n	80138ca <tcp_output+0x3d2>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80138ba:	687b      	ldr	r3, [r7, #4]
 80138bc:	2200      	movs	r2, #0
 80138be:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80138c2:	e002      	b.n	80138ca <tcp_output+0x3d2>
    goto output_done;
 80138c4:	bf00      	nop
 80138c6:	e000      	b.n	80138ca <tcp_output+0x3d2>
    goto output_done;
 80138c8:	bf00      	nop
  }
#endif /* TCP_OVERSIZE */

output_done:
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80138ca:	687b      	ldr	r3, [r7, #4]
 80138cc:	8b5b      	ldrh	r3, [r3, #26]
 80138ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80138d2:	b29a      	uxth	r2, r3
 80138d4:	687b      	ldr	r3, [r7, #4]
 80138d6:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80138d8:	2300      	movs	r3, #0
}
 80138da:	4618      	mov	r0, r3
 80138dc:	3728      	adds	r7, #40	; 0x28
 80138de:	46bd      	mov	sp, r7
 80138e0:	bdb0      	pop	{r4, r5, r7, pc}
 80138e2:	bf00      	nop

080138e4 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80138e4:	b580      	push	{r7, lr}
 80138e6:	b082      	sub	sp, #8
 80138e8:	af00      	add	r7, sp, #0
 80138ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80138ec:	687b      	ldr	r3, [r7, #4]
 80138ee:	2b00      	cmp	r3, #0
 80138f0:	d106      	bne.n	8013900 <tcp_output_segment_busy+0x1c>
 80138f2:	4b09      	ldr	r3, [pc, #36]	; (8013918 <tcp_output_segment_busy+0x34>)
 80138f4:	f240 529a 	movw	r2, #1434	; 0x59a
 80138f8:	4908      	ldr	r1, [pc, #32]	; (801391c <tcp_output_segment_busy+0x38>)
 80138fa:	4809      	ldr	r0, [pc, #36]	; (8013920 <tcp_output_segment_busy+0x3c>)
 80138fc:	f003 ff0a 	bl	8017714 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8013900:	687b      	ldr	r3, [r7, #4]
 8013902:	685b      	ldr	r3, [r3, #4]
 8013904:	7b9b      	ldrb	r3, [r3, #14]
 8013906:	2b01      	cmp	r3, #1
 8013908:	d001      	beq.n	801390e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801390a:	2301      	movs	r3, #1
 801390c:	e000      	b.n	8013910 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801390e:	2300      	movs	r3, #0
}
 8013910:	4618      	mov	r0, r3
 8013912:	3708      	adds	r7, #8
 8013914:	46bd      	mov	sp, r7
 8013916:	bd80      	pop	{r7, pc}
 8013918:	0801aa90 	.word	0x0801aa90
 801391c:	0801b02c 	.word	0x0801b02c
 8013920:	0801aae4 	.word	0x0801aae4

08013924 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8013924:	b5b0      	push	{r4, r5, r7, lr}
 8013926:	b08c      	sub	sp, #48	; 0x30
 8013928:	af04      	add	r7, sp, #16
 801392a:	60f8      	str	r0, [r7, #12]
 801392c:	60b9      	str	r1, [r7, #8]
 801392e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8013930:	68fb      	ldr	r3, [r7, #12]
 8013932:	2b00      	cmp	r3, #0
 8013934:	d106      	bne.n	8013944 <tcp_output_segment+0x20>
 8013936:	4b66      	ldr	r3, [pc, #408]	; (8013ad0 <tcp_output_segment+0x1ac>)
 8013938:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 801393c:	4965      	ldr	r1, [pc, #404]	; (8013ad4 <tcp_output_segment+0x1b0>)
 801393e:	4866      	ldr	r0, [pc, #408]	; (8013ad8 <tcp_output_segment+0x1b4>)
 8013940:	f003 fee8 	bl	8017714 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8013944:	68bb      	ldr	r3, [r7, #8]
 8013946:	2b00      	cmp	r3, #0
 8013948:	d106      	bne.n	8013958 <tcp_output_segment+0x34>
 801394a:	4b61      	ldr	r3, [pc, #388]	; (8013ad0 <tcp_output_segment+0x1ac>)
 801394c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8013950:	4962      	ldr	r1, [pc, #392]	; (8013adc <tcp_output_segment+0x1b8>)
 8013952:	4861      	ldr	r0, [pc, #388]	; (8013ad8 <tcp_output_segment+0x1b4>)
 8013954:	f003 fede 	bl	8017714 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8013958:	687b      	ldr	r3, [r7, #4]
 801395a:	2b00      	cmp	r3, #0
 801395c:	d106      	bne.n	801396c <tcp_output_segment+0x48>
 801395e:	4b5c      	ldr	r3, [pc, #368]	; (8013ad0 <tcp_output_segment+0x1ac>)
 8013960:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8013964:	495e      	ldr	r1, [pc, #376]	; (8013ae0 <tcp_output_segment+0x1bc>)
 8013966:	485c      	ldr	r0, [pc, #368]	; (8013ad8 <tcp_output_segment+0x1b4>)
 8013968:	f003 fed4 	bl	8017714 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801396c:	68f8      	ldr	r0, [r7, #12]
 801396e:	f7ff ffb9 	bl	80138e4 <tcp_output_segment_busy>
 8013972:	4603      	mov	r3, r0
 8013974:	2b00      	cmp	r3, #0
 8013976:	d001      	beq.n	801397c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8013978:	2300      	movs	r3, #0
 801397a:	e0a4      	b.n	8013ac6 <tcp_output_segment+0x1a2>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801397c:	68fb      	ldr	r3, [r7, #12]
 801397e:	68dc      	ldr	r4, [r3, #12]
 8013980:	68bb      	ldr	r3, [r7, #8]
 8013982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013984:	4618      	mov	r0, r3
 8013986:	f7f5 f95e 	bl	8008c46 <lwip_htonl>
 801398a:	4603      	mov	r3, r0
 801398c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801398e:	68fb      	ldr	r3, [r7, #12]
 8013990:	68dc      	ldr	r4, [r3, #12]
 8013992:	68bb      	ldr	r3, [r7, #8]
 8013994:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013996:	4618      	mov	r0, r3
 8013998:	f7f5 f940 	bl	8008c1c <lwip_htons>
 801399c:	4603      	mov	r3, r0
 801399e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80139a0:	68bb      	ldr	r3, [r7, #8]
 80139a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80139a4:	68ba      	ldr	r2, [r7, #8]
 80139a6:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80139a8:	441a      	add	r2, r3
 80139aa:	68bb      	ldr	r3, [r7, #8]
 80139ac:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80139ae:	68fb      	ldr	r3, [r7, #12]
 80139b0:	68db      	ldr	r3, [r3, #12]
 80139b2:	3314      	adds	r3, #20
 80139b4:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80139b6:	68fb      	ldr	r3, [r7, #12]
 80139b8:	7a9b      	ldrb	r3, [r3, #10]
 80139ba:	f003 0301 	and.w	r3, r3, #1
 80139be:	2b00      	cmp	r3, #0
 80139c0:	d015      	beq.n	80139ee <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80139c2:	68bb      	ldr	r3, [r7, #8]
 80139c4:	3304      	adds	r3, #4
 80139c6:	461a      	mov	r2, r3
 80139c8:	6879      	ldr	r1, [r7, #4]
 80139ca:	f44f 7006 	mov.w	r0, #536	; 0x218
 80139ce:	f7fc fa2f 	bl	800fe30 <tcp_eff_send_mss_netif>
 80139d2:	4603      	mov	r3, r0
 80139d4:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80139d6:	8b7b      	ldrh	r3, [r7, #26]
 80139d8:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 80139dc:	4618      	mov	r0, r3
 80139de:	f7f5 f932 	bl	8008c46 <lwip_htonl>
 80139e2:	4602      	mov	r2, r0
 80139e4:	69fb      	ldr	r3, [r7, #28]
 80139e6:	601a      	str	r2, [r3, #0]
    opts += 1;
 80139e8:	69fb      	ldr	r3, [r7, #28]
 80139ea:	3304      	adds	r3, #4
 80139ec:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80139ee:	68bb      	ldr	r3, [r7, #8]
 80139f0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80139f4:	2b00      	cmp	r3, #0
 80139f6:	da02      	bge.n	80139fe <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80139f8:	68bb      	ldr	r3, [r7, #8]
 80139fa:	2200      	movs	r2, #0
 80139fc:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 80139fe:	68bb      	ldr	r3, [r7, #8]
 8013a00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013a02:	2b00      	cmp	r3, #0
 8013a04:	d10c      	bne.n	8013a20 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8013a06:	4b37      	ldr	r3, [pc, #220]	; (8013ae4 <tcp_output_segment+0x1c0>)
 8013a08:	681a      	ldr	r2, [r3, #0]
 8013a0a:	68bb      	ldr	r3, [r7, #8]
 8013a0c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8013a0e:	68fb      	ldr	r3, [r7, #12]
 8013a10:	68db      	ldr	r3, [r3, #12]
 8013a12:	685b      	ldr	r3, [r3, #4]
 8013a14:	4618      	mov	r0, r3
 8013a16:	f7f5 f916 	bl	8008c46 <lwip_htonl>
 8013a1a:	4602      	mov	r2, r0
 8013a1c:	68bb      	ldr	r3, [r7, #8]
 8013a1e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8013a20:	68fb      	ldr	r3, [r7, #12]
 8013a22:	68db      	ldr	r3, [r3, #12]
 8013a24:	461a      	mov	r2, r3
 8013a26:	68fb      	ldr	r3, [r7, #12]
 8013a28:	685b      	ldr	r3, [r3, #4]
 8013a2a:	685b      	ldr	r3, [r3, #4]
 8013a2c:	1ad3      	subs	r3, r2, r3
 8013a2e:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8013a30:	68fb      	ldr	r3, [r7, #12]
 8013a32:	685b      	ldr	r3, [r3, #4]
 8013a34:	68fa      	ldr	r2, [r7, #12]
 8013a36:	6852      	ldr	r2, [r2, #4]
 8013a38:	8951      	ldrh	r1, [r2, #10]
 8013a3a:	8b3a      	ldrh	r2, [r7, #24]
 8013a3c:	1a8a      	subs	r2, r1, r2
 8013a3e:	b292      	uxth	r2, r2
 8013a40:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8013a42:	68fb      	ldr	r3, [r7, #12]
 8013a44:	685b      	ldr	r3, [r3, #4]
 8013a46:	68fa      	ldr	r2, [r7, #12]
 8013a48:	6852      	ldr	r2, [r2, #4]
 8013a4a:	8911      	ldrh	r1, [r2, #8]
 8013a4c:	8b3a      	ldrh	r2, [r7, #24]
 8013a4e:	1a8a      	subs	r2, r1, r2
 8013a50:	b292      	uxth	r2, r2
 8013a52:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8013a54:	68fb      	ldr	r3, [r7, #12]
 8013a56:	685b      	ldr	r3, [r3, #4]
 8013a58:	68fa      	ldr	r2, [r7, #12]
 8013a5a:	68d2      	ldr	r2, [r2, #12]
 8013a5c:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8013a5e:	68fb      	ldr	r3, [r7, #12]
 8013a60:	68db      	ldr	r3, [r3, #12]
 8013a62:	2200      	movs	r2, #0
 8013a64:	741a      	strb	r2, [r3, #16]
 8013a66:	2200      	movs	r2, #0
 8013a68:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8013a6a:	68fb      	ldr	r3, [r7, #12]
 8013a6c:	68db      	ldr	r3, [r3, #12]
 8013a6e:	f103 0214 	add.w	r2, r3, #20
 8013a72:	68fb      	ldr	r3, [r7, #12]
 8013a74:	7a9b      	ldrb	r3, [r3, #10]
 8013a76:	f003 0301 	and.w	r3, r3, #1
 8013a7a:	2b00      	cmp	r3, #0
 8013a7c:	d001      	beq.n	8013a82 <tcp_output_segment+0x15e>
 8013a7e:	2304      	movs	r3, #4
 8013a80:	e000      	b.n	8013a84 <tcp_output_segment+0x160>
 8013a82:	2300      	movs	r3, #0
 8013a84:	441a      	add	r2, r3
 8013a86:	69fb      	ldr	r3, [r7, #28]
 8013a88:	429a      	cmp	r2, r3
 8013a8a:	d006      	beq.n	8013a9a <tcp_output_segment+0x176>
 8013a8c:	4b10      	ldr	r3, [pc, #64]	; (8013ad0 <tcp_output_segment+0x1ac>)
 8013a8e:	f240 621c 	movw	r2, #1564	; 0x61c
 8013a92:	4915      	ldr	r1, [pc, #84]	; (8013ae8 <tcp_output_segment+0x1c4>)
 8013a94:	4810      	ldr	r0, [pc, #64]	; (8013ad8 <tcp_output_segment+0x1b4>)
 8013a96:	f003 fe3d 	bl	8017714 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8013a9a:	68fb      	ldr	r3, [r7, #12]
 8013a9c:	6858      	ldr	r0, [r3, #4]
 8013a9e:	68b9      	ldr	r1, [r7, #8]
 8013aa0:	68bb      	ldr	r3, [r7, #8]
 8013aa2:	1d1c      	adds	r4, r3, #4
 8013aa4:	68bb      	ldr	r3, [r7, #8]
 8013aa6:	7add      	ldrb	r5, [r3, #11]
 8013aa8:	68bb      	ldr	r3, [r7, #8]
 8013aaa:	7a9b      	ldrb	r3, [r3, #10]
 8013aac:	687a      	ldr	r2, [r7, #4]
 8013aae:	9202      	str	r2, [sp, #8]
 8013ab0:	2206      	movs	r2, #6
 8013ab2:	9201      	str	r2, [sp, #4]
 8013ab4:	9300      	str	r3, [sp, #0]
 8013ab6:	462b      	mov	r3, r5
 8013ab8:	4622      	mov	r2, r4
 8013aba:	f7f7 fb6b 	bl	800b194 <ip4_output_if>
 8013abe:	4603      	mov	r3, r0
 8013ac0:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8013ac2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013ac6:	4618      	mov	r0, r3
 8013ac8:	3720      	adds	r7, #32
 8013aca:	46bd      	mov	sp, r7
 8013acc:	bdb0      	pop	{r4, r5, r7, pc}
 8013ace:	bf00      	nop
 8013ad0:	0801aa90 	.word	0x0801aa90
 8013ad4:	0801b054 	.word	0x0801b054
 8013ad8:	0801aae4 	.word	0x0801aae4
 8013adc:	0801b074 	.word	0x0801b074
 8013ae0:	0801b094 	.word	0x0801b094
 8013ae4:	20009628 	.word	0x20009628
 8013ae8:	0801b0b8 	.word	0x0801b0b8

08013aec <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8013aec:	b5b0      	push	{r4, r5, r7, lr}
 8013aee:	b084      	sub	sp, #16
 8013af0:	af00      	add	r7, sp, #0
 8013af2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8013af4:	687b      	ldr	r3, [r7, #4]
 8013af6:	2b00      	cmp	r3, #0
 8013af8:	d106      	bne.n	8013b08 <tcp_rexmit_rto_prepare+0x1c>
 8013afa:	4b31      	ldr	r3, [pc, #196]	; (8013bc0 <tcp_rexmit_rto_prepare+0xd4>)
 8013afc:	f240 6263 	movw	r2, #1635	; 0x663
 8013b00:	4930      	ldr	r1, [pc, #192]	; (8013bc4 <tcp_rexmit_rto_prepare+0xd8>)
 8013b02:	4831      	ldr	r0, [pc, #196]	; (8013bc8 <tcp_rexmit_rto_prepare+0xdc>)
 8013b04:	f003 fe06 	bl	8017714 <iprintf>

  if (pcb->unacked == NULL) {
 8013b08:	687b      	ldr	r3, [r7, #4]
 8013b0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013b0c:	2b00      	cmp	r3, #0
 8013b0e:	d102      	bne.n	8013b16 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8013b10:	f06f 0305 	mvn.w	r3, #5
 8013b14:	e050      	b.n	8013bb8 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8013b16:	687b      	ldr	r3, [r7, #4]
 8013b18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013b1a:	60fb      	str	r3, [r7, #12]
 8013b1c:	e00b      	b.n	8013b36 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8013b1e:	68f8      	ldr	r0, [r7, #12]
 8013b20:	f7ff fee0 	bl	80138e4 <tcp_output_segment_busy>
 8013b24:	4603      	mov	r3, r0
 8013b26:	2b00      	cmp	r3, #0
 8013b28:	d002      	beq.n	8013b30 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8013b2a:	f06f 0305 	mvn.w	r3, #5
 8013b2e:	e043      	b.n	8013bb8 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8013b30:	68fb      	ldr	r3, [r7, #12]
 8013b32:	681b      	ldr	r3, [r3, #0]
 8013b34:	60fb      	str	r3, [r7, #12]
 8013b36:	68fb      	ldr	r3, [r7, #12]
 8013b38:	681b      	ldr	r3, [r3, #0]
 8013b3a:	2b00      	cmp	r3, #0
 8013b3c:	d1ef      	bne.n	8013b1e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8013b3e:	68f8      	ldr	r0, [r7, #12]
 8013b40:	f7ff fed0 	bl	80138e4 <tcp_output_segment_busy>
 8013b44:	4603      	mov	r3, r0
 8013b46:	2b00      	cmp	r3, #0
 8013b48:	d002      	beq.n	8013b50 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8013b4a:	f06f 0305 	mvn.w	r3, #5
 8013b4e:	e033      	b.n	8013bb8 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8013b50:	687b      	ldr	r3, [r7, #4]
 8013b52:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8013b54:	68fb      	ldr	r3, [r7, #12]
 8013b56:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8013b58:	687b      	ldr	r3, [r7, #4]
 8013b5a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8013b5c:	687b      	ldr	r3, [r7, #4]
 8013b5e:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8013b60:	687b      	ldr	r3, [r7, #4]
 8013b62:	2200      	movs	r2, #0
 8013b64:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8013b66:	687b      	ldr	r3, [r7, #4]
 8013b68:	8b5b      	ldrh	r3, [r3, #26]
 8013b6a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8013b6e:	b29a      	uxth	r2, r3
 8013b70:	687b      	ldr	r3, [r7, #4]
 8013b72:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8013b74:	68fb      	ldr	r3, [r7, #12]
 8013b76:	68db      	ldr	r3, [r3, #12]
 8013b78:	685b      	ldr	r3, [r3, #4]
 8013b7a:	4618      	mov	r0, r3
 8013b7c:	f7f5 f863 	bl	8008c46 <lwip_htonl>
 8013b80:	4604      	mov	r4, r0
 8013b82:	68fb      	ldr	r3, [r7, #12]
 8013b84:	891b      	ldrh	r3, [r3, #8]
 8013b86:	461d      	mov	r5, r3
 8013b88:	68fb      	ldr	r3, [r7, #12]
 8013b8a:	68db      	ldr	r3, [r3, #12]
 8013b8c:	899b      	ldrh	r3, [r3, #12]
 8013b8e:	b29b      	uxth	r3, r3
 8013b90:	4618      	mov	r0, r3
 8013b92:	f7f5 f843 	bl	8008c1c <lwip_htons>
 8013b96:	4603      	mov	r3, r0
 8013b98:	b2db      	uxtb	r3, r3
 8013b9a:	f003 0303 	and.w	r3, r3, #3
 8013b9e:	2b00      	cmp	r3, #0
 8013ba0:	d001      	beq.n	8013ba6 <tcp_rexmit_rto_prepare+0xba>
 8013ba2:	2301      	movs	r3, #1
 8013ba4:	e000      	b.n	8013ba8 <tcp_rexmit_rto_prepare+0xbc>
 8013ba6:	2300      	movs	r3, #0
 8013ba8:	442b      	add	r3, r5
 8013baa:	18e2      	adds	r2, r4, r3
 8013bac:	687b      	ldr	r3, [r7, #4]
 8013bae:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8013bb0:	687b      	ldr	r3, [r7, #4]
 8013bb2:	2200      	movs	r2, #0
 8013bb4:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8013bb6:	2300      	movs	r3, #0
}
 8013bb8:	4618      	mov	r0, r3
 8013bba:	3710      	adds	r7, #16
 8013bbc:	46bd      	mov	sp, r7
 8013bbe:	bdb0      	pop	{r4, r5, r7, pc}
 8013bc0:	0801aa90 	.word	0x0801aa90
 8013bc4:	0801b0cc 	.word	0x0801b0cc
 8013bc8:	0801aae4 	.word	0x0801aae4

08013bcc <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8013bcc:	b580      	push	{r7, lr}
 8013bce:	b082      	sub	sp, #8
 8013bd0:	af00      	add	r7, sp, #0
 8013bd2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8013bd4:	687b      	ldr	r3, [r7, #4]
 8013bd6:	2b00      	cmp	r3, #0
 8013bd8:	d106      	bne.n	8013be8 <tcp_rexmit_rto_commit+0x1c>
 8013bda:	4b0d      	ldr	r3, [pc, #52]	; (8013c10 <tcp_rexmit_rto_commit+0x44>)
 8013bdc:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8013be0:	490c      	ldr	r1, [pc, #48]	; (8013c14 <tcp_rexmit_rto_commit+0x48>)
 8013be2:	480d      	ldr	r0, [pc, #52]	; (8013c18 <tcp_rexmit_rto_commit+0x4c>)
 8013be4:	f003 fd96 	bl	8017714 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8013be8:	687b      	ldr	r3, [r7, #4]
 8013bea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013bee:	2bff      	cmp	r3, #255	; 0xff
 8013bf0:	d007      	beq.n	8013c02 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8013bf2:	687b      	ldr	r3, [r7, #4]
 8013bf4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013bf8:	3301      	adds	r3, #1
 8013bfa:	b2da      	uxtb	r2, r3
 8013bfc:	687b      	ldr	r3, [r7, #4]
 8013bfe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8013c02:	6878      	ldr	r0, [r7, #4]
 8013c04:	f7ff fc78 	bl	80134f8 <tcp_output>
}
 8013c08:	bf00      	nop
 8013c0a:	3708      	adds	r7, #8
 8013c0c:	46bd      	mov	sp, r7
 8013c0e:	bd80      	pop	{r7, pc}
 8013c10:	0801aa90 	.word	0x0801aa90
 8013c14:	0801b0f0 	.word	0x0801b0f0
 8013c18:	0801aae4 	.word	0x0801aae4

08013c1c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8013c1c:	b580      	push	{r7, lr}
 8013c1e:	b082      	sub	sp, #8
 8013c20:	af00      	add	r7, sp, #0
 8013c22:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8013c24:	687b      	ldr	r3, [r7, #4]
 8013c26:	2b00      	cmp	r3, #0
 8013c28:	d106      	bne.n	8013c38 <tcp_rexmit_rto+0x1c>
 8013c2a:	4b0a      	ldr	r3, [pc, #40]	; (8013c54 <tcp_rexmit_rto+0x38>)
 8013c2c:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8013c30:	4909      	ldr	r1, [pc, #36]	; (8013c58 <tcp_rexmit_rto+0x3c>)
 8013c32:	480a      	ldr	r0, [pc, #40]	; (8013c5c <tcp_rexmit_rto+0x40>)
 8013c34:	f003 fd6e 	bl	8017714 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8013c38:	6878      	ldr	r0, [r7, #4]
 8013c3a:	f7ff ff57 	bl	8013aec <tcp_rexmit_rto_prepare>
 8013c3e:	4603      	mov	r3, r0
 8013c40:	2b00      	cmp	r3, #0
 8013c42:	d102      	bne.n	8013c4a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8013c44:	6878      	ldr	r0, [r7, #4]
 8013c46:	f7ff ffc1 	bl	8013bcc <tcp_rexmit_rto_commit>
  }
}
 8013c4a:	bf00      	nop
 8013c4c:	3708      	adds	r7, #8
 8013c4e:	46bd      	mov	sp, r7
 8013c50:	bd80      	pop	{r7, pc}
 8013c52:	bf00      	nop
 8013c54:	0801aa90 	.word	0x0801aa90
 8013c58:	0801b114 	.word	0x0801b114
 8013c5c:	0801aae4 	.word	0x0801aae4

08013c60 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8013c60:	b590      	push	{r4, r7, lr}
 8013c62:	b085      	sub	sp, #20
 8013c64:	af00      	add	r7, sp, #0
 8013c66:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8013c68:	687b      	ldr	r3, [r7, #4]
 8013c6a:	2b00      	cmp	r3, #0
 8013c6c:	d106      	bne.n	8013c7c <tcp_rexmit+0x1c>
 8013c6e:	4b2f      	ldr	r3, [pc, #188]	; (8013d2c <tcp_rexmit+0xcc>)
 8013c70:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8013c74:	492e      	ldr	r1, [pc, #184]	; (8013d30 <tcp_rexmit+0xd0>)
 8013c76:	482f      	ldr	r0, [pc, #188]	; (8013d34 <tcp_rexmit+0xd4>)
 8013c78:	f003 fd4c 	bl	8017714 <iprintf>

  if (pcb->unacked == NULL) {
 8013c7c:	687b      	ldr	r3, [r7, #4]
 8013c7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013c80:	2b00      	cmp	r3, #0
 8013c82:	d102      	bne.n	8013c8a <tcp_rexmit+0x2a>
    return ERR_VAL;
 8013c84:	f06f 0305 	mvn.w	r3, #5
 8013c88:	e04c      	b.n	8013d24 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8013c8a:	687b      	ldr	r3, [r7, #4]
 8013c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013c8e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8013c90:	68b8      	ldr	r0, [r7, #8]
 8013c92:	f7ff fe27 	bl	80138e4 <tcp_output_segment_busy>
 8013c96:	4603      	mov	r3, r0
 8013c98:	2b00      	cmp	r3, #0
 8013c9a:	d002      	beq.n	8013ca2 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8013c9c:	f06f 0305 	mvn.w	r3, #5
 8013ca0:	e040      	b.n	8013d24 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8013ca2:	68bb      	ldr	r3, [r7, #8]
 8013ca4:	681a      	ldr	r2, [r3, #0]
 8013ca6:	687b      	ldr	r3, [r7, #4]
 8013ca8:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8013caa:	687b      	ldr	r3, [r7, #4]
 8013cac:	336c      	adds	r3, #108	; 0x6c
 8013cae:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8013cb0:	e002      	b.n	8013cb8 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8013cb2:	68fb      	ldr	r3, [r7, #12]
 8013cb4:	681b      	ldr	r3, [r3, #0]
 8013cb6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8013cb8:	68fb      	ldr	r3, [r7, #12]
 8013cba:	681b      	ldr	r3, [r3, #0]
 8013cbc:	2b00      	cmp	r3, #0
 8013cbe:	d011      	beq.n	8013ce4 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8013cc0:	68fb      	ldr	r3, [r7, #12]
 8013cc2:	681b      	ldr	r3, [r3, #0]
 8013cc4:	68db      	ldr	r3, [r3, #12]
 8013cc6:	685b      	ldr	r3, [r3, #4]
 8013cc8:	4618      	mov	r0, r3
 8013cca:	f7f4 ffbc 	bl	8008c46 <lwip_htonl>
 8013cce:	4604      	mov	r4, r0
 8013cd0:	68bb      	ldr	r3, [r7, #8]
 8013cd2:	68db      	ldr	r3, [r3, #12]
 8013cd4:	685b      	ldr	r3, [r3, #4]
 8013cd6:	4618      	mov	r0, r3
 8013cd8:	f7f4 ffb5 	bl	8008c46 <lwip_htonl>
 8013cdc:	4603      	mov	r3, r0
 8013cde:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8013ce0:	2b00      	cmp	r3, #0
 8013ce2:	dbe6      	blt.n	8013cb2 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8013ce4:	68fb      	ldr	r3, [r7, #12]
 8013ce6:	681a      	ldr	r2, [r3, #0]
 8013ce8:	68bb      	ldr	r3, [r7, #8]
 8013cea:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8013cec:	68fb      	ldr	r3, [r7, #12]
 8013cee:	68ba      	ldr	r2, [r7, #8]
 8013cf0:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8013cf2:	68bb      	ldr	r3, [r7, #8]
 8013cf4:	681b      	ldr	r3, [r3, #0]
 8013cf6:	2b00      	cmp	r3, #0
 8013cf8:	d103      	bne.n	8013d02 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8013cfa:	687b      	ldr	r3, [r7, #4]
 8013cfc:	2200      	movs	r2, #0
 8013cfe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8013d02:	687b      	ldr	r3, [r7, #4]
 8013d04:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013d08:	2bff      	cmp	r3, #255	; 0xff
 8013d0a:	d007      	beq.n	8013d1c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8013d0c:	687b      	ldr	r3, [r7, #4]
 8013d0e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013d12:	3301      	adds	r3, #1
 8013d14:	b2da      	uxtb	r2, r3
 8013d16:	687b      	ldr	r3, [r7, #4]
 8013d18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8013d1c:	687b      	ldr	r3, [r7, #4]
 8013d1e:	2200      	movs	r2, #0
 8013d20:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8013d22:	2300      	movs	r3, #0
}
 8013d24:	4618      	mov	r0, r3
 8013d26:	3714      	adds	r7, #20
 8013d28:	46bd      	mov	sp, r7
 8013d2a:	bd90      	pop	{r4, r7, pc}
 8013d2c:	0801aa90 	.word	0x0801aa90
 8013d30:	0801b130 	.word	0x0801b130
 8013d34:	0801aae4 	.word	0x0801aae4

08013d38 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8013d38:	b580      	push	{r7, lr}
 8013d3a:	b082      	sub	sp, #8
 8013d3c:	af00      	add	r7, sp, #0
 8013d3e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8013d40:	687b      	ldr	r3, [r7, #4]
 8013d42:	2b00      	cmp	r3, #0
 8013d44:	d106      	bne.n	8013d54 <tcp_rexmit_fast+0x1c>
 8013d46:	4b2f      	ldr	r3, [pc, #188]	; (8013e04 <tcp_rexmit_fast+0xcc>)
 8013d48:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8013d4c:	492e      	ldr	r1, [pc, #184]	; (8013e08 <tcp_rexmit_fast+0xd0>)
 8013d4e:	482f      	ldr	r0, [pc, #188]	; (8013e0c <tcp_rexmit_fast+0xd4>)
 8013d50:	f003 fce0 	bl	8017714 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8013d54:	687b      	ldr	r3, [r7, #4]
 8013d56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013d58:	2b00      	cmp	r3, #0
 8013d5a:	d04f      	beq.n	8013dfc <tcp_rexmit_fast+0xc4>
 8013d5c:	687b      	ldr	r3, [r7, #4]
 8013d5e:	8b5b      	ldrh	r3, [r3, #26]
 8013d60:	f003 0304 	and.w	r3, r3, #4
 8013d64:	2b00      	cmp	r3, #0
 8013d66:	d149      	bne.n	8013dfc <tcp_rexmit_fast+0xc4>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8013d68:	6878      	ldr	r0, [r7, #4]
 8013d6a:	f7ff ff79 	bl	8013c60 <tcp_rexmit>
 8013d6e:	4603      	mov	r3, r0
 8013d70:	2b00      	cmp	r3, #0
 8013d72:	d143      	bne.n	8013dfc <tcp_rexmit_fast+0xc4>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8013d74:	687b      	ldr	r3, [r7, #4]
 8013d76:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013d7a:	687b      	ldr	r3, [r7, #4]
 8013d7c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013d80:	429a      	cmp	r2, r3
 8013d82:	d208      	bcs.n	8013d96 <tcp_rexmit_fast+0x5e>
 8013d84:	687b      	ldr	r3, [r7, #4]
 8013d86:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013d8a:	2b00      	cmp	r3, #0
 8013d8c:	da00      	bge.n	8013d90 <tcp_rexmit_fast+0x58>
 8013d8e:	3301      	adds	r3, #1
 8013d90:	105b      	asrs	r3, r3, #1
 8013d92:	b29b      	uxth	r3, r3
 8013d94:	e007      	b.n	8013da6 <tcp_rexmit_fast+0x6e>
 8013d96:	687b      	ldr	r3, [r7, #4]
 8013d98:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013d9c:	2b00      	cmp	r3, #0
 8013d9e:	da00      	bge.n	8013da2 <tcp_rexmit_fast+0x6a>
 8013da0:	3301      	adds	r3, #1
 8013da2:	105b      	asrs	r3, r3, #1
 8013da4:	b29b      	uxth	r3, r3
 8013da6:	687a      	ldr	r2, [r7, #4]
 8013da8:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8013dac:	687b      	ldr	r3, [r7, #4]
 8013dae:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8013db2:	461a      	mov	r2, r3
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013db8:	005b      	lsls	r3, r3, #1
 8013dba:	429a      	cmp	r2, r3
 8013dbc:	d206      	bcs.n	8013dcc <tcp_rexmit_fast+0x94>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8013dbe:	687b      	ldr	r3, [r7, #4]
 8013dc0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013dc2:	005b      	lsls	r3, r3, #1
 8013dc4:	b29a      	uxth	r2, r3
 8013dc6:	687b      	ldr	r3, [r7, #4]
 8013dc8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8013dcc:	687b      	ldr	r3, [r7, #4]
 8013dce:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8013dd2:	687b      	ldr	r3, [r7, #4]
 8013dd4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013dd6:	4619      	mov	r1, r3
 8013dd8:	0049      	lsls	r1, r1, #1
 8013dda:	440b      	add	r3, r1
 8013ddc:	b29b      	uxth	r3, r3
 8013dde:	4413      	add	r3, r2
 8013de0:	b29a      	uxth	r2, r3
 8013de2:	687b      	ldr	r3, [r7, #4]
 8013de4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8013de8:	687b      	ldr	r3, [r7, #4]
 8013dea:	8b5b      	ldrh	r3, [r3, #26]
 8013dec:	f043 0304 	orr.w	r3, r3, #4
 8013df0:	b29a      	uxth	r2, r3
 8013df2:	687b      	ldr	r3, [r7, #4]
 8013df4:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8013df6:	687b      	ldr	r3, [r7, #4]
 8013df8:	2200      	movs	r2, #0
 8013dfa:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8013dfc:	bf00      	nop
 8013dfe:	3708      	adds	r7, #8
 8013e00:	46bd      	mov	sp, r7
 8013e02:	bd80      	pop	{r7, pc}
 8013e04:	0801aa90 	.word	0x0801aa90
 8013e08:	0801b148 	.word	0x0801b148
 8013e0c:	0801aae4 	.word	0x0801aae4

08013e10 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8013e10:	b580      	push	{r7, lr}
 8013e12:	b086      	sub	sp, #24
 8013e14:	af00      	add	r7, sp, #0
 8013e16:	60f8      	str	r0, [r7, #12]
 8013e18:	607b      	str	r3, [r7, #4]
 8013e1a:	460b      	mov	r3, r1
 8013e1c:	817b      	strh	r3, [r7, #10]
 8013e1e:	4613      	mov	r3, r2
 8013e20:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8013e22:	897a      	ldrh	r2, [r7, #10]
 8013e24:	893b      	ldrh	r3, [r7, #8]
 8013e26:	4413      	add	r3, r2
 8013e28:	b29b      	uxth	r3, r3
 8013e2a:	3314      	adds	r3, #20
 8013e2c:	b29b      	uxth	r3, r3
 8013e2e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013e32:	4619      	mov	r1, r3
 8013e34:	2022      	movs	r0, #34	; 0x22
 8013e36:	f7f9 fb3d 	bl	800d4b4 <pbuf_alloc>
 8013e3a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8013e3c:	697b      	ldr	r3, [r7, #20]
 8013e3e:	2b00      	cmp	r3, #0
 8013e40:	d04e      	beq.n	8013ee0 <tcp_output_alloc_header_common+0xd0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8013e42:	697b      	ldr	r3, [r7, #20]
 8013e44:	895b      	ldrh	r3, [r3, #10]
 8013e46:	461a      	mov	r2, r3
 8013e48:	897b      	ldrh	r3, [r7, #10]
 8013e4a:	3314      	adds	r3, #20
 8013e4c:	429a      	cmp	r2, r3
 8013e4e:	da06      	bge.n	8013e5e <tcp_output_alloc_header_common+0x4e>
 8013e50:	4b26      	ldr	r3, [pc, #152]	; (8013eec <tcp_output_alloc_header_common+0xdc>)
 8013e52:	f240 7224 	movw	r2, #1828	; 0x724
 8013e56:	4926      	ldr	r1, [pc, #152]	; (8013ef0 <tcp_output_alloc_header_common+0xe0>)
 8013e58:	4826      	ldr	r0, [pc, #152]	; (8013ef4 <tcp_output_alloc_header_common+0xe4>)
 8013e5a:	f003 fc5b 	bl	8017714 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8013e5e:	697b      	ldr	r3, [r7, #20]
 8013e60:	685b      	ldr	r3, [r3, #4]
 8013e62:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8013e64:	8c3b      	ldrh	r3, [r7, #32]
 8013e66:	4618      	mov	r0, r3
 8013e68:	f7f4 fed8 	bl	8008c1c <lwip_htons>
 8013e6c:	4603      	mov	r3, r0
 8013e6e:	461a      	mov	r2, r3
 8013e70:	693b      	ldr	r3, [r7, #16]
 8013e72:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8013e74:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013e76:	4618      	mov	r0, r3
 8013e78:	f7f4 fed0 	bl	8008c1c <lwip_htons>
 8013e7c:	4603      	mov	r3, r0
 8013e7e:	461a      	mov	r2, r3
 8013e80:	693b      	ldr	r3, [r7, #16]
 8013e82:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8013e84:	693b      	ldr	r3, [r7, #16]
 8013e86:	687a      	ldr	r2, [r7, #4]
 8013e88:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8013e8a:	68f8      	ldr	r0, [r7, #12]
 8013e8c:	f7f4 fedb 	bl	8008c46 <lwip_htonl>
 8013e90:	4602      	mov	r2, r0
 8013e92:	693b      	ldr	r3, [r7, #16]
 8013e94:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8013e96:	897b      	ldrh	r3, [r7, #10]
 8013e98:	089b      	lsrs	r3, r3, #2
 8013e9a:	b29b      	uxth	r3, r3
 8013e9c:	3305      	adds	r3, #5
 8013e9e:	b29b      	uxth	r3, r3
 8013ea0:	031b      	lsls	r3, r3, #12
 8013ea2:	b29a      	uxth	r2, r3
 8013ea4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013ea8:	b29b      	uxth	r3, r3
 8013eaa:	4313      	orrs	r3, r2
 8013eac:	b29b      	uxth	r3, r3
 8013eae:	4618      	mov	r0, r3
 8013eb0:	f7f4 feb4 	bl	8008c1c <lwip_htons>
 8013eb4:	4603      	mov	r3, r0
 8013eb6:	461a      	mov	r2, r3
 8013eb8:	693b      	ldr	r3, [r7, #16]
 8013eba:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8013ebc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013ebe:	4618      	mov	r0, r3
 8013ec0:	f7f4 feac 	bl	8008c1c <lwip_htons>
 8013ec4:	4603      	mov	r3, r0
 8013ec6:	461a      	mov	r2, r3
 8013ec8:	693b      	ldr	r3, [r7, #16]
 8013eca:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8013ecc:	693b      	ldr	r3, [r7, #16]
 8013ece:	2200      	movs	r2, #0
 8013ed0:	741a      	strb	r2, [r3, #16]
 8013ed2:	2200      	movs	r2, #0
 8013ed4:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8013ed6:	693b      	ldr	r3, [r7, #16]
 8013ed8:	2200      	movs	r2, #0
 8013eda:	749a      	strb	r2, [r3, #18]
 8013edc:	2200      	movs	r2, #0
 8013ede:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8013ee0:	697b      	ldr	r3, [r7, #20]
}
 8013ee2:	4618      	mov	r0, r3
 8013ee4:	3718      	adds	r7, #24
 8013ee6:	46bd      	mov	sp, r7
 8013ee8:	bd80      	pop	{r7, pc}
 8013eea:	bf00      	nop
 8013eec:	0801aa90 	.word	0x0801aa90
 8013ef0:	0801b168 	.word	0x0801b168
 8013ef4:	0801aae4 	.word	0x0801aae4

08013ef8 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8013ef8:	b5b0      	push	{r4, r5, r7, lr}
 8013efa:	b08a      	sub	sp, #40	; 0x28
 8013efc:	af04      	add	r7, sp, #16
 8013efe:	60f8      	str	r0, [r7, #12]
 8013f00:	607b      	str	r3, [r7, #4]
 8013f02:	460b      	mov	r3, r1
 8013f04:	817b      	strh	r3, [r7, #10]
 8013f06:	4613      	mov	r3, r2
 8013f08:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8013f0a:	68fb      	ldr	r3, [r7, #12]
 8013f0c:	2b00      	cmp	r3, #0
 8013f0e:	d106      	bne.n	8013f1e <tcp_output_alloc_header+0x26>
 8013f10:	4b15      	ldr	r3, [pc, #84]	; (8013f68 <tcp_output_alloc_header+0x70>)
 8013f12:	f240 7242 	movw	r2, #1858	; 0x742
 8013f16:	4915      	ldr	r1, [pc, #84]	; (8013f6c <tcp_output_alloc_header+0x74>)
 8013f18:	4815      	ldr	r0, [pc, #84]	; (8013f70 <tcp_output_alloc_header+0x78>)
 8013f1a:	f003 fbfb 	bl	8017714 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8013f1e:	68fb      	ldr	r3, [r7, #12]
 8013f20:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8013f22:	68fb      	ldr	r3, [r7, #12]
 8013f24:	8adb      	ldrh	r3, [r3, #22]
 8013f26:	68fa      	ldr	r2, [r7, #12]
 8013f28:	8b12      	ldrh	r2, [r2, #24]
 8013f2a:	68f9      	ldr	r1, [r7, #12]
 8013f2c:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8013f2e:	893d      	ldrh	r5, [r7, #8]
 8013f30:	897c      	ldrh	r4, [r7, #10]
 8013f32:	9103      	str	r1, [sp, #12]
 8013f34:	2110      	movs	r1, #16
 8013f36:	9102      	str	r1, [sp, #8]
 8013f38:	9201      	str	r2, [sp, #4]
 8013f3a:	9300      	str	r3, [sp, #0]
 8013f3c:	687b      	ldr	r3, [r7, #4]
 8013f3e:	462a      	mov	r2, r5
 8013f40:	4621      	mov	r1, r4
 8013f42:	f7ff ff65 	bl	8013e10 <tcp_output_alloc_header_common>
 8013f46:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8013f48:	697b      	ldr	r3, [r7, #20]
 8013f4a:	2b00      	cmp	r3, #0
 8013f4c:	d006      	beq.n	8013f5c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8013f4e:	68fb      	ldr	r3, [r7, #12]
 8013f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f52:	68fa      	ldr	r2, [r7, #12]
 8013f54:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8013f56:	441a      	add	r2, r3
 8013f58:	68fb      	ldr	r3, [r7, #12]
 8013f5a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8013f5c:	697b      	ldr	r3, [r7, #20]
}
 8013f5e:	4618      	mov	r0, r3
 8013f60:	3718      	adds	r7, #24
 8013f62:	46bd      	mov	sp, r7
 8013f64:	bdb0      	pop	{r4, r5, r7, pc}
 8013f66:	bf00      	nop
 8013f68:	0801aa90 	.word	0x0801aa90
 8013f6c:	0801b198 	.word	0x0801b198
 8013f70:	0801aae4 	.word	0x0801aae4

08013f74 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8013f74:	b580      	push	{r7, lr}
 8013f76:	b088      	sub	sp, #32
 8013f78:	af00      	add	r7, sp, #0
 8013f7a:	60f8      	str	r0, [r7, #12]
 8013f7c:	60b9      	str	r1, [r7, #8]
 8013f7e:	4611      	mov	r1, r2
 8013f80:	461a      	mov	r2, r3
 8013f82:	460b      	mov	r3, r1
 8013f84:	71fb      	strb	r3, [r7, #7]
 8013f86:	4613      	mov	r3, r2
 8013f88:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8013f8a:	2300      	movs	r3, #0
 8013f8c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8013f8e:	68bb      	ldr	r3, [r7, #8]
 8013f90:	2b00      	cmp	r3, #0
 8013f92:	d106      	bne.n	8013fa2 <tcp_output_fill_options+0x2e>
 8013f94:	4b15      	ldr	r3, [pc, #84]	; (8013fec <tcp_output_fill_options+0x78>)
 8013f96:	f240 7256 	movw	r2, #1878	; 0x756
 8013f9a:	4915      	ldr	r1, [pc, #84]	; (8013ff0 <tcp_output_fill_options+0x7c>)
 8013f9c:	4815      	ldr	r0, [pc, #84]	; (8013ff4 <tcp_output_fill_options+0x80>)
 8013f9e:	f003 fbb9 	bl	8017714 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8013fa2:	68bb      	ldr	r3, [r7, #8]
 8013fa4:	685b      	ldr	r3, [r3, #4]
 8013fa6:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8013fa8:	69bb      	ldr	r3, [r7, #24]
 8013faa:	3314      	adds	r3, #20
 8013fac:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8013fae:	69bb      	ldr	r3, [r7, #24]
 8013fb0:	f103 0214 	add.w	r2, r3, #20
 8013fb4:	8bfb      	ldrh	r3, [r7, #30]
 8013fb6:	009b      	lsls	r3, r3, #2
 8013fb8:	4619      	mov	r1, r3
 8013fba:	79fb      	ldrb	r3, [r7, #7]
 8013fbc:	f003 0301 	and.w	r3, r3, #1
 8013fc0:	2b00      	cmp	r3, #0
 8013fc2:	d001      	beq.n	8013fc8 <tcp_output_fill_options+0x54>
 8013fc4:	2304      	movs	r3, #4
 8013fc6:	e000      	b.n	8013fca <tcp_output_fill_options+0x56>
 8013fc8:	2300      	movs	r3, #0
 8013fca:	440b      	add	r3, r1
 8013fcc:	441a      	add	r2, r3
 8013fce:	697b      	ldr	r3, [r7, #20]
 8013fd0:	429a      	cmp	r2, r3
 8013fd2:	d006      	beq.n	8013fe2 <tcp_output_fill_options+0x6e>
 8013fd4:	4b05      	ldr	r3, [pc, #20]	; (8013fec <tcp_output_fill_options+0x78>)
 8013fd6:	f240 7275 	movw	r2, #1909	; 0x775
 8013fda:	4907      	ldr	r1, [pc, #28]	; (8013ff8 <tcp_output_fill_options+0x84>)
 8013fdc:	4805      	ldr	r0, [pc, #20]	; (8013ff4 <tcp_output_fill_options+0x80>)
 8013fde:	f003 fb99 	bl	8017714 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8013fe2:	bf00      	nop
 8013fe4:	3720      	adds	r7, #32
 8013fe6:	46bd      	mov	sp, r7
 8013fe8:	bd80      	pop	{r7, pc}
 8013fea:	bf00      	nop
 8013fec:	0801aa90 	.word	0x0801aa90
 8013ff0:	0801b1c0 	.word	0x0801b1c0
 8013ff4:	0801aae4 	.word	0x0801aae4
 8013ff8:	0801b0b8 	.word	0x0801b0b8

08013ffc <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8013ffc:	b580      	push	{r7, lr}
 8013ffe:	b08a      	sub	sp, #40	; 0x28
 8014000:	af04      	add	r7, sp, #16
 8014002:	60f8      	str	r0, [r7, #12]
 8014004:	60b9      	str	r1, [r7, #8]
 8014006:	607a      	str	r2, [r7, #4]
 8014008:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801400a:	68bb      	ldr	r3, [r7, #8]
 801400c:	2b00      	cmp	r3, #0
 801400e:	d106      	bne.n	801401e <tcp_output_control_segment+0x22>
 8014010:	4b1c      	ldr	r3, [pc, #112]	; (8014084 <tcp_output_control_segment+0x88>)
 8014012:	f240 7287 	movw	r2, #1927	; 0x787
 8014016:	491c      	ldr	r1, [pc, #112]	; (8014088 <tcp_output_control_segment+0x8c>)
 8014018:	481c      	ldr	r0, [pc, #112]	; (801408c <tcp_output_control_segment+0x90>)
 801401a:	f003 fb7b 	bl	8017714 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801401e:	683a      	ldr	r2, [r7, #0]
 8014020:	6879      	ldr	r1, [r7, #4]
 8014022:	68f8      	ldr	r0, [r7, #12]
 8014024:	f7fe fac8 	bl	80125b8 <tcp_route>
 8014028:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801402a:	693b      	ldr	r3, [r7, #16]
 801402c:	2b00      	cmp	r3, #0
 801402e:	d102      	bne.n	8014036 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8014030:	23fc      	movs	r3, #252	; 0xfc
 8014032:	75fb      	strb	r3, [r7, #23]
 8014034:	e01c      	b.n	8014070 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8014036:	68fb      	ldr	r3, [r7, #12]
 8014038:	2b00      	cmp	r3, #0
 801403a:	d006      	beq.n	801404a <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801403c:	68fb      	ldr	r3, [r7, #12]
 801403e:	7adb      	ldrb	r3, [r3, #11]
 8014040:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8014042:	68fb      	ldr	r3, [r7, #12]
 8014044:	7a9b      	ldrb	r3, [r3, #10]
 8014046:	757b      	strb	r3, [r7, #21]
 8014048:	e003      	b.n	8014052 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801404a:	23ff      	movs	r3, #255	; 0xff
 801404c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801404e:	2300      	movs	r3, #0
 8014050:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8014052:	7dba      	ldrb	r2, [r7, #22]
 8014054:	693b      	ldr	r3, [r7, #16]
 8014056:	9302      	str	r3, [sp, #8]
 8014058:	2306      	movs	r3, #6
 801405a:	9301      	str	r3, [sp, #4]
 801405c:	7d7b      	ldrb	r3, [r7, #21]
 801405e:	9300      	str	r3, [sp, #0]
 8014060:	4613      	mov	r3, r2
 8014062:	683a      	ldr	r2, [r7, #0]
 8014064:	6879      	ldr	r1, [r7, #4]
 8014066:	68b8      	ldr	r0, [r7, #8]
 8014068:	f7f7 f894 	bl	800b194 <ip4_output_if>
 801406c:	4603      	mov	r3, r0
 801406e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8014070:	68b8      	ldr	r0, [r7, #8]
 8014072:	f7f9 fd33 	bl	800dadc <pbuf_free>
  return err;
 8014076:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801407a:	4618      	mov	r0, r3
 801407c:	3718      	adds	r7, #24
 801407e:	46bd      	mov	sp, r7
 8014080:	bd80      	pop	{r7, pc}
 8014082:	bf00      	nop
 8014084:	0801aa90 	.word	0x0801aa90
 8014088:	0801b1e8 	.word	0x0801b1e8
 801408c:	0801aae4 	.word	0x0801aae4

08014090 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8014090:	b590      	push	{r4, r7, lr}
 8014092:	b08b      	sub	sp, #44	; 0x2c
 8014094:	af04      	add	r7, sp, #16
 8014096:	60f8      	str	r0, [r7, #12]
 8014098:	60b9      	str	r1, [r7, #8]
 801409a:	607a      	str	r2, [r7, #4]
 801409c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801409e:	683b      	ldr	r3, [r7, #0]
 80140a0:	2b00      	cmp	r3, #0
 80140a2:	d106      	bne.n	80140b2 <tcp_rst+0x22>
 80140a4:	4b1f      	ldr	r3, [pc, #124]	; (8014124 <tcp_rst+0x94>)
 80140a6:	f240 72c4 	movw	r2, #1988	; 0x7c4
 80140aa:	491f      	ldr	r1, [pc, #124]	; (8014128 <tcp_rst+0x98>)
 80140ac:	481f      	ldr	r0, [pc, #124]	; (801412c <tcp_rst+0x9c>)
 80140ae:	f003 fb31 	bl	8017714 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80140b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80140b4:	2b00      	cmp	r3, #0
 80140b6:	d106      	bne.n	80140c6 <tcp_rst+0x36>
 80140b8:	4b1a      	ldr	r3, [pc, #104]	; (8014124 <tcp_rst+0x94>)
 80140ba:	f240 72c5 	movw	r2, #1989	; 0x7c5
 80140be:	491c      	ldr	r1, [pc, #112]	; (8014130 <tcp_rst+0xa0>)
 80140c0:	481a      	ldr	r0, [pc, #104]	; (801412c <tcp_rst+0x9c>)
 80140c2:	f003 fb27 	bl	8017714 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80140c6:	2300      	movs	r3, #0
 80140c8:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80140ca:	f246 0308 	movw	r3, #24584	; 0x6008
 80140ce:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80140d0:	7dfb      	ldrb	r3, [r7, #23]
 80140d2:	b29c      	uxth	r4, r3
 80140d4:	68b8      	ldr	r0, [r7, #8]
 80140d6:	f7f4 fdb6 	bl	8008c46 <lwip_htonl>
 80140da:	4602      	mov	r2, r0
 80140dc:	8abb      	ldrh	r3, [r7, #20]
 80140de:	9303      	str	r3, [sp, #12]
 80140e0:	2314      	movs	r3, #20
 80140e2:	9302      	str	r3, [sp, #8]
 80140e4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80140e6:	9301      	str	r3, [sp, #4]
 80140e8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80140ea:	9300      	str	r3, [sp, #0]
 80140ec:	4613      	mov	r3, r2
 80140ee:	2200      	movs	r2, #0
 80140f0:	4621      	mov	r1, r4
 80140f2:	6878      	ldr	r0, [r7, #4]
 80140f4:	f7ff fe8c 	bl	8013e10 <tcp_output_alloc_header_common>
 80140f8:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80140fa:	693b      	ldr	r3, [r7, #16]
 80140fc:	2b00      	cmp	r3, #0
 80140fe:	d00c      	beq.n	801411a <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014100:	7dfb      	ldrb	r3, [r7, #23]
 8014102:	2200      	movs	r2, #0
 8014104:	6939      	ldr	r1, [r7, #16]
 8014106:	68f8      	ldr	r0, [r7, #12]
 8014108:	f7ff ff34 	bl	8013f74 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801410c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801410e:	683a      	ldr	r2, [r7, #0]
 8014110:	6939      	ldr	r1, [r7, #16]
 8014112:	68f8      	ldr	r0, [r7, #12]
 8014114:	f7ff ff72 	bl	8013ffc <tcp_output_control_segment>
 8014118:	e000      	b.n	801411c <tcp_rst+0x8c>
    return;
 801411a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801411c:	371c      	adds	r7, #28
 801411e:	46bd      	mov	sp, r7
 8014120:	bd90      	pop	{r4, r7, pc}
 8014122:	bf00      	nop
 8014124:	0801aa90 	.word	0x0801aa90
 8014128:	0801b214 	.word	0x0801b214
 801412c:	0801aae4 	.word	0x0801aae4
 8014130:	0801b230 	.word	0x0801b230

08014134 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8014134:	b590      	push	{r4, r7, lr}
 8014136:	b087      	sub	sp, #28
 8014138:	af00      	add	r7, sp, #0
 801413a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801413c:	2300      	movs	r3, #0
 801413e:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8014140:	2300      	movs	r3, #0
 8014142:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8014144:	687b      	ldr	r3, [r7, #4]
 8014146:	2b00      	cmp	r3, #0
 8014148:	d106      	bne.n	8014158 <tcp_send_empty_ack+0x24>
 801414a:	4b29      	ldr	r3, [pc, #164]	; (80141f0 <tcp_send_empty_ack+0xbc>)
 801414c:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8014150:	4928      	ldr	r1, [pc, #160]	; (80141f4 <tcp_send_empty_ack+0xc0>)
 8014152:	4829      	ldr	r0, [pc, #164]	; (80141f8 <tcp_send_empty_ack+0xc4>)
 8014154:	f003 fade 	bl	8017714 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8014158:	7dfb      	ldrb	r3, [r7, #23]
 801415a:	f003 0301 	and.w	r3, r3, #1
 801415e:	2b00      	cmp	r3, #0
 8014160:	d001      	beq.n	8014166 <tcp_send_empty_ack+0x32>
 8014162:	2304      	movs	r3, #4
 8014164:	e000      	b.n	8014168 <tcp_send_empty_ack+0x34>
 8014166:	2300      	movs	r3, #0
 8014168:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801416a:	7d7b      	ldrb	r3, [r7, #21]
 801416c:	b29c      	uxth	r4, r3
 801416e:	687b      	ldr	r3, [r7, #4]
 8014170:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014172:	4618      	mov	r0, r3
 8014174:	f7f4 fd67 	bl	8008c46 <lwip_htonl>
 8014178:	4603      	mov	r3, r0
 801417a:	2200      	movs	r2, #0
 801417c:	4621      	mov	r1, r4
 801417e:	6878      	ldr	r0, [r7, #4]
 8014180:	f7ff feba 	bl	8013ef8 <tcp_output_alloc_header>
 8014184:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014186:	693b      	ldr	r3, [r7, #16]
 8014188:	2b00      	cmp	r3, #0
 801418a:	d109      	bne.n	80141a0 <tcp_send_empty_ack+0x6c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801418c:	687b      	ldr	r3, [r7, #4]
 801418e:	8b5b      	ldrh	r3, [r3, #26]
 8014190:	f043 0303 	orr.w	r3, r3, #3
 8014194:	b29a      	uxth	r2, r3
 8014196:	687b      	ldr	r3, [r7, #4]
 8014198:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801419a:	f06f 0301 	mvn.w	r3, #1
 801419e:	e023      	b.n	80141e8 <tcp_send_empty_ack+0xb4>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80141a0:	7dbb      	ldrb	r3, [r7, #22]
 80141a2:	7dfa      	ldrb	r2, [r7, #23]
 80141a4:	6939      	ldr	r1, [r7, #16]
 80141a6:	6878      	ldr	r0, [r7, #4]
 80141a8:	f7ff fee4 	bl	8013f74 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80141ac:	687a      	ldr	r2, [r7, #4]
 80141ae:	687b      	ldr	r3, [r7, #4]
 80141b0:	3304      	adds	r3, #4
 80141b2:	6939      	ldr	r1, [r7, #16]
 80141b4:	6878      	ldr	r0, [r7, #4]
 80141b6:	f7ff ff21 	bl	8013ffc <tcp_output_control_segment>
 80141ba:	4603      	mov	r3, r0
 80141bc:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80141be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80141c2:	2b00      	cmp	r3, #0
 80141c4:	d007      	beq.n	80141d6 <tcp_send_empty_ack+0xa2>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80141c6:	687b      	ldr	r3, [r7, #4]
 80141c8:	8b5b      	ldrh	r3, [r3, #26]
 80141ca:	f043 0303 	orr.w	r3, r3, #3
 80141ce:	b29a      	uxth	r2, r3
 80141d0:	687b      	ldr	r3, [r7, #4]
 80141d2:	835a      	strh	r2, [r3, #26]
 80141d4:	e006      	b.n	80141e4 <tcp_send_empty_ack+0xb0>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80141d6:	687b      	ldr	r3, [r7, #4]
 80141d8:	8b5b      	ldrh	r3, [r3, #26]
 80141da:	f023 0303 	bic.w	r3, r3, #3
 80141de:	b29a      	uxth	r2, r3
 80141e0:	687b      	ldr	r3, [r7, #4]
 80141e2:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80141e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80141e8:	4618      	mov	r0, r3
 80141ea:	371c      	adds	r7, #28
 80141ec:	46bd      	mov	sp, r7
 80141ee:	bd90      	pop	{r4, r7, pc}
 80141f0:	0801aa90 	.word	0x0801aa90
 80141f4:	0801b24c 	.word	0x0801b24c
 80141f8:	0801aae4 	.word	0x0801aae4

080141fc <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80141fc:	b590      	push	{r4, r7, lr}
 80141fe:	b087      	sub	sp, #28
 8014200:	af00      	add	r7, sp, #0
 8014202:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014204:	2300      	movs	r3, #0
 8014206:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8014208:	687b      	ldr	r3, [r7, #4]
 801420a:	2b00      	cmp	r3, #0
 801420c:	d106      	bne.n	801421c <tcp_keepalive+0x20>
 801420e:	4b18      	ldr	r3, [pc, #96]	; (8014270 <tcp_keepalive+0x74>)
 8014210:	f640 0224 	movw	r2, #2084	; 0x824
 8014214:	4917      	ldr	r1, [pc, #92]	; (8014274 <tcp_keepalive+0x78>)
 8014216:	4818      	ldr	r0, [pc, #96]	; (8014278 <tcp_keepalive+0x7c>)
 8014218:	f003 fa7c 	bl	8017714 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801421c:	7dfb      	ldrb	r3, [r7, #23]
 801421e:	b29c      	uxth	r4, r3
 8014220:	687b      	ldr	r3, [r7, #4]
 8014222:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014224:	3b01      	subs	r3, #1
 8014226:	4618      	mov	r0, r3
 8014228:	f7f4 fd0d 	bl	8008c46 <lwip_htonl>
 801422c:	4603      	mov	r3, r0
 801422e:	2200      	movs	r2, #0
 8014230:	4621      	mov	r1, r4
 8014232:	6878      	ldr	r0, [r7, #4]
 8014234:	f7ff fe60 	bl	8013ef8 <tcp_output_alloc_header>
 8014238:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801423a:	693b      	ldr	r3, [r7, #16]
 801423c:	2b00      	cmp	r3, #0
 801423e:	d102      	bne.n	8014246 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8014240:	f04f 33ff 	mov.w	r3, #4294967295
 8014244:	e010      	b.n	8014268 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014246:	7dfb      	ldrb	r3, [r7, #23]
 8014248:	2200      	movs	r2, #0
 801424a:	6939      	ldr	r1, [r7, #16]
 801424c:	6878      	ldr	r0, [r7, #4]
 801424e:	f7ff fe91 	bl	8013f74 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014252:	687a      	ldr	r2, [r7, #4]
 8014254:	687b      	ldr	r3, [r7, #4]
 8014256:	3304      	adds	r3, #4
 8014258:	6939      	ldr	r1, [r7, #16]
 801425a:	6878      	ldr	r0, [r7, #4]
 801425c:	f7ff fece 	bl	8013ffc <tcp_output_control_segment>
 8014260:	4603      	mov	r3, r0
 8014262:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8014264:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014268:	4618      	mov	r0, r3
 801426a:	371c      	adds	r7, #28
 801426c:	46bd      	mov	sp, r7
 801426e:	bd90      	pop	{r4, r7, pc}
 8014270:	0801aa90 	.word	0x0801aa90
 8014274:	0801b26c 	.word	0x0801b26c
 8014278:	0801aae4 	.word	0x0801aae4

0801427c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801427c:	b590      	push	{r4, r7, lr}
 801427e:	b08b      	sub	sp, #44	; 0x2c
 8014280:	af00      	add	r7, sp, #0
 8014282:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014284:	2300      	movs	r3, #0
 8014286:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801428a:	687b      	ldr	r3, [r7, #4]
 801428c:	2b00      	cmp	r3, #0
 801428e:	d106      	bne.n	801429e <tcp_zero_window_probe+0x22>
 8014290:	4b4c      	ldr	r3, [pc, #304]	; (80143c4 <tcp_zero_window_probe+0x148>)
 8014292:	f640 024f 	movw	r2, #2127	; 0x84f
 8014296:	494c      	ldr	r1, [pc, #304]	; (80143c8 <tcp_zero_window_probe+0x14c>)
 8014298:	484c      	ldr	r0, [pc, #304]	; (80143cc <tcp_zero_window_probe+0x150>)
 801429a:	f003 fa3b 	bl	8017714 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801429e:	687b      	ldr	r3, [r7, #4]
 80142a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80142a2:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80142a4:	6a3b      	ldr	r3, [r7, #32]
 80142a6:	2b00      	cmp	r3, #0
 80142a8:	d101      	bne.n	80142ae <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80142aa:	2300      	movs	r3, #0
 80142ac:	e086      	b.n	80143bc <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80142ae:	687b      	ldr	r3, [r7, #4]
 80142b0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80142b4:	2bff      	cmp	r3, #255	; 0xff
 80142b6:	d007      	beq.n	80142c8 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 80142b8:	687b      	ldr	r3, [r7, #4]
 80142ba:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80142be:	3301      	adds	r3, #1
 80142c0:	b2da      	uxtb	r2, r3
 80142c2:	687b      	ldr	r3, [r7, #4]
 80142c4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80142c8:	6a3b      	ldr	r3, [r7, #32]
 80142ca:	68db      	ldr	r3, [r3, #12]
 80142cc:	899b      	ldrh	r3, [r3, #12]
 80142ce:	b29b      	uxth	r3, r3
 80142d0:	4618      	mov	r0, r3
 80142d2:	f7f4 fca3 	bl	8008c1c <lwip_htons>
 80142d6:	4603      	mov	r3, r0
 80142d8:	b2db      	uxtb	r3, r3
 80142da:	f003 0301 	and.w	r3, r3, #1
 80142de:	2b00      	cmp	r3, #0
 80142e0:	d005      	beq.n	80142ee <tcp_zero_window_probe+0x72>
 80142e2:	6a3b      	ldr	r3, [r7, #32]
 80142e4:	891b      	ldrh	r3, [r3, #8]
 80142e6:	2b00      	cmp	r3, #0
 80142e8:	d101      	bne.n	80142ee <tcp_zero_window_probe+0x72>
 80142ea:	2301      	movs	r3, #1
 80142ec:	e000      	b.n	80142f0 <tcp_zero_window_probe+0x74>
 80142ee:	2300      	movs	r3, #0
 80142f0:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80142f2:	7ffb      	ldrb	r3, [r7, #31]
 80142f4:	2b00      	cmp	r3, #0
 80142f6:	bf0c      	ite	eq
 80142f8:	2301      	moveq	r3, #1
 80142fa:	2300      	movne	r3, #0
 80142fc:	b2db      	uxtb	r3, r3
 80142fe:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8014300:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014304:	b299      	uxth	r1, r3
 8014306:	6a3b      	ldr	r3, [r7, #32]
 8014308:	68db      	ldr	r3, [r3, #12]
 801430a:	685b      	ldr	r3, [r3, #4]
 801430c:	8bba      	ldrh	r2, [r7, #28]
 801430e:	6878      	ldr	r0, [r7, #4]
 8014310:	f7ff fdf2 	bl	8013ef8 <tcp_output_alloc_header>
 8014314:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8014316:	69bb      	ldr	r3, [r7, #24]
 8014318:	2b00      	cmp	r3, #0
 801431a:	d102      	bne.n	8014322 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801431c:	f04f 33ff 	mov.w	r3, #4294967295
 8014320:	e04c      	b.n	80143bc <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8014322:	69bb      	ldr	r3, [r7, #24]
 8014324:	685b      	ldr	r3, [r3, #4]
 8014326:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8014328:	7ffb      	ldrb	r3, [r7, #31]
 801432a:	2b00      	cmp	r3, #0
 801432c:	d011      	beq.n	8014352 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801432e:	697b      	ldr	r3, [r7, #20]
 8014330:	899b      	ldrh	r3, [r3, #12]
 8014332:	b29b      	uxth	r3, r3
 8014334:	b21b      	sxth	r3, r3
 8014336:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801433a:	b21c      	sxth	r4, r3
 801433c:	2011      	movs	r0, #17
 801433e:	f7f4 fc6d 	bl	8008c1c <lwip_htons>
 8014342:	4603      	mov	r3, r0
 8014344:	b21b      	sxth	r3, r3
 8014346:	4323      	orrs	r3, r4
 8014348:	b21b      	sxth	r3, r3
 801434a:	b29a      	uxth	r2, r3
 801434c:	697b      	ldr	r3, [r7, #20]
 801434e:	819a      	strh	r2, [r3, #12]
 8014350:	e010      	b.n	8014374 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8014352:	69bb      	ldr	r3, [r7, #24]
 8014354:	685b      	ldr	r3, [r3, #4]
 8014356:	3314      	adds	r3, #20
 8014358:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801435a:	6a3b      	ldr	r3, [r7, #32]
 801435c:	6858      	ldr	r0, [r3, #4]
 801435e:	6a3b      	ldr	r3, [r7, #32]
 8014360:	685b      	ldr	r3, [r3, #4]
 8014362:	891a      	ldrh	r2, [r3, #8]
 8014364:	6a3b      	ldr	r3, [r7, #32]
 8014366:	891b      	ldrh	r3, [r3, #8]
 8014368:	1ad3      	subs	r3, r2, r3
 801436a:	b29b      	uxth	r3, r3
 801436c:	2201      	movs	r2, #1
 801436e:	6939      	ldr	r1, [r7, #16]
 8014370:	f7f9 fdba 	bl	800dee8 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8014374:	6a3b      	ldr	r3, [r7, #32]
 8014376:	68db      	ldr	r3, [r3, #12]
 8014378:	685b      	ldr	r3, [r3, #4]
 801437a:	4618      	mov	r0, r3
 801437c:	f7f4 fc63 	bl	8008c46 <lwip_htonl>
 8014380:	4603      	mov	r3, r0
 8014382:	3301      	adds	r3, #1
 8014384:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8014386:	687b      	ldr	r3, [r7, #4]
 8014388:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801438a:	68fb      	ldr	r3, [r7, #12]
 801438c:	1ad3      	subs	r3, r2, r3
 801438e:	2b00      	cmp	r3, #0
 8014390:	da02      	bge.n	8014398 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8014392:	687b      	ldr	r3, [r7, #4]
 8014394:	68fa      	ldr	r2, [r7, #12]
 8014396:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014398:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801439c:	2200      	movs	r2, #0
 801439e:	69b9      	ldr	r1, [r7, #24]
 80143a0:	6878      	ldr	r0, [r7, #4]
 80143a2:	f7ff fde7 	bl	8013f74 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80143a6:	687a      	ldr	r2, [r7, #4]
 80143a8:	687b      	ldr	r3, [r7, #4]
 80143aa:	3304      	adds	r3, #4
 80143ac:	69b9      	ldr	r1, [r7, #24]
 80143ae:	6878      	ldr	r0, [r7, #4]
 80143b0:	f7ff fe24 	bl	8013ffc <tcp_output_control_segment>
 80143b4:	4603      	mov	r3, r0
 80143b6:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80143b8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80143bc:	4618      	mov	r0, r3
 80143be:	372c      	adds	r7, #44	; 0x2c
 80143c0:	46bd      	mov	sp, r7
 80143c2:	bd90      	pop	{r4, r7, pc}
 80143c4:	0801aa90 	.word	0x0801aa90
 80143c8:	0801b288 	.word	0x0801b288
 80143cc:	0801aae4 	.word	0x0801aae4

080143d0 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80143d0:	b580      	push	{r7, lr}
 80143d2:	b082      	sub	sp, #8
 80143d4:	af00      	add	r7, sp, #0
 80143d6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80143d8:	f7fa f894 	bl	800e504 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80143dc:	4b0a      	ldr	r3, [pc, #40]	; (8014408 <tcpip_tcp_timer+0x38>)
 80143de:	681b      	ldr	r3, [r3, #0]
 80143e0:	2b00      	cmp	r3, #0
 80143e2:	d103      	bne.n	80143ec <tcpip_tcp_timer+0x1c>
 80143e4:	4b09      	ldr	r3, [pc, #36]	; (801440c <tcpip_tcp_timer+0x3c>)
 80143e6:	681b      	ldr	r3, [r3, #0]
 80143e8:	2b00      	cmp	r3, #0
 80143ea:	d005      	beq.n	80143f8 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80143ec:	2200      	movs	r2, #0
 80143ee:	4908      	ldr	r1, [pc, #32]	; (8014410 <tcpip_tcp_timer+0x40>)
 80143f0:	20fa      	movs	r0, #250	; 0xfa
 80143f2:	f000 f8e5 	bl	80145c0 <sys_timeout>
 80143f6:	e002      	b.n	80143fe <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80143f8:	4b06      	ldr	r3, [pc, #24]	; (8014414 <tcpip_tcp_timer+0x44>)
 80143fa:	2200      	movs	r2, #0
 80143fc:	601a      	str	r2, [r3, #0]
  }
}
 80143fe:	bf00      	nop
 8014400:	3708      	adds	r7, #8
 8014402:	46bd      	mov	sp, r7
 8014404:	bd80      	pop	{r7, pc}
 8014406:	bf00      	nop
 8014408:	20009624 	.word	0x20009624
 801440c:	20009634 	.word	0x20009634
 8014410:	080143d1 	.word	0x080143d1
 8014414:	20004580 	.word	0x20004580

08014418 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8014418:	b580      	push	{r7, lr}
 801441a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801441c:	4b0a      	ldr	r3, [pc, #40]	; (8014448 <tcp_timer_needed+0x30>)
 801441e:	681b      	ldr	r3, [r3, #0]
 8014420:	2b00      	cmp	r3, #0
 8014422:	d10f      	bne.n	8014444 <tcp_timer_needed+0x2c>
 8014424:	4b09      	ldr	r3, [pc, #36]	; (801444c <tcp_timer_needed+0x34>)
 8014426:	681b      	ldr	r3, [r3, #0]
 8014428:	2b00      	cmp	r3, #0
 801442a:	d103      	bne.n	8014434 <tcp_timer_needed+0x1c>
 801442c:	4b08      	ldr	r3, [pc, #32]	; (8014450 <tcp_timer_needed+0x38>)
 801442e:	681b      	ldr	r3, [r3, #0]
 8014430:	2b00      	cmp	r3, #0
 8014432:	d007      	beq.n	8014444 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8014434:	4b04      	ldr	r3, [pc, #16]	; (8014448 <tcp_timer_needed+0x30>)
 8014436:	2201      	movs	r2, #1
 8014438:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801443a:	2200      	movs	r2, #0
 801443c:	4905      	ldr	r1, [pc, #20]	; (8014454 <tcp_timer_needed+0x3c>)
 801443e:	20fa      	movs	r0, #250	; 0xfa
 8014440:	f000 f8be 	bl	80145c0 <sys_timeout>
  }
}
 8014444:	bf00      	nop
 8014446:	bd80      	pop	{r7, pc}
 8014448:	20004580 	.word	0x20004580
 801444c:	20009624 	.word	0x20009624
 8014450:	20009634 	.word	0x20009634
 8014454:	080143d1 	.word	0x080143d1

08014458 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8014458:	b580      	push	{r7, lr}
 801445a:	b086      	sub	sp, #24
 801445c:	af00      	add	r7, sp, #0
 801445e:	60f8      	str	r0, [r7, #12]
 8014460:	60b9      	str	r1, [r7, #8]
 8014462:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8014464:	200a      	movs	r0, #10
 8014466:	f7f8 fc13 	bl	800cc90 <memp_malloc>
 801446a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801446c:	693b      	ldr	r3, [r7, #16]
 801446e:	2b00      	cmp	r3, #0
 8014470:	d109      	bne.n	8014486 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8014472:	693b      	ldr	r3, [r7, #16]
 8014474:	2b00      	cmp	r3, #0
 8014476:	d149      	bne.n	801450c <sys_timeout_abs+0xb4>
 8014478:	4b26      	ldr	r3, [pc, #152]	; (8014514 <sys_timeout_abs+0xbc>)
 801447a:	22be      	movs	r2, #190	; 0xbe
 801447c:	4926      	ldr	r1, [pc, #152]	; (8014518 <sys_timeout_abs+0xc0>)
 801447e:	4827      	ldr	r0, [pc, #156]	; (801451c <sys_timeout_abs+0xc4>)
 8014480:	f003 f948 	bl	8017714 <iprintf>
    return;
 8014484:	e042      	b.n	801450c <sys_timeout_abs+0xb4>
  }

  timeout->next = NULL;
 8014486:	693b      	ldr	r3, [r7, #16]
 8014488:	2200      	movs	r2, #0
 801448a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801448c:	693b      	ldr	r3, [r7, #16]
 801448e:	68ba      	ldr	r2, [r7, #8]
 8014490:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8014492:	693b      	ldr	r3, [r7, #16]
 8014494:	687a      	ldr	r2, [r7, #4]
 8014496:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8014498:	693b      	ldr	r3, [r7, #16]
 801449a:	68fa      	ldr	r2, [r7, #12]
 801449c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801449e:	4b20      	ldr	r3, [pc, #128]	; (8014520 <sys_timeout_abs+0xc8>)
 80144a0:	681b      	ldr	r3, [r3, #0]
 80144a2:	2b00      	cmp	r3, #0
 80144a4:	d103      	bne.n	80144ae <sys_timeout_abs+0x56>
    next_timeout = timeout;
 80144a6:	4a1e      	ldr	r2, [pc, #120]	; (8014520 <sys_timeout_abs+0xc8>)
 80144a8:	693b      	ldr	r3, [r7, #16]
 80144aa:	6013      	str	r3, [r2, #0]
    return;
 80144ac:	e02f      	b.n	801450e <sys_timeout_abs+0xb6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80144ae:	693b      	ldr	r3, [r7, #16]
 80144b0:	685a      	ldr	r2, [r3, #4]
 80144b2:	4b1b      	ldr	r3, [pc, #108]	; (8014520 <sys_timeout_abs+0xc8>)
 80144b4:	681b      	ldr	r3, [r3, #0]
 80144b6:	685b      	ldr	r3, [r3, #4]
 80144b8:	1ad3      	subs	r3, r2, r3
 80144ba:	2b00      	cmp	r3, #0
 80144bc:	da07      	bge.n	80144ce <sys_timeout_abs+0x76>
    timeout->next = next_timeout;
 80144be:	4b18      	ldr	r3, [pc, #96]	; (8014520 <sys_timeout_abs+0xc8>)
 80144c0:	681a      	ldr	r2, [r3, #0]
 80144c2:	693b      	ldr	r3, [r7, #16]
 80144c4:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80144c6:	4a16      	ldr	r2, [pc, #88]	; (8014520 <sys_timeout_abs+0xc8>)
 80144c8:	693b      	ldr	r3, [r7, #16]
 80144ca:	6013      	str	r3, [r2, #0]
 80144cc:	e01f      	b.n	801450e <sys_timeout_abs+0xb6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80144ce:	4b14      	ldr	r3, [pc, #80]	; (8014520 <sys_timeout_abs+0xc8>)
 80144d0:	681b      	ldr	r3, [r3, #0]
 80144d2:	617b      	str	r3, [r7, #20]
 80144d4:	e016      	b.n	8014504 <sys_timeout_abs+0xac>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80144d6:	697b      	ldr	r3, [r7, #20]
 80144d8:	681b      	ldr	r3, [r3, #0]
 80144da:	2b00      	cmp	r3, #0
 80144dc:	d007      	beq.n	80144ee <sys_timeout_abs+0x96>
 80144de:	693b      	ldr	r3, [r7, #16]
 80144e0:	685a      	ldr	r2, [r3, #4]
 80144e2:	697b      	ldr	r3, [r7, #20]
 80144e4:	681b      	ldr	r3, [r3, #0]
 80144e6:	685b      	ldr	r3, [r3, #4]
 80144e8:	1ad3      	subs	r3, r2, r3
 80144ea:	2b00      	cmp	r3, #0
 80144ec:	da07      	bge.n	80144fe <sys_timeout_abs+0xa6>
        timeout->next = t->next;
 80144ee:	697b      	ldr	r3, [r7, #20]
 80144f0:	681a      	ldr	r2, [r3, #0]
 80144f2:	693b      	ldr	r3, [r7, #16]
 80144f4:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80144f6:	697b      	ldr	r3, [r7, #20]
 80144f8:	693a      	ldr	r2, [r7, #16]
 80144fa:	601a      	str	r2, [r3, #0]
        break;
 80144fc:	e007      	b.n	801450e <sys_timeout_abs+0xb6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80144fe:	697b      	ldr	r3, [r7, #20]
 8014500:	681b      	ldr	r3, [r3, #0]
 8014502:	617b      	str	r3, [r7, #20]
 8014504:	697b      	ldr	r3, [r7, #20]
 8014506:	2b00      	cmp	r3, #0
 8014508:	d1e5      	bne.n	80144d6 <sys_timeout_abs+0x7e>
 801450a:	e000      	b.n	801450e <sys_timeout_abs+0xb6>
    return;
 801450c:	bf00      	nop
      }
    }
  }
}
 801450e:	3718      	adds	r7, #24
 8014510:	46bd      	mov	sp, r7
 8014512:	bd80      	pop	{r7, pc}
 8014514:	0801b2ac 	.word	0x0801b2ac
 8014518:	0801b2e0 	.word	0x0801b2e0
 801451c:	0801b320 	.word	0x0801b320
 8014520:	20004578 	.word	0x20004578

08014524 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8014524:	b580      	push	{r7, lr}
 8014526:	b086      	sub	sp, #24
 8014528:	af00      	add	r7, sp, #0
 801452a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801452c:	687b      	ldr	r3, [r7, #4]
 801452e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8014530:	697b      	ldr	r3, [r7, #20]
 8014532:	685b      	ldr	r3, [r3, #4]
 8014534:	4798      	blx	r3

  now = sys_now();
 8014536:	f001 facf 	bl	8015ad8 <sys_now>
 801453a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801453c:	697b      	ldr	r3, [r7, #20]
 801453e:	681a      	ldr	r2, [r3, #0]
 8014540:	4b0d      	ldr	r3, [pc, #52]	; (8014578 <lwip_cyclic_timer+0x54>)
 8014542:	681b      	ldr	r3, [r3, #0]
 8014544:	4413      	add	r3, r2
 8014546:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8014548:	68fa      	ldr	r2, [r7, #12]
 801454a:	693b      	ldr	r3, [r7, #16]
 801454c:	1ad3      	subs	r3, r2, r3
 801454e:	2b00      	cmp	r3, #0
 8014550:	da09      	bge.n	8014566 <lwip_cyclic_timer+0x42>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8014552:	697b      	ldr	r3, [r7, #20]
 8014554:	681a      	ldr	r2, [r3, #0]
 8014556:	693b      	ldr	r3, [r7, #16]
 8014558:	4413      	add	r3, r2
 801455a:	687a      	ldr	r2, [r7, #4]
 801455c:	4907      	ldr	r1, [pc, #28]	; (801457c <lwip_cyclic_timer+0x58>)
 801455e:	4618      	mov	r0, r3
 8014560:	f7ff ff7a 	bl	8014458 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8014564:	e004      	b.n	8014570 <lwip_cyclic_timer+0x4c>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8014566:	687a      	ldr	r2, [r7, #4]
 8014568:	4904      	ldr	r1, [pc, #16]	; (801457c <lwip_cyclic_timer+0x58>)
 801456a:	68f8      	ldr	r0, [r7, #12]
 801456c:	f7ff ff74 	bl	8014458 <sys_timeout_abs>
}
 8014570:	bf00      	nop
 8014572:	3718      	adds	r7, #24
 8014574:	46bd      	mov	sp, r7
 8014576:	bd80      	pop	{r7, pc}
 8014578:	2000457c 	.word	0x2000457c
 801457c:	08014525 	.word	0x08014525

08014580 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8014580:	b580      	push	{r7, lr}
 8014582:	b082      	sub	sp, #8
 8014584:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8014586:	2301      	movs	r3, #1
 8014588:	607b      	str	r3, [r7, #4]
 801458a:	e00e      	b.n	80145aa <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801458c:	4a0a      	ldr	r2, [pc, #40]	; (80145b8 <sys_timeouts_init+0x38>)
 801458e:	687b      	ldr	r3, [r7, #4]
 8014590:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8014594:	687b      	ldr	r3, [r7, #4]
 8014596:	00db      	lsls	r3, r3, #3
 8014598:	4a07      	ldr	r2, [pc, #28]	; (80145b8 <sys_timeouts_init+0x38>)
 801459a:	4413      	add	r3, r2
 801459c:	461a      	mov	r2, r3
 801459e:	4907      	ldr	r1, [pc, #28]	; (80145bc <sys_timeouts_init+0x3c>)
 80145a0:	f000 f80e 	bl	80145c0 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80145a4:	687b      	ldr	r3, [r7, #4]
 80145a6:	3301      	adds	r3, #1
 80145a8:	607b      	str	r3, [r7, #4]
 80145aa:	687b      	ldr	r3, [r7, #4]
 80145ac:	2b03      	cmp	r3, #3
 80145ae:	d9ed      	bls.n	801458c <sys_timeouts_init+0xc>
  }
}
 80145b0:	bf00      	nop
 80145b2:	3708      	adds	r7, #8
 80145b4:	46bd      	mov	sp, r7
 80145b6:	bd80      	pop	{r7, pc}
 80145b8:	0801bba8 	.word	0x0801bba8
 80145bc:	08014525 	.word	0x08014525

080145c0 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80145c0:	b580      	push	{r7, lr}
 80145c2:	b086      	sub	sp, #24
 80145c4:	af00      	add	r7, sp, #0
 80145c6:	60f8      	str	r0, [r7, #12]
 80145c8:	60b9      	str	r1, [r7, #8]
 80145ca:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80145cc:	68fb      	ldr	r3, [r7, #12]
 80145ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80145d2:	d306      	bcc.n	80145e2 <sys_timeout+0x22>
 80145d4:	4b0a      	ldr	r3, [pc, #40]	; (8014600 <sys_timeout+0x40>)
 80145d6:	f240 1229 	movw	r2, #297	; 0x129
 80145da:	490a      	ldr	r1, [pc, #40]	; (8014604 <sys_timeout+0x44>)
 80145dc:	480a      	ldr	r0, [pc, #40]	; (8014608 <sys_timeout+0x48>)
 80145de:	f003 f899 	bl	8017714 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80145e2:	f001 fa79 	bl	8015ad8 <sys_now>
 80145e6:	4602      	mov	r2, r0
 80145e8:	68fb      	ldr	r3, [r7, #12]
 80145ea:	4413      	add	r3, r2
 80145ec:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80145ee:	687a      	ldr	r2, [r7, #4]
 80145f0:	68b9      	ldr	r1, [r7, #8]
 80145f2:	6978      	ldr	r0, [r7, #20]
 80145f4:	f7ff ff30 	bl	8014458 <sys_timeout_abs>
#endif
}
 80145f8:	bf00      	nop
 80145fa:	3718      	adds	r7, #24
 80145fc:	46bd      	mov	sp, r7
 80145fe:	bd80      	pop	{r7, pc}
 8014600:	0801b2ac 	.word	0x0801b2ac
 8014604:	0801b348 	.word	0x0801b348
 8014608:	0801b320 	.word	0x0801b320

0801460c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801460c:	b580      	push	{r7, lr}
 801460e:	b084      	sub	sp, #16
 8014610:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8014612:	f001 fa61 	bl	8015ad8 <sys_now>
 8014616:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8014618:	4b15      	ldr	r3, [pc, #84]	; (8014670 <sys_check_timeouts+0x64>)
 801461a:	681b      	ldr	r3, [r3, #0]
 801461c:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801461e:	68bb      	ldr	r3, [r7, #8]
 8014620:	2b00      	cmp	r3, #0
 8014622:	d01e      	beq.n	8014662 <sys_check_timeouts+0x56>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8014624:	68bb      	ldr	r3, [r7, #8]
 8014626:	685b      	ldr	r3, [r3, #4]
 8014628:	68fa      	ldr	r2, [r7, #12]
 801462a:	1ad3      	subs	r3, r2, r3
 801462c:	2b00      	cmp	r3, #0
 801462e:	db1a      	blt.n	8014666 <sys_check_timeouts+0x5a>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8014630:	68bb      	ldr	r3, [r7, #8]
 8014632:	681b      	ldr	r3, [r3, #0]
 8014634:	4a0e      	ldr	r2, [pc, #56]	; (8014670 <sys_check_timeouts+0x64>)
 8014636:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8014638:	68bb      	ldr	r3, [r7, #8]
 801463a:	689b      	ldr	r3, [r3, #8]
 801463c:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801463e:	68bb      	ldr	r3, [r7, #8]
 8014640:	68db      	ldr	r3, [r3, #12]
 8014642:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8014644:	68bb      	ldr	r3, [r7, #8]
 8014646:	685b      	ldr	r3, [r3, #4]
 8014648:	4a0a      	ldr	r2, [pc, #40]	; (8014674 <sys_check_timeouts+0x68>)
 801464a:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801464c:	68b9      	ldr	r1, [r7, #8]
 801464e:	200a      	movs	r0, #10
 8014650:	f7f8 fb70 	bl	800cd34 <memp_free>
    if (handler != NULL) {
 8014654:	687b      	ldr	r3, [r7, #4]
 8014656:	2b00      	cmp	r3, #0
 8014658:	d0de      	beq.n	8014618 <sys_check_timeouts+0xc>
      handler(arg);
 801465a:	687b      	ldr	r3, [r7, #4]
 801465c:	6838      	ldr	r0, [r7, #0]
 801465e:	4798      	blx	r3
  do {
 8014660:	e7da      	b.n	8014618 <sys_check_timeouts+0xc>
      return;
 8014662:	bf00      	nop
 8014664:	e000      	b.n	8014668 <sys_check_timeouts+0x5c>
      return;
 8014666:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8014668:	3710      	adds	r7, #16
 801466a:	46bd      	mov	sp, r7
 801466c:	bd80      	pop	{r7, pc}
 801466e:	bf00      	nop
 8014670:	20004578 	.word	0x20004578
 8014674:	2000457c 	.word	0x2000457c

08014678 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8014678:	b580      	push	{r7, lr}
 801467a:	b082      	sub	sp, #8
 801467c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801467e:	4b14      	ldr	r3, [pc, #80]	; (80146d0 <sys_timeouts_sleeptime+0x58>)
 8014680:	681b      	ldr	r3, [r3, #0]
 8014682:	2b00      	cmp	r3, #0
 8014684:	d102      	bne.n	801468c <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8014686:	f04f 33ff 	mov.w	r3, #4294967295
 801468a:	e01c      	b.n	80146c6 <sys_timeouts_sleeptime+0x4e>
  }
  now = sys_now();
 801468c:	f001 fa24 	bl	8015ad8 <sys_now>
 8014690:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8014692:	4b0f      	ldr	r3, [pc, #60]	; (80146d0 <sys_timeouts_sleeptime+0x58>)
 8014694:	681b      	ldr	r3, [r3, #0]
 8014696:	685a      	ldr	r2, [r3, #4]
 8014698:	687b      	ldr	r3, [r7, #4]
 801469a:	1ad3      	subs	r3, r2, r3
 801469c:	2b00      	cmp	r3, #0
 801469e:	da01      	bge.n	80146a4 <sys_timeouts_sleeptime+0x2c>
    return 0;
 80146a0:	2300      	movs	r3, #0
 80146a2:	e010      	b.n	80146c6 <sys_timeouts_sleeptime+0x4e>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 80146a4:	4b0a      	ldr	r3, [pc, #40]	; (80146d0 <sys_timeouts_sleeptime+0x58>)
 80146a6:	681b      	ldr	r3, [r3, #0]
 80146a8:	685a      	ldr	r2, [r3, #4]
 80146aa:	687b      	ldr	r3, [r7, #4]
 80146ac:	1ad3      	subs	r3, r2, r3
 80146ae:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 80146b0:	683b      	ldr	r3, [r7, #0]
 80146b2:	2b00      	cmp	r3, #0
 80146b4:	da06      	bge.n	80146c4 <sys_timeouts_sleeptime+0x4c>
 80146b6:	4b07      	ldr	r3, [pc, #28]	; (80146d4 <sys_timeouts_sleeptime+0x5c>)
 80146b8:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80146bc:	4906      	ldr	r1, [pc, #24]	; (80146d8 <sys_timeouts_sleeptime+0x60>)
 80146be:	4807      	ldr	r0, [pc, #28]	; (80146dc <sys_timeouts_sleeptime+0x64>)
 80146c0:	f003 f828 	bl	8017714 <iprintf>
    return ret;
 80146c4:	683b      	ldr	r3, [r7, #0]
  }
}
 80146c6:	4618      	mov	r0, r3
 80146c8:	3708      	adds	r7, #8
 80146ca:	46bd      	mov	sp, r7
 80146cc:	bd80      	pop	{r7, pc}
 80146ce:	bf00      	nop
 80146d0:	20004578 	.word	0x20004578
 80146d4:	0801b2ac 	.word	0x0801b2ac
 80146d8:	0801b380 	.word	0x0801b380
 80146dc:	0801b320 	.word	0x0801b320

080146e0 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80146e0:	b580      	push	{r7, lr}
 80146e2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80146e4:	f003 f82e 	bl	8017744 <rand>
 80146e8:	4603      	mov	r3, r0
 80146ea:	b29b      	uxth	r3, r3
 80146ec:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80146f0:	b29b      	uxth	r3, r3
 80146f2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80146f6:	b29a      	uxth	r2, r3
 80146f8:	4b01      	ldr	r3, [pc, #4]	; (8014700 <udp_init+0x20>)
 80146fa:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80146fc:	bf00      	nop
 80146fe:	bd80      	pop	{r7, pc}
 8014700:	20000014 	.word	0x20000014

08014704 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8014704:	b480      	push	{r7}
 8014706:	b083      	sub	sp, #12
 8014708:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801470a:	2300      	movs	r3, #0
 801470c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801470e:	4b17      	ldr	r3, [pc, #92]	; (801476c <udp_new_port+0x68>)
 8014710:	881b      	ldrh	r3, [r3, #0]
 8014712:	1c5a      	adds	r2, r3, #1
 8014714:	b291      	uxth	r1, r2
 8014716:	4a15      	ldr	r2, [pc, #84]	; (801476c <udp_new_port+0x68>)
 8014718:	8011      	strh	r1, [r2, #0]
 801471a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801471e:	4293      	cmp	r3, r2
 8014720:	d103      	bne.n	801472a <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8014722:	4b12      	ldr	r3, [pc, #72]	; (801476c <udp_new_port+0x68>)
 8014724:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8014728:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801472a:	4b11      	ldr	r3, [pc, #68]	; (8014770 <udp_new_port+0x6c>)
 801472c:	681b      	ldr	r3, [r3, #0]
 801472e:	603b      	str	r3, [r7, #0]
 8014730:	e011      	b.n	8014756 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8014732:	683b      	ldr	r3, [r7, #0]
 8014734:	8a5a      	ldrh	r2, [r3, #18]
 8014736:	4b0d      	ldr	r3, [pc, #52]	; (801476c <udp_new_port+0x68>)
 8014738:	881b      	ldrh	r3, [r3, #0]
 801473a:	429a      	cmp	r2, r3
 801473c:	d108      	bne.n	8014750 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801473e:	88fb      	ldrh	r3, [r7, #6]
 8014740:	3301      	adds	r3, #1
 8014742:	80fb      	strh	r3, [r7, #6]
 8014744:	88fb      	ldrh	r3, [r7, #6]
 8014746:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801474a:	d3e0      	bcc.n	801470e <udp_new_port+0xa>
        return 0;
 801474c:	2300      	movs	r3, #0
 801474e:	e007      	b.n	8014760 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014750:	683b      	ldr	r3, [r7, #0]
 8014752:	68db      	ldr	r3, [r3, #12]
 8014754:	603b      	str	r3, [r7, #0]
 8014756:	683b      	ldr	r3, [r7, #0]
 8014758:	2b00      	cmp	r3, #0
 801475a:	d1ea      	bne.n	8014732 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801475c:	4b03      	ldr	r3, [pc, #12]	; (801476c <udp_new_port+0x68>)
 801475e:	881b      	ldrh	r3, [r3, #0]
}
 8014760:	4618      	mov	r0, r3
 8014762:	370c      	adds	r7, #12
 8014764:	46bd      	mov	sp, r7
 8014766:	f85d 7b04 	ldr.w	r7, [sp], #4
 801476a:	4770      	bx	lr
 801476c:	20000014 	.word	0x20000014
 8014770:	2000963c 	.word	0x2000963c

08014774 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8014774:	b580      	push	{r7, lr}
 8014776:	b084      	sub	sp, #16
 8014778:	af00      	add	r7, sp, #0
 801477a:	60f8      	str	r0, [r7, #12]
 801477c:	60b9      	str	r1, [r7, #8]
 801477e:	4613      	mov	r3, r2
 8014780:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8014782:	68fb      	ldr	r3, [r7, #12]
 8014784:	2b00      	cmp	r3, #0
 8014786:	d105      	bne.n	8014794 <udp_input_local_match+0x20>
 8014788:	4b27      	ldr	r3, [pc, #156]	; (8014828 <udp_input_local_match+0xb4>)
 801478a:	2287      	movs	r2, #135	; 0x87
 801478c:	4927      	ldr	r1, [pc, #156]	; (801482c <udp_input_local_match+0xb8>)
 801478e:	4828      	ldr	r0, [pc, #160]	; (8014830 <udp_input_local_match+0xbc>)
 8014790:	f002 ffc0 	bl	8017714 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8014794:	68bb      	ldr	r3, [r7, #8]
 8014796:	2b00      	cmp	r3, #0
 8014798:	d105      	bne.n	80147a6 <udp_input_local_match+0x32>
 801479a:	4b23      	ldr	r3, [pc, #140]	; (8014828 <udp_input_local_match+0xb4>)
 801479c:	2288      	movs	r2, #136	; 0x88
 801479e:	4925      	ldr	r1, [pc, #148]	; (8014834 <udp_input_local_match+0xc0>)
 80147a0:	4823      	ldr	r0, [pc, #140]	; (8014830 <udp_input_local_match+0xbc>)
 80147a2:	f002 ffb7 	bl	8017714 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80147a6:	68fb      	ldr	r3, [r7, #12]
 80147a8:	7a1b      	ldrb	r3, [r3, #8]
 80147aa:	2b00      	cmp	r3, #0
 80147ac:	d00b      	beq.n	80147c6 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80147ae:	68fb      	ldr	r3, [r7, #12]
 80147b0:	7a1a      	ldrb	r2, [r3, #8]
 80147b2:	4b21      	ldr	r3, [pc, #132]	; (8014838 <udp_input_local_match+0xc4>)
 80147b4:	685b      	ldr	r3, [r3, #4]
 80147b6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80147ba:	3301      	adds	r3, #1
 80147bc:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80147be:	429a      	cmp	r2, r3
 80147c0:	d001      	beq.n	80147c6 <udp_input_local_match+0x52>
    return 0;
 80147c2:	2300      	movs	r3, #0
 80147c4:	e02b      	b.n	801481e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80147c6:	79fb      	ldrb	r3, [r7, #7]
 80147c8:	2b00      	cmp	r3, #0
 80147ca:	d018      	beq.n	80147fe <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80147cc:	68fb      	ldr	r3, [r7, #12]
 80147ce:	2b00      	cmp	r3, #0
 80147d0:	d013      	beq.n	80147fa <udp_input_local_match+0x86>
 80147d2:	68fb      	ldr	r3, [r7, #12]
 80147d4:	681b      	ldr	r3, [r3, #0]
 80147d6:	2b00      	cmp	r3, #0
 80147d8:	d00f      	beq.n	80147fa <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80147da:	4b17      	ldr	r3, [pc, #92]	; (8014838 <udp_input_local_match+0xc4>)
 80147dc:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80147de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80147e2:	d00a      	beq.n	80147fa <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80147e4:	68fb      	ldr	r3, [r7, #12]
 80147e6:	681a      	ldr	r2, [r3, #0]
 80147e8:	4b13      	ldr	r3, [pc, #76]	; (8014838 <udp_input_local_match+0xc4>)
 80147ea:	695b      	ldr	r3, [r3, #20]
 80147ec:	405a      	eors	r2, r3
 80147ee:	68bb      	ldr	r3, [r7, #8]
 80147f0:	3308      	adds	r3, #8
 80147f2:	681b      	ldr	r3, [r3, #0]
 80147f4:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80147f6:	2b00      	cmp	r3, #0
 80147f8:	d110      	bne.n	801481c <udp_input_local_match+0xa8>
          return 1;
 80147fa:	2301      	movs	r3, #1
 80147fc:	e00f      	b.n	801481e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80147fe:	68fb      	ldr	r3, [r7, #12]
 8014800:	2b00      	cmp	r3, #0
 8014802:	d009      	beq.n	8014818 <udp_input_local_match+0xa4>
 8014804:	68fb      	ldr	r3, [r7, #12]
 8014806:	681b      	ldr	r3, [r3, #0]
 8014808:	2b00      	cmp	r3, #0
 801480a:	d005      	beq.n	8014818 <udp_input_local_match+0xa4>
 801480c:	68fb      	ldr	r3, [r7, #12]
 801480e:	681a      	ldr	r2, [r3, #0]
 8014810:	4b09      	ldr	r3, [pc, #36]	; (8014838 <udp_input_local_match+0xc4>)
 8014812:	695b      	ldr	r3, [r3, #20]
 8014814:	429a      	cmp	r2, r3
 8014816:	d101      	bne.n	801481c <udp_input_local_match+0xa8>
        return 1;
 8014818:	2301      	movs	r3, #1
 801481a:	e000      	b.n	801481e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801481c:	2300      	movs	r3, #0
}
 801481e:	4618      	mov	r0, r3
 8014820:	3710      	adds	r7, #16
 8014822:	46bd      	mov	sp, r7
 8014824:	bd80      	pop	{r7, pc}
 8014826:	bf00      	nop
 8014828:	0801b394 	.word	0x0801b394
 801482c:	0801b3c4 	.word	0x0801b3c4
 8014830:	0801b3e8 	.word	0x0801b3e8
 8014834:	0801b410 	.word	0x0801b410
 8014838:	20004814 	.word	0x20004814

0801483c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801483c:	b590      	push	{r4, r7, lr}
 801483e:	b08d      	sub	sp, #52	; 0x34
 8014840:	af02      	add	r7, sp, #8
 8014842:	6078      	str	r0, [r7, #4]
 8014844:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8014846:	2300      	movs	r3, #0
 8014848:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801484a:	687b      	ldr	r3, [r7, #4]
 801484c:	2b00      	cmp	r3, #0
 801484e:	d105      	bne.n	801485c <udp_input+0x20>
 8014850:	4b7c      	ldr	r3, [pc, #496]	; (8014a44 <udp_input+0x208>)
 8014852:	22cf      	movs	r2, #207	; 0xcf
 8014854:	497c      	ldr	r1, [pc, #496]	; (8014a48 <udp_input+0x20c>)
 8014856:	487d      	ldr	r0, [pc, #500]	; (8014a4c <udp_input+0x210>)
 8014858:	f002 ff5c 	bl	8017714 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801485c:	683b      	ldr	r3, [r7, #0]
 801485e:	2b00      	cmp	r3, #0
 8014860:	d105      	bne.n	801486e <udp_input+0x32>
 8014862:	4b78      	ldr	r3, [pc, #480]	; (8014a44 <udp_input+0x208>)
 8014864:	22d0      	movs	r2, #208	; 0xd0
 8014866:	497a      	ldr	r1, [pc, #488]	; (8014a50 <udp_input+0x214>)
 8014868:	4878      	ldr	r0, [pc, #480]	; (8014a4c <udp_input+0x210>)
 801486a:	f002 ff53 	bl	8017714 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801486e:	687b      	ldr	r3, [r7, #4]
 8014870:	895b      	ldrh	r3, [r3, #10]
 8014872:	2b07      	cmp	r3, #7
 8014874:	d803      	bhi.n	801487e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8014876:	6878      	ldr	r0, [r7, #4]
 8014878:	f7f9 f930 	bl	800dadc <pbuf_free>
    goto end;
 801487c:	e0de      	b.n	8014a3c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801487e:	687b      	ldr	r3, [r7, #4]
 8014880:	685b      	ldr	r3, [r3, #4]
 8014882:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8014884:	4b73      	ldr	r3, [pc, #460]	; (8014a54 <udp_input+0x218>)
 8014886:	695a      	ldr	r2, [r3, #20]
 8014888:	4b72      	ldr	r3, [pc, #456]	; (8014a54 <udp_input+0x218>)
 801488a:	681b      	ldr	r3, [r3, #0]
 801488c:	4619      	mov	r1, r3
 801488e:	4610      	mov	r0, r2
 8014890:	f7f6 fd58 	bl	800b344 <ip4_addr_isbroadcast_u32>
 8014894:	4603      	mov	r3, r0
 8014896:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8014898:	697b      	ldr	r3, [r7, #20]
 801489a:	881b      	ldrh	r3, [r3, #0]
 801489c:	b29b      	uxth	r3, r3
 801489e:	4618      	mov	r0, r3
 80148a0:	f7f4 f9bc 	bl	8008c1c <lwip_htons>
 80148a4:	4603      	mov	r3, r0
 80148a6:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80148a8:	697b      	ldr	r3, [r7, #20]
 80148aa:	885b      	ldrh	r3, [r3, #2]
 80148ac:	b29b      	uxth	r3, r3
 80148ae:	4618      	mov	r0, r3
 80148b0:	f7f4 f9b4 	bl	8008c1c <lwip_htons>
 80148b4:	4603      	mov	r3, r0
 80148b6:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80148b8:	2300      	movs	r3, #0
 80148ba:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 80148bc:	2300      	movs	r3, #0
 80148be:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80148c0:	2300      	movs	r3, #0
 80148c2:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80148c4:	4b64      	ldr	r3, [pc, #400]	; (8014a58 <udp_input+0x21c>)
 80148c6:	681b      	ldr	r3, [r3, #0]
 80148c8:	627b      	str	r3, [r7, #36]	; 0x24
 80148ca:	e054      	b.n	8014976 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80148cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148ce:	8a5b      	ldrh	r3, [r3, #18]
 80148d0:	89fa      	ldrh	r2, [r7, #14]
 80148d2:	429a      	cmp	r2, r3
 80148d4:	d14a      	bne.n	801496c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80148d6:	7cfb      	ldrb	r3, [r7, #19]
 80148d8:	461a      	mov	r2, r3
 80148da:	6839      	ldr	r1, [r7, #0]
 80148dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80148de:	f7ff ff49 	bl	8014774 <udp_input_local_match>
 80148e2:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80148e4:	2b00      	cmp	r3, #0
 80148e6:	d041      	beq.n	801496c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80148e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148ea:	7c1b      	ldrb	r3, [r3, #16]
 80148ec:	f003 0304 	and.w	r3, r3, #4
 80148f0:	2b00      	cmp	r3, #0
 80148f2:	d11d      	bne.n	8014930 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80148f4:	69fb      	ldr	r3, [r7, #28]
 80148f6:	2b00      	cmp	r3, #0
 80148f8:	d102      	bne.n	8014900 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80148fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148fc:	61fb      	str	r3, [r7, #28]
 80148fe:	e017      	b.n	8014930 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8014900:	7cfb      	ldrb	r3, [r7, #19]
 8014902:	2b00      	cmp	r3, #0
 8014904:	d014      	beq.n	8014930 <udp_input+0xf4>
 8014906:	4b53      	ldr	r3, [pc, #332]	; (8014a54 <udp_input+0x218>)
 8014908:	695b      	ldr	r3, [r3, #20]
 801490a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801490e:	d10f      	bne.n	8014930 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8014910:	69fb      	ldr	r3, [r7, #28]
 8014912:	681a      	ldr	r2, [r3, #0]
 8014914:	683b      	ldr	r3, [r7, #0]
 8014916:	3304      	adds	r3, #4
 8014918:	681b      	ldr	r3, [r3, #0]
 801491a:	429a      	cmp	r2, r3
 801491c:	d008      	beq.n	8014930 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801491e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014920:	681a      	ldr	r2, [r3, #0]
 8014922:	683b      	ldr	r3, [r7, #0]
 8014924:	3304      	adds	r3, #4
 8014926:	681b      	ldr	r3, [r3, #0]
 8014928:	429a      	cmp	r2, r3
 801492a:	d101      	bne.n	8014930 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801492c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801492e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8014930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014932:	8a9b      	ldrh	r3, [r3, #20]
 8014934:	8a3a      	ldrh	r2, [r7, #16]
 8014936:	429a      	cmp	r2, r3
 8014938:	d118      	bne.n	801496c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801493a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801493c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801493e:	2b00      	cmp	r3, #0
 8014940:	d005      	beq.n	801494e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8014942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014944:	685a      	ldr	r2, [r3, #4]
 8014946:	4b43      	ldr	r3, [pc, #268]	; (8014a54 <udp_input+0x218>)
 8014948:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801494a:	429a      	cmp	r2, r3
 801494c:	d10e      	bne.n	801496c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801494e:	6a3b      	ldr	r3, [r7, #32]
 8014950:	2b00      	cmp	r3, #0
 8014952:	d014      	beq.n	801497e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8014954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014956:	68da      	ldr	r2, [r3, #12]
 8014958:	6a3b      	ldr	r3, [r7, #32]
 801495a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801495c:	4b3e      	ldr	r3, [pc, #248]	; (8014a58 <udp_input+0x21c>)
 801495e:	681a      	ldr	r2, [r3, #0]
 8014960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014962:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8014964:	4a3c      	ldr	r2, [pc, #240]	; (8014a58 <udp_input+0x21c>)
 8014966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014968:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801496a:	e008      	b.n	801497e <udp_input+0x142>
      }
    }

    prev = pcb;
 801496c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801496e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014972:	68db      	ldr	r3, [r3, #12]
 8014974:	627b      	str	r3, [r7, #36]	; 0x24
 8014976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014978:	2b00      	cmp	r3, #0
 801497a:	d1a7      	bne.n	80148cc <udp_input+0x90>
 801497c:	e000      	b.n	8014980 <udp_input+0x144>
        break;
 801497e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8014980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014982:	2b00      	cmp	r3, #0
 8014984:	d101      	bne.n	801498a <udp_input+0x14e>
    pcb = uncon_pcb;
 8014986:	69fb      	ldr	r3, [r7, #28]
 8014988:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801498a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801498c:	2b00      	cmp	r3, #0
 801498e:	d002      	beq.n	8014996 <udp_input+0x15a>
    for_us = 1;
 8014990:	2301      	movs	r3, #1
 8014992:	76fb      	strb	r3, [r7, #27]
 8014994:	e00a      	b.n	80149ac <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8014996:	683b      	ldr	r3, [r7, #0]
 8014998:	3304      	adds	r3, #4
 801499a:	681a      	ldr	r2, [r3, #0]
 801499c:	4b2d      	ldr	r3, [pc, #180]	; (8014a54 <udp_input+0x218>)
 801499e:	695b      	ldr	r3, [r3, #20]
 80149a0:	429a      	cmp	r2, r3
 80149a2:	bf0c      	ite	eq
 80149a4:	2301      	moveq	r3, #1
 80149a6:	2300      	movne	r3, #0
 80149a8:	b2db      	uxtb	r3, r3
 80149aa:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80149ac:	7efb      	ldrb	r3, [r7, #27]
 80149ae:	2b00      	cmp	r3, #0
 80149b0:	d041      	beq.n	8014a36 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80149b2:	2108      	movs	r1, #8
 80149b4:	6878      	ldr	r0, [r7, #4]
 80149b6:	f7f8 ffd9 	bl	800d96c <pbuf_remove_header>
 80149ba:	4603      	mov	r3, r0
 80149bc:	2b00      	cmp	r3, #0
 80149be:	d00a      	beq.n	80149d6 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80149c0:	4b20      	ldr	r3, [pc, #128]	; (8014a44 <udp_input+0x208>)
 80149c2:	f44f 72b8 	mov.w	r2, #368	; 0x170
 80149c6:	4925      	ldr	r1, [pc, #148]	; (8014a5c <udp_input+0x220>)
 80149c8:	4820      	ldr	r0, [pc, #128]	; (8014a4c <udp_input+0x210>)
 80149ca:	f002 fea3 	bl	8017714 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80149ce:	6878      	ldr	r0, [r7, #4]
 80149d0:	f7f9 f884 	bl	800dadc <pbuf_free>
      goto end;
 80149d4:	e032      	b.n	8014a3c <udp_input+0x200>
    }

    if (pcb != NULL) {
 80149d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149d8:	2b00      	cmp	r3, #0
 80149da:	d012      	beq.n	8014a02 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80149dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149de:	699b      	ldr	r3, [r3, #24]
 80149e0:	2b00      	cmp	r3, #0
 80149e2:	d00a      	beq.n	80149fa <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80149e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149e6:	699c      	ldr	r4, [r3, #24]
 80149e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149ea:	69d8      	ldr	r0, [r3, #28]
 80149ec:	8a3b      	ldrh	r3, [r7, #16]
 80149ee:	9300      	str	r3, [sp, #0]
 80149f0:	4b1b      	ldr	r3, [pc, #108]	; (8014a60 <udp_input+0x224>)
 80149f2:	687a      	ldr	r2, [r7, #4]
 80149f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80149f6:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80149f8:	e021      	b.n	8014a3e <udp_input+0x202>
        pbuf_free(p);
 80149fa:	6878      	ldr	r0, [r7, #4]
 80149fc:	f7f9 f86e 	bl	800dadc <pbuf_free>
        goto end;
 8014a00:	e01c      	b.n	8014a3c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8014a02:	7cfb      	ldrb	r3, [r7, #19]
 8014a04:	2b00      	cmp	r3, #0
 8014a06:	d112      	bne.n	8014a2e <udp_input+0x1f2>
 8014a08:	4b12      	ldr	r3, [pc, #72]	; (8014a54 <udp_input+0x218>)
 8014a0a:	695b      	ldr	r3, [r3, #20]
 8014a0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014a10:	2be0      	cmp	r3, #224	; 0xe0
 8014a12:	d00c      	beq.n	8014a2e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8014a14:	4b0f      	ldr	r3, [pc, #60]	; (8014a54 <udp_input+0x218>)
 8014a16:	899b      	ldrh	r3, [r3, #12]
 8014a18:	3308      	adds	r3, #8
 8014a1a:	b29b      	uxth	r3, r3
 8014a1c:	b21b      	sxth	r3, r3
 8014a1e:	4619      	mov	r1, r3
 8014a20:	6878      	ldr	r0, [r7, #4]
 8014a22:	f7f9 f816 	bl	800da52 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8014a26:	2103      	movs	r1, #3
 8014a28:	6878      	ldr	r0, [r7, #4]
 8014a2a:	f7f6 f973 	bl	800ad14 <icmp_dest_unreach>
      pbuf_free(p);
 8014a2e:	6878      	ldr	r0, [r7, #4]
 8014a30:	f7f9 f854 	bl	800dadc <pbuf_free>
  return;
 8014a34:	e003      	b.n	8014a3e <udp_input+0x202>
    pbuf_free(p);
 8014a36:	6878      	ldr	r0, [r7, #4]
 8014a38:	f7f9 f850 	bl	800dadc <pbuf_free>
  return;
 8014a3c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8014a3e:	372c      	adds	r7, #44	; 0x2c
 8014a40:	46bd      	mov	sp, r7
 8014a42:	bd90      	pop	{r4, r7, pc}
 8014a44:	0801b394 	.word	0x0801b394
 8014a48:	0801b438 	.word	0x0801b438
 8014a4c:	0801b3e8 	.word	0x0801b3e8
 8014a50:	0801b450 	.word	0x0801b450
 8014a54:	20004814 	.word	0x20004814
 8014a58:	2000963c 	.word	0x2000963c
 8014a5c:	0801b46c 	.word	0x0801b46c
 8014a60:	20004824 	.word	0x20004824

08014a64 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8014a64:	b580      	push	{r7, lr}
 8014a66:	b088      	sub	sp, #32
 8014a68:	af02      	add	r7, sp, #8
 8014a6a:	60f8      	str	r0, [r7, #12]
 8014a6c:	60b9      	str	r1, [r7, #8]
 8014a6e:	607a      	str	r2, [r7, #4]
 8014a70:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8014a72:	68fb      	ldr	r3, [r7, #12]
 8014a74:	2b00      	cmp	r3, #0
 8014a76:	d109      	bne.n	8014a8c <udp_sendto+0x28>
 8014a78:	4b23      	ldr	r3, [pc, #140]	; (8014b08 <udp_sendto+0xa4>)
 8014a7a:	f44f 7206 	mov.w	r2, #536	; 0x218
 8014a7e:	4923      	ldr	r1, [pc, #140]	; (8014b0c <udp_sendto+0xa8>)
 8014a80:	4823      	ldr	r0, [pc, #140]	; (8014b10 <udp_sendto+0xac>)
 8014a82:	f002 fe47 	bl	8017714 <iprintf>
 8014a86:	f06f 030f 	mvn.w	r3, #15
 8014a8a:	e038      	b.n	8014afe <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8014a8c:	68bb      	ldr	r3, [r7, #8]
 8014a8e:	2b00      	cmp	r3, #0
 8014a90:	d109      	bne.n	8014aa6 <udp_sendto+0x42>
 8014a92:	4b1d      	ldr	r3, [pc, #116]	; (8014b08 <udp_sendto+0xa4>)
 8014a94:	f240 2219 	movw	r2, #537	; 0x219
 8014a98:	491e      	ldr	r1, [pc, #120]	; (8014b14 <udp_sendto+0xb0>)
 8014a9a:	481d      	ldr	r0, [pc, #116]	; (8014b10 <udp_sendto+0xac>)
 8014a9c:	f002 fe3a 	bl	8017714 <iprintf>
 8014aa0:	f06f 030f 	mvn.w	r3, #15
 8014aa4:	e02b      	b.n	8014afe <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8014aa6:	687b      	ldr	r3, [r7, #4]
 8014aa8:	2b00      	cmp	r3, #0
 8014aaa:	d109      	bne.n	8014ac0 <udp_sendto+0x5c>
 8014aac:	4b16      	ldr	r3, [pc, #88]	; (8014b08 <udp_sendto+0xa4>)
 8014aae:	f240 221a 	movw	r2, #538	; 0x21a
 8014ab2:	4919      	ldr	r1, [pc, #100]	; (8014b18 <udp_sendto+0xb4>)
 8014ab4:	4816      	ldr	r0, [pc, #88]	; (8014b10 <udp_sendto+0xac>)
 8014ab6:	f002 fe2d 	bl	8017714 <iprintf>
 8014aba:	f06f 030f 	mvn.w	r3, #15
 8014abe:	e01e      	b.n	8014afe <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8014ac0:	68fb      	ldr	r3, [r7, #12]
 8014ac2:	7a1b      	ldrb	r3, [r3, #8]
 8014ac4:	2b00      	cmp	r3, #0
 8014ac6:	d006      	beq.n	8014ad6 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8014ac8:	68fb      	ldr	r3, [r7, #12]
 8014aca:	7a1b      	ldrb	r3, [r3, #8]
 8014acc:	4618      	mov	r0, r3
 8014ace:	f7f8 fc47 	bl	800d360 <netif_get_by_index>
 8014ad2:	6178      	str	r0, [r7, #20]
 8014ad4:	e003      	b.n	8014ade <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8014ad6:	6878      	ldr	r0, [r7, #4]
 8014ad8:	f7f6 f9a6 	bl	800ae28 <ip4_route>
 8014adc:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8014ade:	697b      	ldr	r3, [r7, #20]
 8014ae0:	2b00      	cmp	r3, #0
 8014ae2:	d102      	bne.n	8014aea <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8014ae4:	f06f 0303 	mvn.w	r3, #3
 8014ae8:	e009      	b.n	8014afe <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8014aea:	887a      	ldrh	r2, [r7, #2]
 8014aec:	697b      	ldr	r3, [r7, #20]
 8014aee:	9300      	str	r3, [sp, #0]
 8014af0:	4613      	mov	r3, r2
 8014af2:	687a      	ldr	r2, [r7, #4]
 8014af4:	68b9      	ldr	r1, [r7, #8]
 8014af6:	68f8      	ldr	r0, [r7, #12]
 8014af8:	f000 f810 	bl	8014b1c <udp_sendto_if>
 8014afc:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8014afe:	4618      	mov	r0, r3
 8014b00:	3718      	adds	r7, #24
 8014b02:	46bd      	mov	sp, r7
 8014b04:	bd80      	pop	{r7, pc}
 8014b06:	bf00      	nop
 8014b08:	0801b394 	.word	0x0801b394
 8014b0c:	0801b4b8 	.word	0x0801b4b8
 8014b10:	0801b3e8 	.word	0x0801b3e8
 8014b14:	0801b4d0 	.word	0x0801b4d0
 8014b18:	0801b4ec 	.word	0x0801b4ec

08014b1c <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8014b1c:	b580      	push	{r7, lr}
 8014b1e:	b088      	sub	sp, #32
 8014b20:	af02      	add	r7, sp, #8
 8014b22:	60f8      	str	r0, [r7, #12]
 8014b24:	60b9      	str	r1, [r7, #8]
 8014b26:	607a      	str	r2, [r7, #4]
 8014b28:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8014b2a:	68fb      	ldr	r3, [r7, #12]
 8014b2c:	2b00      	cmp	r3, #0
 8014b2e:	d109      	bne.n	8014b44 <udp_sendto_if+0x28>
 8014b30:	4b2e      	ldr	r3, [pc, #184]	; (8014bec <udp_sendto_if+0xd0>)
 8014b32:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014b36:	492e      	ldr	r1, [pc, #184]	; (8014bf0 <udp_sendto_if+0xd4>)
 8014b38:	482e      	ldr	r0, [pc, #184]	; (8014bf4 <udp_sendto_if+0xd8>)
 8014b3a:	f002 fdeb 	bl	8017714 <iprintf>
 8014b3e:	f06f 030f 	mvn.w	r3, #15
 8014b42:	e04f      	b.n	8014be4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8014b44:	68bb      	ldr	r3, [r7, #8]
 8014b46:	2b00      	cmp	r3, #0
 8014b48:	d109      	bne.n	8014b5e <udp_sendto_if+0x42>
 8014b4a:	4b28      	ldr	r3, [pc, #160]	; (8014bec <udp_sendto_if+0xd0>)
 8014b4c:	f240 2281 	movw	r2, #641	; 0x281
 8014b50:	4929      	ldr	r1, [pc, #164]	; (8014bf8 <udp_sendto_if+0xdc>)
 8014b52:	4828      	ldr	r0, [pc, #160]	; (8014bf4 <udp_sendto_if+0xd8>)
 8014b54:	f002 fdde 	bl	8017714 <iprintf>
 8014b58:	f06f 030f 	mvn.w	r3, #15
 8014b5c:	e042      	b.n	8014be4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8014b5e:	687b      	ldr	r3, [r7, #4]
 8014b60:	2b00      	cmp	r3, #0
 8014b62:	d109      	bne.n	8014b78 <udp_sendto_if+0x5c>
 8014b64:	4b21      	ldr	r3, [pc, #132]	; (8014bec <udp_sendto_if+0xd0>)
 8014b66:	f240 2282 	movw	r2, #642	; 0x282
 8014b6a:	4924      	ldr	r1, [pc, #144]	; (8014bfc <udp_sendto_if+0xe0>)
 8014b6c:	4821      	ldr	r0, [pc, #132]	; (8014bf4 <udp_sendto_if+0xd8>)
 8014b6e:	f002 fdd1 	bl	8017714 <iprintf>
 8014b72:	f06f 030f 	mvn.w	r3, #15
 8014b76:	e035      	b.n	8014be4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8014b78:	6a3b      	ldr	r3, [r7, #32]
 8014b7a:	2b00      	cmp	r3, #0
 8014b7c:	d109      	bne.n	8014b92 <udp_sendto_if+0x76>
 8014b7e:	4b1b      	ldr	r3, [pc, #108]	; (8014bec <udp_sendto_if+0xd0>)
 8014b80:	f240 2283 	movw	r2, #643	; 0x283
 8014b84:	491e      	ldr	r1, [pc, #120]	; (8014c00 <udp_sendto_if+0xe4>)
 8014b86:	481b      	ldr	r0, [pc, #108]	; (8014bf4 <udp_sendto_if+0xd8>)
 8014b88:	f002 fdc4 	bl	8017714 <iprintf>
 8014b8c:	f06f 030f 	mvn.w	r3, #15
 8014b90:	e028      	b.n	8014be4 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8014b92:	68fb      	ldr	r3, [r7, #12]
 8014b94:	2b00      	cmp	r3, #0
 8014b96:	d009      	beq.n	8014bac <udp_sendto_if+0x90>
 8014b98:	68fb      	ldr	r3, [r7, #12]
 8014b9a:	681b      	ldr	r3, [r3, #0]
 8014b9c:	2b00      	cmp	r3, #0
 8014b9e:	d005      	beq.n	8014bac <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8014ba0:	68fb      	ldr	r3, [r7, #12]
 8014ba2:	681b      	ldr	r3, [r3, #0]
 8014ba4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8014ba8:	2be0      	cmp	r3, #224	; 0xe0
 8014baa:	d103      	bne.n	8014bb4 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8014bac:	6a3b      	ldr	r3, [r7, #32]
 8014bae:	3304      	adds	r3, #4
 8014bb0:	617b      	str	r3, [r7, #20]
 8014bb2:	e00b      	b.n	8014bcc <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8014bb4:	68fb      	ldr	r3, [r7, #12]
 8014bb6:	681a      	ldr	r2, [r3, #0]
 8014bb8:	6a3b      	ldr	r3, [r7, #32]
 8014bba:	3304      	adds	r3, #4
 8014bbc:	681b      	ldr	r3, [r3, #0]
 8014bbe:	429a      	cmp	r2, r3
 8014bc0:	d002      	beq.n	8014bc8 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8014bc2:	f06f 0303 	mvn.w	r3, #3
 8014bc6:	e00d      	b.n	8014be4 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8014bc8:	68fb      	ldr	r3, [r7, #12]
 8014bca:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8014bcc:	887a      	ldrh	r2, [r7, #2]
 8014bce:	697b      	ldr	r3, [r7, #20]
 8014bd0:	9301      	str	r3, [sp, #4]
 8014bd2:	6a3b      	ldr	r3, [r7, #32]
 8014bd4:	9300      	str	r3, [sp, #0]
 8014bd6:	4613      	mov	r3, r2
 8014bd8:	687a      	ldr	r2, [r7, #4]
 8014bda:	68b9      	ldr	r1, [r7, #8]
 8014bdc:	68f8      	ldr	r0, [r7, #12]
 8014bde:	f000 f811 	bl	8014c04 <udp_sendto_if_src>
 8014be2:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8014be4:	4618      	mov	r0, r3
 8014be6:	3718      	adds	r7, #24
 8014be8:	46bd      	mov	sp, r7
 8014bea:	bd80      	pop	{r7, pc}
 8014bec:	0801b394 	.word	0x0801b394
 8014bf0:	0801b508 	.word	0x0801b508
 8014bf4:	0801b3e8 	.word	0x0801b3e8
 8014bf8:	0801b524 	.word	0x0801b524
 8014bfc:	0801b540 	.word	0x0801b540
 8014c00:	0801b560 	.word	0x0801b560

08014c04 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8014c04:	b580      	push	{r7, lr}
 8014c06:	b08c      	sub	sp, #48	; 0x30
 8014c08:	af04      	add	r7, sp, #16
 8014c0a:	60f8      	str	r0, [r7, #12]
 8014c0c:	60b9      	str	r1, [r7, #8]
 8014c0e:	607a      	str	r2, [r7, #4]
 8014c10:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8014c12:	68fb      	ldr	r3, [r7, #12]
 8014c14:	2b00      	cmp	r3, #0
 8014c16:	d109      	bne.n	8014c2c <udp_sendto_if_src+0x28>
 8014c18:	4b66      	ldr	r3, [pc, #408]	; (8014db4 <udp_sendto_if_src+0x1b0>)
 8014c1a:	f240 22d1 	movw	r2, #721	; 0x2d1
 8014c1e:	4966      	ldr	r1, [pc, #408]	; (8014db8 <udp_sendto_if_src+0x1b4>)
 8014c20:	4866      	ldr	r0, [pc, #408]	; (8014dbc <udp_sendto_if_src+0x1b8>)
 8014c22:	f002 fd77 	bl	8017714 <iprintf>
 8014c26:	f06f 030f 	mvn.w	r3, #15
 8014c2a:	e0be      	b.n	8014daa <udp_sendto_if_src+0x1a6>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8014c2c:	68bb      	ldr	r3, [r7, #8]
 8014c2e:	2b00      	cmp	r3, #0
 8014c30:	d109      	bne.n	8014c46 <udp_sendto_if_src+0x42>
 8014c32:	4b60      	ldr	r3, [pc, #384]	; (8014db4 <udp_sendto_if_src+0x1b0>)
 8014c34:	f240 22d2 	movw	r2, #722	; 0x2d2
 8014c38:	4961      	ldr	r1, [pc, #388]	; (8014dc0 <udp_sendto_if_src+0x1bc>)
 8014c3a:	4860      	ldr	r0, [pc, #384]	; (8014dbc <udp_sendto_if_src+0x1b8>)
 8014c3c:	f002 fd6a 	bl	8017714 <iprintf>
 8014c40:	f06f 030f 	mvn.w	r3, #15
 8014c44:	e0b1      	b.n	8014daa <udp_sendto_if_src+0x1a6>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8014c46:	687b      	ldr	r3, [r7, #4]
 8014c48:	2b00      	cmp	r3, #0
 8014c4a:	d109      	bne.n	8014c60 <udp_sendto_if_src+0x5c>
 8014c4c:	4b59      	ldr	r3, [pc, #356]	; (8014db4 <udp_sendto_if_src+0x1b0>)
 8014c4e:	f240 22d3 	movw	r2, #723	; 0x2d3
 8014c52:	495c      	ldr	r1, [pc, #368]	; (8014dc4 <udp_sendto_if_src+0x1c0>)
 8014c54:	4859      	ldr	r0, [pc, #356]	; (8014dbc <udp_sendto_if_src+0x1b8>)
 8014c56:	f002 fd5d 	bl	8017714 <iprintf>
 8014c5a:	f06f 030f 	mvn.w	r3, #15
 8014c5e:	e0a4      	b.n	8014daa <udp_sendto_if_src+0x1a6>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8014c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c62:	2b00      	cmp	r3, #0
 8014c64:	d109      	bne.n	8014c7a <udp_sendto_if_src+0x76>
 8014c66:	4b53      	ldr	r3, [pc, #332]	; (8014db4 <udp_sendto_if_src+0x1b0>)
 8014c68:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8014c6c:	4956      	ldr	r1, [pc, #344]	; (8014dc8 <udp_sendto_if_src+0x1c4>)
 8014c6e:	4853      	ldr	r0, [pc, #332]	; (8014dbc <udp_sendto_if_src+0x1b8>)
 8014c70:	f002 fd50 	bl	8017714 <iprintf>
 8014c74:	f06f 030f 	mvn.w	r3, #15
 8014c78:	e097      	b.n	8014daa <udp_sendto_if_src+0x1a6>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8014c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c7c:	2b00      	cmp	r3, #0
 8014c7e:	d109      	bne.n	8014c94 <udp_sendto_if_src+0x90>
 8014c80:	4b4c      	ldr	r3, [pc, #304]	; (8014db4 <udp_sendto_if_src+0x1b0>)
 8014c82:	f240 22d5 	movw	r2, #725	; 0x2d5
 8014c86:	4951      	ldr	r1, [pc, #324]	; (8014dcc <udp_sendto_if_src+0x1c8>)
 8014c88:	484c      	ldr	r0, [pc, #304]	; (8014dbc <udp_sendto_if_src+0x1b8>)
 8014c8a:	f002 fd43 	bl	8017714 <iprintf>
 8014c8e:	f06f 030f 	mvn.w	r3, #15
 8014c92:	e08a      	b.n	8014daa <udp_sendto_if_src+0x1a6>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8014c94:	68fb      	ldr	r3, [r7, #12]
 8014c96:	8a5b      	ldrh	r3, [r3, #18]
 8014c98:	2b00      	cmp	r3, #0
 8014c9a:	d10f      	bne.n	8014cbc <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8014c9c:	68f9      	ldr	r1, [r7, #12]
 8014c9e:	68fb      	ldr	r3, [r7, #12]
 8014ca0:	8a5b      	ldrh	r3, [r3, #18]
 8014ca2:	461a      	mov	r2, r3
 8014ca4:	68f8      	ldr	r0, [r7, #12]
 8014ca6:	f000 f895 	bl	8014dd4 <udp_bind>
 8014caa:	4603      	mov	r3, r0
 8014cac:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8014cae:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8014cb2:	2b00      	cmp	r3, #0
 8014cb4:	d002      	beq.n	8014cbc <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8014cb6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8014cba:	e076      	b.n	8014daa <udp_sendto_if_src+0x1a6>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8014cbc:	68bb      	ldr	r3, [r7, #8]
 8014cbe:	891b      	ldrh	r3, [r3, #8]
 8014cc0:	3308      	adds	r3, #8
 8014cc2:	b29a      	uxth	r2, r3
 8014cc4:	68bb      	ldr	r3, [r7, #8]
 8014cc6:	891b      	ldrh	r3, [r3, #8]
 8014cc8:	429a      	cmp	r2, r3
 8014cca:	d202      	bcs.n	8014cd2 <udp_sendto_if_src+0xce>
    return ERR_MEM;
 8014ccc:	f04f 33ff 	mov.w	r3, #4294967295
 8014cd0:	e06b      	b.n	8014daa <udp_sendto_if_src+0x1a6>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8014cd2:	2108      	movs	r1, #8
 8014cd4:	68b8      	ldr	r0, [r7, #8]
 8014cd6:	f7f8 fe39 	bl	800d94c <pbuf_add_header>
 8014cda:	4603      	mov	r3, r0
 8014cdc:	2b00      	cmp	r3, #0
 8014cde:	d015      	beq.n	8014d0c <udp_sendto_if_src+0x108>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8014ce0:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014ce4:	2108      	movs	r1, #8
 8014ce6:	2022      	movs	r0, #34	; 0x22
 8014ce8:	f7f8 fbe4 	bl	800d4b4 <pbuf_alloc>
 8014cec:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8014cee:	69fb      	ldr	r3, [r7, #28]
 8014cf0:	2b00      	cmp	r3, #0
 8014cf2:	d102      	bne.n	8014cfa <udp_sendto_if_src+0xf6>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8014cf4:	f04f 33ff 	mov.w	r3, #4294967295
 8014cf8:	e057      	b.n	8014daa <udp_sendto_if_src+0x1a6>
    }
    if (p->tot_len != 0) {
 8014cfa:	68bb      	ldr	r3, [r7, #8]
 8014cfc:	891b      	ldrh	r3, [r3, #8]
 8014cfe:	2b00      	cmp	r3, #0
 8014d00:	d006      	beq.n	8014d10 <udp_sendto_if_src+0x10c>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8014d02:	68b9      	ldr	r1, [r7, #8]
 8014d04:	69f8      	ldr	r0, [r7, #28]
 8014d06:	f7f9 f80d 	bl	800dd24 <pbuf_chain>
 8014d0a:	e001      	b.n	8014d10 <udp_sendto_if_src+0x10c>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8014d0c:	68bb      	ldr	r3, [r7, #8]
 8014d0e:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8014d10:	69fb      	ldr	r3, [r7, #28]
 8014d12:	895b      	ldrh	r3, [r3, #10]
 8014d14:	2b07      	cmp	r3, #7
 8014d16:	d806      	bhi.n	8014d26 <udp_sendto_if_src+0x122>
 8014d18:	4b26      	ldr	r3, [pc, #152]	; (8014db4 <udp_sendto_if_src+0x1b0>)
 8014d1a:	f240 320e 	movw	r2, #782	; 0x30e
 8014d1e:	492c      	ldr	r1, [pc, #176]	; (8014dd0 <udp_sendto_if_src+0x1cc>)
 8014d20:	4826      	ldr	r0, [pc, #152]	; (8014dbc <udp_sendto_if_src+0x1b8>)
 8014d22:	f002 fcf7 	bl	8017714 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8014d26:	69fb      	ldr	r3, [r7, #28]
 8014d28:	685b      	ldr	r3, [r3, #4]
 8014d2a:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8014d2c:	68fb      	ldr	r3, [r7, #12]
 8014d2e:	8a5b      	ldrh	r3, [r3, #18]
 8014d30:	4618      	mov	r0, r3
 8014d32:	f7f3 ff73 	bl	8008c1c <lwip_htons>
 8014d36:	4603      	mov	r3, r0
 8014d38:	461a      	mov	r2, r3
 8014d3a:	697b      	ldr	r3, [r7, #20]
 8014d3c:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8014d3e:	887b      	ldrh	r3, [r7, #2]
 8014d40:	4618      	mov	r0, r3
 8014d42:	f7f3 ff6b 	bl	8008c1c <lwip_htons>
 8014d46:	4603      	mov	r3, r0
 8014d48:	461a      	mov	r2, r3
 8014d4a:	697b      	ldr	r3, [r7, #20]
 8014d4c:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8014d4e:	697b      	ldr	r3, [r7, #20]
 8014d50:	2200      	movs	r2, #0
 8014d52:	719a      	strb	r2, [r3, #6]
 8014d54:	2200      	movs	r2, #0
 8014d56:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8014d58:	69fb      	ldr	r3, [r7, #28]
 8014d5a:	891b      	ldrh	r3, [r3, #8]
 8014d5c:	4618      	mov	r0, r3
 8014d5e:	f7f3 ff5d 	bl	8008c1c <lwip_htons>
 8014d62:	4603      	mov	r3, r0
 8014d64:	461a      	mov	r2, r3
 8014d66:	697b      	ldr	r3, [r7, #20]
 8014d68:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8014d6a:	2311      	movs	r3, #17
 8014d6c:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8014d6e:	68fb      	ldr	r3, [r7, #12]
 8014d70:	7adb      	ldrb	r3, [r3, #11]
 8014d72:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8014d74:	68fb      	ldr	r3, [r7, #12]
 8014d76:	7a9b      	ldrb	r3, [r3, #10]
 8014d78:	7cb9      	ldrb	r1, [r7, #18]
 8014d7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014d7c:	9202      	str	r2, [sp, #8]
 8014d7e:	7cfa      	ldrb	r2, [r7, #19]
 8014d80:	9201      	str	r2, [sp, #4]
 8014d82:	9300      	str	r3, [sp, #0]
 8014d84:	460b      	mov	r3, r1
 8014d86:	687a      	ldr	r2, [r7, #4]
 8014d88:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014d8a:	69f8      	ldr	r0, [r7, #28]
 8014d8c:	f7f6 fa2c 	bl	800b1e8 <ip4_output_if_src>
 8014d90:	4603      	mov	r3, r0
 8014d92:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8014d94:	69fa      	ldr	r2, [r7, #28]
 8014d96:	68bb      	ldr	r3, [r7, #8]
 8014d98:	429a      	cmp	r2, r3
 8014d9a:	d004      	beq.n	8014da6 <udp_sendto_if_src+0x1a2>
    /* free the header pbuf */
    pbuf_free(q);
 8014d9c:	69f8      	ldr	r0, [r7, #28]
 8014d9e:	f7f8 fe9d 	bl	800dadc <pbuf_free>
    q = NULL;
 8014da2:	2300      	movs	r3, #0
 8014da4:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8014da6:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8014daa:	4618      	mov	r0, r3
 8014dac:	3720      	adds	r7, #32
 8014dae:	46bd      	mov	sp, r7
 8014db0:	bd80      	pop	{r7, pc}
 8014db2:	bf00      	nop
 8014db4:	0801b394 	.word	0x0801b394
 8014db8:	0801b580 	.word	0x0801b580
 8014dbc:	0801b3e8 	.word	0x0801b3e8
 8014dc0:	0801b5a0 	.word	0x0801b5a0
 8014dc4:	0801b5c0 	.word	0x0801b5c0
 8014dc8:	0801b5e4 	.word	0x0801b5e4
 8014dcc:	0801b608 	.word	0x0801b608
 8014dd0:	0801b62c 	.word	0x0801b62c

08014dd4 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8014dd4:	b580      	push	{r7, lr}
 8014dd6:	b086      	sub	sp, #24
 8014dd8:	af00      	add	r7, sp, #0
 8014dda:	60f8      	str	r0, [r7, #12]
 8014ddc:	60b9      	str	r1, [r7, #8]
 8014dde:	4613      	mov	r3, r2
 8014de0:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8014de2:	68bb      	ldr	r3, [r7, #8]
 8014de4:	2b00      	cmp	r3, #0
 8014de6:	d101      	bne.n	8014dec <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8014de8:	4b39      	ldr	r3, [pc, #228]	; (8014ed0 <udp_bind+0xfc>)
 8014dea:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8014dec:	68fb      	ldr	r3, [r7, #12]
 8014dee:	2b00      	cmp	r3, #0
 8014df0:	d109      	bne.n	8014e06 <udp_bind+0x32>
 8014df2:	4b38      	ldr	r3, [pc, #224]	; (8014ed4 <udp_bind+0x100>)
 8014df4:	f240 32b7 	movw	r2, #951	; 0x3b7
 8014df8:	4937      	ldr	r1, [pc, #220]	; (8014ed8 <udp_bind+0x104>)
 8014dfa:	4838      	ldr	r0, [pc, #224]	; (8014edc <udp_bind+0x108>)
 8014dfc:	f002 fc8a 	bl	8017714 <iprintf>
 8014e00:	f06f 030f 	mvn.w	r3, #15
 8014e04:	e060      	b.n	8014ec8 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8014e06:	2300      	movs	r3, #0
 8014e08:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014e0a:	4b35      	ldr	r3, [pc, #212]	; (8014ee0 <udp_bind+0x10c>)
 8014e0c:	681b      	ldr	r3, [r3, #0]
 8014e0e:	617b      	str	r3, [r7, #20]
 8014e10:	e009      	b.n	8014e26 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8014e12:	68fa      	ldr	r2, [r7, #12]
 8014e14:	697b      	ldr	r3, [r7, #20]
 8014e16:	429a      	cmp	r2, r3
 8014e18:	d102      	bne.n	8014e20 <udp_bind+0x4c>
      rebind = 1;
 8014e1a:	2301      	movs	r3, #1
 8014e1c:	74fb      	strb	r3, [r7, #19]
      break;
 8014e1e:	e005      	b.n	8014e2c <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014e20:	697b      	ldr	r3, [r7, #20]
 8014e22:	68db      	ldr	r3, [r3, #12]
 8014e24:	617b      	str	r3, [r7, #20]
 8014e26:	697b      	ldr	r3, [r7, #20]
 8014e28:	2b00      	cmp	r3, #0
 8014e2a:	d1f2      	bne.n	8014e12 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8014e2c:	88fb      	ldrh	r3, [r7, #6]
 8014e2e:	2b00      	cmp	r3, #0
 8014e30:	d109      	bne.n	8014e46 <udp_bind+0x72>
    port = udp_new_port();
 8014e32:	f7ff fc67 	bl	8014704 <udp_new_port>
 8014e36:	4603      	mov	r3, r0
 8014e38:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8014e3a:	88fb      	ldrh	r3, [r7, #6]
 8014e3c:	2b00      	cmp	r3, #0
 8014e3e:	d12c      	bne.n	8014e9a <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8014e40:	f06f 0307 	mvn.w	r3, #7
 8014e44:	e040      	b.n	8014ec8 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014e46:	4b26      	ldr	r3, [pc, #152]	; (8014ee0 <udp_bind+0x10c>)
 8014e48:	681b      	ldr	r3, [r3, #0]
 8014e4a:	617b      	str	r3, [r7, #20]
 8014e4c:	e022      	b.n	8014e94 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8014e4e:	68fa      	ldr	r2, [r7, #12]
 8014e50:	697b      	ldr	r3, [r7, #20]
 8014e52:	429a      	cmp	r2, r3
 8014e54:	d01b      	beq.n	8014e8e <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8014e56:	697b      	ldr	r3, [r7, #20]
 8014e58:	8a5b      	ldrh	r3, [r3, #18]
 8014e5a:	88fa      	ldrh	r2, [r7, #6]
 8014e5c:	429a      	cmp	r2, r3
 8014e5e:	d116      	bne.n	8014e8e <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8014e60:	697b      	ldr	r3, [r7, #20]
 8014e62:	681a      	ldr	r2, [r3, #0]
 8014e64:	68bb      	ldr	r3, [r7, #8]
 8014e66:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8014e68:	429a      	cmp	r2, r3
 8014e6a:	d00d      	beq.n	8014e88 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8014e6c:	68bb      	ldr	r3, [r7, #8]
 8014e6e:	2b00      	cmp	r3, #0
 8014e70:	d00a      	beq.n	8014e88 <udp_bind+0xb4>
 8014e72:	68bb      	ldr	r3, [r7, #8]
 8014e74:	681b      	ldr	r3, [r3, #0]
 8014e76:	2b00      	cmp	r3, #0
 8014e78:	d006      	beq.n	8014e88 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8014e7a:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8014e7c:	2b00      	cmp	r3, #0
 8014e7e:	d003      	beq.n	8014e88 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8014e80:	697b      	ldr	r3, [r7, #20]
 8014e82:	681b      	ldr	r3, [r3, #0]
 8014e84:	2b00      	cmp	r3, #0
 8014e86:	d102      	bne.n	8014e8e <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8014e88:	f06f 0307 	mvn.w	r3, #7
 8014e8c:	e01c      	b.n	8014ec8 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014e8e:	697b      	ldr	r3, [r7, #20]
 8014e90:	68db      	ldr	r3, [r3, #12]
 8014e92:	617b      	str	r3, [r7, #20]
 8014e94:	697b      	ldr	r3, [r7, #20]
 8014e96:	2b00      	cmp	r3, #0
 8014e98:	d1d9      	bne.n	8014e4e <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8014e9a:	68bb      	ldr	r3, [r7, #8]
 8014e9c:	2b00      	cmp	r3, #0
 8014e9e:	d002      	beq.n	8014ea6 <udp_bind+0xd2>
 8014ea0:	68bb      	ldr	r3, [r7, #8]
 8014ea2:	681b      	ldr	r3, [r3, #0]
 8014ea4:	e000      	b.n	8014ea8 <udp_bind+0xd4>
 8014ea6:	2300      	movs	r3, #0
 8014ea8:	68fa      	ldr	r2, [r7, #12]
 8014eaa:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8014eac:	68fb      	ldr	r3, [r7, #12]
 8014eae:	88fa      	ldrh	r2, [r7, #6]
 8014eb0:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8014eb2:	7cfb      	ldrb	r3, [r7, #19]
 8014eb4:	2b00      	cmp	r3, #0
 8014eb6:	d106      	bne.n	8014ec6 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8014eb8:	4b09      	ldr	r3, [pc, #36]	; (8014ee0 <udp_bind+0x10c>)
 8014eba:	681a      	ldr	r2, [r3, #0]
 8014ebc:	68fb      	ldr	r3, [r7, #12]
 8014ebe:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8014ec0:	4a07      	ldr	r2, [pc, #28]	; (8014ee0 <udp_bind+0x10c>)
 8014ec2:	68fb      	ldr	r3, [r7, #12]
 8014ec4:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8014ec6:	2300      	movs	r3, #0
}
 8014ec8:	4618      	mov	r0, r3
 8014eca:	3718      	adds	r7, #24
 8014ecc:	46bd      	mov	sp, r7
 8014ece:	bd80      	pop	{r7, pc}
 8014ed0:	0801ba9c 	.word	0x0801ba9c
 8014ed4:	0801b394 	.word	0x0801b394
 8014ed8:	0801b65c 	.word	0x0801b65c
 8014edc:	0801b3e8 	.word	0x0801b3e8
 8014ee0:	2000963c 	.word	0x2000963c

08014ee4 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8014ee4:	b580      	push	{r7, lr}
 8014ee6:	b084      	sub	sp, #16
 8014ee8:	af00      	add	r7, sp, #0
 8014eea:	60f8      	str	r0, [r7, #12]
 8014eec:	60b9      	str	r1, [r7, #8]
 8014eee:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8014ef0:	68fb      	ldr	r3, [r7, #12]
 8014ef2:	2b00      	cmp	r3, #0
 8014ef4:	d107      	bne.n	8014f06 <udp_recv+0x22>
 8014ef6:	4b08      	ldr	r3, [pc, #32]	; (8014f18 <udp_recv+0x34>)
 8014ef8:	f240 428a 	movw	r2, #1162	; 0x48a
 8014efc:	4907      	ldr	r1, [pc, #28]	; (8014f1c <udp_recv+0x38>)
 8014efe:	4808      	ldr	r0, [pc, #32]	; (8014f20 <udp_recv+0x3c>)
 8014f00:	f002 fc08 	bl	8017714 <iprintf>
 8014f04:	e005      	b.n	8014f12 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8014f06:	68fb      	ldr	r3, [r7, #12]
 8014f08:	68ba      	ldr	r2, [r7, #8]
 8014f0a:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8014f0c:	68fb      	ldr	r3, [r7, #12]
 8014f0e:	687a      	ldr	r2, [r7, #4]
 8014f10:	61da      	str	r2, [r3, #28]
}
 8014f12:	3710      	adds	r7, #16
 8014f14:	46bd      	mov	sp, r7
 8014f16:	bd80      	pop	{r7, pc}
 8014f18:	0801b394 	.word	0x0801b394
 8014f1c:	0801b6c8 	.word	0x0801b6c8
 8014f20:	0801b3e8 	.word	0x0801b3e8

08014f24 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8014f24:	b580      	push	{r7, lr}
 8014f26:	b084      	sub	sp, #16
 8014f28:	af00      	add	r7, sp, #0
 8014f2a:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8014f2c:	687b      	ldr	r3, [r7, #4]
 8014f2e:	2b00      	cmp	r3, #0
 8014f30:	d107      	bne.n	8014f42 <udp_remove+0x1e>
 8014f32:	4b19      	ldr	r3, [pc, #100]	; (8014f98 <udp_remove+0x74>)
 8014f34:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8014f38:	4918      	ldr	r1, [pc, #96]	; (8014f9c <udp_remove+0x78>)
 8014f3a:	4819      	ldr	r0, [pc, #100]	; (8014fa0 <udp_remove+0x7c>)
 8014f3c:	f002 fbea 	bl	8017714 <iprintf>
 8014f40:	e026      	b.n	8014f90 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8014f42:	4b18      	ldr	r3, [pc, #96]	; (8014fa4 <udp_remove+0x80>)
 8014f44:	681a      	ldr	r2, [r3, #0]
 8014f46:	687b      	ldr	r3, [r7, #4]
 8014f48:	429a      	cmp	r2, r3
 8014f4a:	d105      	bne.n	8014f58 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8014f4c:	4b15      	ldr	r3, [pc, #84]	; (8014fa4 <udp_remove+0x80>)
 8014f4e:	681b      	ldr	r3, [r3, #0]
 8014f50:	68db      	ldr	r3, [r3, #12]
 8014f52:	4a14      	ldr	r2, [pc, #80]	; (8014fa4 <udp_remove+0x80>)
 8014f54:	6013      	str	r3, [r2, #0]
 8014f56:	e017      	b.n	8014f88 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8014f58:	4b12      	ldr	r3, [pc, #72]	; (8014fa4 <udp_remove+0x80>)
 8014f5a:	681b      	ldr	r3, [r3, #0]
 8014f5c:	60fb      	str	r3, [r7, #12]
 8014f5e:	e010      	b.n	8014f82 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8014f60:	68fb      	ldr	r3, [r7, #12]
 8014f62:	68db      	ldr	r3, [r3, #12]
 8014f64:	2b00      	cmp	r3, #0
 8014f66:	d009      	beq.n	8014f7c <udp_remove+0x58>
 8014f68:	68fb      	ldr	r3, [r7, #12]
 8014f6a:	68da      	ldr	r2, [r3, #12]
 8014f6c:	687b      	ldr	r3, [r7, #4]
 8014f6e:	429a      	cmp	r2, r3
 8014f70:	d104      	bne.n	8014f7c <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8014f72:	687b      	ldr	r3, [r7, #4]
 8014f74:	68da      	ldr	r2, [r3, #12]
 8014f76:	68fb      	ldr	r3, [r7, #12]
 8014f78:	60da      	str	r2, [r3, #12]
        break;
 8014f7a:	e005      	b.n	8014f88 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8014f7c:	68fb      	ldr	r3, [r7, #12]
 8014f7e:	68db      	ldr	r3, [r3, #12]
 8014f80:	60fb      	str	r3, [r7, #12]
 8014f82:	68fb      	ldr	r3, [r7, #12]
 8014f84:	2b00      	cmp	r3, #0
 8014f86:	d1eb      	bne.n	8014f60 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8014f88:	6879      	ldr	r1, [r7, #4]
 8014f8a:	2000      	movs	r0, #0
 8014f8c:	f7f7 fed2 	bl	800cd34 <memp_free>
}
 8014f90:	3710      	adds	r7, #16
 8014f92:	46bd      	mov	sp, r7
 8014f94:	bd80      	pop	{r7, pc}
 8014f96:	bf00      	nop
 8014f98:	0801b394 	.word	0x0801b394
 8014f9c:	0801b6e0 	.word	0x0801b6e0
 8014fa0:	0801b3e8 	.word	0x0801b3e8
 8014fa4:	2000963c 	.word	0x2000963c

08014fa8 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8014fa8:	b580      	push	{r7, lr}
 8014faa:	b082      	sub	sp, #8
 8014fac:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8014fae:	2000      	movs	r0, #0
 8014fb0:	f7f7 fe6e 	bl	800cc90 <memp_malloc>
 8014fb4:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8014fb6:	687b      	ldr	r3, [r7, #4]
 8014fb8:	2b00      	cmp	r3, #0
 8014fba:	d007      	beq.n	8014fcc <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8014fbc:	2220      	movs	r2, #32
 8014fbe:	2100      	movs	r1, #0
 8014fc0:	6878      	ldr	r0, [r7, #4]
 8014fc2:	f002 faf3 	bl	80175ac <memset>
    pcb->ttl = UDP_TTL;
 8014fc6:	687b      	ldr	r3, [r7, #4]
 8014fc8:	22ff      	movs	r2, #255	; 0xff
 8014fca:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8014fcc:	687b      	ldr	r3, [r7, #4]
}
 8014fce:	4618      	mov	r0, r3
 8014fd0:	3708      	adds	r7, #8
 8014fd2:	46bd      	mov	sp, r7
 8014fd4:	bd80      	pop	{r7, pc}

08014fd6 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8014fd6:	b580      	push	{r7, lr}
 8014fd8:	b084      	sub	sp, #16
 8014fda:	af00      	add	r7, sp, #0
 8014fdc:	4603      	mov	r3, r0
 8014fde:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8014fe0:	f7ff ffe2 	bl	8014fa8 <udp_new>
 8014fe4:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8014fe6:	68fb      	ldr	r3, [r7, #12]
}
 8014fe8:	4618      	mov	r0, r3
 8014fea:	3710      	adds	r7, #16
 8014fec:	46bd      	mov	sp, r7
 8014fee:	bd80      	pop	{r7, pc}

08014ff0 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8014ff0:	b480      	push	{r7}
 8014ff2:	b085      	sub	sp, #20
 8014ff4:	af00      	add	r7, sp, #0
 8014ff6:	6078      	str	r0, [r7, #4]
 8014ff8:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8014ffa:	687b      	ldr	r3, [r7, #4]
 8014ffc:	2b00      	cmp	r3, #0
 8014ffe:	d01e      	beq.n	801503e <udp_netif_ip_addr_changed+0x4e>
 8015000:	687b      	ldr	r3, [r7, #4]
 8015002:	681b      	ldr	r3, [r3, #0]
 8015004:	2b00      	cmp	r3, #0
 8015006:	d01a      	beq.n	801503e <udp_netif_ip_addr_changed+0x4e>
 8015008:	683b      	ldr	r3, [r7, #0]
 801500a:	2b00      	cmp	r3, #0
 801500c:	d017      	beq.n	801503e <udp_netif_ip_addr_changed+0x4e>
 801500e:	683b      	ldr	r3, [r7, #0]
 8015010:	681b      	ldr	r3, [r3, #0]
 8015012:	2b00      	cmp	r3, #0
 8015014:	d013      	beq.n	801503e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8015016:	4b0d      	ldr	r3, [pc, #52]	; (801504c <udp_netif_ip_addr_changed+0x5c>)
 8015018:	681b      	ldr	r3, [r3, #0]
 801501a:	60fb      	str	r3, [r7, #12]
 801501c:	e00c      	b.n	8015038 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801501e:	68fb      	ldr	r3, [r7, #12]
 8015020:	681a      	ldr	r2, [r3, #0]
 8015022:	687b      	ldr	r3, [r7, #4]
 8015024:	681b      	ldr	r3, [r3, #0]
 8015026:	429a      	cmp	r2, r3
 8015028:	d103      	bne.n	8015032 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801502a:	683b      	ldr	r3, [r7, #0]
 801502c:	681a      	ldr	r2, [r3, #0]
 801502e:	68fb      	ldr	r3, [r7, #12]
 8015030:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8015032:	68fb      	ldr	r3, [r7, #12]
 8015034:	68db      	ldr	r3, [r3, #12]
 8015036:	60fb      	str	r3, [r7, #12]
 8015038:	68fb      	ldr	r3, [r7, #12]
 801503a:	2b00      	cmp	r3, #0
 801503c:	d1ef      	bne.n	801501e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801503e:	bf00      	nop
 8015040:	3714      	adds	r7, #20
 8015042:	46bd      	mov	sp, r7
 8015044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015048:	4770      	bx	lr
 801504a:	bf00      	nop
 801504c:	2000963c 	.word	0x2000963c

08015050 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8015050:	b580      	push	{r7, lr}
 8015052:	b086      	sub	sp, #24
 8015054:	af00      	add	r7, sp, #0
 8015056:	6078      	str	r0, [r7, #4]
 8015058:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801505a:	230e      	movs	r3, #14
 801505c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801505e:	687b      	ldr	r3, [r7, #4]
 8015060:	895b      	ldrh	r3, [r3, #10]
 8015062:	2b0e      	cmp	r3, #14
 8015064:	d96e      	bls.n	8015144 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8015066:	687b      	ldr	r3, [r7, #4]
 8015068:	7bdb      	ldrb	r3, [r3, #15]
 801506a:	2b00      	cmp	r3, #0
 801506c:	d106      	bne.n	801507c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801506e:	683b      	ldr	r3, [r7, #0]
 8015070:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015074:	3301      	adds	r3, #1
 8015076:	b2da      	uxtb	r2, r3
 8015078:	687b      	ldr	r3, [r7, #4]
 801507a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801507c:	687b      	ldr	r3, [r7, #4]
 801507e:	685b      	ldr	r3, [r3, #4]
 8015080:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8015082:	693b      	ldr	r3, [r7, #16]
 8015084:	7b1a      	ldrb	r2, [r3, #12]
 8015086:	7b5b      	ldrb	r3, [r3, #13]
 8015088:	021b      	lsls	r3, r3, #8
 801508a:	4313      	orrs	r3, r2
 801508c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801508e:	693b      	ldr	r3, [r7, #16]
 8015090:	781b      	ldrb	r3, [r3, #0]
 8015092:	f003 0301 	and.w	r3, r3, #1
 8015096:	2b00      	cmp	r3, #0
 8015098:	d023      	beq.n	80150e2 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801509a:	693b      	ldr	r3, [r7, #16]
 801509c:	781b      	ldrb	r3, [r3, #0]
 801509e:	2b01      	cmp	r3, #1
 80150a0:	d10f      	bne.n	80150c2 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80150a2:	693b      	ldr	r3, [r7, #16]
 80150a4:	785b      	ldrb	r3, [r3, #1]
 80150a6:	2b00      	cmp	r3, #0
 80150a8:	d11b      	bne.n	80150e2 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80150aa:	693b      	ldr	r3, [r7, #16]
 80150ac:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80150ae:	2b5e      	cmp	r3, #94	; 0x5e
 80150b0:	d117      	bne.n	80150e2 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80150b2:	687b      	ldr	r3, [r7, #4]
 80150b4:	7b5b      	ldrb	r3, [r3, #13]
 80150b6:	f043 0310 	orr.w	r3, r3, #16
 80150ba:	b2da      	uxtb	r2, r3
 80150bc:	687b      	ldr	r3, [r7, #4]
 80150be:	735a      	strb	r2, [r3, #13]
 80150c0:	e00f      	b.n	80150e2 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80150c2:	693b      	ldr	r3, [r7, #16]
 80150c4:	2206      	movs	r2, #6
 80150c6:	4928      	ldr	r1, [pc, #160]	; (8015168 <ethernet_input+0x118>)
 80150c8:	4618      	mov	r0, r3
 80150ca:	f002 fa3b 	bl	8017544 <memcmp>
 80150ce:	4603      	mov	r3, r0
 80150d0:	2b00      	cmp	r3, #0
 80150d2:	d106      	bne.n	80150e2 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80150d4:	687b      	ldr	r3, [r7, #4]
 80150d6:	7b5b      	ldrb	r3, [r3, #13]
 80150d8:	f043 0308 	orr.w	r3, r3, #8
 80150dc:	b2da      	uxtb	r2, r3
 80150de:	687b      	ldr	r3, [r7, #4]
 80150e0:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80150e2:	89fb      	ldrh	r3, [r7, #14]
 80150e4:	2b08      	cmp	r3, #8
 80150e6:	d003      	beq.n	80150f0 <ethernet_input+0xa0>
 80150e8:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80150ec:	d014      	beq.n	8015118 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80150ee:	e032      	b.n	8015156 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80150f0:	683b      	ldr	r3, [r7, #0]
 80150f2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80150f6:	f003 0308 	and.w	r3, r3, #8
 80150fa:	2b00      	cmp	r3, #0
 80150fc:	d024      	beq.n	8015148 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80150fe:	8afb      	ldrh	r3, [r7, #22]
 8015100:	4619      	mov	r1, r3
 8015102:	6878      	ldr	r0, [r7, #4]
 8015104:	f7f8 fc32 	bl	800d96c <pbuf_remove_header>
 8015108:	4603      	mov	r3, r0
 801510a:	2b00      	cmp	r3, #0
 801510c:	d11e      	bne.n	801514c <ethernet_input+0xfc>
        ip4_input(p, netif);
 801510e:	6839      	ldr	r1, [r7, #0]
 8015110:	6878      	ldr	r0, [r7, #4]
 8015112:	f7f5 ff1f 	bl	800af54 <ip4_input>
      break;
 8015116:	e013      	b.n	8015140 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8015118:	683b      	ldr	r3, [r7, #0]
 801511a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801511e:	f003 0308 	and.w	r3, r3, #8
 8015122:	2b00      	cmp	r3, #0
 8015124:	d014      	beq.n	8015150 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8015126:	8afb      	ldrh	r3, [r7, #22]
 8015128:	4619      	mov	r1, r3
 801512a:	6878      	ldr	r0, [r7, #4]
 801512c:	f7f8 fc1e 	bl	800d96c <pbuf_remove_header>
 8015130:	4603      	mov	r3, r0
 8015132:	2b00      	cmp	r3, #0
 8015134:	d10e      	bne.n	8015154 <ethernet_input+0x104>
        etharp_input(p, netif);
 8015136:	6839      	ldr	r1, [r7, #0]
 8015138:	6878      	ldr	r0, [r7, #4]
 801513a:	f7f5 f8c3 	bl	800a2c4 <etharp_input>
      break;
 801513e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8015140:	2300      	movs	r3, #0
 8015142:	e00c      	b.n	801515e <ethernet_input+0x10e>
    goto free_and_return;
 8015144:	bf00      	nop
 8015146:	e006      	b.n	8015156 <ethernet_input+0x106>
        goto free_and_return;
 8015148:	bf00      	nop
 801514a:	e004      	b.n	8015156 <ethernet_input+0x106>
        goto free_and_return;
 801514c:	bf00      	nop
 801514e:	e002      	b.n	8015156 <ethernet_input+0x106>
        goto free_and_return;
 8015150:	bf00      	nop
 8015152:	e000      	b.n	8015156 <ethernet_input+0x106>
        goto free_and_return;
 8015154:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8015156:	6878      	ldr	r0, [r7, #4]
 8015158:	f7f8 fcc0 	bl	800dadc <pbuf_free>
  return ERR_OK;
 801515c:	2300      	movs	r3, #0
}
 801515e:	4618      	mov	r0, r3
 8015160:	3718      	adds	r7, #24
 8015162:	46bd      	mov	sp, r7
 8015164:	bd80      	pop	{r7, pc}
 8015166:	bf00      	nop
 8015168:	0801bbc8 	.word	0x0801bbc8

0801516c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801516c:	b580      	push	{r7, lr}
 801516e:	b086      	sub	sp, #24
 8015170:	af00      	add	r7, sp, #0
 8015172:	60f8      	str	r0, [r7, #12]
 8015174:	60b9      	str	r1, [r7, #8]
 8015176:	607a      	str	r2, [r7, #4]
 8015178:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801517a:	8c3b      	ldrh	r3, [r7, #32]
 801517c:	4618      	mov	r0, r3
 801517e:	f7f3 fd4d 	bl	8008c1c <lwip_htons>
 8015182:	4603      	mov	r3, r0
 8015184:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8015186:	210e      	movs	r1, #14
 8015188:	68b8      	ldr	r0, [r7, #8]
 801518a:	f7f8 fbdf 	bl	800d94c <pbuf_add_header>
 801518e:	4603      	mov	r3, r0
 8015190:	2b00      	cmp	r3, #0
 8015192:	d125      	bne.n	80151e0 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8015194:	68bb      	ldr	r3, [r7, #8]
 8015196:	685b      	ldr	r3, [r3, #4]
 8015198:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801519a:	693b      	ldr	r3, [r7, #16]
 801519c:	8afa      	ldrh	r2, [r7, #22]
 801519e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80151a0:	693b      	ldr	r3, [r7, #16]
 80151a2:	2206      	movs	r2, #6
 80151a4:	6839      	ldr	r1, [r7, #0]
 80151a6:	4618      	mov	r0, r3
 80151a8:	f002 f9db 	bl	8017562 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80151ac:	693b      	ldr	r3, [r7, #16]
 80151ae:	3306      	adds	r3, #6
 80151b0:	2206      	movs	r2, #6
 80151b2:	6879      	ldr	r1, [r7, #4]
 80151b4:	4618      	mov	r0, r3
 80151b6:	f002 f9d4 	bl	8017562 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80151ba:	68fb      	ldr	r3, [r7, #12]
 80151bc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80151c0:	2b06      	cmp	r3, #6
 80151c2:	d006      	beq.n	80151d2 <ethernet_output+0x66>
 80151c4:	4b0a      	ldr	r3, [pc, #40]	; (80151f0 <ethernet_output+0x84>)
 80151c6:	f240 1233 	movw	r2, #307	; 0x133
 80151ca:	490a      	ldr	r1, [pc, #40]	; (80151f4 <ethernet_output+0x88>)
 80151cc:	480a      	ldr	r0, [pc, #40]	; (80151f8 <ethernet_output+0x8c>)
 80151ce:	f002 faa1 	bl	8017714 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80151d2:	68fb      	ldr	r3, [r7, #12]
 80151d4:	699b      	ldr	r3, [r3, #24]
 80151d6:	68b9      	ldr	r1, [r7, #8]
 80151d8:	68f8      	ldr	r0, [r7, #12]
 80151da:	4798      	blx	r3
 80151dc:	4603      	mov	r3, r0
 80151de:	e002      	b.n	80151e6 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80151e0:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80151e2:	f06f 0301 	mvn.w	r3, #1
}
 80151e6:	4618      	mov	r0, r3
 80151e8:	3718      	adds	r7, #24
 80151ea:	46bd      	mov	sp, r7
 80151ec:	bd80      	pop	{r7, pc}
 80151ee:	bf00      	nop
 80151f0:	0801b6f8 	.word	0x0801b6f8
 80151f4:	0801b730 	.word	0x0801b730
 80151f8:	0801b764 	.word	0x0801b764

080151fc <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 80151fc:	b580      	push	{r7, lr}
 80151fe:	b086      	sub	sp, #24
 8015200:	af00      	add	r7, sp, #0
 8015202:	6078      	str	r0, [r7, #4]
 8015204:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8015206:	683b      	ldr	r3, [r7, #0]
 8015208:	60bb      	str	r3, [r7, #8]
 801520a:	2304      	movs	r3, #4
 801520c:	60fb      	str	r3, [r7, #12]
 801520e:	2300      	movs	r3, #0
 8015210:	613b      	str	r3, [r7, #16]
 8015212:	2300      	movs	r3, #0
 8015214:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8015216:	f107 0308 	add.w	r3, r7, #8
 801521a:	2100      	movs	r1, #0
 801521c:	4618      	mov	r0, r3
 801521e:	f7f0 f8db 	bl	80053d8 <osMessageCreate>
 8015222:	4602      	mov	r2, r0
 8015224:	687b      	ldr	r3, [r7, #4]
 8015226:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8015228:	687b      	ldr	r3, [r7, #4]
 801522a:	681b      	ldr	r3, [r3, #0]
 801522c:	2b00      	cmp	r3, #0
 801522e:	d102      	bne.n	8015236 <sys_mbox_new+0x3a>
    return ERR_MEM;
 8015230:	f04f 33ff 	mov.w	r3, #4294967295
 8015234:	e000      	b.n	8015238 <sys_mbox_new+0x3c>

  return ERR_OK;
 8015236:	2300      	movs	r3, #0
}
 8015238:	4618      	mov	r0, r3
 801523a:	3718      	adds	r7, #24
 801523c:	46bd      	mov	sp, r7
 801523e:	bd80      	pop	{r7, pc}

08015240 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8015240:	b580      	push	{r7, lr}
 8015242:	b084      	sub	sp, #16
 8015244:	af00      	add	r7, sp, #0
 8015246:	6078      	str	r0, [r7, #4]
 8015248:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 801524a:	687b      	ldr	r3, [r7, #4]
 801524c:	681b      	ldr	r3, [r3, #0]
 801524e:	6839      	ldr	r1, [r7, #0]
 8015250:	2200      	movs	r2, #0
 8015252:	4618      	mov	r0, r3
 8015254:	f7f0 f8ea 	bl	800542c <osMessagePut>
 8015258:	4603      	mov	r3, r0
 801525a:	2b00      	cmp	r3, #0
 801525c:	d102      	bne.n	8015264 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 801525e:	2300      	movs	r3, #0
 8015260:	73fb      	strb	r3, [r7, #15]
 8015262:	e001      	b.n	8015268 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8015264:	23ff      	movs	r3, #255	; 0xff
 8015266:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8015268:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801526c:	4618      	mov	r0, r3
 801526e:	3710      	adds	r7, #16
 8015270:	46bd      	mov	sp, r7
 8015272:	bd80      	pop	{r7, pc}

08015274 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8015274:	b580      	push	{r7, lr}
 8015276:	b08c      	sub	sp, #48	; 0x30
 8015278:	af00      	add	r7, sp, #0
 801527a:	61f8      	str	r0, [r7, #28]
 801527c:	61b9      	str	r1, [r7, #24]
 801527e:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8015280:	f7ef fee6 	bl	8005050 <osKernelSysTick>
 8015284:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8015286:	697b      	ldr	r3, [r7, #20]
 8015288:	2b00      	cmp	r3, #0
 801528a:	d017      	beq.n	80152bc <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 801528c:	69fb      	ldr	r3, [r7, #28]
 801528e:	6819      	ldr	r1, [r3, #0]
 8015290:	f107 0320 	add.w	r3, r7, #32
 8015294:	697a      	ldr	r2, [r7, #20]
 8015296:	4618      	mov	r0, r3
 8015298:	f7f0 f908 	bl	80054ac <osMessageGet>

    if(event.status == osEventMessage)
 801529c:	6a3b      	ldr	r3, [r7, #32]
 801529e:	2b10      	cmp	r3, #16
 80152a0:	d109      	bne.n	80152b6 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 80152a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152a4:	461a      	mov	r2, r3
 80152a6:	69bb      	ldr	r3, [r7, #24]
 80152a8:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 80152aa:	f7ef fed1 	bl	8005050 <osKernelSysTick>
 80152ae:	4602      	mov	r2, r0
 80152b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80152b2:	1ad3      	subs	r3, r2, r3
 80152b4:	e019      	b.n	80152ea <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 80152b6:	f04f 33ff 	mov.w	r3, #4294967295
 80152ba:	e016      	b.n	80152ea <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 80152bc:	69fb      	ldr	r3, [r7, #28]
 80152be:	6819      	ldr	r1, [r3, #0]
 80152c0:	463b      	mov	r3, r7
 80152c2:	f04f 32ff 	mov.w	r2, #4294967295
 80152c6:	4618      	mov	r0, r3
 80152c8:	f7f0 f8f0 	bl	80054ac <osMessageGet>
 80152cc:	f107 0320 	add.w	r3, r7, #32
 80152d0:	463a      	mov	r2, r7
 80152d2:	ca07      	ldmia	r2, {r0, r1, r2}
 80152d4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 80152d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152da:	461a      	mov	r2, r3
 80152dc:	69bb      	ldr	r3, [r7, #24]
 80152de:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 80152e0:	f7ef feb6 	bl	8005050 <osKernelSysTick>
 80152e4:	4602      	mov	r2, r0
 80152e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80152e8:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 80152ea:	4618      	mov	r0, r3
 80152ec:	3730      	adds	r7, #48	; 0x30
 80152ee:	46bd      	mov	sp, r7
 80152f0:	bd80      	pop	{r7, pc}

080152f2 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 80152f2:	b480      	push	{r7}
 80152f4:	b083      	sub	sp, #12
 80152f6:	af00      	add	r7, sp, #0
 80152f8:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 80152fa:	687b      	ldr	r3, [r7, #4]
 80152fc:	681b      	ldr	r3, [r3, #0]
 80152fe:	2b00      	cmp	r3, #0
 8015300:	d101      	bne.n	8015306 <sys_mbox_valid+0x14>
    return 0;
 8015302:	2300      	movs	r3, #0
 8015304:	e000      	b.n	8015308 <sys_mbox_valid+0x16>
  else
    return 1;
 8015306:	2301      	movs	r3, #1
}
 8015308:	4618      	mov	r0, r3
 801530a:	370c      	adds	r7, #12
 801530c:	46bd      	mov	sp, r7
 801530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015312:	4770      	bx	lr

08015314 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8015314:	b580      	push	{r7, lr}
 8015316:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8015318:	4803      	ldr	r0, [pc, #12]	; (8015328 <sys_init+0x14>)
 801531a:	f7ef ff09 	bl	8005130 <osMutexCreate>
 801531e:	4602      	mov	r2, r0
 8015320:	4b02      	ldr	r3, [pc, #8]	; (801532c <sys_init+0x18>)
 8015322:	601a      	str	r2, [r3, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8015324:	bf00      	nop
 8015326:	bd80      	pop	{r7, pc}
 8015328:	0801bbd8 	.word	0x0801bbd8
 801532c:	20009644 	.word	0x20009644

08015330 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8015330:	b580      	push	{r7, lr}
 8015332:	b084      	sub	sp, #16
 8015334:	af00      	add	r7, sp, #0
 8015336:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8015338:	2300      	movs	r3, #0
 801533a:	60bb      	str	r3, [r7, #8]
 801533c:	2300      	movs	r3, #0
 801533e:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8015340:	f107 0308 	add.w	r3, r7, #8
 8015344:	4618      	mov	r0, r3
 8015346:	f7ef fef3 	bl	8005130 <osMutexCreate>
 801534a:	4602      	mov	r2, r0
 801534c:	687b      	ldr	r3, [r7, #4]
 801534e:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8015350:	687b      	ldr	r3, [r7, #4]
 8015352:	681b      	ldr	r3, [r3, #0]
 8015354:	2b00      	cmp	r3, #0
 8015356:	d102      	bne.n	801535e <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8015358:	f04f 33ff 	mov.w	r3, #4294967295
 801535c:	e000      	b.n	8015360 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801535e:	2300      	movs	r3, #0
}
 8015360:	4618      	mov	r0, r3
 8015362:	3710      	adds	r7, #16
 8015364:	46bd      	mov	sp, r7
 8015366:	bd80      	pop	{r7, pc}

08015368 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8015368:	b580      	push	{r7, lr}
 801536a:	b082      	sub	sp, #8
 801536c:	af00      	add	r7, sp, #0
 801536e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8015370:	687b      	ldr	r3, [r7, #4]
 8015372:	681b      	ldr	r3, [r3, #0]
 8015374:	f04f 31ff 	mov.w	r1, #4294967295
 8015378:	4618      	mov	r0, r3
 801537a:	f7ef fef1 	bl	8005160 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 801537e:	bf00      	nop
 8015380:	3708      	adds	r7, #8
 8015382:	46bd      	mov	sp, r7
 8015384:	bd80      	pop	{r7, pc}

08015386 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8015386:	b580      	push	{r7, lr}
 8015388:	b082      	sub	sp, #8
 801538a:	af00      	add	r7, sp, #0
 801538c:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801538e:	687b      	ldr	r3, [r7, #4]
 8015390:	681b      	ldr	r3, [r3, #0]
 8015392:	4618      	mov	r0, r3
 8015394:	f7ef ff32 	bl	80051fc <osMutexRelease>
}
 8015398:	bf00      	nop
 801539a:	3708      	adds	r7, #8
 801539c:	46bd      	mov	sp, r7
 801539e:	bd80      	pop	{r7, pc}

080153a0 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 80153a0:	b580      	push	{r7, lr}
 80153a2:	b08c      	sub	sp, #48	; 0x30
 80153a4:	af00      	add	r7, sp, #0
 80153a6:	60f8      	str	r0, [r7, #12]
 80153a8:	60b9      	str	r1, [r7, #8]
 80153aa:	607a      	str	r2, [r7, #4]
 80153ac:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 80153ae:	f107 0314 	add.w	r3, r7, #20
 80153b2:	2200      	movs	r2, #0
 80153b4:	601a      	str	r2, [r3, #0]
 80153b6:	605a      	str	r2, [r3, #4]
 80153b8:	609a      	str	r2, [r3, #8]
 80153ba:	60da      	str	r2, [r3, #12]
 80153bc:	611a      	str	r2, [r3, #16]
 80153be:	615a      	str	r2, [r3, #20]
 80153c0:	619a      	str	r2, [r3, #24]
 80153c2:	68fb      	ldr	r3, [r7, #12]
 80153c4:	617b      	str	r3, [r7, #20]
 80153c6:	68bb      	ldr	r3, [r7, #8]
 80153c8:	61bb      	str	r3, [r7, #24]
 80153ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80153cc:	b21b      	sxth	r3, r3
 80153ce:	83bb      	strh	r3, [r7, #28]
 80153d0:	683b      	ldr	r3, [r7, #0]
 80153d2:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 80153d4:	f107 0314 	add.w	r3, r7, #20
 80153d8:	6879      	ldr	r1, [r7, #4]
 80153da:	4618      	mov	r0, r3
 80153dc:	f7ef fe48 	bl	8005070 <osThreadCreate>
 80153e0:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 80153e2:	4618      	mov	r0, r3
 80153e4:	3730      	adds	r7, #48	; 0x30
 80153e6:	46bd      	mov	sp, r7
 80153e8:	bd80      	pop	{r7, pc}
	...

080153ec <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 80153ec:	b580      	push	{r7, lr}
 80153ee:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 80153f0:	4b04      	ldr	r3, [pc, #16]	; (8015404 <sys_arch_protect+0x18>)
 80153f2:	681b      	ldr	r3, [r3, #0]
 80153f4:	f04f 31ff 	mov.w	r1, #4294967295
 80153f8:	4618      	mov	r0, r3
 80153fa:	f7ef feb1 	bl	8005160 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 80153fe:	2301      	movs	r3, #1
}
 8015400:	4618      	mov	r0, r3
 8015402:	bd80      	pop	{r7, pc}
 8015404:	20009644 	.word	0x20009644

08015408 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8015408:	b580      	push	{r7, lr}
 801540a:	b082      	sub	sp, #8
 801540c:	af00      	add	r7, sp, #0
 801540e:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8015410:	4b04      	ldr	r3, [pc, #16]	; (8015424 <sys_arch_unprotect+0x1c>)
 8015412:	681b      	ldr	r3, [r3, #0]
 8015414:	4618      	mov	r0, r3
 8015416:	f7ef fef1 	bl	80051fc <osMutexRelease>
}
 801541a:	bf00      	nop
 801541c:	3708      	adds	r7, #8
 801541e:	46bd      	mov	sp, r7
 8015420:	bd80      	pop	{r7, pc}
 8015422:	bf00      	nop
 8015424:	20009644 	.word	0x20009644

08015428 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8015428:	b580      	push	{r7, lr}
 801542a:	b08e      	sub	sp, #56	; 0x38
 801542c:	af00      	add	r7, sp, #0
 801542e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015430:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015434:	2200      	movs	r2, #0
 8015436:	601a      	str	r2, [r3, #0]
 8015438:	605a      	str	r2, [r3, #4]
 801543a:	609a      	str	r2, [r3, #8]
 801543c:	60da      	str	r2, [r3, #12]
 801543e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8015440:	687b      	ldr	r3, [r7, #4]
 8015442:	681b      	ldr	r3, [r3, #0]
 8015444:	4a52      	ldr	r2, [pc, #328]	; (8015590 <HAL_ETH_MspInit+0x168>)
 8015446:	4293      	cmp	r3, r2
 8015448:	f040 809e 	bne.w	8015588 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 801544c:	4a51      	ldr	r2, [pc, #324]	; (8015594 <HAL_ETH_MspInit+0x16c>)
 801544e:	4b51      	ldr	r3, [pc, #324]	; (8015594 <HAL_ETH_MspInit+0x16c>)
 8015450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015452:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8015456:	6313      	str	r3, [r2, #48]	; 0x30
 8015458:	4b4e      	ldr	r3, [pc, #312]	; (8015594 <HAL_ETH_MspInit+0x16c>)
 801545a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801545c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8015460:	623b      	str	r3, [r7, #32]
 8015462:	6a3b      	ldr	r3, [r7, #32]
 8015464:	4a4b      	ldr	r2, [pc, #300]	; (8015594 <HAL_ETH_MspInit+0x16c>)
 8015466:	4b4b      	ldr	r3, [pc, #300]	; (8015594 <HAL_ETH_MspInit+0x16c>)
 8015468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801546a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801546e:	6313      	str	r3, [r2, #48]	; 0x30
 8015470:	4b48      	ldr	r3, [pc, #288]	; (8015594 <HAL_ETH_MspInit+0x16c>)
 8015472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015474:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8015478:	61fb      	str	r3, [r7, #28]
 801547a:	69fb      	ldr	r3, [r7, #28]
 801547c:	4a45      	ldr	r2, [pc, #276]	; (8015594 <HAL_ETH_MspInit+0x16c>)
 801547e:	4b45      	ldr	r3, [pc, #276]	; (8015594 <HAL_ETH_MspInit+0x16c>)
 8015480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015482:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8015486:	6313      	str	r3, [r2, #48]	; 0x30
 8015488:	4b42      	ldr	r3, [pc, #264]	; (8015594 <HAL_ETH_MspInit+0x16c>)
 801548a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801548c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8015490:	61bb      	str	r3, [r7, #24]
 8015492:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8015494:	4a3f      	ldr	r2, [pc, #252]	; (8015594 <HAL_ETH_MspInit+0x16c>)
 8015496:	4b3f      	ldr	r3, [pc, #252]	; (8015594 <HAL_ETH_MspInit+0x16c>)
 8015498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801549a:	f043 0304 	orr.w	r3, r3, #4
 801549e:	6313      	str	r3, [r2, #48]	; 0x30
 80154a0:	4b3c      	ldr	r3, [pc, #240]	; (8015594 <HAL_ETH_MspInit+0x16c>)
 80154a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80154a4:	f003 0304 	and.w	r3, r3, #4
 80154a8:	617b      	str	r3, [r7, #20]
 80154aa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80154ac:	4a39      	ldr	r2, [pc, #228]	; (8015594 <HAL_ETH_MspInit+0x16c>)
 80154ae:	4b39      	ldr	r3, [pc, #228]	; (8015594 <HAL_ETH_MspInit+0x16c>)
 80154b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80154b2:	f043 0301 	orr.w	r3, r3, #1
 80154b6:	6313      	str	r3, [r2, #48]	; 0x30
 80154b8:	4b36      	ldr	r3, [pc, #216]	; (8015594 <HAL_ETH_MspInit+0x16c>)
 80154ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80154bc:	f003 0301 	and.w	r3, r3, #1
 80154c0:	613b      	str	r3, [r7, #16]
 80154c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80154c4:	4a33      	ldr	r2, [pc, #204]	; (8015594 <HAL_ETH_MspInit+0x16c>)
 80154c6:	4b33      	ldr	r3, [pc, #204]	; (8015594 <HAL_ETH_MspInit+0x16c>)
 80154c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80154ca:	f043 0302 	orr.w	r3, r3, #2
 80154ce:	6313      	str	r3, [r2, #48]	; 0x30
 80154d0:	4b30      	ldr	r3, [pc, #192]	; (8015594 <HAL_ETH_MspInit+0x16c>)
 80154d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80154d4:	f003 0302 	and.w	r3, r3, #2
 80154d8:	60fb      	str	r3, [r7, #12]
 80154da:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80154dc:	4a2d      	ldr	r2, [pc, #180]	; (8015594 <HAL_ETH_MspInit+0x16c>)
 80154de:	4b2d      	ldr	r3, [pc, #180]	; (8015594 <HAL_ETH_MspInit+0x16c>)
 80154e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80154e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80154e6:	6313      	str	r3, [r2, #48]	; 0x30
 80154e8:	4b2a      	ldr	r3, [pc, #168]	; (8015594 <HAL_ETH_MspInit+0x16c>)
 80154ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80154ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80154f0:	60bb      	str	r3, [r7, #8]
 80154f2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80154f4:	2332      	movs	r3, #50	; 0x32
 80154f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80154f8:	2302      	movs	r3, #2
 80154fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80154fc:	2300      	movs	r3, #0
 80154fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015500:	2303      	movs	r3, #3
 8015502:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8015504:	230b      	movs	r3, #11
 8015506:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8015508:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801550c:	4619      	mov	r1, r3
 801550e:	4822      	ldr	r0, [pc, #136]	; (8015598 <HAL_ETH_MspInit+0x170>)
 8015510:	f7ec fba0 	bl	8001c54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8015514:	2386      	movs	r3, #134	; 0x86
 8015516:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015518:	2302      	movs	r3, #2
 801551a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801551c:	2300      	movs	r3, #0
 801551e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015520:	2303      	movs	r3, #3
 8015522:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8015524:	230b      	movs	r3, #11
 8015526:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015528:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801552c:	4619      	mov	r1, r3
 801552e:	481b      	ldr	r0, [pc, #108]	; (801559c <HAL_ETH_MspInit+0x174>)
 8015530:	f7ec fb90 	bl	8001c54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8015534:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8015538:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801553a:	2302      	movs	r3, #2
 801553c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801553e:	2300      	movs	r3, #0
 8015540:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015542:	2303      	movs	r3, #3
 8015544:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8015546:	230b      	movs	r3, #11
 8015548:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 801554a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801554e:	4619      	mov	r1, r3
 8015550:	4813      	ldr	r0, [pc, #76]	; (80155a0 <HAL_ETH_MspInit+0x178>)
 8015552:	f7ec fb7f 	bl	8001c54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8015556:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 801555a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801555c:	2302      	movs	r3, #2
 801555e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015560:	2300      	movs	r3, #0
 8015562:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015564:	2303      	movs	r3, #3
 8015566:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8015568:	230b      	movs	r3, #11
 801556a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 801556c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015570:	4619      	mov	r1, r3
 8015572:	480c      	ldr	r0, [pc, #48]	; (80155a4 <HAL_ETH_MspInit+0x17c>)
 8015574:	f7ec fb6e 	bl	8001c54 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8015578:	2200      	movs	r2, #0
 801557a:	2105      	movs	r1, #5
 801557c:	203d      	movs	r0, #61	; 0x3d
 801557e:	f7eb f945 	bl	800080c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8015582:	203d      	movs	r0, #61	; 0x3d
 8015584:	f7eb f95e 	bl	8000844 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8015588:	bf00      	nop
 801558a:	3738      	adds	r7, #56	; 0x38
 801558c:	46bd      	mov	sp, r7
 801558e:	bd80      	pop	{r7, pc}
 8015590:	40028000 	.word	0x40028000
 8015594:	40023800 	.word	0x40023800
 8015598:	40020800 	.word	0x40020800
 801559c:	40020000 	.word	0x40020000
 80155a0:	40020400 	.word	0x40020400
 80155a4:	40021800 	.word	0x40021800

080155a8 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 80155a8:	b580      	push	{r7, lr}
 80155aa:	b082      	sub	sp, #8
 80155ac:	af00      	add	r7, sp, #0
 80155ae:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 80155b0:	4b04      	ldr	r3, [pc, #16]	; (80155c4 <HAL_ETH_RxCpltCallback+0x1c>)
 80155b2:	681b      	ldr	r3, [r3, #0]
 80155b4:	4618      	mov	r0, r3
 80155b6:	f7ef fed9 	bl	800536c <osSemaphoreRelease>
}
 80155ba:	bf00      	nop
 80155bc:	3708      	adds	r7, #8
 80155be:	46bd      	mov	sp, r7
 80155c0:	bd80      	pop	{r7, pc}
 80155c2:	bf00      	nop
 80155c4:	20004584 	.word	0x20004584

080155c8 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80155c8:	b5b0      	push	{r4, r5, r7, lr}
 80155ca:	b090      	sub	sp, #64	; 0x40
 80155cc:	af00      	add	r7, sp, #0
 80155ce:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 80155d0:	2300      	movs	r3, #0
 80155d2:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80155d4:	4b60      	ldr	r3, [pc, #384]	; (8015758 <low_level_init+0x190>)
 80155d6:	4a61      	ldr	r2, [pc, #388]	; (801575c <low_level_init+0x194>)
 80155d8:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80155da:	4b5f      	ldr	r3, [pc, #380]	; (8015758 <low_level_init+0x190>)
 80155dc:	2201      	movs	r2, #1
 80155de:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 80155e0:	4b5d      	ldr	r3, [pc, #372]	; (8015758 <low_level_init+0x190>)
 80155e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80155e6:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80155e8:	4b5b      	ldr	r3, [pc, #364]	; (8015758 <low_level_init+0x190>)
 80155ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80155ee:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80155f0:	4b59      	ldr	r3, [pc, #356]	; (8015758 <low_level_init+0x190>)
 80155f2:	2200      	movs	r2, #0
 80155f4:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 80155f6:	2300      	movs	r3, #0
 80155f8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 80155fc:	2380      	movs	r3, #128	; 0x80
 80155fe:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 8015602:	23e1      	movs	r3, #225	; 0xe1
 8015604:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 8015608:	2300      	movs	r3, #0
 801560a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x90;
 801560e:	2390      	movs	r3, #144	; 0x90
 8015610:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x00;
 8015614:	2300      	movs	r3, #0
 8015616:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 801561a:	4a4f      	ldr	r2, [pc, #316]	; (8015758 <low_level_init+0x190>)
 801561c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8015620:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 8015622:	4b4d      	ldr	r3, [pc, #308]	; (8015758 <low_level_init+0x190>)
 8015624:	2201      	movs	r2, #1
 8015626:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8015628:	4b4b      	ldr	r3, [pc, #300]	; (8015758 <low_level_init+0x190>)
 801562a:	2200      	movs	r2, #0
 801562c:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 801562e:	4b4a      	ldr	r3, [pc, #296]	; (8015758 <low_level_init+0x190>)
 8015630:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8015634:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8015636:	4848      	ldr	r0, [pc, #288]	; (8015758 <low_level_init+0x190>)
 8015638:	f7eb f98a 	bl	8000950 <HAL_ETH_Init>
 801563c:	4603      	mov	r3, r0
 801563e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 8015642:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015646:	2b00      	cmp	r3, #0
 8015648:	d108      	bne.n	801565c <low_level_init+0x94>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 801564a:	687b      	ldr	r3, [r7, #4]
 801564c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015650:	f043 0304 	orr.w	r3, r3, #4
 8015654:	b2da      	uxtb	r2, r3
 8015656:	687b      	ldr	r3, [r7, #4]
 8015658:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 801565c:	2304      	movs	r3, #4
 801565e:	4a40      	ldr	r2, [pc, #256]	; (8015760 <low_level_init+0x198>)
 8015660:	4940      	ldr	r1, [pc, #256]	; (8015764 <low_level_init+0x19c>)
 8015662:	483d      	ldr	r0, [pc, #244]	; (8015758 <low_level_init+0x190>)
 8015664:	f7eb fb10 	bl	8000c88 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8015668:	2304      	movs	r3, #4
 801566a:	4a3f      	ldr	r2, [pc, #252]	; (8015768 <low_level_init+0x1a0>)
 801566c:	493f      	ldr	r1, [pc, #252]	; (801576c <low_level_init+0x1a4>)
 801566e:	483a      	ldr	r0, [pc, #232]	; (8015758 <low_level_init+0x190>)
 8015670:	f7eb fb73 	bl	8000d5a <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8015674:	687b      	ldr	r3, [r7, #4]
 8015676:	2206      	movs	r2, #6
 8015678:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 801567c:	4b36      	ldr	r3, [pc, #216]	; (8015758 <low_level_init+0x190>)
 801567e:	695b      	ldr	r3, [r3, #20]
 8015680:	781a      	ldrb	r2, [r3, #0]
 8015682:	687b      	ldr	r3, [r7, #4]
 8015684:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8015688:	4b33      	ldr	r3, [pc, #204]	; (8015758 <low_level_init+0x190>)
 801568a:	695b      	ldr	r3, [r3, #20]
 801568c:	785a      	ldrb	r2, [r3, #1]
 801568e:	687b      	ldr	r3, [r7, #4]
 8015690:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8015694:	4b30      	ldr	r3, [pc, #192]	; (8015758 <low_level_init+0x190>)
 8015696:	695b      	ldr	r3, [r3, #20]
 8015698:	789a      	ldrb	r2, [r3, #2]
 801569a:	687b      	ldr	r3, [r7, #4]
 801569c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80156a0:	4b2d      	ldr	r3, [pc, #180]	; (8015758 <low_level_init+0x190>)
 80156a2:	695b      	ldr	r3, [r3, #20]
 80156a4:	78da      	ldrb	r2, [r3, #3]
 80156a6:	687b      	ldr	r3, [r7, #4]
 80156a8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80156ac:	4b2a      	ldr	r3, [pc, #168]	; (8015758 <low_level_init+0x190>)
 80156ae:	695b      	ldr	r3, [r3, #20]
 80156b0:	791a      	ldrb	r2, [r3, #4]
 80156b2:	687b      	ldr	r3, [r7, #4]
 80156b4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80156b8:	4b27      	ldr	r3, [pc, #156]	; (8015758 <low_level_init+0x190>)
 80156ba:	695b      	ldr	r3, [r3, #20]
 80156bc:	795a      	ldrb	r2, [r3, #5]
 80156be:	687b      	ldr	r3, [r7, #4]
 80156c0:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 80156c4:	687b      	ldr	r3, [r7, #4]
 80156c6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80156ca:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80156cc:	687b      	ldr	r3, [r7, #4]
 80156ce:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80156d2:	f043 030a 	orr.w	r3, r3, #10
 80156d6:	b2da      	uxtb	r2, r3
 80156d8:	687b      	ldr	r3, [r7, #4]
 80156da:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 80156de:	2300      	movs	r3, #0
 80156e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80156e2:	2300      	movs	r3, #0
 80156e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 80156e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80156ea:	2101      	movs	r1, #1
 80156ec:	4618      	mov	r0, r3
 80156ee:	f7ef fdbb 	bl	8005268 <osSemaphoreCreate>
 80156f2:	4602      	mov	r2, r0
 80156f4:	4b1e      	ldr	r3, [pc, #120]	; (8015770 <low_level_init+0x1a8>)
 80156f6:	601a      	str	r2, [r3, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 80156f8:	4b1e      	ldr	r3, [pc, #120]	; (8015774 <low_level_init+0x1ac>)
 80156fa:	f107 040c 	add.w	r4, r7, #12
 80156fe:	461d      	mov	r5, r3
 8015700:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015702:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015704:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8015708:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 801570c:	f107 030c 	add.w	r3, r7, #12
 8015710:	6879      	ldr	r1, [r7, #4]
 8015712:	4618      	mov	r0, r3
 8015714:	f7ef fcac 	bl	8005070 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8015718:	480f      	ldr	r0, [pc, #60]	; (8015758 <low_level_init+0x190>)
 801571a:	f7eb fe46 	bl	80013aa <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 801571e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8015722:	461a      	mov	r2, r3
 8015724:	211d      	movs	r1, #29
 8015726:	480c      	ldr	r0, [pc, #48]	; (8015758 <low_level_init+0x190>)
 8015728:	f7eb fd71 	bl	800120e <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 801572c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801572e:	f043 030b 	orr.w	r3, r3, #11
 8015732:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8015734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015736:	461a      	mov	r2, r3
 8015738:	211d      	movs	r1, #29
 801573a:	4807      	ldr	r0, [pc, #28]	; (8015758 <low_level_init+0x190>)
 801573c:	f7eb fdcf 	bl	80012de <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8015740:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8015744:	461a      	mov	r2, r3
 8015746:	211d      	movs	r1, #29
 8015748:	4803      	ldr	r0, [pc, #12]	; (8015758 <low_level_init+0x190>)
 801574a:	f7eb fd60 	bl	800120e <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 801574e:	bf00      	nop
 8015750:	3740      	adds	r7, #64	; 0x40
 8015752:	46bd      	mov	sp, r7
 8015754:	bdb0      	pop	{r4, r5, r7, pc}
 8015756:	bf00      	nop
 8015758:	20009648 	.word	0x20009648
 801575c:	40028000 	.word	0x40028000
 8015760:	2007d8d0 	.word	0x2007d8d0
 8015764:	2007c080 	.word	0x2007c080
 8015768:	2007c100 	.word	0x2007c100
 801576c:	2007c000 	.word	0x2007c000
 8015770:	20004584 	.word	0x20004584
 8015774:	0801b794 	.word	0x0801b794

08015778 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8015778:	b580      	push	{r7, lr}
 801577a:	b08a      	sub	sp, #40	; 0x28
 801577c:	af00      	add	r7, sp, #0
 801577e:	6078      	str	r0, [r7, #4]
 8015780:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8015782:	4b4b      	ldr	r3, [pc, #300]	; (80158b0 <low_level_output+0x138>)
 8015784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015786:	689b      	ldr	r3, [r3, #8]
 8015788:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 801578a:	2300      	movs	r3, #0
 801578c:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 801578e:	2300      	movs	r3, #0
 8015790:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8015792:	2300      	movs	r3, #0
 8015794:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8015796:	2300      	movs	r3, #0
 8015798:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 801579a:	4b45      	ldr	r3, [pc, #276]	; (80158b0 <low_level_output+0x138>)
 801579c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801579e:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 80157a0:	2300      	movs	r3, #0
 80157a2:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 80157a4:	683b      	ldr	r3, [r7, #0]
 80157a6:	623b      	str	r3, [r7, #32]
 80157a8:	e05a      	b.n	8015860 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80157aa:	69bb      	ldr	r3, [r7, #24]
 80157ac:	681b      	ldr	r3, [r3, #0]
 80157ae:	2b00      	cmp	r3, #0
 80157b0:	da03      	bge.n	80157ba <low_level_output+0x42>
      {
        errval = ERR_USE;
 80157b2:	23f8      	movs	r3, #248	; 0xf8
 80157b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 80157b8:	e05c      	b.n	8015874 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 80157ba:	6a3b      	ldr	r3, [r7, #32]
 80157bc:	895b      	ldrh	r3, [r3, #10]
 80157be:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 80157c0:	2300      	movs	r3, #0
 80157c2:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80157c4:	e02f      	b.n	8015826 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 80157c6:	69fa      	ldr	r2, [r7, #28]
 80157c8:	693b      	ldr	r3, [r7, #16]
 80157ca:	18d0      	adds	r0, r2, r3
 80157cc:	6a3b      	ldr	r3, [r7, #32]
 80157ce:	685a      	ldr	r2, [r3, #4]
 80157d0:	68bb      	ldr	r3, [r7, #8]
 80157d2:	18d1      	adds	r1, r2, r3
 80157d4:	693a      	ldr	r2, [r7, #16]
 80157d6:	f240 53f4 	movw	r3, #1524	; 0x5f4
 80157da:	1a9b      	subs	r3, r3, r2
 80157dc:	461a      	mov	r2, r3
 80157de:	f001 fec0 	bl	8017562 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 80157e2:	69bb      	ldr	r3, [r7, #24]
 80157e4:	68db      	ldr	r3, [r3, #12]
 80157e6:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80157e8:	69bb      	ldr	r3, [r7, #24]
 80157ea:	681b      	ldr	r3, [r3, #0]
 80157ec:	2b00      	cmp	r3, #0
 80157ee:	da03      	bge.n	80157f8 <low_level_output+0x80>
        {
          errval = ERR_USE;
 80157f0:	23f8      	movs	r3, #248	; 0xf8
 80157f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 80157f6:	e03d      	b.n	8015874 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 80157f8:	69bb      	ldr	r3, [r7, #24]
 80157fa:	689b      	ldr	r3, [r3, #8]
 80157fc:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 80157fe:	693a      	ldr	r2, [r7, #16]
 8015800:	68fb      	ldr	r3, [r7, #12]
 8015802:	4413      	add	r3, r2
 8015804:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8015808:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 801580a:	68ba      	ldr	r2, [r7, #8]
 801580c:	693b      	ldr	r3, [r7, #16]
 801580e:	1ad3      	subs	r3, r2, r3
 8015810:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8015814:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8015816:	697a      	ldr	r2, [r7, #20]
 8015818:	693b      	ldr	r3, [r7, #16]
 801581a:	1ad3      	subs	r3, r2, r3
 801581c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8015820:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8015822:	2300      	movs	r3, #0
 8015824:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8015826:	68fa      	ldr	r2, [r7, #12]
 8015828:	693b      	ldr	r3, [r7, #16]
 801582a:	4413      	add	r3, r2
 801582c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8015830:	4293      	cmp	r3, r2
 8015832:	d8c8      	bhi.n	80157c6 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8015834:	69fa      	ldr	r2, [r7, #28]
 8015836:	693b      	ldr	r3, [r7, #16]
 8015838:	18d0      	adds	r0, r2, r3
 801583a:	6a3b      	ldr	r3, [r7, #32]
 801583c:	685a      	ldr	r2, [r3, #4]
 801583e:	68bb      	ldr	r3, [r7, #8]
 8015840:	4413      	add	r3, r2
 8015842:	68fa      	ldr	r2, [r7, #12]
 8015844:	4619      	mov	r1, r3
 8015846:	f001 fe8c 	bl	8017562 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 801584a:	693a      	ldr	r2, [r7, #16]
 801584c:	68fb      	ldr	r3, [r7, #12]
 801584e:	4413      	add	r3, r2
 8015850:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8015852:	697a      	ldr	r2, [r7, #20]
 8015854:	68fb      	ldr	r3, [r7, #12]
 8015856:	4413      	add	r3, r2
 8015858:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 801585a:	6a3b      	ldr	r3, [r7, #32]
 801585c:	681b      	ldr	r3, [r3, #0]
 801585e:	623b      	str	r3, [r7, #32]
 8015860:	6a3b      	ldr	r3, [r7, #32]
 8015862:	2b00      	cmp	r3, #0
 8015864:	d1a1      	bne.n	80157aa <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8015866:	6979      	ldr	r1, [r7, #20]
 8015868:	4811      	ldr	r0, [pc, #68]	; (80158b0 <low_level_output+0x138>)
 801586a:	f7eb fae3 	bl	8000e34 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 801586e:	2300      	movs	r3, #0
 8015870:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8015874:	4b0e      	ldr	r3, [pc, #56]	; (80158b0 <low_level_output+0x138>)
 8015876:	681a      	ldr	r2, [r3, #0]
 8015878:	f241 0314 	movw	r3, #4116	; 0x1014
 801587c:	4413      	add	r3, r2
 801587e:	681b      	ldr	r3, [r3, #0]
 8015880:	f003 0320 	and.w	r3, r3, #32
 8015884:	2b00      	cmp	r3, #0
 8015886:	d00d      	beq.n	80158a4 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8015888:	4b09      	ldr	r3, [pc, #36]	; (80158b0 <low_level_output+0x138>)
 801588a:	681a      	ldr	r2, [r3, #0]
 801588c:	f241 0314 	movw	r3, #4116	; 0x1014
 8015890:	4413      	add	r3, r2
 8015892:	2220      	movs	r2, #32
 8015894:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8015896:	4b06      	ldr	r3, [pc, #24]	; (80158b0 <low_level_output+0x138>)
 8015898:	681a      	ldr	r2, [r3, #0]
 801589a:	f241 0304 	movw	r3, #4100	; 0x1004
 801589e:	4413      	add	r3, r2
 80158a0:	2200      	movs	r2, #0
 80158a2:	601a      	str	r2, [r3, #0]
  }
  return errval;
 80158a4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80158a8:	4618      	mov	r0, r3
 80158aa:	3728      	adds	r7, #40	; 0x28
 80158ac:	46bd      	mov	sp, r7
 80158ae:	bd80      	pop	{r7, pc}
 80158b0:	20009648 	.word	0x20009648

080158b4 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80158b4:	b580      	push	{r7, lr}
 80158b6:	b08c      	sub	sp, #48	; 0x30
 80158b8:	af00      	add	r7, sp, #0
 80158ba:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80158bc:	2300      	movs	r3, #0
 80158be:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 80158c0:	2300      	movs	r3, #0
 80158c2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 80158c4:	2300      	movs	r3, #0
 80158c6:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 80158c8:	2300      	movs	r3, #0
 80158ca:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 80158cc:	2300      	movs	r3, #0
 80158ce:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 80158d0:	2300      	movs	r3, #0
 80158d2:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 80158d4:	2300      	movs	r3, #0
 80158d6:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 80158d8:	484f      	ldr	r0, [pc, #316]	; (8015a18 <low_level_input+0x164>)
 80158da:	f7eb fb95 	bl	8001008 <HAL_ETH_GetReceivedFrame_IT>
 80158de:	4603      	mov	r3, r0
 80158e0:	2b00      	cmp	r3, #0
 80158e2:	d001      	beq.n	80158e8 <low_level_input+0x34>

    return NULL;
 80158e4:	2300      	movs	r3, #0
 80158e6:	e092      	b.n	8015a0e <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 80158e8:	4b4b      	ldr	r3, [pc, #300]	; (8015a18 <low_level_input+0x164>)
 80158ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80158ec:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 80158ee:	4b4a      	ldr	r3, [pc, #296]	; (8015a18 <low_level_input+0x164>)
 80158f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80158f2:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 80158f4:	89fb      	ldrh	r3, [r7, #14]
 80158f6:	2b00      	cmp	r3, #0
 80158f8:	d007      	beq.n	801590a <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 80158fa:	89fb      	ldrh	r3, [r7, #14]
 80158fc:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8015900:	4619      	mov	r1, r3
 8015902:	2000      	movs	r0, #0
 8015904:	f7f7 fdd6 	bl	800d4b4 <pbuf_alloc>
 8015908:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 801590a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801590c:	2b00      	cmp	r3, #0
 801590e:	d04b      	beq.n	80159a8 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8015910:	4b41      	ldr	r3, [pc, #260]	; (8015a18 <low_level_input+0x164>)
 8015912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015914:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8015916:	2300      	movs	r3, #0
 8015918:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 801591a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801591c:	62bb      	str	r3, [r7, #40]	; 0x28
 801591e:	e040      	b.n	80159a2 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8015920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015922:	895b      	ldrh	r3, [r3, #10]
 8015924:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8015926:	2300      	movs	r3, #0
 8015928:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 801592a:	e021      	b.n	8015970 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 801592c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801592e:	685a      	ldr	r2, [r3, #4]
 8015930:	69bb      	ldr	r3, [r7, #24]
 8015932:	18d0      	adds	r0, r2, r3
 8015934:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015936:	69fb      	ldr	r3, [r7, #28]
 8015938:	18d1      	adds	r1, r2, r3
 801593a:	69fa      	ldr	r2, [r7, #28]
 801593c:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8015940:	1a9b      	subs	r3, r3, r2
 8015942:	461a      	mov	r2, r3
 8015944:	f001 fe0d 	bl	8017562 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8015948:	6a3b      	ldr	r3, [r7, #32]
 801594a:	68db      	ldr	r3, [r3, #12]
 801594c:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 801594e:	6a3b      	ldr	r3, [r7, #32]
 8015950:	689b      	ldr	r3, [r3, #8]
 8015952:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8015954:	69fa      	ldr	r2, [r7, #28]
 8015956:	697b      	ldr	r3, [r7, #20]
 8015958:	4413      	add	r3, r2
 801595a:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 801595e:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8015960:	69ba      	ldr	r2, [r7, #24]
 8015962:	69fb      	ldr	r3, [r7, #28]
 8015964:	1ad3      	subs	r3, r2, r3
 8015966:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 801596a:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 801596c:	2300      	movs	r3, #0
 801596e:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8015970:	697a      	ldr	r2, [r7, #20]
 8015972:	69fb      	ldr	r3, [r7, #28]
 8015974:	4413      	add	r3, r2
 8015976:	f240 52f4 	movw	r2, #1524	; 0x5f4
 801597a:	4293      	cmp	r3, r2
 801597c:	d8d6      	bhi.n	801592c <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 801597e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015980:	685a      	ldr	r2, [r3, #4]
 8015982:	69bb      	ldr	r3, [r7, #24]
 8015984:	18d0      	adds	r0, r2, r3
 8015986:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015988:	69fb      	ldr	r3, [r7, #28]
 801598a:	4413      	add	r3, r2
 801598c:	697a      	ldr	r2, [r7, #20]
 801598e:	4619      	mov	r1, r3
 8015990:	f001 fde7 	bl	8017562 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8015994:	69fa      	ldr	r2, [r7, #28]
 8015996:	697b      	ldr	r3, [r7, #20]
 8015998:	4413      	add	r3, r2
 801599a:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 801599c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801599e:	681b      	ldr	r3, [r3, #0]
 80159a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80159a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80159a4:	2b00      	cmp	r3, #0
 80159a6:	d1bb      	bne.n	8015920 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80159a8:	4b1b      	ldr	r3, [pc, #108]	; (8015a18 <low_level_input+0x164>)
 80159aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80159ac:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80159ae:	2300      	movs	r3, #0
 80159b0:	613b      	str	r3, [r7, #16]
 80159b2:	e00b      	b.n	80159cc <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 80159b4:	6a3b      	ldr	r3, [r7, #32]
 80159b6:	681b      	ldr	r3, [r3, #0]
 80159b8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80159bc:	6a3b      	ldr	r3, [r7, #32]
 80159be:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80159c0:	6a3b      	ldr	r3, [r7, #32]
 80159c2:	68db      	ldr	r3, [r3, #12]
 80159c4:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80159c6:	693b      	ldr	r3, [r7, #16]
 80159c8:	3301      	adds	r3, #1
 80159ca:	613b      	str	r3, [r7, #16]
 80159cc:	4b12      	ldr	r3, [pc, #72]	; (8015a18 <low_level_input+0x164>)
 80159ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80159d0:	693b      	ldr	r3, [r7, #16]
 80159d2:	429a      	cmp	r2, r3
 80159d4:	d8ee      	bhi.n	80159b4 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 80159d6:	4b10      	ldr	r3, [pc, #64]	; (8015a18 <low_level_input+0x164>)
 80159d8:	2200      	movs	r2, #0
 80159da:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 80159dc:	4b0e      	ldr	r3, [pc, #56]	; (8015a18 <low_level_input+0x164>)
 80159de:	681a      	ldr	r2, [r3, #0]
 80159e0:	f241 0314 	movw	r3, #4116	; 0x1014
 80159e4:	4413      	add	r3, r2
 80159e6:	681b      	ldr	r3, [r3, #0]
 80159e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80159ec:	2b00      	cmp	r3, #0
 80159ee:	d00d      	beq.n	8015a0c <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 80159f0:	4b09      	ldr	r3, [pc, #36]	; (8015a18 <low_level_input+0x164>)
 80159f2:	681a      	ldr	r2, [r3, #0]
 80159f4:	f241 0314 	movw	r3, #4116	; 0x1014
 80159f8:	4413      	add	r3, r2
 80159fa:	2280      	movs	r2, #128	; 0x80
 80159fc:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 80159fe:	4b06      	ldr	r3, [pc, #24]	; (8015a18 <low_level_input+0x164>)
 8015a00:	681a      	ldr	r2, [r3, #0]
 8015a02:	f241 0308 	movw	r3, #4104	; 0x1008
 8015a06:	4413      	add	r3, r2
 8015a08:	2200      	movs	r2, #0
 8015a0a:	601a      	str	r2, [r3, #0]
  }
  return p;
 8015a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8015a0e:	4618      	mov	r0, r3
 8015a10:	3730      	adds	r7, #48	; 0x30
 8015a12:	46bd      	mov	sp, r7
 8015a14:	bd80      	pop	{r7, pc}
 8015a16:	bf00      	nop
 8015a18:	20009648 	.word	0x20009648

08015a1c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 8015a1c:	b580      	push	{r7, lr}
 8015a1e:	b084      	sub	sp, #16
 8015a20:	af00      	add	r7, sp, #0
 8015a22:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8015a24:	687b      	ldr	r3, [r7, #4]
 8015a26:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8015a28:	4b12      	ldr	r3, [pc, #72]	; (8015a74 <ethernetif_input+0x58>)
 8015a2a:	681b      	ldr	r3, [r3, #0]
 8015a2c:	f04f 31ff 	mov.w	r1, #4294967295
 8015a30:	4618      	mov	r0, r3
 8015a32:	f7ef fc4d 	bl	80052d0 <osSemaphoreWait>
 8015a36:	4603      	mov	r3, r0
 8015a38:	2b00      	cmp	r3, #0
 8015a3a:	d1f5      	bne.n	8015a28 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 8015a3c:	480e      	ldr	r0, [pc, #56]	; (8015a78 <ethernetif_input+0x5c>)
 8015a3e:	f7ff fc93 	bl	8015368 <sys_mutex_lock>
        p = low_level_input( netif );
 8015a42:	68f8      	ldr	r0, [r7, #12]
 8015a44:	f7ff ff36 	bl	80158b4 <low_level_input>
 8015a48:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 8015a4a:	68bb      	ldr	r3, [r7, #8]
 8015a4c:	2b00      	cmp	r3, #0
 8015a4e:	d00a      	beq.n	8015a66 <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 8015a50:	68fb      	ldr	r3, [r7, #12]
 8015a52:	691b      	ldr	r3, [r3, #16]
 8015a54:	68f9      	ldr	r1, [r7, #12]
 8015a56:	68b8      	ldr	r0, [r7, #8]
 8015a58:	4798      	blx	r3
 8015a5a:	4603      	mov	r3, r0
 8015a5c:	2b00      	cmp	r3, #0
 8015a5e:	d002      	beq.n	8015a66 <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 8015a60:	68b8      	ldr	r0, [r7, #8]
 8015a62:	f7f8 f83b 	bl	800dadc <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 8015a66:	4804      	ldr	r0, [pc, #16]	; (8015a78 <ethernetif_input+0x5c>)
 8015a68:	f7ff fc8d 	bl	8015386 <sys_mutex_unlock>
      } while(p!=NULL);
 8015a6c:	68bb      	ldr	r3, [r7, #8]
 8015a6e:	2b00      	cmp	r3, #0
 8015a70:	d1e4      	bne.n	8015a3c <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8015a72:	e7d9      	b.n	8015a28 <ethernetif_input+0xc>
 8015a74:	20004584 	.word	0x20004584
 8015a78:	20004810 	.word	0x20004810

08015a7c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8015a7c:	b580      	push	{r7, lr}
 8015a7e:	b082      	sub	sp, #8
 8015a80:	af00      	add	r7, sp, #0
 8015a82:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8015a84:	687b      	ldr	r3, [r7, #4]
 8015a86:	2b00      	cmp	r3, #0
 8015a88:	d106      	bne.n	8015a98 <ethernetif_init+0x1c>
 8015a8a:	4b0e      	ldr	r3, [pc, #56]	; (8015ac4 <ethernetif_init+0x48>)
 8015a8c:	f240 222a 	movw	r2, #554	; 0x22a
 8015a90:	490d      	ldr	r1, [pc, #52]	; (8015ac8 <ethernetif_init+0x4c>)
 8015a92:	480e      	ldr	r0, [pc, #56]	; (8015acc <ethernetif_init+0x50>)
 8015a94:	f001 fe3e 	bl	8017714 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8015a98:	687b      	ldr	r3, [r7, #4]
 8015a9a:	2273      	movs	r2, #115	; 0x73
 8015a9c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8015aa0:	687b      	ldr	r3, [r7, #4]
 8015aa2:	2274      	movs	r2, #116	; 0x74
 8015aa4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8015aa8:	687b      	ldr	r3, [r7, #4]
 8015aaa:	4a09      	ldr	r2, [pc, #36]	; (8015ad0 <ethernetif_init+0x54>)
 8015aac:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8015aae:	687b      	ldr	r3, [r7, #4]
 8015ab0:	4a08      	ldr	r2, [pc, #32]	; (8015ad4 <ethernetif_init+0x58>)
 8015ab2:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8015ab4:	6878      	ldr	r0, [r7, #4]
 8015ab6:	f7ff fd87 	bl	80155c8 <low_level_init>

  return ERR_OK;
 8015aba:	2300      	movs	r3, #0
}
 8015abc:	4618      	mov	r0, r3
 8015abe:	3708      	adds	r7, #8
 8015ac0:	46bd      	mov	sp, r7
 8015ac2:	bd80      	pop	{r7, pc}
 8015ac4:	0801b7b0 	.word	0x0801b7b0
 8015ac8:	0801b7c4 	.word	0x0801b7c4
 8015acc:	0801b7d4 	.word	0x0801b7d4
 8015ad0:	0800a50d 	.word	0x0800a50d
 8015ad4:	08015779 	.word	0x08015779

08015ad8 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8015ad8:	b580      	push	{r7, lr}
 8015ada:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8015adc:	f7ea fdb2 	bl	8000644 <HAL_GetTick>
 8015ae0:	4603      	mov	r3, r0
}
 8015ae2:	4618      	mov	r0, r3
 8015ae4:	bd80      	pop	{r7, pc}
	...

08015ae8 <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void const *argument)

{
 8015ae8:	b580      	push	{r7, lr}
 8015aea:	b084      	sub	sp, #16
 8015aec:	af00      	add	r7, sp, #0
 8015aee:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8015af0:	2300      	movs	r3, #0
 8015af2:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 8015af4:	687b      	ldr	r3, [r7, #4]
 8015af6:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8015af8:	f107 0308 	add.w	r3, r7, #8
 8015afc:	461a      	mov	r2, r3
 8015afe:	2101      	movs	r1, #1
 8015b00:	4815      	ldr	r0, [pc, #84]	; (8015b58 <ethernetif_set_link+0x70>)
 8015b02:	f7eb fb84 	bl	800120e <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 8015b06:	68bb      	ldr	r3, [r7, #8]
 8015b08:	f003 0304 	and.w	r3, r3, #4
 8015b0c:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 8015b0e:	68fb      	ldr	r3, [r7, #12]
 8015b10:	681b      	ldr	r3, [r3, #0]
 8015b12:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015b16:	f003 0304 	and.w	r3, r3, #4
 8015b1a:	2b00      	cmp	r3, #0
 8015b1c:	d108      	bne.n	8015b30 <ethernetif_set_link+0x48>
 8015b1e:	68bb      	ldr	r3, [r7, #8]
 8015b20:	2b00      	cmp	r3, #0
 8015b22:	d005      	beq.n	8015b30 <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 8015b24:	68fb      	ldr	r3, [r7, #12]
 8015b26:	681b      	ldr	r3, [r3, #0]
 8015b28:	4618      	mov	r0, r3
 8015b2a:	f7f7 fb95 	bl	800d258 <netif_set_link_up>
 8015b2e:	e00f      	b.n	8015b50 <ethernetif_set_link+0x68>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 8015b30:	68fb      	ldr	r3, [r7, #12]
 8015b32:	681b      	ldr	r3, [r3, #0]
 8015b34:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015b38:	f003 0304 	and.w	r3, r3, #4
 8015b3c:	2b00      	cmp	r3, #0
 8015b3e:	d007      	beq.n	8015b50 <ethernetif_set_link+0x68>
 8015b40:	68bb      	ldr	r3, [r7, #8]
 8015b42:	2b00      	cmp	r3, #0
 8015b44:	d104      	bne.n	8015b50 <ethernetif_set_link+0x68>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 8015b46:	68fb      	ldr	r3, [r7, #12]
 8015b48:	681b      	ldr	r3, [r3, #0]
 8015b4a:	4618      	mov	r0, r3
 8015b4c:	f7f7 fbb8 	bl	800d2c0 <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 8015b50:	20c8      	movs	r0, #200	; 0xc8
 8015b52:	f7ef fad9 	bl	8005108 <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8015b56:	e7cf      	b.n	8015af8 <ethernetif_set_link+0x10>
 8015b58:	20009648 	.word	0x20009648

08015b5c <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8015b5c:	b580      	push	{r7, lr}
 8015b5e:	b084      	sub	sp, #16
 8015b60:	af00      	add	r7, sp, #0
 8015b62:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8015b64:	2300      	movs	r3, #0
 8015b66:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8015b68:	2300      	movs	r3, #0
 8015b6a:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8015b6c:	687b      	ldr	r3, [r7, #4]
 8015b6e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015b72:	f003 0304 	and.w	r3, r3, #4
 8015b76:	2b00      	cmp	r3, #0
 8015b78:	d05b      	beq.n	8015c32 <ethernetif_update_config+0xd6>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8015b7a:	4b33      	ldr	r3, [pc, #204]	; (8015c48 <ethernetif_update_config+0xec>)
 8015b7c:	685b      	ldr	r3, [r3, #4]
 8015b7e:	2b00      	cmp	r3, #0
 8015b80:	d040      	beq.n	8015c04 <ethernetif_update_config+0xa8>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8015b82:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8015b86:	2100      	movs	r1, #0
 8015b88:	482f      	ldr	r0, [pc, #188]	; (8015c48 <ethernetif_update_config+0xec>)
 8015b8a:	f7eb fba8 	bl	80012de <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8015b8e:	f7ea fd59 	bl	8000644 <HAL_GetTick>
 8015b92:	4603      	mov	r3, r0
 8015b94:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8015b96:	f107 0308 	add.w	r3, r7, #8
 8015b9a:	461a      	mov	r2, r3
 8015b9c:	2101      	movs	r1, #1
 8015b9e:	482a      	ldr	r0, [pc, #168]	; (8015c48 <ethernetif_update_config+0xec>)
 8015ba0:	f7eb fb35 	bl	800120e <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8015ba4:	f7ea fd4e 	bl	8000644 <HAL_GetTick>
 8015ba8:	4602      	mov	r2, r0
 8015baa:	68fb      	ldr	r3, [r7, #12]
 8015bac:	1ad3      	subs	r3, r2, r3
 8015bae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8015bb2:	d826      	bhi.n	8015c02 <ethernetif_update_config+0xa6>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8015bb4:	68bb      	ldr	r3, [r7, #8]
 8015bb6:	f003 0320 	and.w	r3, r3, #32
 8015bba:	2b00      	cmp	r3, #0
 8015bbc:	d0eb      	beq.n	8015b96 <ethernetif_update_config+0x3a>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8015bbe:	f107 0308 	add.w	r3, r7, #8
 8015bc2:	461a      	mov	r2, r3
 8015bc4:	211f      	movs	r1, #31
 8015bc6:	4820      	ldr	r0, [pc, #128]	; (8015c48 <ethernetif_update_config+0xec>)
 8015bc8:	f7eb fb21 	bl	800120e <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8015bcc:	68bb      	ldr	r3, [r7, #8]
 8015bce:	f003 0310 	and.w	r3, r3, #16
 8015bd2:	2b00      	cmp	r3, #0
 8015bd4:	d004      	beq.n	8015be0 <ethernetif_update_config+0x84>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8015bd6:	4b1c      	ldr	r3, [pc, #112]	; (8015c48 <ethernetif_update_config+0xec>)
 8015bd8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015bdc:	60da      	str	r2, [r3, #12]
 8015bde:	e002      	b.n	8015be6 <ethernetif_update_config+0x8a>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8015be0:	4b19      	ldr	r3, [pc, #100]	; (8015c48 <ethernetif_update_config+0xec>)
 8015be2:	2200      	movs	r2, #0
 8015be4:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8015be6:	68bb      	ldr	r3, [r7, #8]
 8015be8:	f003 0304 	and.w	r3, r3, #4
 8015bec:	2b00      	cmp	r3, #0
 8015bee:	d003      	beq.n	8015bf8 <ethernetif_update_config+0x9c>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8015bf0:	4b15      	ldr	r3, [pc, #84]	; (8015c48 <ethernetif_update_config+0xec>)
 8015bf2:	2200      	movs	r2, #0
 8015bf4:	609a      	str	r2, [r3, #8]
 8015bf6:	e014      	b.n	8015c22 <ethernetif_update_config+0xc6>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8015bf8:	4b13      	ldr	r3, [pc, #76]	; (8015c48 <ethernetif_update_config+0xec>)
 8015bfa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8015bfe:	609a      	str	r2, [r3, #8]
 8015c00:	e00f      	b.n	8015c22 <ethernetif_update_config+0xc6>
          goto error;
 8015c02:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8015c04:	4b10      	ldr	r3, [pc, #64]	; (8015c48 <ethernetif_update_config+0xec>)
 8015c06:	68db      	ldr	r3, [r3, #12]
 8015c08:	08db      	lsrs	r3, r3, #3
 8015c0a:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8015c0c:	4b0e      	ldr	r3, [pc, #56]	; (8015c48 <ethernetif_update_config+0xec>)
 8015c0e:	689b      	ldr	r3, [r3, #8]
 8015c10:	085b      	lsrs	r3, r3, #1
 8015c12:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8015c14:	4313      	orrs	r3, r2
 8015c16:	b29b      	uxth	r3, r3
 8015c18:	461a      	mov	r2, r3
 8015c1a:	2100      	movs	r1, #0
 8015c1c:	480a      	ldr	r0, [pc, #40]	; (8015c48 <ethernetif_update_config+0xec>)
 8015c1e:	f7eb fb5e 	bl	80012de <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8015c22:	2100      	movs	r1, #0
 8015c24:	4808      	ldr	r0, [pc, #32]	; (8015c48 <ethernetif_update_config+0xec>)
 8015c26:	f7eb fc1f 	bl	8001468 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8015c2a:	4807      	ldr	r0, [pc, #28]	; (8015c48 <ethernetif_update_config+0xec>)
 8015c2c:	f7eb fbbd 	bl	80013aa <HAL_ETH_Start>
 8015c30:	e002      	b.n	8015c38 <ethernetif_update_config+0xdc>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8015c32:	4805      	ldr	r0, [pc, #20]	; (8015c48 <ethernetif_update_config+0xec>)
 8015c34:	f7eb fbe8 	bl	8001408 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8015c38:	6878      	ldr	r0, [r7, #4]
 8015c3a:	f000 f807 	bl	8015c4c <ethernetif_notify_conn_changed>
}
 8015c3e:	bf00      	nop
 8015c40:	3710      	adds	r7, #16
 8015c42:	46bd      	mov	sp, r7
 8015c44:	bd80      	pop	{r7, pc}
 8015c46:	bf00      	nop
 8015c48:	20009648 	.word	0x20009648

08015c4c <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8015c4c:	b480      	push	{r7}
 8015c4e:	b083      	sub	sp, #12
 8015c50:	af00      	add	r7, sp, #0
 8015c52:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8015c54:	bf00      	nop
 8015c56:	370c      	adds	r7, #12
 8015c58:	46bd      	mov	sp, r7
 8015c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c5e:	4770      	bx	lr

08015c60 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8015c60:	b480      	push	{r7}
 8015c62:	b085      	sub	sp, #20
 8015c64:	af00      	add	r7, sp, #0
 8015c66:	60f8      	str	r0, [r7, #12]
 8015c68:	60b9      	str	r1, [r7, #8]
 8015c6a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8015c6c:	68fb      	ldr	r3, [r7, #12]
 8015c6e:	4a07      	ldr	r2, [pc, #28]	; (8015c8c <vApplicationGetIdleTaskMemory+0x2c>)
 8015c70:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8015c72:	68bb      	ldr	r3, [r7, #8]
 8015c74:	4a06      	ldr	r2, [pc, #24]	; (8015c90 <vApplicationGetIdleTaskMemory+0x30>)
 8015c76:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8015c78:	687b      	ldr	r3, [r7, #4]
 8015c7a:	2280      	movs	r2, #128	; 0x80
 8015c7c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8015c7e:	bf00      	nop
 8015c80:	3714      	adds	r7, #20
 8015c82:	46bd      	mov	sp, r7
 8015c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c88:	4770      	bx	lr
 8015c8a:	bf00      	nop
 8015c8c:	20004588 	.word	0x20004588
 8015c90:	200045dc 	.word	0x200045dc

08015c94 <User_notification>:
/* USER CODE BEGIN 2 */
extern UART_HandleTypeDef huart3;
uint8_t iptxt[100];

void User_notification(struct netif *netif)
{
 8015c94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015c96:	b083      	sub	sp, #12
 8015c98:	af00      	add	r7, sp, #0
 8015c9a:	6078      	str	r0, [r7, #4]
  if (netif_is_up(netif))
 8015c9c:	687b      	ldr	r3, [r7, #4]
 8015c9e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015ca2:	f003 0301 	and.w	r3, r3, #1
 8015ca6:	2b00      	cmp	r3, #0
 8015ca8:	d016      	beq.n	8015cd8 <User_notification+0x44>
 {

    /* Update DHCP state machine */
 //   DHCP_state = DHCP_START;
    sprintf((char *)iptxt, "User_notification Static IP address: %s\n", ip4addr_ntoa((const ip4_addr_t *)&netif->ip_addr));
 8015caa:	687b      	ldr	r3, [r7, #4]
 8015cac:	3304      	adds	r3, #4
 8015cae:	4618      	mov	r0, r3
 8015cb0:	f7f5 fcbc 	bl	800b62c <ip4addr_ntoa>
 8015cb4:	4603      	mov	r3, r0
 8015cb6:	461a      	mov	r2, r3
 8015cb8:	491b      	ldr	r1, [pc, #108]	; (8015d28 <User_notification+0x94>)
 8015cba:	481c      	ldr	r0, [pc, #112]	; (8015d2c <User_notification+0x98>)
 8015cbc:	f001 fdc0 	bl	8017840 <siprintf>
   HAL_UART_Transmit(&huart3,iptxt,strlen(iptxt),1000);
 8015cc0:	481a      	ldr	r0, [pc, #104]	; (8015d2c <User_notification+0x98>)
 8015cc2:	f7ea fabd 	bl	8000240 <strlen>
 8015cc6:	4603      	mov	r3, r0
 8015cc8:	b29a      	uxth	r2, r3
 8015cca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8015cce:	4917      	ldr	r1, [pc, #92]	; (8015d2c <User_notification+0x98>)
 8015cd0:	4817      	ldr	r0, [pc, #92]	; (8015d30 <User_notification+0x9c>)
 8015cd2:	f7ee fc63 	bl	800459c <HAL_UART_Transmit>
   // DHCP_state = DHCP_LINK_DOWN;
    sprintf((char *)iptxt,"The network cable is not connected \n");
     HAL_UART_Transmit(&huart3,iptxt,strlen(iptxt),1000);
    /* Turn On LED 2 to indicate ETH and LwIP init error */
  }
}
 8015cd6:	e022      	b.n	8015d1e <User_notification+0x8a>
    sprintf((char *)iptxt,"The network cable is not connected \n");
 8015cd8:	4b14      	ldr	r3, [pc, #80]	; (8015d2c <User_notification+0x98>)
 8015cda:	4a16      	ldr	r2, [pc, #88]	; (8015d34 <User_notification+0xa0>)
 8015cdc:	4614      	mov	r4, r2
 8015cde:	469e      	mov	lr, r3
 8015ce0:	f104 0c20 	add.w	ip, r4, #32
 8015ce4:	4675      	mov	r5, lr
 8015ce6:	4626      	mov	r6, r4
 8015ce8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8015cea:	6028      	str	r0, [r5, #0]
 8015cec:	6069      	str	r1, [r5, #4]
 8015cee:	60aa      	str	r2, [r5, #8]
 8015cf0:	60eb      	str	r3, [r5, #12]
 8015cf2:	3410      	adds	r4, #16
 8015cf4:	f10e 0e10 	add.w	lr, lr, #16
 8015cf8:	4564      	cmp	r4, ip
 8015cfa:	d1f3      	bne.n	8015ce4 <User_notification+0x50>
 8015cfc:	4673      	mov	r3, lr
 8015cfe:	4622      	mov	r2, r4
 8015d00:	6810      	ldr	r0, [r2, #0]
 8015d02:	6018      	str	r0, [r3, #0]
 8015d04:	7912      	ldrb	r2, [r2, #4]
 8015d06:	711a      	strb	r2, [r3, #4]
     HAL_UART_Transmit(&huart3,iptxt,strlen(iptxt),1000);
 8015d08:	4808      	ldr	r0, [pc, #32]	; (8015d2c <User_notification+0x98>)
 8015d0a:	f7ea fa99 	bl	8000240 <strlen>
 8015d0e:	4603      	mov	r3, r0
 8015d10:	b29a      	uxth	r2, r3
 8015d12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8015d16:	4905      	ldr	r1, [pc, #20]	; (8015d2c <User_notification+0x98>)
 8015d18:	4805      	ldr	r0, [pc, #20]	; (8015d30 <User_notification+0x9c>)
 8015d1a:	f7ee fc3f 	bl	800459c <HAL_UART_Transmit>
}
 8015d1e:	bf00      	nop
 8015d20:	370c      	adds	r7, #12
 8015d22:	46bd      	mov	sp, r7
 8015d24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015d26:	bf00      	nop
 8015d28:	0801b7fc 	.word	0x0801b7fc
 8015d2c:	200096d8 	.word	0x200096d8
 8015d30:	200097b8 	.word	0x200097b8
 8015d34:	0801b828 	.word	0x0801b828

08015d38 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8015d38:	b5b0      	push	{r4, r5, r7, lr}
 8015d3a:	b08e      	sub	sp, #56	; 0x38
 8015d3c:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8015d3e:	4b54      	ldr	r3, [pc, #336]	; (8015e90 <MX_LWIP_Init+0x158>)
 8015d40:	22c0      	movs	r2, #192	; 0xc0
 8015d42:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8015d44:	4b52      	ldr	r3, [pc, #328]	; (8015e90 <MX_LWIP_Init+0x158>)
 8015d46:	22a8      	movs	r2, #168	; 0xa8
 8015d48:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 43;
 8015d4a:	4b51      	ldr	r3, [pc, #324]	; (8015e90 <MX_LWIP_Init+0x158>)
 8015d4c:	222b      	movs	r2, #43	; 0x2b
 8015d4e:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 83;
 8015d50:	4b4f      	ldr	r3, [pc, #316]	; (8015e90 <MX_LWIP_Init+0x158>)
 8015d52:	2253      	movs	r2, #83	; 0x53
 8015d54:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8015d56:	4b4f      	ldr	r3, [pc, #316]	; (8015e94 <MX_LWIP_Init+0x15c>)
 8015d58:	22ff      	movs	r2, #255	; 0xff
 8015d5a:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8015d5c:	4b4d      	ldr	r3, [pc, #308]	; (8015e94 <MX_LWIP_Init+0x15c>)
 8015d5e:	22ff      	movs	r2, #255	; 0xff
 8015d60:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8015d62:	4b4c      	ldr	r3, [pc, #304]	; (8015e94 <MX_LWIP_Init+0x15c>)
 8015d64:	22ff      	movs	r2, #255	; 0xff
 8015d66:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8015d68:	4b4a      	ldr	r3, [pc, #296]	; (8015e94 <MX_LWIP_Init+0x15c>)
 8015d6a:	2200      	movs	r2, #0
 8015d6c:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8015d6e:	4b4a      	ldr	r3, [pc, #296]	; (8015e98 <MX_LWIP_Init+0x160>)
 8015d70:	22c0      	movs	r2, #192	; 0xc0
 8015d72:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8015d74:	4b48      	ldr	r3, [pc, #288]	; (8015e98 <MX_LWIP_Init+0x160>)
 8015d76:	22a8      	movs	r2, #168	; 0xa8
 8015d78:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 43;
 8015d7a:	4b47      	ldr	r3, [pc, #284]	; (8015e98 <MX_LWIP_Init+0x160>)
 8015d7c:	222b      	movs	r2, #43	; 0x2b
 8015d7e:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8015d80:	4b45      	ldr	r3, [pc, #276]	; (8015e98 <MX_LWIP_Init+0x160>)
 8015d82:	2201      	movs	r2, #1
 8015d84:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8015d86:	2100      	movs	r1, #0
 8015d88:	2000      	movs	r0, #0
 8015d8a:	f7f2 f9a7 	bl	80080dc <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDR0, IP_ADDR1, IP_ADDR2, IP_ADDR3);
 8015d8e:	4b43      	ldr	r3, [pc, #268]	; (8015e9c <MX_LWIP_Init+0x164>)
 8015d90:	4a43      	ldr	r2, [pc, #268]	; (8015ea0 <MX_LWIP_Init+0x168>)
 8015d92:	601a      	str	r2, [r3, #0]
  IP4_ADDR(&gw, GW_ADDR0, GW_ADDR1, GW_ADDR2, GW_ADDR3);
 8015d94:	4b43      	ldr	r3, [pc, #268]	; (8015ea4 <MX_LWIP_Init+0x16c>)
 8015d96:	4a44      	ldr	r2, [pc, #272]	; (8015ea8 <MX_LWIP_Init+0x170>)
 8015d98:	601a      	str	r2, [r3, #0]
  IP4_ADDR(&netmask, MASK_ADDR0, MASK_ADDR1, MASK_ADDR2, MASK_ADDR3);
 8015d9a:	4b44      	ldr	r3, [pc, #272]	; (8015eac <MX_LWIP_Init+0x174>)
 8015d9c:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8015da0:	601a      	str	r2, [r3, #0]
  IP4_ADDR(&dnsserver,DNS_ADDR0,DNS_ADDR1,DNS_ADDR2,DNS_ADDR3);
 8015da2:	4b43      	ldr	r3, [pc, #268]	; (8015eb0 <MX_LWIP_Init+0x178>)
 8015da4:	4a43      	ldr	r2, [pc, #268]	; (8015eb4 <MX_LWIP_Init+0x17c>)
 8015da6:	601a      	str	r2, [r3, #0]
  dns_setserver (0, &dnsserver);
 8015da8:	4941      	ldr	r1, [pc, #260]	; (8015eb0 <MX_LWIP_Init+0x178>)
 8015daa:	2000      	movs	r0, #0
 8015dac:	f7f2 ffa6 	bl	8008cfc <dns_setserver>
  printf("MyIP %d.%d.%d.%d\n\r",(ipaddr.addr & 0xff), ((ipaddr.addr >> 8) & 0xff), ((ipaddr.addr >> 16) & 0xff), (ipaddr.addr >> 24));
 8015db0:	4b3a      	ldr	r3, [pc, #232]	; (8015e9c <MX_LWIP_Init+0x164>)
 8015db2:	681b      	ldr	r3, [r3, #0]
 8015db4:	b2d9      	uxtb	r1, r3
 8015db6:	4b39      	ldr	r3, [pc, #228]	; (8015e9c <MX_LWIP_Init+0x164>)
 8015db8:	681b      	ldr	r3, [r3, #0]
 8015dba:	0a1b      	lsrs	r3, r3, #8
 8015dbc:	b2da      	uxtb	r2, r3
 8015dbe:	4b37      	ldr	r3, [pc, #220]	; (8015e9c <MX_LWIP_Init+0x164>)
 8015dc0:	681b      	ldr	r3, [r3, #0]
 8015dc2:	0c1b      	lsrs	r3, r3, #16
 8015dc4:	b2d8      	uxtb	r0, r3
 8015dc6:	4b35      	ldr	r3, [pc, #212]	; (8015e9c <MX_LWIP_Init+0x164>)
 8015dc8:	681b      	ldr	r3, [r3, #0]
 8015dca:	0e1b      	lsrs	r3, r3, #24
 8015dcc:	9300      	str	r3, [sp, #0]
 8015dce:	4603      	mov	r3, r0
 8015dd0:	4839      	ldr	r0, [pc, #228]	; (8015eb8 <MX_LWIP_Init+0x180>)
 8015dd2:	f001 fc9f 	bl	8017714 <iprintf>
  printf("dnsserverIP %d.%d.%d.%d\n\r",(dnsserver.addr & 0xff), ((dnsserver.addr >> 8) & 0xff), ((dnsserver.addr >> 16) & 0xff), (dnsserver.addr >> 24));
 8015dd6:	4b36      	ldr	r3, [pc, #216]	; (8015eb0 <MX_LWIP_Init+0x178>)
 8015dd8:	681b      	ldr	r3, [r3, #0]
 8015dda:	b2d9      	uxtb	r1, r3
 8015ddc:	4b34      	ldr	r3, [pc, #208]	; (8015eb0 <MX_LWIP_Init+0x178>)
 8015dde:	681b      	ldr	r3, [r3, #0]
 8015de0:	0a1b      	lsrs	r3, r3, #8
 8015de2:	b2da      	uxtb	r2, r3
 8015de4:	4b32      	ldr	r3, [pc, #200]	; (8015eb0 <MX_LWIP_Init+0x178>)
 8015de6:	681b      	ldr	r3, [r3, #0]
 8015de8:	0c1b      	lsrs	r3, r3, #16
 8015dea:	b2d8      	uxtb	r0, r3
 8015dec:	4b30      	ldr	r3, [pc, #192]	; (8015eb0 <MX_LWIP_Init+0x178>)
 8015dee:	681b      	ldr	r3, [r3, #0]
 8015df0:	0e1b      	lsrs	r3, r3, #24
 8015df2:	9300      	str	r3, [sp, #0]
 8015df4:	4603      	mov	r3, r0
 8015df6:	4831      	ldr	r0, [pc, #196]	; (8015ebc <MX_LWIP_Init+0x184>)
 8015df8:	f001 fc8c 	bl	8017714 <iprintf>

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8015dfc:	4b30      	ldr	r3, [pc, #192]	; (8015ec0 <MX_LWIP_Init+0x188>)
 8015dfe:	9302      	str	r3, [sp, #8]
 8015e00:	4b30      	ldr	r3, [pc, #192]	; (8015ec4 <MX_LWIP_Init+0x18c>)
 8015e02:	9301      	str	r3, [sp, #4]
 8015e04:	2300      	movs	r3, #0
 8015e06:	9300      	str	r3, [sp, #0]
 8015e08:	4b26      	ldr	r3, [pc, #152]	; (8015ea4 <MX_LWIP_Init+0x16c>)
 8015e0a:	4a28      	ldr	r2, [pc, #160]	; (8015eac <MX_LWIP_Init+0x174>)
 8015e0c:	4923      	ldr	r1, [pc, #140]	; (8015e9c <MX_LWIP_Init+0x164>)
 8015e0e:	482e      	ldr	r0, [pc, #184]	; (8015ec8 <MX_LWIP_Init+0x190>)
 8015e10:	f7f6 ffc2 	bl	800cd98 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8015e14:	482c      	ldr	r0, [pc, #176]	; (8015ec8 <MX_LWIP_Init+0x190>)
 8015e16:	f7f7 f971 	bl	800d0fc <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8015e1a:	4b2b      	ldr	r3, [pc, #172]	; (8015ec8 <MX_LWIP_Init+0x190>)
 8015e1c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015e20:	f003 0304 	and.w	r3, r3, #4
 8015e24:	2b00      	cmp	r3, #0
 8015e26:	d003      	beq.n	8015e30 <MX_LWIP_Init+0xf8>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8015e28:	4827      	ldr	r0, [pc, #156]	; (8015ec8 <MX_LWIP_Init+0x190>)
 8015e2a:	f7f7 f977 	bl	800d11c <netif_set_up>
 8015e2e:	e002      	b.n	8015e36 <MX_LWIP_Init+0xfe>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8015e30:	4825      	ldr	r0, [pc, #148]	; (8015ec8 <MX_LWIP_Init+0x190>)
 8015e32:	f7f7 f9df 	bl	800d1f4 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8015e36:	4925      	ldr	r1, [pc, #148]	; (8015ecc <MX_LWIP_Init+0x194>)
 8015e38:	4823      	ldr	r0, [pc, #140]	; (8015ec8 <MX_LWIP_Init+0x190>)
 8015e3a:	f7f7 fa71 	bl	800d320 <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(Netif_SEM);
 8015e3e:	2300      	movs	r3, #0
 8015e40:	623b      	str	r3, [r7, #32]
 8015e42:	2300      	movs	r3, #0
 8015e44:	627b      	str	r3, [r7, #36]	; 0x24
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 8015e46:	f107 0320 	add.w	r3, r7, #32
 8015e4a:	2101      	movs	r1, #1
 8015e4c:	4618      	mov	r0, r3
 8015e4e:	f7ef fa0b 	bl	8005268 <osSemaphoreCreate>
 8015e52:	4602      	mov	r2, r0
 8015e54:	4b1e      	ldr	r3, [pc, #120]	; (8015ed0 <MX_LWIP_Init+0x198>)
 8015e56:	601a      	str	r2, [r3, #0]

  link_arg.netif = &gnetif;
 8015e58:	4b1e      	ldr	r3, [pc, #120]	; (8015ed4 <MX_LWIP_Init+0x19c>)
 8015e5a:	4a1b      	ldr	r2, [pc, #108]	; (8015ec8 <MX_LWIP_Init+0x190>)
 8015e5c:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 8015e5e:	4b1c      	ldr	r3, [pc, #112]	; (8015ed0 <MX_LWIP_Init+0x198>)
 8015e60:	681b      	ldr	r3, [r3, #0]
 8015e62:	4a1c      	ldr	r2, [pc, #112]	; (8015ed4 <MX_LWIP_Init+0x19c>)
 8015e64:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 8015e66:	4b1c      	ldr	r3, [pc, #112]	; (8015ed8 <MX_LWIP_Init+0x1a0>)
 8015e68:	1d3c      	adds	r4, r7, #4
 8015e6a:	461d      	mov	r5, r3
 8015e6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015e6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015e70:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8015e74:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(LinkThr), &link_arg);
 8015e78:	1d3b      	adds	r3, r7, #4
 8015e7a:	4916      	ldr	r1, [pc, #88]	; (8015ed4 <MX_LWIP_Init+0x19c>)
 8015e7c:	4618      	mov	r0, r3
 8015e7e:	f7ef f8f7 	bl	8005070 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */
  User_notification(&gnetif);
 8015e82:	4811      	ldr	r0, [pc, #68]	; (8015ec8 <MX_LWIP_Init+0x190>)
 8015e84:	f7ff ff06 	bl	8015c94 <User_notification>

/* USER CODE END 3 */
}
 8015e88:	bf00      	nop
 8015e8a:	3728      	adds	r7, #40	; 0x28
 8015e8c:	46bd      	mov	sp, r7
 8015e8e:	bdb0      	pop	{r4, r5, r7, pc}
 8015e90:	2000973c 	.word	0x2000973c
 8015e94:	200096d4 	.word	0x200096d4
 8015e98:	20009698 	.word	0x20009698
 8015e9c:	200096d0 	.word	0x200096d0
 8015ea0:	5301a8c0 	.word	0x5301a8c0
 8015ea4:	20009748 	.word	0x20009748
 8015ea8:	0101a8c0 	.word	0x0101a8c0
 8015eac:	20009744 	.word	0x20009744
 8015eb0:	20009740 	.word	0x20009740
 8015eb4:	868079a3 	.word	0x868079a3
 8015eb8:	0801b850 	.word	0x0801b850
 8015ebc:	0801b864 	.word	0x0801b864
 8015ec0:	08008019 	.word	0x08008019
 8015ec4:	08015a7d 	.word	0x08015a7d
 8015ec8:	2000969c 	.word	0x2000969c
 8015ecc:	08015b5d 	.word	0x08015b5d
 8015ed0:	200047dc 	.word	0x200047dc
 8015ed4:	20009690 	.word	0x20009690
 8015ed8:	0801b888 	.word	0x0801b888

08015edc <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8015edc:	b480      	push	{r7}
 8015ede:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8015ee0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8015ee4:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8015ee8:	4b0b      	ldr	r3, [pc, #44]	; (8015f18 <SCB_EnableICache+0x3c>)
 8015eea:	2200      	movs	r2, #0
 8015eec:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8015ef0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8015ef4:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8015ef8:	4a07      	ldr	r2, [pc, #28]	; (8015f18 <SCB_EnableICache+0x3c>)
 8015efa:	4b07      	ldr	r3, [pc, #28]	; (8015f18 <SCB_EnableICache+0x3c>)
 8015efc:	695b      	ldr	r3, [r3, #20]
 8015efe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8015f02:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8015f04:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8015f08:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 8015f0c:	bf00      	nop
 8015f0e:	46bd      	mov	sp, r7
 8015f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f14:	4770      	bx	lr
 8015f16:	bf00      	nop
 8015f18:	e000ed00 	.word	0xe000ed00

08015f1c <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8015f1c:	b480      	push	{r7}
 8015f1e:	b085      	sub	sp, #20
 8015f20:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8015f22:	4b1d      	ldr	r3, [pc, #116]	; (8015f98 <SCB_EnableDCache+0x7c>)
 8015f24:	2200      	movs	r2, #0
 8015f26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8015f2a:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8015f2e:	4b1a      	ldr	r3, [pc, #104]	; (8015f98 <SCB_EnableDCache+0x7c>)
 8015f30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015f34:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8015f36:	687b      	ldr	r3, [r7, #4]
 8015f38:	0b5b      	lsrs	r3, r3, #13
 8015f3a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8015f3e:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8015f40:	687b      	ldr	r3, [r7, #4]
 8015f42:	08db      	lsrs	r3, r3, #3
 8015f44:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8015f48:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8015f4a:	4913      	ldr	r1, [pc, #76]	; (8015f98 <SCB_EnableDCache+0x7c>)
 8015f4c:	68fb      	ldr	r3, [r7, #12]
 8015f4e:	015a      	lsls	r2, r3, #5
 8015f50:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8015f54:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8015f56:	68ba      	ldr	r2, [r7, #8]
 8015f58:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8015f5a:	4313      	orrs	r3, r2
 8015f5c:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8015f60:	68bb      	ldr	r3, [r7, #8]
 8015f62:	1e5a      	subs	r2, r3, #1
 8015f64:	60ba      	str	r2, [r7, #8]
 8015f66:	2b00      	cmp	r3, #0
 8015f68:	d1ef      	bne.n	8015f4a <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 8015f6a:	68fb      	ldr	r3, [r7, #12]
 8015f6c:	1e5a      	subs	r2, r3, #1
 8015f6e:	60fa      	str	r2, [r7, #12]
 8015f70:	2b00      	cmp	r3, #0
 8015f72:	d1e5      	bne.n	8015f40 <SCB_EnableDCache+0x24>
 8015f74:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8015f78:	4a07      	ldr	r2, [pc, #28]	; (8015f98 <SCB_EnableDCache+0x7c>)
 8015f7a:	4b07      	ldr	r3, [pc, #28]	; (8015f98 <SCB_EnableDCache+0x7c>)
 8015f7c:	695b      	ldr	r3, [r3, #20]
 8015f7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8015f82:	6153      	str	r3, [r2, #20]
 8015f84:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8015f88:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 8015f8c:	bf00      	nop
 8015f8e:	3714      	adds	r7, #20
 8015f90:	46bd      	mov	sp, r7
 8015f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f96:	4770      	bx	lr
 8015f98:	e000ed00 	.word	0xe000ed00

08015f9c <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8015f9c:	b580      	push	{r7, lr}
 8015f9e:	b082      	sub	sp, #8
 8015fa0:	af00      	add	r7, sp, #0
 8015fa2:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  while (HAL_OK != HAL_UART_Transmit(&huart3, (uint8_t *) &ch, 1, 30000))
 8015fa4:	bf00      	nop
 8015fa6:	1d39      	adds	r1, r7, #4
 8015fa8:	f247 5330 	movw	r3, #30000	; 0x7530
 8015fac:	2201      	movs	r2, #1
 8015fae:	4805      	ldr	r0, [pc, #20]	; (8015fc4 <__io_putchar+0x28>)
 8015fb0:	f7ee faf4 	bl	800459c <HAL_UART_Transmit>
 8015fb4:	4603      	mov	r3, r0
 8015fb6:	2b00      	cmp	r3, #0
 8015fb8:	d1f5      	bne.n	8015fa6 <__io_putchar+0xa>
  {
    ;
  }
  return ch;
 8015fba:	687b      	ldr	r3, [r7, #4]
}
 8015fbc:	4618      	mov	r0, r3
 8015fbe:	3708      	adds	r7, #8
 8015fc0:	46bd      	mov	sp, r7
 8015fc2:	bd80      	pop	{r7, pc}
 8015fc4:	200097b8 	.word	0x200097b8

08015fc8 <__io_getchar>:
  * @brief  Retargets the C library scanf function to the USART.
  * @param  None
  * @retval None
  */
GETCHAR_PROTOTYPE
{
 8015fc8:	b580      	push	{r7, lr}
 8015fca:	b082      	sub	sp, #8
 8015fcc:	af00      	add	r7, sp, #0
  /* Place your implementation of fgetc here */
  /* e.g. read a character on USART and loop until the end of read */
  uint8_t ch = 0;
 8015fce:	2300      	movs	r3, #0
 8015fd0:	71fb      	strb	r3, [r7, #7]
  while (HAL_OK != HAL_UART_Receive(&huart3, (uint8_t *)&ch, 1, 30000))
 8015fd2:	bf00      	nop
 8015fd4:	1df9      	adds	r1, r7, #7
 8015fd6:	f247 5330 	movw	r3, #30000	; 0x7530
 8015fda:	2201      	movs	r2, #1
 8015fdc:	4805      	ldr	r0, [pc, #20]	; (8015ff4 <__io_getchar+0x2c>)
 8015fde:	f7ee fb6e 	bl	80046be <HAL_UART_Receive>
 8015fe2:	4603      	mov	r3, r0
 8015fe4:	2b00      	cmp	r3, #0
 8015fe6:	d1f5      	bne.n	8015fd4 <__io_getchar+0xc>
  {
    ;
  }
  return ch;
 8015fe8:	79fb      	ldrb	r3, [r7, #7]
}
 8015fea:	4618      	mov	r0, r3
 8015fec:	3708      	adds	r7, #8
 8015fee:	46bd      	mov	sp, r7
 8015ff0:	bd80      	pop	{r7, pc}
 8015ff2:	bf00      	nop
 8015ff4:	200097b8 	.word	0x200097b8

08015ff8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8015ff8:	b5b0      	push	{r4, r5, r7, lr}
 8015ffa:	b088      	sub	sp, #32
 8015ffc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8015ffe:	f000 feab 	bl	8016d58 <MPU_Config>

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8016002:	f7ff ff6b 	bl	8015edc <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8016006:	f7ff ff89 	bl	8015f1c <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 801600a:	f7ea faf9 	bl	8000600 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 801600e:	f000 f82b 	bl	8016068 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8016012:	f000 fabd 	bl	8016590 <MX_GPIO_Init>
  MX_I2C1_Init();
 8016016:	f000 f8c5 	bl	80161a4 <MX_I2C1_Init>
  MX_RNG_Init();
 801601a:	f000 f903 	bl	8016224 <MX_RNG_Init>
  MX_RTC_Init();
 801601e:	f000 f915 	bl	801624c <MX_RTC_Init>
  MX_SPI1_Init();
 8016022:	f000 f96f 	bl	8016304 <MX_SPI1_Init>
  MX_SPI2_Init();
 8016026:	f000 f9ab 	bl	8016380 <MX_SPI2_Init>
  MX_TIM2_Init();
 801602a:	f000 f9e5 	bl	80163f8 <MX_TIM2_Init>
  MX_TIM5_Init();
 801602e:	f000 fa31 	bl	8016494 <MX_TIM5_Init>
  MX_USART3_UART_Init();
 8016032:	f000 fa7d 	bl	8016530 <MX_USART3_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 8016036:	4b0a      	ldr	r3, [pc, #40]	; (8016060 <main+0x68>)
 8016038:	1d3c      	adds	r4, r7, #4
 801603a:	461d      	mov	r5, r3
 801603c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801603e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016040:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8016044:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8016048:	1d3b      	adds	r3, r7, #4
 801604a:	2100      	movs	r1, #0
 801604c:	4618      	mov	r0, r3
 801604e:	f7ef f80f 	bl	8005070 <osThreadCreate>
 8016052:	4602      	mov	r2, r0
 8016054:	4b03      	ldr	r3, [pc, #12]	; (8016064 <main+0x6c>)
 8016056:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8016058:	f7ee fff3 	bl	8005042 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 801605c:	e7fe      	b.n	801605c <main+0x64>
 801605e:	bf00      	nop
 8016060:	0801b8d0 	.word	0x0801b8d0
 8016064:	2000974c 	.word	0x2000974c

08016068 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8016068:	b580      	push	{r7, lr}
 801606a:	b0b8      	sub	sp, #224	; 0xe0
 801606c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 801606e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8016072:	2234      	movs	r2, #52	; 0x34
 8016074:	2100      	movs	r1, #0
 8016076:	4618      	mov	r0, r3
 8016078:	f001 fa98 	bl	80175ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 801607c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8016080:	2200      	movs	r2, #0
 8016082:	601a      	str	r2, [r3, #0]
 8016084:	605a      	str	r2, [r3, #4]
 8016086:	609a      	str	r2, [r3, #8]
 8016088:	60da      	str	r2, [r3, #12]
 801608a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801608c:	f107 0308 	add.w	r3, r7, #8
 8016090:	2290      	movs	r2, #144	; 0x90
 8016092:	2100      	movs	r1, #0
 8016094:	4618      	mov	r0, r3
 8016096:	f001 fa89 	bl	80175ac <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 801609a:	f7ec f8df 	bl	800225c <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 801609e:	4a3e      	ldr	r2, [pc, #248]	; (8016198 <SystemClock_Config+0x130>)
 80160a0:	4b3d      	ldr	r3, [pc, #244]	; (8016198 <SystemClock_Config+0x130>)
 80160a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80160a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80160a8:	6413      	str	r3, [r2, #64]	; 0x40
 80160aa:	4b3b      	ldr	r3, [pc, #236]	; (8016198 <SystemClock_Config+0x130>)
 80160ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80160ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80160b2:	607b      	str	r3, [r7, #4]
 80160b4:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80160b6:	4a39      	ldr	r2, [pc, #228]	; (801619c <SystemClock_Config+0x134>)
 80160b8:	4b38      	ldr	r3, [pc, #224]	; (801619c <SystemClock_Config+0x134>)
 80160ba:	681b      	ldr	r3, [r3, #0]
 80160bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80160c0:	6013      	str	r3, [r2, #0]
 80160c2:	4b36      	ldr	r3, [pc, #216]	; (801619c <SystemClock_Config+0x134>)
 80160c4:	681b      	ldr	r3, [r3, #0]
 80160c6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80160ca:	603b      	str	r3, [r7, #0]
 80160cc:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80160ce:	2309      	movs	r3, #9
 80160d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80160d4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80160d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80160dc:	2301      	movs	r3, #1
 80160de:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80160e2:	2302      	movs	r3, #2
 80160e4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80160e8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80160ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 80160f0:	2304      	movs	r3, #4
 80160f2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 80160f6:	23d8      	movs	r3, #216	; 0xd8
 80160f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80160fc:	2302      	movs	r3, #2
 80160fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8016102:	2309      	movs	r3, #9
 8016104:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8016108:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 801610c:	4618      	mov	r0, r3
 801610e:	f7ec f905 	bl	800231c <HAL_RCC_OscConfig>
 8016112:	4603      	mov	r3, r0
 8016114:	2b00      	cmp	r3, #0
 8016116:	d001      	beq.n	801611c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8016118:	f000 fe72 	bl	8016e00 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 801611c:	f7ec f8ae 	bl	800227c <HAL_PWREx_EnableOverDrive>
 8016120:	4603      	mov	r3, r0
 8016122:	2b00      	cmp	r3, #0
 8016124:	d001      	beq.n	801612a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8016126:	f000 fe6b 	bl	8016e00 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 801612a:	230f      	movs	r3, #15
 801612c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8016130:	2302      	movs	r3, #2
 8016132:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8016136:	2300      	movs	r3, #0
 8016138:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 801613c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8016140:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8016144:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8016148:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 801614c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8016150:	2107      	movs	r1, #7
 8016152:	4618      	mov	r0, r3
 8016154:	f7ec fb90 	bl	8002878 <HAL_RCC_ClockConfig>
 8016158:	4603      	mov	r3, r0
 801615a:	2b00      	cmp	r3, #0
 801615c:	d001      	beq.n	8016162 <SystemClock_Config+0xfa>
  {
    Error_Handler();
 801615e:	f000 fe4f 	bl	8016e00 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART3
 8016162:	4b0f      	ldr	r3, [pc, #60]	; (80161a0 <SystemClock_Config+0x138>)
 8016164:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8016166:	f44f 7300 	mov.w	r3, #512	; 0x200
 801616a:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 801616c:	2300      	movs	r3, #0
 801616e:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8016170:	2300      	movs	r3, #0
 8016172:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8016174:	2300      	movs	r3, #0
 8016176:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801617a:	f107 0308 	add.w	r3, r7, #8
 801617e:	4618      	mov	r0, r3
 8016180:	f7ec fda4 	bl	8002ccc <HAL_RCCEx_PeriphCLKConfig>
 8016184:	4603      	mov	r3, r0
 8016186:	2b00      	cmp	r3, #0
 8016188:	d001      	beq.n	801618e <SystemClock_Config+0x126>
  {
    Error_Handler();
 801618a:	f000 fe39 	bl	8016e00 <Error_Handler>
  }
}
 801618e:	bf00      	nop
 8016190:	37e0      	adds	r7, #224	; 0xe0
 8016192:	46bd      	mov	sp, r7
 8016194:	bd80      	pop	{r7, pc}
 8016196:	bf00      	nop
 8016198:	40023800 	.word	0x40023800
 801619c:	40007000 	.word	0x40007000
 80161a0:	00204120 	.word	0x00204120

080161a4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80161a4:	b580      	push	{r7, lr}
 80161a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80161a8:	4b1b      	ldr	r3, [pc, #108]	; (8016218 <MX_I2C1_Init+0x74>)
 80161aa:	4a1c      	ldr	r2, [pc, #112]	; (801621c <MX_I2C1_Init+0x78>)
 80161ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 80161ae:	4b1a      	ldr	r3, [pc, #104]	; (8016218 <MX_I2C1_Init+0x74>)
 80161b0:	4a1b      	ldr	r2, [pc, #108]	; (8016220 <MX_I2C1_Init+0x7c>)
 80161b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80161b4:	4b18      	ldr	r3, [pc, #96]	; (8016218 <MX_I2C1_Init+0x74>)
 80161b6:	2200      	movs	r2, #0
 80161b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80161ba:	4b17      	ldr	r3, [pc, #92]	; (8016218 <MX_I2C1_Init+0x74>)
 80161bc:	2201      	movs	r2, #1
 80161be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80161c0:	4b15      	ldr	r3, [pc, #84]	; (8016218 <MX_I2C1_Init+0x74>)
 80161c2:	2200      	movs	r2, #0
 80161c4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80161c6:	4b14      	ldr	r3, [pc, #80]	; (8016218 <MX_I2C1_Init+0x74>)
 80161c8:	2200      	movs	r2, #0
 80161ca:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80161cc:	4b12      	ldr	r3, [pc, #72]	; (8016218 <MX_I2C1_Init+0x74>)
 80161ce:	2200      	movs	r2, #0
 80161d0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80161d2:	4b11      	ldr	r3, [pc, #68]	; (8016218 <MX_I2C1_Init+0x74>)
 80161d4:	2200      	movs	r2, #0
 80161d6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80161d8:	4b0f      	ldr	r3, [pc, #60]	; (8016218 <MX_I2C1_Init+0x74>)
 80161da:	2200      	movs	r2, #0
 80161dc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80161de:	480e      	ldr	r0, [pc, #56]	; (8016218 <MX_I2C1_Init+0x74>)
 80161e0:	f7eb ff16 	bl	8002010 <HAL_I2C_Init>
 80161e4:	4603      	mov	r3, r0
 80161e6:	2b00      	cmp	r3, #0
 80161e8:	d001      	beq.n	80161ee <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80161ea:	f000 fe09 	bl	8016e00 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80161ee:	2100      	movs	r1, #0
 80161f0:	4809      	ldr	r0, [pc, #36]	; (8016218 <MX_I2C1_Init+0x74>)
 80161f2:	f7eb ff9b 	bl	800212c <HAL_I2CEx_ConfigAnalogFilter>
 80161f6:	4603      	mov	r3, r0
 80161f8:	2b00      	cmp	r3, #0
 80161fa:	d001      	beq.n	8016200 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80161fc:	f000 fe00 	bl	8016e00 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8016200:	2100      	movs	r1, #0
 8016202:	4805      	ldr	r0, [pc, #20]	; (8016218 <MX_I2C1_Init+0x74>)
 8016204:	f7eb ffdd 	bl	80021c2 <HAL_I2CEx_ConfigDigitalFilter>
 8016208:	4603      	mov	r3, r0
 801620a:	2b00      	cmp	r3, #0
 801620c:	d001      	beq.n	8016212 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 801620e:	f000 fdf7 	bl	8016e00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8016212:	bf00      	nop
 8016214:	bd80      	pop	{r7, pc}
 8016216:	bf00      	nop
 8016218:	2000983c 	.word	0x2000983c
 801621c:	40005400 	.word	0x40005400
 8016220:	20404768 	.word	0x20404768

08016224 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8016224:	b580      	push	{r7, lr}
 8016226:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8016228:	4b06      	ldr	r3, [pc, #24]	; (8016244 <MX_RNG_Init+0x20>)
 801622a:	4a07      	ldr	r2, [pc, #28]	; (8016248 <MX_RNG_Init+0x24>)
 801622c:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 801622e:	4805      	ldr	r0, [pc, #20]	; (8016244 <MX_RNG_Init+0x20>)
 8016230:	f7ed f972 	bl	8003518 <HAL_RNG_Init>
 8016234:	4603      	mov	r3, r0
 8016236:	2b00      	cmp	r3, #0
 8016238:	d001      	beq.n	801623e <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 801623a:	f000 fde1 	bl	8016e00 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 801623e:	bf00      	nop
 8016240:	bd80      	pop	{r7, pc}
 8016242:	bf00      	nop
 8016244:	20009a08 	.word	0x20009a08
 8016248:	50060800 	.word	0x50060800

0801624c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 801624c:	b580      	push	{r7, lr}
 801624e:	b088      	sub	sp, #32
 8016250:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8016252:	f107 0308 	add.w	r3, r7, #8
 8016256:	2200      	movs	r2, #0
 8016258:	601a      	str	r2, [r3, #0]
 801625a:	605a      	str	r2, [r3, #4]
 801625c:	609a      	str	r2, [r3, #8]
 801625e:	60da      	str	r2, [r3, #12]
 8016260:	611a      	str	r2, [r3, #16]
 8016262:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8016264:	2300      	movs	r3, #0
 8016266:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8016268:	4b24      	ldr	r3, [pc, #144]	; (80162fc <MX_RTC_Init+0xb0>)
 801626a:	4a25      	ldr	r2, [pc, #148]	; (8016300 <MX_RTC_Init+0xb4>)
 801626c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 801626e:	4b23      	ldr	r3, [pc, #140]	; (80162fc <MX_RTC_Init+0xb0>)
 8016270:	2200      	movs	r2, #0
 8016272:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8016274:	4b21      	ldr	r3, [pc, #132]	; (80162fc <MX_RTC_Init+0xb0>)
 8016276:	227f      	movs	r2, #127	; 0x7f
 8016278:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 801627a:	4b20      	ldr	r3, [pc, #128]	; (80162fc <MX_RTC_Init+0xb0>)
 801627c:	22ff      	movs	r2, #255	; 0xff
 801627e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8016280:	4b1e      	ldr	r3, [pc, #120]	; (80162fc <MX_RTC_Init+0xb0>)
 8016282:	2200      	movs	r2, #0
 8016284:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8016286:	4b1d      	ldr	r3, [pc, #116]	; (80162fc <MX_RTC_Init+0xb0>)
 8016288:	2200      	movs	r2, #0
 801628a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 801628c:	4b1b      	ldr	r3, [pc, #108]	; (80162fc <MX_RTC_Init+0xb0>)
 801628e:	2200      	movs	r2, #0
 8016290:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8016292:	481a      	ldr	r0, [pc, #104]	; (80162fc <MX_RTC_Init+0xb0>)
 8016294:	f7ed f96a 	bl	800356c <HAL_RTC_Init>
 8016298:	4603      	mov	r3, r0
 801629a:	2b00      	cmp	r3, #0
 801629c:	d001      	beq.n	80162a2 <MX_RTC_Init+0x56>
  {
    Error_Handler();
 801629e:	f000 fdaf 	bl	8016e00 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80162a2:	2300      	movs	r3, #0
 80162a4:	723b      	strb	r3, [r7, #8]
  sTime.Minutes = 0x0;
 80162a6:	2300      	movs	r3, #0
 80162a8:	727b      	strb	r3, [r7, #9]
  sTime.Seconds = 0x0;
 80162aa:	2300      	movs	r3, #0
 80162ac:	72bb      	strb	r3, [r7, #10]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80162ae:	2300      	movs	r3, #0
 80162b0:	61bb      	str	r3, [r7, #24]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80162b2:	2300      	movs	r3, #0
 80162b4:	61fb      	str	r3, [r7, #28]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80162b6:	f107 0308 	add.w	r3, r7, #8
 80162ba:	2201      	movs	r2, #1
 80162bc:	4619      	mov	r1, r3
 80162be:	480f      	ldr	r0, [pc, #60]	; (80162fc <MX_RTC_Init+0xb0>)
 80162c0:	f7ed f9e6 	bl	8003690 <HAL_RTC_SetTime>
 80162c4:	4603      	mov	r3, r0
 80162c6:	2b00      	cmp	r3, #0
 80162c8:	d001      	beq.n	80162ce <MX_RTC_Init+0x82>
  {
    Error_Handler();
 80162ca:	f000 fd99 	bl	8016e00 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80162ce:	2301      	movs	r3, #1
 80162d0:	713b      	strb	r3, [r7, #4]
  sDate.Month = RTC_MONTH_JANUARY;
 80162d2:	2301      	movs	r3, #1
 80162d4:	717b      	strb	r3, [r7, #5]
  sDate.Date = 0x1;
 80162d6:	2301      	movs	r3, #1
 80162d8:	71bb      	strb	r3, [r7, #6]
  sDate.Year = 0x0;
 80162da:	2300      	movs	r3, #0
 80162dc:	71fb      	strb	r3, [r7, #7]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80162de:	1d3b      	adds	r3, r7, #4
 80162e0:	2201      	movs	r2, #1
 80162e2:	4619      	mov	r1, r3
 80162e4:	4805      	ldr	r0, [pc, #20]	; (80162fc <MX_RTC_Init+0xb0>)
 80162e6:	f7ed fa91 	bl	800380c <HAL_RTC_SetDate>
 80162ea:	4603      	mov	r3, r0
 80162ec:	2b00      	cmp	r3, #0
 80162ee:	d001      	beq.n	80162f4 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 80162f0:	f000 fd86 	bl	8016e00 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80162f4:	bf00      	nop
 80162f6:	3720      	adds	r7, #32
 80162f8:	46bd      	mov	sp, r7
 80162fa:	bd80      	pop	{r7, pc}
 80162fc:	200099e8 	.word	0x200099e8
 8016300:	40002800 	.word	0x40002800

08016304 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8016304:	b580      	push	{r7, lr}
 8016306:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8016308:	4b1b      	ldr	r3, [pc, #108]	; (8016378 <MX_SPI1_Init+0x74>)
 801630a:	4a1c      	ldr	r2, [pc, #112]	; (801637c <MX_SPI1_Init+0x78>)
 801630c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 801630e:	4b1a      	ldr	r3, [pc, #104]	; (8016378 <MX_SPI1_Init+0x74>)
 8016310:	f44f 7282 	mov.w	r2, #260	; 0x104
 8016314:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8016316:	4b18      	ldr	r3, [pc, #96]	; (8016378 <MX_SPI1_Init+0x74>)
 8016318:	2200      	movs	r2, #0
 801631a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 801631c:	4b16      	ldr	r3, [pc, #88]	; (8016378 <MX_SPI1_Init+0x74>)
 801631e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8016322:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8016324:	4b14      	ldr	r3, [pc, #80]	; (8016378 <MX_SPI1_Init+0x74>)
 8016326:	2200      	movs	r2, #0
 8016328:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 801632a:	4b13      	ldr	r3, [pc, #76]	; (8016378 <MX_SPI1_Init+0x74>)
 801632c:	2200      	movs	r2, #0
 801632e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8016330:	4b11      	ldr	r3, [pc, #68]	; (8016378 <MX_SPI1_Init+0x74>)
 8016332:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8016336:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8016338:	4b0f      	ldr	r3, [pc, #60]	; (8016378 <MX_SPI1_Init+0x74>)
 801633a:	2200      	movs	r2, #0
 801633c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 801633e:	4b0e      	ldr	r3, [pc, #56]	; (8016378 <MX_SPI1_Init+0x74>)
 8016340:	2200      	movs	r2, #0
 8016342:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8016344:	4b0c      	ldr	r3, [pc, #48]	; (8016378 <MX_SPI1_Init+0x74>)
 8016346:	2200      	movs	r2, #0
 8016348:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801634a:	4b0b      	ldr	r3, [pc, #44]	; (8016378 <MX_SPI1_Init+0x74>)
 801634c:	2200      	movs	r2, #0
 801634e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8016350:	4b09      	ldr	r3, [pc, #36]	; (8016378 <MX_SPI1_Init+0x74>)
 8016352:	2207      	movs	r2, #7
 8016354:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8016356:	4b08      	ldr	r3, [pc, #32]	; (8016378 <MX_SPI1_Init+0x74>)
 8016358:	2200      	movs	r2, #0
 801635a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 801635c:	4b06      	ldr	r3, [pc, #24]	; (8016378 <MX_SPI1_Init+0x74>)
 801635e:	2208      	movs	r2, #8
 8016360:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8016362:	4805      	ldr	r0, [pc, #20]	; (8016378 <MX_SPI1_Init+0x74>)
 8016364:	f7ed fb6c 	bl	8003a40 <HAL_SPI_Init>
 8016368:	4603      	mov	r3, r0
 801636a:	2b00      	cmp	r3, #0
 801636c:	d001      	beq.n	8016372 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 801636e:	f000 fd47 	bl	8016e00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8016372:	bf00      	nop
 8016374:	bd80      	pop	{r7, pc}
 8016376:	bf00      	nop
 8016378:	20009a7c 	.word	0x20009a7c
 801637c:	40013000 	.word	0x40013000

08016380 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8016380:	b580      	push	{r7, lr}
 8016382:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8016384:	4b1a      	ldr	r3, [pc, #104]	; (80163f0 <MX_SPI2_Init+0x70>)
 8016386:	4a1b      	ldr	r2, [pc, #108]	; (80163f4 <MX_SPI2_Init+0x74>)
 8016388:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 801638a:	4b19      	ldr	r3, [pc, #100]	; (80163f0 <MX_SPI2_Init+0x70>)
 801638c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8016390:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8016392:	4b17      	ldr	r3, [pc, #92]	; (80163f0 <MX_SPI2_Init+0x70>)
 8016394:	2200      	movs	r2, #0
 8016396:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8016398:	4b15      	ldr	r3, [pc, #84]	; (80163f0 <MX_SPI2_Init+0x70>)
 801639a:	f44f 7240 	mov.w	r2, #768	; 0x300
 801639e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80163a0:	4b13      	ldr	r3, [pc, #76]	; (80163f0 <MX_SPI2_Init+0x70>)
 80163a2:	2200      	movs	r2, #0
 80163a4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80163a6:	4b12      	ldr	r3, [pc, #72]	; (80163f0 <MX_SPI2_Init+0x70>)
 80163a8:	2200      	movs	r2, #0
 80163aa:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 80163ac:	4b10      	ldr	r3, [pc, #64]	; (80163f0 <MX_SPI2_Init+0x70>)
 80163ae:	2200      	movs	r2, #0
 80163b0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80163b2:	4b0f      	ldr	r3, [pc, #60]	; (80163f0 <MX_SPI2_Init+0x70>)
 80163b4:	2200      	movs	r2, #0
 80163b6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80163b8:	4b0d      	ldr	r3, [pc, #52]	; (80163f0 <MX_SPI2_Init+0x70>)
 80163ba:	2200      	movs	r2, #0
 80163bc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80163be:	4b0c      	ldr	r3, [pc, #48]	; (80163f0 <MX_SPI2_Init+0x70>)
 80163c0:	2200      	movs	r2, #0
 80163c2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80163c4:	4b0a      	ldr	r3, [pc, #40]	; (80163f0 <MX_SPI2_Init+0x70>)
 80163c6:	2200      	movs	r2, #0
 80163c8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80163ca:	4b09      	ldr	r3, [pc, #36]	; (80163f0 <MX_SPI2_Init+0x70>)
 80163cc:	2207      	movs	r2, #7
 80163ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80163d0:	4b07      	ldr	r3, [pc, #28]	; (80163f0 <MX_SPI2_Init+0x70>)
 80163d2:	2200      	movs	r2, #0
 80163d4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80163d6:	4b06      	ldr	r3, [pc, #24]	; (80163f0 <MX_SPI2_Init+0x70>)
 80163d8:	2208      	movs	r2, #8
 80163da:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80163dc:	4804      	ldr	r0, [pc, #16]	; (80163f0 <MX_SPI2_Init+0x70>)
 80163de:	f7ed fb2f 	bl	8003a40 <HAL_SPI_Init>
 80163e2:	4603      	mov	r3, r0
 80163e4:	2b00      	cmp	r3, #0
 80163e6:	d001      	beq.n	80163ec <MX_SPI2_Init+0x6c>
  {
    Error_Handler();
 80163e8:	f000 fd0a 	bl	8016e00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80163ec:	bf00      	nop
 80163ee:	bd80      	pop	{r7, pc}
 80163f0:	20009750 	.word	0x20009750
 80163f4:	40003800 	.word	0x40003800

080163f8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80163f8:	b580      	push	{r7, lr}
 80163fa:	b088      	sub	sp, #32
 80163fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80163fe:	f107 0310 	add.w	r3, r7, #16
 8016402:	2200      	movs	r2, #0
 8016404:	601a      	str	r2, [r3, #0]
 8016406:	605a      	str	r2, [r3, #4]
 8016408:	609a      	str	r2, [r3, #8]
 801640a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801640c:	1d3b      	adds	r3, r7, #4
 801640e:	2200      	movs	r2, #0
 8016410:	601a      	str	r2, [r3, #0]
 8016412:	605a      	str	r2, [r3, #4]
 8016414:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8016416:	4b1e      	ldr	r3, [pc, #120]	; (8016490 <MX_TIM2_Init+0x98>)
 8016418:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801641c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 801641e:	4b1c      	ldr	r3, [pc, #112]	; (8016490 <MX_TIM2_Init+0x98>)
 8016420:	2200      	movs	r2, #0
 8016422:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8016424:	4b1a      	ldr	r3, [pc, #104]	; (8016490 <MX_TIM2_Init+0x98>)
 8016426:	2200      	movs	r2, #0
 8016428:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 801642a:	4b19      	ldr	r3, [pc, #100]	; (8016490 <MX_TIM2_Init+0x98>)
 801642c:	f04f 32ff 	mov.w	r2, #4294967295
 8016430:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8016432:	4b17      	ldr	r3, [pc, #92]	; (8016490 <MX_TIM2_Init+0x98>)
 8016434:	2200      	movs	r2, #0
 8016436:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8016438:	4b15      	ldr	r3, [pc, #84]	; (8016490 <MX_TIM2_Init+0x98>)
 801643a:	2200      	movs	r2, #0
 801643c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 801643e:	4814      	ldr	r0, [pc, #80]	; (8016490 <MX_TIM2_Init+0x98>)
 8016440:	f7ed fba7 	bl	8003b92 <HAL_TIM_Base_Init>
 8016444:	4603      	mov	r3, r0
 8016446:	2b00      	cmp	r3, #0
 8016448:	d001      	beq.n	801644e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 801644a:	f000 fcd9 	bl	8016e00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801644e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8016452:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8016454:	f107 0310 	add.w	r3, r7, #16
 8016458:	4619      	mov	r1, r3
 801645a:	480d      	ldr	r0, [pc, #52]	; (8016490 <MX_TIM2_Init+0x98>)
 801645c:	f7ed fd88 	bl	8003f70 <HAL_TIM_ConfigClockSource>
 8016460:	4603      	mov	r3, r0
 8016462:	2b00      	cmp	r3, #0
 8016464:	d001      	beq.n	801646a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8016466:	f000 fccb 	bl	8016e00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801646a:	2300      	movs	r3, #0
 801646c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801646e:	2300      	movs	r3, #0
 8016470:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8016472:	1d3b      	adds	r3, r7, #4
 8016474:	4619      	mov	r1, r3
 8016476:	4806      	ldr	r0, [pc, #24]	; (8016490 <MX_TIM2_Init+0x98>)
 8016478:	f7ed ff96 	bl	80043a8 <HAL_TIMEx_MasterConfigSynchronization>
 801647c:	4603      	mov	r3, r0
 801647e:	2b00      	cmp	r3, #0
 8016480:	d001      	beq.n	8016486 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8016482:	f000 fcbd 	bl	8016e00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8016486:	bf00      	nop
 8016488:	3720      	adds	r7, #32
 801648a:	46bd      	mov	sp, r7
 801648c:	bd80      	pop	{r7, pc}
 801648e:	bf00      	nop
 8016490:	20009ae0 	.word	0x20009ae0

08016494 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8016494:	b580      	push	{r7, lr}
 8016496:	b088      	sub	sp, #32
 8016498:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 801649a:	f107 0310 	add.w	r3, r7, #16
 801649e:	2200      	movs	r2, #0
 80164a0:	601a      	str	r2, [r3, #0]
 80164a2:	605a      	str	r2, [r3, #4]
 80164a4:	609a      	str	r2, [r3, #8]
 80164a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80164a8:	1d3b      	adds	r3, r7, #4
 80164aa:	2200      	movs	r2, #0
 80164ac:	601a      	str	r2, [r3, #0]
 80164ae:	605a      	str	r2, [r3, #4]
 80164b0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80164b2:	4b1d      	ldr	r3, [pc, #116]	; (8016528 <MX_TIM5_Init+0x94>)
 80164b4:	4a1d      	ldr	r2, [pc, #116]	; (801652c <MX_TIM5_Init+0x98>)
 80164b6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80164b8:	4b1b      	ldr	r3, [pc, #108]	; (8016528 <MX_TIM5_Init+0x94>)
 80164ba:	2200      	movs	r2, #0
 80164bc:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80164be:	4b1a      	ldr	r3, [pc, #104]	; (8016528 <MX_TIM5_Init+0x94>)
 80164c0:	2200      	movs	r2, #0
 80164c2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80164c4:	4b18      	ldr	r3, [pc, #96]	; (8016528 <MX_TIM5_Init+0x94>)
 80164c6:	f04f 32ff 	mov.w	r2, #4294967295
 80164ca:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80164cc:	4b16      	ldr	r3, [pc, #88]	; (8016528 <MX_TIM5_Init+0x94>)
 80164ce:	2200      	movs	r2, #0
 80164d0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80164d2:	4b15      	ldr	r3, [pc, #84]	; (8016528 <MX_TIM5_Init+0x94>)
 80164d4:	2200      	movs	r2, #0
 80164d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80164d8:	4813      	ldr	r0, [pc, #76]	; (8016528 <MX_TIM5_Init+0x94>)
 80164da:	f7ed fb5a 	bl	8003b92 <HAL_TIM_Base_Init>
 80164de:	4603      	mov	r3, r0
 80164e0:	2b00      	cmp	r3, #0
 80164e2:	d001      	beq.n	80164e8 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80164e4:	f000 fc8c 	bl	8016e00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80164e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80164ec:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80164ee:	f107 0310 	add.w	r3, r7, #16
 80164f2:	4619      	mov	r1, r3
 80164f4:	480c      	ldr	r0, [pc, #48]	; (8016528 <MX_TIM5_Init+0x94>)
 80164f6:	f7ed fd3b 	bl	8003f70 <HAL_TIM_ConfigClockSource>
 80164fa:	4603      	mov	r3, r0
 80164fc:	2b00      	cmp	r3, #0
 80164fe:	d001      	beq.n	8016504 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8016500:	f000 fc7e 	bl	8016e00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8016504:	2300      	movs	r3, #0
 8016506:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8016508:	2300      	movs	r3, #0
 801650a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 801650c:	1d3b      	adds	r3, r7, #4
 801650e:	4619      	mov	r1, r3
 8016510:	4805      	ldr	r0, [pc, #20]	; (8016528 <MX_TIM5_Init+0x94>)
 8016512:	f7ed ff49 	bl	80043a8 <HAL_TIMEx_MasterConfigSynchronization>
 8016516:	4603      	mov	r3, r0
 8016518:	2b00      	cmp	r3, #0
 801651a:	d001      	beq.n	8016520 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 801651c:	f000 fc70 	bl	8016e00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8016520:	bf00      	nop
 8016522:	3720      	adds	r7, #32
 8016524:	46bd      	mov	sp, r7
 8016526:	bd80      	pop	{r7, pc}
 8016528:	20009888 	.word	0x20009888
 801652c:	40000c00 	.word	0x40000c00

08016530 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8016530:	b580      	push	{r7, lr}
 8016532:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8016534:	4b14      	ldr	r3, [pc, #80]	; (8016588 <MX_USART3_UART_Init+0x58>)
 8016536:	4a15      	ldr	r2, [pc, #84]	; (801658c <MX_USART3_UART_Init+0x5c>)
 8016538:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 801653a:	4b13      	ldr	r3, [pc, #76]	; (8016588 <MX_USART3_UART_Init+0x58>)
 801653c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8016540:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8016542:	4b11      	ldr	r3, [pc, #68]	; (8016588 <MX_USART3_UART_Init+0x58>)
 8016544:	2200      	movs	r2, #0
 8016546:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8016548:	4b0f      	ldr	r3, [pc, #60]	; (8016588 <MX_USART3_UART_Init+0x58>)
 801654a:	2200      	movs	r2, #0
 801654c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 801654e:	4b0e      	ldr	r3, [pc, #56]	; (8016588 <MX_USART3_UART_Init+0x58>)
 8016550:	2200      	movs	r2, #0
 8016552:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8016554:	4b0c      	ldr	r3, [pc, #48]	; (8016588 <MX_USART3_UART_Init+0x58>)
 8016556:	220c      	movs	r2, #12
 8016558:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 801655a:	4b0b      	ldr	r3, [pc, #44]	; (8016588 <MX_USART3_UART_Init+0x58>)
 801655c:	2200      	movs	r2, #0
 801655e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8016560:	4b09      	ldr	r3, [pc, #36]	; (8016588 <MX_USART3_UART_Init+0x58>)
 8016562:	2200      	movs	r2, #0
 8016564:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8016566:	4b08      	ldr	r3, [pc, #32]	; (8016588 <MX_USART3_UART_Init+0x58>)
 8016568:	2200      	movs	r2, #0
 801656a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 801656c:	4b06      	ldr	r3, [pc, #24]	; (8016588 <MX_USART3_UART_Init+0x58>)
 801656e:	2200      	movs	r2, #0
 8016570:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8016572:	4805      	ldr	r0, [pc, #20]	; (8016588 <MX_USART3_UART_Init+0x58>)
 8016574:	f7ed ffc4 	bl	8004500 <HAL_UART_Init>
 8016578:	4603      	mov	r3, r0
 801657a:	2b00      	cmp	r3, #0
 801657c:	d001      	beq.n	8016582 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 801657e:	f000 fc3f 	bl	8016e00 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8016582:	bf00      	nop
 8016584:	bd80      	pop	{r7, pc}
 8016586:	bf00      	nop
 8016588:	200097b8 	.word	0x200097b8
 801658c:	40004800 	.word	0x40004800

08016590 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8016590:	b580      	push	{r7, lr}
 8016592:	b08c      	sub	sp, #48	; 0x30
 8016594:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8016596:	f107 031c 	add.w	r3, r7, #28
 801659a:	2200      	movs	r2, #0
 801659c:	601a      	str	r2, [r3, #0]
 801659e:	605a      	str	r2, [r3, #4]
 80165a0:	609a      	str	r2, [r3, #8]
 80165a2:	60da      	str	r2, [r3, #12]
 80165a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80165a6:	4a55      	ldr	r2, [pc, #340]	; (80166fc <MX_GPIO_Init+0x16c>)
 80165a8:	4b54      	ldr	r3, [pc, #336]	; (80166fc <MX_GPIO_Init+0x16c>)
 80165aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80165ac:	f043 0304 	orr.w	r3, r3, #4
 80165b0:	6313      	str	r3, [r2, #48]	; 0x30
 80165b2:	4b52      	ldr	r3, [pc, #328]	; (80166fc <MX_GPIO_Init+0x16c>)
 80165b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80165b6:	f003 0304 	and.w	r3, r3, #4
 80165ba:	61bb      	str	r3, [r7, #24]
 80165bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80165be:	4a4f      	ldr	r2, [pc, #316]	; (80166fc <MX_GPIO_Init+0x16c>)
 80165c0:	4b4e      	ldr	r3, [pc, #312]	; (80166fc <MX_GPIO_Init+0x16c>)
 80165c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80165c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80165c8:	6313      	str	r3, [r2, #48]	; 0x30
 80165ca:	4b4c      	ldr	r3, [pc, #304]	; (80166fc <MX_GPIO_Init+0x16c>)
 80165cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80165ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80165d2:	617b      	str	r3, [r7, #20]
 80165d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80165d6:	4a49      	ldr	r2, [pc, #292]	; (80166fc <MX_GPIO_Init+0x16c>)
 80165d8:	4b48      	ldr	r3, [pc, #288]	; (80166fc <MX_GPIO_Init+0x16c>)
 80165da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80165dc:	f043 0301 	orr.w	r3, r3, #1
 80165e0:	6313      	str	r3, [r2, #48]	; 0x30
 80165e2:	4b46      	ldr	r3, [pc, #280]	; (80166fc <MX_GPIO_Init+0x16c>)
 80165e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80165e6:	f003 0301 	and.w	r3, r3, #1
 80165ea:	613b      	str	r3, [r7, #16]
 80165ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80165ee:	4a43      	ldr	r2, [pc, #268]	; (80166fc <MX_GPIO_Init+0x16c>)
 80165f0:	4b42      	ldr	r3, [pc, #264]	; (80166fc <MX_GPIO_Init+0x16c>)
 80165f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80165f4:	f043 0302 	orr.w	r3, r3, #2
 80165f8:	6313      	str	r3, [r2, #48]	; 0x30
 80165fa:	4b40      	ldr	r3, [pc, #256]	; (80166fc <MX_GPIO_Init+0x16c>)
 80165fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80165fe:	f003 0302 	and.w	r3, r3, #2
 8016602:	60fb      	str	r3, [r7, #12]
 8016604:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8016606:	4a3d      	ldr	r2, [pc, #244]	; (80166fc <MX_GPIO_Init+0x16c>)
 8016608:	4b3c      	ldr	r3, [pc, #240]	; (80166fc <MX_GPIO_Init+0x16c>)
 801660a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801660c:	f043 0308 	orr.w	r3, r3, #8
 8016610:	6313      	str	r3, [r2, #48]	; 0x30
 8016612:	4b3a      	ldr	r3, [pc, #232]	; (80166fc <MX_GPIO_Init+0x16c>)
 8016614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016616:	f003 0308 	and.w	r3, r3, #8
 801661a:	60bb      	str	r3, [r7, #8]
 801661c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 801661e:	4a37      	ldr	r2, [pc, #220]	; (80166fc <MX_GPIO_Init+0x16c>)
 8016620:	4b36      	ldr	r3, [pc, #216]	; (80166fc <MX_GPIO_Init+0x16c>)
 8016622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016624:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016628:	6313      	str	r3, [r2, #48]	; 0x30
 801662a:	4b34      	ldr	r3, [pc, #208]	; (80166fc <MX_GPIO_Init+0x16c>)
 801662c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801662e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016632:	607b      	str	r3, [r7, #4]
 8016634:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8016636:	2200      	movs	r2, #0
 8016638:	f244 0181 	movw	r1, #16513	; 0x4081
 801663c:	4830      	ldr	r0, [pc, #192]	; (8016700 <MX_GPIO_Init+0x170>)
 801663e:	f7eb fcb3 	bl	8001fa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8016642:	2200      	movs	r2, #0
 8016644:	2140      	movs	r1, #64	; 0x40
 8016646:	482f      	ldr	r0, [pc, #188]	; (8016704 <MX_GPIO_Init+0x174>)
 8016648:	f7eb fcae 	bl	8001fa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 801664c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8016650:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8016652:	4b2d      	ldr	r3, [pc, #180]	; (8016708 <MX_GPIO_Init+0x178>)
 8016654:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016656:	2300      	movs	r3, #0
 8016658:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 801665a:	f107 031c 	add.w	r3, r7, #28
 801665e:	4619      	mov	r1, r3
 8016660:	482a      	ldr	r0, [pc, #168]	; (801670c <MX_GPIO_Init+0x17c>)
 8016662:	f7eb faf7 	bl	8001c54 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8016666:	f244 0381 	movw	r3, #16513	; 0x4081
 801666a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801666c:	2301      	movs	r3, #1
 801666e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016670:	2300      	movs	r3, #0
 8016672:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8016674:	2300      	movs	r3, #0
 8016676:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8016678:	f107 031c 	add.w	r3, r7, #28
 801667c:	4619      	mov	r1, r3
 801667e:	4820      	ldr	r0, [pc, #128]	; (8016700 <MX_GPIO_Init+0x170>)
 8016680:	f7eb fae8 	bl	8001c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8016684:	2340      	movs	r3, #64	; 0x40
 8016686:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8016688:	2301      	movs	r3, #1
 801668a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801668c:	2300      	movs	r3, #0
 801668e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8016690:	2300      	movs	r3, #0
 8016692:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8016694:	f107 031c 	add.w	r3, r7, #28
 8016698:	4619      	mov	r1, r3
 801669a:	481a      	ldr	r0, [pc, #104]	; (8016704 <MX_GPIO_Init+0x174>)
 801669c:	f7eb fada 	bl	8001c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80166a0:	2380      	movs	r3, #128	; 0x80
 80166a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80166a4:	2300      	movs	r3, #0
 80166a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80166a8:	2300      	movs	r3, #0
 80166aa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80166ac:	f107 031c 	add.w	r3, r7, #28
 80166b0:	4619      	mov	r1, r3
 80166b2:	4814      	ldr	r0, [pc, #80]	; (8016704 <MX_GPIO_Init+0x174>)
 80166b4:	f7eb face 	bl	8001c54 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80166b8:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80166bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80166be:	2302      	movs	r3, #2
 80166c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80166c2:	2300      	movs	r3, #0
 80166c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80166c6:	2303      	movs	r3, #3
 80166c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80166ca:	230a      	movs	r3, #10
 80166cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80166ce:	f107 031c 	add.w	r3, r7, #28
 80166d2:	4619      	mov	r1, r3
 80166d4:	480e      	ldr	r0, [pc, #56]	; (8016710 <MX_GPIO_Init+0x180>)
 80166d6:	f7eb fabd 	bl	8001c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80166da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80166de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80166e0:	2300      	movs	r3, #0
 80166e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80166e4:	2300      	movs	r3, #0
 80166e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80166e8:	f107 031c 	add.w	r3, r7, #28
 80166ec:	4619      	mov	r1, r3
 80166ee:	4808      	ldr	r0, [pc, #32]	; (8016710 <MX_GPIO_Init+0x180>)
 80166f0:	f7eb fab0 	bl	8001c54 <HAL_GPIO_Init>

}
 80166f4:	bf00      	nop
 80166f6:	3730      	adds	r7, #48	; 0x30
 80166f8:	46bd      	mov	sp, r7
 80166fa:	bd80      	pop	{r7, pc}
 80166fc:	40023800 	.word	0x40023800
 8016700:	40020400 	.word	0x40020400
 8016704:	40021800 	.word	0x40021800
 8016708:	10110000 	.word	0x10110000
 801670c:	40020800 	.word	0x40020800
 8016710:	40020000 	.word	0x40020000

08016714 <RecvpayloadCallback>:

/* USER CODE BEGIN 4 */

err_t RecvpayloadCallback(void *arg, struct tcp_pcb *tpcb, struct pbuf *p,
		err_t err){
 8016714:	b590      	push	{r4, r7, lr}
 8016716:	b085      	sub	sp, #20
 8016718:	af00      	add	r7, sp, #0
 801671a:	60f8      	str	r0, [r7, #12]
 801671c:	60b9      	str	r1, [r7, #8]
 801671e:	607a      	str	r2, [r7, #4]
 8016720:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_TogglePin(LD1_GPIO_Port,LD1_Pin);
 8016722:	2101      	movs	r1, #1
 8016724:	481d      	ldr	r0, [pc, #116]	; (801679c <RecvpayloadCallback+0x88>)
 8016726:	f7eb fc58 	bl	8001fda <HAL_GPIO_TogglePin>
//	sprintf(buf,"RecvpayloadCallback\n");
	// HAL_UART_Transmit(&huart3,buf,strlen(buf),1000);
	 if (p == NULL) {sprintf(buf,"pbuf==Null\n");
 801672a:	687b      	ldr	r3, [r7, #4]
 801672c:	2b00      	cmp	r3, #0
 801672e:	d112      	bne.n	8016756 <RecvpayloadCallback+0x42>
 8016730:	4a1b      	ldr	r2, [pc, #108]	; (80167a0 <RecvpayloadCallback+0x8c>)
 8016732:	4b1c      	ldr	r3, [pc, #112]	; (80167a4 <RecvpayloadCallback+0x90>)
 8016734:	4614      	mov	r4, r2
 8016736:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016738:	6020      	str	r0, [r4, #0]
 801673a:	6061      	str	r1, [r4, #4]
 801673c:	60a2      	str	r2, [r4, #8]
	 HAL_UART_Transmit(&huart3,buf,strlen(buf),1000);
 801673e:	4818      	ldr	r0, [pc, #96]	; (80167a0 <RecvpayloadCallback+0x8c>)
 8016740:	f7e9 fd7e 	bl	8000240 <strlen>
 8016744:	4603      	mov	r3, r0
 8016746:	b29a      	uxth	r2, r3
 8016748:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801674c:	4914      	ldr	r1, [pc, #80]	; (80167a0 <RecvpayloadCallback+0x8c>)
 801674e:	4816      	ldr	r0, [pc, #88]	; (80167a8 <RecvpayloadCallback+0x94>)
 8016750:	f7ed ff24 	bl	800459c <HAL_UART_Transmit>
 8016754:	e017      	b.n	8016786 <RecvpayloadCallback+0x72>
	 }
	 else{
		 strncpy(timerbuffer, p->payload, 270);
 8016756:	687b      	ldr	r3, [r7, #4]
 8016758:	685b      	ldr	r3, [r3, #4]
 801675a:	f44f 7287 	mov.w	r2, #270	; 0x10e
 801675e:	4619      	mov	r1, r3
 8016760:	4812      	ldr	r0, [pc, #72]	; (80167ac <RecvpayloadCallback+0x98>)
 8016762:	f001 f891 	bl	8017888 <strncpy>
		 sprintf(buf,"timerbuffer :%s\n\r",timerbuffer);
 8016766:	4a11      	ldr	r2, [pc, #68]	; (80167ac <RecvpayloadCallback+0x98>)
 8016768:	4911      	ldr	r1, [pc, #68]	; (80167b0 <RecvpayloadCallback+0x9c>)
 801676a:	480d      	ldr	r0, [pc, #52]	; (80167a0 <RecvpayloadCallback+0x8c>)
 801676c:	f001 f868 	bl	8017840 <siprintf>
	HAL_UART_Transmit(&huart3,buf,strlen(buf),1000);
 8016770:	480b      	ldr	r0, [pc, #44]	; (80167a0 <RecvpayloadCallback+0x8c>)
 8016772:	f7e9 fd65 	bl	8000240 <strlen>
 8016776:	4603      	mov	r3, r0
 8016778:	b29a      	uxth	r2, r3
 801677a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801677e:	4908      	ldr	r1, [pc, #32]	; (80167a0 <RecvpayloadCallback+0x8c>)
 8016780:	4809      	ldr	r0, [pc, #36]	; (80167a8 <RecvpayloadCallback+0x94>)
 8016782:	f7ed ff0b 	bl	800459c <HAL_UART_Transmit>
	 }
	 timerequestflag=true;
 8016786:	4b0b      	ldr	r3, [pc, #44]	; (80167b4 <RecvpayloadCallback+0xa0>)
 8016788:	2201      	movs	r2, #1
 801678a:	701a      	strb	r2, [r3, #0]

	 pbuf_free(p);
 801678c:	6878      	ldr	r0, [r7, #4]
 801678e:	f7f7 f9a5 	bl	800dadc <pbuf_free>
	 return ERR_OK;
 8016792:	2300      	movs	r3, #0
}
 8016794:	4618      	mov	r0, r3
 8016796:	3714      	adds	r7, #20
 8016798:	46bd      	mov	sp, r7
 801679a:	bd90      	pop	{r4, r7, pc}
 801679c:	40020400 	.word	0x40020400
 80167a0:	20009a18 	.word	0x20009a18
 80167a4:	0801b8ec 	.word	0x0801b8ec
 80167a8:	200097b8 	.word	0x200097b8
 80167ac:	200098d4 	.word	0x200098d4
 80167b0:	0801b8f8 	.word	0x0801b8f8
 80167b4:	200047e0 	.word	0x200047e0

080167b8 <RecvHttpHeaderCallback>:
err_t RecvHttpHeaderCallback (httpc_state_t *connection, void *arg, struct
pbuf *hdr, u16_t hdr_len, u32_t content_len) {
 80167b8:	b5b0      	push	{r4, r5, r7, lr}
 80167ba:	b084      	sub	sp, #16
 80167bc:	af00      	add	r7, sp, #0
 80167be:	60f8      	str	r0, [r7, #12]
 80167c0:	60b9      	str	r1, [r7, #8]
 80167c2:	607a      	str	r2, [r7, #4]
 80167c4:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 80167c6:	2180      	movs	r1, #128	; 0x80
 80167c8:	4810      	ldr	r0, [pc, #64]	; (801680c <RecvHttpHeaderCallback+0x54>)
 80167ca:	f7eb fc06 	bl	8001fda <HAL_GPIO_TogglePin>
   sprintf(buf,"RecvHttpHeaderCallback error");
 80167ce:	4a10      	ldr	r2, [pc, #64]	; (8016810 <RecvHttpHeaderCallback+0x58>)
 80167d0:	4b10      	ldr	r3, [pc, #64]	; (8016814 <RecvHttpHeaderCallback+0x5c>)
 80167d2:	4615      	mov	r5, r2
 80167d4:	461c      	mov	r4, r3
 80167d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80167d8:	6028      	str	r0, [r5, #0]
 80167da:	6069      	str	r1, [r5, #4]
 80167dc:	60aa      	str	r2, [r5, #8]
 80167de:	60eb      	str	r3, [r5, #12]
 80167e0:	cc07      	ldmia	r4!, {r0, r1, r2}
 80167e2:	6128      	str	r0, [r5, #16]
 80167e4:	6169      	str	r1, [r5, #20]
 80167e6:	61aa      	str	r2, [r5, #24]
 80167e8:	7823      	ldrb	r3, [r4, #0]
 80167ea:	772b      	strb	r3, [r5, #28]
	HAL_UART_Transmit(&huart3,buf,strlen(buf),1000);
 80167ec:	4808      	ldr	r0, [pc, #32]	; (8016810 <RecvHttpHeaderCallback+0x58>)
 80167ee:	f7e9 fd27 	bl	8000240 <strlen>
 80167f2:	4603      	mov	r3, r0
 80167f4:	b29a      	uxth	r2, r3
 80167f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80167fa:	4905      	ldr	r1, [pc, #20]	; (8016810 <RecvHttpHeaderCallback+0x58>)
 80167fc:	4806      	ldr	r0, [pc, #24]	; (8016818 <RecvHttpHeaderCallback+0x60>)
 80167fe:	f7ed fecd 	bl	800459c <HAL_UART_Transmit>
   return ERR_OK;
 8016802:	2300      	movs	r3, #0
}
 8016804:	4618      	mov	r0, r3
 8016806:	3710      	adds	r7, #16
 8016808:	46bd      	mov	sp, r7
 801680a:	bdb0      	pop	{r4, r5, r7, pc}
 801680c:	40020400 	.word	0x40020400
 8016810:	20009a18 	.word	0x20009a18
 8016814:	0801b90c 	.word	0x0801b90c
 8016818:	200097b8 	.word	0x200097b8

0801681c <HttpClientResultCallback>:
void HttpClientResultCallback (void *arg, httpc_result_t httpc_result, u32_t
rx_content_len, u32_t srv_res, err_t err) {
 801681c:	b5b0      	push	{r4, r5, r7, lr}
 801681e:	b084      	sub	sp, #16
 8016820:	af00      	add	r7, sp, #0
 8016822:	60f8      	str	r0, [r7, #12]
 8016824:	607a      	str	r2, [r7, #4]
 8016826:	603b      	str	r3, [r7, #0]
 8016828:	460b      	mov	r3, r1
 801682a:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_TogglePin(LD3_GPIO_Port,LD3_Pin);
 801682c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8016830:	481a      	ldr	r0, [pc, #104]	; (801689c <HttpClientResultCallback+0x80>)
 8016832:	f7eb fbd2 	bl	8001fda <HAL_GPIO_TogglePin>
	sprintf(buf,"HttpClientResultCallback \n\r");
 8016836:	4a1a      	ldr	r2, [pc, #104]	; (80168a0 <HttpClientResultCallback+0x84>)
 8016838:	4b1a      	ldr	r3, [pc, #104]	; (80168a4 <HttpClientResultCallback+0x88>)
 801683a:	4615      	mov	r5, r2
 801683c:	461c      	mov	r4, r3
 801683e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016840:	6028      	str	r0, [r5, #0]
 8016842:	6069      	str	r1, [r5, #4]
 8016844:	60aa      	str	r2, [r5, #8]
 8016846:	60eb      	str	r3, [r5, #12]
 8016848:	cc07      	ldmia	r4!, {r0, r1, r2}
 801684a:	6128      	str	r0, [r5, #16]
 801684c:	6169      	str	r1, [r5, #20]
 801684e:	61aa      	str	r2, [r5, #24]
	HAL_UART_Transmit(&huart3,buf,strlen(buf),1000);
 8016850:	4813      	ldr	r0, [pc, #76]	; (80168a0 <HttpClientResultCallback+0x84>)
 8016852:	f7e9 fcf5 	bl	8000240 <strlen>
 8016856:	4603      	mov	r3, r0
 8016858:	b29a      	uxth	r2, r3
 801685a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801685e:	4910      	ldr	r1, [pc, #64]	; (80168a0 <HttpClientResultCallback+0x84>)
 8016860:	4811      	ldr	r0, [pc, #68]	; (80168a8 <HttpClientResultCallback+0x8c>)
 8016862:	f7ed fe9b 	bl	800459c <HAL_UART_Transmit>
	sprintf(buf,"httpc_result: %u\n", httpc_result);
 8016866:	7afb      	ldrb	r3, [r7, #11]
 8016868:	461a      	mov	r2, r3
 801686a:	4910      	ldr	r1, [pc, #64]	; (80168ac <HttpClientResultCallback+0x90>)
 801686c:	480c      	ldr	r0, [pc, #48]	; (80168a0 <HttpClientResultCallback+0x84>)
 801686e:	f000 ffe7 	bl	8017840 <siprintf>
	HAL_UART_Transmit(&huart3,buf,strlen(buf),1000);
 8016872:	480b      	ldr	r0, [pc, #44]	; (80168a0 <HttpClientResultCallback+0x84>)
 8016874:	f7e9 fce4 	bl	8000240 <strlen>
 8016878:	4603      	mov	r3, r0
 801687a:	b29a      	uxth	r2, r3
 801687c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8016880:	4907      	ldr	r1, [pc, #28]	; (80168a0 <HttpClientResultCallback+0x84>)
 8016882:	4809      	ldr	r0, [pc, #36]	; (80168a8 <HttpClientResultCallback+0x8c>)
 8016884:	f7ed fe8a 	bl	800459c <HAL_UART_Transmit>
	sprintf(buf,"received number of bytes: %lu\n", rx_content_len);
 8016888:	687a      	ldr	r2, [r7, #4]
 801688a:	4909      	ldr	r1, [pc, #36]	; (80168b0 <HttpClientResultCallback+0x94>)
 801688c:	4804      	ldr	r0, [pc, #16]	; (80168a0 <HttpClientResultCallback+0x84>)
 801688e:	f000 ffd7 	bl	8017840 <siprintf>

}
 8016892:	bf00      	nop
 8016894:	3710      	adds	r7, #16
 8016896:	46bd      	mov	sp, r7
 8016898:	bdb0      	pop	{r4, r5, r7, pc}
 801689a:	bf00      	nop
 801689c:	40020400 	.word	0x40020400
 80168a0:	20009a18 	.word	0x20009a18
 80168a4:	0801b92c 	.word	0x0801b92c
 80168a8:	200097b8 	.word	0x200097b8
 80168ac:	0801b948 	.word	0x0801b948
 80168b0:	0801b95c 	.word	0x0801b95c

080168b4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80168b4:	b5b0      	push	{r4, r5, r7, lr}
 80168b6:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 80168ba:	af04      	add	r7, sp, #16
 80168bc:	1d3b      	adds	r3, r7, #4
 80168be:	6018      	str	r0, [r3, #0]
  /* init code for LWIP */
	volatile uint8_t years[2], Month[2], hours[2], mintues[2], days[2], second[2];

  MX_LWIP_Init();
 80168c0:	f7ff fa3a 	bl	8015d38 <MX_LWIP_Init>
 // httpd_init();

   uint16_t years_int, Month_int, hours_int, mintues_int, days_int, second_int;
  char url[500];
  char domain_name[30];
  volatile uint16_t h=0;
 80168c4:	f107 0312 	add.w	r3, r7, #18
 80168c8:	2200      	movs	r2, #0
 80168ca:	801a      	strh	r2, [r3, #0]
  httpc_connection_t *conn_settings;
  httpc_state_t *connection;
  conn_settings->use_proxy = 0;   //no proxy usage
 80168cc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80168d0:	2200      	movs	r2, #0
 80168d2:	719a      	strb	r2, [r3, #6]
  conn_settings->headers_done_fn = RecvHttpHeaderCallback;
 80168d4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80168d8:	4a8c      	ldr	r2, [pc, #560]	; (8016b0c <StartDefaultTask+0x258>)
 80168da:	60da      	str	r2, [r3, #12]
  conn_settings->result_fn = HttpClientResultCallback;
 80168dc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80168e0:	4a8b      	ldr	r2, [pc, #556]	; (8016b10 <StartDefaultTask+0x25c>)
 80168e2:	609a      	str	r2, [r3, #8]
  strcpy(domain_name, "api.timezonedb.com");
 80168e4:	f107 0314 	add.w	r3, r7, #20
 80168e8:	4a8a      	ldr	r2, [pc, #552]	; (8016b14 <StartDefaultTask+0x260>)
 80168ea:	461c      	mov	r4, r3
 80168ec:	4615      	mov	r5, r2
 80168ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80168f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80168f2:	682b      	ldr	r3, [r5, #0]
 80168f4:	461a      	mov	r2, r3
 80168f6:	8022      	strh	r2, [r4, #0]
 80168f8:	3402      	adds	r4, #2
 80168fa:	0c1b      	lsrs	r3, r3, #16
 80168fc:	7023      	strb	r3, [r4, #0]
  strcpy(url, "/v2.1/get-time-zone?key=H77HZBELV1YH&format=json&by=zone&zone=Africa/Cairo");
 80168fe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8016902:	4a85      	ldr	r2, [pc, #532]	; (8016b18 <StartDefaultTask+0x264>)
 8016904:	4618      	mov	r0, r3
 8016906:	4611      	mov	r1, r2
 8016908:	234b      	movs	r3, #75	; 0x4b
 801690a:	461a      	mov	r2, r3
 801690c:	f000 fe29 	bl	8017562 <memcpy>
  sprintf(buf,"url:\n%s\n", url);
 8016910:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8016914:	461a      	mov	r2, r3
 8016916:	4981      	ldr	r1, [pc, #516]	; (8016b1c <StartDefaultTask+0x268>)
 8016918:	4881      	ldr	r0, [pc, #516]	; (8016b20 <StartDefaultTask+0x26c>)
 801691a:	f000 ff91 	bl	8017840 <siprintf>
  HAL_UART_Transmit(&huart3,buf,strlen(buf),1000);
 801691e:	4880      	ldr	r0, [pc, #512]	; (8016b20 <StartDefaultTask+0x26c>)
 8016920:	f7e9 fc8e 	bl	8000240 <strlen>
 8016924:	4603      	mov	r3, r0
 8016926:	b29a      	uxth	r2, r3
 8016928:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801692c:	497c      	ldr	r1, [pc, #496]	; (8016b20 <StartDefaultTask+0x26c>)
 801692e:	487d      	ldr	r0, [pc, #500]	; (8016b24 <StartDefaultTask+0x270>)
 8016930:	f7ed fe34 	bl	800459c <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart3,"\n\r",2,1000);
 8016934:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8016938:	2202      	movs	r2, #2
 801693a:	497b      	ldr	r1, [pc, #492]	; (8016b28 <StartDefaultTask+0x274>)
 801693c:	4879      	ldr	r0, [pc, #484]	; (8016b24 <StartDefaultTask+0x270>)
 801693e:	f7ed fe2d 	bl	800459c <HAL_UART_Transmit>
  err_t error;
  //dns_gethostbyname();
  error = httpc_get_file_dns(domain_name, 80, url, conn_settings,RecvpayloadCallback, NULL, &connection);   //Send HTTP message
 8016942:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8016946:	f107 0014 	add.w	r0, r7, #20
 801694a:	f107 030c 	add.w	r3, r7, #12
 801694e:	9302      	str	r3, [sp, #8]
 8016950:	2300      	movs	r3, #0
 8016952:	9301      	str	r3, [sp, #4]
 8016954:	4b75      	ldr	r3, [pc, #468]	; (8016b2c <StartDefaultTask+0x278>)
 8016956:	9300      	str	r3, [sp, #0]
 8016958:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 801695c:	2150      	movs	r1, #80	; 0x50
 801695e:	f7f2 f8fb 	bl	8008b58 <httpc_get_file_dns>
 8016962:	4603      	mov	r3, r0
 8016964:	f887 324b 	strb.w	r3, [r7, #587]	; 0x24b
  sprintf(buf,"\n\rerror: %d\n", error);
 8016968:	f997 324b 	ldrsb.w	r3, [r7, #587]	; 0x24b
 801696c:	461a      	mov	r2, r3
 801696e:	4970      	ldr	r1, [pc, #448]	; (8016b30 <StartDefaultTask+0x27c>)
 8016970:	486b      	ldr	r0, [pc, #428]	; (8016b20 <StartDefaultTask+0x26c>)
 8016972:	f000 ff65 	bl	8017840 <siprintf>
  HAL_UART_Transmit(&huart3,buf,strlen(buf),1000);
 8016976:	486a      	ldr	r0, [pc, #424]	; (8016b20 <StartDefaultTask+0x26c>)
 8016978:	f7e9 fc62 	bl	8000240 <strlen>
 801697c:	4603      	mov	r3, r0
 801697e:	b29a      	uxth	r2, r3
 8016980:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8016984:	4966      	ldr	r1, [pc, #408]	; (8016b20 <StartDefaultTask+0x26c>)
 8016986:	4867      	ldr	r0, [pc, #412]	; (8016b24 <StartDefaultTask+0x270>)
 8016988:	f7ed fe08 	bl	800459c <HAL_UART_Transmit>
  osDelay(5000);
 801698c:	f241 3088 	movw	r0, #5000	; 0x1388
 8016990:	f7ee fbba 	bl	8005108 <osDelay>
  while(timerequestflag!=true){
 8016994:	e032      	b.n	80169fc <StartDefaultTask+0x148>
  	HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 8016996:	2180      	movs	r1, #128	; 0x80
 8016998:	4866      	ldr	r0, [pc, #408]	; (8016b34 <StartDefaultTask+0x280>)
 801699a:	f7eb fb1e 	bl	8001fda <HAL_GPIO_TogglePin>
  	osDelay(50);
 801699e:	2032      	movs	r0, #50	; 0x32
 80169a0:	f7ee fbb2 	bl	8005108 <osDelay>
  	h++;
 80169a4:	f107 0312 	add.w	r3, r7, #18
 80169a8:	881b      	ldrh	r3, [r3, #0]
 80169aa:	b29b      	uxth	r3, r3
 80169ac:	3301      	adds	r3, #1
 80169ae:	b29a      	uxth	r2, r3
 80169b0:	f107 0312 	add.w	r3, r7, #18
 80169b4:	801a      	strh	r2, [r3, #0]
  	if(h>800){
 80169b6:	f107 0312 	add.w	r3, r7, #18
 80169ba:	881b      	ldrh	r3, [r3, #0]
 80169bc:	b29b      	uxth	r3, r3
 80169be:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80169c2:	d91b      	bls.n	80169fc <StartDefaultTask+0x148>
  		sprintf(buf,"timeout with dns \n");
 80169c4:	4a56      	ldr	r2, [pc, #344]	; (8016b20 <StartDefaultTask+0x26c>)
 80169c6:	4b5c      	ldr	r3, [pc, #368]	; (8016b38 <StartDefaultTask+0x284>)
 80169c8:	4615      	mov	r5, r2
 80169ca:	461c      	mov	r4, r3
 80169cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80169ce:	6028      	str	r0, [r5, #0]
 80169d0:	6069      	str	r1, [r5, #4]
 80169d2:	60aa      	str	r2, [r5, #8]
 80169d4:	60eb      	str	r3, [r5, #12]
 80169d6:	8823      	ldrh	r3, [r4, #0]
 80169d8:	78a2      	ldrb	r2, [r4, #2]
 80169da:	822b      	strh	r3, [r5, #16]
 80169dc:	4613      	mov	r3, r2
 80169de:	74ab      	strb	r3, [r5, #18]
  		HAL_UART_Transmit(&huart3,buf,strlen(buf),1000);
 80169e0:	484f      	ldr	r0, [pc, #316]	; (8016b20 <StartDefaultTask+0x26c>)
 80169e2:	f7e9 fc2d 	bl	8000240 <strlen>
 80169e6:	4603      	mov	r3, r0
 80169e8:	b29a      	uxth	r2, r3
 80169ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80169ee:	494c      	ldr	r1, [pc, #304]	; (8016b20 <StartDefaultTask+0x26c>)
 80169f0:	484c      	ldr	r0, [pc, #304]	; (8016b24 <StartDefaultTask+0x270>)
 80169f2:	f7ed fdd3 	bl	800459c <HAL_UART_Transmit>
  		 timerequestflag=true;
 80169f6:	4b51      	ldr	r3, [pc, #324]	; (8016b3c <StartDefaultTask+0x288>)
 80169f8:	2201      	movs	r2, #1
 80169fa:	701a      	strb	r2, [r3, #0]
  while(timerequestflag!=true){
 80169fc:	4b4f      	ldr	r3, [pc, #316]	; (8016b3c <StartDefaultTask+0x288>)
 80169fe:	781b      	ldrb	r3, [r3, #0]
 8016a00:	f083 0301 	eor.w	r3, r3, #1
 8016a04:	b2db      	uxtb	r3, r3
 8016a06:	2b00      	cmp	r3, #0
 8016a08:	d1c5      	bne.n	8016996 <StartDefaultTask+0xe2>
  	}
  }

  char * pch;
  h=0;
 8016a0a:	f107 0312 	add.w	r3, r7, #18
 8016a0e:	2200      	movs	r2, #0
 8016a10:	801a      	strh	r2, [r3, #0]
  pch = strstr (timerbuffer,"formatted");
 8016a12:	494b      	ldr	r1, [pc, #300]	; (8016b40 <StartDefaultTask+0x28c>)
 8016a14:	484b      	ldr	r0, [pc, #300]	; (8016b44 <StartDefaultTask+0x290>)
 8016a16:	f000 ff4c 	bl	80178b2 <strstr>
 8016a1a:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
  for(int j=0;j<33;j++){
 8016a1e:	2300      	movs	r3, #0
 8016a20:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 8016a24:	e09b      	b.n	8016b5e <StartDefaultTask+0x2aa>
  switch (j){
 8016a26:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8016a2a:	3b0e      	subs	r3, #14
 8016a2c:	2b10      	cmp	r3, #16
 8016a2e:	f200 808b 	bhi.w	8016b48 <StartDefaultTask+0x294>
 8016a32:	a201      	add	r2, pc, #4	; (adr r2, 8016a38 <StartDefaultTask+0x184>)
 8016a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016a38:	08016a7d 	.word	0x08016a7d
 8016a3c:	08016a89 	.word	0x08016a89
 8016a40:	08016b49 	.word	0x08016b49
 8016a44:	08016a95 	.word	0x08016a95
 8016a48:	08016aa1 	.word	0x08016aa1
 8016a4c:	08016b49 	.word	0x08016b49
 8016a50:	08016aad 	.word	0x08016aad
 8016a54:	08016ab9 	.word	0x08016ab9
 8016a58:	08016b49 	.word	0x08016b49
 8016a5c:	08016ac5 	.word	0x08016ac5
 8016a60:	08016ad1 	.word	0x08016ad1
 8016a64:	08016b49 	.word	0x08016b49
 8016a68:	08016add 	.word	0x08016add
 8016a6c:	08016ae9 	.word	0x08016ae9
 8016a70:	08016b49 	.word	0x08016b49
 8016a74:	08016af5 	.word	0x08016af5
 8016a78:	08016b01 	.word	0x08016b01
  case 14:
  years[0] = *(pch);break;
 8016a7c:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8016a80:	781b      	ldrb	r3, [r3, #0]
 8016a82:	f887 323c 	strb.w	r3, [r7, #572]	; 0x23c
 8016a86:	e060      	b.n	8016b4a <StartDefaultTask+0x296>
  case 15:
  years[1] = *(pch);break;
 8016a88:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8016a8c:	781b      	ldrb	r3, [r3, #0]
 8016a8e:	f887 323d 	strb.w	r3, [r7, #573]	; 0x23d
 8016a92:	e05a      	b.n	8016b4a <StartDefaultTask+0x296>
  case 17:
  Month[0] = *(pch);break;
 8016a94:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8016a98:	781b      	ldrb	r3, [r3, #0]
 8016a9a:	f887 3238 	strb.w	r3, [r7, #568]	; 0x238
 8016a9e:	e054      	b.n	8016b4a <StartDefaultTask+0x296>
  case 18:
  Month[1] = *(pch);break;
 8016aa0:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8016aa4:	781b      	ldrb	r3, [r3, #0]
 8016aa6:	f887 3239 	strb.w	r3, [r7, #569]	; 0x239
 8016aaa:	e04e      	b.n	8016b4a <StartDefaultTask+0x296>
  case 20:
  days[0] = *(pch);break;
 8016aac:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8016ab0:	781b      	ldrb	r3, [r3, #0]
 8016ab2:	f887 322c 	strb.w	r3, [r7, #556]	; 0x22c
 8016ab6:	e048      	b.n	8016b4a <StartDefaultTask+0x296>
  case 21:
  days[1] = *(pch);break;
 8016ab8:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8016abc:	781b      	ldrb	r3, [r3, #0]
 8016abe:	f887 322d 	strb.w	r3, [r7, #557]	; 0x22d
 8016ac2:	e042      	b.n	8016b4a <StartDefaultTask+0x296>
  case 23:
  hours[0] = *(pch);break;
 8016ac4:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8016ac8:	781b      	ldrb	r3, [r3, #0]
 8016aca:	f887 3234 	strb.w	r3, [r7, #564]	; 0x234
 8016ace:	e03c      	b.n	8016b4a <StartDefaultTask+0x296>
  case 24:
  hours[1] = *(pch);break;
 8016ad0:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8016ad4:	781b      	ldrb	r3, [r3, #0]
 8016ad6:	f887 3235 	strb.w	r3, [r7, #565]	; 0x235
 8016ada:	e036      	b.n	8016b4a <StartDefaultTask+0x296>
  case 26:
  mintues[0] = *(pch);break;
 8016adc:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8016ae0:	781b      	ldrb	r3, [r3, #0]
 8016ae2:	f887 3230 	strb.w	r3, [r7, #560]	; 0x230
 8016ae6:	e030      	b.n	8016b4a <StartDefaultTask+0x296>
  case 27:
  mintues[1] = *(pch);break;
 8016ae8:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8016aec:	781b      	ldrb	r3, [r3, #0]
 8016aee:	f887 3231 	strb.w	r3, [r7, #561]	; 0x231
 8016af2:	e02a      	b.n	8016b4a <StartDefaultTask+0x296>
  case 29:
  second[0] = *(pch);break;
 8016af4:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8016af8:	781b      	ldrb	r3, [r3, #0]
 8016afa:	f887 3228 	strb.w	r3, [r7, #552]	; 0x228
 8016afe:	e024      	b.n	8016b4a <StartDefaultTask+0x296>
  case 30:
  second[1] = *(pch);break;
 8016b00:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8016b04:	781b      	ldrb	r3, [r3, #0]
 8016b06:	f887 3229 	strb.w	r3, [r7, #553]	; 0x229
 8016b0a:	e01e      	b.n	8016b4a <StartDefaultTask+0x296>
 8016b0c:	080167b9 	.word	0x080167b9
 8016b10:	0801681d 	.word	0x0801681d
 8016b14:	0801b97c 	.word	0x0801b97c
 8016b18:	0801b990 	.word	0x0801b990
 8016b1c:	0801b9dc 	.word	0x0801b9dc
 8016b20:	20009a18 	.word	0x20009a18
 8016b24:	200097b8 	.word	0x200097b8
 8016b28:	0801b9e8 	.word	0x0801b9e8
 8016b2c:	08016715 	.word	0x08016715
 8016b30:	0801b9ec 	.word	0x0801b9ec
 8016b34:	40020400 	.word	0x40020400
 8016b38:	0801b9fc 	.word	0x0801b9fc
 8016b3c:	200047e0 	.word	0x200047e0
 8016b40:	0801ba10 	.word	0x0801ba10
 8016b44:	200098d4 	.word	0x200098d4
  default:
      break;}
 8016b48:	bf00      	nop
  	*pch++;
 8016b4a:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8016b4e:	3301      	adds	r3, #1
 8016b50:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
  for(int j=0;j<33;j++){
 8016b54:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8016b58:	3301      	adds	r3, #1
 8016b5a:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 8016b5e:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8016b62:	2b20      	cmp	r3, #32
 8016b64:	f77f af5f 	ble.w	8016a26 <StartDefaultTask+0x172>
  }
  years_int = atoi(years);
 8016b68:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 8016b6c:	4618      	mov	r0, r3
 8016b6e:	f000 fc94 	bl	801749a <atoi>
 8016b72:	4603      	mov	r3, r0
 8016b74:	f8a7 3248 	strh.w	r3, [r7, #584]	; 0x248
  sprintf(buf,"Value years is %d \n\r",years_int);
 8016b78:	f8b7 3248 	ldrh.w	r3, [r7, #584]	; 0x248
 8016b7c:	461a      	mov	r2, r3
 8016b7e:	496a      	ldr	r1, [pc, #424]	; (8016d28 <StartDefaultTask+0x474>)
 8016b80:	486a      	ldr	r0, [pc, #424]	; (8016d2c <StartDefaultTask+0x478>)
 8016b82:	f000 fe5d 	bl	8017840 <siprintf>
  HAL_UART_Transmit(&huart3,buf,strlen(buf),1000);
 8016b86:	4869      	ldr	r0, [pc, #420]	; (8016d2c <StartDefaultTask+0x478>)
 8016b88:	f7e9 fb5a 	bl	8000240 <strlen>
 8016b8c:	4603      	mov	r3, r0
 8016b8e:	b29a      	uxth	r2, r3
 8016b90:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8016b94:	4965      	ldr	r1, [pc, #404]	; (8016d2c <StartDefaultTask+0x478>)
 8016b96:	4866      	ldr	r0, [pc, #408]	; (8016d30 <StartDefaultTask+0x47c>)
 8016b98:	f7ed fd00 	bl	800459c <HAL_UART_Transmit>
  Month_int = atoi(Month);
 8016b9c:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8016ba0:	4618      	mov	r0, r3
 8016ba2:	f000 fc7a 	bl	801749a <atoi>
 8016ba6:	4603      	mov	r3, r0
 8016ba8:	f8a7 3246 	strh.w	r3, [r7, #582]	; 0x246
  sprintf(buf,"Value  Mon:%d \n\r",Month_int);HAL_UART_Transmit(&huart3,buf,strlen(buf),1000);
 8016bac:	f8b7 3246 	ldrh.w	r3, [r7, #582]	; 0x246
 8016bb0:	461a      	mov	r2, r3
 8016bb2:	4960      	ldr	r1, [pc, #384]	; (8016d34 <StartDefaultTask+0x480>)
 8016bb4:	485d      	ldr	r0, [pc, #372]	; (8016d2c <StartDefaultTask+0x478>)
 8016bb6:	f000 fe43 	bl	8017840 <siprintf>
 8016bba:	485c      	ldr	r0, [pc, #368]	; (8016d2c <StartDefaultTask+0x478>)
 8016bbc:	f7e9 fb40 	bl	8000240 <strlen>
 8016bc0:	4603      	mov	r3, r0
 8016bc2:	b29a      	uxth	r2, r3
 8016bc4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8016bc8:	4958      	ldr	r1, [pc, #352]	; (8016d2c <StartDefaultTask+0x478>)
 8016bca:	4859      	ldr	r0, [pc, #356]	; (8016d30 <StartDefaultTask+0x47c>)
 8016bcc:	f7ed fce6 	bl	800459c <HAL_UART_Transmit>
  days_int = atoi(days);
 8016bd0:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 8016bd4:	4618      	mov	r0, r3
 8016bd6:	f000 fc60 	bl	801749a <atoi>
 8016bda:	4603      	mov	r3, r0
 8016bdc:	f8a7 3244 	strh.w	r3, [r7, #580]	; 0x244
  sprintf(buf,"Value  days:%d \n\r",days_int);HAL_UART_Transmit(&huart3,buf,strlen(buf),1000);
 8016be0:	f8b7 3244 	ldrh.w	r3, [r7, #580]	; 0x244
 8016be4:	461a      	mov	r2, r3
 8016be6:	4954      	ldr	r1, [pc, #336]	; (8016d38 <StartDefaultTask+0x484>)
 8016be8:	4850      	ldr	r0, [pc, #320]	; (8016d2c <StartDefaultTask+0x478>)
 8016bea:	f000 fe29 	bl	8017840 <siprintf>
 8016bee:	484f      	ldr	r0, [pc, #316]	; (8016d2c <StartDefaultTask+0x478>)
 8016bf0:	f7e9 fb26 	bl	8000240 <strlen>
 8016bf4:	4603      	mov	r3, r0
 8016bf6:	b29a      	uxth	r2, r3
 8016bf8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8016bfc:	494b      	ldr	r1, [pc, #300]	; (8016d2c <StartDefaultTask+0x478>)
 8016bfe:	484c      	ldr	r0, [pc, #304]	; (8016d30 <StartDefaultTask+0x47c>)
 8016c00:	f7ed fccc 	bl	800459c <HAL_UART_Transmit>
  hours_int = atoi(hours);
 8016c04:	f507 730d 	add.w	r3, r7, #564	; 0x234
 8016c08:	4618      	mov	r0, r3
 8016c0a:	f000 fc46 	bl	801749a <atoi>
 8016c0e:	4603      	mov	r3, r0
 8016c10:	f8a7 3242 	strh.w	r3, [r7, #578]	; 0x242
  sprintf(buf,"Value  ho:%d \n\r",hours_int);HAL_UART_Transmit(&huart3,buf,strlen(buf),1000);
 8016c14:	f8b7 3242 	ldrh.w	r3, [r7, #578]	; 0x242
 8016c18:	461a      	mov	r2, r3
 8016c1a:	4948      	ldr	r1, [pc, #288]	; (8016d3c <StartDefaultTask+0x488>)
 8016c1c:	4843      	ldr	r0, [pc, #268]	; (8016d2c <StartDefaultTask+0x478>)
 8016c1e:	f000 fe0f 	bl	8017840 <siprintf>
 8016c22:	4842      	ldr	r0, [pc, #264]	; (8016d2c <StartDefaultTask+0x478>)
 8016c24:	f7e9 fb0c 	bl	8000240 <strlen>
 8016c28:	4603      	mov	r3, r0
 8016c2a:	b29a      	uxth	r2, r3
 8016c2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8016c30:	493e      	ldr	r1, [pc, #248]	; (8016d2c <StartDefaultTask+0x478>)
 8016c32:	483f      	ldr	r0, [pc, #252]	; (8016d30 <StartDefaultTask+0x47c>)
 8016c34:	f7ed fcb2 	bl	800459c <HAL_UART_Transmit>
  mintues_int = atoi(mintues);
 8016c38:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8016c3c:	4618      	mov	r0, r3
 8016c3e:	f000 fc2c 	bl	801749a <atoi>
 8016c42:	4603      	mov	r3, r0
 8016c44:	f8a7 3240 	strh.w	r3, [r7, #576]	; 0x240
  sprintf(buf,"Value mintues is %d \n\r",mintues_int);
 8016c48:	f8b7 3240 	ldrh.w	r3, [r7, #576]	; 0x240
 8016c4c:	461a      	mov	r2, r3
 8016c4e:	493c      	ldr	r1, [pc, #240]	; (8016d40 <StartDefaultTask+0x48c>)
 8016c50:	4836      	ldr	r0, [pc, #216]	; (8016d2c <StartDefaultTask+0x478>)
 8016c52:	f000 fdf5 	bl	8017840 <siprintf>
  HAL_UART_Transmit(&huart3,buf,strlen(buf),1000);
 8016c56:	4835      	ldr	r0, [pc, #212]	; (8016d2c <StartDefaultTask+0x478>)
 8016c58:	f7e9 faf2 	bl	8000240 <strlen>
 8016c5c:	4603      	mov	r3, r0
 8016c5e:	b29a      	uxth	r2, r3
 8016c60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8016c64:	4931      	ldr	r1, [pc, #196]	; (8016d2c <StartDefaultTask+0x478>)
 8016c66:	4832      	ldr	r0, [pc, #200]	; (8016d30 <StartDefaultTask+0x47c>)
 8016c68:	f7ed fc98 	bl	800459c <HAL_UART_Transmit>
  second_int = atoi(second);
 8016c6c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8016c70:	4618      	mov	r0, r3
 8016c72:	f000 fc12 	bl	801749a <atoi>
 8016c76:	4603      	mov	r3, r0
 8016c78:	f8a7 323e 	strh.w	r3, [r7, #574]	; 0x23e
  sprintf(buf,"Value second is %d \n\r",second_int);
 8016c7c:	f8b7 323e 	ldrh.w	r3, [r7, #574]	; 0x23e
 8016c80:	461a      	mov	r2, r3
 8016c82:	4930      	ldr	r1, [pc, #192]	; (8016d44 <StartDefaultTask+0x490>)
 8016c84:	4829      	ldr	r0, [pc, #164]	; (8016d2c <StartDefaultTask+0x478>)
 8016c86:	f000 fddb 	bl	8017840 <siprintf>
  HAL_UART_Transmit(&huart3,buf,strlen(buf),1000);
 8016c8a:	4828      	ldr	r0, [pc, #160]	; (8016d2c <StartDefaultTask+0x478>)
 8016c8c:	f7e9 fad8 	bl	8000240 <strlen>
 8016c90:	4603      	mov	r3, r0
 8016c92:	b29a      	uxth	r2, r3
 8016c94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8016c98:	4924      	ldr	r1, [pc, #144]	; (8016d2c <StartDefaultTask+0x478>)
 8016c9a:	4825      	ldr	r0, [pc, #148]	; (8016d30 <StartDefaultTask+0x47c>)
 8016c9c:	f7ed fc7e 	bl	800459c <HAL_UART_Transmit>

  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8016ca0:	4829      	ldr	r0, [pc, #164]	; (8016d48 <StartDefaultTask+0x494>)
 8016ca2:	f7ec fc63 	bl	800356c <HAL_RTC_Init>
 8016ca6:	4603      	mov	r3, r0
 8016ca8:	2b00      	cmp	r3, #0
 8016caa:	d001      	beq.n	8016cb0 <StartDefaultTask+0x3fc>
   {
     Error_Handler();
 8016cac:	f000 f8a8 	bl	8016e00 <Error_Handler>
   }

  sDate.Year=years_int;
 8016cb0:	f8b7 3248 	ldrh.w	r3, [r7, #584]	; 0x248
 8016cb4:	b2da      	uxtb	r2, r3
 8016cb6:	4b25      	ldr	r3, [pc, #148]	; (8016d4c <StartDefaultTask+0x498>)
 8016cb8:	70da      	strb	r2, [r3, #3]
  sDate.Month=Month_int;
 8016cba:	f8b7 3246 	ldrh.w	r3, [r7, #582]	; 0x246
 8016cbe:	b2da      	uxtb	r2, r3
 8016cc0:	4b22      	ldr	r3, [pc, #136]	; (8016d4c <StartDefaultTask+0x498>)
 8016cc2:	705a      	strb	r2, [r3, #1]
  sDate.Date=days_int;
 8016cc4:	f8b7 3244 	ldrh.w	r3, [r7, #580]	; 0x244
 8016cc8:	b2da      	uxtb	r2, r3
 8016cca:	4b20      	ldr	r3, [pc, #128]	; (8016d4c <StartDefaultTask+0x498>)
 8016ccc:	709a      	strb	r2, [r3, #2]

  if(HAL_RTC_SetDate(&hrtc,&sDate,RTC_FORMAT_BIN) != HAL_OK)
 8016cce:	2200      	movs	r2, #0
 8016cd0:	491e      	ldr	r1, [pc, #120]	; (8016d4c <StartDefaultTask+0x498>)
 8016cd2:	481d      	ldr	r0, [pc, #116]	; (8016d48 <StartDefaultTask+0x494>)
 8016cd4:	f7ec fd9a 	bl	800380c <HAL_RTC_SetDate>
 8016cd8:	4603      	mov	r3, r0
 8016cda:	2b00      	cmp	r3, #0
 8016cdc:	d001      	beq.n	8016ce2 <StartDefaultTask+0x42e>
   {
     Error_Handler();
 8016cde:	f000 f88f 	bl	8016e00 <Error_Handler>
   }
  sTime.Hours=hours_int;
 8016ce2:	f8b7 3242 	ldrh.w	r3, [r7, #578]	; 0x242
 8016ce6:	b2da      	uxtb	r2, r3
 8016ce8:	4b19      	ldr	r3, [pc, #100]	; (8016d50 <StartDefaultTask+0x49c>)
 8016cea:	701a      	strb	r2, [r3, #0]
  sTime.Minutes=mintues_int;
 8016cec:	f8b7 3240 	ldrh.w	r3, [r7, #576]	; 0x240
 8016cf0:	b2da      	uxtb	r2, r3
 8016cf2:	4b17      	ldr	r3, [pc, #92]	; (8016d50 <StartDefaultTask+0x49c>)
 8016cf4:	705a      	strb	r2, [r3, #1]
  sTime.Seconds=second_int;
 8016cf6:	f8b7 323e 	ldrh.w	r3, [r7, #574]	; 0x23e
 8016cfa:	b2da      	uxtb	r2, r3
 8016cfc:	4b14      	ldr	r3, [pc, #80]	; (8016d50 <StartDefaultTask+0x49c>)
 8016cfe:	709a      	strb	r2, [r3, #2]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8016d00:	2200      	movs	r2, #0
 8016d02:	4913      	ldr	r1, [pc, #76]	; (8016d50 <StartDefaultTask+0x49c>)
 8016d04:	4810      	ldr	r0, [pc, #64]	; (8016d48 <StartDefaultTask+0x494>)
 8016d06:	f7ec fcc3 	bl	8003690 <HAL_RTC_SetTime>
 8016d0a:	4603      	mov	r3, r0
 8016d0c:	2b00      	cmp	r3, #0
 8016d0e:	d001      	beq.n	8016d14 <StartDefaultTask+0x460>
  {
    Error_Handler();
 8016d10:	f000 f876 	bl	8016e00 <Error_Handler>
  }
  /* Infinite loop */
  for(;;)
  {
	// RTC_CalendarShow(aShowTime, aShowDate);
	 HAL_GPIO_TogglePin(LD3_GPIO_Port,LD3_Pin);
 8016d14:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8016d18:	480e      	ldr	r0, [pc, #56]	; (8016d54 <StartDefaultTask+0x4a0>)
 8016d1a:	f7eb f95e 	bl	8001fda <HAL_GPIO_TogglePin>
	 osDelay(1000);
 8016d1e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8016d22:	f7ee f9f1 	bl	8005108 <osDelay>
	 HAL_GPIO_TogglePin(LD3_GPIO_Port,LD3_Pin);
 8016d26:	e7f5      	b.n	8016d14 <StartDefaultTask+0x460>
 8016d28:	0801ba1c 	.word	0x0801ba1c
 8016d2c:	20009a18 	.word	0x20009a18
 8016d30:	200097b8 	.word	0x200097b8
 8016d34:	0801ba34 	.word	0x0801ba34
 8016d38:	0801ba48 	.word	0x0801ba48
 8016d3c:	0801ba5c 	.word	0x0801ba5c
 8016d40:	0801ba6c 	.word	0x0801ba6c
 8016d44:	0801ba84 	.word	0x0801ba84
 8016d48:	200099e8 	.word	0x200099e8
 8016d4c:	200047fc 	.word	0x200047fc
 8016d50:	200047e4 	.word	0x200047e4
 8016d54:	40020400 	.word	0x40020400

08016d58 <MPU_Config>:
}

/* MPU Configuration */

void MPU_Config(void)
{
 8016d58:	b580      	push	{r7, lr}
 8016d5a:	b084      	sub	sp, #16
 8016d5c:	af00      	add	r7, sp, #0

  /* Disables the MPU */
	MPU_Region_InitTypeDef MPU_InitStruct;
	/* Disable the MPU */
	HAL_MPU_Disable();
 8016d5e:	f7e9 fd7f 	bl	8000860 <HAL_MPU_Disable>
	/* Configure the MPU as Normal Non Cacheable for Ethernet Buffers in the SRAM2 */
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8016d62:	2301      	movs	r3, #1
 8016d64:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.BaseAddress = 0x2007C000;
 8016d66:	4b1c      	ldr	r3, [pc, #112]	; (8016dd8 <MPU_Config+0x80>)
 8016d68:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 8016d6a:	230d      	movs	r3, #13
 8016d6c:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8016d6e:	2303      	movs	r3, #3
 8016d70:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8016d72:	2300      	movs	r3, #0
 8016d74:	73fb      	strb	r3, [r7, #15]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8016d76:	2300      	movs	r3, #0
 8016d78:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8016d7a:	2301      	movs	r3, #1
 8016d7c:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8016d7e:	2300      	movs	r3, #0
 8016d80:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8016d82:	2301      	movs	r3, #1
 8016d84:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.SubRegionDisable = 0x00;
 8016d86:	2300      	movs	r3, #0
 8016d88:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8016d8a:	2300      	movs	r3, #0
 8016d8c:	733b      	strb	r3, [r7, #12]
	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8016d8e:	463b      	mov	r3, r7
 8016d90:	4618      	mov	r0, r3
 8016d92:	f7e9 fd99 	bl	80008c8 <HAL_MPU_ConfigRegion>
	/* Configure the MPU as Device for Ethernet Descriptors in the SRAM2 */
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8016d96:	2301      	movs	r3, #1
 8016d98:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.BaseAddress = 0x2007C000;
 8016d9a:	4b0f      	ldr	r3, [pc, #60]	; (8016dd8 <MPU_Config+0x80>)
 8016d9c:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 8016d9e:	2307      	movs	r3, #7
 8016da0:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8016da2:	2303      	movs	r3, #3
 8016da4:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8016da6:	2301      	movs	r3, #1
 8016da8:	73fb      	strb	r3, [r7, #15]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8016daa:	2300      	movs	r3, #0
 8016dac:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8016dae:	2301      	movs	r3, #1
 8016db0:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8016db2:	2301      	movs	r3, #1
 8016db4:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8016db6:	2300      	movs	r3, #0
 8016db8:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.SubRegionDisable = 0x00;
 8016dba:	2300      	movs	r3, #0
 8016dbc:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8016dbe:	2300      	movs	r3, #0
 8016dc0:	733b      	strb	r3, [r7, #12]
	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8016dc2:	463b      	mov	r3, r7
 8016dc4:	4618      	mov	r0, r3
 8016dc6:	f7e9 fd7f 	bl	80008c8 <HAL_MPU_ConfigRegion>

		  /* Enable the MPU */
		  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8016dca:	2004      	movs	r0, #4
 8016dcc:	f7e9 fd5e 	bl	800088c <HAL_MPU_Enable>

}
 8016dd0:	bf00      	nop
 8016dd2:	3710      	adds	r7, #16
 8016dd4:	46bd      	mov	sp, r7
 8016dd6:	bd80      	pop	{r7, pc}
 8016dd8:	2007c000 	.word	0x2007c000

08016ddc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8016ddc:	b580      	push	{r7, lr}
 8016dde:	b082      	sub	sp, #8
 8016de0:	af00      	add	r7, sp, #0
 8016de2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8016de4:	687b      	ldr	r3, [r7, #4]
 8016de6:	681b      	ldr	r3, [r3, #0]
 8016de8:	4a04      	ldr	r2, [pc, #16]	; (8016dfc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8016dea:	4293      	cmp	r3, r2
 8016dec:	d101      	bne.n	8016df2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8016dee:	f7e9 fc15 	bl	800061c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8016df2:	bf00      	nop
 8016df4:	3708      	adds	r7, #8
 8016df6:	46bd      	mov	sp, r7
 8016df8:	bd80      	pop	{r7, pc}
 8016dfa:	bf00      	nop
 8016dfc:	40000800 	.word	0x40000800

08016e00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8016e00:	b480      	push	{r7}
 8016e02:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8016e04:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8016e06:	e7fe      	b.n	8016e06 <Error_Handler+0x6>

08016e08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8016e08:	b580      	push	{r7, lr}
 8016e0a:	b082      	sub	sp, #8
 8016e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8016e0e:	4a11      	ldr	r2, [pc, #68]	; (8016e54 <HAL_MspInit+0x4c>)
 8016e10:	4b10      	ldr	r3, [pc, #64]	; (8016e54 <HAL_MspInit+0x4c>)
 8016e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016e14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8016e18:	6413      	str	r3, [r2, #64]	; 0x40
 8016e1a:	4b0e      	ldr	r3, [pc, #56]	; (8016e54 <HAL_MspInit+0x4c>)
 8016e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8016e22:	607b      	str	r3, [r7, #4]
 8016e24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8016e26:	4a0b      	ldr	r2, [pc, #44]	; (8016e54 <HAL_MspInit+0x4c>)
 8016e28:	4b0a      	ldr	r3, [pc, #40]	; (8016e54 <HAL_MspInit+0x4c>)
 8016e2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016e2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8016e30:	6453      	str	r3, [r2, #68]	; 0x44
 8016e32:	4b08      	ldr	r3, [pc, #32]	; (8016e54 <HAL_MspInit+0x4c>)
 8016e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016e36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8016e3a:	603b      	str	r3, [r7, #0]
 8016e3c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8016e3e:	2200      	movs	r2, #0
 8016e40:	210f      	movs	r1, #15
 8016e42:	f06f 0001 	mvn.w	r0, #1
 8016e46:	f7e9 fce1 	bl	800080c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8016e4a:	bf00      	nop
 8016e4c:	3708      	adds	r7, #8
 8016e4e:	46bd      	mov	sp, r7
 8016e50:	bd80      	pop	{r7, pc}
 8016e52:	bf00      	nop
 8016e54:	40023800 	.word	0x40023800

08016e58 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8016e58:	b580      	push	{r7, lr}
 8016e5a:	b08a      	sub	sp, #40	; 0x28
 8016e5c:	af00      	add	r7, sp, #0
 8016e5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8016e60:	f107 0314 	add.w	r3, r7, #20
 8016e64:	2200      	movs	r2, #0
 8016e66:	601a      	str	r2, [r3, #0]
 8016e68:	605a      	str	r2, [r3, #4]
 8016e6a:	609a      	str	r2, [r3, #8]
 8016e6c:	60da      	str	r2, [r3, #12]
 8016e6e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8016e70:	687b      	ldr	r3, [r7, #4]
 8016e72:	681b      	ldr	r3, [r3, #0]
 8016e74:	4a17      	ldr	r2, [pc, #92]	; (8016ed4 <HAL_I2C_MspInit+0x7c>)
 8016e76:	4293      	cmp	r3, r2
 8016e78:	d128      	bne.n	8016ecc <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8016e7a:	4a17      	ldr	r2, [pc, #92]	; (8016ed8 <HAL_I2C_MspInit+0x80>)
 8016e7c:	4b16      	ldr	r3, [pc, #88]	; (8016ed8 <HAL_I2C_MspInit+0x80>)
 8016e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016e80:	f043 0302 	orr.w	r3, r3, #2
 8016e84:	6313      	str	r3, [r2, #48]	; 0x30
 8016e86:	4b14      	ldr	r3, [pc, #80]	; (8016ed8 <HAL_I2C_MspInit+0x80>)
 8016e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016e8a:	f003 0302 	and.w	r3, r3, #2
 8016e8e:	613b      	str	r3, [r7, #16]
 8016e90:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8016e92:	f44f 7310 	mov.w	r3, #576	; 0x240
 8016e96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8016e98:	2312      	movs	r3, #18
 8016e9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8016e9c:	2301      	movs	r3, #1
 8016e9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8016ea0:	2303      	movs	r3, #3
 8016ea2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8016ea4:	2304      	movs	r3, #4
 8016ea6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8016ea8:	f107 0314 	add.w	r3, r7, #20
 8016eac:	4619      	mov	r1, r3
 8016eae:	480b      	ldr	r0, [pc, #44]	; (8016edc <HAL_I2C_MspInit+0x84>)
 8016eb0:	f7ea fed0 	bl	8001c54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8016eb4:	4a08      	ldr	r2, [pc, #32]	; (8016ed8 <HAL_I2C_MspInit+0x80>)
 8016eb6:	4b08      	ldr	r3, [pc, #32]	; (8016ed8 <HAL_I2C_MspInit+0x80>)
 8016eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016eba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8016ebe:	6413      	str	r3, [r2, #64]	; 0x40
 8016ec0:	4b05      	ldr	r3, [pc, #20]	; (8016ed8 <HAL_I2C_MspInit+0x80>)
 8016ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016ec4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8016ec8:	60fb      	str	r3, [r7, #12]
 8016eca:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8016ecc:	bf00      	nop
 8016ece:	3728      	adds	r7, #40	; 0x28
 8016ed0:	46bd      	mov	sp, r7
 8016ed2:	bd80      	pop	{r7, pc}
 8016ed4:	40005400 	.word	0x40005400
 8016ed8:	40023800 	.word	0x40023800
 8016edc:	40020400 	.word	0x40020400

08016ee0 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8016ee0:	b480      	push	{r7}
 8016ee2:	b085      	sub	sp, #20
 8016ee4:	af00      	add	r7, sp, #0
 8016ee6:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8016ee8:	687b      	ldr	r3, [r7, #4]
 8016eea:	681b      	ldr	r3, [r3, #0]
 8016eec:	4a0a      	ldr	r2, [pc, #40]	; (8016f18 <HAL_RNG_MspInit+0x38>)
 8016eee:	4293      	cmp	r3, r2
 8016ef0:	d10b      	bne.n	8016f0a <HAL_RNG_MspInit+0x2a>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8016ef2:	4a0a      	ldr	r2, [pc, #40]	; (8016f1c <HAL_RNG_MspInit+0x3c>)
 8016ef4:	4b09      	ldr	r3, [pc, #36]	; (8016f1c <HAL_RNG_MspInit+0x3c>)
 8016ef6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016ef8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016efc:	6353      	str	r3, [r2, #52]	; 0x34
 8016efe:	4b07      	ldr	r3, [pc, #28]	; (8016f1c <HAL_RNG_MspInit+0x3c>)
 8016f00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016f02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016f06:	60fb      	str	r3, [r7, #12]
 8016f08:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8016f0a:	bf00      	nop
 8016f0c:	3714      	adds	r7, #20
 8016f0e:	46bd      	mov	sp, r7
 8016f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f14:	4770      	bx	lr
 8016f16:	bf00      	nop
 8016f18:	50060800 	.word	0x50060800
 8016f1c:	40023800 	.word	0x40023800

08016f20 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8016f20:	b480      	push	{r7}
 8016f22:	b083      	sub	sp, #12
 8016f24:	af00      	add	r7, sp, #0
 8016f26:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8016f28:	687b      	ldr	r3, [r7, #4]
 8016f2a:	681b      	ldr	r3, [r3, #0]
 8016f2c:	4a07      	ldr	r2, [pc, #28]	; (8016f4c <HAL_RTC_MspInit+0x2c>)
 8016f2e:	4293      	cmp	r3, r2
 8016f30:	d105      	bne.n	8016f3e <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8016f32:	4a07      	ldr	r2, [pc, #28]	; (8016f50 <HAL_RTC_MspInit+0x30>)
 8016f34:	4b06      	ldr	r3, [pc, #24]	; (8016f50 <HAL_RTC_MspInit+0x30>)
 8016f36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016f38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8016f3c:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8016f3e:	bf00      	nop
 8016f40:	370c      	adds	r7, #12
 8016f42:	46bd      	mov	sp, r7
 8016f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f48:	4770      	bx	lr
 8016f4a:	bf00      	nop
 8016f4c:	40002800 	.word	0x40002800
 8016f50:	40023800 	.word	0x40023800

08016f54 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8016f54:	b580      	push	{r7, lr}
 8016f56:	b08e      	sub	sp, #56	; 0x38
 8016f58:	af00      	add	r7, sp, #0
 8016f5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8016f5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8016f60:	2200      	movs	r2, #0
 8016f62:	601a      	str	r2, [r3, #0]
 8016f64:	605a      	str	r2, [r3, #4]
 8016f66:	609a      	str	r2, [r3, #8]
 8016f68:	60da      	str	r2, [r3, #12]
 8016f6a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8016f6c:	687b      	ldr	r3, [r7, #4]
 8016f6e:	681b      	ldr	r3, [r3, #0]
 8016f70:	4a4a      	ldr	r2, [pc, #296]	; (801709c <HAL_SPI_MspInit+0x148>)
 8016f72:	4293      	cmp	r3, r2
 8016f74:	d144      	bne.n	8017000 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8016f76:	4a4a      	ldr	r2, [pc, #296]	; (80170a0 <HAL_SPI_MspInit+0x14c>)
 8016f78:	4b49      	ldr	r3, [pc, #292]	; (80170a0 <HAL_SPI_MspInit+0x14c>)
 8016f7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016f7c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8016f80:	6453      	str	r3, [r2, #68]	; 0x44
 8016f82:	4b47      	ldr	r3, [pc, #284]	; (80170a0 <HAL_SPI_MspInit+0x14c>)
 8016f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016f86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8016f8a:	623b      	str	r3, [r7, #32]
 8016f8c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8016f8e:	4a44      	ldr	r2, [pc, #272]	; (80170a0 <HAL_SPI_MspInit+0x14c>)
 8016f90:	4b43      	ldr	r3, [pc, #268]	; (80170a0 <HAL_SPI_MspInit+0x14c>)
 8016f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016f94:	f043 0301 	orr.w	r3, r3, #1
 8016f98:	6313      	str	r3, [r2, #48]	; 0x30
 8016f9a:	4b41      	ldr	r3, [pc, #260]	; (80170a0 <HAL_SPI_MspInit+0x14c>)
 8016f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016f9e:	f003 0301 	and.w	r3, r3, #1
 8016fa2:	61fb      	str	r3, [r7, #28]
 8016fa4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8016fa6:	4a3e      	ldr	r2, [pc, #248]	; (80170a0 <HAL_SPI_MspInit+0x14c>)
 8016fa8:	4b3d      	ldr	r3, [pc, #244]	; (80170a0 <HAL_SPI_MspInit+0x14c>)
 8016faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016fac:	f043 0308 	orr.w	r3, r3, #8
 8016fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8016fb2:	4b3b      	ldr	r3, [pc, #236]	; (80170a0 <HAL_SPI_MspInit+0x14c>)
 8016fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016fb6:	f003 0308 	and.w	r3, r3, #8
 8016fba:	61bb      	str	r3, [r7, #24]
 8016fbc:	69bb      	ldr	r3, [r7, #24]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8016fbe:	2370      	movs	r3, #112	; 0x70
 8016fc0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8016fc2:	2302      	movs	r3, #2
 8016fc4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016fc6:	2300      	movs	r3, #0
 8016fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8016fca:	2303      	movs	r3, #3
 8016fcc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8016fce:	2305      	movs	r3, #5
 8016fd0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8016fd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8016fd6:	4619      	mov	r1, r3
 8016fd8:	4832      	ldr	r0, [pc, #200]	; (80170a4 <HAL_SPI_MspInit+0x150>)
 8016fda:	f7ea fe3b 	bl	8001c54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8016fde:	2380      	movs	r3, #128	; 0x80
 8016fe0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8016fe2:	2302      	movs	r3, #2
 8016fe4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016fe6:	2300      	movs	r3, #0
 8016fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8016fea:	2303      	movs	r3, #3
 8016fec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8016fee:	2305      	movs	r3, #5
 8016ff0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8016ff2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8016ff6:	4619      	mov	r1, r3
 8016ff8:	482b      	ldr	r0, [pc, #172]	; (80170a8 <HAL_SPI_MspInit+0x154>)
 8016ffa:	f7ea fe2b 	bl	8001c54 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8016ffe:	e049      	b.n	8017094 <HAL_SPI_MspInit+0x140>
  else if(hspi->Instance==SPI2)
 8017000:	687b      	ldr	r3, [r7, #4]
 8017002:	681b      	ldr	r3, [r3, #0]
 8017004:	4a29      	ldr	r2, [pc, #164]	; (80170ac <HAL_SPI_MspInit+0x158>)
 8017006:	4293      	cmp	r3, r2
 8017008:	d144      	bne.n	8017094 <HAL_SPI_MspInit+0x140>
    __HAL_RCC_SPI2_CLK_ENABLE();
 801700a:	4a25      	ldr	r2, [pc, #148]	; (80170a0 <HAL_SPI_MspInit+0x14c>)
 801700c:	4b24      	ldr	r3, [pc, #144]	; (80170a0 <HAL_SPI_MspInit+0x14c>)
 801700e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017010:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8017014:	6413      	str	r3, [r2, #64]	; 0x40
 8017016:	4b22      	ldr	r3, [pc, #136]	; (80170a0 <HAL_SPI_MspInit+0x14c>)
 8017018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801701a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801701e:	617b      	str	r3, [r7, #20]
 8017020:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8017022:	4a1f      	ldr	r2, [pc, #124]	; (80170a0 <HAL_SPI_MspInit+0x14c>)
 8017024:	4b1e      	ldr	r3, [pc, #120]	; (80170a0 <HAL_SPI_MspInit+0x14c>)
 8017026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017028:	f043 0304 	orr.w	r3, r3, #4
 801702c:	6313      	str	r3, [r2, #48]	; 0x30
 801702e:	4b1c      	ldr	r3, [pc, #112]	; (80170a0 <HAL_SPI_MspInit+0x14c>)
 8017030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017032:	f003 0304 	and.w	r3, r3, #4
 8017036:	613b      	str	r3, [r7, #16]
 8017038:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801703a:	4a19      	ldr	r2, [pc, #100]	; (80170a0 <HAL_SPI_MspInit+0x14c>)
 801703c:	4b18      	ldr	r3, [pc, #96]	; (80170a0 <HAL_SPI_MspInit+0x14c>)
 801703e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017040:	f043 0302 	orr.w	r3, r3, #2
 8017044:	6313      	str	r3, [r2, #48]	; 0x30
 8017046:	4b16      	ldr	r3, [pc, #88]	; (80170a0 <HAL_SPI_MspInit+0x14c>)
 8017048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801704a:	f003 0302 	and.w	r3, r3, #2
 801704e:	60fb      	str	r3, [r7, #12]
 8017050:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8017052:	230c      	movs	r3, #12
 8017054:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017056:	2302      	movs	r3, #2
 8017058:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801705a:	2300      	movs	r3, #0
 801705c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801705e:	2303      	movs	r3, #3
 8017060:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8017062:	2305      	movs	r3, #5
 8017064:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8017066:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801706a:	4619      	mov	r1, r3
 801706c:	4810      	ldr	r0, [pc, #64]	; (80170b0 <HAL_SPI_MspInit+0x15c>)
 801706e:	f7ea fdf1 	bl	8001c54 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8017072:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8017076:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017078:	2302      	movs	r3, #2
 801707a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801707c:	2300      	movs	r3, #0
 801707e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8017080:	2303      	movs	r3, #3
 8017082:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8017084:	2305      	movs	r3, #5
 8017086:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8017088:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801708c:	4619      	mov	r1, r3
 801708e:	4809      	ldr	r0, [pc, #36]	; (80170b4 <HAL_SPI_MspInit+0x160>)
 8017090:	f7ea fde0 	bl	8001c54 <HAL_GPIO_Init>
}
 8017094:	bf00      	nop
 8017096:	3738      	adds	r7, #56	; 0x38
 8017098:	46bd      	mov	sp, r7
 801709a:	bd80      	pop	{r7, pc}
 801709c:	40013000 	.word	0x40013000
 80170a0:	40023800 	.word	0x40023800
 80170a4:	40020000 	.word	0x40020000
 80170a8:	40020c00 	.word	0x40020c00
 80170ac:	40003800 	.word	0x40003800
 80170b0:	40020800 	.word	0x40020800
 80170b4:	40020400 	.word	0x40020400

080170b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80170b8:	b580      	push	{r7, lr}
 80170ba:	b084      	sub	sp, #16
 80170bc:	af00      	add	r7, sp, #0
 80170be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80170c0:	687b      	ldr	r3, [r7, #4]
 80170c2:	681b      	ldr	r3, [r3, #0]
 80170c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80170c8:	d114      	bne.n	80170f4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80170ca:	4a19      	ldr	r2, [pc, #100]	; (8017130 <HAL_TIM_Base_MspInit+0x78>)
 80170cc:	4b18      	ldr	r3, [pc, #96]	; (8017130 <HAL_TIM_Base_MspInit+0x78>)
 80170ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80170d0:	f043 0301 	orr.w	r3, r3, #1
 80170d4:	6413      	str	r3, [r2, #64]	; 0x40
 80170d6:	4b16      	ldr	r3, [pc, #88]	; (8017130 <HAL_TIM_Base_MspInit+0x78>)
 80170d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80170da:	f003 0301 	and.w	r3, r3, #1
 80170de:	60fb      	str	r3, [r7, #12]
 80170e0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80170e2:	2200      	movs	r2, #0
 80170e4:	2105      	movs	r1, #5
 80170e6:	201c      	movs	r0, #28
 80170e8:	f7e9 fb90 	bl	800080c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80170ec:	201c      	movs	r0, #28
 80170ee:	f7e9 fba9 	bl	8000844 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80170f2:	e018      	b.n	8017126 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM5)
 80170f4:	687b      	ldr	r3, [r7, #4]
 80170f6:	681b      	ldr	r3, [r3, #0]
 80170f8:	4a0e      	ldr	r2, [pc, #56]	; (8017134 <HAL_TIM_Base_MspInit+0x7c>)
 80170fa:	4293      	cmp	r3, r2
 80170fc:	d113      	bne.n	8017126 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80170fe:	4a0c      	ldr	r2, [pc, #48]	; (8017130 <HAL_TIM_Base_MspInit+0x78>)
 8017100:	4b0b      	ldr	r3, [pc, #44]	; (8017130 <HAL_TIM_Base_MspInit+0x78>)
 8017102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017104:	f043 0308 	orr.w	r3, r3, #8
 8017108:	6413      	str	r3, [r2, #64]	; 0x40
 801710a:	4b09      	ldr	r3, [pc, #36]	; (8017130 <HAL_TIM_Base_MspInit+0x78>)
 801710c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801710e:	f003 0308 	and.w	r3, r3, #8
 8017112:	60bb      	str	r3, [r7, #8]
 8017114:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 8017116:	2200      	movs	r2, #0
 8017118:	2105      	movs	r1, #5
 801711a:	2032      	movs	r0, #50	; 0x32
 801711c:	f7e9 fb76 	bl	800080c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8017120:	2032      	movs	r0, #50	; 0x32
 8017122:	f7e9 fb8f 	bl	8000844 <HAL_NVIC_EnableIRQ>
}
 8017126:	bf00      	nop
 8017128:	3710      	adds	r7, #16
 801712a:	46bd      	mov	sp, r7
 801712c:	bd80      	pop	{r7, pc}
 801712e:	bf00      	nop
 8017130:	40023800 	.word	0x40023800
 8017134:	40000c00 	.word	0x40000c00

08017138 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8017138:	b580      	push	{r7, lr}
 801713a:	b08a      	sub	sp, #40	; 0x28
 801713c:	af00      	add	r7, sp, #0
 801713e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017140:	f107 0314 	add.w	r3, r7, #20
 8017144:	2200      	movs	r2, #0
 8017146:	601a      	str	r2, [r3, #0]
 8017148:	605a      	str	r2, [r3, #4]
 801714a:	609a      	str	r2, [r3, #8]
 801714c:	60da      	str	r2, [r3, #12]
 801714e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8017150:	687b      	ldr	r3, [r7, #4]
 8017152:	681b      	ldr	r3, [r3, #0]
 8017154:	4a17      	ldr	r2, [pc, #92]	; (80171b4 <HAL_UART_MspInit+0x7c>)
 8017156:	4293      	cmp	r3, r2
 8017158:	d128      	bne.n	80171ac <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 801715a:	4a17      	ldr	r2, [pc, #92]	; (80171b8 <HAL_UART_MspInit+0x80>)
 801715c:	4b16      	ldr	r3, [pc, #88]	; (80171b8 <HAL_UART_MspInit+0x80>)
 801715e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017160:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8017164:	6413      	str	r3, [r2, #64]	; 0x40
 8017166:	4b14      	ldr	r3, [pc, #80]	; (80171b8 <HAL_UART_MspInit+0x80>)
 8017168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801716a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801716e:	613b      	str	r3, [r7, #16]
 8017170:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8017172:	4a11      	ldr	r2, [pc, #68]	; (80171b8 <HAL_UART_MspInit+0x80>)
 8017174:	4b10      	ldr	r3, [pc, #64]	; (80171b8 <HAL_UART_MspInit+0x80>)
 8017176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017178:	f043 0308 	orr.w	r3, r3, #8
 801717c:	6313      	str	r3, [r2, #48]	; 0x30
 801717e:	4b0e      	ldr	r3, [pc, #56]	; (80171b8 <HAL_UART_MspInit+0x80>)
 8017180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017182:	f003 0308 	and.w	r3, r3, #8
 8017186:	60fb      	str	r3, [r7, #12]
 8017188:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 801718a:	f44f 7340 	mov.w	r3, #768	; 0x300
 801718e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017190:	2302      	movs	r3, #2
 8017192:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017194:	2300      	movs	r3, #0
 8017196:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8017198:	2303      	movs	r3, #3
 801719a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 801719c:	2307      	movs	r3, #7
 801719e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80171a0:	f107 0314 	add.w	r3, r7, #20
 80171a4:	4619      	mov	r1, r3
 80171a6:	4805      	ldr	r0, [pc, #20]	; (80171bc <HAL_UART_MspInit+0x84>)
 80171a8:	f7ea fd54 	bl	8001c54 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80171ac:	bf00      	nop
 80171ae:	3728      	adds	r7, #40	; 0x28
 80171b0:	46bd      	mov	sp, r7
 80171b2:	bd80      	pop	{r7, pc}
 80171b4:	40004800 	.word	0x40004800
 80171b8:	40023800 	.word	0x40023800
 80171bc:	40020c00 	.word	0x40020c00

080171c0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80171c0:	b580      	push	{r7, lr}
 80171c2:	b08c      	sub	sp, #48	; 0x30
 80171c4:	af00      	add	r7, sp, #0
 80171c6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80171c8:	2300      	movs	r3, #0
 80171ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80171cc:	2300      	movs	r3, #0
 80171ce:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 80171d0:	2200      	movs	r2, #0
 80171d2:	6879      	ldr	r1, [r7, #4]
 80171d4:	201e      	movs	r0, #30
 80171d6:	f7e9 fb19 	bl	800080c <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80171da:	201e      	movs	r0, #30
 80171dc:	f7e9 fb32 	bl	8000844 <HAL_NVIC_EnableIRQ>
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80171e0:	4a1f      	ldr	r2, [pc, #124]	; (8017260 <HAL_InitTick+0xa0>)
 80171e2:	4b1f      	ldr	r3, [pc, #124]	; (8017260 <HAL_InitTick+0xa0>)
 80171e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80171e6:	f043 0304 	orr.w	r3, r3, #4
 80171ea:	6413      	str	r3, [r2, #64]	; 0x40
 80171ec:	4b1c      	ldr	r3, [pc, #112]	; (8017260 <HAL_InitTick+0xa0>)
 80171ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80171f0:	f003 0304 	and.w	r3, r3, #4
 80171f4:	60fb      	str	r3, [r7, #12]
 80171f6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80171f8:	f107 0210 	add.w	r2, r7, #16
 80171fc:	f107 0314 	add.w	r3, r7, #20
 8017200:	4611      	mov	r1, r2
 8017202:	4618      	mov	r0, r3
 8017204:	f7eb fd30 	bl	8002c68 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8017208:	f7eb fd06 	bl	8002c18 <HAL_RCC_GetPCLK1Freq>
 801720c:	4603      	mov	r3, r0
 801720e:	005b      	lsls	r3, r3, #1
 8017210:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8017212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017214:	4a13      	ldr	r2, [pc, #76]	; (8017264 <HAL_InitTick+0xa4>)
 8017216:	fba2 2303 	umull	r2, r3, r2, r3
 801721a:	0c9b      	lsrs	r3, r3, #18
 801721c:	3b01      	subs	r3, #1
 801721e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8017220:	4b11      	ldr	r3, [pc, #68]	; (8017268 <HAL_InitTick+0xa8>)
 8017222:	4a12      	ldr	r2, [pc, #72]	; (801726c <HAL_InitTick+0xac>)
 8017224:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8017226:	4b10      	ldr	r3, [pc, #64]	; (8017268 <HAL_InitTick+0xa8>)
 8017228:	f240 32e7 	movw	r2, #999	; 0x3e7
 801722c:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 801722e:	4a0e      	ldr	r2, [pc, #56]	; (8017268 <HAL_InitTick+0xa8>)
 8017230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017232:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8017234:	4b0c      	ldr	r3, [pc, #48]	; (8017268 <HAL_InitTick+0xa8>)
 8017236:	2200      	movs	r2, #0
 8017238:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 801723a:	4b0b      	ldr	r3, [pc, #44]	; (8017268 <HAL_InitTick+0xa8>)
 801723c:	2200      	movs	r2, #0
 801723e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8017240:	4809      	ldr	r0, [pc, #36]	; (8017268 <HAL_InitTick+0xa8>)
 8017242:	f7ec fca6 	bl	8003b92 <HAL_TIM_Base_Init>
 8017246:	4603      	mov	r3, r0
 8017248:	2b00      	cmp	r3, #0
 801724a:	d104      	bne.n	8017256 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 801724c:	4806      	ldr	r0, [pc, #24]	; (8017268 <HAL_InitTick+0xa8>)
 801724e:	f7ec fcf7 	bl	8003c40 <HAL_TIM_Base_Start_IT>
 8017252:	4603      	mov	r3, r0
 8017254:	e000      	b.n	8017258 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8017256:	2301      	movs	r3, #1
}
 8017258:	4618      	mov	r0, r3
 801725a:	3730      	adds	r7, #48	; 0x30
 801725c:	46bd      	mov	sp, r7
 801725e:	bd80      	pop	{r7, pc}
 8017260:	40023800 	.word	0x40023800
 8017264:	431bde83 	.word	0x431bde83
 8017268:	20009b2c 	.word	0x20009b2c
 801726c:	40000800 	.word	0x40000800

08017270 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8017270:	b480      	push	{r7}
 8017272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8017274:	e7fe      	b.n	8017274 <NMI_Handler+0x4>

08017276 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8017276:	b480      	push	{r7}
 8017278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 801727a:	e7fe      	b.n	801727a <HardFault_Handler+0x4>

0801727c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 801727c:	b480      	push	{r7}
 801727e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8017280:	e7fe      	b.n	8017280 <MemManage_Handler+0x4>

08017282 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8017282:	b480      	push	{r7}
 8017284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8017286:	e7fe      	b.n	8017286 <BusFault_Handler+0x4>

08017288 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8017288:	b480      	push	{r7}
 801728a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 801728c:	e7fe      	b.n	801728c <UsageFault_Handler+0x4>

0801728e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 801728e:	b480      	push	{r7}
 8017290:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8017292:	bf00      	nop
 8017294:	46bd      	mov	sp, r7
 8017296:	f85d 7b04 	ldr.w	r7, [sp], #4
 801729a:	4770      	bx	lr

0801729c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 801729c:	b580      	push	{r7, lr}
 801729e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80172a0:	4802      	ldr	r0, [pc, #8]	; (80172ac <TIM2_IRQHandler+0x10>)
 80172a2:	f7ec fd45 	bl	8003d30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80172a6:	bf00      	nop
 80172a8:	bd80      	pop	{r7, pc}
 80172aa:	bf00      	nop
 80172ac:	20009ae0 	.word	0x20009ae0

080172b0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80172b0:	b580      	push	{r7, lr}
 80172b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80172b4:	4802      	ldr	r0, [pc, #8]	; (80172c0 <TIM4_IRQHandler+0x10>)
 80172b6:	f7ec fd3b 	bl	8003d30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80172ba:	bf00      	nop
 80172bc:	bd80      	pop	{r7, pc}
 80172be:	bf00      	nop
 80172c0:	20009b2c 	.word	0x20009b2c

080172c4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80172c4:	b580      	push	{r7, lr}
 80172c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80172c8:	4802      	ldr	r0, [pc, #8]	; (80172d4 <TIM5_IRQHandler+0x10>)
 80172ca:	f7ec fd31 	bl	8003d30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80172ce:	bf00      	nop
 80172d0:	bd80      	pop	{r7, pc}
 80172d2:	bf00      	nop
 80172d4:	20009888 	.word	0x20009888

080172d8 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80172d8:	b580      	push	{r7, lr}
 80172da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80172dc:	4802      	ldr	r0, [pc, #8]	; (80172e8 <ETH_IRQHandler+0x10>)
 80172de:	f7e9 ff1b 	bl	8001118 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80172e2:	bf00      	nop
 80172e4:	bd80      	pop	{r7, pc}
 80172e6:	bf00      	nop
 80172e8:	20009648 	.word	0x20009648

080172ec <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80172ec:	b590      	push	{r4, r7, lr}
 80172ee:	b087      	sub	sp, #28
 80172f0:	af00      	add	r7, sp, #0
 80172f2:	60f8      	str	r0, [r7, #12]
 80172f4:	60b9      	str	r1, [r7, #8]
 80172f6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80172f8:	2300      	movs	r3, #0
 80172fa:	617b      	str	r3, [r7, #20]
 80172fc:	e00a      	b.n	8017314 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80172fe:	68bc      	ldr	r4, [r7, #8]
 8017300:	1c63      	adds	r3, r4, #1
 8017302:	60bb      	str	r3, [r7, #8]
 8017304:	f7fe fe60 	bl	8015fc8 <__io_getchar>
 8017308:	4603      	mov	r3, r0
 801730a:	b2db      	uxtb	r3, r3
 801730c:	7023      	strb	r3, [r4, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 801730e:	697b      	ldr	r3, [r7, #20]
 8017310:	3301      	adds	r3, #1
 8017312:	617b      	str	r3, [r7, #20]
 8017314:	697a      	ldr	r2, [r7, #20]
 8017316:	687b      	ldr	r3, [r7, #4]
 8017318:	429a      	cmp	r2, r3
 801731a:	dbf0      	blt.n	80172fe <_read+0x12>
	}

return len;
 801731c:	687b      	ldr	r3, [r7, #4]
}
 801731e:	4618      	mov	r0, r3
 8017320:	371c      	adds	r7, #28
 8017322:	46bd      	mov	sp, r7
 8017324:	bd90      	pop	{r4, r7, pc}

08017326 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8017326:	b580      	push	{r7, lr}
 8017328:	b086      	sub	sp, #24
 801732a:	af00      	add	r7, sp, #0
 801732c:	60f8      	str	r0, [r7, #12]
 801732e:	60b9      	str	r1, [r7, #8]
 8017330:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8017332:	2300      	movs	r3, #0
 8017334:	617b      	str	r3, [r7, #20]
 8017336:	e009      	b.n	801734c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8017338:	68bb      	ldr	r3, [r7, #8]
 801733a:	1c5a      	adds	r2, r3, #1
 801733c:	60ba      	str	r2, [r7, #8]
 801733e:	781b      	ldrb	r3, [r3, #0]
 8017340:	4618      	mov	r0, r3
 8017342:	f7fe fe2b 	bl	8015f9c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8017346:	697b      	ldr	r3, [r7, #20]
 8017348:	3301      	adds	r3, #1
 801734a:	617b      	str	r3, [r7, #20]
 801734c:	697a      	ldr	r2, [r7, #20]
 801734e:	687b      	ldr	r3, [r7, #4]
 8017350:	429a      	cmp	r2, r3
 8017352:	dbf1      	blt.n	8017338 <_write+0x12>
	}
	return len;
 8017354:	687b      	ldr	r3, [r7, #4]
}
 8017356:	4618      	mov	r0, r3
 8017358:	3718      	adds	r7, #24
 801735a:	46bd      	mov	sp, r7
 801735c:	bd80      	pop	{r7, pc}
	...

08017360 <_sbrk>:

caddr_t _sbrk(int incr)
{
 8017360:	b480      	push	{r7}
 8017362:	b085      	sub	sp, #20
 8017364:	af00      	add	r7, sp, #0
 8017366:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8017368:	4b11      	ldr	r3, [pc, #68]	; (80173b0 <_sbrk+0x50>)
 801736a:	681b      	ldr	r3, [r3, #0]
 801736c:	2b00      	cmp	r3, #0
 801736e:	d102      	bne.n	8017376 <_sbrk+0x16>
		heap_end = &end;
 8017370:	4b0f      	ldr	r3, [pc, #60]	; (80173b0 <_sbrk+0x50>)
 8017372:	4a10      	ldr	r2, [pc, #64]	; (80173b4 <_sbrk+0x54>)
 8017374:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8017376:	4b0e      	ldr	r3, [pc, #56]	; (80173b0 <_sbrk+0x50>)
 8017378:	681b      	ldr	r3, [r3, #0]
 801737a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 801737c:	4b0c      	ldr	r3, [pc, #48]	; (80173b0 <_sbrk+0x50>)
 801737e:	681a      	ldr	r2, [r3, #0]
 8017380:	687b      	ldr	r3, [r7, #4]
 8017382:	4413      	add	r3, r2
 8017384:	466a      	mov	r2, sp
 8017386:	4293      	cmp	r3, r2
 8017388:	d905      	bls.n	8017396 <_sbrk+0x36>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 801738a:	4b0b      	ldr	r3, [pc, #44]	; (80173b8 <_sbrk+0x58>)
 801738c:	220c      	movs	r2, #12
 801738e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8017390:	f04f 33ff 	mov.w	r3, #4294967295
 8017394:	e006      	b.n	80173a4 <_sbrk+0x44>
	}

	heap_end += incr;
 8017396:	4b06      	ldr	r3, [pc, #24]	; (80173b0 <_sbrk+0x50>)
 8017398:	681a      	ldr	r2, [r3, #0]
 801739a:	687b      	ldr	r3, [r7, #4]
 801739c:	4413      	add	r3, r2
 801739e:	4a04      	ldr	r2, [pc, #16]	; (80173b0 <_sbrk+0x50>)
 80173a0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80173a2:	68fb      	ldr	r3, [r7, #12]
}
 80173a4:	4618      	mov	r0, r3
 80173a6:	3714      	adds	r7, #20
 80173a8:	46bd      	mov	sp, r7
 80173aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173ae:	4770      	bx	lr
 80173b0:	20004800 	.word	0x20004800
 80173b4:	20009b78 	.word	0x20009b78
 80173b8:	20009640 	.word	0x20009640

080173bc <_close>:

int _close(int file)
{
 80173bc:	b480      	push	{r7}
 80173be:	b083      	sub	sp, #12
 80173c0:	af00      	add	r7, sp, #0
 80173c2:	6078      	str	r0, [r7, #4]
	return -1;
 80173c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80173c8:	4618      	mov	r0, r3
 80173ca:	370c      	adds	r7, #12
 80173cc:	46bd      	mov	sp, r7
 80173ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173d2:	4770      	bx	lr

080173d4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80173d4:	b480      	push	{r7}
 80173d6:	b083      	sub	sp, #12
 80173d8:	af00      	add	r7, sp, #0
 80173da:	6078      	str	r0, [r7, #4]
 80173dc:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80173de:	683b      	ldr	r3, [r7, #0]
 80173e0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80173e4:	605a      	str	r2, [r3, #4]
	return 0;
 80173e6:	2300      	movs	r3, #0
}
 80173e8:	4618      	mov	r0, r3
 80173ea:	370c      	adds	r7, #12
 80173ec:	46bd      	mov	sp, r7
 80173ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173f2:	4770      	bx	lr

080173f4 <_isatty>:

int _isatty(int file)
{
 80173f4:	b480      	push	{r7}
 80173f6:	b083      	sub	sp, #12
 80173f8:	af00      	add	r7, sp, #0
 80173fa:	6078      	str	r0, [r7, #4]
	return 1;
 80173fc:	2301      	movs	r3, #1
}
 80173fe:	4618      	mov	r0, r3
 8017400:	370c      	adds	r7, #12
 8017402:	46bd      	mov	sp, r7
 8017404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017408:	4770      	bx	lr

0801740a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 801740a:	b480      	push	{r7}
 801740c:	b085      	sub	sp, #20
 801740e:	af00      	add	r7, sp, #0
 8017410:	60f8      	str	r0, [r7, #12]
 8017412:	60b9      	str	r1, [r7, #8]
 8017414:	607a      	str	r2, [r7, #4]
	return 0;
 8017416:	2300      	movs	r3, #0
}
 8017418:	4618      	mov	r0, r3
 801741a:	3714      	adds	r7, #20
 801741c:	46bd      	mov	sp, r7
 801741e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017422:	4770      	bx	lr

08017424 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8017424:	b480      	push	{r7}
 8017426:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8017428:	4a06      	ldr	r2, [pc, #24]	; (8017444 <SystemInit+0x20>)
 801742a:	4b06      	ldr	r3, [pc, #24]	; (8017444 <SystemInit+0x20>)
 801742c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017430:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8017434:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8017438:	bf00      	nop
 801743a:	46bd      	mov	sp, r7
 801743c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017440:	4770      	bx	lr
 8017442:	bf00      	nop
 8017444:	e000ed00 	.word	0xe000ed00

08017448 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8017448:	f8df d034 	ldr.w	sp, [pc, #52]	; 8017480 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 801744c:	480d      	ldr	r0, [pc, #52]	; (8017484 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 801744e:	490e      	ldr	r1, [pc, #56]	; (8017488 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8017450:	4a0e      	ldr	r2, [pc, #56]	; (801748c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8017452:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8017454:	e002      	b.n	801745c <LoopCopyDataInit>

08017456 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8017456:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8017458:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 801745a:	3304      	adds	r3, #4

0801745c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 801745c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 801745e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8017460:	d3f9      	bcc.n	8017456 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8017462:	4a0b      	ldr	r2, [pc, #44]	; (8017490 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8017464:	4c0b      	ldr	r4, [pc, #44]	; (8017494 <LoopFillZerobss+0x26>)
  movs r3, #0
 8017466:	2300      	movs	r3, #0
  b LoopFillZerobss
 8017468:	e001      	b.n	801746e <LoopFillZerobss>

0801746a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 801746a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 801746c:	3204      	adds	r2, #4

0801746e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 801746e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8017470:	d3fb      	bcc.n	801746a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8017472:	f7ff ffd7 	bl	8017424 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8017476:	f000 f815 	bl	80174a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 801747a:	f7fe fdbd 	bl	8015ff8 <main>
  bx  lr    
 801747e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8017480:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8017484:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8017488:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 801748c:	0801bdac 	.word	0x0801bdac
  ldr r2, =_sbss
 8017490:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8017494:	20009b78 	.word	0x20009b78

08017498 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8017498:	e7fe      	b.n	8017498 <ADC_IRQHandler>

0801749a <atoi>:
 801749a:	220a      	movs	r2, #10
 801749c:	2100      	movs	r1, #0
 801749e:	f000 baa3 	b.w	80179e8 <strtol>
	...

080174a4 <__libc_init_array>:
 80174a4:	b570      	push	{r4, r5, r6, lr}
 80174a6:	4e0d      	ldr	r6, [pc, #52]	; (80174dc <__libc_init_array+0x38>)
 80174a8:	4c0d      	ldr	r4, [pc, #52]	; (80174e0 <__libc_init_array+0x3c>)
 80174aa:	1ba4      	subs	r4, r4, r6
 80174ac:	10a4      	asrs	r4, r4, #2
 80174ae:	2500      	movs	r5, #0
 80174b0:	42a5      	cmp	r5, r4
 80174b2:	d109      	bne.n	80174c8 <__libc_init_array+0x24>
 80174b4:	4e0b      	ldr	r6, [pc, #44]	; (80174e4 <__libc_init_array+0x40>)
 80174b6:	4c0c      	ldr	r4, [pc, #48]	; (80174e8 <__libc_init_array+0x44>)
 80174b8:	f001 fa5e 	bl	8018978 <_init>
 80174bc:	1ba4      	subs	r4, r4, r6
 80174be:	10a4      	asrs	r4, r4, #2
 80174c0:	2500      	movs	r5, #0
 80174c2:	42a5      	cmp	r5, r4
 80174c4:	d105      	bne.n	80174d2 <__libc_init_array+0x2e>
 80174c6:	bd70      	pop	{r4, r5, r6, pc}
 80174c8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80174cc:	4798      	blx	r3
 80174ce:	3501      	adds	r5, #1
 80174d0:	e7ee      	b.n	80174b0 <__libc_init_array+0xc>
 80174d2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80174d6:	4798      	blx	r3
 80174d8:	3501      	adds	r5, #1
 80174da:	e7f2      	b.n	80174c2 <__libc_init_array+0x1e>
 80174dc:	0801bda4 	.word	0x0801bda4
 80174e0:	0801bda4 	.word	0x0801bda4
 80174e4:	0801bda4 	.word	0x0801bda4
 80174e8:	0801bda8 	.word	0x0801bda8

080174ec <__locale_ctype_ptr_l>:
 80174ec:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80174f0:	4770      	bx	lr
	...

080174f4 <__locale_ctype_ptr>:
 80174f4:	4b04      	ldr	r3, [pc, #16]	; (8017508 <__locale_ctype_ptr+0x14>)
 80174f6:	4a05      	ldr	r2, [pc, #20]	; (801750c <__locale_ctype_ptr+0x18>)
 80174f8:	681b      	ldr	r3, [r3, #0]
 80174fa:	6a1b      	ldr	r3, [r3, #32]
 80174fc:	2b00      	cmp	r3, #0
 80174fe:	bf08      	it	eq
 8017500:	4613      	moveq	r3, r2
 8017502:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8017506:	4770      	bx	lr
 8017508:	20000188 	.word	0x20000188
 801750c:	2000001c 	.word	0x2000001c

08017510 <malloc>:
 8017510:	4b02      	ldr	r3, [pc, #8]	; (801751c <malloc+0xc>)
 8017512:	4601      	mov	r1, r0
 8017514:	6818      	ldr	r0, [r3, #0]
 8017516:	f000 b89f 	b.w	8017658 <_malloc_r>
 801751a:	bf00      	nop
 801751c:	20000188 	.word	0x20000188

08017520 <__ascii_mbtowc>:
 8017520:	b082      	sub	sp, #8
 8017522:	b901      	cbnz	r1, 8017526 <__ascii_mbtowc+0x6>
 8017524:	a901      	add	r1, sp, #4
 8017526:	b142      	cbz	r2, 801753a <__ascii_mbtowc+0x1a>
 8017528:	b14b      	cbz	r3, 801753e <__ascii_mbtowc+0x1e>
 801752a:	7813      	ldrb	r3, [r2, #0]
 801752c:	600b      	str	r3, [r1, #0]
 801752e:	7812      	ldrb	r2, [r2, #0]
 8017530:	1c10      	adds	r0, r2, #0
 8017532:	bf18      	it	ne
 8017534:	2001      	movne	r0, #1
 8017536:	b002      	add	sp, #8
 8017538:	4770      	bx	lr
 801753a:	4610      	mov	r0, r2
 801753c:	e7fb      	b.n	8017536 <__ascii_mbtowc+0x16>
 801753e:	f06f 0001 	mvn.w	r0, #1
 8017542:	e7f8      	b.n	8017536 <__ascii_mbtowc+0x16>

08017544 <memcmp>:
 8017544:	b510      	push	{r4, lr}
 8017546:	3901      	subs	r1, #1
 8017548:	4402      	add	r2, r0
 801754a:	4290      	cmp	r0, r2
 801754c:	d101      	bne.n	8017552 <memcmp+0xe>
 801754e:	2000      	movs	r0, #0
 8017550:	bd10      	pop	{r4, pc}
 8017552:	f810 3b01 	ldrb.w	r3, [r0], #1
 8017556:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801755a:	42a3      	cmp	r3, r4
 801755c:	d0f5      	beq.n	801754a <memcmp+0x6>
 801755e:	1b18      	subs	r0, r3, r4
 8017560:	bd10      	pop	{r4, pc}

08017562 <memcpy>:
 8017562:	b510      	push	{r4, lr}
 8017564:	1e43      	subs	r3, r0, #1
 8017566:	440a      	add	r2, r1
 8017568:	4291      	cmp	r1, r2
 801756a:	d100      	bne.n	801756e <memcpy+0xc>
 801756c:	bd10      	pop	{r4, pc}
 801756e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017572:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017576:	e7f7      	b.n	8017568 <memcpy+0x6>

08017578 <memmove>:
 8017578:	4288      	cmp	r0, r1
 801757a:	b510      	push	{r4, lr}
 801757c:	eb01 0302 	add.w	r3, r1, r2
 8017580:	d803      	bhi.n	801758a <memmove+0x12>
 8017582:	1e42      	subs	r2, r0, #1
 8017584:	4299      	cmp	r1, r3
 8017586:	d10c      	bne.n	80175a2 <memmove+0x2a>
 8017588:	bd10      	pop	{r4, pc}
 801758a:	4298      	cmp	r0, r3
 801758c:	d2f9      	bcs.n	8017582 <memmove+0xa>
 801758e:	1881      	adds	r1, r0, r2
 8017590:	1ad2      	subs	r2, r2, r3
 8017592:	42d3      	cmn	r3, r2
 8017594:	d100      	bne.n	8017598 <memmove+0x20>
 8017596:	bd10      	pop	{r4, pc}
 8017598:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801759c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80175a0:	e7f7      	b.n	8017592 <memmove+0x1a>
 80175a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80175a6:	f802 4f01 	strb.w	r4, [r2, #1]!
 80175aa:	e7eb      	b.n	8017584 <memmove+0xc>

080175ac <memset>:
 80175ac:	4402      	add	r2, r0
 80175ae:	4603      	mov	r3, r0
 80175b0:	4293      	cmp	r3, r2
 80175b2:	d100      	bne.n	80175b6 <memset+0xa>
 80175b4:	4770      	bx	lr
 80175b6:	f803 1b01 	strb.w	r1, [r3], #1
 80175ba:	e7f9      	b.n	80175b0 <memset+0x4>

080175bc <_free_r>:
 80175bc:	b538      	push	{r3, r4, r5, lr}
 80175be:	4605      	mov	r5, r0
 80175c0:	2900      	cmp	r1, #0
 80175c2:	d045      	beq.n	8017650 <_free_r+0x94>
 80175c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80175c8:	1f0c      	subs	r4, r1, #4
 80175ca:	2b00      	cmp	r3, #0
 80175cc:	bfb8      	it	lt
 80175ce:	18e4      	addlt	r4, r4, r3
 80175d0:	f000 fcce 	bl	8017f70 <__malloc_lock>
 80175d4:	4a1f      	ldr	r2, [pc, #124]	; (8017654 <_free_r+0x98>)
 80175d6:	6813      	ldr	r3, [r2, #0]
 80175d8:	4610      	mov	r0, r2
 80175da:	b933      	cbnz	r3, 80175ea <_free_r+0x2e>
 80175dc:	6063      	str	r3, [r4, #4]
 80175de:	6014      	str	r4, [r2, #0]
 80175e0:	4628      	mov	r0, r5
 80175e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80175e6:	f000 bcc4 	b.w	8017f72 <__malloc_unlock>
 80175ea:	42a3      	cmp	r3, r4
 80175ec:	d90c      	bls.n	8017608 <_free_r+0x4c>
 80175ee:	6821      	ldr	r1, [r4, #0]
 80175f0:	1862      	adds	r2, r4, r1
 80175f2:	4293      	cmp	r3, r2
 80175f4:	bf04      	itt	eq
 80175f6:	681a      	ldreq	r2, [r3, #0]
 80175f8:	685b      	ldreq	r3, [r3, #4]
 80175fa:	6063      	str	r3, [r4, #4]
 80175fc:	bf04      	itt	eq
 80175fe:	1852      	addeq	r2, r2, r1
 8017600:	6022      	streq	r2, [r4, #0]
 8017602:	6004      	str	r4, [r0, #0]
 8017604:	e7ec      	b.n	80175e0 <_free_r+0x24>
 8017606:	4613      	mov	r3, r2
 8017608:	685a      	ldr	r2, [r3, #4]
 801760a:	b10a      	cbz	r2, 8017610 <_free_r+0x54>
 801760c:	42a2      	cmp	r2, r4
 801760e:	d9fa      	bls.n	8017606 <_free_r+0x4a>
 8017610:	6819      	ldr	r1, [r3, #0]
 8017612:	1858      	adds	r0, r3, r1
 8017614:	42a0      	cmp	r0, r4
 8017616:	d10b      	bne.n	8017630 <_free_r+0x74>
 8017618:	6820      	ldr	r0, [r4, #0]
 801761a:	4401      	add	r1, r0
 801761c:	1858      	adds	r0, r3, r1
 801761e:	4282      	cmp	r2, r0
 8017620:	6019      	str	r1, [r3, #0]
 8017622:	d1dd      	bne.n	80175e0 <_free_r+0x24>
 8017624:	6810      	ldr	r0, [r2, #0]
 8017626:	6852      	ldr	r2, [r2, #4]
 8017628:	605a      	str	r2, [r3, #4]
 801762a:	4401      	add	r1, r0
 801762c:	6019      	str	r1, [r3, #0]
 801762e:	e7d7      	b.n	80175e0 <_free_r+0x24>
 8017630:	d902      	bls.n	8017638 <_free_r+0x7c>
 8017632:	230c      	movs	r3, #12
 8017634:	602b      	str	r3, [r5, #0]
 8017636:	e7d3      	b.n	80175e0 <_free_r+0x24>
 8017638:	6820      	ldr	r0, [r4, #0]
 801763a:	1821      	adds	r1, r4, r0
 801763c:	428a      	cmp	r2, r1
 801763e:	bf04      	itt	eq
 8017640:	6811      	ldreq	r1, [r2, #0]
 8017642:	6852      	ldreq	r2, [r2, #4]
 8017644:	6062      	str	r2, [r4, #4]
 8017646:	bf04      	itt	eq
 8017648:	1809      	addeq	r1, r1, r0
 801764a:	6021      	streq	r1, [r4, #0]
 801764c:	605c      	str	r4, [r3, #4]
 801764e:	e7c7      	b.n	80175e0 <_free_r+0x24>
 8017650:	bd38      	pop	{r3, r4, r5, pc}
 8017652:	bf00      	nop
 8017654:	20004804 	.word	0x20004804

08017658 <_malloc_r>:
 8017658:	b570      	push	{r4, r5, r6, lr}
 801765a:	1ccd      	adds	r5, r1, #3
 801765c:	f025 0503 	bic.w	r5, r5, #3
 8017660:	3508      	adds	r5, #8
 8017662:	2d0c      	cmp	r5, #12
 8017664:	bf38      	it	cc
 8017666:	250c      	movcc	r5, #12
 8017668:	2d00      	cmp	r5, #0
 801766a:	4606      	mov	r6, r0
 801766c:	db01      	blt.n	8017672 <_malloc_r+0x1a>
 801766e:	42a9      	cmp	r1, r5
 8017670:	d903      	bls.n	801767a <_malloc_r+0x22>
 8017672:	230c      	movs	r3, #12
 8017674:	6033      	str	r3, [r6, #0]
 8017676:	2000      	movs	r0, #0
 8017678:	bd70      	pop	{r4, r5, r6, pc}
 801767a:	f000 fc79 	bl	8017f70 <__malloc_lock>
 801767e:	4a23      	ldr	r2, [pc, #140]	; (801770c <_malloc_r+0xb4>)
 8017680:	6814      	ldr	r4, [r2, #0]
 8017682:	4621      	mov	r1, r4
 8017684:	b991      	cbnz	r1, 80176ac <_malloc_r+0x54>
 8017686:	4c22      	ldr	r4, [pc, #136]	; (8017710 <_malloc_r+0xb8>)
 8017688:	6823      	ldr	r3, [r4, #0]
 801768a:	b91b      	cbnz	r3, 8017694 <_malloc_r+0x3c>
 801768c:	4630      	mov	r0, r6
 801768e:	f000 f893 	bl	80177b8 <_sbrk_r>
 8017692:	6020      	str	r0, [r4, #0]
 8017694:	4629      	mov	r1, r5
 8017696:	4630      	mov	r0, r6
 8017698:	f000 f88e 	bl	80177b8 <_sbrk_r>
 801769c:	1c43      	adds	r3, r0, #1
 801769e:	d126      	bne.n	80176ee <_malloc_r+0x96>
 80176a0:	230c      	movs	r3, #12
 80176a2:	6033      	str	r3, [r6, #0]
 80176a4:	4630      	mov	r0, r6
 80176a6:	f000 fc64 	bl	8017f72 <__malloc_unlock>
 80176aa:	e7e4      	b.n	8017676 <_malloc_r+0x1e>
 80176ac:	680b      	ldr	r3, [r1, #0]
 80176ae:	1b5b      	subs	r3, r3, r5
 80176b0:	d41a      	bmi.n	80176e8 <_malloc_r+0x90>
 80176b2:	2b0b      	cmp	r3, #11
 80176b4:	d90f      	bls.n	80176d6 <_malloc_r+0x7e>
 80176b6:	600b      	str	r3, [r1, #0]
 80176b8:	50cd      	str	r5, [r1, r3]
 80176ba:	18cc      	adds	r4, r1, r3
 80176bc:	4630      	mov	r0, r6
 80176be:	f000 fc58 	bl	8017f72 <__malloc_unlock>
 80176c2:	f104 000b 	add.w	r0, r4, #11
 80176c6:	1d23      	adds	r3, r4, #4
 80176c8:	f020 0007 	bic.w	r0, r0, #7
 80176cc:	1ac3      	subs	r3, r0, r3
 80176ce:	d01b      	beq.n	8017708 <_malloc_r+0xb0>
 80176d0:	425a      	negs	r2, r3
 80176d2:	50e2      	str	r2, [r4, r3]
 80176d4:	bd70      	pop	{r4, r5, r6, pc}
 80176d6:	428c      	cmp	r4, r1
 80176d8:	bf0d      	iteet	eq
 80176da:	6863      	ldreq	r3, [r4, #4]
 80176dc:	684b      	ldrne	r3, [r1, #4]
 80176de:	6063      	strne	r3, [r4, #4]
 80176e0:	6013      	streq	r3, [r2, #0]
 80176e2:	bf18      	it	ne
 80176e4:	460c      	movne	r4, r1
 80176e6:	e7e9      	b.n	80176bc <_malloc_r+0x64>
 80176e8:	460c      	mov	r4, r1
 80176ea:	6849      	ldr	r1, [r1, #4]
 80176ec:	e7ca      	b.n	8017684 <_malloc_r+0x2c>
 80176ee:	1cc4      	adds	r4, r0, #3
 80176f0:	f024 0403 	bic.w	r4, r4, #3
 80176f4:	42a0      	cmp	r0, r4
 80176f6:	d005      	beq.n	8017704 <_malloc_r+0xac>
 80176f8:	1a21      	subs	r1, r4, r0
 80176fa:	4630      	mov	r0, r6
 80176fc:	f000 f85c 	bl	80177b8 <_sbrk_r>
 8017700:	3001      	adds	r0, #1
 8017702:	d0cd      	beq.n	80176a0 <_malloc_r+0x48>
 8017704:	6025      	str	r5, [r4, #0]
 8017706:	e7d9      	b.n	80176bc <_malloc_r+0x64>
 8017708:	bd70      	pop	{r4, r5, r6, pc}
 801770a:	bf00      	nop
 801770c:	20004804 	.word	0x20004804
 8017710:	20004808 	.word	0x20004808

08017714 <iprintf>:
 8017714:	b40f      	push	{r0, r1, r2, r3}
 8017716:	4b0a      	ldr	r3, [pc, #40]	; (8017740 <iprintf+0x2c>)
 8017718:	b513      	push	{r0, r1, r4, lr}
 801771a:	681c      	ldr	r4, [r3, #0]
 801771c:	b124      	cbz	r4, 8017728 <iprintf+0x14>
 801771e:	69a3      	ldr	r3, [r4, #24]
 8017720:	b913      	cbnz	r3, 8017728 <iprintf+0x14>
 8017722:	4620      	mov	r0, r4
 8017724:	f000 fb36 	bl	8017d94 <__sinit>
 8017728:	ab05      	add	r3, sp, #20
 801772a:	9a04      	ldr	r2, [sp, #16]
 801772c:	68a1      	ldr	r1, [r4, #8]
 801772e:	9301      	str	r3, [sp, #4]
 8017730:	4620      	mov	r0, r4
 8017732:	f000 fdbf 	bl	80182b4 <_vfiprintf_r>
 8017736:	b002      	add	sp, #8
 8017738:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801773c:	b004      	add	sp, #16
 801773e:	4770      	bx	lr
 8017740:	20000188 	.word	0x20000188

08017744 <rand>:
 8017744:	4b19      	ldr	r3, [pc, #100]	; (80177ac <rand+0x68>)
 8017746:	b510      	push	{r4, lr}
 8017748:	681c      	ldr	r4, [r3, #0]
 801774a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801774c:	b9d3      	cbnz	r3, 8017784 <rand+0x40>
 801774e:	2018      	movs	r0, #24
 8017750:	f7ff fede 	bl	8017510 <malloc>
 8017754:	f243 330e 	movw	r3, #13070	; 0x330e
 8017758:	63a0      	str	r0, [r4, #56]	; 0x38
 801775a:	8003      	strh	r3, [r0, #0]
 801775c:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 8017760:	8043      	strh	r3, [r0, #2]
 8017762:	f241 2334 	movw	r3, #4660	; 0x1234
 8017766:	8083      	strh	r3, [r0, #4]
 8017768:	f24e 636d 	movw	r3, #58989	; 0xe66d
 801776c:	80c3      	strh	r3, [r0, #6]
 801776e:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 8017772:	8103      	strh	r3, [r0, #8]
 8017774:	2305      	movs	r3, #5
 8017776:	8143      	strh	r3, [r0, #10]
 8017778:	230b      	movs	r3, #11
 801777a:	8183      	strh	r3, [r0, #12]
 801777c:	2201      	movs	r2, #1
 801777e:	2300      	movs	r3, #0
 8017780:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8017784:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8017786:	480a      	ldr	r0, [pc, #40]	; (80177b0 <rand+0x6c>)
 8017788:	690a      	ldr	r2, [r1, #16]
 801778a:	694b      	ldr	r3, [r1, #20]
 801778c:	4c09      	ldr	r4, [pc, #36]	; (80177b4 <rand+0x70>)
 801778e:	4350      	muls	r0, r2
 8017790:	fb04 0003 	mla	r0, r4, r3, r0
 8017794:	fba2 2304 	umull	r2, r3, r2, r4
 8017798:	3201      	adds	r2, #1
 801779a:	4403      	add	r3, r0
 801779c:	f143 0300 	adc.w	r3, r3, #0
 80177a0:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80177a4:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 80177a8:	bd10      	pop	{r4, pc}
 80177aa:	bf00      	nop
 80177ac:	20000188 	.word	0x20000188
 80177b0:	5851f42d 	.word	0x5851f42d
 80177b4:	4c957f2d 	.word	0x4c957f2d

080177b8 <_sbrk_r>:
 80177b8:	b538      	push	{r3, r4, r5, lr}
 80177ba:	4c06      	ldr	r4, [pc, #24]	; (80177d4 <_sbrk_r+0x1c>)
 80177bc:	2300      	movs	r3, #0
 80177be:	4605      	mov	r5, r0
 80177c0:	4608      	mov	r0, r1
 80177c2:	6023      	str	r3, [r4, #0]
 80177c4:	f7ff fdcc 	bl	8017360 <_sbrk>
 80177c8:	1c43      	adds	r3, r0, #1
 80177ca:	d102      	bne.n	80177d2 <_sbrk_r+0x1a>
 80177cc:	6823      	ldr	r3, [r4, #0]
 80177ce:	b103      	cbz	r3, 80177d2 <_sbrk_r+0x1a>
 80177d0:	602b      	str	r3, [r5, #0]
 80177d2:	bd38      	pop	{r3, r4, r5, pc}
 80177d4:	20009640 	.word	0x20009640

080177d8 <sniprintf>:
 80177d8:	b40c      	push	{r2, r3}
 80177da:	b530      	push	{r4, r5, lr}
 80177dc:	4b17      	ldr	r3, [pc, #92]	; (801783c <sniprintf+0x64>)
 80177de:	1e0c      	subs	r4, r1, #0
 80177e0:	b09d      	sub	sp, #116	; 0x74
 80177e2:	681d      	ldr	r5, [r3, #0]
 80177e4:	da08      	bge.n	80177f8 <sniprintf+0x20>
 80177e6:	238b      	movs	r3, #139	; 0x8b
 80177e8:	602b      	str	r3, [r5, #0]
 80177ea:	f04f 30ff 	mov.w	r0, #4294967295
 80177ee:	b01d      	add	sp, #116	; 0x74
 80177f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80177f4:	b002      	add	sp, #8
 80177f6:	4770      	bx	lr
 80177f8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80177fc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8017800:	bf14      	ite	ne
 8017802:	f104 33ff 	addne.w	r3, r4, #4294967295
 8017806:	4623      	moveq	r3, r4
 8017808:	9304      	str	r3, [sp, #16]
 801780a:	9307      	str	r3, [sp, #28]
 801780c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017810:	9002      	str	r0, [sp, #8]
 8017812:	9006      	str	r0, [sp, #24]
 8017814:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017818:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801781a:	ab21      	add	r3, sp, #132	; 0x84
 801781c:	a902      	add	r1, sp, #8
 801781e:	4628      	mov	r0, r5
 8017820:	9301      	str	r3, [sp, #4]
 8017822:	f000 fc29 	bl	8018078 <_svfiprintf_r>
 8017826:	1c43      	adds	r3, r0, #1
 8017828:	bfbc      	itt	lt
 801782a:	238b      	movlt	r3, #139	; 0x8b
 801782c:	602b      	strlt	r3, [r5, #0]
 801782e:	2c00      	cmp	r4, #0
 8017830:	d0dd      	beq.n	80177ee <sniprintf+0x16>
 8017832:	9b02      	ldr	r3, [sp, #8]
 8017834:	2200      	movs	r2, #0
 8017836:	701a      	strb	r2, [r3, #0]
 8017838:	e7d9      	b.n	80177ee <sniprintf+0x16>
 801783a:	bf00      	nop
 801783c:	20000188 	.word	0x20000188

08017840 <siprintf>:
 8017840:	b40e      	push	{r1, r2, r3}
 8017842:	b500      	push	{lr}
 8017844:	b09c      	sub	sp, #112	; 0x70
 8017846:	f44f 7102 	mov.w	r1, #520	; 0x208
 801784a:	ab1d      	add	r3, sp, #116	; 0x74
 801784c:	f8ad 1014 	strh.w	r1, [sp, #20]
 8017850:	9002      	str	r0, [sp, #8]
 8017852:	9006      	str	r0, [sp, #24]
 8017854:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017858:	480a      	ldr	r0, [pc, #40]	; (8017884 <siprintf+0x44>)
 801785a:	9104      	str	r1, [sp, #16]
 801785c:	9107      	str	r1, [sp, #28]
 801785e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8017862:	f853 2b04 	ldr.w	r2, [r3], #4
 8017866:	f8ad 1016 	strh.w	r1, [sp, #22]
 801786a:	6800      	ldr	r0, [r0, #0]
 801786c:	9301      	str	r3, [sp, #4]
 801786e:	a902      	add	r1, sp, #8
 8017870:	f000 fc02 	bl	8018078 <_svfiprintf_r>
 8017874:	9b02      	ldr	r3, [sp, #8]
 8017876:	2200      	movs	r2, #0
 8017878:	701a      	strb	r2, [r3, #0]
 801787a:	b01c      	add	sp, #112	; 0x70
 801787c:	f85d eb04 	ldr.w	lr, [sp], #4
 8017880:	b003      	add	sp, #12
 8017882:	4770      	bx	lr
 8017884:	20000188 	.word	0x20000188

08017888 <strncpy>:
 8017888:	b570      	push	{r4, r5, r6, lr}
 801788a:	4604      	mov	r4, r0
 801788c:	b902      	cbnz	r2, 8017890 <strncpy+0x8>
 801788e:	bd70      	pop	{r4, r5, r6, pc}
 8017890:	4623      	mov	r3, r4
 8017892:	f811 5b01 	ldrb.w	r5, [r1], #1
 8017896:	f803 5b01 	strb.w	r5, [r3], #1
 801789a:	1e56      	subs	r6, r2, #1
 801789c:	b91d      	cbnz	r5, 80178a6 <strncpy+0x1e>
 801789e:	4414      	add	r4, r2
 80178a0:	42a3      	cmp	r3, r4
 80178a2:	d103      	bne.n	80178ac <strncpy+0x24>
 80178a4:	bd70      	pop	{r4, r5, r6, pc}
 80178a6:	461c      	mov	r4, r3
 80178a8:	4632      	mov	r2, r6
 80178aa:	e7ef      	b.n	801788c <strncpy+0x4>
 80178ac:	f803 5b01 	strb.w	r5, [r3], #1
 80178b0:	e7f6      	b.n	80178a0 <strncpy+0x18>

080178b2 <strstr>:
 80178b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80178b4:	7803      	ldrb	r3, [r0, #0]
 80178b6:	b133      	cbz	r3, 80178c6 <strstr+0x14>
 80178b8:	4603      	mov	r3, r0
 80178ba:	4618      	mov	r0, r3
 80178bc:	1c5e      	adds	r6, r3, #1
 80178be:	781b      	ldrb	r3, [r3, #0]
 80178c0:	b933      	cbnz	r3, 80178d0 <strstr+0x1e>
 80178c2:	4618      	mov	r0, r3
 80178c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80178c6:	780b      	ldrb	r3, [r1, #0]
 80178c8:	2b00      	cmp	r3, #0
 80178ca:	bf18      	it	ne
 80178cc:	2000      	movne	r0, #0
 80178ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80178d0:	1e4d      	subs	r5, r1, #1
 80178d2:	1e44      	subs	r4, r0, #1
 80178d4:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 80178d8:	2a00      	cmp	r2, #0
 80178da:	d0f3      	beq.n	80178c4 <strstr+0x12>
 80178dc:	f814 7f01 	ldrb.w	r7, [r4, #1]!
 80178e0:	4297      	cmp	r7, r2
 80178e2:	4633      	mov	r3, r6
 80178e4:	d0f6      	beq.n	80178d4 <strstr+0x22>
 80178e6:	e7e8      	b.n	80178ba <strstr+0x8>

080178e8 <_strtol_l.isra.0>:
 80178e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80178ec:	4680      	mov	r8, r0
 80178ee:	4689      	mov	r9, r1
 80178f0:	4692      	mov	sl, r2
 80178f2:	461f      	mov	r7, r3
 80178f4:	468b      	mov	fp, r1
 80178f6:	465d      	mov	r5, fp
 80178f8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80178fa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80178fe:	f7ff fdf5 	bl	80174ec <__locale_ctype_ptr_l>
 8017902:	4420      	add	r0, r4
 8017904:	7846      	ldrb	r6, [r0, #1]
 8017906:	f016 0608 	ands.w	r6, r6, #8
 801790a:	d10b      	bne.n	8017924 <_strtol_l.isra.0+0x3c>
 801790c:	2c2d      	cmp	r4, #45	; 0x2d
 801790e:	d10b      	bne.n	8017928 <_strtol_l.isra.0+0x40>
 8017910:	782c      	ldrb	r4, [r5, #0]
 8017912:	2601      	movs	r6, #1
 8017914:	f10b 0502 	add.w	r5, fp, #2
 8017918:	b167      	cbz	r7, 8017934 <_strtol_l.isra.0+0x4c>
 801791a:	2f10      	cmp	r7, #16
 801791c:	d114      	bne.n	8017948 <_strtol_l.isra.0+0x60>
 801791e:	2c30      	cmp	r4, #48	; 0x30
 8017920:	d00a      	beq.n	8017938 <_strtol_l.isra.0+0x50>
 8017922:	e011      	b.n	8017948 <_strtol_l.isra.0+0x60>
 8017924:	46ab      	mov	fp, r5
 8017926:	e7e6      	b.n	80178f6 <_strtol_l.isra.0+0xe>
 8017928:	2c2b      	cmp	r4, #43	; 0x2b
 801792a:	bf04      	itt	eq
 801792c:	782c      	ldrbeq	r4, [r5, #0]
 801792e:	f10b 0502 	addeq.w	r5, fp, #2
 8017932:	e7f1      	b.n	8017918 <_strtol_l.isra.0+0x30>
 8017934:	2c30      	cmp	r4, #48	; 0x30
 8017936:	d127      	bne.n	8017988 <_strtol_l.isra.0+0xa0>
 8017938:	782b      	ldrb	r3, [r5, #0]
 801793a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801793e:	2b58      	cmp	r3, #88	; 0x58
 8017940:	d14b      	bne.n	80179da <_strtol_l.isra.0+0xf2>
 8017942:	786c      	ldrb	r4, [r5, #1]
 8017944:	2710      	movs	r7, #16
 8017946:	3502      	adds	r5, #2
 8017948:	2e00      	cmp	r6, #0
 801794a:	bf0c      	ite	eq
 801794c:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8017950:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8017954:	2200      	movs	r2, #0
 8017956:	fbb1 fef7 	udiv	lr, r1, r7
 801795a:	4610      	mov	r0, r2
 801795c:	fb07 1c1e 	mls	ip, r7, lr, r1
 8017960:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8017964:	2b09      	cmp	r3, #9
 8017966:	d811      	bhi.n	801798c <_strtol_l.isra.0+0xa4>
 8017968:	461c      	mov	r4, r3
 801796a:	42a7      	cmp	r7, r4
 801796c:	dd1d      	ble.n	80179aa <_strtol_l.isra.0+0xc2>
 801796e:	1c53      	adds	r3, r2, #1
 8017970:	d007      	beq.n	8017982 <_strtol_l.isra.0+0x9a>
 8017972:	4586      	cmp	lr, r0
 8017974:	d316      	bcc.n	80179a4 <_strtol_l.isra.0+0xbc>
 8017976:	d101      	bne.n	801797c <_strtol_l.isra.0+0x94>
 8017978:	45a4      	cmp	ip, r4
 801797a:	db13      	blt.n	80179a4 <_strtol_l.isra.0+0xbc>
 801797c:	fb00 4007 	mla	r0, r0, r7, r4
 8017980:	2201      	movs	r2, #1
 8017982:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017986:	e7eb      	b.n	8017960 <_strtol_l.isra.0+0x78>
 8017988:	270a      	movs	r7, #10
 801798a:	e7dd      	b.n	8017948 <_strtol_l.isra.0+0x60>
 801798c:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8017990:	2b19      	cmp	r3, #25
 8017992:	d801      	bhi.n	8017998 <_strtol_l.isra.0+0xb0>
 8017994:	3c37      	subs	r4, #55	; 0x37
 8017996:	e7e8      	b.n	801796a <_strtol_l.isra.0+0x82>
 8017998:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 801799c:	2b19      	cmp	r3, #25
 801799e:	d804      	bhi.n	80179aa <_strtol_l.isra.0+0xc2>
 80179a0:	3c57      	subs	r4, #87	; 0x57
 80179a2:	e7e2      	b.n	801796a <_strtol_l.isra.0+0x82>
 80179a4:	f04f 32ff 	mov.w	r2, #4294967295
 80179a8:	e7eb      	b.n	8017982 <_strtol_l.isra.0+0x9a>
 80179aa:	1c53      	adds	r3, r2, #1
 80179ac:	d108      	bne.n	80179c0 <_strtol_l.isra.0+0xd8>
 80179ae:	2322      	movs	r3, #34	; 0x22
 80179b0:	f8c8 3000 	str.w	r3, [r8]
 80179b4:	4608      	mov	r0, r1
 80179b6:	f1ba 0f00 	cmp.w	sl, #0
 80179ba:	d107      	bne.n	80179cc <_strtol_l.isra.0+0xe4>
 80179bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80179c0:	b106      	cbz	r6, 80179c4 <_strtol_l.isra.0+0xdc>
 80179c2:	4240      	negs	r0, r0
 80179c4:	f1ba 0f00 	cmp.w	sl, #0
 80179c8:	d00c      	beq.n	80179e4 <_strtol_l.isra.0+0xfc>
 80179ca:	b122      	cbz	r2, 80179d6 <_strtol_l.isra.0+0xee>
 80179cc:	3d01      	subs	r5, #1
 80179ce:	f8ca 5000 	str.w	r5, [sl]
 80179d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80179d6:	464d      	mov	r5, r9
 80179d8:	e7f9      	b.n	80179ce <_strtol_l.isra.0+0xe6>
 80179da:	2430      	movs	r4, #48	; 0x30
 80179dc:	2f00      	cmp	r7, #0
 80179de:	d1b3      	bne.n	8017948 <_strtol_l.isra.0+0x60>
 80179e0:	2708      	movs	r7, #8
 80179e2:	e7b1      	b.n	8017948 <_strtol_l.isra.0+0x60>
 80179e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080179e8 <strtol>:
 80179e8:	4b08      	ldr	r3, [pc, #32]	; (8017a0c <strtol+0x24>)
 80179ea:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80179ec:	681c      	ldr	r4, [r3, #0]
 80179ee:	4d08      	ldr	r5, [pc, #32]	; (8017a10 <strtol+0x28>)
 80179f0:	6a23      	ldr	r3, [r4, #32]
 80179f2:	2b00      	cmp	r3, #0
 80179f4:	bf08      	it	eq
 80179f6:	462b      	moveq	r3, r5
 80179f8:	9300      	str	r3, [sp, #0]
 80179fa:	4613      	mov	r3, r2
 80179fc:	460a      	mov	r2, r1
 80179fe:	4601      	mov	r1, r0
 8017a00:	4620      	mov	r0, r4
 8017a02:	f7ff ff71 	bl	80178e8 <_strtol_l.isra.0>
 8017a06:	b003      	add	sp, #12
 8017a08:	bd30      	pop	{r4, r5, pc}
 8017a0a:	bf00      	nop
 8017a0c:	20000188 	.word	0x20000188
 8017a10:	2000001c 	.word	0x2000001c

08017a14 <__swbuf_r>:
 8017a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017a16:	460e      	mov	r6, r1
 8017a18:	4614      	mov	r4, r2
 8017a1a:	4605      	mov	r5, r0
 8017a1c:	b118      	cbz	r0, 8017a26 <__swbuf_r+0x12>
 8017a1e:	6983      	ldr	r3, [r0, #24]
 8017a20:	b90b      	cbnz	r3, 8017a26 <__swbuf_r+0x12>
 8017a22:	f000 f9b7 	bl	8017d94 <__sinit>
 8017a26:	4b21      	ldr	r3, [pc, #132]	; (8017aac <__swbuf_r+0x98>)
 8017a28:	429c      	cmp	r4, r3
 8017a2a:	d12a      	bne.n	8017a82 <__swbuf_r+0x6e>
 8017a2c:	686c      	ldr	r4, [r5, #4]
 8017a2e:	69a3      	ldr	r3, [r4, #24]
 8017a30:	60a3      	str	r3, [r4, #8]
 8017a32:	89a3      	ldrh	r3, [r4, #12]
 8017a34:	071a      	lsls	r2, r3, #28
 8017a36:	d52e      	bpl.n	8017a96 <__swbuf_r+0x82>
 8017a38:	6923      	ldr	r3, [r4, #16]
 8017a3a:	b363      	cbz	r3, 8017a96 <__swbuf_r+0x82>
 8017a3c:	6923      	ldr	r3, [r4, #16]
 8017a3e:	6820      	ldr	r0, [r4, #0]
 8017a40:	1ac0      	subs	r0, r0, r3
 8017a42:	6963      	ldr	r3, [r4, #20]
 8017a44:	b2f6      	uxtb	r6, r6
 8017a46:	4298      	cmp	r0, r3
 8017a48:	4637      	mov	r7, r6
 8017a4a:	db04      	blt.n	8017a56 <__swbuf_r+0x42>
 8017a4c:	4621      	mov	r1, r4
 8017a4e:	4628      	mov	r0, r5
 8017a50:	f000 f936 	bl	8017cc0 <_fflush_r>
 8017a54:	bb28      	cbnz	r0, 8017aa2 <__swbuf_r+0x8e>
 8017a56:	68a3      	ldr	r3, [r4, #8]
 8017a58:	3b01      	subs	r3, #1
 8017a5a:	60a3      	str	r3, [r4, #8]
 8017a5c:	6823      	ldr	r3, [r4, #0]
 8017a5e:	1c5a      	adds	r2, r3, #1
 8017a60:	6022      	str	r2, [r4, #0]
 8017a62:	701e      	strb	r6, [r3, #0]
 8017a64:	6963      	ldr	r3, [r4, #20]
 8017a66:	3001      	adds	r0, #1
 8017a68:	4298      	cmp	r0, r3
 8017a6a:	d004      	beq.n	8017a76 <__swbuf_r+0x62>
 8017a6c:	89a3      	ldrh	r3, [r4, #12]
 8017a6e:	07db      	lsls	r3, r3, #31
 8017a70:	d519      	bpl.n	8017aa6 <__swbuf_r+0x92>
 8017a72:	2e0a      	cmp	r6, #10
 8017a74:	d117      	bne.n	8017aa6 <__swbuf_r+0x92>
 8017a76:	4621      	mov	r1, r4
 8017a78:	4628      	mov	r0, r5
 8017a7a:	f000 f921 	bl	8017cc0 <_fflush_r>
 8017a7e:	b190      	cbz	r0, 8017aa6 <__swbuf_r+0x92>
 8017a80:	e00f      	b.n	8017aa2 <__swbuf_r+0x8e>
 8017a82:	4b0b      	ldr	r3, [pc, #44]	; (8017ab0 <__swbuf_r+0x9c>)
 8017a84:	429c      	cmp	r4, r3
 8017a86:	d101      	bne.n	8017a8c <__swbuf_r+0x78>
 8017a88:	68ac      	ldr	r4, [r5, #8]
 8017a8a:	e7d0      	b.n	8017a2e <__swbuf_r+0x1a>
 8017a8c:	4b09      	ldr	r3, [pc, #36]	; (8017ab4 <__swbuf_r+0xa0>)
 8017a8e:	429c      	cmp	r4, r3
 8017a90:	bf08      	it	eq
 8017a92:	68ec      	ldreq	r4, [r5, #12]
 8017a94:	e7cb      	b.n	8017a2e <__swbuf_r+0x1a>
 8017a96:	4621      	mov	r1, r4
 8017a98:	4628      	mov	r0, r5
 8017a9a:	f000 f81b 	bl	8017ad4 <__swsetup_r>
 8017a9e:	2800      	cmp	r0, #0
 8017aa0:	d0cc      	beq.n	8017a3c <__swbuf_r+0x28>
 8017aa2:	f04f 37ff 	mov.w	r7, #4294967295
 8017aa6:	4638      	mov	r0, r7
 8017aa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017aaa:	bf00      	nop
 8017aac:	0801bd24 	.word	0x0801bd24
 8017ab0:	0801bd44 	.word	0x0801bd44
 8017ab4:	0801bd04 	.word	0x0801bd04

08017ab8 <__ascii_wctomb>:
 8017ab8:	b149      	cbz	r1, 8017ace <__ascii_wctomb+0x16>
 8017aba:	2aff      	cmp	r2, #255	; 0xff
 8017abc:	bf85      	ittet	hi
 8017abe:	238a      	movhi	r3, #138	; 0x8a
 8017ac0:	6003      	strhi	r3, [r0, #0]
 8017ac2:	700a      	strbls	r2, [r1, #0]
 8017ac4:	f04f 30ff 	movhi.w	r0, #4294967295
 8017ac8:	bf98      	it	ls
 8017aca:	2001      	movls	r0, #1
 8017acc:	4770      	bx	lr
 8017ace:	4608      	mov	r0, r1
 8017ad0:	4770      	bx	lr
	...

08017ad4 <__swsetup_r>:
 8017ad4:	4b32      	ldr	r3, [pc, #200]	; (8017ba0 <__swsetup_r+0xcc>)
 8017ad6:	b570      	push	{r4, r5, r6, lr}
 8017ad8:	681d      	ldr	r5, [r3, #0]
 8017ada:	4606      	mov	r6, r0
 8017adc:	460c      	mov	r4, r1
 8017ade:	b125      	cbz	r5, 8017aea <__swsetup_r+0x16>
 8017ae0:	69ab      	ldr	r3, [r5, #24]
 8017ae2:	b913      	cbnz	r3, 8017aea <__swsetup_r+0x16>
 8017ae4:	4628      	mov	r0, r5
 8017ae6:	f000 f955 	bl	8017d94 <__sinit>
 8017aea:	4b2e      	ldr	r3, [pc, #184]	; (8017ba4 <__swsetup_r+0xd0>)
 8017aec:	429c      	cmp	r4, r3
 8017aee:	d10f      	bne.n	8017b10 <__swsetup_r+0x3c>
 8017af0:	686c      	ldr	r4, [r5, #4]
 8017af2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017af6:	b29a      	uxth	r2, r3
 8017af8:	0715      	lsls	r5, r2, #28
 8017afa:	d42c      	bmi.n	8017b56 <__swsetup_r+0x82>
 8017afc:	06d0      	lsls	r0, r2, #27
 8017afe:	d411      	bmi.n	8017b24 <__swsetup_r+0x50>
 8017b00:	2209      	movs	r2, #9
 8017b02:	6032      	str	r2, [r6, #0]
 8017b04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017b08:	81a3      	strh	r3, [r4, #12]
 8017b0a:	f04f 30ff 	mov.w	r0, #4294967295
 8017b0e:	bd70      	pop	{r4, r5, r6, pc}
 8017b10:	4b25      	ldr	r3, [pc, #148]	; (8017ba8 <__swsetup_r+0xd4>)
 8017b12:	429c      	cmp	r4, r3
 8017b14:	d101      	bne.n	8017b1a <__swsetup_r+0x46>
 8017b16:	68ac      	ldr	r4, [r5, #8]
 8017b18:	e7eb      	b.n	8017af2 <__swsetup_r+0x1e>
 8017b1a:	4b24      	ldr	r3, [pc, #144]	; (8017bac <__swsetup_r+0xd8>)
 8017b1c:	429c      	cmp	r4, r3
 8017b1e:	bf08      	it	eq
 8017b20:	68ec      	ldreq	r4, [r5, #12]
 8017b22:	e7e6      	b.n	8017af2 <__swsetup_r+0x1e>
 8017b24:	0751      	lsls	r1, r2, #29
 8017b26:	d512      	bpl.n	8017b4e <__swsetup_r+0x7a>
 8017b28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017b2a:	b141      	cbz	r1, 8017b3e <__swsetup_r+0x6a>
 8017b2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017b30:	4299      	cmp	r1, r3
 8017b32:	d002      	beq.n	8017b3a <__swsetup_r+0x66>
 8017b34:	4630      	mov	r0, r6
 8017b36:	f7ff fd41 	bl	80175bc <_free_r>
 8017b3a:	2300      	movs	r3, #0
 8017b3c:	6363      	str	r3, [r4, #52]	; 0x34
 8017b3e:	89a3      	ldrh	r3, [r4, #12]
 8017b40:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8017b44:	81a3      	strh	r3, [r4, #12]
 8017b46:	2300      	movs	r3, #0
 8017b48:	6063      	str	r3, [r4, #4]
 8017b4a:	6923      	ldr	r3, [r4, #16]
 8017b4c:	6023      	str	r3, [r4, #0]
 8017b4e:	89a3      	ldrh	r3, [r4, #12]
 8017b50:	f043 0308 	orr.w	r3, r3, #8
 8017b54:	81a3      	strh	r3, [r4, #12]
 8017b56:	6923      	ldr	r3, [r4, #16]
 8017b58:	b94b      	cbnz	r3, 8017b6e <__swsetup_r+0x9a>
 8017b5a:	89a3      	ldrh	r3, [r4, #12]
 8017b5c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8017b60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017b64:	d003      	beq.n	8017b6e <__swsetup_r+0x9a>
 8017b66:	4621      	mov	r1, r4
 8017b68:	4630      	mov	r0, r6
 8017b6a:	f000 f9c1 	bl	8017ef0 <__smakebuf_r>
 8017b6e:	89a2      	ldrh	r2, [r4, #12]
 8017b70:	f012 0301 	ands.w	r3, r2, #1
 8017b74:	d00c      	beq.n	8017b90 <__swsetup_r+0xbc>
 8017b76:	2300      	movs	r3, #0
 8017b78:	60a3      	str	r3, [r4, #8]
 8017b7a:	6963      	ldr	r3, [r4, #20]
 8017b7c:	425b      	negs	r3, r3
 8017b7e:	61a3      	str	r3, [r4, #24]
 8017b80:	6923      	ldr	r3, [r4, #16]
 8017b82:	b953      	cbnz	r3, 8017b9a <__swsetup_r+0xc6>
 8017b84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017b88:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8017b8c:	d1ba      	bne.n	8017b04 <__swsetup_r+0x30>
 8017b8e:	bd70      	pop	{r4, r5, r6, pc}
 8017b90:	0792      	lsls	r2, r2, #30
 8017b92:	bf58      	it	pl
 8017b94:	6963      	ldrpl	r3, [r4, #20]
 8017b96:	60a3      	str	r3, [r4, #8]
 8017b98:	e7f2      	b.n	8017b80 <__swsetup_r+0xac>
 8017b9a:	2000      	movs	r0, #0
 8017b9c:	e7f7      	b.n	8017b8e <__swsetup_r+0xba>
 8017b9e:	bf00      	nop
 8017ba0:	20000188 	.word	0x20000188
 8017ba4:	0801bd24 	.word	0x0801bd24
 8017ba8:	0801bd44 	.word	0x0801bd44
 8017bac:	0801bd04 	.word	0x0801bd04

08017bb0 <__sflush_r>:
 8017bb0:	898a      	ldrh	r2, [r1, #12]
 8017bb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017bb6:	4605      	mov	r5, r0
 8017bb8:	0710      	lsls	r0, r2, #28
 8017bba:	460c      	mov	r4, r1
 8017bbc:	d45a      	bmi.n	8017c74 <__sflush_r+0xc4>
 8017bbe:	684b      	ldr	r3, [r1, #4]
 8017bc0:	2b00      	cmp	r3, #0
 8017bc2:	dc05      	bgt.n	8017bd0 <__sflush_r+0x20>
 8017bc4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8017bc6:	2b00      	cmp	r3, #0
 8017bc8:	dc02      	bgt.n	8017bd0 <__sflush_r+0x20>
 8017bca:	2000      	movs	r0, #0
 8017bcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017bd0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017bd2:	2e00      	cmp	r6, #0
 8017bd4:	d0f9      	beq.n	8017bca <__sflush_r+0x1a>
 8017bd6:	2300      	movs	r3, #0
 8017bd8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8017bdc:	682f      	ldr	r7, [r5, #0]
 8017bde:	602b      	str	r3, [r5, #0]
 8017be0:	d033      	beq.n	8017c4a <__sflush_r+0x9a>
 8017be2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8017be4:	89a3      	ldrh	r3, [r4, #12]
 8017be6:	075a      	lsls	r2, r3, #29
 8017be8:	d505      	bpl.n	8017bf6 <__sflush_r+0x46>
 8017bea:	6863      	ldr	r3, [r4, #4]
 8017bec:	1ac0      	subs	r0, r0, r3
 8017bee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017bf0:	b10b      	cbz	r3, 8017bf6 <__sflush_r+0x46>
 8017bf2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017bf4:	1ac0      	subs	r0, r0, r3
 8017bf6:	2300      	movs	r3, #0
 8017bf8:	4602      	mov	r2, r0
 8017bfa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017bfc:	6a21      	ldr	r1, [r4, #32]
 8017bfe:	4628      	mov	r0, r5
 8017c00:	47b0      	blx	r6
 8017c02:	1c43      	adds	r3, r0, #1
 8017c04:	89a3      	ldrh	r3, [r4, #12]
 8017c06:	d106      	bne.n	8017c16 <__sflush_r+0x66>
 8017c08:	6829      	ldr	r1, [r5, #0]
 8017c0a:	291d      	cmp	r1, #29
 8017c0c:	d84b      	bhi.n	8017ca6 <__sflush_r+0xf6>
 8017c0e:	4a2b      	ldr	r2, [pc, #172]	; (8017cbc <__sflush_r+0x10c>)
 8017c10:	40ca      	lsrs	r2, r1
 8017c12:	07d6      	lsls	r6, r2, #31
 8017c14:	d547      	bpl.n	8017ca6 <__sflush_r+0xf6>
 8017c16:	2200      	movs	r2, #0
 8017c18:	6062      	str	r2, [r4, #4]
 8017c1a:	04d9      	lsls	r1, r3, #19
 8017c1c:	6922      	ldr	r2, [r4, #16]
 8017c1e:	6022      	str	r2, [r4, #0]
 8017c20:	d504      	bpl.n	8017c2c <__sflush_r+0x7c>
 8017c22:	1c42      	adds	r2, r0, #1
 8017c24:	d101      	bne.n	8017c2a <__sflush_r+0x7a>
 8017c26:	682b      	ldr	r3, [r5, #0]
 8017c28:	b903      	cbnz	r3, 8017c2c <__sflush_r+0x7c>
 8017c2a:	6560      	str	r0, [r4, #84]	; 0x54
 8017c2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017c2e:	602f      	str	r7, [r5, #0]
 8017c30:	2900      	cmp	r1, #0
 8017c32:	d0ca      	beq.n	8017bca <__sflush_r+0x1a>
 8017c34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017c38:	4299      	cmp	r1, r3
 8017c3a:	d002      	beq.n	8017c42 <__sflush_r+0x92>
 8017c3c:	4628      	mov	r0, r5
 8017c3e:	f7ff fcbd 	bl	80175bc <_free_r>
 8017c42:	2000      	movs	r0, #0
 8017c44:	6360      	str	r0, [r4, #52]	; 0x34
 8017c46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017c4a:	6a21      	ldr	r1, [r4, #32]
 8017c4c:	2301      	movs	r3, #1
 8017c4e:	4628      	mov	r0, r5
 8017c50:	47b0      	blx	r6
 8017c52:	1c41      	adds	r1, r0, #1
 8017c54:	d1c6      	bne.n	8017be4 <__sflush_r+0x34>
 8017c56:	682b      	ldr	r3, [r5, #0]
 8017c58:	2b00      	cmp	r3, #0
 8017c5a:	d0c3      	beq.n	8017be4 <__sflush_r+0x34>
 8017c5c:	2b1d      	cmp	r3, #29
 8017c5e:	d001      	beq.n	8017c64 <__sflush_r+0xb4>
 8017c60:	2b16      	cmp	r3, #22
 8017c62:	d101      	bne.n	8017c68 <__sflush_r+0xb8>
 8017c64:	602f      	str	r7, [r5, #0]
 8017c66:	e7b0      	b.n	8017bca <__sflush_r+0x1a>
 8017c68:	89a3      	ldrh	r3, [r4, #12]
 8017c6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017c6e:	81a3      	strh	r3, [r4, #12]
 8017c70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017c74:	690f      	ldr	r7, [r1, #16]
 8017c76:	2f00      	cmp	r7, #0
 8017c78:	d0a7      	beq.n	8017bca <__sflush_r+0x1a>
 8017c7a:	0793      	lsls	r3, r2, #30
 8017c7c:	680e      	ldr	r6, [r1, #0]
 8017c7e:	bf08      	it	eq
 8017c80:	694b      	ldreq	r3, [r1, #20]
 8017c82:	600f      	str	r7, [r1, #0]
 8017c84:	bf18      	it	ne
 8017c86:	2300      	movne	r3, #0
 8017c88:	eba6 0807 	sub.w	r8, r6, r7
 8017c8c:	608b      	str	r3, [r1, #8]
 8017c8e:	f1b8 0f00 	cmp.w	r8, #0
 8017c92:	dd9a      	ble.n	8017bca <__sflush_r+0x1a>
 8017c94:	4643      	mov	r3, r8
 8017c96:	463a      	mov	r2, r7
 8017c98:	6a21      	ldr	r1, [r4, #32]
 8017c9a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017c9c:	4628      	mov	r0, r5
 8017c9e:	47b0      	blx	r6
 8017ca0:	2800      	cmp	r0, #0
 8017ca2:	dc07      	bgt.n	8017cb4 <__sflush_r+0x104>
 8017ca4:	89a3      	ldrh	r3, [r4, #12]
 8017ca6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017caa:	81a3      	strh	r3, [r4, #12]
 8017cac:	f04f 30ff 	mov.w	r0, #4294967295
 8017cb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017cb4:	4407      	add	r7, r0
 8017cb6:	eba8 0800 	sub.w	r8, r8, r0
 8017cba:	e7e8      	b.n	8017c8e <__sflush_r+0xde>
 8017cbc:	20400001 	.word	0x20400001

08017cc0 <_fflush_r>:
 8017cc0:	b538      	push	{r3, r4, r5, lr}
 8017cc2:	690b      	ldr	r3, [r1, #16]
 8017cc4:	4605      	mov	r5, r0
 8017cc6:	460c      	mov	r4, r1
 8017cc8:	b1db      	cbz	r3, 8017d02 <_fflush_r+0x42>
 8017cca:	b118      	cbz	r0, 8017cd4 <_fflush_r+0x14>
 8017ccc:	6983      	ldr	r3, [r0, #24]
 8017cce:	b90b      	cbnz	r3, 8017cd4 <_fflush_r+0x14>
 8017cd0:	f000 f860 	bl	8017d94 <__sinit>
 8017cd4:	4b0c      	ldr	r3, [pc, #48]	; (8017d08 <_fflush_r+0x48>)
 8017cd6:	429c      	cmp	r4, r3
 8017cd8:	d109      	bne.n	8017cee <_fflush_r+0x2e>
 8017cda:	686c      	ldr	r4, [r5, #4]
 8017cdc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017ce0:	b17b      	cbz	r3, 8017d02 <_fflush_r+0x42>
 8017ce2:	4621      	mov	r1, r4
 8017ce4:	4628      	mov	r0, r5
 8017ce6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017cea:	f7ff bf61 	b.w	8017bb0 <__sflush_r>
 8017cee:	4b07      	ldr	r3, [pc, #28]	; (8017d0c <_fflush_r+0x4c>)
 8017cf0:	429c      	cmp	r4, r3
 8017cf2:	d101      	bne.n	8017cf8 <_fflush_r+0x38>
 8017cf4:	68ac      	ldr	r4, [r5, #8]
 8017cf6:	e7f1      	b.n	8017cdc <_fflush_r+0x1c>
 8017cf8:	4b05      	ldr	r3, [pc, #20]	; (8017d10 <_fflush_r+0x50>)
 8017cfa:	429c      	cmp	r4, r3
 8017cfc:	bf08      	it	eq
 8017cfe:	68ec      	ldreq	r4, [r5, #12]
 8017d00:	e7ec      	b.n	8017cdc <_fflush_r+0x1c>
 8017d02:	2000      	movs	r0, #0
 8017d04:	bd38      	pop	{r3, r4, r5, pc}
 8017d06:	bf00      	nop
 8017d08:	0801bd24 	.word	0x0801bd24
 8017d0c:	0801bd44 	.word	0x0801bd44
 8017d10:	0801bd04 	.word	0x0801bd04

08017d14 <_cleanup_r>:
 8017d14:	4901      	ldr	r1, [pc, #4]	; (8017d1c <_cleanup_r+0x8>)
 8017d16:	f000 b8a9 	b.w	8017e6c <_fwalk_reent>
 8017d1a:	bf00      	nop
 8017d1c:	08017cc1 	.word	0x08017cc1

08017d20 <std.isra.0>:
 8017d20:	2300      	movs	r3, #0
 8017d22:	b510      	push	{r4, lr}
 8017d24:	4604      	mov	r4, r0
 8017d26:	6003      	str	r3, [r0, #0]
 8017d28:	6043      	str	r3, [r0, #4]
 8017d2a:	6083      	str	r3, [r0, #8]
 8017d2c:	8181      	strh	r1, [r0, #12]
 8017d2e:	6643      	str	r3, [r0, #100]	; 0x64
 8017d30:	81c2      	strh	r2, [r0, #14]
 8017d32:	6103      	str	r3, [r0, #16]
 8017d34:	6143      	str	r3, [r0, #20]
 8017d36:	6183      	str	r3, [r0, #24]
 8017d38:	4619      	mov	r1, r3
 8017d3a:	2208      	movs	r2, #8
 8017d3c:	305c      	adds	r0, #92	; 0x5c
 8017d3e:	f7ff fc35 	bl	80175ac <memset>
 8017d42:	4b05      	ldr	r3, [pc, #20]	; (8017d58 <std.isra.0+0x38>)
 8017d44:	6263      	str	r3, [r4, #36]	; 0x24
 8017d46:	4b05      	ldr	r3, [pc, #20]	; (8017d5c <std.isra.0+0x3c>)
 8017d48:	62a3      	str	r3, [r4, #40]	; 0x28
 8017d4a:	4b05      	ldr	r3, [pc, #20]	; (8017d60 <std.isra.0+0x40>)
 8017d4c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8017d4e:	4b05      	ldr	r3, [pc, #20]	; (8017d64 <std.isra.0+0x44>)
 8017d50:	6224      	str	r4, [r4, #32]
 8017d52:	6323      	str	r3, [r4, #48]	; 0x30
 8017d54:	bd10      	pop	{r4, pc}
 8017d56:	bf00      	nop
 8017d58:	0801880d 	.word	0x0801880d
 8017d5c:	0801882f 	.word	0x0801882f
 8017d60:	08018867 	.word	0x08018867
 8017d64:	0801888b 	.word	0x0801888b

08017d68 <__sfmoreglue>:
 8017d68:	b570      	push	{r4, r5, r6, lr}
 8017d6a:	1e4a      	subs	r2, r1, #1
 8017d6c:	2568      	movs	r5, #104	; 0x68
 8017d6e:	4355      	muls	r5, r2
 8017d70:	460e      	mov	r6, r1
 8017d72:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8017d76:	f7ff fc6f 	bl	8017658 <_malloc_r>
 8017d7a:	4604      	mov	r4, r0
 8017d7c:	b140      	cbz	r0, 8017d90 <__sfmoreglue+0x28>
 8017d7e:	2100      	movs	r1, #0
 8017d80:	e880 0042 	stmia.w	r0, {r1, r6}
 8017d84:	300c      	adds	r0, #12
 8017d86:	60a0      	str	r0, [r4, #8]
 8017d88:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8017d8c:	f7ff fc0e 	bl	80175ac <memset>
 8017d90:	4620      	mov	r0, r4
 8017d92:	bd70      	pop	{r4, r5, r6, pc}

08017d94 <__sinit>:
 8017d94:	6983      	ldr	r3, [r0, #24]
 8017d96:	b510      	push	{r4, lr}
 8017d98:	4604      	mov	r4, r0
 8017d9a:	bb33      	cbnz	r3, 8017dea <__sinit+0x56>
 8017d9c:	6483      	str	r3, [r0, #72]	; 0x48
 8017d9e:	64c3      	str	r3, [r0, #76]	; 0x4c
 8017da0:	6503      	str	r3, [r0, #80]	; 0x50
 8017da2:	4b12      	ldr	r3, [pc, #72]	; (8017dec <__sinit+0x58>)
 8017da4:	4a12      	ldr	r2, [pc, #72]	; (8017df0 <__sinit+0x5c>)
 8017da6:	681b      	ldr	r3, [r3, #0]
 8017da8:	6282      	str	r2, [r0, #40]	; 0x28
 8017daa:	4298      	cmp	r0, r3
 8017dac:	bf04      	itt	eq
 8017dae:	2301      	moveq	r3, #1
 8017db0:	6183      	streq	r3, [r0, #24]
 8017db2:	f000 f81f 	bl	8017df4 <__sfp>
 8017db6:	6060      	str	r0, [r4, #4]
 8017db8:	4620      	mov	r0, r4
 8017dba:	f000 f81b 	bl	8017df4 <__sfp>
 8017dbe:	60a0      	str	r0, [r4, #8]
 8017dc0:	4620      	mov	r0, r4
 8017dc2:	f000 f817 	bl	8017df4 <__sfp>
 8017dc6:	2200      	movs	r2, #0
 8017dc8:	60e0      	str	r0, [r4, #12]
 8017dca:	2104      	movs	r1, #4
 8017dcc:	6860      	ldr	r0, [r4, #4]
 8017dce:	f7ff ffa7 	bl	8017d20 <std.isra.0>
 8017dd2:	2201      	movs	r2, #1
 8017dd4:	2109      	movs	r1, #9
 8017dd6:	68a0      	ldr	r0, [r4, #8]
 8017dd8:	f7ff ffa2 	bl	8017d20 <std.isra.0>
 8017ddc:	2202      	movs	r2, #2
 8017dde:	2112      	movs	r1, #18
 8017de0:	68e0      	ldr	r0, [r4, #12]
 8017de2:	f7ff ff9d 	bl	8017d20 <std.isra.0>
 8017de6:	2301      	movs	r3, #1
 8017de8:	61a3      	str	r3, [r4, #24]
 8017dea:	bd10      	pop	{r4, pc}
 8017dec:	0801bd64 	.word	0x0801bd64
 8017df0:	08017d15 	.word	0x08017d15

08017df4 <__sfp>:
 8017df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017df6:	4b1c      	ldr	r3, [pc, #112]	; (8017e68 <__sfp+0x74>)
 8017df8:	681e      	ldr	r6, [r3, #0]
 8017dfa:	69b3      	ldr	r3, [r6, #24]
 8017dfc:	4607      	mov	r7, r0
 8017dfe:	b913      	cbnz	r3, 8017e06 <__sfp+0x12>
 8017e00:	4630      	mov	r0, r6
 8017e02:	f7ff ffc7 	bl	8017d94 <__sinit>
 8017e06:	3648      	adds	r6, #72	; 0x48
 8017e08:	68b4      	ldr	r4, [r6, #8]
 8017e0a:	6873      	ldr	r3, [r6, #4]
 8017e0c:	3b01      	subs	r3, #1
 8017e0e:	d503      	bpl.n	8017e18 <__sfp+0x24>
 8017e10:	6833      	ldr	r3, [r6, #0]
 8017e12:	b133      	cbz	r3, 8017e22 <__sfp+0x2e>
 8017e14:	6836      	ldr	r6, [r6, #0]
 8017e16:	e7f7      	b.n	8017e08 <__sfp+0x14>
 8017e18:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8017e1c:	b16d      	cbz	r5, 8017e3a <__sfp+0x46>
 8017e1e:	3468      	adds	r4, #104	; 0x68
 8017e20:	e7f4      	b.n	8017e0c <__sfp+0x18>
 8017e22:	2104      	movs	r1, #4
 8017e24:	4638      	mov	r0, r7
 8017e26:	f7ff ff9f 	bl	8017d68 <__sfmoreglue>
 8017e2a:	6030      	str	r0, [r6, #0]
 8017e2c:	2800      	cmp	r0, #0
 8017e2e:	d1f1      	bne.n	8017e14 <__sfp+0x20>
 8017e30:	230c      	movs	r3, #12
 8017e32:	603b      	str	r3, [r7, #0]
 8017e34:	4604      	mov	r4, r0
 8017e36:	4620      	mov	r0, r4
 8017e38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017e3a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017e3e:	81e3      	strh	r3, [r4, #14]
 8017e40:	2301      	movs	r3, #1
 8017e42:	81a3      	strh	r3, [r4, #12]
 8017e44:	6665      	str	r5, [r4, #100]	; 0x64
 8017e46:	6025      	str	r5, [r4, #0]
 8017e48:	60a5      	str	r5, [r4, #8]
 8017e4a:	6065      	str	r5, [r4, #4]
 8017e4c:	6125      	str	r5, [r4, #16]
 8017e4e:	6165      	str	r5, [r4, #20]
 8017e50:	61a5      	str	r5, [r4, #24]
 8017e52:	2208      	movs	r2, #8
 8017e54:	4629      	mov	r1, r5
 8017e56:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8017e5a:	f7ff fba7 	bl	80175ac <memset>
 8017e5e:	6365      	str	r5, [r4, #52]	; 0x34
 8017e60:	63a5      	str	r5, [r4, #56]	; 0x38
 8017e62:	64a5      	str	r5, [r4, #72]	; 0x48
 8017e64:	64e5      	str	r5, [r4, #76]	; 0x4c
 8017e66:	e7e6      	b.n	8017e36 <__sfp+0x42>
 8017e68:	0801bd64 	.word	0x0801bd64

08017e6c <_fwalk_reent>:
 8017e6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017e70:	4680      	mov	r8, r0
 8017e72:	4689      	mov	r9, r1
 8017e74:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8017e78:	2600      	movs	r6, #0
 8017e7a:	b914      	cbnz	r4, 8017e82 <_fwalk_reent+0x16>
 8017e7c:	4630      	mov	r0, r6
 8017e7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017e82:	68a5      	ldr	r5, [r4, #8]
 8017e84:	6867      	ldr	r7, [r4, #4]
 8017e86:	3f01      	subs	r7, #1
 8017e88:	d501      	bpl.n	8017e8e <_fwalk_reent+0x22>
 8017e8a:	6824      	ldr	r4, [r4, #0]
 8017e8c:	e7f5      	b.n	8017e7a <_fwalk_reent+0xe>
 8017e8e:	89ab      	ldrh	r3, [r5, #12]
 8017e90:	2b01      	cmp	r3, #1
 8017e92:	d907      	bls.n	8017ea4 <_fwalk_reent+0x38>
 8017e94:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017e98:	3301      	adds	r3, #1
 8017e9a:	d003      	beq.n	8017ea4 <_fwalk_reent+0x38>
 8017e9c:	4629      	mov	r1, r5
 8017e9e:	4640      	mov	r0, r8
 8017ea0:	47c8      	blx	r9
 8017ea2:	4306      	orrs	r6, r0
 8017ea4:	3568      	adds	r5, #104	; 0x68
 8017ea6:	e7ee      	b.n	8017e86 <_fwalk_reent+0x1a>

08017ea8 <__swhatbuf_r>:
 8017ea8:	b570      	push	{r4, r5, r6, lr}
 8017eaa:	460e      	mov	r6, r1
 8017eac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017eb0:	2900      	cmp	r1, #0
 8017eb2:	b090      	sub	sp, #64	; 0x40
 8017eb4:	4614      	mov	r4, r2
 8017eb6:	461d      	mov	r5, r3
 8017eb8:	da07      	bge.n	8017eca <__swhatbuf_r+0x22>
 8017eba:	2300      	movs	r3, #0
 8017ebc:	602b      	str	r3, [r5, #0]
 8017ebe:	89b3      	ldrh	r3, [r6, #12]
 8017ec0:	061a      	lsls	r2, r3, #24
 8017ec2:	d410      	bmi.n	8017ee6 <__swhatbuf_r+0x3e>
 8017ec4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017ec8:	e00e      	b.n	8017ee8 <__swhatbuf_r+0x40>
 8017eca:	aa01      	add	r2, sp, #4
 8017ecc:	f000 fd04 	bl	80188d8 <_fstat_r>
 8017ed0:	2800      	cmp	r0, #0
 8017ed2:	dbf2      	blt.n	8017eba <__swhatbuf_r+0x12>
 8017ed4:	9a02      	ldr	r2, [sp, #8]
 8017ed6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8017eda:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8017ede:	425a      	negs	r2, r3
 8017ee0:	415a      	adcs	r2, r3
 8017ee2:	602a      	str	r2, [r5, #0]
 8017ee4:	e7ee      	b.n	8017ec4 <__swhatbuf_r+0x1c>
 8017ee6:	2340      	movs	r3, #64	; 0x40
 8017ee8:	2000      	movs	r0, #0
 8017eea:	6023      	str	r3, [r4, #0]
 8017eec:	b010      	add	sp, #64	; 0x40
 8017eee:	bd70      	pop	{r4, r5, r6, pc}

08017ef0 <__smakebuf_r>:
 8017ef0:	898b      	ldrh	r3, [r1, #12]
 8017ef2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017ef4:	079d      	lsls	r5, r3, #30
 8017ef6:	4606      	mov	r6, r0
 8017ef8:	460c      	mov	r4, r1
 8017efa:	d507      	bpl.n	8017f0c <__smakebuf_r+0x1c>
 8017efc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017f00:	6023      	str	r3, [r4, #0]
 8017f02:	6123      	str	r3, [r4, #16]
 8017f04:	2301      	movs	r3, #1
 8017f06:	6163      	str	r3, [r4, #20]
 8017f08:	b002      	add	sp, #8
 8017f0a:	bd70      	pop	{r4, r5, r6, pc}
 8017f0c:	ab01      	add	r3, sp, #4
 8017f0e:	466a      	mov	r2, sp
 8017f10:	f7ff ffca 	bl	8017ea8 <__swhatbuf_r>
 8017f14:	9900      	ldr	r1, [sp, #0]
 8017f16:	4605      	mov	r5, r0
 8017f18:	4630      	mov	r0, r6
 8017f1a:	f7ff fb9d 	bl	8017658 <_malloc_r>
 8017f1e:	b948      	cbnz	r0, 8017f34 <__smakebuf_r+0x44>
 8017f20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017f24:	059a      	lsls	r2, r3, #22
 8017f26:	d4ef      	bmi.n	8017f08 <__smakebuf_r+0x18>
 8017f28:	f023 0303 	bic.w	r3, r3, #3
 8017f2c:	f043 0302 	orr.w	r3, r3, #2
 8017f30:	81a3      	strh	r3, [r4, #12]
 8017f32:	e7e3      	b.n	8017efc <__smakebuf_r+0xc>
 8017f34:	4b0d      	ldr	r3, [pc, #52]	; (8017f6c <__smakebuf_r+0x7c>)
 8017f36:	62b3      	str	r3, [r6, #40]	; 0x28
 8017f38:	89a3      	ldrh	r3, [r4, #12]
 8017f3a:	6020      	str	r0, [r4, #0]
 8017f3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017f40:	81a3      	strh	r3, [r4, #12]
 8017f42:	9b00      	ldr	r3, [sp, #0]
 8017f44:	6163      	str	r3, [r4, #20]
 8017f46:	9b01      	ldr	r3, [sp, #4]
 8017f48:	6120      	str	r0, [r4, #16]
 8017f4a:	b15b      	cbz	r3, 8017f64 <__smakebuf_r+0x74>
 8017f4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017f50:	4630      	mov	r0, r6
 8017f52:	f000 fcd3 	bl	80188fc <_isatty_r>
 8017f56:	b128      	cbz	r0, 8017f64 <__smakebuf_r+0x74>
 8017f58:	89a3      	ldrh	r3, [r4, #12]
 8017f5a:	f023 0303 	bic.w	r3, r3, #3
 8017f5e:	f043 0301 	orr.w	r3, r3, #1
 8017f62:	81a3      	strh	r3, [r4, #12]
 8017f64:	89a3      	ldrh	r3, [r4, #12]
 8017f66:	431d      	orrs	r5, r3
 8017f68:	81a5      	strh	r5, [r4, #12]
 8017f6a:	e7cd      	b.n	8017f08 <__smakebuf_r+0x18>
 8017f6c:	08017d15 	.word	0x08017d15

08017f70 <__malloc_lock>:
 8017f70:	4770      	bx	lr

08017f72 <__malloc_unlock>:
 8017f72:	4770      	bx	lr

08017f74 <_realloc_r>:
 8017f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017f76:	4607      	mov	r7, r0
 8017f78:	4614      	mov	r4, r2
 8017f7a:	460e      	mov	r6, r1
 8017f7c:	b921      	cbnz	r1, 8017f88 <_realloc_r+0x14>
 8017f7e:	4611      	mov	r1, r2
 8017f80:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8017f84:	f7ff bb68 	b.w	8017658 <_malloc_r>
 8017f88:	b922      	cbnz	r2, 8017f94 <_realloc_r+0x20>
 8017f8a:	f7ff fb17 	bl	80175bc <_free_r>
 8017f8e:	4625      	mov	r5, r4
 8017f90:	4628      	mov	r0, r5
 8017f92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017f94:	f000 fcd4 	bl	8018940 <_malloc_usable_size_r>
 8017f98:	4284      	cmp	r4, r0
 8017f9a:	d90f      	bls.n	8017fbc <_realloc_r+0x48>
 8017f9c:	4621      	mov	r1, r4
 8017f9e:	4638      	mov	r0, r7
 8017fa0:	f7ff fb5a 	bl	8017658 <_malloc_r>
 8017fa4:	4605      	mov	r5, r0
 8017fa6:	2800      	cmp	r0, #0
 8017fa8:	d0f2      	beq.n	8017f90 <_realloc_r+0x1c>
 8017faa:	4631      	mov	r1, r6
 8017fac:	4622      	mov	r2, r4
 8017fae:	f7ff fad8 	bl	8017562 <memcpy>
 8017fb2:	4631      	mov	r1, r6
 8017fb4:	4638      	mov	r0, r7
 8017fb6:	f7ff fb01 	bl	80175bc <_free_r>
 8017fba:	e7e9      	b.n	8017f90 <_realloc_r+0x1c>
 8017fbc:	4635      	mov	r5, r6
 8017fbe:	e7e7      	b.n	8017f90 <_realloc_r+0x1c>

08017fc0 <__ssputs_r>:
 8017fc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017fc4:	688e      	ldr	r6, [r1, #8]
 8017fc6:	429e      	cmp	r6, r3
 8017fc8:	4682      	mov	sl, r0
 8017fca:	460c      	mov	r4, r1
 8017fcc:	4691      	mov	r9, r2
 8017fce:	4698      	mov	r8, r3
 8017fd0:	d835      	bhi.n	801803e <__ssputs_r+0x7e>
 8017fd2:	898a      	ldrh	r2, [r1, #12]
 8017fd4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8017fd8:	d031      	beq.n	801803e <__ssputs_r+0x7e>
 8017fda:	6825      	ldr	r5, [r4, #0]
 8017fdc:	6909      	ldr	r1, [r1, #16]
 8017fde:	1a6f      	subs	r7, r5, r1
 8017fe0:	6965      	ldr	r5, [r4, #20]
 8017fe2:	2302      	movs	r3, #2
 8017fe4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017fe8:	fb95 f5f3 	sdiv	r5, r5, r3
 8017fec:	f108 0301 	add.w	r3, r8, #1
 8017ff0:	443b      	add	r3, r7
 8017ff2:	429d      	cmp	r5, r3
 8017ff4:	bf38      	it	cc
 8017ff6:	461d      	movcc	r5, r3
 8017ff8:	0553      	lsls	r3, r2, #21
 8017ffa:	d531      	bpl.n	8018060 <__ssputs_r+0xa0>
 8017ffc:	4629      	mov	r1, r5
 8017ffe:	f7ff fb2b 	bl	8017658 <_malloc_r>
 8018002:	4606      	mov	r6, r0
 8018004:	b950      	cbnz	r0, 801801c <__ssputs_r+0x5c>
 8018006:	230c      	movs	r3, #12
 8018008:	f8ca 3000 	str.w	r3, [sl]
 801800c:	89a3      	ldrh	r3, [r4, #12]
 801800e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018012:	81a3      	strh	r3, [r4, #12]
 8018014:	f04f 30ff 	mov.w	r0, #4294967295
 8018018:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801801c:	463a      	mov	r2, r7
 801801e:	6921      	ldr	r1, [r4, #16]
 8018020:	f7ff fa9f 	bl	8017562 <memcpy>
 8018024:	89a3      	ldrh	r3, [r4, #12]
 8018026:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801802a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801802e:	81a3      	strh	r3, [r4, #12]
 8018030:	6126      	str	r6, [r4, #16]
 8018032:	6165      	str	r5, [r4, #20]
 8018034:	443e      	add	r6, r7
 8018036:	1bed      	subs	r5, r5, r7
 8018038:	6026      	str	r6, [r4, #0]
 801803a:	60a5      	str	r5, [r4, #8]
 801803c:	4646      	mov	r6, r8
 801803e:	4546      	cmp	r6, r8
 8018040:	bf28      	it	cs
 8018042:	4646      	movcs	r6, r8
 8018044:	4632      	mov	r2, r6
 8018046:	4649      	mov	r1, r9
 8018048:	6820      	ldr	r0, [r4, #0]
 801804a:	f7ff fa95 	bl	8017578 <memmove>
 801804e:	68a3      	ldr	r3, [r4, #8]
 8018050:	1b9b      	subs	r3, r3, r6
 8018052:	60a3      	str	r3, [r4, #8]
 8018054:	6823      	ldr	r3, [r4, #0]
 8018056:	441e      	add	r6, r3
 8018058:	6026      	str	r6, [r4, #0]
 801805a:	2000      	movs	r0, #0
 801805c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018060:	462a      	mov	r2, r5
 8018062:	f7ff ff87 	bl	8017f74 <_realloc_r>
 8018066:	4606      	mov	r6, r0
 8018068:	2800      	cmp	r0, #0
 801806a:	d1e1      	bne.n	8018030 <__ssputs_r+0x70>
 801806c:	6921      	ldr	r1, [r4, #16]
 801806e:	4650      	mov	r0, sl
 8018070:	f7ff faa4 	bl	80175bc <_free_r>
 8018074:	e7c7      	b.n	8018006 <__ssputs_r+0x46>
	...

08018078 <_svfiprintf_r>:
 8018078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801807c:	b09d      	sub	sp, #116	; 0x74
 801807e:	4680      	mov	r8, r0
 8018080:	9303      	str	r3, [sp, #12]
 8018082:	898b      	ldrh	r3, [r1, #12]
 8018084:	061c      	lsls	r4, r3, #24
 8018086:	460d      	mov	r5, r1
 8018088:	4616      	mov	r6, r2
 801808a:	d50f      	bpl.n	80180ac <_svfiprintf_r+0x34>
 801808c:	690b      	ldr	r3, [r1, #16]
 801808e:	b96b      	cbnz	r3, 80180ac <_svfiprintf_r+0x34>
 8018090:	2140      	movs	r1, #64	; 0x40
 8018092:	f7ff fae1 	bl	8017658 <_malloc_r>
 8018096:	6028      	str	r0, [r5, #0]
 8018098:	6128      	str	r0, [r5, #16]
 801809a:	b928      	cbnz	r0, 80180a8 <_svfiprintf_r+0x30>
 801809c:	230c      	movs	r3, #12
 801809e:	f8c8 3000 	str.w	r3, [r8]
 80180a2:	f04f 30ff 	mov.w	r0, #4294967295
 80180a6:	e0c5      	b.n	8018234 <_svfiprintf_r+0x1bc>
 80180a8:	2340      	movs	r3, #64	; 0x40
 80180aa:	616b      	str	r3, [r5, #20]
 80180ac:	2300      	movs	r3, #0
 80180ae:	9309      	str	r3, [sp, #36]	; 0x24
 80180b0:	2320      	movs	r3, #32
 80180b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80180b6:	2330      	movs	r3, #48	; 0x30
 80180b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80180bc:	f04f 0b01 	mov.w	fp, #1
 80180c0:	4637      	mov	r7, r6
 80180c2:	463c      	mov	r4, r7
 80180c4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80180c8:	2b00      	cmp	r3, #0
 80180ca:	d13c      	bne.n	8018146 <_svfiprintf_r+0xce>
 80180cc:	ebb7 0a06 	subs.w	sl, r7, r6
 80180d0:	d00b      	beq.n	80180ea <_svfiprintf_r+0x72>
 80180d2:	4653      	mov	r3, sl
 80180d4:	4632      	mov	r2, r6
 80180d6:	4629      	mov	r1, r5
 80180d8:	4640      	mov	r0, r8
 80180da:	f7ff ff71 	bl	8017fc0 <__ssputs_r>
 80180de:	3001      	adds	r0, #1
 80180e0:	f000 80a3 	beq.w	801822a <_svfiprintf_r+0x1b2>
 80180e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80180e6:	4453      	add	r3, sl
 80180e8:	9309      	str	r3, [sp, #36]	; 0x24
 80180ea:	783b      	ldrb	r3, [r7, #0]
 80180ec:	2b00      	cmp	r3, #0
 80180ee:	f000 809c 	beq.w	801822a <_svfiprintf_r+0x1b2>
 80180f2:	2300      	movs	r3, #0
 80180f4:	f04f 32ff 	mov.w	r2, #4294967295
 80180f8:	9304      	str	r3, [sp, #16]
 80180fa:	9307      	str	r3, [sp, #28]
 80180fc:	9205      	str	r2, [sp, #20]
 80180fe:	9306      	str	r3, [sp, #24]
 8018100:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018104:	931a      	str	r3, [sp, #104]	; 0x68
 8018106:	2205      	movs	r2, #5
 8018108:	7821      	ldrb	r1, [r4, #0]
 801810a:	4850      	ldr	r0, [pc, #320]	; (801824c <_svfiprintf_r+0x1d4>)
 801810c:	f7e8 f8a0 	bl	8000250 <memchr>
 8018110:	1c67      	adds	r7, r4, #1
 8018112:	9b04      	ldr	r3, [sp, #16]
 8018114:	b9d8      	cbnz	r0, 801814e <_svfiprintf_r+0xd6>
 8018116:	06d9      	lsls	r1, r3, #27
 8018118:	bf44      	itt	mi
 801811a:	2220      	movmi	r2, #32
 801811c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8018120:	071a      	lsls	r2, r3, #28
 8018122:	bf44      	itt	mi
 8018124:	222b      	movmi	r2, #43	; 0x2b
 8018126:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801812a:	7822      	ldrb	r2, [r4, #0]
 801812c:	2a2a      	cmp	r2, #42	; 0x2a
 801812e:	d016      	beq.n	801815e <_svfiprintf_r+0xe6>
 8018130:	9a07      	ldr	r2, [sp, #28]
 8018132:	2100      	movs	r1, #0
 8018134:	200a      	movs	r0, #10
 8018136:	4627      	mov	r7, r4
 8018138:	3401      	adds	r4, #1
 801813a:	783b      	ldrb	r3, [r7, #0]
 801813c:	3b30      	subs	r3, #48	; 0x30
 801813e:	2b09      	cmp	r3, #9
 8018140:	d951      	bls.n	80181e6 <_svfiprintf_r+0x16e>
 8018142:	b1c9      	cbz	r1, 8018178 <_svfiprintf_r+0x100>
 8018144:	e011      	b.n	801816a <_svfiprintf_r+0xf2>
 8018146:	2b25      	cmp	r3, #37	; 0x25
 8018148:	d0c0      	beq.n	80180cc <_svfiprintf_r+0x54>
 801814a:	4627      	mov	r7, r4
 801814c:	e7b9      	b.n	80180c2 <_svfiprintf_r+0x4a>
 801814e:	4a3f      	ldr	r2, [pc, #252]	; (801824c <_svfiprintf_r+0x1d4>)
 8018150:	1a80      	subs	r0, r0, r2
 8018152:	fa0b f000 	lsl.w	r0, fp, r0
 8018156:	4318      	orrs	r0, r3
 8018158:	9004      	str	r0, [sp, #16]
 801815a:	463c      	mov	r4, r7
 801815c:	e7d3      	b.n	8018106 <_svfiprintf_r+0x8e>
 801815e:	9a03      	ldr	r2, [sp, #12]
 8018160:	1d11      	adds	r1, r2, #4
 8018162:	6812      	ldr	r2, [r2, #0]
 8018164:	9103      	str	r1, [sp, #12]
 8018166:	2a00      	cmp	r2, #0
 8018168:	db01      	blt.n	801816e <_svfiprintf_r+0xf6>
 801816a:	9207      	str	r2, [sp, #28]
 801816c:	e004      	b.n	8018178 <_svfiprintf_r+0x100>
 801816e:	4252      	negs	r2, r2
 8018170:	f043 0302 	orr.w	r3, r3, #2
 8018174:	9207      	str	r2, [sp, #28]
 8018176:	9304      	str	r3, [sp, #16]
 8018178:	783b      	ldrb	r3, [r7, #0]
 801817a:	2b2e      	cmp	r3, #46	; 0x2e
 801817c:	d10e      	bne.n	801819c <_svfiprintf_r+0x124>
 801817e:	787b      	ldrb	r3, [r7, #1]
 8018180:	2b2a      	cmp	r3, #42	; 0x2a
 8018182:	f107 0101 	add.w	r1, r7, #1
 8018186:	d132      	bne.n	80181ee <_svfiprintf_r+0x176>
 8018188:	9b03      	ldr	r3, [sp, #12]
 801818a:	1d1a      	adds	r2, r3, #4
 801818c:	681b      	ldr	r3, [r3, #0]
 801818e:	9203      	str	r2, [sp, #12]
 8018190:	2b00      	cmp	r3, #0
 8018192:	bfb8      	it	lt
 8018194:	f04f 33ff 	movlt.w	r3, #4294967295
 8018198:	3702      	adds	r7, #2
 801819a:	9305      	str	r3, [sp, #20]
 801819c:	4c2c      	ldr	r4, [pc, #176]	; (8018250 <_svfiprintf_r+0x1d8>)
 801819e:	7839      	ldrb	r1, [r7, #0]
 80181a0:	2203      	movs	r2, #3
 80181a2:	4620      	mov	r0, r4
 80181a4:	f7e8 f854 	bl	8000250 <memchr>
 80181a8:	b138      	cbz	r0, 80181ba <_svfiprintf_r+0x142>
 80181aa:	2340      	movs	r3, #64	; 0x40
 80181ac:	1b00      	subs	r0, r0, r4
 80181ae:	fa03 f000 	lsl.w	r0, r3, r0
 80181b2:	9b04      	ldr	r3, [sp, #16]
 80181b4:	4303      	orrs	r3, r0
 80181b6:	9304      	str	r3, [sp, #16]
 80181b8:	3701      	adds	r7, #1
 80181ba:	7839      	ldrb	r1, [r7, #0]
 80181bc:	4825      	ldr	r0, [pc, #148]	; (8018254 <_svfiprintf_r+0x1dc>)
 80181be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80181c2:	2206      	movs	r2, #6
 80181c4:	1c7e      	adds	r6, r7, #1
 80181c6:	f7e8 f843 	bl	8000250 <memchr>
 80181ca:	2800      	cmp	r0, #0
 80181cc:	d035      	beq.n	801823a <_svfiprintf_r+0x1c2>
 80181ce:	4b22      	ldr	r3, [pc, #136]	; (8018258 <_svfiprintf_r+0x1e0>)
 80181d0:	b9fb      	cbnz	r3, 8018212 <_svfiprintf_r+0x19a>
 80181d2:	9b03      	ldr	r3, [sp, #12]
 80181d4:	3307      	adds	r3, #7
 80181d6:	f023 0307 	bic.w	r3, r3, #7
 80181da:	3308      	adds	r3, #8
 80181dc:	9303      	str	r3, [sp, #12]
 80181de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80181e0:	444b      	add	r3, r9
 80181e2:	9309      	str	r3, [sp, #36]	; 0x24
 80181e4:	e76c      	b.n	80180c0 <_svfiprintf_r+0x48>
 80181e6:	fb00 3202 	mla	r2, r0, r2, r3
 80181ea:	2101      	movs	r1, #1
 80181ec:	e7a3      	b.n	8018136 <_svfiprintf_r+0xbe>
 80181ee:	2300      	movs	r3, #0
 80181f0:	9305      	str	r3, [sp, #20]
 80181f2:	4618      	mov	r0, r3
 80181f4:	240a      	movs	r4, #10
 80181f6:	460f      	mov	r7, r1
 80181f8:	3101      	adds	r1, #1
 80181fa:	783a      	ldrb	r2, [r7, #0]
 80181fc:	3a30      	subs	r2, #48	; 0x30
 80181fe:	2a09      	cmp	r2, #9
 8018200:	d903      	bls.n	801820a <_svfiprintf_r+0x192>
 8018202:	2b00      	cmp	r3, #0
 8018204:	d0ca      	beq.n	801819c <_svfiprintf_r+0x124>
 8018206:	9005      	str	r0, [sp, #20]
 8018208:	e7c8      	b.n	801819c <_svfiprintf_r+0x124>
 801820a:	fb04 2000 	mla	r0, r4, r0, r2
 801820e:	2301      	movs	r3, #1
 8018210:	e7f1      	b.n	80181f6 <_svfiprintf_r+0x17e>
 8018212:	ab03      	add	r3, sp, #12
 8018214:	9300      	str	r3, [sp, #0]
 8018216:	462a      	mov	r2, r5
 8018218:	4b10      	ldr	r3, [pc, #64]	; (801825c <_svfiprintf_r+0x1e4>)
 801821a:	a904      	add	r1, sp, #16
 801821c:	4640      	mov	r0, r8
 801821e:	f3af 8000 	nop.w
 8018222:	f1b0 3fff 	cmp.w	r0, #4294967295
 8018226:	4681      	mov	r9, r0
 8018228:	d1d9      	bne.n	80181de <_svfiprintf_r+0x166>
 801822a:	89ab      	ldrh	r3, [r5, #12]
 801822c:	065b      	lsls	r3, r3, #25
 801822e:	f53f af38 	bmi.w	80180a2 <_svfiprintf_r+0x2a>
 8018232:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018234:	b01d      	add	sp, #116	; 0x74
 8018236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801823a:	ab03      	add	r3, sp, #12
 801823c:	9300      	str	r3, [sp, #0]
 801823e:	462a      	mov	r2, r5
 8018240:	4b06      	ldr	r3, [pc, #24]	; (801825c <_svfiprintf_r+0x1e4>)
 8018242:	a904      	add	r1, sp, #16
 8018244:	4640      	mov	r0, r8
 8018246:	f000 f9c1 	bl	80185cc <_printf_i>
 801824a:	e7ea      	b.n	8018222 <_svfiprintf_r+0x1aa>
 801824c:	0801bd68 	.word	0x0801bd68
 8018250:	0801bd6e 	.word	0x0801bd6e
 8018254:	0801bd72 	.word	0x0801bd72
 8018258:	00000000 	.word	0x00000000
 801825c:	08017fc1 	.word	0x08017fc1

08018260 <__sfputc_r>:
 8018260:	6893      	ldr	r3, [r2, #8]
 8018262:	3b01      	subs	r3, #1
 8018264:	2b00      	cmp	r3, #0
 8018266:	b410      	push	{r4}
 8018268:	6093      	str	r3, [r2, #8]
 801826a:	da09      	bge.n	8018280 <__sfputc_r+0x20>
 801826c:	6994      	ldr	r4, [r2, #24]
 801826e:	42a3      	cmp	r3, r4
 8018270:	db02      	blt.n	8018278 <__sfputc_r+0x18>
 8018272:	b2cb      	uxtb	r3, r1
 8018274:	2b0a      	cmp	r3, #10
 8018276:	d103      	bne.n	8018280 <__sfputc_r+0x20>
 8018278:	f85d 4b04 	ldr.w	r4, [sp], #4
 801827c:	f7ff bbca 	b.w	8017a14 <__swbuf_r>
 8018280:	6813      	ldr	r3, [r2, #0]
 8018282:	1c58      	adds	r0, r3, #1
 8018284:	6010      	str	r0, [r2, #0]
 8018286:	7019      	strb	r1, [r3, #0]
 8018288:	b2c8      	uxtb	r0, r1
 801828a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801828e:	4770      	bx	lr

08018290 <__sfputs_r>:
 8018290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018292:	4606      	mov	r6, r0
 8018294:	460f      	mov	r7, r1
 8018296:	4614      	mov	r4, r2
 8018298:	18d5      	adds	r5, r2, r3
 801829a:	42ac      	cmp	r4, r5
 801829c:	d101      	bne.n	80182a2 <__sfputs_r+0x12>
 801829e:	2000      	movs	r0, #0
 80182a0:	e007      	b.n	80182b2 <__sfputs_r+0x22>
 80182a2:	463a      	mov	r2, r7
 80182a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80182a8:	4630      	mov	r0, r6
 80182aa:	f7ff ffd9 	bl	8018260 <__sfputc_r>
 80182ae:	1c43      	adds	r3, r0, #1
 80182b0:	d1f3      	bne.n	801829a <__sfputs_r+0xa>
 80182b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080182b4 <_vfiprintf_r>:
 80182b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80182b8:	b09d      	sub	sp, #116	; 0x74
 80182ba:	460c      	mov	r4, r1
 80182bc:	4617      	mov	r7, r2
 80182be:	9303      	str	r3, [sp, #12]
 80182c0:	4606      	mov	r6, r0
 80182c2:	b118      	cbz	r0, 80182cc <_vfiprintf_r+0x18>
 80182c4:	6983      	ldr	r3, [r0, #24]
 80182c6:	b90b      	cbnz	r3, 80182cc <_vfiprintf_r+0x18>
 80182c8:	f7ff fd64 	bl	8017d94 <__sinit>
 80182cc:	4b7c      	ldr	r3, [pc, #496]	; (80184c0 <_vfiprintf_r+0x20c>)
 80182ce:	429c      	cmp	r4, r3
 80182d0:	d157      	bne.n	8018382 <_vfiprintf_r+0xce>
 80182d2:	6874      	ldr	r4, [r6, #4]
 80182d4:	89a3      	ldrh	r3, [r4, #12]
 80182d6:	0718      	lsls	r0, r3, #28
 80182d8:	d55d      	bpl.n	8018396 <_vfiprintf_r+0xe2>
 80182da:	6923      	ldr	r3, [r4, #16]
 80182dc:	2b00      	cmp	r3, #0
 80182de:	d05a      	beq.n	8018396 <_vfiprintf_r+0xe2>
 80182e0:	2300      	movs	r3, #0
 80182e2:	9309      	str	r3, [sp, #36]	; 0x24
 80182e4:	2320      	movs	r3, #32
 80182e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80182ea:	2330      	movs	r3, #48	; 0x30
 80182ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80182f0:	f04f 0b01 	mov.w	fp, #1
 80182f4:	46b8      	mov	r8, r7
 80182f6:	4645      	mov	r5, r8
 80182f8:	f815 3b01 	ldrb.w	r3, [r5], #1
 80182fc:	2b00      	cmp	r3, #0
 80182fe:	d155      	bne.n	80183ac <_vfiprintf_r+0xf8>
 8018300:	ebb8 0a07 	subs.w	sl, r8, r7
 8018304:	d00b      	beq.n	801831e <_vfiprintf_r+0x6a>
 8018306:	4653      	mov	r3, sl
 8018308:	463a      	mov	r2, r7
 801830a:	4621      	mov	r1, r4
 801830c:	4630      	mov	r0, r6
 801830e:	f7ff ffbf 	bl	8018290 <__sfputs_r>
 8018312:	3001      	adds	r0, #1
 8018314:	f000 80c4 	beq.w	80184a0 <_vfiprintf_r+0x1ec>
 8018318:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801831a:	4453      	add	r3, sl
 801831c:	9309      	str	r3, [sp, #36]	; 0x24
 801831e:	f898 3000 	ldrb.w	r3, [r8]
 8018322:	2b00      	cmp	r3, #0
 8018324:	f000 80bc 	beq.w	80184a0 <_vfiprintf_r+0x1ec>
 8018328:	2300      	movs	r3, #0
 801832a:	f04f 32ff 	mov.w	r2, #4294967295
 801832e:	9304      	str	r3, [sp, #16]
 8018330:	9307      	str	r3, [sp, #28]
 8018332:	9205      	str	r2, [sp, #20]
 8018334:	9306      	str	r3, [sp, #24]
 8018336:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801833a:	931a      	str	r3, [sp, #104]	; 0x68
 801833c:	2205      	movs	r2, #5
 801833e:	7829      	ldrb	r1, [r5, #0]
 8018340:	4860      	ldr	r0, [pc, #384]	; (80184c4 <_vfiprintf_r+0x210>)
 8018342:	f7e7 ff85 	bl	8000250 <memchr>
 8018346:	f105 0801 	add.w	r8, r5, #1
 801834a:	9b04      	ldr	r3, [sp, #16]
 801834c:	2800      	cmp	r0, #0
 801834e:	d131      	bne.n	80183b4 <_vfiprintf_r+0x100>
 8018350:	06d9      	lsls	r1, r3, #27
 8018352:	bf44      	itt	mi
 8018354:	2220      	movmi	r2, #32
 8018356:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801835a:	071a      	lsls	r2, r3, #28
 801835c:	bf44      	itt	mi
 801835e:	222b      	movmi	r2, #43	; 0x2b
 8018360:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8018364:	782a      	ldrb	r2, [r5, #0]
 8018366:	2a2a      	cmp	r2, #42	; 0x2a
 8018368:	d02c      	beq.n	80183c4 <_vfiprintf_r+0x110>
 801836a:	9a07      	ldr	r2, [sp, #28]
 801836c:	2100      	movs	r1, #0
 801836e:	200a      	movs	r0, #10
 8018370:	46a8      	mov	r8, r5
 8018372:	3501      	adds	r5, #1
 8018374:	f898 3000 	ldrb.w	r3, [r8]
 8018378:	3b30      	subs	r3, #48	; 0x30
 801837a:	2b09      	cmp	r3, #9
 801837c:	d96d      	bls.n	801845a <_vfiprintf_r+0x1a6>
 801837e:	b371      	cbz	r1, 80183de <_vfiprintf_r+0x12a>
 8018380:	e026      	b.n	80183d0 <_vfiprintf_r+0x11c>
 8018382:	4b51      	ldr	r3, [pc, #324]	; (80184c8 <_vfiprintf_r+0x214>)
 8018384:	429c      	cmp	r4, r3
 8018386:	d101      	bne.n	801838c <_vfiprintf_r+0xd8>
 8018388:	68b4      	ldr	r4, [r6, #8]
 801838a:	e7a3      	b.n	80182d4 <_vfiprintf_r+0x20>
 801838c:	4b4f      	ldr	r3, [pc, #316]	; (80184cc <_vfiprintf_r+0x218>)
 801838e:	429c      	cmp	r4, r3
 8018390:	bf08      	it	eq
 8018392:	68f4      	ldreq	r4, [r6, #12]
 8018394:	e79e      	b.n	80182d4 <_vfiprintf_r+0x20>
 8018396:	4621      	mov	r1, r4
 8018398:	4630      	mov	r0, r6
 801839a:	f7ff fb9b 	bl	8017ad4 <__swsetup_r>
 801839e:	2800      	cmp	r0, #0
 80183a0:	d09e      	beq.n	80182e0 <_vfiprintf_r+0x2c>
 80183a2:	f04f 30ff 	mov.w	r0, #4294967295
 80183a6:	b01d      	add	sp, #116	; 0x74
 80183a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80183ac:	2b25      	cmp	r3, #37	; 0x25
 80183ae:	d0a7      	beq.n	8018300 <_vfiprintf_r+0x4c>
 80183b0:	46a8      	mov	r8, r5
 80183b2:	e7a0      	b.n	80182f6 <_vfiprintf_r+0x42>
 80183b4:	4a43      	ldr	r2, [pc, #268]	; (80184c4 <_vfiprintf_r+0x210>)
 80183b6:	1a80      	subs	r0, r0, r2
 80183b8:	fa0b f000 	lsl.w	r0, fp, r0
 80183bc:	4318      	orrs	r0, r3
 80183be:	9004      	str	r0, [sp, #16]
 80183c0:	4645      	mov	r5, r8
 80183c2:	e7bb      	b.n	801833c <_vfiprintf_r+0x88>
 80183c4:	9a03      	ldr	r2, [sp, #12]
 80183c6:	1d11      	adds	r1, r2, #4
 80183c8:	6812      	ldr	r2, [r2, #0]
 80183ca:	9103      	str	r1, [sp, #12]
 80183cc:	2a00      	cmp	r2, #0
 80183ce:	db01      	blt.n	80183d4 <_vfiprintf_r+0x120>
 80183d0:	9207      	str	r2, [sp, #28]
 80183d2:	e004      	b.n	80183de <_vfiprintf_r+0x12a>
 80183d4:	4252      	negs	r2, r2
 80183d6:	f043 0302 	orr.w	r3, r3, #2
 80183da:	9207      	str	r2, [sp, #28]
 80183dc:	9304      	str	r3, [sp, #16]
 80183de:	f898 3000 	ldrb.w	r3, [r8]
 80183e2:	2b2e      	cmp	r3, #46	; 0x2e
 80183e4:	d110      	bne.n	8018408 <_vfiprintf_r+0x154>
 80183e6:	f898 3001 	ldrb.w	r3, [r8, #1]
 80183ea:	2b2a      	cmp	r3, #42	; 0x2a
 80183ec:	f108 0101 	add.w	r1, r8, #1
 80183f0:	d137      	bne.n	8018462 <_vfiprintf_r+0x1ae>
 80183f2:	9b03      	ldr	r3, [sp, #12]
 80183f4:	1d1a      	adds	r2, r3, #4
 80183f6:	681b      	ldr	r3, [r3, #0]
 80183f8:	9203      	str	r2, [sp, #12]
 80183fa:	2b00      	cmp	r3, #0
 80183fc:	bfb8      	it	lt
 80183fe:	f04f 33ff 	movlt.w	r3, #4294967295
 8018402:	f108 0802 	add.w	r8, r8, #2
 8018406:	9305      	str	r3, [sp, #20]
 8018408:	4d31      	ldr	r5, [pc, #196]	; (80184d0 <_vfiprintf_r+0x21c>)
 801840a:	f898 1000 	ldrb.w	r1, [r8]
 801840e:	2203      	movs	r2, #3
 8018410:	4628      	mov	r0, r5
 8018412:	f7e7 ff1d 	bl	8000250 <memchr>
 8018416:	b140      	cbz	r0, 801842a <_vfiprintf_r+0x176>
 8018418:	2340      	movs	r3, #64	; 0x40
 801841a:	1b40      	subs	r0, r0, r5
 801841c:	fa03 f000 	lsl.w	r0, r3, r0
 8018420:	9b04      	ldr	r3, [sp, #16]
 8018422:	4303      	orrs	r3, r0
 8018424:	9304      	str	r3, [sp, #16]
 8018426:	f108 0801 	add.w	r8, r8, #1
 801842a:	f898 1000 	ldrb.w	r1, [r8]
 801842e:	4829      	ldr	r0, [pc, #164]	; (80184d4 <_vfiprintf_r+0x220>)
 8018430:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018434:	2206      	movs	r2, #6
 8018436:	f108 0701 	add.w	r7, r8, #1
 801843a:	f7e7 ff09 	bl	8000250 <memchr>
 801843e:	2800      	cmp	r0, #0
 8018440:	d034      	beq.n	80184ac <_vfiprintf_r+0x1f8>
 8018442:	4b25      	ldr	r3, [pc, #148]	; (80184d8 <_vfiprintf_r+0x224>)
 8018444:	bb03      	cbnz	r3, 8018488 <_vfiprintf_r+0x1d4>
 8018446:	9b03      	ldr	r3, [sp, #12]
 8018448:	3307      	adds	r3, #7
 801844a:	f023 0307 	bic.w	r3, r3, #7
 801844e:	3308      	adds	r3, #8
 8018450:	9303      	str	r3, [sp, #12]
 8018452:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018454:	444b      	add	r3, r9
 8018456:	9309      	str	r3, [sp, #36]	; 0x24
 8018458:	e74c      	b.n	80182f4 <_vfiprintf_r+0x40>
 801845a:	fb00 3202 	mla	r2, r0, r2, r3
 801845e:	2101      	movs	r1, #1
 8018460:	e786      	b.n	8018370 <_vfiprintf_r+0xbc>
 8018462:	2300      	movs	r3, #0
 8018464:	9305      	str	r3, [sp, #20]
 8018466:	4618      	mov	r0, r3
 8018468:	250a      	movs	r5, #10
 801846a:	4688      	mov	r8, r1
 801846c:	3101      	adds	r1, #1
 801846e:	f898 2000 	ldrb.w	r2, [r8]
 8018472:	3a30      	subs	r2, #48	; 0x30
 8018474:	2a09      	cmp	r2, #9
 8018476:	d903      	bls.n	8018480 <_vfiprintf_r+0x1cc>
 8018478:	2b00      	cmp	r3, #0
 801847a:	d0c5      	beq.n	8018408 <_vfiprintf_r+0x154>
 801847c:	9005      	str	r0, [sp, #20]
 801847e:	e7c3      	b.n	8018408 <_vfiprintf_r+0x154>
 8018480:	fb05 2000 	mla	r0, r5, r0, r2
 8018484:	2301      	movs	r3, #1
 8018486:	e7f0      	b.n	801846a <_vfiprintf_r+0x1b6>
 8018488:	ab03      	add	r3, sp, #12
 801848a:	9300      	str	r3, [sp, #0]
 801848c:	4622      	mov	r2, r4
 801848e:	4b13      	ldr	r3, [pc, #76]	; (80184dc <_vfiprintf_r+0x228>)
 8018490:	a904      	add	r1, sp, #16
 8018492:	4630      	mov	r0, r6
 8018494:	f3af 8000 	nop.w
 8018498:	f1b0 3fff 	cmp.w	r0, #4294967295
 801849c:	4681      	mov	r9, r0
 801849e:	d1d8      	bne.n	8018452 <_vfiprintf_r+0x19e>
 80184a0:	89a3      	ldrh	r3, [r4, #12]
 80184a2:	065b      	lsls	r3, r3, #25
 80184a4:	f53f af7d 	bmi.w	80183a2 <_vfiprintf_r+0xee>
 80184a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80184aa:	e77c      	b.n	80183a6 <_vfiprintf_r+0xf2>
 80184ac:	ab03      	add	r3, sp, #12
 80184ae:	9300      	str	r3, [sp, #0]
 80184b0:	4622      	mov	r2, r4
 80184b2:	4b0a      	ldr	r3, [pc, #40]	; (80184dc <_vfiprintf_r+0x228>)
 80184b4:	a904      	add	r1, sp, #16
 80184b6:	4630      	mov	r0, r6
 80184b8:	f000 f888 	bl	80185cc <_printf_i>
 80184bc:	e7ec      	b.n	8018498 <_vfiprintf_r+0x1e4>
 80184be:	bf00      	nop
 80184c0:	0801bd24 	.word	0x0801bd24
 80184c4:	0801bd68 	.word	0x0801bd68
 80184c8:	0801bd44 	.word	0x0801bd44
 80184cc:	0801bd04 	.word	0x0801bd04
 80184d0:	0801bd6e 	.word	0x0801bd6e
 80184d4:	0801bd72 	.word	0x0801bd72
 80184d8:	00000000 	.word	0x00000000
 80184dc:	08018291 	.word	0x08018291

080184e0 <_printf_common>:
 80184e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80184e4:	4691      	mov	r9, r2
 80184e6:	461f      	mov	r7, r3
 80184e8:	688a      	ldr	r2, [r1, #8]
 80184ea:	690b      	ldr	r3, [r1, #16]
 80184ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80184f0:	4293      	cmp	r3, r2
 80184f2:	bfb8      	it	lt
 80184f4:	4613      	movlt	r3, r2
 80184f6:	f8c9 3000 	str.w	r3, [r9]
 80184fa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80184fe:	4606      	mov	r6, r0
 8018500:	460c      	mov	r4, r1
 8018502:	b112      	cbz	r2, 801850a <_printf_common+0x2a>
 8018504:	3301      	adds	r3, #1
 8018506:	f8c9 3000 	str.w	r3, [r9]
 801850a:	6823      	ldr	r3, [r4, #0]
 801850c:	0699      	lsls	r1, r3, #26
 801850e:	bf42      	ittt	mi
 8018510:	f8d9 3000 	ldrmi.w	r3, [r9]
 8018514:	3302      	addmi	r3, #2
 8018516:	f8c9 3000 	strmi.w	r3, [r9]
 801851a:	6825      	ldr	r5, [r4, #0]
 801851c:	f015 0506 	ands.w	r5, r5, #6
 8018520:	d107      	bne.n	8018532 <_printf_common+0x52>
 8018522:	f104 0a19 	add.w	sl, r4, #25
 8018526:	68e3      	ldr	r3, [r4, #12]
 8018528:	f8d9 2000 	ldr.w	r2, [r9]
 801852c:	1a9b      	subs	r3, r3, r2
 801852e:	429d      	cmp	r5, r3
 8018530:	db29      	blt.n	8018586 <_printf_common+0xa6>
 8018532:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8018536:	6822      	ldr	r2, [r4, #0]
 8018538:	3300      	adds	r3, #0
 801853a:	bf18      	it	ne
 801853c:	2301      	movne	r3, #1
 801853e:	0692      	lsls	r2, r2, #26
 8018540:	d42e      	bmi.n	80185a0 <_printf_common+0xc0>
 8018542:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8018546:	4639      	mov	r1, r7
 8018548:	4630      	mov	r0, r6
 801854a:	47c0      	blx	r8
 801854c:	3001      	adds	r0, #1
 801854e:	d021      	beq.n	8018594 <_printf_common+0xb4>
 8018550:	6823      	ldr	r3, [r4, #0]
 8018552:	68e5      	ldr	r5, [r4, #12]
 8018554:	f8d9 2000 	ldr.w	r2, [r9]
 8018558:	f003 0306 	and.w	r3, r3, #6
 801855c:	2b04      	cmp	r3, #4
 801855e:	bf08      	it	eq
 8018560:	1aad      	subeq	r5, r5, r2
 8018562:	68a3      	ldr	r3, [r4, #8]
 8018564:	6922      	ldr	r2, [r4, #16]
 8018566:	bf0c      	ite	eq
 8018568:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801856c:	2500      	movne	r5, #0
 801856e:	4293      	cmp	r3, r2
 8018570:	bfc4      	itt	gt
 8018572:	1a9b      	subgt	r3, r3, r2
 8018574:	18ed      	addgt	r5, r5, r3
 8018576:	f04f 0900 	mov.w	r9, #0
 801857a:	341a      	adds	r4, #26
 801857c:	454d      	cmp	r5, r9
 801857e:	d11b      	bne.n	80185b8 <_printf_common+0xd8>
 8018580:	2000      	movs	r0, #0
 8018582:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018586:	2301      	movs	r3, #1
 8018588:	4652      	mov	r2, sl
 801858a:	4639      	mov	r1, r7
 801858c:	4630      	mov	r0, r6
 801858e:	47c0      	blx	r8
 8018590:	3001      	adds	r0, #1
 8018592:	d103      	bne.n	801859c <_printf_common+0xbc>
 8018594:	f04f 30ff 	mov.w	r0, #4294967295
 8018598:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801859c:	3501      	adds	r5, #1
 801859e:	e7c2      	b.n	8018526 <_printf_common+0x46>
 80185a0:	18e1      	adds	r1, r4, r3
 80185a2:	1c5a      	adds	r2, r3, #1
 80185a4:	2030      	movs	r0, #48	; 0x30
 80185a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80185aa:	4422      	add	r2, r4
 80185ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80185b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80185b4:	3302      	adds	r3, #2
 80185b6:	e7c4      	b.n	8018542 <_printf_common+0x62>
 80185b8:	2301      	movs	r3, #1
 80185ba:	4622      	mov	r2, r4
 80185bc:	4639      	mov	r1, r7
 80185be:	4630      	mov	r0, r6
 80185c0:	47c0      	blx	r8
 80185c2:	3001      	adds	r0, #1
 80185c4:	d0e6      	beq.n	8018594 <_printf_common+0xb4>
 80185c6:	f109 0901 	add.w	r9, r9, #1
 80185ca:	e7d7      	b.n	801857c <_printf_common+0x9c>

080185cc <_printf_i>:
 80185cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80185d0:	4617      	mov	r7, r2
 80185d2:	7e0a      	ldrb	r2, [r1, #24]
 80185d4:	b085      	sub	sp, #20
 80185d6:	2a6e      	cmp	r2, #110	; 0x6e
 80185d8:	4698      	mov	r8, r3
 80185da:	4606      	mov	r6, r0
 80185dc:	460c      	mov	r4, r1
 80185de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80185e0:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80185e4:	f000 80bc 	beq.w	8018760 <_printf_i+0x194>
 80185e8:	d81a      	bhi.n	8018620 <_printf_i+0x54>
 80185ea:	2a63      	cmp	r2, #99	; 0x63
 80185ec:	d02e      	beq.n	801864c <_printf_i+0x80>
 80185ee:	d80a      	bhi.n	8018606 <_printf_i+0x3a>
 80185f0:	2a00      	cmp	r2, #0
 80185f2:	f000 80c8 	beq.w	8018786 <_printf_i+0x1ba>
 80185f6:	2a58      	cmp	r2, #88	; 0x58
 80185f8:	f000 808a 	beq.w	8018710 <_printf_i+0x144>
 80185fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018600:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8018604:	e02a      	b.n	801865c <_printf_i+0x90>
 8018606:	2a64      	cmp	r2, #100	; 0x64
 8018608:	d001      	beq.n	801860e <_printf_i+0x42>
 801860a:	2a69      	cmp	r2, #105	; 0x69
 801860c:	d1f6      	bne.n	80185fc <_printf_i+0x30>
 801860e:	6821      	ldr	r1, [r4, #0]
 8018610:	681a      	ldr	r2, [r3, #0]
 8018612:	f011 0f80 	tst.w	r1, #128	; 0x80
 8018616:	d023      	beq.n	8018660 <_printf_i+0x94>
 8018618:	1d11      	adds	r1, r2, #4
 801861a:	6019      	str	r1, [r3, #0]
 801861c:	6813      	ldr	r3, [r2, #0]
 801861e:	e027      	b.n	8018670 <_printf_i+0xa4>
 8018620:	2a73      	cmp	r2, #115	; 0x73
 8018622:	f000 80b4 	beq.w	801878e <_printf_i+0x1c2>
 8018626:	d808      	bhi.n	801863a <_printf_i+0x6e>
 8018628:	2a6f      	cmp	r2, #111	; 0x6f
 801862a:	d02a      	beq.n	8018682 <_printf_i+0xb6>
 801862c:	2a70      	cmp	r2, #112	; 0x70
 801862e:	d1e5      	bne.n	80185fc <_printf_i+0x30>
 8018630:	680a      	ldr	r2, [r1, #0]
 8018632:	f042 0220 	orr.w	r2, r2, #32
 8018636:	600a      	str	r2, [r1, #0]
 8018638:	e003      	b.n	8018642 <_printf_i+0x76>
 801863a:	2a75      	cmp	r2, #117	; 0x75
 801863c:	d021      	beq.n	8018682 <_printf_i+0xb6>
 801863e:	2a78      	cmp	r2, #120	; 0x78
 8018640:	d1dc      	bne.n	80185fc <_printf_i+0x30>
 8018642:	2278      	movs	r2, #120	; 0x78
 8018644:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8018648:	496e      	ldr	r1, [pc, #440]	; (8018804 <_printf_i+0x238>)
 801864a:	e064      	b.n	8018716 <_printf_i+0x14a>
 801864c:	681a      	ldr	r2, [r3, #0]
 801864e:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8018652:	1d11      	adds	r1, r2, #4
 8018654:	6019      	str	r1, [r3, #0]
 8018656:	6813      	ldr	r3, [r2, #0]
 8018658:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801865c:	2301      	movs	r3, #1
 801865e:	e0a3      	b.n	80187a8 <_printf_i+0x1dc>
 8018660:	f011 0f40 	tst.w	r1, #64	; 0x40
 8018664:	f102 0104 	add.w	r1, r2, #4
 8018668:	6019      	str	r1, [r3, #0]
 801866a:	d0d7      	beq.n	801861c <_printf_i+0x50>
 801866c:	f9b2 3000 	ldrsh.w	r3, [r2]
 8018670:	2b00      	cmp	r3, #0
 8018672:	da03      	bge.n	801867c <_printf_i+0xb0>
 8018674:	222d      	movs	r2, #45	; 0x2d
 8018676:	425b      	negs	r3, r3
 8018678:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801867c:	4962      	ldr	r1, [pc, #392]	; (8018808 <_printf_i+0x23c>)
 801867e:	220a      	movs	r2, #10
 8018680:	e017      	b.n	80186b2 <_printf_i+0xe6>
 8018682:	6820      	ldr	r0, [r4, #0]
 8018684:	6819      	ldr	r1, [r3, #0]
 8018686:	f010 0f80 	tst.w	r0, #128	; 0x80
 801868a:	d003      	beq.n	8018694 <_printf_i+0xc8>
 801868c:	1d08      	adds	r0, r1, #4
 801868e:	6018      	str	r0, [r3, #0]
 8018690:	680b      	ldr	r3, [r1, #0]
 8018692:	e006      	b.n	80186a2 <_printf_i+0xd6>
 8018694:	f010 0f40 	tst.w	r0, #64	; 0x40
 8018698:	f101 0004 	add.w	r0, r1, #4
 801869c:	6018      	str	r0, [r3, #0]
 801869e:	d0f7      	beq.n	8018690 <_printf_i+0xc4>
 80186a0:	880b      	ldrh	r3, [r1, #0]
 80186a2:	4959      	ldr	r1, [pc, #356]	; (8018808 <_printf_i+0x23c>)
 80186a4:	2a6f      	cmp	r2, #111	; 0x6f
 80186a6:	bf14      	ite	ne
 80186a8:	220a      	movne	r2, #10
 80186aa:	2208      	moveq	r2, #8
 80186ac:	2000      	movs	r0, #0
 80186ae:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80186b2:	6865      	ldr	r5, [r4, #4]
 80186b4:	60a5      	str	r5, [r4, #8]
 80186b6:	2d00      	cmp	r5, #0
 80186b8:	f2c0 809c 	blt.w	80187f4 <_printf_i+0x228>
 80186bc:	6820      	ldr	r0, [r4, #0]
 80186be:	f020 0004 	bic.w	r0, r0, #4
 80186c2:	6020      	str	r0, [r4, #0]
 80186c4:	2b00      	cmp	r3, #0
 80186c6:	d13f      	bne.n	8018748 <_printf_i+0x17c>
 80186c8:	2d00      	cmp	r5, #0
 80186ca:	f040 8095 	bne.w	80187f8 <_printf_i+0x22c>
 80186ce:	4675      	mov	r5, lr
 80186d0:	2a08      	cmp	r2, #8
 80186d2:	d10b      	bne.n	80186ec <_printf_i+0x120>
 80186d4:	6823      	ldr	r3, [r4, #0]
 80186d6:	07da      	lsls	r2, r3, #31
 80186d8:	d508      	bpl.n	80186ec <_printf_i+0x120>
 80186da:	6923      	ldr	r3, [r4, #16]
 80186dc:	6862      	ldr	r2, [r4, #4]
 80186de:	429a      	cmp	r2, r3
 80186e0:	bfde      	ittt	le
 80186e2:	2330      	movle	r3, #48	; 0x30
 80186e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80186e8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80186ec:	ebae 0305 	sub.w	r3, lr, r5
 80186f0:	6123      	str	r3, [r4, #16]
 80186f2:	f8cd 8000 	str.w	r8, [sp]
 80186f6:	463b      	mov	r3, r7
 80186f8:	aa03      	add	r2, sp, #12
 80186fa:	4621      	mov	r1, r4
 80186fc:	4630      	mov	r0, r6
 80186fe:	f7ff feef 	bl	80184e0 <_printf_common>
 8018702:	3001      	adds	r0, #1
 8018704:	d155      	bne.n	80187b2 <_printf_i+0x1e6>
 8018706:	f04f 30ff 	mov.w	r0, #4294967295
 801870a:	b005      	add	sp, #20
 801870c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018710:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8018714:	493c      	ldr	r1, [pc, #240]	; (8018808 <_printf_i+0x23c>)
 8018716:	6822      	ldr	r2, [r4, #0]
 8018718:	6818      	ldr	r0, [r3, #0]
 801871a:	f012 0f80 	tst.w	r2, #128	; 0x80
 801871e:	f100 0504 	add.w	r5, r0, #4
 8018722:	601d      	str	r5, [r3, #0]
 8018724:	d001      	beq.n	801872a <_printf_i+0x15e>
 8018726:	6803      	ldr	r3, [r0, #0]
 8018728:	e002      	b.n	8018730 <_printf_i+0x164>
 801872a:	0655      	lsls	r5, r2, #25
 801872c:	d5fb      	bpl.n	8018726 <_printf_i+0x15a>
 801872e:	8803      	ldrh	r3, [r0, #0]
 8018730:	07d0      	lsls	r0, r2, #31
 8018732:	bf44      	itt	mi
 8018734:	f042 0220 	orrmi.w	r2, r2, #32
 8018738:	6022      	strmi	r2, [r4, #0]
 801873a:	b91b      	cbnz	r3, 8018744 <_printf_i+0x178>
 801873c:	6822      	ldr	r2, [r4, #0]
 801873e:	f022 0220 	bic.w	r2, r2, #32
 8018742:	6022      	str	r2, [r4, #0]
 8018744:	2210      	movs	r2, #16
 8018746:	e7b1      	b.n	80186ac <_printf_i+0xe0>
 8018748:	4675      	mov	r5, lr
 801874a:	fbb3 f0f2 	udiv	r0, r3, r2
 801874e:	fb02 3310 	mls	r3, r2, r0, r3
 8018752:	5ccb      	ldrb	r3, [r1, r3]
 8018754:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8018758:	4603      	mov	r3, r0
 801875a:	2800      	cmp	r0, #0
 801875c:	d1f5      	bne.n	801874a <_printf_i+0x17e>
 801875e:	e7b7      	b.n	80186d0 <_printf_i+0x104>
 8018760:	6808      	ldr	r0, [r1, #0]
 8018762:	681a      	ldr	r2, [r3, #0]
 8018764:	6949      	ldr	r1, [r1, #20]
 8018766:	f010 0f80 	tst.w	r0, #128	; 0x80
 801876a:	d004      	beq.n	8018776 <_printf_i+0x1aa>
 801876c:	1d10      	adds	r0, r2, #4
 801876e:	6018      	str	r0, [r3, #0]
 8018770:	6813      	ldr	r3, [r2, #0]
 8018772:	6019      	str	r1, [r3, #0]
 8018774:	e007      	b.n	8018786 <_printf_i+0x1ba>
 8018776:	f010 0f40 	tst.w	r0, #64	; 0x40
 801877a:	f102 0004 	add.w	r0, r2, #4
 801877e:	6018      	str	r0, [r3, #0]
 8018780:	6813      	ldr	r3, [r2, #0]
 8018782:	d0f6      	beq.n	8018772 <_printf_i+0x1a6>
 8018784:	8019      	strh	r1, [r3, #0]
 8018786:	2300      	movs	r3, #0
 8018788:	6123      	str	r3, [r4, #16]
 801878a:	4675      	mov	r5, lr
 801878c:	e7b1      	b.n	80186f2 <_printf_i+0x126>
 801878e:	681a      	ldr	r2, [r3, #0]
 8018790:	1d11      	adds	r1, r2, #4
 8018792:	6019      	str	r1, [r3, #0]
 8018794:	6815      	ldr	r5, [r2, #0]
 8018796:	6862      	ldr	r2, [r4, #4]
 8018798:	2100      	movs	r1, #0
 801879a:	4628      	mov	r0, r5
 801879c:	f7e7 fd58 	bl	8000250 <memchr>
 80187a0:	b108      	cbz	r0, 80187a6 <_printf_i+0x1da>
 80187a2:	1b40      	subs	r0, r0, r5
 80187a4:	6060      	str	r0, [r4, #4]
 80187a6:	6863      	ldr	r3, [r4, #4]
 80187a8:	6123      	str	r3, [r4, #16]
 80187aa:	2300      	movs	r3, #0
 80187ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80187b0:	e79f      	b.n	80186f2 <_printf_i+0x126>
 80187b2:	6923      	ldr	r3, [r4, #16]
 80187b4:	462a      	mov	r2, r5
 80187b6:	4639      	mov	r1, r7
 80187b8:	4630      	mov	r0, r6
 80187ba:	47c0      	blx	r8
 80187bc:	3001      	adds	r0, #1
 80187be:	d0a2      	beq.n	8018706 <_printf_i+0x13a>
 80187c0:	6823      	ldr	r3, [r4, #0]
 80187c2:	079b      	lsls	r3, r3, #30
 80187c4:	d507      	bpl.n	80187d6 <_printf_i+0x20a>
 80187c6:	2500      	movs	r5, #0
 80187c8:	f104 0919 	add.w	r9, r4, #25
 80187cc:	68e3      	ldr	r3, [r4, #12]
 80187ce:	9a03      	ldr	r2, [sp, #12]
 80187d0:	1a9b      	subs	r3, r3, r2
 80187d2:	429d      	cmp	r5, r3
 80187d4:	db05      	blt.n	80187e2 <_printf_i+0x216>
 80187d6:	68e0      	ldr	r0, [r4, #12]
 80187d8:	9b03      	ldr	r3, [sp, #12]
 80187da:	4298      	cmp	r0, r3
 80187dc:	bfb8      	it	lt
 80187de:	4618      	movlt	r0, r3
 80187e0:	e793      	b.n	801870a <_printf_i+0x13e>
 80187e2:	2301      	movs	r3, #1
 80187e4:	464a      	mov	r2, r9
 80187e6:	4639      	mov	r1, r7
 80187e8:	4630      	mov	r0, r6
 80187ea:	47c0      	blx	r8
 80187ec:	3001      	adds	r0, #1
 80187ee:	d08a      	beq.n	8018706 <_printf_i+0x13a>
 80187f0:	3501      	adds	r5, #1
 80187f2:	e7eb      	b.n	80187cc <_printf_i+0x200>
 80187f4:	2b00      	cmp	r3, #0
 80187f6:	d1a7      	bne.n	8018748 <_printf_i+0x17c>
 80187f8:	780b      	ldrb	r3, [r1, #0]
 80187fa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80187fe:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018802:	e765      	b.n	80186d0 <_printf_i+0x104>
 8018804:	0801bd8a 	.word	0x0801bd8a
 8018808:	0801bd79 	.word	0x0801bd79

0801880c <__sread>:
 801880c:	b510      	push	{r4, lr}
 801880e:	460c      	mov	r4, r1
 8018810:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018814:	f000 f89e 	bl	8018954 <_read_r>
 8018818:	2800      	cmp	r0, #0
 801881a:	bfab      	itete	ge
 801881c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801881e:	89a3      	ldrhlt	r3, [r4, #12]
 8018820:	181b      	addge	r3, r3, r0
 8018822:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8018826:	bfac      	ite	ge
 8018828:	6563      	strge	r3, [r4, #84]	; 0x54
 801882a:	81a3      	strhlt	r3, [r4, #12]
 801882c:	bd10      	pop	{r4, pc}

0801882e <__swrite>:
 801882e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018832:	461f      	mov	r7, r3
 8018834:	898b      	ldrh	r3, [r1, #12]
 8018836:	05db      	lsls	r3, r3, #23
 8018838:	4605      	mov	r5, r0
 801883a:	460c      	mov	r4, r1
 801883c:	4616      	mov	r6, r2
 801883e:	d505      	bpl.n	801884c <__swrite+0x1e>
 8018840:	2302      	movs	r3, #2
 8018842:	2200      	movs	r2, #0
 8018844:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018848:	f000 f868 	bl	801891c <_lseek_r>
 801884c:	89a3      	ldrh	r3, [r4, #12]
 801884e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018852:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8018856:	81a3      	strh	r3, [r4, #12]
 8018858:	4632      	mov	r2, r6
 801885a:	463b      	mov	r3, r7
 801885c:	4628      	mov	r0, r5
 801885e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018862:	f000 b817 	b.w	8018894 <_write_r>

08018866 <__sseek>:
 8018866:	b510      	push	{r4, lr}
 8018868:	460c      	mov	r4, r1
 801886a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801886e:	f000 f855 	bl	801891c <_lseek_r>
 8018872:	1c43      	adds	r3, r0, #1
 8018874:	89a3      	ldrh	r3, [r4, #12]
 8018876:	bf15      	itete	ne
 8018878:	6560      	strne	r0, [r4, #84]	; 0x54
 801887a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801887e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8018882:	81a3      	strheq	r3, [r4, #12]
 8018884:	bf18      	it	ne
 8018886:	81a3      	strhne	r3, [r4, #12]
 8018888:	bd10      	pop	{r4, pc}

0801888a <__sclose>:
 801888a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801888e:	f000 b813 	b.w	80188b8 <_close_r>
	...

08018894 <_write_r>:
 8018894:	b538      	push	{r3, r4, r5, lr}
 8018896:	4c07      	ldr	r4, [pc, #28]	; (80188b4 <_write_r+0x20>)
 8018898:	4605      	mov	r5, r0
 801889a:	4608      	mov	r0, r1
 801889c:	4611      	mov	r1, r2
 801889e:	2200      	movs	r2, #0
 80188a0:	6022      	str	r2, [r4, #0]
 80188a2:	461a      	mov	r2, r3
 80188a4:	f7fe fd3f 	bl	8017326 <_write>
 80188a8:	1c43      	adds	r3, r0, #1
 80188aa:	d102      	bne.n	80188b2 <_write_r+0x1e>
 80188ac:	6823      	ldr	r3, [r4, #0]
 80188ae:	b103      	cbz	r3, 80188b2 <_write_r+0x1e>
 80188b0:	602b      	str	r3, [r5, #0]
 80188b2:	bd38      	pop	{r3, r4, r5, pc}
 80188b4:	20009640 	.word	0x20009640

080188b8 <_close_r>:
 80188b8:	b538      	push	{r3, r4, r5, lr}
 80188ba:	4c06      	ldr	r4, [pc, #24]	; (80188d4 <_close_r+0x1c>)
 80188bc:	2300      	movs	r3, #0
 80188be:	4605      	mov	r5, r0
 80188c0:	4608      	mov	r0, r1
 80188c2:	6023      	str	r3, [r4, #0]
 80188c4:	f7fe fd7a 	bl	80173bc <_close>
 80188c8:	1c43      	adds	r3, r0, #1
 80188ca:	d102      	bne.n	80188d2 <_close_r+0x1a>
 80188cc:	6823      	ldr	r3, [r4, #0]
 80188ce:	b103      	cbz	r3, 80188d2 <_close_r+0x1a>
 80188d0:	602b      	str	r3, [r5, #0]
 80188d2:	bd38      	pop	{r3, r4, r5, pc}
 80188d4:	20009640 	.word	0x20009640

080188d8 <_fstat_r>:
 80188d8:	b538      	push	{r3, r4, r5, lr}
 80188da:	4c07      	ldr	r4, [pc, #28]	; (80188f8 <_fstat_r+0x20>)
 80188dc:	2300      	movs	r3, #0
 80188de:	4605      	mov	r5, r0
 80188e0:	4608      	mov	r0, r1
 80188e2:	4611      	mov	r1, r2
 80188e4:	6023      	str	r3, [r4, #0]
 80188e6:	f7fe fd75 	bl	80173d4 <_fstat>
 80188ea:	1c43      	adds	r3, r0, #1
 80188ec:	d102      	bne.n	80188f4 <_fstat_r+0x1c>
 80188ee:	6823      	ldr	r3, [r4, #0]
 80188f0:	b103      	cbz	r3, 80188f4 <_fstat_r+0x1c>
 80188f2:	602b      	str	r3, [r5, #0]
 80188f4:	bd38      	pop	{r3, r4, r5, pc}
 80188f6:	bf00      	nop
 80188f8:	20009640 	.word	0x20009640

080188fc <_isatty_r>:
 80188fc:	b538      	push	{r3, r4, r5, lr}
 80188fe:	4c06      	ldr	r4, [pc, #24]	; (8018918 <_isatty_r+0x1c>)
 8018900:	2300      	movs	r3, #0
 8018902:	4605      	mov	r5, r0
 8018904:	4608      	mov	r0, r1
 8018906:	6023      	str	r3, [r4, #0]
 8018908:	f7fe fd74 	bl	80173f4 <_isatty>
 801890c:	1c43      	adds	r3, r0, #1
 801890e:	d102      	bne.n	8018916 <_isatty_r+0x1a>
 8018910:	6823      	ldr	r3, [r4, #0]
 8018912:	b103      	cbz	r3, 8018916 <_isatty_r+0x1a>
 8018914:	602b      	str	r3, [r5, #0]
 8018916:	bd38      	pop	{r3, r4, r5, pc}
 8018918:	20009640 	.word	0x20009640

0801891c <_lseek_r>:
 801891c:	b538      	push	{r3, r4, r5, lr}
 801891e:	4c07      	ldr	r4, [pc, #28]	; (801893c <_lseek_r+0x20>)
 8018920:	4605      	mov	r5, r0
 8018922:	4608      	mov	r0, r1
 8018924:	4611      	mov	r1, r2
 8018926:	2200      	movs	r2, #0
 8018928:	6022      	str	r2, [r4, #0]
 801892a:	461a      	mov	r2, r3
 801892c:	f7fe fd6d 	bl	801740a <_lseek>
 8018930:	1c43      	adds	r3, r0, #1
 8018932:	d102      	bne.n	801893a <_lseek_r+0x1e>
 8018934:	6823      	ldr	r3, [r4, #0]
 8018936:	b103      	cbz	r3, 801893a <_lseek_r+0x1e>
 8018938:	602b      	str	r3, [r5, #0]
 801893a:	bd38      	pop	{r3, r4, r5, pc}
 801893c:	20009640 	.word	0x20009640

08018940 <_malloc_usable_size_r>:
 8018940:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8018944:	2800      	cmp	r0, #0
 8018946:	f1a0 0004 	sub.w	r0, r0, #4
 801894a:	bfbc      	itt	lt
 801894c:	580b      	ldrlt	r3, [r1, r0]
 801894e:	18c0      	addlt	r0, r0, r3
 8018950:	4770      	bx	lr
	...

08018954 <_read_r>:
 8018954:	b538      	push	{r3, r4, r5, lr}
 8018956:	4c07      	ldr	r4, [pc, #28]	; (8018974 <_read_r+0x20>)
 8018958:	4605      	mov	r5, r0
 801895a:	4608      	mov	r0, r1
 801895c:	4611      	mov	r1, r2
 801895e:	2200      	movs	r2, #0
 8018960:	6022      	str	r2, [r4, #0]
 8018962:	461a      	mov	r2, r3
 8018964:	f7fe fcc2 	bl	80172ec <_read>
 8018968:	1c43      	adds	r3, r0, #1
 801896a:	d102      	bne.n	8018972 <_read_r+0x1e>
 801896c:	6823      	ldr	r3, [r4, #0]
 801896e:	b103      	cbz	r3, 8018972 <_read_r+0x1e>
 8018970:	602b      	str	r3, [r5, #0]
 8018972:	bd38      	pop	{r3, r4, r5, pc}
 8018974:	20009640 	.word	0x20009640

08018978 <_init>:
 8018978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801897a:	bf00      	nop
 801897c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801897e:	bc08      	pop	{r3}
 8018980:	469e      	mov	lr, r3
 8018982:	4770      	bx	lr

08018984 <_fini>:
 8018984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018986:	bf00      	nop
 8018988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801898a:	bc08      	pop	{r3}
 801898c:	469e      	mov	lr, r3
 801898e:	4770      	bx	lr
