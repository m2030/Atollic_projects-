
f407_nrf_irq.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000237c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08002504  08002504  00012504  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08002538  08002538  00012538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08002540  08002540  00012540  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08002544  08002544  00012544  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  08002548  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
  8 .bss          00000134  2000000c  2000000c  0002000c  2**2
                  ALLOC
  9 ._user_heap_stack 00000400  20000140  20000140  0002000c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 11 .debug_info   00011aab  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00002196  00000000  00000000  00031ae7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000081d1  00000000  00000000  00033c7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b58  00000000  00000000  0003be50  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e20  00000000  00000000  0003c9a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00005703  00000000  00000000  0003d7c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00004dd4  00000000  00000000  00042ecb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  00047c9f  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00002414  00000000  00000000  00047d1c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080024ec 	.word	0x080024ec

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080024ec 	.word	0x080024ec

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b97a 	b.w	80004e4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	468c      	mov	ip, r1
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	9e08      	ldr	r6, [sp, #32]
 8000214:	2b00      	cmp	r3, #0
 8000216:	d151      	bne.n	80002bc <__udivmoddi4+0xb4>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d96d      	bls.n	80002fa <__udivmoddi4+0xf2>
 800021e:	fab2 fe82 	clz	lr, r2
 8000222:	f1be 0f00 	cmp.w	lr, #0
 8000226:	d00b      	beq.n	8000240 <__udivmoddi4+0x38>
 8000228:	f1ce 0c20 	rsb	ip, lr, #32
 800022c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000230:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000234:	fa02 f70e 	lsl.w	r7, r2, lr
 8000238:	ea4c 0c05 	orr.w	ip, ip, r5
 800023c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000240:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000244:	0c25      	lsrs	r5, r4, #16
 8000246:	fbbc f8fa 	udiv	r8, ip, sl
 800024a:	fa1f f987 	uxth.w	r9, r7
 800024e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000252:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000256:	fb08 f309 	mul.w	r3, r8, r9
 800025a:	42ab      	cmp	r3, r5
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x6c>
 800025e:	19ed      	adds	r5, r5, r7
 8000260:	f108 32ff 	add.w	r2, r8, #4294967295
 8000264:	f080 8123 	bcs.w	80004ae <__udivmoddi4+0x2a6>
 8000268:	42ab      	cmp	r3, r5
 800026a:	f240 8120 	bls.w	80004ae <__udivmoddi4+0x2a6>
 800026e:	f1a8 0802 	sub.w	r8, r8, #2
 8000272:	443d      	add	r5, r7
 8000274:	1aed      	subs	r5, r5, r3
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb5 f0fa 	udiv	r0, r5, sl
 800027c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000280:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000284:	fb00 f909 	mul.w	r9, r0, r9
 8000288:	45a1      	cmp	r9, r4
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x98>
 800028c:	19e4      	adds	r4, r4, r7
 800028e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000292:	f080 810a 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 8000296:	45a1      	cmp	r9, r4
 8000298:	f240 8107 	bls.w	80004aa <__udivmoddi4+0x2a2>
 800029c:	3802      	subs	r0, #2
 800029e:	443c      	add	r4, r7
 80002a0:	eba4 0409 	sub.w	r4, r4, r9
 80002a4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002a8:	2100      	movs	r1, #0
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	d061      	beq.n	8000372 <__udivmoddi4+0x16a>
 80002ae:	fa24 f40e 	lsr.w	r4, r4, lr
 80002b2:	2300      	movs	r3, #0
 80002b4:	6034      	str	r4, [r6, #0]
 80002b6:	6073      	str	r3, [r6, #4]
 80002b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002bc:	428b      	cmp	r3, r1
 80002be:	d907      	bls.n	80002d0 <__udivmoddi4+0xc8>
 80002c0:	2e00      	cmp	r6, #0
 80002c2:	d054      	beq.n	800036e <__udivmoddi4+0x166>
 80002c4:	2100      	movs	r1, #0
 80002c6:	e886 0021 	stmia.w	r6, {r0, r5}
 80002ca:	4608      	mov	r0, r1
 80002cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d0:	fab3 f183 	clz	r1, r3
 80002d4:	2900      	cmp	r1, #0
 80002d6:	f040 808e 	bne.w	80003f6 <__udivmoddi4+0x1ee>
 80002da:	42ab      	cmp	r3, r5
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xdc>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80fa 	bhi.w	80004d8 <__udivmoddi4+0x2d0>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb65 0503 	sbc.w	r5, r5, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	46ac      	mov	ip, r5
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	d03f      	beq.n	8000372 <__udivmoddi4+0x16a>
 80002f2:	e886 1010 	stmia.w	r6, {r4, ip}
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	b912      	cbnz	r2, 8000302 <__udivmoddi4+0xfa>
 80002fc:	2701      	movs	r7, #1
 80002fe:	fbb7 f7f2 	udiv	r7, r7, r2
 8000302:	fab7 fe87 	clz	lr, r7
 8000306:	f1be 0f00 	cmp.w	lr, #0
 800030a:	d134      	bne.n	8000376 <__udivmoddi4+0x16e>
 800030c:	1beb      	subs	r3, r5, r7
 800030e:	0c3a      	lsrs	r2, r7, #16
 8000310:	fa1f fc87 	uxth.w	ip, r7
 8000314:	2101      	movs	r1, #1
 8000316:	fbb3 f8f2 	udiv	r8, r3, r2
 800031a:	0c25      	lsrs	r5, r4, #16
 800031c:	fb02 3318 	mls	r3, r2, r8, r3
 8000320:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000324:	fb0c f308 	mul.w	r3, ip, r8
 8000328:	42ab      	cmp	r3, r5
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x134>
 800032c:	19ed      	adds	r5, r5, r7
 800032e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x132>
 8000334:	42ab      	cmp	r3, r5
 8000336:	f200 80d1 	bhi.w	80004dc <__udivmoddi4+0x2d4>
 800033a:	4680      	mov	r8, r0
 800033c:	1aed      	subs	r5, r5, r3
 800033e:	b2a3      	uxth	r3, r4
 8000340:	fbb5 f0f2 	udiv	r0, r5, r2
 8000344:	fb02 5510 	mls	r5, r2, r0, r5
 8000348:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800034c:	fb0c fc00 	mul.w	ip, ip, r0
 8000350:	45a4      	cmp	ip, r4
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x15c>
 8000354:	19e4      	adds	r4, r4, r7
 8000356:	f100 33ff 	add.w	r3, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x15a>
 800035c:	45a4      	cmp	ip, r4
 800035e:	f200 80b8 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 8000362:	4618      	mov	r0, r3
 8000364:	eba4 040c 	sub.w	r4, r4, ip
 8000368:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800036c:	e79d      	b.n	80002aa <__udivmoddi4+0xa2>
 800036e:	4631      	mov	r1, r6
 8000370:	4630      	mov	r0, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	f1ce 0420 	rsb	r4, lr, #32
 800037a:	fa05 f30e 	lsl.w	r3, r5, lr
 800037e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000382:	fa20 f804 	lsr.w	r8, r0, r4
 8000386:	0c3a      	lsrs	r2, r7, #16
 8000388:	fa25 f404 	lsr.w	r4, r5, r4
 800038c:	ea48 0803 	orr.w	r8, r8, r3
 8000390:	fbb4 f1f2 	udiv	r1, r4, r2
 8000394:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000398:	fb02 4411 	mls	r4, r2, r1, r4
 800039c:	fa1f fc87 	uxth.w	ip, r7
 80003a0:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003a4:	fb01 f30c 	mul.w	r3, r1, ip
 80003a8:	42ab      	cmp	r3, r5
 80003aa:	fa00 f40e 	lsl.w	r4, r0, lr
 80003ae:	d909      	bls.n	80003c4 <__udivmoddi4+0x1bc>
 80003b0:	19ed      	adds	r5, r5, r7
 80003b2:	f101 30ff 	add.w	r0, r1, #4294967295
 80003b6:	f080 808a 	bcs.w	80004ce <__udivmoddi4+0x2c6>
 80003ba:	42ab      	cmp	r3, r5
 80003bc:	f240 8087 	bls.w	80004ce <__udivmoddi4+0x2c6>
 80003c0:	3902      	subs	r1, #2
 80003c2:	443d      	add	r5, r7
 80003c4:	1aeb      	subs	r3, r5, r3
 80003c6:	fa1f f588 	uxth.w	r5, r8
 80003ca:	fbb3 f0f2 	udiv	r0, r3, r2
 80003ce:	fb02 3310 	mls	r3, r2, r0, r3
 80003d2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003d6:	fb00 f30c 	mul.w	r3, r0, ip
 80003da:	42ab      	cmp	r3, r5
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1e6>
 80003de:	19ed      	adds	r5, r5, r7
 80003e0:	f100 38ff 	add.w	r8, r0, #4294967295
 80003e4:	d26f      	bcs.n	80004c6 <__udivmoddi4+0x2be>
 80003e6:	42ab      	cmp	r3, r5
 80003e8:	d96d      	bls.n	80004c6 <__udivmoddi4+0x2be>
 80003ea:	3802      	subs	r0, #2
 80003ec:	443d      	add	r5, r7
 80003ee:	1aeb      	subs	r3, r5, r3
 80003f0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f4:	e78f      	b.n	8000316 <__udivmoddi4+0x10e>
 80003f6:	f1c1 0720 	rsb	r7, r1, #32
 80003fa:	fa22 f807 	lsr.w	r8, r2, r7
 80003fe:	408b      	lsls	r3, r1
 8000400:	fa05 f401 	lsl.w	r4, r5, r1
 8000404:	ea48 0303 	orr.w	r3, r8, r3
 8000408:	fa20 fe07 	lsr.w	lr, r0, r7
 800040c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000410:	40fd      	lsrs	r5, r7
 8000412:	ea4e 0e04 	orr.w	lr, lr, r4
 8000416:	fbb5 f9fc 	udiv	r9, r5, ip
 800041a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800041e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000422:	fa1f f883 	uxth.w	r8, r3
 8000426:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800042a:	fb09 f408 	mul.w	r4, r9, r8
 800042e:	42ac      	cmp	r4, r5
 8000430:	fa02 f201 	lsl.w	r2, r2, r1
 8000434:	fa00 fa01 	lsl.w	sl, r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x244>
 800043a:	18ed      	adds	r5, r5, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	d243      	bcs.n	80004ca <__udivmoddi4+0x2c2>
 8000442:	42ac      	cmp	r4, r5
 8000444:	d941      	bls.n	80004ca <__udivmoddi4+0x2c2>
 8000446:	f1a9 0902 	sub.w	r9, r9, #2
 800044a:	441d      	add	r5, r3
 800044c:	1b2d      	subs	r5, r5, r4
 800044e:	fa1f fe8e 	uxth.w	lr, lr
 8000452:	fbb5 f0fc 	udiv	r0, r5, ip
 8000456:	fb0c 5510 	mls	r5, ip, r0, r5
 800045a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800045e:	fb00 f808 	mul.w	r8, r0, r8
 8000462:	45a0      	cmp	r8, r4
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x26e>
 8000466:	18e4      	adds	r4, r4, r3
 8000468:	f100 35ff 	add.w	r5, r0, #4294967295
 800046c:	d229      	bcs.n	80004c2 <__udivmoddi4+0x2ba>
 800046e:	45a0      	cmp	r8, r4
 8000470:	d927      	bls.n	80004c2 <__udivmoddi4+0x2ba>
 8000472:	3802      	subs	r0, #2
 8000474:	441c      	add	r4, r3
 8000476:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047a:	eba4 0408 	sub.w	r4, r4, r8
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	454c      	cmp	r4, r9
 8000484:	46c6      	mov	lr, r8
 8000486:	464d      	mov	r5, r9
 8000488:	d315      	bcc.n	80004b6 <__udivmoddi4+0x2ae>
 800048a:	d012      	beq.n	80004b2 <__udivmoddi4+0x2aa>
 800048c:	b156      	cbz	r6, 80004a4 <__udivmoddi4+0x29c>
 800048e:	ebba 030e 	subs.w	r3, sl, lr
 8000492:	eb64 0405 	sbc.w	r4, r4, r5
 8000496:	fa04 f707 	lsl.w	r7, r4, r7
 800049a:	40cb      	lsrs	r3, r1
 800049c:	431f      	orrs	r7, r3
 800049e:	40cc      	lsrs	r4, r1
 80004a0:	6037      	str	r7, [r6, #0]
 80004a2:	6074      	str	r4, [r6, #4]
 80004a4:	2100      	movs	r1, #0
 80004a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004aa:	4618      	mov	r0, r3
 80004ac:	e6f8      	b.n	80002a0 <__udivmoddi4+0x98>
 80004ae:	4690      	mov	r8, r2
 80004b0:	e6e0      	b.n	8000274 <__udivmoddi4+0x6c>
 80004b2:	45c2      	cmp	sl, r8
 80004b4:	d2ea      	bcs.n	800048c <__udivmoddi4+0x284>
 80004b6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004ba:	eb69 0503 	sbc.w	r5, r9, r3
 80004be:	3801      	subs	r0, #1
 80004c0:	e7e4      	b.n	800048c <__udivmoddi4+0x284>
 80004c2:	4628      	mov	r0, r5
 80004c4:	e7d7      	b.n	8000476 <__udivmoddi4+0x26e>
 80004c6:	4640      	mov	r0, r8
 80004c8:	e791      	b.n	80003ee <__udivmoddi4+0x1e6>
 80004ca:	4681      	mov	r9, r0
 80004cc:	e7be      	b.n	800044c <__udivmoddi4+0x244>
 80004ce:	4601      	mov	r1, r0
 80004d0:	e778      	b.n	80003c4 <__udivmoddi4+0x1bc>
 80004d2:	3802      	subs	r0, #2
 80004d4:	443c      	add	r4, r7
 80004d6:	e745      	b.n	8000364 <__udivmoddi4+0x15c>
 80004d8:	4608      	mov	r0, r1
 80004da:	e708      	b.n	80002ee <__udivmoddi4+0xe6>
 80004dc:	f1a8 0802 	sub.w	r8, r8, #2
 80004e0:	443d      	add	r5, r7
 80004e2:	e72b      	b.n	800033c <__udivmoddi4+0x134>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004e8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004ea:	4a0e      	ldr	r2, [pc, #56]	; (8000524 <HAL_InitTick+0x3c>)
 80004ec:	4b0e      	ldr	r3, [pc, #56]	; (8000528 <HAL_InitTick+0x40>)
{
 80004ee:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004f0:	7818      	ldrb	r0, [r3, #0]
 80004f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004f6:	fbb3 f3f0 	udiv	r3, r3, r0
 80004fa:	6810      	ldr	r0, [r2, #0]
 80004fc:	fbb0 f0f3 	udiv	r0, r0, r3
 8000500:	f000 f8aa 	bl	8000658 <HAL_SYSTICK_Config>
 8000504:	4604      	mov	r4, r0
 8000506:	b958      	cbnz	r0, 8000520 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000508:	2d0f      	cmp	r5, #15
 800050a:	d809      	bhi.n	8000520 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800050c:	4602      	mov	r2, r0
 800050e:	4629      	mov	r1, r5
 8000510:	f04f 30ff 	mov.w	r0, #4294967295
 8000514:	f000 f85e 	bl	80005d4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000518:	4b04      	ldr	r3, [pc, #16]	; (800052c <HAL_InitTick+0x44>)
 800051a:	4620      	mov	r0, r4
 800051c:	601d      	str	r5, [r3, #0]
 800051e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000520:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000522:	bd38      	pop	{r3, r4, r5, pc}
 8000524:	20000008 	.word	0x20000008
 8000528:	20000000 	.word	0x20000000
 800052c:	20000004 	.word	0x20000004

08000530 <HAL_Init>:
{
 8000530:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000532:	4b0b      	ldr	r3, [pc, #44]	; (8000560 <HAL_Init+0x30>)
 8000534:	681a      	ldr	r2, [r3, #0]
 8000536:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800053a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800053c:	681a      	ldr	r2, [r3, #0]
 800053e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000542:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000544:	681a      	ldr	r2, [r3, #0]
 8000546:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800054a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800054c:	2003      	movs	r0, #3
 800054e:	f000 f82f 	bl	80005b0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000552:	2000      	movs	r0, #0
 8000554:	f7ff ffc8 	bl	80004e8 <HAL_InitTick>
  HAL_MspInit();
 8000558:	f001 fe88 	bl	800226c <HAL_MspInit>
}
 800055c:	2000      	movs	r0, #0
 800055e:	bd08      	pop	{r3, pc}
 8000560:	40023c00 	.word	0x40023c00

08000564 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000564:	4a03      	ldr	r2, [pc, #12]	; (8000574 <HAL_IncTick+0x10>)
 8000566:	4b04      	ldr	r3, [pc, #16]	; (8000578 <HAL_IncTick+0x14>)
 8000568:	6811      	ldr	r1, [r2, #0]
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	440b      	add	r3, r1
 800056e:	6013      	str	r3, [r2, #0]
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop
 8000574:	20000028 	.word	0x20000028
 8000578:	20000000 	.word	0x20000000

0800057c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800057c:	4b01      	ldr	r3, [pc, #4]	; (8000584 <HAL_GetTick+0x8>)
 800057e:	6818      	ldr	r0, [r3, #0]
}
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop
 8000584:	20000028 	.word	0x20000028

08000588 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000588:	b538      	push	{r3, r4, r5, lr}
 800058a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800058c:	f7ff fff6 	bl	800057c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000590:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000592:	bf1c      	itt	ne
 8000594:	4b05      	ldrne	r3, [pc, #20]	; (80005ac <HAL_Delay+0x24>)
 8000596:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000598:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 800059a:	bf18      	it	ne
 800059c:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800059e:	f7ff ffed 	bl	800057c <HAL_GetTick>
 80005a2:	1b40      	subs	r0, r0, r5
 80005a4:	4284      	cmp	r4, r0
 80005a6:	d8fa      	bhi.n	800059e <HAL_Delay+0x16>
  {
  }
}
 80005a8:	bd38      	pop	{r3, r4, r5, pc}
 80005aa:	bf00      	nop
 80005ac:	20000000 	.word	0x20000000

080005b0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005b0:	4a07      	ldr	r2, [pc, #28]	; (80005d0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80005b2:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005b4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80005b8:	041b      	lsls	r3, r3, #16
 80005ba:	0c1b      	lsrs	r3, r3, #16
 80005bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005c0:	0200      	lsls	r0, r0, #8
 80005c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005c6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80005ca:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80005cc:	60d3      	str	r3, [r2, #12]
 80005ce:	4770      	bx	lr
 80005d0:	e000ed00 	.word	0xe000ed00

080005d4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005d4:	4b17      	ldr	r3, [pc, #92]	; (8000634 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80005d6:	b530      	push	{r4, r5, lr}
 80005d8:	68dc      	ldr	r4, [r3, #12]
 80005da:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005de:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005e2:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005e4:	2b04      	cmp	r3, #4
 80005e6:	bf28      	it	cs
 80005e8:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005ea:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005ec:	f04f 0501 	mov.w	r5, #1
 80005f0:	fa05 f303 	lsl.w	r3, r5, r3
 80005f4:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005f8:	bf8c      	ite	hi
 80005fa:	3c03      	subhi	r4, #3
 80005fc:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005fe:	4019      	ands	r1, r3
 8000600:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000602:	fa05 f404 	lsl.w	r4, r5, r4
 8000606:	3c01      	subs	r4, #1
 8000608:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 800060a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800060c:	ea42 0201 	orr.w	r2, r2, r1
 8000610:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000614:	bfad      	iteet	ge
 8000616:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800061a:	f000 000f 	andlt.w	r0, r0, #15
 800061e:	4b06      	ldrlt	r3, [pc, #24]	; (8000638 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000620:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000624:	bfb5      	itete	lt
 8000626:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000628:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800062a:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800062c:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	bf00      	nop
 8000634:	e000ed00 	.word	0xe000ed00
 8000638:	e000ed14 	.word	0xe000ed14

0800063c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800063c:	2800      	cmp	r0, #0
 800063e:	db08      	blt.n	8000652 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000640:	0942      	lsrs	r2, r0, #5
 8000642:	2301      	movs	r3, #1
 8000644:	f000 001f 	and.w	r0, r0, #31
 8000648:	fa03 f000 	lsl.w	r0, r3, r0
 800064c:	4b01      	ldr	r3, [pc, #4]	; (8000654 <HAL_NVIC_EnableIRQ+0x18>)
 800064e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000652:	4770      	bx	lr
 8000654:	e000e100 	.word	0xe000e100

08000658 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000658:	3801      	subs	r0, #1
 800065a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800065e:	d20a      	bcs.n	8000676 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000660:	4b06      	ldr	r3, [pc, #24]	; (800067c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000662:	4a07      	ldr	r2, [pc, #28]	; (8000680 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000664:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000666:	21f0      	movs	r1, #240	; 0xf0
 8000668:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800066c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800066e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000670:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000676:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop
 800067c:	e000e010 	.word	0xe000e010
 8000680:	e000ed00 	.word	0xe000ed00

08000684 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000688:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800068a:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800068c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800083c <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000690:	4a68      	ldr	r2, [pc, #416]	; (8000834 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000692:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8000840 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000696:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000698:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 800069a:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800069c:	9d01      	ldr	r5, [sp, #4]
    ioposition = 0x01U << position;
 800069e:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006a0:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 80006a2:	42ac      	cmp	r4, r5
 80006a4:	f040 80b0 	bne.w	8000808 <HAL_GPIO_Init+0x184>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006a8:	684c      	ldr	r4, [r1, #4]
 80006aa:	f024 0c10 	bic.w	ip, r4, #16
 80006ae:	f10c 36ff 	add.w	r6, ip, #4294967295
 80006b2:	2e01      	cmp	r6, #1
 80006b4:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80006b8:	d812      	bhi.n	80006e0 <HAL_GPIO_Init+0x5c>
        temp = GPIOx->OSPEEDR; 
 80006ba:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80006bc:	2603      	movs	r6, #3
 80006be:	fa06 f60e 	lsl.w	r6, r6, lr
 80006c2:	ea27 0706 	bic.w	r7, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 80006c6:	68ce      	ldr	r6, [r1, #12]
 80006c8:	fa06 f60e 	lsl.w	r6, r6, lr
 80006cc:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 80006ce:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 80006d0:	6847      	ldr	r7, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80006d2:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80006d6:	ea27 0705 	bic.w	r7, r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80006da:	409e      	lsls	r6, r3
 80006dc:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 80006de:	6046      	str	r6, [r0, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80006e0:	2603      	movs	r6, #3
      temp = GPIOx->PUPDR;
 80006e2:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80006e4:	fa06 f60e 	lsl.w	r6, r6, lr
 80006e8:	43f6      	mvns	r6, r6
 80006ea:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80006ee:	688f      	ldr	r7, [r1, #8]
 80006f0:	fa07 f70e 	lsl.w	r7, r7, lr
 80006f4:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80006f8:	f1bc 0f02 	cmp.w	ip, #2
      GPIOx->PUPDR = temp;
 80006fc:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80006fe:	d116      	bne.n	800072e <HAL_GPIO_Init+0xaa>
        temp = GPIOx->AFR[position >> 3U];
 8000700:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000704:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000708:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 800070c:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000710:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000714:	f04f 0c0f 	mov.w	ip, #15
 8000718:	fa0c fc0b 	lsl.w	ip, ip, fp
 800071c:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000720:	690f      	ldr	r7, [r1, #16]
 8000722:	fa07 f70b 	lsl.w	r7, r7, fp
 8000726:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3U] = temp;
 800072a:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 800072e:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000730:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000732:	f004 0703 	and.w	r7, r4, #3
 8000736:	fa07 fe0e 	lsl.w	lr, r7, lr
 800073a:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 800073e:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000740:	00e6      	lsls	r6, r4, #3
 8000742:	d561      	bpl.n	8000808 <HAL_GPIO_Init+0x184>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000744:	f04f 0b00 	mov.w	fp, #0
 8000748:	f8cd b00c 	str.w	fp, [sp, #12]
 800074c:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000750:	4e39      	ldr	r6, [pc, #228]	; (8000838 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000752:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000756:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 800075a:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 800075e:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000762:	9703      	str	r7, [sp, #12]
 8000764:	9f03      	ldr	r7, [sp, #12]
 8000766:	f023 0703 	bic.w	r7, r3, #3
 800076a:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 800076e:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000772:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000776:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800077a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800077e:	f04f 0e0f 	mov.w	lr, #15
 8000782:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000786:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000788:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800078c:	d043      	beq.n	8000816 <HAL_GPIO_Init+0x192>
 800078e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000792:	42b0      	cmp	r0, r6
 8000794:	d041      	beq.n	800081a <HAL_GPIO_Init+0x196>
 8000796:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800079a:	42b0      	cmp	r0, r6
 800079c:	d03f      	beq.n	800081e <HAL_GPIO_Init+0x19a>
 800079e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80007a2:	42b0      	cmp	r0, r6
 80007a4:	d03d      	beq.n	8000822 <HAL_GPIO_Init+0x19e>
 80007a6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80007aa:	42b0      	cmp	r0, r6
 80007ac:	d03b      	beq.n	8000826 <HAL_GPIO_Init+0x1a2>
 80007ae:	4548      	cmp	r0, r9
 80007b0:	d03b      	beq.n	800082a <HAL_GPIO_Init+0x1a6>
 80007b2:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 80007b6:	42b0      	cmp	r0, r6
 80007b8:	d039      	beq.n	800082e <HAL_GPIO_Init+0x1aa>
 80007ba:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80007be:	42b0      	cmp	r0, r6
 80007c0:	bf14      	ite	ne
 80007c2:	2608      	movne	r6, #8
 80007c4:	2607      	moveq	r6, #7
 80007c6:	fa06 f60c 	lsl.w	r6, r6, ip
 80007ca:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 80007ce:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 80007d0:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80007d2:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80007d4:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80007d8:	bf0c      	ite	eq
 80007da:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80007dc:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 80007de:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 80007e0:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80007e2:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80007e6:	bf0c      	ite	eq
 80007e8:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80007ea:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 80007ec:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80007ee:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80007f0:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80007f4:	bf0c      	ite	eq
 80007f6:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80007f8:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 80007fa:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 80007fc:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80007fe:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000800:	bf54      	ite	pl
 8000802:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 8000804:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 8000806:	60d6      	str	r6, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000808:	3301      	adds	r3, #1
 800080a:	2b10      	cmp	r3, #16
 800080c:	f47f af45 	bne.w	800069a <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000810:	b005      	add	sp, #20
 8000812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000816:	465e      	mov	r6, fp
 8000818:	e7d5      	b.n	80007c6 <HAL_GPIO_Init+0x142>
 800081a:	2601      	movs	r6, #1
 800081c:	e7d3      	b.n	80007c6 <HAL_GPIO_Init+0x142>
 800081e:	2602      	movs	r6, #2
 8000820:	e7d1      	b.n	80007c6 <HAL_GPIO_Init+0x142>
 8000822:	2603      	movs	r6, #3
 8000824:	e7cf      	b.n	80007c6 <HAL_GPIO_Init+0x142>
 8000826:	2604      	movs	r6, #4
 8000828:	e7cd      	b.n	80007c6 <HAL_GPIO_Init+0x142>
 800082a:	2605      	movs	r6, #5
 800082c:	e7cb      	b.n	80007c6 <HAL_GPIO_Init+0x142>
 800082e:	2606      	movs	r6, #6
 8000830:	e7c9      	b.n	80007c6 <HAL_GPIO_Init+0x142>
 8000832:	bf00      	nop
 8000834:	40013c00 	.word	0x40013c00
 8000838:	40020000 	.word	0x40020000
 800083c:	40023800 	.word	0x40023800
 8000840:	40021400 	.word	0x40021400

08000844 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000844:	b10a      	cbz	r2, 800084a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000846:	6181      	str	r1, [r0, #24]
 8000848:	4770      	bx	lr
 800084a:	0409      	lsls	r1, r1, #16
 800084c:	e7fb      	b.n	8000846 <HAL_GPIO_WritePin+0x2>

0800084e <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800084e:	6943      	ldr	r3, [r0, #20]
 8000850:	ea31 0303 	bics.w	r3, r1, r3
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000854:	bf08      	it	eq
 8000856:	0409      	lsleq	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 8000858:	6181      	str	r1, [r0, #24]
 800085a:	4770      	bx	lr

0800085c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800085c:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800085e:	4b04      	ldr	r3, [pc, #16]	; (8000870 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8000860:	6959      	ldr	r1, [r3, #20]
 8000862:	4201      	tst	r1, r0
 8000864:	d002      	beq.n	800086c <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000866:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000868:	f001 f8e6 	bl	8001a38 <HAL_GPIO_EXTI_Callback>
 800086c:	bd08      	pop	{r3, pc}
 800086e:	bf00      	nop
 8000870:	40013c00 	.word	0x40013c00

08000874 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000874:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000878:	4604      	mov	r4, r0
 800087a:	b908      	cbnz	r0, 8000880 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 800087c:	2001      	movs	r0, #1
 800087e:	e03f      	b.n	8000900 <HAL_RCC_OscConfig+0x8c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000880:	6803      	ldr	r3, [r0, #0]
 8000882:	07dd      	lsls	r5, r3, #31
 8000884:	d410      	bmi.n	80008a8 <HAL_RCC_OscConfig+0x34>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000886:	6823      	ldr	r3, [r4, #0]
 8000888:	0798      	lsls	r0, r3, #30
 800088a:	d45a      	bmi.n	8000942 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800088c:	6823      	ldr	r3, [r4, #0]
 800088e:	071a      	lsls	r2, r3, #28
 8000890:	f100 809c 	bmi.w	80009cc <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000894:	6823      	ldr	r3, [r4, #0]
 8000896:	075b      	lsls	r3, r3, #29
 8000898:	f100 80ba 	bmi.w	8000a10 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800089c:	69a0      	ldr	r0, [r4, #24]
 800089e:	2800      	cmp	r0, #0
 80008a0:	f040 811b 	bne.w	8000ada <HAL_RCC_OscConfig+0x266>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80008a4:	2000      	movs	r0, #0
 80008a6:	e02b      	b.n	8000900 <HAL_RCC_OscConfig+0x8c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80008a8:	4ba4      	ldr	r3, [pc, #656]	; (8000b3c <HAL_RCC_OscConfig+0x2c8>)
 80008aa:	689a      	ldr	r2, [r3, #8]
 80008ac:	f002 020c 	and.w	r2, r2, #12
 80008b0:	2a04      	cmp	r2, #4
 80008b2:	d007      	beq.n	80008c4 <HAL_RCC_OscConfig+0x50>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80008b4:	689a      	ldr	r2, [r3, #8]
 80008b6:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80008ba:	2a08      	cmp	r2, #8
 80008bc:	d10a      	bne.n	80008d4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80008be:	685b      	ldr	r3, [r3, #4]
 80008c0:	0259      	lsls	r1, r3, #9
 80008c2:	d507      	bpl.n	80008d4 <HAL_RCC_OscConfig+0x60>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80008c4:	4b9d      	ldr	r3, [pc, #628]	; (8000b3c <HAL_RCC_OscConfig+0x2c8>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	039a      	lsls	r2, r3, #14
 80008ca:	d5dc      	bpl.n	8000886 <HAL_RCC_OscConfig+0x12>
 80008cc:	6863      	ldr	r3, [r4, #4]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d1d9      	bne.n	8000886 <HAL_RCC_OscConfig+0x12>
 80008d2:	e7d3      	b.n	800087c <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008d4:	6863      	ldr	r3, [r4, #4]
 80008d6:	4d99      	ldr	r5, [pc, #612]	; (8000b3c <HAL_RCC_OscConfig+0x2c8>)
 80008d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80008dc:	d113      	bne.n	8000906 <HAL_RCC_OscConfig+0x92>
 80008de:	682b      	ldr	r3, [r5, #0]
 80008e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008e4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80008e6:	f7ff fe49 	bl	800057c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008ea:	4d94      	ldr	r5, [pc, #592]	; (8000b3c <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 80008ec:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008ee:	682b      	ldr	r3, [r5, #0]
 80008f0:	039b      	lsls	r3, r3, #14
 80008f2:	d4c8      	bmi.n	8000886 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80008f4:	f7ff fe42 	bl	800057c <HAL_GetTick>
 80008f8:	1b80      	subs	r0, r0, r6
 80008fa:	2864      	cmp	r0, #100	; 0x64
 80008fc:	d9f7      	bls.n	80008ee <HAL_RCC_OscConfig+0x7a>
            return HAL_TIMEOUT;
 80008fe:	2003      	movs	r0, #3
}
 8000900:	b002      	add	sp, #8
 8000902:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000906:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800090a:	d104      	bne.n	8000916 <HAL_RCC_OscConfig+0xa2>
 800090c:	682b      	ldr	r3, [r5, #0]
 800090e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000912:	602b      	str	r3, [r5, #0]
 8000914:	e7e3      	b.n	80008de <HAL_RCC_OscConfig+0x6a>
 8000916:	682a      	ldr	r2, [r5, #0]
 8000918:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800091c:	602a      	str	r2, [r5, #0]
 800091e:	682a      	ldr	r2, [r5, #0]
 8000920:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000924:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000926:	2b00      	cmp	r3, #0
 8000928:	d1dd      	bne.n	80008e6 <HAL_RCC_OscConfig+0x72>
        tickstart = HAL_GetTick();
 800092a:	f7ff fe27 	bl	800057c <HAL_GetTick>
 800092e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000930:	682b      	ldr	r3, [r5, #0]
 8000932:	039f      	lsls	r7, r3, #14
 8000934:	d5a7      	bpl.n	8000886 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000936:	f7ff fe21 	bl	800057c <HAL_GetTick>
 800093a:	1b80      	subs	r0, r0, r6
 800093c:	2864      	cmp	r0, #100	; 0x64
 800093e:	d9f7      	bls.n	8000930 <HAL_RCC_OscConfig+0xbc>
 8000940:	e7dd      	b.n	80008fe <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000942:	4b7e      	ldr	r3, [pc, #504]	; (8000b3c <HAL_RCC_OscConfig+0x2c8>)
 8000944:	689a      	ldr	r2, [r3, #8]
 8000946:	f012 0f0c 	tst.w	r2, #12
 800094a:	d007      	beq.n	800095c <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800094c:	689a      	ldr	r2, [r3, #8]
 800094e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000952:	2a08      	cmp	r2, #8
 8000954:	d111      	bne.n	800097a <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000956:	685b      	ldr	r3, [r3, #4]
 8000958:	025e      	lsls	r6, r3, #9
 800095a:	d40e      	bmi.n	800097a <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800095c:	4b77      	ldr	r3, [pc, #476]	; (8000b3c <HAL_RCC_OscConfig+0x2c8>)
 800095e:	681a      	ldr	r2, [r3, #0]
 8000960:	0795      	lsls	r5, r2, #30
 8000962:	d502      	bpl.n	800096a <HAL_RCC_OscConfig+0xf6>
 8000964:	68e2      	ldr	r2, [r4, #12]
 8000966:	2a01      	cmp	r2, #1
 8000968:	d188      	bne.n	800087c <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800096a:	681a      	ldr	r2, [r3, #0]
 800096c:	6921      	ldr	r1, [r4, #16]
 800096e:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000972:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8000976:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000978:	e788      	b.n	800088c <HAL_RCC_OscConfig+0x18>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800097a:	68e2      	ldr	r2, [r4, #12]
 800097c:	4b70      	ldr	r3, [pc, #448]	; (8000b40 <HAL_RCC_OscConfig+0x2cc>)
 800097e:	b1b2      	cbz	r2, 80009ae <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8000980:	2201      	movs	r2, #1
 8000982:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000984:	f7ff fdfa 	bl	800057c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000988:	4d6c      	ldr	r5, [pc, #432]	; (8000b3c <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 800098a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800098c:	682b      	ldr	r3, [r5, #0]
 800098e:	0798      	lsls	r0, r3, #30
 8000990:	d507      	bpl.n	80009a2 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000992:	682b      	ldr	r3, [r5, #0]
 8000994:	6922      	ldr	r2, [r4, #16]
 8000996:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800099a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800099e:	602b      	str	r3, [r5, #0]
 80009a0:	e774      	b.n	800088c <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80009a2:	f7ff fdeb 	bl	800057c <HAL_GetTick>
 80009a6:	1b80      	subs	r0, r0, r6
 80009a8:	2802      	cmp	r0, #2
 80009aa:	d9ef      	bls.n	800098c <HAL_RCC_OscConfig+0x118>
 80009ac:	e7a7      	b.n	80008fe <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_HSI_DISABLE();
 80009ae:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80009b0:	f7ff fde4 	bl	800057c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80009b4:	4d61      	ldr	r5, [pc, #388]	; (8000b3c <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 80009b6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80009b8:	682b      	ldr	r3, [r5, #0]
 80009ba:	0799      	lsls	r1, r3, #30
 80009bc:	f57f af66 	bpl.w	800088c <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80009c0:	f7ff fddc 	bl	800057c <HAL_GetTick>
 80009c4:	1b80      	subs	r0, r0, r6
 80009c6:	2802      	cmp	r0, #2
 80009c8:	d9f6      	bls.n	80009b8 <HAL_RCC_OscConfig+0x144>
 80009ca:	e798      	b.n	80008fe <HAL_RCC_OscConfig+0x8a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80009cc:	6962      	ldr	r2, [r4, #20]
 80009ce:	4b5d      	ldr	r3, [pc, #372]	; (8000b44 <HAL_RCC_OscConfig+0x2d0>)
 80009d0:	b17a      	cbz	r2, 80009f2 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 80009d2:	2201      	movs	r2, #1
 80009d4:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80009d6:	f7ff fdd1 	bl	800057c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009da:	4d58      	ldr	r5, [pc, #352]	; (8000b3c <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 80009dc:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009de:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80009e0:	079f      	lsls	r7, r3, #30
 80009e2:	f53f af57 	bmi.w	8000894 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80009e6:	f7ff fdc9 	bl	800057c <HAL_GetTick>
 80009ea:	1b80      	subs	r0, r0, r6
 80009ec:	2802      	cmp	r0, #2
 80009ee:	d9f6      	bls.n	80009de <HAL_RCC_OscConfig+0x16a>
 80009f0:	e785      	b.n	80008fe <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_LSI_DISABLE();
 80009f2:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80009f4:	f7ff fdc2 	bl	800057c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009f8:	4d50      	ldr	r5, [pc, #320]	; (8000b3c <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 80009fa:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009fc:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80009fe:	0798      	lsls	r0, r3, #30
 8000a00:	f57f af48 	bpl.w	8000894 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a04:	f7ff fdba 	bl	800057c <HAL_GetTick>
 8000a08:	1b80      	subs	r0, r0, r6
 8000a0a:	2802      	cmp	r0, #2
 8000a0c:	d9f6      	bls.n	80009fc <HAL_RCC_OscConfig+0x188>
 8000a0e:	e776      	b.n	80008fe <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a10:	4b4a      	ldr	r3, [pc, #296]	; (8000b3c <HAL_RCC_OscConfig+0x2c8>)
 8000a12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a14:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8000a18:	d128      	bne.n	8000a6c <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000a1a:	9201      	str	r2, [sp, #4]
 8000a1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a1e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000a22:	641a      	str	r2, [r3, #64]	; 0x40
 8000a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a2a:	9301      	str	r3, [sp, #4]
 8000a2c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000a2e:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a30:	4d45      	ldr	r5, [pc, #276]	; (8000b48 <HAL_RCC_OscConfig+0x2d4>)
 8000a32:	682b      	ldr	r3, [r5, #0]
 8000a34:	05d9      	lsls	r1, r3, #23
 8000a36:	d51b      	bpl.n	8000a70 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a38:	68a3      	ldr	r3, [r4, #8]
 8000a3a:	4d40      	ldr	r5, [pc, #256]	; (8000b3c <HAL_RCC_OscConfig+0x2c8>)
 8000a3c:	2b01      	cmp	r3, #1
 8000a3e:	d127      	bne.n	8000a90 <HAL_RCC_OscConfig+0x21c>
 8000a40:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000a42:	f043 0301 	orr.w	r3, r3, #1
 8000a46:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000a48:	f7ff fd98 	bl	800057c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a4c:	4d3b      	ldr	r5, [pc, #236]	; (8000b3c <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8000a4e:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a50:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a54:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000a56:	079b      	lsls	r3, r3, #30
 8000a58:	d539      	bpl.n	8000ace <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8000a5a:	2e00      	cmp	r6, #0
 8000a5c:	f43f af1e 	beq.w	800089c <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000a60:	4a36      	ldr	r2, [pc, #216]	; (8000b3c <HAL_RCC_OscConfig+0x2c8>)
 8000a62:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000a64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000a68:	6413      	str	r3, [r2, #64]	; 0x40
 8000a6a:	e717      	b.n	800089c <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8000a6c:	2600      	movs	r6, #0
 8000a6e:	e7df      	b.n	8000a30 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000a70:	682b      	ldr	r3, [r5, #0]
 8000a72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a76:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000a78:	f7ff fd80 	bl	800057c <HAL_GetTick>
 8000a7c:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a7e:	682b      	ldr	r3, [r5, #0]
 8000a80:	05da      	lsls	r2, r3, #23
 8000a82:	d4d9      	bmi.n	8000a38 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000a84:	f7ff fd7a 	bl	800057c <HAL_GetTick>
 8000a88:	1bc0      	subs	r0, r0, r7
 8000a8a:	2802      	cmp	r0, #2
 8000a8c:	d9f7      	bls.n	8000a7e <HAL_RCC_OscConfig+0x20a>
 8000a8e:	e736      	b.n	80008fe <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a90:	2b05      	cmp	r3, #5
 8000a92:	d104      	bne.n	8000a9e <HAL_RCC_OscConfig+0x22a>
 8000a94:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000a96:	f043 0304 	orr.w	r3, r3, #4
 8000a9a:	672b      	str	r3, [r5, #112]	; 0x70
 8000a9c:	e7d0      	b.n	8000a40 <HAL_RCC_OscConfig+0x1cc>
 8000a9e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000aa0:	f022 0201 	bic.w	r2, r2, #1
 8000aa4:	672a      	str	r2, [r5, #112]	; 0x70
 8000aa6:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000aa8:	f022 0204 	bic.w	r2, r2, #4
 8000aac:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d1ca      	bne.n	8000a48 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8000ab2:	f7ff fd63 	bl	800057c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ab6:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000aba:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000abc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000abe:	0798      	lsls	r0, r3, #30
 8000ac0:	d5cb      	bpl.n	8000a5a <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ac2:	f7ff fd5b 	bl	800057c <HAL_GetTick>
 8000ac6:	1bc0      	subs	r0, r0, r7
 8000ac8:	4540      	cmp	r0, r8
 8000aca:	d9f7      	bls.n	8000abc <HAL_RCC_OscConfig+0x248>
 8000acc:	e717      	b.n	80008fe <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ace:	f7ff fd55 	bl	800057c <HAL_GetTick>
 8000ad2:	1bc0      	subs	r0, r0, r7
 8000ad4:	4540      	cmp	r0, r8
 8000ad6:	d9bd      	bls.n	8000a54 <HAL_RCC_OscConfig+0x1e0>
 8000ad8:	e711      	b.n	80008fe <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000ada:	4d18      	ldr	r5, [pc, #96]	; (8000b3c <HAL_RCC_OscConfig+0x2c8>)
 8000adc:	68ab      	ldr	r3, [r5, #8]
 8000ade:	f003 030c 	and.w	r3, r3, #12
 8000ae2:	2b08      	cmp	r3, #8
 8000ae4:	d047      	beq.n	8000b76 <HAL_RCC_OscConfig+0x302>
 8000ae6:	4e19      	ldr	r6, [pc, #100]	; (8000b4c <HAL_RCC_OscConfig+0x2d8>)
 8000ae8:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000aea:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8000aec:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000aee:	d135      	bne.n	8000b5c <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8000af0:	f7ff fd44 	bl	800057c <HAL_GetTick>
 8000af4:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000af6:	682b      	ldr	r3, [r5, #0]
 8000af8:	0199      	lsls	r1, r3, #6
 8000afa:	d429      	bmi.n	8000b50 <HAL_RCC_OscConfig+0x2dc>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000afc:	6a22      	ldr	r2, [r4, #32]
 8000afe:	69e3      	ldr	r3, [r4, #28]
 8000b00:	4313      	orrs	r3, r2
 8000b02:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000b04:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000b08:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000b0a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000b0e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000b10:	4c0a      	ldr	r4, [pc, #40]	; (8000b3c <HAL_RCC_OscConfig+0x2c8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000b12:	0852      	lsrs	r2, r2, #1
 8000b14:	3a01      	subs	r2, #1
 8000b16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b1a:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000b20:	f7ff fd2c 	bl	800057c <HAL_GetTick>
 8000b24:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000b26:	6823      	ldr	r3, [r4, #0]
 8000b28:	019a      	lsls	r2, r3, #6
 8000b2a:	f53f aebb 	bmi.w	80008a4 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b2e:	f7ff fd25 	bl	800057c <HAL_GetTick>
 8000b32:	1b40      	subs	r0, r0, r5
 8000b34:	2802      	cmp	r0, #2
 8000b36:	d9f6      	bls.n	8000b26 <HAL_RCC_OscConfig+0x2b2>
 8000b38:	e6e1      	b.n	80008fe <HAL_RCC_OscConfig+0x8a>
 8000b3a:	bf00      	nop
 8000b3c:	40023800 	.word	0x40023800
 8000b40:	42470000 	.word	0x42470000
 8000b44:	42470e80 	.word	0x42470e80
 8000b48:	40007000 	.word	0x40007000
 8000b4c:	42470060 	.word	0x42470060
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b50:	f7ff fd14 	bl	800057c <HAL_GetTick>
 8000b54:	1bc0      	subs	r0, r0, r7
 8000b56:	2802      	cmp	r0, #2
 8000b58:	d9cd      	bls.n	8000af6 <HAL_RCC_OscConfig+0x282>
 8000b5a:	e6d0      	b.n	80008fe <HAL_RCC_OscConfig+0x8a>
        tickstart = HAL_GetTick();
 8000b5c:	f7ff fd0e 	bl	800057c <HAL_GetTick>
 8000b60:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000b62:	682b      	ldr	r3, [r5, #0]
 8000b64:	019b      	lsls	r3, r3, #6
 8000b66:	f57f ae9d 	bpl.w	80008a4 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b6a:	f7ff fd07 	bl	800057c <HAL_GetTick>
 8000b6e:	1b00      	subs	r0, r0, r4
 8000b70:	2802      	cmp	r0, #2
 8000b72:	d9f6      	bls.n	8000b62 <HAL_RCC_OscConfig+0x2ee>
 8000b74:	e6c3      	b.n	80008fe <HAL_RCC_OscConfig+0x8a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000b76:	2801      	cmp	r0, #1
 8000b78:	f43f aec2 	beq.w	8000900 <HAL_RCC_OscConfig+0x8c>
        pll_config = RCC->CFGR;
 8000b7c:	68a8      	ldr	r0, [r5, #8]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000b7e:	69e3      	ldr	r3, [r4, #28]
 8000b80:	f400 0280 	and.w	r2, r0, #4194304	; 0x400000
 8000b84:	429a      	cmp	r2, r3
 8000b86:	f47f ae79 	bne.w	800087c <HAL_RCC_OscConfig+0x8>
 8000b8a:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000b8c:	f000 033f 	and.w	r3, r0, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000b90:	4293      	cmp	r3, r2
 8000b92:	f47f ae73 	bne.w	800087c <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000b96:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000b98:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000b9c:	4003      	ands	r3, r0
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	f47f ae6c 	bne.w	800087c <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8000ba4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000ba6:	f400 3340 	and.w	r3, r0, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8000baa:	4293      	cmp	r3, r2
 8000bac:	f47f ae66 	bne.w	800087c <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000bb0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8000bb2:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
    return HAL_ERROR;
 8000bb6:	1ac0      	subs	r0, r0, r3
 8000bb8:	bf18      	it	ne
 8000bba:	2001      	movne	r0, #1
 8000bbc:	e6a0      	b.n	8000900 <HAL_RCC_OscConfig+0x8c>
 8000bbe:	bf00      	nop

08000bc0 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000bc0:	4913      	ldr	r1, [pc, #76]	; (8000c10 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000bc2:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000bc4:	688b      	ldr	r3, [r1, #8]
 8000bc6:	f003 030c 	and.w	r3, r3, #12
 8000bca:	2b04      	cmp	r3, #4
 8000bcc:	d003      	beq.n	8000bd6 <HAL_RCC_GetSysClockFreq+0x16>
 8000bce:	2b08      	cmp	r3, #8
 8000bd0:	d003      	beq.n	8000bda <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000bd2:	4810      	ldr	r0, [pc, #64]	; (8000c14 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000bd4:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8000bd6:	4810      	ldr	r0, [pc, #64]	; (8000c18 <HAL_RCC_GetSysClockFreq+0x58>)
 8000bd8:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000bda:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000bdc:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000bde:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000be0:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000be4:	bf14      	ite	ne
 8000be6:	480c      	ldrne	r0, [pc, #48]	; (8000c18 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000be8:	480a      	ldreq	r0, [pc, #40]	; (8000c14 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000bea:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000bee:	bf18      	it	ne
 8000bf0:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000bf2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000bf6:	fba1 0100 	umull	r0, r1, r1, r0
 8000bfa:	f7ff faed 	bl	80001d8 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000bfe:	4b04      	ldr	r3, [pc, #16]	; (8000c10 <HAL_RCC_GetSysClockFreq+0x50>)
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000c06:	3301      	adds	r3, #1
 8000c08:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8000c0a:	fbb0 f0f3 	udiv	r0, r0, r3
 8000c0e:	bd08      	pop	{r3, pc}
 8000c10:	40023800 	.word	0x40023800
 8000c14:	00f42400 	.word	0x00f42400
 8000c18:	007a1200 	.word	0x007a1200

08000c1c <HAL_RCC_ClockConfig>:
{
 8000c1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c20:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000c22:	4604      	mov	r4, r0
 8000c24:	b910      	cbnz	r0, 8000c2c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000c26:	2001      	movs	r0, #1
 8000c28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000c2c:	4b44      	ldr	r3, [pc, #272]	; (8000d40 <HAL_RCC_ClockConfig+0x124>)
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	f002 020f 	and.w	r2, r2, #15
 8000c34:	428a      	cmp	r2, r1
 8000c36:	d329      	bcc.n	8000c8c <HAL_RCC_ClockConfig+0x70>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000c38:	6821      	ldr	r1, [r4, #0]
 8000c3a:	078f      	lsls	r7, r1, #30
 8000c3c:	d42e      	bmi.n	8000c9c <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000c3e:	07c8      	lsls	r0, r1, #31
 8000c40:	d441      	bmi.n	8000cc6 <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000c42:	4b3f      	ldr	r3, [pc, #252]	; (8000d40 <HAL_RCC_ClockConfig+0x124>)
 8000c44:	681a      	ldr	r2, [r3, #0]
 8000c46:	f002 020f 	and.w	r2, r2, #15
 8000c4a:	4295      	cmp	r5, r2
 8000c4c:	d367      	bcc.n	8000d1e <HAL_RCC_ClockConfig+0x102>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c4e:	6822      	ldr	r2, [r4, #0]
 8000c50:	0751      	lsls	r1, r2, #29
 8000c52:	d46d      	bmi.n	8000d30 <HAL_RCC_ClockConfig+0x114>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c54:	0713      	lsls	r3, r2, #28
 8000c56:	d507      	bpl.n	8000c68 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000c58:	4a3a      	ldr	r2, [pc, #232]	; (8000d44 <HAL_RCC_ClockConfig+0x128>)
 8000c5a:	6921      	ldr	r1, [r4, #16]
 8000c5c:	6893      	ldr	r3, [r2, #8]
 8000c5e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000c62:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000c66:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000c68:	f7ff ffaa 	bl	8000bc0 <HAL_RCC_GetSysClockFreq>
 8000c6c:	4b35      	ldr	r3, [pc, #212]	; (8000d44 <HAL_RCC_ClockConfig+0x128>)
 8000c6e:	4a36      	ldr	r2, [pc, #216]	; (8000d48 <HAL_RCC_ClockConfig+0x12c>)
 8000c70:	689b      	ldr	r3, [r3, #8]
 8000c72:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000c76:	5cd3      	ldrb	r3, [r2, r3]
 8000c78:	40d8      	lsrs	r0, r3
 8000c7a:	4b34      	ldr	r3, [pc, #208]	; (8000d4c <HAL_RCC_ClockConfig+0x130>)
 8000c7c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8000c7e:	4b34      	ldr	r3, [pc, #208]	; (8000d50 <HAL_RCC_ClockConfig+0x134>)
 8000c80:	6818      	ldr	r0, [r3, #0]
 8000c82:	f7ff fc31 	bl	80004e8 <HAL_InitTick>
  return HAL_OK;
 8000c86:	2000      	movs	r0, #0
 8000c88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c8c:	b2ca      	uxtb	r2, r1
 8000c8e:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	f003 030f 	and.w	r3, r3, #15
 8000c96:	4299      	cmp	r1, r3
 8000c98:	d1c5      	bne.n	8000c26 <HAL_RCC_ClockConfig+0xa>
 8000c9a:	e7cd      	b.n	8000c38 <HAL_RCC_ClockConfig+0x1c>
 8000c9c:	4b29      	ldr	r3, [pc, #164]	; (8000d44 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c9e:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000ca2:	bf1e      	ittt	ne
 8000ca4:	689a      	ldrne	r2, [r3, #8]
 8000ca6:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8000caa:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000cac:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000cae:	bf42      	ittt	mi
 8000cb0:	689a      	ldrmi	r2, [r3, #8]
 8000cb2:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8000cb6:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000cb8:	689a      	ldr	r2, [r3, #8]
 8000cba:	68a0      	ldr	r0, [r4, #8]
 8000cbc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000cc0:	4302      	orrs	r2, r0
 8000cc2:	609a      	str	r2, [r3, #8]
 8000cc4:	e7bb      	b.n	8000c3e <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000cc6:	6862      	ldr	r2, [r4, #4]
 8000cc8:	4b1e      	ldr	r3, [pc, #120]	; (8000d44 <HAL_RCC_ClockConfig+0x128>)
 8000cca:	2a01      	cmp	r2, #1
 8000ccc:	d11d      	bne.n	8000d0a <HAL_RCC_ClockConfig+0xee>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cd4:	d0a7      	beq.n	8000c26 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000cd6:	4e1b      	ldr	r6, [pc, #108]	; (8000d44 <HAL_RCC_ClockConfig+0x128>)
 8000cd8:	68b3      	ldr	r3, [r6, #8]
 8000cda:	f023 0303 	bic.w	r3, r3, #3
 8000cde:	4313      	orrs	r3, r2
 8000ce0:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000ce2:	f7ff fc4b 	bl	800057c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ce6:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000cea:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000cec:	68b3      	ldr	r3, [r6, #8]
 8000cee:	6862      	ldr	r2, [r4, #4]
 8000cf0:	f003 030c 	and.w	r3, r3, #12
 8000cf4:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000cf8:	d0a3      	beq.n	8000c42 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000cfa:	f7ff fc3f 	bl	800057c <HAL_GetTick>
 8000cfe:	1bc0      	subs	r0, r0, r7
 8000d00:	4540      	cmp	r0, r8
 8000d02:	d9f3      	bls.n	8000cec <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 8000d04:	2003      	movs	r0, #3
}
 8000d06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000d0a:	1e91      	subs	r1, r2, #2
 8000d0c:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d0e:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000d10:	d802      	bhi.n	8000d18 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d12:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000d16:	e7dd      	b.n	8000cd4 <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d18:	f013 0f02 	tst.w	r3, #2
 8000d1c:	e7da      	b.n	8000cd4 <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d1e:	b2ea      	uxtb	r2, r5
 8000d20:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f003 030f 	and.w	r3, r3, #15
 8000d28:	429d      	cmp	r5, r3
 8000d2a:	f47f af7c 	bne.w	8000c26 <HAL_RCC_ClockConfig+0xa>
 8000d2e:	e78e      	b.n	8000c4e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000d30:	4904      	ldr	r1, [pc, #16]	; (8000d44 <HAL_RCC_ClockConfig+0x128>)
 8000d32:	68e0      	ldr	r0, [r4, #12]
 8000d34:	688b      	ldr	r3, [r1, #8]
 8000d36:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000d3a:	4303      	orrs	r3, r0
 8000d3c:	608b      	str	r3, [r1, #8]
 8000d3e:	e789      	b.n	8000c54 <HAL_RCC_ClockConfig+0x38>
 8000d40:	40023c00 	.word	0x40023c00
 8000d44:	40023800 	.word	0x40023800
 8000d48:	0800251e 	.word	0x0800251e
 8000d4c:	20000008 	.word	0x20000008
 8000d50:	20000004 	.word	0x20000004

08000d54 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000d54:	4b04      	ldr	r3, [pc, #16]	; (8000d68 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000d56:	4a05      	ldr	r2, [pc, #20]	; (8000d6c <HAL_RCC_GetPCLK1Freq+0x18>)
 8000d58:	689b      	ldr	r3, [r3, #8]
 8000d5a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8000d5e:	5cd3      	ldrb	r3, [r2, r3]
 8000d60:	4a03      	ldr	r2, [pc, #12]	; (8000d70 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000d62:	6810      	ldr	r0, [r2, #0]
}
 8000d64:	40d8      	lsrs	r0, r3
 8000d66:	4770      	bx	lr
 8000d68:	40023800 	.word	0x40023800
 8000d6c:	0800252e 	.word	0x0800252e
 8000d70:	20000008 	.word	0x20000008

08000d74 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000d74:	4b04      	ldr	r3, [pc, #16]	; (8000d88 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000d76:	4a05      	ldr	r2, [pc, #20]	; (8000d8c <HAL_RCC_GetPCLK2Freq+0x18>)
 8000d78:	689b      	ldr	r3, [r3, #8]
 8000d7a:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8000d7e:	5cd3      	ldrb	r3, [r2, r3]
 8000d80:	4a03      	ldr	r2, [pc, #12]	; (8000d90 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000d82:	6810      	ldr	r0, [r2, #0]
}
 8000d84:	40d8      	lsrs	r0, r3
 8000d86:	4770      	bx	lr
 8000d88:	40023800 	.word	0x40023800
 8000d8c:	0800252e 	.word	0x0800252e
 8000d90:	20000008 	.word	0x20000008

08000d94 <SPI_WaitFlagStateUntilTimeout.constprop.9>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8000d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d96:	4604      	mov	r4, r0
 8000d98:	460e      	mov	r6, r1
 8000d9a:	4615      	mov	r5, r2
 8000d9c:	461f      	mov	r7, r3
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8000d9e:	6821      	ldr	r1, [r4, #0]
 8000da0:	688a      	ldr	r2, [r1, #8]
 8000da2:	ea36 0302 	bics.w	r3, r6, r2
 8000da6:	d001      	beq.n	8000dac <SPI_WaitFlagStateUntilTimeout.constprop.9+0x18>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8000da8:	2000      	movs	r0, #0
}
 8000daa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 8000dac:	1c6b      	adds	r3, r5, #1
 8000dae:	d0f7      	beq.n	8000da0 <SPI_WaitFlagStateUntilTimeout.constprop.9+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8000db0:	f7ff fbe4 	bl	800057c <HAL_GetTick>
 8000db4:	1bc0      	subs	r0, r0, r7
 8000db6:	4285      	cmp	r5, r0
 8000db8:	d8f1      	bhi.n	8000d9e <SPI_WaitFlagStateUntilTimeout.constprop.9+0xa>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8000dba:	6823      	ldr	r3, [r4, #0]
 8000dbc:	685a      	ldr	r2, [r3, #4]
 8000dbe:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8000dc2:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000dc4:	6862      	ldr	r2, [r4, #4]
 8000dc6:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8000dca:	d10a      	bne.n	8000de2 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x4e>
 8000dcc:	68a2      	ldr	r2, [r4, #8]
 8000dce:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8000dd2:	d002      	beq.n	8000dda <SPI_WaitFlagStateUntilTimeout.constprop.9+0x46>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8000dd4:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8000dd8:	d103      	bne.n	8000de2 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x4e>
          __HAL_SPI_DISABLE(hspi);
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000de0:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8000de2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000de4:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8000de8:	d107      	bne.n	8000dfa <SPI_WaitFlagStateUntilTimeout.constprop.9+0x66>
          SPI_RESET_CRC(hspi);
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000df0:	601a      	str	r2, [r3, #0]
 8000df2:	681a      	ldr	r2, [r3, #0]
 8000df4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000df8:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8000e00:	2300      	movs	r3, #0
 8000e02:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8000e06:	2003      	movs	r0, #3
 8000e08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000e0c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8000e0c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000e0e:	4613      	mov	r3, r2
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8000e10:	4a13      	ldr	r2, [pc, #76]	; (8000e60 <SPI_EndRxTxTransaction+0x54>)
 8000e12:	4e14      	ldr	r6, [pc, #80]	; (8000e64 <SPI_EndRxTxTransaction+0x58>)
 8000e14:	6815      	ldr	r5, [r2, #0]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8000e16:	6842      	ldr	r2, [r0, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8000e18:	fbb5 f6f6 	udiv	r6, r5, r6
 8000e1c:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8000e20:	4375      	muls	r5, r6
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8000e22:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
{
 8000e26:	4604      	mov	r4, r0
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8000e28:	9501      	str	r5, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8000e2a:	d10d      	bne.n	8000e48 <SPI_EndRxTxTransaction+0x3c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8000e2c:	460a      	mov	r2, r1
 8000e2e:	2180      	movs	r1, #128	; 0x80
 8000e30:	f7ff ffb0 	bl	8000d94 <SPI_WaitFlagStateUntilTimeout.constprop.9>
 8000e34:	b910      	cbnz	r0, 8000e3c <SPI_EndRxTxTransaction+0x30>
      }
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
  }

  return HAL_OK;
 8000e36:	2000      	movs	r0, #0
}
 8000e38:	b002      	add	sp, #8
 8000e3a:	bd70      	pop	{r4, r5, r6, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8000e3c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000e3e:	f043 0320 	orr.w	r3, r3, #32
 8000e42:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8000e44:	2003      	movs	r0, #3
 8000e46:	e7f7      	b.n	8000e38 <SPI_EndRxTxTransaction+0x2c>
      if (count == 0U)
 8000e48:	9b01      	ldr	r3, [sp, #4]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d0f3      	beq.n	8000e36 <SPI_EndRxTxTransaction+0x2a>
      count--;
 8000e4e:	9b01      	ldr	r3, [sp, #4]
 8000e50:	3b01      	subs	r3, #1
 8000e52:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8000e54:	6823      	ldr	r3, [r4, #0]
 8000e56:	689b      	ldr	r3, [r3, #8]
 8000e58:	061b      	lsls	r3, r3, #24
 8000e5a:	d4f5      	bmi.n	8000e48 <SPI_EndRxTxTransaction+0x3c>
 8000e5c:	e7eb      	b.n	8000e36 <SPI_EndRxTxTransaction+0x2a>
 8000e5e:	bf00      	nop
 8000e60:	20000008 	.word	0x20000008
 8000e64:	016e3600 	.word	0x016e3600

08000e68 <HAL_SPI_Init>:
{
 8000e68:	b510      	push	{r4, lr}
  if (hspi == NULL)
 8000e6a:	4604      	mov	r4, r0
 8000e6c:	2800      	cmp	r0, #0
 8000e6e:	d036      	beq.n	8000ede <HAL_SPI_Init+0x76>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e70:	2300      	movs	r3, #0
 8000e72:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8000e74:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8000e78:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000e7c:	b91b      	cbnz	r3, 8000e86 <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 8000e7e:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8000e82:	f001 fa13 	bl	80022ac <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8000e86:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000e88:	68a0      	ldr	r0, [r4, #8]
 8000e8a:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8000e92:	680b      	ldr	r3, [r1, #0]
 8000e94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000e98:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000e9a:	6863      	ldr	r3, [r4, #4]
 8000e9c:	4303      	orrs	r3, r0
 8000e9e:	68e0      	ldr	r0, [r4, #12]
 8000ea0:	4303      	orrs	r3, r0
 8000ea2:	6920      	ldr	r0, [r4, #16]
 8000ea4:	4303      	orrs	r3, r0
 8000ea6:	6960      	ldr	r0, [r4, #20]
 8000ea8:	4303      	orrs	r3, r0
 8000eaa:	69e0      	ldr	r0, [r4, #28]
 8000eac:	4303      	orrs	r3, r0
 8000eae:	6a20      	ldr	r0, [r4, #32]
 8000eb0:	4303      	orrs	r3, r0
 8000eb2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8000eb4:	4303      	orrs	r3, r0
 8000eb6:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8000eba:	4303      	orrs	r3, r0
 8000ebc:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8000ebe:	0c12      	lsrs	r2, r2, #16
 8000ec0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000ec2:	f002 0204 	and.w	r2, r2, #4
 8000ec6:	431a      	orrs	r2, r3
 8000ec8:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000eca:	69cb      	ldr	r3, [r1, #28]
 8000ecc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000ed0:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000ed2:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8000ed4:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000ed6:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8000ed8:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  return HAL_OK;
 8000edc:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000ede:	2001      	movs	r0, #1
}
 8000ee0:	bd10      	pop	{r4, pc}

08000ee2 <HAL_SPI_TransmitReceive>:
{
 8000ee2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8000ee6:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8000ee8:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8000eec:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 8000eee:	2b01      	cmp	r3, #1
{
 8000ef0:	4604      	mov	r4, r0
 8000ef2:	460d      	mov	r5, r1
 8000ef4:	4691      	mov	r9, r2
  __HAL_LOCK(hspi);
 8000ef6:	f000 80e2 	beq.w	80010be <HAL_SPI_TransmitReceive+0x1dc>
 8000efa:	2301      	movs	r3, #1
 8000efc:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8000f00:	f7ff fb3c 	bl	800057c <HAL_GetTick>
  tmp_state           = hspi->State;
 8000f04:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tmp_mode            = hspi->Init.Mode;
 8000f08:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 8000f0a:	b2db      	uxtb	r3, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8000f0c:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8000f0e:	4680      	mov	r8, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8000f10:	d00a      	beq.n	8000f28 <HAL_SPI_TransmitReceive+0x46>
 8000f12:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8000f16:	f040 80d0 	bne.w	80010ba <HAL_SPI_TransmitReceive+0x1d8>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8000f1a:	68a0      	ldr	r0, [r4, #8]
 8000f1c:	2800      	cmp	r0, #0
 8000f1e:	f040 80cc 	bne.w	80010ba <HAL_SPI_TransmitReceive+0x1d8>
 8000f22:	2b04      	cmp	r3, #4
 8000f24:	f040 80c9 	bne.w	80010ba <HAL_SPI_TransmitReceive+0x1d8>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8000f28:	2d00      	cmp	r5, #0
 8000f2a:	f000 80c4 	beq.w	80010b6 <HAL_SPI_TransmitReceive+0x1d4>
 8000f2e:	f1b9 0f00 	cmp.w	r9, #0
 8000f32:	f000 80c0 	beq.w	80010b6 <HAL_SPI_TransmitReceive+0x1d4>
 8000f36:	2e00      	cmp	r6, #0
 8000f38:	f000 80bd 	beq.w	80010b6 <HAL_SPI_TransmitReceive+0x1d4>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8000f3c:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8000f40:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8000f44:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8000f46:	bf1c      	itt	ne
 8000f48:	2305      	movne	r3, #5
 8000f4a:	f884 3051 	strbne.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 8000f52:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8000f54:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8000f56:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8000f58:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 8000f5a:	86e6      	strh	r6, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8000f5c:	681a      	ldr	r2, [r3, #0]
  hspi->RxXferSize  = Size;
 8000f5e:	87a6      	strh	r6, [r4, #60]	; 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8000f60:	0650      	lsls	r0, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8000f62:	bf58      	it	pl
 8000f64:	681a      	ldrpl	r2, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8000f66:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 8000f68:	bf58      	it	pl
 8000f6a:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
  hspi->TxXferSize  = Size;
 8000f6e:	86a6      	strh	r6, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 8000f70:	bf58      	it	pl
 8000f72:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8000f74:	68e2      	ldr	r2, [r4, #12]
 8000f76:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8000f7a:	d158      	bne.n	800102e <HAL_SPI_TransmitReceive+0x14c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8000f7c:	b109      	cbz	r1, 8000f82 <HAL_SPI_TransmitReceive+0xa0>
 8000f7e:	2e01      	cmp	r6, #1
 8000f80:	d107      	bne.n	8000f92 <HAL_SPI_TransmitReceive+0xb0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8000f82:	f835 2b02 	ldrh.w	r2, [r5], #2
 8000f86:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8000f88:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8000f8a:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8000f8c:	3b01      	subs	r3, #1
 8000f8e:	b29b      	uxth	r3, r3
 8000f90:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8000f92:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8000f94:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000f96:	b29b      	uxth	r3, r3
 8000f98:	b9ab      	cbnz	r3, 8000fc6 <HAL_SPI_TransmitReceive+0xe4>
 8000f9a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000f9c:	b29b      	uxth	r3, r3
 8000f9e:	b993      	cbnz	r3, 8000fc6 <HAL_SPI_TransmitReceive+0xe4>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8000fa0:	4642      	mov	r2, r8
 8000fa2:	4639      	mov	r1, r7
 8000fa4:	4620      	mov	r0, r4
 8000fa6:	f7ff ff31 	bl	8000e0c <SPI_EndRxTxTransaction>
 8000faa:	2800      	cmp	r0, #0
 8000fac:	f040 8081 	bne.w	80010b2 <HAL_SPI_TransmitReceive+0x1d0>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8000fb0:	68a3      	ldr	r3, [r4, #8]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d132      	bne.n	800101c <HAL_SPI_TransmitReceive+0x13a>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8000fb6:	6823      	ldr	r3, [r4, #0]
 8000fb8:	9001      	str	r0, [sp, #4]
 8000fba:	68da      	ldr	r2, [r3, #12]
 8000fbc:	9201      	str	r2, [sp, #4]
 8000fbe:	689b      	ldr	r3, [r3, #8]
 8000fc0:	9301      	str	r3, [sp, #4]
 8000fc2:	9b01      	ldr	r3, [sp, #4]
 8000fc4:	e02a      	b.n	800101c <HAL_SPI_TransmitReceive+0x13a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8000fc6:	6822      	ldr	r2, [r4, #0]
 8000fc8:	6893      	ldr	r3, [r2, #8]
 8000fca:	0799      	lsls	r1, r3, #30
 8000fcc:	d50d      	bpl.n	8000fea <HAL_SPI_TransmitReceive+0x108>
 8000fce:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000fd0:	b29b      	uxth	r3, r3
 8000fd2:	b153      	cbz	r3, 8000fea <HAL_SPI_TransmitReceive+0x108>
 8000fd4:	b14d      	cbz	r5, 8000fea <HAL_SPI_TransmitReceive+0x108>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8000fd6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000fd8:	f833 1b02 	ldrh.w	r1, [r3], #2
 8000fdc:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8000fde:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8000fe0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000fe2:	3b01      	subs	r3, #1
 8000fe4:	b29b      	uxth	r3, r3
 8000fe6:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8000fe8:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8000fea:	6893      	ldr	r3, [r2, #8]
 8000fec:	07db      	lsls	r3, r3, #31
 8000fee:	d50c      	bpl.n	800100a <HAL_SPI_TransmitReceive+0x128>
 8000ff0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000ff2:	b29b      	uxth	r3, r3
 8000ff4:	b14b      	cbz	r3, 800100a <HAL_SPI_TransmitReceive+0x128>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8000ff6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000ff8:	68d2      	ldr	r2, [r2, #12]
 8000ffa:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8000ffe:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8001000:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001002:	3b01      	subs	r3, #1
 8001004:	b29b      	uxth	r3, r3
 8001006:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8001008:	2501      	movs	r5, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800100a:	f7ff fab7 	bl	800057c <HAL_GetTick>
 800100e:	eba0 0008 	sub.w	r0, r0, r8
 8001012:	4287      	cmp	r7, r0
 8001014:	d8be      	bhi.n	8000f94 <HAL_SPI_TransmitReceive+0xb2>
 8001016:	1c7e      	adds	r6, r7, #1
 8001018:	d0bc      	beq.n	8000f94 <HAL_SPI_TransmitReceive+0xb2>
        errorcode = HAL_TIMEOUT;
 800101a:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 800101c:	2301      	movs	r3, #1
 800101e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001022:	2300      	movs	r3, #0
 8001024:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8001028:	b003      	add	sp, #12
 800102a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800102e:	b109      	cbz	r1, 8001034 <HAL_SPI_TransmitReceive+0x152>
 8001030:	2e01      	cmp	r6, #1
 8001032:	d108      	bne.n	8001046 <HAL_SPI_TransmitReceive+0x164>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001034:	782a      	ldrb	r2, [r5, #0]
 8001036:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001038:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800103a:	3301      	adds	r3, #1
 800103c:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800103e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001040:	3b01      	subs	r3, #1
 8001042:	b29b      	uxth	r3, r3
 8001044:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8001046:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001048:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800104a:	b29b      	uxth	r3, r3
 800104c:	b91b      	cbnz	r3, 8001056 <HAL_SPI_TransmitReceive+0x174>
 800104e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001050:	b29b      	uxth	r3, r3
 8001052:	2b00      	cmp	r3, #0
 8001054:	d0a4      	beq.n	8000fa0 <HAL_SPI_TransmitReceive+0xbe>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001056:	6822      	ldr	r2, [r4, #0]
 8001058:	6893      	ldr	r3, [r2, #8]
 800105a:	0798      	lsls	r0, r3, #30
 800105c:	d50e      	bpl.n	800107c <HAL_SPI_TransmitReceive+0x19a>
 800105e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001060:	b29b      	uxth	r3, r3
 8001062:	b15b      	cbz	r3, 800107c <HAL_SPI_TransmitReceive+0x19a>
 8001064:	b155      	cbz	r5, 800107c <HAL_SPI_TransmitReceive+0x19a>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001066:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 800106c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800106e:	3301      	adds	r3, #1
 8001070:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8001072:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001074:	3b01      	subs	r3, #1
 8001076:	b29b      	uxth	r3, r3
 8001078:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 800107a:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800107c:	6822      	ldr	r2, [r4, #0]
 800107e:	6893      	ldr	r3, [r2, #8]
 8001080:	07d9      	lsls	r1, r3, #31
 8001082:	d50d      	bpl.n	80010a0 <HAL_SPI_TransmitReceive+0x1be>
 8001084:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001086:	b29b      	uxth	r3, r3
 8001088:	b153      	cbz	r3, 80010a0 <HAL_SPI_TransmitReceive+0x1be>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800108a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800108c:	68d2      	ldr	r2, [r2, #12]
 800108e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001090:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001092:	3301      	adds	r3, #1
 8001094:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8001096:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001098:	3b01      	subs	r3, #1
 800109a:	b29b      	uxth	r3, r3
 800109c:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 800109e:	2501      	movs	r5, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80010a0:	f7ff fa6c 	bl	800057c <HAL_GetTick>
 80010a4:	eba0 0008 	sub.w	r0, r0, r8
 80010a8:	4287      	cmp	r7, r0
 80010aa:	d8cd      	bhi.n	8001048 <HAL_SPI_TransmitReceive+0x166>
 80010ac:	1c7b      	adds	r3, r7, #1
 80010ae:	d0cb      	beq.n	8001048 <HAL_SPI_TransmitReceive+0x166>
 80010b0:	e7b3      	b.n	800101a <HAL_SPI_TransmitReceive+0x138>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80010b2:	2320      	movs	r3, #32
 80010b4:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 80010b6:	2001      	movs	r0, #1
 80010b8:	e7b0      	b.n	800101c <HAL_SPI_TransmitReceive+0x13a>
    errorcode = HAL_BUSY;
 80010ba:	2002      	movs	r0, #2
 80010bc:	e7ae      	b.n	800101c <HAL_SPI_TransmitReceive+0x13a>
  __HAL_LOCK(hspi);
 80010be:	2002      	movs	r0, #2
 80010c0:	e7b2      	b.n	8001028 <HAL_SPI_TransmitReceive+0x146>

080010c2 <HAL_TIM_PeriodElapsedCallback>:
 80010c2:	4770      	bx	lr

080010c4 <HAL_TIM_OC_DelayElapsedCallback>:
 80010c4:	4770      	bx	lr

080010c6 <HAL_TIM_IC_CaptureCallback>:
 80010c6:	4770      	bx	lr

080010c8 <HAL_TIM_PWM_PulseFinishedCallback>:
 80010c8:	4770      	bx	lr

080010ca <HAL_TIM_TriggerCallback>:
 80010ca:	4770      	bx	lr

080010cc <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80010cc:	6803      	ldr	r3, [r0, #0]
 80010ce:	691a      	ldr	r2, [r3, #16]
 80010d0:	0791      	lsls	r1, r2, #30
{
 80010d2:	b510      	push	{r4, lr}
 80010d4:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80010d6:	d50e      	bpl.n	80010f6 <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80010d8:	68da      	ldr	r2, [r3, #12]
 80010da:	0792      	lsls	r2, r2, #30
 80010dc:	d50b      	bpl.n	80010f6 <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80010de:	f06f 0202 	mvn.w	r2, #2
 80010e2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80010e4:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80010e6:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80010e8:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80010ea:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80010ec:	d077      	beq.n	80011de <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80010ee:	f7ff ffea 	bl	80010c6 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80010f2:	2300      	movs	r3, #0
 80010f4:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80010f6:	6823      	ldr	r3, [r4, #0]
 80010f8:	691a      	ldr	r2, [r3, #16]
 80010fa:	0750      	lsls	r0, r2, #29
 80010fc:	d510      	bpl.n	8001120 <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80010fe:	68da      	ldr	r2, [r3, #12]
 8001100:	0751      	lsls	r1, r2, #29
 8001102:	d50d      	bpl.n	8001120 <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001104:	f06f 0204 	mvn.w	r2, #4
 8001108:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800110a:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800110c:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800110e:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001112:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001114:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001116:	d068      	beq.n	80011ea <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8001118:	f7ff ffd5 	bl	80010c6 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800111c:	2300      	movs	r3, #0
 800111e:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001120:	6823      	ldr	r3, [r4, #0]
 8001122:	691a      	ldr	r2, [r3, #16]
 8001124:	0712      	lsls	r2, r2, #28
 8001126:	d50f      	bpl.n	8001148 <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001128:	68da      	ldr	r2, [r3, #12]
 800112a:	0710      	lsls	r0, r2, #28
 800112c:	d50c      	bpl.n	8001148 <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800112e:	f06f 0208 	mvn.w	r2, #8
 8001132:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001134:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001136:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001138:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800113a:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800113c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800113e:	d05a      	beq.n	80011f6 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001140:	f7ff ffc1 	bl	80010c6 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001144:	2300      	movs	r3, #0
 8001146:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001148:	6823      	ldr	r3, [r4, #0]
 800114a:	691a      	ldr	r2, [r3, #16]
 800114c:	06d2      	lsls	r2, r2, #27
 800114e:	d510      	bpl.n	8001172 <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001150:	68da      	ldr	r2, [r3, #12]
 8001152:	06d0      	lsls	r0, r2, #27
 8001154:	d50d      	bpl.n	8001172 <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001156:	f06f 0210 	mvn.w	r2, #16
 800115a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800115c:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800115e:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001160:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001164:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001166:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001168:	d04b      	beq.n	8001202 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 800116a:	f7ff ffac 	bl	80010c6 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800116e:	2300      	movs	r3, #0
 8001170:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001172:	6823      	ldr	r3, [r4, #0]
 8001174:	691a      	ldr	r2, [r3, #16]
 8001176:	07d1      	lsls	r1, r2, #31
 8001178:	d508      	bpl.n	800118c <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800117a:	68da      	ldr	r2, [r3, #12]
 800117c:	07d2      	lsls	r2, r2, #31
 800117e:	d505      	bpl.n	800118c <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001180:	f06f 0201 	mvn.w	r2, #1
 8001184:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001186:	4620      	mov	r0, r4
 8001188:	f7ff ff9b 	bl	80010c2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800118c:	6823      	ldr	r3, [r4, #0]
 800118e:	691a      	ldr	r2, [r3, #16]
 8001190:	0610      	lsls	r0, r2, #24
 8001192:	d508      	bpl.n	80011a6 <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001194:	68da      	ldr	r2, [r3, #12]
 8001196:	0611      	lsls	r1, r2, #24
 8001198:	d505      	bpl.n	80011a6 <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800119a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800119e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80011a0:	4620      	mov	r0, r4
 80011a2:	f000 f996 	bl	80014d2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80011a6:	6823      	ldr	r3, [r4, #0]
 80011a8:	691a      	ldr	r2, [r3, #16]
 80011aa:	0652      	lsls	r2, r2, #25
 80011ac:	d508      	bpl.n	80011c0 <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80011ae:	68da      	ldr	r2, [r3, #12]
 80011b0:	0650      	lsls	r0, r2, #25
 80011b2:	d505      	bpl.n	80011c0 <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80011b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80011b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80011ba:	4620      	mov	r0, r4
 80011bc:	f7ff ff85 	bl	80010ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80011c0:	6823      	ldr	r3, [r4, #0]
 80011c2:	691a      	ldr	r2, [r3, #16]
 80011c4:	0691      	lsls	r1, r2, #26
 80011c6:	d522      	bpl.n	800120e <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80011c8:	68da      	ldr	r2, [r3, #12]
 80011ca:	0692      	lsls	r2, r2, #26
 80011cc:	d51f      	bpl.n	800120e <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80011ce:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80011d2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80011d4:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80011d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 80011da:	f000 b979 	b.w	80014d0 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80011de:	f7ff ff71 	bl	80010c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80011e2:	4620      	mov	r0, r4
 80011e4:	f7ff ff70 	bl	80010c8 <HAL_TIM_PWM_PulseFinishedCallback>
 80011e8:	e783      	b.n	80010f2 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80011ea:	f7ff ff6b 	bl	80010c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80011ee:	4620      	mov	r0, r4
 80011f0:	f7ff ff6a 	bl	80010c8 <HAL_TIM_PWM_PulseFinishedCallback>
 80011f4:	e792      	b.n	800111c <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80011f6:	f7ff ff65 	bl	80010c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80011fa:	4620      	mov	r0, r4
 80011fc:	f7ff ff64 	bl	80010c8 <HAL_TIM_PWM_PulseFinishedCallback>
 8001200:	e7a0      	b.n	8001144 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001202:	f7ff ff5f 	bl	80010c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001206:	4620      	mov	r0, r4
 8001208:	f7ff ff5e 	bl	80010c8 <HAL_TIM_PWM_PulseFinishedCallback>
 800120c:	e7af      	b.n	800116e <HAL_TIM_IRQHandler+0xa2>
 800120e:	bd10      	pop	{r4, pc}

08001210 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001210:	4a30      	ldr	r2, [pc, #192]	; (80012d4 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8001212:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001214:	4290      	cmp	r0, r2
 8001216:	d012      	beq.n	800123e <TIM_Base_SetConfig+0x2e>
 8001218:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800121c:	d00f      	beq.n	800123e <TIM_Base_SetConfig+0x2e>
 800121e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001222:	4290      	cmp	r0, r2
 8001224:	d00b      	beq.n	800123e <TIM_Base_SetConfig+0x2e>
 8001226:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800122a:	4290      	cmp	r0, r2
 800122c:	d007      	beq.n	800123e <TIM_Base_SetConfig+0x2e>
 800122e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001232:	4290      	cmp	r0, r2
 8001234:	d003      	beq.n	800123e <TIM_Base_SetConfig+0x2e>
 8001236:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800123a:	4290      	cmp	r0, r2
 800123c:	d119      	bne.n	8001272 <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800123e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001240:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001244:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001246:	4a23      	ldr	r2, [pc, #140]	; (80012d4 <TIM_Base_SetConfig+0xc4>)
 8001248:	4290      	cmp	r0, r2
 800124a:	d029      	beq.n	80012a0 <TIM_Base_SetConfig+0x90>
 800124c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001250:	d026      	beq.n	80012a0 <TIM_Base_SetConfig+0x90>
 8001252:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001256:	4290      	cmp	r0, r2
 8001258:	d022      	beq.n	80012a0 <TIM_Base_SetConfig+0x90>
 800125a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800125e:	4290      	cmp	r0, r2
 8001260:	d01e      	beq.n	80012a0 <TIM_Base_SetConfig+0x90>
 8001262:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001266:	4290      	cmp	r0, r2
 8001268:	d01a      	beq.n	80012a0 <TIM_Base_SetConfig+0x90>
 800126a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800126e:	4290      	cmp	r0, r2
 8001270:	d016      	beq.n	80012a0 <TIM_Base_SetConfig+0x90>
 8001272:	4a19      	ldr	r2, [pc, #100]	; (80012d8 <TIM_Base_SetConfig+0xc8>)
 8001274:	4290      	cmp	r0, r2
 8001276:	d013      	beq.n	80012a0 <TIM_Base_SetConfig+0x90>
 8001278:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800127c:	4290      	cmp	r0, r2
 800127e:	d00f      	beq.n	80012a0 <TIM_Base_SetConfig+0x90>
 8001280:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001284:	4290      	cmp	r0, r2
 8001286:	d00b      	beq.n	80012a0 <TIM_Base_SetConfig+0x90>
 8001288:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800128c:	4290      	cmp	r0, r2
 800128e:	d007      	beq.n	80012a0 <TIM_Base_SetConfig+0x90>
 8001290:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001294:	4290      	cmp	r0, r2
 8001296:	d003      	beq.n	80012a0 <TIM_Base_SetConfig+0x90>
 8001298:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800129c:	4290      	cmp	r0, r2
 800129e:	d103      	bne.n	80012a8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80012a0:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80012a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80012a6:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80012a8:	694a      	ldr	r2, [r1, #20]
 80012aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80012ae:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80012b0:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80012b2:	688b      	ldr	r3, [r1, #8]
 80012b4:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80012b6:	680b      	ldr	r3, [r1, #0]
 80012b8:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80012ba:	4b06      	ldr	r3, [pc, #24]	; (80012d4 <TIM_Base_SetConfig+0xc4>)
 80012bc:	4298      	cmp	r0, r3
 80012be:	d003      	beq.n	80012c8 <TIM_Base_SetConfig+0xb8>
 80012c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80012c4:	4298      	cmp	r0, r3
 80012c6:	d101      	bne.n	80012cc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80012c8:	690b      	ldr	r3, [r1, #16]
 80012ca:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80012cc:	2301      	movs	r3, #1
 80012ce:	6143      	str	r3, [r0, #20]
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	40010000 	.word	0x40010000
 80012d8:	40014000 	.word	0x40014000

080012dc <HAL_TIM_Base_Init>:
{
 80012dc:	b510      	push	{r4, lr}
  if (htim == NULL)
 80012de:	4604      	mov	r4, r0
 80012e0:	b1a0      	cbz	r0, 800130c <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 80012e2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80012e6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80012ea:	b91b      	cbnz	r3, 80012f4 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80012ec:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80012f0:	f001 f828 	bl	8002344 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80012f4:	2302      	movs	r3, #2
 80012f6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80012fa:	6820      	ldr	r0, [r4, #0]
 80012fc:	1d21      	adds	r1, r4, #4
 80012fe:	f7ff ff87 	bl	8001210 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8001302:	2301      	movs	r3, #1
 8001304:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001308:	2000      	movs	r0, #0
 800130a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800130c:	2001      	movs	r0, #1
}
 800130e:	bd10      	pop	{r4, pc}

08001310 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001310:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001312:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001314:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001316:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800131a:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 800131e:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001320:	6083      	str	r3, [r0, #8]
 8001322:	bd10      	pop	{r4, pc}

08001324 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8001324:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001328:	2b01      	cmp	r3, #1
{
 800132a:	b570      	push	{r4, r5, r6, lr}
 800132c:	4604      	mov	r4, r0
 800132e:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8001332:	d019      	beq.n	8001368 <HAL_TIM_ConfigClockSource+0x44>
  htim->State = HAL_TIM_STATE_BUSY;
 8001334:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8001338:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 800133a:	2301      	movs	r3, #1
 800133c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8001340:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001342:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001346:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 800134a:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 800134c:	680b      	ldr	r3, [r1, #0]
 800134e:	2b40      	cmp	r3, #64	; 0x40
 8001350:	d065      	beq.n	800141e <HAL_TIM_ConfigClockSource+0xfa>
 8001352:	d815      	bhi.n	8001380 <HAL_TIM_ConfigClockSource+0x5c>
 8001354:	2b10      	cmp	r3, #16
 8001356:	d00c      	beq.n	8001372 <HAL_TIM_ConfigClockSource+0x4e>
 8001358:	d807      	bhi.n	800136a <HAL_TIM_ConfigClockSource+0x46>
 800135a:	b153      	cbz	r3, 8001372 <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_READY;
 800135c:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800135e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001360:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001364:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001368:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 800136a:	2b20      	cmp	r3, #32
 800136c:	d001      	beq.n	8001372 <HAL_TIM_ConfigClockSource+0x4e>
 800136e:	2b30      	cmp	r3, #48	; 0x30
 8001370:	d1f4      	bne.n	800135c <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr = TIMx->SMCR;
 8001372:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001374:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 8001378:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800137c:	4313      	orrs	r3, r2
 800137e:	e01a      	b.n	80013b6 <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 8001380:	2b60      	cmp	r3, #96	; 0x60
 8001382:	d034      	beq.n	80013ee <HAL_TIM_ConfigClockSource+0xca>
 8001384:	d819      	bhi.n	80013ba <HAL_TIM_ConfigClockSource+0x96>
 8001386:	2b50      	cmp	r3, #80	; 0x50
 8001388:	d1e8      	bne.n	800135c <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800138a:	684a      	ldr	r2, [r1, #4]
 800138c:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800138e:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001390:	6a05      	ldr	r5, [r0, #32]
 8001392:	f025 0501 	bic.w	r5, r5, #1
 8001396:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001398:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800139a:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800139e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80013a2:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 80013a6:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 80013a8:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80013aa:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80013ac:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80013ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80013b2:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 80013b6:	6083      	str	r3, [r0, #8]
 80013b8:	e7d0      	b.n	800135c <HAL_TIM_ConfigClockSource+0x38>
  switch (sClockSourceConfig->ClockSource)
 80013ba:	2b70      	cmp	r3, #112	; 0x70
 80013bc:	d00c      	beq.n	80013d8 <HAL_TIM_ConfigClockSource+0xb4>
 80013be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80013c2:	d1cb      	bne.n	800135c <HAL_TIM_ConfigClockSource+0x38>
      TIM_ETR_SetConfig(htim->Instance,
 80013c4:	68cb      	ldr	r3, [r1, #12]
 80013c6:	684a      	ldr	r2, [r1, #4]
 80013c8:	6889      	ldr	r1, [r1, #8]
 80013ca:	f7ff ffa1 	bl	8001310 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80013ce:	6822      	ldr	r2, [r4, #0]
 80013d0:	6893      	ldr	r3, [r2, #8]
 80013d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013d6:	e008      	b.n	80013ea <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 80013d8:	68cb      	ldr	r3, [r1, #12]
 80013da:	684a      	ldr	r2, [r1, #4]
 80013dc:	6889      	ldr	r1, [r1, #8]
 80013de:	f7ff ff97 	bl	8001310 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80013e2:	6822      	ldr	r2, [r4, #0]
 80013e4:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80013e6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80013ea:	6093      	str	r3, [r2, #8]
      break;
 80013ec:	e7b6      	b.n	800135c <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80013ee:	684d      	ldr	r5, [r1, #4]
 80013f0:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80013f2:	6a01      	ldr	r1, [r0, #32]
 80013f4:	f021 0110 	bic.w	r1, r1, #16
 80013f8:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80013fa:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 80013fc:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80013fe:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001402:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8001406:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800140a:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 800140e:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001410:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8001412:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001414:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001418:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 800141c:	e7cb      	b.n	80013b6 <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800141e:	684a      	ldr	r2, [r1, #4]
 8001420:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001422:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001424:	6a05      	ldr	r5, [r0, #32]
 8001426:	f025 0501 	bic.w	r5, r5, #1
 800142a:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800142c:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800142e:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001432:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001436:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 800143a:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 800143c:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800143e:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8001440:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001442:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001446:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 800144a:	e7b4      	b.n	80013b6 <HAL_TIM_ConfigClockSource+0x92>

0800144c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800144c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001450:	2b01      	cmp	r3, #1
{
 8001452:	b530      	push	{r4, r5, lr}
 8001454:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8001458:	d035      	beq.n	80014c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800145a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800145e:	6803      	ldr	r3, [r0, #0]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001460:	680d      	ldr	r5, [r1, #0]
  tmpcr2 = htim->Instance->CR2;
 8001462:	685c      	ldr	r4, [r3, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 8001464:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  __HAL_LOCK(htim);
 8001468:	2201      	movs	r2, #1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800146a:	432c      	orrs	r4, r5
  __HAL_LOCK(htim);
 800146c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8001470:	689a      	ldr	r2, [r3, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001472:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001474:	4c15      	ldr	r4, [pc, #84]	; (80014cc <HAL_TIMEx_MasterConfigSynchronization+0x80>)
 8001476:	42a3      	cmp	r3, r4
 8001478:	d01a      	beq.n	80014b0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800147a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800147e:	d017      	beq.n	80014b0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8001480:	f5a4 447c 	sub.w	r4, r4, #64512	; 0xfc00
 8001484:	42a3      	cmp	r3, r4
 8001486:	d013      	beq.n	80014b0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8001488:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800148c:	42a3      	cmp	r3, r4
 800148e:	d00f      	beq.n	80014b0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8001490:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001494:	42a3      	cmp	r3, r4
 8001496:	d00b      	beq.n	80014b0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8001498:	f504 4478 	add.w	r4, r4, #63488	; 0xf800
 800149c:	42a3      	cmp	r3, r4
 800149e:	d007      	beq.n	80014b0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80014a0:	f504 5470 	add.w	r4, r4, #15360	; 0x3c00
 80014a4:	42a3      	cmp	r3, r4
 80014a6:	d003      	beq.n	80014b0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80014a8:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 80014ac:	42a3      	cmp	r3, r4
 80014ae:	d104      	bne.n	80014ba <HAL_TIMEx_MasterConfigSynchronization+0x6e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80014b0:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80014b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80014b6:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80014b8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80014ba:	2301      	movs	r3, #1
 80014bc:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80014c0:	2300      	movs	r3, #0
 80014c2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 80014c6:	4618      	mov	r0, r3

  return HAL_OK;
}
 80014c8:	bd30      	pop	{r4, r5, pc}
 80014ca:	bf00      	nop
 80014cc:	40010000 	.word	0x40010000

080014d0 <HAL_TIMEx_CommutCallback>:
 80014d0:	4770      	bx	lr

080014d2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80014d2:	4770      	bx	lr

080014d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80014d4:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80014d6:	6803      	ldr	r3, [r0, #0]
 80014d8:	68c1      	ldr	r1, [r0, #12]
 80014da:	691a      	ldr	r2, [r3, #16]
{
 80014dc:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80014de:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80014e2:	430a      	orrs	r2, r1
 80014e4:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80014e6:	6925      	ldr	r5, [r4, #16]
 80014e8:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1,
 80014ea:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80014ec:	69c0      	ldr	r0, [r0, #28]
 80014ee:	432a      	orrs	r2, r5
 80014f0:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 80014f2:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80014f6:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 80014f8:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80014fc:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 80014fe:	430a      	orrs	r2, r1
 8001500:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001502:	695a      	ldr	r2, [r3, #20]
 8001504:	69a1      	ldr	r1, [r4, #24]
 8001506:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800150a:	430a      	orrs	r2, r1

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800150c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001510:	615a      	str	r2, [r3, #20]
 8001512:	4a25      	ldr	r2, [pc, #148]	; (80015a8 <UART_SetConfig+0xd4>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001514:	d129      	bne.n	800156a <UART_SetConfig+0x96>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001516:	4293      	cmp	r3, r2
 8001518:	d003      	beq.n	8001522 <UART_SetConfig+0x4e>
 800151a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800151e:	4293      	cmp	r3, r2
 8001520:	d120      	bne.n	8001564 <UART_SetConfig+0x90>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001522:	f7ff fc27 	bl	8000d74 <HAL_RCC_GetPCLK2Freq>
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001526:	6862      	ldr	r2, [r4, #4]
 8001528:	6825      	ldr	r5, [r4, #0]
 800152a:	1892      	adds	r2, r2, r2
 800152c:	f04f 0300 	mov.w	r3, #0
 8001530:	f04f 0119 	mov.w	r1, #25
 8001534:	415b      	adcs	r3, r3
 8001536:	fba0 0101 	umull	r0, r1, r0, r1
 800153a:	f7fe fe4d 	bl	80001d8 <__aeabi_uldivmod>
 800153e:	2164      	movs	r1, #100	; 0x64
 8001540:	fbb0 f4f1 	udiv	r4, r0, r1
 8001544:	fb01 0314 	mls	r3, r1, r4, r0
 8001548:	00db      	lsls	r3, r3, #3
 800154a:	3332      	adds	r3, #50	; 0x32
 800154c:	fbb3 f3f1 	udiv	r3, r3, r1
 8001550:	f003 0207 	and.w	r2, r3, #7
 8001554:	005b      	lsls	r3, r3, #1
 8001556:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 800155a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800155e:	4413      	add	r3, r2
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001560:	60ab      	str	r3, [r5, #8]
 8001562:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 8001564:	f7ff fbf6 	bl	8000d54 <HAL_RCC_GetPCLK1Freq>
 8001568:	e7dd      	b.n	8001526 <UART_SetConfig+0x52>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800156a:	4293      	cmp	r3, r2
 800156c:	d002      	beq.n	8001574 <UART_SetConfig+0xa0>
 800156e:	4a0f      	ldr	r2, [pc, #60]	; (80015ac <UART_SetConfig+0xd8>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d116      	bne.n	80015a2 <UART_SetConfig+0xce>
      pclk = HAL_RCC_GetPCLK2Freq();
 8001574:	f7ff fbfe 	bl	8000d74 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001578:	6863      	ldr	r3, [r4, #4]
 800157a:	6825      	ldr	r5, [r4, #0]
 800157c:	2119      	movs	r1, #25
 800157e:	009a      	lsls	r2, r3, #2
 8001580:	fba0 0101 	umull	r0, r1, r0, r1
 8001584:	0f9b      	lsrs	r3, r3, #30
 8001586:	f7fe fe27 	bl	80001d8 <__aeabi_uldivmod>
 800158a:	2264      	movs	r2, #100	; 0x64
 800158c:	fbb0 f1f2 	udiv	r1, r0, r2
 8001590:	fb02 0311 	mls	r3, r2, r1, r0
 8001594:	011b      	lsls	r3, r3, #4
 8001596:	3332      	adds	r3, #50	; 0x32
 8001598:	fbb3 f3f2 	udiv	r3, r3, r2
 800159c:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80015a0:	e7de      	b.n	8001560 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK1Freq();
 80015a2:	f7ff fbd7 	bl	8000d54 <HAL_RCC_GetPCLK1Freq>
 80015a6:	e7e7      	b.n	8001578 <UART_SetConfig+0xa4>
 80015a8:	40011000 	.word	0x40011000
 80015ac:	40011400 	.word	0x40011400

080015b0 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 80015b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015b2:	4604      	mov	r4, r0
 80015b4:	460e      	mov	r6, r1
 80015b6:	4617      	mov	r7, r2
 80015b8:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80015ba:	6821      	ldr	r1, [r4, #0]
 80015bc:	680b      	ldr	r3, [r1, #0]
 80015be:	ea36 0303 	bics.w	r3, r6, r3
 80015c2:	d101      	bne.n	80015c8 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 80015c4:	2000      	movs	r0, #0
}
 80015c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 80015c8:	1c6b      	adds	r3, r5, #1
 80015ca:	d0f7      	beq.n	80015bc <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80015cc:	b995      	cbnz	r5, 80015f4 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80015ce:	6823      	ldr	r3, [r4, #0]
 80015d0:	68da      	ldr	r2, [r3, #12]
 80015d2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80015d6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80015d8:	695a      	ldr	r2, [r3, #20]
 80015da:	f022 0201 	bic.w	r2, r2, #1
 80015de:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 80015e0:	2320      	movs	r3, #32
 80015e2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80015e6:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 80015ea:	2300      	movs	r3, #0
 80015ec:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 80015f0:	2003      	movs	r0, #3
 80015f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80015f4:	f7fe ffc2 	bl	800057c <HAL_GetTick>
 80015f8:	1bc0      	subs	r0, r0, r7
 80015fa:	4285      	cmp	r5, r0
 80015fc:	d2dd      	bcs.n	80015ba <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 80015fe:	e7e6      	b.n	80015ce <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08001600 <HAL_UART_Init>:
{
 8001600:	b510      	push	{r4, lr}
  if (huart == NULL)
 8001602:	4604      	mov	r4, r0
 8001604:	b340      	cbz	r0, 8001658 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8001606:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800160a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800160e:	b91b      	cbnz	r3, 8001618 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001610:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001614:	f000 feb4 	bl	8002380 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001618:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800161a:	2324      	movs	r3, #36	; 0x24
 800161c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001620:	68d3      	ldr	r3, [r2, #12]
 8001622:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001626:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001628:	4620      	mov	r0, r4
 800162a:	f7ff ff53 	bl	80014d4 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800162e:	6823      	ldr	r3, [r4, #0]
 8001630:	691a      	ldr	r2, [r3, #16]
 8001632:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001636:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001638:	695a      	ldr	r2, [r3, #20]
 800163a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800163e:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001640:	68da      	ldr	r2, [r3, #12]
 8001642:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001646:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001648:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800164a:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800164c:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800164e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001652:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8001656:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001658:	2001      	movs	r0, #1
}
 800165a:	bd10      	pop	{r4, pc}

0800165c <HAL_UART_Transmit>:
{
 800165c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001660:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8001662:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001666:	2b20      	cmp	r3, #32
{
 8001668:	4604      	mov	r4, r0
 800166a:	460d      	mov	r5, r1
 800166c:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800166e:	d151      	bne.n	8001714 <HAL_UART_Transmit+0xb8>
    if ((pData == NULL) || (Size == 0U))
 8001670:	2900      	cmp	r1, #0
 8001672:	d04c      	beq.n	800170e <HAL_UART_Transmit+0xb2>
 8001674:	2a00      	cmp	r2, #0
 8001676:	d04a      	beq.n	800170e <HAL_UART_Transmit+0xb2>
    __HAL_LOCK(huart);
 8001678:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800167c:	2b01      	cmp	r3, #1
 800167e:	d049      	beq.n	8001714 <HAL_UART_Transmit+0xb8>
 8001680:	2301      	movs	r3, #1
 8001682:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001686:	f04f 0900 	mov.w	r9, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800168a:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800168c:	f8c0 903c 	str.w	r9, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001690:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8001694:	f7fe ff72 	bl	800057c <HAL_GetTick>
    huart->TxXferSize = Size;
 8001698:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 800169c:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 800169e:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    __HAL_UNLOCK(huart);
 80016a2:	f884 9038 	strb.w	r9, [r4, #56]	; 0x38
    while (huart->TxXferCount > 0U)
 80016a6:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80016a8:	b29b      	uxth	r3, r3
 80016aa:	b95b      	cbnz	r3, 80016c4 <HAL_UART_Transmit+0x68>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80016ac:	463b      	mov	r3, r7
 80016ae:	4632      	mov	r2, r6
 80016b0:	2140      	movs	r1, #64	; 0x40
 80016b2:	4620      	mov	r0, r4
 80016b4:	f7ff ff7c 	bl	80015b0 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80016b8:	b9a0      	cbnz	r0, 80016e4 <HAL_UART_Transmit+0x88>
    huart->gState = HAL_UART_STATE_READY;
 80016ba:	2320      	movs	r3, #32
 80016bc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 80016c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      huart->TxXferCount--;
 80016c4:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80016c6:	3b01      	subs	r3, #1
 80016c8:	b29b      	uxth	r3, r3
 80016ca:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80016cc:	68a3      	ldr	r3, [r4, #8]
 80016ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80016d2:	4632      	mov	r2, r6
 80016d4:	463b      	mov	r3, r7
 80016d6:	f04f 0180 	mov.w	r1, #128	; 0x80
 80016da:	4620      	mov	r0, r4
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80016dc:	d10e      	bne.n	80016fc <HAL_UART_Transmit+0xa0>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80016de:	f7ff ff67 	bl	80015b0 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80016e2:	b110      	cbz	r0, 80016ea <HAL_UART_Transmit+0x8e>
          return HAL_TIMEOUT;
 80016e4:	2003      	movs	r0, #3
 80016e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80016ea:	882b      	ldrh	r3, [r5, #0]
 80016ec:	6822      	ldr	r2, [r4, #0]
 80016ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80016f2:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80016f4:	6923      	ldr	r3, [r4, #16]
 80016f6:	b943      	cbnz	r3, 800170a <HAL_UART_Transmit+0xae>
          pData += 2U;
 80016f8:	3502      	adds	r5, #2
 80016fa:	e7d4      	b.n	80016a6 <HAL_UART_Transmit+0x4a>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80016fc:	f7ff ff58 	bl	80015b0 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001700:	2800      	cmp	r0, #0
 8001702:	d1ef      	bne.n	80016e4 <HAL_UART_Transmit+0x88>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001704:	6823      	ldr	r3, [r4, #0]
 8001706:	782a      	ldrb	r2, [r5, #0]
 8001708:	605a      	str	r2, [r3, #4]
 800170a:	3501      	adds	r5, #1
 800170c:	e7cb      	b.n	80016a6 <HAL_UART_Transmit+0x4a>
      return  HAL_ERROR;
 800170e:	2001      	movs	r0, #1
 8001710:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 8001714:	2002      	movs	r0, #2
}
 8001716:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

0800171c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800171c:	b530      	push	{r4, r5, lr}
 800171e:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001720:	2230      	movs	r2, #48	; 0x30
 8001722:	2100      	movs	r1, #0
 8001724:	a808      	add	r0, sp, #32
 8001726:	f000 fed1 	bl	80024cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800172a:	2100      	movs	r1, #0
 800172c:	2214      	movs	r2, #20
 800172e:	a803      	add	r0, sp, #12
 8001730:	f000 fecc 	bl	80024cc <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001734:	2400      	movs	r4, #0
 8001736:	4b1d      	ldr	r3, [pc, #116]	; (80017ac <SystemClock_Config+0x90>)
 8001738:	9401      	str	r4, [sp, #4]
 800173a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800173c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001740:	641a      	str	r2, [r3, #64]	; 0x40
 8001742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001744:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001748:	9301      	str	r3, [sp, #4]
 800174a:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800174c:	4b18      	ldr	r3, [pc, #96]	; (80017b0 <SystemClock_Config+0x94>)
 800174e:	9402      	str	r4, [sp, #8]
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001756:	601a      	str	r2, [r3, #0]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800175e:	9302      	str	r3, [sp, #8]
 8001760:	9b02      	ldr	r3, [sp, #8]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001762:	2301      	movs	r3, #1
 8001764:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001766:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800176a:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800176c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001770:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001772:	2308      	movs	r3, #8
 8001774:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001776:	f44f 73a8 	mov.w	r3, #336	; 0x150
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800177a:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLN = 336;
 800177c:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800177e:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001780:	2307      	movs	r3, #7
 8001782:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001784:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001786:	9512      	str	r5, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001788:	f7ff f874 	bl	8000874 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800178c:	230f      	movs	r3, #15
 800178e:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001790:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001794:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001796:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001798:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800179c:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800179e:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017a0:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80017a2:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80017a4:	f7ff fa3a 	bl	8000c1c <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 80017a8:	b015      	add	sp, #84	; 0x54
 80017aa:	bd30      	pop	{r4, r5, pc}
 80017ac:	40023800 	.word	0x40023800
 80017b0:	40007000 	.word	0x40007000

080017b4 <main>:
{
 80017b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80017b8:	f2ad 4d14 	subw	sp, sp, #1044	; 0x414
  HAL_Init();
 80017bc:	f7fe feb8 	bl	8000530 <HAL_Init>
  SystemClock_Config();
 80017c0:	f7ff ffac 	bl	800171c <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c4:	2214      	movs	r2, #20
 80017c6:	2100      	movs	r1, #0
 80017c8:	a80a      	add	r0, sp, #40	; 0x28

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017ca:	2400      	movs	r4, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017cc:	f000 fe7e 	bl	80024cc <memset>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017d0:	4b89      	ldr	r3, [pc, #548]	; (80019f8 <main+0x244>)
 80017d2:	9403      	str	r4, [sp, #12]
 80017d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CE_Pin|CS_Pin, GPIO_PIN_RESET);
 80017d6:	4f89      	ldr	r7, [pc, #548]	; (80019fc <main+0x248>)
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80017d8:	4889      	ldr	r0, [pc, #548]	; (8001a00 <main+0x24c>)
  hspi1.Instance = SPI1;
 80017da:	4d8a      	ldr	r5, [pc, #552]	; (8001a04 <main+0x250>)
  htim3.Instance = TIM3;
 80017dc:	4e8a      	ldr	r6, [pc, #552]	; (8001a08 <main+0x254>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017de:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80017e2:	631a      	str	r2, [r3, #48]	; 0x30
 80017e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017e6:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80017ea:	9203      	str	r2, [sp, #12]
 80017ec:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017ee:	9404      	str	r4, [sp, #16]
 80017f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017f2:	f042 0204 	orr.w	r2, r2, #4
 80017f6:	631a      	str	r2, [r3, #48]	; 0x30
 80017f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017fa:	f002 0204 	and.w	r2, r2, #4
 80017fe:	9204      	str	r2, [sp, #16]
 8001800:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001802:	9405      	str	r4, [sp, #20]
 8001804:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001806:	f042 0201 	orr.w	r2, r2, #1
 800180a:	631a      	str	r2, [r3, #48]	; 0x30
 800180c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800180e:	f002 0201 	and.w	r2, r2, #1
 8001812:	9205      	str	r2, [sp, #20]
 8001814:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001816:	9406      	str	r4, [sp, #24]
 8001818:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800181a:	f042 0202 	orr.w	r2, r2, #2
 800181e:	631a      	str	r2, [r3, #48]	; 0x30
 8001820:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001822:	f002 0202 	and.w	r2, r2, #2
 8001826:	9206      	str	r2, [sp, #24]
 8001828:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800182a:	9407      	str	r4, [sp, #28]
 800182c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800182e:	f042 0208 	orr.w	r2, r2, #8
 8001832:	631a      	str	r2, [r3, #48]	; 0x30
 8001834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001836:	f003 0308 	and.w	r3, r3, #8
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800183a:	4622      	mov	r2, r4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800183c:	9307      	str	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800183e:	f44f 4170 	mov.w	r1, #61440	; 0xf000
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001842:	9b07      	ldr	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001844:	f7fe fffe 	bl	8000844 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 8001848:	4622      	mov	r2, r4
 800184a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800184e:	486f      	ldr	r0, [pc, #444]	; (8001a0c <main+0x258>)
 8001850:	f7fe fff8 	bl	8000844 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, CE_Pin|CS_Pin, GPIO_PIN_RESET);
 8001854:	4622      	mov	r2, r4
 8001856:	2148      	movs	r1, #72	; 0x48
 8001858:	4638      	mov	r0, r7
 800185a:	f7fe fff3 	bl	8000844 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800185e:	f04f 0901 	mov.w	r9, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001862:	f04f 0802 	mov.w	r8, #2
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001866:	f44f 4370 	mov.w	r3, #61440	; 0xf000
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800186a:	a90a      	add	r1, sp, #40	; 0x28
 800186c:	4864      	ldr	r0, [pc, #400]	; (8001a00 <main+0x24c>)
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800186e:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001870:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001872:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001876:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800187a:	f7fe ff03 	bl	8000684 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800187e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001882:	a90a      	add	r1, sp, #40	; 0x28
 8001884:	4861      	ldr	r0, [pc, #388]	; (8001a0c <main+0x258>)
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001886:	930a      	str	r3, [sp, #40]	; 0x28
 8001888:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188a:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800188c:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001890:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001894:	f7fe fef6 	bl	8000684 <HAL_GPIO_Init>

  /*Configure GPIO pins : CE_Pin CS_Pin */
  GPIO_InitStruct.Pin = CE_Pin|CS_Pin;
 8001898:	2248      	movs	r2, #72	; 0x48
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800189a:	a90a      	add	r1, sp, #40	; 0x28
 800189c:	4638      	mov	r0, r7

  /*Configure GPIO pin : IRQ_Pin */
  GPIO_InitStruct.Pin = IRQ_Pin;
 800189e:	f04f 0a10 	mov.w	sl, #16
  GPIO_InitStruct.Pin = CE_Pin|CS_Pin;
 80018a2:	920a      	str	r2, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a4:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018a6:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018aa:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ae:	f7fe fee9 	bl	8000684 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80018b2:	4a57      	ldr	r2, [pc, #348]	; (8001a10 <main+0x25c>)
 80018b4:	920b      	str	r2, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(IRQ_GPIO_Port, &GPIO_InitStruct);
 80018b6:	a90a      	add	r1, sp, #40	; 0x28
 80018b8:	4638      	mov	r0, r7
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ba:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = IRQ_Pin;
 80018bc:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  HAL_GPIO_Init(IRQ_GPIO_Port, &GPIO_InitStruct);
 80018c0:	f7fe fee0 	bl	8000684 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80018c4:	4621      	mov	r1, r4
 80018c6:	4622      	mov	r2, r4
 80018c8:	200a      	movs	r0, #10
 80018ca:	f7fe fe83 	bl	80005d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80018ce:	200a      	movs	r0, #10
 80018d0:	f7fe feb4 	bl	800063c <HAL_NVIC_EnableIRQ>
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80018d4:	4a4f      	ldr	r2, [pc, #316]	; (8001a14 <main+0x260>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80018d6:	60ac      	str	r4, [r5, #8]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80018d8:	f44f 7382 	mov.w	r3, #260	; 0x104
 80018dc:	e885 000c 	stmia.w	r5, {r2, r3}
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80018e0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80018e4:	61aa      	str	r2, [r5, #24]
  hspi1.Init.CRCPolynomial = 10;
 80018e6:	f04f 0b0a 	mov.w	fp, #10
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80018ea:	2220      	movs	r2, #32
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80018ec:	4628      	mov	r0, r5
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80018ee:	60ec      	str	r4, [r5, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018f0:	612c      	str	r4, [r5, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018f2:	616c      	str	r4, [r5, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80018f4:	61ea      	str	r2, [r5, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018f6:	622c      	str	r4, [r5, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80018f8:	626c      	str	r4, [r5, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018fa:	62ac      	str	r4, [r5, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80018fc:	f8c5 b02c 	str.w	fp, [r5, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001900:	f7ff fab2 	bl	8000e68 <HAL_SPI_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001904:	4621      	mov	r1, r4
 8001906:	4652      	mov	r2, sl
 8001908:	a80a      	add	r0, sp, #40	; 0x28
 800190a:	f000 fddf 	bl	80024cc <memset>
  htim3.Instance = TIM3;
 800190e:	4a42      	ldr	r2, [pc, #264]	; (8001a18 <main+0x264>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001910:	60b4      	str	r4, [r6, #8]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001912:	4630      	mov	r0, r6
  htim3.Init.Prescaler = 0;
 8001914:	e886 0014 	stmia.w	r6, {r2, r4}
  htim3.Init.Period = 0;
 8001918:	60f4      	str	r4, [r6, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800191a:	6134      	str	r4, [r6, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800191c:	61b4      	str	r4, [r6, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800191e:	9408      	str	r4, [sp, #32]
 8001920:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001922:	f7ff fcdb 	bl	80012dc <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001926:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800192a:	a90a      	add	r1, sp, #40	; 0x28
 800192c:	4630      	mov	r0, r6
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800192e:	920a      	str	r2, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001930:	f7ff fcf8 	bl	8001324 <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001934:	a908      	add	r1, sp, #32
 8001936:	4630      	mov	r0, r6
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001938:	9408      	str	r4, [sp, #32]
  huart3.Instance = USART3;
 800193a:	4e38      	ldr	r6, [pc, #224]	; (8001a1c <main+0x268>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800193c:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800193e:	f7ff fd85 	bl	800144c <HAL_TIMEx_MasterConfigSynchronization>
  huart3.Init.BaudRate = 115200;
 8001942:	4937      	ldr	r1, [pc, #220]	; (8001a20 <main+0x26c>)
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001944:	60b4      	str	r4, [r6, #8]
  huart3.Init.BaudRate = 115200;
 8001946:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800194a:	e886 0006 	stmia.w	r6, {r1, r2}
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800194e:	4630      	mov	r0, r6
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001950:	220c      	movs	r2, #12
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001952:	60f4      	str	r4, [r6, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001954:	6134      	str	r4, [r6, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001956:	6172      	str	r2, [r6, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001958:	61b4      	str	r4, [r6, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800195a:	61f4      	str	r4, [r6, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800195c:	f7ff fe50 	bl	8001600 <HAL_UART_Init>
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_15,GPIO_PIN_SET);
 8001960:	9b01      	ldr	r3, [sp, #4]
 8001962:	482a      	ldr	r0, [pc, #168]	; (8001a0c <main+0x258>)
 8001964:	464a      	mov	r2, r9
 8001966:	4619      	mov	r1, r3
 8001968:	f7fe ff6c 	bl	8000844 <HAL_GPIO_WritePin>
      config.tx_power         = NRF_TX_PWR_0dBm;
 800196c:	2303      	movs	r3, #3
 800196e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
      config.addr_width       = NRF_ADDR_WIDTH_5;
 8001972:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
      config.payload_length   = 4;    // maximum is 32 bytes
 8001976:	2304      	movs	r3, #4
 8001978:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
      config.retransmit_delay = 0x0F; // 4000us, LSB:250us
 800197c:	230f      	movs	r3, #15
 800197e:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
      config.rf_channel       = 11;
 8001982:	230b      	movs	r3, #11
 8001984:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
      config.rx_address       = tx_address;
 8001988:	4b26      	ldr	r3, [pc, #152]	; (8001a24 <main+0x270>)
 800198a:	930c      	str	r3, [sp, #48]	; 0x30
      config.tx_address       = rx_address;
 800198c:	4b26      	ldr	r3, [pc, #152]	; (8001a28 <main+0x274>)
 800198e:	930d      	str	r3, [sp, #52]	; 0x34
      config.rx_buffer        = (uint8_t*)&rx_data;
 8001990:	4b26      	ldr	r3, [pc, #152]	; (8001a2c <main+0x278>)
 8001992:	930e      	str	r3, [sp, #56]	; 0x38
      config.ce_pin      = CE_Pin;
 8001994:	2308      	movs	r3, #8
 8001996:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
      nrf_init(&nrf, &config);
 800199a:	a90a      	add	r1, sp, #40	; 0x28
      config.csn_pin     = CS_Pin;
 800199c:	2340      	movs	r3, #64	; 0x40
      nrf_init(&nrf, &config);
 800199e:	4824      	ldr	r0, [pc, #144]	; (8001a30 <main+0x27c>)
      config.csn_pin     = CS_Pin;
 80019a0:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
      config.data_rate        = NRF_DATA_RATE_1MBPS;
 80019a4:	f88d 4028 	strb.w	r4, [sp, #40]	; 0x28
      config.crc_width        = NRF_CRC_WIDTH_1B;
 80019a8:	f88d 402a 	strb.w	r4, [sp, #42]	; 0x2a
      config.retransmit_count = 2;   // maximum is 15 times
 80019ac:	f88d 802d 	strb.w	r8, [sp, #45]	; 0x2d
      config.spi         = &hspi1;
 80019b0:	950f      	str	r5, [sp, #60]	; 0x3c
      config.spi_timeout = 10; // milliseconds
 80019b2:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
      config.ce_port     = CE_GPIO_Port;
 80019b6:	9713      	str	r7, [sp, #76]	; 0x4c
      config.csn_port    = CS_GPIO_Port;
 80019b8:	9711      	str	r7, [sp, #68]	; 0x44
      config.irq_port    = IRQ_GPIO_Port;
 80019ba:	9715      	str	r7, [sp, #84]	; 0x54
      config.irq_pin     = IRQ_Pin;
 80019bc:	f8ad a058 	strh.w	sl, [sp, #88]	; 0x58
      nrf_init(&nrf, &config);
 80019c0:	f000 fbda 	bl	8002178 <nrf_init>
  sprintf(buf,"let starting\r\n ");
 80019c4:	491b      	ldr	r1, [pc, #108]	; (8001a34 <main+0x280>)
	        HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 80019c6:	4c0e      	ldr	r4, [pc, #56]	; (8001a00 <main+0x24c>)
  sprintf(buf,"let starting\r\n ");
 80019c8:	a80a      	add	r0, sp, #40	; 0x28
 80019ca:	f000 fd87 	bl	80024dc <strcpy>
  HAL_UART_Transmit(&huart3,buf,strlen(buf),1000);
 80019ce:	a80a      	add	r0, sp, #40	; 0x28
 80019d0:	f7fe fbfa 	bl	80001c8 <strlen>
 80019d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019d8:	b282      	uxth	r2, r0
 80019da:	a90a      	add	r1, sp, #40	; 0x28
 80019dc:	4630      	mov	r0, r6
 80019de:	f7ff fe3d 	bl	800165c <HAL_UART_Transmit>
	        HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 80019e2:	4620      	mov	r0, r4
 80019e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019e8:	f7fe ff31 	bl	800084e <HAL_GPIO_TogglePin>
	        HAL_Delay(500);
 80019ec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80019f0:	f7fe fdca 	bl	8000588 <HAL_Delay>
 80019f4:	e7f5      	b.n	80019e2 <main+0x22e>
 80019f6:	bf00      	nop
 80019f8:	40023800 	.word	0x40023800
 80019fc:	40020400 	.word	0x40020400
 8001a00:	40020c00 	.word	0x40020c00
 8001a04:	200000e8 	.word	0x200000e8
 8001a08:	2000006c 	.word	0x2000006c
 8001a0c:	40020800 	.word	0x40020800
 8001a10:	10210000 	.word	0x10210000
 8001a14:	40013000 	.word	0x40013000
 8001a18:	40000400 	.word	0x40000400
 8001a1c:	2000002c 	.word	0x2000002c
 8001a20:	40004800 	.word	0x40004800
 8001a24:	08002519 	.word	0x08002519
 8001a28:	08002514 	.word	0x08002514
 8001a2c:	200000e4 	.word	0x200000e4
 8001a30:	200000ac 	.word	0x200000ac
 8001a34:	08002504 	.word	0x08002504

08001a38 <HAL_GPIO_EXTI_Callback>:
}

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
	if(GPIO_Pin==IRQ_Pin){
 8001a38:	2810      	cmp	r0, #16
{
 8001a3a:	b508      	push	{r3, lr}
	if(GPIO_Pin==IRQ_Pin){
 8001a3c:	d109      	bne.n	8001a52 <HAL_GPIO_EXTI_Callback+0x1a>
	 //   sprintf(buffer,"IRQ triggired \n\r");
	  //  HAL_UART_Transmit(&huart3,buffer,strlen(buffer),1000);
		HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_15);
 8001a3e:	4805      	ldr	r0, [pc, #20]	; (8001a54 <HAL_GPIO_EXTI_Callback+0x1c>)
 8001a40:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a44:	f7fe ff03 	bl	800084e <HAL_GPIO_TogglePin>
	    nrf_irq_handler(&nrf);
 8001a48:	4803      	ldr	r0, [pc, #12]	; (8001a58 <HAL_GPIO_EXTI_Callback+0x20>)
	}
}
 8001a4a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	    nrf_irq_handler(&nrf);
 8001a4e:	f000 ba47 	b.w	8001ee0 <nrf_irq_handler>
 8001a52:	bd08      	pop	{r3, pc}
 8001a54:	40020c00 	.word	0x40020c00
 8001a58:	200000ac 	.word	0x200000ac

08001a5c <ce_reset>:
static void ce_set(nrf24l01* dev) {
    HAL_GPIO_WritePin(dev->config.ce_port, dev->config.ce_pin, GPIO_PIN_SET);
}

static void ce_reset(nrf24l01* dev) {
    HAL_GPIO_WritePin(dev->config.ce_port, dev->config.ce_pin, GPIO_PIN_RESET);
 8001a5c:	8d01      	ldrh	r1, [r0, #40]	; 0x28
 8001a5e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8001a60:	2200      	movs	r2, #0
 8001a62:	f7fe beef 	b.w	8000844 <HAL_GPIO_WritePin>

08001a66 <ce_set>:
    HAL_GPIO_WritePin(dev->config.ce_port, dev->config.ce_pin, GPIO_PIN_SET);
 8001a66:	8d01      	ldrh	r1, [r0, #40]	; 0x28
 8001a68:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	f7fe beea 	b.w	8000844 <HAL_GPIO_WritePin>

08001a70 <nrf_send_command>:

    return NRF_OK;
}

NRF_RESULT nrf_send_command(nrf24l01* dev, NRF_COMMAND cmd, const uint8_t* tx,
                            uint8_t* rx, uint8_t len) {
 8001a70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001a74:	b082      	sub	sp, #8
 8001a76:	af02      	add	r7, sp, #8
 8001a78:	461e      	mov	r6, r3
 8001a7a:	f897 a020 	ldrb.w	sl, [r7, #32]
    uint8_t myTX[len + 1];
 8001a7e:	f10a 0308 	add.w	r3, sl, #8
 8001a82:	f023 0307 	bic.w	r3, r3, #7
 8001a86:	ebad 0d03 	sub.w	sp, sp, r3
 8001a8a:	f10d 0908 	add.w	r9, sp, #8
    uint8_t myRX[len + 1];
 8001a8e:	ebad 0d03 	sub.w	sp, sp, r3
    myTX[0] = cmd;
 8001a92:	464b      	mov	r3, r9
 8001a94:	f10a 38ff 	add.w	r8, sl, #4294967295
                            uint8_t* rx, uint8_t len) {
 8001a98:	4604      	mov	r4, r0
    myTX[0] = cmd;
 8001a9a:	f803 1b01 	strb.w	r1, [r3], #1
    uint8_t myRX[len + 1];
 8001a9e:	ad02      	add	r5, sp, #8
 8001aa0:	1e51      	subs	r1, r2, #1
 8001aa2:	f10d 0007 	add.w	r0, sp, #7
 8001aa6:	4442      	add	r2, r8

    int i = 0;
    for (i = 0; i < len; i++) {
        myTX[1 + i] = tx[i];
        myRX[i]     = 0;
 8001aa8:	f04f 0e00 	mov.w	lr, #0
    for (i = 0; i < len; i++) {
 8001aac:	4291      	cmp	r1, r2
 8001aae:	d11c      	bne.n	8001aea <nrf_send_command+0x7a>
    HAL_GPIO_WritePin(dev->config.csn_port, dev->config.csn_pin,
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	8c21      	ldrh	r1, [r4, #32]
 8001ab4:	69e0      	ldr	r0, [r4, #28]
 8001ab6:	f7fe fec5 	bl	8000844 <HAL_GPIO_WritePin>
    }

    csn_reset(dev);

    if (HAL_SPI_TransmitReceive(dev->config.spi, myTX, myRX, 1 + len,
 8001aba:	69a3      	ldr	r3, [r4, #24]
 8001abc:	9300      	str	r3, [sp, #0]
 8001abe:	462a      	mov	r2, r5
 8001ac0:	f10a 0301 	add.w	r3, sl, #1
 8001ac4:	4649      	mov	r1, r9
 8001ac6:	6960      	ldr	r0, [r4, #20]
 8001ac8:	f7ff fa0b 	bl	8000ee2 <HAL_SPI_TransmitReceive>
 8001acc:	b9c8      	cbnz	r0, 8001b02 <nrf_send_command+0x92>
 8001ace:	1e73      	subs	r3, r6, #1
 8001ad0:	3501      	adds	r5, #1
 8001ad2:	4446      	add	r6, r8
                                dev->config.spi_timeout) != HAL_OK) {
        return NRF_ERROR;
    }

    for (i = 0; i < len; i++) { rx[i] = myRX[1 + i]; }
 8001ad4:	42b3      	cmp	r3, r6
 8001ad6:	d10f      	bne.n	8001af8 <nrf_send_command+0x88>
    HAL_GPIO_WritePin(dev->config.csn_port, dev->config.csn_pin, GPIO_PIN_SET);
 8001ad8:	69e0      	ldr	r0, [r4, #28]
 8001ada:	8c21      	ldrh	r1, [r4, #32]
 8001adc:	2201      	movs	r2, #1
 8001ade:	f7fe feb1 	bl	8000844 <HAL_GPIO_WritePin>

    csn_set(dev);

    return NRF_OK;
 8001ae2:	2000      	movs	r0, #0
}
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        myTX[1 + i] = tx[i];
 8001aea:	f811 cf01 	ldrb.w	ip, [r1, #1]!
 8001aee:	f803 cb01 	strb.w	ip, [r3], #1
        myRX[i]     = 0;
 8001af2:	f800 ef01 	strb.w	lr, [r0, #1]!
 8001af6:	e7d9      	b.n	8001aac <nrf_send_command+0x3c>
    for (i = 0; i < len; i++) { rx[i] = myRX[1 + i]; }
 8001af8:	f815 2b01 	ldrb.w	r2, [r5], #1
 8001afc:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001b00:	e7e8      	b.n	8001ad4 <nrf_send_command+0x64>
        return NRF_ERROR;
 8001b02:	2001      	movs	r0, #1
 8001b04:	e7ee      	b.n	8001ae4 <nrf_send_command+0x74>
	...

08001b08 <nrf_packet_received_callback>:
        dev->tx_result = NRF_ERROR;
        dev->tx_busy   = 0;
    }
}

void nrf_packet_received_callback(nrf24l01* dev, uint8_t* data) {
 8001b08:	b538      	push	{r3, r4, r5, lr}
 8001b0a:	4605      	mov	r5, r0
    // default implementation (__weak) is used in favor of nrf_receive_packet
	  HAL_UART_Transmit(&huart3,data,strlen(data),1000);
 8001b0c:	4608      	mov	r0, r1
void nrf_packet_received_callback(nrf24l01* dev, uint8_t* data) {
 8001b0e:	460c      	mov	r4, r1
	  HAL_UART_Transmit(&huart3,data,strlen(data),1000);
 8001b10:	f7fe fb5a 	bl	80001c8 <strlen>
 8001b14:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b18:	b282      	uxth	r2, r0
 8001b1a:	4621      	mov	r1, r4
 8001b1c:	4803      	ldr	r0, [pc, #12]	; (8001b2c <nrf_packet_received_callback+0x24>)
 8001b1e:	f7ff fd9d 	bl	800165c <HAL_UART_Transmit>
    dev->rx_busy = 0;
 8001b22:	2300      	movs	r3, #0
 8001b24:	f885 3036 	strb.w	r3, [r5, #54]	; 0x36
 8001b28:	bd38      	pop	{r3, r4, r5, pc}
 8001b2a:	bf00      	nop
 8001b2c:	2000002c 	.word	0x2000002c

08001b30 <nrf_read_register>:
}

NRF_RESULT nrf_read_register(nrf24l01* dev, uint8_t reg, uint8_t* data) {
 8001b30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint8_t tx = 0;
 8001b32:	ac04      	add	r4, sp, #16
 8001b34:	2300      	movs	r3, #0
 8001b36:	f804 3d01 	strb.w	r3, [r4, #-1]!
    if (nrf_send_command(dev, NRF_CMD_R_REGISTER | reg, &tx, data, 1) !=
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	9300      	str	r3, [sp, #0]
 8001b3e:	4613      	mov	r3, r2
 8001b40:	4622      	mov	r2, r4
 8001b42:	f7ff ff95 	bl	8001a70 <nrf_send_command>
        NRF_OK) {
        return NRF_ERROR;
    }
    return NRF_OK;
}
 8001b46:	3000      	adds	r0, #0
 8001b48:	bf18      	it	ne
 8001b4a:	2001      	movne	r0, #1
 8001b4c:	b004      	add	sp, #16
 8001b4e:	bd10      	pop	{r4, pc}

08001b50 <nrf_write_register>:

NRF_RESULT nrf_write_register(nrf24l01* dev, uint8_t reg, uint8_t* data) {
 8001b50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint8_t rx = 0;
 8001b52:	ab04      	add	r3, sp, #16
 8001b54:	2400      	movs	r4, #0
 8001b56:	f803 4d01 	strb.w	r4, [r3, #-1]!
    if (nrf_send_command(dev, NRF_CMD_W_REGISTER | reg, data, &rx, 1) !=
 8001b5a:	2401      	movs	r4, #1
 8001b5c:	9400      	str	r4, [sp, #0]
 8001b5e:	f041 0120 	orr.w	r1, r1, #32
 8001b62:	f7ff ff85 	bl	8001a70 <nrf_send_command>
        NRF_OK) {
        return NRF_ERROR;
    }
    return NRF_OK;
}
 8001b66:	3000      	adds	r0, #0
 8001b68:	bf18      	it	ne
 8001b6a:	2001      	movne	r0, #1
 8001b6c:	b004      	add	sp, #16
 8001b6e:	bd10      	pop	{r4, pc}

08001b70 <nrf_read_rx_payload>:

NRF_RESULT nrf_read_rx_payload(nrf24l01* dev, uint8_t* data) {
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
    uint8_t tx[dev->config.payload_length];
 8001b74:	7902      	ldrb	r2, [r0, #4]
 8001b76:	1dd3      	adds	r3, r2, #7
 8001b78:	f023 0307 	bic.w	r3, r3, #7
NRF_RESULT nrf_read_rx_payload(nrf24l01* dev, uint8_t* data) {
 8001b7c:	af02      	add	r7, sp, #8
    uint8_t tx[dev->config.payload_length];
 8001b7e:	ebad 0d03 	sub.w	sp, sp, r3
    if (nrf_send_command(dev, NRF_CMD_R_RX_PAYLOAD, tx, data,
 8001b82:	460b      	mov	r3, r1
 8001b84:	9200      	str	r2, [sp, #0]
 8001b86:	2161      	movs	r1, #97	; 0x61
 8001b88:	aa02      	add	r2, sp, #8
 8001b8a:	f7ff ff71 	bl	8001a70 <nrf_send_command>
                         dev->config.payload_length) != NRF_OK) {
        return NRF_ERROR;
    }
    return NRF_OK;
}
 8001b8e:	3000      	adds	r0, #0
 8001b90:	bf18      	it	ne
 8001b92:	2001      	movne	r0, #1
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}

08001b98 <nrf_flush_tx>:
        return NRF_ERROR;
    }
    return NRF_OK;
}

NRF_RESULT nrf_flush_tx(nrf24l01* dev) {
 8001b98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint8_t rx = 0;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	f88d 300e 	strb.w	r3, [sp, #14]
    uint8_t tx = 0;
 8001ba0:	f88d 300f 	strb.w	r3, [sp, #15]
    if (nrf_send_command(dev, NRF_CMD_FLUSH_TX, &tx, &rx, 0) != NRF_OK) {
 8001ba4:	9300      	str	r3, [sp, #0]
 8001ba6:	f10d 020f 	add.w	r2, sp, #15
 8001baa:	f10d 030e 	add.w	r3, sp, #14
 8001bae:	21e1      	movs	r1, #225	; 0xe1
 8001bb0:	f7ff ff5e 	bl	8001a70 <nrf_send_command>
        return NRF_ERROR;
    }
    return NRF_OK;
}
 8001bb4:	3000      	adds	r0, #0
 8001bb6:	bf18      	it	ne
 8001bb8:	2001      	movne	r0, #1
 8001bba:	b005      	add	sp, #20
 8001bbc:	f85d fb04 	ldr.w	pc, [sp], #4

08001bc0 <nrf_flush_rx>:

NRF_RESULT nrf_flush_rx(nrf24l01* dev) {
 8001bc0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint8_t rx = 0;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	f88d 300e 	strb.w	r3, [sp, #14]
    uint8_t tx = 0;
 8001bc8:	f88d 300f 	strb.w	r3, [sp, #15]
    if (nrf_send_command(dev, NRF_CMD_FLUSH_RX, &tx, &rx, 0) != NRF_OK) {
 8001bcc:	9300      	str	r3, [sp, #0]
 8001bce:	f10d 020f 	add.w	r2, sp, #15
 8001bd2:	f10d 030e 	add.w	r3, sp, #14
 8001bd6:	21e2      	movs	r1, #226	; 0xe2
 8001bd8:	f7ff ff4a 	bl	8001a70 <nrf_send_command>
        return NRF_ERROR;
    }
    return NRF_OK;
}
 8001bdc:	3000      	adds	r0, #0
 8001bde:	bf18      	it	ne
 8001be0:	2001      	movne	r0, #1
 8001be2:	b005      	add	sp, #20
 8001be4:	f85d fb04 	ldr.w	pc, [sp], #4

08001be8 <nrf_set_data_rate>:

NRF_RESULT nrf_set_data_rate(nrf24l01* dev, NRF_DATA_RATE rate) {
 8001be8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint8_t reg = 0;
 8001bea:	ac02      	add	r4, sp, #8
 8001bec:	2300      	movs	r3, #0
 8001bee:	f804 3d01 	strb.w	r3, [r4, #-1]!
NRF_RESULT nrf_set_data_rate(nrf24l01* dev, NRF_DATA_RATE rate) {
 8001bf2:	460e      	mov	r6, r1
    if (nrf_read_register(dev, NRF_RF_SETUP, &reg) != NRF_OK) {
 8001bf4:	4622      	mov	r2, r4
 8001bf6:	2106      	movs	r1, #6
NRF_RESULT nrf_set_data_rate(nrf24l01* dev, NRF_DATA_RATE rate) {
 8001bf8:	4605      	mov	r5, r0
    if (nrf_read_register(dev, NRF_RF_SETUP, &reg) != NRF_OK) {
 8001bfa:	f7ff ff99 	bl	8001b30 <nrf_read_register>
 8001bfe:	b110      	cbz	r0, 8001c06 <nrf_set_data_rate+0x1e>
        return NRF_ERROR;
 8001c00:	2001      	movs	r0, #1
    if (nrf_write_register(dev, NRF_RF_SETUP, &reg) != NRF_OK) {
        return NRF_ERROR;
    }
    dev->config.data_rate = rate;
    return NRF_OK;
}
 8001c02:	b002      	add	sp, #8
 8001c04:	bd70      	pop	{r4, r5, r6, pc}
 8001c06:	f89d 3007 	ldrb.w	r3, [sp, #7]
    if (rate & 1) { // low bit set
 8001c0a:	f016 0f01 	tst.w	r6, #1
        reg |= 1 << 5;
 8001c0e:	bf14      	ite	ne
 8001c10:	f043 0320 	orrne.w	r3, r3, #32
        reg &= ~(1 << 5);
 8001c14:	f023 0320 	biceq.w	r3, r3, #32
 8001c18:	f88d 3007 	strb.w	r3, [sp, #7]
 8001c1c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    if (rate & 2) { // high bit set
 8001c20:	f016 0f02 	tst.w	r6, #2
        reg |= 1 << 3;
 8001c24:	bf14      	ite	ne
 8001c26:	f043 0308 	orrne.w	r3, r3, #8
        reg &= ~(1 << 3);
 8001c2a:	f023 0308 	biceq.w	r3, r3, #8
    if (nrf_write_register(dev, NRF_RF_SETUP, &reg) != NRF_OK) {
 8001c2e:	4622      	mov	r2, r4
 8001c30:	2106      	movs	r1, #6
 8001c32:	4628      	mov	r0, r5
        reg &= ~(1 << 3);
 8001c34:	f88d 3007 	strb.w	r3, [sp, #7]
    if (nrf_write_register(dev, NRF_RF_SETUP, &reg) != NRF_OK) {
 8001c38:	f7ff ff8a 	bl	8001b50 <nrf_write_register>
 8001c3c:	2800      	cmp	r0, #0
 8001c3e:	d1df      	bne.n	8001c00 <nrf_set_data_rate+0x18>
    dev->config.data_rate = rate;
 8001c40:	702e      	strb	r6, [r5, #0]
    return NRF_OK;
 8001c42:	e7de      	b.n	8001c02 <nrf_set_data_rate+0x1a>

08001c44 <nrf_clear_interrupts>:
        return NRF_ERROR;
    }
    return NRF_OK;
}

NRF_RESULT nrf_clear_interrupts(nrf24l01* dev) {
 8001c44:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint8_t reg = 0;
 8001c46:	ac02      	add	r4, sp, #8
 8001c48:	2300      	movs	r3, #0
 8001c4a:	f804 3d01 	strb.w	r3, [r4, #-1]!
    if (nrf_read_register(dev, NRF_STATUS, &reg) != NRF_OK) {
 8001c4e:	2107      	movs	r1, #7
 8001c50:	4622      	mov	r2, r4
NRF_RESULT nrf_clear_interrupts(nrf24l01* dev) {
 8001c52:	4605      	mov	r5, r0
    if (nrf_read_register(dev, NRF_STATUS, &reg) != NRF_OK) {
 8001c54:	f7ff ff6c 	bl	8001b30 <nrf_read_register>
 8001c58:	b978      	cbnz	r0, 8001c7a <nrf_clear_interrupts+0x36>
        return NRF_ERROR;
    }

    reg |= 7 << 4; // setting bits 4,5,6
 8001c5a:	f89d 3007 	ldrb.w	r3, [sp, #7]

    if (nrf_write_register(dev, NRF_STATUS, &reg) != NRF_OK) {
 8001c5e:	4622      	mov	r2, r4
    reg |= 7 << 4; // setting bits 4,5,6
 8001c60:	f043 0370 	orr.w	r3, r3, #112	; 0x70
    if (nrf_write_register(dev, NRF_STATUS, &reg) != NRF_OK) {
 8001c64:	2107      	movs	r1, #7
 8001c66:	4628      	mov	r0, r5
    reg |= 7 << 4; // setting bits 4,5,6
 8001c68:	f88d 3007 	strb.w	r3, [sp, #7]
    if (nrf_write_register(dev, NRF_STATUS, &reg) != NRF_OK) {
 8001c6c:	f7ff ff70 	bl	8001b50 <nrf_write_register>
        return NRF_ERROR;
 8001c70:	3000      	adds	r0, #0
 8001c72:	bf18      	it	ne
 8001c74:	2001      	movne	r0, #1
        return NRF_ERROR;
    }
    return NRF_OK;
}
 8001c76:	b003      	add	sp, #12
 8001c78:	bd30      	pop	{r4, r5, pc}
        return NRF_ERROR;
 8001c7a:	2001      	movs	r0, #1
 8001c7c:	e7fb      	b.n	8001c76 <nrf_clear_interrupts+0x32>

08001c7e <nrf_set_rf_channel>:

NRF_RESULT nrf_set_rf_channel(nrf24l01* dev, uint8_t ch) {
 8001c7e:	b573      	push	{r0, r1, r4, r5, r6, lr}
    ch &= 0x7F;
    uint8_t reg = 0;
 8001c80:	ad02      	add	r5, sp, #8
 8001c82:	2300      	movs	r3, #0
 8001c84:	f805 3d01 	strb.w	r3, [r5, #-1]!
NRF_RESULT nrf_set_rf_channel(nrf24l01* dev, uint8_t ch) {
 8001c88:	460c      	mov	r4, r1
    if (nrf_read_register(dev, NRF_RF_CH, &reg) != NRF_OK) { return NRF_ERROR; }
 8001c8a:	462a      	mov	r2, r5
 8001c8c:	2105      	movs	r1, #5
NRF_RESULT nrf_set_rf_channel(nrf24l01* dev, uint8_t ch) {
 8001c8e:	4606      	mov	r6, r0
    if (nrf_read_register(dev, NRF_RF_CH, &reg) != NRF_OK) { return NRF_ERROR; }
 8001c90:	f7ff ff4e 	bl	8001b30 <nrf_read_register>
 8001c94:	b110      	cbz	r0, 8001c9c <nrf_set_rf_channel+0x1e>
 8001c96:	2001      	movs	r0, #1
    if (nrf_write_register(dev, NRF_RF_CH, &reg) != NRF_OK) {
        return NRF_ERROR;
    }
    dev->config.rf_channel = ch;
    return NRF_OK;
}
 8001c98:	b002      	add	sp, #8
 8001c9a:	bd70      	pop	{r4, r5, r6, pc}
    reg |= ch; // setting channel
 8001c9c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ch &= 0x7F;
 8001ca0:	f004 047f 	and.w	r4, r4, #127	; 0x7f
    reg |= ch; // setting channel
 8001ca4:	4323      	orrs	r3, r4
    if (nrf_write_register(dev, NRF_RF_CH, &reg) != NRF_OK) {
 8001ca6:	462a      	mov	r2, r5
 8001ca8:	2105      	movs	r1, #5
 8001caa:	4630      	mov	r0, r6
    reg |= ch; // setting channel
 8001cac:	f88d 3007 	strb.w	r3, [sp, #7]
    if (nrf_write_register(dev, NRF_RF_CH, &reg) != NRF_OK) {
 8001cb0:	f7ff ff4e 	bl	8001b50 <nrf_write_register>
 8001cb4:	2800      	cmp	r0, #0
 8001cb6:	d1ee      	bne.n	8001c96 <nrf_set_rf_channel+0x18>
    dev->config.rf_channel = ch;
 8001cb8:	71f4      	strb	r4, [r6, #7]
    return NRF_OK;
 8001cba:	e7ed      	b.n	8001c98 <nrf_set_rf_channel+0x1a>

08001cbc <nrf_set_retransmittion_count>:

NRF_RESULT nrf_set_retransmittion_count(nrf24l01* dev, uint8_t count) {
 8001cbc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    count &= 0x0F;
    uint8_t reg = 0;
 8001cbe:	ad02      	add	r5, sp, #8
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	f805 3d01 	strb.w	r3, [r5, #-1]!
NRF_RESULT nrf_set_retransmittion_count(nrf24l01* dev, uint8_t count) {
 8001cc6:	460c      	mov	r4, r1
    if (nrf_read_register(dev, NRF_SETUP_RETR, &reg) != NRF_OK) {
 8001cc8:	462a      	mov	r2, r5
 8001cca:	2104      	movs	r1, #4
NRF_RESULT nrf_set_retransmittion_count(nrf24l01* dev, uint8_t count) {
 8001ccc:	4606      	mov	r6, r0
    if (nrf_read_register(dev, NRF_SETUP_RETR, &reg) != NRF_OK) {
 8001cce:	f7ff ff2f 	bl	8001b30 <nrf_read_register>
 8001cd2:	b110      	cbz	r0, 8001cda <nrf_set_retransmittion_count+0x1e>
        return NRF_ERROR;
 8001cd4:	2001      	movs	r0, #1
    if (nrf_write_register(dev, NRF_SETUP_RETR, &reg) != NRF_OK) {
        return NRF_ERROR;
    }
    dev->config.retransmit_count = count;
    return NRF_OK;
}
 8001cd6:	b002      	add	sp, #8
 8001cd8:	bd70      	pop	{r4, r5, r6, pc}
    reg &= 0xF0;  // clearing bits 0,1,2,3
 8001cda:	f89d 3007 	ldrb.w	r3, [sp, #7]
    count &= 0x0F;
 8001cde:	f004 040f 	and.w	r4, r4, #15
    reg &= 0xF0;  // clearing bits 0,1,2,3
 8001ce2:	f023 030f 	bic.w	r3, r3, #15
    reg |= count; // setting count
 8001ce6:	4323      	orrs	r3, r4
    if (nrf_write_register(dev, NRF_SETUP_RETR, &reg) != NRF_OK) {
 8001ce8:	462a      	mov	r2, r5
 8001cea:	2104      	movs	r1, #4
 8001cec:	4630      	mov	r0, r6
    reg |= count; // setting count
 8001cee:	f88d 3007 	strb.w	r3, [sp, #7]
    if (nrf_write_register(dev, NRF_SETUP_RETR, &reg) != NRF_OK) {
 8001cf2:	f7ff ff2d 	bl	8001b50 <nrf_write_register>
 8001cf6:	2800      	cmp	r0, #0
 8001cf8:	d1ec      	bne.n	8001cd4 <nrf_set_retransmittion_count+0x18>
    dev->config.retransmit_count = count;
 8001cfa:	7174      	strb	r4, [r6, #5]
    return NRF_OK;
 8001cfc:	e7eb      	b.n	8001cd6 <nrf_set_retransmittion_count+0x1a>

08001cfe <nrf_set_retransmittion_delay>:

NRF_RESULT nrf_set_retransmittion_delay(nrf24l01* dev, uint8_t delay) {
 8001cfe:	b573      	push	{r0, r1, r4, r5, r6, lr}
    delay &= 0x0F;
    uint8_t reg = 0;
 8001d00:	ad02      	add	r5, sp, #8
 8001d02:	2300      	movs	r3, #0
 8001d04:	f805 3d01 	strb.w	r3, [r5, #-1]!
NRF_RESULT nrf_set_retransmittion_delay(nrf24l01* dev, uint8_t delay) {
 8001d08:	460c      	mov	r4, r1
    if (nrf_read_register(dev, NRF_SETUP_RETR, &reg) != NRF_OK) {
 8001d0a:	462a      	mov	r2, r5
 8001d0c:	2104      	movs	r1, #4
NRF_RESULT nrf_set_retransmittion_delay(nrf24l01* dev, uint8_t delay) {
 8001d0e:	4606      	mov	r6, r0
    if (nrf_read_register(dev, NRF_SETUP_RETR, &reg) != NRF_OK) {
 8001d10:	f7ff ff0e 	bl	8001b30 <nrf_read_register>
 8001d14:	b110      	cbz	r0, 8001d1c <nrf_set_retransmittion_delay+0x1e>
        return NRF_ERROR;
 8001d16:	2001      	movs	r0, #1
    if (nrf_write_register(dev, NRF_SETUP_RETR, &reg) != NRF_OK) {
        return NRF_ERROR;
    }
    dev->config.retransmit_delay = delay;
    return NRF_OK;
}
 8001d18:	b002      	add	sp, #8
 8001d1a:	bd70      	pop	{r4, r5, r6, pc}
    reg &= 0x0F;       // clearing bits 1,2,6,7
 8001d1c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    delay &= 0x0F;
 8001d20:	f004 040f 	and.w	r4, r4, #15
    reg &= 0x0F;       // clearing bits 1,2,6,7
 8001d24:	f003 030f 	and.w	r3, r3, #15
    reg |= delay << 4; // setting delay
 8001d28:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    if (nrf_write_register(dev, NRF_SETUP_RETR, &reg) != NRF_OK) {
 8001d2c:	462a      	mov	r2, r5
 8001d2e:	2104      	movs	r1, #4
 8001d30:	4630      	mov	r0, r6
    reg |= delay << 4; // setting delay
 8001d32:	f88d 3007 	strb.w	r3, [sp, #7]
    if (nrf_write_register(dev, NRF_SETUP_RETR, &reg) != NRF_OK) {
 8001d36:	f7ff ff0b 	bl	8001b50 <nrf_write_register>
 8001d3a:	2800      	cmp	r0, #0
 8001d3c:	d1eb      	bne.n	8001d16 <nrf_set_retransmittion_delay+0x18>
    dev->config.retransmit_delay = delay;
 8001d3e:	71b4      	strb	r4, [r6, #6]
    return NRF_OK;
 8001d40:	e7ea      	b.n	8001d18 <nrf_set_retransmittion_delay+0x1a>

08001d42 <nrf_set_address_width>:

NRF_RESULT nrf_set_address_width(nrf24l01* dev, NRF_ADDR_WIDTH width) {
 8001d42:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint8_t reg = 0;
 8001d44:	ac02      	add	r4, sp, #8
 8001d46:	2300      	movs	r3, #0
 8001d48:	f804 3d01 	strb.w	r3, [r4, #-1]!
NRF_RESULT nrf_set_address_width(nrf24l01* dev, NRF_ADDR_WIDTH width) {
 8001d4c:	460e      	mov	r6, r1
    if (nrf_read_register(dev, NRF_SETUP_AW, &reg) != NRF_OK) {
 8001d4e:	4622      	mov	r2, r4
 8001d50:	2103      	movs	r1, #3
NRF_RESULT nrf_set_address_width(nrf24l01* dev, NRF_ADDR_WIDTH width) {
 8001d52:	4605      	mov	r5, r0
    if (nrf_read_register(dev, NRF_SETUP_AW, &reg) != NRF_OK) {
 8001d54:	f7ff feec 	bl	8001b30 <nrf_read_register>
 8001d58:	b110      	cbz	r0, 8001d60 <nrf_set_address_width+0x1e>
        return NRF_ERROR;
 8001d5a:	2001      	movs	r0, #1
    if (nrf_write_register(dev, NRF_SETUP_AW, &reg) != NRF_OK) {
        return NRF_ERROR;
    }
    dev->config.addr_width = width;
    return NRF_OK;
}
 8001d5c:	b002      	add	sp, #8
 8001d5e:	bd70      	pop	{r4, r5, r6, pc}
    reg &= 0x03;  // clearing bits 0,1
 8001d60:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001d64:	f003 0303 	and.w	r3, r3, #3
    reg |= width; // setting delay
 8001d68:	4333      	orrs	r3, r6
    if (nrf_write_register(dev, NRF_SETUP_AW, &reg) != NRF_OK) {
 8001d6a:	4622      	mov	r2, r4
 8001d6c:	2103      	movs	r1, #3
 8001d6e:	4628      	mov	r0, r5
    reg |= width; // setting delay
 8001d70:	f88d 3007 	strb.w	r3, [sp, #7]
    if (nrf_write_register(dev, NRF_SETUP_AW, &reg) != NRF_OK) {
 8001d74:	f7ff feec 	bl	8001b50 <nrf_write_register>
 8001d78:	2800      	cmp	r0, #0
 8001d7a:	d1ee      	bne.n	8001d5a <nrf_set_address_width+0x18>
    dev->config.addr_width = width;
 8001d7c:	70ee      	strb	r6, [r5, #3]
    return NRF_OK;
 8001d7e:	e7ed      	b.n	8001d5c <nrf_set_address_width+0x1a>

08001d80 <nrf_set_rx_pipes>:

NRF_RESULT nrf_set_rx_pipes(nrf24l01* dev, uint8_t pipes) {
 8001d80:	b507      	push	{r0, r1, r2, lr}
 8001d82:	aa02      	add	r2, sp, #8
 8001d84:	f802 1d01 	strb.w	r1, [r2, #-1]!
    if (nrf_write_register(dev, NRF_EN_RXADDR, &pipes) != NRF_OK) {
 8001d88:	2102      	movs	r1, #2
 8001d8a:	f7ff fee1 	bl	8001b50 <nrf_write_register>
        return NRF_ERROR;
    }
    return NRF_OK;
}
 8001d8e:	3000      	adds	r0, #0
 8001d90:	bf18      	it	ne
 8001d92:	2001      	movne	r0, #1
 8001d94:	b003      	add	sp, #12
 8001d96:	f85d fb04 	ldr.w	pc, [sp], #4

08001d9a <nrf_enable_auto_ack>:

NRF_RESULT nrf_enable_auto_ack(nrf24l01* dev, uint8_t pipe) {
 8001d9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint8_t reg = 0;
 8001d9c:	ad02      	add	r5, sp, #8
 8001d9e:	2300      	movs	r3, #0
 8001da0:	f805 3d01 	strb.w	r3, [r5, #-1]!
NRF_RESULT nrf_enable_auto_ack(nrf24l01* dev, uint8_t pipe) {
 8001da4:	460c      	mov	r4, r1
    if (nrf_read_register(dev, NRF_EN_AA, &reg) != NRF_OK) { return NRF_ERROR; }
 8001da6:	462a      	mov	r2, r5
 8001da8:	2101      	movs	r1, #1
NRF_RESULT nrf_enable_auto_ack(nrf24l01* dev, uint8_t pipe) {
 8001daa:	4606      	mov	r6, r0
    if (nrf_read_register(dev, NRF_EN_AA, &reg) != NRF_OK) { return NRF_ERROR; }
 8001dac:	f7ff fec0 	bl	8001b30 <nrf_read_register>
 8001db0:	2101      	movs	r1, #1
 8001db2:	b978      	cbnz	r0, 8001dd4 <nrf_enable_auto_ack+0x3a>

    reg |= 1 << pipe;
 8001db4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001db8:	fa01 f404 	lsl.w	r4, r1, r4
 8001dbc:	431c      	orrs	r4, r3

    if (nrf_write_register(dev, NRF_EN_AA, &reg) != NRF_OK) {
 8001dbe:	462a      	mov	r2, r5
 8001dc0:	4630      	mov	r0, r6
    reg |= 1 << pipe;
 8001dc2:	f88d 4007 	strb.w	r4, [sp, #7]
    if (nrf_write_register(dev, NRF_EN_AA, &reg) != NRF_OK) {
 8001dc6:	f7ff fec3 	bl	8001b50 <nrf_write_register>
    if (nrf_read_register(dev, NRF_EN_AA, &reg) != NRF_OK) { return NRF_ERROR; }
 8001dca:	3000      	adds	r0, #0
 8001dcc:	bf18      	it	ne
 8001dce:	2001      	movne	r0, #1
        return NRF_ERROR;
    }
    return NRF_OK;
}
 8001dd0:	b002      	add	sp, #8
 8001dd2:	bd70      	pop	{r4, r5, r6, pc}
    if (nrf_read_register(dev, NRF_EN_AA, &reg) != NRF_OK) { return NRF_ERROR; }
 8001dd4:	4608      	mov	r0, r1
 8001dd6:	e7fb      	b.n	8001dd0 <nrf_enable_auto_ack+0x36>

08001dd8 <nrf_enable_crc>:

NRF_RESULT nrf_enable_crc(nrf24l01* dev, bool activate) {
 8001dd8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint8_t reg = 0;
 8001dda:	ac02      	add	r4, sp, #8
NRF_RESULT nrf_enable_crc(nrf24l01* dev, bool activate) {
 8001ddc:	460e      	mov	r6, r1
    uint8_t reg = 0;
 8001dde:	2100      	movs	r1, #0
 8001de0:	f804 1d01 	strb.w	r1, [r4, #-1]!
    if (nrf_read_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8001de4:	4622      	mov	r2, r4
NRF_RESULT nrf_enable_crc(nrf24l01* dev, bool activate) {
 8001de6:	4605      	mov	r5, r0
    if (nrf_read_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8001de8:	f7ff fea2 	bl	8001b30 <nrf_read_register>
 8001dec:	b998      	cbnz	r0, 8001e16 <nrf_enable_crc+0x3e>
 8001dee:	f89d 3007 	ldrb.w	r3, [sp, #7]
        return NRF_ERROR;
    }

    if (activate) {
 8001df2:	b16e      	cbz	r6, 8001e10 <nrf_enable_crc+0x38>
        reg |= 1 << 3;
 8001df4:	f043 0308 	orr.w	r3, r3, #8
    } else {
        reg &= ~(1 << 3);
    }

    if (nrf_write_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8001df8:	4622      	mov	r2, r4
 8001dfa:	2100      	movs	r1, #0
 8001dfc:	4628      	mov	r0, r5
        reg &= ~(1 << 3);
 8001dfe:	f88d 3007 	strb.w	r3, [sp, #7]
    if (nrf_write_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8001e02:	f7ff fea5 	bl	8001b50 <nrf_write_register>
        return NRF_ERROR;
 8001e06:	3000      	adds	r0, #0
 8001e08:	bf18      	it	ne
 8001e0a:	2001      	movne	r0, #1
        return NRF_ERROR;
    }
    return NRF_OK;
}
 8001e0c:	b002      	add	sp, #8
 8001e0e:	bd70      	pop	{r4, r5, r6, pc}
        reg &= ~(1 << 3);
 8001e10:	f023 0308 	bic.w	r3, r3, #8
 8001e14:	e7f0      	b.n	8001df8 <nrf_enable_crc+0x20>
        return NRF_ERROR;
 8001e16:	2001      	movs	r0, #1
 8001e18:	e7f8      	b.n	8001e0c <nrf_enable_crc+0x34>

08001e1a <nrf_set_crc_width>:

NRF_RESULT nrf_set_crc_width(nrf24l01* dev, NRF_CRC_WIDTH width) {
 8001e1a:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint8_t reg = 0;
 8001e1c:	ac02      	add	r4, sp, #8
NRF_RESULT nrf_set_crc_width(nrf24l01* dev, NRF_CRC_WIDTH width) {
 8001e1e:	460e      	mov	r6, r1
    uint8_t reg = 0;
 8001e20:	2100      	movs	r1, #0
 8001e22:	f804 1d01 	strb.w	r1, [r4, #-1]!
    if (nrf_read_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8001e26:	4622      	mov	r2, r4
NRF_RESULT nrf_set_crc_width(nrf24l01* dev, NRF_CRC_WIDTH width) {
 8001e28:	4605      	mov	r5, r0
    if (nrf_read_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8001e2a:	f7ff fe81 	bl	8001b30 <nrf_read_register>
 8001e2e:	b110      	cbz	r0, 8001e36 <nrf_set_crc_width+0x1c>
        return NRF_ERROR;
 8001e30:	2001      	movs	r0, #1
    if (nrf_write_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
        return NRF_ERROR;
    }
    dev->config.crc_width = width;
    return NRF_OK;
}
 8001e32:	b002      	add	sp, #8
 8001e34:	bd70      	pop	{r4, r5, r6, pc}
 8001e36:	f89d 3007 	ldrb.w	r3, [sp, #7]
    if (width == NRF_CRC_WIDTH_2B) {
 8001e3a:	2e01      	cmp	r6, #1
        reg |= 1 << 2;
 8001e3c:	bf0c      	ite	eq
 8001e3e:	f043 0304 	orreq.w	r3, r3, #4
        reg &= ~(1 << 3);
 8001e42:	f023 0308 	bicne.w	r3, r3, #8
    if (nrf_write_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8001e46:	4622      	mov	r2, r4
 8001e48:	2100      	movs	r1, #0
 8001e4a:	4628      	mov	r0, r5
        reg &= ~(1 << 3);
 8001e4c:	f88d 3007 	strb.w	r3, [sp, #7]
    if (nrf_write_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8001e50:	f7ff fe7e 	bl	8001b50 <nrf_write_register>
 8001e54:	2800      	cmp	r0, #0
 8001e56:	d1eb      	bne.n	8001e30 <nrf_set_crc_width+0x16>
    dev->config.crc_width = width;
 8001e58:	70ae      	strb	r6, [r5, #2]
    return NRF_OK;
 8001e5a:	e7ea      	b.n	8001e32 <nrf_set_crc_width+0x18>

08001e5c <nrf_power_up>:

NRF_RESULT nrf_power_up(nrf24l01* dev, bool power_up) {
 8001e5c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint8_t reg = 0;
 8001e5e:	ac02      	add	r4, sp, #8
NRF_RESULT nrf_power_up(nrf24l01* dev, bool power_up) {
 8001e60:	460e      	mov	r6, r1
    uint8_t reg = 0;
 8001e62:	2100      	movs	r1, #0
 8001e64:	f804 1d01 	strb.w	r1, [r4, #-1]!
    if (nrf_read_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8001e68:	4622      	mov	r2, r4
NRF_RESULT nrf_power_up(nrf24l01* dev, bool power_up) {
 8001e6a:	4605      	mov	r5, r0
    if (nrf_read_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8001e6c:	f7ff fe60 	bl	8001b30 <nrf_read_register>
 8001e70:	b998      	cbnz	r0, 8001e9a <nrf_power_up+0x3e>
 8001e72:	f89d 3007 	ldrb.w	r3, [sp, #7]
        return NRF_ERROR;
    }

    if (power_up) {
 8001e76:	b16e      	cbz	r6, 8001e94 <nrf_power_up+0x38>
        reg |= 1 << 1;
 8001e78:	f043 0302 	orr.w	r3, r3, #2
    } else {
        reg &= ~(1 << 1);
    }

    if (nrf_write_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8001e7c:	4622      	mov	r2, r4
 8001e7e:	2100      	movs	r1, #0
 8001e80:	4628      	mov	r0, r5
        reg &= ~(1 << 1);
 8001e82:	f88d 3007 	strb.w	r3, [sp, #7]
    if (nrf_write_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8001e86:	f7ff fe63 	bl	8001b50 <nrf_write_register>
        return NRF_ERROR;
 8001e8a:	3000      	adds	r0, #0
 8001e8c:	bf18      	it	ne
 8001e8e:	2001      	movne	r0, #1
        return NRF_ERROR;
    }
    return NRF_OK;
}
 8001e90:	b002      	add	sp, #8
 8001e92:	bd70      	pop	{r4, r5, r6, pc}
        reg &= ~(1 << 1);
 8001e94:	f023 0302 	bic.w	r3, r3, #2
 8001e98:	e7f0      	b.n	8001e7c <nrf_power_up+0x20>
        return NRF_ERROR;
 8001e9a:	2001      	movs	r0, #1
 8001e9c:	e7f8      	b.n	8001e90 <nrf_power_up+0x34>

08001e9e <nrf_rx_tx_control>:

NRF_RESULT nrf_rx_tx_control(nrf24l01* dev, NRF_TXRX_STATE rx) {
 8001e9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint8_t reg = 0;
 8001ea0:	ac02      	add	r4, sp, #8
NRF_RESULT nrf_rx_tx_control(nrf24l01* dev, NRF_TXRX_STATE rx) {
 8001ea2:	460e      	mov	r6, r1
    uint8_t reg = 0;
 8001ea4:	2100      	movs	r1, #0
 8001ea6:	f804 1d01 	strb.w	r1, [r4, #-1]!
    if (nrf_read_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8001eaa:	4622      	mov	r2, r4
NRF_RESULT nrf_rx_tx_control(nrf24l01* dev, NRF_TXRX_STATE rx) {
 8001eac:	4605      	mov	r5, r0
    if (nrf_read_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8001eae:	f7ff fe3f 	bl	8001b30 <nrf_read_register>
 8001eb2:	b998      	cbnz	r0, 8001edc <nrf_rx_tx_control+0x3e>
 8001eb4:	f89d 3007 	ldrb.w	r3, [sp, #7]
        return NRF_ERROR;
    }

    if (rx) {
 8001eb8:	b16e      	cbz	r6, 8001ed6 <nrf_rx_tx_control+0x38>
        reg |= 1;
 8001eba:	f043 0301 	orr.w	r3, r3, #1
    } else {
        reg &= ~(1);
    }

    if (nrf_write_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8001ebe:	4622      	mov	r2, r4
 8001ec0:	2100      	movs	r1, #0
 8001ec2:	4628      	mov	r0, r5
        reg &= ~(1);
 8001ec4:	f88d 3007 	strb.w	r3, [sp, #7]
    if (nrf_write_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8001ec8:	f7ff fe42 	bl	8001b50 <nrf_write_register>
        return NRF_ERROR;
 8001ecc:	3000      	adds	r0, #0
 8001ece:	bf18      	it	ne
 8001ed0:	2001      	movne	r0, #1
        return NRF_ERROR;
    }
    return NRF_OK;
}
 8001ed2:	b002      	add	sp, #8
 8001ed4:	bd70      	pop	{r4, r5, r6, pc}
        reg &= ~(1);
 8001ed6:	f023 0301 	bic.w	r3, r3, #1
 8001eda:	e7f0      	b.n	8001ebe <nrf_rx_tx_control+0x20>
        return NRF_ERROR;
 8001edc:	2001      	movs	r0, #1
 8001ede:	e7f8      	b.n	8001ed2 <nrf_rx_tx_control+0x34>

08001ee0 <nrf_irq_handler>:
void nrf_irq_handler(nrf24l01* dev) {
 8001ee0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint8_t status = 0;
 8001ee2:	ad02      	add	r5, sp, #8
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	f805 3d02 	strb.w	r3, [r5, #-2]!
void nrf_irq_handler(nrf24l01* dev) {
 8001eea:	4604      	mov	r4, r0
	HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_14);
 8001eec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ef0:	4841      	ldr	r0, [pc, #260]	; (8001ff8 <nrf_irq_handler+0x118>)
 8001ef2:	f7fe fcac 	bl	800084e <HAL_GPIO_TogglePin>
    if (nrf_read_register(dev, NRF_STATUS, &status) != NRF_OK) { return; }
 8001ef6:	462a      	mov	r2, r5
 8001ef8:	2107      	movs	r1, #7
 8001efa:	4620      	mov	r0, r4
 8001efc:	f7ff fe18 	bl	8001b30 <nrf_read_register>
 8001f00:	2800      	cmp	r0, #0
 8001f02:	d177      	bne.n	8001ff4 <nrf_irq_handler+0x114>
    if ((status & (1 << 6))) { // RX FIFO Interrupt
 8001f04:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8001f08:	065e      	lsls	r6, r3, #25
 8001f0a:	d52a      	bpl.n	8001f62 <nrf_irq_handler+0x82>
        uint8_t fifo_status = 0;
 8001f0c:	ae02      	add	r6, sp, #8
 8001f0e:	f806 0d01 	strb.w	r0, [r6, #-1]!
        ce_reset(dev);
 8001f12:	4620      	mov	r0, r4
 8001f14:	f7ff fda2 	bl	8001a5c <ce_reset>
        nrf_write_register(dev, NRF_STATUS, &status);
 8001f18:	462a      	mov	r2, r5
 8001f1a:	2107      	movs	r1, #7
 8001f1c:	4620      	mov	r0, r4
 8001f1e:	f7ff fe17 	bl	8001b50 <nrf_write_register>
        nrf_read_register(dev, NRF_FIFO_STATUS, &fifo_status);
 8001f22:	4632      	mov	r2, r6
 8001f24:	2117      	movs	r1, #23
 8001f26:	4620      	mov	r0, r4
 8001f28:	f7ff fe02 	bl	8001b30 <nrf_read_register>
        if ((fifo_status & 1) == 0) {
 8001f2c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001f30:	07d8      	lsls	r0, r3, #31
 8001f32:	d413      	bmi.n	8001f5c <nrf_irq_handler+0x7c>
            uint8_t* rx_buffer = dev->config.rx_buffer;
 8001f34:	6926      	ldr	r6, [r4, #16]
            nrf_read_rx_payload(dev, rx_buffer);
 8001f36:	4620      	mov	r0, r4
 8001f38:	4631      	mov	r1, r6
 8001f3a:	f7ff fe19 	bl	8001b70 <nrf_read_rx_payload>
            status |= 1 << 6;
 8001f3e:	f89d 3006 	ldrb.w	r3, [sp, #6]
            nrf_write_register(dev, NRF_STATUS, &status);
 8001f42:	2107      	movs	r1, #7
            status |= 1 << 6;
 8001f44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
            nrf_write_register(dev, NRF_STATUS, &status);
 8001f48:	462a      	mov	r2, r5
 8001f4a:	4620      	mov	r0, r4
            status |= 1 << 6;
 8001f4c:	f88d 3006 	strb.w	r3, [sp, #6]
            nrf_write_register(dev, NRF_STATUS, &status);
 8001f50:	f7ff fdfe 	bl	8001b50 <nrf_write_register>
            nrf_packet_received_callback(dev, rx_buffer);
 8001f54:	4631      	mov	r1, r6
 8001f56:	4620      	mov	r0, r4
 8001f58:	f7ff fdd6 	bl	8001b08 <nrf_packet_received_callback>
        ce_set(dev);
 8001f5c:	4620      	mov	r0, r4
 8001f5e:	f7ff fd82 	bl	8001a66 <ce_set>
    if ((status & (1 << 5))) { // TX Data Sent Interrupt
 8001f62:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8001f66:	0699      	lsls	r1, r3, #26
 8001f68:	d51a      	bpl.n	8001fa0 <nrf_irq_handler+0xc0>
        status |= 1 << 5;      // clear the interrupt flag
 8001f6a:	f043 0320 	orr.w	r3, r3, #32
        ce_reset(dev);
 8001f6e:	4620      	mov	r0, r4
        status |= 1 << 5;      // clear the interrupt flag
 8001f70:	f88d 3006 	strb.w	r3, [sp, #6]
        ce_reset(dev);
 8001f74:	f7ff fd72 	bl	8001a5c <ce_reset>
        nrf_rx_tx_control(dev, NRF_STATE_RX);
 8001f78:	2101      	movs	r1, #1
 8001f7a:	4620      	mov	r0, r4
 8001f7c:	f7ff ff8f 	bl	8001e9e <nrf_rx_tx_control>
        dev->state = NRF_STATE_RX;
 8001f80:	2301      	movs	r3, #1
 8001f82:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
        ce_set(dev);
 8001f86:	4620      	mov	r0, r4
 8001f88:	f7ff fd6d 	bl	8001a66 <ce_set>
        nrf_write_register(dev, NRF_STATUS, &status);
 8001f8c:	462a      	mov	r2, r5
 8001f8e:	2107      	movs	r1, #7
 8001f90:	4620      	mov	r0, r4
 8001f92:	f7ff fddd 	bl	8001b50 <nrf_write_register>
        dev->tx_result = NRF_OK;
 8001f96:	2300      	movs	r3, #0
 8001f98:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        dev->tx_busy   = 0;
 8001f9c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if ((status & (1 << 4))) { // MaxRetransmits reached
 8001fa0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8001fa4:	06da      	lsls	r2, r3, #27
 8001fa6:	d525      	bpl.n	8001ff4 <nrf_irq_handler+0x114>
        status |= 1 << 4;
 8001fa8:	f043 0310 	orr.w	r3, r3, #16
        nrf_flush_tx(dev);
 8001fac:	4620      	mov	r0, r4
        status |= 1 << 4;
 8001fae:	f88d 3006 	strb.w	r3, [sp, #6]
        nrf_flush_tx(dev);
 8001fb2:	f7ff fdf1 	bl	8001b98 <nrf_flush_tx>
        nrf_power_up(dev, 0); // power down
 8001fb6:	2100      	movs	r1, #0
 8001fb8:	4620      	mov	r0, r4
 8001fba:	f7ff ff4f 	bl	8001e5c <nrf_power_up>
        nrf_power_up(dev, 1); // power up
 8001fbe:	2101      	movs	r1, #1
 8001fc0:	4620      	mov	r0, r4
 8001fc2:	f7ff ff4b 	bl	8001e5c <nrf_power_up>
        ce_reset(dev);
 8001fc6:	4620      	mov	r0, r4
 8001fc8:	f7ff fd48 	bl	8001a5c <ce_reset>
        dev->state = NRF_STATE_RX;
 8001fcc:	2601      	movs	r6, #1
        nrf_rx_tx_control(dev, NRF_STATE_RX);
 8001fce:	2101      	movs	r1, #1
 8001fd0:	4620      	mov	r0, r4
 8001fd2:	f7ff ff64 	bl	8001e9e <nrf_rx_tx_control>
        ce_set(dev);
 8001fd6:	4620      	mov	r0, r4
        dev->state = NRF_STATE_RX;
 8001fd8:	f884 6037 	strb.w	r6, [r4, #55]	; 0x37
        ce_set(dev);
 8001fdc:	f7ff fd43 	bl	8001a66 <ce_set>
        nrf_write_register(dev, NRF_STATUS, &status);
 8001fe0:	462a      	mov	r2, r5
 8001fe2:	2107      	movs	r1, #7
 8001fe4:	4620      	mov	r0, r4
 8001fe6:	f7ff fdb3 	bl	8001b50 <nrf_write_register>
        dev->tx_busy   = 0;
 8001fea:	2300      	movs	r3, #0
        dev->tx_result = NRF_ERROR;
 8001fec:	f884 6035 	strb.w	r6, [r4, #53]	; 0x35
        dev->tx_busy   = 0;
 8001ff0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8001ff4:	b002      	add	sp, #8
 8001ff6:	bd70      	pop	{r4, r5, r6, pc}
 8001ff8:	40020c00 	.word	0x40020c00

08001ffc <nrf_enable_rx_data_ready_irq>:

NRF_RESULT nrf_enable_rx_data_ready_irq(nrf24l01* dev, bool activate) {
 8001ffc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint8_t reg = 0;
 8001ffe:	ac02      	add	r4, sp, #8
NRF_RESULT nrf_enable_rx_data_ready_irq(nrf24l01* dev, bool activate) {
 8002000:	460e      	mov	r6, r1
    uint8_t reg = 0;
 8002002:	2100      	movs	r1, #0
 8002004:	f804 1d01 	strb.w	r1, [r4, #-1]!
    if (nrf_read_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8002008:	4622      	mov	r2, r4
NRF_RESULT nrf_enable_rx_data_ready_irq(nrf24l01* dev, bool activate) {
 800200a:	4605      	mov	r5, r0
    if (nrf_read_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 800200c:	f7ff fd90 	bl	8001b30 <nrf_read_register>
 8002010:	b998      	cbnz	r0, 800203a <nrf_enable_rx_data_ready_irq+0x3e>
 8002012:	f89d 3007 	ldrb.w	r3, [sp, #7]
        return NRF_ERROR;
    }

    if (!activate) {
 8002016:	b96e      	cbnz	r6, 8002034 <nrf_enable_rx_data_ready_irq+0x38>
        reg |= 1 << 6;
 8002018:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    } else {
        reg &= ~(1 << 6);
    }

    if (nrf_write_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 800201c:	4622      	mov	r2, r4
 800201e:	2100      	movs	r1, #0
 8002020:	4628      	mov	r0, r5
        reg &= ~(1 << 6);
 8002022:	f88d 3007 	strb.w	r3, [sp, #7]
    if (nrf_write_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8002026:	f7ff fd93 	bl	8001b50 <nrf_write_register>
        return NRF_ERROR;
 800202a:	3000      	adds	r0, #0
 800202c:	bf18      	it	ne
 800202e:	2001      	movne	r0, #1
        return NRF_ERROR;
    }
    return NRF_OK;
}
 8002030:	b002      	add	sp, #8
 8002032:	bd70      	pop	{r4, r5, r6, pc}
        reg &= ~(1 << 6);
 8002034:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002038:	e7f0      	b.n	800201c <nrf_enable_rx_data_ready_irq+0x20>
        return NRF_ERROR;
 800203a:	2001      	movs	r0, #1
 800203c:	e7f8      	b.n	8002030 <nrf_enable_rx_data_ready_irq+0x34>

0800203e <nrf_enable_tx_data_sent_irq>:

NRF_RESULT nrf_enable_tx_data_sent_irq(nrf24l01* dev, bool activate) {
 800203e:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint8_t reg = 0;
 8002040:	ac02      	add	r4, sp, #8
NRF_RESULT nrf_enable_tx_data_sent_irq(nrf24l01* dev, bool activate) {
 8002042:	460e      	mov	r6, r1
    uint8_t reg = 0;
 8002044:	2100      	movs	r1, #0
 8002046:	f804 1d01 	strb.w	r1, [r4, #-1]!
    if (nrf_read_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 800204a:	4622      	mov	r2, r4
NRF_RESULT nrf_enable_tx_data_sent_irq(nrf24l01* dev, bool activate) {
 800204c:	4605      	mov	r5, r0
    if (nrf_read_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 800204e:	f7ff fd6f 	bl	8001b30 <nrf_read_register>
 8002052:	b998      	cbnz	r0, 800207c <nrf_enable_tx_data_sent_irq+0x3e>
 8002054:	f89d 3007 	ldrb.w	r3, [sp, #7]
        return NRF_ERROR;
    }
    if (!activate) {
 8002058:	b96e      	cbnz	r6, 8002076 <nrf_enable_tx_data_sent_irq+0x38>
        reg |= 1 << 5;
 800205a:	f043 0320 	orr.w	r3, r3, #32
    } else {
        reg &= ~(1 << 5);
    }
    if (nrf_write_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 800205e:	4622      	mov	r2, r4
 8002060:	2100      	movs	r1, #0
 8002062:	4628      	mov	r0, r5
        reg &= ~(1 << 5);
 8002064:	f88d 3007 	strb.w	r3, [sp, #7]
    if (nrf_write_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8002068:	f7ff fd72 	bl	8001b50 <nrf_write_register>
        return NRF_ERROR;
 800206c:	3000      	adds	r0, #0
 800206e:	bf18      	it	ne
 8002070:	2001      	movne	r0, #1
        return NRF_ERROR;
    }
    return NRF_OK;
}
 8002072:	b002      	add	sp, #8
 8002074:	bd70      	pop	{r4, r5, r6, pc}
        reg &= ~(1 << 5);
 8002076:	f023 0320 	bic.w	r3, r3, #32
 800207a:	e7f0      	b.n	800205e <nrf_enable_tx_data_sent_irq+0x20>
        return NRF_ERROR;
 800207c:	2001      	movs	r0, #1
 800207e:	e7f8      	b.n	8002072 <nrf_enable_tx_data_sent_irq+0x34>

08002080 <nrf_enable_max_retransmit_irq>:

NRF_RESULT nrf_enable_max_retransmit_irq(nrf24l01* dev, bool activate) {
 8002080:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint8_t reg = 0;
 8002082:	ac02      	add	r4, sp, #8
NRF_RESULT nrf_enable_max_retransmit_irq(nrf24l01* dev, bool activate) {
 8002084:	460e      	mov	r6, r1
    uint8_t reg = 0;
 8002086:	2100      	movs	r1, #0
 8002088:	f804 1d01 	strb.w	r1, [r4, #-1]!
    if (nrf_read_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 800208c:	4622      	mov	r2, r4
NRF_RESULT nrf_enable_max_retransmit_irq(nrf24l01* dev, bool activate) {
 800208e:	4605      	mov	r5, r0
    if (nrf_read_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8002090:	f7ff fd4e 	bl	8001b30 <nrf_read_register>
 8002094:	b998      	cbnz	r0, 80020be <nrf_enable_max_retransmit_irq+0x3e>
 8002096:	f89d 3007 	ldrb.w	r3, [sp, #7]
        return NRF_ERROR;
    }
    if (!activate) {
 800209a:	b96e      	cbnz	r6, 80020b8 <nrf_enable_max_retransmit_irq+0x38>
        reg |= 1 << 4;
 800209c:	f043 0310 	orr.w	r3, r3, #16
    } else {
        reg &= ~(1 << 4);
    }
    if (nrf_write_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 80020a0:	4622      	mov	r2, r4
 80020a2:	2100      	movs	r1, #0
 80020a4:	4628      	mov	r0, r5
        reg &= ~(1 << 4);
 80020a6:	f88d 3007 	strb.w	r3, [sp, #7]
    if (nrf_write_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 80020aa:	f7ff fd51 	bl	8001b50 <nrf_write_register>
        return NRF_ERROR;
 80020ae:	3000      	adds	r0, #0
 80020b0:	bf18      	it	ne
 80020b2:	2001      	movne	r0, #1
        return NRF_ERROR;
    }
    return NRF_OK;
}
 80020b4:	b002      	add	sp, #8
 80020b6:	bd70      	pop	{r4, r5, r6, pc}
        reg &= ~(1 << 4);
 80020b8:	f023 0310 	bic.w	r3, r3, #16
 80020bc:	e7f0      	b.n	80020a0 <nrf_enable_max_retransmit_irq+0x20>
        return NRF_ERROR;
 80020be:	2001      	movs	r0, #1
 80020c0:	e7f8      	b.n	80020b4 <nrf_enable_max_retransmit_irq+0x34>

080020c2 <nrf_set_rx_address_p0>:

NRF_RESULT nrf_set_rx_address_p0(nrf24l01* dev, const uint8_t* address) {
 80020c2:	b530      	push	{r4, r5, lr}
 80020c4:	b085      	sub	sp, #20
    uint8_t rx[5];
    if (nrf_send_command(dev, NRF_CMD_W_REGISTER | NRF_RX_ADDR_P0, address, rx,
 80020c6:	2305      	movs	r3, #5
NRF_RESULT nrf_set_rx_address_p0(nrf24l01* dev, const uint8_t* address) {
 80020c8:	460c      	mov	r4, r1
    if (nrf_send_command(dev, NRF_CMD_W_REGISTER | NRF_RX_ADDR_P0, address, rx,
 80020ca:	9300      	str	r3, [sp, #0]
 80020cc:	460a      	mov	r2, r1
 80020ce:	ab02      	add	r3, sp, #8
 80020d0:	212a      	movs	r1, #42	; 0x2a
NRF_RESULT nrf_set_rx_address_p0(nrf24l01* dev, const uint8_t* address) {
 80020d2:	4605      	mov	r5, r0
    if (nrf_send_command(dev, NRF_CMD_W_REGISTER | NRF_RX_ADDR_P0, address, rx,
 80020d4:	f7ff fccc 	bl	8001a70 <nrf_send_command>
 80020d8:	b910      	cbnz	r0, 80020e0 <nrf_set_rx_address_p0+0x1e>
                         5) != NRF_OK) {
        return NRF_ERROR;
    }
    dev->config.rx_address = address;
 80020da:	60ac      	str	r4, [r5, #8]
    return NRF_OK;
}
 80020dc:	b005      	add	sp, #20
 80020de:	bd30      	pop	{r4, r5, pc}
        return NRF_ERROR;
 80020e0:	2001      	movs	r0, #1
 80020e2:	e7fb      	b.n	80020dc <nrf_set_rx_address_p0+0x1a>

080020e4 <nrf_set_rx_address_p1>:

NRF_RESULT nrf_set_rx_address_p1(nrf24l01* dev, const uint8_t* address) {
 80020e4:	b530      	push	{r4, r5, lr}
 80020e6:	b085      	sub	sp, #20
    uint8_t rx[5];
    if (nrf_send_command(dev, NRF_CMD_W_REGISTER | NRF_RX_ADDR_P1, address, rx,
 80020e8:	2305      	movs	r3, #5
NRF_RESULT nrf_set_rx_address_p1(nrf24l01* dev, const uint8_t* address) {
 80020ea:	460c      	mov	r4, r1
    if (nrf_send_command(dev, NRF_CMD_W_REGISTER | NRF_RX_ADDR_P1, address, rx,
 80020ec:	9300      	str	r3, [sp, #0]
 80020ee:	460a      	mov	r2, r1
 80020f0:	ab02      	add	r3, sp, #8
 80020f2:	212b      	movs	r1, #43	; 0x2b
NRF_RESULT nrf_set_rx_address_p1(nrf24l01* dev, const uint8_t* address) {
 80020f4:	4605      	mov	r5, r0
    if (nrf_send_command(dev, NRF_CMD_W_REGISTER | NRF_RX_ADDR_P1, address, rx,
 80020f6:	f7ff fcbb 	bl	8001a70 <nrf_send_command>
 80020fa:	b910      	cbnz	r0, 8002102 <nrf_set_rx_address_p1+0x1e>
                         5) != NRF_OK) {
        return NRF_ERROR;
    }
    dev->config.rx_address = address;
 80020fc:	60ac      	str	r4, [r5, #8]
    return NRF_OK;
}
 80020fe:	b005      	add	sp, #20
 8002100:	bd30      	pop	{r4, r5, pc}
        return NRF_ERROR;
 8002102:	2001      	movs	r0, #1
 8002104:	e7fb      	b.n	80020fe <nrf_set_rx_address_p1+0x1a>

08002106 <nrf_set_tx_address>:

NRF_RESULT nrf_set_tx_address(nrf24l01* dev, const uint8_t* address) {
 8002106:	b530      	push	{r4, r5, lr}
 8002108:	b085      	sub	sp, #20
    uint8_t rx[5];
    if (nrf_send_command(dev, NRF_CMD_W_REGISTER | NRF_TX_ADDR, address, rx,
 800210a:	2305      	movs	r3, #5
NRF_RESULT nrf_set_tx_address(nrf24l01* dev, const uint8_t* address) {
 800210c:	460c      	mov	r4, r1
    if (nrf_send_command(dev, NRF_CMD_W_REGISTER | NRF_TX_ADDR, address, rx,
 800210e:	9300      	str	r3, [sp, #0]
 8002110:	460a      	mov	r2, r1
 8002112:	ab02      	add	r3, sp, #8
 8002114:	2130      	movs	r1, #48	; 0x30
NRF_RESULT nrf_set_tx_address(nrf24l01* dev, const uint8_t* address) {
 8002116:	4605      	mov	r5, r0
    if (nrf_send_command(dev, NRF_CMD_W_REGISTER | NRF_TX_ADDR, address, rx,
 8002118:	f7ff fcaa 	bl	8001a70 <nrf_send_command>
 800211c:	b910      	cbnz	r0, 8002124 <nrf_set_tx_address+0x1e>
                         5) != NRF_OK) {
        return NRF_ERROR;
    }
    dev->config.tx_address = address;
 800211e:	60ec      	str	r4, [r5, #12]
    return NRF_OK;
}
 8002120:	b005      	add	sp, #20
 8002122:	bd30      	pop	{r4, r5, pc}
        return NRF_ERROR;
 8002124:	2001      	movs	r0, #1
 8002126:	e7fb      	b.n	8002120 <nrf_set_tx_address+0x1a>

08002128 <nrf_set_rx_payload_width_p0>:

NRF_RESULT nrf_set_rx_payload_width_p0(nrf24l01* dev, uint8_t width) {
 8002128:	b513      	push	{r0, r1, r4, lr}
    width &= 0x3F;
 800212a:	aa02      	add	r2, sp, #8
 800212c:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002130:	f802 1d01 	strb.w	r1, [r2, #-1]!
    if (nrf_write_register(dev, NRF_RX_PW_P0, &width) != NRF_OK) {
 8002134:	2111      	movs	r1, #17
NRF_RESULT nrf_set_rx_payload_width_p0(nrf24l01* dev, uint8_t width) {
 8002136:	4604      	mov	r4, r0
    if (nrf_write_register(dev, NRF_RX_PW_P0, &width) != NRF_OK) {
 8002138:	f7ff fd0a 	bl	8001b50 <nrf_write_register>
 800213c:	b120      	cbz	r0, 8002148 <nrf_set_rx_payload_width_p0+0x20>
        dev->config.payload_length = 0;
 800213e:	2300      	movs	r3, #0
 8002140:	7123      	strb	r3, [r4, #4]
        return NRF_ERROR;
 8002142:	2001      	movs	r0, #1
    }
    dev->config.payload_length = width;
    return NRF_OK;
}
 8002144:	b002      	add	sp, #8
 8002146:	bd10      	pop	{r4, pc}
    dev->config.payload_length = width;
 8002148:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800214c:	7123      	strb	r3, [r4, #4]
    return NRF_OK;
 800214e:	e7f9      	b.n	8002144 <nrf_set_rx_payload_width_p0+0x1c>

08002150 <nrf_set_rx_payload_width_p1>:

NRF_RESULT nrf_set_rx_payload_width_p1(nrf24l01* dev, uint8_t width) {
 8002150:	b513      	push	{r0, r1, r4, lr}
    width &= 0x3F;
 8002152:	aa02      	add	r2, sp, #8
 8002154:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002158:	f802 1d01 	strb.w	r1, [r2, #-1]!
    if (nrf_write_register(dev, NRF_RX_PW_P1, &width) != NRF_OK) {
 800215c:	2112      	movs	r1, #18
NRF_RESULT nrf_set_rx_payload_width_p1(nrf24l01* dev, uint8_t width) {
 800215e:	4604      	mov	r4, r0
    if (nrf_write_register(dev, NRF_RX_PW_P1, &width) != NRF_OK) {
 8002160:	f7ff fcf6 	bl	8001b50 <nrf_write_register>
 8002164:	b120      	cbz	r0, 8002170 <nrf_set_rx_payload_width_p1+0x20>
        dev->config.payload_length = 0;
 8002166:	2300      	movs	r3, #0
 8002168:	7123      	strb	r3, [r4, #4]
        return NRF_ERROR;
 800216a:	2001      	movs	r0, #1
    }
    dev->config.payload_length = width;
    return NRF_OK;
}
 800216c:	b002      	add	sp, #8
 800216e:	bd10      	pop	{r4, pc}
    dev->config.payload_length = width;
 8002170:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002174:	7123      	strb	r3, [r4, #4]
    return NRF_OK;
 8002176:	e7f9      	b.n	800216c <nrf_set_rx_payload_width_p1+0x1c>

08002178 <nrf_init>:
NRF_RESULT nrf_init(nrf24l01* dev, nrf24l01_config* config) {
 8002178:	b573      	push	{r0, r1, r4, r5, r6, lr}
    dev->config = *config;
 800217a:	460e      	mov	r6, r1
NRF_RESULT nrf_init(nrf24l01* dev, nrf24l01_config* config) {
 800217c:	4604      	mov	r4, r0
    dev->config = *config;
 800217e:	4605      	mov	r5, r0
 8002180:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002182:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002184:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002186:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002188:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800218a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800218c:	6833      	ldr	r3, [r6, #0]
 800218e:	602b      	str	r3, [r5, #0]
    ce_reset(dev);
 8002190:	4620      	mov	r0, r4
 8002192:	f7ff fc63 	bl	8001a5c <ce_reset>
    HAL_GPIO_WritePin(dev->config.csn_port, dev->config.csn_pin,
 8002196:	2200      	movs	r2, #0
 8002198:	8c21      	ldrh	r1, [r4, #32]
 800219a:	69e0      	ldr	r0, [r4, #28]
 800219c:	f7fe fb52 	bl	8000844 <HAL_GPIO_WritePin>
    uint8_t config_reg = 0;
 80021a0:	ad02      	add	r5, sp, #8
    nrf_power_up(dev, true);
 80021a2:	2101      	movs	r1, #1
 80021a4:	4620      	mov	r0, r4
 80021a6:	f7ff fe59 	bl	8001e5c <nrf_power_up>
    uint8_t config_reg = 0;
 80021aa:	2300      	movs	r3, #0
 80021ac:	f805 3d01 	strb.w	r3, [r5, #-1]!
    while ((config_reg & 2) == 0) { // wait for powerup
 80021b0:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80021b4:	f011 0102 	ands.w	r1, r1, #2
 80021b8:	d053      	beq.n	8002262 <nrf_init+0xea>
    nrf_set_rx_payload_width_p0(dev, dev->config.payload_length);
 80021ba:	7921      	ldrb	r1, [r4, #4]
 80021bc:	4620      	mov	r0, r4
 80021be:	f7ff ffb3 	bl	8002128 <nrf_set_rx_payload_width_p0>
    nrf_set_rx_payload_width_p1(dev, dev->config.payload_length);
 80021c2:	7921      	ldrb	r1, [r4, #4]
 80021c4:	4620      	mov	r0, r4
 80021c6:	f7ff ffc3 	bl	8002150 <nrf_set_rx_payload_width_p1>
    nrf_set_rx_address_p1(dev, dev->config.rx_address);
 80021ca:	68a1      	ldr	r1, [r4, #8]
 80021cc:	4620      	mov	r0, r4
 80021ce:	f7ff ff89 	bl	80020e4 <nrf_set_rx_address_p1>
    nrf_set_rx_address_p0(dev, dev->config.tx_address);
 80021d2:	68e1      	ldr	r1, [r4, #12]
 80021d4:	4620      	mov	r0, r4
 80021d6:	f7ff ff74 	bl	80020c2 <nrf_set_rx_address_p0>
    nrf_set_tx_address(dev, dev->config.tx_address);
 80021da:	68e1      	ldr	r1, [r4, #12]
 80021dc:	4620      	mov	r0, r4
 80021de:	f7ff ff92 	bl	8002106 <nrf_set_tx_address>
    nrf_enable_rx_data_ready_irq(dev, 1);
 80021e2:	2101      	movs	r1, #1
 80021e4:	4620      	mov	r0, r4
 80021e6:	f7ff ff09 	bl	8001ffc <nrf_enable_rx_data_ready_irq>
    nrf_enable_tx_data_sent_irq(dev, 1);
 80021ea:	2101      	movs	r1, #1
 80021ec:	4620      	mov	r0, r4
 80021ee:	f7ff ff26 	bl	800203e <nrf_enable_tx_data_sent_irq>
    nrf_enable_max_retransmit_irq(dev, 1);
 80021f2:	2101      	movs	r1, #1
 80021f4:	4620      	mov	r0, r4
 80021f6:	f7ff ff43 	bl	8002080 <nrf_enable_max_retransmit_irq>
    nrf_enable_crc(dev, 1);
 80021fa:	2101      	movs	r1, #1
 80021fc:	4620      	mov	r0, r4
 80021fe:	f7ff fdeb 	bl	8001dd8 <nrf_enable_crc>
    nrf_set_crc_width(dev, dev->config.crc_width);
 8002202:	78a1      	ldrb	r1, [r4, #2]
 8002204:	4620      	mov	r0, r4
 8002206:	f7ff fe08 	bl	8001e1a <nrf_set_crc_width>
    nrf_set_address_width(dev, dev->config.addr_width);
 800220a:	78e1      	ldrb	r1, [r4, #3]
 800220c:	4620      	mov	r0, r4
 800220e:	f7ff fd98 	bl	8001d42 <nrf_set_address_width>
    nrf_set_rf_channel(dev, dev->config.rf_channel);
 8002212:	79e1      	ldrb	r1, [r4, #7]
 8002214:	4620      	mov	r0, r4
 8002216:	f7ff fd32 	bl	8001c7e <nrf_set_rf_channel>
    nrf_set_data_rate(dev, dev->config.data_rate);
 800221a:	7821      	ldrb	r1, [r4, #0]
 800221c:	4620      	mov	r0, r4
 800221e:	f7ff fce3 	bl	8001be8 <nrf_set_data_rate>
    nrf_set_retransmittion_count(dev, dev->config.retransmit_count);
 8002222:	7961      	ldrb	r1, [r4, #5]
 8002224:	4620      	mov	r0, r4
 8002226:	f7ff fd49 	bl	8001cbc <nrf_set_retransmittion_count>
    nrf_set_retransmittion_delay(dev, dev->config.retransmit_delay);
 800222a:	79a1      	ldrb	r1, [r4, #6]
 800222c:	4620      	mov	r0, r4
 800222e:	f7ff fd66 	bl	8001cfe <nrf_set_retransmittion_delay>
    nrf_set_rx_pipes(dev, 0x03);
 8002232:	2103      	movs	r1, #3
 8002234:	4620      	mov	r0, r4
 8002236:	f7ff fda3 	bl	8001d80 <nrf_set_rx_pipes>
    nrf_enable_auto_ack(dev, 0);
 800223a:	2100      	movs	r1, #0
 800223c:	4620      	mov	r0, r4
 800223e:	f7ff fdac 	bl	8001d9a <nrf_enable_auto_ack>
    nrf_clear_interrupts(dev);
 8002242:	4620      	mov	r0, r4
 8002244:	f7ff fcfe 	bl	8001c44 <nrf_clear_interrupts>
    nrf_rx_tx_control(dev, NRF_STATE_RX);
 8002248:	2101      	movs	r1, #1
 800224a:	4620      	mov	r0, r4
 800224c:	f7ff fe27 	bl	8001e9e <nrf_rx_tx_control>
    nrf_flush_rx(dev);
 8002250:	4620      	mov	r0, r4
 8002252:	f7ff fcb5 	bl	8001bc0 <nrf_flush_rx>
    ce_set(dev);
 8002256:	4620      	mov	r0, r4
 8002258:	f7ff fc05 	bl	8001a66 <ce_set>
}
 800225c:	2000      	movs	r0, #0
 800225e:	b002      	add	sp, #8
 8002260:	bd70      	pop	{r4, r5, r6, pc}
        nrf_read_register(dev, NRF_CONFIG, &config_reg);
 8002262:	462a      	mov	r2, r5
 8002264:	4620      	mov	r0, r4
 8002266:	f7ff fc63 	bl	8001b30 <nrf_read_register>
 800226a:	e7a1      	b.n	80021b0 <nrf_init+0x38>

0800226c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800226c:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800226e:	4b0e      	ldr	r3, [pc, #56]	; (80022a8 <HAL_MspInit+0x3c>)
 8002270:	2100      	movs	r1, #0
 8002272:	9100      	str	r1, [sp, #0]
 8002274:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002276:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800227a:	645a      	str	r2, [r3, #68]	; 0x44
 800227c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800227e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002282:	9200      	str	r2, [sp, #0]
 8002284:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002286:	9101      	str	r1, [sp, #4]
 8002288:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800228a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800228e:	641a      	str	r2, [r3, #64]	; 0x40
 8002290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002292:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002296:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002298:	2007      	movs	r0, #7
  __HAL_RCC_PWR_CLK_ENABLE();
 800229a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800229c:	f7fe f988 	bl	80005b0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022a0:	b003      	add	sp, #12
 80022a2:	f85d fb04 	ldr.w	pc, [sp], #4
 80022a6:	bf00      	nop
 80022a8:	40023800 	.word	0x40023800

080022ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80022ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022ae:	4604      	mov	r4, r0
 80022b0:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022b2:	2214      	movs	r2, #20
 80022b4:	2100      	movs	r1, #0
 80022b6:	a803      	add	r0, sp, #12
 80022b8:	f000 f908 	bl	80024cc <memset>
  if(hspi->Instance==SPI1)
 80022bc:	6822      	ldr	r2, [r4, #0]
 80022be:	4b1e      	ldr	r3, [pc, #120]	; (8002338 <HAL_SPI_MspInit+0x8c>)
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d136      	bne.n	8002332 <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80022c4:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 80022c8:	2400      	movs	r4, #0
 80022ca:	9400      	str	r4, [sp, #0]
 80022cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022ce:	481b      	ldr	r0, [pc, #108]	; (800233c <HAL_SPI_MspInit+0x90>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 80022d0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80022d4:	645a      	str	r2, [r3, #68]	; 0x44
 80022d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80022d8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80022dc:	9200      	str	r2, [sp, #0]
 80022de:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022e0:	9401      	str	r4, [sp, #4]
 80022e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022e4:	f042 0201 	orr.w	r2, r2, #1
 80022e8:	631a      	str	r2, [r3, #48]	; 0x30
 80022ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022ec:	f002 0201 	and.w	r2, r2, #1
 80022f0:	9201      	str	r2, [sp, #4]
 80022f2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022f4:	9402      	str	r4, [sp, #8]
 80022f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022f8:	f042 0202 	orr.w	r2, r2, #2
 80022fc:	631a      	str	r2, [r3, #48]	; 0x30
 80022fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002300:	f003 0302 	and.w	r3, r3, #2
 8002304:	9302      	str	r3, [sp, #8]
 8002306:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002308:	2702      	movs	r7, #2
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800230a:	2370      	movs	r3, #112	; 0x70
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800230c:	2603      	movs	r6, #3
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800230e:	2505      	movs	r5, #5
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002310:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8002312:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002314:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002316:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002318:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800231a:	f7fe f9b3 	bl	8000684 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800231e:	2320      	movs	r3, #32
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002320:	a903      	add	r1, sp, #12
 8002322:	4807      	ldr	r0, [pc, #28]	; (8002340 <HAL_SPI_MspInit+0x94>)
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002324:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002326:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002328:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800232a:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800232c:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800232e:	f7fe f9a9 	bl	8000684 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002332:	b009      	add	sp, #36	; 0x24
 8002334:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002336:	bf00      	nop
 8002338:	40013000 	.word	0x40013000
 800233c:	40020000 	.word	0x40020000
 8002340:	40020400 	.word	0x40020400

08002344 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002344:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM3)
 8002346:	4b0d      	ldr	r3, [pc, #52]	; (800237c <HAL_TIM_Base_MspInit+0x38>)
 8002348:	6802      	ldr	r2, [r0, #0]
 800234a:	429a      	cmp	r2, r3
 800234c:	d113      	bne.n	8002376 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800234e:	2200      	movs	r2, #0
 8002350:	f503 330d 	add.w	r3, r3, #144384	; 0x23400
 8002354:	9201      	str	r2, [sp, #4]
 8002356:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002358:	f041 0102 	orr.w	r1, r1, #2
 800235c:	6419      	str	r1, [r3, #64]	; 0x40
 800235e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002360:	f003 0302 	and.w	r3, r3, #2
 8002364:	9301      	str	r3, [sp, #4]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002366:	201d      	movs	r0, #29
 8002368:	4611      	mov	r1, r2
    __HAL_RCC_TIM3_CLK_ENABLE();
 800236a:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800236c:	f7fe f932 	bl	80005d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002370:	201d      	movs	r0, #29
 8002372:	f7fe f963 	bl	800063c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002376:	b003      	add	sp, #12
 8002378:	f85d fb04 	ldr.w	pc, [sp], #4
 800237c:	40000400 	.word	0x40000400

08002380 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002380:	b510      	push	{r4, lr}
 8002382:	4604      	mov	r4, r0
 8002384:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002386:	2214      	movs	r2, #20
 8002388:	2100      	movs	r1, #0
 800238a:	a803      	add	r0, sp, #12
 800238c:	f000 f89e 	bl	80024cc <memset>
  if(huart->Instance==USART3)
 8002390:	6822      	ldr	r2, [r4, #0]
 8002392:	4b14      	ldr	r3, [pc, #80]	; (80023e4 <HAL_UART_MspInit+0x64>)
 8002394:	429a      	cmp	r2, r3
 8002396:	d123      	bne.n	80023e0 <HAL_UART_MspInit+0x60>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002398:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
 800239c:	2100      	movs	r1, #0
 800239e:	9101      	str	r1, [sp, #4]
 80023a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023a2:	4811      	ldr	r0, [pc, #68]	; (80023e8 <HAL_UART_MspInit+0x68>)
    __HAL_RCC_USART3_CLK_ENABLE();
 80023a4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80023a8:	641a      	str	r2, [r3, #64]	; 0x40
 80023aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023ac:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 80023b0:	9201      	str	r2, [sp, #4]
 80023b2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80023b4:	9102      	str	r1, [sp, #8]
 80023b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023b8:	f042 0208 	orr.w	r2, r2, #8
 80023bc:	631a      	str	r2, [r3, #48]	; 0x30
 80023be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c0:	f003 0308 	and.w	r3, r3, #8
 80023c4:	9302      	str	r3, [sp, #8]
 80023c6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80023c8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80023cc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ce:	2302      	movs	r3, #2
 80023d0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023d2:	2303      	movs	r3, #3
 80023d4:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023d6:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80023d8:	2307      	movs	r3, #7
 80023da:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023dc:	f7fe f952 	bl	8000684 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80023e0:	b008      	add	sp, #32
 80023e2:	bd10      	pop	{r4, pc}
 80023e4:	40004800 	.word	0x40004800
 80023e8:	40020c00 	.word	0x40020c00

080023ec <NMI_Handler>:
 80023ec:	4770      	bx	lr

080023ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023ee:	e7fe      	b.n	80023ee <HardFault_Handler>

080023f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023f0:	e7fe      	b.n	80023f0 <MemManage_Handler>

080023f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023f2:	e7fe      	b.n	80023f2 <BusFault_Handler>

080023f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023f4:	e7fe      	b.n	80023f4 <UsageFault_Handler>

080023f6 <SVC_Handler>:
 80023f6:	4770      	bx	lr

080023f8 <DebugMon_Handler>:
 80023f8:	4770      	bx	lr

080023fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023fa:	4770      	bx	lr

080023fc <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023fc:	f7fe b8b2 	b.w	8000564 <HAL_IncTick>

08002400 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8002400:	2010      	movs	r0, #16
 8002402:	f7fe ba2b 	b.w	800085c <HAL_GPIO_EXTI_IRQHandler>
	...

08002408 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002408:	4801      	ldr	r0, [pc, #4]	; (8002410 <TIM3_IRQHandler+0x8>)
 800240a:	f7fe be5f 	b.w	80010cc <HAL_TIM_IRQHandler>
 800240e:	bf00      	nop
 8002410:	2000006c 	.word	0x2000006c

08002414 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002414:	4b05      	ldr	r3, [pc, #20]	; (800242c <SystemInit+0x18>)
 8002416:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800241a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800241e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002422:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002426:	609a      	str	r2, [r3, #8]
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	e000ed00 	.word	0xe000ed00

08002430 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002430:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002468 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002434:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002436:	e003      	b.n	8002440 <LoopCopyDataInit>

08002438 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002438:	4b0c      	ldr	r3, [pc, #48]	; (800246c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800243a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800243c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800243e:	3104      	adds	r1, #4

08002440 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002440:	480b      	ldr	r0, [pc, #44]	; (8002470 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002442:	4b0c      	ldr	r3, [pc, #48]	; (8002474 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002444:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002446:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002448:	d3f6      	bcc.n	8002438 <CopyDataInit>
  ldr  r2, =_sbss
 800244a:	4a0b      	ldr	r2, [pc, #44]	; (8002478 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800244c:	e002      	b.n	8002454 <LoopFillZerobss>

0800244e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800244e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002450:	f842 3b04 	str.w	r3, [r2], #4

08002454 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002454:	4b09      	ldr	r3, [pc, #36]	; (800247c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002456:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002458:	d3f9      	bcc.n	800244e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800245a:	f7ff ffdb 	bl	8002414 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800245e:	f000 f811 	bl	8002484 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002462:	f7ff f9a7 	bl	80017b4 <main>
  bx  lr    
 8002466:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002468:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800246c:	08002548 	.word	0x08002548
  ldr  r0, =_sdata
 8002470:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002474:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8002478:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 800247c:	20000140 	.word	0x20000140

08002480 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002480:	e7fe      	b.n	8002480 <ADC_IRQHandler>
	...

08002484 <__libc_init_array>:
 8002484:	b570      	push	{r4, r5, r6, lr}
 8002486:	4e0d      	ldr	r6, [pc, #52]	; (80024bc <__libc_init_array+0x38>)
 8002488:	4c0d      	ldr	r4, [pc, #52]	; (80024c0 <__libc_init_array+0x3c>)
 800248a:	1ba4      	subs	r4, r4, r6
 800248c:	10a4      	asrs	r4, r4, #2
 800248e:	2500      	movs	r5, #0
 8002490:	42a5      	cmp	r5, r4
 8002492:	d109      	bne.n	80024a8 <__libc_init_array+0x24>
 8002494:	4e0b      	ldr	r6, [pc, #44]	; (80024c4 <__libc_init_array+0x40>)
 8002496:	4c0c      	ldr	r4, [pc, #48]	; (80024c8 <__libc_init_array+0x44>)
 8002498:	f000 f828 	bl	80024ec <_init>
 800249c:	1ba4      	subs	r4, r4, r6
 800249e:	10a4      	asrs	r4, r4, #2
 80024a0:	2500      	movs	r5, #0
 80024a2:	42a5      	cmp	r5, r4
 80024a4:	d105      	bne.n	80024b2 <__libc_init_array+0x2e>
 80024a6:	bd70      	pop	{r4, r5, r6, pc}
 80024a8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80024ac:	4798      	blx	r3
 80024ae:	3501      	adds	r5, #1
 80024b0:	e7ee      	b.n	8002490 <__libc_init_array+0xc>
 80024b2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80024b6:	4798      	blx	r3
 80024b8:	3501      	adds	r5, #1
 80024ba:	e7f2      	b.n	80024a2 <__libc_init_array+0x1e>
 80024bc:	08002540 	.word	0x08002540
 80024c0:	08002540 	.word	0x08002540
 80024c4:	08002540 	.word	0x08002540
 80024c8:	08002544 	.word	0x08002544

080024cc <memset>:
 80024cc:	4402      	add	r2, r0
 80024ce:	4603      	mov	r3, r0
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d100      	bne.n	80024d6 <memset+0xa>
 80024d4:	4770      	bx	lr
 80024d6:	f803 1b01 	strb.w	r1, [r3], #1
 80024da:	e7f9      	b.n	80024d0 <memset+0x4>

080024dc <strcpy>:
 80024dc:	4603      	mov	r3, r0
 80024de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80024e2:	f803 2b01 	strb.w	r2, [r3], #1
 80024e6:	2a00      	cmp	r2, #0
 80024e8:	d1f9      	bne.n	80024de <strcpy+0x2>
 80024ea:	4770      	bx	lr

080024ec <_init>:
 80024ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024ee:	bf00      	nop
 80024f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024f2:	bc08      	pop	{r3}
 80024f4:	469e      	mov	lr, r3
 80024f6:	4770      	bx	lr

080024f8 <_fini>:
 80024f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024fa:	bf00      	nop
 80024fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024fe:	bc08      	pop	{r3}
 8002500:	469e      	mov	lr, r3
 8002502:	4770      	bx	lr
