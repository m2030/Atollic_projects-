
stmh_DHT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050e0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08005380  08005380  00015380  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005428  08005428  00015428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005430  08005430  00015430  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08005434  08005434  00015434  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  20000000  08005438  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  20000074  080054ac  00020074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  200000d4  0800550c  000200d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram_d1      00000000  24000000  24000000  00020134  2**0
                  CONTENTS
 10 .sram_d2      00000000  30000000  30000000  00020134  2**0
                  CONTENTS
 11 .sram_d3      00000000  38000000  38000000  00020134  2**0
                  CONTENTS
 12 .bss          00000684  20000134  20000134  00020134  2**2
                  ALLOC
 13 ._user_heap_stack 00000800  200007b8  200007b8  00020134  2**0
                  ALLOC
 14 .ARM.attributes 00000030  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY
 15 .debug_info   00026def  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_abbrev 00003d9e  00000000  00000000  00046f53  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_loc    0000daff  00000000  00000000  0004acf1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_aranges 00001140  00000000  00000000  000587f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_ranges 000014d8  00000000  00000000  00059930  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_line   00009fd4  00000000  00000000  0005ae08  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_str    000083d8  00000000  00000000  00064ddc  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .comment      0000007c  00000000  00000000  0006d1b4  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00003620  00000000  00000000  0006d230  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	20000134 	.word	0x20000134
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08005368 	.word	0x08005368

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	20000138 	.word	0x20000138
 80002dc:	08005368 	.word	0x08005368

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b97a 	b.w	800069c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	468c      	mov	ip, r1
 80003c6:	460d      	mov	r5, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	9e08      	ldr	r6, [sp, #32]
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d151      	bne.n	8000474 <__udivmoddi4+0xb4>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d96d      	bls.n	80004b2 <__udivmoddi4+0xf2>
 80003d6:	fab2 fe82 	clz	lr, r2
 80003da:	f1be 0f00 	cmp.w	lr, #0
 80003de:	d00b      	beq.n	80003f8 <__udivmoddi4+0x38>
 80003e0:	f1ce 0c20 	rsb	ip, lr, #32
 80003e4:	fa01 f50e 	lsl.w	r5, r1, lr
 80003e8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003ec:	fa02 f70e 	lsl.w	r7, r2, lr
 80003f0:	ea4c 0c05 	orr.w	ip, ip, r5
 80003f4:	fa00 f40e 	lsl.w	r4, r0, lr
 80003f8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80003fc:	0c25      	lsrs	r5, r4, #16
 80003fe:	fbbc f8fa 	udiv	r8, ip, sl
 8000402:	fa1f f987 	uxth.w	r9, r7
 8000406:	fb0a cc18 	mls	ip, sl, r8, ip
 800040a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800040e:	fb08 f309 	mul.w	r3, r8, r9
 8000412:	42ab      	cmp	r3, r5
 8000414:	d90a      	bls.n	800042c <__udivmoddi4+0x6c>
 8000416:	19ed      	adds	r5, r5, r7
 8000418:	f108 32ff 	add.w	r2, r8, #4294967295
 800041c:	f080 8123 	bcs.w	8000666 <__udivmoddi4+0x2a6>
 8000420:	42ab      	cmp	r3, r5
 8000422:	f240 8120 	bls.w	8000666 <__udivmoddi4+0x2a6>
 8000426:	f1a8 0802 	sub.w	r8, r8, #2
 800042a:	443d      	add	r5, r7
 800042c:	1aed      	subs	r5, r5, r3
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb5 f0fa 	udiv	r0, r5, sl
 8000434:	fb0a 5510 	mls	r5, sl, r0, r5
 8000438:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800043c:	fb00 f909 	mul.w	r9, r0, r9
 8000440:	45a1      	cmp	r9, r4
 8000442:	d909      	bls.n	8000458 <__udivmoddi4+0x98>
 8000444:	19e4      	adds	r4, r4, r7
 8000446:	f100 33ff 	add.w	r3, r0, #4294967295
 800044a:	f080 810a 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800044e:	45a1      	cmp	r9, r4
 8000450:	f240 8107 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000454:	3802      	subs	r0, #2
 8000456:	443c      	add	r4, r7
 8000458:	eba4 0409 	sub.w	r4, r4, r9
 800045c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000460:	2100      	movs	r1, #0
 8000462:	2e00      	cmp	r6, #0
 8000464:	d061      	beq.n	800052a <__udivmoddi4+0x16a>
 8000466:	fa24 f40e 	lsr.w	r4, r4, lr
 800046a:	2300      	movs	r3, #0
 800046c:	6034      	str	r4, [r6, #0]
 800046e:	6073      	str	r3, [r6, #4]
 8000470:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000474:	428b      	cmp	r3, r1
 8000476:	d907      	bls.n	8000488 <__udivmoddi4+0xc8>
 8000478:	2e00      	cmp	r6, #0
 800047a:	d054      	beq.n	8000526 <__udivmoddi4+0x166>
 800047c:	2100      	movs	r1, #0
 800047e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000482:	4608      	mov	r0, r1
 8000484:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000488:	fab3 f183 	clz	r1, r3
 800048c:	2900      	cmp	r1, #0
 800048e:	f040 808e 	bne.w	80005ae <__udivmoddi4+0x1ee>
 8000492:	42ab      	cmp	r3, r5
 8000494:	d302      	bcc.n	800049c <__udivmoddi4+0xdc>
 8000496:	4282      	cmp	r2, r0
 8000498:	f200 80fa 	bhi.w	8000690 <__udivmoddi4+0x2d0>
 800049c:	1a84      	subs	r4, r0, r2
 800049e:	eb65 0503 	sbc.w	r5, r5, r3
 80004a2:	2001      	movs	r0, #1
 80004a4:	46ac      	mov	ip, r5
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	d03f      	beq.n	800052a <__udivmoddi4+0x16a>
 80004aa:	e886 1010 	stmia.w	r6, {r4, ip}
 80004ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b2:	b912      	cbnz	r2, 80004ba <__udivmoddi4+0xfa>
 80004b4:	2701      	movs	r7, #1
 80004b6:	fbb7 f7f2 	udiv	r7, r7, r2
 80004ba:	fab7 fe87 	clz	lr, r7
 80004be:	f1be 0f00 	cmp.w	lr, #0
 80004c2:	d134      	bne.n	800052e <__udivmoddi4+0x16e>
 80004c4:	1beb      	subs	r3, r5, r7
 80004c6:	0c3a      	lsrs	r2, r7, #16
 80004c8:	fa1f fc87 	uxth.w	ip, r7
 80004cc:	2101      	movs	r1, #1
 80004ce:	fbb3 f8f2 	udiv	r8, r3, r2
 80004d2:	0c25      	lsrs	r5, r4, #16
 80004d4:	fb02 3318 	mls	r3, r2, r8, r3
 80004d8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004dc:	fb0c f308 	mul.w	r3, ip, r8
 80004e0:	42ab      	cmp	r3, r5
 80004e2:	d907      	bls.n	80004f4 <__udivmoddi4+0x134>
 80004e4:	19ed      	adds	r5, r5, r7
 80004e6:	f108 30ff 	add.w	r0, r8, #4294967295
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0x132>
 80004ec:	42ab      	cmp	r3, r5
 80004ee:	f200 80d1 	bhi.w	8000694 <__udivmoddi4+0x2d4>
 80004f2:	4680      	mov	r8, r0
 80004f4:	1aed      	subs	r5, r5, r3
 80004f6:	b2a3      	uxth	r3, r4
 80004f8:	fbb5 f0f2 	udiv	r0, r5, r2
 80004fc:	fb02 5510 	mls	r5, r2, r0, r5
 8000500:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000504:	fb0c fc00 	mul.w	ip, ip, r0
 8000508:	45a4      	cmp	ip, r4
 800050a:	d907      	bls.n	800051c <__udivmoddi4+0x15c>
 800050c:	19e4      	adds	r4, r4, r7
 800050e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000512:	d202      	bcs.n	800051a <__udivmoddi4+0x15a>
 8000514:	45a4      	cmp	ip, r4
 8000516:	f200 80b8 	bhi.w	800068a <__udivmoddi4+0x2ca>
 800051a:	4618      	mov	r0, r3
 800051c:	eba4 040c 	sub.w	r4, r4, ip
 8000520:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000524:	e79d      	b.n	8000462 <__udivmoddi4+0xa2>
 8000526:	4631      	mov	r1, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052e:	f1ce 0420 	rsb	r4, lr, #32
 8000532:	fa05 f30e 	lsl.w	r3, r5, lr
 8000536:	fa07 f70e 	lsl.w	r7, r7, lr
 800053a:	fa20 f804 	lsr.w	r8, r0, r4
 800053e:	0c3a      	lsrs	r2, r7, #16
 8000540:	fa25 f404 	lsr.w	r4, r5, r4
 8000544:	ea48 0803 	orr.w	r8, r8, r3
 8000548:	fbb4 f1f2 	udiv	r1, r4, r2
 800054c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000550:	fb02 4411 	mls	r4, r2, r1, r4
 8000554:	fa1f fc87 	uxth.w	ip, r7
 8000558:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800055c:	fb01 f30c 	mul.w	r3, r1, ip
 8000560:	42ab      	cmp	r3, r5
 8000562:	fa00 f40e 	lsl.w	r4, r0, lr
 8000566:	d909      	bls.n	800057c <__udivmoddi4+0x1bc>
 8000568:	19ed      	adds	r5, r5, r7
 800056a:	f101 30ff 	add.w	r0, r1, #4294967295
 800056e:	f080 808a 	bcs.w	8000686 <__udivmoddi4+0x2c6>
 8000572:	42ab      	cmp	r3, r5
 8000574:	f240 8087 	bls.w	8000686 <__udivmoddi4+0x2c6>
 8000578:	3902      	subs	r1, #2
 800057a:	443d      	add	r5, r7
 800057c:	1aeb      	subs	r3, r5, r3
 800057e:	fa1f f588 	uxth.w	r5, r8
 8000582:	fbb3 f0f2 	udiv	r0, r3, r2
 8000586:	fb02 3310 	mls	r3, r2, r0, r3
 800058a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800058e:	fb00 f30c 	mul.w	r3, r0, ip
 8000592:	42ab      	cmp	r3, r5
 8000594:	d907      	bls.n	80005a6 <__udivmoddi4+0x1e6>
 8000596:	19ed      	adds	r5, r5, r7
 8000598:	f100 38ff 	add.w	r8, r0, #4294967295
 800059c:	d26f      	bcs.n	800067e <__udivmoddi4+0x2be>
 800059e:	42ab      	cmp	r3, r5
 80005a0:	d96d      	bls.n	800067e <__udivmoddi4+0x2be>
 80005a2:	3802      	subs	r0, #2
 80005a4:	443d      	add	r5, r7
 80005a6:	1aeb      	subs	r3, r5, r3
 80005a8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80005ac:	e78f      	b.n	80004ce <__udivmoddi4+0x10e>
 80005ae:	f1c1 0720 	rsb	r7, r1, #32
 80005b2:	fa22 f807 	lsr.w	r8, r2, r7
 80005b6:	408b      	lsls	r3, r1
 80005b8:	fa05 f401 	lsl.w	r4, r5, r1
 80005bc:	ea48 0303 	orr.w	r3, r8, r3
 80005c0:	fa20 fe07 	lsr.w	lr, r0, r7
 80005c4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80005c8:	40fd      	lsrs	r5, r7
 80005ca:	ea4e 0e04 	orr.w	lr, lr, r4
 80005ce:	fbb5 f9fc 	udiv	r9, r5, ip
 80005d2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80005d6:	fb0c 5519 	mls	r5, ip, r9, r5
 80005da:	fa1f f883 	uxth.w	r8, r3
 80005de:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80005e2:	fb09 f408 	mul.w	r4, r9, r8
 80005e6:	42ac      	cmp	r4, r5
 80005e8:	fa02 f201 	lsl.w	r2, r2, r1
 80005ec:	fa00 fa01 	lsl.w	sl, r0, r1
 80005f0:	d908      	bls.n	8000604 <__udivmoddi4+0x244>
 80005f2:	18ed      	adds	r5, r5, r3
 80005f4:	f109 30ff 	add.w	r0, r9, #4294967295
 80005f8:	d243      	bcs.n	8000682 <__udivmoddi4+0x2c2>
 80005fa:	42ac      	cmp	r4, r5
 80005fc:	d941      	bls.n	8000682 <__udivmoddi4+0x2c2>
 80005fe:	f1a9 0902 	sub.w	r9, r9, #2
 8000602:	441d      	add	r5, r3
 8000604:	1b2d      	subs	r5, r5, r4
 8000606:	fa1f fe8e 	uxth.w	lr, lr
 800060a:	fbb5 f0fc 	udiv	r0, r5, ip
 800060e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000612:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000616:	fb00 f808 	mul.w	r8, r0, r8
 800061a:	45a0      	cmp	r8, r4
 800061c:	d907      	bls.n	800062e <__udivmoddi4+0x26e>
 800061e:	18e4      	adds	r4, r4, r3
 8000620:	f100 35ff 	add.w	r5, r0, #4294967295
 8000624:	d229      	bcs.n	800067a <__udivmoddi4+0x2ba>
 8000626:	45a0      	cmp	r8, r4
 8000628:	d927      	bls.n	800067a <__udivmoddi4+0x2ba>
 800062a:	3802      	subs	r0, #2
 800062c:	441c      	add	r4, r3
 800062e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000632:	eba4 0408 	sub.w	r4, r4, r8
 8000636:	fba0 8902 	umull	r8, r9, r0, r2
 800063a:	454c      	cmp	r4, r9
 800063c:	46c6      	mov	lr, r8
 800063e:	464d      	mov	r5, r9
 8000640:	d315      	bcc.n	800066e <__udivmoddi4+0x2ae>
 8000642:	d012      	beq.n	800066a <__udivmoddi4+0x2aa>
 8000644:	b156      	cbz	r6, 800065c <__udivmoddi4+0x29c>
 8000646:	ebba 030e 	subs.w	r3, sl, lr
 800064a:	eb64 0405 	sbc.w	r4, r4, r5
 800064e:	fa04 f707 	lsl.w	r7, r4, r7
 8000652:	40cb      	lsrs	r3, r1
 8000654:	431f      	orrs	r7, r3
 8000656:	40cc      	lsrs	r4, r1
 8000658:	6037      	str	r7, [r6, #0]
 800065a:	6074      	str	r4, [r6, #4]
 800065c:	2100      	movs	r1, #0
 800065e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000662:	4618      	mov	r0, r3
 8000664:	e6f8      	b.n	8000458 <__udivmoddi4+0x98>
 8000666:	4690      	mov	r8, r2
 8000668:	e6e0      	b.n	800042c <__udivmoddi4+0x6c>
 800066a:	45c2      	cmp	sl, r8
 800066c:	d2ea      	bcs.n	8000644 <__udivmoddi4+0x284>
 800066e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000672:	eb69 0503 	sbc.w	r5, r9, r3
 8000676:	3801      	subs	r0, #1
 8000678:	e7e4      	b.n	8000644 <__udivmoddi4+0x284>
 800067a:	4628      	mov	r0, r5
 800067c:	e7d7      	b.n	800062e <__udivmoddi4+0x26e>
 800067e:	4640      	mov	r0, r8
 8000680:	e791      	b.n	80005a6 <__udivmoddi4+0x1e6>
 8000682:	4681      	mov	r9, r0
 8000684:	e7be      	b.n	8000604 <__udivmoddi4+0x244>
 8000686:	4601      	mov	r1, r0
 8000688:	e778      	b.n	800057c <__udivmoddi4+0x1bc>
 800068a:	3802      	subs	r0, #2
 800068c:	443c      	add	r4, r7
 800068e:	e745      	b.n	800051c <__udivmoddi4+0x15c>
 8000690:	4608      	mov	r0, r1
 8000692:	e708      	b.n	80004a6 <__udivmoddi4+0xe6>
 8000694:	f1a8 0802 	sub.w	r8, r8, #2
 8000698:	443d      	add	r5, r7
 800069a:	e72b      	b.n	80004f4 <__udivmoddi4+0x134>

0800069c <__aeabi_idiv0>:
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop

080006a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006a0:	b538      	push	{r3, r4, r5, lr}
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80006a2:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <HAL_InitTick+0x40>)
{
 80006a4:	4605      	mov	r5, r0
  if((uint32_t)uwTickFreq == 0UL)
 80006a6:	7818      	ldrb	r0, [r3, #0]
 80006a8:	b908      	cbnz	r0, 80006ae <HAL_InitTick+0xe>
  {
    return HAL_ERROR;
 80006aa:	2001      	movs	r0, #1
 80006ac:	bd38      	pop	{r3, r4, r5, pc}
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80006ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006b2:	4a0c      	ldr	r2, [pc, #48]	; (80006e4 <HAL_InitTick+0x44>)
 80006b4:	fbb3 f3f0 	udiv	r3, r3, r0
 80006b8:	6810      	ldr	r0, [r2, #0]
 80006ba:	fbb0 f0f3 	udiv	r0, r0, r3
 80006be:	f000 f8c1 	bl	8000844 <HAL_SYSTICK_Config>
 80006c2:	4604      	mov	r4, r0
 80006c4:	2800      	cmp	r0, #0
 80006c6:	d1f0      	bne.n	80006aa <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006c8:	2d0f      	cmp	r5, #15
 80006ca:	d8ee      	bhi.n	80006aa <HAL_InitTick+0xa>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006cc:	4602      	mov	r2, r0
 80006ce:	4629      	mov	r1, r5
 80006d0:	f04f 30ff 	mov.w	r0, #4294967295
 80006d4:	f000 f87e 	bl	80007d4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006d8:	4b03      	ldr	r3, [pc, #12]	; (80006e8 <HAL_InitTick+0x48>)
 80006da:	4620      	mov	r0, r4
 80006dc:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80006de:	bd38      	pop	{r3, r4, r5, pc}
 80006e0:	20000000 	.word	0x20000000
 80006e4:	20000008 	.word	0x20000008
 80006e8:	20000004 	.word	0x20000004

080006ec <HAL_Init>:
{
 80006ec:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006ee:	2003      	movs	r0, #3
 80006f0:	f000 f85e 	bl	80007b0 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80006f4:	f000 ff88 	bl	8001608 <HAL_RCC_GetSysClockFreq>
 80006f8:	490f      	ldr	r1, [pc, #60]	; (8000738 <HAL_Init+0x4c>)
 80006fa:	4a10      	ldr	r2, [pc, #64]	; (800073c <HAL_Init+0x50>)
 80006fc:	698b      	ldr	r3, [r1, #24]
 80006fe:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8000702:	5cd3      	ldrb	r3, [r2, r3]
 8000704:	f003 031f 	and.w	r3, r3, #31
 8000708:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800070a:	698b      	ldr	r3, [r1, #24]
 800070c:	f003 030f 	and.w	r3, r3, #15
 8000710:	5cd3      	ldrb	r3, [r2, r3]
 8000712:	4a0b      	ldr	r2, [pc, #44]	; (8000740 <HAL_Init+0x54>)
 8000714:	f003 031f 	and.w	r3, r3, #31
 8000718:	fa20 f303 	lsr.w	r3, r0, r3
 800071c:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 800071e:	4b09      	ldr	r3, [pc, #36]	; (8000744 <HAL_Init+0x58>)
 8000720:	6018      	str	r0, [r3, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000722:	2000      	movs	r0, #0
 8000724:	f7ff ffbc 	bl	80006a0 <HAL_InitTick>
 8000728:	4604      	mov	r4, r0
 800072a:	b918      	cbnz	r0, 8000734 <HAL_Init+0x48>
  HAL_MspInit();
 800072c:	f004 f806 	bl	800473c <HAL_MspInit>
}
 8000730:	4620      	mov	r0, r4
 8000732:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000734:	2401      	movs	r4, #1
 8000736:	e7fb      	b.n	8000730 <HAL_Init+0x44>
 8000738:	58024400 	.word	0x58024400
 800073c:	080053e4 	.word	0x080053e4
 8000740:	2000000c 	.word	0x2000000c
 8000744:	20000008 	.word	0x20000008

08000748 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8000748:	4a03      	ldr	r2, [pc, #12]	; (8000758 <HAL_IncTick+0x10>)
 800074a:	4b04      	ldr	r3, [pc, #16]	; (800075c <HAL_IncTick+0x14>)
 800074c:	6811      	ldr	r1, [r2, #0]
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	440b      	add	r3, r1
 8000752:	6013      	str	r3, [r2, #0]
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop
 8000758:	20000160 	.word	0x20000160
 800075c:	20000000 	.word	0x20000000

08000760 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000760:	4b01      	ldr	r3, [pc, #4]	; (8000768 <HAL_GetTick+0x8>)
 8000762:	6818      	ldr	r0, [r3, #0]
}
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop
 8000768:	20000160 	.word	0x20000160

0800076c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800076c:	b538      	push	{r3, r4, r5, lr}
 800076e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000770:	f7ff fff6 	bl	8000760 <HAL_GetTick>
 8000774:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000776:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000778:	bf1e      	ittt	ne
 800077a:	4b04      	ldrne	r3, [pc, #16]	; (800078c <HAL_Delay+0x20>)
 800077c:	781b      	ldrbne	r3, [r3, #0]
 800077e:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000780:	f7ff ffee 	bl	8000760 <HAL_GetTick>
 8000784:	1b40      	subs	r0, r0, r5
 8000786:	4284      	cmp	r4, r0
 8000788:	d8fa      	bhi.n	8000780 <HAL_Delay+0x14>
  {
  }
}
 800078a:	bd38      	pop	{r3, r4, r5, pc}
 800078c:	20000000 	.word	0x20000000

08000790 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8000790:	4b01      	ldr	r3, [pc, #4]	; (8000798 <HAL_GetREVID+0x8>)
 8000792:	6818      	ldr	r0, [r3, #0]
}
 8000794:	0c00      	lsrs	r0, r0, #16
 8000796:	4770      	bx	lr
 8000798:	5c001000 	.word	0x5c001000

0800079c <HAL_SYSCFG_ETHInterfaceSelect>:
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 800079c:	4a03      	ldr	r2, [pc, #12]	; (80007ac <HAL_SYSCFG_ETHInterfaceSelect+0x10>)
 800079e:	6853      	ldr	r3, [r2, #4]
 80007a0:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 80007a4:	4318      	orrs	r0, r3
 80007a6:	6050      	str	r0, [r2, #4]
 80007a8:	4770      	bx	lr
 80007aa:	bf00      	nop
 80007ac:	58000400 	.word	0x58000400

080007b0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007b0:	4a07      	ldr	r2, [pc, #28]	; (80007d0 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007b2:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007b4:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007b6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007ba:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80007be:	041b      	lsls	r3, r3, #16
 80007c0:	0c1b      	lsrs	r3, r3, #16
 80007c2:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80007ca:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80007cc:	60d3      	str	r3, [r2, #12]
 80007ce:	4770      	bx	lr
 80007d0:	e000ed00 	.word	0xe000ed00

080007d4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007d4:	4b19      	ldr	r3, [pc, #100]	; (800083c <HAL_NVIC_SetPriority+0x68>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007d6:	b530      	push	{r4, r5, lr}
 80007d8:	68dc      	ldr	r4, [r3, #12]
 80007da:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007de:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007e2:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007e4:	2b04      	cmp	r3, #4
 80007e6:	bf28      	it	cs
 80007e8:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007ea:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007ec:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007f0:	bf8c      	ite	hi
 80007f2:	3c03      	subhi	r4, #3
 80007f4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007f6:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
 80007fa:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007fc:	f103 33ff 	add.w	r3, r3, #4294967295
 8000800:	ea01 0103 	and.w	r1, r1, r3
 8000804:	fa01 f104 	lsl.w	r1, r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000808:	fa05 f404 	lsl.w	r4, r5, r4
 800080c:	f104 34ff 	add.w	r4, r4, #4294967295
 8000810:	ea02 0204 	and.w	r2, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000814:	ea42 0201 	orr.w	r2, r2, r1
 8000818:	ea4f 1202 	mov.w	r2, r2, lsl #4
  if ((int32_t)(IRQn) >= 0)
 800081c:	db07      	blt.n	800082e <HAL_NVIC_SetPriority+0x5a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800081e:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000822:	b2d2      	uxtb	r2, r2
 8000824:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000828:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
 800082c:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800082e:	f000 000f 	and.w	r0, r0, #15
 8000832:	b2d2      	uxtb	r2, r2
 8000834:	4b02      	ldr	r3, [pc, #8]	; (8000840 <HAL_NVIC_SetPriority+0x6c>)
 8000836:	541a      	strb	r2, [r3, r0]
 8000838:	bd30      	pop	{r4, r5, pc}
 800083a:	bf00      	nop
 800083c:	e000ed00 	.word	0xe000ed00
 8000840:	e000ed14 	.word	0xe000ed14

08000844 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000844:	3801      	subs	r0, #1
 8000846:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800084a:	d20a      	bcs.n	8000862 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800084c:	4b06      	ldr	r3, [pc, #24]	; (8000868 <HAL_SYSTICK_Config+0x24>)
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800084e:	21f0      	movs	r1, #240	; 0xf0
 8000850:	4a06      	ldr	r2, [pc, #24]	; (800086c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000852:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000854:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000856:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800085a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800085c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800085e:	601a      	str	r2, [r3, #0]
 8000860:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000862:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	e000e010 	.word	0xe000e010
 800086c:	e000ed00 	.word	0xe000ed00

08000870 <ETH_SetMACConfig>:
/**
  * @}
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8000870:	688b      	ldr	r3, [r1, #8]
 8000872:	680a      	ldr	r2, [r1, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
              macconf->SourceAddrControl |
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8000874:	f891 c004 	ldrb.w	ip, [r1, #4]
 8000878:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
                    ((uint32_t)macconf->Support2KPacket  << 22) |
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800087a:	7c0b      	ldrb	r3, [r1, #16]
 800087c:	2b00      	cmp	r3, #0
{
 800087e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8000882:	bf08      	it	eq
 8000884:	f44f 2300 	moveq.w	r3, #524288	; 0x80000
{
 8000888:	b085      	sub	sp, #20
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800088a:	bf18      	it	ne
 800088c:	2300      	movne	r3, #0
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800088e:	f891 e00c 	ldrb.w	lr, [r1, #12]
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8000892:	7b4f      	ldrb	r7, [r1, #13]
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8000894:	9300      	str	r3, [sp, #0]
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8000896:	7c4b      	ldrb	r3, [r1, #17]
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8000898:	7b8e      	ldrb	r6, [r1, #14]
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800089a:	2b00      	cmp	r3, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800089c:	7bcd      	ldrb	r5, [r1, #15]
                              ((uint32_t)macconf->JumboPacket << 16) |
 800089e:	7c8c      	ldrb	r4, [r1, #18]
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80008a0:	bf0c      	ite	eq
 80008a2:	f44f 3300 	moveq.w	r3, #131072	; 0x20000
 80008a6:	2300      	movne	r3, #0
                                macconf->Speed |
                                  macconf->DuplexMode |
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 80008a8:	f891 901c 	ldrb.w	r9, [r1, #28]
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80008ac:	9301      	str	r3, [sp, #4]
 80008ae:	694b      	ldr	r3, [r1, #20]
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 80008b0:	f891 b01d 	ldrb.w	fp, [r1, #29]
 80008b4:	431a      	orrs	r2, r3
 80008b6:	698b      	ldr	r3, [r1, #24]
 80008b8:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 80008ba:	7f8a      	ldrb	r2, [r1, #30]
 80008bc:	2a00      	cmp	r2, #0
 80008be:	bf0c      	ite	eq
 80008c0:	f44f 6280 	moveq.w	r2, #1024	; 0x400
 80008c4:	2200      	movne	r2, #0
 80008c6:	9202      	str	r2, [sp, #8]
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 80008c8:	7fca      	ldrb	r2, [r1, #31]
 80008ca:	9203      	str	r2, [sp, #12]
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80008cc:	f891 2020 	ldrb.w	r2, [r1, #32]
 80008d0:	2a00      	cmp	r2, #0
                                              macconf->BackOffLimit |
                                                ((uint32_t)macconf->DeferralCheck << 4)|
                                                  macconf->PreambleLength);

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80008d2:	6802      	ldr	r2, [r0, #0]
 80008d4:	6a48      	ldr	r0, [r1, #36]	; 0x24
 80008d6:	f8d2 a000 	ldr.w	sl, [r2]
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80008da:	bf08      	it	eq
 80008dc:	f44f 7880 	moveq.w	r8, #256	; 0x100
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80008e0:	ea43 0300 	orr.w	r3, r3, r0
 80008e4:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
 80008e6:	f02a 4a7f 	bic.w	sl, sl, #4278190080	; 0xff000000
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80008ea:	bf18      	it	ne
 80008ec:	f04f 0800 	movne.w	r8, #0
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80008f0:	4303      	orrs	r3, r0
 80008f2:	9803      	ldr	r0, [sp, #12]
 80008f4:	f42a 0a7b 	bic.w	sl, sl, #16449536	; 0xfb0000
 80008f8:	f42a 4afe 	bic.w	sl, sl, #32512	; 0x7f00
 80008fc:	f02a 0a7c 	bic.w	sl, sl, #124	; 0x7c
 8000900:	ea43 030a 	orr.w	r3, r3, sl
 8000904:	ea43 63cc 	orr.w	r3, r3, ip, lsl #27
 8000908:	ea43 53ce 	orr.w	r3, r3, lr, lsl #23
 800090c:	ea43 5387 	orr.w	r3, r3, r7, lsl #22
 8000910:	ea43 5346 	orr.w	r3, r3, r6, lsl #21
 8000914:	ea43 5305 	orr.w	r3, r3, r5, lsl #20
 8000918:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800091c:	ea43 3309 	orr.w	r3, r3, r9, lsl #12
 8000920:	ea43 23cb 	orr.w	r3, r3, fp, lsl #11
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8000924:	f891 b028 	ldrb.w	fp, [r1, #40]	; 0x28
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8000928:	ea43 2340 	orr.w	r3, r3, r0, lsl #9
 800092c:	9800      	ldr	r0, [sp, #0]
 800092e:	ea43 130b 	orr.w	r3, r3, fp, lsl #4
 8000932:	4303      	orrs	r3, r0
 8000934:	9801      	ldr	r0, [sp, #4]
 8000936:	4303      	orrs	r3, r0
 8000938:	9802      	ldr	r0, [sp, #8]
 800093a:	4303      	orrs	r3, r0
 800093c:	ea43 0308 	orr.w	r3, r3, r8
 8000940:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8000942:	6bce      	ldr	r6, [r1, #60]	; 0x3c
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8000944:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8000948:	f891 7038 	ldrb.w	r7, [r1, #56]	; 0x38
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 800094c:	2b00      	cmp	r3, #0
                       macconf->GiantPacketSizeLimit);

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800094e:	6853      	ldr	r3, [r2, #4]
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8000950:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8000954:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8000958:	f891 4031 	ldrb.w	r4, [r1, #49]	; 0x31
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 800095c:	bf0c      	ite	eq
 800095e:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8000962:	2000      	movne	r0, #0
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8000964:	f423 23ef 	bic.w	r3, r3, #489472	; 0x77800
 8000968:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800096c:	f023 0307 	bic.w	r3, r3, #7
 8000970:	ea43 6346 	orr.w	r3, r3, r6, lsl #25
 8000974:	6b4e      	ldr	r6, [r1, #52]	; 0x34
 8000976:	4333      	orrs	r3, r6

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
               macconf->PauseLowThreshold |
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
                   (macconf->PauseTime << 16));
 8000978:	6c8e      	ldr	r6, [r1, #72]	; 0x48
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800097a:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
 800097e:	ea43 4385 	orr.w	r3, r3, r5, lsl #18
               macconf->PauseLowThreshold |
 8000982:	6d0d      	ldr	r5, [r1, #80]	; 0x50
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8000984:	ea43 4344 	orr.w	r3, r3, r4, lsl #17
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8000988:	f891 4054 	ldrb.w	r4, [r1, #84]	; 0x54
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800098c:	4303      	orrs	r3, r0
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800098e:	6c48      	ldr	r0, [r1, #68]	; 0x44
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8000990:	6053      	str	r3, [r2, #4]
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8000992:	68d3      	ldr	r3, [r2, #12]
 8000994:	f423 7387 	bic.w	r3, r3, #270	; 0x10e
 8000998:	f023 0301 	bic.w	r3, r3, #1
 800099c:	4303      	orrs	r3, r0
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800099e:	f891 0040 	ldrb.w	r0, [r1, #64]	; 0x40
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80009a2:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80009a6:	60d3      	str	r3, [r2, #12]
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 80009a8:	f891 304c 	ldrb.w	r3, [r1, #76]	; 0x4c
 80009ac:	2b00      	cmp	r3, #0

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80009ae:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80009b0:	f023 03f2 	bic.w	r3, r3, #242	; 0xf2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 80009b4:	bf0c      	ite	eq
 80009b6:	2080      	moveq	r0, #128	; 0x80
 80009b8:	2000      	movne	r0, #0
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80009ba:	041b      	lsls	r3, r3, #16
 80009bc:	0c1b      	lsrs	r3, r3, #16
 80009be:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80009c2:	432b      	orrs	r3, r5
  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80009c4:	6dcd      	ldr	r5, [r1, #92]	; 0x5c
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80009c6:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80009ca:	f891 4061 	ldrb.w	r4, [r1, #97]	; 0x61
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80009ce:	4303      	orrs	r3, r0
 80009d0:	6713      	str	r3, [r2, #112]	; 0x70
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80009d2:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80009d6:	f891 3056 	ldrb.w	r3, [r1, #86]	; 0x56
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80009da:	f020 0003 	bic.w	r0, r0, #3
 80009de:	4303      	orrs	r3, r0
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80009e0:	f891 0055 	ldrb.w	r0, [r1, #85]	; 0x55
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80009e4:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80009e8:	6d88      	ldr	r0, [r1, #88]	; 0x58
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80009ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80009ee:	f8d2 3d00 	ldr.w	r3, [r2, #3328]	; 0xd00
 80009f2:	f023 0372 	bic.w	r3, r3, #114	; 0x72
 80009f6:	4303      	orrs	r3, r0
 80009f8:	f8c2 3d00 	str.w	r3, [r2, #3328]	; 0xd00
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80009fc:	f891 3060 	ldrb.w	r3, [r1, #96]	; 0x60
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8000a00:	f891 1062 	ldrb.w	r1, [r1, #98]	; 0x62
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8000a04:	2b00      	cmp	r3, #0

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8000a06:	f8d2 3d30 	ldr.w	r3, [r2, #3376]	; 0xd30
 8000a0a:	f023 037b 	bic.w	r3, r3, #123	; 0x7b
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8000a0e:	bf0c      	ite	eq
 8000a10:	2040      	moveq	r0, #64	; 0x40
 8000a12:	2000      	movne	r0, #0
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8000a14:	432b      	orrs	r3, r5
 8000a16:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 8000a1a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000a1e:	4303      	orrs	r3, r0
 8000a20:	f8c2 3d30 	str.w	r3, [r2, #3376]	; 0xd30
}
 8000a24:	b005      	add	sp, #20
 8000a26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08000a2c <ETH_SetDMAConfig>:
static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8000a2c:	6802      	ldr	r2, [r0, #0]
 8000a2e:	f502 5080 	add.w	r0, r2, #4096	; 0x1000
 8000a32:	6803      	ldr	r3, [r0, #0]
 8000a34:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
{
 8000a38:	b530      	push	{r4, r5, lr}
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8000a3a:	f023 0302 	bic.w	r3, r3, #2
 8000a3e:	680c      	ldr	r4, [r1, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8000a40:	790d      	ldrb	r5, [r1, #4]
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8000a42:	4323      	orrs	r3, r4
               dmaconf->BurstMode |
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8000a44:	f241 0404 	movw	r4, #4100	; 0x1004
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8000a48:	6003      	str	r3, [r0, #0]
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8000a4a:	7b0b      	ldrb	r3, [r1, #12]
  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8000a4c:	5910      	ldr	r0, [r2, r4]
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8000a4e:	03db      	lsls	r3, r3, #15
  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8000a50:	f420 4050 	bic.w	r0, r0, #53248	; 0xd000
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8000a54:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
 8000a58:	688d      	ldr	r5, [r1, #8]
  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8000a5a:	f020 0001 	bic.w	r0, r0, #1
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8000a5e:	432b      	orrs	r3, r5
  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8000a60:	4303      	orrs	r3, r0

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8000a62:	7b48      	ldrb	r0, [r1, #13]
  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8000a64:	5113      	str	r3, [r2, r4]
               dmaconf->MaximumSegmentSize);

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8000a66:	f502 5488 	add.w	r4, r2, #4352	; 0x1100
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8000a6a:	6a0b      	ldr	r3, [r1, #32]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8000a6c:	6825      	ldr	r5, [r4, #0]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8000a6e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8000a72:	4810      	ldr	r0, [pc, #64]	; (8000ab4 <ETH_SetDMAConfig+0x88>)
 8000a74:	4028      	ands	r0, r5
 8000a76:	4303      	orrs	r3, r0

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8000a78:	7d08      	ldrb	r0, [r1, #20]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8000a7a:	6023      	str	r3, [r4, #0]
                 ((uint32_t)dmaconf->TCPSegmentation << 12));

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8000a7c:	f241 1404 	movw	r4, #4356	; 0x1104
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8000a80:	7f4b      	ldrb	r3, [r1, #29]
  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8000a82:	5915      	ldr	r5, [r2, r4]
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8000a84:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8000a86:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8000a8a:	6908      	ldr	r0, [r1, #16]
 8000a8c:	4303      	orrs	r3, r0
  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8000a8e:	480a      	ldr	r0, [pc, #40]	; (8000ab8 <ETH_SetDMAConfig+0x8c>)
 8000a90:	4028      	ands	r0, r5

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8000a92:	7f0d      	ldrb	r5, [r1, #28]
  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8000a94:	4303      	orrs	r3, r0
 8000a96:	5113      	str	r3, [r2, r4]
               dmaconf->RxDMABurstLength);

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8000a98:	f241 1408 	movw	r4, #4360	; 0x1108
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8000a9c:	698b      	ldr	r3, [r1, #24]
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8000a9e:	5910      	ldr	r0, [r2, r4]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8000aa0:	ea43 73c5 	orr.w	r3, r3, r5, lsl #31
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8000aa4:	f020 4100 	bic.w	r1, r0, #2147483648	; 0x80000000
 8000aa8:	f421 117c 	bic.w	r1, r1, #4128768	; 0x3f0000
 8000aac:	430b      	orrs	r3, r1
 8000aae:	5113      	str	r3, [r2, r4]
 8000ab0:	bd30      	pop	{r4, r5, pc}
 8000ab2:	bf00      	nop
 8000ab4:	fffec000 	.word	0xfffec000
 8000ab8:	ffc0efef 	.word	0xffc0efef

08000abc <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8000abc:	b538      	push	{r3, r4, r5, lr}
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8000abe:	6803      	ldr	r3, [r0, #0]
{
 8000ac0:	4605      	mov	r5, r0
  tmpreg = (heth->Instance)->MACMDIOAR;
 8000ac2:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8000ac6:	f000 ff69 	bl	800199c <HAL_RCC_GetHCLKFreq>

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8000aca:	4b12      	ldr	r3, [pc, #72]	; (8000b14 <HAL_ETH_SetMDIOClockRange+0x58>)
 8000acc:	4a12      	ldr	r2, [pc, #72]	; (8000b18 <HAL_ETH_SetMDIOClockRange+0x5c>)
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8000ace:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8000ad2:	4403      	add	r3, r0
 8000ad4:	4293      	cmp	r3, r2
 8000ad6:	d805      	bhi.n	8000ae4 <HAL_ETH_SetMDIOClockRange+0x28>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8000ad8:	f444 7400 	orr.w	r4, r4, #512	; 0x200
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8000adc:	682b      	ldr	r3, [r5, #0]
 8000ade:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
 8000ae2:	bd38      	pop	{r3, r4, r5, pc}
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8000ae4:	4b0d      	ldr	r3, [pc, #52]	; (8000b1c <HAL_ETH_SetMDIOClockRange+0x60>)
 8000ae6:	4a0e      	ldr	r2, [pc, #56]	; (8000b20 <HAL_ETH_SetMDIOClockRange+0x64>)
 8000ae8:	4403      	add	r3, r0
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d802      	bhi.n	8000af4 <HAL_ETH_SetMDIOClockRange+0x38>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8000aee:	f444 7440 	orr.w	r4, r4, #768	; 0x300
 8000af2:	e7f3      	b.n	8000adc <HAL_ETH_SetMDIOClockRange+0x20>
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8000af4:	4b0b      	ldr	r3, [pc, #44]	; (8000b24 <HAL_ETH_SetMDIOClockRange+0x68>)
 8000af6:	4a0c      	ldr	r2, [pc, #48]	; (8000b28 <HAL_ETH_SetMDIOClockRange+0x6c>)
 8000af8:	4403      	add	r3, r0
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d9ee      	bls.n	8000adc <HAL_ETH_SetMDIOClockRange+0x20>
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8000afe:	4b0b      	ldr	r3, [pc, #44]	; (8000b2c <HAL_ETH_SetMDIOClockRange+0x70>)
 8000b00:	4a0b      	ldr	r2, [pc, #44]	; (8000b30 <HAL_ETH_SetMDIOClockRange+0x74>)
 8000b02:	4403      	add	r3, r0
 8000b04:	4293      	cmp	r3, r2
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8000b06:	bf94      	ite	ls
 8000b08:	f444 7480 	orrls.w	r4, r4, #256	; 0x100
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8000b0c:	f444 6480 	orrhi.w	r4, r4, #1024	; 0x400
 8000b10:	e7e4      	b.n	8000adc <HAL_ETH_SetMDIOClockRange+0x20>
 8000b12:	bf00      	nop
 8000b14:	feced300 	.word	0xfeced300
 8000b18:	00e4e1bf 	.word	0x00e4e1bf
 8000b1c:	fde9f140 	.word	0xfde9f140
 8000b20:	017d783f 	.word	0x017d783f
 8000b24:	fc6c7900 	.word	0xfc6c7900
 8000b28:	026259ff 	.word	0x026259ff
 8000b2c:	fa0a1f00 	.word	0xfa0a1f00
 8000b30:	02faf07f 	.word	0x02faf07f

08000b34 <HAL_ETH_Init>:
{
 8000b34:	b570      	push	{r4, r5, r6, lr}
  if(heth == NULL)
 8000b36:	4605      	mov	r5, r0
{
 8000b38:	b0a4      	sub	sp, #144	; 0x90
  if(heth == NULL)
 8000b3a:	2800      	cmp	r0, #0
 8000b3c:	f000 80bd 	beq.w	8000cba <HAL_ETH_Init+0x186>
  if(heth->gState == HAL_ETH_STATE_RESET)
 8000b40:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8000b42:	b90b      	cbnz	r3, 8000b48 <HAL_ETH_Init+0x14>
    HAL_ETH_MspInit(heth);
 8000b44:	f003 fe0c 	bl	8004760 <HAL_ETH_MspInit>
  heth->gState = HAL_ETH_STATE_BUSY;
 8000b48:	2323      	movs	r3, #35	; 0x23
  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8000b4a:	7a28      	ldrb	r0, [r5, #8]
  heth->gState = HAL_ETH_STATE_BUSY;
 8000b4c:	656b      	str	r3, [r5, #84]	; 0x54
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b4e:	4b86      	ldr	r3, [pc, #536]	; (8000d68 <HAL_ETH_Init+0x234>)
 8000b50:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8000b54:	f042 0202 	orr.w	r2, r2, #2
 8000b58:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8000b5c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b60:	f003 0302 	and.w	r3, r3, #2
 8000b64:	9301      	str	r3, [sp, #4]
 8000b66:	9b01      	ldr	r3, [sp, #4]
  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8000b68:	2800      	cmp	r0, #0
 8000b6a:	f040 8098 	bne.w	8000c9e <HAL_ETH_Init+0x16a>
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8000b6e:	f7ff fe15 	bl	800079c <HAL_SYSCFG_ETHInterfaceSelect>
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8000b72:	682b      	ldr	r3, [r5, #0]
 8000b74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000b78:	681a      	ldr	r2, [r3, #0]
 8000b7a:	f042 0201 	orr.w	r2, r2, #1
 8000b7e:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8000b80:	f7ff fdee 	bl	8000760 <HAL_GetTick>
 8000b84:	4606      	mov	r6, r0
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8000b86:	682b      	ldr	r3, [r5, #0]
 8000b88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000b8c:	681c      	ldr	r4, [r3, #0]
 8000b8e:	f014 0401 	ands.w	r4, r4, #1
 8000b92:	f040 8087 	bne.w	8000ca4 <HAL_ETH_Init+0x170>
  ETH_MAC_MDIO_ClkConfig(heth);
 8000b96:	4628      	mov	r0, r5
 8000b98:	f7ff ff90 	bl	8000abc <HAL_ETH_SetMDIOClockRange>
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8000b9c:	682e      	ldr	r6, [r5, #0]
 8000b9e:	f000 fefd 	bl	800199c <HAL_RCC_GetHCLKFreq>
 8000ba2:	4b72      	ldr	r3, [pc, #456]	; (8000d6c <HAL_ETH_Init+0x238>)
  ETH_SetMACConfig(heth, &macDefaultConf);
 8000ba4:	a90b      	add	r1, sp, #44	; 0x2c
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8000ba6:	9414      	str	r4, [sp, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8000ba8:	f88d 4049 	strb.w	r4, [sp, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8000bac:	f88d 404b 	strb.w	r4, [sp, #75]	; 0x4b
  macDefaultConf.DeferralCheck = DISABLE;
 8000bb0:	f88d 4054 	strb.w	r4, [sp, #84]	; 0x54
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8000bb4:	f88d 4064 	strb.w	r4, [sp, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8000bb8:	941a      	str	r4, [sp, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8000bba:	f88d 408d 	strb.w	r4, [sp, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8000bbe:	f88d 408e 	strb.w	r4, [sp, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8000bc2:	f88d 4038 	strb.w	r4, [sp, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8000bc6:	940d      	str	r4, [sp, #52]	; 0x34
  macDefaultConf.JumboPacket = DISABLE;
 8000bc8:	f88d 403e 	strb.w	r4, [sp, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8000bcc:	f88d 4048 	strb.w	r4, [sp, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8000bd0:	941f      	str	r4, [sp, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8000bd2:	941d      	str	r4, [sp, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8000bd4:	9416      	str	r4, [sp, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8000bd6:	f88d 406c 	strb.w	r4, [sp, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8000bda:	f88d 4082 	strb.w	r4, [sp, #130]	; 0x82
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8000bde:	f88d 405d 	strb.w	r4, [sp, #93]	; 0x5d
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8000be2:	fbb0 f0f3 	udiv	r0, r0, r3
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8000be6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8000bea:	3801      	subs	r0, #1
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8000bec:	9311      	str	r3, [sp, #68]	; 0x44
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8000bee:	f44f 63c3 	mov.w	r3, #1560	; 0x618
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8000bf2:	f8c6 00dc 	str.w	r0, [r6, #220]	; 0xdc
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8000bf6:	2601      	movs	r6, #1
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8000bf8:	9318      	str	r3, [sp, #96]	; 0x60
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8000bfa:	2320      	movs	r3, #32
  ETH_SetMACConfig(heth, &macDefaultConf);
 8000bfc:	4628      	mov	r0, r5
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8000bfe:	f88d 603b 	strb.w	r6, [sp, #59]	; 0x3b
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8000c02:	9322      	str	r3, [sp, #136]	; 0x88
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8000c04:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
  macDefaultConf.ChecksumOffload = ENABLE;
 8000c08:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8000c0c:	930b      	str	r3, [sp, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8000c0e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8000c12:	f88d 605e 	strb.w	r6, [sp, #94]	; 0x5e
  macDefaultConf.Speed = ETH_SPEED_100M;
 8000c16:	9310      	str	r3, [sp, #64]	; 0x40
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8000c18:	2302      	movs	r3, #2
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8000c1a:	f88d 603a 	strb.w	r6, [sp, #58]	; 0x3a
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8000c1e:	f88d 608c 	strb.w	r6, [sp, #140]	; 0x8c
  macDefaultConf.Jabber = ENABLE;
 8000c22:	f88d 603d 	strb.w	r6, [sp, #61]	; 0x3d
  macDefaultConf.ReceiveOwn = ENABLE;
 8000c26:	f88d 604a 	strb.w	r6, [sp, #74]	; 0x4a
  macDefaultConf.RetryTransmission = ENABLE;
 8000c2a:	f88d 604c 	strb.w	r6, [sp, #76]	; 0x4c
  macDefaultConf.Support2KPacket = DISABLE;
 8000c2e:	f88d 4039 	strb.w	r4, [sp, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8000c32:	9321      	str	r3, [sp, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8000c34:	f88d 4080 	strb.w	r4, [sp, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8000c38:	f88d 4081 	strb.w	r4, [sp, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8000c3c:	f88d 405c 	strb.w	r4, [sp, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8000c40:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8000c44:	941c      	str	r4, [sp, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8000c46:	f88d 6078 	strb.w	r6, [sp, #120]	; 0x78
  ETH_SetMACConfig(heth, &macDefaultConf);
 8000c4a:	f7ff fe11 	bl	8000870 <ETH_SetMACConfig>
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8000c4e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8000c52:	a902      	add	r1, sp, #8
 8000c54:	4628      	mov	r0, r5
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8000c56:	f88d 600c 	strb.w	r6, [sp, #12]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8000c5a:	9308      	str	r3, [sp, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8000c5c:	9306      	str	r3, [sp, #24]
  dmaDefaultConf.MaximumSegmentSize = 536;
 8000c5e:	f44f 7306 	mov.w	r3, #536	; 0x218
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8000c62:	9604      	str	r6, [sp, #16]
  dmaDefaultConf.MaximumSegmentSize = 536;
 8000c64:	930a      	str	r3, [sp, #40]	; 0x28
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8000c66:	9402      	str	r4, [sp, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8000c68:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8000c6c:	f88d 4015 	strb.w	r4, [sp, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8000c70:	f88d 4014 	strb.w	r4, [sp, #20]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8000c74:	f88d 401c 	strb.w	r4, [sp, #28]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8000c78:	f88d 4025 	strb.w	r4, [sp, #37]	; 0x25
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8000c7c:	f7ff fed6 	bl	8000a2c <ETH_SetDMAConfig>
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8000c80:	682b      	ldr	r3, [r5, #0]
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8000c82:	6968      	ldr	r0, [r5, #20]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8000c84:	f503 5188 	add.w	r1, r3, #4352	; 0x1100
 8000c88:	680a      	ldr	r2, [r1, #0]
 8000c8a:	f422 12e0 	bic.w	r2, r2, #1835008	; 0x1c0000
 8000c8e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000c92:	600a      	str	r2, [r1, #0]
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8000c94:	f010 0103 	ands.w	r1, r0, #3
 8000c98:	d011      	beq.n	8000cbe <HAL_ETH_Init+0x18a>
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8000c9a:	65ee      	str	r6, [r5, #92]	; 0x5c
 8000c9c:	e00b      	b.n	8000cb6 <HAL_ETH_Init+0x182>
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8000c9e:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000ca2:	e764      	b.n	8000b6e <HAL_ETH_Init+0x3a>
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8000ca4:	f7ff fd5c 	bl	8000760 <HAL_GetTick>
 8000ca8:	1b80      	subs	r0, r0, r6
 8000caa:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8000cae:	f67f af6a 	bls.w	8000b86 <HAL_ETH_Init+0x52>
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8000cb2:	2304      	movs	r3, #4
 8000cb4:	65eb      	str	r3, [r5, #92]	; 0x5c
    heth->gState = HAL_ETH_STATE_ERROR;
 8000cb6:	23e0      	movs	r3, #224	; 0xe0
 8000cb8:	656b      	str	r3, [r5, #84]	; 0x54
    return HAL_ERROR;
 8000cba:	2001      	movs	r0, #1
 8000cbc:	e052      	b.n	8000d64 <HAL_ETH_Init+0x230>
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8000cbe:	f241 1408 	movw	r4, #4360	; 0x1108
 8000cc2:	591a      	ldr	r2, [r3, r4]
 8000cc4:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 8000cc8:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 8000ccc:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8000cd0:	68e8      	ldr	r0, [r5, #12]
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8000cd2:	511a      	str	r2, [r3, r4]
 8000cd4:	f100 0660 	add.w	r6, r0, #96	; 0x60
 8000cd8:	f105 0418 	add.w	r4, r5, #24
    dmatxdesc = heth->Init.TxDesc + i;
 8000cdc:	4602      	mov	r2, r0

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8000cde:	6011      	str	r1, [r2, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8000ce0:	6051      	str	r1, [r2, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8000ce2:	6091      	str	r1, [r2, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8000ce4:	60d1      	str	r1, [r2, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8000ce6:	f844 2b04 	str.w	r2, [r4], #4
 8000cea:	3218      	adds	r2, #24
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8000cec:	42b2      	cmp	r2, r6
 8000cee:	d1f6      	bne.n	8000cde <HAL_ETH_Init+0x1aa>
  }

  heth->TxDescList.CurTxDesc = 0;
 8000cf0:	62a9      	str	r1, [r5, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8000cf2:	f241 122c 	movw	r2, #4396	; 0x112c
 8000cf6:	2103      	movs	r1, #3

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
  {
    dmarxdesc =  heth->Init.RxDesc + i;

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8000cf8:	2400      	movs	r4, #0
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8000cfa:	5099      	str	r1, [r3, r2]
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8000cfc:	f241 1214 	movw	r2, #4372	; 0x1114
    dmarxdesc =  heth->Init.RxDesc + i;
 8000d00:	6929      	ldr	r1, [r5, #16]
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8000d02:	5098      	str	r0, [r3, r2]
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8000d04:	f503 5289 	add.w	r2, r3, #4384	; 0x1120
 8000d08:	f101 0660 	add.w	r6, r1, #96	; 0x60
 8000d0c:	6010      	str	r0, [r2, #0]
 8000d0e:	f105 002c 	add.w	r0, r5, #44	; 0x2c
    dmarxdesc =  heth->Init.RxDesc + i;
 8000d12:	460a      	mov	r2, r1
    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8000d14:	6014      	str	r4, [r2, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8000d16:	6054      	str	r4, [r2, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8000d18:	6094      	str	r4, [r2, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8000d1a:	60d4      	str	r4, [r2, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8000d1c:	6114      	str	r4, [r2, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8000d1e:	6154      	str	r4, [r2, #20]

    /* Set Rx descritors adresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8000d20:	f840 2b04 	str.w	r2, [r0], #4
 8000d24:	3218      	adds	r2, #24
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8000d26:	42b2      	cmp	r2, r6
 8000d28:	d1f4      	bne.n	8000d14 <HAL_ETH_Init+0x1e0>
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
  WRITE_REG(heth->RxDescList.ItMode, 0);
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8000d2a:	2003      	movs	r0, #3
 8000d2c:	f241 1230 	movw	r2, #4400	; 0x1130
  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8000d30:	63ec      	str	r4, [r5, #60]	; 0x3c
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8000d32:	642c      	str	r4, [r5, #64]	; 0x40
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8000d34:	646c      	str	r4, [r5, #68]	; 0x44
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8000d36:	64ec      	str	r4, [r5, #76]	; 0x4c
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8000d38:	64ac      	str	r4, [r5, #72]	; 0x48
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8000d3a:	5098      	str	r0, [r3, r2]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8000d3c:	f241 121c 	movw	r2, #4380	; 0x111c
  return HAL_OK;
 8000d40:	2000      	movs	r0, #0
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8000d42:	5099      	str	r1, [r3, r2]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (((uint32_t)(ETH_RX_DESC_CNT - 1))*sizeof(ETH_DMADescTypeDef)))));
 8000d44:	f501 61d8 	add.w	r1, r1, #1728	; 0x6c0
 8000d48:	f241 1228 	movw	r2, #4392	; 0x1128
 8000d4c:	5099      	str	r1, [r3, r2]
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8000d4e:	686a      	ldr	r2, [r5, #4]
 8000d50:	8891      	ldrh	r1, [r2, #4]
 8000d52:	f8c3 1300 	str.w	r1, [r3, #768]	; 0x300
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8000d56:	6812      	ldr	r2, [r2, #0]
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8000d58:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
  heth->gState = HAL_ETH_STATE_READY;
 8000d5c:	2310      	movs	r3, #16
  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8000d5e:	65ec      	str	r4, [r5, #92]	; 0x5c
  heth->gState = HAL_ETH_STATE_READY;
 8000d60:	656b      	str	r3, [r5, #84]	; 0x54
  heth->RxState = HAL_ETH_STATE_READY;
 8000d62:	65ab      	str	r3, [r5, #88]	; 0x58
}
 8000d64:	b024      	add	sp, #144	; 0x90
 8000d66:	bd70      	pop	{r4, r5, r6, pc}
 8000d68:	58024400 	.word	0x58024400
 8000d6c:	000f4240 	.word	0x000f4240

08000d70 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000d74:	680b      	ldr	r3, [r1, #0]
{
 8000d76:	b085      	sub	sp, #20
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d78:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 8000f44 <HAL_GPIO_Init+0x1d4>
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000d7c:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000d80:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00U;
 8000d82:	2300      	movs	r3, #0
        temp = EXTI_CurrentCPU->IMR1;
 8000d84:	f8df c1c0 	ldr.w	ip, [pc, #448]	; 8000f48 <HAL_GPIO_Init+0x1d8>
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000d88:	9a01      	ldr	r2, [sp, #4]
 8000d8a:	40da      	lsrs	r2, r3
 8000d8c:	d102      	bne.n	8000d94 <HAL_GPIO_Init+0x24>
      }
    }

    position++;
  }
}
 8000d8e:	b005      	add	sp, #20
 8000d90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000d94:	2701      	movs	r7, #1
    if (iocurrent != 0x00U)
 8000d96:	9a01      	ldr	r2, [sp, #4]
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000d98:	409f      	lsls	r7, r3
    if (iocurrent != 0x00U)
 8000d9a:	ea12 0507 	ands.w	r5, r2, r7
 8000d9e:	f000 80bb 	beq.w	8000f18 <HAL_GPIO_Init+0x1a8>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000da2:	684a      	ldr	r2, [r1, #4]
 8000da4:	005e      	lsls	r6, r3, #1
 8000da6:	f022 0e10 	bic.w	lr, r2, #16
 8000daa:	f10e 34ff 	add.w	r4, lr, #4294967295
 8000dae:	2c01      	cmp	r4, #1
 8000db0:	d814      	bhi.n	8000ddc <HAL_GPIO_Init+0x6c>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000db2:	f04f 0a03 	mov.w	sl, #3
        temp = GPIOx->OSPEEDR;
 8000db6:	f8d0 b008 	ldr.w	fp, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000dba:	fa0a f406 	lsl.w	r4, sl, r6
 8000dbe:	ea2b 0a04 	bic.w	sl, fp, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000dc2:	68cc      	ldr	r4, [r1, #12]
 8000dc4:	40b4      	lsls	r4, r6
 8000dc6:	ea44 040a 	orr.w	r4, r4, sl
        GPIOx->OSPEEDR = temp;
 8000dca:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8000dcc:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000dce:	ea24 0707 	bic.w	r7, r4, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000dd2:	f3c2 1400 	ubfx	r4, r2, #4, #1
 8000dd6:	409c      	lsls	r4, r3
 8000dd8:	4327      	orrs	r7, r4
        GPIOx->OTYPER = temp;
 8000dda:	6047      	str	r7, [r0, #4]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ddc:	2403      	movs	r4, #3
      temp = GPIOx->PUPDR;
 8000dde:	68c7      	ldr	r7, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000de0:	f1be 0f02 	cmp.w	lr, #2
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000de4:	fa04 f406 	lsl.w	r4, r4, r6
 8000de8:	ea6f 0404 	mvn.w	r4, r4
 8000dec:	ea07 0a04 	and.w	sl, r7, r4
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000df0:	688f      	ldr	r7, [r1, #8]
 8000df2:	fa07 f706 	lsl.w	r7, r7, r6
 8000df6:	ea47 070a 	orr.w	r7, r7, sl
      GPIOx->PUPDR = temp;
 8000dfa:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000dfc:	d116      	bne.n	8000e2c <HAL_GPIO_Init+0xbc>
        temp = GPIOx->AFR[position >> 3U];
 8000dfe:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000e02:	f003 0b07 	and.w	fp, r3, #7
 8000e06:	f04f 0e0f 	mov.w	lr, #15
 8000e0a:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8000e0e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 8000e12:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000e16:	fa0e fe0b 	lsl.w	lr, lr, fp
 8000e1a:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000e1e:	690f      	ldr	r7, [r1, #16]
 8000e20:	fa07 f70b 	lsl.w	r7, r7, fp
 8000e24:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8000e28:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 8000e2c:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000e2e:	403c      	ands	r4, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e30:	f002 0703 	and.w	r7, r2, #3
 8000e34:	fa07 f606 	lsl.w	r6, r7, r6
 8000e38:	4334      	orrs	r4, r6
      GPIOx->MODER = temp;
 8000e3a:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e3c:	00d4      	lsls	r4, r2, #3
 8000e3e:	d56b      	bpl.n	8000f18 <HAL_GPIO_Init+0x1a8>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e40:	f8d8 40f4 	ldr.w	r4, [r8, #244]	; 0xf4
 8000e44:	f023 0603 	bic.w	r6, r3, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000e48:	f003 0703 	and.w	r7, r3, #3
 8000e4c:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e50:	f044 0402 	orr.w	r4, r4, #2
 8000e54:	f106 46b0 	add.w	r6, r6, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000e58:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e5a:	f8c8 40f4 	str.w	r4, [r8, #244]	; 0xf4
 8000e5e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000e62:	f8d8 40f4 	ldr.w	r4, [r8, #244]	; 0xf4
 8000e66:	f004 0402 	and.w	r4, r4, #2
 8000e6a:	9403      	str	r4, [sp, #12]
 8000e6c:	9c03      	ldr	r4, [sp, #12]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000e6e:	fa0e f407 	lsl.w	r4, lr, r7
        temp = SYSCFG->EXTICR[position >> 2U];
 8000e72:	f8d6 a008 	ldr.w	sl, [r6, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000e76:	ea2a 0e04 	bic.w	lr, sl, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000e7a:	4c31      	ldr	r4, [pc, #196]	; (8000f40 <HAL_GPIO_Init+0x1d0>)
 8000e7c:	42a0      	cmp	r0, r4
 8000e7e:	d04d      	beq.n	8000f1c <HAL_GPIO_Init+0x1ac>
 8000e80:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000e84:	42a0      	cmp	r0, r4
 8000e86:	d04b      	beq.n	8000f20 <HAL_GPIO_Init+0x1b0>
 8000e88:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000e8c:	42a0      	cmp	r0, r4
 8000e8e:	d049      	beq.n	8000f24 <HAL_GPIO_Init+0x1b4>
 8000e90:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000e94:	42a0      	cmp	r0, r4
 8000e96:	d047      	beq.n	8000f28 <HAL_GPIO_Init+0x1b8>
 8000e98:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000e9c:	42a0      	cmp	r0, r4
 8000e9e:	d045      	beq.n	8000f2c <HAL_GPIO_Init+0x1bc>
 8000ea0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000ea4:	42a0      	cmp	r0, r4
 8000ea6:	d043      	beq.n	8000f30 <HAL_GPIO_Init+0x1c0>
 8000ea8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000eac:	42a0      	cmp	r0, r4
 8000eae:	d041      	beq.n	8000f34 <HAL_GPIO_Init+0x1c4>
 8000eb0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000eb4:	42a0      	cmp	r0, r4
 8000eb6:	d03f      	beq.n	8000f38 <HAL_GPIO_Init+0x1c8>
 8000eb8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000ebc:	42a0      	cmp	r0, r4
 8000ebe:	d03d      	beq.n	8000f3c <HAL_GPIO_Init+0x1cc>
 8000ec0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000ec4:	42a0      	cmp	r0, r4
 8000ec6:	bf14      	ite	ne
 8000ec8:	240a      	movne	r4, #10
 8000eca:	2409      	moveq	r4, #9
 8000ecc:	40bc      	lsls	r4, r7
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ece:	03d7      	lsls	r7, r2, #15
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000ed0:	ea44 040e 	orr.w	r4, r4, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ed4:	60b4      	str	r4, [r6, #8]
        temp &= ~(iocurrent);
 8000ed6:	ea6f 0605 	mvn.w	r6, r5
        temp = EXTI_CurrentCPU->IMR1;
 8000eda:	f8dc 4000 	ldr.w	r4, [ip]
        temp &= ~(iocurrent);
 8000ede:	bf54      	ite	pl
 8000ee0:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8000ee2:	432c      	orrmi	r4, r5
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ee4:	0397      	lsls	r7, r2, #14
        EXTI_CurrentCPU->IMR1 = temp;
 8000ee6:	f8cc 4000 	str.w	r4, [ip]
        temp = EXTI_CurrentCPU->EMR1;
 8000eea:	f8dc 4004 	ldr.w	r4, [ip, #4]
        temp &= ~(iocurrent);
 8000eee:	bf54      	ite	pl
 8000ef0:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8000ef2:	432c      	orrmi	r4, r5
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ef4:	02d7      	lsls	r7, r2, #11
        EXTI->RTSR1 = temp;
 8000ef6:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
        EXTI_CurrentCPU->EMR1 = temp;
 8000efa:	f8cc 4004 	str.w	r4, [ip, #4]
        temp = EXTI->RTSR1;
 8000efe:	f8d9 4000 	ldr.w	r4, [r9]
        temp &= ~(iocurrent);
 8000f02:	bf54      	ite	pl
 8000f04:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8000f06:	432c      	orrmi	r4, r5
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f08:	0292      	lsls	r2, r2, #10
        EXTI->RTSR1 = temp;
 8000f0a:	603c      	str	r4, [r7, #0]
        temp = EXTI->FTSR1;
 8000f0c:	687c      	ldr	r4, [r7, #4]
        temp &= ~(iocurrent);
 8000f0e:	bf54      	ite	pl
 8000f10:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8000f12:	432c      	orrmi	r4, r5
        EXTI->FTSR1 = temp;
 8000f14:	f8c9 4004 	str.w	r4, [r9, #4]
    position++;
 8000f18:	3301      	adds	r3, #1
 8000f1a:	e735      	b.n	8000d88 <HAL_GPIO_Init+0x18>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000f1c:	2400      	movs	r4, #0
 8000f1e:	e7d5      	b.n	8000ecc <HAL_GPIO_Init+0x15c>
 8000f20:	2401      	movs	r4, #1
 8000f22:	e7d3      	b.n	8000ecc <HAL_GPIO_Init+0x15c>
 8000f24:	2402      	movs	r4, #2
 8000f26:	e7d1      	b.n	8000ecc <HAL_GPIO_Init+0x15c>
 8000f28:	2403      	movs	r4, #3
 8000f2a:	e7cf      	b.n	8000ecc <HAL_GPIO_Init+0x15c>
 8000f2c:	2404      	movs	r4, #4
 8000f2e:	e7cd      	b.n	8000ecc <HAL_GPIO_Init+0x15c>
 8000f30:	2405      	movs	r4, #5
 8000f32:	e7cb      	b.n	8000ecc <HAL_GPIO_Init+0x15c>
 8000f34:	2406      	movs	r4, #6
 8000f36:	e7c9      	b.n	8000ecc <HAL_GPIO_Init+0x15c>
 8000f38:	2407      	movs	r4, #7
 8000f3a:	e7c7      	b.n	8000ecc <HAL_GPIO_Init+0x15c>
 8000f3c:	2408      	movs	r4, #8
 8000f3e:	e7c5      	b.n	8000ecc <HAL_GPIO_Init+0x15c>
 8000f40:	58020000 	.word	0x58020000
 8000f44:	58024400 	.word	0x58024400
 8000f48:	58000080 	.word	0x58000080

08000f4c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8000f4c:	6903      	ldr	r3, [r0, #16]
 8000f4e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000f50:	bf14      	ite	ne
 8000f52:	2001      	movne	r0, #1
 8000f54:	2000      	moveq	r0, #0
 8000f56:	4770      	bx	lr

08000f58 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f58:	b10a      	cbz	r2, 8000f5e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000f5a:	6181      	str	r1, [r0, #24]
 8000f5c:	4770      	bx	lr
 8000f5e:	0409      	lsls	r1, r1, #16
 8000f60:	e7fb      	b.n	8000f5a <HAL_GPIO_WritePin+0x2>

08000f62 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000f62:	6943      	ldr	r3, [r0, #20]
 8000f64:	ea31 0303 	bics.w	r3, r1, r3
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000f68:	bf08      	it	eq
 8000f6a:	0409      	lsleq	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f6c:	6181      	str	r1, [r0, #24]
 8000f6e:	4770      	bx	lr

08000f70 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000f70:	b5f0      	push	{r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000f72:	4604      	mov	r4, r0
{
 8000f74:	b08b      	sub	sp, #44	; 0x2c
  if (hpcd == NULL)
 8000f76:	b360      	cbz	r0, 8000fd2 <HAL_PCD_Init+0x62>
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000f78:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
  USBx = hpcd->Instance;
 8000f7c:	6805      	ldr	r5, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000f7e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000f82:	b91b      	cbnz	r3, 8000f8c <HAL_PCD_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000f84:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000f88:	f003 fcd2 	bl	8004930 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000f8c:	2303      	movs	r3, #3

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000f8e:	466e      	mov	r6, sp
 8000f90:	1d27      	adds	r7, r4, #4
  hpcd->State = HAL_PCD_STATE_BUSY;
 8000f92:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000f96:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  __HAL_PCD_DISABLE(hpcd);
 8000f98:	4625      	mov	r5, r4
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000f9a:	f413 7380 	ands.w	r3, r3, #256	; 0x100
  __HAL_PCD_DISABLE(hpcd);
 8000f9e:	f855 0b10 	ldr.w	r0, [r5], #16
    hpcd->Init.dma_enable = 0U;
 8000fa2:	bf08      	it	eq
 8000fa4:	6123      	streq	r3, [r4, #16]
  __HAL_PCD_DISABLE(hpcd);
 8000fa6:	f003 f81e 	bl	8003fe6 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000faa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fac:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000fae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fb0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000fb2:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000fb6:	4625      	mov	r5, r4
 8000fb8:	e886 0003 	stmia.w	r6, {r0, r1}
 8000fbc:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8000fc0:	f855 0b10 	ldr.w	r0, [r5], #16
 8000fc4:	f002 ffce 	bl	8003f64 <USB_CoreInit>
 8000fc8:	4606      	mov	r6, r0
 8000fca:	b120      	cbz	r0, 8000fd6 <HAL_PCD_Init+0x66>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000fcc:	2302      	movs	r3, #2
 8000fce:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
    return HAL_ERROR;
 8000fd2:	2501      	movs	r5, #1
 8000fd4:	e054      	b.n	8001080 <HAL_PCD_Init+0x110>
    return HAL_ERROR;
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000fd6:	4601      	mov	r1, r0
 8000fd8:	6820      	ldr	r0, [r4, #0]
 8000fda:	f003 f80a 	bl	8003ff2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fde:	4630      	mov	r0, r6
 8000fe0:	f8d4 e004 	ldr.w	lr, [r4, #4]
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000fe4:	261c      	movs	r6, #28
 8000fe6:	f04f 0c01 	mov.w	ip, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000fea:	4601      	mov	r1, r0
 8000fec:	b2c2      	uxtb	r2, r0
 8000fee:	3001      	adds	r0, #1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ff0:	4596      	cmp	lr, r2
 8000ff2:	d81b      	bhi.n	800102c <HAL_PCD_Init+0xbc>
 8000ff4:	2300      	movs	r3, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000ff6:	261c      	movs	r6, #28
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	b2d8      	uxtb	r0, r3
 8000ffc:	3301      	adds	r3, #1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ffe:	4586      	cmp	lr, r0
 8001000:	d822      	bhi.n	8001048 <HAL_PCD_Init+0xd8>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001002:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001004:	466e      	mov	r6, sp
 8001006:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001008:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800100a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800100c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001010:	e886 0003 	stmia.w	r6, {r0, r1}
 8001014:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8001018:	6820      	ldr	r0, [r4, #0]
 800101a:	f003 f82b 	bl	8004074 <USB_DevInit>
 800101e:	2301      	movs	r3, #1
 8001020:	4605      	mov	r5, r0
 8001022:	b300      	cbz	r0, 8001066 <HAL_PCD_Init+0xf6>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001024:	2202      	movs	r2, #2
 8001026:	f884 23bd 	strb.w	r2, [r4, #957]	; 0x3bd
 800102a:	e7d2      	b.n	8000fd2 <HAL_PCD_Init+0x62>
    hpcd->IN_ep[i].is_in = 1U;
 800102c:	fb06 4302 	mla	r3, r6, r2, r4
 8001030:	f883 c03d 	strb.w	ip, [r3, #61]	; 0x3d
    hpcd->IN_ep[i].num = i;
 8001034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001038:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800103c:	f883 103f 	strb.w	r1, [r3, #63]	; 0x3f
    hpcd->IN_ep[i].maxpacket = 0U;
 8001040:	6459      	str	r1, [r3, #68]	; 0x44
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001042:	6499      	str	r1, [r3, #72]	; 0x48
    hpcd->IN_ep[i].xfer_len = 0U;
 8001044:	6519      	str	r1, [r3, #80]	; 0x50
 8001046:	e7d1      	b.n	8000fec <HAL_PCD_Init+0x7c>
    hpcd->OUT_ep[i].is_in = 0U;
 8001048:	fb06 4200 	mla	r2, r6, r0, r4
 800104c:	f882 11fd 	strb.w	r1, [r2, #509]	; 0x1fd
    hpcd->OUT_ep[i].num = i;
 8001050:	f882 01fc 	strb.w	r0, [r2, #508]	; 0x1fc
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001054:	f882 11ff 	strb.w	r1, [r2, #511]	; 0x1ff
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001058:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800105c:	f8c2 1208 	str.w	r1, [r2, #520]	; 0x208
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001060:	f8c2 1210 	str.w	r1, [r2, #528]	; 0x210
 8001064:	e7c9      	b.n	8000ffa <HAL_PCD_Init+0x8a>
    return HAL_ERROR;
  }

  hpcd->USB_Address = 0U;
 8001066:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800106a:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800106e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001070:	2b01      	cmp	r3, #1
 8001072:	d102      	bne.n	800107a <HAL_PCD_Init+0x10a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001074:	4620      	mov	r0, r4
 8001076:	f000 f806 	bl	8001086 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 800107a:	6820      	ldr	r0, [r4, #0]
 800107c:	f003 f8b2 	bl	80041e4 <USB_DevDisconnect>

  return HAL_OK;
}
 8001080:	4628      	mov	r0, r5
 8001082:	b00b      	add	sp, #44	; 0x2c
 8001084:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001086 <HAL_PCDEx_ActivateLPM>:
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;

  hpcd->lpm_active = 1U;
 8001086:	2101      	movs	r1, #1
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001088:	6802      	ldr	r2, [r0, #0]
{
 800108a:	4603      	mov	r3, r0
  hpcd->lpm_active = 1U;
 800108c:	f8c0 13fc 	str.w	r1, [r0, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8001090:	2000      	movs	r0, #0
 8001092:	f883 03f4 	strb.w	r0, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001096:	6993      	ldr	r3, [r2, #24]
 8001098:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800109c:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800109e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80010a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010a4:	f043 0303 	orr.w	r3, r3, #3
 80010a8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
}
 80010aa:	4770      	bx	lr

080010ac <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80010ac:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80010ae:	4c10      	ldr	r4, [pc, #64]	; (80010f0 <HAL_PWREx_ConfigSupply+0x44>)
 80010b0:	68e3      	ldr	r3, [r4, #12]
 80010b2:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80010b6:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80010b8:	d105      	bne.n	80010c6 <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80010ba:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80010be:	1a18      	subs	r0, r3, r0
 80010c0:	bf18      	it	ne
 80010c2:	2001      	movne	r0, #1
 80010c4:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_OK;
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80010c6:	f023 0307 	bic.w	r3, r3, #7
 80010ca:	4318      	orrs	r0, r3
 80010cc:	60e0      	str	r0, [r4, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80010ce:	f7ff fb47 	bl	8000760 <HAL_GetTick>
 80010d2:	4605      	mov	r5, r0

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80010d4:	6863      	ldr	r3, [r4, #4]
 80010d6:	049b      	lsls	r3, r3, #18
 80010d8:	d501      	bpl.n	80010de <HAL_PWREx_ConfigSupply+0x32>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80010da:	2000      	movs	r0, #0
 80010dc:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80010de:	f7ff fb3f 	bl	8000760 <HAL_GetTick>
 80010e2:	1b40      	subs	r0, r0, r5
 80010e4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80010e8:	d9f4      	bls.n	80010d4 <HAL_PWREx_ConfigSupply+0x28>
      return HAL_ERROR;
 80010ea:	2001      	movs	r0, #1
}
 80010ec:	bd38      	pop	{r3, r4, r5, pc}
 80010ee:	bf00      	nop
 80010f0:	58024800 	.word	0x58024800

080010f4 <HAL_PWREx_EnableUSBVoltageDetector>:
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80010f4:	4a02      	ldr	r2, [pc, #8]	; (8001100 <HAL_PWREx_EnableUSBVoltageDetector+0xc>)
 80010f6:	68d3      	ldr	r3, [r2, #12]
 80010f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80010fc:	60d3      	str	r3, [r2, #12]
 80010fe:	4770      	bx	lr
 8001100:	58024800 	.word	0x58024800

08001104 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001106:	4604      	mov	r4, r0
 8001108:	b908      	cbnz	r0, 800110e <HAL_RCC_OscConfig+0xa>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
      {
        return HAL_ERROR;
 800110a:	2001      	movs	r0, #1
 800110c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800110e:	6803      	ldr	r3, [r0, #0]
 8001110:	07d8      	lsls	r0, r3, #31
 8001112:	d45a      	bmi.n	80011ca <HAL_RCC_OscConfig+0xc6>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001114:	6823      	ldr	r3, [r4, #0]
 8001116:	0799      	lsls	r1, r3, #30
 8001118:	f100 80a7 	bmi.w	800126a <HAL_RCC_OscConfig+0x166>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800111c:	6823      	ldr	r3, [r4, #0]
 800111e:	06da      	lsls	r2, r3, #27
 8001120:	d523      	bpl.n	800116a <HAL_RCC_OscConfig+0x66>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001122:	4ba9      	ldr	r3, [pc, #676]	; (80013c8 <HAL_RCC_OscConfig+0x2c4>)
 8001124:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001126:	6a99      	ldr	r1, [r3, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001128:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800112c:	2a08      	cmp	r2, #8
 800112e:	d007      	beq.n	8001140 <HAL_RCC_OscConfig+0x3c>
 8001130:	2a18      	cmp	r2, #24
 8001132:	f040 80fb 	bne.w	800132c <HAL_RCC_OscConfig+0x228>
 8001136:	f001 0203 	and.w	r2, r1, #3
 800113a:	2a01      	cmp	r2, #1
 800113c:	f040 80f6 	bne.w	800132c <HAL_RCC_OscConfig+0x228>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	05db      	lsls	r3, r3, #23
 8001144:	d502      	bpl.n	800114c <HAL_RCC_OscConfig+0x48>
 8001146:	69e3      	ldr	r3, [r4, #28]
 8001148:	2b80      	cmp	r3, #128	; 0x80
 800114a:	d1de      	bne.n	800110a <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800114c:	f7ff fb20 	bl	8000790 <HAL_GetREVID>
 8001150:	f241 0303 	movw	r3, #4099	; 0x1003
 8001154:	4a9c      	ldr	r2, [pc, #624]	; (80013c8 <HAL_RCC_OscConfig+0x2c4>)
 8001156:	4298      	cmp	r0, r3
 8001158:	6a21      	ldr	r1, [r4, #32]
 800115a:	f200 80e0 	bhi.w	800131e <HAL_RCC_OscConfig+0x21a>
 800115e:	6853      	ldr	r3, [r2, #4]
 8001160:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001164:	ea43 6381 	orr.w	r3, r3, r1, lsl #26
 8001168:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800116a:	6823      	ldr	r3, [r4, #0]
 800116c:	0719      	lsls	r1, r3, #28
 800116e:	f100 8116 	bmi.w	800139e <HAL_RCC_OscConfig+0x29a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001172:	6823      	ldr	r3, [r4, #0]
 8001174:	069a      	lsls	r2, r3, #26
 8001176:	f100 813c 	bmi.w	80013f2 <HAL_RCC_OscConfig+0x2ee>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800117a:	6823      	ldr	r3, [r4, #0]
 800117c:	075d      	lsls	r5, r3, #29
 800117e:	d51e      	bpl.n	80011be <HAL_RCC_OscConfig+0xba>
    PWR->CR1 |= PWR_CR1_DBP;
 8001180:	4d92      	ldr	r5, [pc, #584]	; (80013cc <HAL_RCC_OscConfig+0x2c8>)
 8001182:	682b      	ldr	r3, [r5, #0]
 8001184:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001188:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 800118a:	f7ff fae9 	bl	8000760 <HAL_GetTick>
 800118e:	4606      	mov	r6, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001190:	682b      	ldr	r3, [r5, #0]
 8001192:	05da      	lsls	r2, r3, #23
 8001194:	f140 8152 	bpl.w	800143c <HAL_RCC_OscConfig+0x338>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001198:	68a3      	ldr	r3, [r4, #8]
 800119a:	4d8b      	ldr	r5, [pc, #556]	; (80013c8 <HAL_RCC_OscConfig+0x2c4>)
 800119c:	2b01      	cmp	r3, #1
 800119e:	f040 8154 	bne.w	800144a <HAL_RCC_OscConfig+0x346>
 80011a2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80011a4:	f043 0301 	orr.w	r3, r3, #1
 80011a8:	672b      	str	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011aa:	f241 3588 	movw	r5, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80011ae:	f7ff fad7 	bl	8000760 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80011b2:	4e85      	ldr	r6, [pc, #532]	; (80013c8 <HAL_RCC_OscConfig+0x2c4>)
      tickstart = HAL_GetTick();
 80011b4:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80011b6:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80011b8:	079b      	lsls	r3, r3, #30
 80011ba:	f140 816c 	bpl.w	8001496 <HAL_RCC_OscConfig+0x392>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80011be:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80011c0:	2800      	cmp	r0, #0
 80011c2:	f040 816f 	bne.w	80014a4 <HAL_RCC_OscConfig+0x3a0>
      }
    }
  }
  return HAL_OK;
 80011c6:	2000      	movs	r0, #0
 80011c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011ca:	4b7f      	ldr	r3, [pc, #508]	; (80013c8 <HAL_RCC_OscConfig+0x2c4>)
 80011cc:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80011ce:	6a99      	ldr	r1, [r3, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011d0:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80011d4:	2a10      	cmp	r2, #16
 80011d6:	d005      	beq.n	80011e4 <HAL_RCC_OscConfig+0xe0>
 80011d8:	2a18      	cmp	r2, #24
 80011da:	d10a      	bne.n	80011f2 <HAL_RCC_OscConfig+0xee>
 80011dc:	f001 0203 	and.w	r2, r1, #3
 80011e0:	2a02      	cmp	r2, #2
 80011e2:	d106      	bne.n	80011f2 <HAL_RCC_OscConfig+0xee>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	039a      	lsls	r2, r3, #14
 80011e8:	d594      	bpl.n	8001114 <HAL_RCC_OscConfig+0x10>
 80011ea:	6863      	ldr	r3, [r4, #4]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d191      	bne.n	8001114 <HAL_RCC_OscConfig+0x10>
 80011f0:	e78b      	b.n	800110a <HAL_RCC_OscConfig+0x6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011f2:	6863      	ldr	r3, [r4, #4]
 80011f4:	4d74      	ldr	r5, [pc, #464]	; (80013c8 <HAL_RCC_OscConfig+0x2c4>)
 80011f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011fa:	d111      	bne.n	8001220 <HAL_RCC_OscConfig+0x11c>
 80011fc:	682b      	ldr	r3, [r5, #0]
 80011fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001202:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001204:	f7ff faac 	bl	8000760 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001208:	4d6f      	ldr	r5, [pc, #444]	; (80013c8 <HAL_RCC_OscConfig+0x2c4>)
        tickstart = HAL_GetTick();
 800120a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800120c:	682b      	ldr	r3, [r5, #0]
 800120e:	039b      	lsls	r3, r3, #14
 8001210:	d480      	bmi.n	8001114 <HAL_RCC_OscConfig+0x10>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001212:	f7ff faa5 	bl	8000760 <HAL_GetTick>
 8001216:	1b80      	subs	r0, r0, r6
 8001218:	2864      	cmp	r0, #100	; 0x64
 800121a:	d9f7      	bls.n	800120c <HAL_RCC_OscConfig+0x108>
            return HAL_TIMEOUT;
 800121c:	2003      	movs	r0, #3
 800121e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001220:	b9a3      	cbnz	r3, 800124c <HAL_RCC_OscConfig+0x148>
 8001222:	682b      	ldr	r3, [r5, #0]
 8001224:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001228:	602b      	str	r3, [r5, #0]
 800122a:	682b      	ldr	r3, [r5, #0]
 800122c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001230:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001232:	f7ff fa95 	bl	8000760 <HAL_GetTick>
 8001236:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001238:	682b      	ldr	r3, [r5, #0]
 800123a:	039f      	lsls	r7, r3, #14
 800123c:	f57f af6a 	bpl.w	8001114 <HAL_RCC_OscConfig+0x10>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001240:	f7ff fa8e 	bl	8000760 <HAL_GetTick>
 8001244:	1b80      	subs	r0, r0, r6
 8001246:	2864      	cmp	r0, #100	; 0x64
 8001248:	d9f6      	bls.n	8001238 <HAL_RCC_OscConfig+0x134>
 800124a:	e7e7      	b.n	800121c <HAL_RCC_OscConfig+0x118>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800124c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001250:	682b      	ldr	r3, [r5, #0]
 8001252:	d103      	bne.n	800125c <HAL_RCC_OscConfig+0x158>
 8001254:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001258:	602b      	str	r3, [r5, #0]
 800125a:	e7cf      	b.n	80011fc <HAL_RCC_OscConfig+0xf8>
 800125c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001260:	602b      	str	r3, [r5, #0]
 8001262:	682b      	ldr	r3, [r5, #0]
 8001264:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001268:	e7cb      	b.n	8001202 <HAL_RCC_OscConfig+0xfe>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800126a:	4b57      	ldr	r3, [pc, #348]	; (80013c8 <HAL_RCC_OscConfig+0x2c4>)
 800126c:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800126e:	6a99      	ldr	r1, [r3, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001270:	f012 0238 	ands.w	r2, r2, #56	; 0x38
 8001274:	d003      	beq.n	800127e <HAL_RCC_OscConfig+0x17a>
 8001276:	2a18      	cmp	r2, #24
 8001278:	d11b      	bne.n	80012b2 <HAL_RCC_OscConfig+0x1ae>
 800127a:	078e      	lsls	r6, r1, #30
 800127c:	d119      	bne.n	80012b2 <HAL_RCC_OscConfig+0x1ae>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	075d      	lsls	r5, r3, #29
 8001282:	d503      	bpl.n	800128c <HAL_RCC_OscConfig+0x188>
 8001284:	68e3      	ldr	r3, [r4, #12]
 8001286:	2b00      	cmp	r3, #0
 8001288:	f43f af3f 	beq.w	800110a <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800128c:	f7ff fa80 	bl	8000790 <HAL_GetREVID>
 8001290:	f241 0303 	movw	r3, #4099	; 0x1003
 8001294:	4a4c      	ldr	r2, [pc, #304]	; (80013c8 <HAL_RCC_OscConfig+0x2c4>)
 8001296:	4298      	cmp	r0, r3
 8001298:	6921      	ldr	r1, [r4, #16]
 800129a:	6853      	ldr	r3, [r2, #4]
 800129c:	bf95      	itete	ls
 800129e:	f423 337c 	bicls.w	r3, r3, #258048	; 0x3f000
 80012a2:	f023 43fe 	bichi.w	r3, r3, #2130706432	; 0x7f000000
 80012a6:	ea43 3301 	orrls.w	r3, r3, r1, lsl #12
 80012aa:	ea43 6301 	orrhi.w	r3, r3, r1, lsl #24
 80012ae:	6053      	str	r3, [r2, #4]
 80012b0:	e734      	b.n	800111c <HAL_RCC_OscConfig+0x18>
 80012b2:	4d45      	ldr	r5, [pc, #276]	; (80013c8 <HAL_RCC_OscConfig+0x2c4>)
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80012b4:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80012b6:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80012b8:	b30a      	cbz	r2, 80012fe <HAL_RCC_OscConfig+0x1fa>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80012ba:	f023 0319 	bic.w	r3, r3, #25
 80012be:	4313      	orrs	r3, r2
 80012c0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80012c2:	f7ff fa4d 	bl	8000760 <HAL_GetTick>
 80012c6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80012c8:	682b      	ldr	r3, [r5, #0]
 80012ca:	0758      	lsls	r0, r3, #29
 80012cc:	d511      	bpl.n	80012f2 <HAL_RCC_OscConfig+0x1ee>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012ce:	f7ff fa5f 	bl	8000790 <HAL_GetREVID>
 80012d2:	f241 0303 	movw	r3, #4099	; 0x1003
 80012d6:	6922      	ldr	r2, [r4, #16]
 80012d8:	4298      	cmp	r0, r3
 80012da:	686b      	ldr	r3, [r5, #4]
 80012dc:	bf95      	itete	ls
 80012de:	f423 337c 	bicls.w	r3, r3, #258048	; 0x3f000
 80012e2:	f023 43fe 	bichi.w	r3, r3, #2130706432	; 0x7f000000
 80012e6:	ea43 3302 	orrls.w	r3, r3, r2, lsl #12
 80012ea:	ea43 6302 	orrhi.w	r3, r3, r2, lsl #24
 80012ee:	606b      	str	r3, [r5, #4]
 80012f0:	e714      	b.n	800111c <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012f2:	f7ff fa35 	bl	8000760 <HAL_GetTick>
 80012f6:	1b80      	subs	r0, r0, r6
 80012f8:	2802      	cmp	r0, #2
 80012fa:	d9e5      	bls.n	80012c8 <HAL_RCC_OscConfig+0x1c4>
 80012fc:	e78e      	b.n	800121c <HAL_RCC_OscConfig+0x118>
        __HAL_RCC_HSI_DISABLE();
 80012fe:	f023 0301 	bic.w	r3, r3, #1
 8001302:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001304:	f7ff fa2c 	bl	8000760 <HAL_GetTick>
 8001308:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800130a:	682b      	ldr	r3, [r5, #0]
 800130c:	0759      	lsls	r1, r3, #29
 800130e:	f57f af05 	bpl.w	800111c <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001312:	f7ff fa25 	bl	8000760 <HAL_GetTick>
 8001316:	1b80      	subs	r0, r0, r6
 8001318:	2802      	cmp	r0, #2
 800131a:	d9f6      	bls.n	800130a <HAL_RCC_OscConfig+0x206>
 800131c:	e77e      	b.n	800121c <HAL_RCC_OscConfig+0x118>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800131e:	68d3      	ldr	r3, [r2, #12]
 8001320:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8001324:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8001328:	60d3      	str	r3, [r2, #12]
 800132a:	e71e      	b.n	800116a <HAL_RCC_OscConfig+0x66>
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800132c:	69e3      	ldr	r3, [r4, #28]
 800132e:	4d26      	ldr	r5, [pc, #152]	; (80013c8 <HAL_RCC_OscConfig+0x2c4>)
 8001330:	b323      	cbz	r3, 800137c <HAL_RCC_OscConfig+0x278>
        __HAL_RCC_CSI_ENABLE();
 8001332:	682b      	ldr	r3, [r5, #0]
 8001334:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001338:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800133a:	f7ff fa11 	bl	8000760 <HAL_GetTick>
 800133e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001340:	682b      	ldr	r3, [r5, #0]
 8001342:	05df      	lsls	r7, r3, #23
 8001344:	d50d      	bpl.n	8001362 <HAL_RCC_OscConfig+0x25e>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001346:	f7ff fa23 	bl	8000790 <HAL_GetREVID>
 800134a:	f241 0303 	movw	r3, #4099	; 0x1003
 800134e:	6a22      	ldr	r2, [r4, #32]
 8001350:	4298      	cmp	r0, r3
 8001352:	d80c      	bhi.n	800136e <HAL_RCC_OscConfig+0x26a>
 8001354:	686b      	ldr	r3, [r5, #4]
 8001356:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800135a:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 800135e:	606b      	str	r3, [r5, #4]
 8001360:	e703      	b.n	800116a <HAL_RCC_OscConfig+0x66>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001362:	f7ff f9fd 	bl	8000760 <HAL_GetTick>
 8001366:	1b80      	subs	r0, r0, r6
 8001368:	2802      	cmp	r0, #2
 800136a:	d9e9      	bls.n	8001340 <HAL_RCC_OscConfig+0x23c>
 800136c:	e756      	b.n	800121c <HAL_RCC_OscConfig+0x118>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800136e:	68eb      	ldr	r3, [r5, #12]
 8001370:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8001374:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001378:	60eb      	str	r3, [r5, #12]
 800137a:	e6f6      	b.n	800116a <HAL_RCC_OscConfig+0x66>
        __HAL_RCC_CSI_DISABLE();
 800137c:	682b      	ldr	r3, [r5, #0]
 800137e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001382:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001384:	f7ff f9ec 	bl	8000760 <HAL_GetTick>
 8001388:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800138a:	682b      	ldr	r3, [r5, #0]
 800138c:	05d8      	lsls	r0, r3, #23
 800138e:	f57f aeec 	bpl.w	800116a <HAL_RCC_OscConfig+0x66>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001392:	f7ff f9e5 	bl	8000760 <HAL_GetTick>
 8001396:	1b80      	subs	r0, r0, r6
 8001398:	2802      	cmp	r0, #2
 800139a:	d9f6      	bls.n	800138a <HAL_RCC_OscConfig+0x286>
 800139c:	e73e      	b.n	800121c <HAL_RCC_OscConfig+0x118>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800139e:	6963      	ldr	r3, [r4, #20]
 80013a0:	4d09      	ldr	r5, [pc, #36]	; (80013c8 <HAL_RCC_OscConfig+0x2c4>)
 80013a2:	b1ab      	cbz	r3, 80013d0 <HAL_RCC_OscConfig+0x2cc>
      __HAL_RCC_LSI_ENABLE();
 80013a4:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80013a6:	f043 0301 	orr.w	r3, r3, #1
 80013aa:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 80013ac:	f7ff f9d8 	bl	8000760 <HAL_GetTick>
 80013b0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80013b2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80013b4:	079b      	lsls	r3, r3, #30
 80013b6:	f53f aedc 	bmi.w	8001172 <HAL_RCC_OscConfig+0x6e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013ba:	f7ff f9d1 	bl	8000760 <HAL_GetTick>
 80013be:	1b80      	subs	r0, r0, r6
 80013c0:	2802      	cmp	r0, #2
 80013c2:	d9f6      	bls.n	80013b2 <HAL_RCC_OscConfig+0x2ae>
 80013c4:	e72a      	b.n	800121c <HAL_RCC_OscConfig+0x118>
 80013c6:	bf00      	nop
 80013c8:	58024400 	.word	0x58024400
 80013cc:	58024800 	.word	0x58024800
      __HAL_RCC_LSI_DISABLE();
 80013d0:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80013d2:	f023 0301 	bic.w	r3, r3, #1
 80013d6:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 80013d8:	f7ff f9c2 	bl	8000760 <HAL_GetTick>
 80013dc:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80013de:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80013e0:	079f      	lsls	r7, r3, #30
 80013e2:	f57f aec6 	bpl.w	8001172 <HAL_RCC_OscConfig+0x6e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013e6:	f7ff f9bb 	bl	8000760 <HAL_GetTick>
 80013ea:	1b80      	subs	r0, r0, r6
 80013ec:	2802      	cmp	r0, #2
 80013ee:	d9f6      	bls.n	80013de <HAL_RCC_OscConfig+0x2da>
 80013f0:	e714      	b.n	800121c <HAL_RCC_OscConfig+0x118>
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80013f2:	69a3      	ldr	r3, [r4, #24]
 80013f4:	4d83      	ldr	r5, [pc, #524]	; (8001604 <HAL_RCC_OscConfig+0x500>)
 80013f6:	b183      	cbz	r3, 800141a <HAL_RCC_OscConfig+0x316>
      __HAL_RCC_HSI48_ENABLE();
 80013f8:	682b      	ldr	r3, [r5, #0]
 80013fa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013fe:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001400:	f7ff f9ae 	bl	8000760 <HAL_GetTick>
 8001404:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001406:	682b      	ldr	r3, [r5, #0]
 8001408:	0498      	lsls	r0, r3, #18
 800140a:	f53f aeb6 	bmi.w	800117a <HAL_RCC_OscConfig+0x76>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800140e:	f7ff f9a7 	bl	8000760 <HAL_GetTick>
 8001412:	1b80      	subs	r0, r0, r6
 8001414:	2802      	cmp	r0, #2
 8001416:	d9f6      	bls.n	8001406 <HAL_RCC_OscConfig+0x302>
 8001418:	e700      	b.n	800121c <HAL_RCC_OscConfig+0x118>
      __HAL_RCC_HSI48_DISABLE();
 800141a:	682b      	ldr	r3, [r5, #0]
 800141c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001420:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001422:	f7ff f99d 	bl	8000760 <HAL_GetTick>
 8001426:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001428:	682b      	ldr	r3, [r5, #0]
 800142a:	0499      	lsls	r1, r3, #18
 800142c:	f57f aea5 	bpl.w	800117a <HAL_RCC_OscConfig+0x76>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001430:	f7ff f996 	bl	8000760 <HAL_GetTick>
 8001434:	1b80      	subs	r0, r0, r6
 8001436:	2802      	cmp	r0, #2
 8001438:	d9f6      	bls.n	8001428 <HAL_RCC_OscConfig+0x324>
 800143a:	e6ef      	b.n	800121c <HAL_RCC_OscConfig+0x118>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800143c:	f7ff f990 	bl	8000760 <HAL_GetTick>
 8001440:	1b80      	subs	r0, r0, r6
 8001442:	2864      	cmp	r0, #100	; 0x64
 8001444:	f67f aea4 	bls.w	8001190 <HAL_RCC_OscConfig+0x8c>
 8001448:	e6e8      	b.n	800121c <HAL_RCC_OscConfig+0x118>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800144a:	b9b3      	cbnz	r3, 800147a <HAL_RCC_OscConfig+0x376>
 800144c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800144e:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001452:	f023 0301 	bic.w	r3, r3, #1
 8001456:	672b      	str	r3, [r5, #112]	; 0x70
 8001458:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800145a:	f023 0304 	bic.w	r3, r3, #4
 800145e:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001460:	f7ff f97e 	bl	8000760 <HAL_GetTick>
 8001464:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001466:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001468:	0798      	lsls	r0, r3, #30
 800146a:	f57f aea8 	bpl.w	80011be <HAL_RCC_OscConfig+0xba>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800146e:	f7ff f977 	bl	8000760 <HAL_GetTick>
 8001472:	1b80      	subs	r0, r0, r6
 8001474:	42b8      	cmp	r0, r7
 8001476:	d9f6      	bls.n	8001466 <HAL_RCC_OscConfig+0x362>
 8001478:	e6d0      	b.n	800121c <HAL_RCC_OscConfig+0x118>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800147a:	2b05      	cmp	r3, #5
 800147c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800147e:	d103      	bne.n	8001488 <HAL_RCC_OscConfig+0x384>
 8001480:	f043 0304 	orr.w	r3, r3, #4
 8001484:	672b      	str	r3, [r5, #112]	; 0x70
 8001486:	e68c      	b.n	80011a2 <HAL_RCC_OscConfig+0x9e>
 8001488:	f023 0301 	bic.w	r3, r3, #1
 800148c:	672b      	str	r3, [r5, #112]	; 0x70
 800148e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001490:	f023 0304 	bic.w	r3, r3, #4
 8001494:	e688      	b.n	80011a8 <HAL_RCC_OscConfig+0xa4>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001496:	f7ff f963 	bl	8000760 <HAL_GetTick>
 800149a:	1bc0      	subs	r0, r0, r7
 800149c:	42a8      	cmp	r0, r5
 800149e:	f67f ae8a 	bls.w	80011b6 <HAL_RCC_OscConfig+0xb2>
 80014a2:	e6bb      	b.n	800121c <HAL_RCC_OscConfig+0x118>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80014a4:	4d57      	ldr	r5, [pc, #348]	; (8001604 <HAL_RCC_OscConfig+0x500>)
 80014a6:	692b      	ldr	r3, [r5, #16]
 80014a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80014ac:	2b18      	cmp	r3, #24
 80014ae:	d07a      	beq.n	80015a6 <HAL_RCC_OscConfig+0x4a2>
        __HAL_RCC_PLL_DISABLE();
 80014b0:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014b2:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80014b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80014b8:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014ba:	d167      	bne.n	800158c <HAL_RCC_OscConfig+0x488>
        tickstart = HAL_GetTick();
 80014bc:	f7ff f950 	bl	8000760 <HAL_GetTick>
 80014c0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80014c2:	682b      	ldr	r3, [r5, #0]
 80014c4:	0199      	lsls	r1, r3, #6
 80014c6:	d45b      	bmi.n	8001580 <HAL_RCC_OscConfig+0x47c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014c8:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80014ca:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80014cc:	f423 737c 	bic.w	r3, r3, #1008	; 0x3f0
 80014d0:	f023 0303 	bic.w	r3, r3, #3
 80014d4:	4313      	orrs	r3, r2
 80014d6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80014d8:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80014dc:	62ab      	str	r3, [r5, #40]	; 0x28
 80014de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80014e0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80014e2:	3b01      	subs	r3, #1
 80014e4:	3a01      	subs	r2, #1
 80014e6:	025b      	lsls	r3, r3, #9
 80014e8:	0412      	lsls	r2, r2, #16
 80014ea:	b29b      	uxth	r3, r3
 80014ec:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80014f0:	4313      	orrs	r3, r2
 80014f2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80014f4:	3a01      	subs	r2, #1
 80014f6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80014fa:	4313      	orrs	r3, r2
 80014fc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80014fe:	3a01      	subs	r2, #1
 8001500:	0612      	lsls	r2, r2, #24
 8001502:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8001506:	4313      	orrs	r3, r2
 8001508:	632b      	str	r3, [r5, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 800150a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800150c:	f023 0301 	bic.w	r3, r3, #1
 8001510:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001512:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001514:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001516:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800151a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800151e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001522:	636b      	str	r3, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001524:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001526:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001528:	f023 030c 	bic.w	r3, r3, #12
 800152c:	4313      	orrs	r3, r2
 800152e:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001530:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001532:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001534:	f023 0302 	bic.w	r3, r3, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001538:	4c32      	ldr	r4, [pc, #200]	; (8001604 <HAL_RCC_OscConfig+0x500>)
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800153a:	4313      	orrs	r3, r2
 800153c:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800153e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001540:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001544:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001546:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001548:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800154c:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800154e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001550:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001554:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 8001556:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001558:	f043 0301 	orr.w	r3, r3, #1
 800155c:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 800155e:	682b      	ldr	r3, [r5, #0]
 8001560:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001564:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001566:	f7ff f8fb 	bl	8000760 <HAL_GetTick>
 800156a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800156c:	6823      	ldr	r3, [r4, #0]
 800156e:	019a      	lsls	r2, r3, #6
 8001570:	f53f ae29 	bmi.w	80011c6 <HAL_RCC_OscConfig+0xc2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001574:	f7ff f8f4 	bl	8000760 <HAL_GetTick>
 8001578:	1b40      	subs	r0, r0, r5
 800157a:	2802      	cmp	r0, #2
 800157c:	d9f6      	bls.n	800156c <HAL_RCC_OscConfig+0x468>
 800157e:	e64d      	b.n	800121c <HAL_RCC_OscConfig+0x118>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001580:	f7ff f8ee 	bl	8000760 <HAL_GetTick>
 8001584:	1b80      	subs	r0, r0, r6
 8001586:	2802      	cmp	r0, #2
 8001588:	d99b      	bls.n	80014c2 <HAL_RCC_OscConfig+0x3be>
 800158a:	e647      	b.n	800121c <HAL_RCC_OscConfig+0x118>
        tickstart = HAL_GetTick();
 800158c:	f7ff f8e8 	bl	8000760 <HAL_GetTick>
 8001590:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001592:	682b      	ldr	r3, [r5, #0]
 8001594:	019b      	lsls	r3, r3, #6
 8001596:	f57f ae16 	bpl.w	80011c6 <HAL_RCC_OscConfig+0xc2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800159a:	f7ff f8e1 	bl	8000760 <HAL_GetTick>
 800159e:	1b00      	subs	r0, r0, r4
 80015a0:	2802      	cmp	r0, #2
 80015a2:	d9f6      	bls.n	8001592 <HAL_RCC_OscConfig+0x48e>
 80015a4:	e63a      	b.n	800121c <HAL_RCC_OscConfig+0x118>
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015a6:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 80015a8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 80015aa:	6b2b      	ldr	r3, [r5, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015ac:	d028      	beq.n	8001600 <HAL_RCC_OscConfig+0x4fc>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015ae:	f002 0103 	and.w	r1, r2, #3
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015b2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80015b4:	4281      	cmp	r1, r0
 80015b6:	f47f ada8 	bne.w	800110a <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80015ba:	f3c2 1205 	ubfx	r2, r2, #4, #6
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015be:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80015c0:	428a      	cmp	r2, r1
 80015c2:	f47f ada2 	bne.w	800110a <HAL_RCC_OscConfig+0x6>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80015c6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80015c8:	f3c3 0108 	ubfx	r1, r3, #0, #9
 80015cc:	3a01      	subs	r2, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80015ce:	4291      	cmp	r1, r2
 80015d0:	f47f ad9b 	bne.w	800110a <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80015d4:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80015d6:	f3c3 2146 	ubfx	r1, r3, #9, #7
 80015da:	3a01      	subs	r2, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80015dc:	4291      	cmp	r1, r2
 80015de:	f47f ad94 	bne.w	800110a <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80015e2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80015e4:	f3c3 4106 	ubfx	r1, r3, #16, #7
 80015e8:	3a01      	subs	r2, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80015ea:	4291      	cmp	r1, r2
 80015ec:	f47f ad8d 	bne.w	800110a <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80015f0:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80015f2:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80015f6:	3801      	subs	r0, #1
    return HAL_ERROR;
 80015f8:	1a18      	subs	r0, r3, r0
 80015fa:	bf18      	it	ne
 80015fc:	2001      	movne	r0, #1
 80015fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
}
 8001600:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001602:	bf00      	nop
 8001604:	58024400 	.word	0x58024400

08001608 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001608:	4b48      	ldr	r3, [pc, #288]	; (800172c <HAL_RCC_GetSysClockFreq+0x124>)
 800160a:	691a      	ldr	r2, [r3, #16]
 800160c:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8001610:	2a10      	cmp	r2, #16
{
 8001612:	b510      	push	{r4, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001614:	d00e      	beq.n	8001634 <HAL_RCC_GetSysClockFreq+0x2c>
 8001616:	2a18      	cmp	r2, #24
 8001618:	d00e      	beq.n	8001638 <HAL_RCC_GetSysClockFreq+0x30>
 800161a:	2a00      	cmp	r2, #0
 800161c:	f040 8083 	bne.w	8001726 <HAL_RCC_GetSysClockFreq+0x11e>
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	4843      	ldr	r0, [pc, #268]	; (8001730 <HAL_RCC_GetSysClockFreq+0x128>)
 8001624:	f012 0f20 	tst.w	r2, #32
 8001628:	d07e      	beq.n	8001728 <HAL_RCC_GetSysClockFreq+0x120>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8001630:	40d8      	lsrs	r0, r3
 8001632:	bd10      	pop	{r4, pc}
  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
    break;

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8001634:	483f      	ldr	r0, [pc, #252]	; (8001734 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001636:	bd10      	pop	{r4, pc}
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001638:	6a99      	ldr	r1, [r3, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800163a:	6a98      	ldr	r0, [r3, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800163c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800163e:	f3c0 1005 	ubfx	r0, r0, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8001642:	6b5c      	ldr	r4, [r3, #52]	; 0x34

    if (pllm != 0U)
 8001644:	2800      	cmp	r0, #0
 8001646:	d06f      	beq.n	8001728 <HAL_RCC_GetSysClockFreq+0x120>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8001648:	f3c4 04cc 	ubfx	r4, r4, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800164c:	f002 0201 	and.w	r2, r2, #1
 8001650:	ed9f 5a39 	vldr	s10, [pc, #228]	; 8001738 <HAL_RCC_GetSysClockFreq+0x130>
 8001654:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8001658:	4362      	muls	r2, r4
 800165a:	ee07 2a90 	vmov	s15, r2
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800165e:	f001 0203 	and.w	r2, r1, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8001662:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
    {
      switch (pllsource)
 8001666:	2a01      	cmp	r2, #1
 8001668:	ee07 0a90 	vmov	s15, r0
 800166c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001670:	d002      	beq.n	8001678 <HAL_RCC_GetSysClockFreq+0x70>
 8001672:	d30f      	bcc.n	8001694 <HAL_RCC_GetSysClockFreq+0x8c>
 8001674:	2a02      	cmp	r2, #2
 8001676:	d048      	beq.n	800170a <HAL_RCC_GetSysClockFreq+0x102>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800167e:	ee07 3a90 	vmov	s15, r3
 8001682:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001686:	eee6 7a05 	vfma.f32	s15, s12, s10
 800168a:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 800173c <HAL_RCC_GetSysClockFreq+0x134>
 800168e:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8001692:	e037      	b.n	8001704 <HAL_RCC_GetSysClockFreq+0xfc>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	0692      	lsls	r2, r2, #26
 8001698:	d527      	bpl.n	80016ea <HAL_RCC_GetSysClockFreq+0xe2>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800169a:	6819      	ldr	r1, [r3, #0]
 800169c:	4a24      	ldr	r2, [pc, #144]	; (8001730 <HAL_RCC_GetSysClockFreq+0x128>)
 800169e:	f3c1 01c1 	ubfx	r1, r1, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80016a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80016a4:	40ca      	lsrs	r2, r1
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80016a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80016aa:	ee07 2a90 	vmov	s15, r2
 80016ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016b2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80016b6:	ee07 3a90 	vmov	s15, r3
 80016ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016be:	eee6 7a05 	vfma.f32	s15, s12, s10
 80016c2:	ee77 7aa5 	vadd.f32	s15, s15, s11
        break;
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80016c6:	4b19      	ldr	r3, [pc, #100]	; (800172c <HAL_RCC_GetSysClockFreq+0x124>)
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80016c8:	ee67 7a87 	vmul.f32	s15, s15, s14
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ce:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80016d2:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80016d4:	ee07 3a10 	vmov	s14, r3
 80016d8:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80016dc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80016e0:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 80016e4:	ee17 0a90 	vmov	r0, s15
 80016e8:	bd10      	pop	{r4, pc}
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80016ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80016f0:	ee07 3a90 	vmov	s15, r3
 80016f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016f8:	eee6 7a05 	vfma.f32	s15, s12, s10
 80016fc:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8001740 <HAL_RCC_GetSysClockFreq+0x138>
 8001700:	ee77 7aa5 	vadd.f32	s15, s15, s11
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001704:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8001708:	e7dd      	b.n	80016c6 <HAL_RCC_GetSysClockFreq+0xbe>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800170a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001710:	ee07 3a90 	vmov	s15, r3
 8001714:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001718:	eee6 7a05 	vfma.f32	s15, s12, s10
 800171c:	ed9f 6a09 	vldr	s12, [pc, #36]	; 8001744 <HAL_RCC_GetSysClockFreq+0x13c>
 8001720:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8001724:	e7ee      	b.n	8001704 <HAL_RCC_GetSysClockFreq+0xfc>
    sysclockfreq = CSI_VALUE;
 8001726:	4808      	ldr	r0, [pc, #32]	; (8001748 <HAL_RCC_GetSysClockFreq+0x140>)
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 8001728:	bd10      	pop	{r4, pc}
 800172a:	bf00      	nop
 800172c:	58024400 	.word	0x58024400
 8001730:	03d09000 	.word	0x03d09000
 8001734:	007a1200 	.word	0x007a1200
 8001738:	39000000 	.word	0x39000000
 800173c:	4a742400 	.word	0x4a742400
 8001740:	4c742400 	.word	0x4c742400
 8001744:	4af42400 	.word	0x4af42400
 8001748:	003d0900 	.word	0x003d0900

0800174c <HAL_RCC_ClockConfig>:
{
 800174c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001750:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001752:	4604      	mov	r4, r0
 8001754:	b910      	cbnz	r0, 800175c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001756:	2001      	movs	r0, #1
 8001758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800175c:	4a89      	ldr	r2, [pc, #548]	; (8001984 <HAL_RCC_ClockConfig+0x238>)
 800175e:	6813      	ldr	r3, [r2, #0]
 8001760:	f003 030f 	and.w	r3, r3, #15
 8001764:	428b      	cmp	r3, r1
 8001766:	f0c0 8093 	bcc.w	8001890 <HAL_RCC_ClockConfig+0x144>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800176a:	6823      	ldr	r3, [r4, #0]
 800176c:	075f      	lsls	r7, r3, #29
 800176e:	f100 809b 	bmi.w	80018a8 <HAL_RCC_ClockConfig+0x15c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001772:	071e      	lsls	r6, r3, #28
 8001774:	d50b      	bpl.n	800178e <HAL_RCC_ClockConfig+0x42>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001776:	4984      	ldr	r1, [pc, #528]	; (8001988 <HAL_RCC_ClockConfig+0x23c>)
 8001778:	6966      	ldr	r6, [r4, #20]
 800177a:	69c8      	ldr	r0, [r1, #28]
 800177c:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8001780:	4286      	cmp	r6, r0
 8001782:	d904      	bls.n	800178e <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001784:	69ca      	ldr	r2, [r1, #28]
 8001786:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800178a:	4332      	orrs	r2, r6
 800178c:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800178e:	06d8      	lsls	r0, r3, #27
 8001790:	d50b      	bpl.n	80017aa <HAL_RCC_ClockConfig+0x5e>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001792:	497d      	ldr	r1, [pc, #500]	; (8001988 <HAL_RCC_ClockConfig+0x23c>)
 8001794:	69a6      	ldr	r6, [r4, #24]
 8001796:	69c8      	ldr	r0, [r1, #28]
 8001798:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 800179c:	4286      	cmp	r6, r0
 800179e:	d904      	bls.n	80017aa <HAL_RCC_ClockConfig+0x5e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80017a0:	69ca      	ldr	r2, [r1, #28]
 80017a2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80017a6:	4332      	orrs	r2, r6
 80017a8:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80017aa:	0699      	lsls	r1, r3, #26
 80017ac:	d50b      	bpl.n	80017c6 <HAL_RCC_ClockConfig+0x7a>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80017ae:	4976      	ldr	r1, [pc, #472]	; (8001988 <HAL_RCC_ClockConfig+0x23c>)
 80017b0:	69e6      	ldr	r6, [r4, #28]
 80017b2:	6a08      	ldr	r0, [r1, #32]
 80017b4:	f000 0070 	and.w	r0, r0, #112	; 0x70
 80017b8:	4286      	cmp	r6, r0
 80017ba:	d904      	bls.n	80017c6 <HAL_RCC_ClockConfig+0x7a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80017bc:	6a0a      	ldr	r2, [r1, #32]
 80017be:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80017c2:	4332      	orrs	r2, r6
 80017c4:	620a      	str	r2, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017c6:	079a      	lsls	r2, r3, #30
 80017c8:	d50b      	bpl.n	80017e2 <HAL_RCC_ClockConfig+0x96>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80017ca:	496f      	ldr	r1, [pc, #444]	; (8001988 <HAL_RCC_ClockConfig+0x23c>)
 80017cc:	68e6      	ldr	r6, [r4, #12]
 80017ce:	6988      	ldr	r0, [r1, #24]
 80017d0:	f000 000f 	and.w	r0, r0, #15
 80017d4:	4286      	cmp	r6, r0
 80017d6:	d904      	bls.n	80017e2 <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017d8:	698a      	ldr	r2, [r1, #24]
 80017da:	f022 020f 	bic.w	r2, r2, #15
 80017de:	4332      	orrs	r2, r6
 80017e0:	618a      	str	r2, [r1, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017e2:	07df      	lsls	r7, r3, #31
 80017e4:	d46e      	bmi.n	80018c4 <HAL_RCC_ClockConfig+0x178>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017e6:	6823      	ldr	r3, [r4, #0]
 80017e8:	079e      	lsls	r6, r3, #30
 80017ea:	f100 80a2 	bmi.w	8001932 <HAL_RCC_ClockConfig+0x1e6>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017ee:	4965      	ldr	r1, [pc, #404]	; (8001984 <HAL_RCC_ClockConfig+0x238>)
 80017f0:	680a      	ldr	r2, [r1, #0]
 80017f2:	f002 020f 	and.w	r2, r2, #15
 80017f6:	4295      	cmp	r5, r2
 80017f8:	f0c0 80a9 	bcc.w	800194e <HAL_RCC_ClockConfig+0x202>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80017fc:	0758      	lsls	r0, r3, #29
 80017fe:	f100 80b2 	bmi.w	8001966 <HAL_RCC_ClockConfig+0x21a>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001802:	0719      	lsls	r1, r3, #28
 8001804:	d50b      	bpl.n	800181e <HAL_RCC_ClockConfig+0xd2>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001806:	4960      	ldr	r1, [pc, #384]	; (8001988 <HAL_RCC_ClockConfig+0x23c>)
 8001808:	6965      	ldr	r5, [r4, #20]
 800180a:	69c8      	ldr	r0, [r1, #28]
 800180c:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8001810:	4285      	cmp	r5, r0
 8001812:	d204      	bcs.n	800181e <HAL_RCC_ClockConfig+0xd2>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001814:	69ca      	ldr	r2, [r1, #28]
 8001816:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800181a:	432a      	orrs	r2, r5
 800181c:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800181e:	06da      	lsls	r2, r3, #27
 8001820:	d50b      	bpl.n	800183a <HAL_RCC_ClockConfig+0xee>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001822:	4959      	ldr	r1, [pc, #356]	; (8001988 <HAL_RCC_ClockConfig+0x23c>)
 8001824:	69a5      	ldr	r5, [r4, #24]
 8001826:	69c8      	ldr	r0, [r1, #28]
 8001828:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 800182c:	4285      	cmp	r5, r0
 800182e:	d204      	bcs.n	800183a <HAL_RCC_ClockConfig+0xee>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001830:	69ca      	ldr	r2, [r1, #28]
 8001832:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001836:	432a      	orrs	r2, r5
 8001838:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800183a:	069b      	lsls	r3, r3, #26
 800183c:	d50b      	bpl.n	8001856 <HAL_RCC_ClockConfig+0x10a>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800183e:	4a52      	ldr	r2, [pc, #328]	; (8001988 <HAL_RCC_ClockConfig+0x23c>)
 8001840:	69e0      	ldr	r0, [r4, #28]
 8001842:	6a11      	ldr	r1, [r2, #32]
 8001844:	f001 0170 	and.w	r1, r1, #112	; 0x70
 8001848:	4288      	cmp	r0, r1
 800184a:	d204      	bcs.n	8001856 <HAL_RCC_ClockConfig+0x10a>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800184c:	6a13      	ldr	r3, [r2, #32]
 800184e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001852:	4303      	orrs	r3, r0
 8001854:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001856:	f7ff fed7 	bl	8001608 <HAL_RCC_GetSysClockFreq>
 800185a:	494b      	ldr	r1, [pc, #300]	; (8001988 <HAL_RCC_ClockConfig+0x23c>)
 800185c:	4a4b      	ldr	r2, [pc, #300]	; (800198c <HAL_RCC_ClockConfig+0x240>)
 800185e:	698b      	ldr	r3, [r1, #24]
 8001860:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8001864:	5cd3      	ldrb	r3, [r2, r3]
 8001866:	f003 031f 	and.w	r3, r3, #31
 800186a:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800186c:	698b      	ldr	r3, [r1, #24]
 800186e:	f003 030f 	and.w	r3, r3, #15
 8001872:	5cd3      	ldrb	r3, [r2, r3]
 8001874:	4a46      	ldr	r2, [pc, #280]	; (8001990 <HAL_RCC_ClockConfig+0x244>)
 8001876:	f003 031f 	and.w	r3, r3, #31
 800187a:	fa20 f303 	lsr.w	r3, r0, r3
 800187e:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 8001880:	4b44      	ldr	r3, [pc, #272]	; (8001994 <HAL_RCC_ClockConfig+0x248>)
 8001882:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick (uwTickPrio);
 8001884:	4b44      	ldr	r3, [pc, #272]	; (8001998 <HAL_RCC_ClockConfig+0x24c>)
}
 8001886:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick (uwTickPrio);
 800188a:	6818      	ldr	r0, [r3, #0]
 800188c:	f7fe bf08 	b.w	80006a0 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001890:	6813      	ldr	r3, [r2, #0]
 8001892:	f023 030f 	bic.w	r3, r3, #15
 8001896:	430b      	orrs	r3, r1
 8001898:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800189a:	6813      	ldr	r3, [r2, #0]
 800189c:	f003 030f 	and.w	r3, r3, #15
 80018a0:	4299      	cmp	r1, r3
 80018a2:	f47f af58 	bne.w	8001756 <HAL_RCC_ClockConfig+0xa>
 80018a6:	e760      	b.n	800176a <HAL_RCC_ClockConfig+0x1e>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80018a8:	4937      	ldr	r1, [pc, #220]	; (8001988 <HAL_RCC_ClockConfig+0x23c>)
 80018aa:	6926      	ldr	r6, [r4, #16]
 80018ac:	6988      	ldr	r0, [r1, #24]
 80018ae:	f000 0070 	and.w	r0, r0, #112	; 0x70
 80018b2:	4286      	cmp	r6, r0
 80018b4:	f67f af5d 	bls.w	8001772 <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80018b8:	698a      	ldr	r2, [r1, #24]
 80018ba:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80018be:	4332      	orrs	r2, r6
 80018c0:	618a      	str	r2, [r1, #24]
 80018c2:	e756      	b.n	8001772 <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80018c4:	4b30      	ldr	r3, [pc, #192]	; (8001988 <HAL_RCC_ClockConfig+0x23c>)
 80018c6:	68a1      	ldr	r1, [r4, #8]
 80018c8:	699a      	ldr	r2, [r3, #24]
 80018ca:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 80018ce:	430a      	orrs	r2, r1
 80018d0:	619a      	str	r2, [r3, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018d2:	6861      	ldr	r1, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80018d4:	681a      	ldr	r2, [r3, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018d6:	2902      	cmp	r1, #2
 80018d8:	d11e      	bne.n	8001918 <HAL_RCC_ClockConfig+0x1cc>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80018da:	f412 3f00 	tst.w	r2, #131072	; 0x20000
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80018de:	f43f af3a 	beq.w	8001756 <HAL_RCC_ClockConfig+0xa>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80018e2:	691a      	ldr	r2, [r3, #16]
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018e4:	f241 3888 	movw	r8, #5000	; 0x1388
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018e8:	4e27      	ldr	r6, [pc, #156]	; (8001988 <HAL_RCC_ClockConfig+0x23c>)
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80018ea:	f022 0207 	bic.w	r2, r2, #7
 80018ee:	430a      	orrs	r2, r1
 80018f0:	611a      	str	r2, [r3, #16]
      tickstart = HAL_GetTick();
 80018f2:	f7fe ff35 	bl	8000760 <HAL_GetTick>
 80018f6:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018f8:	6933      	ldr	r3, [r6, #16]
 80018fa:	6862      	ldr	r2, [r4, #4]
 80018fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001900:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8001904:	f43f af6f 	beq.w	80017e6 <HAL_RCC_ClockConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001908:	f7fe ff2a 	bl	8000760 <HAL_GetTick>
 800190c:	1bc0      	subs	r0, r0, r7
 800190e:	4540      	cmp	r0, r8
 8001910:	d9f2      	bls.n	80018f8 <HAL_RCC_ClockConfig+0x1ac>
            return HAL_TIMEOUT;
 8001912:	2003      	movs	r0, #3
}
 8001914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001918:	2903      	cmp	r1, #3
 800191a:	d102      	bne.n	8001922 <HAL_RCC_ClockConfig+0x1d6>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800191c:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001920:	e7dd      	b.n	80018de <HAL_RCC_ClockConfig+0x192>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001922:	2901      	cmp	r1, #1
 8001924:	d102      	bne.n	800192c <HAL_RCC_ClockConfig+0x1e0>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001926:	f412 7f80 	tst.w	r2, #256	; 0x100
 800192a:	e7d8      	b.n	80018de <HAL_RCC_ClockConfig+0x192>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800192c:	f012 0f04 	tst.w	r2, #4
 8001930:	e7d5      	b.n	80018de <HAL_RCC_ClockConfig+0x192>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001932:	4915      	ldr	r1, [pc, #84]	; (8001988 <HAL_RCC_ClockConfig+0x23c>)
 8001934:	68e6      	ldr	r6, [r4, #12]
 8001936:	6988      	ldr	r0, [r1, #24]
 8001938:	f000 000f 	and.w	r0, r0, #15
 800193c:	4286      	cmp	r6, r0
 800193e:	f4bf af56 	bcs.w	80017ee <HAL_RCC_ClockConfig+0xa2>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001942:	698a      	ldr	r2, [r1, #24]
 8001944:	f022 020f 	bic.w	r2, r2, #15
 8001948:	4332      	orrs	r2, r6
 800194a:	618a      	str	r2, [r1, #24]
 800194c:	e74f      	b.n	80017ee <HAL_RCC_ClockConfig+0xa2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800194e:	680a      	ldr	r2, [r1, #0]
 8001950:	f022 020f 	bic.w	r2, r2, #15
 8001954:	432a      	orrs	r2, r5
 8001956:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001958:	680a      	ldr	r2, [r1, #0]
 800195a:	f002 020f 	and.w	r2, r2, #15
 800195e:	4295      	cmp	r5, r2
 8001960:	f47f aef9 	bne.w	8001756 <HAL_RCC_ClockConfig+0xa>
 8001964:	e74a      	b.n	80017fc <HAL_RCC_ClockConfig+0xb0>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001966:	4908      	ldr	r1, [pc, #32]	; (8001988 <HAL_RCC_ClockConfig+0x23c>)
 8001968:	6925      	ldr	r5, [r4, #16]
 800196a:	6988      	ldr	r0, [r1, #24]
 800196c:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8001970:	4285      	cmp	r5, r0
 8001972:	f4bf af46 	bcs.w	8001802 <HAL_RCC_ClockConfig+0xb6>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001976:	698a      	ldr	r2, [r1, #24]
 8001978:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800197c:	432a      	orrs	r2, r5
 800197e:	618a      	str	r2, [r1, #24]
 8001980:	e73f      	b.n	8001802 <HAL_RCC_ClockConfig+0xb6>
 8001982:	bf00      	nop
 8001984:	52002000 	.word	0x52002000
 8001988:	58024400 	.word	0x58024400
 800198c:	080053e4 	.word	0x080053e4
 8001990:	2000000c 	.word	0x2000000c
 8001994:	20000008 	.word	0x20000008
 8001998:	20000004 	.word	0x20000004

0800199c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800199c:	b508      	push	{r3, lr}
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800199e:	f7ff fe33 	bl	8001608 <HAL_RCC_GetSysClockFreq>
 80019a2:	4a0b      	ldr	r2, [pc, #44]	; (80019d0 <HAL_RCC_GetHCLKFreq+0x34>)
 80019a4:	490b      	ldr	r1, [pc, #44]	; (80019d4 <HAL_RCC_GetHCLKFreq+0x38>)
 80019a6:	6993      	ldr	r3, [r2, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80019a8:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80019aa:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80019ae:	f002 020f 	and.w	r2, r2, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80019b2:	5ccb      	ldrb	r3, [r1, r3]
 80019b4:	f003 031f 	and.w	r3, r3, #31
 80019b8:	fa20 f303 	lsr.w	r3, r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80019bc:	5c88      	ldrb	r0, [r1, r2]
 80019be:	4a06      	ldr	r2, [pc, #24]	; (80019d8 <HAL_RCC_GetHCLKFreq+0x3c>)
 80019c0:	f000 001f 	and.w	r0, r0, #31
 80019c4:	fa23 f000 	lsr.w	r0, r3, r0
 80019c8:	6010      	str	r0, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80019ca:	4a04      	ldr	r2, [pc, #16]	; (80019dc <HAL_RCC_GetHCLKFreq+0x40>)
 80019cc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 80019ce:	bd08      	pop	{r3, pc}
 80019d0:	58024400 	.word	0x58024400
 80019d4:	080053e4 	.word	0x080053e4
 80019d8:	2000000c 	.word	0x2000000c
 80019dc:	20000008 	.word	0x20000008

080019e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019e0:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80019e2:	f7ff ffdb 	bl	800199c <HAL_RCC_GetHCLKFreq>
 80019e6:	4b05      	ldr	r3, [pc, #20]	; (80019fc <HAL_RCC_GetPCLK1Freq+0x1c>)
 80019e8:	4a05      	ldr	r2, [pc, #20]	; (8001a00 <HAL_RCC_GetPCLK1Freq+0x20>)
 80019ea:	69db      	ldr	r3, [r3, #28]
 80019ec:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80019f0:	5cd3      	ldrb	r3, [r2, r3]
 80019f2:	f003 031f 	and.w	r3, r3, #31
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80019f6:	40d8      	lsrs	r0, r3
 80019f8:	bd08      	pop	{r3, pc}
 80019fa:	bf00      	nop
 80019fc:	58024400 	.word	0x58024400
 8001a00:	080053e4 	.word	0x080053e4

08001a04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a04:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8001a06:	f7ff ffc9 	bl	800199c <HAL_RCC_GetHCLKFreq>
 8001a0a:	4b05      	ldr	r3, [pc, #20]	; (8001a20 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001a0c:	4a05      	ldr	r2, [pc, #20]	; (8001a24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a0e:	69db      	ldr	r3, [r3, #28]
 8001a10:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001a14:	5cd3      	ldrb	r3, [r2, r3]
 8001a16:	f003 031f 	and.w	r3, r3, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8001a1a:	40d8      	lsrs	r0, r3
 8001a1c:	bd08      	pop	{r3, pc}
 8001a1e:	bf00      	nop
 8001a20:	58024400 	.word	0x58024400
 8001a24:	080053e4 	.word	0x080053e4

08001a28 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8001a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8001a2a:	4c3a      	ldr	r4, [pc, #232]	; (8001b14 <RCCEx_PLL2_Config+0xec>)
{
 8001a2c:	4606      	mov	r6, r0
 8001a2e:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8001a30:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001a32:	f003 0303 	and.w	r3, r3, #3
 8001a36:	2b03      	cmp	r3, #3
 8001a38:	d069      	beq.n	8001b0e <RCCEx_PLL2_Config+0xe6>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8001a3a:	6823      	ldr	r3, [r4, #0]
 8001a3c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001a40:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a42:	f7fe fe8d 	bl	8000760 <HAL_GetTick>
 8001a46:	4607      	mov	r7, r0

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8001a48:	6823      	ldr	r3, [r4, #0]
 8001a4a:	011a      	lsls	r2, r3, #4
 8001a4c:	d44b      	bmi.n	8001ae6 <RCCEx_PLL2_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8001a4e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001a50:	6832      	ldr	r2, [r6, #0]
 8001a52:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001a56:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8001a5a:	62a3      	str	r3, [r4, #40]	; 0x28
 8001a5c:	68b3      	ldr	r3, [r6, #8]
 8001a5e:	68f2      	ldr	r2, [r6, #12]
 8001a60:	3b01      	subs	r3, #1
 8001a62:	3a01      	subs	r2, #1
 8001a64:	025b      	lsls	r3, r3, #9
 8001a66:	0412      	lsls	r2, r2, #16
 8001a68:	b29b      	uxth	r3, r3
 8001a6a:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	6872      	ldr	r2, [r6, #4]
 8001a72:	3a01      	subs	r2, #1
 8001a74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	6932      	ldr	r2, [r6, #16]
 8001a7c:	3a01      	subs	r2, #1
 8001a7e:	0612      	lsls	r2, r2, #24
 8001a80:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8001a84:	4313      	orrs	r3, r2
 8001a86:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8001a88:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001a8a:	6972      	ldr	r2, [r6, #20]
 8001a8c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001a90:	4313      	orrs	r3, r2
 8001a92:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8001a94:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001a96:	69b2      	ldr	r2, [r6, #24]
 8001a98:	f023 0320 	bic.w	r3, r3, #32
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8001aa0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001aa2:	f023 0310 	bic.w	r3, r3, #16
 8001aa6:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8001aa8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001aaa:	69f2      	ldr	r2, [r6, #28]
 8001aac:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001ab0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001ab4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001ab8:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8001aba:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001abc:	f043 0310 	orr.w	r3, r3, #16
 8001ac0:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8001ac2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8001ac4:	b9b5      	cbnz	r5, 8001af4 <RCCEx_PLL2_Config+0xcc>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8001ac6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8001aca:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8001acc:	4c11      	ldr	r4, [pc, #68]	; (8001b14 <RCCEx_PLL2_Config+0xec>)
 8001ace:	6823      	ldr	r3, [r4, #0]
 8001ad0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001ad4:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ad6:	f7fe fe43 	bl	8000760 <HAL_GetTick>
 8001ada:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8001adc:	6823      	ldr	r3, [r4, #0]
 8001ade:	011b      	lsls	r3, r3, #4
 8001ae0:	d50f      	bpl.n	8001b02 <RCCEx_PLL2_Config+0xda>
    }

  }


  return status;
 8001ae2:	2000      	movs	r0, #0
 8001ae4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8001ae6:	f7fe fe3b 	bl	8000760 <HAL_GetTick>
 8001aea:	1bc0      	subs	r0, r0, r7
 8001aec:	2802      	cmp	r0, #2
 8001aee:	d9ab      	bls.n	8001a48 <RCCEx_PLL2_Config+0x20>
        return HAL_TIMEOUT;
 8001af0:	2003      	movs	r0, #3
 8001af2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(Divider == DIVIDER_Q_UPDATE)
 8001af4:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8001af6:	bf0c      	ite	eq
 8001af8:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8001afc:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 8001b00:	e7e3      	b.n	8001aca <RCCEx_PLL2_Config+0xa2>
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8001b02:	f7fe fe2d 	bl	8000760 <HAL_GetTick>
 8001b06:	1b40      	subs	r0, r0, r5
 8001b08:	2802      	cmp	r0, #2
 8001b0a:	d9e7      	bls.n	8001adc <RCCEx_PLL2_Config+0xb4>
 8001b0c:	e7f0      	b.n	8001af0 <RCCEx_PLL2_Config+0xc8>
    return HAL_ERROR;
 8001b0e:	2001      	movs	r0, #1
}
 8001b10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b12:	bf00      	nop
 8001b14:	58024400 	.word	0x58024400

08001b18 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8001b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8001b1a:	4c3a      	ldr	r4, [pc, #232]	; (8001c04 <RCCEx_PLL3_Config+0xec>)
{
 8001b1c:	4606      	mov	r6, r0
 8001b1e:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8001b20:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001b22:	f003 0303 	and.w	r3, r3, #3
 8001b26:	2b03      	cmp	r3, #3
 8001b28:	d069      	beq.n	8001bfe <RCCEx_PLL3_Config+0xe6>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8001b2a:	6823      	ldr	r3, [r4, #0]
 8001b2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b30:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b32:	f7fe fe15 	bl	8000760 <HAL_GetTick>
 8001b36:	4607      	mov	r7, r0
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8001b38:	6823      	ldr	r3, [r4, #0]
 8001b3a:	009a      	lsls	r2, r3, #2
 8001b3c:	d44b      	bmi.n	8001bd6 <RCCEx_PLL3_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8001b3e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001b40:	6832      	ldr	r2, [r6, #0]
 8001b42:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8001b46:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8001b4a:	62a3      	str	r3, [r4, #40]	; 0x28
 8001b4c:	68b3      	ldr	r3, [r6, #8]
 8001b4e:	68f2      	ldr	r2, [r6, #12]
 8001b50:	3b01      	subs	r3, #1
 8001b52:	3a01      	subs	r2, #1
 8001b54:	025b      	lsls	r3, r3, #9
 8001b56:	0412      	lsls	r2, r2, #16
 8001b58:	b29b      	uxth	r3, r3
 8001b5a:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	6872      	ldr	r2, [r6, #4]
 8001b62:	3a01      	subs	r2, #1
 8001b64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	6932      	ldr	r2, [r6, #16]
 8001b6c:	3a01      	subs	r2, #1
 8001b6e:	0612      	lsls	r2, r2, #24
 8001b70:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8001b74:	4313      	orrs	r3, r2
 8001b76:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8001b78:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001b7a:	6972      	ldr	r2, [r6, #20]
 8001b7c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001b80:	4313      	orrs	r3, r2
 8001b82:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8001b84:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001b86:	69b2      	ldr	r2, [r6, #24]
 8001b88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8001b90:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001b92:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b96:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8001b98:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001b9a:	69f2      	ldr	r2, [r6, #28]
 8001b9c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001ba0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001ba4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001ba8:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8001baa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001bac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bb0:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8001bb2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8001bb4:	b9b5      	cbnz	r5, 8001be4 <RCCEx_PLL3_Config+0xcc>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8001bb6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8001bba:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8001bbc:	4c11      	ldr	r4, [pc, #68]	; (8001c04 <RCCEx_PLL3_Config+0xec>)
 8001bbe:	6823      	ldr	r3, [r4, #0]
 8001bc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bc4:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001bc6:	f7fe fdcb 	bl	8000760 <HAL_GetTick>
 8001bca:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8001bcc:	6823      	ldr	r3, [r4, #0]
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	d50f      	bpl.n	8001bf2 <RCCEx_PLL3_Config+0xda>
    }

  }


  return status;
 8001bd2:	2000      	movs	r0, #0
 8001bd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8001bd6:	f7fe fdc3 	bl	8000760 <HAL_GetTick>
 8001bda:	1bc0      	subs	r0, r0, r7
 8001bdc:	2802      	cmp	r0, #2
 8001bde:	d9ab      	bls.n	8001b38 <RCCEx_PLL3_Config+0x20>
        return HAL_TIMEOUT;
 8001be0:	2003      	movs	r0, #3
 8001be2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(Divider == DIVIDER_Q_UPDATE)
 8001be4:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8001be6:	bf0c      	ite	eq
 8001be8:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8001bec:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 8001bf0:	e7e3      	b.n	8001bba <RCCEx_PLL3_Config+0xa2>
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8001bf2:	f7fe fdb5 	bl	8000760 <HAL_GetTick>
 8001bf6:	1b40      	subs	r0, r0, r5
 8001bf8:	2802      	cmp	r0, #2
 8001bfa:	d9e7      	bls.n	8001bcc <RCCEx_PLL3_Config+0xb4>
 8001bfc:	e7f0      	b.n	8001be0 <RCCEx_PLL3_Config+0xc8>
    return HAL_ERROR;
 8001bfe:	2001      	movs	r0, #1
}
 8001c00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c02:	bf00      	nop
 8001c04:	58024400 	.word	0x58024400

08001c08 <HAL_RCCEx_PeriphCLKConfig>:
{
 8001c08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001c0c:	6806      	ldr	r6, [r0, #0]
{
 8001c0e:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001c10:	f016 6600 	ands.w	r6, r6, #134217728	; 0x8000000
 8001c14:	d023      	beq.n	8001c5e <HAL_RCCEx_PeriphCLKConfig+0x56>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8001c16:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8001c18:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001c1c:	d018      	beq.n	8001c50 <HAL_RCCEx_PeriphCLKConfig+0x48>
 8001c1e:	d802      	bhi.n	8001c26 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001c20:	b183      	cbz	r3, 8001c44 <HAL_RCCEx_PeriphCLKConfig+0x3c>
      ret = HAL_ERROR;
 8001c22:	2601      	movs	r6, #1
 8001c24:	e01b      	b.n	8001c5e <HAL_RCCEx_PeriphCLKConfig+0x56>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8001c26:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001c2a:	d023      	beq.n	8001c74 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8001c2c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8001c30:	d1f7      	bne.n	8001c22 <HAL_RCCEx_PeriphCLKConfig+0x1a>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8001c32:	4a9f      	ldr	r2, [pc, #636]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8001c34:	2600      	movs	r6, #0
 8001c36:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8001c38:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8001c3a:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001c3e:	430b      	orrs	r3, r1
 8001c40:	6513      	str	r3, [r2, #80]	; 0x50
 8001c42:	e00c      	b.n	8001c5e <HAL_RCCEx_PeriphCLKConfig+0x56>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001c44:	4a9a      	ldr	r2, [pc, #616]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8001c46:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001c48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c4c:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8001c4e:	e7f0      	b.n	8001c32 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8001c50:	2102      	movs	r1, #2
 8001c52:	3004      	adds	r0, #4
 8001c54:	f7ff fee8 	bl	8001a28 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8001c58:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8001c5a:	2800      	cmp	r0, #0
 8001c5c:	d0e9      	beq.n	8001c32 <HAL_RCCEx_PeriphCLKConfig+0x2a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8001c5e:	6823      	ldr	r3, [r4, #0]
 8001c60:	05dd      	lsls	r5, r3, #23
 8001c62:	d534      	bpl.n	8001cce <HAL_RCCEx_PeriphCLKConfig+0xc6>
    switch(PeriphClkInit->Sai1ClockSelection)
 8001c64:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001c66:	2b04      	cmp	r3, #4
 8001c68:	d830      	bhi.n	8001ccc <HAL_RCCEx_PeriphCLKConfig+0xc4>
 8001c6a:	e8df f003 	tbb	[pc, r3]
 8001c6e:	0f08      	.short	0x0f08
 8001c70:	0d29      	.short	0x0d29
 8001c72:	0d          	.byte	0x0d
 8001c73:	00          	.byte	0x00
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8001c74:	2102      	movs	r1, #2
 8001c76:	3024      	adds	r0, #36	; 0x24
 8001c78:	f7ff ff4e 	bl	8001b18 <RCCEx_PLL3_Config>
 8001c7c:	e7ec      	b.n	8001c58 <HAL_RCCEx_PeriphCLKConfig+0x50>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001c7e:	4a8c      	ldr	r2, [pc, #560]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8001c80:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001c82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c86:	62d3      	str	r3, [r2, #44]	; 0x2c
    switch(PeriphClkInit->Sai1ClockSelection)
 8001c88:	4635      	mov	r5, r6
 8001c8a:	e004      	b.n	8001c96 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8001c8c:	2100      	movs	r1, #0
 8001c8e:	1d20      	adds	r0, r4, #4
 8001c90:	f7ff feca 	bl	8001a28 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8001c94:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8001c96:	b9e5      	cbnz	r5, 8001cd2 <HAL_RCCEx_PeriphCLKConfig+0xca>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001c98:	4a85      	ldr	r2, [pc, #532]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8001c9a:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8001c9c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8001c9e:	f023 0307 	bic.w	r3, r3, #7
 8001ca2:	430b      	orrs	r3, r1
 8001ca4:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8001ca6:	6823      	ldr	r3, [r4, #0]
 8001ca8:	0598      	lsls	r0, r3, #22
 8001caa:	d521      	bpl.n	8001cf0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    switch(PeriphClkInit->Sai23ClockSelection)
 8001cac:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001cae:	2b80      	cmp	r3, #128	; 0x80
 8001cb0:	d03b      	beq.n	8001d2a <HAL_RCCEx_PeriphCLKConfig+0x122>
 8001cb2:	d810      	bhi.n	8001cd6 <HAL_RCCEx_PeriphCLKConfig+0xce>
 8001cb4:	b36b      	cbz	r3, 8001d12 <HAL_RCCEx_PeriphCLKConfig+0x10a>
 8001cb6:	2b40      	cmp	r3, #64	; 0x40
 8001cb8:	d031      	beq.n	8001d1e <HAL_RCCEx_PeriphCLKConfig+0x116>
      ret = HAL_ERROR;
 8001cba:	2601      	movs	r6, #1
 8001cbc:	4635      	mov	r5, r6
 8001cbe:	e017      	b.n	8001cf0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8001cc0:	2100      	movs	r1, #0
 8001cc2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001cc6:	f7ff ff27 	bl	8001b18 <RCCEx_PLL3_Config>
 8001cca:	e7e3      	b.n	8001c94 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      ret = HAL_ERROR;
 8001ccc:	2601      	movs	r6, #1
 8001cce:	4635      	mov	r5, r6
 8001cd0:	e7e9      	b.n	8001ca6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8001cd2:	462e      	mov	r6, r5
 8001cd4:	e7e7      	b.n	8001ca6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    switch(PeriphClkInit->Sai23ClockSelection)
 8001cd6:	2bc0      	cmp	r3, #192	; 0xc0
 8001cd8:	d002      	beq.n	8001ce0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8001cda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cde:	d1ec      	bne.n	8001cba <HAL_RCCEx_PeriphCLKConfig+0xb2>
    if(ret == HAL_OK)
 8001ce0:	bb4d      	cbnz	r5, 8001d36 <HAL_RCCEx_PeriphCLKConfig+0x12e>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8001ce2:	4a73      	ldr	r2, [pc, #460]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8001ce4:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8001ce6:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8001ce8:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 8001cec:	430b      	orrs	r3, r1
 8001cee:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8001cf0:	6823      	ldr	r3, [r4, #0]
 8001cf2:	0559      	lsls	r1, r3, #21
 8001cf4:	d530      	bpl.n	8001d58 <HAL_RCCEx_PeriphCLKConfig+0x150>
    switch(PeriphClkInit->Sai4AClockSelection)
 8001cf6:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8001cfa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001cfe:	d047      	beq.n	8001d90 <HAL_RCCEx_PeriphCLKConfig+0x188>
 8001d00:	d81b      	bhi.n	8001d3a <HAL_RCCEx_PeriphCLKConfig+0x132>
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d038      	beq.n	8001d78 <HAL_RCCEx_PeriphCLKConfig+0x170>
 8001d06:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001d0a:	d03b      	beq.n	8001d84 <HAL_RCCEx_PeriphCLKConfig+0x17c>
      ret = HAL_ERROR;
 8001d0c:	2601      	movs	r6, #1
 8001d0e:	4635      	mov	r5, r6
 8001d10:	e022      	b.n	8001d58 <HAL_RCCEx_PeriphCLKConfig+0x150>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001d12:	4a67      	ldr	r2, [pc, #412]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8001d14:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001d16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d1a:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8001d1c:	e7e0      	b.n	8001ce0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8001d1e:	2100      	movs	r1, #0
 8001d20:	1d20      	adds	r0, r4, #4
 8001d22:	f7ff fe81 	bl	8001a28 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8001d26:	4605      	mov	r5, r0
      break;
 8001d28:	e7da      	b.n	8001ce0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8001d2a:	2100      	movs	r1, #0
 8001d2c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001d30:	f7ff fef2 	bl	8001b18 <RCCEx_PLL3_Config>
 8001d34:	e7f7      	b.n	8001d26 <HAL_RCCEx_PeriphCLKConfig+0x11e>
 8001d36:	462e      	mov	r6, r5
 8001d38:	e7da      	b.n	8001cf0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    switch(PeriphClkInit->Sai4AClockSelection)
 8001d3a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8001d3e:	d002      	beq.n	8001d46 <HAL_RCCEx_PeriphCLKConfig+0x13e>
 8001d40:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001d44:	d1e2      	bne.n	8001d0c <HAL_RCCEx_PeriphCLKConfig+0x104>
    if(ret == HAL_OK)
 8001d46:	bb4d      	cbnz	r5, 8001d9c <HAL_RCCEx_PeriphCLKConfig+0x194>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8001d48:	4a59      	ldr	r2, [pc, #356]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8001d4a:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 8001d4e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8001d50:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 8001d54:	430b      	orrs	r3, r1
 8001d56:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8001d58:	6823      	ldr	r3, [r4, #0]
 8001d5a:	051a      	lsls	r2, r3, #20
 8001d5c:	d52f      	bpl.n	8001dbe <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    switch(PeriphClkInit->Sai4BClockSelection)
 8001d5e:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 8001d62:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001d66:	d041      	beq.n	8001dec <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8001d68:	d81a      	bhi.n	8001da0 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8001d6a:	b39b      	cbz	r3, 8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8001d6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d70:	d036      	beq.n	8001de0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      ret = HAL_ERROR;
 8001d72:	2601      	movs	r6, #1
 8001d74:	4635      	mov	r5, r6
 8001d76:	e022      	b.n	8001dbe <HAL_RCCEx_PeriphCLKConfig+0x1b6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001d78:	4a4d      	ldr	r2, [pc, #308]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8001d7a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001d7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d80:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8001d82:	e7e0      	b.n	8001d46 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8001d84:	2100      	movs	r1, #0
 8001d86:	1d20      	adds	r0, r4, #4
 8001d88:	f7ff fe4e 	bl	8001a28 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8001d8c:	4605      	mov	r5, r0
      break;
 8001d8e:	e7da      	b.n	8001d46 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8001d90:	2100      	movs	r1, #0
 8001d92:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001d96:	f7ff febf 	bl	8001b18 <RCCEx_PLL3_Config>
 8001d9a:	e7f7      	b.n	8001d8c <HAL_RCCEx_PeriphCLKConfig+0x184>
 8001d9c:	462e      	mov	r6, r5
 8001d9e:	e7db      	b.n	8001d58 <HAL_RCCEx_PeriphCLKConfig+0x150>
    switch(PeriphClkInit->Sai4BClockSelection)
 8001da0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001da4:	d002      	beq.n	8001dac <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8001da6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001daa:	d1e2      	bne.n	8001d72 <HAL_RCCEx_PeriphCLKConfig+0x16a>
    if(ret == HAL_OK)
 8001dac:	bb25      	cbnz	r5, 8001df8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8001dae:	4a40      	ldr	r2, [pc, #256]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8001db0:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 8001db4:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8001db6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001dba:	430b      	orrs	r3, r1
 8001dbc:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8001dbe:	6823      	ldr	r3, [r4, #0]
 8001dc0:	019b      	lsls	r3, r3, #6
 8001dc2:	d527      	bpl.n	8001e14 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    switch(PeriphClkInit->QspiClockSelection)
 8001dc4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001dc6:	2b10      	cmp	r3, #16
 8001dc8:	d033      	beq.n	8001e32 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8001dca:	d817      	bhi.n	8001dfc <HAL_RCCEx_PeriphCLKConfig+0x1f4>
 8001dcc:	b1d3      	cbz	r3, 8001e04 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
      ret = HAL_ERROR;
 8001dce:	2601      	movs	r6, #1
 8001dd0:	4635      	mov	r5, r6
 8001dd2:	e01f      	b.n	8001e14 <HAL_RCCEx_PeriphCLKConfig+0x20c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001dd4:	4a36      	ldr	r2, [pc, #216]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8001dd6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001dd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ddc:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8001dde:	e7e5      	b.n	8001dac <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8001de0:	2100      	movs	r1, #0
 8001de2:	1d20      	adds	r0, r4, #4
 8001de4:	f7ff fe20 	bl	8001a28 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8001de8:	4605      	mov	r5, r0
      break;
 8001dea:	e7df      	b.n	8001dac <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8001dec:	2100      	movs	r1, #0
 8001dee:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001df2:	f7ff fe91 	bl	8001b18 <RCCEx_PLL3_Config>
 8001df6:	e7f7      	b.n	8001de8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 8001df8:	462e      	mov	r6, r5
 8001dfa:	e7e0      	b.n	8001dbe <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    switch(PeriphClkInit->QspiClockSelection)
 8001dfc:	2b20      	cmp	r3, #32
 8001dfe:	d01e      	beq.n	8001e3e <HAL_RCCEx_PeriphCLKConfig+0x236>
 8001e00:	2b30      	cmp	r3, #48	; 0x30
 8001e02:	d1e4      	bne.n	8001dce <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    if(ret == HAL_OK)
 8001e04:	bb0d      	cbnz	r5, 8001e4a <HAL_RCCEx_PeriphCLKConfig+0x242>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8001e06:	4a2a      	ldr	r2, [pc, #168]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8001e08:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8001e0a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8001e0c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001e10:	430b      	orrs	r3, r1
 8001e12:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8001e14:	6823      	ldr	r3, [r4, #0]
 8001e16:	04df      	lsls	r7, r3, #19
 8001e18:	d527      	bpl.n	8001e6a <HAL_RCCEx_PeriphCLKConfig+0x262>
    switch(PeriphClkInit->Spi123ClockSelection)
 8001e1a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001e1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e20:	d03e      	beq.n	8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8001e22:	d814      	bhi.n	8001e4e <HAL_RCCEx_PeriphCLKConfig+0x246>
 8001e24:	b383      	cbz	r3, 8001e88 <HAL_RCCEx_PeriphCLKConfig+0x280>
 8001e26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e2a:	d033      	beq.n	8001e94 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      ret = HAL_ERROR;
 8001e2c:	2601      	movs	r6, #1
 8001e2e:	4635      	mov	r5, r6
 8001e30:	e01b      	b.n	8001e6a <HAL_RCCEx_PeriphCLKConfig+0x262>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001e32:	4a1f      	ldr	r2, [pc, #124]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8001e34:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001e36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e3a:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8001e3c:	e7e2      	b.n	8001e04 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8001e3e:	2102      	movs	r1, #2
 8001e40:	1d20      	adds	r0, r4, #4
 8001e42:	f7ff fdf1 	bl	8001a28 <RCCEx_PLL2_Config>
 8001e46:	4605      	mov	r5, r0
      break;
 8001e48:	e7dc      	b.n	8001e04 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
 8001e4a:	462e      	mov	r6, r5
 8001e4c:	e7e2      	b.n	8001e14 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    switch(PeriphClkInit->Spi123ClockSelection)
 8001e4e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001e52:	d002      	beq.n	8001e5a <HAL_RCCEx_PeriphCLKConfig+0x252>
 8001e54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001e58:	d1e8      	bne.n	8001e2c <HAL_RCCEx_PeriphCLKConfig+0x224>
    if(ret == HAL_OK)
 8001e5a:	bb3d      	cbnz	r5, 8001eac <HAL_RCCEx_PeriphCLKConfig+0x2a4>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8001e5c:	4a14      	ldr	r2, [pc, #80]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8001e5e:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8001e60:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8001e62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001e66:	430b      	orrs	r3, r1
 8001e68:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8001e6a:	6823      	ldr	r3, [r4, #0]
 8001e6c:	0498      	lsls	r0, r3, #18
 8001e6e:	d532      	bpl.n	8001ed6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    switch(PeriphClkInit->Spi45ClockSelection)
 8001e70:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001e72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001e76:	d044      	beq.n	8001f02 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 8001e78:	d81c      	bhi.n	8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8001e7a:	b323      	cbz	r3, 8001ec6 <HAL_RCCEx_PeriphCLKConfig+0x2be>
 8001e7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e80:	d039      	beq.n	8001ef6 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
      ret = HAL_ERROR;
 8001e82:	2601      	movs	r6, #1
 8001e84:	4635      	mov	r5, r6
 8001e86:	e026      	b.n	8001ed6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001e88:	4a09      	ldr	r2, [pc, #36]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8001e8a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001e8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e90:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8001e92:	e7e2      	b.n	8001e5a <HAL_RCCEx_PeriphCLKConfig+0x252>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8001e94:	2100      	movs	r1, #0
 8001e96:	1d20      	adds	r0, r4, #4
 8001e98:	f7ff fdc6 	bl	8001a28 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8001e9c:	4605      	mov	r5, r0
      break;
 8001e9e:	e7dc      	b.n	8001e5a <HAL_RCCEx_PeriphCLKConfig+0x252>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8001ea0:	2100      	movs	r1, #0
 8001ea2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001ea6:	f7ff fe37 	bl	8001b18 <RCCEx_PLL3_Config>
 8001eaa:	e7f7      	b.n	8001e9c <HAL_RCCEx_PeriphCLKConfig+0x294>
 8001eac:	462e      	mov	r6, r5
 8001eae:	e7dc      	b.n	8001e6a <HAL_RCCEx_PeriphCLKConfig+0x262>
 8001eb0:	58024400 	.word	0x58024400
    switch(PeriphClkInit->Spi45ClockSelection)
 8001eb4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001eb8:	d005      	beq.n	8001ec6 <HAL_RCCEx_PeriphCLKConfig+0x2be>
 8001eba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ebe:	d002      	beq.n	8001ec6 <HAL_RCCEx_PeriphCLKConfig+0x2be>
 8001ec0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001ec4:	d1dd      	bne.n	8001e82 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    if(ret == HAL_OK)
 8001ec6:	bb15      	cbnz	r5, 8001f0e <HAL_RCCEx_PeriphCLKConfig+0x306>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8001ec8:	4aa0      	ldr	r2, [pc, #640]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x544>)
 8001eca:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8001ecc:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8001ece:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8001ed2:	430b      	orrs	r3, r1
 8001ed4:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8001ed6:	6823      	ldr	r3, [r4, #0]
 8001ed8:	0459      	lsls	r1, r3, #17
 8001eda:	d52d      	bpl.n	8001f38 <HAL_RCCEx_PeriphCLKConfig+0x330>
    switch(PeriphClkInit->Spi6ClockSelection)
 8001edc:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 8001ee0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ee4:	d04b      	beq.n	8001f7e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8001ee6:	d814      	bhi.n	8001f12 <HAL_RCCEx_PeriphCLKConfig+0x30a>
 8001ee8:	b1e3      	cbz	r3, 8001f24 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8001eea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001eee:	d040      	beq.n	8001f72 <HAL_RCCEx_PeriphCLKConfig+0x36a>
      ret = HAL_ERROR;
 8001ef0:	2601      	movs	r6, #1
 8001ef2:	4635      	mov	r5, r6
 8001ef4:	e020      	b.n	8001f38 <HAL_RCCEx_PeriphCLKConfig+0x330>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8001ef6:	2101      	movs	r1, #1
 8001ef8:	1d20      	adds	r0, r4, #4
 8001efa:	f7ff fd95 	bl	8001a28 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8001efe:	4605      	mov	r5, r0
      break;
 8001f00:	e7e1      	b.n	8001ec6 <HAL_RCCEx_PeriphCLKConfig+0x2be>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8001f02:	2101      	movs	r1, #1
 8001f04:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001f08:	f7ff fe06 	bl	8001b18 <RCCEx_PLL3_Config>
 8001f0c:	e7f7      	b.n	8001efe <HAL_RCCEx_PeriphCLKConfig+0x2f6>
 8001f0e:	462e      	mov	r6, r5
 8001f10:	e7e1      	b.n	8001ed6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    switch(PeriphClkInit->Spi6ClockSelection)
 8001f12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f16:	d005      	beq.n	8001f24 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8001f18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f1c:	d002      	beq.n	8001f24 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8001f1e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8001f22:	d1e5      	bne.n	8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    if(ret == HAL_OK)
 8001f24:	2d00      	cmp	r5, #0
 8001f26:	d130      	bne.n	8001f8a <HAL_RCCEx_PeriphCLKConfig+0x382>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8001f28:	4a88      	ldr	r2, [pc, #544]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x544>)
 8001f2a:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 8001f2e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8001f30:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8001f34:	430b      	orrs	r3, r1
 8001f36:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8001f38:	6823      	ldr	r3, [r4, #0]
 8001f3a:	041a      	lsls	r2, r3, #16
 8001f3c:	d50f      	bpl.n	8001f5e <HAL_RCCEx_PeriphCLKConfig+0x356>
    switch(PeriphClkInit->FdcanClockSelection)
 8001f3e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8001f40:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001f44:	d023      	beq.n	8001f8e <HAL_RCCEx_PeriphCLKConfig+0x386>
 8001f46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001f4a:	d026      	beq.n	8001f9a <HAL_RCCEx_PeriphCLKConfig+0x392>
 8001f4c:	bb5b      	cbnz	r3, 8001fa6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    if(ret == HAL_OK)
 8001f4e:	bb6d      	cbnz	r5, 8001fac <HAL_RCCEx_PeriphCLKConfig+0x3a4>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8001f50:	4a7e      	ldr	r2, [pc, #504]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x544>)
 8001f52:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8001f54:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8001f56:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8001f5a:	430b      	orrs	r3, r1
 8001f5c:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8001f5e:	6823      	ldr	r3, [r4, #0]
 8001f60:	01db      	lsls	r3, r3, #7
 8001f62:	d533      	bpl.n	8001fcc <HAL_RCCEx_PeriphCLKConfig+0x3c4>
    switch(PeriphClkInit->FmcClockSelection)
 8001f64:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001f66:	2b03      	cmp	r3, #3
 8001f68:	d87d      	bhi.n	8002066 <HAL_RCCEx_PeriphCLKConfig+0x45e>
 8001f6a:	e8df f003 	tbb	[pc, r3]
 8001f6e:	2126      	.short	0x2126
 8001f70:	2676      	.short	0x2676
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8001f72:	2101      	movs	r1, #1
 8001f74:	1d20      	adds	r0, r4, #4
 8001f76:	f7ff fd57 	bl	8001a28 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8001f7a:	4605      	mov	r5, r0
      break;
 8001f7c:	e7d2      	b.n	8001f24 <HAL_RCCEx_PeriphCLKConfig+0x31c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8001f7e:	2101      	movs	r1, #1
 8001f80:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001f84:	f7ff fdc8 	bl	8001b18 <RCCEx_PLL3_Config>
 8001f88:	e7f7      	b.n	8001f7a <HAL_RCCEx_PeriphCLKConfig+0x372>
 8001f8a:	462e      	mov	r6, r5
 8001f8c:	e7d4      	b.n	8001f38 <HAL_RCCEx_PeriphCLKConfig+0x330>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001f8e:	4a6f      	ldr	r2, [pc, #444]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x544>)
 8001f90:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001f92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f96:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8001f98:	e7d9      	b.n	8001f4e <HAL_RCCEx_PeriphCLKConfig+0x346>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8001f9a:	2101      	movs	r1, #1
 8001f9c:	1d20      	adds	r0, r4, #4
 8001f9e:	f7ff fd43 	bl	8001a28 <RCCEx_PLL2_Config>
 8001fa2:	4605      	mov	r5, r0
      break;
 8001fa4:	e7d3      	b.n	8001f4e <HAL_RCCEx_PeriphCLKConfig+0x346>
      ret = HAL_ERROR;
 8001fa6:	2601      	movs	r6, #1
 8001fa8:	4635      	mov	r5, r6
 8001faa:	e7d8      	b.n	8001f5e <HAL_RCCEx_PeriphCLKConfig+0x356>
 8001fac:	462e      	mov	r6, r5
 8001fae:	e7d6      	b.n	8001f5e <HAL_RCCEx_PeriphCLKConfig+0x356>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001fb0:	4a66      	ldr	r2, [pc, #408]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x544>)
 8001fb2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001fb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fb8:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8001fba:	2d00      	cmp	r5, #0
 8001fbc:	d156      	bne.n	800206c <HAL_RCCEx_PeriphCLKConfig+0x464>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8001fbe:	4a63      	ldr	r2, [pc, #396]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x544>)
 8001fc0:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001fc2:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8001fc4:	f023 0303 	bic.w	r3, r3, #3
 8001fc8:	430b      	orrs	r3, r1
 8001fca:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001fcc:	6823      	ldr	r3, [r4, #0]
 8001fce:	025f      	lsls	r7, r3, #9
 8001fd0:	d556      	bpl.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0x478>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fd2:	4f5f      	ldr	r7, [pc, #380]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fda:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 8001fdc:	f7fe fbc0 	bl	8000760 <HAL_GetTick>
 8001fe0:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	05d8      	lsls	r0, r3, #23
 8001fe6:	d543      	bpl.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x468>
    if(ret == HAL_OK)
 8001fe8:	2d00      	cmp	r5, #0
 8001fea:	d161      	bne.n	80020b0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8001fec:	4b57      	ldr	r3, [pc, #348]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x544>)
 8001fee:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 8001ff2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001ff4:	4042      	eors	r2, r0
 8001ff6:	f412 7f40 	tst.w	r2, #768	; 0x300
 8001ffa:	d00b      	beq.n	8002014 <HAL_RCCEx_PeriphCLKConfig+0x40c>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001ffc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 8001ffe:	6f19      	ldr	r1, [r3, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002000:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8002004:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8002008:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800200a:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800200c:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8002010:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 8002012:	671a      	str	r2, [r3, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002014:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8002018:	d108      	bne.n	800202c <HAL_RCCEx_PeriphCLKConfig+0x424>
        tickstart = HAL_GetTick();
 800201a:	f7fe fba1 	bl	8000760 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800201e:	4f4b      	ldr	r7, [pc, #300]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x544>)
        tickstart = HAL_GetTick();
 8002020:	4680      	mov	r8, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002022:	f241 3988 	movw	r9, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002026:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002028:	0799      	lsls	r1, r3, #30
 800202a:	d536      	bpl.n	800209a <HAL_RCCEx_PeriphCLKConfig+0x492>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800202c:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8002030:	4946      	ldr	r1, [pc, #280]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x544>)
 8002032:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8002036:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800203a:	d135      	bne.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800203c:	6908      	ldr	r0, [r1, #16]
 800203e:	4a45      	ldr	r2, [pc, #276]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8002040:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
 8002044:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 8002048:	4302      	orrs	r2, r0
 800204a:	610a      	str	r2, [r1, #16]
 800204c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002050:	4a3e      	ldr	r2, [pc, #248]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x544>)
 8002052:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8002054:	430b      	orrs	r3, r1
 8002056:	6713      	str	r3, [r2, #112]	; 0x70
 8002058:	e012      	b.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0x478>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800205a:	2102      	movs	r1, #2
 800205c:	1d20      	adds	r0, r4, #4
 800205e:	f7ff fce3 	bl	8001a28 <RCCEx_PLL2_Config>
 8002062:	4605      	mov	r5, r0
      break;
 8002064:	e7a9      	b.n	8001fba <HAL_RCCEx_PeriphCLKConfig+0x3b2>
      ret = HAL_ERROR;
 8002066:	2601      	movs	r6, #1
 8002068:	4635      	mov	r5, r6
 800206a:	e7af      	b.n	8001fcc <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 800206c:	462e      	mov	r6, r5
 800206e:	e7ad      	b.n	8001fcc <HAL_RCCEx_PeriphCLKConfig+0x3c4>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002070:	f7fe fb76 	bl	8000760 <HAL_GetTick>
 8002074:	eba0 0008 	sub.w	r0, r0, r8
 8002078:	2864      	cmp	r0, #100	; 0x64
 800207a:	d9b2      	bls.n	8001fe2 <HAL_RCCEx_PeriphCLKConfig+0x3da>
        ret = HAL_TIMEOUT;
 800207c:	2603      	movs	r6, #3
 800207e:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002080:	6823      	ldr	r3, [r4, #0]
 8002082:	07da      	lsls	r2, r3, #31
 8002084:	d524      	bpl.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
    switch(PeriphClkInit->Usart16ClockSelection)
 8002086:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8002088:	2b10      	cmp	r3, #16
 800208a:	d032      	beq.n	80020f2 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
 800208c:	d812      	bhi.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
 800208e:	b1bb      	cbz	r3, 80020c0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
 8002090:	2b08      	cmp	r3, #8
 8002092:	d028      	beq.n	80020e6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
      ret = HAL_ERROR;
 8002094:	2601      	movs	r6, #1
 8002096:	4635      	mov	r5, r6
 8002098:	e01a      	b.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800209a:	f7fe fb61 	bl	8000760 <HAL_GetTick>
 800209e:	eba0 0008 	sub.w	r0, r0, r8
 80020a2:	4548      	cmp	r0, r9
 80020a4:	d9bf      	bls.n	8002026 <HAL_RCCEx_PeriphCLKConfig+0x41e>
 80020a6:	e7e9      	b.n	800207c <HAL_RCCEx_PeriphCLKConfig+0x474>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020a8:	690a      	ldr	r2, [r1, #16]
 80020aa:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 80020ae:	e7cc      	b.n	800204a <HAL_RCCEx_PeriphCLKConfig+0x442>
 80020b0:	462e      	mov	r6, r5
 80020b2:	e7e5      	b.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0x478>
    switch(PeriphClkInit->Usart16ClockSelection)
 80020b4:	2b20      	cmp	r3, #32
 80020b6:	d003      	beq.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
 80020b8:	2b28      	cmp	r3, #40	; 0x28
 80020ba:	d001      	beq.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
 80020bc:	2b18      	cmp	r3, #24
 80020be:	d1e9      	bne.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    if(ret == HAL_OK)
 80020c0:	b9ed      	cbnz	r5, 80020fe <HAL_RCCEx_PeriphCLKConfig+0x4f6>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80020c2:	4a22      	ldr	r2, [pc, #136]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x544>)
 80020c4:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 80020c6:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80020c8:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80020cc:	430b      	orrs	r3, r1
 80020ce:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80020d0:	6823      	ldr	r3, [r4, #0]
 80020d2:	079b      	lsls	r3, r3, #30
 80020d4:	d522      	bpl.n	800211c <HAL_RCCEx_PeriphCLKConfig+0x514>
    switch(PeriphClkInit->Usart234578ClockSelection)
 80020d6:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80020d8:	2b05      	cmp	r3, #5
 80020da:	d831      	bhi.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x538>
 80020dc:	e8df f003 	tbb	[pc, r3]
 80020e0:	162a1116 	.word	0x162a1116
 80020e4:	1616      	.short	0x1616
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80020e6:	2101      	movs	r1, #1
 80020e8:	1d20      	adds	r0, r4, #4
 80020ea:	f7ff fc9d 	bl	8001a28 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80020ee:	4605      	mov	r5, r0
      break;
 80020f0:	e7e6      	b.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80020f2:	2101      	movs	r1, #1
 80020f4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80020f8:	f7ff fd0e 	bl	8001b18 <RCCEx_PLL3_Config>
 80020fc:	e7f7      	b.n	80020ee <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80020fe:	462e      	mov	r6, r5
 8002100:	e7e6      	b.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002102:	2101      	movs	r1, #1
 8002104:	1d20      	adds	r0, r4, #4
 8002106:	f7ff fc8f 	bl	8001a28 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800210a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800210c:	b9dd      	cbnz	r5, 8002146 <HAL_RCCEx_PeriphCLKConfig+0x53e>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800210e:	4a0f      	ldr	r2, [pc, #60]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x544>)
 8002110:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8002112:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002114:	f023 0307 	bic.w	r3, r3, #7
 8002118:	430b      	orrs	r3, r1
 800211a:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800211c:	6823      	ldr	r3, [r4, #0]
 800211e:	075f      	lsls	r7, r3, #29
 8002120:	d528      	bpl.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8002122:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002126:	2b05      	cmp	r3, #5
 8002128:	d83a      	bhi.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x598>
 800212a:	e8df f003 	tbb	[pc, r3]
 800212e:	151a      	.short	0x151a
 8002130:	1a1a1a33 	.word	0x1a1a1a33
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002134:	2101      	movs	r1, #1
 8002136:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800213a:	f7ff fced 	bl	8001b18 <RCCEx_PLL3_Config>
 800213e:	e7e4      	b.n	800210a <HAL_RCCEx_PeriphCLKConfig+0x502>
      ret = HAL_ERROR;
 8002140:	2601      	movs	r6, #1
 8002142:	4635      	mov	r5, r6
 8002144:	e7ea      	b.n	800211c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002146:	462e      	mov	r6, r5
 8002148:	e7e8      	b.n	800211c <HAL_RCCEx_PeriphCLKConfig+0x514>
 800214a:	bf00      	nop
 800214c:	58024400 	.word	0x58024400
 8002150:	58024800 	.word	0x58024800
 8002154:	00ffffcf 	.word	0x00ffffcf
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002158:	2101      	movs	r1, #1
 800215a:	1d20      	adds	r0, r4, #4
 800215c:	f7ff fc64 	bl	8001a28 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002160:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8002162:	bb05      	cbnz	r5, 80021a6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002164:	4a98      	ldr	r2, [pc, #608]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8002166:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 800216a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800216c:	f023 0307 	bic.w	r3, r3, #7
 8002170:	430b      	orrs	r3, r1
 8002172:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002174:	6823      	ldr	r3, [r4, #0]
 8002176:	0698      	lsls	r0, r3, #26
 8002178:	d529      	bpl.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0x5c6>
    switch(PeriphClkInit->Lptim1ClockSelection)
 800217a:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800217e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002182:	d03a      	beq.n	80021fa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8002184:	d811      	bhi.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8002186:	b1cb      	cbz	r3, 80021bc <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8002188:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800218c:	d02f      	beq.n	80021ee <HAL_RCCEx_PeriphCLKConfig+0x5e6>
      ret = HAL_ERROR;
 800218e:	2601      	movs	r6, #1
 8002190:	4635      	mov	r5, r6
 8002192:	e01c      	b.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0x5c6>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002194:	2101      	movs	r1, #1
 8002196:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800219a:	f7ff fcbd 	bl	8001b18 <RCCEx_PLL3_Config>
 800219e:	e7df      	b.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x558>
      ret = HAL_ERROR;
 80021a0:	2601      	movs	r6, #1
 80021a2:	4635      	mov	r5, r6
 80021a4:	e7e6      	b.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x56c>
 80021a6:	462e      	mov	r6, r5
 80021a8:	e7e4      	b.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    switch(PeriphClkInit->Lptim1ClockSelection)
 80021aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021ae:	d005      	beq.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 80021b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80021b4:	d002      	beq.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 80021b6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80021ba:	d1e8      	bne.n	800218e <HAL_RCCEx_PeriphCLKConfig+0x586>
    if(ret == HAL_OK)
 80021bc:	bb1d      	cbnz	r5, 8002206 <HAL_RCCEx_PeriphCLKConfig+0x5fe>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80021be:	4a82      	ldr	r2, [pc, #520]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80021c0:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 80021c4:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80021c6:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 80021ca:	430b      	orrs	r3, r1
 80021cc:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80021ce:	6823      	ldr	r3, [r4, #0]
 80021d0:	0659      	lsls	r1, r3, #25
 80021d2:	d52c      	bpl.n	800222e <HAL_RCCEx_PeriphCLKConfig+0x626>
    switch(PeriphClkInit->Lptim2ClockSelection)
 80021d4:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80021d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80021dc:	d03f      	beq.n	800225e <HAL_RCCEx_PeriphCLKConfig+0x656>
 80021de:	d814      	bhi.n	800220a <HAL_RCCEx_PeriphCLKConfig+0x602>
 80021e0:	b1e3      	cbz	r3, 800221c <HAL_RCCEx_PeriphCLKConfig+0x614>
 80021e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021e6:	d034      	beq.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0x64a>
      ret = HAL_ERROR;
 80021e8:	2601      	movs	r6, #1
 80021ea:	4635      	mov	r5, r6
 80021ec:	e01f      	b.n	800222e <HAL_RCCEx_PeriphCLKConfig+0x626>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80021ee:	2100      	movs	r1, #0
 80021f0:	1d20      	adds	r0, r4, #4
 80021f2:	f7ff fc19 	bl	8001a28 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80021f6:	4605      	mov	r5, r0
      break;
 80021f8:	e7e0      	b.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x5b4>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80021fa:	2102      	movs	r1, #2
 80021fc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002200:	f7ff fc8a 	bl	8001b18 <RCCEx_PLL3_Config>
 8002204:	e7f7      	b.n	80021f6 <HAL_RCCEx_PeriphCLKConfig+0x5ee>
 8002206:	462e      	mov	r6, r5
 8002208:	e7e1      	b.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0x5c6>
    switch(PeriphClkInit->Lptim2ClockSelection)
 800220a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800220e:	d005      	beq.n	800221c <HAL_RCCEx_PeriphCLKConfig+0x614>
 8002210:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002214:	d002      	beq.n	800221c <HAL_RCCEx_PeriphCLKConfig+0x614>
 8002216:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800221a:	d1e5      	bne.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
    if(ret == HAL_OK)
 800221c:	bb2d      	cbnz	r5, 800226a <HAL_RCCEx_PeriphCLKConfig+0x662>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800221e:	4a6a      	ldr	r2, [pc, #424]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8002220:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 8002224:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002226:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800222a:	430b      	orrs	r3, r1
 800222c:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800222e:	6823      	ldr	r3, [r4, #0]
 8002230:	061a      	lsls	r2, r3, #24
 8002232:	d530      	bpl.n	8002296 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8002234:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8002238:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800223c:	f000 80a4 	beq.w	8002388 <HAL_RCCEx_PeriphCLKConfig+0x780>
 8002240:	d815      	bhi.n	800226e <HAL_RCCEx_PeriphCLKConfig+0x666>
 8002242:	b1eb      	cbz	r3, 8002280 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8002244:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002248:	f000 8098 	beq.w	800237c <HAL_RCCEx_PeriphCLKConfig+0x774>
      ret = HAL_ERROR;
 800224c:	2601      	movs	r6, #1
 800224e:	4635      	mov	r5, r6
 8002250:	e021      	b.n	8002296 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002252:	2100      	movs	r1, #0
 8002254:	1d20      	adds	r0, r4, #4
 8002256:	f7ff fbe7 	bl	8001a28 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800225a:	4605      	mov	r5, r0
      break;
 800225c:	e7de      	b.n	800221c <HAL_RCCEx_PeriphCLKConfig+0x614>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800225e:	2102      	movs	r1, #2
 8002260:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002264:	f7ff fc58 	bl	8001b18 <RCCEx_PLL3_Config>
 8002268:	e7f7      	b.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x652>
 800226a:	462e      	mov	r6, r5
 800226c:	e7df      	b.n	800222e <HAL_RCCEx_PeriphCLKConfig+0x626>
    switch(PeriphClkInit->Lptim345ClockSelection)
 800226e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002272:	d005      	beq.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8002274:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002278:	d002      	beq.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800227a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800227e:	d1e5      	bne.n	800224c <HAL_RCCEx_PeriphCLKConfig+0x644>
    if(ret == HAL_OK)
 8002280:	2d00      	cmp	r5, #0
 8002282:	f040 8087 	bne.w	8002394 <HAL_RCCEx_PeriphCLKConfig+0x78c>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8002286:	4a50      	ldr	r2, [pc, #320]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8002288:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 800228c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800228e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002292:	430b      	orrs	r3, r1
 8002294:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8002296:	6823      	ldr	r3, [r4, #0]
 8002298:	071b      	lsls	r3, r3, #28
 800229a:	d514      	bpl.n	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x6be>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800229c:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 80022a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022a4:	d107      	bne.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x6ae>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80022a6:	2102      	movs	r1, #2
 80022a8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80022ac:	f7ff fc34 	bl	8001b18 <RCCEx_PLL3_Config>
          status = HAL_ERROR;
 80022b0:	2800      	cmp	r0, #0
 80022b2:	bf18      	it	ne
 80022b4:	2601      	movne	r6, #1
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80022b6:	4a44      	ldr	r2, [pc, #272]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80022b8:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 80022bc:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80022be:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80022c2:	430b      	orrs	r3, r1
 80022c4:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80022c6:	6823      	ldr	r3, [r4, #0]
 80022c8:	06df      	lsls	r7, r3, #27
 80022ca:	d514      	bpl.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80022cc:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80022d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022d4:	d107      	bne.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80022d6:	2102      	movs	r1, #2
 80022d8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80022dc:	f7ff fc1c 	bl	8001b18 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 80022e0:	2800      	cmp	r0, #0
 80022e2:	bf18      	it	ne
 80022e4:	2601      	movne	r6, #1
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80022e6:	4a38      	ldr	r2, [pc, #224]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80022e8:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 80022ec:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80022ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022f2:	430b      	orrs	r3, r1
 80022f4:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80022f6:	6823      	ldr	r3, [r4, #0]
 80022f8:	0318      	lsls	r0, r3, #12
 80022fa:	d517      	bpl.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x724>
    switch(PeriphClkInit->AdcClockSelection)
 80022fc:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 8002300:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8002304:	d048      	beq.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x790>
 8002306:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 800230a:	d005      	beq.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x710>
 800230c:	2900      	cmp	r1, #0
 800230e:	d149      	bne.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002310:	1d20      	adds	r0, r4, #4
 8002312:	f7ff fb89 	bl	8001a28 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002316:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8002318:	2d00      	cmp	r5, #0
 800231a:	d146      	bne.n	80023aa <HAL_RCCEx_PeriphCLKConfig+0x7a2>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800231c:	4a2a      	ldr	r2, [pc, #168]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 800231e:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 8002322:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002324:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002328:	430b      	orrs	r3, r1
 800232a:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800232c:	6823      	ldr	r3, [r4, #0]
 800232e:	0359      	lsls	r1, r3, #13
 8002330:	d518      	bpl.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x75c>
    switch(PeriphClkInit->UsbClockSelection)
 8002332:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8002336:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800233a:	d038      	beq.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 800233c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002340:	d007      	beq.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0x74a>
 8002342:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002346:	d139      	bne.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x7b4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002348:	4a1f      	ldr	r2, [pc, #124]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 800234a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800234c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002350:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8002352:	bbb5      	cbnz	r5, 80023c2 <HAL_RCCEx_PeriphCLKConfig+0x7ba>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002354:	4a1c      	ldr	r2, [pc, #112]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8002356:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 800235a:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800235c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002360:	430b      	orrs	r3, r1
 8002362:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8002364:	6823      	ldr	r3, [r4, #0]
 8002366:	03da      	lsls	r2, r3, #15
 8002368:	d53e      	bpl.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    switch(PeriphClkInit->SdmmcClockSelection)
 800236a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800236c:	b373      	cbz	r3, 80023cc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
 800236e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002372:	f000 8082 	beq.w	800247a <HAL_RCCEx_PeriphCLKConfig+0x872>
      ret = HAL_ERROR;
 8002376:	2601      	movs	r6, #1
 8002378:	4635      	mov	r5, r6
 800237a:	e035      	b.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800237c:	2100      	movs	r1, #0
 800237e:	1d20      	adds	r0, r4, #4
 8002380:	f7ff fb52 	bl	8001a28 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002384:	4605      	mov	r5, r0
      break;
 8002386:	e77b      	b.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x678>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002388:	2102      	movs	r1, #2
 800238a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800238e:	f7ff fbc3 	bl	8001b18 <RCCEx_PLL3_Config>
 8002392:	e7f7      	b.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0x77c>
 8002394:	462e      	mov	r6, r5
 8002396:	e77e      	b.n	8002296 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002398:	2102      	movs	r1, #2
 800239a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800239e:	f7ff fbbb 	bl	8001b18 <RCCEx_PLL3_Config>
 80023a2:	e7b8      	b.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x70e>
      ret = HAL_ERROR;
 80023a4:	2601      	movs	r6, #1
 80023a6:	4635      	mov	r5, r6
 80023a8:	e7c0      	b.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x724>
 80023aa:	462e      	mov	r6, r5
 80023ac:	e7be      	b.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x724>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80023ae:	2101      	movs	r1, #1
 80023b0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80023b4:	f7ff fbb0 	bl	8001b18 <RCCEx_PLL3_Config>
 80023b8:	4605      	mov	r5, r0
      break;
 80023ba:	e7ca      	b.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0x74a>
      ret = HAL_ERROR;
 80023bc:	2601      	movs	r6, #1
 80023be:	4635      	mov	r5, r6
 80023c0:	e7d0      	b.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x75c>
 80023c2:	462e      	mov	r6, r5
 80023c4:	e7ce      	b.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x75c>
 80023c6:	bf00      	nop
 80023c8:	58024400 	.word	0x58024400
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80023cc:	4a37      	ldr	r2, [pc, #220]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 80023ce:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80023d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023d4:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80023d6:	2d00      	cmp	r5, #0
 80023d8:	d155      	bne.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0x87e>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80023da:	4a34      	ldr	r2, [pc, #208]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 80023dc:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80023de:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80023e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023e4:	430b      	orrs	r3, r1
 80023e6:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80023e8:	6823      	ldr	r3, [r4, #0]
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	d507      	bpl.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x7f6>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80023ee:	2102      	movs	r1, #2
 80023f0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80023f4:	f7ff fb90 	bl	8001b18 <RCCEx_PLL3_Config>
      status=HAL_ERROR;
 80023f8:	2800      	cmp	r0, #0
 80023fa:	bf18      	it	ne
 80023fc:	2601      	movne	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80023fe:	6823      	ldr	r3, [r4, #0]
 8002400:	039f      	lsls	r7, r3, #14
 8002402:	d50e      	bpl.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x81a>
    switch(PeriphClkInit->RngClockSelection)
 8002404:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8002406:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800240a:	d046      	beq.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x892>
 800240c:	d83d      	bhi.n	800248a <HAL_RCCEx_PeriphCLKConfig+0x882>
 800240e:	2900      	cmp	r1, #0
 8002410:	d141      	bne.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0x88e>
    if(ret == HAL_OK)
 8002412:	2d00      	cmp	r5, #0
 8002414:	d147      	bne.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002416:	4825      	ldr	r0, [pc, #148]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8002418:	6d42      	ldr	r2, [r0, #84]	; 0x54
 800241a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800241e:	430a      	orrs	r2, r1
 8002420:	6542      	str	r2, [r0, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002422:	02d8      	lsls	r0, r3, #11
 8002424:	d506      	bpl.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0x82c>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002426:	4921      	ldr	r1, [pc, #132]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8002428:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800242a:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800242c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002430:	4302      	orrs	r2, r0
 8002432:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002434:	0299      	lsls	r1, r3, #10
 8002436:	d506      	bpl.n	8002446 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002438:	491c      	ldr	r1, [pc, #112]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 800243a:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800243c:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800243e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8002442:	4302      	orrs	r2, r0
 8002444:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8002446:	005a      	lsls	r2, r3, #1
 8002448:	d509      	bpl.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x856>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800244a:	4a18      	ldr	r2, [pc, #96]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 800244c:	6911      	ldr	r1, [r2, #16]
 800244e:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8002452:	6111      	str	r1, [r2, #16]
 8002454:	6911      	ldr	r1, [r2, #16]
 8002456:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 800245a:	4301      	orrs	r1, r0
 800245c:	6111      	str	r1, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800245e:	2b00      	cmp	r3, #0
 8002460:	da06      	bge.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x868>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8002462:	4a12      	ldr	r2, [pc, #72]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8002464:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8002466:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8002468:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800246c:	430b      	orrs	r3, r1
 800246e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002470:	1c30      	adds	r0, r6, #0
 8002472:	bf18      	it	ne
 8002474:	2001      	movne	r0, #1
}
 8002476:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800247a:	2102      	movs	r1, #2
 800247c:	1d20      	adds	r0, r4, #4
 800247e:	f7ff fad3 	bl	8001a28 <RCCEx_PLL2_Config>
 8002482:	4605      	mov	r5, r0
      break;
 8002484:	e7a7      	b.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8002486:	462e      	mov	r6, r5
 8002488:	e7ae      	b.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    switch(PeriphClkInit->RngClockSelection)
 800248a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800248e:	d0c0      	beq.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8002490:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 8002494:	d0bd      	beq.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x80a>
      ret = HAL_ERROR;
 8002496:	2601      	movs	r6, #1
 8002498:	e7c3      	b.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x81a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800249a:	4804      	ldr	r0, [pc, #16]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 800249c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800249e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80024a2:	62c2      	str	r2, [r0, #44]	; 0x2c
      break;
 80024a4:	e7b5      	b.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80024a6:	462e      	mov	r6, r5
 80024a8:	e7bb      	b.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x81a>
 80024aa:	bf00      	nop
 80024ac:	58024400 	.word	0x58024400

080024b0 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 80024b0:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80024b2:	f7ff fa73 	bl	800199c <HAL_RCC_GetHCLKFreq>
 80024b6:	4b05      	ldr	r3, [pc, #20]	; (80024cc <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 80024b8:	4a05      	ldr	r2, [pc, #20]	; (80024d0 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 80024ba:	6a1b      	ldr	r3, [r3, #32]
 80024bc:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80024c0:	5cd3      	ldrb	r3, [r2, r3]
 80024c2:	f003 031f 	and.w	r3, r3, #31
}
 80024c6:	40d8      	lsrs	r0, r3
 80024c8:	bd08      	pop	{r3, pc}
 80024ca:	bf00      	nop
 80024cc:	58024400 	.word	0x58024400
 80024d0:	080053e4 	.word	0x080053e4

080024d4 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80024d4:	494e      	ldr	r1, [pc, #312]	; (8002610 <HAL_RCCEx_GetPLL2ClockFreq+0x13c>)
{
 80024d6:	b530      	push	{r4, r5, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80024d8:	6a8c      	ldr	r4, [r1, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80024da:	6a8b      	ldr	r3, [r1, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80024dc:	6acd      	ldr	r5, [r1, #44]	; 0x2c
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80024de:	f3c3 3305 	ubfx	r3, r3, #12, #6
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80024e2:	6bca      	ldr	r2, [r1, #60]	; 0x3c
  if (pll2m != 0U)
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	f000 808e 	beq.w	8002606 <HAL_RCCEx_GetPLL2ClockFreq+0x132>
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80024ea:	f3c5 1500 	ubfx	r5, r5, #4, #1
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80024ee:	f3c2 02cc 	ubfx	r2, r2, #3, #13
 80024f2:	ed9f 5a48 	vldr	s10, [pc, #288]	; 8002614 <HAL_RCCEx_GetPLL2ClockFreq+0x140>
 80024f6:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80024fa:	436a      	muls	r2, r5
 80024fc:	ee07 2a90 	vmov	s15, r2
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002500:	f004 0203 	and.w	r2, r4, #3
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8002504:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
    switch (pllsource)
 8002508:	2a01      	cmp	r2, #1
 800250a:	ee07 3a90 	vmov	s15, r3
 800250e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002512:	d002      	beq.n	800251a <HAL_RCCEx_GetPLL2ClockFreq+0x46>
 8002514:	d30f      	bcc.n	8002536 <HAL_RCCEx_GetPLL2ClockFreq+0x62>
 8002516:	2a02      	cmp	r2, #2
 8002518:	d067      	beq.n	80025ea <HAL_RCCEx_GetPLL2ClockFreq+0x116>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800251a:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 800251c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002520:	ee07 3a90 	vmov	s15, r3
 8002524:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002528:	eee6 7a05 	vfma.f32	s15, s12, s10
 800252c:	ed9f 6a3a 	vldr	s12, [pc, #232]	; 8002618 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 8002530:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8002534:	e056      	b.n	80025e4 <HAL_RCCEx_GetPLL2ClockFreq+0x110>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002536:	680b      	ldr	r3, [r1, #0]
 8002538:	069b      	lsls	r3, r3, #26
 800253a:	d546      	bpl.n	80025ca <HAL_RCCEx_GetPLL2ClockFreq+0xf6>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800253c:	680a      	ldr	r2, [r1, #0]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800253e:	6b8b      	ldr	r3, [r1, #56]	; 0x38
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002540:	f3c2 01c1 	ubfx	r1, r2, #3, #2
 8002544:	4a35      	ldr	r2, [pc, #212]	; (800261c <HAL_RCCEx_GetPLL2ClockFreq+0x148>)
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8002546:	f3c3 0308 	ubfx	r3, r3, #0, #9
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800254a:	40ca      	lsrs	r2, r1
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800254c:	ee07 2a90 	vmov	s15, r2
 8002550:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002554:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002558:	ee07 3a90 	vmov	s15, r3
 800255c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002560:	eee6 7a05 	vfma.f32	s15, s12, s10
 8002564:	ee77 7aa5 	vadd.f32	s15, s15, s11
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8002568:	4a29      	ldr	r2, [pc, #164]	; (8002610 <HAL_RCCEx_GetPLL2ClockFreq+0x13c>)
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800256a:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800256e:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8002570:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8002574:	ee07 3a10 	vmov	s14, r3
 8002578:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800257c:	ee37 7a25 	vadd.f32	s14, s14, s11
 8002580:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002584:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8002588:	edc0 6a00 	vstr	s13, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800258c:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800258e:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8002592:	ee07 3a10 	vmov	s14, r3
 8002596:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800259a:	ee37 7a25 	vadd.f32	s14, s14, s11
 800259e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80025a2:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80025a6:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80025aa:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80025ac:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80025b0:	ee07 3a10 	vmov	s14, r3
 80025b4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80025b8:	ee77 5a25 	vadd.f32	s11, s14, s11
 80025bc:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 80025c0:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80025c4:	ed80 7a02 	vstr	s14, [r0, #8]
 80025c8:	bd30      	pop	{r4, r5, pc}
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80025ca:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 80025cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025d0:	ee07 3a90 	vmov	s15, r3
 80025d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025d8:	eee6 7a05 	vfma.f32	s15, s12, s10
 80025dc:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8002620 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 80025e0:	ee77 7aa5 	vadd.f32	s15, s15, s11
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80025e4:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80025e8:	e7be      	b.n	8002568 <HAL_RCCEx_GetPLL2ClockFreq+0x94>
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80025ea:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 80025ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025f0:	ee07 3a90 	vmov	s15, r3
 80025f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025f8:	eee6 7a05 	vfma.f32	s15, s12, s10
 80025fc:	ed9f 6a09 	vldr	s12, [pc, #36]	; 8002624 <HAL_RCCEx_GetPLL2ClockFreq+0x150>
 8002600:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8002604:	e7ee      	b.n	80025e4 <HAL_RCCEx_GetPLL2ClockFreq+0x110>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8002606:	6003      	str	r3, [r0, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8002608:	6043      	str	r3, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800260a:	6083      	str	r3, [r0, #8]
 800260c:	bd30      	pop	{r4, r5, pc}
 800260e:	bf00      	nop
 8002610:	58024400 	.word	0x58024400
 8002614:	39000000 	.word	0x39000000
 8002618:	4a742400 	.word	0x4a742400
 800261c:	03d09000 	.word	0x03d09000
 8002620:	4c742400 	.word	0x4c742400
 8002624:	4af42400 	.word	0x4af42400

08002628 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002628:	494e      	ldr	r1, [pc, #312]	; (8002764 <HAL_RCCEx_GetPLL3ClockFreq+0x13c>)
{
 800262a:	b530      	push	{r4, r5, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800262c:	6a8c      	ldr	r4, [r1, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800262e:	6a8b      	ldr	r3, [r1, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8002630:	6acd      	ldr	r5, [r1, #44]	; 0x2c
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8002632:	f3c3 5305 	ubfx	r3, r3, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8002636:	6c4a      	ldr	r2, [r1, #68]	; 0x44
  if (pll3m != 0U)
 8002638:	2b00      	cmp	r3, #0
 800263a:	f000 808e 	beq.w	800275a <HAL_RCCEx_GetPLL3ClockFreq+0x132>
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800263e:	f3c5 2500 	ubfx	r5, r5, #8, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8002642:	f3c2 02cc 	ubfx	r2, r2, #3, #13
 8002646:	ed9f 5a48 	vldr	s10, [pc, #288]	; 8002768 <HAL_RCCEx_GetPLL3ClockFreq+0x140>
 800264a:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800264e:	436a      	muls	r2, r5
 8002650:	ee07 2a90 	vmov	s15, r2
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002654:	f004 0203 	and.w	r2, r4, #3
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8002658:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
    switch (pllsource)
 800265c:	2a01      	cmp	r2, #1
 800265e:	ee07 3a90 	vmov	s15, r3
 8002662:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002666:	d002      	beq.n	800266e <HAL_RCCEx_GetPLL3ClockFreq+0x46>
 8002668:	d30f      	bcc.n	800268a <HAL_RCCEx_GetPLL3ClockFreq+0x62>
 800266a:	2a02      	cmp	r2, #2
 800266c:	d067      	beq.n	800273e <HAL_RCCEx_GetPLL3ClockFreq+0x116>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800266e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002670:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002674:	ee07 3a90 	vmov	s15, r3
 8002678:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800267c:	eee6 7a05 	vfma.f32	s15, s12, s10
 8002680:	ed9f 6a3a 	vldr	s12, [pc, #232]	; 800276c <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 8002684:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8002688:	e056      	b.n	8002738 <HAL_RCCEx_GetPLL3ClockFreq+0x110>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800268a:	680b      	ldr	r3, [r1, #0]
 800268c:	069b      	lsls	r3, r3, #26
 800268e:	d546      	bpl.n	800271e <HAL_RCCEx_GetPLL3ClockFreq+0xf6>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002690:	680a      	ldr	r2, [r1, #0]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8002692:	6c0b      	ldr	r3, [r1, #64]	; 0x40
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002694:	f3c2 01c1 	ubfx	r1, r2, #3, #2
 8002698:	4a35      	ldr	r2, [pc, #212]	; (8002770 <HAL_RCCEx_GetPLL3ClockFreq+0x148>)
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800269a:	f3c3 0308 	ubfx	r3, r3, #0, #9
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800269e:	40ca      	lsrs	r2, r1
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80026a0:	ee07 2a90 	vmov	s15, r2
 80026a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026a8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80026ac:	ee07 3a90 	vmov	s15, r3
 80026b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026b4:	eee6 7a05 	vfma.f32	s15, s12, s10
 80026b8:	ee77 7aa5 	vadd.f32	s15, s15, s11
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80026bc:	4a29      	ldr	r2, [pc, #164]	; (8002764 <HAL_RCCEx_GetPLL3ClockFreq+0x13c>)
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80026be:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80026c2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80026c4:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80026c8:	ee07 3a10 	vmov	s14, r3
 80026cc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80026d0:	ee37 7a25 	vadd.f32	s14, s14, s11
 80026d4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80026d8:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80026dc:	edc0 6a00 	vstr	s13, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80026e0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80026e2:	f3c3 4306 	ubfx	r3, r3, #16, #7
 80026e6:	ee07 3a10 	vmov	s14, r3
 80026ea:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80026ee:	ee37 7a25 	vadd.f32	s14, s14, s11
 80026f2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80026f6:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80026fa:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80026fe:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002700:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8002704:	ee07 3a10 	vmov	s14, r3
 8002708:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800270c:	ee77 5a25 	vadd.f32	s11, s14, s11
 8002710:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 8002714:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8002718:	ed80 7a02 	vstr	s14, [r0, #8]
 800271c:	bd30      	pop	{r4, r5, pc}
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800271e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002720:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002724:	ee07 3a90 	vmov	s15, r3
 8002728:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800272c:	eee6 7a05 	vfma.f32	s15, s12, s10
 8002730:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8002774 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 8002734:	ee77 7aa5 	vadd.f32	s15, s15, s11
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8002738:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800273c:	e7be      	b.n	80026bc <HAL_RCCEx_GetPLL3ClockFreq+0x94>
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800273e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002740:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002744:	ee07 3a90 	vmov	s15, r3
 8002748:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800274c:	eee6 7a05 	vfma.f32	s15, s12, s10
 8002750:	ed9f 6a09 	vldr	s12, [pc, #36]	; 8002778 <HAL_RCCEx_GetPLL3ClockFreq+0x150>
 8002754:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8002758:	e7ee      	b.n	8002738 <HAL_RCCEx_GetPLL3ClockFreq+0x110>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800275a:	6003      	str	r3, [r0, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800275c:	6043      	str	r3, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800275e:	6083      	str	r3, [r0, #8]
 8002760:	bd30      	pop	{r4, r5, pc}
 8002762:	bf00      	nop
 8002764:	58024400 	.word	0x58024400
 8002768:	39000000 	.word	0x39000000
 800276c:	4a742400 	.word	0x4a742400
 8002770:	03d09000 	.word	0x03d09000
 8002774:	4c742400 	.word	0x4c742400
 8002778:	4af42400 	.word	0x4af42400

0800277c <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800277c:	6803      	ldr	r3, [r0, #0]
 800277e:	68da      	ldr	r2, [r3, #12]
 8002780:	f042 0201 	orr.w	r2, r2, #1
 8002784:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002786:	4a07      	ldr	r2, [pc, #28]	; (80027a4 <HAL_TIM_Base_Start_IT+0x28>)
 8002788:	6899      	ldr	r1, [r3, #8]
 800278a:	400a      	ands	r2, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800278c:	2a06      	cmp	r2, #6
 800278e:	d006      	beq.n	800279e <HAL_TIM_Base_Start_IT+0x22>
 8002790:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8002794:	d003      	beq.n	800279e <HAL_TIM_Base_Start_IT+0x22>
  {
    __HAL_TIM_ENABLE(htim);
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	f042 0201 	orr.w	r2, r2, #1
 800279c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 800279e:	2000      	movs	r0, #0
 80027a0:	4770      	bx	lr
 80027a2:	bf00      	nop
 80027a4:	00010007 	.word	0x00010007

080027a8 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027a8:	4a30      	ldr	r2, [pc, #192]	; (800286c <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 80027aa:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027ac:	4290      	cmp	r0, r2
 80027ae:	d012      	beq.n	80027d6 <TIM_Base_SetConfig+0x2e>
 80027b0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80027b4:	d00f      	beq.n	80027d6 <TIM_Base_SetConfig+0x2e>
 80027b6:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80027ba:	4290      	cmp	r0, r2
 80027bc:	d00b      	beq.n	80027d6 <TIM_Base_SetConfig+0x2e>
 80027be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80027c2:	4290      	cmp	r0, r2
 80027c4:	d007      	beq.n	80027d6 <TIM_Base_SetConfig+0x2e>
 80027c6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80027ca:	4290      	cmp	r0, r2
 80027cc:	d003      	beq.n	80027d6 <TIM_Base_SetConfig+0x2e>
 80027ce:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80027d2:	4290      	cmp	r0, r2
 80027d4:	d119      	bne.n	800280a <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80027d6:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80027dc:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027de:	4a23      	ldr	r2, [pc, #140]	; (800286c <TIM_Base_SetConfig+0xc4>)
 80027e0:	4290      	cmp	r0, r2
 80027e2:	d01d      	beq.n	8002820 <TIM_Base_SetConfig+0x78>
 80027e4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80027e8:	d01a      	beq.n	8002820 <TIM_Base_SetConfig+0x78>
 80027ea:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80027ee:	4290      	cmp	r0, r2
 80027f0:	d016      	beq.n	8002820 <TIM_Base_SetConfig+0x78>
 80027f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80027f6:	4290      	cmp	r0, r2
 80027f8:	d012      	beq.n	8002820 <TIM_Base_SetConfig+0x78>
 80027fa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80027fe:	4290      	cmp	r0, r2
 8002800:	d00e      	beq.n	8002820 <TIM_Base_SetConfig+0x78>
 8002802:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002806:	4290      	cmp	r0, r2
 8002808:	d00a      	beq.n	8002820 <TIM_Base_SetConfig+0x78>
 800280a:	4a19      	ldr	r2, [pc, #100]	; (8002870 <TIM_Base_SetConfig+0xc8>)
 800280c:	4290      	cmp	r0, r2
 800280e:	d007      	beq.n	8002820 <TIM_Base_SetConfig+0x78>
 8002810:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002814:	4290      	cmp	r0, r2
 8002816:	d003      	beq.n	8002820 <TIM_Base_SetConfig+0x78>
 8002818:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800281c:	4290      	cmp	r0, r2
 800281e:	d103      	bne.n	8002828 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002820:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002824:	68ca      	ldr	r2, [r1, #12]
 8002826:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002828:	694a      	ldr	r2, [r1, #20]
 800282a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800282e:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8002830:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002832:	688b      	ldr	r3, [r1, #8]
 8002834:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002836:	680b      	ldr	r3, [r1, #0]
 8002838:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800283a:	4b0c      	ldr	r3, [pc, #48]	; (800286c <TIM_Base_SetConfig+0xc4>)
 800283c:	4298      	cmp	r0, r3
 800283e:	d00f      	beq.n	8002860 <TIM_Base_SetConfig+0xb8>
 8002840:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002844:	4298      	cmp	r0, r3
 8002846:	d00b      	beq.n	8002860 <TIM_Base_SetConfig+0xb8>
 8002848:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800284c:	4298      	cmp	r0, r3
 800284e:	d007      	beq.n	8002860 <TIM_Base_SetConfig+0xb8>
 8002850:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002854:	4298      	cmp	r0, r3
 8002856:	d003      	beq.n	8002860 <TIM_Base_SetConfig+0xb8>
 8002858:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800285c:	4298      	cmp	r0, r3
 800285e:	d101      	bne.n	8002864 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002860:	690b      	ldr	r3, [r1, #16]
 8002862:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002864:	2301      	movs	r3, #1
 8002866:	6143      	str	r3, [r0, #20]
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop
 800286c:	40010000 	.word	0x40010000
 8002870:	40014000 	.word	0x40014000

08002874 <HAL_TIM_Base_Init>:
{
 8002874:	b510      	push	{r4, lr}
  if (htim == NULL)
 8002876:	4604      	mov	r4, r0
 8002878:	b1a0      	cbz	r0, 80028a4 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 800287a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800287e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002882:	b91b      	cbnz	r3, 800288c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002884:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002888:	f002 f804 	bl	8004894 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800288c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800288e:	6820      	ldr	r0, [r4, #0]
 8002890:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 8002892:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002896:	f7ff ff87 	bl	80027a8 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800289a:	2301      	movs	r3, #1
  return HAL_OK;
 800289c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800289e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80028a2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80028a4:	2001      	movs	r0, #1
}
 80028a6:	bd10      	pop	{r4, pc}

080028a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80028a8:	b510      	push	{r4, lr}

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80028aa:	430a      	orrs	r2, r1
  tmpsmcr = TIMx->SMCR;
 80028ac:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80028ae:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028b2:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80028b6:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028b8:	6083      	str	r3, [r0, #8]
 80028ba:	bd10      	pop	{r4, pc}

080028bc <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80028bc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80028c0:	2b01      	cmp	r3, #1
{
 80028c2:	b570      	push	{r4, r5, r6, lr}
 80028c4:	4604      	mov	r4, r0
 80028c6:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 80028ca:	d034      	beq.n	8002936 <HAL_TIM_ConfigClockSource+0x7a>
  htim->State = HAL_TIM_STATE_BUSY;
 80028cc:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 80028d0:	2301      	movs	r3, #1
  tmpsmcr = htim->Instance->SMCR;
 80028d2:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 80028d4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 80028d8:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028da:	4b4d      	ldr	r3, [pc, #308]	; (8002a10 <HAL_TIM_ConfigClockSource+0x154>)
 80028dc:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 80028de:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 80028e0:	680b      	ldr	r3, [r1, #0]
 80028e2:	2b60      	cmp	r3, #96	; 0x60
 80028e4:	d060      	beq.n	80029a8 <HAL_TIM_ConfigClockSource+0xec>
 80028e6:	d814      	bhi.n	8002912 <HAL_TIM_ConfigClockSource+0x56>
 80028e8:	2b20      	cmp	r3, #32
 80028ea:	d003      	beq.n	80028f4 <HAL_TIM_ConfigClockSource+0x38>
 80028ec:	d80b      	bhi.n	8002906 <HAL_TIM_ConfigClockSource+0x4a>
 80028ee:	b10b      	cbz	r3, 80028f4 <HAL_TIM_ConfigClockSource+0x38>
 80028f0:	2b10      	cmp	r3, #16
 80028f2:	d11a      	bne.n	800292a <HAL_TIM_ConfigClockSource+0x6e>
  tmpsmcr = TIMx->SMCR;
 80028f4:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80028f6:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 80028fa:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80028fe:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002902:	4313      	orrs	r3, r2
 8002904:	e04e      	b.n	80029a4 <HAL_TIM_ConfigClockSource+0xe8>
  switch (sClockSourceConfig->ClockSource)
 8002906:	2b40      	cmp	r3, #64	; 0x40
 8002908:	d068      	beq.n	80029dc <HAL_TIM_ConfigClockSource+0x120>
 800290a:	2b50      	cmp	r3, #80	; 0x50
 800290c:	d032      	beq.n	8002974 <HAL_TIM_ConfigClockSource+0xb8>
 800290e:	2b30      	cmp	r3, #48	; 0x30
 8002910:	e7ef      	b.n	80028f2 <HAL_TIM_ConfigClockSource+0x36>
 8002912:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8002916:	d0ed      	beq.n	80028f4 <HAL_TIM_ConfigClockSource+0x38>
 8002918:	d80e      	bhi.n	8002938 <HAL_TIM_ConfigClockSource+0x7c>
 800291a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800291e:	d01f      	beq.n	8002960 <HAL_TIM_ConfigClockSource+0xa4>
 8002920:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002924:	d0e6      	beq.n	80028f4 <HAL_TIM_ConfigClockSource+0x38>
 8002926:	2b70      	cmp	r3, #112	; 0x70
 8002928:	d00f      	beq.n	800294a <HAL_TIM_ConfigClockSource+0x8e>
  htim->State = HAL_TIM_STATE_READY;
 800292a:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800292c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800292e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002932:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8002936:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8002938:	4a36      	ldr	r2, [pc, #216]	; (8002a14 <HAL_TIM_ConfigClockSource+0x158>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d0da      	beq.n	80028f4 <HAL_TIM_ConfigClockSource+0x38>
 800293e:	3210      	adds	r2, #16
 8002940:	4293      	cmp	r3, r2
 8002942:	d0d7      	beq.n	80028f4 <HAL_TIM_ConfigClockSource+0x38>
 8002944:	3a20      	subs	r2, #32
 8002946:	4293      	cmp	r3, r2
 8002948:	e7d3      	b.n	80028f2 <HAL_TIM_ConfigClockSource+0x36>
      TIM_ETR_SetConfig(htim->Instance,
 800294a:	68cb      	ldr	r3, [r1, #12]
 800294c:	684a      	ldr	r2, [r1, #4]
 800294e:	6889      	ldr	r1, [r1, #8]
 8002950:	f7ff ffaa 	bl	80028a8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002954:	6822      	ldr	r2, [r4, #0]
 8002956:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002958:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800295c:	6093      	str	r3, [r2, #8]
      break;
 800295e:	e7e4      	b.n	800292a <HAL_TIM_ConfigClockSource+0x6e>
      TIM_ETR_SetConfig(htim->Instance,
 8002960:	68cb      	ldr	r3, [r1, #12]
 8002962:	684a      	ldr	r2, [r1, #4]
 8002964:	6889      	ldr	r1, [r1, #8]
 8002966:	f7ff ff9f 	bl	80028a8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800296a:	6822      	ldr	r2, [r4, #0]
 800296c:	6893      	ldr	r3, [r2, #8]
 800296e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002972:	e7f3      	b.n	800295c <HAL_TIM_ConfigClockSource+0xa0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002974:	684a      	ldr	r2, [r1, #4]
 8002976:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8002978:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800297a:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800297c:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002980:	f025 0501 	bic.w	r5, r5, #1
  tmpccer |= TIM_ICPolarity;
 8002984:	430a      	orrs	r2, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002986:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002988:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800298a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800298e:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8002992:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8002994:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8002996:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002998:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800299c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80029a0:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 80029a4:	6083      	str	r3, [r0, #8]
 80029a6:	e7c0      	b.n	800292a <HAL_TIM_ConfigClockSource+0x6e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80029a8:	684d      	ldr	r5, [r1, #4]
 80029aa:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029ac:	6a01      	ldr	r1, [r0, #32]
 80029ae:	f021 0110 	bic.w	r1, r1, #16
 80029b2:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029b4:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 80029b6:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80029b8:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80029bc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80029c0:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 80029c4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 80029c8:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80029ca:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80029cc:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80029ce:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80029d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80029d6:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 80029da:	e7e3      	b.n	80029a4 <HAL_TIM_ConfigClockSource+0xe8>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80029dc:	684a      	ldr	r2, [r1, #4]
 80029de:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80029e0:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029e2:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80029e4:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029e8:	f025 0501 	bic.w	r5, r5, #1
  tmpccer |= TIM_ICPolarity;
 80029ec:	430a      	orrs	r2, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029ee:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029f0:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80029f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80029f6:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80029fa:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80029fc:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80029fe:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a00:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002a04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a08:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 8002a0c:	e7ca      	b.n	80029a4 <HAL_TIM_ConfigClockSource+0xe8>
 8002a0e:	bf00      	nop
 8002a10:	ffce0088 	.word	0xffce0088
 8002a14:	00100030 	.word	0x00100030

08002a18 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a18:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	f04f 0302 	mov.w	r3, #2
{
 8002a22:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8002a24:	d03a      	beq.n	8002a9c <HAL_TIMEx_MasterConfigSynchronization+0x84>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a26:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_LOCK(htim);
 8002a2a:	2201      	movs	r2, #1

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a2c:	6803      	ldr	r3, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002a2e:	4d1c      	ldr	r5, [pc, #112]	; (8002aa0 <HAL_TIMEx_MasterConfigSynchronization+0x88>)
  __HAL_LOCK(htim);
 8002a30:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002a34:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 8002a36:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8002a38:	689c      	ldr	r4, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002a3a:	d002      	beq.n	8002a42 <HAL_TIMEx_MasterConfigSynchronization+0x2a>
 8002a3c:	4e19      	ldr	r6, [pc, #100]	; (8002aa4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>)
 8002a3e:	42b3      	cmp	r3, r6
 8002a40:	d103      	bne.n	8002a4a <HAL_TIMEx_MasterConfigSynchronization+0x32>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002a42:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002a46:	684e      	ldr	r6, [r1, #4]
 8002a48:	4332      	orrs	r2, r6
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a4a:	680e      	ldr	r6, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a4c:	f022 0270 	bic.w	r2, r2, #112	; 0x70

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a50:	42ab      	cmp	r3, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a52:	ea42 0206 	orr.w	r2, r2, r6
  htim->Instance->CR2 = tmpcr2;
 8002a56:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a58:	d015      	beq.n	8002a86 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8002a5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a5e:	d012      	beq.n	8002a86 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8002a60:	4a11      	ldr	r2, [pc, #68]	; (8002aa8 <HAL_TIMEx_MasterConfigSynchronization+0x90>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d00f      	beq.n	8002a86 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8002a66:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d00b      	beq.n	8002a86 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8002a6e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d007      	beq.n	8002a86 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8002a76:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d003      	beq.n	8002a86 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8002a7e:	f5a2 426c 	sub.w	r2, r2, #60416	; 0xec00
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d104      	bne.n	8002a90 <HAL_TIMEx_MasterConfigSynchronization+0x78>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a86:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a88:	f024 0280 	bic.w	r2, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a8c:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a8e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a90:	2301      	movs	r3, #1
 8002a92:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a96:	2300      	movs	r3, #0
 8002a98:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8002a9c:	4618      	mov	r0, r3

  return HAL_OK;
}
 8002a9e:	bd70      	pop	{r4, r5, r6, pc}
 8002aa0:	40010000 	.word	0x40010000
 8002aa4:	40010400 	.word	0x40010400
 8002aa8:	40000400 	.word	0x40000400
 8002aac:	00000000 	.word	0x00000000

08002ab0 <UART_SetConfig>:
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8002ab0:	6803      	ldr	r3, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ab2:	69c2      	ldr	r2, [r0, #28]
 8002ab4:	6881      	ldr	r1, [r0, #8]
{
 8002ab6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002aba:	4605      	mov	r5, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002abc:	6900      	ldr	r0, [r0, #16]
  tmpreg |= (uint32_t)huart->FifoMode;
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002abe:	681c      	ldr	r4, [r3, #0]
{
 8002ac0:	b087      	sub	sp, #28
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ac2:	4301      	orrs	r1, r0
 8002ac4:	6968      	ldr	r0, [r5, #20]
 8002ac6:	4301      	orrs	r1, r0
  tmpreg |= (uint32_t)huart->FifoMode;
 8002ac8:	6e68      	ldr	r0, [r5, #100]	; 0x64
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002aca:	4311      	orrs	r1, r2
  tmpreg |= (uint32_t)huart->FifoMode;
 8002acc:	4301      	orrs	r1, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002ace:	48bb      	ldr	r0, [pc, #748]	; (8002dbc <UART_SetConfig+0x30c>)
 8002ad0:	4020      	ands	r0, r4
 8002ad2:	4301      	orrs	r1, r0

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ad4:	68e8      	ldr	r0, [r5, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002ad6:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ad8:	6859      	ldr	r1, [r3, #4]
 8002ada:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8002ade:	4301      	orrs	r1, r0
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002ae0:	69a8      	ldr	r0, [r5, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ae2:	6059      	str	r1, [r3, #4]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002ae4:	49b6      	ldr	r1, [pc, #728]	; (8002dc0 <UART_SetConfig+0x310>)
 8002ae6:	428b      	cmp	r3, r1
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002ae8:	bf1c      	itt	ne
 8002aea:	6a29      	ldrne	r1, [r5, #32]
 8002aec:	4308      	orrne	r0, r1
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002aee:	6899      	ldr	r1, [r3, #8]
 8002af0:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 8002af4:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8002af8:	4301      	orrs	r1, r0

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002afa:	6a68      	ldr	r0, [r5, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002afc:	6099      	str	r1, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002afe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b00:	f021 010f 	bic.w	r1, r1, #15
 8002b04:	4301      	orrs	r1, r0
 8002b06:	62d9      	str	r1, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b08:	49ae      	ldr	r1, [pc, #696]	; (8002dc4 <UART_SetConfig+0x314>)
 8002b0a:	428b      	cmp	r3, r1
 8002b0c:	d11d      	bne.n	8002b4a <UART_SetConfig+0x9a>
 8002b0e:	4bae      	ldr	r3, [pc, #696]	; (8002dc8 <UART_SetConfig+0x318>)
 8002b10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b12:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b16:	2b28      	cmp	r3, #40	; 0x28
 8002b18:	f200 875e 	bhi.w	80039d8 <UART_SetConfig+0xf28>
 8002b1c:	49ab      	ldr	r1, [pc, #684]	; (8002dcc <UART_SetConfig+0x31c>)
 8002b1e:	5ccc      	ldrb	r4, [r1, r3]
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b20:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002b24:	f040 875f 	bne.w	80039e6 <UART_SetConfig+0xf36>
  {
    switch (clocksource)
 8002b28:	2c08      	cmp	r4, #8
 8002b2a:	f000 84de 	beq.w	80034ea <UART_SetConfig+0xa3a>
 8002b2e:	f200 83ba 	bhi.w	80032a6 <UART_SetConfig+0x7f6>
 8002b32:	2c01      	cmp	r4, #1
 8002b34:	f000 8432 	beq.w	800339c <UART_SetConfig+0x8ec>
 8002b38:	f0c0 83f4 	bcc.w	8003324 <UART_SetConfig+0x874>
 8002b3c:	2c04      	cmp	r4, #4
 8002b3e:	f000 84af 	beq.w	80034a0 <UART_SetConfig+0x9f0>
        break;
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        break;
      default:
        ret = HAL_ERROR;
 8002b42:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8002b44:	2300      	movs	r3, #0
 8002b46:	f000 bc50 	b.w	80033ea <UART_SetConfig+0x93a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b4a:	49a1      	ldr	r1, [pc, #644]	; (8002dd0 <UART_SetConfig+0x320>)
 8002b4c:	428b      	cmp	r3, r1
 8002b4e:	d108      	bne.n	8002b62 <UART_SetConfig+0xb2>
 8002b50:	4b9d      	ldr	r3, [pc, #628]	; (8002dc8 <UART_SetConfig+0x318>)
 8002b52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b54:	f003 0307 	and.w	r3, r3, #7
 8002b58:	2b05      	cmp	r3, #5
 8002b5a:	f200 873a 	bhi.w	80039d2 <UART_SetConfig+0xf22>
 8002b5e:	499d      	ldr	r1, [pc, #628]	; (8002dd4 <UART_SetConfig+0x324>)
 8002b60:	e7dd      	b.n	8002b1e <UART_SetConfig+0x6e>
 8002b62:	499d      	ldr	r1, [pc, #628]	; (8002dd8 <UART_SetConfig+0x328>)
 8002b64:	428b      	cmp	r3, r1
 8002b66:	d108      	bne.n	8002b7a <UART_SetConfig+0xca>
 8002b68:	4b97      	ldr	r3, [pc, #604]	; (8002dc8 <UART_SetConfig+0x318>)
 8002b6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b6c:	f003 0307 	and.w	r3, r3, #7
 8002b70:	2b05      	cmp	r3, #5
 8002b72:	f200 872e 	bhi.w	80039d2 <UART_SetConfig+0xf22>
 8002b76:	4999      	ldr	r1, [pc, #612]	; (8002ddc <UART_SetConfig+0x32c>)
 8002b78:	e7d1      	b.n	8002b1e <UART_SetConfig+0x6e>
 8002b7a:	4999      	ldr	r1, [pc, #612]	; (8002de0 <UART_SetConfig+0x330>)
 8002b7c:	428b      	cmp	r3, r1
 8002b7e:	d108      	bne.n	8002b92 <UART_SetConfig+0xe2>
 8002b80:	4b91      	ldr	r3, [pc, #580]	; (8002dc8 <UART_SetConfig+0x318>)
 8002b82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b84:	f003 0307 	and.w	r3, r3, #7
 8002b88:	2b05      	cmp	r3, #5
 8002b8a:	f200 8722 	bhi.w	80039d2 <UART_SetConfig+0xf22>
 8002b8e:	4995      	ldr	r1, [pc, #596]	; (8002de4 <UART_SetConfig+0x334>)
 8002b90:	e7c5      	b.n	8002b1e <UART_SetConfig+0x6e>
 8002b92:	4995      	ldr	r1, [pc, #596]	; (8002de8 <UART_SetConfig+0x338>)
 8002b94:	428b      	cmp	r3, r1
 8002b96:	d108      	bne.n	8002baa <UART_SetConfig+0xfa>
 8002b98:	4b8b      	ldr	r3, [pc, #556]	; (8002dc8 <UART_SetConfig+0x318>)
 8002b9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b9c:	f003 0307 	and.w	r3, r3, #7
 8002ba0:	2b05      	cmp	r3, #5
 8002ba2:	f200 8716 	bhi.w	80039d2 <UART_SetConfig+0xf22>
 8002ba6:	4991      	ldr	r1, [pc, #580]	; (8002dec <UART_SetConfig+0x33c>)
 8002ba8:	e7b9      	b.n	8002b1e <UART_SetConfig+0x6e>
 8002baa:	4991      	ldr	r1, [pc, #580]	; (8002df0 <UART_SetConfig+0x340>)
 8002bac:	428b      	cmp	r3, r1
 8002bae:	d108      	bne.n	8002bc2 <UART_SetConfig+0x112>
 8002bb0:	4b85      	ldr	r3, [pc, #532]	; (8002dc8 <UART_SetConfig+0x318>)
 8002bb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bb4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002bb8:	2b28      	cmp	r3, #40	; 0x28
 8002bba:	f200 870a 	bhi.w	80039d2 <UART_SetConfig+0xf22>
 8002bbe:	498d      	ldr	r1, [pc, #564]	; (8002df4 <UART_SetConfig+0x344>)
 8002bc0:	e7ad      	b.n	8002b1e <UART_SetConfig+0x6e>
 8002bc2:	498d      	ldr	r1, [pc, #564]	; (8002df8 <UART_SetConfig+0x348>)
 8002bc4:	428b      	cmp	r3, r1
 8002bc6:	d108      	bne.n	8002bda <UART_SetConfig+0x12a>
 8002bc8:	4b7f      	ldr	r3, [pc, #508]	; (8002dc8 <UART_SetConfig+0x318>)
 8002bca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bcc:	f003 0307 	and.w	r3, r3, #7
 8002bd0:	2b05      	cmp	r3, #5
 8002bd2:	f200 86fe 	bhi.w	80039d2 <UART_SetConfig+0xf22>
 8002bd6:	4989      	ldr	r1, [pc, #548]	; (8002dfc <UART_SetConfig+0x34c>)
 8002bd8:	e7a1      	b.n	8002b1e <UART_SetConfig+0x6e>
 8002bda:	4989      	ldr	r1, [pc, #548]	; (8002e00 <UART_SetConfig+0x350>)
 8002bdc:	428b      	cmp	r3, r1
 8002bde:	d108      	bne.n	8002bf2 <UART_SetConfig+0x142>
 8002be0:	4b79      	ldr	r3, [pc, #484]	; (8002dc8 <UART_SetConfig+0x318>)
 8002be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002be4:	f003 0307 	and.w	r3, r3, #7
 8002be8:	2b05      	cmp	r3, #5
 8002bea:	f200 86f2 	bhi.w	80039d2 <UART_SetConfig+0xf22>
 8002bee:	4985      	ldr	r1, [pc, #532]	; (8002e04 <UART_SetConfig+0x354>)
 8002bf0:	e795      	b.n	8002b1e <UART_SetConfig+0x6e>
 8002bf2:	4973      	ldr	r1, [pc, #460]	; (8002dc0 <UART_SetConfig+0x310>)
 8002bf4:	428b      	cmp	r3, r1
 8002bf6:	f040 86ec 	bne.w	80039d2 <UART_SetConfig+0xf22>
 8002bfa:	4b73      	ldr	r3, [pc, #460]	; (8002dc8 <UART_SetConfig+0x318>)
 8002bfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bfe:	f003 0307 	and.w	r3, r3, #7
 8002c02:	2b05      	cmp	r3, #5
 8002c04:	d901      	bls.n	8002c0a <UART_SetConfig+0x15a>
        ret = HAL_ERROR;
 8002c06:	2201      	movs	r2, #1
 8002c08:	e0a6      	b.n	8002d58 <UART_SetConfig+0x2a8>
 8002c0a:	4a7f      	ldr	r2, [pc, #508]	; (8002e08 <UART_SetConfig+0x358>)
 8002c0c:	5cd4      	ldrb	r4, [r2, r3]
    switch (clocksource)
 8002c0e:	2c08      	cmp	r4, #8
 8002c10:	f000 80c8 	beq.w	8002da4 <UART_SetConfig+0x2f4>
 8002c14:	d82f      	bhi.n	8002c76 <UART_SetConfig+0x1c6>
 8002c16:	2c02      	cmp	r4, #2
 8002c18:	d07d      	beq.n	8002d16 <UART_SetConfig+0x266>
 8002c1a:	2c04      	cmp	r4, #4
 8002c1c:	d1f3      	bne.n	8002c06 <UART_SetConfig+0x156>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8002c1e:	4668      	mov	r0, sp
 8002c20:	f7ff fc58 	bl	80024d4 <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002c24:	9a01      	ldr	r2, [sp, #4]
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002c26:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	f000 80c0 	beq.w	8002dae <UART_SetConfig+0x2fe>
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	f000 80bf 	beq.w	8002db2 <UART_SetConfig+0x302>
 8002c34:	2b02      	cmp	r3, #2
 8002c36:	f000 80be 	beq.w	8002db6 <UART_SetConfig+0x306>
 8002c3a:	2b03      	cmp	r3, #3
 8002c3c:	f000 80e8 	beq.w	8002e10 <UART_SetConfig+0x360>
 8002c40:	2b04      	cmp	r3, #4
 8002c42:	f000 80ab 	beq.w	8002d9c <UART_SetConfig+0x2ec>
 8002c46:	2b05      	cmp	r3, #5
 8002c48:	f000 80e4 	beq.w	8002e14 <UART_SetConfig+0x364>
 8002c4c:	2b06      	cmp	r3, #6
 8002c4e:	f000 80e3 	beq.w	8002e18 <UART_SetConfig+0x368>
 8002c52:	2b07      	cmp	r3, #7
 8002c54:	f000 80e2 	beq.w	8002e1c <UART_SetConfig+0x36c>
 8002c58:	2b08      	cmp	r3, #8
 8002c5a:	f000 80e1 	beq.w	8002e20 <UART_SetConfig+0x370>
 8002c5e:	2b09      	cmp	r3, #9
 8002c60:	f000 80e0 	beq.w	8002e24 <UART_SetConfig+0x374>
 8002c64:	2b0a      	cmp	r3, #10
 8002c66:	f000 80df 	beq.w	8002e28 <UART_SetConfig+0x378>
 8002c6a:	2b0b      	cmp	r3, #11
 8002c6c:	bf14      	ite	ne
 8002c6e:	2301      	movne	r3, #1
 8002c70:	f44f 7380 	moveq.w	r3, #256	; 0x100
 8002c74:	e093      	b.n	8002d9e <UART_SetConfig+0x2ee>
    switch (clocksource)
 8002c76:	2c20      	cmp	r4, #32
 8002c78:	f000 810a 	beq.w	8002e90 <UART_SetConfig+0x3e0>
 8002c7c:	2c40      	cmp	r4, #64	; 0x40
 8002c7e:	f000 8121 	beq.w	8002ec4 <UART_SetConfig+0x414>
 8002c82:	2c10      	cmp	r4, #16
 8002c84:	d1bf      	bne.n	8002c06 <UART_SetConfig+0x156>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002c86:	4b50      	ldr	r3, [pc, #320]	; (8002dc8 <UART_SetConfig+0x318>)
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	0692      	lsls	r2, r2, #26
 8002c8c:	f140 80e4 	bpl.w	8002e58 <UART_SetConfig+0x3a8>
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	4b5e      	ldr	r3, [pc, #376]	; (8002e0c <UART_SetConfig+0x35c>)
 8002c94:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8002c98:	40d3      	lsrs	r3, r2
 8002c9a:	2800      	cmp	r0, #0
 8002c9c:	f000 80c6 	beq.w	8002e2c <UART_SetConfig+0x37c>
 8002ca0:	2801      	cmp	r0, #1
 8002ca2:	f000 80c5 	beq.w	8002e30 <UART_SetConfig+0x380>
 8002ca6:	2802      	cmp	r0, #2
 8002ca8:	f000 80c4 	beq.w	8002e34 <UART_SetConfig+0x384>
 8002cac:	2803      	cmp	r0, #3
 8002cae:	f000 80c3 	beq.w	8002e38 <UART_SetConfig+0x388>
 8002cb2:	2804      	cmp	r0, #4
 8002cb4:	f000 80c2 	beq.w	8002e3c <UART_SetConfig+0x38c>
 8002cb8:	2805      	cmp	r0, #5
 8002cba:	f000 80c1 	beq.w	8002e40 <UART_SetConfig+0x390>
 8002cbe:	2806      	cmp	r0, #6
 8002cc0:	f000 80c0 	beq.w	8002e44 <UART_SetConfig+0x394>
 8002cc4:	2807      	cmp	r0, #7
 8002cc6:	f000 80bf 	beq.w	8002e48 <UART_SetConfig+0x398>
 8002cca:	2808      	cmp	r0, #8
 8002ccc:	f000 80be 	beq.w	8002e4c <UART_SetConfig+0x39c>
 8002cd0:	2809      	cmp	r0, #9
 8002cd2:	f000 80bd 	beq.w	8002e50 <UART_SetConfig+0x3a0>
 8002cd6:	280a      	cmp	r0, #10
 8002cd8:	f000 80bc 	beq.w	8002e54 <UART_SetConfig+0x3a4>
 8002cdc:	280b      	cmp	r0, #11
 8002cde:	bf14      	ite	ne
 8002ce0:	2001      	movne	r0, #1
 8002ce2:	f44f 7080 	moveq.w	r0, #256	; 0x100
 8002ce6:	fbb3 f2f0 	udiv	r2, r3, r0
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002cea:	686e      	ldr	r6, [r5, #4]
 8002cec:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d888      	bhi.n	8002c06 <UART_SetConfig+0x156>
 8002cf4:	ebb2 3f06 	cmp.w	r2, r6, lsl #12
 8002cf8:	d885      	bhi.n	8002c06 <UART_SetConfig+0x156>
        switch (clocksource)
 8002cfa:	2c08      	cmp	r4, #8
 8002cfc:	f000 81d2 	beq.w	80030a4 <UART_SetConfig+0x5f4>
 8002d00:	f200 8143 	bhi.w	8002f8a <UART_SetConfig+0x4da>
 8002d04:	2c02      	cmp	r4, #2
 8002d06:	f000 818d 	beq.w	8003024 <UART_SetConfig+0x574>
 8002d0a:	2c04      	cmp	r4, #4
 8002d0c:	f000 81c5 	beq.w	800309a <UART_SetConfig+0x5ea>
            ret = HAL_ERROR;
 8002d10:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8002d12:	2000      	movs	r0, #0
 8002d14:	e1b8      	b.n	8003088 <UART_SetConfig+0x5d8>
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002d16:	f7ff fbcb 	bl	80024b0 <HAL_RCCEx_GetD3PCLK1Freq>
 8002d1a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002d1c:	b343      	cbz	r3, 8002d70 <UART_SetConfig+0x2c0>
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d028      	beq.n	8002d74 <UART_SetConfig+0x2c4>
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d028      	beq.n	8002d78 <UART_SetConfig+0x2c8>
 8002d26:	2b03      	cmp	r3, #3
 8002d28:	d028      	beq.n	8002d7c <UART_SetConfig+0x2cc>
 8002d2a:	2b04      	cmp	r3, #4
 8002d2c:	d028      	beq.n	8002d80 <UART_SetConfig+0x2d0>
 8002d2e:	2b05      	cmp	r3, #5
 8002d30:	d028      	beq.n	8002d84 <UART_SetConfig+0x2d4>
 8002d32:	2b06      	cmp	r3, #6
 8002d34:	d028      	beq.n	8002d88 <UART_SetConfig+0x2d8>
 8002d36:	2b07      	cmp	r3, #7
 8002d38:	d028      	beq.n	8002d8c <UART_SetConfig+0x2dc>
 8002d3a:	2b08      	cmp	r3, #8
 8002d3c:	d028      	beq.n	8002d90 <UART_SetConfig+0x2e0>
 8002d3e:	2b09      	cmp	r3, #9
 8002d40:	d028      	beq.n	8002d94 <UART_SetConfig+0x2e4>
 8002d42:	2b0a      	cmp	r3, #10
 8002d44:	d028      	beq.n	8002d98 <UART_SetConfig+0x2e8>
 8002d46:	2b0b      	cmp	r3, #11
 8002d48:	bf14      	ite	ne
 8002d4a:	2301      	movne	r3, #1
 8002d4c:	f44f 7380 	moveq.w	r3, #256	; 0x100
 8002d50:	fbb0 f2f3 	udiv	r2, r0, r3
    if (lpuart_ker_ck_pres != 0U)
 8002d54:	2a00      	cmp	r2, #0
 8002d56:	d1c8      	bne.n	8002cea <UART_SetConfig+0x23a>
      ret = HAL_ERROR;
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002d58:	2301      	movs	r3, #1
  /* Clear ISR function pointers */
  huart->RxISR = NULL;
  huart->TxISR = NULL;

  return ret;
}
 8002d5a:	4610      	mov	r0, r2
  huart->NbTxDataToProcess = 1;
 8002d5c:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8002d60:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
  huart->RxISR = NULL;
 8002d64:	2300      	movs	r3, #0
 8002d66:	66eb      	str	r3, [r5, #108]	; 0x6c
  huart->TxISR = NULL;
 8002d68:	672b      	str	r3, [r5, #112]	; 0x70
}
 8002d6a:	b007      	add	sp, #28
 8002d6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002d70:	2301      	movs	r3, #1
 8002d72:	e7ed      	b.n	8002d50 <UART_SetConfig+0x2a0>
 8002d74:	4623      	mov	r3, r4
 8002d76:	e7eb      	b.n	8002d50 <UART_SetConfig+0x2a0>
 8002d78:	2304      	movs	r3, #4
 8002d7a:	e7e9      	b.n	8002d50 <UART_SetConfig+0x2a0>
 8002d7c:	2306      	movs	r3, #6
 8002d7e:	e7e7      	b.n	8002d50 <UART_SetConfig+0x2a0>
 8002d80:	2308      	movs	r3, #8
 8002d82:	e7e5      	b.n	8002d50 <UART_SetConfig+0x2a0>
 8002d84:	230a      	movs	r3, #10
 8002d86:	e7e3      	b.n	8002d50 <UART_SetConfig+0x2a0>
 8002d88:	230c      	movs	r3, #12
 8002d8a:	e7e1      	b.n	8002d50 <UART_SetConfig+0x2a0>
 8002d8c:	2310      	movs	r3, #16
 8002d8e:	e7df      	b.n	8002d50 <UART_SetConfig+0x2a0>
 8002d90:	2320      	movs	r3, #32
 8002d92:	e7dd      	b.n	8002d50 <UART_SetConfig+0x2a0>
 8002d94:	2340      	movs	r3, #64	; 0x40
 8002d96:	e7db      	b.n	8002d50 <UART_SetConfig+0x2a0>
 8002d98:	2380      	movs	r3, #128	; 0x80
 8002d9a:	e7d9      	b.n	8002d50 <UART_SetConfig+0x2a0>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002d9c:	2308      	movs	r3, #8
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002d9e:	fbb2 f2f3 	udiv	r2, r2, r3
        break;
 8002da2:	e7d7      	b.n	8002d54 <UART_SetConfig+0x2a4>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8002da4:	a803      	add	r0, sp, #12
 8002da6:	f7ff fc3f 	bl	8002628 <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002daa:	9a04      	ldr	r2, [sp, #16]
 8002dac:	e73b      	b.n	8002c26 <UART_SetConfig+0x176>
 8002dae:	2301      	movs	r3, #1
 8002db0:	e7f5      	b.n	8002d9e <UART_SetConfig+0x2ee>
 8002db2:	2302      	movs	r3, #2
 8002db4:	e7f3      	b.n	8002d9e <UART_SetConfig+0x2ee>
 8002db6:	2304      	movs	r3, #4
 8002db8:	e7f1      	b.n	8002d9e <UART_SetConfig+0x2ee>
 8002dba:	bf00      	nop
 8002dbc:	cfff69f3 	.word	0xcfff69f3
 8002dc0:	58000c00 	.word	0x58000c00
 8002dc4:	40011000 	.word	0x40011000
 8002dc8:	58024400 	.word	0x58024400
 8002dcc:	08005380 	.word	0x08005380
 8002dd0:	40004400 	.word	0x40004400
 8002dd4:	080053a9 	.word	0x080053a9
 8002dd8:	40004800 	.word	0x40004800
 8002ddc:	080053a9 	.word	0x080053a9
 8002de0:	40004c00 	.word	0x40004c00
 8002de4:	080053a9 	.word	0x080053a9
 8002de8:	40005000 	.word	0x40005000
 8002dec:	080053a9 	.word	0x080053a9
 8002df0:	40011400 	.word	0x40011400
 8002df4:	08005380 	.word	0x08005380
 8002df8:	40007800 	.word	0x40007800
 8002dfc:	080053a9 	.word	0x080053a9
 8002e00:	40007c00 	.word	0x40007c00
 8002e04:	080053a9 	.word	0x080053a9
 8002e08:	080053af 	.word	0x080053af
 8002e0c:	03d09000 	.word	0x03d09000
 8002e10:	2306      	movs	r3, #6
 8002e12:	e7c4      	b.n	8002d9e <UART_SetConfig+0x2ee>
 8002e14:	230a      	movs	r3, #10
 8002e16:	e7c2      	b.n	8002d9e <UART_SetConfig+0x2ee>
 8002e18:	230c      	movs	r3, #12
 8002e1a:	e7c0      	b.n	8002d9e <UART_SetConfig+0x2ee>
 8002e1c:	2310      	movs	r3, #16
 8002e1e:	e7be      	b.n	8002d9e <UART_SetConfig+0x2ee>
 8002e20:	2320      	movs	r3, #32
 8002e22:	e7bc      	b.n	8002d9e <UART_SetConfig+0x2ee>
 8002e24:	2340      	movs	r3, #64	; 0x40
 8002e26:	e7ba      	b.n	8002d9e <UART_SetConfig+0x2ee>
 8002e28:	2380      	movs	r3, #128	; 0x80
 8002e2a:	e7b8      	b.n	8002d9e <UART_SetConfig+0x2ee>
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002e2c:	2001      	movs	r0, #1
 8002e2e:	e75a      	b.n	8002ce6 <UART_SetConfig+0x236>
 8002e30:	2002      	movs	r0, #2
 8002e32:	e758      	b.n	8002ce6 <UART_SetConfig+0x236>
 8002e34:	2004      	movs	r0, #4
 8002e36:	e756      	b.n	8002ce6 <UART_SetConfig+0x236>
 8002e38:	2006      	movs	r0, #6
 8002e3a:	e754      	b.n	8002ce6 <UART_SetConfig+0x236>
 8002e3c:	2008      	movs	r0, #8
 8002e3e:	e752      	b.n	8002ce6 <UART_SetConfig+0x236>
 8002e40:	200a      	movs	r0, #10
 8002e42:	e750      	b.n	8002ce6 <UART_SetConfig+0x236>
 8002e44:	200c      	movs	r0, #12
 8002e46:	e74e      	b.n	8002ce6 <UART_SetConfig+0x236>
 8002e48:	2010      	movs	r0, #16
 8002e4a:	e74c      	b.n	8002ce6 <UART_SetConfig+0x236>
 8002e4c:	2020      	movs	r0, #32
 8002e4e:	e74a      	b.n	8002ce6 <UART_SetConfig+0x236>
 8002e50:	2040      	movs	r0, #64	; 0x40
 8002e52:	e748      	b.n	8002ce6 <UART_SetConfig+0x236>
 8002e54:	2080      	movs	r0, #128	; 0x80
 8002e56:	e746      	b.n	8002ce6 <UART_SetConfig+0x236>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002e58:	2800      	cmp	r0, #0
 8002e5a:	d04f      	beq.n	8002efc <UART_SetConfig+0x44c>
 8002e5c:	2801      	cmp	r0, #1
 8002e5e:	d04f      	beq.n	8002f00 <UART_SetConfig+0x450>
 8002e60:	2802      	cmp	r0, #2
 8002e62:	d04f      	beq.n	8002f04 <UART_SetConfig+0x454>
 8002e64:	2803      	cmp	r0, #3
 8002e66:	d04f      	beq.n	8002f08 <UART_SetConfig+0x458>
 8002e68:	2804      	cmp	r0, #4
 8002e6a:	d04f      	beq.n	8002f0c <UART_SetConfig+0x45c>
 8002e6c:	2805      	cmp	r0, #5
 8002e6e:	d04f      	beq.n	8002f10 <UART_SetConfig+0x460>
 8002e70:	2806      	cmp	r0, #6
 8002e72:	d04f      	beq.n	8002f14 <UART_SetConfig+0x464>
 8002e74:	2807      	cmp	r0, #7
 8002e76:	d04f      	beq.n	8002f18 <UART_SetConfig+0x468>
 8002e78:	2808      	cmp	r0, #8
 8002e7a:	d04f      	beq.n	8002f1c <UART_SetConfig+0x46c>
 8002e7c:	2809      	cmp	r0, #9
 8002e7e:	d04f      	beq.n	8002f20 <UART_SetConfig+0x470>
 8002e80:	280a      	cmp	r0, #10
 8002e82:	d051      	beq.n	8002f28 <UART_SetConfig+0x478>
 8002e84:	4aad      	ldr	r2, [pc, #692]	; (800313c <UART_SetConfig+0x68c>)
 8002e86:	4bae      	ldr	r3, [pc, #696]	; (8003140 <UART_SetConfig+0x690>)
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002e88:	280b      	cmp	r0, #11
 8002e8a:	bf18      	it	ne
 8002e8c:	461a      	movne	r2, r3
 8002e8e:	e72c      	b.n	8002cea <UART_SetConfig+0x23a>
 8002e90:	2800      	cmp	r0, #0
 8002e92:	d041      	beq.n	8002f18 <UART_SetConfig+0x468>
 8002e94:	2801      	cmp	r0, #1
 8002e96:	d041      	beq.n	8002f1c <UART_SetConfig+0x46c>
 8002e98:	2802      	cmp	r0, #2
 8002e9a:	d041      	beq.n	8002f20 <UART_SetConfig+0x470>
 8002e9c:	2803      	cmp	r0, #3
 8002e9e:	d041      	beq.n	8002f24 <UART_SetConfig+0x474>
 8002ea0:	2804      	cmp	r0, #4
 8002ea2:	d041      	beq.n	8002f28 <UART_SetConfig+0x478>
 8002ea4:	2805      	cmp	r0, #5
 8002ea6:	d041      	beq.n	8002f2c <UART_SetConfig+0x47c>
 8002ea8:	2806      	cmp	r0, #6
 8002eaa:	d041      	beq.n	8002f30 <UART_SetConfig+0x480>
 8002eac:	2807      	cmp	r0, #7
 8002eae:	d041      	beq.n	8002f34 <UART_SetConfig+0x484>
 8002eb0:	2808      	cmp	r0, #8
 8002eb2:	d041      	beq.n	8002f38 <UART_SetConfig+0x488>
 8002eb4:	2809      	cmp	r0, #9
 8002eb6:	d041      	beq.n	8002f3c <UART_SetConfig+0x48c>
 8002eb8:	280a      	cmp	r0, #10
 8002eba:	d042      	beq.n	8002f42 <UART_SetConfig+0x492>
 8002ebc:	f643 5209 	movw	r2, #15625	; 0x3d09
 8002ec0:	4ba0      	ldr	r3, [pc, #640]	; (8003144 <UART_SetConfig+0x694>)
 8002ec2:	e7e1      	b.n	8002e88 <UART_SetConfig+0x3d8>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002ec4:	2800      	cmp	r0, #0
 8002ec6:	d03f      	beq.n	8002f48 <UART_SetConfig+0x498>
 8002ec8:	2801      	cmp	r0, #1
 8002eca:	d040      	beq.n	8002f4e <UART_SetConfig+0x49e>
 8002ecc:	2802      	cmp	r0, #2
 8002ece:	d041      	beq.n	8002f54 <UART_SetConfig+0x4a4>
 8002ed0:	2803      	cmp	r0, #3
 8002ed2:	d042      	beq.n	8002f5a <UART_SetConfig+0x4aa>
 8002ed4:	2804      	cmp	r0, #4
 8002ed6:	d043      	beq.n	8002f60 <UART_SetConfig+0x4b0>
 8002ed8:	2805      	cmp	r0, #5
 8002eda:	d044      	beq.n	8002f66 <UART_SetConfig+0x4b6>
 8002edc:	2806      	cmp	r0, #6
 8002ede:	d045      	beq.n	8002f6c <UART_SetConfig+0x4bc>
 8002ee0:	2807      	cmp	r0, #7
 8002ee2:	d046      	beq.n	8002f72 <UART_SetConfig+0x4c2>
 8002ee4:	2808      	cmp	r0, #8
 8002ee6:	d047      	beq.n	8002f78 <UART_SetConfig+0x4c8>
 8002ee8:	2809      	cmp	r0, #9
 8002eea:	d048      	beq.n	8002f7e <UART_SetConfig+0x4ce>
 8002eec:	280a      	cmp	r0, #10
 8002eee:	d049      	beq.n	8002f84 <UART_SetConfig+0x4d4>
 8002ef0:	280b      	cmp	r0, #11
 8002ef2:	bf0c      	ite	eq
 8002ef4:	2280      	moveq	r2, #128	; 0x80
 8002ef6:	f44f 4200 	movne.w	r2, #32768	; 0x8000
 8002efa:	e6f6      	b.n	8002cea <UART_SetConfig+0x23a>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002efc:	4a90      	ldr	r2, [pc, #576]	; (8003140 <UART_SetConfig+0x690>)
 8002efe:	e6f4      	b.n	8002cea <UART_SetConfig+0x23a>
 8002f00:	4a91      	ldr	r2, [pc, #580]	; (8003148 <UART_SetConfig+0x698>)
 8002f02:	e6f2      	b.n	8002cea <UART_SetConfig+0x23a>
 8002f04:	4a91      	ldr	r2, [pc, #580]	; (800314c <UART_SetConfig+0x69c>)
 8002f06:	e6f0      	b.n	8002cea <UART_SetConfig+0x23a>
 8002f08:	4a91      	ldr	r2, [pc, #580]	; (8003150 <UART_SetConfig+0x6a0>)
 8002f0a:	e6ee      	b.n	8002cea <UART_SetConfig+0x23a>
 8002f0c:	4a91      	ldr	r2, [pc, #580]	; (8003154 <UART_SetConfig+0x6a4>)
 8002f0e:	e6ec      	b.n	8002cea <UART_SetConfig+0x23a>
 8002f10:	4a91      	ldr	r2, [pc, #580]	; (8003158 <UART_SetConfig+0x6a8>)
 8002f12:	e6ea      	b.n	8002cea <UART_SetConfig+0x23a>
 8002f14:	4a91      	ldr	r2, [pc, #580]	; (800315c <UART_SetConfig+0x6ac>)
 8002f16:	e6e8      	b.n	8002cea <UART_SetConfig+0x23a>
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002f18:	4a8a      	ldr	r2, [pc, #552]	; (8003144 <UART_SetConfig+0x694>)
 8002f1a:	e6e6      	b.n	8002cea <UART_SetConfig+0x23a>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002f1c:	4a90      	ldr	r2, [pc, #576]	; (8003160 <UART_SetConfig+0x6b0>)
 8002f1e:	e6e4      	b.n	8002cea <UART_SetConfig+0x23a>
 8002f20:	4a90      	ldr	r2, [pc, #576]	; (8003164 <UART_SetConfig+0x6b4>)
 8002f22:	e6e2      	b.n	8002cea <UART_SetConfig+0x23a>
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002f24:	4a90      	ldr	r2, [pc, #576]	; (8003168 <UART_SetConfig+0x6b8>)
 8002f26:	e6e0      	b.n	8002cea <UART_SetConfig+0x23a>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002f28:	4a90      	ldr	r2, [pc, #576]	; (800316c <UART_SetConfig+0x6bc>)
 8002f2a:	e6de      	b.n	8002cea <UART_SetConfig+0x23a>
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002f2c:	4a90      	ldr	r2, [pc, #576]	; (8003170 <UART_SetConfig+0x6c0>)
 8002f2e:	e6dc      	b.n	8002cea <UART_SetConfig+0x23a>
 8002f30:	4a90      	ldr	r2, [pc, #576]	; (8003174 <UART_SetConfig+0x6c4>)
 8002f32:	e6da      	b.n	8002cea <UART_SetConfig+0x23a>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002f34:	4a81      	ldr	r2, [pc, #516]	; (800313c <UART_SetConfig+0x68c>)
 8002f36:	e6d8      	b.n	8002cea <UART_SetConfig+0x23a>
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002f38:	4a8f      	ldr	r2, [pc, #572]	; (8003178 <UART_SetConfig+0x6c8>)
 8002f3a:	e6d6      	b.n	8002cea <UART_SetConfig+0x23a>
 8002f3c:	f24f 4224 	movw	r2, #62500	; 0xf424
 8002f40:	e6d3      	b.n	8002cea <UART_SetConfig+0x23a>
 8002f42:	f647 2212 	movw	r2, #31250	; 0x7a12
 8002f46:	e6d0      	b.n	8002cea <UART_SetConfig+0x23a>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002f48:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002f4c:	e6cd      	b.n	8002cea <UART_SetConfig+0x23a>
 8002f4e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002f52:	e6ca      	b.n	8002cea <UART_SetConfig+0x23a>
 8002f54:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f58:	e6c7      	b.n	8002cea <UART_SetConfig+0x23a>
 8002f5a:	f241 5255 	movw	r2, #5461	; 0x1555
 8002f5e:	e6c4      	b.n	8002cea <UART_SetConfig+0x23a>
 8002f60:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002f64:	e6c1      	b.n	8002cea <UART_SetConfig+0x23a>
 8002f66:	f640 42cc 	movw	r2, #3276	; 0xccc
 8002f6a:	e6be      	b.n	8002cea <UART_SetConfig+0x23a>
 8002f6c:	f640 22aa 	movw	r2, #2730	; 0xaaa
 8002f70:	e6bb      	b.n	8002cea <UART_SetConfig+0x23a>
 8002f72:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f76:	e6b8      	b.n	8002cea <UART_SetConfig+0x23a>
 8002f78:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f7c:	e6b5      	b.n	8002cea <UART_SetConfig+0x23a>
 8002f7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f82:	e6b2      	b.n	8002cea <UART_SetConfig+0x23a>
 8002f84:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f88:	e6af      	b.n	8002cea <UART_SetConfig+0x23a>
        switch (clocksource)
 8002f8a:	2c20      	cmp	r4, #32
 8002f8c:	f000 811c 	beq.w	80031c8 <UART_SetConfig+0x718>
 8002f90:	2c40      	cmp	r4, #64	; 0x40
 8002f92:	f000 814f 	beq.w	8003234 <UART_SetConfig+0x784>
 8002f96:	2c10      	cmp	r4, #16
 8002f98:	f47f aeba 	bne.w	8002d10 <UART_SetConfig+0x260>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002f9c:	4a77      	ldr	r2, [pc, #476]	; (800317c <UART_SetConfig+0x6cc>)
 8002f9e:	0874      	lsrs	r4, r6, #1
 8002fa0:	6813      	ldr	r3, [r2, #0]
 8002fa2:	f013 0f20 	tst.w	r3, #32
 8002fa6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002fa8:	f000 80ad 	beq.w	8003106 <UART_SetConfig+0x656>
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002fac:	6812      	ldr	r2, [r2, #0]
 8002fae:	4864      	ldr	r0, [pc, #400]	; (8003140 <UART_SetConfig+0x690>)
 8002fb0:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8002fb4:	40d0      	lsrs	r0, r2
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	f000 80a3 	beq.w	8003102 <UART_SetConfig+0x652>
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	f000 808c 	beq.w	80030da <UART_SetConfig+0x62a>
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	f000 808b 	beq.w	80030de <UART_SetConfig+0x62e>
 8002fc8:	2b03      	cmp	r3, #3
 8002fca:	f000 808a 	beq.w	80030e2 <UART_SetConfig+0x632>
 8002fce:	2b04      	cmp	r3, #4
 8002fd0:	f000 8089 	beq.w	80030e6 <UART_SetConfig+0x636>
 8002fd4:	2b05      	cmp	r3, #5
 8002fd6:	f000 8088 	beq.w	80030ea <UART_SetConfig+0x63a>
 8002fda:	2b06      	cmp	r3, #6
 8002fdc:	f000 8087 	beq.w	80030ee <UART_SetConfig+0x63e>
 8002fe0:	2b07      	cmp	r3, #7
 8002fe2:	f000 8086 	beq.w	80030f2 <UART_SetConfig+0x642>
 8002fe6:	2b08      	cmp	r3, #8
 8002fe8:	f000 8085 	beq.w	80030f6 <UART_SetConfig+0x646>
 8002fec:	2b09      	cmp	r3, #9
 8002fee:	f000 8084 	beq.w	80030fa <UART_SetConfig+0x64a>
 8002ff2:	2b0a      	cmp	r3, #10
 8002ff4:	f000 8083 	beq.w	80030fe <UART_SetConfig+0x64e>
 8002ff8:	2b0b      	cmp	r3, #11
 8002ffa:	f040 8082 	bne.w	8003102 <UART_SetConfig+0x652>
 8002ffe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003002:	2300      	movs	r3, #0
 8003004:	2100      	movs	r1, #0
 8003006:	f7fd f9c3 	bl	8000390 <__aeabi_uldivmod>
 800300a:	4632      	mov	r2, r6
 800300c:	ea4f 2901 	mov.w	r9, r1, lsl #8
 8003010:	2300      	movs	r3, #0
 8003012:	ea4f 2800 	mov.w	r8, r0, lsl #8
 8003016:	ea49 6910 	orr.w	r9, r9, r0, lsr #24
 800301a:	eb18 0004 	adds.w	r0, r8, r4
 800301e:	f149 0100 	adc.w	r1, r9, #0
 8003022:	e02e      	b.n	8003082 <UART_SetConfig+0x5d2>
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8003024:	f7ff fa44 	bl	80024b0 <HAL_RCCEx_GetD3PCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003028:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800302a:	2b00      	cmp	r3, #0
 800302c:	d053      	beq.n	80030d6 <UART_SetConfig+0x626>
 800302e:	2b01      	cmp	r3, #1
 8003030:	d03d      	beq.n	80030ae <UART_SetConfig+0x5fe>
 8003032:	2b02      	cmp	r3, #2
 8003034:	d03d      	beq.n	80030b2 <UART_SetConfig+0x602>
 8003036:	2b03      	cmp	r3, #3
 8003038:	d03d      	beq.n	80030b6 <UART_SetConfig+0x606>
 800303a:	2b04      	cmp	r3, #4
 800303c:	d03d      	beq.n	80030ba <UART_SetConfig+0x60a>
 800303e:	2b05      	cmp	r3, #5
 8003040:	d03d      	beq.n	80030be <UART_SetConfig+0x60e>
 8003042:	2b06      	cmp	r3, #6
 8003044:	d03d      	beq.n	80030c2 <UART_SetConfig+0x612>
 8003046:	2b07      	cmp	r3, #7
 8003048:	d03d      	beq.n	80030c6 <UART_SetConfig+0x616>
 800304a:	2b08      	cmp	r3, #8
 800304c:	d03d      	beq.n	80030ca <UART_SetConfig+0x61a>
 800304e:	2b09      	cmp	r3, #9
 8003050:	d03d      	beq.n	80030ce <UART_SetConfig+0x61e>
 8003052:	2b0a      	cmp	r3, #10
 8003054:	d03d      	beq.n	80030d2 <UART_SetConfig+0x622>
 8003056:	2b0b      	cmp	r3, #11
 8003058:	d13d      	bne.n	80030d6 <UART_SetConfig+0x626>
 800305a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800305e:	2300      	movs	r3, #0
 8003060:	2100      	movs	r1, #0
 8003062:	f7fd f995 	bl	8000390 <__aeabi_uldivmod>
 8003066:	686c      	ldr	r4, [r5, #4]
 8003068:	020f      	lsls	r7, r1, #8
 800306a:	2300      	movs	r3, #0
 800306c:	0206      	lsls	r6, r0, #8
 800306e:	4622      	mov	r2, r4
 8003070:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 8003074:	0860      	lsrs	r0, r4, #1
 8003076:	eb16 0800 	adds.w	r8, r6, r0
 800307a:	f147 0900 	adc.w	r9, r7, #0
 800307e:	4640      	mov	r0, r8
 8003080:	4649      	mov	r1, r9
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003082:	f7fd f985 	bl	8000390 <__aeabi_uldivmod>
            break;
 8003086:	2200      	movs	r2, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003088:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 800308c:	4b3c      	ldr	r3, [pc, #240]	; (8003180 <UART_SetConfig+0x6d0>)
 800308e:	4299      	cmp	r1, r3
 8003090:	f63f adb9 	bhi.w	8002c06 <UART_SetConfig+0x156>
          huart->Instance->BRR = usartdiv;
 8003094:	682b      	ldr	r3, [r5, #0]
 8003096:	60d8      	str	r0, [r3, #12]
 8003098:	e65e      	b.n	8002d58 <UART_SetConfig+0x2a8>
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800309a:	4668      	mov	r0, sp
 800309c:	f7ff fa1a 	bl	80024d4 <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80030a0:	9801      	ldr	r0, [sp, #4]
 80030a2:	e7c1      	b.n	8003028 <UART_SetConfig+0x578>
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80030a4:	a803      	add	r0, sp, #12
 80030a6:	f7ff fabf 	bl	8002628 <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80030aa:	9804      	ldr	r0, [sp, #16]
 80030ac:	e7bc      	b.n	8003028 <UART_SetConfig+0x578>
 80030ae:	2202      	movs	r2, #2
 80030b0:	e7d5      	b.n	800305e <UART_SetConfig+0x5ae>
 80030b2:	2204      	movs	r2, #4
 80030b4:	e7d3      	b.n	800305e <UART_SetConfig+0x5ae>
 80030b6:	2206      	movs	r2, #6
 80030b8:	e7d1      	b.n	800305e <UART_SetConfig+0x5ae>
 80030ba:	2208      	movs	r2, #8
 80030bc:	e7cf      	b.n	800305e <UART_SetConfig+0x5ae>
 80030be:	220a      	movs	r2, #10
 80030c0:	e7cd      	b.n	800305e <UART_SetConfig+0x5ae>
 80030c2:	220c      	movs	r2, #12
 80030c4:	e7cb      	b.n	800305e <UART_SetConfig+0x5ae>
 80030c6:	2210      	movs	r2, #16
 80030c8:	e7c9      	b.n	800305e <UART_SetConfig+0x5ae>
 80030ca:	2220      	movs	r2, #32
 80030cc:	e7c7      	b.n	800305e <UART_SetConfig+0x5ae>
 80030ce:	2240      	movs	r2, #64	; 0x40
 80030d0:	e7c5      	b.n	800305e <UART_SetConfig+0x5ae>
 80030d2:	2280      	movs	r2, #128	; 0x80
 80030d4:	e7c3      	b.n	800305e <UART_SetConfig+0x5ae>
 80030d6:	2201      	movs	r2, #1
 80030d8:	e7c1      	b.n	800305e <UART_SetConfig+0x5ae>
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80030da:	2202      	movs	r2, #2
 80030dc:	e791      	b.n	8003002 <UART_SetConfig+0x552>
 80030de:	2204      	movs	r2, #4
 80030e0:	e78f      	b.n	8003002 <UART_SetConfig+0x552>
 80030e2:	2206      	movs	r2, #6
 80030e4:	e78d      	b.n	8003002 <UART_SetConfig+0x552>
 80030e6:	2208      	movs	r2, #8
 80030e8:	e78b      	b.n	8003002 <UART_SetConfig+0x552>
 80030ea:	220a      	movs	r2, #10
 80030ec:	e789      	b.n	8003002 <UART_SetConfig+0x552>
 80030ee:	220c      	movs	r2, #12
 80030f0:	e787      	b.n	8003002 <UART_SetConfig+0x552>
 80030f2:	2210      	movs	r2, #16
 80030f4:	e785      	b.n	8003002 <UART_SetConfig+0x552>
 80030f6:	2220      	movs	r2, #32
 80030f8:	e783      	b.n	8003002 <UART_SetConfig+0x552>
 80030fa:	2240      	movs	r2, #64	; 0x40
 80030fc:	e781      	b.n	8003002 <UART_SetConfig+0x552>
 80030fe:	2280      	movs	r2, #128	; 0x80
 8003100:	e77f      	b.n	8003002 <UART_SetConfig+0x552>
 8003102:	2201      	movs	r2, #1
 8003104:	e77d      	b.n	8003002 <UART_SetConfig+0x552>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003106:	2b00      	cmp	r3, #0
 8003108:	d05b      	beq.n	80031c2 <UART_SetConfig+0x712>
 800310a:	2b01      	cmp	r3, #1
 800310c:	d03a      	beq.n	8003184 <UART_SetConfig+0x6d4>
 800310e:	2b02      	cmp	r3, #2
 8003110:	d041      	beq.n	8003196 <UART_SetConfig+0x6e6>
 8003112:	2b03      	cmp	r3, #3
 8003114:	d041      	beq.n	800319a <UART_SetConfig+0x6ea>
 8003116:	2b04      	cmp	r3, #4
 8003118:	d043      	beq.n	80031a2 <UART_SetConfig+0x6f2>
 800311a:	2b05      	cmp	r3, #5
 800311c:	d043      	beq.n	80031a6 <UART_SetConfig+0x6f6>
 800311e:	2b06      	cmp	r3, #6
 8003120:	d043      	beq.n	80031aa <UART_SetConfig+0x6fa>
 8003122:	2b07      	cmp	r3, #7
 8003124:	d045      	beq.n	80031b2 <UART_SetConfig+0x702>
 8003126:	2b08      	cmp	r3, #8
 8003128:	d045      	beq.n	80031b6 <UART_SetConfig+0x706>
 800312a:	2b09      	cmp	r3, #9
 800312c:	d045      	beq.n	80031ba <UART_SetConfig+0x70a>
 800312e:	2b0a      	cmp	r3, #10
 8003130:	d045      	beq.n	80031be <UART_SetConfig+0x70e>
 8003132:	2b0b      	cmp	r3, #11
 8003134:	d145      	bne.n	80031c2 <UART_SetConfig+0x712>
 8003136:	4802      	ldr	r0, [pc, #8]	; (8003140 <UART_SetConfig+0x690>)
 8003138:	2100      	movs	r1, #0
 800313a:	e025      	b.n	8003188 <UART_SetConfig+0x6d8>
 800313c:	0003d090 	.word	0x0003d090
 8003140:	03d09000 	.word	0x03d09000
 8003144:	003d0900 	.word	0x003d0900
 8003148:	01e84800 	.word	0x01e84800
 800314c:	00f42400 	.word	0x00f42400
 8003150:	00a2c2aa 	.word	0x00a2c2aa
 8003154:	007a1200 	.word	0x007a1200
 8003158:	0061a800 	.word	0x0061a800
 800315c:	00516155 	.word	0x00516155
 8003160:	001e8480 	.word	0x001e8480
 8003164:	000f4240 	.word	0x000f4240
 8003168:	000a2c2a 	.word	0x000a2c2a
 800316c:	0007a120 	.word	0x0007a120
 8003170:	00061a80 	.word	0x00061a80
 8003174:	00051615 	.word	0x00051615
 8003178:	0001e848 	.word	0x0001e848
 800317c:	58024400 	.word	0x58024400
 8003180:	000ffcff 	.word	0x000ffcff
 8003184:	48ae      	ldr	r0, [pc, #696]	; (8003440 <UART_SetConfig+0x990>)
 8003186:	2101      	movs	r1, #1
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003188:	1900      	adds	r0, r0, r4
 800318a:	4632      	mov	r2, r6
 800318c:	f04f 0300 	mov.w	r3, #0
 8003190:	f141 0100 	adc.w	r1, r1, #0
 8003194:	e775      	b.n	8003082 <UART_SetConfig+0x5d2>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003196:	48ab      	ldr	r0, [pc, #684]	; (8003444 <UART_SetConfig+0x994>)
 8003198:	e7ce      	b.n	8003138 <UART_SetConfig+0x688>
 800319a:	a1a1      	add	r1, pc, #644	; (adr r1, 8003420 <UART_SetConfig+0x970>)
 800319c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80031a0:	e7f2      	b.n	8003188 <UART_SetConfig+0x6d8>
 80031a2:	48a9      	ldr	r0, [pc, #676]	; (8003448 <UART_SetConfig+0x998>)
 80031a4:	e7c8      	b.n	8003138 <UART_SetConfig+0x688>
 80031a6:	48a9      	ldr	r0, [pc, #676]	; (800344c <UART_SetConfig+0x99c>)
 80031a8:	e7c6      	b.n	8003138 <UART_SetConfig+0x688>
 80031aa:	a19f      	add	r1, pc, #636	; (adr r1, 8003428 <UART_SetConfig+0x978>)
 80031ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80031b0:	e7ea      	b.n	8003188 <UART_SetConfig+0x6d8>
 80031b2:	48a7      	ldr	r0, [pc, #668]	; (8003450 <UART_SetConfig+0x9a0>)
 80031b4:	e7c0      	b.n	8003138 <UART_SetConfig+0x688>
 80031b6:	48a7      	ldr	r0, [pc, #668]	; (8003454 <UART_SetConfig+0x9a4>)
 80031b8:	e7be      	b.n	8003138 <UART_SetConfig+0x688>
 80031ba:	48a7      	ldr	r0, [pc, #668]	; (8003458 <UART_SetConfig+0x9a8>)
 80031bc:	e7bc      	b.n	8003138 <UART_SetConfig+0x688>
 80031be:	48a7      	ldr	r0, [pc, #668]	; (800345c <UART_SetConfig+0x9ac>)
 80031c0:	e7ba      	b.n	8003138 <UART_SetConfig+0x688>
 80031c2:	48a7      	ldr	r0, [pc, #668]	; (8003460 <UART_SetConfig+0x9b0>)
 80031c4:	2103      	movs	r1, #3
 80031c6:	e7df      	b.n	8003188 <UART_SetConfig+0x6d8>
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80031c8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80031ca:	b38b      	cbz	r3, 8003230 <UART_SetConfig+0x780>
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d016      	beq.n	80031fe <UART_SetConfig+0x74e>
 80031d0:	2b02      	cmp	r3, #2
 80031d2:	d016      	beq.n	8003202 <UART_SetConfig+0x752>
 80031d4:	2b03      	cmp	r3, #3
 80031d6:	d016      	beq.n	8003206 <UART_SetConfig+0x756>
 80031d8:	2b04      	cmp	r3, #4
 80031da:	d019      	beq.n	8003210 <UART_SetConfig+0x760>
 80031dc:	2b05      	cmp	r3, #5
 80031de:	d019      	beq.n	8003214 <UART_SetConfig+0x764>
 80031e0:	2b06      	cmp	r3, #6
 80031e2:	d019      	beq.n	8003218 <UART_SetConfig+0x768>
 80031e4:	2b07      	cmp	r3, #7
 80031e6:	d01b      	beq.n	8003220 <UART_SetConfig+0x770>
 80031e8:	2b08      	cmp	r3, #8
 80031ea:	d01b      	beq.n	8003224 <UART_SetConfig+0x774>
 80031ec:	2b09      	cmp	r3, #9
 80031ee:	d01b      	beq.n	8003228 <UART_SetConfig+0x778>
 80031f0:	2b0a      	cmp	r3, #10
 80031f2:	d01b      	beq.n	800322c <UART_SetConfig+0x77c>
 80031f4:	2b0b      	cmp	r3, #11
 80031f6:	d11b      	bne.n	8003230 <UART_SetConfig+0x780>
 80031f8:	489a      	ldr	r0, [pc, #616]	; (8003464 <UART_SetConfig+0x9b4>)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80031fa:	2100      	movs	r1, #0
 80031fc:	e006      	b.n	800320c <UART_SetConfig+0x75c>
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80031fe:	4895      	ldr	r0, [pc, #596]	; (8003454 <UART_SetConfig+0x9a4>)
 8003200:	e7fb      	b.n	80031fa <UART_SetConfig+0x74a>
 8003202:	4895      	ldr	r0, [pc, #596]	; (8003458 <UART_SetConfig+0x9a8>)
 8003204:	e7f9      	b.n	80031fa <UART_SetConfig+0x74a>
 8003206:	a18a      	add	r1, pc, #552	; (adr r1, 8003430 <UART_SetConfig+0x980>)
 8003208:	e9d1 0100 	ldrd	r0, r1, [r1]
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800320c:	0874      	lsrs	r4, r6, #1
 800320e:	e7bb      	b.n	8003188 <UART_SetConfig+0x6d8>
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003210:	4892      	ldr	r0, [pc, #584]	; (800345c <UART_SetConfig+0x9ac>)
 8003212:	e7f2      	b.n	80031fa <UART_SetConfig+0x74a>
 8003214:	4894      	ldr	r0, [pc, #592]	; (8003468 <UART_SetConfig+0x9b8>)
 8003216:	e7f0      	b.n	80031fa <UART_SetConfig+0x74a>
 8003218:	a187      	add	r1, pc, #540	; (adr r1, 8003438 <UART_SetConfig+0x988>)
 800321a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800321e:	e7f5      	b.n	800320c <UART_SetConfig+0x75c>
 8003220:	4892      	ldr	r0, [pc, #584]	; (800346c <UART_SetConfig+0x9bc>)
 8003222:	e7ea      	b.n	80031fa <UART_SetConfig+0x74a>
 8003224:	4892      	ldr	r0, [pc, #584]	; (8003470 <UART_SetConfig+0x9c0>)
 8003226:	e7e8      	b.n	80031fa <UART_SetConfig+0x74a>
 8003228:	4892      	ldr	r0, [pc, #584]	; (8003474 <UART_SetConfig+0x9c4>)
 800322a:	e7e6      	b.n	80031fa <UART_SetConfig+0x74a>
 800322c:	4892      	ldr	r0, [pc, #584]	; (8003478 <UART_SetConfig+0x9c8>)
 800322e:	e7e4      	b.n	80031fa <UART_SetConfig+0x74a>
 8003230:	4887      	ldr	r0, [pc, #540]	; (8003450 <UART_SetConfig+0x9a0>)
 8003232:	e7e2      	b.n	80031fa <UART_SetConfig+0x74a>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003234:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003236:	b39b      	cbz	r3, 80032a0 <UART_SetConfig+0x7f0>
 8003238:	2b01      	cmp	r3, #1
 800323a:	d016      	beq.n	800326a <UART_SetConfig+0x7ba>
 800323c:	2b02      	cmp	r3, #2
 800323e:	d017      	beq.n	8003270 <UART_SetConfig+0x7c0>
 8003240:	2b03      	cmp	r3, #3
 8003242:	d018      	beq.n	8003276 <UART_SetConfig+0x7c6>
 8003244:	2b04      	cmp	r3, #4
 8003246:	d018      	beq.n	800327a <UART_SetConfig+0x7ca>
 8003248:	2b05      	cmp	r3, #5
 800324a:	d019      	beq.n	8003280 <UART_SetConfig+0x7d0>
 800324c:	2b06      	cmp	r3, #6
 800324e:	d019      	beq.n	8003284 <UART_SetConfig+0x7d4>
 8003250:	2b07      	cmp	r3, #7
 8003252:	d019      	beq.n	8003288 <UART_SetConfig+0x7d8>
 8003254:	2b08      	cmp	r3, #8
 8003256:	d01a      	beq.n	800328e <UART_SetConfig+0x7de>
 8003258:	2b09      	cmp	r3, #9
 800325a:	d01b      	beq.n	8003294 <UART_SetConfig+0x7e4>
 800325c:	2b0a      	cmp	r3, #10
 800325e:	d01c      	beq.n	800329a <UART_SetConfig+0x7ea>
 8003260:	2b0b      	cmp	r3, #11
 8003262:	d11d      	bne.n	80032a0 <UART_SetConfig+0x7f0>
 8003264:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003268:	e7c7      	b.n	80031fa <UART_SetConfig+0x74a>
 800326a:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800326e:	e7c4      	b.n	80031fa <UART_SetConfig+0x74a>
 8003270:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8003274:	e7c1      	b.n	80031fa <UART_SetConfig+0x74a>
 8003276:	4881      	ldr	r0, [pc, #516]	; (800347c <UART_SetConfig+0x9cc>)
 8003278:	e7bf      	b.n	80031fa <UART_SetConfig+0x74a>
 800327a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800327e:	e7bc      	b.n	80031fa <UART_SetConfig+0x74a>
 8003280:	487f      	ldr	r0, [pc, #508]	; (8003480 <UART_SetConfig+0x9d0>)
 8003282:	e7ba      	b.n	80031fa <UART_SetConfig+0x74a>
 8003284:	487f      	ldr	r0, [pc, #508]	; (8003484 <UART_SetConfig+0x9d4>)
 8003286:	e7b8      	b.n	80031fa <UART_SetConfig+0x74a>
 8003288:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800328c:	e7b5      	b.n	80031fa <UART_SetConfig+0x74a>
 800328e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8003292:	e7b2      	b.n	80031fa <UART_SetConfig+0x74a>
 8003294:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8003298:	e7af      	b.n	80031fa <UART_SetConfig+0x74a>
 800329a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800329e:	e7ac      	b.n	80031fa <UART_SetConfig+0x74a>
 80032a0:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80032a4:	e7a9      	b.n	80031fa <UART_SetConfig+0x74a>
    switch (clocksource)
 80032a6:	2c20      	cmp	r4, #32
 80032a8:	f000 818e 	beq.w	80035c8 <UART_SetConfig+0xb18>
 80032ac:	2c40      	cmp	r4, #64	; 0x40
 80032ae:	f000 81c4 	beq.w	800363a <UART_SetConfig+0xb8a>
 80032b2:	2c10      	cmp	r4, #16
 80032b4:	f47f ac45 	bne.w	8002b42 <UART_SetConfig+0x92>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80032b8:	4b73      	ldr	r3, [pc, #460]	; (8003488 <UART_SetConfig+0x9d8>)
 80032ba:	6869      	ldr	r1, [r5, #4]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	f012 0f20 	tst.w	r2, #32
 80032c2:	f000 814b 	beq.w	800355c <UART_SetConfig+0xaac>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a68      	ldr	r2, [pc, #416]	; (800346c <UART_SetConfig+0x9bc>)
 80032ca:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80032ce:	fa22 f303 	lsr.w	r3, r2, r3
 80032d2:	2800      	cmp	r0, #0
 80032d4:	f000 812c 	beq.w	8003530 <UART_SetConfig+0xa80>
 80032d8:	2801      	cmp	r0, #1
 80032da:	f000 812b 	beq.w	8003534 <UART_SetConfig+0xa84>
 80032de:	2802      	cmp	r0, #2
 80032e0:	f000 812a 	beq.w	8003538 <UART_SetConfig+0xa88>
 80032e4:	2803      	cmp	r0, #3
 80032e6:	f000 8129 	beq.w	800353c <UART_SetConfig+0xa8c>
 80032ea:	2804      	cmp	r0, #4
 80032ec:	f000 8128 	beq.w	8003540 <UART_SetConfig+0xa90>
 80032f0:	2805      	cmp	r0, #5
 80032f2:	f000 8127 	beq.w	8003544 <UART_SetConfig+0xa94>
 80032f6:	2806      	cmp	r0, #6
 80032f8:	f000 8126 	beq.w	8003548 <UART_SetConfig+0xa98>
 80032fc:	2807      	cmp	r0, #7
 80032fe:	f000 8125 	beq.w	800354c <UART_SetConfig+0xa9c>
 8003302:	2808      	cmp	r0, #8
 8003304:	f000 8124 	beq.w	8003550 <UART_SetConfig+0xaa0>
 8003308:	2809      	cmp	r0, #9
 800330a:	f000 8123 	beq.w	8003554 <UART_SetConfig+0xaa4>
 800330e:	280a      	cmp	r0, #10
 8003310:	f000 8122 	beq.w	8003558 <UART_SetConfig+0xaa8>
 8003314:	280b      	cmp	r0, #11
 8003316:	bf14      	ite	ne
 8003318:	2201      	movne	r2, #1
 800331a:	f44f 7280 	moveq.w	r2, #256	; 0x100
 800331e:	fbb3 f2f2 	udiv	r2, r3, r2
 8003322:	e01f      	b.n	8003364 <UART_SetConfig+0x8b4>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003324:	f7fe fb5c 	bl	80019e0 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003328:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800332a:	b309      	cbz	r1, 8003370 <UART_SetConfig+0x8c0>
 800332c:	2901      	cmp	r1, #1
 800332e:	d021      	beq.n	8003374 <UART_SetConfig+0x8c4>
 8003330:	2902      	cmp	r1, #2
 8003332:	d021      	beq.n	8003378 <UART_SetConfig+0x8c8>
 8003334:	2903      	cmp	r1, #3
 8003336:	d021      	beq.n	800337c <UART_SetConfig+0x8cc>
 8003338:	2904      	cmp	r1, #4
 800333a:	d021      	beq.n	8003380 <UART_SetConfig+0x8d0>
 800333c:	2905      	cmp	r1, #5
 800333e:	d021      	beq.n	8003384 <UART_SetConfig+0x8d4>
 8003340:	2906      	cmp	r1, #6
 8003342:	d021      	beq.n	8003388 <UART_SetConfig+0x8d8>
 8003344:	2907      	cmp	r1, #7
 8003346:	d021      	beq.n	800338c <UART_SetConfig+0x8dc>
 8003348:	2908      	cmp	r1, #8
 800334a:	d021      	beq.n	8003390 <UART_SetConfig+0x8e0>
 800334c:	2909      	cmp	r1, #9
 800334e:	d021      	beq.n	8003394 <UART_SetConfig+0x8e4>
 8003350:	290a      	cmp	r1, #10
 8003352:	d021      	beq.n	8003398 <UART_SetConfig+0x8e8>
 8003354:	290b      	cmp	r1, #11
 8003356:	bf14      	ite	ne
 8003358:	2201      	movne	r2, #1
 800335a:	f44f 7280 	moveq.w	r2, #256	; 0x100
 800335e:	6869      	ldr	r1, [r5, #4]
 8003360:	fbb0 f2f2 	udiv	r2, r0, r2
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003364:	084b      	lsrs	r3, r1, #1
 8003366:	eb03 0342 	add.w	r3, r3, r2, lsl #1
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800336a:	fbb3 f3f1 	udiv	r3, r3, r1
 800336e:	e03a      	b.n	80033e6 <UART_SetConfig+0x936>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003370:	2201      	movs	r2, #1
 8003372:	e7f4      	b.n	800335e <UART_SetConfig+0x8ae>
 8003374:	2202      	movs	r2, #2
 8003376:	e7f2      	b.n	800335e <UART_SetConfig+0x8ae>
 8003378:	2204      	movs	r2, #4
 800337a:	e7f0      	b.n	800335e <UART_SetConfig+0x8ae>
 800337c:	2206      	movs	r2, #6
 800337e:	e7ee      	b.n	800335e <UART_SetConfig+0x8ae>
 8003380:	2208      	movs	r2, #8
 8003382:	e7ec      	b.n	800335e <UART_SetConfig+0x8ae>
 8003384:	220a      	movs	r2, #10
 8003386:	e7ea      	b.n	800335e <UART_SetConfig+0x8ae>
 8003388:	220c      	movs	r2, #12
 800338a:	e7e8      	b.n	800335e <UART_SetConfig+0x8ae>
 800338c:	2210      	movs	r2, #16
 800338e:	e7e6      	b.n	800335e <UART_SetConfig+0x8ae>
 8003390:	2220      	movs	r2, #32
 8003392:	e7e4      	b.n	800335e <UART_SetConfig+0x8ae>
 8003394:	2240      	movs	r2, #64	; 0x40
 8003396:	e7e2      	b.n	800335e <UART_SetConfig+0x8ae>
 8003398:	2280      	movs	r2, #128	; 0x80
 800339a:	e7e0      	b.n	800335e <UART_SetConfig+0x8ae>
        pclk = HAL_RCC_GetPCLK2Freq();
 800339c:	f7fe fb32 	bl	8001a04 <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80033a0:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80033a2:	b1c2      	cbz	r2, 80033d6 <UART_SetConfig+0x926>
 80033a4:	2a01      	cmp	r2, #1
 80033a6:	d02f      	beq.n	8003408 <UART_SetConfig+0x958>
 80033a8:	2a02      	cmp	r2, #2
 80033aa:	d02f      	beq.n	800340c <UART_SetConfig+0x95c>
 80033ac:	2a03      	cmp	r2, #3
 80033ae:	d02f      	beq.n	8003410 <UART_SetConfig+0x960>
 80033b0:	2a04      	cmp	r2, #4
 80033b2:	d02f      	beq.n	8003414 <UART_SetConfig+0x964>
 80033b4:	2a05      	cmp	r2, #5
 80033b6:	d02f      	beq.n	8003418 <UART_SetConfig+0x968>
 80033b8:	2a06      	cmp	r2, #6
 80033ba:	d067      	beq.n	800348c <UART_SetConfig+0x9dc>
 80033bc:	2a07      	cmp	r2, #7
 80033be:	d067      	beq.n	8003490 <UART_SetConfig+0x9e0>
 80033c0:	2a08      	cmp	r2, #8
 80033c2:	d067      	beq.n	8003494 <UART_SetConfig+0x9e4>
 80033c4:	2a09      	cmp	r2, #9
 80033c6:	d067      	beq.n	8003498 <UART_SetConfig+0x9e8>
 80033c8:	2a0a      	cmp	r2, #10
 80033ca:	d067      	beq.n	800349c <UART_SetConfig+0x9ec>
 80033cc:	2a0b      	cmp	r2, #11
 80033ce:	bf14      	ite	ne
 80033d0:	2401      	movne	r4, #1
 80033d2:	f44f 7480 	moveq.w	r4, #256	; 0x100
 80033d6:	686a      	ldr	r2, [r5, #4]
 80033d8:	fbb0 f4f4 	udiv	r4, r0, r4
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80033dc:	0853      	lsrs	r3, r2, #1
 80033de:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 80033e2:	fbb3 f3f2 	udiv	r3, r3, r2
 80033e6:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80033e8:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033ea:	f1a3 0010 	sub.w	r0, r3, #16
 80033ee:	f64f 71ef 	movw	r1, #65519	; 0xffef
 80033f2:	4288      	cmp	r0, r1
 80033f4:	f63f ac07 	bhi.w	8002c06 <UART_SetConfig+0x156>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80033f8:	f023 010f 	bic.w	r1, r3, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80033fc:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 8003400:	6828      	ldr	r0, [r5, #0]
 8003402:	430b      	orrs	r3, r1
 8003404:	60c3      	str	r3, [r0, #12]
 8003406:	e4a7      	b.n	8002d58 <UART_SetConfig+0x2a8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003408:	2402      	movs	r4, #2
 800340a:	e7e4      	b.n	80033d6 <UART_SetConfig+0x926>
 800340c:	2404      	movs	r4, #4
 800340e:	e7e2      	b.n	80033d6 <UART_SetConfig+0x926>
 8003410:	2406      	movs	r4, #6
 8003412:	e7e0      	b.n	80033d6 <UART_SetConfig+0x926>
 8003414:	2408      	movs	r4, #8
 8003416:	e7de      	b.n	80033d6 <UART_SetConfig+0x926>
 8003418:	240a      	movs	r4, #10
 800341a:	e7dc      	b.n	80033d6 <UART_SetConfig+0x926>
 800341c:	f3af 8000 	nop.w
 8003420:	a2c2aa00 	.word	0xa2c2aa00
 8003424:	00000000 	.word	0x00000000
 8003428:	51615500 	.word	0x51615500
 800342c:	00000000 	.word	0x00000000
 8003430:	0a2c2a00 	.word	0x0a2c2a00
 8003434:	00000000 	.word	0x00000000
 8003438:	05161500 	.word	0x05161500
 800343c:	00000000 	.word	0x00000000
 8003440:	e8480000 	.word	0xe8480000
 8003444:	f4240000 	.word	0xf4240000
 8003448:	7a120000 	.word	0x7a120000
 800344c:	61a80000 	.word	0x61a80000
 8003450:	3d090000 	.word	0x3d090000
 8003454:	1e848000 	.word	0x1e848000
 8003458:	0f424000 	.word	0x0f424000
 800345c:	07a12000 	.word	0x07a12000
 8003460:	d0900000 	.word	0xd0900000
 8003464:	003d0900 	.word	0x003d0900
 8003468:	061a8000 	.word	0x061a8000
 800346c:	03d09000 	.word	0x03d09000
 8003470:	01e84800 	.word	0x01e84800
 8003474:	00f42400 	.word	0x00f42400
 8003478:	007a1200 	.word	0x007a1200
 800347c:	00155500 	.word	0x00155500
 8003480:	000ccc00 	.word	0x000ccc00
 8003484:	000aaa00 	.word	0x000aaa00
 8003488:	58024400 	.word	0x58024400
 800348c:	240c      	movs	r4, #12
 800348e:	e7a2      	b.n	80033d6 <UART_SetConfig+0x926>
 8003490:	2410      	movs	r4, #16
 8003492:	e7a0      	b.n	80033d6 <UART_SetConfig+0x926>
 8003494:	2420      	movs	r4, #32
 8003496:	e79e      	b.n	80033d6 <UART_SetConfig+0x926>
 8003498:	2440      	movs	r4, #64	; 0x40
 800349a:	e79c      	b.n	80033d6 <UART_SetConfig+0x926>
 800349c:	2480      	movs	r4, #128	; 0x80
 800349e:	e79a      	b.n	80033d6 <UART_SetConfig+0x926>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80034a0:	4668      	mov	r0, sp
 80034a2:	f7ff f817 	bl	80024d4 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80034a6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80034a8:	9b01      	ldr	r3, [sp, #4]
 80034aa:	b36a      	cbz	r2, 8003508 <UART_SetConfig+0xa58>
 80034ac:	2a01      	cmp	r2, #1
 80034ae:	d02d      	beq.n	800350c <UART_SetConfig+0xa5c>
 80034b0:	2a02      	cmp	r2, #2
 80034b2:	d016      	beq.n	80034e2 <UART_SetConfig+0xa32>
 80034b4:	2a03      	cmp	r2, #3
 80034b6:	d02d      	beq.n	8003514 <UART_SetConfig+0xa64>
 80034b8:	2a04      	cmp	r2, #4
 80034ba:	d011      	beq.n	80034e0 <UART_SetConfig+0xa30>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80034bc:	2a05      	cmp	r2, #5
 80034be:	d02b      	beq.n	8003518 <UART_SetConfig+0xa68>
 80034c0:	2a06      	cmp	r2, #6
 80034c2:	d02b      	beq.n	800351c <UART_SetConfig+0xa6c>
 80034c4:	2a07      	cmp	r2, #7
 80034c6:	d02b      	beq.n	8003520 <UART_SetConfig+0xa70>
 80034c8:	2a08      	cmp	r2, #8
 80034ca:	d02b      	beq.n	8003524 <UART_SetConfig+0xa74>
 80034cc:	2a09      	cmp	r2, #9
 80034ce:	d02b      	beq.n	8003528 <UART_SetConfig+0xa78>
 80034d0:	2a0a      	cmp	r2, #10
 80034d2:	d02b      	beq.n	800352c <UART_SetConfig+0xa7c>
 80034d4:	2a0b      	cmp	r2, #11
 80034d6:	bf14      	ite	ne
 80034d8:	2401      	movne	r4, #1
 80034da:	f44f 7480 	moveq.w	r4, #256	; 0x100
 80034de:	e000      	b.n	80034e2 <UART_SetConfig+0xa32>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80034e0:	2408      	movs	r4, #8
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80034e2:	686a      	ldr	r2, [r5, #4]
 80034e4:	fbb3 f4f4 	udiv	r4, r3, r4
 80034e8:	e778      	b.n	80033dc <UART_SetConfig+0x92c>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80034ea:	a803      	add	r0, sp, #12
 80034ec:	f7ff f89c 	bl	8002628 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80034f0:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80034f2:	9b04      	ldr	r3, [sp, #16]
 80034f4:	b142      	cbz	r2, 8003508 <UART_SetConfig+0xa58>
 80034f6:	2a01      	cmp	r2, #1
 80034f8:	d008      	beq.n	800350c <UART_SetConfig+0xa5c>
 80034fa:	2a02      	cmp	r2, #2
 80034fc:	d008      	beq.n	8003510 <UART_SetConfig+0xa60>
 80034fe:	2a03      	cmp	r2, #3
 8003500:	d008      	beq.n	8003514 <UART_SetConfig+0xa64>
 8003502:	2a04      	cmp	r2, #4
 8003504:	d1da      	bne.n	80034bc <UART_SetConfig+0xa0c>
 8003506:	e7ec      	b.n	80034e2 <UART_SetConfig+0xa32>
 8003508:	2401      	movs	r4, #1
 800350a:	e7ea      	b.n	80034e2 <UART_SetConfig+0xa32>
 800350c:	2402      	movs	r4, #2
 800350e:	e7e8      	b.n	80034e2 <UART_SetConfig+0xa32>
 8003510:	2404      	movs	r4, #4
 8003512:	e7e6      	b.n	80034e2 <UART_SetConfig+0xa32>
 8003514:	2406      	movs	r4, #6
 8003516:	e7e4      	b.n	80034e2 <UART_SetConfig+0xa32>
 8003518:	240a      	movs	r4, #10
 800351a:	e7e2      	b.n	80034e2 <UART_SetConfig+0xa32>
 800351c:	240c      	movs	r4, #12
 800351e:	e7e0      	b.n	80034e2 <UART_SetConfig+0xa32>
 8003520:	2410      	movs	r4, #16
 8003522:	e7de      	b.n	80034e2 <UART_SetConfig+0xa32>
 8003524:	2420      	movs	r4, #32
 8003526:	e7dc      	b.n	80034e2 <UART_SetConfig+0xa32>
 8003528:	2440      	movs	r4, #64	; 0x40
 800352a:	e7da      	b.n	80034e2 <UART_SetConfig+0xa32>
 800352c:	2480      	movs	r4, #128	; 0x80
 800352e:	e7d8      	b.n	80034e2 <UART_SetConfig+0xa32>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003530:	2201      	movs	r2, #1
 8003532:	e6f4      	b.n	800331e <UART_SetConfig+0x86e>
 8003534:	2202      	movs	r2, #2
 8003536:	e6f2      	b.n	800331e <UART_SetConfig+0x86e>
 8003538:	2204      	movs	r2, #4
 800353a:	e6f0      	b.n	800331e <UART_SetConfig+0x86e>
 800353c:	2206      	movs	r2, #6
 800353e:	e6ee      	b.n	800331e <UART_SetConfig+0x86e>
 8003540:	2208      	movs	r2, #8
 8003542:	e6ec      	b.n	800331e <UART_SetConfig+0x86e>
 8003544:	220a      	movs	r2, #10
 8003546:	e6ea      	b.n	800331e <UART_SetConfig+0x86e>
 8003548:	220c      	movs	r2, #12
 800354a:	e6e8      	b.n	800331e <UART_SetConfig+0x86e>
 800354c:	2210      	movs	r2, #16
 800354e:	e6e6      	b.n	800331e <UART_SetConfig+0x86e>
 8003550:	2220      	movs	r2, #32
 8003552:	e6e4      	b.n	800331e <UART_SetConfig+0x86e>
 8003554:	2240      	movs	r2, #64	; 0x40
 8003556:	e6e2      	b.n	800331e <UART_SetConfig+0x86e>
 8003558:	2280      	movs	r2, #128	; 0x80
 800355a:	e6e0      	b.n	800331e <UART_SetConfig+0x86e>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800355c:	b1f0      	cbz	r0, 800359c <UART_SetConfig+0xaec>
 800355e:	2801      	cmp	r0, #1
 8003560:	d01e      	beq.n	80035a0 <UART_SetConfig+0xaf0>
 8003562:	2802      	cmp	r0, #2
 8003564:	d01e      	beq.n	80035a4 <UART_SetConfig+0xaf4>
 8003566:	2803      	cmp	r0, #3
 8003568:	d01e      	beq.n	80035a8 <UART_SetConfig+0xaf8>
 800356a:	2804      	cmp	r0, #4
 800356c:	d01e      	beq.n	80035ac <UART_SetConfig+0xafc>
 800356e:	2805      	cmp	r0, #5
 8003570:	d01e      	beq.n	80035b0 <UART_SetConfig+0xb00>
 8003572:	2806      	cmp	r0, #6
 8003574:	d01e      	beq.n	80035b4 <UART_SetConfig+0xb04>
 8003576:	2807      	cmp	r0, #7
 8003578:	d01e      	beq.n	80035b8 <UART_SetConfig+0xb08>
 800357a:	2808      	cmp	r0, #8
 800357c:	d01e      	beq.n	80035bc <UART_SetConfig+0xb0c>
 800357e:	2809      	cmp	r0, #9
 8003580:	d01e      	beq.n	80035c0 <UART_SetConfig+0xb10>
 8003582:	280a      	cmp	r0, #10
 8003584:	d01e      	beq.n	80035c4 <UART_SetConfig+0xb14>
 8003586:	4ba3      	ldr	r3, [pc, #652]	; (8003814 <UART_SetConfig+0xd64>)
 8003588:	4aa3      	ldr	r2, [pc, #652]	; (8003818 <UART_SetConfig+0xd68>)
 800358a:	280b      	cmp	r0, #11
 800358c:	bf14      	ite	ne
 800358e:	4610      	movne	r0, r2
 8003590:	4618      	moveq	r0, r3
 8003592:	eb00 0051 	add.w	r0, r0, r1, lsr #1
 8003596:	fbb0 f3f1 	udiv	r3, r0, r1
 800359a:	e724      	b.n	80033e6 <UART_SetConfig+0x936>
 800359c:	489e      	ldr	r0, [pc, #632]	; (8003818 <UART_SetConfig+0xd68>)
 800359e:	e7f8      	b.n	8003592 <UART_SetConfig+0xae2>
 80035a0:	489e      	ldr	r0, [pc, #632]	; (800381c <UART_SetConfig+0xd6c>)
 80035a2:	e7f6      	b.n	8003592 <UART_SetConfig+0xae2>
 80035a4:	489e      	ldr	r0, [pc, #632]	; (8003820 <UART_SetConfig+0xd70>)
 80035a6:	e7f4      	b.n	8003592 <UART_SetConfig+0xae2>
 80035a8:	489e      	ldr	r0, [pc, #632]	; (8003824 <UART_SetConfig+0xd74>)
 80035aa:	e7f2      	b.n	8003592 <UART_SetConfig+0xae2>
 80035ac:	489e      	ldr	r0, [pc, #632]	; (8003828 <UART_SetConfig+0xd78>)
 80035ae:	e7f0      	b.n	8003592 <UART_SetConfig+0xae2>
 80035b0:	489e      	ldr	r0, [pc, #632]	; (800382c <UART_SetConfig+0xd7c>)
 80035b2:	e7ee      	b.n	8003592 <UART_SetConfig+0xae2>
 80035b4:	489e      	ldr	r0, [pc, #632]	; (8003830 <UART_SetConfig+0xd80>)
 80035b6:	e7ec      	b.n	8003592 <UART_SetConfig+0xae2>
 80035b8:	489e      	ldr	r0, [pc, #632]	; (8003834 <UART_SetConfig+0xd84>)
 80035ba:	e7ea      	b.n	8003592 <UART_SetConfig+0xae2>
 80035bc:	489e      	ldr	r0, [pc, #632]	; (8003838 <UART_SetConfig+0xd88>)
 80035be:	e7e8      	b.n	8003592 <UART_SetConfig+0xae2>
 80035c0:	489e      	ldr	r0, [pc, #632]	; (800383c <UART_SetConfig+0xd8c>)
 80035c2:	e7e6      	b.n	8003592 <UART_SetConfig+0xae2>
 80035c4:	489e      	ldr	r0, [pc, #632]	; (8003840 <UART_SetConfig+0xd90>)
 80035c6:	e7e4      	b.n	8003592 <UART_SetConfig+0xae2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80035c8:	b300      	cbz	r0, 800360c <UART_SetConfig+0xb5c>
 80035ca:	2801      	cmp	r0, #1
 80035cc:	d020      	beq.n	8003610 <UART_SetConfig+0xb60>
 80035ce:	2802      	cmp	r0, #2
 80035d0:	d020      	beq.n	8003614 <UART_SetConfig+0xb64>
 80035d2:	2803      	cmp	r0, #3
 80035d4:	d020      	beq.n	8003618 <UART_SetConfig+0xb68>
 80035d6:	2804      	cmp	r0, #4
 80035d8:	d020      	beq.n	800361c <UART_SetConfig+0xb6c>
 80035da:	2805      	cmp	r0, #5
 80035dc:	d020      	beq.n	8003620 <UART_SetConfig+0xb70>
 80035de:	2806      	cmp	r0, #6
 80035e0:	d020      	beq.n	8003624 <UART_SetConfig+0xb74>
 80035e2:	2807      	cmp	r0, #7
 80035e4:	d020      	beq.n	8003628 <UART_SetConfig+0xb78>
 80035e6:	2808      	cmp	r0, #8
 80035e8:	d020      	beq.n	800362c <UART_SetConfig+0xb7c>
 80035ea:	2809      	cmp	r0, #9
 80035ec:	d020      	beq.n	8003630 <UART_SetConfig+0xb80>
 80035ee:	280a      	cmp	r0, #10
 80035f0:	d020      	beq.n	8003634 <UART_SetConfig+0xb84>
 80035f2:	f647 2212 	movw	r2, #31250	; 0x7a12
 80035f6:	4b8f      	ldr	r3, [pc, #572]	; (8003834 <UART_SetConfig+0xd84>)
 80035f8:	280b      	cmp	r0, #11
 80035fa:	bf14      	ite	ne
 80035fc:	4618      	movne	r0, r3
 80035fe:	4610      	moveq	r0, r2
 8003600:	686b      	ldr	r3, [r5, #4]
 8003602:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8003606:	fbb0 f3f3 	udiv	r3, r0, r3
 800360a:	e6ec      	b.n	80033e6 <UART_SetConfig+0x936>
 800360c:	4889      	ldr	r0, [pc, #548]	; (8003834 <UART_SetConfig+0xd84>)
 800360e:	e7f7      	b.n	8003600 <UART_SetConfig+0xb50>
 8003610:	4889      	ldr	r0, [pc, #548]	; (8003838 <UART_SetConfig+0xd88>)
 8003612:	e7f5      	b.n	8003600 <UART_SetConfig+0xb50>
 8003614:	4889      	ldr	r0, [pc, #548]	; (800383c <UART_SetConfig+0xd8c>)
 8003616:	e7f3      	b.n	8003600 <UART_SetConfig+0xb50>
 8003618:	488a      	ldr	r0, [pc, #552]	; (8003844 <UART_SetConfig+0xd94>)
 800361a:	e7f1      	b.n	8003600 <UART_SetConfig+0xb50>
 800361c:	4888      	ldr	r0, [pc, #544]	; (8003840 <UART_SetConfig+0xd90>)
 800361e:	e7ef      	b.n	8003600 <UART_SetConfig+0xb50>
 8003620:	4889      	ldr	r0, [pc, #548]	; (8003848 <UART_SetConfig+0xd98>)
 8003622:	e7ed      	b.n	8003600 <UART_SetConfig+0xb50>
 8003624:	4889      	ldr	r0, [pc, #548]	; (800384c <UART_SetConfig+0xd9c>)
 8003626:	e7eb      	b.n	8003600 <UART_SetConfig+0xb50>
 8003628:	487a      	ldr	r0, [pc, #488]	; (8003814 <UART_SetConfig+0xd64>)
 800362a:	e7e9      	b.n	8003600 <UART_SetConfig+0xb50>
 800362c:	4888      	ldr	r0, [pc, #544]	; (8003850 <UART_SetConfig+0xda0>)
 800362e:	e7e7      	b.n	8003600 <UART_SetConfig+0xb50>
 8003630:	4888      	ldr	r0, [pc, #544]	; (8003854 <UART_SetConfig+0xda4>)
 8003632:	e7e5      	b.n	8003600 <UART_SetConfig+0xb50>
 8003634:	f24f 4024 	movw	r0, #62500	; 0xf424
 8003638:	e7e2      	b.n	8003600 <UART_SetConfig+0xb50>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800363a:	b1e8      	cbz	r0, 8003678 <UART_SetConfig+0xbc8>
 800363c:	2801      	cmp	r0, #1
 800363e:	d017      	beq.n	8003670 <UART_SetConfig+0xbc0>
 8003640:	2802      	cmp	r0, #2
 8003642:	d01c      	beq.n	800367e <UART_SetConfig+0xbce>
 8003644:	2803      	cmp	r0, #3
 8003646:	d01d      	beq.n	8003684 <UART_SetConfig+0xbd4>
 8003648:	2804      	cmp	r0, #4
 800364a:	d01e      	beq.n	800368a <UART_SetConfig+0xbda>
 800364c:	2805      	cmp	r0, #5
 800364e:	d01f      	beq.n	8003690 <UART_SetConfig+0xbe0>
 8003650:	2806      	cmp	r0, #6
 8003652:	d020      	beq.n	8003696 <UART_SetConfig+0xbe6>
 8003654:	2807      	cmp	r0, #7
 8003656:	d021      	beq.n	800369c <UART_SetConfig+0xbec>
 8003658:	2808      	cmp	r0, #8
 800365a:	d022      	beq.n	80036a2 <UART_SetConfig+0xbf2>
 800365c:	2809      	cmp	r0, #9
 800365e:	d023      	beq.n	80036a8 <UART_SetConfig+0xbf8>
 8003660:	280a      	cmp	r0, #10
 8003662:	d024      	beq.n	80036ae <UART_SetConfig+0xbfe>
 8003664:	280b      	cmp	r0, #11
 8003666:	bf14      	ite	ne
 8003668:	f44f 3280 	movne.w	r2, #65536	; 0x10000
 800366c:	f44f 7280 	moveq.w	r2, #256	; 0x100
 8003670:	6869      	ldr	r1, [r5, #4]
 8003672:	eb02 0351 	add.w	r3, r2, r1, lsr #1
 8003676:	e678      	b.n	800336a <UART_SetConfig+0x8ba>
 8003678:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800367c:	e7f8      	b.n	8003670 <UART_SetConfig+0xbc0>
 800367e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003682:	e7f5      	b.n	8003670 <UART_SetConfig+0xbc0>
 8003684:	f642 22aa 	movw	r2, #10922	; 0x2aaa
 8003688:	e7f2      	b.n	8003670 <UART_SetConfig+0xbc0>
 800368a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800368e:	e7ef      	b.n	8003670 <UART_SetConfig+0xbc0>
 8003690:	f641 1298 	movw	r2, #6552	; 0x1998
 8003694:	e7ec      	b.n	8003670 <UART_SetConfig+0xbc0>
 8003696:	f241 5254 	movw	r2, #5460	; 0x1554
 800369a:	e7e9      	b.n	8003670 <UART_SetConfig+0xbc0>
 800369c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80036a0:	e7e6      	b.n	8003670 <UART_SetConfig+0xbc0>
 80036a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80036a6:	e7e3      	b.n	8003670 <UART_SetConfig+0xbc0>
 80036a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80036ac:	e7e0      	b.n	8003670 <UART_SetConfig+0xbc0>
 80036ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036b2:	e7dd      	b.n	8003670 <UART_SetConfig+0xbc0>
        pclk = HAL_RCC_GetPCLK1Freq();
 80036b4:	f7fe f994 	bl	80019e0 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80036b8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80036ba:	b363      	cbz	r3, 8003716 <UART_SetConfig+0xc66>
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d02c      	beq.n	800371a <UART_SetConfig+0xc6a>
 80036c0:	2b02      	cmp	r3, #2
 80036c2:	d02c      	beq.n	800371e <UART_SetConfig+0xc6e>
 80036c4:	2b03      	cmp	r3, #3
 80036c6:	d02c      	beq.n	8003722 <UART_SetConfig+0xc72>
 80036c8:	2b04      	cmp	r3, #4
 80036ca:	d02c      	beq.n	8003726 <UART_SetConfig+0xc76>
 80036cc:	2b05      	cmp	r3, #5
 80036ce:	d02c      	beq.n	800372a <UART_SetConfig+0xc7a>
 80036d0:	2b06      	cmp	r3, #6
 80036d2:	d02c      	beq.n	800372e <UART_SetConfig+0xc7e>
 80036d4:	2b07      	cmp	r3, #7
 80036d6:	d02c      	beq.n	8003732 <UART_SetConfig+0xc82>
 80036d8:	2b08      	cmp	r3, #8
 80036da:	d02c      	beq.n	8003736 <UART_SetConfig+0xc86>
 80036dc:	2b09      	cmp	r3, #9
 80036de:	d02c      	beq.n	800373a <UART_SetConfig+0xc8a>
 80036e0:	2b0a      	cmp	r3, #10
 80036e2:	d02c      	beq.n	800373e <UART_SetConfig+0xc8e>
 80036e4:	2b0b      	cmp	r3, #11
 80036e6:	bf14      	ite	ne
 80036e8:	2301      	movne	r3, #1
 80036ea:	f44f 7380 	moveq.w	r3, #256	; 0x100
 80036ee:	686a      	ldr	r2, [r5, #4]
 80036f0:	fbb0 f3f3 	udiv	r3, r0, r3
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80036f4:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 80036f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80036fc:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80036fe:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003700:	f1a3 0010 	sub.w	r0, r3, #16
 8003704:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8003708:	4288      	cmp	r0, r1
 800370a:	f63f aa7c 	bhi.w	8002c06 <UART_SetConfig+0x156>
      huart->Instance->BRR = usartdiv;
 800370e:	6829      	ldr	r1, [r5, #0]
 8003710:	60cb      	str	r3, [r1, #12]
 8003712:	f7ff bb21 	b.w	8002d58 <UART_SetConfig+0x2a8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003716:	2301      	movs	r3, #1
 8003718:	e7e9      	b.n	80036ee <UART_SetConfig+0xc3e>
 800371a:	2302      	movs	r3, #2
 800371c:	e7e7      	b.n	80036ee <UART_SetConfig+0xc3e>
 800371e:	2304      	movs	r3, #4
 8003720:	e7e5      	b.n	80036ee <UART_SetConfig+0xc3e>
 8003722:	2306      	movs	r3, #6
 8003724:	e7e3      	b.n	80036ee <UART_SetConfig+0xc3e>
 8003726:	2308      	movs	r3, #8
 8003728:	e7e1      	b.n	80036ee <UART_SetConfig+0xc3e>
 800372a:	230a      	movs	r3, #10
 800372c:	e7df      	b.n	80036ee <UART_SetConfig+0xc3e>
 800372e:	230c      	movs	r3, #12
 8003730:	e7dd      	b.n	80036ee <UART_SetConfig+0xc3e>
 8003732:	2310      	movs	r3, #16
 8003734:	e7db      	b.n	80036ee <UART_SetConfig+0xc3e>
 8003736:	2320      	movs	r3, #32
 8003738:	e7d9      	b.n	80036ee <UART_SetConfig+0xc3e>
 800373a:	2340      	movs	r3, #64	; 0x40
 800373c:	e7d7      	b.n	80036ee <UART_SetConfig+0xc3e>
 800373e:	2380      	movs	r3, #128	; 0x80
 8003740:	e7d5      	b.n	80036ee <UART_SetConfig+0xc3e>
        pclk = HAL_RCC_GetPCLK2Freq();
 8003742:	f7fe f95f 	bl	8001a04 <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003746:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003748:	b1c3      	cbz	r3, 800377c <UART_SetConfig+0xccc>
 800374a:	2b01      	cmp	r3, #1
 800374c:	d01a      	beq.n	8003784 <UART_SetConfig+0xcd4>
 800374e:	2b02      	cmp	r3, #2
 8003750:	d01a      	beq.n	8003788 <UART_SetConfig+0xcd8>
 8003752:	2b03      	cmp	r3, #3
 8003754:	d01a      	beq.n	800378c <UART_SetConfig+0xcdc>
 8003756:	2b04      	cmp	r3, #4
 8003758:	d01a      	beq.n	8003790 <UART_SetConfig+0xce0>
 800375a:	2b05      	cmp	r3, #5
 800375c:	d01a      	beq.n	8003794 <UART_SetConfig+0xce4>
 800375e:	2b06      	cmp	r3, #6
 8003760:	d01a      	beq.n	8003798 <UART_SetConfig+0xce8>
 8003762:	2b07      	cmp	r3, #7
 8003764:	d01a      	beq.n	800379c <UART_SetConfig+0xcec>
 8003766:	2b08      	cmp	r3, #8
 8003768:	d01a      	beq.n	80037a0 <UART_SetConfig+0xcf0>
 800376a:	2b09      	cmp	r3, #9
 800376c:	d01a      	beq.n	80037a4 <UART_SetConfig+0xcf4>
 800376e:	2b0a      	cmp	r3, #10
 8003770:	d01a      	beq.n	80037a8 <UART_SetConfig+0xcf8>
 8003772:	2b0b      	cmp	r3, #11
 8003774:	bf14      	ite	ne
 8003776:	2401      	movne	r4, #1
 8003778:	f44f 7480 	moveq.w	r4, #256	; 0x100
 800377c:	686a      	ldr	r2, [r5, #4]
 800377e:	fbb0 f3f4 	udiv	r3, r0, r4
 8003782:	e7b7      	b.n	80036f4 <UART_SetConfig+0xc44>
 8003784:	2402      	movs	r4, #2
 8003786:	e7f9      	b.n	800377c <UART_SetConfig+0xccc>
 8003788:	2404      	movs	r4, #4
 800378a:	e7f7      	b.n	800377c <UART_SetConfig+0xccc>
 800378c:	2406      	movs	r4, #6
 800378e:	e7f5      	b.n	800377c <UART_SetConfig+0xccc>
 8003790:	2408      	movs	r4, #8
 8003792:	e7f3      	b.n	800377c <UART_SetConfig+0xccc>
 8003794:	240a      	movs	r4, #10
 8003796:	e7f1      	b.n	800377c <UART_SetConfig+0xccc>
 8003798:	240c      	movs	r4, #12
 800379a:	e7ef      	b.n	800377c <UART_SetConfig+0xccc>
 800379c:	2410      	movs	r4, #16
 800379e:	e7ed      	b.n	800377c <UART_SetConfig+0xccc>
 80037a0:	2420      	movs	r4, #32
 80037a2:	e7eb      	b.n	800377c <UART_SetConfig+0xccc>
 80037a4:	2440      	movs	r4, #64	; 0x40
 80037a6:	e7e9      	b.n	800377c <UART_SetConfig+0xccc>
 80037a8:	2480      	movs	r4, #128	; 0x80
 80037aa:	e7e7      	b.n	800377c <UART_SetConfig+0xccc>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80037ac:	2408      	movs	r4, #8
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80037ae:	6868      	ldr	r0, [r5, #4]
 80037b0:	fbb3 f3f4 	udiv	r3, r3, r4
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80037b4:	eb03 0350 	add.w	r3, r3, r0, lsr #1
 80037b8:	fbb3 f3f0 	udiv	r3, r3, r0
 80037bc:	e79e      	b.n	80036fc <UART_SetConfig+0xc4c>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80037be:	a803      	add	r0, sp, #12
 80037c0:	f7fe ff32 	bl	8002628 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80037c4:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80037c6:	9b04      	ldr	r3, [sp, #16]
 80037c8:	b14a      	cbz	r2, 80037de <UART_SetConfig+0xd2e>
 80037ca:	2a01      	cmp	r2, #1
 80037cc:	d009      	beq.n	80037e2 <UART_SetConfig+0xd32>
 80037ce:	2a02      	cmp	r2, #2
 80037d0:	d009      	beq.n	80037e6 <UART_SetConfig+0xd36>
 80037d2:	2a03      	cmp	r2, #3
 80037d4:	d009      	beq.n	80037ea <UART_SetConfig+0xd3a>
 80037d6:	2a04      	cmp	r2, #4
 80037d8:	f040 8125 	bne.w	8003a26 <UART_SetConfig+0xf76>
 80037dc:	e7e7      	b.n	80037ae <UART_SetConfig+0xcfe>
 80037de:	2401      	movs	r4, #1
 80037e0:	e7e5      	b.n	80037ae <UART_SetConfig+0xcfe>
 80037e2:	2402      	movs	r4, #2
 80037e4:	e7e3      	b.n	80037ae <UART_SetConfig+0xcfe>
 80037e6:	2404      	movs	r4, #4
 80037e8:	e7e1      	b.n	80037ae <UART_SetConfig+0xcfe>
 80037ea:	2406      	movs	r4, #6
 80037ec:	e7df      	b.n	80037ae <UART_SetConfig+0xcfe>
 80037ee:	240a      	movs	r4, #10
 80037f0:	e7dd      	b.n	80037ae <UART_SetConfig+0xcfe>
 80037f2:	240c      	movs	r4, #12
 80037f4:	e7db      	b.n	80037ae <UART_SetConfig+0xcfe>
 80037f6:	2410      	movs	r4, #16
 80037f8:	e7d9      	b.n	80037ae <UART_SetConfig+0xcfe>
 80037fa:	2420      	movs	r4, #32
 80037fc:	e7d7      	b.n	80037ae <UART_SetConfig+0xcfe>
 80037fe:	2440      	movs	r4, #64	; 0x40
 8003800:	e7d5      	b.n	80037ae <UART_SetConfig+0xcfe>
 8003802:	2480      	movs	r4, #128	; 0x80
 8003804:	e7d3      	b.n	80037ae <UART_SetConfig+0xcfe>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003806:	2201      	movs	r2, #1
 8003808:	e160      	b.n	8003acc <UART_SetConfig+0x101c>
 800380a:	2202      	movs	r2, #2
 800380c:	e15e      	b.n	8003acc <UART_SetConfig+0x101c>
 800380e:	2204      	movs	r2, #4
 8003810:	e15c      	b.n	8003acc <UART_SetConfig+0x101c>
 8003812:	bf00      	nop
 8003814:	0007a120 	.word	0x0007a120
 8003818:	07a12000 	.word	0x07a12000
 800381c:	03d09000 	.word	0x03d09000
 8003820:	01e84800 	.word	0x01e84800
 8003824:	01458554 	.word	0x01458554
 8003828:	00f42400 	.word	0x00f42400
 800382c:	00c35000 	.word	0x00c35000
 8003830:	00a2c2aa 	.word	0x00a2c2aa
 8003834:	007a1200 	.word	0x007a1200
 8003838:	003d0900 	.word	0x003d0900
 800383c:	001e8480 	.word	0x001e8480
 8003840:	000f4240 	.word	0x000f4240
 8003844:	00145854 	.word	0x00145854
 8003848:	000c3500 	.word	0x000c3500
 800384c:	000a2c2a 	.word	0x000a2c2a
 8003850:	0003d090 	.word	0x0003d090
 8003854:	0001e848 	.word	0x0001e848
 8003858:	2206      	movs	r2, #6
 800385a:	e137      	b.n	8003acc <UART_SetConfig+0x101c>
 800385c:	2208      	movs	r2, #8
 800385e:	e135      	b.n	8003acc <UART_SetConfig+0x101c>
 8003860:	220a      	movs	r2, #10
 8003862:	e133      	b.n	8003acc <UART_SetConfig+0x101c>
 8003864:	220c      	movs	r2, #12
 8003866:	e131      	b.n	8003acc <UART_SetConfig+0x101c>
 8003868:	2210      	movs	r2, #16
 800386a:	e12f      	b.n	8003acc <UART_SetConfig+0x101c>
 800386c:	2220      	movs	r2, #32
 800386e:	e12d      	b.n	8003acc <UART_SetConfig+0x101c>
 8003870:	2240      	movs	r2, #64	; 0x40
 8003872:	e12b      	b.n	8003acc <UART_SetConfig+0x101c>
 8003874:	2280      	movs	r2, #128	; 0x80
 8003876:	e129      	b.n	8003acc <UART_SetConfig+0x101c>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003878:	b1f0      	cbz	r0, 80038b8 <UART_SetConfig+0xe08>
 800387a:	2801      	cmp	r0, #1
 800387c:	d01e      	beq.n	80038bc <UART_SetConfig+0xe0c>
 800387e:	2802      	cmp	r0, #2
 8003880:	d01e      	beq.n	80038c0 <UART_SetConfig+0xe10>
 8003882:	2803      	cmp	r0, #3
 8003884:	d01e      	beq.n	80038c4 <UART_SetConfig+0xe14>
 8003886:	2804      	cmp	r0, #4
 8003888:	d01e      	beq.n	80038c8 <UART_SetConfig+0xe18>
 800388a:	2805      	cmp	r0, #5
 800388c:	d01e      	beq.n	80038cc <UART_SetConfig+0xe1c>
 800388e:	2806      	cmp	r0, #6
 8003890:	d01e      	beq.n	80038d0 <UART_SetConfig+0xe20>
 8003892:	2807      	cmp	r0, #7
 8003894:	d01e      	beq.n	80038d4 <UART_SetConfig+0xe24>
 8003896:	2808      	cmp	r0, #8
 8003898:	d01e      	beq.n	80038d8 <UART_SetConfig+0xe28>
 800389a:	2809      	cmp	r0, #9
 800389c:	d01e      	beq.n	80038dc <UART_SetConfig+0xe2c>
 800389e:	280a      	cmp	r0, #10
 80038a0:	d01e      	beq.n	80038e0 <UART_SetConfig+0xe30>
 80038a2:	4b8e      	ldr	r3, [pc, #568]	; (8003adc <UART_SetConfig+0x102c>)
 80038a4:	4a8e      	ldr	r2, [pc, #568]	; (8003ae0 <UART_SetConfig+0x1030>)
 80038a6:	280b      	cmp	r0, #11
 80038a8:	bf14      	ite	ne
 80038aa:	4610      	movne	r0, r2
 80038ac:	4618      	moveq	r0, r3
 80038ae:	eb00 0051 	add.w	r0, r0, r1, lsr #1
 80038b2:	fbb0 f3f1 	udiv	r3, r0, r1
 80038b6:	e721      	b.n	80036fc <UART_SetConfig+0xc4c>
 80038b8:	4889      	ldr	r0, [pc, #548]	; (8003ae0 <UART_SetConfig+0x1030>)
 80038ba:	e7f8      	b.n	80038ae <UART_SetConfig+0xdfe>
 80038bc:	4889      	ldr	r0, [pc, #548]	; (8003ae4 <UART_SetConfig+0x1034>)
 80038be:	e7f6      	b.n	80038ae <UART_SetConfig+0xdfe>
 80038c0:	4889      	ldr	r0, [pc, #548]	; (8003ae8 <UART_SetConfig+0x1038>)
 80038c2:	e7f4      	b.n	80038ae <UART_SetConfig+0xdfe>
 80038c4:	4889      	ldr	r0, [pc, #548]	; (8003aec <UART_SetConfig+0x103c>)
 80038c6:	e7f2      	b.n	80038ae <UART_SetConfig+0xdfe>
 80038c8:	4889      	ldr	r0, [pc, #548]	; (8003af0 <UART_SetConfig+0x1040>)
 80038ca:	e7f0      	b.n	80038ae <UART_SetConfig+0xdfe>
 80038cc:	4889      	ldr	r0, [pc, #548]	; (8003af4 <UART_SetConfig+0x1044>)
 80038ce:	e7ee      	b.n	80038ae <UART_SetConfig+0xdfe>
 80038d0:	4889      	ldr	r0, [pc, #548]	; (8003af8 <UART_SetConfig+0x1048>)
 80038d2:	e7ec      	b.n	80038ae <UART_SetConfig+0xdfe>
 80038d4:	4889      	ldr	r0, [pc, #548]	; (8003afc <UART_SetConfig+0x104c>)
 80038d6:	e7ea      	b.n	80038ae <UART_SetConfig+0xdfe>
 80038d8:	4889      	ldr	r0, [pc, #548]	; (8003b00 <UART_SetConfig+0x1050>)
 80038da:	e7e8      	b.n	80038ae <UART_SetConfig+0xdfe>
 80038dc:	4889      	ldr	r0, [pc, #548]	; (8003b04 <UART_SetConfig+0x1054>)
 80038de:	e7e6      	b.n	80038ae <UART_SetConfig+0xdfe>
 80038e0:	4889      	ldr	r0, [pc, #548]	; (8003b08 <UART_SetConfig+0x1058>)
 80038e2:	e7e4      	b.n	80038ae <UART_SetConfig+0xdfe>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80038e4:	b300      	cbz	r0, 8003928 <UART_SetConfig+0xe78>
 80038e6:	2801      	cmp	r0, #1
 80038e8:	d020      	beq.n	800392c <UART_SetConfig+0xe7c>
 80038ea:	2802      	cmp	r0, #2
 80038ec:	d020      	beq.n	8003930 <UART_SetConfig+0xe80>
 80038ee:	2803      	cmp	r0, #3
 80038f0:	d020      	beq.n	8003934 <UART_SetConfig+0xe84>
 80038f2:	2804      	cmp	r0, #4
 80038f4:	d020      	beq.n	8003938 <UART_SetConfig+0xe88>
 80038f6:	2805      	cmp	r0, #5
 80038f8:	d020      	beq.n	800393c <UART_SetConfig+0xe8c>
 80038fa:	2806      	cmp	r0, #6
 80038fc:	d020      	beq.n	8003940 <UART_SetConfig+0xe90>
 80038fe:	2807      	cmp	r0, #7
 8003900:	d020      	beq.n	8003944 <UART_SetConfig+0xe94>
 8003902:	2808      	cmp	r0, #8
 8003904:	d020      	beq.n	8003948 <UART_SetConfig+0xe98>
 8003906:	2809      	cmp	r0, #9
 8003908:	d020      	beq.n	800394c <UART_SetConfig+0xe9c>
 800390a:	280a      	cmp	r0, #10
 800390c:	d021      	beq.n	8003952 <UART_SetConfig+0xea2>
 800390e:	f643 5209 	movw	r2, #15625	; 0x3d09
 8003912:	4b7a      	ldr	r3, [pc, #488]	; (8003afc <UART_SetConfig+0x104c>)
 8003914:	280b      	cmp	r0, #11
 8003916:	bf14      	ite	ne
 8003918:	4618      	movne	r0, r3
 800391a:	4610      	moveq	r0, r2
 800391c:	686b      	ldr	r3, [r5, #4]
 800391e:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8003922:	fbb0 f3f3 	udiv	r3, r0, r3
 8003926:	e6e9      	b.n	80036fc <UART_SetConfig+0xc4c>
 8003928:	4874      	ldr	r0, [pc, #464]	; (8003afc <UART_SetConfig+0x104c>)
 800392a:	e7f7      	b.n	800391c <UART_SetConfig+0xe6c>
 800392c:	4874      	ldr	r0, [pc, #464]	; (8003b00 <UART_SetConfig+0x1050>)
 800392e:	e7f5      	b.n	800391c <UART_SetConfig+0xe6c>
 8003930:	4874      	ldr	r0, [pc, #464]	; (8003b04 <UART_SetConfig+0x1054>)
 8003932:	e7f3      	b.n	800391c <UART_SetConfig+0xe6c>
 8003934:	4875      	ldr	r0, [pc, #468]	; (8003b0c <UART_SetConfig+0x105c>)
 8003936:	e7f1      	b.n	800391c <UART_SetConfig+0xe6c>
 8003938:	4873      	ldr	r0, [pc, #460]	; (8003b08 <UART_SetConfig+0x1058>)
 800393a:	e7ef      	b.n	800391c <UART_SetConfig+0xe6c>
 800393c:	4874      	ldr	r0, [pc, #464]	; (8003b10 <UART_SetConfig+0x1060>)
 800393e:	e7ed      	b.n	800391c <UART_SetConfig+0xe6c>
 8003940:	4874      	ldr	r0, [pc, #464]	; (8003b14 <UART_SetConfig+0x1064>)
 8003942:	e7eb      	b.n	800391c <UART_SetConfig+0xe6c>
 8003944:	4865      	ldr	r0, [pc, #404]	; (8003adc <UART_SetConfig+0x102c>)
 8003946:	e7e9      	b.n	800391c <UART_SetConfig+0xe6c>
 8003948:	4873      	ldr	r0, [pc, #460]	; (8003b18 <UART_SetConfig+0x1068>)
 800394a:	e7e7      	b.n	800391c <UART_SetConfig+0xe6c>
 800394c:	f24f 4024 	movw	r0, #62500	; 0xf424
 8003950:	e7e4      	b.n	800391c <UART_SetConfig+0xe6c>
 8003952:	f647 2012 	movw	r0, #31250	; 0x7a12
 8003956:	e7e1      	b.n	800391c <UART_SetConfig+0xe6c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003958:	b1d0      	cbz	r0, 8003990 <UART_SetConfig+0xee0>
 800395a:	2801      	cmp	r0, #1
 800395c:	d01b      	beq.n	8003996 <UART_SetConfig+0xee6>
 800395e:	2802      	cmp	r0, #2
 8003960:	d01c      	beq.n	800399c <UART_SetConfig+0xeec>
 8003962:	2803      	cmp	r0, #3
 8003964:	d01d      	beq.n	80039a2 <UART_SetConfig+0xef2>
 8003966:	2804      	cmp	r0, #4
 8003968:	d01e      	beq.n	80039a8 <UART_SetConfig+0xef8>
 800396a:	2805      	cmp	r0, #5
 800396c:	d01f      	beq.n	80039ae <UART_SetConfig+0xefe>
 800396e:	2806      	cmp	r0, #6
 8003970:	d020      	beq.n	80039b4 <UART_SetConfig+0xf04>
 8003972:	2807      	cmp	r0, #7
 8003974:	d021      	beq.n	80039ba <UART_SetConfig+0xf0a>
 8003976:	2808      	cmp	r0, #8
 8003978:	d022      	beq.n	80039c0 <UART_SetConfig+0xf10>
 800397a:	2809      	cmp	r0, #9
 800397c:	d023      	beq.n	80039c6 <UART_SetConfig+0xf16>
 800397e:	280a      	cmp	r0, #10
 8003980:	d024      	beq.n	80039cc <UART_SetConfig+0xf1c>
 8003982:	280b      	cmp	r0, #11
 8003984:	bf14      	ite	ne
 8003986:	f44f 4300 	movne.w	r3, #32768	; 0x8000
 800398a:	2380      	moveq	r3, #128	; 0x80
 800398c:	6868      	ldr	r0, [r5, #4]
 800398e:	e711      	b.n	80037b4 <UART_SetConfig+0xd04>
 8003990:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003994:	e7fa      	b.n	800398c <UART_SetConfig+0xedc>
 8003996:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800399a:	e7f7      	b.n	800398c <UART_SetConfig+0xedc>
 800399c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80039a0:	e7f4      	b.n	800398c <UART_SetConfig+0xedc>
 80039a2:	f241 5355 	movw	r3, #5461	; 0x1555
 80039a6:	e7f1      	b.n	800398c <UART_SetConfig+0xedc>
 80039a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039ac:	e7ee      	b.n	800398c <UART_SetConfig+0xedc>
 80039ae:	f640 43cc 	movw	r3, #3276	; 0xccc
 80039b2:	e7eb      	b.n	800398c <UART_SetConfig+0xedc>
 80039b4:	f640 23aa 	movw	r3, #2730	; 0xaaa
 80039b8:	e7e8      	b.n	800398c <UART_SetConfig+0xedc>
 80039ba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80039be:	e7e5      	b.n	800398c <UART_SetConfig+0xedc>
 80039c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80039c4:	e7e2      	b.n	800398c <UART_SetConfig+0xedc>
 80039c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80039ca:	e7df      	b.n	800398c <UART_SetConfig+0xedc>
 80039cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80039d0:	e7dc      	b.n	800398c <UART_SetConfig+0xedc>
 80039d2:	2480      	movs	r4, #128	; 0x80
 80039d4:	f7ff b8a4 	b.w	8002b20 <UART_SetConfig+0x70>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039d8:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80039dc:	f43f a8b1 	beq.w	8002b42 <UART_SetConfig+0x92>
        ret = HAL_ERROR;
 80039e0:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 80039e2:	2300      	movs	r3, #0
 80039e4:	e68c      	b.n	8003700 <UART_SetConfig+0xc50>
    switch (clocksource)
 80039e6:	2c08      	cmp	r4, #8
 80039e8:	f43f aee9 	beq.w	80037be <UART_SetConfig+0xd0e>
 80039ec:	d833      	bhi.n	8003a56 <UART_SetConfig+0xfa6>
 80039ee:	2c01      	cmp	r4, #1
 80039f0:	f43f aea7 	beq.w	8003742 <UART_SetConfig+0xc92>
 80039f4:	f4ff ae5e 	bcc.w	80036b4 <UART_SetConfig+0xc04>
 80039f8:	2c04      	cmp	r4, #4
 80039fa:	f47f a904 	bne.w	8002c06 <UART_SetConfig+0x156>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80039fe:	4668      	mov	r0, sp
 8003a00:	f7fe fd68 	bl	80024d4 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003a04:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8003a06:	9b01      	ldr	r3, [sp, #4]
 8003a08:	2a00      	cmp	r2, #0
 8003a0a:	f43f aee8 	beq.w	80037de <UART_SetConfig+0xd2e>
 8003a0e:	2a01      	cmp	r2, #1
 8003a10:	f43f aee7 	beq.w	80037e2 <UART_SetConfig+0xd32>
 8003a14:	2a02      	cmp	r2, #2
 8003a16:	f43f aeca 	beq.w	80037ae <UART_SetConfig+0xcfe>
 8003a1a:	2a03      	cmp	r2, #3
 8003a1c:	f43f aee5 	beq.w	80037ea <UART_SetConfig+0xd3a>
 8003a20:	2a04      	cmp	r2, #4
 8003a22:	f43f aec3 	beq.w	80037ac <UART_SetConfig+0xcfc>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003a26:	2a05      	cmp	r2, #5
 8003a28:	f43f aee1 	beq.w	80037ee <UART_SetConfig+0xd3e>
 8003a2c:	2a06      	cmp	r2, #6
 8003a2e:	f43f aee0 	beq.w	80037f2 <UART_SetConfig+0xd42>
 8003a32:	2a07      	cmp	r2, #7
 8003a34:	f43f aedf 	beq.w	80037f6 <UART_SetConfig+0xd46>
 8003a38:	2a08      	cmp	r2, #8
 8003a3a:	f43f aede 	beq.w	80037fa <UART_SetConfig+0xd4a>
 8003a3e:	2a09      	cmp	r2, #9
 8003a40:	f43f aedd 	beq.w	80037fe <UART_SetConfig+0xd4e>
 8003a44:	2a0a      	cmp	r2, #10
 8003a46:	f43f aedc 	beq.w	8003802 <UART_SetConfig+0xd52>
 8003a4a:	2a0b      	cmp	r2, #11
 8003a4c:	bf14      	ite	ne
 8003a4e:	2401      	movne	r4, #1
 8003a50:	f44f 7480 	moveq.w	r4, #256	; 0x100
 8003a54:	e6ab      	b.n	80037ae <UART_SetConfig+0xcfe>
    switch (clocksource)
 8003a56:	2c20      	cmp	r4, #32
 8003a58:	f43f af44 	beq.w	80038e4 <UART_SetConfig+0xe34>
 8003a5c:	2c40      	cmp	r4, #64	; 0x40
 8003a5e:	f43f af7b 	beq.w	8003958 <UART_SetConfig+0xea8>
 8003a62:	2c10      	cmp	r4, #16
 8003a64:	f47f a8cf 	bne.w	8002c06 <UART_SetConfig+0x156>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003a68:	4b2c      	ldr	r3, [pc, #176]	; (8003b1c <UART_SetConfig+0x106c>)
 8003a6a:	6869      	ldr	r1, [r5, #4]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	f012 0f20 	tst.w	r2, #32
 8003a72:	f43f af01 	beq.w	8003878 <UART_SetConfig+0xdc8>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	4b19      	ldr	r3, [pc, #100]	; (8003ae0 <UART_SetConfig+0x1030>)
 8003a7a:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8003a7e:	40d3      	lsrs	r3, r2
 8003a80:	2800      	cmp	r0, #0
 8003a82:	f43f aec0 	beq.w	8003806 <UART_SetConfig+0xd56>
 8003a86:	2801      	cmp	r0, #1
 8003a88:	f43f aebf 	beq.w	800380a <UART_SetConfig+0xd5a>
 8003a8c:	2802      	cmp	r0, #2
 8003a8e:	f43f aebe 	beq.w	800380e <UART_SetConfig+0xd5e>
 8003a92:	2803      	cmp	r0, #3
 8003a94:	f43f aee0 	beq.w	8003858 <UART_SetConfig+0xda8>
 8003a98:	2804      	cmp	r0, #4
 8003a9a:	f43f aedf 	beq.w	800385c <UART_SetConfig+0xdac>
 8003a9e:	2805      	cmp	r0, #5
 8003aa0:	f43f aede 	beq.w	8003860 <UART_SetConfig+0xdb0>
 8003aa4:	2806      	cmp	r0, #6
 8003aa6:	f43f aedd 	beq.w	8003864 <UART_SetConfig+0xdb4>
 8003aaa:	2807      	cmp	r0, #7
 8003aac:	f43f aedc 	beq.w	8003868 <UART_SetConfig+0xdb8>
 8003ab0:	2808      	cmp	r0, #8
 8003ab2:	f43f aedb 	beq.w	800386c <UART_SetConfig+0xdbc>
 8003ab6:	2809      	cmp	r0, #9
 8003ab8:	f43f aeda 	beq.w	8003870 <UART_SetConfig+0xdc0>
 8003abc:	280a      	cmp	r0, #10
 8003abe:	f43f aed9 	beq.w	8003874 <UART_SetConfig+0xdc4>
 8003ac2:	280b      	cmp	r0, #11
 8003ac4:	bf14      	ite	ne
 8003ac6:	2201      	movne	r2, #1
 8003ac8:	f44f 7280 	moveq.w	r2, #256	; 0x100
 8003acc:	fbb3 f3f2 	udiv	r3, r3, r2
 8003ad0:	eb03 0351 	add.w	r3, r3, r1, lsr #1
 8003ad4:	fbb3 f3f1 	udiv	r3, r3, r1
 8003ad8:	e610      	b.n	80036fc <UART_SetConfig+0xc4c>
 8003ada:	bf00      	nop
 8003adc:	0003d090 	.word	0x0003d090
 8003ae0:	03d09000 	.word	0x03d09000
 8003ae4:	01e84800 	.word	0x01e84800
 8003ae8:	00f42400 	.word	0x00f42400
 8003aec:	00a2c2aa 	.word	0x00a2c2aa
 8003af0:	007a1200 	.word	0x007a1200
 8003af4:	0061a800 	.word	0x0061a800
 8003af8:	00516155 	.word	0x00516155
 8003afc:	003d0900 	.word	0x003d0900
 8003b00:	001e8480 	.word	0x001e8480
 8003b04:	000f4240 	.word	0x000f4240
 8003b08:	0007a120 	.word	0x0007a120
 8003b0c:	000a2c2a 	.word	0x000a2c2a
 8003b10:	00061a80 	.word	0x00061a80
 8003b14:	00051615 	.word	0x00051615
 8003b18:	0001e848 	.word	0x0001e848
 8003b1c:	58024400 	.word	0x58024400

08003b20 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003b20:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003b22:	07da      	lsls	r2, r3, #31
{
 8003b24:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003b26:	d506      	bpl.n	8003b36 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003b28:	6801      	ldr	r1, [r0, #0]
 8003b2a:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8003b2c:	684a      	ldr	r2, [r1, #4]
 8003b2e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8003b32:	4322      	orrs	r2, r4
 8003b34:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003b36:	079c      	lsls	r4, r3, #30
 8003b38:	d506      	bpl.n	8003b48 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003b3a:	6801      	ldr	r1, [r0, #0]
 8003b3c:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8003b3e:	684a      	ldr	r2, [r1, #4]
 8003b40:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003b44:	4322      	orrs	r2, r4
 8003b46:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b48:	0759      	lsls	r1, r3, #29
 8003b4a:	d506      	bpl.n	8003b5a <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b4c:	6801      	ldr	r1, [r0, #0]
 8003b4e:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8003b50:	684a      	ldr	r2, [r1, #4]
 8003b52:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003b56:	4322      	orrs	r2, r4
 8003b58:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003b5a:	071a      	lsls	r2, r3, #28
 8003b5c:	d506      	bpl.n	8003b6c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003b5e:	6801      	ldr	r1, [r0, #0]
 8003b60:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8003b62:	684a      	ldr	r2, [r1, #4]
 8003b64:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b68:	4322      	orrs	r2, r4
 8003b6a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003b6c:	06dc      	lsls	r4, r3, #27
 8003b6e:	d506      	bpl.n	8003b7e <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003b70:	6801      	ldr	r1, [r0, #0]
 8003b72:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8003b74:	688a      	ldr	r2, [r1, #8]
 8003b76:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003b7a:	4322      	orrs	r2, r4
 8003b7c:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003b7e:	0699      	lsls	r1, r3, #26
 8003b80:	d506      	bpl.n	8003b90 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b82:	6801      	ldr	r1, [r0, #0]
 8003b84:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8003b86:	688a      	ldr	r2, [r1, #8]
 8003b88:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b8c:	4322      	orrs	r2, r4
 8003b8e:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b90:	065a      	lsls	r2, r3, #25
 8003b92:	d510      	bpl.n	8003bb6 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b94:	6801      	ldr	r1, [r0, #0]
 8003b96:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8003b98:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003b9a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b9e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8003ba2:	ea42 0204 	orr.w	r2, r2, r4
 8003ba6:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003ba8:	d105      	bne.n	8003bb6 <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003baa:	684a      	ldr	r2, [r1, #4]
 8003bac:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8003bae:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8003bb2:	4322      	orrs	r2, r4
 8003bb4:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003bb6:	061b      	lsls	r3, r3, #24
 8003bb8:	d506      	bpl.n	8003bc8 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003bba:	6802      	ldr	r2, [r0, #0]
 8003bbc:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8003bbe:	6853      	ldr	r3, [r2, #4]
 8003bc0:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8003bc4:	430b      	orrs	r3, r1
 8003bc6:	6053      	str	r3, [r2, #4]
 8003bc8:	bd10      	pop	{r4, pc}

08003bca <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003bca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003bce:	9d06      	ldr	r5, [sp, #24]
 8003bd0:	4604      	mov	r4, r0
 8003bd2:	460f      	mov	r7, r1
 8003bd4:	4616      	mov	r6, r2
 8003bd6:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bd8:	6821      	ldr	r1, [r4, #0]
 8003bda:	69ca      	ldr	r2, [r1, #28]
 8003bdc:	ea37 0302 	bics.w	r3, r7, r2
 8003be0:	bf0c      	ite	eq
 8003be2:	2201      	moveq	r2, #1
 8003be4:	2200      	movne	r2, #0
 8003be6:	42b2      	cmp	r2, r6
 8003be8:	d002      	beq.n	8003bf0 <UART_WaitOnFlagUntilTimeout+0x26>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8003bea:	2000      	movs	r0, #0
}
 8003bec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8003bf0:	1c68      	adds	r0, r5, #1
 8003bf2:	d0f2      	beq.n	8003bda <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bf4:	f7fc fdb4 	bl	8000760 <HAL_GetTick>
 8003bf8:	eba0 0008 	sub.w	r0, r0, r8
 8003bfc:	4285      	cmp	r5, r0
 8003bfe:	6820      	ldr	r0, [r4, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003c00:	6803      	ldr	r3, [r0, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c02:	d300      	bcc.n	8003c06 <UART_WaitOnFlagUntilTimeout+0x3c>
 8003c04:	b98d      	cbnz	r5, 8003c2a <UART_WaitOnFlagUntilTimeout+0x60>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003c06:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003c0a:	6003      	str	r3, [r0, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c0c:	6883      	ldr	r3, [r0, #8]
 8003c0e:	f023 0301 	bic.w	r3, r3, #1
 8003c12:	6083      	str	r3, [r0, #8]
        huart->gState = HAL_UART_STATE_READY;
 8003c14:	2320      	movs	r3, #32
 8003c16:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8003c1a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          __HAL_UNLOCK(huart);
 8003c1e:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 8003c20:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 8003c22:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
          return HAL_TIMEOUT;
 8003c26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003c2a:	075a      	lsls	r2, r3, #29
 8003c2c:	d5d4      	bpl.n	8003bd8 <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003c2e:	69c3      	ldr	r3, [r0, #28]
 8003c30:	051b      	lsls	r3, r3, #20
 8003c32:	d5d1      	bpl.n	8003bd8 <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c34:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003c38:	6203      	str	r3, [r0, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003c3a:	6803      	ldr	r3, [r0, #0]
 8003c3c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003c40:	6003      	str	r3, [r0, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c42:	6883      	ldr	r3, [r0, #8]
 8003c44:	f023 0301 	bic.w	r3, r3, #1
 8003c48:	6083      	str	r3, [r0, #8]
          huart->gState = HAL_UART_STATE_READY;
 8003c4a:	2320      	movs	r3, #32
 8003c4c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8003c50:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003c54:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8003c58:	e7e1      	b.n	8003c1e <UART_WaitOnFlagUntilTimeout+0x54>

08003c5a <HAL_UART_Transmit>:
{
 8003c5a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003c5e:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8003c60:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
{
 8003c64:	4604      	mov	r4, r0
 8003c66:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 8003c68:	2b20      	cmp	r3, #32
{
 8003c6a:	4691      	mov	r9, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8003c6c:	d14e      	bne.n	8003d0c <HAL_UART_Transmit+0xb2>
    if ((pData == NULL) || (Size == 0U))
 8003c6e:	2900      	cmp	r1, #0
 8003c70:	d04a      	beq.n	8003d08 <HAL_UART_Transmit+0xae>
 8003c72:	2a00      	cmp	r2, #0
 8003c74:	d048      	beq.n	8003d08 <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 8003c76:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d046      	beq.n	8003d0c <HAL_UART_Transmit+0xb2>
 8003c7e:	2301      	movs	r3, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c80:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 8003c82:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c86:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c88:	f8c0 5088 	str.w	r5, [r0, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c8c:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
    tickstart = HAL_GetTick();
 8003c90:	f7fc fd66 	bl	8000760 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c94:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8003c96:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 8003c98:	f8a4 9054 	strh.w	r9, [r4, #84]	; 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferCount = Size;
 8003ca0:	f8a4 9056 	strh.w	r9, [r4, #86]	; 0x56
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ca4:	d103      	bne.n	8003cae <HAL_UART_Transmit+0x54>
 8003ca6:	6923      	ldr	r3, [r4, #16]
 8003ca8:	b90b      	cbnz	r3, 8003cae <HAL_UART_Transmit+0x54>
 8003caa:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8003cac:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 8003cae:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003cb2:	463b      	mov	r3, r7
 8003cb4:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 8003cb8:	b292      	uxth	r2, r2
 8003cba:	b952      	cbnz	r2, 8003cd2 <HAL_UART_Transmit+0x78>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003cbc:	2140      	movs	r1, #64	; 0x40
 8003cbe:	4620      	mov	r0, r4
 8003cc0:	f7ff ff83 	bl	8003bca <UART_WaitOnFlagUntilTimeout>
 8003cc4:	b958      	cbnz	r0, 8003cde <HAL_UART_Transmit+0x84>
    huart->gState = HAL_UART_STATE_READY;
 8003cc6:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8003cc8:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_READY;
 8003ccc:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    return HAL_OK;
 8003cd0:	e006      	b.n	8003ce0 <HAL_UART_Transmit+0x86>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	2180      	movs	r1, #128	; 0x80
 8003cd6:	4620      	mov	r0, r4
 8003cd8:	f7ff ff77 	bl	8003bca <UART_WaitOnFlagUntilTimeout>
 8003cdc:	b118      	cbz	r0, 8003ce6 <HAL_UART_Transmit+0x8c>
        return HAL_TIMEOUT;
 8003cde:	2003      	movs	r0, #3
}
 8003ce0:	b003      	add	sp, #12
 8003ce2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003ce6:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8003ce8:	b95e      	cbnz	r6, 8003d02 <HAL_UART_Transmit+0xa8>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003cea:	f835 3b02 	ldrh.w	r3, [r5], #2
 8003cee:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003cf2:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8003cf4:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
 8003cf8:	3b01      	subs	r3, #1
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 8003d00:	e7d5      	b.n	8003cae <HAL_UART_Transmit+0x54>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d02:	f816 3b01 	ldrb.w	r3, [r6], #1
 8003d06:	e7f4      	b.n	8003cf2 <HAL_UART_Transmit+0x98>
      return  HAL_ERROR;
 8003d08:	2001      	movs	r0, #1
 8003d0a:	e7e9      	b.n	8003ce0 <HAL_UART_Transmit+0x86>
    return HAL_BUSY;
 8003d0c:	2002      	movs	r0, #2
 8003d0e:	e7e7      	b.n	8003ce0 <HAL_UART_Transmit+0x86>

08003d10 <UART_CheckIdleState>:
{
 8003d10:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d12:	2600      	movs	r6, #0
{
 8003d14:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d16:	f8c0 6088 	str.w	r6, [r0, #136]	; 0x88
  tickstart = HAL_GetTick();
 8003d1a:	f7fc fd21 	bl	8000760 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003d1e:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8003d20:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	071a      	lsls	r2, r3, #28
 8003d26:	d417      	bmi.n	8003d58 <UART_CheckIdleState+0x48>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003d28:	6823      	ldr	r3, [r4, #0]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	075b      	lsls	r3, r3, #29
 8003d2e:	d50a      	bpl.n	8003d46 <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d30:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003d34:	2200      	movs	r2, #0
 8003d36:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003d3a:	4620      	mov	r0, r4
 8003d3c:	9300      	str	r3, [sp, #0]
 8003d3e:	462b      	mov	r3, r5
 8003d40:	f7ff ff43 	bl	8003bca <UART_WaitOnFlagUntilTimeout>
 8003d44:	b9a0      	cbnz	r0, 8003d70 <UART_CheckIdleState+0x60>
  huart->gState = HAL_UART_STATE_READY;
 8003d46:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8003d48:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8003d4a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  __HAL_UNLOCK(huart);
 8003d4e:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003d52:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  return HAL_OK;
 8003d56:	e00c      	b.n	8003d72 <UART_CheckIdleState+0x62>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d58:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003d5c:	4632      	mov	r2, r6
 8003d5e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003d62:	9300      	str	r3, [sp, #0]
 8003d64:	4603      	mov	r3, r0
 8003d66:	4620      	mov	r0, r4
 8003d68:	f7ff ff2f 	bl	8003bca <UART_WaitOnFlagUntilTimeout>
 8003d6c:	2800      	cmp	r0, #0
 8003d6e:	d0db      	beq.n	8003d28 <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 8003d70:	2003      	movs	r0, #3
}
 8003d72:	b002      	add	sp, #8
 8003d74:	bd70      	pop	{r4, r5, r6, pc}

08003d76 <HAL_UART_Init>:
{
 8003d76:	b510      	push	{r4, lr}
  if (huart == NULL)
 8003d78:	4604      	mov	r4, r0
 8003d7a:	b350      	cbz	r0, 8003dd2 <HAL_UART_Init+0x5c>
  if (huart->gState == HAL_UART_STATE_RESET)
 8003d7c:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8003d80:	b91b      	cbnz	r3, 8003d8a <HAL_UART_Init+0x14>
    huart->Lock = HAL_UNLOCKED;
 8003d82:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    HAL_UART_MspInit(huart);
 8003d86:	f000 fd9b 	bl	80048c0 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8003d8a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003d8c:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d8e:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 8003d90:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  __HAL_UART_DISABLE(huart);
 8003d94:	6813      	ldr	r3, [r2, #0]
 8003d96:	f023 0301 	bic.w	r3, r3, #1
 8003d9a:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d9c:	f7fe fe88 	bl	8002ab0 <UART_SetConfig>
 8003da0:	2801      	cmp	r0, #1
 8003da2:	d016      	beq.n	8003dd2 <HAL_UART_Init+0x5c>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003da4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003da6:	b113      	cbz	r3, 8003dae <HAL_UART_Init+0x38>
    UART_AdvFeatureConfig(huart);
 8003da8:	4620      	mov	r0, r4
 8003daa:	f7ff feb9 	bl	8003b20 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003dae:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8003db0:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003db2:	685a      	ldr	r2, [r3, #4]
 8003db4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003db8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003dba:	689a      	ldr	r2, [r3, #8]
 8003dbc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003dc0:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	f042 0201 	orr.w	r2, r2, #1
}
 8003dc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 8003dcc:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8003dce:	f7ff bf9f 	b.w	8003d10 <UART_CheckIdleState>
}
 8003dd2:	2001      	movs	r0, #1
 8003dd4:	bd10      	pop	{r4, pc}

08003dd6 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003dd6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8003dd8:	2203      	movs	r2, #3
 8003dda:	2301      	movs	r3, #1
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8003ddc:	2104      	movs	r1, #4
 8003dde:	2402      	movs	r4, #2
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8003de0:	f88d 2003 	strb.w	r2, [sp, #3]
 8003de4:	2207      	movs	r2, #7
 8003de6:	f88d 3000 	strb.w	r3, [sp]
 8003dea:	f88d 2004 	strb.w	r2, [sp, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	f88d 3001 	strb.w	r3, [sp, #1]
 8003df4:	f88d 2006 	strb.w	r2, [sp, #6]
 8003df8:	f88d 2007 	strb.w	r2, [sp, #7]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8003dfc:	2208      	movs	r2, #8
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8003dfe:	f88d 3002 	strb.w	r3, [sp, #2]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8003e02:	f88d 2008 	strb.w	r2, [sp, #8]
 8003e06:	f88d 200c 	strb.w	r2, [sp, #12]

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003e0a:	6e42      	ldr	r2, [r0, #100]	; 0x64
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8003e0c:	f88d 3005 	strb.w	r3, [sp, #5]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8003e10:	f88d 1009 	strb.w	r1, [sp, #9]
 8003e14:	f88d 400a 	strb.w	r4, [sp, #10]
 8003e18:	f88d 100b 	strb.w	r1, [sp, #11]
 8003e1c:	f88d 300d 	strb.w	r3, [sp, #13]
 8003e20:	f88d 300e 	strb.w	r3, [sp, #14]
 8003e24:	f88d 300f 	strb.w	r3, [sp, #15]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003e28:	b92a      	cbnz	r2, 8003e36 <UARTEx_SetNbDataToProcess+0x60>
  {
    huart->NbTxDataToProcess = 1U;
 8003e2a:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8003e2e:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  }
}
 8003e32:	b004      	add	sp, #16
 8003e34:	bd10      	pop	{r4, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003e36:	6802      	ldr	r2, [r0, #0]
 8003e38:	6893      	ldr	r3, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003e3a:	6891      	ldr	r1, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8003e3c:	aa04      	add	r2, sp, #16
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8003e3e:	f3c3 6342 	ubfx	r3, r3, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8003e42:	eb02 7151 	add.w	r1, r2, r1, lsr #29
 8003e46:	f811 2c10 	ldrb.w	r2, [r1, #-16]
 8003e4a:	f811 1c08 	ldrb.w	r1, [r1, #-8]
 8003e4e:	00d2      	lsls	r2, r2, #3
 8003e50:	fb92 f2f1 	sdiv	r2, r2, r1
 8003e54:	f8a0 206a 	strh.w	r2, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8003e58:	aa04      	add	r2, sp, #16
 8003e5a:	4413      	add	r3, r2
 8003e5c:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8003e60:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8003e64:	00d2      	lsls	r2, r2, #3
 8003e66:	fb92 f3f3 	sdiv	r3, r2, r3
 8003e6a:	e7e0      	b.n	8003e2e <UARTEx_SetNbDataToProcess+0x58>

08003e6c <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 8003e6c:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d014      	beq.n	8003e9e <HAL_UARTEx_DisableFifoMode+0x32>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003e74:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003e76:	2324      	movs	r3, #36	; 0x24
 8003e78:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003e7c:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8003e7e:	6813      	ldr	r3, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003e80:	f021 5100 	bic.w	r1, r1, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 8003e84:	f023 0301 	bic.w	r3, r3, #1
 8003e88:	6013      	str	r3, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003e8e:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8003e90:	2220      	movs	r2, #32
  __HAL_UNLOCK(huart);
 8003e92:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_READY;
 8003e96:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
  return HAL_OK;
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	4770      	bx	lr
  __HAL_LOCK(huart);
 8003e9e:	2002      	movs	r0, #2
}
 8003ea0:	4770      	bx	lr

08003ea2 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8003ea2:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8003ea4:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
{
 8003ea8:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d01b      	beq.n	8003ee6 <HAL_UARTEx_SetTxFifoThreshold+0x44>
 8003eae:	2301      	movs	r3, #1
 8003eb0:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_BUSY;
 8003eb4:	2324      	movs	r3, #36	; 0x24
 8003eb6:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003eba:	6803      	ldr	r3, [r0, #0]
 8003ebc:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	f022 0201 	bic.w	r2, r2, #1
 8003ec4:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003ec6:	689a      	ldr	r2, [r3, #8]
 8003ec8:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 8003ecc:	4311      	orrs	r1, r2
 8003ece:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 8003ed0:	f7ff ff81 	bl	8003dd6 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003ed4:	6803      	ldr	r3, [r0, #0]
 8003ed6:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8003ed8:	2320      	movs	r3, #32
 8003eda:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  __HAL_UNLOCK(huart);
 8003ede:	2000      	movs	r0, #0
 8003ee0:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
  return HAL_OK;
 8003ee4:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8003ee6:	2002      	movs	r0, #2
}
 8003ee8:	bd38      	pop	{r3, r4, r5, pc}

08003eea <HAL_UARTEx_SetRxFifoThreshold>:
{
 8003eea:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8003eec:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
{
 8003ef0:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d01b      	beq.n	8003f2e <HAL_UARTEx_SetRxFifoThreshold+0x44>
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_BUSY;
 8003efc:	2324      	movs	r3, #36	; 0x24
 8003efe:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003f02:	6803      	ldr	r3, [r0, #0]
 8003f04:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	f022 0201 	bic.w	r2, r2, #1
 8003f0c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003f0e:	689a      	ldr	r2, [r3, #8]
 8003f10:	f022 6260 	bic.w	r2, r2, #234881024	; 0xe000000
 8003f14:	4311      	orrs	r1, r2
 8003f16:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 8003f18:	f7ff ff5d 	bl	8003dd6 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003f1c:	6803      	ldr	r3, [r0, #0]
 8003f1e:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8003f20:	2320      	movs	r3, #32
 8003f22:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  __HAL_UNLOCK(huart);
 8003f26:	2000      	movs	r0, #0
 8003f28:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
  return HAL_OK;
 8003f2c:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8003f2e:	2002      	movs	r0, #2
}
 8003f30:	bd38      	pop	{r3, r4, r5, pc}
	...

08003f34 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003f34:	4b0a      	ldr	r3, [pc, #40]	; (8003f60 <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8003f36:	3b01      	subs	r3, #1
 8003f38:	d101      	bne.n	8003f3e <USB_CoreReset+0xa>
    {
      return HAL_TIMEOUT;
 8003f3a:	2003      	movs	r0, #3
 8003f3c:	4770      	bx	lr
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003f3e:	6902      	ldr	r2, [r0, #16]
 8003f40:	2a00      	cmp	r2, #0
 8003f42:	daf8      	bge.n	8003f36 <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003f44:	6903      	ldr	r3, [r0, #16]
 8003f46:	4a06      	ldr	r2, [pc, #24]	; (8003f60 <USB_CoreReset+0x2c>)
 8003f48:	f043 0301 	orr.w	r3, r3, #1
 8003f4c:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 8003f4e:	3a01      	subs	r2, #1
 8003f50:	d0f3      	beq.n	8003f3a <USB_CoreReset+0x6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003f52:	6903      	ldr	r3, [r0, #16]
 8003f54:	f013 0301 	ands.w	r3, r3, #1
 8003f58:	d1f9      	bne.n	8003f4e <USB_CoreReset+0x1a>

  return HAL_OK;
 8003f5a:	4618      	mov	r0, r3
}
 8003f5c:	4770      	bx	lr
 8003f5e:	bf00      	nop
 8003f60:	00030d41 	.word	0x00030d41

08003f64 <USB_CoreInit>:
{
 8003f64:	b084      	sub	sp, #16
 8003f66:	b538      	push	{r3, r4, r5, lr}
 8003f68:	ad05      	add	r5, sp, #20
 8003f6a:	4604      	mov	r4, r0
 8003f6c:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003f70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d126      	bne.n	8003fc4 <USB_CoreInit+0x60>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003f76:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003f78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f7c:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003f7e:	68c3      	ldr	r3, [r0, #12]
 8003f80:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003f84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f88:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003f8a:	68c3      	ldr	r3, [r0, #12]
 8003f8c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003f90:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 8003f92:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d103      	bne.n	8003fa0 <USB_CoreInit+0x3c>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003f98:	68c3      	ldr	r3, [r0, #12]
 8003f9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f9e:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 8003fa0:	4620      	mov	r0, r4
 8003fa2:	f7ff ffc7 	bl	8003f34 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 8003fa6:	9b08      	ldr	r3, [sp, #32]
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d107      	bne.n	8003fbc <USB_CoreInit+0x58>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003fac:	68a3      	ldr	r3, [r4, #8]
 8003fae:	f043 0306 	orr.w	r3, r3, #6
 8003fb2:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003fb4:	68a3      	ldr	r3, [r4, #8]
 8003fb6:	f043 0320 	orr.w	r3, r3, #32
 8003fba:	60a3      	str	r3, [r4, #8]
}
 8003fbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003fc0:	b004      	add	sp, #16
 8003fc2:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003fc4:	68c3      	ldr	r3, [r0, #12]
 8003fc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fca:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 8003fcc:	f7ff ffb2 	bl	8003f34 <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 8003fd0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003fd2:	b923      	cbnz	r3, 8003fde <USB_CoreInit+0x7a>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003fd4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003fd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003fda:	63a3      	str	r3, [r4, #56]	; 0x38
 8003fdc:	e7e3      	b.n	8003fa6 <USB_CoreInit+0x42>
 8003fde:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003fe0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fe4:	e7f9      	b.n	8003fda <USB_CoreInit+0x76>

08003fe6 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003fe6:	6883      	ldr	r3, [r0, #8]
 8003fe8:	f023 0301 	bic.w	r3, r3, #1
 8003fec:	6083      	str	r3, [r0, #8]
}
 8003fee:	2000      	movs	r0, #0
 8003ff0:	4770      	bx	lr

08003ff2 <USB_SetCurrentMode>:
{
 8003ff2:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003ff4:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8003ff6:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003ff8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003ffc:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8003ffe:	d108      	bne.n	8004012 <USB_SetCurrentMode+0x20>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004000:	68c3      	ldr	r3, [r0, #12]
 8004002:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004006:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 8004008:	2032      	movs	r0, #50	; 0x32
 800400a:	f7fc fbaf 	bl	800076c <HAL_Delay>
  return HAL_OK;
 800400e:	2000      	movs	r0, #0
 8004010:	bd08      	pop	{r3, pc}
  else if (mode == USB_DEVICE_MODE)
 8004012:	b919      	cbnz	r1, 800401c <USB_SetCurrentMode+0x2a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004014:	68c3      	ldr	r3, [r0, #12]
 8004016:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800401a:	e7f4      	b.n	8004006 <USB_SetCurrentMode+0x14>
    return HAL_ERROR;
 800401c:	2001      	movs	r0, #1
}
 800401e:	bd08      	pop	{r3, pc}

08004020 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004020:	0189      	lsls	r1, r1, #6
 8004022:	4a07      	ldr	r2, [pc, #28]	; (8004040 <USB_FlushTxFifo+0x20>)
 8004024:	f041 0120 	orr.w	r1, r1, #32
 8004028:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 800402a:	3a01      	subs	r2, #1
 800402c:	d005      	beq.n	800403a <USB_FlushTxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800402e:	6903      	ldr	r3, [r0, #16]
 8004030:	f013 0320 	ands.w	r3, r3, #32
 8004034:	d1f9      	bne.n	800402a <USB_FlushTxFifo+0xa>
  return HAL_OK;
 8004036:	4618      	mov	r0, r3
 8004038:	4770      	bx	lr
      return HAL_TIMEOUT;
 800403a:	2003      	movs	r0, #3
}
 800403c:	4770      	bx	lr
 800403e:	bf00      	nop
 8004040:	00030d41 	.word	0x00030d41

08004044 <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004044:	2310      	movs	r3, #16
 8004046:	4a06      	ldr	r2, [pc, #24]	; (8004060 <USB_FlushRxFifo+0x1c>)
 8004048:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
 800404a:	3a01      	subs	r2, #1
 800404c:	d005      	beq.n	800405a <USB_FlushRxFifo+0x16>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800404e:	6903      	ldr	r3, [r0, #16]
 8004050:	f013 0310 	ands.w	r3, r3, #16
 8004054:	d1f9      	bne.n	800404a <USB_FlushRxFifo+0x6>
  return HAL_OK;
 8004056:	4618      	mov	r0, r3
 8004058:	4770      	bx	lr
      return HAL_TIMEOUT;
 800405a:	2003      	movs	r0, #3
}
 800405c:	4770      	bx	lr
 800405e:	bf00      	nop
 8004060:	00030d41 	.word	0x00030d41

08004064 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 8004064:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8004068:	4319      	orrs	r1, r3
 800406a:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 800406e:	2000      	movs	r0, #0
 8004070:	4770      	bx	lr
	...

08004074 <USB_DevInit>:
{
 8004074:	b084      	sub	sp, #16
 8004076:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800407a:	4604      	mov	r4, r0
 800407c:	a809      	add	r0, sp, #36	; 0x24
 800407e:	460f      	mov	r7, r1
 8004080:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 8004084:	2300      	movs	r3, #0
 8004086:	9d13      	ldr	r5, [sp, #76]	; 0x4c
    USBx->DIEPTXF[i] = 0U;
 8004088:	4619      	mov	r1, r3
 800408a:	f103 0240 	add.w	r2, r3, #64	; 0x40
  for (i = 0U; i < 15U; i++)
 800408e:	3301      	adds	r3, #1
    USBx->DIEPTXF[i] = 0U;
 8004090:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  for (i = 0U; i < 15U; i++)
 8004094:	2b0f      	cmp	r3, #15
    USBx->DIEPTXF[i] = 0U;
 8004096:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 8004098:	d1f7      	bne.n	800408a <USB_DevInit+0x16>
 800409a:	f504 6600 	add.w	r6, r4, #2048	; 0x800
  if (cfg.vbus_sensing_enable == 0U)
 800409e:	2d00      	cmp	r5, #0
 80040a0:	d16c      	bne.n	800417c <USB_DevInit+0x108>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80040a2:	6873      	ldr	r3, [r6, #4]
 80040a4:	f043 0302 	orr.w	r3, r3, #2
 80040a8:	6073      	str	r3, [r6, #4]
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80040aa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80040ac:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80040b0:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80040b2:	6823      	ldr	r3, [r4, #0]
 80040b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040b8:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80040ba:	6823      	ldr	r3, [r4, #0]
 80040bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040c0:	6023      	str	r3, [r4, #0]
  USBx_PCGCCTL = 0U;
 80040c2:	2300      	movs	r3, #0
 80040c4:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80040c8:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 80040cc:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80040d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d159      	bne.n	800418a <USB_DevInit+0x116>
    if (cfg.speed == USBD_HS_SPEED)
 80040d6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80040d8:	2900      	cmp	r1, #0
 80040da:	d154      	bne.n	8004186 <USB_DevInit+0x112>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80040dc:	4620      	mov	r0, r4
 80040de:	f7ff ffc1 	bl	8004064 <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80040e2:	2110      	movs	r1, #16
 80040e4:	4620      	mov	r0, r4
 80040e6:	f7ff ff9b 	bl	8004020 <USB_FlushTxFifo>
 80040ea:	4601      	mov	r1, r0
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80040ec:	4620      	mov	r0, r4
 80040ee:	f7ff ffa9 	bl	8004044 <USB_FlushRxFifo>
 80040f2:	2800      	cmp	r0, #0
 80040f4:	d14b      	bne.n	800418e <USB_DevInit+0x11a>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80040f6:	1c08      	adds	r0, r1, #0
 80040f8:	bf18      	it	ne
 80040fa:	2001      	movne	r0, #1
  USBx_DEVICE->DIEPMSK = 0U;
 80040fc:	2300      	movs	r3, #0
 80040fe:	f504 6210 	add.w	r2, r4, #2304	; 0x900
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004102:	f04f 4e90 	mov.w	lr, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004106:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
      USBx_INEP(i)->DIEPCTL = 0U;
 800410a:	4619      	mov	r1, r3
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800410c:	f64f 387f 	movw	r8, #64383	; 0xfb7f
  USBx_DEVICE->DIEPMSK = 0U;
 8004110:	6133      	str	r3, [r6, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004112:	6173      	str	r3, [r6, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004114:	61f3      	str	r3, [r6, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004116:	42bb      	cmp	r3, r7
 8004118:	d13b      	bne.n	8004192 <USB_DevInit+0x11e>
 800411a:	2100      	movs	r1, #0
 800411c:	f504 6230 	add.w	r2, r4, #2816	; 0xb00
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004120:	f04f 4e90 	mov.w	lr, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004124:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004128:	460f      	mov	r7, r1
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800412a:	f64f 387f 	movw	r8, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800412e:	428b      	cmp	r3, r1
 8004130:	d142      	bne.n	80041b8 <USB_DevInit+0x144>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004132:	6933      	ldr	r3, [r6, #16]
 8004134:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004138:	6133      	str	r3, [r6, #16]
  USBx->GINTMSK = 0U;
 800413a:	2300      	movs	r3, #0
 800413c:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 800413e:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 8004142:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == 0U)
 8004144:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004146:	b91b      	cbnz	r3, 8004150 <USB_DevInit+0xdc>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004148:	69a3      	ldr	r3, [r4, #24]
 800414a:	f043 0310 	orr.w	r3, r3, #16
 800414e:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004150:	69a2      	ldr	r2, [r4, #24]
 8004152:	4b23      	ldr	r3, [pc, #140]	; (80041e0 <USB_DevInit+0x16c>)
 8004154:	4313      	orrs	r3, r2
 8004156:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 8004158:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800415a:	b11b      	cbz	r3, 8004164 <USB_DevInit+0xf0>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800415c:	69a3      	ldr	r3, [r4, #24]
 800415e:	f043 0308 	orr.w	r3, r3, #8
 8004162:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 8004164:	2d01      	cmp	r5, #1
 8004166:	d105      	bne.n	8004174 <USB_DevInit+0x100>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004168:	69a3      	ldr	r3, [r4, #24]
 800416a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800416e:	f043 0304 	orr.w	r3, r3, #4
 8004172:	61a3      	str	r3, [r4, #24]
}
 8004174:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004178:	b004      	add	sp, #16
 800417a:	4770      	bx	lr
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800417c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800417e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004182:	63a3      	str	r3, [r4, #56]	; 0x38
 8004184:	e79d      	b.n	80040c2 <USB_DevInit+0x4e>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004186:	4619      	mov	r1, r3
 8004188:	e7a8      	b.n	80040dc <USB_DevInit+0x68>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800418a:	2103      	movs	r1, #3
 800418c:	e7a6      	b.n	80040dc <USB_DevInit+0x68>
 800418e:	2001      	movs	r0, #1
 8004190:	e7b4      	b.n	80040fc <USB_DevInit+0x88>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004192:	f8d2 9000 	ldr.w	r9, [r2]
 8004196:	f1b9 0f00 	cmp.w	r9, #0
 800419a:	da0b      	bge.n	80041b4 <USB_DevInit+0x140>
      if (i == 0U)
 800419c:	b93b      	cbnz	r3, 80041ae <USB_DevInit+0x13a>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800419e:	f8c2 c000 	str.w	ip, [r2]
    USBx_INEP(i)->DIEPTSIZ = 0U;
 80041a2:	6111      	str	r1, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80041a4:	3301      	adds	r3, #1
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80041a6:	f8c2 8008 	str.w	r8, [r2, #8]
 80041aa:	3220      	adds	r2, #32
 80041ac:	e7b3      	b.n	8004116 <USB_DevInit+0xa2>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80041ae:	f8c2 e000 	str.w	lr, [r2]
 80041b2:	e7f6      	b.n	80041a2 <USB_DevInit+0x12e>
      USBx_INEP(i)->DIEPCTL = 0U;
 80041b4:	6011      	str	r1, [r2, #0]
 80041b6:	e7f4      	b.n	80041a2 <USB_DevInit+0x12e>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80041b8:	f8d2 9000 	ldr.w	r9, [r2]
 80041bc:	f1b9 0f00 	cmp.w	r9, #0
 80041c0:	da0b      	bge.n	80041da <USB_DevInit+0x166>
      if (i == 0U)
 80041c2:	b939      	cbnz	r1, 80041d4 <USB_DevInit+0x160>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80041c4:	f8c2 c000 	str.w	ip, [r2]
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80041c8:	6117      	str	r7, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80041ca:	3101      	adds	r1, #1
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80041cc:	f8c2 8008 	str.w	r8, [r2, #8]
 80041d0:	3220      	adds	r2, #32
 80041d2:	e7ac      	b.n	800412e <USB_DevInit+0xba>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80041d4:	f8c2 e000 	str.w	lr, [r2]
 80041d8:	e7f6      	b.n	80041c8 <USB_DevInit+0x154>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80041da:	6017      	str	r7, [r2, #0]
 80041dc:	e7f4      	b.n	80041c8 <USB_DevInit+0x154>
 80041de:	bf00      	nop
 80041e0:	803c3800 	.word	0x803c3800

080041e4 <USB_DevDisconnect>:
{
 80041e4:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80041e6:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 80041ea:	f043 0302 	orr.w	r3, r3, #2
 80041ee:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 80041f2:	2003      	movs	r0, #3
 80041f4:	f7fc faba 	bl	800076c <HAL_Delay>
}
 80041f8:	2000      	movs	r0, #0
 80041fa:	bd08      	pop	{r3, pc}

080041fc <delay>:
/* USER CODE BEGIN 0 */
void delay (uint16_t time)
{
	/* change your code here for the delay in microseconds */

	__HAL_TIM_SET_COUNTER(&htim2, 0);
 80041fc:	4b03      	ldr	r3, [pc, #12]	; (800420c <delay+0x10>)
 80041fe:	2200      	movs	r2, #0
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	625a      	str	r2, [r3, #36]	; 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim2))<time);
 8004204:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004206:	4282      	cmp	r2, r0
 8004208:	d3fc      	bcc.n	8004204 <delay+0x8>
}
 800420a:	4770      	bx	lr
 800420c:	200006c8 	.word	0x200006c8

08004210 <Set_Pin_Output>:
float Temperature = 0;
float Humidity = 0;
uint8_t Presence = 0;

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004210:	b530      	push	{r4, r5, lr}
 8004212:	b087      	sub	sp, #28
 8004214:	4604      	mov	r4, r0
 8004216:	460d      	mov	r5, r1
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004218:	2214      	movs	r2, #20
 800421a:	2100      	movs	r1, #0
 800421c:	a801      	add	r0, sp, #4
 800421e:	f000 fc7d 	bl	8004b1c <memset>
	GPIO_InitStruct.Pin = GPIO_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004222:	2301      	movs	r3, #1
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8004224:	a901      	add	r1, sp, #4
 8004226:	4620      	mov	r0, r4
	GPIO_InitStruct.Pin = GPIO_Pin;
 8004228:	9501      	str	r5, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800422a:	9302      	str	r3, [sp, #8]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800422c:	f7fc fda0 	bl	8000d70 <HAL_GPIO_Init>
}
 8004230:	b007      	add	sp, #28
 8004232:	bd30      	pop	{r4, r5, pc}

08004234 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004234:	b530      	push	{r4, r5, lr}
 8004236:	b087      	sub	sp, #28
 8004238:	4604      	mov	r4, r0
 800423a:	460d      	mov	r5, r1
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800423c:	2214      	movs	r2, #20
 800423e:	2100      	movs	r1, #0
 8004240:	a801      	add	r0, sp, #4
 8004242:	f000 fc6b 	bl	8004b1c <memset>
	GPIO_InitStruct.Pin = GPIO_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004246:	2301      	movs	r3, #1
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8004248:	a901      	add	r1, sp, #4
 800424a:	4620      	mov	r0, r4
	GPIO_InitStruct.Pin = GPIO_Pin;
 800424c:	9501      	str	r5, [sp, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800424e:	9303      	str	r3, [sp, #12]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8004250:	f7fc fd8e 	bl	8000d70 <HAL_GPIO_Init>
}
 8004254:	b007      	add	sp, #28
 8004256:	bd30      	pop	{r4, r5, pc}

08004258 <DHT11_Start>:

void DHT11_Start (void)
{
 8004258:	b510      	push	{r4, lr}
	Set_Pin_Output(DHT22_GPIO_Port, DHT22_Pin);  // set the pin as output
 800425a:	4c0e      	ldr	r4, [pc, #56]	; (8004294 <DHT11_Start+0x3c>)
 800425c:	2180      	movs	r1, #128	; 0x80
 800425e:	4620      	mov	r0, r4
 8004260:	f7ff ffd6 	bl	8004210 <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT22_GPIO_Port, DHT22_Pin, 0);   // pull the pin low
 8004264:	2200      	movs	r2, #0
 8004266:	2180      	movs	r1, #128	; 0x80
 8004268:	4620      	mov	r0, r4
 800426a:	f7fc fe75 	bl	8000f58 <HAL_GPIO_WritePin>
	delay (18000);   // wait for 18ms
 800426e:	f244 6050 	movw	r0, #18000	; 0x4650
 8004272:	f7ff ffc3 	bl	80041fc <delay>
    HAL_GPIO_WritePin (DHT22_GPIO_Port, DHT22_Pin, 1);   // pull the pin high
 8004276:	2180      	movs	r1, #128	; 0x80
 8004278:	4620      	mov	r0, r4
 800427a:	2201      	movs	r2, #1
 800427c:	f7fc fe6c 	bl	8000f58 <HAL_GPIO_WritePin>
	delay (20);   // wait for 20us
 8004280:	2014      	movs	r0, #20
 8004282:	f7ff ffbb 	bl	80041fc <delay>
	Set_Pin_Input(DHT22_GPIO_Port, DHT22_Pin);    // set as input
 8004286:	4620      	mov	r0, r4
 8004288:	2180      	movs	r1, #128	; 0x80
}
 800428a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	Set_Pin_Input(DHT22_GPIO_Port, DHT22_Pin);    // set as input
 800428e:	f7ff bfd1 	b.w	8004234 <Set_Pin_Input>
 8004292:	bf00      	nop
 8004294:	58020c00 	.word	0x58020c00

08004298 <DHT11_Check_Response>:

uint8_t DHT11_Check_Response (void)
{
 8004298:	b538      	push	{r3, r4, r5, lr}
	uint8_t Response = 0;
	delay (40);
 800429a:	2028      	movs	r0, #40	; 0x28
 800429c:	f7ff ffae 	bl	80041fc <delay>
	if (!(HAL_GPIO_ReadPin (DHT22_GPIO_Port, DHT22_Pin)))
 80042a0:	2180      	movs	r1, #128	; 0x80
 80042a2:	480d      	ldr	r0, [pc, #52]	; (80042d8 <DHT11_Check_Response+0x40>)
 80042a4:	f7fc fe52 	bl	8000f4c <HAL_GPIO_ReadPin>
 80042a8:	b998      	cbnz	r0, 80042d2 <DHT11_Check_Response+0x3a>
	{
		delay (80);
 80042aa:	2050      	movs	r0, #80	; 0x50
 80042ac:	f7ff ffa6 	bl	80041fc <delay>
		if ((HAL_GPIO_ReadPin (DHT22_GPIO_Port, DHT22_Pin))) Response = 1;
 80042b0:	2180      	movs	r1, #128	; 0x80
 80042b2:	4809      	ldr	r0, [pc, #36]	; (80042d8 <DHT11_Check_Response+0x40>)
 80042b4:	f7fc fe4a 	bl	8000f4c <HAL_GPIO_ReadPin>
		else Response = -1; // 255
 80042b8:	2800      	cmp	r0, #0
 80042ba:	bf14      	ite	ne
 80042bc:	2401      	movne	r4, #1
 80042be:	24ff      	moveq	r4, #255	; 0xff
	}
	while ((HAL_GPIO_ReadPin (DHT22_GPIO_Port, DHT22_Pin)));   // wait for the pin to go low
 80042c0:	4d05      	ldr	r5, [pc, #20]	; (80042d8 <DHT11_Check_Response+0x40>)
 80042c2:	2180      	movs	r1, #128	; 0x80
 80042c4:	4628      	mov	r0, r5
 80042c6:	f7fc fe41 	bl	8000f4c <HAL_GPIO_ReadPin>
 80042ca:	2800      	cmp	r0, #0
 80042cc:	d1f9      	bne.n	80042c2 <DHT11_Check_Response+0x2a>

	return Response;
}
 80042ce:	4620      	mov	r0, r4
 80042d0:	bd38      	pop	{r3, r4, r5, pc}
	uint8_t Response = 0;
 80042d2:	2400      	movs	r4, #0
 80042d4:	e7f4      	b.n	80042c0 <DHT11_Check_Response+0x28>
 80042d6:	bf00      	nop
 80042d8:	58020c00 	.word	0x58020c00

080042dc <DHT11_Read>:

uint8_t DHT11_Read (void)
{
 80042dc:	b570      	push	{r4, r5, r6, lr}
 80042de:	2400      	movs	r4, #0
 80042e0:	2507      	movs	r5, #7
	uint8_t i,j;
	for (j=0;j<8;j++)
	{
		while (!(HAL_GPIO_ReadPin (DHT22_GPIO_Port, DHT22_Pin)));   // wait for the pin to go high
 80042e2:	4e10      	ldr	r6, [pc, #64]	; (8004324 <DHT11_Read+0x48>)
 80042e4:	2180      	movs	r1, #128	; 0x80
 80042e6:	4630      	mov	r0, r6
 80042e8:	f7fc fe30 	bl	8000f4c <HAL_GPIO_ReadPin>
 80042ec:	2800      	cmp	r0, #0
 80042ee:	d0f9      	beq.n	80042e4 <DHT11_Read+0x8>
		delay (40);   // wait for 40 us
 80042f0:	2028      	movs	r0, #40	; 0x28
 80042f2:	f7ff ff83 	bl	80041fc <delay>
		if (!(HAL_GPIO_ReadPin (DHT22_GPIO_Port, DHT22_Pin)))   // if the pin is low
 80042f6:	2180      	movs	r1, #128	; 0x80
 80042f8:	4630      	mov	r0, r6
 80042fa:	f7fc fe27 	bl	8000f4c <HAL_GPIO_ReadPin>
 80042fe:	2301      	movs	r3, #1
		{
			i&= ~(1<<(7-j));   // write 0
 8004300:	40ab      	lsls	r3, r5
		if (!(HAL_GPIO_ReadPin (DHT22_GPIO_Port, DHT22_Pin)))   // if the pin is low
 8004302:	b960      	cbnz	r0, 800431e <DHT11_Read+0x42>
			i&= ~(1<<(7-j));   // write 0
 8004304:	ea24 0403 	bic.w	r4, r4, r3
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
		while ((HAL_GPIO_ReadPin (DHT22_GPIO_Port, DHT22_Pin)));  // wait for the pin to go low
 8004308:	2180      	movs	r1, #128	; 0x80
 800430a:	4630      	mov	r0, r6
 800430c:	f7fc fe1e 	bl	8000f4c <HAL_GPIO_ReadPin>
 8004310:	2800      	cmp	r0, #0
 8004312:	d1f9      	bne.n	8004308 <DHT11_Read+0x2c>
	for (j=0;j<8;j++)
 8004314:	f115 35ff 	adds.w	r5, r5, #4294967295
 8004318:	d2e4      	bcs.n	80042e4 <DHT11_Read+0x8>
	}
	return i;
}
 800431a:	4620      	mov	r0, r4
 800431c:	bd70      	pop	{r4, r5, r6, pc}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 800431e:	431c      	orrs	r4, r3
 8004320:	b2e4      	uxtb	r4, r4
 8004322:	e7f1      	b.n	8004308 <DHT11_Read+0x2c>
 8004324:	58020c00 	.word	0x58020c00

08004328 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004328:	b510      	push	{r4, lr}
 800432a:	b0cc      	sub	sp, #304	; 0x130
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800432c:	224c      	movs	r2, #76	; 0x4c
 800432e:	2100      	movs	r1, #0
 8004330:	a80a      	add	r0, sp, #40	; 0x28
 8004332:	f000 fbf3 	bl	8004b1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004336:	2220      	movs	r2, #32
 8004338:	2100      	movs	r1, #0
 800433a:	a802      	add	r0, sp, #8
 800433c:	f000 fbee 	bl	8004b1c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004340:	22bc      	movs	r2, #188	; 0xbc
 8004342:	2100      	movs	r1, #0
 8004344:	a81d      	add	r0, sp, #116	; 0x74
 8004346:	f000 fbe9 	bl	8004b1c <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800434a:	2002      	movs	r0, #2
 800434c:	f7fc feae 	bl	80010ac <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004350:	2300      	movs	r3, #0
 8004352:	9301      	str	r3, [sp, #4]
 8004354:	4b25      	ldr	r3, [pc, #148]	; (80043ec <SystemClock_Config+0xc4>)
 8004356:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004358:	f022 0201 	bic.w	r2, r2, #1
 800435c:	62da      	str	r2, [r3, #44]	; 0x2c
 800435e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004360:	f003 0301 	and.w	r3, r3, #1
 8004364:	9301      	str	r3, [sp, #4]
 8004366:	4b22      	ldr	r3, [pc, #136]	; (80043f0 <SystemClock_Config+0xc8>)
 8004368:	699a      	ldr	r2, [r3, #24]
 800436a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800436e:	619a      	str	r2, [r3, #24]
 8004370:	699a      	ldr	r2, [r3, #24]
 8004372:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8004376:	9201      	str	r2, [sp, #4]
 8004378:	9a01      	ldr	r2, [sp, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800437a:	699a      	ldr	r2, [r3, #24]
 800437c:	0492      	lsls	r2, r2, #18
 800437e:	d5fc      	bpl.n	800437a <SystemClock_Config+0x52>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004380:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004382:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLN = 120;
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 20;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8004386:	2400      	movs	r4, #0
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004388:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800438a:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800438c:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800438e:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLM = 1;
 8004390:	9215      	str	r2, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 120;
 8004392:	2278      	movs	r2, #120	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004394:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004396:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 8004398:	9216      	str	r2, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 20;
 800439a:	2214      	movs	r2, #20
  RCC_OscInitStruct.PLL.PLLP = 2;
 800439c:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800439e:	9319      	str	r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80043a0:	230c      	movs	r3, #12
  RCC_OscInitStruct.PLL.PLLQ = 20;
 80043a2:	9218      	str	r2, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80043a4:	931a      	str	r3, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80043a6:	941b      	str	r4, [sp, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80043a8:	941c      	str	r4, [sp, #112]	; 0x70
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80043aa:	f7fc feab 	bl	8001104 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80043ae:	233f      	movs	r3, #63	; 0x3f
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80043b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80043b4:	2104      	movs	r1, #4
 80043b6:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80043b8:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80043ba:	2303      	movs	r3, #3
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80043bc:	9208      	str	r2, [sp, #32]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80043be:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80043c0:	2308      	movs	r3, #8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80043c2:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80043c4:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80043c6:	2340      	movs	r3, #64	; 0x40
 80043c8:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80043ca:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80043cc:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80043ce:	f7fd f9bd 	bl	800174c <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USB;
 80043d2:	4b08      	ldr	r3, [pc, #32]	; (80043f4 <SystemClock_Config+0xcc>)
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80043d4:	a81d      	add	r0, sp, #116	; 0x74
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80043d6:	943a      	str	r4, [sp, #232]	; 0xe8
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USB;
 80043d8:	931d      	str	r3, [sp, #116]	; 0x74
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80043da:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80043de:	933e      	str	r3, [sp, #248]	; 0xf8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80043e0:	f7fd fc12 	bl	8001c08 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
  /** Enable USB Voltage detector 
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 80043e4:	f7fc fe86 	bl	80010f4 <HAL_PWREx_EnableUSBVoltageDetector>
}
 80043e8:	b04c      	add	sp, #304	; 0x130
 80043ea:	bd10      	pop	{r4, pc}
 80043ec:	58000400 	.word	0x58000400
 80043f0:	58024800 	.word	0x58024800
 80043f4:	00040002 	.word	0x00040002

080043f8 <main>:
{
 80043f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043fc:	f6ad 0d04 	subw	sp, sp, #2052	; 0x804
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004400:	2400      	movs	r4, #0
  HAL_Init();
 8004402:	f7fc f973 	bl	80006ec <HAL_Init>
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004406:	2701      	movs	r7, #1
  SystemClock_Config();
 8004408:	f7ff ff8e 	bl	8004328 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800440c:	2214      	movs	r2, #20
 800440e:	2100      	movs	r1, #0
 8004410:	a80c      	add	r0, sp, #48	; 0x30
 8004412:	f000 fb83 	bl	8004b1c <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004416:	4bae      	ldr	r3, [pc, #696]	; (80046d0 <main+0x2d8>)
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8004418:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 800441c:	48ad      	ldr	r0, [pc, #692]	; (80046d4 <main+0x2dc>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800441e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8004422:	2580      	movs	r5, #128	; 0x80
  htim2.Instance = TIM2;
 8004424:	4eac      	ldr	r6, [pc, #688]	; (80046d8 <main+0x2e0>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004426:	f042 0204 	orr.w	r2, r2, #4
	  sprintf(g,"\n\r hello Mohamed No: %d",i);
 800442a:	f8df 8300 	ldr.w	r8, [pc, #768]	; 800472c <main+0x334>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800442e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8004432:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004436:	f002 0204 	and.w	r2, r2, #4
 800443a:	9203      	str	r2, [sp, #12]
 800443c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800443e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004442:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004446:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800444a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800444e:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8004452:	9204      	str	r2, [sp, #16]
 8004454:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004456:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800445a:	f042 0201 	orr.w	r2, r2, #1
 800445e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8004462:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004466:	f002 0201 	and.w	r2, r2, #1
 800446a:	9205      	str	r2, [sp, #20]
 800446c:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800446e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004472:	f042 0202 	orr.w	r2, r2, #2
 8004476:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800447a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800447e:	f002 0202 	and.w	r2, r2, #2
 8004482:	9206      	str	r2, [sp, #24]
 8004484:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004486:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800448a:	f042 0208 	orr.w	r2, r2, #8
 800448e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8004492:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004496:	f002 0208 	and.w	r2, r2, #8
 800449a:	9207      	str	r2, [sp, #28]
 800449c:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800449e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80044a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80044a6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80044aa:	2200      	movs	r2, #0
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80044ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80044b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044b4:	9308      	str	r3, [sp, #32]
 80044b6:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80044b8:	f7fc fd4e 	bl	8000f58 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80044bc:	2200      	movs	r2, #0
 80044be:	2140      	movs	r1, #64	; 0x40
 80044c0:	4886      	ldr	r0, [pc, #536]	; (80046dc <main+0x2e4>)
 80044c2:	f7fc fd49 	bl	8000f58 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 80044c6:	2200      	movs	r2, #0
 80044c8:	2180      	movs	r1, #128	; 0x80
 80044ca:	4885      	ldr	r0, [pc, #532]	; (80046e0 <main+0x2e8>)
 80044cc:	f7fc fd44 	bl	8000f58 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80044d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80044d4:	a90c      	add	r1, sp, #48	; 0x30
 80044d6:	4883      	ldr	r0, [pc, #524]	; (80046e4 <main+0x2ec>)
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80044d8:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80044da:	4b83      	ldr	r3, [pc, #524]	; (80046e8 <main+0x2f0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044dc:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80044de:	930d      	str	r3, [sp, #52]	; 0x34
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80044e0:	f7fc fc46 	bl	8000d70 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80044e4:	f44f 4381 	mov.w	r3, #16512	; 0x4080
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044e8:	a90c      	add	r1, sp, #48	; 0x30
 80044ea:	487a      	ldr	r0, [pc, #488]	; (80046d4 <main+0x2dc>)
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80044ec:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80044ee:	970d      	str	r7, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044f0:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044f2:	940f      	str	r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044f4:	f7fc fc3c 	bl	8000d70 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80044f8:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80044fa:	a90c      	add	r1, sp, #48	; 0x30
 80044fc:	4877      	ldr	r0, [pc, #476]	; (80046dc <main+0x2e4>)
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80044fe:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004500:	970d      	str	r7, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004502:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004504:	940f      	str	r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8004506:	f7fc fc33 	bl	8000d70 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800450a:	a90c      	add	r1, sp, #48	; 0x30
 800450c:	4873      	ldr	r0, [pc, #460]	; (80046dc <main+0x2e4>)
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800450e:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004510:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004512:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8004514:	f7fc fc2c 	bl	8000d70 <HAL_GPIO_Init>
  /*Configure GPIO pin : PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004518:	a90c      	add	r1, sp, #48	; 0x30
 800451a:	4871      	ldr	r0, [pc, #452]	; (80046e0 <main+0x2e8>)
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800451c:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800451e:	970d      	str	r7, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004520:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004522:	940f      	str	r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004524:	f7fc fc24 	bl	8000d70 <HAL_GPIO_Init>
  heth.Instance = ETH;
 8004528:	4870      	ldr	r0, [pc, #448]	; (80046ec <main+0x2f4>)
  heth.Init.MACAddr[2] =   0xE1;
 800452a:	22e1      	movs	r2, #225	; 0xe1
  heth.Instance = ETH;
 800452c:	4b70      	ldr	r3, [pc, #448]	; (80046f0 <main+0x2f8>)
 800452e:	6003      	str	r3, [r0, #0]
  heth.Init.MACAddr[0] =   0x00;
 8004530:	6843      	ldr	r3, [r0, #4]
 8004532:	701c      	strb	r4, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 8004534:	6843      	ldr	r3, [r0, #4]
 8004536:	705d      	strb	r5, [r3, #1]
  heth.Init.MACAddr[2] =   0xE1;
 8004538:	6843      	ldr	r3, [r0, #4]
  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800453a:	4d6e      	ldr	r5, [pc, #440]	; (80046f4 <main+0x2fc>)
  heth.Init.MACAddr[2] =   0xE1;
 800453c:	709a      	strb	r2, [r3, #2]
  heth.Init.MACAddr[3] =   0x00;
 800453e:	6843      	ldr	r3, [r0, #4]
 8004540:	70dc      	strb	r4, [r3, #3]
  heth.Init.MACAddr[4] =   0x00;
 8004542:	6843      	ldr	r3, [r0, #4]
 8004544:	711c      	strb	r4, [r3, #4]
  heth.Init.MACAddr[5] =   0x00;
 8004546:	6843      	ldr	r3, [r0, #4]
 8004548:	715c      	strb	r4, [r3, #5]
  heth.Init.TxDesc = DMATxDscrTab;
 800454a:	4b6b      	ldr	r3, [pc, #428]	; (80046f8 <main+0x300>)
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800454c:	7207      	strb	r7, [r0, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800454e:	60c3      	str	r3, [r0, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8004550:	4b6a      	ldr	r3, [pc, #424]	; (80046fc <main+0x304>)
 8004552:	6103      	str	r3, [r0, #16]
  heth.Init.RxBuffLen = 1524;
 8004554:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8004558:	6143      	str	r3, [r0, #20]
  if (HAL_ETH_Init(&heth) != HAL_OK)
 800455a:	f7fc faeb 	bl	8000b34 <HAL_ETH_Init>
  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800455e:	2234      	movs	r2, #52	; 0x34
 8004560:	4621      	mov	r1, r4
 8004562:	4628      	mov	r0, r5
 8004564:	f000 fada 	bl	8004b1c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8004568:	2321      	movs	r3, #33	; 0x21
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800456a:	4621      	mov	r1, r4
 800456c:	2210      	movs	r2, #16
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800456e:	602b      	str	r3, [r5, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8004570:	f44f 3340 	mov.w	r3, #196608	; 0x30000
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004574:	a80c      	add	r0, sp, #48	; 0x30
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8004576:	616b      	str	r3, [r5, #20]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004578:	f000 fad0 	bl	8004b1c <memset>
  htim2.Init.Prescaler = 239;
 800457c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004580:	23ef      	movs	r3, #239	; 0xef
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004582:	4630      	mov	r0, r6
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004584:	60b4      	str	r4, [r6, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004586:	6134      	str	r4, [r6, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004588:	61b4      	str	r4, [r6, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800458a:	9409      	str	r4, [sp, #36]	; 0x24
 800458c:	940a      	str	r4, [sp, #40]	; 0x28
 800458e:	940b      	str	r4, [sp, #44]	; 0x2c
  huart3.Instance = USART3;
 8004590:	4d5b      	ldr	r5, [pc, #364]	; (8004700 <main+0x308>)
  htim2.Init.Prescaler = 239;
 8004592:	e886 000c 	stmia.w	r6, {r2, r3}
  htim2.Init.Period = 0xFFFF;
 8004596:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800459a:	60f3      	str	r3, [r6, #12]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800459c:	f7fe f96a 	bl	8002874 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80045a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80045a4:	a90c      	add	r1, sp, #48	; 0x30
 80045a6:	4630      	mov	r0, r6
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80045a8:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80045aa:	f7fe f987 	bl	80028bc <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80045ae:	a909      	add	r1, sp, #36	; 0x24
 80045b0:	4630      	mov	r0, r6
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80045b2:	9409      	str	r4, [sp, #36]	; 0x24
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80045b4:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80045b6:	f7fe fa2f 	bl	8002a18 <HAL_TIMEx_MasterConfigSynchronization>
  huart3.Init.BaudRate = 115200;
 80045ba:	4952      	ldr	r1, [pc, #328]	; (8004704 <main+0x30c>)
 80045bc:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80045c0:	4628      	mov	r0, r5
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80045c2:	60ac      	str	r4, [r5, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80045c4:	60ec      	str	r4, [r5, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80045c6:	612c      	str	r4, [r5, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80045c8:	61ac      	str	r4, [r5, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80045ca:	61ec      	str	r4, [r5, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80045cc:	622c      	str	r4, [r5, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80045ce:	626c      	str	r4, [r5, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80045d0:	62ac      	str	r4, [r5, #40]	; 0x28
  huart3.Init.BaudRate = 115200;
 80045d2:	e885 000a 	stmia.w	r5, {r1, r3}
  huart3.Init.Mode = UART_MODE_TX_RX;
 80045d6:	230c      	movs	r3, #12
 80045d8:	616b      	str	r3, [r5, #20]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80045da:	f7ff fbcc 	bl	8003d76 <HAL_UART_Init>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80045de:	4621      	mov	r1, r4
 80045e0:	4628      	mov	r0, r5
 80045e2:	f7ff fc5e 	bl	8003ea2 <HAL_UARTEx_SetTxFifoThreshold>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80045e6:	4621      	mov	r1, r4
 80045e8:	4628      	mov	r0, r5
 80045ea:	f7ff fc7e 	bl	8003eea <HAL_UARTEx_SetRxFifoThreshold>
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80045ee:	4628      	mov	r0, r5
 80045f0:	f7ff fc3c 	bl	8003e6c <HAL_UARTEx_DisableFifoMode>
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80045f4:	4844      	ldr	r0, [pc, #272]	; (8004708 <main+0x310>)
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80045f6:	f04f 0e09 	mov.w	lr, #9
 80045fa:	4b44      	ldr	r3, [pc, #272]	; (800470c <main+0x314>)
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80045fc:	6104      	str	r4, [r0, #16]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80045fe:	61c7      	str	r7, [r0, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8004600:	6204      	str	r4, [r0, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8004602:	6244      	str	r4, [r0, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8004604:	6287      	str	r7, [r0, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8004606:	62c7      	str	r7, [r0, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8004608:	6304      	str	r4, [r0, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800460a:	e880 4008 	stmia.w	r0, {r3, lr}
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800460e:	2302      	movs	r3, #2
 8004610:	60c3      	str	r3, [r0, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8004612:	6183      	str	r3, [r0, #24]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8004614:	f7fc fcac 	bl	8000f70 <HAL_PCD_Init>
  HAL_TIM_Base_Init(&htim2);
 8004618:	4630      	mov	r0, r6
 800461a:	f7fe f92b 	bl	8002874 <HAL_TIM_Base_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 800461e:	4630      	mov	r0, r6
	  sprintf(g,"\n\r hello Mohamed No: %d",i);
 8004620:	4e3b      	ldr	r6, [pc, #236]	; (8004710 <main+0x318>)
  HAL_TIM_Base_Start_IT(&htim2);
 8004622:	f7fe f8ab 	bl	800277c <HAL_TIM_Base_Start_IT>
	  i+=1;
 8004626:	3401      	adds	r4, #1
	  sprintf(g,"\n\r hello Mohamed No: %d",i);
 8004628:	4641      	mov	r1, r8
 800462a:	4630      	mov	r0, r6
	  Rh_byte1 = DHT11_Read ();
 800462c:	f8df a100 	ldr.w	sl, [pc, #256]	; 8004730 <main+0x338>
	  sprintf(g,"\n\r hello Mohamed No: %d",i);
 8004630:	4622      	mov	r2, r4
	  Rh_byte2 = DHT11_Read ();
 8004632:	4f38      	ldr	r7, [pc, #224]	; (8004714 <main+0x31c>)
	  sprintf(g,"\n\r hello Mohamed No: %d",i);
 8004634:	f000 fa7a 	bl	8004b2c <siprintf>
	  HAL_UART_Transmit(&huart3,g,strlen(g),1000);
 8004638:	4630      	mov	r0, r6
 800463a:	f7fb fe51 	bl	80002e0 <strlen>
 800463e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004642:	b282      	uxth	r2, r0
 8004644:	4631      	mov	r1, r6
 8004646:	4628      	mov	r0, r5
	  Temp_byte1 = DHT11_Read ();
 8004648:	f8df b0e8 	ldr.w	fp, [pc, #232]	; 8004734 <main+0x33c>
	  HAL_UART_Transmit(&huart3,g,strlen(g),1000);
 800464c:	f7ff fb05 	bl	8003c5a <HAL_UART_Transmit>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 8004650:	2180      	movs	r1, #128	; 0x80
 8004652:	4820      	ldr	r0, [pc, #128]	; (80046d4 <main+0x2dc>)
 8004654:	f7fc fc85 	bl	8000f62 <HAL_GPIO_TogglePin>
	  delay(50000);
 8004658:	f24c 3050 	movw	r0, #50000	; 0xc350
 800465c:	f7ff fdce 	bl	80041fc <delay>
	  Temp_byte2 = DHT11_Read ();
 8004660:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 8004738 <main+0x340>
	  DHT11_Start();
 8004664:	f7ff fdf8 	bl	8004258 <DHT11_Start>
	  Presence = DHT11_Check_Response();
 8004668:	f7ff fe16 	bl	8004298 <DHT11_Check_Response>
 800466c:	4b2a      	ldr	r3, [pc, #168]	; (8004718 <main+0x320>)
 800466e:	7018      	strb	r0, [r3, #0]
	  Rh_byte1 = DHT11_Read ();
 8004670:	f7ff fe34 	bl	80042dc <DHT11_Read>
 8004674:	f88a 0000 	strb.w	r0, [sl]
	  Rh_byte2 = DHT11_Read ();
 8004678:	f7ff fe30 	bl	80042dc <DHT11_Read>
 800467c:	7038      	strb	r0, [r7, #0]
	  Temp_byte1 = DHT11_Read ();
 800467e:	f7ff fe2d 	bl	80042dc <DHT11_Read>
 8004682:	f88b 0000 	strb.w	r0, [fp]
	  Temp_byte2 = DHT11_Read ();
 8004686:	f7ff fe29 	bl	80042dc <DHT11_Read>
 800468a:	f889 0000 	strb.w	r0, [r9]
	  SUM = DHT11_Read();
 800468e:	f7ff fe25 	bl	80042dc <DHT11_Read>
 8004692:	4b22      	ldr	r3, [pc, #136]	; (800471c <main+0x324>)
	  TEMP = Temp_byte1;
 8004694:	f89b 2000 	ldrb.w	r2, [fp]
	  SUM = DHT11_Read();
 8004698:	8018      	strh	r0, [r3, #0]
	  TEMP = Temp_byte1;
 800469a:	4b21      	ldr	r3, [pc, #132]	; (8004720 <main+0x328>)
	  RH = Rh_byte1;
 800469c:	f89a 1000 	ldrb.w	r1, [sl]
	  TEMP = Temp_byte1;
 80046a0:	801a      	strh	r2, [r3, #0]
	  sprintf(buffer,"temp=%d.%d hum=%d.%d\n\r",Temp_byte1,Temp_byte2,Rh_byte1,Rh_byte2);
 80046a2:	7838      	ldrb	r0, [r7, #0]
	  RH = Rh_byte1;
 80046a4:	4b1f      	ldr	r3, [pc, #124]	; (8004724 <main+0x32c>)
 80046a6:	8019      	strh	r1, [r3, #0]
	  sprintf(buffer,"temp=%d.%d hum=%d.%d\n\r",Temp_byte1,Temp_byte2,Rh_byte1,Rh_byte2);
 80046a8:	f899 3000 	ldrb.w	r3, [r9]
 80046ac:	9001      	str	r0, [sp, #4]
 80046ae:	a80c      	add	r0, sp, #48	; 0x30
 80046b0:	9100      	str	r1, [sp, #0]
 80046b2:	491d      	ldr	r1, [pc, #116]	; (8004728 <main+0x330>)
 80046b4:	f000 fa3a 	bl	8004b2c <siprintf>
	  HAL_UART_Transmit(&huart3,buffer,strlen(buffer),1000);
 80046b8:	a80c      	add	r0, sp, #48	; 0x30
 80046ba:	f7fb fe11 	bl	80002e0 <strlen>
 80046be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80046c2:	b282      	uxth	r2, r0
 80046c4:	a90c      	add	r1, sp, #48	; 0x30
 80046c6:	4628      	mov	r0, r5
 80046c8:	f7ff fac7 	bl	8003c5a <HAL_UART_Transmit>
 80046cc:	e7ab      	b.n	8004626 <main+0x22e>
 80046ce:	bf00      	nop
 80046d0:	58024400 	.word	0x58024400
 80046d4:	58020400 	.word	0x58020400
 80046d8:	200006c8 	.word	0x200006c8
 80046dc:	58021800 	.word	0x58021800
 80046e0:	58020c00 	.word	0x58020c00
 80046e4:	58020800 	.word	0x58020800
 80046e8:	11110000 	.word	0x11110000
 80046ec:	2000070c 	.word	0x2000070c
 80046f0:	40028000 	.word	0x40028000
 80046f4:	2000077c 	.word	0x2000077c
 80046f8:	200000d4 	.word	0x200000d4
 80046fc:	20000074 	.word	0x20000074
 8004700:	20000164 	.word	0x20000164
 8004704:	40004800 	.word	0x40004800
 8004708:	200001f0 	.word	0x200001f0
 800470c:	40080000 	.word	0x40080000
 8004710:	200005f8 	.word	0x200005f8
 8004714:	200006c7 	.word	0x200006c7
 8004718:	20000150 	.word	0x20000150
 800471c:	20000708 	.word	0x20000708
 8004720:	200006c4 	.word	0x200006c4
 8004724:	200006c2 	.word	0x200006c2
 8004728:	080053cd 	.word	0x080053cd
 800472c:	080053b5 	.word	0x080053b5
 8004730:	200006c0 	.word	0x200006c0
 8004734:	200006c6 	.word	0x200006c6
 8004738:	200007b0 	.word	0x200007b0

0800473c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800473c:	4b07      	ldr	r3, [pc, #28]	; (800475c <HAL_MspInit+0x20>)
{
 800473e:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004740:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8004744:	f042 0202 	orr.w	r2, r2, #2
 8004748:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 800474c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004750:	f003 0302 	and.w	r3, r3, #2
 8004754:	9301      	str	r3, [sp, #4]
 8004756:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004758:	b002      	add	sp, #8
 800475a:	4770      	bx	lr
 800475c:	58024400 	.word	0x58024400

08004760 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8004760:	b570      	push	{r4, r5, r6, lr}
 8004762:	b08c      	sub	sp, #48	; 0x30
 8004764:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004766:	2214      	movs	r2, #20
 8004768:	2100      	movs	r1, #0
 800476a:	a807      	add	r0, sp, #28
 800476c:	f000 f9d6 	bl	8004b1c <memset>
  if(heth->Instance==ETH)
 8004770:	6822      	ldr	r2, [r4, #0]
 8004772:	4b42      	ldr	r3, [pc, #264]	; (800487c <HAL_ETH_MspInit+0x11c>)
 8004774:	429a      	cmp	r2, r3
 8004776:	d17f      	bne.n	8004878 <HAL_ETH_MspInit+0x118>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8004778:	4b41      	ldr	r3, [pc, #260]	; (8004880 <HAL_ETH_MspInit+0x120>)
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800477a:	2602      	movs	r6, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800477c:	250b      	movs	r5, #11
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800477e:	a907      	add	r1, sp, #28
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8004780:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8

    GPIO_InitStruct.Pin = GPIO_PIN_1|RMII_MDIO_Pin|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004784:	2400      	movs	r4, #0
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004786:	483f      	ldr	r0, [pc, #252]	; (8004884 <HAL_ETH_MspInit+0x124>)
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8004788:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800478c:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8004790:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8004794:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8004798:	9200      	str	r2, [sp, #0]
 800479a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800479c:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 80047a0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80047a4:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 80047a8:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 80047ac:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 80047b0:	9201      	str	r2, [sp, #4]
 80047b2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80047b4:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 80047b8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80047bc:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 80047c0:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 80047c4:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80047c8:	9202      	str	r2, [sp, #8]
 80047ca:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80047cc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80047d0:	f042 0204 	orr.w	r2, r2, #4
 80047d4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80047d8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80047dc:	f002 0204 	and.w	r2, r2, #4
 80047e0:	9203      	str	r2, [sp, #12]
 80047e2:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047e4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80047e8:	f042 0201 	orr.w	r2, r2, #1
 80047ec:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80047f0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80047f4:	f002 0201 	and.w	r2, r2, #1
 80047f8:	9204      	str	r2, [sp, #16]
 80047fa:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80047fc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004800:	f042 0202 	orr.w	r2, r2, #2
 8004804:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8004808:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800480c:	f002 0202 	and.w	r2, r2, #2
 8004810:	9205      	str	r2, [sp, #20]
 8004812:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004814:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004818:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800481c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8004820:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004824:	9608      	str	r6, [sp, #32]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004826:	f003 0340 	and.w	r3, r3, #64	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800482a:	950b      	str	r5, [sp, #44]	; 0x2c
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800482c:	9306      	str	r3, [sp, #24]
 800482e:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8004830:	2332      	movs	r3, #50	; 0x32
 8004832:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004834:	f7fc fa9c 	bl	8000d70 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1|RMII_MDIO_Pin|GPIO_PIN_7;
 8004838:	2386      	movs	r3, #134	; 0x86
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800483a:	a907      	add	r1, sp, #28
 800483c:	4812      	ldr	r0, [pc, #72]	; (8004888 <HAL_ETH_MspInit+0x128>)
    GPIO_InitStruct.Pin = GPIO_PIN_1|RMII_MDIO_Pin|GPIO_PIN_7;
 800483e:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004840:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004842:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004844:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004846:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004848:	f7fc fa92 	bl	8000d70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800484c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8004850:	a907      	add	r1, sp, #28
 8004852:	480e      	ldr	r0, [pc, #56]	; (800488c <HAL_ETH_MspInit+0x12c>)
    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8004854:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004856:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004858:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800485a:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800485c:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800485e:	f7fc fa87 	bl	8000d70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8004862:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004866:	a907      	add	r1, sp, #28
 8004868:	4809      	ldr	r0, [pc, #36]	; (8004890 <HAL_ETH_MspInit+0x130>)
    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800486a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800486c:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800486e:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004870:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004872:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004874:	f7fc fa7c 	bl	8000d70 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8004878:	b00c      	add	sp, #48	; 0x30
 800487a:	bd70      	pop	{r4, r5, r6, pc}
 800487c:	40028000 	.word	0x40028000
 8004880:	58024400 	.word	0x58024400
 8004884:	58020800 	.word	0x58020800
 8004888:	58020000 	.word	0x58020000
 800488c:	58020400 	.word	0x58020400
 8004890:	58021800 	.word	0x58021800

08004894 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 8004894:	6803      	ldr	r3, [r0, #0]
{
 8004896:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM2)
 8004898:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800489c:	d10c      	bne.n	80048b8 <HAL_TIM_Base_MspInit+0x24>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800489e:	4b07      	ldr	r3, [pc, #28]	; (80048bc <HAL_TIM_Base_MspInit+0x28>)
 80048a0:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80048a4:	f042 0201 	orr.w	r2, r2, #1
 80048a8:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 80048ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80048b0:	f003 0301 	and.w	r3, r3, #1
 80048b4:	9301      	str	r3, [sp, #4]
 80048b6:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80048b8:	b002      	add	sp, #8
 80048ba:	4770      	bx	lr
 80048bc:	58024400 	.word	0x58024400

080048c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80048c0:	b510      	push	{r4, lr}
 80048c2:	b088      	sub	sp, #32
 80048c4:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048c6:	2214      	movs	r2, #20
 80048c8:	2100      	movs	r1, #0
 80048ca:	a803      	add	r0, sp, #12
 80048cc:	f000 f926 	bl	8004b1c <memset>
  if(huart->Instance==USART3)
 80048d0:	6822      	ldr	r2, [r4, #0]
 80048d2:	4b14      	ldr	r3, [pc, #80]	; (8004924 <HAL_UART_MspInit+0x64>)
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d123      	bne.n	8004920 <HAL_UART_MspInit+0x60>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80048d8:	4b13      	ldr	r3, [pc, #76]	; (8004928 <HAL_UART_MspInit+0x68>)
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80048da:	a903      	add	r1, sp, #12
 80048dc:	4813      	ldr	r0, [pc, #76]	; (800492c <HAL_UART_MspInit+0x6c>)
    __HAL_RCC_USART3_CLK_ENABLE();
 80048de:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80048e2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80048e6:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 80048ea:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80048ee:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 80048f2:	9201      	str	r2, [sp, #4]
 80048f4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80048f6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80048fa:	f042 0208 	orr.w	r2, r2, #8
 80048fe:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8004902:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004906:	f003 0308 	and.w	r3, r3, #8
 800490a:	9302      	str	r3, [sp, #8]
 800490c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800490e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004912:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004914:	2302      	movs	r3, #2
 8004916:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004918:	2307      	movs	r3, #7
 800491a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800491c:	f7fc fa28 	bl	8000d70 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004920:	b008      	add	sp, #32
 8004922:	bd10      	pop	{r4, pc}
 8004924:	40004800 	.word	0x40004800
 8004928:	58024400 	.word	0x58024400
 800492c:	58020c00 	.word	0x58020c00

08004930 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8004930:	b510      	push	{r4, lr}
 8004932:	b088      	sub	sp, #32
 8004934:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004936:	2214      	movs	r2, #20
 8004938:	2100      	movs	r1, #0
 800493a:	a803      	add	r0, sp, #12
 800493c:	f000 f8ee 	bl	8004b1c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8004940:	6822      	ldr	r2, [r4, #0]
 8004942:	4b19      	ldr	r3, [pc, #100]	; (80049a8 <HAL_PCD_MspInit+0x78>)
 8004944:	429a      	cmp	r2, r3
 8004946:	d12d      	bne.n	80049a4 <HAL_PCD_MspInit+0x74>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004948:	4c18      	ldr	r4, [pc, #96]	; (80049ac <HAL_PCD_MspInit+0x7c>)
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800494a:	a903      	add	r1, sp, #12
 800494c:	4818      	ldr	r0, [pc, #96]	; (80049b0 <HAL_PCD_MspInit+0x80>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800494e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8004952:	f043 0301 	orr.w	r3, r3, #1
 8004956:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800495a:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800495e:	f003 0301 	and.w	r3, r3, #1
 8004962:	9301      	str	r3, [sp, #4]
 8004964:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8004966:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800496a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800496c:	2302      	movs	r3, #2
 800496e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8004970:	230a      	movs	r3, #10
 8004972:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004974:	f7fc f9fc 	bl	8000d70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8004978:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800497c:	a903      	add	r1, sp, #12
 800497e:	480c      	ldr	r0, [pc, #48]	; (80049b0 <HAL_PCD_MspInit+0x80>)
    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8004980:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004982:	2300      	movs	r3, #0
 8004984:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004986:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8004988:	f7fc f9f2 	bl	8000d70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800498c:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 8004990:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004994:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 8004998:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 800499c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049a0:	9302      	str	r3, [sp, #8]
 80049a2:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80049a4:	b008      	add	sp, #32
 80049a6:	bd10      	pop	{r4, pc}
 80049a8:	40080000 	.word	0x40080000
 80049ac:	58024400 	.word	0x58024400
 80049b0:	58020000 	.word	0x58020000

080049b4 <NMI_Handler>:
 80049b4:	4770      	bx	lr

080049b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80049b6:	e7fe      	b.n	80049b6 <HardFault_Handler>

080049b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80049b8:	e7fe      	b.n	80049b8 <MemManage_Handler>

080049ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80049ba:	e7fe      	b.n	80049ba <BusFault_Handler>

080049bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80049bc:	e7fe      	b.n	80049bc <UsageFault_Handler>

080049be <SVC_Handler>:
 80049be:	4770      	bx	lr

080049c0 <DebugMon_Handler>:
 80049c0:	4770      	bx	lr

080049c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80049c2:	4770      	bx	lr

080049c4 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80049c4:	f7fb bec0 	b.w	8000748 <HAL_IncTick>

080049c8 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 80049c8:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80049ca:	4b0a      	ldr	r3, [pc, #40]	; (80049f4 <_sbrk+0x2c>)
{
 80049cc:	4602      	mov	r2, r0
	if (heap_end == 0)
 80049ce:	6819      	ldr	r1, [r3, #0]
 80049d0:	b909      	cbnz	r1, 80049d6 <_sbrk+0xe>
		heap_end = &end;
 80049d2:	4909      	ldr	r1, [pc, #36]	; (80049f8 <_sbrk+0x30>)
 80049d4:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 80049d6:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 80049d8:	4669      	mov	r1, sp
 80049da:	4402      	add	r2, r0
 80049dc:	428a      	cmp	r2, r1
 80049de:	d906      	bls.n	80049ee <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80049e0:	f000 f872 	bl	8004ac8 <__errno>
 80049e4:	230c      	movs	r3, #12
 80049e6:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80049e8:	f04f 30ff 	mov.w	r0, #4294967295
 80049ec:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 80049ee:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 80049f0:	bd08      	pop	{r3, pc}
 80049f2:	bf00      	nop
 80049f4:	20000154 	.word	0x20000154
 80049f8:	200007b8 	.word	0x200007b8

080049fc <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80049fc:	4918      	ldr	r1, [pc, #96]	; (8004a60 <SystemInit+0x64>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80049fe:	4819      	ldr	r0, [pc, #100]	; (8004a64 <SystemInit+0x68>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004a00:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004a04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
{
 8004a08:	b510      	push	{r4, lr}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004a0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= RCC_CR_HSION;
 8004a0e:	4b16      	ldr	r3, [pc, #88]	; (8004a68 <SystemInit+0x6c>)
 8004a10:	681a      	ldr	r2, [r3, #0]
 8004a12:	f042 0201 	orr.w	r2, r2, #1
 8004a16:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8004a18:	2200      	movs	r2, #0
 8004a1a:	611a      	str	r2, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 8004a1c:	681c      	ldr	r4, [r3, #0]
 8004a1e:	4020      	ands	r0, r4
 8004a20:	6018      	str	r0, [r3, #0]

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8004a22:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8004a24:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8004a26:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8004a28:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8004a2a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8004a2c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8004a2e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8004a30:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8004a32:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8004a34:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8004a36:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004a38:	6818      	ldr	r0, [r3, #0]
 8004a3a:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 8004a3e:	6018      	str	r0, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004a40:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8004a42:	4b0a      	ldr	r3, [pc, #40]	; (8004a6c <SystemInit+0x70>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	0c1b      	lsrs	r3, r3, #16
 8004a48:	041b      	lsls	r3, r3, #16
 8004a4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a4e:	d202      	bcs.n	8004a56 <SystemInit+0x5a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8004a50:	2201      	movs	r2, #1
 8004a52:	4b07      	ldr	r3, [pc, #28]	; (8004a70 <SystemInit+0x74>)
 8004a54:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004a56:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004a5a:	608b      	str	r3, [r1, #8]
 8004a5c:	bd10      	pop	{r4, pc}
 8004a5e:	bf00      	nop
 8004a60:	e000ed00 	.word	0xe000ed00
 8004a64:	eaf6ed7f 	.word	0xeaf6ed7f
 8004a68:	58024400 	.word	0x58024400
 8004a6c:	5c001000 	.word	0x5c001000
 8004a70:	51008108 	.word	0x51008108

08004a74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004a74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004aac <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004a78:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004a7a:	e003      	b.n	8004a84 <LoopCopyDataInit>

08004a7c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004a7c:	4b0c      	ldr	r3, [pc, #48]	; (8004ab0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004a7e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004a80:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004a82:	3104      	adds	r1, #4

08004a84 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004a84:	480b      	ldr	r0, [pc, #44]	; (8004ab4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004a86:	4b0c      	ldr	r3, [pc, #48]	; (8004ab8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004a88:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004a8a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004a8c:	d3f6      	bcc.n	8004a7c <CopyDataInit>
  ldr  r2, =_sbss
 8004a8e:	4a0b      	ldr	r2, [pc, #44]	; (8004abc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004a90:	e002      	b.n	8004a98 <LoopFillZerobss>

08004a92 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004a92:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004a94:	f842 3b04 	str.w	r3, [r2], #4

08004a98 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004a98:	4b09      	ldr	r3, [pc, #36]	; (8004ac0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004a9a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004a9c:	d3f9      	bcc.n	8004a92 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004a9e:	f7ff ffad 	bl	80049fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004aa2:	f000 f817 	bl	8004ad4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004aa6:	f7ff fca7 	bl	80043f8 <main>
  bx  lr    
 8004aaa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004aac:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004ab0:	08005438 	.word	0x08005438
  ldr  r0, =_sdata
 8004ab4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004ab8:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8004abc:	20000134 	.word	0x20000134
  ldr  r3, = _ebss
 8004ac0:	200007b8 	.word	0x200007b8

08004ac4 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004ac4:	e7fe      	b.n	8004ac4 <ADC3_IRQHandler>
	...

08004ac8 <__errno>:
 8004ac8:	4b01      	ldr	r3, [pc, #4]	; (8004ad0 <__errno+0x8>)
 8004aca:	6818      	ldr	r0, [r3, #0]
 8004acc:	4770      	bx	lr
 8004ace:	bf00      	nop
 8004ad0:	20000010 	.word	0x20000010

08004ad4 <__libc_init_array>:
 8004ad4:	b570      	push	{r4, r5, r6, lr}
 8004ad6:	4e0d      	ldr	r6, [pc, #52]	; (8004b0c <__libc_init_array+0x38>)
 8004ad8:	4c0d      	ldr	r4, [pc, #52]	; (8004b10 <__libc_init_array+0x3c>)
 8004ada:	1ba4      	subs	r4, r4, r6
 8004adc:	10a4      	asrs	r4, r4, #2
 8004ade:	2500      	movs	r5, #0
 8004ae0:	42a5      	cmp	r5, r4
 8004ae2:	d109      	bne.n	8004af8 <__libc_init_array+0x24>
 8004ae4:	4e0b      	ldr	r6, [pc, #44]	; (8004b14 <__libc_init_array+0x40>)
 8004ae6:	4c0c      	ldr	r4, [pc, #48]	; (8004b18 <__libc_init_array+0x44>)
 8004ae8:	f000 fc3e 	bl	8005368 <_init>
 8004aec:	1ba4      	subs	r4, r4, r6
 8004aee:	10a4      	asrs	r4, r4, #2
 8004af0:	2500      	movs	r5, #0
 8004af2:	42a5      	cmp	r5, r4
 8004af4:	d105      	bne.n	8004b02 <__libc_init_array+0x2e>
 8004af6:	bd70      	pop	{r4, r5, r6, pc}
 8004af8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004afc:	4798      	blx	r3
 8004afe:	3501      	adds	r5, #1
 8004b00:	e7ee      	b.n	8004ae0 <__libc_init_array+0xc>
 8004b02:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004b06:	4798      	blx	r3
 8004b08:	3501      	adds	r5, #1
 8004b0a:	e7f2      	b.n	8004af2 <__libc_init_array+0x1e>
 8004b0c:	08005430 	.word	0x08005430
 8004b10:	08005430 	.word	0x08005430
 8004b14:	08005430 	.word	0x08005430
 8004b18:	08005434 	.word	0x08005434

08004b1c <memset>:
 8004b1c:	4402      	add	r2, r0
 8004b1e:	4603      	mov	r3, r0
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d100      	bne.n	8004b26 <memset+0xa>
 8004b24:	4770      	bx	lr
 8004b26:	f803 1b01 	strb.w	r1, [r3], #1
 8004b2a:	e7f9      	b.n	8004b20 <memset+0x4>

08004b2c <siprintf>:
 8004b2c:	b40e      	push	{r1, r2, r3}
 8004b2e:	b500      	push	{lr}
 8004b30:	b09c      	sub	sp, #112	; 0x70
 8004b32:	f44f 7102 	mov.w	r1, #520	; 0x208
 8004b36:	ab1d      	add	r3, sp, #116	; 0x74
 8004b38:	f8ad 1014 	strh.w	r1, [sp, #20]
 8004b3c:	9002      	str	r0, [sp, #8]
 8004b3e:	9006      	str	r0, [sp, #24]
 8004b40:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004b44:	480a      	ldr	r0, [pc, #40]	; (8004b70 <siprintf+0x44>)
 8004b46:	9104      	str	r1, [sp, #16]
 8004b48:	9107      	str	r1, [sp, #28]
 8004b4a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004b4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b52:	f8ad 1016 	strh.w	r1, [sp, #22]
 8004b56:	6800      	ldr	r0, [r0, #0]
 8004b58:	9301      	str	r3, [sp, #4]
 8004b5a:	a902      	add	r1, sp, #8
 8004b5c:	f000 f866 	bl	8004c2c <_svfiprintf_r>
 8004b60:	9b02      	ldr	r3, [sp, #8]
 8004b62:	2200      	movs	r2, #0
 8004b64:	701a      	strb	r2, [r3, #0]
 8004b66:	b01c      	add	sp, #112	; 0x70
 8004b68:	f85d eb04 	ldr.w	lr, [sp], #4
 8004b6c:	b003      	add	sp, #12
 8004b6e:	4770      	bx	lr
 8004b70:	20000010 	.word	0x20000010

08004b74 <__ssputs_r>:
 8004b74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b78:	688e      	ldr	r6, [r1, #8]
 8004b7a:	429e      	cmp	r6, r3
 8004b7c:	4682      	mov	sl, r0
 8004b7e:	460c      	mov	r4, r1
 8004b80:	4691      	mov	r9, r2
 8004b82:	4698      	mov	r8, r3
 8004b84:	d835      	bhi.n	8004bf2 <__ssputs_r+0x7e>
 8004b86:	898a      	ldrh	r2, [r1, #12]
 8004b88:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004b8c:	d031      	beq.n	8004bf2 <__ssputs_r+0x7e>
 8004b8e:	6825      	ldr	r5, [r4, #0]
 8004b90:	6909      	ldr	r1, [r1, #16]
 8004b92:	1a6f      	subs	r7, r5, r1
 8004b94:	6965      	ldr	r5, [r4, #20]
 8004b96:	2302      	movs	r3, #2
 8004b98:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004b9c:	fb95 f5f3 	sdiv	r5, r5, r3
 8004ba0:	f108 0301 	add.w	r3, r8, #1
 8004ba4:	443b      	add	r3, r7
 8004ba6:	429d      	cmp	r5, r3
 8004ba8:	bf38      	it	cc
 8004baa:	461d      	movcc	r5, r3
 8004bac:	0553      	lsls	r3, r2, #21
 8004bae:	d531      	bpl.n	8004c14 <__ssputs_r+0xa0>
 8004bb0:	4629      	mov	r1, r5
 8004bb2:	f000 fb39 	bl	8005228 <_malloc_r>
 8004bb6:	4606      	mov	r6, r0
 8004bb8:	b950      	cbnz	r0, 8004bd0 <__ssputs_r+0x5c>
 8004bba:	230c      	movs	r3, #12
 8004bbc:	f8ca 3000 	str.w	r3, [sl]
 8004bc0:	89a3      	ldrh	r3, [r4, #12]
 8004bc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004bc6:	81a3      	strh	r3, [r4, #12]
 8004bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8004bcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bd0:	463a      	mov	r2, r7
 8004bd2:	6921      	ldr	r1, [r4, #16]
 8004bd4:	f000 fab4 	bl	8005140 <memcpy>
 8004bd8:	89a3      	ldrh	r3, [r4, #12]
 8004bda:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004bde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004be2:	81a3      	strh	r3, [r4, #12]
 8004be4:	6126      	str	r6, [r4, #16]
 8004be6:	6165      	str	r5, [r4, #20]
 8004be8:	443e      	add	r6, r7
 8004bea:	1bed      	subs	r5, r5, r7
 8004bec:	6026      	str	r6, [r4, #0]
 8004bee:	60a5      	str	r5, [r4, #8]
 8004bf0:	4646      	mov	r6, r8
 8004bf2:	4546      	cmp	r6, r8
 8004bf4:	bf28      	it	cs
 8004bf6:	4646      	movcs	r6, r8
 8004bf8:	4632      	mov	r2, r6
 8004bfa:	4649      	mov	r1, r9
 8004bfc:	6820      	ldr	r0, [r4, #0]
 8004bfe:	f000 faaa 	bl	8005156 <memmove>
 8004c02:	68a3      	ldr	r3, [r4, #8]
 8004c04:	1b9b      	subs	r3, r3, r6
 8004c06:	60a3      	str	r3, [r4, #8]
 8004c08:	6823      	ldr	r3, [r4, #0]
 8004c0a:	441e      	add	r6, r3
 8004c0c:	6026      	str	r6, [r4, #0]
 8004c0e:	2000      	movs	r0, #0
 8004c10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c14:	462a      	mov	r2, r5
 8004c16:	f000 fb65 	bl	80052e4 <_realloc_r>
 8004c1a:	4606      	mov	r6, r0
 8004c1c:	2800      	cmp	r0, #0
 8004c1e:	d1e1      	bne.n	8004be4 <__ssputs_r+0x70>
 8004c20:	6921      	ldr	r1, [r4, #16]
 8004c22:	4650      	mov	r0, sl
 8004c24:	f000 fab2 	bl	800518c <_free_r>
 8004c28:	e7c7      	b.n	8004bba <__ssputs_r+0x46>
	...

08004c2c <_svfiprintf_r>:
 8004c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c30:	b09d      	sub	sp, #116	; 0x74
 8004c32:	4680      	mov	r8, r0
 8004c34:	9303      	str	r3, [sp, #12]
 8004c36:	898b      	ldrh	r3, [r1, #12]
 8004c38:	061c      	lsls	r4, r3, #24
 8004c3a:	460d      	mov	r5, r1
 8004c3c:	4616      	mov	r6, r2
 8004c3e:	d50f      	bpl.n	8004c60 <_svfiprintf_r+0x34>
 8004c40:	690b      	ldr	r3, [r1, #16]
 8004c42:	b96b      	cbnz	r3, 8004c60 <_svfiprintf_r+0x34>
 8004c44:	2140      	movs	r1, #64	; 0x40
 8004c46:	f000 faef 	bl	8005228 <_malloc_r>
 8004c4a:	6028      	str	r0, [r5, #0]
 8004c4c:	6128      	str	r0, [r5, #16]
 8004c4e:	b928      	cbnz	r0, 8004c5c <_svfiprintf_r+0x30>
 8004c50:	230c      	movs	r3, #12
 8004c52:	f8c8 3000 	str.w	r3, [r8]
 8004c56:	f04f 30ff 	mov.w	r0, #4294967295
 8004c5a:	e0c5      	b.n	8004de8 <_svfiprintf_r+0x1bc>
 8004c5c:	2340      	movs	r3, #64	; 0x40
 8004c5e:	616b      	str	r3, [r5, #20]
 8004c60:	2300      	movs	r3, #0
 8004c62:	9309      	str	r3, [sp, #36]	; 0x24
 8004c64:	2320      	movs	r3, #32
 8004c66:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004c6a:	2330      	movs	r3, #48	; 0x30
 8004c6c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004c70:	f04f 0b01 	mov.w	fp, #1
 8004c74:	4637      	mov	r7, r6
 8004c76:	463c      	mov	r4, r7
 8004c78:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d13c      	bne.n	8004cfa <_svfiprintf_r+0xce>
 8004c80:	ebb7 0a06 	subs.w	sl, r7, r6
 8004c84:	d00b      	beq.n	8004c9e <_svfiprintf_r+0x72>
 8004c86:	4653      	mov	r3, sl
 8004c88:	4632      	mov	r2, r6
 8004c8a:	4629      	mov	r1, r5
 8004c8c:	4640      	mov	r0, r8
 8004c8e:	f7ff ff71 	bl	8004b74 <__ssputs_r>
 8004c92:	3001      	adds	r0, #1
 8004c94:	f000 80a3 	beq.w	8004dde <_svfiprintf_r+0x1b2>
 8004c98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c9a:	4453      	add	r3, sl
 8004c9c:	9309      	str	r3, [sp, #36]	; 0x24
 8004c9e:	783b      	ldrb	r3, [r7, #0]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	f000 809c 	beq.w	8004dde <_svfiprintf_r+0x1b2>
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	f04f 32ff 	mov.w	r2, #4294967295
 8004cac:	9304      	str	r3, [sp, #16]
 8004cae:	9307      	str	r3, [sp, #28]
 8004cb0:	9205      	str	r2, [sp, #20]
 8004cb2:	9306      	str	r3, [sp, #24]
 8004cb4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004cb8:	931a      	str	r3, [sp, #104]	; 0x68
 8004cba:	2205      	movs	r2, #5
 8004cbc:	7821      	ldrb	r1, [r4, #0]
 8004cbe:	4850      	ldr	r0, [pc, #320]	; (8004e00 <_svfiprintf_r+0x1d4>)
 8004cc0:	f7fb fb16 	bl	80002f0 <memchr>
 8004cc4:	1c67      	adds	r7, r4, #1
 8004cc6:	9b04      	ldr	r3, [sp, #16]
 8004cc8:	b9d8      	cbnz	r0, 8004d02 <_svfiprintf_r+0xd6>
 8004cca:	06d9      	lsls	r1, r3, #27
 8004ccc:	bf44      	itt	mi
 8004cce:	2220      	movmi	r2, #32
 8004cd0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004cd4:	071a      	lsls	r2, r3, #28
 8004cd6:	bf44      	itt	mi
 8004cd8:	222b      	movmi	r2, #43	; 0x2b
 8004cda:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004cde:	7822      	ldrb	r2, [r4, #0]
 8004ce0:	2a2a      	cmp	r2, #42	; 0x2a
 8004ce2:	d016      	beq.n	8004d12 <_svfiprintf_r+0xe6>
 8004ce4:	9a07      	ldr	r2, [sp, #28]
 8004ce6:	2100      	movs	r1, #0
 8004ce8:	200a      	movs	r0, #10
 8004cea:	4627      	mov	r7, r4
 8004cec:	3401      	adds	r4, #1
 8004cee:	783b      	ldrb	r3, [r7, #0]
 8004cf0:	3b30      	subs	r3, #48	; 0x30
 8004cf2:	2b09      	cmp	r3, #9
 8004cf4:	d951      	bls.n	8004d9a <_svfiprintf_r+0x16e>
 8004cf6:	b1c9      	cbz	r1, 8004d2c <_svfiprintf_r+0x100>
 8004cf8:	e011      	b.n	8004d1e <_svfiprintf_r+0xf2>
 8004cfa:	2b25      	cmp	r3, #37	; 0x25
 8004cfc:	d0c0      	beq.n	8004c80 <_svfiprintf_r+0x54>
 8004cfe:	4627      	mov	r7, r4
 8004d00:	e7b9      	b.n	8004c76 <_svfiprintf_r+0x4a>
 8004d02:	4a3f      	ldr	r2, [pc, #252]	; (8004e00 <_svfiprintf_r+0x1d4>)
 8004d04:	1a80      	subs	r0, r0, r2
 8004d06:	fa0b f000 	lsl.w	r0, fp, r0
 8004d0a:	4318      	orrs	r0, r3
 8004d0c:	9004      	str	r0, [sp, #16]
 8004d0e:	463c      	mov	r4, r7
 8004d10:	e7d3      	b.n	8004cba <_svfiprintf_r+0x8e>
 8004d12:	9a03      	ldr	r2, [sp, #12]
 8004d14:	1d11      	adds	r1, r2, #4
 8004d16:	6812      	ldr	r2, [r2, #0]
 8004d18:	9103      	str	r1, [sp, #12]
 8004d1a:	2a00      	cmp	r2, #0
 8004d1c:	db01      	blt.n	8004d22 <_svfiprintf_r+0xf6>
 8004d1e:	9207      	str	r2, [sp, #28]
 8004d20:	e004      	b.n	8004d2c <_svfiprintf_r+0x100>
 8004d22:	4252      	negs	r2, r2
 8004d24:	f043 0302 	orr.w	r3, r3, #2
 8004d28:	9207      	str	r2, [sp, #28]
 8004d2a:	9304      	str	r3, [sp, #16]
 8004d2c:	783b      	ldrb	r3, [r7, #0]
 8004d2e:	2b2e      	cmp	r3, #46	; 0x2e
 8004d30:	d10e      	bne.n	8004d50 <_svfiprintf_r+0x124>
 8004d32:	787b      	ldrb	r3, [r7, #1]
 8004d34:	2b2a      	cmp	r3, #42	; 0x2a
 8004d36:	f107 0101 	add.w	r1, r7, #1
 8004d3a:	d132      	bne.n	8004da2 <_svfiprintf_r+0x176>
 8004d3c:	9b03      	ldr	r3, [sp, #12]
 8004d3e:	1d1a      	adds	r2, r3, #4
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	9203      	str	r2, [sp, #12]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	bfb8      	it	lt
 8004d48:	f04f 33ff 	movlt.w	r3, #4294967295
 8004d4c:	3702      	adds	r7, #2
 8004d4e:	9305      	str	r3, [sp, #20]
 8004d50:	4c2c      	ldr	r4, [pc, #176]	; (8004e04 <_svfiprintf_r+0x1d8>)
 8004d52:	7839      	ldrb	r1, [r7, #0]
 8004d54:	2203      	movs	r2, #3
 8004d56:	4620      	mov	r0, r4
 8004d58:	f7fb faca 	bl	80002f0 <memchr>
 8004d5c:	b138      	cbz	r0, 8004d6e <_svfiprintf_r+0x142>
 8004d5e:	2340      	movs	r3, #64	; 0x40
 8004d60:	1b00      	subs	r0, r0, r4
 8004d62:	fa03 f000 	lsl.w	r0, r3, r0
 8004d66:	9b04      	ldr	r3, [sp, #16]
 8004d68:	4303      	orrs	r3, r0
 8004d6a:	9304      	str	r3, [sp, #16]
 8004d6c:	3701      	adds	r7, #1
 8004d6e:	7839      	ldrb	r1, [r7, #0]
 8004d70:	4825      	ldr	r0, [pc, #148]	; (8004e08 <_svfiprintf_r+0x1dc>)
 8004d72:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004d76:	2206      	movs	r2, #6
 8004d78:	1c7e      	adds	r6, r7, #1
 8004d7a:	f7fb fab9 	bl	80002f0 <memchr>
 8004d7e:	2800      	cmp	r0, #0
 8004d80:	d035      	beq.n	8004dee <_svfiprintf_r+0x1c2>
 8004d82:	4b22      	ldr	r3, [pc, #136]	; (8004e0c <_svfiprintf_r+0x1e0>)
 8004d84:	b9fb      	cbnz	r3, 8004dc6 <_svfiprintf_r+0x19a>
 8004d86:	9b03      	ldr	r3, [sp, #12]
 8004d88:	3307      	adds	r3, #7
 8004d8a:	f023 0307 	bic.w	r3, r3, #7
 8004d8e:	3308      	adds	r3, #8
 8004d90:	9303      	str	r3, [sp, #12]
 8004d92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d94:	444b      	add	r3, r9
 8004d96:	9309      	str	r3, [sp, #36]	; 0x24
 8004d98:	e76c      	b.n	8004c74 <_svfiprintf_r+0x48>
 8004d9a:	fb00 3202 	mla	r2, r0, r2, r3
 8004d9e:	2101      	movs	r1, #1
 8004da0:	e7a3      	b.n	8004cea <_svfiprintf_r+0xbe>
 8004da2:	2300      	movs	r3, #0
 8004da4:	9305      	str	r3, [sp, #20]
 8004da6:	4618      	mov	r0, r3
 8004da8:	240a      	movs	r4, #10
 8004daa:	460f      	mov	r7, r1
 8004dac:	3101      	adds	r1, #1
 8004dae:	783a      	ldrb	r2, [r7, #0]
 8004db0:	3a30      	subs	r2, #48	; 0x30
 8004db2:	2a09      	cmp	r2, #9
 8004db4:	d903      	bls.n	8004dbe <_svfiprintf_r+0x192>
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d0ca      	beq.n	8004d50 <_svfiprintf_r+0x124>
 8004dba:	9005      	str	r0, [sp, #20]
 8004dbc:	e7c8      	b.n	8004d50 <_svfiprintf_r+0x124>
 8004dbe:	fb04 2000 	mla	r0, r4, r0, r2
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e7f1      	b.n	8004daa <_svfiprintf_r+0x17e>
 8004dc6:	ab03      	add	r3, sp, #12
 8004dc8:	9300      	str	r3, [sp, #0]
 8004dca:	462a      	mov	r2, r5
 8004dcc:	4b10      	ldr	r3, [pc, #64]	; (8004e10 <_svfiprintf_r+0x1e4>)
 8004dce:	a904      	add	r1, sp, #16
 8004dd0:	4640      	mov	r0, r8
 8004dd2:	f3af 8000 	nop.w
 8004dd6:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004dda:	4681      	mov	r9, r0
 8004ddc:	d1d9      	bne.n	8004d92 <_svfiprintf_r+0x166>
 8004dde:	89ab      	ldrh	r3, [r5, #12]
 8004de0:	065b      	lsls	r3, r3, #25
 8004de2:	f53f af38 	bmi.w	8004c56 <_svfiprintf_r+0x2a>
 8004de6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004de8:	b01d      	add	sp, #116	; 0x74
 8004dea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dee:	ab03      	add	r3, sp, #12
 8004df0:	9300      	str	r3, [sp, #0]
 8004df2:	462a      	mov	r2, r5
 8004df4:	4b06      	ldr	r3, [pc, #24]	; (8004e10 <_svfiprintf_r+0x1e4>)
 8004df6:	a904      	add	r1, sp, #16
 8004df8:	4640      	mov	r0, r8
 8004dfa:	f000 f881 	bl	8004f00 <_printf_i>
 8004dfe:	e7ea      	b.n	8004dd6 <_svfiprintf_r+0x1aa>
 8004e00:	080053f4 	.word	0x080053f4
 8004e04:	080053fa 	.word	0x080053fa
 8004e08:	080053fe 	.word	0x080053fe
 8004e0c:	00000000 	.word	0x00000000
 8004e10:	08004b75 	.word	0x08004b75

08004e14 <_printf_common>:
 8004e14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e18:	4691      	mov	r9, r2
 8004e1a:	461f      	mov	r7, r3
 8004e1c:	688a      	ldr	r2, [r1, #8]
 8004e1e:	690b      	ldr	r3, [r1, #16]
 8004e20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004e24:	4293      	cmp	r3, r2
 8004e26:	bfb8      	it	lt
 8004e28:	4613      	movlt	r3, r2
 8004e2a:	f8c9 3000 	str.w	r3, [r9]
 8004e2e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004e32:	4606      	mov	r6, r0
 8004e34:	460c      	mov	r4, r1
 8004e36:	b112      	cbz	r2, 8004e3e <_printf_common+0x2a>
 8004e38:	3301      	adds	r3, #1
 8004e3a:	f8c9 3000 	str.w	r3, [r9]
 8004e3e:	6823      	ldr	r3, [r4, #0]
 8004e40:	0699      	lsls	r1, r3, #26
 8004e42:	bf42      	ittt	mi
 8004e44:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004e48:	3302      	addmi	r3, #2
 8004e4a:	f8c9 3000 	strmi.w	r3, [r9]
 8004e4e:	6825      	ldr	r5, [r4, #0]
 8004e50:	f015 0506 	ands.w	r5, r5, #6
 8004e54:	d107      	bne.n	8004e66 <_printf_common+0x52>
 8004e56:	f104 0a19 	add.w	sl, r4, #25
 8004e5a:	68e3      	ldr	r3, [r4, #12]
 8004e5c:	f8d9 2000 	ldr.w	r2, [r9]
 8004e60:	1a9b      	subs	r3, r3, r2
 8004e62:	429d      	cmp	r5, r3
 8004e64:	db29      	blt.n	8004eba <_printf_common+0xa6>
 8004e66:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004e6a:	6822      	ldr	r2, [r4, #0]
 8004e6c:	3300      	adds	r3, #0
 8004e6e:	bf18      	it	ne
 8004e70:	2301      	movne	r3, #1
 8004e72:	0692      	lsls	r2, r2, #26
 8004e74:	d42e      	bmi.n	8004ed4 <_printf_common+0xc0>
 8004e76:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004e7a:	4639      	mov	r1, r7
 8004e7c:	4630      	mov	r0, r6
 8004e7e:	47c0      	blx	r8
 8004e80:	3001      	adds	r0, #1
 8004e82:	d021      	beq.n	8004ec8 <_printf_common+0xb4>
 8004e84:	6823      	ldr	r3, [r4, #0]
 8004e86:	68e5      	ldr	r5, [r4, #12]
 8004e88:	f8d9 2000 	ldr.w	r2, [r9]
 8004e8c:	f003 0306 	and.w	r3, r3, #6
 8004e90:	2b04      	cmp	r3, #4
 8004e92:	bf08      	it	eq
 8004e94:	1aad      	subeq	r5, r5, r2
 8004e96:	68a3      	ldr	r3, [r4, #8]
 8004e98:	6922      	ldr	r2, [r4, #16]
 8004e9a:	bf0c      	ite	eq
 8004e9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ea0:	2500      	movne	r5, #0
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	bfc4      	itt	gt
 8004ea6:	1a9b      	subgt	r3, r3, r2
 8004ea8:	18ed      	addgt	r5, r5, r3
 8004eaa:	f04f 0900 	mov.w	r9, #0
 8004eae:	341a      	adds	r4, #26
 8004eb0:	454d      	cmp	r5, r9
 8004eb2:	d11b      	bne.n	8004eec <_printf_common+0xd8>
 8004eb4:	2000      	movs	r0, #0
 8004eb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004eba:	2301      	movs	r3, #1
 8004ebc:	4652      	mov	r2, sl
 8004ebe:	4639      	mov	r1, r7
 8004ec0:	4630      	mov	r0, r6
 8004ec2:	47c0      	blx	r8
 8004ec4:	3001      	adds	r0, #1
 8004ec6:	d103      	bne.n	8004ed0 <_printf_common+0xbc>
 8004ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8004ecc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ed0:	3501      	adds	r5, #1
 8004ed2:	e7c2      	b.n	8004e5a <_printf_common+0x46>
 8004ed4:	18e1      	adds	r1, r4, r3
 8004ed6:	1c5a      	adds	r2, r3, #1
 8004ed8:	2030      	movs	r0, #48	; 0x30
 8004eda:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004ede:	4422      	add	r2, r4
 8004ee0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004ee4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004ee8:	3302      	adds	r3, #2
 8004eea:	e7c4      	b.n	8004e76 <_printf_common+0x62>
 8004eec:	2301      	movs	r3, #1
 8004eee:	4622      	mov	r2, r4
 8004ef0:	4639      	mov	r1, r7
 8004ef2:	4630      	mov	r0, r6
 8004ef4:	47c0      	blx	r8
 8004ef6:	3001      	adds	r0, #1
 8004ef8:	d0e6      	beq.n	8004ec8 <_printf_common+0xb4>
 8004efa:	f109 0901 	add.w	r9, r9, #1
 8004efe:	e7d7      	b.n	8004eb0 <_printf_common+0x9c>

08004f00 <_printf_i>:
 8004f00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004f04:	4617      	mov	r7, r2
 8004f06:	7e0a      	ldrb	r2, [r1, #24]
 8004f08:	b085      	sub	sp, #20
 8004f0a:	2a6e      	cmp	r2, #110	; 0x6e
 8004f0c:	4698      	mov	r8, r3
 8004f0e:	4606      	mov	r6, r0
 8004f10:	460c      	mov	r4, r1
 8004f12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004f14:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8004f18:	f000 80bc 	beq.w	8005094 <_printf_i+0x194>
 8004f1c:	d81a      	bhi.n	8004f54 <_printf_i+0x54>
 8004f1e:	2a63      	cmp	r2, #99	; 0x63
 8004f20:	d02e      	beq.n	8004f80 <_printf_i+0x80>
 8004f22:	d80a      	bhi.n	8004f3a <_printf_i+0x3a>
 8004f24:	2a00      	cmp	r2, #0
 8004f26:	f000 80c8 	beq.w	80050ba <_printf_i+0x1ba>
 8004f2a:	2a58      	cmp	r2, #88	; 0x58
 8004f2c:	f000 808a 	beq.w	8005044 <_printf_i+0x144>
 8004f30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f34:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8004f38:	e02a      	b.n	8004f90 <_printf_i+0x90>
 8004f3a:	2a64      	cmp	r2, #100	; 0x64
 8004f3c:	d001      	beq.n	8004f42 <_printf_i+0x42>
 8004f3e:	2a69      	cmp	r2, #105	; 0x69
 8004f40:	d1f6      	bne.n	8004f30 <_printf_i+0x30>
 8004f42:	6821      	ldr	r1, [r4, #0]
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	f011 0f80 	tst.w	r1, #128	; 0x80
 8004f4a:	d023      	beq.n	8004f94 <_printf_i+0x94>
 8004f4c:	1d11      	adds	r1, r2, #4
 8004f4e:	6019      	str	r1, [r3, #0]
 8004f50:	6813      	ldr	r3, [r2, #0]
 8004f52:	e027      	b.n	8004fa4 <_printf_i+0xa4>
 8004f54:	2a73      	cmp	r2, #115	; 0x73
 8004f56:	f000 80b4 	beq.w	80050c2 <_printf_i+0x1c2>
 8004f5a:	d808      	bhi.n	8004f6e <_printf_i+0x6e>
 8004f5c:	2a6f      	cmp	r2, #111	; 0x6f
 8004f5e:	d02a      	beq.n	8004fb6 <_printf_i+0xb6>
 8004f60:	2a70      	cmp	r2, #112	; 0x70
 8004f62:	d1e5      	bne.n	8004f30 <_printf_i+0x30>
 8004f64:	680a      	ldr	r2, [r1, #0]
 8004f66:	f042 0220 	orr.w	r2, r2, #32
 8004f6a:	600a      	str	r2, [r1, #0]
 8004f6c:	e003      	b.n	8004f76 <_printf_i+0x76>
 8004f6e:	2a75      	cmp	r2, #117	; 0x75
 8004f70:	d021      	beq.n	8004fb6 <_printf_i+0xb6>
 8004f72:	2a78      	cmp	r2, #120	; 0x78
 8004f74:	d1dc      	bne.n	8004f30 <_printf_i+0x30>
 8004f76:	2278      	movs	r2, #120	; 0x78
 8004f78:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8004f7c:	496e      	ldr	r1, [pc, #440]	; (8005138 <_printf_i+0x238>)
 8004f7e:	e064      	b.n	800504a <_printf_i+0x14a>
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8004f86:	1d11      	adds	r1, r2, #4
 8004f88:	6019      	str	r1, [r3, #0]
 8004f8a:	6813      	ldr	r3, [r2, #0]
 8004f8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004f90:	2301      	movs	r3, #1
 8004f92:	e0a3      	b.n	80050dc <_printf_i+0x1dc>
 8004f94:	f011 0f40 	tst.w	r1, #64	; 0x40
 8004f98:	f102 0104 	add.w	r1, r2, #4
 8004f9c:	6019      	str	r1, [r3, #0]
 8004f9e:	d0d7      	beq.n	8004f50 <_printf_i+0x50>
 8004fa0:	f9b2 3000 	ldrsh.w	r3, [r2]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	da03      	bge.n	8004fb0 <_printf_i+0xb0>
 8004fa8:	222d      	movs	r2, #45	; 0x2d
 8004faa:	425b      	negs	r3, r3
 8004fac:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004fb0:	4962      	ldr	r1, [pc, #392]	; (800513c <_printf_i+0x23c>)
 8004fb2:	220a      	movs	r2, #10
 8004fb4:	e017      	b.n	8004fe6 <_printf_i+0xe6>
 8004fb6:	6820      	ldr	r0, [r4, #0]
 8004fb8:	6819      	ldr	r1, [r3, #0]
 8004fba:	f010 0f80 	tst.w	r0, #128	; 0x80
 8004fbe:	d003      	beq.n	8004fc8 <_printf_i+0xc8>
 8004fc0:	1d08      	adds	r0, r1, #4
 8004fc2:	6018      	str	r0, [r3, #0]
 8004fc4:	680b      	ldr	r3, [r1, #0]
 8004fc6:	e006      	b.n	8004fd6 <_printf_i+0xd6>
 8004fc8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004fcc:	f101 0004 	add.w	r0, r1, #4
 8004fd0:	6018      	str	r0, [r3, #0]
 8004fd2:	d0f7      	beq.n	8004fc4 <_printf_i+0xc4>
 8004fd4:	880b      	ldrh	r3, [r1, #0]
 8004fd6:	4959      	ldr	r1, [pc, #356]	; (800513c <_printf_i+0x23c>)
 8004fd8:	2a6f      	cmp	r2, #111	; 0x6f
 8004fda:	bf14      	ite	ne
 8004fdc:	220a      	movne	r2, #10
 8004fde:	2208      	moveq	r2, #8
 8004fe0:	2000      	movs	r0, #0
 8004fe2:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8004fe6:	6865      	ldr	r5, [r4, #4]
 8004fe8:	60a5      	str	r5, [r4, #8]
 8004fea:	2d00      	cmp	r5, #0
 8004fec:	f2c0 809c 	blt.w	8005128 <_printf_i+0x228>
 8004ff0:	6820      	ldr	r0, [r4, #0]
 8004ff2:	f020 0004 	bic.w	r0, r0, #4
 8004ff6:	6020      	str	r0, [r4, #0]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d13f      	bne.n	800507c <_printf_i+0x17c>
 8004ffc:	2d00      	cmp	r5, #0
 8004ffe:	f040 8095 	bne.w	800512c <_printf_i+0x22c>
 8005002:	4675      	mov	r5, lr
 8005004:	2a08      	cmp	r2, #8
 8005006:	d10b      	bne.n	8005020 <_printf_i+0x120>
 8005008:	6823      	ldr	r3, [r4, #0]
 800500a:	07da      	lsls	r2, r3, #31
 800500c:	d508      	bpl.n	8005020 <_printf_i+0x120>
 800500e:	6923      	ldr	r3, [r4, #16]
 8005010:	6862      	ldr	r2, [r4, #4]
 8005012:	429a      	cmp	r2, r3
 8005014:	bfde      	ittt	le
 8005016:	2330      	movle	r3, #48	; 0x30
 8005018:	f805 3c01 	strble.w	r3, [r5, #-1]
 800501c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005020:	ebae 0305 	sub.w	r3, lr, r5
 8005024:	6123      	str	r3, [r4, #16]
 8005026:	f8cd 8000 	str.w	r8, [sp]
 800502a:	463b      	mov	r3, r7
 800502c:	aa03      	add	r2, sp, #12
 800502e:	4621      	mov	r1, r4
 8005030:	4630      	mov	r0, r6
 8005032:	f7ff feef 	bl	8004e14 <_printf_common>
 8005036:	3001      	adds	r0, #1
 8005038:	d155      	bne.n	80050e6 <_printf_i+0x1e6>
 800503a:	f04f 30ff 	mov.w	r0, #4294967295
 800503e:	b005      	add	sp, #20
 8005040:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005044:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8005048:	493c      	ldr	r1, [pc, #240]	; (800513c <_printf_i+0x23c>)
 800504a:	6822      	ldr	r2, [r4, #0]
 800504c:	6818      	ldr	r0, [r3, #0]
 800504e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005052:	f100 0504 	add.w	r5, r0, #4
 8005056:	601d      	str	r5, [r3, #0]
 8005058:	d001      	beq.n	800505e <_printf_i+0x15e>
 800505a:	6803      	ldr	r3, [r0, #0]
 800505c:	e002      	b.n	8005064 <_printf_i+0x164>
 800505e:	0655      	lsls	r5, r2, #25
 8005060:	d5fb      	bpl.n	800505a <_printf_i+0x15a>
 8005062:	8803      	ldrh	r3, [r0, #0]
 8005064:	07d0      	lsls	r0, r2, #31
 8005066:	bf44      	itt	mi
 8005068:	f042 0220 	orrmi.w	r2, r2, #32
 800506c:	6022      	strmi	r2, [r4, #0]
 800506e:	b91b      	cbnz	r3, 8005078 <_printf_i+0x178>
 8005070:	6822      	ldr	r2, [r4, #0]
 8005072:	f022 0220 	bic.w	r2, r2, #32
 8005076:	6022      	str	r2, [r4, #0]
 8005078:	2210      	movs	r2, #16
 800507a:	e7b1      	b.n	8004fe0 <_printf_i+0xe0>
 800507c:	4675      	mov	r5, lr
 800507e:	fbb3 f0f2 	udiv	r0, r3, r2
 8005082:	fb02 3310 	mls	r3, r2, r0, r3
 8005086:	5ccb      	ldrb	r3, [r1, r3]
 8005088:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800508c:	4603      	mov	r3, r0
 800508e:	2800      	cmp	r0, #0
 8005090:	d1f5      	bne.n	800507e <_printf_i+0x17e>
 8005092:	e7b7      	b.n	8005004 <_printf_i+0x104>
 8005094:	6808      	ldr	r0, [r1, #0]
 8005096:	681a      	ldr	r2, [r3, #0]
 8005098:	6949      	ldr	r1, [r1, #20]
 800509a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800509e:	d004      	beq.n	80050aa <_printf_i+0x1aa>
 80050a0:	1d10      	adds	r0, r2, #4
 80050a2:	6018      	str	r0, [r3, #0]
 80050a4:	6813      	ldr	r3, [r2, #0]
 80050a6:	6019      	str	r1, [r3, #0]
 80050a8:	e007      	b.n	80050ba <_printf_i+0x1ba>
 80050aa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80050ae:	f102 0004 	add.w	r0, r2, #4
 80050b2:	6018      	str	r0, [r3, #0]
 80050b4:	6813      	ldr	r3, [r2, #0]
 80050b6:	d0f6      	beq.n	80050a6 <_printf_i+0x1a6>
 80050b8:	8019      	strh	r1, [r3, #0]
 80050ba:	2300      	movs	r3, #0
 80050bc:	6123      	str	r3, [r4, #16]
 80050be:	4675      	mov	r5, lr
 80050c0:	e7b1      	b.n	8005026 <_printf_i+0x126>
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	1d11      	adds	r1, r2, #4
 80050c6:	6019      	str	r1, [r3, #0]
 80050c8:	6815      	ldr	r5, [r2, #0]
 80050ca:	6862      	ldr	r2, [r4, #4]
 80050cc:	2100      	movs	r1, #0
 80050ce:	4628      	mov	r0, r5
 80050d0:	f7fb f90e 	bl	80002f0 <memchr>
 80050d4:	b108      	cbz	r0, 80050da <_printf_i+0x1da>
 80050d6:	1b40      	subs	r0, r0, r5
 80050d8:	6060      	str	r0, [r4, #4]
 80050da:	6863      	ldr	r3, [r4, #4]
 80050dc:	6123      	str	r3, [r4, #16]
 80050de:	2300      	movs	r3, #0
 80050e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050e4:	e79f      	b.n	8005026 <_printf_i+0x126>
 80050e6:	6923      	ldr	r3, [r4, #16]
 80050e8:	462a      	mov	r2, r5
 80050ea:	4639      	mov	r1, r7
 80050ec:	4630      	mov	r0, r6
 80050ee:	47c0      	blx	r8
 80050f0:	3001      	adds	r0, #1
 80050f2:	d0a2      	beq.n	800503a <_printf_i+0x13a>
 80050f4:	6823      	ldr	r3, [r4, #0]
 80050f6:	079b      	lsls	r3, r3, #30
 80050f8:	d507      	bpl.n	800510a <_printf_i+0x20a>
 80050fa:	2500      	movs	r5, #0
 80050fc:	f104 0919 	add.w	r9, r4, #25
 8005100:	68e3      	ldr	r3, [r4, #12]
 8005102:	9a03      	ldr	r2, [sp, #12]
 8005104:	1a9b      	subs	r3, r3, r2
 8005106:	429d      	cmp	r5, r3
 8005108:	db05      	blt.n	8005116 <_printf_i+0x216>
 800510a:	68e0      	ldr	r0, [r4, #12]
 800510c:	9b03      	ldr	r3, [sp, #12]
 800510e:	4298      	cmp	r0, r3
 8005110:	bfb8      	it	lt
 8005112:	4618      	movlt	r0, r3
 8005114:	e793      	b.n	800503e <_printf_i+0x13e>
 8005116:	2301      	movs	r3, #1
 8005118:	464a      	mov	r2, r9
 800511a:	4639      	mov	r1, r7
 800511c:	4630      	mov	r0, r6
 800511e:	47c0      	blx	r8
 8005120:	3001      	adds	r0, #1
 8005122:	d08a      	beq.n	800503a <_printf_i+0x13a>
 8005124:	3501      	adds	r5, #1
 8005126:	e7eb      	b.n	8005100 <_printf_i+0x200>
 8005128:	2b00      	cmp	r3, #0
 800512a:	d1a7      	bne.n	800507c <_printf_i+0x17c>
 800512c:	780b      	ldrb	r3, [r1, #0]
 800512e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005132:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005136:	e765      	b.n	8005004 <_printf_i+0x104>
 8005138:	08005416 	.word	0x08005416
 800513c:	08005405 	.word	0x08005405

08005140 <memcpy>:
 8005140:	b510      	push	{r4, lr}
 8005142:	1e43      	subs	r3, r0, #1
 8005144:	440a      	add	r2, r1
 8005146:	4291      	cmp	r1, r2
 8005148:	d100      	bne.n	800514c <memcpy+0xc>
 800514a:	bd10      	pop	{r4, pc}
 800514c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005150:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005154:	e7f7      	b.n	8005146 <memcpy+0x6>

08005156 <memmove>:
 8005156:	4288      	cmp	r0, r1
 8005158:	b510      	push	{r4, lr}
 800515a:	eb01 0302 	add.w	r3, r1, r2
 800515e:	d803      	bhi.n	8005168 <memmove+0x12>
 8005160:	1e42      	subs	r2, r0, #1
 8005162:	4299      	cmp	r1, r3
 8005164:	d10c      	bne.n	8005180 <memmove+0x2a>
 8005166:	bd10      	pop	{r4, pc}
 8005168:	4298      	cmp	r0, r3
 800516a:	d2f9      	bcs.n	8005160 <memmove+0xa>
 800516c:	1881      	adds	r1, r0, r2
 800516e:	1ad2      	subs	r2, r2, r3
 8005170:	42d3      	cmn	r3, r2
 8005172:	d100      	bne.n	8005176 <memmove+0x20>
 8005174:	bd10      	pop	{r4, pc}
 8005176:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800517a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800517e:	e7f7      	b.n	8005170 <memmove+0x1a>
 8005180:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005184:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005188:	e7eb      	b.n	8005162 <memmove+0xc>
	...

0800518c <_free_r>:
 800518c:	b538      	push	{r3, r4, r5, lr}
 800518e:	4605      	mov	r5, r0
 8005190:	2900      	cmp	r1, #0
 8005192:	d045      	beq.n	8005220 <_free_r+0x94>
 8005194:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005198:	1f0c      	subs	r4, r1, #4
 800519a:	2b00      	cmp	r3, #0
 800519c:	bfb8      	it	lt
 800519e:	18e4      	addlt	r4, r4, r3
 80051a0:	f000 f8d6 	bl	8005350 <__malloc_lock>
 80051a4:	4a1f      	ldr	r2, [pc, #124]	; (8005224 <_free_r+0x98>)
 80051a6:	6813      	ldr	r3, [r2, #0]
 80051a8:	4610      	mov	r0, r2
 80051aa:	b933      	cbnz	r3, 80051ba <_free_r+0x2e>
 80051ac:	6063      	str	r3, [r4, #4]
 80051ae:	6014      	str	r4, [r2, #0]
 80051b0:	4628      	mov	r0, r5
 80051b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80051b6:	f000 b8cc 	b.w	8005352 <__malloc_unlock>
 80051ba:	42a3      	cmp	r3, r4
 80051bc:	d90c      	bls.n	80051d8 <_free_r+0x4c>
 80051be:	6821      	ldr	r1, [r4, #0]
 80051c0:	1862      	adds	r2, r4, r1
 80051c2:	4293      	cmp	r3, r2
 80051c4:	bf04      	itt	eq
 80051c6:	681a      	ldreq	r2, [r3, #0]
 80051c8:	685b      	ldreq	r3, [r3, #4]
 80051ca:	6063      	str	r3, [r4, #4]
 80051cc:	bf04      	itt	eq
 80051ce:	1852      	addeq	r2, r2, r1
 80051d0:	6022      	streq	r2, [r4, #0]
 80051d2:	6004      	str	r4, [r0, #0]
 80051d4:	e7ec      	b.n	80051b0 <_free_r+0x24>
 80051d6:	4613      	mov	r3, r2
 80051d8:	685a      	ldr	r2, [r3, #4]
 80051da:	b10a      	cbz	r2, 80051e0 <_free_r+0x54>
 80051dc:	42a2      	cmp	r2, r4
 80051de:	d9fa      	bls.n	80051d6 <_free_r+0x4a>
 80051e0:	6819      	ldr	r1, [r3, #0]
 80051e2:	1858      	adds	r0, r3, r1
 80051e4:	42a0      	cmp	r0, r4
 80051e6:	d10b      	bne.n	8005200 <_free_r+0x74>
 80051e8:	6820      	ldr	r0, [r4, #0]
 80051ea:	4401      	add	r1, r0
 80051ec:	1858      	adds	r0, r3, r1
 80051ee:	4282      	cmp	r2, r0
 80051f0:	6019      	str	r1, [r3, #0]
 80051f2:	d1dd      	bne.n	80051b0 <_free_r+0x24>
 80051f4:	6810      	ldr	r0, [r2, #0]
 80051f6:	6852      	ldr	r2, [r2, #4]
 80051f8:	605a      	str	r2, [r3, #4]
 80051fa:	4401      	add	r1, r0
 80051fc:	6019      	str	r1, [r3, #0]
 80051fe:	e7d7      	b.n	80051b0 <_free_r+0x24>
 8005200:	d902      	bls.n	8005208 <_free_r+0x7c>
 8005202:	230c      	movs	r3, #12
 8005204:	602b      	str	r3, [r5, #0]
 8005206:	e7d3      	b.n	80051b0 <_free_r+0x24>
 8005208:	6820      	ldr	r0, [r4, #0]
 800520a:	1821      	adds	r1, r4, r0
 800520c:	428a      	cmp	r2, r1
 800520e:	bf04      	itt	eq
 8005210:	6811      	ldreq	r1, [r2, #0]
 8005212:	6852      	ldreq	r2, [r2, #4]
 8005214:	6062      	str	r2, [r4, #4]
 8005216:	bf04      	itt	eq
 8005218:	1809      	addeq	r1, r1, r0
 800521a:	6021      	streq	r1, [r4, #0]
 800521c:	605c      	str	r4, [r3, #4]
 800521e:	e7c7      	b.n	80051b0 <_free_r+0x24>
 8005220:	bd38      	pop	{r3, r4, r5, pc}
 8005222:	bf00      	nop
 8005224:	20000158 	.word	0x20000158

08005228 <_malloc_r>:
 8005228:	b570      	push	{r4, r5, r6, lr}
 800522a:	1ccd      	adds	r5, r1, #3
 800522c:	f025 0503 	bic.w	r5, r5, #3
 8005230:	3508      	adds	r5, #8
 8005232:	2d0c      	cmp	r5, #12
 8005234:	bf38      	it	cc
 8005236:	250c      	movcc	r5, #12
 8005238:	2d00      	cmp	r5, #0
 800523a:	4606      	mov	r6, r0
 800523c:	db01      	blt.n	8005242 <_malloc_r+0x1a>
 800523e:	42a9      	cmp	r1, r5
 8005240:	d903      	bls.n	800524a <_malloc_r+0x22>
 8005242:	230c      	movs	r3, #12
 8005244:	6033      	str	r3, [r6, #0]
 8005246:	2000      	movs	r0, #0
 8005248:	bd70      	pop	{r4, r5, r6, pc}
 800524a:	f000 f881 	bl	8005350 <__malloc_lock>
 800524e:	4a23      	ldr	r2, [pc, #140]	; (80052dc <_malloc_r+0xb4>)
 8005250:	6814      	ldr	r4, [r2, #0]
 8005252:	4621      	mov	r1, r4
 8005254:	b991      	cbnz	r1, 800527c <_malloc_r+0x54>
 8005256:	4c22      	ldr	r4, [pc, #136]	; (80052e0 <_malloc_r+0xb8>)
 8005258:	6823      	ldr	r3, [r4, #0]
 800525a:	b91b      	cbnz	r3, 8005264 <_malloc_r+0x3c>
 800525c:	4630      	mov	r0, r6
 800525e:	f000 f867 	bl	8005330 <_sbrk_r>
 8005262:	6020      	str	r0, [r4, #0]
 8005264:	4629      	mov	r1, r5
 8005266:	4630      	mov	r0, r6
 8005268:	f000 f862 	bl	8005330 <_sbrk_r>
 800526c:	1c43      	adds	r3, r0, #1
 800526e:	d126      	bne.n	80052be <_malloc_r+0x96>
 8005270:	230c      	movs	r3, #12
 8005272:	6033      	str	r3, [r6, #0]
 8005274:	4630      	mov	r0, r6
 8005276:	f000 f86c 	bl	8005352 <__malloc_unlock>
 800527a:	e7e4      	b.n	8005246 <_malloc_r+0x1e>
 800527c:	680b      	ldr	r3, [r1, #0]
 800527e:	1b5b      	subs	r3, r3, r5
 8005280:	d41a      	bmi.n	80052b8 <_malloc_r+0x90>
 8005282:	2b0b      	cmp	r3, #11
 8005284:	d90f      	bls.n	80052a6 <_malloc_r+0x7e>
 8005286:	600b      	str	r3, [r1, #0]
 8005288:	50cd      	str	r5, [r1, r3]
 800528a:	18cc      	adds	r4, r1, r3
 800528c:	4630      	mov	r0, r6
 800528e:	f000 f860 	bl	8005352 <__malloc_unlock>
 8005292:	f104 000b 	add.w	r0, r4, #11
 8005296:	1d23      	adds	r3, r4, #4
 8005298:	f020 0007 	bic.w	r0, r0, #7
 800529c:	1ac3      	subs	r3, r0, r3
 800529e:	d01b      	beq.n	80052d8 <_malloc_r+0xb0>
 80052a0:	425a      	negs	r2, r3
 80052a2:	50e2      	str	r2, [r4, r3]
 80052a4:	bd70      	pop	{r4, r5, r6, pc}
 80052a6:	428c      	cmp	r4, r1
 80052a8:	bf0d      	iteet	eq
 80052aa:	6863      	ldreq	r3, [r4, #4]
 80052ac:	684b      	ldrne	r3, [r1, #4]
 80052ae:	6063      	strne	r3, [r4, #4]
 80052b0:	6013      	streq	r3, [r2, #0]
 80052b2:	bf18      	it	ne
 80052b4:	460c      	movne	r4, r1
 80052b6:	e7e9      	b.n	800528c <_malloc_r+0x64>
 80052b8:	460c      	mov	r4, r1
 80052ba:	6849      	ldr	r1, [r1, #4]
 80052bc:	e7ca      	b.n	8005254 <_malloc_r+0x2c>
 80052be:	1cc4      	adds	r4, r0, #3
 80052c0:	f024 0403 	bic.w	r4, r4, #3
 80052c4:	42a0      	cmp	r0, r4
 80052c6:	d005      	beq.n	80052d4 <_malloc_r+0xac>
 80052c8:	1a21      	subs	r1, r4, r0
 80052ca:	4630      	mov	r0, r6
 80052cc:	f000 f830 	bl	8005330 <_sbrk_r>
 80052d0:	3001      	adds	r0, #1
 80052d2:	d0cd      	beq.n	8005270 <_malloc_r+0x48>
 80052d4:	6025      	str	r5, [r4, #0]
 80052d6:	e7d9      	b.n	800528c <_malloc_r+0x64>
 80052d8:	bd70      	pop	{r4, r5, r6, pc}
 80052da:	bf00      	nop
 80052dc:	20000158 	.word	0x20000158
 80052e0:	2000015c 	.word	0x2000015c

080052e4 <_realloc_r>:
 80052e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052e6:	4607      	mov	r7, r0
 80052e8:	4614      	mov	r4, r2
 80052ea:	460e      	mov	r6, r1
 80052ec:	b921      	cbnz	r1, 80052f8 <_realloc_r+0x14>
 80052ee:	4611      	mov	r1, r2
 80052f0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80052f4:	f7ff bf98 	b.w	8005228 <_malloc_r>
 80052f8:	b922      	cbnz	r2, 8005304 <_realloc_r+0x20>
 80052fa:	f7ff ff47 	bl	800518c <_free_r>
 80052fe:	4625      	mov	r5, r4
 8005300:	4628      	mov	r0, r5
 8005302:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005304:	f000 f826 	bl	8005354 <_malloc_usable_size_r>
 8005308:	4284      	cmp	r4, r0
 800530a:	d90f      	bls.n	800532c <_realloc_r+0x48>
 800530c:	4621      	mov	r1, r4
 800530e:	4638      	mov	r0, r7
 8005310:	f7ff ff8a 	bl	8005228 <_malloc_r>
 8005314:	4605      	mov	r5, r0
 8005316:	2800      	cmp	r0, #0
 8005318:	d0f2      	beq.n	8005300 <_realloc_r+0x1c>
 800531a:	4631      	mov	r1, r6
 800531c:	4622      	mov	r2, r4
 800531e:	f7ff ff0f 	bl	8005140 <memcpy>
 8005322:	4631      	mov	r1, r6
 8005324:	4638      	mov	r0, r7
 8005326:	f7ff ff31 	bl	800518c <_free_r>
 800532a:	e7e9      	b.n	8005300 <_realloc_r+0x1c>
 800532c:	4635      	mov	r5, r6
 800532e:	e7e7      	b.n	8005300 <_realloc_r+0x1c>

08005330 <_sbrk_r>:
 8005330:	b538      	push	{r3, r4, r5, lr}
 8005332:	4c06      	ldr	r4, [pc, #24]	; (800534c <_sbrk_r+0x1c>)
 8005334:	2300      	movs	r3, #0
 8005336:	4605      	mov	r5, r0
 8005338:	4608      	mov	r0, r1
 800533a:	6023      	str	r3, [r4, #0]
 800533c:	f7ff fb44 	bl	80049c8 <_sbrk>
 8005340:	1c43      	adds	r3, r0, #1
 8005342:	d102      	bne.n	800534a <_sbrk_r+0x1a>
 8005344:	6823      	ldr	r3, [r4, #0]
 8005346:	b103      	cbz	r3, 800534a <_sbrk_r+0x1a>
 8005348:	602b      	str	r3, [r5, #0]
 800534a:	bd38      	pop	{r3, r4, r5, pc}
 800534c:	200007b4 	.word	0x200007b4

08005350 <__malloc_lock>:
 8005350:	4770      	bx	lr

08005352 <__malloc_unlock>:
 8005352:	4770      	bx	lr

08005354 <_malloc_usable_size_r>:
 8005354:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8005358:	2800      	cmp	r0, #0
 800535a:	f1a0 0004 	sub.w	r0, r0, #4
 800535e:	bfbc      	itt	lt
 8005360:	580b      	ldrlt	r3, [r1, r0]
 8005362:	18c0      	addlt	r0, r0, r3
 8005364:	4770      	bx	lr
	...

08005368 <_init>:
 8005368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800536a:	bf00      	nop
 800536c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800536e:	bc08      	pop	{r3}
 8005370:	469e      	mov	lr, r3
 8005372:	4770      	bx	lr

08005374 <_fini>:
 8005374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005376:	bf00      	nop
 8005378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800537a:	bc08      	pop	{r3}
 800537c:	469e      	mov	lr, r3
 800537e:	4770      	bx	lr
