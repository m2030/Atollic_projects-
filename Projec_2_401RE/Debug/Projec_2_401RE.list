
Projec_2_401RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000014d4  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08001668  08001668  00011668  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08001688  08001688  00011688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08001690  08001690  00011690  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08001694  08001694  00011694  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  08001698  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
  8 .bss          00000158  2000000c  2000000c  0002000c  2**2
                  ALLOC
  9 ._user_heap_stack 00000400  20000164  20000164  0002000c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 11 .debug_info   000095f7  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00001a58  00000000  00000000  00029633  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00004145  00000000  00000000  0002b08b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006f8  00000000  00000000  0002f1d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000940  00000000  00000000  0002f8c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00003984  00000000  00000000  00030208  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00002819  00000000  00000000  00033b8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  000363a5  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00001368  00000000  00000000  00036424  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08001650 	.word	0x08001650

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08001650 	.word	0x08001650

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b97a 	b.w	80004e0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	468c      	mov	ip, r1
 800020a:	460d      	mov	r5, r1
 800020c:	4604      	mov	r4, r0
 800020e:	9e08      	ldr	r6, [sp, #32]
 8000210:	2b00      	cmp	r3, #0
 8000212:	d151      	bne.n	80002b8 <__udivmoddi4+0xb4>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d96d      	bls.n	80002f6 <__udivmoddi4+0xf2>
 800021a:	fab2 fe82 	clz	lr, r2
 800021e:	f1be 0f00 	cmp.w	lr, #0
 8000222:	d00b      	beq.n	800023c <__udivmoddi4+0x38>
 8000224:	f1ce 0c20 	rsb	ip, lr, #32
 8000228:	fa01 f50e 	lsl.w	r5, r1, lr
 800022c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000230:	fa02 f70e 	lsl.w	r7, r2, lr
 8000234:	ea4c 0c05 	orr.w	ip, ip, r5
 8000238:	fa00 f40e 	lsl.w	r4, r0, lr
 800023c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000240:	0c25      	lsrs	r5, r4, #16
 8000242:	fbbc f8fa 	udiv	r8, ip, sl
 8000246:	fa1f f987 	uxth.w	r9, r7
 800024a:	fb0a cc18 	mls	ip, sl, r8, ip
 800024e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000252:	fb08 f309 	mul.w	r3, r8, r9
 8000256:	42ab      	cmp	r3, r5
 8000258:	d90a      	bls.n	8000270 <__udivmoddi4+0x6c>
 800025a:	19ed      	adds	r5, r5, r7
 800025c:	f108 32ff 	add.w	r2, r8, #4294967295
 8000260:	f080 8123 	bcs.w	80004aa <__udivmoddi4+0x2a6>
 8000264:	42ab      	cmp	r3, r5
 8000266:	f240 8120 	bls.w	80004aa <__udivmoddi4+0x2a6>
 800026a:	f1a8 0802 	sub.w	r8, r8, #2
 800026e:	443d      	add	r5, r7
 8000270:	1aed      	subs	r5, r5, r3
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb5 f0fa 	udiv	r0, r5, sl
 8000278:	fb0a 5510 	mls	r5, sl, r0, r5
 800027c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000280:	fb00 f909 	mul.w	r9, r0, r9
 8000284:	45a1      	cmp	r9, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x98>
 8000288:	19e4      	adds	r4, r4, r7
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 810a 	bcs.w	80004a6 <__udivmoddi4+0x2a2>
 8000292:	45a1      	cmp	r9, r4
 8000294:	f240 8107 	bls.w	80004a6 <__udivmoddi4+0x2a2>
 8000298:	3802      	subs	r0, #2
 800029a:	443c      	add	r4, r7
 800029c:	eba4 0409 	sub.w	r4, r4, r9
 80002a0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002a4:	2100      	movs	r1, #0
 80002a6:	2e00      	cmp	r6, #0
 80002a8:	d061      	beq.n	800036e <__udivmoddi4+0x16a>
 80002aa:	fa24 f40e 	lsr.w	r4, r4, lr
 80002ae:	2300      	movs	r3, #0
 80002b0:	6034      	str	r4, [r6, #0]
 80002b2:	6073      	str	r3, [r6, #4]
 80002b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d907      	bls.n	80002cc <__udivmoddi4+0xc8>
 80002bc:	2e00      	cmp	r6, #0
 80002be:	d054      	beq.n	800036a <__udivmoddi4+0x166>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e886 0021 	stmia.w	r6, {r0, r5}
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	f040 808e 	bne.w	80003f2 <__udivmoddi4+0x1ee>
 80002d6:	42ab      	cmp	r3, r5
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xdc>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2d0>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb65 0503 	sbc.w	r5, r5, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	46ac      	mov	ip, r5
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d03f      	beq.n	800036e <__udivmoddi4+0x16a>
 80002ee:	e886 1010 	stmia.w	r6, {r4, ip}
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	b912      	cbnz	r2, 80002fe <__udivmoddi4+0xfa>
 80002f8:	2701      	movs	r7, #1
 80002fa:	fbb7 f7f2 	udiv	r7, r7, r2
 80002fe:	fab7 fe87 	clz	lr, r7
 8000302:	f1be 0f00 	cmp.w	lr, #0
 8000306:	d134      	bne.n	8000372 <__udivmoddi4+0x16e>
 8000308:	1beb      	subs	r3, r5, r7
 800030a:	0c3a      	lsrs	r2, r7, #16
 800030c:	fa1f fc87 	uxth.w	ip, r7
 8000310:	2101      	movs	r1, #1
 8000312:	fbb3 f8f2 	udiv	r8, r3, r2
 8000316:	0c25      	lsrs	r5, r4, #16
 8000318:	fb02 3318 	mls	r3, r2, r8, r3
 800031c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000320:	fb0c f308 	mul.w	r3, ip, r8
 8000324:	42ab      	cmp	r3, r5
 8000326:	d907      	bls.n	8000338 <__udivmoddi4+0x134>
 8000328:	19ed      	adds	r5, r5, r7
 800032a:	f108 30ff 	add.w	r0, r8, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x132>
 8000330:	42ab      	cmp	r3, r5
 8000332:	f200 80d1 	bhi.w	80004d8 <__udivmoddi4+0x2d4>
 8000336:	4680      	mov	r8, r0
 8000338:	1aed      	subs	r5, r5, r3
 800033a:	b2a3      	uxth	r3, r4
 800033c:	fbb5 f0f2 	udiv	r0, r5, r2
 8000340:	fb02 5510 	mls	r5, r2, r0, r5
 8000344:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000348:	fb0c fc00 	mul.w	ip, ip, r0
 800034c:	45a4      	cmp	ip, r4
 800034e:	d907      	bls.n	8000360 <__udivmoddi4+0x15c>
 8000350:	19e4      	adds	r4, r4, r7
 8000352:	f100 33ff 	add.w	r3, r0, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x15a>
 8000358:	45a4      	cmp	ip, r4
 800035a:	f200 80b8 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 800035e:	4618      	mov	r0, r3
 8000360:	eba4 040c 	sub.w	r4, r4, ip
 8000364:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000368:	e79d      	b.n	80002a6 <__udivmoddi4+0xa2>
 800036a:	4631      	mov	r1, r6
 800036c:	4630      	mov	r0, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	f1ce 0420 	rsb	r4, lr, #32
 8000376:	fa05 f30e 	lsl.w	r3, r5, lr
 800037a:	fa07 f70e 	lsl.w	r7, r7, lr
 800037e:	fa20 f804 	lsr.w	r8, r0, r4
 8000382:	0c3a      	lsrs	r2, r7, #16
 8000384:	fa25 f404 	lsr.w	r4, r5, r4
 8000388:	ea48 0803 	orr.w	r8, r8, r3
 800038c:	fbb4 f1f2 	udiv	r1, r4, r2
 8000390:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000394:	fb02 4411 	mls	r4, r2, r1, r4
 8000398:	fa1f fc87 	uxth.w	ip, r7
 800039c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003a0:	fb01 f30c 	mul.w	r3, r1, ip
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	fa00 f40e 	lsl.w	r4, r0, lr
 80003aa:	d909      	bls.n	80003c0 <__udivmoddi4+0x1bc>
 80003ac:	19ed      	adds	r5, r5, r7
 80003ae:	f101 30ff 	add.w	r0, r1, #4294967295
 80003b2:	f080 808a 	bcs.w	80004ca <__udivmoddi4+0x2c6>
 80003b6:	42ab      	cmp	r3, r5
 80003b8:	f240 8087 	bls.w	80004ca <__udivmoddi4+0x2c6>
 80003bc:	3902      	subs	r1, #2
 80003be:	443d      	add	r5, r7
 80003c0:	1aeb      	subs	r3, r5, r3
 80003c2:	fa1f f588 	uxth.w	r5, r8
 80003c6:	fbb3 f0f2 	udiv	r0, r3, r2
 80003ca:	fb02 3310 	mls	r3, r2, r0, r3
 80003ce:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003d2:	fb00 f30c 	mul.w	r3, r0, ip
 80003d6:	42ab      	cmp	r3, r5
 80003d8:	d907      	bls.n	80003ea <__udivmoddi4+0x1e6>
 80003da:	19ed      	adds	r5, r5, r7
 80003dc:	f100 38ff 	add.w	r8, r0, #4294967295
 80003e0:	d26f      	bcs.n	80004c2 <__udivmoddi4+0x2be>
 80003e2:	42ab      	cmp	r3, r5
 80003e4:	d96d      	bls.n	80004c2 <__udivmoddi4+0x2be>
 80003e6:	3802      	subs	r0, #2
 80003e8:	443d      	add	r5, r7
 80003ea:	1aeb      	subs	r3, r5, r3
 80003ec:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f0:	e78f      	b.n	8000312 <__udivmoddi4+0x10e>
 80003f2:	f1c1 0720 	rsb	r7, r1, #32
 80003f6:	fa22 f807 	lsr.w	r8, r2, r7
 80003fa:	408b      	lsls	r3, r1
 80003fc:	fa05 f401 	lsl.w	r4, r5, r1
 8000400:	ea48 0303 	orr.w	r3, r8, r3
 8000404:	fa20 fe07 	lsr.w	lr, r0, r7
 8000408:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 800040c:	40fd      	lsrs	r5, r7
 800040e:	ea4e 0e04 	orr.w	lr, lr, r4
 8000412:	fbb5 f9fc 	udiv	r9, r5, ip
 8000416:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800041a:	fb0c 5519 	mls	r5, ip, r9, r5
 800041e:	fa1f f883 	uxth.w	r8, r3
 8000422:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000426:	fb09 f408 	mul.w	r4, r9, r8
 800042a:	42ac      	cmp	r4, r5
 800042c:	fa02 f201 	lsl.w	r2, r2, r1
 8000430:	fa00 fa01 	lsl.w	sl, r0, r1
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x244>
 8000436:	18ed      	adds	r5, r5, r3
 8000438:	f109 30ff 	add.w	r0, r9, #4294967295
 800043c:	d243      	bcs.n	80004c6 <__udivmoddi4+0x2c2>
 800043e:	42ac      	cmp	r4, r5
 8000440:	d941      	bls.n	80004c6 <__udivmoddi4+0x2c2>
 8000442:	f1a9 0902 	sub.w	r9, r9, #2
 8000446:	441d      	add	r5, r3
 8000448:	1b2d      	subs	r5, r5, r4
 800044a:	fa1f fe8e 	uxth.w	lr, lr
 800044e:	fbb5 f0fc 	udiv	r0, r5, ip
 8000452:	fb0c 5510 	mls	r5, ip, r0, r5
 8000456:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800045a:	fb00 f808 	mul.w	r8, r0, r8
 800045e:	45a0      	cmp	r8, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x26e>
 8000462:	18e4      	adds	r4, r4, r3
 8000464:	f100 35ff 	add.w	r5, r0, #4294967295
 8000468:	d229      	bcs.n	80004be <__udivmoddi4+0x2ba>
 800046a:	45a0      	cmp	r8, r4
 800046c:	d927      	bls.n	80004be <__udivmoddi4+0x2ba>
 800046e:	3802      	subs	r0, #2
 8000470:	441c      	add	r4, r3
 8000472:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000476:	eba4 0408 	sub.w	r4, r4, r8
 800047a:	fba0 8902 	umull	r8, r9, r0, r2
 800047e:	454c      	cmp	r4, r9
 8000480:	46c6      	mov	lr, r8
 8000482:	464d      	mov	r5, r9
 8000484:	d315      	bcc.n	80004b2 <__udivmoddi4+0x2ae>
 8000486:	d012      	beq.n	80004ae <__udivmoddi4+0x2aa>
 8000488:	b156      	cbz	r6, 80004a0 <__udivmoddi4+0x29c>
 800048a:	ebba 030e 	subs.w	r3, sl, lr
 800048e:	eb64 0405 	sbc.w	r4, r4, r5
 8000492:	fa04 f707 	lsl.w	r7, r4, r7
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431f      	orrs	r7, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	6037      	str	r7, [r6, #0]
 800049e:	6074      	str	r4, [r6, #4]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a6:	4618      	mov	r0, r3
 80004a8:	e6f8      	b.n	800029c <__udivmoddi4+0x98>
 80004aa:	4690      	mov	r8, r2
 80004ac:	e6e0      	b.n	8000270 <__udivmoddi4+0x6c>
 80004ae:	45c2      	cmp	sl, r8
 80004b0:	d2ea      	bcs.n	8000488 <__udivmoddi4+0x284>
 80004b2:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b6:	eb69 0503 	sbc.w	r5, r9, r3
 80004ba:	3801      	subs	r0, #1
 80004bc:	e7e4      	b.n	8000488 <__udivmoddi4+0x284>
 80004be:	4628      	mov	r0, r5
 80004c0:	e7d7      	b.n	8000472 <__udivmoddi4+0x26e>
 80004c2:	4640      	mov	r0, r8
 80004c4:	e791      	b.n	80003ea <__udivmoddi4+0x1e6>
 80004c6:	4681      	mov	r9, r0
 80004c8:	e7be      	b.n	8000448 <__udivmoddi4+0x244>
 80004ca:	4601      	mov	r1, r0
 80004cc:	e778      	b.n	80003c0 <__udivmoddi4+0x1bc>
 80004ce:	3802      	subs	r0, #2
 80004d0:	443c      	add	r4, r7
 80004d2:	e745      	b.n	8000360 <__udivmoddi4+0x15c>
 80004d4:	4608      	mov	r0, r1
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xe6>
 80004d8:	f1a8 0802 	sub.w	r8, r8, #2
 80004dc:	443d      	add	r5, r7
 80004de:	e72b      	b.n	8000338 <__udivmoddi4+0x134>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004e4:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004e6:	4a0e      	ldr	r2, [pc, #56]	; (8000520 <HAL_InitTick+0x3c>)
 80004e8:	4b0e      	ldr	r3, [pc, #56]	; (8000524 <HAL_InitTick+0x40>)
{
 80004ea:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004ec:	7818      	ldrb	r0, [r3, #0]
 80004ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004f2:	fbb3 f3f0 	udiv	r3, r3, r0
 80004f6:	6810      	ldr	r0, [r2, #0]
 80004f8:	fbb0 f0f3 	udiv	r0, r0, r3
 80004fc:	f000 f896 	bl	800062c <HAL_SYSTICK_Config>
 8000500:	4604      	mov	r4, r0
 8000502:	b958      	cbnz	r0, 800051c <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000504:	2d0f      	cmp	r5, #15
 8000506:	d809      	bhi.n	800051c <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000508:	4602      	mov	r2, r0
 800050a:	4629      	mov	r1, r5
 800050c:	f04f 30ff 	mov.w	r0, #4294967295
 8000510:	f000 f84a 	bl	80005a8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000514:	4b04      	ldr	r3, [pc, #16]	; (8000528 <HAL_InitTick+0x44>)
 8000516:	4620      	mov	r0, r4
 8000518:	601d      	str	r5, [r3, #0]
 800051a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800051c:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800051e:	bd38      	pop	{r3, r4, r5, pc}
 8000520:	20000008 	.word	0x20000008
 8000524:	20000000 	.word	0x20000000
 8000528:	20000004 	.word	0x20000004

0800052c <HAL_Init>:
{
 800052c:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800052e:	4b0b      	ldr	r3, [pc, #44]	; (800055c <HAL_Init+0x30>)
 8000530:	681a      	ldr	r2, [r3, #0]
 8000532:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000536:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000538:	681a      	ldr	r2, [r3, #0]
 800053a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800053e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000540:	681a      	ldr	r2, [r3, #0]
 8000542:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000546:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000548:	2003      	movs	r0, #3
 800054a:	f000 f81b 	bl	8000584 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800054e:	2000      	movs	r0, #0
 8000550:	f7ff ffc8 	bl	80004e4 <HAL_InitTick>
  HAL_MspInit();
 8000554:	f000 ff1e 	bl	8001394 <HAL_MspInit>
}
 8000558:	2000      	movs	r0, #0
 800055a:	bd08      	pop	{r3, pc}
 800055c:	40023c00 	.word	0x40023c00

08000560 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000560:	4a03      	ldr	r2, [pc, #12]	; (8000570 <HAL_IncTick+0x10>)
 8000562:	4b04      	ldr	r3, [pc, #16]	; (8000574 <HAL_IncTick+0x14>)
 8000564:	6811      	ldr	r1, [r2, #0]
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	440b      	add	r3, r1
 800056a:	6013      	str	r3, [r2, #0]
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop
 8000570:	20000028 	.word	0x20000028
 8000574:	20000000 	.word	0x20000000

08000578 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000578:	4b01      	ldr	r3, [pc, #4]	; (8000580 <HAL_GetTick+0x8>)
 800057a:	6818      	ldr	r0, [r3, #0]
}
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop
 8000580:	20000028 	.word	0x20000028

08000584 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000584:	4a07      	ldr	r2, [pc, #28]	; (80005a4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000586:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000588:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800058c:	041b      	lsls	r3, r3, #16
 800058e:	0c1b      	lsrs	r3, r3, #16
 8000590:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000594:	0200      	lsls	r0, r0, #8
 8000596:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800059a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800059e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80005a0:	60d3      	str	r3, [r2, #12]
 80005a2:	4770      	bx	lr
 80005a4:	e000ed00 	.word	0xe000ed00

080005a8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005a8:	4b17      	ldr	r3, [pc, #92]	; (8000608 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	68dc      	ldr	r4, [r3, #12]
 80005ae:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005b2:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005b6:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005b8:	2b04      	cmp	r3, #4
 80005ba:	bf28      	it	cs
 80005bc:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005be:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005c0:	f04f 0501 	mov.w	r5, #1
 80005c4:	fa05 f303 	lsl.w	r3, r5, r3
 80005c8:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005cc:	bf8c      	ite	hi
 80005ce:	3c03      	subhi	r4, #3
 80005d0:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005d2:	4019      	ands	r1, r3
 80005d4:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005d6:	fa05 f404 	lsl.w	r4, r5, r4
 80005da:	3c01      	subs	r4, #1
 80005dc:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 80005de:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005e0:	ea42 0201 	orr.w	r2, r2, r1
 80005e4:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005e8:	bfad      	iteet	ge
 80005ea:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ee:	f000 000f 	andlt.w	r0, r0, #15
 80005f2:	4b06      	ldrlt	r3, [pc, #24]	; (800060c <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005f4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005f8:	bfb5      	itete	lt
 80005fa:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005fc:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005fe:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000600:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000604:	bd30      	pop	{r4, r5, pc}
 8000606:	bf00      	nop
 8000608:	e000ed00 	.word	0xe000ed00
 800060c:	e000ed14 	.word	0xe000ed14

08000610 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000610:	2800      	cmp	r0, #0
 8000612:	db08      	blt.n	8000626 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000614:	0942      	lsrs	r2, r0, #5
 8000616:	2301      	movs	r3, #1
 8000618:	f000 001f 	and.w	r0, r0, #31
 800061c:	fa03 f000 	lsl.w	r0, r3, r0
 8000620:	4b01      	ldr	r3, [pc, #4]	; (8000628 <HAL_NVIC_EnableIRQ+0x18>)
 8000622:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000626:	4770      	bx	lr
 8000628:	e000e100 	.word	0xe000e100

0800062c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800062c:	3801      	subs	r0, #1
 800062e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000632:	d20a      	bcs.n	800064a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000634:	4b06      	ldr	r3, [pc, #24]	; (8000650 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000636:	4a07      	ldr	r2, [pc, #28]	; (8000654 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000638:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800063a:	21f0      	movs	r1, #240	; 0xf0
 800063c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000640:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000642:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000644:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800064a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop
 8000650:	e000e010 	.word	0xe000e010
 8000654:	e000ed00 	.word	0xe000ed00

08000658 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000658:	6803      	ldr	r3, [r0, #0]
 800065a:	b2da      	uxtb	r2, r3
 800065c:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000660:	f023 0303 	bic.w	r3, r3, #3
 8000664:	2118      	movs	r1, #24
 8000666:	3a10      	subs	r2, #16
 8000668:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800066c:	4904      	ldr	r1, [pc, #16]	; (8000680 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 800066e:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000670:	bf88      	it	hi
 8000672:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000674:	5c89      	ldrb	r1, [r1, r2]
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000676:	6583      	str	r3, [r0, #88]	; 0x58
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000678:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  
  return hdma->StreamBaseAddress;
}
 800067a:	6d80      	ldr	r0, [r0, #88]	; 0x58
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop
 8000680:	08001668 	.word	0x08001668

08000684 <HAL_DMA_Init>:
{
 8000684:	b570      	push	{r4, r5, r6, lr}
 8000686:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000688:	f7ff ff76 	bl	8000578 <HAL_GetTick>
 800068c:	4605      	mov	r5, r0
  if(hdma == NULL)
 800068e:	2c00      	cmp	r4, #0
 8000690:	d071      	beq.n	8000776 <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 8000692:	2300      	movs	r3, #0
 8000694:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8000698:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 800069a:	2302      	movs	r3, #2
 800069c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 80006a0:	6813      	ldr	r3, [r2, #0]
 80006a2:	f023 0301 	bic.w	r3, r3, #1
 80006a6:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80006a8:	6821      	ldr	r1, [r4, #0]
 80006aa:	680b      	ldr	r3, [r1, #0]
 80006ac:	07d8      	lsls	r0, r3, #31
 80006ae:	d43c      	bmi.n	800072a <HAL_DMA_Init+0xa6>
  tmp = hdma->Instance->CR;
 80006b0:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80006b2:	4d32      	ldr	r5, [pc, #200]	; (800077c <HAL_DMA_Init+0xf8>)
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80006b4:	6862      	ldr	r2, [r4, #4]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80006b6:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80006b8:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80006ba:	68a3      	ldr	r3, [r4, #8]
 80006bc:	4313      	orrs	r3, r2
 80006be:	68e2      	ldr	r2, [r4, #12]
 80006c0:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80006c2:	6922      	ldr	r2, [r4, #16]
 80006c4:	4313      	orrs	r3, r2
 80006c6:	6962      	ldr	r2, [r4, #20]
 80006c8:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80006ca:	69e2      	ldr	r2, [r4, #28]
 80006cc:	4303      	orrs	r3, r0
 80006ce:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 80006d0:	6a22      	ldr	r2, [r4, #32]
 80006d2:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80006d4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80006d6:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80006d8:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80006dc:	bf01      	itttt	eq
 80006de:	6b26      	ldreq	r6, [r4, #48]	; 0x30
 80006e0:	6ae5      	ldreq	r5, [r4, #44]	; 0x2c
 80006e2:	4335      	orreq	r5, r6
 80006e4:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 80006e6:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 80006e8:	694b      	ldr	r3, [r1, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80006ea:	2a04      	cmp	r2, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80006ec:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 80006f0:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80006f4:	d10b      	bne.n	800070e <HAL_DMA_Init+0x8a>
    tmp |= hdma->Init.FIFOThreshold;
 80006f6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80006f8:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 80006fa:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80006fc:	b13d      	cbz	r5, 800070e <HAL_DMA_Init+0x8a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80006fe:	b9f8      	cbnz	r0, 8000740 <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 8000700:	2a01      	cmp	r2, #1
 8000702:	d02d      	beq.n	8000760 <HAL_DMA_Init+0xdc>
 8000704:	d301      	bcc.n	800070a <HAL_DMA_Init+0x86>
 8000706:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000708:	d101      	bne.n	800070e <HAL_DMA_Init+0x8a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800070a:	01ea      	lsls	r2, r5, #7
 800070c:	d42b      	bmi.n	8000766 <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 800070e:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000710:	4620      	mov	r0, r4
 8000712:	f7ff ffa1 	bl	8000658 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000716:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000718:	233f      	movs	r3, #63	; 0x3f
 800071a:	4093      	lsls	r3, r2
 800071c:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800071e:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8000720:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000722:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8000724:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8000728:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800072a:	f7ff ff25 	bl	8000578 <HAL_GetTick>
 800072e:	1b40      	subs	r0, r0, r5
 8000730:	2805      	cmp	r0, #5
 8000732:	d9b9      	bls.n	80006a8 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000734:	2320      	movs	r3, #32
 8000736:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000738:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 800073a:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 800073e:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000740:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8000744:	d113      	bne.n	800076e <HAL_DMA_Init+0xea>
    switch (tmp)
 8000746:	2a03      	cmp	r2, #3
 8000748:	d8e1      	bhi.n	800070e <HAL_DMA_Init+0x8a>
 800074a:	a001      	add	r0, pc, #4	; (adr r0, 8000750 <HAL_DMA_Init+0xcc>)
 800074c:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8000750:	08000767 	.word	0x08000767
 8000754:	0800070b 	.word	0x0800070b
 8000758:	08000767 	.word	0x08000767
 800075c:	08000761 	.word	0x08000761
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000760:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8000764:	d1d3      	bne.n	800070e <HAL_DMA_Init+0x8a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000766:	2340      	movs	r3, #64	; 0x40
 8000768:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 800076a:	2001      	movs	r0, #1
 800076c:	e7e5      	b.n	800073a <HAL_DMA_Init+0xb6>
    switch (tmp)
 800076e:	2a02      	cmp	r2, #2
 8000770:	d9f9      	bls.n	8000766 <HAL_DMA_Init+0xe2>
 8000772:	2a03      	cmp	r2, #3
 8000774:	e7c8      	b.n	8000708 <HAL_DMA_Init+0x84>
    return HAL_ERROR;
 8000776:	2001      	movs	r0, #1
 8000778:	bd70      	pop	{r4, r5, r6, pc}
 800077a:	bf00      	nop
 800077c:	f010803f 	.word	0xf010803f

08000780 <HAL_DMA_IRQHandler>:
{
 8000780:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 8000782:	2300      	movs	r3, #0
 8000784:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000786:	4b5a      	ldr	r3, [pc, #360]	; (80008f0 <HAL_DMA_IRQHandler+0x170>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000788:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 800078a:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800078c:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 800078e:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000790:	2208      	movs	r2, #8
 8000792:	409a      	lsls	r2, r3
 8000794:	4216      	tst	r6, r2
{
 8000796:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000798:	d00c      	beq.n	80007b4 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800079a:	6801      	ldr	r1, [r0, #0]
 800079c:	6808      	ldr	r0, [r1, #0]
 800079e:	0740      	lsls	r0, r0, #29
 80007a0:	d508      	bpl.n	80007b4 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80007a2:	6808      	ldr	r0, [r1, #0]
 80007a4:	f020 0004 	bic.w	r0, r0, #4
 80007a8:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80007aa:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80007ac:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80007ae:	f042 0201 	orr.w	r2, r2, #1
 80007b2:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80007b4:	2201      	movs	r2, #1
 80007b6:	409a      	lsls	r2, r3
 80007b8:	4216      	tst	r6, r2
 80007ba:	d008      	beq.n	80007ce <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80007bc:	6821      	ldr	r1, [r4, #0]
 80007be:	6949      	ldr	r1, [r1, #20]
 80007c0:	0609      	lsls	r1, r1, #24
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80007c2:	bf41      	itttt	mi
 80007c4:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80007c6:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 80007c8:	f042 0202 	orrmi.w	r2, r2, #2
 80007cc:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80007ce:	2204      	movs	r2, #4
 80007d0:	409a      	lsls	r2, r3
 80007d2:	4216      	tst	r6, r2
 80007d4:	d008      	beq.n	80007e8 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80007d6:	6821      	ldr	r1, [r4, #0]
 80007d8:	6809      	ldr	r1, [r1, #0]
 80007da:	0788      	lsls	r0, r1, #30
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80007dc:	bf41      	itttt	mi
 80007de:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80007e0:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 80007e2:	f042 0204 	orrmi.w	r2, r2, #4
 80007e6:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80007e8:	2210      	movs	r2, #16
 80007ea:	409a      	lsls	r2, r3
 80007ec:	4216      	tst	r6, r2
 80007ee:	d010      	beq.n	8000812 <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80007f0:	6823      	ldr	r3, [r4, #0]
 80007f2:	6819      	ldr	r1, [r3, #0]
 80007f4:	0709      	lsls	r1, r1, #28
 80007f6:	d50c      	bpl.n	8000812 <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80007f8:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80007fa:	681a      	ldr	r2, [r3, #0]
 80007fc:	0350      	lsls	r0, r2, #13
 80007fe:	d535      	bpl.n	800086c <HAL_DMA_IRQHandler+0xec>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	0319      	lsls	r1, r3, #12
 8000804:	d401      	bmi.n	800080a <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 8000806:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000808:	e000      	b.n	800080c <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 800080a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 800080c:	b10b      	cbz	r3, 8000812 <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 800080e:	4620      	mov	r0, r4
 8000810:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000812:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8000814:	2220      	movs	r2, #32
 8000816:	408a      	lsls	r2, r1
 8000818:	4216      	tst	r6, r2
 800081a:	d038      	beq.n	800088e <HAL_DMA_IRQHandler+0x10e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800081c:	6823      	ldr	r3, [r4, #0]
 800081e:	6818      	ldr	r0, [r3, #0]
 8000820:	06c6      	lsls	r6, r0, #27
 8000822:	d534      	bpl.n	800088e <HAL_DMA_IRQHandler+0x10e>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000824:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000826:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 800082a:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800082c:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800082e:	d125      	bne.n	800087c <HAL_DMA_IRQHandler+0xfc>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000830:	f022 0216 	bic.w	r2, r2, #22
 8000834:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000836:	695a      	ldr	r2, [r3, #20]
 8000838:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800083c:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800083e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000840:	b90a      	cbnz	r2, 8000846 <HAL_DMA_IRQHandler+0xc6>
 8000842:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8000844:	b11a      	cbz	r2, 800084e <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000846:	681a      	ldr	r2, [r3, #0]
 8000848:	f022 0208 	bic.w	r2, r2, #8
 800084c:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800084e:	233f      	movs	r3, #63	; 0x3f
 8000850:	408b      	lsls	r3, r1
 8000852:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 8000854:	2300      	movs	r3, #0
 8000856:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 800085a:	2301      	movs	r3, #1
 800085c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8000860:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 8000862:	b10b      	cbz	r3, 8000868 <HAL_DMA_IRQHandler+0xe8>
      hdma->XferErrorCallback(hdma);
 8000864:	4620      	mov	r0, r4
 8000866:	4798      	blx	r3
}
 8000868:	b003      	add	sp, #12
 800086a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800086c:	681a      	ldr	r2, [r3, #0]
 800086e:	05d2      	lsls	r2, r2, #23
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000870:	bf5e      	ittt	pl
 8000872:	681a      	ldrpl	r2, [r3, #0]
 8000874:	f022 0208 	bicpl.w	r2, r2, #8
 8000878:	601a      	strpl	r2, [r3, #0]
 800087a:	e7c4      	b.n	8000806 <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800087c:	0350      	lsls	r0, r2, #13
 800087e:	d528      	bpl.n	80008d2 <HAL_DMA_IRQHandler+0x152>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	0319      	lsls	r1, r3, #12
 8000884:	d432      	bmi.n	80008ec <HAL_DMA_IRQHandler+0x16c>
          if(hdma->XferM1CpltCallback != NULL)
 8000886:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 8000888:	b10b      	cbz	r3, 800088e <HAL_DMA_IRQHandler+0x10e>
          hdma->XferCpltCallback(hdma);
 800088a:	4620      	mov	r0, r4
 800088c:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800088e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000890:	2b00      	cmp	r3, #0
 8000892:	d0e9      	beq.n	8000868 <HAL_DMA_IRQHandler+0xe8>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000894:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000896:	07da      	lsls	r2, r3, #31
 8000898:	d519      	bpl.n	80008ce <HAL_DMA_IRQHandler+0x14e>
      hdma->State = HAL_DMA_STATE_ABORT;
 800089a:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 800089c:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 800089e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 80008a2:	6813      	ldr	r3, [r2, #0]
 80008a4:	f023 0301 	bic.w	r3, r3, #1
 80008a8:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 80008aa:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80008ae:	fbb7 f7f3 	udiv	r7, r7, r3
        if (++count > timeout)
 80008b2:	9b01      	ldr	r3, [sp, #4]
 80008b4:	3301      	adds	r3, #1
 80008b6:	429f      	cmp	r7, r3
 80008b8:	9301      	str	r3, [sp, #4]
 80008ba:	d302      	bcc.n	80008c2 <HAL_DMA_IRQHandler+0x142>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80008bc:	6813      	ldr	r3, [r2, #0]
 80008be:	07db      	lsls	r3, r3, #31
 80008c0:	d4f7      	bmi.n	80008b2 <HAL_DMA_IRQHandler+0x132>
      __HAL_UNLOCK(hdma);
 80008c2:	2300      	movs	r3, #0
 80008c4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 80008c8:	2301      	movs	r3, #1
 80008ca:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 80008ce:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80008d0:	e7c7      	b.n	8000862 <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80008d2:	681a      	ldr	r2, [r3, #0]
 80008d4:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 80008d8:	d108      	bne.n	80008ec <HAL_DMA_IRQHandler+0x16c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80008da:	6819      	ldr	r1, [r3, #0]
 80008dc:	f021 0110 	bic.w	r1, r1, #16
 80008e0:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 80008e2:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 80008e4:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 80008e8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 80008ec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80008ee:	e7cb      	b.n	8000888 <HAL_DMA_IRQHandler+0x108>
 80008f0:	20000008 	.word	0x20000008

080008f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80008f8:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80008fa:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008fc:	f8df 818c 	ldr.w	r8, [pc, #396]	; 8000a8c <HAL_GPIO_Init+0x198>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000900:	4a60      	ldr	r2, [pc, #384]	; (8000a84 <HAL_GPIO_Init+0x190>)
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000902:	9301      	str	r3, [sp, #4]
    ioposition = 0x01U << position;
 8000904:	f04f 0901 	mov.w	r9, #1
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000908:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800090a:	9d01      	ldr	r5, [sp, #4]
    ioposition = 0x01U << position;
 800090c:	fa09 f403 	lsl.w	r4, r9, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000910:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 8000912:	42ac      	cmp	r4, r5
 8000914:	f040 80a6 	bne.w	8000a64 <HAL_GPIO_Init+0x170>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000918:	684c      	ldr	r4, [r1, #4]
 800091a:	f024 0c10 	bic.w	ip, r4, #16
 800091e:	f10c 36ff 	add.w	r6, ip, #4294967295
 8000922:	2e01      	cmp	r6, #1
 8000924:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000928:	d812      	bhi.n	8000950 <HAL_GPIO_Init+0x5c>
        temp = GPIOx->OSPEEDR; 
 800092a:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800092c:	2603      	movs	r6, #3
 800092e:	fa06 f60e 	lsl.w	r6, r6, lr
 8000932:	ea27 0706 	bic.w	r7, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000936:	68ce      	ldr	r6, [r1, #12]
 8000938:	fa06 f60e 	lsl.w	r6, r6, lr
 800093c:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 800093e:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8000940:	6847      	ldr	r7, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000942:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000946:	ea27 0705 	bic.w	r7, r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800094a:	409e      	lsls	r6, r3
 800094c:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 800094e:	6046      	str	r6, [r0, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000950:	2603      	movs	r6, #3
      temp = GPIOx->PUPDR;
 8000952:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000954:	fa06 f60e 	lsl.w	r6, r6, lr
 8000958:	43f6      	mvns	r6, r6
 800095a:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800095e:	688f      	ldr	r7, [r1, #8]
 8000960:	fa07 f70e 	lsl.w	r7, r7, lr
 8000964:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000968:	f1bc 0f02 	cmp.w	ip, #2
      GPIOx->PUPDR = temp;
 800096c:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800096e:	d116      	bne.n	800099e <HAL_GPIO_Init+0xaa>
        temp = GPIOx->AFR[position >> 3U];
 8000970:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000974:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000978:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 800097c:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000980:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000984:	f04f 0c0f 	mov.w	ip, #15
 8000988:	fa0c fc0b 	lsl.w	ip, ip, fp
 800098c:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000990:	690f      	ldr	r7, [r1, #16]
 8000992:	fa07 f70b 	lsl.w	r7, r7, fp
 8000996:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3U] = temp;
 800099a:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 800099e:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80009a0:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80009a2:	f004 0703 	and.w	r7, r4, #3
 80009a6:	fa07 fe0e 	lsl.w	lr, r7, lr
 80009aa:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 80009ae:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009b0:	00e6      	lsls	r6, r4, #3
 80009b2:	d557      	bpl.n	8000a64 <HAL_GPIO_Init+0x170>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009b4:	f04f 0b00 	mov.w	fp, #0
 80009b8:	f8cd b00c 	str.w	fp, [sp, #12]
 80009bc:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009c0:	4e31      	ldr	r6, [pc, #196]	; (8000a88 <HAL_GPIO_Init+0x194>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009c2:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 80009c6:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 80009ca:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 80009ce:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 80009d2:	9703      	str	r7, [sp, #12]
 80009d4:	9f03      	ldr	r7, [sp, #12]
 80009d6:	f023 0703 	bic.w	r7, r3, #3
 80009da:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80009de:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80009e2:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80009e6:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80009ea:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80009ee:	f04f 0e0f 	mov.w	lr, #15
 80009f2:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009f6:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80009f8:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009fc:	d039      	beq.n	8000a72 <HAL_GPIO_Init+0x17e>
 80009fe:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000a02:	42b0      	cmp	r0, r6
 8000a04:	d037      	beq.n	8000a76 <HAL_GPIO_Init+0x182>
 8000a06:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000a0a:	42b0      	cmp	r0, r6
 8000a0c:	d035      	beq.n	8000a7a <HAL_GPIO_Init+0x186>
 8000a0e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000a12:	42b0      	cmp	r0, r6
 8000a14:	d033      	beq.n	8000a7e <HAL_GPIO_Init+0x18a>
 8000a16:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000a1a:	42b0      	cmp	r0, r6
 8000a1c:	bf14      	ite	ne
 8000a1e:	2607      	movne	r6, #7
 8000a20:	2604      	moveq	r6, #4
 8000a22:	fa06 f60c 	lsl.w	r6, r6, ip
 8000a26:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a2a:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8000a2c:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000a2e:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a30:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000a34:	bf0c      	ite	eq
 8000a36:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000a38:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 8000a3a:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 8000a3c:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a3e:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000a42:	bf0c      	ite	eq
 8000a44:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000a46:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 8000a48:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a4a:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a4c:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000a50:	bf0c      	ite	eq
 8000a52:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000a54:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 8000a56:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 8000a58:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a5a:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000a5c:	bf54      	ite	pl
 8000a5e:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 8000a60:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 8000a62:	60d6      	str	r6, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000a64:	3301      	adds	r3, #1
 8000a66:	2b10      	cmp	r3, #16
 8000a68:	f47f af4f 	bne.w	800090a <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000a6c:	b005      	add	sp, #20
 8000a6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a72:	465e      	mov	r6, fp
 8000a74:	e7d5      	b.n	8000a22 <HAL_GPIO_Init+0x12e>
 8000a76:	2601      	movs	r6, #1
 8000a78:	e7d3      	b.n	8000a22 <HAL_GPIO_Init+0x12e>
 8000a7a:	2602      	movs	r6, #2
 8000a7c:	e7d1      	b.n	8000a22 <HAL_GPIO_Init+0x12e>
 8000a7e:	2603      	movs	r6, #3
 8000a80:	e7cf      	b.n	8000a22 <HAL_GPIO_Init+0x12e>
 8000a82:	bf00      	nop
 8000a84:	40013c00 	.word	0x40013c00
 8000a88:	40020000 	.word	0x40020000
 8000a8c:	40023800 	.word	0x40023800

08000a90 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000a90:	b10a      	cbz	r2, 8000a96 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000a92:	6181      	str	r1, [r0, #24]
 8000a94:	4770      	bx	lr
 8000a96:	0409      	lsls	r1, r1, #16
 8000a98:	e7fb      	b.n	8000a92 <HAL_GPIO_WritePin+0x2>
	...

08000a9c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000a9c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000aa0:	4604      	mov	r4, r0
 8000aa2:	b908      	cbnz	r0, 8000aa8 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8000aa4:	2001      	movs	r0, #1
 8000aa6:	e03f      	b.n	8000b28 <HAL_RCC_OscConfig+0x8c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000aa8:	6803      	ldr	r3, [r0, #0]
 8000aaa:	07dd      	lsls	r5, r3, #31
 8000aac:	d410      	bmi.n	8000ad0 <HAL_RCC_OscConfig+0x34>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000aae:	6823      	ldr	r3, [r4, #0]
 8000ab0:	0798      	lsls	r0, r3, #30
 8000ab2:	d45a      	bmi.n	8000b6a <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ab4:	6823      	ldr	r3, [r4, #0]
 8000ab6:	071a      	lsls	r2, r3, #28
 8000ab8:	f100 809c 	bmi.w	8000bf4 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000abc:	6823      	ldr	r3, [r4, #0]
 8000abe:	075b      	lsls	r3, r3, #29
 8000ac0:	f100 80ba 	bmi.w	8000c38 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000ac4:	69a0      	ldr	r0, [r4, #24]
 8000ac6:	2800      	cmp	r0, #0
 8000ac8:	f040 811b 	bne.w	8000d02 <HAL_RCC_OscConfig+0x266>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8000acc:	2000      	movs	r0, #0
 8000ace:	e02b      	b.n	8000b28 <HAL_RCC_OscConfig+0x8c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000ad0:	4ba4      	ldr	r3, [pc, #656]	; (8000d64 <HAL_RCC_OscConfig+0x2c8>)
 8000ad2:	689a      	ldr	r2, [r3, #8]
 8000ad4:	f002 020c 	and.w	r2, r2, #12
 8000ad8:	2a04      	cmp	r2, #4
 8000ada:	d007      	beq.n	8000aec <HAL_RCC_OscConfig+0x50>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000adc:	689a      	ldr	r2, [r3, #8]
 8000ade:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000ae2:	2a08      	cmp	r2, #8
 8000ae4:	d10a      	bne.n	8000afc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000ae6:	685b      	ldr	r3, [r3, #4]
 8000ae8:	0259      	lsls	r1, r3, #9
 8000aea:	d507      	bpl.n	8000afc <HAL_RCC_OscConfig+0x60>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000aec:	4b9d      	ldr	r3, [pc, #628]	; (8000d64 <HAL_RCC_OscConfig+0x2c8>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	039a      	lsls	r2, r3, #14
 8000af2:	d5dc      	bpl.n	8000aae <HAL_RCC_OscConfig+0x12>
 8000af4:	6863      	ldr	r3, [r4, #4]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d1d9      	bne.n	8000aae <HAL_RCC_OscConfig+0x12>
 8000afa:	e7d3      	b.n	8000aa4 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000afc:	6863      	ldr	r3, [r4, #4]
 8000afe:	4d99      	ldr	r5, [pc, #612]	; (8000d64 <HAL_RCC_OscConfig+0x2c8>)
 8000b00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b04:	d113      	bne.n	8000b2e <HAL_RCC_OscConfig+0x92>
 8000b06:	682b      	ldr	r3, [r5, #0]
 8000b08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b0c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000b0e:	f7ff fd33 	bl	8000578 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b12:	4d94      	ldr	r5, [pc, #592]	; (8000d64 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8000b14:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b16:	682b      	ldr	r3, [r5, #0]
 8000b18:	039b      	lsls	r3, r3, #14
 8000b1a:	d4c8      	bmi.n	8000aae <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b1c:	f7ff fd2c 	bl	8000578 <HAL_GetTick>
 8000b20:	1b80      	subs	r0, r0, r6
 8000b22:	2864      	cmp	r0, #100	; 0x64
 8000b24:	d9f7      	bls.n	8000b16 <HAL_RCC_OscConfig+0x7a>
            return HAL_TIMEOUT;
 8000b26:	2003      	movs	r0, #3
}
 8000b28:	b002      	add	sp, #8
 8000b2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b2e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000b32:	d104      	bne.n	8000b3e <HAL_RCC_OscConfig+0xa2>
 8000b34:	682b      	ldr	r3, [r5, #0]
 8000b36:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b3a:	602b      	str	r3, [r5, #0]
 8000b3c:	e7e3      	b.n	8000b06 <HAL_RCC_OscConfig+0x6a>
 8000b3e:	682a      	ldr	r2, [r5, #0]
 8000b40:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000b44:	602a      	str	r2, [r5, #0]
 8000b46:	682a      	ldr	r2, [r5, #0]
 8000b48:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000b4c:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d1dd      	bne.n	8000b0e <HAL_RCC_OscConfig+0x72>
        tickstart = HAL_GetTick();
 8000b52:	f7ff fd11 	bl	8000578 <HAL_GetTick>
 8000b56:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b58:	682b      	ldr	r3, [r5, #0]
 8000b5a:	039f      	lsls	r7, r3, #14
 8000b5c:	d5a7      	bpl.n	8000aae <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b5e:	f7ff fd0b 	bl	8000578 <HAL_GetTick>
 8000b62:	1b80      	subs	r0, r0, r6
 8000b64:	2864      	cmp	r0, #100	; 0x64
 8000b66:	d9f7      	bls.n	8000b58 <HAL_RCC_OscConfig+0xbc>
 8000b68:	e7dd      	b.n	8000b26 <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000b6a:	4b7e      	ldr	r3, [pc, #504]	; (8000d64 <HAL_RCC_OscConfig+0x2c8>)
 8000b6c:	689a      	ldr	r2, [r3, #8]
 8000b6e:	f012 0f0c 	tst.w	r2, #12
 8000b72:	d007      	beq.n	8000b84 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000b74:	689a      	ldr	r2, [r3, #8]
 8000b76:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000b7a:	2a08      	cmp	r2, #8
 8000b7c:	d111      	bne.n	8000ba2 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000b7e:	685b      	ldr	r3, [r3, #4]
 8000b80:	025e      	lsls	r6, r3, #9
 8000b82:	d40e      	bmi.n	8000ba2 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b84:	4b77      	ldr	r3, [pc, #476]	; (8000d64 <HAL_RCC_OscConfig+0x2c8>)
 8000b86:	681a      	ldr	r2, [r3, #0]
 8000b88:	0795      	lsls	r5, r2, #30
 8000b8a:	d502      	bpl.n	8000b92 <HAL_RCC_OscConfig+0xf6>
 8000b8c:	68e2      	ldr	r2, [r4, #12]
 8000b8e:	2a01      	cmp	r2, #1
 8000b90:	d188      	bne.n	8000aa4 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b92:	681a      	ldr	r2, [r3, #0]
 8000b94:	6921      	ldr	r1, [r4, #16]
 8000b96:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000b9a:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8000b9e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ba0:	e788      	b.n	8000ab4 <HAL_RCC_OscConfig+0x18>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000ba2:	68e2      	ldr	r2, [r4, #12]
 8000ba4:	4b70      	ldr	r3, [pc, #448]	; (8000d68 <HAL_RCC_OscConfig+0x2cc>)
 8000ba6:	b1b2      	cbz	r2, 8000bd6 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8000ba8:	2201      	movs	r2, #1
 8000baa:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000bac:	f7ff fce4 	bl	8000578 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bb0:	4d6c      	ldr	r5, [pc, #432]	; (8000d64 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8000bb2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bb4:	682b      	ldr	r3, [r5, #0]
 8000bb6:	0798      	lsls	r0, r3, #30
 8000bb8:	d507      	bpl.n	8000bca <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000bba:	682b      	ldr	r3, [r5, #0]
 8000bbc:	6922      	ldr	r2, [r4, #16]
 8000bbe:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000bc2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000bc6:	602b      	str	r3, [r5, #0]
 8000bc8:	e774      	b.n	8000ab4 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000bca:	f7ff fcd5 	bl	8000578 <HAL_GetTick>
 8000bce:	1b80      	subs	r0, r0, r6
 8000bd0:	2802      	cmp	r0, #2
 8000bd2:	d9ef      	bls.n	8000bb4 <HAL_RCC_OscConfig+0x118>
 8000bd4:	e7a7      	b.n	8000b26 <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_HSI_DISABLE();
 8000bd6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000bd8:	f7ff fcce 	bl	8000578 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000bdc:	4d61      	ldr	r5, [pc, #388]	; (8000d64 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8000bde:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000be0:	682b      	ldr	r3, [r5, #0]
 8000be2:	0799      	lsls	r1, r3, #30
 8000be4:	f57f af66 	bpl.w	8000ab4 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000be8:	f7ff fcc6 	bl	8000578 <HAL_GetTick>
 8000bec:	1b80      	subs	r0, r0, r6
 8000bee:	2802      	cmp	r0, #2
 8000bf0:	d9f6      	bls.n	8000be0 <HAL_RCC_OscConfig+0x144>
 8000bf2:	e798      	b.n	8000b26 <HAL_RCC_OscConfig+0x8a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000bf4:	6962      	ldr	r2, [r4, #20]
 8000bf6:	4b5d      	ldr	r3, [pc, #372]	; (8000d6c <HAL_RCC_OscConfig+0x2d0>)
 8000bf8:	b17a      	cbz	r2, 8000c1a <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000bfe:	f7ff fcbb 	bl	8000578 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c02:	4d58      	ldr	r5, [pc, #352]	; (8000d64 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8000c04:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c06:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000c08:	079f      	lsls	r7, r3, #30
 8000c0a:	f53f af57 	bmi.w	8000abc <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000c0e:	f7ff fcb3 	bl	8000578 <HAL_GetTick>
 8000c12:	1b80      	subs	r0, r0, r6
 8000c14:	2802      	cmp	r0, #2
 8000c16:	d9f6      	bls.n	8000c06 <HAL_RCC_OscConfig+0x16a>
 8000c18:	e785      	b.n	8000b26 <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_LSI_DISABLE();
 8000c1a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000c1c:	f7ff fcac 	bl	8000578 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c20:	4d50      	ldr	r5, [pc, #320]	; (8000d64 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8000c22:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c24:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000c26:	0798      	lsls	r0, r3, #30
 8000c28:	f57f af48 	bpl.w	8000abc <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000c2c:	f7ff fca4 	bl	8000578 <HAL_GetTick>
 8000c30:	1b80      	subs	r0, r0, r6
 8000c32:	2802      	cmp	r0, #2
 8000c34:	d9f6      	bls.n	8000c24 <HAL_RCC_OscConfig+0x188>
 8000c36:	e776      	b.n	8000b26 <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c38:	4b4a      	ldr	r3, [pc, #296]	; (8000d64 <HAL_RCC_OscConfig+0x2c8>)
 8000c3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c3c:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8000c40:	d128      	bne.n	8000c94 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000c42:	9201      	str	r2, [sp, #4]
 8000c44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c46:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000c4a:	641a      	str	r2, [r3, #64]	; 0x40
 8000c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c52:	9301      	str	r3, [sp, #4]
 8000c54:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000c56:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c58:	4d45      	ldr	r5, [pc, #276]	; (8000d70 <HAL_RCC_OscConfig+0x2d4>)
 8000c5a:	682b      	ldr	r3, [r5, #0]
 8000c5c:	05d9      	lsls	r1, r3, #23
 8000c5e:	d51b      	bpl.n	8000c98 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c60:	68a3      	ldr	r3, [r4, #8]
 8000c62:	4d40      	ldr	r5, [pc, #256]	; (8000d64 <HAL_RCC_OscConfig+0x2c8>)
 8000c64:	2b01      	cmp	r3, #1
 8000c66:	d127      	bne.n	8000cb8 <HAL_RCC_OscConfig+0x21c>
 8000c68:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000c6a:	f043 0301 	orr.w	r3, r3, #1
 8000c6e:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000c70:	f7ff fc82 	bl	8000578 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c74:	4d3b      	ldr	r5, [pc, #236]	; (8000d64 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8000c76:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000c78:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c7c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000c7e:	079b      	lsls	r3, r3, #30
 8000c80:	d539      	bpl.n	8000cf6 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f43f af1e 	beq.w	8000ac4 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000c88:	4a36      	ldr	r2, [pc, #216]	; (8000d64 <HAL_RCC_OscConfig+0x2c8>)
 8000c8a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000c8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000c90:	6413      	str	r3, [r2, #64]	; 0x40
 8000c92:	e717      	b.n	8000ac4 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8000c94:	2600      	movs	r6, #0
 8000c96:	e7df      	b.n	8000c58 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000c98:	682b      	ldr	r3, [r5, #0]
 8000c9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c9e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000ca0:	f7ff fc6a 	bl	8000578 <HAL_GetTick>
 8000ca4:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ca6:	682b      	ldr	r3, [r5, #0]
 8000ca8:	05da      	lsls	r2, r3, #23
 8000caa:	d4d9      	bmi.n	8000c60 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000cac:	f7ff fc64 	bl	8000578 <HAL_GetTick>
 8000cb0:	1bc0      	subs	r0, r0, r7
 8000cb2:	2802      	cmp	r0, #2
 8000cb4:	d9f7      	bls.n	8000ca6 <HAL_RCC_OscConfig+0x20a>
 8000cb6:	e736      	b.n	8000b26 <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000cb8:	2b05      	cmp	r3, #5
 8000cba:	d104      	bne.n	8000cc6 <HAL_RCC_OscConfig+0x22a>
 8000cbc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000cbe:	f043 0304 	orr.w	r3, r3, #4
 8000cc2:	672b      	str	r3, [r5, #112]	; 0x70
 8000cc4:	e7d0      	b.n	8000c68 <HAL_RCC_OscConfig+0x1cc>
 8000cc6:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000cc8:	f022 0201 	bic.w	r2, r2, #1
 8000ccc:	672a      	str	r2, [r5, #112]	; 0x70
 8000cce:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000cd0:	f022 0204 	bic.w	r2, r2, #4
 8000cd4:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d1ca      	bne.n	8000c70 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8000cda:	f7ff fc4d 	bl	8000578 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000cde:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000ce2:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ce4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000ce6:	0798      	lsls	r0, r3, #30
 8000ce8:	d5cb      	bpl.n	8000c82 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000cea:	f7ff fc45 	bl	8000578 <HAL_GetTick>
 8000cee:	1bc0      	subs	r0, r0, r7
 8000cf0:	4540      	cmp	r0, r8
 8000cf2:	d9f7      	bls.n	8000ce4 <HAL_RCC_OscConfig+0x248>
 8000cf4:	e717      	b.n	8000b26 <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000cf6:	f7ff fc3f 	bl	8000578 <HAL_GetTick>
 8000cfa:	1bc0      	subs	r0, r0, r7
 8000cfc:	4540      	cmp	r0, r8
 8000cfe:	d9bd      	bls.n	8000c7c <HAL_RCC_OscConfig+0x1e0>
 8000d00:	e711      	b.n	8000b26 <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000d02:	4d18      	ldr	r5, [pc, #96]	; (8000d64 <HAL_RCC_OscConfig+0x2c8>)
 8000d04:	68ab      	ldr	r3, [r5, #8]
 8000d06:	f003 030c 	and.w	r3, r3, #12
 8000d0a:	2b08      	cmp	r3, #8
 8000d0c:	d047      	beq.n	8000d9e <HAL_RCC_OscConfig+0x302>
 8000d0e:	4e19      	ldr	r6, [pc, #100]	; (8000d74 <HAL_RCC_OscConfig+0x2d8>)
 8000d10:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000d12:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8000d14:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000d16:	d135      	bne.n	8000d84 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8000d18:	f7ff fc2e 	bl	8000578 <HAL_GetTick>
 8000d1c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000d1e:	682b      	ldr	r3, [r5, #0]
 8000d20:	0199      	lsls	r1, r3, #6
 8000d22:	d429      	bmi.n	8000d78 <HAL_RCC_OscConfig+0x2dc>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000d24:	6a22      	ldr	r2, [r4, #32]
 8000d26:	69e3      	ldr	r3, [r4, #28]
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000d2c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000d30:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000d32:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000d36:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d38:	4c0a      	ldr	r4, [pc, #40]	; (8000d64 <HAL_RCC_OscConfig+0x2c8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000d3a:	0852      	lsrs	r2, r2, #1
 8000d3c:	3a01      	subs	r2, #1
 8000d3e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d42:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000d44:	2301      	movs	r3, #1
 8000d46:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000d48:	f7ff fc16 	bl	8000578 <HAL_GetTick>
 8000d4c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d4e:	6823      	ldr	r3, [r4, #0]
 8000d50:	019a      	lsls	r2, r3, #6
 8000d52:	f53f aebb 	bmi.w	8000acc <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d56:	f7ff fc0f 	bl	8000578 <HAL_GetTick>
 8000d5a:	1b40      	subs	r0, r0, r5
 8000d5c:	2802      	cmp	r0, #2
 8000d5e:	d9f6      	bls.n	8000d4e <HAL_RCC_OscConfig+0x2b2>
 8000d60:	e6e1      	b.n	8000b26 <HAL_RCC_OscConfig+0x8a>
 8000d62:	bf00      	nop
 8000d64:	40023800 	.word	0x40023800
 8000d68:	42470000 	.word	0x42470000
 8000d6c:	42470e80 	.word	0x42470e80
 8000d70:	40007000 	.word	0x40007000
 8000d74:	42470060 	.word	0x42470060
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d78:	f7ff fbfe 	bl	8000578 <HAL_GetTick>
 8000d7c:	1bc0      	subs	r0, r0, r7
 8000d7e:	2802      	cmp	r0, #2
 8000d80:	d9cd      	bls.n	8000d1e <HAL_RCC_OscConfig+0x282>
 8000d82:	e6d0      	b.n	8000b26 <HAL_RCC_OscConfig+0x8a>
        tickstart = HAL_GetTick();
 8000d84:	f7ff fbf8 	bl	8000578 <HAL_GetTick>
 8000d88:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000d8a:	682b      	ldr	r3, [r5, #0]
 8000d8c:	019b      	lsls	r3, r3, #6
 8000d8e:	f57f ae9d 	bpl.w	8000acc <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d92:	f7ff fbf1 	bl	8000578 <HAL_GetTick>
 8000d96:	1b00      	subs	r0, r0, r4
 8000d98:	2802      	cmp	r0, #2
 8000d9a:	d9f6      	bls.n	8000d8a <HAL_RCC_OscConfig+0x2ee>
 8000d9c:	e6c3      	b.n	8000b26 <HAL_RCC_OscConfig+0x8a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000d9e:	2801      	cmp	r0, #1
 8000da0:	f43f aec2 	beq.w	8000b28 <HAL_RCC_OscConfig+0x8c>
        pll_config = RCC->PLLCFGR;
 8000da4:	6868      	ldr	r0, [r5, #4]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000da6:	69e3      	ldr	r3, [r4, #28]
 8000da8:	f400 0280 	and.w	r2, r0, #4194304	; 0x400000
 8000dac:	429a      	cmp	r2, r3
 8000dae:	f47f ae79 	bne.w	8000aa4 <HAL_RCC_OscConfig+0x8>
 8000db2:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000db4:	f000 033f 	and.w	r3, r0, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000db8:	4293      	cmp	r3, r2
 8000dba:	f47f ae73 	bne.w	8000aa4 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000dbe:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000dc0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000dc4:	4003      	ands	r3, r0
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	f47f ae6c 	bne.w	8000aa4 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8000dcc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000dce:	f400 3340 	and.w	r3, r0, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	f47f ae66 	bne.w	8000aa4 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000dd8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8000dda:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
    return HAL_ERROR;
 8000dde:	1ac0      	subs	r0, r0, r3
 8000de0:	bf18      	it	ne
 8000de2:	2001      	movne	r0, #1
 8000de4:	e6a0      	b.n	8000b28 <HAL_RCC_OscConfig+0x8c>
 8000de6:	bf00      	nop

08000de8 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000de8:	4913      	ldr	r1, [pc, #76]	; (8000e38 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000dea:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000dec:	688b      	ldr	r3, [r1, #8]
 8000dee:	f003 030c 	and.w	r3, r3, #12
 8000df2:	2b04      	cmp	r3, #4
 8000df4:	d003      	beq.n	8000dfe <HAL_RCC_GetSysClockFreq+0x16>
 8000df6:	2b08      	cmp	r3, #8
 8000df8:	d003      	beq.n	8000e02 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000dfa:	4810      	ldr	r0, [pc, #64]	; (8000e3c <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000dfc:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8000dfe:	4810      	ldr	r0, [pc, #64]	; (8000e40 <HAL_RCC_GetSysClockFreq+0x58>)
 8000e00:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000e02:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000e04:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000e06:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000e08:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000e0c:	bf14      	ite	ne
 8000e0e:	480c      	ldrne	r0, [pc, #48]	; (8000e40 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000e10:	480a      	ldreq	r0, [pc, #40]	; (8000e3c <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000e12:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000e16:	bf18      	it	ne
 8000e18:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000e1a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000e1e:	fba1 0100 	umull	r0, r1, r1, r0
 8000e22:	f7ff f9d7 	bl	80001d4 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000e26:	4b04      	ldr	r3, [pc, #16]	; (8000e38 <HAL_RCC_GetSysClockFreq+0x50>)
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000e2e:	3301      	adds	r3, #1
 8000e30:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8000e32:	fbb0 f0f3 	udiv	r0, r0, r3
 8000e36:	bd08      	pop	{r3, pc}
 8000e38:	40023800 	.word	0x40023800
 8000e3c:	00f42400 	.word	0x00f42400
 8000e40:	007a1200 	.word	0x007a1200

08000e44 <HAL_RCC_ClockConfig>:
{
 8000e44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e48:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000e4a:	4604      	mov	r4, r0
 8000e4c:	b910      	cbnz	r0, 8000e54 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000e4e:	2001      	movs	r0, #1
 8000e50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000e54:	4b44      	ldr	r3, [pc, #272]	; (8000f68 <HAL_RCC_ClockConfig+0x124>)
 8000e56:	681a      	ldr	r2, [r3, #0]
 8000e58:	f002 020f 	and.w	r2, r2, #15
 8000e5c:	428a      	cmp	r2, r1
 8000e5e:	d329      	bcc.n	8000eb4 <HAL_RCC_ClockConfig+0x70>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000e60:	6821      	ldr	r1, [r4, #0]
 8000e62:	078f      	lsls	r7, r1, #30
 8000e64:	d42e      	bmi.n	8000ec4 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000e66:	07c8      	lsls	r0, r1, #31
 8000e68:	d441      	bmi.n	8000eee <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000e6a:	4b3f      	ldr	r3, [pc, #252]	; (8000f68 <HAL_RCC_ClockConfig+0x124>)
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	f002 020f 	and.w	r2, r2, #15
 8000e72:	4295      	cmp	r5, r2
 8000e74:	d367      	bcc.n	8000f46 <HAL_RCC_ClockConfig+0x102>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000e76:	6822      	ldr	r2, [r4, #0]
 8000e78:	0751      	lsls	r1, r2, #29
 8000e7a:	d46d      	bmi.n	8000f58 <HAL_RCC_ClockConfig+0x114>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000e7c:	0713      	lsls	r3, r2, #28
 8000e7e:	d507      	bpl.n	8000e90 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000e80:	4a3a      	ldr	r2, [pc, #232]	; (8000f6c <HAL_RCC_ClockConfig+0x128>)
 8000e82:	6921      	ldr	r1, [r4, #16]
 8000e84:	6893      	ldr	r3, [r2, #8]
 8000e86:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000e8a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000e8e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000e90:	f7ff ffaa 	bl	8000de8 <HAL_RCC_GetSysClockFreq>
 8000e94:	4b35      	ldr	r3, [pc, #212]	; (8000f6c <HAL_RCC_ClockConfig+0x128>)
 8000e96:	4a36      	ldr	r2, [pc, #216]	; (8000f70 <HAL_RCC_ClockConfig+0x12c>)
 8000e98:	689b      	ldr	r3, [r3, #8]
 8000e9a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000e9e:	5cd3      	ldrb	r3, [r2, r3]
 8000ea0:	40d8      	lsrs	r0, r3
 8000ea2:	4b34      	ldr	r3, [pc, #208]	; (8000f74 <HAL_RCC_ClockConfig+0x130>)
 8000ea4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8000ea6:	4b34      	ldr	r3, [pc, #208]	; (8000f78 <HAL_RCC_ClockConfig+0x134>)
 8000ea8:	6818      	ldr	r0, [r3, #0]
 8000eaa:	f7ff fb1b 	bl	80004e4 <HAL_InitTick>
  return HAL_OK;
 8000eae:	2000      	movs	r0, #0
 8000eb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000eb4:	b2ca      	uxtb	r2, r1
 8000eb6:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f003 030f 	and.w	r3, r3, #15
 8000ebe:	4299      	cmp	r1, r3
 8000ec0:	d1c5      	bne.n	8000e4e <HAL_RCC_ClockConfig+0xa>
 8000ec2:	e7cd      	b.n	8000e60 <HAL_RCC_ClockConfig+0x1c>
 8000ec4:	4b29      	ldr	r3, [pc, #164]	; (8000f6c <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ec6:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000eca:	bf1e      	ittt	ne
 8000ecc:	689a      	ldrne	r2, [r3, #8]
 8000ece:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8000ed2:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000ed4:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000ed6:	bf42      	ittt	mi
 8000ed8:	689a      	ldrmi	r2, [r3, #8]
 8000eda:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8000ede:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000ee0:	689a      	ldr	r2, [r3, #8]
 8000ee2:	68a0      	ldr	r0, [r4, #8]
 8000ee4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000ee8:	4302      	orrs	r2, r0
 8000eea:	609a      	str	r2, [r3, #8]
 8000eec:	e7bb      	b.n	8000e66 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000eee:	6862      	ldr	r2, [r4, #4]
 8000ef0:	4b1e      	ldr	r3, [pc, #120]	; (8000f6c <HAL_RCC_ClockConfig+0x128>)
 8000ef2:	2a01      	cmp	r2, #1
 8000ef4:	d11d      	bne.n	8000f32 <HAL_RCC_ClockConfig+0xee>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000efc:	d0a7      	beq.n	8000e4e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000efe:	4e1b      	ldr	r6, [pc, #108]	; (8000f6c <HAL_RCC_ClockConfig+0x128>)
 8000f00:	68b3      	ldr	r3, [r6, #8]
 8000f02:	f023 0303 	bic.w	r3, r3, #3
 8000f06:	4313      	orrs	r3, r2
 8000f08:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000f0a:	f7ff fb35 	bl	8000578 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f0e:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000f12:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000f14:	68b3      	ldr	r3, [r6, #8]
 8000f16:	6862      	ldr	r2, [r4, #4]
 8000f18:	f003 030c 	and.w	r3, r3, #12
 8000f1c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000f20:	d0a3      	beq.n	8000e6a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f22:	f7ff fb29 	bl	8000578 <HAL_GetTick>
 8000f26:	1bc0      	subs	r0, r0, r7
 8000f28:	4540      	cmp	r0, r8
 8000f2a:	d9f3      	bls.n	8000f14 <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 8000f2c:	2003      	movs	r0, #3
}
 8000f2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000f32:	1e91      	subs	r1, r2, #2
 8000f34:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f36:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000f38:	d802      	bhi.n	8000f40 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f3a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000f3e:	e7dd      	b.n	8000efc <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f40:	f013 0f02 	tst.w	r3, #2
 8000f44:	e7da      	b.n	8000efc <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f46:	b2ea      	uxtb	r2, r5
 8000f48:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f003 030f 	and.w	r3, r3, #15
 8000f50:	429d      	cmp	r5, r3
 8000f52:	f47f af7c 	bne.w	8000e4e <HAL_RCC_ClockConfig+0xa>
 8000f56:	e78e      	b.n	8000e76 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000f58:	4904      	ldr	r1, [pc, #16]	; (8000f6c <HAL_RCC_ClockConfig+0x128>)
 8000f5a:	68e0      	ldr	r0, [r4, #12]
 8000f5c:	688b      	ldr	r3, [r1, #8]
 8000f5e:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000f62:	4303      	orrs	r3, r0
 8000f64:	608b      	str	r3, [r1, #8]
 8000f66:	e789      	b.n	8000e7c <HAL_RCC_ClockConfig+0x38>
 8000f68:	40023c00 	.word	0x40023c00
 8000f6c:	40023800 	.word	0x40023800
 8000f70:	08001670 	.word	0x08001670
 8000f74:	20000008 	.word	0x20000008
 8000f78:	20000004 	.word	0x20000004

08000f7c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000f7c:	4b04      	ldr	r3, [pc, #16]	; (8000f90 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000f7e:	4a05      	ldr	r2, [pc, #20]	; (8000f94 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000f80:	689b      	ldr	r3, [r3, #8]
 8000f82:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8000f86:	5cd3      	ldrb	r3, [r2, r3]
 8000f88:	4a03      	ldr	r2, [pc, #12]	; (8000f98 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000f8a:	6810      	ldr	r0, [r2, #0]
}
 8000f8c:	40d8      	lsrs	r0, r3
 8000f8e:	4770      	bx	lr
 8000f90:	40023800 	.word	0x40023800
 8000f94:	08001680 	.word	0x08001680
 8000f98:	20000008 	.word	0x20000008

08000f9c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000f9c:	4b04      	ldr	r3, [pc, #16]	; (8000fb0 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000f9e:	4a05      	ldr	r2, [pc, #20]	; (8000fb4 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000fa0:	689b      	ldr	r3, [r3, #8]
 8000fa2:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8000fa6:	5cd3      	ldrb	r3, [r2, r3]
 8000fa8:	4a03      	ldr	r2, [pc, #12]	; (8000fb8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000faa:	6810      	ldr	r0, [r2, #0]
}
 8000fac:	40d8      	lsrs	r0, r3
 8000fae:	4770      	bx	lr
 8000fb0:	40023800 	.word	0x40023800
 8000fb4:	08001680 	.word	0x08001680
 8000fb8:	20000008 	.word	0x20000008

08000fbc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8000fbc:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8000fbe:	4604      	mov	r4, r0
 8000fc0:	2800      	cmp	r0, #0
 8000fc2:	d036      	beq.n	8001032 <HAL_SPI_Init+0x76>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8000fc8:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8000fcc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000fd0:	b91b      	cbnz	r3, 8000fda <HAL_SPI_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8000fd2:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8000fd6:	f000 f9fd 	bl	80013d4 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8000fda:	6821      	ldr	r1, [r4, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000fdc:	68a0      	ldr	r0, [r4, #8]
 8000fde:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8000fe6:	680b      	ldr	r3, [r1, #0]
 8000fe8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000fec:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000fee:	6863      	ldr	r3, [r4, #4]
 8000ff0:	4303      	orrs	r3, r0
 8000ff2:	68e0      	ldr	r0, [r4, #12]
 8000ff4:	4303      	orrs	r3, r0
 8000ff6:	6920      	ldr	r0, [r4, #16]
 8000ff8:	4303      	orrs	r3, r0
 8000ffa:	6960      	ldr	r0, [r4, #20]
 8000ffc:	4303      	orrs	r3, r0
 8000ffe:	69e0      	ldr	r0, [r4, #28]
 8001000:	4303      	orrs	r3, r0
 8001002:	6a20      	ldr	r0, [r4, #32]
 8001004:	4303      	orrs	r3, r0
 8001006:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001008:	4303      	orrs	r3, r0
 800100a:	f402 7000 	and.w	r0, r2, #512	; 0x200
 800100e:	4303      	orrs	r3, r0
 8001010:	600b      	str	r3, [r1, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001012:	0c12      	lsrs	r2, r2, #16
 8001014:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001016:	f002 0204 	and.w	r2, r2, #4
 800101a:	431a      	orrs	r2, r3
 800101c:	604a      	str	r2, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800101e:	69cb      	ldr	r3, [r1, #28]
 8001020:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001024:	61cb      	str	r3, [r1, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001026:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8001028:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800102a:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800102c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
 8001030:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001032:	2001      	movs	r0, #1
}
 8001034:	bd10      	pop	{r4, pc}
	...

08001038 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001038:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800103a:	6803      	ldr	r3, [r0, #0]
 800103c:	68c1      	ldr	r1, [r0, #12]
 800103e:	691a      	ldr	r2, [r3, #16]
{
 8001040:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001042:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001046:	430a      	orrs	r2, r1
 8001048:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800104a:	6925      	ldr	r5, [r4, #16]
 800104c:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1,
 800104e:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001050:	69c0      	ldr	r0, [r0, #28]
 8001052:	432a      	orrs	r2, r5
 8001054:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8001056:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800105a:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 800105c:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001060:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8001062:	430a      	orrs	r2, r1
 8001064:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001066:	695a      	ldr	r2, [r3, #20]
 8001068:	69a1      	ldr	r1, [r4, #24]
 800106a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800106e:	430a      	orrs	r2, r1

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001070:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001074:	615a      	str	r2, [r3, #20]
 8001076:	4a25      	ldr	r2, [pc, #148]	; (800110c <UART_SetConfig+0xd4>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001078:	d129      	bne.n	80010ce <UART_SetConfig+0x96>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800107a:	4293      	cmp	r3, r2
 800107c:	d003      	beq.n	8001086 <UART_SetConfig+0x4e>
 800107e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001082:	4293      	cmp	r3, r2
 8001084:	d120      	bne.n	80010c8 <UART_SetConfig+0x90>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001086:	f7ff ff89 	bl	8000f9c <HAL_RCC_GetPCLK2Freq>
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800108a:	6862      	ldr	r2, [r4, #4]
 800108c:	6825      	ldr	r5, [r4, #0]
 800108e:	1892      	adds	r2, r2, r2
 8001090:	f04f 0300 	mov.w	r3, #0
 8001094:	f04f 0119 	mov.w	r1, #25
 8001098:	415b      	adcs	r3, r3
 800109a:	fba0 0101 	umull	r0, r1, r0, r1
 800109e:	f7ff f899 	bl	80001d4 <__aeabi_uldivmod>
 80010a2:	2164      	movs	r1, #100	; 0x64
 80010a4:	fbb0 f4f1 	udiv	r4, r0, r1
 80010a8:	fb01 0314 	mls	r3, r1, r4, r0
 80010ac:	00db      	lsls	r3, r3, #3
 80010ae:	3332      	adds	r3, #50	; 0x32
 80010b0:	fbb3 f3f1 	udiv	r3, r3, r1
 80010b4:	f003 0207 	and.w	r2, r3, #7
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 80010be:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80010c2:	4413      	add	r3, r2
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80010c4:	60ab      	str	r3, [r5, #8]
 80010c6:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 80010c8:	f7ff ff58 	bl	8000f7c <HAL_RCC_GetPCLK1Freq>
 80010cc:	e7dd      	b.n	800108a <UART_SetConfig+0x52>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d002      	beq.n	80010d8 <UART_SetConfig+0xa0>
 80010d2:	4a0f      	ldr	r2, [pc, #60]	; (8001110 <UART_SetConfig+0xd8>)
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d116      	bne.n	8001106 <UART_SetConfig+0xce>
      pclk = HAL_RCC_GetPCLK2Freq();
 80010d8:	f7ff ff60 	bl	8000f9c <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80010dc:	6863      	ldr	r3, [r4, #4]
 80010de:	6825      	ldr	r5, [r4, #0]
 80010e0:	2119      	movs	r1, #25
 80010e2:	009a      	lsls	r2, r3, #2
 80010e4:	fba0 0101 	umull	r0, r1, r0, r1
 80010e8:	0f9b      	lsrs	r3, r3, #30
 80010ea:	f7ff f873 	bl	80001d4 <__aeabi_uldivmod>
 80010ee:	2264      	movs	r2, #100	; 0x64
 80010f0:	fbb0 f1f2 	udiv	r1, r0, r2
 80010f4:	fb02 0311 	mls	r3, r2, r1, r0
 80010f8:	011b      	lsls	r3, r3, #4
 80010fa:	3332      	adds	r3, #50	; 0x32
 80010fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8001100:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8001104:	e7de      	b.n	80010c4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK1Freq();
 8001106:	f7ff ff39 	bl	8000f7c <HAL_RCC_GetPCLK1Freq>
 800110a:	e7e7      	b.n	80010dc <UART_SetConfig+0xa4>
 800110c:	40011000 	.word	0x40011000
 8001110:	40011400 	.word	0x40011400

08001114 <HAL_UART_Init>:
{
 8001114:	b510      	push	{r4, lr}
  if (huart == NULL)
 8001116:	4604      	mov	r4, r0
 8001118:	b340      	cbz	r0, 800116c <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 800111a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800111e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001122:	b91b      	cbnz	r3, 800112c <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001124:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001128:	f000 f9a2 	bl	8001470 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 800112c:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800112e:	2324      	movs	r3, #36	; 0x24
 8001130:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001134:	68d3      	ldr	r3, [r2, #12]
 8001136:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800113a:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800113c:	4620      	mov	r0, r4
 800113e:	f7ff ff7b 	bl	8001038 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001142:	6823      	ldr	r3, [r4, #0]
 8001144:	691a      	ldr	r2, [r3, #16]
 8001146:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800114a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800114c:	695a      	ldr	r2, [r3, #20]
 800114e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001152:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001154:	68da      	ldr	r2, [r3, #12]
 8001156:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800115a:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800115c:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800115e:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001160:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001162:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001166:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 800116a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800116c:	2001      	movs	r0, #1
}
 800116e:	bd10      	pop	{r4, pc}

08001170 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001170:	b530      	push	{r4, r5, lr}
 8001172:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001174:	2230      	movs	r2, #48	; 0x30
 8001176:	2100      	movs	r1, #0
 8001178:	a808      	add	r0, sp, #32
 800117a:	f000 fa61 	bl	8001640 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800117e:	2100      	movs	r1, #0
 8001180:	2214      	movs	r2, #20
 8001182:	a803      	add	r0, sp, #12
 8001184:	f000 fa5c 	bl	8001640 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001188:	2500      	movs	r5, #0
 800118a:	4b1d      	ldr	r3, [pc, #116]	; (8001200 <SystemClock_Config+0x90>)
 800118c:	9501      	str	r5, [sp, #4]
 800118e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001190:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001194:	641a      	str	r2, [r3, #64]	; 0x40
 8001196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001198:	4a1a      	ldr	r2, [pc, #104]	; (8001204 <SystemClock_Config+0x94>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800119a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800119e:	9301      	str	r3, [sp, #4]
 80011a0:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80011a2:	9502      	str	r5, [sp, #8]
 80011a4:	6813      	ldr	r3, [r2, #0]
 80011a6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80011aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011ae:	6013      	str	r3, [r2, #0]
 80011b0:	6813      	ldr	r3, [r2, #0]
 80011b2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011b6:	9302      	str	r3, [sp, #8]
 80011b8:	9b02      	ldr	r3, [sp, #8]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011ba:	2301      	movs	r3, #1
 80011bc:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011c2:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011c4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80011c8:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80011ca:	2304      	movs	r3, #4
 80011cc:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 80011ce:	2350      	movs	r3, #80	; 0x50
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011d0:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLN = 80;
 80011d2:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011d4:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80011d6:	2307      	movs	r3, #7
 80011d8:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011da:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011dc:	9412      	str	r4, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011de:	f7ff fc5d 	bl	8000a9c <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011e2:	230f      	movs	r3, #15
 80011e4:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011e6:	4621      	mov	r1, r4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011ec:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011ee:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011f0:	9505      	str	r5, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011f2:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011f4:	9507      	str	r5, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011f6:	f7ff fe25 	bl	8000e44 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 80011fa:	b015      	add	sp, #84	; 0x54
 80011fc:	bd30      	pop	{r4, r5, pc}
 80011fe:	bf00      	nop
 8001200:	40023800 	.word	0x40023800
 8001204:	40007000 	.word	0x40007000

08001208 <main>:
{
 8001208:	b500      	push	{lr}
 800120a:	b08b      	sub	sp, #44	; 0x2c
  HAL_Init();
 800120c:	f7ff f98e 	bl	800052c <HAL_Init>
  SystemClock_Config();
 8001210:	f7ff ffae 	bl	8001170 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001214:	2214      	movs	r2, #20

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001216:	2400      	movs	r4, #0
 8001218:	4d52      	ldr	r5, [pc, #328]	; (8001364 <main+0x15c>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121a:	2100      	movs	r1, #0
 800121c:	eb0d 0002 	add.w	r0, sp, r2
 8001220:	f000 fa0e 	bl	8001640 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001224:	9401      	str	r4, [sp, #4]
 8001226:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8001228:	484f      	ldr	r0, [pc, #316]	; (8001368 <main+0x160>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800122a:	f043 0304 	orr.w	r3, r3, #4
 800122e:	632b      	str	r3, [r5, #48]	; 0x30
 8001230:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001232:	f003 0304 	and.w	r3, r3, #4
 8001236:	9301      	str	r3, [sp, #4]
 8001238:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800123a:	9402      	str	r4, [sp, #8]
 800123c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800123e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001242:	632b      	str	r3, [r5, #48]	; 0x30
 8001244:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001246:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800124a:	9302      	str	r3, [sp, #8]
 800124c:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800124e:	9403      	str	r4, [sp, #12]
 8001250:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001252:	f043 0301 	orr.w	r3, r3, #1
 8001256:	632b      	str	r3, [r5, #48]	; 0x30
 8001258:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800125a:	f003 0301 	and.w	r3, r3, #1
 800125e:	9303      	str	r3, [sp, #12]
 8001260:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001262:	9404      	str	r4, [sp, #16]
 8001264:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001266:	f043 0302 	orr.w	r3, r3, #2
 800126a:	632b      	str	r3, [r5, #48]	; 0x30
 800126c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800126e:	f003 0302 	and.w	r3, r3, #2
 8001272:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8001274:	4622      	mov	r2, r4
 8001276:	2103      	movs	r1, #3
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001278:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 800127a:	f7ff fc09 	bl	8000a90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800127e:	4622      	mov	r2, r4
 8001280:	2120      	movs	r1, #32
 8001282:	483a      	ldr	r0, [pc, #232]	; (800136c <main+0x164>)
 8001284:	f7ff fc04 	bl	8000a90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001288:	4622      	mov	r2, r4
 800128a:	2101      	movs	r1, #1
 800128c:	4838      	ldr	r0, [pc, #224]	; (8001370 <main+0x168>)
 800128e:	f7ff fbff 	bl	8000a90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001292:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001296:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001298:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800129a:	4b36      	ldr	r3, [pc, #216]	; (8001374 <main+0x16c>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800129c:	4832      	ldr	r0, [pc, #200]	; (8001368 <main+0x160>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800129e:	9306      	str	r3, [sp, #24]

  /*Configure GPIO pins : PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a0:	2601      	movs	r6, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a2:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012a4:	f7ff fb26 	bl	80008f4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80012a8:	2303      	movs	r3, #3
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012aa:	a905      	add	r1, sp, #20
 80012ac:	482e      	ldr	r0, [pc, #184]	; (8001368 <main+0x160>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80012ae:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b0:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b2:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b4:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012b6:	f7ff fb1d 	bl	80008f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80012ba:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80012bc:	a905      	add	r1, sp, #20
 80012be:	482b      	ldr	r0, [pc, #172]	; (800136c <main+0x164>)
  GPIO_InitStruct.Pin = LD2_Pin;
 80012c0:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012c2:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c4:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c6:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80012c8:	f7ff fb14 	bl	80008f4 <HAL_GPIO_Init>
  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012cc:	a905      	add	r1, sp, #20
 80012ce:	4828      	ldr	r0, [pc, #160]	; (8001370 <main+0x168>)
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012d0:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d2:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d4:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d6:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012d8:	f7ff fb0c 	bl	80008f4 <HAL_GPIO_Init>
  __HAL_RCC_DMA2_CLK_ENABLE();
 80012dc:	9405      	str	r4, [sp, #20]
 80012de:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80012e0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012e4:	632b      	str	r3, [r5, #48]	; 0x30
 80012e6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80012e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80012ec:	4622      	mov	r2, r4
 80012ee:	4621      	mov	r1, r4
  __HAL_RCC_DMA2_CLK_ENABLE();
 80012f0:	9305      	str	r3, [sp, #20]
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80012f2:	2039      	movs	r0, #57	; 0x39
  __HAL_RCC_DMA2_CLK_ENABLE();
 80012f4:	9b05      	ldr	r3, [sp, #20]
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80012f6:	f7ff f957 	bl	80005a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80012fa:	2039      	movs	r0, #57	; 0x39
 80012fc:	f7ff f988 	bl	8000610 <HAL_NVIC_EnableIRQ>
  huart2.Instance = USART2;
 8001300:	481d      	ldr	r0, [pc, #116]	; (8001378 <main+0x170>)
  huart2.Init.BaudRate = 115200;
 8001302:	4b1e      	ldr	r3, [pc, #120]	; (800137c <main+0x174>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001304:	6084      	str	r4, [r0, #8]
  huart2.Init.BaudRate = 115200;
 8001306:	f44f 36e1 	mov.w	r6, #115200	; 0x1c200
  huart2.Init.Mode = UART_MODE_TX_RX;
 800130a:	250c      	movs	r5, #12
  huart2.Init.BaudRate = 115200;
 800130c:	e880 0048 	stmia.w	r0, {r3, r6}
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001310:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001312:	6104      	str	r4, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001314:	6145      	str	r5, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001316:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001318:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800131a:	f7ff fefb 	bl	8001114 <HAL_UART_Init>
  hspi2.Instance = SPI2;
 800131e:	4818      	ldr	r0, [pc, #96]	; (8001380 <main+0x178>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001320:	4a18      	ldr	r2, [pc, #96]	; (8001384 <main+0x17c>)
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001322:	6084      	str	r4, [r0, #8]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001324:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001328:	e880 000c 	stmia.w	r0, {r2, r3}
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800132c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001330:	6183      	str	r3, [r0, #24]
  hspi2.Init.CRCPolynomial = 10;
 8001332:	230a      	movs	r3, #10
 8001334:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001336:	60c4      	str	r4, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001338:	6104      	str	r4, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800133a:	6144      	str	r4, [r0, #20]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800133c:	61c4      	str	r4, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800133e:	6204      	str	r4, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001340:	6244      	str	r4, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001342:	6284      	str	r4, [r0, #40]	; 0x28
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001344:	f7ff fe3a 	bl	8000fbc <HAL_SPI_Init>
  huart6.Instance = USART6;
 8001348:	480f      	ldr	r0, [pc, #60]	; (8001388 <main+0x180>)
 800134a:	4b10      	ldr	r3, [pc, #64]	; (800138c <main+0x184>)
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800134c:	6084      	str	r4, [r0, #8]
  huart6.Init.BaudRate = 115200;
 800134e:	e880 0048 	stmia.w	r0, {r3, r6}
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001352:	60c4      	str	r4, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001354:	6104      	str	r4, [r0, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001356:	6145      	str	r5, [r0, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001358:	6184      	str	r4, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800135a:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800135c:	f7ff feda 	bl	8001114 <HAL_UART_Init>
 8001360:	e7fe      	b.n	8001360 <main+0x158>
 8001362:	bf00      	nop
 8001364:	40023800 	.word	0x40023800
 8001368:	40020800 	.word	0x40020800
 800136c:	40020000 	.word	0x40020000
 8001370:	40020400 	.word	0x40020400
 8001374:	10210000 	.word	0x10210000
 8001378:	20000124 	.word	0x20000124
 800137c:	40004400 	.word	0x40004400
 8001380:	2000008c 	.word	0x2000008c
 8001384:	40003800 	.word	0x40003800
 8001388:	200000e4 	.word	0x200000e4
 800138c:	40011400 	.word	0x40011400

08001390 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001390:	4770      	bx	lr
	...

08001394 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001394:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001396:	4b0e      	ldr	r3, [pc, #56]	; (80013d0 <HAL_MspInit+0x3c>)
 8001398:	2100      	movs	r1, #0
 800139a:	9100      	str	r1, [sp, #0]
 800139c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800139e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80013a2:	645a      	str	r2, [r3, #68]	; 0x44
 80013a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80013a6:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80013aa:	9200      	str	r2, [sp, #0]
 80013ac:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ae:	9101      	str	r1, [sp, #4]
 80013b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013b2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80013b6:	641a      	str	r2, [r3, #64]	; 0x40
 80013b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013be:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80013c0:	2007      	movs	r0, #7
  __HAL_RCC_PWR_CLK_ENABLE();
 80013c2:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80013c4:	f7ff f8de 	bl	8000584 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013c8:	b003      	add	sp, #12
 80013ca:	f85d fb04 	ldr.w	pc, [sp], #4
 80013ce:	bf00      	nop
 80013d0:	40023800 	.word	0x40023800

080013d4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80013d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013d6:	4604      	mov	r4, r0
 80013d8:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013da:	2214      	movs	r2, #20
 80013dc:	2100      	movs	r1, #0
 80013de:	a803      	add	r0, sp, #12
 80013e0:	f000 f92e 	bl	8001640 <memset>
  if(hspi->Instance==SPI2)
 80013e4:	6822      	ldr	r2, [r4, #0]
 80013e6:	4b1f      	ldr	r3, [pc, #124]	; (8001464 <HAL_SPI_MspInit+0x90>)
 80013e8:	429a      	cmp	r2, r3
 80013ea:	d138      	bne.n	800145e <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80013ec:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80013f0:	2400      	movs	r4, #0
 80013f2:	9400      	str	r4, [sp, #0]
 80013f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013f6:	481c      	ldr	r0, [pc, #112]	; (8001468 <HAL_SPI_MspInit+0x94>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 80013f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80013fc:	641a      	str	r2, [r3, #64]	; 0x40
 80013fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001400:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001404:	9200      	str	r2, [sp, #0]
 8001406:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001408:	9401      	str	r4, [sp, #4]
 800140a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800140c:	f042 0204 	orr.w	r2, r2, #4
 8001410:	631a      	str	r2, [r3, #48]	; 0x30
 8001412:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001414:	f002 0204 	and.w	r2, r2, #4
 8001418:	9201      	str	r2, [sp, #4]
 800141a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800141c:	9402      	str	r4, [sp, #8]
 800141e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001420:	f042 0202 	orr.w	r2, r2, #2
 8001424:	631a      	str	r2, [r3, #48]	; 0x30
 8001426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001428:	f003 0302 	and.w	r3, r3, #2
 800142c:	9302      	str	r3, [sp, #8]
 800142e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001430:	230c      	movs	r3, #12
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001432:	eb0d 0103 	add.w	r1, sp, r3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001436:	2702      	movs	r7, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001438:	2603      	movs	r6, #3
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800143a:	2505      	movs	r5, #5
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800143c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143e:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001440:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001442:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001444:	f7ff fa56 	bl	80008f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001448:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800144c:	a903      	add	r1, sp, #12
 800144e:	4807      	ldr	r0, [pc, #28]	; (800146c <HAL_SPI_MspInit+0x98>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001450:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001452:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001454:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001456:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001458:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800145a:	f7ff fa4b 	bl	80008f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800145e:	b009      	add	sp, #36	; 0x24
 8001460:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001462:	bf00      	nop
 8001464:	40003800 	.word	0x40003800
 8001468:	40020800 	.word	0x40020800
 800146c:	40020400 	.word	0x40020400

08001470 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001470:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001472:	2214      	movs	r2, #20
{
 8001474:	b08a      	sub	sp, #40	; 0x28
 8001476:	4606      	mov	r6, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001478:	2100      	movs	r1, #0
 800147a:	eb0d 0002 	add.w	r0, sp, r2
 800147e:	f000 f8df 	bl	8001640 <memset>
  if(huart->Instance==USART2)
 8001482:	6833      	ldr	r3, [r6, #0]
 8001484:	4a31      	ldr	r2, [pc, #196]	; (800154c <HAL_UART_MspInit+0xdc>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d121      	bne.n	80014ce <HAL_UART_MspInit+0x5e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800148a:	4b31      	ldr	r3, [pc, #196]	; (8001550 <HAL_UART_MspInit+0xe0>)
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800148c:	4831      	ldr	r0, [pc, #196]	; (8001554 <HAL_UART_MspInit+0xe4>)
    __HAL_RCC_USART2_CLK_ENABLE();
 800148e:	2100      	movs	r1, #0
 8001490:	9101      	str	r1, [sp, #4]
 8001492:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001494:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001498:	641a      	str	r2, [r3, #64]	; 0x40
 800149a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800149c:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80014a0:	9201      	str	r2, [sp, #4]
 80014a2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a4:	9102      	str	r1, [sp, #8]
 80014a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014a8:	f042 0201 	orr.w	r2, r2, #1
 80014ac:	631a      	str	r2, [r3, #48]	; 0x30
 80014ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b0:	f003 0301 	and.w	r3, r3, #1
 80014b4:	9302      	str	r3, [sp, #8]
 80014b6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80014b8:	230c      	movs	r3, #12
 80014ba:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014bc:	2302      	movs	r3, #2
 80014be:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c0:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014c2:	2307      	movs	r3, #7
 80014c4:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c6:	f7ff fa15 	bl	80008f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80014ca:	b00a      	add	sp, #40	; 0x28
 80014cc:	bd70      	pop	{r4, r5, r6, pc}
  else if(huart->Instance==USART6)
 80014ce:	4a22      	ldr	r2, [pc, #136]	; (8001558 <HAL_UART_MspInit+0xe8>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d1fa      	bne.n	80014ca <HAL_UART_MspInit+0x5a>
    __HAL_RCC_USART6_CLK_ENABLE();
 80014d4:	2500      	movs	r5, #0
 80014d6:	4b1e      	ldr	r3, [pc, #120]	; (8001550 <HAL_UART_MspInit+0xe0>)
 80014d8:	9503      	str	r5, [sp, #12]
 80014da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014dc:	481f      	ldr	r0, [pc, #124]	; (800155c <HAL_UART_MspInit+0xec>)
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80014de:	4c20      	ldr	r4, [pc, #128]	; (8001560 <HAL_UART_MspInit+0xf0>)
    __HAL_RCC_USART6_CLK_ENABLE();
 80014e0:	f042 0220 	orr.w	r2, r2, #32
 80014e4:	645a      	str	r2, [r3, #68]	; 0x44
 80014e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80014e8:	f002 0220 	and.w	r2, r2, #32
 80014ec:	9203      	str	r2, [sp, #12]
 80014ee:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014f0:	9504      	str	r5, [sp, #16]
 80014f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014f4:	f042 0204 	orr.w	r2, r2, #4
 80014f8:	631a      	str	r2, [r3, #48]	; 0x30
 80014fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fc:	f003 0304 	and.w	r3, r3, #4
 8001500:	9304      	str	r3, [sp, #16]
 8001502:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001504:	23c0      	movs	r3, #192	; 0xc0
 8001506:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001508:	2302      	movs	r3, #2
 800150a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800150c:	2303      	movs	r3, #3
 800150e:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001510:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001512:	2308      	movs	r3, #8
 8001514:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001516:	f7ff f9ed 	bl	80008f4 <HAL_GPIO_Init>
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 800151a:	4a12      	ldr	r2, [pc, #72]	; (8001564 <HAL_UART_MspInit+0xf4>)
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800151c:	60a5      	str	r5, [r4, #8]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 800151e:	f04f 6320 	mov.w	r3, #167772160	; 0xa000000
 8001522:	e884 000c 	stmia.w	r4, {r2, r3}
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8001526:	4620      	mov	r0, r4
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001528:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800152c:	60e5      	str	r5, [r4, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 800152e:	6123      	str	r3, [r4, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001530:	6165      	str	r5, [r4, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001532:	61a5      	str	r5, [r4, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8001534:	61e5      	str	r5, [r4, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001536:	6225      	str	r5, [r4, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001538:	6265      	str	r5, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 800153a:	f7ff f8a3 	bl	8000684 <HAL_DMA_Init>
 800153e:	b108      	cbz	r0, 8001544 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8001540:	f7ff ff26 	bl	8001390 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8001544:	6374      	str	r4, [r6, #52]	; 0x34
 8001546:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8001548:	e7bf      	b.n	80014ca <HAL_UART_MspInit+0x5a>
 800154a:	bf00      	nop
 800154c:	40004400 	.word	0x40004400
 8001550:	40023800 	.word	0x40023800
 8001554:	40020000 	.word	0x40020000
 8001558:	40011400 	.word	0x40011400
 800155c:	40020800 	.word	0x40020800
 8001560:	2000002c 	.word	0x2000002c
 8001564:	40026428 	.word	0x40026428

08001568 <NMI_Handler>:
 8001568:	4770      	bx	lr

0800156a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800156a:	e7fe      	b.n	800156a <HardFault_Handler>

0800156c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800156c:	e7fe      	b.n	800156c <MemManage_Handler>

0800156e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800156e:	e7fe      	b.n	800156e <BusFault_Handler>

08001570 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001570:	e7fe      	b.n	8001570 <UsageFault_Handler>

08001572 <SVC_Handler>:
 8001572:	4770      	bx	lr

08001574 <DebugMon_Handler>:
 8001574:	4770      	bx	lr

08001576 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001576:	4770      	bx	lr

08001578 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001578:	f7fe bff2 	b.w	8000560 <HAL_IncTick>

0800157c <DMA2_Stream1_IRQHandler>:
void DMA2_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 800157c:	4801      	ldr	r0, [pc, #4]	; (8001584 <DMA2_Stream1_IRQHandler+0x8>)
 800157e:	f7ff b8ff 	b.w	8000780 <HAL_DMA_IRQHandler>
 8001582:	bf00      	nop
 8001584:	2000002c 	.word	0x2000002c

08001588 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001588:	4b05      	ldr	r3, [pc, #20]	; (80015a0 <SystemInit+0x18>)
 800158a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800158e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8001592:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001596:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800159a:	609a      	str	r2, [r3, #8]
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	e000ed00 	.word	0xe000ed00

080015a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80015a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015dc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80015a8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80015aa:	e003      	b.n	80015b4 <LoopCopyDataInit>

080015ac <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80015ac:	4b0c      	ldr	r3, [pc, #48]	; (80015e0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80015ae:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80015b0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80015b2:	3104      	adds	r1, #4

080015b4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80015b4:	480b      	ldr	r0, [pc, #44]	; (80015e4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80015b6:	4b0c      	ldr	r3, [pc, #48]	; (80015e8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80015b8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80015ba:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80015bc:	d3f6      	bcc.n	80015ac <CopyDataInit>
  ldr  r2, =_sbss
 80015be:	4a0b      	ldr	r2, [pc, #44]	; (80015ec <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80015c0:	e002      	b.n	80015c8 <LoopFillZerobss>

080015c2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80015c2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80015c4:	f842 3b04 	str.w	r3, [r2], #4

080015c8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80015c8:	4b09      	ldr	r3, [pc, #36]	; (80015f0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80015ca:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80015cc:	d3f9      	bcc.n	80015c2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80015ce:	f7ff ffdb 	bl	8001588 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015d2:	f000 f811 	bl	80015f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015d6:	f7ff fe17 	bl	8001208 <main>
  bx  lr    
 80015da:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80015dc:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 80015e0:	08001698 	.word	0x08001698
  ldr  r0, =_sdata
 80015e4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80015e8:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 80015ec:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 80015f0:	20000164 	.word	0x20000164

080015f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015f4:	e7fe      	b.n	80015f4 <ADC_IRQHandler>
	...

080015f8 <__libc_init_array>:
 80015f8:	b570      	push	{r4, r5, r6, lr}
 80015fa:	4e0d      	ldr	r6, [pc, #52]	; (8001630 <__libc_init_array+0x38>)
 80015fc:	4c0d      	ldr	r4, [pc, #52]	; (8001634 <__libc_init_array+0x3c>)
 80015fe:	1ba4      	subs	r4, r4, r6
 8001600:	10a4      	asrs	r4, r4, #2
 8001602:	2500      	movs	r5, #0
 8001604:	42a5      	cmp	r5, r4
 8001606:	d109      	bne.n	800161c <__libc_init_array+0x24>
 8001608:	4e0b      	ldr	r6, [pc, #44]	; (8001638 <__libc_init_array+0x40>)
 800160a:	4c0c      	ldr	r4, [pc, #48]	; (800163c <__libc_init_array+0x44>)
 800160c:	f000 f820 	bl	8001650 <_init>
 8001610:	1ba4      	subs	r4, r4, r6
 8001612:	10a4      	asrs	r4, r4, #2
 8001614:	2500      	movs	r5, #0
 8001616:	42a5      	cmp	r5, r4
 8001618:	d105      	bne.n	8001626 <__libc_init_array+0x2e>
 800161a:	bd70      	pop	{r4, r5, r6, pc}
 800161c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001620:	4798      	blx	r3
 8001622:	3501      	adds	r5, #1
 8001624:	e7ee      	b.n	8001604 <__libc_init_array+0xc>
 8001626:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800162a:	4798      	blx	r3
 800162c:	3501      	adds	r5, #1
 800162e:	e7f2      	b.n	8001616 <__libc_init_array+0x1e>
 8001630:	08001690 	.word	0x08001690
 8001634:	08001690 	.word	0x08001690
 8001638:	08001690 	.word	0x08001690
 800163c:	08001694 	.word	0x08001694

08001640 <memset>:
 8001640:	4402      	add	r2, r0
 8001642:	4603      	mov	r3, r0
 8001644:	4293      	cmp	r3, r2
 8001646:	d100      	bne.n	800164a <memset+0xa>
 8001648:	4770      	bx	lr
 800164a:	f803 1b01 	strb.w	r1, [r3], #1
 800164e:	e7f9      	b.n	8001644 <memset+0x4>

08001650 <_init>:
 8001650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001652:	bf00      	nop
 8001654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001656:	bc08      	pop	{r3}
 8001658:	469e      	mov	lr, r3
 800165a:	4770      	bx	lr

0800165c <_fini>:
 800165c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800165e:	bf00      	nop
 8001660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001662:	bc08      	pop	{r3}
 8001664:	469e      	mov	lr, r3
 8001666:	4770      	bx	lr
