
MCP9808_F767.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003628  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08003828  08003828  00013828  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08003928  08003928  00013928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08003930  08003930  00013930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08003934  08003934  00013934  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000007c  20020000  08003938  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .dtcmram      00000000  20000000  20000000  0002007c  2**0
                  CONTENTS
  8 .sram2        00000000  2007c000  2007c000  0002007c  2**0
                  CONTENTS
  9 .bss          00000548  2002007c  2002007c  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000400  200205c4  200205c4  0002007c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015d68  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002e12  00000000  00000000  00035e14  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000a233  00000000  00000000  00038c26  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000d40  00000000  00000000  00042e60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001140  00000000  00000000  00043ba0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000769b  00000000  00000000  00044ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00005a1a  00000000  00000000  0004c37b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007c  00000000  00000000  00051d95  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029c8  00000000  00000000  00051e14  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2002007c 	.word	0x2002007c
 800021c:	00000000 	.word	0x00000000
 8000220:	08003810 	.word	0x08003810

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20020080 	.word	0x20020080
 800023c:	08003810 	.word	0x08003810

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b97a 	b.w	80005fc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	468c      	mov	ip, r1
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	9e08      	ldr	r6, [sp, #32]
 800032c:	2b00      	cmp	r3, #0
 800032e:	d151      	bne.n	80003d4 <__udivmoddi4+0xb4>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d96d      	bls.n	8000412 <__udivmoddi4+0xf2>
 8000336:	fab2 fe82 	clz	lr, r2
 800033a:	f1be 0f00 	cmp.w	lr, #0
 800033e:	d00b      	beq.n	8000358 <__udivmoddi4+0x38>
 8000340:	f1ce 0c20 	rsb	ip, lr, #32
 8000344:	fa01 f50e 	lsl.w	r5, r1, lr
 8000348:	fa20 fc0c 	lsr.w	ip, r0, ip
 800034c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000350:	ea4c 0c05 	orr.w	ip, ip, r5
 8000354:	fa00 f40e 	lsl.w	r4, r0, lr
 8000358:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800035c:	0c25      	lsrs	r5, r4, #16
 800035e:	fbbc f8fa 	udiv	r8, ip, sl
 8000362:	fa1f f987 	uxth.w	r9, r7
 8000366:	fb0a cc18 	mls	ip, sl, r8, ip
 800036a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800036e:	fb08 f309 	mul.w	r3, r8, r9
 8000372:	42ab      	cmp	r3, r5
 8000374:	d90a      	bls.n	800038c <__udivmoddi4+0x6c>
 8000376:	19ed      	adds	r5, r5, r7
 8000378:	f108 32ff 	add.w	r2, r8, #4294967295
 800037c:	f080 8123 	bcs.w	80005c6 <__udivmoddi4+0x2a6>
 8000380:	42ab      	cmp	r3, r5
 8000382:	f240 8120 	bls.w	80005c6 <__udivmoddi4+0x2a6>
 8000386:	f1a8 0802 	sub.w	r8, r8, #2
 800038a:	443d      	add	r5, r7
 800038c:	1aed      	subs	r5, r5, r3
 800038e:	b2a4      	uxth	r4, r4
 8000390:	fbb5 f0fa 	udiv	r0, r5, sl
 8000394:	fb0a 5510 	mls	r5, sl, r0, r5
 8000398:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800039c:	fb00 f909 	mul.w	r9, r0, r9
 80003a0:	45a1      	cmp	r9, r4
 80003a2:	d909      	bls.n	80003b8 <__udivmoddi4+0x98>
 80003a4:	19e4      	adds	r4, r4, r7
 80003a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003aa:	f080 810a 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80003ae:	45a1      	cmp	r9, r4
 80003b0:	f240 8107 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80003b4:	3802      	subs	r0, #2
 80003b6:	443c      	add	r4, r7
 80003b8:	eba4 0409 	sub.w	r4, r4, r9
 80003bc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003c0:	2100      	movs	r1, #0
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d061      	beq.n	800048a <__udivmoddi4+0x16a>
 80003c6:	fa24 f40e 	lsr.w	r4, r4, lr
 80003ca:	2300      	movs	r3, #0
 80003cc:	6034      	str	r4, [r6, #0]
 80003ce:	6073      	str	r3, [r6, #4]
 80003d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d907      	bls.n	80003e8 <__udivmoddi4+0xc8>
 80003d8:	2e00      	cmp	r6, #0
 80003da:	d054      	beq.n	8000486 <__udivmoddi4+0x166>
 80003dc:	2100      	movs	r1, #0
 80003de:	e886 0021 	stmia.w	r6, {r0, r5}
 80003e2:	4608      	mov	r0, r1
 80003e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e8:	fab3 f183 	clz	r1, r3
 80003ec:	2900      	cmp	r1, #0
 80003ee:	f040 808e 	bne.w	800050e <__udivmoddi4+0x1ee>
 80003f2:	42ab      	cmp	r3, r5
 80003f4:	d302      	bcc.n	80003fc <__udivmoddi4+0xdc>
 80003f6:	4282      	cmp	r2, r0
 80003f8:	f200 80fa 	bhi.w	80005f0 <__udivmoddi4+0x2d0>
 80003fc:	1a84      	subs	r4, r0, r2
 80003fe:	eb65 0503 	sbc.w	r5, r5, r3
 8000402:	2001      	movs	r0, #1
 8000404:	46ac      	mov	ip, r5
 8000406:	2e00      	cmp	r6, #0
 8000408:	d03f      	beq.n	800048a <__udivmoddi4+0x16a>
 800040a:	e886 1010 	stmia.w	r6, {r4, ip}
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	b912      	cbnz	r2, 800041a <__udivmoddi4+0xfa>
 8000414:	2701      	movs	r7, #1
 8000416:	fbb7 f7f2 	udiv	r7, r7, r2
 800041a:	fab7 fe87 	clz	lr, r7
 800041e:	f1be 0f00 	cmp.w	lr, #0
 8000422:	d134      	bne.n	800048e <__udivmoddi4+0x16e>
 8000424:	1beb      	subs	r3, r5, r7
 8000426:	0c3a      	lsrs	r2, r7, #16
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	2101      	movs	r1, #1
 800042e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000432:	0c25      	lsrs	r5, r4, #16
 8000434:	fb02 3318 	mls	r3, r2, r8, r3
 8000438:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800043c:	fb0c f308 	mul.w	r3, ip, r8
 8000440:	42ab      	cmp	r3, r5
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x134>
 8000444:	19ed      	adds	r5, r5, r7
 8000446:	f108 30ff 	add.w	r0, r8, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x132>
 800044c:	42ab      	cmp	r3, r5
 800044e:	f200 80d1 	bhi.w	80005f4 <__udivmoddi4+0x2d4>
 8000452:	4680      	mov	r8, r0
 8000454:	1aed      	subs	r5, r5, r3
 8000456:	b2a3      	uxth	r3, r4
 8000458:	fbb5 f0f2 	udiv	r0, r5, r2
 800045c:	fb02 5510 	mls	r5, r2, r0, r5
 8000460:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000464:	fb0c fc00 	mul.w	ip, ip, r0
 8000468:	45a4      	cmp	ip, r4
 800046a:	d907      	bls.n	800047c <__udivmoddi4+0x15c>
 800046c:	19e4      	adds	r4, r4, r7
 800046e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000472:	d202      	bcs.n	800047a <__udivmoddi4+0x15a>
 8000474:	45a4      	cmp	ip, r4
 8000476:	f200 80b8 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 800047a:	4618      	mov	r0, r3
 800047c:	eba4 040c 	sub.w	r4, r4, ip
 8000480:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000484:	e79d      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000486:	4631      	mov	r1, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048e:	f1ce 0420 	rsb	r4, lr, #32
 8000492:	fa05 f30e 	lsl.w	r3, r5, lr
 8000496:	fa07 f70e 	lsl.w	r7, r7, lr
 800049a:	fa20 f804 	lsr.w	r8, r0, r4
 800049e:	0c3a      	lsrs	r2, r7, #16
 80004a0:	fa25 f404 	lsr.w	r4, r5, r4
 80004a4:	ea48 0803 	orr.w	r8, r8, r3
 80004a8:	fbb4 f1f2 	udiv	r1, r4, r2
 80004ac:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80004b0:	fb02 4411 	mls	r4, r2, r1, r4
 80004b4:	fa1f fc87 	uxth.w	ip, r7
 80004b8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80004bc:	fb01 f30c 	mul.w	r3, r1, ip
 80004c0:	42ab      	cmp	r3, r5
 80004c2:	fa00 f40e 	lsl.w	r4, r0, lr
 80004c6:	d909      	bls.n	80004dc <__udivmoddi4+0x1bc>
 80004c8:	19ed      	adds	r5, r5, r7
 80004ca:	f101 30ff 	add.w	r0, r1, #4294967295
 80004ce:	f080 808a 	bcs.w	80005e6 <__udivmoddi4+0x2c6>
 80004d2:	42ab      	cmp	r3, r5
 80004d4:	f240 8087 	bls.w	80005e6 <__udivmoddi4+0x2c6>
 80004d8:	3902      	subs	r1, #2
 80004da:	443d      	add	r5, r7
 80004dc:	1aeb      	subs	r3, r5, r3
 80004de:	fa1f f588 	uxth.w	r5, r8
 80004e2:	fbb3 f0f2 	udiv	r0, r3, r2
 80004e6:	fb02 3310 	mls	r3, r2, r0, r3
 80004ea:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004ee:	fb00 f30c 	mul.w	r3, r0, ip
 80004f2:	42ab      	cmp	r3, r5
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x1e6>
 80004f6:	19ed      	adds	r5, r5, r7
 80004f8:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fc:	d26f      	bcs.n	80005de <__udivmoddi4+0x2be>
 80004fe:	42ab      	cmp	r3, r5
 8000500:	d96d      	bls.n	80005de <__udivmoddi4+0x2be>
 8000502:	3802      	subs	r0, #2
 8000504:	443d      	add	r5, r7
 8000506:	1aeb      	subs	r3, r5, r3
 8000508:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800050c:	e78f      	b.n	800042e <__udivmoddi4+0x10e>
 800050e:	f1c1 0720 	rsb	r7, r1, #32
 8000512:	fa22 f807 	lsr.w	r8, r2, r7
 8000516:	408b      	lsls	r3, r1
 8000518:	fa05 f401 	lsl.w	r4, r5, r1
 800051c:	ea48 0303 	orr.w	r3, r8, r3
 8000520:	fa20 fe07 	lsr.w	lr, r0, r7
 8000524:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000528:	40fd      	lsrs	r5, r7
 800052a:	ea4e 0e04 	orr.w	lr, lr, r4
 800052e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000532:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000536:	fb0c 5519 	mls	r5, ip, r9, r5
 800053a:	fa1f f883 	uxth.w	r8, r3
 800053e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000542:	fb09 f408 	mul.w	r4, r9, r8
 8000546:	42ac      	cmp	r4, r5
 8000548:	fa02 f201 	lsl.w	r2, r2, r1
 800054c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000550:	d908      	bls.n	8000564 <__udivmoddi4+0x244>
 8000552:	18ed      	adds	r5, r5, r3
 8000554:	f109 30ff 	add.w	r0, r9, #4294967295
 8000558:	d243      	bcs.n	80005e2 <__udivmoddi4+0x2c2>
 800055a:	42ac      	cmp	r4, r5
 800055c:	d941      	bls.n	80005e2 <__udivmoddi4+0x2c2>
 800055e:	f1a9 0902 	sub.w	r9, r9, #2
 8000562:	441d      	add	r5, r3
 8000564:	1b2d      	subs	r5, r5, r4
 8000566:	fa1f fe8e 	uxth.w	lr, lr
 800056a:	fbb5 f0fc 	udiv	r0, r5, ip
 800056e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000572:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000576:	fb00 f808 	mul.w	r8, r0, r8
 800057a:	45a0      	cmp	r8, r4
 800057c:	d907      	bls.n	800058e <__udivmoddi4+0x26e>
 800057e:	18e4      	adds	r4, r4, r3
 8000580:	f100 35ff 	add.w	r5, r0, #4294967295
 8000584:	d229      	bcs.n	80005da <__udivmoddi4+0x2ba>
 8000586:	45a0      	cmp	r8, r4
 8000588:	d927      	bls.n	80005da <__udivmoddi4+0x2ba>
 800058a:	3802      	subs	r0, #2
 800058c:	441c      	add	r4, r3
 800058e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000592:	eba4 0408 	sub.w	r4, r4, r8
 8000596:	fba0 8902 	umull	r8, r9, r0, r2
 800059a:	454c      	cmp	r4, r9
 800059c:	46c6      	mov	lr, r8
 800059e:	464d      	mov	r5, r9
 80005a0:	d315      	bcc.n	80005ce <__udivmoddi4+0x2ae>
 80005a2:	d012      	beq.n	80005ca <__udivmoddi4+0x2aa>
 80005a4:	b156      	cbz	r6, 80005bc <__udivmoddi4+0x29c>
 80005a6:	ebba 030e 	subs.w	r3, sl, lr
 80005aa:	eb64 0405 	sbc.w	r4, r4, r5
 80005ae:	fa04 f707 	lsl.w	r7, r4, r7
 80005b2:	40cb      	lsrs	r3, r1
 80005b4:	431f      	orrs	r7, r3
 80005b6:	40cc      	lsrs	r4, r1
 80005b8:	6037      	str	r7, [r6, #0]
 80005ba:	6074      	str	r4, [r6, #4]
 80005bc:	2100      	movs	r1, #0
 80005be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005c2:	4618      	mov	r0, r3
 80005c4:	e6f8      	b.n	80003b8 <__udivmoddi4+0x98>
 80005c6:	4690      	mov	r8, r2
 80005c8:	e6e0      	b.n	800038c <__udivmoddi4+0x6c>
 80005ca:	45c2      	cmp	sl, r8
 80005cc:	d2ea      	bcs.n	80005a4 <__udivmoddi4+0x284>
 80005ce:	ebb8 0e02 	subs.w	lr, r8, r2
 80005d2:	eb69 0503 	sbc.w	r5, r9, r3
 80005d6:	3801      	subs	r0, #1
 80005d8:	e7e4      	b.n	80005a4 <__udivmoddi4+0x284>
 80005da:	4628      	mov	r0, r5
 80005dc:	e7d7      	b.n	800058e <__udivmoddi4+0x26e>
 80005de:	4640      	mov	r0, r8
 80005e0:	e791      	b.n	8000506 <__udivmoddi4+0x1e6>
 80005e2:	4681      	mov	r9, r0
 80005e4:	e7be      	b.n	8000564 <__udivmoddi4+0x244>
 80005e6:	4601      	mov	r1, r0
 80005e8:	e778      	b.n	80004dc <__udivmoddi4+0x1bc>
 80005ea:	3802      	subs	r0, #2
 80005ec:	443c      	add	r4, r7
 80005ee:	e745      	b.n	800047c <__udivmoddi4+0x15c>
 80005f0:	4608      	mov	r0, r1
 80005f2:	e708      	b.n	8000406 <__udivmoddi4+0xe6>
 80005f4:	f1a8 0802 	sub.w	r8, r8, #2
 80005f8:	443d      	add	r5, r7
 80005fa:	e72b      	b.n	8000454 <__udivmoddi4+0x134>

080005fc <__aeabi_idiv0>:
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop

08000600 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000600:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000602:	4b0e      	ldr	r3, [pc, #56]	; (800063c <HAL_InitTick+0x3c>)
{
 8000604:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000606:	4a0e      	ldr	r2, [pc, #56]	; (8000640 <HAL_InitTick+0x40>)
 8000608:	7818      	ldrb	r0, [r3, #0]
 800060a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800060e:	fbb3 f3f0 	udiv	r3, r3, r0
 8000612:	6810      	ldr	r0, [r2, #0]
 8000614:	fbb0 f0f3 	udiv	r0, r0, r3
 8000618:	f000 f890 	bl	800073c <HAL_SYSTICK_Config>
 800061c:	4604      	mov	r4, r0
 800061e:	b958      	cbnz	r0, 8000638 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000620:	2d0f      	cmp	r5, #15
 8000622:	d809      	bhi.n	8000638 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000624:	4602      	mov	r2, r0
 8000626:	4629      	mov	r1, r5
 8000628:	f04f 30ff 	mov.w	r0, #4294967295
 800062c:	f000 f84e 	bl	80006cc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000630:	4b04      	ldr	r3, [pc, #16]	; (8000644 <HAL_InitTick+0x44>)
 8000632:	4620      	mov	r0, r4
 8000634:	601d      	str	r5, [r3, #0]
 8000636:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000638:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800063a:	bd38      	pop	{r3, r4, r5, pc}
 800063c:	20020000 	.word	0x20020000
 8000640:	20020014 	.word	0x20020014
 8000644:	20020004 	.word	0x20020004

08000648 <HAL_Init>:
{
 8000648:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800064a:	2003      	movs	r0, #3
 800064c:	f000 f82c 	bl	80006a8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000650:	2000      	movs	r0, #0
 8000652:	f7ff ffd5 	bl	8000600 <HAL_InitTick>
  HAL_MspInit();
 8000656:	f002 fad9 	bl	8002c0c <HAL_MspInit>
}
 800065a:	2000      	movs	r0, #0
 800065c:	bd08      	pop	{r3, pc}
	...

08000660 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000660:	4a03      	ldr	r2, [pc, #12]	; (8000670 <HAL_IncTick+0x10>)
 8000662:	4b04      	ldr	r3, [pc, #16]	; (8000674 <HAL_IncTick+0x14>)
 8000664:	6811      	ldr	r1, [r2, #0]
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	440b      	add	r3, r1
 800066a:	6013      	str	r3, [r2, #0]
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	200200a4 	.word	0x200200a4
 8000674:	20020000 	.word	0x20020000

08000678 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000678:	4b01      	ldr	r3, [pc, #4]	; (8000680 <HAL_GetTick+0x8>)
 800067a:	6818      	ldr	r0, [r3, #0]
}
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop
 8000680:	200200a4 	.word	0x200200a4

08000684 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000684:	b538      	push	{r3, r4, r5, lr}
 8000686:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000688:	f7ff fff6 	bl	8000678 <HAL_GetTick>
 800068c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800068e:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000690:	bf1e      	ittt	ne
 8000692:	4b04      	ldrne	r3, [pc, #16]	; (80006a4 <HAL_Delay+0x20>)
 8000694:	781b      	ldrbne	r3, [r3, #0]
 8000696:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000698:	f7ff ffee 	bl	8000678 <HAL_GetTick>
 800069c:	1b40      	subs	r0, r0, r5
 800069e:	4284      	cmp	r4, r0
 80006a0:	d8fa      	bhi.n	8000698 <HAL_Delay+0x14>
  {
  }
}
 80006a2:	bd38      	pop	{r3, r4, r5, pc}
 80006a4:	20020000 	.word	0x20020000

080006a8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006a8:	4a07      	ldr	r2, [pc, #28]	; (80006c8 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006aa:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006ac:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006ae:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006b2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80006b6:	041b      	lsls	r3, r3, #16
 80006b8:	0c1b      	lsrs	r3, r3, #16
 80006ba:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80006c2:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80006c4:	60d3      	str	r3, [r2, #12]
 80006c6:	4770      	bx	lr
 80006c8:	e000ed00 	.word	0xe000ed00

080006cc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006cc:	4b19      	ldr	r3, [pc, #100]	; (8000734 <HAL_NVIC_SetPriority+0x68>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80006ce:	b530      	push	{r4, r5, lr}
 80006d0:	68dc      	ldr	r4, [r3, #12]
 80006d2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006d6:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006da:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006dc:	2b04      	cmp	r3, #4
 80006de:	bf28      	it	cs
 80006e0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006e2:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006e4:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006e8:	bf8c      	ite	hi
 80006ea:	3c03      	subhi	r4, #3
 80006ec:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006ee:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
 80006f2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006f4:	f103 33ff 	add.w	r3, r3, #4294967295
 80006f8:	ea01 0103 	and.w	r1, r1, r3
 80006fc:	fa01 f104 	lsl.w	r1, r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000700:	fa05 f404 	lsl.w	r4, r5, r4
 8000704:	f104 34ff 	add.w	r4, r4, #4294967295
 8000708:	ea02 0204 	and.w	r2, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800070c:	ea42 0201 	orr.w	r2, r2, r1
 8000710:	ea4f 1202 	mov.w	r2, r2, lsl #4
  if ((int32_t)(IRQn) >= 0)
 8000714:	db07      	blt.n	8000726 <HAL_NVIC_SetPriority+0x5a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000716:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800071a:	b2d2      	uxtb	r2, r2
 800071c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000720:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
 8000724:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000726:	f000 000f 	and.w	r0, r0, #15
 800072a:	b2d2      	uxtb	r2, r2
 800072c:	4b02      	ldr	r3, [pc, #8]	; (8000738 <HAL_NVIC_SetPriority+0x6c>)
 800072e:	541a      	strb	r2, [r3, r0]
 8000730:	bd30      	pop	{r4, r5, pc}
 8000732:	bf00      	nop
 8000734:	e000ed00 	.word	0xe000ed00
 8000738:	e000ed14 	.word	0xe000ed14

0800073c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800073c:	3801      	subs	r0, #1
 800073e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000742:	d20a      	bcs.n	800075a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000744:	4b06      	ldr	r3, [pc, #24]	; (8000760 <HAL_SYSTICK_Config+0x24>)
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000746:	21f0      	movs	r1, #240	; 0xf0
 8000748:	4a06      	ldr	r2, [pc, #24]	; (8000764 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800074a:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800074c:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800074e:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000752:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000754:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800075a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800075c:	4770      	bx	lr
 800075e:	bf00      	nop
 8000760:	e000e010 	.word	0xe000e010
 8000764:	e000ed00 	.word	0xe000ed00

08000768 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8000768:	b570      	push	{r4, r5, r6, lr}
 800076a:	4604      	mov	r4, r0
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 800076c:	b129      	cbz	r1, 800077a <ETH_MACDMAConfig+0x12>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800076e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000772:	60c3      	str	r3, [r0, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8000774:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000778:	6083      	str	r3, [r0, #8]
  macinit.Jabber = ETH_JABBER_ENABLE;
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800077a:	69e3      	ldr	r3, [r4, #28]
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
  macinit.VLANTagIdentifier = 0x0;
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 800077c:	6822      	ldr	r2, [r4, #0]
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800077e:	2b00      	cmp	r3, #0
                       macinit.Jabber | 
                       macinit.InterFrameGap |
                       macinit.CarrierSense |
                       (heth->Init).Speed | 
                       macinit.ReceiveOwn |
                       macinit.LoopbackMode |
 8000780:	68e0      	ldr	r0, [r4, #12]
 8000782:	68a3      	ldr	r3, [r4, #8]
  tmpreg = (heth->Instance)->MACCR;
 8000784:	6815      	ldr	r5, [r2, #0]
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8000786:	bf08      	it	eq
 8000788:	f44f 6180 	moveq.w	r1, #1024	; 0x400
                       macinit.LoopbackMode |
 800078c:	ea43 0300 	orr.w	r3, r3, r0
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8000790:	482e      	ldr	r0, [pc, #184]	; (800084c <ETH_MACDMAConfig+0xe4>)
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8000792:	bf18      	it	ne
 8000794:	2100      	movne	r1, #0
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8000796:	4028      	ands	r0, r5
 8000798:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800079c:	4303      	orrs	r3, r0
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800079e:	2001      	movs	r0, #1
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80007a0:	430b      	orrs	r3, r1
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 80007a2:	6013      	str	r3, [r2, #0]
  tmpreg = (heth->Instance)->MACCR;
 80007a4:	6815      	ldr	r5, [r2, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80007a6:	f7ff ff6d 	bl	8000684 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 80007aa:	6823      	ldr	r3, [r4, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80007ac:	2240      	movs	r2, #64	; 0x40
                                        macinit.UnicastFramesFilter);
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80007ae:	2001      	movs	r0, #1
  (heth->Instance)->MACCR = tmpreg; 
 80007b0:	601d      	str	r5, [r3, #0]
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80007b2:	605a      	str	r2, [r3, #4]
   tmpreg = (heth->Instance)->MACFFR;
 80007b4:	685d      	ldr	r5, [r3, #4]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80007b6:	f7ff ff65 	bl	8000684 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 80007ba:	6823      	ldr	r3, [r4, #0]
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80007bc:	2001      	movs	r0, #1
   (heth->Instance)->MACFFR = tmpreg;
 80007be:	605d      	str	r5, [r3, #4]
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80007c0:	2500      	movs	r5, #0
 80007c2:	609d      	str	r5, [r3, #8]
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80007c4:	60dd      	str	r5, [r3, #12]
   tmpreg = (heth->Instance)->MACFCR;
 80007c6:	699a      	ldr	r2, [r3, #24]
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 80007c8:	f022 02be 	bic.w	r2, r2, #190	; 0xbe
 80007cc:	0412      	lsls	r2, r2, #16
 80007ce:	0c12      	lsrs	r2, r2, #16
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80007d0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 80007d4:	619a      	str	r2, [r3, #24]
   tmpreg = (heth->Instance)->MACFCR;
 80007d6:	699e      	ldr	r6, [r3, #24]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80007d8:	f7ff ff54 	bl	8000684 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 80007dc:	6823      	ldr	r3, [r4, #0]
                                            macinit.VLANTagIdentifier);
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80007de:	2001      	movs	r0, #1
   (heth->Instance)->MACFCR = tmpreg;
 80007e0:	619e      	str	r6, [r3, #24]
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80007e2:	61dd      	str	r5, [r3, #28]
    tmpreg = (heth->Instance)->MACVLANTR;
 80007e4:	69dd      	ldr	r5, [r3, #28]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80007e6:	f7ff ff4d 	bl	8000684 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 80007ea:	6822      	ldr	r2, [r4, #0]
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80007ec:	2001      	movs	r0, #1
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 80007ee:	4b18      	ldr	r3, [pc, #96]	; (8000850 <ETH_MACDMAConfig+0xe8>)
    (heth->Instance)->MACVLANTR = tmpreg;
 80007f0:	61d5      	str	r5, [r2, #28]
    tmpreg = (heth->Instance)->DMAOMR;
 80007f2:	f241 0518 	movw	r5, #4120	; 0x1018
 80007f6:	5951      	ldr	r1, [r2, r5]
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 80007f8:	400b      	ands	r3, r1
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80007fa:	f043 7308 	orr.w	r3, r3, #35651584	; 0x2200000
 80007fe:	f043 0304 	orr.w	r3, r3, #4
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8000802:	5153      	str	r3, [r2, r5]
    tmpreg = (heth->Instance)->DMAOMR;
 8000804:	5956      	ldr	r6, [r2, r5]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8000806:	f7ff ff3d 	bl	8000684 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 800080a:	6823      	ldr	r3, [r4, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800080c:	2001      	movs	r0, #1
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800080e:	4a11      	ldr	r2, [pc, #68]	; (8000854 <ETH_MACDMAConfig+0xec>)
    (heth->Instance)->DMAOMR = tmpreg;
 8000810:	515e      	str	r6, [r3, r5]
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8000812:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000816:	601a      	str	r2, [r3, #0]
     tmpreg = (heth->Instance)->DMABMR;
 8000818:	681d      	ldr	r5, [r3, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800081a:	f7ff ff33 	bl	8000684 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 800081e:	6822      	ldr	r2, [r4, #0]
 8000820:	f502 5380 	add.w	r3, r2, #4096	; 0x1000
 8000824:	601d      	str	r5, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8000826:	69a3      	ldr	r3, [r4, #24]
 8000828:	2b01      	cmp	r3, #1
 800082a:	d107      	bne.n	800083c <ETH_MACDMAConfig+0xd4>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800082c:	f241 011c 	movw	r1, #4124	; 0x101c
 8000830:	5853      	ldr	r3, [r2, r1]
 8000832:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000836:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800083a:	5053      	str	r3, [r2, r1]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800083c:	6963      	ldr	r3, [r4, #20]
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 800083e:	4a06      	ldr	r2, [pc, #24]	; (8000858 <ETH_MACDMAConfig+0xf0>)
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8000840:	8899      	ldrh	r1, [r3, #4]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8000842:	6011      	str	r1, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8000844:	681a      	ldr	r2, [r3, #0]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8000846:	4b05      	ldr	r3, [pc, #20]	; (800085c <ETH_MACDMAConfig+0xf4>)
 8000848:	601a      	str	r2, [r3, #0]
 800084a:	bd70      	pop	{r4, r5, r6, pc}
 800084c:	ff20810f 	.word	0xff20810f
 8000850:	f8de3f23 	.word	0xf8de3f23
 8000854:	02c12080 	.word	0x02c12080
 8000858:	40028040 	.word	0x40028040
 800085c:	40028044 	.word	0x40028044

08000860 <HAL_ETH_ReadPHYRegister>:
{
 8000860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8000862:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
{
 8000866:	4605      	mov	r5, r0
 8000868:	4616      	mov	r6, r2
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 800086a:	2b82      	cmp	r3, #130	; 0x82
 800086c:	d030      	beq.n	80008d0 <HAL_ETH_ReadPHYRegister+0x70>
  tmpreg = heth->Instance->MACMIIAR;
 800086e:	6802      	ldr	r2, [r0, #0]
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8000870:	2382      	movs	r3, #130	; 0x82
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8000872:	0189      	lsls	r1, r1, #6
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8000874:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg = heth->Instance->MACMIIAR;
 8000878:	6913      	ldr	r3, [r2, #16]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 800087a:	f401 64f8 	and.w	r4, r1, #1984	; 0x7c0
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 800087e:	f003 011c 	and.w	r1, r3, #28
 8000882:	4321      	orrs	r1, r4
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8000884:	8a04      	ldrh	r4, [r0, #16]
 8000886:	02e4      	lsls	r4, r4, #11
 8000888:	b2a4      	uxth	r4, r4
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 800088a:	430c      	orrs	r4, r1
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 800088c:	f044 0401 	orr.w	r4, r4, #1
  heth->Instance->MACMIIAR = tmpreg;
 8000890:	6114      	str	r4, [r2, #16]
  tickstart = HAL_GetTick();
 8000892:	f7ff fef1 	bl	8000678 <HAL_GetTick>
 8000896:	4607      	mov	r7, r0
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000898:	f014 0001 	ands.w	r0, r4, #1
 800089c:	d107      	bne.n	80008ae <HAL_ETH_ReadPHYRegister+0x4e>
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800089e:	682b      	ldr	r3, [r5, #0]
 80008a0:	695b      	ldr	r3, [r3, #20]
 80008a2:	b29b      	uxth	r3, r3
 80008a4:	6033      	str	r3, [r6, #0]
  heth->State = HAL_ETH_STATE_READY;
 80008a6:	2301      	movs	r3, #1
 80008a8:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
 80008ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80008ae:	f7ff fee3 	bl	8000678 <HAL_GetTick>
 80008b2:	1bc0      	subs	r0, r0, r7
 80008b4:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 80008b8:	d307      	bcc.n	80008ca <HAL_ETH_ReadPHYRegister+0x6a>
      heth->State= HAL_ETH_STATE_READY;
 80008ba:	2301      	movs	r3, #1
      return HAL_TIMEOUT;
 80008bc:	2003      	movs	r0, #3
      heth->State= HAL_ETH_STATE_READY;
 80008be:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 80008c2:	2300      	movs	r3, #0
 80008c4:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
      return HAL_TIMEOUT;
 80008c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpreg = heth->Instance->MACMIIAR;
 80008ca:	682b      	ldr	r3, [r5, #0]
 80008cc:	691c      	ldr	r4, [r3, #16]
 80008ce:	e7e3      	b.n	8000898 <HAL_ETH_ReadPHYRegister+0x38>
    return HAL_BUSY;
 80008d0:	2002      	movs	r0, #2
}
 80008d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080008d4 <HAL_ETH_WritePHYRegister>:
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80008d4:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 80008d8:	2b42      	cmp	r3, #66	; 0x42
{
 80008da:	b570      	push	{r4, r5, r6, lr}
 80008dc:	4605      	mov	r5, r0
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80008de:	d02e      	beq.n	800093e <HAL_ETH_WritePHYRegister+0x6a>
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80008e0:	2342      	movs	r3, #66	; 0x42
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80008e2:	018c      	lsls	r4, r1, #6
 80008e4:	b292      	uxth	r2, r2
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80008e6:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80008ea:	f404 64f8 	and.w	r4, r4, #1984	; 0x7c0
  tmpreg = heth->Instance->MACMIIAR;
 80008ee:	6803      	ldr	r3, [r0, #0]
 80008f0:	f044 0403 	orr.w	r4, r4, #3
 80008f4:	6918      	ldr	r0, [r3, #16]
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80008f6:	f000 001c 	and.w	r0, r0, #28
 80008fa:	4320      	orrs	r0, r4
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80008fc:	8a2c      	ldrh	r4, [r5, #16]
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80008fe:	615a      	str	r2, [r3, #20]
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8000900:	02e4      	lsls	r4, r4, #11
 8000902:	b2a4      	uxth	r4, r4
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8000904:	4304      	orrs	r4, r0
  heth->Instance->MACMIIAR = tmpreg;
 8000906:	611c      	str	r4, [r3, #16]
  tickstart = HAL_GetTick();
 8000908:	f7ff feb6 	bl	8000678 <HAL_GetTick>
 800090c:	4606      	mov	r6, r0
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800090e:	f014 0001 	ands.w	r0, r4, #1
 8000912:	d103      	bne.n	800091c <HAL_ETH_WritePHYRegister+0x48>
  heth->State = HAL_ETH_STATE_READY;
 8000914:	2301      	movs	r3, #1
 8000916:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
 800091a:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 800091c:	f7ff feac 	bl	8000678 <HAL_GetTick>
 8000920:	1b80      	subs	r0, r0, r6
 8000922:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8000926:	d307      	bcc.n	8000938 <HAL_ETH_WritePHYRegister+0x64>
      heth->State= HAL_ETH_STATE_READY;
 8000928:	2301      	movs	r3, #1
      return HAL_TIMEOUT;
 800092a:	2003      	movs	r0, #3
      heth->State= HAL_ETH_STATE_READY;
 800092c:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000930:	2300      	movs	r3, #0
 8000932:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
 8000936:	bd70      	pop	{r4, r5, r6, pc}
    tmpreg = heth->Instance->MACMIIAR;
 8000938:	682b      	ldr	r3, [r5, #0]
 800093a:	691c      	ldr	r4, [r3, #16]
 800093c:	e7e7      	b.n	800090e <HAL_ETH_WritePHYRegister+0x3a>
    return HAL_BUSY;
 800093e:	2002      	movs	r0, #2
}
 8000940:	bd70      	pop	{r4, r5, r6, pc}
	...

08000944 <HAL_ETH_Init>:
  uint32_t tempreg = 0, phyreg = 0;
 8000944:	2300      	movs	r3, #0
{
 8000946:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(heth == NULL)
 8000948:	4604      	mov	r4, r0
  uint32_t tempreg = 0, phyreg = 0;
 800094a:	9300      	str	r3, [sp, #0]
  if(heth == NULL)
 800094c:	2800      	cmp	r0, #0
 800094e:	f000 80dc 	beq.w	8000b0a <HAL_ETH_Init+0x1c6>
  if(heth->State == HAL_ETH_STATE_RESET)
 8000952:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8000956:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800095a:	b91b      	cbnz	r3, 8000964 <HAL_ETH_Init+0x20>
    heth->Lock = HAL_UNLOCKED;
 800095c:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
    HAL_ETH_MspInit(heth);
 8000960:	f002 f96c 	bl	8002c3c <HAL_ETH_MspInit>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000964:	4b6a      	ldr	r3, [pc, #424]	; (8000b10 <HAL_ETH_Init+0x1cc>)
 8000966:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000968:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800096c:	645a      	str	r2, [r3, #68]	; 0x44
 800096e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000970:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000974:	9301      	str	r3, [sp, #4]
 8000976:	9b01      	ldr	r3, [sp, #4]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8000978:	4b66      	ldr	r3, [pc, #408]	; (8000b14 <HAL_ETH_Init+0x1d0>)
 800097a:	685a      	ldr	r2, [r3, #4]
 800097c:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8000980:	605a      	str	r2, [r3, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8000982:	685a      	ldr	r2, [r3, #4]
 8000984:	6a21      	ldr	r1, [r4, #32]
 8000986:	430a      	orrs	r2, r1
 8000988:	605a      	str	r2, [r3, #4]
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800098a:	6823      	ldr	r3, [r4, #0]
 800098c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000990:	681a      	ldr	r2, [r3, #0]
 8000992:	f042 0201 	orr.w	r2, r2, #1
 8000996:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8000998:	f7ff fe6e 	bl	8000678 <HAL_GetTick>
 800099c:	4605      	mov	r5, r0
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800099e:	6823      	ldr	r3, [r4, #0]
 80009a0:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 80009a4:	6812      	ldr	r2, [r2, #0]
 80009a6:	07d0      	lsls	r0, r2, #31
 80009a8:	d41d      	bmi.n	80009e6 <HAL_ETH_Init+0xa2>
  tempreg = (heth->Instance)->MACMIIAR;
 80009aa:	691d      	ldr	r5, [r3, #16]
  hclk = HAL_RCC_GetHCLKFreq();
 80009ac:	f001 f80c 	bl	80019c8 <HAL_RCC_GetHCLKFreq>
  if((hclk >= 20000000)&&(hclk < 35000000))
 80009b0:	4b59      	ldr	r3, [pc, #356]	; (8000b18 <HAL_ETH_Init+0x1d4>)
 80009b2:	4a5a      	ldr	r2, [pc, #360]	; (8000b1c <HAL_ETH_Init+0x1d8>)
  tempreg &= ETH_MACMIIAR_CR_MASK;
 80009b4:	f025 051c 	bic.w	r5, r5, #28
  if((hclk >= 20000000)&&(hclk < 35000000))
 80009b8:	4403      	add	r3, r0
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d822      	bhi.n	8000a04 <HAL_ETH_Init+0xc0>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80009be:	f045 0508 	orr.w	r5, r5, #8
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 80009c2:	6823      	ldr	r3, [r4, #0]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80009c4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80009c8:	2100      	movs	r1, #0
 80009ca:	4620      	mov	r0, r4
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 80009cc:	611d      	str	r5, [r3, #16]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80009ce:	f7ff ff81 	bl	80008d4 <HAL_ETH_WritePHYRegister>
 80009d2:	4605      	mov	r5, r0
 80009d4:	b368      	cbz	r0, 8000a32 <HAL_ETH_Init+0xee>
      heth->State = HAL_ETH_STATE_READY;
 80009d6:	2501      	movs	r5, #1
      ETH_MACDMAConfig(heth, err);
 80009d8:	2101      	movs	r1, #1
 80009da:	4620      	mov	r0, r4
 80009dc:	f7ff fec4 	bl	8000768 <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 80009e0:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;
 80009e4:	e00b      	b.n	80009fe <HAL_ETH_Init+0xba>
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80009e6:	f7ff fe47 	bl	8000678 <HAL_GetTick>
 80009ea:	1b40      	subs	r0, r0, r5
 80009ec:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 80009f0:	d9d5      	bls.n	800099e <HAL_ETH_Init+0x5a>
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80009f2:	2503      	movs	r5, #3
      __HAL_UNLOCK(heth);
 80009f4:	2300      	movs	r3, #0
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80009f6:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 80009fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 80009fe:	4628      	mov	r0, r5
 8000a00:	b003      	add	sp, #12
 8000a02:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8000a04:	4b46      	ldr	r3, [pc, #280]	; (8000b20 <HAL_ETH_Init+0x1dc>)
 8000a06:	4a47      	ldr	r2, [pc, #284]	; (8000b24 <HAL_ETH_Init+0x1e0>)
 8000a08:	4403      	add	r3, r0
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d802      	bhi.n	8000a14 <HAL_ETH_Init+0xd0>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8000a0e:	f045 050c 	orr.w	r5, r5, #12
 8000a12:	e7d6      	b.n	80009c2 <HAL_ETH_Init+0x7e>
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8000a14:	4b44      	ldr	r3, [pc, #272]	; (8000b28 <HAL_ETH_Init+0x1e4>)
 8000a16:	4a45      	ldr	r2, [pc, #276]	; (8000b2c <HAL_ETH_Init+0x1e8>)
 8000a18:	4403      	add	r3, r0
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d9d1      	bls.n	80009c2 <HAL_ETH_Init+0x7e>
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8000a1e:	4b44      	ldr	r3, [pc, #272]	; (8000b30 <HAL_ETH_Init+0x1ec>)
 8000a20:	4a44      	ldr	r2, [pc, #272]	; (8000b34 <HAL_ETH_Init+0x1f0>)
 8000a22:	4403      	add	r3, r0
 8000a24:	4293      	cmp	r3, r2
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8000a26:	bf94      	ite	ls
 8000a28:	f045 0504 	orrls.w	r5, r5, #4
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8000a2c:	f045 0510 	orrhi.w	r5, r5, #16
 8000a30:	e7c7      	b.n	80009c2 <HAL_ETH_Init+0x7e>
  HAL_Delay(PHY_RESET_DELAY);
 8000a32:	20ff      	movs	r0, #255	; 0xff
 8000a34:	f7ff fe26 	bl	8000684 <HAL_Delay>
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8000a38:	6863      	ldr	r3, [r4, #4]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d053      	beq.n	8000ae6 <HAL_ETH_Init+0x1a2>
    tickstart = HAL_GetTick();
 8000a3e:	f7ff fe1b 	bl	8000678 <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8000a42:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000a46:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000a48:	466a      	mov	r2, sp
 8000a4a:	2101      	movs	r1, #1
 8000a4c:	4620      	mov	r0, r4
 8000a4e:	f7ff ff07 	bl	8000860 <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8000a52:	f7ff fe11 	bl	8000678 <HAL_GetTick>
 8000a56:	1b80      	subs	r0, r0, r6
 8000a58:	42b8      	cmp	r0, r7
 8000a5a:	d90b      	bls.n	8000a74 <HAL_ETH_Init+0x130>
        ETH_MACDMAConfig(heth, err);
 8000a5c:	2101      	movs	r1, #1
 8000a5e:	4620      	mov	r0, r4
 8000a60:	f7ff fe82 	bl	8000768 <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 8000a64:	2301      	movs	r3, #1
        return HAL_TIMEOUT;
 8000a66:	2503      	movs	r5, #3
        heth->State= HAL_ETH_STATE_READY;
 8000a68:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 8000a72:	e7c4      	b.n	80009fe <HAL_ETH_Init+0xba>
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8000a74:	9b00      	ldr	r3, [sp, #0]
 8000a76:	0759      	lsls	r1, r3, #29
 8000a78:	d5e6      	bpl.n	8000a48 <HAL_ETH_Init+0x104>
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8000a7a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a7e:	2100      	movs	r1, #0
 8000a80:	4620      	mov	r0, r4
 8000a82:	f7ff ff27 	bl	80008d4 <HAL_ETH_WritePHYRegister>
 8000a86:	2800      	cmp	r0, #0
 8000a88:	d1a5      	bne.n	80009d6 <HAL_ETH_Init+0x92>
    tickstart = HAL_GetTick();
 8000a8a:	f7ff fdf5 	bl	8000678 <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8000a8e:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000a92:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000a94:	466a      	mov	r2, sp
 8000a96:	2101      	movs	r1, #1
 8000a98:	4620      	mov	r0, r4
 8000a9a:	f7ff fee1 	bl	8000860 <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8000a9e:	f7ff fdeb 	bl	8000678 <HAL_GetTick>
 8000aa2:	1b80      	subs	r0, r0, r6
 8000aa4:	42b8      	cmp	r0, r7
 8000aa6:	d8d9      	bhi.n	8000a5c <HAL_ETH_Init+0x118>
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8000aa8:	9b00      	ldr	r3, [sp, #0]
 8000aaa:	069a      	lsls	r2, r3, #26
 8000aac:	d5f2      	bpl.n	8000a94 <HAL_ETH_Init+0x150>
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8000aae:	466a      	mov	r2, sp
 8000ab0:	211f      	movs	r1, #31
 8000ab2:	4620      	mov	r0, r4
 8000ab4:	f7ff fed4 	bl	8000860 <HAL_ETH_ReadPHYRegister>
 8000ab8:	2800      	cmp	r0, #0
 8000aba:	d18c      	bne.n	80009d6 <HAL_ETH_Init+0x92>
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8000abc:	9b00      	ldr	r3, [sp, #0]
 8000abe:	f013 0210 	ands.w	r2, r3, #16
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8000ac2:	bf18      	it	ne
 8000ac4:	f44f 6200 	movne.w	r2, #2048	; 0x800
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8000ac8:	075b      	lsls	r3, r3, #29
      (heth->Init).Speed = ETH_SPEED_10M; 
 8000aca:	bf4c      	ite	mi
 8000acc:	2300      	movmi	r3, #0
      (heth->Init).Speed = ETH_SPEED_100M;
 8000ace:	f44f 4380 	movpl.w	r3, #16384	; 0x4000
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8000ad2:	60e2      	str	r2, [r4, #12]
      (heth->Init).Speed = ETH_SPEED_100M;
 8000ad4:	60a3      	str	r3, [r4, #8]
  ETH_MACDMAConfig(heth, err);
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	4620      	mov	r0, r4
 8000ada:	f7ff fe45 	bl	8000768 <ETH_MACDMAConfig>
  heth->State= HAL_ETH_STATE_READY;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  return HAL_OK;
 8000ae4:	e78b      	b.n	80009fe <HAL_ETH_Init+0xba>
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8000ae6:	68a3      	ldr	r3, [r4, #8]
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8000ae8:	4629      	mov	r1, r5
 8000aea:	68e2      	ldr	r2, [r4, #12]
 8000aec:	4620      	mov	r0, r4
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8000aee:	085b      	lsrs	r3, r3, #1
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8000af0:	ea43 02d2 	orr.w	r2, r3, r2, lsr #3
 8000af4:	b292      	uxth	r2, r2
 8000af6:	f7ff feed 	bl	80008d4 <HAL_ETH_WritePHYRegister>
 8000afa:	2800      	cmp	r0, #0
 8000afc:	f47f af6b 	bne.w	80009d6 <HAL_ETH_Init+0x92>
    HAL_Delay(PHY_CONFIG_DELAY);
 8000b00:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000b04:	f7ff fdbe 	bl	8000684 <HAL_Delay>
 8000b08:	e7e5      	b.n	8000ad6 <HAL_ETH_Init+0x192>
    return HAL_ERROR;
 8000b0a:	2501      	movs	r5, #1
 8000b0c:	e777      	b.n	80009fe <HAL_ETH_Init+0xba>
 8000b0e:	bf00      	nop
 8000b10:	40023800 	.word	0x40023800
 8000b14:	40013800 	.word	0x40013800
 8000b18:	feced300 	.word	0xfeced300
 8000b1c:	00e4e1bf 	.word	0x00e4e1bf
 8000b20:	fde9f140 	.word	0xfde9f140
 8000b24:	017d783f 	.word	0x017d783f
 8000b28:	fc6c7900 	.word	0xfc6c7900
 8000b2c:	026259ff 	.word	0x026259ff
 8000b30:	fa0a1f00 	.word	0xfa0a1f00
 8000b34:	02faf07f 	.word	0x02faf07f

08000b38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b3c:	680b      	ldr	r3, [r1, #0]
{
 8000b3e:	b085      	sub	sp, #20
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b40:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8000d04 <HAL_GPIO_Init+0x1cc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b44:	9301      	str	r3, [sp, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000b46:	2300      	movs	r3, #0
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b48:	4a6c      	ldr	r2, [pc, #432]	; (8000cfc <HAL_GPIO_Init+0x1c4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000b4a:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 8000d08 <HAL_GPIO_Init+0x1d0>
    ioposition = ((uint32_t)0x01) << position;
 8000b4e:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b50:	9d01      	ldr	r5, [sp, #4]
    ioposition = ((uint32_t)0x01) << position;
 8000b52:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b54:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 8000b56:	42ac      	cmp	r4, r5
 8000b58:	f040 80b6 	bne.w	8000cc8 <HAL_GPIO_Init+0x190>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b5c:	684c      	ldr	r4, [r1, #4]
 8000b5e:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000b62:	f024 0c10 	bic.w	ip, r4, #16
 8000b66:	f10c 36ff 	add.w	r6, ip, #4294967295
 8000b6a:	2e01      	cmp	r6, #1
 8000b6c:	d812      	bhi.n	8000b94 <HAL_GPIO_Init+0x5c>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000b6e:	2603      	movs	r6, #3
        temp = GPIOx->OSPEEDR; 
 8000b70:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000b72:	fa06 f60e 	lsl.w	r6, r6, lr
 8000b76:	ea27 0706 	bic.w	r7, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2));
 8000b7a:	68ce      	ldr	r6, [r1, #12]
 8000b7c:	fa06 f60e 	lsl.w	r6, r6, lr
 8000b80:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 8000b82:	6086      	str	r6, [r0, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000b84:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp = GPIOx->OTYPER;
 8000b88:	6847      	ldr	r7, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000b8a:	409e      	lsls	r6, r3
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b8c:	ea27 0705 	bic.w	r7, r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000b90:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 8000b92:	6046      	str	r6, [r0, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000b94:	2603      	movs	r6, #3
      temp = GPIOx->PUPDR;
 8000b96:	68c7      	ldr	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b98:	f1bc 0f02 	cmp.w	ip, #2
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000b9c:	fa06 f60e 	lsl.w	r6, r6, lr
 8000ba0:	ea6f 0606 	mvn.w	r6, r6
 8000ba4:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000ba8:	688f      	ldr	r7, [r1, #8]
 8000baa:	fa07 f70e 	lsl.w	r7, r7, lr
 8000bae:	ea47 070a 	orr.w	r7, r7, sl
      GPIOx->PUPDR = temp;
 8000bb2:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bb4:	d116      	bne.n	8000be4 <HAL_GPIO_Init+0xac>
        temp = GPIOx->AFR[position >> 3];
 8000bb6:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000bba:	f003 0b07 	and.w	fp, r3, #7
 8000bbe:	f04f 0c0f 	mov.w	ip, #15
 8000bc2:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8000bc6:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8000bca:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000bce:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000bd2:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000bd6:	690f      	ldr	r7, [r1, #16]
 8000bd8:	fa07 f70b 	lsl.w	r7, r7, fp
 8000bdc:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3] = temp;
 8000be0:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 8000be4:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000be6:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000be8:	f004 0703 	and.w	r7, r4, #3
 8000bec:	fa07 fe0e 	lsl.w	lr, r7, lr
 8000bf0:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 8000bf4:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000bf6:	00e6      	lsls	r6, r4, #3
 8000bf8:	d566      	bpl.n	8000cc8 <HAL_GPIO_Init+0x190>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bfa:	f8d8 6044 	ldr.w	r6, [r8, #68]	; 0x44
 8000bfe:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000c02:	f003 0e03 	and.w	lr, r3, #3
 8000c06:	f04f 0c0f 	mov.w	ip, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c0a:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8000c0e:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000c12:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c16:	f8c8 6044 	str.w	r6, [r8, #68]	; 0x44
 8000c1a:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 8000c1e:	f8d8 6044 	ldr.w	r6, [r8, #68]	; 0x44
 8000c22:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8000c26:	9603      	str	r6, [sp, #12]
 8000c28:	9e03      	ldr	r6, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000c2a:	fa0c f60e 	lsl.w	r6, ip, lr
        temp = SYSCFG->EXTICR[position >> 2];
 8000c2e:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000c32:	ea2a 0c06 	bic.w	ip, sl, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000c36:	4e32      	ldr	r6, [pc, #200]	; (8000d00 <HAL_GPIO_Init+0x1c8>)
 8000c38:	42b0      	cmp	r0, r6
 8000c3a:	d04c      	beq.n	8000cd6 <HAL_GPIO_Init+0x19e>
 8000c3c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000c40:	42b0      	cmp	r0, r6
 8000c42:	d04a      	beq.n	8000cda <HAL_GPIO_Init+0x1a2>
 8000c44:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000c48:	42b0      	cmp	r0, r6
 8000c4a:	d048      	beq.n	8000cde <HAL_GPIO_Init+0x1a6>
 8000c4c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000c50:	42b0      	cmp	r0, r6
 8000c52:	d046      	beq.n	8000ce2 <HAL_GPIO_Init+0x1aa>
 8000c54:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000c58:	42b0      	cmp	r0, r6
 8000c5a:	d044      	beq.n	8000ce6 <HAL_GPIO_Init+0x1ae>
 8000c5c:	4548      	cmp	r0, r9
 8000c5e:	d044      	beq.n	8000cea <HAL_GPIO_Init+0x1b2>
 8000c60:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8000c64:	42b0      	cmp	r0, r6
 8000c66:	d042      	beq.n	8000cee <HAL_GPIO_Init+0x1b6>
 8000c68:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000c6c:	42b0      	cmp	r0, r6
 8000c6e:	d040      	beq.n	8000cf2 <HAL_GPIO_Init+0x1ba>
 8000c70:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000c74:	42b0      	cmp	r0, r6
 8000c76:	d03e      	beq.n	8000cf6 <HAL_GPIO_Init+0x1be>
 8000c78:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000c7c:	42b0      	cmp	r0, r6
 8000c7e:	bf14      	ite	ne
 8000c80:	260a      	movne	r6, #10
 8000c82:	2609      	moveq	r6, #9
 8000c84:	fa06 f60e 	lsl.w	r6, r6, lr
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c88:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000c8c:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 8000c90:	60be      	str	r6, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
 8000c92:	ea6f 0705 	mvn.w	r7, r5
        temp = EXTI->IMR;
 8000c96:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000c98:	bf0c      	ite	eq
 8000c9a:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000c9c:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c9e:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        EXTI->IMR = temp;
 8000ca2:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR;
 8000ca4:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8000ca6:	bf0c      	ite	eq
 8000ca8:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000caa:	432e      	orrne	r6, r5
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000cac:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        EXTI->EMR = temp;
 8000cb0:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR;
 8000cb2:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8000cb4:	bf0c      	ite	eq
 8000cb6:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000cb8:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000cba:	02a4      	lsls	r4, r4, #10
        EXTI->RTSR = temp;
 8000cbc:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR;
 8000cbe:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8000cc0:	bf54      	ite	pl
 8000cc2:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 8000cc4:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 8000cc6:	60d6      	str	r6, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000cc8:	3301      	adds	r3, #1
 8000cca:	2b10      	cmp	r3, #16
 8000ccc:	f47f af3f 	bne.w	8000b4e <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000cd0:	b005      	add	sp, #20
 8000cd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000cd6:	2600      	movs	r6, #0
 8000cd8:	e7d4      	b.n	8000c84 <HAL_GPIO_Init+0x14c>
 8000cda:	2601      	movs	r6, #1
 8000cdc:	e7d2      	b.n	8000c84 <HAL_GPIO_Init+0x14c>
 8000cde:	2602      	movs	r6, #2
 8000ce0:	e7d0      	b.n	8000c84 <HAL_GPIO_Init+0x14c>
 8000ce2:	2603      	movs	r6, #3
 8000ce4:	e7ce      	b.n	8000c84 <HAL_GPIO_Init+0x14c>
 8000ce6:	2604      	movs	r6, #4
 8000ce8:	e7cc      	b.n	8000c84 <HAL_GPIO_Init+0x14c>
 8000cea:	2605      	movs	r6, #5
 8000cec:	e7ca      	b.n	8000c84 <HAL_GPIO_Init+0x14c>
 8000cee:	2606      	movs	r6, #6
 8000cf0:	e7c8      	b.n	8000c84 <HAL_GPIO_Init+0x14c>
 8000cf2:	2607      	movs	r6, #7
 8000cf4:	e7c6      	b.n	8000c84 <HAL_GPIO_Init+0x14c>
 8000cf6:	2608      	movs	r6, #8
 8000cf8:	e7c4      	b.n	8000c84 <HAL_GPIO_Init+0x14c>
 8000cfa:	bf00      	nop
 8000cfc:	40013c00 	.word	0x40013c00
 8000d00:	40020000 	.word	0x40020000
 8000d04:	40023800 	.word	0x40023800
 8000d08:	40021400 	.word	0x40021400

08000d0c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d0c:	b10a      	cbz	r2, 8000d12 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000d0e:	6181      	str	r1, [r0, #24]
 8000d10:	4770      	bx	lr
 8000d12:	0409      	lsls	r1, r1, #16
 8000d14:	e7fb      	b.n	8000d0e <HAL_GPIO_WritePin+0x2>

08000d16 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8000d16:	6943      	ldr	r3, [r0, #20]
 8000d18:	420b      	tst	r3, r1
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000d1a:	bf18      	it	ne
 8000d1c:	0409      	lslne	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d1e:	6181      	str	r1, [r0, #24]
 8000d20:	4770      	bx	lr

08000d22 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8000d22:	6803      	ldr	r3, [r0, #0]
 8000d24:	699a      	ldr	r2, [r3, #24]
 8000d26:	0791      	lsls	r1, r2, #30
 8000d28:	d501      	bpl.n	8000d2e <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000d2e:	699a      	ldr	r2, [r3, #24]
 8000d30:	07d2      	lsls	r2, r2, #31
 8000d32:	d403      	bmi.n	8000d3c <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8000d34:	699a      	ldr	r2, [r3, #24]
 8000d36:	f042 0201 	orr.w	r2, r2, #1
 8000d3a:	619a      	str	r2, [r3, #24]
 8000d3c:	4770      	bx	lr

08000d3e <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8000d3e:	b530      	push	{r4, r5, lr}
 8000d40:	9c03      	ldr	r4, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8000d42:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8000d46:	6805      	ldr	r5, [r0, #0]
 8000d48:	4323      	orrs	r3, r4
 8000d4a:	0d64      	lsrs	r4, r4, #21
 8000d4c:	6868      	ldr	r0, [r5, #4]
 8000d4e:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 8000d52:	4319      	orrs	r1, r3
 8000d54:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 8000d58:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000d5c:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 8000d60:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 8000d64:	f044 0403 	orr.w	r4, r4, #3
 8000d68:	ea20 0404 	bic.w	r4, r0, r4
 8000d6c:	4321      	orrs	r1, r4
 8000d6e:	6069      	str	r1, [r5, #4]
 8000d70:	bd30      	pop	{r4, r5, pc}

08000d72 <I2C_WaitOnFlagUntilTimeout>:
{
 8000d72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d76:	9f06      	ldr	r7, [sp, #24]
 8000d78:	4604      	mov	r4, r0
 8000d7a:	4688      	mov	r8, r1
 8000d7c:	4616      	mov	r6, r2
 8000d7e:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000d80:	6822      	ldr	r2, [r4, #0]
 8000d82:	6993      	ldr	r3, [r2, #24]
 8000d84:	ea38 0303 	bics.w	r3, r8, r3
 8000d88:	bf0c      	ite	eq
 8000d8a:	2301      	moveq	r3, #1
 8000d8c:	2300      	movne	r3, #0
 8000d8e:	42b3      	cmp	r3, r6
 8000d90:	d002      	beq.n	8000d98 <I2C_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8000d92:	2000      	movs	r0, #0
}
 8000d94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8000d98:	1c6b      	adds	r3, r5, #1
 8000d9a:	d0f2      	beq.n	8000d82 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000d9c:	f7ff fc6c 	bl	8000678 <HAL_GetTick>
 8000da0:	1bc0      	subs	r0, r0, r7
 8000da2:	4285      	cmp	r5, r0
 8000da4:	d301      	bcc.n	8000daa <I2C_WaitOnFlagUntilTimeout+0x38>
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d1ea      	bne.n	8000d80 <I2C_WaitOnFlagUntilTimeout+0xe>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000daa:	6c63      	ldr	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8000dac:	2001      	movs	r0, #1
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000dae:	f043 0320 	orr.w	r3, r3, #32
 8000db2:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000db4:	2320      	movs	r3, #32
 8000db6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8000dc0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8000dc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000dc8 <I2C_IsAcknowledgeFailed>:
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000dc8:	6803      	ldr	r3, [r0, #0]
{
 8000dca:	b570      	push	{r4, r5, r6, lr}
 8000dcc:	4604      	mov	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000dce:	6998      	ldr	r0, [r3, #24]
{
 8000dd0:	460d      	mov	r5, r1
 8000dd2:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000dd4:	f010 0010 	ands.w	r0, r0, #16
 8000dd8:	d116      	bne.n	8000e08 <I2C_IsAcknowledgeFailed+0x40>
 8000dda:	bd70      	pop	{r4, r5, r6, pc}
      if (Timeout != HAL_MAX_DELAY)
 8000ddc:	1c69      	adds	r1, r5, #1
 8000dde:	d014      	beq.n	8000e0a <I2C_IsAcknowledgeFailed+0x42>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000de0:	f7ff fc4a 	bl	8000678 <HAL_GetTick>
 8000de4:	1b80      	subs	r0, r0, r6
 8000de6:	4285      	cmp	r5, r0
 8000de8:	d300      	bcc.n	8000dec <I2C_IsAcknowledgeFailed+0x24>
 8000dea:	b96d      	cbnz	r5, 8000e08 <I2C_IsAcknowledgeFailed+0x40>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000dec:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000dee:	f043 0320 	orr.w	r3, r3, #32
 8000df2:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000df4:	2320      	movs	r3, #32
 8000df6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000dfa:	2300      	movs	r3, #0
    return HAL_ERROR;
 8000dfc:	2001      	movs	r0, #1
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000dfe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8000e02:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8000e06:	bd70      	pop	{r4, r5, r6, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000e08:	6823      	ldr	r3, [r4, #0]
 8000e0a:	6999      	ldr	r1, [r3, #24]
 8000e0c:	068a      	lsls	r2, r1, #26
 8000e0e:	d5e5      	bpl.n	8000ddc <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000e10:	2210      	movs	r2, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000e12:	2520      	movs	r5, #32
    I2C_Flush_TXDR(hi2c);
 8000e14:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000e16:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000e18:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8000e1a:	f7ff ff82 	bl	8000d22 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8000e1e:	6822      	ldr	r2, [r4, #0]
 8000e20:	6853      	ldr	r3, [r2, #4]
 8000e22:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8000e26:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8000e2a:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8000e2e:	f023 0301 	bic.w	r3, r3, #1
 8000e32:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8000e34:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000e36:	f043 0304 	orr.w	r3, r3, #4
 8000e3a:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8000e3c:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
 8000e40:	e7db      	b.n	8000dfa <I2C_IsAcknowledgeFailed+0x32>

08000e42 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8000e42:	b570      	push	{r4, r5, r6, lr}
 8000e44:	4604      	mov	r4, r0
 8000e46:	460d      	mov	r5, r1
 8000e48:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8000e4a:	6823      	ldr	r3, [r4, #0]
 8000e4c:	699b      	ldr	r3, [r3, #24]
 8000e4e:	079b      	lsls	r3, r3, #30
 8000e50:	d501      	bpl.n	8000e56 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 8000e52:	2000      	movs	r0, #0
 8000e54:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8000e56:	4632      	mov	r2, r6
 8000e58:	4629      	mov	r1, r5
 8000e5a:	4620      	mov	r0, r4
 8000e5c:	f7ff ffb4 	bl	8000dc8 <I2C_IsAcknowledgeFailed>
 8000e60:	b9a0      	cbnz	r0, 8000e8c <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8000e62:	1c6a      	adds	r2, r5, #1
 8000e64:	d0f1      	beq.n	8000e4a <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000e66:	f7ff fc07 	bl	8000678 <HAL_GetTick>
 8000e6a:	1b80      	subs	r0, r0, r6
 8000e6c:	4285      	cmp	r5, r0
 8000e6e:	d301      	bcc.n	8000e74 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8000e70:	2d00      	cmp	r5, #0
 8000e72:	d1ea      	bne.n	8000e4a <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000e74:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000e76:	f043 0320 	orr.w	r3, r3, #32
 8000e7a:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000e7c:	2320      	movs	r3, #32
 8000e7e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e82:	2300      	movs	r3, #0
 8000e84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8000e88:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8000e8c:	2001      	movs	r0, #1
}
 8000e8e:	bd70      	pop	{r4, r5, r6, pc}

08000e90 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8000e90:	b570      	push	{r4, r5, r6, lr}
 8000e92:	4604      	mov	r4, r0
 8000e94:	460d      	mov	r5, r1
 8000e96:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000e98:	6823      	ldr	r3, [r4, #0]
 8000e9a:	699b      	ldr	r3, [r3, #24]
 8000e9c:	069b      	lsls	r3, r3, #26
 8000e9e:	d501      	bpl.n	8000ea4 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8000ea0:	2000      	movs	r0, #0
 8000ea2:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8000ea4:	4632      	mov	r2, r6
 8000ea6:	4629      	mov	r1, r5
 8000ea8:	4620      	mov	r0, r4
 8000eaa:	f7ff ff8d 	bl	8000dc8 <I2C_IsAcknowledgeFailed>
 8000eae:	b990      	cbnz	r0, 8000ed6 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000eb0:	f7ff fbe2 	bl	8000678 <HAL_GetTick>
 8000eb4:	1b80      	subs	r0, r0, r6
 8000eb6:	4285      	cmp	r5, r0
 8000eb8:	d301      	bcc.n	8000ebe <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 8000eba:	2d00      	cmp	r5, #0
 8000ebc:	d1ec      	bne.n	8000e98 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000ebe:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000ec0:	f043 0320 	orr.w	r3, r3, #32
 8000ec4:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000ec6:	2320      	movs	r3, #32
 8000ec8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8000ed2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8000ed6:	2001      	movs	r0, #1
}
 8000ed8:	bd70      	pop	{r4, r5, r6, pc}

08000eda <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8000eda:	b570      	push	{r4, r5, r6, lr}
 8000edc:	4604      	mov	r4, r0
 8000ede:	460d      	mov	r5, r1
 8000ee0:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8000ee2:	6823      	ldr	r3, [r4, #0]
 8000ee4:	699b      	ldr	r3, [r3, #24]
 8000ee6:	075b      	lsls	r3, r3, #29
 8000ee8:	d40e      	bmi.n	8000f08 <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8000eea:	4632      	mov	r2, r6
 8000eec:	4629      	mov	r1, r5
 8000eee:	4620      	mov	r0, r4
 8000ef0:	f7ff ff6a 	bl	8000dc8 <I2C_IsAcknowledgeFailed>
 8000ef4:	b9f0      	cbnz	r0, 8000f34 <I2C_WaitOnRXNEFlagUntilTimeout+0x5a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8000ef6:	6823      	ldr	r3, [r4, #0]
 8000ef8:	699a      	ldr	r2, [r3, #24]
 8000efa:	0691      	lsls	r1, r2, #26
 8000efc:	d51c      	bpl.n	8000f38 <I2C_WaitOnRXNEFlagUntilTimeout+0x5e>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8000efe:	699a      	ldr	r2, [r3, #24]
 8000f00:	0752      	lsls	r2, r2, #29
 8000f02:	d503      	bpl.n	8000f0c <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
 8000f04:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8000f06:	b10a      	cbz	r2, 8000f0c <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
        return HAL_OK;
 8000f08:	2000      	movs	r0, #0
 8000f0a:	bd70      	pop	{r4, r5, r6, pc}
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000f0c:	2120      	movs	r1, #32
 8000f0e:	61d9      	str	r1, [r3, #28]
        I2C_RESET_CR2(hi2c);
 8000f10:	685a      	ldr	r2, [r3, #4]
 8000f12:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8000f16:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8000f1a:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8000f1e:	f022 0201 	bic.w	r2, r2, #1
 8000f22:	605a      	str	r2, [r3, #4]
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f24:	2300      	movs	r3, #0
 8000f26:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8000f28:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8000f30:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8000f34:	2001      	movs	r0, #1
}
 8000f36:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000f38:	f7ff fb9e 	bl	8000678 <HAL_GetTick>
 8000f3c:	1b80      	subs	r0, r0, r6
 8000f3e:	4285      	cmp	r5, r0
 8000f40:	d301      	bcc.n	8000f46 <I2C_WaitOnRXNEFlagUntilTimeout+0x6c>
 8000f42:	2d00      	cmp	r5, #0
 8000f44:	d1cd      	bne.n	8000ee2 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000f46:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000f48:	f043 0320 	orr.w	r3, r3, #32
 8000f4c:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000f4e:	2320      	movs	r3, #32
 8000f50:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      __HAL_UNLOCK(hi2c);
 8000f54:	2300      	movs	r3, #0
 8000f56:	e7eb      	b.n	8000f30 <I2C_WaitOnRXNEFlagUntilTimeout+0x56>

08000f58 <HAL_I2C_Init>:
{
 8000f58:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8000f5a:	4604      	mov	r4, r0
 8000f5c:	2800      	cmp	r0, #0
 8000f5e:	d04a      	beq.n	8000ff6 <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000f60:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000f64:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000f68:	b91b      	cbnz	r3, 8000f72 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8000f6a:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8000f6e:	f001 feeb 	bl	8002d48 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000f72:	2324      	movs	r3, #36	; 0x24
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000f74:	68e1      	ldr	r1, [r4, #12]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000f76:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000f7a:	2901      	cmp	r1, #1
  __HAL_I2C_DISABLE(hi2c);
 8000f7c:	6823      	ldr	r3, [r4, #0]
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	f022 0201 	bic.w	r2, r2, #1
 8000f84:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000f86:	6862      	ldr	r2, [r4, #4]
 8000f88:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000f8c:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000f8e:	689a      	ldr	r2, [r3, #8]
 8000f90:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000f94:	609a      	str	r2, [r3, #8]
 8000f96:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000f98:	d124      	bne.n	8000fe4 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000f9a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000f9e:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000fa0:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000fa2:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000fa4:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000fa6:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8000faa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000fae:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000fb0:	68da      	ldr	r2, [r3, #12]
 8000fb2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000fb6:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000fb8:	6922      	ldr	r2, [r4, #16]
 8000fba:	430a      	orrs	r2, r1
 8000fbc:	69a1      	ldr	r1, [r4, #24]
 8000fbe:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000fc2:	6a21      	ldr	r1, [r4, #32]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000fc4:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000fc6:	69e2      	ldr	r2, [r4, #28]
 8000fc8:	430a      	orrs	r2, r1
 8000fca:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	f042 0201 	orr.w	r2, r2, #1
 8000fd2:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8000fd4:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000fd6:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000fd8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000fdc:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000fde:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  return HAL_OK;
 8000fe2:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000fe4:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000fe8:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000fea:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000fec:	d1d8      	bne.n	8000fa0 <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000fee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ff2:	605a      	str	r2, [r3, #4]
 8000ff4:	e7d4      	b.n	8000fa0 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8000ff6:	2001      	movs	r0, #1
}
 8000ff8:	bd10      	pop	{r4, pc}
	...

08000ffc <HAL_I2C_Master_Transmit>:
{
 8000ffc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001000:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001002:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8001006:	4604      	mov	r4, r0
 8001008:	460e      	mov	r6, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 800100a:	2b20      	cmp	r3, #32
{
 800100c:	4691      	mov	r9, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800100e:	f040 8084 	bne.w	800111a <HAL_I2C_Master_Transmit+0x11e>
    __HAL_LOCK(hi2c);
 8001012:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001016:	2b01      	cmp	r3, #1
 8001018:	d07f      	beq.n	800111a <HAL_I2C_Master_Transmit+0x11e>
 800101a:	2701      	movs	r7, #1
 800101c:	f880 7040 	strb.w	r7, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8001020:	f7ff fb2a 	bl	8000678 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001024:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8001026:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001028:	9000      	str	r0, [sp, #0]
 800102a:	463a      	mov	r2, r7
 800102c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001030:	4620      	mov	r0, r4
 8001032:	f7ff fe9e 	bl	8000d72 <I2C_WaitOnFlagUntilTimeout>
 8001036:	b118      	cbz	r0, 8001040 <HAL_I2C_Master_Transmit+0x44>
      return HAL_ERROR;
 8001038:	2001      	movs	r0, #1
}
 800103a:	b003      	add	sp, #12
 800103c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001040:	2321      	movs	r3, #33	; 0x21
    hi2c->pBuffPtr  = pData;
 8001042:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 8001046:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001048:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800104c:	2310      	movs	r3, #16
 800104e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001052:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 8001054:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001058:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800105a:	b29b      	uxth	r3, r3
 800105c:	2bff      	cmp	r3, #255	; 0xff
 800105e:	4b30      	ldr	r3, [pc, #192]	; (8001120 <HAL_I2C_Master_Transmit+0x124>)
 8001060:	d926      	bls.n	80010b0 <HAL_I2C_Master_Transmit+0xb4>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001062:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001064:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001066:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001068:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800106c:	4631      	mov	r1, r6
 800106e:	4620      	mov	r0, r4
 8001070:	f7ff fe65 	bl	8000d3e <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001074:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001076:	462a      	mov	r2, r5
 8001078:	990a      	ldr	r1, [sp, #40]	; 0x28
 800107a:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 800107c:	b29b      	uxth	r3, r3
 800107e:	b9fb      	cbnz	r3, 80010c0 <HAL_I2C_Master_Transmit+0xc4>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001080:	f7ff ff06 	bl	8000e90 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001084:	2800      	cmp	r0, #0
 8001086:	d1d7      	bne.n	8001038 <HAL_I2C_Master_Transmit+0x3c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001088:	6823      	ldr	r3, [r4, #0]
 800108a:	2120      	movs	r1, #32
 800108c:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800108e:	685a      	ldr	r2, [r3, #4]
 8001090:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8001094:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8001098:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 800109c:	f022 0201 	bic.w	r2, r2, #1
 80010a0:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80010a2:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80010a6:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80010aa:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 80010ae:	e7c4      	b.n	800103a <HAL_I2C_Master_Transmit+0x3e>
      hi2c->XferSize = hi2c->XferCount;
 80010b0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80010b2:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 80010b4:	b292      	uxth	r2, r2
 80010b6:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80010b8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80010bc:	b2d2      	uxtb	r2, r2
 80010be:	e7d5      	b.n	800106c <HAL_I2C_Master_Transmit+0x70>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80010c0:	f7ff febf 	bl	8000e42 <I2C_WaitOnTXISFlagUntilTimeout>
 80010c4:	2800      	cmp	r0, #0
 80010c6:	d1b7      	bne.n	8001038 <HAL_I2C_Master_Transmit+0x3c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80010c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80010ca:	6822      	ldr	r2, [r4, #0]
 80010cc:	f813 1b01 	ldrb.w	r1, [r3], #1
 80010d0:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 80010d2:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80010d4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80010d6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80010d8:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 80010da:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 80010dc:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 80010de:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 80010e0:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80010e2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80010e4:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80010e6:	b29b      	uxth	r3, r3
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d0c3      	beq.n	8001074 <HAL_I2C_Master_Transmit+0x78>
 80010ec:	2a00      	cmp	r2, #0
 80010ee:	d1c1      	bne.n	8001074 <HAL_I2C_Master_Transmit+0x78>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80010f0:	9500      	str	r5, [sp, #0]
 80010f2:	2180      	movs	r1, #128	; 0x80
 80010f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80010f6:	4620      	mov	r0, r4
 80010f8:	f7ff fe3b 	bl	8000d72 <I2C_WaitOnFlagUntilTimeout>
 80010fc:	2800      	cmp	r0, #0
 80010fe:	d19b      	bne.n	8001038 <HAL_I2C_Master_Transmit+0x3c>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001100:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001102:	b29b      	uxth	r3, r3
 8001104:	2bff      	cmp	r3, #255	; 0xff
 8001106:	d903      	bls.n	8001110 <HAL_I2C_Master_Transmit+0x114>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001108:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800110a:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800110c:	8522      	strh	r2, [r4, #40]	; 0x28
 800110e:	e7ab      	b.n	8001068 <HAL_I2C_Master_Transmit+0x6c>
          hi2c->XferSize = hi2c->XferCount;
 8001110:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001112:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8001114:	b292      	uxth	r2, r2
 8001116:	8522      	strh	r2, [r4, #40]	; 0x28
 8001118:	e7ce      	b.n	80010b8 <HAL_I2C_Master_Transmit+0xbc>
    return HAL_BUSY;
 800111a:	2002      	movs	r0, #2
 800111c:	e78d      	b.n	800103a <HAL_I2C_Master_Transmit+0x3e>
 800111e:	bf00      	nop
 8001120:	80002000 	.word	0x80002000

08001124 <HAL_I2C_Master_Receive>:
{
 8001124:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001128:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800112a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800112e:	4604      	mov	r4, r0
 8001130:	460e      	mov	r6, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001132:	2b20      	cmp	r3, #32
{
 8001134:	4691      	mov	r9, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001136:	f040 8086 	bne.w	8001246 <HAL_I2C_Master_Receive+0x122>
    __HAL_LOCK(hi2c);
 800113a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800113e:	2b01      	cmp	r3, #1
 8001140:	f000 8081 	beq.w	8001246 <HAL_I2C_Master_Receive+0x122>
 8001144:	2701      	movs	r7, #1
 8001146:	f880 7040 	strb.w	r7, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800114a:	f7ff fa95 	bl	8000678 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800114e:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8001150:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001152:	9000      	str	r0, [sp, #0]
 8001154:	463a      	mov	r2, r7
 8001156:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800115a:	4620      	mov	r0, r4
 800115c:	f7ff fe09 	bl	8000d72 <I2C_WaitOnFlagUntilTimeout>
 8001160:	b118      	cbz	r0, 800116a <HAL_I2C_Master_Receive+0x46>
      return HAL_ERROR;
 8001162:	2001      	movs	r0, #1
}
 8001164:	b003      	add	sp, #12
 8001166:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800116a:	2322      	movs	r3, #34	; 0x22
    hi2c->pBuffPtr  = pData;
 800116c:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 8001170:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001172:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001176:	2310      	movs	r3, #16
 8001178:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800117c:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 800117e:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001182:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001184:	b29b      	uxth	r3, r3
 8001186:	2bff      	cmp	r3, #255	; 0xff
 8001188:	4b30      	ldr	r3, [pc, #192]	; (800124c <HAL_I2C_Master_Receive+0x128>)
 800118a:	d926      	bls.n	80011da <HAL_I2C_Master_Receive+0xb6>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800118c:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800118e:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001190:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001192:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001196:	4631      	mov	r1, r6
 8001198:	4620      	mov	r0, r4
 800119a:	f7ff fdd0 	bl	8000d3e <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800119e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80011a0:	462a      	mov	r2, r5
 80011a2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80011a4:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 80011a6:	b29b      	uxth	r3, r3
 80011a8:	b9fb      	cbnz	r3, 80011ea <HAL_I2C_Master_Receive+0xc6>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80011aa:	f7ff fe71 	bl	8000e90 <I2C_WaitOnSTOPFlagUntilTimeout>
 80011ae:	2800      	cmp	r0, #0
 80011b0:	d1d7      	bne.n	8001162 <HAL_I2C_Master_Receive+0x3e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80011b2:	6823      	ldr	r3, [r4, #0]
 80011b4:	2120      	movs	r1, #32
 80011b6:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80011b8:	685a      	ldr	r2, [r3, #4]
 80011ba:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 80011be:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 80011c2:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 80011c6:	f022 0201 	bic.w	r2, r2, #1
 80011ca:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80011cc:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80011d0:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80011d4:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 80011d8:	e7c4      	b.n	8001164 <HAL_I2C_Master_Receive+0x40>
      hi2c->XferSize = hi2c->XferCount;
 80011da:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80011dc:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 80011de:	b292      	uxth	r2, r2
 80011e0:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80011e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80011e6:	b2d2      	uxtb	r2, r2
 80011e8:	e7d5      	b.n	8001196 <HAL_I2C_Master_Receive+0x72>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80011ea:	f7ff fe76 	bl	8000eda <I2C_WaitOnRXNEFlagUntilTimeout>
 80011ee:	2800      	cmp	r0, #0
 80011f0:	d1b7      	bne.n	8001162 <HAL_I2C_Master_Receive+0x3e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80011f2:	6822      	ldr	r2, [r4, #0]
 80011f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80011f6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80011f8:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80011fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80011fc:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 80011fe:	3301      	adds	r3, #1
      hi2c->XferSize--;
 8001200:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 8001202:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001204:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001206:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8001208:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 800120a:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800120c:	b29b      	uxth	r3, r3
 800120e:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001210:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001212:	b29b      	uxth	r3, r3
 8001214:	2b00      	cmp	r3, #0
 8001216:	d0c2      	beq.n	800119e <HAL_I2C_Master_Receive+0x7a>
 8001218:	2a00      	cmp	r2, #0
 800121a:	d1c0      	bne.n	800119e <HAL_I2C_Master_Receive+0x7a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800121c:	9500      	str	r5, [sp, #0]
 800121e:	2180      	movs	r1, #128	; 0x80
 8001220:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001222:	4620      	mov	r0, r4
 8001224:	f7ff fda5 	bl	8000d72 <I2C_WaitOnFlagUntilTimeout>
 8001228:	2800      	cmp	r0, #0
 800122a:	d19a      	bne.n	8001162 <HAL_I2C_Master_Receive+0x3e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800122c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800122e:	b29b      	uxth	r3, r3
 8001230:	2bff      	cmp	r3, #255	; 0xff
 8001232:	d903      	bls.n	800123c <HAL_I2C_Master_Receive+0x118>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001234:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001236:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001238:	8522      	strh	r2, [r4, #40]	; 0x28
 800123a:	e7aa      	b.n	8001192 <HAL_I2C_Master_Receive+0x6e>
          hi2c->XferSize = hi2c->XferCount;
 800123c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800123e:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8001240:	b292      	uxth	r2, r2
 8001242:	8522      	strh	r2, [r4, #40]	; 0x28
 8001244:	e7cd      	b.n	80011e2 <HAL_I2C_Master_Receive+0xbe>
    return HAL_BUSY;
 8001246:	2002      	movs	r0, #2
 8001248:	e78c      	b.n	8001164 <HAL_I2C_Master_Receive+0x40>
 800124a:	bf00      	nop
 800124c:	80002400 	.word	0x80002400

08001250 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001250:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8001254:	b2d2      	uxtb	r2, r2
 8001256:	2a20      	cmp	r2, #32
{
 8001258:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 800125a:	d11d      	bne.n	8001298 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800125c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001260:	2b01      	cmp	r3, #1
 8001262:	d019      	beq.n	8001298 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001264:	2324      	movs	r3, #36	; 0x24
 8001266:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800126a:	6803      	ldr	r3, [r0, #0]
 800126c:	681c      	ldr	r4, [r3, #0]
 800126e:	f024 0401 	bic.w	r4, r4, #1
 8001272:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001274:	681c      	ldr	r4, [r3, #0]
 8001276:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 800127a:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800127c:	681c      	ldr	r4, [r3, #0]
 800127e:	4321      	orrs	r1, r4
 8001280:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001282:	6819      	ldr	r1, [r3, #0]
 8001284:	f041 0101 	orr.w	r1, r1, #1
 8001288:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800128a:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800128c:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001290:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8001294:	4618      	mov	r0, r3
 8001296:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8001298:	2002      	movs	r0, #2
  }
}
 800129a:	bd10      	pop	{r4, pc}

0800129c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800129c:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800129e:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 80012a2:	b2e4      	uxtb	r4, r4
 80012a4:	2c20      	cmp	r4, #32
 80012a6:	d11c      	bne.n	80012e2 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80012a8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80012ac:	2b01      	cmp	r3, #1
 80012ae:	d018      	beq.n	80012e2 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 80012b0:	2324      	movs	r3, #36	; 0x24
 80012b2:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80012b6:	6803      	ldr	r3, [r0, #0]
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	f022 0201 	bic.w	r2, r2, #1
 80012be:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80012c0:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80012c2:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80012c6:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80012ca:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	f042 0201 	orr.w	r2, r2, #1
 80012d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80012d4:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80012d6:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80012da:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80012de:	4618      	mov	r0, r3
 80012e0:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 80012e2:	2002      	movs	r0, #2
  }
}
 80012e4:	bd10      	pop	{r4, pc}

080012e6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80012e6:	b5f0      	push	{r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80012e8:	4604      	mov	r4, r0
{
 80012ea:	b08b      	sub	sp, #44	; 0x2c
  if (hpcd == NULL)
 80012ec:	b360      	cbz	r0, 8001348 <HAL_PCD_Init+0x62>
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80012ee:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
  USBx = hpcd->Instance;
 80012f2:	6805      	ldr	r5, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 80012f4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80012f8:	b91b      	cbnz	r3, 8001302 <HAL_PCD_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80012fa:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80012fe:	f001 fd8d 	bl	8002e1c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001302:	2303      	movs	r3, #3

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001304:	466e      	mov	r6, sp
 8001306:	1d27      	adds	r7, r4, #4
  hpcd->State = HAL_PCD_STATE_BUSY;
 8001308:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800130c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  __HAL_PCD_DISABLE(hpcd);
 800130e:	4625      	mov	r5, r4
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001310:	f413 7380 	ands.w	r3, r3, #256	; 0x100
  __HAL_PCD_DISABLE(hpcd);
 8001314:	f855 0b10 	ldr.w	r0, [r5], #16
    hpcd->Init.dma_enable = 0U;
 8001318:	bf08      	it	eq
 800131a:	6123      	streq	r3, [r4, #16]
  __HAL_PCD_DISABLE(hpcd);
 800131c:	f001 f90d 	bl	800253a <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001320:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001322:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001324:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001326:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001328:	e895 0003 	ldmia.w	r5, {r0, r1}
 800132c:	4625      	mov	r5, r4
 800132e:	e886 0003 	stmia.w	r6, {r0, r1}
 8001332:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8001336:	f855 0b10 	ldr.w	r0, [r5], #16
 800133a:	f001 f8c3 	bl	80024c4 <USB_CoreInit>
 800133e:	4606      	mov	r6, r0
 8001340:	b120      	cbz	r0, 800134c <HAL_PCD_Init+0x66>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001342:	2302      	movs	r3, #2
 8001344:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
    return HAL_ERROR;
 8001348:	2501      	movs	r5, #1
 800134a:	e054      	b.n	80013f6 <HAL_PCD_Init+0x110>
    return HAL_ERROR;
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800134c:	4601      	mov	r1, r0
 800134e:	6820      	ldr	r0, [r4, #0]
 8001350:	f001 f8f9 	bl	8002546 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001354:	4630      	mov	r0, r6
 8001356:	f8d4 e004 	ldr.w	lr, [r4, #4]
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800135a:	261c      	movs	r6, #28
 800135c:	f04f 0c01 	mov.w	ip, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001360:	4601      	mov	r1, r0
 8001362:	b2c2      	uxtb	r2, r0
 8001364:	3001      	adds	r0, #1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001366:	4596      	cmp	lr, r2
 8001368:	d81b      	bhi.n	80013a2 <HAL_PCD_Init+0xbc>
 800136a:	2300      	movs	r3, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800136c:	261c      	movs	r6, #28
 800136e:	4619      	mov	r1, r3
 8001370:	b2d8      	uxtb	r0, r3
 8001372:	3301      	adds	r3, #1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001374:	4586      	cmp	lr, r0
 8001376:	d822      	bhi.n	80013be <HAL_PCD_Init+0xd8>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001378:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800137a:	466e      	mov	r6, sp
 800137c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800137e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001380:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001382:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001386:	e886 0003 	stmia.w	r6, {r0, r1}
 800138a:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800138e:	6820      	ldr	r0, [r4, #0]
 8001390:	f001 f91a 	bl	80025c8 <USB_DevInit>
 8001394:	2301      	movs	r3, #1
 8001396:	4605      	mov	r5, r0
 8001398:	b300      	cbz	r0, 80013dc <HAL_PCD_Init+0xf6>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800139a:	2202      	movs	r2, #2
 800139c:	f884 23bd 	strb.w	r2, [r4, #957]	; 0x3bd
 80013a0:	e7d2      	b.n	8001348 <HAL_PCD_Init+0x62>
    hpcd->IN_ep[i].is_in = 1U;
 80013a2:	fb06 4302 	mla	r3, r6, r2, r4
 80013a6:	f883 c03d 	strb.w	ip, [r3, #61]	; 0x3d
    hpcd->IN_ep[i].num = i;
 80013aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 80013ae:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80013b2:	f883 103f 	strb.w	r1, [r3, #63]	; 0x3f
    hpcd->IN_ep[i].maxpacket = 0U;
 80013b6:	6459      	str	r1, [r3, #68]	; 0x44
    hpcd->IN_ep[i].xfer_buff = 0U;
 80013b8:	6499      	str	r1, [r3, #72]	; 0x48
    hpcd->IN_ep[i].xfer_len = 0U;
 80013ba:	6519      	str	r1, [r3, #80]	; 0x50
 80013bc:	e7d1      	b.n	8001362 <HAL_PCD_Init+0x7c>
    hpcd->OUT_ep[i].is_in = 0U;
 80013be:	fb06 4200 	mla	r2, r6, r0, r4
 80013c2:	f882 11fd 	strb.w	r1, [r2, #509]	; 0x1fd
    hpcd->OUT_ep[i].num = i;
 80013c6:	f882 01fc 	strb.w	r0, [r2, #508]	; 0x1fc
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80013ca:	f882 11ff 	strb.w	r1, [r2, #511]	; 0x1ff
    hpcd->OUT_ep[i].maxpacket = 0U;
 80013ce:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80013d2:	f8c2 1208 	str.w	r1, [r2, #520]	; 0x208
    hpcd->OUT_ep[i].xfer_len = 0U;
 80013d6:	f8c2 1210 	str.w	r1, [r2, #528]	; 0x210
 80013da:	e7c9      	b.n	8001370 <HAL_PCD_Init+0x8a>
    return HAL_ERROR;
  }

  hpcd->USB_Address = 0U;
 80013dc:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80013e0:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80013e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d102      	bne.n	80013f0 <HAL_PCD_Init+0x10a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80013ea:	4620      	mov	r0, r4
 80013ec:	f000 f806 	bl	80013fc <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 80013f0:	6820      	ldr	r0, [r4, #0]
 80013f2:	f001 f9a3 	bl	800273c <USB_DevDisconnect>

  return HAL_OK;
}
 80013f6:	4628      	mov	r0, r5
 80013f8:	b00b      	add	sp, #44	; 0x2c
 80013fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080013fc <HAL_PCDEx_ActivateLPM>:
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;

  hpcd->lpm_active = 1U;
 80013fc:	2101      	movs	r1, #1
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80013fe:	6802      	ldr	r2, [r0, #0]
{
 8001400:	4603      	mov	r3, r0
  hpcd->lpm_active = 1U;
 8001402:	f8c0 13fc 	str.w	r1, [r0, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8001406:	2000      	movs	r0, #0
 8001408:	f883 03f4 	strb.w	r0, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800140c:	6993      	ldr	r3, [r2, #24]
 800140e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001412:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001414:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8001416:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800141a:	f043 0303 	orr.w	r3, r3, #3
 800141e:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
}
 8001420:	4770      	bx	lr
	...

08001424 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001424:	4a02      	ldr	r2, [pc, #8]	; (8001430 <HAL_PWR_EnableBkUpAccess+0xc>)
 8001426:	6813      	ldr	r3, [r2, #0]
 8001428:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800142c:	6013      	str	r3, [r2, #0]
 800142e:	4770      	bx	lr
 8001430:	40007000 	.word	0x40007000

08001434 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8001434:	4b19      	ldr	r3, [pc, #100]	; (800149c <HAL_PWREx_EnableOverDrive+0x68>)
{
 8001436:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8001438:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800143a:	4c19      	ldr	r4, [pc, #100]	; (80014a0 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800143c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001440:	641a      	str	r2, [r3, #64]	; 0x40
 8001442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001444:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001448:	9301      	str	r3, [sp, #4]
 800144a:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 800144c:	6823      	ldr	r3, [r4, #0]
 800144e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001452:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001454:	f7ff f910 	bl	8000678 <HAL_GetTick>
 8001458:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800145a:	6863      	ldr	r3, [r4, #4]
 800145c:	03da      	lsls	r2, r3, #15
 800145e:	d50c      	bpl.n	800147a <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001460:	6823      	ldr	r3, [r4, #0]
 8001462:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001466:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001468:	f7ff f906 	bl	8000678 <HAL_GetTick>

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800146c:	4c0c      	ldr	r4, [pc, #48]	; (80014a0 <HAL_PWREx_EnableOverDrive+0x6c>)
  tickstart = HAL_GetTick();
 800146e:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001470:	6863      	ldr	r3, [r4, #4]
 8001472:	039b      	lsls	r3, r3, #14
 8001474:	d50a      	bpl.n	800148c <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8001476:	2000      	movs	r0, #0
 8001478:	e006      	b.n	8001488 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800147a:	f7ff f8fd 	bl	8000678 <HAL_GetTick>
 800147e:	1b40      	subs	r0, r0, r5
 8001480:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001484:	d9e9      	bls.n	800145a <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 8001486:	2003      	movs	r0, #3
}
 8001488:	b003      	add	sp, #12
 800148a:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800148c:	f7ff f8f4 	bl	8000678 <HAL_GetTick>
 8001490:	1b40      	subs	r0, r0, r5
 8001492:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001496:	d9eb      	bls.n	8001470 <HAL_PWREx_EnableOverDrive+0x3c>
 8001498:	e7f5      	b.n	8001486 <HAL_PWREx_EnableOverDrive+0x52>
 800149a:	bf00      	nop
 800149c:	40023800 	.word	0x40023800
 80014a0:	40007000 	.word	0x40007000

080014a4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014a4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014a8:	4604      	mov	r4, r0
 80014aa:	b908      	cbnz	r0, 80014b0 <HAL_RCC_OscConfig+0xc>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80014ac:	2001      	movs	r0, #1
 80014ae:	e03f      	b.n	8001530 <HAL_RCC_OscConfig+0x8c>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014b0:	6803      	ldr	r3, [r0, #0]
 80014b2:	07d8      	lsls	r0, r3, #31
 80014b4:	d410      	bmi.n	80014d8 <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014b6:	6823      	ldr	r3, [r4, #0]
 80014b8:	0799      	lsls	r1, r3, #30
 80014ba:	d460      	bmi.n	800157e <HAL_RCC_OscConfig+0xda>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014bc:	6823      	ldr	r3, [r4, #0]
 80014be:	0719      	lsls	r1, r3, #28
 80014c0:	f100 80a5 	bmi.w	800160e <HAL_RCC_OscConfig+0x16a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014c4:	6823      	ldr	r3, [r4, #0]
 80014c6:	075a      	lsls	r2, r3, #29
 80014c8:	f100 80c6 	bmi.w	8001658 <HAL_RCC_OscConfig+0x1b4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014cc:	69a0      	ldr	r0, [r4, #24]
 80014ce:	2800      	cmp	r0, #0
 80014d0:	f040 8130 	bne.w	8001734 <HAL_RCC_OscConfig+0x290>
      }
    }
  }
  return HAL_OK;
 80014d4:	2000      	movs	r0, #0
 80014d6:	e02b      	b.n	8001530 <HAL_RCC_OscConfig+0x8c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80014d8:	4b94      	ldr	r3, [pc, #592]	; (800172c <HAL_RCC_OscConfig+0x288>)
 80014da:	689a      	ldr	r2, [r3, #8]
 80014dc:	f002 020c 	and.w	r2, r2, #12
 80014e0:	2a04      	cmp	r2, #4
 80014e2:	d007      	beq.n	80014f4 <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014e4:	689a      	ldr	r2, [r3, #8]
 80014e6:	f002 020c 	and.w	r2, r2, #12
 80014ea:	2a08      	cmp	r2, #8
 80014ec:	d10a      	bne.n	8001504 <HAL_RCC_OscConfig+0x60>
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	025a      	lsls	r2, r3, #9
 80014f2:	d507      	bpl.n	8001504 <HAL_RCC_OscConfig+0x60>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014f4:	4b8d      	ldr	r3, [pc, #564]	; (800172c <HAL_RCC_OscConfig+0x288>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	039b      	lsls	r3, r3, #14
 80014fa:	d5dc      	bpl.n	80014b6 <HAL_RCC_OscConfig+0x12>
 80014fc:	6863      	ldr	r3, [r4, #4]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d1d9      	bne.n	80014b6 <HAL_RCC_OscConfig+0x12>
 8001502:	e7d3      	b.n	80014ac <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001504:	6863      	ldr	r3, [r4, #4]
 8001506:	4d89      	ldr	r5, [pc, #548]	; (800172c <HAL_RCC_OscConfig+0x288>)
 8001508:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800150c:	d113      	bne.n	8001536 <HAL_RCC_OscConfig+0x92>
 800150e:	682b      	ldr	r3, [r5, #0]
 8001510:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001514:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001516:	f7ff f8af 	bl	8000678 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800151a:	4d84      	ldr	r5, [pc, #528]	; (800172c <HAL_RCC_OscConfig+0x288>)
        tickstart = HAL_GetTick();
 800151c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800151e:	682b      	ldr	r3, [r5, #0]
 8001520:	039f      	lsls	r7, r3, #14
 8001522:	d4c8      	bmi.n	80014b6 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001524:	f7ff f8a8 	bl	8000678 <HAL_GetTick>
 8001528:	1b80      	subs	r0, r0, r6
 800152a:	2864      	cmp	r0, #100	; 0x64
 800152c:	d9f7      	bls.n	800151e <HAL_RCC_OscConfig+0x7a>
            return HAL_TIMEOUT;
 800152e:	2003      	movs	r0, #3
}
 8001530:	b002      	add	sp, #8
 8001532:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001536:	b99b      	cbnz	r3, 8001560 <HAL_RCC_OscConfig+0xbc>
 8001538:	682b      	ldr	r3, [r5, #0]
 800153a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800153e:	602b      	str	r3, [r5, #0]
 8001540:	682b      	ldr	r3, [r5, #0]
 8001542:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001546:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001548:	f7ff f896 	bl	8000678 <HAL_GetTick>
 800154c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800154e:	682b      	ldr	r3, [r5, #0]
 8001550:	0398      	lsls	r0, r3, #14
 8001552:	d5b0      	bpl.n	80014b6 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001554:	f7ff f890 	bl	8000678 <HAL_GetTick>
 8001558:	1b80      	subs	r0, r0, r6
 800155a:	2864      	cmp	r0, #100	; 0x64
 800155c:	d9f7      	bls.n	800154e <HAL_RCC_OscConfig+0xaa>
 800155e:	e7e6      	b.n	800152e <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001560:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001564:	682b      	ldr	r3, [r5, #0]
 8001566:	d103      	bne.n	8001570 <HAL_RCC_OscConfig+0xcc>
 8001568:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800156c:	602b      	str	r3, [r5, #0]
 800156e:	e7ce      	b.n	800150e <HAL_RCC_OscConfig+0x6a>
 8001570:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001574:	602b      	str	r3, [r5, #0]
 8001576:	682b      	ldr	r3, [r5, #0]
 8001578:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800157c:	e7ca      	b.n	8001514 <HAL_RCC_OscConfig+0x70>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800157e:	4b6b      	ldr	r3, [pc, #428]	; (800172c <HAL_RCC_OscConfig+0x288>)
 8001580:	689a      	ldr	r2, [r3, #8]
 8001582:	f012 0f0c 	tst.w	r2, #12
 8001586:	d007      	beq.n	8001598 <HAL_RCC_OscConfig+0xf4>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001588:	689a      	ldr	r2, [r3, #8]
 800158a:	f002 020c 	and.w	r2, r2, #12
 800158e:	2a08      	cmp	r2, #8
 8001590:	d111      	bne.n	80015b6 <HAL_RCC_OscConfig+0x112>
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	0259      	lsls	r1, r3, #9
 8001596:	d40e      	bmi.n	80015b6 <HAL_RCC_OscConfig+0x112>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001598:	4b64      	ldr	r3, [pc, #400]	; (800172c <HAL_RCC_OscConfig+0x288>)
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	0792      	lsls	r2, r2, #30
 800159e:	d502      	bpl.n	80015a6 <HAL_RCC_OscConfig+0x102>
 80015a0:	68e2      	ldr	r2, [r4, #12]
 80015a2:	2a01      	cmp	r2, #1
 80015a4:	d182      	bne.n	80014ac <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	6921      	ldr	r1, [r4, #16]
 80015aa:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80015ae:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80015b2:	601a      	str	r2, [r3, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015b4:	e782      	b.n	80014bc <HAL_RCC_OscConfig+0x18>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80015b6:	68e3      	ldr	r3, [r4, #12]
 80015b8:	4d5c      	ldr	r5, [pc, #368]	; (800172c <HAL_RCC_OscConfig+0x288>)
 80015ba:	b1bb      	cbz	r3, 80015ec <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_ENABLE();
 80015bc:	682b      	ldr	r3, [r5, #0]
 80015be:	f043 0301 	orr.w	r3, r3, #1
 80015c2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80015c4:	f7ff f858 	bl	8000678 <HAL_GetTick>
 80015c8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015ca:	682b      	ldr	r3, [r5, #0]
 80015cc:	079f      	lsls	r7, r3, #30
 80015ce:	d507      	bpl.n	80015e0 <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015d0:	682b      	ldr	r3, [r5, #0]
 80015d2:	6922      	ldr	r2, [r4, #16]
 80015d4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80015d8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80015dc:	602b      	str	r3, [r5, #0]
 80015de:	e76d      	b.n	80014bc <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015e0:	f7ff f84a 	bl	8000678 <HAL_GetTick>
 80015e4:	1b80      	subs	r0, r0, r6
 80015e6:	2802      	cmp	r0, #2
 80015e8:	d9ef      	bls.n	80015ca <HAL_RCC_OscConfig+0x126>
 80015ea:	e7a0      	b.n	800152e <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_HSI_DISABLE();
 80015ec:	682b      	ldr	r3, [r5, #0]
 80015ee:	f023 0301 	bic.w	r3, r3, #1
 80015f2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80015f4:	f7ff f840 	bl	8000678 <HAL_GetTick>
 80015f8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015fa:	682b      	ldr	r3, [r5, #0]
 80015fc:	0798      	lsls	r0, r3, #30
 80015fe:	f57f af5d 	bpl.w	80014bc <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001602:	f7ff f839 	bl	8000678 <HAL_GetTick>
 8001606:	1b80      	subs	r0, r0, r6
 8001608:	2802      	cmp	r0, #2
 800160a:	d9f6      	bls.n	80015fa <HAL_RCC_OscConfig+0x156>
 800160c:	e78f      	b.n	800152e <HAL_RCC_OscConfig+0x8a>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800160e:	6963      	ldr	r3, [r4, #20]
 8001610:	4d46      	ldr	r5, [pc, #280]	; (800172c <HAL_RCC_OscConfig+0x288>)
 8001612:	b183      	cbz	r3, 8001636 <HAL_RCC_OscConfig+0x192>
      __HAL_RCC_LSI_ENABLE();
 8001614:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001616:	f043 0301 	orr.w	r3, r3, #1
 800161a:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800161c:	f7ff f82c 	bl	8000678 <HAL_GetTick>
 8001620:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001622:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001624:	079b      	lsls	r3, r3, #30
 8001626:	f53f af4d 	bmi.w	80014c4 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800162a:	f7ff f825 	bl	8000678 <HAL_GetTick>
 800162e:	1b80      	subs	r0, r0, r6
 8001630:	2802      	cmp	r0, #2
 8001632:	d9f6      	bls.n	8001622 <HAL_RCC_OscConfig+0x17e>
 8001634:	e77b      	b.n	800152e <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_LSI_DISABLE();
 8001636:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001638:	f023 0301 	bic.w	r3, r3, #1
 800163c:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800163e:	f7ff f81b 	bl	8000678 <HAL_GetTick>
 8001642:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001644:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001646:	079f      	lsls	r7, r3, #30
 8001648:	f57f af3c 	bpl.w	80014c4 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800164c:	f7ff f814 	bl	8000678 <HAL_GetTick>
 8001650:	1b80      	subs	r0, r0, r6
 8001652:	2802      	cmp	r0, #2
 8001654:	d9f6      	bls.n	8001644 <HAL_RCC_OscConfig+0x1a0>
 8001656:	e76a      	b.n	800152e <HAL_RCC_OscConfig+0x8a>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001658:	4b34      	ldr	r3, [pc, #208]	; (800172c <HAL_RCC_OscConfig+0x288>)
 800165a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800165c:	00d0      	lsls	r0, r2, #3
 800165e:	d427      	bmi.n	80016b0 <HAL_RCC_OscConfig+0x20c>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001660:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 8001662:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001664:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001668:	641a      	str	r2, [r3, #64]	; 0x40
 800166a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001670:	9301      	str	r3, [sp, #4]
 8001672:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001674:	4d2e      	ldr	r5, [pc, #184]	; (8001730 <HAL_RCC_OscConfig+0x28c>)
 8001676:	682b      	ldr	r3, [r5, #0]
 8001678:	05d9      	lsls	r1, r3, #23
 800167a:	d51b      	bpl.n	80016b4 <HAL_RCC_OscConfig+0x210>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800167c:	68a3      	ldr	r3, [r4, #8]
 800167e:	4d2b      	ldr	r5, [pc, #172]	; (800172c <HAL_RCC_OscConfig+0x288>)
 8001680:	2b01      	cmp	r3, #1
 8001682:	d127      	bne.n	80016d4 <HAL_RCC_OscConfig+0x230>
 8001684:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001686:	f043 0301 	orr.w	r3, r3, #1
 800168a:	672b      	str	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800168c:	f241 3588 	movw	r5, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001690:	f7fe fff2 	bl	8000678 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001694:	4f25      	ldr	r7, [pc, #148]	; (800172c <HAL_RCC_OscConfig+0x288>)
      tickstart = HAL_GetTick();
 8001696:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001698:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800169a:	079b      	lsls	r3, r3, #30
 800169c:	d53f      	bpl.n	800171e <HAL_RCC_OscConfig+0x27a>
    if (pwrclkchanged == SET)
 800169e:	2e00      	cmp	r6, #0
 80016a0:	f43f af14 	beq.w	80014cc <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 80016a4:	4a21      	ldr	r2, [pc, #132]	; (800172c <HAL_RCC_OscConfig+0x288>)
 80016a6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80016a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016ac:	6413      	str	r3, [r2, #64]	; 0x40
 80016ae:	e70d      	b.n	80014cc <HAL_RCC_OscConfig+0x28>
  FlagStatus pwrclkchanged = RESET;
 80016b0:	2600      	movs	r6, #0
 80016b2:	e7df      	b.n	8001674 <HAL_RCC_OscConfig+0x1d0>
      PWR->CR1 |= PWR_CR1_DBP;
 80016b4:	682b      	ldr	r3, [r5, #0]
 80016b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016ba:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80016bc:	f7fe ffdc 	bl	8000678 <HAL_GetTick>
 80016c0:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016c2:	682b      	ldr	r3, [r5, #0]
 80016c4:	05da      	lsls	r2, r3, #23
 80016c6:	d4d9      	bmi.n	800167c <HAL_RCC_OscConfig+0x1d8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016c8:	f7fe ffd6 	bl	8000678 <HAL_GetTick>
 80016cc:	1bc0      	subs	r0, r0, r7
 80016ce:	2864      	cmp	r0, #100	; 0x64
 80016d0:	d9f7      	bls.n	80016c2 <HAL_RCC_OscConfig+0x21e>
 80016d2:	e72c      	b.n	800152e <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016d4:	b9ab      	cbnz	r3, 8001702 <HAL_RCC_OscConfig+0x25e>
 80016d6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016d8:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016dc:	f023 0301 	bic.w	r3, r3, #1
 80016e0:	672b      	str	r3, [r5, #112]	; 0x70
 80016e2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80016e4:	f023 0304 	bic.w	r3, r3, #4
 80016e8:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80016ea:	f7fe ffc5 	bl	8000678 <HAL_GetTick>
 80016ee:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016f0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80016f2:	0798      	lsls	r0, r3, #30
 80016f4:	d5d3      	bpl.n	800169e <HAL_RCC_OscConfig+0x1fa>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016f6:	f7fe ffbf 	bl	8000678 <HAL_GetTick>
 80016fa:	1bc0      	subs	r0, r0, r7
 80016fc:	4540      	cmp	r0, r8
 80016fe:	d9f7      	bls.n	80016f0 <HAL_RCC_OscConfig+0x24c>
 8001700:	e715      	b.n	800152e <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001702:	2b05      	cmp	r3, #5
 8001704:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001706:	d103      	bne.n	8001710 <HAL_RCC_OscConfig+0x26c>
 8001708:	f043 0304 	orr.w	r3, r3, #4
 800170c:	672b      	str	r3, [r5, #112]	; 0x70
 800170e:	e7b9      	b.n	8001684 <HAL_RCC_OscConfig+0x1e0>
 8001710:	f023 0301 	bic.w	r3, r3, #1
 8001714:	672b      	str	r3, [r5, #112]	; 0x70
 8001716:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001718:	f023 0304 	bic.w	r3, r3, #4
 800171c:	e7b5      	b.n	800168a <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800171e:	f7fe ffab 	bl	8000678 <HAL_GetTick>
 8001722:	eba0 0008 	sub.w	r0, r0, r8
 8001726:	42a8      	cmp	r0, r5
 8001728:	d9b6      	bls.n	8001698 <HAL_RCC_OscConfig+0x1f4>
 800172a:	e700      	b.n	800152e <HAL_RCC_OscConfig+0x8a>
 800172c:	40023800 	.word	0x40023800
 8001730:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001734:	4d3c      	ldr	r5, [pc, #240]	; (8001828 <HAL_RCC_OscConfig+0x384>)
 8001736:	68ab      	ldr	r3, [r5, #8]
 8001738:	f003 030c 	and.w	r3, r3, #12
 800173c:	2b08      	cmp	r3, #8
 800173e:	d042      	beq.n	80017c6 <HAL_RCC_OscConfig+0x322>
        __HAL_RCC_PLL_DISABLE();
 8001740:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001742:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8001744:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001748:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800174a:	d12f      	bne.n	80017ac <HAL_RCC_OscConfig+0x308>
        tickstart = HAL_GetTick();
 800174c:	f7fe ff94 	bl	8000678 <HAL_GetTick>
 8001750:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001752:	682b      	ldr	r3, [r5, #0]
 8001754:	0199      	lsls	r1, r3, #6
 8001756:	d423      	bmi.n	80017a0 <HAL_RCC_OscConfig+0x2fc>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001758:	6a22      	ldr	r2, [r4, #32]
 800175a:	69e3      	ldr	r3, [r4, #28]
 800175c:	4313      	orrs	r3, r2
 800175e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001760:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001764:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001766:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800176a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800176c:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001770:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001772:	4c2d      	ldr	r4, [pc, #180]	; (8001828 <HAL_RCC_OscConfig+0x384>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001774:	0852      	lsrs	r2, r2, #1
 8001776:	3a01      	subs	r2, #1
 8001778:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800177c:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800177e:	682b      	ldr	r3, [r5, #0]
 8001780:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001784:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001786:	f7fe ff77 	bl	8000678 <HAL_GetTick>
 800178a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800178c:	6823      	ldr	r3, [r4, #0]
 800178e:	019a      	lsls	r2, r3, #6
 8001790:	f53f aea0 	bmi.w	80014d4 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001794:	f7fe ff70 	bl	8000678 <HAL_GetTick>
 8001798:	1b40      	subs	r0, r0, r5
 800179a:	2802      	cmp	r0, #2
 800179c:	d9f6      	bls.n	800178c <HAL_RCC_OscConfig+0x2e8>
 800179e:	e6c6      	b.n	800152e <HAL_RCC_OscConfig+0x8a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017a0:	f7fe ff6a 	bl	8000678 <HAL_GetTick>
 80017a4:	1b80      	subs	r0, r0, r6
 80017a6:	2802      	cmp	r0, #2
 80017a8:	d9d3      	bls.n	8001752 <HAL_RCC_OscConfig+0x2ae>
 80017aa:	e6c0      	b.n	800152e <HAL_RCC_OscConfig+0x8a>
        tickstart = HAL_GetTick();
 80017ac:	f7fe ff64 	bl	8000678 <HAL_GetTick>
 80017b0:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017b2:	682b      	ldr	r3, [r5, #0]
 80017b4:	019b      	lsls	r3, r3, #6
 80017b6:	f57f ae8d 	bpl.w	80014d4 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017ba:	f7fe ff5d 	bl	8000678 <HAL_GetTick>
 80017be:	1b00      	subs	r0, r0, r4
 80017c0:	2802      	cmp	r0, #2
 80017c2:	d9f6      	bls.n	80017b2 <HAL_RCC_OscConfig+0x30e>
 80017c4:	e6b3      	b.n	800152e <HAL_RCC_OscConfig+0x8a>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017c6:	2801      	cmp	r0, #1
      pll_config = RCC->PLLCFGR;
 80017c8:	686b      	ldr	r3, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017ca:	f43f aeb1 	beq.w	8001530 <HAL_RCC_OscConfig+0x8c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017ce:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017d2:	69e1      	ldr	r1, [r4, #28]
 80017d4:	428a      	cmp	r2, r1
 80017d6:	f47f ae69 	bne.w	80014ac <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80017da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017de:	6a21      	ldr	r1, [r4, #32]
 80017e0:	428a      	cmp	r2, r1
 80017e2:	f47f ae63 	bne.w	80014ac <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80017e6:	f647 72c0 	movw	r2, #32704	; 0x7fc0
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017ea:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80017ec:	401a      	ands	r2, r3
 80017ee:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 80017f2:	f47f ae5b 	bne.w	80014ac <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80017f6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80017f8:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 80017fc:	0852      	lsrs	r2, r2, #1
 80017fe:	3a01      	subs	r2, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001800:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8001804:	f47f ae52 	bne.w	80014ac <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001808:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800180c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800180e:	ebb2 6f01 	cmp.w	r2, r1, lsl #24
 8001812:	f47f ae4b 	bne.w	80014ac <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001816:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001818:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800181c:	ebb3 7f02 	cmp.w	r3, r2, lsl #28
    return HAL_ERROR;
 8001820:	bf14      	ite	ne
 8001822:	2001      	movne	r0, #1
 8001824:	2000      	moveq	r0, #0
 8001826:	e683      	b.n	8001530 <HAL_RCC_OscConfig+0x8c>
 8001828:	40023800 	.word	0x40023800

0800182c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800182c:	4913      	ldr	r1, [pc, #76]	; (800187c <HAL_RCC_GetSysClockFreq+0x50>)
{
 800182e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001830:	688b      	ldr	r3, [r1, #8]
 8001832:	f003 030c 	and.w	r3, r3, #12
 8001836:	2b04      	cmp	r3, #4
 8001838:	d003      	beq.n	8001842 <HAL_RCC_GetSysClockFreq+0x16>
 800183a:	2b08      	cmp	r3, #8
 800183c:	d003      	beq.n	8001846 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800183e:	4810      	ldr	r0, [pc, #64]	; (8001880 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001840:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8001842:	4810      	ldr	r0, [pc, #64]	; (8001884 <HAL_RCC_GetSysClockFreq+0x58>)
 8001844:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001846:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001848:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800184a:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800184c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001850:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001854:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001858:	bf1a      	itte	ne
 800185a:	480a      	ldrne	r0, [pc, #40]	; (8001884 <HAL_RCC_GetSysClockFreq+0x58>)
 800185c:	2300      	movne	r3, #0
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800185e:	4808      	ldreq	r0, [pc, #32]	; (8001880 <HAL_RCC_GetSysClockFreq+0x54>)
 8001860:	fba1 0100 	umull	r0, r1, r1, r0
 8001864:	f7fe fd44 	bl	80002f0 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001868:	4b04      	ldr	r3, [pc, #16]	; (800187c <HAL_RCC_GetSysClockFreq+0x50>)
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001870:	3301      	adds	r3, #1
 8001872:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco / pllp;
 8001874:	fbb0 f0f3 	udiv	r0, r0, r3
 8001878:	bd08      	pop	{r3, pc}
 800187a:	bf00      	nop
 800187c:	40023800 	.word	0x40023800
 8001880:	00f42400 	.word	0x00f42400
 8001884:	007a1200 	.word	0x007a1200

08001888 <HAL_RCC_ClockConfig>:
{
 8001888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800188c:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800188e:	4604      	mov	r4, r0
 8001890:	b910      	cbnz	r0, 8001898 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001892:	2001      	movs	r0, #1
 8001894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001898:	4a46      	ldr	r2, [pc, #280]	; (80019b4 <HAL_RCC_ClockConfig+0x12c>)
 800189a:	6813      	ldr	r3, [r2, #0]
 800189c:	f003 030f 	and.w	r3, r3, #15
 80018a0:	428b      	cmp	r3, r1
 80018a2:	d329      	bcc.n	80018f8 <HAL_RCC_ClockConfig+0x70>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018a4:	6821      	ldr	r1, [r4, #0]
 80018a6:	078f      	lsls	r7, r1, #30
 80018a8:	d431      	bmi.n	800190e <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018aa:	07c8      	lsls	r0, r1, #31
 80018ac:	d444      	bmi.n	8001938 <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80018ae:	4a41      	ldr	r2, [pc, #260]	; (80019b4 <HAL_RCC_ClockConfig+0x12c>)
 80018b0:	6813      	ldr	r3, [r2, #0]
 80018b2:	f003 030f 	and.w	r3, r3, #15
 80018b6:	429d      	cmp	r5, r3
 80018b8:	d368      	bcc.n	800198c <HAL_RCC_ClockConfig+0x104>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018ba:	6822      	ldr	r2, [r4, #0]
 80018bc:	0751      	lsls	r1, r2, #29
 80018be:	d471      	bmi.n	80019a4 <HAL_RCC_ClockConfig+0x11c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018c0:	0713      	lsls	r3, r2, #28
 80018c2:	d507      	bpl.n	80018d4 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80018c4:	4a3c      	ldr	r2, [pc, #240]	; (80019b8 <HAL_RCC_ClockConfig+0x130>)
 80018c6:	6921      	ldr	r1, [r4, #16]
 80018c8:	6893      	ldr	r3, [r2, #8]
 80018ca:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80018ce:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80018d2:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80018d4:	f7ff ffaa 	bl	800182c <HAL_RCC_GetSysClockFreq>
 80018d8:	4b37      	ldr	r3, [pc, #220]	; (80019b8 <HAL_RCC_ClockConfig+0x130>)
 80018da:	4a38      	ldr	r2, [pc, #224]	; (80019bc <HAL_RCC_ClockConfig+0x134>)
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80018e2:	5cd3      	ldrb	r3, [r2, r3]
 80018e4:	40d8      	lsrs	r0, r3
 80018e6:	4b36      	ldr	r3, [pc, #216]	; (80019c0 <HAL_RCC_ClockConfig+0x138>)
 80018e8:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80018ea:	4b36      	ldr	r3, [pc, #216]	; (80019c4 <HAL_RCC_ClockConfig+0x13c>)
 80018ec:	6818      	ldr	r0, [r3, #0]
 80018ee:	f7fe fe87 	bl	8000600 <HAL_InitTick>
  return HAL_OK;
 80018f2:	2000      	movs	r0, #0
 80018f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018f8:	6813      	ldr	r3, [r2, #0]
 80018fa:	f023 030f 	bic.w	r3, r3, #15
 80018fe:	430b      	orrs	r3, r1
 8001900:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001902:	6813      	ldr	r3, [r2, #0]
 8001904:	f003 030f 	and.w	r3, r3, #15
 8001908:	4299      	cmp	r1, r3
 800190a:	d1c2      	bne.n	8001892 <HAL_RCC_ClockConfig+0xa>
 800190c:	e7ca      	b.n	80018a4 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800190e:	f011 0f04 	tst.w	r1, #4
 8001912:	4b29      	ldr	r3, [pc, #164]	; (80019b8 <HAL_RCC_ClockConfig+0x130>)
 8001914:	d003      	beq.n	800191e <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001916:	689a      	ldr	r2, [r3, #8]
 8001918:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 800191c:	609a      	str	r2, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800191e:	070e      	lsls	r6, r1, #28
 8001920:	d503      	bpl.n	800192a <HAL_RCC_ClockConfig+0xa2>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001922:	689a      	ldr	r2, [r3, #8]
 8001924:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8001928:	609a      	str	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800192a:	689a      	ldr	r2, [r3, #8]
 800192c:	68a0      	ldr	r0, [r4, #8]
 800192e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001932:	4302      	orrs	r2, r0
 8001934:	609a      	str	r2, [r3, #8]
 8001936:	e7b8      	b.n	80018aa <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001938:	6861      	ldr	r1, [r4, #4]
 800193a:	4b1f      	ldr	r3, [pc, #124]	; (80019b8 <HAL_RCC_ClockConfig+0x130>)
 800193c:	2901      	cmp	r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800193e:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001940:	d11c      	bne.n	800197c <HAL_RCC_ClockConfig+0xf4>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001942:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001946:	d0a4      	beq.n	8001892 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001948:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800194a:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800194e:	4e1a      	ldr	r6, [pc, #104]	; (80019b8 <HAL_RCC_ClockConfig+0x130>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001950:	f022 0203 	bic.w	r2, r2, #3
 8001954:	430a      	orrs	r2, r1
 8001956:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8001958:	f7fe fe8e 	bl	8000678 <HAL_GetTick>
 800195c:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800195e:	68b3      	ldr	r3, [r6, #8]
 8001960:	6862      	ldr	r2, [r4, #4]
 8001962:	f003 030c 	and.w	r3, r3, #12
 8001966:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800196a:	d0a0      	beq.n	80018ae <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800196c:	f7fe fe84 	bl	8000678 <HAL_GetTick>
 8001970:	1bc0      	subs	r0, r0, r7
 8001972:	4540      	cmp	r0, r8
 8001974:	d9f3      	bls.n	800195e <HAL_RCC_ClockConfig+0xd6>
        return HAL_TIMEOUT;
 8001976:	2003      	movs	r0, #3
}
 8001978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800197c:	2902      	cmp	r1, #2
 800197e:	d102      	bne.n	8001986 <HAL_RCC_ClockConfig+0xfe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001980:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001984:	e7df      	b.n	8001946 <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001986:	f012 0f02 	tst.w	r2, #2
 800198a:	e7dc      	b.n	8001946 <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800198c:	6813      	ldr	r3, [r2, #0]
 800198e:	f023 030f 	bic.w	r3, r3, #15
 8001992:	432b      	orrs	r3, r5
 8001994:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001996:	6813      	ldr	r3, [r2, #0]
 8001998:	f003 030f 	and.w	r3, r3, #15
 800199c:	429d      	cmp	r5, r3
 800199e:	f47f af78 	bne.w	8001892 <HAL_RCC_ClockConfig+0xa>
 80019a2:	e78a      	b.n	80018ba <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019a4:	4904      	ldr	r1, [pc, #16]	; (80019b8 <HAL_RCC_ClockConfig+0x130>)
 80019a6:	68e0      	ldr	r0, [r4, #12]
 80019a8:	688b      	ldr	r3, [r1, #8]
 80019aa:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80019ae:	4303      	orrs	r3, r0
 80019b0:	608b      	str	r3, [r1, #8]
 80019b2:	e785      	b.n	80018c0 <HAL_RCC_ClockConfig+0x38>
 80019b4:	40023c00 	.word	0x40023c00
 80019b8:	40023800 	.word	0x40023800
 80019bc:	080038da 	.word	0x080038da
 80019c0:	20020014 	.word	0x20020014
 80019c4:	20020004 	.word	0x20020004

080019c8 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80019c8:	4b01      	ldr	r3, [pc, #4]	; (80019d0 <HAL_RCC_GetHCLKFreq+0x8>)
 80019ca:	6818      	ldr	r0, [r3, #0]
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	20020014 	.word	0x20020014

080019d4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80019d4:	4b04      	ldr	r3, [pc, #16]	; (80019e8 <HAL_RCC_GetPCLK1Freq+0x14>)
 80019d6:	4a05      	ldr	r2, [pc, #20]	; (80019ec <HAL_RCC_GetPCLK1Freq+0x18>)
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80019de:	5cd3      	ldrb	r3, [r2, r3]
 80019e0:	4a03      	ldr	r2, [pc, #12]	; (80019f0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80019e2:	6810      	ldr	r0, [r2, #0]
}
 80019e4:	40d8      	lsrs	r0, r3
 80019e6:	4770      	bx	lr
 80019e8:	40023800 	.word	0x40023800
 80019ec:	080038ea 	.word	0x080038ea
 80019f0:	20020014 	.word	0x20020014

080019f4 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80019f4:	4b04      	ldr	r3, [pc, #16]	; (8001a08 <HAL_RCC_GetPCLK2Freq+0x14>)
 80019f6:	4a05      	ldr	r2, [pc, #20]	; (8001a0c <HAL_RCC_GetPCLK2Freq+0x18>)
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80019fe:	5cd3      	ldrb	r3, [r2, r3]
 8001a00:	4a03      	ldr	r2, [pc, #12]	; (8001a10 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001a02:	6810      	ldr	r0, [r2, #0]
}
 8001a04:	40d8      	lsrs	r0, r3
 8001a06:	4770      	bx	lr
 8001a08:	40023800 	.word	0x40023800
 8001a0c:	080038ea 	.word	0x080038ea
 8001a10:	20020014 	.word	0x20020014

08001a14 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001a14:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001a18:	6802      	ldr	r2, [r0, #0]
{
 8001a1a:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001a1c:	f012 0601 	ands.w	r6, r2, #1
 8001a20:	d00b      	beq.n	8001a3a <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001a22:	4bba      	ldr	r3, [pc, #744]	; (8001d0c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001a24:	6899      	ldr	r1, [r3, #8]
 8001a26:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 8001a2a:	6099      	str	r1, [r3, #8]
 8001a2c:	6b46      	ldr	r6, [r0, #52]	; 0x34
 8001a2e:	6899      	ldr	r1, [r3, #8]
 8001a30:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001a32:	fab6 f686 	clz	r6, r6
 8001a36:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001a38:	6099      	str	r1, [r3, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001a3a:	f412 2500 	ands.w	r5, r2, #524288	; 0x80000
 8001a3e:	d012      	beq.n	8001a66 <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001a40:	49b2      	ldr	r1, [pc, #712]	; (8001d0c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001a42:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8001a44:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001a48:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001a4c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
    {
      plli2sused = 1;
 8001a50:	bf08      	it	eq
 8001a52:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001a54:	ea43 0305 	orr.w	r3, r3, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001a58:	bf16      	itet	ne
 8001a5a:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 8001a5e:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001a60:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001a62:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001a66:	02d7      	lsls	r7, r2, #11
 8001a68:	d510      	bpl.n	8001a8c <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001a6a:	48a8      	ldr	r0, [pc, #672]	; (8001d0c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001a6c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001a6e:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001a72:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001a76:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001a7a:	ea43 0301 	orr.w	r3, r3, r1
 8001a7e:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001a82:	f000 81a9 	beq.w	8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 8001a86:	2900      	cmp	r1, #0
 8001a88:	bf08      	it	eq
 8001a8a:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 8001a8c:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
 8001a90:	bf18      	it	ne
 8001a92:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001a94:	0690      	lsls	r0, r2, #26
 8001a96:	d531      	bpl.n	8001afc <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001a98:	4b9c      	ldr	r3, [pc, #624]	; (8001d0c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001a9a:	4f9d      	ldr	r7, [pc, #628]	; (8001d10 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8001a9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a9e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001aa2:	641a      	str	r2, [r3, #64]	; 0x40
 8001aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aaa:	9301      	str	r3, [sp, #4]
 8001aac:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ab4:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ab6:	f7fe fddf 	bl	8000678 <HAL_GetTick>
 8001aba:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	05d9      	lsls	r1, r3, #23
 8001ac0:	f140 818c 	bpl.w	8001ddc <HAL_RCCEx_PeriphCLKConfig+0x3c8>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001ac4:	4f91      	ldr	r7, [pc, #580]	; (8001d0c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001ac6:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001ac8:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001acc:	f040 8191 	bne.w	8001df2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ad0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001ad2:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8001ad6:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8001ada:	4a8c      	ldr	r2, [pc, #560]	; (8001d0c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001adc:	f040 81af 	bne.w	8001e3e <HAL_RCCEx_PeriphCLKConfig+0x42a>
 8001ae0:	6891      	ldr	r1, [r2, #8]
 8001ae2:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8001ae6:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8001aea:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8001aee:	4301      	orrs	r1, r0
 8001af0:	6091      	str	r1, [r2, #8]
 8001af2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001af6:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8001af8:	430b      	orrs	r3, r1
 8001afa:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001afc:	6823      	ldr	r3, [r4, #0]
 8001afe:	06df      	lsls	r7, r3, #27
 8001b00:	d50c      	bpl.n	8001b1c <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001b02:	4a82      	ldr	r2, [pc, #520]	; (8001d0c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001b04:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8001b08:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8001b0c:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 8001b10:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8001b14:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001b16:	4301      	orrs	r1, r0
 8001b18:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001b1c:	0458      	lsls	r0, r3, #17
 8001b1e:	d508      	bpl.n	8001b32 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001b20:	497a      	ldr	r1, [pc, #488]	; (8001d0c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001b22:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8001b24:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001b28:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001b2c:	4302      	orrs	r2, r0
 8001b2e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001b32:	0419      	lsls	r1, r3, #16
 8001b34:	d508      	bpl.n	8001b48 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001b36:	4975      	ldr	r1, [pc, #468]	; (8001d0c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001b38:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8001b3a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001b3e:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8001b42:	4302      	orrs	r2, r0
 8001b44:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001b48:	03da      	lsls	r2, r3, #15
 8001b4a:	d508      	bpl.n	8001b5e <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001b4c:	496f      	ldr	r1, [pc, #444]	; (8001d0c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001b4e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8001b50:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001b54:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001b58:	4302      	orrs	r2, r0
 8001b5a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001b5e:	039f      	lsls	r7, r3, #14
 8001b60:	d508      	bpl.n	8001b74 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001b62:	496a      	ldr	r1, [pc, #424]	; (8001d0c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001b64:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8001b66:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001b6a:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8001b6e:	4302      	orrs	r2, r0
 8001b70:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001b74:	0658      	lsls	r0, r3, #25
 8001b76:	d508      	bpl.n	8001b8a <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001b78:	4964      	ldr	r1, [pc, #400]	; (8001d0c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001b7a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8001b7c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001b80:	f022 0203 	bic.w	r2, r2, #3
 8001b84:	4302      	orrs	r2, r0
 8001b86:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001b8a:	0619      	lsls	r1, r3, #24
 8001b8c:	d508      	bpl.n	8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001b8e:	495f      	ldr	r1, [pc, #380]	; (8001d0c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001b90:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8001b92:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001b96:	f022 020c 	bic.w	r2, r2, #12
 8001b9a:	4302      	orrs	r2, r0
 8001b9c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001ba0:	05da      	lsls	r2, r3, #23
 8001ba2:	d508      	bpl.n	8001bb6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001ba4:	4959      	ldr	r1, [pc, #356]	; (8001d0c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001ba6:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8001ba8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001bac:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8001bb0:	4302      	orrs	r2, r0
 8001bb2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001bb6:	059f      	lsls	r7, r3, #22
 8001bb8:	d508      	bpl.n	8001bcc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001bba:	4954      	ldr	r1, [pc, #336]	; (8001d0c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001bbc:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8001bbe:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001bc2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8001bc6:	4302      	orrs	r2, r0
 8001bc8:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001bcc:	0558      	lsls	r0, r3, #21
 8001bce:	d508      	bpl.n	8001be2 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001bd0:	494e      	ldr	r1, [pc, #312]	; (8001d0c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001bd2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001bd4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001bd8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001bdc:	4302      	orrs	r2, r0
 8001bde:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001be2:	0519      	lsls	r1, r3, #20
 8001be4:	d508      	bpl.n	8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001be6:	4949      	ldr	r1, [pc, #292]	; (8001d0c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001be8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001bea:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001bee:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001bf2:	4302      	orrs	r2, r0
 8001bf4:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001bf8:	04da      	lsls	r2, r3, #19
 8001bfa:	d508      	bpl.n	8001c0e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001bfc:	4943      	ldr	r1, [pc, #268]	; (8001d0c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001bfe:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8001c00:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001c04:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001c08:	4302      	orrs	r2, r0
 8001c0a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001c0e:	049f      	lsls	r7, r3, #18
 8001c10:	d508      	bpl.n	8001c24 <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001c12:	493e      	ldr	r1, [pc, #248]	; (8001d0c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001c14:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8001c16:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001c1a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8001c1e:	4302      	orrs	r2, r0
 8001c20:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001c24:	0258      	lsls	r0, r3, #9
 8001c26:	d508      	bpl.n	8001c3a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001c28:	4938      	ldr	r1, [pc, #224]	; (8001d0c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001c2a:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8001c2c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001c30:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8001c34:	4302      	orrs	r2, r0
 8001c36:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001c3a:	0299      	lsls	r1, r3, #10
 8001c3c:	d50c      	bpl.n	8001c58 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001c3e:	4833      	ldr	r0, [pc, #204]	; (8001d0c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001c40:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8001c42:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 8001c46:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001c4a:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 8001c4e:	bf08      	it	eq
 8001c50:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001c52:	430a      	orrs	r2, r1
 8001c54:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 8001c58:	f013 0f08 	tst.w	r3, #8
 8001c5c:	bf18      	it	ne
 8001c5e:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001c60:	035a      	lsls	r2, r3, #13
 8001c62:	d508      	bpl.n	8001c76 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001c64:	4929      	ldr	r1, [pc, #164]	; (8001d0c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001c66:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8001c68:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001c6c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001c70:	4302      	orrs	r2, r0
 8001c72:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8001c76:	021f      	lsls	r7, r3, #8
 8001c78:	d509      	bpl.n	8001c8e <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001c7a:	4924      	ldr	r1, [pc, #144]	; (8001d0c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001c7c:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8001c80:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001c84:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8001c88:	4302      	orrs	r2, r0
 8001c8a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8001c8e:	0158      	lsls	r0, r3, #5
 8001c90:	d509      	bpl.n	8001ca6 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8001c92:	491e      	ldr	r1, [pc, #120]	; (8001d0c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001c94:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8001c98:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001c9c:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8001ca0:	4302      	orrs	r2, r0
 8001ca2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001ca6:	0119      	lsls	r1, r3, #4
 8001ca8:	d509      	bpl.n	8001cbe <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001caa:	4918      	ldr	r1, [pc, #96]	; (8001d0c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001cac:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8001cb0:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8001cb4:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8001cb8:	4302      	orrs	r2, r0
 8001cba:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8001cbe:	00da      	lsls	r2, r3, #3
 8001cc0:	d509      	bpl.n	8001cd6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8001cc2:	4912      	ldr	r1, [pc, #72]	; (8001d0c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001cc4:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8001cc8:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8001ccc:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8001cd0:	4302      	orrs	r2, r0
 8001cd2:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001cd6:	2e01      	cmp	r6, #1
 8001cd8:	f000 80b5 	beq.w	8001e46 <HAL_RCCEx_PeriphCLKConfig+0x432>
 8001cdc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001ce0:	f000 80b1 	beq.w	8001e46 <HAL_RCCEx_PeriphCLKConfig+0x432>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8001ce4:	2d01      	cmp	r5, #1
 8001ce6:	d175      	bne.n	8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001ce8:	4d08      	ldr	r5, [pc, #32]	; (8001d0c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001cea:	682b      	ldr	r3, [r5, #0]
 8001cec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cf0:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001cf2:	f7fe fcc1 	bl	8000678 <HAL_GetTick>
 8001cf6:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001cf8:	682b      	ldr	r3, [r5, #0]
 8001cfa:	009f      	lsls	r7, r3, #2
 8001cfc:	f100 8127 	bmi.w	8001f4e <HAL_RCCEx_PeriphCLKConfig+0x53a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8001d00:	6821      	ldr	r1, [r4, #0]
 8001d02:	030e      	lsls	r6, r1, #12
 8001d04:	d506      	bpl.n	8001d14 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8001d06:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001d08:	b143      	cbz	r3, 8001d1c <HAL_RCCEx_PeriphCLKConfig+0x308>
 8001d0a:	e003      	b.n	8001d14 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8001d0c:	40023800 	.word	0x40023800
 8001d10:	40007000 	.word	0x40007000
 8001d14:	02cd      	lsls	r5, r1, #11
 8001d16:	d51d      	bpl.n	8001d54 <HAL_RCCEx_PeriphCLKConfig+0x340>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001d18:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001d1a:	b9db      	cbnz	r3, 8001d54 <HAL_RCCEx_PeriphCLKConfig+0x340>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8001d1c:	4a93      	ldr	r2, [pc, #588]	; (8001f6c <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001d1e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001d22:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8001d26:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d2a:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8001d2e:	4303      	orrs	r3, r0
 8001d30:	6960      	ldr	r0, [r4, #20]
 8001d32:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001d36:	69a0      	ldr	r0, [r4, #24]
 8001d38:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8001d3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001d40:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001d44:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001d46:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8001d4a:	3801      	subs	r0, #1
 8001d4c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8001d50:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8001d54:	0288      	lsls	r0, r1, #10
 8001d56:	d515      	bpl.n	8001d84 <HAL_RCCEx_PeriphCLKConfig+0x370>
 8001d58:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8001d5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001d5e:	d111      	bne.n	8001d84 <HAL_RCCEx_PeriphCLKConfig+0x370>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001d60:	4a82      	ldr	r2, [pc, #520]	; (8001f6c <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001d62:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001d66:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8001d6a:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8001d6e:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8001d72:	4303      	orrs	r3, r0
 8001d74:	6960      	ldr	r0, [r4, #20]
 8001d76:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001d7a:	6a20      	ldr	r0, [r4, #32]
 8001d7c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8001d80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8001d84:	070a      	lsls	r2, r1, #28
 8001d86:	d519      	bpl.n	8001dbc <HAL_RCCEx_PeriphCLKConfig+0x3a8>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001d88:	4978      	ldr	r1, [pc, #480]	; (8001f6c <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001d8a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8001d8e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8001d92:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 8001d96:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	6962      	ldr	r2, [r4, #20]
 8001d9e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001da2:	69e2      	ldr	r2, [r4, #28]
 8001da4:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001da8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8001dac:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
 8001db0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001db2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001db6:	4313      	orrs	r3, r2
 8001db8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001dbc:	4c6b      	ldr	r4, [pc, #428]	; (8001f6c <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001dbe:	6823      	ldr	r3, [r4, #0]
 8001dc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dc4:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001dc6:	f7fe fc57 	bl	8000678 <HAL_GetTick>
 8001dca:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001dcc:	6823      	ldr	r3, [r4, #0]
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	f140 80c4 	bpl.w	8001f5c <HAL_RCCEx_PeriphCLKConfig+0x548>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001dd4:	2000      	movs	r0, #0
 8001dd6:	e009      	b.n	8001dec <HAL_RCCEx_PeriphCLKConfig+0x3d8>
      plli2sused = 1;
 8001dd8:	2601      	movs	r6, #1
 8001dda:	e657      	b.n	8001a8c <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ddc:	f7fe fc4c 	bl	8000678 <HAL_GetTick>
 8001de0:	eba0 0008 	sub.w	r0, r0, r8
 8001de4:	2864      	cmp	r0, #100	; 0x64
 8001de6:	f67f ae69 	bls.w	8001abc <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 8001dea:	2003      	movs	r0, #3
}
 8001dec:	b003      	add	sp, #12
 8001dee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001df2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001df4:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	f43f ae69 	beq.w	8001ad0 <HAL_RCCEx_PeriphCLKConfig+0xbc>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001dfe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e00:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001e02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e06:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001e0a:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e0c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001e0e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001e12:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8001e14:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001e16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e18:	07da      	lsls	r2, r3, #31
 8001e1a:	f57f ae59 	bpl.w	8001ad0 <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 8001e1e:	f7fe fc2b 	bl	8000678 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e22:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001e26:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e28:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e2a:	079b      	lsls	r3, r3, #30
 8001e2c:	f53f ae50 	bmi.w	8001ad0 <HAL_RCCEx_PeriphCLKConfig+0xbc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e30:	f7fe fc22 	bl	8000678 <HAL_GetTick>
 8001e34:	eba0 0008 	sub.w	r0, r0, r8
 8001e38:	4548      	cmp	r0, r9
 8001e3a:	d9f5      	bls.n	8001e28 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8001e3c:	e7d5      	b.n	8001dea <HAL_RCCEx_PeriphCLKConfig+0x3d6>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e3e:	6891      	ldr	r1, [r2, #8]
 8001e40:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8001e44:	e654      	b.n	8001af0 <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_PLLI2S_DISABLE();
 8001e46:	4e49      	ldr	r6, [pc, #292]	; (8001f6c <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001e48:	6833      	ldr	r3, [r6, #0]
 8001e4a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001e4e:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8001e50:	f7fe fc12 	bl	8000678 <HAL_GetTick>
 8001e54:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001e56:	6833      	ldr	r3, [r6, #0]
 8001e58:	011b      	lsls	r3, r3, #4
 8001e5a:	d472      	bmi.n	8001f42 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8001e5c:	6822      	ldr	r2, [r4, #0]
 8001e5e:	07d7      	lsls	r7, r2, #31
 8001e60:	d512      	bpl.n	8001e88 <HAL_RCCEx_PeriphCLKConfig+0x474>
 8001e62:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001e64:	b983      	cbnz	r3, 8001e88 <HAL_RCCEx_PeriphCLKConfig+0x474>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001e66:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001e6a:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8001e6e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e72:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8001e76:	430b      	orrs	r3, r1
 8001e78:	6861      	ldr	r1, [r4, #4]
 8001e7a:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8001e7e:	68a1      	ldr	r1, [r4, #8]
 8001e80:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8001e84:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001e88:	0316      	lsls	r6, r2, #12
 8001e8a:	d503      	bpl.n	8001e94 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8001e8c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001e8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001e92:	d005      	beq.n	8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8001e94:	02d0      	lsls	r0, r2, #11
 8001e96:	d51e      	bpl.n	8001ed6 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001e98:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001e9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e9e:	d11a      	bne.n	8001ed6 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001ea0:	4932      	ldr	r1, [pc, #200]	; (8001f6c <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001ea2:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001ea6:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8001eaa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001eae:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8001eb2:	4303      	orrs	r3, r0
 8001eb4:	6860      	ldr	r0, [r4, #4]
 8001eb6:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001eba:	68e0      	ldr	r0, [r4, #12]
 8001ebc:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8001ec0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001ec4:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 8001ec8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001eca:	f020 001f 	bic.w	r0, r0, #31
 8001ece:	3b01      	subs	r3, #1
 8001ed0:	4303      	orrs	r3, r0
 8001ed2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001ed6:	01d1      	lsls	r1, r2, #7
 8001ed8:	d511      	bpl.n	8001efe <HAL_RCCEx_PeriphCLKConfig+0x4ea>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001eda:	4924      	ldr	r1, [pc, #144]	; (8001f6c <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001edc:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001ee0:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8001ee4:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8001ee8:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8001eec:	4303      	orrs	r3, r0
 8001eee:	6860      	ldr	r0, [r4, #4]
 8001ef0:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001ef4:	6920      	ldr	r0, [r4, #16]
 8001ef6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8001efa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001efe:	0192      	lsls	r2, r2, #6
 8001f00:	d50d      	bpl.n	8001f1e <HAL_RCCEx_PeriphCLKConfig+0x50a>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001f02:	6923      	ldr	r3, [r4, #16]
 8001f04:	6862      	ldr	r2, [r4, #4]
 8001f06:	041b      	lsls	r3, r3, #16
 8001f08:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001f0c:	68e2      	ldr	r2, [r4, #12]
 8001f0e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001f12:	68a2      	ldr	r2, [r4, #8]
 8001f14:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001f18:	4a14      	ldr	r2, [pc, #80]	; (8001f6c <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001f1a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8001f1e:	4e13      	ldr	r6, [pc, #76]	; (8001f6c <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001f20:	6833      	ldr	r3, [r6, #0]
 8001f22:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001f26:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8001f28:	f7fe fba6 	bl	8000678 <HAL_GetTick>
 8001f2c:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001f2e:	6833      	ldr	r3, [r6, #0]
 8001f30:	011b      	lsls	r3, r3, #4
 8001f32:	f53f aed7 	bmi.w	8001ce4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001f36:	f7fe fb9f 	bl	8000678 <HAL_GetTick>
 8001f3a:	1bc0      	subs	r0, r0, r7
 8001f3c:	2864      	cmp	r0, #100	; 0x64
 8001f3e:	d9f6      	bls.n	8001f2e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8001f40:	e753      	b.n	8001dea <HAL_RCCEx_PeriphCLKConfig+0x3d6>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001f42:	f7fe fb99 	bl	8000678 <HAL_GetTick>
 8001f46:	1bc0      	subs	r0, r0, r7
 8001f48:	2864      	cmp	r0, #100	; 0x64
 8001f4a:	d984      	bls.n	8001e56 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8001f4c:	e74d      	b.n	8001dea <HAL_RCCEx_PeriphCLKConfig+0x3d6>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001f4e:	f7fe fb93 	bl	8000678 <HAL_GetTick>
 8001f52:	1b80      	subs	r0, r0, r6
 8001f54:	2864      	cmp	r0, #100	; 0x64
 8001f56:	f67f aecf 	bls.w	8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 8001f5a:	e746      	b.n	8001dea <HAL_RCCEx_PeriphCLKConfig+0x3d6>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001f5c:	f7fe fb8c 	bl	8000678 <HAL_GetTick>
 8001f60:	1b40      	subs	r0, r0, r5
 8001f62:	2864      	cmp	r0, #100	; 0x64
 8001f64:	f67f af32 	bls.w	8001dcc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
 8001f68:	e73f      	b.n	8001dea <HAL_RCCEx_PeriphCLKConfig+0x3d6>
 8001f6a:	bf00      	nop
 8001f6c:	40023800 	.word	0x40023800

08001f70 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f70:	b538      	push	{r3, r4, r5, lr}
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001f72:	69c2      	ldr	r2, [r0, #28]
{
 8001f74:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001f76:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001f78:	6881      	ldr	r1, [r0, #8]
 8001f7a:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001f7c:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001f7e:	4301      	orrs	r1, r0
 8001f80:	6960      	ldr	r0, [r4, #20]
 8001f82:	4301      	orrs	r1, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001f84:	4890      	ldr	r0, [pc, #576]	; (80021c8 <UART_SetConfig+0x258>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001f86:	4311      	orrs	r1, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001f88:	4028      	ands	r0, r5
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  tmpreg |= huart->Init.OneBitSampling;
 8001f8a:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001f8c:	4301      	orrs	r1, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f8e:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001f90:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f92:	6859      	ldr	r1, [r3, #4]
 8001f94:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8001f98:	4301      	orrs	r1, r0
 8001f9a:	6059      	str	r1, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001f9c:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001f9e:	6898      	ldr	r0, [r3, #8]
  tmpreg |= huart->Init.OneBitSampling;
 8001fa0:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001fa2:	f420 6030 	bic.w	r0, r0, #2816	; 0xb00
 8001fa6:	4301      	orrs	r1, r0
 8001fa8:	6099      	str	r1, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001faa:	4988      	ldr	r1, [pc, #544]	; (80021cc <UART_SetConfig+0x25c>)
 8001fac:	428b      	cmp	r3, r1
 8001fae:	d117      	bne.n	8001fe0 <UART_SetConfig+0x70>
 8001fb0:	4b87      	ldr	r3, [pc, #540]	; (80021d0 <UART_SetConfig+0x260>)
 8001fb2:	4988      	ldr	r1, [pc, #544]	; (80021d4 <UART_SetConfig+0x264>)
 8001fb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fb8:	f003 0303 	and.w	r3, r3, #3

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001fbc:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001fc0:	5ccb      	ldrb	r3, [r1, r3]
 8001fc2:	d129      	bne.n	8002018 <UART_SetConfig+0xa8>
  {
    switch (clocksource)
 8001fc4:	2b08      	cmp	r3, #8
 8001fc6:	f200 809d 	bhi.w	8002104 <UART_SetConfig+0x194>
 8001fca:	e8df f013 	tbh	[pc, r3, lsl #1]
 8001fce:	008c      	.short	0x008c
 8001fd0:	00ee00e8 	.word	0x00ee00e8
 8001fd4:	00fa009b 	.word	0x00fa009b
 8001fd8:	009b009b 	.word	0x009b009b
 8001fdc:	0076009b 	.word	0x0076009b
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001fe0:	497d      	ldr	r1, [pc, #500]	; (80021d8 <UART_SetConfig+0x268>)
 8001fe2:	428b      	cmp	r3, r1
 8001fe4:	d106      	bne.n	8001ff4 <UART_SetConfig+0x84>
 8001fe6:	4b7a      	ldr	r3, [pc, #488]	; (80021d0 <UART_SetConfig+0x260>)
 8001fe8:	497c      	ldr	r1, [pc, #496]	; (80021dc <UART_SetConfig+0x26c>)
 8001fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fee:	f003 030c 	and.w	r3, r3, #12
 8001ff2:	e7e3      	b.n	8001fbc <UART_SetConfig+0x4c>
 8001ff4:	497a      	ldr	r1, [pc, #488]	; (80021e0 <UART_SetConfig+0x270>)
 8001ff6:	428b      	cmp	r3, r1
 8001ff8:	d11d      	bne.n	8002036 <UART_SetConfig+0xc6>
 8001ffa:	4b75      	ldr	r3, [pc, #468]	; (80021d0 <UART_SetConfig+0x260>)
 8001ffc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002000:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002004:	2b10      	cmp	r3, #16
 8002006:	f000 80d9 	beq.w	80021bc <UART_SetConfig+0x24c>
 800200a:	d80e      	bhi.n	800202a <UART_SetConfig+0xba>
 800200c:	2b00      	cmp	r3, #0
 800200e:	d067      	beq.n	80020e0 <UART_SetConfig+0x170>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002010:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002014:	d076      	beq.n	8002104 <UART_SetConfig+0x194>
 8002016:	2310      	movs	r3, #16
      ret = HAL_ERROR;
    }
  }
  else
  {
    switch (clocksource)
 8002018:	2b08      	cmp	r3, #8
 800201a:	d873      	bhi.n	8002104 <UART_SetConfig+0x194>
 800201c:	e8df f003 	tbb	[pc, r3]
 8002020:	72a29f99 	.word	0x72a29f99
 8002024:	727272b4 	.word	0x727272b4
 8002028:	b7          	.byte	0xb7
 8002029:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 800202a:	2b20      	cmp	r3, #32
 800202c:	f000 80ba 	beq.w	80021a4 <UART_SetConfig+0x234>
 8002030:	2b30      	cmp	r3, #48	; 0x30
 8002032:	d03f      	beq.n	80020b4 <UART_SetConfig+0x144>
 8002034:	e7ec      	b.n	8002010 <UART_SetConfig+0xa0>
 8002036:	496b      	ldr	r1, [pc, #428]	; (80021e4 <UART_SetConfig+0x274>)
 8002038:	428b      	cmp	r3, r1
 800203a:	d10d      	bne.n	8002058 <UART_SetConfig+0xe8>
 800203c:	4b64      	ldr	r3, [pc, #400]	; (80021d0 <UART_SetConfig+0x260>)
 800203e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002042:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002046:	2b40      	cmp	r3, #64	; 0x40
 8002048:	f000 80b8 	beq.w	80021bc <UART_SetConfig+0x24c>
 800204c:	d9de      	bls.n	800200c <UART_SetConfig+0x9c>
 800204e:	2b80      	cmp	r3, #128	; 0x80
 8002050:	f000 80a8 	beq.w	80021a4 <UART_SetConfig+0x234>
 8002054:	2bc0      	cmp	r3, #192	; 0xc0
 8002056:	e7ec      	b.n	8002032 <UART_SetConfig+0xc2>
 8002058:	4963      	ldr	r1, [pc, #396]	; (80021e8 <UART_SetConfig+0x278>)
 800205a:	428b      	cmp	r3, r1
 800205c:	d110      	bne.n	8002080 <UART_SetConfig+0x110>
 800205e:	4b5c      	ldr	r3, [pc, #368]	; (80021d0 <UART_SetConfig+0x260>)
 8002060:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002064:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002068:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800206c:	f000 80a6 	beq.w	80021bc <UART_SetConfig+0x24c>
 8002070:	d9cc      	bls.n	800200c <UART_SetConfig+0x9c>
 8002072:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002076:	f000 8095 	beq.w	80021a4 <UART_SetConfig+0x234>
 800207a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800207e:	e7d8      	b.n	8002032 <UART_SetConfig+0xc2>
 8002080:	495a      	ldr	r1, [pc, #360]	; (80021ec <UART_SetConfig+0x27c>)
 8002082:	428b      	cmp	r3, r1
 8002084:	d11e      	bne.n	80020c4 <UART_SetConfig+0x154>
 8002086:	4b52      	ldr	r3, [pc, #328]	; (80021d0 <UART_SetConfig+0x260>)
 8002088:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800208c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002090:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002094:	f000 8092 	beq.w	80021bc <UART_SetConfig+0x24c>
 8002098:	d806      	bhi.n	80020a8 <UART_SetConfig+0x138>
 800209a:	2b00      	cmp	r3, #0
 800209c:	d07c      	beq.n	8002198 <UART_SetConfig+0x228>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800209e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80020a2:	d12f      	bne.n	8002104 <UART_SetConfig+0x194>
 80020a4:	2310      	movs	r3, #16
 80020a6:	e78d      	b.n	8001fc4 <UART_SetConfig+0x54>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80020a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80020ac:	d07a      	beq.n	80021a4 <UART_SetConfig+0x234>
 80020ae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80020b2:	d1f4      	bne.n	800209e <UART_SetConfig+0x12e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80020b4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80020b8:	d169      	bne.n	800218e <UART_SetConfig+0x21e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80020ba:	6863      	ldr	r3, [r4, #4]
 80020bc:	0858      	lsrs	r0, r3, #1
 80020be:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 80020c2:	e078      	b.n	80021b6 <UART_SetConfig+0x246>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80020c4:	494a      	ldr	r1, [pc, #296]	; (80021f0 <UART_SetConfig+0x280>)
 80020c6:	428b      	cmp	r3, r1
 80020c8:	d124      	bne.n	8002114 <UART_SetConfig+0x1a4>
 80020ca:	4b41      	ldr	r3, [pc, #260]	; (80021d0 <UART_SetConfig+0x260>)
 80020cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020d0:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80020d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020d8:	d070      	beq.n	80021bc <UART_SetConfig+0x24c>
 80020da:	d815      	bhi.n	8002108 <UART_SetConfig+0x198>
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d1de      	bne.n	800209e <UART_SetConfig+0x12e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80020e0:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80020e4:	d135      	bne.n	8002152 <UART_SetConfig+0x1e2>
        pclk = HAL_RCC_GetPCLK1Freq();
 80020e6:	f7ff fc75 	bl	80019d4 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80020ea:	6862      	ldr	r2, [r4, #4]
 80020ec:	0853      	lsrs	r3, r2, #1
 80020ee:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 80020f2:	fbb0 f0f2 	udiv	r0, r0, r2
 80020f6:	b280      	uxth	r0, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80020f8:	f64f 73ef 	movw	r3, #65519	; 0xffef
 80020fc:	f1a0 0210 	sub.w	r2, r0, #16
 8002100:	429a      	cmp	r2, r3
 8002102:	d91a      	bls.n	800213a <UART_SetConfig+0x1ca>
    {
      huart->Instance->BRR = usartdiv;
    }
    else
    {
      ret = HAL_ERROR;
 8002104:	2001      	movs	r0, #1
 8002106:	e020      	b.n	800214a <UART_SetConfig+0x1da>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002108:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800210c:	d04a      	beq.n	80021a4 <UART_SetConfig+0x234>
 800210e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002112:	e7ce      	b.n	80020b2 <UART_SetConfig+0x142>
 8002114:	4937      	ldr	r1, [pc, #220]	; (80021f4 <UART_SetConfig+0x284>)
 8002116:	428b      	cmp	r3, r1
 8002118:	d1f4      	bne.n	8002104 <UART_SetConfig+0x194>
 800211a:	4b2d      	ldr	r3, [pc, #180]	; (80021d0 <UART_SetConfig+0x260>)
 800211c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002120:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002124:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002128:	d048      	beq.n	80021bc <UART_SetConfig+0x24c>
 800212a:	f67f af6f 	bls.w	800200c <UART_SetConfig+0x9c>
 800212e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002132:	d037      	beq.n	80021a4 <UART_SetConfig+0x234>
 8002134:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002138:	e77b      	b.n	8002032 <UART_SetConfig+0xc2>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800213a:	f020 030f 	bic.w	r3, r0, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800213e:	f3c0 0042 	ubfx	r0, r0, #1, #3
      huart->Instance->BRR = brrtemp;
 8002142:	6822      	ldr	r2, [r4, #0]
 8002144:	4318      	orrs	r0, r3
 8002146:	60d0      	str	r0, [r2, #12]
 8002148:	2000      	movs	r0, #0
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800214a:	2300      	movs	r3, #0
 800214c:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 800214e:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 8002150:	bd38      	pop	{r3, r4, r5, pc}
        pclk = HAL_RCC_GetPCLK1Freq();
 8002152:	f7ff fc3f 	bl	80019d4 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002156:	6863      	ldr	r3, [r4, #4]
 8002158:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800215c:	e008      	b.n	8002170 <UART_SetConfig+0x200>
        pclk = HAL_RCC_GetPCLK2Freq();
 800215e:	f7ff fc49 	bl	80019f4 <HAL_RCC_GetPCLK2Freq>
 8002162:	e7f8      	b.n	8002156 <UART_SetConfig+0x1e6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002164:	6863      	ldr	r3, [r4, #4]
 8002166:	0858      	lsrs	r0, r3, #1
 8002168:	f500 0074 	add.w	r0, r0, #15990784	; 0xf40000
 800216c:	f500 5010 	add.w	r0, r0, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002170:	fbb0 f0f3 	udiv	r0, r0, r3
 8002174:	b280      	uxth	r0, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002176:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800217a:	f1a0 0210 	sub.w	r2, r0, #16
 800217e:	429a      	cmp	r2, r3
 8002180:	d8c0      	bhi.n	8002104 <UART_SetConfig+0x194>
      huart->Instance->BRR = usartdiv;
 8002182:	6823      	ldr	r3, [r4, #0]
 8002184:	60d8      	str	r0, [r3, #12]
 8002186:	e7df      	b.n	8002148 <UART_SetConfig+0x1d8>
        pclk = HAL_RCC_GetSysClockFreq();
 8002188:	f7ff fb50 	bl	800182c <HAL_RCC_GetSysClockFreq>
 800218c:	e7e3      	b.n	8002156 <UART_SetConfig+0x1e6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800218e:	6863      	ldr	r3, [r4, #4]
 8002190:	0858      	lsrs	r0, r3, #1
 8002192:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
 8002196:	e7eb      	b.n	8002170 <UART_SetConfig+0x200>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002198:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800219c:	d1df      	bne.n	800215e <UART_SetConfig+0x1ee>
        pclk = HAL_RCC_GetPCLK2Freq();
 800219e:	f7ff fc29 	bl	80019f4 <HAL_RCC_GetPCLK2Freq>
 80021a2:	e7a2      	b.n	80020ea <UART_SetConfig+0x17a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80021a4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80021a8:	d1dc      	bne.n	8002164 <UART_SetConfig+0x1f4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80021aa:	6863      	ldr	r3, [r4, #4]
 80021ac:	0858      	lsrs	r0, r3, #1
 80021ae:	f100 70f4 	add.w	r0, r0, #31981568	; 0x1e80000
 80021b2:	f500 4090 	add.w	r0, r0, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80021b6:	fbb0 f0f3 	udiv	r0, r0, r3
 80021ba:	e79c      	b.n	80020f6 <UART_SetConfig+0x186>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80021bc:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80021c0:	d1e2      	bne.n	8002188 <UART_SetConfig+0x218>
        pclk = HAL_RCC_GetSysClockFreq();
 80021c2:	f7ff fb33 	bl	800182c <HAL_RCC_GetSysClockFreq>
 80021c6:	e790      	b.n	80020ea <UART_SetConfig+0x17a>
 80021c8:	efff69f3 	.word	0xefff69f3
 80021cc:	40011000 	.word	0x40011000
 80021d0:	40023800 	.word	0x40023800
 80021d4:	08003828 	.word	0x08003828
 80021d8:	40004400 	.word	0x40004400
 80021dc:	0800382c 	.word	0x0800382c
 80021e0:	40004800 	.word	0x40004800
 80021e4:	40004c00 	.word	0x40004c00
 80021e8:	40005000 	.word	0x40005000
 80021ec:	40011400 	.word	0x40011400
 80021f0:	40007800 	.word	0x40007800
 80021f4:	40007c00 	.word	0x40007c00

080021f8 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80021f8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80021fa:	07da      	lsls	r2, r3, #31
{
 80021fc:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80021fe:	d506      	bpl.n	800220e <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002200:	6801      	ldr	r1, [r0, #0]
 8002202:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8002204:	684a      	ldr	r2, [r1, #4]
 8002206:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800220a:	4322      	orrs	r2, r4
 800220c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800220e:	079c      	lsls	r4, r3, #30
 8002210:	d506      	bpl.n	8002220 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002212:	6801      	ldr	r1, [r0, #0]
 8002214:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8002216:	684a      	ldr	r2, [r1, #4]
 8002218:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800221c:	4322      	orrs	r2, r4
 800221e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002220:	0759      	lsls	r1, r3, #29
 8002222:	d506      	bpl.n	8002232 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002224:	6801      	ldr	r1, [r0, #0]
 8002226:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8002228:	684a      	ldr	r2, [r1, #4]
 800222a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800222e:	4322      	orrs	r2, r4
 8002230:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002232:	071a      	lsls	r2, r3, #28
 8002234:	d506      	bpl.n	8002244 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002236:	6801      	ldr	r1, [r0, #0]
 8002238:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800223a:	684a      	ldr	r2, [r1, #4]
 800223c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002240:	4322      	orrs	r2, r4
 8002242:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002244:	06dc      	lsls	r4, r3, #27
 8002246:	d506      	bpl.n	8002256 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002248:	6801      	ldr	r1, [r0, #0]
 800224a:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800224c:	688a      	ldr	r2, [r1, #8]
 800224e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002252:	4322      	orrs	r2, r4
 8002254:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002256:	0699      	lsls	r1, r3, #26
 8002258:	d506      	bpl.n	8002268 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800225a:	6801      	ldr	r1, [r0, #0]
 800225c:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800225e:	688a      	ldr	r2, [r1, #8]
 8002260:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002264:	4322      	orrs	r2, r4
 8002266:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002268:	065a      	lsls	r2, r3, #25
 800226a:	d510      	bpl.n	800228e <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800226c:	6801      	ldr	r1, [r0, #0]
 800226e:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002270:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002272:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002276:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800227a:	ea42 0204 	orr.w	r2, r2, r4
 800227e:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002280:	d105      	bne.n	800228e <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002282:	684a      	ldr	r2, [r1, #4]
 8002284:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002286:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800228a:	4322      	orrs	r2, r4
 800228c:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800228e:	061b      	lsls	r3, r3, #24
 8002290:	d506      	bpl.n	80022a0 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002292:	6802      	ldr	r2, [r0, #0]
 8002294:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002296:	6853      	ldr	r3, [r2, #4]
 8002298:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800229c:	430b      	orrs	r3, r1
 800229e:	6053      	str	r3, [r2, #4]
 80022a0:	bd10      	pop	{r4, pc}

080022a2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80022a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80022a6:	9d06      	ldr	r5, [sp, #24]
 80022a8:	4604      	mov	r4, r0
 80022aa:	460f      	mov	r7, r1
 80022ac:	4616      	mov	r6, r2
 80022ae:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80022b0:	6821      	ldr	r1, [r4, #0]
 80022b2:	69ca      	ldr	r2, [r1, #28]
 80022b4:	ea37 0302 	bics.w	r3, r7, r2
 80022b8:	bf0c      	ite	eq
 80022ba:	2201      	moveq	r2, #1
 80022bc:	2200      	movne	r2, #0
 80022be:	42b2      	cmp	r2, r6
 80022c0:	d002      	beq.n	80022c8 <UART_WaitOnFlagUntilTimeout+0x26>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 80022c2:	2000      	movs	r0, #0
}
 80022c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 80022c8:	1c68      	adds	r0, r5, #1
 80022ca:	d0f2      	beq.n	80022b2 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022cc:	f7fe f9d4 	bl	8000678 <HAL_GetTick>
 80022d0:	eba0 0008 	sub.w	r0, r0, r8
 80022d4:	4285      	cmp	r5, r0
 80022d6:	6820      	ldr	r0, [r4, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80022d8:	6803      	ldr	r3, [r0, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022da:	d300      	bcc.n	80022de <UART_WaitOnFlagUntilTimeout+0x3c>
 80022dc:	b97d      	cbnz	r5, 80022fe <UART_WaitOnFlagUntilTimeout+0x5c>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80022de:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80022e2:	6003      	str	r3, [r0, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022e4:	6883      	ldr	r3, [r0, #8]
 80022e6:	f023 0301 	bic.w	r3, r3, #1
 80022ea:	6083      	str	r3, [r0, #8]
        huart->gState = HAL_UART_STATE_READY;
 80022ec:	2320      	movs	r3, #32
 80022ee:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80022f0:	67a3      	str	r3, [r4, #120]	; 0x78
          __HAL_UNLOCK(huart);
 80022f2:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 80022f4:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 80022f6:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
          return HAL_TIMEOUT;
 80022fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80022fe:	075a      	lsls	r2, r3, #29
 8002300:	d5d6      	bpl.n	80022b0 <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002302:	69c3      	ldr	r3, [r0, #28]
 8002304:	051b      	lsls	r3, r3, #20
 8002306:	d5d3      	bpl.n	80022b0 <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002308:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800230c:	6203      	str	r3, [r0, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800230e:	6803      	ldr	r3, [r0, #0]
 8002310:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002314:	6003      	str	r3, [r0, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002316:	6883      	ldr	r3, [r0, #8]
 8002318:	f023 0301 	bic.w	r3, r3, #1
 800231c:	6083      	str	r3, [r0, #8]
          huart->gState = HAL_UART_STATE_READY;
 800231e:	2320      	movs	r3, #32
 8002320:	6763      	str	r3, [r4, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8002322:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002324:	67e3      	str	r3, [r4, #124]	; 0x7c
 8002326:	e7e4      	b.n	80022f2 <UART_WaitOnFlagUntilTimeout+0x50>

08002328 <HAL_UART_Transmit>:
{
 8002328:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800232c:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800232e:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 8002330:	4604      	mov	r4, r0
 8002332:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 8002334:	2b20      	cmp	r3, #32
{
 8002336:	4691      	mov	r9, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8002338:	d14c      	bne.n	80023d4 <HAL_UART_Transmit+0xac>
    if ((pData == NULL) || (Size == 0U))
 800233a:	2900      	cmp	r1, #0
 800233c:	d048      	beq.n	80023d0 <HAL_UART_Transmit+0xa8>
 800233e:	2a00      	cmp	r2, #0
 8002340:	d046      	beq.n	80023d0 <HAL_UART_Transmit+0xa8>
    __HAL_LOCK(huart);
 8002342:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8002346:	2b01      	cmp	r3, #1
 8002348:	d044      	beq.n	80023d4 <HAL_UART_Transmit+0xac>
 800234a:	2301      	movs	r3, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800234c:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 800234e:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002352:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002354:	67c5      	str	r5, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002356:	6743      	str	r3, [r0, #116]	; 0x74
    tickstart = HAL_GetTick();
 8002358:	f7fe f98e 	bl	8000678 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800235c:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 800235e:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 8002360:	f8a4 9050 	strh.w	r9, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002364:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferCount = Size;
 8002368:	f8a4 9052 	strh.w	r9, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800236c:	d103      	bne.n	8002376 <HAL_UART_Transmit+0x4e>
 800236e:	6923      	ldr	r3, [r4, #16]
 8002370:	b90b      	cbnz	r3, 8002376 <HAL_UART_Transmit+0x4e>
 8002372:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8002374:	461e      	mov	r6, r3
    __HAL_UNLOCK(huart);
 8002376:	2300      	movs	r3, #0
 8002378:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
    while (huart->TxXferCount > 0U)
 800237c:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002380:	463b      	mov	r3, r7
 8002382:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 8002386:	b292      	uxth	r2, r2
 8002388:	b93a      	cbnz	r2, 800239a <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800238a:	2140      	movs	r1, #64	; 0x40
 800238c:	4620      	mov	r0, r4
 800238e:	f7ff ff88 	bl	80022a2 <UART_WaitOnFlagUntilTimeout>
 8002392:	b940      	cbnz	r0, 80023a6 <HAL_UART_Transmit+0x7e>
    huart->gState = HAL_UART_STATE_READY;
 8002394:	2320      	movs	r3, #32
 8002396:	6763      	str	r3, [r4, #116]	; 0x74
    return HAL_OK;
 8002398:	e006      	b.n	80023a8 <HAL_UART_Transmit+0x80>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800239a:	2200      	movs	r2, #0
 800239c:	2180      	movs	r1, #128	; 0x80
 800239e:	4620      	mov	r0, r4
 80023a0:	f7ff ff7f 	bl	80022a2 <UART_WaitOnFlagUntilTimeout>
 80023a4:	b118      	cbz	r0, 80023ae <HAL_UART_Transmit+0x86>
        return HAL_TIMEOUT;
 80023a6:	2003      	movs	r0, #3
}
 80023a8:	b003      	add	sp, #12
 80023aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80023ae:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 80023b0:	b95e      	cbnz	r6, 80023ca <HAL_UART_Transmit+0xa2>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80023b2:	f835 3b02 	ldrh.w	r3, [r5], #2
 80023b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80023ba:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 80023bc:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 80023c0:	3b01      	subs	r3, #1
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 80023c8:	e7d8      	b.n	800237c <HAL_UART_Transmit+0x54>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80023ca:	f816 3b01 	ldrb.w	r3, [r6], #1
 80023ce:	e7f4      	b.n	80023ba <HAL_UART_Transmit+0x92>
      return  HAL_ERROR;
 80023d0:	2001      	movs	r0, #1
 80023d2:	e7e9      	b.n	80023a8 <HAL_UART_Transmit+0x80>
    return HAL_BUSY;
 80023d4:	2002      	movs	r0, #2
 80023d6:	e7e7      	b.n	80023a8 <HAL_UART_Transmit+0x80>

080023d8 <UART_CheckIdleState>:
{
 80023d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023da:	2600      	movs	r6, #0
{
 80023dc:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023de:	67c6      	str	r6, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 80023e0:	f7fe f94a 	bl	8000678 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80023e4:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80023e6:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	071a      	lsls	r2, r3, #28
 80023ec:	d415      	bmi.n	800241a <UART_CheckIdleState+0x42>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80023ee:	6823      	ldr	r3, [r4, #0]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	075b      	lsls	r3, r3, #29
 80023f4:	d50a      	bpl.n	800240c <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80023f6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80023fa:	2200      	movs	r2, #0
 80023fc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002400:	4620      	mov	r0, r4
 8002402:	9300      	str	r3, [sp, #0]
 8002404:	462b      	mov	r3, r5
 8002406:	f7ff ff4c 	bl	80022a2 <UART_WaitOnFlagUntilTimeout>
 800240a:	b990      	cbnz	r0, 8002432 <UART_CheckIdleState+0x5a>
  huart->gState = HAL_UART_STATE_READY;
 800240c:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 800240e:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8002410:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UNLOCK(huart);
 8002412:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 8002416:	67a3      	str	r3, [r4, #120]	; 0x78
  return HAL_OK;
 8002418:	e00c      	b.n	8002434 <UART_CheckIdleState+0x5c>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800241a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800241e:	4632      	mov	r2, r6
 8002420:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002424:	9300      	str	r3, [sp, #0]
 8002426:	4603      	mov	r3, r0
 8002428:	4620      	mov	r0, r4
 800242a:	f7ff ff3a 	bl	80022a2 <UART_WaitOnFlagUntilTimeout>
 800242e:	2800      	cmp	r0, #0
 8002430:	d0dd      	beq.n	80023ee <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8002432:	2003      	movs	r0, #3
}
 8002434:	b002      	add	sp, #8
 8002436:	bd70      	pop	{r4, r5, r6, pc}

08002438 <HAL_UART_Init>:
{
 8002438:	b510      	push	{r4, lr}
  if (huart == NULL)
 800243a:	4604      	mov	r4, r0
 800243c:	b340      	cbz	r0, 8002490 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 800243e:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8002440:	b91b      	cbnz	r3, 800244a <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 8002442:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8002446:	f000 fcb5 	bl	8002db4 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 800244a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800244c:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 800244e:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 8002450:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8002452:	6813      	ldr	r3, [r2, #0]
 8002454:	f023 0301 	bic.w	r3, r3, #1
 8002458:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800245a:	f7ff fd89 	bl	8001f70 <UART_SetConfig>
 800245e:	2801      	cmp	r0, #1
 8002460:	d016      	beq.n	8002490 <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002462:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002464:	b113      	cbz	r3, 800246c <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 8002466:	4620      	mov	r0, r4
 8002468:	f7ff fec6 	bl	80021f8 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800246c:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 800246e:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002470:	685a      	ldr	r2, [r3, #4]
 8002472:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002476:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002478:	689a      	ldr	r2, [r3, #8]
 800247a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800247e:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	f042 0201 	orr.w	r2, r2, #1
}
 8002486:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 800248a:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 800248c:	f7ff bfa4 	b.w	80023d8 <UART_CheckIdleState>
}
 8002490:	2001      	movs	r0, #1
 8002492:	bd10      	pop	{r4, pc}

08002494 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8002494:	4b0a      	ldr	r3, [pc, #40]	; (80024c0 <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8002496:	3b01      	subs	r3, #1
 8002498:	d101      	bne.n	800249e <USB_CoreReset+0xa>
    {
      return HAL_TIMEOUT;
 800249a:	2003      	movs	r0, #3
 800249c:	4770      	bx	lr
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800249e:	6902      	ldr	r2, [r0, #16]
 80024a0:	2a00      	cmp	r2, #0
 80024a2:	daf8      	bge.n	8002496 <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80024a4:	6903      	ldr	r3, [r0, #16]
 80024a6:	4a06      	ldr	r2, [pc, #24]	; (80024c0 <USB_CoreReset+0x2c>)
 80024a8:	f043 0301 	orr.w	r3, r3, #1
 80024ac:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 80024ae:	3a01      	subs	r2, #1
 80024b0:	d0f3      	beq.n	800249a <USB_CoreReset+0x6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80024b2:	6903      	ldr	r3, [r0, #16]
 80024b4:	f013 0301 	ands.w	r3, r3, #1
 80024b8:	d1f9      	bne.n	80024ae <USB_CoreReset+0x1a>

  return HAL_OK;
 80024ba:	4618      	mov	r0, r3
}
 80024bc:	4770      	bx	lr
 80024be:	bf00      	nop
 80024c0:	00030d41 	.word	0x00030d41

080024c4 <USB_CoreInit>:
{
 80024c4:	b084      	sub	sp, #16
 80024c6:	b538      	push	{r3, r4, r5, lr}
 80024c8:	ad05      	add	r5, sp, #20
 80024ca:	4604      	mov	r4, r0
 80024cc:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80024d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d126      	bne.n	8002524 <USB_CoreInit+0x60>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80024d6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80024d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024dc:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80024de:	68c3      	ldr	r3, [r0, #12]
 80024e0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80024e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80024e8:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80024ea:	68c3      	ldr	r3, [r0, #12]
 80024ec:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80024f0:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 80024f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d103      	bne.n	8002500 <USB_CoreInit+0x3c>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80024f8:	68c3      	ldr	r3, [r0, #12]
 80024fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024fe:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 8002500:	4620      	mov	r0, r4
 8002502:	f7ff ffc7 	bl	8002494 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 8002506:	9b08      	ldr	r3, [sp, #32]
 8002508:	2b01      	cmp	r3, #1
 800250a:	d107      	bne.n	800251c <USB_CoreInit+0x58>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800250c:	68a3      	ldr	r3, [r4, #8]
 800250e:	f043 0306 	orr.w	r3, r3, #6
 8002512:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002514:	68a3      	ldr	r3, [r4, #8]
 8002516:	f043 0320 	orr.w	r3, r3, #32
 800251a:	60a3      	str	r3, [r4, #8]
}
 800251c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002520:	b004      	add	sp, #16
 8002522:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002524:	68c3      	ldr	r3, [r0, #12]
 8002526:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800252a:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 800252c:	f7ff ffb2 	bl	8002494 <USB_CoreReset>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002530:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002532:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002536:	63a3      	str	r3, [r4, #56]	; 0x38
 8002538:	e7e5      	b.n	8002506 <USB_CoreInit+0x42>

0800253a <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800253a:	6883      	ldr	r3, [r0, #8]
 800253c:	f023 0301 	bic.w	r3, r3, #1
 8002540:	6083      	str	r3, [r0, #8]
}
 8002542:	2000      	movs	r0, #0
 8002544:	4770      	bx	lr

08002546 <USB_SetCurrentMode>:
{
 8002546:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002548:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800254a:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800254c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8002550:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8002552:	d108      	bne.n	8002566 <USB_SetCurrentMode+0x20>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002554:	68c3      	ldr	r3, [r0, #12]
 8002556:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800255a:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 800255c:	2032      	movs	r0, #50	; 0x32
 800255e:	f7fe f891 	bl	8000684 <HAL_Delay>
  return HAL_OK;
 8002562:	2000      	movs	r0, #0
 8002564:	bd08      	pop	{r3, pc}
  else if (mode == USB_DEVICE_MODE)
 8002566:	b919      	cbnz	r1, 8002570 <USB_SetCurrentMode+0x2a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002568:	68c3      	ldr	r3, [r0, #12]
 800256a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800256e:	e7f4      	b.n	800255a <USB_SetCurrentMode+0x14>
    return HAL_ERROR;
 8002570:	2001      	movs	r0, #1
}
 8002572:	bd08      	pop	{r3, pc}

08002574 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002574:	0189      	lsls	r1, r1, #6
 8002576:	4a07      	ldr	r2, [pc, #28]	; (8002594 <USB_FlushTxFifo+0x20>)
 8002578:	f041 0120 	orr.w	r1, r1, #32
 800257c:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 800257e:	3a01      	subs	r2, #1
 8002580:	d005      	beq.n	800258e <USB_FlushTxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002582:	6903      	ldr	r3, [r0, #16]
 8002584:	f013 0320 	ands.w	r3, r3, #32
 8002588:	d1f9      	bne.n	800257e <USB_FlushTxFifo+0xa>
  return HAL_OK;
 800258a:	4618      	mov	r0, r3
 800258c:	4770      	bx	lr
      return HAL_TIMEOUT;
 800258e:	2003      	movs	r0, #3
}
 8002590:	4770      	bx	lr
 8002592:	bf00      	nop
 8002594:	00030d41 	.word	0x00030d41

08002598 <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002598:	2310      	movs	r3, #16
 800259a:	4a06      	ldr	r2, [pc, #24]	; (80025b4 <USB_FlushRxFifo+0x1c>)
 800259c:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
 800259e:	3a01      	subs	r2, #1
 80025a0:	d005      	beq.n	80025ae <USB_FlushRxFifo+0x16>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80025a2:	6903      	ldr	r3, [r0, #16]
 80025a4:	f013 0310 	ands.w	r3, r3, #16
 80025a8:	d1f9      	bne.n	800259e <USB_FlushRxFifo+0x6>
  return HAL_OK;
 80025aa:	4618      	mov	r0, r3
 80025ac:	4770      	bx	lr
      return HAL_TIMEOUT;
 80025ae:	2003      	movs	r0, #3
}
 80025b0:	4770      	bx	lr
 80025b2:	bf00      	nop
 80025b4:	00030d41 	.word	0x00030d41

080025b8 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 80025b8:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 80025bc:	4319      	orrs	r1, r3
 80025be:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 80025c2:	2000      	movs	r0, #0
 80025c4:	4770      	bx	lr
	...

080025c8 <USB_DevInit>:
{
 80025c8:	b084      	sub	sp, #16
 80025ca:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80025ce:	4604      	mov	r4, r0
 80025d0:	a809      	add	r0, sp, #36	; 0x24
 80025d2:	460f      	mov	r7, r1
 80025d4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 80025d8:	2300      	movs	r3, #0
 80025da:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80025dc:	990e      	ldr	r1, [sp, #56]	; 0x38
 80025de:	9d13      	ldr	r5, [sp, #76]	; 0x4c
    USBx->DIEPTXF[i] = 0U;
 80025e0:	461e      	mov	r6, r3
 80025e2:	f103 0040 	add.w	r0, r3, #64	; 0x40
  for (i = 0U; i < 15U; i++)
 80025e6:	3301      	adds	r3, #1
    USBx->DIEPTXF[i] = 0U;
 80025e8:	eb04 0080 	add.w	r0, r4, r0, lsl #2
  for (i = 0U; i < 15U; i++)
 80025ec:	2b0f      	cmp	r3, #15
    USBx->DIEPTXF[i] = 0U;
 80025ee:	6046      	str	r6, [r0, #4]
  for (i = 0U; i < 15U; i++)
 80025f0:	d1f7      	bne.n	80025e2 <USB_DevInit+0x1a>
 80025f2:	f504 6600 	add.w	r6, r4, #2048	; 0x800
  if (cfg.vbus_sensing_enable == 0U)
 80025f6:	2d00      	cmp	r5, #0
 80025f8:	d16b      	bne.n	80026d2 <USB_DevInit+0x10a>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80025fa:	6873      	ldr	r3, [r6, #4]
 80025fc:	f043 0302 	orr.w	r3, r3, #2
 8002600:	6073      	str	r3, [r6, #4]
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8002602:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002604:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002608:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800260a:	6823      	ldr	r3, [r4, #0]
 800260c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002610:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8002612:	6823      	ldr	r3, [r4, #0]
 8002614:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002618:	6023      	str	r3, [r4, #0]
  USBx_PCGCCTL = 0U;
 800261a:	2300      	movs	r3, #0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800261c:	2901      	cmp	r1, #1
  USBx_PCGCCTL = 0U;
 800261e:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002622:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 8002626:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800262a:	d159      	bne.n	80026e0 <USB_DevInit+0x118>
    if (cfg.speed == USBD_HS_SPEED)
 800262c:	2a00      	cmp	r2, #0
 800262e:	d155      	bne.n	80026dc <USB_DevInit+0x114>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002630:	2100      	movs	r1, #0
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002632:	4620      	mov	r0, r4
 8002634:	f7ff ffc0 	bl	80025b8 <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002638:	2110      	movs	r1, #16
 800263a:	4620      	mov	r0, r4
 800263c:	f7ff ff9a 	bl	8002574 <USB_FlushTxFifo>
 8002640:	4601      	mov	r1, r0
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002642:	4620      	mov	r0, r4
 8002644:	f7ff ffa8 	bl	8002598 <USB_FlushRxFifo>
 8002648:	2800      	cmp	r0, #0
 800264a:	d14d      	bne.n	80026e8 <USB_DevInit+0x120>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800264c:	1c08      	adds	r0, r1, #0
 800264e:	bf18      	it	ne
 8002650:	2001      	movne	r0, #1
  USBx_DEVICE->DIEPMSK = 0U;
 8002652:	2300      	movs	r3, #0
 8002654:	f504 6210 	add.w	r2, r4, #2304	; 0x900
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002658:	f04f 4e90 	mov.w	lr, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800265c:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
      USBx_INEP(i)->DIEPCTL = 0U;
 8002660:	4619      	mov	r1, r3
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002662:	f64f 387f 	movw	r8, #64383	; 0xfb7f
  USBx_DEVICE->DIEPMSK = 0U;
 8002666:	6133      	str	r3, [r6, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002668:	6173      	str	r3, [r6, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800266a:	61f3      	str	r3, [r6, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800266c:	42bb      	cmp	r3, r7
 800266e:	d13d      	bne.n	80026ec <USB_DevInit+0x124>
 8002670:	2100      	movs	r1, #0
 8002672:	f504 6230 	add.w	r2, r4, #2816	; 0xb00
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002676:	f04f 4e90 	mov.w	lr, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800267a:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800267e:	460f      	mov	r7, r1
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002680:	f64f 387f 	movw	r8, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002684:	428b      	cmp	r3, r1
 8002686:	d144      	bne.n	8002712 <USB_DevInit+0x14a>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002688:	6933      	ldr	r3, [r6, #16]
 800268a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800268e:	6133      	str	r3, [r6, #16]
  USBx->GINTMSK = 0U;
 8002690:	2300      	movs	r3, #0
 8002692:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8002694:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 8002698:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == 0U)
 800269a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800269c:	b91b      	cbnz	r3, 80026a6 <USB_DevInit+0xde>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800269e:	69a3      	ldr	r3, [r4, #24]
 80026a0:	f043 0310 	orr.w	r3, r3, #16
 80026a4:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80026a6:	69a2      	ldr	r2, [r4, #24]
 80026a8:	4b23      	ldr	r3, [pc, #140]	; (8002738 <USB_DevInit+0x170>)
 80026aa:	4313      	orrs	r3, r2
 80026ac:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 80026ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80026b0:	b11b      	cbz	r3, 80026ba <USB_DevInit+0xf2>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80026b2:	69a3      	ldr	r3, [r4, #24]
 80026b4:	f043 0308 	orr.w	r3, r3, #8
 80026b8:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 80026ba:	2d01      	cmp	r5, #1
 80026bc:	d105      	bne.n	80026ca <USB_DevInit+0x102>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80026be:	69a3      	ldr	r3, [r4, #24]
 80026c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80026c4:	f043 0304 	orr.w	r3, r3, #4
 80026c8:	61a3      	str	r3, [r4, #24]
}
 80026ca:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80026ce:	b004      	add	sp, #16
 80026d0:	4770      	bx	lr
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80026d2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80026d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80026d8:	63a3      	str	r3, [r4, #56]	; 0x38
 80026da:	e79e      	b.n	800261a <USB_DevInit+0x52>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80026dc:	2101      	movs	r1, #1
 80026de:	e7a8      	b.n	8002632 <USB_DevInit+0x6a>
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 80026e0:	2903      	cmp	r1, #3
 80026e2:	d0a3      	beq.n	800262c <USB_DevInit+0x64>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80026e4:	2103      	movs	r1, #3
 80026e6:	e7a4      	b.n	8002632 <USB_DevInit+0x6a>
 80026e8:	2001      	movs	r0, #1
 80026ea:	e7b2      	b.n	8002652 <USB_DevInit+0x8a>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80026ec:	f8d2 9000 	ldr.w	r9, [r2]
 80026f0:	f1b9 0f00 	cmp.w	r9, #0
 80026f4:	da0b      	bge.n	800270e <USB_DevInit+0x146>
      if (i == 0U)
 80026f6:	b93b      	cbnz	r3, 8002708 <USB_DevInit+0x140>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80026f8:	f8c2 c000 	str.w	ip, [r2]
    USBx_INEP(i)->DIEPTSIZ = 0U;
 80026fc:	6111      	str	r1, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80026fe:	3301      	adds	r3, #1
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002700:	f8c2 8008 	str.w	r8, [r2, #8]
 8002704:	3220      	adds	r2, #32
 8002706:	e7b1      	b.n	800266c <USB_DevInit+0xa4>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002708:	f8c2 e000 	str.w	lr, [r2]
 800270c:	e7f6      	b.n	80026fc <USB_DevInit+0x134>
      USBx_INEP(i)->DIEPCTL = 0U;
 800270e:	6011      	str	r1, [r2, #0]
 8002710:	e7f4      	b.n	80026fc <USB_DevInit+0x134>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002712:	f8d2 9000 	ldr.w	r9, [r2]
 8002716:	f1b9 0f00 	cmp.w	r9, #0
 800271a:	da0b      	bge.n	8002734 <USB_DevInit+0x16c>
      if (i == 0U)
 800271c:	b939      	cbnz	r1, 800272e <USB_DevInit+0x166>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800271e:	f8c2 c000 	str.w	ip, [r2]
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002722:	6117      	str	r7, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002724:	3101      	adds	r1, #1
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002726:	f8c2 8008 	str.w	r8, [r2, #8]
 800272a:	3220      	adds	r2, #32
 800272c:	e7aa      	b.n	8002684 <USB_DevInit+0xbc>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800272e:	f8c2 e000 	str.w	lr, [r2]
 8002732:	e7f6      	b.n	8002722 <USB_DevInit+0x15a>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002734:	6017      	str	r7, [r2, #0]
 8002736:	e7f4      	b.n	8002722 <USB_DevInit+0x15a>
 8002738:	803c3800 	.word	0x803c3800

0800273c <USB_DevDisconnect>:
{
 800273c:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800273e:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8002742:	f043 0302 	orr.w	r3, r3, #2
 8002746:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 800274a:	2003      	movs	r0, #3
 800274c:	f7fd ff9a 	bl	8000684 <HAL_Delay>
}
 8002750:	2000      	movs	r0, #0
 8002752:	bd08      	pop	{r3, pc}

08002754 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002754:	b510      	push	{r4, lr}
 8002756:	b0b8      	sub	sp, #224	; 0xe0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002758:	2234      	movs	r2, #52	; 0x34
 800275a:	2100      	movs	r1, #0
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800275c:	2402      	movs	r4, #2
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800275e:	a807      	add	r0, sp, #28
 8002760:	f000 fc28 	bl	8002fb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002764:	2214      	movs	r2, #20
 8002766:	2100      	movs	r1, #0
 8002768:	a802      	add	r0, sp, #8
 800276a:	f000 fc23 	bl	8002fb4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800276e:	2100      	movs	r1, #0
 8002770:	2290      	movs	r2, #144	; 0x90
 8002772:	a814      	add	r0, sp, #80	; 0x50
 8002774:	f000 fc1e 	bl	8002fb4 <memset>
  HAL_PWR_EnableBkUpAccess();
 8002778:	f7fe fe54 	bl	8001424 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_PWR_CLK_ENABLE();
 800277c:	4b20      	ldr	r3, [pc, #128]	; (8002800 <SystemClock_Config+0xac>)
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 192;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 8;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800277e:	a807      	add	r0, sp, #28
  __HAL_RCC_PWR_CLK_ENABLE();
 8002780:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002782:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002786:	641a      	str	r2, [r3, #64]	; 0x40
 8002788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800278e:	9300      	str	r3, [sp, #0]
 8002790:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002792:	4b1c      	ldr	r3, [pc, #112]	; (8002804 <SystemClock_Config+0xb0>)
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800279a:	601a      	str	r2, [r3, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800279e:	940d      	str	r4, [sp, #52]	; 0x34
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80027a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80027a4:	9411      	str	r4, [sp, #68]	; 0x44
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80027a6:	9301      	str	r3, [sp, #4]
 80027a8:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80027aa:	2301      	movs	r3, #1
 80027ac:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80027ae:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80027b2:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80027b4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80027b8:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80027ba:	2304      	movs	r3, #4
 80027bc:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 192;
 80027be:	23c0      	movs	r3, #192	; 0xc0
 80027c0:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80027c2:	2308      	movs	r3, #8
 80027c4:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027c6:	f7fe fe6d 	bl	80014a4 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80027ca:	f7fe fe33 	bl	8001434 <HAL_PWREx_EnableOverDrive>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80027ce:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80027d0:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027d2:	2400      	movs	r4, #0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80027d4:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80027d6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80027da:	2106      	movs	r1, #6
 80027dc:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80027de:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80027e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027e4:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80027e6:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80027e8:	f7ff f84e 	bl	8001888 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1
 80027ec:	4b06      	ldr	r3, [pc, #24]	; (8002808 <SystemClock_Config+0xb4>)
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027ee:	a814      	add	r0, sp, #80	; 0x50
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80027f0:	9427      	str	r4, [sp, #156]	; 0x9c
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1
 80027f2:	9314      	str	r3, [sp, #80]	; 0x50
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80027f4:	942d      	str	r4, [sp, #180]	; 0xb4
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80027f6:	9433      	str	r4, [sp, #204]	; 0xcc
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027f8:	f7ff f90c 	bl	8001a14 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 80027fc:	b038      	add	sp, #224	; 0xe0
 80027fe:	bd10      	pop	{r4, pc}
 8002800:	40023800 	.word	0x40023800
 8002804:	40007000 	.word	0x40007000
 8002808:	00204100 	.word	0x00204100

0800280c <main>:
{
 800280c:	b5f0      	push	{r4, r5, r6, r7, lr}
 data_write[1] = 0x00;  // config msb
 800280e:	2400      	movs	r4, #0
{
 8002810:	b0a5      	sub	sp, #148	; 0x94
data_write[0] = MCP9808_REG_CONF;
 8002812:	2701      	movs	r7, #1
  HAL_Init();
 8002814:	f7fd ff18 	bl	8000648 <HAL_Init>
  SystemClock_Config();
 8002818:	f7ff ff9c 	bl	8002754 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800281c:	2214      	movs	r2, #20
 800281e:	4621      	mov	r1, r4
 8002820:	a80b      	add	r0, sp, #44	; 0x2c
data_write[0] = MCP9808_REG_CONF;
 8002822:	f88d 7010 	strb.w	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002826:	2580      	movs	r5, #128	; 0x80
 data_write[1] = 0x00;  // config msb
 8002828:	f88d 4011 	strb.w	r4, [sp, #17]
 data_write[2] = 0x00;  // config lsb
 800282c:	f88d 4012 	strb.w	r4, [sp, #18]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002830:	f000 fbc0 	bl	8002fb4 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002834:	4b79      	ldr	r3, [pc, #484]	; (8002a1c <main+0x210>)
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002836:	f244 0181 	movw	r1, #16513	; 0x4081
 800283a:	4879      	ldr	r0, [pc, #484]	; (8002a20 <main+0x214>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800283c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  huart3.Instance = USART3;
 800283e:	4e79      	ldr	r6, [pc, #484]	; (8002a24 <main+0x218>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002840:	f042 0204 	orr.w	r2, r2, #4
 8002844:	631a      	str	r2, [r3, #48]	; 0x30
 8002846:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002848:	f002 0204 	and.w	r2, r2, #4
 800284c:	9205      	str	r2, [sp, #20]
 800284e:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002850:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002852:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002856:	631a      	str	r2, [r3, #48]	; 0x30
 8002858:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800285a:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800285e:	9206      	str	r2, [sp, #24]
 8002860:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002862:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002864:	433a      	orrs	r2, r7
 8002866:	631a      	str	r2, [r3, #48]	; 0x30
 8002868:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800286a:	403a      	ands	r2, r7
 800286c:	9207      	str	r2, [sp, #28]
 800286e:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002870:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002872:	f042 0202 	orr.w	r2, r2, #2
 8002876:	631a      	str	r2, [r3, #48]	; 0x30
 8002878:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800287a:	f002 0202 	and.w	r2, r2, #2
 800287e:	9208      	str	r2, [sp, #32]
 8002880:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002882:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002884:	f042 0208 	orr.w	r2, r2, #8
 8002888:	631a      	str	r2, [r3, #48]	; 0x30
 800288a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800288c:	f002 0208 	and.w	r2, r2, #8
 8002890:	9209      	str	r2, [sp, #36]	; 0x24
 8002892:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002894:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002896:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800289a:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800289c:	4622      	mov	r2, r4
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800289e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028a4:	930a      	str	r3, [sp, #40]	; 0x28
 80028a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80028a8:	f7fe fa30 	bl	8000d0c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80028ac:	4622      	mov	r2, r4
 80028ae:	2140      	movs	r1, #64	; 0x40
 80028b0:	485d      	ldr	r0, [pc, #372]	; (8002a28 <main+0x21c>)
 80028b2:	f7fe fa2b 	bl	8000d0c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80028b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80028ba:	a90b      	add	r1, sp, #44	; 0x2c
 80028bc:	485b      	ldr	r0, [pc, #364]	; (8002a2c <main+0x220>)
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80028be:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80028c0:	4b5b      	ldr	r3, [pc, #364]	; (8002a30 <main+0x224>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c2:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80028c4:	930c      	str	r3, [sp, #48]	; 0x30
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80028c6:	f7fe f937 	bl	8000b38 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80028ca:	f244 0381 	movw	r3, #16513	; 0x4081
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028ce:	a90b      	add	r1, sp, #44	; 0x2c
 80028d0:	4853      	ldr	r0, [pc, #332]	; (8002a20 <main+0x214>)
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80028d2:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028d4:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d6:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028d8:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028da:	f7fe f92d 	bl	8000b38 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80028de:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80028e0:	a90b      	add	r1, sp, #44	; 0x2c
 80028e2:	4851      	ldr	r0, [pc, #324]	; (8002a28 <main+0x21c>)
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80028e4:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028e6:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e8:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ea:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80028ec:	f7fe f924 	bl	8000b38 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80028f0:	a90b      	add	r1, sp, #44	; 0x2c
 80028f2:	484d      	ldr	r0, [pc, #308]	; (8002a28 <main+0x21c>)
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80028f4:	950b      	str	r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028f6:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f8:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80028fa:	f7fe f91d 	bl	8000b38 <HAL_GPIO_Init>
  heth.Instance = ETH;
 80028fe:	484d      	ldr	r0, [pc, #308]	; (8002a34 <main+0x228>)
  heth.Init.MACAddr[2] =   0xE1;
 8002900:	22e1      	movs	r2, #225	; 0xe1
  heth.Instance = ETH;
 8002902:	4b4d      	ldr	r3, [pc, #308]	; (8002a38 <main+0x22c>)
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8002904:	8204      	strh	r4, [r0, #16]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8002906:	e880 0088 	stmia.w	r0, {r3, r7}
  heth.Init.MACAddr[0] =   0x00;
 800290a:	6943      	ldr	r3, [r0, #20]
 800290c:	701c      	strb	r4, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 800290e:	6943      	ldr	r3, [r0, #20]
 8002910:	705d      	strb	r5, [r3, #1]
  heth.Init.MACAddr[2] =   0xE1;
 8002912:	6943      	ldr	r3, [r0, #20]
  hi2c1.Instance = I2C1;
 8002914:	4d49      	ldr	r5, [pc, #292]	; (8002a3c <main+0x230>)
  heth.Init.MACAddr[2] =   0xE1;
 8002916:	709a      	strb	r2, [r3, #2]
  heth.Init.MACAddr[3] =   0x00;
 8002918:	6943      	ldr	r3, [r0, #20]
 800291a:	70dc      	strb	r4, [r3, #3]
  heth.Init.MACAddr[4] =   0x00;
 800291c:	6943      	ldr	r3, [r0, #20]
 800291e:	711c      	strb	r4, [r3, #4]
  heth.Init.MACAddr[5] =   0x00;
 8002920:	6943      	ldr	r3, [r0, #20]
 8002922:	715c      	strb	r4, [r3, #5]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8002924:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8002928:	6184      	str	r4, [r0, #24]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800292a:	6203      	str	r3, [r0, #32]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800292c:	61c4      	str	r4, [r0, #28]
  if (HAL_ETH_Init(&heth) != HAL_OK)
 800292e:	f7fe f809 	bl	8000944 <HAL_ETH_Init>
  hi2c1.Init.Timing = 0x20303E5D;
 8002932:	4b43      	ldr	r3, [pc, #268]	; (8002a40 <main+0x234>)
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002934:	4628      	mov	r0, r5
  hi2c1.Init.Timing = 0x20303E5D;
 8002936:	4943      	ldr	r1, [pc, #268]	; (8002a44 <main+0x238>)
  hi2c1.Init.OwnAddress1 = 0;
 8002938:	60ac      	str	r4, [r5, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800293a:	60ef      	str	r7, [r5, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800293c:	612c      	str	r4, [r5, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800293e:	616c      	str	r4, [r5, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002940:	61ac      	str	r4, [r5, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002942:	61ec      	str	r4, [r5, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002944:	622c      	str	r4, [r5, #32]
  hi2c1.Init.Timing = 0x20303E5D;
 8002946:	e885 000a 	stmia.w	r5, {r1, r3}
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800294a:	f7fe fb05 	bl	8000f58 <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800294e:	4621      	mov	r1, r4
 8002950:	4628      	mov	r0, r5
 8002952:	f7fe fc7d 	bl	8001250 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002956:	4621      	mov	r1, r4
 8002958:	4628      	mov	r0, r5
 800295a:	f7fe fc9f 	bl	800129c <HAL_I2CEx_ConfigDigitalFilter>
  huart3.Init.BaudRate = 115200;
 800295e:	483a      	ldr	r0, [pc, #232]	; (8002a48 <main+0x23c>)
 8002960:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002964:	60b4      	str	r4, [r6, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002966:	60f4      	str	r4, [r6, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002968:	6134      	str	r4, [r6, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800296a:	61b4      	str	r4, [r6, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800296c:	61f4      	str	r4, [r6, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800296e:	6234      	str	r4, [r6, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002970:	6274      	str	r4, [r6, #36]	; 0x24
  huart3.Init.BaudRate = 115200;
 8002972:	e886 0009 	stmia.w	r6, {r0, r3}
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002976:	230c      	movs	r3, #12
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002978:	4630      	mov	r0, r6
  huart3.Init.Mode = UART_MODE_TX_RX;
 800297a:	6173      	str	r3, [r6, #20]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800297c:	f7ff fd5c 	bl	8002438 <HAL_UART_Init>
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002980:	4832      	ldr	r0, [pc, #200]	; (8002a4c <main+0x240>)
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8002982:	f04f 0e06 	mov.w	lr, #6
 8002986:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800298a:	6104      	str	r4, [r0, #16]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800298c:	61c7      	str	r7, [r0, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800298e:	6204      	str	r4, [r0, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002990:	6244      	str	r4, [r0, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8002992:	62c7      	str	r7, [r0, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002994:	6304      	str	r4, [r0, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8002996:	e880 4008 	stmia.w	r0, {r3, lr}
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800299a:	2302      	movs	r3, #2
 800299c:	60c3      	str	r3, [r0, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800299e:	6183      	str	r3, [r0, #24]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80029a0:	f7fe fca1 	bl	80012e6 <HAL_PCD_Init>
  HAL_Delay(3000);
 80029a4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80029a8:	f7fd fe6c 	bl	8000684 <HAL_Delay>
  if(HAL_I2C_Init(&hi2c1) != HAL_OK)
 80029ac:	4628      	mov	r0, r5
 80029ae:	f7fe fad3 	bl	8000f58 <HAL_I2C_Init>
 80029b2:	b168      	cbz	r0, 80029d0 <main+0x1c4>
		sprintf(buf,"error Initiate  %d\r\n");
 80029b4:	4926      	ldr	r1, [pc, #152]	; (8002a50 <main+0x244>)
 80029b6:	a80b      	add	r0, sp, #44	; 0x2c
 80029b8:	f000 fb04 	bl	8002fc4 <siprintf>
		HAL_UART_Transmit(&huart3,buf,strlen(buf),1000);
 80029bc:	a80b      	add	r0, sp, #44	; 0x2c
 80029be:	f7fd fc3f 	bl	8000240 <strlen>
 80029c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029c6:	b282      	uxth	r2, r0
 80029c8:	a90b      	add	r1, sp, #44	; 0x2c
 80029ca:	4630      	mov	r0, r6
 80029cc:	f7ff fcac 	bl	8002328 <HAL_UART_Transmit>
if(stat=(HAL_I2C_Master_Transmit(&hi2c1,MCP9808_ADDR,data_write,3,1000))!=HAL_OK)
 80029d0:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
sprintf(buf,"hello World\n\r");
 80029d4:	491f      	ldr	r1, [pc, #124]	; (8002a54 <main+0x248>)
 80029d6:	a80b      	add	r0, sp, #44	; 0x2c
 80029d8:	f000 fb18 	bl	800300c <strcpy>
if(stat=(HAL_I2C_Master_Transmit(&hi2c1,MCP9808_ADDR,data_write,3,1000))!=HAL_OK)
 80029dc:	9400      	str	r4, [sp, #0]
 80029de:	2303      	movs	r3, #3
 80029e0:	aa04      	add	r2, sp, #16
 80029e2:	2130      	movs	r1, #48	; 0x30
 80029e4:	4815      	ldr	r0, [pc, #84]	; (8002a3c <main+0x230>)
 80029e6:	f7fe fb09 	bl	8000ffc <HAL_I2C_Master_Transmit>
 80029ea:	2800      	cmp	r0, #0
 80029ec:	d036      	beq.n	8002a5c <main+0x250>
	sprintf(buf,"error sending commmand  %d\r\n",stat);
 80029ee:	2201      	movs	r2, #1
 80029f0:	4919      	ldr	r1, [pc, #100]	; (8002a58 <main+0x24c>)
 80029f2:	a80b      	add	r0, sp, #44	; 0x2c
 80029f4:	f000 fae6 	bl	8002fc4 <siprintf>
	HAL_UART_Transmit(&huart3,buf,strlen(buf),1000);
 80029f8:	a80b      	add	r0, sp, #44	; 0x2c
 80029fa:	f7fd fc21 	bl	8000240 <strlen>
 80029fe:	4623      	mov	r3, r4
         HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 8002a00:	4c07      	ldr	r4, [pc, #28]	; (8002a20 <main+0x214>)
	HAL_UART_Transmit(&huart3,buf,strlen(buf),1000);
 8002a02:	b282      	uxth	r2, r0
 8002a04:	a90b      	add	r1, sp, #44	; 0x2c
 8002a06:	4807      	ldr	r0, [pc, #28]	; (8002a24 <main+0x218>)
 8002a08:	f7ff fc8e 	bl	8002328 <HAL_UART_Transmit>
         HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 8002a0c:	4620      	mov	r0, r4
 8002a0e:	2180      	movs	r1, #128	; 0x80
 8002a10:	f7fe f981 	bl	8000d16 <HAL_GPIO_TogglePin>
         HAL_Delay(200);
 8002a14:	20c8      	movs	r0, #200	; 0xc8
 8002a16:	f7fd fe35 	bl	8000684 <HAL_Delay>
 8002a1a:	e7f7      	b.n	8002a0c <main+0x200>
 8002a1c:	40023800 	.word	0x40023800
 8002a20:	40020400 	.word	0x40020400
 8002a24:	200200a8 	.word	0x200200a8
 8002a28:	40021800 	.word	0x40021800
 8002a2c:	40020800 	.word	0x40020800
 8002a30:	10110000 	.word	0x10110000
 8002a34:	20020578 	.word	0x20020578
 8002a38:	40028000 	.word	0x40028000
 8002a3c:	20020128 	.word	0x20020128
 8002a40:	20303e5d 	.word	0x20303e5d
 8002a44:	40005400 	.word	0x40005400
 8002a48:	40004800 	.word	0x40004800
 8002a4c:	20020174 	.word	0x20020174
 8002a50:	08003839 	.word	0x08003839
 8002a54:	0800384e 	.word	0x0800384e
 8002a58:	0800385c 	.word	0x0800385c
sprintf(buf,"enter forever loop\r\n");
 8002a5c:	4962      	ldr	r1, [pc, #392]	; (8002be8 <main+0x3dc>)
 8002a5e:	a80b      	add	r0, sp, #44	; 0x2c
 8002a60:	f000 fad4 	bl	800300c <strcpy>
HAL_UART_Transmit(&huart3,buf,strlen(buf),1000);
 8002a64:	a80b      	add	r0, sp, #44	; 0x2c
 8002a66:	f7fd fbeb 	bl	8000240 <strlen>
      HAL_I2C_Master_Transmit(&hi2c1,MCP9808_ADDR,data_write,1,1000);// no stop
 8002a6a:	4e60      	ldr	r6, [pc, #384]	; (8002bec <main+0x3e0>)
HAL_UART_Transmit(&huart3,buf,strlen(buf),1000);
 8002a6c:	4623      	mov	r3, r4
         HAL_UART_Transmit(&huart3,buf,strlen(buf),1000);
 8002a6e:	4d60      	ldr	r5, [pc, #384]	; (8002bf0 <main+0x3e4>)
 8002a70:	4c60      	ldr	r4, [pc, #384]	; (8002bf4 <main+0x3e8>)
HAL_UART_Transmit(&huart3,buf,strlen(buf),1000);
 8002a72:	b282      	uxth	r2, r0
 8002a74:	a90b      	add	r1, sp, #44	; 0x2c
 8002a76:	485e      	ldr	r0, [pc, #376]	; (8002bf0 <main+0x3e4>)
 8002a78:	f7ff fc56 	bl	8002328 <HAL_UART_Transmit>
      data_write[0] = MCP9808_REG_TEMP;
 8002a7c:	2305      	movs	r3, #5
      HAL_I2C_Master_Transmit(&hi2c1,MCP9808_ADDR,data_write,1,1000);// no stop
 8002a7e:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
 8002a82:	aa04      	add	r2, sp, #16
 8002a84:	2130      	movs	r1, #48	; 0x30
      data_write[0] = MCP9808_REG_TEMP;
 8002a86:	f88d 3010 	strb.w	r3, [sp, #16]
      HAL_I2C_Master_Transmit(&hi2c1,MCP9808_ADDR,data_write,1,1000);// no stop
 8002a8a:	4630      	mov	r0, r6
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	9700      	str	r7, [sp, #0]
 8002a90:	f7fe fab4 	bl	8000ffc <HAL_I2C_Master_Transmit>
     HAL_I2C_Master_Receive(&hi2c1,MCP9808_ADDR, data_read, 2,1000);
 8002a94:	2302      	movs	r3, #2
 8002a96:	9700      	str	r7, [sp, #0]
 8002a98:	aa03      	add	r2, sp, #12
 8002a9a:	2130      	movs	r1, #48	; 0x30
 8002a9c:	4630      	mov	r0, r6
 8002a9e:	f7fe fb41 	bl	8001124 <HAL_I2C_Master_Receive>
     if((data_read[0] & 0x80)  == 0x80) {
 8002aa2:	f99d 300c 	ldrsb.w	r3, [sp, #12]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	da0c      	bge.n	8002ac4 <main+0x2b8>
         sprintf(buf," temp >= critical ");
 8002aaa:	4953      	ldr	r1, [pc, #332]	; (8002bf8 <main+0x3ec>)
 8002aac:	a80b      	add	r0, sp, #44	; 0x2c
 8002aae:	f000 faad 	bl	800300c <strcpy>
         HAL_UART_Transmit(&huart3,buf,strlen(buf),1000);
 8002ab2:	a80b      	add	r0, sp, #44	; 0x2c
 8002ab4:	f7fd fbc4 	bl	8000240 <strlen>
 8002ab8:	463b      	mov	r3, r7
 8002aba:	b282      	uxth	r2, r0
 8002abc:	a90b      	add	r1, sp, #44	; 0x2c
 8002abe:	4628      	mov	r0, r5
 8002ac0:	f7ff fc32 	bl	8002328 <HAL_UART_Transmit>
     if((data_read[0] & 0x40) == 0x40) {
 8002ac4:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8002ac8:	065a      	lsls	r2, r3, #25
 8002aca:	d50d      	bpl.n	8002ae8 <main+0x2dc>
    	 sprintf(buf,"   temp > upper limit ");
 8002acc:	494b      	ldr	r1, [pc, #300]	; (8002bfc <main+0x3f0>)
 8002ace:	a80b      	add	r0, sp, #44	; 0x2c
 8002ad0:	f000 fa9c 	bl	800300c <strcpy>
         HAL_UART_Transmit(&huart3,buf,strlen(buf),1000);
 8002ad4:	a80b      	add	r0, sp, #44	; 0x2c
 8002ad6:	f7fd fbb3 	bl	8000240 <strlen>
 8002ada:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ade:	b282      	uxth	r2, r0
 8002ae0:	a90b      	add	r1, sp, #44	; 0x2c
 8002ae2:	4628      	mov	r0, r5
 8002ae4:	f7ff fc20 	bl	8002328 <HAL_UART_Transmit>
     if((data_read[0] & 0x20) == 0x20) {
 8002ae8:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8002aec:	069b      	lsls	r3, r3, #26
 8002aee:	d50d      	bpl.n	8002b0c <main+0x300>
    	 sprintf(buf," temp < lower limit  ");
 8002af0:	4943      	ldr	r1, [pc, #268]	; (8002c00 <main+0x3f4>)
 8002af2:	a80b      	add	r0, sp, #44	; 0x2c
 8002af4:	f000 fa8a 	bl	800300c <strcpy>
         HAL_UART_Transmit(&huart3,buf,strlen(buf),1000);
 8002af8:	a80b      	add	r0, sp, #44	; 0x2c
 8002afa:	f7fd fba1 	bl	8000240 <strlen>
 8002afe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b02:	b282      	uxth	r2, r0
 8002b04:	a90b      	add	r1, sp, #44	; 0x2c
 8002b06:	4628      	mov	r0, r5
 8002b08:	f7ff fc0e 	bl	8002328 <HAL_UART_Transmit>
     if(data_read[0] & 0xE0) {
 8002b0c:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8002b10:	f013 0fe0 	tst.w	r3, #224	; 0xe0
 8002b14:	d013      	beq.n	8002b3e <main+0x332>
    	 sprintf(buf,"\r\n");
 8002b16:	493b      	ldr	r1, [pc, #236]	; (8002c04 <main+0x3f8>)
 8002b18:	a80b      	add	r0, sp, #44	; 0x2c
 8002b1a:	f000 fa77 	bl	800300c <strcpy>
         HAL_UART_Transmit(&huart3,buf,strlen(buf),1000);
 8002b1e:	a80b      	add	r0, sp, #44	; 0x2c
 8002b20:	f7fd fb8e 	bl	8000240 <strlen>
 8002b24:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b28:	b282      	uxth	r2, r0
 8002b2a:	a90b      	add	r1, sp, #44	; 0x2c
 8002b2c:	4628      	mov	r0, r5
 8002b2e:	f7ff fbfb 	bl	8002328 <HAL_UART_Transmit>
         data_read[0] = data_read[0] & 0x1F;  // clear flag bits
 8002b32:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8002b36:	f003 031f 	and.w	r3, r3, #31
 8002b3a:	f88d 300c 	strb.w	r3, [sp, #12]
     if((data_read[0] & 0x10) == 0x10) {
 8002b3e:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8002b42:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8002b46:	f013 0f10 	tst.w	r3, #16
 8002b4a:	d03d      	beq.n	8002bc8 <main+0x3bc>
         data_read[0] = data_read[0] & 0x0F;
 8002b4c:	f003 030f 	and.w	r3, r3, #15
         TempCelsiusDisplay[0] = '-';
 8002b50:	212d      	movs	r1, #45	; 0x2d
         data_read[0] = data_read[0] & 0x0F;
 8002b52:	f88d 300c 	strb.w	r3, [sp, #12]
         tempval = 256 - (data_read[0] << 4) + (data_read[1] >> 4);
 8002b56:	011b      	lsls	r3, r3, #4
         TempCelsiusDisplay[0] = '-';
 8002b58:	7021      	strb	r1, [r4, #0]
         tempval = 256 - (data_read[0] << 4) + (data_read[1] >> 4);
 8002b5a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
     if (data_read[1] & 0x08) {
 8002b5e:	f012 0f08 	tst.w	r2, #8
         tempval = (data_read[0] << 4) + (data_read[1] >> 4);
 8002b62:	eb03 1312 	add.w	r3, r3, r2, lsr #4
 8002b66:	f002 0204 	and.w	r2, r2, #4
     if (data_read[1] & 0x08) {
 8002b6a:	d035      	beq.n	8002bd8 <main+0x3cc>
 8002b6c:	2135      	movs	r1, #53	; 0x35
         if(data_read[1] & 0x04) {
 8002b6e:	b37a      	cbz	r2, 8002bd0 <main+0x3c4>
             TempCelsiusDisplay[5] = '7';
 8002b70:	2237      	movs	r2, #55	; 0x37
 8002b72:	7162      	strb	r2, [r4, #5]
             TempCelsiusDisplay[6] = '5';
 8002b74:	71a1      	strb	r1, [r4, #6]
     TempCelsiusDisplay[1] = (tempval / 100) + 0x30;
 8002b76:	2064      	movs	r0, #100	; 0x64
 8002b78:	fb93 f2f0 	sdiv	r2, r3, r0
     TempCelsiusDisplay[2] = ((tempval % 100) / 10) + 0x30;
 8002b7c:	fb00 3312 	mls	r3, r0, r2, r3
 8002b80:	200a      	movs	r0, #10
     TempCelsiusDisplay[1] = (tempval / 100) + 0x30;
 8002b82:	f102 0130 	add.w	r1, r2, #48	; 0x30
     TempCelsiusDisplay[2] = ((tempval % 100) / 10) + 0x30;
 8002b86:	fb93 f2f0 	sdiv	r2, r3, r0
     TempCelsiusDisplay[1] = (tempval / 100) + 0x30;
 8002b8a:	b2c9      	uxtb	r1, r1
 8002b8c:	7061      	strb	r1, [r4, #1]
     TempCelsiusDisplay[2] = ((tempval % 100) / 10) + 0x30;
 8002b8e:	f102 0130 	add.w	r1, r2, #48	; 0x30
     TempCelsiusDisplay[3] = ((tempval % 100) % 10) + 0x30;
 8002b92:	fb00 3212 	mls	r2, r0, r2, r3
     sprintf(buf,"temp = %s\r\n", TempCelsiusDisplay);
 8002b96:	a80b      	add	r0, sp, #44	; 0x2c
     TempCelsiusDisplay[2] = ((tempval % 100) / 10) + 0x30;
 8002b98:	b2c9      	uxtb	r1, r1
     TempCelsiusDisplay[3] = ((tempval % 100) % 10) + 0x30;
 8002b9a:	3230      	adds	r2, #48	; 0x30
     TempCelsiusDisplay[2] = ((tempval % 100) / 10) + 0x30;
 8002b9c:	70a1      	strb	r1, [r4, #2]
     TempCelsiusDisplay[3] = ((tempval % 100) % 10) + 0x30;
 8002b9e:	b2d2      	uxtb	r2, r2
     sprintf(buf,"temp = %s\r\n", TempCelsiusDisplay);
 8002ba0:	4919      	ldr	r1, [pc, #100]	; (8002c08 <main+0x3fc>)
     TempCelsiusDisplay[3] = ((tempval % 100) % 10) + 0x30;
 8002ba2:	70e2      	strb	r2, [r4, #3]
     sprintf(buf,"temp = %s\r\n", TempCelsiusDisplay);
 8002ba4:	4622      	mov	r2, r4
 8002ba6:	f000 fa0d 	bl	8002fc4 <siprintf>
     HAL_UART_Transmit(&huart3,buf,strlen(buf),1000);
 8002baa:	a80b      	add	r0, sp, #44	; 0x2c
 8002bac:	f7fd fb48 	bl	8000240 <strlen>
 8002bb0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002bb4:	b282      	uxth	r2, r0
 8002bb6:	a90b      	add	r1, sp, #44	; 0x2c
 8002bb8:	4628      	mov	r0, r5
 8002bba:	f7ff fbb5 	bl	8002328 <HAL_UART_Transmit>
     HAL_Delay(1000);
 8002bbe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002bc2:	f7fd fd5f 	bl	8000684 <HAL_Delay>
      data_write[0] = MCP9808_REG_TEMP;
 8002bc6:	e759      	b.n	8002a7c <main+0x270>
         TempCelsiusDisplay[0] = '+';
 8002bc8:	212b      	movs	r1, #43	; 0x2b
         tempval = (data_read[0] << 4) + (data_read[1] >> 4);
 8002bca:	011b      	lsls	r3, r3, #4
         TempCelsiusDisplay[0] = '+';
 8002bcc:	7021      	strb	r1, [r4, #0]
 8002bce:	e7c6      	b.n	8002b5e <main+0x352>
             TempCelsiusDisplay[6] = '0';
 8002bd0:	2230      	movs	r2, #48	; 0x30
             TempCelsiusDisplay[5] = '5';
 8002bd2:	7161      	strb	r1, [r4, #5]
             TempCelsiusDisplay[6] = '0';
 8002bd4:	71a2      	strb	r2, [r4, #6]
 8002bd6:	e7ce      	b.n	8002b76 <main+0x36a>
         if(data_read[1] & 0x04) {
 8002bd8:	b11a      	cbz	r2, 8002be2 <main+0x3d6>
             TempCelsiusDisplay[5] = '2';
 8002bda:	2232      	movs	r2, #50	; 0x32
 8002bdc:	7162      	strb	r2, [r4, #5]
             TempCelsiusDisplay[6] = '5';
 8002bde:	2235      	movs	r2, #53	; 0x35
 8002be0:	e7f8      	b.n	8002bd4 <main+0x3c8>
             TempCelsiusDisplay[5] = '0';
 8002be2:	2230      	movs	r2, #48	; 0x30
 8002be4:	7162      	strb	r2, [r4, #5]
 8002be6:	e7f5      	b.n	8002bd4 <main+0x3c8>
 8002be8:	08003879 	.word	0x08003879
 8002bec:	20020128 	.word	0x20020128
 8002bf0:	200200a8 	.word	0x200200a8
 8002bf4:	20020008 	.word	0x20020008
 8002bf8:	0800388e 	.word	0x0800388e
 8002bfc:	080038a1 	.word	0x080038a1
 8002c00:	080038b8 	.word	0x080038b8
 8002c04:	08003876 	.word	0x08003876
 8002c08:	080038ce 	.word	0x080038ce

08002c0c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002c0c:	4b0a      	ldr	r3, [pc, #40]	; (8002c38 <HAL_MspInit+0x2c>)
{
 8002c0e:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c12:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002c16:	641a      	str	r2, [r3, #64]	; 0x40
 8002c18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c1a:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8002c1e:	9200      	str	r2, [sp, #0]
 8002c20:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c22:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c24:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c28:	645a      	str	r2, [r3, #68]	; 0x44
 8002c2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c30:	9301      	str	r3, [sp, #4]
 8002c32:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c34:	b002      	add	sp, #8
 8002c36:	4770      	bx	lr
 8002c38:	40023800 	.word	0x40023800

08002c3c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8002c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c3e:	b08d      	sub	sp, #52	; 0x34
 8002c40:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c42:	2214      	movs	r2, #20
 8002c44:	2100      	movs	r1, #0
 8002c46:	a807      	add	r0, sp, #28
 8002c48:	f000 f9b4 	bl	8002fb4 <memset>
  if(heth->Instance==ETH)
 8002c4c:	6822      	ldr	r2, [r4, #0]
 8002c4e:	4b39      	ldr	r3, [pc, #228]	; (8002d34 <HAL_ETH_MspInit+0xf8>)
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d16d      	bne.n	8002d30 <HAL_ETH_MspInit+0xf4>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8002c54:	f5a3 4390 	sub.w	r3, r3, #18432	; 0x4800
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c58:	2602      	movs	r6, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c5a:	2503      	movs	r5, #3
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002c5c:	240b      	movs	r4, #11
    __HAL_RCC_ETH_CLK_ENABLE();
 8002c5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c60:	a907      	add	r1, sp, #28
 8002c62:	4835      	ldr	r0, [pc, #212]	; (8002d38 <HAL_ETH_MspInit+0xfc>)

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c64:	2700      	movs	r7, #0
    __HAL_RCC_ETH_CLK_ENABLE();
 8002c66:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8002c6a:	631a      	str	r2, [r3, #48]	; 0x30
 8002c6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c6e:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8002c72:	9200      	str	r2, [sp, #0]
 8002c74:	9a00      	ldr	r2, [sp, #0]
 8002c76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c78:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002c7c:	631a      	str	r2, [r3, #48]	; 0x30
 8002c7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c80:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8002c84:	9201      	str	r2, [sp, #4]
 8002c86:	9a01      	ldr	r2, [sp, #4]
 8002c88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c8a:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8002c8e:	631a      	str	r2, [r3, #48]	; 0x30
 8002c90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c92:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8002c96:	9202      	str	r2, [sp, #8]
 8002c98:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c9c:	f042 0204 	orr.w	r2, r2, #4
 8002ca0:	631a      	str	r2, [r3, #48]	; 0x30
 8002ca2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ca4:	f002 0204 	and.w	r2, r2, #4
 8002ca8:	9203      	str	r2, [sp, #12]
 8002caa:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cae:	f042 0201 	orr.w	r2, r2, #1
 8002cb2:	631a      	str	r2, [r3, #48]	; 0x30
 8002cb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cb6:	f002 0201 	and.w	r2, r2, #1
 8002cba:	9204      	str	r2, [sp, #16]
 8002cbc:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cc0:	f042 0202 	orr.w	r2, r2, #2
 8002cc4:	631a      	str	r2, [r3, #48]	; 0x30
 8002cc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cc8:	f002 0202 	and.w	r2, r2, #2
 8002ccc:	9205      	str	r2, [sp, #20]
 8002cce:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002cd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cd2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002cd6:	631a      	str	r2, [r3, #48]	; 0x30
 8002cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cda:	9608      	str	r6, [sp, #32]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002cdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ce0:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002ce2:	940b      	str	r4, [sp, #44]	; 0x2c
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002ce4:	9306      	str	r3, [sp, #24]
 8002ce6:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002ce8:	2332      	movs	r3, #50	; 0x32
 8002cea:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cec:	f7fd ff24 	bl	8000b38 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002cf0:	2386      	movs	r3, #134	; 0x86
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cf2:	a907      	add	r1, sp, #28
 8002cf4:	4811      	ldr	r0, [pc, #68]	; (8002d3c <HAL_ETH_MspInit+0x100>)
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002cf6:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cf8:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cfa:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cfc:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002cfe:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d00:	f7fd ff1a 	bl	8000b38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8002d04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8002d08:	a907      	add	r1, sp, #28
 8002d0a:	480d      	ldr	r0, [pc, #52]	; (8002d40 <HAL_ETH_MspInit+0x104>)
    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8002d0c:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d0e:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d10:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d12:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002d14:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8002d16:	f7fd ff0f 	bl	8000b38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8002d1a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002d1e:	a907      	add	r1, sp, #28
 8002d20:	4808      	ldr	r0, [pc, #32]	; (8002d44 <HAL_ETH_MspInit+0x108>)
    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8002d22:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d24:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d26:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d28:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002d2a:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002d2c:	f7fd ff04 	bl	8000b38 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8002d30:	b00d      	add	sp, #52	; 0x34
 8002d32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d34:	40028000 	.word	0x40028000
 8002d38:	40020800 	.word	0x40020800
 8002d3c:	40020000 	.word	0x40020000
 8002d40:	40020400 	.word	0x40020400
 8002d44:	40021800 	.word	0x40021800

08002d48 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002d48:	b510      	push	{r4, lr}
 8002d4a:	b088      	sub	sp, #32
 8002d4c:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d4e:	2214      	movs	r2, #20
 8002d50:	2100      	movs	r1, #0
 8002d52:	a803      	add	r0, sp, #12
 8002d54:	f000 f92e 	bl	8002fb4 <memset>
  if(hi2c->Instance==I2C1)
 8002d58:	6822      	ldr	r2, [r4, #0]
 8002d5a:	4b13      	ldr	r3, [pc, #76]	; (8002da8 <HAL_I2C_MspInit+0x60>)
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d121      	bne.n	8002da4 <HAL_I2C_MspInit+0x5c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d60:	4c12      	ldr	r4, [pc, #72]	; (8002dac <HAL_I2C_MspInit+0x64>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d62:	a903      	add	r1, sp, #12
 8002d64:	4812      	ldr	r0, [pc, #72]	; (8002db0 <HAL_I2C_MspInit+0x68>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d66:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002d68:	f043 0302 	orr.w	r3, r3, #2
 8002d6c:	6323      	str	r3, [r4, #48]	; 0x30
 8002d6e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002d70:	f003 0302 	and.w	r3, r3, #2
 8002d74:	9301      	str	r3, [sp, #4]
 8002d76:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8002d78:	f44f 7310 	mov.w	r3, #576	; 0x240
 8002d7c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d7e:	2312      	movs	r3, #18
 8002d80:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d82:	2301      	movs	r3, #1
 8002d84:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d86:	2303      	movs	r3, #3
 8002d88:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002d8a:	2304      	movs	r3, #4
 8002d8c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d8e:	f7fd fed3 	bl	8000b38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002d92:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002d94:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002d98:	6423      	str	r3, [r4, #64]	; 0x40
 8002d9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002d9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002da0:	9302      	str	r3, [sp, #8]
 8002da2:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002da4:	b008      	add	sp, #32
 8002da6:	bd10      	pop	{r4, pc}
 8002da8:	40005400 	.word	0x40005400
 8002dac:	40023800 	.word	0x40023800
 8002db0:	40020400 	.word	0x40020400

08002db4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002db4:	b510      	push	{r4, lr}
 8002db6:	b088      	sub	sp, #32
 8002db8:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dba:	2214      	movs	r2, #20
 8002dbc:	2100      	movs	r1, #0
 8002dbe:	a803      	add	r0, sp, #12
 8002dc0:	f000 f8f8 	bl	8002fb4 <memset>
  if(huart->Instance==USART3)
 8002dc4:	6822      	ldr	r2, [r4, #0]
 8002dc6:	4b13      	ldr	r3, [pc, #76]	; (8002e14 <HAL_UART_MspInit+0x60>)
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d120      	bne.n	8002e0e <HAL_UART_MspInit+0x5a>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002dcc:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002dd0:	a903      	add	r1, sp, #12
 8002dd2:	4811      	ldr	r0, [pc, #68]	; (8002e18 <HAL_UART_MspInit+0x64>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8002dd4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002dd6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002dda:	641a      	str	r2, [r3, #64]	; 0x40
 8002ddc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002dde:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8002de2:	9201      	str	r2, [sp, #4]
 8002de4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002de6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002de8:	f042 0208 	orr.w	r2, r2, #8
 8002dec:	631a      	str	r2, [r3, #48]	; 0x30
 8002dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df0:	f003 0308 	and.w	r3, r3, #8
 8002df4:	9302      	str	r3, [sp, #8]
 8002df6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002df8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002dfc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dfe:	2302      	movs	r3, #2
 8002e00:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e02:	2303      	movs	r3, #3
 8002e04:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002e06:	2307      	movs	r3, #7
 8002e08:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e0a:	f7fd fe95 	bl	8000b38 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002e0e:	b008      	add	sp, #32
 8002e10:	bd10      	pop	{r4, pc}
 8002e12:	bf00      	nop
 8002e14:	40004800 	.word	0x40004800
 8002e18:	40020c00 	.word	0x40020c00

08002e1c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002e1c:	b510      	push	{r4, lr}
 8002e1e:	b088      	sub	sp, #32
 8002e20:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e22:	2214      	movs	r2, #20
 8002e24:	2100      	movs	r1, #0
 8002e26:	a803      	add	r0, sp, #12
 8002e28:	f000 f8c4 	bl	8002fb4 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8002e2c:	6823      	ldr	r3, [r4, #0]
 8002e2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e32:	d132      	bne.n	8002e9a <HAL_PCD_MspInit+0x7e>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e34:	4c1a      	ldr	r4, [pc, #104]	; (8002ea0 <HAL_PCD_MspInit+0x84>)
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e36:	a903      	add	r1, sp, #12
 8002e38:	481a      	ldr	r0, [pc, #104]	; (8002ea4 <HAL_PCD_MspInit+0x88>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e3a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002e3c:	f043 0301 	orr.w	r3, r3, #1
 8002e40:	6323      	str	r3, [r4, #48]	; 0x30
 8002e42:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002e44:	f003 0301 	and.w	r3, r3, #1
 8002e48:	9300      	str	r3, [sp, #0]
 8002e4a:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002e4c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002e50:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e52:	2302      	movs	r3, #2
 8002e54:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e56:	2303      	movs	r3, #3
 8002e58:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002e5a:	230a      	movs	r3, #10
 8002e5c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e5e:	f7fd fe6b 	bl	8000b38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002e62:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002e66:	a903      	add	r1, sp, #12
 8002e68:	480e      	ldr	r0, [pc, #56]	; (8002ea4 <HAL_PCD_MspInit+0x88>)
    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002e6a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e70:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002e72:	f7fd fe61 	bl	8000b38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002e76:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002e78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e7c:	6363      	str	r3, [r4, #52]	; 0x34
 8002e7e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002e80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e84:	9301      	str	r3, [sp, #4]
 8002e86:	9b01      	ldr	r3, [sp, #4]
 8002e88:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002e8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e8e:	6463      	str	r3, [r4, #68]	; 0x44
 8002e90:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002e92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e96:	9302      	str	r3, [sp, #8]
 8002e98:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002e9a:	b008      	add	sp, #32
 8002e9c:	bd10      	pop	{r4, pc}
 8002e9e:	bf00      	nop
 8002ea0:	40023800 	.word	0x40023800
 8002ea4:	40020000 	.word	0x40020000

08002ea8 <NMI_Handler>:
 8002ea8:	4770      	bx	lr

08002eaa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002eaa:	e7fe      	b.n	8002eaa <HardFault_Handler>

08002eac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002eac:	e7fe      	b.n	8002eac <MemManage_Handler>

08002eae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002eae:	e7fe      	b.n	8002eae <BusFault_Handler>

08002eb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002eb0:	e7fe      	b.n	8002eb0 <UsageFault_Handler>

08002eb2 <SVC_Handler>:
 8002eb2:	4770      	bx	lr

08002eb4 <DebugMon_Handler>:
 8002eb4:	4770      	bx	lr

08002eb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002eb6:	4770      	bx	lr

08002eb8 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002eb8:	f7fd bbd2 	b.w	8000660 <HAL_IncTick>

08002ebc <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8002ebc:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002ebe:	4b0a      	ldr	r3, [pc, #40]	; (8002ee8 <_sbrk+0x2c>)
{
 8002ec0:	4602      	mov	r2, r0
	if (heap_end == 0)
 8002ec2:	6819      	ldr	r1, [r3, #0]
 8002ec4:	b909      	cbnz	r1, 8002eca <_sbrk+0xe>
		heap_end = &end;
 8002ec6:	4909      	ldr	r1, [pc, #36]	; (8002eec <_sbrk+0x30>)
 8002ec8:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 8002eca:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8002ecc:	4669      	mov	r1, sp
 8002ece:	4402      	add	r2, r0
 8002ed0:	428a      	cmp	r2, r1
 8002ed2:	d906      	bls.n	8002ee2 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8002ed4:	f000 f844 	bl	8002f60 <__errno>
 8002ed8:	230c      	movs	r3, #12
 8002eda:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8002edc:	f04f 30ff 	mov.w	r0, #4294967295
 8002ee0:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8002ee2:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8002ee4:	bd08      	pop	{r3, pc}
 8002ee6:	bf00      	nop
 8002ee8:	20020098 	.word	0x20020098
 8002eec:	200205c4 	.word	0x200205c4

08002ef0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ef0:	4b05      	ldr	r3, [pc, #20]	; (8002f08 <SystemInit+0x18>)
 8002ef2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002ef6:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8002efa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002efe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002f02:	609a      	str	r2, [r3, #8]
 8002f04:	4770      	bx	lr
 8002f06:	bf00      	nop
 8002f08:	e000ed00 	.word	0xe000ed00

08002f0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002f0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f44 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002f10:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002f12:	e003      	b.n	8002f1c <LoopCopyDataInit>

08002f14 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002f14:	4b0c      	ldr	r3, [pc, #48]	; (8002f48 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002f16:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002f18:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002f1a:	3104      	adds	r1, #4

08002f1c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002f1c:	480b      	ldr	r0, [pc, #44]	; (8002f4c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002f1e:	4b0c      	ldr	r3, [pc, #48]	; (8002f50 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002f20:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002f22:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002f24:	d3f6      	bcc.n	8002f14 <CopyDataInit>
  ldr  r2, =_sbss
 8002f26:	4a0b      	ldr	r2, [pc, #44]	; (8002f54 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002f28:	e002      	b.n	8002f30 <LoopFillZerobss>

08002f2a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002f2a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002f2c:	f842 3b04 	str.w	r3, [r2], #4

08002f30 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002f30:	4b09      	ldr	r3, [pc, #36]	; (8002f58 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002f32:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002f34:	d3f9      	bcc.n	8002f2a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002f36:	f7ff ffdb 	bl	8002ef0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f3a:	f000 f817 	bl	8002f6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f3e:	f7ff fc65 	bl	800280c <main>
  bx  lr    
 8002f42:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002f44:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8002f48:	08003938 	.word	0x08003938
  ldr  r0, =_sdata
 8002f4c:	20020000 	.word	0x20020000
  ldr  r3, =_edata
 8002f50:	2002007c 	.word	0x2002007c
  ldr  r2, =_sbss
 8002f54:	2002007c 	.word	0x2002007c
  ldr  r3, = _ebss
 8002f58:	200205c4 	.word	0x200205c4

08002f5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f5c:	e7fe      	b.n	8002f5c <ADC_IRQHandler>
	...

08002f60 <__errno>:
 8002f60:	4b01      	ldr	r3, [pc, #4]	; (8002f68 <__errno+0x8>)
 8002f62:	6818      	ldr	r0, [r3, #0]
 8002f64:	4770      	bx	lr
 8002f66:	bf00      	nop
 8002f68:	20020018 	.word	0x20020018

08002f6c <__libc_init_array>:
 8002f6c:	b570      	push	{r4, r5, r6, lr}
 8002f6e:	4e0d      	ldr	r6, [pc, #52]	; (8002fa4 <__libc_init_array+0x38>)
 8002f70:	4c0d      	ldr	r4, [pc, #52]	; (8002fa8 <__libc_init_array+0x3c>)
 8002f72:	1ba4      	subs	r4, r4, r6
 8002f74:	10a4      	asrs	r4, r4, #2
 8002f76:	2500      	movs	r5, #0
 8002f78:	42a5      	cmp	r5, r4
 8002f7a:	d109      	bne.n	8002f90 <__libc_init_array+0x24>
 8002f7c:	4e0b      	ldr	r6, [pc, #44]	; (8002fac <__libc_init_array+0x40>)
 8002f7e:	4c0c      	ldr	r4, [pc, #48]	; (8002fb0 <__libc_init_array+0x44>)
 8002f80:	f000 fc46 	bl	8003810 <_init>
 8002f84:	1ba4      	subs	r4, r4, r6
 8002f86:	10a4      	asrs	r4, r4, #2
 8002f88:	2500      	movs	r5, #0
 8002f8a:	42a5      	cmp	r5, r4
 8002f8c:	d105      	bne.n	8002f9a <__libc_init_array+0x2e>
 8002f8e:	bd70      	pop	{r4, r5, r6, pc}
 8002f90:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002f94:	4798      	blx	r3
 8002f96:	3501      	adds	r5, #1
 8002f98:	e7ee      	b.n	8002f78 <__libc_init_array+0xc>
 8002f9a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002f9e:	4798      	blx	r3
 8002fa0:	3501      	adds	r5, #1
 8002fa2:	e7f2      	b.n	8002f8a <__libc_init_array+0x1e>
 8002fa4:	08003930 	.word	0x08003930
 8002fa8:	08003930 	.word	0x08003930
 8002fac:	08003930 	.word	0x08003930
 8002fb0:	08003934 	.word	0x08003934

08002fb4 <memset>:
 8002fb4:	4402      	add	r2, r0
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d100      	bne.n	8002fbe <memset+0xa>
 8002fbc:	4770      	bx	lr
 8002fbe:	f803 1b01 	strb.w	r1, [r3], #1
 8002fc2:	e7f9      	b.n	8002fb8 <memset+0x4>

08002fc4 <siprintf>:
 8002fc4:	b40e      	push	{r1, r2, r3}
 8002fc6:	b500      	push	{lr}
 8002fc8:	b09c      	sub	sp, #112	; 0x70
 8002fca:	f44f 7102 	mov.w	r1, #520	; 0x208
 8002fce:	ab1d      	add	r3, sp, #116	; 0x74
 8002fd0:	f8ad 1014 	strh.w	r1, [sp, #20]
 8002fd4:	9002      	str	r0, [sp, #8]
 8002fd6:	9006      	str	r0, [sp, #24]
 8002fd8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002fdc:	480a      	ldr	r0, [pc, #40]	; (8003008 <siprintf+0x44>)
 8002fde:	9104      	str	r1, [sp, #16]
 8002fe0:	9107      	str	r1, [sp, #28]
 8002fe2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002fe6:	f853 2b04 	ldr.w	r2, [r3], #4
 8002fea:	f8ad 1016 	strh.w	r1, [sp, #22]
 8002fee:	6800      	ldr	r0, [r0, #0]
 8002ff0:	9301      	str	r3, [sp, #4]
 8002ff2:	a902      	add	r1, sp, #8
 8002ff4:	f000 f86e 	bl	80030d4 <_svfiprintf_r>
 8002ff8:	9b02      	ldr	r3, [sp, #8]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	701a      	strb	r2, [r3, #0]
 8002ffe:	b01c      	add	sp, #112	; 0x70
 8003000:	f85d eb04 	ldr.w	lr, [sp], #4
 8003004:	b003      	add	sp, #12
 8003006:	4770      	bx	lr
 8003008:	20020018 	.word	0x20020018

0800300c <strcpy>:
 800300c:	4603      	mov	r3, r0
 800300e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003012:	f803 2b01 	strb.w	r2, [r3], #1
 8003016:	2a00      	cmp	r2, #0
 8003018:	d1f9      	bne.n	800300e <strcpy+0x2>
 800301a:	4770      	bx	lr

0800301c <__ssputs_r>:
 800301c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003020:	688e      	ldr	r6, [r1, #8]
 8003022:	429e      	cmp	r6, r3
 8003024:	4682      	mov	sl, r0
 8003026:	460c      	mov	r4, r1
 8003028:	4691      	mov	r9, r2
 800302a:	4698      	mov	r8, r3
 800302c:	d835      	bhi.n	800309a <__ssputs_r+0x7e>
 800302e:	898a      	ldrh	r2, [r1, #12]
 8003030:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003034:	d031      	beq.n	800309a <__ssputs_r+0x7e>
 8003036:	6825      	ldr	r5, [r4, #0]
 8003038:	6909      	ldr	r1, [r1, #16]
 800303a:	1a6f      	subs	r7, r5, r1
 800303c:	6965      	ldr	r5, [r4, #20]
 800303e:	2302      	movs	r3, #2
 8003040:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003044:	fb95 f5f3 	sdiv	r5, r5, r3
 8003048:	f108 0301 	add.w	r3, r8, #1
 800304c:	443b      	add	r3, r7
 800304e:	429d      	cmp	r5, r3
 8003050:	bf38      	it	cc
 8003052:	461d      	movcc	r5, r3
 8003054:	0553      	lsls	r3, r2, #21
 8003056:	d531      	bpl.n	80030bc <__ssputs_r+0xa0>
 8003058:	4629      	mov	r1, r5
 800305a:	f000 fb39 	bl	80036d0 <_malloc_r>
 800305e:	4606      	mov	r6, r0
 8003060:	b950      	cbnz	r0, 8003078 <__ssputs_r+0x5c>
 8003062:	230c      	movs	r3, #12
 8003064:	f8ca 3000 	str.w	r3, [sl]
 8003068:	89a3      	ldrh	r3, [r4, #12]
 800306a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800306e:	81a3      	strh	r3, [r4, #12]
 8003070:	f04f 30ff 	mov.w	r0, #4294967295
 8003074:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003078:	463a      	mov	r2, r7
 800307a:	6921      	ldr	r1, [r4, #16]
 800307c:	f000 fab4 	bl	80035e8 <memcpy>
 8003080:	89a3      	ldrh	r3, [r4, #12]
 8003082:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003086:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800308a:	81a3      	strh	r3, [r4, #12]
 800308c:	6126      	str	r6, [r4, #16]
 800308e:	6165      	str	r5, [r4, #20]
 8003090:	443e      	add	r6, r7
 8003092:	1bed      	subs	r5, r5, r7
 8003094:	6026      	str	r6, [r4, #0]
 8003096:	60a5      	str	r5, [r4, #8]
 8003098:	4646      	mov	r6, r8
 800309a:	4546      	cmp	r6, r8
 800309c:	bf28      	it	cs
 800309e:	4646      	movcs	r6, r8
 80030a0:	4632      	mov	r2, r6
 80030a2:	4649      	mov	r1, r9
 80030a4:	6820      	ldr	r0, [r4, #0]
 80030a6:	f000 faaa 	bl	80035fe <memmove>
 80030aa:	68a3      	ldr	r3, [r4, #8]
 80030ac:	1b9b      	subs	r3, r3, r6
 80030ae:	60a3      	str	r3, [r4, #8]
 80030b0:	6823      	ldr	r3, [r4, #0]
 80030b2:	441e      	add	r6, r3
 80030b4:	6026      	str	r6, [r4, #0]
 80030b6:	2000      	movs	r0, #0
 80030b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030bc:	462a      	mov	r2, r5
 80030be:	f000 fb65 	bl	800378c <_realloc_r>
 80030c2:	4606      	mov	r6, r0
 80030c4:	2800      	cmp	r0, #0
 80030c6:	d1e1      	bne.n	800308c <__ssputs_r+0x70>
 80030c8:	6921      	ldr	r1, [r4, #16]
 80030ca:	4650      	mov	r0, sl
 80030cc:	f000 fab2 	bl	8003634 <_free_r>
 80030d0:	e7c7      	b.n	8003062 <__ssputs_r+0x46>
	...

080030d4 <_svfiprintf_r>:
 80030d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030d8:	b09d      	sub	sp, #116	; 0x74
 80030da:	4680      	mov	r8, r0
 80030dc:	9303      	str	r3, [sp, #12]
 80030de:	898b      	ldrh	r3, [r1, #12]
 80030e0:	061c      	lsls	r4, r3, #24
 80030e2:	460d      	mov	r5, r1
 80030e4:	4616      	mov	r6, r2
 80030e6:	d50f      	bpl.n	8003108 <_svfiprintf_r+0x34>
 80030e8:	690b      	ldr	r3, [r1, #16]
 80030ea:	b96b      	cbnz	r3, 8003108 <_svfiprintf_r+0x34>
 80030ec:	2140      	movs	r1, #64	; 0x40
 80030ee:	f000 faef 	bl	80036d0 <_malloc_r>
 80030f2:	6028      	str	r0, [r5, #0]
 80030f4:	6128      	str	r0, [r5, #16]
 80030f6:	b928      	cbnz	r0, 8003104 <_svfiprintf_r+0x30>
 80030f8:	230c      	movs	r3, #12
 80030fa:	f8c8 3000 	str.w	r3, [r8]
 80030fe:	f04f 30ff 	mov.w	r0, #4294967295
 8003102:	e0c5      	b.n	8003290 <_svfiprintf_r+0x1bc>
 8003104:	2340      	movs	r3, #64	; 0x40
 8003106:	616b      	str	r3, [r5, #20]
 8003108:	2300      	movs	r3, #0
 800310a:	9309      	str	r3, [sp, #36]	; 0x24
 800310c:	2320      	movs	r3, #32
 800310e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003112:	2330      	movs	r3, #48	; 0x30
 8003114:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003118:	f04f 0b01 	mov.w	fp, #1
 800311c:	4637      	mov	r7, r6
 800311e:	463c      	mov	r4, r7
 8003120:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003124:	2b00      	cmp	r3, #0
 8003126:	d13c      	bne.n	80031a2 <_svfiprintf_r+0xce>
 8003128:	ebb7 0a06 	subs.w	sl, r7, r6
 800312c:	d00b      	beq.n	8003146 <_svfiprintf_r+0x72>
 800312e:	4653      	mov	r3, sl
 8003130:	4632      	mov	r2, r6
 8003132:	4629      	mov	r1, r5
 8003134:	4640      	mov	r0, r8
 8003136:	f7ff ff71 	bl	800301c <__ssputs_r>
 800313a:	3001      	adds	r0, #1
 800313c:	f000 80a3 	beq.w	8003286 <_svfiprintf_r+0x1b2>
 8003140:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003142:	4453      	add	r3, sl
 8003144:	9309      	str	r3, [sp, #36]	; 0x24
 8003146:	783b      	ldrb	r3, [r7, #0]
 8003148:	2b00      	cmp	r3, #0
 800314a:	f000 809c 	beq.w	8003286 <_svfiprintf_r+0x1b2>
 800314e:	2300      	movs	r3, #0
 8003150:	f04f 32ff 	mov.w	r2, #4294967295
 8003154:	9304      	str	r3, [sp, #16]
 8003156:	9307      	str	r3, [sp, #28]
 8003158:	9205      	str	r2, [sp, #20]
 800315a:	9306      	str	r3, [sp, #24]
 800315c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003160:	931a      	str	r3, [sp, #104]	; 0x68
 8003162:	2205      	movs	r2, #5
 8003164:	7821      	ldrb	r1, [r4, #0]
 8003166:	4850      	ldr	r0, [pc, #320]	; (80032a8 <_svfiprintf_r+0x1d4>)
 8003168:	f7fd f872 	bl	8000250 <memchr>
 800316c:	1c67      	adds	r7, r4, #1
 800316e:	9b04      	ldr	r3, [sp, #16]
 8003170:	b9d8      	cbnz	r0, 80031aa <_svfiprintf_r+0xd6>
 8003172:	06d9      	lsls	r1, r3, #27
 8003174:	bf44      	itt	mi
 8003176:	2220      	movmi	r2, #32
 8003178:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800317c:	071a      	lsls	r2, r3, #28
 800317e:	bf44      	itt	mi
 8003180:	222b      	movmi	r2, #43	; 0x2b
 8003182:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003186:	7822      	ldrb	r2, [r4, #0]
 8003188:	2a2a      	cmp	r2, #42	; 0x2a
 800318a:	d016      	beq.n	80031ba <_svfiprintf_r+0xe6>
 800318c:	9a07      	ldr	r2, [sp, #28]
 800318e:	2100      	movs	r1, #0
 8003190:	200a      	movs	r0, #10
 8003192:	4627      	mov	r7, r4
 8003194:	3401      	adds	r4, #1
 8003196:	783b      	ldrb	r3, [r7, #0]
 8003198:	3b30      	subs	r3, #48	; 0x30
 800319a:	2b09      	cmp	r3, #9
 800319c:	d951      	bls.n	8003242 <_svfiprintf_r+0x16e>
 800319e:	b1c9      	cbz	r1, 80031d4 <_svfiprintf_r+0x100>
 80031a0:	e011      	b.n	80031c6 <_svfiprintf_r+0xf2>
 80031a2:	2b25      	cmp	r3, #37	; 0x25
 80031a4:	d0c0      	beq.n	8003128 <_svfiprintf_r+0x54>
 80031a6:	4627      	mov	r7, r4
 80031a8:	e7b9      	b.n	800311e <_svfiprintf_r+0x4a>
 80031aa:	4a3f      	ldr	r2, [pc, #252]	; (80032a8 <_svfiprintf_r+0x1d4>)
 80031ac:	1a80      	subs	r0, r0, r2
 80031ae:	fa0b f000 	lsl.w	r0, fp, r0
 80031b2:	4318      	orrs	r0, r3
 80031b4:	9004      	str	r0, [sp, #16]
 80031b6:	463c      	mov	r4, r7
 80031b8:	e7d3      	b.n	8003162 <_svfiprintf_r+0x8e>
 80031ba:	9a03      	ldr	r2, [sp, #12]
 80031bc:	1d11      	adds	r1, r2, #4
 80031be:	6812      	ldr	r2, [r2, #0]
 80031c0:	9103      	str	r1, [sp, #12]
 80031c2:	2a00      	cmp	r2, #0
 80031c4:	db01      	blt.n	80031ca <_svfiprintf_r+0xf6>
 80031c6:	9207      	str	r2, [sp, #28]
 80031c8:	e004      	b.n	80031d4 <_svfiprintf_r+0x100>
 80031ca:	4252      	negs	r2, r2
 80031cc:	f043 0302 	orr.w	r3, r3, #2
 80031d0:	9207      	str	r2, [sp, #28]
 80031d2:	9304      	str	r3, [sp, #16]
 80031d4:	783b      	ldrb	r3, [r7, #0]
 80031d6:	2b2e      	cmp	r3, #46	; 0x2e
 80031d8:	d10e      	bne.n	80031f8 <_svfiprintf_r+0x124>
 80031da:	787b      	ldrb	r3, [r7, #1]
 80031dc:	2b2a      	cmp	r3, #42	; 0x2a
 80031de:	f107 0101 	add.w	r1, r7, #1
 80031e2:	d132      	bne.n	800324a <_svfiprintf_r+0x176>
 80031e4:	9b03      	ldr	r3, [sp, #12]
 80031e6:	1d1a      	adds	r2, r3, #4
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	9203      	str	r2, [sp, #12]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	bfb8      	it	lt
 80031f0:	f04f 33ff 	movlt.w	r3, #4294967295
 80031f4:	3702      	adds	r7, #2
 80031f6:	9305      	str	r3, [sp, #20]
 80031f8:	4c2c      	ldr	r4, [pc, #176]	; (80032ac <_svfiprintf_r+0x1d8>)
 80031fa:	7839      	ldrb	r1, [r7, #0]
 80031fc:	2203      	movs	r2, #3
 80031fe:	4620      	mov	r0, r4
 8003200:	f7fd f826 	bl	8000250 <memchr>
 8003204:	b138      	cbz	r0, 8003216 <_svfiprintf_r+0x142>
 8003206:	2340      	movs	r3, #64	; 0x40
 8003208:	1b00      	subs	r0, r0, r4
 800320a:	fa03 f000 	lsl.w	r0, r3, r0
 800320e:	9b04      	ldr	r3, [sp, #16]
 8003210:	4303      	orrs	r3, r0
 8003212:	9304      	str	r3, [sp, #16]
 8003214:	3701      	adds	r7, #1
 8003216:	7839      	ldrb	r1, [r7, #0]
 8003218:	4825      	ldr	r0, [pc, #148]	; (80032b0 <_svfiprintf_r+0x1dc>)
 800321a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800321e:	2206      	movs	r2, #6
 8003220:	1c7e      	adds	r6, r7, #1
 8003222:	f7fd f815 	bl	8000250 <memchr>
 8003226:	2800      	cmp	r0, #0
 8003228:	d035      	beq.n	8003296 <_svfiprintf_r+0x1c2>
 800322a:	4b22      	ldr	r3, [pc, #136]	; (80032b4 <_svfiprintf_r+0x1e0>)
 800322c:	b9fb      	cbnz	r3, 800326e <_svfiprintf_r+0x19a>
 800322e:	9b03      	ldr	r3, [sp, #12]
 8003230:	3307      	adds	r3, #7
 8003232:	f023 0307 	bic.w	r3, r3, #7
 8003236:	3308      	adds	r3, #8
 8003238:	9303      	str	r3, [sp, #12]
 800323a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800323c:	444b      	add	r3, r9
 800323e:	9309      	str	r3, [sp, #36]	; 0x24
 8003240:	e76c      	b.n	800311c <_svfiprintf_r+0x48>
 8003242:	fb00 3202 	mla	r2, r0, r2, r3
 8003246:	2101      	movs	r1, #1
 8003248:	e7a3      	b.n	8003192 <_svfiprintf_r+0xbe>
 800324a:	2300      	movs	r3, #0
 800324c:	9305      	str	r3, [sp, #20]
 800324e:	4618      	mov	r0, r3
 8003250:	240a      	movs	r4, #10
 8003252:	460f      	mov	r7, r1
 8003254:	3101      	adds	r1, #1
 8003256:	783a      	ldrb	r2, [r7, #0]
 8003258:	3a30      	subs	r2, #48	; 0x30
 800325a:	2a09      	cmp	r2, #9
 800325c:	d903      	bls.n	8003266 <_svfiprintf_r+0x192>
 800325e:	2b00      	cmp	r3, #0
 8003260:	d0ca      	beq.n	80031f8 <_svfiprintf_r+0x124>
 8003262:	9005      	str	r0, [sp, #20]
 8003264:	e7c8      	b.n	80031f8 <_svfiprintf_r+0x124>
 8003266:	fb04 2000 	mla	r0, r4, r0, r2
 800326a:	2301      	movs	r3, #1
 800326c:	e7f1      	b.n	8003252 <_svfiprintf_r+0x17e>
 800326e:	ab03      	add	r3, sp, #12
 8003270:	9300      	str	r3, [sp, #0]
 8003272:	462a      	mov	r2, r5
 8003274:	4b10      	ldr	r3, [pc, #64]	; (80032b8 <_svfiprintf_r+0x1e4>)
 8003276:	a904      	add	r1, sp, #16
 8003278:	4640      	mov	r0, r8
 800327a:	f3af 8000 	nop.w
 800327e:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003282:	4681      	mov	r9, r0
 8003284:	d1d9      	bne.n	800323a <_svfiprintf_r+0x166>
 8003286:	89ab      	ldrh	r3, [r5, #12]
 8003288:	065b      	lsls	r3, r3, #25
 800328a:	f53f af38 	bmi.w	80030fe <_svfiprintf_r+0x2a>
 800328e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003290:	b01d      	add	sp, #116	; 0x74
 8003292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003296:	ab03      	add	r3, sp, #12
 8003298:	9300      	str	r3, [sp, #0]
 800329a:	462a      	mov	r2, r5
 800329c:	4b06      	ldr	r3, [pc, #24]	; (80032b8 <_svfiprintf_r+0x1e4>)
 800329e:	a904      	add	r1, sp, #16
 80032a0:	4640      	mov	r0, r8
 80032a2:	f000 f881 	bl	80033a8 <_printf_i>
 80032a6:	e7ea      	b.n	800327e <_svfiprintf_r+0x1aa>
 80032a8:	080038f2 	.word	0x080038f2
 80032ac:	080038f8 	.word	0x080038f8
 80032b0:	080038fc 	.word	0x080038fc
 80032b4:	00000000 	.word	0x00000000
 80032b8:	0800301d 	.word	0x0800301d

080032bc <_printf_common>:
 80032bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80032c0:	4691      	mov	r9, r2
 80032c2:	461f      	mov	r7, r3
 80032c4:	688a      	ldr	r2, [r1, #8]
 80032c6:	690b      	ldr	r3, [r1, #16]
 80032c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80032cc:	4293      	cmp	r3, r2
 80032ce:	bfb8      	it	lt
 80032d0:	4613      	movlt	r3, r2
 80032d2:	f8c9 3000 	str.w	r3, [r9]
 80032d6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80032da:	4606      	mov	r6, r0
 80032dc:	460c      	mov	r4, r1
 80032de:	b112      	cbz	r2, 80032e6 <_printf_common+0x2a>
 80032e0:	3301      	adds	r3, #1
 80032e2:	f8c9 3000 	str.w	r3, [r9]
 80032e6:	6823      	ldr	r3, [r4, #0]
 80032e8:	0699      	lsls	r1, r3, #26
 80032ea:	bf42      	ittt	mi
 80032ec:	f8d9 3000 	ldrmi.w	r3, [r9]
 80032f0:	3302      	addmi	r3, #2
 80032f2:	f8c9 3000 	strmi.w	r3, [r9]
 80032f6:	6825      	ldr	r5, [r4, #0]
 80032f8:	f015 0506 	ands.w	r5, r5, #6
 80032fc:	d107      	bne.n	800330e <_printf_common+0x52>
 80032fe:	f104 0a19 	add.w	sl, r4, #25
 8003302:	68e3      	ldr	r3, [r4, #12]
 8003304:	f8d9 2000 	ldr.w	r2, [r9]
 8003308:	1a9b      	subs	r3, r3, r2
 800330a:	429d      	cmp	r5, r3
 800330c:	db29      	blt.n	8003362 <_printf_common+0xa6>
 800330e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003312:	6822      	ldr	r2, [r4, #0]
 8003314:	3300      	adds	r3, #0
 8003316:	bf18      	it	ne
 8003318:	2301      	movne	r3, #1
 800331a:	0692      	lsls	r2, r2, #26
 800331c:	d42e      	bmi.n	800337c <_printf_common+0xc0>
 800331e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003322:	4639      	mov	r1, r7
 8003324:	4630      	mov	r0, r6
 8003326:	47c0      	blx	r8
 8003328:	3001      	adds	r0, #1
 800332a:	d021      	beq.n	8003370 <_printf_common+0xb4>
 800332c:	6823      	ldr	r3, [r4, #0]
 800332e:	68e5      	ldr	r5, [r4, #12]
 8003330:	f8d9 2000 	ldr.w	r2, [r9]
 8003334:	f003 0306 	and.w	r3, r3, #6
 8003338:	2b04      	cmp	r3, #4
 800333a:	bf08      	it	eq
 800333c:	1aad      	subeq	r5, r5, r2
 800333e:	68a3      	ldr	r3, [r4, #8]
 8003340:	6922      	ldr	r2, [r4, #16]
 8003342:	bf0c      	ite	eq
 8003344:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003348:	2500      	movne	r5, #0
 800334a:	4293      	cmp	r3, r2
 800334c:	bfc4      	itt	gt
 800334e:	1a9b      	subgt	r3, r3, r2
 8003350:	18ed      	addgt	r5, r5, r3
 8003352:	f04f 0900 	mov.w	r9, #0
 8003356:	341a      	adds	r4, #26
 8003358:	454d      	cmp	r5, r9
 800335a:	d11b      	bne.n	8003394 <_printf_common+0xd8>
 800335c:	2000      	movs	r0, #0
 800335e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003362:	2301      	movs	r3, #1
 8003364:	4652      	mov	r2, sl
 8003366:	4639      	mov	r1, r7
 8003368:	4630      	mov	r0, r6
 800336a:	47c0      	blx	r8
 800336c:	3001      	adds	r0, #1
 800336e:	d103      	bne.n	8003378 <_printf_common+0xbc>
 8003370:	f04f 30ff 	mov.w	r0, #4294967295
 8003374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003378:	3501      	adds	r5, #1
 800337a:	e7c2      	b.n	8003302 <_printf_common+0x46>
 800337c:	18e1      	adds	r1, r4, r3
 800337e:	1c5a      	adds	r2, r3, #1
 8003380:	2030      	movs	r0, #48	; 0x30
 8003382:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003386:	4422      	add	r2, r4
 8003388:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800338c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003390:	3302      	adds	r3, #2
 8003392:	e7c4      	b.n	800331e <_printf_common+0x62>
 8003394:	2301      	movs	r3, #1
 8003396:	4622      	mov	r2, r4
 8003398:	4639      	mov	r1, r7
 800339a:	4630      	mov	r0, r6
 800339c:	47c0      	blx	r8
 800339e:	3001      	adds	r0, #1
 80033a0:	d0e6      	beq.n	8003370 <_printf_common+0xb4>
 80033a2:	f109 0901 	add.w	r9, r9, #1
 80033a6:	e7d7      	b.n	8003358 <_printf_common+0x9c>

080033a8 <_printf_i>:
 80033a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80033ac:	4617      	mov	r7, r2
 80033ae:	7e0a      	ldrb	r2, [r1, #24]
 80033b0:	b085      	sub	sp, #20
 80033b2:	2a6e      	cmp	r2, #110	; 0x6e
 80033b4:	4698      	mov	r8, r3
 80033b6:	4606      	mov	r6, r0
 80033b8:	460c      	mov	r4, r1
 80033ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80033bc:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80033c0:	f000 80bc 	beq.w	800353c <_printf_i+0x194>
 80033c4:	d81a      	bhi.n	80033fc <_printf_i+0x54>
 80033c6:	2a63      	cmp	r2, #99	; 0x63
 80033c8:	d02e      	beq.n	8003428 <_printf_i+0x80>
 80033ca:	d80a      	bhi.n	80033e2 <_printf_i+0x3a>
 80033cc:	2a00      	cmp	r2, #0
 80033ce:	f000 80c8 	beq.w	8003562 <_printf_i+0x1ba>
 80033d2:	2a58      	cmp	r2, #88	; 0x58
 80033d4:	f000 808a 	beq.w	80034ec <_printf_i+0x144>
 80033d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80033dc:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80033e0:	e02a      	b.n	8003438 <_printf_i+0x90>
 80033e2:	2a64      	cmp	r2, #100	; 0x64
 80033e4:	d001      	beq.n	80033ea <_printf_i+0x42>
 80033e6:	2a69      	cmp	r2, #105	; 0x69
 80033e8:	d1f6      	bne.n	80033d8 <_printf_i+0x30>
 80033ea:	6821      	ldr	r1, [r4, #0]
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	f011 0f80 	tst.w	r1, #128	; 0x80
 80033f2:	d023      	beq.n	800343c <_printf_i+0x94>
 80033f4:	1d11      	adds	r1, r2, #4
 80033f6:	6019      	str	r1, [r3, #0]
 80033f8:	6813      	ldr	r3, [r2, #0]
 80033fa:	e027      	b.n	800344c <_printf_i+0xa4>
 80033fc:	2a73      	cmp	r2, #115	; 0x73
 80033fe:	f000 80b4 	beq.w	800356a <_printf_i+0x1c2>
 8003402:	d808      	bhi.n	8003416 <_printf_i+0x6e>
 8003404:	2a6f      	cmp	r2, #111	; 0x6f
 8003406:	d02a      	beq.n	800345e <_printf_i+0xb6>
 8003408:	2a70      	cmp	r2, #112	; 0x70
 800340a:	d1e5      	bne.n	80033d8 <_printf_i+0x30>
 800340c:	680a      	ldr	r2, [r1, #0]
 800340e:	f042 0220 	orr.w	r2, r2, #32
 8003412:	600a      	str	r2, [r1, #0]
 8003414:	e003      	b.n	800341e <_printf_i+0x76>
 8003416:	2a75      	cmp	r2, #117	; 0x75
 8003418:	d021      	beq.n	800345e <_printf_i+0xb6>
 800341a:	2a78      	cmp	r2, #120	; 0x78
 800341c:	d1dc      	bne.n	80033d8 <_printf_i+0x30>
 800341e:	2278      	movs	r2, #120	; 0x78
 8003420:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8003424:	496e      	ldr	r1, [pc, #440]	; (80035e0 <_printf_i+0x238>)
 8003426:	e064      	b.n	80034f2 <_printf_i+0x14a>
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800342e:	1d11      	adds	r1, r2, #4
 8003430:	6019      	str	r1, [r3, #0]
 8003432:	6813      	ldr	r3, [r2, #0]
 8003434:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003438:	2301      	movs	r3, #1
 800343a:	e0a3      	b.n	8003584 <_printf_i+0x1dc>
 800343c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8003440:	f102 0104 	add.w	r1, r2, #4
 8003444:	6019      	str	r1, [r3, #0]
 8003446:	d0d7      	beq.n	80033f8 <_printf_i+0x50>
 8003448:	f9b2 3000 	ldrsh.w	r3, [r2]
 800344c:	2b00      	cmp	r3, #0
 800344e:	da03      	bge.n	8003458 <_printf_i+0xb0>
 8003450:	222d      	movs	r2, #45	; 0x2d
 8003452:	425b      	negs	r3, r3
 8003454:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003458:	4962      	ldr	r1, [pc, #392]	; (80035e4 <_printf_i+0x23c>)
 800345a:	220a      	movs	r2, #10
 800345c:	e017      	b.n	800348e <_printf_i+0xe6>
 800345e:	6820      	ldr	r0, [r4, #0]
 8003460:	6819      	ldr	r1, [r3, #0]
 8003462:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003466:	d003      	beq.n	8003470 <_printf_i+0xc8>
 8003468:	1d08      	adds	r0, r1, #4
 800346a:	6018      	str	r0, [r3, #0]
 800346c:	680b      	ldr	r3, [r1, #0]
 800346e:	e006      	b.n	800347e <_printf_i+0xd6>
 8003470:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003474:	f101 0004 	add.w	r0, r1, #4
 8003478:	6018      	str	r0, [r3, #0]
 800347a:	d0f7      	beq.n	800346c <_printf_i+0xc4>
 800347c:	880b      	ldrh	r3, [r1, #0]
 800347e:	4959      	ldr	r1, [pc, #356]	; (80035e4 <_printf_i+0x23c>)
 8003480:	2a6f      	cmp	r2, #111	; 0x6f
 8003482:	bf14      	ite	ne
 8003484:	220a      	movne	r2, #10
 8003486:	2208      	moveq	r2, #8
 8003488:	2000      	movs	r0, #0
 800348a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800348e:	6865      	ldr	r5, [r4, #4]
 8003490:	60a5      	str	r5, [r4, #8]
 8003492:	2d00      	cmp	r5, #0
 8003494:	f2c0 809c 	blt.w	80035d0 <_printf_i+0x228>
 8003498:	6820      	ldr	r0, [r4, #0]
 800349a:	f020 0004 	bic.w	r0, r0, #4
 800349e:	6020      	str	r0, [r4, #0]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d13f      	bne.n	8003524 <_printf_i+0x17c>
 80034a4:	2d00      	cmp	r5, #0
 80034a6:	f040 8095 	bne.w	80035d4 <_printf_i+0x22c>
 80034aa:	4675      	mov	r5, lr
 80034ac:	2a08      	cmp	r2, #8
 80034ae:	d10b      	bne.n	80034c8 <_printf_i+0x120>
 80034b0:	6823      	ldr	r3, [r4, #0]
 80034b2:	07da      	lsls	r2, r3, #31
 80034b4:	d508      	bpl.n	80034c8 <_printf_i+0x120>
 80034b6:	6923      	ldr	r3, [r4, #16]
 80034b8:	6862      	ldr	r2, [r4, #4]
 80034ba:	429a      	cmp	r2, r3
 80034bc:	bfde      	ittt	le
 80034be:	2330      	movle	r3, #48	; 0x30
 80034c0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80034c4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80034c8:	ebae 0305 	sub.w	r3, lr, r5
 80034cc:	6123      	str	r3, [r4, #16]
 80034ce:	f8cd 8000 	str.w	r8, [sp]
 80034d2:	463b      	mov	r3, r7
 80034d4:	aa03      	add	r2, sp, #12
 80034d6:	4621      	mov	r1, r4
 80034d8:	4630      	mov	r0, r6
 80034da:	f7ff feef 	bl	80032bc <_printf_common>
 80034de:	3001      	adds	r0, #1
 80034e0:	d155      	bne.n	800358e <_printf_i+0x1e6>
 80034e2:	f04f 30ff 	mov.w	r0, #4294967295
 80034e6:	b005      	add	sp, #20
 80034e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80034ec:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80034f0:	493c      	ldr	r1, [pc, #240]	; (80035e4 <_printf_i+0x23c>)
 80034f2:	6822      	ldr	r2, [r4, #0]
 80034f4:	6818      	ldr	r0, [r3, #0]
 80034f6:	f012 0f80 	tst.w	r2, #128	; 0x80
 80034fa:	f100 0504 	add.w	r5, r0, #4
 80034fe:	601d      	str	r5, [r3, #0]
 8003500:	d001      	beq.n	8003506 <_printf_i+0x15e>
 8003502:	6803      	ldr	r3, [r0, #0]
 8003504:	e002      	b.n	800350c <_printf_i+0x164>
 8003506:	0655      	lsls	r5, r2, #25
 8003508:	d5fb      	bpl.n	8003502 <_printf_i+0x15a>
 800350a:	8803      	ldrh	r3, [r0, #0]
 800350c:	07d0      	lsls	r0, r2, #31
 800350e:	bf44      	itt	mi
 8003510:	f042 0220 	orrmi.w	r2, r2, #32
 8003514:	6022      	strmi	r2, [r4, #0]
 8003516:	b91b      	cbnz	r3, 8003520 <_printf_i+0x178>
 8003518:	6822      	ldr	r2, [r4, #0]
 800351a:	f022 0220 	bic.w	r2, r2, #32
 800351e:	6022      	str	r2, [r4, #0]
 8003520:	2210      	movs	r2, #16
 8003522:	e7b1      	b.n	8003488 <_printf_i+0xe0>
 8003524:	4675      	mov	r5, lr
 8003526:	fbb3 f0f2 	udiv	r0, r3, r2
 800352a:	fb02 3310 	mls	r3, r2, r0, r3
 800352e:	5ccb      	ldrb	r3, [r1, r3]
 8003530:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003534:	4603      	mov	r3, r0
 8003536:	2800      	cmp	r0, #0
 8003538:	d1f5      	bne.n	8003526 <_printf_i+0x17e>
 800353a:	e7b7      	b.n	80034ac <_printf_i+0x104>
 800353c:	6808      	ldr	r0, [r1, #0]
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	6949      	ldr	r1, [r1, #20]
 8003542:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003546:	d004      	beq.n	8003552 <_printf_i+0x1aa>
 8003548:	1d10      	adds	r0, r2, #4
 800354a:	6018      	str	r0, [r3, #0]
 800354c:	6813      	ldr	r3, [r2, #0]
 800354e:	6019      	str	r1, [r3, #0]
 8003550:	e007      	b.n	8003562 <_printf_i+0x1ba>
 8003552:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003556:	f102 0004 	add.w	r0, r2, #4
 800355a:	6018      	str	r0, [r3, #0]
 800355c:	6813      	ldr	r3, [r2, #0]
 800355e:	d0f6      	beq.n	800354e <_printf_i+0x1a6>
 8003560:	8019      	strh	r1, [r3, #0]
 8003562:	2300      	movs	r3, #0
 8003564:	6123      	str	r3, [r4, #16]
 8003566:	4675      	mov	r5, lr
 8003568:	e7b1      	b.n	80034ce <_printf_i+0x126>
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	1d11      	adds	r1, r2, #4
 800356e:	6019      	str	r1, [r3, #0]
 8003570:	6815      	ldr	r5, [r2, #0]
 8003572:	6862      	ldr	r2, [r4, #4]
 8003574:	2100      	movs	r1, #0
 8003576:	4628      	mov	r0, r5
 8003578:	f7fc fe6a 	bl	8000250 <memchr>
 800357c:	b108      	cbz	r0, 8003582 <_printf_i+0x1da>
 800357e:	1b40      	subs	r0, r0, r5
 8003580:	6060      	str	r0, [r4, #4]
 8003582:	6863      	ldr	r3, [r4, #4]
 8003584:	6123      	str	r3, [r4, #16]
 8003586:	2300      	movs	r3, #0
 8003588:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800358c:	e79f      	b.n	80034ce <_printf_i+0x126>
 800358e:	6923      	ldr	r3, [r4, #16]
 8003590:	462a      	mov	r2, r5
 8003592:	4639      	mov	r1, r7
 8003594:	4630      	mov	r0, r6
 8003596:	47c0      	blx	r8
 8003598:	3001      	adds	r0, #1
 800359a:	d0a2      	beq.n	80034e2 <_printf_i+0x13a>
 800359c:	6823      	ldr	r3, [r4, #0]
 800359e:	079b      	lsls	r3, r3, #30
 80035a0:	d507      	bpl.n	80035b2 <_printf_i+0x20a>
 80035a2:	2500      	movs	r5, #0
 80035a4:	f104 0919 	add.w	r9, r4, #25
 80035a8:	68e3      	ldr	r3, [r4, #12]
 80035aa:	9a03      	ldr	r2, [sp, #12]
 80035ac:	1a9b      	subs	r3, r3, r2
 80035ae:	429d      	cmp	r5, r3
 80035b0:	db05      	blt.n	80035be <_printf_i+0x216>
 80035b2:	68e0      	ldr	r0, [r4, #12]
 80035b4:	9b03      	ldr	r3, [sp, #12]
 80035b6:	4298      	cmp	r0, r3
 80035b8:	bfb8      	it	lt
 80035ba:	4618      	movlt	r0, r3
 80035bc:	e793      	b.n	80034e6 <_printf_i+0x13e>
 80035be:	2301      	movs	r3, #1
 80035c0:	464a      	mov	r2, r9
 80035c2:	4639      	mov	r1, r7
 80035c4:	4630      	mov	r0, r6
 80035c6:	47c0      	blx	r8
 80035c8:	3001      	adds	r0, #1
 80035ca:	d08a      	beq.n	80034e2 <_printf_i+0x13a>
 80035cc:	3501      	adds	r5, #1
 80035ce:	e7eb      	b.n	80035a8 <_printf_i+0x200>
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d1a7      	bne.n	8003524 <_printf_i+0x17c>
 80035d4:	780b      	ldrb	r3, [r1, #0]
 80035d6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80035da:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80035de:	e765      	b.n	80034ac <_printf_i+0x104>
 80035e0:	08003914 	.word	0x08003914
 80035e4:	08003903 	.word	0x08003903

080035e8 <memcpy>:
 80035e8:	b510      	push	{r4, lr}
 80035ea:	1e43      	subs	r3, r0, #1
 80035ec:	440a      	add	r2, r1
 80035ee:	4291      	cmp	r1, r2
 80035f0:	d100      	bne.n	80035f4 <memcpy+0xc>
 80035f2:	bd10      	pop	{r4, pc}
 80035f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80035f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80035fc:	e7f7      	b.n	80035ee <memcpy+0x6>

080035fe <memmove>:
 80035fe:	4288      	cmp	r0, r1
 8003600:	b510      	push	{r4, lr}
 8003602:	eb01 0302 	add.w	r3, r1, r2
 8003606:	d803      	bhi.n	8003610 <memmove+0x12>
 8003608:	1e42      	subs	r2, r0, #1
 800360a:	4299      	cmp	r1, r3
 800360c:	d10c      	bne.n	8003628 <memmove+0x2a>
 800360e:	bd10      	pop	{r4, pc}
 8003610:	4298      	cmp	r0, r3
 8003612:	d2f9      	bcs.n	8003608 <memmove+0xa>
 8003614:	1881      	adds	r1, r0, r2
 8003616:	1ad2      	subs	r2, r2, r3
 8003618:	42d3      	cmn	r3, r2
 800361a:	d100      	bne.n	800361e <memmove+0x20>
 800361c:	bd10      	pop	{r4, pc}
 800361e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003622:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003626:	e7f7      	b.n	8003618 <memmove+0x1a>
 8003628:	f811 4b01 	ldrb.w	r4, [r1], #1
 800362c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003630:	e7eb      	b.n	800360a <memmove+0xc>
	...

08003634 <_free_r>:
 8003634:	b538      	push	{r3, r4, r5, lr}
 8003636:	4605      	mov	r5, r0
 8003638:	2900      	cmp	r1, #0
 800363a:	d045      	beq.n	80036c8 <_free_r+0x94>
 800363c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003640:	1f0c      	subs	r4, r1, #4
 8003642:	2b00      	cmp	r3, #0
 8003644:	bfb8      	it	lt
 8003646:	18e4      	addlt	r4, r4, r3
 8003648:	f000 f8d6 	bl	80037f8 <__malloc_lock>
 800364c:	4a1f      	ldr	r2, [pc, #124]	; (80036cc <_free_r+0x98>)
 800364e:	6813      	ldr	r3, [r2, #0]
 8003650:	4610      	mov	r0, r2
 8003652:	b933      	cbnz	r3, 8003662 <_free_r+0x2e>
 8003654:	6063      	str	r3, [r4, #4]
 8003656:	6014      	str	r4, [r2, #0]
 8003658:	4628      	mov	r0, r5
 800365a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800365e:	f000 b8cc 	b.w	80037fa <__malloc_unlock>
 8003662:	42a3      	cmp	r3, r4
 8003664:	d90c      	bls.n	8003680 <_free_r+0x4c>
 8003666:	6821      	ldr	r1, [r4, #0]
 8003668:	1862      	adds	r2, r4, r1
 800366a:	4293      	cmp	r3, r2
 800366c:	bf04      	itt	eq
 800366e:	681a      	ldreq	r2, [r3, #0]
 8003670:	685b      	ldreq	r3, [r3, #4]
 8003672:	6063      	str	r3, [r4, #4]
 8003674:	bf04      	itt	eq
 8003676:	1852      	addeq	r2, r2, r1
 8003678:	6022      	streq	r2, [r4, #0]
 800367a:	6004      	str	r4, [r0, #0]
 800367c:	e7ec      	b.n	8003658 <_free_r+0x24>
 800367e:	4613      	mov	r3, r2
 8003680:	685a      	ldr	r2, [r3, #4]
 8003682:	b10a      	cbz	r2, 8003688 <_free_r+0x54>
 8003684:	42a2      	cmp	r2, r4
 8003686:	d9fa      	bls.n	800367e <_free_r+0x4a>
 8003688:	6819      	ldr	r1, [r3, #0]
 800368a:	1858      	adds	r0, r3, r1
 800368c:	42a0      	cmp	r0, r4
 800368e:	d10b      	bne.n	80036a8 <_free_r+0x74>
 8003690:	6820      	ldr	r0, [r4, #0]
 8003692:	4401      	add	r1, r0
 8003694:	1858      	adds	r0, r3, r1
 8003696:	4282      	cmp	r2, r0
 8003698:	6019      	str	r1, [r3, #0]
 800369a:	d1dd      	bne.n	8003658 <_free_r+0x24>
 800369c:	6810      	ldr	r0, [r2, #0]
 800369e:	6852      	ldr	r2, [r2, #4]
 80036a0:	605a      	str	r2, [r3, #4]
 80036a2:	4401      	add	r1, r0
 80036a4:	6019      	str	r1, [r3, #0]
 80036a6:	e7d7      	b.n	8003658 <_free_r+0x24>
 80036a8:	d902      	bls.n	80036b0 <_free_r+0x7c>
 80036aa:	230c      	movs	r3, #12
 80036ac:	602b      	str	r3, [r5, #0]
 80036ae:	e7d3      	b.n	8003658 <_free_r+0x24>
 80036b0:	6820      	ldr	r0, [r4, #0]
 80036b2:	1821      	adds	r1, r4, r0
 80036b4:	428a      	cmp	r2, r1
 80036b6:	bf04      	itt	eq
 80036b8:	6811      	ldreq	r1, [r2, #0]
 80036ba:	6852      	ldreq	r2, [r2, #4]
 80036bc:	6062      	str	r2, [r4, #4]
 80036be:	bf04      	itt	eq
 80036c0:	1809      	addeq	r1, r1, r0
 80036c2:	6021      	streq	r1, [r4, #0]
 80036c4:	605c      	str	r4, [r3, #4]
 80036c6:	e7c7      	b.n	8003658 <_free_r+0x24>
 80036c8:	bd38      	pop	{r3, r4, r5, pc}
 80036ca:	bf00      	nop
 80036cc:	2002009c 	.word	0x2002009c

080036d0 <_malloc_r>:
 80036d0:	b570      	push	{r4, r5, r6, lr}
 80036d2:	1ccd      	adds	r5, r1, #3
 80036d4:	f025 0503 	bic.w	r5, r5, #3
 80036d8:	3508      	adds	r5, #8
 80036da:	2d0c      	cmp	r5, #12
 80036dc:	bf38      	it	cc
 80036de:	250c      	movcc	r5, #12
 80036e0:	2d00      	cmp	r5, #0
 80036e2:	4606      	mov	r6, r0
 80036e4:	db01      	blt.n	80036ea <_malloc_r+0x1a>
 80036e6:	42a9      	cmp	r1, r5
 80036e8:	d903      	bls.n	80036f2 <_malloc_r+0x22>
 80036ea:	230c      	movs	r3, #12
 80036ec:	6033      	str	r3, [r6, #0]
 80036ee:	2000      	movs	r0, #0
 80036f0:	bd70      	pop	{r4, r5, r6, pc}
 80036f2:	f000 f881 	bl	80037f8 <__malloc_lock>
 80036f6:	4a23      	ldr	r2, [pc, #140]	; (8003784 <_malloc_r+0xb4>)
 80036f8:	6814      	ldr	r4, [r2, #0]
 80036fa:	4621      	mov	r1, r4
 80036fc:	b991      	cbnz	r1, 8003724 <_malloc_r+0x54>
 80036fe:	4c22      	ldr	r4, [pc, #136]	; (8003788 <_malloc_r+0xb8>)
 8003700:	6823      	ldr	r3, [r4, #0]
 8003702:	b91b      	cbnz	r3, 800370c <_malloc_r+0x3c>
 8003704:	4630      	mov	r0, r6
 8003706:	f000 f867 	bl	80037d8 <_sbrk_r>
 800370a:	6020      	str	r0, [r4, #0]
 800370c:	4629      	mov	r1, r5
 800370e:	4630      	mov	r0, r6
 8003710:	f000 f862 	bl	80037d8 <_sbrk_r>
 8003714:	1c43      	adds	r3, r0, #1
 8003716:	d126      	bne.n	8003766 <_malloc_r+0x96>
 8003718:	230c      	movs	r3, #12
 800371a:	6033      	str	r3, [r6, #0]
 800371c:	4630      	mov	r0, r6
 800371e:	f000 f86c 	bl	80037fa <__malloc_unlock>
 8003722:	e7e4      	b.n	80036ee <_malloc_r+0x1e>
 8003724:	680b      	ldr	r3, [r1, #0]
 8003726:	1b5b      	subs	r3, r3, r5
 8003728:	d41a      	bmi.n	8003760 <_malloc_r+0x90>
 800372a:	2b0b      	cmp	r3, #11
 800372c:	d90f      	bls.n	800374e <_malloc_r+0x7e>
 800372e:	600b      	str	r3, [r1, #0]
 8003730:	50cd      	str	r5, [r1, r3]
 8003732:	18cc      	adds	r4, r1, r3
 8003734:	4630      	mov	r0, r6
 8003736:	f000 f860 	bl	80037fa <__malloc_unlock>
 800373a:	f104 000b 	add.w	r0, r4, #11
 800373e:	1d23      	adds	r3, r4, #4
 8003740:	f020 0007 	bic.w	r0, r0, #7
 8003744:	1ac3      	subs	r3, r0, r3
 8003746:	d01b      	beq.n	8003780 <_malloc_r+0xb0>
 8003748:	425a      	negs	r2, r3
 800374a:	50e2      	str	r2, [r4, r3]
 800374c:	bd70      	pop	{r4, r5, r6, pc}
 800374e:	428c      	cmp	r4, r1
 8003750:	bf0d      	iteet	eq
 8003752:	6863      	ldreq	r3, [r4, #4]
 8003754:	684b      	ldrne	r3, [r1, #4]
 8003756:	6063      	strne	r3, [r4, #4]
 8003758:	6013      	streq	r3, [r2, #0]
 800375a:	bf18      	it	ne
 800375c:	460c      	movne	r4, r1
 800375e:	e7e9      	b.n	8003734 <_malloc_r+0x64>
 8003760:	460c      	mov	r4, r1
 8003762:	6849      	ldr	r1, [r1, #4]
 8003764:	e7ca      	b.n	80036fc <_malloc_r+0x2c>
 8003766:	1cc4      	adds	r4, r0, #3
 8003768:	f024 0403 	bic.w	r4, r4, #3
 800376c:	42a0      	cmp	r0, r4
 800376e:	d005      	beq.n	800377c <_malloc_r+0xac>
 8003770:	1a21      	subs	r1, r4, r0
 8003772:	4630      	mov	r0, r6
 8003774:	f000 f830 	bl	80037d8 <_sbrk_r>
 8003778:	3001      	adds	r0, #1
 800377a:	d0cd      	beq.n	8003718 <_malloc_r+0x48>
 800377c:	6025      	str	r5, [r4, #0]
 800377e:	e7d9      	b.n	8003734 <_malloc_r+0x64>
 8003780:	bd70      	pop	{r4, r5, r6, pc}
 8003782:	bf00      	nop
 8003784:	2002009c 	.word	0x2002009c
 8003788:	200200a0 	.word	0x200200a0

0800378c <_realloc_r>:
 800378c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800378e:	4607      	mov	r7, r0
 8003790:	4614      	mov	r4, r2
 8003792:	460e      	mov	r6, r1
 8003794:	b921      	cbnz	r1, 80037a0 <_realloc_r+0x14>
 8003796:	4611      	mov	r1, r2
 8003798:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800379c:	f7ff bf98 	b.w	80036d0 <_malloc_r>
 80037a0:	b922      	cbnz	r2, 80037ac <_realloc_r+0x20>
 80037a2:	f7ff ff47 	bl	8003634 <_free_r>
 80037a6:	4625      	mov	r5, r4
 80037a8:	4628      	mov	r0, r5
 80037aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037ac:	f000 f826 	bl	80037fc <_malloc_usable_size_r>
 80037b0:	4284      	cmp	r4, r0
 80037b2:	d90f      	bls.n	80037d4 <_realloc_r+0x48>
 80037b4:	4621      	mov	r1, r4
 80037b6:	4638      	mov	r0, r7
 80037b8:	f7ff ff8a 	bl	80036d0 <_malloc_r>
 80037bc:	4605      	mov	r5, r0
 80037be:	2800      	cmp	r0, #0
 80037c0:	d0f2      	beq.n	80037a8 <_realloc_r+0x1c>
 80037c2:	4631      	mov	r1, r6
 80037c4:	4622      	mov	r2, r4
 80037c6:	f7ff ff0f 	bl	80035e8 <memcpy>
 80037ca:	4631      	mov	r1, r6
 80037cc:	4638      	mov	r0, r7
 80037ce:	f7ff ff31 	bl	8003634 <_free_r>
 80037d2:	e7e9      	b.n	80037a8 <_realloc_r+0x1c>
 80037d4:	4635      	mov	r5, r6
 80037d6:	e7e7      	b.n	80037a8 <_realloc_r+0x1c>

080037d8 <_sbrk_r>:
 80037d8:	b538      	push	{r3, r4, r5, lr}
 80037da:	4c06      	ldr	r4, [pc, #24]	; (80037f4 <_sbrk_r+0x1c>)
 80037dc:	2300      	movs	r3, #0
 80037de:	4605      	mov	r5, r0
 80037e0:	4608      	mov	r0, r1
 80037e2:	6023      	str	r3, [r4, #0]
 80037e4:	f7ff fb6a 	bl	8002ebc <_sbrk>
 80037e8:	1c43      	adds	r3, r0, #1
 80037ea:	d102      	bne.n	80037f2 <_sbrk_r+0x1a>
 80037ec:	6823      	ldr	r3, [r4, #0]
 80037ee:	b103      	cbz	r3, 80037f2 <_sbrk_r+0x1a>
 80037f0:	602b      	str	r3, [r5, #0]
 80037f2:	bd38      	pop	{r3, r4, r5, pc}
 80037f4:	200205c0 	.word	0x200205c0

080037f8 <__malloc_lock>:
 80037f8:	4770      	bx	lr

080037fa <__malloc_unlock>:
 80037fa:	4770      	bx	lr

080037fc <_malloc_usable_size_r>:
 80037fc:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8003800:	2800      	cmp	r0, #0
 8003802:	f1a0 0004 	sub.w	r0, r0, #4
 8003806:	bfbc      	itt	lt
 8003808:	580b      	ldrlt	r3, [r1, r0]
 800380a:	18c0      	addlt	r0, r0, r3
 800380c:	4770      	bx	lr
	...

08003810 <_init>:
 8003810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003812:	bf00      	nop
 8003814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003816:	bc08      	pop	{r3}
 8003818:	469e      	mov	lr, r3
 800381a:	4770      	bx	lr

0800381c <_fini>:
 800381c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800381e:	bf00      	nop
 8003820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003822:	bc08      	pop	{r3}
 8003824:	469e      	mov	lr, r3
 8003826:	4770      	bx	lr
