
AWS_MBEDTLS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000174a4  08010000  08010000  00030000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000446c  080274a4  080274a4  000474a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08000200  08000200  00010200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08000204  08000204  00010204  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000084  20000000  08000208  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00022a54  20000084  0800028c  00020084  2**2
                  ALLOC
  8 ._user_heap_stack 00005000  20022ad8  0800028c  00022ad8  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0004b910  2**0
                  CONTENTS, READONLY
 10 .debug_info   0004d951  00000000  00000000  0004b940  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00008715  00000000  00000000  00099291  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000029d0  00000000  00000000  000a19a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000027d8  00000000  00000000  000a4378  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00019cc4  00000000  00000000  000a6b50  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000f127  00000000  00000000  000c0814  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000cf93b  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000b58c  00000000  00000000  000cf9b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08010000 <__do_global_dtors_aux>:
 8010000:	b510      	push	{r4, lr}
 8010002:	4c05      	ldr	r4, [pc, #20]	; (8010018 <__do_global_dtors_aux+0x18>)
 8010004:	7823      	ldrb	r3, [r4, #0]
 8010006:	b933      	cbnz	r3, 8010016 <__do_global_dtors_aux+0x16>
 8010008:	4b04      	ldr	r3, [pc, #16]	; (801001c <__do_global_dtors_aux+0x1c>)
 801000a:	b113      	cbz	r3, 8010012 <__do_global_dtors_aux+0x12>
 801000c:	4804      	ldr	r0, [pc, #16]	; (8010020 <__do_global_dtors_aux+0x20>)
 801000e:	f3af 8000 	nop.w
 8010012:	2301      	movs	r3, #1
 8010014:	7023      	strb	r3, [r4, #0]
 8010016:	bd10      	pop	{r4, pc}
 8010018:	20000084 	.word	0x20000084
 801001c:	00000000 	.word	0x00000000
 8010020:	0802748c 	.word	0x0802748c

08010024 <frame_dummy>:
 8010024:	b508      	push	{r3, lr}
 8010026:	4b03      	ldr	r3, [pc, #12]	; (8010034 <frame_dummy+0x10>)
 8010028:	b11b      	cbz	r3, 8010032 <frame_dummy+0xe>
 801002a:	4903      	ldr	r1, [pc, #12]	; (8010038 <frame_dummy+0x14>)
 801002c:	4803      	ldr	r0, [pc, #12]	; (801003c <frame_dummy+0x18>)
 801002e:	f3af 8000 	nop.w
 8010032:	bd08      	pop	{r3, pc}
 8010034:	00000000 	.word	0x00000000
 8010038:	20000088 	.word	0x20000088
 801003c:	0802748c 	.word	0x0802748c

08010040 <strcmp>:
 8010040:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010044:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010048:	2a01      	cmp	r2, #1
 801004a:	bf28      	it	cs
 801004c:	429a      	cmpcs	r2, r3
 801004e:	d0f7      	beq.n	8010040 <strcmp>
 8010050:	1ad0      	subs	r0, r2, r3
 8010052:	4770      	bx	lr

08010054 <strlen>:
 8010054:	4603      	mov	r3, r0
 8010056:	f813 2b01 	ldrb.w	r2, [r3], #1
 801005a:	2a00      	cmp	r2, #0
 801005c:	d1fb      	bne.n	8010056 <strlen+0x2>
 801005e:	1a18      	subs	r0, r3, r0
 8010060:	3801      	subs	r0, #1
 8010062:	4770      	bx	lr
	...

08010070 <memchr>:
 8010070:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8010074:	2a10      	cmp	r2, #16
 8010076:	db2b      	blt.n	80100d0 <memchr+0x60>
 8010078:	f010 0f07 	tst.w	r0, #7
 801007c:	d008      	beq.n	8010090 <memchr+0x20>
 801007e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010082:	3a01      	subs	r2, #1
 8010084:	428b      	cmp	r3, r1
 8010086:	d02d      	beq.n	80100e4 <memchr+0x74>
 8010088:	f010 0f07 	tst.w	r0, #7
 801008c:	b342      	cbz	r2, 80100e0 <memchr+0x70>
 801008e:	d1f6      	bne.n	801007e <memchr+0xe>
 8010090:	b4f0      	push	{r4, r5, r6, r7}
 8010092:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8010096:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 801009a:	f022 0407 	bic.w	r4, r2, #7
 801009e:	f07f 0700 	mvns.w	r7, #0
 80100a2:	2300      	movs	r3, #0
 80100a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80100a8:	3c08      	subs	r4, #8
 80100aa:	ea85 0501 	eor.w	r5, r5, r1
 80100ae:	ea86 0601 	eor.w	r6, r6, r1
 80100b2:	fa85 f547 	uadd8	r5, r5, r7
 80100b6:	faa3 f587 	sel	r5, r3, r7
 80100ba:	fa86 f647 	uadd8	r6, r6, r7
 80100be:	faa5 f687 	sel	r6, r5, r7
 80100c2:	b98e      	cbnz	r6, 80100e8 <memchr+0x78>
 80100c4:	d1ee      	bne.n	80100a4 <memchr+0x34>
 80100c6:	bcf0      	pop	{r4, r5, r6, r7}
 80100c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80100cc:	f002 0207 	and.w	r2, r2, #7
 80100d0:	b132      	cbz	r2, 80100e0 <memchr+0x70>
 80100d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80100d6:	3a01      	subs	r2, #1
 80100d8:	ea83 0301 	eor.w	r3, r3, r1
 80100dc:	b113      	cbz	r3, 80100e4 <memchr+0x74>
 80100de:	d1f8      	bne.n	80100d2 <memchr+0x62>
 80100e0:	2000      	movs	r0, #0
 80100e2:	4770      	bx	lr
 80100e4:	3801      	subs	r0, #1
 80100e6:	4770      	bx	lr
 80100e8:	2d00      	cmp	r5, #0
 80100ea:	bf06      	itte	eq
 80100ec:	4635      	moveq	r5, r6
 80100ee:	3803      	subeq	r0, #3
 80100f0:	3807      	subne	r0, #7
 80100f2:	f015 0f01 	tst.w	r5, #1
 80100f6:	d107      	bne.n	8010108 <memchr+0x98>
 80100f8:	3001      	adds	r0, #1
 80100fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80100fe:	bf02      	ittt	eq
 8010100:	3001      	addeq	r0, #1
 8010102:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8010106:	3001      	addeq	r0, #1
 8010108:	bcf0      	pop	{r4, r5, r6, r7}
 801010a:	3801      	subs	r0, #1
 801010c:	4770      	bx	lr
 801010e:	bf00      	nop

08010110 <__aeabi_uldivmod>:
 8010110:	b953      	cbnz	r3, 8010128 <__aeabi_uldivmod+0x18>
 8010112:	b94a      	cbnz	r2, 8010128 <__aeabi_uldivmod+0x18>
 8010114:	2900      	cmp	r1, #0
 8010116:	bf08      	it	eq
 8010118:	2800      	cmpeq	r0, #0
 801011a:	bf1c      	itt	ne
 801011c:	f04f 31ff 	movne.w	r1, #4294967295
 8010120:	f04f 30ff 	movne.w	r0, #4294967295
 8010124:	f000 b97a 	b.w	801041c <__aeabi_idiv0>
 8010128:	f1ad 0c08 	sub.w	ip, sp, #8
 801012c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8010130:	f000 f806 	bl	8010140 <__udivmoddi4>
 8010134:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010138:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801013c:	b004      	add	sp, #16
 801013e:	4770      	bx	lr

08010140 <__udivmoddi4>:
 8010140:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010144:	468c      	mov	ip, r1
 8010146:	460d      	mov	r5, r1
 8010148:	4604      	mov	r4, r0
 801014a:	9e08      	ldr	r6, [sp, #32]
 801014c:	2b00      	cmp	r3, #0
 801014e:	d151      	bne.n	80101f4 <__udivmoddi4+0xb4>
 8010150:	428a      	cmp	r2, r1
 8010152:	4617      	mov	r7, r2
 8010154:	d96d      	bls.n	8010232 <__udivmoddi4+0xf2>
 8010156:	fab2 fe82 	clz	lr, r2
 801015a:	f1be 0f00 	cmp.w	lr, #0
 801015e:	d00b      	beq.n	8010178 <__udivmoddi4+0x38>
 8010160:	f1ce 0c20 	rsb	ip, lr, #32
 8010164:	fa01 f50e 	lsl.w	r5, r1, lr
 8010168:	fa20 fc0c 	lsr.w	ip, r0, ip
 801016c:	fa02 f70e 	lsl.w	r7, r2, lr
 8010170:	ea4c 0c05 	orr.w	ip, ip, r5
 8010174:	fa00 f40e 	lsl.w	r4, r0, lr
 8010178:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 801017c:	0c25      	lsrs	r5, r4, #16
 801017e:	fbbc f8fa 	udiv	r8, ip, sl
 8010182:	fa1f f987 	uxth.w	r9, r7
 8010186:	fb0a cc18 	mls	ip, sl, r8, ip
 801018a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 801018e:	fb08 f309 	mul.w	r3, r8, r9
 8010192:	42ab      	cmp	r3, r5
 8010194:	d90a      	bls.n	80101ac <__udivmoddi4+0x6c>
 8010196:	19ed      	adds	r5, r5, r7
 8010198:	f108 32ff 	add.w	r2, r8, #4294967295
 801019c:	f080 8123 	bcs.w	80103e6 <__udivmoddi4+0x2a6>
 80101a0:	42ab      	cmp	r3, r5
 80101a2:	f240 8120 	bls.w	80103e6 <__udivmoddi4+0x2a6>
 80101a6:	f1a8 0802 	sub.w	r8, r8, #2
 80101aa:	443d      	add	r5, r7
 80101ac:	1aed      	subs	r5, r5, r3
 80101ae:	b2a4      	uxth	r4, r4
 80101b0:	fbb5 f0fa 	udiv	r0, r5, sl
 80101b4:	fb0a 5510 	mls	r5, sl, r0, r5
 80101b8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80101bc:	fb00 f909 	mul.w	r9, r0, r9
 80101c0:	45a1      	cmp	r9, r4
 80101c2:	d909      	bls.n	80101d8 <__udivmoddi4+0x98>
 80101c4:	19e4      	adds	r4, r4, r7
 80101c6:	f100 33ff 	add.w	r3, r0, #4294967295
 80101ca:	f080 810a 	bcs.w	80103e2 <__udivmoddi4+0x2a2>
 80101ce:	45a1      	cmp	r9, r4
 80101d0:	f240 8107 	bls.w	80103e2 <__udivmoddi4+0x2a2>
 80101d4:	3802      	subs	r0, #2
 80101d6:	443c      	add	r4, r7
 80101d8:	eba4 0409 	sub.w	r4, r4, r9
 80101dc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80101e0:	2100      	movs	r1, #0
 80101e2:	2e00      	cmp	r6, #0
 80101e4:	d061      	beq.n	80102aa <__udivmoddi4+0x16a>
 80101e6:	fa24 f40e 	lsr.w	r4, r4, lr
 80101ea:	2300      	movs	r3, #0
 80101ec:	6034      	str	r4, [r6, #0]
 80101ee:	6073      	str	r3, [r6, #4]
 80101f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80101f4:	428b      	cmp	r3, r1
 80101f6:	d907      	bls.n	8010208 <__udivmoddi4+0xc8>
 80101f8:	2e00      	cmp	r6, #0
 80101fa:	d054      	beq.n	80102a6 <__udivmoddi4+0x166>
 80101fc:	2100      	movs	r1, #0
 80101fe:	e886 0021 	stmia.w	r6, {r0, r5}
 8010202:	4608      	mov	r0, r1
 8010204:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010208:	fab3 f183 	clz	r1, r3
 801020c:	2900      	cmp	r1, #0
 801020e:	f040 808e 	bne.w	801032e <__udivmoddi4+0x1ee>
 8010212:	42ab      	cmp	r3, r5
 8010214:	d302      	bcc.n	801021c <__udivmoddi4+0xdc>
 8010216:	4282      	cmp	r2, r0
 8010218:	f200 80fa 	bhi.w	8010410 <__udivmoddi4+0x2d0>
 801021c:	1a84      	subs	r4, r0, r2
 801021e:	eb65 0503 	sbc.w	r5, r5, r3
 8010222:	2001      	movs	r0, #1
 8010224:	46ac      	mov	ip, r5
 8010226:	2e00      	cmp	r6, #0
 8010228:	d03f      	beq.n	80102aa <__udivmoddi4+0x16a>
 801022a:	e886 1010 	stmia.w	r6, {r4, ip}
 801022e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010232:	b912      	cbnz	r2, 801023a <__udivmoddi4+0xfa>
 8010234:	2701      	movs	r7, #1
 8010236:	fbb7 f7f2 	udiv	r7, r7, r2
 801023a:	fab7 fe87 	clz	lr, r7
 801023e:	f1be 0f00 	cmp.w	lr, #0
 8010242:	d134      	bne.n	80102ae <__udivmoddi4+0x16e>
 8010244:	1beb      	subs	r3, r5, r7
 8010246:	0c3a      	lsrs	r2, r7, #16
 8010248:	fa1f fc87 	uxth.w	ip, r7
 801024c:	2101      	movs	r1, #1
 801024e:	fbb3 f8f2 	udiv	r8, r3, r2
 8010252:	0c25      	lsrs	r5, r4, #16
 8010254:	fb02 3318 	mls	r3, r2, r8, r3
 8010258:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 801025c:	fb0c f308 	mul.w	r3, ip, r8
 8010260:	42ab      	cmp	r3, r5
 8010262:	d907      	bls.n	8010274 <__udivmoddi4+0x134>
 8010264:	19ed      	adds	r5, r5, r7
 8010266:	f108 30ff 	add.w	r0, r8, #4294967295
 801026a:	d202      	bcs.n	8010272 <__udivmoddi4+0x132>
 801026c:	42ab      	cmp	r3, r5
 801026e:	f200 80d1 	bhi.w	8010414 <__udivmoddi4+0x2d4>
 8010272:	4680      	mov	r8, r0
 8010274:	1aed      	subs	r5, r5, r3
 8010276:	b2a3      	uxth	r3, r4
 8010278:	fbb5 f0f2 	udiv	r0, r5, r2
 801027c:	fb02 5510 	mls	r5, r2, r0, r5
 8010280:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8010284:	fb0c fc00 	mul.w	ip, ip, r0
 8010288:	45a4      	cmp	ip, r4
 801028a:	d907      	bls.n	801029c <__udivmoddi4+0x15c>
 801028c:	19e4      	adds	r4, r4, r7
 801028e:	f100 33ff 	add.w	r3, r0, #4294967295
 8010292:	d202      	bcs.n	801029a <__udivmoddi4+0x15a>
 8010294:	45a4      	cmp	ip, r4
 8010296:	f200 80b8 	bhi.w	801040a <__udivmoddi4+0x2ca>
 801029a:	4618      	mov	r0, r3
 801029c:	eba4 040c 	sub.w	r4, r4, ip
 80102a0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80102a4:	e79d      	b.n	80101e2 <__udivmoddi4+0xa2>
 80102a6:	4631      	mov	r1, r6
 80102a8:	4630      	mov	r0, r6
 80102aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80102ae:	f1ce 0420 	rsb	r4, lr, #32
 80102b2:	fa05 f30e 	lsl.w	r3, r5, lr
 80102b6:	fa07 f70e 	lsl.w	r7, r7, lr
 80102ba:	fa20 f804 	lsr.w	r8, r0, r4
 80102be:	0c3a      	lsrs	r2, r7, #16
 80102c0:	fa25 f404 	lsr.w	r4, r5, r4
 80102c4:	ea48 0803 	orr.w	r8, r8, r3
 80102c8:	fbb4 f1f2 	udiv	r1, r4, r2
 80102cc:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80102d0:	fb02 4411 	mls	r4, r2, r1, r4
 80102d4:	fa1f fc87 	uxth.w	ip, r7
 80102d8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80102dc:	fb01 f30c 	mul.w	r3, r1, ip
 80102e0:	42ab      	cmp	r3, r5
 80102e2:	fa00 f40e 	lsl.w	r4, r0, lr
 80102e6:	d909      	bls.n	80102fc <__udivmoddi4+0x1bc>
 80102e8:	19ed      	adds	r5, r5, r7
 80102ea:	f101 30ff 	add.w	r0, r1, #4294967295
 80102ee:	f080 808a 	bcs.w	8010406 <__udivmoddi4+0x2c6>
 80102f2:	42ab      	cmp	r3, r5
 80102f4:	f240 8087 	bls.w	8010406 <__udivmoddi4+0x2c6>
 80102f8:	3902      	subs	r1, #2
 80102fa:	443d      	add	r5, r7
 80102fc:	1aeb      	subs	r3, r5, r3
 80102fe:	fa1f f588 	uxth.w	r5, r8
 8010302:	fbb3 f0f2 	udiv	r0, r3, r2
 8010306:	fb02 3310 	mls	r3, r2, r0, r3
 801030a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 801030e:	fb00 f30c 	mul.w	r3, r0, ip
 8010312:	42ab      	cmp	r3, r5
 8010314:	d907      	bls.n	8010326 <__udivmoddi4+0x1e6>
 8010316:	19ed      	adds	r5, r5, r7
 8010318:	f100 38ff 	add.w	r8, r0, #4294967295
 801031c:	d26f      	bcs.n	80103fe <__udivmoddi4+0x2be>
 801031e:	42ab      	cmp	r3, r5
 8010320:	d96d      	bls.n	80103fe <__udivmoddi4+0x2be>
 8010322:	3802      	subs	r0, #2
 8010324:	443d      	add	r5, r7
 8010326:	1aeb      	subs	r3, r5, r3
 8010328:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 801032c:	e78f      	b.n	801024e <__udivmoddi4+0x10e>
 801032e:	f1c1 0720 	rsb	r7, r1, #32
 8010332:	fa22 f807 	lsr.w	r8, r2, r7
 8010336:	408b      	lsls	r3, r1
 8010338:	fa05 f401 	lsl.w	r4, r5, r1
 801033c:	ea48 0303 	orr.w	r3, r8, r3
 8010340:	fa20 fe07 	lsr.w	lr, r0, r7
 8010344:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8010348:	40fd      	lsrs	r5, r7
 801034a:	ea4e 0e04 	orr.w	lr, lr, r4
 801034e:	fbb5 f9fc 	udiv	r9, r5, ip
 8010352:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8010356:	fb0c 5519 	mls	r5, ip, r9, r5
 801035a:	fa1f f883 	uxth.w	r8, r3
 801035e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8010362:	fb09 f408 	mul.w	r4, r9, r8
 8010366:	42ac      	cmp	r4, r5
 8010368:	fa02 f201 	lsl.w	r2, r2, r1
 801036c:	fa00 fa01 	lsl.w	sl, r0, r1
 8010370:	d908      	bls.n	8010384 <__udivmoddi4+0x244>
 8010372:	18ed      	adds	r5, r5, r3
 8010374:	f109 30ff 	add.w	r0, r9, #4294967295
 8010378:	d243      	bcs.n	8010402 <__udivmoddi4+0x2c2>
 801037a:	42ac      	cmp	r4, r5
 801037c:	d941      	bls.n	8010402 <__udivmoddi4+0x2c2>
 801037e:	f1a9 0902 	sub.w	r9, r9, #2
 8010382:	441d      	add	r5, r3
 8010384:	1b2d      	subs	r5, r5, r4
 8010386:	fa1f fe8e 	uxth.w	lr, lr
 801038a:	fbb5 f0fc 	udiv	r0, r5, ip
 801038e:	fb0c 5510 	mls	r5, ip, r0, r5
 8010392:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8010396:	fb00 f808 	mul.w	r8, r0, r8
 801039a:	45a0      	cmp	r8, r4
 801039c:	d907      	bls.n	80103ae <__udivmoddi4+0x26e>
 801039e:	18e4      	adds	r4, r4, r3
 80103a0:	f100 35ff 	add.w	r5, r0, #4294967295
 80103a4:	d229      	bcs.n	80103fa <__udivmoddi4+0x2ba>
 80103a6:	45a0      	cmp	r8, r4
 80103a8:	d927      	bls.n	80103fa <__udivmoddi4+0x2ba>
 80103aa:	3802      	subs	r0, #2
 80103ac:	441c      	add	r4, r3
 80103ae:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80103b2:	eba4 0408 	sub.w	r4, r4, r8
 80103b6:	fba0 8902 	umull	r8, r9, r0, r2
 80103ba:	454c      	cmp	r4, r9
 80103bc:	46c6      	mov	lr, r8
 80103be:	464d      	mov	r5, r9
 80103c0:	d315      	bcc.n	80103ee <__udivmoddi4+0x2ae>
 80103c2:	d012      	beq.n	80103ea <__udivmoddi4+0x2aa>
 80103c4:	b156      	cbz	r6, 80103dc <__udivmoddi4+0x29c>
 80103c6:	ebba 030e 	subs.w	r3, sl, lr
 80103ca:	eb64 0405 	sbc.w	r4, r4, r5
 80103ce:	fa04 f707 	lsl.w	r7, r4, r7
 80103d2:	40cb      	lsrs	r3, r1
 80103d4:	431f      	orrs	r7, r3
 80103d6:	40cc      	lsrs	r4, r1
 80103d8:	6037      	str	r7, [r6, #0]
 80103da:	6074      	str	r4, [r6, #4]
 80103dc:	2100      	movs	r1, #0
 80103de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80103e2:	4618      	mov	r0, r3
 80103e4:	e6f8      	b.n	80101d8 <__udivmoddi4+0x98>
 80103e6:	4690      	mov	r8, r2
 80103e8:	e6e0      	b.n	80101ac <__udivmoddi4+0x6c>
 80103ea:	45c2      	cmp	sl, r8
 80103ec:	d2ea      	bcs.n	80103c4 <__udivmoddi4+0x284>
 80103ee:	ebb8 0e02 	subs.w	lr, r8, r2
 80103f2:	eb69 0503 	sbc.w	r5, r9, r3
 80103f6:	3801      	subs	r0, #1
 80103f8:	e7e4      	b.n	80103c4 <__udivmoddi4+0x284>
 80103fa:	4628      	mov	r0, r5
 80103fc:	e7d7      	b.n	80103ae <__udivmoddi4+0x26e>
 80103fe:	4640      	mov	r0, r8
 8010400:	e791      	b.n	8010326 <__udivmoddi4+0x1e6>
 8010402:	4681      	mov	r9, r0
 8010404:	e7be      	b.n	8010384 <__udivmoddi4+0x244>
 8010406:	4601      	mov	r1, r0
 8010408:	e778      	b.n	80102fc <__udivmoddi4+0x1bc>
 801040a:	3802      	subs	r0, #2
 801040c:	443c      	add	r4, r7
 801040e:	e745      	b.n	801029c <__udivmoddi4+0x15c>
 8010410:	4608      	mov	r0, r1
 8010412:	e708      	b.n	8010226 <__udivmoddi4+0xe6>
 8010414:	f1a8 0802 	sub.w	r8, r8, #2
 8010418:	443d      	add	r5, r7
 801041a:	e72b      	b.n	8010274 <__udivmoddi4+0x134>

0801041c <__aeabi_idiv0>:
 801041c:	4770      	bx	lr
 801041e:	bf00      	nop

08010420 <net_if_init>:
int net_if_reinit(void * if_ctxt);

/* Functions Definition ------------------------------------------------------*/

int net_if_init(void * if_ctxt)
{
 8010420:	b580      	push	{r7, lr}
 8010422:	b08c      	sub	sp, #48	; 0x30
 8010424:	af04      	add	r7, sp, #16
 8010426:	6078      	str	r0, [r7, #4]
  struct netif * Netif = (struct netif *) if_ctxt;
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	61fb      	str	r3, [r7, #28]

 // msg_info("\n*** Ethernet connection ***\n");
  
 // msg_info("Initializing LwIP on Ethernet interface\n\n");

  tcpip_init(NULL, NULL);
 801042c:	2100      	movs	r1, #0
 801042e:	2000      	movs	r0, #0
 8010430:	f008 f816 	bl	8018460 <tcpip_init>

  /* IP default settings, to be overridden by DHCP */  

  IP4_ADDR(&addr, IP_ADDR0, IP_ADDR1, IP_ADDR2, IP_ADDR3);
 8010434:	4b19      	ldr	r3, [pc, #100]	; (801049c <net_if_init+0x7c>)
 8010436:	61bb      	str	r3, [r7, #24]
  IP4_ADDR(&gw, GW_ADDR0, GW_ADDR1, GW_ADDR2, GW_ADDR3);
 8010438:	4b19      	ldr	r3, [pc, #100]	; (80104a0 <net_if_init+0x80>)
 801043a:	613b      	str	r3, [r7, #16]
  IP4_ADDR(&netmask, MASK_ADDR0, MASK_ADDR1, MASK_ADDR2, MASK_ADDR3);
 801043c:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8010440:	617b      	str	r3, [r7, #20]
  IP4_ADDR(&dnsserver,DNS_ADDR0,DNS_ADDR1,DNS_ADDR2,DNS_ADDR3);
 8010442:	4b17      	ldr	r3, [pc, #92]	; (80104a0 <net_if_init+0x80>)
 8010444:	60fb      	str	r3, [r7, #12]

  dns_setserver (0, &dnsserver);
 8010446:	f107 030c 	add.w	r3, r7, #12
 801044a:	4619      	mov	r1, r3
 801044c:	2000      	movs	r0, #0
 801044e:	f008 fed7 	bl	8019200 <dns_setserver>

  /* add the network interface */    
  netif_add(Netif, &addr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8010452:	f107 0010 	add.w	r0, r7, #16
 8010456:	f107 0214 	add.w	r2, r7, #20
 801045a:	f107 0118 	add.w	r1, r7, #24
 801045e:	4b11      	ldr	r3, [pc, #68]	; (80104a4 <net_if_init+0x84>)
 8010460:	9302      	str	r3, [sp, #8]
 8010462:	4b11      	ldr	r3, [pc, #68]	; (80104a8 <net_if_init+0x88>)
 8010464:	9301      	str	r3, [sp, #4]
 8010466:	2300      	movs	r3, #0
 8010468:	9300      	str	r3, [sp, #0]
 801046a:	4603      	mov	r3, r0
 801046c:	69f8      	ldr	r0, [r7, #28]
 801046e:	f00d ffe5 	bl	801e43c <netif_add>

  /* register the default network interface */
  netif_set_default(Netif);
 8010472:	69f8      	ldr	r0, [r7, #28]
 8010474:	f00e f99c 	bl	801e7b0 <netif_set_default>
  
  netif_set_up(Netif);
 8010478:	69f8      	ldr	r0, [r7, #28]
 801047a:	f00e f9a9 	bl	801e7d0 <netif_set_up>
  while((Netif->ip_addr.addr == 0) && (HAL_GetTick() - start < 10000))
  {
  }
#endif

  if (Netif->ip_addr.addr == 0)
 801047e:	69fb      	ldr	r3, [r7, #28]
 8010480:	685b      	ldr	r3, [r3, #4]
 8010482:	2b00      	cmp	r3, #0
 8010484:	d104      	bne.n	8010490 <net_if_init+0x70>
  {
    msg_info(" Failed to get IP address! Please check cable and/or network configuration.\n");
 8010486:	4809      	ldr	r0, [pc, #36]	; (80104ac <net_if_init+0x8c>)
 8010488:	f015 ffc6 	bl	8026418 <puts>
    Error_Handler();
 801048c:	f000 fc28 	bl	8010ce0 <Error_Handler>
#ifdef USE_DHCP
    dhcp_stop(Netif);
#endif
  }

  return 0;
 8010490:	2300      	movs	r3, #0
}
 8010492:	4618      	mov	r0, r3
 8010494:	3720      	adds	r7, #32
 8010496:	46bd      	mov	sp, r7
 8010498:	bd80      	pop	{r7, pc}
 801049a:	bf00      	nop
 801049c:	532ba8c0 	.word	0x532ba8c0
 80104a0:	012ba8c0 	.word	0x012ba8c0
 80104a4:	08025cd5 	.word	0x08025cd5
 80104a8:	080156dd 	.word	0x080156dd
 80104ac:	080274a4 	.word	0x080274a4

080104b0 <net_init>:
/* Private variables ---------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

int net_init(net_hnd_t * nethnd, net_if_t interface, net_if_init_t *f_netinit)
{
 80104b0:	b580      	push	{r7, lr}
 80104b2:	b086      	sub	sp, #24
 80104b4:	af00      	add	r7, sp, #0
 80104b6:	60f8      	str	r0, [r7, #12]
 80104b8:	460b      	mov	r3, r1
 80104ba:	607a      	str	r2, [r7, #4]
 80104bc:	72fb      	strb	r3, [r7, #11]
  int rc = NET_ERR;
 80104be:	f04f 33ff 	mov.w	r3, #4294967295
 80104c2:	617b      	str	r3, [r7, #20]
  net_ctxt_t *ctxt = NULL;
 80104c4:	2300      	movs	r3, #0
 80104c6:	613b      	str	r3, [r7, #16]

  if (f_netinit == NULL)
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	d103      	bne.n	80104d6 <net_init+0x26>
  {
    rc = NET_PARAM;
 80104ce:	f06f 0301 	mvn.w	r3, #1
 80104d2:	617b      	str	r3, [r7, #20]
 80104d4:	e039      	b.n	801054a <net_init+0x9a>
  }
  else
  {
    ctxt = net_malloc(sizeof(net_ctxt_t));
 80104d6:	2040      	movs	r0, #64	; 0x40
 80104d8:	f005 fe6e 	bl	80161b8 <pvPortMalloc>
 80104dc:	4603      	mov	r3, r0
 80104de:	613b      	str	r3, [r7, #16]
    if (ctxt == NULL)
 80104e0:	693b      	ldr	r3, [r7, #16]
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	d10b      	bne.n	80104fe <net_init+0x4e>
    {
      msg_error("net_init: allocation failed.\n");
 80104e6:	2253      	movs	r2, #83	; 0x53
 80104e8:	4921      	ldr	r1, [pc, #132]	; (8010570 <net_init+0xc0>)
 80104ea:	4822      	ldr	r0, [pc, #136]	; (8010574 <net_init+0xc4>)
 80104ec:	f015 ff20 	bl	8026330 <iprintf>
 80104f0:	4821      	ldr	r0, [pc, #132]	; (8010578 <net_init+0xc8>)
 80104f2:	f015 ff91 	bl	8026418 <puts>
      rc = NET_ERR;
 80104f6:	f04f 33ff 	mov.w	r3, #4294967295
 80104fa:	617b      	str	r3, [r7, #20]
 80104fc:	e025      	b.n	801054a <net_init+0x9a>
    }
    else
    {
      memset(ctxt, 0, sizeof(net_ctxt_t));
 80104fe:	2240      	movs	r2, #64	; 0x40
 8010500:	2100      	movs	r1, #0
 8010502:	6938      	ldr	r0, [r7, #16]
 8010504:	f015 fe60 	bl	80261c8 <memset>
      switch(interface)
 8010508:	7afb      	ldrb	r3, [r7, #11]
 801050a:	2b02      	cmp	r3, #2
 801050c:	d10e      	bne.n	801052c <net_init+0x7c>
          }
          break;
    #endif /* USE_C2C */
    #ifdef USE_LWIP
        case NET_IF_ETH:
          ctxt->itf = interface;  // TODO: register a list of function pointers in function of the interface type. (to be provided by the caller?)
 801050e:	693b      	ldr	r3, [r7, #16]
 8010510:	7afa      	ldrb	r2, [r7, #11]
 8010512:	701a      	strb	r2, [r3, #0]
          if(f_netinit(&ctxt->lwip_netif) == 0)
 8010514:	693b      	ldr	r3, [r7, #16]
 8010516:	f103 0208 	add.w	r2, r3, #8
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	4610      	mov	r0, r2
 801051e:	4798      	blx	r3
 8010520:	4603      	mov	r3, r0
 8010522:	2b00      	cmp	r3, #0
 8010524:	d110      	bne.n	8010548 <net_init+0x98>
          {
            rc = NET_OK;
 8010526:	2300      	movs	r3, #0
 8010528:	617b      	str	r3, [r7, #20]
          }
          break;
 801052a:	e00d      	b.n	8010548 <net_init+0x98>
    #endif /* USE_LWIP */
        default:
          msg_error("net_init: interface type of %d not implemented.\n", interface);
 801052c:	2277      	movs	r2, #119	; 0x77
 801052e:	4910      	ldr	r1, [pc, #64]	; (8010570 <net_init+0xc0>)
 8010530:	4810      	ldr	r0, [pc, #64]	; (8010574 <net_init+0xc4>)
 8010532:	f015 fefd 	bl	8026330 <iprintf>
 8010536:	7afb      	ldrb	r3, [r7, #11]
 8010538:	4619      	mov	r1, r3
 801053a:	4810      	ldr	r0, [pc, #64]	; (801057c <net_init+0xcc>)
 801053c:	f015 fef8 	bl	8026330 <iprintf>
          rc = NET_PARAM;
 8010540:	f06f 0301 	mvn.w	r3, #1
 8010544:	617b      	str	r3, [r7, #20]
 8010546:	e000      	b.n	801054a <net_init+0x9a>
          break;
 8010548:	bf00      	nop
      }
    }
  }

  if (rc == NET_OK)
 801054a:	697b      	ldr	r3, [r7, #20]
 801054c:	2b00      	cmp	r3, #0
 801054e:	d103      	bne.n	8010558 <net_init+0xa8>
  {
    *nethnd = (net_hnd_t) ctxt;
 8010550:	68fb      	ldr	r3, [r7, #12]
 8010552:	693a      	ldr	r2, [r7, #16]
 8010554:	601a      	str	r2, [r3, #0]
 8010556:	e005      	b.n	8010564 <net_init+0xb4>
  }
  else
  {
    if (ctxt != NULL)
 8010558:	693b      	ldr	r3, [r7, #16]
 801055a:	2b00      	cmp	r3, #0
 801055c:	d002      	beq.n	8010564 <net_init+0xb4>
    {
      net_free(ctxt);
 801055e:	6938      	ldr	r0, [r7, #16]
 8010560:	f005 fef2 	bl	8016348 <vPortFree>
    }
  }
  
  return rc;
 8010564:	697b      	ldr	r3, [r7, #20]
}
 8010566:	4618      	mov	r0, r3
 8010568:	3718      	adds	r7, #24
 801056a:	46bd      	mov	sp, r7
 801056c:	bd80      	pop	{r7, pc}
 801056e:	bf00      	nop
 8010570:	0802a8f8 	.word	0x0802a8f8
 8010574:	0802752c 	.word	0x0802752c
 8010578:	0802753c 	.word	0x0802753c
 801057c:	0802755c 	.word	0x0802755c

08010580 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8010580:	b480      	push	{r7}
 8010582:	b085      	sub	sp, #20
 8010584:	af00      	add	r7, sp, #0
 8010586:	60f8      	str	r0, [r7, #12]
 8010588:	60b9      	str	r1, [r7, #8]
 801058a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 801058c:	68fb      	ldr	r3, [r7, #12]
 801058e:	4a07      	ldr	r2, [pc, #28]	; (80105ac <vApplicationGetIdleTaskMemory+0x2c>)
 8010590:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8010592:	68bb      	ldr	r3, [r7, #8]
 8010594:	4a06      	ldr	r2, [pc, #24]	; (80105b0 <vApplicationGetIdleTaskMemory+0x30>)
 8010596:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	2280      	movs	r2, #128	; 0x80
 801059c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 801059e:	bf00      	nop
 80105a0:	3714      	adds	r7, #20
 80105a2:	46bd      	mov	sp, r7
 80105a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105a8:	4770      	bx	lr
 80105aa:	bf00      	nop
 80105ac:	200000a0 	.word	0x200000a0
 80105b0:	200000f4 	.word	0x200000f4

080105b4 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80105b4:	b480      	push	{r7}
 80105b6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80105b8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80105bc:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80105c0:	4b0b      	ldr	r3, [pc, #44]	; (80105f0 <SCB_EnableICache+0x3c>)
 80105c2:	2200      	movs	r2, #0
 80105c4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80105c8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80105cc:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80105d0:	4a07      	ldr	r2, [pc, #28]	; (80105f0 <SCB_EnableICache+0x3c>)
 80105d2:	4b07      	ldr	r3, [pc, #28]	; (80105f0 <SCB_EnableICache+0x3c>)
 80105d4:	695b      	ldr	r3, [r3, #20]
 80105d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80105da:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80105dc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80105e0:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 80105e4:	bf00      	nop
 80105e6:	46bd      	mov	sp, r7
 80105e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ec:	4770      	bx	lr
 80105ee:	bf00      	nop
 80105f0:	e000ed00 	.word	0xe000ed00

080105f4 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 80105f4:	b480      	push	{r7}
 80105f6:	b085      	sub	sp, #20
 80105f8:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80105fa:	4b1d      	ldr	r3, [pc, #116]	; (8010670 <SCB_EnableDCache+0x7c>)
 80105fc:	2200      	movs	r2, #0
 80105fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8010602:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8010606:	4b1a      	ldr	r3, [pc, #104]	; (8010670 <SCB_EnableDCache+0x7c>)
 8010608:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801060c:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	0b5b      	lsrs	r3, r3, #13
 8010612:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8010616:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	08db      	lsrs	r3, r3, #3
 801061c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010620:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8010622:	4913      	ldr	r1, [pc, #76]	; (8010670 <SCB_EnableDCache+0x7c>)
 8010624:	68fb      	ldr	r3, [r7, #12]
 8010626:	015a      	lsls	r2, r3, #5
 8010628:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 801062c:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 801062e:	68ba      	ldr	r2, [r7, #8]
 8010630:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8010632:	4313      	orrs	r3, r2
 8010634:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8010638:	68bb      	ldr	r3, [r7, #8]
 801063a:	1e5a      	subs	r2, r3, #1
 801063c:	60ba      	str	r2, [r7, #8]
 801063e:	2b00      	cmp	r3, #0
 8010640:	d1ef      	bne.n	8010622 <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 8010642:	68fb      	ldr	r3, [r7, #12]
 8010644:	1e5a      	subs	r2, r3, #1
 8010646:	60fa      	str	r2, [r7, #12]
 8010648:	2b00      	cmp	r3, #0
 801064a:	d1e5      	bne.n	8010618 <SCB_EnableDCache+0x24>
 801064c:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8010650:	4a07      	ldr	r2, [pc, #28]	; (8010670 <SCB_EnableDCache+0x7c>)
 8010652:	4b07      	ldr	r3, [pc, #28]	; (8010670 <SCB_EnableDCache+0x7c>)
 8010654:	695b      	ldr	r3, [r3, #20]
 8010656:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801065a:	6153      	str	r3, [r2, #20]
 801065c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8010660:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 8010664:	bf00      	nop
 8010666:	3714      	adds	r7, #20
 8010668:	46bd      	mov	sp, r7
 801066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801066e:	4770      	bx	lr
 8010670:	e000ed00 	.word	0xe000ed00

08010674 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8010674:	b580      	push	{r7, lr}
 8010676:	b082      	sub	sp, #8
 8010678:	af00      	add	r7, sp, #0
 801067a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  while (HAL_OK != HAL_UART_Transmit(&huart3, (uint8_t *) &ch, 1, 30000))
 801067c:	bf00      	nop
 801067e:	1d39      	adds	r1, r7, #4
 8010680:	f247 5330 	movw	r3, #30000	; 0x7530
 8010684:	2201      	movs	r2, #1
 8010686:	4805      	ldr	r0, [pc, #20]	; (801069c <__io_putchar+0x28>)
 8010688:	f003 ffda 	bl	8014640 <HAL_UART_Transmit>
 801068c:	4603      	mov	r3, r0
 801068e:	2b00      	cmp	r3, #0
 8010690:	d1f5      	bne.n	801067e <__io_putchar+0xa>
  {
    ;
  }
  return ch;
 8010692:	687b      	ldr	r3, [r7, #4]
}
 8010694:	4618      	mov	r0, r3
 8010696:	3708      	adds	r7, #8
 8010698:	46bd      	mov	sp, r7
 801069a:	bd80      	pop	{r7, pc}
 801069c:	2001970c 	.word	0x2001970c

080106a0 <__io_getchar>:
  * @brief  Retargets the C library scanf function to the USART.
  * @param  None
  * @retval None
  */
GETCHAR_PROTOTYPE
{
 80106a0:	b580      	push	{r7, lr}
 80106a2:	b082      	sub	sp, #8
 80106a4:	af00      	add	r7, sp, #0
  /* Place your implementation of fgetc here */
  /* e.g. read a character on USART and loop until the end of read */
  uint8_t ch = 0;
 80106a6:	2300      	movs	r3, #0
 80106a8:	71fb      	strb	r3, [r7, #7]
  while (HAL_OK != HAL_UART_Receive(&huart3, (uint8_t *)&ch, 1, 30000))
 80106aa:	bf00      	nop
 80106ac:	1df9      	adds	r1, r7, #7
 80106ae:	f247 5330 	movw	r3, #30000	; 0x7530
 80106b2:	2201      	movs	r2, #1
 80106b4:	4805      	ldr	r0, [pc, #20]	; (80106cc <__io_getchar+0x2c>)
 80106b6:	f004 f854 	bl	8014762 <HAL_UART_Receive>
 80106ba:	4603      	mov	r3, r0
 80106bc:	2b00      	cmp	r3, #0
 80106be:	d1f5      	bne.n	80106ac <__io_getchar+0xc>
  {
    ;
  }
  return ch;
 80106c0:	79fb      	ldrb	r3, [r7, #7]
}
 80106c2:	4618      	mov	r0, r3
 80106c4:	3708      	adds	r7, #8
 80106c6:	46bd      	mov	sp, r7
 80106c8:	bd80      	pop	{r7, pc}
 80106ca:	bf00      	nop
 80106cc:	2001970c 	.word	0x2001970c

080106d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80106d0:	b5b0      	push	{r4, r5, r7, lr}
 80106d2:	b088      	sub	sp, #32
 80106d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80106d6:	f000 faaf 	bl	8010c38 <MPU_Config>

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 80106da:	f7ff ff6b 	bl	80105b4 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 80106de:	f7ff ff89 	bl	80105f4 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80106e2:	f000 fdcd 	bl	8011280 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80106e6:	f000 f825 	bl	8010734 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80106ea:	f000 f9bf 	bl	8010a6c <MX_GPIO_Init>
  MX_I2C1_Init();
 80106ee:	f000 f8bb 	bl	8010868 <MX_I2C1_Init>
  MX_I2C2_Init();
 80106f2:	f000 f8f9 	bl	80108e8 <MX_I2C2_Init>
  MX_RNG_Init();
 80106f6:	f000 f937 	bl	8010968 <MX_RNG_Init>
  MX_SPI1_Init();
 80106fa:	f000 f949 	bl	8010990 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 80106fe:	f000 f985 	bl	8010a0c <MX_USART3_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 10240);
 8010702:	4b0a      	ldr	r3, [pc, #40]	; (801072c <main+0x5c>)
 8010704:	1d3c      	adds	r4, r7, #4
 8010706:	461d      	mov	r5, r3
 8010708:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801070a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801070c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8010710:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8010714:	1d3b      	adds	r3, r7, #4
 8010716:	2100      	movs	r1, #0
 8010718:	4618      	mov	r0, r3
 801071a:	f005 f855 	bl	80157c8 <osThreadCreate>
 801071e:	4602      	mov	r2, r0
 8010720:	4b03      	ldr	r3, [pc, #12]	; (8010730 <main+0x60>)
 8010722:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8010724:	f005 f839 	bl	801579a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8010728:	e7fe      	b.n	8010728 <main+0x58>
 801072a:	bf00      	nop
 801072c:	080277ec 	.word	0x080277ec
 8010730:	20019708 	.word	0x20019708

08010734 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8010734:	b580      	push	{r7, lr}
 8010736:	b0b8      	sub	sp, #224	; 0xe0
 8010738:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 801073a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 801073e:	2234      	movs	r2, #52	; 0x34
 8010740:	2100      	movs	r1, #0
 8010742:	4618      	mov	r0, r3
 8010744:	f015 fd40 	bl	80261c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8010748:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801074c:	2200      	movs	r2, #0
 801074e:	601a      	str	r2, [r3, #0]
 8010750:	605a      	str	r2, [r3, #4]
 8010752:	609a      	str	r2, [r3, #8]
 8010754:	60da      	str	r2, [r3, #12]
 8010756:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8010758:	f107 0308 	add.w	r3, r7, #8
 801075c:	2290      	movs	r2, #144	; 0x90
 801075e:	2100      	movs	r1, #0
 8010760:	4618      	mov	r0, r3
 8010762:	f015 fd31 	bl	80261c8 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8010766:	f002 fa0d 	bl	8012b84 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 801076a:	4a3c      	ldr	r2, [pc, #240]	; (801085c <SystemClock_Config+0x128>)
 801076c:	4b3b      	ldr	r3, [pc, #236]	; (801085c <SystemClock_Config+0x128>)
 801076e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010770:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010774:	6413      	str	r3, [r2, #64]	; 0x40
 8010776:	4b39      	ldr	r3, [pc, #228]	; (801085c <SystemClock_Config+0x128>)
 8010778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801077a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801077e:	607b      	str	r3, [r7, #4]
 8010780:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8010782:	4a37      	ldr	r2, [pc, #220]	; (8010860 <SystemClock_Config+0x12c>)
 8010784:	4b36      	ldr	r3, [pc, #216]	; (8010860 <SystemClock_Config+0x12c>)
 8010786:	681b      	ldr	r3, [r3, #0]
 8010788:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 801078c:	6013      	str	r3, [r2, #0]
 801078e:	4b34      	ldr	r3, [pc, #208]	; (8010860 <SystemClock_Config+0x12c>)
 8010790:	681b      	ldr	r3, [r3, #0]
 8010792:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8010796:	603b      	str	r3, [r7, #0]
 8010798:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 801079a:	2301      	movs	r3, #1
 801079c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80107a0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80107a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80107a8:	2302      	movs	r3, #2
 80107aa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80107ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80107b2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 80107b6:	2304      	movs	r3, #4
 80107b8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 80107bc:	23d8      	movs	r3, #216	; 0xd8
 80107be:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80107c2:	2302      	movs	r3, #2
 80107c4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80107c8:	2309      	movs	r3, #9
 80107ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80107ce:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80107d2:	4618      	mov	r0, r3
 80107d4:	f002 fa36 	bl	8012c44 <HAL_RCC_OscConfig>
 80107d8:	4603      	mov	r3, r0
 80107da:	2b00      	cmp	r3, #0
 80107dc:	d001      	beq.n	80107e2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80107de:	f000 fa7f 	bl	8010ce0 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80107e2:	f002 f9df 	bl	8012ba4 <HAL_PWREx_EnableOverDrive>
 80107e6:	4603      	mov	r3, r0
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	d001      	beq.n	80107f0 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80107ec:	f000 fa78 	bl	8010ce0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80107f0:	230f      	movs	r3, #15
 80107f2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80107f6:	2302      	movs	r3, #2
 80107f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80107fc:	2300      	movs	r3, #0
 80107fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8010802:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8010806:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 801080a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801080e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8010812:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8010816:	2107      	movs	r1, #7
 8010818:	4618      	mov	r0, r3
 801081a:	f002 fcc1 	bl	80131a0 <HAL_RCC_ClockConfig>
 801081e:	4603      	mov	r3, r0
 8010820:	2b00      	cmp	r3, #0
 8010822:	d001      	beq.n	8010828 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8010824:	f000 fa5c 	bl	8010ce0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1
 8010828:	4b0e      	ldr	r3, [pc, #56]	; (8010864 <SystemClock_Config+0x130>)
 801082a:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 801082c:	2300      	movs	r3, #0
 801082e:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8010830:	2300      	movs	r3, #0
 8010832:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8010834:	2300      	movs	r3, #0
 8010836:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8010838:	2300      	movs	r3, #0
 801083a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801083e:	f107 0308 	add.w	r3, r7, #8
 8010842:	4618      	mov	r0, r3
 8010844:	f002 fed6 	bl	80135f4 <HAL_RCCEx_PeriphCLKConfig>
 8010848:	4603      	mov	r3, r0
 801084a:	2b00      	cmp	r3, #0
 801084c:	d001      	beq.n	8010852 <SystemClock_Config+0x11e>
  {
    Error_Handler();
 801084e:	f000 fa47 	bl	8010ce0 <Error_Handler>
  }
}
 8010852:	bf00      	nop
 8010854:	37e0      	adds	r7, #224	; 0xe0
 8010856:	46bd      	mov	sp, r7
 8010858:	bd80      	pop	{r7, pc}
 801085a:	bf00      	nop
 801085c:	40023800 	.word	0x40023800
 8010860:	40007000 	.word	0x40007000
 8010864:	0020c100 	.word	0x0020c100

08010868 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8010868:	b580      	push	{r7, lr}
 801086a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 801086c:	4b1b      	ldr	r3, [pc, #108]	; (80108dc <MX_I2C1_Init+0x74>)
 801086e:	4a1c      	ldr	r2, [pc, #112]	; (80108e0 <MX_I2C1_Init+0x78>)
 8010870:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8010872:	4b1a      	ldr	r3, [pc, #104]	; (80108dc <MX_I2C1_Init+0x74>)
 8010874:	4a1b      	ldr	r2, [pc, #108]	; (80108e4 <MX_I2C1_Init+0x7c>)
 8010876:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8010878:	4b18      	ldr	r3, [pc, #96]	; (80108dc <MX_I2C1_Init+0x74>)
 801087a:	2200      	movs	r2, #0
 801087c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 801087e:	4b17      	ldr	r3, [pc, #92]	; (80108dc <MX_I2C1_Init+0x74>)
 8010880:	2201      	movs	r2, #1
 8010882:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8010884:	4b15      	ldr	r3, [pc, #84]	; (80108dc <MX_I2C1_Init+0x74>)
 8010886:	2200      	movs	r2, #0
 8010888:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 801088a:	4b14      	ldr	r3, [pc, #80]	; (80108dc <MX_I2C1_Init+0x74>)
 801088c:	2200      	movs	r2, #0
 801088e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8010890:	4b12      	ldr	r3, [pc, #72]	; (80108dc <MX_I2C1_Init+0x74>)
 8010892:	2200      	movs	r2, #0
 8010894:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8010896:	4b11      	ldr	r3, [pc, #68]	; (80108dc <MX_I2C1_Init+0x74>)
 8010898:	2200      	movs	r2, #0
 801089a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 801089c:	4b0f      	ldr	r3, [pc, #60]	; (80108dc <MX_I2C1_Init+0x74>)
 801089e:	2200      	movs	r2, #0
 80108a0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80108a2:	480e      	ldr	r0, [pc, #56]	; (80108dc <MX_I2C1_Init+0x74>)
 80108a4:	f002 f848 	bl	8012938 <HAL_I2C_Init>
 80108a8:	4603      	mov	r3, r0
 80108aa:	2b00      	cmp	r3, #0
 80108ac:	d001      	beq.n	80108b2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80108ae:	f000 fa17 	bl	8010ce0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80108b2:	2100      	movs	r1, #0
 80108b4:	4809      	ldr	r0, [pc, #36]	; (80108dc <MX_I2C1_Init+0x74>)
 80108b6:	f002 f8cd 	bl	8012a54 <HAL_I2CEx_ConfigAnalogFilter>
 80108ba:	4603      	mov	r3, r0
 80108bc:	2b00      	cmp	r3, #0
 80108be:	d001      	beq.n	80108c4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80108c0:	f000 fa0e 	bl	8010ce0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80108c4:	2100      	movs	r1, #0
 80108c6:	4805      	ldr	r0, [pc, #20]	; (80108dc <MX_I2C1_Init+0x74>)
 80108c8:	f002 f90f 	bl	8012aea <HAL_I2CEx_ConfigDigitalFilter>
 80108cc:	4603      	mov	r3, r0
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	d001      	beq.n	80108d6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80108d2:	f000 fa05 	bl	8010ce0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80108d6:	bf00      	nop
 80108d8:	bd80      	pop	{r7, pc}
 80108da:	bf00      	nop
 80108dc:	20019790 	.word	0x20019790
 80108e0:	40005400 	.word	0x40005400
 80108e4:	20404768 	.word	0x20404768

080108e8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80108e8:	b580      	push	{r7, lr}
 80108ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80108ec:	4b1b      	ldr	r3, [pc, #108]	; (801095c <MX_I2C2_Init+0x74>)
 80108ee:	4a1c      	ldr	r2, [pc, #112]	; (8010960 <MX_I2C2_Init+0x78>)
 80108f0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20404768;
 80108f2:	4b1a      	ldr	r3, [pc, #104]	; (801095c <MX_I2C2_Init+0x74>)
 80108f4:	4a1b      	ldr	r2, [pc, #108]	; (8010964 <MX_I2C2_Init+0x7c>)
 80108f6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80108f8:	4b18      	ldr	r3, [pc, #96]	; (801095c <MX_I2C2_Init+0x74>)
 80108fa:	2200      	movs	r2, #0
 80108fc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80108fe:	4b17      	ldr	r3, [pc, #92]	; (801095c <MX_I2C2_Init+0x74>)
 8010900:	2201      	movs	r2, #1
 8010902:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8010904:	4b15      	ldr	r3, [pc, #84]	; (801095c <MX_I2C2_Init+0x74>)
 8010906:	2200      	movs	r2, #0
 8010908:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 801090a:	4b14      	ldr	r3, [pc, #80]	; (801095c <MX_I2C2_Init+0x74>)
 801090c:	2200      	movs	r2, #0
 801090e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8010910:	4b12      	ldr	r3, [pc, #72]	; (801095c <MX_I2C2_Init+0x74>)
 8010912:	2200      	movs	r2, #0
 8010914:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8010916:	4b11      	ldr	r3, [pc, #68]	; (801095c <MX_I2C2_Init+0x74>)
 8010918:	2200      	movs	r2, #0
 801091a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 801091c:	4b0f      	ldr	r3, [pc, #60]	; (801095c <MX_I2C2_Init+0x74>)
 801091e:	2200      	movs	r2, #0
 8010920:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8010922:	480e      	ldr	r0, [pc, #56]	; (801095c <MX_I2C2_Init+0x74>)
 8010924:	f002 f808 	bl	8012938 <HAL_I2C_Init>
 8010928:	4603      	mov	r3, r0
 801092a:	2b00      	cmp	r3, #0
 801092c:	d001      	beq.n	8010932 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 801092e:	f000 f9d7 	bl	8010ce0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8010932:	2100      	movs	r1, #0
 8010934:	4809      	ldr	r0, [pc, #36]	; (801095c <MX_I2C2_Init+0x74>)
 8010936:	f002 f88d 	bl	8012a54 <HAL_I2CEx_ConfigAnalogFilter>
 801093a:	4603      	mov	r3, r0
 801093c:	2b00      	cmp	r3, #0
 801093e:	d001      	beq.n	8010944 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8010940:	f000 f9ce 	bl	8010ce0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8010944:	2100      	movs	r1, #0
 8010946:	4805      	ldr	r0, [pc, #20]	; (801095c <MX_I2C2_Init+0x74>)
 8010948:	f002 f8cf 	bl	8012aea <HAL_I2CEx_ConfigDigitalFilter>
 801094c:	4603      	mov	r3, r0
 801094e:	2b00      	cmp	r3, #0
 8010950:	d001      	beq.n	8010956 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8010952:	f000 f9c5 	bl	8010ce0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8010956:	bf00      	nop
 8010958:	bd80      	pop	{r7, pc}
 801095a:	bf00      	nop
 801095c:	200197dc 	.word	0x200197dc
 8010960:	40005800 	.word	0x40005800
 8010964:	20404768 	.word	0x20404768

08010968 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8010968:	b580      	push	{r7, lr}
 801096a:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 801096c:	4b06      	ldr	r3, [pc, #24]	; (8010988 <MX_RNG_Init+0x20>)
 801096e:	4a07      	ldr	r2, [pc, #28]	; (801098c <MX_RNG_Init+0x24>)
 8010970:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8010972:	4805      	ldr	r0, [pc, #20]	; (8010988 <MX_RNG_Init+0x20>)
 8010974:	f003 fa64 	bl	8013e40 <HAL_RNG_Init>
 8010978:	4603      	mov	r3, r0
 801097a:	2b00      	cmp	r3, #0
 801097c:	d001      	beq.n	8010982 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 801097e:	f000 f9af 	bl	8010ce0 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8010982:	bf00      	nop
 8010984:	bd80      	pop	{r7, pc}
 8010986:	bf00      	nop
 8010988:	20019848 	.word	0x20019848
 801098c:	50060800 	.word	0x50060800

08010990 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8010990:	b580      	push	{r7, lr}
 8010992:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8010994:	4b1b      	ldr	r3, [pc, #108]	; (8010a04 <MX_SPI1_Init+0x74>)
 8010996:	4a1c      	ldr	r2, [pc, #112]	; (8010a08 <MX_SPI1_Init+0x78>)
 8010998:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 801099a:	4b1a      	ldr	r3, [pc, #104]	; (8010a04 <MX_SPI1_Init+0x74>)
 801099c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80109a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80109a2:	4b18      	ldr	r3, [pc, #96]	; (8010a04 <MX_SPI1_Init+0x74>)
 80109a4:	2200      	movs	r2, #0
 80109a6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80109a8:	4b16      	ldr	r3, [pc, #88]	; (8010a04 <MX_SPI1_Init+0x74>)
 80109aa:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80109ae:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80109b0:	4b14      	ldr	r3, [pc, #80]	; (8010a04 <MX_SPI1_Init+0x74>)
 80109b2:	2200      	movs	r2, #0
 80109b4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80109b6:	4b13      	ldr	r3, [pc, #76]	; (8010a04 <MX_SPI1_Init+0x74>)
 80109b8:	2200      	movs	r2, #0
 80109ba:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80109bc:	4b11      	ldr	r3, [pc, #68]	; (8010a04 <MX_SPI1_Init+0x74>)
 80109be:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80109c2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80109c4:	4b0f      	ldr	r3, [pc, #60]	; (8010a04 <MX_SPI1_Init+0x74>)
 80109c6:	2218      	movs	r2, #24
 80109c8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80109ca:	4b0e      	ldr	r3, [pc, #56]	; (8010a04 <MX_SPI1_Init+0x74>)
 80109cc:	2200      	movs	r2, #0
 80109ce:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80109d0:	4b0c      	ldr	r3, [pc, #48]	; (8010a04 <MX_SPI1_Init+0x74>)
 80109d2:	2200      	movs	r2, #0
 80109d4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80109d6:	4b0b      	ldr	r3, [pc, #44]	; (8010a04 <MX_SPI1_Init+0x74>)
 80109d8:	2200      	movs	r2, #0
 80109da:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80109dc:	4b09      	ldr	r3, [pc, #36]	; (8010a04 <MX_SPI1_Init+0x74>)
 80109de:	2207      	movs	r2, #7
 80109e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80109e2:	4b08      	ldr	r3, [pc, #32]	; (8010a04 <MX_SPI1_Init+0x74>)
 80109e4:	2200      	movs	r2, #0
 80109e6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80109e8:	4b06      	ldr	r3, [pc, #24]	; (8010a04 <MX_SPI1_Init+0x74>)
 80109ea:	2208      	movs	r2, #8
 80109ec:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80109ee:	4805      	ldr	r0, [pc, #20]	; (8010a04 <MX_SPI1_Init+0x74>)
 80109f0:	f003 fa50 	bl	8013e94 <HAL_SPI_Init>
 80109f4:	4603      	mov	r3, r0
 80109f6:	2b00      	cmp	r3, #0
 80109f8:	d001      	beq.n	80109fe <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80109fa:	f000 f971 	bl	8010ce0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80109fe:	bf00      	nop
 8010a00:	bd80      	pop	{r7, pc}
 8010a02:	bf00      	nop
 8010a04:	20019858 	.word	0x20019858
 8010a08:	40013000 	.word	0x40013000

08010a0c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8010a0c:	b580      	push	{r7, lr}
 8010a0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8010a10:	4b14      	ldr	r3, [pc, #80]	; (8010a64 <MX_USART3_UART_Init+0x58>)
 8010a12:	4a15      	ldr	r2, [pc, #84]	; (8010a68 <MX_USART3_UART_Init+0x5c>)
 8010a14:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8010a16:	4b13      	ldr	r3, [pc, #76]	; (8010a64 <MX_USART3_UART_Init+0x58>)
 8010a18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8010a1c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8010a1e:	4b11      	ldr	r3, [pc, #68]	; (8010a64 <MX_USART3_UART_Init+0x58>)
 8010a20:	2200      	movs	r2, #0
 8010a22:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8010a24:	4b0f      	ldr	r3, [pc, #60]	; (8010a64 <MX_USART3_UART_Init+0x58>)
 8010a26:	2200      	movs	r2, #0
 8010a28:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8010a2a:	4b0e      	ldr	r3, [pc, #56]	; (8010a64 <MX_USART3_UART_Init+0x58>)
 8010a2c:	2200      	movs	r2, #0
 8010a2e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8010a30:	4b0c      	ldr	r3, [pc, #48]	; (8010a64 <MX_USART3_UART_Init+0x58>)
 8010a32:	220c      	movs	r2, #12
 8010a34:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8010a36:	4b0b      	ldr	r3, [pc, #44]	; (8010a64 <MX_USART3_UART_Init+0x58>)
 8010a38:	2200      	movs	r2, #0
 8010a3a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8010a3c:	4b09      	ldr	r3, [pc, #36]	; (8010a64 <MX_USART3_UART_Init+0x58>)
 8010a3e:	2200      	movs	r2, #0
 8010a40:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8010a42:	4b08      	ldr	r3, [pc, #32]	; (8010a64 <MX_USART3_UART_Init+0x58>)
 8010a44:	2200      	movs	r2, #0
 8010a46:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8010a48:	4b06      	ldr	r3, [pc, #24]	; (8010a64 <MX_USART3_UART_Init+0x58>)
 8010a4a:	2200      	movs	r2, #0
 8010a4c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8010a4e:	4805      	ldr	r0, [pc, #20]	; (8010a64 <MX_USART3_UART_Init+0x58>)
 8010a50:	f003 fda8 	bl	80145a4 <HAL_UART_Init>
 8010a54:	4603      	mov	r3, r0
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	d001      	beq.n	8010a5e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8010a5a:	f000 f941 	bl	8010ce0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8010a5e:	bf00      	nop
 8010a60:	bd80      	pop	{r7, pc}
 8010a62:	bf00      	nop
 8010a64:	2001970c 	.word	0x2001970c
 8010a68:	40004800 	.word	0x40004800

08010a6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8010a6c:	b580      	push	{r7, lr}
 8010a6e:	b08c      	sub	sp, #48	; 0x30
 8010a70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010a72:	f107 031c 	add.w	r3, r7, #28
 8010a76:	2200      	movs	r2, #0
 8010a78:	601a      	str	r2, [r3, #0]
 8010a7a:	605a      	str	r2, [r3, #4]
 8010a7c:	609a      	str	r2, [r3, #8]
 8010a7e:	60da      	str	r2, [r3, #12]
 8010a80:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8010a82:	4a5b      	ldr	r2, [pc, #364]	; (8010bf0 <MX_GPIO_Init+0x184>)
 8010a84:	4b5a      	ldr	r3, [pc, #360]	; (8010bf0 <MX_GPIO_Init+0x184>)
 8010a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010a88:	f043 0304 	orr.w	r3, r3, #4
 8010a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8010a8e:	4b58      	ldr	r3, [pc, #352]	; (8010bf0 <MX_GPIO_Init+0x184>)
 8010a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010a92:	f003 0304 	and.w	r3, r3, #4
 8010a96:	61bb      	str	r3, [r7, #24]
 8010a98:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8010a9a:	4a55      	ldr	r2, [pc, #340]	; (8010bf0 <MX_GPIO_Init+0x184>)
 8010a9c:	4b54      	ldr	r3, [pc, #336]	; (8010bf0 <MX_GPIO_Init+0x184>)
 8010a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010aa0:	f043 0320 	orr.w	r3, r3, #32
 8010aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8010aa6:	4b52      	ldr	r3, [pc, #328]	; (8010bf0 <MX_GPIO_Init+0x184>)
 8010aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010aaa:	f003 0320 	and.w	r3, r3, #32
 8010aae:	617b      	str	r3, [r7, #20]
 8010ab0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8010ab2:	4a4f      	ldr	r2, [pc, #316]	; (8010bf0 <MX_GPIO_Init+0x184>)
 8010ab4:	4b4e      	ldr	r3, [pc, #312]	; (8010bf0 <MX_GPIO_Init+0x184>)
 8010ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010ab8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010abc:	6313      	str	r3, [r2, #48]	; 0x30
 8010abe:	4b4c      	ldr	r3, [pc, #304]	; (8010bf0 <MX_GPIO_Init+0x184>)
 8010ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010ac2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010ac6:	613b      	str	r3, [r7, #16]
 8010ac8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8010aca:	4a49      	ldr	r2, [pc, #292]	; (8010bf0 <MX_GPIO_Init+0x184>)
 8010acc:	4b48      	ldr	r3, [pc, #288]	; (8010bf0 <MX_GPIO_Init+0x184>)
 8010ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010ad0:	f043 0301 	orr.w	r3, r3, #1
 8010ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8010ad6:	4b46      	ldr	r3, [pc, #280]	; (8010bf0 <MX_GPIO_Init+0x184>)
 8010ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010ada:	f003 0301 	and.w	r3, r3, #1
 8010ade:	60fb      	str	r3, [r7, #12]
 8010ae0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8010ae2:	4a43      	ldr	r2, [pc, #268]	; (8010bf0 <MX_GPIO_Init+0x184>)
 8010ae4:	4b42      	ldr	r3, [pc, #264]	; (8010bf0 <MX_GPIO_Init+0x184>)
 8010ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010ae8:	f043 0302 	orr.w	r3, r3, #2
 8010aec:	6313      	str	r3, [r2, #48]	; 0x30
 8010aee:	4b40      	ldr	r3, [pc, #256]	; (8010bf0 <MX_GPIO_Init+0x184>)
 8010af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010af2:	f003 0302 	and.w	r3, r3, #2
 8010af6:	60bb      	str	r3, [r7, #8]
 8010af8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8010afa:	4a3d      	ldr	r2, [pc, #244]	; (8010bf0 <MX_GPIO_Init+0x184>)
 8010afc:	4b3c      	ldr	r3, [pc, #240]	; (8010bf0 <MX_GPIO_Init+0x184>)
 8010afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010b00:	f043 0308 	orr.w	r3, r3, #8
 8010b04:	6313      	str	r3, [r2, #48]	; 0x30
 8010b06:	4b3a      	ldr	r3, [pc, #232]	; (8010bf0 <MX_GPIO_Init+0x184>)
 8010b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010b0a:	f003 0308 	and.w	r3, r3, #8
 8010b0e:	607b      	str	r3, [r7, #4]
 8010b10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8010b12:	4a37      	ldr	r2, [pc, #220]	; (8010bf0 <MX_GPIO_Init+0x184>)
 8010b14:	4b36      	ldr	r3, [pc, #216]	; (8010bf0 <MX_GPIO_Init+0x184>)
 8010b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010b18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8010b1e:	4b34      	ldr	r3, [pc, #208]	; (8010bf0 <MX_GPIO_Init+0x184>)
 8010b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010b26:	603b      	str	r3, [r7, #0]
 8010b28:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8010b2a:	2200      	movs	r2, #0
 8010b2c:	f244 0181 	movw	r1, #16513	; 0x4081
 8010b30:	4830      	ldr	r0, [pc, #192]	; (8010bf4 <MX_GPIO_Init+0x188>)
 8010b32:	f001 fee7 	bl	8012904 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8010b36:	2200      	movs	r2, #0
 8010b38:	2140      	movs	r1, #64	; 0x40
 8010b3a:	482f      	ldr	r0, [pc, #188]	; (8010bf8 <MX_GPIO_Init+0x18c>)
 8010b3c:	f001 fee2 	bl	8012904 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8010b40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010b44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8010b46:	4b2d      	ldr	r3, [pc, #180]	; (8010bfc <MX_GPIO_Init+0x190>)
 8010b48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010b4a:	2300      	movs	r3, #0
 8010b4c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8010b4e:	f107 031c 	add.w	r3, r7, #28
 8010b52:	4619      	mov	r1, r3
 8010b54:	482a      	ldr	r0, [pc, #168]	; (8010c00 <MX_GPIO_Init+0x194>)
 8010b56:	f001 fd2b 	bl	80125b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8010b5a:	f244 0381 	movw	r3, #16513	; 0x4081
 8010b5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8010b60:	2301      	movs	r3, #1
 8010b62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010b64:	2300      	movs	r3, #0
 8010b66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010b68:	2300      	movs	r3, #0
 8010b6a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8010b6c:	f107 031c 	add.w	r3, r7, #28
 8010b70:	4619      	mov	r1, r3
 8010b72:	4820      	ldr	r0, [pc, #128]	; (8010bf4 <MX_GPIO_Init+0x188>)
 8010b74:	f001 fd1c 	bl	80125b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8010b78:	2340      	movs	r3, #64	; 0x40
 8010b7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8010b7c:	2301      	movs	r3, #1
 8010b7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010b80:	2300      	movs	r3, #0
 8010b82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010b84:	2300      	movs	r3, #0
 8010b86:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8010b88:	f107 031c 	add.w	r3, r7, #28
 8010b8c:	4619      	mov	r1, r3
 8010b8e:	481a      	ldr	r0, [pc, #104]	; (8010bf8 <MX_GPIO_Init+0x18c>)
 8010b90:	f001 fd0e 	bl	80125b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8010b94:	2380      	movs	r3, #128	; 0x80
 8010b96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8010b98:	2300      	movs	r3, #0
 8010b9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010b9c:	2300      	movs	r3, #0
 8010b9e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8010ba0:	f107 031c 	add.w	r3, r7, #28
 8010ba4:	4619      	mov	r1, r3
 8010ba6:	4814      	ldr	r0, [pc, #80]	; (8010bf8 <MX_GPIO_Init+0x18c>)
 8010ba8:	f001 fd02 	bl	80125b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8010bac:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8010bb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010bb2:	2302      	movs	r3, #2
 8010bb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010bb6:	2300      	movs	r3, #0
 8010bb8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010bba:	2303      	movs	r3, #3
 8010bbc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8010bbe:	230a      	movs	r3, #10
 8010bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010bc2:	f107 031c 	add.w	r3, r7, #28
 8010bc6:	4619      	mov	r1, r3
 8010bc8:	480e      	ldr	r0, [pc, #56]	; (8010c04 <MX_GPIO_Init+0x198>)
 8010bca:	f001 fcf1 	bl	80125b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8010bce:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010bd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8010bd4:	2300      	movs	r3, #0
 8010bd6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010bd8:	2300      	movs	r3, #0
 8010bda:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8010bdc:	f107 031c 	add.w	r3, r7, #28
 8010be0:	4619      	mov	r1, r3
 8010be2:	4808      	ldr	r0, [pc, #32]	; (8010c04 <MX_GPIO_Init+0x198>)
 8010be4:	f001 fce4 	bl	80125b0 <HAL_GPIO_Init>

}
 8010be8:	bf00      	nop
 8010bea:	3730      	adds	r7, #48	; 0x30
 8010bec:	46bd      	mov	sp, r7
 8010bee:	bd80      	pop	{r7, pc}
 8010bf0:	40023800 	.word	0x40023800
 8010bf4:	40020400 	.word	0x40020400
 8010bf8:	40021800 	.word	0x40021800
 8010bfc:	10110000 	.word	0x10110000
 8010c00:	40020800 	.word	0x40020800
 8010c04:	40020000 	.word	0x40020000

08010c08 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8010c08:	b580      	push	{r7, lr}
 8010c0a:	b084      	sub	sp, #16
 8010c0c:	af00      	add	r7, sp, #0
 8010c0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	int u;
	 UNUSED(argument);
	 //printf("hello world \n\r");
	 // msg_info("\r\n Starting Main Thread...\n");
	  u=net_init(&hnet, NET_IF, (net_if_init));
 8010c10:	4a06      	ldr	r2, [pc, #24]	; (8010c2c <StartDefaultTask+0x24>)
 8010c12:	2102      	movs	r1, #2
 8010c14:	4806      	ldr	r0, [pc, #24]	; (8010c30 <StartDefaultTask+0x28>)
 8010c16:	f7ff fc4b 	bl	80104b0 <net_init>
 8010c1a:	60f8      	str	r0, [r7, #12]
	  printf("u=%d \n\r", u);
 8010c1c:	68f9      	ldr	r1, [r7, #12]
 8010c1e:	4805      	ldr	r0, [pc, #20]	; (8010c34 <StartDefaultTask+0x2c>)
 8010c20:	f015 fb86 	bl	8026330 <iprintf>
	  httpd_init();
 8010c24:	f008 fa60 	bl	80190e8 <httpd_init>
//	  osThreadDef(CLOUDNAME, &cloud_test, osPriorityNormal, 0, configMINIMAL_STACK_SIZE + 0x1000);
//	  osThreadCreate (osThread(CLOUDNAME), NULL);
  /* Infinite loop */
  for(;;)
 8010c28:	e7fe      	b.n	8010c28 <StartDefaultTask+0x20>
 8010c2a:	bf00      	nop
 8010c2c:	08010421 	.word	0x08010421
 8010c30:	200198bc 	.word	0x200198bc
 8010c34:	08027808 	.word	0x08027808

08010c38 <MPU_Config>:
}

/* MPU Configuration */

void MPU_Config(void)
{
 8010c38:	b580      	push	{r7, lr}
 8010c3a:	b084      	sub	sp, #16
 8010c3c:	af00      	add	r7, sp, #0

	/* Disables the MPU */
	MPU_Region_InitTypeDef MPU_InitStruct;
	/* Disable the MPU */
	HAL_MPU_Disable();
 8010c3e:	f000 fc4f 	bl	80114e0 <HAL_MPU_Disable>
	/* Configure the MPU as Normal Non Cacheable for Ethernet Buffers in the SRAM2 */
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8010c42:	2301      	movs	r3, #1
 8010c44:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.BaseAddress = 0x2007C000;
 8010c46:	4b1c      	ldr	r3, [pc, #112]	; (8010cb8 <MPU_Config+0x80>)
 8010c48:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 8010c4a:	230d      	movs	r3, #13
 8010c4c:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8010c4e:	2303      	movs	r3, #3
 8010c50:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8010c52:	2300      	movs	r3, #0
 8010c54:	73fb      	strb	r3, [r7, #15]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8010c56:	2300      	movs	r3, #0
 8010c58:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8010c5a:	2301      	movs	r3, #1
 8010c5c:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8010c5e:	2300      	movs	r3, #0
 8010c60:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8010c62:	2301      	movs	r3, #1
 8010c64:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.SubRegionDisable = 0x00;
 8010c66:	2300      	movs	r3, #0
 8010c68:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8010c6a:	2300      	movs	r3, #0
 8010c6c:	733b      	strb	r3, [r7, #12]
	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8010c6e:	463b      	mov	r3, r7
 8010c70:	4618      	mov	r0, r3
 8010c72:	f000 fc69 	bl	8011548 <HAL_MPU_ConfigRegion>
	/* Configure the MPU as Device for Ethernet Descriptors in the SRAM2 */
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8010c76:	2301      	movs	r3, #1
 8010c78:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.BaseAddress = 0x2007C000;
 8010c7a:	4b0f      	ldr	r3, [pc, #60]	; (8010cb8 <MPU_Config+0x80>)
 8010c7c:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 8010c7e:	2307      	movs	r3, #7
 8010c80:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8010c82:	2303      	movs	r3, #3
 8010c84:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8010c86:	2301      	movs	r3, #1
 8010c88:	73fb      	strb	r3, [r7, #15]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8010c8a:	2300      	movs	r3, #0
 8010c8c:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8010c8e:	2301      	movs	r3, #1
 8010c90:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8010c92:	2301      	movs	r3, #1
 8010c94:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8010c96:	2300      	movs	r3, #0
 8010c98:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.SubRegionDisable = 0x00;
 8010c9a:	2300      	movs	r3, #0
 8010c9c:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8010c9e:	2300      	movs	r3, #0
 8010ca0:	733b      	strb	r3, [r7, #12]
	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8010ca2:	463b      	mov	r3, r7
 8010ca4:	4618      	mov	r0, r3
 8010ca6:	f000 fc4f 	bl	8011548 <HAL_MPU_ConfigRegion>
				  /* Enable the MPU */
	HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8010caa:	2004      	movs	r0, #4
 8010cac:	f000 fc2e 	bl	801150c <HAL_MPU_Enable>

}
 8010cb0:	bf00      	nop
 8010cb2:	3710      	adds	r7, #16
 8010cb4:	46bd      	mov	sp, r7
 8010cb6:	bd80      	pop	{r7, pc}
 8010cb8:	2007c000 	.word	0x2007c000

08010cbc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010cbc:	b580      	push	{r7, lr}
 8010cbe:	b082      	sub	sp, #8
 8010cc0:	af00      	add	r7, sp, #0
 8010cc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	681b      	ldr	r3, [r3, #0]
 8010cc8:	4a04      	ldr	r2, [pc, #16]	; (8010cdc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8010cca:	4293      	cmp	r3, r2
 8010ccc:	d101      	bne.n	8010cd2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8010cce:	f000 fae5 	bl	801129c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8010cd2:	bf00      	nop
 8010cd4:	3708      	adds	r7, #8
 8010cd6:	46bd      	mov	sp, r7
 8010cd8:	bd80      	pop	{r7, pc}
 8010cda:	bf00      	nop
 8010cdc:	40000800 	.word	0x40000800

08010ce0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8010ce0:	b480      	push	{r7}
 8010ce2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8010ce4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8010ce6:	e7fe      	b.n	8010ce6 <Error_Handler+0x6>

08010ce8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8010ce8:	b580      	push	{r7, lr}
 8010cea:	b082      	sub	sp, #8
 8010cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8010cee:	4a11      	ldr	r2, [pc, #68]	; (8010d34 <HAL_MspInit+0x4c>)
 8010cf0:	4b10      	ldr	r3, [pc, #64]	; (8010d34 <HAL_MspInit+0x4c>)
 8010cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010cf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010cf8:	6413      	str	r3, [r2, #64]	; 0x40
 8010cfa:	4b0e      	ldr	r3, [pc, #56]	; (8010d34 <HAL_MspInit+0x4c>)
 8010cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010d02:	607b      	str	r3, [r7, #4]
 8010d04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010d06:	4a0b      	ldr	r2, [pc, #44]	; (8010d34 <HAL_MspInit+0x4c>)
 8010d08:	4b0a      	ldr	r3, [pc, #40]	; (8010d34 <HAL_MspInit+0x4c>)
 8010d0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010d0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010d10:	6453      	str	r3, [r2, #68]	; 0x44
 8010d12:	4b08      	ldr	r3, [pc, #32]	; (8010d34 <HAL_MspInit+0x4c>)
 8010d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010d16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010d1a:	603b      	str	r3, [r7, #0]
 8010d1c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8010d1e:	2200      	movs	r2, #0
 8010d20:	210f      	movs	r1, #15
 8010d22:	f06f 0001 	mvn.w	r0, #1
 8010d26:	f000 fbb1 	bl	801148c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8010d2a:	bf00      	nop
 8010d2c:	3708      	adds	r7, #8
 8010d2e:	46bd      	mov	sp, r7
 8010d30:	bd80      	pop	{r7, pc}
 8010d32:	bf00      	nop
 8010d34:	40023800 	.word	0x40023800

08010d38 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8010d38:	b580      	push	{r7, lr}
 8010d3a:	b08c      	sub	sp, #48	; 0x30
 8010d3c:	af00      	add	r7, sp, #0
 8010d3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010d40:	f107 031c 	add.w	r3, r7, #28
 8010d44:	2200      	movs	r2, #0
 8010d46:	601a      	str	r2, [r3, #0]
 8010d48:	605a      	str	r2, [r3, #4]
 8010d4a:	609a      	str	r2, [r3, #8]
 8010d4c:	60da      	str	r2, [r3, #12]
 8010d4e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	681b      	ldr	r3, [r3, #0]
 8010d54:	4a2e      	ldr	r2, [pc, #184]	; (8010e10 <HAL_I2C_MspInit+0xd8>)
 8010d56:	4293      	cmp	r3, r2
 8010d58:	d129      	bne.n	8010dae <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8010d5a:	4a2e      	ldr	r2, [pc, #184]	; (8010e14 <HAL_I2C_MspInit+0xdc>)
 8010d5c:	4b2d      	ldr	r3, [pc, #180]	; (8010e14 <HAL_I2C_MspInit+0xdc>)
 8010d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010d60:	f043 0302 	orr.w	r3, r3, #2
 8010d64:	6313      	str	r3, [r2, #48]	; 0x30
 8010d66:	4b2b      	ldr	r3, [pc, #172]	; (8010e14 <HAL_I2C_MspInit+0xdc>)
 8010d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010d6a:	f003 0302 	and.w	r3, r3, #2
 8010d6e:	61bb      	str	r3, [r7, #24]
 8010d70:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8010d72:	f44f 7310 	mov.w	r3, #576	; 0x240
 8010d76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8010d78:	2312      	movs	r3, #18
 8010d7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8010d7c:	2301      	movs	r3, #1
 8010d7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010d80:	2303      	movs	r3, #3
 8010d82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8010d84:	2304      	movs	r3, #4
 8010d86:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8010d88:	f107 031c 	add.w	r3, r7, #28
 8010d8c:	4619      	mov	r1, r3
 8010d8e:	4822      	ldr	r0, [pc, #136]	; (8010e18 <HAL_I2C_MspInit+0xe0>)
 8010d90:	f001 fc0e 	bl	80125b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8010d94:	4a1f      	ldr	r2, [pc, #124]	; (8010e14 <HAL_I2C_MspInit+0xdc>)
 8010d96:	4b1f      	ldr	r3, [pc, #124]	; (8010e14 <HAL_I2C_MspInit+0xdc>)
 8010d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d9a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8010d9e:	6413      	str	r3, [r2, #64]	; 0x40
 8010da0:	4b1c      	ldr	r3, [pc, #112]	; (8010e14 <HAL_I2C_MspInit+0xdc>)
 8010da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010da4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8010da8:	617b      	str	r3, [r7, #20]
 8010daa:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8010dac:	e02c      	b.n	8010e08 <HAL_I2C_MspInit+0xd0>
  else if(hi2c->Instance==I2C2)
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	681b      	ldr	r3, [r3, #0]
 8010db2:	4a1a      	ldr	r2, [pc, #104]	; (8010e1c <HAL_I2C_MspInit+0xe4>)
 8010db4:	4293      	cmp	r3, r2
 8010db6:	d127      	bne.n	8010e08 <HAL_I2C_MspInit+0xd0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8010db8:	4a16      	ldr	r2, [pc, #88]	; (8010e14 <HAL_I2C_MspInit+0xdc>)
 8010dba:	4b16      	ldr	r3, [pc, #88]	; (8010e14 <HAL_I2C_MspInit+0xdc>)
 8010dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010dbe:	f043 0320 	orr.w	r3, r3, #32
 8010dc2:	6313      	str	r3, [r2, #48]	; 0x30
 8010dc4:	4b13      	ldr	r3, [pc, #76]	; (8010e14 <HAL_I2C_MspInit+0xdc>)
 8010dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010dc8:	f003 0320 	and.w	r3, r3, #32
 8010dcc:	613b      	str	r3, [r7, #16]
 8010dce:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8010dd0:	2303      	movs	r3, #3
 8010dd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8010dd4:	2312      	movs	r3, #18
 8010dd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8010dd8:	2301      	movs	r3, #1
 8010dda:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010ddc:	2303      	movs	r3, #3
 8010dde:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8010de0:	2304      	movs	r3, #4
 8010de2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8010de4:	f107 031c 	add.w	r3, r7, #28
 8010de8:	4619      	mov	r1, r3
 8010dea:	480d      	ldr	r0, [pc, #52]	; (8010e20 <HAL_I2C_MspInit+0xe8>)
 8010dec:	f001 fbe0 	bl	80125b0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8010df0:	4a08      	ldr	r2, [pc, #32]	; (8010e14 <HAL_I2C_MspInit+0xdc>)
 8010df2:	4b08      	ldr	r3, [pc, #32]	; (8010e14 <HAL_I2C_MspInit+0xdc>)
 8010df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010df6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8010dfa:	6413      	str	r3, [r2, #64]	; 0x40
 8010dfc:	4b05      	ldr	r3, [pc, #20]	; (8010e14 <HAL_I2C_MspInit+0xdc>)
 8010dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010e04:	60fb      	str	r3, [r7, #12]
 8010e06:	68fb      	ldr	r3, [r7, #12]
}
 8010e08:	bf00      	nop
 8010e0a:	3730      	adds	r7, #48	; 0x30
 8010e0c:	46bd      	mov	sp, r7
 8010e0e:	bd80      	pop	{r7, pc}
 8010e10:	40005400 	.word	0x40005400
 8010e14:	40023800 	.word	0x40023800
 8010e18:	40020400 	.word	0x40020400
 8010e1c:	40005800 	.word	0x40005800
 8010e20:	40021400 	.word	0x40021400

08010e24 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8010e24:	b480      	push	{r7}
 8010e26:	b085      	sub	sp, #20
 8010e28:	af00      	add	r7, sp, #0
 8010e2a:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	681b      	ldr	r3, [r3, #0]
 8010e30:	4a0a      	ldr	r2, [pc, #40]	; (8010e5c <HAL_RNG_MspInit+0x38>)
 8010e32:	4293      	cmp	r3, r2
 8010e34:	d10b      	bne.n	8010e4e <HAL_RNG_MspInit+0x2a>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8010e36:	4a0a      	ldr	r2, [pc, #40]	; (8010e60 <HAL_RNG_MspInit+0x3c>)
 8010e38:	4b09      	ldr	r3, [pc, #36]	; (8010e60 <HAL_RNG_MspInit+0x3c>)
 8010e3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010e40:	6353      	str	r3, [r2, #52]	; 0x34
 8010e42:	4b07      	ldr	r3, [pc, #28]	; (8010e60 <HAL_RNG_MspInit+0x3c>)
 8010e44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010e4a:	60fb      	str	r3, [r7, #12]
 8010e4c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8010e4e:	bf00      	nop
 8010e50:	3714      	adds	r7, #20
 8010e52:	46bd      	mov	sp, r7
 8010e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e58:	4770      	bx	lr
 8010e5a:	bf00      	nop
 8010e5c:	50060800 	.word	0x50060800
 8010e60:	40023800 	.word	0x40023800

08010e64 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8010e64:	b580      	push	{r7, lr}
 8010e66:	b08a      	sub	sp, #40	; 0x28
 8010e68:	af00      	add	r7, sp, #0
 8010e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010e6c:	f107 0314 	add.w	r3, r7, #20
 8010e70:	2200      	movs	r2, #0
 8010e72:	601a      	str	r2, [r3, #0]
 8010e74:	605a      	str	r2, [r3, #4]
 8010e76:	609a      	str	r2, [r3, #8]
 8010e78:	60da      	str	r2, [r3, #12]
 8010e7a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	681b      	ldr	r3, [r3, #0]
 8010e80:	4a25      	ldr	r2, [pc, #148]	; (8010f18 <HAL_SPI_MspInit+0xb4>)
 8010e82:	4293      	cmp	r3, r2
 8010e84:	d143      	bne.n	8010f0e <HAL_SPI_MspInit+0xaa>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8010e86:	4a25      	ldr	r2, [pc, #148]	; (8010f1c <HAL_SPI_MspInit+0xb8>)
 8010e88:	4b24      	ldr	r3, [pc, #144]	; (8010f1c <HAL_SPI_MspInit+0xb8>)
 8010e8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010e8c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8010e90:	6453      	str	r3, [r2, #68]	; 0x44
 8010e92:	4b22      	ldr	r3, [pc, #136]	; (8010f1c <HAL_SPI_MspInit+0xb8>)
 8010e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010e96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8010e9a:	613b      	str	r3, [r7, #16]
 8010e9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010e9e:	4a1f      	ldr	r2, [pc, #124]	; (8010f1c <HAL_SPI_MspInit+0xb8>)
 8010ea0:	4b1e      	ldr	r3, [pc, #120]	; (8010f1c <HAL_SPI_MspInit+0xb8>)
 8010ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010ea4:	f043 0301 	orr.w	r3, r3, #1
 8010ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8010eaa:	4b1c      	ldr	r3, [pc, #112]	; (8010f1c <HAL_SPI_MspInit+0xb8>)
 8010eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010eae:	f003 0301 	and.w	r3, r3, #1
 8010eb2:	60fb      	str	r3, [r7, #12]
 8010eb4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8010eb6:	4a19      	ldr	r2, [pc, #100]	; (8010f1c <HAL_SPI_MspInit+0xb8>)
 8010eb8:	4b18      	ldr	r3, [pc, #96]	; (8010f1c <HAL_SPI_MspInit+0xb8>)
 8010eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010ebc:	f043 0308 	orr.w	r3, r3, #8
 8010ec0:	6313      	str	r3, [r2, #48]	; 0x30
 8010ec2:	4b16      	ldr	r3, [pc, #88]	; (8010f1c <HAL_SPI_MspInit+0xb8>)
 8010ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010ec6:	f003 0308 	and.w	r3, r3, #8
 8010eca:	60bb      	str	r3, [r7, #8]
 8010ecc:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8010ece:	2370      	movs	r3, #112	; 0x70
 8010ed0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010ed2:	2302      	movs	r3, #2
 8010ed4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010ed6:	2300      	movs	r3, #0
 8010ed8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010eda:	2303      	movs	r3, #3
 8010edc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8010ede:	2305      	movs	r3, #5
 8010ee0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010ee2:	f107 0314 	add.w	r3, r7, #20
 8010ee6:	4619      	mov	r1, r3
 8010ee8:	480d      	ldr	r0, [pc, #52]	; (8010f20 <HAL_SPI_MspInit+0xbc>)
 8010eea:	f001 fb61 	bl	80125b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8010eee:	2380      	movs	r3, #128	; 0x80
 8010ef0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010ef2:	2302      	movs	r3, #2
 8010ef4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010ef6:	2300      	movs	r3, #0
 8010ef8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010efa:	2303      	movs	r3, #3
 8010efc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8010efe:	2305      	movs	r3, #5
 8010f00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8010f02:	f107 0314 	add.w	r3, r7, #20
 8010f06:	4619      	mov	r1, r3
 8010f08:	4806      	ldr	r0, [pc, #24]	; (8010f24 <HAL_SPI_MspInit+0xc0>)
 8010f0a:	f001 fb51 	bl	80125b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8010f0e:	bf00      	nop
 8010f10:	3728      	adds	r7, #40	; 0x28
 8010f12:	46bd      	mov	sp, r7
 8010f14:	bd80      	pop	{r7, pc}
 8010f16:	bf00      	nop
 8010f18:	40013000 	.word	0x40013000
 8010f1c:	40023800 	.word	0x40023800
 8010f20:	40020000 	.word	0x40020000
 8010f24:	40020c00 	.word	0x40020c00

08010f28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8010f28:	b580      	push	{r7, lr}
 8010f2a:	b08a      	sub	sp, #40	; 0x28
 8010f2c:	af00      	add	r7, sp, #0
 8010f2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010f30:	f107 0314 	add.w	r3, r7, #20
 8010f34:	2200      	movs	r2, #0
 8010f36:	601a      	str	r2, [r3, #0]
 8010f38:	605a      	str	r2, [r3, #4]
 8010f3a:	609a      	str	r2, [r3, #8]
 8010f3c:	60da      	str	r2, [r3, #12]
 8010f3e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	681b      	ldr	r3, [r3, #0]
 8010f44:	4a17      	ldr	r2, [pc, #92]	; (8010fa4 <HAL_UART_MspInit+0x7c>)
 8010f46:	4293      	cmp	r3, r2
 8010f48:	d128      	bne.n	8010f9c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8010f4a:	4a17      	ldr	r2, [pc, #92]	; (8010fa8 <HAL_UART_MspInit+0x80>)
 8010f4c:	4b16      	ldr	r3, [pc, #88]	; (8010fa8 <HAL_UART_MspInit+0x80>)
 8010f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8010f54:	6413      	str	r3, [r2, #64]	; 0x40
 8010f56:	4b14      	ldr	r3, [pc, #80]	; (8010fa8 <HAL_UART_MspInit+0x80>)
 8010f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010f5e:	613b      	str	r3, [r7, #16]
 8010f60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8010f62:	4a11      	ldr	r2, [pc, #68]	; (8010fa8 <HAL_UART_MspInit+0x80>)
 8010f64:	4b10      	ldr	r3, [pc, #64]	; (8010fa8 <HAL_UART_MspInit+0x80>)
 8010f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010f68:	f043 0308 	orr.w	r3, r3, #8
 8010f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8010f6e:	4b0e      	ldr	r3, [pc, #56]	; (8010fa8 <HAL_UART_MspInit+0x80>)
 8010f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010f72:	f003 0308 	and.w	r3, r3, #8
 8010f76:	60fb      	str	r3, [r7, #12]
 8010f78:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8010f7a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8010f7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010f80:	2302      	movs	r3, #2
 8010f82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010f84:	2300      	movs	r3, #0
 8010f86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010f88:	2303      	movs	r3, #3
 8010f8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8010f8c:	2307      	movs	r3, #7
 8010f8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8010f90:	f107 0314 	add.w	r3, r7, #20
 8010f94:	4619      	mov	r1, r3
 8010f96:	4805      	ldr	r0, [pc, #20]	; (8010fac <HAL_UART_MspInit+0x84>)
 8010f98:	f001 fb0a 	bl	80125b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8010f9c:	bf00      	nop
 8010f9e:	3728      	adds	r7, #40	; 0x28
 8010fa0:	46bd      	mov	sp, r7
 8010fa2:	bd80      	pop	{r7, pc}
 8010fa4:	40004800 	.word	0x40004800
 8010fa8:	40023800 	.word	0x40023800
 8010fac:	40020c00 	.word	0x40020c00

08010fb0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8010fb0:	b580      	push	{r7, lr}
 8010fb2:	b08c      	sub	sp, #48	; 0x30
 8010fb4:	af00      	add	r7, sp, #0
 8010fb6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8010fb8:	2300      	movs	r3, #0
 8010fba:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8010fbc:	2300      	movs	r3, #0
 8010fbe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8010fc0:	2200      	movs	r2, #0
 8010fc2:	6879      	ldr	r1, [r7, #4]
 8010fc4:	201e      	movs	r0, #30
 8010fc6:	f000 fa61 	bl	801148c <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8010fca:	201e      	movs	r0, #30
 8010fcc:	f000 fa7a 	bl	80114c4 <HAL_NVIC_EnableIRQ>
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8010fd0:	4a1f      	ldr	r2, [pc, #124]	; (8011050 <HAL_InitTick+0xa0>)
 8010fd2:	4b1f      	ldr	r3, [pc, #124]	; (8011050 <HAL_InitTick+0xa0>)
 8010fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010fd6:	f043 0304 	orr.w	r3, r3, #4
 8010fda:	6413      	str	r3, [r2, #64]	; 0x40
 8010fdc:	4b1c      	ldr	r3, [pc, #112]	; (8011050 <HAL_InitTick+0xa0>)
 8010fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010fe0:	f003 0304 	and.w	r3, r3, #4
 8010fe4:	60fb      	str	r3, [r7, #12]
 8010fe6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8010fe8:	f107 0210 	add.w	r2, r7, #16
 8010fec:	f107 0314 	add.w	r3, r7, #20
 8010ff0:	4611      	mov	r1, r2
 8010ff2:	4618      	mov	r0, r3
 8010ff4:	f002 facc 	bl	8013590 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8010ff8:	f002 faa2 	bl	8013540 <HAL_RCC_GetPCLK1Freq>
 8010ffc:	4603      	mov	r3, r0
 8010ffe:	005b      	lsls	r3, r3, #1
 8011000:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8011002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011004:	4a13      	ldr	r2, [pc, #76]	; (8011054 <HAL_InitTick+0xa4>)
 8011006:	fba2 2303 	umull	r2, r3, r2, r3
 801100a:	0c9b      	lsrs	r3, r3, #18
 801100c:	3b01      	subs	r3, #1
 801100e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8011010:	4b11      	ldr	r3, [pc, #68]	; (8011058 <HAL_InitTick+0xa8>)
 8011012:	4a12      	ldr	r2, [pc, #72]	; (801105c <HAL_InitTick+0xac>)
 8011014:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8011016:	4b10      	ldr	r3, [pc, #64]	; (8011058 <HAL_InitTick+0xa8>)
 8011018:	f240 32e7 	movw	r2, #999	; 0x3e7
 801101c:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 801101e:	4a0e      	ldr	r2, [pc, #56]	; (8011058 <HAL_InitTick+0xa8>)
 8011020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011022:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8011024:	4b0c      	ldr	r3, [pc, #48]	; (8011058 <HAL_InitTick+0xa8>)
 8011026:	2200      	movs	r2, #0
 8011028:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 801102a:	4b0b      	ldr	r3, [pc, #44]	; (8011058 <HAL_InitTick+0xa8>)
 801102c:	2200      	movs	r2, #0
 801102e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8011030:	4809      	ldr	r0, [pc, #36]	; (8011058 <HAL_InitTick+0xa8>)
 8011032:	f002 ffd8 	bl	8013fe6 <HAL_TIM_Base_Init>
 8011036:	4603      	mov	r3, r0
 8011038:	2b00      	cmp	r3, #0
 801103a:	d104      	bne.n	8011046 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 801103c:	4806      	ldr	r0, [pc, #24]	; (8011058 <HAL_InitTick+0xa8>)
 801103e:	f003 f833 	bl	80140a8 <HAL_TIM_Base_Start_IT>
 8011042:	4603      	mov	r3, r0
 8011044:	e000      	b.n	8011048 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8011046:	2301      	movs	r3, #1
}
 8011048:	4618      	mov	r0, r3
 801104a:	3730      	adds	r7, #48	; 0x30
 801104c:	46bd      	mov	sp, r7
 801104e:	bd80      	pop	{r7, pc}
 8011050:	40023800 	.word	0x40023800
 8011054:	431bde83 	.word	0x431bde83
 8011058:	200198c0 	.word	0x200198c0
 801105c:	40000800 	.word	0x40000800

08011060 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8011060:	b480      	push	{r7}
 8011062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8011064:	e7fe      	b.n	8011064 <NMI_Handler+0x4>
	...

08011068 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8011068:	b5b0      	push	{r4, r5, r7, lr}
 801106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	   static char msg[80];
	   sprintf(msg,"In Hard Fault Handler\n");
 801106c:	4a16      	ldr	r2, [pc, #88]	; (80110c8 <HardFault_Handler+0x60>)
 801106e:	4b17      	ldr	r3, [pc, #92]	; (80110cc <HardFault_Handler+0x64>)
 8011070:	4614      	mov	r4, r2
 8011072:	461d      	mov	r5, r3
 8011074:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011076:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011078:	e895 0003 	ldmia.w	r5, {r0, r1}
 801107c:	6020      	str	r0, [r4, #0]
 801107e:	3404      	adds	r4, #4
 8011080:	8021      	strh	r1, [r4, #0]
 8011082:	3402      	adds	r4, #2
 8011084:	0c0b      	lsrs	r3, r1, #16
 8011086:	7023      	strb	r3, [r4, #0]
	   HAL_UART_Transmit(&huart3, (uint8_t *)&msg, strlen(msg), 0xFFFF);
 8011088:	480f      	ldr	r0, [pc, #60]	; (80110c8 <HardFault_Handler+0x60>)
 801108a:	f7fe ffe3 	bl	8010054 <strlen>
 801108e:	4603      	mov	r3, r0
 8011090:	b29a      	uxth	r2, r3
 8011092:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011096:	490c      	ldr	r1, [pc, #48]	; (80110c8 <HardFault_Handler+0x60>)
 8011098:	480d      	ldr	r0, [pc, #52]	; (80110d0 <HardFault_Handler+0x68>)
 801109a:	f003 fad1 	bl	8014640 <HAL_UART_Transmit>
	   sprintf(msg, "SCB->HFSR = 0x%08x\n", SCB->HFSR);
 801109e:	4b0d      	ldr	r3, [pc, #52]	; (80110d4 <HardFault_Handler+0x6c>)
 80110a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80110a2:	461a      	mov	r2, r3
 80110a4:	490c      	ldr	r1, [pc, #48]	; (80110d8 <HardFault_Handler+0x70>)
 80110a6:	4808      	ldr	r0, [pc, #32]	; (80110c8 <HardFault_Handler+0x60>)
 80110a8:	f015 fa08 	bl	80264bc <siprintf>
	   HAL_UART_Transmit(&huart3, (uint8_t *)&msg, strlen(msg), 0xFFFF);
 80110ac:	4806      	ldr	r0, [pc, #24]	; (80110c8 <HardFault_Handler+0x60>)
 80110ae:	f7fe ffd1 	bl	8010054 <strlen>
 80110b2:	4603      	mov	r3, r0
 80110b4:	b29a      	uxth	r2, r3
 80110b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80110ba:	4903      	ldr	r1, [pc, #12]	; (80110c8 <HardFault_Handler+0x60>)
 80110bc:	4804      	ldr	r0, [pc, #16]	; (80110d0 <HardFault_Handler+0x68>)
 80110be:	f003 fabf 	bl	8014640 <HAL_UART_Transmit>
	   __ASM volatile("BKPT #01");
 80110c2:	be01      	bkpt	0x0001
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80110c4:	e7fe      	b.n	80110c4 <HardFault_Handler+0x5c>
 80110c6:	bf00      	nop
 80110c8:	200002f4 	.word	0x200002f4
 80110cc:	08027810 	.word	0x08027810
 80110d0:	2001970c 	.word	0x2001970c
 80110d4:	e000ed00 	.word	0xe000ed00
 80110d8:	08027828 	.word	0x08027828

080110dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80110dc:	b480      	push	{r7}
 80110de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80110e0:	e7fe      	b.n	80110e0 <MemManage_Handler+0x4>

080110e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80110e2:	b480      	push	{r7}
 80110e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80110e6:	e7fe      	b.n	80110e6 <BusFault_Handler+0x4>

080110e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80110e8:	b480      	push	{r7}
 80110ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80110ec:	e7fe      	b.n	80110ec <UsageFault_Handler+0x4>

080110ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80110ee:	b480      	push	{r7}
 80110f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80110f2:	bf00      	nop
 80110f4:	46bd      	mov	sp, r7
 80110f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110fa:	4770      	bx	lr

080110fc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80110fc:	b580      	push	{r7, lr}
 80110fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8011100:	4802      	ldr	r0, [pc, #8]	; (801110c <TIM4_IRQHandler+0x10>)
 8011102:	f003 f849 	bl	8014198 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8011106:	bf00      	nop
 8011108:	bd80      	pop	{r7, pc}
 801110a:	bf00      	nop
 801110c:	200198c0 	.word	0x200198c0

08011110 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8011110:	b580      	push	{r7, lr}
 8011112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8011114:	4802      	ldr	r0, [pc, #8]	; (8011120 <ETH_IRQHandler+0x10>)
 8011116:	f000 fe3f 	bl	8011d98 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 801111a:	bf00      	nop
 801111c:	bd80      	pop	{r7, pc}
 801111e:	bf00      	nop
 8011120:	2001b1e0 	.word	0x2001b1e0

08011124 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8011124:	b590      	push	{r4, r7, lr}
 8011126:	b087      	sub	sp, #28
 8011128:	af00      	add	r7, sp, #0
 801112a:	60f8      	str	r0, [r7, #12]
 801112c:	60b9      	str	r1, [r7, #8]
 801112e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8011130:	2300      	movs	r3, #0
 8011132:	617b      	str	r3, [r7, #20]
 8011134:	e00a      	b.n	801114c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8011136:	68bc      	ldr	r4, [r7, #8]
 8011138:	1c63      	adds	r3, r4, #1
 801113a:	60bb      	str	r3, [r7, #8]
 801113c:	f7ff fab0 	bl	80106a0 <__io_getchar>
 8011140:	4603      	mov	r3, r0
 8011142:	b2db      	uxtb	r3, r3
 8011144:	7023      	strb	r3, [r4, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8011146:	697b      	ldr	r3, [r7, #20]
 8011148:	3301      	adds	r3, #1
 801114a:	617b      	str	r3, [r7, #20]
 801114c:	697a      	ldr	r2, [r7, #20]
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	429a      	cmp	r2, r3
 8011152:	dbf0      	blt.n	8011136 <_read+0x12>
	}

return len;
 8011154:	687b      	ldr	r3, [r7, #4]
}
 8011156:	4618      	mov	r0, r3
 8011158:	371c      	adds	r7, #28
 801115a:	46bd      	mov	sp, r7
 801115c:	bd90      	pop	{r4, r7, pc}

0801115e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 801115e:	b580      	push	{r7, lr}
 8011160:	b086      	sub	sp, #24
 8011162:	af00      	add	r7, sp, #0
 8011164:	60f8      	str	r0, [r7, #12]
 8011166:	60b9      	str	r1, [r7, #8]
 8011168:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 801116a:	2300      	movs	r3, #0
 801116c:	617b      	str	r3, [r7, #20]
 801116e:	e009      	b.n	8011184 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8011170:	68bb      	ldr	r3, [r7, #8]
 8011172:	1c5a      	adds	r2, r3, #1
 8011174:	60ba      	str	r2, [r7, #8]
 8011176:	781b      	ldrb	r3, [r3, #0]
 8011178:	4618      	mov	r0, r3
 801117a:	f7ff fa7b 	bl	8010674 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 801117e:	697b      	ldr	r3, [r7, #20]
 8011180:	3301      	adds	r3, #1
 8011182:	617b      	str	r3, [r7, #20]
 8011184:	697a      	ldr	r2, [r7, #20]
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	429a      	cmp	r2, r3
 801118a:	dbf1      	blt.n	8011170 <_write+0x12>
	}
	return len;
 801118c:	687b      	ldr	r3, [r7, #4]
}
 801118e:	4618      	mov	r0, r3
 8011190:	3718      	adds	r7, #24
 8011192:	46bd      	mov	sp, r7
 8011194:	bd80      	pop	{r7, pc}
	...

08011198 <_sbrk>:

caddr_t _sbrk(int incr)
{
 8011198:	b480      	push	{r7}
 801119a:	b085      	sub	sp, #20
 801119c:	af00      	add	r7, sp, #0
 801119e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80111a0:	4b11      	ldr	r3, [pc, #68]	; (80111e8 <_sbrk+0x50>)
 80111a2:	681b      	ldr	r3, [r3, #0]
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	d102      	bne.n	80111ae <_sbrk+0x16>
		heap_end = &end;
 80111a8:	4b0f      	ldr	r3, [pc, #60]	; (80111e8 <_sbrk+0x50>)
 80111aa:	4a10      	ldr	r2, [pc, #64]	; (80111ec <_sbrk+0x54>)
 80111ac:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80111ae:	4b0e      	ldr	r3, [pc, #56]	; (80111e8 <_sbrk+0x50>)
 80111b0:	681b      	ldr	r3, [r3, #0]
 80111b2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80111b4:	4b0c      	ldr	r3, [pc, #48]	; (80111e8 <_sbrk+0x50>)
 80111b6:	681a      	ldr	r2, [r3, #0]
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	4413      	add	r3, r2
 80111bc:	466a      	mov	r2, sp
 80111be:	4293      	cmp	r3, r2
 80111c0:	d905      	bls.n	80111ce <_sbrk+0x36>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80111c2:	4b0b      	ldr	r3, [pc, #44]	; (80111f0 <_sbrk+0x58>)
 80111c4:	220c      	movs	r2, #12
 80111c6:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80111c8:	f04f 33ff 	mov.w	r3, #4294967295
 80111cc:	e006      	b.n	80111dc <_sbrk+0x44>
	}

	heap_end += incr;
 80111ce:	4b06      	ldr	r3, [pc, #24]	; (80111e8 <_sbrk+0x50>)
 80111d0:	681a      	ldr	r2, [r3, #0]
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	4413      	add	r3, r2
 80111d6:	4a04      	ldr	r2, [pc, #16]	; (80111e8 <_sbrk+0x50>)
 80111d8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80111da:	68fb      	ldr	r3, [r7, #12]
}
 80111dc:	4618      	mov	r0, r3
 80111de:	3714      	adds	r7, #20
 80111e0:	46bd      	mov	sp, r7
 80111e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111e6:	4770      	bx	lr
 80111e8:	20000344 	.word	0x20000344
 80111ec:	20022ad8 	.word	0x20022ad8
 80111f0:	20022ad0 	.word	0x20022ad0

080111f4 <_close>:

int _close(int file)
{
 80111f4:	b480      	push	{r7}
 80111f6:	b083      	sub	sp, #12
 80111f8:	af00      	add	r7, sp, #0
 80111fa:	6078      	str	r0, [r7, #4]
	return -1;
 80111fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011200:	4618      	mov	r0, r3
 8011202:	370c      	adds	r7, #12
 8011204:	46bd      	mov	sp, r7
 8011206:	f85d 7b04 	ldr.w	r7, [sp], #4
 801120a:	4770      	bx	lr

0801120c <_fstat>:


int _fstat(int file, struct stat *st)
{
 801120c:	b480      	push	{r7}
 801120e:	b083      	sub	sp, #12
 8011210:	af00      	add	r7, sp, #0
 8011212:	6078      	str	r0, [r7, #4]
 8011214:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8011216:	683b      	ldr	r3, [r7, #0]
 8011218:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801121c:	605a      	str	r2, [r3, #4]
	return 0;
 801121e:	2300      	movs	r3, #0
}
 8011220:	4618      	mov	r0, r3
 8011222:	370c      	adds	r7, #12
 8011224:	46bd      	mov	sp, r7
 8011226:	f85d 7b04 	ldr.w	r7, [sp], #4
 801122a:	4770      	bx	lr

0801122c <_isatty>:

int _isatty(int file)
{
 801122c:	b480      	push	{r7}
 801122e:	b083      	sub	sp, #12
 8011230:	af00      	add	r7, sp, #0
 8011232:	6078      	str	r0, [r7, #4]
	return 1;
 8011234:	2301      	movs	r3, #1
}
 8011236:	4618      	mov	r0, r3
 8011238:	370c      	adds	r7, #12
 801123a:	46bd      	mov	sp, r7
 801123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011240:	4770      	bx	lr

08011242 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8011242:	b480      	push	{r7}
 8011244:	b085      	sub	sp, #20
 8011246:	af00      	add	r7, sp, #0
 8011248:	60f8      	str	r0, [r7, #12]
 801124a:	60b9      	str	r1, [r7, #8]
 801124c:	607a      	str	r2, [r7, #4]
	return 0;
 801124e:	2300      	movs	r3, #0
}
 8011250:	4618      	mov	r0, r3
 8011252:	3714      	adds	r7, #20
 8011254:	46bd      	mov	sp, r7
 8011256:	f85d 7b04 	ldr.w	r7, [sp], #4
 801125a:	4770      	bx	lr

0801125c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 801125c:	b480      	push	{r7}
 801125e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8011260:	4a06      	ldr	r2, [pc, #24]	; (801127c <SystemInit+0x20>)
 8011262:	4b06      	ldr	r3, [pc, #24]	; (801127c <SystemInit+0x20>)
 8011264:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011268:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801126c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8011270:	bf00      	nop
 8011272:	46bd      	mov	sp, r7
 8011274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011278:	4770      	bx	lr
 801127a:	bf00      	nop
 801127c:	e000ed00 	.word	0xe000ed00

08011280 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8011280:	b580      	push	{r7, lr}
 8011282:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8011284:	2003      	movs	r0, #3
 8011286:	f000 f8f6 	bl	8011476 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 801128a:	2000      	movs	r0, #0
 801128c:	f7ff fe90 	bl	8010fb0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8011290:	f7ff fd2a 	bl	8010ce8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8011294:	2300      	movs	r3, #0
}
 8011296:	4618      	mov	r0, r3
 8011298:	bd80      	pop	{r7, pc}
	...

0801129c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 801129c:	b480      	push	{r7}
 801129e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80112a0:	4b06      	ldr	r3, [pc, #24]	; (80112bc <HAL_IncTick+0x20>)
 80112a2:	781b      	ldrb	r3, [r3, #0]
 80112a4:	461a      	mov	r2, r3
 80112a6:	4b06      	ldr	r3, [pc, #24]	; (80112c0 <HAL_IncTick+0x24>)
 80112a8:	681b      	ldr	r3, [r3, #0]
 80112aa:	4413      	add	r3, r2
 80112ac:	4a04      	ldr	r2, [pc, #16]	; (80112c0 <HAL_IncTick+0x24>)
 80112ae:	6013      	str	r3, [r2, #0]
}
 80112b0:	bf00      	nop
 80112b2:	46bd      	mov	sp, r7
 80112b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112b8:	4770      	bx	lr
 80112ba:	bf00      	nop
 80112bc:	20000008 	.word	0x20000008
 80112c0:	2001990c 	.word	0x2001990c

080112c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80112c4:	b480      	push	{r7}
 80112c6:	af00      	add	r7, sp, #0
  return uwTick;
 80112c8:	4b03      	ldr	r3, [pc, #12]	; (80112d8 <HAL_GetTick+0x14>)
 80112ca:	681b      	ldr	r3, [r3, #0]
}
 80112cc:	4618      	mov	r0, r3
 80112ce:	46bd      	mov	sp, r7
 80112d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112d4:	4770      	bx	lr
 80112d6:	bf00      	nop
 80112d8:	2001990c 	.word	0x2001990c

080112dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80112dc:	b580      	push	{r7, lr}
 80112de:	b084      	sub	sp, #16
 80112e0:	af00      	add	r7, sp, #0
 80112e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80112e4:	f7ff ffee 	bl	80112c4 <HAL_GetTick>
 80112e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80112ee:	68fb      	ldr	r3, [r7, #12]
 80112f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80112f4:	d005      	beq.n	8011302 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80112f6:	4b09      	ldr	r3, [pc, #36]	; (801131c <HAL_Delay+0x40>)
 80112f8:	781b      	ldrb	r3, [r3, #0]
 80112fa:	461a      	mov	r2, r3
 80112fc:	68fb      	ldr	r3, [r7, #12]
 80112fe:	4413      	add	r3, r2
 8011300:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8011302:	bf00      	nop
 8011304:	f7ff ffde 	bl	80112c4 <HAL_GetTick>
 8011308:	4602      	mov	r2, r0
 801130a:	68bb      	ldr	r3, [r7, #8]
 801130c:	1ad2      	subs	r2, r2, r3
 801130e:	68fb      	ldr	r3, [r7, #12]
 8011310:	429a      	cmp	r2, r3
 8011312:	d3f7      	bcc.n	8011304 <HAL_Delay+0x28>
  {
  }
}
 8011314:	bf00      	nop
 8011316:	3710      	adds	r7, #16
 8011318:	46bd      	mov	sp, r7
 801131a:	bd80      	pop	{r7, pc}
 801131c:	20000008 	.word	0x20000008

08011320 <__NVIC_SetPriorityGrouping>:
{
 8011320:	b480      	push	{r7}
 8011322:	b085      	sub	sp, #20
 8011324:	af00      	add	r7, sp, #0
 8011326:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	f003 0307 	and.w	r3, r3, #7
 801132e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8011330:	4b0b      	ldr	r3, [pc, #44]	; (8011360 <__NVIC_SetPriorityGrouping+0x40>)
 8011332:	68db      	ldr	r3, [r3, #12]
 8011334:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8011336:	68ba      	ldr	r2, [r7, #8]
 8011338:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 801133c:	4013      	ands	r3, r2
 801133e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8011340:	68fb      	ldr	r3, [r7, #12]
 8011342:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8011344:	68bb      	ldr	r3, [r7, #8]
 8011346:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8011348:	4b06      	ldr	r3, [pc, #24]	; (8011364 <__NVIC_SetPriorityGrouping+0x44>)
 801134a:	4313      	orrs	r3, r2
 801134c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 801134e:	4a04      	ldr	r2, [pc, #16]	; (8011360 <__NVIC_SetPriorityGrouping+0x40>)
 8011350:	68bb      	ldr	r3, [r7, #8]
 8011352:	60d3      	str	r3, [r2, #12]
}
 8011354:	bf00      	nop
 8011356:	3714      	adds	r7, #20
 8011358:	46bd      	mov	sp, r7
 801135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801135e:	4770      	bx	lr
 8011360:	e000ed00 	.word	0xe000ed00
 8011364:	05fa0000 	.word	0x05fa0000

08011368 <__NVIC_GetPriorityGrouping>:
{
 8011368:	b480      	push	{r7}
 801136a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 801136c:	4b04      	ldr	r3, [pc, #16]	; (8011380 <__NVIC_GetPriorityGrouping+0x18>)
 801136e:	68db      	ldr	r3, [r3, #12]
 8011370:	0a1b      	lsrs	r3, r3, #8
 8011372:	f003 0307 	and.w	r3, r3, #7
}
 8011376:	4618      	mov	r0, r3
 8011378:	46bd      	mov	sp, r7
 801137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801137e:	4770      	bx	lr
 8011380:	e000ed00 	.word	0xe000ed00

08011384 <__NVIC_EnableIRQ>:
{
 8011384:	b480      	push	{r7}
 8011386:	b083      	sub	sp, #12
 8011388:	af00      	add	r7, sp, #0
 801138a:	4603      	mov	r3, r0
 801138c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801138e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011392:	2b00      	cmp	r3, #0
 8011394:	db0b      	blt.n	80113ae <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8011396:	4909      	ldr	r1, [pc, #36]	; (80113bc <__NVIC_EnableIRQ+0x38>)
 8011398:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801139c:	095b      	lsrs	r3, r3, #5
 801139e:	79fa      	ldrb	r2, [r7, #7]
 80113a0:	f002 021f 	and.w	r2, r2, #31
 80113a4:	2001      	movs	r0, #1
 80113a6:	fa00 f202 	lsl.w	r2, r0, r2
 80113aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80113ae:	bf00      	nop
 80113b0:	370c      	adds	r7, #12
 80113b2:	46bd      	mov	sp, r7
 80113b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113b8:	4770      	bx	lr
 80113ba:	bf00      	nop
 80113bc:	e000e100 	.word	0xe000e100

080113c0 <__NVIC_SetPriority>:
{
 80113c0:	b480      	push	{r7}
 80113c2:	b083      	sub	sp, #12
 80113c4:	af00      	add	r7, sp, #0
 80113c6:	4603      	mov	r3, r0
 80113c8:	6039      	str	r1, [r7, #0]
 80113ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80113cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	db0a      	blt.n	80113ea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80113d4:	490d      	ldr	r1, [pc, #52]	; (801140c <__NVIC_SetPriority+0x4c>)
 80113d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80113da:	683a      	ldr	r2, [r7, #0]
 80113dc:	b2d2      	uxtb	r2, r2
 80113de:	0112      	lsls	r2, r2, #4
 80113e0:	b2d2      	uxtb	r2, r2
 80113e2:	440b      	add	r3, r1
 80113e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80113e8:	e00a      	b.n	8011400 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80113ea:	4909      	ldr	r1, [pc, #36]	; (8011410 <__NVIC_SetPriority+0x50>)
 80113ec:	79fb      	ldrb	r3, [r7, #7]
 80113ee:	f003 030f 	and.w	r3, r3, #15
 80113f2:	3b04      	subs	r3, #4
 80113f4:	683a      	ldr	r2, [r7, #0]
 80113f6:	b2d2      	uxtb	r2, r2
 80113f8:	0112      	lsls	r2, r2, #4
 80113fa:	b2d2      	uxtb	r2, r2
 80113fc:	440b      	add	r3, r1
 80113fe:	761a      	strb	r2, [r3, #24]
}
 8011400:	bf00      	nop
 8011402:	370c      	adds	r7, #12
 8011404:	46bd      	mov	sp, r7
 8011406:	f85d 7b04 	ldr.w	r7, [sp], #4
 801140a:	4770      	bx	lr
 801140c:	e000e100 	.word	0xe000e100
 8011410:	e000ed00 	.word	0xe000ed00

08011414 <NVIC_EncodePriority>:
{
 8011414:	b480      	push	{r7}
 8011416:	b089      	sub	sp, #36	; 0x24
 8011418:	af00      	add	r7, sp, #0
 801141a:	60f8      	str	r0, [r7, #12]
 801141c:	60b9      	str	r1, [r7, #8]
 801141e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8011420:	68fb      	ldr	r3, [r7, #12]
 8011422:	f003 0307 	and.w	r3, r3, #7
 8011426:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8011428:	69fb      	ldr	r3, [r7, #28]
 801142a:	f1c3 0307 	rsb	r3, r3, #7
 801142e:	2b04      	cmp	r3, #4
 8011430:	bf28      	it	cs
 8011432:	2304      	movcs	r3, #4
 8011434:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8011436:	69fb      	ldr	r3, [r7, #28]
 8011438:	3304      	adds	r3, #4
 801143a:	2b06      	cmp	r3, #6
 801143c:	d902      	bls.n	8011444 <NVIC_EncodePriority+0x30>
 801143e:	69fb      	ldr	r3, [r7, #28]
 8011440:	3b03      	subs	r3, #3
 8011442:	e000      	b.n	8011446 <NVIC_EncodePriority+0x32>
 8011444:	2300      	movs	r3, #0
 8011446:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8011448:	2201      	movs	r2, #1
 801144a:	69bb      	ldr	r3, [r7, #24]
 801144c:	fa02 f303 	lsl.w	r3, r2, r3
 8011450:	1e5a      	subs	r2, r3, #1
 8011452:	68bb      	ldr	r3, [r7, #8]
 8011454:	401a      	ands	r2, r3
 8011456:	697b      	ldr	r3, [r7, #20]
 8011458:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 801145a:	2101      	movs	r1, #1
 801145c:	697b      	ldr	r3, [r7, #20]
 801145e:	fa01 f303 	lsl.w	r3, r1, r3
 8011462:	1e59      	subs	r1, r3, #1
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8011468:	4313      	orrs	r3, r2
}
 801146a:	4618      	mov	r0, r3
 801146c:	3724      	adds	r7, #36	; 0x24
 801146e:	46bd      	mov	sp, r7
 8011470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011474:	4770      	bx	lr

08011476 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8011476:	b580      	push	{r7, lr}
 8011478:	b082      	sub	sp, #8
 801147a:	af00      	add	r7, sp, #0
 801147c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 801147e:	6878      	ldr	r0, [r7, #4]
 8011480:	f7ff ff4e 	bl	8011320 <__NVIC_SetPriorityGrouping>
}
 8011484:	bf00      	nop
 8011486:	3708      	adds	r7, #8
 8011488:	46bd      	mov	sp, r7
 801148a:	bd80      	pop	{r7, pc}

0801148c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 801148c:	b580      	push	{r7, lr}
 801148e:	b086      	sub	sp, #24
 8011490:	af00      	add	r7, sp, #0
 8011492:	4603      	mov	r3, r0
 8011494:	60b9      	str	r1, [r7, #8]
 8011496:	607a      	str	r2, [r7, #4]
 8011498:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 801149a:	2300      	movs	r3, #0
 801149c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 801149e:	f7ff ff63 	bl	8011368 <__NVIC_GetPriorityGrouping>
 80114a2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80114a4:	687a      	ldr	r2, [r7, #4]
 80114a6:	68b9      	ldr	r1, [r7, #8]
 80114a8:	6978      	ldr	r0, [r7, #20]
 80114aa:	f7ff ffb3 	bl	8011414 <NVIC_EncodePriority>
 80114ae:	4602      	mov	r2, r0
 80114b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80114b4:	4611      	mov	r1, r2
 80114b6:	4618      	mov	r0, r3
 80114b8:	f7ff ff82 	bl	80113c0 <__NVIC_SetPriority>
}
 80114bc:	bf00      	nop
 80114be:	3718      	adds	r7, #24
 80114c0:	46bd      	mov	sp, r7
 80114c2:	bd80      	pop	{r7, pc}

080114c4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80114c4:	b580      	push	{r7, lr}
 80114c6:	b082      	sub	sp, #8
 80114c8:	af00      	add	r7, sp, #0
 80114ca:	4603      	mov	r3, r0
 80114cc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80114ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80114d2:	4618      	mov	r0, r3
 80114d4:	f7ff ff56 	bl	8011384 <__NVIC_EnableIRQ>
}
 80114d8:	bf00      	nop
 80114da:	3708      	adds	r7, #8
 80114dc:	46bd      	mov	sp, r7
 80114de:	bd80      	pop	{r7, pc}

080114e0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80114e0:	b480      	push	{r7}
 80114e2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80114e4:	f3bf 8f5f 	dmb	sy
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80114e8:	4a06      	ldr	r2, [pc, #24]	; (8011504 <HAL_MPU_Disable+0x24>)
 80114ea:	4b06      	ldr	r3, [pc, #24]	; (8011504 <HAL_MPU_Disable+0x24>)
 80114ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80114ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80114f2:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80114f4:	4b04      	ldr	r3, [pc, #16]	; (8011508 <HAL_MPU_Disable+0x28>)
 80114f6:	2200      	movs	r2, #0
 80114f8:	605a      	str	r2, [r3, #4]
}
 80114fa:	bf00      	nop
 80114fc:	46bd      	mov	sp, r7
 80114fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011502:	4770      	bx	lr
 8011504:	e000ed00 	.word	0xe000ed00
 8011508:	e000ed90 	.word	0xe000ed90

0801150c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 801150c:	b480      	push	{r7}
 801150e:	b083      	sub	sp, #12
 8011510:	af00      	add	r7, sp, #0
 8011512:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8011514:	4a0a      	ldr	r2, [pc, #40]	; (8011540 <HAL_MPU_Enable+0x34>)
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	f043 0301 	orr.w	r3, r3, #1
 801151c:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 801151e:	4a09      	ldr	r2, [pc, #36]	; (8011544 <HAL_MPU_Enable+0x38>)
 8011520:	4b08      	ldr	r3, [pc, #32]	; (8011544 <HAL_MPU_Enable+0x38>)
 8011522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011524:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011528:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 801152a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 801152e:	f3bf 8f6f 	isb	sy
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8011532:	bf00      	nop
 8011534:	370c      	adds	r7, #12
 8011536:	46bd      	mov	sp, r7
 8011538:	f85d 7b04 	ldr.w	r7, [sp], #4
 801153c:	4770      	bx	lr
 801153e:	bf00      	nop
 8011540:	e000ed90 	.word	0xe000ed90
 8011544:	e000ed00 	.word	0xe000ed00

08011548 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8011548:	b480      	push	{r7}
 801154a:	b083      	sub	sp, #12
 801154c:	af00      	add	r7, sp, #0
 801154e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8011550:	4a1e      	ldr	r2, [pc, #120]	; (80115cc <HAL_MPU_ConfigRegion+0x84>)
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	785b      	ldrb	r3, [r3, #1]
 8011556:	6093      	str	r3, [r2, #8]

  if ((MPU_Init->Enable) != RESET)
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	781b      	ldrb	r3, [r3, #0]
 801155c:	2b00      	cmp	r3, #0
 801155e:	d028      	beq.n	80115b2 <HAL_MPU_ConfigRegion+0x6a>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8011560:	4a1a      	ldr	r2, [pc, #104]	; (80115cc <HAL_MPU_ConfigRegion+0x84>)
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	685b      	ldr	r3, [r3, #4]
 8011566:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8011568:	4918      	ldr	r1, [pc, #96]	; (80115cc <HAL_MPU_ConfigRegion+0x84>)
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	7b1b      	ldrb	r3, [r3, #12]
 801156e:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	7adb      	ldrb	r3, [r3, #11]
 8011574:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8011576:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	7a9b      	ldrb	r3, [r3, #10]
 801157c:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 801157e:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	7b5b      	ldrb	r3, [r3, #13]
 8011584:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8011586:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	7b9b      	ldrb	r3, [r3, #14]
 801158c:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 801158e:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	7bdb      	ldrb	r3, [r3, #15]
 8011594:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8011596:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	7a5b      	ldrb	r3, [r3, #9]
 801159c:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 801159e:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	7a1b      	ldrb	r3, [r3, #8]
 80115a4:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80115a6:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80115a8:	687a      	ldr	r2, [r7, #4]
 80115aa:	7812      	ldrb	r2, [r2, #0]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80115ac:	4313      	orrs	r3, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80115ae:	610b      	str	r3, [r1, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80115b0:	e005      	b.n	80115be <HAL_MPU_ConfigRegion+0x76>
    MPU->RBAR = 0x00;
 80115b2:	4b06      	ldr	r3, [pc, #24]	; (80115cc <HAL_MPU_ConfigRegion+0x84>)
 80115b4:	2200      	movs	r2, #0
 80115b6:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80115b8:	4b04      	ldr	r3, [pc, #16]	; (80115cc <HAL_MPU_ConfigRegion+0x84>)
 80115ba:	2200      	movs	r2, #0
 80115bc:	611a      	str	r2, [r3, #16]
}
 80115be:	bf00      	nop
 80115c0:	370c      	adds	r7, #12
 80115c2:	46bd      	mov	sp, r7
 80115c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115c8:	4770      	bx	lr
 80115ca:	bf00      	nop
 80115cc:	e000ed90 	.word	0xe000ed90

080115d0 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80115d0:	b580      	push	{r7, lr}
 80115d2:	b088      	sub	sp, #32
 80115d4:	af00      	add	r7, sp, #0
 80115d6:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 80115d8:	2300      	movs	r3, #0
 80115da:	61fb      	str	r3, [r7, #28]
 80115dc:	2300      	movs	r3, #0
 80115de:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 80115e0:	4ba9      	ldr	r3, [pc, #676]	; (8011888 <HAL_ETH_Init+0x2b8>)
 80115e2:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 80115e4:	2300      	movs	r3, #0
 80115e6:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80115e8:	2300      	movs	r3, #0
 80115ea:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	2b00      	cmp	r3, #0
 80115f0:	d101      	bne.n	80115f6 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80115f2:	2301      	movs	r3, #1
 80115f4:	e183      	b.n	80118fe <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80115fc:	b2db      	uxtb	r3, r3
 80115fe:	2b00      	cmp	r3, #0
 8011600:	d106      	bne.n	8011610 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	2200      	movs	r2, #0
 8011606:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 801160a:	6878      	ldr	r0, [r7, #4]
 801160c:	f003 fd42 	bl	8015094 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8011610:	4a9e      	ldr	r2, [pc, #632]	; (801188c <HAL_ETH_Init+0x2bc>)
 8011612:	4b9e      	ldr	r3, [pc, #632]	; (801188c <HAL_ETH_Init+0x2bc>)
 8011614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011616:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801161a:	6453      	str	r3, [r2, #68]	; 0x44
 801161c:	4b9b      	ldr	r3, [pc, #620]	; (801188c <HAL_ETH_Init+0x2bc>)
 801161e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011620:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011624:	60bb      	str	r3, [r7, #8]
 8011626:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8011628:	4a99      	ldr	r2, [pc, #612]	; (8011890 <HAL_ETH_Init+0x2c0>)
 801162a:	4b99      	ldr	r3, [pc, #612]	; (8011890 <HAL_ETH_Init+0x2c0>)
 801162c:	685b      	ldr	r3, [r3, #4]
 801162e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8011632:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8011634:	4996      	ldr	r1, [pc, #600]	; (8011890 <HAL_ETH_Init+0x2c0>)
 8011636:	4b96      	ldr	r3, [pc, #600]	; (8011890 <HAL_ETH_Init+0x2c0>)
 8011638:	685a      	ldr	r2, [r3, #4]
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	6a1b      	ldr	r3, [r3, #32]
 801163e:	4313      	orrs	r3, r2
 8011640:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	681b      	ldr	r3, [r3, #0]
 8011646:	687a      	ldr	r2, [r7, #4]
 8011648:	6812      	ldr	r2, [r2, #0]
 801164a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801164e:	6812      	ldr	r2, [r2, #0]
 8011650:	f042 0201 	orr.w	r2, r2, #1
 8011654:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011658:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 801165a:	f7ff fe33 	bl	80112c4 <HAL_GetTick>
 801165e:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8011660:	e011      	b.n	8011686 <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8011662:	f7ff fe2f 	bl	80112c4 <HAL_GetTick>
 8011666:	4602      	mov	r2, r0
 8011668:	697b      	ldr	r3, [r7, #20]
 801166a:	1ad3      	subs	r3, r2, r3
 801166c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8011670:	d909      	bls.n	8011686 <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	2203      	movs	r2, #3
 8011676:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	2200      	movs	r2, #0
 801167e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8011682:	2303      	movs	r3, #3
 8011684:	e13b      	b.n	80118fe <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	681b      	ldr	r3, [r3, #0]
 801168a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801168e:	681b      	ldr	r3, [r3, #0]
 8011690:	f003 0301 	and.w	r3, r3, #1
 8011694:	2b00      	cmp	r3, #0
 8011696:	d1e4      	bne.n	8011662 <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	681b      	ldr	r3, [r3, #0]
 801169c:	691b      	ldr	r3, [r3, #16]
 801169e:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 80116a0:	69fb      	ldr	r3, [r7, #28]
 80116a2:	f023 031c 	bic.w	r3, r3, #28
 80116a6:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80116a8:	f001 ff3e 	bl	8013528 <HAL_RCC_GetHCLKFreq>
 80116ac:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 80116ae:	69bb      	ldr	r3, [r7, #24]
 80116b0:	4a78      	ldr	r2, [pc, #480]	; (8011894 <HAL_ETH_Init+0x2c4>)
 80116b2:	4293      	cmp	r3, r2
 80116b4:	d908      	bls.n	80116c8 <HAL_ETH_Init+0xf8>
 80116b6:	69bb      	ldr	r3, [r7, #24]
 80116b8:	4a77      	ldr	r2, [pc, #476]	; (8011898 <HAL_ETH_Init+0x2c8>)
 80116ba:	4293      	cmp	r3, r2
 80116bc:	d804      	bhi.n	80116c8 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80116be:	69fb      	ldr	r3, [r7, #28]
 80116c0:	f043 0308 	orr.w	r3, r3, #8
 80116c4:	61fb      	str	r3, [r7, #28]
 80116c6:	e027      	b.n	8011718 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 80116c8:	69bb      	ldr	r3, [r7, #24]
 80116ca:	4a73      	ldr	r2, [pc, #460]	; (8011898 <HAL_ETH_Init+0x2c8>)
 80116cc:	4293      	cmp	r3, r2
 80116ce:	d908      	bls.n	80116e2 <HAL_ETH_Init+0x112>
 80116d0:	69bb      	ldr	r3, [r7, #24]
 80116d2:	4a72      	ldr	r2, [pc, #456]	; (801189c <HAL_ETH_Init+0x2cc>)
 80116d4:	4293      	cmp	r3, r2
 80116d6:	d804      	bhi.n	80116e2 <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80116d8:	69fb      	ldr	r3, [r7, #28]
 80116da:	f043 030c 	orr.w	r3, r3, #12
 80116de:	61fb      	str	r3, [r7, #28]
 80116e0:	e01a      	b.n	8011718 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 80116e2:	69bb      	ldr	r3, [r7, #24]
 80116e4:	4a6d      	ldr	r2, [pc, #436]	; (801189c <HAL_ETH_Init+0x2cc>)
 80116e6:	4293      	cmp	r3, r2
 80116e8:	d903      	bls.n	80116f2 <HAL_ETH_Init+0x122>
 80116ea:	69bb      	ldr	r3, [r7, #24]
 80116ec:	4a6c      	ldr	r2, [pc, #432]	; (80118a0 <HAL_ETH_Init+0x2d0>)
 80116ee:	4293      	cmp	r3, r2
 80116f0:	d911      	bls.n	8011716 <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 80116f2:	69bb      	ldr	r3, [r7, #24]
 80116f4:	4a6a      	ldr	r2, [pc, #424]	; (80118a0 <HAL_ETH_Init+0x2d0>)
 80116f6:	4293      	cmp	r3, r2
 80116f8:	d908      	bls.n	801170c <HAL_ETH_Init+0x13c>
 80116fa:	69bb      	ldr	r3, [r7, #24]
 80116fc:	4a69      	ldr	r2, [pc, #420]	; (80118a4 <HAL_ETH_Init+0x2d4>)
 80116fe:	4293      	cmp	r3, r2
 8011700:	d804      	bhi.n	801170c <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8011702:	69fb      	ldr	r3, [r7, #28]
 8011704:	f043 0304 	orr.w	r3, r3, #4
 8011708:	61fb      	str	r3, [r7, #28]
 801170a:	e005      	b.n	8011718 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 801170c:	69fb      	ldr	r3, [r7, #28]
 801170e:	f043 0310 	orr.w	r3, r3, #16
 8011712:	61fb      	str	r3, [r7, #28]
 8011714:	e000      	b.n	8011718 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8011716:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	681b      	ldr	r3, [r3, #0]
 801171c:	69fa      	ldr	r2, [r7, #28]
 801171e:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8011720:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8011724:	2100      	movs	r1, #0
 8011726:	6878      	ldr	r0, [r7, #4]
 8011728:	f000 fc19 	bl	8011f5e <HAL_ETH_WritePHYRegister>
 801172c:	4603      	mov	r3, r0
 801172e:	2b00      	cmp	r3, #0
 8011730:	d00b      	beq.n	801174a <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8011732:	2301      	movs	r3, #1
 8011734:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8011736:	6939      	ldr	r1, [r7, #16]
 8011738:	6878      	ldr	r0, [r7, #4]
 801173a:	f000 fca5 	bl	8012088 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	2201      	movs	r2, #1
 8011742:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8011746:	2301      	movs	r3, #1
 8011748:	e0d9      	b.n	80118fe <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 801174a:	20ff      	movs	r0, #255	; 0xff
 801174c:	f7ff fdc6 	bl	80112dc <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	685b      	ldr	r3, [r3, #4]
 8011754:	2b00      	cmp	r3, #0
 8011756:	f000 80a7 	beq.w	80118a8 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 801175a:	f7ff fdb3 	bl	80112c4 <HAL_GetTick>
 801175e:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8011760:	f107 030c 	add.w	r3, r7, #12
 8011764:	461a      	mov	r2, r3
 8011766:	2101      	movs	r1, #1
 8011768:	6878      	ldr	r0, [r7, #4]
 801176a:	f000 fb90 	bl	8011e8e <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 801176e:	f7ff fda9 	bl	80112c4 <HAL_GetTick>
 8011772:	4602      	mov	r2, r0
 8011774:	697b      	ldr	r3, [r7, #20]
 8011776:	1ad3      	subs	r3, r2, r3
 8011778:	f241 3288 	movw	r2, #5000	; 0x1388
 801177c:	4293      	cmp	r3, r2
 801177e:	d90f      	bls.n	80117a0 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8011780:	2301      	movs	r3, #1
 8011782:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8011784:	6939      	ldr	r1, [r7, #16]
 8011786:	6878      	ldr	r0, [r7, #4]
 8011788:	f000 fc7e 	bl	8012088 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	2201      	movs	r2, #1
 8011790:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	2200      	movs	r2, #0
 8011798:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 801179c:	2303      	movs	r3, #3
 801179e:	e0ae      	b.n	80118fe <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80117a0:	68fb      	ldr	r3, [r7, #12]
 80117a2:	f003 0304 	and.w	r3, r3, #4
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	d0da      	beq.n	8011760 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80117aa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80117ae:	2100      	movs	r1, #0
 80117b0:	6878      	ldr	r0, [r7, #4]
 80117b2:	f000 fbd4 	bl	8011f5e <HAL_ETH_WritePHYRegister>
 80117b6:	4603      	mov	r3, r0
 80117b8:	2b00      	cmp	r3, #0
 80117ba:	d00b      	beq.n	80117d4 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80117bc:	2301      	movs	r3, #1
 80117be:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80117c0:	6939      	ldr	r1, [r7, #16]
 80117c2:	6878      	ldr	r0, [r7, #4]
 80117c4:	f000 fc60 	bl	8012088 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	2201      	movs	r2, #1
 80117cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80117d0:	2301      	movs	r3, #1
 80117d2:	e094      	b.n	80118fe <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80117d4:	f7ff fd76 	bl	80112c4 <HAL_GetTick>
 80117d8:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80117da:	f107 030c 	add.w	r3, r7, #12
 80117de:	461a      	mov	r2, r3
 80117e0:	2101      	movs	r1, #1
 80117e2:	6878      	ldr	r0, [r7, #4]
 80117e4:	f000 fb53 	bl	8011e8e <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80117e8:	f7ff fd6c 	bl	80112c4 <HAL_GetTick>
 80117ec:	4602      	mov	r2, r0
 80117ee:	697b      	ldr	r3, [r7, #20]
 80117f0:	1ad3      	subs	r3, r2, r3
 80117f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80117f6:	4293      	cmp	r3, r2
 80117f8:	d90f      	bls.n	801181a <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80117fa:	2301      	movs	r3, #1
 80117fc:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80117fe:	6939      	ldr	r1, [r7, #16]
 8011800:	6878      	ldr	r0, [r7, #4]
 8011802:	f000 fc41 	bl	8012088 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	2201      	movs	r2, #1
 801180a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	2200      	movs	r2, #0
 8011812:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8011816:	2303      	movs	r3, #3
 8011818:	e071      	b.n	80118fe <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 801181a:	68fb      	ldr	r3, [r7, #12]
 801181c:	f003 0320 	and.w	r3, r3, #32
 8011820:	2b00      	cmp	r3, #0
 8011822:	d0da      	beq.n	80117da <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8011824:	f107 030c 	add.w	r3, r7, #12
 8011828:	461a      	mov	r2, r3
 801182a:	211f      	movs	r1, #31
 801182c:	6878      	ldr	r0, [r7, #4]
 801182e:	f000 fb2e 	bl	8011e8e <HAL_ETH_ReadPHYRegister>
 8011832:	4603      	mov	r3, r0
 8011834:	2b00      	cmp	r3, #0
 8011836:	d00b      	beq.n	8011850 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8011838:	2301      	movs	r3, #1
 801183a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 801183c:	6939      	ldr	r1, [r7, #16]
 801183e:	6878      	ldr	r0, [r7, #4]
 8011840:	f000 fc22 	bl	8012088 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	2201      	movs	r2, #1
 8011848:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 801184c:	2301      	movs	r3, #1
 801184e:	e056      	b.n	80118fe <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8011850:	68fb      	ldr	r3, [r7, #12]
 8011852:	f003 0310 	and.w	r3, r3, #16
 8011856:	2b00      	cmp	r3, #0
 8011858:	d004      	beq.n	8011864 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011860:	60da      	str	r2, [r3, #12]
 8011862:	e002      	b.n	801186a <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	2200      	movs	r2, #0
 8011868:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 801186a:	68fb      	ldr	r3, [r7, #12]
 801186c:	f003 0304 	and.w	r3, r3, #4
 8011870:	2b00      	cmp	r3, #0
 8011872:	d003      	beq.n	801187c <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	2200      	movs	r2, #0
 8011878:	609a      	str	r2, [r3, #8]
 801187a:	e037      	b.n	80118ec <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8011882:	609a      	str	r2, [r3, #8]
 8011884:	e032      	b.n	80118ec <HAL_ETH_Init+0x31c>
 8011886:	bf00      	nop
 8011888:	03938700 	.word	0x03938700
 801188c:	40023800 	.word	0x40023800
 8011890:	40013800 	.word	0x40013800
 8011894:	01312cff 	.word	0x01312cff
 8011898:	02160ebf 	.word	0x02160ebf
 801189c:	039386ff 	.word	0x039386ff
 80118a0:	05f5e0ff 	.word	0x05f5e0ff
 80118a4:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	68db      	ldr	r3, [r3, #12]
 80118ac:	08db      	lsrs	r3, r3, #3
 80118ae:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	689b      	ldr	r3, [r3, #8]
 80118b4:	085b      	lsrs	r3, r3, #1
 80118b6:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80118b8:	4313      	orrs	r3, r2
 80118ba:	b29b      	uxth	r3, r3
 80118bc:	461a      	mov	r2, r3
 80118be:	2100      	movs	r1, #0
 80118c0:	6878      	ldr	r0, [r7, #4]
 80118c2:	f000 fb4c 	bl	8011f5e <HAL_ETH_WritePHYRegister>
 80118c6:	4603      	mov	r3, r0
 80118c8:	2b00      	cmp	r3, #0
 80118ca:	d00b      	beq.n	80118e4 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80118cc:	2301      	movs	r3, #1
 80118ce:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80118d0:	6939      	ldr	r1, [r7, #16]
 80118d2:	6878      	ldr	r0, [r7, #4]
 80118d4:	f000 fbd8 	bl	8012088 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	2201      	movs	r2, #1
 80118dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80118e0:	2301      	movs	r3, #1
 80118e2:	e00c      	b.n	80118fe <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80118e4:	f640 70ff 	movw	r0, #4095	; 0xfff
 80118e8:	f7ff fcf8 	bl	80112dc <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80118ec:	6939      	ldr	r1, [r7, #16]
 80118ee:	6878      	ldr	r0, [r7, #4]
 80118f0:	f000 fbca 	bl	8012088 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	2201      	movs	r2, #1
 80118f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80118fc:	2300      	movs	r3, #0
}
 80118fe:	4618      	mov	r0, r3
 8011900:	3720      	adds	r7, #32
 8011902:	46bd      	mov	sp, r7
 8011904:	bd80      	pop	{r7, pc}
 8011906:	bf00      	nop

08011908 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8011908:	b480      	push	{r7}
 801190a:	b087      	sub	sp, #28
 801190c:	af00      	add	r7, sp, #0
 801190e:	60f8      	str	r0, [r7, #12]
 8011910:	60b9      	str	r1, [r7, #8]
 8011912:	607a      	str	r2, [r7, #4]
 8011914:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8011916:	2300      	movs	r3, #0
 8011918:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 801191a:	68fb      	ldr	r3, [r7, #12]
 801191c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011920:	2b01      	cmp	r3, #1
 8011922:	d101      	bne.n	8011928 <HAL_ETH_DMATxDescListInit+0x20>
 8011924:	2302      	movs	r3, #2
 8011926:	e052      	b.n	80119ce <HAL_ETH_DMATxDescListInit+0xc6>
 8011928:	68fb      	ldr	r3, [r7, #12]
 801192a:	2201      	movs	r2, #1
 801192c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8011930:	68fb      	ldr	r3, [r7, #12]
 8011932:	2202      	movs	r2, #2
 8011934:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8011938:	68fb      	ldr	r3, [r7, #12]
 801193a:	68ba      	ldr	r2, [r7, #8]
 801193c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 801193e:	2300      	movs	r3, #0
 8011940:	617b      	str	r3, [r7, #20]
 8011942:	e030      	b.n	80119a6 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8011944:	697b      	ldr	r3, [r7, #20]
 8011946:	015b      	lsls	r3, r3, #5
 8011948:	68ba      	ldr	r2, [r7, #8]
 801194a:	4413      	add	r3, r2
 801194c:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 801194e:	693b      	ldr	r3, [r7, #16]
 8011950:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8011954:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8011956:	697b      	ldr	r3, [r7, #20]
 8011958:	f240 52f4 	movw	r2, #1524	; 0x5f4
 801195c:	fb02 f303 	mul.w	r3, r2, r3
 8011960:	687a      	ldr	r2, [r7, #4]
 8011962:	4413      	add	r3, r2
 8011964:	461a      	mov	r2, r3
 8011966:	693b      	ldr	r3, [r7, #16]
 8011968:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 801196a:	68fb      	ldr	r3, [r7, #12]
 801196c:	69db      	ldr	r3, [r3, #28]
 801196e:	2b00      	cmp	r3, #0
 8011970:	d105      	bne.n	801197e <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8011972:	693b      	ldr	r3, [r7, #16]
 8011974:	681b      	ldr	r3, [r3, #0]
 8011976:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 801197a:	693b      	ldr	r3, [r7, #16]
 801197c:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 801197e:	683b      	ldr	r3, [r7, #0]
 8011980:	1e5a      	subs	r2, r3, #1
 8011982:	697b      	ldr	r3, [r7, #20]
 8011984:	429a      	cmp	r2, r3
 8011986:	d908      	bls.n	801199a <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 8011988:	697b      	ldr	r3, [r7, #20]
 801198a:	3301      	adds	r3, #1
 801198c:	015b      	lsls	r3, r3, #5
 801198e:	68ba      	ldr	r2, [r7, #8]
 8011990:	4413      	add	r3, r2
 8011992:	461a      	mov	r2, r3
 8011994:	693b      	ldr	r3, [r7, #16]
 8011996:	60da      	str	r2, [r3, #12]
 8011998:	e002      	b.n	80119a0 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 801199a:	68ba      	ldr	r2, [r7, #8]
 801199c:	693b      	ldr	r3, [r7, #16]
 801199e:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 80119a0:	697b      	ldr	r3, [r7, #20]
 80119a2:	3301      	adds	r3, #1
 80119a4:	617b      	str	r3, [r7, #20]
 80119a6:	697a      	ldr	r2, [r7, #20]
 80119a8:	683b      	ldr	r3, [r7, #0]
 80119aa:	429a      	cmp	r2, r3
 80119ac:	d3ca      	bcc.n	8011944 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80119ae:	68fb      	ldr	r3, [r7, #12]
 80119b0:	6819      	ldr	r1, [r3, #0]
 80119b2:	68ba      	ldr	r2, [r7, #8]
 80119b4:	f241 0310 	movw	r3, #4112	; 0x1010
 80119b8:	440b      	add	r3, r1
 80119ba:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80119bc:	68fb      	ldr	r3, [r7, #12]
 80119be:	2201      	movs	r2, #1
 80119c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80119c4:	68fb      	ldr	r3, [r7, #12]
 80119c6:	2200      	movs	r2, #0
 80119c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80119cc:	2300      	movs	r3, #0
}
 80119ce:	4618      	mov	r0, r3
 80119d0:	371c      	adds	r7, #28
 80119d2:	46bd      	mov	sp, r7
 80119d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119d8:	4770      	bx	lr

080119da <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80119da:	b480      	push	{r7}
 80119dc:	b087      	sub	sp, #28
 80119de:	af00      	add	r7, sp, #0
 80119e0:	60f8      	str	r0, [r7, #12]
 80119e2:	60b9      	str	r1, [r7, #8]
 80119e4:	607a      	str	r2, [r7, #4]
 80119e6:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 80119e8:	2300      	movs	r3, #0
 80119ea:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80119ec:	68fb      	ldr	r3, [r7, #12]
 80119ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80119f2:	2b01      	cmp	r3, #1
 80119f4:	d101      	bne.n	80119fa <HAL_ETH_DMARxDescListInit+0x20>
 80119f6:	2302      	movs	r3, #2
 80119f8:	e056      	b.n	8011aa8 <HAL_ETH_DMARxDescListInit+0xce>
 80119fa:	68fb      	ldr	r3, [r7, #12]
 80119fc:	2201      	movs	r2, #1
 80119fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8011a02:	68fb      	ldr	r3, [r7, #12]
 8011a04:	2202      	movs	r2, #2
 8011a06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8011a0a:	68fb      	ldr	r3, [r7, #12]
 8011a0c:	68ba      	ldr	r2, [r7, #8]
 8011a0e:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 8011a10:	2300      	movs	r3, #0
 8011a12:	617b      	str	r3, [r7, #20]
 8011a14:	e034      	b.n	8011a80 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8011a16:	697b      	ldr	r3, [r7, #20]
 8011a18:	015b      	lsls	r3, r3, #5
 8011a1a:	68ba      	ldr	r2, [r7, #8]
 8011a1c:	4413      	add	r3, r2
 8011a1e:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8011a20:	693b      	ldr	r3, [r7, #16]
 8011a22:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8011a26:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8011a28:	693b      	ldr	r3, [r7, #16]
 8011a2a:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8011a2e:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8011a30:	697b      	ldr	r3, [r7, #20]
 8011a32:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8011a36:	fb02 f303 	mul.w	r3, r2, r3
 8011a3a:	687a      	ldr	r2, [r7, #4]
 8011a3c:	4413      	add	r3, r2
 8011a3e:	461a      	mov	r2, r3
 8011a40:	693b      	ldr	r3, [r7, #16]
 8011a42:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8011a44:	68fb      	ldr	r3, [r7, #12]
 8011a46:	699b      	ldr	r3, [r3, #24]
 8011a48:	2b01      	cmp	r3, #1
 8011a4a:	d105      	bne.n	8011a58 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8011a4c:	693b      	ldr	r3, [r7, #16]
 8011a4e:	685b      	ldr	r3, [r3, #4]
 8011a50:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8011a54:	693b      	ldr	r3, [r7, #16]
 8011a56:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 8011a58:	683b      	ldr	r3, [r7, #0]
 8011a5a:	1e5a      	subs	r2, r3, #1
 8011a5c:	697b      	ldr	r3, [r7, #20]
 8011a5e:	429a      	cmp	r2, r3
 8011a60:	d908      	bls.n	8011a74 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 8011a62:	697b      	ldr	r3, [r7, #20]
 8011a64:	3301      	adds	r3, #1
 8011a66:	015b      	lsls	r3, r3, #5
 8011a68:	68ba      	ldr	r2, [r7, #8]
 8011a6a:	4413      	add	r3, r2
 8011a6c:	461a      	mov	r2, r3
 8011a6e:	693b      	ldr	r3, [r7, #16]
 8011a70:	60da      	str	r2, [r3, #12]
 8011a72:	e002      	b.n	8011a7a <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8011a74:	68ba      	ldr	r2, [r7, #8]
 8011a76:	693b      	ldr	r3, [r7, #16]
 8011a78:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 8011a7a:	697b      	ldr	r3, [r7, #20]
 8011a7c:	3301      	adds	r3, #1
 8011a7e:	617b      	str	r3, [r7, #20]
 8011a80:	697a      	ldr	r2, [r7, #20]
 8011a82:	683b      	ldr	r3, [r7, #0]
 8011a84:	429a      	cmp	r2, r3
 8011a86:	d3c6      	bcc.n	8011a16 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8011a88:	68fb      	ldr	r3, [r7, #12]
 8011a8a:	6819      	ldr	r1, [r3, #0]
 8011a8c:	68ba      	ldr	r2, [r7, #8]
 8011a8e:	f241 030c 	movw	r3, #4108	; 0x100c
 8011a92:	440b      	add	r3, r1
 8011a94:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8011a96:	68fb      	ldr	r3, [r7, #12]
 8011a98:	2201      	movs	r2, #1
 8011a9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8011a9e:	68fb      	ldr	r3, [r7, #12]
 8011aa0:	2200      	movs	r2, #0
 8011aa2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8011aa6:	2300      	movs	r3, #0
}
 8011aa8:	4618      	mov	r0, r3
 8011aaa:	371c      	adds	r7, #28
 8011aac:	46bd      	mov	sp, r7
 8011aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ab2:	4770      	bx	lr

08011ab4 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8011ab4:	b480      	push	{r7}
 8011ab6:	b087      	sub	sp, #28
 8011ab8:	af00      	add	r7, sp, #0
 8011aba:	6078      	str	r0, [r7, #4]
 8011abc:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 8011abe:	2300      	movs	r3, #0
 8011ac0:	617b      	str	r3, [r7, #20]
 8011ac2:	2300      	movs	r3, #0
 8011ac4:	60fb      	str	r3, [r7, #12]
 8011ac6:	2300      	movs	r3, #0
 8011ac8:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011ad0:	2b01      	cmp	r3, #1
 8011ad2:	d101      	bne.n	8011ad8 <HAL_ETH_TransmitFrame+0x24>
 8011ad4:	2302      	movs	r3, #2
 8011ad6:	e0cd      	b.n	8011c74 <HAL_ETH_TransmitFrame+0x1c0>
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	2201      	movs	r2, #1
 8011adc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	2202      	movs	r2, #2
 8011ae4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 8011ae8:	683b      	ldr	r3, [r7, #0]
 8011aea:	2b00      	cmp	r3, #0
 8011aec:	d109      	bne.n	8011b02 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	2201      	movs	r2, #1
 8011af2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	2200      	movs	r2, #0
 8011afa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8011afe:	2301      	movs	r3, #1
 8011b00:	e0b8      	b.n	8011c74 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b06:	681b      	ldr	r3, [r3, #0]
 8011b08:	2b00      	cmp	r3, #0
 8011b0a:	da09      	bge.n	8011b20 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	2212      	movs	r2, #18
 8011b10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	2200      	movs	r2, #0
 8011b18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8011b1c:	2301      	movs	r3, #1
 8011b1e:	e0a9      	b.n	8011c74 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8011b20:	683b      	ldr	r3, [r7, #0]
 8011b22:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8011b26:	4293      	cmp	r3, r2
 8011b28:	d915      	bls.n	8011b56 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8011b2a:	683b      	ldr	r3, [r7, #0]
 8011b2c:	4a54      	ldr	r2, [pc, #336]	; (8011c80 <HAL_ETH_TransmitFrame+0x1cc>)
 8011b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8011b32:	0a9b      	lsrs	r3, r3, #10
 8011b34:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8011b36:	683a      	ldr	r2, [r7, #0]
 8011b38:	4b51      	ldr	r3, [pc, #324]	; (8011c80 <HAL_ETH_TransmitFrame+0x1cc>)
 8011b3a:	fba3 1302 	umull	r1, r3, r3, r2
 8011b3e:	0a9b      	lsrs	r3, r3, #10
 8011b40:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8011b44:	fb01 f303 	mul.w	r3, r1, r3
 8011b48:	1ad3      	subs	r3, r2, r3
 8011b4a:	2b00      	cmp	r3, #0
 8011b4c:	d005      	beq.n	8011b5a <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8011b4e:	697b      	ldr	r3, [r7, #20]
 8011b50:	3301      	adds	r3, #1
 8011b52:	617b      	str	r3, [r7, #20]
 8011b54:	e001      	b.n	8011b5a <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 8011b56:	2301      	movs	r3, #1
 8011b58:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 8011b5a:	697b      	ldr	r3, [r7, #20]
 8011b5c:	2b01      	cmp	r3, #1
 8011b5e:	d11c      	bne.n	8011b9a <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b64:	687a      	ldr	r2, [r7, #4]
 8011b66:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8011b68:	6812      	ldr	r2, [r2, #0]
 8011b6a:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8011b6e:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b74:	683a      	ldr	r2, [r7, #0]
 8011b76:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8011b7a:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b80:	687a      	ldr	r2, [r7, #4]
 8011b82:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8011b84:	6812      	ldr	r2, [r2, #0]
 8011b86:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8011b8a:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b90:	68db      	ldr	r3, [r3, #12]
 8011b92:	461a      	mov	r2, r3
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	62da      	str	r2, [r3, #44]	; 0x2c
 8011b98:	e04b      	b.n	8011c32 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 8011b9a:	2300      	movs	r3, #0
 8011b9c:	613b      	str	r3, [r7, #16]
 8011b9e:	e044      	b.n	8011c2a <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ba4:	687a      	ldr	r2, [r7, #4]
 8011ba6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8011ba8:	6812      	ldr	r2, [r2, #0]
 8011baa:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8011bae:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 8011bb0:	693b      	ldr	r3, [r7, #16]
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	d107      	bne.n	8011bc6 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011bba:	687a      	ldr	r2, [r7, #4]
 8011bbc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8011bbe:	6812      	ldr	r2, [r2, #0]
 8011bc0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8011bc4:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011bca:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8011bce:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 8011bd0:	697b      	ldr	r3, [r7, #20]
 8011bd2:	1e5a      	subs	r2, r3, #1
 8011bd4:	693b      	ldr	r3, [r7, #16]
 8011bd6:	429a      	cmp	r2, r3
 8011bd8:	d116      	bne.n	8011c08 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011bde:	687a      	ldr	r2, [r7, #4]
 8011be0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8011be2:	6812      	ldr	r2, [r2, #0]
 8011be4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8011be8:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8011bea:	697b      	ldr	r3, [r7, #20]
 8011bec:	4a25      	ldr	r2, [pc, #148]	; (8011c84 <HAL_ETH_TransmitFrame+0x1d0>)
 8011bee:	fb02 f203 	mul.w	r2, r2, r3
 8011bf2:	683b      	ldr	r3, [r7, #0]
 8011bf4:	4413      	add	r3, r2
 8011bf6:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8011bfa:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c00:	68fa      	ldr	r2, [r7, #12]
 8011c02:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8011c06:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8011c08:	687b      	ldr	r3, [r7, #4]
 8011c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c0c:	687a      	ldr	r2, [r7, #4]
 8011c0e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8011c10:	6812      	ldr	r2, [r2, #0]
 8011c12:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8011c16:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c1c:	68db      	ldr	r3, [r3, #12]
 8011c1e:	461a      	mov	r2, r3
 8011c20:	687b      	ldr	r3, [r7, #4]
 8011c22:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 8011c24:	693b      	ldr	r3, [r7, #16]
 8011c26:	3301      	adds	r3, #1
 8011c28:	613b      	str	r3, [r7, #16]
 8011c2a:	693a      	ldr	r2, [r7, #16]
 8011c2c:	697b      	ldr	r3, [r7, #20]
 8011c2e:	429a      	cmp	r2, r3
 8011c30:	d3b6      	bcc.n	8011ba0 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	681a      	ldr	r2, [r3, #0]
 8011c36:	f241 0314 	movw	r3, #4116	; 0x1014
 8011c3a:	4413      	add	r3, r2
 8011c3c:	681b      	ldr	r3, [r3, #0]
 8011c3e:	f003 0304 	and.w	r3, r3, #4
 8011c42:	2b00      	cmp	r3, #0
 8011c44:	d00d      	beq.n	8011c62 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	681a      	ldr	r2, [r3, #0]
 8011c4a:	f241 0314 	movw	r3, #4116	; 0x1014
 8011c4e:	4413      	add	r3, r2
 8011c50:	2204      	movs	r2, #4
 8011c52:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	681a      	ldr	r2, [r3, #0]
 8011c58:	f241 0304 	movw	r3, #4100	; 0x1004
 8011c5c:	4413      	add	r3, r2
 8011c5e:	2200      	movs	r2, #0
 8011c60:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	2201      	movs	r2, #1
 8011c66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	2200      	movs	r2, #0
 8011c6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8011c72:	2300      	movs	r3, #0
}
 8011c74:	4618      	mov	r0, r3
 8011c76:	371c      	adds	r7, #28
 8011c78:	46bd      	mov	sp, r7
 8011c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c7e:	4770      	bx	lr
 8011c80:	ac02b00b 	.word	0xac02b00b
 8011c84:	fffffa0c 	.word	0xfffffa0c

08011c88 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8011c88:	b480      	push	{r7}
 8011c8a:	b085      	sub	sp, #20
 8011c8c:	af00      	add	r7, sp, #0
 8011c8e:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0;
 8011c90:	2300      	movs	r3, #0
 8011c92:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011c9a:	2b01      	cmp	r3, #1
 8011c9c:	d101      	bne.n	8011ca2 <HAL_ETH_GetReceivedFrame_IT+0x1a>
 8011c9e:	2302      	movs	r3, #2
 8011ca0:	e074      	b.n	8011d8c <HAL_ETH_GetReceivedFrame_IT+0x104>
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	2201      	movs	r2, #1
 8011ca6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	2202      	movs	r2, #2
 8011cae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8011cb2:	e05a      	b.n	8011d6a <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8011cb4:	68fb      	ldr	r3, [r7, #12]
 8011cb6:	3301      	adds	r3, #1
 8011cb8:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8011cba:	687b      	ldr	r3, [r7, #4]
 8011cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011cbe:	681b      	ldr	r3, [r3, #0]
 8011cc0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8011cc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011cc8:	d10d      	bne.n	8011ce6 <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1;   
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	2201      	movs	r2, #1
 8011cd6:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011cdc:	68db      	ldr	r3, [r3, #12]
 8011cde:	461a      	mov	r2, r3
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	629a      	str	r2, [r3, #40]	; 0x28
 8011ce4:	e041      	b.n	8011d6a <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011cea:	681b      	ldr	r3, [r3, #0]
 8011cec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8011cf0:	2b00      	cmp	r3, #0
 8011cf2:	d10b      	bne.n	8011d0c <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011cf8:	1c5a      	adds	r2, r3, #1
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011d02:	68db      	ldr	r3, [r3, #12]
 8011d04:	461a      	mov	r2, r3
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	629a      	str	r2, [r3, #40]	; 0x28
 8011d0a:	e02e      	b.n	8011d6a <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011d18:	1c5a      	adds	r2, r3, #1
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1)
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011d22:	2b01      	cmp	r3, #1
 8011d24:	d103      	bne.n	8011d2e <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011d32:	681b      	ldr	r3, [r3, #0]
 8011d34:	0c1b      	lsrs	r3, r3, #16
 8011d36:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8011d3a:	1f1a      	subs	r2, r3, #4
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8011d40:	687b      	ldr	r3, [r7, #4]
 8011d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011d44:	689a      	ldr	r2, [r3, #8]
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011d4e:	68db      	ldr	r3, [r3, #12]
 8011d50:	461a      	mov	r2, r3
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8011d56:	687b      	ldr	r3, [r7, #4]
 8011d58:	2201      	movs	r2, #1
 8011d5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	2200      	movs	r2, #0
 8011d62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 8011d66:	2300      	movs	r3, #0
 8011d68:	e010      	b.n	8011d8c <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011d6e:	681b      	ldr	r3, [r3, #0]
 8011d70:	2b00      	cmp	r3, #0
 8011d72:	db02      	blt.n	8011d7a <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8011d74:	68fb      	ldr	r3, [r7, #12]
 8011d76:	2b03      	cmp	r3, #3
 8011d78:	d99c      	bls.n	8011cb4 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	2201      	movs	r2, #1
 8011d7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	2200      	movs	r2, #0
 8011d86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8011d8a:	2301      	movs	r3, #1
}
 8011d8c:	4618      	mov	r0, r3
 8011d8e:	3714      	adds	r7, #20
 8011d90:	46bd      	mov	sp, r7
 8011d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d96:	4770      	bx	lr

08011d98 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8011d98:	b580      	push	{r7, lr}
 8011d9a:	b082      	sub	sp, #8
 8011d9c:	af00      	add	r7, sp, #0
 8011d9e:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	681a      	ldr	r2, [r3, #0]
 8011da4:	f241 0314 	movw	r3, #4116	; 0x1014
 8011da8:	4413      	add	r3, r2
 8011daa:	681b      	ldr	r3, [r3, #0]
 8011dac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011db0:	2b40      	cmp	r3, #64	; 0x40
 8011db2:	d112      	bne.n	8011dda <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8011db4:	6878      	ldr	r0, [r7, #4]
 8011db6:	f003 fa2d 	bl	8015214 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	681a      	ldr	r2, [r3, #0]
 8011dbe:	f241 0314 	movw	r3, #4116	; 0x1014
 8011dc2:	4413      	add	r3, r2
 8011dc4:	2240      	movs	r2, #64	; 0x40
 8011dc6:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	2201      	movs	r2, #1
 8011dcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	2200      	movs	r2, #0
 8011dd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011dd8:	e01b      	b.n	8011e12 <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	681a      	ldr	r2, [r3, #0]
 8011dde:	f241 0314 	movw	r3, #4116	; 0x1014
 8011de2:	4413      	add	r3, r2
 8011de4:	681b      	ldr	r3, [r3, #0]
 8011de6:	f003 0301 	and.w	r3, r3, #1
 8011dea:	2b01      	cmp	r3, #1
 8011dec:	d111      	bne.n	8011e12 <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8011dee:	6878      	ldr	r0, [r7, #4]
 8011df0:	f000 f839 	bl	8011e66 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	681a      	ldr	r2, [r3, #0]
 8011df8:	f241 0314 	movw	r3, #4116	; 0x1014
 8011dfc:	4413      	add	r3, r2
 8011dfe:	2201      	movs	r2, #1
 8011e00:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	2201      	movs	r2, #1
 8011e06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8011e0a:	687b      	ldr	r3, [r7, #4]
 8011e0c:	2200      	movs	r2, #0
 8011e0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	681a      	ldr	r2, [r3, #0]
 8011e16:	f241 0314 	movw	r3, #4116	; 0x1014
 8011e1a:	4413      	add	r3, r2
 8011e1c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8011e20:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	681a      	ldr	r2, [r3, #0]
 8011e26:	f241 0314 	movw	r3, #4116	; 0x1014
 8011e2a:	4413      	add	r3, r2
 8011e2c:	681b      	ldr	r3, [r3, #0]
 8011e2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011e32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011e36:	d112      	bne.n	8011e5e <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8011e38:	6878      	ldr	r0, [r7, #4]
 8011e3a:	f000 f81e 	bl	8011e7a <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8011e3e:	687b      	ldr	r3, [r7, #4]
 8011e40:	681a      	ldr	r2, [r3, #0]
 8011e42:	f241 0314 	movw	r3, #4116	; 0x1014
 8011e46:	4413      	add	r3, r2
 8011e48:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8011e4c:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	2201      	movs	r2, #1
 8011e52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	2200      	movs	r2, #0
 8011e5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8011e5e:	bf00      	nop
 8011e60:	3708      	adds	r7, #8
 8011e62:	46bd      	mov	sp, r7
 8011e64:	bd80      	pop	{r7, pc}

08011e66 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8011e66:	b480      	push	{r7}
 8011e68:	b083      	sub	sp, #12
 8011e6a:	af00      	add	r7, sp, #0
 8011e6c:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8011e6e:	bf00      	nop
 8011e70:	370c      	adds	r7, #12
 8011e72:	46bd      	mov	sp, r7
 8011e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e78:	4770      	bx	lr

08011e7a <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8011e7a:	b480      	push	{r7}
 8011e7c:	b083      	sub	sp, #12
 8011e7e:	af00      	add	r7, sp, #0
 8011e80:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */ 
}
 8011e82:	bf00      	nop
 8011e84:	370c      	adds	r7, #12
 8011e86:	46bd      	mov	sp, r7
 8011e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e8c:	4770      	bx	lr

08011e8e <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8011e8e:	b580      	push	{r7, lr}
 8011e90:	b086      	sub	sp, #24
 8011e92:	af00      	add	r7, sp, #0
 8011e94:	60f8      	str	r0, [r7, #12]
 8011e96:	460b      	mov	r3, r1
 8011e98:	607a      	str	r2, [r7, #4]
 8011e9a:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8011e9c:	2300      	movs	r3, #0
 8011e9e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8011ea0:	2300      	movs	r3, #0
 8011ea2:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8011ea4:	68fb      	ldr	r3, [r7, #12]
 8011ea6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011eaa:	b2db      	uxtb	r3, r3
 8011eac:	2b82      	cmp	r3, #130	; 0x82
 8011eae:	d101      	bne.n	8011eb4 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8011eb0:	2302      	movs	r3, #2
 8011eb2:	e050      	b.n	8011f56 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8011eb4:	68fb      	ldr	r3, [r7, #12]
 8011eb6:	2282      	movs	r2, #130	; 0x82
 8011eb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8011ebc:	68fb      	ldr	r3, [r7, #12]
 8011ebe:	681b      	ldr	r3, [r3, #0]
 8011ec0:	691b      	ldr	r3, [r3, #16]
 8011ec2:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8011ec4:	697b      	ldr	r3, [r7, #20]
 8011ec6:	f003 031c 	and.w	r3, r3, #28
 8011eca:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8011ecc:	68fb      	ldr	r3, [r7, #12]
 8011ece:	8a1b      	ldrh	r3, [r3, #16]
 8011ed0:	02db      	lsls	r3, r3, #11
 8011ed2:	b29b      	uxth	r3, r3
 8011ed4:	697a      	ldr	r2, [r7, #20]
 8011ed6:	4313      	orrs	r3, r2
 8011ed8:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8011eda:	897b      	ldrh	r3, [r7, #10]
 8011edc:	019b      	lsls	r3, r3, #6
 8011ede:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8011ee2:	697a      	ldr	r2, [r7, #20]
 8011ee4:	4313      	orrs	r3, r2
 8011ee6:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8011ee8:	697b      	ldr	r3, [r7, #20]
 8011eea:	f023 0302 	bic.w	r3, r3, #2
 8011eee:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8011ef0:	697b      	ldr	r3, [r7, #20]
 8011ef2:	f043 0301 	orr.w	r3, r3, #1
 8011ef6:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8011ef8:	68fb      	ldr	r3, [r7, #12]
 8011efa:	681b      	ldr	r3, [r3, #0]
 8011efc:	697a      	ldr	r2, [r7, #20]
 8011efe:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8011f00:	f7ff f9e0 	bl	80112c4 <HAL_GetTick>
 8011f04:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8011f06:	e015      	b.n	8011f34 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8011f08:	f7ff f9dc 	bl	80112c4 <HAL_GetTick>
 8011f0c:	4602      	mov	r2, r0
 8011f0e:	693b      	ldr	r3, [r7, #16]
 8011f10:	1ad3      	subs	r3, r2, r3
 8011f12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011f16:	d309      	bcc.n	8011f2c <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8011f18:	68fb      	ldr	r3, [r7, #12]
 8011f1a:	2201      	movs	r2, #1
 8011f1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8011f20:	68fb      	ldr	r3, [r7, #12]
 8011f22:	2200      	movs	r2, #0
 8011f24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8011f28:	2303      	movs	r3, #3
 8011f2a:	e014      	b.n	8011f56 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8011f2c:	68fb      	ldr	r3, [r7, #12]
 8011f2e:	681b      	ldr	r3, [r3, #0]
 8011f30:	691b      	ldr	r3, [r3, #16]
 8011f32:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8011f34:	697b      	ldr	r3, [r7, #20]
 8011f36:	f003 0301 	and.w	r3, r3, #1
 8011f3a:	2b00      	cmp	r3, #0
 8011f3c:	d1e4      	bne.n	8011f08 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8011f3e:	68fb      	ldr	r3, [r7, #12]
 8011f40:	681b      	ldr	r3, [r3, #0]
 8011f42:	695b      	ldr	r3, [r3, #20]
 8011f44:	b29b      	uxth	r3, r3
 8011f46:	461a      	mov	r2, r3
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8011f4c:	68fb      	ldr	r3, [r7, #12]
 8011f4e:	2201      	movs	r2, #1
 8011f50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8011f54:	2300      	movs	r3, #0
}
 8011f56:	4618      	mov	r0, r3
 8011f58:	3718      	adds	r7, #24
 8011f5a:	46bd      	mov	sp, r7
 8011f5c:	bd80      	pop	{r7, pc}

08011f5e <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8011f5e:	b580      	push	{r7, lr}
 8011f60:	b086      	sub	sp, #24
 8011f62:	af00      	add	r7, sp, #0
 8011f64:	60f8      	str	r0, [r7, #12]
 8011f66:	460b      	mov	r3, r1
 8011f68:	607a      	str	r2, [r7, #4]
 8011f6a:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8011f6c:	2300      	movs	r3, #0
 8011f6e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8011f70:	2300      	movs	r3, #0
 8011f72:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8011f74:	68fb      	ldr	r3, [r7, #12]
 8011f76:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011f7a:	b2db      	uxtb	r3, r3
 8011f7c:	2b42      	cmp	r3, #66	; 0x42
 8011f7e:	d101      	bne.n	8011f84 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8011f80:	2302      	movs	r3, #2
 8011f82:	e04e      	b.n	8012022 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8011f84:	68fb      	ldr	r3, [r7, #12]
 8011f86:	2242      	movs	r2, #66	; 0x42
 8011f88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8011f8c:	68fb      	ldr	r3, [r7, #12]
 8011f8e:	681b      	ldr	r3, [r3, #0]
 8011f90:	691b      	ldr	r3, [r3, #16]
 8011f92:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8011f94:	697b      	ldr	r3, [r7, #20]
 8011f96:	f003 031c 	and.w	r3, r3, #28
 8011f9a:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8011f9c:	68fb      	ldr	r3, [r7, #12]
 8011f9e:	8a1b      	ldrh	r3, [r3, #16]
 8011fa0:	02db      	lsls	r3, r3, #11
 8011fa2:	b29b      	uxth	r3, r3
 8011fa4:	697a      	ldr	r2, [r7, #20]
 8011fa6:	4313      	orrs	r3, r2
 8011fa8:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8011faa:	897b      	ldrh	r3, [r7, #10]
 8011fac:	019b      	lsls	r3, r3, #6
 8011fae:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8011fb2:	697a      	ldr	r2, [r7, #20]
 8011fb4:	4313      	orrs	r3, r2
 8011fb6:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8011fb8:	697b      	ldr	r3, [r7, #20]
 8011fba:	f043 0302 	orr.w	r3, r3, #2
 8011fbe:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8011fc0:	697b      	ldr	r3, [r7, #20]
 8011fc2:	f043 0301 	orr.w	r3, r3, #1
 8011fc6:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8011fc8:	68fb      	ldr	r3, [r7, #12]
 8011fca:	681b      	ldr	r3, [r3, #0]
 8011fcc:	687a      	ldr	r2, [r7, #4]
 8011fce:	b292      	uxth	r2, r2
 8011fd0:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8011fd2:	68fb      	ldr	r3, [r7, #12]
 8011fd4:	681b      	ldr	r3, [r3, #0]
 8011fd6:	697a      	ldr	r2, [r7, #20]
 8011fd8:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8011fda:	f7ff f973 	bl	80112c4 <HAL_GetTick>
 8011fde:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8011fe0:	e015      	b.n	801200e <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8011fe2:	f7ff f96f 	bl	80112c4 <HAL_GetTick>
 8011fe6:	4602      	mov	r2, r0
 8011fe8:	693b      	ldr	r3, [r7, #16]
 8011fea:	1ad3      	subs	r3, r2, r3
 8011fec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011ff0:	d309      	bcc.n	8012006 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8011ff2:	68fb      	ldr	r3, [r7, #12]
 8011ff4:	2201      	movs	r2, #1
 8011ff6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8011ffa:	68fb      	ldr	r3, [r7, #12]
 8011ffc:	2200      	movs	r2, #0
 8011ffe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8012002:	2303      	movs	r3, #3
 8012004:	e00d      	b.n	8012022 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8012006:	68fb      	ldr	r3, [r7, #12]
 8012008:	681b      	ldr	r3, [r3, #0]
 801200a:	691b      	ldr	r3, [r3, #16]
 801200c:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 801200e:	697b      	ldr	r3, [r7, #20]
 8012010:	f003 0301 	and.w	r3, r3, #1
 8012014:	2b00      	cmp	r3, #0
 8012016:	d1e4      	bne.n	8011fe2 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8012018:	68fb      	ldr	r3, [r7, #12]
 801201a:	2201      	movs	r2, #1
 801201c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8012020:	2300      	movs	r3, #0
}
 8012022:	4618      	mov	r0, r3
 8012024:	3718      	adds	r7, #24
 8012026:	46bd      	mov	sp, r7
 8012028:	bd80      	pop	{r7, pc}

0801202a <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 801202a:	b580      	push	{r7, lr}
 801202c:	b082      	sub	sp, #8
 801202e:	af00      	add	r7, sp, #0
 8012030:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8012032:	687b      	ldr	r3, [r7, #4]
 8012034:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012038:	2b01      	cmp	r3, #1
 801203a:	d101      	bne.n	8012040 <HAL_ETH_Start+0x16>
 801203c:	2302      	movs	r3, #2
 801203e:	e01f      	b.n	8012080 <HAL_ETH_Start+0x56>
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	2201      	movs	r2, #1
 8012044:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8012048:	687b      	ldr	r3, [r7, #4]
 801204a:	2202      	movs	r2, #2
 801204c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8012050:	6878      	ldr	r0, [r7, #4]
 8012052:	f000 fa19 	bl	8012488 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8012056:	6878      	ldr	r0, [r7, #4]
 8012058:	f000 fa33 	bl	80124c2 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 801205c:	6878      	ldr	r0, [r7, #4]
 801205e:	f000 fa7d 	bl	801255c <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8012062:	6878      	ldr	r0, [r7, #4]
 8012064:	f000 fa4a 	bl	80124fc <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8012068:	6878      	ldr	r0, [r7, #4]
 801206a:	f000 fa5f 	bl	801252c <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 801206e:	687b      	ldr	r3, [r7, #4]
 8012070:	2201      	movs	r2, #1
 8012072:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	2200      	movs	r2, #0
 801207a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 801207e:	2300      	movs	r3, #0
}
 8012080:	4618      	mov	r0, r3
 8012082:	3708      	adds	r7, #8
 8012084:	46bd      	mov	sp, r7
 8012086:	bd80      	pop	{r7, pc}

08012088 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8012088:	b580      	push	{r7, lr}
 801208a:	b0b0      	sub	sp, #192	; 0xc0
 801208c:	af00      	add	r7, sp, #0
 801208e:	6078      	str	r0, [r7, #4]
 8012090:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8012092:	2300      	movs	r3, #0
 8012094:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8012098:	683b      	ldr	r3, [r7, #0]
 801209a:	2b00      	cmp	r3, #0
 801209c:	d007      	beq.n	80120ae <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80120a4:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80120ac:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80120ae:	2300      	movs	r3, #0
 80120b0:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80120b2:	2300      	movs	r3, #0
 80120b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 80120b6:	2300      	movs	r3, #0
 80120b8:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 80120ba:	2300      	movs	r3, #0
 80120bc:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 80120be:	2300      	movs	r3, #0
 80120c0:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 80120c2:	2300      	movs	r3, #0
 80120c4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80120c6:	687b      	ldr	r3, [r7, #4]
 80120c8:	69db      	ldr	r3, [r3, #28]
 80120ca:	2b00      	cmp	r3, #0
 80120cc:	d103      	bne.n	80120d6 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80120ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80120d2:	663b      	str	r3, [r7, #96]	; 0x60
 80120d4:	e001      	b.n	80120da <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80120d6:	2300      	movs	r3, #0
 80120d8:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 80120da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80120de:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 80120e0:	2300      	movs	r3, #0
 80120e2:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80120e4:	2300      	movs	r3, #0
 80120e6:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 80120e8:	2300      	movs	r3, #0
 80120ea:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 80120ec:	2300      	movs	r3, #0
 80120ee:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 80120f0:	2300      	movs	r3, #0
 80120f2:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 80120f4:	2340      	movs	r3, #64	; 0x40
 80120f6:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 80120f8:	2300      	movs	r3, #0
 80120fa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 80120fe:	2300      	movs	r3, #0
 8012100:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8012104:	2300      	movs	r3, #0
 8012106:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 801210a:	2300      	movs	r3, #0
 801210c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8012110:	2300      	movs	r3, #0
 8012112:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8012116:	2300      	movs	r3, #0
 8012118:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 801211c:	2300      	movs	r3, #0
 801211e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8012122:	2300      	movs	r3, #0
 8012124:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8012128:	2380      	movs	r3, #128	; 0x80
 801212a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 801212e:	2300      	movs	r3, #0
 8012130:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8012134:	2300      	movs	r3, #0
 8012136:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 801213a:	2300      	movs	r3, #0
 801213c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8012140:	2300      	movs	r3, #0
 8012142:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8012146:	2300      	movs	r3, #0
 8012148:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 801214c:	2300      	movs	r3, #0
 801214e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	681b      	ldr	r3, [r3, #0]
 8012156:	681b      	ldr	r3, [r3, #0]
 8012158:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 801215c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8012160:	4baa      	ldr	r3, [pc, #680]	; (801240c <ETH_MACDMAConfig+0x384>)
 8012162:	4013      	ands	r3, r2
 8012164:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8012168:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 801216a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 801216c:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 801216e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8012170:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8012172:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8012174:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 801217a:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 801217c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 801217e:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8012180:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8012182:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8012188:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 801218a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 801218c:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 801218e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8012190:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8012192:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8012194:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8012196:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8012198:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 801219a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 801219c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 801219e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80121a2:	4313      	orrs	r3, r2
 80121a4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	681b      	ldr	r3, [r3, #0]
 80121ac:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80121b0:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	681b      	ldr	r3, [r3, #0]
 80121b6:	681b      	ldr	r3, [r3, #0]
 80121b8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80121bc:	2001      	movs	r0, #1
 80121be:	f7ff f88d 	bl	80112dc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 80121c2:	687b      	ldr	r3, [r7, #4]
 80121c4:	681b      	ldr	r3, [r3, #0]
 80121c6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80121ca:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	681b      	ldr	r3, [r3, #0]
 80121d0:	6f79      	ldr	r1, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 80121d2:	6fba      	ldr	r2, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80121d4:	4311      	orrs	r1, r2
                                        macinit.PassControlFrames |
 80121d6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 80121d8:	4311      	orrs	r1, r2
                                        macinit.BroadcastFramesReception | 
 80121da:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 80121de:	4311      	orrs	r1, r2
                                        macinit.DestinationAddrFilter |
 80121e0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 80121e4:	4311      	orrs	r1, r2
                                        macinit.PromiscuousMode |
 80121e6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 80121ea:	4311      	orrs	r1, r2
                                        macinit.MulticastFramesFilter |
 80121ec:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 80121f0:	4311      	orrs	r1, r2
                                        macinit.UnicastFramesFilter);
 80121f2:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
                                        macinit.MulticastFramesFilter |
 80121f6:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80121f8:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	681b      	ldr	r3, [r3, #0]
 80121fe:	685b      	ldr	r3, [r3, #4]
 8012200:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8012204:	2001      	movs	r0, #1
 8012206:	f7ff f869 	bl	80112dc <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 801220a:	687b      	ldr	r3, [r7, #4]
 801220c:	681b      	ldr	r3, [r3, #0]
 801220e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8012212:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8012214:	687b      	ldr	r3, [r7, #4]
 8012216:	681b      	ldr	r3, [r3, #0]
 8012218:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801221c:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 801221e:	687b      	ldr	r3, [r7, #4]
 8012220:	681b      	ldr	r3, [r3, #0]
 8012222:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8012226:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	681b      	ldr	r3, [r3, #0]
 801222c:	699b      	ldr	r3, [r3, #24]
 801222e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8012232:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8012236:	f64f 7341 	movw	r3, #65345	; 0xff41
 801223a:	4013      	ands	r3, r2
 801223c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8012240:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012244:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8012246:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 801224a:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 801224c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8012250:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8012252:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8012256:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8012258:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 801225c:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 801225e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8012262:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8012264:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8012268:	4313      	orrs	r3, r2
 801226a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 801226e:	687b      	ldr	r3, [r7, #4]
 8012270:	681b      	ldr	r3, [r3, #0]
 8012272:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8012276:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	681b      	ldr	r3, [r3, #0]
 801227c:	699b      	ldr	r3, [r3, #24]
 801227e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8012282:	2001      	movs	r0, #1
 8012284:	f7ff f82a 	bl	80112dc <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	681b      	ldr	r3, [r3, #0]
 801228c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8012290:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	681b      	ldr	r3, [r3, #0]
 8012296:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 801229a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 801229e:	430a      	orrs	r2, r1
 80122a0:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	681b      	ldr	r3, [r3, #0]
 80122a6:	69db      	ldr	r3, [r3, #28]
 80122a8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80122ac:	2001      	movs	r0, #1
 80122ae:	f7ff f815 	bl	80112dc <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 80122b2:	687b      	ldr	r3, [r7, #4]
 80122b4:	681b      	ldr	r3, [r3, #0]
 80122b6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80122ba:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 80122bc:	2300      	movs	r3, #0
 80122be:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 80122c0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80122c4:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 80122c6:	2300      	movs	r3, #0
 80122c8:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 80122ca:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80122ce:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80122d0:	2300      	movs	r3, #0
 80122d2:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 80122d4:	2300      	movs	r3, #0
 80122d6:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 80122d8:	2300      	movs	r3, #0
 80122da:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80122dc:	2300      	movs	r3, #0
 80122de:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 80122e0:	2304      	movs	r3, #4
 80122e2:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 80122e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80122e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 80122ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80122ee:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80122f0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80122f4:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80122f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80122fa:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 80122fc:	2380      	movs	r3, #128	; 0x80
 80122fe:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8012300:	2300      	movs	r3, #0
 8012302:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8012304:	2300      	movs	r3, #0
 8012306:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	681a      	ldr	r2, [r3, #0]
 801230c:	f241 0318 	movw	r3, #4120	; 0x1018
 8012310:	4413      	add	r3, r2
 8012312:	681b      	ldr	r3, [r3, #0]
 8012314:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8012318:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 801231c:	4b3c      	ldr	r3, [pc, #240]	; (8012410 <ETH_MACDMAConfig+0x388>)
 801231e:	4013      	ands	r3, r2
 8012320:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8012324:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8012326:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8012328:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 801232a:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 801232c:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 801232e:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8012330:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8012332:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8012334:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8012336:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8012338:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 801233a:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 801233c:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 801233e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8012340:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8012342:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8012344:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8012346:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 801234a:	4313      	orrs	r3, r2
 801234c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	681a      	ldr	r2, [r3, #0]
 8012354:	f241 0318 	movw	r3, #4120	; 0x1018
 8012358:	4413      	add	r3, r2
 801235a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 801235e:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	681a      	ldr	r2, [r3, #0]
 8012364:	f241 0318 	movw	r3, #4120	; 0x1018
 8012368:	4413      	add	r3, r2
 801236a:	681b      	ldr	r3, [r3, #0]
 801236c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8012370:	2001      	movs	r0, #1
 8012372:	f7fe ffb3 	bl	80112dc <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	681a      	ldr	r2, [r3, #0]
 801237a:	f241 0318 	movw	r3, #4120	; 0x1018
 801237e:	4413      	add	r3, r2
 8012380:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8012384:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	681b      	ldr	r3, [r3, #0]
 801238a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 801238c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 801238e:	4311      	orrs	r1, r2
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8012390:	6b7a      	ldr	r2, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8012392:	4311      	orrs	r1, r2
                                          dmainit.TxDMABurstLength |
 8012394:	6bba      	ldr	r2, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8012396:	4311      	orrs	r1, r2
                                          dmainit.EnhancedDescriptorFormat |
 8012398:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 801239a:	4311      	orrs	r1, r2
                                          (dmainit.DescriptorSkipLength << 2) |
 801239c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801239e:	0092      	lsls	r2, r2, #2
                                          dmainit.EnhancedDescriptorFormat |
 80123a0:	4311      	orrs	r1, r2
                                          dmainit.DMAArbitration |
 80123a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 80123a4:	430a      	orrs	r2, r1
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80123a6:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80123aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80123ae:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	681b      	ldr	r3, [r3, #0]
 80123b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80123b8:	681b      	ldr	r3, [r3, #0]
 80123ba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80123be:	2001      	movs	r0, #1
 80123c0:	f7fe ff8c 	bl	80112dc <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	681b      	ldr	r3, [r3, #0]
 80123c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80123cc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80123d0:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	699b      	ldr	r3, [r3, #24]
 80123d6:	2b01      	cmp	r3, #1
 80123d8:	d10d      	bne.n	80123f6 <ETH_MACDMAConfig+0x36e>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80123da:	687b      	ldr	r3, [r7, #4]
 80123dc:	6819      	ldr	r1, [r3, #0]
 80123de:	687b      	ldr	r3, [r7, #4]
 80123e0:	681a      	ldr	r2, [r3, #0]
 80123e2:	f241 031c 	movw	r3, #4124	; 0x101c
 80123e6:	4413      	add	r3, r2
 80123e8:	681b      	ldr	r3, [r3, #0]
 80123ea:	4a0a      	ldr	r2, [pc, #40]	; (8012414 <ETH_MACDMAConfig+0x38c>)
 80123ec:	431a      	orrs	r2, r3
 80123ee:	f241 031c 	movw	r3, #4124	; 0x101c
 80123f2:	440b      	add	r3, r1
 80123f4:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	695b      	ldr	r3, [r3, #20]
 80123fa:	461a      	mov	r2, r3
 80123fc:	2100      	movs	r1, #0
 80123fe:	6878      	ldr	r0, [r7, #4]
 8012400:	f000 f80a 	bl	8012418 <ETH_MACAddressConfig>
}
 8012404:	bf00      	nop
 8012406:	37c0      	adds	r7, #192	; 0xc0
 8012408:	46bd      	mov	sp, r7
 801240a:	bd80      	pop	{r7, pc}
 801240c:	ff20810f 	.word	0xff20810f
 8012410:	f8de3f23 	.word	0xf8de3f23
 8012414:	00010040 	.word	0x00010040

08012418 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8012418:	b480      	push	{r7}
 801241a:	b087      	sub	sp, #28
 801241c:	af00      	add	r7, sp, #0
 801241e:	60f8      	str	r0, [r7, #12]
 8012420:	60b9      	str	r1, [r7, #8]
 8012422:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	3305      	adds	r3, #5
 8012428:	781b      	ldrb	r3, [r3, #0]
 801242a:	021b      	lsls	r3, r3, #8
 801242c:	687a      	ldr	r2, [r7, #4]
 801242e:	3204      	adds	r2, #4
 8012430:	7812      	ldrb	r2, [r2, #0]
 8012432:	4313      	orrs	r3, r2
 8012434:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8012436:	68ba      	ldr	r2, [r7, #8]
 8012438:	4b11      	ldr	r3, [pc, #68]	; (8012480 <ETH_MACAddressConfig+0x68>)
 801243a:	4413      	add	r3, r2
 801243c:	461a      	mov	r2, r3
 801243e:	697b      	ldr	r3, [r7, #20]
 8012440:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	3303      	adds	r3, #3
 8012446:	781b      	ldrb	r3, [r3, #0]
 8012448:	061a      	lsls	r2, r3, #24
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	3302      	adds	r3, #2
 801244e:	781b      	ldrb	r3, [r3, #0]
 8012450:	041b      	lsls	r3, r3, #16
 8012452:	431a      	orrs	r2, r3
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	3301      	adds	r3, #1
 8012458:	781b      	ldrb	r3, [r3, #0]
 801245a:	021b      	lsls	r3, r3, #8
 801245c:	4313      	orrs	r3, r2
 801245e:	687a      	ldr	r2, [r7, #4]
 8012460:	7812      	ldrb	r2, [r2, #0]
 8012462:	4313      	orrs	r3, r2
 8012464:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8012466:	68ba      	ldr	r2, [r7, #8]
 8012468:	4b06      	ldr	r3, [pc, #24]	; (8012484 <ETH_MACAddressConfig+0x6c>)
 801246a:	4413      	add	r3, r2
 801246c:	461a      	mov	r2, r3
 801246e:	697b      	ldr	r3, [r7, #20]
 8012470:	6013      	str	r3, [r2, #0]
}
 8012472:	bf00      	nop
 8012474:	371c      	adds	r7, #28
 8012476:	46bd      	mov	sp, r7
 8012478:	f85d 7b04 	ldr.w	r7, [sp], #4
 801247c:	4770      	bx	lr
 801247e:	bf00      	nop
 8012480:	40028040 	.word	0x40028040
 8012484:	40028044 	.word	0x40028044

08012488 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8012488:	b580      	push	{r7, lr}
 801248a:	b084      	sub	sp, #16
 801248c:	af00      	add	r7, sp, #0
 801248e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8012490:	2300      	movs	r3, #0
 8012492:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	681b      	ldr	r3, [r3, #0]
 8012498:	687a      	ldr	r2, [r7, #4]
 801249a:	6812      	ldr	r2, [r2, #0]
 801249c:	6812      	ldr	r2, [r2, #0]
 801249e:	f042 0208 	orr.w	r2, r2, #8
 80124a2:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	681b      	ldr	r3, [r3, #0]
 80124a8:	681b      	ldr	r3, [r3, #0]
 80124aa:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80124ac:	2001      	movs	r0, #1
 80124ae:	f7fe ff15 	bl	80112dc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	681b      	ldr	r3, [r3, #0]
 80124b6:	68fa      	ldr	r2, [r7, #12]
 80124b8:	601a      	str	r2, [r3, #0]
}
 80124ba:	bf00      	nop
 80124bc:	3710      	adds	r7, #16
 80124be:	46bd      	mov	sp, r7
 80124c0:	bd80      	pop	{r7, pc}

080124c2 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 80124c2:	b580      	push	{r7, lr}
 80124c4:	b084      	sub	sp, #16
 80124c6:	af00      	add	r7, sp, #0
 80124c8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80124ca:	2300      	movs	r3, #0
 80124cc:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 80124ce:	687b      	ldr	r3, [r7, #4]
 80124d0:	681b      	ldr	r3, [r3, #0]
 80124d2:	687a      	ldr	r2, [r7, #4]
 80124d4:	6812      	ldr	r2, [r2, #0]
 80124d6:	6812      	ldr	r2, [r2, #0]
 80124d8:	f042 0204 	orr.w	r2, r2, #4
 80124dc:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	681b      	ldr	r3, [r3, #0]
 80124e2:	681b      	ldr	r3, [r3, #0]
 80124e4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80124e6:	2001      	movs	r0, #1
 80124e8:	f7fe fef8 	bl	80112dc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80124ec:	687b      	ldr	r3, [r7, #4]
 80124ee:	681b      	ldr	r3, [r3, #0]
 80124f0:	68fa      	ldr	r2, [r7, #12]
 80124f2:	601a      	str	r2, [r3, #0]
}
 80124f4:	bf00      	nop
 80124f6:	3710      	adds	r7, #16
 80124f8:	46bd      	mov	sp, r7
 80124fa:	bd80      	pop	{r7, pc}

080124fc <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 80124fc:	b480      	push	{r7}
 80124fe:	b083      	sub	sp, #12
 8012500:	af00      	add	r7, sp, #0
 8012502:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	6819      	ldr	r1, [r3, #0]
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	681a      	ldr	r2, [r3, #0]
 801250c:	f241 0318 	movw	r3, #4120	; 0x1018
 8012510:	4413      	add	r3, r2
 8012512:	681b      	ldr	r3, [r3, #0]
 8012514:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8012518:	f241 0318 	movw	r3, #4120	; 0x1018
 801251c:	440b      	add	r3, r1
 801251e:	601a      	str	r2, [r3, #0]
}
 8012520:	bf00      	nop
 8012522:	370c      	adds	r7, #12
 8012524:	46bd      	mov	sp, r7
 8012526:	f85d 7b04 	ldr.w	r7, [sp], #4
 801252a:	4770      	bx	lr

0801252c <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 801252c:	b480      	push	{r7}
 801252e:	b083      	sub	sp, #12
 8012530:	af00      	add	r7, sp, #0
 8012532:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	6819      	ldr	r1, [r3, #0]
 8012538:	687b      	ldr	r3, [r7, #4]
 801253a:	681a      	ldr	r2, [r3, #0]
 801253c:	f241 0318 	movw	r3, #4120	; 0x1018
 8012540:	4413      	add	r3, r2
 8012542:	681b      	ldr	r3, [r3, #0]
 8012544:	f043 0202 	orr.w	r2, r3, #2
 8012548:	f241 0318 	movw	r3, #4120	; 0x1018
 801254c:	440b      	add	r3, r1
 801254e:	601a      	str	r2, [r3, #0]
}
 8012550:	bf00      	nop
 8012552:	370c      	adds	r7, #12
 8012554:	46bd      	mov	sp, r7
 8012556:	f85d 7b04 	ldr.w	r7, [sp], #4
 801255a:	4770      	bx	lr

0801255c <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 801255c:	b580      	push	{r7, lr}
 801255e:	b084      	sub	sp, #16
 8012560:	af00      	add	r7, sp, #0
 8012562:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8012564:	2300      	movs	r3, #0
 8012566:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8012568:	687b      	ldr	r3, [r7, #4]
 801256a:	6819      	ldr	r1, [r3, #0]
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	681a      	ldr	r2, [r3, #0]
 8012570:	f241 0318 	movw	r3, #4120	; 0x1018
 8012574:	4413      	add	r3, r2
 8012576:	681b      	ldr	r3, [r3, #0]
 8012578:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 801257c:	f241 0318 	movw	r3, #4120	; 0x1018
 8012580:	440b      	add	r3, r1
 8012582:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8012584:	687b      	ldr	r3, [r7, #4]
 8012586:	681a      	ldr	r2, [r3, #0]
 8012588:	f241 0318 	movw	r3, #4120	; 0x1018
 801258c:	4413      	add	r3, r2
 801258e:	681b      	ldr	r3, [r3, #0]
 8012590:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8012592:	2001      	movs	r0, #1
 8012594:	f7fe fea2 	bl	80112dc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8012598:	687b      	ldr	r3, [r7, #4]
 801259a:	6819      	ldr	r1, [r3, #0]
 801259c:	68fa      	ldr	r2, [r7, #12]
 801259e:	f241 0318 	movw	r3, #4120	; 0x1018
 80125a2:	440b      	add	r3, r1
 80125a4:	601a      	str	r2, [r3, #0]
}
 80125a6:	bf00      	nop
 80125a8:	3710      	adds	r7, #16
 80125aa:	46bd      	mov	sp, r7
 80125ac:	bd80      	pop	{r7, pc}
	...

080125b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80125b0:	b480      	push	{r7}
 80125b2:	b089      	sub	sp, #36	; 0x24
 80125b4:	af00      	add	r7, sp, #0
 80125b6:	6078      	str	r0, [r7, #4]
 80125b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80125ba:	2300      	movs	r3, #0
 80125bc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80125be:	2300      	movs	r3, #0
 80125c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80125c2:	2300      	movs	r3, #0
 80125c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80125c6:	2300      	movs	r3, #0
 80125c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80125ca:	2300      	movs	r3, #0
 80125cc:	61fb      	str	r3, [r7, #28]
 80125ce:	e175      	b.n	80128bc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80125d0:	2201      	movs	r2, #1
 80125d2:	69fb      	ldr	r3, [r7, #28]
 80125d4:	fa02 f303 	lsl.w	r3, r2, r3
 80125d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80125da:	683b      	ldr	r3, [r7, #0]
 80125dc:	681a      	ldr	r2, [r3, #0]
 80125de:	697b      	ldr	r3, [r7, #20]
 80125e0:	4013      	ands	r3, r2
 80125e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80125e4:	693a      	ldr	r2, [r7, #16]
 80125e6:	697b      	ldr	r3, [r7, #20]
 80125e8:	429a      	cmp	r2, r3
 80125ea:	f040 8164 	bne.w	80128b6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80125ee:	683b      	ldr	r3, [r7, #0]
 80125f0:	685b      	ldr	r3, [r3, #4]
 80125f2:	2b01      	cmp	r3, #1
 80125f4:	d00b      	beq.n	801260e <HAL_GPIO_Init+0x5e>
 80125f6:	683b      	ldr	r3, [r7, #0]
 80125f8:	685b      	ldr	r3, [r3, #4]
 80125fa:	2b02      	cmp	r3, #2
 80125fc:	d007      	beq.n	801260e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80125fe:	683b      	ldr	r3, [r7, #0]
 8012600:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8012602:	2b11      	cmp	r3, #17
 8012604:	d003      	beq.n	801260e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8012606:	683b      	ldr	r3, [r7, #0]
 8012608:	685b      	ldr	r3, [r3, #4]
 801260a:	2b12      	cmp	r3, #18
 801260c:	d130      	bne.n	8012670 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	689b      	ldr	r3, [r3, #8]
 8012612:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8012614:	69fb      	ldr	r3, [r7, #28]
 8012616:	005b      	lsls	r3, r3, #1
 8012618:	2203      	movs	r2, #3
 801261a:	fa02 f303 	lsl.w	r3, r2, r3
 801261e:	43db      	mvns	r3, r3
 8012620:	69ba      	ldr	r2, [r7, #24]
 8012622:	4013      	ands	r3, r2
 8012624:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8012626:	683b      	ldr	r3, [r7, #0]
 8012628:	68da      	ldr	r2, [r3, #12]
 801262a:	69fb      	ldr	r3, [r7, #28]
 801262c:	005b      	lsls	r3, r3, #1
 801262e:	fa02 f303 	lsl.w	r3, r2, r3
 8012632:	69ba      	ldr	r2, [r7, #24]
 8012634:	4313      	orrs	r3, r2
 8012636:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	69ba      	ldr	r2, [r7, #24]
 801263c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	685b      	ldr	r3, [r3, #4]
 8012642:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8012644:	2201      	movs	r2, #1
 8012646:	69fb      	ldr	r3, [r7, #28]
 8012648:	fa02 f303 	lsl.w	r3, r2, r3
 801264c:	43db      	mvns	r3, r3
 801264e:	69ba      	ldr	r2, [r7, #24]
 8012650:	4013      	ands	r3, r2
 8012652:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8012654:	683b      	ldr	r3, [r7, #0]
 8012656:	685b      	ldr	r3, [r3, #4]
 8012658:	091b      	lsrs	r3, r3, #4
 801265a:	f003 0201 	and.w	r2, r3, #1
 801265e:	69fb      	ldr	r3, [r7, #28]
 8012660:	fa02 f303 	lsl.w	r3, r2, r3
 8012664:	69ba      	ldr	r2, [r7, #24]
 8012666:	4313      	orrs	r3, r2
 8012668:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	69ba      	ldr	r2, [r7, #24]
 801266e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	68db      	ldr	r3, [r3, #12]
 8012674:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8012676:	69fb      	ldr	r3, [r7, #28]
 8012678:	005b      	lsls	r3, r3, #1
 801267a:	2203      	movs	r2, #3
 801267c:	fa02 f303 	lsl.w	r3, r2, r3
 8012680:	43db      	mvns	r3, r3
 8012682:	69ba      	ldr	r2, [r7, #24]
 8012684:	4013      	ands	r3, r2
 8012686:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8012688:	683b      	ldr	r3, [r7, #0]
 801268a:	689a      	ldr	r2, [r3, #8]
 801268c:	69fb      	ldr	r3, [r7, #28]
 801268e:	005b      	lsls	r3, r3, #1
 8012690:	fa02 f303 	lsl.w	r3, r2, r3
 8012694:	69ba      	ldr	r2, [r7, #24]
 8012696:	4313      	orrs	r3, r2
 8012698:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	69ba      	ldr	r2, [r7, #24]
 801269e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80126a0:	683b      	ldr	r3, [r7, #0]
 80126a2:	685b      	ldr	r3, [r3, #4]
 80126a4:	2b02      	cmp	r3, #2
 80126a6:	d003      	beq.n	80126b0 <HAL_GPIO_Init+0x100>
 80126a8:	683b      	ldr	r3, [r7, #0]
 80126aa:	685b      	ldr	r3, [r3, #4]
 80126ac:	2b12      	cmp	r3, #18
 80126ae:	d123      	bne.n	80126f8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80126b0:	69fb      	ldr	r3, [r7, #28]
 80126b2:	08da      	lsrs	r2, r3, #3
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	3208      	adds	r2, #8
 80126b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80126bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80126be:	69fb      	ldr	r3, [r7, #28]
 80126c0:	f003 0307 	and.w	r3, r3, #7
 80126c4:	009b      	lsls	r3, r3, #2
 80126c6:	220f      	movs	r2, #15
 80126c8:	fa02 f303 	lsl.w	r3, r2, r3
 80126cc:	43db      	mvns	r3, r3
 80126ce:	69ba      	ldr	r2, [r7, #24]
 80126d0:	4013      	ands	r3, r2
 80126d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80126d4:	683b      	ldr	r3, [r7, #0]
 80126d6:	691a      	ldr	r2, [r3, #16]
 80126d8:	69fb      	ldr	r3, [r7, #28]
 80126da:	f003 0307 	and.w	r3, r3, #7
 80126de:	009b      	lsls	r3, r3, #2
 80126e0:	fa02 f303 	lsl.w	r3, r2, r3
 80126e4:	69ba      	ldr	r2, [r7, #24]
 80126e6:	4313      	orrs	r3, r2
 80126e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80126ea:	69fb      	ldr	r3, [r7, #28]
 80126ec:	08da      	lsrs	r2, r3, #3
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	3208      	adds	r2, #8
 80126f2:	69b9      	ldr	r1, [r7, #24]
 80126f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	681b      	ldr	r3, [r3, #0]
 80126fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80126fe:	69fb      	ldr	r3, [r7, #28]
 8012700:	005b      	lsls	r3, r3, #1
 8012702:	2203      	movs	r2, #3
 8012704:	fa02 f303 	lsl.w	r3, r2, r3
 8012708:	43db      	mvns	r3, r3
 801270a:	69ba      	ldr	r2, [r7, #24]
 801270c:	4013      	ands	r3, r2
 801270e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8012710:	683b      	ldr	r3, [r7, #0]
 8012712:	685b      	ldr	r3, [r3, #4]
 8012714:	f003 0203 	and.w	r2, r3, #3
 8012718:	69fb      	ldr	r3, [r7, #28]
 801271a:	005b      	lsls	r3, r3, #1
 801271c:	fa02 f303 	lsl.w	r3, r2, r3
 8012720:	69ba      	ldr	r2, [r7, #24]
 8012722:	4313      	orrs	r3, r2
 8012724:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8012726:	687b      	ldr	r3, [r7, #4]
 8012728:	69ba      	ldr	r2, [r7, #24]
 801272a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 801272c:	683b      	ldr	r3, [r7, #0]
 801272e:	685b      	ldr	r3, [r3, #4]
 8012730:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012734:	2b00      	cmp	r3, #0
 8012736:	f000 80be 	beq.w	80128b6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801273a:	4a65      	ldr	r2, [pc, #404]	; (80128d0 <HAL_GPIO_Init+0x320>)
 801273c:	4b64      	ldr	r3, [pc, #400]	; (80128d0 <HAL_GPIO_Init+0x320>)
 801273e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012740:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8012744:	6453      	str	r3, [r2, #68]	; 0x44
 8012746:	4b62      	ldr	r3, [pc, #392]	; (80128d0 <HAL_GPIO_Init+0x320>)
 8012748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801274a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801274e:	60fb      	str	r3, [r7, #12]
 8012750:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8012752:	4a60      	ldr	r2, [pc, #384]	; (80128d4 <HAL_GPIO_Init+0x324>)
 8012754:	69fb      	ldr	r3, [r7, #28]
 8012756:	089b      	lsrs	r3, r3, #2
 8012758:	3302      	adds	r3, #2
 801275a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801275e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8012760:	69fb      	ldr	r3, [r7, #28]
 8012762:	f003 0303 	and.w	r3, r3, #3
 8012766:	009b      	lsls	r3, r3, #2
 8012768:	220f      	movs	r2, #15
 801276a:	fa02 f303 	lsl.w	r3, r2, r3
 801276e:	43db      	mvns	r3, r3
 8012770:	69ba      	ldr	r2, [r7, #24]
 8012772:	4013      	ands	r3, r2
 8012774:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8012776:	687b      	ldr	r3, [r7, #4]
 8012778:	4a57      	ldr	r2, [pc, #348]	; (80128d8 <HAL_GPIO_Init+0x328>)
 801277a:	4293      	cmp	r3, r2
 801277c:	d037      	beq.n	80127ee <HAL_GPIO_Init+0x23e>
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	4a56      	ldr	r2, [pc, #344]	; (80128dc <HAL_GPIO_Init+0x32c>)
 8012782:	4293      	cmp	r3, r2
 8012784:	d031      	beq.n	80127ea <HAL_GPIO_Init+0x23a>
 8012786:	687b      	ldr	r3, [r7, #4]
 8012788:	4a55      	ldr	r2, [pc, #340]	; (80128e0 <HAL_GPIO_Init+0x330>)
 801278a:	4293      	cmp	r3, r2
 801278c:	d02b      	beq.n	80127e6 <HAL_GPIO_Init+0x236>
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	4a54      	ldr	r2, [pc, #336]	; (80128e4 <HAL_GPIO_Init+0x334>)
 8012792:	4293      	cmp	r3, r2
 8012794:	d025      	beq.n	80127e2 <HAL_GPIO_Init+0x232>
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	4a53      	ldr	r2, [pc, #332]	; (80128e8 <HAL_GPIO_Init+0x338>)
 801279a:	4293      	cmp	r3, r2
 801279c:	d01f      	beq.n	80127de <HAL_GPIO_Init+0x22e>
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	4a52      	ldr	r2, [pc, #328]	; (80128ec <HAL_GPIO_Init+0x33c>)
 80127a2:	4293      	cmp	r3, r2
 80127a4:	d019      	beq.n	80127da <HAL_GPIO_Init+0x22a>
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	4a51      	ldr	r2, [pc, #324]	; (80128f0 <HAL_GPIO_Init+0x340>)
 80127aa:	4293      	cmp	r3, r2
 80127ac:	d013      	beq.n	80127d6 <HAL_GPIO_Init+0x226>
 80127ae:	687b      	ldr	r3, [r7, #4]
 80127b0:	4a50      	ldr	r2, [pc, #320]	; (80128f4 <HAL_GPIO_Init+0x344>)
 80127b2:	4293      	cmp	r3, r2
 80127b4:	d00d      	beq.n	80127d2 <HAL_GPIO_Init+0x222>
 80127b6:	687b      	ldr	r3, [r7, #4]
 80127b8:	4a4f      	ldr	r2, [pc, #316]	; (80128f8 <HAL_GPIO_Init+0x348>)
 80127ba:	4293      	cmp	r3, r2
 80127bc:	d007      	beq.n	80127ce <HAL_GPIO_Init+0x21e>
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	4a4e      	ldr	r2, [pc, #312]	; (80128fc <HAL_GPIO_Init+0x34c>)
 80127c2:	4293      	cmp	r3, r2
 80127c4:	d101      	bne.n	80127ca <HAL_GPIO_Init+0x21a>
 80127c6:	2309      	movs	r3, #9
 80127c8:	e012      	b.n	80127f0 <HAL_GPIO_Init+0x240>
 80127ca:	230a      	movs	r3, #10
 80127cc:	e010      	b.n	80127f0 <HAL_GPIO_Init+0x240>
 80127ce:	2308      	movs	r3, #8
 80127d0:	e00e      	b.n	80127f0 <HAL_GPIO_Init+0x240>
 80127d2:	2307      	movs	r3, #7
 80127d4:	e00c      	b.n	80127f0 <HAL_GPIO_Init+0x240>
 80127d6:	2306      	movs	r3, #6
 80127d8:	e00a      	b.n	80127f0 <HAL_GPIO_Init+0x240>
 80127da:	2305      	movs	r3, #5
 80127dc:	e008      	b.n	80127f0 <HAL_GPIO_Init+0x240>
 80127de:	2304      	movs	r3, #4
 80127e0:	e006      	b.n	80127f0 <HAL_GPIO_Init+0x240>
 80127e2:	2303      	movs	r3, #3
 80127e4:	e004      	b.n	80127f0 <HAL_GPIO_Init+0x240>
 80127e6:	2302      	movs	r3, #2
 80127e8:	e002      	b.n	80127f0 <HAL_GPIO_Init+0x240>
 80127ea:	2301      	movs	r3, #1
 80127ec:	e000      	b.n	80127f0 <HAL_GPIO_Init+0x240>
 80127ee:	2300      	movs	r3, #0
 80127f0:	69fa      	ldr	r2, [r7, #28]
 80127f2:	f002 0203 	and.w	r2, r2, #3
 80127f6:	0092      	lsls	r2, r2, #2
 80127f8:	4093      	lsls	r3, r2
 80127fa:	69ba      	ldr	r2, [r7, #24]
 80127fc:	4313      	orrs	r3, r2
 80127fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8012800:	4934      	ldr	r1, [pc, #208]	; (80128d4 <HAL_GPIO_Init+0x324>)
 8012802:	69fb      	ldr	r3, [r7, #28]
 8012804:	089b      	lsrs	r3, r3, #2
 8012806:	3302      	adds	r3, #2
 8012808:	69ba      	ldr	r2, [r7, #24]
 801280a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 801280e:	4b3c      	ldr	r3, [pc, #240]	; (8012900 <HAL_GPIO_Init+0x350>)
 8012810:	681b      	ldr	r3, [r3, #0]
 8012812:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8012814:	693b      	ldr	r3, [r7, #16]
 8012816:	43db      	mvns	r3, r3
 8012818:	69ba      	ldr	r2, [r7, #24]
 801281a:	4013      	ands	r3, r2
 801281c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 801281e:	683b      	ldr	r3, [r7, #0]
 8012820:	685b      	ldr	r3, [r3, #4]
 8012822:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8012826:	2b00      	cmp	r3, #0
 8012828:	d003      	beq.n	8012832 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 801282a:	69ba      	ldr	r2, [r7, #24]
 801282c:	693b      	ldr	r3, [r7, #16]
 801282e:	4313      	orrs	r3, r2
 8012830:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8012832:	4a33      	ldr	r2, [pc, #204]	; (8012900 <HAL_GPIO_Init+0x350>)
 8012834:	69bb      	ldr	r3, [r7, #24]
 8012836:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8012838:	4b31      	ldr	r3, [pc, #196]	; (8012900 <HAL_GPIO_Init+0x350>)
 801283a:	685b      	ldr	r3, [r3, #4]
 801283c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801283e:	693b      	ldr	r3, [r7, #16]
 8012840:	43db      	mvns	r3, r3
 8012842:	69ba      	ldr	r2, [r7, #24]
 8012844:	4013      	ands	r3, r2
 8012846:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8012848:	683b      	ldr	r3, [r7, #0]
 801284a:	685b      	ldr	r3, [r3, #4]
 801284c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012850:	2b00      	cmp	r3, #0
 8012852:	d003      	beq.n	801285c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8012854:	69ba      	ldr	r2, [r7, #24]
 8012856:	693b      	ldr	r3, [r7, #16]
 8012858:	4313      	orrs	r3, r2
 801285a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 801285c:	4a28      	ldr	r2, [pc, #160]	; (8012900 <HAL_GPIO_Init+0x350>)
 801285e:	69bb      	ldr	r3, [r7, #24]
 8012860:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8012862:	4b27      	ldr	r3, [pc, #156]	; (8012900 <HAL_GPIO_Init+0x350>)
 8012864:	689b      	ldr	r3, [r3, #8]
 8012866:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8012868:	693b      	ldr	r3, [r7, #16]
 801286a:	43db      	mvns	r3, r3
 801286c:	69ba      	ldr	r2, [r7, #24]
 801286e:	4013      	ands	r3, r2
 8012870:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8012872:	683b      	ldr	r3, [r7, #0]
 8012874:	685b      	ldr	r3, [r3, #4]
 8012876:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801287a:	2b00      	cmp	r3, #0
 801287c:	d003      	beq.n	8012886 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 801287e:	69ba      	ldr	r2, [r7, #24]
 8012880:	693b      	ldr	r3, [r7, #16]
 8012882:	4313      	orrs	r3, r2
 8012884:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8012886:	4a1e      	ldr	r2, [pc, #120]	; (8012900 <HAL_GPIO_Init+0x350>)
 8012888:	69bb      	ldr	r3, [r7, #24]
 801288a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 801288c:	4b1c      	ldr	r3, [pc, #112]	; (8012900 <HAL_GPIO_Init+0x350>)
 801288e:	68db      	ldr	r3, [r3, #12]
 8012890:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8012892:	693b      	ldr	r3, [r7, #16]
 8012894:	43db      	mvns	r3, r3
 8012896:	69ba      	ldr	r2, [r7, #24]
 8012898:	4013      	ands	r3, r2
 801289a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 801289c:	683b      	ldr	r3, [r7, #0]
 801289e:	685b      	ldr	r3, [r3, #4]
 80128a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80128a4:	2b00      	cmp	r3, #0
 80128a6:	d003      	beq.n	80128b0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80128a8:	69ba      	ldr	r2, [r7, #24]
 80128aa:	693b      	ldr	r3, [r7, #16]
 80128ac:	4313      	orrs	r3, r2
 80128ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80128b0:	4a13      	ldr	r2, [pc, #76]	; (8012900 <HAL_GPIO_Init+0x350>)
 80128b2:	69bb      	ldr	r3, [r7, #24]
 80128b4:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80128b6:	69fb      	ldr	r3, [r7, #28]
 80128b8:	3301      	adds	r3, #1
 80128ba:	61fb      	str	r3, [r7, #28]
 80128bc:	69fb      	ldr	r3, [r7, #28]
 80128be:	2b0f      	cmp	r3, #15
 80128c0:	f67f ae86 	bls.w	80125d0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80128c4:	bf00      	nop
 80128c6:	3724      	adds	r7, #36	; 0x24
 80128c8:	46bd      	mov	sp, r7
 80128ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128ce:	4770      	bx	lr
 80128d0:	40023800 	.word	0x40023800
 80128d4:	40013800 	.word	0x40013800
 80128d8:	40020000 	.word	0x40020000
 80128dc:	40020400 	.word	0x40020400
 80128e0:	40020800 	.word	0x40020800
 80128e4:	40020c00 	.word	0x40020c00
 80128e8:	40021000 	.word	0x40021000
 80128ec:	40021400 	.word	0x40021400
 80128f0:	40021800 	.word	0x40021800
 80128f4:	40021c00 	.word	0x40021c00
 80128f8:	40022000 	.word	0x40022000
 80128fc:	40022400 	.word	0x40022400
 8012900:	40013c00 	.word	0x40013c00

08012904 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8012904:	b480      	push	{r7}
 8012906:	b083      	sub	sp, #12
 8012908:	af00      	add	r7, sp, #0
 801290a:	6078      	str	r0, [r7, #4]
 801290c:	460b      	mov	r3, r1
 801290e:	807b      	strh	r3, [r7, #2]
 8012910:	4613      	mov	r3, r2
 8012912:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8012914:	787b      	ldrb	r3, [r7, #1]
 8012916:	2b00      	cmp	r3, #0
 8012918:	d003      	beq.n	8012922 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 801291a:	887a      	ldrh	r2, [r7, #2]
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8012920:	e003      	b.n	801292a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8012922:	887b      	ldrh	r3, [r7, #2]
 8012924:	041a      	lsls	r2, r3, #16
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	619a      	str	r2, [r3, #24]
}
 801292a:	bf00      	nop
 801292c:	370c      	adds	r7, #12
 801292e:	46bd      	mov	sp, r7
 8012930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012934:	4770      	bx	lr
	...

08012938 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8012938:	b580      	push	{r7, lr}
 801293a:	b082      	sub	sp, #8
 801293c:	af00      	add	r7, sp, #0
 801293e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	2b00      	cmp	r3, #0
 8012944:	d101      	bne.n	801294a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8012946:	2301      	movs	r3, #1
 8012948:	e07e      	b.n	8012a48 <HAL_I2C_Init+0x110>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8012950:	b2db      	uxtb	r3, r3
 8012952:	2b00      	cmp	r3, #0
 8012954:	d106      	bne.n	8012964 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	2200      	movs	r2, #0
 801295a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 801295e:	6878      	ldr	r0, [r7, #4]
 8012960:	f7fe f9ea 	bl	8010d38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	2224      	movs	r2, #36	; 0x24
 8012968:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	681b      	ldr	r3, [r3, #0]
 8012970:	687a      	ldr	r2, [r7, #4]
 8012972:	6812      	ldr	r2, [r2, #0]
 8012974:	6812      	ldr	r2, [r2, #0]
 8012976:	f022 0201 	bic.w	r2, r2, #1
 801297a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	681b      	ldr	r3, [r3, #0]
 8012980:	687a      	ldr	r2, [r7, #4]
 8012982:	6852      	ldr	r2, [r2, #4]
 8012984:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8012988:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	681b      	ldr	r3, [r3, #0]
 801298e:	687a      	ldr	r2, [r7, #4]
 8012990:	6812      	ldr	r2, [r2, #0]
 8012992:	6892      	ldr	r2, [r2, #8]
 8012994:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8012998:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	68db      	ldr	r3, [r3, #12]
 801299e:	2b01      	cmp	r3, #1
 80129a0:	d107      	bne.n	80129b2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	681b      	ldr	r3, [r3, #0]
 80129a6:	687a      	ldr	r2, [r7, #4]
 80129a8:	6892      	ldr	r2, [r2, #8]
 80129aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80129ae:	609a      	str	r2, [r3, #8]
 80129b0:	e006      	b.n	80129c0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80129b2:	687b      	ldr	r3, [r7, #4]
 80129b4:	681b      	ldr	r3, [r3, #0]
 80129b6:	687a      	ldr	r2, [r7, #4]
 80129b8:	6892      	ldr	r2, [r2, #8]
 80129ba:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80129be:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	68db      	ldr	r3, [r3, #12]
 80129c4:	2b02      	cmp	r3, #2
 80129c6:	d104      	bne.n	80129d2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	681b      	ldr	r3, [r3, #0]
 80129cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80129d0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80129d2:	687b      	ldr	r3, [r7, #4]
 80129d4:	681a      	ldr	r2, [r3, #0]
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	681b      	ldr	r3, [r3, #0]
 80129da:	6859      	ldr	r1, [r3, #4]
 80129dc:	4b1c      	ldr	r3, [pc, #112]	; (8012a50 <HAL_I2C_Init+0x118>)
 80129de:	430b      	orrs	r3, r1
 80129e0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80129e2:	687b      	ldr	r3, [r7, #4]
 80129e4:	681b      	ldr	r3, [r3, #0]
 80129e6:	687a      	ldr	r2, [r7, #4]
 80129e8:	6812      	ldr	r2, [r2, #0]
 80129ea:	68d2      	ldr	r2, [r2, #12]
 80129ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80129f0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	681b      	ldr	r3, [r3, #0]
 80129f6:	687a      	ldr	r2, [r7, #4]
 80129f8:	6911      	ldr	r1, [r2, #16]
 80129fa:	687a      	ldr	r2, [r7, #4]
 80129fc:	6952      	ldr	r2, [r2, #20]
 80129fe:	4311      	orrs	r1, r2
 8012a00:	687a      	ldr	r2, [r7, #4]
 8012a02:	6992      	ldr	r2, [r2, #24]
 8012a04:	0212      	lsls	r2, r2, #8
 8012a06:	430a      	orrs	r2, r1
 8012a08:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	681b      	ldr	r3, [r3, #0]
 8012a0e:	687a      	ldr	r2, [r7, #4]
 8012a10:	69d1      	ldr	r1, [r2, #28]
 8012a12:	687a      	ldr	r2, [r7, #4]
 8012a14:	6a12      	ldr	r2, [r2, #32]
 8012a16:	430a      	orrs	r2, r1
 8012a18:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8012a1a:	687b      	ldr	r3, [r7, #4]
 8012a1c:	681b      	ldr	r3, [r3, #0]
 8012a1e:	687a      	ldr	r2, [r7, #4]
 8012a20:	6812      	ldr	r2, [r2, #0]
 8012a22:	6812      	ldr	r2, [r2, #0]
 8012a24:	f042 0201 	orr.w	r2, r2, #1
 8012a28:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	2200      	movs	r2, #0
 8012a2e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	2220      	movs	r2, #32
 8012a34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8012a38:	687b      	ldr	r3, [r7, #4]
 8012a3a:	2200      	movs	r2, #0
 8012a3c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8012a3e:	687b      	ldr	r3, [r7, #4]
 8012a40:	2200      	movs	r2, #0
 8012a42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8012a46:	2300      	movs	r3, #0
}
 8012a48:	4618      	mov	r0, r3
 8012a4a:	3708      	adds	r7, #8
 8012a4c:	46bd      	mov	sp, r7
 8012a4e:	bd80      	pop	{r7, pc}
 8012a50:	02008000 	.word	0x02008000

08012a54 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8012a54:	b480      	push	{r7}
 8012a56:	b083      	sub	sp, #12
 8012a58:	af00      	add	r7, sp, #0
 8012a5a:	6078      	str	r0, [r7, #4]
 8012a5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8012a64:	b2db      	uxtb	r3, r3
 8012a66:	2b20      	cmp	r3, #32
 8012a68:	d138      	bne.n	8012adc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8012a6a:	687b      	ldr	r3, [r7, #4]
 8012a6c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012a70:	2b01      	cmp	r3, #1
 8012a72:	d101      	bne.n	8012a78 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8012a74:	2302      	movs	r3, #2
 8012a76:	e032      	b.n	8012ade <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8012a78:	687b      	ldr	r3, [r7, #4]
 8012a7a:	2201      	movs	r2, #1
 8012a7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8012a80:	687b      	ldr	r3, [r7, #4]
 8012a82:	2224      	movs	r2, #36	; 0x24
 8012a84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	681b      	ldr	r3, [r3, #0]
 8012a8c:	687a      	ldr	r2, [r7, #4]
 8012a8e:	6812      	ldr	r2, [r2, #0]
 8012a90:	6812      	ldr	r2, [r2, #0]
 8012a92:	f022 0201 	bic.w	r2, r2, #1
 8012a96:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8012a98:	687b      	ldr	r3, [r7, #4]
 8012a9a:	681b      	ldr	r3, [r3, #0]
 8012a9c:	687a      	ldr	r2, [r7, #4]
 8012a9e:	6812      	ldr	r2, [r2, #0]
 8012aa0:	6812      	ldr	r2, [r2, #0]
 8012aa2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8012aa6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	681b      	ldr	r3, [r3, #0]
 8012aac:	687a      	ldr	r2, [r7, #4]
 8012aae:	6812      	ldr	r2, [r2, #0]
 8012ab0:	6811      	ldr	r1, [r2, #0]
 8012ab2:	683a      	ldr	r2, [r7, #0]
 8012ab4:	430a      	orrs	r2, r1
 8012ab6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8012ab8:	687b      	ldr	r3, [r7, #4]
 8012aba:	681b      	ldr	r3, [r3, #0]
 8012abc:	687a      	ldr	r2, [r7, #4]
 8012abe:	6812      	ldr	r2, [r2, #0]
 8012ac0:	6812      	ldr	r2, [r2, #0]
 8012ac2:	f042 0201 	orr.w	r2, r2, #1
 8012ac6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8012ac8:	687b      	ldr	r3, [r7, #4]
 8012aca:	2220      	movs	r2, #32
 8012acc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8012ad0:	687b      	ldr	r3, [r7, #4]
 8012ad2:	2200      	movs	r2, #0
 8012ad4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8012ad8:	2300      	movs	r3, #0
 8012ada:	e000      	b.n	8012ade <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8012adc:	2302      	movs	r3, #2
  }
}
 8012ade:	4618      	mov	r0, r3
 8012ae0:	370c      	adds	r7, #12
 8012ae2:	46bd      	mov	sp, r7
 8012ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ae8:	4770      	bx	lr

08012aea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8012aea:	b480      	push	{r7}
 8012aec:	b085      	sub	sp, #20
 8012aee:	af00      	add	r7, sp, #0
 8012af0:	6078      	str	r0, [r7, #4]
 8012af2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8012af4:	687b      	ldr	r3, [r7, #4]
 8012af6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8012afa:	b2db      	uxtb	r3, r3
 8012afc:	2b20      	cmp	r3, #32
 8012afe:	d139      	bne.n	8012b74 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012b06:	2b01      	cmp	r3, #1
 8012b08:	d101      	bne.n	8012b0e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8012b0a:	2302      	movs	r3, #2
 8012b0c:	e033      	b.n	8012b76 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	2201      	movs	r2, #1
 8012b12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8012b16:	687b      	ldr	r3, [r7, #4]
 8012b18:	2224      	movs	r2, #36	; 0x24
 8012b1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8012b1e:	687b      	ldr	r3, [r7, #4]
 8012b20:	681b      	ldr	r3, [r3, #0]
 8012b22:	687a      	ldr	r2, [r7, #4]
 8012b24:	6812      	ldr	r2, [r2, #0]
 8012b26:	6812      	ldr	r2, [r2, #0]
 8012b28:	f022 0201 	bic.w	r2, r2, #1
 8012b2c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	681b      	ldr	r3, [r3, #0]
 8012b32:	681b      	ldr	r3, [r3, #0]
 8012b34:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8012b36:	68fb      	ldr	r3, [r7, #12]
 8012b38:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8012b3c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8012b3e:	683b      	ldr	r3, [r7, #0]
 8012b40:	021b      	lsls	r3, r3, #8
 8012b42:	68fa      	ldr	r2, [r7, #12]
 8012b44:	4313      	orrs	r3, r2
 8012b46:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	681b      	ldr	r3, [r3, #0]
 8012b4c:	68fa      	ldr	r2, [r7, #12]
 8012b4e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	681b      	ldr	r3, [r3, #0]
 8012b54:	687a      	ldr	r2, [r7, #4]
 8012b56:	6812      	ldr	r2, [r2, #0]
 8012b58:	6812      	ldr	r2, [r2, #0]
 8012b5a:	f042 0201 	orr.w	r2, r2, #1
 8012b5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8012b60:	687b      	ldr	r3, [r7, #4]
 8012b62:	2220      	movs	r2, #32
 8012b64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	2200      	movs	r2, #0
 8012b6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8012b70:	2300      	movs	r3, #0
 8012b72:	e000      	b.n	8012b76 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8012b74:	2302      	movs	r3, #2
  }
}
 8012b76:	4618      	mov	r0, r3
 8012b78:	3714      	adds	r7, #20
 8012b7a:	46bd      	mov	sp, r7
 8012b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b80:	4770      	bx	lr
	...

08012b84 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8012b84:	b480      	push	{r7}
 8012b86:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8012b88:	4a05      	ldr	r2, [pc, #20]	; (8012ba0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8012b8a:	4b05      	ldr	r3, [pc, #20]	; (8012ba0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8012b8c:	681b      	ldr	r3, [r3, #0]
 8012b8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012b92:	6013      	str	r3, [r2, #0]
}
 8012b94:	bf00      	nop
 8012b96:	46bd      	mov	sp, r7
 8012b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b9c:	4770      	bx	lr
 8012b9e:	bf00      	nop
 8012ba0:	40007000 	.word	0x40007000

08012ba4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8012ba4:	b580      	push	{r7, lr}
 8012ba6:	b082      	sub	sp, #8
 8012ba8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8012baa:	2300      	movs	r3, #0
 8012bac:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8012bae:	4a23      	ldr	r2, [pc, #140]	; (8012c3c <HAL_PWREx_EnableOverDrive+0x98>)
 8012bb0:	4b22      	ldr	r3, [pc, #136]	; (8012c3c <HAL_PWREx_EnableOverDrive+0x98>)
 8012bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012bb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012bb8:	6413      	str	r3, [r2, #64]	; 0x40
 8012bba:	4b20      	ldr	r3, [pc, #128]	; (8012c3c <HAL_PWREx_EnableOverDrive+0x98>)
 8012bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012bbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012bc2:	603b      	str	r3, [r7, #0]
 8012bc4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8012bc6:	4a1e      	ldr	r2, [pc, #120]	; (8012c40 <HAL_PWREx_EnableOverDrive+0x9c>)
 8012bc8:	4b1d      	ldr	r3, [pc, #116]	; (8012c40 <HAL_PWREx_EnableOverDrive+0x9c>)
 8012bca:	681b      	ldr	r3, [r3, #0]
 8012bcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8012bd0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8012bd2:	f7fe fb77 	bl	80112c4 <HAL_GetTick>
 8012bd6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8012bd8:	e009      	b.n	8012bee <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8012bda:	f7fe fb73 	bl	80112c4 <HAL_GetTick>
 8012bde:	4602      	mov	r2, r0
 8012be0:	687b      	ldr	r3, [r7, #4]
 8012be2:	1ad3      	subs	r3, r2, r3
 8012be4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8012be8:	d901      	bls.n	8012bee <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8012bea:	2303      	movs	r3, #3
 8012bec:	e022      	b.n	8012c34 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8012bee:	4b14      	ldr	r3, [pc, #80]	; (8012c40 <HAL_PWREx_EnableOverDrive+0x9c>)
 8012bf0:	685b      	ldr	r3, [r3, #4]
 8012bf2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8012bf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012bfa:	d1ee      	bne.n	8012bda <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8012bfc:	4a10      	ldr	r2, [pc, #64]	; (8012c40 <HAL_PWREx_EnableOverDrive+0x9c>)
 8012bfe:	4b10      	ldr	r3, [pc, #64]	; (8012c40 <HAL_PWREx_EnableOverDrive+0x9c>)
 8012c00:	681b      	ldr	r3, [r3, #0]
 8012c02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8012c06:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8012c08:	f7fe fb5c 	bl	80112c4 <HAL_GetTick>
 8012c0c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8012c0e:	e009      	b.n	8012c24 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8012c10:	f7fe fb58 	bl	80112c4 <HAL_GetTick>
 8012c14:	4602      	mov	r2, r0
 8012c16:	687b      	ldr	r3, [r7, #4]
 8012c18:	1ad3      	subs	r3, r2, r3
 8012c1a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8012c1e:	d901      	bls.n	8012c24 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8012c20:	2303      	movs	r3, #3
 8012c22:	e007      	b.n	8012c34 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8012c24:	4b06      	ldr	r3, [pc, #24]	; (8012c40 <HAL_PWREx_EnableOverDrive+0x9c>)
 8012c26:	685b      	ldr	r3, [r3, #4]
 8012c28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012c2c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8012c30:	d1ee      	bne.n	8012c10 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8012c32:	2300      	movs	r3, #0
}
 8012c34:	4618      	mov	r0, r3
 8012c36:	3708      	adds	r7, #8
 8012c38:	46bd      	mov	sp, r7
 8012c3a:	bd80      	pop	{r7, pc}
 8012c3c:	40023800 	.word	0x40023800
 8012c40:	40007000 	.word	0x40007000

08012c44 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8012c44:	b580      	push	{r7, lr}
 8012c46:	b086      	sub	sp, #24
 8012c48:	af00      	add	r7, sp, #0
 8012c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8012c4c:	2300      	movs	r3, #0
 8012c4e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8012c50:	687b      	ldr	r3, [r7, #4]
 8012c52:	2b00      	cmp	r3, #0
 8012c54:	d101      	bne.n	8012c5a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8012c56:	2301      	movs	r3, #1
 8012c58:	e29b      	b.n	8013192 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8012c5a:	687b      	ldr	r3, [r7, #4]
 8012c5c:	681b      	ldr	r3, [r3, #0]
 8012c5e:	f003 0301 	and.w	r3, r3, #1
 8012c62:	2b00      	cmp	r3, #0
 8012c64:	f000 8087 	beq.w	8012d76 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8012c68:	4b96      	ldr	r3, [pc, #600]	; (8012ec4 <HAL_RCC_OscConfig+0x280>)
 8012c6a:	689b      	ldr	r3, [r3, #8]
 8012c6c:	f003 030c 	and.w	r3, r3, #12
 8012c70:	2b04      	cmp	r3, #4
 8012c72:	d00c      	beq.n	8012c8e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8012c74:	4b93      	ldr	r3, [pc, #588]	; (8012ec4 <HAL_RCC_OscConfig+0x280>)
 8012c76:	689b      	ldr	r3, [r3, #8]
 8012c78:	f003 030c 	and.w	r3, r3, #12
 8012c7c:	2b08      	cmp	r3, #8
 8012c7e:	d112      	bne.n	8012ca6 <HAL_RCC_OscConfig+0x62>
 8012c80:	4b90      	ldr	r3, [pc, #576]	; (8012ec4 <HAL_RCC_OscConfig+0x280>)
 8012c82:	685b      	ldr	r3, [r3, #4]
 8012c84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012c88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8012c8c:	d10b      	bne.n	8012ca6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8012c8e:	4b8d      	ldr	r3, [pc, #564]	; (8012ec4 <HAL_RCC_OscConfig+0x280>)
 8012c90:	681b      	ldr	r3, [r3, #0]
 8012c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012c96:	2b00      	cmp	r3, #0
 8012c98:	d06c      	beq.n	8012d74 <HAL_RCC_OscConfig+0x130>
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	685b      	ldr	r3, [r3, #4]
 8012c9e:	2b00      	cmp	r3, #0
 8012ca0:	d168      	bne.n	8012d74 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8012ca2:	2301      	movs	r3, #1
 8012ca4:	e275      	b.n	8013192 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8012ca6:	687b      	ldr	r3, [r7, #4]
 8012ca8:	685b      	ldr	r3, [r3, #4]
 8012caa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012cae:	d106      	bne.n	8012cbe <HAL_RCC_OscConfig+0x7a>
 8012cb0:	4a84      	ldr	r2, [pc, #528]	; (8012ec4 <HAL_RCC_OscConfig+0x280>)
 8012cb2:	4b84      	ldr	r3, [pc, #528]	; (8012ec4 <HAL_RCC_OscConfig+0x280>)
 8012cb4:	681b      	ldr	r3, [r3, #0]
 8012cb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8012cba:	6013      	str	r3, [r2, #0]
 8012cbc:	e02e      	b.n	8012d1c <HAL_RCC_OscConfig+0xd8>
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	685b      	ldr	r3, [r3, #4]
 8012cc2:	2b00      	cmp	r3, #0
 8012cc4:	d10c      	bne.n	8012ce0 <HAL_RCC_OscConfig+0x9c>
 8012cc6:	4a7f      	ldr	r2, [pc, #508]	; (8012ec4 <HAL_RCC_OscConfig+0x280>)
 8012cc8:	4b7e      	ldr	r3, [pc, #504]	; (8012ec4 <HAL_RCC_OscConfig+0x280>)
 8012cca:	681b      	ldr	r3, [r3, #0]
 8012ccc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8012cd0:	6013      	str	r3, [r2, #0]
 8012cd2:	4a7c      	ldr	r2, [pc, #496]	; (8012ec4 <HAL_RCC_OscConfig+0x280>)
 8012cd4:	4b7b      	ldr	r3, [pc, #492]	; (8012ec4 <HAL_RCC_OscConfig+0x280>)
 8012cd6:	681b      	ldr	r3, [r3, #0]
 8012cd8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8012cdc:	6013      	str	r3, [r2, #0]
 8012cde:	e01d      	b.n	8012d1c <HAL_RCC_OscConfig+0xd8>
 8012ce0:	687b      	ldr	r3, [r7, #4]
 8012ce2:	685b      	ldr	r3, [r3, #4]
 8012ce4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8012ce8:	d10c      	bne.n	8012d04 <HAL_RCC_OscConfig+0xc0>
 8012cea:	4a76      	ldr	r2, [pc, #472]	; (8012ec4 <HAL_RCC_OscConfig+0x280>)
 8012cec:	4b75      	ldr	r3, [pc, #468]	; (8012ec4 <HAL_RCC_OscConfig+0x280>)
 8012cee:	681b      	ldr	r3, [r3, #0]
 8012cf0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8012cf4:	6013      	str	r3, [r2, #0]
 8012cf6:	4a73      	ldr	r2, [pc, #460]	; (8012ec4 <HAL_RCC_OscConfig+0x280>)
 8012cf8:	4b72      	ldr	r3, [pc, #456]	; (8012ec4 <HAL_RCC_OscConfig+0x280>)
 8012cfa:	681b      	ldr	r3, [r3, #0]
 8012cfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8012d00:	6013      	str	r3, [r2, #0]
 8012d02:	e00b      	b.n	8012d1c <HAL_RCC_OscConfig+0xd8>
 8012d04:	4a6f      	ldr	r2, [pc, #444]	; (8012ec4 <HAL_RCC_OscConfig+0x280>)
 8012d06:	4b6f      	ldr	r3, [pc, #444]	; (8012ec4 <HAL_RCC_OscConfig+0x280>)
 8012d08:	681b      	ldr	r3, [r3, #0]
 8012d0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8012d0e:	6013      	str	r3, [r2, #0]
 8012d10:	4a6c      	ldr	r2, [pc, #432]	; (8012ec4 <HAL_RCC_OscConfig+0x280>)
 8012d12:	4b6c      	ldr	r3, [pc, #432]	; (8012ec4 <HAL_RCC_OscConfig+0x280>)
 8012d14:	681b      	ldr	r3, [r3, #0]
 8012d16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8012d1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8012d1c:	687b      	ldr	r3, [r7, #4]
 8012d1e:	685b      	ldr	r3, [r3, #4]
 8012d20:	2b00      	cmp	r3, #0
 8012d22:	d013      	beq.n	8012d4c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012d24:	f7fe face 	bl	80112c4 <HAL_GetTick>
 8012d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8012d2a:	e008      	b.n	8012d3e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8012d2c:	f7fe faca 	bl	80112c4 <HAL_GetTick>
 8012d30:	4602      	mov	r2, r0
 8012d32:	693b      	ldr	r3, [r7, #16]
 8012d34:	1ad3      	subs	r3, r2, r3
 8012d36:	2b64      	cmp	r3, #100	; 0x64
 8012d38:	d901      	bls.n	8012d3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8012d3a:	2303      	movs	r3, #3
 8012d3c:	e229      	b.n	8013192 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8012d3e:	4b61      	ldr	r3, [pc, #388]	; (8012ec4 <HAL_RCC_OscConfig+0x280>)
 8012d40:	681b      	ldr	r3, [r3, #0]
 8012d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012d46:	2b00      	cmp	r3, #0
 8012d48:	d0f0      	beq.n	8012d2c <HAL_RCC_OscConfig+0xe8>
 8012d4a:	e014      	b.n	8012d76 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012d4c:	f7fe faba 	bl	80112c4 <HAL_GetTick>
 8012d50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8012d52:	e008      	b.n	8012d66 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8012d54:	f7fe fab6 	bl	80112c4 <HAL_GetTick>
 8012d58:	4602      	mov	r2, r0
 8012d5a:	693b      	ldr	r3, [r7, #16]
 8012d5c:	1ad3      	subs	r3, r2, r3
 8012d5e:	2b64      	cmp	r3, #100	; 0x64
 8012d60:	d901      	bls.n	8012d66 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8012d62:	2303      	movs	r3, #3
 8012d64:	e215      	b.n	8013192 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8012d66:	4b57      	ldr	r3, [pc, #348]	; (8012ec4 <HAL_RCC_OscConfig+0x280>)
 8012d68:	681b      	ldr	r3, [r3, #0]
 8012d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012d6e:	2b00      	cmp	r3, #0
 8012d70:	d1f0      	bne.n	8012d54 <HAL_RCC_OscConfig+0x110>
 8012d72:	e000      	b.n	8012d76 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8012d74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8012d76:	687b      	ldr	r3, [r7, #4]
 8012d78:	681b      	ldr	r3, [r3, #0]
 8012d7a:	f003 0302 	and.w	r3, r3, #2
 8012d7e:	2b00      	cmp	r3, #0
 8012d80:	d069      	beq.n	8012e56 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8012d82:	4b50      	ldr	r3, [pc, #320]	; (8012ec4 <HAL_RCC_OscConfig+0x280>)
 8012d84:	689b      	ldr	r3, [r3, #8]
 8012d86:	f003 030c 	and.w	r3, r3, #12
 8012d8a:	2b00      	cmp	r3, #0
 8012d8c:	d00b      	beq.n	8012da6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8012d8e:	4b4d      	ldr	r3, [pc, #308]	; (8012ec4 <HAL_RCC_OscConfig+0x280>)
 8012d90:	689b      	ldr	r3, [r3, #8]
 8012d92:	f003 030c 	and.w	r3, r3, #12
 8012d96:	2b08      	cmp	r3, #8
 8012d98:	d11c      	bne.n	8012dd4 <HAL_RCC_OscConfig+0x190>
 8012d9a:	4b4a      	ldr	r3, [pc, #296]	; (8012ec4 <HAL_RCC_OscConfig+0x280>)
 8012d9c:	685b      	ldr	r3, [r3, #4]
 8012d9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012da2:	2b00      	cmp	r3, #0
 8012da4:	d116      	bne.n	8012dd4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8012da6:	4b47      	ldr	r3, [pc, #284]	; (8012ec4 <HAL_RCC_OscConfig+0x280>)
 8012da8:	681b      	ldr	r3, [r3, #0]
 8012daa:	f003 0302 	and.w	r3, r3, #2
 8012dae:	2b00      	cmp	r3, #0
 8012db0:	d005      	beq.n	8012dbe <HAL_RCC_OscConfig+0x17a>
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	68db      	ldr	r3, [r3, #12]
 8012db6:	2b01      	cmp	r3, #1
 8012db8:	d001      	beq.n	8012dbe <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8012dba:	2301      	movs	r3, #1
 8012dbc:	e1e9      	b.n	8013192 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8012dbe:	4941      	ldr	r1, [pc, #260]	; (8012ec4 <HAL_RCC_OscConfig+0x280>)
 8012dc0:	4b40      	ldr	r3, [pc, #256]	; (8012ec4 <HAL_RCC_OscConfig+0x280>)
 8012dc2:	681b      	ldr	r3, [r3, #0]
 8012dc4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8012dc8:	687b      	ldr	r3, [r7, #4]
 8012dca:	691b      	ldr	r3, [r3, #16]
 8012dcc:	00db      	lsls	r3, r3, #3
 8012dce:	4313      	orrs	r3, r2
 8012dd0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8012dd2:	e040      	b.n	8012e56 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	68db      	ldr	r3, [r3, #12]
 8012dd8:	2b00      	cmp	r3, #0
 8012dda:	d023      	beq.n	8012e24 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8012ddc:	4a39      	ldr	r2, [pc, #228]	; (8012ec4 <HAL_RCC_OscConfig+0x280>)
 8012dde:	4b39      	ldr	r3, [pc, #228]	; (8012ec4 <HAL_RCC_OscConfig+0x280>)
 8012de0:	681b      	ldr	r3, [r3, #0]
 8012de2:	f043 0301 	orr.w	r3, r3, #1
 8012de6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012de8:	f7fe fa6c 	bl	80112c4 <HAL_GetTick>
 8012dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012dee:	e008      	b.n	8012e02 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8012df0:	f7fe fa68 	bl	80112c4 <HAL_GetTick>
 8012df4:	4602      	mov	r2, r0
 8012df6:	693b      	ldr	r3, [r7, #16]
 8012df8:	1ad3      	subs	r3, r2, r3
 8012dfa:	2b02      	cmp	r3, #2
 8012dfc:	d901      	bls.n	8012e02 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8012dfe:	2303      	movs	r3, #3
 8012e00:	e1c7      	b.n	8013192 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012e02:	4b30      	ldr	r3, [pc, #192]	; (8012ec4 <HAL_RCC_OscConfig+0x280>)
 8012e04:	681b      	ldr	r3, [r3, #0]
 8012e06:	f003 0302 	and.w	r3, r3, #2
 8012e0a:	2b00      	cmp	r3, #0
 8012e0c:	d0f0      	beq.n	8012df0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8012e0e:	492d      	ldr	r1, [pc, #180]	; (8012ec4 <HAL_RCC_OscConfig+0x280>)
 8012e10:	4b2c      	ldr	r3, [pc, #176]	; (8012ec4 <HAL_RCC_OscConfig+0x280>)
 8012e12:	681b      	ldr	r3, [r3, #0]
 8012e14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8012e18:	687b      	ldr	r3, [r7, #4]
 8012e1a:	691b      	ldr	r3, [r3, #16]
 8012e1c:	00db      	lsls	r3, r3, #3
 8012e1e:	4313      	orrs	r3, r2
 8012e20:	600b      	str	r3, [r1, #0]
 8012e22:	e018      	b.n	8012e56 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8012e24:	4a27      	ldr	r2, [pc, #156]	; (8012ec4 <HAL_RCC_OscConfig+0x280>)
 8012e26:	4b27      	ldr	r3, [pc, #156]	; (8012ec4 <HAL_RCC_OscConfig+0x280>)
 8012e28:	681b      	ldr	r3, [r3, #0]
 8012e2a:	f023 0301 	bic.w	r3, r3, #1
 8012e2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012e30:	f7fe fa48 	bl	80112c4 <HAL_GetTick>
 8012e34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8012e36:	e008      	b.n	8012e4a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8012e38:	f7fe fa44 	bl	80112c4 <HAL_GetTick>
 8012e3c:	4602      	mov	r2, r0
 8012e3e:	693b      	ldr	r3, [r7, #16]
 8012e40:	1ad3      	subs	r3, r2, r3
 8012e42:	2b02      	cmp	r3, #2
 8012e44:	d901      	bls.n	8012e4a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8012e46:	2303      	movs	r3, #3
 8012e48:	e1a3      	b.n	8013192 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8012e4a:	4b1e      	ldr	r3, [pc, #120]	; (8012ec4 <HAL_RCC_OscConfig+0x280>)
 8012e4c:	681b      	ldr	r3, [r3, #0]
 8012e4e:	f003 0302 	and.w	r3, r3, #2
 8012e52:	2b00      	cmp	r3, #0
 8012e54:	d1f0      	bne.n	8012e38 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8012e56:	687b      	ldr	r3, [r7, #4]
 8012e58:	681b      	ldr	r3, [r3, #0]
 8012e5a:	f003 0308 	and.w	r3, r3, #8
 8012e5e:	2b00      	cmp	r3, #0
 8012e60:	d038      	beq.n	8012ed4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8012e62:	687b      	ldr	r3, [r7, #4]
 8012e64:	695b      	ldr	r3, [r3, #20]
 8012e66:	2b00      	cmp	r3, #0
 8012e68:	d019      	beq.n	8012e9e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8012e6a:	4a16      	ldr	r2, [pc, #88]	; (8012ec4 <HAL_RCC_OscConfig+0x280>)
 8012e6c:	4b15      	ldr	r3, [pc, #84]	; (8012ec4 <HAL_RCC_OscConfig+0x280>)
 8012e6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012e70:	f043 0301 	orr.w	r3, r3, #1
 8012e74:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012e76:	f7fe fa25 	bl	80112c4 <HAL_GetTick>
 8012e7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8012e7c:	e008      	b.n	8012e90 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8012e7e:	f7fe fa21 	bl	80112c4 <HAL_GetTick>
 8012e82:	4602      	mov	r2, r0
 8012e84:	693b      	ldr	r3, [r7, #16]
 8012e86:	1ad3      	subs	r3, r2, r3
 8012e88:	2b02      	cmp	r3, #2
 8012e8a:	d901      	bls.n	8012e90 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8012e8c:	2303      	movs	r3, #3
 8012e8e:	e180      	b.n	8013192 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8012e90:	4b0c      	ldr	r3, [pc, #48]	; (8012ec4 <HAL_RCC_OscConfig+0x280>)
 8012e92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012e94:	f003 0302 	and.w	r3, r3, #2
 8012e98:	2b00      	cmp	r3, #0
 8012e9a:	d0f0      	beq.n	8012e7e <HAL_RCC_OscConfig+0x23a>
 8012e9c:	e01a      	b.n	8012ed4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8012e9e:	4a09      	ldr	r2, [pc, #36]	; (8012ec4 <HAL_RCC_OscConfig+0x280>)
 8012ea0:	4b08      	ldr	r3, [pc, #32]	; (8012ec4 <HAL_RCC_OscConfig+0x280>)
 8012ea2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012ea4:	f023 0301 	bic.w	r3, r3, #1
 8012ea8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012eaa:	f7fe fa0b 	bl	80112c4 <HAL_GetTick>
 8012eae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8012eb0:	e00a      	b.n	8012ec8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8012eb2:	f7fe fa07 	bl	80112c4 <HAL_GetTick>
 8012eb6:	4602      	mov	r2, r0
 8012eb8:	693b      	ldr	r3, [r7, #16]
 8012eba:	1ad3      	subs	r3, r2, r3
 8012ebc:	2b02      	cmp	r3, #2
 8012ebe:	d903      	bls.n	8012ec8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8012ec0:	2303      	movs	r3, #3
 8012ec2:	e166      	b.n	8013192 <HAL_RCC_OscConfig+0x54e>
 8012ec4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8012ec8:	4b92      	ldr	r3, [pc, #584]	; (8013114 <HAL_RCC_OscConfig+0x4d0>)
 8012eca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012ecc:	f003 0302 	and.w	r3, r3, #2
 8012ed0:	2b00      	cmp	r3, #0
 8012ed2:	d1ee      	bne.n	8012eb2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8012ed4:	687b      	ldr	r3, [r7, #4]
 8012ed6:	681b      	ldr	r3, [r3, #0]
 8012ed8:	f003 0304 	and.w	r3, r3, #4
 8012edc:	2b00      	cmp	r3, #0
 8012ede:	f000 80a4 	beq.w	801302a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8012ee2:	4b8c      	ldr	r3, [pc, #560]	; (8013114 <HAL_RCC_OscConfig+0x4d0>)
 8012ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012ee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012eea:	2b00      	cmp	r3, #0
 8012eec:	d10d      	bne.n	8012f0a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8012eee:	4a89      	ldr	r2, [pc, #548]	; (8013114 <HAL_RCC_OscConfig+0x4d0>)
 8012ef0:	4b88      	ldr	r3, [pc, #544]	; (8013114 <HAL_RCC_OscConfig+0x4d0>)
 8012ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012ef4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012ef8:	6413      	str	r3, [r2, #64]	; 0x40
 8012efa:	4b86      	ldr	r3, [pc, #536]	; (8013114 <HAL_RCC_OscConfig+0x4d0>)
 8012efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012efe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012f02:	60bb      	str	r3, [r7, #8]
 8012f04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8012f06:	2301      	movs	r3, #1
 8012f08:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8012f0a:	4b83      	ldr	r3, [pc, #524]	; (8013118 <HAL_RCC_OscConfig+0x4d4>)
 8012f0c:	681b      	ldr	r3, [r3, #0]
 8012f0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012f12:	2b00      	cmp	r3, #0
 8012f14:	d118      	bne.n	8012f48 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8012f16:	4a80      	ldr	r2, [pc, #512]	; (8013118 <HAL_RCC_OscConfig+0x4d4>)
 8012f18:	4b7f      	ldr	r3, [pc, #508]	; (8013118 <HAL_RCC_OscConfig+0x4d4>)
 8012f1a:	681b      	ldr	r3, [r3, #0]
 8012f1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012f20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8012f22:	f7fe f9cf 	bl	80112c4 <HAL_GetTick>
 8012f26:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8012f28:	e008      	b.n	8012f3c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8012f2a:	f7fe f9cb 	bl	80112c4 <HAL_GetTick>
 8012f2e:	4602      	mov	r2, r0
 8012f30:	693b      	ldr	r3, [r7, #16]
 8012f32:	1ad3      	subs	r3, r2, r3
 8012f34:	2b64      	cmp	r3, #100	; 0x64
 8012f36:	d901      	bls.n	8012f3c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8012f38:	2303      	movs	r3, #3
 8012f3a:	e12a      	b.n	8013192 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8012f3c:	4b76      	ldr	r3, [pc, #472]	; (8013118 <HAL_RCC_OscConfig+0x4d4>)
 8012f3e:	681b      	ldr	r3, [r3, #0]
 8012f40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012f44:	2b00      	cmp	r3, #0
 8012f46:	d0f0      	beq.n	8012f2a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8012f48:	687b      	ldr	r3, [r7, #4]
 8012f4a:	689b      	ldr	r3, [r3, #8]
 8012f4c:	2b01      	cmp	r3, #1
 8012f4e:	d106      	bne.n	8012f5e <HAL_RCC_OscConfig+0x31a>
 8012f50:	4a70      	ldr	r2, [pc, #448]	; (8013114 <HAL_RCC_OscConfig+0x4d0>)
 8012f52:	4b70      	ldr	r3, [pc, #448]	; (8013114 <HAL_RCC_OscConfig+0x4d0>)
 8012f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012f56:	f043 0301 	orr.w	r3, r3, #1
 8012f5a:	6713      	str	r3, [r2, #112]	; 0x70
 8012f5c:	e02d      	b.n	8012fba <HAL_RCC_OscConfig+0x376>
 8012f5e:	687b      	ldr	r3, [r7, #4]
 8012f60:	689b      	ldr	r3, [r3, #8]
 8012f62:	2b00      	cmp	r3, #0
 8012f64:	d10c      	bne.n	8012f80 <HAL_RCC_OscConfig+0x33c>
 8012f66:	4a6b      	ldr	r2, [pc, #428]	; (8013114 <HAL_RCC_OscConfig+0x4d0>)
 8012f68:	4b6a      	ldr	r3, [pc, #424]	; (8013114 <HAL_RCC_OscConfig+0x4d0>)
 8012f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012f6c:	f023 0301 	bic.w	r3, r3, #1
 8012f70:	6713      	str	r3, [r2, #112]	; 0x70
 8012f72:	4a68      	ldr	r2, [pc, #416]	; (8013114 <HAL_RCC_OscConfig+0x4d0>)
 8012f74:	4b67      	ldr	r3, [pc, #412]	; (8013114 <HAL_RCC_OscConfig+0x4d0>)
 8012f76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012f78:	f023 0304 	bic.w	r3, r3, #4
 8012f7c:	6713      	str	r3, [r2, #112]	; 0x70
 8012f7e:	e01c      	b.n	8012fba <HAL_RCC_OscConfig+0x376>
 8012f80:	687b      	ldr	r3, [r7, #4]
 8012f82:	689b      	ldr	r3, [r3, #8]
 8012f84:	2b05      	cmp	r3, #5
 8012f86:	d10c      	bne.n	8012fa2 <HAL_RCC_OscConfig+0x35e>
 8012f88:	4a62      	ldr	r2, [pc, #392]	; (8013114 <HAL_RCC_OscConfig+0x4d0>)
 8012f8a:	4b62      	ldr	r3, [pc, #392]	; (8013114 <HAL_RCC_OscConfig+0x4d0>)
 8012f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012f8e:	f043 0304 	orr.w	r3, r3, #4
 8012f92:	6713      	str	r3, [r2, #112]	; 0x70
 8012f94:	4a5f      	ldr	r2, [pc, #380]	; (8013114 <HAL_RCC_OscConfig+0x4d0>)
 8012f96:	4b5f      	ldr	r3, [pc, #380]	; (8013114 <HAL_RCC_OscConfig+0x4d0>)
 8012f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012f9a:	f043 0301 	orr.w	r3, r3, #1
 8012f9e:	6713      	str	r3, [r2, #112]	; 0x70
 8012fa0:	e00b      	b.n	8012fba <HAL_RCC_OscConfig+0x376>
 8012fa2:	4a5c      	ldr	r2, [pc, #368]	; (8013114 <HAL_RCC_OscConfig+0x4d0>)
 8012fa4:	4b5b      	ldr	r3, [pc, #364]	; (8013114 <HAL_RCC_OscConfig+0x4d0>)
 8012fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012fa8:	f023 0301 	bic.w	r3, r3, #1
 8012fac:	6713      	str	r3, [r2, #112]	; 0x70
 8012fae:	4a59      	ldr	r2, [pc, #356]	; (8013114 <HAL_RCC_OscConfig+0x4d0>)
 8012fb0:	4b58      	ldr	r3, [pc, #352]	; (8013114 <HAL_RCC_OscConfig+0x4d0>)
 8012fb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012fb4:	f023 0304 	bic.w	r3, r3, #4
 8012fb8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8012fba:	687b      	ldr	r3, [r7, #4]
 8012fbc:	689b      	ldr	r3, [r3, #8]
 8012fbe:	2b00      	cmp	r3, #0
 8012fc0:	d015      	beq.n	8012fee <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012fc2:	f7fe f97f 	bl	80112c4 <HAL_GetTick>
 8012fc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8012fc8:	e00a      	b.n	8012fe0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8012fca:	f7fe f97b 	bl	80112c4 <HAL_GetTick>
 8012fce:	4602      	mov	r2, r0
 8012fd0:	693b      	ldr	r3, [r7, #16]
 8012fd2:	1ad3      	subs	r3, r2, r3
 8012fd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8012fd8:	4293      	cmp	r3, r2
 8012fda:	d901      	bls.n	8012fe0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8012fdc:	2303      	movs	r3, #3
 8012fde:	e0d8      	b.n	8013192 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8012fe0:	4b4c      	ldr	r3, [pc, #304]	; (8013114 <HAL_RCC_OscConfig+0x4d0>)
 8012fe2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012fe4:	f003 0302 	and.w	r3, r3, #2
 8012fe8:	2b00      	cmp	r3, #0
 8012fea:	d0ee      	beq.n	8012fca <HAL_RCC_OscConfig+0x386>
 8012fec:	e014      	b.n	8013018 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012fee:	f7fe f969 	bl	80112c4 <HAL_GetTick>
 8012ff2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8012ff4:	e00a      	b.n	801300c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8012ff6:	f7fe f965 	bl	80112c4 <HAL_GetTick>
 8012ffa:	4602      	mov	r2, r0
 8012ffc:	693b      	ldr	r3, [r7, #16]
 8012ffe:	1ad3      	subs	r3, r2, r3
 8013000:	f241 3288 	movw	r2, #5000	; 0x1388
 8013004:	4293      	cmp	r3, r2
 8013006:	d901      	bls.n	801300c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8013008:	2303      	movs	r3, #3
 801300a:	e0c2      	b.n	8013192 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801300c:	4b41      	ldr	r3, [pc, #260]	; (8013114 <HAL_RCC_OscConfig+0x4d0>)
 801300e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013010:	f003 0302 	and.w	r3, r3, #2
 8013014:	2b00      	cmp	r3, #0
 8013016:	d1ee      	bne.n	8012ff6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8013018:	7dfb      	ldrb	r3, [r7, #23]
 801301a:	2b01      	cmp	r3, #1
 801301c:	d105      	bne.n	801302a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801301e:	4a3d      	ldr	r2, [pc, #244]	; (8013114 <HAL_RCC_OscConfig+0x4d0>)
 8013020:	4b3c      	ldr	r3, [pc, #240]	; (8013114 <HAL_RCC_OscConfig+0x4d0>)
 8013022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013024:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8013028:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801302a:	687b      	ldr	r3, [r7, #4]
 801302c:	699b      	ldr	r3, [r3, #24]
 801302e:	2b00      	cmp	r3, #0
 8013030:	f000 80ae 	beq.w	8013190 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8013034:	4b37      	ldr	r3, [pc, #220]	; (8013114 <HAL_RCC_OscConfig+0x4d0>)
 8013036:	689b      	ldr	r3, [r3, #8]
 8013038:	f003 030c 	and.w	r3, r3, #12
 801303c:	2b08      	cmp	r3, #8
 801303e:	d06d      	beq.n	801311c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	699b      	ldr	r3, [r3, #24]
 8013044:	2b02      	cmp	r3, #2
 8013046:	d14b      	bne.n	80130e0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8013048:	4a32      	ldr	r2, [pc, #200]	; (8013114 <HAL_RCC_OscConfig+0x4d0>)
 801304a:	4b32      	ldr	r3, [pc, #200]	; (8013114 <HAL_RCC_OscConfig+0x4d0>)
 801304c:	681b      	ldr	r3, [r3, #0]
 801304e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8013052:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013054:	f7fe f936 	bl	80112c4 <HAL_GetTick>
 8013058:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801305a:	e008      	b.n	801306e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801305c:	f7fe f932 	bl	80112c4 <HAL_GetTick>
 8013060:	4602      	mov	r2, r0
 8013062:	693b      	ldr	r3, [r7, #16]
 8013064:	1ad3      	subs	r3, r2, r3
 8013066:	2b02      	cmp	r3, #2
 8013068:	d901      	bls.n	801306e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 801306a:	2303      	movs	r3, #3
 801306c:	e091      	b.n	8013192 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801306e:	4b29      	ldr	r3, [pc, #164]	; (8013114 <HAL_RCC_OscConfig+0x4d0>)
 8013070:	681b      	ldr	r3, [r3, #0]
 8013072:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013076:	2b00      	cmp	r3, #0
 8013078:	d1f0      	bne.n	801305c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801307a:	4926      	ldr	r1, [pc, #152]	; (8013114 <HAL_RCC_OscConfig+0x4d0>)
 801307c:	687b      	ldr	r3, [r7, #4]
 801307e:	69da      	ldr	r2, [r3, #28]
 8013080:	687b      	ldr	r3, [r7, #4]
 8013082:	6a1b      	ldr	r3, [r3, #32]
 8013084:	431a      	orrs	r2, r3
 8013086:	687b      	ldr	r3, [r7, #4]
 8013088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801308a:	019b      	lsls	r3, r3, #6
 801308c:	431a      	orrs	r2, r3
 801308e:	687b      	ldr	r3, [r7, #4]
 8013090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013092:	085b      	lsrs	r3, r3, #1
 8013094:	3b01      	subs	r3, #1
 8013096:	041b      	lsls	r3, r3, #16
 8013098:	431a      	orrs	r2, r3
 801309a:	687b      	ldr	r3, [r7, #4]
 801309c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801309e:	061b      	lsls	r3, r3, #24
 80130a0:	431a      	orrs	r2, r3
 80130a2:	687b      	ldr	r3, [r7, #4]
 80130a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80130a6:	071b      	lsls	r3, r3, #28
 80130a8:	4313      	orrs	r3, r2
 80130aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80130ac:	4a19      	ldr	r2, [pc, #100]	; (8013114 <HAL_RCC_OscConfig+0x4d0>)
 80130ae:	4b19      	ldr	r3, [pc, #100]	; (8013114 <HAL_RCC_OscConfig+0x4d0>)
 80130b0:	681b      	ldr	r3, [r3, #0]
 80130b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80130b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80130b8:	f7fe f904 	bl	80112c4 <HAL_GetTick>
 80130bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80130be:	e008      	b.n	80130d2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80130c0:	f7fe f900 	bl	80112c4 <HAL_GetTick>
 80130c4:	4602      	mov	r2, r0
 80130c6:	693b      	ldr	r3, [r7, #16]
 80130c8:	1ad3      	subs	r3, r2, r3
 80130ca:	2b02      	cmp	r3, #2
 80130cc:	d901      	bls.n	80130d2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80130ce:	2303      	movs	r3, #3
 80130d0:	e05f      	b.n	8013192 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80130d2:	4b10      	ldr	r3, [pc, #64]	; (8013114 <HAL_RCC_OscConfig+0x4d0>)
 80130d4:	681b      	ldr	r3, [r3, #0]
 80130d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80130da:	2b00      	cmp	r3, #0
 80130dc:	d0f0      	beq.n	80130c0 <HAL_RCC_OscConfig+0x47c>
 80130de:	e057      	b.n	8013190 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80130e0:	4a0c      	ldr	r2, [pc, #48]	; (8013114 <HAL_RCC_OscConfig+0x4d0>)
 80130e2:	4b0c      	ldr	r3, [pc, #48]	; (8013114 <HAL_RCC_OscConfig+0x4d0>)
 80130e4:	681b      	ldr	r3, [r3, #0]
 80130e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80130ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80130ec:	f7fe f8ea 	bl	80112c4 <HAL_GetTick>
 80130f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80130f2:	e008      	b.n	8013106 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80130f4:	f7fe f8e6 	bl	80112c4 <HAL_GetTick>
 80130f8:	4602      	mov	r2, r0
 80130fa:	693b      	ldr	r3, [r7, #16]
 80130fc:	1ad3      	subs	r3, r2, r3
 80130fe:	2b02      	cmp	r3, #2
 8013100:	d901      	bls.n	8013106 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8013102:	2303      	movs	r3, #3
 8013104:	e045      	b.n	8013192 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8013106:	4b03      	ldr	r3, [pc, #12]	; (8013114 <HAL_RCC_OscConfig+0x4d0>)
 8013108:	681b      	ldr	r3, [r3, #0]
 801310a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801310e:	2b00      	cmp	r3, #0
 8013110:	d1f0      	bne.n	80130f4 <HAL_RCC_OscConfig+0x4b0>
 8013112:	e03d      	b.n	8013190 <HAL_RCC_OscConfig+0x54c>
 8013114:	40023800 	.word	0x40023800
 8013118:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 801311c:	4b1f      	ldr	r3, [pc, #124]	; (801319c <HAL_RCC_OscConfig+0x558>)
 801311e:	685b      	ldr	r3, [r3, #4]
 8013120:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8013122:	687b      	ldr	r3, [r7, #4]
 8013124:	699b      	ldr	r3, [r3, #24]
 8013126:	2b01      	cmp	r3, #1
 8013128:	d030      	beq.n	801318c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801312a:	68fb      	ldr	r3, [r7, #12]
 801312c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8013130:	687b      	ldr	r3, [r7, #4]
 8013132:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8013134:	429a      	cmp	r2, r3
 8013136:	d129      	bne.n	801318c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8013138:	68fb      	ldr	r3, [r7, #12]
 801313a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 801313e:	687b      	ldr	r3, [r7, #4]
 8013140:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8013142:	429a      	cmp	r2, r3
 8013144:	d122      	bne.n	801318c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8013146:	68fa      	ldr	r2, [r7, #12]
 8013148:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 801314c:	4013      	ands	r3, r2
 801314e:	687a      	ldr	r2, [r7, #4]
 8013150:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8013152:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8013154:	4293      	cmp	r3, r2
 8013156:	d119      	bne.n	801318c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8013158:	68fb      	ldr	r3, [r7, #12]
 801315a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 801315e:	687b      	ldr	r3, [r7, #4]
 8013160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013162:	085b      	lsrs	r3, r3, #1
 8013164:	3b01      	subs	r3, #1
 8013166:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8013168:	429a      	cmp	r2, r3
 801316a:	d10f      	bne.n	801318c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 801316c:	68fb      	ldr	r3, [r7, #12]
 801316e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8013172:	687b      	ldr	r3, [r7, #4]
 8013174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013176:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8013178:	429a      	cmp	r2, r3
 801317a:	d107      	bne.n	801318c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 801317c:	68fb      	ldr	r3, [r7, #12]
 801317e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8013182:	687b      	ldr	r3, [r7, #4]
 8013184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013186:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8013188:	429a      	cmp	r2, r3
 801318a:	d001      	beq.n	8013190 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 801318c:	2301      	movs	r3, #1
 801318e:	e000      	b.n	8013192 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8013190:	2300      	movs	r3, #0
}
 8013192:	4618      	mov	r0, r3
 8013194:	3718      	adds	r7, #24
 8013196:	46bd      	mov	sp, r7
 8013198:	bd80      	pop	{r7, pc}
 801319a:	bf00      	nop
 801319c:	40023800 	.word	0x40023800

080131a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80131a0:	b580      	push	{r7, lr}
 80131a2:	b084      	sub	sp, #16
 80131a4:	af00      	add	r7, sp, #0
 80131a6:	6078      	str	r0, [r7, #4]
 80131a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80131aa:	2300      	movs	r3, #0
 80131ac:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80131ae:	687b      	ldr	r3, [r7, #4]
 80131b0:	2b00      	cmp	r3, #0
 80131b2:	d101      	bne.n	80131b8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80131b4:	2301      	movs	r3, #1
 80131b6:	e0d0      	b.n	801335a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80131b8:	4b6a      	ldr	r3, [pc, #424]	; (8013364 <HAL_RCC_ClockConfig+0x1c4>)
 80131ba:	681b      	ldr	r3, [r3, #0]
 80131bc:	f003 020f 	and.w	r2, r3, #15
 80131c0:	683b      	ldr	r3, [r7, #0]
 80131c2:	429a      	cmp	r2, r3
 80131c4:	d210      	bcs.n	80131e8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80131c6:	4967      	ldr	r1, [pc, #412]	; (8013364 <HAL_RCC_ClockConfig+0x1c4>)
 80131c8:	4b66      	ldr	r3, [pc, #408]	; (8013364 <HAL_RCC_ClockConfig+0x1c4>)
 80131ca:	681b      	ldr	r3, [r3, #0]
 80131cc:	f023 020f 	bic.w	r2, r3, #15
 80131d0:	683b      	ldr	r3, [r7, #0]
 80131d2:	4313      	orrs	r3, r2
 80131d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80131d6:	4b63      	ldr	r3, [pc, #396]	; (8013364 <HAL_RCC_ClockConfig+0x1c4>)
 80131d8:	681b      	ldr	r3, [r3, #0]
 80131da:	f003 020f 	and.w	r2, r3, #15
 80131de:	683b      	ldr	r3, [r7, #0]
 80131e0:	429a      	cmp	r2, r3
 80131e2:	d001      	beq.n	80131e8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80131e4:	2301      	movs	r3, #1
 80131e6:	e0b8      	b.n	801335a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80131e8:	687b      	ldr	r3, [r7, #4]
 80131ea:	681b      	ldr	r3, [r3, #0]
 80131ec:	f003 0302 	and.w	r3, r3, #2
 80131f0:	2b00      	cmp	r3, #0
 80131f2:	d020      	beq.n	8013236 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80131f4:	687b      	ldr	r3, [r7, #4]
 80131f6:	681b      	ldr	r3, [r3, #0]
 80131f8:	f003 0304 	and.w	r3, r3, #4
 80131fc:	2b00      	cmp	r3, #0
 80131fe:	d005      	beq.n	801320c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8013200:	4a59      	ldr	r2, [pc, #356]	; (8013368 <HAL_RCC_ClockConfig+0x1c8>)
 8013202:	4b59      	ldr	r3, [pc, #356]	; (8013368 <HAL_RCC_ClockConfig+0x1c8>)
 8013204:	689b      	ldr	r3, [r3, #8]
 8013206:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 801320a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801320c:	687b      	ldr	r3, [r7, #4]
 801320e:	681b      	ldr	r3, [r3, #0]
 8013210:	f003 0308 	and.w	r3, r3, #8
 8013214:	2b00      	cmp	r3, #0
 8013216:	d005      	beq.n	8013224 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8013218:	4a53      	ldr	r2, [pc, #332]	; (8013368 <HAL_RCC_ClockConfig+0x1c8>)
 801321a:	4b53      	ldr	r3, [pc, #332]	; (8013368 <HAL_RCC_ClockConfig+0x1c8>)
 801321c:	689b      	ldr	r3, [r3, #8]
 801321e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8013222:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8013224:	4950      	ldr	r1, [pc, #320]	; (8013368 <HAL_RCC_ClockConfig+0x1c8>)
 8013226:	4b50      	ldr	r3, [pc, #320]	; (8013368 <HAL_RCC_ClockConfig+0x1c8>)
 8013228:	689b      	ldr	r3, [r3, #8]
 801322a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	689b      	ldr	r3, [r3, #8]
 8013232:	4313      	orrs	r3, r2
 8013234:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8013236:	687b      	ldr	r3, [r7, #4]
 8013238:	681b      	ldr	r3, [r3, #0]
 801323a:	f003 0301 	and.w	r3, r3, #1
 801323e:	2b00      	cmp	r3, #0
 8013240:	d040      	beq.n	80132c4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8013242:	687b      	ldr	r3, [r7, #4]
 8013244:	685b      	ldr	r3, [r3, #4]
 8013246:	2b01      	cmp	r3, #1
 8013248:	d107      	bne.n	801325a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801324a:	4b47      	ldr	r3, [pc, #284]	; (8013368 <HAL_RCC_ClockConfig+0x1c8>)
 801324c:	681b      	ldr	r3, [r3, #0]
 801324e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013252:	2b00      	cmp	r3, #0
 8013254:	d115      	bne.n	8013282 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8013256:	2301      	movs	r3, #1
 8013258:	e07f      	b.n	801335a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801325a:	687b      	ldr	r3, [r7, #4]
 801325c:	685b      	ldr	r3, [r3, #4]
 801325e:	2b02      	cmp	r3, #2
 8013260:	d107      	bne.n	8013272 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8013262:	4b41      	ldr	r3, [pc, #260]	; (8013368 <HAL_RCC_ClockConfig+0x1c8>)
 8013264:	681b      	ldr	r3, [r3, #0]
 8013266:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801326a:	2b00      	cmp	r3, #0
 801326c:	d109      	bne.n	8013282 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 801326e:	2301      	movs	r3, #1
 8013270:	e073      	b.n	801335a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8013272:	4b3d      	ldr	r3, [pc, #244]	; (8013368 <HAL_RCC_ClockConfig+0x1c8>)
 8013274:	681b      	ldr	r3, [r3, #0]
 8013276:	f003 0302 	and.w	r3, r3, #2
 801327a:	2b00      	cmp	r3, #0
 801327c:	d101      	bne.n	8013282 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 801327e:	2301      	movs	r3, #1
 8013280:	e06b      	b.n	801335a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8013282:	4939      	ldr	r1, [pc, #228]	; (8013368 <HAL_RCC_ClockConfig+0x1c8>)
 8013284:	4b38      	ldr	r3, [pc, #224]	; (8013368 <HAL_RCC_ClockConfig+0x1c8>)
 8013286:	689b      	ldr	r3, [r3, #8]
 8013288:	f023 0203 	bic.w	r2, r3, #3
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	685b      	ldr	r3, [r3, #4]
 8013290:	4313      	orrs	r3, r2
 8013292:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8013294:	f7fe f816 	bl	80112c4 <HAL_GetTick>
 8013298:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801329a:	e00a      	b.n	80132b2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801329c:	f7fe f812 	bl	80112c4 <HAL_GetTick>
 80132a0:	4602      	mov	r2, r0
 80132a2:	68fb      	ldr	r3, [r7, #12]
 80132a4:	1ad3      	subs	r3, r2, r3
 80132a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80132aa:	4293      	cmp	r3, r2
 80132ac:	d901      	bls.n	80132b2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80132ae:	2303      	movs	r3, #3
 80132b0:	e053      	b.n	801335a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80132b2:	4b2d      	ldr	r3, [pc, #180]	; (8013368 <HAL_RCC_ClockConfig+0x1c8>)
 80132b4:	689b      	ldr	r3, [r3, #8]
 80132b6:	f003 020c 	and.w	r2, r3, #12
 80132ba:	687b      	ldr	r3, [r7, #4]
 80132bc:	685b      	ldr	r3, [r3, #4]
 80132be:	009b      	lsls	r3, r3, #2
 80132c0:	429a      	cmp	r2, r3
 80132c2:	d1eb      	bne.n	801329c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80132c4:	4b27      	ldr	r3, [pc, #156]	; (8013364 <HAL_RCC_ClockConfig+0x1c4>)
 80132c6:	681b      	ldr	r3, [r3, #0]
 80132c8:	f003 020f 	and.w	r2, r3, #15
 80132cc:	683b      	ldr	r3, [r7, #0]
 80132ce:	429a      	cmp	r2, r3
 80132d0:	d910      	bls.n	80132f4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80132d2:	4924      	ldr	r1, [pc, #144]	; (8013364 <HAL_RCC_ClockConfig+0x1c4>)
 80132d4:	4b23      	ldr	r3, [pc, #140]	; (8013364 <HAL_RCC_ClockConfig+0x1c4>)
 80132d6:	681b      	ldr	r3, [r3, #0]
 80132d8:	f023 020f 	bic.w	r2, r3, #15
 80132dc:	683b      	ldr	r3, [r7, #0]
 80132de:	4313      	orrs	r3, r2
 80132e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80132e2:	4b20      	ldr	r3, [pc, #128]	; (8013364 <HAL_RCC_ClockConfig+0x1c4>)
 80132e4:	681b      	ldr	r3, [r3, #0]
 80132e6:	f003 020f 	and.w	r2, r3, #15
 80132ea:	683b      	ldr	r3, [r7, #0]
 80132ec:	429a      	cmp	r2, r3
 80132ee:	d001      	beq.n	80132f4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80132f0:	2301      	movs	r3, #1
 80132f2:	e032      	b.n	801335a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80132f4:	687b      	ldr	r3, [r7, #4]
 80132f6:	681b      	ldr	r3, [r3, #0]
 80132f8:	f003 0304 	and.w	r3, r3, #4
 80132fc:	2b00      	cmp	r3, #0
 80132fe:	d008      	beq.n	8013312 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8013300:	4919      	ldr	r1, [pc, #100]	; (8013368 <HAL_RCC_ClockConfig+0x1c8>)
 8013302:	4b19      	ldr	r3, [pc, #100]	; (8013368 <HAL_RCC_ClockConfig+0x1c8>)
 8013304:	689b      	ldr	r3, [r3, #8]
 8013306:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 801330a:	687b      	ldr	r3, [r7, #4]
 801330c:	68db      	ldr	r3, [r3, #12]
 801330e:	4313      	orrs	r3, r2
 8013310:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8013312:	687b      	ldr	r3, [r7, #4]
 8013314:	681b      	ldr	r3, [r3, #0]
 8013316:	f003 0308 	and.w	r3, r3, #8
 801331a:	2b00      	cmp	r3, #0
 801331c:	d009      	beq.n	8013332 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 801331e:	4912      	ldr	r1, [pc, #72]	; (8013368 <HAL_RCC_ClockConfig+0x1c8>)
 8013320:	4b11      	ldr	r3, [pc, #68]	; (8013368 <HAL_RCC_ClockConfig+0x1c8>)
 8013322:	689b      	ldr	r3, [r3, #8]
 8013324:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8013328:	687b      	ldr	r3, [r7, #4]
 801332a:	691b      	ldr	r3, [r3, #16]
 801332c:	00db      	lsls	r3, r3, #3
 801332e:	4313      	orrs	r3, r2
 8013330:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8013332:	f000 f821 	bl	8013378 <HAL_RCC_GetSysClockFreq>
 8013336:	4601      	mov	r1, r0
 8013338:	4b0b      	ldr	r3, [pc, #44]	; (8013368 <HAL_RCC_ClockConfig+0x1c8>)
 801333a:	689b      	ldr	r3, [r3, #8]
 801333c:	091b      	lsrs	r3, r3, #4
 801333e:	f003 030f 	and.w	r3, r3, #15
 8013342:	4a0a      	ldr	r2, [pc, #40]	; (801336c <HAL_RCC_ClockConfig+0x1cc>)
 8013344:	5cd3      	ldrb	r3, [r2, r3]
 8013346:	fa21 f303 	lsr.w	r3, r1, r3
 801334a:	4a09      	ldr	r2, [pc, #36]	; (8013370 <HAL_RCC_ClockConfig+0x1d0>)
 801334c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 801334e:	4b09      	ldr	r3, [pc, #36]	; (8013374 <HAL_RCC_ClockConfig+0x1d4>)
 8013350:	681b      	ldr	r3, [r3, #0]
 8013352:	4618      	mov	r0, r3
 8013354:	f7fd fe2c 	bl	8010fb0 <HAL_InitTick>

  return HAL_OK;
 8013358:	2300      	movs	r3, #0
}
 801335a:	4618      	mov	r0, r3
 801335c:	3710      	adds	r7, #16
 801335e:	46bd      	mov	sp, r7
 8013360:	bd80      	pop	{r7, pc}
 8013362:	bf00      	nop
 8013364:	40023c00 	.word	0x40023c00
 8013368:	40023800 	.word	0x40023800
 801336c:	0802a904 	.word	0x0802a904
 8013370:	20000000 	.word	0x20000000
 8013374:	20000004 	.word	0x20000004

08013378 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8013378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801337c:	b08f      	sub	sp, #60	; 0x3c
 801337e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8013380:	2300      	movs	r3, #0
 8013382:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013384:	2300      	movs	r3, #0
 8013386:	637b      	str	r3, [r7, #52]	; 0x34
 8013388:	2300      	movs	r3, #0
 801338a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t sysclockfreq = 0;
 801338c:	2300      	movs	r3, #0
 801338e:	633b      	str	r3, [r7, #48]	; 0x30

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8013390:	4b62      	ldr	r3, [pc, #392]	; (801351c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8013392:	689b      	ldr	r3, [r3, #8]
 8013394:	f003 030c 	and.w	r3, r3, #12
 8013398:	2b04      	cmp	r3, #4
 801339a:	d007      	beq.n	80133ac <HAL_RCC_GetSysClockFreq+0x34>
 801339c:	2b08      	cmp	r3, #8
 801339e:	d008      	beq.n	80133b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80133a0:	2b00      	cmp	r3, #0
 80133a2:	f040 80b2 	bne.w	801350a <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80133a6:	4b5e      	ldr	r3, [pc, #376]	; (8013520 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80133a8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80133aa:	e0b1      	b.n	8013510 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80133ac:	4b5d      	ldr	r3, [pc, #372]	; (8013524 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80133ae:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80133b0:	e0ae      	b.n	8013510 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80133b2:	4b5a      	ldr	r3, [pc, #360]	; (801351c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80133b4:	685b      	ldr	r3, [r3, #4]
 80133b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80133ba:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80133bc:	4b57      	ldr	r3, [pc, #348]	; (801351c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80133be:	685b      	ldr	r3, [r3, #4]
 80133c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80133c4:	2b00      	cmp	r3, #0
 80133c6:	d04e      	beq.n	8013466 <HAL_RCC_GetSysClockFreq+0xee>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80133c8:	4b54      	ldr	r3, [pc, #336]	; (801351c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80133ca:	685b      	ldr	r3, [r3, #4]
 80133cc:	099b      	lsrs	r3, r3, #6
 80133ce:	f04f 0400 	mov.w	r4, #0
 80133d2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80133d6:	f04f 0200 	mov.w	r2, #0
 80133da:	ea01 0103 	and.w	r1, r1, r3
 80133de:	ea02 0204 	and.w	r2, r2, r4
 80133e2:	460b      	mov	r3, r1
 80133e4:	4614      	mov	r4, r2
 80133e6:	0160      	lsls	r0, r4, #5
 80133e8:	6278      	str	r0, [r7, #36]	; 0x24
 80133ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80133ec:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 80133f0:	6278      	str	r0, [r7, #36]	; 0x24
 80133f2:	015b      	lsls	r3, r3, #5
 80133f4:	623b      	str	r3, [r7, #32]
 80133f6:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80133fa:	1a5b      	subs	r3, r3, r1
 80133fc:	eb64 0402 	sbc.w	r4, r4, r2
 8013400:	ea4f 1984 	mov.w	r9, r4, lsl #6
 8013404:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 8013408:	ea4f 1883 	mov.w	r8, r3, lsl #6
 801340c:	ebb8 0803 	subs.w	r8, r8, r3
 8013410:	eb69 0904 	sbc.w	r9, r9, r4
 8013414:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8013418:	61fb      	str	r3, [r7, #28]
 801341a:	69fb      	ldr	r3, [r7, #28]
 801341c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8013420:	61fb      	str	r3, [r7, #28]
 8013422:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8013426:	61bb      	str	r3, [r7, #24]
 8013428:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 801342c:	eb18 0801 	adds.w	r8, r8, r1
 8013430:	eb49 0902 	adc.w	r9, r9, r2
 8013434:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8013438:	617b      	str	r3, [r7, #20]
 801343a:	697b      	ldr	r3, [r7, #20]
 801343c:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8013440:	617b      	str	r3, [r7, #20]
 8013442:	ea4f 2348 	mov.w	r3, r8, lsl #9
 8013446:	613b      	str	r3, [r7, #16]
 8013448:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 801344c:	4640      	mov	r0, r8
 801344e:	4649      	mov	r1, r9
 8013450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013452:	f04f 0400 	mov.w	r4, #0
 8013456:	461a      	mov	r2, r3
 8013458:	4623      	mov	r3, r4
 801345a:	f7fc fe59 	bl	8010110 <__aeabi_uldivmod>
 801345e:	4603      	mov	r3, r0
 8013460:	460c      	mov	r4, r1
 8013462:	637b      	str	r3, [r7, #52]	; 0x34
 8013464:	e043      	b.n	80134ee <HAL_RCC_GetSysClockFreq+0x176>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8013466:	4b2d      	ldr	r3, [pc, #180]	; (801351c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8013468:	685b      	ldr	r3, [r3, #4]
 801346a:	099b      	lsrs	r3, r3, #6
 801346c:	f04f 0400 	mov.w	r4, #0
 8013470:	f240 11ff 	movw	r1, #511	; 0x1ff
 8013474:	f04f 0200 	mov.w	r2, #0
 8013478:	ea01 0103 	and.w	r1, r1, r3
 801347c:	ea02 0204 	and.w	r2, r2, r4
 8013480:	460b      	mov	r3, r1
 8013482:	4614      	mov	r4, r2
 8013484:	0160      	lsls	r0, r4, #5
 8013486:	60f8      	str	r0, [r7, #12]
 8013488:	68f8      	ldr	r0, [r7, #12]
 801348a:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 801348e:	60f8      	str	r0, [r7, #12]
 8013490:	015b      	lsls	r3, r3, #5
 8013492:	60bb      	str	r3, [r7, #8]
 8013494:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8013498:	1a5b      	subs	r3, r3, r1
 801349a:	eb64 0402 	sbc.w	r4, r4, r2
 801349e:	01a6      	lsls	r6, r4, #6
 80134a0:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 80134a4:	019d      	lsls	r5, r3, #6
 80134a6:	1aed      	subs	r5, r5, r3
 80134a8:	eb66 0604 	sbc.w	r6, r6, r4
 80134ac:	00f3      	lsls	r3, r6, #3
 80134ae:	607b      	str	r3, [r7, #4]
 80134b0:	687b      	ldr	r3, [r7, #4]
 80134b2:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 80134b6:	607b      	str	r3, [r7, #4]
 80134b8:	00eb      	lsls	r3, r5, #3
 80134ba:	603b      	str	r3, [r7, #0]
 80134bc:	e897 0060 	ldmia.w	r7, {r5, r6}
 80134c0:	186d      	adds	r5, r5, r1
 80134c2:	eb46 0602 	adc.w	r6, r6, r2
 80134c6:	ea4f 2b86 	mov.w	fp, r6, lsl #10
 80134ca:	ea4b 5b95 	orr.w	fp, fp, r5, lsr #22
 80134ce:	ea4f 2a85 	mov.w	sl, r5, lsl #10
 80134d2:	4655      	mov	r5, sl
 80134d4:	465e      	mov	r6, fp
 80134d6:	4628      	mov	r0, r5
 80134d8:	4631      	mov	r1, r6
 80134da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134dc:	f04f 0400 	mov.w	r4, #0
 80134e0:	461a      	mov	r2, r3
 80134e2:	4623      	mov	r3, r4
 80134e4:	f7fc fe14 	bl	8010110 <__aeabi_uldivmod>
 80134e8:	4603      	mov	r3, r0
 80134ea:	460c      	mov	r4, r1
 80134ec:	637b      	str	r3, [r7, #52]	; 0x34
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80134ee:	4b0b      	ldr	r3, [pc, #44]	; (801351c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80134f0:	685b      	ldr	r3, [r3, #4]
 80134f2:	0c1b      	lsrs	r3, r3, #16
 80134f4:	f003 0303 	and.w	r3, r3, #3
 80134f8:	3301      	adds	r3, #1
 80134fa:	005b      	lsls	r3, r3, #1
 80134fc:	62bb      	str	r3, [r7, #40]	; 0x28

      sysclockfreq = pllvco / pllp;
 80134fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013502:	fbb2 f3f3 	udiv	r3, r2, r3
 8013506:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8013508:	e002      	b.n	8013510 <HAL_RCC_GetSysClockFreq+0x198>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 801350a:	4b05      	ldr	r3, [pc, #20]	; (8013520 <HAL_RCC_GetSysClockFreq+0x1a8>)
 801350c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 801350e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8013510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8013512:	4618      	mov	r0, r3
 8013514:	373c      	adds	r7, #60	; 0x3c
 8013516:	46bd      	mov	sp, r7
 8013518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801351c:	40023800 	.word	0x40023800
 8013520:	00f42400 	.word	0x00f42400
 8013524:	007a1200 	.word	0x007a1200

08013528 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8013528:	b480      	push	{r7}
 801352a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801352c:	4b03      	ldr	r3, [pc, #12]	; (801353c <HAL_RCC_GetHCLKFreq+0x14>)
 801352e:	681b      	ldr	r3, [r3, #0]
}
 8013530:	4618      	mov	r0, r3
 8013532:	46bd      	mov	sp, r7
 8013534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013538:	4770      	bx	lr
 801353a:	bf00      	nop
 801353c:	20000000 	.word	0x20000000

08013540 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8013540:	b580      	push	{r7, lr}
 8013542:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8013544:	f7ff fff0 	bl	8013528 <HAL_RCC_GetHCLKFreq>
 8013548:	4601      	mov	r1, r0
 801354a:	4b05      	ldr	r3, [pc, #20]	; (8013560 <HAL_RCC_GetPCLK1Freq+0x20>)
 801354c:	689b      	ldr	r3, [r3, #8]
 801354e:	0a9b      	lsrs	r3, r3, #10
 8013550:	f003 0307 	and.w	r3, r3, #7
 8013554:	4a03      	ldr	r2, [pc, #12]	; (8013564 <HAL_RCC_GetPCLK1Freq+0x24>)
 8013556:	5cd3      	ldrb	r3, [r2, r3]
 8013558:	fa21 f303 	lsr.w	r3, r1, r3
}
 801355c:	4618      	mov	r0, r3
 801355e:	bd80      	pop	{r7, pc}
 8013560:	40023800 	.word	0x40023800
 8013564:	0802a914 	.word	0x0802a914

08013568 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8013568:	b580      	push	{r7, lr}
 801356a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 801356c:	f7ff ffdc 	bl	8013528 <HAL_RCC_GetHCLKFreq>
 8013570:	4601      	mov	r1, r0
 8013572:	4b05      	ldr	r3, [pc, #20]	; (8013588 <HAL_RCC_GetPCLK2Freq+0x20>)
 8013574:	689b      	ldr	r3, [r3, #8]
 8013576:	0b5b      	lsrs	r3, r3, #13
 8013578:	f003 0307 	and.w	r3, r3, #7
 801357c:	4a03      	ldr	r2, [pc, #12]	; (801358c <HAL_RCC_GetPCLK2Freq+0x24>)
 801357e:	5cd3      	ldrb	r3, [r2, r3]
 8013580:	fa21 f303 	lsr.w	r3, r1, r3
}
 8013584:	4618      	mov	r0, r3
 8013586:	bd80      	pop	{r7, pc}
 8013588:	40023800 	.word	0x40023800
 801358c:	0802a914 	.word	0x0802a914

08013590 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8013590:	b480      	push	{r7}
 8013592:	b083      	sub	sp, #12
 8013594:	af00      	add	r7, sp, #0
 8013596:	6078      	str	r0, [r7, #4]
 8013598:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 801359a:	687b      	ldr	r3, [r7, #4]
 801359c:	220f      	movs	r2, #15
 801359e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80135a0:	4b12      	ldr	r3, [pc, #72]	; (80135ec <HAL_RCC_GetClockConfig+0x5c>)
 80135a2:	689b      	ldr	r3, [r3, #8]
 80135a4:	f003 0203 	and.w	r2, r3, #3
 80135a8:	687b      	ldr	r3, [r7, #4]
 80135aa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80135ac:	4b0f      	ldr	r3, [pc, #60]	; (80135ec <HAL_RCC_GetClockConfig+0x5c>)
 80135ae:	689b      	ldr	r3, [r3, #8]
 80135b0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80135b4:	687b      	ldr	r3, [r7, #4]
 80135b6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80135b8:	4b0c      	ldr	r3, [pc, #48]	; (80135ec <HAL_RCC_GetClockConfig+0x5c>)
 80135ba:	689b      	ldr	r3, [r3, #8]
 80135bc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80135c0:	687b      	ldr	r3, [r7, #4]
 80135c2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80135c4:	4b09      	ldr	r3, [pc, #36]	; (80135ec <HAL_RCC_GetClockConfig+0x5c>)
 80135c6:	689b      	ldr	r3, [r3, #8]
 80135c8:	08db      	lsrs	r3, r3, #3
 80135ca:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80135ce:	687b      	ldr	r3, [r7, #4]
 80135d0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80135d2:	4b07      	ldr	r3, [pc, #28]	; (80135f0 <HAL_RCC_GetClockConfig+0x60>)
 80135d4:	681b      	ldr	r3, [r3, #0]
 80135d6:	f003 020f 	and.w	r2, r3, #15
 80135da:	683b      	ldr	r3, [r7, #0]
 80135dc:	601a      	str	r2, [r3, #0]
}
 80135de:	bf00      	nop
 80135e0:	370c      	adds	r7, #12
 80135e2:	46bd      	mov	sp, r7
 80135e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135e8:	4770      	bx	lr
 80135ea:	bf00      	nop
 80135ec:	40023800 	.word	0x40023800
 80135f0:	40023c00 	.word	0x40023c00

080135f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80135f4:	b580      	push	{r7, lr}
 80135f6:	b088      	sub	sp, #32
 80135f8:	af00      	add	r7, sp, #0
 80135fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80135fc:	2300      	movs	r3, #0
 80135fe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8013600:	2300      	movs	r3, #0
 8013602:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8013604:	2300      	movs	r3, #0
 8013606:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8013608:	2300      	movs	r3, #0
 801360a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 801360c:	2300      	movs	r3, #0
 801360e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8013610:	687b      	ldr	r3, [r7, #4]
 8013612:	681b      	ldr	r3, [r3, #0]
 8013614:	f003 0301 	and.w	r3, r3, #1
 8013618:	2b00      	cmp	r3, #0
 801361a:	d012      	beq.n	8013642 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 801361c:	4a69      	ldr	r2, [pc, #420]	; (80137c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801361e:	4b69      	ldr	r3, [pc, #420]	; (80137c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8013620:	689b      	ldr	r3, [r3, #8]
 8013622:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8013626:	6093      	str	r3, [r2, #8]
 8013628:	4966      	ldr	r1, [pc, #408]	; (80137c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801362a:	4b66      	ldr	r3, [pc, #408]	; (80137c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801362c:	689a      	ldr	r2, [r3, #8]
 801362e:	687b      	ldr	r3, [r7, #4]
 8013630:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013632:	4313      	orrs	r3, r2
 8013634:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8013636:	687b      	ldr	r3, [r7, #4]
 8013638:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801363a:	2b00      	cmp	r3, #0
 801363c:	d101      	bne.n	8013642 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 801363e:	2301      	movs	r3, #1
 8013640:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	681b      	ldr	r3, [r3, #0]
 8013646:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801364a:	2b00      	cmp	r3, #0
 801364c:	d017      	beq.n	801367e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 801364e:	495d      	ldr	r1, [pc, #372]	; (80137c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8013650:	4b5c      	ldr	r3, [pc, #368]	; (80137c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8013652:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013656:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801365a:	687b      	ldr	r3, [r7, #4]
 801365c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801365e:	4313      	orrs	r3, r2
 8013660:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8013664:	687b      	ldr	r3, [r7, #4]
 8013666:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013668:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801366c:	d101      	bne.n	8013672 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 801366e:	2301      	movs	r3, #1
 8013670:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8013672:	687b      	ldr	r3, [r7, #4]
 8013674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013676:	2b00      	cmp	r3, #0
 8013678:	d101      	bne.n	801367e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 801367a:	2301      	movs	r3, #1
 801367c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 801367e:	687b      	ldr	r3, [r7, #4]
 8013680:	681b      	ldr	r3, [r3, #0]
 8013682:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8013686:	2b00      	cmp	r3, #0
 8013688:	d017      	beq.n	80136ba <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 801368a:	494e      	ldr	r1, [pc, #312]	; (80137c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801368c:	4b4d      	ldr	r3, [pc, #308]	; (80137c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801368e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013692:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8013696:	687b      	ldr	r3, [r7, #4]
 8013698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801369a:	4313      	orrs	r3, r2
 801369c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80136a0:	687b      	ldr	r3, [r7, #4]
 80136a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80136a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80136a8:	d101      	bne.n	80136ae <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80136aa:	2301      	movs	r3, #1
 80136ac:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80136ae:	687b      	ldr	r3, [r7, #4]
 80136b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80136b2:	2b00      	cmp	r3, #0
 80136b4:	d101      	bne.n	80136ba <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80136b6:	2301      	movs	r3, #1
 80136b8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80136ba:	687b      	ldr	r3, [r7, #4]
 80136bc:	681b      	ldr	r3, [r3, #0]
 80136be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80136c2:	2b00      	cmp	r3, #0
 80136c4:	d001      	beq.n	80136ca <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80136c6:	2301      	movs	r3, #1
 80136c8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80136ca:	687b      	ldr	r3, [r7, #4]
 80136cc:	681b      	ldr	r3, [r3, #0]
 80136ce:	f003 0320 	and.w	r3, r3, #32
 80136d2:	2b00      	cmp	r3, #0
 80136d4:	f000 808b 	beq.w	80137ee <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80136d8:	4a3a      	ldr	r2, [pc, #232]	; (80137c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80136da:	4b3a      	ldr	r3, [pc, #232]	; (80137c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80136dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80136de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80136e2:	6413      	str	r3, [r2, #64]	; 0x40
 80136e4:	4b37      	ldr	r3, [pc, #220]	; (80137c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80136e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80136e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80136ec:	60bb      	str	r3, [r7, #8]
 80136ee:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80136f0:	4a35      	ldr	r2, [pc, #212]	; (80137c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80136f2:	4b35      	ldr	r3, [pc, #212]	; (80137c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80136f4:	681b      	ldr	r3, [r3, #0]
 80136f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80136fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80136fc:	f7fd fde2 	bl	80112c4 <HAL_GetTick>
 8013700:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8013702:	e008      	b.n	8013716 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8013704:	f7fd fdde 	bl	80112c4 <HAL_GetTick>
 8013708:	4602      	mov	r2, r0
 801370a:	697b      	ldr	r3, [r7, #20]
 801370c:	1ad3      	subs	r3, r2, r3
 801370e:	2b64      	cmp	r3, #100	; 0x64
 8013710:	d901      	bls.n	8013716 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8013712:	2303      	movs	r3, #3
 8013714:	e38d      	b.n	8013e32 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8013716:	4b2c      	ldr	r3, [pc, #176]	; (80137c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8013718:	681b      	ldr	r3, [r3, #0]
 801371a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801371e:	2b00      	cmp	r3, #0
 8013720:	d0f0      	beq.n	8013704 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8013722:	4b28      	ldr	r3, [pc, #160]	; (80137c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8013724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013726:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801372a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 801372c:	693b      	ldr	r3, [r7, #16]
 801372e:	2b00      	cmp	r3, #0
 8013730:	d035      	beq.n	801379e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8013732:	687b      	ldr	r3, [r7, #4]
 8013734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013736:	f403 7240 	and.w	r2, r3, #768	; 0x300
 801373a:	693b      	ldr	r3, [r7, #16]
 801373c:	429a      	cmp	r2, r3
 801373e:	d02e      	beq.n	801379e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8013740:	4b20      	ldr	r3, [pc, #128]	; (80137c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8013742:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013744:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013748:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 801374a:	4a1e      	ldr	r2, [pc, #120]	; (80137c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801374c:	4b1d      	ldr	r3, [pc, #116]	; (80137c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801374e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013750:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8013754:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8013756:	4a1b      	ldr	r2, [pc, #108]	; (80137c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8013758:	4b1a      	ldr	r3, [pc, #104]	; (80137c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801375a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801375c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8013760:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8013762:	4a18      	ldr	r2, [pc, #96]	; (80137c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8013764:	693b      	ldr	r3, [r7, #16]
 8013766:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8013768:	4b16      	ldr	r3, [pc, #88]	; (80137c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801376a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801376c:	f003 0301 	and.w	r3, r3, #1
 8013770:	2b01      	cmp	r3, #1
 8013772:	d114      	bne.n	801379e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013774:	f7fd fda6 	bl	80112c4 <HAL_GetTick>
 8013778:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801377a:	e00a      	b.n	8013792 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801377c:	f7fd fda2 	bl	80112c4 <HAL_GetTick>
 8013780:	4602      	mov	r2, r0
 8013782:	697b      	ldr	r3, [r7, #20]
 8013784:	1ad3      	subs	r3, r2, r3
 8013786:	f241 3288 	movw	r2, #5000	; 0x1388
 801378a:	4293      	cmp	r3, r2
 801378c:	d901      	bls.n	8013792 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 801378e:	2303      	movs	r3, #3
 8013790:	e34f      	b.n	8013e32 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8013792:	4b0c      	ldr	r3, [pc, #48]	; (80137c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8013794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013796:	f003 0302 	and.w	r3, r3, #2
 801379a:	2b00      	cmp	r3, #0
 801379c:	d0ee      	beq.n	801377c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801379e:	687b      	ldr	r3, [r7, #4]
 80137a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80137a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80137a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80137aa:	d111      	bne.n	80137d0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80137ac:	4805      	ldr	r0, [pc, #20]	; (80137c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80137ae:	4b05      	ldr	r3, [pc, #20]	; (80137c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80137b0:	689b      	ldr	r3, [r3, #8]
 80137b2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80137b6:	687b      	ldr	r3, [r7, #4]
 80137b8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80137ba:	4b04      	ldr	r3, [pc, #16]	; (80137cc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80137bc:	400b      	ands	r3, r1
 80137be:	4313      	orrs	r3, r2
 80137c0:	6083      	str	r3, [r0, #8]
 80137c2:	e00b      	b.n	80137dc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80137c4:	40023800 	.word	0x40023800
 80137c8:	40007000 	.word	0x40007000
 80137cc:	0ffffcff 	.word	0x0ffffcff
 80137d0:	4ab2      	ldr	r2, [pc, #712]	; (8013a9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80137d2:	4bb2      	ldr	r3, [pc, #712]	; (8013a9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80137d4:	689b      	ldr	r3, [r3, #8]
 80137d6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80137da:	6093      	str	r3, [r2, #8]
 80137dc:	49af      	ldr	r1, [pc, #700]	; (8013a9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80137de:	4baf      	ldr	r3, [pc, #700]	; (8013a9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80137e0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80137e2:	687b      	ldr	r3, [r7, #4]
 80137e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80137e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80137ea:	4313      	orrs	r3, r2
 80137ec:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80137ee:	687b      	ldr	r3, [r7, #4]
 80137f0:	681b      	ldr	r3, [r3, #0]
 80137f2:	f003 0310 	and.w	r3, r3, #16
 80137f6:	2b00      	cmp	r3, #0
 80137f8:	d010      	beq.n	801381c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80137fa:	4aa8      	ldr	r2, [pc, #672]	; (8013a9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80137fc:	4ba7      	ldr	r3, [pc, #668]	; (8013a9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80137fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013802:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8013806:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 801380a:	49a4      	ldr	r1, [pc, #656]	; (8013a9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 801380c:	4ba3      	ldr	r3, [pc, #652]	; (8013a9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 801380e:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8013812:	687b      	ldr	r3, [r7, #4]
 8013814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013816:	4313      	orrs	r3, r2
 8013818:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 801381c:	687b      	ldr	r3, [r7, #4]
 801381e:	681b      	ldr	r3, [r3, #0]
 8013820:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8013824:	2b00      	cmp	r3, #0
 8013826:	d00a      	beq.n	801383e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8013828:	499c      	ldr	r1, [pc, #624]	; (8013a9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 801382a:	4b9c      	ldr	r3, [pc, #624]	; (8013a9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 801382c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013830:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8013834:	687b      	ldr	r3, [r7, #4]
 8013836:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013838:	4313      	orrs	r3, r2
 801383a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 801383e:	687b      	ldr	r3, [r7, #4]
 8013840:	681b      	ldr	r3, [r3, #0]
 8013842:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013846:	2b00      	cmp	r3, #0
 8013848:	d00a      	beq.n	8013860 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 801384a:	4994      	ldr	r1, [pc, #592]	; (8013a9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 801384c:	4b93      	ldr	r3, [pc, #588]	; (8013a9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 801384e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013852:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8013856:	687b      	ldr	r3, [r7, #4]
 8013858:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801385a:	4313      	orrs	r3, r2
 801385c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8013860:	687b      	ldr	r3, [r7, #4]
 8013862:	681b      	ldr	r3, [r3, #0]
 8013864:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8013868:	2b00      	cmp	r3, #0
 801386a:	d00a      	beq.n	8013882 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 801386c:	498b      	ldr	r1, [pc, #556]	; (8013a9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 801386e:	4b8b      	ldr	r3, [pc, #556]	; (8013a9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8013870:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013874:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8013878:	687b      	ldr	r3, [r7, #4]
 801387a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801387c:	4313      	orrs	r3, r2
 801387e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8013882:	687b      	ldr	r3, [r7, #4]
 8013884:	681b      	ldr	r3, [r3, #0]
 8013886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801388a:	2b00      	cmp	r3, #0
 801388c:	d00a      	beq.n	80138a4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 801388e:	4983      	ldr	r1, [pc, #524]	; (8013a9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8013890:	4b82      	ldr	r3, [pc, #520]	; (8013a9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8013892:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013896:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 801389a:	687b      	ldr	r3, [r7, #4]
 801389c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801389e:	4313      	orrs	r3, r2
 80138a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80138a4:	687b      	ldr	r3, [r7, #4]
 80138a6:	681b      	ldr	r3, [r3, #0]
 80138a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80138ac:	2b00      	cmp	r3, #0
 80138ae:	d00a      	beq.n	80138c6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80138b0:	497a      	ldr	r1, [pc, #488]	; (8013a9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80138b2:	4b7a      	ldr	r3, [pc, #488]	; (8013a9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80138b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80138b8:	f023 0203 	bic.w	r2, r3, #3
 80138bc:	687b      	ldr	r3, [r7, #4]
 80138be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80138c0:	4313      	orrs	r3, r2
 80138c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80138c6:	687b      	ldr	r3, [r7, #4]
 80138c8:	681b      	ldr	r3, [r3, #0]
 80138ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80138ce:	2b00      	cmp	r3, #0
 80138d0:	d00a      	beq.n	80138e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80138d2:	4972      	ldr	r1, [pc, #456]	; (8013a9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80138d4:	4b71      	ldr	r3, [pc, #452]	; (8013a9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80138d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80138da:	f023 020c 	bic.w	r2, r3, #12
 80138de:	687b      	ldr	r3, [r7, #4]
 80138e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80138e2:	4313      	orrs	r3, r2
 80138e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80138e8:	687b      	ldr	r3, [r7, #4]
 80138ea:	681b      	ldr	r3, [r3, #0]
 80138ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80138f0:	2b00      	cmp	r3, #0
 80138f2:	d00a      	beq.n	801390a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80138f4:	4969      	ldr	r1, [pc, #420]	; (8013a9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80138f6:	4b69      	ldr	r3, [pc, #420]	; (8013a9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80138f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80138fc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8013900:	687b      	ldr	r3, [r7, #4]
 8013902:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013904:	4313      	orrs	r3, r2
 8013906:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 801390a:	687b      	ldr	r3, [r7, #4]
 801390c:	681b      	ldr	r3, [r3, #0]
 801390e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8013912:	2b00      	cmp	r3, #0
 8013914:	d00a      	beq.n	801392c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8013916:	4961      	ldr	r1, [pc, #388]	; (8013a9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8013918:	4b60      	ldr	r3, [pc, #384]	; (8013a9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 801391a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801391e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8013922:	687b      	ldr	r3, [r7, #4]
 8013924:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013926:	4313      	orrs	r3, r2
 8013928:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 801392c:	687b      	ldr	r3, [r7, #4]
 801392e:	681b      	ldr	r3, [r3, #0]
 8013930:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8013934:	2b00      	cmp	r3, #0
 8013936:	d00a      	beq.n	801394e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8013938:	4958      	ldr	r1, [pc, #352]	; (8013a9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 801393a:	4b58      	ldr	r3, [pc, #352]	; (8013a9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 801393c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013940:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8013944:	687b      	ldr	r3, [r7, #4]
 8013946:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013948:	4313      	orrs	r3, r2
 801394a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 801394e:	687b      	ldr	r3, [r7, #4]
 8013950:	681b      	ldr	r3, [r3, #0]
 8013952:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013956:	2b00      	cmp	r3, #0
 8013958:	d00a      	beq.n	8013970 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 801395a:	4950      	ldr	r1, [pc, #320]	; (8013a9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 801395c:	4b4f      	ldr	r3, [pc, #316]	; (8013a9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 801395e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013962:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8013966:	687b      	ldr	r3, [r7, #4]
 8013968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801396a:	4313      	orrs	r3, r2
 801396c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8013970:	687b      	ldr	r3, [r7, #4]
 8013972:	681b      	ldr	r3, [r3, #0]
 8013974:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8013978:	2b00      	cmp	r3, #0
 801397a:	d00a      	beq.n	8013992 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 801397c:	4947      	ldr	r1, [pc, #284]	; (8013a9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 801397e:	4b47      	ldr	r3, [pc, #284]	; (8013a9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8013980:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013984:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8013988:	687b      	ldr	r3, [r7, #4]
 801398a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801398c:	4313      	orrs	r3, r2
 801398e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8013992:	687b      	ldr	r3, [r7, #4]
 8013994:	681b      	ldr	r3, [r3, #0]
 8013996:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801399a:	2b00      	cmp	r3, #0
 801399c:	d00a      	beq.n	80139b4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 801399e:	493f      	ldr	r1, [pc, #252]	; (8013a9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80139a0:	4b3e      	ldr	r3, [pc, #248]	; (8013a9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80139a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80139a6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80139aa:	687b      	ldr	r3, [r7, #4]
 80139ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80139ae:	4313      	orrs	r3, r2
 80139b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80139b4:	687b      	ldr	r3, [r7, #4]
 80139b6:	681b      	ldr	r3, [r3, #0]
 80139b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80139bc:	2b00      	cmp	r3, #0
 80139be:	d00a      	beq.n	80139d6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80139c0:	4936      	ldr	r1, [pc, #216]	; (8013a9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80139c2:	4b36      	ldr	r3, [pc, #216]	; (8013a9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80139c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80139c8:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80139cc:	687b      	ldr	r3, [r7, #4]
 80139ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80139d0:	4313      	orrs	r3, r2
 80139d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80139d6:	687b      	ldr	r3, [r7, #4]
 80139d8:	681b      	ldr	r3, [r3, #0]
 80139da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80139de:	2b00      	cmp	r3, #0
 80139e0:	d011      	beq.n	8013a06 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80139e2:	492e      	ldr	r1, [pc, #184]	; (8013a9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80139e4:	4b2d      	ldr	r3, [pc, #180]	; (8013a9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80139e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80139ea:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80139ee:	687b      	ldr	r3, [r7, #4]
 80139f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80139f2:	4313      	orrs	r3, r2
 80139f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80139f8:	687b      	ldr	r3, [r7, #4]
 80139fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80139fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8013a00:	d101      	bne.n	8013a06 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8013a02:	2301      	movs	r3, #1
 8013a04:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8013a06:	687b      	ldr	r3, [r7, #4]
 8013a08:	681b      	ldr	r3, [r3, #0]
 8013a0a:	f003 0308 	and.w	r3, r3, #8
 8013a0e:	2b00      	cmp	r3, #0
 8013a10:	d001      	beq.n	8013a16 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8013a12:	2301      	movs	r3, #1
 8013a14:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8013a16:	687b      	ldr	r3, [r7, #4]
 8013a18:	681b      	ldr	r3, [r3, #0]
 8013a1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8013a1e:	2b00      	cmp	r3, #0
 8013a20:	d00a      	beq.n	8013a38 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8013a22:	491e      	ldr	r1, [pc, #120]	; (8013a9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8013a24:	4b1d      	ldr	r3, [pc, #116]	; (8013a9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8013a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013a2a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8013a2e:	687b      	ldr	r3, [r7, #4]
 8013a30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013a32:	4313      	orrs	r3, r2
 8013a34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8013a38:	687b      	ldr	r3, [r7, #4]
 8013a3a:	681b      	ldr	r3, [r3, #0]
 8013a3c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8013a40:	2b00      	cmp	r3, #0
 8013a42:	d00b      	beq.n	8013a5c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8013a44:	4915      	ldr	r1, [pc, #84]	; (8013a9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8013a46:	4b15      	ldr	r3, [pc, #84]	; (8013a9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8013a48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013a4c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8013a50:	687b      	ldr	r3, [r7, #4]
 8013a52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013a56:	4313      	orrs	r3, r2
 8013a58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8013a5c:	687b      	ldr	r3, [r7, #4]
 8013a5e:	681b      	ldr	r3, [r3, #0]
 8013a60:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8013a64:	2b00      	cmp	r3, #0
 8013a66:	d00b      	beq.n	8013a80 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8013a68:	490c      	ldr	r1, [pc, #48]	; (8013a9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8013a6a:	4b0c      	ldr	r3, [pc, #48]	; (8013a9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8013a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013a70:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8013a74:	687b      	ldr	r3, [r7, #4]
 8013a76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013a7a:	4313      	orrs	r3, r2
 8013a7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8013a80:	687b      	ldr	r3, [r7, #4]
 8013a82:	681b      	ldr	r3, [r3, #0]
 8013a84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8013a88:	2b00      	cmp	r3, #0
 8013a8a:	d00e      	beq.n	8013aaa <HAL_RCCEx_PeriphCLKConfig+0x4b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8013a8c:	4903      	ldr	r1, [pc, #12]	; (8013a9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8013a8e:	4b03      	ldr	r3, [pc, #12]	; (8013a9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8013a90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013a94:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8013a98:	687b      	ldr	r3, [r7, #4]
 8013a9a:	e001      	b.n	8013aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
 8013a9c:	40023800 	.word	0x40023800
 8013aa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013aa4:	4313      	orrs	r3, r2
 8013aa6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8013aaa:	687b      	ldr	r3, [r7, #4]
 8013aac:	681b      	ldr	r3, [r3, #0]
 8013aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013ab2:	2b00      	cmp	r3, #0
 8013ab4:	d00b      	beq.n	8013ace <HAL_RCCEx_PeriphCLKConfig+0x4da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8013ab6:	4981      	ldr	r1, [pc, #516]	; (8013cbc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8013ab8:	4b80      	ldr	r3, [pc, #512]	; (8013cbc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8013aba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013abe:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8013ac2:	687b      	ldr	r3, [r7, #4]
 8013ac4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013ac8:	4313      	orrs	r3, r2
 8013aca:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8013ace:	69fb      	ldr	r3, [r7, #28]
 8013ad0:	2b01      	cmp	r3, #1
 8013ad2:	d006      	beq.n	8013ae2 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8013ad4:	687b      	ldr	r3, [r7, #4]
 8013ad6:	681b      	ldr	r3, [r3, #0]
 8013ad8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013adc:	2b00      	cmp	r3, #0
 8013ade:	f000 80d6 	beq.w	8013c8e <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8013ae2:	4a76      	ldr	r2, [pc, #472]	; (8013cbc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8013ae4:	4b75      	ldr	r3, [pc, #468]	; (8013cbc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8013ae6:	681b      	ldr	r3, [r3, #0]
 8013ae8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8013aec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8013aee:	f7fd fbe9 	bl	80112c4 <HAL_GetTick>
 8013af2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8013af4:	e008      	b.n	8013b08 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8013af6:	f7fd fbe5 	bl	80112c4 <HAL_GetTick>
 8013afa:	4602      	mov	r2, r0
 8013afc:	697b      	ldr	r3, [r7, #20]
 8013afe:	1ad3      	subs	r3, r2, r3
 8013b00:	2b64      	cmp	r3, #100	; 0x64
 8013b02:	d901      	bls.n	8013b08 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8013b04:	2303      	movs	r3, #3
 8013b06:	e194      	b.n	8013e32 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8013b08:	4b6c      	ldr	r3, [pc, #432]	; (8013cbc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8013b0a:	681b      	ldr	r3, [r3, #0]
 8013b0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8013b10:	2b00      	cmp	r3, #0
 8013b12:	d1f0      	bne.n	8013af6 <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8013b14:	687b      	ldr	r3, [r7, #4]
 8013b16:	681b      	ldr	r3, [r3, #0]
 8013b18:	f003 0301 	and.w	r3, r3, #1
 8013b1c:	2b00      	cmp	r3, #0
 8013b1e:	d021      	beq.n	8013b64 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8013b20:	687b      	ldr	r3, [r7, #4]
 8013b22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013b24:	2b00      	cmp	r3, #0
 8013b26:	d11d      	bne.n	8013b64 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8013b28:	4b64      	ldr	r3, [pc, #400]	; (8013cbc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8013b2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013b2e:	0c1b      	lsrs	r3, r3, #16
 8013b30:	f003 0303 	and.w	r3, r3, #3
 8013b34:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8013b36:	4b61      	ldr	r3, [pc, #388]	; (8013cbc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8013b38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013b3c:	0e1b      	lsrs	r3, r3, #24
 8013b3e:	f003 030f 	and.w	r3, r3, #15
 8013b42:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8013b44:	495d      	ldr	r1, [pc, #372]	; (8013cbc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8013b46:	687b      	ldr	r3, [r7, #4]
 8013b48:	685b      	ldr	r3, [r3, #4]
 8013b4a:	019a      	lsls	r2, r3, #6
 8013b4c:	693b      	ldr	r3, [r7, #16]
 8013b4e:	041b      	lsls	r3, r3, #16
 8013b50:	431a      	orrs	r2, r3
 8013b52:	68fb      	ldr	r3, [r7, #12]
 8013b54:	061b      	lsls	r3, r3, #24
 8013b56:	431a      	orrs	r2, r3
 8013b58:	687b      	ldr	r3, [r7, #4]
 8013b5a:	689b      	ldr	r3, [r3, #8]
 8013b5c:	071b      	lsls	r3, r3, #28
 8013b5e:	4313      	orrs	r3, r2
 8013b60:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8013b64:	687b      	ldr	r3, [r7, #4]
 8013b66:	681b      	ldr	r3, [r3, #0]
 8013b68:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8013b6c:	2b00      	cmp	r3, #0
 8013b6e:	d004      	beq.n	8013b7a <HAL_RCCEx_PeriphCLKConfig+0x586>
 8013b70:	687b      	ldr	r3, [r7, #4]
 8013b72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013b74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8013b78:	d00a      	beq.n	8013b90 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8013b7a:	687b      	ldr	r3, [r7, #4]
 8013b7c:	681b      	ldr	r3, [r3, #0]
 8013b7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8013b82:	2b00      	cmp	r3, #0
 8013b84:	d02e      	beq.n	8013be4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8013b86:	687b      	ldr	r3, [r7, #4]
 8013b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013b8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8013b8e:	d129      	bne.n	8013be4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8013b90:	4b4a      	ldr	r3, [pc, #296]	; (8013cbc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8013b92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013b96:	0c1b      	lsrs	r3, r3, #16
 8013b98:	f003 0303 	and.w	r3, r3, #3
 8013b9c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8013b9e:	4b47      	ldr	r3, [pc, #284]	; (8013cbc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8013ba0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013ba4:	0f1b      	lsrs	r3, r3, #28
 8013ba6:	f003 0307 	and.w	r3, r3, #7
 8013baa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8013bac:	4943      	ldr	r1, [pc, #268]	; (8013cbc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8013bae:	687b      	ldr	r3, [r7, #4]
 8013bb0:	685b      	ldr	r3, [r3, #4]
 8013bb2:	019a      	lsls	r2, r3, #6
 8013bb4:	693b      	ldr	r3, [r7, #16]
 8013bb6:	041b      	lsls	r3, r3, #16
 8013bb8:	431a      	orrs	r2, r3
 8013bba:	687b      	ldr	r3, [r7, #4]
 8013bbc:	68db      	ldr	r3, [r3, #12]
 8013bbe:	061b      	lsls	r3, r3, #24
 8013bc0:	431a      	orrs	r2, r3
 8013bc2:	68fb      	ldr	r3, [r7, #12]
 8013bc4:	071b      	lsls	r3, r3, #28
 8013bc6:	4313      	orrs	r3, r2
 8013bc8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8013bcc:	493b      	ldr	r1, [pc, #236]	; (8013cbc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8013bce:	4b3b      	ldr	r3, [pc, #236]	; (8013cbc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8013bd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013bd4:	f023 021f 	bic.w	r2, r3, #31
 8013bd8:	687b      	ldr	r3, [r7, #4]
 8013bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013bdc:	3b01      	subs	r3, #1
 8013bde:	4313      	orrs	r3, r2
 8013be0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8013be4:	687b      	ldr	r3, [r7, #4]
 8013be6:	681b      	ldr	r3, [r3, #0]
 8013be8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8013bec:	2b00      	cmp	r3, #0
 8013bee:	d01d      	beq.n	8013c2c <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8013bf0:	4b32      	ldr	r3, [pc, #200]	; (8013cbc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8013bf2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013bf6:	0e1b      	lsrs	r3, r3, #24
 8013bf8:	f003 030f 	and.w	r3, r3, #15
 8013bfc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8013bfe:	4b2f      	ldr	r3, [pc, #188]	; (8013cbc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8013c00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013c04:	0f1b      	lsrs	r3, r3, #28
 8013c06:	f003 0307 	and.w	r3, r3, #7
 8013c0a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8013c0c:	492b      	ldr	r1, [pc, #172]	; (8013cbc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8013c0e:	687b      	ldr	r3, [r7, #4]
 8013c10:	685b      	ldr	r3, [r3, #4]
 8013c12:	019a      	lsls	r2, r3, #6
 8013c14:	687b      	ldr	r3, [r7, #4]
 8013c16:	691b      	ldr	r3, [r3, #16]
 8013c18:	041b      	lsls	r3, r3, #16
 8013c1a:	431a      	orrs	r2, r3
 8013c1c:	693b      	ldr	r3, [r7, #16]
 8013c1e:	061b      	lsls	r3, r3, #24
 8013c20:	431a      	orrs	r2, r3
 8013c22:	68fb      	ldr	r3, [r7, #12]
 8013c24:	071b      	lsls	r3, r3, #28
 8013c26:	4313      	orrs	r3, r2
 8013c28:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	681b      	ldr	r3, [r3, #0]
 8013c30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013c34:	2b00      	cmp	r3, #0
 8013c36:	d011      	beq.n	8013c5c <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8013c38:	4920      	ldr	r1, [pc, #128]	; (8013cbc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8013c3a:	687b      	ldr	r3, [r7, #4]
 8013c3c:	685b      	ldr	r3, [r3, #4]
 8013c3e:	019a      	lsls	r2, r3, #6
 8013c40:	687b      	ldr	r3, [r7, #4]
 8013c42:	691b      	ldr	r3, [r3, #16]
 8013c44:	041b      	lsls	r3, r3, #16
 8013c46:	431a      	orrs	r2, r3
 8013c48:	687b      	ldr	r3, [r7, #4]
 8013c4a:	68db      	ldr	r3, [r3, #12]
 8013c4c:	061b      	lsls	r3, r3, #24
 8013c4e:	431a      	orrs	r2, r3
 8013c50:	687b      	ldr	r3, [r7, #4]
 8013c52:	689b      	ldr	r3, [r3, #8]
 8013c54:	071b      	lsls	r3, r3, #28
 8013c56:	4313      	orrs	r3, r2
 8013c58:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8013c5c:	4a17      	ldr	r2, [pc, #92]	; (8013cbc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8013c5e:	4b17      	ldr	r3, [pc, #92]	; (8013cbc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8013c60:	681b      	ldr	r3, [r3, #0]
 8013c62:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8013c66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8013c68:	f7fd fb2c 	bl	80112c4 <HAL_GetTick>
 8013c6c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8013c6e:	e008      	b.n	8013c82 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8013c70:	f7fd fb28 	bl	80112c4 <HAL_GetTick>
 8013c74:	4602      	mov	r2, r0
 8013c76:	697b      	ldr	r3, [r7, #20]
 8013c78:	1ad3      	subs	r3, r2, r3
 8013c7a:	2b64      	cmp	r3, #100	; 0x64
 8013c7c:	d901      	bls.n	8013c82 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8013c7e:	2303      	movs	r3, #3
 8013c80:	e0d7      	b.n	8013e32 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8013c82:	4b0e      	ldr	r3, [pc, #56]	; (8013cbc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8013c84:	681b      	ldr	r3, [r3, #0]
 8013c86:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8013c8a:	2b00      	cmp	r3, #0
 8013c8c:	d0f0      	beq.n	8013c70 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8013c8e:	69bb      	ldr	r3, [r7, #24]
 8013c90:	2b01      	cmp	r3, #1
 8013c92:	f040 80cd 	bne.w	8013e30 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8013c96:	4a09      	ldr	r2, [pc, #36]	; (8013cbc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8013c98:	4b08      	ldr	r3, [pc, #32]	; (8013cbc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8013c9a:	681b      	ldr	r3, [r3, #0]
 8013c9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8013ca0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8013ca2:	f7fd fb0f 	bl	80112c4 <HAL_GetTick>
 8013ca6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8013ca8:	e00a      	b.n	8013cc0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8013caa:	f7fd fb0b 	bl	80112c4 <HAL_GetTick>
 8013cae:	4602      	mov	r2, r0
 8013cb0:	697b      	ldr	r3, [r7, #20]
 8013cb2:	1ad3      	subs	r3, r2, r3
 8013cb4:	2b64      	cmp	r3, #100	; 0x64
 8013cb6:	d903      	bls.n	8013cc0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8013cb8:	2303      	movs	r3, #3
 8013cba:	e0ba      	b.n	8013e32 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8013cbc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8013cc0:	4b5e      	ldr	r3, [pc, #376]	; (8013e3c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8013cc2:	681b      	ldr	r3, [r3, #0]
 8013cc4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8013cc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8013ccc:	d0ed      	beq.n	8013caa <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8013cce:	687b      	ldr	r3, [r7, #4]
 8013cd0:	681b      	ldr	r3, [r3, #0]
 8013cd2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8013cd6:	2b00      	cmp	r3, #0
 8013cd8:	d003      	beq.n	8013ce2 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8013cda:	687b      	ldr	r3, [r7, #4]
 8013cdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013cde:	2b00      	cmp	r3, #0
 8013ce0:	d009      	beq.n	8013cf6 <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8013ce2:	687b      	ldr	r3, [r7, #4]
 8013ce4:	681b      	ldr	r3, [r3, #0]
 8013ce6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8013cea:	2b00      	cmp	r3, #0
 8013cec:	d02e      	beq.n	8013d4c <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8013cee:	687b      	ldr	r3, [r7, #4]
 8013cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013cf2:	2b00      	cmp	r3, #0
 8013cf4:	d12a      	bne.n	8013d4c <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8013cf6:	4b51      	ldr	r3, [pc, #324]	; (8013e3c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8013cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013cfc:	0c1b      	lsrs	r3, r3, #16
 8013cfe:	f003 0303 	and.w	r3, r3, #3
 8013d02:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8013d04:	4b4d      	ldr	r3, [pc, #308]	; (8013e3c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8013d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013d0a:	0f1b      	lsrs	r3, r3, #28
 8013d0c:	f003 0307 	and.w	r3, r3, #7
 8013d10:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8013d12:	494a      	ldr	r1, [pc, #296]	; (8013e3c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8013d14:	687b      	ldr	r3, [r7, #4]
 8013d16:	695b      	ldr	r3, [r3, #20]
 8013d18:	019a      	lsls	r2, r3, #6
 8013d1a:	693b      	ldr	r3, [r7, #16]
 8013d1c:	041b      	lsls	r3, r3, #16
 8013d1e:	431a      	orrs	r2, r3
 8013d20:	687b      	ldr	r3, [r7, #4]
 8013d22:	699b      	ldr	r3, [r3, #24]
 8013d24:	061b      	lsls	r3, r3, #24
 8013d26:	431a      	orrs	r2, r3
 8013d28:	68fb      	ldr	r3, [r7, #12]
 8013d2a:	071b      	lsls	r3, r3, #28
 8013d2c:	4313      	orrs	r3, r2
 8013d2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8013d32:	4942      	ldr	r1, [pc, #264]	; (8013e3c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8013d34:	4b41      	ldr	r3, [pc, #260]	; (8013e3c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8013d36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013d3a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8013d3e:	687b      	ldr	r3, [r7, #4]
 8013d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013d42:	3b01      	subs	r3, #1
 8013d44:	021b      	lsls	r3, r3, #8
 8013d46:	4313      	orrs	r3, r2
 8013d48:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8013d4c:	687b      	ldr	r3, [r7, #4]
 8013d4e:	681b      	ldr	r3, [r3, #0]
 8013d50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8013d54:	2b00      	cmp	r3, #0
 8013d56:	d022      	beq.n	8013d9e <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8013d58:	687b      	ldr	r3, [r7, #4]
 8013d5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013d5c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8013d60:	d11d      	bne.n	8013d9e <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8013d62:	4b36      	ldr	r3, [pc, #216]	; (8013e3c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8013d64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013d68:	0e1b      	lsrs	r3, r3, #24
 8013d6a:	f003 030f 	and.w	r3, r3, #15
 8013d6e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8013d70:	4b32      	ldr	r3, [pc, #200]	; (8013e3c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8013d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013d76:	0f1b      	lsrs	r3, r3, #28
 8013d78:	f003 0307 	and.w	r3, r3, #7
 8013d7c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8013d7e:	492f      	ldr	r1, [pc, #188]	; (8013e3c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8013d80:	687b      	ldr	r3, [r7, #4]
 8013d82:	695b      	ldr	r3, [r3, #20]
 8013d84:	019a      	lsls	r2, r3, #6
 8013d86:	687b      	ldr	r3, [r7, #4]
 8013d88:	6a1b      	ldr	r3, [r3, #32]
 8013d8a:	041b      	lsls	r3, r3, #16
 8013d8c:	431a      	orrs	r2, r3
 8013d8e:	693b      	ldr	r3, [r7, #16]
 8013d90:	061b      	lsls	r3, r3, #24
 8013d92:	431a      	orrs	r2, r3
 8013d94:	68fb      	ldr	r3, [r7, #12]
 8013d96:	071b      	lsls	r3, r3, #28
 8013d98:	4313      	orrs	r3, r2
 8013d9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8013d9e:	687b      	ldr	r3, [r7, #4]
 8013da0:	681b      	ldr	r3, [r3, #0]
 8013da2:	f003 0308 	and.w	r3, r3, #8
 8013da6:	2b00      	cmp	r3, #0
 8013da8:	d028      	beq.n	8013dfc <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8013daa:	4b24      	ldr	r3, [pc, #144]	; (8013e3c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8013dac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013db0:	0e1b      	lsrs	r3, r3, #24
 8013db2:	f003 030f 	and.w	r3, r3, #15
 8013db6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8013db8:	4b20      	ldr	r3, [pc, #128]	; (8013e3c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8013dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013dbe:	0c1b      	lsrs	r3, r3, #16
 8013dc0:	f003 0303 	and.w	r3, r3, #3
 8013dc4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8013dc6:	491d      	ldr	r1, [pc, #116]	; (8013e3c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	695b      	ldr	r3, [r3, #20]
 8013dcc:	019a      	lsls	r2, r3, #6
 8013dce:	68fb      	ldr	r3, [r7, #12]
 8013dd0:	041b      	lsls	r3, r3, #16
 8013dd2:	431a      	orrs	r2, r3
 8013dd4:	693b      	ldr	r3, [r7, #16]
 8013dd6:	061b      	lsls	r3, r3, #24
 8013dd8:	431a      	orrs	r2, r3
 8013dda:	687b      	ldr	r3, [r7, #4]
 8013ddc:	69db      	ldr	r3, [r3, #28]
 8013dde:	071b      	lsls	r3, r3, #28
 8013de0:	4313      	orrs	r3, r2
 8013de2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8013de6:	4915      	ldr	r1, [pc, #84]	; (8013e3c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8013de8:	4b14      	ldr	r3, [pc, #80]	; (8013e3c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8013dea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013dee:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8013df2:	687b      	ldr	r3, [r7, #4]
 8013df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013df6:	4313      	orrs	r3, r2
 8013df8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8013dfc:	4a0f      	ldr	r2, [pc, #60]	; (8013e3c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8013dfe:	4b0f      	ldr	r3, [pc, #60]	; (8013e3c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8013e00:	681b      	ldr	r3, [r3, #0]
 8013e02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013e06:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8013e08:	f7fd fa5c 	bl	80112c4 <HAL_GetTick>
 8013e0c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8013e0e:	e008      	b.n	8013e22 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8013e10:	f7fd fa58 	bl	80112c4 <HAL_GetTick>
 8013e14:	4602      	mov	r2, r0
 8013e16:	697b      	ldr	r3, [r7, #20]
 8013e18:	1ad3      	subs	r3, r2, r3
 8013e1a:	2b64      	cmp	r3, #100	; 0x64
 8013e1c:	d901      	bls.n	8013e22 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8013e1e:	2303      	movs	r3, #3
 8013e20:	e007      	b.n	8013e32 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8013e22:	4b06      	ldr	r3, [pc, #24]	; (8013e3c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8013e24:	681b      	ldr	r3, [r3, #0]
 8013e26:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8013e2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8013e2e:	d1ef      	bne.n	8013e10 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8013e30:	2300      	movs	r3, #0
}
 8013e32:	4618      	mov	r0, r3
 8013e34:	3720      	adds	r7, #32
 8013e36:	46bd      	mov	sp, r7
 8013e38:	bd80      	pop	{r7, pc}
 8013e3a:	bf00      	nop
 8013e3c:	40023800 	.word	0x40023800

08013e40 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8013e40:	b580      	push	{r7, lr}
 8013e42:	b082      	sub	sp, #8
 8013e44:	af00      	add	r7, sp, #0
 8013e46:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8013e48:	687b      	ldr	r3, [r7, #4]
 8013e4a:	2b00      	cmp	r3, #0
 8013e4c:	d101      	bne.n	8013e52 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8013e4e:	2301      	movs	r3, #1
 8013e50:	e01c      	b.n	8013e8c <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8013e52:	687b      	ldr	r3, [r7, #4]
 8013e54:	795b      	ldrb	r3, [r3, #5]
 8013e56:	b2db      	uxtb	r3, r3
 8013e58:	2b00      	cmp	r3, #0
 8013e5a:	d105      	bne.n	8013e68 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8013e5c:	687b      	ldr	r3, [r7, #4]
 8013e5e:	2200      	movs	r2, #0
 8013e60:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8013e62:	6878      	ldr	r0, [r7, #4]
 8013e64:	f7fc ffde 	bl	8010e24 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8013e68:	687b      	ldr	r3, [r7, #4]
 8013e6a:	2202      	movs	r2, #2
 8013e6c:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8013e6e:	687b      	ldr	r3, [r7, #4]
 8013e70:	681b      	ldr	r3, [r3, #0]
 8013e72:	687a      	ldr	r2, [r7, #4]
 8013e74:	6812      	ldr	r2, [r2, #0]
 8013e76:	6812      	ldr	r2, [r2, #0]
 8013e78:	f042 0204 	orr.w	r2, r2, #4
 8013e7c:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8013e7e:	687b      	ldr	r3, [r7, #4]
 8013e80:	2201      	movs	r2, #1
 8013e82:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8013e84:	687b      	ldr	r3, [r7, #4]
 8013e86:	2200      	movs	r2, #0
 8013e88:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8013e8a:	2300      	movs	r3, #0
}
 8013e8c:	4618      	mov	r0, r3
 8013e8e:	3708      	adds	r7, #8
 8013e90:	46bd      	mov	sp, r7
 8013e92:	bd80      	pop	{r7, pc}

08013e94 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8013e94:	b580      	push	{r7, lr}
 8013e96:	b084      	sub	sp, #16
 8013e98:	af00      	add	r7, sp, #0
 8013e9a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8013e9c:	687b      	ldr	r3, [r7, #4]
 8013e9e:	2b00      	cmp	r3, #0
 8013ea0:	d101      	bne.n	8013ea6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8013ea2:	2301      	movs	r3, #1
 8013ea4:	e09b      	b.n	8013fde <HAL_SPI_Init+0x14a>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8013ea6:	687b      	ldr	r3, [r7, #4]
 8013ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013eaa:	2b00      	cmp	r3, #0
 8013eac:	d108      	bne.n	8013ec0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8013eae:	687b      	ldr	r3, [r7, #4]
 8013eb0:	685b      	ldr	r3, [r3, #4]
 8013eb2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8013eb6:	d009      	beq.n	8013ecc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8013eb8:	687b      	ldr	r3, [r7, #4]
 8013eba:	2200      	movs	r2, #0
 8013ebc:	61da      	str	r2, [r3, #28]
 8013ebe:	e005      	b.n	8013ecc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8013ec0:	687b      	ldr	r3, [r7, #4]
 8013ec2:	2200      	movs	r2, #0
 8013ec4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8013ec6:	687b      	ldr	r3, [r7, #4]
 8013ec8:	2200      	movs	r2, #0
 8013eca:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8013ecc:	687b      	ldr	r3, [r7, #4]
 8013ece:	2200      	movs	r2, #0
 8013ed0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8013ed2:	687b      	ldr	r3, [r7, #4]
 8013ed4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8013ed8:	b2db      	uxtb	r3, r3
 8013eda:	2b00      	cmp	r3, #0
 8013edc:	d106      	bne.n	8013eec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8013ede:	687b      	ldr	r3, [r7, #4]
 8013ee0:	2200      	movs	r2, #0
 8013ee2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8013ee6:	6878      	ldr	r0, [r7, #4]
 8013ee8:	f7fc ffbc 	bl	8010e64 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8013eec:	687b      	ldr	r3, [r7, #4]
 8013eee:	2202      	movs	r2, #2
 8013ef0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8013ef4:	687b      	ldr	r3, [r7, #4]
 8013ef6:	681b      	ldr	r3, [r3, #0]
 8013ef8:	687a      	ldr	r2, [r7, #4]
 8013efa:	6812      	ldr	r2, [r2, #0]
 8013efc:	6812      	ldr	r2, [r2, #0]
 8013efe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8013f02:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8013f04:	687b      	ldr	r3, [r7, #4]
 8013f06:	68db      	ldr	r3, [r3, #12]
 8013f08:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8013f0c:	d902      	bls.n	8013f14 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8013f0e:	2300      	movs	r3, #0
 8013f10:	60fb      	str	r3, [r7, #12]
 8013f12:	e002      	b.n	8013f1a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8013f14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013f18:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8013f1a:	687b      	ldr	r3, [r7, #4]
 8013f1c:	68db      	ldr	r3, [r3, #12]
 8013f1e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8013f22:	d007      	beq.n	8013f34 <HAL_SPI_Init+0xa0>
 8013f24:	687b      	ldr	r3, [r7, #4]
 8013f26:	68db      	ldr	r3, [r3, #12]
 8013f28:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8013f2c:	d002      	beq.n	8013f34 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8013f2e:	687b      	ldr	r3, [r7, #4]
 8013f30:	2200      	movs	r2, #0
 8013f32:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8013f34:	687b      	ldr	r3, [r7, #4]
 8013f36:	681b      	ldr	r3, [r3, #0]
 8013f38:	687a      	ldr	r2, [r7, #4]
 8013f3a:	6852      	ldr	r2, [r2, #4]
 8013f3c:	f402 7182 	and.w	r1, r2, #260	; 0x104
 8013f40:	687a      	ldr	r2, [r7, #4]
 8013f42:	6892      	ldr	r2, [r2, #8]
 8013f44:	f402 4204 	and.w	r2, r2, #33792	; 0x8400
 8013f48:	4311      	orrs	r1, r2
 8013f4a:	687a      	ldr	r2, [r7, #4]
 8013f4c:	6912      	ldr	r2, [r2, #16]
 8013f4e:	f002 0202 	and.w	r2, r2, #2
 8013f52:	4311      	orrs	r1, r2
 8013f54:	687a      	ldr	r2, [r7, #4]
 8013f56:	6952      	ldr	r2, [r2, #20]
 8013f58:	f002 0201 	and.w	r2, r2, #1
 8013f5c:	4311      	orrs	r1, r2
 8013f5e:	687a      	ldr	r2, [r7, #4]
 8013f60:	6992      	ldr	r2, [r2, #24]
 8013f62:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8013f66:	4311      	orrs	r1, r2
 8013f68:	687a      	ldr	r2, [r7, #4]
 8013f6a:	69d2      	ldr	r2, [r2, #28]
 8013f6c:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8013f70:	4311      	orrs	r1, r2
 8013f72:	687a      	ldr	r2, [r7, #4]
 8013f74:	6a12      	ldr	r2, [r2, #32]
 8013f76:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8013f7a:	4311      	orrs	r1, r2
 8013f7c:	687a      	ldr	r2, [r7, #4]
 8013f7e:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8013f80:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8013f84:	430a      	orrs	r2, r1
 8013f86:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8013f88:	687b      	ldr	r3, [r7, #4]
 8013f8a:	681b      	ldr	r3, [r3, #0]
 8013f8c:	687a      	ldr	r2, [r7, #4]
 8013f8e:	6992      	ldr	r2, [r2, #24]
 8013f90:	0c12      	lsrs	r2, r2, #16
 8013f92:	f002 0104 	and.w	r1, r2, #4
 8013f96:	687a      	ldr	r2, [r7, #4]
 8013f98:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8013f9a:	f002 0210 	and.w	r2, r2, #16
 8013f9e:	4311      	orrs	r1, r2
 8013fa0:	687a      	ldr	r2, [r7, #4]
 8013fa2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8013fa4:	f002 0208 	and.w	r2, r2, #8
 8013fa8:	4311      	orrs	r1, r2
 8013faa:	687a      	ldr	r2, [r7, #4]
 8013fac:	68d2      	ldr	r2, [r2, #12]
 8013fae:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 8013fb2:	4311      	orrs	r1, r2
 8013fb4:	68fa      	ldr	r2, [r7, #12]
 8013fb6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8013fba:	430a      	orrs	r2, r1
 8013fbc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8013fbe:	687b      	ldr	r3, [r7, #4]
 8013fc0:	681b      	ldr	r3, [r3, #0]
 8013fc2:	687a      	ldr	r2, [r7, #4]
 8013fc4:	6812      	ldr	r2, [r2, #0]
 8013fc6:	69d2      	ldr	r2, [r2, #28]
 8013fc8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8013fcc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8013fce:	687b      	ldr	r3, [r7, #4]
 8013fd0:	2200      	movs	r2, #0
 8013fd2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8013fd4:	687b      	ldr	r3, [r7, #4]
 8013fd6:	2201      	movs	r2, #1
 8013fd8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8013fdc:	2300      	movs	r3, #0
}
 8013fde:	4618      	mov	r0, r3
 8013fe0:	3710      	adds	r7, #16
 8013fe2:	46bd      	mov	sp, r7
 8013fe4:	bd80      	pop	{r7, pc}

08013fe6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8013fe6:	b580      	push	{r7, lr}
 8013fe8:	b082      	sub	sp, #8
 8013fea:	af00      	add	r7, sp, #0
 8013fec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8013fee:	687b      	ldr	r3, [r7, #4]
 8013ff0:	2b00      	cmp	r3, #0
 8013ff2:	d101      	bne.n	8013ff8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8013ff4:	2301      	movs	r3, #1
 8013ff6:	e049      	b.n	801408c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8013ff8:	687b      	ldr	r3, [r7, #4]
 8013ffa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013ffe:	b2db      	uxtb	r3, r3
 8014000:	2b00      	cmp	r3, #0
 8014002:	d106      	bne.n	8014012 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8014004:	687b      	ldr	r3, [r7, #4]
 8014006:	2200      	movs	r2, #0
 8014008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801400c:	6878      	ldr	r0, [r7, #4]
 801400e:	f000 f841 	bl	8014094 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8014012:	687b      	ldr	r3, [r7, #4]
 8014014:	2202      	movs	r2, #2
 8014016:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801401a:	687b      	ldr	r3, [r7, #4]
 801401c:	681a      	ldr	r2, [r3, #0]
 801401e:	687b      	ldr	r3, [r7, #4]
 8014020:	3304      	adds	r3, #4
 8014022:	4619      	mov	r1, r3
 8014024:	4610      	mov	r0, r2
 8014026:	f000 f9ff 	bl	8014428 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801402a:	687b      	ldr	r3, [r7, #4]
 801402c:	2201      	movs	r2, #1
 801402e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8014032:	687b      	ldr	r3, [r7, #4]
 8014034:	2201      	movs	r2, #1
 8014036:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801403a:	687b      	ldr	r3, [r7, #4]
 801403c:	2201      	movs	r2, #1
 801403e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8014042:	687b      	ldr	r3, [r7, #4]
 8014044:	2201      	movs	r2, #1
 8014046:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801404a:	687b      	ldr	r3, [r7, #4]
 801404c:	2201      	movs	r2, #1
 801404e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8014052:	687b      	ldr	r3, [r7, #4]
 8014054:	2201      	movs	r2, #1
 8014056:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801405a:	687b      	ldr	r3, [r7, #4]
 801405c:	2201      	movs	r2, #1
 801405e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8014062:	687b      	ldr	r3, [r7, #4]
 8014064:	2201      	movs	r2, #1
 8014066:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801406a:	687b      	ldr	r3, [r7, #4]
 801406c:	2201      	movs	r2, #1
 801406e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8014072:	687b      	ldr	r3, [r7, #4]
 8014074:	2201      	movs	r2, #1
 8014076:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801407a:	687b      	ldr	r3, [r7, #4]
 801407c:	2201      	movs	r2, #1
 801407e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8014082:	687b      	ldr	r3, [r7, #4]
 8014084:	2201      	movs	r2, #1
 8014086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801408a:	2300      	movs	r3, #0
}
 801408c:	4618      	mov	r0, r3
 801408e:	3708      	adds	r7, #8
 8014090:	46bd      	mov	sp, r7
 8014092:	bd80      	pop	{r7, pc}

08014094 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8014094:	b480      	push	{r7}
 8014096:	b083      	sub	sp, #12
 8014098:	af00      	add	r7, sp, #0
 801409a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 801409c:	bf00      	nop
 801409e:	370c      	adds	r7, #12
 80140a0:	46bd      	mov	sp, r7
 80140a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140a6:	4770      	bx	lr

080140a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80140a8:	b480      	push	{r7}
 80140aa:	b085      	sub	sp, #20
 80140ac:	af00      	add	r7, sp, #0
 80140ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80140b0:	687b      	ldr	r3, [r7, #4]
 80140b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80140b6:	b2db      	uxtb	r3, r3
 80140b8:	2b01      	cmp	r3, #1
 80140ba:	d001      	beq.n	80140c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80140bc:	2301      	movs	r3, #1
 80140be:	e054      	b.n	801416a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80140c0:	687b      	ldr	r3, [r7, #4]
 80140c2:	2202      	movs	r2, #2
 80140c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80140c8:	687b      	ldr	r3, [r7, #4]
 80140ca:	681b      	ldr	r3, [r3, #0]
 80140cc:	687a      	ldr	r2, [r7, #4]
 80140ce:	6812      	ldr	r2, [r2, #0]
 80140d0:	68d2      	ldr	r2, [r2, #12]
 80140d2:	f042 0201 	orr.w	r2, r2, #1
 80140d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80140d8:	687b      	ldr	r3, [r7, #4]
 80140da:	681b      	ldr	r3, [r3, #0]
 80140dc:	4a26      	ldr	r2, [pc, #152]	; (8014178 <HAL_TIM_Base_Start_IT+0xd0>)
 80140de:	4293      	cmp	r3, r2
 80140e0:	d022      	beq.n	8014128 <HAL_TIM_Base_Start_IT+0x80>
 80140e2:	687b      	ldr	r3, [r7, #4]
 80140e4:	681b      	ldr	r3, [r3, #0]
 80140e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80140ea:	d01d      	beq.n	8014128 <HAL_TIM_Base_Start_IT+0x80>
 80140ec:	687b      	ldr	r3, [r7, #4]
 80140ee:	681b      	ldr	r3, [r3, #0]
 80140f0:	4a22      	ldr	r2, [pc, #136]	; (801417c <HAL_TIM_Base_Start_IT+0xd4>)
 80140f2:	4293      	cmp	r3, r2
 80140f4:	d018      	beq.n	8014128 <HAL_TIM_Base_Start_IT+0x80>
 80140f6:	687b      	ldr	r3, [r7, #4]
 80140f8:	681b      	ldr	r3, [r3, #0]
 80140fa:	4a21      	ldr	r2, [pc, #132]	; (8014180 <HAL_TIM_Base_Start_IT+0xd8>)
 80140fc:	4293      	cmp	r3, r2
 80140fe:	d013      	beq.n	8014128 <HAL_TIM_Base_Start_IT+0x80>
 8014100:	687b      	ldr	r3, [r7, #4]
 8014102:	681b      	ldr	r3, [r3, #0]
 8014104:	4a1f      	ldr	r2, [pc, #124]	; (8014184 <HAL_TIM_Base_Start_IT+0xdc>)
 8014106:	4293      	cmp	r3, r2
 8014108:	d00e      	beq.n	8014128 <HAL_TIM_Base_Start_IT+0x80>
 801410a:	687b      	ldr	r3, [r7, #4]
 801410c:	681b      	ldr	r3, [r3, #0]
 801410e:	4a1e      	ldr	r2, [pc, #120]	; (8014188 <HAL_TIM_Base_Start_IT+0xe0>)
 8014110:	4293      	cmp	r3, r2
 8014112:	d009      	beq.n	8014128 <HAL_TIM_Base_Start_IT+0x80>
 8014114:	687b      	ldr	r3, [r7, #4]
 8014116:	681b      	ldr	r3, [r3, #0]
 8014118:	4a1c      	ldr	r2, [pc, #112]	; (801418c <HAL_TIM_Base_Start_IT+0xe4>)
 801411a:	4293      	cmp	r3, r2
 801411c:	d004      	beq.n	8014128 <HAL_TIM_Base_Start_IT+0x80>
 801411e:	687b      	ldr	r3, [r7, #4]
 8014120:	681b      	ldr	r3, [r3, #0]
 8014122:	4a1b      	ldr	r2, [pc, #108]	; (8014190 <HAL_TIM_Base_Start_IT+0xe8>)
 8014124:	4293      	cmp	r3, r2
 8014126:	d115      	bne.n	8014154 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8014128:	687b      	ldr	r3, [r7, #4]
 801412a:	681b      	ldr	r3, [r3, #0]
 801412c:	689a      	ldr	r2, [r3, #8]
 801412e:	4b19      	ldr	r3, [pc, #100]	; (8014194 <HAL_TIM_Base_Start_IT+0xec>)
 8014130:	4013      	ands	r3, r2
 8014132:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8014134:	68fb      	ldr	r3, [r7, #12]
 8014136:	2b06      	cmp	r3, #6
 8014138:	d015      	beq.n	8014166 <HAL_TIM_Base_Start_IT+0xbe>
 801413a:	68fb      	ldr	r3, [r7, #12]
 801413c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014140:	d011      	beq.n	8014166 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8014142:	687b      	ldr	r3, [r7, #4]
 8014144:	681b      	ldr	r3, [r3, #0]
 8014146:	687a      	ldr	r2, [r7, #4]
 8014148:	6812      	ldr	r2, [r2, #0]
 801414a:	6812      	ldr	r2, [r2, #0]
 801414c:	f042 0201 	orr.w	r2, r2, #1
 8014150:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8014152:	e008      	b.n	8014166 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8014154:	687b      	ldr	r3, [r7, #4]
 8014156:	681b      	ldr	r3, [r3, #0]
 8014158:	687a      	ldr	r2, [r7, #4]
 801415a:	6812      	ldr	r2, [r2, #0]
 801415c:	6812      	ldr	r2, [r2, #0]
 801415e:	f042 0201 	orr.w	r2, r2, #1
 8014162:	601a      	str	r2, [r3, #0]
 8014164:	e000      	b.n	8014168 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8014166:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8014168:	2300      	movs	r3, #0
}
 801416a:	4618      	mov	r0, r3
 801416c:	3714      	adds	r7, #20
 801416e:	46bd      	mov	sp, r7
 8014170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014174:	4770      	bx	lr
 8014176:	bf00      	nop
 8014178:	40010000 	.word	0x40010000
 801417c:	40000400 	.word	0x40000400
 8014180:	40000800 	.word	0x40000800
 8014184:	40000c00 	.word	0x40000c00
 8014188:	40010400 	.word	0x40010400
 801418c:	40014000 	.word	0x40014000
 8014190:	40001800 	.word	0x40001800
 8014194:	00010007 	.word	0x00010007

08014198 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8014198:	b580      	push	{r7, lr}
 801419a:	b082      	sub	sp, #8
 801419c:	af00      	add	r7, sp, #0
 801419e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80141a0:	687b      	ldr	r3, [r7, #4]
 80141a2:	681b      	ldr	r3, [r3, #0]
 80141a4:	691b      	ldr	r3, [r3, #16]
 80141a6:	f003 0302 	and.w	r3, r3, #2
 80141aa:	2b02      	cmp	r3, #2
 80141ac:	d122      	bne.n	80141f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80141ae:	687b      	ldr	r3, [r7, #4]
 80141b0:	681b      	ldr	r3, [r3, #0]
 80141b2:	68db      	ldr	r3, [r3, #12]
 80141b4:	f003 0302 	and.w	r3, r3, #2
 80141b8:	2b02      	cmp	r3, #2
 80141ba:	d11b      	bne.n	80141f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80141bc:	687b      	ldr	r3, [r7, #4]
 80141be:	681b      	ldr	r3, [r3, #0]
 80141c0:	f06f 0202 	mvn.w	r2, #2
 80141c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80141c6:	687b      	ldr	r3, [r7, #4]
 80141c8:	2201      	movs	r2, #1
 80141ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80141cc:	687b      	ldr	r3, [r7, #4]
 80141ce:	681b      	ldr	r3, [r3, #0]
 80141d0:	699b      	ldr	r3, [r3, #24]
 80141d2:	f003 0303 	and.w	r3, r3, #3
 80141d6:	2b00      	cmp	r3, #0
 80141d8:	d003      	beq.n	80141e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80141da:	6878      	ldr	r0, [r7, #4]
 80141dc:	f000 f905 	bl	80143ea <HAL_TIM_IC_CaptureCallback>
 80141e0:	e005      	b.n	80141ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80141e2:	6878      	ldr	r0, [r7, #4]
 80141e4:	f000 f8f7 	bl	80143d6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80141e8:	6878      	ldr	r0, [r7, #4]
 80141ea:	f000 f908 	bl	80143fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80141ee:	687b      	ldr	r3, [r7, #4]
 80141f0:	2200      	movs	r2, #0
 80141f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80141f4:	687b      	ldr	r3, [r7, #4]
 80141f6:	681b      	ldr	r3, [r3, #0]
 80141f8:	691b      	ldr	r3, [r3, #16]
 80141fa:	f003 0304 	and.w	r3, r3, #4
 80141fe:	2b04      	cmp	r3, #4
 8014200:	d122      	bne.n	8014248 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8014202:	687b      	ldr	r3, [r7, #4]
 8014204:	681b      	ldr	r3, [r3, #0]
 8014206:	68db      	ldr	r3, [r3, #12]
 8014208:	f003 0304 	and.w	r3, r3, #4
 801420c:	2b04      	cmp	r3, #4
 801420e:	d11b      	bne.n	8014248 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8014210:	687b      	ldr	r3, [r7, #4]
 8014212:	681b      	ldr	r3, [r3, #0]
 8014214:	f06f 0204 	mvn.w	r2, #4
 8014218:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801421a:	687b      	ldr	r3, [r7, #4]
 801421c:	2202      	movs	r2, #2
 801421e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8014220:	687b      	ldr	r3, [r7, #4]
 8014222:	681b      	ldr	r3, [r3, #0]
 8014224:	699b      	ldr	r3, [r3, #24]
 8014226:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801422a:	2b00      	cmp	r3, #0
 801422c:	d003      	beq.n	8014236 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801422e:	6878      	ldr	r0, [r7, #4]
 8014230:	f000 f8db 	bl	80143ea <HAL_TIM_IC_CaptureCallback>
 8014234:	e005      	b.n	8014242 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8014236:	6878      	ldr	r0, [r7, #4]
 8014238:	f000 f8cd 	bl	80143d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801423c:	6878      	ldr	r0, [r7, #4]
 801423e:	f000 f8de 	bl	80143fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8014242:	687b      	ldr	r3, [r7, #4]
 8014244:	2200      	movs	r2, #0
 8014246:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8014248:	687b      	ldr	r3, [r7, #4]
 801424a:	681b      	ldr	r3, [r3, #0]
 801424c:	691b      	ldr	r3, [r3, #16]
 801424e:	f003 0308 	and.w	r3, r3, #8
 8014252:	2b08      	cmp	r3, #8
 8014254:	d122      	bne.n	801429c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8014256:	687b      	ldr	r3, [r7, #4]
 8014258:	681b      	ldr	r3, [r3, #0]
 801425a:	68db      	ldr	r3, [r3, #12]
 801425c:	f003 0308 	and.w	r3, r3, #8
 8014260:	2b08      	cmp	r3, #8
 8014262:	d11b      	bne.n	801429c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8014264:	687b      	ldr	r3, [r7, #4]
 8014266:	681b      	ldr	r3, [r3, #0]
 8014268:	f06f 0208 	mvn.w	r2, #8
 801426c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801426e:	687b      	ldr	r3, [r7, #4]
 8014270:	2204      	movs	r2, #4
 8014272:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8014274:	687b      	ldr	r3, [r7, #4]
 8014276:	681b      	ldr	r3, [r3, #0]
 8014278:	69db      	ldr	r3, [r3, #28]
 801427a:	f003 0303 	and.w	r3, r3, #3
 801427e:	2b00      	cmp	r3, #0
 8014280:	d003      	beq.n	801428a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8014282:	6878      	ldr	r0, [r7, #4]
 8014284:	f000 f8b1 	bl	80143ea <HAL_TIM_IC_CaptureCallback>
 8014288:	e005      	b.n	8014296 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801428a:	6878      	ldr	r0, [r7, #4]
 801428c:	f000 f8a3 	bl	80143d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8014290:	6878      	ldr	r0, [r7, #4]
 8014292:	f000 f8b4 	bl	80143fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8014296:	687b      	ldr	r3, [r7, #4]
 8014298:	2200      	movs	r2, #0
 801429a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 801429c:	687b      	ldr	r3, [r7, #4]
 801429e:	681b      	ldr	r3, [r3, #0]
 80142a0:	691b      	ldr	r3, [r3, #16]
 80142a2:	f003 0310 	and.w	r3, r3, #16
 80142a6:	2b10      	cmp	r3, #16
 80142a8:	d122      	bne.n	80142f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80142aa:	687b      	ldr	r3, [r7, #4]
 80142ac:	681b      	ldr	r3, [r3, #0]
 80142ae:	68db      	ldr	r3, [r3, #12]
 80142b0:	f003 0310 	and.w	r3, r3, #16
 80142b4:	2b10      	cmp	r3, #16
 80142b6:	d11b      	bne.n	80142f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80142b8:	687b      	ldr	r3, [r7, #4]
 80142ba:	681b      	ldr	r3, [r3, #0]
 80142bc:	f06f 0210 	mvn.w	r2, #16
 80142c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80142c2:	687b      	ldr	r3, [r7, #4]
 80142c4:	2208      	movs	r2, #8
 80142c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80142c8:	687b      	ldr	r3, [r7, #4]
 80142ca:	681b      	ldr	r3, [r3, #0]
 80142cc:	69db      	ldr	r3, [r3, #28]
 80142ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80142d2:	2b00      	cmp	r3, #0
 80142d4:	d003      	beq.n	80142de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80142d6:	6878      	ldr	r0, [r7, #4]
 80142d8:	f000 f887 	bl	80143ea <HAL_TIM_IC_CaptureCallback>
 80142dc:	e005      	b.n	80142ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80142de:	6878      	ldr	r0, [r7, #4]
 80142e0:	f000 f879 	bl	80143d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80142e4:	6878      	ldr	r0, [r7, #4]
 80142e6:	f000 f88a 	bl	80143fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80142ea:	687b      	ldr	r3, [r7, #4]
 80142ec:	2200      	movs	r2, #0
 80142ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80142f0:	687b      	ldr	r3, [r7, #4]
 80142f2:	681b      	ldr	r3, [r3, #0]
 80142f4:	691b      	ldr	r3, [r3, #16]
 80142f6:	f003 0301 	and.w	r3, r3, #1
 80142fa:	2b01      	cmp	r3, #1
 80142fc:	d10e      	bne.n	801431c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80142fe:	687b      	ldr	r3, [r7, #4]
 8014300:	681b      	ldr	r3, [r3, #0]
 8014302:	68db      	ldr	r3, [r3, #12]
 8014304:	f003 0301 	and.w	r3, r3, #1
 8014308:	2b01      	cmp	r3, #1
 801430a:	d107      	bne.n	801431c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801430c:	687b      	ldr	r3, [r7, #4]
 801430e:	681b      	ldr	r3, [r3, #0]
 8014310:	f06f 0201 	mvn.w	r2, #1
 8014314:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8014316:	6878      	ldr	r0, [r7, #4]
 8014318:	f7fc fcd0 	bl	8010cbc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801431c:	687b      	ldr	r3, [r7, #4]
 801431e:	681b      	ldr	r3, [r3, #0]
 8014320:	691b      	ldr	r3, [r3, #16]
 8014322:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014326:	2b80      	cmp	r3, #128	; 0x80
 8014328:	d10e      	bne.n	8014348 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801432a:	687b      	ldr	r3, [r7, #4]
 801432c:	681b      	ldr	r3, [r3, #0]
 801432e:	68db      	ldr	r3, [r3, #12]
 8014330:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014334:	2b80      	cmp	r3, #128	; 0x80
 8014336:	d107      	bne.n	8014348 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8014338:	687b      	ldr	r3, [r7, #4]
 801433a:	681b      	ldr	r3, [r3, #0]
 801433c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8014340:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8014342:	6878      	ldr	r0, [r7, #4]
 8014344:	f000 f91a 	bl	801457c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8014348:	687b      	ldr	r3, [r7, #4]
 801434a:	681b      	ldr	r3, [r3, #0]
 801434c:	691b      	ldr	r3, [r3, #16]
 801434e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014352:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014356:	d10e      	bne.n	8014376 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8014358:	687b      	ldr	r3, [r7, #4]
 801435a:	681b      	ldr	r3, [r3, #0]
 801435c:	68db      	ldr	r3, [r3, #12]
 801435e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014362:	2b80      	cmp	r3, #128	; 0x80
 8014364:	d107      	bne.n	8014376 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8014366:	687b      	ldr	r3, [r7, #4]
 8014368:	681b      	ldr	r3, [r3, #0]
 801436a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 801436e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8014370:	6878      	ldr	r0, [r7, #4]
 8014372:	f000 f90d 	bl	8014590 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8014376:	687b      	ldr	r3, [r7, #4]
 8014378:	681b      	ldr	r3, [r3, #0]
 801437a:	691b      	ldr	r3, [r3, #16]
 801437c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014380:	2b40      	cmp	r3, #64	; 0x40
 8014382:	d10e      	bne.n	80143a2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8014384:	687b      	ldr	r3, [r7, #4]
 8014386:	681b      	ldr	r3, [r3, #0]
 8014388:	68db      	ldr	r3, [r3, #12]
 801438a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801438e:	2b40      	cmp	r3, #64	; 0x40
 8014390:	d107      	bne.n	80143a2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8014392:	687b      	ldr	r3, [r7, #4]
 8014394:	681b      	ldr	r3, [r3, #0]
 8014396:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801439a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801439c:	6878      	ldr	r0, [r7, #4]
 801439e:	f000 f838 	bl	8014412 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80143a2:	687b      	ldr	r3, [r7, #4]
 80143a4:	681b      	ldr	r3, [r3, #0]
 80143a6:	691b      	ldr	r3, [r3, #16]
 80143a8:	f003 0320 	and.w	r3, r3, #32
 80143ac:	2b20      	cmp	r3, #32
 80143ae:	d10e      	bne.n	80143ce <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80143b0:	687b      	ldr	r3, [r7, #4]
 80143b2:	681b      	ldr	r3, [r3, #0]
 80143b4:	68db      	ldr	r3, [r3, #12]
 80143b6:	f003 0320 	and.w	r3, r3, #32
 80143ba:	2b20      	cmp	r3, #32
 80143bc:	d107      	bne.n	80143ce <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80143be:	687b      	ldr	r3, [r7, #4]
 80143c0:	681b      	ldr	r3, [r3, #0]
 80143c2:	f06f 0220 	mvn.w	r2, #32
 80143c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80143c8:	6878      	ldr	r0, [r7, #4]
 80143ca:	f000 f8cd 	bl	8014568 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80143ce:	bf00      	nop
 80143d0:	3708      	adds	r7, #8
 80143d2:	46bd      	mov	sp, r7
 80143d4:	bd80      	pop	{r7, pc}

080143d6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80143d6:	b480      	push	{r7}
 80143d8:	b083      	sub	sp, #12
 80143da:	af00      	add	r7, sp, #0
 80143dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80143de:	bf00      	nop
 80143e0:	370c      	adds	r7, #12
 80143e2:	46bd      	mov	sp, r7
 80143e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143e8:	4770      	bx	lr

080143ea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80143ea:	b480      	push	{r7}
 80143ec:	b083      	sub	sp, #12
 80143ee:	af00      	add	r7, sp, #0
 80143f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80143f2:	bf00      	nop
 80143f4:	370c      	adds	r7, #12
 80143f6:	46bd      	mov	sp, r7
 80143f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143fc:	4770      	bx	lr

080143fe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80143fe:	b480      	push	{r7}
 8014400:	b083      	sub	sp, #12
 8014402:	af00      	add	r7, sp, #0
 8014404:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8014406:	bf00      	nop
 8014408:	370c      	adds	r7, #12
 801440a:	46bd      	mov	sp, r7
 801440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014410:	4770      	bx	lr

08014412 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8014412:	b480      	push	{r7}
 8014414:	b083      	sub	sp, #12
 8014416:	af00      	add	r7, sp, #0
 8014418:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801441a:	bf00      	nop
 801441c:	370c      	adds	r7, #12
 801441e:	46bd      	mov	sp, r7
 8014420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014424:	4770      	bx	lr
	...

08014428 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8014428:	b480      	push	{r7}
 801442a:	b085      	sub	sp, #20
 801442c:	af00      	add	r7, sp, #0
 801442e:	6078      	str	r0, [r7, #4]
 8014430:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8014432:	687b      	ldr	r3, [r7, #4]
 8014434:	681b      	ldr	r3, [r3, #0]
 8014436:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8014438:	687b      	ldr	r3, [r7, #4]
 801443a:	4a40      	ldr	r2, [pc, #256]	; (801453c <TIM_Base_SetConfig+0x114>)
 801443c:	4293      	cmp	r3, r2
 801443e:	d013      	beq.n	8014468 <TIM_Base_SetConfig+0x40>
 8014440:	687b      	ldr	r3, [r7, #4]
 8014442:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014446:	d00f      	beq.n	8014468 <TIM_Base_SetConfig+0x40>
 8014448:	687b      	ldr	r3, [r7, #4]
 801444a:	4a3d      	ldr	r2, [pc, #244]	; (8014540 <TIM_Base_SetConfig+0x118>)
 801444c:	4293      	cmp	r3, r2
 801444e:	d00b      	beq.n	8014468 <TIM_Base_SetConfig+0x40>
 8014450:	687b      	ldr	r3, [r7, #4]
 8014452:	4a3c      	ldr	r2, [pc, #240]	; (8014544 <TIM_Base_SetConfig+0x11c>)
 8014454:	4293      	cmp	r3, r2
 8014456:	d007      	beq.n	8014468 <TIM_Base_SetConfig+0x40>
 8014458:	687b      	ldr	r3, [r7, #4]
 801445a:	4a3b      	ldr	r2, [pc, #236]	; (8014548 <TIM_Base_SetConfig+0x120>)
 801445c:	4293      	cmp	r3, r2
 801445e:	d003      	beq.n	8014468 <TIM_Base_SetConfig+0x40>
 8014460:	687b      	ldr	r3, [r7, #4]
 8014462:	4a3a      	ldr	r2, [pc, #232]	; (801454c <TIM_Base_SetConfig+0x124>)
 8014464:	4293      	cmp	r3, r2
 8014466:	d108      	bne.n	801447a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8014468:	68fb      	ldr	r3, [r7, #12]
 801446a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801446e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8014470:	683b      	ldr	r3, [r7, #0]
 8014472:	685b      	ldr	r3, [r3, #4]
 8014474:	68fa      	ldr	r2, [r7, #12]
 8014476:	4313      	orrs	r3, r2
 8014478:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801447a:	687b      	ldr	r3, [r7, #4]
 801447c:	4a2f      	ldr	r2, [pc, #188]	; (801453c <TIM_Base_SetConfig+0x114>)
 801447e:	4293      	cmp	r3, r2
 8014480:	d02b      	beq.n	80144da <TIM_Base_SetConfig+0xb2>
 8014482:	687b      	ldr	r3, [r7, #4]
 8014484:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014488:	d027      	beq.n	80144da <TIM_Base_SetConfig+0xb2>
 801448a:	687b      	ldr	r3, [r7, #4]
 801448c:	4a2c      	ldr	r2, [pc, #176]	; (8014540 <TIM_Base_SetConfig+0x118>)
 801448e:	4293      	cmp	r3, r2
 8014490:	d023      	beq.n	80144da <TIM_Base_SetConfig+0xb2>
 8014492:	687b      	ldr	r3, [r7, #4]
 8014494:	4a2b      	ldr	r2, [pc, #172]	; (8014544 <TIM_Base_SetConfig+0x11c>)
 8014496:	4293      	cmp	r3, r2
 8014498:	d01f      	beq.n	80144da <TIM_Base_SetConfig+0xb2>
 801449a:	687b      	ldr	r3, [r7, #4]
 801449c:	4a2a      	ldr	r2, [pc, #168]	; (8014548 <TIM_Base_SetConfig+0x120>)
 801449e:	4293      	cmp	r3, r2
 80144a0:	d01b      	beq.n	80144da <TIM_Base_SetConfig+0xb2>
 80144a2:	687b      	ldr	r3, [r7, #4]
 80144a4:	4a29      	ldr	r2, [pc, #164]	; (801454c <TIM_Base_SetConfig+0x124>)
 80144a6:	4293      	cmp	r3, r2
 80144a8:	d017      	beq.n	80144da <TIM_Base_SetConfig+0xb2>
 80144aa:	687b      	ldr	r3, [r7, #4]
 80144ac:	4a28      	ldr	r2, [pc, #160]	; (8014550 <TIM_Base_SetConfig+0x128>)
 80144ae:	4293      	cmp	r3, r2
 80144b0:	d013      	beq.n	80144da <TIM_Base_SetConfig+0xb2>
 80144b2:	687b      	ldr	r3, [r7, #4]
 80144b4:	4a27      	ldr	r2, [pc, #156]	; (8014554 <TIM_Base_SetConfig+0x12c>)
 80144b6:	4293      	cmp	r3, r2
 80144b8:	d00f      	beq.n	80144da <TIM_Base_SetConfig+0xb2>
 80144ba:	687b      	ldr	r3, [r7, #4]
 80144bc:	4a26      	ldr	r2, [pc, #152]	; (8014558 <TIM_Base_SetConfig+0x130>)
 80144be:	4293      	cmp	r3, r2
 80144c0:	d00b      	beq.n	80144da <TIM_Base_SetConfig+0xb2>
 80144c2:	687b      	ldr	r3, [r7, #4]
 80144c4:	4a25      	ldr	r2, [pc, #148]	; (801455c <TIM_Base_SetConfig+0x134>)
 80144c6:	4293      	cmp	r3, r2
 80144c8:	d007      	beq.n	80144da <TIM_Base_SetConfig+0xb2>
 80144ca:	687b      	ldr	r3, [r7, #4]
 80144cc:	4a24      	ldr	r2, [pc, #144]	; (8014560 <TIM_Base_SetConfig+0x138>)
 80144ce:	4293      	cmp	r3, r2
 80144d0:	d003      	beq.n	80144da <TIM_Base_SetConfig+0xb2>
 80144d2:	687b      	ldr	r3, [r7, #4]
 80144d4:	4a23      	ldr	r2, [pc, #140]	; (8014564 <TIM_Base_SetConfig+0x13c>)
 80144d6:	4293      	cmp	r3, r2
 80144d8:	d108      	bne.n	80144ec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80144da:	68fb      	ldr	r3, [r7, #12]
 80144dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80144e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80144e2:	683b      	ldr	r3, [r7, #0]
 80144e4:	68db      	ldr	r3, [r3, #12]
 80144e6:	68fa      	ldr	r2, [r7, #12]
 80144e8:	4313      	orrs	r3, r2
 80144ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80144ec:	68fb      	ldr	r3, [r7, #12]
 80144ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80144f2:	683b      	ldr	r3, [r7, #0]
 80144f4:	695b      	ldr	r3, [r3, #20]
 80144f6:	4313      	orrs	r3, r2
 80144f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80144fa:	687b      	ldr	r3, [r7, #4]
 80144fc:	68fa      	ldr	r2, [r7, #12]
 80144fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8014500:	683b      	ldr	r3, [r7, #0]
 8014502:	689a      	ldr	r2, [r3, #8]
 8014504:	687b      	ldr	r3, [r7, #4]
 8014506:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8014508:	683b      	ldr	r3, [r7, #0]
 801450a:	681a      	ldr	r2, [r3, #0]
 801450c:	687b      	ldr	r3, [r7, #4]
 801450e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8014510:	687b      	ldr	r3, [r7, #4]
 8014512:	4a0a      	ldr	r2, [pc, #40]	; (801453c <TIM_Base_SetConfig+0x114>)
 8014514:	4293      	cmp	r3, r2
 8014516:	d003      	beq.n	8014520 <TIM_Base_SetConfig+0xf8>
 8014518:	687b      	ldr	r3, [r7, #4]
 801451a:	4a0c      	ldr	r2, [pc, #48]	; (801454c <TIM_Base_SetConfig+0x124>)
 801451c:	4293      	cmp	r3, r2
 801451e:	d103      	bne.n	8014528 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8014520:	683b      	ldr	r3, [r7, #0]
 8014522:	691a      	ldr	r2, [r3, #16]
 8014524:	687b      	ldr	r3, [r7, #4]
 8014526:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8014528:	687b      	ldr	r3, [r7, #4]
 801452a:	2201      	movs	r2, #1
 801452c:	615a      	str	r2, [r3, #20]
}
 801452e:	bf00      	nop
 8014530:	3714      	adds	r7, #20
 8014532:	46bd      	mov	sp, r7
 8014534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014538:	4770      	bx	lr
 801453a:	bf00      	nop
 801453c:	40010000 	.word	0x40010000
 8014540:	40000400 	.word	0x40000400
 8014544:	40000800 	.word	0x40000800
 8014548:	40000c00 	.word	0x40000c00
 801454c:	40010400 	.word	0x40010400
 8014550:	40014000 	.word	0x40014000
 8014554:	40014400 	.word	0x40014400
 8014558:	40014800 	.word	0x40014800
 801455c:	40001800 	.word	0x40001800
 8014560:	40001c00 	.word	0x40001c00
 8014564:	40002000 	.word	0x40002000

08014568 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8014568:	b480      	push	{r7}
 801456a:	b083      	sub	sp, #12
 801456c:	af00      	add	r7, sp, #0
 801456e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8014570:	bf00      	nop
 8014572:	370c      	adds	r7, #12
 8014574:	46bd      	mov	sp, r7
 8014576:	f85d 7b04 	ldr.w	r7, [sp], #4
 801457a:	4770      	bx	lr

0801457c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801457c:	b480      	push	{r7}
 801457e:	b083      	sub	sp, #12
 8014580:	af00      	add	r7, sp, #0
 8014582:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8014584:	bf00      	nop
 8014586:	370c      	adds	r7, #12
 8014588:	46bd      	mov	sp, r7
 801458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801458e:	4770      	bx	lr

08014590 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8014590:	b480      	push	{r7}
 8014592:	b083      	sub	sp, #12
 8014594:	af00      	add	r7, sp, #0
 8014596:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8014598:	bf00      	nop
 801459a:	370c      	adds	r7, #12
 801459c:	46bd      	mov	sp, r7
 801459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145a2:	4770      	bx	lr

080145a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80145a4:	b580      	push	{r7, lr}
 80145a6:	b082      	sub	sp, #8
 80145a8:	af00      	add	r7, sp, #0
 80145aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80145ac:	687b      	ldr	r3, [r7, #4]
 80145ae:	2b00      	cmp	r3, #0
 80145b0:	d101      	bne.n	80145b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80145b2:	2301      	movs	r3, #1
 80145b4:	e040      	b.n	8014638 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80145b6:	687b      	ldr	r3, [r7, #4]
 80145b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80145ba:	2b00      	cmp	r3, #0
 80145bc:	d106      	bne.n	80145cc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80145be:	687b      	ldr	r3, [r7, #4]
 80145c0:	2200      	movs	r2, #0
 80145c2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80145c6:	6878      	ldr	r0, [r7, #4]
 80145c8:	f7fc fcae 	bl	8010f28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80145cc:	687b      	ldr	r3, [r7, #4]
 80145ce:	2224      	movs	r2, #36	; 0x24
 80145d0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80145d2:	687b      	ldr	r3, [r7, #4]
 80145d4:	681b      	ldr	r3, [r3, #0]
 80145d6:	687a      	ldr	r2, [r7, #4]
 80145d8:	6812      	ldr	r2, [r2, #0]
 80145da:	6812      	ldr	r2, [r2, #0]
 80145dc:	f022 0201 	bic.w	r2, r2, #1
 80145e0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80145e2:	6878      	ldr	r0, [r7, #4]
 80145e4:	f000 f98e 	bl	8014904 <UART_SetConfig>
 80145e8:	4603      	mov	r3, r0
 80145ea:	2b01      	cmp	r3, #1
 80145ec:	d101      	bne.n	80145f2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80145ee:	2301      	movs	r3, #1
 80145f0:	e022      	b.n	8014638 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80145f2:	687b      	ldr	r3, [r7, #4]
 80145f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80145f6:	2b00      	cmp	r3, #0
 80145f8:	d002      	beq.n	8014600 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80145fa:	6878      	ldr	r0, [r7, #4]
 80145fc:	f000 fbe2 	bl	8014dc4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8014600:	687b      	ldr	r3, [r7, #4]
 8014602:	681b      	ldr	r3, [r3, #0]
 8014604:	687a      	ldr	r2, [r7, #4]
 8014606:	6812      	ldr	r2, [r2, #0]
 8014608:	6852      	ldr	r2, [r2, #4]
 801460a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801460e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8014610:	687b      	ldr	r3, [r7, #4]
 8014612:	681b      	ldr	r3, [r3, #0]
 8014614:	687a      	ldr	r2, [r7, #4]
 8014616:	6812      	ldr	r2, [r2, #0]
 8014618:	6892      	ldr	r2, [r2, #8]
 801461a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801461e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8014620:	687b      	ldr	r3, [r7, #4]
 8014622:	681b      	ldr	r3, [r3, #0]
 8014624:	687a      	ldr	r2, [r7, #4]
 8014626:	6812      	ldr	r2, [r2, #0]
 8014628:	6812      	ldr	r2, [r2, #0]
 801462a:	f042 0201 	orr.w	r2, r2, #1
 801462e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8014630:	6878      	ldr	r0, [r7, #4]
 8014632:	f000 fc69 	bl	8014f08 <UART_CheckIdleState>
 8014636:	4603      	mov	r3, r0
}
 8014638:	4618      	mov	r0, r3
 801463a:	3708      	adds	r7, #8
 801463c:	46bd      	mov	sp, r7
 801463e:	bd80      	pop	{r7, pc}

08014640 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8014640:	b580      	push	{r7, lr}
 8014642:	b08a      	sub	sp, #40	; 0x28
 8014644:	af02      	add	r7, sp, #8
 8014646:	60f8      	str	r0, [r7, #12]
 8014648:	60b9      	str	r1, [r7, #8]
 801464a:	603b      	str	r3, [r7, #0]
 801464c:	4613      	mov	r3, r2
 801464e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8014650:	68fb      	ldr	r3, [r7, #12]
 8014652:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014654:	2b20      	cmp	r3, #32
 8014656:	d17f      	bne.n	8014758 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8014658:	68bb      	ldr	r3, [r7, #8]
 801465a:	2b00      	cmp	r3, #0
 801465c:	d002      	beq.n	8014664 <HAL_UART_Transmit+0x24>
 801465e:	88fb      	ldrh	r3, [r7, #6]
 8014660:	2b00      	cmp	r3, #0
 8014662:	d101      	bne.n	8014668 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8014664:	2301      	movs	r3, #1
 8014666:	e078      	b.n	801475a <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 8014668:	68fb      	ldr	r3, [r7, #12]
 801466a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 801466e:	2b01      	cmp	r3, #1
 8014670:	d101      	bne.n	8014676 <HAL_UART_Transmit+0x36>
 8014672:	2302      	movs	r3, #2
 8014674:	e071      	b.n	801475a <HAL_UART_Transmit+0x11a>
 8014676:	68fb      	ldr	r3, [r7, #12]
 8014678:	2201      	movs	r2, #1
 801467a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801467e:	68fb      	ldr	r3, [r7, #12]
 8014680:	2200      	movs	r2, #0
 8014682:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8014686:	68fb      	ldr	r3, [r7, #12]
 8014688:	2221      	movs	r2, #33	; 0x21
 801468a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801468c:	f7fc fe1a 	bl	80112c4 <HAL_GetTick>
 8014690:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8014692:	68fb      	ldr	r3, [r7, #12]
 8014694:	88fa      	ldrh	r2, [r7, #6]
 8014696:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 801469a:	68fb      	ldr	r3, [r7, #12]
 801469c:	88fa      	ldrh	r2, [r7, #6]
 801469e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80146a2:	68fb      	ldr	r3, [r7, #12]
 80146a4:	689b      	ldr	r3, [r3, #8]
 80146a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80146aa:	d108      	bne.n	80146be <HAL_UART_Transmit+0x7e>
 80146ac:	68fb      	ldr	r3, [r7, #12]
 80146ae:	691b      	ldr	r3, [r3, #16]
 80146b0:	2b00      	cmp	r3, #0
 80146b2:	d104      	bne.n	80146be <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 80146b4:	2300      	movs	r3, #0
 80146b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80146b8:	68bb      	ldr	r3, [r7, #8]
 80146ba:	61bb      	str	r3, [r7, #24]
 80146bc:	e003      	b.n	80146c6 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 80146be:	68bb      	ldr	r3, [r7, #8]
 80146c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80146c2:	2300      	movs	r3, #0
 80146c4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80146c6:	68fb      	ldr	r3, [r7, #12]
 80146c8:	2200      	movs	r2, #0
 80146ca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80146ce:	e02b      	b.n	8014728 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80146d0:	683b      	ldr	r3, [r7, #0]
 80146d2:	9300      	str	r3, [sp, #0]
 80146d4:	697b      	ldr	r3, [r7, #20]
 80146d6:	2200      	movs	r2, #0
 80146d8:	2180      	movs	r1, #128	; 0x80
 80146da:	68f8      	ldr	r0, [r7, #12]
 80146dc:	f000 fc5d 	bl	8014f9a <UART_WaitOnFlagUntilTimeout>
 80146e0:	4603      	mov	r3, r0
 80146e2:	2b00      	cmp	r3, #0
 80146e4:	d001      	beq.n	80146ea <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 80146e6:	2303      	movs	r3, #3
 80146e8:	e037      	b.n	801475a <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 80146ea:	69fb      	ldr	r3, [r7, #28]
 80146ec:	2b00      	cmp	r3, #0
 80146ee:	d10a      	bne.n	8014706 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80146f0:	68fb      	ldr	r3, [r7, #12]
 80146f2:	681b      	ldr	r3, [r3, #0]
 80146f4:	69ba      	ldr	r2, [r7, #24]
 80146f6:	8812      	ldrh	r2, [r2, #0]
 80146f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80146fc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80146fe:	69bb      	ldr	r3, [r7, #24]
 8014700:	3302      	adds	r3, #2
 8014702:	61bb      	str	r3, [r7, #24]
 8014704:	e007      	b.n	8014716 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8014706:	68fb      	ldr	r3, [r7, #12]
 8014708:	681b      	ldr	r3, [r3, #0]
 801470a:	69fa      	ldr	r2, [r7, #28]
 801470c:	7812      	ldrb	r2, [r2, #0]
 801470e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8014710:	69fb      	ldr	r3, [r7, #28]
 8014712:	3301      	adds	r3, #1
 8014714:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8014716:	68fb      	ldr	r3, [r7, #12]
 8014718:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 801471c:	b29b      	uxth	r3, r3
 801471e:	3b01      	subs	r3, #1
 8014720:	b29a      	uxth	r2, r3
 8014722:	68fb      	ldr	r3, [r7, #12]
 8014724:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8014728:	68fb      	ldr	r3, [r7, #12]
 801472a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 801472e:	b29b      	uxth	r3, r3
 8014730:	2b00      	cmp	r3, #0
 8014732:	d1cd      	bne.n	80146d0 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8014734:	683b      	ldr	r3, [r7, #0]
 8014736:	9300      	str	r3, [sp, #0]
 8014738:	697b      	ldr	r3, [r7, #20]
 801473a:	2200      	movs	r2, #0
 801473c:	2140      	movs	r1, #64	; 0x40
 801473e:	68f8      	ldr	r0, [r7, #12]
 8014740:	f000 fc2b 	bl	8014f9a <UART_WaitOnFlagUntilTimeout>
 8014744:	4603      	mov	r3, r0
 8014746:	2b00      	cmp	r3, #0
 8014748:	d001      	beq.n	801474e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 801474a:	2303      	movs	r3, #3
 801474c:	e005      	b.n	801475a <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801474e:	68fb      	ldr	r3, [r7, #12]
 8014750:	2220      	movs	r2, #32
 8014752:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8014754:	2300      	movs	r3, #0
 8014756:	e000      	b.n	801475a <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8014758:	2302      	movs	r3, #2
  }
}
 801475a:	4618      	mov	r0, r3
 801475c:	3720      	adds	r7, #32
 801475e:	46bd      	mov	sp, r7
 8014760:	bd80      	pop	{r7, pc}

08014762 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8014762:	b580      	push	{r7, lr}
 8014764:	b08a      	sub	sp, #40	; 0x28
 8014766:	af02      	add	r7, sp, #8
 8014768:	60f8      	str	r0, [r7, #12]
 801476a:	60b9      	str	r1, [r7, #8]
 801476c:	603b      	str	r3, [r7, #0]
 801476e:	4613      	mov	r3, r2
 8014770:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8014772:	68fb      	ldr	r3, [r7, #12]
 8014774:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014776:	2b20      	cmp	r3, #32
 8014778:	f040 80be 	bne.w	80148f8 <HAL_UART_Receive+0x196>
  {
    if ((pData == NULL) || (Size == 0U))
 801477c:	68bb      	ldr	r3, [r7, #8]
 801477e:	2b00      	cmp	r3, #0
 8014780:	d002      	beq.n	8014788 <HAL_UART_Receive+0x26>
 8014782:	88fb      	ldrh	r3, [r7, #6]
 8014784:	2b00      	cmp	r3, #0
 8014786:	d101      	bne.n	801478c <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8014788:	2301      	movs	r3, #1
 801478a:	e0b6      	b.n	80148fa <HAL_UART_Receive+0x198>
    }

    __HAL_LOCK(huart);
 801478c:	68fb      	ldr	r3, [r7, #12]
 801478e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8014792:	2b01      	cmp	r3, #1
 8014794:	d101      	bne.n	801479a <HAL_UART_Receive+0x38>
 8014796:	2302      	movs	r3, #2
 8014798:	e0af      	b.n	80148fa <HAL_UART_Receive+0x198>
 801479a:	68fb      	ldr	r3, [r7, #12]
 801479c:	2201      	movs	r2, #1
 801479e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80147a2:	68fb      	ldr	r3, [r7, #12]
 80147a4:	2200      	movs	r2, #0
 80147a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80147aa:	68fb      	ldr	r3, [r7, #12]
 80147ac:	2222      	movs	r2, #34	; 0x22
 80147ae:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80147b0:	68fb      	ldr	r3, [r7, #12]
 80147b2:	2200      	movs	r2, #0
 80147b4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80147b6:	f7fc fd85 	bl	80112c4 <HAL_GetTick>
 80147ba:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80147bc:	68fb      	ldr	r3, [r7, #12]
 80147be:	88fa      	ldrh	r2, [r7, #6]
 80147c0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80147c4:	68fb      	ldr	r3, [r7, #12]
 80147c6:	88fa      	ldrh	r2, [r7, #6]
 80147c8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80147cc:	68fb      	ldr	r3, [r7, #12]
 80147ce:	689b      	ldr	r3, [r3, #8]
 80147d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80147d4:	d10e      	bne.n	80147f4 <HAL_UART_Receive+0x92>
 80147d6:	68fb      	ldr	r3, [r7, #12]
 80147d8:	691b      	ldr	r3, [r3, #16]
 80147da:	2b00      	cmp	r3, #0
 80147dc:	d105      	bne.n	80147ea <HAL_UART_Receive+0x88>
 80147de:	68fb      	ldr	r3, [r7, #12]
 80147e0:	f240 12ff 	movw	r2, #511	; 0x1ff
 80147e4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80147e8:	e02d      	b.n	8014846 <HAL_UART_Receive+0xe4>
 80147ea:	68fb      	ldr	r3, [r7, #12]
 80147ec:	22ff      	movs	r2, #255	; 0xff
 80147ee:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80147f2:	e028      	b.n	8014846 <HAL_UART_Receive+0xe4>
 80147f4:	68fb      	ldr	r3, [r7, #12]
 80147f6:	689b      	ldr	r3, [r3, #8]
 80147f8:	2b00      	cmp	r3, #0
 80147fa:	d10d      	bne.n	8014818 <HAL_UART_Receive+0xb6>
 80147fc:	68fb      	ldr	r3, [r7, #12]
 80147fe:	691b      	ldr	r3, [r3, #16]
 8014800:	2b00      	cmp	r3, #0
 8014802:	d104      	bne.n	801480e <HAL_UART_Receive+0xac>
 8014804:	68fb      	ldr	r3, [r7, #12]
 8014806:	22ff      	movs	r2, #255	; 0xff
 8014808:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 801480c:	e01b      	b.n	8014846 <HAL_UART_Receive+0xe4>
 801480e:	68fb      	ldr	r3, [r7, #12]
 8014810:	227f      	movs	r2, #127	; 0x7f
 8014812:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8014816:	e016      	b.n	8014846 <HAL_UART_Receive+0xe4>
 8014818:	68fb      	ldr	r3, [r7, #12]
 801481a:	689b      	ldr	r3, [r3, #8]
 801481c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8014820:	d10d      	bne.n	801483e <HAL_UART_Receive+0xdc>
 8014822:	68fb      	ldr	r3, [r7, #12]
 8014824:	691b      	ldr	r3, [r3, #16]
 8014826:	2b00      	cmp	r3, #0
 8014828:	d104      	bne.n	8014834 <HAL_UART_Receive+0xd2>
 801482a:	68fb      	ldr	r3, [r7, #12]
 801482c:	227f      	movs	r2, #127	; 0x7f
 801482e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8014832:	e008      	b.n	8014846 <HAL_UART_Receive+0xe4>
 8014834:	68fb      	ldr	r3, [r7, #12]
 8014836:	223f      	movs	r2, #63	; 0x3f
 8014838:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 801483c:	e003      	b.n	8014846 <HAL_UART_Receive+0xe4>
 801483e:	68fb      	ldr	r3, [r7, #12]
 8014840:	2200      	movs	r2, #0
 8014842:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8014846:	68fb      	ldr	r3, [r7, #12]
 8014848:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801484c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801484e:	68fb      	ldr	r3, [r7, #12]
 8014850:	689b      	ldr	r3, [r3, #8]
 8014852:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014856:	d108      	bne.n	801486a <HAL_UART_Receive+0x108>
 8014858:	68fb      	ldr	r3, [r7, #12]
 801485a:	691b      	ldr	r3, [r3, #16]
 801485c:	2b00      	cmp	r3, #0
 801485e:	d104      	bne.n	801486a <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8014860:	2300      	movs	r3, #0
 8014862:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8014864:	68bb      	ldr	r3, [r7, #8]
 8014866:	61bb      	str	r3, [r7, #24]
 8014868:	e003      	b.n	8014872 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 801486a:	68bb      	ldr	r3, [r7, #8]
 801486c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801486e:	2300      	movs	r3, #0
 8014870:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8014872:	68fb      	ldr	r3, [r7, #12]
 8014874:	2200      	movs	r2, #0
 8014876:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 801487a:	e032      	b.n	80148e2 <HAL_UART_Receive+0x180>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 801487c:	683b      	ldr	r3, [r7, #0]
 801487e:	9300      	str	r3, [sp, #0]
 8014880:	697b      	ldr	r3, [r7, #20]
 8014882:	2200      	movs	r2, #0
 8014884:	2120      	movs	r1, #32
 8014886:	68f8      	ldr	r0, [r7, #12]
 8014888:	f000 fb87 	bl	8014f9a <UART_WaitOnFlagUntilTimeout>
 801488c:	4603      	mov	r3, r0
 801488e:	2b00      	cmp	r3, #0
 8014890:	d001      	beq.n	8014896 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8014892:	2303      	movs	r3, #3
 8014894:	e031      	b.n	80148fa <HAL_UART_Receive+0x198>
      }
      if (pdata8bits == NULL)
 8014896:	69fb      	ldr	r3, [r7, #28]
 8014898:	2b00      	cmp	r3, #0
 801489a:	d10c      	bne.n	80148b6 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 801489c:	68fb      	ldr	r3, [r7, #12]
 801489e:	681b      	ldr	r3, [r3, #0]
 80148a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80148a2:	b29a      	uxth	r2, r3
 80148a4:	8a7b      	ldrh	r3, [r7, #18]
 80148a6:	4013      	ands	r3, r2
 80148a8:	b29a      	uxth	r2, r3
 80148aa:	69bb      	ldr	r3, [r7, #24]
 80148ac:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80148ae:	69bb      	ldr	r3, [r7, #24]
 80148b0:	3302      	adds	r3, #2
 80148b2:	61bb      	str	r3, [r7, #24]
 80148b4:	e00c      	b.n	80148d0 <HAL_UART_Receive+0x16e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80148b6:	68fb      	ldr	r3, [r7, #12]
 80148b8:	681b      	ldr	r3, [r3, #0]
 80148ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80148bc:	b2da      	uxtb	r2, r3
 80148be:	8a7b      	ldrh	r3, [r7, #18]
 80148c0:	b2db      	uxtb	r3, r3
 80148c2:	4013      	ands	r3, r2
 80148c4:	b2da      	uxtb	r2, r3
 80148c6:	69fb      	ldr	r3, [r7, #28]
 80148c8:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80148ca:	69fb      	ldr	r3, [r7, #28]
 80148cc:	3301      	adds	r3, #1
 80148ce:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80148d0:	68fb      	ldr	r3, [r7, #12]
 80148d2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80148d6:	b29b      	uxth	r3, r3
 80148d8:	3b01      	subs	r3, #1
 80148da:	b29a      	uxth	r2, r3
 80148dc:	68fb      	ldr	r3, [r7, #12]
 80148de:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80148e2:	68fb      	ldr	r3, [r7, #12]
 80148e4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80148e8:	b29b      	uxth	r3, r3
 80148ea:	2b00      	cmp	r3, #0
 80148ec:	d1c6      	bne.n	801487c <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80148ee:	68fb      	ldr	r3, [r7, #12]
 80148f0:	2220      	movs	r2, #32
 80148f2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80148f4:	2300      	movs	r3, #0
 80148f6:	e000      	b.n	80148fa <HAL_UART_Receive+0x198>
  }
  else
  {
    return HAL_BUSY;
 80148f8:	2302      	movs	r3, #2
  }
}
 80148fa:	4618      	mov	r0, r3
 80148fc:	3720      	adds	r7, #32
 80148fe:	46bd      	mov	sp, r7
 8014900:	bd80      	pop	{r7, pc}
	...

08014904 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8014904:	b580      	push	{r7, lr}
 8014906:	b088      	sub	sp, #32
 8014908:	af00      	add	r7, sp, #0
 801490a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801490c:	2300      	movs	r3, #0
 801490e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8014910:	687b      	ldr	r3, [r7, #4]
 8014912:	689a      	ldr	r2, [r3, #8]
 8014914:	687b      	ldr	r3, [r7, #4]
 8014916:	691b      	ldr	r3, [r3, #16]
 8014918:	431a      	orrs	r2, r3
 801491a:	687b      	ldr	r3, [r7, #4]
 801491c:	695b      	ldr	r3, [r3, #20]
 801491e:	431a      	orrs	r2, r3
 8014920:	687b      	ldr	r3, [r7, #4]
 8014922:	69db      	ldr	r3, [r3, #28]
 8014924:	4313      	orrs	r3, r2
 8014926:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8014928:	687b      	ldr	r3, [r7, #4]
 801492a:	681a      	ldr	r2, [r3, #0]
 801492c:	687b      	ldr	r3, [r7, #4]
 801492e:	681b      	ldr	r3, [r3, #0]
 8014930:	6819      	ldr	r1, [r3, #0]
 8014932:	4bb3      	ldr	r3, [pc, #716]	; (8014c00 <UART_SetConfig+0x2fc>)
 8014934:	400b      	ands	r3, r1
 8014936:	6979      	ldr	r1, [r7, #20]
 8014938:	430b      	orrs	r3, r1
 801493a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801493c:	687b      	ldr	r3, [r7, #4]
 801493e:	681b      	ldr	r3, [r3, #0]
 8014940:	687a      	ldr	r2, [r7, #4]
 8014942:	6812      	ldr	r2, [r2, #0]
 8014944:	6852      	ldr	r2, [r2, #4]
 8014946:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 801494a:	687a      	ldr	r2, [r7, #4]
 801494c:	68d2      	ldr	r2, [r2, #12]
 801494e:	430a      	orrs	r2, r1
 8014950:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8014952:	687b      	ldr	r3, [r7, #4]
 8014954:	699b      	ldr	r3, [r3, #24]
 8014956:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8014958:	687b      	ldr	r3, [r7, #4]
 801495a:	6a1b      	ldr	r3, [r3, #32]
 801495c:	697a      	ldr	r2, [r7, #20]
 801495e:	4313      	orrs	r3, r2
 8014960:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8014962:	687b      	ldr	r3, [r7, #4]
 8014964:	681b      	ldr	r3, [r3, #0]
 8014966:	687a      	ldr	r2, [r7, #4]
 8014968:	6812      	ldr	r2, [r2, #0]
 801496a:	6892      	ldr	r2, [r2, #8]
 801496c:	f422 6130 	bic.w	r1, r2, #2816	; 0xb00
 8014970:	697a      	ldr	r2, [r7, #20]
 8014972:	430a      	orrs	r2, r1
 8014974:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8014976:	687b      	ldr	r3, [r7, #4]
 8014978:	681b      	ldr	r3, [r3, #0]
 801497a:	4aa2      	ldr	r2, [pc, #648]	; (8014c04 <UART_SetConfig+0x300>)
 801497c:	4293      	cmp	r3, r2
 801497e:	d121      	bne.n	80149c4 <UART_SetConfig+0xc0>
 8014980:	4ba1      	ldr	r3, [pc, #644]	; (8014c08 <UART_SetConfig+0x304>)
 8014982:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014986:	f003 0303 	and.w	r3, r3, #3
 801498a:	2b03      	cmp	r3, #3
 801498c:	d816      	bhi.n	80149bc <UART_SetConfig+0xb8>
 801498e:	a201      	add	r2, pc, #4	; (adr r2, 8014994 <UART_SetConfig+0x90>)
 8014990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014994:	080149a5 	.word	0x080149a5
 8014998:	080149b1 	.word	0x080149b1
 801499c:	080149ab 	.word	0x080149ab
 80149a0:	080149b7 	.word	0x080149b7
 80149a4:	2301      	movs	r3, #1
 80149a6:	77fb      	strb	r3, [r7, #31]
 80149a8:	e150      	b.n	8014c4c <UART_SetConfig+0x348>
 80149aa:	2302      	movs	r3, #2
 80149ac:	77fb      	strb	r3, [r7, #31]
 80149ae:	e14d      	b.n	8014c4c <UART_SetConfig+0x348>
 80149b0:	2304      	movs	r3, #4
 80149b2:	77fb      	strb	r3, [r7, #31]
 80149b4:	e14a      	b.n	8014c4c <UART_SetConfig+0x348>
 80149b6:	2308      	movs	r3, #8
 80149b8:	77fb      	strb	r3, [r7, #31]
 80149ba:	e147      	b.n	8014c4c <UART_SetConfig+0x348>
 80149bc:	2310      	movs	r3, #16
 80149be:	77fb      	strb	r3, [r7, #31]
 80149c0:	bf00      	nop
 80149c2:	e143      	b.n	8014c4c <UART_SetConfig+0x348>
 80149c4:	687b      	ldr	r3, [r7, #4]
 80149c6:	681b      	ldr	r3, [r3, #0]
 80149c8:	4a90      	ldr	r2, [pc, #576]	; (8014c0c <UART_SetConfig+0x308>)
 80149ca:	4293      	cmp	r3, r2
 80149cc:	d134      	bne.n	8014a38 <UART_SetConfig+0x134>
 80149ce:	4b8e      	ldr	r3, [pc, #568]	; (8014c08 <UART_SetConfig+0x304>)
 80149d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80149d4:	f003 030c 	and.w	r3, r3, #12
 80149d8:	2b0c      	cmp	r3, #12
 80149da:	d829      	bhi.n	8014a30 <UART_SetConfig+0x12c>
 80149dc:	a201      	add	r2, pc, #4	; (adr r2, 80149e4 <UART_SetConfig+0xe0>)
 80149de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80149e2:	bf00      	nop
 80149e4:	08014a19 	.word	0x08014a19
 80149e8:	08014a31 	.word	0x08014a31
 80149ec:	08014a31 	.word	0x08014a31
 80149f0:	08014a31 	.word	0x08014a31
 80149f4:	08014a25 	.word	0x08014a25
 80149f8:	08014a31 	.word	0x08014a31
 80149fc:	08014a31 	.word	0x08014a31
 8014a00:	08014a31 	.word	0x08014a31
 8014a04:	08014a1f 	.word	0x08014a1f
 8014a08:	08014a31 	.word	0x08014a31
 8014a0c:	08014a31 	.word	0x08014a31
 8014a10:	08014a31 	.word	0x08014a31
 8014a14:	08014a2b 	.word	0x08014a2b
 8014a18:	2300      	movs	r3, #0
 8014a1a:	77fb      	strb	r3, [r7, #31]
 8014a1c:	e116      	b.n	8014c4c <UART_SetConfig+0x348>
 8014a1e:	2302      	movs	r3, #2
 8014a20:	77fb      	strb	r3, [r7, #31]
 8014a22:	e113      	b.n	8014c4c <UART_SetConfig+0x348>
 8014a24:	2304      	movs	r3, #4
 8014a26:	77fb      	strb	r3, [r7, #31]
 8014a28:	e110      	b.n	8014c4c <UART_SetConfig+0x348>
 8014a2a:	2308      	movs	r3, #8
 8014a2c:	77fb      	strb	r3, [r7, #31]
 8014a2e:	e10d      	b.n	8014c4c <UART_SetConfig+0x348>
 8014a30:	2310      	movs	r3, #16
 8014a32:	77fb      	strb	r3, [r7, #31]
 8014a34:	bf00      	nop
 8014a36:	e109      	b.n	8014c4c <UART_SetConfig+0x348>
 8014a38:	687b      	ldr	r3, [r7, #4]
 8014a3a:	681b      	ldr	r3, [r3, #0]
 8014a3c:	4a74      	ldr	r2, [pc, #464]	; (8014c10 <UART_SetConfig+0x30c>)
 8014a3e:	4293      	cmp	r3, r2
 8014a40:	d120      	bne.n	8014a84 <UART_SetConfig+0x180>
 8014a42:	4b71      	ldr	r3, [pc, #452]	; (8014c08 <UART_SetConfig+0x304>)
 8014a44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014a48:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8014a4c:	2b10      	cmp	r3, #16
 8014a4e:	d00f      	beq.n	8014a70 <UART_SetConfig+0x16c>
 8014a50:	2b10      	cmp	r3, #16
 8014a52:	d802      	bhi.n	8014a5a <UART_SetConfig+0x156>
 8014a54:	2b00      	cmp	r3, #0
 8014a56:	d005      	beq.n	8014a64 <UART_SetConfig+0x160>
 8014a58:	e010      	b.n	8014a7c <UART_SetConfig+0x178>
 8014a5a:	2b20      	cmp	r3, #32
 8014a5c:	d005      	beq.n	8014a6a <UART_SetConfig+0x166>
 8014a5e:	2b30      	cmp	r3, #48	; 0x30
 8014a60:	d009      	beq.n	8014a76 <UART_SetConfig+0x172>
 8014a62:	e00b      	b.n	8014a7c <UART_SetConfig+0x178>
 8014a64:	2300      	movs	r3, #0
 8014a66:	77fb      	strb	r3, [r7, #31]
 8014a68:	e0f0      	b.n	8014c4c <UART_SetConfig+0x348>
 8014a6a:	2302      	movs	r3, #2
 8014a6c:	77fb      	strb	r3, [r7, #31]
 8014a6e:	e0ed      	b.n	8014c4c <UART_SetConfig+0x348>
 8014a70:	2304      	movs	r3, #4
 8014a72:	77fb      	strb	r3, [r7, #31]
 8014a74:	e0ea      	b.n	8014c4c <UART_SetConfig+0x348>
 8014a76:	2308      	movs	r3, #8
 8014a78:	77fb      	strb	r3, [r7, #31]
 8014a7a:	e0e7      	b.n	8014c4c <UART_SetConfig+0x348>
 8014a7c:	2310      	movs	r3, #16
 8014a7e:	77fb      	strb	r3, [r7, #31]
 8014a80:	bf00      	nop
 8014a82:	e0e3      	b.n	8014c4c <UART_SetConfig+0x348>
 8014a84:	687b      	ldr	r3, [r7, #4]
 8014a86:	681b      	ldr	r3, [r3, #0]
 8014a88:	4a62      	ldr	r2, [pc, #392]	; (8014c14 <UART_SetConfig+0x310>)
 8014a8a:	4293      	cmp	r3, r2
 8014a8c:	d120      	bne.n	8014ad0 <UART_SetConfig+0x1cc>
 8014a8e:	4b5e      	ldr	r3, [pc, #376]	; (8014c08 <UART_SetConfig+0x304>)
 8014a90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014a94:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8014a98:	2b40      	cmp	r3, #64	; 0x40
 8014a9a:	d00f      	beq.n	8014abc <UART_SetConfig+0x1b8>
 8014a9c:	2b40      	cmp	r3, #64	; 0x40
 8014a9e:	d802      	bhi.n	8014aa6 <UART_SetConfig+0x1a2>
 8014aa0:	2b00      	cmp	r3, #0
 8014aa2:	d005      	beq.n	8014ab0 <UART_SetConfig+0x1ac>
 8014aa4:	e010      	b.n	8014ac8 <UART_SetConfig+0x1c4>
 8014aa6:	2b80      	cmp	r3, #128	; 0x80
 8014aa8:	d005      	beq.n	8014ab6 <UART_SetConfig+0x1b2>
 8014aaa:	2bc0      	cmp	r3, #192	; 0xc0
 8014aac:	d009      	beq.n	8014ac2 <UART_SetConfig+0x1be>
 8014aae:	e00b      	b.n	8014ac8 <UART_SetConfig+0x1c4>
 8014ab0:	2300      	movs	r3, #0
 8014ab2:	77fb      	strb	r3, [r7, #31]
 8014ab4:	e0ca      	b.n	8014c4c <UART_SetConfig+0x348>
 8014ab6:	2302      	movs	r3, #2
 8014ab8:	77fb      	strb	r3, [r7, #31]
 8014aba:	e0c7      	b.n	8014c4c <UART_SetConfig+0x348>
 8014abc:	2304      	movs	r3, #4
 8014abe:	77fb      	strb	r3, [r7, #31]
 8014ac0:	e0c4      	b.n	8014c4c <UART_SetConfig+0x348>
 8014ac2:	2308      	movs	r3, #8
 8014ac4:	77fb      	strb	r3, [r7, #31]
 8014ac6:	e0c1      	b.n	8014c4c <UART_SetConfig+0x348>
 8014ac8:	2310      	movs	r3, #16
 8014aca:	77fb      	strb	r3, [r7, #31]
 8014acc:	bf00      	nop
 8014ace:	e0bd      	b.n	8014c4c <UART_SetConfig+0x348>
 8014ad0:	687b      	ldr	r3, [r7, #4]
 8014ad2:	681b      	ldr	r3, [r3, #0]
 8014ad4:	4a50      	ldr	r2, [pc, #320]	; (8014c18 <UART_SetConfig+0x314>)
 8014ad6:	4293      	cmp	r3, r2
 8014ad8:	d124      	bne.n	8014b24 <UART_SetConfig+0x220>
 8014ada:	4b4b      	ldr	r3, [pc, #300]	; (8014c08 <UART_SetConfig+0x304>)
 8014adc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014ae0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8014ae4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014ae8:	d012      	beq.n	8014b10 <UART_SetConfig+0x20c>
 8014aea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014aee:	d802      	bhi.n	8014af6 <UART_SetConfig+0x1f2>
 8014af0:	2b00      	cmp	r3, #0
 8014af2:	d007      	beq.n	8014b04 <UART_SetConfig+0x200>
 8014af4:	e012      	b.n	8014b1c <UART_SetConfig+0x218>
 8014af6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014afa:	d006      	beq.n	8014b0a <UART_SetConfig+0x206>
 8014afc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8014b00:	d009      	beq.n	8014b16 <UART_SetConfig+0x212>
 8014b02:	e00b      	b.n	8014b1c <UART_SetConfig+0x218>
 8014b04:	2300      	movs	r3, #0
 8014b06:	77fb      	strb	r3, [r7, #31]
 8014b08:	e0a0      	b.n	8014c4c <UART_SetConfig+0x348>
 8014b0a:	2302      	movs	r3, #2
 8014b0c:	77fb      	strb	r3, [r7, #31]
 8014b0e:	e09d      	b.n	8014c4c <UART_SetConfig+0x348>
 8014b10:	2304      	movs	r3, #4
 8014b12:	77fb      	strb	r3, [r7, #31]
 8014b14:	e09a      	b.n	8014c4c <UART_SetConfig+0x348>
 8014b16:	2308      	movs	r3, #8
 8014b18:	77fb      	strb	r3, [r7, #31]
 8014b1a:	e097      	b.n	8014c4c <UART_SetConfig+0x348>
 8014b1c:	2310      	movs	r3, #16
 8014b1e:	77fb      	strb	r3, [r7, #31]
 8014b20:	bf00      	nop
 8014b22:	e093      	b.n	8014c4c <UART_SetConfig+0x348>
 8014b24:	687b      	ldr	r3, [r7, #4]
 8014b26:	681b      	ldr	r3, [r3, #0]
 8014b28:	4a3c      	ldr	r2, [pc, #240]	; (8014c1c <UART_SetConfig+0x318>)
 8014b2a:	4293      	cmp	r3, r2
 8014b2c:	d124      	bne.n	8014b78 <UART_SetConfig+0x274>
 8014b2e:	4b36      	ldr	r3, [pc, #216]	; (8014c08 <UART_SetConfig+0x304>)
 8014b30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014b34:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8014b38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014b3c:	d012      	beq.n	8014b64 <UART_SetConfig+0x260>
 8014b3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014b42:	d802      	bhi.n	8014b4a <UART_SetConfig+0x246>
 8014b44:	2b00      	cmp	r3, #0
 8014b46:	d007      	beq.n	8014b58 <UART_SetConfig+0x254>
 8014b48:	e012      	b.n	8014b70 <UART_SetConfig+0x26c>
 8014b4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8014b4e:	d006      	beq.n	8014b5e <UART_SetConfig+0x25a>
 8014b50:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8014b54:	d009      	beq.n	8014b6a <UART_SetConfig+0x266>
 8014b56:	e00b      	b.n	8014b70 <UART_SetConfig+0x26c>
 8014b58:	2301      	movs	r3, #1
 8014b5a:	77fb      	strb	r3, [r7, #31]
 8014b5c:	e076      	b.n	8014c4c <UART_SetConfig+0x348>
 8014b5e:	2302      	movs	r3, #2
 8014b60:	77fb      	strb	r3, [r7, #31]
 8014b62:	e073      	b.n	8014c4c <UART_SetConfig+0x348>
 8014b64:	2304      	movs	r3, #4
 8014b66:	77fb      	strb	r3, [r7, #31]
 8014b68:	e070      	b.n	8014c4c <UART_SetConfig+0x348>
 8014b6a:	2308      	movs	r3, #8
 8014b6c:	77fb      	strb	r3, [r7, #31]
 8014b6e:	e06d      	b.n	8014c4c <UART_SetConfig+0x348>
 8014b70:	2310      	movs	r3, #16
 8014b72:	77fb      	strb	r3, [r7, #31]
 8014b74:	bf00      	nop
 8014b76:	e069      	b.n	8014c4c <UART_SetConfig+0x348>
 8014b78:	687b      	ldr	r3, [r7, #4]
 8014b7a:	681b      	ldr	r3, [r3, #0]
 8014b7c:	4a28      	ldr	r2, [pc, #160]	; (8014c20 <UART_SetConfig+0x31c>)
 8014b7e:	4293      	cmp	r3, r2
 8014b80:	d124      	bne.n	8014bcc <UART_SetConfig+0x2c8>
 8014b82:	4b21      	ldr	r3, [pc, #132]	; (8014c08 <UART_SetConfig+0x304>)
 8014b84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014b88:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8014b8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014b90:	d012      	beq.n	8014bb8 <UART_SetConfig+0x2b4>
 8014b92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014b96:	d802      	bhi.n	8014b9e <UART_SetConfig+0x29a>
 8014b98:	2b00      	cmp	r3, #0
 8014b9a:	d007      	beq.n	8014bac <UART_SetConfig+0x2a8>
 8014b9c:	e012      	b.n	8014bc4 <UART_SetConfig+0x2c0>
 8014b9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8014ba2:	d006      	beq.n	8014bb2 <UART_SetConfig+0x2ae>
 8014ba4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8014ba8:	d009      	beq.n	8014bbe <UART_SetConfig+0x2ba>
 8014baa:	e00b      	b.n	8014bc4 <UART_SetConfig+0x2c0>
 8014bac:	2300      	movs	r3, #0
 8014bae:	77fb      	strb	r3, [r7, #31]
 8014bb0:	e04c      	b.n	8014c4c <UART_SetConfig+0x348>
 8014bb2:	2302      	movs	r3, #2
 8014bb4:	77fb      	strb	r3, [r7, #31]
 8014bb6:	e049      	b.n	8014c4c <UART_SetConfig+0x348>
 8014bb8:	2304      	movs	r3, #4
 8014bba:	77fb      	strb	r3, [r7, #31]
 8014bbc:	e046      	b.n	8014c4c <UART_SetConfig+0x348>
 8014bbe:	2308      	movs	r3, #8
 8014bc0:	77fb      	strb	r3, [r7, #31]
 8014bc2:	e043      	b.n	8014c4c <UART_SetConfig+0x348>
 8014bc4:	2310      	movs	r3, #16
 8014bc6:	77fb      	strb	r3, [r7, #31]
 8014bc8:	bf00      	nop
 8014bca:	e03f      	b.n	8014c4c <UART_SetConfig+0x348>
 8014bcc:	687b      	ldr	r3, [r7, #4]
 8014bce:	681b      	ldr	r3, [r3, #0]
 8014bd0:	4a14      	ldr	r2, [pc, #80]	; (8014c24 <UART_SetConfig+0x320>)
 8014bd2:	4293      	cmp	r3, r2
 8014bd4:	d138      	bne.n	8014c48 <UART_SetConfig+0x344>
 8014bd6:	4b0c      	ldr	r3, [pc, #48]	; (8014c08 <UART_SetConfig+0x304>)
 8014bd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014bdc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8014be0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8014be4:	d026      	beq.n	8014c34 <UART_SetConfig+0x330>
 8014be6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8014bea:	d802      	bhi.n	8014bf2 <UART_SetConfig+0x2ee>
 8014bec:	2b00      	cmp	r3, #0
 8014bee:	d01b      	beq.n	8014c28 <UART_SetConfig+0x324>
 8014bf0:	e026      	b.n	8014c40 <UART_SetConfig+0x33c>
 8014bf2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014bf6:	d01a      	beq.n	8014c2e <UART_SetConfig+0x32a>
 8014bf8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8014bfc:	d01d      	beq.n	8014c3a <UART_SetConfig+0x336>
 8014bfe:	e01f      	b.n	8014c40 <UART_SetConfig+0x33c>
 8014c00:	efff69f3 	.word	0xefff69f3
 8014c04:	40011000 	.word	0x40011000
 8014c08:	40023800 	.word	0x40023800
 8014c0c:	40004400 	.word	0x40004400
 8014c10:	40004800 	.word	0x40004800
 8014c14:	40004c00 	.word	0x40004c00
 8014c18:	40005000 	.word	0x40005000
 8014c1c:	40011400 	.word	0x40011400
 8014c20:	40007800 	.word	0x40007800
 8014c24:	40007c00 	.word	0x40007c00
 8014c28:	2300      	movs	r3, #0
 8014c2a:	77fb      	strb	r3, [r7, #31]
 8014c2c:	e00e      	b.n	8014c4c <UART_SetConfig+0x348>
 8014c2e:	2302      	movs	r3, #2
 8014c30:	77fb      	strb	r3, [r7, #31]
 8014c32:	e00b      	b.n	8014c4c <UART_SetConfig+0x348>
 8014c34:	2304      	movs	r3, #4
 8014c36:	77fb      	strb	r3, [r7, #31]
 8014c38:	e008      	b.n	8014c4c <UART_SetConfig+0x348>
 8014c3a:	2308      	movs	r3, #8
 8014c3c:	77fb      	strb	r3, [r7, #31]
 8014c3e:	e005      	b.n	8014c4c <UART_SetConfig+0x348>
 8014c40:	2310      	movs	r3, #16
 8014c42:	77fb      	strb	r3, [r7, #31]
 8014c44:	bf00      	nop
 8014c46:	e001      	b.n	8014c4c <UART_SetConfig+0x348>
 8014c48:	2310      	movs	r3, #16
 8014c4a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8014c4c:	687b      	ldr	r3, [r7, #4]
 8014c4e:	69db      	ldr	r3, [r3, #28]
 8014c50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014c54:	d15c      	bne.n	8014d10 <UART_SetConfig+0x40c>
  {
    switch (clocksource)
 8014c56:	7ffb      	ldrb	r3, [r7, #31]
 8014c58:	2b08      	cmp	r3, #8
 8014c5a:	d828      	bhi.n	8014cae <UART_SetConfig+0x3aa>
 8014c5c:	a201      	add	r2, pc, #4	; (adr r2, 8014c64 <UART_SetConfig+0x360>)
 8014c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014c62:	bf00      	nop
 8014c64:	08014c89 	.word	0x08014c89
 8014c68:	08014c91 	.word	0x08014c91
 8014c6c:	08014c99 	.word	0x08014c99
 8014c70:	08014caf 	.word	0x08014caf
 8014c74:	08014c9f 	.word	0x08014c9f
 8014c78:	08014caf 	.word	0x08014caf
 8014c7c:	08014caf 	.word	0x08014caf
 8014c80:	08014caf 	.word	0x08014caf
 8014c84:	08014ca7 	.word	0x08014ca7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8014c88:	f7fe fc5a 	bl	8013540 <HAL_RCC_GetPCLK1Freq>
 8014c8c:	61b8      	str	r0, [r7, #24]
        break;
 8014c8e:	e013      	b.n	8014cb8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8014c90:	f7fe fc6a 	bl	8013568 <HAL_RCC_GetPCLK2Freq>
 8014c94:	61b8      	str	r0, [r7, #24]
        break;
 8014c96:	e00f      	b.n	8014cb8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8014c98:	4b49      	ldr	r3, [pc, #292]	; (8014dc0 <UART_SetConfig+0x4bc>)
 8014c9a:	61bb      	str	r3, [r7, #24]
        break;
 8014c9c:	e00c      	b.n	8014cb8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8014c9e:	f7fe fb6b 	bl	8013378 <HAL_RCC_GetSysClockFreq>
 8014ca2:	61b8      	str	r0, [r7, #24]
        break;
 8014ca4:	e008      	b.n	8014cb8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8014ca6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8014caa:	61bb      	str	r3, [r7, #24]
        break;
 8014cac:	e004      	b.n	8014cb8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8014cae:	2300      	movs	r3, #0
 8014cb0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8014cb2:	2301      	movs	r3, #1
 8014cb4:	77bb      	strb	r3, [r7, #30]
        break;
 8014cb6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8014cb8:	69bb      	ldr	r3, [r7, #24]
 8014cba:	2b00      	cmp	r3, #0
 8014cbc:	d074      	beq.n	8014da8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8014cbe:	69bb      	ldr	r3, [r7, #24]
 8014cc0:	005a      	lsls	r2, r3, #1
 8014cc2:	687b      	ldr	r3, [r7, #4]
 8014cc4:	685b      	ldr	r3, [r3, #4]
 8014cc6:	085b      	lsrs	r3, r3, #1
 8014cc8:	441a      	add	r2, r3
 8014cca:	687b      	ldr	r3, [r7, #4]
 8014ccc:	685b      	ldr	r3, [r3, #4]
 8014cce:	fbb2 f3f3 	udiv	r3, r2, r3
 8014cd2:	b29b      	uxth	r3, r3
 8014cd4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8014cd6:	693b      	ldr	r3, [r7, #16]
 8014cd8:	2b0f      	cmp	r3, #15
 8014cda:	d916      	bls.n	8014d0a <UART_SetConfig+0x406>
 8014cdc:	693b      	ldr	r3, [r7, #16]
 8014cde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014ce2:	d212      	bcs.n	8014d0a <UART_SetConfig+0x406>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8014ce4:	693b      	ldr	r3, [r7, #16]
 8014ce6:	b29b      	uxth	r3, r3
 8014ce8:	f023 030f 	bic.w	r3, r3, #15
 8014cec:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8014cee:	693b      	ldr	r3, [r7, #16]
 8014cf0:	085b      	lsrs	r3, r3, #1
 8014cf2:	b29b      	uxth	r3, r3
 8014cf4:	f003 0307 	and.w	r3, r3, #7
 8014cf8:	b29a      	uxth	r2, r3
 8014cfa:	89fb      	ldrh	r3, [r7, #14]
 8014cfc:	4313      	orrs	r3, r2
 8014cfe:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8014d00:	687b      	ldr	r3, [r7, #4]
 8014d02:	681b      	ldr	r3, [r3, #0]
 8014d04:	89fa      	ldrh	r2, [r7, #14]
 8014d06:	60da      	str	r2, [r3, #12]
 8014d08:	e04e      	b.n	8014da8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8014d0a:	2301      	movs	r3, #1
 8014d0c:	77bb      	strb	r3, [r7, #30]
 8014d0e:	e04b      	b.n	8014da8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8014d10:	7ffb      	ldrb	r3, [r7, #31]
 8014d12:	2b08      	cmp	r3, #8
 8014d14:	d827      	bhi.n	8014d66 <UART_SetConfig+0x462>
 8014d16:	a201      	add	r2, pc, #4	; (adr r2, 8014d1c <UART_SetConfig+0x418>)
 8014d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014d1c:	08014d41 	.word	0x08014d41
 8014d20:	08014d49 	.word	0x08014d49
 8014d24:	08014d51 	.word	0x08014d51
 8014d28:	08014d67 	.word	0x08014d67
 8014d2c:	08014d57 	.word	0x08014d57
 8014d30:	08014d67 	.word	0x08014d67
 8014d34:	08014d67 	.word	0x08014d67
 8014d38:	08014d67 	.word	0x08014d67
 8014d3c:	08014d5f 	.word	0x08014d5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8014d40:	f7fe fbfe 	bl	8013540 <HAL_RCC_GetPCLK1Freq>
 8014d44:	61b8      	str	r0, [r7, #24]
        break;
 8014d46:	e013      	b.n	8014d70 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8014d48:	f7fe fc0e 	bl	8013568 <HAL_RCC_GetPCLK2Freq>
 8014d4c:	61b8      	str	r0, [r7, #24]
        break;
 8014d4e:	e00f      	b.n	8014d70 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8014d50:	4b1b      	ldr	r3, [pc, #108]	; (8014dc0 <UART_SetConfig+0x4bc>)
 8014d52:	61bb      	str	r3, [r7, #24]
        break;
 8014d54:	e00c      	b.n	8014d70 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8014d56:	f7fe fb0f 	bl	8013378 <HAL_RCC_GetSysClockFreq>
 8014d5a:	61b8      	str	r0, [r7, #24]
        break;
 8014d5c:	e008      	b.n	8014d70 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8014d5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8014d62:	61bb      	str	r3, [r7, #24]
        break;
 8014d64:	e004      	b.n	8014d70 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8014d66:	2300      	movs	r3, #0
 8014d68:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8014d6a:	2301      	movs	r3, #1
 8014d6c:	77bb      	strb	r3, [r7, #30]
        break;
 8014d6e:	bf00      	nop
    }

    if (pclk != 0U)
 8014d70:	69bb      	ldr	r3, [r7, #24]
 8014d72:	2b00      	cmp	r3, #0
 8014d74:	d018      	beq.n	8014da8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8014d76:	687b      	ldr	r3, [r7, #4]
 8014d78:	685b      	ldr	r3, [r3, #4]
 8014d7a:	085a      	lsrs	r2, r3, #1
 8014d7c:	69bb      	ldr	r3, [r7, #24]
 8014d7e:	441a      	add	r2, r3
 8014d80:	687b      	ldr	r3, [r7, #4]
 8014d82:	685b      	ldr	r3, [r3, #4]
 8014d84:	fbb2 f3f3 	udiv	r3, r2, r3
 8014d88:	b29b      	uxth	r3, r3
 8014d8a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8014d8c:	693b      	ldr	r3, [r7, #16]
 8014d8e:	2b0f      	cmp	r3, #15
 8014d90:	d908      	bls.n	8014da4 <UART_SetConfig+0x4a0>
 8014d92:	693b      	ldr	r3, [r7, #16]
 8014d94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014d98:	d204      	bcs.n	8014da4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = usartdiv;
 8014d9a:	687b      	ldr	r3, [r7, #4]
 8014d9c:	681b      	ldr	r3, [r3, #0]
 8014d9e:	693a      	ldr	r2, [r7, #16]
 8014da0:	60da      	str	r2, [r3, #12]
 8014da2:	e001      	b.n	8014da8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8014da4:	2301      	movs	r3, #1
 8014da6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8014da8:	687b      	ldr	r3, [r7, #4]
 8014daa:	2200      	movs	r2, #0
 8014dac:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8014dae:	687b      	ldr	r3, [r7, #4]
 8014db0:	2200      	movs	r2, #0
 8014db2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8014db4:	7fbb      	ldrb	r3, [r7, #30]
}
 8014db6:	4618      	mov	r0, r3
 8014db8:	3720      	adds	r7, #32
 8014dba:	46bd      	mov	sp, r7
 8014dbc:	bd80      	pop	{r7, pc}
 8014dbe:	bf00      	nop
 8014dc0:	00f42400 	.word	0x00f42400

08014dc4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8014dc4:	b480      	push	{r7}
 8014dc6:	b083      	sub	sp, #12
 8014dc8:	af00      	add	r7, sp, #0
 8014dca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8014dcc:	687b      	ldr	r3, [r7, #4]
 8014dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014dd0:	f003 0301 	and.w	r3, r3, #1
 8014dd4:	2b00      	cmp	r3, #0
 8014dd6:	d00a      	beq.n	8014dee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8014dd8:	687b      	ldr	r3, [r7, #4]
 8014dda:	681b      	ldr	r3, [r3, #0]
 8014ddc:	687a      	ldr	r2, [r7, #4]
 8014dde:	6812      	ldr	r2, [r2, #0]
 8014de0:	6852      	ldr	r2, [r2, #4]
 8014de2:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 8014de6:	687a      	ldr	r2, [r7, #4]
 8014de8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8014dea:	430a      	orrs	r2, r1
 8014dec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8014dee:	687b      	ldr	r3, [r7, #4]
 8014df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014df2:	f003 0302 	and.w	r3, r3, #2
 8014df6:	2b00      	cmp	r3, #0
 8014df8:	d00a      	beq.n	8014e10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8014dfa:	687b      	ldr	r3, [r7, #4]
 8014dfc:	681b      	ldr	r3, [r3, #0]
 8014dfe:	687a      	ldr	r2, [r7, #4]
 8014e00:	6812      	ldr	r2, [r2, #0]
 8014e02:	6852      	ldr	r2, [r2, #4]
 8014e04:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 8014e08:	687a      	ldr	r2, [r7, #4]
 8014e0a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8014e0c:	430a      	orrs	r2, r1
 8014e0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8014e10:	687b      	ldr	r3, [r7, #4]
 8014e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014e14:	f003 0304 	and.w	r3, r3, #4
 8014e18:	2b00      	cmp	r3, #0
 8014e1a:	d00a      	beq.n	8014e32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8014e1c:	687b      	ldr	r3, [r7, #4]
 8014e1e:	681b      	ldr	r3, [r3, #0]
 8014e20:	687a      	ldr	r2, [r7, #4]
 8014e22:	6812      	ldr	r2, [r2, #0]
 8014e24:	6852      	ldr	r2, [r2, #4]
 8014e26:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 8014e2a:	687a      	ldr	r2, [r7, #4]
 8014e2c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8014e2e:	430a      	orrs	r2, r1
 8014e30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8014e32:	687b      	ldr	r3, [r7, #4]
 8014e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014e36:	f003 0308 	and.w	r3, r3, #8
 8014e3a:	2b00      	cmp	r3, #0
 8014e3c:	d00a      	beq.n	8014e54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8014e3e:	687b      	ldr	r3, [r7, #4]
 8014e40:	681b      	ldr	r3, [r3, #0]
 8014e42:	687a      	ldr	r2, [r7, #4]
 8014e44:	6812      	ldr	r2, [r2, #0]
 8014e46:	6852      	ldr	r2, [r2, #4]
 8014e48:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 8014e4c:	687a      	ldr	r2, [r7, #4]
 8014e4e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8014e50:	430a      	orrs	r2, r1
 8014e52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8014e54:	687b      	ldr	r3, [r7, #4]
 8014e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014e58:	f003 0310 	and.w	r3, r3, #16
 8014e5c:	2b00      	cmp	r3, #0
 8014e5e:	d00a      	beq.n	8014e76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8014e60:	687b      	ldr	r3, [r7, #4]
 8014e62:	681b      	ldr	r3, [r3, #0]
 8014e64:	687a      	ldr	r2, [r7, #4]
 8014e66:	6812      	ldr	r2, [r2, #0]
 8014e68:	6892      	ldr	r2, [r2, #8]
 8014e6a:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 8014e6e:	687a      	ldr	r2, [r7, #4]
 8014e70:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8014e72:	430a      	orrs	r2, r1
 8014e74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8014e76:	687b      	ldr	r3, [r7, #4]
 8014e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014e7a:	f003 0320 	and.w	r3, r3, #32
 8014e7e:	2b00      	cmp	r3, #0
 8014e80:	d00a      	beq.n	8014e98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8014e82:	687b      	ldr	r3, [r7, #4]
 8014e84:	681b      	ldr	r3, [r3, #0]
 8014e86:	687a      	ldr	r2, [r7, #4]
 8014e88:	6812      	ldr	r2, [r2, #0]
 8014e8a:	6892      	ldr	r2, [r2, #8]
 8014e8c:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8014e90:	687a      	ldr	r2, [r7, #4]
 8014e92:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8014e94:	430a      	orrs	r2, r1
 8014e96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8014e98:	687b      	ldr	r3, [r7, #4]
 8014e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014e9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014ea0:	2b00      	cmp	r3, #0
 8014ea2:	d01a      	beq.n	8014eda <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8014ea4:	687b      	ldr	r3, [r7, #4]
 8014ea6:	681b      	ldr	r3, [r3, #0]
 8014ea8:	687a      	ldr	r2, [r7, #4]
 8014eaa:	6812      	ldr	r2, [r2, #0]
 8014eac:	6852      	ldr	r2, [r2, #4]
 8014eae:	f422 1180 	bic.w	r1, r2, #1048576	; 0x100000
 8014eb2:	687a      	ldr	r2, [r7, #4]
 8014eb4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8014eb6:	430a      	orrs	r2, r1
 8014eb8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8014eba:	687b      	ldr	r3, [r7, #4]
 8014ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014ebe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8014ec2:	d10a      	bne.n	8014eda <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8014ec4:	687b      	ldr	r3, [r7, #4]
 8014ec6:	681b      	ldr	r3, [r3, #0]
 8014ec8:	687a      	ldr	r2, [r7, #4]
 8014eca:	6812      	ldr	r2, [r2, #0]
 8014ecc:	6852      	ldr	r2, [r2, #4]
 8014ece:	f422 01c0 	bic.w	r1, r2, #6291456	; 0x600000
 8014ed2:	687a      	ldr	r2, [r7, #4]
 8014ed4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8014ed6:	430a      	orrs	r2, r1
 8014ed8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8014eda:	687b      	ldr	r3, [r7, #4]
 8014edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014ee2:	2b00      	cmp	r3, #0
 8014ee4:	d00a      	beq.n	8014efc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8014ee6:	687b      	ldr	r3, [r7, #4]
 8014ee8:	681b      	ldr	r3, [r3, #0]
 8014eea:	687a      	ldr	r2, [r7, #4]
 8014eec:	6812      	ldr	r2, [r2, #0]
 8014eee:	6852      	ldr	r2, [r2, #4]
 8014ef0:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 8014ef4:	687a      	ldr	r2, [r7, #4]
 8014ef6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8014ef8:	430a      	orrs	r2, r1
 8014efa:	605a      	str	r2, [r3, #4]
  }
}
 8014efc:	bf00      	nop
 8014efe:	370c      	adds	r7, #12
 8014f00:	46bd      	mov	sp, r7
 8014f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f06:	4770      	bx	lr

08014f08 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8014f08:	b580      	push	{r7, lr}
 8014f0a:	b086      	sub	sp, #24
 8014f0c:	af02      	add	r7, sp, #8
 8014f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014f10:	687b      	ldr	r3, [r7, #4]
 8014f12:	2200      	movs	r2, #0
 8014f14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8014f18:	f7fc f9d4 	bl	80112c4 <HAL_GetTick>
 8014f1c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8014f1e:	687b      	ldr	r3, [r7, #4]
 8014f20:	681b      	ldr	r3, [r3, #0]
 8014f22:	681b      	ldr	r3, [r3, #0]
 8014f24:	f003 0308 	and.w	r3, r3, #8
 8014f28:	2b08      	cmp	r3, #8
 8014f2a:	d10e      	bne.n	8014f4a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8014f2c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8014f30:	9300      	str	r3, [sp, #0]
 8014f32:	68fb      	ldr	r3, [r7, #12]
 8014f34:	2200      	movs	r2, #0
 8014f36:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8014f3a:	6878      	ldr	r0, [r7, #4]
 8014f3c:	f000 f82d 	bl	8014f9a <UART_WaitOnFlagUntilTimeout>
 8014f40:	4603      	mov	r3, r0
 8014f42:	2b00      	cmp	r3, #0
 8014f44:	d001      	beq.n	8014f4a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8014f46:	2303      	movs	r3, #3
 8014f48:	e023      	b.n	8014f92 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8014f4a:	687b      	ldr	r3, [r7, #4]
 8014f4c:	681b      	ldr	r3, [r3, #0]
 8014f4e:	681b      	ldr	r3, [r3, #0]
 8014f50:	f003 0304 	and.w	r3, r3, #4
 8014f54:	2b04      	cmp	r3, #4
 8014f56:	d10e      	bne.n	8014f76 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8014f58:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8014f5c:	9300      	str	r3, [sp, #0]
 8014f5e:	68fb      	ldr	r3, [r7, #12]
 8014f60:	2200      	movs	r2, #0
 8014f62:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8014f66:	6878      	ldr	r0, [r7, #4]
 8014f68:	f000 f817 	bl	8014f9a <UART_WaitOnFlagUntilTimeout>
 8014f6c:	4603      	mov	r3, r0
 8014f6e:	2b00      	cmp	r3, #0
 8014f70:	d001      	beq.n	8014f76 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8014f72:	2303      	movs	r3, #3
 8014f74:	e00d      	b.n	8014f92 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8014f76:	687b      	ldr	r3, [r7, #4]
 8014f78:	2220      	movs	r2, #32
 8014f7a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8014f7c:	687b      	ldr	r3, [r7, #4]
 8014f7e:	2220      	movs	r2, #32
 8014f80:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014f82:	687b      	ldr	r3, [r7, #4]
 8014f84:	2200      	movs	r2, #0
 8014f86:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8014f88:	687b      	ldr	r3, [r7, #4]
 8014f8a:	2200      	movs	r2, #0
 8014f8c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8014f90:	2300      	movs	r3, #0
}
 8014f92:	4618      	mov	r0, r3
 8014f94:	3710      	adds	r7, #16
 8014f96:	46bd      	mov	sp, r7
 8014f98:	bd80      	pop	{r7, pc}

08014f9a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8014f9a:	b580      	push	{r7, lr}
 8014f9c:	b084      	sub	sp, #16
 8014f9e:	af00      	add	r7, sp, #0
 8014fa0:	60f8      	str	r0, [r7, #12]
 8014fa2:	60b9      	str	r1, [r7, #8]
 8014fa4:	603b      	str	r3, [r7, #0]
 8014fa6:	4613      	mov	r3, r2
 8014fa8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8014faa:	e05e      	b.n	801506a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8014fac:	69bb      	ldr	r3, [r7, #24]
 8014fae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014fb2:	d05a      	beq.n	801506a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8014fb4:	f7fc f986 	bl	80112c4 <HAL_GetTick>
 8014fb8:	4602      	mov	r2, r0
 8014fba:	683b      	ldr	r3, [r7, #0]
 8014fbc:	1ad2      	subs	r2, r2, r3
 8014fbe:	69bb      	ldr	r3, [r7, #24]
 8014fc0:	429a      	cmp	r2, r3
 8014fc2:	d802      	bhi.n	8014fca <UART_WaitOnFlagUntilTimeout+0x30>
 8014fc4:	69bb      	ldr	r3, [r7, #24]
 8014fc6:	2b00      	cmp	r3, #0
 8014fc8:	d11b      	bne.n	8015002 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8014fca:	68fb      	ldr	r3, [r7, #12]
 8014fcc:	681b      	ldr	r3, [r3, #0]
 8014fce:	68fa      	ldr	r2, [r7, #12]
 8014fd0:	6812      	ldr	r2, [r2, #0]
 8014fd2:	6812      	ldr	r2, [r2, #0]
 8014fd4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8014fd8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014fda:	68fb      	ldr	r3, [r7, #12]
 8014fdc:	681b      	ldr	r3, [r3, #0]
 8014fde:	68fa      	ldr	r2, [r7, #12]
 8014fe0:	6812      	ldr	r2, [r2, #0]
 8014fe2:	6892      	ldr	r2, [r2, #8]
 8014fe4:	f022 0201 	bic.w	r2, r2, #1
 8014fe8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8014fea:	68fb      	ldr	r3, [r7, #12]
 8014fec:	2220      	movs	r2, #32
 8014fee:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8014ff0:	68fb      	ldr	r3, [r7, #12]
 8014ff2:	2220      	movs	r2, #32
 8014ff4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8014ff6:	68fb      	ldr	r3, [r7, #12]
 8014ff8:	2200      	movs	r2, #0
 8014ffa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8014ffe:	2303      	movs	r3, #3
 8015000:	e043      	b.n	801508a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8015002:	68fb      	ldr	r3, [r7, #12]
 8015004:	681b      	ldr	r3, [r3, #0]
 8015006:	681b      	ldr	r3, [r3, #0]
 8015008:	f003 0304 	and.w	r3, r3, #4
 801500c:	2b00      	cmp	r3, #0
 801500e:	d02c      	beq.n	801506a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8015010:	68fb      	ldr	r3, [r7, #12]
 8015012:	681b      	ldr	r3, [r3, #0]
 8015014:	69db      	ldr	r3, [r3, #28]
 8015016:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801501a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801501e:	d124      	bne.n	801506a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8015020:	68fb      	ldr	r3, [r7, #12]
 8015022:	681b      	ldr	r3, [r3, #0]
 8015024:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015028:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 801502a:	68fb      	ldr	r3, [r7, #12]
 801502c:	681b      	ldr	r3, [r3, #0]
 801502e:	68fa      	ldr	r2, [r7, #12]
 8015030:	6812      	ldr	r2, [r2, #0]
 8015032:	6812      	ldr	r2, [r2, #0]
 8015034:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8015038:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801503a:	68fb      	ldr	r3, [r7, #12]
 801503c:	681b      	ldr	r3, [r3, #0]
 801503e:	68fa      	ldr	r2, [r7, #12]
 8015040:	6812      	ldr	r2, [r2, #0]
 8015042:	6892      	ldr	r2, [r2, #8]
 8015044:	f022 0201 	bic.w	r2, r2, #1
 8015048:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 801504a:	68fb      	ldr	r3, [r7, #12]
 801504c:	2220      	movs	r2, #32
 801504e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8015050:	68fb      	ldr	r3, [r7, #12]
 8015052:	2220      	movs	r2, #32
 8015054:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8015056:	68fb      	ldr	r3, [r7, #12]
 8015058:	2220      	movs	r2, #32
 801505a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801505e:	68fb      	ldr	r3, [r7, #12]
 8015060:	2200      	movs	r2, #0
 8015062:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8015066:	2303      	movs	r3, #3
 8015068:	e00f      	b.n	801508a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801506a:	68fb      	ldr	r3, [r7, #12]
 801506c:	681b      	ldr	r3, [r3, #0]
 801506e:	69da      	ldr	r2, [r3, #28]
 8015070:	68bb      	ldr	r3, [r7, #8]
 8015072:	401a      	ands	r2, r3
 8015074:	68bb      	ldr	r3, [r7, #8]
 8015076:	429a      	cmp	r2, r3
 8015078:	bf0c      	ite	eq
 801507a:	2301      	moveq	r3, #1
 801507c:	2300      	movne	r3, #0
 801507e:	b2db      	uxtb	r3, r3
 8015080:	461a      	mov	r2, r3
 8015082:	79fb      	ldrb	r3, [r7, #7]
 8015084:	429a      	cmp	r2, r3
 8015086:	d091      	beq.n	8014fac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8015088:	2300      	movs	r3, #0
}
 801508a:	4618      	mov	r0, r3
 801508c:	3710      	adds	r7, #16
 801508e:	46bd      	mov	sp, r7
 8015090:	bd80      	pop	{r7, pc}
	...

08015094 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8015094:	b580      	push	{r7, lr}
 8015096:	b08e      	sub	sp, #56	; 0x38
 8015098:	af00      	add	r7, sp, #0
 801509a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801509c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80150a0:	2200      	movs	r2, #0
 80150a2:	601a      	str	r2, [r3, #0]
 80150a4:	605a      	str	r2, [r3, #4]
 80150a6:	609a      	str	r2, [r3, #8]
 80150a8:	60da      	str	r2, [r3, #12]
 80150aa:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80150ac:	687b      	ldr	r3, [r7, #4]
 80150ae:	681b      	ldr	r3, [r3, #0]
 80150b0:	4a52      	ldr	r2, [pc, #328]	; (80151fc <HAL_ETH_MspInit+0x168>)
 80150b2:	4293      	cmp	r3, r2
 80150b4:	f040 809e 	bne.w	80151f4 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80150b8:	4a51      	ldr	r2, [pc, #324]	; (8015200 <HAL_ETH_MspInit+0x16c>)
 80150ba:	4b51      	ldr	r3, [pc, #324]	; (8015200 <HAL_ETH_MspInit+0x16c>)
 80150bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80150be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80150c2:	6313      	str	r3, [r2, #48]	; 0x30
 80150c4:	4b4e      	ldr	r3, [pc, #312]	; (8015200 <HAL_ETH_MspInit+0x16c>)
 80150c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80150c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80150cc:	623b      	str	r3, [r7, #32]
 80150ce:	6a3b      	ldr	r3, [r7, #32]
 80150d0:	4a4b      	ldr	r2, [pc, #300]	; (8015200 <HAL_ETH_MspInit+0x16c>)
 80150d2:	4b4b      	ldr	r3, [pc, #300]	; (8015200 <HAL_ETH_MspInit+0x16c>)
 80150d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80150d6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80150da:	6313      	str	r3, [r2, #48]	; 0x30
 80150dc:	4b48      	ldr	r3, [pc, #288]	; (8015200 <HAL_ETH_MspInit+0x16c>)
 80150de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80150e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80150e4:	61fb      	str	r3, [r7, #28]
 80150e6:	69fb      	ldr	r3, [r7, #28]
 80150e8:	4a45      	ldr	r2, [pc, #276]	; (8015200 <HAL_ETH_MspInit+0x16c>)
 80150ea:	4b45      	ldr	r3, [pc, #276]	; (8015200 <HAL_ETH_MspInit+0x16c>)
 80150ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80150ee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80150f2:	6313      	str	r3, [r2, #48]	; 0x30
 80150f4:	4b42      	ldr	r3, [pc, #264]	; (8015200 <HAL_ETH_MspInit+0x16c>)
 80150f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80150f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80150fc:	61bb      	str	r3, [r7, #24]
 80150fe:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8015100:	4a3f      	ldr	r2, [pc, #252]	; (8015200 <HAL_ETH_MspInit+0x16c>)
 8015102:	4b3f      	ldr	r3, [pc, #252]	; (8015200 <HAL_ETH_MspInit+0x16c>)
 8015104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015106:	f043 0304 	orr.w	r3, r3, #4
 801510a:	6313      	str	r3, [r2, #48]	; 0x30
 801510c:	4b3c      	ldr	r3, [pc, #240]	; (8015200 <HAL_ETH_MspInit+0x16c>)
 801510e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015110:	f003 0304 	and.w	r3, r3, #4
 8015114:	617b      	str	r3, [r7, #20]
 8015116:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8015118:	4a39      	ldr	r2, [pc, #228]	; (8015200 <HAL_ETH_MspInit+0x16c>)
 801511a:	4b39      	ldr	r3, [pc, #228]	; (8015200 <HAL_ETH_MspInit+0x16c>)
 801511c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801511e:	f043 0301 	orr.w	r3, r3, #1
 8015122:	6313      	str	r3, [r2, #48]	; 0x30
 8015124:	4b36      	ldr	r3, [pc, #216]	; (8015200 <HAL_ETH_MspInit+0x16c>)
 8015126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015128:	f003 0301 	and.w	r3, r3, #1
 801512c:	613b      	str	r3, [r7, #16]
 801512e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8015130:	4a33      	ldr	r2, [pc, #204]	; (8015200 <HAL_ETH_MspInit+0x16c>)
 8015132:	4b33      	ldr	r3, [pc, #204]	; (8015200 <HAL_ETH_MspInit+0x16c>)
 8015134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015136:	f043 0302 	orr.w	r3, r3, #2
 801513a:	6313      	str	r3, [r2, #48]	; 0x30
 801513c:	4b30      	ldr	r3, [pc, #192]	; (8015200 <HAL_ETH_MspInit+0x16c>)
 801513e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015140:	f003 0302 	and.w	r3, r3, #2
 8015144:	60fb      	str	r3, [r7, #12]
 8015146:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8015148:	4a2d      	ldr	r2, [pc, #180]	; (8015200 <HAL_ETH_MspInit+0x16c>)
 801514a:	4b2d      	ldr	r3, [pc, #180]	; (8015200 <HAL_ETH_MspInit+0x16c>)
 801514c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801514e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015152:	6313      	str	r3, [r2, #48]	; 0x30
 8015154:	4b2a      	ldr	r3, [pc, #168]	; (8015200 <HAL_ETH_MspInit+0x16c>)
 8015156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015158:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801515c:	60bb      	str	r3, [r7, #8]
 801515e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8015160:	2332      	movs	r3, #50	; 0x32
 8015162:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015164:	2302      	movs	r3, #2
 8015166:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015168:	2300      	movs	r3, #0
 801516a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801516c:	2303      	movs	r3, #3
 801516e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8015170:	230b      	movs	r3, #11
 8015172:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8015174:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015178:	4619      	mov	r1, r3
 801517a:	4822      	ldr	r0, [pc, #136]	; (8015204 <HAL_ETH_MspInit+0x170>)
 801517c:	f7fd fa18 	bl	80125b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8015180:	2386      	movs	r3, #134	; 0x86
 8015182:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015184:	2302      	movs	r3, #2
 8015186:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015188:	2300      	movs	r3, #0
 801518a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801518c:	2303      	movs	r3, #3
 801518e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8015190:	230b      	movs	r3, #11
 8015192:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015194:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015198:	4619      	mov	r1, r3
 801519a:	481b      	ldr	r0, [pc, #108]	; (8015208 <HAL_ETH_MspInit+0x174>)
 801519c:	f7fd fa08 	bl	80125b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80151a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80151a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80151a6:	2302      	movs	r3, #2
 80151a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80151aa:	2300      	movs	r3, #0
 80151ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80151ae:	2303      	movs	r3, #3
 80151b0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80151b2:	230b      	movs	r3, #11
 80151b4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80151b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80151ba:	4619      	mov	r1, r3
 80151bc:	4813      	ldr	r0, [pc, #76]	; (801520c <HAL_ETH_MspInit+0x178>)
 80151be:	f7fd f9f7 	bl	80125b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80151c2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80151c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80151c8:	2302      	movs	r3, #2
 80151ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80151cc:	2300      	movs	r3, #0
 80151ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80151d0:	2303      	movs	r3, #3
 80151d2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80151d4:	230b      	movs	r3, #11
 80151d6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80151d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80151dc:	4619      	mov	r1, r3
 80151de:	480c      	ldr	r0, [pc, #48]	; (8015210 <HAL_ETH_MspInit+0x17c>)
 80151e0:	f7fd f9e6 	bl	80125b0 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 80151e4:	2200      	movs	r2, #0
 80151e6:	2105      	movs	r1, #5
 80151e8:	203d      	movs	r0, #61	; 0x3d
 80151ea:	f7fc f94f 	bl	801148c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80151ee:	203d      	movs	r0, #61	; 0x3d
 80151f0:	f7fc f968 	bl	80114c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80151f4:	bf00      	nop
 80151f6:	3738      	adds	r7, #56	; 0x38
 80151f8:	46bd      	mov	sp, r7
 80151fa:	bd80      	pop	{r7, pc}
 80151fc:	40028000 	.word	0x40028000
 8015200:	40023800 	.word	0x40023800
 8015204:	40020800 	.word	0x40020800
 8015208:	40020000 	.word	0x40020000
 801520c:	40020400 	.word	0x40020400
 8015210:	40021800 	.word	0x40021800

08015214 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8015214:	b580      	push	{r7, lr}
 8015216:	b082      	sub	sp, #8
 8015218:	af00      	add	r7, sp, #0
 801521a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 801521c:	4b04      	ldr	r3, [pc, #16]	; (8015230 <HAL_ETH_RxCpltCallback+0x1c>)
 801521e:	681b      	ldr	r3, [r3, #0]
 8015220:	4618      	mov	r0, r3
 8015222:	f000 fc3b 	bl	8015a9c <osSemaphoreRelease>
}
 8015226:	bf00      	nop
 8015228:	3708      	adds	r7, #8
 801522a:	46bd      	mov	sp, r7
 801522c:	bd80      	pop	{r7, pc}
 801522e:	bf00      	nop
 8015230:	20000348 	.word	0x20000348

08015234 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{ 
 8015234:	b5b0      	push	{r4, r5, r7, lr}
 8015236:	b090      	sub	sp, #64	; 0x40
 8015238:	af00      	add	r7, sp, #0
 801523a:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 801523c:	2300      	movs	r3, #0
 801523e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_StatusTypeDef hal_eth_init_status;
  
/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8015240:	4b5c      	ldr	r3, [pc, #368]	; (80153b4 <low_level_init+0x180>)
 8015242:	4a5d      	ldr	r2, [pc, #372]	; (80153b8 <low_level_init+0x184>)
 8015244:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8015246:	4b5b      	ldr	r3, [pc, #364]	; (80153b4 <low_level_init+0x180>)
 8015248:	2201      	movs	r2, #1
 801524a:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 801524c:	4b59      	ldr	r3, [pc, #356]	; (80153b4 <low_level_init+0x180>)
 801524e:	2200      	movs	r2, #0
 8015250:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8015252:	2300      	movs	r3, #0
 8015254:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 8015258:	2380      	movs	r3, #128	; 0x80
 801525a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 801525e:	23e1      	movs	r3, #225	; 0xe1
 8015260:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 8015264:	2300      	movs	r3, #0
 8015266:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x00;
 801526a:	2300      	movs	r3, #0
 801526c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x00;
 8015270:	2300      	movs	r3, #0
 8015272:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 8015276:	4a4f      	ldr	r2, [pc, #316]	; (80153b4 <low_level_init+0x180>)
 8015278:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801527c:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 801527e:	4b4d      	ldr	r3, [pc, #308]	; (80153b4 <low_level_init+0x180>)
 8015280:	2201      	movs	r2, #1
 8015282:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8015284:	4b4b      	ldr	r3, [pc, #300]	; (80153b4 <low_level_init+0x180>)
 8015286:	2200      	movs	r2, #0
 8015288:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 801528a:	4b4a      	ldr	r3, [pc, #296]	; (80153b4 <low_level_init+0x180>)
 801528c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8015290:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8015292:	4848      	ldr	r0, [pc, #288]	; (80153b4 <low_level_init+0x180>)
 8015294:	f7fc f99c 	bl	80115d0 <HAL_ETH_Init>
 8015298:	4603      	mov	r3, r0
 801529a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 801529e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80152a2:	2b00      	cmp	r3, #0
 80152a4:	d108      	bne.n	80152b8 <low_level_init+0x84>
  {
    /* Set netif link flag */  
    netif->flags |= NETIF_FLAG_LINK_UP;
 80152a6:	687b      	ldr	r3, [r7, #4]
 80152a8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80152ac:	f043 0304 	orr.w	r3, r3, #4
 80152b0:	b2da      	uxtb	r2, r3
 80152b2:	687b      	ldr	r3, [r7, #4]
 80152b4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 80152b8:	2304      	movs	r3, #4
 80152ba:	4a40      	ldr	r2, [pc, #256]	; (80153bc <low_level_init+0x188>)
 80152bc:	4940      	ldr	r1, [pc, #256]	; (80153c0 <low_level_init+0x18c>)
 80152be:	483d      	ldr	r0, [pc, #244]	; (80153b4 <low_level_init+0x180>)
 80152c0:	f7fc fb22 	bl	8011908 <HAL_ETH_DMATxDescListInit>
     
  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 80152c4:	2304      	movs	r3, #4
 80152c6:	4a3f      	ldr	r2, [pc, #252]	; (80153c4 <low_level_init+0x190>)
 80152c8:	493f      	ldr	r1, [pc, #252]	; (80153c8 <low_level_init+0x194>)
 80152ca:	483a      	ldr	r0, [pc, #232]	; (80153b4 <low_level_init+0x180>)
 80152cc:	f7fc fb85 	bl	80119da <HAL_ETH_DMARxDescListInit>
 
#if LWIP_ARP || LWIP_ETHERNET 

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80152d0:	687b      	ldr	r3, [r7, #4]
 80152d2:	2206      	movs	r2, #6
 80152d4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  
  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80152d8:	4b36      	ldr	r3, [pc, #216]	; (80153b4 <low_level_init+0x180>)
 80152da:	695b      	ldr	r3, [r3, #20]
 80152dc:	781a      	ldrb	r2, [r3, #0]
 80152de:	687b      	ldr	r3, [r7, #4]
 80152e0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80152e4:	4b33      	ldr	r3, [pc, #204]	; (80153b4 <low_level_init+0x180>)
 80152e6:	695b      	ldr	r3, [r3, #20]
 80152e8:	785a      	ldrb	r2, [r3, #1]
 80152ea:	687b      	ldr	r3, [r7, #4]
 80152ec:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80152f0:	4b30      	ldr	r3, [pc, #192]	; (80153b4 <low_level_init+0x180>)
 80152f2:	695b      	ldr	r3, [r3, #20]
 80152f4:	789a      	ldrb	r2, [r3, #2]
 80152f6:	687b      	ldr	r3, [r7, #4]
 80152f8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80152fc:	4b2d      	ldr	r3, [pc, #180]	; (80153b4 <low_level_init+0x180>)
 80152fe:	695b      	ldr	r3, [r3, #20]
 8015300:	78da      	ldrb	r2, [r3, #3]
 8015302:	687b      	ldr	r3, [r7, #4]
 8015304:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8015308:	4b2a      	ldr	r3, [pc, #168]	; (80153b4 <low_level_init+0x180>)
 801530a:	695b      	ldr	r3, [r3, #20]
 801530c:	791a      	ldrb	r2, [r3, #4]
 801530e:	687b      	ldr	r3, [r7, #4]
 8015310:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8015314:	4b27      	ldr	r3, [pc, #156]	; (80153b4 <low_level_init+0x180>)
 8015316:	695b      	ldr	r3, [r3, #20]
 8015318:	795a      	ldrb	r2, [r3, #5]
 801531a:	687b      	ldr	r3, [r7, #4]
 801531c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  
  /* maximum transfer unit */
  netif->mtu = 1500;
 8015320:	687b      	ldr	r3, [r7, #4]
 8015322:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8015326:	851a      	strh	r2, [r3, #40]	; 0x28
  
  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8015328:	687b      	ldr	r3, [r7, #4]
 801532a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801532e:	f043 030a 	orr.w	r3, r3, #10
 8015332:	b2da      	uxtb	r2, r3
 8015334:	687b      	ldr	r3, [r7, #4]
 8015336:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else 
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */
  
/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 801533a:	2300      	movs	r3, #0
 801533c:	62bb      	str	r3, [r7, #40]	; 0x28
 801533e:	2300      	movs	r3, #0
 8015340:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 8015342:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8015346:	2101      	movs	r1, #1
 8015348:	4618      	mov	r0, r3
 801534a:	f000 fb25 	bl	8015998 <osSemaphoreCreate>
 801534e:	4602      	mov	r2, r0
 8015350:	4b1e      	ldr	r3, [pc, #120]	; (80153cc <low_level_init+0x198>)
 8015352:	601a      	str	r2, [r3, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8015354:	4b1e      	ldr	r3, [pc, #120]	; (80153d0 <low_level_init+0x19c>)
 8015356:	f107 040c 	add.w	r4, r7, #12
 801535a:	461d      	mov	r5, r3
 801535c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801535e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015360:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8015364:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8015368:	f107 030c 	add.w	r3, r7, #12
 801536c:	6879      	ldr	r1, [r7, #4]
 801536e:	4618      	mov	r0, r3
 8015370:	f000 fa2a 	bl	80157c8 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */  
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8015374:	480f      	ldr	r0, [pc, #60]	; (80153b4 <low_level_init+0x180>)
 8015376:	f7fc fe58 	bl	801202a <HAL_ETH_Start>
    
/* USER CODE END PHY_PRE_CONFIG */
  

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 801537a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801537e:	461a      	mov	r2, r3
 8015380:	211d      	movs	r1, #29
 8015382:	480c      	ldr	r0, [pc, #48]	; (80153b4 <low_level_init+0x180>)
 8015384:	f7fc fd83 	bl	8011e8e <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8015388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801538a:	f043 030b 	orr.w	r3, r3, #11
 801538e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */ 
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8015390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015392:	461a      	mov	r2, r3
 8015394:	211d      	movs	r1, #29
 8015396:	4807      	ldr	r0, [pc, #28]	; (80153b4 <low_level_init+0x180>)
 8015398:	f7fc fde1 	bl	8011f5e <HAL_ETH_WritePHYRegister>
  
  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 801539c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80153a0:	461a      	mov	r2, r3
 80153a2:	211d      	movs	r1, #29
 80153a4:	4803      	ldr	r0, [pc, #12]	; (80153b4 <low_level_init+0x180>)
 80153a6:	f7fc fd72 	bl	8011e8e <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */ 
    
/* USER CODE END LOW_LEVEL_INIT */
}
 80153aa:	bf00      	nop
 80153ac:	3740      	adds	r7, #64	; 0x40
 80153ae:	46bd      	mov	sp, r7
 80153b0:	bdb0      	pop	{r4, r5, r7, pc}
 80153b2:	bf00      	nop
 80153b4:	2001b1e0 	.word	0x2001b1e0
 80153b8:	40028000 	.word	0x40028000
 80153bc:	2001b228 	.word	0x2001b228
 80153c0:	20019910 	.word	0x20019910
 80153c4:	20019990 	.word	0x20019990
 80153c8:	2001b160 	.word	0x2001b160
 80153cc:	20000348 	.word	0x20000348
 80153d0:	08027844 	.word	0x08027844

080153d4 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80153d4:	b580      	push	{r7, lr}
 80153d6:	b08a      	sub	sp, #40	; 0x28
 80153d8:	af00      	add	r7, sp, #0
 80153da:	6078      	str	r0, [r7, #4]
 80153dc:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 80153de:	4b4b      	ldr	r3, [pc, #300]	; (801550c <low_level_output+0x138>)
 80153e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80153e2:	689b      	ldr	r3, [r3, #8]
 80153e4:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 80153e6:	2300      	movs	r3, #0
 80153e8:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 80153ea:	2300      	movs	r3, #0
 80153ec:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 80153ee:	2300      	movs	r3, #0
 80153f0:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 80153f2:	2300      	movs	r3, #0
 80153f4:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 80153f6:	4b45      	ldr	r3, [pc, #276]	; (801550c <low_level_output+0x138>)
 80153f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80153fa:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 80153fc:	2300      	movs	r3, #0
 80153fe:	613b      	str	r3, [r7, #16]
  
  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8015400:	683b      	ldr	r3, [r7, #0]
 8015402:	623b      	str	r3, [r7, #32]
 8015404:	e05a      	b.n	80154bc <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8015406:	69bb      	ldr	r3, [r7, #24]
 8015408:	681b      	ldr	r3, [r3, #0]
 801540a:	2b00      	cmp	r3, #0
 801540c:	da03      	bge.n	8015416 <low_level_output+0x42>
      {
        errval = ERR_USE;
 801540e:	23f8      	movs	r3, #248	; 0xf8
 8015410:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8015414:	e05c      	b.n	80154d0 <low_level_output+0xfc>
      }
    
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8015416:	6a3b      	ldr	r3, [r7, #32]
 8015418:	895b      	ldrh	r3, [r3, #10]
 801541a:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 801541c:	2300      	movs	r3, #0
 801541e:	60bb      	str	r3, [r7, #8]
    
      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8015420:	e02f      	b.n	8015482 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8015422:	69fa      	ldr	r2, [r7, #28]
 8015424:	693b      	ldr	r3, [r7, #16]
 8015426:	18d0      	adds	r0, r2, r3
 8015428:	6a3b      	ldr	r3, [r7, #32]
 801542a:	685a      	ldr	r2, [r3, #4]
 801542c:	68bb      	ldr	r3, [r7, #8]
 801542e:	18d1      	adds	r1, r2, r3
 8015430:	693a      	ldr	r2, [r7, #16]
 8015432:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8015436:	1a9b      	subs	r3, r3, r2
 8015438:	461a      	mov	r2, r3
 801543a:	f010 fea0 	bl	802617e <memcpy>
      
        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 801543e:	69bb      	ldr	r3, [r7, #24]
 8015440:	68db      	ldr	r3, [r3, #12]
 8015442:	61bb      	str	r3, [r7, #24]
      
        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8015444:	69bb      	ldr	r3, [r7, #24]
 8015446:	681b      	ldr	r3, [r3, #0]
 8015448:	2b00      	cmp	r3, #0
 801544a:	da03      	bge.n	8015454 <low_level_output+0x80>
        {
          errval = ERR_USE;
 801544c:	23f8      	movs	r3, #248	; 0xf8
 801544e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8015452:	e03d      	b.n	80154d0 <low_level_output+0xfc>
        }
      
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8015454:	69bb      	ldr	r3, [r7, #24]
 8015456:	689b      	ldr	r3, [r3, #8]
 8015458:	61fb      	str	r3, [r7, #28]
      
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 801545a:	693a      	ldr	r2, [r7, #16]
 801545c:	68fb      	ldr	r3, [r7, #12]
 801545e:	4413      	add	r3, r2
 8015460:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8015464:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8015466:	68ba      	ldr	r2, [r7, #8]
 8015468:	693b      	ldr	r3, [r7, #16]
 801546a:	1ad3      	subs	r3, r2, r3
 801546c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8015470:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8015472:	697a      	ldr	r2, [r7, #20]
 8015474:	693b      	ldr	r3, [r7, #16]
 8015476:	1ad3      	subs	r3, r2, r3
 8015478:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 801547c:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 801547e:	2300      	movs	r3, #0
 8015480:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8015482:	68fa      	ldr	r2, [r7, #12]
 8015484:	693b      	ldr	r3, [r7, #16]
 8015486:	4413      	add	r3, r2
 8015488:	f240 52f4 	movw	r2, #1524	; 0x5f4
 801548c:	4293      	cmp	r3, r2
 801548e:	d8c8      	bhi.n	8015422 <low_level_output+0x4e>
      }
    
      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8015490:	69fa      	ldr	r2, [r7, #28]
 8015492:	693b      	ldr	r3, [r7, #16]
 8015494:	18d0      	adds	r0, r2, r3
 8015496:	6a3b      	ldr	r3, [r7, #32]
 8015498:	685a      	ldr	r2, [r3, #4]
 801549a:	68bb      	ldr	r3, [r7, #8]
 801549c:	4413      	add	r3, r2
 801549e:	68fa      	ldr	r2, [r7, #12]
 80154a0:	4619      	mov	r1, r3
 80154a2:	f010 fe6c 	bl	802617e <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80154a6:	693a      	ldr	r2, [r7, #16]
 80154a8:	68fb      	ldr	r3, [r7, #12]
 80154aa:	4413      	add	r3, r2
 80154ac:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 80154ae:	697a      	ldr	r2, [r7, #20]
 80154b0:	68fb      	ldr	r3, [r7, #12]
 80154b2:	4413      	add	r3, r2
 80154b4:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 80154b6:	6a3b      	ldr	r3, [r7, #32]
 80154b8:	681b      	ldr	r3, [r3, #0]
 80154ba:	623b      	str	r3, [r7, #32]
 80154bc:	6a3b      	ldr	r3, [r7, #32]
 80154be:	2b00      	cmp	r3, #0
 80154c0:	d1a1      	bne.n	8015406 <low_level_output+0x32>
    }
  
  /* Prepare transmit descriptors to give to DMA */ 
  HAL_ETH_TransmitFrame(&heth, framelength);
 80154c2:	6979      	ldr	r1, [r7, #20]
 80154c4:	4811      	ldr	r0, [pc, #68]	; (801550c <low_level_output+0x138>)
 80154c6:	f7fc faf5 	bl	8011ab4 <HAL_ETH_TransmitFrame>
  
  errval = ERR_OK;
 80154ca:	2300      	movs	r3, #0
 80154cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
error:
  
  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 80154d0:	4b0e      	ldr	r3, [pc, #56]	; (801550c <low_level_output+0x138>)
 80154d2:	681a      	ldr	r2, [r3, #0]
 80154d4:	f241 0314 	movw	r3, #4116	; 0x1014
 80154d8:	4413      	add	r3, r2
 80154da:	681b      	ldr	r3, [r3, #0]
 80154dc:	f003 0320 	and.w	r3, r3, #32
 80154e0:	2b00      	cmp	r3, #0
 80154e2:	d00d      	beq.n	8015500 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 80154e4:	4b09      	ldr	r3, [pc, #36]	; (801550c <low_level_output+0x138>)
 80154e6:	681a      	ldr	r2, [r3, #0]
 80154e8:	f241 0314 	movw	r3, #4116	; 0x1014
 80154ec:	4413      	add	r3, r2
 80154ee:	2220      	movs	r2, #32
 80154f0:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 80154f2:	4b06      	ldr	r3, [pc, #24]	; (801550c <low_level_output+0x138>)
 80154f4:	681a      	ldr	r2, [r3, #0]
 80154f6:	f241 0304 	movw	r3, #4100	; 0x1004
 80154fa:	4413      	add	r3, r2
 80154fc:	2200      	movs	r2, #0
 80154fe:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8015500:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8015504:	4618      	mov	r0, r3
 8015506:	3728      	adds	r7, #40	; 0x28
 8015508:	46bd      	mov	sp, r7
 801550a:	bd80      	pop	{r7, pc}
 801550c:	2001b1e0 	.word	0x2001b1e0

08015510 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8015510:	b580      	push	{r7, lr}
 8015512:	b08c      	sub	sp, #48	; 0x30
 8015514:	af00      	add	r7, sp, #0
 8015516:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8015518:	2300      	movs	r3, #0
 801551a:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 801551c:	2300      	movs	r3, #0
 801551e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8015520:	2300      	movs	r3, #0
 8015522:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8015524:	2300      	movs	r3, #0
 8015526:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8015528:	2300      	movs	r3, #0
 801552a:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 801552c:	2300      	movs	r3, #0
 801552e:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8015530:	2300      	movs	r3, #0
 8015532:	613b      	str	r3, [r7, #16]
  

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8015534:	484f      	ldr	r0, [pc, #316]	; (8015674 <low_level_input+0x164>)
 8015536:	f7fc fba7 	bl	8011c88 <HAL_ETH_GetReceivedFrame_IT>
 801553a:	4603      	mov	r3, r0
 801553c:	2b00      	cmp	r3, #0
 801553e:	d001      	beq.n	8015544 <low_level_input+0x34>
  
    return NULL;
 8015540:	2300      	movs	r3, #0
 8015542:	e092      	b.n	801566a <low_level_input+0x15a>
  
  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8015544:	4b4b      	ldr	r3, [pc, #300]	; (8015674 <low_level_input+0x164>)
 8015546:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015548:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 801554a:	4b4a      	ldr	r3, [pc, #296]	; (8015674 <low_level_input+0x164>)
 801554c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801554e:	627b      	str	r3, [r7, #36]	; 0x24
  
  if (len > 0)
 8015550:	89fb      	ldrh	r3, [r7, #14]
 8015552:	2b00      	cmp	r3, #0
 8015554:	d007      	beq.n	8015566 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8015556:	89fb      	ldrh	r3, [r7, #14]
 8015558:	f44f 72c1 	mov.w	r2, #386	; 0x182
 801555c:	4619      	mov	r1, r3
 801555e:	2000      	movs	r0, #0
 8015560:	f009 fa00 	bl	801e964 <pbuf_alloc>
 8015564:	62f8      	str	r0, [r7, #44]	; 0x2c
  }
  
  if (p != NULL)
 8015566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015568:	2b00      	cmp	r3, #0
 801556a:	d04b      	beq.n	8015604 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 801556c:	4b41      	ldr	r3, [pc, #260]	; (8015674 <low_level_input+0x164>)
 801556e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015570:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8015572:	2300      	movs	r3, #0
 8015574:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8015576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015578:	62bb      	str	r3, [r7, #40]	; 0x28
 801557a:	e040      	b.n	80155fe <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 801557c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801557e:	895b      	ldrh	r3, [r3, #10]
 8015580:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8015582:	2300      	movs	r3, #0
 8015584:	61bb      	str	r3, [r7, #24]
      
      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8015586:	e021      	b.n	80155cc <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8015588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801558a:	685a      	ldr	r2, [r3, #4]
 801558c:	69bb      	ldr	r3, [r7, #24]
 801558e:	18d0      	adds	r0, r2, r3
 8015590:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015592:	69fb      	ldr	r3, [r7, #28]
 8015594:	18d1      	adds	r1, r2, r3
 8015596:	69fa      	ldr	r2, [r7, #28]
 8015598:	f240 53f4 	movw	r3, #1524	; 0x5f4
 801559c:	1a9b      	subs	r3, r3, r2
 801559e:	461a      	mov	r2, r3
 80155a0:	f010 fded 	bl	802617e <memcpy>
        
        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80155a4:	6a3b      	ldr	r3, [r7, #32]
 80155a6:	68db      	ldr	r3, [r3, #12]
 80155a8:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 80155aa:	6a3b      	ldr	r3, [r7, #32]
 80155ac:	689b      	ldr	r3, [r3, #8]
 80155ae:	627b      	str	r3, [r7, #36]	; 0x24
        
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 80155b0:	69fa      	ldr	r2, [r7, #28]
 80155b2:	697b      	ldr	r3, [r7, #20]
 80155b4:	4413      	add	r3, r2
 80155b6:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80155ba:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 80155bc:	69ba      	ldr	r2, [r7, #24]
 80155be:	69fb      	ldr	r3, [r7, #28]
 80155c0:	1ad3      	subs	r3, r2, r3
 80155c2:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80155c6:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 80155c8:	2300      	movs	r3, #0
 80155ca:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80155cc:	697a      	ldr	r2, [r7, #20]
 80155ce:	69fb      	ldr	r3, [r7, #28]
 80155d0:	4413      	add	r3, r2
 80155d2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80155d6:	4293      	cmp	r3, r2
 80155d8:	d8d6      	bhi.n	8015588 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 80155da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80155dc:	685a      	ldr	r2, [r3, #4]
 80155de:	69bb      	ldr	r3, [r7, #24]
 80155e0:	18d0      	adds	r0, r2, r3
 80155e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80155e4:	69fb      	ldr	r3, [r7, #28]
 80155e6:	4413      	add	r3, r2
 80155e8:	697a      	ldr	r2, [r7, #20]
 80155ea:	4619      	mov	r1, r3
 80155ec:	f010 fdc7 	bl	802617e <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80155f0:	69fa      	ldr	r2, [r7, #28]
 80155f2:	697b      	ldr	r3, [r7, #20]
 80155f4:	4413      	add	r3, r2
 80155f6:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80155f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80155fa:	681b      	ldr	r3, [r3, #0]
 80155fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80155fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015600:	2b00      	cmp	r3, #0
 8015602:	d1bb      	bne.n	801557c <low_level_input+0x6c>
    }
  }  
  
    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8015604:	4b1b      	ldr	r3, [pc, #108]	; (8015674 <low_level_input+0x164>)
 8015606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015608:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 801560a:	2300      	movs	r3, #0
 801560c:	613b      	str	r3, [r7, #16]
 801560e:	e00b      	b.n	8015628 <low_level_input+0x118>
    {  
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8015610:	6a3b      	ldr	r3, [r7, #32]
 8015612:	681b      	ldr	r3, [r3, #0]
 8015614:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8015618:	6a3b      	ldr	r3, [r7, #32]
 801561a:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 801561c:	6a3b      	ldr	r3, [r7, #32]
 801561e:	68db      	ldr	r3, [r3, #12]
 8015620:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8015622:	693b      	ldr	r3, [r7, #16]
 8015624:	3301      	adds	r3, #1
 8015626:	613b      	str	r3, [r7, #16]
 8015628:	4b12      	ldr	r3, [pc, #72]	; (8015674 <low_level_input+0x164>)
 801562a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801562c:	693b      	ldr	r3, [r7, #16]
 801562e:	429a      	cmp	r2, r3
 8015630:	d8ee      	bhi.n	8015610 <low_level_input+0x100>
    }
    
    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;  
 8015632:	4b10      	ldr	r3, [pc, #64]	; (8015674 <low_level_input+0x164>)
 8015634:	2200      	movs	r2, #0
 8015636:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 8015638:	4b0e      	ldr	r3, [pc, #56]	; (8015674 <low_level_input+0x164>)
 801563a:	681a      	ldr	r2, [r3, #0]
 801563c:	f241 0314 	movw	r3, #4116	; 0x1014
 8015640:	4413      	add	r3, r2
 8015642:	681b      	ldr	r3, [r3, #0]
 8015644:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015648:	2b00      	cmp	r3, #0
 801564a:	d00d      	beq.n	8015668 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 801564c:	4b09      	ldr	r3, [pc, #36]	; (8015674 <low_level_input+0x164>)
 801564e:	681a      	ldr	r2, [r3, #0]
 8015650:	f241 0314 	movw	r3, #4116	; 0x1014
 8015654:	4413      	add	r3, r2
 8015656:	2280      	movs	r2, #128	; 0x80
 8015658:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 801565a:	4b06      	ldr	r3, [pc, #24]	; (8015674 <low_level_input+0x164>)
 801565c:	681a      	ldr	r2, [r3, #0]
 801565e:	f241 0308 	movw	r3, #4104	; 0x1008
 8015662:	4413      	add	r3, r2
 8015664:	2200      	movs	r2, #0
 8015666:	601a      	str	r2, [r3, #0]
  }
  return p;
 8015668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 801566a:	4618      	mov	r0, r3
 801566c:	3730      	adds	r7, #48	; 0x30
 801566e:	46bd      	mov	sp, r7
 8015670:	bd80      	pop	{r7, pc}
 8015672:	bf00      	nop
 8015674:	2001b1e0 	.word	0x2001b1e0

08015678 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 8015678:	b580      	push	{r7, lr}
 801567a:	b084      	sub	sp, #16
 801567c:	af00      	add	r7, sp, #0
 801567e:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8015680:	687b      	ldr	r3, [r7, #4]
 8015682:	60fb      	str	r3, [r7, #12]
  
  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8015684:	4b13      	ldr	r3, [pc, #76]	; (80156d4 <ethernetif_input+0x5c>)
 8015686:	681b      	ldr	r3, [r3, #0]
 8015688:	f04f 31ff 	mov.w	r1, #4294967295
 801568c:	4618      	mov	r0, r3
 801568e:	f000 f9b7 	bl	8015a00 <osSemaphoreWait>
 8015692:	4603      	mov	r3, r0
 8015694:	2b00      	cmp	r3, #0
 8015696:	d1f5      	bne.n	8015684 <ethernetif_input+0xc>
    {
      do
      {   
        LOCK_TCPIP_CORE();
 8015698:	2100      	movs	r1, #0
 801569a:	480f      	ldr	r0, [pc, #60]	; (80156d8 <ethernetif_input+0x60>)
 801569c:	f010 fc79 	bl	8025f92 <sys_arch_sem_wait>
        p = low_level_input( netif );
 80156a0:	68f8      	ldr	r0, [r7, #12]
 80156a2:	f7ff ff35 	bl	8015510 <low_level_input>
 80156a6:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 80156a8:	68bb      	ldr	r3, [r7, #8]
 80156aa:	2b00      	cmp	r3, #0
 80156ac:	d00a      	beq.n	80156c4 <ethernetif_input+0x4c>
        {
          if (netif->input( p, netif) != ERR_OK )
 80156ae:	68fb      	ldr	r3, [r7, #12]
 80156b0:	691b      	ldr	r3, [r3, #16]
 80156b2:	68f9      	ldr	r1, [r7, #12]
 80156b4:	68b8      	ldr	r0, [r7, #8]
 80156b6:	4798      	blx	r3
 80156b8:	4603      	mov	r3, r0
 80156ba:	2b00      	cmp	r3, #0
 80156bc:	d002      	beq.n	80156c4 <ethernetif_input+0x4c>
          {
            pbuf_free(p);
 80156be:	68b8      	ldr	r0, [r7, #8]
 80156c0:	f009 fc32 	bl	801ef28 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 80156c4:	4804      	ldr	r0, [pc, #16]	; (80156d8 <ethernetif_input+0x60>)
 80156c6:	f010 fc95 	bl	8025ff4 <sys_sem_signal>
      } while(p!=NULL);
 80156ca:	68bb      	ldr	r3, [r7, #8]
 80156cc:	2b00      	cmp	r3, #0
 80156ce:	d1e3      	bne.n	8015698 <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80156d0:	e7d8      	b.n	8015684 <ethernetif_input+0xc>
 80156d2:	bf00      	nop
 80156d4:	20000348 	.word	0x20000348
 80156d8:	2001c9f8 	.word	0x2001c9f8

080156dc <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80156dc:	b580      	push	{r7, lr}
 80156de:	b082      	sub	sp, #8
 80156e0:	af00      	add	r7, sp, #0
 80156e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80156e4:	687b      	ldr	r3, [r7, #4]
 80156e6:	2b00      	cmp	r3, #0
 80156e8:	d106      	bne.n	80156f8 <ethernetif_init+0x1c>
 80156ea:	4b0e      	ldr	r3, [pc, #56]	; (8015724 <ethernetif_init+0x48>)
 80156ec:	f240 2235 	movw	r2, #565	; 0x235
 80156f0:	490d      	ldr	r1, [pc, #52]	; (8015728 <ethernetif_init+0x4c>)
 80156f2:	480e      	ldr	r0, [pc, #56]	; (801572c <ethernetif_init+0x50>)
 80156f4:	f010 fe1c 	bl	8026330 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 80156f8:	687b      	ldr	r3, [r7, #4]
 80156fa:	2273      	movs	r2, #115	; 0x73
 80156fc:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 8015700:	687b      	ldr	r3, [r7, #4]
 8015702:	2274      	movs	r2, #116	; 0x74
 8015704:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8015708:	687b      	ldr	r3, [r7, #4]
 801570a:	4a09      	ldr	r2, [pc, #36]	; (8015730 <ethernetif_init+0x54>)
 801570c:	615a      	str	r2, [r3, #20]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 801570e:	687b      	ldr	r3, [r7, #4]
 8015710:	4a08      	ldr	r2, [pc, #32]	; (8015734 <ethernetif_init+0x58>)
 8015712:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8015714:	6878      	ldr	r0, [r7, #4]
 8015716:	f7ff fd8d 	bl	8015234 <low_level_init>

  return ERR_OK;
 801571a:	2300      	movs	r3, #0
}
 801571c:	4618      	mov	r0, r3
 801571e:	3708      	adds	r7, #8
 8015720:	46bd      	mov	sp, r7
 8015722:	bd80      	pop	{r7, pc}
 8015724:	08027860 	.word	0x08027860
 8015728:	0802787c 	.word	0x0802787c
 801572c:	0802788c 	.word	0x0802788c
 8015730:	0801bee1 	.word	0x0801bee1
 8015734:	080153d5 	.word	0x080153d5

08015738 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8015738:	b580      	push	{r7, lr}
 801573a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 801573c:	f7fb fdc2 	bl	80112c4 <HAL_GetTick>
 8015740:	4603      	mov	r3, r0
}
 8015742:	4618      	mov	r0, r3
 8015744:	bd80      	pop	{r7, pc}

08015746 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8015746:	b480      	push	{r7}
 8015748:	b085      	sub	sp, #20
 801574a:	af00      	add	r7, sp, #0
 801574c:	4603      	mov	r3, r0
 801574e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8015750:	2300      	movs	r3, #0
 8015752:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8015754:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015758:	2b84      	cmp	r3, #132	; 0x84
 801575a:	d005      	beq.n	8015768 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 801575c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8015760:	68fb      	ldr	r3, [r7, #12]
 8015762:	4413      	add	r3, r2
 8015764:	3303      	adds	r3, #3
 8015766:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8015768:	68fb      	ldr	r3, [r7, #12]
}
 801576a:	4618      	mov	r0, r3
 801576c:	3714      	adds	r7, #20
 801576e:	46bd      	mov	sp, r7
 8015770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015774:	4770      	bx	lr

08015776 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8015776:	b480      	push	{r7}
 8015778:	b083      	sub	sp, #12
 801577a:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801577c:	f3ef 8305 	mrs	r3, IPSR
 8015780:	607b      	str	r3, [r7, #4]
  return(result);
 8015782:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8015784:	2b00      	cmp	r3, #0
 8015786:	bf14      	ite	ne
 8015788:	2301      	movne	r3, #1
 801578a:	2300      	moveq	r3, #0
 801578c:	b2db      	uxtb	r3, r3
}
 801578e:	4618      	mov	r0, r3
 8015790:	370c      	adds	r7, #12
 8015792:	46bd      	mov	sp, r7
 8015794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015798:	4770      	bx	lr

0801579a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 801579a:	b580      	push	{r7, lr}
 801579c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 801579e:	f001 ff47 	bl	8017630 <vTaskStartScheduler>
  
  return osOK;
 80157a2:	2300      	movs	r3, #0
}
 80157a4:	4618      	mov	r0, r3
 80157a6:	bd80      	pop	{r7, pc}

080157a8 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 80157a8:	b580      	push	{r7, lr}
 80157aa:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 80157ac:	f7ff ffe3 	bl	8015776 <inHandlerMode>
 80157b0:	4603      	mov	r3, r0
 80157b2:	2b00      	cmp	r3, #0
 80157b4:	d003      	beq.n	80157be <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 80157b6:	f002 f859 	bl	801786c <xTaskGetTickCountFromISR>
 80157ba:	4603      	mov	r3, r0
 80157bc:	e002      	b.n	80157c4 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 80157be:	f002 f845 	bl	801784c <xTaskGetTickCount>
 80157c2:	4603      	mov	r3, r0
  }
}
 80157c4:	4618      	mov	r0, r3
 80157c6:	bd80      	pop	{r7, pc}

080157c8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80157c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80157ca:	b089      	sub	sp, #36	; 0x24
 80157cc:	af04      	add	r7, sp, #16
 80157ce:	6078      	str	r0, [r7, #4]
 80157d0:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80157d2:	687b      	ldr	r3, [r7, #4]
 80157d4:	695b      	ldr	r3, [r3, #20]
 80157d6:	2b00      	cmp	r3, #0
 80157d8:	d020      	beq.n	801581c <osThreadCreate+0x54>
 80157da:	687b      	ldr	r3, [r7, #4]
 80157dc:	699b      	ldr	r3, [r3, #24]
 80157de:	2b00      	cmp	r3, #0
 80157e0:	d01c      	beq.n	801581c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80157e2:	687b      	ldr	r3, [r7, #4]
 80157e4:	685c      	ldr	r4, [r3, #4]
 80157e6:	687b      	ldr	r3, [r7, #4]
 80157e8:	681d      	ldr	r5, [r3, #0]
 80157ea:	687b      	ldr	r3, [r7, #4]
 80157ec:	691e      	ldr	r6, [r3, #16]
 80157ee:	687b      	ldr	r3, [r7, #4]
 80157f0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80157f4:	4618      	mov	r0, r3
 80157f6:	f7ff ffa6 	bl	8015746 <makeFreeRtosPriority>
 80157fa:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80157fc:	687b      	ldr	r3, [r7, #4]
 80157fe:	695b      	ldr	r3, [r3, #20]
 8015800:	687a      	ldr	r2, [r7, #4]
 8015802:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8015804:	9202      	str	r2, [sp, #8]
 8015806:	9301      	str	r3, [sp, #4]
 8015808:	9100      	str	r1, [sp, #0]
 801580a:	683b      	ldr	r3, [r7, #0]
 801580c:	4632      	mov	r2, r6
 801580e:	4629      	mov	r1, r5
 8015810:	4620      	mov	r0, r4
 8015812:	f001 fd76 	bl	8017302 <xTaskCreateStatic>
 8015816:	4603      	mov	r3, r0
 8015818:	60fb      	str	r3, [r7, #12]
 801581a:	e01c      	b.n	8015856 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801581c:	687b      	ldr	r3, [r7, #4]
 801581e:	685c      	ldr	r4, [r3, #4]
 8015820:	687b      	ldr	r3, [r7, #4]
 8015822:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8015824:	687b      	ldr	r3, [r7, #4]
 8015826:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8015828:	b29e      	uxth	r6, r3
 801582a:	687b      	ldr	r3, [r7, #4]
 801582c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8015830:	4618      	mov	r0, r3
 8015832:	f7ff ff88 	bl	8015746 <makeFreeRtosPriority>
 8015836:	4602      	mov	r2, r0
 8015838:	f107 030c 	add.w	r3, r7, #12
 801583c:	9301      	str	r3, [sp, #4]
 801583e:	9200      	str	r2, [sp, #0]
 8015840:	683b      	ldr	r3, [r7, #0]
 8015842:	4632      	mov	r2, r6
 8015844:	4629      	mov	r1, r5
 8015846:	4620      	mov	r0, r4
 8015848:	f001 fdbb 	bl	80173c2 <xTaskCreate>
 801584c:	4603      	mov	r3, r0
 801584e:	2b01      	cmp	r3, #1
 8015850:	d001      	beq.n	8015856 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8015852:	2300      	movs	r3, #0
 8015854:	e000      	b.n	8015858 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8015856:	68fb      	ldr	r3, [r7, #12]
}
 8015858:	4618      	mov	r0, r3
 801585a:	3714      	adds	r7, #20
 801585c:	46bd      	mov	sp, r7
 801585e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015860 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8015860:	b580      	push	{r7, lr}
 8015862:	b082      	sub	sp, #8
 8015864:	af00      	add	r7, sp, #0
 8015866:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8015868:	687b      	ldr	r3, [r7, #4]
 801586a:	685b      	ldr	r3, [r3, #4]
 801586c:	2b00      	cmp	r3, #0
 801586e:	d007      	beq.n	8015880 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8015870:	687b      	ldr	r3, [r7, #4]
 8015872:	685b      	ldr	r3, [r3, #4]
 8015874:	4619      	mov	r1, r3
 8015876:	2001      	movs	r0, #1
 8015878:	f000 fff7 	bl	801686a <xQueueCreateMutexStatic>
 801587c:	4603      	mov	r3, r0
 801587e:	e003      	b.n	8015888 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8015880:	2001      	movs	r0, #1
 8015882:	f000 ffda 	bl	801683a <xQueueCreateMutex>
 8015886:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8015888:	4618      	mov	r0, r3
 801588a:	3708      	adds	r7, #8
 801588c:	46bd      	mov	sp, r7
 801588e:	bd80      	pop	{r7, pc}

08015890 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8015890:	b580      	push	{r7, lr}
 8015892:	b084      	sub	sp, #16
 8015894:	af00      	add	r7, sp, #0
 8015896:	6078      	str	r0, [r7, #4]
 8015898:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 801589a:	2300      	movs	r3, #0
 801589c:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 801589e:	687b      	ldr	r3, [r7, #4]
 80158a0:	2b00      	cmp	r3, #0
 80158a2:	d101      	bne.n	80158a8 <osMutexWait+0x18>
    return osErrorParameter;
 80158a4:	2380      	movs	r3, #128	; 0x80
 80158a6:	e03a      	b.n	801591e <osMutexWait+0x8e>
  }
  
  ticks = 0;
 80158a8:	2300      	movs	r3, #0
 80158aa:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80158ac:	683b      	ldr	r3, [r7, #0]
 80158ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80158b2:	d103      	bne.n	80158bc <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 80158b4:	f04f 33ff 	mov.w	r3, #4294967295
 80158b8:	60fb      	str	r3, [r7, #12]
 80158ba:	e009      	b.n	80158d0 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 80158bc:	683b      	ldr	r3, [r7, #0]
 80158be:	2b00      	cmp	r3, #0
 80158c0:	d006      	beq.n	80158d0 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80158c2:	683b      	ldr	r3, [r7, #0]
 80158c4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80158c6:	68fb      	ldr	r3, [r7, #12]
 80158c8:	2b00      	cmp	r3, #0
 80158ca:	d101      	bne.n	80158d0 <osMutexWait+0x40>
      ticks = 1;
 80158cc:	2301      	movs	r3, #1
 80158ce:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80158d0:	f7ff ff51 	bl	8015776 <inHandlerMode>
 80158d4:	4603      	mov	r3, r0
 80158d6:	2b00      	cmp	r3, #0
 80158d8:	d017      	beq.n	801590a <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80158da:	f107 0308 	add.w	r3, r7, #8
 80158de:	461a      	mov	r2, r3
 80158e0:	2100      	movs	r1, #0
 80158e2:	6878      	ldr	r0, [r7, #4]
 80158e4:	f001 fb62 	bl	8016fac <xQueueReceiveFromISR>
 80158e8:	4603      	mov	r3, r0
 80158ea:	2b01      	cmp	r3, #1
 80158ec:	d001      	beq.n	80158f2 <osMutexWait+0x62>
      return osErrorOS;
 80158ee:	23ff      	movs	r3, #255	; 0xff
 80158f0:	e015      	b.n	801591e <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80158f2:	68bb      	ldr	r3, [r7, #8]
 80158f4:	2b00      	cmp	r3, #0
 80158f6:	d011      	beq.n	801591c <osMutexWait+0x8c>
 80158f8:	4b0b      	ldr	r3, [pc, #44]	; (8015928 <osMutexWait+0x98>)
 80158fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80158fe:	601a      	str	r2, [r3, #0]
 8015900:	f3bf 8f4f 	dsb	sy
 8015904:	f3bf 8f6f 	isb	sy
 8015908:	e008      	b.n	801591c <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 801590a:	68f9      	ldr	r1, [r7, #12]
 801590c:	6878      	ldr	r0, [r7, #4]
 801590e:	f001 fa3d 	bl	8016d8c <xQueueSemaphoreTake>
 8015912:	4603      	mov	r3, r0
 8015914:	2b01      	cmp	r3, #1
 8015916:	d001      	beq.n	801591c <osMutexWait+0x8c>
    return osErrorOS;
 8015918:	23ff      	movs	r3, #255	; 0xff
 801591a:	e000      	b.n	801591e <osMutexWait+0x8e>
  }
  
  return osOK;
 801591c:	2300      	movs	r3, #0
}
 801591e:	4618      	mov	r0, r3
 8015920:	3710      	adds	r7, #16
 8015922:	46bd      	mov	sp, r7
 8015924:	bd80      	pop	{r7, pc}
 8015926:	bf00      	nop
 8015928:	e000ed04 	.word	0xe000ed04

0801592c <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 801592c:	b580      	push	{r7, lr}
 801592e:	b084      	sub	sp, #16
 8015930:	af00      	add	r7, sp, #0
 8015932:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8015934:	2300      	movs	r3, #0
 8015936:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8015938:	2300      	movs	r3, #0
 801593a:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 801593c:	f7ff ff1b 	bl	8015776 <inHandlerMode>
 8015940:	4603      	mov	r3, r0
 8015942:	2b00      	cmp	r3, #0
 8015944:	d016      	beq.n	8015974 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8015946:	f107 0308 	add.w	r3, r7, #8
 801594a:	4619      	mov	r1, r3
 801594c:	6878      	ldr	r0, [r7, #4]
 801594e:	f001 f8a9 	bl	8016aa4 <xQueueGiveFromISR>
 8015952:	4603      	mov	r3, r0
 8015954:	2b01      	cmp	r3, #1
 8015956:	d001      	beq.n	801595c <osMutexRelease+0x30>
      return osErrorOS;
 8015958:	23ff      	movs	r3, #255	; 0xff
 801595a:	e017      	b.n	801598c <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 801595c:	68bb      	ldr	r3, [r7, #8]
 801595e:	2b00      	cmp	r3, #0
 8015960:	d013      	beq.n	801598a <osMutexRelease+0x5e>
 8015962:	4b0c      	ldr	r3, [pc, #48]	; (8015994 <osMutexRelease+0x68>)
 8015964:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015968:	601a      	str	r2, [r3, #0]
 801596a:	f3bf 8f4f 	dsb	sy
 801596e:	f3bf 8f6f 	isb	sy
 8015972:	e00a      	b.n	801598a <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8015974:	2300      	movs	r3, #0
 8015976:	2200      	movs	r2, #0
 8015978:	2100      	movs	r1, #0
 801597a:	6878      	ldr	r0, [r7, #4]
 801597c:	f000 ff90 	bl	80168a0 <xQueueGenericSend>
 8015980:	4603      	mov	r3, r0
 8015982:	2b01      	cmp	r3, #1
 8015984:	d001      	beq.n	801598a <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8015986:	23ff      	movs	r3, #255	; 0xff
 8015988:	60fb      	str	r3, [r7, #12]
  }
  return result;
 801598a:	68fb      	ldr	r3, [r7, #12]
}
 801598c:	4618      	mov	r0, r3
 801598e:	3710      	adds	r7, #16
 8015990:	46bd      	mov	sp, r7
 8015992:	bd80      	pop	{r7, pc}
 8015994:	e000ed04 	.word	0xe000ed04

08015998 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8015998:	b580      	push	{r7, lr}
 801599a:	b086      	sub	sp, #24
 801599c:	af02      	add	r7, sp, #8
 801599e:	6078      	str	r0, [r7, #4]
 80159a0:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80159a2:	687b      	ldr	r3, [r7, #4]
 80159a4:	685b      	ldr	r3, [r3, #4]
 80159a6:	2b00      	cmp	r3, #0
 80159a8:	d010      	beq.n	80159cc <osSemaphoreCreate+0x34>
    if (count == 1) {
 80159aa:	683b      	ldr	r3, [r7, #0]
 80159ac:	2b01      	cmp	r3, #1
 80159ae:	d10b      	bne.n	80159c8 <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80159b0:	687b      	ldr	r3, [r7, #4]
 80159b2:	685a      	ldr	r2, [r3, #4]
 80159b4:	2303      	movs	r3, #3
 80159b6:	9300      	str	r3, [sp, #0]
 80159b8:	4613      	mov	r3, r2
 80159ba:	2200      	movs	r2, #0
 80159bc:	2100      	movs	r1, #0
 80159be:	2001      	movs	r0, #1
 80159c0:	f000 fe44 	bl	801664c <xQueueGenericCreateStatic>
 80159c4:	4603      	mov	r3, r0
 80159c6:	e016      	b.n	80159f6 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80159c8:	2300      	movs	r3, #0
 80159ca:	e014      	b.n	80159f6 <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 80159cc:	683b      	ldr	r3, [r7, #0]
 80159ce:	2b01      	cmp	r3, #1
 80159d0:	d110      	bne.n	80159f4 <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 80159d2:	2203      	movs	r2, #3
 80159d4:	2100      	movs	r1, #0
 80159d6:	2001      	movs	r0, #1
 80159d8:	f000 feb5 	bl	8016746 <xQueueGenericCreate>
 80159dc:	60f8      	str	r0, [r7, #12]
 80159de:	68fb      	ldr	r3, [r7, #12]
 80159e0:	2b00      	cmp	r3, #0
 80159e2:	d005      	beq.n	80159f0 <osSemaphoreCreate+0x58>
 80159e4:	2300      	movs	r3, #0
 80159e6:	2200      	movs	r2, #0
 80159e8:	2100      	movs	r1, #0
 80159ea:	68f8      	ldr	r0, [r7, #12]
 80159ec:	f000 ff58 	bl	80168a0 <xQueueGenericSend>
      return sema;
 80159f0:	68fb      	ldr	r3, [r7, #12]
 80159f2:	e000      	b.n	80159f6 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80159f4:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80159f6:	4618      	mov	r0, r3
 80159f8:	3710      	adds	r7, #16
 80159fa:	46bd      	mov	sp, r7
 80159fc:	bd80      	pop	{r7, pc}
	...

08015a00 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8015a00:	b580      	push	{r7, lr}
 8015a02:	b084      	sub	sp, #16
 8015a04:	af00      	add	r7, sp, #0
 8015a06:	6078      	str	r0, [r7, #4]
 8015a08:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8015a0a:	2300      	movs	r3, #0
 8015a0c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8015a0e:	687b      	ldr	r3, [r7, #4]
 8015a10:	2b00      	cmp	r3, #0
 8015a12:	d101      	bne.n	8015a18 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8015a14:	2380      	movs	r3, #128	; 0x80
 8015a16:	e03a      	b.n	8015a8e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8015a18:	2300      	movs	r3, #0
 8015a1a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8015a1c:	683b      	ldr	r3, [r7, #0]
 8015a1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015a22:	d103      	bne.n	8015a2c <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8015a24:	f04f 33ff 	mov.w	r3, #4294967295
 8015a28:	60fb      	str	r3, [r7, #12]
 8015a2a:	e009      	b.n	8015a40 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8015a2c:	683b      	ldr	r3, [r7, #0]
 8015a2e:	2b00      	cmp	r3, #0
 8015a30:	d006      	beq.n	8015a40 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8015a32:	683b      	ldr	r3, [r7, #0]
 8015a34:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8015a36:	68fb      	ldr	r3, [r7, #12]
 8015a38:	2b00      	cmp	r3, #0
 8015a3a:	d101      	bne.n	8015a40 <osSemaphoreWait+0x40>
      ticks = 1;
 8015a3c:	2301      	movs	r3, #1
 8015a3e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8015a40:	f7ff fe99 	bl	8015776 <inHandlerMode>
 8015a44:	4603      	mov	r3, r0
 8015a46:	2b00      	cmp	r3, #0
 8015a48:	d017      	beq.n	8015a7a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8015a4a:	f107 0308 	add.w	r3, r7, #8
 8015a4e:	461a      	mov	r2, r3
 8015a50:	2100      	movs	r1, #0
 8015a52:	6878      	ldr	r0, [r7, #4]
 8015a54:	f001 faaa 	bl	8016fac <xQueueReceiveFromISR>
 8015a58:	4603      	mov	r3, r0
 8015a5a:	2b01      	cmp	r3, #1
 8015a5c:	d001      	beq.n	8015a62 <osSemaphoreWait+0x62>
      return osErrorOS;
 8015a5e:	23ff      	movs	r3, #255	; 0xff
 8015a60:	e015      	b.n	8015a8e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8015a62:	68bb      	ldr	r3, [r7, #8]
 8015a64:	2b00      	cmp	r3, #0
 8015a66:	d011      	beq.n	8015a8c <osSemaphoreWait+0x8c>
 8015a68:	4b0b      	ldr	r3, [pc, #44]	; (8015a98 <osSemaphoreWait+0x98>)
 8015a6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015a6e:	601a      	str	r2, [r3, #0]
 8015a70:	f3bf 8f4f 	dsb	sy
 8015a74:	f3bf 8f6f 	isb	sy
 8015a78:	e008      	b.n	8015a8c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8015a7a:	68f9      	ldr	r1, [r7, #12]
 8015a7c:	6878      	ldr	r0, [r7, #4]
 8015a7e:	f001 f985 	bl	8016d8c <xQueueSemaphoreTake>
 8015a82:	4603      	mov	r3, r0
 8015a84:	2b01      	cmp	r3, #1
 8015a86:	d001      	beq.n	8015a8c <osSemaphoreWait+0x8c>
    return osErrorOS;
 8015a88:	23ff      	movs	r3, #255	; 0xff
 8015a8a:	e000      	b.n	8015a8e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8015a8c:	2300      	movs	r3, #0
}
 8015a8e:	4618      	mov	r0, r3
 8015a90:	3710      	adds	r7, #16
 8015a92:	46bd      	mov	sp, r7
 8015a94:	bd80      	pop	{r7, pc}
 8015a96:	bf00      	nop
 8015a98:	e000ed04 	.word	0xe000ed04

08015a9c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8015a9c:	b580      	push	{r7, lr}
 8015a9e:	b084      	sub	sp, #16
 8015aa0:	af00      	add	r7, sp, #0
 8015aa2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8015aa4:	2300      	movs	r3, #0
 8015aa6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8015aa8:	2300      	movs	r3, #0
 8015aaa:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8015aac:	f7ff fe63 	bl	8015776 <inHandlerMode>
 8015ab0:	4603      	mov	r3, r0
 8015ab2:	2b00      	cmp	r3, #0
 8015ab4:	d016      	beq.n	8015ae4 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8015ab6:	f107 0308 	add.w	r3, r7, #8
 8015aba:	4619      	mov	r1, r3
 8015abc:	6878      	ldr	r0, [r7, #4]
 8015abe:	f000 fff1 	bl	8016aa4 <xQueueGiveFromISR>
 8015ac2:	4603      	mov	r3, r0
 8015ac4:	2b01      	cmp	r3, #1
 8015ac6:	d001      	beq.n	8015acc <osSemaphoreRelease+0x30>
      return osErrorOS;
 8015ac8:	23ff      	movs	r3, #255	; 0xff
 8015aca:	e017      	b.n	8015afc <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8015acc:	68bb      	ldr	r3, [r7, #8]
 8015ace:	2b00      	cmp	r3, #0
 8015ad0:	d013      	beq.n	8015afa <osSemaphoreRelease+0x5e>
 8015ad2:	4b0c      	ldr	r3, [pc, #48]	; (8015b04 <osSemaphoreRelease+0x68>)
 8015ad4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015ad8:	601a      	str	r2, [r3, #0]
 8015ada:	f3bf 8f4f 	dsb	sy
 8015ade:	f3bf 8f6f 	isb	sy
 8015ae2:	e00a      	b.n	8015afa <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8015ae4:	2300      	movs	r3, #0
 8015ae6:	2200      	movs	r2, #0
 8015ae8:	2100      	movs	r1, #0
 8015aea:	6878      	ldr	r0, [r7, #4]
 8015aec:	f000 fed8 	bl	80168a0 <xQueueGenericSend>
 8015af0:	4603      	mov	r3, r0
 8015af2:	2b01      	cmp	r3, #1
 8015af4:	d001      	beq.n	8015afa <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8015af6:	23ff      	movs	r3, #255	; 0xff
 8015af8:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8015afa:	68fb      	ldr	r3, [r7, #12]
}
 8015afc:	4618      	mov	r0, r3
 8015afe:	3710      	adds	r7, #16
 8015b00:	46bd      	mov	sp, r7
 8015b02:	bd80      	pop	{r7, pc}
 8015b04:	e000ed04 	.word	0xe000ed04

08015b08 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8015b08:	b590      	push	{r4, r7, lr}
 8015b0a:	b085      	sub	sp, #20
 8015b0c:	af02      	add	r7, sp, #8
 8015b0e:	6078      	str	r0, [r7, #4]
 8015b10:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8015b12:	687b      	ldr	r3, [r7, #4]
 8015b14:	689b      	ldr	r3, [r3, #8]
 8015b16:	2b00      	cmp	r3, #0
 8015b18:	d012      	beq.n	8015b40 <osMessageCreate+0x38>
 8015b1a:	687b      	ldr	r3, [r7, #4]
 8015b1c:	68db      	ldr	r3, [r3, #12]
 8015b1e:	2b00      	cmp	r3, #0
 8015b20:	d00e      	beq.n	8015b40 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8015b22:	687b      	ldr	r3, [r7, #4]
 8015b24:	6818      	ldr	r0, [r3, #0]
 8015b26:	687b      	ldr	r3, [r7, #4]
 8015b28:	6859      	ldr	r1, [r3, #4]
 8015b2a:	687b      	ldr	r3, [r7, #4]
 8015b2c:	689a      	ldr	r2, [r3, #8]
 8015b2e:	687b      	ldr	r3, [r7, #4]
 8015b30:	68dc      	ldr	r4, [r3, #12]
 8015b32:	2300      	movs	r3, #0
 8015b34:	9300      	str	r3, [sp, #0]
 8015b36:	4623      	mov	r3, r4
 8015b38:	f000 fd88 	bl	801664c <xQueueGenericCreateStatic>
 8015b3c:	4603      	mov	r3, r0
 8015b3e:	e008      	b.n	8015b52 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8015b40:	687b      	ldr	r3, [r7, #4]
 8015b42:	6818      	ldr	r0, [r3, #0]
 8015b44:	687b      	ldr	r3, [r7, #4]
 8015b46:	685b      	ldr	r3, [r3, #4]
 8015b48:	2200      	movs	r2, #0
 8015b4a:	4619      	mov	r1, r3
 8015b4c:	f000 fdfb 	bl	8016746 <xQueueGenericCreate>
 8015b50:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8015b52:	4618      	mov	r0, r3
 8015b54:	370c      	adds	r7, #12
 8015b56:	46bd      	mov	sp, r7
 8015b58:	bd90      	pop	{r4, r7, pc}
	...

08015b5c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8015b5c:	b590      	push	{r4, r7, lr}
 8015b5e:	b08b      	sub	sp, #44	; 0x2c
 8015b60:	af00      	add	r7, sp, #0
 8015b62:	60f8      	str	r0, [r7, #12]
 8015b64:	60b9      	str	r1, [r7, #8]
 8015b66:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8015b68:	68bb      	ldr	r3, [r7, #8]
 8015b6a:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8015b6c:	2300      	movs	r3, #0
 8015b6e:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8015b70:	68bb      	ldr	r3, [r7, #8]
 8015b72:	2b00      	cmp	r3, #0
 8015b74:	d10a      	bne.n	8015b8c <osMessageGet+0x30>
    event.status = osErrorParameter;
 8015b76:	2380      	movs	r3, #128	; 0x80
 8015b78:	617b      	str	r3, [r7, #20]
    return event;
 8015b7a:	68fb      	ldr	r3, [r7, #12]
 8015b7c:	461c      	mov	r4, r3
 8015b7e:	f107 0314 	add.w	r3, r7, #20
 8015b82:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8015b86:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8015b8a:	e054      	b.n	8015c36 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8015b8c:	2300      	movs	r3, #0
 8015b8e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8015b90:	2300      	movs	r3, #0
 8015b92:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8015b94:	687b      	ldr	r3, [r7, #4]
 8015b96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015b9a:	d103      	bne.n	8015ba4 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8015b9c:	f04f 33ff 	mov.w	r3, #4294967295
 8015ba0:	627b      	str	r3, [r7, #36]	; 0x24
 8015ba2:	e009      	b.n	8015bb8 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8015ba4:	687b      	ldr	r3, [r7, #4]
 8015ba6:	2b00      	cmp	r3, #0
 8015ba8:	d006      	beq.n	8015bb8 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8015baa:	687b      	ldr	r3, [r7, #4]
 8015bac:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8015bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015bb0:	2b00      	cmp	r3, #0
 8015bb2:	d101      	bne.n	8015bb8 <osMessageGet+0x5c>
      ticks = 1;
 8015bb4:	2301      	movs	r3, #1
 8015bb6:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8015bb8:	f7ff fddd 	bl	8015776 <inHandlerMode>
 8015bbc:	4603      	mov	r3, r0
 8015bbe:	2b00      	cmp	r3, #0
 8015bc0:	d01c      	beq.n	8015bfc <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8015bc2:	f107 0220 	add.w	r2, r7, #32
 8015bc6:	f107 0314 	add.w	r3, r7, #20
 8015bca:	3304      	adds	r3, #4
 8015bcc:	4619      	mov	r1, r3
 8015bce:	68b8      	ldr	r0, [r7, #8]
 8015bd0:	f001 f9ec 	bl	8016fac <xQueueReceiveFromISR>
 8015bd4:	4603      	mov	r3, r0
 8015bd6:	2b01      	cmp	r3, #1
 8015bd8:	d102      	bne.n	8015be0 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8015bda:	2310      	movs	r3, #16
 8015bdc:	617b      	str	r3, [r7, #20]
 8015bde:	e001      	b.n	8015be4 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8015be0:	2300      	movs	r3, #0
 8015be2:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8015be4:	6a3b      	ldr	r3, [r7, #32]
 8015be6:	2b00      	cmp	r3, #0
 8015be8:	d01d      	beq.n	8015c26 <osMessageGet+0xca>
 8015bea:	4b15      	ldr	r3, [pc, #84]	; (8015c40 <osMessageGet+0xe4>)
 8015bec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015bf0:	601a      	str	r2, [r3, #0]
 8015bf2:	f3bf 8f4f 	dsb	sy
 8015bf6:	f3bf 8f6f 	isb	sy
 8015bfa:	e014      	b.n	8015c26 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8015bfc:	f107 0314 	add.w	r3, r7, #20
 8015c00:	3304      	adds	r3, #4
 8015c02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015c04:	4619      	mov	r1, r3
 8015c06:	68b8      	ldr	r0, [r7, #8]
 8015c08:	f000 ffde 	bl	8016bc8 <xQueueReceive>
 8015c0c:	4603      	mov	r3, r0
 8015c0e:	2b01      	cmp	r3, #1
 8015c10:	d102      	bne.n	8015c18 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8015c12:	2310      	movs	r3, #16
 8015c14:	617b      	str	r3, [r7, #20]
 8015c16:	e006      	b.n	8015c26 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8015c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c1a:	2b00      	cmp	r3, #0
 8015c1c:	d101      	bne.n	8015c22 <osMessageGet+0xc6>
 8015c1e:	2300      	movs	r3, #0
 8015c20:	e000      	b.n	8015c24 <osMessageGet+0xc8>
 8015c22:	2340      	movs	r3, #64	; 0x40
 8015c24:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8015c26:	68fb      	ldr	r3, [r7, #12]
 8015c28:	461c      	mov	r4, r3
 8015c2a:	f107 0314 	add.w	r3, r7, #20
 8015c2e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8015c32:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8015c36:	68f8      	ldr	r0, [r7, #12]
 8015c38:	372c      	adds	r7, #44	; 0x2c
 8015c3a:	46bd      	mov	sp, r7
 8015c3c:	bd90      	pop	{r4, r7, pc}
 8015c3e:	bf00      	nop
 8015c40:	e000ed04 	.word	0xe000ed04

08015c44 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8015c44:	b480      	push	{r7}
 8015c46:	b083      	sub	sp, #12
 8015c48:	af00      	add	r7, sp, #0
 8015c4a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8015c4c:	687b      	ldr	r3, [r7, #4]
 8015c4e:	f103 0208 	add.w	r2, r3, #8
 8015c52:	687b      	ldr	r3, [r7, #4]
 8015c54:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8015c56:	687b      	ldr	r3, [r7, #4]
 8015c58:	f04f 32ff 	mov.w	r2, #4294967295
 8015c5c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8015c5e:	687b      	ldr	r3, [r7, #4]
 8015c60:	f103 0208 	add.w	r2, r3, #8
 8015c64:	687b      	ldr	r3, [r7, #4]
 8015c66:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8015c68:	687b      	ldr	r3, [r7, #4]
 8015c6a:	f103 0208 	add.w	r2, r3, #8
 8015c6e:	687b      	ldr	r3, [r7, #4]
 8015c70:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8015c72:	687b      	ldr	r3, [r7, #4]
 8015c74:	2200      	movs	r2, #0
 8015c76:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8015c78:	bf00      	nop
 8015c7a:	370c      	adds	r7, #12
 8015c7c:	46bd      	mov	sp, r7
 8015c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c82:	4770      	bx	lr

08015c84 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8015c84:	b480      	push	{r7}
 8015c86:	b083      	sub	sp, #12
 8015c88:	af00      	add	r7, sp, #0
 8015c8a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8015c8c:	687b      	ldr	r3, [r7, #4]
 8015c8e:	2200      	movs	r2, #0
 8015c90:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8015c92:	bf00      	nop
 8015c94:	370c      	adds	r7, #12
 8015c96:	46bd      	mov	sp, r7
 8015c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c9c:	4770      	bx	lr

08015c9e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8015c9e:	b480      	push	{r7}
 8015ca0:	b085      	sub	sp, #20
 8015ca2:	af00      	add	r7, sp, #0
 8015ca4:	6078      	str	r0, [r7, #4]
 8015ca6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8015ca8:	687b      	ldr	r3, [r7, #4]
 8015caa:	685b      	ldr	r3, [r3, #4]
 8015cac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8015cae:	683b      	ldr	r3, [r7, #0]
 8015cb0:	68fa      	ldr	r2, [r7, #12]
 8015cb2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8015cb4:	68fb      	ldr	r3, [r7, #12]
 8015cb6:	689a      	ldr	r2, [r3, #8]
 8015cb8:	683b      	ldr	r3, [r7, #0]
 8015cba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8015cbc:	68fb      	ldr	r3, [r7, #12]
 8015cbe:	689b      	ldr	r3, [r3, #8]
 8015cc0:	683a      	ldr	r2, [r7, #0]
 8015cc2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8015cc4:	68fb      	ldr	r3, [r7, #12]
 8015cc6:	683a      	ldr	r2, [r7, #0]
 8015cc8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8015cca:	683b      	ldr	r3, [r7, #0]
 8015ccc:	687a      	ldr	r2, [r7, #4]
 8015cce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8015cd0:	687b      	ldr	r3, [r7, #4]
 8015cd2:	681b      	ldr	r3, [r3, #0]
 8015cd4:	1c5a      	adds	r2, r3, #1
 8015cd6:	687b      	ldr	r3, [r7, #4]
 8015cd8:	601a      	str	r2, [r3, #0]
}
 8015cda:	bf00      	nop
 8015cdc:	3714      	adds	r7, #20
 8015cde:	46bd      	mov	sp, r7
 8015ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ce4:	4770      	bx	lr

08015ce6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8015ce6:	b480      	push	{r7}
 8015ce8:	b085      	sub	sp, #20
 8015cea:	af00      	add	r7, sp, #0
 8015cec:	6078      	str	r0, [r7, #4]
 8015cee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8015cf0:	683b      	ldr	r3, [r7, #0]
 8015cf2:	681b      	ldr	r3, [r3, #0]
 8015cf4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8015cf6:	68bb      	ldr	r3, [r7, #8]
 8015cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015cfc:	d103      	bne.n	8015d06 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8015cfe:	687b      	ldr	r3, [r7, #4]
 8015d00:	691b      	ldr	r3, [r3, #16]
 8015d02:	60fb      	str	r3, [r7, #12]
 8015d04:	e00c      	b.n	8015d20 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8015d06:	687b      	ldr	r3, [r7, #4]
 8015d08:	3308      	adds	r3, #8
 8015d0a:	60fb      	str	r3, [r7, #12]
 8015d0c:	e002      	b.n	8015d14 <vListInsert+0x2e>
 8015d0e:	68fb      	ldr	r3, [r7, #12]
 8015d10:	685b      	ldr	r3, [r3, #4]
 8015d12:	60fb      	str	r3, [r7, #12]
 8015d14:	68fb      	ldr	r3, [r7, #12]
 8015d16:	685b      	ldr	r3, [r3, #4]
 8015d18:	681a      	ldr	r2, [r3, #0]
 8015d1a:	68bb      	ldr	r3, [r7, #8]
 8015d1c:	429a      	cmp	r2, r3
 8015d1e:	d9f6      	bls.n	8015d0e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8015d20:	68fb      	ldr	r3, [r7, #12]
 8015d22:	685a      	ldr	r2, [r3, #4]
 8015d24:	683b      	ldr	r3, [r7, #0]
 8015d26:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8015d28:	683b      	ldr	r3, [r7, #0]
 8015d2a:	685b      	ldr	r3, [r3, #4]
 8015d2c:	683a      	ldr	r2, [r7, #0]
 8015d2e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8015d30:	683b      	ldr	r3, [r7, #0]
 8015d32:	68fa      	ldr	r2, [r7, #12]
 8015d34:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8015d36:	68fb      	ldr	r3, [r7, #12]
 8015d38:	683a      	ldr	r2, [r7, #0]
 8015d3a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8015d3c:	683b      	ldr	r3, [r7, #0]
 8015d3e:	687a      	ldr	r2, [r7, #4]
 8015d40:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8015d42:	687b      	ldr	r3, [r7, #4]
 8015d44:	681b      	ldr	r3, [r3, #0]
 8015d46:	1c5a      	adds	r2, r3, #1
 8015d48:	687b      	ldr	r3, [r7, #4]
 8015d4a:	601a      	str	r2, [r3, #0]
}
 8015d4c:	bf00      	nop
 8015d4e:	3714      	adds	r7, #20
 8015d50:	46bd      	mov	sp, r7
 8015d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d56:	4770      	bx	lr

08015d58 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8015d58:	b480      	push	{r7}
 8015d5a:	b085      	sub	sp, #20
 8015d5c:	af00      	add	r7, sp, #0
 8015d5e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8015d60:	687b      	ldr	r3, [r7, #4]
 8015d62:	691b      	ldr	r3, [r3, #16]
 8015d64:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8015d66:	687b      	ldr	r3, [r7, #4]
 8015d68:	685b      	ldr	r3, [r3, #4]
 8015d6a:	687a      	ldr	r2, [r7, #4]
 8015d6c:	6892      	ldr	r2, [r2, #8]
 8015d6e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8015d70:	687b      	ldr	r3, [r7, #4]
 8015d72:	689b      	ldr	r3, [r3, #8]
 8015d74:	687a      	ldr	r2, [r7, #4]
 8015d76:	6852      	ldr	r2, [r2, #4]
 8015d78:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8015d7a:	68fb      	ldr	r3, [r7, #12]
 8015d7c:	685a      	ldr	r2, [r3, #4]
 8015d7e:	687b      	ldr	r3, [r7, #4]
 8015d80:	429a      	cmp	r2, r3
 8015d82:	d103      	bne.n	8015d8c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8015d84:	687b      	ldr	r3, [r7, #4]
 8015d86:	689a      	ldr	r2, [r3, #8]
 8015d88:	68fb      	ldr	r3, [r7, #12]
 8015d8a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8015d8c:	687b      	ldr	r3, [r7, #4]
 8015d8e:	2200      	movs	r2, #0
 8015d90:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8015d92:	68fb      	ldr	r3, [r7, #12]
 8015d94:	681b      	ldr	r3, [r3, #0]
 8015d96:	1e5a      	subs	r2, r3, #1
 8015d98:	68fb      	ldr	r3, [r7, #12]
 8015d9a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8015d9c:	68fb      	ldr	r3, [r7, #12]
 8015d9e:	681b      	ldr	r3, [r3, #0]
}
 8015da0:	4618      	mov	r0, r3
 8015da2:	3714      	adds	r7, #20
 8015da4:	46bd      	mov	sp, r7
 8015da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015daa:	4770      	bx	lr

08015dac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8015dac:	b480      	push	{r7}
 8015dae:	b085      	sub	sp, #20
 8015db0:	af00      	add	r7, sp, #0
 8015db2:	60f8      	str	r0, [r7, #12]
 8015db4:	60b9      	str	r1, [r7, #8]
 8015db6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8015db8:	68fb      	ldr	r3, [r7, #12]
 8015dba:	3b04      	subs	r3, #4
 8015dbc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8015dbe:	68fb      	ldr	r3, [r7, #12]
 8015dc0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8015dc4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8015dc6:	68fb      	ldr	r3, [r7, #12]
 8015dc8:	3b04      	subs	r3, #4
 8015dca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8015dcc:	68bb      	ldr	r3, [r7, #8]
 8015dce:	f023 0201 	bic.w	r2, r3, #1
 8015dd2:	68fb      	ldr	r3, [r7, #12]
 8015dd4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8015dd6:	68fb      	ldr	r3, [r7, #12]
 8015dd8:	3b04      	subs	r3, #4
 8015dda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8015ddc:	4a0c      	ldr	r2, [pc, #48]	; (8015e10 <pxPortInitialiseStack+0x64>)
 8015dde:	68fb      	ldr	r3, [r7, #12]
 8015de0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8015de2:	68fb      	ldr	r3, [r7, #12]
 8015de4:	3b14      	subs	r3, #20
 8015de6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8015de8:	687a      	ldr	r2, [r7, #4]
 8015dea:	68fb      	ldr	r3, [r7, #12]
 8015dec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8015dee:	68fb      	ldr	r3, [r7, #12]
 8015df0:	3b04      	subs	r3, #4
 8015df2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8015df4:	68fb      	ldr	r3, [r7, #12]
 8015df6:	f06f 0202 	mvn.w	r2, #2
 8015dfa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8015dfc:	68fb      	ldr	r3, [r7, #12]
 8015dfe:	3b20      	subs	r3, #32
 8015e00:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8015e02:	68fb      	ldr	r3, [r7, #12]
}
 8015e04:	4618      	mov	r0, r3
 8015e06:	3714      	adds	r7, #20
 8015e08:	46bd      	mov	sp, r7
 8015e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e0e:	4770      	bx	lr
 8015e10:	08015e15 	.word	0x08015e15

08015e14 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8015e14:	b480      	push	{r7}
 8015e16:	b085      	sub	sp, #20
 8015e18:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8015e1a:	2300      	movs	r3, #0
 8015e1c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8015e1e:	4b13      	ldr	r3, [pc, #76]	; (8015e6c <prvTaskExitError+0x58>)
 8015e20:	681b      	ldr	r3, [r3, #0]
 8015e22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015e26:	d00b      	beq.n	8015e40 <prvTaskExitError+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8015e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e2c:	b672      	cpsid	i
 8015e2e:	f383 8811 	msr	BASEPRI, r3
 8015e32:	f3bf 8f6f 	isb	sy
 8015e36:	f3bf 8f4f 	dsb	sy
 8015e3a:	b662      	cpsie	i
 8015e3c:	60fb      	str	r3, [r7, #12]
 8015e3e:	e7fe      	b.n	8015e3e <prvTaskExitError+0x2a>
 8015e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e44:	b672      	cpsid	i
 8015e46:	f383 8811 	msr	BASEPRI, r3
 8015e4a:	f3bf 8f6f 	isb	sy
 8015e4e:	f3bf 8f4f 	dsb	sy
 8015e52:	b662      	cpsie	i
 8015e54:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8015e56:	bf00      	nop
 8015e58:	687b      	ldr	r3, [r7, #4]
 8015e5a:	2b00      	cmp	r3, #0
 8015e5c:	d0fc      	beq.n	8015e58 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8015e5e:	bf00      	nop
 8015e60:	3714      	adds	r7, #20
 8015e62:	46bd      	mov	sp, r7
 8015e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e68:	4770      	bx	lr
 8015e6a:	bf00      	nop
 8015e6c:	2000000c 	.word	0x2000000c

08015e70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8015e70:	4b07      	ldr	r3, [pc, #28]	; (8015e90 <pxCurrentTCBConst2>)
 8015e72:	6819      	ldr	r1, [r3, #0]
 8015e74:	6808      	ldr	r0, [r1, #0]
 8015e76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e7a:	f380 8809 	msr	PSP, r0
 8015e7e:	f3bf 8f6f 	isb	sy
 8015e82:	f04f 0000 	mov.w	r0, #0
 8015e86:	f380 8811 	msr	BASEPRI, r0
 8015e8a:	4770      	bx	lr
 8015e8c:	f3af 8000 	nop.w

08015e90 <pxCurrentTCBConst2>:
 8015e90:	20018b6c 	.word	0x20018b6c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8015e94:	bf00      	nop
 8015e96:	bf00      	nop

08015e98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8015e98:	4808      	ldr	r0, [pc, #32]	; (8015ebc <prvPortStartFirstTask+0x24>)
 8015e9a:	6800      	ldr	r0, [r0, #0]
 8015e9c:	6800      	ldr	r0, [r0, #0]
 8015e9e:	f380 8808 	msr	MSP, r0
 8015ea2:	f04f 0000 	mov.w	r0, #0
 8015ea6:	f380 8814 	msr	CONTROL, r0
 8015eaa:	b662      	cpsie	i
 8015eac:	b661      	cpsie	f
 8015eae:	f3bf 8f4f 	dsb	sy
 8015eb2:	f3bf 8f6f 	isb	sy
 8015eb6:	df00      	svc	0
 8015eb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8015eba:	bf00      	nop
 8015ebc:	e000ed08 	.word	0xe000ed08

08015ec0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8015ec0:	b580      	push	{r7, lr}
 8015ec2:	b084      	sub	sp, #16
 8015ec4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8015ec6:	4b36      	ldr	r3, [pc, #216]	; (8015fa0 <xPortStartScheduler+0xe0>)
 8015ec8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8015eca:	68fb      	ldr	r3, [r7, #12]
 8015ecc:	781b      	ldrb	r3, [r3, #0]
 8015ece:	b2db      	uxtb	r3, r3
 8015ed0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8015ed2:	68fb      	ldr	r3, [r7, #12]
 8015ed4:	22ff      	movs	r2, #255	; 0xff
 8015ed6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8015ed8:	68fb      	ldr	r3, [r7, #12]
 8015eda:	781b      	ldrb	r3, [r3, #0]
 8015edc:	b2db      	uxtb	r3, r3
 8015ede:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8015ee0:	78fb      	ldrb	r3, [r7, #3]
 8015ee2:	b2db      	uxtb	r3, r3
 8015ee4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8015ee8:	b2da      	uxtb	r2, r3
 8015eea:	4b2e      	ldr	r3, [pc, #184]	; (8015fa4 <xPortStartScheduler+0xe4>)
 8015eec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8015eee:	4b2e      	ldr	r3, [pc, #184]	; (8015fa8 <xPortStartScheduler+0xe8>)
 8015ef0:	2207      	movs	r2, #7
 8015ef2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8015ef4:	e009      	b.n	8015f0a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8015ef6:	4b2c      	ldr	r3, [pc, #176]	; (8015fa8 <xPortStartScheduler+0xe8>)
 8015ef8:	681b      	ldr	r3, [r3, #0]
 8015efa:	3b01      	subs	r3, #1
 8015efc:	4a2a      	ldr	r2, [pc, #168]	; (8015fa8 <xPortStartScheduler+0xe8>)
 8015efe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8015f00:	78fb      	ldrb	r3, [r7, #3]
 8015f02:	b2db      	uxtb	r3, r3
 8015f04:	005b      	lsls	r3, r3, #1
 8015f06:	b2db      	uxtb	r3, r3
 8015f08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8015f0a:	78fb      	ldrb	r3, [r7, #3]
 8015f0c:	b2db      	uxtb	r3, r3
 8015f0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015f12:	2b80      	cmp	r3, #128	; 0x80
 8015f14:	d0ef      	beq.n	8015ef6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8015f16:	4b24      	ldr	r3, [pc, #144]	; (8015fa8 <xPortStartScheduler+0xe8>)
 8015f18:	681b      	ldr	r3, [r3, #0]
 8015f1a:	f1c3 0307 	rsb	r3, r3, #7
 8015f1e:	2b04      	cmp	r3, #4
 8015f20:	d00b      	beq.n	8015f3a <xPortStartScheduler+0x7a>
 8015f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f26:	b672      	cpsid	i
 8015f28:	f383 8811 	msr	BASEPRI, r3
 8015f2c:	f3bf 8f6f 	isb	sy
 8015f30:	f3bf 8f4f 	dsb	sy
 8015f34:	b662      	cpsie	i
 8015f36:	60bb      	str	r3, [r7, #8]
 8015f38:	e7fe      	b.n	8015f38 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8015f3a:	4b1b      	ldr	r3, [pc, #108]	; (8015fa8 <xPortStartScheduler+0xe8>)
 8015f3c:	681b      	ldr	r3, [r3, #0]
 8015f3e:	021b      	lsls	r3, r3, #8
 8015f40:	4a19      	ldr	r2, [pc, #100]	; (8015fa8 <xPortStartScheduler+0xe8>)
 8015f42:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8015f44:	4b18      	ldr	r3, [pc, #96]	; (8015fa8 <xPortStartScheduler+0xe8>)
 8015f46:	681b      	ldr	r3, [r3, #0]
 8015f48:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8015f4c:	4a16      	ldr	r2, [pc, #88]	; (8015fa8 <xPortStartScheduler+0xe8>)
 8015f4e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8015f50:	687b      	ldr	r3, [r7, #4]
 8015f52:	b2da      	uxtb	r2, r3
 8015f54:	68fb      	ldr	r3, [r7, #12]
 8015f56:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8015f58:	4a14      	ldr	r2, [pc, #80]	; (8015fac <xPortStartScheduler+0xec>)
 8015f5a:	4b14      	ldr	r3, [pc, #80]	; (8015fac <xPortStartScheduler+0xec>)
 8015f5c:	681b      	ldr	r3, [r3, #0]
 8015f5e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8015f62:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8015f64:	4a11      	ldr	r2, [pc, #68]	; (8015fac <xPortStartScheduler+0xec>)
 8015f66:	4b11      	ldr	r3, [pc, #68]	; (8015fac <xPortStartScheduler+0xec>)
 8015f68:	681b      	ldr	r3, [r3, #0]
 8015f6a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8015f6e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8015f70:	f000 f8b2 	bl	80160d8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8015f74:	4b0e      	ldr	r3, [pc, #56]	; (8015fb0 <xPortStartScheduler+0xf0>)
 8015f76:	2200      	movs	r2, #0
 8015f78:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8015f7a:	f000 f8d1 	bl	8016120 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8015f7e:	4a0d      	ldr	r2, [pc, #52]	; (8015fb4 <xPortStartScheduler+0xf4>)
 8015f80:	4b0c      	ldr	r3, [pc, #48]	; (8015fb4 <xPortStartScheduler+0xf4>)
 8015f82:	681b      	ldr	r3, [r3, #0]
 8015f84:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8015f88:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8015f8a:	f7ff ff85 	bl	8015e98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8015f8e:	f001 fd39 	bl	8017a04 <vTaskSwitchContext>
	prvTaskExitError();
 8015f92:	f7ff ff3f 	bl	8015e14 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8015f96:	2300      	movs	r3, #0
}
 8015f98:	4618      	mov	r0, r3
 8015f9a:	3710      	adds	r7, #16
 8015f9c:	46bd      	mov	sp, r7
 8015f9e:	bd80      	pop	{r7, pc}
 8015fa0:	e000e400 	.word	0xe000e400
 8015fa4:	2000034c 	.word	0x2000034c
 8015fa8:	20000350 	.word	0x20000350
 8015fac:	e000ed20 	.word	0xe000ed20
 8015fb0:	2000000c 	.word	0x2000000c
 8015fb4:	e000ef34 	.word	0xe000ef34

08015fb8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8015fb8:	b480      	push	{r7}
 8015fba:	b083      	sub	sp, #12
 8015fbc:	af00      	add	r7, sp, #0
 8015fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015fc2:	b672      	cpsid	i
 8015fc4:	f383 8811 	msr	BASEPRI, r3
 8015fc8:	f3bf 8f6f 	isb	sy
 8015fcc:	f3bf 8f4f 	dsb	sy
 8015fd0:	b662      	cpsie	i
 8015fd2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8015fd4:	4b0f      	ldr	r3, [pc, #60]	; (8016014 <vPortEnterCritical+0x5c>)
 8015fd6:	681b      	ldr	r3, [r3, #0]
 8015fd8:	3301      	adds	r3, #1
 8015fda:	4a0e      	ldr	r2, [pc, #56]	; (8016014 <vPortEnterCritical+0x5c>)
 8015fdc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8015fde:	4b0d      	ldr	r3, [pc, #52]	; (8016014 <vPortEnterCritical+0x5c>)
 8015fe0:	681b      	ldr	r3, [r3, #0]
 8015fe2:	2b01      	cmp	r3, #1
 8015fe4:	d110      	bne.n	8016008 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8015fe6:	4b0c      	ldr	r3, [pc, #48]	; (8016018 <vPortEnterCritical+0x60>)
 8015fe8:	681b      	ldr	r3, [r3, #0]
 8015fea:	b2db      	uxtb	r3, r3
 8015fec:	2b00      	cmp	r3, #0
 8015fee:	d00b      	beq.n	8016008 <vPortEnterCritical+0x50>
 8015ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ff4:	b672      	cpsid	i
 8015ff6:	f383 8811 	msr	BASEPRI, r3
 8015ffa:	f3bf 8f6f 	isb	sy
 8015ffe:	f3bf 8f4f 	dsb	sy
 8016002:	b662      	cpsie	i
 8016004:	603b      	str	r3, [r7, #0]
 8016006:	e7fe      	b.n	8016006 <vPortEnterCritical+0x4e>
	}
}
 8016008:	bf00      	nop
 801600a:	370c      	adds	r7, #12
 801600c:	46bd      	mov	sp, r7
 801600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016012:	4770      	bx	lr
 8016014:	2000000c 	.word	0x2000000c
 8016018:	e000ed04 	.word	0xe000ed04

0801601c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801601c:	b480      	push	{r7}
 801601e:	b083      	sub	sp, #12
 8016020:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8016022:	4b12      	ldr	r3, [pc, #72]	; (801606c <vPortExitCritical+0x50>)
 8016024:	681b      	ldr	r3, [r3, #0]
 8016026:	2b00      	cmp	r3, #0
 8016028:	d10b      	bne.n	8016042 <vPortExitCritical+0x26>
 801602a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801602e:	b672      	cpsid	i
 8016030:	f383 8811 	msr	BASEPRI, r3
 8016034:	f3bf 8f6f 	isb	sy
 8016038:	f3bf 8f4f 	dsb	sy
 801603c:	b662      	cpsie	i
 801603e:	607b      	str	r3, [r7, #4]
 8016040:	e7fe      	b.n	8016040 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8016042:	4b0a      	ldr	r3, [pc, #40]	; (801606c <vPortExitCritical+0x50>)
 8016044:	681b      	ldr	r3, [r3, #0]
 8016046:	3b01      	subs	r3, #1
 8016048:	4a08      	ldr	r2, [pc, #32]	; (801606c <vPortExitCritical+0x50>)
 801604a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801604c:	4b07      	ldr	r3, [pc, #28]	; (801606c <vPortExitCritical+0x50>)
 801604e:	681b      	ldr	r3, [r3, #0]
 8016050:	2b00      	cmp	r3, #0
 8016052:	d104      	bne.n	801605e <vPortExitCritical+0x42>
 8016054:	2300      	movs	r3, #0
 8016056:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8016058:	683b      	ldr	r3, [r7, #0]
 801605a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 801605e:	bf00      	nop
 8016060:	370c      	adds	r7, #12
 8016062:	46bd      	mov	sp, r7
 8016064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016068:	4770      	bx	lr
 801606a:	bf00      	nop
 801606c:	2000000c 	.word	0x2000000c

08016070 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8016070:	f3ef 8009 	mrs	r0, PSP
 8016074:	f3bf 8f6f 	isb	sy
 8016078:	4b15      	ldr	r3, [pc, #84]	; (80160d0 <pxCurrentTCBConst>)
 801607a:	681a      	ldr	r2, [r3, #0]
 801607c:	f01e 0f10 	tst.w	lr, #16
 8016080:	bf08      	it	eq
 8016082:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8016086:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801608a:	6010      	str	r0, [r2, #0]
 801608c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8016090:	f04f 0050 	mov.w	r0, #80	; 0x50
 8016094:	b672      	cpsid	i
 8016096:	f380 8811 	msr	BASEPRI, r0
 801609a:	f3bf 8f4f 	dsb	sy
 801609e:	f3bf 8f6f 	isb	sy
 80160a2:	b662      	cpsie	i
 80160a4:	f001 fcae 	bl	8017a04 <vTaskSwitchContext>
 80160a8:	f04f 0000 	mov.w	r0, #0
 80160ac:	f380 8811 	msr	BASEPRI, r0
 80160b0:	bc09      	pop	{r0, r3}
 80160b2:	6819      	ldr	r1, [r3, #0]
 80160b4:	6808      	ldr	r0, [r1, #0]
 80160b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80160ba:	f01e 0f10 	tst.w	lr, #16
 80160be:	bf08      	it	eq
 80160c0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80160c4:	f380 8809 	msr	PSP, r0
 80160c8:	f3bf 8f6f 	isb	sy
 80160cc:	4770      	bx	lr
 80160ce:	bf00      	nop

080160d0 <pxCurrentTCBConst>:
 80160d0:	20018b6c 	.word	0x20018b6c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80160d4:	bf00      	nop
 80160d6:	bf00      	nop

080160d8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80160d8:	b480      	push	{r7}
 80160da:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80160dc:	4b0b      	ldr	r3, [pc, #44]	; (801610c <vPortSetupTimerInterrupt+0x34>)
 80160de:	2200      	movs	r2, #0
 80160e0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80160e2:	4b0b      	ldr	r3, [pc, #44]	; (8016110 <vPortSetupTimerInterrupt+0x38>)
 80160e4:	2200      	movs	r2, #0
 80160e6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80160e8:	4a0a      	ldr	r2, [pc, #40]	; (8016114 <vPortSetupTimerInterrupt+0x3c>)
 80160ea:	4b0b      	ldr	r3, [pc, #44]	; (8016118 <vPortSetupTimerInterrupt+0x40>)
 80160ec:	681b      	ldr	r3, [r3, #0]
 80160ee:	490b      	ldr	r1, [pc, #44]	; (801611c <vPortSetupTimerInterrupt+0x44>)
 80160f0:	fba1 1303 	umull	r1, r3, r1, r3
 80160f4:	099b      	lsrs	r3, r3, #6
 80160f6:	3b01      	subs	r3, #1
 80160f8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80160fa:	4b04      	ldr	r3, [pc, #16]	; (801610c <vPortSetupTimerInterrupt+0x34>)
 80160fc:	2207      	movs	r2, #7
 80160fe:	601a      	str	r2, [r3, #0]
}
 8016100:	bf00      	nop
 8016102:	46bd      	mov	sp, r7
 8016104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016108:	4770      	bx	lr
 801610a:	bf00      	nop
 801610c:	e000e010 	.word	0xe000e010
 8016110:	e000e018 	.word	0xe000e018
 8016114:	e000e014 	.word	0xe000e014
 8016118:	20000000 	.word	0x20000000
 801611c:	10624dd3 	.word	0x10624dd3

08016120 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8016120:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8016130 <vPortEnableVFP+0x10>
 8016124:	6801      	ldr	r1, [r0, #0]
 8016126:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801612a:	6001      	str	r1, [r0, #0]
 801612c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 801612e:	bf00      	nop
 8016130:	e000ed88 	.word	0xe000ed88

08016134 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8016134:	b480      	push	{r7}
 8016136:	b085      	sub	sp, #20
 8016138:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801613a:	f3ef 8305 	mrs	r3, IPSR
 801613e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8016140:	68fb      	ldr	r3, [r7, #12]
 8016142:	2b0f      	cmp	r3, #15
 8016144:	d915      	bls.n	8016172 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8016146:	4a18      	ldr	r2, [pc, #96]	; (80161a8 <vPortValidateInterruptPriority+0x74>)
 8016148:	68fb      	ldr	r3, [r7, #12]
 801614a:	4413      	add	r3, r2
 801614c:	781b      	ldrb	r3, [r3, #0]
 801614e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8016150:	4b16      	ldr	r3, [pc, #88]	; (80161ac <vPortValidateInterruptPriority+0x78>)
 8016152:	781b      	ldrb	r3, [r3, #0]
 8016154:	7afa      	ldrb	r2, [r7, #11]
 8016156:	429a      	cmp	r2, r3
 8016158:	d20b      	bcs.n	8016172 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 801615a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801615e:	b672      	cpsid	i
 8016160:	f383 8811 	msr	BASEPRI, r3
 8016164:	f3bf 8f6f 	isb	sy
 8016168:	f3bf 8f4f 	dsb	sy
 801616c:	b662      	cpsie	i
 801616e:	607b      	str	r3, [r7, #4]
 8016170:	e7fe      	b.n	8016170 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8016172:	4b0f      	ldr	r3, [pc, #60]	; (80161b0 <vPortValidateInterruptPriority+0x7c>)
 8016174:	681b      	ldr	r3, [r3, #0]
 8016176:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801617a:	4b0e      	ldr	r3, [pc, #56]	; (80161b4 <vPortValidateInterruptPriority+0x80>)
 801617c:	681b      	ldr	r3, [r3, #0]
 801617e:	429a      	cmp	r2, r3
 8016180:	d90b      	bls.n	801619a <vPortValidateInterruptPriority+0x66>
 8016182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016186:	b672      	cpsid	i
 8016188:	f383 8811 	msr	BASEPRI, r3
 801618c:	f3bf 8f6f 	isb	sy
 8016190:	f3bf 8f4f 	dsb	sy
 8016194:	b662      	cpsie	i
 8016196:	603b      	str	r3, [r7, #0]
 8016198:	e7fe      	b.n	8016198 <vPortValidateInterruptPriority+0x64>
	}
 801619a:	bf00      	nop
 801619c:	3714      	adds	r7, #20
 801619e:	46bd      	mov	sp, r7
 80161a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161a4:	4770      	bx	lr
 80161a6:	bf00      	nop
 80161a8:	e000e3f0 	.word	0xe000e3f0
 80161ac:	2000034c 	.word	0x2000034c
 80161b0:	e000ed0c 	.word	0xe000ed0c
 80161b4:	20000350 	.word	0x20000350

080161b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80161b8:	b580      	push	{r7, lr}
 80161ba:	b08a      	sub	sp, #40	; 0x28
 80161bc:	af00      	add	r7, sp, #0
 80161be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80161c0:	2300      	movs	r3, #0
 80161c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80161c4:	f001 fa96 	bl	80176f4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80161c8:	4b5a      	ldr	r3, [pc, #360]	; (8016334 <pvPortMalloc+0x17c>)
 80161ca:	681b      	ldr	r3, [r3, #0]
 80161cc:	2b00      	cmp	r3, #0
 80161ce:	d101      	bne.n	80161d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80161d0:	f000 f916 	bl	8016400 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80161d4:	4b58      	ldr	r3, [pc, #352]	; (8016338 <pvPortMalloc+0x180>)
 80161d6:	681a      	ldr	r2, [r3, #0]
 80161d8:	687b      	ldr	r3, [r7, #4]
 80161da:	4013      	ands	r3, r2
 80161dc:	2b00      	cmp	r3, #0
 80161de:	f040 8090 	bne.w	8016302 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80161e2:	687b      	ldr	r3, [r7, #4]
 80161e4:	2b00      	cmp	r3, #0
 80161e6:	d01e      	beq.n	8016226 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80161e8:	2208      	movs	r2, #8
 80161ea:	687b      	ldr	r3, [r7, #4]
 80161ec:	4413      	add	r3, r2
 80161ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80161f0:	687b      	ldr	r3, [r7, #4]
 80161f2:	f003 0307 	and.w	r3, r3, #7
 80161f6:	2b00      	cmp	r3, #0
 80161f8:	d015      	beq.n	8016226 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80161fa:	687b      	ldr	r3, [r7, #4]
 80161fc:	f023 0307 	bic.w	r3, r3, #7
 8016200:	3308      	adds	r3, #8
 8016202:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016204:	687b      	ldr	r3, [r7, #4]
 8016206:	f003 0307 	and.w	r3, r3, #7
 801620a:	2b00      	cmp	r3, #0
 801620c:	d00b      	beq.n	8016226 <pvPortMalloc+0x6e>
 801620e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016212:	b672      	cpsid	i
 8016214:	f383 8811 	msr	BASEPRI, r3
 8016218:	f3bf 8f6f 	isb	sy
 801621c:	f3bf 8f4f 	dsb	sy
 8016220:	b662      	cpsie	i
 8016222:	617b      	str	r3, [r7, #20]
 8016224:	e7fe      	b.n	8016224 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8016226:	687b      	ldr	r3, [r7, #4]
 8016228:	2b00      	cmp	r3, #0
 801622a:	d06a      	beq.n	8016302 <pvPortMalloc+0x14a>
 801622c:	4b43      	ldr	r3, [pc, #268]	; (801633c <pvPortMalloc+0x184>)
 801622e:	681b      	ldr	r3, [r3, #0]
 8016230:	687a      	ldr	r2, [r7, #4]
 8016232:	429a      	cmp	r2, r3
 8016234:	d865      	bhi.n	8016302 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8016236:	4b42      	ldr	r3, [pc, #264]	; (8016340 <pvPortMalloc+0x188>)
 8016238:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801623a:	4b41      	ldr	r3, [pc, #260]	; (8016340 <pvPortMalloc+0x188>)
 801623c:	681b      	ldr	r3, [r3, #0]
 801623e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8016240:	e004      	b.n	801624c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8016242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016244:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8016246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016248:	681b      	ldr	r3, [r3, #0]
 801624a:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801624c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801624e:	685a      	ldr	r2, [r3, #4]
 8016250:	687b      	ldr	r3, [r7, #4]
 8016252:	429a      	cmp	r2, r3
 8016254:	d203      	bcs.n	801625e <pvPortMalloc+0xa6>
 8016256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016258:	681b      	ldr	r3, [r3, #0]
 801625a:	2b00      	cmp	r3, #0
 801625c:	d1f1      	bne.n	8016242 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801625e:	4b35      	ldr	r3, [pc, #212]	; (8016334 <pvPortMalloc+0x17c>)
 8016260:	681b      	ldr	r3, [r3, #0]
 8016262:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016264:	429a      	cmp	r2, r3
 8016266:	d04c      	beq.n	8016302 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8016268:	6a3b      	ldr	r3, [r7, #32]
 801626a:	681b      	ldr	r3, [r3, #0]
 801626c:	2208      	movs	r2, #8
 801626e:	4413      	add	r3, r2
 8016270:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8016272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016274:	681a      	ldr	r2, [r3, #0]
 8016276:	6a3b      	ldr	r3, [r7, #32]
 8016278:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801627a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801627c:	685a      	ldr	r2, [r3, #4]
 801627e:	687b      	ldr	r3, [r7, #4]
 8016280:	1ad2      	subs	r2, r2, r3
 8016282:	2308      	movs	r3, #8
 8016284:	005b      	lsls	r3, r3, #1
 8016286:	429a      	cmp	r2, r3
 8016288:	d920      	bls.n	80162cc <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801628a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801628c:	687b      	ldr	r3, [r7, #4]
 801628e:	4413      	add	r3, r2
 8016290:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016292:	69bb      	ldr	r3, [r7, #24]
 8016294:	f003 0307 	and.w	r3, r3, #7
 8016298:	2b00      	cmp	r3, #0
 801629a:	d00b      	beq.n	80162b4 <pvPortMalloc+0xfc>
 801629c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80162a0:	b672      	cpsid	i
 80162a2:	f383 8811 	msr	BASEPRI, r3
 80162a6:	f3bf 8f6f 	isb	sy
 80162aa:	f3bf 8f4f 	dsb	sy
 80162ae:	b662      	cpsie	i
 80162b0:	613b      	str	r3, [r7, #16]
 80162b2:	e7fe      	b.n	80162b2 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80162b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162b6:	685a      	ldr	r2, [r3, #4]
 80162b8:	687b      	ldr	r3, [r7, #4]
 80162ba:	1ad2      	subs	r2, r2, r3
 80162bc:	69bb      	ldr	r3, [r7, #24]
 80162be:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80162c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162c2:	687a      	ldr	r2, [r7, #4]
 80162c4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80162c6:	69b8      	ldr	r0, [r7, #24]
 80162c8:	f000 f8fc 	bl	80164c4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80162cc:	4b1b      	ldr	r3, [pc, #108]	; (801633c <pvPortMalloc+0x184>)
 80162ce:	681a      	ldr	r2, [r3, #0]
 80162d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162d2:	685b      	ldr	r3, [r3, #4]
 80162d4:	1ad3      	subs	r3, r2, r3
 80162d6:	4a19      	ldr	r2, [pc, #100]	; (801633c <pvPortMalloc+0x184>)
 80162d8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80162da:	4b18      	ldr	r3, [pc, #96]	; (801633c <pvPortMalloc+0x184>)
 80162dc:	681a      	ldr	r2, [r3, #0]
 80162de:	4b19      	ldr	r3, [pc, #100]	; (8016344 <pvPortMalloc+0x18c>)
 80162e0:	681b      	ldr	r3, [r3, #0]
 80162e2:	429a      	cmp	r2, r3
 80162e4:	d203      	bcs.n	80162ee <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80162e6:	4b15      	ldr	r3, [pc, #84]	; (801633c <pvPortMalloc+0x184>)
 80162e8:	681b      	ldr	r3, [r3, #0]
 80162ea:	4a16      	ldr	r2, [pc, #88]	; (8016344 <pvPortMalloc+0x18c>)
 80162ec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80162ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162f0:	685a      	ldr	r2, [r3, #4]
 80162f2:	4b11      	ldr	r3, [pc, #68]	; (8016338 <pvPortMalloc+0x180>)
 80162f4:	681b      	ldr	r3, [r3, #0]
 80162f6:	431a      	orrs	r2, r3
 80162f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162fa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80162fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162fe:	2200      	movs	r2, #0
 8016300:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8016302:	f001 fa05 	bl	8017710 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8016306:	69fb      	ldr	r3, [r7, #28]
 8016308:	f003 0307 	and.w	r3, r3, #7
 801630c:	2b00      	cmp	r3, #0
 801630e:	d00b      	beq.n	8016328 <pvPortMalloc+0x170>
 8016310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016314:	b672      	cpsid	i
 8016316:	f383 8811 	msr	BASEPRI, r3
 801631a:	f3bf 8f6f 	isb	sy
 801631e:	f3bf 8f4f 	dsb	sy
 8016322:	b662      	cpsie	i
 8016324:	60fb      	str	r3, [r7, #12]
 8016326:	e7fe      	b.n	8016326 <pvPortMalloc+0x16e>
	return pvReturn;
 8016328:	69fb      	ldr	r3, [r7, #28]
}
 801632a:	4618      	mov	r0, r3
 801632c:	3728      	adds	r7, #40	; 0x28
 801632e:	46bd      	mov	sp, r7
 8016330:	bd80      	pop	{r7, pc}
 8016332:	bf00      	nop
 8016334:	20018b5c 	.word	0x20018b5c
 8016338:	20018b68 	.word	0x20018b68
 801633c:	20018b60 	.word	0x20018b60
 8016340:	20018b54 	.word	0x20018b54
 8016344:	20018b64 	.word	0x20018b64

08016348 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8016348:	b580      	push	{r7, lr}
 801634a:	b086      	sub	sp, #24
 801634c:	af00      	add	r7, sp, #0
 801634e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8016350:	687b      	ldr	r3, [r7, #4]
 8016352:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8016354:	687b      	ldr	r3, [r7, #4]
 8016356:	2b00      	cmp	r3, #0
 8016358:	d04a      	beq.n	80163f0 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801635a:	2308      	movs	r3, #8
 801635c:	425b      	negs	r3, r3
 801635e:	697a      	ldr	r2, [r7, #20]
 8016360:	4413      	add	r3, r2
 8016362:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8016364:	697b      	ldr	r3, [r7, #20]
 8016366:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8016368:	693b      	ldr	r3, [r7, #16]
 801636a:	685a      	ldr	r2, [r3, #4]
 801636c:	4b22      	ldr	r3, [pc, #136]	; (80163f8 <vPortFree+0xb0>)
 801636e:	681b      	ldr	r3, [r3, #0]
 8016370:	4013      	ands	r3, r2
 8016372:	2b00      	cmp	r3, #0
 8016374:	d10b      	bne.n	801638e <vPortFree+0x46>
 8016376:	f04f 0350 	mov.w	r3, #80	; 0x50
 801637a:	b672      	cpsid	i
 801637c:	f383 8811 	msr	BASEPRI, r3
 8016380:	f3bf 8f6f 	isb	sy
 8016384:	f3bf 8f4f 	dsb	sy
 8016388:	b662      	cpsie	i
 801638a:	60fb      	str	r3, [r7, #12]
 801638c:	e7fe      	b.n	801638c <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801638e:	693b      	ldr	r3, [r7, #16]
 8016390:	681b      	ldr	r3, [r3, #0]
 8016392:	2b00      	cmp	r3, #0
 8016394:	d00b      	beq.n	80163ae <vPortFree+0x66>
 8016396:	f04f 0350 	mov.w	r3, #80	; 0x50
 801639a:	b672      	cpsid	i
 801639c:	f383 8811 	msr	BASEPRI, r3
 80163a0:	f3bf 8f6f 	isb	sy
 80163a4:	f3bf 8f4f 	dsb	sy
 80163a8:	b662      	cpsie	i
 80163aa:	60bb      	str	r3, [r7, #8]
 80163ac:	e7fe      	b.n	80163ac <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80163ae:	693b      	ldr	r3, [r7, #16]
 80163b0:	685a      	ldr	r2, [r3, #4]
 80163b2:	4b11      	ldr	r3, [pc, #68]	; (80163f8 <vPortFree+0xb0>)
 80163b4:	681b      	ldr	r3, [r3, #0]
 80163b6:	4013      	ands	r3, r2
 80163b8:	2b00      	cmp	r3, #0
 80163ba:	d019      	beq.n	80163f0 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80163bc:	693b      	ldr	r3, [r7, #16]
 80163be:	681b      	ldr	r3, [r3, #0]
 80163c0:	2b00      	cmp	r3, #0
 80163c2:	d115      	bne.n	80163f0 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80163c4:	693b      	ldr	r3, [r7, #16]
 80163c6:	685a      	ldr	r2, [r3, #4]
 80163c8:	4b0b      	ldr	r3, [pc, #44]	; (80163f8 <vPortFree+0xb0>)
 80163ca:	681b      	ldr	r3, [r3, #0]
 80163cc:	43db      	mvns	r3, r3
 80163ce:	401a      	ands	r2, r3
 80163d0:	693b      	ldr	r3, [r7, #16]
 80163d2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80163d4:	f001 f98e 	bl	80176f4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80163d8:	693b      	ldr	r3, [r7, #16]
 80163da:	685a      	ldr	r2, [r3, #4]
 80163dc:	4b07      	ldr	r3, [pc, #28]	; (80163fc <vPortFree+0xb4>)
 80163de:	681b      	ldr	r3, [r3, #0]
 80163e0:	4413      	add	r3, r2
 80163e2:	4a06      	ldr	r2, [pc, #24]	; (80163fc <vPortFree+0xb4>)
 80163e4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80163e6:	6938      	ldr	r0, [r7, #16]
 80163e8:	f000 f86c 	bl	80164c4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80163ec:	f001 f990 	bl	8017710 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80163f0:	bf00      	nop
 80163f2:	3718      	adds	r7, #24
 80163f4:	46bd      	mov	sp, r7
 80163f6:	bd80      	pop	{r7, pc}
 80163f8:	20018b68 	.word	0x20018b68
 80163fc:	20018b60 	.word	0x20018b60

08016400 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8016400:	b480      	push	{r7}
 8016402:	b085      	sub	sp, #20
 8016404:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8016406:	f44f 33c4 	mov.w	r3, #100352	; 0x18800
 801640a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801640c:	4b27      	ldr	r3, [pc, #156]	; (80164ac <prvHeapInit+0xac>)
 801640e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8016410:	68fb      	ldr	r3, [r7, #12]
 8016412:	f003 0307 	and.w	r3, r3, #7
 8016416:	2b00      	cmp	r3, #0
 8016418:	d00c      	beq.n	8016434 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801641a:	68fb      	ldr	r3, [r7, #12]
 801641c:	3307      	adds	r3, #7
 801641e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016420:	68fb      	ldr	r3, [r7, #12]
 8016422:	f023 0307 	bic.w	r3, r3, #7
 8016426:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8016428:	68ba      	ldr	r2, [r7, #8]
 801642a:	68fb      	ldr	r3, [r7, #12]
 801642c:	1ad3      	subs	r3, r2, r3
 801642e:	4a1f      	ldr	r2, [pc, #124]	; (80164ac <prvHeapInit+0xac>)
 8016430:	4413      	add	r3, r2
 8016432:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8016434:	68fb      	ldr	r3, [r7, #12]
 8016436:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8016438:	4a1d      	ldr	r2, [pc, #116]	; (80164b0 <prvHeapInit+0xb0>)
 801643a:	687b      	ldr	r3, [r7, #4]
 801643c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801643e:	4b1c      	ldr	r3, [pc, #112]	; (80164b0 <prvHeapInit+0xb0>)
 8016440:	2200      	movs	r2, #0
 8016442:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8016444:	687a      	ldr	r2, [r7, #4]
 8016446:	68bb      	ldr	r3, [r7, #8]
 8016448:	4413      	add	r3, r2
 801644a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801644c:	2208      	movs	r2, #8
 801644e:	68fb      	ldr	r3, [r7, #12]
 8016450:	1a9b      	subs	r3, r3, r2
 8016452:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016454:	68fb      	ldr	r3, [r7, #12]
 8016456:	f023 0307 	bic.w	r3, r3, #7
 801645a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801645c:	68fb      	ldr	r3, [r7, #12]
 801645e:	4a15      	ldr	r2, [pc, #84]	; (80164b4 <prvHeapInit+0xb4>)
 8016460:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8016462:	4b14      	ldr	r3, [pc, #80]	; (80164b4 <prvHeapInit+0xb4>)
 8016464:	681b      	ldr	r3, [r3, #0]
 8016466:	2200      	movs	r2, #0
 8016468:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801646a:	4b12      	ldr	r3, [pc, #72]	; (80164b4 <prvHeapInit+0xb4>)
 801646c:	681b      	ldr	r3, [r3, #0]
 801646e:	2200      	movs	r2, #0
 8016470:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8016472:	687b      	ldr	r3, [r7, #4]
 8016474:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8016476:	683b      	ldr	r3, [r7, #0]
 8016478:	68fa      	ldr	r2, [r7, #12]
 801647a:	1ad2      	subs	r2, r2, r3
 801647c:	683b      	ldr	r3, [r7, #0]
 801647e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8016480:	4b0c      	ldr	r3, [pc, #48]	; (80164b4 <prvHeapInit+0xb4>)
 8016482:	681a      	ldr	r2, [r3, #0]
 8016484:	683b      	ldr	r3, [r7, #0]
 8016486:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016488:	683b      	ldr	r3, [r7, #0]
 801648a:	685b      	ldr	r3, [r3, #4]
 801648c:	4a0a      	ldr	r2, [pc, #40]	; (80164b8 <prvHeapInit+0xb8>)
 801648e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016490:	683b      	ldr	r3, [r7, #0]
 8016492:	685b      	ldr	r3, [r3, #4]
 8016494:	4a09      	ldr	r2, [pc, #36]	; (80164bc <prvHeapInit+0xbc>)
 8016496:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8016498:	4b09      	ldr	r3, [pc, #36]	; (80164c0 <prvHeapInit+0xc0>)
 801649a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801649e:	601a      	str	r2, [r3, #0]
}
 80164a0:	bf00      	nop
 80164a2:	3714      	adds	r7, #20
 80164a4:	46bd      	mov	sp, r7
 80164a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164aa:	4770      	bx	lr
 80164ac:	20000354 	.word	0x20000354
 80164b0:	20018b54 	.word	0x20018b54
 80164b4:	20018b5c 	.word	0x20018b5c
 80164b8:	20018b64 	.word	0x20018b64
 80164bc:	20018b60 	.word	0x20018b60
 80164c0:	20018b68 	.word	0x20018b68

080164c4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80164c4:	b480      	push	{r7}
 80164c6:	b085      	sub	sp, #20
 80164c8:	af00      	add	r7, sp, #0
 80164ca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80164cc:	4b28      	ldr	r3, [pc, #160]	; (8016570 <prvInsertBlockIntoFreeList+0xac>)
 80164ce:	60fb      	str	r3, [r7, #12]
 80164d0:	e002      	b.n	80164d8 <prvInsertBlockIntoFreeList+0x14>
 80164d2:	68fb      	ldr	r3, [r7, #12]
 80164d4:	681b      	ldr	r3, [r3, #0]
 80164d6:	60fb      	str	r3, [r7, #12]
 80164d8:	68fb      	ldr	r3, [r7, #12]
 80164da:	681a      	ldr	r2, [r3, #0]
 80164dc:	687b      	ldr	r3, [r7, #4]
 80164de:	429a      	cmp	r2, r3
 80164e0:	d3f7      	bcc.n	80164d2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80164e2:	68fb      	ldr	r3, [r7, #12]
 80164e4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80164e6:	68fb      	ldr	r3, [r7, #12]
 80164e8:	685b      	ldr	r3, [r3, #4]
 80164ea:	68ba      	ldr	r2, [r7, #8]
 80164ec:	441a      	add	r2, r3
 80164ee:	687b      	ldr	r3, [r7, #4]
 80164f0:	429a      	cmp	r2, r3
 80164f2:	d108      	bne.n	8016506 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80164f4:	68fb      	ldr	r3, [r7, #12]
 80164f6:	685a      	ldr	r2, [r3, #4]
 80164f8:	687b      	ldr	r3, [r7, #4]
 80164fa:	685b      	ldr	r3, [r3, #4]
 80164fc:	441a      	add	r2, r3
 80164fe:	68fb      	ldr	r3, [r7, #12]
 8016500:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8016502:	68fb      	ldr	r3, [r7, #12]
 8016504:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8016506:	687b      	ldr	r3, [r7, #4]
 8016508:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801650a:	687b      	ldr	r3, [r7, #4]
 801650c:	685b      	ldr	r3, [r3, #4]
 801650e:	68ba      	ldr	r2, [r7, #8]
 8016510:	441a      	add	r2, r3
 8016512:	68fb      	ldr	r3, [r7, #12]
 8016514:	681b      	ldr	r3, [r3, #0]
 8016516:	429a      	cmp	r2, r3
 8016518:	d118      	bne.n	801654c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801651a:	68fb      	ldr	r3, [r7, #12]
 801651c:	681a      	ldr	r2, [r3, #0]
 801651e:	4b15      	ldr	r3, [pc, #84]	; (8016574 <prvInsertBlockIntoFreeList+0xb0>)
 8016520:	681b      	ldr	r3, [r3, #0]
 8016522:	429a      	cmp	r2, r3
 8016524:	d00d      	beq.n	8016542 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8016526:	687b      	ldr	r3, [r7, #4]
 8016528:	685a      	ldr	r2, [r3, #4]
 801652a:	68fb      	ldr	r3, [r7, #12]
 801652c:	681b      	ldr	r3, [r3, #0]
 801652e:	685b      	ldr	r3, [r3, #4]
 8016530:	441a      	add	r2, r3
 8016532:	687b      	ldr	r3, [r7, #4]
 8016534:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8016536:	68fb      	ldr	r3, [r7, #12]
 8016538:	681b      	ldr	r3, [r3, #0]
 801653a:	681a      	ldr	r2, [r3, #0]
 801653c:	687b      	ldr	r3, [r7, #4]
 801653e:	601a      	str	r2, [r3, #0]
 8016540:	e008      	b.n	8016554 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8016542:	4b0c      	ldr	r3, [pc, #48]	; (8016574 <prvInsertBlockIntoFreeList+0xb0>)
 8016544:	681a      	ldr	r2, [r3, #0]
 8016546:	687b      	ldr	r3, [r7, #4]
 8016548:	601a      	str	r2, [r3, #0]
 801654a:	e003      	b.n	8016554 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801654c:	68fb      	ldr	r3, [r7, #12]
 801654e:	681a      	ldr	r2, [r3, #0]
 8016550:	687b      	ldr	r3, [r7, #4]
 8016552:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8016554:	68fa      	ldr	r2, [r7, #12]
 8016556:	687b      	ldr	r3, [r7, #4]
 8016558:	429a      	cmp	r2, r3
 801655a:	d002      	beq.n	8016562 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801655c:	68fb      	ldr	r3, [r7, #12]
 801655e:	687a      	ldr	r2, [r7, #4]
 8016560:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016562:	bf00      	nop
 8016564:	3714      	adds	r7, #20
 8016566:	46bd      	mov	sp, r7
 8016568:	f85d 7b04 	ldr.w	r7, [sp], #4
 801656c:	4770      	bx	lr
 801656e:	bf00      	nop
 8016570:	20018b54 	.word	0x20018b54
 8016574:	20018b5c 	.word	0x20018b5c

08016578 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8016578:	b580      	push	{r7, lr}
 801657a:	b084      	sub	sp, #16
 801657c:	af00      	add	r7, sp, #0
 801657e:	6078      	str	r0, [r7, #4]
 8016580:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8016582:	687b      	ldr	r3, [r7, #4]
 8016584:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8016586:	68fb      	ldr	r3, [r7, #12]
 8016588:	2b00      	cmp	r3, #0
 801658a:	d10b      	bne.n	80165a4 <xQueueGenericReset+0x2c>
 801658c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016590:	b672      	cpsid	i
 8016592:	f383 8811 	msr	BASEPRI, r3
 8016596:	f3bf 8f6f 	isb	sy
 801659a:	f3bf 8f4f 	dsb	sy
 801659e:	b662      	cpsie	i
 80165a0:	60bb      	str	r3, [r7, #8]
 80165a2:	e7fe      	b.n	80165a2 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 80165a4:	f7ff fd08 	bl	8015fb8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80165a8:	68fb      	ldr	r3, [r7, #12]
 80165aa:	681a      	ldr	r2, [r3, #0]
 80165ac:	68fb      	ldr	r3, [r7, #12]
 80165ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80165b0:	68f9      	ldr	r1, [r7, #12]
 80165b2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80165b4:	fb01 f303 	mul.w	r3, r1, r3
 80165b8:	441a      	add	r2, r3
 80165ba:	68fb      	ldr	r3, [r7, #12]
 80165bc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80165be:	68fb      	ldr	r3, [r7, #12]
 80165c0:	2200      	movs	r2, #0
 80165c2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80165c4:	68fb      	ldr	r3, [r7, #12]
 80165c6:	681a      	ldr	r2, [r3, #0]
 80165c8:	68fb      	ldr	r3, [r7, #12]
 80165ca:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80165cc:	68fb      	ldr	r3, [r7, #12]
 80165ce:	681a      	ldr	r2, [r3, #0]
 80165d0:	68fb      	ldr	r3, [r7, #12]
 80165d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80165d4:	3b01      	subs	r3, #1
 80165d6:	68f9      	ldr	r1, [r7, #12]
 80165d8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80165da:	fb01 f303 	mul.w	r3, r1, r3
 80165de:	441a      	add	r2, r3
 80165e0:	68fb      	ldr	r3, [r7, #12]
 80165e2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80165e4:	68fb      	ldr	r3, [r7, #12]
 80165e6:	22ff      	movs	r2, #255	; 0xff
 80165e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80165ec:	68fb      	ldr	r3, [r7, #12]
 80165ee:	22ff      	movs	r2, #255	; 0xff
 80165f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80165f4:	683b      	ldr	r3, [r7, #0]
 80165f6:	2b00      	cmp	r3, #0
 80165f8:	d114      	bne.n	8016624 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80165fa:	68fb      	ldr	r3, [r7, #12]
 80165fc:	691b      	ldr	r3, [r3, #16]
 80165fe:	2b00      	cmp	r3, #0
 8016600:	d01a      	beq.n	8016638 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016602:	68fb      	ldr	r3, [r7, #12]
 8016604:	3310      	adds	r3, #16
 8016606:	4618      	mov	r0, r3
 8016608:	f001 fa7e 	bl	8017b08 <xTaskRemoveFromEventList>
 801660c:	4603      	mov	r3, r0
 801660e:	2b00      	cmp	r3, #0
 8016610:	d012      	beq.n	8016638 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8016612:	4b0d      	ldr	r3, [pc, #52]	; (8016648 <xQueueGenericReset+0xd0>)
 8016614:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016618:	601a      	str	r2, [r3, #0]
 801661a:	f3bf 8f4f 	dsb	sy
 801661e:	f3bf 8f6f 	isb	sy
 8016622:	e009      	b.n	8016638 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8016624:	68fb      	ldr	r3, [r7, #12]
 8016626:	3310      	adds	r3, #16
 8016628:	4618      	mov	r0, r3
 801662a:	f7ff fb0b 	bl	8015c44 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801662e:	68fb      	ldr	r3, [r7, #12]
 8016630:	3324      	adds	r3, #36	; 0x24
 8016632:	4618      	mov	r0, r3
 8016634:	f7ff fb06 	bl	8015c44 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8016638:	f7ff fcf0 	bl	801601c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801663c:	2301      	movs	r3, #1
}
 801663e:	4618      	mov	r0, r3
 8016640:	3710      	adds	r7, #16
 8016642:	46bd      	mov	sp, r7
 8016644:	bd80      	pop	{r7, pc}
 8016646:	bf00      	nop
 8016648:	e000ed04 	.word	0xe000ed04

0801664c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 801664c:	b580      	push	{r7, lr}
 801664e:	b08e      	sub	sp, #56	; 0x38
 8016650:	af02      	add	r7, sp, #8
 8016652:	60f8      	str	r0, [r7, #12]
 8016654:	60b9      	str	r1, [r7, #8]
 8016656:	607a      	str	r2, [r7, #4]
 8016658:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801665a:	68fb      	ldr	r3, [r7, #12]
 801665c:	2b00      	cmp	r3, #0
 801665e:	d10b      	bne.n	8016678 <xQueueGenericCreateStatic+0x2c>
 8016660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016664:	b672      	cpsid	i
 8016666:	f383 8811 	msr	BASEPRI, r3
 801666a:	f3bf 8f6f 	isb	sy
 801666e:	f3bf 8f4f 	dsb	sy
 8016672:	b662      	cpsie	i
 8016674:	62bb      	str	r3, [r7, #40]	; 0x28
 8016676:	e7fe      	b.n	8016676 <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8016678:	683b      	ldr	r3, [r7, #0]
 801667a:	2b00      	cmp	r3, #0
 801667c:	d10b      	bne.n	8016696 <xQueueGenericCreateStatic+0x4a>
 801667e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016682:	b672      	cpsid	i
 8016684:	f383 8811 	msr	BASEPRI, r3
 8016688:	f3bf 8f6f 	isb	sy
 801668c:	f3bf 8f4f 	dsb	sy
 8016690:	b662      	cpsie	i
 8016692:	627b      	str	r3, [r7, #36]	; 0x24
 8016694:	e7fe      	b.n	8016694 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8016696:	687b      	ldr	r3, [r7, #4]
 8016698:	2b00      	cmp	r3, #0
 801669a:	d002      	beq.n	80166a2 <xQueueGenericCreateStatic+0x56>
 801669c:	68bb      	ldr	r3, [r7, #8]
 801669e:	2b00      	cmp	r3, #0
 80166a0:	d001      	beq.n	80166a6 <xQueueGenericCreateStatic+0x5a>
 80166a2:	2301      	movs	r3, #1
 80166a4:	e000      	b.n	80166a8 <xQueueGenericCreateStatic+0x5c>
 80166a6:	2300      	movs	r3, #0
 80166a8:	2b00      	cmp	r3, #0
 80166aa:	d10b      	bne.n	80166c4 <xQueueGenericCreateStatic+0x78>
 80166ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80166b0:	b672      	cpsid	i
 80166b2:	f383 8811 	msr	BASEPRI, r3
 80166b6:	f3bf 8f6f 	isb	sy
 80166ba:	f3bf 8f4f 	dsb	sy
 80166be:	b662      	cpsie	i
 80166c0:	623b      	str	r3, [r7, #32]
 80166c2:	e7fe      	b.n	80166c2 <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80166c4:	687b      	ldr	r3, [r7, #4]
 80166c6:	2b00      	cmp	r3, #0
 80166c8:	d102      	bne.n	80166d0 <xQueueGenericCreateStatic+0x84>
 80166ca:	68bb      	ldr	r3, [r7, #8]
 80166cc:	2b00      	cmp	r3, #0
 80166ce:	d101      	bne.n	80166d4 <xQueueGenericCreateStatic+0x88>
 80166d0:	2301      	movs	r3, #1
 80166d2:	e000      	b.n	80166d6 <xQueueGenericCreateStatic+0x8a>
 80166d4:	2300      	movs	r3, #0
 80166d6:	2b00      	cmp	r3, #0
 80166d8:	d10b      	bne.n	80166f2 <xQueueGenericCreateStatic+0xa6>
 80166da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80166de:	b672      	cpsid	i
 80166e0:	f383 8811 	msr	BASEPRI, r3
 80166e4:	f3bf 8f6f 	isb	sy
 80166e8:	f3bf 8f4f 	dsb	sy
 80166ec:	b662      	cpsie	i
 80166ee:	61fb      	str	r3, [r7, #28]
 80166f0:	e7fe      	b.n	80166f0 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80166f2:	2348      	movs	r3, #72	; 0x48
 80166f4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80166f6:	697b      	ldr	r3, [r7, #20]
 80166f8:	2b48      	cmp	r3, #72	; 0x48
 80166fa:	d00b      	beq.n	8016714 <xQueueGenericCreateStatic+0xc8>
 80166fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016700:	b672      	cpsid	i
 8016702:	f383 8811 	msr	BASEPRI, r3
 8016706:	f3bf 8f6f 	isb	sy
 801670a:	f3bf 8f4f 	dsb	sy
 801670e:	b662      	cpsie	i
 8016710:	61bb      	str	r3, [r7, #24]
 8016712:	e7fe      	b.n	8016712 <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8016714:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8016716:	683b      	ldr	r3, [r7, #0]
 8016718:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 801671a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801671c:	2b00      	cmp	r3, #0
 801671e:	d00d      	beq.n	801673c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8016720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016722:	2201      	movs	r2, #1
 8016724:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8016728:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801672c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801672e:	9300      	str	r3, [sp, #0]
 8016730:	4613      	mov	r3, r2
 8016732:	687a      	ldr	r2, [r7, #4]
 8016734:	68b9      	ldr	r1, [r7, #8]
 8016736:	68f8      	ldr	r0, [r7, #12]
 8016738:	f000 f846 	bl	80167c8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801673c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 801673e:	4618      	mov	r0, r3
 8016740:	3730      	adds	r7, #48	; 0x30
 8016742:	46bd      	mov	sp, r7
 8016744:	bd80      	pop	{r7, pc}

08016746 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8016746:	b580      	push	{r7, lr}
 8016748:	b08a      	sub	sp, #40	; 0x28
 801674a:	af02      	add	r7, sp, #8
 801674c:	60f8      	str	r0, [r7, #12]
 801674e:	60b9      	str	r1, [r7, #8]
 8016750:	4613      	mov	r3, r2
 8016752:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8016754:	68fb      	ldr	r3, [r7, #12]
 8016756:	2b00      	cmp	r3, #0
 8016758:	d10b      	bne.n	8016772 <xQueueGenericCreate+0x2c>
 801675a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801675e:	b672      	cpsid	i
 8016760:	f383 8811 	msr	BASEPRI, r3
 8016764:	f3bf 8f6f 	isb	sy
 8016768:	f3bf 8f4f 	dsb	sy
 801676c:	b662      	cpsie	i
 801676e:	613b      	str	r3, [r7, #16]
 8016770:	e7fe      	b.n	8016770 <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8016772:	68bb      	ldr	r3, [r7, #8]
 8016774:	2b00      	cmp	r3, #0
 8016776:	d102      	bne.n	801677e <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8016778:	2300      	movs	r3, #0
 801677a:	61fb      	str	r3, [r7, #28]
 801677c:	e004      	b.n	8016788 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801677e:	68fb      	ldr	r3, [r7, #12]
 8016780:	68ba      	ldr	r2, [r7, #8]
 8016782:	fb02 f303 	mul.w	r3, r2, r3
 8016786:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8016788:	69fb      	ldr	r3, [r7, #28]
 801678a:	3348      	adds	r3, #72	; 0x48
 801678c:	4618      	mov	r0, r3
 801678e:	f7ff fd13 	bl	80161b8 <pvPortMalloc>
 8016792:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8016794:	69bb      	ldr	r3, [r7, #24]
 8016796:	2b00      	cmp	r3, #0
 8016798:	d011      	beq.n	80167be <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801679a:	69bb      	ldr	r3, [r7, #24]
 801679c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801679e:	697b      	ldr	r3, [r7, #20]
 80167a0:	3348      	adds	r3, #72	; 0x48
 80167a2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80167a4:	69bb      	ldr	r3, [r7, #24]
 80167a6:	2200      	movs	r2, #0
 80167a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80167ac:	79fa      	ldrb	r2, [r7, #7]
 80167ae:	69bb      	ldr	r3, [r7, #24]
 80167b0:	9300      	str	r3, [sp, #0]
 80167b2:	4613      	mov	r3, r2
 80167b4:	697a      	ldr	r2, [r7, #20]
 80167b6:	68b9      	ldr	r1, [r7, #8]
 80167b8:	68f8      	ldr	r0, [r7, #12]
 80167ba:	f000 f805 	bl	80167c8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80167be:	69bb      	ldr	r3, [r7, #24]
	}
 80167c0:	4618      	mov	r0, r3
 80167c2:	3720      	adds	r7, #32
 80167c4:	46bd      	mov	sp, r7
 80167c6:	bd80      	pop	{r7, pc}

080167c8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80167c8:	b580      	push	{r7, lr}
 80167ca:	b084      	sub	sp, #16
 80167cc:	af00      	add	r7, sp, #0
 80167ce:	60f8      	str	r0, [r7, #12]
 80167d0:	60b9      	str	r1, [r7, #8]
 80167d2:	607a      	str	r2, [r7, #4]
 80167d4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80167d6:	68bb      	ldr	r3, [r7, #8]
 80167d8:	2b00      	cmp	r3, #0
 80167da:	d103      	bne.n	80167e4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80167dc:	69bb      	ldr	r3, [r7, #24]
 80167de:	69ba      	ldr	r2, [r7, #24]
 80167e0:	601a      	str	r2, [r3, #0]
 80167e2:	e002      	b.n	80167ea <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80167e4:	69bb      	ldr	r3, [r7, #24]
 80167e6:	687a      	ldr	r2, [r7, #4]
 80167e8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80167ea:	69bb      	ldr	r3, [r7, #24]
 80167ec:	68fa      	ldr	r2, [r7, #12]
 80167ee:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80167f0:	69bb      	ldr	r3, [r7, #24]
 80167f2:	68ba      	ldr	r2, [r7, #8]
 80167f4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80167f6:	2101      	movs	r1, #1
 80167f8:	69b8      	ldr	r0, [r7, #24]
 80167fa:	f7ff febd 	bl	8016578 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80167fe:	bf00      	nop
 8016800:	3710      	adds	r7, #16
 8016802:	46bd      	mov	sp, r7
 8016804:	bd80      	pop	{r7, pc}

08016806 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8016806:	b580      	push	{r7, lr}
 8016808:	b082      	sub	sp, #8
 801680a:	af00      	add	r7, sp, #0
 801680c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 801680e:	687b      	ldr	r3, [r7, #4]
 8016810:	2b00      	cmp	r3, #0
 8016812:	d00e      	beq.n	8016832 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8016814:	687b      	ldr	r3, [r7, #4]
 8016816:	2200      	movs	r2, #0
 8016818:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 801681a:	687b      	ldr	r3, [r7, #4]
 801681c:	2200      	movs	r2, #0
 801681e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8016820:	687b      	ldr	r3, [r7, #4]
 8016822:	2200      	movs	r2, #0
 8016824:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8016826:	2300      	movs	r3, #0
 8016828:	2200      	movs	r2, #0
 801682a:	2100      	movs	r1, #0
 801682c:	6878      	ldr	r0, [r7, #4]
 801682e:	f000 f837 	bl	80168a0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8016832:	bf00      	nop
 8016834:	3708      	adds	r7, #8
 8016836:	46bd      	mov	sp, r7
 8016838:	bd80      	pop	{r7, pc}

0801683a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 801683a:	b580      	push	{r7, lr}
 801683c:	b086      	sub	sp, #24
 801683e:	af00      	add	r7, sp, #0
 8016840:	4603      	mov	r3, r0
 8016842:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8016844:	2301      	movs	r3, #1
 8016846:	617b      	str	r3, [r7, #20]
 8016848:	2300      	movs	r3, #0
 801684a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 801684c:	79fb      	ldrb	r3, [r7, #7]
 801684e:	461a      	mov	r2, r3
 8016850:	6939      	ldr	r1, [r7, #16]
 8016852:	6978      	ldr	r0, [r7, #20]
 8016854:	f7ff ff77 	bl	8016746 <xQueueGenericCreate>
 8016858:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 801685a:	68f8      	ldr	r0, [r7, #12]
 801685c:	f7ff ffd3 	bl	8016806 <prvInitialiseMutex>

		return xNewQueue;
 8016860:	68fb      	ldr	r3, [r7, #12]
	}
 8016862:	4618      	mov	r0, r3
 8016864:	3718      	adds	r7, #24
 8016866:	46bd      	mov	sp, r7
 8016868:	bd80      	pop	{r7, pc}

0801686a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 801686a:	b580      	push	{r7, lr}
 801686c:	b088      	sub	sp, #32
 801686e:	af02      	add	r7, sp, #8
 8016870:	4603      	mov	r3, r0
 8016872:	6039      	str	r1, [r7, #0]
 8016874:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8016876:	2301      	movs	r3, #1
 8016878:	617b      	str	r3, [r7, #20]
 801687a:	2300      	movs	r3, #0
 801687c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 801687e:	79fb      	ldrb	r3, [r7, #7]
 8016880:	9300      	str	r3, [sp, #0]
 8016882:	683b      	ldr	r3, [r7, #0]
 8016884:	2200      	movs	r2, #0
 8016886:	6939      	ldr	r1, [r7, #16]
 8016888:	6978      	ldr	r0, [r7, #20]
 801688a:	f7ff fedf 	bl	801664c <xQueueGenericCreateStatic>
 801688e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8016890:	68f8      	ldr	r0, [r7, #12]
 8016892:	f7ff ffb8 	bl	8016806 <prvInitialiseMutex>

		return xNewQueue;
 8016896:	68fb      	ldr	r3, [r7, #12]
	}
 8016898:	4618      	mov	r0, r3
 801689a:	3718      	adds	r7, #24
 801689c:	46bd      	mov	sp, r7
 801689e:	bd80      	pop	{r7, pc}

080168a0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80168a0:	b580      	push	{r7, lr}
 80168a2:	b08e      	sub	sp, #56	; 0x38
 80168a4:	af00      	add	r7, sp, #0
 80168a6:	60f8      	str	r0, [r7, #12]
 80168a8:	60b9      	str	r1, [r7, #8]
 80168aa:	607a      	str	r2, [r7, #4]
 80168ac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80168ae:	2300      	movs	r3, #0
 80168b0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80168b2:	68fb      	ldr	r3, [r7, #12]
 80168b4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80168b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168b8:	2b00      	cmp	r3, #0
 80168ba:	d10b      	bne.n	80168d4 <xQueueGenericSend+0x34>
 80168bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80168c0:	b672      	cpsid	i
 80168c2:	f383 8811 	msr	BASEPRI, r3
 80168c6:	f3bf 8f6f 	isb	sy
 80168ca:	f3bf 8f4f 	dsb	sy
 80168ce:	b662      	cpsie	i
 80168d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80168d2:	e7fe      	b.n	80168d2 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80168d4:	68bb      	ldr	r3, [r7, #8]
 80168d6:	2b00      	cmp	r3, #0
 80168d8:	d103      	bne.n	80168e2 <xQueueGenericSend+0x42>
 80168da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80168de:	2b00      	cmp	r3, #0
 80168e0:	d101      	bne.n	80168e6 <xQueueGenericSend+0x46>
 80168e2:	2301      	movs	r3, #1
 80168e4:	e000      	b.n	80168e8 <xQueueGenericSend+0x48>
 80168e6:	2300      	movs	r3, #0
 80168e8:	2b00      	cmp	r3, #0
 80168ea:	d10b      	bne.n	8016904 <xQueueGenericSend+0x64>
 80168ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80168f0:	b672      	cpsid	i
 80168f2:	f383 8811 	msr	BASEPRI, r3
 80168f6:	f3bf 8f6f 	isb	sy
 80168fa:	f3bf 8f4f 	dsb	sy
 80168fe:	b662      	cpsie	i
 8016900:	627b      	str	r3, [r7, #36]	; 0x24
 8016902:	e7fe      	b.n	8016902 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8016904:	683b      	ldr	r3, [r7, #0]
 8016906:	2b02      	cmp	r3, #2
 8016908:	d103      	bne.n	8016912 <xQueueGenericSend+0x72>
 801690a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801690c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801690e:	2b01      	cmp	r3, #1
 8016910:	d101      	bne.n	8016916 <xQueueGenericSend+0x76>
 8016912:	2301      	movs	r3, #1
 8016914:	e000      	b.n	8016918 <xQueueGenericSend+0x78>
 8016916:	2300      	movs	r3, #0
 8016918:	2b00      	cmp	r3, #0
 801691a:	d10b      	bne.n	8016934 <xQueueGenericSend+0x94>
 801691c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016920:	b672      	cpsid	i
 8016922:	f383 8811 	msr	BASEPRI, r3
 8016926:	f3bf 8f6f 	isb	sy
 801692a:	f3bf 8f4f 	dsb	sy
 801692e:	b662      	cpsie	i
 8016930:	623b      	str	r3, [r7, #32]
 8016932:	e7fe      	b.n	8016932 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8016934:	f001 faa6 	bl	8017e84 <xTaskGetSchedulerState>
 8016938:	4603      	mov	r3, r0
 801693a:	2b00      	cmp	r3, #0
 801693c:	d102      	bne.n	8016944 <xQueueGenericSend+0xa4>
 801693e:	687b      	ldr	r3, [r7, #4]
 8016940:	2b00      	cmp	r3, #0
 8016942:	d101      	bne.n	8016948 <xQueueGenericSend+0xa8>
 8016944:	2301      	movs	r3, #1
 8016946:	e000      	b.n	801694a <xQueueGenericSend+0xaa>
 8016948:	2300      	movs	r3, #0
 801694a:	2b00      	cmp	r3, #0
 801694c:	d10b      	bne.n	8016966 <xQueueGenericSend+0xc6>
 801694e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016952:	b672      	cpsid	i
 8016954:	f383 8811 	msr	BASEPRI, r3
 8016958:	f3bf 8f6f 	isb	sy
 801695c:	f3bf 8f4f 	dsb	sy
 8016960:	b662      	cpsie	i
 8016962:	61fb      	str	r3, [r7, #28]
 8016964:	e7fe      	b.n	8016964 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8016966:	f7ff fb27 	bl	8015fb8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801696a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801696c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801696e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016972:	429a      	cmp	r2, r3
 8016974:	d302      	bcc.n	801697c <xQueueGenericSend+0xdc>
 8016976:	683b      	ldr	r3, [r7, #0]
 8016978:	2b02      	cmp	r3, #2
 801697a:	d129      	bne.n	80169d0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801697c:	683a      	ldr	r2, [r7, #0]
 801697e:	68b9      	ldr	r1, [r7, #8]
 8016980:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016982:	f000 fbae 	bl	80170e2 <prvCopyDataToQueue>
 8016986:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801698a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801698c:	2b00      	cmp	r3, #0
 801698e:	d010      	beq.n	80169b2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016992:	3324      	adds	r3, #36	; 0x24
 8016994:	4618      	mov	r0, r3
 8016996:	f001 f8b7 	bl	8017b08 <xTaskRemoveFromEventList>
 801699a:	4603      	mov	r3, r0
 801699c:	2b00      	cmp	r3, #0
 801699e:	d013      	beq.n	80169c8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80169a0:	4b3f      	ldr	r3, [pc, #252]	; (8016aa0 <xQueueGenericSend+0x200>)
 80169a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80169a6:	601a      	str	r2, [r3, #0]
 80169a8:	f3bf 8f4f 	dsb	sy
 80169ac:	f3bf 8f6f 	isb	sy
 80169b0:	e00a      	b.n	80169c8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80169b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80169b4:	2b00      	cmp	r3, #0
 80169b6:	d007      	beq.n	80169c8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80169b8:	4b39      	ldr	r3, [pc, #228]	; (8016aa0 <xQueueGenericSend+0x200>)
 80169ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80169be:	601a      	str	r2, [r3, #0]
 80169c0:	f3bf 8f4f 	dsb	sy
 80169c4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80169c8:	f7ff fb28 	bl	801601c <vPortExitCritical>
				return pdPASS;
 80169cc:	2301      	movs	r3, #1
 80169ce:	e063      	b.n	8016a98 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80169d0:	687b      	ldr	r3, [r7, #4]
 80169d2:	2b00      	cmp	r3, #0
 80169d4:	d103      	bne.n	80169de <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80169d6:	f7ff fb21 	bl	801601c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80169da:	2300      	movs	r3, #0
 80169dc:	e05c      	b.n	8016a98 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80169de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80169e0:	2b00      	cmp	r3, #0
 80169e2:	d106      	bne.n	80169f2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80169e4:	f107 0314 	add.w	r3, r7, #20
 80169e8:	4618      	mov	r0, r3
 80169ea:	f001 f8f1 	bl	8017bd0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80169ee:	2301      	movs	r3, #1
 80169f0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80169f2:	f7ff fb13 	bl	801601c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80169f6:	f000 fe7d 	bl	80176f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80169fa:	f7ff fadd 	bl	8015fb8 <vPortEnterCritical>
 80169fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a00:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016a04:	b25b      	sxtb	r3, r3
 8016a06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016a0a:	d103      	bne.n	8016a14 <xQueueGenericSend+0x174>
 8016a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a0e:	2200      	movs	r2, #0
 8016a10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8016a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a16:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016a1a:	b25b      	sxtb	r3, r3
 8016a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016a20:	d103      	bne.n	8016a2a <xQueueGenericSend+0x18a>
 8016a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a24:	2200      	movs	r2, #0
 8016a26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8016a2a:	f7ff faf7 	bl	801601c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8016a2e:	1d3a      	adds	r2, r7, #4
 8016a30:	f107 0314 	add.w	r3, r7, #20
 8016a34:	4611      	mov	r1, r2
 8016a36:	4618      	mov	r0, r3
 8016a38:	f001 f8e0 	bl	8017bfc <xTaskCheckForTimeOut>
 8016a3c:	4603      	mov	r3, r0
 8016a3e:	2b00      	cmp	r3, #0
 8016a40:	d124      	bne.n	8016a8c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8016a42:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016a44:	f000 fc45 	bl	80172d2 <prvIsQueueFull>
 8016a48:	4603      	mov	r3, r0
 8016a4a:	2b00      	cmp	r3, #0
 8016a4c:	d018      	beq.n	8016a80 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8016a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a50:	3310      	adds	r3, #16
 8016a52:	687a      	ldr	r2, [r7, #4]
 8016a54:	4611      	mov	r1, r2
 8016a56:	4618      	mov	r0, r3
 8016a58:	f001 f830 	bl	8017abc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8016a5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016a5e:	f000 fbd0 	bl	8017202 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8016a62:	f000 fe55 	bl	8017710 <xTaskResumeAll>
 8016a66:	4603      	mov	r3, r0
 8016a68:	2b00      	cmp	r3, #0
 8016a6a:	f47f af7c 	bne.w	8016966 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8016a6e:	4b0c      	ldr	r3, [pc, #48]	; (8016aa0 <xQueueGenericSend+0x200>)
 8016a70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016a74:	601a      	str	r2, [r3, #0]
 8016a76:	f3bf 8f4f 	dsb	sy
 8016a7a:	f3bf 8f6f 	isb	sy
 8016a7e:	e772      	b.n	8016966 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8016a80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016a82:	f000 fbbe 	bl	8017202 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8016a86:	f000 fe43 	bl	8017710 <xTaskResumeAll>
 8016a8a:	e76c      	b.n	8016966 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8016a8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016a8e:	f000 fbb8 	bl	8017202 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8016a92:	f000 fe3d 	bl	8017710 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8016a96:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8016a98:	4618      	mov	r0, r3
 8016a9a:	3738      	adds	r7, #56	; 0x38
 8016a9c:	46bd      	mov	sp, r7
 8016a9e:	bd80      	pop	{r7, pc}
 8016aa0:	e000ed04 	.word	0xe000ed04

08016aa4 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8016aa4:	b580      	push	{r7, lr}
 8016aa6:	b08e      	sub	sp, #56	; 0x38
 8016aa8:	af00      	add	r7, sp, #0
 8016aaa:	6078      	str	r0, [r7, #4]
 8016aac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8016aae:	687b      	ldr	r3, [r7, #4]
 8016ab0:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8016ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ab4:	2b00      	cmp	r3, #0
 8016ab6:	d10b      	bne.n	8016ad0 <xQueueGiveFromISR+0x2c>
 8016ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016abc:	b672      	cpsid	i
 8016abe:	f383 8811 	msr	BASEPRI, r3
 8016ac2:	f3bf 8f6f 	isb	sy
 8016ac6:	f3bf 8f4f 	dsb	sy
 8016aca:	b662      	cpsie	i
 8016acc:	623b      	str	r3, [r7, #32]
 8016ace:	e7fe      	b.n	8016ace <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8016ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016ad4:	2b00      	cmp	r3, #0
 8016ad6:	d00b      	beq.n	8016af0 <xQueueGiveFromISR+0x4c>
 8016ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016adc:	b672      	cpsid	i
 8016ade:	f383 8811 	msr	BASEPRI, r3
 8016ae2:	f3bf 8f6f 	isb	sy
 8016ae6:	f3bf 8f4f 	dsb	sy
 8016aea:	b662      	cpsie	i
 8016aec:	61fb      	str	r3, [r7, #28]
 8016aee:	e7fe      	b.n	8016aee <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8016af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016af2:	681b      	ldr	r3, [r3, #0]
 8016af4:	2b00      	cmp	r3, #0
 8016af6:	d103      	bne.n	8016b00 <xQueueGiveFromISR+0x5c>
 8016af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016afa:	689b      	ldr	r3, [r3, #8]
 8016afc:	2b00      	cmp	r3, #0
 8016afe:	d101      	bne.n	8016b04 <xQueueGiveFromISR+0x60>
 8016b00:	2301      	movs	r3, #1
 8016b02:	e000      	b.n	8016b06 <xQueueGiveFromISR+0x62>
 8016b04:	2300      	movs	r3, #0
 8016b06:	2b00      	cmp	r3, #0
 8016b08:	d10b      	bne.n	8016b22 <xQueueGiveFromISR+0x7e>
 8016b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016b0e:	b672      	cpsid	i
 8016b10:	f383 8811 	msr	BASEPRI, r3
 8016b14:	f3bf 8f6f 	isb	sy
 8016b18:	f3bf 8f4f 	dsb	sy
 8016b1c:	b662      	cpsie	i
 8016b1e:	61bb      	str	r3, [r7, #24]
 8016b20:	e7fe      	b.n	8016b20 <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8016b22:	f7ff fb07 	bl	8016134 <vPortValidateInterruptPriority>
	__asm volatile
 8016b26:	f3ef 8211 	mrs	r2, BASEPRI
 8016b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016b2e:	b672      	cpsid	i
 8016b30:	f383 8811 	msr	BASEPRI, r3
 8016b34:	f3bf 8f6f 	isb	sy
 8016b38:	f3bf 8f4f 	dsb	sy
 8016b3c:	b662      	cpsie	i
 8016b3e:	617a      	str	r2, [r7, #20]
 8016b40:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8016b42:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8016b44:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016b4a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8016b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8016b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b52:	429a      	cmp	r2, r3
 8016b54:	d92b      	bls.n	8016bae <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8016b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016b5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8016b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b62:	1c5a      	adds	r2, r3, #1
 8016b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b66:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8016b68:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8016b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016b70:	d112      	bne.n	8016b98 <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016b76:	2b00      	cmp	r3, #0
 8016b78:	d016      	beq.n	8016ba8 <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b7c:	3324      	adds	r3, #36	; 0x24
 8016b7e:	4618      	mov	r0, r3
 8016b80:	f000 ffc2 	bl	8017b08 <xTaskRemoveFromEventList>
 8016b84:	4603      	mov	r3, r0
 8016b86:	2b00      	cmp	r3, #0
 8016b88:	d00e      	beq.n	8016ba8 <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8016b8a:	683b      	ldr	r3, [r7, #0]
 8016b8c:	2b00      	cmp	r3, #0
 8016b8e:	d00b      	beq.n	8016ba8 <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8016b90:	683b      	ldr	r3, [r7, #0]
 8016b92:	2201      	movs	r2, #1
 8016b94:	601a      	str	r2, [r3, #0]
 8016b96:	e007      	b.n	8016ba8 <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8016b98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016b9c:	3301      	adds	r3, #1
 8016b9e:	b2db      	uxtb	r3, r3
 8016ba0:	b25a      	sxtb	r2, r3
 8016ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ba4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8016ba8:	2301      	movs	r3, #1
 8016baa:	637b      	str	r3, [r7, #52]	; 0x34
 8016bac:	e001      	b.n	8016bb2 <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8016bae:	2300      	movs	r3, #0
 8016bb0:	637b      	str	r3, [r7, #52]	; 0x34
 8016bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016bb4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8016bb6:	68fb      	ldr	r3, [r7, #12]
 8016bb8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8016bbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8016bbe:	4618      	mov	r0, r3
 8016bc0:	3738      	adds	r7, #56	; 0x38
 8016bc2:	46bd      	mov	sp, r7
 8016bc4:	bd80      	pop	{r7, pc}
	...

08016bc8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8016bc8:	b580      	push	{r7, lr}
 8016bca:	b08c      	sub	sp, #48	; 0x30
 8016bcc:	af00      	add	r7, sp, #0
 8016bce:	60f8      	str	r0, [r7, #12]
 8016bd0:	60b9      	str	r1, [r7, #8]
 8016bd2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8016bd4:	2300      	movs	r3, #0
 8016bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8016bd8:	68fb      	ldr	r3, [r7, #12]
 8016bda:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8016bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016bde:	2b00      	cmp	r3, #0
 8016be0:	d10b      	bne.n	8016bfa <xQueueReceive+0x32>
	__asm volatile
 8016be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016be6:	b672      	cpsid	i
 8016be8:	f383 8811 	msr	BASEPRI, r3
 8016bec:	f3bf 8f6f 	isb	sy
 8016bf0:	f3bf 8f4f 	dsb	sy
 8016bf4:	b662      	cpsie	i
 8016bf6:	623b      	str	r3, [r7, #32]
 8016bf8:	e7fe      	b.n	8016bf8 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016bfa:	68bb      	ldr	r3, [r7, #8]
 8016bfc:	2b00      	cmp	r3, #0
 8016bfe:	d103      	bne.n	8016c08 <xQueueReceive+0x40>
 8016c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016c04:	2b00      	cmp	r3, #0
 8016c06:	d101      	bne.n	8016c0c <xQueueReceive+0x44>
 8016c08:	2301      	movs	r3, #1
 8016c0a:	e000      	b.n	8016c0e <xQueueReceive+0x46>
 8016c0c:	2300      	movs	r3, #0
 8016c0e:	2b00      	cmp	r3, #0
 8016c10:	d10b      	bne.n	8016c2a <xQueueReceive+0x62>
 8016c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016c16:	b672      	cpsid	i
 8016c18:	f383 8811 	msr	BASEPRI, r3
 8016c1c:	f3bf 8f6f 	isb	sy
 8016c20:	f3bf 8f4f 	dsb	sy
 8016c24:	b662      	cpsie	i
 8016c26:	61fb      	str	r3, [r7, #28]
 8016c28:	e7fe      	b.n	8016c28 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8016c2a:	f001 f92b 	bl	8017e84 <xTaskGetSchedulerState>
 8016c2e:	4603      	mov	r3, r0
 8016c30:	2b00      	cmp	r3, #0
 8016c32:	d102      	bne.n	8016c3a <xQueueReceive+0x72>
 8016c34:	687b      	ldr	r3, [r7, #4]
 8016c36:	2b00      	cmp	r3, #0
 8016c38:	d101      	bne.n	8016c3e <xQueueReceive+0x76>
 8016c3a:	2301      	movs	r3, #1
 8016c3c:	e000      	b.n	8016c40 <xQueueReceive+0x78>
 8016c3e:	2300      	movs	r3, #0
 8016c40:	2b00      	cmp	r3, #0
 8016c42:	d10b      	bne.n	8016c5c <xQueueReceive+0x94>
 8016c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016c48:	b672      	cpsid	i
 8016c4a:	f383 8811 	msr	BASEPRI, r3
 8016c4e:	f3bf 8f6f 	isb	sy
 8016c52:	f3bf 8f4f 	dsb	sy
 8016c56:	b662      	cpsie	i
 8016c58:	61bb      	str	r3, [r7, #24]
 8016c5a:	e7fe      	b.n	8016c5a <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8016c5c:	f7ff f9ac 	bl	8015fb8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016c64:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8016c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c68:	2b00      	cmp	r3, #0
 8016c6a:	d01f      	beq.n	8016cac <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8016c6c:	68b9      	ldr	r1, [r7, #8]
 8016c6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016c70:	f000 faa1 	bl	80171b6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8016c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c76:	1e5a      	subs	r2, r3, #1
 8016c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c7a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c7e:	691b      	ldr	r3, [r3, #16]
 8016c80:	2b00      	cmp	r3, #0
 8016c82:	d00f      	beq.n	8016ca4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c86:	3310      	adds	r3, #16
 8016c88:	4618      	mov	r0, r3
 8016c8a:	f000 ff3d 	bl	8017b08 <xTaskRemoveFromEventList>
 8016c8e:	4603      	mov	r3, r0
 8016c90:	2b00      	cmp	r3, #0
 8016c92:	d007      	beq.n	8016ca4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8016c94:	4b3c      	ldr	r3, [pc, #240]	; (8016d88 <xQueueReceive+0x1c0>)
 8016c96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016c9a:	601a      	str	r2, [r3, #0]
 8016c9c:	f3bf 8f4f 	dsb	sy
 8016ca0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8016ca4:	f7ff f9ba 	bl	801601c <vPortExitCritical>
				return pdPASS;
 8016ca8:	2301      	movs	r3, #1
 8016caa:	e069      	b.n	8016d80 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8016cac:	687b      	ldr	r3, [r7, #4]
 8016cae:	2b00      	cmp	r3, #0
 8016cb0:	d103      	bne.n	8016cba <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8016cb2:	f7ff f9b3 	bl	801601c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8016cb6:	2300      	movs	r3, #0
 8016cb8:	e062      	b.n	8016d80 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8016cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016cbc:	2b00      	cmp	r3, #0
 8016cbe:	d106      	bne.n	8016cce <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8016cc0:	f107 0310 	add.w	r3, r7, #16
 8016cc4:	4618      	mov	r0, r3
 8016cc6:	f000 ff83 	bl	8017bd0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8016cca:	2301      	movs	r3, #1
 8016ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8016cce:	f7ff f9a5 	bl	801601c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8016cd2:	f000 fd0f 	bl	80176f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8016cd6:	f7ff f96f 	bl	8015fb8 <vPortEnterCritical>
 8016cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016cdc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016ce0:	b25b      	sxtb	r3, r3
 8016ce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016ce6:	d103      	bne.n	8016cf0 <xQueueReceive+0x128>
 8016ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016cea:	2200      	movs	r2, #0
 8016cec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8016cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016cf2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016cf6:	b25b      	sxtb	r3, r3
 8016cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016cfc:	d103      	bne.n	8016d06 <xQueueReceive+0x13e>
 8016cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d00:	2200      	movs	r2, #0
 8016d02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8016d06:	f7ff f989 	bl	801601c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8016d0a:	1d3a      	adds	r2, r7, #4
 8016d0c:	f107 0310 	add.w	r3, r7, #16
 8016d10:	4611      	mov	r1, r2
 8016d12:	4618      	mov	r0, r3
 8016d14:	f000 ff72 	bl	8017bfc <xTaskCheckForTimeOut>
 8016d18:	4603      	mov	r3, r0
 8016d1a:	2b00      	cmp	r3, #0
 8016d1c:	d123      	bne.n	8016d66 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8016d1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016d20:	f000 fac1 	bl	80172a6 <prvIsQueueEmpty>
 8016d24:	4603      	mov	r3, r0
 8016d26:	2b00      	cmp	r3, #0
 8016d28:	d017      	beq.n	8016d5a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8016d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d2c:	3324      	adds	r3, #36	; 0x24
 8016d2e:	687a      	ldr	r2, [r7, #4]
 8016d30:	4611      	mov	r1, r2
 8016d32:	4618      	mov	r0, r3
 8016d34:	f000 fec2 	bl	8017abc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8016d38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016d3a:	f000 fa62 	bl	8017202 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8016d3e:	f000 fce7 	bl	8017710 <xTaskResumeAll>
 8016d42:	4603      	mov	r3, r0
 8016d44:	2b00      	cmp	r3, #0
 8016d46:	d189      	bne.n	8016c5c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8016d48:	4b0f      	ldr	r3, [pc, #60]	; (8016d88 <xQueueReceive+0x1c0>)
 8016d4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016d4e:	601a      	str	r2, [r3, #0]
 8016d50:	f3bf 8f4f 	dsb	sy
 8016d54:	f3bf 8f6f 	isb	sy
 8016d58:	e780      	b.n	8016c5c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8016d5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016d5c:	f000 fa51 	bl	8017202 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8016d60:	f000 fcd6 	bl	8017710 <xTaskResumeAll>
 8016d64:	e77a      	b.n	8016c5c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8016d66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016d68:	f000 fa4b 	bl	8017202 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8016d6c:	f000 fcd0 	bl	8017710 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8016d70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016d72:	f000 fa98 	bl	80172a6 <prvIsQueueEmpty>
 8016d76:	4603      	mov	r3, r0
 8016d78:	2b00      	cmp	r3, #0
 8016d7a:	f43f af6f 	beq.w	8016c5c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8016d7e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8016d80:	4618      	mov	r0, r3
 8016d82:	3730      	adds	r7, #48	; 0x30
 8016d84:	46bd      	mov	sp, r7
 8016d86:	bd80      	pop	{r7, pc}
 8016d88:	e000ed04 	.word	0xe000ed04

08016d8c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8016d8c:	b580      	push	{r7, lr}
 8016d8e:	b08e      	sub	sp, #56	; 0x38
 8016d90:	af00      	add	r7, sp, #0
 8016d92:	6078      	str	r0, [r7, #4]
 8016d94:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8016d96:	2300      	movs	r3, #0
 8016d98:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8016d9a:	687b      	ldr	r3, [r7, #4]
 8016d9c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8016d9e:	2300      	movs	r3, #0
 8016da0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8016da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016da4:	2b00      	cmp	r3, #0
 8016da6:	d10b      	bne.n	8016dc0 <xQueueSemaphoreTake+0x34>
 8016da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016dac:	b672      	cpsid	i
 8016dae:	f383 8811 	msr	BASEPRI, r3
 8016db2:	f3bf 8f6f 	isb	sy
 8016db6:	f3bf 8f4f 	dsb	sy
 8016dba:	b662      	cpsie	i
 8016dbc:	623b      	str	r3, [r7, #32]
 8016dbe:	e7fe      	b.n	8016dbe <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8016dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016dc4:	2b00      	cmp	r3, #0
 8016dc6:	d00b      	beq.n	8016de0 <xQueueSemaphoreTake+0x54>
 8016dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016dcc:	b672      	cpsid	i
 8016dce:	f383 8811 	msr	BASEPRI, r3
 8016dd2:	f3bf 8f6f 	isb	sy
 8016dd6:	f3bf 8f4f 	dsb	sy
 8016dda:	b662      	cpsie	i
 8016ddc:	61fb      	str	r3, [r7, #28]
 8016dde:	e7fe      	b.n	8016dde <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8016de0:	f001 f850 	bl	8017e84 <xTaskGetSchedulerState>
 8016de4:	4603      	mov	r3, r0
 8016de6:	2b00      	cmp	r3, #0
 8016de8:	d102      	bne.n	8016df0 <xQueueSemaphoreTake+0x64>
 8016dea:	683b      	ldr	r3, [r7, #0]
 8016dec:	2b00      	cmp	r3, #0
 8016dee:	d101      	bne.n	8016df4 <xQueueSemaphoreTake+0x68>
 8016df0:	2301      	movs	r3, #1
 8016df2:	e000      	b.n	8016df6 <xQueueSemaphoreTake+0x6a>
 8016df4:	2300      	movs	r3, #0
 8016df6:	2b00      	cmp	r3, #0
 8016df8:	d10b      	bne.n	8016e12 <xQueueSemaphoreTake+0x86>
 8016dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016dfe:	b672      	cpsid	i
 8016e00:	f383 8811 	msr	BASEPRI, r3
 8016e04:	f3bf 8f6f 	isb	sy
 8016e08:	f3bf 8f4f 	dsb	sy
 8016e0c:	b662      	cpsie	i
 8016e0e:	61bb      	str	r3, [r7, #24]
 8016e10:	e7fe      	b.n	8016e10 <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8016e12:	f7ff f8d1 	bl	8015fb8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8016e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016e1a:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8016e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e1e:	2b00      	cmp	r3, #0
 8016e20:	d024      	beq.n	8016e6c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8016e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e24:	1e5a      	subs	r2, r3, #1
 8016e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e28:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8016e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e2c:	681b      	ldr	r3, [r3, #0]
 8016e2e:	2b00      	cmp	r3, #0
 8016e30:	d104      	bne.n	8016e3c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8016e32:	f001 f9e9 	bl	8018208 <pvTaskIncrementMutexHeldCount>
 8016e36:	4602      	mov	r2, r0
 8016e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e3a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e3e:	691b      	ldr	r3, [r3, #16]
 8016e40:	2b00      	cmp	r3, #0
 8016e42:	d00f      	beq.n	8016e64 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e46:	3310      	adds	r3, #16
 8016e48:	4618      	mov	r0, r3
 8016e4a:	f000 fe5d 	bl	8017b08 <xTaskRemoveFromEventList>
 8016e4e:	4603      	mov	r3, r0
 8016e50:	2b00      	cmp	r3, #0
 8016e52:	d007      	beq.n	8016e64 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8016e54:	4b54      	ldr	r3, [pc, #336]	; (8016fa8 <xQueueSemaphoreTake+0x21c>)
 8016e56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016e5a:	601a      	str	r2, [r3, #0]
 8016e5c:	f3bf 8f4f 	dsb	sy
 8016e60:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8016e64:	f7ff f8da 	bl	801601c <vPortExitCritical>
				return pdPASS;
 8016e68:	2301      	movs	r3, #1
 8016e6a:	e098      	b.n	8016f9e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8016e6c:	683b      	ldr	r3, [r7, #0]
 8016e6e:	2b00      	cmp	r3, #0
 8016e70:	d112      	bne.n	8016e98 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8016e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e74:	2b00      	cmp	r3, #0
 8016e76:	d00b      	beq.n	8016e90 <xQueueSemaphoreTake+0x104>
 8016e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e7c:	b672      	cpsid	i
 8016e7e:	f383 8811 	msr	BASEPRI, r3
 8016e82:	f3bf 8f6f 	isb	sy
 8016e86:	f3bf 8f4f 	dsb	sy
 8016e8a:	b662      	cpsie	i
 8016e8c:	617b      	str	r3, [r7, #20]
 8016e8e:	e7fe      	b.n	8016e8e <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8016e90:	f7ff f8c4 	bl	801601c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8016e94:	2300      	movs	r3, #0
 8016e96:	e082      	b.n	8016f9e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8016e98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016e9a:	2b00      	cmp	r3, #0
 8016e9c:	d106      	bne.n	8016eac <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8016e9e:	f107 030c 	add.w	r3, r7, #12
 8016ea2:	4618      	mov	r0, r3
 8016ea4:	f000 fe94 	bl	8017bd0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8016ea8:	2301      	movs	r3, #1
 8016eaa:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8016eac:	f7ff f8b6 	bl	801601c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8016eb0:	f000 fc20 	bl	80176f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8016eb4:	f7ff f880 	bl	8015fb8 <vPortEnterCritical>
 8016eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016eba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016ebe:	b25b      	sxtb	r3, r3
 8016ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016ec4:	d103      	bne.n	8016ece <xQueueSemaphoreTake+0x142>
 8016ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ec8:	2200      	movs	r2, #0
 8016eca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8016ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ed0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016ed4:	b25b      	sxtb	r3, r3
 8016ed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016eda:	d103      	bne.n	8016ee4 <xQueueSemaphoreTake+0x158>
 8016edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ede:	2200      	movs	r2, #0
 8016ee0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8016ee4:	f7ff f89a 	bl	801601c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8016ee8:	463a      	mov	r2, r7
 8016eea:	f107 030c 	add.w	r3, r7, #12
 8016eee:	4611      	mov	r1, r2
 8016ef0:	4618      	mov	r0, r3
 8016ef2:	f000 fe83 	bl	8017bfc <xTaskCheckForTimeOut>
 8016ef6:	4603      	mov	r3, r0
 8016ef8:	2b00      	cmp	r3, #0
 8016efa:	d132      	bne.n	8016f62 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8016efc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016efe:	f000 f9d2 	bl	80172a6 <prvIsQueueEmpty>
 8016f02:	4603      	mov	r3, r0
 8016f04:	2b00      	cmp	r3, #0
 8016f06:	d026      	beq.n	8016f56 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8016f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f0a:	681b      	ldr	r3, [r3, #0]
 8016f0c:	2b00      	cmp	r3, #0
 8016f0e:	d109      	bne.n	8016f24 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8016f10:	f7ff f852 	bl	8015fb8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8016f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f16:	689b      	ldr	r3, [r3, #8]
 8016f18:	4618      	mov	r0, r3
 8016f1a:	f000 ffd1 	bl	8017ec0 <xTaskPriorityInherit>
 8016f1e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8016f20:	f7ff f87c 	bl	801601c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8016f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f26:	3324      	adds	r3, #36	; 0x24
 8016f28:	683a      	ldr	r2, [r7, #0]
 8016f2a:	4611      	mov	r1, r2
 8016f2c:	4618      	mov	r0, r3
 8016f2e:	f000 fdc5 	bl	8017abc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8016f32:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016f34:	f000 f965 	bl	8017202 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8016f38:	f000 fbea 	bl	8017710 <xTaskResumeAll>
 8016f3c:	4603      	mov	r3, r0
 8016f3e:	2b00      	cmp	r3, #0
 8016f40:	f47f af67 	bne.w	8016e12 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8016f44:	4b18      	ldr	r3, [pc, #96]	; (8016fa8 <xQueueSemaphoreTake+0x21c>)
 8016f46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016f4a:	601a      	str	r2, [r3, #0]
 8016f4c:	f3bf 8f4f 	dsb	sy
 8016f50:	f3bf 8f6f 	isb	sy
 8016f54:	e75d      	b.n	8016e12 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8016f56:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016f58:	f000 f953 	bl	8017202 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8016f5c:	f000 fbd8 	bl	8017710 <xTaskResumeAll>
 8016f60:	e757      	b.n	8016e12 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8016f62:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016f64:	f000 f94d 	bl	8017202 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8016f68:	f000 fbd2 	bl	8017710 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8016f6c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016f6e:	f000 f99a 	bl	80172a6 <prvIsQueueEmpty>
 8016f72:	4603      	mov	r3, r0
 8016f74:	2b00      	cmp	r3, #0
 8016f76:	f43f af4c 	beq.w	8016e12 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8016f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f7c:	2b00      	cmp	r3, #0
 8016f7e:	d00d      	beq.n	8016f9c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8016f80:	f7ff f81a 	bl	8015fb8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8016f84:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016f86:	f000 f894 	bl	80170b2 <prvGetDisinheritPriorityAfterTimeout>
 8016f8a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8016f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f8e:	689b      	ldr	r3, [r3, #8]
 8016f90:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016f92:	4618      	mov	r0, r3
 8016f94:	f001 f89c 	bl	80180d0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8016f98:	f7ff f840 	bl	801601c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8016f9c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8016f9e:	4618      	mov	r0, r3
 8016fa0:	3738      	adds	r7, #56	; 0x38
 8016fa2:	46bd      	mov	sp, r7
 8016fa4:	bd80      	pop	{r7, pc}
 8016fa6:	bf00      	nop
 8016fa8:	e000ed04 	.word	0xe000ed04

08016fac <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8016fac:	b580      	push	{r7, lr}
 8016fae:	b08e      	sub	sp, #56	; 0x38
 8016fb0:	af00      	add	r7, sp, #0
 8016fb2:	60f8      	str	r0, [r7, #12]
 8016fb4:	60b9      	str	r1, [r7, #8]
 8016fb6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8016fb8:	68fb      	ldr	r3, [r7, #12]
 8016fba:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8016fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016fbe:	2b00      	cmp	r3, #0
 8016fc0:	d10b      	bne.n	8016fda <xQueueReceiveFromISR+0x2e>
 8016fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016fc6:	b672      	cpsid	i
 8016fc8:	f383 8811 	msr	BASEPRI, r3
 8016fcc:	f3bf 8f6f 	isb	sy
 8016fd0:	f3bf 8f4f 	dsb	sy
 8016fd4:	b662      	cpsie	i
 8016fd6:	623b      	str	r3, [r7, #32]
 8016fd8:	e7fe      	b.n	8016fd8 <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016fda:	68bb      	ldr	r3, [r7, #8]
 8016fdc:	2b00      	cmp	r3, #0
 8016fde:	d103      	bne.n	8016fe8 <xQueueReceiveFromISR+0x3c>
 8016fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016fe4:	2b00      	cmp	r3, #0
 8016fe6:	d101      	bne.n	8016fec <xQueueReceiveFromISR+0x40>
 8016fe8:	2301      	movs	r3, #1
 8016fea:	e000      	b.n	8016fee <xQueueReceiveFromISR+0x42>
 8016fec:	2300      	movs	r3, #0
 8016fee:	2b00      	cmp	r3, #0
 8016ff0:	d10b      	bne.n	801700a <xQueueReceiveFromISR+0x5e>
 8016ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ff6:	b672      	cpsid	i
 8016ff8:	f383 8811 	msr	BASEPRI, r3
 8016ffc:	f3bf 8f6f 	isb	sy
 8017000:	f3bf 8f4f 	dsb	sy
 8017004:	b662      	cpsie	i
 8017006:	61fb      	str	r3, [r7, #28]
 8017008:	e7fe      	b.n	8017008 <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801700a:	f7ff f893 	bl	8016134 <vPortValidateInterruptPriority>
	__asm volatile
 801700e:	f3ef 8211 	mrs	r2, BASEPRI
 8017012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017016:	b672      	cpsid	i
 8017018:	f383 8811 	msr	BASEPRI, r3
 801701c:	f3bf 8f6f 	isb	sy
 8017020:	f3bf 8f4f 	dsb	sy
 8017024:	b662      	cpsie	i
 8017026:	61ba      	str	r2, [r7, #24]
 8017028:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801702a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801702c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801702e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017032:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8017034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017036:	2b00      	cmp	r3, #0
 8017038:	d02f      	beq.n	801709a <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801703a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801703c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017040:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8017044:	68b9      	ldr	r1, [r7, #8]
 8017046:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017048:	f000 f8b5 	bl	80171b6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801704c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801704e:	1e5a      	subs	r2, r3, #1
 8017050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017052:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8017054:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8017058:	f1b3 3fff 	cmp.w	r3, #4294967295
 801705c:	d112      	bne.n	8017084 <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801705e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017060:	691b      	ldr	r3, [r3, #16]
 8017062:	2b00      	cmp	r3, #0
 8017064:	d016      	beq.n	8017094 <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017068:	3310      	adds	r3, #16
 801706a:	4618      	mov	r0, r3
 801706c:	f000 fd4c 	bl	8017b08 <xTaskRemoveFromEventList>
 8017070:	4603      	mov	r3, r0
 8017072:	2b00      	cmp	r3, #0
 8017074:	d00e      	beq.n	8017094 <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8017076:	687b      	ldr	r3, [r7, #4]
 8017078:	2b00      	cmp	r3, #0
 801707a:	d00b      	beq.n	8017094 <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 801707c:	687b      	ldr	r3, [r7, #4]
 801707e:	2201      	movs	r2, #1
 8017080:	601a      	str	r2, [r3, #0]
 8017082:	e007      	b.n	8017094 <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8017084:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017088:	3301      	adds	r3, #1
 801708a:	b2db      	uxtb	r3, r3
 801708c:	b25a      	sxtb	r2, r3
 801708e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017090:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8017094:	2301      	movs	r3, #1
 8017096:	637b      	str	r3, [r7, #52]	; 0x34
 8017098:	e001      	b.n	801709e <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 801709a:	2300      	movs	r3, #0
 801709c:	637b      	str	r3, [r7, #52]	; 0x34
 801709e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170a0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80170a2:	693b      	ldr	r3, [r7, #16]
 80170a4:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80170a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80170aa:	4618      	mov	r0, r3
 80170ac:	3738      	adds	r7, #56	; 0x38
 80170ae:	46bd      	mov	sp, r7
 80170b0:	bd80      	pop	{r7, pc}

080170b2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80170b2:	b480      	push	{r7}
 80170b4:	b085      	sub	sp, #20
 80170b6:	af00      	add	r7, sp, #0
 80170b8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80170ba:	687b      	ldr	r3, [r7, #4]
 80170bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80170be:	2b00      	cmp	r3, #0
 80170c0:	d006      	beq.n	80170d0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80170c2:	687b      	ldr	r3, [r7, #4]
 80170c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80170c6:	681b      	ldr	r3, [r3, #0]
 80170c8:	f1c3 0307 	rsb	r3, r3, #7
 80170cc:	60fb      	str	r3, [r7, #12]
 80170ce:	e001      	b.n	80170d4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80170d0:	2300      	movs	r3, #0
 80170d2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80170d4:	68fb      	ldr	r3, [r7, #12]
	}
 80170d6:	4618      	mov	r0, r3
 80170d8:	3714      	adds	r7, #20
 80170da:	46bd      	mov	sp, r7
 80170dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170e0:	4770      	bx	lr

080170e2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80170e2:	b580      	push	{r7, lr}
 80170e4:	b086      	sub	sp, #24
 80170e6:	af00      	add	r7, sp, #0
 80170e8:	60f8      	str	r0, [r7, #12]
 80170ea:	60b9      	str	r1, [r7, #8]
 80170ec:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80170ee:	2300      	movs	r3, #0
 80170f0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80170f2:	68fb      	ldr	r3, [r7, #12]
 80170f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80170f6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80170f8:	68fb      	ldr	r3, [r7, #12]
 80170fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80170fc:	2b00      	cmp	r3, #0
 80170fe:	d10d      	bne.n	801711c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8017100:	68fb      	ldr	r3, [r7, #12]
 8017102:	681b      	ldr	r3, [r3, #0]
 8017104:	2b00      	cmp	r3, #0
 8017106:	d14d      	bne.n	80171a4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8017108:	68fb      	ldr	r3, [r7, #12]
 801710a:	689b      	ldr	r3, [r3, #8]
 801710c:	4618      	mov	r0, r3
 801710e:	f000 ff57 	bl	8017fc0 <xTaskPriorityDisinherit>
 8017112:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8017114:	68fb      	ldr	r3, [r7, #12]
 8017116:	2200      	movs	r2, #0
 8017118:	609a      	str	r2, [r3, #8]
 801711a:	e043      	b.n	80171a4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801711c:	687b      	ldr	r3, [r7, #4]
 801711e:	2b00      	cmp	r3, #0
 8017120:	d119      	bne.n	8017156 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8017122:	68fb      	ldr	r3, [r7, #12]
 8017124:	6858      	ldr	r0, [r3, #4]
 8017126:	68fb      	ldr	r3, [r7, #12]
 8017128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801712a:	461a      	mov	r2, r3
 801712c:	68b9      	ldr	r1, [r7, #8]
 801712e:	f00f f826 	bl	802617e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8017132:	68fb      	ldr	r3, [r7, #12]
 8017134:	685a      	ldr	r2, [r3, #4]
 8017136:	68fb      	ldr	r3, [r7, #12]
 8017138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801713a:	441a      	add	r2, r3
 801713c:	68fb      	ldr	r3, [r7, #12]
 801713e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8017140:	68fb      	ldr	r3, [r7, #12]
 8017142:	685a      	ldr	r2, [r3, #4]
 8017144:	68fb      	ldr	r3, [r7, #12]
 8017146:	689b      	ldr	r3, [r3, #8]
 8017148:	429a      	cmp	r2, r3
 801714a:	d32b      	bcc.n	80171a4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801714c:	68fb      	ldr	r3, [r7, #12]
 801714e:	681a      	ldr	r2, [r3, #0]
 8017150:	68fb      	ldr	r3, [r7, #12]
 8017152:	605a      	str	r2, [r3, #4]
 8017154:	e026      	b.n	80171a4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8017156:	68fb      	ldr	r3, [r7, #12]
 8017158:	68d8      	ldr	r0, [r3, #12]
 801715a:	68fb      	ldr	r3, [r7, #12]
 801715c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801715e:	461a      	mov	r2, r3
 8017160:	68b9      	ldr	r1, [r7, #8]
 8017162:	f00f f80c 	bl	802617e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8017166:	68fb      	ldr	r3, [r7, #12]
 8017168:	68da      	ldr	r2, [r3, #12]
 801716a:	68fb      	ldr	r3, [r7, #12]
 801716c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801716e:	425b      	negs	r3, r3
 8017170:	441a      	add	r2, r3
 8017172:	68fb      	ldr	r3, [r7, #12]
 8017174:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8017176:	68fb      	ldr	r3, [r7, #12]
 8017178:	68da      	ldr	r2, [r3, #12]
 801717a:	68fb      	ldr	r3, [r7, #12]
 801717c:	681b      	ldr	r3, [r3, #0]
 801717e:	429a      	cmp	r2, r3
 8017180:	d207      	bcs.n	8017192 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8017182:	68fb      	ldr	r3, [r7, #12]
 8017184:	689a      	ldr	r2, [r3, #8]
 8017186:	68fb      	ldr	r3, [r7, #12]
 8017188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801718a:	425b      	negs	r3, r3
 801718c:	441a      	add	r2, r3
 801718e:	68fb      	ldr	r3, [r7, #12]
 8017190:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8017192:	687b      	ldr	r3, [r7, #4]
 8017194:	2b02      	cmp	r3, #2
 8017196:	d105      	bne.n	80171a4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8017198:	693b      	ldr	r3, [r7, #16]
 801719a:	2b00      	cmp	r3, #0
 801719c:	d002      	beq.n	80171a4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801719e:	693b      	ldr	r3, [r7, #16]
 80171a0:	3b01      	subs	r3, #1
 80171a2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80171a4:	693b      	ldr	r3, [r7, #16]
 80171a6:	1c5a      	adds	r2, r3, #1
 80171a8:	68fb      	ldr	r3, [r7, #12]
 80171aa:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80171ac:	697b      	ldr	r3, [r7, #20]
}
 80171ae:	4618      	mov	r0, r3
 80171b0:	3718      	adds	r7, #24
 80171b2:	46bd      	mov	sp, r7
 80171b4:	bd80      	pop	{r7, pc}

080171b6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80171b6:	b580      	push	{r7, lr}
 80171b8:	b082      	sub	sp, #8
 80171ba:	af00      	add	r7, sp, #0
 80171bc:	6078      	str	r0, [r7, #4]
 80171be:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80171c0:	687b      	ldr	r3, [r7, #4]
 80171c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80171c4:	2b00      	cmp	r3, #0
 80171c6:	d018      	beq.n	80171fa <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80171c8:	687b      	ldr	r3, [r7, #4]
 80171ca:	68da      	ldr	r2, [r3, #12]
 80171cc:	687b      	ldr	r3, [r7, #4]
 80171ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80171d0:	441a      	add	r2, r3
 80171d2:	687b      	ldr	r3, [r7, #4]
 80171d4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80171d6:	687b      	ldr	r3, [r7, #4]
 80171d8:	68da      	ldr	r2, [r3, #12]
 80171da:	687b      	ldr	r3, [r7, #4]
 80171dc:	689b      	ldr	r3, [r3, #8]
 80171de:	429a      	cmp	r2, r3
 80171e0:	d303      	bcc.n	80171ea <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80171e2:	687b      	ldr	r3, [r7, #4]
 80171e4:	681a      	ldr	r2, [r3, #0]
 80171e6:	687b      	ldr	r3, [r7, #4]
 80171e8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80171ea:	687b      	ldr	r3, [r7, #4]
 80171ec:	68d9      	ldr	r1, [r3, #12]
 80171ee:	687b      	ldr	r3, [r7, #4]
 80171f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80171f2:	461a      	mov	r2, r3
 80171f4:	6838      	ldr	r0, [r7, #0]
 80171f6:	f00e ffc2 	bl	802617e <memcpy>
	}
}
 80171fa:	bf00      	nop
 80171fc:	3708      	adds	r7, #8
 80171fe:	46bd      	mov	sp, r7
 8017200:	bd80      	pop	{r7, pc}

08017202 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8017202:	b580      	push	{r7, lr}
 8017204:	b084      	sub	sp, #16
 8017206:	af00      	add	r7, sp, #0
 8017208:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801720a:	f7fe fed5 	bl	8015fb8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801720e:	687b      	ldr	r3, [r7, #4]
 8017210:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017214:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8017216:	e011      	b.n	801723c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8017218:	687b      	ldr	r3, [r7, #4]
 801721a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801721c:	2b00      	cmp	r3, #0
 801721e:	d012      	beq.n	8017246 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017220:	687b      	ldr	r3, [r7, #4]
 8017222:	3324      	adds	r3, #36	; 0x24
 8017224:	4618      	mov	r0, r3
 8017226:	f000 fc6f 	bl	8017b08 <xTaskRemoveFromEventList>
 801722a:	4603      	mov	r3, r0
 801722c:	2b00      	cmp	r3, #0
 801722e:	d001      	beq.n	8017234 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8017230:	f000 fd48 	bl	8017cc4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8017234:	7bfb      	ldrb	r3, [r7, #15]
 8017236:	3b01      	subs	r3, #1
 8017238:	b2db      	uxtb	r3, r3
 801723a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801723c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017240:	2b00      	cmp	r3, #0
 8017242:	dce9      	bgt.n	8017218 <prvUnlockQueue+0x16>
 8017244:	e000      	b.n	8017248 <prvUnlockQueue+0x46>
					break;
 8017246:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8017248:	687b      	ldr	r3, [r7, #4]
 801724a:	22ff      	movs	r2, #255	; 0xff
 801724c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8017250:	f7fe fee4 	bl	801601c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8017254:	f7fe feb0 	bl	8015fb8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8017258:	687b      	ldr	r3, [r7, #4]
 801725a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801725e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8017260:	e011      	b.n	8017286 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017262:	687b      	ldr	r3, [r7, #4]
 8017264:	691b      	ldr	r3, [r3, #16]
 8017266:	2b00      	cmp	r3, #0
 8017268:	d012      	beq.n	8017290 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801726a:	687b      	ldr	r3, [r7, #4]
 801726c:	3310      	adds	r3, #16
 801726e:	4618      	mov	r0, r3
 8017270:	f000 fc4a 	bl	8017b08 <xTaskRemoveFromEventList>
 8017274:	4603      	mov	r3, r0
 8017276:	2b00      	cmp	r3, #0
 8017278:	d001      	beq.n	801727e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801727a:	f000 fd23 	bl	8017cc4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801727e:	7bbb      	ldrb	r3, [r7, #14]
 8017280:	3b01      	subs	r3, #1
 8017282:	b2db      	uxtb	r3, r3
 8017284:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8017286:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801728a:	2b00      	cmp	r3, #0
 801728c:	dce9      	bgt.n	8017262 <prvUnlockQueue+0x60>
 801728e:	e000      	b.n	8017292 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8017290:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8017292:	687b      	ldr	r3, [r7, #4]
 8017294:	22ff      	movs	r2, #255	; 0xff
 8017296:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801729a:	f7fe febf 	bl	801601c <vPortExitCritical>
}
 801729e:	bf00      	nop
 80172a0:	3710      	adds	r7, #16
 80172a2:	46bd      	mov	sp, r7
 80172a4:	bd80      	pop	{r7, pc}

080172a6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80172a6:	b580      	push	{r7, lr}
 80172a8:	b084      	sub	sp, #16
 80172aa:	af00      	add	r7, sp, #0
 80172ac:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80172ae:	f7fe fe83 	bl	8015fb8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80172b2:	687b      	ldr	r3, [r7, #4]
 80172b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80172b6:	2b00      	cmp	r3, #0
 80172b8:	d102      	bne.n	80172c0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80172ba:	2301      	movs	r3, #1
 80172bc:	60fb      	str	r3, [r7, #12]
 80172be:	e001      	b.n	80172c4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80172c0:	2300      	movs	r3, #0
 80172c2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80172c4:	f7fe feaa 	bl	801601c <vPortExitCritical>

	return xReturn;
 80172c8:	68fb      	ldr	r3, [r7, #12]
}
 80172ca:	4618      	mov	r0, r3
 80172cc:	3710      	adds	r7, #16
 80172ce:	46bd      	mov	sp, r7
 80172d0:	bd80      	pop	{r7, pc}

080172d2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80172d2:	b580      	push	{r7, lr}
 80172d4:	b084      	sub	sp, #16
 80172d6:	af00      	add	r7, sp, #0
 80172d8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80172da:	f7fe fe6d 	bl	8015fb8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80172de:	687b      	ldr	r3, [r7, #4]
 80172e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80172e2:	687b      	ldr	r3, [r7, #4]
 80172e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80172e6:	429a      	cmp	r2, r3
 80172e8:	d102      	bne.n	80172f0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80172ea:	2301      	movs	r3, #1
 80172ec:	60fb      	str	r3, [r7, #12]
 80172ee:	e001      	b.n	80172f4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80172f0:	2300      	movs	r3, #0
 80172f2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80172f4:	f7fe fe92 	bl	801601c <vPortExitCritical>

	return xReturn;
 80172f8:	68fb      	ldr	r3, [r7, #12]
}
 80172fa:	4618      	mov	r0, r3
 80172fc:	3710      	adds	r7, #16
 80172fe:	46bd      	mov	sp, r7
 8017300:	bd80      	pop	{r7, pc}

08017302 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8017302:	b580      	push	{r7, lr}
 8017304:	b08e      	sub	sp, #56	; 0x38
 8017306:	af04      	add	r7, sp, #16
 8017308:	60f8      	str	r0, [r7, #12]
 801730a:	60b9      	str	r1, [r7, #8]
 801730c:	607a      	str	r2, [r7, #4]
 801730e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8017310:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017312:	2b00      	cmp	r3, #0
 8017314:	d10b      	bne.n	801732e <xTaskCreateStatic+0x2c>
	__asm volatile
 8017316:	f04f 0350 	mov.w	r3, #80	; 0x50
 801731a:	b672      	cpsid	i
 801731c:	f383 8811 	msr	BASEPRI, r3
 8017320:	f3bf 8f6f 	isb	sy
 8017324:	f3bf 8f4f 	dsb	sy
 8017328:	b662      	cpsie	i
 801732a:	623b      	str	r3, [r7, #32]
 801732c:	e7fe      	b.n	801732c <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 801732e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017330:	2b00      	cmp	r3, #0
 8017332:	d10b      	bne.n	801734c <xTaskCreateStatic+0x4a>
 8017334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017338:	b672      	cpsid	i
 801733a:	f383 8811 	msr	BASEPRI, r3
 801733e:	f3bf 8f6f 	isb	sy
 8017342:	f3bf 8f4f 	dsb	sy
 8017346:	b662      	cpsie	i
 8017348:	61fb      	str	r3, [r7, #28]
 801734a:	e7fe      	b.n	801734a <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801734c:	2354      	movs	r3, #84	; 0x54
 801734e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8017350:	693b      	ldr	r3, [r7, #16]
 8017352:	2b54      	cmp	r3, #84	; 0x54
 8017354:	d00b      	beq.n	801736e <xTaskCreateStatic+0x6c>
 8017356:	f04f 0350 	mov.w	r3, #80	; 0x50
 801735a:	b672      	cpsid	i
 801735c:	f383 8811 	msr	BASEPRI, r3
 8017360:	f3bf 8f6f 	isb	sy
 8017364:	f3bf 8f4f 	dsb	sy
 8017368:	b662      	cpsie	i
 801736a:	61bb      	str	r3, [r7, #24]
 801736c:	e7fe      	b.n	801736c <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801736e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8017370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017372:	2b00      	cmp	r3, #0
 8017374:	d01e      	beq.n	80173b4 <xTaskCreateStatic+0xb2>
 8017376:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017378:	2b00      	cmp	r3, #0
 801737a:	d01b      	beq.n	80173b4 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801737c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801737e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8017380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017382:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017384:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8017386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017388:	2202      	movs	r2, #2
 801738a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801738e:	2300      	movs	r3, #0
 8017390:	9303      	str	r3, [sp, #12]
 8017392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017394:	9302      	str	r3, [sp, #8]
 8017396:	f107 0314 	add.w	r3, r7, #20
 801739a:	9301      	str	r3, [sp, #4]
 801739c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801739e:	9300      	str	r3, [sp, #0]
 80173a0:	683b      	ldr	r3, [r7, #0]
 80173a2:	687a      	ldr	r2, [r7, #4]
 80173a4:	68b9      	ldr	r1, [r7, #8]
 80173a6:	68f8      	ldr	r0, [r7, #12]
 80173a8:	f000 f850 	bl	801744c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80173ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80173ae:	f000 f8d5 	bl	801755c <prvAddNewTaskToReadyList>
 80173b2:	e001      	b.n	80173b8 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80173b4:	2300      	movs	r3, #0
 80173b6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80173b8:	697b      	ldr	r3, [r7, #20]
	}
 80173ba:	4618      	mov	r0, r3
 80173bc:	3728      	adds	r7, #40	; 0x28
 80173be:	46bd      	mov	sp, r7
 80173c0:	bd80      	pop	{r7, pc}

080173c2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80173c2:	b580      	push	{r7, lr}
 80173c4:	b08c      	sub	sp, #48	; 0x30
 80173c6:	af04      	add	r7, sp, #16
 80173c8:	60f8      	str	r0, [r7, #12]
 80173ca:	60b9      	str	r1, [r7, #8]
 80173cc:	603b      	str	r3, [r7, #0]
 80173ce:	4613      	mov	r3, r2
 80173d0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80173d2:	88fb      	ldrh	r3, [r7, #6]
 80173d4:	009b      	lsls	r3, r3, #2
 80173d6:	4618      	mov	r0, r3
 80173d8:	f7fe feee 	bl	80161b8 <pvPortMalloc>
 80173dc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80173de:	697b      	ldr	r3, [r7, #20]
 80173e0:	2b00      	cmp	r3, #0
 80173e2:	d00e      	beq.n	8017402 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80173e4:	2054      	movs	r0, #84	; 0x54
 80173e6:	f7fe fee7 	bl	80161b8 <pvPortMalloc>
 80173ea:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80173ec:	69fb      	ldr	r3, [r7, #28]
 80173ee:	2b00      	cmp	r3, #0
 80173f0:	d003      	beq.n	80173fa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80173f2:	69fb      	ldr	r3, [r7, #28]
 80173f4:	697a      	ldr	r2, [r7, #20]
 80173f6:	631a      	str	r2, [r3, #48]	; 0x30
 80173f8:	e005      	b.n	8017406 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80173fa:	6978      	ldr	r0, [r7, #20]
 80173fc:	f7fe ffa4 	bl	8016348 <vPortFree>
 8017400:	e001      	b.n	8017406 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8017402:	2300      	movs	r3, #0
 8017404:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8017406:	69fb      	ldr	r3, [r7, #28]
 8017408:	2b00      	cmp	r3, #0
 801740a:	d017      	beq.n	801743c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801740c:	69fb      	ldr	r3, [r7, #28]
 801740e:	2200      	movs	r2, #0
 8017410:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8017414:	88fa      	ldrh	r2, [r7, #6]
 8017416:	2300      	movs	r3, #0
 8017418:	9303      	str	r3, [sp, #12]
 801741a:	69fb      	ldr	r3, [r7, #28]
 801741c:	9302      	str	r3, [sp, #8]
 801741e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017420:	9301      	str	r3, [sp, #4]
 8017422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017424:	9300      	str	r3, [sp, #0]
 8017426:	683b      	ldr	r3, [r7, #0]
 8017428:	68b9      	ldr	r1, [r7, #8]
 801742a:	68f8      	ldr	r0, [r7, #12]
 801742c:	f000 f80e 	bl	801744c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8017430:	69f8      	ldr	r0, [r7, #28]
 8017432:	f000 f893 	bl	801755c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8017436:	2301      	movs	r3, #1
 8017438:	61bb      	str	r3, [r7, #24]
 801743a:	e002      	b.n	8017442 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801743c:	f04f 33ff 	mov.w	r3, #4294967295
 8017440:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8017442:	69bb      	ldr	r3, [r7, #24]
	}
 8017444:	4618      	mov	r0, r3
 8017446:	3720      	adds	r7, #32
 8017448:	46bd      	mov	sp, r7
 801744a:	bd80      	pop	{r7, pc}

0801744c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801744c:	b580      	push	{r7, lr}
 801744e:	b088      	sub	sp, #32
 8017450:	af00      	add	r7, sp, #0
 8017452:	60f8      	str	r0, [r7, #12]
 8017454:	60b9      	str	r1, [r7, #8]
 8017456:	607a      	str	r2, [r7, #4]
 8017458:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801745a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801745c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801745e:	6879      	ldr	r1, [r7, #4]
 8017460:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8017464:	440b      	add	r3, r1
 8017466:	009b      	lsls	r3, r3, #2
 8017468:	4413      	add	r3, r2
 801746a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801746c:	69bb      	ldr	r3, [r7, #24]
 801746e:	f023 0307 	bic.w	r3, r3, #7
 8017472:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8017474:	69bb      	ldr	r3, [r7, #24]
 8017476:	f003 0307 	and.w	r3, r3, #7
 801747a:	2b00      	cmp	r3, #0
 801747c:	d00b      	beq.n	8017496 <prvInitialiseNewTask+0x4a>
 801747e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017482:	b672      	cpsid	i
 8017484:	f383 8811 	msr	BASEPRI, r3
 8017488:	f3bf 8f6f 	isb	sy
 801748c:	f3bf 8f4f 	dsb	sy
 8017490:	b662      	cpsie	i
 8017492:	617b      	str	r3, [r7, #20]
 8017494:	e7fe      	b.n	8017494 <prvInitialiseNewTask+0x48>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8017496:	68bb      	ldr	r3, [r7, #8]
 8017498:	2b00      	cmp	r3, #0
 801749a:	d01f      	beq.n	80174dc <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801749c:	2300      	movs	r3, #0
 801749e:	61fb      	str	r3, [r7, #28]
 80174a0:	e012      	b.n	80174c8 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80174a2:	68ba      	ldr	r2, [r7, #8]
 80174a4:	69fb      	ldr	r3, [r7, #28]
 80174a6:	4413      	add	r3, r2
 80174a8:	7819      	ldrb	r1, [r3, #0]
 80174aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80174ac:	69fb      	ldr	r3, [r7, #28]
 80174ae:	4413      	add	r3, r2
 80174b0:	3334      	adds	r3, #52	; 0x34
 80174b2:	460a      	mov	r2, r1
 80174b4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80174b6:	68ba      	ldr	r2, [r7, #8]
 80174b8:	69fb      	ldr	r3, [r7, #28]
 80174ba:	4413      	add	r3, r2
 80174bc:	781b      	ldrb	r3, [r3, #0]
 80174be:	2b00      	cmp	r3, #0
 80174c0:	d006      	beq.n	80174d0 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80174c2:	69fb      	ldr	r3, [r7, #28]
 80174c4:	3301      	adds	r3, #1
 80174c6:	61fb      	str	r3, [r7, #28]
 80174c8:	69fb      	ldr	r3, [r7, #28]
 80174ca:	2b0f      	cmp	r3, #15
 80174cc:	d9e9      	bls.n	80174a2 <prvInitialiseNewTask+0x56>
 80174ce:	e000      	b.n	80174d2 <prvInitialiseNewTask+0x86>
			{
				break;
 80174d0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80174d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174d4:	2200      	movs	r2, #0
 80174d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80174da:	e003      	b.n	80174e4 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80174dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174de:	2200      	movs	r2, #0
 80174e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80174e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174e6:	2b06      	cmp	r3, #6
 80174e8:	d901      	bls.n	80174ee <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80174ea:	2306      	movs	r3, #6
 80174ec:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80174ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80174f2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80174f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80174f8:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80174fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174fc:	2200      	movs	r2, #0
 80174fe:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8017500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017502:	3304      	adds	r3, #4
 8017504:	4618      	mov	r0, r3
 8017506:	f7fe fbbd 	bl	8015c84 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801750a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801750c:	3318      	adds	r3, #24
 801750e:	4618      	mov	r0, r3
 8017510:	f7fe fbb8 	bl	8015c84 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8017514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017516:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017518:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801751a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801751c:	f1c3 0207 	rsb	r2, r3, #7
 8017520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017522:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8017524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017526:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017528:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801752a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801752c:	2200      	movs	r2, #0
 801752e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8017530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017532:	2200      	movs	r2, #0
 8017534:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8017538:	683a      	ldr	r2, [r7, #0]
 801753a:	68f9      	ldr	r1, [r7, #12]
 801753c:	69b8      	ldr	r0, [r7, #24]
 801753e:	f7fe fc35 	bl	8015dac <pxPortInitialiseStack>
 8017542:	4602      	mov	r2, r0
 8017544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017546:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8017548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801754a:	2b00      	cmp	r3, #0
 801754c:	d002      	beq.n	8017554 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801754e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017550:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017552:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8017554:	bf00      	nop
 8017556:	3720      	adds	r7, #32
 8017558:	46bd      	mov	sp, r7
 801755a:	bd80      	pop	{r7, pc}

0801755c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801755c:	b580      	push	{r7, lr}
 801755e:	b082      	sub	sp, #8
 8017560:	af00      	add	r7, sp, #0
 8017562:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8017564:	f7fe fd28 	bl	8015fb8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8017568:	4b2a      	ldr	r3, [pc, #168]	; (8017614 <prvAddNewTaskToReadyList+0xb8>)
 801756a:	681b      	ldr	r3, [r3, #0]
 801756c:	3301      	adds	r3, #1
 801756e:	4a29      	ldr	r2, [pc, #164]	; (8017614 <prvAddNewTaskToReadyList+0xb8>)
 8017570:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8017572:	4b29      	ldr	r3, [pc, #164]	; (8017618 <prvAddNewTaskToReadyList+0xbc>)
 8017574:	681b      	ldr	r3, [r3, #0]
 8017576:	2b00      	cmp	r3, #0
 8017578:	d109      	bne.n	801758e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801757a:	4a27      	ldr	r2, [pc, #156]	; (8017618 <prvAddNewTaskToReadyList+0xbc>)
 801757c:	687b      	ldr	r3, [r7, #4]
 801757e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8017580:	4b24      	ldr	r3, [pc, #144]	; (8017614 <prvAddNewTaskToReadyList+0xb8>)
 8017582:	681b      	ldr	r3, [r3, #0]
 8017584:	2b01      	cmp	r3, #1
 8017586:	d110      	bne.n	80175aa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8017588:	f000 fbc0 	bl	8017d0c <prvInitialiseTaskLists>
 801758c:	e00d      	b.n	80175aa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801758e:	4b23      	ldr	r3, [pc, #140]	; (801761c <prvAddNewTaskToReadyList+0xc0>)
 8017590:	681b      	ldr	r3, [r3, #0]
 8017592:	2b00      	cmp	r3, #0
 8017594:	d109      	bne.n	80175aa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8017596:	4b20      	ldr	r3, [pc, #128]	; (8017618 <prvAddNewTaskToReadyList+0xbc>)
 8017598:	681b      	ldr	r3, [r3, #0]
 801759a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801759c:	687b      	ldr	r3, [r7, #4]
 801759e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80175a0:	429a      	cmp	r2, r3
 80175a2:	d802      	bhi.n	80175aa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80175a4:	4a1c      	ldr	r2, [pc, #112]	; (8017618 <prvAddNewTaskToReadyList+0xbc>)
 80175a6:	687b      	ldr	r3, [r7, #4]
 80175a8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80175aa:	4b1d      	ldr	r3, [pc, #116]	; (8017620 <prvAddNewTaskToReadyList+0xc4>)
 80175ac:	681b      	ldr	r3, [r3, #0]
 80175ae:	3301      	adds	r3, #1
 80175b0:	4a1b      	ldr	r2, [pc, #108]	; (8017620 <prvAddNewTaskToReadyList+0xc4>)
 80175b2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80175b4:	687b      	ldr	r3, [r7, #4]
 80175b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80175b8:	2201      	movs	r2, #1
 80175ba:	409a      	lsls	r2, r3
 80175bc:	4b19      	ldr	r3, [pc, #100]	; (8017624 <prvAddNewTaskToReadyList+0xc8>)
 80175be:	681b      	ldr	r3, [r3, #0]
 80175c0:	4313      	orrs	r3, r2
 80175c2:	4a18      	ldr	r2, [pc, #96]	; (8017624 <prvAddNewTaskToReadyList+0xc8>)
 80175c4:	6013      	str	r3, [r2, #0]
 80175c6:	687b      	ldr	r3, [r7, #4]
 80175c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80175ca:	4613      	mov	r3, r2
 80175cc:	009b      	lsls	r3, r3, #2
 80175ce:	4413      	add	r3, r2
 80175d0:	009b      	lsls	r3, r3, #2
 80175d2:	4a15      	ldr	r2, [pc, #84]	; (8017628 <prvAddNewTaskToReadyList+0xcc>)
 80175d4:	441a      	add	r2, r3
 80175d6:	687b      	ldr	r3, [r7, #4]
 80175d8:	3304      	adds	r3, #4
 80175da:	4619      	mov	r1, r3
 80175dc:	4610      	mov	r0, r2
 80175de:	f7fe fb5e 	bl	8015c9e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80175e2:	f7fe fd1b 	bl	801601c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80175e6:	4b0d      	ldr	r3, [pc, #52]	; (801761c <prvAddNewTaskToReadyList+0xc0>)
 80175e8:	681b      	ldr	r3, [r3, #0]
 80175ea:	2b00      	cmp	r3, #0
 80175ec:	d00e      	beq.n	801760c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80175ee:	4b0a      	ldr	r3, [pc, #40]	; (8017618 <prvAddNewTaskToReadyList+0xbc>)
 80175f0:	681b      	ldr	r3, [r3, #0]
 80175f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80175f4:	687b      	ldr	r3, [r7, #4]
 80175f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80175f8:	429a      	cmp	r2, r3
 80175fa:	d207      	bcs.n	801760c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80175fc:	4b0b      	ldr	r3, [pc, #44]	; (801762c <prvAddNewTaskToReadyList+0xd0>)
 80175fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017602:	601a      	str	r2, [r3, #0]
 8017604:	f3bf 8f4f 	dsb	sy
 8017608:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801760c:	bf00      	nop
 801760e:	3708      	adds	r7, #8
 8017610:	46bd      	mov	sp, r7
 8017612:	bd80      	pop	{r7, pc}
 8017614:	20018c6c 	.word	0x20018c6c
 8017618:	20018b6c 	.word	0x20018b6c
 801761c:	20018c78 	.word	0x20018c78
 8017620:	20018c88 	.word	0x20018c88
 8017624:	20018c74 	.word	0x20018c74
 8017628:	20018b70 	.word	0x20018b70
 801762c:	e000ed04 	.word	0xe000ed04

08017630 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8017630:	b580      	push	{r7, lr}
 8017632:	b08a      	sub	sp, #40	; 0x28
 8017634:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8017636:	2300      	movs	r3, #0
 8017638:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801763a:	2300      	movs	r3, #0
 801763c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801763e:	463a      	mov	r2, r7
 8017640:	1d39      	adds	r1, r7, #4
 8017642:	f107 0308 	add.w	r3, r7, #8
 8017646:	4618      	mov	r0, r3
 8017648:	f7f8 ff9a 	bl	8010580 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801764c:	6839      	ldr	r1, [r7, #0]
 801764e:	687b      	ldr	r3, [r7, #4]
 8017650:	68ba      	ldr	r2, [r7, #8]
 8017652:	9202      	str	r2, [sp, #8]
 8017654:	9301      	str	r3, [sp, #4]
 8017656:	2300      	movs	r3, #0
 8017658:	9300      	str	r3, [sp, #0]
 801765a:	2300      	movs	r3, #0
 801765c:	460a      	mov	r2, r1
 801765e:	491f      	ldr	r1, [pc, #124]	; (80176dc <vTaskStartScheduler+0xac>)
 8017660:	481f      	ldr	r0, [pc, #124]	; (80176e0 <vTaskStartScheduler+0xb0>)
 8017662:	f7ff fe4e 	bl	8017302 <xTaskCreateStatic>
 8017666:	4602      	mov	r2, r0
 8017668:	4b1e      	ldr	r3, [pc, #120]	; (80176e4 <vTaskStartScheduler+0xb4>)
 801766a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801766c:	4b1d      	ldr	r3, [pc, #116]	; (80176e4 <vTaskStartScheduler+0xb4>)
 801766e:	681b      	ldr	r3, [r3, #0]
 8017670:	2b00      	cmp	r3, #0
 8017672:	d002      	beq.n	801767a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8017674:	2301      	movs	r3, #1
 8017676:	617b      	str	r3, [r7, #20]
 8017678:	e001      	b.n	801767e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801767a:	2300      	movs	r3, #0
 801767c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801767e:	697b      	ldr	r3, [r7, #20]
 8017680:	2b01      	cmp	r3, #1
 8017682:	d117      	bne.n	80176b4 <vTaskStartScheduler+0x84>
 8017684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017688:	b672      	cpsid	i
 801768a:	f383 8811 	msr	BASEPRI, r3
 801768e:	f3bf 8f6f 	isb	sy
 8017692:	f3bf 8f4f 	dsb	sy
 8017696:	b662      	cpsie	i
 8017698:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801769a:	4b13      	ldr	r3, [pc, #76]	; (80176e8 <vTaskStartScheduler+0xb8>)
 801769c:	f04f 32ff 	mov.w	r2, #4294967295
 80176a0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80176a2:	4b12      	ldr	r3, [pc, #72]	; (80176ec <vTaskStartScheduler+0xbc>)
 80176a4:	2201      	movs	r2, #1
 80176a6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80176a8:	4b11      	ldr	r3, [pc, #68]	; (80176f0 <vTaskStartScheduler+0xc0>)
 80176aa:	2200      	movs	r2, #0
 80176ac:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80176ae:	f7fe fc07 	bl	8015ec0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80176b2:	e00f      	b.n	80176d4 <vTaskStartScheduler+0xa4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80176b4:	697b      	ldr	r3, [r7, #20]
 80176b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80176ba:	d10b      	bne.n	80176d4 <vTaskStartScheduler+0xa4>
 80176bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80176c0:	b672      	cpsid	i
 80176c2:	f383 8811 	msr	BASEPRI, r3
 80176c6:	f3bf 8f6f 	isb	sy
 80176ca:	f3bf 8f4f 	dsb	sy
 80176ce:	b662      	cpsie	i
 80176d0:	60fb      	str	r3, [r7, #12]
 80176d2:	e7fe      	b.n	80176d2 <vTaskStartScheduler+0xa2>
}
 80176d4:	bf00      	nop
 80176d6:	3718      	adds	r7, #24
 80176d8:	46bd      	mov	sp, r7
 80176da:	bd80      	pop	{r7, pc}
 80176dc:	080278b4 	.word	0x080278b4
 80176e0:	08017cdd 	.word	0x08017cdd
 80176e4:	20018c90 	.word	0x20018c90
 80176e8:	20018c8c 	.word	0x20018c8c
 80176ec:	20018c78 	.word	0x20018c78
 80176f0:	20018c70 	.word	0x20018c70

080176f4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80176f4:	b480      	push	{r7}
 80176f6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80176f8:	4b04      	ldr	r3, [pc, #16]	; (801770c <vTaskSuspendAll+0x18>)
 80176fa:	681b      	ldr	r3, [r3, #0]
 80176fc:	3301      	adds	r3, #1
 80176fe:	4a03      	ldr	r2, [pc, #12]	; (801770c <vTaskSuspendAll+0x18>)
 8017700:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8017702:	bf00      	nop
 8017704:	46bd      	mov	sp, r7
 8017706:	f85d 7b04 	ldr.w	r7, [sp], #4
 801770a:	4770      	bx	lr
 801770c:	20018c94 	.word	0x20018c94

08017710 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8017710:	b580      	push	{r7, lr}
 8017712:	b084      	sub	sp, #16
 8017714:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8017716:	2300      	movs	r3, #0
 8017718:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801771a:	2300      	movs	r3, #0
 801771c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801771e:	4b42      	ldr	r3, [pc, #264]	; (8017828 <xTaskResumeAll+0x118>)
 8017720:	681b      	ldr	r3, [r3, #0]
 8017722:	2b00      	cmp	r3, #0
 8017724:	d10b      	bne.n	801773e <xTaskResumeAll+0x2e>
 8017726:	f04f 0350 	mov.w	r3, #80	; 0x50
 801772a:	b672      	cpsid	i
 801772c:	f383 8811 	msr	BASEPRI, r3
 8017730:	f3bf 8f6f 	isb	sy
 8017734:	f3bf 8f4f 	dsb	sy
 8017738:	b662      	cpsie	i
 801773a:	603b      	str	r3, [r7, #0]
 801773c:	e7fe      	b.n	801773c <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801773e:	f7fe fc3b 	bl	8015fb8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8017742:	4b39      	ldr	r3, [pc, #228]	; (8017828 <xTaskResumeAll+0x118>)
 8017744:	681b      	ldr	r3, [r3, #0]
 8017746:	3b01      	subs	r3, #1
 8017748:	4a37      	ldr	r2, [pc, #220]	; (8017828 <xTaskResumeAll+0x118>)
 801774a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801774c:	4b36      	ldr	r3, [pc, #216]	; (8017828 <xTaskResumeAll+0x118>)
 801774e:	681b      	ldr	r3, [r3, #0]
 8017750:	2b00      	cmp	r3, #0
 8017752:	d161      	bne.n	8017818 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8017754:	4b35      	ldr	r3, [pc, #212]	; (801782c <xTaskResumeAll+0x11c>)
 8017756:	681b      	ldr	r3, [r3, #0]
 8017758:	2b00      	cmp	r3, #0
 801775a:	d05d      	beq.n	8017818 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801775c:	e02e      	b.n	80177bc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801775e:	4b34      	ldr	r3, [pc, #208]	; (8017830 <xTaskResumeAll+0x120>)
 8017760:	68db      	ldr	r3, [r3, #12]
 8017762:	68db      	ldr	r3, [r3, #12]
 8017764:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8017766:	68fb      	ldr	r3, [r7, #12]
 8017768:	3318      	adds	r3, #24
 801776a:	4618      	mov	r0, r3
 801776c:	f7fe faf4 	bl	8015d58 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017770:	68fb      	ldr	r3, [r7, #12]
 8017772:	3304      	adds	r3, #4
 8017774:	4618      	mov	r0, r3
 8017776:	f7fe faef 	bl	8015d58 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801777a:	68fb      	ldr	r3, [r7, #12]
 801777c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801777e:	2201      	movs	r2, #1
 8017780:	409a      	lsls	r2, r3
 8017782:	4b2c      	ldr	r3, [pc, #176]	; (8017834 <xTaskResumeAll+0x124>)
 8017784:	681b      	ldr	r3, [r3, #0]
 8017786:	4313      	orrs	r3, r2
 8017788:	4a2a      	ldr	r2, [pc, #168]	; (8017834 <xTaskResumeAll+0x124>)
 801778a:	6013      	str	r3, [r2, #0]
 801778c:	68fb      	ldr	r3, [r7, #12]
 801778e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017790:	4613      	mov	r3, r2
 8017792:	009b      	lsls	r3, r3, #2
 8017794:	4413      	add	r3, r2
 8017796:	009b      	lsls	r3, r3, #2
 8017798:	4a27      	ldr	r2, [pc, #156]	; (8017838 <xTaskResumeAll+0x128>)
 801779a:	441a      	add	r2, r3
 801779c:	68fb      	ldr	r3, [r7, #12]
 801779e:	3304      	adds	r3, #4
 80177a0:	4619      	mov	r1, r3
 80177a2:	4610      	mov	r0, r2
 80177a4:	f7fe fa7b 	bl	8015c9e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80177a8:	68fb      	ldr	r3, [r7, #12]
 80177aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80177ac:	4b23      	ldr	r3, [pc, #140]	; (801783c <xTaskResumeAll+0x12c>)
 80177ae:	681b      	ldr	r3, [r3, #0]
 80177b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80177b2:	429a      	cmp	r2, r3
 80177b4:	d302      	bcc.n	80177bc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80177b6:	4b22      	ldr	r3, [pc, #136]	; (8017840 <xTaskResumeAll+0x130>)
 80177b8:	2201      	movs	r2, #1
 80177ba:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80177bc:	4b1c      	ldr	r3, [pc, #112]	; (8017830 <xTaskResumeAll+0x120>)
 80177be:	681b      	ldr	r3, [r3, #0]
 80177c0:	2b00      	cmp	r3, #0
 80177c2:	d1cc      	bne.n	801775e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80177c4:	68fb      	ldr	r3, [r7, #12]
 80177c6:	2b00      	cmp	r3, #0
 80177c8:	d001      	beq.n	80177ce <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80177ca:	f000 fb3b 	bl	8017e44 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80177ce:	4b1d      	ldr	r3, [pc, #116]	; (8017844 <xTaskResumeAll+0x134>)
 80177d0:	681b      	ldr	r3, [r3, #0]
 80177d2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80177d4:	687b      	ldr	r3, [r7, #4]
 80177d6:	2b00      	cmp	r3, #0
 80177d8:	d010      	beq.n	80177fc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80177da:	f000 f859 	bl	8017890 <xTaskIncrementTick>
 80177de:	4603      	mov	r3, r0
 80177e0:	2b00      	cmp	r3, #0
 80177e2:	d002      	beq.n	80177ea <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80177e4:	4b16      	ldr	r3, [pc, #88]	; (8017840 <xTaskResumeAll+0x130>)
 80177e6:	2201      	movs	r2, #1
 80177e8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80177ea:	687b      	ldr	r3, [r7, #4]
 80177ec:	3b01      	subs	r3, #1
 80177ee:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80177f0:	687b      	ldr	r3, [r7, #4]
 80177f2:	2b00      	cmp	r3, #0
 80177f4:	d1f1      	bne.n	80177da <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80177f6:	4b13      	ldr	r3, [pc, #76]	; (8017844 <xTaskResumeAll+0x134>)
 80177f8:	2200      	movs	r2, #0
 80177fa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80177fc:	4b10      	ldr	r3, [pc, #64]	; (8017840 <xTaskResumeAll+0x130>)
 80177fe:	681b      	ldr	r3, [r3, #0]
 8017800:	2b00      	cmp	r3, #0
 8017802:	d009      	beq.n	8017818 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8017804:	2301      	movs	r3, #1
 8017806:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8017808:	4b0f      	ldr	r3, [pc, #60]	; (8017848 <xTaskResumeAll+0x138>)
 801780a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801780e:	601a      	str	r2, [r3, #0]
 8017810:	f3bf 8f4f 	dsb	sy
 8017814:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8017818:	f7fe fc00 	bl	801601c <vPortExitCritical>

	return xAlreadyYielded;
 801781c:	68bb      	ldr	r3, [r7, #8]
}
 801781e:	4618      	mov	r0, r3
 8017820:	3710      	adds	r7, #16
 8017822:	46bd      	mov	sp, r7
 8017824:	bd80      	pop	{r7, pc}
 8017826:	bf00      	nop
 8017828:	20018c94 	.word	0x20018c94
 801782c:	20018c6c 	.word	0x20018c6c
 8017830:	20018c2c 	.word	0x20018c2c
 8017834:	20018c74 	.word	0x20018c74
 8017838:	20018b70 	.word	0x20018b70
 801783c:	20018b6c 	.word	0x20018b6c
 8017840:	20018c80 	.word	0x20018c80
 8017844:	20018c7c 	.word	0x20018c7c
 8017848:	e000ed04 	.word	0xe000ed04

0801784c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 801784c:	b480      	push	{r7}
 801784e:	b083      	sub	sp, #12
 8017850:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8017852:	4b05      	ldr	r3, [pc, #20]	; (8017868 <xTaskGetTickCount+0x1c>)
 8017854:	681b      	ldr	r3, [r3, #0]
 8017856:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8017858:	687b      	ldr	r3, [r7, #4]
}
 801785a:	4618      	mov	r0, r3
 801785c:	370c      	adds	r7, #12
 801785e:	46bd      	mov	sp, r7
 8017860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017864:	4770      	bx	lr
 8017866:	bf00      	nop
 8017868:	20018c70 	.word	0x20018c70

0801786c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 801786c:	b580      	push	{r7, lr}
 801786e:	b082      	sub	sp, #8
 8017870:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8017872:	f7fe fc5f 	bl	8016134 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8017876:	2300      	movs	r3, #0
 8017878:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 801787a:	4b04      	ldr	r3, [pc, #16]	; (801788c <xTaskGetTickCountFromISR+0x20>)
 801787c:	681b      	ldr	r3, [r3, #0]
 801787e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8017880:	683b      	ldr	r3, [r7, #0]
}
 8017882:	4618      	mov	r0, r3
 8017884:	3708      	adds	r7, #8
 8017886:	46bd      	mov	sp, r7
 8017888:	bd80      	pop	{r7, pc}
 801788a:	bf00      	nop
 801788c:	20018c70 	.word	0x20018c70

08017890 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8017890:	b580      	push	{r7, lr}
 8017892:	b086      	sub	sp, #24
 8017894:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8017896:	2300      	movs	r3, #0
 8017898:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801789a:	4b4f      	ldr	r3, [pc, #316]	; (80179d8 <xTaskIncrementTick+0x148>)
 801789c:	681b      	ldr	r3, [r3, #0]
 801789e:	2b00      	cmp	r3, #0
 80178a0:	f040 8089 	bne.w	80179b6 <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80178a4:	4b4d      	ldr	r3, [pc, #308]	; (80179dc <xTaskIncrementTick+0x14c>)
 80178a6:	681b      	ldr	r3, [r3, #0]
 80178a8:	3301      	adds	r3, #1
 80178aa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80178ac:	4a4b      	ldr	r2, [pc, #300]	; (80179dc <xTaskIncrementTick+0x14c>)
 80178ae:	693b      	ldr	r3, [r7, #16]
 80178b0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80178b2:	693b      	ldr	r3, [r7, #16]
 80178b4:	2b00      	cmp	r3, #0
 80178b6:	d121      	bne.n	80178fc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80178b8:	4b49      	ldr	r3, [pc, #292]	; (80179e0 <xTaskIncrementTick+0x150>)
 80178ba:	681b      	ldr	r3, [r3, #0]
 80178bc:	681b      	ldr	r3, [r3, #0]
 80178be:	2b00      	cmp	r3, #0
 80178c0:	d00b      	beq.n	80178da <xTaskIncrementTick+0x4a>
 80178c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80178c6:	b672      	cpsid	i
 80178c8:	f383 8811 	msr	BASEPRI, r3
 80178cc:	f3bf 8f6f 	isb	sy
 80178d0:	f3bf 8f4f 	dsb	sy
 80178d4:	b662      	cpsie	i
 80178d6:	603b      	str	r3, [r7, #0]
 80178d8:	e7fe      	b.n	80178d8 <xTaskIncrementTick+0x48>
 80178da:	4b41      	ldr	r3, [pc, #260]	; (80179e0 <xTaskIncrementTick+0x150>)
 80178dc:	681b      	ldr	r3, [r3, #0]
 80178de:	60fb      	str	r3, [r7, #12]
 80178e0:	4b40      	ldr	r3, [pc, #256]	; (80179e4 <xTaskIncrementTick+0x154>)
 80178e2:	681b      	ldr	r3, [r3, #0]
 80178e4:	4a3e      	ldr	r2, [pc, #248]	; (80179e0 <xTaskIncrementTick+0x150>)
 80178e6:	6013      	str	r3, [r2, #0]
 80178e8:	4a3e      	ldr	r2, [pc, #248]	; (80179e4 <xTaskIncrementTick+0x154>)
 80178ea:	68fb      	ldr	r3, [r7, #12]
 80178ec:	6013      	str	r3, [r2, #0]
 80178ee:	4b3e      	ldr	r3, [pc, #248]	; (80179e8 <xTaskIncrementTick+0x158>)
 80178f0:	681b      	ldr	r3, [r3, #0]
 80178f2:	3301      	adds	r3, #1
 80178f4:	4a3c      	ldr	r2, [pc, #240]	; (80179e8 <xTaskIncrementTick+0x158>)
 80178f6:	6013      	str	r3, [r2, #0]
 80178f8:	f000 faa4 	bl	8017e44 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80178fc:	4b3b      	ldr	r3, [pc, #236]	; (80179ec <xTaskIncrementTick+0x15c>)
 80178fe:	681b      	ldr	r3, [r3, #0]
 8017900:	693a      	ldr	r2, [r7, #16]
 8017902:	429a      	cmp	r2, r3
 8017904:	d348      	bcc.n	8017998 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8017906:	4b36      	ldr	r3, [pc, #216]	; (80179e0 <xTaskIncrementTick+0x150>)
 8017908:	681b      	ldr	r3, [r3, #0]
 801790a:	681b      	ldr	r3, [r3, #0]
 801790c:	2b00      	cmp	r3, #0
 801790e:	d104      	bne.n	801791a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017910:	4b36      	ldr	r3, [pc, #216]	; (80179ec <xTaskIncrementTick+0x15c>)
 8017912:	f04f 32ff 	mov.w	r2, #4294967295
 8017916:	601a      	str	r2, [r3, #0]
					break;
 8017918:	e03e      	b.n	8017998 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801791a:	4b31      	ldr	r3, [pc, #196]	; (80179e0 <xTaskIncrementTick+0x150>)
 801791c:	681b      	ldr	r3, [r3, #0]
 801791e:	68db      	ldr	r3, [r3, #12]
 8017920:	68db      	ldr	r3, [r3, #12]
 8017922:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8017924:	68bb      	ldr	r3, [r7, #8]
 8017926:	685b      	ldr	r3, [r3, #4]
 8017928:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801792a:	693a      	ldr	r2, [r7, #16]
 801792c:	687b      	ldr	r3, [r7, #4]
 801792e:	429a      	cmp	r2, r3
 8017930:	d203      	bcs.n	801793a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8017932:	4a2e      	ldr	r2, [pc, #184]	; (80179ec <xTaskIncrementTick+0x15c>)
 8017934:	687b      	ldr	r3, [r7, #4]
 8017936:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8017938:	e02e      	b.n	8017998 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801793a:	68bb      	ldr	r3, [r7, #8]
 801793c:	3304      	adds	r3, #4
 801793e:	4618      	mov	r0, r3
 8017940:	f7fe fa0a 	bl	8015d58 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8017944:	68bb      	ldr	r3, [r7, #8]
 8017946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017948:	2b00      	cmp	r3, #0
 801794a:	d004      	beq.n	8017956 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801794c:	68bb      	ldr	r3, [r7, #8]
 801794e:	3318      	adds	r3, #24
 8017950:	4618      	mov	r0, r3
 8017952:	f7fe fa01 	bl	8015d58 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8017956:	68bb      	ldr	r3, [r7, #8]
 8017958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801795a:	2201      	movs	r2, #1
 801795c:	409a      	lsls	r2, r3
 801795e:	4b24      	ldr	r3, [pc, #144]	; (80179f0 <xTaskIncrementTick+0x160>)
 8017960:	681b      	ldr	r3, [r3, #0]
 8017962:	4313      	orrs	r3, r2
 8017964:	4a22      	ldr	r2, [pc, #136]	; (80179f0 <xTaskIncrementTick+0x160>)
 8017966:	6013      	str	r3, [r2, #0]
 8017968:	68bb      	ldr	r3, [r7, #8]
 801796a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801796c:	4613      	mov	r3, r2
 801796e:	009b      	lsls	r3, r3, #2
 8017970:	4413      	add	r3, r2
 8017972:	009b      	lsls	r3, r3, #2
 8017974:	4a1f      	ldr	r2, [pc, #124]	; (80179f4 <xTaskIncrementTick+0x164>)
 8017976:	441a      	add	r2, r3
 8017978:	68bb      	ldr	r3, [r7, #8]
 801797a:	3304      	adds	r3, #4
 801797c:	4619      	mov	r1, r3
 801797e:	4610      	mov	r0, r2
 8017980:	f7fe f98d 	bl	8015c9e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8017984:	68bb      	ldr	r3, [r7, #8]
 8017986:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017988:	4b1b      	ldr	r3, [pc, #108]	; (80179f8 <xTaskIncrementTick+0x168>)
 801798a:	681b      	ldr	r3, [r3, #0]
 801798c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801798e:	429a      	cmp	r2, r3
 8017990:	d3b9      	bcc.n	8017906 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8017992:	2301      	movs	r3, #1
 8017994:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8017996:	e7b6      	b.n	8017906 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8017998:	4b17      	ldr	r3, [pc, #92]	; (80179f8 <xTaskIncrementTick+0x168>)
 801799a:	681b      	ldr	r3, [r3, #0]
 801799c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801799e:	4915      	ldr	r1, [pc, #84]	; (80179f4 <xTaskIncrementTick+0x164>)
 80179a0:	4613      	mov	r3, r2
 80179a2:	009b      	lsls	r3, r3, #2
 80179a4:	4413      	add	r3, r2
 80179a6:	009b      	lsls	r3, r3, #2
 80179a8:	440b      	add	r3, r1
 80179aa:	681b      	ldr	r3, [r3, #0]
 80179ac:	2b01      	cmp	r3, #1
 80179ae:	d907      	bls.n	80179c0 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 80179b0:	2301      	movs	r3, #1
 80179b2:	617b      	str	r3, [r7, #20]
 80179b4:	e004      	b.n	80179c0 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80179b6:	4b11      	ldr	r3, [pc, #68]	; (80179fc <xTaskIncrementTick+0x16c>)
 80179b8:	681b      	ldr	r3, [r3, #0]
 80179ba:	3301      	adds	r3, #1
 80179bc:	4a0f      	ldr	r2, [pc, #60]	; (80179fc <xTaskIncrementTick+0x16c>)
 80179be:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80179c0:	4b0f      	ldr	r3, [pc, #60]	; (8017a00 <xTaskIncrementTick+0x170>)
 80179c2:	681b      	ldr	r3, [r3, #0]
 80179c4:	2b00      	cmp	r3, #0
 80179c6:	d001      	beq.n	80179cc <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 80179c8:	2301      	movs	r3, #1
 80179ca:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80179cc:	697b      	ldr	r3, [r7, #20]
}
 80179ce:	4618      	mov	r0, r3
 80179d0:	3718      	adds	r7, #24
 80179d2:	46bd      	mov	sp, r7
 80179d4:	bd80      	pop	{r7, pc}
 80179d6:	bf00      	nop
 80179d8:	20018c94 	.word	0x20018c94
 80179dc:	20018c70 	.word	0x20018c70
 80179e0:	20018c24 	.word	0x20018c24
 80179e4:	20018c28 	.word	0x20018c28
 80179e8:	20018c84 	.word	0x20018c84
 80179ec:	20018c8c 	.word	0x20018c8c
 80179f0:	20018c74 	.word	0x20018c74
 80179f4:	20018b70 	.word	0x20018b70
 80179f8:	20018b6c 	.word	0x20018b6c
 80179fc:	20018c7c 	.word	0x20018c7c
 8017a00:	20018c80 	.word	0x20018c80

08017a04 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8017a04:	b480      	push	{r7}
 8017a06:	b087      	sub	sp, #28
 8017a08:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8017a0a:	4b27      	ldr	r3, [pc, #156]	; (8017aa8 <vTaskSwitchContext+0xa4>)
 8017a0c:	681b      	ldr	r3, [r3, #0]
 8017a0e:	2b00      	cmp	r3, #0
 8017a10:	d003      	beq.n	8017a1a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8017a12:	4b26      	ldr	r3, [pc, #152]	; (8017aac <vTaskSwitchContext+0xa8>)
 8017a14:	2201      	movs	r2, #1
 8017a16:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8017a18:	e040      	b.n	8017a9c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8017a1a:	4b24      	ldr	r3, [pc, #144]	; (8017aac <vTaskSwitchContext+0xa8>)
 8017a1c:	2200      	movs	r2, #0
 8017a1e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017a20:	4b23      	ldr	r3, [pc, #140]	; (8017ab0 <vTaskSwitchContext+0xac>)
 8017a22:	681b      	ldr	r3, [r3, #0]
 8017a24:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8017a26:	68fb      	ldr	r3, [r7, #12]
 8017a28:	fab3 f383 	clz	r3, r3
 8017a2c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8017a2e:	7afb      	ldrb	r3, [r7, #11]
 8017a30:	f1c3 031f 	rsb	r3, r3, #31
 8017a34:	617b      	str	r3, [r7, #20]
 8017a36:	491f      	ldr	r1, [pc, #124]	; (8017ab4 <vTaskSwitchContext+0xb0>)
 8017a38:	697a      	ldr	r2, [r7, #20]
 8017a3a:	4613      	mov	r3, r2
 8017a3c:	009b      	lsls	r3, r3, #2
 8017a3e:	4413      	add	r3, r2
 8017a40:	009b      	lsls	r3, r3, #2
 8017a42:	440b      	add	r3, r1
 8017a44:	681b      	ldr	r3, [r3, #0]
 8017a46:	2b00      	cmp	r3, #0
 8017a48:	d10b      	bne.n	8017a62 <vTaskSwitchContext+0x5e>
	__asm volatile
 8017a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017a4e:	b672      	cpsid	i
 8017a50:	f383 8811 	msr	BASEPRI, r3
 8017a54:	f3bf 8f6f 	isb	sy
 8017a58:	f3bf 8f4f 	dsb	sy
 8017a5c:	b662      	cpsie	i
 8017a5e:	607b      	str	r3, [r7, #4]
 8017a60:	e7fe      	b.n	8017a60 <vTaskSwitchContext+0x5c>
 8017a62:	697a      	ldr	r2, [r7, #20]
 8017a64:	4613      	mov	r3, r2
 8017a66:	009b      	lsls	r3, r3, #2
 8017a68:	4413      	add	r3, r2
 8017a6a:	009b      	lsls	r3, r3, #2
 8017a6c:	4a11      	ldr	r2, [pc, #68]	; (8017ab4 <vTaskSwitchContext+0xb0>)
 8017a6e:	4413      	add	r3, r2
 8017a70:	613b      	str	r3, [r7, #16]
 8017a72:	693b      	ldr	r3, [r7, #16]
 8017a74:	685b      	ldr	r3, [r3, #4]
 8017a76:	685a      	ldr	r2, [r3, #4]
 8017a78:	693b      	ldr	r3, [r7, #16]
 8017a7a:	605a      	str	r2, [r3, #4]
 8017a7c:	693b      	ldr	r3, [r7, #16]
 8017a7e:	685a      	ldr	r2, [r3, #4]
 8017a80:	693b      	ldr	r3, [r7, #16]
 8017a82:	3308      	adds	r3, #8
 8017a84:	429a      	cmp	r2, r3
 8017a86:	d104      	bne.n	8017a92 <vTaskSwitchContext+0x8e>
 8017a88:	693b      	ldr	r3, [r7, #16]
 8017a8a:	685b      	ldr	r3, [r3, #4]
 8017a8c:	685a      	ldr	r2, [r3, #4]
 8017a8e:	693b      	ldr	r3, [r7, #16]
 8017a90:	605a      	str	r2, [r3, #4]
 8017a92:	693b      	ldr	r3, [r7, #16]
 8017a94:	685b      	ldr	r3, [r3, #4]
 8017a96:	68db      	ldr	r3, [r3, #12]
 8017a98:	4a07      	ldr	r2, [pc, #28]	; (8017ab8 <vTaskSwitchContext+0xb4>)
 8017a9a:	6013      	str	r3, [r2, #0]
}
 8017a9c:	bf00      	nop
 8017a9e:	371c      	adds	r7, #28
 8017aa0:	46bd      	mov	sp, r7
 8017aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017aa6:	4770      	bx	lr
 8017aa8:	20018c94 	.word	0x20018c94
 8017aac:	20018c80 	.word	0x20018c80
 8017ab0:	20018c74 	.word	0x20018c74
 8017ab4:	20018b70 	.word	0x20018b70
 8017ab8:	20018b6c 	.word	0x20018b6c

08017abc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8017abc:	b580      	push	{r7, lr}
 8017abe:	b084      	sub	sp, #16
 8017ac0:	af00      	add	r7, sp, #0
 8017ac2:	6078      	str	r0, [r7, #4]
 8017ac4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8017ac6:	687b      	ldr	r3, [r7, #4]
 8017ac8:	2b00      	cmp	r3, #0
 8017aca:	d10b      	bne.n	8017ae4 <vTaskPlaceOnEventList+0x28>
 8017acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017ad0:	b672      	cpsid	i
 8017ad2:	f383 8811 	msr	BASEPRI, r3
 8017ad6:	f3bf 8f6f 	isb	sy
 8017ada:	f3bf 8f4f 	dsb	sy
 8017ade:	b662      	cpsie	i
 8017ae0:	60fb      	str	r3, [r7, #12]
 8017ae2:	e7fe      	b.n	8017ae2 <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8017ae4:	4b07      	ldr	r3, [pc, #28]	; (8017b04 <vTaskPlaceOnEventList+0x48>)
 8017ae6:	681b      	ldr	r3, [r3, #0]
 8017ae8:	3318      	adds	r3, #24
 8017aea:	4619      	mov	r1, r3
 8017aec:	6878      	ldr	r0, [r7, #4]
 8017aee:	f7fe f8fa 	bl	8015ce6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8017af2:	2101      	movs	r1, #1
 8017af4:	6838      	ldr	r0, [r7, #0]
 8017af6:	f000 fb9b 	bl	8018230 <prvAddCurrentTaskToDelayedList>
}
 8017afa:	bf00      	nop
 8017afc:	3710      	adds	r7, #16
 8017afe:	46bd      	mov	sp, r7
 8017b00:	bd80      	pop	{r7, pc}
 8017b02:	bf00      	nop
 8017b04:	20018b6c 	.word	0x20018b6c

08017b08 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8017b08:	b580      	push	{r7, lr}
 8017b0a:	b086      	sub	sp, #24
 8017b0c:	af00      	add	r7, sp, #0
 8017b0e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017b10:	687b      	ldr	r3, [r7, #4]
 8017b12:	68db      	ldr	r3, [r3, #12]
 8017b14:	68db      	ldr	r3, [r3, #12]
 8017b16:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8017b18:	693b      	ldr	r3, [r7, #16]
 8017b1a:	2b00      	cmp	r3, #0
 8017b1c:	d10b      	bne.n	8017b36 <xTaskRemoveFromEventList+0x2e>
 8017b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017b22:	b672      	cpsid	i
 8017b24:	f383 8811 	msr	BASEPRI, r3
 8017b28:	f3bf 8f6f 	isb	sy
 8017b2c:	f3bf 8f4f 	dsb	sy
 8017b30:	b662      	cpsie	i
 8017b32:	60fb      	str	r3, [r7, #12]
 8017b34:	e7fe      	b.n	8017b34 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8017b36:	693b      	ldr	r3, [r7, #16]
 8017b38:	3318      	adds	r3, #24
 8017b3a:	4618      	mov	r0, r3
 8017b3c:	f7fe f90c 	bl	8015d58 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017b40:	4b1d      	ldr	r3, [pc, #116]	; (8017bb8 <xTaskRemoveFromEventList+0xb0>)
 8017b42:	681b      	ldr	r3, [r3, #0]
 8017b44:	2b00      	cmp	r3, #0
 8017b46:	d11c      	bne.n	8017b82 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8017b48:	693b      	ldr	r3, [r7, #16]
 8017b4a:	3304      	adds	r3, #4
 8017b4c:	4618      	mov	r0, r3
 8017b4e:	f7fe f903 	bl	8015d58 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8017b52:	693b      	ldr	r3, [r7, #16]
 8017b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017b56:	2201      	movs	r2, #1
 8017b58:	409a      	lsls	r2, r3
 8017b5a:	4b18      	ldr	r3, [pc, #96]	; (8017bbc <xTaskRemoveFromEventList+0xb4>)
 8017b5c:	681b      	ldr	r3, [r3, #0]
 8017b5e:	4313      	orrs	r3, r2
 8017b60:	4a16      	ldr	r2, [pc, #88]	; (8017bbc <xTaskRemoveFromEventList+0xb4>)
 8017b62:	6013      	str	r3, [r2, #0]
 8017b64:	693b      	ldr	r3, [r7, #16]
 8017b66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017b68:	4613      	mov	r3, r2
 8017b6a:	009b      	lsls	r3, r3, #2
 8017b6c:	4413      	add	r3, r2
 8017b6e:	009b      	lsls	r3, r3, #2
 8017b70:	4a13      	ldr	r2, [pc, #76]	; (8017bc0 <xTaskRemoveFromEventList+0xb8>)
 8017b72:	441a      	add	r2, r3
 8017b74:	693b      	ldr	r3, [r7, #16]
 8017b76:	3304      	adds	r3, #4
 8017b78:	4619      	mov	r1, r3
 8017b7a:	4610      	mov	r0, r2
 8017b7c:	f7fe f88f 	bl	8015c9e <vListInsertEnd>
 8017b80:	e005      	b.n	8017b8e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8017b82:	693b      	ldr	r3, [r7, #16]
 8017b84:	3318      	adds	r3, #24
 8017b86:	4619      	mov	r1, r3
 8017b88:	480e      	ldr	r0, [pc, #56]	; (8017bc4 <xTaskRemoveFromEventList+0xbc>)
 8017b8a:	f7fe f888 	bl	8015c9e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8017b8e:	693b      	ldr	r3, [r7, #16]
 8017b90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017b92:	4b0d      	ldr	r3, [pc, #52]	; (8017bc8 <xTaskRemoveFromEventList+0xc0>)
 8017b94:	681b      	ldr	r3, [r3, #0]
 8017b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017b98:	429a      	cmp	r2, r3
 8017b9a:	d905      	bls.n	8017ba8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8017b9c:	2301      	movs	r3, #1
 8017b9e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8017ba0:	4b0a      	ldr	r3, [pc, #40]	; (8017bcc <xTaskRemoveFromEventList+0xc4>)
 8017ba2:	2201      	movs	r2, #1
 8017ba4:	601a      	str	r2, [r3, #0]
 8017ba6:	e001      	b.n	8017bac <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8017ba8:	2300      	movs	r3, #0
 8017baa:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8017bac:	697b      	ldr	r3, [r7, #20]
}
 8017bae:	4618      	mov	r0, r3
 8017bb0:	3718      	adds	r7, #24
 8017bb2:	46bd      	mov	sp, r7
 8017bb4:	bd80      	pop	{r7, pc}
 8017bb6:	bf00      	nop
 8017bb8:	20018c94 	.word	0x20018c94
 8017bbc:	20018c74 	.word	0x20018c74
 8017bc0:	20018b70 	.word	0x20018b70
 8017bc4:	20018c2c 	.word	0x20018c2c
 8017bc8:	20018b6c 	.word	0x20018b6c
 8017bcc:	20018c80 	.word	0x20018c80

08017bd0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8017bd0:	b480      	push	{r7}
 8017bd2:	b083      	sub	sp, #12
 8017bd4:	af00      	add	r7, sp, #0
 8017bd6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8017bd8:	4b06      	ldr	r3, [pc, #24]	; (8017bf4 <vTaskInternalSetTimeOutState+0x24>)
 8017bda:	681a      	ldr	r2, [r3, #0]
 8017bdc:	687b      	ldr	r3, [r7, #4]
 8017bde:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8017be0:	4b05      	ldr	r3, [pc, #20]	; (8017bf8 <vTaskInternalSetTimeOutState+0x28>)
 8017be2:	681a      	ldr	r2, [r3, #0]
 8017be4:	687b      	ldr	r3, [r7, #4]
 8017be6:	605a      	str	r2, [r3, #4]
}
 8017be8:	bf00      	nop
 8017bea:	370c      	adds	r7, #12
 8017bec:	46bd      	mov	sp, r7
 8017bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bf2:	4770      	bx	lr
 8017bf4:	20018c84 	.word	0x20018c84
 8017bf8:	20018c70 	.word	0x20018c70

08017bfc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8017bfc:	b580      	push	{r7, lr}
 8017bfe:	b088      	sub	sp, #32
 8017c00:	af00      	add	r7, sp, #0
 8017c02:	6078      	str	r0, [r7, #4]
 8017c04:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8017c06:	687b      	ldr	r3, [r7, #4]
 8017c08:	2b00      	cmp	r3, #0
 8017c0a:	d10b      	bne.n	8017c24 <xTaskCheckForTimeOut+0x28>
 8017c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017c10:	b672      	cpsid	i
 8017c12:	f383 8811 	msr	BASEPRI, r3
 8017c16:	f3bf 8f6f 	isb	sy
 8017c1a:	f3bf 8f4f 	dsb	sy
 8017c1e:	b662      	cpsie	i
 8017c20:	613b      	str	r3, [r7, #16]
 8017c22:	e7fe      	b.n	8017c22 <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 8017c24:	683b      	ldr	r3, [r7, #0]
 8017c26:	2b00      	cmp	r3, #0
 8017c28:	d10b      	bne.n	8017c42 <xTaskCheckForTimeOut+0x46>
 8017c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017c2e:	b672      	cpsid	i
 8017c30:	f383 8811 	msr	BASEPRI, r3
 8017c34:	f3bf 8f6f 	isb	sy
 8017c38:	f3bf 8f4f 	dsb	sy
 8017c3c:	b662      	cpsie	i
 8017c3e:	60fb      	str	r3, [r7, #12]
 8017c40:	e7fe      	b.n	8017c40 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 8017c42:	f7fe f9b9 	bl	8015fb8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8017c46:	4b1d      	ldr	r3, [pc, #116]	; (8017cbc <xTaskCheckForTimeOut+0xc0>)
 8017c48:	681b      	ldr	r3, [r3, #0]
 8017c4a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8017c4c:	687b      	ldr	r3, [r7, #4]
 8017c4e:	685b      	ldr	r3, [r3, #4]
 8017c50:	69ba      	ldr	r2, [r7, #24]
 8017c52:	1ad3      	subs	r3, r2, r3
 8017c54:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8017c56:	683b      	ldr	r3, [r7, #0]
 8017c58:	681b      	ldr	r3, [r3, #0]
 8017c5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017c5e:	d102      	bne.n	8017c66 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8017c60:	2300      	movs	r3, #0
 8017c62:	61fb      	str	r3, [r7, #28]
 8017c64:	e023      	b.n	8017cae <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8017c66:	687b      	ldr	r3, [r7, #4]
 8017c68:	681a      	ldr	r2, [r3, #0]
 8017c6a:	4b15      	ldr	r3, [pc, #84]	; (8017cc0 <xTaskCheckForTimeOut+0xc4>)
 8017c6c:	681b      	ldr	r3, [r3, #0]
 8017c6e:	429a      	cmp	r2, r3
 8017c70:	d007      	beq.n	8017c82 <xTaskCheckForTimeOut+0x86>
 8017c72:	687b      	ldr	r3, [r7, #4]
 8017c74:	685a      	ldr	r2, [r3, #4]
 8017c76:	69bb      	ldr	r3, [r7, #24]
 8017c78:	429a      	cmp	r2, r3
 8017c7a:	d802      	bhi.n	8017c82 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8017c7c:	2301      	movs	r3, #1
 8017c7e:	61fb      	str	r3, [r7, #28]
 8017c80:	e015      	b.n	8017cae <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8017c82:	683b      	ldr	r3, [r7, #0]
 8017c84:	681a      	ldr	r2, [r3, #0]
 8017c86:	697b      	ldr	r3, [r7, #20]
 8017c88:	429a      	cmp	r2, r3
 8017c8a:	d90b      	bls.n	8017ca4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8017c8c:	683b      	ldr	r3, [r7, #0]
 8017c8e:	681a      	ldr	r2, [r3, #0]
 8017c90:	697b      	ldr	r3, [r7, #20]
 8017c92:	1ad2      	subs	r2, r2, r3
 8017c94:	683b      	ldr	r3, [r7, #0]
 8017c96:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8017c98:	6878      	ldr	r0, [r7, #4]
 8017c9a:	f7ff ff99 	bl	8017bd0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8017c9e:	2300      	movs	r3, #0
 8017ca0:	61fb      	str	r3, [r7, #28]
 8017ca2:	e004      	b.n	8017cae <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8017ca4:	683b      	ldr	r3, [r7, #0]
 8017ca6:	2200      	movs	r2, #0
 8017ca8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8017caa:	2301      	movs	r3, #1
 8017cac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8017cae:	f7fe f9b5 	bl	801601c <vPortExitCritical>

	return xReturn;
 8017cb2:	69fb      	ldr	r3, [r7, #28]
}
 8017cb4:	4618      	mov	r0, r3
 8017cb6:	3720      	adds	r7, #32
 8017cb8:	46bd      	mov	sp, r7
 8017cba:	bd80      	pop	{r7, pc}
 8017cbc:	20018c70 	.word	0x20018c70
 8017cc0:	20018c84 	.word	0x20018c84

08017cc4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8017cc4:	b480      	push	{r7}
 8017cc6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8017cc8:	4b03      	ldr	r3, [pc, #12]	; (8017cd8 <vTaskMissedYield+0x14>)
 8017cca:	2201      	movs	r2, #1
 8017ccc:	601a      	str	r2, [r3, #0]
}
 8017cce:	bf00      	nop
 8017cd0:	46bd      	mov	sp, r7
 8017cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cd6:	4770      	bx	lr
 8017cd8:	20018c80 	.word	0x20018c80

08017cdc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8017cdc:	b580      	push	{r7, lr}
 8017cde:	b082      	sub	sp, #8
 8017ce0:	af00      	add	r7, sp, #0
 8017ce2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8017ce4:	f000 f852 	bl	8017d8c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8017ce8:	4b06      	ldr	r3, [pc, #24]	; (8017d04 <prvIdleTask+0x28>)
 8017cea:	681b      	ldr	r3, [r3, #0]
 8017cec:	2b01      	cmp	r3, #1
 8017cee:	d9f9      	bls.n	8017ce4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8017cf0:	4b05      	ldr	r3, [pc, #20]	; (8017d08 <prvIdleTask+0x2c>)
 8017cf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017cf6:	601a      	str	r2, [r3, #0]
 8017cf8:	f3bf 8f4f 	dsb	sy
 8017cfc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8017d00:	e7f0      	b.n	8017ce4 <prvIdleTask+0x8>
 8017d02:	bf00      	nop
 8017d04:	20018b70 	.word	0x20018b70
 8017d08:	e000ed04 	.word	0xe000ed04

08017d0c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8017d0c:	b580      	push	{r7, lr}
 8017d0e:	b082      	sub	sp, #8
 8017d10:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8017d12:	2300      	movs	r3, #0
 8017d14:	607b      	str	r3, [r7, #4]
 8017d16:	e00c      	b.n	8017d32 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8017d18:	687a      	ldr	r2, [r7, #4]
 8017d1a:	4613      	mov	r3, r2
 8017d1c:	009b      	lsls	r3, r3, #2
 8017d1e:	4413      	add	r3, r2
 8017d20:	009b      	lsls	r3, r3, #2
 8017d22:	4a12      	ldr	r2, [pc, #72]	; (8017d6c <prvInitialiseTaskLists+0x60>)
 8017d24:	4413      	add	r3, r2
 8017d26:	4618      	mov	r0, r3
 8017d28:	f7fd ff8c 	bl	8015c44 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8017d2c:	687b      	ldr	r3, [r7, #4]
 8017d2e:	3301      	adds	r3, #1
 8017d30:	607b      	str	r3, [r7, #4]
 8017d32:	687b      	ldr	r3, [r7, #4]
 8017d34:	2b06      	cmp	r3, #6
 8017d36:	d9ef      	bls.n	8017d18 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8017d38:	480d      	ldr	r0, [pc, #52]	; (8017d70 <prvInitialiseTaskLists+0x64>)
 8017d3a:	f7fd ff83 	bl	8015c44 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8017d3e:	480d      	ldr	r0, [pc, #52]	; (8017d74 <prvInitialiseTaskLists+0x68>)
 8017d40:	f7fd ff80 	bl	8015c44 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8017d44:	480c      	ldr	r0, [pc, #48]	; (8017d78 <prvInitialiseTaskLists+0x6c>)
 8017d46:	f7fd ff7d 	bl	8015c44 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8017d4a:	480c      	ldr	r0, [pc, #48]	; (8017d7c <prvInitialiseTaskLists+0x70>)
 8017d4c:	f7fd ff7a 	bl	8015c44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8017d50:	480b      	ldr	r0, [pc, #44]	; (8017d80 <prvInitialiseTaskLists+0x74>)
 8017d52:	f7fd ff77 	bl	8015c44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8017d56:	4b0b      	ldr	r3, [pc, #44]	; (8017d84 <prvInitialiseTaskLists+0x78>)
 8017d58:	4a05      	ldr	r2, [pc, #20]	; (8017d70 <prvInitialiseTaskLists+0x64>)
 8017d5a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8017d5c:	4b0a      	ldr	r3, [pc, #40]	; (8017d88 <prvInitialiseTaskLists+0x7c>)
 8017d5e:	4a05      	ldr	r2, [pc, #20]	; (8017d74 <prvInitialiseTaskLists+0x68>)
 8017d60:	601a      	str	r2, [r3, #0]
}
 8017d62:	bf00      	nop
 8017d64:	3708      	adds	r7, #8
 8017d66:	46bd      	mov	sp, r7
 8017d68:	bd80      	pop	{r7, pc}
 8017d6a:	bf00      	nop
 8017d6c:	20018b70 	.word	0x20018b70
 8017d70:	20018bfc 	.word	0x20018bfc
 8017d74:	20018c10 	.word	0x20018c10
 8017d78:	20018c2c 	.word	0x20018c2c
 8017d7c:	20018c40 	.word	0x20018c40
 8017d80:	20018c58 	.word	0x20018c58
 8017d84:	20018c24 	.word	0x20018c24
 8017d88:	20018c28 	.word	0x20018c28

08017d8c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8017d8c:	b580      	push	{r7, lr}
 8017d8e:	b082      	sub	sp, #8
 8017d90:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8017d92:	e019      	b.n	8017dc8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8017d94:	f7fe f910 	bl	8015fb8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017d98:	4b0f      	ldr	r3, [pc, #60]	; (8017dd8 <prvCheckTasksWaitingTermination+0x4c>)
 8017d9a:	68db      	ldr	r3, [r3, #12]
 8017d9c:	68db      	ldr	r3, [r3, #12]
 8017d9e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017da0:	687b      	ldr	r3, [r7, #4]
 8017da2:	3304      	adds	r3, #4
 8017da4:	4618      	mov	r0, r3
 8017da6:	f7fd ffd7 	bl	8015d58 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8017daa:	4b0c      	ldr	r3, [pc, #48]	; (8017ddc <prvCheckTasksWaitingTermination+0x50>)
 8017dac:	681b      	ldr	r3, [r3, #0]
 8017dae:	3b01      	subs	r3, #1
 8017db0:	4a0a      	ldr	r2, [pc, #40]	; (8017ddc <prvCheckTasksWaitingTermination+0x50>)
 8017db2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8017db4:	4b0a      	ldr	r3, [pc, #40]	; (8017de0 <prvCheckTasksWaitingTermination+0x54>)
 8017db6:	681b      	ldr	r3, [r3, #0]
 8017db8:	3b01      	subs	r3, #1
 8017dba:	4a09      	ldr	r2, [pc, #36]	; (8017de0 <prvCheckTasksWaitingTermination+0x54>)
 8017dbc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8017dbe:	f7fe f92d 	bl	801601c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8017dc2:	6878      	ldr	r0, [r7, #4]
 8017dc4:	f000 f80e 	bl	8017de4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8017dc8:	4b05      	ldr	r3, [pc, #20]	; (8017de0 <prvCheckTasksWaitingTermination+0x54>)
 8017dca:	681b      	ldr	r3, [r3, #0]
 8017dcc:	2b00      	cmp	r3, #0
 8017dce:	d1e1      	bne.n	8017d94 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8017dd0:	bf00      	nop
 8017dd2:	3708      	adds	r7, #8
 8017dd4:	46bd      	mov	sp, r7
 8017dd6:	bd80      	pop	{r7, pc}
 8017dd8:	20018c40 	.word	0x20018c40
 8017ddc:	20018c6c 	.word	0x20018c6c
 8017de0:	20018c54 	.word	0x20018c54

08017de4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8017de4:	b580      	push	{r7, lr}
 8017de6:	b084      	sub	sp, #16
 8017de8:	af00      	add	r7, sp, #0
 8017dea:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8017dec:	687b      	ldr	r3, [r7, #4]
 8017dee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8017df2:	2b00      	cmp	r3, #0
 8017df4:	d108      	bne.n	8017e08 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8017df6:	687b      	ldr	r3, [r7, #4]
 8017df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017dfa:	4618      	mov	r0, r3
 8017dfc:	f7fe faa4 	bl	8016348 <vPortFree>
				vPortFree( pxTCB );
 8017e00:	6878      	ldr	r0, [r7, #4]
 8017e02:	f7fe faa1 	bl	8016348 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8017e06:	e019      	b.n	8017e3c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8017e08:	687b      	ldr	r3, [r7, #4]
 8017e0a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8017e0e:	2b01      	cmp	r3, #1
 8017e10:	d103      	bne.n	8017e1a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8017e12:	6878      	ldr	r0, [r7, #4]
 8017e14:	f7fe fa98 	bl	8016348 <vPortFree>
	}
 8017e18:	e010      	b.n	8017e3c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8017e1a:	687b      	ldr	r3, [r7, #4]
 8017e1c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8017e20:	2b02      	cmp	r3, #2
 8017e22:	d00b      	beq.n	8017e3c <prvDeleteTCB+0x58>
 8017e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e28:	b672      	cpsid	i
 8017e2a:	f383 8811 	msr	BASEPRI, r3
 8017e2e:	f3bf 8f6f 	isb	sy
 8017e32:	f3bf 8f4f 	dsb	sy
 8017e36:	b662      	cpsie	i
 8017e38:	60fb      	str	r3, [r7, #12]
 8017e3a:	e7fe      	b.n	8017e3a <prvDeleteTCB+0x56>
	}
 8017e3c:	bf00      	nop
 8017e3e:	3710      	adds	r7, #16
 8017e40:	46bd      	mov	sp, r7
 8017e42:	bd80      	pop	{r7, pc}

08017e44 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8017e44:	b480      	push	{r7}
 8017e46:	b083      	sub	sp, #12
 8017e48:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8017e4a:	4b0c      	ldr	r3, [pc, #48]	; (8017e7c <prvResetNextTaskUnblockTime+0x38>)
 8017e4c:	681b      	ldr	r3, [r3, #0]
 8017e4e:	681b      	ldr	r3, [r3, #0]
 8017e50:	2b00      	cmp	r3, #0
 8017e52:	d104      	bne.n	8017e5e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8017e54:	4b0a      	ldr	r3, [pc, #40]	; (8017e80 <prvResetNextTaskUnblockTime+0x3c>)
 8017e56:	f04f 32ff 	mov.w	r2, #4294967295
 8017e5a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8017e5c:	e008      	b.n	8017e70 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017e5e:	4b07      	ldr	r3, [pc, #28]	; (8017e7c <prvResetNextTaskUnblockTime+0x38>)
 8017e60:	681b      	ldr	r3, [r3, #0]
 8017e62:	68db      	ldr	r3, [r3, #12]
 8017e64:	68db      	ldr	r3, [r3, #12]
 8017e66:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8017e68:	687b      	ldr	r3, [r7, #4]
 8017e6a:	685b      	ldr	r3, [r3, #4]
 8017e6c:	4a04      	ldr	r2, [pc, #16]	; (8017e80 <prvResetNextTaskUnblockTime+0x3c>)
 8017e6e:	6013      	str	r3, [r2, #0]
}
 8017e70:	bf00      	nop
 8017e72:	370c      	adds	r7, #12
 8017e74:	46bd      	mov	sp, r7
 8017e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e7a:	4770      	bx	lr
 8017e7c:	20018c24 	.word	0x20018c24
 8017e80:	20018c8c 	.word	0x20018c8c

08017e84 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8017e84:	b480      	push	{r7}
 8017e86:	b083      	sub	sp, #12
 8017e88:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8017e8a:	4b0b      	ldr	r3, [pc, #44]	; (8017eb8 <xTaskGetSchedulerState+0x34>)
 8017e8c:	681b      	ldr	r3, [r3, #0]
 8017e8e:	2b00      	cmp	r3, #0
 8017e90:	d102      	bne.n	8017e98 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8017e92:	2301      	movs	r3, #1
 8017e94:	607b      	str	r3, [r7, #4]
 8017e96:	e008      	b.n	8017eaa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017e98:	4b08      	ldr	r3, [pc, #32]	; (8017ebc <xTaskGetSchedulerState+0x38>)
 8017e9a:	681b      	ldr	r3, [r3, #0]
 8017e9c:	2b00      	cmp	r3, #0
 8017e9e:	d102      	bne.n	8017ea6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8017ea0:	2302      	movs	r3, #2
 8017ea2:	607b      	str	r3, [r7, #4]
 8017ea4:	e001      	b.n	8017eaa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8017ea6:	2300      	movs	r3, #0
 8017ea8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8017eaa:	687b      	ldr	r3, [r7, #4]
	}
 8017eac:	4618      	mov	r0, r3
 8017eae:	370c      	adds	r7, #12
 8017eb0:	46bd      	mov	sp, r7
 8017eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017eb6:	4770      	bx	lr
 8017eb8:	20018c78 	.word	0x20018c78
 8017ebc:	20018c94 	.word	0x20018c94

08017ec0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8017ec0:	b580      	push	{r7, lr}
 8017ec2:	b084      	sub	sp, #16
 8017ec4:	af00      	add	r7, sp, #0
 8017ec6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8017ec8:	687b      	ldr	r3, [r7, #4]
 8017eca:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8017ecc:	2300      	movs	r3, #0
 8017ece:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8017ed0:	687b      	ldr	r3, [r7, #4]
 8017ed2:	2b00      	cmp	r3, #0
 8017ed4:	d069      	beq.n	8017faa <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8017ed6:	68bb      	ldr	r3, [r7, #8]
 8017ed8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017eda:	4b36      	ldr	r3, [pc, #216]	; (8017fb4 <xTaskPriorityInherit+0xf4>)
 8017edc:	681b      	ldr	r3, [r3, #0]
 8017ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017ee0:	429a      	cmp	r2, r3
 8017ee2:	d259      	bcs.n	8017f98 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8017ee4:	68bb      	ldr	r3, [r7, #8]
 8017ee6:	699b      	ldr	r3, [r3, #24]
 8017ee8:	2b00      	cmp	r3, #0
 8017eea:	db06      	blt.n	8017efa <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017eec:	4b31      	ldr	r3, [pc, #196]	; (8017fb4 <xTaskPriorityInherit+0xf4>)
 8017eee:	681b      	ldr	r3, [r3, #0]
 8017ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017ef2:	f1c3 0207 	rsb	r2, r3, #7
 8017ef6:	68bb      	ldr	r3, [r7, #8]
 8017ef8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8017efa:	68bb      	ldr	r3, [r7, #8]
 8017efc:	6959      	ldr	r1, [r3, #20]
 8017efe:	68bb      	ldr	r3, [r7, #8]
 8017f00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017f02:	4613      	mov	r3, r2
 8017f04:	009b      	lsls	r3, r3, #2
 8017f06:	4413      	add	r3, r2
 8017f08:	009b      	lsls	r3, r3, #2
 8017f0a:	4a2b      	ldr	r2, [pc, #172]	; (8017fb8 <xTaskPriorityInherit+0xf8>)
 8017f0c:	4413      	add	r3, r2
 8017f0e:	4299      	cmp	r1, r3
 8017f10:	d13a      	bne.n	8017f88 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8017f12:	68bb      	ldr	r3, [r7, #8]
 8017f14:	3304      	adds	r3, #4
 8017f16:	4618      	mov	r0, r3
 8017f18:	f7fd ff1e 	bl	8015d58 <uxListRemove>
 8017f1c:	4603      	mov	r3, r0
 8017f1e:	2b00      	cmp	r3, #0
 8017f20:	d115      	bne.n	8017f4e <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8017f22:	68bb      	ldr	r3, [r7, #8]
 8017f24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017f26:	4924      	ldr	r1, [pc, #144]	; (8017fb8 <xTaskPriorityInherit+0xf8>)
 8017f28:	4613      	mov	r3, r2
 8017f2a:	009b      	lsls	r3, r3, #2
 8017f2c:	4413      	add	r3, r2
 8017f2e:	009b      	lsls	r3, r3, #2
 8017f30:	440b      	add	r3, r1
 8017f32:	681b      	ldr	r3, [r3, #0]
 8017f34:	2b00      	cmp	r3, #0
 8017f36:	d10a      	bne.n	8017f4e <xTaskPriorityInherit+0x8e>
 8017f38:	68bb      	ldr	r3, [r7, #8]
 8017f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017f3c:	2201      	movs	r2, #1
 8017f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8017f42:	43da      	mvns	r2, r3
 8017f44:	4b1d      	ldr	r3, [pc, #116]	; (8017fbc <xTaskPriorityInherit+0xfc>)
 8017f46:	681b      	ldr	r3, [r3, #0]
 8017f48:	4013      	ands	r3, r2
 8017f4a:	4a1c      	ldr	r2, [pc, #112]	; (8017fbc <xTaskPriorityInherit+0xfc>)
 8017f4c:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8017f4e:	4b19      	ldr	r3, [pc, #100]	; (8017fb4 <xTaskPriorityInherit+0xf4>)
 8017f50:	681b      	ldr	r3, [r3, #0]
 8017f52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017f54:	68bb      	ldr	r3, [r7, #8]
 8017f56:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8017f58:	68bb      	ldr	r3, [r7, #8]
 8017f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017f5c:	2201      	movs	r2, #1
 8017f5e:	409a      	lsls	r2, r3
 8017f60:	4b16      	ldr	r3, [pc, #88]	; (8017fbc <xTaskPriorityInherit+0xfc>)
 8017f62:	681b      	ldr	r3, [r3, #0]
 8017f64:	4313      	orrs	r3, r2
 8017f66:	4a15      	ldr	r2, [pc, #84]	; (8017fbc <xTaskPriorityInherit+0xfc>)
 8017f68:	6013      	str	r3, [r2, #0]
 8017f6a:	68bb      	ldr	r3, [r7, #8]
 8017f6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017f6e:	4613      	mov	r3, r2
 8017f70:	009b      	lsls	r3, r3, #2
 8017f72:	4413      	add	r3, r2
 8017f74:	009b      	lsls	r3, r3, #2
 8017f76:	4a10      	ldr	r2, [pc, #64]	; (8017fb8 <xTaskPriorityInherit+0xf8>)
 8017f78:	441a      	add	r2, r3
 8017f7a:	68bb      	ldr	r3, [r7, #8]
 8017f7c:	3304      	adds	r3, #4
 8017f7e:	4619      	mov	r1, r3
 8017f80:	4610      	mov	r0, r2
 8017f82:	f7fd fe8c 	bl	8015c9e <vListInsertEnd>
 8017f86:	e004      	b.n	8017f92 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8017f88:	4b0a      	ldr	r3, [pc, #40]	; (8017fb4 <xTaskPriorityInherit+0xf4>)
 8017f8a:	681b      	ldr	r3, [r3, #0]
 8017f8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017f8e:	68bb      	ldr	r3, [r7, #8]
 8017f90:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8017f92:	2301      	movs	r3, #1
 8017f94:	60fb      	str	r3, [r7, #12]
 8017f96:	e008      	b.n	8017faa <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8017f98:	68bb      	ldr	r3, [r7, #8]
 8017f9a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8017f9c:	4b05      	ldr	r3, [pc, #20]	; (8017fb4 <xTaskPriorityInherit+0xf4>)
 8017f9e:	681b      	ldr	r3, [r3, #0]
 8017fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017fa2:	429a      	cmp	r2, r3
 8017fa4:	d201      	bcs.n	8017faa <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8017fa6:	2301      	movs	r3, #1
 8017fa8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8017faa:	68fb      	ldr	r3, [r7, #12]
	}
 8017fac:	4618      	mov	r0, r3
 8017fae:	3710      	adds	r7, #16
 8017fb0:	46bd      	mov	sp, r7
 8017fb2:	bd80      	pop	{r7, pc}
 8017fb4:	20018b6c 	.word	0x20018b6c
 8017fb8:	20018b70 	.word	0x20018b70
 8017fbc:	20018c74 	.word	0x20018c74

08017fc0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8017fc0:	b580      	push	{r7, lr}
 8017fc2:	b086      	sub	sp, #24
 8017fc4:	af00      	add	r7, sp, #0
 8017fc6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8017fc8:	687b      	ldr	r3, [r7, #4]
 8017fca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8017fcc:	2300      	movs	r3, #0
 8017fce:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8017fd0:	687b      	ldr	r3, [r7, #4]
 8017fd2:	2b00      	cmp	r3, #0
 8017fd4:	d070      	beq.n	80180b8 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8017fd6:	4b3b      	ldr	r3, [pc, #236]	; (80180c4 <xTaskPriorityDisinherit+0x104>)
 8017fd8:	681b      	ldr	r3, [r3, #0]
 8017fda:	693a      	ldr	r2, [r7, #16]
 8017fdc:	429a      	cmp	r2, r3
 8017fde:	d00b      	beq.n	8017ff8 <xTaskPriorityDisinherit+0x38>
 8017fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017fe4:	b672      	cpsid	i
 8017fe6:	f383 8811 	msr	BASEPRI, r3
 8017fea:	f3bf 8f6f 	isb	sy
 8017fee:	f3bf 8f4f 	dsb	sy
 8017ff2:	b662      	cpsie	i
 8017ff4:	60fb      	str	r3, [r7, #12]
 8017ff6:	e7fe      	b.n	8017ff6 <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 8017ff8:	693b      	ldr	r3, [r7, #16]
 8017ffa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017ffc:	2b00      	cmp	r3, #0
 8017ffe:	d10b      	bne.n	8018018 <xTaskPriorityDisinherit+0x58>
 8018000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018004:	b672      	cpsid	i
 8018006:	f383 8811 	msr	BASEPRI, r3
 801800a:	f3bf 8f6f 	isb	sy
 801800e:	f3bf 8f4f 	dsb	sy
 8018012:	b662      	cpsie	i
 8018014:	60bb      	str	r3, [r7, #8]
 8018016:	e7fe      	b.n	8018016 <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 8018018:	693b      	ldr	r3, [r7, #16]
 801801a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801801c:	1e5a      	subs	r2, r3, #1
 801801e:	693b      	ldr	r3, [r7, #16]
 8018020:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8018022:	693b      	ldr	r3, [r7, #16]
 8018024:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018026:	693b      	ldr	r3, [r7, #16]
 8018028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801802a:	429a      	cmp	r2, r3
 801802c:	d044      	beq.n	80180b8 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801802e:	693b      	ldr	r3, [r7, #16]
 8018030:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018032:	2b00      	cmp	r3, #0
 8018034:	d140      	bne.n	80180b8 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018036:	693b      	ldr	r3, [r7, #16]
 8018038:	3304      	adds	r3, #4
 801803a:	4618      	mov	r0, r3
 801803c:	f7fd fe8c 	bl	8015d58 <uxListRemove>
 8018040:	4603      	mov	r3, r0
 8018042:	2b00      	cmp	r3, #0
 8018044:	d115      	bne.n	8018072 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8018046:	693b      	ldr	r3, [r7, #16]
 8018048:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801804a:	491f      	ldr	r1, [pc, #124]	; (80180c8 <xTaskPriorityDisinherit+0x108>)
 801804c:	4613      	mov	r3, r2
 801804e:	009b      	lsls	r3, r3, #2
 8018050:	4413      	add	r3, r2
 8018052:	009b      	lsls	r3, r3, #2
 8018054:	440b      	add	r3, r1
 8018056:	681b      	ldr	r3, [r3, #0]
 8018058:	2b00      	cmp	r3, #0
 801805a:	d10a      	bne.n	8018072 <xTaskPriorityDisinherit+0xb2>
 801805c:	693b      	ldr	r3, [r7, #16]
 801805e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018060:	2201      	movs	r2, #1
 8018062:	fa02 f303 	lsl.w	r3, r2, r3
 8018066:	43da      	mvns	r2, r3
 8018068:	4b18      	ldr	r3, [pc, #96]	; (80180cc <xTaskPriorityDisinherit+0x10c>)
 801806a:	681b      	ldr	r3, [r3, #0]
 801806c:	4013      	ands	r3, r2
 801806e:	4a17      	ldr	r2, [pc, #92]	; (80180cc <xTaskPriorityDisinherit+0x10c>)
 8018070:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8018072:	693b      	ldr	r3, [r7, #16]
 8018074:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8018076:	693b      	ldr	r3, [r7, #16]
 8018078:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801807a:	693b      	ldr	r3, [r7, #16]
 801807c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801807e:	f1c3 0207 	rsb	r2, r3, #7
 8018082:	693b      	ldr	r3, [r7, #16]
 8018084:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8018086:	693b      	ldr	r3, [r7, #16]
 8018088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801808a:	2201      	movs	r2, #1
 801808c:	409a      	lsls	r2, r3
 801808e:	4b0f      	ldr	r3, [pc, #60]	; (80180cc <xTaskPriorityDisinherit+0x10c>)
 8018090:	681b      	ldr	r3, [r3, #0]
 8018092:	4313      	orrs	r3, r2
 8018094:	4a0d      	ldr	r2, [pc, #52]	; (80180cc <xTaskPriorityDisinherit+0x10c>)
 8018096:	6013      	str	r3, [r2, #0]
 8018098:	693b      	ldr	r3, [r7, #16]
 801809a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801809c:	4613      	mov	r3, r2
 801809e:	009b      	lsls	r3, r3, #2
 80180a0:	4413      	add	r3, r2
 80180a2:	009b      	lsls	r3, r3, #2
 80180a4:	4a08      	ldr	r2, [pc, #32]	; (80180c8 <xTaskPriorityDisinherit+0x108>)
 80180a6:	441a      	add	r2, r3
 80180a8:	693b      	ldr	r3, [r7, #16]
 80180aa:	3304      	adds	r3, #4
 80180ac:	4619      	mov	r1, r3
 80180ae:	4610      	mov	r0, r2
 80180b0:	f7fd fdf5 	bl	8015c9e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80180b4:	2301      	movs	r3, #1
 80180b6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80180b8:	697b      	ldr	r3, [r7, #20]
	}
 80180ba:	4618      	mov	r0, r3
 80180bc:	3718      	adds	r7, #24
 80180be:	46bd      	mov	sp, r7
 80180c0:	bd80      	pop	{r7, pc}
 80180c2:	bf00      	nop
 80180c4:	20018b6c 	.word	0x20018b6c
 80180c8:	20018b70 	.word	0x20018b70
 80180cc:	20018c74 	.word	0x20018c74

080180d0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80180d0:	b580      	push	{r7, lr}
 80180d2:	b088      	sub	sp, #32
 80180d4:	af00      	add	r7, sp, #0
 80180d6:	6078      	str	r0, [r7, #4]
 80180d8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80180da:	687b      	ldr	r3, [r7, #4]
 80180dc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80180de:	2301      	movs	r3, #1
 80180e0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80180e2:	687b      	ldr	r3, [r7, #4]
 80180e4:	2b00      	cmp	r3, #0
 80180e6:	f000 8085 	beq.w	80181f4 <vTaskPriorityDisinheritAfterTimeout+0x124>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80180ea:	69bb      	ldr	r3, [r7, #24]
 80180ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80180ee:	2b00      	cmp	r3, #0
 80180f0:	d10b      	bne.n	801810a <vTaskPriorityDisinheritAfterTimeout+0x3a>
 80180f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80180f6:	b672      	cpsid	i
 80180f8:	f383 8811 	msr	BASEPRI, r3
 80180fc:	f3bf 8f6f 	isb	sy
 8018100:	f3bf 8f4f 	dsb	sy
 8018104:	b662      	cpsie	i
 8018106:	60fb      	str	r3, [r7, #12]
 8018108:	e7fe      	b.n	8018108 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801810a:	69bb      	ldr	r3, [r7, #24]
 801810c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801810e:	683b      	ldr	r3, [r7, #0]
 8018110:	429a      	cmp	r2, r3
 8018112:	d202      	bcs.n	801811a <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8018114:	683b      	ldr	r3, [r7, #0]
 8018116:	61fb      	str	r3, [r7, #28]
 8018118:	e002      	b.n	8018120 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801811a:	69bb      	ldr	r3, [r7, #24]
 801811c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801811e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8018120:	69bb      	ldr	r3, [r7, #24]
 8018122:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018124:	69fb      	ldr	r3, [r7, #28]
 8018126:	429a      	cmp	r2, r3
 8018128:	d064      	beq.n	80181f4 <vTaskPriorityDisinheritAfterTimeout+0x124>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801812a:	69bb      	ldr	r3, [r7, #24]
 801812c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801812e:	697b      	ldr	r3, [r7, #20]
 8018130:	429a      	cmp	r2, r3
 8018132:	d15f      	bne.n	80181f4 <vTaskPriorityDisinheritAfterTimeout+0x124>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8018134:	4b31      	ldr	r3, [pc, #196]	; (80181fc <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8018136:	681b      	ldr	r3, [r3, #0]
 8018138:	69ba      	ldr	r2, [r7, #24]
 801813a:	429a      	cmp	r2, r3
 801813c:	d10b      	bne.n	8018156 <vTaskPriorityDisinheritAfterTimeout+0x86>
 801813e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018142:	b672      	cpsid	i
 8018144:	f383 8811 	msr	BASEPRI, r3
 8018148:	f3bf 8f6f 	isb	sy
 801814c:	f3bf 8f4f 	dsb	sy
 8018150:	b662      	cpsie	i
 8018152:	60bb      	str	r3, [r7, #8]
 8018154:	e7fe      	b.n	8018154 <vTaskPriorityDisinheritAfterTimeout+0x84>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8018156:	69bb      	ldr	r3, [r7, #24]
 8018158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801815a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801815c:	69bb      	ldr	r3, [r7, #24]
 801815e:	69fa      	ldr	r2, [r7, #28]
 8018160:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8018162:	69bb      	ldr	r3, [r7, #24]
 8018164:	699b      	ldr	r3, [r3, #24]
 8018166:	2b00      	cmp	r3, #0
 8018168:	db04      	blt.n	8018174 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801816a:	69fb      	ldr	r3, [r7, #28]
 801816c:	f1c3 0207 	rsb	r2, r3, #7
 8018170:	69bb      	ldr	r3, [r7, #24]
 8018172:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8018174:	69bb      	ldr	r3, [r7, #24]
 8018176:	6959      	ldr	r1, [r3, #20]
 8018178:	693a      	ldr	r2, [r7, #16]
 801817a:	4613      	mov	r3, r2
 801817c:	009b      	lsls	r3, r3, #2
 801817e:	4413      	add	r3, r2
 8018180:	009b      	lsls	r3, r3, #2
 8018182:	4a1f      	ldr	r2, [pc, #124]	; (8018200 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8018184:	4413      	add	r3, r2
 8018186:	4299      	cmp	r1, r3
 8018188:	d134      	bne.n	80181f4 <vTaskPriorityDisinheritAfterTimeout+0x124>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801818a:	69bb      	ldr	r3, [r7, #24]
 801818c:	3304      	adds	r3, #4
 801818e:	4618      	mov	r0, r3
 8018190:	f7fd fde2 	bl	8015d58 <uxListRemove>
 8018194:	4603      	mov	r3, r0
 8018196:	2b00      	cmp	r3, #0
 8018198:	d115      	bne.n	80181c6 <vTaskPriorityDisinheritAfterTimeout+0xf6>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801819a:	69bb      	ldr	r3, [r7, #24]
 801819c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801819e:	4918      	ldr	r1, [pc, #96]	; (8018200 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 80181a0:	4613      	mov	r3, r2
 80181a2:	009b      	lsls	r3, r3, #2
 80181a4:	4413      	add	r3, r2
 80181a6:	009b      	lsls	r3, r3, #2
 80181a8:	440b      	add	r3, r1
 80181aa:	681b      	ldr	r3, [r3, #0]
 80181ac:	2b00      	cmp	r3, #0
 80181ae:	d10a      	bne.n	80181c6 <vTaskPriorityDisinheritAfterTimeout+0xf6>
 80181b0:	69bb      	ldr	r3, [r7, #24]
 80181b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80181b4:	2201      	movs	r2, #1
 80181b6:	fa02 f303 	lsl.w	r3, r2, r3
 80181ba:	43da      	mvns	r2, r3
 80181bc:	4b11      	ldr	r3, [pc, #68]	; (8018204 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80181be:	681b      	ldr	r3, [r3, #0]
 80181c0:	4013      	ands	r3, r2
 80181c2:	4a10      	ldr	r2, [pc, #64]	; (8018204 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80181c4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80181c6:	69bb      	ldr	r3, [r7, #24]
 80181c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80181ca:	2201      	movs	r2, #1
 80181cc:	409a      	lsls	r2, r3
 80181ce:	4b0d      	ldr	r3, [pc, #52]	; (8018204 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80181d0:	681b      	ldr	r3, [r3, #0]
 80181d2:	4313      	orrs	r3, r2
 80181d4:	4a0b      	ldr	r2, [pc, #44]	; (8018204 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80181d6:	6013      	str	r3, [r2, #0]
 80181d8:	69bb      	ldr	r3, [r7, #24]
 80181da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80181dc:	4613      	mov	r3, r2
 80181de:	009b      	lsls	r3, r3, #2
 80181e0:	4413      	add	r3, r2
 80181e2:	009b      	lsls	r3, r3, #2
 80181e4:	4a06      	ldr	r2, [pc, #24]	; (8018200 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 80181e6:	441a      	add	r2, r3
 80181e8:	69bb      	ldr	r3, [r7, #24]
 80181ea:	3304      	adds	r3, #4
 80181ec:	4619      	mov	r1, r3
 80181ee:	4610      	mov	r0, r2
 80181f0:	f7fd fd55 	bl	8015c9e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80181f4:	bf00      	nop
 80181f6:	3720      	adds	r7, #32
 80181f8:	46bd      	mov	sp, r7
 80181fa:	bd80      	pop	{r7, pc}
 80181fc:	20018b6c 	.word	0x20018b6c
 8018200:	20018b70 	.word	0x20018b70
 8018204:	20018c74 	.word	0x20018c74

08018208 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8018208:	b480      	push	{r7}
 801820a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 801820c:	4b07      	ldr	r3, [pc, #28]	; (801822c <pvTaskIncrementMutexHeldCount+0x24>)
 801820e:	681b      	ldr	r3, [r3, #0]
 8018210:	2b00      	cmp	r3, #0
 8018212:	d004      	beq.n	801821e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8018214:	4b05      	ldr	r3, [pc, #20]	; (801822c <pvTaskIncrementMutexHeldCount+0x24>)
 8018216:	681b      	ldr	r3, [r3, #0]
 8018218:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801821a:	3201      	adds	r2, #1
 801821c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 801821e:	4b03      	ldr	r3, [pc, #12]	; (801822c <pvTaskIncrementMutexHeldCount+0x24>)
 8018220:	681b      	ldr	r3, [r3, #0]
	}
 8018222:	4618      	mov	r0, r3
 8018224:	46bd      	mov	sp, r7
 8018226:	f85d 7b04 	ldr.w	r7, [sp], #4
 801822a:	4770      	bx	lr
 801822c:	20018b6c 	.word	0x20018b6c

08018230 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8018230:	b580      	push	{r7, lr}
 8018232:	b084      	sub	sp, #16
 8018234:	af00      	add	r7, sp, #0
 8018236:	6078      	str	r0, [r7, #4]
 8018238:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801823a:	4b29      	ldr	r3, [pc, #164]	; (80182e0 <prvAddCurrentTaskToDelayedList+0xb0>)
 801823c:	681b      	ldr	r3, [r3, #0]
 801823e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018240:	4b28      	ldr	r3, [pc, #160]	; (80182e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8018242:	681b      	ldr	r3, [r3, #0]
 8018244:	3304      	adds	r3, #4
 8018246:	4618      	mov	r0, r3
 8018248:	f7fd fd86 	bl	8015d58 <uxListRemove>
 801824c:	4603      	mov	r3, r0
 801824e:	2b00      	cmp	r3, #0
 8018250:	d10b      	bne.n	801826a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8018252:	4b24      	ldr	r3, [pc, #144]	; (80182e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8018254:	681b      	ldr	r3, [r3, #0]
 8018256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018258:	2201      	movs	r2, #1
 801825a:	fa02 f303 	lsl.w	r3, r2, r3
 801825e:	43da      	mvns	r2, r3
 8018260:	4b21      	ldr	r3, [pc, #132]	; (80182e8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8018262:	681b      	ldr	r3, [r3, #0]
 8018264:	4013      	ands	r3, r2
 8018266:	4a20      	ldr	r2, [pc, #128]	; (80182e8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8018268:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801826a:	687b      	ldr	r3, [r7, #4]
 801826c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018270:	d10a      	bne.n	8018288 <prvAddCurrentTaskToDelayedList+0x58>
 8018272:	683b      	ldr	r3, [r7, #0]
 8018274:	2b00      	cmp	r3, #0
 8018276:	d007      	beq.n	8018288 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018278:	4b1a      	ldr	r3, [pc, #104]	; (80182e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 801827a:	681b      	ldr	r3, [r3, #0]
 801827c:	3304      	adds	r3, #4
 801827e:	4619      	mov	r1, r3
 8018280:	481a      	ldr	r0, [pc, #104]	; (80182ec <prvAddCurrentTaskToDelayedList+0xbc>)
 8018282:	f7fd fd0c 	bl	8015c9e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8018286:	e026      	b.n	80182d6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8018288:	68fa      	ldr	r2, [r7, #12]
 801828a:	687b      	ldr	r3, [r7, #4]
 801828c:	4413      	add	r3, r2
 801828e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8018290:	4b14      	ldr	r3, [pc, #80]	; (80182e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8018292:	681b      	ldr	r3, [r3, #0]
 8018294:	68ba      	ldr	r2, [r7, #8]
 8018296:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8018298:	68ba      	ldr	r2, [r7, #8]
 801829a:	68fb      	ldr	r3, [r7, #12]
 801829c:	429a      	cmp	r2, r3
 801829e:	d209      	bcs.n	80182b4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80182a0:	4b13      	ldr	r3, [pc, #76]	; (80182f0 <prvAddCurrentTaskToDelayedList+0xc0>)
 80182a2:	681a      	ldr	r2, [r3, #0]
 80182a4:	4b0f      	ldr	r3, [pc, #60]	; (80182e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80182a6:	681b      	ldr	r3, [r3, #0]
 80182a8:	3304      	adds	r3, #4
 80182aa:	4619      	mov	r1, r3
 80182ac:	4610      	mov	r0, r2
 80182ae:	f7fd fd1a 	bl	8015ce6 <vListInsert>
}
 80182b2:	e010      	b.n	80182d6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80182b4:	4b0f      	ldr	r3, [pc, #60]	; (80182f4 <prvAddCurrentTaskToDelayedList+0xc4>)
 80182b6:	681a      	ldr	r2, [r3, #0]
 80182b8:	4b0a      	ldr	r3, [pc, #40]	; (80182e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80182ba:	681b      	ldr	r3, [r3, #0]
 80182bc:	3304      	adds	r3, #4
 80182be:	4619      	mov	r1, r3
 80182c0:	4610      	mov	r0, r2
 80182c2:	f7fd fd10 	bl	8015ce6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80182c6:	4b0c      	ldr	r3, [pc, #48]	; (80182f8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80182c8:	681b      	ldr	r3, [r3, #0]
 80182ca:	68ba      	ldr	r2, [r7, #8]
 80182cc:	429a      	cmp	r2, r3
 80182ce:	d202      	bcs.n	80182d6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80182d0:	4a09      	ldr	r2, [pc, #36]	; (80182f8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80182d2:	68bb      	ldr	r3, [r7, #8]
 80182d4:	6013      	str	r3, [r2, #0]
}
 80182d6:	bf00      	nop
 80182d8:	3710      	adds	r7, #16
 80182da:	46bd      	mov	sp, r7
 80182dc:	bd80      	pop	{r7, pc}
 80182de:	bf00      	nop
 80182e0:	20018c70 	.word	0x20018c70
 80182e4:	20018b6c 	.word	0x20018b6c
 80182e8:	20018c74 	.word	0x20018c74
 80182ec:	20018c58 	.word	0x20018c58
 80182f0:	20018c28 	.word	0x20018c28
 80182f4:	20018c24 	.word	0x20018c24
 80182f8:	20018c8c 	.word	0x20018c8c

080182fc <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 80182fc:	b580      	push	{r7, lr}
 80182fe:	b084      	sub	sp, #16
 8018300:	af00      	add	r7, sp, #0
 8018302:	6078      	str	r0, [r7, #4]
 8018304:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8018306:	f00c ff97 	bl	8025238 <sys_timeouts_sleeptime>
 801830a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 801830c:	68fb      	ldr	r3, [r7, #12]
 801830e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018312:	d10c      	bne.n	801832e <tcpip_timeouts_mbox_fetch+0x32>
    UNLOCK_TCPIP_CORE();
 8018314:	4814      	ldr	r0, [pc, #80]	; (8018368 <tcpip_timeouts_mbox_fetch+0x6c>)
 8018316:	f00d fe6d 	bl	8025ff4 <sys_sem_signal>
    sys_arch_mbox_fetch(mbox, msg, 0);
 801831a:	2200      	movs	r2, #0
 801831c:	6839      	ldr	r1, [r7, #0]
 801831e:	6878      	ldr	r0, [r7, #4]
 8018320:	f00d fdd0 	bl	8025ec4 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8018324:	2100      	movs	r1, #0
 8018326:	4810      	ldr	r0, [pc, #64]	; (8018368 <tcpip_timeouts_mbox_fetch+0x6c>)
 8018328:	f00d fe33 	bl	8025f92 <sys_arch_sem_wait>
    return;
 801832c:	e019      	b.n	8018362 <tcpip_timeouts_mbox_fetch+0x66>
  } else if (sleeptime == 0) {
 801832e:	68fb      	ldr	r3, [r7, #12]
 8018330:	2b00      	cmp	r3, #0
 8018332:	d102      	bne.n	801833a <tcpip_timeouts_mbox_fetch+0x3e>
    sys_check_timeouts();
 8018334:	f00c ff4a 	bl	80251cc <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8018338:	e7e5      	b.n	8018306 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 801833a:	480b      	ldr	r0, [pc, #44]	; (8018368 <tcpip_timeouts_mbox_fetch+0x6c>)
 801833c:	f00d fe5a 	bl	8025ff4 <sys_sem_signal>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8018340:	68fa      	ldr	r2, [r7, #12]
 8018342:	6839      	ldr	r1, [r7, #0]
 8018344:	6878      	ldr	r0, [r7, #4]
 8018346:	f00d fdbd 	bl	8025ec4 <sys_arch_mbox_fetch>
 801834a:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 801834c:	2100      	movs	r1, #0
 801834e:	4806      	ldr	r0, [pc, #24]	; (8018368 <tcpip_timeouts_mbox_fetch+0x6c>)
 8018350:	f00d fe1f 	bl	8025f92 <sys_arch_sem_wait>
  if (res == SYS_ARCH_TIMEOUT) {
 8018354:	68bb      	ldr	r3, [r7, #8]
 8018356:	f1b3 3fff 	cmp.w	r3, #4294967295
 801835a:	d102      	bne.n	8018362 <tcpip_timeouts_mbox_fetch+0x66>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 801835c:	f00c ff36 	bl	80251cc <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8018360:	e7d1      	b.n	8018306 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8018362:	3710      	adds	r7, #16
 8018364:	46bd      	mov	sp, r7
 8018366:	bd80      	pop	{r7, pc}
 8018368:	2001c9f8 	.word	0x2001c9f8

0801836c <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 801836c:	b580      	push	{r7, lr}
 801836e:	b084      	sub	sp, #16
 8018370:	af00      	add	r7, sp, #0
 8018372:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8018374:	2100      	movs	r1, #0
 8018376:	4811      	ldr	r0, [pc, #68]	; (80183bc <tcpip_thread+0x50>)
 8018378:	f00d fe0b 	bl	8025f92 <sys_arch_sem_wait>
  if (tcpip_init_done != NULL) {
 801837c:	4b10      	ldr	r3, [pc, #64]	; (80183c0 <tcpip_thread+0x54>)
 801837e:	681b      	ldr	r3, [r3, #0]
 8018380:	2b00      	cmp	r3, #0
 8018382:	d005      	beq.n	8018390 <tcpip_thread+0x24>
    tcpip_init_done(tcpip_init_done_arg);
 8018384:	4b0e      	ldr	r3, [pc, #56]	; (80183c0 <tcpip_thread+0x54>)
 8018386:	681b      	ldr	r3, [r3, #0]
 8018388:	4a0e      	ldr	r2, [pc, #56]	; (80183c4 <tcpip_thread+0x58>)
 801838a:	6812      	ldr	r2, [r2, #0]
 801838c:	4610      	mov	r0, r2
 801838e:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8018390:	f107 030c 	add.w	r3, r7, #12
 8018394:	4619      	mov	r1, r3
 8018396:	480c      	ldr	r0, [pc, #48]	; (80183c8 <tcpip_thread+0x5c>)
 8018398:	f7ff ffb0 	bl	80182fc <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 801839c:	68fb      	ldr	r3, [r7, #12]
 801839e:	2b00      	cmp	r3, #0
 80183a0:	d106      	bne.n	80183b0 <tcpip_thread+0x44>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80183a2:	4b0a      	ldr	r3, [pc, #40]	; (80183cc <tcpip_thread+0x60>)
 80183a4:	2291      	movs	r2, #145	; 0x91
 80183a6:	490a      	ldr	r1, [pc, #40]	; (80183d0 <tcpip_thread+0x64>)
 80183a8:	480a      	ldr	r0, [pc, #40]	; (80183d4 <tcpip_thread+0x68>)
 80183aa:	f00d ffc1 	bl	8026330 <iprintf>
      continue;
 80183ae:	e003      	b.n	80183b8 <tcpip_thread+0x4c>
    }
    tcpip_thread_handle_msg(msg);
 80183b0:	68fb      	ldr	r3, [r7, #12]
 80183b2:	4618      	mov	r0, r3
 80183b4:	f000 f810 	bl	80183d8 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80183b8:	e7ea      	b.n	8018390 <tcpip_thread+0x24>
 80183ba:	bf00      	nop
 80183bc:	2001c9f8 	.word	0x2001c9f8
 80183c0:	20018c98 	.word	0x20018c98
 80183c4:	20018c9c 	.word	0x20018c9c
 80183c8:	20018ca0 	.word	0x20018ca0
 80183cc:	080278bc 	.word	0x080278bc
 80183d0:	080278ec 	.word	0x080278ec
 80183d4:	0802790c 	.word	0x0802790c

080183d8 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 80183d8:	b580      	push	{r7, lr}
 80183da:	b082      	sub	sp, #8
 80183dc:	af00      	add	r7, sp, #0
 80183de:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 80183e0:	687b      	ldr	r3, [r7, #4]
 80183e2:	781b      	ldrb	r3, [r3, #0]
 80183e4:	2b01      	cmp	r3, #1
 80183e6:	d018      	beq.n	801841a <tcpip_thread_handle_msg+0x42>
 80183e8:	2b02      	cmp	r3, #2
 80183ea:	d021      	beq.n	8018430 <tcpip_thread_handle_msg+0x58>
 80183ec:	2b00      	cmp	r3, #0
 80183ee:	d126      	bne.n	801843e <tcpip_thread_handle_msg+0x66>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 80183f0:	687b      	ldr	r3, [r7, #4]
 80183f2:	68db      	ldr	r3, [r3, #12]
 80183f4:	687a      	ldr	r2, [r7, #4]
 80183f6:	6850      	ldr	r0, [r2, #4]
 80183f8:	687a      	ldr	r2, [r7, #4]
 80183fa:	6892      	ldr	r2, [r2, #8]
 80183fc:	4611      	mov	r1, r2
 80183fe:	4798      	blx	r3
 8018400:	4603      	mov	r3, r0
 8018402:	2b00      	cmp	r3, #0
 8018404:	d004      	beq.n	8018410 <tcpip_thread_handle_msg+0x38>
        pbuf_free(msg->msg.inp.p);
 8018406:	687b      	ldr	r3, [r7, #4]
 8018408:	685b      	ldr	r3, [r3, #4]
 801840a:	4618      	mov	r0, r3
 801840c:	f006 fd8c 	bl	801ef28 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8018410:	6879      	ldr	r1, [r7, #4]
 8018412:	2009      	movs	r0, #9
 8018414:	f005 ffe0 	bl	801e3d8 <memp_free>
      break;
 8018418:	e018      	b.n	801844c <tcpip_thread_handle_msg+0x74>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 801841a:	687b      	ldr	r3, [r7, #4]
 801841c:	685b      	ldr	r3, [r3, #4]
 801841e:	687a      	ldr	r2, [r7, #4]
 8018420:	6892      	ldr	r2, [r2, #8]
 8018422:	4610      	mov	r0, r2
 8018424:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8018426:	6879      	ldr	r1, [r7, #4]
 8018428:	2008      	movs	r0, #8
 801842a:	f005 ffd5 	bl	801e3d8 <memp_free>
      break;
 801842e:	e00d      	b.n	801844c <tcpip_thread_handle_msg+0x74>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8018430:	687b      	ldr	r3, [r7, #4]
 8018432:	685b      	ldr	r3, [r3, #4]
 8018434:	687a      	ldr	r2, [r7, #4]
 8018436:	6892      	ldr	r2, [r2, #8]
 8018438:	4610      	mov	r0, r2
 801843a:	4798      	blx	r3
      break;
 801843c:	e006      	b.n	801844c <tcpip_thread_handle_msg+0x74>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 801843e:	4b05      	ldr	r3, [pc, #20]	; (8018454 <tcpip_thread_handle_msg+0x7c>)
 8018440:	22cf      	movs	r2, #207	; 0xcf
 8018442:	4905      	ldr	r1, [pc, #20]	; (8018458 <tcpip_thread_handle_msg+0x80>)
 8018444:	4805      	ldr	r0, [pc, #20]	; (801845c <tcpip_thread_handle_msg+0x84>)
 8018446:	f00d ff73 	bl	8026330 <iprintf>
      break;
 801844a:	bf00      	nop
  }
}
 801844c:	bf00      	nop
 801844e:	3708      	adds	r7, #8
 8018450:	46bd      	mov	sp, r7
 8018452:	bd80      	pop	{r7, pc}
 8018454:	080278bc 	.word	0x080278bc
 8018458:	080278ec 	.word	0x080278ec
 801845c:	0802790c 	.word	0x0802790c

08018460 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8018460:	b580      	push	{r7, lr}
 8018462:	b084      	sub	sp, #16
 8018464:	af02      	add	r7, sp, #8
 8018466:	6078      	str	r0, [r7, #4]
 8018468:	6039      	str	r1, [r7, #0]
  lwip_init();
 801846a:	f001 fa59 	bl	8019920 <lwip_init>

  tcpip_init_done = initfunc;
 801846e:	4a17      	ldr	r2, [pc, #92]	; (80184cc <tcpip_init+0x6c>)
 8018470:	687b      	ldr	r3, [r7, #4]
 8018472:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8018474:	4a16      	ldr	r2, [pc, #88]	; (80184d0 <tcpip_init+0x70>)
 8018476:	683b      	ldr	r3, [r7, #0]
 8018478:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 801847a:	2105      	movs	r1, #5
 801847c:	4815      	ldr	r0, [pc, #84]	; (80184d4 <tcpip_init+0x74>)
 801847e:	f00d fcff 	bl	8025e80 <sys_mbox_new>
 8018482:	4603      	mov	r3, r0
 8018484:	2b00      	cmp	r3, #0
 8018486:	d006      	beq.n	8018496 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8018488:	4b13      	ldr	r3, [pc, #76]	; (80184d8 <tcpip_init+0x78>)
 801848a:	f240 2261 	movw	r2, #609	; 0x261
 801848e:	4913      	ldr	r1, [pc, #76]	; (80184dc <tcpip_init+0x7c>)
 8018490:	4813      	ldr	r0, [pc, #76]	; (80184e0 <tcpip_init+0x80>)
 8018492:	f00d ff4d 	bl	8026330 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8018496:	2101      	movs	r1, #1
 8018498:	4812      	ldr	r0, [pc, #72]	; (80184e4 <tcpip_init+0x84>)
 801849a:	f00d fd52 	bl	8025f42 <sys_sem_new>
 801849e:	4603      	mov	r3, r0
 80184a0:	2b00      	cmp	r3, #0
 80184a2:	d006      	beq.n	80184b2 <tcpip_init+0x52>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 80184a4:	4b0c      	ldr	r3, [pc, #48]	; (80184d8 <tcpip_init+0x78>)
 80184a6:	f240 2265 	movw	r2, #613	; 0x265
 80184aa:	490f      	ldr	r1, [pc, #60]	; (80184e8 <tcpip_init+0x88>)
 80184ac:	480c      	ldr	r0, [pc, #48]	; (80184e0 <tcpip_init+0x80>)
 80184ae:	f00d ff3f 	bl	8026330 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 80184b2:	2303      	movs	r3, #3
 80184b4:	9300      	str	r3, [sp, #0]
 80184b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80184ba:	2200      	movs	r2, #0
 80184bc:	490b      	ldr	r1, [pc, #44]	; (80184ec <tcpip_init+0x8c>)
 80184be:	480c      	ldr	r0, [pc, #48]	; (80184f0 <tcpip_init+0x90>)
 80184c0:	f00d fdb4 	bl	802602c <sys_thread_new>
}
 80184c4:	bf00      	nop
 80184c6:	3708      	adds	r7, #8
 80184c8:	46bd      	mov	sp, r7
 80184ca:	bd80      	pop	{r7, pc}
 80184cc:	20018c98 	.word	0x20018c98
 80184d0:	20018c9c 	.word	0x20018c9c
 80184d4:	20018ca0 	.word	0x20018ca0
 80184d8:	080278bc 	.word	0x080278bc
 80184dc:	08027944 	.word	0x08027944
 80184e0:	0802790c 	.word	0x0802790c
 80184e4:	2001c9f8 	.word	0x2001c9f8
 80184e8:	08027968 	.word	0x08027968
 80184ec:	0801836d 	.word	0x0801836d
 80184f0:	0802798c 	.word	0x0802798c

080184f4 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 80184f4:	b580      	push	{r7, lr}
 80184f6:	b084      	sub	sp, #16
 80184f8:	af00      	add	r7, sp, #0
 80184fa:	6078      	str	r0, [r7, #4]
 80184fc:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 80184fe:	687b      	ldr	r3, [r7, #4]
 8018500:	2b00      	cmp	r3, #0
 8018502:	d002      	beq.n	801850a <fs_open+0x16>
 8018504:	683b      	ldr	r3, [r7, #0]
 8018506:	2b00      	cmp	r3, #0
 8018508:	d102      	bne.n	8018510 <fs_open+0x1c>
    return ERR_ARG;
 801850a:	f06f 030f 	mvn.w	r3, #15
 801850e:	e028      	b.n	8018562 <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 8018510:	4b16      	ldr	r3, [pc, #88]	; (801856c <fs_open+0x78>)
 8018512:	60fb      	str	r3, [r7, #12]
 8018514:	e020      	b.n	8018558 <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 8018516:	68fb      	ldr	r3, [r7, #12]
 8018518:	685b      	ldr	r3, [r3, #4]
 801851a:	4619      	mov	r1, r3
 801851c:	6838      	ldr	r0, [r7, #0]
 801851e:	f7f7 fd8f 	bl	8010040 <strcmp>
 8018522:	4603      	mov	r3, r0
 8018524:	2b00      	cmp	r3, #0
 8018526:	d114      	bne.n	8018552 <fs_open+0x5e>
      file->data = (const char *)f->data;
 8018528:	68fb      	ldr	r3, [r7, #12]
 801852a:	689a      	ldr	r2, [r3, #8]
 801852c:	687b      	ldr	r3, [r7, #4]
 801852e:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 8018530:	68fb      	ldr	r3, [r7, #12]
 8018532:	68da      	ldr	r2, [r3, #12]
 8018534:	687b      	ldr	r3, [r7, #4]
 8018536:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 8018538:	68fb      	ldr	r3, [r7, #12]
 801853a:	68da      	ldr	r2, [r3, #12]
 801853c:	687b      	ldr	r3, [r7, #4]
 801853e:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 8018540:	687b      	ldr	r3, [r7, #4]
 8018542:	2200      	movs	r2, #0
 8018544:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 8018546:	68fb      	ldr	r3, [r7, #12]
 8018548:	7c1a      	ldrb	r2, [r3, #16]
 801854a:	687b      	ldr	r3, [r7, #4]
 801854c:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 801854e:	2300      	movs	r3, #0
 8018550:	e007      	b.n	8018562 <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 8018552:	68fb      	ldr	r3, [r7, #12]
 8018554:	681b      	ldr	r3, [r3, #0]
 8018556:	60fb      	str	r3, [r7, #12]
 8018558:	68fb      	ldr	r3, [r7, #12]
 801855a:	2b00      	cmp	r3, #0
 801855c:	d1db      	bne.n	8018516 <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 801855e:	f06f 0305 	mvn.w	r3, #5
}
 8018562:	4618      	mov	r0, r3
 8018564:	3710      	adds	r7, #16
 8018566:	46bd      	mov	sp, r7
 8018568:	bd80      	pop	{r7, pc}
 801856a:	bf00      	nop
 801856c:	0802b6e4 	.word	0x0802b6e4

08018570 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 8018570:	b480      	push	{r7}
 8018572:	b083      	sub	sp, #12
 8018574:	af00      	add	r7, sp, #0
 8018576:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 8018578:	bf00      	nop
 801857a:	370c      	adds	r7, #12
 801857c:	46bd      	mov	sp, r7
 801857e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018582:	4770      	bx	lr

08018584 <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 8018584:	b480      	push	{r7}
 8018586:	b083      	sub	sp, #12
 8018588:	af00      	add	r7, sp, #0
 801858a:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 801858c:	687b      	ldr	r3, [r7, #4]
 801858e:	685a      	ldr	r2, [r3, #4]
 8018590:	687b      	ldr	r3, [r7, #4]
 8018592:	689b      	ldr	r3, [r3, #8]
 8018594:	1ad3      	subs	r3, r2, r3
}
 8018596:	4618      	mov	r0, r3
 8018598:	370c      	adds	r7, #12
 801859a:	46bd      	mov	sp, r7
 801859c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185a0:	4770      	bx	lr

080185a2 <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state *hs)
{
 80185a2:	b580      	push	{r7, lr}
 80185a4:	b082      	sub	sp, #8
 80185a6:	af00      	add	r7, sp, #0
 80185a8:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 80185aa:	222c      	movs	r2, #44	; 0x2c
 80185ac:	2100      	movs	r1, #0
 80185ae:	6878      	ldr	r0, [r7, #4]
 80185b0:	f00d fe0a 	bl	80261c8 <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 80185b4:	bf00      	nop
 80185b6:	3708      	adds	r7, #8
 80185b8:	46bd      	mov	sp, r7
 80185ba:	bd80      	pop	{r7, pc}

080185bc <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state *
http_state_alloc(void)
{
 80185bc:	b580      	push	{r7, lr}
 80185be:	b082      	sub	sp, #8
 80185c0:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 80185c2:	202c      	movs	r0, #44	; 0x2c
 80185c4:	f005 fd34 	bl	801e030 <mem_malloc>
 80185c8:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 80185ca:	687b      	ldr	r3, [r7, #4]
 80185cc:	2b00      	cmp	r3, #0
 80185ce:	d002      	beq.n	80185d6 <http_state_alloc+0x1a>
    http_state_init(ret);
 80185d0:	6878      	ldr	r0, [r7, #4]
 80185d2:	f7ff ffe6 	bl	80185a2 <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 80185d6:	687b      	ldr	r3, [r7, #4]
}
 80185d8:	4618      	mov	r0, r3
 80185da:	3708      	adds	r7, #8
 80185dc:	46bd      	mov	sp, r7
 80185de:	bd80      	pop	{r7, pc}

080185e0 <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 80185e0:	b580      	push	{r7, lr}
 80185e2:	b082      	sub	sp, #8
 80185e4:	af00      	add	r7, sp, #0
 80185e6:	6078      	str	r0, [r7, #4]
  if (hs->handle) {
 80185e8:	687b      	ldr	r3, [r7, #4]
 80185ea:	695b      	ldr	r3, [r3, #20]
 80185ec:	2b00      	cmp	r3, #0
 80185ee:	d007      	beq.n	8018600 <http_state_eof+0x20>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed / 100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
                                     ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 80185f0:	687b      	ldr	r3, [r7, #4]
 80185f2:	695b      	ldr	r3, [r3, #20]
 80185f4:	4618      	mov	r0, r3
 80185f6:	f7ff ffbb 	bl	8018570 <fs_close>
    hs->handle = NULL;
 80185fa:	687b      	ldr	r3, [r7, #4]
 80185fc:	2200      	movs	r2, #0
 80185fe:	615a      	str	r2, [r3, #20]
    http_ssi_state_free(hs->ssi);
    hs->ssi = NULL;
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 8018600:	687b      	ldr	r3, [r7, #4]
 8018602:	6a1b      	ldr	r3, [r3, #32]
 8018604:	2b00      	cmp	r3, #0
 8018606:	d007      	beq.n	8018618 <http_state_eof+0x38>
    pbuf_free(hs->req);
 8018608:	687b      	ldr	r3, [r7, #4]
 801860a:	6a1b      	ldr	r3, [r3, #32]
 801860c:	4618      	mov	r0, r3
 801860e:	f006 fc8b 	bl	801ef28 <pbuf_free>
    hs->req = NULL;
 8018612:	687b      	ldr	r3, [r7, #4]
 8018614:	2200      	movs	r2, #0
 8018616:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 8018618:	bf00      	nop
 801861a:	3708      	adds	r7, #8
 801861c:	46bd      	mov	sp, r7
 801861e:	bd80      	pop	{r7, pc}

08018620 <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 8018620:	b580      	push	{r7, lr}
 8018622:	b082      	sub	sp, #8
 8018624:	af00      	add	r7, sp, #0
 8018626:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 8018628:	687b      	ldr	r3, [r7, #4]
 801862a:	2b00      	cmp	r3, #0
 801862c:	d005      	beq.n	801863a <http_state_free+0x1a>
    http_state_eof(hs);
 801862e:	6878      	ldr	r0, [r7, #4]
 8018630:	f7ff ffd6 	bl	80185e0 <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 8018634:	6878      	ldr	r0, [r7, #4]
 8018636:	f005 fb5d 	bl	801dcf4 <mem_free>
  }
}
 801863a:	bf00      	nop
 801863c:	3708      	adds	r7, #8
 801863e:	46bd      	mov	sp, r7
 8018640:	bd80      	pop	{r7, pc}
	...

08018644 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 8018644:	b580      	push	{r7, lr}
 8018646:	b086      	sub	sp, #24
 8018648:	af00      	add	r7, sp, #0
 801864a:	60f8      	str	r0, [r7, #12]
 801864c:	60b9      	str	r1, [r7, #8]
 801864e:	607a      	str	r2, [r7, #4]
 8018650:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 8018652:	687b      	ldr	r3, [r7, #4]
 8018654:	2b00      	cmp	r3, #0
 8018656:	d106      	bne.n	8018666 <http_write+0x22>
 8018658:	4b2c      	ldr	r3, [pc, #176]	; (801870c <http_write+0xc8>)
 801865a:	f240 2219 	movw	r2, #537	; 0x219
 801865e:	492c      	ldr	r1, [pc, #176]	; (8018710 <http_write+0xcc>)
 8018660:	482c      	ldr	r0, [pc, #176]	; (8018714 <http_write+0xd0>)
 8018662:	f00d fe65 	bl	8026330 <iprintf>
  len = *length;
 8018666:	687b      	ldr	r3, [r7, #4]
 8018668:	881b      	ldrh	r3, [r3, #0]
 801866a:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 801866c:	8afb      	ldrh	r3, [r7, #22]
 801866e:	2b00      	cmp	r3, #0
 8018670:	d101      	bne.n	8018676 <http_write+0x32>
    return ERR_OK;
 8018672:	2300      	movs	r3, #0
 8018674:	e045      	b.n	8018702 <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = altcp_sndbuf(pcb);
 8018676:	68fb      	ldr	r3, [r7, #12]
 8018678:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801867c:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 801867e:	8aba      	ldrh	r2, [r7, #20]
 8018680:	8afb      	ldrh	r3, [r7, #22]
 8018682:	429a      	cmp	r2, r3
 8018684:	d201      	bcs.n	801868a <http_write+0x46>
    len = max_len;
 8018686:	8abb      	ldrh	r3, [r7, #20]
 8018688:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 801868a:	68fb      	ldr	r3, [r7, #12]
 801868c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801868e:	005b      	lsls	r3, r3, #1
 8018690:	82bb      	strh	r3, [r7, #20]
  if (len > max_len) {
 8018692:	8afa      	ldrh	r2, [r7, #22]
 8018694:	8abb      	ldrh	r3, [r7, #20]
 8018696:	429a      	cmp	r2, r3
 8018698:	d901      	bls.n	801869e <http_write+0x5a>
    len = max_len;
 801869a:	8abb      	ldrh	r3, [r7, #20]
 801869c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 801869e:	78fb      	ldrb	r3, [r7, #3]
 80186a0:	8afa      	ldrh	r2, [r7, #22]
 80186a2:	68b9      	ldr	r1, [r7, #8]
 80186a4:	68f8      	ldr	r0, [r7, #12]
 80186a6:	f00a ff17 	bl	80234d8 <tcp_write>
 80186aa:	4603      	mov	r3, r0
 80186ac:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 80186ae:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80186b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80186b6:	d10f      	bne.n	80186d8 <http_write+0x94>
      if ((altcp_sndbuf(pcb) == 0) ||
 80186b8:	68fb      	ldr	r3, [r7, #12]
 80186ba:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80186be:	2b00      	cmp	r3, #0
 80186c0:	d004      	beq.n	80186cc <http_write+0x88>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 80186c2:	68fb      	ldr	r3, [r7, #12]
 80186c4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      if ((altcp_sndbuf(pcb) == 0) ||
 80186c8:	2b07      	cmp	r3, #7
 80186ca:	d902      	bls.n	80186d2 <http_write+0x8e>
        /* no need to try smaller sizes */
        len = 1;
 80186cc:	2301      	movs	r3, #1
 80186ce:	82fb      	strh	r3, [r7, #22]
 80186d0:	e002      	b.n	80186d8 <http_write+0x94>
      } else {
        len /= 2;
 80186d2:	8afb      	ldrh	r3, [r7, #22]
 80186d4:	085b      	lsrs	r3, r3, #1
 80186d6:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 80186d8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80186dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80186e0:	d102      	bne.n	80186e8 <http_write+0xa4>
 80186e2:	8afb      	ldrh	r3, [r7, #22]
 80186e4:	2b01      	cmp	r3, #1
 80186e6:	d8da      	bhi.n	801869e <http_write+0x5a>

  if (err == ERR_OK) {
 80186e8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80186ec:	2b00      	cmp	r3, #0
 80186ee:	d103      	bne.n	80186f8 <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 80186f0:	687b      	ldr	r3, [r7, #4]
 80186f2:	8afa      	ldrh	r2, [r7, #22]
 80186f4:	801a      	strh	r2, [r3, #0]
 80186f6:	e002      	b.n	80186fe <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 80186f8:	687b      	ldr	r3, [r7, #4]
 80186fa:	2200      	movs	r2, #0
 80186fc:	801a      	strh	r2, [r3, #0]
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
#endif

  return err;
 80186fe:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8018702:	4618      	mov	r0, r3
 8018704:	3718      	adds	r7, #24
 8018706:	46bd      	mov	sp, r7
 8018708:	bd80      	pop	{r7, pc}
 801870a:	bf00      	nop
 801870c:	080279d4 	.word	0x080279d4
 8018710:	08027a0c 	.word	0x08027a0c
 8018714:	08027a1c 	.word	0x08027a1c

08018718 <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 8018718:	b580      	push	{r7, lr}
 801871a:	b086      	sub	sp, #24
 801871c:	af00      	add	r7, sp, #0
 801871e:	60f8      	str	r0, [r7, #12]
 8018720:	60b9      	str	r1, [r7, #8]
 8018722:	4613      	mov	r3, r2
 8018724:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  altcp_arg(pcb, NULL);
 8018726:	2100      	movs	r1, #0
 8018728:	68f8      	ldr	r0, [r7, #12]
 801872a:	f008 fb77 	bl	8020e1c <tcp_arg>
  altcp_recv(pcb, NULL);
 801872e:	2100      	movs	r1, #0
 8018730:	68f8      	ldr	r0, [r7, #12]
 8018732:	f008 fb85 	bl	8020e40 <tcp_recv>
  altcp_err(pcb, NULL);
 8018736:	2100      	movs	r1, #0
 8018738:	68f8      	ldr	r0, [r7, #12]
 801873a:	f008 fbc3 	bl	8020ec4 <tcp_err>
  altcp_poll(pcb, NULL, 0);
 801873e:	2200      	movs	r2, #0
 8018740:	2100      	movs	r1, #0
 8018742:	68f8      	ldr	r0, [r7, #12]
 8018744:	f008 fbf8 	bl	8020f38 <tcp_poll>
  altcp_sent(pcb, NULL);
 8018748:	2100      	movs	r1, #0
 801874a:	68f8      	ldr	r0, [r7, #12]
 801874c:	f008 fb9a 	bl	8020e84 <tcp_sent>
  if (hs != NULL) {
 8018750:	68bb      	ldr	r3, [r7, #8]
 8018752:	2b00      	cmp	r3, #0
 8018754:	d002      	beq.n	801875c <http_close_or_abort_conn+0x44>
    http_state_free(hs);
 8018756:	68b8      	ldr	r0, [r7, #8]
 8018758:	f7ff ff62 	bl	8018620 <http_state_free>
  }

  if (abort_conn) {
 801875c:	79fb      	ldrb	r3, [r7, #7]
 801875e:	2b00      	cmp	r3, #0
 8018760:	d004      	beq.n	801876c <http_close_or_abort_conn+0x54>
    altcp_abort(pcb);
 8018762:	68f8      	ldr	r0, [r7, #12]
 8018764:	f007 face 	bl	801fd04 <tcp_abort>
    return ERR_OK;
 8018768:	2300      	movs	r3, #0
 801876a:	e00f      	b.n	801878c <http_close_or_abort_conn+0x74>
  }
  err = altcp_close(pcb);
 801876c:	68f8      	ldr	r0, [r7, #12]
 801876e:	f007 f9e9 	bl	801fb44 <tcp_close>
 8018772:	4603      	mov	r3, r0
 8018774:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 8018776:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801877a:	2b00      	cmp	r3, #0
 801877c:	d004      	beq.n	8018788 <http_close_or_abort_conn+0x70>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void *)pcb));
    /* error closing, try again later in poll */
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 801877e:	2204      	movs	r2, #4
 8018780:	4904      	ldr	r1, [pc, #16]	; (8018794 <http_close_or_abort_conn+0x7c>)
 8018782:	68f8      	ldr	r0, [r7, #12]
 8018784:	f008 fbd8 	bl	8020f38 <tcp_poll>
  }
  return err;
 8018788:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801878c:	4618      	mov	r0, r3
 801878e:	3718      	adds	r7, #24
 8018790:	46bd      	mov	sp, r7
 8018792:	bd80      	pop	{r7, pc}
 8018794:	08018e5b 	.word	0x08018e5b

08018798 <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct altcp_pcb *pcb, struct http_state *hs)
{
 8018798:	b580      	push	{r7, lr}
 801879a:	b082      	sub	sp, #8
 801879c:	af00      	add	r7, sp, #0
 801879e:	6078      	str	r0, [r7, #4]
 80187a0:	6039      	str	r1, [r7, #0]
  return http_close_or_abort_conn(pcb, hs, 0);
 80187a2:	2200      	movs	r2, #0
 80187a4:	6839      	ldr	r1, [r7, #0]
 80187a6:	6878      	ldr	r0, [r7, #4]
 80187a8:	f7ff ffb6 	bl	8018718 <http_close_or_abort_conn>
 80187ac:	4603      	mov	r3, r0
}
 80187ae:	4618      	mov	r0, r3
 80187b0:	3708      	adds	r7, #8
 80187b2:	46bd      	mov	sp, r7
 80187b4:	bd80      	pop	{r7, pc}

080187b6 <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 80187b6:	b580      	push	{r7, lr}
 80187b8:	b082      	sub	sp, #8
 80187ba:	af00      	add	r7, sp, #0
 80187bc:	6078      	str	r0, [r7, #4]
 80187be:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    altcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 80187c0:	6839      	ldr	r1, [r7, #0]
 80187c2:	6878      	ldr	r0, [r7, #4]
 80187c4:	f7ff ffe8 	bl	8018798 <http_close_conn>
  }
}
 80187c8:	bf00      	nop
 80187ca:	3708      	adds	r7, #8
 80187cc:	46bd      	mov	sp, r7
 80187ce:	bd80      	pop	{r7, pc}

080187d0 <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 80187d0:	b580      	push	{r7, lr}
 80187d2:	b084      	sub	sp, #16
 80187d4:	af00      	add	r7, sp, #0
 80187d6:	6078      	str	r0, [r7, #4]
 80187d8:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 80187da:	683b      	ldr	r3, [r7, #0]
 80187dc:	695b      	ldr	r3, [r3, #20]
 80187de:	2b00      	cmp	r3, #0
 80187e0:	d105      	bne.n	80187ee <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 80187e2:	6839      	ldr	r1, [r7, #0]
 80187e4:	6878      	ldr	r0, [r7, #4]
 80187e6:	f7ff ffe6 	bl	80187b6 <http_eof>
    return 0;
 80187ea:	2300      	movs	r3, #0
 80187ec:	e016      	b.n	801881c <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 80187ee:	683b      	ldr	r3, [r7, #0]
 80187f0:	695b      	ldr	r3, [r3, #20]
 80187f2:	4618      	mov	r0, r3
 80187f4:	f7ff fec6 	bl	8018584 <fs_bytes_left>
 80187f8:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 80187fa:	68fb      	ldr	r3, [r7, #12]
 80187fc:	2b00      	cmp	r3, #0
 80187fe:	dc05      	bgt.n	801880c <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 8018800:	6839      	ldr	r1, [r7, #0]
 8018802:	6878      	ldr	r0, [r7, #4]
 8018804:	f7ff ffd7 	bl	80187b6 <http_eof>
    return 0;
 8018808:	2300      	movs	r3, #0
 801880a:	e007      	b.n	801881c <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 801880c:	4b05      	ldr	r3, [pc, #20]	; (8018824 <http_check_eof+0x54>)
 801880e:	f240 429d 	movw	r2, #1181	; 0x49d
 8018812:	4905      	ldr	r1, [pc, #20]	; (8018828 <http_check_eof+0x58>)
 8018814:	4805      	ldr	r0, [pc, #20]	; (801882c <http_check_eof+0x5c>)
 8018816:	f00d fd8b 	bl	8026330 <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 801881a:	2301      	movs	r3, #1
}
 801881c:	4618      	mov	r0, r3
 801881e:	3710      	adds	r7, #16
 8018820:	46bd      	mov	sp, r7
 8018822:	bd80      	pop	{r7, pc}
 8018824:	080279d4 	.word	0x080279d4
 8018828:	08027a44 	.word	0x08027a44
 801882c:	08027a1c 	.word	0x08027a1c

08018830 <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 8018830:	b580      	push	{r7, lr}
 8018832:	b084      	sub	sp, #16
 8018834:	af00      	add	r7, sp, #0
 8018836:	6078      	str	r0, [r7, #4]
 8018838:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 801883a:	2300      	movs	r3, #0
 801883c:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 801883e:	683b      	ldr	r3, [r7, #0]
 8018840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018842:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8018846:	4293      	cmp	r3, r2
 8018848:	d803      	bhi.n	8018852 <http_send_data_nonssi+0x22>
 801884a:	683b      	ldr	r3, [r7, #0]
 801884c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801884e:	b29b      	uxth	r3, r3
 8018850:	e001      	b.n	8018856 <http_send_data_nonssi+0x26>
 8018852:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018856:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8018858:	683b      	ldr	r3, [r7, #0]
 801885a:	6999      	ldr	r1, [r3, #24]
 801885c:	f107 020c 	add.w	r2, r7, #12
 8018860:	2300      	movs	r3, #0
 8018862:	6878      	ldr	r0, [r7, #4]
 8018864:	f7ff feee 	bl	8018644 <http_write>
 8018868:	4603      	mov	r3, r0
 801886a:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 801886c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8018870:	2b00      	cmp	r3, #0
 8018872:	d10d      	bne.n	8018890 <http_send_data_nonssi+0x60>
    data_to_send = 1;
 8018874:	2301      	movs	r3, #1
 8018876:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 8018878:	683b      	ldr	r3, [r7, #0]
 801887a:	699b      	ldr	r3, [r3, #24]
 801887c:	89ba      	ldrh	r2, [r7, #12]
 801887e:	441a      	add	r2, r3
 8018880:	683b      	ldr	r3, [r7, #0]
 8018882:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 8018884:	683b      	ldr	r3, [r7, #0]
 8018886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018888:	89ba      	ldrh	r2, [r7, #12]
 801888a:	1a9a      	subs	r2, r3, r2
 801888c:	683b      	ldr	r3, [r7, #0]
 801888e:	625a      	str	r2, [r3, #36]	; 0x24
  }

  return data_to_send;
 8018890:	7bfb      	ldrb	r3, [r7, #15]
}
 8018892:	4618      	mov	r0, r3
 8018894:	3710      	adds	r7, #16
 8018896:	46bd      	mov	sp, r7
 8018898:	bd80      	pop	{r7, pc}

0801889a <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct altcp_pcb *pcb, struct http_state *hs)
{
 801889a:	b580      	push	{r7, lr}
 801889c:	b084      	sub	sp, #16
 801889e:	af00      	add	r7, sp, #0
 80188a0:	6078      	str	r0, [r7, #4]
 80188a2:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 80188a4:	2300      	movs	r3, #0
 80188a6:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 80188a8:	683b      	ldr	r3, [r7, #0]
 80188aa:	2b00      	cmp	r3, #0
 80188ac:	d101      	bne.n	80188b2 <http_send+0x18>
    return 0;
 80188ae:	2300      	movs	r3, #0
 80188b0:	e025      	b.n	80188fe <http_send+0x64>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 80188b2:	683b      	ldr	r3, [r7, #0]
 80188b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80188b6:	2b00      	cmp	r3, #0
 80188b8:	d108      	bne.n	80188cc <http_send+0x32>
    if (!http_check_eof(pcb, hs)) {
 80188ba:	6839      	ldr	r1, [r7, #0]
 80188bc:	6878      	ldr	r0, [r7, #4]
 80188be:	f7ff ff87 	bl	80187d0 <http_check_eof>
 80188c2:	4603      	mov	r3, r0
 80188c4:	2b00      	cmp	r3, #0
 80188c6:	d101      	bne.n	80188cc <http_send+0x32>
      return 0;
 80188c8:	2300      	movs	r3, #0
 80188ca:	e018      	b.n	80188fe <http_send+0x64>
  if (hs->ssi) {
    data_to_send = http_send_data_ssi(pcb, hs);
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 80188cc:	6839      	ldr	r1, [r7, #0]
 80188ce:	6878      	ldr	r0, [r7, #4]
 80188d0:	f7ff ffae 	bl	8018830 <http_send_data_nonssi>
 80188d4:	4603      	mov	r3, r0
 80188d6:	73fb      	strb	r3, [r7, #15]
  }

  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 80188d8:	683b      	ldr	r3, [r7, #0]
 80188da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80188dc:	2b00      	cmp	r3, #0
 80188de:	d10d      	bne.n	80188fc <http_send+0x62>
 80188e0:	683b      	ldr	r3, [r7, #0]
 80188e2:	695b      	ldr	r3, [r3, #20]
 80188e4:	4618      	mov	r0, r3
 80188e6:	f7ff fe4d 	bl	8018584 <fs_bytes_left>
 80188ea:	4603      	mov	r3, r0
 80188ec:	2b00      	cmp	r3, #0
 80188ee:	dc05      	bgt.n	80188fc <http_send+0x62>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 80188f0:	6839      	ldr	r1, [r7, #0]
 80188f2:	6878      	ldr	r0, [r7, #4]
 80188f4:	f7ff ff5f 	bl	80187b6 <http_eof>
    return 0;
 80188f8:	2300      	movs	r3, #0
 80188fa:	e000      	b.n	80188fe <http_send+0x64>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 80188fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80188fe:	4618      	mov	r0, r3
 8018900:	3710      	adds	r7, #16
 8018902:	46bd      	mov	sp, r7
 8018904:	bd80      	pop	{r7, pc}
	...

08018908 <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 8018908:	b580      	push	{r7, lr}
 801890a:	b084      	sub	sp, #16
 801890c:	af00      	add	r7, sp, #0
 801890e:	6078      	str	r0, [r7, #4]
 8018910:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 8018912:	683b      	ldr	r3, [r7, #0]
 8018914:	4a1c      	ldr	r2, [pc, #112]	; (8018988 <http_get_404_file+0x80>)
 8018916:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 8018918:	687a      	ldr	r2, [r7, #4]
 801891a:	683b      	ldr	r3, [r7, #0]
 801891c:	681b      	ldr	r3, [r3, #0]
 801891e:	4619      	mov	r1, r3
 8018920:	4610      	mov	r0, r2
 8018922:	f7ff fde7 	bl	80184f4 <fs_open>
 8018926:	4603      	mov	r3, r0
 8018928:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801892a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801892e:	2b00      	cmp	r3, #0
 8018930:	d024      	beq.n	801897c <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 8018932:	683b      	ldr	r3, [r7, #0]
 8018934:	4a15      	ldr	r2, [pc, #84]	; (801898c <http_get_404_file+0x84>)
 8018936:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 8018938:	687a      	ldr	r2, [r7, #4]
 801893a:	683b      	ldr	r3, [r7, #0]
 801893c:	681b      	ldr	r3, [r3, #0]
 801893e:	4619      	mov	r1, r3
 8018940:	4610      	mov	r0, r2
 8018942:	f7ff fdd7 	bl	80184f4 <fs_open>
 8018946:	4603      	mov	r3, r0
 8018948:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801894a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801894e:	2b00      	cmp	r3, #0
 8018950:	d014      	beq.n	801897c <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 8018952:	683b      	ldr	r3, [r7, #0]
 8018954:	4a0e      	ldr	r2, [pc, #56]	; (8018990 <http_get_404_file+0x88>)
 8018956:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 8018958:	687a      	ldr	r2, [r7, #4]
 801895a:	683b      	ldr	r3, [r7, #0]
 801895c:	681b      	ldr	r3, [r3, #0]
 801895e:	4619      	mov	r1, r3
 8018960:	4610      	mov	r0, r2
 8018962:	f7ff fdc7 	bl	80184f4 <fs_open>
 8018966:	4603      	mov	r3, r0
 8018968:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 801896a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801896e:	2b00      	cmp	r3, #0
 8018970:	d004      	beq.n	801897c <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 8018972:	683b      	ldr	r3, [r7, #0]
 8018974:	2200      	movs	r2, #0
 8018976:	601a      	str	r2, [r3, #0]
        return NULL;
 8018978:	2300      	movs	r3, #0
 801897a:	e000      	b.n	801897e <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 801897c:	687b      	ldr	r3, [r7, #4]
}
 801897e:	4618      	mov	r0, r3
 8018980:	3710      	adds	r7, #16
 8018982:	46bd      	mov	sp, r7
 8018984:	bd80      	pop	{r7, pc}
 8018986:	bf00      	nop
 8018988:	08027a7c 	.word	0x08027a7c
 801898c:	08027a88 	.word	0x08027a88
 8018990:	08027a94 	.word	0x08027a94

08018994 <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct altcp_pcb *pcb)
{
 8018994:	b580      	push	{r7, lr}
 8018996:	b08e      	sub	sp, #56	; 0x38
 8018998:	af00      	add	r7, sp, #0
 801899a:	60f8      	str	r0, [r7, #12]
 801899c:	60b9      	str	r1, [r7, #8]
 801899e:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 80189a0:	68fb      	ldr	r3, [r7, #12]
 80189a2:	627b      	str	r3, [r7, #36]	; 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 80189a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80189a6:	2b00      	cmp	r3, #0
 80189a8:	d106      	bne.n	80189b8 <http_parse_request+0x24>
 80189aa:	4b65      	ldr	r3, [pc, #404]	; (8018b40 <http_parse_request+0x1ac>)
 80189ac:	f240 72ae 	movw	r2, #1966	; 0x7ae
 80189b0:	4964      	ldr	r1, [pc, #400]	; (8018b44 <http_parse_request+0x1b0>)
 80189b2:	4865      	ldr	r0, [pc, #404]	; (8018b48 <http_parse_request+0x1b4>)
 80189b4:	f00d fcbc 	bl	8026330 <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 80189b8:	68bb      	ldr	r3, [r7, #8]
 80189ba:	2b00      	cmp	r3, #0
 80189bc:	d106      	bne.n	80189cc <http_parse_request+0x38>
 80189be:	4b60      	ldr	r3, [pc, #384]	; (8018b40 <http_parse_request+0x1ac>)
 80189c0:	f240 72af 	movw	r2, #1967	; 0x7af
 80189c4:	4961      	ldr	r1, [pc, #388]	; (8018b4c <http_parse_request+0x1b8>)
 80189c6:	4860      	ldr	r0, [pc, #384]	; (8018b48 <http_parse_request+0x1b4>)
 80189c8:	f00d fcb2 	bl	8026330 <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 80189cc:	68bb      	ldr	r3, [r7, #8]
 80189ce:	695b      	ldr	r3, [r3, #20]
 80189d0:	2b00      	cmp	r3, #0
 80189d2:	d103      	bne.n	80189dc <http_parse_request+0x48>
 80189d4:	68bb      	ldr	r3, [r7, #8]
 80189d6:	699b      	ldr	r3, [r3, #24]
 80189d8:	2b00      	cmp	r3, #0
 80189da:	d002      	beq.n	80189e2 <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 80189dc:	f06f 0307 	mvn.w	r3, #7
 80189e0:	e0aa      	b.n	8018b38 <http_parse_request+0x1a4>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 80189e2:	68bb      	ldr	r3, [r7, #8]
 80189e4:	6a1b      	ldr	r3, [r3, #32]
 80189e6:	2b00      	cmp	r3, #0
 80189e8:	d103      	bne.n	80189f2 <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 80189ea:	68bb      	ldr	r3, [r7, #8]
 80189ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80189ee:	621a      	str	r2, [r3, #32]
 80189f0:	e005      	b.n	80189fe <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 80189f2:	68bb      	ldr	r3, [r7, #8]
 80189f4:	6a1b      	ldr	r3, [r3, #32]
 80189f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80189f8:	4618      	mov	r0, r3
 80189fa:	f006 fb63 	bl	801f0c4 <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 80189fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018a00:	f006 fb38 	bl	801f074 <pbuf_ref>

  if (hs->req->next != NULL) {
 8018a04:	68bb      	ldr	r3, [r7, #8]
 8018a06:	6a1b      	ldr	r3, [r3, #32]
 8018a08:	681b      	ldr	r3, [r3, #0]
 8018a0a:	2b00      	cmp	r3, #0
 8018a0c:	d012      	beq.n	8018a34 <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 8018a0e:	68bb      	ldr	r3, [r7, #8]
 8018a10:	6a1b      	ldr	r3, [r3, #32]
 8018a12:	891b      	ldrh	r3, [r3, #8]
 8018a14:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8018a18:	4293      	cmp	r3, r2
 8018a1a:	bf28      	it	cs
 8018a1c:	4613      	movcs	r3, r2
 8018a1e:	867b      	strh	r3, [r7, #50]	; 0x32
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 8018a20:	68bb      	ldr	r3, [r7, #8]
 8018a22:	6a18      	ldr	r0, [r3, #32]
 8018a24:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8018a26:	2300      	movs	r3, #0
 8018a28:	4949      	ldr	r1, [pc, #292]	; (8018b50 <http_parse_request+0x1bc>)
 8018a2a:	f006 fc83 	bl	801f334 <pbuf_copy_partial>
    data = httpd_req_buf;
 8018a2e:	4b48      	ldr	r3, [pc, #288]	; (8018b50 <http_parse_request+0x1bc>)
 8018a30:	637b      	str	r3, [r7, #52]	; 0x34
 8018a32:	e005      	b.n	8018a40 <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 8018a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a36:	685b      	ldr	r3, [r3, #4]
 8018a38:	637b      	str	r3, [r7, #52]	; 0x34
    data_len = p->len;
 8018a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a3c:	895b      	ldrh	r3, [r3, #10]
 8018a3e:	867b      	strh	r3, [r7, #50]	; 0x32
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 8018a40:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8018a42:	2b06      	cmp	r3, #6
 8018a44:	d963      	bls.n	8018b0e <http_parse_request+0x17a>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 8018a46:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8018a48:	461a      	mov	r2, r3
 8018a4a:	4942      	ldr	r1, [pc, #264]	; (8018b54 <http_parse_request+0x1c0>)
 8018a4c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8018a4e:	f000 fb99 	bl	8019184 <lwip_strnstr>
 8018a52:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 8018a54:	6a3b      	ldr	r3, [r7, #32]
 8018a56:	2b00      	cmp	r3, #0
 8018a58:	d059      	beq.n	8018b0e <http_parse_request+0x17a>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 8018a5a:	2300      	movs	r3, #0
 8018a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 8018a5e:	2204      	movs	r2, #4
 8018a60:	493d      	ldr	r1, [pc, #244]	; (8018b58 <http_parse_request+0x1c4>)
 8018a62:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8018a64:	f00d fd9f 	bl	80265a6 <strncmp>
 8018a68:	4603      	mov	r3, r0
 8018a6a:	2b00      	cmp	r3, #0
 8018a6c:	d117      	bne.n	8018a9e <http_parse_request+0x10a>
        sp1 = data + 3;
 8018a6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018a70:	3303      	adds	r3, #3
 8018a72:	61fb      	str	r3, [r7, #28]
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
                                  data));
        return http_find_error_file(hs, 501);
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 8018a74:	69fb      	ldr	r3, [r7, #28]
 8018a76:	3301      	adds	r3, #1
 8018a78:	461a      	mov	r2, r3
 8018a7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018a7c:	1ad3      	subs	r3, r2, r3
 8018a7e:	b29b      	uxth	r3, r3
 8018a80:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8018a82:	1ad3      	subs	r3, r2, r3
 8018a84:	837b      	strh	r3, [r7, #26]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 8018a86:	69fb      	ldr	r3, [r7, #28]
 8018a88:	3301      	adds	r3, #1
 8018a8a:	8b7a      	ldrh	r2, [r7, #26]
 8018a8c:	4933      	ldr	r1, [pc, #204]	; (8018b5c <http_parse_request+0x1c8>)
 8018a8e:	4618      	mov	r0, r3
 8018a90:	f000 fb78 	bl	8019184 <lwip_strnstr>
 8018a94:	62b8      	str	r0, [r7, #40]	; 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 8018a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a98:	2b00      	cmp	r3, #0
 8018a9a:	d111      	bne.n	8018ac0 <http_parse_request+0x12c>
 8018a9c:	e006      	b.n	8018aac <http_parse_request+0x118>
        data[4] = 0;
 8018a9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018aa0:	3304      	adds	r3, #4
 8018aa2:	2200      	movs	r2, #0
 8018aa4:	701a      	strb	r2, [r3, #0]
        return http_find_error_file(hs, 501);
 8018aa6:	f06f 030f 	mvn.w	r3, #15
 8018aaa:	e045      	b.n	8018b38 <http_parse_request+0x1a4>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 8018aac:	69fb      	ldr	r3, [r7, #28]
 8018aae:	3301      	adds	r3, #1
 8018ab0:	8b7a      	ldrh	r2, [r7, #26]
 8018ab2:	4928      	ldr	r1, [pc, #160]	; (8018b54 <http_parse_request+0x1c0>)
 8018ab4:	4618      	mov	r0, r3
 8018ab6:	f000 fb65 	bl	8019184 <lwip_strnstr>
 8018aba:	62b8      	str	r0, [r7, #40]	; 0x28
        is_09 = 1;
 8018abc:	2301      	movs	r3, #1
 8018abe:	62fb      	str	r3, [r7, #44]	; 0x2c
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 8018ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018ac2:	69fa      	ldr	r2, [r7, #28]
 8018ac4:	3201      	adds	r2, #1
 8018ac6:	1a9b      	subs	r3, r3, r2
 8018ac8:	833b      	strh	r3, [r7, #24]
      if ((sp2 != 0) && (sp2 > sp1)) {
 8018aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018acc:	2b00      	cmp	r3, #0
 8018ace:	d01e      	beq.n	8018b0e <http_parse_request+0x17a>
 8018ad0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018ad2:	69fb      	ldr	r3, [r7, #28]
 8018ad4:	429a      	cmp	r2, r3
 8018ad6:	d91a      	bls.n	8018b0e <http_parse_request+0x17a>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 8018ad8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8018ada:	461a      	mov	r2, r3
 8018adc:	4920      	ldr	r1, [pc, #128]	; (8018b60 <http_parse_request+0x1cc>)
 8018ade:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8018ae0:	f000 fb50 	bl	8019184 <lwip_strnstr>
 8018ae4:	4603      	mov	r3, r0
 8018ae6:	2b00      	cmp	r3, #0
 8018ae8:	d011      	beq.n	8018b0e <http_parse_request+0x17a>
          char *uri = sp1 + 1;
 8018aea:	69fb      	ldr	r3, [r7, #28]
 8018aec:	3301      	adds	r3, #1
 8018aee:	617b      	str	r3, [r7, #20]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 8018af0:	69fb      	ldr	r3, [r7, #28]
 8018af2:	2200      	movs	r2, #0
 8018af4:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 8018af6:	8b3b      	ldrh	r3, [r7, #24]
 8018af8:	697a      	ldr	r2, [r7, #20]
 8018afa:	4413      	add	r3, r2
 8018afc:	2200      	movs	r2, #0
 8018afe:	701a      	strb	r2, [r3, #0]
            }
            return err;
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 8018b00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018b02:	6979      	ldr	r1, [r7, #20]
 8018b04:	68b8      	ldr	r0, [r7, #8]
 8018b06:	f000 f82d 	bl	8018b64 <http_find_file>
 8018b0a:	4603      	mov	r3, r0
 8018b0c:	e014      	b.n	8018b38 <http_parse_request+0x1a4>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 8018b0e:	68bb      	ldr	r3, [r7, #8]
 8018b10:	6a1b      	ldr	r3, [r3, #32]
 8018b12:	4618      	mov	r0, r3
 8018b14:	f006 fa96 	bl	801f044 <pbuf_clen>
 8018b18:	4603      	mov	r3, r0
 8018b1a:	827b      	strh	r3, [r7, #18]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 8018b1c:	68bb      	ldr	r3, [r7, #8]
 8018b1e:	6a1b      	ldr	r3, [r3, #32]
 8018b20:	891b      	ldrh	r3, [r3, #8]
 8018b22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8018b26:	d205      	bcs.n	8018b34 <http_parse_request+0x1a0>
 8018b28:	8a7b      	ldrh	r3, [r7, #18]
 8018b2a:	2b05      	cmp	r3, #5
 8018b2c:	d802      	bhi.n	8018b34 <http_parse_request+0x1a0>
      (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 8018b2e:	f06f 0304 	mvn.w	r3, #4
 8018b32:	e001      	b.n	8018b38 <http_parse_request+0x1a4>
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 8018b34:	f06f 030f 	mvn.w	r3, #15
  }
}
 8018b38:	4618      	mov	r0, r3
 8018b3a:	3738      	adds	r7, #56	; 0x38
 8018b3c:	46bd      	mov	sp, r7
 8018b3e:	bd80      	pop	{r7, pc}
 8018b40:	080279d4 	.word	0x080279d4
 8018b44:	08027aa0 	.word	0x08027aa0
 8018b48:	08027a1c 	.word	0x08027a1c
 8018b4c:	08027aac 	.word	0x08027aac
 8018b50:	20018ca4 	.word	0x20018ca4
 8018b54:	08027ab8 	.word	0x08027ab8
 8018b58:	08027abc 	.word	0x08027abc
 8018b5c:	08027ac4 	.word	0x08027ac4
 8018b60:	08027ac8 	.word	0x08027ac8

08018b64 <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 8018b64:	b580      	push	{r7, lr}
 8018b66:	b092      	sub	sp, #72	; 0x48
 8018b68:	af02      	add	r7, sp, #8
 8018b6a:	60f8      	str	r0, [r7, #12]
 8018b6c:	60b9      	str	r1, [r7, #8]
 8018b6e:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 8018b70:	2300      	movs	r3, #0
 8018b72:	63bb      	str	r3, [r7, #56]	; 0x38
  char *params = NULL;
 8018b74:	2300      	movs	r3, #0
 8018b76:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 8018b78:	2300      	movs	r3, #0
 8018b7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 8018b7e:	68bb      	ldr	r3, [r7, #8]
 8018b80:	4618      	mov	r0, r3
 8018b82:	f7f7 fa67 	bl	8010054 <strlen>
 8018b86:	62b8      	str	r0, [r7, #40]	; 0x28
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 8018b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018b8a:	2b00      	cmp	r3, #0
 8018b8c:	d06b      	beq.n	8018c66 <http_find_file+0x102>
 8018b8e:	68ba      	ldr	r2, [r7, #8]
 8018b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018b92:	3b01      	subs	r3, #1
 8018b94:	4413      	add	r3, r2
 8018b96:	781b      	ldrb	r3, [r3, #0]
 8018b98:	2b2f      	cmp	r3, #47	; 0x2f
 8018b9a:	d164      	bne.n	8018c66 <http_find_file+0x102>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8018b9c:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 8018b9e:	4a53      	ldr	r2, [pc, #332]	; (8018cec <http_find_file+0x188>)
 8018ba0:	4293      	cmp	r3, r2
 8018ba2:	d102      	bne.n	8018baa <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8018ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018ba6:	2b01      	cmp	r3, #1
 8018ba8:	d15d      	bne.n	8018c66 <http_find_file+0x102>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 8018baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018bac:	3b01      	subs	r3, #1
 8018bae:	2b3f      	cmp	r3, #63	; 0x3f
 8018bb0:	bf28      	it	cs
 8018bb2:	233f      	movcs	r3, #63	; 0x3f
 8018bb4:	627b      	str	r3, [r7, #36]	; 0x24
    if (copy_len > 0) {
 8018bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018bb8:	2b00      	cmp	r3, #0
 8018bba:	d00a      	beq.n	8018bd2 <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 8018bbc:	68bb      	ldr	r3, [r7, #8]
 8018bbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018bc0:	4619      	mov	r1, r3
 8018bc2:	484a      	ldr	r0, [pc, #296]	; (8018cec <http_find_file+0x188>)
 8018bc4:	f00d fadb 	bl	802617e <memcpy>
      http_uri_buf[copy_len] = 0;
 8018bc8:	4a48      	ldr	r2, [pc, #288]	; (8018cec <http_find_file+0x188>)
 8018bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018bcc:	4413      	add	r3, r2
 8018bce:	2200      	movs	r2, #0
 8018bd0:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 8018bd2:	2300      	movs	r3, #0
 8018bd4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8018bd6:	e043      	b.n	8018c60 <http_find_file+0xfc>
      const char *file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 8018bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018bda:	2b00      	cmp	r3, #0
 8018bdc:	d028      	beq.n	8018c30 <http_find_file+0xcc>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 8018bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018be0:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8018be4:	623b      	str	r3, [r7, #32]
        if (len_left > 0) {
 8018be6:	6a3b      	ldr	r3, [r7, #32]
 8018be8:	2b00      	cmp	r3, #0
 8018bea:	d01e      	beq.n	8018c2a <http_find_file+0xc6>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 8018bec:	4a40      	ldr	r2, [pc, #256]	; (8018cf0 <http_find_file+0x18c>)
 8018bee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018bf0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8018bf4:	4618      	mov	r0, r3
 8018bf6:	f7f7 fa2d 	bl	8010054 <strlen>
 8018bfa:	61f8      	str	r0, [r7, #28]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 8018bfc:	69fa      	ldr	r2, [r7, #28]
 8018bfe:	6a3b      	ldr	r3, [r7, #32]
 8018c00:	4293      	cmp	r3, r2
 8018c02:	bf28      	it	cs
 8018c04:	4613      	movcs	r3, r2
 8018c06:	61bb      	str	r3, [r7, #24]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 8018c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018c0a:	4a38      	ldr	r2, [pc, #224]	; (8018cec <http_find_file+0x188>)
 8018c0c:	1898      	adds	r0, r3, r2
 8018c0e:	4a38      	ldr	r2, [pc, #224]	; (8018cf0 <http_find_file+0x18c>)
 8018c10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018c12:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8018c16:	69ba      	ldr	r2, [r7, #24]
 8018c18:	4619      	mov	r1, r3
 8018c1a:	f00d fab0 	bl	802617e <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 8018c1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018c20:	69bb      	ldr	r3, [r7, #24]
 8018c22:	4413      	add	r3, r2
 8018c24:	4a31      	ldr	r2, [pc, #196]	; (8018cec <http_find_file+0x188>)
 8018c26:	2100      	movs	r1, #0
 8018c28:	54d1      	strb	r1, [r2, r3]
        }
        file_name = http_uri_buf;
 8018c2a:	4b30      	ldr	r3, [pc, #192]	; (8018cec <http_find_file+0x188>)
 8018c2c:	633b      	str	r3, [r7, #48]	; 0x30
 8018c2e:	e004      	b.n	8018c3a <http_find_file+0xd6>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = httpd_default_filenames[loop].name;
 8018c30:	4a2f      	ldr	r2, [pc, #188]	; (8018cf0 <http_find_file+0x18c>)
 8018c32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018c34:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8018c38:	633b      	str	r3, [r7, #48]	; 0x30
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 8018c3a:	68fb      	ldr	r3, [r7, #12]
 8018c3c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8018c3e:	4618      	mov	r0, r3
 8018c40:	f7ff fc58 	bl	80184f4 <fs_open>
 8018c44:	4603      	mov	r3, r0
 8018c46:	75fb      	strb	r3, [r7, #23]
      if (err == ERR_OK) {
 8018c48:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8018c4c:	2b00      	cmp	r3, #0
 8018c4e:	d104      	bne.n	8018c5a <http_find_file+0xf6>
        uri = file_name;
 8018c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018c52:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 8018c54:	68fb      	ldr	r3, [r7, #12]
 8018c56:	63bb      	str	r3, [r7, #56]	; 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = httpd_default_filenames[loop].shtml;
#endif /* LWIP_HTTPD_SSI */
        break;
 8018c58:	e005      	b.n	8018c66 <http_find_file+0x102>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 8018c5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018c5c:	3301      	adds	r3, #1
 8018c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8018c60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018c62:	2b04      	cmp	r3, #4
 8018c64:	d9b8      	bls.n	8018bd8 <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 8018c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018c68:	2b00      	cmp	r3, #0
 8018c6a:	d124      	bne.n	8018cb6 <http_find_file+0x152>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 8018c6c:	68bb      	ldr	r3, [r7, #8]
 8018c6e:	213f      	movs	r1, #63	; 0x3f
 8018c70:	4618      	mov	r0, r3
 8018c72:	f00d fc8a 	bl	802658a <strchr>
 8018c76:	6378      	str	r0, [r7, #52]	; 0x34
    if (params != NULL) {
 8018c78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018c7a:	2b00      	cmp	r3, #0
 8018c7c:	d005      	beq.n	8018c8a <http_find_file+0x126>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 8018c7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018c80:	2200      	movs	r2, #0
 8018c82:	701a      	strb	r2, [r3, #0]
      params++;
 8018c84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018c86:	3301      	adds	r3, #1
 8018c88:	637b      	str	r3, [r7, #52]	; 0x34
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 8018c8a:	68fb      	ldr	r3, [r7, #12]
 8018c8c:	68ba      	ldr	r2, [r7, #8]
 8018c8e:	4611      	mov	r1, r2
 8018c90:	4618      	mov	r0, r3
 8018c92:	f7ff fc2f 	bl	80184f4 <fs_open>
 8018c96:	4603      	mov	r3, r0
 8018c98:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 8018c9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8018c9e:	2b00      	cmp	r3, #0
 8018ca0:	d102      	bne.n	8018ca8 <http_find_file+0x144>
      file = &hs->file_handle;
 8018ca2:	68fb      	ldr	r3, [r7, #12]
 8018ca4:	63bb      	str	r3, [r7, #56]	; 0x38
 8018ca6:	e006      	b.n	8018cb6 <http_find_file+0x152>
    } else {
      file = http_get_404_file(hs, &uri);
 8018ca8:	f107 0308 	add.w	r3, r7, #8
 8018cac:	4619      	mov	r1, r3
 8018cae:	68f8      	ldr	r0, [r7, #12]
 8018cb0:	f7ff fe2a 	bl	8018908 <http_get_404_file>
 8018cb4:	63b8      	str	r0, [r7, #56]	; 0x38
#endif /* LWIP_HTTPD_SSI_BY_FILE_EXTENSION */
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 8018cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018cb8:	2b00      	cmp	r3, #0
 8018cba:	d106      	bne.n	8018cca <http_find_file+0x166>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 8018cbc:	f107 0308 	add.w	r3, r7, #8
 8018cc0:	4619      	mov	r1, r3
 8018cc2:	68f8      	ldr	r0, [r7, #12]
 8018cc4:	f7ff fe20 	bl	8018908 <http_get_404_file>
 8018cc8:	63b8      	str	r0, [r7, #56]	; 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 8018cca:	68ba      	ldr	r2, [r7, #8]
 8018ccc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018cce:	9301      	str	r3, [sp, #4]
 8018cd0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018cd4:	9300      	str	r3, [sp, #0]
 8018cd6:	4613      	mov	r3, r2
 8018cd8:	687a      	ldr	r2, [r7, #4]
 8018cda:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8018cdc:	68f8      	ldr	r0, [r7, #12]
 8018cde:	f000 f809 	bl	8018cf4 <http_init_file>
 8018ce2:	4603      	mov	r3, r0
}
 8018ce4:	4618      	mov	r0, r3
 8018ce6:	3740      	adds	r7, #64	; 0x40
 8018ce8:	46bd      	mov	sp, r7
 8018cea:	bd80      	pop	{r7, pc}
 8018cec:	200190a4 	.word	0x200190a4
 8018cf0:	0802b6f8 	.word	0x0802b6f8

08018cf4 <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char *params)
{
 8018cf4:	b580      	push	{r7, lr}
 8018cf6:	b086      	sub	sp, #24
 8018cf8:	af00      	add	r7, sp, #0
 8018cfa:	60f8      	str	r0, [r7, #12]
 8018cfc:	60b9      	str	r1, [r7, #8]
 8018cfe:	607a      	str	r2, [r7, #4]
 8018d00:	603b      	str	r3, [r7, #0]
#if !LWIP_HTTPD_SUPPORT_V09
  LWIP_UNUSED_ARG(is_09);
#endif
  if (file != NULL) {
 8018d02:	68bb      	ldr	r3, [r7, #8]
 8018d04:	2b00      	cmp	r3, #0
 8018d06:	d05d      	beq.n	8018dc4 <http_init_file+0xd0>
    /* file opened, initialise struct http_state */
#if !LWIP_HTTPD_DYNAMIC_FILE_READ
    /* If dynamic read is disabled, file data must be in one piece and available now */
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 8018d08:	68bb      	ldr	r3, [r7, #8]
 8018d0a:	681b      	ldr	r3, [r3, #0]
 8018d0c:	2b00      	cmp	r3, #0
 8018d0e:	d106      	bne.n	8018d1e <http_init_file+0x2a>
 8018d10:	4b35      	ldr	r3, [pc, #212]	; (8018de8 <http_init_file+0xf4>)
 8018d12:	f640 120b 	movw	r2, #2315	; 0x90b
 8018d16:	4935      	ldr	r1, [pc, #212]	; (8018dec <http_init_file+0xf8>)
 8018d18:	4835      	ldr	r0, [pc, #212]	; (8018df0 <http_init_file+0xfc>)
 8018d1a:	f00d fb09 	bl	8026330 <iprintf>
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 8018d1e:	68fb      	ldr	r3, [r7, #12]
 8018d20:	68ba      	ldr	r2, [r7, #8]
 8018d22:	615a      	str	r2, [r3, #20]
                       );
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
    hs->file = file->data;
 8018d24:	68bb      	ldr	r3, [r7, #8]
 8018d26:	681a      	ldr	r2, [r3, #0]
 8018d28:	68fb      	ldr	r3, [r7, #12]
 8018d2a:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 8018d2c:	68bb      	ldr	r3, [r7, #8]
 8018d2e:	685b      	ldr	r3, [r3, #4]
 8018d30:	2b00      	cmp	r3, #0
 8018d32:	da06      	bge.n	8018d42 <http_init_file+0x4e>
 8018d34:	4b2c      	ldr	r3, [pc, #176]	; (8018de8 <http_init_file+0xf4>)
 8018d36:	f640 1234 	movw	r2, #2356	; 0x934
 8018d3a:	492e      	ldr	r1, [pc, #184]	; (8018df4 <http_init_file+0x100>)
 8018d3c:	482c      	ldr	r0, [pc, #176]	; (8018df0 <http_init_file+0xfc>)
 8018d3e:	f00d faf7 	bl	8026330 <iprintf>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = (u32_t)file->len;
 8018d42:	68bb      	ldr	r3, [r7, #8]
 8018d44:	685b      	ldr	r3, [r3, #4]
 8018d46:	461a      	mov	r2, r3
 8018d48:	68fb      	ldr	r3, [r7, #12]
 8018d4a:	625a      	str	r2, [r3, #36]	; 0x24
    }
    hs->retries = 0;
 8018d4c:	68fb      	ldr	r3, [r7, #12]
 8018d4e:	2200      	movs	r2, #0
 8018d50:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
#if LWIP_HTTPD_TIMING
    hs->time_started = sys_now();
#endif /* LWIP_HTTPD_TIMING */
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
 8018d54:	68fb      	ldr	r3, [r7, #12]
 8018d56:	695b      	ldr	r3, [r3, #20]
 8018d58:	7c1b      	ldrb	r3, [r3, #16]
 8018d5a:	f003 0301 	and.w	r3, r3, #1
 8018d5e:	2b00      	cmp	r3, #0
 8018d60:	d106      	bne.n	8018d70 <http_init_file+0x7c>
 8018d62:	4b21      	ldr	r3, [pc, #132]	; (8018de8 <http_init_file+0xf4>)
 8018d64:	f640 1244 	movw	r2, #2372	; 0x944
 8018d68:	4923      	ldr	r1, [pc, #140]	; (8018df8 <http_init_file+0x104>)
 8018d6a:	4821      	ldr	r0, [pc, #132]	; (8018df0 <http_init_file+0xfc>)
 8018d6c:	f00d fae0 	bl	8026330 <iprintf>
                (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 8018d70:	687b      	ldr	r3, [r7, #4]
 8018d72:	2b00      	cmp	r3, #0
 8018d74:	d033      	beq.n	8018dde <http_init_file+0xea>
 8018d76:	68fb      	ldr	r3, [r7, #12]
 8018d78:	695b      	ldr	r3, [r3, #20]
 8018d7a:	7c1b      	ldrb	r3, [r3, #16]
 8018d7c:	f003 0301 	and.w	r3, r3, #1
 8018d80:	2b00      	cmp	r3, #0
 8018d82:	d02c      	beq.n	8018dde <http_init_file+0xea>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 8018d84:	68fb      	ldr	r3, [r7, #12]
 8018d86:	6998      	ldr	r0, [r3, #24]
 8018d88:	68fb      	ldr	r3, [r7, #12]
 8018d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018d8c:	461a      	mov	r2, r3
 8018d8e:	491b      	ldr	r1, [pc, #108]	; (8018dfc <http_init_file+0x108>)
 8018d90:	f000 f9f8 	bl	8019184 <lwip_strnstr>
 8018d94:	6178      	str	r0, [r7, #20]
      if (file_start != NULL) {
 8018d96:	697b      	ldr	r3, [r7, #20]
 8018d98:	2b00      	cmp	r3, #0
 8018d9a:	d020      	beq.n	8018dde <http_init_file+0xea>
        int diff = file_start + 4 - hs->file;
 8018d9c:	697b      	ldr	r3, [r7, #20]
 8018d9e:	3304      	adds	r3, #4
 8018da0:	461a      	mov	r2, r3
 8018da2:	68fb      	ldr	r3, [r7, #12]
 8018da4:	699b      	ldr	r3, [r3, #24]
 8018da6:	1ad3      	subs	r3, r2, r3
 8018da8:	613b      	str	r3, [r7, #16]
        hs->file += diff;
 8018daa:	68fb      	ldr	r3, [r7, #12]
 8018dac:	699a      	ldr	r2, [r3, #24]
 8018dae:	693b      	ldr	r3, [r7, #16]
 8018db0:	441a      	add	r2, r3
 8018db2:	68fb      	ldr	r3, [r7, #12]
 8018db4:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 8018db6:	68fb      	ldr	r3, [r7, #12]
 8018db8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018dba:	693b      	ldr	r3, [r7, #16]
 8018dbc:	1ad2      	subs	r2, r2, r3
 8018dbe:	68fb      	ldr	r3, [r7, #12]
 8018dc0:	625a      	str	r2, [r3, #36]	; 0x24
 8018dc2:	e00c      	b.n	8018dde <http_init_file+0xea>
      }
    }
#endif /* LWIP_HTTPD_SUPPORT_V09*/
  } else {
    hs->handle = NULL;
 8018dc4:	68fb      	ldr	r3, [r7, #12]
 8018dc6:	2200      	movs	r2, #0
 8018dc8:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 8018dca:	68fb      	ldr	r3, [r7, #12]
 8018dcc:	2200      	movs	r2, #0
 8018dce:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 8018dd0:	68fb      	ldr	r3, [r7, #12]
 8018dd2:	2200      	movs	r2, #0
 8018dd4:	625a      	str	r2, [r3, #36]	; 0x24
    hs->retries = 0;
 8018dd6:	68fb      	ldr	r3, [r7, #12]
 8018dd8:	2200      	movs	r2, #0
 8018dda:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        hs->keepalive = 0;
      }
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 8018dde:	2300      	movs	r3, #0
}
 8018de0:	4618      	mov	r0, r3
 8018de2:	3718      	adds	r7, #24
 8018de4:	46bd      	mov	sp, r7
 8018de6:	bd80      	pop	{r7, pc}
 8018de8:	080279d4 	.word	0x080279d4
 8018dec:	08027ad0 	.word	0x08027ad0
 8018df0:	08027a1c 	.word	0x08027a1c
 8018df4:	08027ae4 	.word	0x08027ae4
 8018df8:	08027b04 	.word	0x08027b04
 8018dfc:	08027ac8 	.word	0x08027ac8

08018e00 <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 8018e00:	b580      	push	{r7, lr}
 8018e02:	b084      	sub	sp, #16
 8018e04:	af00      	add	r7, sp, #0
 8018e06:	6078      	str	r0, [r7, #4]
 8018e08:	460b      	mov	r3, r1
 8018e0a:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 8018e0c:	687b      	ldr	r3, [r7, #4]
 8018e0e:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 8018e10:	68fb      	ldr	r3, [r7, #12]
 8018e12:	2b00      	cmp	r3, #0
 8018e14:	d002      	beq.n	8018e1c <http_err+0x1c>
    http_state_free(hs);
 8018e16:	68f8      	ldr	r0, [r7, #12]
 8018e18:	f7ff fc02 	bl	8018620 <http_state_free>
  }
}
 8018e1c:	bf00      	nop
 8018e1e:	3710      	adds	r7, #16
 8018e20:	46bd      	mov	sp, r7
 8018e22:	bd80      	pop	{r7, pc}

08018e24 <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct altcp_pcb *pcb, u16_t len)
{
 8018e24:	b580      	push	{r7, lr}
 8018e26:	b086      	sub	sp, #24
 8018e28:	af00      	add	r7, sp, #0
 8018e2a:	60f8      	str	r0, [r7, #12]
 8018e2c:	60b9      	str	r1, [r7, #8]
 8018e2e:	4613      	mov	r3, r2
 8018e30:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 8018e32:	68fb      	ldr	r3, [r7, #12]
 8018e34:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void *)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 8018e36:	697b      	ldr	r3, [r7, #20]
 8018e38:	2b00      	cmp	r3, #0
 8018e3a:	d101      	bne.n	8018e40 <http_sent+0x1c>
    return ERR_OK;
 8018e3c:	2300      	movs	r3, #0
 8018e3e:	e008      	b.n	8018e52 <http_sent+0x2e>
  }

  hs->retries = 0;
 8018e40:	697b      	ldr	r3, [r7, #20]
 8018e42:	2200      	movs	r2, #0
 8018e44:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  http_send(pcb, hs);
 8018e48:	6979      	ldr	r1, [r7, #20]
 8018e4a:	68b8      	ldr	r0, [r7, #8]
 8018e4c:	f7ff fd25 	bl	801889a <http_send>

  return ERR_OK;
 8018e50:	2300      	movs	r3, #0
}
 8018e52:	4618      	mov	r0, r3
 8018e54:	3718      	adds	r7, #24
 8018e56:	46bd      	mov	sp, r7
 8018e58:	bd80      	pop	{r7, pc}

08018e5a <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct altcp_pcb *pcb)
{
 8018e5a:	b580      	push	{r7, lr}
 8018e5c:	b084      	sub	sp, #16
 8018e5e:	af00      	add	r7, sp, #0
 8018e60:	6078      	str	r0, [r7, #4]
 8018e62:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 8018e64:	687b      	ldr	r3, [r7, #4]
 8018e66:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
              (void *)pcb, (void *)hs, tcp_debug_state_str(altcp_dbg_get_tcp_state(pcb))));

  if (hs == NULL) {
 8018e68:	68fb      	ldr	r3, [r7, #12]
 8018e6a:	2b00      	cmp	r3, #0
 8018e6c:	d107      	bne.n	8018e7e <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 8018e6e:	2100      	movs	r1, #0
 8018e70:	6838      	ldr	r0, [r7, #0]
 8018e72:	f7ff fc91 	bl	8018798 <http_close_conn>
 8018e76:	4603      	mov	r3, r0
 8018e78:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
      altcp_abort(pcb);
      return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 8018e7a:	2300      	movs	r3, #0
 8018e7c:	e021      	b.n	8018ec2 <http_poll+0x68>
  } else {
    hs->retries++;
 8018e7e:	68fb      	ldr	r3, [r7, #12]
 8018e80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018e84:	3301      	adds	r3, #1
 8018e86:	b2da      	uxtb	r2, r3
 8018e88:	68fb      	ldr	r3, [r7, #12]
 8018e8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 8018e8e:	68fb      	ldr	r3, [r7, #12]
 8018e90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018e94:	2b04      	cmp	r3, #4
 8018e96:	d105      	bne.n	8018ea4 <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 8018e98:	68f9      	ldr	r1, [r7, #12]
 8018e9a:	6838      	ldr	r0, [r7, #0]
 8018e9c:	f7ff fc7c 	bl	8018798 <http_close_conn>
      return ERR_OK;
 8018ea0:	2300      	movs	r3, #0
 8018ea2:	e00e      	b.n	8018ec2 <http_poll+0x68>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if (hs->handle) {
 8018ea4:	68fb      	ldr	r3, [r7, #12]
 8018ea6:	695b      	ldr	r3, [r3, #20]
 8018ea8:	2b00      	cmp	r3, #0
 8018eaa:	d009      	beq.n	8018ec0 <http_poll+0x66>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if (http_send(pcb, hs)) {
 8018eac:	68f9      	ldr	r1, [r7, #12]
 8018eae:	6838      	ldr	r0, [r7, #0]
 8018eb0:	f7ff fcf3 	bl	801889a <http_send>
 8018eb4:	4603      	mov	r3, r0
 8018eb6:	2b00      	cmp	r3, #0
 8018eb8:	d002      	beq.n	8018ec0 <http_poll+0x66>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        altcp_output(pcb);
 8018eba:	6838      	ldr	r0, [r7, #0]
 8018ebc:	f00b f8fc 	bl	80240b8 <tcp_output>
      }
    }
  }

  return ERR_OK;
 8018ec0:	2300      	movs	r3, #0
}
 8018ec2:	4618      	mov	r0, r3
 8018ec4:	3710      	adds	r7, #16
 8018ec6:	46bd      	mov	sp, r7
 8018ec8:	bd80      	pop	{r7, pc}
	...

08018ecc <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8018ecc:	b580      	push	{r7, lr}
 8018ece:	b086      	sub	sp, #24
 8018ed0:	af00      	add	r7, sp, #0
 8018ed2:	60f8      	str	r0, [r7, #12]
 8018ed4:	60b9      	str	r1, [r7, #8]
 8018ed6:	607a      	str	r2, [r7, #4]
 8018ed8:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 8018eda:	68fb      	ldr	r3, [r7, #12]
 8018edc:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void *)pcb,
              (void *)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 8018ede:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018ee2:	2b00      	cmp	r3, #0
 8018ee4:	d105      	bne.n	8018ef2 <http_recv+0x26>
 8018ee6:	687b      	ldr	r3, [r7, #4]
 8018ee8:	2b00      	cmp	r3, #0
 8018eea:	d002      	beq.n	8018ef2 <http_recv+0x26>
 8018eec:	697b      	ldr	r3, [r7, #20]
 8018eee:	2b00      	cmp	r3, #0
 8018ef0:	d111      	bne.n	8018f16 <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 8018ef2:	687b      	ldr	r3, [r7, #4]
 8018ef4:	2b00      	cmp	r3, #0
 8018ef6:	d008      	beq.n	8018f0a <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      altcp_recved(pcb, p->tot_len);
 8018ef8:	687b      	ldr	r3, [r7, #4]
 8018efa:	891b      	ldrh	r3, [r3, #8]
 8018efc:	4619      	mov	r1, r3
 8018efe:	68b8      	ldr	r0, [r7, #8]
 8018f00:	f007 f8dc 	bl	80200bc <tcp_recved>
      pbuf_free(p);
 8018f04:	6878      	ldr	r0, [r7, #4]
 8018f06:	f006 f80f 	bl	801ef28 <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 8018f0a:	6979      	ldr	r1, [r7, #20]
 8018f0c:	68b8      	ldr	r0, [r7, #8]
 8018f0e:	f7ff fc43 	bl	8018798 <http_close_conn>
    return ERR_OK;
 8018f12:	2300      	movs	r3, #0
 8018f14:	e055      	b.n	8018fc2 <http_recv+0xf6>
    hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    altcp_recved(pcb, p->tot_len);
 8018f16:	687b      	ldr	r3, [r7, #4]
 8018f18:	891b      	ldrh	r3, [r3, #8]
 8018f1a:	4619      	mov	r1, r3
 8018f1c:	68b8      	ldr	r0, [r7, #8]
 8018f1e:	f007 f8cd 	bl	80200bc <tcp_recved>
    }
    return ERR_OK;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 8018f22:	697b      	ldr	r3, [r7, #20]
 8018f24:	695b      	ldr	r3, [r3, #20]
 8018f26:	2b00      	cmp	r3, #0
 8018f28:	d147      	bne.n	8018fba <http_recv+0xee>
      err_t parsed = http_parse_request(p, hs, pcb);
 8018f2a:	68ba      	ldr	r2, [r7, #8]
 8018f2c:	6979      	ldr	r1, [r7, #20]
 8018f2e:	6878      	ldr	r0, [r7, #4]
 8018f30:	f7ff fd30 	bl	8018994 <http_parse_request>
 8018f34:	4603      	mov	r3, r0
 8018f36:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 8018f38:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8018f3c:	2b00      	cmp	r3, #0
 8018f3e:	d015      	beq.n	8018f6c <http_recv+0xa0>
 8018f40:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8018f44:	f113 0f05 	cmn.w	r3, #5
 8018f48:	d010      	beq.n	8018f6c <http_recv+0xa0>
 8018f4a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8018f4e:	f113 0f10 	cmn.w	r3, #16
 8018f52:	d00b      	beq.n	8018f6c <http_recv+0xa0>
 8018f54:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8018f58:	f113 0f08 	cmn.w	r3, #8
 8018f5c:	d006      	beq.n	8018f6c <http_recv+0xa0>
 8018f5e:	4b1b      	ldr	r3, [pc, #108]	; (8018fcc <http_recv+0x100>)
 8018f60:	f640 2205 	movw	r2, #2565	; 0xa05
 8018f64:	491a      	ldr	r1, [pc, #104]	; (8018fd0 <http_recv+0x104>)
 8018f66:	481b      	ldr	r0, [pc, #108]	; (8018fd4 <http_recv+0x108>)
 8018f68:	f00d f9e2 	bl	8026330 <iprintf>
                  || parsed == ERR_INPROGRESS || parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 8018f6c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8018f70:	f113 0f05 	cmn.w	r3, #5
 8018f74:	d00b      	beq.n	8018f8e <http_recv+0xc2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 8018f76:	697b      	ldr	r3, [r7, #20]
 8018f78:	6a1b      	ldr	r3, [r3, #32]
 8018f7a:	2b00      	cmp	r3, #0
 8018f7c:	d007      	beq.n	8018f8e <http_recv+0xc2>
          pbuf_free(hs->req);
 8018f7e:	697b      	ldr	r3, [r7, #20]
 8018f80:	6a1b      	ldr	r3, [r3, #32]
 8018f82:	4618      	mov	r0, r3
 8018f84:	f005 ffd0 	bl	801ef28 <pbuf_free>
          hs->req = NULL;
 8018f88:	697b      	ldr	r3, [r7, #20]
 8018f8a:	2200      	movs	r2, #0
 8018f8c:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 8018f8e:	6878      	ldr	r0, [r7, #4]
 8018f90:	f005 ffca 	bl	801ef28 <pbuf_free>
      if (parsed == ERR_OK) {
 8018f94:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8018f98:	2b00      	cmp	r3, #0
 8018f9a:	d104      	bne.n	8018fa6 <http_recv+0xda>
#if LWIP_HTTPD_SUPPORT_POST
        if (hs->post_content_len_left == 0)
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void *)hs->file, hs->left));
          http_send(pcb, hs);
 8018f9c:	6979      	ldr	r1, [r7, #20]
 8018f9e:	68b8      	ldr	r0, [r7, #8]
 8018fa0:	f7ff fc7b 	bl	801889a <http_send>
 8018fa4:	e00c      	b.n	8018fc0 <http_recv+0xf4>
        }
      } else if (parsed == ERR_ARG) {
 8018fa6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8018faa:	f113 0f10 	cmn.w	r3, #16
 8018fae:	d107      	bne.n	8018fc0 <http_recv+0xf4>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 8018fb0:	6979      	ldr	r1, [r7, #20]
 8018fb2:	68b8      	ldr	r0, [r7, #8]
 8018fb4:	f7ff fbf0 	bl	8018798 <http_close_conn>
 8018fb8:	e002      	b.n	8018fc0 <http_recv+0xf4>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 8018fba:	6878      	ldr	r0, [r7, #4]
 8018fbc:	f005 ffb4 	bl	801ef28 <pbuf_free>
    }
  }
  return ERR_OK;
 8018fc0:	2300      	movs	r3, #0
}
 8018fc2:	4618      	mov	r0, r3
 8018fc4:	3718      	adds	r7, #24
 8018fc6:	46bd      	mov	sp, r7
 8018fc8:	bd80      	pop	{r7, pc}
 8018fca:	bf00      	nop
 8018fcc:	080279d4 	.word	0x080279d4
 8018fd0:	08027b30 	.word	0x08027b30
 8018fd4:	08027a1c 	.word	0x08027a1c

08018fd8 <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
 8018fd8:	b580      	push	{r7, lr}
 8018fda:	b086      	sub	sp, #24
 8018fdc:	af00      	add	r7, sp, #0
 8018fde:	60f8      	str	r0, [r7, #12]
 8018fe0:	60b9      	str	r1, [r7, #8]
 8018fe2:	4613      	mov	r3, r2
 8018fe4:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 8018fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018fea:	2b00      	cmp	r3, #0
 8018fec:	d102      	bne.n	8018ff4 <http_accept+0x1c>
 8018fee:	68bb      	ldr	r3, [r7, #8]
 8018ff0:	2b00      	cmp	r3, #0
 8018ff2:	d102      	bne.n	8018ffa <http_accept+0x22>
    return ERR_VAL;
 8018ff4:	f06f 0305 	mvn.w	r3, #5
 8018ff8:	e025      	b.n	8019046 <http_accept+0x6e>
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 8018ffa:	2101      	movs	r1, #1
 8018ffc:	68b8      	ldr	r0, [r7, #8]
 8018ffe:	f007 fd2f 	bl	8020a60 <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 8019002:	f7ff fadb 	bl	80185bc <http_state_alloc>
 8019006:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 8019008:	697b      	ldr	r3, [r7, #20]
 801900a:	2b00      	cmp	r3, #0
 801900c:	d102      	bne.n	8019014 <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 801900e:	f04f 33ff 	mov.w	r3, #4294967295
 8019012:	e018      	b.n	8019046 <http_accept+0x6e>
  }
  hs->pcb = pcb;
 8019014:	697b      	ldr	r3, [r7, #20]
 8019016:	68ba      	ldr	r2, [r7, #8]
 8019018:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 801901a:	6979      	ldr	r1, [r7, #20]
 801901c:	68b8      	ldr	r0, [r7, #8]
 801901e:	f007 fefd 	bl	8020e1c <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 8019022:	490b      	ldr	r1, [pc, #44]	; (8019050 <http_accept+0x78>)
 8019024:	68b8      	ldr	r0, [r7, #8]
 8019026:	f007 ff0b 	bl	8020e40 <tcp_recv>
  altcp_err(pcb, http_err);
 801902a:	490a      	ldr	r1, [pc, #40]	; (8019054 <http_accept+0x7c>)
 801902c:	68b8      	ldr	r0, [r7, #8]
 801902e:	f007 ff49 	bl	8020ec4 <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8019032:	2204      	movs	r2, #4
 8019034:	4908      	ldr	r1, [pc, #32]	; (8019058 <http_accept+0x80>)
 8019036:	68b8      	ldr	r0, [r7, #8]
 8019038:	f007 ff7e 	bl	8020f38 <tcp_poll>
  altcp_sent(pcb, http_sent);
 801903c:	4907      	ldr	r1, [pc, #28]	; (801905c <http_accept+0x84>)
 801903e:	68b8      	ldr	r0, [r7, #8]
 8019040:	f007 ff20 	bl	8020e84 <tcp_sent>

  return ERR_OK;
 8019044:	2300      	movs	r3, #0
}
 8019046:	4618      	mov	r0, r3
 8019048:	3718      	adds	r7, #24
 801904a:	46bd      	mov	sp, r7
 801904c:	bd80      	pop	{r7, pc}
 801904e:	bf00      	nop
 8019050:	08018ecd 	.word	0x08018ecd
 8019054:	08018e01 	.word	0x08018e01
 8019058:	08018e5b 	.word	0x08018e5b
 801905c:	08018e25 	.word	0x08018e25

08019060 <httpd_init_pcb>:

static void
httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)
{
 8019060:	b580      	push	{r7, lr}
 8019062:	b084      	sub	sp, #16
 8019064:	af00      	add	r7, sp, #0
 8019066:	6078      	str	r0, [r7, #4]
 8019068:	460b      	mov	r3, r1
 801906a:	807b      	strh	r3, [r7, #2]
  err_t err;

  if (pcb) {
 801906c:	687b      	ldr	r3, [r7, #4]
 801906e:	2b00      	cmp	r3, #0
 8019070:	d029      	beq.n	80190c6 <httpd_init_pcb+0x66>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 8019072:	2101      	movs	r1, #1
 8019074:	6878      	ldr	r0, [r7, #4]
 8019076:	f007 fcf3 	bl	8020a60 <tcp_setprio>
    /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 801907a:	887b      	ldrh	r3, [r7, #2]
 801907c:	461a      	mov	r2, r3
 801907e:	4914      	ldr	r1, [pc, #80]	; (80190d0 <httpd_init_pcb+0x70>)
 8019080:	6878      	ldr	r0, [r7, #4]
 8019082:	f006 fe4b 	bl	801fd1c <tcp_bind>
 8019086:	4603      	mov	r3, r0
 8019088:	73fb      	strb	r3, [r7, #15]
    LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 801908a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801908e:	2b00      	cmp	r3, #0
 8019090:	d006      	beq.n	80190a0 <httpd_init_pcb+0x40>
 8019092:	4b10      	ldr	r3, [pc, #64]	; (80190d4 <httpd_init_pcb+0x74>)
 8019094:	f640 2257 	movw	r2, #2647	; 0xa57
 8019098:	490f      	ldr	r1, [pc, #60]	; (80190d8 <httpd_init_pcb+0x78>)
 801909a:	4810      	ldr	r0, [pc, #64]	; (80190dc <httpd_init_pcb+0x7c>)
 801909c:	f00d f948 	bl	8026330 <iprintf>
    pcb = altcp_listen(pcb);
 80190a0:	21ff      	movs	r1, #255	; 0xff
 80190a2:	6878      	ldr	r0, [r7, #4]
 80190a4:	f006 fef2 	bl	801fe8c <tcp_listen_with_backlog>
 80190a8:	6078      	str	r0, [r7, #4]
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 80190aa:	687b      	ldr	r3, [r7, #4]
 80190ac:	2b00      	cmp	r3, #0
 80190ae:	d106      	bne.n	80190be <httpd_init_pcb+0x5e>
 80190b0:	4b08      	ldr	r3, [pc, #32]	; (80190d4 <httpd_init_pcb+0x74>)
 80190b2:	f640 2259 	movw	r2, #2649	; 0xa59
 80190b6:	490a      	ldr	r1, [pc, #40]	; (80190e0 <httpd_init_pcb+0x80>)
 80190b8:	4808      	ldr	r0, [pc, #32]	; (80190dc <httpd_init_pcb+0x7c>)
 80190ba:	f00d f939 	bl	8026330 <iprintf>
    altcp_accept(pcb, http_accept);
 80190be:	4909      	ldr	r1, [pc, #36]	; (80190e4 <httpd_init_pcb+0x84>)
 80190c0:	6878      	ldr	r0, [r7, #4]
 80190c2:	f007 ff21 	bl	8020f08 <tcp_accept>
  }
}
 80190c6:	bf00      	nop
 80190c8:	3710      	adds	r7, #16
 80190ca:	46bd      	mov	sp, r7
 80190cc:	bd80      	pop	{r7, pc}
 80190ce:	bf00      	nop
 80190d0:	0802b720 	.word	0x0802b720
 80190d4:	080279d4 	.word	0x080279d4
 80190d8:	08027b5c 	.word	0x08027b5c
 80190dc:	08027a1c 	.word	0x08027a1c
 80190e0:	08027b78 	.word	0x08027b78
 80190e4:	08018fd9 	.word	0x08018fd9

080190e8 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 80190e8:	b580      	push	{r7, lr}
 80190ea:	b082      	sub	sp, #8
 80190ec:	af00      	add	r7, sp, #0
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 80190ee:	202e      	movs	r0, #46	; 0x2e
 80190f0:	f007 fe86 	bl	8020e00 <tcp_new_ip_type>
 80190f4:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 80190f6:	687b      	ldr	r3, [r7, #4]
 80190f8:	2b00      	cmp	r3, #0
 80190fa:	d106      	bne.n	801910a <httpd_init+0x22>
 80190fc:	4b07      	ldr	r3, [pc, #28]	; (801911c <httpd_init+0x34>)
 80190fe:	f640 2272 	movw	r2, #2674	; 0xa72
 8019102:	4907      	ldr	r1, [pc, #28]	; (8019120 <httpd_init+0x38>)
 8019104:	4807      	ldr	r0, [pc, #28]	; (8019124 <httpd_init+0x3c>)
 8019106:	f00d f913 	bl	8026330 <iprintf>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 801910a:	2150      	movs	r1, #80	; 0x50
 801910c:	6878      	ldr	r0, [r7, #4]
 801910e:	f7ff ffa7 	bl	8019060 <httpd_init_pcb>
}
 8019112:	bf00      	nop
 8019114:	3708      	adds	r7, #8
 8019116:	46bd      	mov	sp, r7
 8019118:	bd80      	pop	{r7, pc}
 801911a:	bf00      	nop
 801911c:	080279d4 	.word	0x080279d4
 8019120:	08027b98 	.word	0x08027b98
 8019124:	08027a1c 	.word	0x08027a1c

08019128 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8019128:	b480      	push	{r7}
 801912a:	b083      	sub	sp, #12
 801912c:	af00      	add	r7, sp, #0
 801912e:	4603      	mov	r3, r0
 8019130:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8019132:	88fb      	ldrh	r3, [r7, #6]
 8019134:	021b      	lsls	r3, r3, #8
 8019136:	b21a      	sxth	r2, r3
 8019138:	88fb      	ldrh	r3, [r7, #6]
 801913a:	0a1b      	lsrs	r3, r3, #8
 801913c:	b29b      	uxth	r3, r3
 801913e:	b21b      	sxth	r3, r3
 8019140:	4313      	orrs	r3, r2
 8019142:	b21b      	sxth	r3, r3
 8019144:	b29b      	uxth	r3, r3
}
 8019146:	4618      	mov	r0, r3
 8019148:	370c      	adds	r7, #12
 801914a:	46bd      	mov	sp, r7
 801914c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019150:	4770      	bx	lr

08019152 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8019152:	b480      	push	{r7}
 8019154:	b083      	sub	sp, #12
 8019156:	af00      	add	r7, sp, #0
 8019158:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 801915a:	687b      	ldr	r3, [r7, #4]
 801915c:	061a      	lsls	r2, r3, #24
 801915e:	687b      	ldr	r3, [r7, #4]
 8019160:	021b      	lsls	r3, r3, #8
 8019162:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8019166:	431a      	orrs	r2, r3
 8019168:	687b      	ldr	r3, [r7, #4]
 801916a:	0a1b      	lsrs	r3, r3, #8
 801916c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8019170:	431a      	orrs	r2, r3
 8019172:	687b      	ldr	r3, [r7, #4]
 8019174:	0e1b      	lsrs	r3, r3, #24
 8019176:	4313      	orrs	r3, r2
}
 8019178:	4618      	mov	r0, r3
 801917a:	370c      	adds	r7, #12
 801917c:	46bd      	mov	sp, r7
 801917e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019182:	4770      	bx	lr

08019184 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 8019184:	b580      	push	{r7, lr}
 8019186:	b086      	sub	sp, #24
 8019188:	af00      	add	r7, sp, #0
 801918a:	60f8      	str	r0, [r7, #12]
 801918c:	60b9      	str	r1, [r7, #8]
 801918e:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t tokenlen = strlen(token);
 8019190:	68b8      	ldr	r0, [r7, #8]
 8019192:	f7f6 ff5f 	bl	8010054 <strlen>
 8019196:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 8019198:	693b      	ldr	r3, [r7, #16]
 801919a:	2b00      	cmp	r3, #0
 801919c:	d101      	bne.n	80191a2 <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 801919e:	68fb      	ldr	r3, [r7, #12]
 80191a0:	e022      	b.n	80191e8 <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 80191a2:	68fb      	ldr	r3, [r7, #12]
 80191a4:	617b      	str	r3, [r7, #20]
 80191a6:	e012      	b.n	80191ce <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 80191a8:	697b      	ldr	r3, [r7, #20]
 80191aa:	781a      	ldrb	r2, [r3, #0]
 80191ac:	68bb      	ldr	r3, [r7, #8]
 80191ae:	781b      	ldrb	r3, [r3, #0]
 80191b0:	429a      	cmp	r2, r3
 80191b2:	d109      	bne.n	80191c8 <lwip_strnstr+0x44>
 80191b4:	693a      	ldr	r2, [r7, #16]
 80191b6:	68b9      	ldr	r1, [r7, #8]
 80191b8:	6978      	ldr	r0, [r7, #20]
 80191ba:	f00d f9f4 	bl	80265a6 <strncmp>
 80191be:	4603      	mov	r3, r0
 80191c0:	2b00      	cmp	r3, #0
 80191c2:	d101      	bne.n	80191c8 <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 80191c4:	697b      	ldr	r3, [r7, #20]
 80191c6:	e00f      	b.n	80191e8 <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 80191c8:	697b      	ldr	r3, [r7, #20]
 80191ca:	3301      	adds	r3, #1
 80191cc:	617b      	str	r3, [r7, #20]
 80191ce:	697b      	ldr	r3, [r7, #20]
 80191d0:	781b      	ldrb	r3, [r3, #0]
 80191d2:	2b00      	cmp	r3, #0
 80191d4:	d007      	beq.n	80191e6 <lwip_strnstr+0x62>
 80191d6:	697a      	ldr	r2, [r7, #20]
 80191d8:	693b      	ldr	r3, [r7, #16]
 80191da:	441a      	add	r2, r3
 80191dc:	68f9      	ldr	r1, [r7, #12]
 80191de:	687b      	ldr	r3, [r7, #4]
 80191e0:	440b      	add	r3, r1
 80191e2:	429a      	cmp	r2, r3
 80191e4:	d9e0      	bls.n	80191a8 <lwip_strnstr+0x24>
    }
  }
  return NULL;
 80191e6:	2300      	movs	r3, #0
}
 80191e8:	4618      	mov	r0, r3
 80191ea:	3718      	adds	r7, #24
 80191ec:	46bd      	mov	sp, r7
 80191ee:	bd80      	pop	{r7, pc}

080191f0 <dns_init>:
 * Initialize the resolver: set up the UDP pcb and configure the default server
 * (if DNS_SERVER_ADDRESS is set).
 */
void
dns_init(void)
{
 80191f0:	b480      	push	{r7}
 80191f2:	af00      	add	r7, sp, #0
#endif

#if DNS_LOCAL_HOSTLIST
  dns_init_local();
#endif
}
 80191f4:	bf00      	nop
 80191f6:	46bd      	mov	sp, r7
 80191f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191fc:	4770      	bx	lr
	...

08019200 <dns_setserver>:
 * @param numdns the index of the DNS server to set must be < DNS_MAX_SERVERS
 * @param dnsserver IP address of the DNS server to set
 */
void
dns_setserver(u8_t numdns, const ip_addr_t *dnsserver)
{
 8019200:	b480      	push	{r7}
 8019202:	b083      	sub	sp, #12
 8019204:	af00      	add	r7, sp, #0
 8019206:	4603      	mov	r3, r0
 8019208:	6039      	str	r1, [r7, #0]
 801920a:	71fb      	strb	r3, [r7, #7]
  if (numdns < DNS_MAX_SERVERS) {
 801920c:	79fb      	ldrb	r3, [r7, #7]
 801920e:	2b01      	cmp	r3, #1
 8019210:	d80f      	bhi.n	8019232 <dns_setserver+0x32>
    if (dnsserver != NULL) {
 8019212:	683b      	ldr	r3, [r7, #0]
 8019214:	2b00      	cmp	r3, #0
 8019216:	d006      	beq.n	8019226 <dns_setserver+0x26>
      dns_servers[numdns] = (*dnsserver);
 8019218:	79fb      	ldrb	r3, [r7, #7]
 801921a:	4909      	ldr	r1, [pc, #36]	; (8019240 <dns_setserver+0x40>)
 801921c:	683a      	ldr	r2, [r7, #0]
 801921e:	6812      	ldr	r2, [r2, #0]
 8019220:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    } else {
      dns_servers[numdns] = *IP_ADDR_ANY;
    }
  }
}
 8019224:	e005      	b.n	8019232 <dns_setserver+0x32>
      dns_servers[numdns] = *IP_ADDR_ANY;
 8019226:	79fb      	ldrb	r3, [r7, #7]
 8019228:	4905      	ldr	r1, [pc, #20]	; (8019240 <dns_setserver+0x40>)
 801922a:	4a06      	ldr	r2, [pc, #24]	; (8019244 <dns_setserver+0x44>)
 801922c:	6812      	ldr	r2, [r2, #0]
 801922e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8019232:	bf00      	nop
 8019234:	370c      	adds	r7, #12
 8019236:	46bd      	mov	sp, r7
 8019238:	f85d 7b04 	ldr.w	r7, [sp], #4
 801923c:	4770      	bx	lr
 801923e:	bf00      	nop
 8019240:	20019564 	.word	0x20019564
 8019244:	0802b720 	.word	0x0802b720

08019248 <dns_tmr>:
 * The DNS resolver client timer - handle retries and timeouts and should
 * be called every DNS_TMR_INTERVAL milliseconds (every second by default).
 */
void
dns_tmr(void)
{
 8019248:	b580      	push	{r7, lr}
 801924a:	af00      	add	r7, sp, #0
  LWIP_DEBUGF(DNS_DEBUG, ("dns_tmr: dns_check_entries\n"));
  dns_check_entries();
 801924c:	f000 faaa 	bl	80197a4 <dns_check_entries>
}
 8019250:	bf00      	nop
 8019252:	bd80      	pop	{r7, pc}

08019254 <dns_send>:
 * @param idx the DNS table entry index for which to send a request
 * @return ERR_OK if packet is sent; an err_t indicating the problem otherwise
 */
static err_t
dns_send(u8_t idx)
{
 8019254:	b580      	push	{r7, lr}
 8019256:	b090      	sub	sp, #64	; 0x40
 8019258:	af00      	add	r7, sp, #0
 801925a:	4603      	mov	r3, r0
 801925c:	71fb      	strb	r3, [r7, #7]
  struct pbuf *p;
  u16_t query_idx, copy_len;
  const char *hostname, *hostname_part;
  u8_t n;
  u8_t pcb_idx;
  struct dns_table_entry *entry = &dns_table[idx];
 801925e:	79fa      	ldrb	r2, [r7, #7]
 8019260:	4613      	mov	r3, r2
 8019262:	011b      	lsls	r3, r3, #4
 8019264:	4413      	add	r3, r2
 8019266:	011b      	lsls	r3, r3, #4
 8019268:	4a6c      	ldr	r2, [pc, #432]	; (801941c <dns_send+0x1c8>)
 801926a:	4413      	add	r3, r2
 801926c:	633b      	str	r3, [r7, #48]	; 0x30

  LWIP_DEBUGF(DNS_DEBUG, ("dns_send: dns_servers[%"U16_F"] \"%s\": request\n",
                          (u16_t)(entry->server_idx), entry->name));
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 801926e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019270:	7adb      	ldrb	r3, [r3, #11]
 8019272:	2b01      	cmp	r3, #1
 8019274:	d906      	bls.n	8019284 <dns_send+0x30>
 8019276:	4b6a      	ldr	r3, [pc, #424]	; (8019420 <dns_send+0x1cc>)
 8019278:	f240 22fa 	movw	r2, #762	; 0x2fa
 801927c:	4969      	ldr	r1, [pc, #420]	; (8019424 <dns_send+0x1d0>)
 801927e:	486a      	ldr	r0, [pc, #424]	; (8019428 <dns_send+0x1d4>)
 8019280:	f00d f856 	bl	8026330 <iprintf>
  if (ip_addr_isany_val(dns_servers[entry->server_idx])
 8019284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019286:	7adb      	ldrb	r3, [r3, #11]
 8019288:	461a      	mov	r2, r3
 801928a:	4b68      	ldr	r3, [pc, #416]	; (801942c <dns_send+0x1d8>)
 801928c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019290:	2b00      	cmp	r3, #0
 8019292:	d109      	bne.n	80192a8 <dns_send+0x54>
      && !entry->is_mdns
#endif
     ) {
    /* DNS server not valid anymore, e.g. PPP netif has been shut down */
    /* call specified callback function if provided */
    dns_call_found(idx, NULL);
 8019294:	79fb      	ldrb	r3, [r7, #7]
 8019296:	2100      	movs	r1, #0
 8019298:	4618      	mov	r0, r3
 801929a:	f000 f8cb 	bl	8019434 <dns_call_found>
    /* flush this entry */
    entry->state = DNS_STATE_UNUSED;
 801929e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80192a0:	2200      	movs	r2, #0
 80192a2:	729a      	strb	r2, [r3, #10]
    return ERR_OK;
 80192a4:	2300      	movs	r3, #0
 80192a6:	e0b4      	b.n	8019412 <dns_send+0x1be>
  }

  /* if here, we have either a new query or a retry on a previous query to process */
  p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(SIZEOF_DNS_HDR + strlen(entry->name) + 2 +
 80192a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80192aa:	3310      	adds	r3, #16
 80192ac:	4618      	mov	r0, r3
 80192ae:	f7f6 fed1 	bl	8010054 <strlen>
 80192b2:	4603      	mov	r3, r0
 80192b4:	b29b      	uxth	r3, r3
 80192b6:	3312      	adds	r3, #18
 80192b8:	b29b      	uxth	r3, r3
 80192ba:	f44f 7220 	mov.w	r2, #640	; 0x280
 80192be:	4619      	mov	r1, r3
 80192c0:	2036      	movs	r0, #54	; 0x36
 80192c2:	f005 fb4f 	bl	801e964 <pbuf_alloc>
 80192c6:	62f8      	str	r0, [r7, #44]	; 0x2c
                                         SIZEOF_DNS_QUERY), PBUF_RAM);
  if (p != NULL) {
 80192c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80192ca:	2b00      	cmp	r3, #0
 80192cc:	f000 8095 	beq.w	80193fa <dns_send+0x1a6>
    const ip_addr_t *dst;
    u16_t dst_port;
    /* fill dns header */
    memset(&hdr, 0, SIZEOF_DNS_HDR);
 80192d0:	f107 0310 	add.w	r3, r7, #16
 80192d4:	220c      	movs	r2, #12
 80192d6:	2100      	movs	r1, #0
 80192d8:	4618      	mov	r0, r3
 80192da:	f00c ff75 	bl	80261c8 <memset>
    hdr.id = lwip_htons(entry->txid);
 80192de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80192e0:	891b      	ldrh	r3, [r3, #8]
 80192e2:	4618      	mov	r0, r3
 80192e4:	f7ff ff20 	bl	8019128 <lwip_htons>
 80192e8:	4603      	mov	r3, r0
 80192ea:	823b      	strh	r3, [r7, #16]
    hdr.flags1 = DNS_FLAG1_RD;
 80192ec:	2301      	movs	r3, #1
 80192ee:	74bb      	strb	r3, [r7, #18]
    hdr.numquestions = PP_HTONS(1);
 80192f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80192f4:	82bb      	strh	r3, [r7, #20]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 80192f6:	f107 0310 	add.w	r3, r7, #16
 80192fa:	220c      	movs	r2, #12
 80192fc:	4619      	mov	r1, r3
 80192fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019300:	f006 f8c6 	bl	801f490 <pbuf_take>
    hostname = entry->name;
 8019304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019306:	3310      	adds	r3, #16
 8019308:	63bb      	str	r3, [r7, #56]	; 0x38
    --hostname;
 801930a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801930c:	3b01      	subs	r3, #1
 801930e:	63bb      	str	r3, [r7, #56]	; 0x38

    /* convert hostname into suitable query format. */
    query_idx = SIZEOF_DNS_HDR;
 8019310:	230c      	movs	r3, #12
 8019312:	87bb      	strh	r3, [r7, #60]	; 0x3c
    do {
      ++hostname;
 8019314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019316:	3301      	adds	r3, #1
 8019318:	63bb      	str	r3, [r7, #56]	; 0x38
      hostname_part = hostname;
 801931a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801931c:	62bb      	str	r3, [r7, #40]	; 0x28
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 801931e:	2300      	movs	r3, #0
 8019320:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8019324:	e007      	b.n	8019336 <dns_send+0xe2>
        ++n;
 8019326:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801932a:	3301      	adds	r3, #1
 801932c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 8019330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019332:	3301      	adds	r3, #1
 8019334:	63bb      	str	r3, [r7, #56]	; 0x38
 8019336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019338:	781b      	ldrb	r3, [r3, #0]
 801933a:	2b2e      	cmp	r3, #46	; 0x2e
 801933c:	d003      	beq.n	8019346 <dns_send+0xf2>
 801933e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019340:	781b      	ldrb	r3, [r3, #0]
 8019342:	2b00      	cmp	r3, #0
 8019344:	d1ef      	bne.n	8019326 <dns_send+0xd2>
      }
      copy_len = (u16_t)(hostname - hostname_part);
 8019346:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801934a:	1ad3      	subs	r3, r2, r3
 801934c:	84fb      	strh	r3, [r7, #38]	; 0x26
      if (query_idx + n + 1 > 0xFFFF) {
 801934e:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8019350:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8019354:	4413      	add	r3, r2
 8019356:	3301      	adds	r3, #1
 8019358:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801935c:	da53      	bge.n	8019406 <dns_send+0x1b2>
        /* u16_t overflow */
        goto overflow_return;
      }
      pbuf_put_at(p, query_idx, n);
 801935e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8019362:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8019364:	4619      	mov	r1, r3
 8019366:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019368:	f006 f9c0 	bl	801f6ec <pbuf_put_at>
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
 801936c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801936e:	3301      	adds	r3, #1
 8019370:	b29b      	uxth	r3, r3
 8019372:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8019374:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8019376:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019378:	f006 f91c 	bl	801f5b4 <pbuf_take_at>
      query_idx = (u16_t)(query_idx + n + 1);
 801937c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8019380:	b29a      	uxth	r2, r3
 8019382:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8019384:	4413      	add	r3, r2
 8019386:	b29b      	uxth	r3, r3
 8019388:	3301      	adds	r3, #1
 801938a:	87bb      	strh	r3, [r7, #60]	; 0x3c
    } while (*hostname != 0);
 801938c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801938e:	781b      	ldrb	r3, [r3, #0]
 8019390:	2b00      	cmp	r3, #0
 8019392:	d1bf      	bne.n	8019314 <dns_send+0xc0>
    pbuf_put_at(p, query_idx, 0);
 8019394:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8019396:	2200      	movs	r2, #0
 8019398:	4619      	mov	r1, r3
 801939a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801939c:	f006 f9a6 	bl	801f6ec <pbuf_put_at>
    query_idx++;
 80193a0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80193a2:	3301      	adds	r3, #1
 80193a4:	87bb      	strh	r3, [r7, #60]	; 0x3c

    /* fill dns query */
    if (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype)) {
      qry.type = PP_HTONS(DNS_RRTYPE_AAAA);
    } else {
      qry.type = PP_HTONS(DNS_RRTYPE_A);
 80193a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80193aa:	81bb      	strh	r3, [r7, #12]
    }
    qry.cls = PP_HTONS(DNS_RRCLASS_IN);
 80193ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80193b0:	81fb      	strh	r3, [r7, #14]
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 80193b2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80193b4:	f107 010c 	add.w	r1, r7, #12
 80193b8:	2204      	movs	r2, #4
 80193ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80193bc:	f006 f8fa 	bl	801f5b4 <pbuf_take_at>

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
    pcb_idx = entry->pcb_idx;
 80193c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80193c2:	7bdb      	ldrb	r3, [r3, #15]
 80193c4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
      }
#endif
    } else
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
    {
      dst_port = DNS_SERVER_PORT;
 80193c8:	2335      	movs	r3, #53	; 0x35
 80193ca:	847b      	strh	r3, [r7, #34]	; 0x22
      dst = &dns_servers[entry->server_idx];
 80193cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80193ce:	7adb      	ldrb	r3, [r3, #11]
 80193d0:	009b      	lsls	r3, r3, #2
 80193d2:	4a16      	ldr	r2, [pc, #88]	; (801942c <dns_send+0x1d8>)
 80193d4:	4413      	add	r3, r2
 80193d6:	61fb      	str	r3, [r7, #28]
    }
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 80193d8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80193dc:	4a14      	ldr	r2, [pc, #80]	; (8019430 <dns_send+0x1dc>)
 80193de:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80193e2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80193e4:	69fa      	ldr	r2, [r7, #28]
 80193e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80193e8:	f00c f91c 	bl	8025624 <udp_sendto>
 80193ec:	4603      	mov	r3, r0
 80193ee:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

    /* free pbuf */
    pbuf_free(p);
 80193f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80193f4:	f005 fd98 	bl	801ef28 <pbuf_free>
 80193f8:	e002      	b.n	8019400 <dns_send+0x1ac>
  } else {
    err = ERR_MEM;
 80193fa:	23ff      	movs	r3, #255	; 0xff
 80193fc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return err;
 8019400:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8019404:	e005      	b.n	8019412 <dns_send+0x1be>
        goto overflow_return;
 8019406:	bf00      	nop
overflow_return:
  pbuf_free(p);
 8019408:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801940a:	f005 fd8d 	bl	801ef28 <pbuf_free>
  return ERR_VAL;
 801940e:	f06f 0305 	mvn.w	r3, #5
}
 8019412:	4618      	mov	r0, r3
 8019414:	3740      	adds	r7, #64	; 0x40
 8019416:	46bd      	mov	sp, r7
 8019418:	bd80      	pop	{r7, pc}
 801941a:	bf00      	nop
 801941c:	200190f4 	.word	0x200190f4
 8019420:	08027bb4 	.word	0x08027bb4
 8019424:	08027be4 	.word	0x08027be4
 8019428:	08027bfc 	.word	0x08027bfc
 801942c:	20019564 	.word	0x20019564
 8019430:	200190e4 	.word	0x200190e4

08019434 <dns_call_found>:
 * @param idx dns table index of the entry that is resolved or removed
 * @param addr IP address for the hostname (or NULL on error or memory shortage)
 */
static void
dns_call_found(u8_t idx, ip_addr_t *addr)
{
 8019434:	b590      	push	{r4, r7, lr}
 8019436:	b085      	sub	sp, #20
 8019438:	af00      	add	r7, sp, #0
 801943a:	4603      	mov	r3, r0
 801943c:	6039      	str	r1, [r7, #0]
 801943e:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8019440:	2300      	movs	r3, #0
 8019442:	73fb      	strb	r3, [r7, #15]
 8019444:	e03d      	b.n	80194c2 <dns_call_found+0x8e>
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
 8019446:	7bfa      	ldrb	r2, [r7, #15]
 8019448:	4957      	ldr	r1, [pc, #348]	; (80195a8 <dns_call_found+0x174>)
 801944a:	4613      	mov	r3, r2
 801944c:	005b      	lsls	r3, r3, #1
 801944e:	4413      	add	r3, r2
 8019450:	009b      	lsls	r3, r3, #2
 8019452:	440b      	add	r3, r1
 8019454:	681b      	ldr	r3, [r3, #0]
 8019456:	2b00      	cmp	r3, #0
 8019458:	d030      	beq.n	80194bc <dns_call_found+0x88>
 801945a:	7bfa      	ldrb	r2, [r7, #15]
 801945c:	4952      	ldr	r1, [pc, #328]	; (80195a8 <dns_call_found+0x174>)
 801945e:	4613      	mov	r3, r2
 8019460:	005b      	lsls	r3, r3, #1
 8019462:	4413      	add	r3, r2
 8019464:	009b      	lsls	r3, r3, #2
 8019466:	440b      	add	r3, r1
 8019468:	3308      	adds	r3, #8
 801946a:	781b      	ldrb	r3, [r3, #0]
 801946c:	79fa      	ldrb	r2, [r7, #7]
 801946e:	429a      	cmp	r2, r3
 8019470:	d124      	bne.n	80194bc <dns_call_found+0x88>
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 8019472:	7bfa      	ldrb	r2, [r7, #15]
 8019474:	494c      	ldr	r1, [pc, #304]	; (80195a8 <dns_call_found+0x174>)
 8019476:	4613      	mov	r3, r2
 8019478:	005b      	lsls	r3, r3, #1
 801947a:	4413      	add	r3, r2
 801947c:	009b      	lsls	r3, r3, #2
 801947e:	440b      	add	r3, r1
 8019480:	681c      	ldr	r4, [r3, #0]
 8019482:	79fa      	ldrb	r2, [r7, #7]
 8019484:	4613      	mov	r3, r2
 8019486:	011b      	lsls	r3, r3, #4
 8019488:	4413      	add	r3, r2
 801948a:	011b      	lsls	r3, r3, #4
 801948c:	3310      	adds	r3, #16
 801948e:	4a47      	ldr	r2, [pc, #284]	; (80195ac <dns_call_found+0x178>)
 8019490:	1898      	adds	r0, r3, r2
 8019492:	7bfa      	ldrb	r2, [r7, #15]
 8019494:	4944      	ldr	r1, [pc, #272]	; (80195a8 <dns_call_found+0x174>)
 8019496:	4613      	mov	r3, r2
 8019498:	005b      	lsls	r3, r3, #1
 801949a:	4413      	add	r3, r2
 801949c:	009b      	lsls	r3, r3, #2
 801949e:	440b      	add	r3, r1
 80194a0:	3304      	adds	r3, #4
 80194a2:	681b      	ldr	r3, [r3, #0]
 80194a4:	461a      	mov	r2, r3
 80194a6:	6839      	ldr	r1, [r7, #0]
 80194a8:	47a0      	blx	r4
      /* flush this entry */
      dns_requests[i].found = NULL;
 80194aa:	7bfa      	ldrb	r2, [r7, #15]
 80194ac:	493e      	ldr	r1, [pc, #248]	; (80195a8 <dns_call_found+0x174>)
 80194ae:	4613      	mov	r3, r2
 80194b0:	005b      	lsls	r3, r3, #1
 80194b2:	4413      	add	r3, r2
 80194b4:	009b      	lsls	r3, r3, #2
 80194b6:	440b      	add	r3, r1
 80194b8:	2200      	movs	r2, #0
 80194ba:	601a      	str	r2, [r3, #0]
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 80194bc:	7bfb      	ldrb	r3, [r7, #15]
 80194be:	3301      	adds	r3, #1
 80194c0:	73fb      	strb	r3, [r7, #15]
 80194c2:	7bfb      	ldrb	r3, [r7, #15]
 80194c4:	2b03      	cmp	r3, #3
 80194c6:	d9be      	bls.n	8019446 <dns_call_found+0x12>
  }
  dns_requests[idx].found = NULL;
#endif
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
  /* close the pcb used unless other request are using it */
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 80194c8:	2300      	movs	r3, #0
 80194ca:	73fb      	strb	r3, [r7, #15]
 80194cc:	e031      	b.n	8019532 <dns_call_found+0xfe>
    if (i == idx) {
 80194ce:	7bfa      	ldrb	r2, [r7, #15]
 80194d0:	79fb      	ldrb	r3, [r7, #7]
 80194d2:	429a      	cmp	r2, r3
 80194d4:	d029      	beq.n	801952a <dns_call_found+0xf6>
      continue; /* only check other requests */
    }
    if (dns_table[i].state == DNS_STATE_ASKING) {
 80194d6:	7bfa      	ldrb	r2, [r7, #15]
 80194d8:	4934      	ldr	r1, [pc, #208]	; (80195ac <dns_call_found+0x178>)
 80194da:	4613      	mov	r3, r2
 80194dc:	011b      	lsls	r3, r3, #4
 80194de:	4413      	add	r3, r2
 80194e0:	011b      	lsls	r3, r3, #4
 80194e2:	440b      	add	r3, r1
 80194e4:	330a      	adds	r3, #10
 80194e6:	781b      	ldrb	r3, [r3, #0]
 80194e8:	2b02      	cmp	r3, #2
 80194ea:	d11f      	bne.n	801952c <dns_call_found+0xf8>
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
 80194ec:	7bfa      	ldrb	r2, [r7, #15]
 80194ee:	492f      	ldr	r1, [pc, #188]	; (80195ac <dns_call_found+0x178>)
 80194f0:	4613      	mov	r3, r2
 80194f2:	011b      	lsls	r3, r3, #4
 80194f4:	4413      	add	r3, r2
 80194f6:	011b      	lsls	r3, r3, #4
 80194f8:	440b      	add	r3, r1
 80194fa:	330f      	adds	r3, #15
 80194fc:	7819      	ldrb	r1, [r3, #0]
 80194fe:	79fa      	ldrb	r2, [r7, #7]
 8019500:	482a      	ldr	r0, [pc, #168]	; (80195ac <dns_call_found+0x178>)
 8019502:	4613      	mov	r3, r2
 8019504:	011b      	lsls	r3, r3, #4
 8019506:	4413      	add	r3, r2
 8019508:	011b      	lsls	r3, r3, #4
 801950a:	4403      	add	r3, r0
 801950c:	330f      	adds	r3, #15
 801950e:	781b      	ldrb	r3, [r3, #0]
 8019510:	4299      	cmp	r1, r3
 8019512:	d10b      	bne.n	801952c <dns_call_found+0xf8>
        /* another request is still using the same pcb */
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 8019514:	79fa      	ldrb	r2, [r7, #7]
 8019516:	4925      	ldr	r1, [pc, #148]	; (80195ac <dns_call_found+0x178>)
 8019518:	4613      	mov	r3, r2
 801951a:	011b      	lsls	r3, r3, #4
 801951c:	4413      	add	r3, r2
 801951e:	011b      	lsls	r3, r3, #4
 8019520:	440b      	add	r3, r1
 8019522:	330f      	adds	r3, #15
 8019524:	2204      	movs	r2, #4
 8019526:	701a      	strb	r2, [r3, #0]
        break;
 8019528:	e006      	b.n	8019538 <dns_call_found+0x104>
      continue; /* only check other requests */
 801952a:	bf00      	nop
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 801952c:	7bfb      	ldrb	r3, [r7, #15]
 801952e:	3301      	adds	r3, #1
 8019530:	73fb      	strb	r3, [r7, #15]
 8019532:	7bfb      	ldrb	r3, [r7, #15]
 8019534:	2b03      	cmp	r3, #3
 8019536:	d9ca      	bls.n	80194ce <dns_call_found+0x9a>
      }
    }
  }
  if (dns_table[idx].pcb_idx < DNS_MAX_SOURCE_PORTS) {
 8019538:	79fa      	ldrb	r2, [r7, #7]
 801953a:	491c      	ldr	r1, [pc, #112]	; (80195ac <dns_call_found+0x178>)
 801953c:	4613      	mov	r3, r2
 801953e:	011b      	lsls	r3, r3, #4
 8019540:	4413      	add	r3, r2
 8019542:	011b      	lsls	r3, r3, #4
 8019544:	440b      	add	r3, r1
 8019546:	330f      	adds	r3, #15
 8019548:	781b      	ldrb	r3, [r3, #0]
 801954a:	2b03      	cmp	r3, #3
 801954c:	d827      	bhi.n	801959e <dns_call_found+0x16a>
    /* if we come here, the pcb is not used any more and can be removed */
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
 801954e:	79fa      	ldrb	r2, [r7, #7]
 8019550:	4916      	ldr	r1, [pc, #88]	; (80195ac <dns_call_found+0x178>)
 8019552:	4613      	mov	r3, r2
 8019554:	011b      	lsls	r3, r3, #4
 8019556:	4413      	add	r3, r2
 8019558:	011b      	lsls	r3, r3, #4
 801955a:	440b      	add	r3, r1
 801955c:	330f      	adds	r3, #15
 801955e:	781b      	ldrb	r3, [r3, #0]
 8019560:	461a      	mov	r2, r3
 8019562:	4b13      	ldr	r3, [pc, #76]	; (80195b0 <dns_call_found+0x17c>)
 8019564:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019568:	4618      	mov	r0, r3
 801956a:	f00c fb29 	bl	8025bc0 <udp_remove>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 801956e:	79fa      	ldrb	r2, [r7, #7]
 8019570:	490e      	ldr	r1, [pc, #56]	; (80195ac <dns_call_found+0x178>)
 8019572:	4613      	mov	r3, r2
 8019574:	011b      	lsls	r3, r3, #4
 8019576:	4413      	add	r3, r2
 8019578:	011b      	lsls	r3, r3, #4
 801957a:	440b      	add	r3, r1
 801957c:	330f      	adds	r3, #15
 801957e:	781b      	ldrb	r3, [r3, #0]
 8019580:	4619      	mov	r1, r3
 8019582:	4b0b      	ldr	r3, [pc, #44]	; (80195b0 <dns_call_found+0x17c>)
 8019584:	2200      	movs	r2, #0
 8019586:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
    dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 801958a:	79fa      	ldrb	r2, [r7, #7]
 801958c:	4907      	ldr	r1, [pc, #28]	; (80195ac <dns_call_found+0x178>)
 801958e:	4613      	mov	r3, r2
 8019590:	011b      	lsls	r3, r3, #4
 8019592:	4413      	add	r3, r2
 8019594:	011b      	lsls	r3, r3, #4
 8019596:	440b      	add	r3, r1
 8019598:	330f      	adds	r3, #15
 801959a:	2204      	movs	r2, #4
 801959c:	701a      	strb	r2, [r3, #0]
  }
#endif
}
 801959e:	bf00      	nop
 80195a0:	3714      	adds	r7, #20
 80195a2:	46bd      	mov	sp, r7
 80195a4:	bd90      	pop	{r4, r7, pc}
 80195a6:	bf00      	nop
 80195a8:	20019534 	.word	0x20019534
 80195ac:	200190f4 	.word	0x200190f4
 80195b0:	200190e4 	.word	0x200190e4

080195b4 <dns_create_txid>:

/* Create a query transmission ID that is unique for all outstanding queries */
static u16_t
dns_create_txid(void)
{
 80195b4:	b580      	push	{r7, lr}
 80195b6:	b082      	sub	sp, #8
 80195b8:	af00      	add	r7, sp, #0
  u16_t txid;
  u8_t i;

again:
  txid = (u16_t)DNS_RAND_TXID();
 80195ba:	f00c ff35 	bl	8026428 <rand>
 80195be:	4603      	mov	r3, r0
 80195c0:	80bb      	strh	r3, [r7, #4]

  /* check whether the ID is unique */
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 80195c2:	2300      	movs	r3, #0
 80195c4:	71fb      	strb	r3, [r7, #7]
 80195c6:	e01a      	b.n	80195fe <dns_create_txid+0x4a>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 80195c8:	79fa      	ldrb	r2, [r7, #7]
 80195ca:	4911      	ldr	r1, [pc, #68]	; (8019610 <dns_create_txid+0x5c>)
 80195cc:	4613      	mov	r3, r2
 80195ce:	011b      	lsls	r3, r3, #4
 80195d0:	4413      	add	r3, r2
 80195d2:	011b      	lsls	r3, r3, #4
 80195d4:	440b      	add	r3, r1
 80195d6:	330a      	adds	r3, #10
 80195d8:	781b      	ldrb	r3, [r3, #0]
 80195da:	2b02      	cmp	r3, #2
 80195dc:	d10c      	bne.n	80195f8 <dns_create_txid+0x44>
        (dns_table[i].txid == txid)) {
 80195de:	79fa      	ldrb	r2, [r7, #7]
 80195e0:	490b      	ldr	r1, [pc, #44]	; (8019610 <dns_create_txid+0x5c>)
 80195e2:	4613      	mov	r3, r2
 80195e4:	011b      	lsls	r3, r3, #4
 80195e6:	4413      	add	r3, r2
 80195e8:	011b      	lsls	r3, r3, #4
 80195ea:	440b      	add	r3, r1
 80195ec:	3308      	adds	r3, #8
 80195ee:	881b      	ldrh	r3, [r3, #0]
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 80195f0:	88ba      	ldrh	r2, [r7, #4]
 80195f2:	429a      	cmp	r2, r3
 80195f4:	d100      	bne.n	80195f8 <dns_create_txid+0x44>
      /* ID already used by another pending query */
      goto again;
 80195f6:	e7e0      	b.n	80195ba <dns_create_txid+0x6>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 80195f8:	79fb      	ldrb	r3, [r7, #7]
 80195fa:	3301      	adds	r3, #1
 80195fc:	71fb      	strb	r3, [r7, #7]
 80195fe:	79fb      	ldrb	r3, [r7, #7]
 8019600:	2b03      	cmp	r3, #3
 8019602:	d9e1      	bls.n	80195c8 <dns_create_txid+0x14>
    }
  }

  return txid;
 8019604:	88bb      	ldrh	r3, [r7, #4]
}
 8019606:	4618      	mov	r0, r3
 8019608:	3708      	adds	r7, #8
 801960a:	46bd      	mov	sp, r7
 801960c:	bd80      	pop	{r7, pc}
 801960e:	bf00      	nop
 8019610:	200190f4 	.word	0x200190f4

08019614 <dns_backupserver_available>:
/**
 * Check whether there are other backup DNS servers available to try
 */
static u8_t
dns_backupserver_available(struct dns_table_entry *pentry)
{
 8019614:	b480      	push	{r7}
 8019616:	b085      	sub	sp, #20
 8019618:	af00      	add	r7, sp, #0
 801961a:	6078      	str	r0, [r7, #4]
  u8_t ret = 0;
 801961c:	2300      	movs	r3, #0
 801961e:	73fb      	strb	r3, [r7, #15]

  if (pentry) {
 8019620:	687b      	ldr	r3, [r7, #4]
 8019622:	2b00      	cmp	r3, #0
 8019624:	d00e      	beq.n	8019644 <dns_backupserver_available+0x30>
    if ((pentry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[pentry->server_idx + 1])) {
 8019626:	687b      	ldr	r3, [r7, #4]
 8019628:	7adb      	ldrb	r3, [r3, #11]
 801962a:	3301      	adds	r3, #1
 801962c:	2b01      	cmp	r3, #1
 801962e:	dc09      	bgt.n	8019644 <dns_backupserver_available+0x30>
 8019630:	687b      	ldr	r3, [r7, #4]
 8019632:	7adb      	ldrb	r3, [r3, #11]
 8019634:	3301      	adds	r3, #1
 8019636:	4a07      	ldr	r2, [pc, #28]	; (8019654 <dns_backupserver_available+0x40>)
 8019638:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801963c:	2b00      	cmp	r3, #0
 801963e:	d001      	beq.n	8019644 <dns_backupserver_available+0x30>
      ret = 1;
 8019640:	2301      	movs	r3, #1
 8019642:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8019644:	7bfb      	ldrb	r3, [r7, #15]
}
 8019646:	4618      	mov	r0, r3
 8019648:	3714      	adds	r7, #20
 801964a:	46bd      	mov	sp, r7
 801964c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019650:	4770      	bx	lr
 8019652:	bf00      	nop
 8019654:	20019564 	.word	0x20019564

08019658 <dns_check_entry>:
 *
 * @param i index of the dns_table entry to check
 */
static void
dns_check_entry(u8_t i)
{
 8019658:	b580      	push	{r7, lr}
 801965a:	b084      	sub	sp, #16
 801965c:	af00      	add	r7, sp, #0
 801965e:	4603      	mov	r3, r0
 8019660:	71fb      	strb	r3, [r7, #7]
  err_t err;
  struct dns_table_entry *entry = &dns_table[i];
 8019662:	79fa      	ldrb	r2, [r7, #7]
 8019664:	4613      	mov	r3, r2
 8019666:	011b      	lsls	r3, r3, #4
 8019668:	4413      	add	r3, r2
 801966a:	011b      	lsls	r3, r3, #4
 801966c:	4a48      	ldr	r2, [pc, #288]	; (8019790 <dns_check_entry+0x138>)
 801966e:	4413      	add	r3, r2
 8019670:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 8019672:	79fb      	ldrb	r3, [r7, #7]
 8019674:	2b03      	cmp	r3, #3
 8019676:	d906      	bls.n	8019686 <dns_check_entry+0x2e>
 8019678:	4b46      	ldr	r3, [pc, #280]	; (8019794 <dns_check_entry+0x13c>)
 801967a:	f240 421c 	movw	r2, #1052	; 0x41c
 801967e:	4946      	ldr	r1, [pc, #280]	; (8019798 <dns_check_entry+0x140>)
 8019680:	4846      	ldr	r0, [pc, #280]	; (801979c <dns_check_entry+0x144>)
 8019682:	f00c fe55 	bl	8026330 <iprintf>

  switch (entry->state) {
 8019686:	68fb      	ldr	r3, [r7, #12]
 8019688:	7a9b      	ldrb	r3, [r3, #10]
 801968a:	2b03      	cmp	r3, #3
 801968c:	d86f      	bhi.n	801976e <dns_check_entry+0x116>
 801968e:	a201      	add	r2, pc, #4	; (adr r2, 8019694 <dns_check_entry+0x3c>)
 8019690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019694:	0801977f 	.word	0x0801977f
 8019698:	080196a5 	.word	0x080196a5
 801969c:	080196d7 	.word	0x080196d7
 80196a0:	0801974d 	.word	0x0801974d
    case DNS_STATE_NEW:
      /* initialize new entry */
      entry->txid = dns_create_txid();
 80196a4:	f7ff ff86 	bl	80195b4 <dns_create_txid>
 80196a8:	4603      	mov	r3, r0
 80196aa:	461a      	mov	r2, r3
 80196ac:	68fb      	ldr	r3, [r7, #12]
 80196ae:	811a      	strh	r2, [r3, #8]
      entry->state = DNS_STATE_ASKING;
 80196b0:	68fb      	ldr	r3, [r7, #12]
 80196b2:	2202      	movs	r2, #2
 80196b4:	729a      	strb	r2, [r3, #10]
      entry->server_idx = 0;
 80196b6:	68fb      	ldr	r3, [r7, #12]
 80196b8:	2200      	movs	r2, #0
 80196ba:	72da      	strb	r2, [r3, #11]
      entry->tmr = 1;
 80196bc:	68fb      	ldr	r3, [r7, #12]
 80196be:	2201      	movs	r2, #1
 80196c0:	731a      	strb	r2, [r3, #12]
      entry->retries = 0;
 80196c2:	68fb      	ldr	r3, [r7, #12]
 80196c4:	2200      	movs	r2, #0
 80196c6:	735a      	strb	r2, [r3, #13]

      /* send DNS packet for this entry */
      err = dns_send(i);
 80196c8:	79fb      	ldrb	r3, [r7, #7]
 80196ca:	4618      	mov	r0, r3
 80196cc:	f7ff fdc2 	bl	8019254 <dns_send>
 80196d0:	4603      	mov	r3, r0
 80196d2:	72fb      	strb	r3, [r7, #11]
      if (err != ERR_OK) {
        LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                    ("dns_send returned error: %s\n", lwip_strerr(err)));
      }
      break;
 80196d4:	e058      	b.n	8019788 <dns_check_entry+0x130>
    case DNS_STATE_ASKING:
      if (--entry->tmr == 0) {
 80196d6:	68fb      	ldr	r3, [r7, #12]
 80196d8:	7b1b      	ldrb	r3, [r3, #12]
 80196da:	3b01      	subs	r3, #1
 80196dc:	b2da      	uxtb	r2, r3
 80196de:	68fb      	ldr	r3, [r7, #12]
 80196e0:	731a      	strb	r2, [r3, #12]
 80196e2:	68fb      	ldr	r3, [r7, #12]
 80196e4:	7b1b      	ldrb	r3, [r3, #12]
 80196e6:	2b00      	cmp	r3, #0
 80196e8:	d14b      	bne.n	8019782 <dns_check_entry+0x12a>
        if (++entry->retries == DNS_MAX_RETRIES) {
 80196ea:	68fb      	ldr	r3, [r7, #12]
 80196ec:	7b5b      	ldrb	r3, [r3, #13]
 80196ee:	3301      	adds	r3, #1
 80196f0:	b2da      	uxtb	r2, r3
 80196f2:	68fb      	ldr	r3, [r7, #12]
 80196f4:	735a      	strb	r2, [r3, #13]
 80196f6:	68fb      	ldr	r3, [r7, #12]
 80196f8:	7b5b      	ldrb	r3, [r3, #13]
 80196fa:	2b04      	cmp	r3, #4
 80196fc:	d11b      	bne.n	8019736 <dns_check_entry+0xde>
          if (dns_backupserver_available(entry)
 80196fe:	68f8      	ldr	r0, [r7, #12]
 8019700:	f7ff ff88 	bl	8019614 <dns_backupserver_available>
 8019704:	4603      	mov	r3, r0
 8019706:	2b00      	cmp	r3, #0
 8019708:	d00c      	beq.n	8019724 <dns_check_entry+0xcc>
#if LWIP_DNS_SUPPORT_MDNS_QUERIES
              && !entry->is_mdns
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
             ) {
            /* change of server */
            entry->server_idx++;
 801970a:	68fb      	ldr	r3, [r7, #12]
 801970c:	7adb      	ldrb	r3, [r3, #11]
 801970e:	3301      	adds	r3, #1
 8019710:	b2da      	uxtb	r2, r3
 8019712:	68fb      	ldr	r3, [r7, #12]
 8019714:	72da      	strb	r2, [r3, #11]
            entry->tmr = 1;
 8019716:	68fb      	ldr	r3, [r7, #12]
 8019718:	2201      	movs	r2, #1
 801971a:	731a      	strb	r2, [r3, #12]
            entry->retries = 0;
 801971c:	68fb      	ldr	r3, [r7, #12]
 801971e:	2200      	movs	r2, #0
 8019720:	735a      	strb	r2, [r3, #13]
 8019722:	e00c      	b.n	801973e <dns_check_entry+0xe6>
          } else {
            LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": timeout\n", entry->name));
            /* call specified callback function if provided */
            dns_call_found(i, NULL);
 8019724:	79fb      	ldrb	r3, [r7, #7]
 8019726:	2100      	movs	r1, #0
 8019728:	4618      	mov	r0, r3
 801972a:	f7ff fe83 	bl	8019434 <dns_call_found>
            /* flush this entry */
            entry->state = DNS_STATE_UNUSED;
 801972e:	68fb      	ldr	r3, [r7, #12]
 8019730:	2200      	movs	r2, #0
 8019732:	729a      	strb	r2, [r3, #10]
            break;
 8019734:	e028      	b.n	8019788 <dns_check_entry+0x130>
          }
        } else {
          /* wait longer for the next retry */
          entry->tmr = entry->retries;
 8019736:	68fb      	ldr	r3, [r7, #12]
 8019738:	7b5a      	ldrb	r2, [r3, #13]
 801973a:	68fb      	ldr	r3, [r7, #12]
 801973c:	731a      	strb	r2, [r3, #12]
        }

        /* send DNS packet for this entry */
        err = dns_send(i);
 801973e:	79fb      	ldrb	r3, [r7, #7]
 8019740:	4618      	mov	r0, r3
 8019742:	f7ff fd87 	bl	8019254 <dns_send>
 8019746:	4603      	mov	r3, r0
 8019748:	72fb      	strb	r3, [r7, #11]
        if (err != ERR_OK) {
          LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                      ("dns_send returned error: %s\n", lwip_strerr(err)));
        }
      }
      break;
 801974a:	e01a      	b.n	8019782 <dns_check_entry+0x12a>
    case DNS_STATE_DONE:
      /* if the time to live is nul */
      if ((entry->ttl == 0) || (--entry->ttl == 0)) {
 801974c:	68fb      	ldr	r3, [r7, #12]
 801974e:	681b      	ldr	r3, [r3, #0]
 8019750:	2b00      	cmp	r3, #0
 8019752:	d008      	beq.n	8019766 <dns_check_entry+0x10e>
 8019754:	68fb      	ldr	r3, [r7, #12]
 8019756:	681b      	ldr	r3, [r3, #0]
 8019758:	1e5a      	subs	r2, r3, #1
 801975a:	68fb      	ldr	r3, [r7, #12]
 801975c:	601a      	str	r2, [r3, #0]
 801975e:	68fb      	ldr	r3, [r7, #12]
 8019760:	681b      	ldr	r3, [r3, #0]
 8019762:	2b00      	cmp	r3, #0
 8019764:	d10f      	bne.n	8019786 <dns_check_entry+0x12e>
        LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": flush\n", entry->name));
        /* flush this entry, there cannot be any related pending entries in this state */
        entry->state = DNS_STATE_UNUSED;
 8019766:	68fb      	ldr	r3, [r7, #12]
 8019768:	2200      	movs	r2, #0
 801976a:	729a      	strb	r2, [r3, #10]
      }
      break;
 801976c:	e00b      	b.n	8019786 <dns_check_entry+0x12e>
    case DNS_STATE_UNUSED:
      /* nothing to do */
      break;
    default:
      LWIP_ASSERT("unknown dns_table entry state:", 0);
 801976e:	4b09      	ldr	r3, [pc, #36]	; (8019794 <dns_check_entry+0x13c>)
 8019770:	f240 425b 	movw	r2, #1115	; 0x45b
 8019774:	490a      	ldr	r1, [pc, #40]	; (80197a0 <dns_check_entry+0x148>)
 8019776:	4809      	ldr	r0, [pc, #36]	; (801979c <dns_check_entry+0x144>)
 8019778:	f00c fdda 	bl	8026330 <iprintf>
      break;
 801977c:	e004      	b.n	8019788 <dns_check_entry+0x130>
      break;
 801977e:	bf00      	nop
 8019780:	e002      	b.n	8019788 <dns_check_entry+0x130>
      break;
 8019782:	bf00      	nop
 8019784:	e000      	b.n	8019788 <dns_check_entry+0x130>
      break;
 8019786:	bf00      	nop
  }
}
 8019788:	bf00      	nop
 801978a:	3710      	adds	r7, #16
 801978c:	46bd      	mov	sp, r7
 801978e:	bd80      	pop	{r7, pc}
 8019790:	200190f4 	.word	0x200190f4
 8019794:	08027bb4 	.word	0x08027bb4
 8019798:	08027c24 	.word	0x08027c24
 801979c:	08027bfc 	.word	0x08027bfc
 80197a0:	08027c40 	.word	0x08027c40

080197a4 <dns_check_entries>:
/**
 * Call dns_check_entry for each entry in dns_table - check all entries.
 */
static void
dns_check_entries(void)
{
 80197a4:	b580      	push	{r7, lr}
 80197a6:	b082      	sub	sp, #8
 80197a8:	af00      	add	r7, sp, #0
  u8_t i;

  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 80197aa:	2300      	movs	r3, #0
 80197ac:	71fb      	strb	r3, [r7, #7]
 80197ae:	e006      	b.n	80197be <dns_check_entries+0x1a>
    dns_check_entry(i);
 80197b0:	79fb      	ldrb	r3, [r7, #7]
 80197b2:	4618      	mov	r0, r3
 80197b4:	f7ff ff50 	bl	8019658 <dns_check_entry>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 80197b8:	79fb      	ldrb	r3, [r7, #7]
 80197ba:	3301      	adds	r3, #1
 80197bc:	71fb      	strb	r3, [r7, #7]
 80197be:	79fb      	ldrb	r3, [r7, #7]
 80197c0:	2b03      	cmp	r3, #3
 80197c2:	d9f5      	bls.n	80197b0 <dns_check_entries+0xc>
  }
}
 80197c4:	bf00      	nop
 80197c6:	3708      	adds	r7, #8
 80197c8:	46bd      	mov	sp, r7
 80197ca:	bd80      	pop	{r7, pc}

080197cc <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 80197cc:	b480      	push	{r7}
 80197ce:	b089      	sub	sp, #36	; 0x24
 80197d0:	af00      	add	r7, sp, #0
 80197d2:	6078      	str	r0, [r7, #4]
 80197d4:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 80197d6:	687b      	ldr	r3, [r7, #4]
 80197d8:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 80197da:	2300      	movs	r3, #0
 80197dc:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 80197de:	2300      	movs	r3, #0
 80197e0:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 80197e2:	69fb      	ldr	r3, [r7, #28]
 80197e4:	f003 0301 	and.w	r3, r3, #1
 80197e8:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 80197ea:	693b      	ldr	r3, [r7, #16]
 80197ec:	2b00      	cmp	r3, #0
 80197ee:	d00d      	beq.n	801980c <lwip_standard_chksum+0x40>
 80197f0:	683b      	ldr	r3, [r7, #0]
 80197f2:	2b00      	cmp	r3, #0
 80197f4:	dd0a      	ble.n	801980c <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 80197f6:	f107 030e 	add.w	r3, r7, #14
 80197fa:	3301      	adds	r3, #1
 80197fc:	69fa      	ldr	r2, [r7, #28]
 80197fe:	1c51      	adds	r1, r2, #1
 8019800:	61f9      	str	r1, [r7, #28]
 8019802:	7812      	ldrb	r2, [r2, #0]
 8019804:	701a      	strb	r2, [r3, #0]
    len--;
 8019806:	683b      	ldr	r3, [r7, #0]
 8019808:	3b01      	subs	r3, #1
 801980a:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 801980c:	69fb      	ldr	r3, [r7, #28]
 801980e:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 8019810:	e00a      	b.n	8019828 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 8019812:	69bb      	ldr	r3, [r7, #24]
 8019814:	1c9a      	adds	r2, r3, #2
 8019816:	61ba      	str	r2, [r7, #24]
 8019818:	881b      	ldrh	r3, [r3, #0]
 801981a:	461a      	mov	r2, r3
 801981c:	697b      	ldr	r3, [r7, #20]
 801981e:	4413      	add	r3, r2
 8019820:	617b      	str	r3, [r7, #20]
    len -= 2;
 8019822:	683b      	ldr	r3, [r7, #0]
 8019824:	3b02      	subs	r3, #2
 8019826:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 8019828:	683b      	ldr	r3, [r7, #0]
 801982a:	2b01      	cmp	r3, #1
 801982c:	dcf1      	bgt.n	8019812 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 801982e:	683b      	ldr	r3, [r7, #0]
 8019830:	2b00      	cmp	r3, #0
 8019832:	dd04      	ble.n	801983e <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8019834:	f107 030e 	add.w	r3, r7, #14
 8019838:	69ba      	ldr	r2, [r7, #24]
 801983a:	7812      	ldrb	r2, [r2, #0]
 801983c:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 801983e:	89fb      	ldrh	r3, [r7, #14]
 8019840:	461a      	mov	r2, r3
 8019842:	697b      	ldr	r3, [r7, #20]
 8019844:	4413      	add	r3, r2
 8019846:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8019848:	697b      	ldr	r3, [r7, #20]
 801984a:	0c1a      	lsrs	r2, r3, #16
 801984c:	697b      	ldr	r3, [r7, #20]
 801984e:	b29b      	uxth	r3, r3
 8019850:	4413      	add	r3, r2
 8019852:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 8019854:	697b      	ldr	r3, [r7, #20]
 8019856:	0c1a      	lsrs	r2, r3, #16
 8019858:	697b      	ldr	r3, [r7, #20]
 801985a:	b29b      	uxth	r3, r3
 801985c:	4413      	add	r3, r2
 801985e:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 8019860:	693b      	ldr	r3, [r7, #16]
 8019862:	2b00      	cmp	r3, #0
 8019864:	d007      	beq.n	8019876 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 8019866:	697b      	ldr	r3, [r7, #20]
 8019868:	021b      	lsls	r3, r3, #8
 801986a:	b29a      	uxth	r2, r3
 801986c:	697b      	ldr	r3, [r7, #20]
 801986e:	0a1b      	lsrs	r3, r3, #8
 8019870:	b2db      	uxtb	r3, r3
 8019872:	4313      	orrs	r3, r2
 8019874:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 8019876:	697b      	ldr	r3, [r7, #20]
 8019878:	b29b      	uxth	r3, r3
}
 801987a:	4618      	mov	r0, r3
 801987c:	3724      	adds	r7, #36	; 0x24
 801987e:	46bd      	mov	sp, r7
 8019880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019884:	4770      	bx	lr

08019886 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 8019886:	b580      	push	{r7, lr}
 8019888:	b086      	sub	sp, #24
 801988a:	af00      	add	r7, sp, #0
 801988c:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 801988e:	2300      	movs	r3, #0
 8019890:	60fb      	str	r3, [r7, #12]

  acc = 0;
 8019892:	2300      	movs	r3, #0
 8019894:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8019896:	687b      	ldr	r3, [r7, #4]
 8019898:	613b      	str	r3, [r7, #16]
 801989a:	e02b      	b.n	80198f4 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 801989c:	693b      	ldr	r3, [r7, #16]
 801989e:	685a      	ldr	r2, [r3, #4]
 80198a0:	693b      	ldr	r3, [r7, #16]
 80198a2:	895b      	ldrh	r3, [r3, #10]
 80198a4:	4619      	mov	r1, r3
 80198a6:	4610      	mov	r0, r2
 80198a8:	f7ff ff90 	bl	80197cc <lwip_standard_chksum>
 80198ac:	4603      	mov	r3, r0
 80198ae:	461a      	mov	r2, r3
 80198b0:	697b      	ldr	r3, [r7, #20]
 80198b2:	4413      	add	r3, r2
 80198b4:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 80198b6:	697b      	ldr	r3, [r7, #20]
 80198b8:	0c1a      	lsrs	r2, r3, #16
 80198ba:	697b      	ldr	r3, [r7, #20]
 80198bc:	b29b      	uxth	r3, r3
 80198be:	4413      	add	r3, r2
 80198c0:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 80198c2:	693b      	ldr	r3, [r7, #16]
 80198c4:	895b      	ldrh	r3, [r3, #10]
 80198c6:	f003 0301 	and.w	r3, r3, #1
 80198ca:	b29b      	uxth	r3, r3
 80198cc:	2b00      	cmp	r3, #0
 80198ce:	d00e      	beq.n	80198ee <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 80198d0:	68fb      	ldr	r3, [r7, #12]
 80198d2:	2b00      	cmp	r3, #0
 80198d4:	bf0c      	ite	eq
 80198d6:	2301      	moveq	r3, #1
 80198d8:	2300      	movne	r3, #0
 80198da:	b2db      	uxtb	r3, r3
 80198dc:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 80198de:	697b      	ldr	r3, [r7, #20]
 80198e0:	021b      	lsls	r3, r3, #8
 80198e2:	b29a      	uxth	r2, r3
 80198e4:	697b      	ldr	r3, [r7, #20]
 80198e6:	0a1b      	lsrs	r3, r3, #8
 80198e8:	b2db      	uxtb	r3, r3
 80198ea:	4313      	orrs	r3, r2
 80198ec:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 80198ee:	693b      	ldr	r3, [r7, #16]
 80198f0:	681b      	ldr	r3, [r3, #0]
 80198f2:	613b      	str	r3, [r7, #16]
 80198f4:	693b      	ldr	r3, [r7, #16]
 80198f6:	2b00      	cmp	r3, #0
 80198f8:	d1d0      	bne.n	801989c <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 80198fa:	68fb      	ldr	r3, [r7, #12]
 80198fc:	2b00      	cmp	r3, #0
 80198fe:	d007      	beq.n	8019910 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 8019900:	697b      	ldr	r3, [r7, #20]
 8019902:	021b      	lsls	r3, r3, #8
 8019904:	b29a      	uxth	r2, r3
 8019906:	697b      	ldr	r3, [r7, #20]
 8019908:	0a1b      	lsrs	r3, r3, #8
 801990a:	b2db      	uxtb	r3, r3
 801990c:	4313      	orrs	r3, r2
 801990e:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 8019910:	697b      	ldr	r3, [r7, #20]
 8019912:	b29b      	uxth	r3, r3
 8019914:	43db      	mvns	r3, r3
 8019916:	b29b      	uxth	r3, r3
}
 8019918:	4618      	mov	r0, r3
 801991a:	3718      	adds	r7, #24
 801991c:	46bd      	mov	sp, r7
 801991e:	bd80      	pop	{r7, pc}

08019920 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8019920:	b580      	push	{r7, lr}
 8019922:	b082      	sub	sp, #8
 8019924:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8019926:	2300      	movs	r3, #0
 8019928:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 801992a:	f00c fb71 	bl	8026010 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 801992e:	f004 f953 	bl	801dbd8 <mem_init>
  memp_init();
 8019932:	f004 fcb3 	bl	801e29c <memp_init>
  pbuf_init();
  netif_init();
 8019936:	f004 fd79 	bl	801e42c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 801993a:	f00b fcb1 	bl	80252a0 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 801993e:	f005 fef7 	bl	801f730 <tcp_init>
#endif /* LWIP_TCP */
#if LWIP_IGMP
  igmp_init();
#endif /* LWIP_IGMP */
#if LWIP_DNS
  dns_init();
 8019942:	f7ff fc55 	bl	80191f0 <dns_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8019946:	f00b fbfb 	bl	8025140 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 801994a:	bf00      	nop
 801994c:	3708      	adds	r7, #8
 801994e:	46bd      	mov	sp, r7
 8019950:	bd80      	pop	{r7, pc}
	...

08019954 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8019954:	b580      	push	{r7, lr}
 8019956:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8019958:	4b20      	ldr	r3, [pc, #128]	; (80199dc <dhcp_inc_pcb_refcount+0x88>)
 801995a:	781b      	ldrb	r3, [r3, #0]
 801995c:	2b00      	cmp	r3, #0
 801995e:	d133      	bne.n	80199c8 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8019960:	4b1f      	ldr	r3, [pc, #124]	; (80199e0 <dhcp_inc_pcb_refcount+0x8c>)
 8019962:	681b      	ldr	r3, [r3, #0]
 8019964:	2b00      	cmp	r3, #0
 8019966:	d005      	beq.n	8019974 <dhcp_inc_pcb_refcount+0x20>
 8019968:	4b1e      	ldr	r3, [pc, #120]	; (80199e4 <dhcp_inc_pcb_refcount+0x90>)
 801996a:	22e5      	movs	r2, #229	; 0xe5
 801996c:	491e      	ldr	r1, [pc, #120]	; (80199e8 <dhcp_inc_pcb_refcount+0x94>)
 801996e:	481f      	ldr	r0, [pc, #124]	; (80199ec <dhcp_inc_pcb_refcount+0x98>)
 8019970:	f00c fcde 	bl	8026330 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8019974:	f00c f966 	bl	8025c44 <udp_new>
 8019978:	4602      	mov	r2, r0
 801997a:	4b19      	ldr	r3, [pc, #100]	; (80199e0 <dhcp_inc_pcb_refcount+0x8c>)
 801997c:	601a      	str	r2, [r3, #0]

    if (dhcp_pcb == NULL) {
 801997e:	4b18      	ldr	r3, [pc, #96]	; (80199e0 <dhcp_inc_pcb_refcount+0x8c>)
 8019980:	681b      	ldr	r3, [r3, #0]
 8019982:	2b00      	cmp	r3, #0
 8019984:	d102      	bne.n	801998c <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 8019986:	f04f 33ff 	mov.w	r3, #4294967295
 801998a:	e024      	b.n	80199d6 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 801998c:	4b14      	ldr	r3, [pc, #80]	; (80199e0 <dhcp_inc_pcb_refcount+0x8c>)
 801998e:	681b      	ldr	r3, [r3, #0]
 8019990:	4a13      	ldr	r2, [pc, #76]	; (80199e0 <dhcp_inc_pcb_refcount+0x8c>)
 8019992:	6812      	ldr	r2, [r2, #0]
 8019994:	7a52      	ldrb	r2, [r2, #9]
 8019996:	f042 0220 	orr.w	r2, r2, #32
 801999a:	b2d2      	uxtb	r2, r2
 801999c:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 801999e:	4b10      	ldr	r3, [pc, #64]	; (80199e0 <dhcp_inc_pcb_refcount+0x8c>)
 80199a0:	681b      	ldr	r3, [r3, #0]
 80199a2:	2244      	movs	r2, #68	; 0x44
 80199a4:	4912      	ldr	r1, [pc, #72]	; (80199f0 <dhcp_inc_pcb_refcount+0x9c>)
 80199a6:	4618      	mov	r0, r3
 80199a8:	f00b fff4 	bl	8025994 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 80199ac:	4b0c      	ldr	r3, [pc, #48]	; (80199e0 <dhcp_inc_pcb_refcount+0x8c>)
 80199ae:	681b      	ldr	r3, [r3, #0]
 80199b0:	2243      	movs	r2, #67	; 0x43
 80199b2:	490f      	ldr	r1, [pc, #60]	; (80199f0 <dhcp_inc_pcb_refcount+0x9c>)
 80199b4:	4618      	mov	r0, r3
 80199b6:	f00c f875 	bl	8025aa4 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 80199ba:	4b09      	ldr	r3, [pc, #36]	; (80199e0 <dhcp_inc_pcb_refcount+0x8c>)
 80199bc:	681b      	ldr	r3, [r3, #0]
 80199be:	2200      	movs	r2, #0
 80199c0:	490c      	ldr	r1, [pc, #48]	; (80199f4 <dhcp_inc_pcb_refcount+0xa0>)
 80199c2:	4618      	mov	r0, r3
 80199c4:	f00c f8dc 	bl	8025b80 <udp_recv>
  }

  dhcp_pcb_refcount++;
 80199c8:	4b04      	ldr	r3, [pc, #16]	; (80199dc <dhcp_inc_pcb_refcount+0x88>)
 80199ca:	781b      	ldrb	r3, [r3, #0]
 80199cc:	3301      	adds	r3, #1
 80199ce:	b2da      	uxtb	r2, r3
 80199d0:	4b02      	ldr	r3, [pc, #8]	; (80199dc <dhcp_inc_pcb_refcount+0x88>)
 80199d2:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 80199d4:	2300      	movs	r3, #0
}
 80199d6:	4618      	mov	r0, r3
 80199d8:	bd80      	pop	{r7, pc}
 80199da:	bf00      	nop
 80199dc:	20019570 	.word	0x20019570
 80199e0:	2001956c 	.word	0x2001956c
 80199e4:	08027c60 	.word	0x08027c60
 80199e8:	08027c98 	.word	0x08027c98
 80199ec:	08027cc0 	.word	0x08027cc0
 80199f0:	0802b720 	.word	0x0802b720
 80199f4:	0801b2bd 	.word	0x0801b2bd

080199f8 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 80199f8:	b580      	push	{r7, lr}
 80199fa:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 80199fc:	4b0e      	ldr	r3, [pc, #56]	; (8019a38 <dhcp_dec_pcb_refcount+0x40>)
 80199fe:	781b      	ldrb	r3, [r3, #0]
 8019a00:	2b00      	cmp	r3, #0
 8019a02:	d105      	bne.n	8019a10 <dhcp_dec_pcb_refcount+0x18>
 8019a04:	4b0d      	ldr	r3, [pc, #52]	; (8019a3c <dhcp_dec_pcb_refcount+0x44>)
 8019a06:	22ff      	movs	r2, #255	; 0xff
 8019a08:	490d      	ldr	r1, [pc, #52]	; (8019a40 <dhcp_dec_pcb_refcount+0x48>)
 8019a0a:	480e      	ldr	r0, [pc, #56]	; (8019a44 <dhcp_dec_pcb_refcount+0x4c>)
 8019a0c:	f00c fc90 	bl	8026330 <iprintf>
  dhcp_pcb_refcount--;
 8019a10:	4b09      	ldr	r3, [pc, #36]	; (8019a38 <dhcp_dec_pcb_refcount+0x40>)
 8019a12:	781b      	ldrb	r3, [r3, #0]
 8019a14:	3b01      	subs	r3, #1
 8019a16:	b2da      	uxtb	r2, r3
 8019a18:	4b07      	ldr	r3, [pc, #28]	; (8019a38 <dhcp_dec_pcb_refcount+0x40>)
 8019a1a:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8019a1c:	4b06      	ldr	r3, [pc, #24]	; (8019a38 <dhcp_dec_pcb_refcount+0x40>)
 8019a1e:	781b      	ldrb	r3, [r3, #0]
 8019a20:	2b00      	cmp	r3, #0
 8019a22:	d107      	bne.n	8019a34 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8019a24:	4b08      	ldr	r3, [pc, #32]	; (8019a48 <dhcp_dec_pcb_refcount+0x50>)
 8019a26:	681b      	ldr	r3, [r3, #0]
 8019a28:	4618      	mov	r0, r3
 8019a2a:	f00c f8c9 	bl	8025bc0 <udp_remove>
    dhcp_pcb = NULL;
 8019a2e:	4b06      	ldr	r3, [pc, #24]	; (8019a48 <dhcp_dec_pcb_refcount+0x50>)
 8019a30:	2200      	movs	r2, #0
 8019a32:	601a      	str	r2, [r3, #0]
  }
}
 8019a34:	bf00      	nop
 8019a36:	bd80      	pop	{r7, pc}
 8019a38:	20019570 	.word	0x20019570
 8019a3c:	08027c60 	.word	0x08027c60
 8019a40:	08027ce8 	.word	0x08027ce8
 8019a44:	08027cc0 	.word	0x08027cc0
 8019a48:	2001956c 	.word	0x2001956c

08019a4c <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8019a4c:	b580      	push	{r7, lr}
 8019a4e:	b084      	sub	sp, #16
 8019a50:	af00      	add	r7, sp, #0
 8019a52:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8019a54:	687b      	ldr	r3, [r7, #4]
 8019a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019a58:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8019a5a:	210c      	movs	r1, #12
 8019a5c:	68f8      	ldr	r0, [r7, #12]
 8019a5e:	f001 f83b 	bl	801aad8 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8019a62:	4b06      	ldr	r3, [pc, #24]	; (8019a7c <dhcp_handle_nak+0x30>)
 8019a64:	4a05      	ldr	r2, [pc, #20]	; (8019a7c <dhcp_handle_nak+0x30>)
 8019a66:	4905      	ldr	r1, [pc, #20]	; (8019a7c <dhcp_handle_nak+0x30>)
 8019a68:	6878      	ldr	r0, [r7, #4]
 8019a6a:	f004 fe57 	bl	801e71c <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 8019a6e:	6878      	ldr	r0, [r7, #4]
 8019a70:	f000 fc2e 	bl	801a2d0 <dhcp_discover>
}
 8019a74:	bf00      	nop
 8019a76:	3710      	adds	r7, #16
 8019a78:	46bd      	mov	sp, r7
 8019a7a:	bd80      	pop	{r7, pc}
 8019a7c:	0802b720 	.word	0x0802b720

08019a80 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8019a80:	b580      	push	{r7, lr}
 8019a82:	b084      	sub	sp, #16
 8019a84:	af00      	add	r7, sp, #0
 8019a86:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8019a88:	687b      	ldr	r3, [r7, #4]
 8019a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019a8c:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8019a8e:	2108      	movs	r1, #8
 8019a90:	68f8      	ldr	r0, [r7, #12]
 8019a92:	f001 f821 	bl	801aad8 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8019a96:	68fb      	ldr	r3, [r7, #12]
 8019a98:	331c      	adds	r3, #28
 8019a9a:	2200      	movs	r2, #0
 8019a9c:	4619      	mov	r1, r3
 8019a9e:	6878      	ldr	r0, [r7, #4]
 8019aa0:	f002 fb20 	bl	801c0e4 <etharp_query>
 8019aa4:	4603      	mov	r3, r0
 8019aa6:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8019aa8:	68fb      	ldr	r3, [r7, #12]
 8019aaa:	799b      	ldrb	r3, [r3, #6]
 8019aac:	2bff      	cmp	r3, #255	; 0xff
 8019aae:	d005      	beq.n	8019abc <dhcp_check+0x3c>
    dhcp->tries++;
 8019ab0:	68fb      	ldr	r3, [r7, #12]
 8019ab2:	799b      	ldrb	r3, [r3, #6]
 8019ab4:	3301      	adds	r3, #1
 8019ab6:	b2da      	uxtb	r2, r3
 8019ab8:	68fb      	ldr	r3, [r7, #12]
 8019aba:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 8019abc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8019ac0:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8019ac2:	893b      	ldrh	r3, [r7, #8]
 8019ac4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8019ac8:	4a06      	ldr	r2, [pc, #24]	; (8019ae4 <dhcp_check+0x64>)
 8019aca:	fb82 1203 	smull	r1, r2, r2, r3
 8019ace:	1152      	asrs	r2, r2, #5
 8019ad0:	17db      	asrs	r3, r3, #31
 8019ad2:	1ad3      	subs	r3, r2, r3
 8019ad4:	b29a      	uxth	r2, r3
 8019ad6:	68fb      	ldr	r3, [r7, #12]
 8019ad8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 8019ada:	bf00      	nop
 8019adc:	3710      	adds	r7, #16
 8019ade:	46bd      	mov	sp, r7
 8019ae0:	bd80      	pop	{r7, pc}
 8019ae2:	bf00      	nop
 8019ae4:	10624dd3 	.word	0x10624dd3

08019ae8 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 8019ae8:	b580      	push	{r7, lr}
 8019aea:	b084      	sub	sp, #16
 8019aec:	af00      	add	r7, sp, #0
 8019aee:	6078      	str	r0, [r7, #4]
 8019af0:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8019af2:	687b      	ldr	r3, [r7, #4]
 8019af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019af6:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8019af8:	4b0c      	ldr	r3, [pc, #48]	; (8019b2c <dhcp_handle_offer+0x44>)
 8019afa:	789b      	ldrb	r3, [r3, #2]
 8019afc:	2b00      	cmp	r3, #0
 8019afe:	d011      	beq.n	8019b24 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 8019b00:	68fb      	ldr	r3, [r7, #12]
 8019b02:	2200      	movs	r2, #0
 8019b04:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8019b06:	4b0a      	ldr	r3, [pc, #40]	; (8019b30 <dhcp_handle_offer+0x48>)
 8019b08:	689b      	ldr	r3, [r3, #8]
 8019b0a:	4618      	mov	r0, r3
 8019b0c:	f7ff fb21 	bl	8019152 <lwip_htonl>
 8019b10:	4602      	mov	r2, r0
 8019b12:	68fb      	ldr	r3, [r7, #12]
 8019b14:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8019b16:	683b      	ldr	r3, [r7, #0]
 8019b18:	691a      	ldr	r2, [r3, #16]
 8019b1a:	68fb      	ldr	r3, [r7, #12]
 8019b1c:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 8019b1e:	6878      	ldr	r0, [r7, #4]
 8019b20:	f000 f808 	bl	8019b34 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8019b24:	bf00      	nop
 8019b26:	3710      	adds	r7, #16
 8019b28:	46bd      	mov	sp, r7
 8019b2a:	bd80      	pop	{r7, pc}
 8019b2c:	2001ca14 	.word	0x2001ca14
 8019b30:	2001ca20 	.word	0x2001ca20

08019b34 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8019b34:	b5b0      	push	{r4, r5, r7, lr}
 8019b36:	b08a      	sub	sp, #40	; 0x28
 8019b38:	af02      	add	r7, sp, #8
 8019b3a:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8019b3c:	687b      	ldr	r3, [r7, #4]
 8019b3e:	2b00      	cmp	r3, #0
 8019b40:	d109      	bne.n	8019b56 <dhcp_select+0x22>
 8019b42:	4b71      	ldr	r3, [pc, #452]	; (8019d08 <dhcp_select+0x1d4>)
 8019b44:	f240 1277 	movw	r2, #375	; 0x177
 8019b48:	4970      	ldr	r1, [pc, #448]	; (8019d0c <dhcp_select+0x1d8>)
 8019b4a:	4871      	ldr	r0, [pc, #452]	; (8019d10 <dhcp_select+0x1dc>)
 8019b4c:	f00c fbf0 	bl	8026330 <iprintf>
 8019b50:	f06f 030f 	mvn.w	r3, #15
 8019b54:	e0d3      	b.n	8019cfe <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 8019b56:	687b      	ldr	r3, [r7, #4]
 8019b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019b5a:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8019b5c:	69bb      	ldr	r3, [r7, #24]
 8019b5e:	2b00      	cmp	r3, #0
 8019b60:	d109      	bne.n	8019b76 <dhcp_select+0x42>
 8019b62:	4b69      	ldr	r3, [pc, #420]	; (8019d08 <dhcp_select+0x1d4>)
 8019b64:	f240 1279 	movw	r2, #377	; 0x179
 8019b68:	496a      	ldr	r1, [pc, #424]	; (8019d14 <dhcp_select+0x1e0>)
 8019b6a:	4869      	ldr	r0, [pc, #420]	; (8019d10 <dhcp_select+0x1dc>)
 8019b6c:	f00c fbe0 	bl	8026330 <iprintf>
 8019b70:	f06f 0305 	mvn.w	r3, #5
 8019b74:	e0c3      	b.n	8019cfe <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8019b76:	2101      	movs	r1, #1
 8019b78:	69b8      	ldr	r0, [r7, #24]
 8019b7a:	f000 ffad 	bl	801aad8 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8019b7e:	f107 030c 	add.w	r3, r7, #12
 8019b82:	2203      	movs	r2, #3
 8019b84:	69b9      	ldr	r1, [r7, #24]
 8019b86:	6878      	ldr	r0, [r7, #4]
 8019b88:	f001 fc60 	bl	801b44c <dhcp_create_msg>
 8019b8c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8019b8e:	697b      	ldr	r3, [r7, #20]
 8019b90:	2b00      	cmp	r3, #0
 8019b92:	f000 8085 	beq.w	8019ca0 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8019b96:	697b      	ldr	r3, [r7, #20]
 8019b98:	685b      	ldr	r3, [r3, #4]
 8019b9a:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8019b9c:	89b8      	ldrh	r0, [r7, #12]
 8019b9e:	693b      	ldr	r3, [r7, #16]
 8019ba0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8019ba4:	2302      	movs	r3, #2
 8019ba6:	2239      	movs	r2, #57	; 0x39
 8019ba8:	f000 ffb0 	bl	801ab0c <dhcp_option>
 8019bac:	4603      	mov	r3, r0
 8019bae:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8019bb0:	89b8      	ldrh	r0, [r7, #12]
 8019bb2:	693b      	ldr	r3, [r7, #16]
 8019bb4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8019bb8:	687b      	ldr	r3, [r7, #4]
 8019bba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019bbc:	461a      	mov	r2, r3
 8019bbe:	f000 ffff 	bl	801abc0 <dhcp_option_short>
 8019bc2:	4603      	mov	r3, r0
 8019bc4:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8019bc6:	89b8      	ldrh	r0, [r7, #12]
 8019bc8:	693b      	ldr	r3, [r7, #16]
 8019bca:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8019bce:	2304      	movs	r3, #4
 8019bd0:	2232      	movs	r2, #50	; 0x32
 8019bd2:	f000 ff9b 	bl	801ab0c <dhcp_option>
 8019bd6:	4603      	mov	r3, r0
 8019bd8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8019bda:	89bc      	ldrh	r4, [r7, #12]
 8019bdc:	693b      	ldr	r3, [r7, #16]
 8019bde:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8019be2:	69bb      	ldr	r3, [r7, #24]
 8019be4:	69db      	ldr	r3, [r3, #28]
 8019be6:	4618      	mov	r0, r3
 8019be8:	f7ff fab3 	bl	8019152 <lwip_htonl>
 8019bec:	4603      	mov	r3, r0
 8019bee:	461a      	mov	r2, r3
 8019bf0:	4629      	mov	r1, r5
 8019bf2:	4620      	mov	r0, r4
 8019bf4:	f001 f816 	bl	801ac24 <dhcp_option_long>
 8019bf8:	4603      	mov	r3, r0
 8019bfa:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8019bfc:	89b8      	ldrh	r0, [r7, #12]
 8019bfe:	693b      	ldr	r3, [r7, #16]
 8019c00:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8019c04:	2304      	movs	r3, #4
 8019c06:	2236      	movs	r2, #54	; 0x36
 8019c08:	f000 ff80 	bl	801ab0c <dhcp_option>
 8019c0c:	4603      	mov	r3, r0
 8019c0e:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8019c10:	89bc      	ldrh	r4, [r7, #12]
 8019c12:	693b      	ldr	r3, [r7, #16]
 8019c14:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8019c18:	69bb      	ldr	r3, [r7, #24]
 8019c1a:	699b      	ldr	r3, [r3, #24]
 8019c1c:	4618      	mov	r0, r3
 8019c1e:	f7ff fa98 	bl	8019152 <lwip_htonl>
 8019c22:	4603      	mov	r3, r0
 8019c24:	461a      	mov	r2, r3
 8019c26:	4629      	mov	r1, r5
 8019c28:	4620      	mov	r0, r4
 8019c2a:	f000 fffb 	bl	801ac24 <dhcp_option_long>
 8019c2e:	4603      	mov	r3, r0
 8019c30:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8019c32:	89b8      	ldrh	r0, [r7, #12]
 8019c34:	693b      	ldr	r3, [r7, #16]
 8019c36:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8019c3a:	2304      	movs	r3, #4
 8019c3c:	2237      	movs	r2, #55	; 0x37
 8019c3e:	f000 ff65 	bl	801ab0c <dhcp_option>
 8019c42:	4603      	mov	r3, r0
 8019c44:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8019c46:	2300      	movs	r3, #0
 8019c48:	77bb      	strb	r3, [r7, #30]
 8019c4a:	e00e      	b.n	8019c6a <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8019c4c:	89b8      	ldrh	r0, [r7, #12]
 8019c4e:	693b      	ldr	r3, [r7, #16]
 8019c50:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8019c54:	7fbb      	ldrb	r3, [r7, #30]
 8019c56:	4a30      	ldr	r2, [pc, #192]	; (8019d18 <dhcp_select+0x1e4>)
 8019c58:	5cd3      	ldrb	r3, [r2, r3]
 8019c5a:	461a      	mov	r2, r3
 8019c5c:	f000 ff8a 	bl	801ab74 <dhcp_option_byte>
 8019c60:	4603      	mov	r3, r0
 8019c62:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8019c64:	7fbb      	ldrb	r3, [r7, #30]
 8019c66:	3301      	adds	r3, #1
 8019c68:	77bb      	strb	r3, [r7, #30]
 8019c6a:	7fbb      	ldrb	r3, [r7, #30]
 8019c6c:	2b03      	cmp	r3, #3
 8019c6e:	d9ed      	bls.n	8019c4c <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8019c70:	89b8      	ldrh	r0, [r7, #12]
 8019c72:	693b      	ldr	r3, [r7, #16]
 8019c74:	33f0      	adds	r3, #240	; 0xf0
 8019c76:	697a      	ldr	r2, [r7, #20]
 8019c78:	4619      	mov	r1, r3
 8019c7a:	f001 fcbd 	bl	801b5f8 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8019c7e:	4b27      	ldr	r3, [pc, #156]	; (8019d1c <dhcp_select+0x1e8>)
 8019c80:	6818      	ldr	r0, [r3, #0]
 8019c82:	4b27      	ldr	r3, [pc, #156]	; (8019d20 <dhcp_select+0x1ec>)
 8019c84:	9301      	str	r3, [sp, #4]
 8019c86:	687b      	ldr	r3, [r7, #4]
 8019c88:	9300      	str	r3, [sp, #0]
 8019c8a:	2343      	movs	r3, #67	; 0x43
 8019c8c:	4a25      	ldr	r2, [pc, #148]	; (8019d24 <dhcp_select+0x1f0>)
 8019c8e:	6979      	ldr	r1, [r7, #20]
 8019c90:	f00b fd98 	bl	80257c4 <udp_sendto_if_src>
 8019c94:	4603      	mov	r3, r0
 8019c96:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8019c98:	6978      	ldr	r0, [r7, #20]
 8019c9a:	f005 f945 	bl	801ef28 <pbuf_free>
 8019c9e:	e001      	b.n	8019ca4 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8019ca0:	23ff      	movs	r3, #255	; 0xff
 8019ca2:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8019ca4:	69bb      	ldr	r3, [r7, #24]
 8019ca6:	799b      	ldrb	r3, [r3, #6]
 8019ca8:	2bff      	cmp	r3, #255	; 0xff
 8019caa:	d005      	beq.n	8019cb8 <dhcp_select+0x184>
    dhcp->tries++;
 8019cac:	69bb      	ldr	r3, [r7, #24]
 8019cae:	799b      	ldrb	r3, [r3, #6]
 8019cb0:	3301      	adds	r3, #1
 8019cb2:	b2da      	uxtb	r2, r3
 8019cb4:	69bb      	ldr	r3, [r7, #24]
 8019cb6:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8019cb8:	69bb      	ldr	r3, [r7, #24]
 8019cba:	799b      	ldrb	r3, [r3, #6]
 8019cbc:	2b05      	cmp	r3, #5
 8019cbe:	d80d      	bhi.n	8019cdc <dhcp_select+0x1a8>
 8019cc0:	69bb      	ldr	r3, [r7, #24]
 8019cc2:	799b      	ldrb	r3, [r3, #6]
 8019cc4:	461a      	mov	r2, r3
 8019cc6:	2301      	movs	r3, #1
 8019cc8:	4093      	lsls	r3, r2
 8019cca:	b29b      	uxth	r3, r3
 8019ccc:	461a      	mov	r2, r3
 8019cce:	0152      	lsls	r2, r2, #5
 8019cd0:	1ad2      	subs	r2, r2, r3
 8019cd2:	0092      	lsls	r2, r2, #2
 8019cd4:	4413      	add	r3, r2
 8019cd6:	00db      	lsls	r3, r3, #3
 8019cd8:	b29b      	uxth	r3, r3
 8019cda:	e001      	b.n	8019ce0 <dhcp_select+0x1ac>
 8019cdc:	f64e 2360 	movw	r3, #60000	; 0xea60
 8019ce0:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8019ce2:	89fb      	ldrh	r3, [r7, #14]
 8019ce4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8019ce8:	4a0f      	ldr	r2, [pc, #60]	; (8019d28 <dhcp_select+0x1f4>)
 8019cea:	fb82 1203 	smull	r1, r2, r2, r3
 8019cee:	1152      	asrs	r2, r2, #5
 8019cf0:	17db      	asrs	r3, r3, #31
 8019cf2:	1ad3      	subs	r3, r2, r3
 8019cf4:	b29a      	uxth	r2, r3
 8019cf6:	69bb      	ldr	r3, [r7, #24]
 8019cf8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8019cfa:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8019cfe:	4618      	mov	r0, r3
 8019d00:	3720      	adds	r7, #32
 8019d02:	46bd      	mov	sp, r7
 8019d04:	bdb0      	pop	{r4, r5, r7, pc}
 8019d06:	bf00      	nop
 8019d08:	08027c60 	.word	0x08027c60
 8019d0c:	08027d0c 	.word	0x08027d0c
 8019d10:	08027cc0 	.word	0x08027cc0
 8019d14:	08027d28 	.word	0x08027d28
 8019d18:	20000010 	.word	0x20000010
 8019d1c:	2001956c 	.word	0x2001956c
 8019d20:	0802b720 	.word	0x0802b720
 8019d24:	0802b724 	.word	0x0802b724
 8019d28:	10624dd3 	.word	0x10624dd3

08019d2c <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8019d2c:	b580      	push	{r7, lr}
 8019d2e:	b082      	sub	sp, #8
 8019d30:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 8019d32:	4b27      	ldr	r3, [pc, #156]	; (8019dd0 <dhcp_coarse_tmr+0xa4>)
 8019d34:	681b      	ldr	r3, [r3, #0]
 8019d36:	607b      	str	r3, [r7, #4]
 8019d38:	e042      	b.n	8019dc0 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8019d3a:	687b      	ldr	r3, [r7, #4]
 8019d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019d3e:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8019d40:	683b      	ldr	r3, [r7, #0]
 8019d42:	2b00      	cmp	r3, #0
 8019d44:	d039      	beq.n	8019dba <dhcp_coarse_tmr+0x8e>
 8019d46:	683b      	ldr	r3, [r7, #0]
 8019d48:	795b      	ldrb	r3, [r3, #5]
 8019d4a:	2b00      	cmp	r3, #0
 8019d4c:	d035      	beq.n	8019dba <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8019d4e:	683b      	ldr	r3, [r7, #0]
 8019d50:	8a9b      	ldrh	r3, [r3, #20]
 8019d52:	2b00      	cmp	r3, #0
 8019d54:	d012      	beq.n	8019d7c <dhcp_coarse_tmr+0x50>
 8019d56:	683b      	ldr	r3, [r7, #0]
 8019d58:	8a5b      	ldrh	r3, [r3, #18]
 8019d5a:	3301      	adds	r3, #1
 8019d5c:	b29a      	uxth	r2, r3
 8019d5e:	683b      	ldr	r3, [r7, #0]
 8019d60:	825a      	strh	r2, [r3, #18]
 8019d62:	683b      	ldr	r3, [r7, #0]
 8019d64:	8a5a      	ldrh	r2, [r3, #18]
 8019d66:	683b      	ldr	r3, [r7, #0]
 8019d68:	8a9b      	ldrh	r3, [r3, #20]
 8019d6a:	429a      	cmp	r2, r3
 8019d6c:	d106      	bne.n	8019d7c <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 8019d6e:	6878      	ldr	r0, [r7, #4]
 8019d70:	f000 fe18 	bl	801a9a4 <dhcp_release_and_stop>
        dhcp_start(netif);
 8019d74:	6878      	ldr	r0, [r7, #4]
 8019d76:	f000 f98b 	bl	801a090 <dhcp_start>
 8019d7a:	e01e      	b.n	8019dba <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8019d7c:	683b      	ldr	r3, [r7, #0]
 8019d7e:	8a1b      	ldrh	r3, [r3, #16]
 8019d80:	2b00      	cmp	r3, #0
 8019d82:	d00b      	beq.n	8019d9c <dhcp_coarse_tmr+0x70>
 8019d84:	683b      	ldr	r3, [r7, #0]
 8019d86:	8a1b      	ldrh	r3, [r3, #16]
 8019d88:	1e5a      	subs	r2, r3, #1
 8019d8a:	b291      	uxth	r1, r2
 8019d8c:	683a      	ldr	r2, [r7, #0]
 8019d8e:	8211      	strh	r1, [r2, #16]
 8019d90:	2b01      	cmp	r3, #1
 8019d92:	d103      	bne.n	8019d9c <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8019d94:	6878      	ldr	r0, [r7, #4]
 8019d96:	f000 f8c7 	bl	8019f28 <dhcp_t2_timeout>
 8019d9a:	e00e      	b.n	8019dba <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8019d9c:	683b      	ldr	r3, [r7, #0]
 8019d9e:	89db      	ldrh	r3, [r3, #14]
 8019da0:	2b00      	cmp	r3, #0
 8019da2:	d00a      	beq.n	8019dba <dhcp_coarse_tmr+0x8e>
 8019da4:	683b      	ldr	r3, [r7, #0]
 8019da6:	89db      	ldrh	r3, [r3, #14]
 8019da8:	1e5a      	subs	r2, r3, #1
 8019daa:	b291      	uxth	r1, r2
 8019dac:	683a      	ldr	r2, [r7, #0]
 8019dae:	81d1      	strh	r1, [r2, #14]
 8019db0:	2b01      	cmp	r3, #1
 8019db2:	d102      	bne.n	8019dba <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8019db4:	6878      	ldr	r0, [r7, #4]
 8019db6:	f000 f888 	bl	8019eca <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 8019dba:	687b      	ldr	r3, [r7, #4]
 8019dbc:	681b      	ldr	r3, [r3, #0]
 8019dbe:	607b      	str	r3, [r7, #4]
 8019dc0:	687b      	ldr	r3, [r7, #4]
 8019dc2:	2b00      	cmp	r3, #0
 8019dc4:	d1b9      	bne.n	8019d3a <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 8019dc6:	bf00      	nop
 8019dc8:	3708      	adds	r7, #8
 8019dca:	46bd      	mov	sp, r7
 8019dcc:	bd80      	pop	{r7, pc}
 8019dce:	bf00      	nop
 8019dd0:	20022aa8 	.word	0x20022aa8

08019dd4 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8019dd4:	b580      	push	{r7, lr}
 8019dd6:	b082      	sub	sp, #8
 8019dd8:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 8019dda:	4b16      	ldr	r3, [pc, #88]	; (8019e34 <dhcp_fine_tmr+0x60>)
 8019ddc:	681b      	ldr	r3, [r3, #0]
 8019dde:	607b      	str	r3, [r7, #4]
 8019de0:	e020      	b.n	8019e24 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8019de2:	687b      	ldr	r3, [r7, #4]
 8019de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019de6:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8019de8:	683b      	ldr	r3, [r7, #0]
 8019dea:	2b00      	cmp	r3, #0
 8019dec:	d017      	beq.n	8019e1e <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 8019dee:	683b      	ldr	r3, [r7, #0]
 8019df0:	891b      	ldrh	r3, [r3, #8]
 8019df2:	2b01      	cmp	r3, #1
 8019df4:	d906      	bls.n	8019e04 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 8019df6:	683b      	ldr	r3, [r7, #0]
 8019df8:	891b      	ldrh	r3, [r3, #8]
 8019dfa:	3b01      	subs	r3, #1
 8019dfc:	b29a      	uxth	r2, r3
 8019dfe:	683b      	ldr	r3, [r7, #0]
 8019e00:	811a      	strh	r2, [r3, #8]
 8019e02:	e00c      	b.n	8019e1e <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8019e04:	683b      	ldr	r3, [r7, #0]
 8019e06:	891b      	ldrh	r3, [r3, #8]
 8019e08:	2b01      	cmp	r3, #1
 8019e0a:	d108      	bne.n	8019e1e <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8019e0c:	683b      	ldr	r3, [r7, #0]
 8019e0e:	891b      	ldrh	r3, [r3, #8]
 8019e10:	3b01      	subs	r3, #1
 8019e12:	b29a      	uxth	r2, r3
 8019e14:	683b      	ldr	r3, [r7, #0]
 8019e16:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8019e18:	6878      	ldr	r0, [r7, #4]
 8019e1a:	f000 f80d 	bl	8019e38 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 8019e1e:	687b      	ldr	r3, [r7, #4]
 8019e20:	681b      	ldr	r3, [r3, #0]
 8019e22:	607b      	str	r3, [r7, #4]
 8019e24:	687b      	ldr	r3, [r7, #4]
 8019e26:	2b00      	cmp	r3, #0
 8019e28:	d1db      	bne.n	8019de2 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 8019e2a:	bf00      	nop
 8019e2c:	3708      	adds	r7, #8
 8019e2e:	46bd      	mov	sp, r7
 8019e30:	bd80      	pop	{r7, pc}
 8019e32:	bf00      	nop
 8019e34:	20022aa8 	.word	0x20022aa8

08019e38 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8019e38:	b580      	push	{r7, lr}
 8019e3a:	b084      	sub	sp, #16
 8019e3c:	af00      	add	r7, sp, #0
 8019e3e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8019e40:	687b      	ldr	r3, [r7, #4]
 8019e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019e44:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8019e46:	68fb      	ldr	r3, [r7, #12]
 8019e48:	795b      	ldrb	r3, [r3, #5]
 8019e4a:	2b0c      	cmp	r3, #12
 8019e4c:	d003      	beq.n	8019e56 <dhcp_timeout+0x1e>
 8019e4e:	68fb      	ldr	r3, [r7, #12]
 8019e50:	795b      	ldrb	r3, [r3, #5]
 8019e52:	2b06      	cmp	r3, #6
 8019e54:	d103      	bne.n	8019e5e <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 8019e56:	6878      	ldr	r0, [r7, #4]
 8019e58:	f000 fa3a 	bl	801a2d0 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8019e5c:	e031      	b.n	8019ec2 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8019e5e:	68fb      	ldr	r3, [r7, #12]
 8019e60:	795b      	ldrb	r3, [r3, #5]
 8019e62:	2b01      	cmp	r3, #1
 8019e64:	d10e      	bne.n	8019e84 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 8019e66:	68fb      	ldr	r3, [r7, #12]
 8019e68:	799b      	ldrb	r3, [r3, #6]
 8019e6a:	2b05      	cmp	r3, #5
 8019e6c:	d803      	bhi.n	8019e76 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 8019e6e:	6878      	ldr	r0, [r7, #4]
 8019e70:	f7ff fe60 	bl	8019b34 <dhcp_select>
}
 8019e74:	e025      	b.n	8019ec2 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 8019e76:	6878      	ldr	r0, [r7, #4]
 8019e78:	f000 fd94 	bl	801a9a4 <dhcp_release_and_stop>
      dhcp_start(netif);
 8019e7c:	6878      	ldr	r0, [r7, #4]
 8019e7e:	f000 f907 	bl	801a090 <dhcp_start>
}
 8019e82:	e01e      	b.n	8019ec2 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8019e84:	68fb      	ldr	r3, [r7, #12]
 8019e86:	795b      	ldrb	r3, [r3, #5]
 8019e88:	2b08      	cmp	r3, #8
 8019e8a:	d10b      	bne.n	8019ea4 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8019e8c:	68fb      	ldr	r3, [r7, #12]
 8019e8e:	799b      	ldrb	r3, [r3, #6]
 8019e90:	2b01      	cmp	r3, #1
 8019e92:	d803      	bhi.n	8019e9c <dhcp_timeout+0x64>
      dhcp_check(netif);
 8019e94:	6878      	ldr	r0, [r7, #4]
 8019e96:	f7ff fdf3 	bl	8019a80 <dhcp_check>
}
 8019e9a:	e012      	b.n	8019ec2 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8019e9c:	6878      	ldr	r0, [r7, #4]
 8019e9e:	f000 fab9 	bl	801a414 <dhcp_bind>
}
 8019ea2:	e00e      	b.n	8019ec2 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8019ea4:	68fb      	ldr	r3, [r7, #12]
 8019ea6:	795b      	ldrb	r3, [r3, #5]
 8019ea8:	2b03      	cmp	r3, #3
 8019eaa:	d10a      	bne.n	8019ec2 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8019eac:	68fb      	ldr	r3, [r7, #12]
 8019eae:	799b      	ldrb	r3, [r3, #6]
 8019eb0:	2b01      	cmp	r3, #1
 8019eb2:	d803      	bhi.n	8019ebc <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8019eb4:	6878      	ldr	r0, [r7, #4]
 8019eb6:	f000 fcbf 	bl	801a838 <dhcp_reboot>
}
 8019eba:	e002      	b.n	8019ec2 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8019ebc:	6878      	ldr	r0, [r7, #4]
 8019ebe:	f000 fa07 	bl	801a2d0 <dhcp_discover>
}
 8019ec2:	bf00      	nop
 8019ec4:	3710      	adds	r7, #16
 8019ec6:	46bd      	mov	sp, r7
 8019ec8:	bd80      	pop	{r7, pc}

08019eca <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 8019eca:	b580      	push	{r7, lr}
 8019ecc:	b084      	sub	sp, #16
 8019ece:	af00      	add	r7, sp, #0
 8019ed0:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8019ed2:	687b      	ldr	r3, [r7, #4]
 8019ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019ed6:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8019ed8:	68fb      	ldr	r3, [r7, #12]
 8019eda:	795b      	ldrb	r3, [r3, #5]
 8019edc:	2b01      	cmp	r3, #1
 8019ede:	d007      	beq.n	8019ef0 <dhcp_t1_timeout+0x26>
 8019ee0:	68fb      	ldr	r3, [r7, #12]
 8019ee2:	795b      	ldrb	r3, [r3, #5]
 8019ee4:	2b0a      	cmp	r3, #10
 8019ee6:	d003      	beq.n	8019ef0 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8019ee8:	68fb      	ldr	r3, [r7, #12]
 8019eea:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8019eec:	2b05      	cmp	r3, #5
 8019eee:	d117      	bne.n	8019f20 <dhcp_t1_timeout+0x56>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8019ef0:	6878      	ldr	r0, [r7, #4]
 8019ef2:	f000 fb69 	bl	801a5c8 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8019ef6:	68fb      	ldr	r3, [r7, #12]
 8019ef8:	899b      	ldrh	r3, [r3, #12]
 8019efa:	461a      	mov	r2, r3
 8019efc:	68fb      	ldr	r3, [r7, #12]
 8019efe:	8a5b      	ldrh	r3, [r3, #18]
 8019f00:	1ad3      	subs	r3, r2, r3
 8019f02:	2b01      	cmp	r3, #1
 8019f04:	dd0c      	ble.n	8019f20 <dhcp_t1_timeout+0x56>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8019f06:	68fb      	ldr	r3, [r7, #12]
 8019f08:	899b      	ldrh	r3, [r3, #12]
 8019f0a:	461a      	mov	r2, r3
 8019f0c:	68fb      	ldr	r3, [r7, #12]
 8019f0e:	8a5b      	ldrh	r3, [r3, #18]
 8019f10:	1ad3      	subs	r3, r2, r3
 8019f12:	2b00      	cmp	r3, #0
 8019f14:	da00      	bge.n	8019f18 <dhcp_t1_timeout+0x4e>
 8019f16:	3301      	adds	r3, #1
 8019f18:	105b      	asrs	r3, r3, #1
 8019f1a:	b29a      	uxth	r2, r3
 8019f1c:	68fb      	ldr	r3, [r7, #12]
 8019f1e:	81da      	strh	r2, [r3, #14]
    }
  }
}
 8019f20:	bf00      	nop
 8019f22:	3710      	adds	r7, #16
 8019f24:	46bd      	mov	sp, r7
 8019f26:	bd80      	pop	{r7, pc}

08019f28 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8019f28:	b580      	push	{r7, lr}
 8019f2a:	b084      	sub	sp, #16
 8019f2c:	af00      	add	r7, sp, #0
 8019f2e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8019f30:	687b      	ldr	r3, [r7, #4]
 8019f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019f34:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8019f36:	68fb      	ldr	r3, [r7, #12]
 8019f38:	795b      	ldrb	r3, [r3, #5]
 8019f3a:	2b01      	cmp	r3, #1
 8019f3c:	d00b      	beq.n	8019f56 <dhcp_t2_timeout+0x2e>
 8019f3e:	68fb      	ldr	r3, [r7, #12]
 8019f40:	795b      	ldrb	r3, [r3, #5]
 8019f42:	2b0a      	cmp	r3, #10
 8019f44:	d007      	beq.n	8019f56 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8019f46:	68fb      	ldr	r3, [r7, #12]
 8019f48:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8019f4a:	2b05      	cmp	r3, #5
 8019f4c:	d003      	beq.n	8019f56 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8019f4e:	68fb      	ldr	r3, [r7, #12]
 8019f50:	795b      	ldrb	r3, [r3, #5]
 8019f52:	2b04      	cmp	r3, #4
 8019f54:	d117      	bne.n	8019f86 <dhcp_t2_timeout+0x5e>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8019f56:	6878      	ldr	r0, [r7, #4]
 8019f58:	f000 fbd2 	bl	801a700 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8019f5c:	68fb      	ldr	r3, [r7, #12]
 8019f5e:	8a9b      	ldrh	r3, [r3, #20]
 8019f60:	461a      	mov	r2, r3
 8019f62:	68fb      	ldr	r3, [r7, #12]
 8019f64:	8a5b      	ldrh	r3, [r3, #18]
 8019f66:	1ad3      	subs	r3, r2, r3
 8019f68:	2b01      	cmp	r3, #1
 8019f6a:	dd0c      	ble.n	8019f86 <dhcp_t2_timeout+0x5e>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8019f6c:	68fb      	ldr	r3, [r7, #12]
 8019f6e:	8a9b      	ldrh	r3, [r3, #20]
 8019f70:	461a      	mov	r2, r3
 8019f72:	68fb      	ldr	r3, [r7, #12]
 8019f74:	8a5b      	ldrh	r3, [r3, #18]
 8019f76:	1ad3      	subs	r3, r2, r3
 8019f78:	2b00      	cmp	r3, #0
 8019f7a:	da00      	bge.n	8019f7e <dhcp_t2_timeout+0x56>
 8019f7c:	3301      	adds	r3, #1
 8019f7e:	105b      	asrs	r3, r3, #1
 8019f80:	b29a      	uxth	r2, r3
 8019f82:	68fb      	ldr	r3, [r7, #12]
 8019f84:	821a      	strh	r2, [r3, #16]
    }
  }
}
 8019f86:	bf00      	nop
 8019f88:	3710      	adds	r7, #16
 8019f8a:	46bd      	mov	sp, r7
 8019f8c:	bd80      	pop	{r7, pc}
	...

08019f90 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 8019f90:	b580      	push	{r7, lr}
 8019f92:	b086      	sub	sp, #24
 8019f94:	af00      	add	r7, sp, #0
 8019f96:	6078      	str	r0, [r7, #4]
 8019f98:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8019f9a:	687b      	ldr	r3, [r7, #4]
 8019f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019f9e:	613b      	str	r3, [r7, #16]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8019fa0:	693b      	ldr	r3, [r7, #16]
 8019fa2:	2200      	movs	r2, #0
 8019fa4:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8019fa6:	693b      	ldr	r3, [r7, #16]
 8019fa8:	2200      	movs	r2, #0
 8019faa:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8019fac:	4b36      	ldr	r3, [pc, #216]	; (801a088 <dhcp_handle_ack+0xf8>)
 8019fae:	78db      	ldrb	r3, [r3, #3]
 8019fb0:	2b00      	cmp	r3, #0
 8019fb2:	d003      	beq.n	8019fbc <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8019fb4:	4b35      	ldr	r3, [pc, #212]	; (801a08c <dhcp_handle_ack+0xfc>)
 8019fb6:	68da      	ldr	r2, [r3, #12]
 8019fb8:	693b      	ldr	r3, [r7, #16]
 8019fba:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8019fbc:	4b32      	ldr	r3, [pc, #200]	; (801a088 <dhcp_handle_ack+0xf8>)
 8019fbe:	791b      	ldrb	r3, [r3, #4]
 8019fc0:	2b00      	cmp	r3, #0
 8019fc2:	d004      	beq.n	8019fce <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8019fc4:	4b31      	ldr	r3, [pc, #196]	; (801a08c <dhcp_handle_ack+0xfc>)
 8019fc6:	691a      	ldr	r2, [r3, #16]
 8019fc8:	693b      	ldr	r3, [r7, #16]
 8019fca:	62da      	str	r2, [r3, #44]	; 0x2c
 8019fcc:	e004      	b.n	8019fd8 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8019fce:	693b      	ldr	r3, [r7, #16]
 8019fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019fd2:	085a      	lsrs	r2, r3, #1
 8019fd4:	693b      	ldr	r3, [r7, #16]
 8019fd6:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8019fd8:	4b2b      	ldr	r3, [pc, #172]	; (801a088 <dhcp_handle_ack+0xf8>)
 8019fda:	795b      	ldrb	r3, [r3, #5]
 8019fdc:	2b00      	cmp	r3, #0
 8019fde:	d004      	beq.n	8019fea <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8019fe0:	4b2a      	ldr	r3, [pc, #168]	; (801a08c <dhcp_handle_ack+0xfc>)
 8019fe2:	695a      	ldr	r2, [r3, #20]
 8019fe4:	693b      	ldr	r3, [r7, #16]
 8019fe6:	631a      	str	r2, [r3, #48]	; 0x30
 8019fe8:	e007      	b.n	8019ffa <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8019fea:	693b      	ldr	r3, [r7, #16]
 8019fec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8019fee:	4613      	mov	r3, r2
 8019ff0:	00db      	lsls	r3, r3, #3
 8019ff2:	1a9b      	subs	r3, r3, r2
 8019ff4:	08da      	lsrs	r2, r3, #3
 8019ff6:	693b      	ldr	r3, [r7, #16]
 8019ff8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8019ffa:	683b      	ldr	r3, [r7, #0]
 8019ffc:	691a      	ldr	r2, [r3, #16]
 8019ffe:	693b      	ldr	r3, [r7, #16]
 801a000:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 801a002:	4b21      	ldr	r3, [pc, #132]	; (801a088 <dhcp_handle_ack+0xf8>)
 801a004:	799b      	ldrb	r3, [r3, #6]
 801a006:	2b00      	cmp	r3, #0
 801a008:	d00b      	beq.n	801a022 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 801a00a:	4b20      	ldr	r3, [pc, #128]	; (801a08c <dhcp_handle_ack+0xfc>)
 801a00c:	699b      	ldr	r3, [r3, #24]
 801a00e:	4618      	mov	r0, r3
 801a010:	f7ff f89f 	bl	8019152 <lwip_htonl>
 801a014:	4602      	mov	r2, r0
 801a016:	693b      	ldr	r3, [r7, #16]
 801a018:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 801a01a:	693b      	ldr	r3, [r7, #16]
 801a01c:	2201      	movs	r2, #1
 801a01e:	71da      	strb	r2, [r3, #7]
 801a020:	e002      	b.n	801a028 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 801a022:	693b      	ldr	r3, [r7, #16]
 801a024:	2200      	movs	r2, #0
 801a026:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 801a028:	4b17      	ldr	r3, [pc, #92]	; (801a088 <dhcp_handle_ack+0xf8>)
 801a02a:	79db      	ldrb	r3, [r3, #7]
 801a02c:	2b00      	cmp	r3, #0
 801a02e:	d007      	beq.n	801a040 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 801a030:	4b16      	ldr	r3, [pc, #88]	; (801a08c <dhcp_handle_ack+0xfc>)
 801a032:	69db      	ldr	r3, [r3, #28]
 801a034:	4618      	mov	r0, r3
 801a036:	f7ff f88c 	bl	8019152 <lwip_htonl>
 801a03a:	4602      	mov	r2, r0
 801a03c:	693b      	ldr	r3, [r7, #16]
 801a03e:	625a      	str	r2, [r3, #36]	; 0x24
  dhcp_set_ntp_servers(n, ntp_server_addrs);
#endif /* LWIP_DHCP_GET_NTP_SRV */

#if LWIP_DHCP_PROVIDE_DNS_SERVERS
  /* DNS servers */
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 801a040:	2300      	movs	r3, #0
 801a042:	75fb      	strb	r3, [r7, #23]
 801a044:	e013      	b.n	801a06e <dhcp_handle_ack+0xde>
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 801a046:	7dfb      	ldrb	r3, [r7, #23]
 801a048:	3308      	adds	r3, #8
 801a04a:	4a10      	ldr	r2, [pc, #64]	; (801a08c <dhcp_handle_ack+0xfc>)
 801a04c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801a050:	4618      	mov	r0, r3
 801a052:	f7ff f87e 	bl	8019152 <lwip_htonl>
 801a056:	4603      	mov	r3, r0
 801a058:	60fb      	str	r3, [r7, #12]
    dns_setserver(n, &dns_addr);
 801a05a:	f107 020c 	add.w	r2, r7, #12
 801a05e:	7dfb      	ldrb	r3, [r7, #23]
 801a060:	4611      	mov	r1, r2
 801a062:	4618      	mov	r0, r3
 801a064:	f7ff f8cc 	bl	8019200 <dns_setserver>
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 801a068:	7dfb      	ldrb	r3, [r7, #23]
 801a06a:	3301      	adds	r3, #1
 801a06c:	75fb      	strb	r3, [r7, #23]
 801a06e:	7dfb      	ldrb	r3, [r7, #23]
 801a070:	2b01      	cmp	r3, #1
 801a072:	d805      	bhi.n	801a080 <dhcp_handle_ack+0xf0>
 801a074:	7dfb      	ldrb	r3, [r7, #23]
 801a076:	3308      	adds	r3, #8
 801a078:	4a03      	ldr	r2, [pc, #12]	; (801a088 <dhcp_handle_ack+0xf8>)
 801a07a:	5cd3      	ldrb	r3, [r2, r3]
 801a07c:	2b00      	cmp	r3, #0
 801a07e:	d1e2      	bne.n	801a046 <dhcp_handle_ack+0xb6>
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 801a080:	bf00      	nop
 801a082:	3718      	adds	r7, #24
 801a084:	46bd      	mov	sp, r7
 801a086:	bd80      	pop	{r7, pc}
 801a088:	2001ca14 	.word	0x2001ca14
 801a08c:	2001ca20 	.word	0x2001ca20

0801a090 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 801a090:	b580      	push	{r7, lr}
 801a092:	b084      	sub	sp, #16
 801a094:	af00      	add	r7, sp, #0
 801a096:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 801a098:	687b      	ldr	r3, [r7, #4]
 801a09a:	2b00      	cmp	r3, #0
 801a09c:	d109      	bne.n	801a0b2 <dhcp_start+0x22>
 801a09e:	4b37      	ldr	r3, [pc, #220]	; (801a17c <dhcp_start+0xec>)
 801a0a0:	f240 22e7 	movw	r2, #743	; 0x2e7
 801a0a4:	4936      	ldr	r1, [pc, #216]	; (801a180 <dhcp_start+0xf0>)
 801a0a6:	4837      	ldr	r0, [pc, #220]	; (801a184 <dhcp_start+0xf4>)
 801a0a8:	f00c f942 	bl	8026330 <iprintf>
 801a0ac:	f06f 030f 	mvn.w	r3, #15
 801a0b0:	e060      	b.n	801a174 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 801a0b2:	687b      	ldr	r3, [r7, #4]
 801a0b4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801a0b8:	f003 0301 	and.w	r3, r3, #1
 801a0bc:	2b00      	cmp	r3, #0
 801a0be:	d109      	bne.n	801a0d4 <dhcp_start+0x44>
 801a0c0:	4b2e      	ldr	r3, [pc, #184]	; (801a17c <dhcp_start+0xec>)
 801a0c2:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 801a0c6:	4930      	ldr	r1, [pc, #192]	; (801a188 <dhcp_start+0xf8>)
 801a0c8:	482e      	ldr	r0, [pc, #184]	; (801a184 <dhcp_start+0xf4>)
 801a0ca:	f00c f931 	bl	8026330 <iprintf>
 801a0ce:	f06f 030f 	mvn.w	r3, #15
 801a0d2:	e04f      	b.n	801a174 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 801a0d4:	687b      	ldr	r3, [r7, #4]
 801a0d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a0d8:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 801a0da:	687b      	ldr	r3, [r7, #4]
 801a0dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a0de:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 801a0e2:	d202      	bcs.n	801a0ea <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 801a0e4:	f04f 33ff 	mov.w	r3, #4294967295
 801a0e8:	e044      	b.n	801a174 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 801a0ea:	68fb      	ldr	r3, [r7, #12]
 801a0ec:	2b00      	cmp	r3, #0
 801a0ee:	d10d      	bne.n	801a10c <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 801a0f0:	2034      	movs	r0, #52	; 0x34
 801a0f2:	f003 ff9d 	bl	801e030 <mem_malloc>
 801a0f6:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 801a0f8:	68fb      	ldr	r3, [r7, #12]
 801a0fa:	2b00      	cmp	r3, #0
 801a0fc:	d102      	bne.n	801a104 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 801a0fe:	f04f 33ff 	mov.w	r3, #4294967295
 801a102:	e037      	b.n	801a174 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 801a104:	687b      	ldr	r3, [r7, #4]
 801a106:	68fa      	ldr	r2, [r7, #12]
 801a108:	625a      	str	r2, [r3, #36]	; 0x24
 801a10a:	e005      	b.n	801a118 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 801a10c:	68fb      	ldr	r3, [r7, #12]
 801a10e:	791b      	ldrb	r3, [r3, #4]
 801a110:	2b00      	cmp	r3, #0
 801a112:	d001      	beq.n	801a118 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 801a114:	f7ff fc70 	bl	80199f8 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 801a118:	2234      	movs	r2, #52	; 0x34
 801a11a:	2100      	movs	r1, #0
 801a11c:	68f8      	ldr	r0, [r7, #12]
 801a11e:	f00c f853 	bl	80261c8 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 801a122:	f7ff fc17 	bl	8019954 <dhcp_inc_pcb_refcount>
 801a126:	4603      	mov	r3, r0
 801a128:	2b00      	cmp	r3, #0
 801a12a:	d002      	beq.n	801a132 <dhcp_start+0xa2>
    return ERR_MEM;
 801a12c:	f04f 33ff 	mov.w	r3, #4294967295
 801a130:	e020      	b.n	801a174 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 801a132:	68fb      	ldr	r3, [r7, #12]
 801a134:	2201      	movs	r2, #1
 801a136:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 801a138:	687b      	ldr	r3, [r7, #4]
 801a13a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801a13e:	f003 0304 	and.w	r3, r3, #4
 801a142:	2b00      	cmp	r3, #0
 801a144:	d105      	bne.n	801a152 <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 801a146:	2102      	movs	r1, #2
 801a148:	68f8      	ldr	r0, [r7, #12]
 801a14a:	f000 fcc5 	bl	801aad8 <dhcp_set_state>
    return ERR_OK;
 801a14e:	2300      	movs	r3, #0
 801a150:	e010      	b.n	801a174 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 801a152:	6878      	ldr	r0, [r7, #4]
 801a154:	f000 f8bc 	bl	801a2d0 <dhcp_discover>
 801a158:	4603      	mov	r3, r0
 801a15a:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 801a15c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801a160:	2b00      	cmp	r3, #0
 801a162:	d005      	beq.n	801a170 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 801a164:	6878      	ldr	r0, [r7, #4]
 801a166:	f000 fc1d 	bl	801a9a4 <dhcp_release_and_stop>
    return ERR_MEM;
 801a16a:	f04f 33ff 	mov.w	r3, #4294967295
 801a16e:	e001      	b.n	801a174 <dhcp_start+0xe4>
  }
  return result;
 801a170:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801a174:	4618      	mov	r0, r3
 801a176:	3710      	adds	r7, #16
 801a178:	46bd      	mov	sp, r7
 801a17a:	bd80      	pop	{r7, pc}
 801a17c:	08027c60 	.word	0x08027c60
 801a180:	08027d44 	.word	0x08027d44
 801a184:	08027cc0 	.word	0x08027cc0
 801a188:	08027d88 	.word	0x08027d88

0801a18c <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 801a18c:	b580      	push	{r7, lr}
 801a18e:	b084      	sub	sp, #16
 801a190:	af00      	add	r7, sp, #0
 801a192:	6078      	str	r0, [r7, #4]
 801a194:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801a196:	687b      	ldr	r3, [r7, #4]
 801a198:	2b00      	cmp	r3, #0
 801a19a:	d107      	bne.n	801a1ac <dhcp_arp_reply+0x20>
 801a19c:	4b0e      	ldr	r3, [pc, #56]	; (801a1d8 <dhcp_arp_reply+0x4c>)
 801a19e:	f240 328b 	movw	r2, #907	; 0x38b
 801a1a2:	490e      	ldr	r1, [pc, #56]	; (801a1dc <dhcp_arp_reply+0x50>)
 801a1a4:	480e      	ldr	r0, [pc, #56]	; (801a1e0 <dhcp_arp_reply+0x54>)
 801a1a6:	f00c f8c3 	bl	8026330 <iprintf>
 801a1aa:	e012      	b.n	801a1d2 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 801a1ac:	687b      	ldr	r3, [r7, #4]
 801a1ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a1b0:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 801a1b2:	68fb      	ldr	r3, [r7, #12]
 801a1b4:	2b00      	cmp	r3, #0
 801a1b6:	d00c      	beq.n	801a1d2 <dhcp_arp_reply+0x46>
 801a1b8:	68fb      	ldr	r3, [r7, #12]
 801a1ba:	795b      	ldrb	r3, [r3, #5]
 801a1bc:	2b08      	cmp	r3, #8
 801a1be:	d108      	bne.n	801a1d2 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 801a1c0:	683b      	ldr	r3, [r7, #0]
 801a1c2:	681a      	ldr	r2, [r3, #0]
 801a1c4:	68fb      	ldr	r3, [r7, #12]
 801a1c6:	69db      	ldr	r3, [r3, #28]
 801a1c8:	429a      	cmp	r2, r3
 801a1ca:	d102      	bne.n	801a1d2 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 801a1cc:	6878      	ldr	r0, [r7, #4]
 801a1ce:	f000 f809 	bl	801a1e4 <dhcp_decline>
    }
  }
}
 801a1d2:	3710      	adds	r7, #16
 801a1d4:	46bd      	mov	sp, r7
 801a1d6:	bd80      	pop	{r7, pc}
 801a1d8:	08027c60 	.word	0x08027c60
 801a1dc:	08027d44 	.word	0x08027d44
 801a1e0:	08027cc0 	.word	0x08027cc0

0801a1e4 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 801a1e4:	b5b0      	push	{r4, r5, r7, lr}
 801a1e6:	b08a      	sub	sp, #40	; 0x28
 801a1e8:	af02      	add	r7, sp, #8
 801a1ea:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801a1ec:	687b      	ldr	r3, [r7, #4]
 801a1ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a1f0:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 801a1f2:	210c      	movs	r1, #12
 801a1f4:	69b8      	ldr	r0, [r7, #24]
 801a1f6:	f000 fc6f 	bl	801aad8 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 801a1fa:	f107 030c 	add.w	r3, r7, #12
 801a1fe:	2204      	movs	r2, #4
 801a200:	69b9      	ldr	r1, [r7, #24]
 801a202:	6878      	ldr	r0, [r7, #4]
 801a204:	f001 f922 	bl	801b44c <dhcp_create_msg>
 801a208:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801a20a:	697b      	ldr	r3, [r7, #20]
 801a20c:	2b00      	cmp	r3, #0
 801a20e:	d035      	beq.n	801a27c <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801a210:	697b      	ldr	r3, [r7, #20]
 801a212:	685b      	ldr	r3, [r3, #4]
 801a214:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801a216:	89b8      	ldrh	r0, [r7, #12]
 801a218:	693b      	ldr	r3, [r7, #16]
 801a21a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801a21e:	2304      	movs	r3, #4
 801a220:	2232      	movs	r2, #50	; 0x32
 801a222:	f000 fc73 	bl	801ab0c <dhcp_option>
 801a226:	4603      	mov	r3, r0
 801a228:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801a22a:	89bc      	ldrh	r4, [r7, #12]
 801a22c:	693b      	ldr	r3, [r7, #16]
 801a22e:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801a232:	69bb      	ldr	r3, [r7, #24]
 801a234:	69db      	ldr	r3, [r3, #28]
 801a236:	4618      	mov	r0, r3
 801a238:	f7fe ff8b 	bl	8019152 <lwip_htonl>
 801a23c:	4603      	mov	r3, r0
 801a23e:	461a      	mov	r2, r3
 801a240:	4629      	mov	r1, r5
 801a242:	4620      	mov	r0, r4
 801a244:	f000 fcee 	bl	801ac24 <dhcp_option_long>
 801a248:	4603      	mov	r3, r0
 801a24a:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801a24c:	89b8      	ldrh	r0, [r7, #12]
 801a24e:	693b      	ldr	r3, [r7, #16]
 801a250:	33f0      	adds	r3, #240	; 0xf0
 801a252:	697a      	ldr	r2, [r7, #20]
 801a254:	4619      	mov	r1, r3
 801a256:	f001 f9cf 	bl	801b5f8 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801a25a:	4b19      	ldr	r3, [pc, #100]	; (801a2c0 <dhcp_decline+0xdc>)
 801a25c:	6818      	ldr	r0, [r3, #0]
 801a25e:	4b19      	ldr	r3, [pc, #100]	; (801a2c4 <dhcp_decline+0xe0>)
 801a260:	9301      	str	r3, [sp, #4]
 801a262:	687b      	ldr	r3, [r7, #4]
 801a264:	9300      	str	r3, [sp, #0]
 801a266:	2343      	movs	r3, #67	; 0x43
 801a268:	4a17      	ldr	r2, [pc, #92]	; (801a2c8 <dhcp_decline+0xe4>)
 801a26a:	6979      	ldr	r1, [r7, #20]
 801a26c:	f00b faaa 	bl	80257c4 <udp_sendto_if_src>
 801a270:	4603      	mov	r3, r0
 801a272:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801a274:	6978      	ldr	r0, [r7, #20]
 801a276:	f004 fe57 	bl	801ef28 <pbuf_free>
 801a27a:	e001      	b.n	801a280 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801a27c:	23ff      	movs	r3, #255	; 0xff
 801a27e:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801a280:	69bb      	ldr	r3, [r7, #24]
 801a282:	799b      	ldrb	r3, [r3, #6]
 801a284:	2bff      	cmp	r3, #255	; 0xff
 801a286:	d005      	beq.n	801a294 <dhcp_decline+0xb0>
    dhcp->tries++;
 801a288:	69bb      	ldr	r3, [r7, #24]
 801a28a:	799b      	ldrb	r3, [r3, #6]
 801a28c:	3301      	adds	r3, #1
 801a28e:	b2da      	uxtb	r2, r3
 801a290:	69bb      	ldr	r3, [r7, #24]
 801a292:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 801a294:	f242 7310 	movw	r3, #10000	; 0x2710
 801a298:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801a29a:	89fb      	ldrh	r3, [r7, #14]
 801a29c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801a2a0:	4a0a      	ldr	r2, [pc, #40]	; (801a2cc <dhcp_decline+0xe8>)
 801a2a2:	fb82 1203 	smull	r1, r2, r2, r3
 801a2a6:	1152      	asrs	r2, r2, #5
 801a2a8:	17db      	asrs	r3, r3, #31
 801a2aa:	1ad3      	subs	r3, r2, r3
 801a2ac:	b29a      	uxth	r2, r3
 801a2ae:	69bb      	ldr	r3, [r7, #24]
 801a2b0:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801a2b2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801a2b6:	4618      	mov	r0, r3
 801a2b8:	3720      	adds	r7, #32
 801a2ba:	46bd      	mov	sp, r7
 801a2bc:	bdb0      	pop	{r4, r5, r7, pc}
 801a2be:	bf00      	nop
 801a2c0:	2001956c 	.word	0x2001956c
 801a2c4:	0802b720 	.word	0x0802b720
 801a2c8:	0802b724 	.word	0x0802b724
 801a2cc:	10624dd3 	.word	0x10624dd3

0801a2d0 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 801a2d0:	b580      	push	{r7, lr}
 801a2d2:	b08a      	sub	sp, #40	; 0x28
 801a2d4:	af02      	add	r7, sp, #8
 801a2d6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801a2d8:	687b      	ldr	r3, [r7, #4]
 801a2da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a2dc:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 801a2de:	2300      	movs	r3, #0
 801a2e0:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 801a2e2:	69bb      	ldr	r3, [r7, #24]
 801a2e4:	2200      	movs	r2, #0
 801a2e6:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 801a2e8:	2106      	movs	r1, #6
 801a2ea:	69b8      	ldr	r0, [r7, #24]
 801a2ec:	f000 fbf4 	bl	801aad8 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 801a2f0:	f107 0308 	add.w	r3, r7, #8
 801a2f4:	2201      	movs	r2, #1
 801a2f6:	69b9      	ldr	r1, [r7, #24]
 801a2f8:	6878      	ldr	r0, [r7, #4]
 801a2fa:	f001 f8a7 	bl	801b44c <dhcp_create_msg>
 801a2fe:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 801a300:	693b      	ldr	r3, [r7, #16]
 801a302:	2b00      	cmp	r3, #0
 801a304:	d04b      	beq.n	801a39e <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801a306:	693b      	ldr	r3, [r7, #16]
 801a308:	685b      	ldr	r3, [r3, #4]
 801a30a:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801a30c:	8938      	ldrh	r0, [r7, #8]
 801a30e:	68fb      	ldr	r3, [r7, #12]
 801a310:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801a314:	2302      	movs	r3, #2
 801a316:	2239      	movs	r2, #57	; 0x39
 801a318:	f000 fbf8 	bl	801ab0c <dhcp_option>
 801a31c:	4603      	mov	r3, r0
 801a31e:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801a320:	8938      	ldrh	r0, [r7, #8]
 801a322:	68fb      	ldr	r3, [r7, #12]
 801a324:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801a328:	687b      	ldr	r3, [r7, #4]
 801a32a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a32c:	461a      	mov	r2, r3
 801a32e:	f000 fc47 	bl	801abc0 <dhcp_option_short>
 801a332:	4603      	mov	r3, r0
 801a334:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801a336:	8938      	ldrh	r0, [r7, #8]
 801a338:	68fb      	ldr	r3, [r7, #12]
 801a33a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801a33e:	2304      	movs	r3, #4
 801a340:	2237      	movs	r2, #55	; 0x37
 801a342:	f000 fbe3 	bl	801ab0c <dhcp_option>
 801a346:	4603      	mov	r3, r0
 801a348:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801a34a:	2300      	movs	r3, #0
 801a34c:	77fb      	strb	r3, [r7, #31]
 801a34e:	e00e      	b.n	801a36e <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801a350:	8938      	ldrh	r0, [r7, #8]
 801a352:	68fb      	ldr	r3, [r7, #12]
 801a354:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801a358:	7ffb      	ldrb	r3, [r7, #31]
 801a35a:	4a29      	ldr	r2, [pc, #164]	; (801a400 <dhcp_discover+0x130>)
 801a35c:	5cd3      	ldrb	r3, [r2, r3]
 801a35e:	461a      	mov	r2, r3
 801a360:	f000 fc08 	bl	801ab74 <dhcp_option_byte>
 801a364:	4603      	mov	r3, r0
 801a366:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801a368:	7ffb      	ldrb	r3, [r7, #31]
 801a36a:	3301      	adds	r3, #1
 801a36c:	77fb      	strb	r3, [r7, #31]
 801a36e:	7ffb      	ldrb	r3, [r7, #31]
 801a370:	2b03      	cmp	r3, #3
 801a372:	d9ed      	bls.n	801a350 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801a374:	8938      	ldrh	r0, [r7, #8]
 801a376:	68fb      	ldr	r3, [r7, #12]
 801a378:	33f0      	adds	r3, #240	; 0xf0
 801a37a:	693a      	ldr	r2, [r7, #16]
 801a37c:	4619      	mov	r1, r3
 801a37e:	f001 f93b 	bl	801b5f8 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801a382:	4b20      	ldr	r3, [pc, #128]	; (801a404 <dhcp_discover+0x134>)
 801a384:	6818      	ldr	r0, [r3, #0]
 801a386:	4b20      	ldr	r3, [pc, #128]	; (801a408 <dhcp_discover+0x138>)
 801a388:	9301      	str	r3, [sp, #4]
 801a38a:	687b      	ldr	r3, [r7, #4]
 801a38c:	9300      	str	r3, [sp, #0]
 801a38e:	2343      	movs	r3, #67	; 0x43
 801a390:	4a1e      	ldr	r2, [pc, #120]	; (801a40c <dhcp_discover+0x13c>)
 801a392:	6939      	ldr	r1, [r7, #16]
 801a394:	f00b fa16 	bl	80257c4 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 801a398:	6938      	ldr	r0, [r7, #16]
 801a39a:	f004 fdc5 	bl	801ef28 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 801a39e:	69bb      	ldr	r3, [r7, #24]
 801a3a0:	799b      	ldrb	r3, [r3, #6]
 801a3a2:	2bff      	cmp	r3, #255	; 0xff
 801a3a4:	d005      	beq.n	801a3b2 <dhcp_discover+0xe2>
    dhcp->tries++;
 801a3a6:	69bb      	ldr	r3, [r7, #24]
 801a3a8:	799b      	ldrb	r3, [r3, #6]
 801a3aa:	3301      	adds	r3, #1
 801a3ac:	b2da      	uxtb	r2, r3
 801a3ae:	69bb      	ldr	r3, [r7, #24]
 801a3b0:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801a3b2:	69bb      	ldr	r3, [r7, #24]
 801a3b4:	799b      	ldrb	r3, [r3, #6]
 801a3b6:	2b05      	cmp	r3, #5
 801a3b8:	d80d      	bhi.n	801a3d6 <dhcp_discover+0x106>
 801a3ba:	69bb      	ldr	r3, [r7, #24]
 801a3bc:	799b      	ldrb	r3, [r3, #6]
 801a3be:	461a      	mov	r2, r3
 801a3c0:	2301      	movs	r3, #1
 801a3c2:	4093      	lsls	r3, r2
 801a3c4:	b29b      	uxth	r3, r3
 801a3c6:	461a      	mov	r2, r3
 801a3c8:	0152      	lsls	r2, r2, #5
 801a3ca:	1ad2      	subs	r2, r2, r3
 801a3cc:	0092      	lsls	r2, r2, #2
 801a3ce:	4413      	add	r3, r2
 801a3d0:	00db      	lsls	r3, r3, #3
 801a3d2:	b29b      	uxth	r3, r3
 801a3d4:	e001      	b.n	801a3da <dhcp_discover+0x10a>
 801a3d6:	f64e 2360 	movw	r3, #60000	; 0xea60
 801a3da:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801a3dc:	897b      	ldrh	r3, [r7, #10]
 801a3de:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801a3e2:	4a0b      	ldr	r2, [pc, #44]	; (801a410 <dhcp_discover+0x140>)
 801a3e4:	fb82 1203 	smull	r1, r2, r2, r3
 801a3e8:	1152      	asrs	r2, r2, #5
 801a3ea:	17db      	asrs	r3, r3, #31
 801a3ec:	1ad3      	subs	r3, r2, r3
 801a3ee:	b29a      	uxth	r2, r3
 801a3f0:	69bb      	ldr	r3, [r7, #24]
 801a3f2:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801a3f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801a3f8:	4618      	mov	r0, r3
 801a3fa:	3720      	adds	r7, #32
 801a3fc:	46bd      	mov	sp, r7
 801a3fe:	bd80      	pop	{r7, pc}
 801a400:	20000010 	.word	0x20000010
 801a404:	2001956c 	.word	0x2001956c
 801a408:	0802b720 	.word	0x0802b720
 801a40c:	0802b724 	.word	0x0802b724
 801a410:	10624dd3 	.word	0x10624dd3

0801a414 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 801a414:	b580      	push	{r7, lr}
 801a416:	b088      	sub	sp, #32
 801a418:	af00      	add	r7, sp, #0
 801a41a:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 801a41c:	687b      	ldr	r3, [r7, #4]
 801a41e:	2b00      	cmp	r3, #0
 801a420:	d107      	bne.n	801a432 <dhcp_bind+0x1e>
 801a422:	4b64      	ldr	r3, [pc, #400]	; (801a5b4 <dhcp_bind+0x1a0>)
 801a424:	f240 4215 	movw	r2, #1045	; 0x415
 801a428:	4963      	ldr	r1, [pc, #396]	; (801a5b8 <dhcp_bind+0x1a4>)
 801a42a:	4864      	ldr	r0, [pc, #400]	; (801a5bc <dhcp_bind+0x1a8>)
 801a42c:	f00b ff80 	bl	8026330 <iprintf>
 801a430:	e0bc      	b.n	801a5ac <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 801a432:	687b      	ldr	r3, [r7, #4]
 801a434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a436:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 801a438:	69bb      	ldr	r3, [r7, #24]
 801a43a:	2b00      	cmp	r3, #0
 801a43c:	d107      	bne.n	801a44e <dhcp_bind+0x3a>
 801a43e:	4b5d      	ldr	r3, [pc, #372]	; (801a5b4 <dhcp_bind+0x1a0>)
 801a440:	f240 4217 	movw	r2, #1047	; 0x417
 801a444:	495e      	ldr	r1, [pc, #376]	; (801a5c0 <dhcp_bind+0x1ac>)
 801a446:	485d      	ldr	r0, [pc, #372]	; (801a5bc <dhcp_bind+0x1a8>)
 801a448:	f00b ff72 	bl	8026330 <iprintf>
 801a44c:	e0ae      	b.n	801a5ac <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 801a44e:	69bb      	ldr	r3, [r7, #24]
 801a450:	2200      	movs	r2, #0
 801a452:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 801a454:	69bb      	ldr	r3, [r7, #24]
 801a456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a458:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a45c:	d019      	beq.n	801a492 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801a45e:	69bb      	ldr	r3, [r7, #24]
 801a460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a462:	331e      	adds	r3, #30
 801a464:	4a57      	ldr	r2, [pc, #348]	; (801a5c4 <dhcp_bind+0x1b0>)
 801a466:	fba2 2303 	umull	r2, r3, r2, r3
 801a46a:	095b      	lsrs	r3, r3, #5
 801a46c:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801a46e:	69fb      	ldr	r3, [r7, #28]
 801a470:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801a474:	d302      	bcc.n	801a47c <dhcp_bind+0x68>
      timeout = 0xffff;
 801a476:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a47a:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 801a47c:	69fb      	ldr	r3, [r7, #28]
 801a47e:	b29a      	uxth	r2, r3
 801a480:	69bb      	ldr	r3, [r7, #24]
 801a482:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 801a484:	69bb      	ldr	r3, [r7, #24]
 801a486:	8a9b      	ldrh	r3, [r3, #20]
 801a488:	2b00      	cmp	r3, #0
 801a48a:	d102      	bne.n	801a492 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 801a48c:	69bb      	ldr	r3, [r7, #24]
 801a48e:	2201      	movs	r2, #1
 801a490:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 801a492:	69bb      	ldr	r3, [r7, #24]
 801a494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a496:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a49a:	d01d      	beq.n	801a4d8 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801a49c:	69bb      	ldr	r3, [r7, #24]
 801a49e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a4a0:	331e      	adds	r3, #30
 801a4a2:	4a48      	ldr	r2, [pc, #288]	; (801a5c4 <dhcp_bind+0x1b0>)
 801a4a4:	fba2 2303 	umull	r2, r3, r2, r3
 801a4a8:	095b      	lsrs	r3, r3, #5
 801a4aa:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801a4ac:	69fb      	ldr	r3, [r7, #28]
 801a4ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801a4b2:	d302      	bcc.n	801a4ba <dhcp_bind+0xa6>
      timeout = 0xffff;
 801a4b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a4b8:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 801a4ba:	69fb      	ldr	r3, [r7, #28]
 801a4bc:	b29a      	uxth	r2, r3
 801a4be:	69bb      	ldr	r3, [r7, #24]
 801a4c0:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 801a4c2:	69bb      	ldr	r3, [r7, #24]
 801a4c4:	895b      	ldrh	r3, [r3, #10]
 801a4c6:	2b00      	cmp	r3, #0
 801a4c8:	d102      	bne.n	801a4d0 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 801a4ca:	69bb      	ldr	r3, [r7, #24]
 801a4cc:	2201      	movs	r2, #1
 801a4ce:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 801a4d0:	69bb      	ldr	r3, [r7, #24]
 801a4d2:	895a      	ldrh	r2, [r3, #10]
 801a4d4:	69bb      	ldr	r3, [r7, #24]
 801a4d6:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 801a4d8:	69bb      	ldr	r3, [r7, #24]
 801a4da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a4dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a4e0:	d01d      	beq.n	801a51e <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801a4e2:	69bb      	ldr	r3, [r7, #24]
 801a4e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a4e6:	331e      	adds	r3, #30
 801a4e8:	4a36      	ldr	r2, [pc, #216]	; (801a5c4 <dhcp_bind+0x1b0>)
 801a4ea:	fba2 2303 	umull	r2, r3, r2, r3
 801a4ee:	095b      	lsrs	r3, r3, #5
 801a4f0:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801a4f2:	69fb      	ldr	r3, [r7, #28]
 801a4f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801a4f8:	d302      	bcc.n	801a500 <dhcp_bind+0xec>
      timeout = 0xffff;
 801a4fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a4fe:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 801a500:	69fb      	ldr	r3, [r7, #28]
 801a502:	b29a      	uxth	r2, r3
 801a504:	69bb      	ldr	r3, [r7, #24]
 801a506:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 801a508:	69bb      	ldr	r3, [r7, #24]
 801a50a:	899b      	ldrh	r3, [r3, #12]
 801a50c:	2b00      	cmp	r3, #0
 801a50e:	d102      	bne.n	801a516 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 801a510:	69bb      	ldr	r3, [r7, #24]
 801a512:	2201      	movs	r2, #1
 801a514:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 801a516:	69bb      	ldr	r3, [r7, #24]
 801a518:	899a      	ldrh	r2, [r3, #12]
 801a51a:	69bb      	ldr	r3, [r7, #24]
 801a51c:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 801a51e:	69bb      	ldr	r3, [r7, #24]
 801a520:	895a      	ldrh	r2, [r3, #10]
 801a522:	69bb      	ldr	r3, [r7, #24]
 801a524:	899b      	ldrh	r3, [r3, #12]
 801a526:	429a      	cmp	r2, r3
 801a528:	d306      	bcc.n	801a538 <dhcp_bind+0x124>
 801a52a:	69bb      	ldr	r3, [r7, #24]
 801a52c:	899b      	ldrh	r3, [r3, #12]
 801a52e:	2b00      	cmp	r3, #0
 801a530:	d002      	beq.n	801a538 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 801a532:	69bb      	ldr	r3, [r7, #24]
 801a534:	2200      	movs	r2, #0
 801a536:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 801a538:	69bb      	ldr	r3, [r7, #24]
 801a53a:	79db      	ldrb	r3, [r3, #7]
 801a53c:	2b00      	cmp	r3, #0
 801a53e:	d003      	beq.n	801a548 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 801a540:	69bb      	ldr	r3, [r7, #24]
 801a542:	6a1b      	ldr	r3, [r3, #32]
 801a544:	613b      	str	r3, [r7, #16]
 801a546:	e014      	b.n	801a572 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 801a548:	69bb      	ldr	r3, [r7, #24]
 801a54a:	331c      	adds	r3, #28
 801a54c:	781b      	ldrb	r3, [r3, #0]
 801a54e:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 801a550:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801a554:	2b00      	cmp	r3, #0
 801a556:	db02      	blt.n	801a55e <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 801a558:	23ff      	movs	r3, #255	; 0xff
 801a55a:	613b      	str	r3, [r7, #16]
 801a55c:	e009      	b.n	801a572 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 801a55e:	7dfb      	ldrb	r3, [r7, #23]
 801a560:	2bbf      	cmp	r3, #191	; 0xbf
 801a562:	d903      	bls.n	801a56c <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 801a564:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801a568:	613b      	str	r3, [r7, #16]
 801a56a:	e002      	b.n	801a572 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 801a56c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a570:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 801a572:	69bb      	ldr	r3, [r7, #24]
 801a574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a576:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 801a578:	68fb      	ldr	r3, [r7, #12]
 801a57a:	2b00      	cmp	r3, #0
 801a57c:	d108      	bne.n	801a590 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 801a57e:	69bb      	ldr	r3, [r7, #24]
 801a580:	69da      	ldr	r2, [r3, #28]
 801a582:	693b      	ldr	r3, [r7, #16]
 801a584:	4013      	ands	r3, r2
 801a586:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 801a588:	68fb      	ldr	r3, [r7, #12]
 801a58a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801a58e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 801a590:	210a      	movs	r1, #10
 801a592:	69b8      	ldr	r0, [r7, #24]
 801a594:	f000 faa0 	bl	801aad8 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 801a598:	69bb      	ldr	r3, [r7, #24]
 801a59a:	f103 011c 	add.w	r1, r3, #28
 801a59e:	f107 030c 	add.w	r3, r7, #12
 801a5a2:	f107 0210 	add.w	r2, r7, #16
 801a5a6:	6878      	ldr	r0, [r7, #4]
 801a5a8:	f004 f8b8 	bl	801e71c <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 801a5ac:	3720      	adds	r7, #32
 801a5ae:	46bd      	mov	sp, r7
 801a5b0:	bd80      	pop	{r7, pc}
 801a5b2:	bf00      	nop
 801a5b4:	08027c60 	.word	0x08027c60
 801a5b8:	08027dc0 	.word	0x08027dc0
 801a5bc:	08027cc0 	.word	0x08027cc0
 801a5c0:	08027ddc 	.word	0x08027ddc
 801a5c4:	88888889 	.word	0x88888889

0801a5c8 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 801a5c8:	b580      	push	{r7, lr}
 801a5ca:	b08a      	sub	sp, #40	; 0x28
 801a5cc:	af02      	add	r7, sp, #8
 801a5ce:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801a5d0:	687b      	ldr	r3, [r7, #4]
 801a5d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a5d4:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 801a5d6:	2105      	movs	r1, #5
 801a5d8:	69b8      	ldr	r0, [r7, #24]
 801a5da:	f000 fa7d 	bl	801aad8 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801a5de:	f107 030c 	add.w	r3, r7, #12
 801a5e2:	2203      	movs	r2, #3
 801a5e4:	69b9      	ldr	r1, [r7, #24]
 801a5e6:	6878      	ldr	r0, [r7, #4]
 801a5e8:	f000 ff30 	bl	801b44c <dhcp_create_msg>
 801a5ec:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801a5ee:	697b      	ldr	r3, [r7, #20]
 801a5f0:	2b00      	cmp	r3, #0
 801a5f2:	d04e      	beq.n	801a692 <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801a5f4:	697b      	ldr	r3, [r7, #20]
 801a5f6:	685b      	ldr	r3, [r3, #4]
 801a5f8:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801a5fa:	89b8      	ldrh	r0, [r7, #12]
 801a5fc:	693b      	ldr	r3, [r7, #16]
 801a5fe:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801a602:	2302      	movs	r3, #2
 801a604:	2239      	movs	r2, #57	; 0x39
 801a606:	f000 fa81 	bl	801ab0c <dhcp_option>
 801a60a:	4603      	mov	r3, r0
 801a60c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801a60e:	89b8      	ldrh	r0, [r7, #12]
 801a610:	693b      	ldr	r3, [r7, #16]
 801a612:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801a616:	687b      	ldr	r3, [r7, #4]
 801a618:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a61a:	461a      	mov	r2, r3
 801a61c:	f000 fad0 	bl	801abc0 <dhcp_option_short>
 801a620:	4603      	mov	r3, r0
 801a622:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801a624:	89b8      	ldrh	r0, [r7, #12]
 801a626:	693b      	ldr	r3, [r7, #16]
 801a628:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801a62c:	2304      	movs	r3, #4
 801a62e:	2237      	movs	r2, #55	; 0x37
 801a630:	f000 fa6c 	bl	801ab0c <dhcp_option>
 801a634:	4603      	mov	r3, r0
 801a636:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801a638:	2300      	movs	r3, #0
 801a63a:	77bb      	strb	r3, [r7, #30]
 801a63c:	e00e      	b.n	801a65c <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801a63e:	89b8      	ldrh	r0, [r7, #12]
 801a640:	693b      	ldr	r3, [r7, #16]
 801a642:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801a646:	7fbb      	ldrb	r3, [r7, #30]
 801a648:	4a2a      	ldr	r2, [pc, #168]	; (801a6f4 <dhcp_renew+0x12c>)
 801a64a:	5cd3      	ldrb	r3, [r2, r3]
 801a64c:	461a      	mov	r2, r3
 801a64e:	f000 fa91 	bl	801ab74 <dhcp_option_byte>
 801a652:	4603      	mov	r3, r0
 801a654:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801a656:	7fbb      	ldrb	r3, [r7, #30]
 801a658:	3301      	adds	r3, #1
 801a65a:	77bb      	strb	r3, [r7, #30]
 801a65c:	7fbb      	ldrb	r3, [r7, #30]
 801a65e:	2b03      	cmp	r3, #3
 801a660:	d9ed      	bls.n	801a63e <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801a662:	89b8      	ldrh	r0, [r7, #12]
 801a664:	693b      	ldr	r3, [r7, #16]
 801a666:	33f0      	adds	r3, #240	; 0xf0
 801a668:	697a      	ldr	r2, [r7, #20]
 801a66a:	4619      	mov	r1, r3
 801a66c:	f000 ffc4 	bl	801b5f8 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801a670:	4b21      	ldr	r3, [pc, #132]	; (801a6f8 <dhcp_renew+0x130>)
 801a672:	6818      	ldr	r0, [r3, #0]
 801a674:	69bb      	ldr	r3, [r7, #24]
 801a676:	f103 0218 	add.w	r2, r3, #24
 801a67a:	687b      	ldr	r3, [r7, #4]
 801a67c:	9300      	str	r3, [sp, #0]
 801a67e:	2343      	movs	r3, #67	; 0x43
 801a680:	6979      	ldr	r1, [r7, #20]
 801a682:	f00b f82b 	bl	80256dc <udp_sendto_if>
 801a686:	4603      	mov	r3, r0
 801a688:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801a68a:	6978      	ldr	r0, [r7, #20]
 801a68c:	f004 fc4c 	bl	801ef28 <pbuf_free>
 801a690:	e001      	b.n	801a696 <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801a692:	23ff      	movs	r3, #255	; 0xff
 801a694:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801a696:	69bb      	ldr	r3, [r7, #24]
 801a698:	799b      	ldrb	r3, [r3, #6]
 801a69a:	2bff      	cmp	r3, #255	; 0xff
 801a69c:	d005      	beq.n	801a6aa <dhcp_renew+0xe2>
    dhcp->tries++;
 801a69e:	69bb      	ldr	r3, [r7, #24]
 801a6a0:	799b      	ldrb	r3, [r3, #6]
 801a6a2:	3301      	adds	r3, #1
 801a6a4:	b2da      	uxtb	r2, r3
 801a6a6:	69bb      	ldr	r3, [r7, #24]
 801a6a8:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 801a6aa:	69bb      	ldr	r3, [r7, #24]
 801a6ac:	799b      	ldrb	r3, [r3, #6]
 801a6ae:	2b09      	cmp	r3, #9
 801a6b0:	d80a      	bhi.n	801a6c8 <dhcp_renew+0x100>
 801a6b2:	69bb      	ldr	r3, [r7, #24]
 801a6b4:	799b      	ldrb	r3, [r3, #6]
 801a6b6:	b29b      	uxth	r3, r3
 801a6b8:	461a      	mov	r2, r3
 801a6ba:	0152      	lsls	r2, r2, #5
 801a6bc:	1ad2      	subs	r2, r2, r3
 801a6be:	0092      	lsls	r2, r2, #2
 801a6c0:	4413      	add	r3, r2
 801a6c2:	011b      	lsls	r3, r3, #4
 801a6c4:	b29b      	uxth	r3, r3
 801a6c6:	e001      	b.n	801a6cc <dhcp_renew+0x104>
 801a6c8:	f644 6320 	movw	r3, #20000	; 0x4e20
 801a6cc:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801a6ce:	89fb      	ldrh	r3, [r7, #14]
 801a6d0:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801a6d4:	4a09      	ldr	r2, [pc, #36]	; (801a6fc <dhcp_renew+0x134>)
 801a6d6:	fb82 1203 	smull	r1, r2, r2, r3
 801a6da:	1152      	asrs	r2, r2, #5
 801a6dc:	17db      	asrs	r3, r3, #31
 801a6de:	1ad3      	subs	r3, r2, r3
 801a6e0:	b29a      	uxth	r2, r3
 801a6e2:	69bb      	ldr	r3, [r7, #24]
 801a6e4:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801a6e6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801a6ea:	4618      	mov	r0, r3
 801a6ec:	3720      	adds	r7, #32
 801a6ee:	46bd      	mov	sp, r7
 801a6f0:	bd80      	pop	{r7, pc}
 801a6f2:	bf00      	nop
 801a6f4:	20000010 	.word	0x20000010
 801a6f8:	2001956c 	.word	0x2001956c
 801a6fc:	10624dd3 	.word	0x10624dd3

0801a700 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 801a700:	b580      	push	{r7, lr}
 801a702:	b08a      	sub	sp, #40	; 0x28
 801a704:	af02      	add	r7, sp, #8
 801a706:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801a708:	687b      	ldr	r3, [r7, #4]
 801a70a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a70c:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 801a70e:	2104      	movs	r1, #4
 801a710:	69b8      	ldr	r0, [r7, #24]
 801a712:	f000 f9e1 	bl	801aad8 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801a716:	f107 030c 	add.w	r3, r7, #12
 801a71a:	2203      	movs	r2, #3
 801a71c:	69b9      	ldr	r1, [r7, #24]
 801a71e:	6878      	ldr	r0, [r7, #4]
 801a720:	f000 fe94 	bl	801b44c <dhcp_create_msg>
 801a724:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801a726:	697b      	ldr	r3, [r7, #20]
 801a728:	2b00      	cmp	r3, #0
 801a72a:	d04c      	beq.n	801a7c6 <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801a72c:	697b      	ldr	r3, [r7, #20]
 801a72e:	685b      	ldr	r3, [r3, #4]
 801a730:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801a732:	89b8      	ldrh	r0, [r7, #12]
 801a734:	693b      	ldr	r3, [r7, #16]
 801a736:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801a73a:	2302      	movs	r3, #2
 801a73c:	2239      	movs	r2, #57	; 0x39
 801a73e:	f000 f9e5 	bl	801ab0c <dhcp_option>
 801a742:	4603      	mov	r3, r0
 801a744:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801a746:	89b8      	ldrh	r0, [r7, #12]
 801a748:	693b      	ldr	r3, [r7, #16]
 801a74a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801a74e:	687b      	ldr	r3, [r7, #4]
 801a750:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a752:	461a      	mov	r2, r3
 801a754:	f000 fa34 	bl	801abc0 <dhcp_option_short>
 801a758:	4603      	mov	r3, r0
 801a75a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801a75c:	89b8      	ldrh	r0, [r7, #12]
 801a75e:	693b      	ldr	r3, [r7, #16]
 801a760:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801a764:	2304      	movs	r3, #4
 801a766:	2237      	movs	r2, #55	; 0x37
 801a768:	f000 f9d0 	bl	801ab0c <dhcp_option>
 801a76c:	4603      	mov	r3, r0
 801a76e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801a770:	2300      	movs	r3, #0
 801a772:	77bb      	strb	r3, [r7, #30]
 801a774:	e00e      	b.n	801a794 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801a776:	89b8      	ldrh	r0, [r7, #12]
 801a778:	693b      	ldr	r3, [r7, #16]
 801a77a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801a77e:	7fbb      	ldrb	r3, [r7, #30]
 801a780:	4a29      	ldr	r2, [pc, #164]	; (801a828 <dhcp_rebind+0x128>)
 801a782:	5cd3      	ldrb	r3, [r2, r3]
 801a784:	461a      	mov	r2, r3
 801a786:	f000 f9f5 	bl	801ab74 <dhcp_option_byte>
 801a78a:	4603      	mov	r3, r0
 801a78c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801a78e:	7fbb      	ldrb	r3, [r7, #30]
 801a790:	3301      	adds	r3, #1
 801a792:	77bb      	strb	r3, [r7, #30]
 801a794:	7fbb      	ldrb	r3, [r7, #30]
 801a796:	2b03      	cmp	r3, #3
 801a798:	d9ed      	bls.n	801a776 <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801a79a:	89b8      	ldrh	r0, [r7, #12]
 801a79c:	693b      	ldr	r3, [r7, #16]
 801a79e:	33f0      	adds	r3, #240	; 0xf0
 801a7a0:	697a      	ldr	r2, [r7, #20]
 801a7a2:	4619      	mov	r1, r3
 801a7a4:	f000 ff28 	bl	801b5f8 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801a7a8:	4b20      	ldr	r3, [pc, #128]	; (801a82c <dhcp_rebind+0x12c>)
 801a7aa:	6818      	ldr	r0, [r3, #0]
 801a7ac:	687b      	ldr	r3, [r7, #4]
 801a7ae:	9300      	str	r3, [sp, #0]
 801a7b0:	2343      	movs	r3, #67	; 0x43
 801a7b2:	4a1f      	ldr	r2, [pc, #124]	; (801a830 <dhcp_rebind+0x130>)
 801a7b4:	6979      	ldr	r1, [r7, #20]
 801a7b6:	f00a ff91 	bl	80256dc <udp_sendto_if>
 801a7ba:	4603      	mov	r3, r0
 801a7bc:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801a7be:	6978      	ldr	r0, [r7, #20]
 801a7c0:	f004 fbb2 	bl	801ef28 <pbuf_free>
 801a7c4:	e001      	b.n	801a7ca <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801a7c6:	23ff      	movs	r3, #255	; 0xff
 801a7c8:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801a7ca:	69bb      	ldr	r3, [r7, #24]
 801a7cc:	799b      	ldrb	r3, [r3, #6]
 801a7ce:	2bff      	cmp	r3, #255	; 0xff
 801a7d0:	d005      	beq.n	801a7de <dhcp_rebind+0xde>
    dhcp->tries++;
 801a7d2:	69bb      	ldr	r3, [r7, #24]
 801a7d4:	799b      	ldrb	r3, [r3, #6]
 801a7d6:	3301      	adds	r3, #1
 801a7d8:	b2da      	uxtb	r2, r3
 801a7da:	69bb      	ldr	r3, [r7, #24]
 801a7dc:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801a7de:	69bb      	ldr	r3, [r7, #24]
 801a7e0:	799b      	ldrb	r3, [r3, #6]
 801a7e2:	2b09      	cmp	r3, #9
 801a7e4:	d80a      	bhi.n	801a7fc <dhcp_rebind+0xfc>
 801a7e6:	69bb      	ldr	r3, [r7, #24]
 801a7e8:	799b      	ldrb	r3, [r3, #6]
 801a7ea:	b29b      	uxth	r3, r3
 801a7ec:	461a      	mov	r2, r3
 801a7ee:	0152      	lsls	r2, r2, #5
 801a7f0:	1ad2      	subs	r2, r2, r3
 801a7f2:	0092      	lsls	r2, r2, #2
 801a7f4:	4413      	add	r3, r2
 801a7f6:	00db      	lsls	r3, r3, #3
 801a7f8:	b29b      	uxth	r3, r3
 801a7fa:	e001      	b.n	801a800 <dhcp_rebind+0x100>
 801a7fc:	f242 7310 	movw	r3, #10000	; 0x2710
 801a800:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801a802:	89fb      	ldrh	r3, [r7, #14]
 801a804:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801a808:	4a0a      	ldr	r2, [pc, #40]	; (801a834 <dhcp_rebind+0x134>)
 801a80a:	fb82 1203 	smull	r1, r2, r2, r3
 801a80e:	1152      	asrs	r2, r2, #5
 801a810:	17db      	asrs	r3, r3, #31
 801a812:	1ad3      	subs	r3, r2, r3
 801a814:	b29a      	uxth	r2, r3
 801a816:	69bb      	ldr	r3, [r7, #24]
 801a818:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801a81a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801a81e:	4618      	mov	r0, r3
 801a820:	3720      	adds	r7, #32
 801a822:	46bd      	mov	sp, r7
 801a824:	bd80      	pop	{r7, pc}
 801a826:	bf00      	nop
 801a828:	20000010 	.word	0x20000010
 801a82c:	2001956c 	.word	0x2001956c
 801a830:	0802b724 	.word	0x0802b724
 801a834:	10624dd3 	.word	0x10624dd3

0801a838 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 801a838:	b5b0      	push	{r4, r5, r7, lr}
 801a83a:	b08a      	sub	sp, #40	; 0x28
 801a83c:	af02      	add	r7, sp, #8
 801a83e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801a840:	687b      	ldr	r3, [r7, #4]
 801a842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a844:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 801a846:	2103      	movs	r1, #3
 801a848:	69b8      	ldr	r0, [r7, #24]
 801a84a:	f000 f945 	bl	801aad8 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801a84e:	f107 030c 	add.w	r3, r7, #12
 801a852:	2203      	movs	r2, #3
 801a854:	69b9      	ldr	r1, [r7, #24]
 801a856:	6878      	ldr	r0, [r7, #4]
 801a858:	f000 fdf8 	bl	801b44c <dhcp_create_msg>
 801a85c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801a85e:	697b      	ldr	r3, [r7, #20]
 801a860:	2b00      	cmp	r3, #0
 801a862:	d066      	beq.n	801a932 <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801a864:	697b      	ldr	r3, [r7, #20]
 801a866:	685b      	ldr	r3, [r3, #4]
 801a868:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801a86a:	89b8      	ldrh	r0, [r7, #12]
 801a86c:	693b      	ldr	r3, [r7, #16]
 801a86e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801a872:	2302      	movs	r3, #2
 801a874:	2239      	movs	r2, #57	; 0x39
 801a876:	f000 f949 	bl	801ab0c <dhcp_option>
 801a87a:	4603      	mov	r3, r0
 801a87c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 801a87e:	89b8      	ldrh	r0, [r7, #12]
 801a880:	693b      	ldr	r3, [r7, #16]
 801a882:	33f0      	adds	r3, #240	; 0xf0
 801a884:	f44f 7210 	mov.w	r2, #576	; 0x240
 801a888:	4619      	mov	r1, r3
 801a88a:	f000 f999 	bl	801abc0 <dhcp_option_short>
 801a88e:	4603      	mov	r3, r0
 801a890:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801a892:	89b8      	ldrh	r0, [r7, #12]
 801a894:	693b      	ldr	r3, [r7, #16]
 801a896:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801a89a:	2304      	movs	r3, #4
 801a89c:	2232      	movs	r2, #50	; 0x32
 801a89e:	f000 f935 	bl	801ab0c <dhcp_option>
 801a8a2:	4603      	mov	r3, r0
 801a8a4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801a8a6:	89bc      	ldrh	r4, [r7, #12]
 801a8a8:	693b      	ldr	r3, [r7, #16]
 801a8aa:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801a8ae:	69bb      	ldr	r3, [r7, #24]
 801a8b0:	69db      	ldr	r3, [r3, #28]
 801a8b2:	4618      	mov	r0, r3
 801a8b4:	f7fe fc4d 	bl	8019152 <lwip_htonl>
 801a8b8:	4603      	mov	r3, r0
 801a8ba:	461a      	mov	r2, r3
 801a8bc:	4629      	mov	r1, r5
 801a8be:	4620      	mov	r0, r4
 801a8c0:	f000 f9b0 	bl	801ac24 <dhcp_option_long>
 801a8c4:	4603      	mov	r3, r0
 801a8c6:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801a8c8:	89b8      	ldrh	r0, [r7, #12]
 801a8ca:	693b      	ldr	r3, [r7, #16]
 801a8cc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801a8d0:	2304      	movs	r3, #4
 801a8d2:	2237      	movs	r2, #55	; 0x37
 801a8d4:	f000 f91a 	bl	801ab0c <dhcp_option>
 801a8d8:	4603      	mov	r3, r0
 801a8da:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801a8dc:	2300      	movs	r3, #0
 801a8de:	77bb      	strb	r3, [r7, #30]
 801a8e0:	e00e      	b.n	801a900 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801a8e2:	89b8      	ldrh	r0, [r7, #12]
 801a8e4:	693b      	ldr	r3, [r7, #16]
 801a8e6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801a8ea:	7fbb      	ldrb	r3, [r7, #30]
 801a8ec:	4a29      	ldr	r2, [pc, #164]	; (801a994 <dhcp_reboot+0x15c>)
 801a8ee:	5cd3      	ldrb	r3, [r2, r3]
 801a8f0:	461a      	mov	r2, r3
 801a8f2:	f000 f93f 	bl	801ab74 <dhcp_option_byte>
 801a8f6:	4603      	mov	r3, r0
 801a8f8:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801a8fa:	7fbb      	ldrb	r3, [r7, #30]
 801a8fc:	3301      	adds	r3, #1
 801a8fe:	77bb      	strb	r3, [r7, #30]
 801a900:	7fbb      	ldrb	r3, [r7, #30]
 801a902:	2b03      	cmp	r3, #3
 801a904:	d9ed      	bls.n	801a8e2 <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801a906:	89b8      	ldrh	r0, [r7, #12]
 801a908:	693b      	ldr	r3, [r7, #16]
 801a90a:	33f0      	adds	r3, #240	; 0xf0
 801a90c:	697a      	ldr	r2, [r7, #20]
 801a90e:	4619      	mov	r1, r3
 801a910:	f000 fe72 	bl	801b5f8 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801a914:	4b20      	ldr	r3, [pc, #128]	; (801a998 <dhcp_reboot+0x160>)
 801a916:	6818      	ldr	r0, [r3, #0]
 801a918:	687b      	ldr	r3, [r7, #4]
 801a91a:	9300      	str	r3, [sp, #0]
 801a91c:	2343      	movs	r3, #67	; 0x43
 801a91e:	4a1f      	ldr	r2, [pc, #124]	; (801a99c <dhcp_reboot+0x164>)
 801a920:	6979      	ldr	r1, [r7, #20]
 801a922:	f00a fedb 	bl	80256dc <udp_sendto_if>
 801a926:	4603      	mov	r3, r0
 801a928:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801a92a:	6978      	ldr	r0, [r7, #20]
 801a92c:	f004 fafc 	bl	801ef28 <pbuf_free>
 801a930:	e001      	b.n	801a936 <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801a932:	23ff      	movs	r3, #255	; 0xff
 801a934:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801a936:	69bb      	ldr	r3, [r7, #24]
 801a938:	799b      	ldrb	r3, [r3, #6]
 801a93a:	2bff      	cmp	r3, #255	; 0xff
 801a93c:	d005      	beq.n	801a94a <dhcp_reboot+0x112>
    dhcp->tries++;
 801a93e:	69bb      	ldr	r3, [r7, #24]
 801a940:	799b      	ldrb	r3, [r3, #6]
 801a942:	3301      	adds	r3, #1
 801a944:	b2da      	uxtb	r2, r3
 801a946:	69bb      	ldr	r3, [r7, #24]
 801a948:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801a94a:	69bb      	ldr	r3, [r7, #24]
 801a94c:	799b      	ldrb	r3, [r3, #6]
 801a94e:	2b09      	cmp	r3, #9
 801a950:	d80a      	bhi.n	801a968 <dhcp_reboot+0x130>
 801a952:	69bb      	ldr	r3, [r7, #24]
 801a954:	799b      	ldrb	r3, [r3, #6]
 801a956:	b29b      	uxth	r3, r3
 801a958:	461a      	mov	r2, r3
 801a95a:	0152      	lsls	r2, r2, #5
 801a95c:	1ad2      	subs	r2, r2, r3
 801a95e:	0092      	lsls	r2, r2, #2
 801a960:	4413      	add	r3, r2
 801a962:	00db      	lsls	r3, r3, #3
 801a964:	b29b      	uxth	r3, r3
 801a966:	e001      	b.n	801a96c <dhcp_reboot+0x134>
 801a968:	f242 7310 	movw	r3, #10000	; 0x2710
 801a96c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801a96e:	89fb      	ldrh	r3, [r7, #14]
 801a970:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801a974:	4a0a      	ldr	r2, [pc, #40]	; (801a9a0 <dhcp_reboot+0x168>)
 801a976:	fb82 1203 	smull	r1, r2, r2, r3
 801a97a:	1152      	asrs	r2, r2, #5
 801a97c:	17db      	asrs	r3, r3, #31
 801a97e:	1ad3      	subs	r3, r2, r3
 801a980:	b29a      	uxth	r2, r3
 801a982:	69bb      	ldr	r3, [r7, #24]
 801a984:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801a986:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801a98a:	4618      	mov	r0, r3
 801a98c:	3720      	adds	r7, #32
 801a98e:	46bd      	mov	sp, r7
 801a990:	bdb0      	pop	{r4, r5, r7, pc}
 801a992:	bf00      	nop
 801a994:	20000010 	.word	0x20000010
 801a998:	2001956c 	.word	0x2001956c
 801a99c:	0802b724 	.word	0x0802b724
 801a9a0:	10624dd3 	.word	0x10624dd3

0801a9a4 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 801a9a4:	b5b0      	push	{r4, r5, r7, lr}
 801a9a6:	b08a      	sub	sp, #40	; 0x28
 801a9a8:	af02      	add	r7, sp, #8
 801a9aa:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801a9ac:	687b      	ldr	r3, [r7, #4]
 801a9ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a9b0:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 801a9b2:	69fb      	ldr	r3, [r7, #28]
 801a9b4:	2b00      	cmp	r3, #0
 801a9b6:	f000 8084 	beq.w	801aac2 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 801a9ba:	69fb      	ldr	r3, [r7, #28]
 801a9bc:	795b      	ldrb	r3, [r3, #5]
 801a9be:	2b00      	cmp	r3, #0
 801a9c0:	f000 8081 	beq.w	801aac6 <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 801a9c4:	69fb      	ldr	r3, [r7, #28]
 801a9c6:	699b      	ldr	r3, [r3, #24]
 801a9c8:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 801a9ca:	69fb      	ldr	r3, [r7, #28]
 801a9cc:	2200      	movs	r2, #0
 801a9ce:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 801a9d0:	69fb      	ldr	r3, [r7, #28]
 801a9d2:	2200      	movs	r2, #0
 801a9d4:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 801a9d6:	69fb      	ldr	r3, [r7, #28]
 801a9d8:	2200      	movs	r2, #0
 801a9da:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801a9dc:	69fb      	ldr	r3, [r7, #28]
 801a9de:	2200      	movs	r2, #0
 801a9e0:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 801a9e2:	69fb      	ldr	r3, [r7, #28]
 801a9e4:	2200      	movs	r2, #0
 801a9e6:	631a      	str	r2, [r3, #48]	; 0x30
 801a9e8:	69fb      	ldr	r3, [r7, #28]
 801a9ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801a9ec:	69fb      	ldr	r3, [r7, #28]
 801a9ee:	62da      	str	r2, [r3, #44]	; 0x2c
 801a9f0:	69fb      	ldr	r3, [r7, #28]
 801a9f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a9f4:	69fb      	ldr	r3, [r7, #28]
 801a9f6:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 801a9f8:	69fb      	ldr	r3, [r7, #28]
 801a9fa:	2200      	movs	r2, #0
 801a9fc:	829a      	strh	r2, [r3, #20]
 801a9fe:	69fb      	ldr	r3, [r7, #28]
 801aa00:	8a9a      	ldrh	r2, [r3, #20]
 801aa02:	69fb      	ldr	r3, [r7, #28]
 801aa04:	825a      	strh	r2, [r3, #18]
 801aa06:	69fb      	ldr	r3, [r7, #28]
 801aa08:	8a5a      	ldrh	r2, [r3, #18]
 801aa0a:	69fb      	ldr	r3, [r7, #28]
 801aa0c:	821a      	strh	r2, [r3, #16]
 801aa0e:	69fb      	ldr	r3, [r7, #28]
 801aa10:	8a1a      	ldrh	r2, [r3, #16]
 801aa12:	69fb      	ldr	r3, [r7, #28]
 801aa14:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 801aa16:	6878      	ldr	r0, [r7, #4]
 801aa18:	f000 fe1c 	bl	801b654 <dhcp_supplied_address>
 801aa1c:	4603      	mov	r3, r0
 801aa1e:	2b00      	cmp	r3, #0
 801aa20:	d03b      	beq.n	801aa9a <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 801aa22:	f107 030e 	add.w	r3, r7, #14
 801aa26:	2207      	movs	r2, #7
 801aa28:	69f9      	ldr	r1, [r7, #28]
 801aa2a:	6878      	ldr	r0, [r7, #4]
 801aa2c:	f000 fd0e 	bl	801b44c <dhcp_create_msg>
 801aa30:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 801aa32:	69bb      	ldr	r3, [r7, #24]
 801aa34:	2b00      	cmp	r3, #0
 801aa36:	d030      	beq.n	801aa9a <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801aa38:	69bb      	ldr	r3, [r7, #24]
 801aa3a:	685b      	ldr	r3, [r3, #4]
 801aa3c:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801aa3e:	89f8      	ldrh	r0, [r7, #14]
 801aa40:	697b      	ldr	r3, [r7, #20]
 801aa42:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801aa46:	2304      	movs	r3, #4
 801aa48:	2236      	movs	r2, #54	; 0x36
 801aa4a:	f000 f85f 	bl	801ab0c <dhcp_option>
 801aa4e:	4603      	mov	r3, r0
 801aa50:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 801aa52:	89fc      	ldrh	r4, [r7, #14]
 801aa54:	697b      	ldr	r3, [r7, #20]
 801aa56:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801aa5a:	693b      	ldr	r3, [r7, #16]
 801aa5c:	4618      	mov	r0, r3
 801aa5e:	f7fe fb78 	bl	8019152 <lwip_htonl>
 801aa62:	4603      	mov	r3, r0
 801aa64:	461a      	mov	r2, r3
 801aa66:	4629      	mov	r1, r5
 801aa68:	4620      	mov	r0, r4
 801aa6a:	f000 f8db 	bl	801ac24 <dhcp_option_long>
 801aa6e:	4603      	mov	r3, r0
 801aa70:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801aa72:	89f8      	ldrh	r0, [r7, #14]
 801aa74:	697b      	ldr	r3, [r7, #20]
 801aa76:	33f0      	adds	r3, #240	; 0xf0
 801aa78:	69ba      	ldr	r2, [r7, #24]
 801aa7a:	4619      	mov	r1, r3
 801aa7c:	f000 fdbc 	bl	801b5f8 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801aa80:	4b13      	ldr	r3, [pc, #76]	; (801aad0 <dhcp_release_and_stop+0x12c>)
 801aa82:	6818      	ldr	r0, [r3, #0]
 801aa84:	f107 0210 	add.w	r2, r7, #16
 801aa88:	687b      	ldr	r3, [r7, #4]
 801aa8a:	9300      	str	r3, [sp, #0]
 801aa8c:	2343      	movs	r3, #67	; 0x43
 801aa8e:	69b9      	ldr	r1, [r7, #24]
 801aa90:	f00a fe24 	bl	80256dc <udp_sendto_if>
      pbuf_free(p_out);
 801aa94:	69b8      	ldr	r0, [r7, #24]
 801aa96:	f004 fa47 	bl	801ef28 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801aa9a:	4b0e      	ldr	r3, [pc, #56]	; (801aad4 <dhcp_release_and_stop+0x130>)
 801aa9c:	4a0d      	ldr	r2, [pc, #52]	; (801aad4 <dhcp_release_and_stop+0x130>)
 801aa9e:	490d      	ldr	r1, [pc, #52]	; (801aad4 <dhcp_release_and_stop+0x130>)
 801aaa0:	6878      	ldr	r0, [r7, #4]
 801aaa2:	f003 fe3b 	bl	801e71c <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 801aaa6:	2100      	movs	r1, #0
 801aaa8:	69f8      	ldr	r0, [r7, #28]
 801aaaa:	f000 f815 	bl	801aad8 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 801aaae:	69fb      	ldr	r3, [r7, #28]
 801aab0:	791b      	ldrb	r3, [r3, #4]
 801aab2:	2b00      	cmp	r3, #0
 801aab4:	d008      	beq.n	801aac8 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 801aab6:	f7fe ff9f 	bl	80199f8 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 801aaba:	69fb      	ldr	r3, [r7, #28]
 801aabc:	2200      	movs	r2, #0
 801aabe:	711a      	strb	r2, [r3, #4]
 801aac0:	e002      	b.n	801aac8 <dhcp_release_and_stop+0x124>
    return;
 801aac2:	bf00      	nop
 801aac4:	e000      	b.n	801aac8 <dhcp_release_and_stop+0x124>
    return;
 801aac6:	bf00      	nop
  }
}
 801aac8:	3720      	adds	r7, #32
 801aaca:	46bd      	mov	sp, r7
 801aacc:	bdb0      	pop	{r4, r5, r7, pc}
 801aace:	bf00      	nop
 801aad0:	2001956c 	.word	0x2001956c
 801aad4:	0802b720 	.word	0x0802b720

0801aad8 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 801aad8:	b480      	push	{r7}
 801aada:	b083      	sub	sp, #12
 801aadc:	af00      	add	r7, sp, #0
 801aade:	6078      	str	r0, [r7, #4]
 801aae0:	460b      	mov	r3, r1
 801aae2:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 801aae4:	687b      	ldr	r3, [r7, #4]
 801aae6:	795b      	ldrb	r3, [r3, #5]
 801aae8:	78fa      	ldrb	r2, [r7, #3]
 801aaea:	429a      	cmp	r2, r3
 801aaec:	d008      	beq.n	801ab00 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 801aaee:	687b      	ldr	r3, [r7, #4]
 801aaf0:	78fa      	ldrb	r2, [r7, #3]
 801aaf2:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 801aaf4:	687b      	ldr	r3, [r7, #4]
 801aaf6:	2200      	movs	r2, #0
 801aaf8:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 801aafa:	687b      	ldr	r3, [r7, #4]
 801aafc:	2200      	movs	r2, #0
 801aafe:	811a      	strh	r2, [r3, #8]
  }
}
 801ab00:	bf00      	nop
 801ab02:	370c      	adds	r7, #12
 801ab04:	46bd      	mov	sp, r7
 801ab06:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab0a:	4770      	bx	lr

0801ab0c <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 801ab0c:	b580      	push	{r7, lr}
 801ab0e:	b082      	sub	sp, #8
 801ab10:	af00      	add	r7, sp, #0
 801ab12:	6039      	str	r1, [r7, #0]
 801ab14:	4611      	mov	r1, r2
 801ab16:	461a      	mov	r2, r3
 801ab18:	4603      	mov	r3, r0
 801ab1a:	80fb      	strh	r3, [r7, #6]
 801ab1c:	460b      	mov	r3, r1
 801ab1e:	717b      	strb	r3, [r7, #5]
 801ab20:	4613      	mov	r3, r2
 801ab22:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801ab24:	88fa      	ldrh	r2, [r7, #6]
 801ab26:	793b      	ldrb	r3, [r7, #4]
 801ab28:	4413      	add	r3, r2
 801ab2a:	3302      	adds	r3, #2
 801ab2c:	2b44      	cmp	r3, #68	; 0x44
 801ab2e:	d906      	bls.n	801ab3e <dhcp_option+0x32>
 801ab30:	4b0d      	ldr	r3, [pc, #52]	; (801ab68 <dhcp_option+0x5c>)
 801ab32:	f240 529a 	movw	r2, #1434	; 0x59a
 801ab36:	490d      	ldr	r1, [pc, #52]	; (801ab6c <dhcp_option+0x60>)
 801ab38:	480d      	ldr	r0, [pc, #52]	; (801ab70 <dhcp_option+0x64>)
 801ab3a:	f00b fbf9 	bl	8026330 <iprintf>
  options[options_out_len++] = option_type;
 801ab3e:	88fb      	ldrh	r3, [r7, #6]
 801ab40:	1c5a      	adds	r2, r3, #1
 801ab42:	80fa      	strh	r2, [r7, #6]
 801ab44:	461a      	mov	r2, r3
 801ab46:	683b      	ldr	r3, [r7, #0]
 801ab48:	4413      	add	r3, r2
 801ab4a:	797a      	ldrb	r2, [r7, #5]
 801ab4c:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 801ab4e:	88fb      	ldrh	r3, [r7, #6]
 801ab50:	1c5a      	adds	r2, r3, #1
 801ab52:	80fa      	strh	r2, [r7, #6]
 801ab54:	461a      	mov	r2, r3
 801ab56:	683b      	ldr	r3, [r7, #0]
 801ab58:	4413      	add	r3, r2
 801ab5a:	793a      	ldrb	r2, [r7, #4]
 801ab5c:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801ab5e:	88fb      	ldrh	r3, [r7, #6]
}
 801ab60:	4618      	mov	r0, r3
 801ab62:	3708      	adds	r7, #8
 801ab64:	46bd      	mov	sp, r7
 801ab66:	bd80      	pop	{r7, pc}
 801ab68:	08027c60 	.word	0x08027c60
 801ab6c:	08027df4 	.word	0x08027df4
 801ab70:	08027cc0 	.word	0x08027cc0

0801ab74 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 801ab74:	b580      	push	{r7, lr}
 801ab76:	b082      	sub	sp, #8
 801ab78:	af00      	add	r7, sp, #0
 801ab7a:	4603      	mov	r3, r0
 801ab7c:	6039      	str	r1, [r7, #0]
 801ab7e:	80fb      	strh	r3, [r7, #6]
 801ab80:	4613      	mov	r3, r2
 801ab82:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801ab84:	88fb      	ldrh	r3, [r7, #6]
 801ab86:	2b43      	cmp	r3, #67	; 0x43
 801ab88:	d906      	bls.n	801ab98 <dhcp_option_byte+0x24>
 801ab8a:	4b0a      	ldr	r3, [pc, #40]	; (801abb4 <dhcp_option_byte+0x40>)
 801ab8c:	f240 52a6 	movw	r2, #1446	; 0x5a6
 801ab90:	4909      	ldr	r1, [pc, #36]	; (801abb8 <dhcp_option_byte+0x44>)
 801ab92:	480a      	ldr	r0, [pc, #40]	; (801abbc <dhcp_option_byte+0x48>)
 801ab94:	f00b fbcc 	bl	8026330 <iprintf>
  options[options_out_len++] = value;
 801ab98:	88fb      	ldrh	r3, [r7, #6]
 801ab9a:	1c5a      	adds	r2, r3, #1
 801ab9c:	80fa      	strh	r2, [r7, #6]
 801ab9e:	461a      	mov	r2, r3
 801aba0:	683b      	ldr	r3, [r7, #0]
 801aba2:	4413      	add	r3, r2
 801aba4:	797a      	ldrb	r2, [r7, #5]
 801aba6:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801aba8:	88fb      	ldrh	r3, [r7, #6]
}
 801abaa:	4618      	mov	r0, r3
 801abac:	3708      	adds	r7, #8
 801abae:	46bd      	mov	sp, r7
 801abb0:	bd80      	pop	{r7, pc}
 801abb2:	bf00      	nop
 801abb4:	08027c60 	.word	0x08027c60
 801abb8:	08027e38 	.word	0x08027e38
 801abbc:	08027cc0 	.word	0x08027cc0

0801abc0 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 801abc0:	b580      	push	{r7, lr}
 801abc2:	b082      	sub	sp, #8
 801abc4:	af00      	add	r7, sp, #0
 801abc6:	4603      	mov	r3, r0
 801abc8:	6039      	str	r1, [r7, #0]
 801abca:	80fb      	strh	r3, [r7, #6]
 801abcc:	4613      	mov	r3, r2
 801abce:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 801abd0:	88fb      	ldrh	r3, [r7, #6]
 801abd2:	3302      	adds	r3, #2
 801abd4:	2b44      	cmp	r3, #68	; 0x44
 801abd6:	d906      	bls.n	801abe6 <dhcp_option_short+0x26>
 801abd8:	4b0f      	ldr	r3, [pc, #60]	; (801ac18 <dhcp_option_short+0x58>)
 801abda:	f240 52ae 	movw	r2, #1454	; 0x5ae
 801abde:	490f      	ldr	r1, [pc, #60]	; (801ac1c <dhcp_option_short+0x5c>)
 801abe0:	480f      	ldr	r0, [pc, #60]	; (801ac20 <dhcp_option_short+0x60>)
 801abe2:	f00b fba5 	bl	8026330 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 801abe6:	88fb      	ldrh	r3, [r7, #6]
 801abe8:	1c5a      	adds	r2, r3, #1
 801abea:	80fa      	strh	r2, [r7, #6]
 801abec:	461a      	mov	r2, r3
 801abee:	683b      	ldr	r3, [r7, #0]
 801abf0:	4413      	add	r3, r2
 801abf2:	88ba      	ldrh	r2, [r7, #4]
 801abf4:	0a12      	lsrs	r2, r2, #8
 801abf6:	b292      	uxth	r2, r2
 801abf8:	b2d2      	uxtb	r2, r2
 801abfa:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 801abfc:	88fb      	ldrh	r3, [r7, #6]
 801abfe:	1c5a      	adds	r2, r3, #1
 801ac00:	80fa      	strh	r2, [r7, #6]
 801ac02:	461a      	mov	r2, r3
 801ac04:	683b      	ldr	r3, [r7, #0]
 801ac06:	4413      	add	r3, r2
 801ac08:	88ba      	ldrh	r2, [r7, #4]
 801ac0a:	b2d2      	uxtb	r2, r2
 801ac0c:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801ac0e:	88fb      	ldrh	r3, [r7, #6]
}
 801ac10:	4618      	mov	r0, r3
 801ac12:	3708      	adds	r7, #8
 801ac14:	46bd      	mov	sp, r7
 801ac16:	bd80      	pop	{r7, pc}
 801ac18:	08027c60 	.word	0x08027c60
 801ac1c:	08027e70 	.word	0x08027e70
 801ac20:	08027cc0 	.word	0x08027cc0

0801ac24 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 801ac24:	b580      	push	{r7, lr}
 801ac26:	b084      	sub	sp, #16
 801ac28:	af00      	add	r7, sp, #0
 801ac2a:	4603      	mov	r3, r0
 801ac2c:	60b9      	str	r1, [r7, #8]
 801ac2e:	607a      	str	r2, [r7, #4]
 801ac30:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 801ac32:	89fb      	ldrh	r3, [r7, #14]
 801ac34:	3304      	adds	r3, #4
 801ac36:	2b44      	cmp	r3, #68	; 0x44
 801ac38:	d906      	bls.n	801ac48 <dhcp_option_long+0x24>
 801ac3a:	4b19      	ldr	r3, [pc, #100]	; (801aca0 <dhcp_option_long+0x7c>)
 801ac3c:	f240 52b7 	movw	r2, #1463	; 0x5b7
 801ac40:	4918      	ldr	r1, [pc, #96]	; (801aca4 <dhcp_option_long+0x80>)
 801ac42:	4819      	ldr	r0, [pc, #100]	; (801aca8 <dhcp_option_long+0x84>)
 801ac44:	f00b fb74 	bl	8026330 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 801ac48:	89fb      	ldrh	r3, [r7, #14]
 801ac4a:	1c5a      	adds	r2, r3, #1
 801ac4c:	81fa      	strh	r2, [r7, #14]
 801ac4e:	461a      	mov	r2, r3
 801ac50:	68bb      	ldr	r3, [r7, #8]
 801ac52:	4413      	add	r3, r2
 801ac54:	687a      	ldr	r2, [r7, #4]
 801ac56:	0e12      	lsrs	r2, r2, #24
 801ac58:	b2d2      	uxtb	r2, r2
 801ac5a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 801ac5c:	89fb      	ldrh	r3, [r7, #14]
 801ac5e:	1c5a      	adds	r2, r3, #1
 801ac60:	81fa      	strh	r2, [r7, #14]
 801ac62:	461a      	mov	r2, r3
 801ac64:	68bb      	ldr	r3, [r7, #8]
 801ac66:	4413      	add	r3, r2
 801ac68:	687a      	ldr	r2, [r7, #4]
 801ac6a:	0c12      	lsrs	r2, r2, #16
 801ac6c:	b2d2      	uxtb	r2, r2
 801ac6e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 801ac70:	89fb      	ldrh	r3, [r7, #14]
 801ac72:	1c5a      	adds	r2, r3, #1
 801ac74:	81fa      	strh	r2, [r7, #14]
 801ac76:	461a      	mov	r2, r3
 801ac78:	68bb      	ldr	r3, [r7, #8]
 801ac7a:	4413      	add	r3, r2
 801ac7c:	687a      	ldr	r2, [r7, #4]
 801ac7e:	0a12      	lsrs	r2, r2, #8
 801ac80:	b2d2      	uxtb	r2, r2
 801ac82:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 801ac84:	89fb      	ldrh	r3, [r7, #14]
 801ac86:	1c5a      	adds	r2, r3, #1
 801ac88:	81fa      	strh	r2, [r7, #14]
 801ac8a:	461a      	mov	r2, r3
 801ac8c:	68bb      	ldr	r3, [r7, #8]
 801ac8e:	4413      	add	r3, r2
 801ac90:	687a      	ldr	r2, [r7, #4]
 801ac92:	b2d2      	uxtb	r2, r2
 801ac94:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801ac96:	89fb      	ldrh	r3, [r7, #14]
}
 801ac98:	4618      	mov	r0, r3
 801ac9a:	3710      	adds	r7, #16
 801ac9c:	46bd      	mov	sp, r7
 801ac9e:	bd80      	pop	{r7, pc}
 801aca0:	08027c60 	.word	0x08027c60
 801aca4:	08027eac 	.word	0x08027eac
 801aca8:	08027cc0 	.word	0x08027cc0

0801acac <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 801acac:	b580      	push	{r7, lr}
 801acae:	b090      	sub	sp, #64	; 0x40
 801acb0:	af00      	add	r7, sp, #0
 801acb2:	6078      	str	r0, [r7, #4]
 801acb4:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 801acb6:	2300      	movs	r3, #0
 801acb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 801acba:	2300      	movs	r3, #0
 801acbc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 801acbe:	220a      	movs	r2, #10
 801acc0:	2100      	movs	r1, #0
 801acc2:	48ba      	ldr	r0, [pc, #744]	; (801afac <dhcp_parse_reply+0x300>)
 801acc4:	f00b fa80 	bl	80261c8 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 801acc8:	687b      	ldr	r3, [r7, #4]
 801acca:	895b      	ldrh	r3, [r3, #10]
 801accc:	2b2b      	cmp	r3, #43	; 0x2b
 801acce:	d802      	bhi.n	801acd6 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 801acd0:	f06f 0301 	mvn.w	r3, #1
 801acd4:	e2ed      	b.n	801b2b2 <dhcp_parse_reply+0x606>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 801acd6:	687b      	ldr	r3, [r7, #4]
 801acd8:	685b      	ldr	r3, [r3, #4]
 801acda:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 801acdc:	23f0      	movs	r3, #240	; 0xf0
 801acde:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 801ace0:	687b      	ldr	r3, [r7, #4]
 801ace2:	891b      	ldrh	r3, [r3, #8]
 801ace4:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 801ace6:	687b      	ldr	r3, [r7, #4]
 801ace8:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 801acea:	e00c      	b.n	801ad06 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 801acec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801acee:	895b      	ldrh	r3, [r3, #10]
 801acf0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801acf2:	1ad3      	subs	r3, r2, r3
 801acf4:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 801acf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801acf8:	895b      	ldrh	r3, [r3, #10]
 801acfa:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 801acfc:	1ad3      	subs	r3, r2, r3
 801acfe:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 801ad00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ad02:	681b      	ldr	r3, [r3, #0]
 801ad04:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 801ad06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ad08:	2b00      	cmp	r3, #0
 801ad0a:	d004      	beq.n	801ad16 <dhcp_parse_reply+0x6a>
 801ad0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ad0e:	895b      	ldrh	r3, [r3, #10]
 801ad10:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801ad12:	429a      	cmp	r2, r3
 801ad14:	d2ea      	bcs.n	801acec <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 801ad16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ad18:	2b00      	cmp	r3, #0
 801ad1a:	d102      	bne.n	801ad22 <dhcp_parse_reply+0x76>
    return ERR_BUF;
 801ad1c:	f06f 0301 	mvn.w	r3, #1
 801ad20:	e2c7      	b.n	801b2b2 <dhcp_parse_reply+0x606>
  }
  offset = options_idx;
 801ad22:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801ad24:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 801ad26:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801ad28:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 801ad2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ad2c:	685b      	ldr	r3, [r3, #4]
 801ad2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801ad30:	e26a      	b.n	801b208 <dhcp_parse_reply+0x55c>
    u8_t op = options[offset];
 801ad32:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801ad34:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801ad36:	4413      	add	r3, r2
 801ad38:	781b      	ldrb	r3, [r3, #0]
 801ad3a:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 801ad3c:	2300      	movs	r3, #0
 801ad3e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 801ad42:	f04f 33ff 	mov.w	r3, #4294967295
 801ad46:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 801ad48:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801ad4a:	3302      	adds	r3, #2
 801ad4c:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 801ad4e:	8bfa      	ldrh	r2, [r7, #30]
 801ad50:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801ad52:	429a      	cmp	r2, r3
 801ad54:	d202      	bcs.n	801ad5c <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 801ad56:	f06f 0301 	mvn.w	r3, #1
 801ad5a:	e2aa      	b.n	801b2b2 <dhcp_parse_reply+0x606>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 801ad5c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801ad5e:	3301      	adds	r3, #1
 801ad60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801ad62:	8952      	ldrh	r2, [r2, #10]
 801ad64:	4293      	cmp	r3, r2
 801ad66:	da07      	bge.n	801ad78 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 801ad68:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801ad6a:	3301      	adds	r3, #1
 801ad6c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801ad6e:	4413      	add	r3, r2
 801ad70:	781b      	ldrb	r3, [r3, #0]
 801ad72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801ad76:	e00b      	b.n	801ad90 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 801ad78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ad7a:	681b      	ldr	r3, [r3, #0]
 801ad7c:	2b00      	cmp	r3, #0
 801ad7e:	d004      	beq.n	801ad8a <dhcp_parse_reply+0xde>
 801ad80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ad82:	681b      	ldr	r3, [r3, #0]
 801ad84:	685b      	ldr	r3, [r3, #4]
 801ad86:	781b      	ldrb	r3, [r3, #0]
 801ad88:	e000      	b.n	801ad8c <dhcp_parse_reply+0xe0>
 801ad8a:	2300      	movs	r3, #0
 801ad8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 801ad90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801ad94:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 801ad98:	7dfb      	ldrb	r3, [r7, #23]
 801ad9a:	2b3b      	cmp	r3, #59	; 0x3b
 801ad9c:	f200 815a 	bhi.w	801b054 <dhcp_parse_reply+0x3a8>
 801ada0:	a201      	add	r2, pc, #4	; (adr r2, 801ada8 <dhcp_parse_reply+0xfc>)
 801ada2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ada6:	bf00      	nop
 801ada8:	0801ae99 	.word	0x0801ae99
 801adac:	0801aea9 	.word	0x0801aea9
 801adb0:	0801b055 	.word	0x0801b055
 801adb4:	0801aecb 	.word	0x0801aecb
 801adb8:	0801b055 	.word	0x0801b055
 801adbc:	0801b055 	.word	0x0801b055
 801adc0:	0801aef7 	.word	0x0801aef7
 801adc4:	0801b055 	.word	0x0801b055
 801adc8:	0801b055 	.word	0x0801b055
 801adcc:	0801b055 	.word	0x0801b055
 801add0:	0801b055 	.word	0x0801b055
 801add4:	0801b055 	.word	0x0801b055
 801add8:	0801b055 	.word	0x0801b055
 801addc:	0801b055 	.word	0x0801b055
 801ade0:	0801b055 	.word	0x0801b055
 801ade4:	0801b055 	.word	0x0801b055
 801ade8:	0801b055 	.word	0x0801b055
 801adec:	0801b055 	.word	0x0801b055
 801adf0:	0801b055 	.word	0x0801b055
 801adf4:	0801b055 	.word	0x0801b055
 801adf8:	0801b055 	.word	0x0801b055
 801adfc:	0801b055 	.word	0x0801b055
 801ae00:	0801b055 	.word	0x0801b055
 801ae04:	0801b055 	.word	0x0801b055
 801ae08:	0801b055 	.word	0x0801b055
 801ae0c:	0801b055 	.word	0x0801b055
 801ae10:	0801b055 	.word	0x0801b055
 801ae14:	0801b055 	.word	0x0801b055
 801ae18:	0801b055 	.word	0x0801b055
 801ae1c:	0801b055 	.word	0x0801b055
 801ae20:	0801b055 	.word	0x0801b055
 801ae24:	0801b055 	.word	0x0801b055
 801ae28:	0801b055 	.word	0x0801b055
 801ae2c:	0801b055 	.word	0x0801b055
 801ae30:	0801b055 	.word	0x0801b055
 801ae34:	0801b055 	.word	0x0801b055
 801ae38:	0801b055 	.word	0x0801b055
 801ae3c:	0801b055 	.word	0x0801b055
 801ae40:	0801b055 	.word	0x0801b055
 801ae44:	0801b055 	.word	0x0801b055
 801ae48:	0801b055 	.word	0x0801b055
 801ae4c:	0801b055 	.word	0x0801b055
 801ae50:	0801b055 	.word	0x0801b055
 801ae54:	0801b055 	.word	0x0801b055
 801ae58:	0801b055 	.word	0x0801b055
 801ae5c:	0801b055 	.word	0x0801b055
 801ae60:	0801b055 	.word	0x0801b055
 801ae64:	0801b055 	.word	0x0801b055
 801ae68:	0801b055 	.word	0x0801b055
 801ae6c:	0801b055 	.word	0x0801b055
 801ae70:	0801b055 	.word	0x0801b055
 801ae74:	0801af4d 	.word	0x0801af4d
 801ae78:	0801af6f 	.word	0x0801af6f
 801ae7c:	0801afcd 	.word	0x0801afcd
 801ae80:	0801afef 	.word	0x0801afef
 801ae84:	0801b055 	.word	0x0801b055
 801ae88:	0801b055 	.word	0x0801b055
 801ae8c:	0801b055 	.word	0x0801b055
 801ae90:	0801b011 	.word	0x0801b011
 801ae94:	0801b033 	.word	0x0801b033
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 801ae98:	2300      	movs	r3, #0
 801ae9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801ae9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801aea2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 801aea6:	e0d9      	b.n	801b05c <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801aea8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801aeac:	2b04      	cmp	r3, #4
 801aeae:	d009      	beq.n	801aec4 <dhcp_parse_reply+0x218>
 801aeb0:	4b3f      	ldr	r3, [pc, #252]	; (801afb0 <dhcp_parse_reply+0x304>)
 801aeb2:	f240 622e 	movw	r2, #1582	; 0x62e
 801aeb6:	493f      	ldr	r1, [pc, #252]	; (801afb4 <dhcp_parse_reply+0x308>)
 801aeb8:	483f      	ldr	r0, [pc, #252]	; (801afb8 <dhcp_parse_reply+0x30c>)
 801aeba:	f00b fa39 	bl	8026330 <iprintf>
 801aebe:	f06f 0305 	mvn.w	r3, #5
 801aec2:	e1f6      	b.n	801b2b2 <dhcp_parse_reply+0x606>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 801aec4:	2306      	movs	r3, #6
 801aec6:	623b      	str	r3, [r7, #32]
        break;
 801aec8:	e0c8      	b.n	801b05c <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 801aeca:	2304      	movs	r3, #4
 801aecc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 801aed0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801aed4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801aed8:	429a      	cmp	r2, r3
 801aeda:	d209      	bcs.n	801aef0 <dhcp_parse_reply+0x244>
 801aedc:	4b34      	ldr	r3, [pc, #208]	; (801afb0 <dhcp_parse_reply+0x304>)
 801aede:	f240 6233 	movw	r2, #1587	; 0x633
 801aee2:	4936      	ldr	r1, [pc, #216]	; (801afbc <dhcp_parse_reply+0x310>)
 801aee4:	4834      	ldr	r0, [pc, #208]	; (801afb8 <dhcp_parse_reply+0x30c>)
 801aee6:	f00b fa23 	bl	8026330 <iprintf>
 801aeea:	f06f 0305 	mvn.w	r3, #5
 801aeee:	e1e0      	b.n	801b2b2 <dhcp_parse_reply+0x606>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 801aef0:	2307      	movs	r3, #7
 801aef2:	623b      	str	r3, [r7, #32]
        break;
 801aef4:	e0b2      	b.n	801b05c <dhcp_parse_reply+0x3b0>
#if LWIP_DHCP_PROVIDE_DNS_SERVERS
      case (DHCP_OPTION_DNS_SERVER):
        /* special case: there might be more than one server */
        LWIP_ERROR("len %% 4 == 0", len % 4 == 0, return ERR_VAL;);
 801aef6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801aefa:	f003 0303 	and.w	r3, r3, #3
 801aefe:	b2db      	uxtb	r3, r3
 801af00:	2b00      	cmp	r3, #0
 801af02:	d009      	beq.n	801af18 <dhcp_parse_reply+0x26c>
 801af04:	4b2a      	ldr	r3, [pc, #168]	; (801afb0 <dhcp_parse_reply+0x304>)
 801af06:	f240 6239 	movw	r2, #1593	; 0x639
 801af0a:	492d      	ldr	r1, [pc, #180]	; (801afc0 <dhcp_parse_reply+0x314>)
 801af0c:	482a      	ldr	r0, [pc, #168]	; (801afb8 <dhcp_parse_reply+0x30c>)
 801af0e:	f00b fa0f 	bl	8026330 <iprintf>
 801af12:	f06f 0305 	mvn.w	r3, #5
 801af16:	e1cc      	b.n	801b2b2 <dhcp_parse_reply+0x606>
        /* limit number of DNS servers */
        decode_len = LWIP_MIN(len, 4 * DNS_MAX_SERVERS);
 801af18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801af1c:	2b08      	cmp	r3, #8
 801af1e:	bf28      	it	cs
 801af20:	2308      	movcs	r3, #8
 801af22:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 801af26:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801af2a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801af2e:	429a      	cmp	r2, r3
 801af30:	d209      	bcs.n	801af46 <dhcp_parse_reply+0x29a>
 801af32:	4b1f      	ldr	r3, [pc, #124]	; (801afb0 <dhcp_parse_reply+0x304>)
 801af34:	f240 623c 	movw	r2, #1596	; 0x63c
 801af38:	4920      	ldr	r1, [pc, #128]	; (801afbc <dhcp_parse_reply+0x310>)
 801af3a:	481f      	ldr	r0, [pc, #124]	; (801afb8 <dhcp_parse_reply+0x30c>)
 801af3c:	f00b f9f8 	bl	8026330 <iprintf>
 801af40:	f06f 0305 	mvn.w	r3, #5
 801af44:	e1b5      	b.n	801b2b2 <dhcp_parse_reply+0x606>
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
 801af46:	2308      	movs	r3, #8
 801af48:	623b      	str	r3, [r7, #32]
        break;
 801af4a:	e087      	b.n	801b05c <dhcp_parse_reply+0x3b0>
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801af4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801af50:	2b04      	cmp	r3, #4
 801af52:	d009      	beq.n	801af68 <dhcp_parse_reply+0x2bc>
 801af54:	4b16      	ldr	r3, [pc, #88]	; (801afb0 <dhcp_parse_reply+0x304>)
 801af56:	f240 6241 	movw	r2, #1601	; 0x641
 801af5a:	4916      	ldr	r1, [pc, #88]	; (801afb4 <dhcp_parse_reply+0x308>)
 801af5c:	4816      	ldr	r0, [pc, #88]	; (801afb8 <dhcp_parse_reply+0x30c>)
 801af5e:	f00b f9e7 	bl	8026330 <iprintf>
 801af62:	f06f 0305 	mvn.w	r3, #5
 801af66:	e1a4      	b.n	801b2b2 <dhcp_parse_reply+0x606>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 801af68:	2303      	movs	r3, #3
 801af6a:	623b      	str	r3, [r7, #32]
        break;
 801af6c:	e076      	b.n	801b05c <dhcp_parse_reply+0x3b0>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801af6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801af72:	2b01      	cmp	r3, #1
 801af74:	d009      	beq.n	801af8a <dhcp_parse_reply+0x2de>
 801af76:	4b0e      	ldr	r3, [pc, #56]	; (801afb0 <dhcp_parse_reply+0x304>)
 801af78:	f240 624f 	movw	r2, #1615	; 0x64f
 801af7c:	4911      	ldr	r1, [pc, #68]	; (801afc4 <dhcp_parse_reply+0x318>)
 801af7e:	480e      	ldr	r0, [pc, #56]	; (801afb8 <dhcp_parse_reply+0x30c>)
 801af80:	f00b f9d6 	bl	8026330 <iprintf>
 801af84:	f06f 0305 	mvn.w	r3, #5
 801af88:	e193      	b.n	801b2b2 <dhcp_parse_reply+0x606>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 801af8a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801af8c:	2bf0      	cmp	r3, #240	; 0xf0
 801af8e:	d009      	beq.n	801afa4 <dhcp_parse_reply+0x2f8>
 801af90:	4b07      	ldr	r3, [pc, #28]	; (801afb0 <dhcp_parse_reply+0x304>)
 801af92:	f240 6251 	movw	r2, #1617	; 0x651
 801af96:	490c      	ldr	r1, [pc, #48]	; (801afc8 <dhcp_parse_reply+0x31c>)
 801af98:	4807      	ldr	r0, [pc, #28]	; (801afb8 <dhcp_parse_reply+0x30c>)
 801af9a:	f00b f9c9 	bl	8026330 <iprintf>
 801af9e:	f06f 0305 	mvn.w	r3, #5
 801afa2:	e186      	b.n	801b2b2 <dhcp_parse_reply+0x606>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 801afa4:	2300      	movs	r3, #0
 801afa6:	623b      	str	r3, [r7, #32]
        break;
 801afa8:	e058      	b.n	801b05c <dhcp_parse_reply+0x3b0>
 801afaa:	bf00      	nop
 801afac:	2001ca14 	.word	0x2001ca14
 801afb0:	08027c60 	.word	0x08027c60
 801afb4:	08027ee8 	.word	0x08027ee8
 801afb8:	08027cc0 	.word	0x08027cc0
 801afbc:	08027ef4 	.word	0x08027ef4
 801afc0:	08027f08 	.word	0x08027f08
 801afc4:	08027f18 	.word	0x08027f18
 801afc8:	08027f24 	.word	0x08027f24
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801afcc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801afd0:	2b01      	cmp	r3, #1
 801afd2:	d009      	beq.n	801afe8 <dhcp_parse_reply+0x33c>
 801afd4:	4ba7      	ldr	r3, [pc, #668]	; (801b274 <dhcp_parse_reply+0x5c8>)
 801afd6:	f240 6255 	movw	r2, #1621	; 0x655
 801afda:	49a7      	ldr	r1, [pc, #668]	; (801b278 <dhcp_parse_reply+0x5cc>)
 801afdc:	48a7      	ldr	r0, [pc, #668]	; (801b27c <dhcp_parse_reply+0x5d0>)
 801afde:	f00b f9a7 	bl	8026330 <iprintf>
 801afe2:	f06f 0305 	mvn.w	r3, #5
 801afe6:	e164      	b.n	801b2b2 <dhcp_parse_reply+0x606>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 801afe8:	2301      	movs	r3, #1
 801afea:	623b      	str	r3, [r7, #32]
        break;
 801afec:	e036      	b.n	801b05c <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801afee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801aff2:	2b04      	cmp	r3, #4
 801aff4:	d009      	beq.n	801b00a <dhcp_parse_reply+0x35e>
 801aff6:	4b9f      	ldr	r3, [pc, #636]	; (801b274 <dhcp_parse_reply+0x5c8>)
 801aff8:	f240 6259 	movw	r2, #1625	; 0x659
 801affc:	49a0      	ldr	r1, [pc, #640]	; (801b280 <dhcp_parse_reply+0x5d4>)
 801affe:	489f      	ldr	r0, [pc, #636]	; (801b27c <dhcp_parse_reply+0x5d0>)
 801b000:	f00b f996 	bl	8026330 <iprintf>
 801b004:	f06f 0305 	mvn.w	r3, #5
 801b008:	e153      	b.n	801b2b2 <dhcp_parse_reply+0x606>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 801b00a:	2302      	movs	r3, #2
 801b00c:	623b      	str	r3, [r7, #32]
        break;
 801b00e:	e025      	b.n	801b05c <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801b010:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b014:	2b04      	cmp	r3, #4
 801b016:	d009      	beq.n	801b02c <dhcp_parse_reply+0x380>
 801b018:	4b96      	ldr	r3, [pc, #600]	; (801b274 <dhcp_parse_reply+0x5c8>)
 801b01a:	f240 625d 	movw	r2, #1629	; 0x65d
 801b01e:	4998      	ldr	r1, [pc, #608]	; (801b280 <dhcp_parse_reply+0x5d4>)
 801b020:	4896      	ldr	r0, [pc, #600]	; (801b27c <dhcp_parse_reply+0x5d0>)
 801b022:	f00b f985 	bl	8026330 <iprintf>
 801b026:	f06f 0305 	mvn.w	r3, #5
 801b02a:	e142      	b.n	801b2b2 <dhcp_parse_reply+0x606>
        decode_idx = DHCP_OPTION_IDX_T1;
 801b02c:	2304      	movs	r3, #4
 801b02e:	623b      	str	r3, [r7, #32]
        break;
 801b030:	e014      	b.n	801b05c <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801b032:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b036:	2b04      	cmp	r3, #4
 801b038:	d009      	beq.n	801b04e <dhcp_parse_reply+0x3a2>
 801b03a:	4b8e      	ldr	r3, [pc, #568]	; (801b274 <dhcp_parse_reply+0x5c8>)
 801b03c:	f240 6261 	movw	r2, #1633	; 0x661
 801b040:	498f      	ldr	r1, [pc, #572]	; (801b280 <dhcp_parse_reply+0x5d4>)
 801b042:	488e      	ldr	r0, [pc, #568]	; (801b27c <dhcp_parse_reply+0x5d0>)
 801b044:	f00b f974 	bl	8026330 <iprintf>
 801b048:	f06f 0305 	mvn.w	r3, #5
 801b04c:	e131      	b.n	801b2b2 <dhcp_parse_reply+0x606>
        decode_idx = DHCP_OPTION_IDX_T2;
 801b04e:	2305      	movs	r3, #5
 801b050:	623b      	str	r3, [r7, #32]
        break;
 801b052:	e003      	b.n	801b05c <dhcp_parse_reply+0x3b0>
      default:
        decode_len = 0;
 801b054:	2300      	movs	r3, #0
 801b056:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 801b05a:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 801b05c:	7dfb      	ldrb	r3, [r7, #23]
 801b05e:	2b00      	cmp	r3, #0
 801b060:	d103      	bne.n	801b06a <dhcp_parse_reply+0x3be>
      offset++;
 801b062:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801b064:	3301      	adds	r3, #1
 801b066:	877b      	strh	r3, [r7, #58]	; 0x3a
 801b068:	e0a4      	b.n	801b1b4 <dhcp_parse_reply+0x508>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 801b06a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801b06c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b070:	4413      	add	r3, r2
 801b072:	3302      	adds	r3, #2
 801b074:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801b078:	db02      	blt.n	801b080 <dhcp_parse_reply+0x3d4>
        /* overflow */
        return ERR_BUF;
 801b07a:	f06f 0301 	mvn.w	r3, #1
 801b07e:	e118      	b.n	801b2b2 <dhcp_parse_reply+0x606>
      }
      offset = (u16_t)(offset + len + 2);
 801b080:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b084:	b29a      	uxth	r2, r3
 801b086:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801b088:	4413      	add	r3, r2
 801b08a:	b29b      	uxth	r3, r3
 801b08c:	3302      	adds	r3, #2
 801b08e:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 801b090:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801b094:	2b00      	cmp	r3, #0
 801b096:	f000 808d 	beq.w	801b1b4 <dhcp_parse_reply+0x508>
        u32_t value = 0;
 801b09a:	2300      	movs	r3, #0
 801b09c:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 801b09e:	6a3b      	ldr	r3, [r7, #32]
 801b0a0:	2b00      	cmp	r3, #0
 801b0a2:	db02      	blt.n	801b0aa <dhcp_parse_reply+0x3fe>
 801b0a4:	6a3b      	ldr	r3, [r7, #32]
 801b0a6:	2b09      	cmp	r3, #9
 801b0a8:	dd06      	ble.n	801b0b8 <dhcp_parse_reply+0x40c>
 801b0aa:	4b72      	ldr	r3, [pc, #456]	; (801b274 <dhcp_parse_reply+0x5c8>)
 801b0ac:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 801b0b0:	4974      	ldr	r1, [pc, #464]	; (801b284 <dhcp_parse_reply+0x5d8>)
 801b0b2:	4872      	ldr	r0, [pc, #456]	; (801b27c <dhcp_parse_reply+0x5d0>)
 801b0b4:	f00b f93c 	bl	8026330 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 801b0b8:	4a73      	ldr	r2, [pc, #460]	; (801b288 <dhcp_parse_reply+0x5dc>)
 801b0ba:	6a3b      	ldr	r3, [r7, #32]
 801b0bc:	4413      	add	r3, r2
 801b0be:	781b      	ldrb	r3, [r3, #0]
 801b0c0:	2b00      	cmp	r3, #0
 801b0c2:	d177      	bne.n	801b1b4 <dhcp_parse_reply+0x508>
          copy_len = LWIP_MIN(decode_len, 4);
 801b0c4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801b0c8:	2b03      	cmp	r3, #3
 801b0ca:	d803      	bhi.n	801b0d4 <dhcp_parse_reply+0x428>
 801b0cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801b0d0:	b29b      	uxth	r3, r3
 801b0d2:	e000      	b.n	801b0d6 <dhcp_parse_reply+0x42a>
 801b0d4:	2304      	movs	r3, #4
 801b0d6:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 801b0d8:	8bfb      	ldrh	r3, [r7, #30]
 801b0da:	8aba      	ldrh	r2, [r7, #20]
 801b0dc:	f107 0108 	add.w	r1, r7, #8
 801b0e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801b0e2:	f004 f927 	bl	801f334 <pbuf_copy_partial>
 801b0e6:	4603      	mov	r3, r0
 801b0e8:	461a      	mov	r2, r3
 801b0ea:	8abb      	ldrh	r3, [r7, #20]
 801b0ec:	4293      	cmp	r3, r2
 801b0ee:	d002      	beq.n	801b0f6 <dhcp_parse_reply+0x44a>
            return ERR_BUF;
 801b0f0:	f06f 0301 	mvn.w	r3, #1
 801b0f4:	e0dd      	b.n	801b2b2 <dhcp_parse_reply+0x606>
          }
          if (decode_len > 4) {
 801b0f6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801b0fa:	2b04      	cmp	r3, #4
 801b0fc:	d933      	bls.n	801b166 <dhcp_parse_reply+0x4ba>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 801b0fe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801b102:	f003 0303 	and.w	r3, r3, #3
 801b106:	b2db      	uxtb	r3, r3
 801b108:	2b00      	cmp	r3, #0
 801b10a:	d009      	beq.n	801b120 <dhcp_parse_reply+0x474>
 801b10c:	4b59      	ldr	r3, [pc, #356]	; (801b274 <dhcp_parse_reply+0x5c8>)
 801b10e:	f240 6281 	movw	r2, #1665	; 0x681
 801b112:	495e      	ldr	r1, [pc, #376]	; (801b28c <dhcp_parse_reply+0x5e0>)
 801b114:	4859      	ldr	r0, [pc, #356]	; (801b27c <dhcp_parse_reply+0x5d0>)
 801b116:	f00b f90b 	bl	8026330 <iprintf>
 801b11a:	f06f 0305 	mvn.w	r3, #5
 801b11e:	e0c8      	b.n	801b2b2 <dhcp_parse_reply+0x606>
            dhcp_got_option(dhcp, decode_idx);
 801b120:	4a59      	ldr	r2, [pc, #356]	; (801b288 <dhcp_parse_reply+0x5dc>)
 801b122:	6a3b      	ldr	r3, [r7, #32]
 801b124:	4413      	add	r3, r2
 801b126:	2201      	movs	r2, #1
 801b128:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 801b12a:	68bb      	ldr	r3, [r7, #8]
 801b12c:	4618      	mov	r0, r3
 801b12e:	f7fe f810 	bl	8019152 <lwip_htonl>
 801b132:	4601      	mov	r1, r0
 801b134:	4a56      	ldr	r2, [pc, #344]	; (801b290 <dhcp_parse_reply+0x5e4>)
 801b136:	6a3b      	ldr	r3, [r7, #32]
 801b138:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 801b13c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801b140:	3b04      	subs	r3, #4
 801b142:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 801b146:	8bfb      	ldrh	r3, [r7, #30]
 801b148:	3304      	adds	r3, #4
 801b14a:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 801b14c:	8a7a      	ldrh	r2, [r7, #18]
 801b14e:	8bfb      	ldrh	r3, [r7, #30]
 801b150:	429a      	cmp	r2, r3
 801b152:	d202      	bcs.n	801b15a <dhcp_parse_reply+0x4ae>
              /* overflow */
              return ERR_BUF;
 801b154:	f06f 0301 	mvn.w	r3, #1
 801b158:	e0ab      	b.n	801b2b2 <dhcp_parse_reply+0x606>
            }
            val_offset = next_val_offset;
 801b15a:	8a7b      	ldrh	r3, [r7, #18]
 801b15c:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 801b15e:	6a3b      	ldr	r3, [r7, #32]
 801b160:	3301      	adds	r3, #1
 801b162:	623b      	str	r3, [r7, #32]
            goto decode_next;
 801b164:	e79b      	b.n	801b09e <dhcp_parse_reply+0x3f2>
          } else if (decode_len == 4) {
 801b166:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801b16a:	2b04      	cmp	r3, #4
 801b16c:	d106      	bne.n	801b17c <dhcp_parse_reply+0x4d0>
            value = lwip_ntohl(value);
 801b16e:	68bb      	ldr	r3, [r7, #8]
 801b170:	4618      	mov	r0, r3
 801b172:	f7fd ffee 	bl	8019152 <lwip_htonl>
 801b176:	4603      	mov	r3, r0
 801b178:	60bb      	str	r3, [r7, #8]
 801b17a:	e011      	b.n	801b1a0 <dhcp_parse_reply+0x4f4>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 801b17c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801b180:	2b01      	cmp	r3, #1
 801b182:	d009      	beq.n	801b198 <dhcp_parse_reply+0x4ec>
 801b184:	4b3b      	ldr	r3, [pc, #236]	; (801b274 <dhcp_parse_reply+0x5c8>)
 801b186:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 801b18a:	4942      	ldr	r1, [pc, #264]	; (801b294 <dhcp_parse_reply+0x5e8>)
 801b18c:	483b      	ldr	r0, [pc, #236]	; (801b27c <dhcp_parse_reply+0x5d0>)
 801b18e:	f00b f8cf 	bl	8026330 <iprintf>
 801b192:	f06f 0305 	mvn.w	r3, #5
 801b196:	e08c      	b.n	801b2b2 <dhcp_parse_reply+0x606>
            value = ((u8_t *)&value)[0];
 801b198:	f107 0308 	add.w	r3, r7, #8
 801b19c:	781b      	ldrb	r3, [r3, #0]
 801b19e:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 801b1a0:	4a39      	ldr	r2, [pc, #228]	; (801b288 <dhcp_parse_reply+0x5dc>)
 801b1a2:	6a3b      	ldr	r3, [r7, #32]
 801b1a4:	4413      	add	r3, r2
 801b1a6:	2201      	movs	r2, #1
 801b1a8:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 801b1aa:	68ba      	ldr	r2, [r7, #8]
 801b1ac:	4938      	ldr	r1, [pc, #224]	; (801b290 <dhcp_parse_reply+0x5e4>)
 801b1ae:	6a3b      	ldr	r3, [r7, #32]
 801b1b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 801b1b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b1b6:	895b      	ldrh	r3, [r3, #10]
 801b1b8:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801b1ba:	429a      	cmp	r2, r3
 801b1bc:	d324      	bcc.n	801b208 <dhcp_parse_reply+0x55c>
      offset = (u16_t)(offset - q->len);
 801b1be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b1c0:	895b      	ldrh	r3, [r3, #10]
 801b1c2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801b1c4:	1ad3      	subs	r3, r2, r3
 801b1c6:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 801b1c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b1ca:	895b      	ldrh	r3, [r3, #10]
 801b1cc:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 801b1ce:	1ad3      	subs	r3, r2, r3
 801b1d0:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 801b1d2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801b1d4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801b1d6:	429a      	cmp	r2, r3
 801b1d8:	d213      	bcs.n	801b202 <dhcp_parse_reply+0x556>
        q = q->next;
 801b1da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b1dc:	681b      	ldr	r3, [r3, #0]
 801b1de:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 801b1e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b1e2:	2b00      	cmp	r3, #0
 801b1e4:	d109      	bne.n	801b1fa <dhcp_parse_reply+0x54e>
 801b1e6:	4b23      	ldr	r3, [pc, #140]	; (801b274 <dhcp_parse_reply+0x5c8>)
 801b1e8:	f240 629d 	movw	r2, #1693	; 0x69d
 801b1ec:	492a      	ldr	r1, [pc, #168]	; (801b298 <dhcp_parse_reply+0x5ec>)
 801b1ee:	4823      	ldr	r0, [pc, #140]	; (801b27c <dhcp_parse_reply+0x5d0>)
 801b1f0:	f00b f89e 	bl	8026330 <iprintf>
 801b1f4:	f06f 0305 	mvn.w	r3, #5
 801b1f8:	e05b      	b.n	801b2b2 <dhcp_parse_reply+0x606>
        options = (u8_t *)q->payload;
 801b1fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b1fc:	685b      	ldr	r3, [r3, #4]
 801b1fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 801b200:	e002      	b.n	801b208 <dhcp_parse_reply+0x55c>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 801b202:	f06f 0301 	mvn.w	r3, #1
 801b206:	e054      	b.n	801b2b2 <dhcp_parse_reply+0x606>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801b208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b20a:	2b00      	cmp	r3, #0
 801b20c:	d00a      	beq.n	801b224 <dhcp_parse_reply+0x578>
 801b20e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801b210:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801b212:	429a      	cmp	r2, r3
 801b214:	d206      	bcs.n	801b224 <dhcp_parse_reply+0x578>
 801b216:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801b218:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801b21a:	4413      	add	r3, r2
 801b21c:	781b      	ldrb	r3, [r3, #0]
 801b21e:	2bff      	cmp	r3, #255	; 0xff
 801b220:	f47f ad87 	bne.w	801ad32 <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 801b224:	4b18      	ldr	r3, [pc, #96]	; (801b288 <dhcp_parse_reply+0x5dc>)
 801b226:	781b      	ldrb	r3, [r3, #0]
 801b228:	2b00      	cmp	r3, #0
 801b22a:	d018      	beq.n	801b25e <dhcp_parse_reply+0x5b2>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801b22c:	4b18      	ldr	r3, [pc, #96]	; (801b290 <dhcp_parse_reply+0x5e4>)
 801b22e:	681b      	ldr	r3, [r3, #0]
 801b230:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801b232:	4b15      	ldr	r3, [pc, #84]	; (801b288 <dhcp_parse_reply+0x5dc>)
 801b234:	2200      	movs	r2, #0
 801b236:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 801b238:	68fb      	ldr	r3, [r7, #12]
 801b23a:	2b01      	cmp	r3, #1
 801b23c:	d102      	bne.n	801b244 <dhcp_parse_reply+0x598>
      parse_file_as_options = 1;
 801b23e:	2301      	movs	r3, #1
 801b240:	62fb      	str	r3, [r7, #44]	; 0x2c
 801b242:	e00c      	b.n	801b25e <dhcp_parse_reply+0x5b2>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 801b244:	68fb      	ldr	r3, [r7, #12]
 801b246:	2b02      	cmp	r3, #2
 801b248:	d102      	bne.n	801b250 <dhcp_parse_reply+0x5a4>
      parse_sname_as_options = 1;
 801b24a:	2301      	movs	r3, #1
 801b24c:	62bb      	str	r3, [r7, #40]	; 0x28
 801b24e:	e006      	b.n	801b25e <dhcp_parse_reply+0x5b2>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 801b250:	68fb      	ldr	r3, [r7, #12]
 801b252:	2b03      	cmp	r3, #3
 801b254:	d103      	bne.n	801b25e <dhcp_parse_reply+0x5b2>
      parse_sname_as_options = 1;
 801b256:	2301      	movs	r3, #1
 801b258:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 801b25a:	2301      	movs	r3, #1
 801b25c:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 801b25e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b260:	2b00      	cmp	r3, #0
 801b262:	d01b      	beq.n	801b29c <dhcp_parse_reply+0x5f0>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 801b264:	2300      	movs	r3, #0
 801b266:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 801b268:	236c      	movs	r3, #108	; 0x6c
 801b26a:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 801b26c:	23ec      	movs	r3, #236	; 0xec
 801b26e:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 801b270:	e539      	b.n	801ace6 <dhcp_parse_reply+0x3a>
 801b272:	bf00      	nop
 801b274:	08027c60 	.word	0x08027c60
 801b278:	08027f18 	.word	0x08027f18
 801b27c:	08027cc0 	.word	0x08027cc0
 801b280:	08027ee8 	.word	0x08027ee8
 801b284:	08027f3c 	.word	0x08027f3c
 801b288:	2001ca14 	.word	0x2001ca14
 801b28c:	08027f50 	.word	0x08027f50
 801b290:	2001ca20 	.word	0x2001ca20
 801b294:	08027f68 	.word	0x08027f68
 801b298:	08027f7c 	.word	0x08027f7c
  } else if (parse_sname_as_options) {
 801b29c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b29e:	2b00      	cmp	r3, #0
 801b2a0:	d006      	beq.n	801b2b0 <dhcp_parse_reply+0x604>
    parse_sname_as_options = 0;
 801b2a2:	2300      	movs	r3, #0
 801b2a4:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 801b2a6:	232c      	movs	r3, #44	; 0x2c
 801b2a8:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 801b2aa:	236c      	movs	r3, #108	; 0x6c
 801b2ac:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 801b2ae:	e51a      	b.n	801ace6 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 801b2b0:	2300      	movs	r3, #0
}
 801b2b2:	4618      	mov	r0, r3
 801b2b4:	3740      	adds	r7, #64	; 0x40
 801b2b6:	46bd      	mov	sp, r7
 801b2b8:	bd80      	pop	{r7, pc}
 801b2ba:	bf00      	nop

0801b2bc <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 801b2bc:	b580      	push	{r7, lr}
 801b2be:	b08a      	sub	sp, #40	; 0x28
 801b2c0:	af00      	add	r7, sp, #0
 801b2c2:	60f8      	str	r0, [r7, #12]
 801b2c4:	60b9      	str	r1, [r7, #8]
 801b2c6:	607a      	str	r2, [r7, #4]
 801b2c8:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 801b2ca:	4b5d      	ldr	r3, [pc, #372]	; (801b440 <dhcp_recv+0x184>)
 801b2cc:	685b      	ldr	r3, [r3, #4]
 801b2ce:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801b2d0:	6a3b      	ldr	r3, [r7, #32]
 801b2d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b2d4:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 801b2d6:	687b      	ldr	r3, [r7, #4]
 801b2d8:	685b      	ldr	r3, [r3, #4]
 801b2da:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 801b2dc:	69fb      	ldr	r3, [r7, #28]
 801b2de:	2b00      	cmp	r3, #0
 801b2e0:	f000 80a7 	beq.w	801b432 <dhcp_recv+0x176>
 801b2e4:	69fb      	ldr	r3, [r7, #28]
 801b2e6:	791b      	ldrb	r3, [r3, #4]
 801b2e8:	2b00      	cmp	r3, #0
 801b2ea:	f000 80a2 	beq.w	801b432 <dhcp_recv+0x176>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 801b2ee:	687b      	ldr	r3, [r7, #4]
 801b2f0:	895b      	ldrh	r3, [r3, #10]
 801b2f2:	2b2b      	cmp	r3, #43	; 0x2b
 801b2f4:	f240 8092 	bls.w	801b41c <dhcp_recv+0x160>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 801b2f8:	69bb      	ldr	r3, [r7, #24]
 801b2fa:	781b      	ldrb	r3, [r3, #0]
 801b2fc:	2b02      	cmp	r3, #2
 801b2fe:	f040 808f 	bne.w	801b420 <dhcp_recv+0x164>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801b302:	2300      	movs	r3, #0
 801b304:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801b308:	e011      	b.n	801b32e <dhcp_recv+0x72>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 801b30a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b30e:	6a3a      	ldr	r2, [r7, #32]
 801b310:	4413      	add	r3, r2
 801b312:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 801b316:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b31a:	69b9      	ldr	r1, [r7, #24]
 801b31c:	440b      	add	r3, r1
 801b31e:	7f1b      	ldrb	r3, [r3, #28]
 801b320:	429a      	cmp	r2, r3
 801b322:	d17f      	bne.n	801b424 <dhcp_recv+0x168>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801b324:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b328:	3301      	adds	r3, #1
 801b32a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801b32e:	6a3b      	ldr	r3, [r7, #32]
 801b330:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801b334:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801b338:	429a      	cmp	r2, r3
 801b33a:	d203      	bcs.n	801b344 <dhcp_recv+0x88>
 801b33c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b340:	2b05      	cmp	r3, #5
 801b342:	d9e2      	bls.n	801b30a <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 801b344:	69bb      	ldr	r3, [r7, #24]
 801b346:	685b      	ldr	r3, [r3, #4]
 801b348:	4618      	mov	r0, r3
 801b34a:	f7fd ff02 	bl	8019152 <lwip_htonl>
 801b34e:	4602      	mov	r2, r0
 801b350:	69fb      	ldr	r3, [r7, #28]
 801b352:	681b      	ldr	r3, [r3, #0]
 801b354:	429a      	cmp	r2, r3
 801b356:	d167      	bne.n	801b428 <dhcp_recv+0x16c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 801b358:	69f9      	ldr	r1, [r7, #28]
 801b35a:	6878      	ldr	r0, [r7, #4]
 801b35c:	f7ff fca6 	bl	801acac <dhcp_parse_reply>
 801b360:	4603      	mov	r3, r0
 801b362:	2b00      	cmp	r3, #0
 801b364:	d162      	bne.n	801b42c <dhcp_recv+0x170>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 801b366:	4b37      	ldr	r3, [pc, #220]	; (801b444 <dhcp_recv+0x188>)
 801b368:	785b      	ldrb	r3, [r3, #1]
 801b36a:	2b00      	cmp	r3, #0
 801b36c:	d060      	beq.n	801b430 <dhcp_recv+0x174>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 801b36e:	687b      	ldr	r3, [r7, #4]
 801b370:	685b      	ldr	r3, [r3, #4]
 801b372:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 801b374:	4b34      	ldr	r3, [pc, #208]	; (801b448 <dhcp_recv+0x18c>)
 801b376:	685b      	ldr	r3, [r3, #4]
 801b378:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 801b37a:	7cfb      	ldrb	r3, [r7, #19]
 801b37c:	2b05      	cmp	r3, #5
 801b37e:	d12a      	bne.n	801b3d6 <dhcp_recv+0x11a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 801b380:	69fb      	ldr	r3, [r7, #28]
 801b382:	795b      	ldrb	r3, [r3, #5]
 801b384:	2b01      	cmp	r3, #1
 801b386:	d112      	bne.n	801b3ae <dhcp_recv+0xf2>
      dhcp_handle_ack(netif, msg_in);
 801b388:	6979      	ldr	r1, [r7, #20]
 801b38a:	6a38      	ldr	r0, [r7, #32]
 801b38c:	f7fe fe00 	bl	8019f90 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 801b390:	6a3b      	ldr	r3, [r7, #32]
 801b392:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801b396:	f003 0308 	and.w	r3, r3, #8
 801b39a:	2b00      	cmp	r3, #0
 801b39c:	d003      	beq.n	801b3a6 <dhcp_recv+0xea>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 801b39e:	6a38      	ldr	r0, [r7, #32]
 801b3a0:	f7fe fb6e 	bl	8019a80 <dhcp_check>
 801b3a4:	e045      	b.n	801b432 <dhcp_recv+0x176>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 801b3a6:	6a38      	ldr	r0, [r7, #32]
 801b3a8:	f7ff f834 	bl	801a414 <dhcp_bind>
 801b3ac:	e041      	b.n	801b432 <dhcp_recv+0x176>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801b3ae:	69fb      	ldr	r3, [r7, #28]
 801b3b0:	795b      	ldrb	r3, [r3, #5]
 801b3b2:	2b03      	cmp	r3, #3
 801b3b4:	d007      	beq.n	801b3c6 <dhcp_recv+0x10a>
 801b3b6:	69fb      	ldr	r3, [r7, #28]
 801b3b8:	795b      	ldrb	r3, [r3, #5]
 801b3ba:	2b04      	cmp	r3, #4
 801b3bc:	d003      	beq.n	801b3c6 <dhcp_recv+0x10a>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 801b3be:	69fb      	ldr	r3, [r7, #28]
 801b3c0:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801b3c2:	2b05      	cmp	r3, #5
 801b3c4:	d135      	bne.n	801b432 <dhcp_recv+0x176>
      dhcp_handle_ack(netif, msg_in);
 801b3c6:	6979      	ldr	r1, [r7, #20]
 801b3c8:	6a38      	ldr	r0, [r7, #32]
 801b3ca:	f7fe fde1 	bl	8019f90 <dhcp_handle_ack>
      dhcp_bind(netif);
 801b3ce:	6a38      	ldr	r0, [r7, #32]
 801b3d0:	f7ff f820 	bl	801a414 <dhcp_bind>
 801b3d4:	e02d      	b.n	801b432 <dhcp_recv+0x176>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 801b3d6:	7cfb      	ldrb	r3, [r7, #19]
 801b3d8:	2b06      	cmp	r3, #6
 801b3da:	d113      	bne.n	801b404 <dhcp_recv+0x148>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801b3dc:	69fb      	ldr	r3, [r7, #28]
 801b3de:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 801b3e0:	2b03      	cmp	r3, #3
 801b3e2:	d00b      	beq.n	801b3fc <dhcp_recv+0x140>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801b3e4:	69fb      	ldr	r3, [r7, #28]
 801b3e6:	795b      	ldrb	r3, [r3, #5]
 801b3e8:	2b01      	cmp	r3, #1
 801b3ea:	d007      	beq.n	801b3fc <dhcp_recv+0x140>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801b3ec:	69fb      	ldr	r3, [r7, #28]
 801b3ee:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801b3f0:	2b04      	cmp	r3, #4
 801b3f2:	d003      	beq.n	801b3fc <dhcp_recv+0x140>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801b3f4:	69fb      	ldr	r3, [r7, #28]
 801b3f6:	795b      	ldrb	r3, [r3, #5]
 801b3f8:	2b05      	cmp	r3, #5
 801b3fa:	d103      	bne.n	801b404 <dhcp_recv+0x148>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 801b3fc:	6a38      	ldr	r0, [r7, #32]
 801b3fe:	f7fe fb25 	bl	8019a4c <dhcp_handle_nak>
 801b402:	e016      	b.n	801b432 <dhcp_recv+0x176>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 801b404:	7cfb      	ldrb	r3, [r7, #19]
 801b406:	2b02      	cmp	r3, #2
 801b408:	d113      	bne.n	801b432 <dhcp_recv+0x176>
 801b40a:	69fb      	ldr	r3, [r7, #28]
 801b40c:	795b      	ldrb	r3, [r3, #5]
 801b40e:	2b06      	cmp	r3, #6
 801b410:	d10f      	bne.n	801b432 <dhcp_recv+0x176>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 801b412:	6979      	ldr	r1, [r7, #20]
 801b414:	6a38      	ldr	r0, [r7, #32]
 801b416:	f7fe fb67 	bl	8019ae8 <dhcp_handle_offer>
 801b41a:	e00a      	b.n	801b432 <dhcp_recv+0x176>
    goto free_pbuf_and_return;
 801b41c:	bf00      	nop
 801b41e:	e008      	b.n	801b432 <dhcp_recv+0x176>
    goto free_pbuf_and_return;
 801b420:	bf00      	nop
 801b422:	e006      	b.n	801b432 <dhcp_recv+0x176>
      goto free_pbuf_and_return;
 801b424:	bf00      	nop
 801b426:	e004      	b.n	801b432 <dhcp_recv+0x176>
    goto free_pbuf_and_return;
 801b428:	bf00      	nop
 801b42a:	e002      	b.n	801b432 <dhcp_recv+0x176>
    goto free_pbuf_and_return;
 801b42c:	bf00      	nop
 801b42e:	e000      	b.n	801b432 <dhcp_recv+0x176>
    goto free_pbuf_and_return;
 801b430:	bf00      	nop
  }

free_pbuf_and_return:
  pbuf_free(p);
 801b432:	6878      	ldr	r0, [r7, #4]
 801b434:	f003 fd78 	bl	801ef28 <pbuf_free>
}
 801b438:	bf00      	nop
 801b43a:	3728      	adds	r7, #40	; 0x28
 801b43c:	46bd      	mov	sp, r7
 801b43e:	bd80      	pop	{r7, pc}
 801b440:	2001c9fc 	.word	0x2001c9fc
 801b444:	2001ca14 	.word	0x2001ca14
 801b448:	2001ca20 	.word	0x2001ca20

0801b44c <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 801b44c:	b580      	push	{r7, lr}
 801b44e:	b088      	sub	sp, #32
 801b450:	af00      	add	r7, sp, #0
 801b452:	60f8      	str	r0, [r7, #12]
 801b454:	60b9      	str	r1, [r7, #8]
 801b456:	603b      	str	r3, [r7, #0]
 801b458:	4613      	mov	r3, r2
 801b45a:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 801b45c:	68fb      	ldr	r3, [r7, #12]
 801b45e:	2b00      	cmp	r3, #0
 801b460:	d108      	bne.n	801b474 <dhcp_create_msg+0x28>
 801b462:	4b5f      	ldr	r3, [pc, #380]	; (801b5e0 <dhcp_create_msg+0x194>)
 801b464:	f240 7269 	movw	r2, #1897	; 0x769
 801b468:	495e      	ldr	r1, [pc, #376]	; (801b5e4 <dhcp_create_msg+0x198>)
 801b46a:	485f      	ldr	r0, [pc, #380]	; (801b5e8 <dhcp_create_msg+0x19c>)
 801b46c:	f00a ff60 	bl	8026330 <iprintf>
 801b470:	2300      	movs	r3, #0
 801b472:	e0b1      	b.n	801b5d8 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 801b474:	68bb      	ldr	r3, [r7, #8]
 801b476:	2b00      	cmp	r3, #0
 801b478:	d108      	bne.n	801b48c <dhcp_create_msg+0x40>
 801b47a:	4b59      	ldr	r3, [pc, #356]	; (801b5e0 <dhcp_create_msg+0x194>)
 801b47c:	f240 726a 	movw	r2, #1898	; 0x76a
 801b480:	495a      	ldr	r1, [pc, #360]	; (801b5ec <dhcp_create_msg+0x1a0>)
 801b482:	4859      	ldr	r0, [pc, #356]	; (801b5e8 <dhcp_create_msg+0x19c>)
 801b484:	f00a ff54 	bl	8026330 <iprintf>
 801b488:	2300      	movs	r3, #0
 801b48a:	e0a5      	b.n	801b5d8 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 801b48c:	f44f 7220 	mov.w	r2, #640	; 0x280
 801b490:	f44f 719a 	mov.w	r1, #308	; 0x134
 801b494:	2036      	movs	r0, #54	; 0x36
 801b496:	f003 fa65 	bl	801e964 <pbuf_alloc>
 801b49a:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 801b49c:	69bb      	ldr	r3, [r7, #24]
 801b49e:	2b00      	cmp	r3, #0
 801b4a0:	d101      	bne.n	801b4a6 <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 801b4a2:	2300      	movs	r3, #0
 801b4a4:	e098      	b.n	801b5d8 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 801b4a6:	69bb      	ldr	r3, [r7, #24]
 801b4a8:	895b      	ldrh	r3, [r3, #10]
 801b4aa:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 801b4ae:	d206      	bcs.n	801b4be <dhcp_create_msg+0x72>
 801b4b0:	4b4b      	ldr	r3, [pc, #300]	; (801b5e0 <dhcp_create_msg+0x194>)
 801b4b2:	f240 7272 	movw	r2, #1906	; 0x772
 801b4b6:	494e      	ldr	r1, [pc, #312]	; (801b5f0 <dhcp_create_msg+0x1a4>)
 801b4b8:	484b      	ldr	r0, [pc, #300]	; (801b5e8 <dhcp_create_msg+0x19c>)
 801b4ba:	f00a ff39 	bl	8026330 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 801b4be:	79fb      	ldrb	r3, [r7, #7]
 801b4c0:	2b03      	cmp	r3, #3
 801b4c2:	d103      	bne.n	801b4cc <dhcp_create_msg+0x80>
 801b4c4:	68bb      	ldr	r3, [r7, #8]
 801b4c6:	795b      	ldrb	r3, [r3, #5]
 801b4c8:	2b03      	cmp	r3, #3
 801b4ca:	d10d      	bne.n	801b4e8 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 801b4cc:	68bb      	ldr	r3, [r7, #8]
 801b4ce:	799b      	ldrb	r3, [r3, #6]
 801b4d0:	2b00      	cmp	r3, #0
 801b4d2:	d105      	bne.n	801b4e0 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 801b4d4:	f00a ffa8 	bl	8026428 <rand>
 801b4d8:	4603      	mov	r3, r0
 801b4da:	461a      	mov	r2, r3
 801b4dc:	4b45      	ldr	r3, [pc, #276]	; (801b5f4 <dhcp_create_msg+0x1a8>)
 801b4de:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 801b4e0:	4b44      	ldr	r3, [pc, #272]	; (801b5f4 <dhcp_create_msg+0x1a8>)
 801b4e2:	681a      	ldr	r2, [r3, #0]
 801b4e4:	68bb      	ldr	r3, [r7, #8]
 801b4e6:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 801b4e8:	69bb      	ldr	r3, [r7, #24]
 801b4ea:	685b      	ldr	r3, [r3, #4]
 801b4ec:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 801b4ee:	f44f 729a 	mov.w	r2, #308	; 0x134
 801b4f2:	2100      	movs	r1, #0
 801b4f4:	6978      	ldr	r0, [r7, #20]
 801b4f6:	f00a fe67 	bl	80261c8 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 801b4fa:	697b      	ldr	r3, [r7, #20]
 801b4fc:	2201      	movs	r2, #1
 801b4fe:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 801b500:	697b      	ldr	r3, [r7, #20]
 801b502:	2201      	movs	r2, #1
 801b504:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 801b506:	68fb      	ldr	r3, [r7, #12]
 801b508:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 801b50c:	697b      	ldr	r3, [r7, #20]
 801b50e:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 801b510:	68bb      	ldr	r3, [r7, #8]
 801b512:	681b      	ldr	r3, [r3, #0]
 801b514:	4618      	mov	r0, r3
 801b516:	f7fd fe1c 	bl	8019152 <lwip_htonl>
 801b51a:	4602      	mov	r2, r0
 801b51c:	697b      	ldr	r3, [r7, #20]
 801b51e:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 801b520:	79fb      	ldrb	r3, [r7, #7]
 801b522:	2b08      	cmp	r3, #8
 801b524:	d010      	beq.n	801b548 <dhcp_create_msg+0xfc>
 801b526:	79fb      	ldrb	r3, [r7, #7]
 801b528:	2b04      	cmp	r3, #4
 801b52a:	d00d      	beq.n	801b548 <dhcp_create_msg+0xfc>
 801b52c:	79fb      	ldrb	r3, [r7, #7]
 801b52e:	2b07      	cmp	r3, #7
 801b530:	d00a      	beq.n	801b548 <dhcp_create_msg+0xfc>
 801b532:	79fb      	ldrb	r3, [r7, #7]
 801b534:	2b03      	cmp	r3, #3
 801b536:	d10c      	bne.n	801b552 <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 801b538:	68bb      	ldr	r3, [r7, #8]
 801b53a:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 801b53c:	2b05      	cmp	r3, #5
 801b53e:	d003      	beq.n	801b548 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 801b540:	68bb      	ldr	r3, [r7, #8]
 801b542:	795b      	ldrb	r3, [r3, #5]
 801b544:	2b04      	cmp	r3, #4
 801b546:	d104      	bne.n	801b552 <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 801b548:	68fb      	ldr	r3, [r7, #12]
 801b54a:	3304      	adds	r3, #4
 801b54c:	681a      	ldr	r2, [r3, #0]
 801b54e:	697b      	ldr	r3, [r7, #20]
 801b550:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801b552:	2300      	movs	r3, #0
 801b554:	83fb      	strh	r3, [r7, #30]
 801b556:	e00c      	b.n	801b572 <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 801b558:	8bfb      	ldrh	r3, [r7, #30]
 801b55a:	8bfa      	ldrh	r2, [r7, #30]
 801b55c:	68f9      	ldr	r1, [r7, #12]
 801b55e:	440a      	add	r2, r1
 801b560:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 801b564:	697a      	ldr	r2, [r7, #20]
 801b566:	4413      	add	r3, r2
 801b568:	460a      	mov	r2, r1
 801b56a:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801b56c:	8bfb      	ldrh	r3, [r7, #30]
 801b56e:	3301      	adds	r3, #1
 801b570:	83fb      	strh	r3, [r7, #30]
 801b572:	8bfb      	ldrh	r3, [r7, #30]
 801b574:	2b05      	cmp	r3, #5
 801b576:	d9ef      	bls.n	801b558 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 801b578:	697b      	ldr	r3, [r7, #20]
 801b57a:	2200      	movs	r2, #0
 801b57c:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 801b580:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 801b584:	2200      	movs	r2, #0
 801b586:	f062 027d 	orn	r2, r2, #125	; 0x7d
 801b58a:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 801b58e:	2200      	movs	r2, #0
 801b590:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 801b594:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 801b598:	2200      	movs	r2, #0
 801b59a:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 801b59e:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 801b5a2:	697b      	ldr	r3, [r7, #20]
 801b5a4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801b5a8:	2301      	movs	r3, #1
 801b5aa:	2235      	movs	r2, #53	; 0x35
 801b5ac:	2000      	movs	r0, #0
 801b5ae:	f7ff faad 	bl	801ab0c <dhcp_option>
 801b5b2:	4603      	mov	r3, r0
 801b5b4:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 801b5b6:	697b      	ldr	r3, [r7, #20]
 801b5b8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801b5bc:	79fa      	ldrb	r2, [r7, #7]
 801b5be:	8a7b      	ldrh	r3, [r7, #18]
 801b5c0:	4618      	mov	r0, r3
 801b5c2:	f7ff fad7 	bl	801ab74 <dhcp_option_byte>
 801b5c6:	4603      	mov	r3, r0
 801b5c8:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 801b5ca:	683b      	ldr	r3, [r7, #0]
 801b5cc:	2b00      	cmp	r3, #0
 801b5ce:	d002      	beq.n	801b5d6 <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 801b5d0:	683b      	ldr	r3, [r7, #0]
 801b5d2:	8a7a      	ldrh	r2, [r7, #18]
 801b5d4:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 801b5d6:	69bb      	ldr	r3, [r7, #24]
}
 801b5d8:	4618      	mov	r0, r3
 801b5da:	3720      	adds	r7, #32
 801b5dc:	46bd      	mov	sp, r7
 801b5de:	bd80      	pop	{r7, pc}
 801b5e0:	08027c60 	.word	0x08027c60
 801b5e4:	08027f90 	.word	0x08027f90
 801b5e8:	08027cc0 	.word	0x08027cc0
 801b5ec:	08027fb0 	.word	0x08027fb0
 801b5f0:	08027fd0 	.word	0x08027fd0
 801b5f4:	20019574 	.word	0x20019574

0801b5f8 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 801b5f8:	b580      	push	{r7, lr}
 801b5fa:	b084      	sub	sp, #16
 801b5fc:	af00      	add	r7, sp, #0
 801b5fe:	4603      	mov	r3, r0
 801b600:	60b9      	str	r1, [r7, #8]
 801b602:	607a      	str	r2, [r7, #4]
 801b604:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 801b606:	89fb      	ldrh	r3, [r7, #14]
 801b608:	1c5a      	adds	r2, r3, #1
 801b60a:	81fa      	strh	r2, [r7, #14]
 801b60c:	461a      	mov	r2, r3
 801b60e:	68bb      	ldr	r3, [r7, #8]
 801b610:	4413      	add	r3, r2
 801b612:	22ff      	movs	r2, #255	; 0xff
 801b614:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801b616:	e007      	b.n	801b628 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 801b618:	89fb      	ldrh	r3, [r7, #14]
 801b61a:	1c5a      	adds	r2, r3, #1
 801b61c:	81fa      	strh	r2, [r7, #14]
 801b61e:	461a      	mov	r2, r3
 801b620:	68bb      	ldr	r3, [r7, #8]
 801b622:	4413      	add	r3, r2
 801b624:	2200      	movs	r2, #0
 801b626:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801b628:	89fb      	ldrh	r3, [r7, #14]
 801b62a:	2b43      	cmp	r3, #67	; 0x43
 801b62c:	d904      	bls.n	801b638 <dhcp_option_trailer+0x40>
 801b62e:	89fb      	ldrh	r3, [r7, #14]
 801b630:	f003 0303 	and.w	r3, r3, #3
 801b634:	2b00      	cmp	r3, #0
 801b636:	d002      	beq.n	801b63e <dhcp_option_trailer+0x46>
 801b638:	89fb      	ldrh	r3, [r7, #14]
 801b63a:	2b43      	cmp	r3, #67	; 0x43
 801b63c:	d9ec      	bls.n	801b618 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 801b63e:	89fb      	ldrh	r3, [r7, #14]
 801b640:	33f0      	adds	r3, #240	; 0xf0
 801b642:	b29b      	uxth	r3, r3
 801b644:	4619      	mov	r1, r3
 801b646:	6878      	ldr	r0, [r7, #4]
 801b648:	f003 fae6 	bl	801ec18 <pbuf_realloc>
}
 801b64c:	bf00      	nop
 801b64e:	3710      	adds	r7, #16
 801b650:	46bd      	mov	sp, r7
 801b652:	bd80      	pop	{r7, pc}

0801b654 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 801b654:	b480      	push	{r7}
 801b656:	b085      	sub	sp, #20
 801b658:	af00      	add	r7, sp, #0
 801b65a:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 801b65c:	687b      	ldr	r3, [r7, #4]
 801b65e:	2b00      	cmp	r3, #0
 801b660:	d017      	beq.n	801b692 <dhcp_supplied_address+0x3e>
 801b662:	687b      	ldr	r3, [r7, #4]
 801b664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b666:	2b00      	cmp	r3, #0
 801b668:	d013      	beq.n	801b692 <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801b66a:	687b      	ldr	r3, [r7, #4]
 801b66c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b66e:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801b670:	68fb      	ldr	r3, [r7, #12]
 801b672:	795b      	ldrb	r3, [r3, #5]
 801b674:	2b0a      	cmp	r3, #10
 801b676:	d007      	beq.n	801b688 <dhcp_supplied_address+0x34>
 801b678:	68fb      	ldr	r3, [r7, #12]
 801b67a:	795b      	ldrb	r3, [r3, #5]
 801b67c:	2b05      	cmp	r3, #5
 801b67e:	d003      	beq.n	801b688 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 801b680:	68fb      	ldr	r3, [r7, #12]
 801b682:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801b684:	2b04      	cmp	r3, #4
 801b686:	d101      	bne.n	801b68c <dhcp_supplied_address+0x38>
 801b688:	2301      	movs	r3, #1
 801b68a:	e000      	b.n	801b68e <dhcp_supplied_address+0x3a>
 801b68c:	2300      	movs	r3, #0
 801b68e:	b2db      	uxtb	r3, r3
 801b690:	e000      	b.n	801b694 <dhcp_supplied_address+0x40>
  }
  return 0;
 801b692:	2300      	movs	r3, #0
}
 801b694:	4618      	mov	r0, r3
 801b696:	3714      	adds	r7, #20
 801b698:	46bd      	mov	sp, r7
 801b69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b69e:	4770      	bx	lr

0801b6a0 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801b6a0:	b580      	push	{r7, lr}
 801b6a2:	b082      	sub	sp, #8
 801b6a4:	af00      	add	r7, sp, #0
 801b6a6:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801b6a8:	4915      	ldr	r1, [pc, #84]	; (801b700 <etharp_free_entry+0x60>)
 801b6aa:	687a      	ldr	r2, [r7, #4]
 801b6ac:	4613      	mov	r3, r2
 801b6ae:	005b      	lsls	r3, r3, #1
 801b6b0:	4413      	add	r3, r2
 801b6b2:	00db      	lsls	r3, r3, #3
 801b6b4:	440b      	add	r3, r1
 801b6b6:	681b      	ldr	r3, [r3, #0]
 801b6b8:	2b00      	cmp	r3, #0
 801b6ba:	d013      	beq.n	801b6e4 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801b6bc:	4910      	ldr	r1, [pc, #64]	; (801b700 <etharp_free_entry+0x60>)
 801b6be:	687a      	ldr	r2, [r7, #4]
 801b6c0:	4613      	mov	r3, r2
 801b6c2:	005b      	lsls	r3, r3, #1
 801b6c4:	4413      	add	r3, r2
 801b6c6:	00db      	lsls	r3, r3, #3
 801b6c8:	440b      	add	r3, r1
 801b6ca:	681b      	ldr	r3, [r3, #0]
 801b6cc:	4618      	mov	r0, r3
 801b6ce:	f003 fc2b 	bl	801ef28 <pbuf_free>
    arp_table[i].q = NULL;
 801b6d2:	490b      	ldr	r1, [pc, #44]	; (801b700 <etharp_free_entry+0x60>)
 801b6d4:	687a      	ldr	r2, [r7, #4]
 801b6d6:	4613      	mov	r3, r2
 801b6d8:	005b      	lsls	r3, r3, #1
 801b6da:	4413      	add	r3, r2
 801b6dc:	00db      	lsls	r3, r3, #3
 801b6de:	440b      	add	r3, r1
 801b6e0:	2200      	movs	r2, #0
 801b6e2:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801b6e4:	4906      	ldr	r1, [pc, #24]	; (801b700 <etharp_free_entry+0x60>)
 801b6e6:	687a      	ldr	r2, [r7, #4]
 801b6e8:	4613      	mov	r3, r2
 801b6ea:	005b      	lsls	r3, r3, #1
 801b6ec:	4413      	add	r3, r2
 801b6ee:	00db      	lsls	r3, r3, #3
 801b6f0:	440b      	add	r3, r1
 801b6f2:	3314      	adds	r3, #20
 801b6f4:	2200      	movs	r2, #0
 801b6f6:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801b6f8:	bf00      	nop
 801b6fa:	3708      	adds	r7, #8
 801b6fc:	46bd      	mov	sp, r7
 801b6fe:	bd80      	pop	{r7, pc}
 801b700:	20019578 	.word	0x20019578

0801b704 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801b704:	b580      	push	{r7, lr}
 801b706:	b082      	sub	sp, #8
 801b708:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801b70a:	2300      	movs	r3, #0
 801b70c:	607b      	str	r3, [r7, #4]
 801b70e:	e096      	b.n	801b83e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801b710:	494f      	ldr	r1, [pc, #316]	; (801b850 <etharp_tmr+0x14c>)
 801b712:	687a      	ldr	r2, [r7, #4]
 801b714:	4613      	mov	r3, r2
 801b716:	005b      	lsls	r3, r3, #1
 801b718:	4413      	add	r3, r2
 801b71a:	00db      	lsls	r3, r3, #3
 801b71c:	440b      	add	r3, r1
 801b71e:	3314      	adds	r3, #20
 801b720:	781b      	ldrb	r3, [r3, #0]
 801b722:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801b724:	78fb      	ldrb	r3, [r7, #3]
 801b726:	2b00      	cmp	r3, #0
 801b728:	f000 8086 	beq.w	801b838 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801b72c:	4948      	ldr	r1, [pc, #288]	; (801b850 <etharp_tmr+0x14c>)
 801b72e:	687a      	ldr	r2, [r7, #4]
 801b730:	4613      	mov	r3, r2
 801b732:	005b      	lsls	r3, r3, #1
 801b734:	4413      	add	r3, r2
 801b736:	00db      	lsls	r3, r3, #3
 801b738:	440b      	add	r3, r1
 801b73a:	3312      	adds	r3, #18
 801b73c:	881b      	ldrh	r3, [r3, #0]
 801b73e:	3301      	adds	r3, #1
 801b740:	b298      	uxth	r0, r3
 801b742:	4943      	ldr	r1, [pc, #268]	; (801b850 <etharp_tmr+0x14c>)
 801b744:	687a      	ldr	r2, [r7, #4]
 801b746:	4613      	mov	r3, r2
 801b748:	005b      	lsls	r3, r3, #1
 801b74a:	4413      	add	r3, r2
 801b74c:	00db      	lsls	r3, r3, #3
 801b74e:	440b      	add	r3, r1
 801b750:	3312      	adds	r3, #18
 801b752:	4602      	mov	r2, r0
 801b754:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801b756:	493e      	ldr	r1, [pc, #248]	; (801b850 <etharp_tmr+0x14c>)
 801b758:	687a      	ldr	r2, [r7, #4]
 801b75a:	4613      	mov	r3, r2
 801b75c:	005b      	lsls	r3, r3, #1
 801b75e:	4413      	add	r3, r2
 801b760:	00db      	lsls	r3, r3, #3
 801b762:	440b      	add	r3, r1
 801b764:	3312      	adds	r3, #18
 801b766:	881b      	ldrh	r3, [r3, #0]
 801b768:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801b76c:	d215      	bcs.n	801b79a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801b76e:	4938      	ldr	r1, [pc, #224]	; (801b850 <etharp_tmr+0x14c>)
 801b770:	687a      	ldr	r2, [r7, #4]
 801b772:	4613      	mov	r3, r2
 801b774:	005b      	lsls	r3, r3, #1
 801b776:	4413      	add	r3, r2
 801b778:	00db      	lsls	r3, r3, #3
 801b77a:	440b      	add	r3, r1
 801b77c:	3314      	adds	r3, #20
 801b77e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801b780:	2b01      	cmp	r3, #1
 801b782:	d10e      	bne.n	801b7a2 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801b784:	4932      	ldr	r1, [pc, #200]	; (801b850 <etharp_tmr+0x14c>)
 801b786:	687a      	ldr	r2, [r7, #4]
 801b788:	4613      	mov	r3, r2
 801b78a:	005b      	lsls	r3, r3, #1
 801b78c:	4413      	add	r3, r2
 801b78e:	00db      	lsls	r3, r3, #3
 801b790:	440b      	add	r3, r1
 801b792:	3312      	adds	r3, #18
 801b794:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801b796:	2b04      	cmp	r3, #4
 801b798:	d903      	bls.n	801b7a2 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801b79a:	6878      	ldr	r0, [r7, #4]
 801b79c:	f7ff ff80 	bl	801b6a0 <etharp_free_entry>
 801b7a0:	e04a      	b.n	801b838 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801b7a2:	492b      	ldr	r1, [pc, #172]	; (801b850 <etharp_tmr+0x14c>)
 801b7a4:	687a      	ldr	r2, [r7, #4]
 801b7a6:	4613      	mov	r3, r2
 801b7a8:	005b      	lsls	r3, r3, #1
 801b7aa:	4413      	add	r3, r2
 801b7ac:	00db      	lsls	r3, r3, #3
 801b7ae:	440b      	add	r3, r1
 801b7b0:	3314      	adds	r3, #20
 801b7b2:	781b      	ldrb	r3, [r3, #0]
 801b7b4:	2b03      	cmp	r3, #3
 801b7b6:	d10a      	bne.n	801b7ce <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801b7b8:	4925      	ldr	r1, [pc, #148]	; (801b850 <etharp_tmr+0x14c>)
 801b7ba:	687a      	ldr	r2, [r7, #4]
 801b7bc:	4613      	mov	r3, r2
 801b7be:	005b      	lsls	r3, r3, #1
 801b7c0:	4413      	add	r3, r2
 801b7c2:	00db      	lsls	r3, r3, #3
 801b7c4:	440b      	add	r3, r1
 801b7c6:	3314      	adds	r3, #20
 801b7c8:	2204      	movs	r2, #4
 801b7ca:	701a      	strb	r2, [r3, #0]
 801b7cc:	e034      	b.n	801b838 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801b7ce:	4920      	ldr	r1, [pc, #128]	; (801b850 <etharp_tmr+0x14c>)
 801b7d0:	687a      	ldr	r2, [r7, #4]
 801b7d2:	4613      	mov	r3, r2
 801b7d4:	005b      	lsls	r3, r3, #1
 801b7d6:	4413      	add	r3, r2
 801b7d8:	00db      	lsls	r3, r3, #3
 801b7da:	440b      	add	r3, r1
 801b7dc:	3314      	adds	r3, #20
 801b7de:	781b      	ldrb	r3, [r3, #0]
 801b7e0:	2b04      	cmp	r3, #4
 801b7e2:	d10a      	bne.n	801b7fa <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801b7e4:	491a      	ldr	r1, [pc, #104]	; (801b850 <etharp_tmr+0x14c>)
 801b7e6:	687a      	ldr	r2, [r7, #4]
 801b7e8:	4613      	mov	r3, r2
 801b7ea:	005b      	lsls	r3, r3, #1
 801b7ec:	4413      	add	r3, r2
 801b7ee:	00db      	lsls	r3, r3, #3
 801b7f0:	440b      	add	r3, r1
 801b7f2:	3314      	adds	r3, #20
 801b7f4:	2202      	movs	r2, #2
 801b7f6:	701a      	strb	r2, [r3, #0]
 801b7f8:	e01e      	b.n	801b838 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801b7fa:	4915      	ldr	r1, [pc, #84]	; (801b850 <etharp_tmr+0x14c>)
 801b7fc:	687a      	ldr	r2, [r7, #4]
 801b7fe:	4613      	mov	r3, r2
 801b800:	005b      	lsls	r3, r3, #1
 801b802:	4413      	add	r3, r2
 801b804:	00db      	lsls	r3, r3, #3
 801b806:	440b      	add	r3, r1
 801b808:	3314      	adds	r3, #20
 801b80a:	781b      	ldrb	r3, [r3, #0]
 801b80c:	2b01      	cmp	r3, #1
 801b80e:	d113      	bne.n	801b838 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801b810:	490f      	ldr	r1, [pc, #60]	; (801b850 <etharp_tmr+0x14c>)
 801b812:	687a      	ldr	r2, [r7, #4]
 801b814:	4613      	mov	r3, r2
 801b816:	005b      	lsls	r3, r3, #1
 801b818:	4413      	add	r3, r2
 801b81a:	00db      	lsls	r3, r3, #3
 801b81c:	440b      	add	r3, r1
 801b81e:	3308      	adds	r3, #8
 801b820:	6818      	ldr	r0, [r3, #0]
 801b822:	687a      	ldr	r2, [r7, #4]
 801b824:	4613      	mov	r3, r2
 801b826:	005b      	lsls	r3, r3, #1
 801b828:	4413      	add	r3, r2
 801b82a:	00db      	lsls	r3, r3, #3
 801b82c:	4a08      	ldr	r2, [pc, #32]	; (801b850 <etharp_tmr+0x14c>)
 801b82e:	4413      	add	r3, r2
 801b830:	3304      	adds	r3, #4
 801b832:	4619      	mov	r1, r3
 801b834:	f000 fe42 	bl	801c4bc <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801b838:	687b      	ldr	r3, [r7, #4]
 801b83a:	3301      	adds	r3, #1
 801b83c:	607b      	str	r3, [r7, #4]
 801b83e:	687b      	ldr	r3, [r7, #4]
 801b840:	2b09      	cmp	r3, #9
 801b842:	f77f af65 	ble.w	801b710 <etharp_tmr+0xc>
      }
    }
  }
}
 801b846:	bf00      	nop
 801b848:	3708      	adds	r7, #8
 801b84a:	46bd      	mov	sp, r7
 801b84c:	bd80      	pop	{r7, pc}
 801b84e:	bf00      	nop
 801b850:	20019578 	.word	0x20019578

0801b854 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801b854:	b580      	push	{r7, lr}
 801b856:	b08a      	sub	sp, #40	; 0x28
 801b858:	af00      	add	r7, sp, #0
 801b85a:	60f8      	str	r0, [r7, #12]
 801b85c:	460b      	mov	r3, r1
 801b85e:	607a      	str	r2, [r7, #4]
 801b860:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801b862:	230a      	movs	r3, #10
 801b864:	84fb      	strh	r3, [r7, #38]	; 0x26
 801b866:	230a      	movs	r3, #10
 801b868:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801b86a:	230a      	movs	r3, #10
 801b86c:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801b86e:	2300      	movs	r3, #0
 801b870:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801b872:	230a      	movs	r3, #10
 801b874:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801b876:	2300      	movs	r3, #0
 801b878:	83bb      	strh	r3, [r7, #28]
 801b87a:	2300      	movs	r3, #0
 801b87c:	837b      	strh	r3, [r7, #26]
 801b87e:	2300      	movs	r3, #0
 801b880:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801b882:	2300      	movs	r3, #0
 801b884:	843b      	strh	r3, [r7, #32]
 801b886:	e0ae      	b.n	801b9e6 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801b888:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801b88c:	49a6      	ldr	r1, [pc, #664]	; (801bb28 <etharp_find_entry+0x2d4>)
 801b88e:	4613      	mov	r3, r2
 801b890:	005b      	lsls	r3, r3, #1
 801b892:	4413      	add	r3, r2
 801b894:	00db      	lsls	r3, r3, #3
 801b896:	440b      	add	r3, r1
 801b898:	3314      	adds	r3, #20
 801b89a:	781b      	ldrb	r3, [r3, #0]
 801b89c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801b89e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801b8a2:	2b0a      	cmp	r3, #10
 801b8a4:	d105      	bne.n	801b8b2 <etharp_find_entry+0x5e>
 801b8a6:	7dfb      	ldrb	r3, [r7, #23]
 801b8a8:	2b00      	cmp	r3, #0
 801b8aa:	d102      	bne.n	801b8b2 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801b8ac:	8c3b      	ldrh	r3, [r7, #32]
 801b8ae:	847b      	strh	r3, [r7, #34]	; 0x22
 801b8b0:	e095      	b.n	801b9de <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801b8b2:	7dfb      	ldrb	r3, [r7, #23]
 801b8b4:	2b00      	cmp	r3, #0
 801b8b6:	f000 8092 	beq.w	801b9de <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801b8ba:	7dfb      	ldrb	r3, [r7, #23]
 801b8bc:	2b01      	cmp	r3, #1
 801b8be:	d009      	beq.n	801b8d4 <etharp_find_entry+0x80>
 801b8c0:	7dfb      	ldrb	r3, [r7, #23]
 801b8c2:	2b01      	cmp	r3, #1
 801b8c4:	d806      	bhi.n	801b8d4 <etharp_find_entry+0x80>
 801b8c6:	4b99      	ldr	r3, [pc, #612]	; (801bb2c <etharp_find_entry+0x2d8>)
 801b8c8:	f44f 7292 	mov.w	r2, #292	; 0x124
 801b8cc:	4998      	ldr	r1, [pc, #608]	; (801bb30 <etharp_find_entry+0x2dc>)
 801b8ce:	4899      	ldr	r0, [pc, #612]	; (801bb34 <etharp_find_entry+0x2e0>)
 801b8d0:	f00a fd2e 	bl	8026330 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801b8d4:	68fb      	ldr	r3, [r7, #12]
 801b8d6:	2b00      	cmp	r3, #0
 801b8d8:	d020      	beq.n	801b91c <etharp_find_entry+0xc8>
 801b8da:	68fb      	ldr	r3, [r7, #12]
 801b8dc:	6819      	ldr	r1, [r3, #0]
 801b8de:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801b8e2:	4891      	ldr	r0, [pc, #580]	; (801bb28 <etharp_find_entry+0x2d4>)
 801b8e4:	4613      	mov	r3, r2
 801b8e6:	005b      	lsls	r3, r3, #1
 801b8e8:	4413      	add	r3, r2
 801b8ea:	00db      	lsls	r3, r3, #3
 801b8ec:	4403      	add	r3, r0
 801b8ee:	3304      	adds	r3, #4
 801b8f0:	681b      	ldr	r3, [r3, #0]
 801b8f2:	4299      	cmp	r1, r3
 801b8f4:	d112      	bne.n	801b91c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801b8f6:	687b      	ldr	r3, [r7, #4]
 801b8f8:	2b00      	cmp	r3, #0
 801b8fa:	d00c      	beq.n	801b916 <etharp_find_entry+0xc2>
 801b8fc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801b900:	4989      	ldr	r1, [pc, #548]	; (801bb28 <etharp_find_entry+0x2d4>)
 801b902:	4613      	mov	r3, r2
 801b904:	005b      	lsls	r3, r3, #1
 801b906:	4413      	add	r3, r2
 801b908:	00db      	lsls	r3, r3, #3
 801b90a:	440b      	add	r3, r1
 801b90c:	3308      	adds	r3, #8
 801b90e:	681a      	ldr	r2, [r3, #0]
 801b910:	687b      	ldr	r3, [r7, #4]
 801b912:	429a      	cmp	r2, r3
 801b914:	d102      	bne.n	801b91c <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801b916:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801b91a:	e100      	b.n	801bb1e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801b91c:	7dfb      	ldrb	r3, [r7, #23]
 801b91e:	2b01      	cmp	r3, #1
 801b920:	d140      	bne.n	801b9a4 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801b922:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801b926:	4980      	ldr	r1, [pc, #512]	; (801bb28 <etharp_find_entry+0x2d4>)
 801b928:	4613      	mov	r3, r2
 801b92a:	005b      	lsls	r3, r3, #1
 801b92c:	4413      	add	r3, r2
 801b92e:	00db      	lsls	r3, r3, #3
 801b930:	440b      	add	r3, r1
 801b932:	681b      	ldr	r3, [r3, #0]
 801b934:	2b00      	cmp	r3, #0
 801b936:	d01a      	beq.n	801b96e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801b938:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801b93c:	497a      	ldr	r1, [pc, #488]	; (801bb28 <etharp_find_entry+0x2d4>)
 801b93e:	4613      	mov	r3, r2
 801b940:	005b      	lsls	r3, r3, #1
 801b942:	4413      	add	r3, r2
 801b944:	00db      	lsls	r3, r3, #3
 801b946:	440b      	add	r3, r1
 801b948:	3312      	adds	r3, #18
 801b94a:	881b      	ldrh	r3, [r3, #0]
 801b94c:	8bba      	ldrh	r2, [r7, #28]
 801b94e:	429a      	cmp	r2, r3
 801b950:	d845      	bhi.n	801b9de <etharp_find_entry+0x18a>
            old_queue = i;
 801b952:	8c3b      	ldrh	r3, [r7, #32]
 801b954:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801b956:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801b95a:	4973      	ldr	r1, [pc, #460]	; (801bb28 <etharp_find_entry+0x2d4>)
 801b95c:	4613      	mov	r3, r2
 801b95e:	005b      	lsls	r3, r3, #1
 801b960:	4413      	add	r3, r2
 801b962:	00db      	lsls	r3, r3, #3
 801b964:	440b      	add	r3, r1
 801b966:	3312      	adds	r3, #18
 801b968:	881b      	ldrh	r3, [r3, #0]
 801b96a:	83bb      	strh	r3, [r7, #28]
 801b96c:	e037      	b.n	801b9de <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801b96e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801b972:	496d      	ldr	r1, [pc, #436]	; (801bb28 <etharp_find_entry+0x2d4>)
 801b974:	4613      	mov	r3, r2
 801b976:	005b      	lsls	r3, r3, #1
 801b978:	4413      	add	r3, r2
 801b97a:	00db      	lsls	r3, r3, #3
 801b97c:	440b      	add	r3, r1
 801b97e:	3312      	adds	r3, #18
 801b980:	881b      	ldrh	r3, [r3, #0]
 801b982:	8b7a      	ldrh	r2, [r7, #26]
 801b984:	429a      	cmp	r2, r3
 801b986:	d82a      	bhi.n	801b9de <etharp_find_entry+0x18a>
            old_pending = i;
 801b988:	8c3b      	ldrh	r3, [r7, #32]
 801b98a:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 801b98c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801b990:	4965      	ldr	r1, [pc, #404]	; (801bb28 <etharp_find_entry+0x2d4>)
 801b992:	4613      	mov	r3, r2
 801b994:	005b      	lsls	r3, r3, #1
 801b996:	4413      	add	r3, r2
 801b998:	00db      	lsls	r3, r3, #3
 801b99a:	440b      	add	r3, r1
 801b99c:	3312      	adds	r3, #18
 801b99e:	881b      	ldrh	r3, [r3, #0]
 801b9a0:	837b      	strh	r3, [r7, #26]
 801b9a2:	e01c      	b.n	801b9de <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801b9a4:	7dfb      	ldrb	r3, [r7, #23]
 801b9a6:	2b01      	cmp	r3, #1
 801b9a8:	d919      	bls.n	801b9de <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801b9aa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801b9ae:	495e      	ldr	r1, [pc, #376]	; (801bb28 <etharp_find_entry+0x2d4>)
 801b9b0:	4613      	mov	r3, r2
 801b9b2:	005b      	lsls	r3, r3, #1
 801b9b4:	4413      	add	r3, r2
 801b9b6:	00db      	lsls	r3, r3, #3
 801b9b8:	440b      	add	r3, r1
 801b9ba:	3312      	adds	r3, #18
 801b9bc:	881b      	ldrh	r3, [r3, #0]
 801b9be:	8b3a      	ldrh	r2, [r7, #24]
 801b9c0:	429a      	cmp	r2, r3
 801b9c2:	d80c      	bhi.n	801b9de <etharp_find_entry+0x18a>
            old_stable = i;
 801b9c4:	8c3b      	ldrh	r3, [r7, #32]
 801b9c6:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 801b9c8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801b9cc:	4956      	ldr	r1, [pc, #344]	; (801bb28 <etharp_find_entry+0x2d4>)
 801b9ce:	4613      	mov	r3, r2
 801b9d0:	005b      	lsls	r3, r3, #1
 801b9d2:	4413      	add	r3, r2
 801b9d4:	00db      	lsls	r3, r3, #3
 801b9d6:	440b      	add	r3, r1
 801b9d8:	3312      	adds	r3, #18
 801b9da:	881b      	ldrh	r3, [r3, #0]
 801b9dc:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801b9de:	8c3b      	ldrh	r3, [r7, #32]
 801b9e0:	3301      	adds	r3, #1
 801b9e2:	b29b      	uxth	r3, r3
 801b9e4:	843b      	strh	r3, [r7, #32]
 801b9e6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801b9ea:	2b09      	cmp	r3, #9
 801b9ec:	f77f af4c 	ble.w	801b888 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801b9f0:	7afb      	ldrb	r3, [r7, #11]
 801b9f2:	f003 0302 	and.w	r3, r3, #2
 801b9f6:	2b00      	cmp	r3, #0
 801b9f8:	d108      	bne.n	801ba0c <etharp_find_entry+0x1b8>
 801b9fa:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801b9fe:	2b0a      	cmp	r3, #10
 801ba00:	d107      	bne.n	801ba12 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801ba02:	7afb      	ldrb	r3, [r7, #11]
 801ba04:	f003 0301 	and.w	r3, r3, #1
 801ba08:	2b00      	cmp	r3, #0
 801ba0a:	d102      	bne.n	801ba12 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801ba0c:	f04f 33ff 	mov.w	r3, #4294967295
 801ba10:	e085      	b.n	801bb1e <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801ba12:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801ba16:	2b09      	cmp	r3, #9
 801ba18:	dc02      	bgt.n	801ba20 <etharp_find_entry+0x1cc>
    i = empty;
 801ba1a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801ba1c:	843b      	strh	r3, [r7, #32]
 801ba1e:	e039      	b.n	801ba94 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801ba20:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801ba24:	2b09      	cmp	r3, #9
 801ba26:	dc14      	bgt.n	801ba52 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801ba28:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801ba2a:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801ba2c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ba30:	493d      	ldr	r1, [pc, #244]	; (801bb28 <etharp_find_entry+0x2d4>)
 801ba32:	4613      	mov	r3, r2
 801ba34:	005b      	lsls	r3, r3, #1
 801ba36:	4413      	add	r3, r2
 801ba38:	00db      	lsls	r3, r3, #3
 801ba3a:	440b      	add	r3, r1
 801ba3c:	681b      	ldr	r3, [r3, #0]
 801ba3e:	2b00      	cmp	r3, #0
 801ba40:	d018      	beq.n	801ba74 <etharp_find_entry+0x220>
 801ba42:	4b3a      	ldr	r3, [pc, #232]	; (801bb2c <etharp_find_entry+0x2d8>)
 801ba44:	f240 126d 	movw	r2, #365	; 0x16d
 801ba48:	493b      	ldr	r1, [pc, #236]	; (801bb38 <etharp_find_entry+0x2e4>)
 801ba4a:	483a      	ldr	r0, [pc, #232]	; (801bb34 <etharp_find_entry+0x2e0>)
 801ba4c:	f00a fc70 	bl	8026330 <iprintf>
 801ba50:	e010      	b.n	801ba74 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801ba52:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801ba56:	2b09      	cmp	r3, #9
 801ba58:	dc02      	bgt.n	801ba60 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801ba5a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801ba5c:	843b      	strh	r3, [r7, #32]
 801ba5e:	e009      	b.n	801ba74 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801ba60:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801ba64:	2b09      	cmp	r3, #9
 801ba66:	dc02      	bgt.n	801ba6e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801ba68:	8bfb      	ldrh	r3, [r7, #30]
 801ba6a:	843b      	strh	r3, [r7, #32]
 801ba6c:	e002      	b.n	801ba74 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801ba6e:	f04f 33ff 	mov.w	r3, #4294967295
 801ba72:	e054      	b.n	801bb1e <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801ba74:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801ba78:	2b09      	cmp	r3, #9
 801ba7a:	dd06      	ble.n	801ba8a <etharp_find_entry+0x236>
 801ba7c:	4b2b      	ldr	r3, [pc, #172]	; (801bb2c <etharp_find_entry+0x2d8>)
 801ba7e:	f240 127f 	movw	r2, #383	; 0x17f
 801ba82:	492e      	ldr	r1, [pc, #184]	; (801bb3c <etharp_find_entry+0x2e8>)
 801ba84:	482b      	ldr	r0, [pc, #172]	; (801bb34 <etharp_find_entry+0x2e0>)
 801ba86:	f00a fc53 	bl	8026330 <iprintf>
    etharp_free_entry(i);
 801ba8a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801ba8e:	4618      	mov	r0, r3
 801ba90:	f7ff fe06 	bl	801b6a0 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801ba94:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801ba98:	2b09      	cmp	r3, #9
 801ba9a:	dd06      	ble.n	801baaa <etharp_find_entry+0x256>
 801ba9c:	4b23      	ldr	r3, [pc, #140]	; (801bb2c <etharp_find_entry+0x2d8>)
 801ba9e:	f240 1283 	movw	r2, #387	; 0x183
 801baa2:	4926      	ldr	r1, [pc, #152]	; (801bb3c <etharp_find_entry+0x2e8>)
 801baa4:	4823      	ldr	r0, [pc, #140]	; (801bb34 <etharp_find_entry+0x2e0>)
 801baa6:	f00a fc43 	bl	8026330 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801baaa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801baae:	491e      	ldr	r1, [pc, #120]	; (801bb28 <etharp_find_entry+0x2d4>)
 801bab0:	4613      	mov	r3, r2
 801bab2:	005b      	lsls	r3, r3, #1
 801bab4:	4413      	add	r3, r2
 801bab6:	00db      	lsls	r3, r3, #3
 801bab8:	440b      	add	r3, r1
 801baba:	3314      	adds	r3, #20
 801babc:	781b      	ldrb	r3, [r3, #0]
 801babe:	2b00      	cmp	r3, #0
 801bac0:	d006      	beq.n	801bad0 <etharp_find_entry+0x27c>
 801bac2:	4b1a      	ldr	r3, [pc, #104]	; (801bb2c <etharp_find_entry+0x2d8>)
 801bac4:	f240 1285 	movw	r2, #389	; 0x185
 801bac8:	491d      	ldr	r1, [pc, #116]	; (801bb40 <etharp_find_entry+0x2ec>)
 801baca:	481a      	ldr	r0, [pc, #104]	; (801bb34 <etharp_find_entry+0x2e0>)
 801bacc:	f00a fc30 	bl	8026330 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801bad0:	68fb      	ldr	r3, [r7, #12]
 801bad2:	2b00      	cmp	r3, #0
 801bad4:	d00b      	beq.n	801baee <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801bad6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801bada:	68fb      	ldr	r3, [r7, #12]
 801badc:	6819      	ldr	r1, [r3, #0]
 801bade:	4812      	ldr	r0, [pc, #72]	; (801bb28 <etharp_find_entry+0x2d4>)
 801bae0:	4613      	mov	r3, r2
 801bae2:	005b      	lsls	r3, r3, #1
 801bae4:	4413      	add	r3, r2
 801bae6:	00db      	lsls	r3, r3, #3
 801bae8:	4403      	add	r3, r0
 801baea:	3304      	adds	r3, #4
 801baec:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801baee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801baf2:	490d      	ldr	r1, [pc, #52]	; (801bb28 <etharp_find_entry+0x2d4>)
 801baf4:	4613      	mov	r3, r2
 801baf6:	005b      	lsls	r3, r3, #1
 801baf8:	4413      	add	r3, r2
 801bafa:	00db      	lsls	r3, r3, #3
 801bafc:	440b      	add	r3, r1
 801bafe:	3312      	adds	r3, #18
 801bb00:	2200      	movs	r2, #0
 801bb02:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801bb04:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801bb08:	4907      	ldr	r1, [pc, #28]	; (801bb28 <etharp_find_entry+0x2d4>)
 801bb0a:	4613      	mov	r3, r2
 801bb0c:	005b      	lsls	r3, r3, #1
 801bb0e:	4413      	add	r3, r2
 801bb10:	00db      	lsls	r3, r3, #3
 801bb12:	440b      	add	r3, r1
 801bb14:	3308      	adds	r3, #8
 801bb16:	687a      	ldr	r2, [r7, #4]
 801bb18:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801bb1a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801bb1e:	4618      	mov	r0, r3
 801bb20:	3728      	adds	r7, #40	; 0x28
 801bb22:	46bd      	mov	sp, r7
 801bb24:	bd80      	pop	{r7, pc}
 801bb26:	bf00      	nop
 801bb28:	20019578 	.word	0x20019578
 801bb2c:	08028010 	.word	0x08028010
 801bb30:	08028048 	.word	0x08028048
 801bb34:	08028088 	.word	0x08028088
 801bb38:	080280b0 	.word	0x080280b0
 801bb3c:	080280c8 	.word	0x080280c8
 801bb40:	080280dc 	.word	0x080280dc

0801bb44 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801bb44:	b580      	push	{r7, lr}
 801bb46:	b088      	sub	sp, #32
 801bb48:	af02      	add	r7, sp, #8
 801bb4a:	60f8      	str	r0, [r7, #12]
 801bb4c:	60b9      	str	r1, [r7, #8]
 801bb4e:	607a      	str	r2, [r7, #4]
 801bb50:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801bb52:	68fb      	ldr	r3, [r7, #12]
 801bb54:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801bb58:	2b06      	cmp	r3, #6
 801bb5a:	d006      	beq.n	801bb6a <etharp_update_arp_entry+0x26>
 801bb5c:	4b48      	ldr	r3, [pc, #288]	; (801bc80 <etharp_update_arp_entry+0x13c>)
 801bb5e:	f240 12a9 	movw	r2, #425	; 0x1a9
 801bb62:	4948      	ldr	r1, [pc, #288]	; (801bc84 <etharp_update_arp_entry+0x140>)
 801bb64:	4848      	ldr	r0, [pc, #288]	; (801bc88 <etharp_update_arp_entry+0x144>)
 801bb66:	f00a fbe3 	bl	8026330 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801bb6a:	68bb      	ldr	r3, [r7, #8]
 801bb6c:	2b00      	cmp	r3, #0
 801bb6e:	d012      	beq.n	801bb96 <etharp_update_arp_entry+0x52>
 801bb70:	68bb      	ldr	r3, [r7, #8]
 801bb72:	681b      	ldr	r3, [r3, #0]
 801bb74:	2b00      	cmp	r3, #0
 801bb76:	d00e      	beq.n	801bb96 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801bb78:	68bb      	ldr	r3, [r7, #8]
 801bb7a:	681b      	ldr	r3, [r3, #0]
 801bb7c:	68f9      	ldr	r1, [r7, #12]
 801bb7e:	4618      	mov	r0, r3
 801bb80:	f001 f8f2 	bl	801cd68 <ip4_addr_isbroadcast_u32>
 801bb84:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801bb86:	2b00      	cmp	r3, #0
 801bb88:	d105      	bne.n	801bb96 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801bb8a:	68bb      	ldr	r3, [r7, #8]
 801bb8c:	681b      	ldr	r3, [r3, #0]
 801bb8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801bb92:	2be0      	cmp	r3, #224	; 0xe0
 801bb94:	d102      	bne.n	801bb9c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801bb96:	f06f 030f 	mvn.w	r3, #15
 801bb9a:	e06c      	b.n	801bc76 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801bb9c:	78fb      	ldrb	r3, [r7, #3]
 801bb9e:	68fa      	ldr	r2, [r7, #12]
 801bba0:	4619      	mov	r1, r3
 801bba2:	68b8      	ldr	r0, [r7, #8]
 801bba4:	f7ff fe56 	bl	801b854 <etharp_find_entry>
 801bba8:	4603      	mov	r3, r0
 801bbaa:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801bbac:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801bbb0:	2b00      	cmp	r3, #0
 801bbb2:	da02      	bge.n	801bbba <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801bbb4:	8afb      	ldrh	r3, [r7, #22]
 801bbb6:	b25b      	sxtb	r3, r3
 801bbb8:	e05d      	b.n	801bc76 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801bbba:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801bbbe:	4933      	ldr	r1, [pc, #204]	; (801bc8c <etharp_update_arp_entry+0x148>)
 801bbc0:	4613      	mov	r3, r2
 801bbc2:	005b      	lsls	r3, r3, #1
 801bbc4:	4413      	add	r3, r2
 801bbc6:	00db      	lsls	r3, r3, #3
 801bbc8:	440b      	add	r3, r1
 801bbca:	3314      	adds	r3, #20
 801bbcc:	2202      	movs	r2, #2
 801bbce:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801bbd0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801bbd4:	492d      	ldr	r1, [pc, #180]	; (801bc8c <etharp_update_arp_entry+0x148>)
 801bbd6:	4613      	mov	r3, r2
 801bbd8:	005b      	lsls	r3, r3, #1
 801bbda:	4413      	add	r3, r2
 801bbdc:	00db      	lsls	r3, r3, #3
 801bbde:	440b      	add	r3, r1
 801bbe0:	3308      	adds	r3, #8
 801bbe2:	68fa      	ldr	r2, [r7, #12]
 801bbe4:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801bbe6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801bbea:	4613      	mov	r3, r2
 801bbec:	005b      	lsls	r3, r3, #1
 801bbee:	4413      	add	r3, r2
 801bbf0:	00db      	lsls	r3, r3, #3
 801bbf2:	3308      	adds	r3, #8
 801bbf4:	4a25      	ldr	r2, [pc, #148]	; (801bc8c <etharp_update_arp_entry+0x148>)
 801bbf6:	4413      	add	r3, r2
 801bbf8:	3304      	adds	r3, #4
 801bbfa:	2206      	movs	r2, #6
 801bbfc:	6879      	ldr	r1, [r7, #4]
 801bbfe:	4618      	mov	r0, r3
 801bc00:	f00a fabd 	bl	802617e <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801bc04:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801bc08:	4920      	ldr	r1, [pc, #128]	; (801bc8c <etharp_update_arp_entry+0x148>)
 801bc0a:	4613      	mov	r3, r2
 801bc0c:	005b      	lsls	r3, r3, #1
 801bc0e:	4413      	add	r3, r2
 801bc10:	00db      	lsls	r3, r3, #3
 801bc12:	440b      	add	r3, r1
 801bc14:	3312      	adds	r3, #18
 801bc16:	2200      	movs	r2, #0
 801bc18:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801bc1a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801bc1e:	491b      	ldr	r1, [pc, #108]	; (801bc8c <etharp_update_arp_entry+0x148>)
 801bc20:	4613      	mov	r3, r2
 801bc22:	005b      	lsls	r3, r3, #1
 801bc24:	4413      	add	r3, r2
 801bc26:	00db      	lsls	r3, r3, #3
 801bc28:	440b      	add	r3, r1
 801bc2a:	681b      	ldr	r3, [r3, #0]
 801bc2c:	2b00      	cmp	r3, #0
 801bc2e:	d021      	beq.n	801bc74 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801bc30:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801bc34:	4915      	ldr	r1, [pc, #84]	; (801bc8c <etharp_update_arp_entry+0x148>)
 801bc36:	4613      	mov	r3, r2
 801bc38:	005b      	lsls	r3, r3, #1
 801bc3a:	4413      	add	r3, r2
 801bc3c:	00db      	lsls	r3, r3, #3
 801bc3e:	440b      	add	r3, r1
 801bc40:	681b      	ldr	r3, [r3, #0]
 801bc42:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801bc44:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801bc48:	4910      	ldr	r1, [pc, #64]	; (801bc8c <etharp_update_arp_entry+0x148>)
 801bc4a:	4613      	mov	r3, r2
 801bc4c:	005b      	lsls	r3, r3, #1
 801bc4e:	4413      	add	r3, r2
 801bc50:	00db      	lsls	r3, r3, #3
 801bc52:	440b      	add	r3, r1
 801bc54:	2200      	movs	r2, #0
 801bc56:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801bc58:	68fb      	ldr	r3, [r7, #12]
 801bc5a:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 801bc5e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801bc62:	9300      	str	r3, [sp, #0]
 801bc64:	687b      	ldr	r3, [r7, #4]
 801bc66:	6939      	ldr	r1, [r7, #16]
 801bc68:	68f8      	ldr	r0, [r7, #12]
 801bc6a:	f00a f8c1 	bl	8025df0 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801bc6e:	6938      	ldr	r0, [r7, #16]
 801bc70:	f003 f95a 	bl	801ef28 <pbuf_free>
  }
  return ERR_OK;
 801bc74:	2300      	movs	r3, #0
}
 801bc76:	4618      	mov	r0, r3
 801bc78:	3718      	adds	r7, #24
 801bc7a:	46bd      	mov	sp, r7
 801bc7c:	bd80      	pop	{r7, pc}
 801bc7e:	bf00      	nop
 801bc80:	08028010 	.word	0x08028010
 801bc84:	08028108 	.word	0x08028108
 801bc88:	08028088 	.word	0x08028088
 801bc8c:	20019578 	.word	0x20019578

0801bc90 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801bc90:	b5b0      	push	{r4, r5, r7, lr}
 801bc92:	b08a      	sub	sp, #40	; 0x28
 801bc94:	af04      	add	r7, sp, #16
 801bc96:	6078      	str	r0, [r7, #4]
 801bc98:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801bc9a:	683b      	ldr	r3, [r7, #0]
 801bc9c:	2b00      	cmp	r3, #0
 801bc9e:	d107      	bne.n	801bcb0 <etharp_input+0x20>
 801bca0:	4b3f      	ldr	r3, [pc, #252]	; (801bda0 <etharp_input+0x110>)
 801bca2:	f240 228a 	movw	r2, #650	; 0x28a
 801bca6:	493f      	ldr	r1, [pc, #252]	; (801bda4 <etharp_input+0x114>)
 801bca8:	483f      	ldr	r0, [pc, #252]	; (801bda8 <etharp_input+0x118>)
 801bcaa:	f00a fb41 	bl	8026330 <iprintf>
 801bcae:	e074      	b.n	801bd9a <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 801bcb0:	687b      	ldr	r3, [r7, #4]
 801bcb2:	685b      	ldr	r3, [r3, #4]
 801bcb4:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801bcb6:	693b      	ldr	r3, [r7, #16]
 801bcb8:	881b      	ldrh	r3, [r3, #0]
 801bcba:	b29b      	uxth	r3, r3
 801bcbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801bcc0:	d10c      	bne.n	801bcdc <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801bcc2:	693b      	ldr	r3, [r7, #16]
 801bcc4:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801bcc6:	2b06      	cmp	r3, #6
 801bcc8:	d108      	bne.n	801bcdc <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801bcca:	693b      	ldr	r3, [r7, #16]
 801bccc:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801bcce:	2b04      	cmp	r3, #4
 801bcd0:	d104      	bne.n	801bcdc <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801bcd2:	693b      	ldr	r3, [r7, #16]
 801bcd4:	885b      	ldrh	r3, [r3, #2]
 801bcd6:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801bcd8:	2b08      	cmp	r3, #8
 801bcda:	d003      	beq.n	801bce4 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801bcdc:	6878      	ldr	r0, [r7, #4]
 801bcde:	f003 f923 	bl	801ef28 <pbuf_free>
    return;
 801bce2:	e05a      	b.n	801bd9a <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801bce4:	693b      	ldr	r3, [r7, #16]
 801bce6:	330e      	adds	r3, #14
 801bce8:	681b      	ldr	r3, [r3, #0]
 801bcea:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801bcec:	693b      	ldr	r3, [r7, #16]
 801bcee:	3318      	adds	r3, #24
 801bcf0:	681b      	ldr	r3, [r3, #0]
 801bcf2:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801bcf4:	683b      	ldr	r3, [r7, #0]
 801bcf6:	3304      	adds	r3, #4
 801bcf8:	681b      	ldr	r3, [r3, #0]
 801bcfa:	2b00      	cmp	r3, #0
 801bcfc:	d102      	bne.n	801bd04 <etharp_input+0x74>
    for_us = 0;
 801bcfe:	2300      	movs	r3, #0
 801bd00:	75fb      	strb	r3, [r7, #23]
 801bd02:	e009      	b.n	801bd18 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801bd04:	68ba      	ldr	r2, [r7, #8]
 801bd06:	683b      	ldr	r3, [r7, #0]
 801bd08:	3304      	adds	r3, #4
 801bd0a:	681b      	ldr	r3, [r3, #0]
 801bd0c:	429a      	cmp	r2, r3
 801bd0e:	bf0c      	ite	eq
 801bd10:	2301      	moveq	r3, #1
 801bd12:	2300      	movne	r3, #0
 801bd14:	b2db      	uxtb	r3, r3
 801bd16:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801bd18:	693b      	ldr	r3, [r7, #16]
 801bd1a:	f103 0208 	add.w	r2, r3, #8
 801bd1e:	7dfb      	ldrb	r3, [r7, #23]
 801bd20:	2b00      	cmp	r3, #0
 801bd22:	d001      	beq.n	801bd28 <etharp_input+0x98>
 801bd24:	2301      	movs	r3, #1
 801bd26:	e000      	b.n	801bd2a <etharp_input+0x9a>
 801bd28:	2302      	movs	r3, #2
 801bd2a:	f107 010c 	add.w	r1, r7, #12
 801bd2e:	6838      	ldr	r0, [r7, #0]
 801bd30:	f7ff ff08 	bl	801bb44 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801bd34:	693b      	ldr	r3, [r7, #16]
 801bd36:	88db      	ldrh	r3, [r3, #6]
 801bd38:	b29b      	uxth	r3, r3
 801bd3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801bd3e:	d003      	beq.n	801bd48 <etharp_input+0xb8>
 801bd40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801bd44:	d01e      	beq.n	801bd84 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801bd46:	e025      	b.n	801bd94 <etharp_input+0x104>
      if (for_us) {
 801bd48:	7dfb      	ldrb	r3, [r7, #23]
 801bd4a:	2b00      	cmp	r3, #0
 801bd4c:	d021      	beq.n	801bd92 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801bd4e:	683b      	ldr	r3, [r7, #0]
 801bd50:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 801bd54:	693b      	ldr	r3, [r7, #16]
 801bd56:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801bd5a:	683b      	ldr	r3, [r7, #0]
 801bd5c:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 801bd60:	683b      	ldr	r3, [r7, #0]
 801bd62:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801bd64:	693a      	ldr	r2, [r7, #16]
 801bd66:	3208      	adds	r2, #8
        etharp_raw(netif,
 801bd68:	2102      	movs	r1, #2
 801bd6a:	9103      	str	r1, [sp, #12]
 801bd6c:	f107 010c 	add.w	r1, r7, #12
 801bd70:	9102      	str	r1, [sp, #8]
 801bd72:	9201      	str	r2, [sp, #4]
 801bd74:	9300      	str	r3, [sp, #0]
 801bd76:	462b      	mov	r3, r5
 801bd78:	4622      	mov	r2, r4
 801bd7a:	4601      	mov	r1, r0
 801bd7c:	6838      	ldr	r0, [r7, #0]
 801bd7e:	f000 faef 	bl	801c360 <etharp_raw>
      break;
 801bd82:	e006      	b.n	801bd92 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 801bd84:	f107 030c 	add.w	r3, r7, #12
 801bd88:	4619      	mov	r1, r3
 801bd8a:	6838      	ldr	r0, [r7, #0]
 801bd8c:	f7fe f9fe 	bl	801a18c <dhcp_arp_reply>
      break;
 801bd90:	e000      	b.n	801bd94 <etharp_input+0x104>
      break;
 801bd92:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801bd94:	6878      	ldr	r0, [r7, #4]
 801bd96:	f003 f8c7 	bl	801ef28 <pbuf_free>
}
 801bd9a:	3718      	adds	r7, #24
 801bd9c:	46bd      	mov	sp, r7
 801bd9e:	bdb0      	pop	{r4, r5, r7, pc}
 801bda0:	08028010 	.word	0x08028010
 801bda4:	08028160 	.word	0x08028160
 801bda8:	08028088 	.word	0x08028088

0801bdac <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801bdac:	b580      	push	{r7, lr}
 801bdae:	b086      	sub	sp, #24
 801bdb0:	af02      	add	r7, sp, #8
 801bdb2:	60f8      	str	r0, [r7, #12]
 801bdb4:	60b9      	str	r1, [r7, #8]
 801bdb6:	4613      	mov	r3, r2
 801bdb8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801bdba:	79fa      	ldrb	r2, [r7, #7]
 801bdbc:	4944      	ldr	r1, [pc, #272]	; (801bed0 <etharp_output_to_arp_index+0x124>)
 801bdbe:	4613      	mov	r3, r2
 801bdc0:	005b      	lsls	r3, r3, #1
 801bdc2:	4413      	add	r3, r2
 801bdc4:	00db      	lsls	r3, r3, #3
 801bdc6:	440b      	add	r3, r1
 801bdc8:	3314      	adds	r3, #20
 801bdca:	781b      	ldrb	r3, [r3, #0]
 801bdcc:	2b01      	cmp	r3, #1
 801bdce:	d806      	bhi.n	801bdde <etharp_output_to_arp_index+0x32>
 801bdd0:	4b40      	ldr	r3, [pc, #256]	; (801bed4 <etharp_output_to_arp_index+0x128>)
 801bdd2:	f240 22ef 	movw	r2, #751	; 0x2ef
 801bdd6:	4940      	ldr	r1, [pc, #256]	; (801bed8 <etharp_output_to_arp_index+0x12c>)
 801bdd8:	4840      	ldr	r0, [pc, #256]	; (801bedc <etharp_output_to_arp_index+0x130>)
 801bdda:	f00a faa9 	bl	8026330 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801bdde:	79fa      	ldrb	r2, [r7, #7]
 801bde0:	493b      	ldr	r1, [pc, #236]	; (801bed0 <etharp_output_to_arp_index+0x124>)
 801bde2:	4613      	mov	r3, r2
 801bde4:	005b      	lsls	r3, r3, #1
 801bde6:	4413      	add	r3, r2
 801bde8:	00db      	lsls	r3, r3, #3
 801bdea:	440b      	add	r3, r1
 801bdec:	3314      	adds	r3, #20
 801bdee:	781b      	ldrb	r3, [r3, #0]
 801bdf0:	2b02      	cmp	r3, #2
 801bdf2:	d153      	bne.n	801be9c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801bdf4:	79fa      	ldrb	r2, [r7, #7]
 801bdf6:	4936      	ldr	r1, [pc, #216]	; (801bed0 <etharp_output_to_arp_index+0x124>)
 801bdf8:	4613      	mov	r3, r2
 801bdfa:	005b      	lsls	r3, r3, #1
 801bdfc:	4413      	add	r3, r2
 801bdfe:	00db      	lsls	r3, r3, #3
 801be00:	440b      	add	r3, r1
 801be02:	3312      	adds	r3, #18
 801be04:	881b      	ldrh	r3, [r3, #0]
 801be06:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801be0a:	d919      	bls.n	801be40 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801be0c:	79fa      	ldrb	r2, [r7, #7]
 801be0e:	4613      	mov	r3, r2
 801be10:	005b      	lsls	r3, r3, #1
 801be12:	4413      	add	r3, r2
 801be14:	00db      	lsls	r3, r3, #3
 801be16:	4a2e      	ldr	r2, [pc, #184]	; (801bed0 <etharp_output_to_arp_index+0x124>)
 801be18:	4413      	add	r3, r2
 801be1a:	3304      	adds	r3, #4
 801be1c:	4619      	mov	r1, r3
 801be1e:	68f8      	ldr	r0, [r7, #12]
 801be20:	f000 fb4c 	bl	801c4bc <etharp_request>
 801be24:	4603      	mov	r3, r0
 801be26:	2b00      	cmp	r3, #0
 801be28:	d138      	bne.n	801be9c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801be2a:	79fa      	ldrb	r2, [r7, #7]
 801be2c:	4928      	ldr	r1, [pc, #160]	; (801bed0 <etharp_output_to_arp_index+0x124>)
 801be2e:	4613      	mov	r3, r2
 801be30:	005b      	lsls	r3, r3, #1
 801be32:	4413      	add	r3, r2
 801be34:	00db      	lsls	r3, r3, #3
 801be36:	440b      	add	r3, r1
 801be38:	3314      	adds	r3, #20
 801be3a:	2203      	movs	r2, #3
 801be3c:	701a      	strb	r2, [r3, #0]
 801be3e:	e02d      	b.n	801be9c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801be40:	79fa      	ldrb	r2, [r7, #7]
 801be42:	4923      	ldr	r1, [pc, #140]	; (801bed0 <etharp_output_to_arp_index+0x124>)
 801be44:	4613      	mov	r3, r2
 801be46:	005b      	lsls	r3, r3, #1
 801be48:	4413      	add	r3, r2
 801be4a:	00db      	lsls	r3, r3, #3
 801be4c:	440b      	add	r3, r1
 801be4e:	3312      	adds	r3, #18
 801be50:	881b      	ldrh	r3, [r3, #0]
 801be52:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801be56:	d321      	bcc.n	801be9c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801be58:	79fa      	ldrb	r2, [r7, #7]
 801be5a:	4613      	mov	r3, r2
 801be5c:	005b      	lsls	r3, r3, #1
 801be5e:	4413      	add	r3, r2
 801be60:	00db      	lsls	r3, r3, #3
 801be62:	4a1b      	ldr	r2, [pc, #108]	; (801bed0 <etharp_output_to_arp_index+0x124>)
 801be64:	4413      	add	r3, r2
 801be66:	1d19      	adds	r1, r3, #4
 801be68:	79fa      	ldrb	r2, [r7, #7]
 801be6a:	4613      	mov	r3, r2
 801be6c:	005b      	lsls	r3, r3, #1
 801be6e:	4413      	add	r3, r2
 801be70:	00db      	lsls	r3, r3, #3
 801be72:	3308      	adds	r3, #8
 801be74:	4a16      	ldr	r2, [pc, #88]	; (801bed0 <etharp_output_to_arp_index+0x124>)
 801be76:	4413      	add	r3, r2
 801be78:	3304      	adds	r3, #4
 801be7a:	461a      	mov	r2, r3
 801be7c:	68f8      	ldr	r0, [r7, #12]
 801be7e:	f000 fafb 	bl	801c478 <etharp_request_dst>
 801be82:	4603      	mov	r3, r0
 801be84:	2b00      	cmp	r3, #0
 801be86:	d109      	bne.n	801be9c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801be88:	79fa      	ldrb	r2, [r7, #7]
 801be8a:	4911      	ldr	r1, [pc, #68]	; (801bed0 <etharp_output_to_arp_index+0x124>)
 801be8c:	4613      	mov	r3, r2
 801be8e:	005b      	lsls	r3, r3, #1
 801be90:	4413      	add	r3, r2
 801be92:	00db      	lsls	r3, r3, #3
 801be94:	440b      	add	r3, r1
 801be96:	3314      	adds	r3, #20
 801be98:	2203      	movs	r2, #3
 801be9a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801be9c:	68fb      	ldr	r3, [r7, #12]
 801be9e:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 801bea2:	79fa      	ldrb	r2, [r7, #7]
 801bea4:	4613      	mov	r3, r2
 801bea6:	005b      	lsls	r3, r3, #1
 801bea8:	4413      	add	r3, r2
 801beaa:	00db      	lsls	r3, r3, #3
 801beac:	3308      	adds	r3, #8
 801beae:	4a08      	ldr	r2, [pc, #32]	; (801bed0 <etharp_output_to_arp_index+0x124>)
 801beb0:	4413      	add	r3, r2
 801beb2:	1d1a      	adds	r2, r3, #4
 801beb4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801beb8:	9300      	str	r3, [sp, #0]
 801beba:	4613      	mov	r3, r2
 801bebc:	460a      	mov	r2, r1
 801bebe:	68b9      	ldr	r1, [r7, #8]
 801bec0:	68f8      	ldr	r0, [r7, #12]
 801bec2:	f009 ff95 	bl	8025df0 <ethernet_output>
 801bec6:	4603      	mov	r3, r0
}
 801bec8:	4618      	mov	r0, r3
 801beca:	3710      	adds	r7, #16
 801becc:	46bd      	mov	sp, r7
 801bece:	bd80      	pop	{r7, pc}
 801bed0:	20019578 	.word	0x20019578
 801bed4:	08028010 	.word	0x08028010
 801bed8:	08028180 	.word	0x08028180
 801bedc:	08028088 	.word	0x08028088

0801bee0 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801bee0:	b580      	push	{r7, lr}
 801bee2:	b08a      	sub	sp, #40	; 0x28
 801bee4:	af02      	add	r7, sp, #8
 801bee6:	60f8      	str	r0, [r7, #12]
 801bee8:	60b9      	str	r1, [r7, #8]
 801beea:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801beec:	687b      	ldr	r3, [r7, #4]
 801beee:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801bef0:	68fb      	ldr	r3, [r7, #12]
 801bef2:	2b00      	cmp	r3, #0
 801bef4:	d106      	bne.n	801bf04 <etharp_output+0x24>
 801bef6:	4b73      	ldr	r3, [pc, #460]	; (801c0c4 <etharp_output+0x1e4>)
 801bef8:	f240 321e 	movw	r2, #798	; 0x31e
 801befc:	4972      	ldr	r1, [pc, #456]	; (801c0c8 <etharp_output+0x1e8>)
 801befe:	4873      	ldr	r0, [pc, #460]	; (801c0cc <etharp_output+0x1ec>)
 801bf00:	f00a fa16 	bl	8026330 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801bf04:	68bb      	ldr	r3, [r7, #8]
 801bf06:	2b00      	cmp	r3, #0
 801bf08:	d106      	bne.n	801bf18 <etharp_output+0x38>
 801bf0a:	4b6e      	ldr	r3, [pc, #440]	; (801c0c4 <etharp_output+0x1e4>)
 801bf0c:	f240 321f 	movw	r2, #799	; 0x31f
 801bf10:	496f      	ldr	r1, [pc, #444]	; (801c0d0 <etharp_output+0x1f0>)
 801bf12:	486e      	ldr	r0, [pc, #440]	; (801c0cc <etharp_output+0x1ec>)
 801bf14:	f00a fa0c 	bl	8026330 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801bf18:	687b      	ldr	r3, [r7, #4]
 801bf1a:	2b00      	cmp	r3, #0
 801bf1c:	d106      	bne.n	801bf2c <etharp_output+0x4c>
 801bf1e:	4b69      	ldr	r3, [pc, #420]	; (801c0c4 <etharp_output+0x1e4>)
 801bf20:	f44f 7248 	mov.w	r2, #800	; 0x320
 801bf24:	496b      	ldr	r1, [pc, #428]	; (801c0d4 <etharp_output+0x1f4>)
 801bf26:	4869      	ldr	r0, [pc, #420]	; (801c0cc <etharp_output+0x1ec>)
 801bf28:	f00a fa02 	bl	8026330 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801bf2c:	687b      	ldr	r3, [r7, #4]
 801bf2e:	681b      	ldr	r3, [r3, #0]
 801bf30:	68f9      	ldr	r1, [r7, #12]
 801bf32:	4618      	mov	r0, r3
 801bf34:	f000 ff18 	bl	801cd68 <ip4_addr_isbroadcast_u32>
 801bf38:	4603      	mov	r3, r0
 801bf3a:	2b00      	cmp	r3, #0
 801bf3c:	d002      	beq.n	801bf44 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801bf3e:	4b66      	ldr	r3, [pc, #408]	; (801c0d8 <etharp_output+0x1f8>)
 801bf40:	61fb      	str	r3, [r7, #28]
 801bf42:	e0af      	b.n	801c0a4 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801bf44:	687b      	ldr	r3, [r7, #4]
 801bf46:	681b      	ldr	r3, [r3, #0]
 801bf48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801bf4c:	2be0      	cmp	r3, #224	; 0xe0
 801bf4e:	d118      	bne.n	801bf82 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801bf50:	2301      	movs	r3, #1
 801bf52:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801bf54:	2300      	movs	r3, #0
 801bf56:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801bf58:	235e      	movs	r3, #94	; 0x5e
 801bf5a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801bf5c:	687b      	ldr	r3, [r7, #4]
 801bf5e:	3301      	adds	r3, #1
 801bf60:	781b      	ldrb	r3, [r3, #0]
 801bf62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801bf66:	b2db      	uxtb	r3, r3
 801bf68:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801bf6a:	687b      	ldr	r3, [r7, #4]
 801bf6c:	3302      	adds	r3, #2
 801bf6e:	781b      	ldrb	r3, [r3, #0]
 801bf70:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801bf72:	687b      	ldr	r3, [r7, #4]
 801bf74:	3303      	adds	r3, #3
 801bf76:	781b      	ldrb	r3, [r3, #0]
 801bf78:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801bf7a:	f107 0310 	add.w	r3, r7, #16
 801bf7e:	61fb      	str	r3, [r7, #28]
 801bf80:	e090      	b.n	801c0a4 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801bf82:	687b      	ldr	r3, [r7, #4]
 801bf84:	681a      	ldr	r2, [r3, #0]
 801bf86:	68fb      	ldr	r3, [r7, #12]
 801bf88:	3304      	adds	r3, #4
 801bf8a:	681b      	ldr	r3, [r3, #0]
 801bf8c:	405a      	eors	r2, r3
 801bf8e:	68fb      	ldr	r3, [r7, #12]
 801bf90:	3308      	adds	r3, #8
 801bf92:	681b      	ldr	r3, [r3, #0]
 801bf94:	4013      	ands	r3, r2
 801bf96:	2b00      	cmp	r3, #0
 801bf98:	d012      	beq.n	801bfc0 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801bf9a:	687b      	ldr	r3, [r7, #4]
 801bf9c:	681b      	ldr	r3, [r3, #0]
 801bf9e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801bfa0:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 801bfa4:	4293      	cmp	r3, r2
 801bfa6:	d00b      	beq.n	801bfc0 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801bfa8:	68fb      	ldr	r3, [r7, #12]
 801bfaa:	330c      	adds	r3, #12
 801bfac:	681b      	ldr	r3, [r3, #0]
 801bfae:	2b00      	cmp	r3, #0
 801bfb0:	d003      	beq.n	801bfba <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801bfb2:	68fb      	ldr	r3, [r7, #12]
 801bfb4:	330c      	adds	r3, #12
 801bfb6:	61bb      	str	r3, [r7, #24]
 801bfb8:	e002      	b.n	801bfc0 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801bfba:	f06f 0303 	mvn.w	r3, #3
 801bfbe:	e07d      	b.n	801c0bc <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801bfc0:	4b46      	ldr	r3, [pc, #280]	; (801c0dc <etharp_output+0x1fc>)
 801bfc2:	781b      	ldrb	r3, [r3, #0]
 801bfc4:	4619      	mov	r1, r3
 801bfc6:	4a46      	ldr	r2, [pc, #280]	; (801c0e0 <etharp_output+0x200>)
 801bfc8:	460b      	mov	r3, r1
 801bfca:	005b      	lsls	r3, r3, #1
 801bfcc:	440b      	add	r3, r1
 801bfce:	00db      	lsls	r3, r3, #3
 801bfd0:	4413      	add	r3, r2
 801bfd2:	3314      	adds	r3, #20
 801bfd4:	781b      	ldrb	r3, [r3, #0]
 801bfd6:	2b01      	cmp	r3, #1
 801bfd8:	d925      	bls.n	801c026 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801bfda:	4b40      	ldr	r3, [pc, #256]	; (801c0dc <etharp_output+0x1fc>)
 801bfdc:	781b      	ldrb	r3, [r3, #0]
 801bfde:	4619      	mov	r1, r3
 801bfe0:	4a3f      	ldr	r2, [pc, #252]	; (801c0e0 <etharp_output+0x200>)
 801bfe2:	460b      	mov	r3, r1
 801bfe4:	005b      	lsls	r3, r3, #1
 801bfe6:	440b      	add	r3, r1
 801bfe8:	00db      	lsls	r3, r3, #3
 801bfea:	4413      	add	r3, r2
 801bfec:	3308      	adds	r3, #8
 801bfee:	681a      	ldr	r2, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801bff0:	68fb      	ldr	r3, [r7, #12]
 801bff2:	429a      	cmp	r2, r3
 801bff4:	d117      	bne.n	801c026 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801bff6:	69bb      	ldr	r3, [r7, #24]
 801bff8:	681a      	ldr	r2, [r3, #0]
 801bffa:	4b38      	ldr	r3, [pc, #224]	; (801c0dc <etharp_output+0x1fc>)
 801bffc:	781b      	ldrb	r3, [r3, #0]
 801bffe:	4618      	mov	r0, r3
 801c000:	4937      	ldr	r1, [pc, #220]	; (801c0e0 <etharp_output+0x200>)
 801c002:	4603      	mov	r3, r0
 801c004:	005b      	lsls	r3, r3, #1
 801c006:	4403      	add	r3, r0
 801c008:	00db      	lsls	r3, r3, #3
 801c00a:	440b      	add	r3, r1
 801c00c:	3304      	adds	r3, #4
 801c00e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801c010:	429a      	cmp	r2, r3
 801c012:	d108      	bne.n	801c026 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801c014:	4b31      	ldr	r3, [pc, #196]	; (801c0dc <etharp_output+0x1fc>)
 801c016:	781b      	ldrb	r3, [r3, #0]
 801c018:	461a      	mov	r2, r3
 801c01a:	68b9      	ldr	r1, [r7, #8]
 801c01c:	68f8      	ldr	r0, [r7, #12]
 801c01e:	f7ff fec5 	bl	801bdac <etharp_output_to_arp_index>
 801c022:	4603      	mov	r3, r0
 801c024:	e04a      	b.n	801c0bc <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801c026:	2300      	movs	r3, #0
 801c028:	75fb      	strb	r3, [r7, #23]
 801c02a:	e031      	b.n	801c090 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801c02c:	7dfa      	ldrb	r2, [r7, #23]
 801c02e:	492c      	ldr	r1, [pc, #176]	; (801c0e0 <etharp_output+0x200>)
 801c030:	4613      	mov	r3, r2
 801c032:	005b      	lsls	r3, r3, #1
 801c034:	4413      	add	r3, r2
 801c036:	00db      	lsls	r3, r3, #3
 801c038:	440b      	add	r3, r1
 801c03a:	3314      	adds	r3, #20
 801c03c:	781b      	ldrb	r3, [r3, #0]
 801c03e:	2b01      	cmp	r3, #1
 801c040:	d923      	bls.n	801c08a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801c042:	7dfa      	ldrb	r2, [r7, #23]
 801c044:	4926      	ldr	r1, [pc, #152]	; (801c0e0 <etharp_output+0x200>)
 801c046:	4613      	mov	r3, r2
 801c048:	005b      	lsls	r3, r3, #1
 801c04a:	4413      	add	r3, r2
 801c04c:	00db      	lsls	r3, r3, #3
 801c04e:	440b      	add	r3, r1
 801c050:	3308      	adds	r3, #8
 801c052:	681a      	ldr	r2, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801c054:	68fb      	ldr	r3, [r7, #12]
 801c056:	429a      	cmp	r2, r3
 801c058:	d117      	bne.n	801c08a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801c05a:	69bb      	ldr	r3, [r7, #24]
 801c05c:	6819      	ldr	r1, [r3, #0]
 801c05e:	7dfa      	ldrb	r2, [r7, #23]
 801c060:	481f      	ldr	r0, [pc, #124]	; (801c0e0 <etharp_output+0x200>)
 801c062:	4613      	mov	r3, r2
 801c064:	005b      	lsls	r3, r3, #1
 801c066:	4413      	add	r3, r2
 801c068:	00db      	lsls	r3, r3, #3
 801c06a:	4403      	add	r3, r0
 801c06c:	3304      	adds	r3, #4
 801c06e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801c070:	4299      	cmp	r1, r3
 801c072:	d10a      	bne.n	801c08a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801c074:	4a19      	ldr	r2, [pc, #100]	; (801c0dc <etharp_output+0x1fc>)
 801c076:	7dfb      	ldrb	r3, [r7, #23]
 801c078:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801c07a:	7dfb      	ldrb	r3, [r7, #23]
 801c07c:	461a      	mov	r2, r3
 801c07e:	68b9      	ldr	r1, [r7, #8]
 801c080:	68f8      	ldr	r0, [r7, #12]
 801c082:	f7ff fe93 	bl	801bdac <etharp_output_to_arp_index>
 801c086:	4603      	mov	r3, r0
 801c088:	e018      	b.n	801c0bc <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801c08a:	7dfb      	ldrb	r3, [r7, #23]
 801c08c:	3301      	adds	r3, #1
 801c08e:	75fb      	strb	r3, [r7, #23]
 801c090:	7dfb      	ldrb	r3, [r7, #23]
 801c092:	2b09      	cmp	r3, #9
 801c094:	d9ca      	bls.n	801c02c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801c096:	68ba      	ldr	r2, [r7, #8]
 801c098:	69b9      	ldr	r1, [r7, #24]
 801c09a:	68f8      	ldr	r0, [r7, #12]
 801c09c:	f000 f822 	bl	801c0e4 <etharp_query>
 801c0a0:	4603      	mov	r3, r0
 801c0a2:	e00b      	b.n	801c0bc <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801c0a4:	68fb      	ldr	r3, [r7, #12]
 801c0a6:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 801c0aa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801c0ae:	9300      	str	r3, [sp, #0]
 801c0b0:	69fb      	ldr	r3, [r7, #28]
 801c0b2:	68b9      	ldr	r1, [r7, #8]
 801c0b4:	68f8      	ldr	r0, [r7, #12]
 801c0b6:	f009 fe9b 	bl	8025df0 <ethernet_output>
 801c0ba:	4603      	mov	r3, r0
}
 801c0bc:	4618      	mov	r0, r3
 801c0be:	3720      	adds	r7, #32
 801c0c0:	46bd      	mov	sp, r7
 801c0c2:	bd80      	pop	{r7, pc}
 801c0c4:	08028010 	.word	0x08028010
 801c0c8:	08028160 	.word	0x08028160
 801c0cc:	08028088 	.word	0x08028088
 801c0d0:	080281b0 	.word	0x080281b0
 801c0d4:	08028150 	.word	0x08028150
 801c0d8:	0802b860 	.word	0x0802b860
 801c0dc:	20019668 	.word	0x20019668
 801c0e0:	20019578 	.word	0x20019578

0801c0e4 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801c0e4:	b580      	push	{r7, lr}
 801c0e6:	b08c      	sub	sp, #48	; 0x30
 801c0e8:	af02      	add	r7, sp, #8
 801c0ea:	60f8      	str	r0, [r7, #12]
 801c0ec:	60b9      	str	r1, [r7, #8]
 801c0ee:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801c0f0:	68fb      	ldr	r3, [r7, #12]
 801c0f2:	332a      	adds	r3, #42	; 0x2a
 801c0f4:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801c0f6:	23ff      	movs	r3, #255	; 0xff
 801c0f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 801c0fc:	2300      	movs	r3, #0
 801c0fe:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801c100:	68bb      	ldr	r3, [r7, #8]
 801c102:	681b      	ldr	r3, [r3, #0]
 801c104:	68f9      	ldr	r1, [r7, #12]
 801c106:	4618      	mov	r0, r3
 801c108:	f000 fe2e 	bl	801cd68 <ip4_addr_isbroadcast_u32>
 801c10c:	4603      	mov	r3, r0
 801c10e:	2b00      	cmp	r3, #0
 801c110:	d10c      	bne.n	801c12c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801c112:	68bb      	ldr	r3, [r7, #8]
 801c114:	681b      	ldr	r3, [r3, #0]
 801c116:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801c11a:	2be0      	cmp	r3, #224	; 0xe0
 801c11c:	d006      	beq.n	801c12c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801c11e:	68bb      	ldr	r3, [r7, #8]
 801c120:	2b00      	cmp	r3, #0
 801c122:	d003      	beq.n	801c12c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801c124:	68bb      	ldr	r3, [r7, #8]
 801c126:	681b      	ldr	r3, [r3, #0]
 801c128:	2b00      	cmp	r3, #0
 801c12a:	d102      	bne.n	801c132 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801c12c:	f06f 030f 	mvn.w	r3, #15
 801c130:	e102      	b.n	801c338 <etharp_query+0x254>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801c132:	68fa      	ldr	r2, [r7, #12]
 801c134:	2101      	movs	r1, #1
 801c136:	68b8      	ldr	r0, [r7, #8]
 801c138:	f7ff fb8c 	bl	801b854 <etharp_find_entry>
 801c13c:	4603      	mov	r3, r0
 801c13e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801c140:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801c144:	2b00      	cmp	r3, #0
 801c146:	da02      	bge.n	801c14e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801c148:	8a7b      	ldrh	r3, [r7, #18]
 801c14a:	b25b      	sxtb	r3, r3
 801c14c:	e0f4      	b.n	801c338 <etharp_query+0x254>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801c14e:	8a7b      	ldrh	r3, [r7, #18]
 801c150:	2b7e      	cmp	r3, #126	; 0x7e
 801c152:	d906      	bls.n	801c162 <etharp_query+0x7e>
 801c154:	4b7a      	ldr	r3, [pc, #488]	; (801c340 <etharp_query+0x25c>)
 801c156:	f240 32c1 	movw	r2, #961	; 0x3c1
 801c15a:	497a      	ldr	r1, [pc, #488]	; (801c344 <etharp_query+0x260>)
 801c15c:	487a      	ldr	r0, [pc, #488]	; (801c348 <etharp_query+0x264>)
 801c15e:	f00a f8e7 	bl	8026330 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801c162:	8a7b      	ldrh	r3, [r7, #18]
 801c164:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801c166:	7c7a      	ldrb	r2, [r7, #17]
 801c168:	4978      	ldr	r1, [pc, #480]	; (801c34c <etharp_query+0x268>)
 801c16a:	4613      	mov	r3, r2
 801c16c:	005b      	lsls	r3, r3, #1
 801c16e:	4413      	add	r3, r2
 801c170:	00db      	lsls	r3, r3, #3
 801c172:	440b      	add	r3, r1
 801c174:	3314      	adds	r3, #20
 801c176:	781b      	ldrb	r3, [r3, #0]
 801c178:	2b00      	cmp	r3, #0
 801c17a:	d115      	bne.n	801c1a8 <etharp_query+0xc4>
    is_new_entry = 1;
 801c17c:	2301      	movs	r3, #1
 801c17e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801c180:	7c7a      	ldrb	r2, [r7, #17]
 801c182:	4972      	ldr	r1, [pc, #456]	; (801c34c <etharp_query+0x268>)
 801c184:	4613      	mov	r3, r2
 801c186:	005b      	lsls	r3, r3, #1
 801c188:	4413      	add	r3, r2
 801c18a:	00db      	lsls	r3, r3, #3
 801c18c:	440b      	add	r3, r1
 801c18e:	3314      	adds	r3, #20
 801c190:	2201      	movs	r2, #1
 801c192:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801c194:	7c7a      	ldrb	r2, [r7, #17]
 801c196:	496d      	ldr	r1, [pc, #436]	; (801c34c <etharp_query+0x268>)
 801c198:	4613      	mov	r3, r2
 801c19a:	005b      	lsls	r3, r3, #1
 801c19c:	4413      	add	r3, r2
 801c19e:	00db      	lsls	r3, r3, #3
 801c1a0:	440b      	add	r3, r1
 801c1a2:	3308      	adds	r3, #8
 801c1a4:	68fa      	ldr	r2, [r7, #12]
 801c1a6:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801c1a8:	7c7a      	ldrb	r2, [r7, #17]
 801c1aa:	4968      	ldr	r1, [pc, #416]	; (801c34c <etharp_query+0x268>)
 801c1ac:	4613      	mov	r3, r2
 801c1ae:	005b      	lsls	r3, r3, #1
 801c1b0:	4413      	add	r3, r2
 801c1b2:	00db      	lsls	r3, r3, #3
 801c1b4:	440b      	add	r3, r1
 801c1b6:	3314      	adds	r3, #20
 801c1b8:	781b      	ldrb	r3, [r3, #0]
 801c1ba:	2b01      	cmp	r3, #1
 801c1bc:	d011      	beq.n	801c1e2 <etharp_query+0xfe>
 801c1be:	7c7a      	ldrb	r2, [r7, #17]
 801c1c0:	4962      	ldr	r1, [pc, #392]	; (801c34c <etharp_query+0x268>)
 801c1c2:	4613      	mov	r3, r2
 801c1c4:	005b      	lsls	r3, r3, #1
 801c1c6:	4413      	add	r3, r2
 801c1c8:	00db      	lsls	r3, r3, #3
 801c1ca:	440b      	add	r3, r1
 801c1cc:	3314      	adds	r3, #20
 801c1ce:	781b      	ldrb	r3, [r3, #0]
 801c1d0:	2b01      	cmp	r3, #1
 801c1d2:	d806      	bhi.n	801c1e2 <etharp_query+0xfe>
 801c1d4:	4b5a      	ldr	r3, [pc, #360]	; (801c340 <etharp_query+0x25c>)
 801c1d6:	f240 32cf 	movw	r2, #975	; 0x3cf
 801c1da:	495d      	ldr	r1, [pc, #372]	; (801c350 <etharp_query+0x26c>)
 801c1dc:	485a      	ldr	r0, [pc, #360]	; (801c348 <etharp_query+0x264>)
 801c1de:	f00a f8a7 	bl	8026330 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801c1e2:	6a3b      	ldr	r3, [r7, #32]
 801c1e4:	2b00      	cmp	r3, #0
 801c1e6:	d102      	bne.n	801c1ee <etharp_query+0x10a>
 801c1e8:	687b      	ldr	r3, [r7, #4]
 801c1ea:	2b00      	cmp	r3, #0
 801c1ec:	d10c      	bne.n	801c208 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801c1ee:	68b9      	ldr	r1, [r7, #8]
 801c1f0:	68f8      	ldr	r0, [r7, #12]
 801c1f2:	f000 f963 	bl	801c4bc <etharp_request>
 801c1f6:	4603      	mov	r3, r0
 801c1f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801c1fc:	687b      	ldr	r3, [r7, #4]
 801c1fe:	2b00      	cmp	r3, #0
 801c200:	d102      	bne.n	801c208 <etharp_query+0x124>
      return result;
 801c202:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801c206:	e097      	b.n	801c338 <etharp_query+0x254>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801c208:	687b      	ldr	r3, [r7, #4]
 801c20a:	2b00      	cmp	r3, #0
 801c20c:	d106      	bne.n	801c21c <etharp_query+0x138>
 801c20e:	4b4c      	ldr	r3, [pc, #304]	; (801c340 <etharp_query+0x25c>)
 801c210:	f240 32e1 	movw	r2, #993	; 0x3e1
 801c214:	494f      	ldr	r1, [pc, #316]	; (801c354 <etharp_query+0x270>)
 801c216:	484c      	ldr	r0, [pc, #304]	; (801c348 <etharp_query+0x264>)
 801c218:	f00a f88a 	bl	8026330 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801c21c:	7c7a      	ldrb	r2, [r7, #17]
 801c21e:	494b      	ldr	r1, [pc, #300]	; (801c34c <etharp_query+0x268>)
 801c220:	4613      	mov	r3, r2
 801c222:	005b      	lsls	r3, r3, #1
 801c224:	4413      	add	r3, r2
 801c226:	00db      	lsls	r3, r3, #3
 801c228:	440b      	add	r3, r1
 801c22a:	3314      	adds	r3, #20
 801c22c:	781b      	ldrb	r3, [r3, #0]
 801c22e:	2b01      	cmp	r3, #1
 801c230:	d918      	bls.n	801c264 <etharp_query+0x180>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801c232:	4a49      	ldr	r2, [pc, #292]	; (801c358 <etharp_query+0x274>)
 801c234:	7c7b      	ldrb	r3, [r7, #17]
 801c236:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801c238:	7c7a      	ldrb	r2, [r7, #17]
 801c23a:	4613      	mov	r3, r2
 801c23c:	005b      	lsls	r3, r3, #1
 801c23e:	4413      	add	r3, r2
 801c240:	00db      	lsls	r3, r3, #3
 801c242:	3308      	adds	r3, #8
 801c244:	4a41      	ldr	r2, [pc, #260]	; (801c34c <etharp_query+0x268>)
 801c246:	4413      	add	r3, r2
 801c248:	1d1a      	adds	r2, r3, #4
 801c24a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801c24e:	9300      	str	r3, [sp, #0]
 801c250:	4613      	mov	r3, r2
 801c252:	697a      	ldr	r2, [r7, #20]
 801c254:	6879      	ldr	r1, [r7, #4]
 801c256:	68f8      	ldr	r0, [r7, #12]
 801c258:	f009 fdca 	bl	8025df0 <ethernet_output>
 801c25c:	4603      	mov	r3, r0
 801c25e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801c262:	e067      	b.n	801c334 <etharp_query+0x250>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801c264:	7c7a      	ldrb	r2, [r7, #17]
 801c266:	4939      	ldr	r1, [pc, #228]	; (801c34c <etharp_query+0x268>)
 801c268:	4613      	mov	r3, r2
 801c26a:	005b      	lsls	r3, r3, #1
 801c26c:	4413      	add	r3, r2
 801c26e:	00db      	lsls	r3, r3, #3
 801c270:	440b      	add	r3, r1
 801c272:	3314      	adds	r3, #20
 801c274:	781b      	ldrb	r3, [r3, #0]
 801c276:	2b01      	cmp	r3, #1
 801c278:	d15c      	bne.n	801c334 <etharp_query+0x250>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801c27a:	2300      	movs	r3, #0
 801c27c:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801c27e:	687b      	ldr	r3, [r7, #4]
 801c280:	61fb      	str	r3, [r7, #28]
    while (p) {
 801c282:	e01c      	b.n	801c2be <etharp_query+0x1da>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801c284:	69fb      	ldr	r3, [r7, #28]
 801c286:	895a      	ldrh	r2, [r3, #10]
 801c288:	69fb      	ldr	r3, [r7, #28]
 801c28a:	891b      	ldrh	r3, [r3, #8]
 801c28c:	429a      	cmp	r2, r3
 801c28e:	d10a      	bne.n	801c2a6 <etharp_query+0x1c2>
 801c290:	69fb      	ldr	r3, [r7, #28]
 801c292:	681b      	ldr	r3, [r3, #0]
 801c294:	2b00      	cmp	r3, #0
 801c296:	d006      	beq.n	801c2a6 <etharp_query+0x1c2>
 801c298:	4b29      	ldr	r3, [pc, #164]	; (801c340 <etharp_query+0x25c>)
 801c29a:	f240 32f1 	movw	r2, #1009	; 0x3f1
 801c29e:	492f      	ldr	r1, [pc, #188]	; (801c35c <etharp_query+0x278>)
 801c2a0:	4829      	ldr	r0, [pc, #164]	; (801c348 <etharp_query+0x264>)
 801c2a2:	f00a f845 	bl	8026330 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801c2a6:	69fb      	ldr	r3, [r7, #28]
 801c2a8:	7b1b      	ldrb	r3, [r3, #12]
 801c2aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c2ae:	2b00      	cmp	r3, #0
 801c2b0:	d002      	beq.n	801c2b8 <etharp_query+0x1d4>
        copy_needed = 1;
 801c2b2:	2301      	movs	r3, #1
 801c2b4:	61bb      	str	r3, [r7, #24]
        break;
 801c2b6:	e005      	b.n	801c2c4 <etharp_query+0x1e0>
      }
      p = p->next;
 801c2b8:	69fb      	ldr	r3, [r7, #28]
 801c2ba:	681b      	ldr	r3, [r3, #0]
 801c2bc:	61fb      	str	r3, [r7, #28]
    while (p) {
 801c2be:	69fb      	ldr	r3, [r7, #28]
 801c2c0:	2b00      	cmp	r3, #0
 801c2c2:	d1df      	bne.n	801c284 <etharp_query+0x1a0>
    }
    if (copy_needed) {
 801c2c4:	69bb      	ldr	r3, [r7, #24]
 801c2c6:	2b00      	cmp	r3, #0
 801c2c8:	d007      	beq.n	801c2da <etharp_query+0x1f6>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801c2ca:	687a      	ldr	r2, [r7, #4]
 801c2cc:	f44f 7120 	mov.w	r1, #640	; 0x280
 801c2d0:	200e      	movs	r0, #14
 801c2d2:	f003 f9d9 	bl	801f688 <pbuf_clone>
 801c2d6:	61f8      	str	r0, [r7, #28]
 801c2d8:	e004      	b.n	801c2e4 <etharp_query+0x200>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801c2da:	687b      	ldr	r3, [r7, #4]
 801c2dc:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801c2de:	69f8      	ldr	r0, [r7, #28]
 801c2e0:	f002 fec8 	bl	801f074 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801c2e4:	69fb      	ldr	r3, [r7, #28]
 801c2e6:	2b00      	cmp	r3, #0
 801c2e8:	d021      	beq.n	801c32e <etharp_query+0x24a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801c2ea:	7c7a      	ldrb	r2, [r7, #17]
 801c2ec:	4917      	ldr	r1, [pc, #92]	; (801c34c <etharp_query+0x268>)
 801c2ee:	4613      	mov	r3, r2
 801c2f0:	005b      	lsls	r3, r3, #1
 801c2f2:	4413      	add	r3, r2
 801c2f4:	00db      	lsls	r3, r3, #3
 801c2f6:	440b      	add	r3, r1
 801c2f8:	681b      	ldr	r3, [r3, #0]
 801c2fa:	2b00      	cmp	r3, #0
 801c2fc:	d00a      	beq.n	801c314 <etharp_query+0x230>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801c2fe:	7c7a      	ldrb	r2, [r7, #17]
 801c300:	4912      	ldr	r1, [pc, #72]	; (801c34c <etharp_query+0x268>)
 801c302:	4613      	mov	r3, r2
 801c304:	005b      	lsls	r3, r3, #1
 801c306:	4413      	add	r3, r2
 801c308:	00db      	lsls	r3, r3, #3
 801c30a:	440b      	add	r3, r1
 801c30c:	681b      	ldr	r3, [r3, #0]
 801c30e:	4618      	mov	r0, r3
 801c310:	f002 fe0a 	bl	801ef28 <pbuf_free>
      }
      arp_table[i].q = p;
 801c314:	7c7a      	ldrb	r2, [r7, #17]
 801c316:	490d      	ldr	r1, [pc, #52]	; (801c34c <etharp_query+0x268>)
 801c318:	4613      	mov	r3, r2
 801c31a:	005b      	lsls	r3, r3, #1
 801c31c:	4413      	add	r3, r2
 801c31e:	00db      	lsls	r3, r3, #3
 801c320:	440b      	add	r3, r1
 801c322:	69fa      	ldr	r2, [r7, #28]
 801c324:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801c326:	2300      	movs	r3, #0
 801c328:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801c32c:	e002      	b.n	801c334 <etharp_query+0x250>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801c32e:	23ff      	movs	r3, #255	; 0xff
 801c330:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801c334:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801c338:	4618      	mov	r0, r3
 801c33a:	3728      	adds	r7, #40	; 0x28
 801c33c:	46bd      	mov	sp, r7
 801c33e:	bd80      	pop	{r7, pc}
 801c340:	08028010 	.word	0x08028010
 801c344:	080281bc 	.word	0x080281bc
 801c348:	08028088 	.word	0x08028088
 801c34c:	20019578 	.word	0x20019578
 801c350:	080281cc 	.word	0x080281cc
 801c354:	080281b0 	.word	0x080281b0
 801c358:	20019668 	.word	0x20019668
 801c35c:	080281f4 	.word	0x080281f4

0801c360 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801c360:	b580      	push	{r7, lr}
 801c362:	b08a      	sub	sp, #40	; 0x28
 801c364:	af02      	add	r7, sp, #8
 801c366:	60f8      	str	r0, [r7, #12]
 801c368:	60b9      	str	r1, [r7, #8]
 801c36a:	607a      	str	r2, [r7, #4]
 801c36c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801c36e:	2300      	movs	r3, #0
 801c370:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801c372:	68fb      	ldr	r3, [r7, #12]
 801c374:	2b00      	cmp	r3, #0
 801c376:	d106      	bne.n	801c386 <etharp_raw+0x26>
 801c378:	4b3a      	ldr	r3, [pc, #232]	; (801c464 <etharp_raw+0x104>)
 801c37a:	f240 4257 	movw	r2, #1111	; 0x457
 801c37e:	493a      	ldr	r1, [pc, #232]	; (801c468 <etharp_raw+0x108>)
 801c380:	483a      	ldr	r0, [pc, #232]	; (801c46c <etharp_raw+0x10c>)
 801c382:	f009 ffd5 	bl	8026330 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801c386:	f44f 7220 	mov.w	r2, #640	; 0x280
 801c38a:	211c      	movs	r1, #28
 801c38c:	200e      	movs	r0, #14
 801c38e:	f002 fae9 	bl	801e964 <pbuf_alloc>
 801c392:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801c394:	69bb      	ldr	r3, [r7, #24]
 801c396:	2b00      	cmp	r3, #0
 801c398:	d102      	bne.n	801c3a0 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801c39a:	f04f 33ff 	mov.w	r3, #4294967295
 801c39e:	e05d      	b.n	801c45c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801c3a0:	69bb      	ldr	r3, [r7, #24]
 801c3a2:	895b      	ldrh	r3, [r3, #10]
 801c3a4:	2b1b      	cmp	r3, #27
 801c3a6:	d806      	bhi.n	801c3b6 <etharp_raw+0x56>
 801c3a8:	4b2e      	ldr	r3, [pc, #184]	; (801c464 <etharp_raw+0x104>)
 801c3aa:	f240 4263 	movw	r2, #1123	; 0x463
 801c3ae:	4930      	ldr	r1, [pc, #192]	; (801c470 <etharp_raw+0x110>)
 801c3b0:	482e      	ldr	r0, [pc, #184]	; (801c46c <etharp_raw+0x10c>)
 801c3b2:	f009 ffbd 	bl	8026330 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801c3b6:	69bb      	ldr	r3, [r7, #24]
 801c3b8:	685b      	ldr	r3, [r3, #4]
 801c3ba:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801c3bc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801c3be:	4618      	mov	r0, r3
 801c3c0:	f7fc feb2 	bl	8019128 <lwip_htons>
 801c3c4:	4603      	mov	r3, r0
 801c3c6:	461a      	mov	r2, r3
 801c3c8:	697b      	ldr	r3, [r7, #20]
 801c3ca:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801c3cc:	68fb      	ldr	r3, [r7, #12]
 801c3ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801c3d2:	2b06      	cmp	r3, #6
 801c3d4:	d006      	beq.n	801c3e4 <etharp_raw+0x84>
 801c3d6:	4b23      	ldr	r3, [pc, #140]	; (801c464 <etharp_raw+0x104>)
 801c3d8:	f240 426a 	movw	r2, #1130	; 0x46a
 801c3dc:	4925      	ldr	r1, [pc, #148]	; (801c474 <etharp_raw+0x114>)
 801c3de:	4823      	ldr	r0, [pc, #140]	; (801c46c <etharp_raw+0x10c>)
 801c3e0:	f009 ffa6 	bl	8026330 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801c3e4:	697b      	ldr	r3, [r7, #20]
 801c3e6:	3308      	adds	r3, #8
 801c3e8:	2206      	movs	r2, #6
 801c3ea:	6839      	ldr	r1, [r7, #0]
 801c3ec:	4618      	mov	r0, r3
 801c3ee:	f009 fec6 	bl	802617e <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801c3f2:	697b      	ldr	r3, [r7, #20]
 801c3f4:	3312      	adds	r3, #18
 801c3f6:	2206      	movs	r2, #6
 801c3f8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801c3fa:	4618      	mov	r0, r3
 801c3fc:	f009 febf 	bl	802617e <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801c400:	697b      	ldr	r3, [r7, #20]
 801c402:	330e      	adds	r3, #14
 801c404:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801c406:	6812      	ldr	r2, [r2, #0]
 801c408:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801c40a:	697b      	ldr	r3, [r7, #20]
 801c40c:	3318      	adds	r3, #24
 801c40e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801c410:	6812      	ldr	r2, [r2, #0]
 801c412:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801c414:	697b      	ldr	r3, [r7, #20]
 801c416:	2200      	movs	r2, #0
 801c418:	701a      	strb	r2, [r3, #0]
 801c41a:	2200      	movs	r2, #0
 801c41c:	f042 0201 	orr.w	r2, r2, #1
 801c420:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801c422:	697b      	ldr	r3, [r7, #20]
 801c424:	2200      	movs	r2, #0
 801c426:	f042 0208 	orr.w	r2, r2, #8
 801c42a:	709a      	strb	r2, [r3, #2]
 801c42c:	2200      	movs	r2, #0
 801c42e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801c430:	697b      	ldr	r3, [r7, #20]
 801c432:	2206      	movs	r2, #6
 801c434:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801c436:	697b      	ldr	r3, [r7, #20]
 801c438:	2204      	movs	r2, #4
 801c43a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801c43c:	f640 0306 	movw	r3, #2054	; 0x806
 801c440:	9300      	str	r3, [sp, #0]
 801c442:	687b      	ldr	r3, [r7, #4]
 801c444:	68ba      	ldr	r2, [r7, #8]
 801c446:	69b9      	ldr	r1, [r7, #24]
 801c448:	68f8      	ldr	r0, [r7, #12]
 801c44a:	f009 fcd1 	bl	8025df0 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801c44e:	69b8      	ldr	r0, [r7, #24]
 801c450:	f002 fd6a 	bl	801ef28 <pbuf_free>
  p = NULL;
 801c454:	2300      	movs	r3, #0
 801c456:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801c458:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801c45c:	4618      	mov	r0, r3
 801c45e:	3720      	adds	r7, #32
 801c460:	46bd      	mov	sp, r7
 801c462:	bd80      	pop	{r7, pc}
 801c464:	08028010 	.word	0x08028010
 801c468:	08028160 	.word	0x08028160
 801c46c:	08028088 	.word	0x08028088
 801c470:	08028210 	.word	0x08028210
 801c474:	08028244 	.word	0x08028244

0801c478 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801c478:	b580      	push	{r7, lr}
 801c47a:	b088      	sub	sp, #32
 801c47c:	af04      	add	r7, sp, #16
 801c47e:	60f8      	str	r0, [r7, #12]
 801c480:	60b9      	str	r1, [r7, #8]
 801c482:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801c484:	68fb      	ldr	r3, [r7, #12]
 801c486:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801c48a:	68fb      	ldr	r3, [r7, #12]
 801c48c:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 801c490:	68fb      	ldr	r3, [r7, #12]
 801c492:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801c494:	2201      	movs	r2, #1
 801c496:	9203      	str	r2, [sp, #12]
 801c498:	68ba      	ldr	r2, [r7, #8]
 801c49a:	9202      	str	r2, [sp, #8]
 801c49c:	4a06      	ldr	r2, [pc, #24]	; (801c4b8 <etharp_request_dst+0x40>)
 801c49e:	9201      	str	r2, [sp, #4]
 801c4a0:	9300      	str	r3, [sp, #0]
 801c4a2:	4603      	mov	r3, r0
 801c4a4:	687a      	ldr	r2, [r7, #4]
 801c4a6:	68f8      	ldr	r0, [r7, #12]
 801c4a8:	f7ff ff5a 	bl	801c360 <etharp_raw>
 801c4ac:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801c4ae:	4618      	mov	r0, r3
 801c4b0:	3710      	adds	r7, #16
 801c4b2:	46bd      	mov	sp, r7
 801c4b4:	bd80      	pop	{r7, pc}
 801c4b6:	bf00      	nop
 801c4b8:	0802b868 	.word	0x0802b868

0801c4bc <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801c4bc:	b580      	push	{r7, lr}
 801c4be:	b082      	sub	sp, #8
 801c4c0:	af00      	add	r7, sp, #0
 801c4c2:	6078      	str	r0, [r7, #4]
 801c4c4:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801c4c6:	4a05      	ldr	r2, [pc, #20]	; (801c4dc <etharp_request+0x20>)
 801c4c8:	6839      	ldr	r1, [r7, #0]
 801c4ca:	6878      	ldr	r0, [r7, #4]
 801c4cc:	f7ff ffd4 	bl	801c478 <etharp_request_dst>
 801c4d0:	4603      	mov	r3, r0
}
 801c4d2:	4618      	mov	r0, r3
 801c4d4:	3708      	adds	r7, #8
 801c4d6:	46bd      	mov	sp, r7
 801c4d8:	bd80      	pop	{r7, pc}
 801c4da:	bf00      	nop
 801c4dc:	0802b860 	.word	0x0802b860

0801c4e0 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801c4e0:	b580      	push	{r7, lr}
 801c4e2:	b08e      	sub	sp, #56	; 0x38
 801c4e4:	af04      	add	r7, sp, #16
 801c4e6:	6078      	str	r0, [r7, #4]
 801c4e8:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801c4ea:	4b7e      	ldr	r3, [pc, #504]	; (801c6e4 <icmp_input+0x204>)
 801c4ec:	689b      	ldr	r3, [r3, #8]
 801c4ee:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801c4f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c4f2:	781b      	ldrb	r3, [r3, #0]
 801c4f4:	f003 030f 	and.w	r3, r3, #15
 801c4f8:	b2db      	uxtb	r3, r3
 801c4fa:	009b      	lsls	r3, r3, #2
 801c4fc:	b2db      	uxtb	r3, r3
 801c4fe:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 801c500:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801c502:	2b13      	cmp	r3, #19
 801c504:	f240 80d7 	bls.w	801c6b6 <icmp_input+0x1d6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801c508:	687b      	ldr	r3, [r7, #4]
 801c50a:	895b      	ldrh	r3, [r3, #10]
 801c50c:	2b03      	cmp	r3, #3
 801c50e:	f240 80d4 	bls.w	801c6ba <icmp_input+0x1da>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801c512:	687b      	ldr	r3, [r7, #4]
 801c514:	685b      	ldr	r3, [r3, #4]
 801c516:	781b      	ldrb	r3, [r3, #0]
 801c518:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801c51c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801c520:	2b00      	cmp	r3, #0
 801c522:	f000 80c1 	beq.w	801c6a8 <icmp_input+0x1c8>
 801c526:	2b08      	cmp	r3, #8
 801c528:	f040 80c1 	bne.w	801c6ae <icmp_input+0x1ce>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801c52c:	4b6e      	ldr	r3, [pc, #440]	; (801c6e8 <icmp_input+0x208>)
 801c52e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801c530:	4b6c      	ldr	r3, [pc, #432]	; (801c6e4 <icmp_input+0x204>)
 801c532:	695b      	ldr	r3, [r3, #20]
 801c534:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801c538:	2be0      	cmp	r3, #224	; 0xe0
 801c53a:	f000 80c5 	beq.w	801c6c8 <icmp_input+0x1e8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801c53e:	4b69      	ldr	r3, [pc, #420]	; (801c6e4 <icmp_input+0x204>)
 801c540:	695a      	ldr	r2, [r3, #20]
 801c542:	4b68      	ldr	r3, [pc, #416]	; (801c6e4 <icmp_input+0x204>)
 801c544:	681b      	ldr	r3, [r3, #0]
 801c546:	4619      	mov	r1, r3
 801c548:	4610      	mov	r0, r2
 801c54a:	f000 fc0d 	bl	801cd68 <ip4_addr_isbroadcast_u32>
 801c54e:	4603      	mov	r3, r0
 801c550:	2b00      	cmp	r3, #0
 801c552:	f040 80bb 	bne.w	801c6cc <icmp_input+0x1ec>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801c556:	687b      	ldr	r3, [r7, #4]
 801c558:	891b      	ldrh	r3, [r3, #8]
 801c55a:	2b07      	cmp	r3, #7
 801c55c:	f240 80af 	bls.w	801c6be <icmp_input+0x1de>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 801c560:	6878      	ldr	r0, [r7, #4]
 801c562:	f7fd f990 	bl	8019886 <inet_chksum_pbuf>
 801c566:	4603      	mov	r3, r0
 801c568:	2b00      	cmp	r3, #0
 801c56a:	d003      	beq.n	801c574 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 801c56c:	6878      	ldr	r0, [r7, #4]
 801c56e:	f002 fcdb 	bl	801ef28 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 801c572:	e0b4      	b.n	801c6de <icmp_input+0x1fe>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801c574:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801c576:	330e      	adds	r3, #14
 801c578:	4619      	mov	r1, r3
 801c57a:	6878      	ldr	r0, [r7, #4]
 801c57c:	f002 fc3e 	bl	801edfc <pbuf_add_header>
 801c580:	4603      	mov	r3, r0
 801c582:	2b00      	cmp	r3, #0
 801c584:	d04b      	beq.n	801c61e <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801c586:	687b      	ldr	r3, [r7, #4]
 801c588:	891a      	ldrh	r2, [r3, #8]
 801c58a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801c58c:	4413      	add	r3, r2
 801c58e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801c590:	687b      	ldr	r3, [r7, #4]
 801c592:	891b      	ldrh	r3, [r3, #8]
 801c594:	8b7a      	ldrh	r2, [r7, #26]
 801c596:	429a      	cmp	r2, r3
 801c598:	f0c0 809a 	bcc.w	801c6d0 <icmp_input+0x1f0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801c59c:	8b7b      	ldrh	r3, [r7, #26]
 801c59e:	f44f 7220 	mov.w	r2, #640	; 0x280
 801c5a2:	4619      	mov	r1, r3
 801c5a4:	200e      	movs	r0, #14
 801c5a6:	f002 f9dd 	bl	801e964 <pbuf_alloc>
 801c5aa:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801c5ac:	697b      	ldr	r3, [r7, #20]
 801c5ae:	2b00      	cmp	r3, #0
 801c5b0:	f000 8090 	beq.w	801c6d4 <icmp_input+0x1f4>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801c5b4:	697b      	ldr	r3, [r7, #20]
 801c5b6:	895b      	ldrh	r3, [r3, #10]
 801c5b8:	461a      	mov	r2, r3
 801c5ba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801c5bc:	3308      	adds	r3, #8
 801c5be:	429a      	cmp	r2, r3
 801c5c0:	d203      	bcs.n	801c5ca <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801c5c2:	6978      	ldr	r0, [r7, #20]
 801c5c4:	f002 fcb0 	bl	801ef28 <pbuf_free>
          goto icmperr;
 801c5c8:	e085      	b.n	801c6d6 <icmp_input+0x1f6>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801c5ca:	697b      	ldr	r3, [r7, #20]
 801c5cc:	685b      	ldr	r3, [r3, #4]
 801c5ce:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801c5d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801c5d2:	4618      	mov	r0, r3
 801c5d4:	f009 fdd3 	bl	802617e <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801c5d8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801c5da:	4619      	mov	r1, r3
 801c5dc:	6978      	ldr	r0, [r7, #20]
 801c5de:	f002 fc1d 	bl	801ee1c <pbuf_remove_header>
 801c5e2:	4603      	mov	r3, r0
 801c5e4:	2b00      	cmp	r3, #0
 801c5e6:	d009      	beq.n	801c5fc <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801c5e8:	4b40      	ldr	r3, [pc, #256]	; (801c6ec <icmp_input+0x20c>)
 801c5ea:	22b6      	movs	r2, #182	; 0xb6
 801c5ec:	4940      	ldr	r1, [pc, #256]	; (801c6f0 <icmp_input+0x210>)
 801c5ee:	4841      	ldr	r0, [pc, #260]	; (801c6f4 <icmp_input+0x214>)
 801c5f0:	f009 fe9e 	bl	8026330 <iprintf>
          pbuf_free(r);
 801c5f4:	6978      	ldr	r0, [r7, #20]
 801c5f6:	f002 fc97 	bl	801ef28 <pbuf_free>
          goto icmperr;
 801c5fa:	e06c      	b.n	801c6d6 <icmp_input+0x1f6>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801c5fc:	6879      	ldr	r1, [r7, #4]
 801c5fe:	6978      	ldr	r0, [r7, #20]
 801c600:	f002 fdc6 	bl	801f190 <pbuf_copy>
 801c604:	4603      	mov	r3, r0
 801c606:	2b00      	cmp	r3, #0
 801c608:	d003      	beq.n	801c612 <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801c60a:	6978      	ldr	r0, [r7, #20]
 801c60c:	f002 fc8c 	bl	801ef28 <pbuf_free>
          goto icmperr;
 801c610:	e061      	b.n	801c6d6 <icmp_input+0x1f6>
        }
        /* free the original p */
        pbuf_free(p);
 801c612:	6878      	ldr	r0, [r7, #4]
 801c614:	f002 fc88 	bl	801ef28 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801c618:	697b      	ldr	r3, [r7, #20]
 801c61a:	607b      	str	r3, [r7, #4]
 801c61c:	e00f      	b.n	801c63e <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801c61e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801c620:	330e      	adds	r3, #14
 801c622:	4619      	mov	r1, r3
 801c624:	6878      	ldr	r0, [r7, #4]
 801c626:	f002 fbf9 	bl	801ee1c <pbuf_remove_header>
 801c62a:	4603      	mov	r3, r0
 801c62c:	2b00      	cmp	r3, #0
 801c62e:	d006      	beq.n	801c63e <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801c630:	4b2e      	ldr	r3, [pc, #184]	; (801c6ec <icmp_input+0x20c>)
 801c632:	22c7      	movs	r2, #199	; 0xc7
 801c634:	4930      	ldr	r1, [pc, #192]	; (801c6f8 <icmp_input+0x218>)
 801c636:	482f      	ldr	r0, [pc, #188]	; (801c6f4 <icmp_input+0x214>)
 801c638:	f009 fe7a 	bl	8026330 <iprintf>
          goto icmperr;
 801c63c:	e04b      	b.n	801c6d6 <icmp_input+0x1f6>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801c63e:	687b      	ldr	r3, [r7, #4]
 801c640:	685b      	ldr	r3, [r3, #4]
 801c642:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801c644:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801c646:	4619      	mov	r1, r3
 801c648:	6878      	ldr	r0, [r7, #4]
 801c64a:	f002 fbd7 	bl	801edfc <pbuf_add_header>
 801c64e:	4603      	mov	r3, r0
 801c650:	2b00      	cmp	r3, #0
 801c652:	d12b      	bne.n	801c6ac <icmp_input+0x1cc>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801c654:	687b      	ldr	r3, [r7, #4]
 801c656:	685b      	ldr	r3, [r3, #4]
 801c658:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801c65a:	69fb      	ldr	r3, [r7, #28]
 801c65c:	681a      	ldr	r2, [r3, #0]
 801c65e:	68fb      	ldr	r3, [r7, #12]
 801c660:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801c662:	4b20      	ldr	r3, [pc, #128]	; (801c6e4 <icmp_input+0x204>)
 801c664:	691a      	ldr	r2, [r3, #16]
 801c666:	68fb      	ldr	r3, [r7, #12]
 801c668:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801c66a:	693b      	ldr	r3, [r7, #16]
 801c66c:	2200      	movs	r2, #0
 801c66e:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 801c670:	693b      	ldr	r3, [r7, #16]
 801c672:	2200      	movs	r2, #0
 801c674:	709a      	strb	r2, [r3, #2]
 801c676:	2200      	movs	r2, #0
 801c678:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801c67a:	68fb      	ldr	r3, [r7, #12]
 801c67c:	22ff      	movs	r2, #255	; 0xff
 801c67e:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801c680:	68fb      	ldr	r3, [r7, #12]
 801c682:	2200      	movs	r2, #0
 801c684:	729a      	strb	r2, [r3, #10]
 801c686:	2200      	movs	r2, #0
 801c688:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801c68a:	683b      	ldr	r3, [r7, #0]
 801c68c:	9302      	str	r3, [sp, #8]
 801c68e:	2301      	movs	r3, #1
 801c690:	9301      	str	r3, [sp, #4]
 801c692:	2300      	movs	r3, #0
 801c694:	9300      	str	r3, [sp, #0]
 801c696:	23ff      	movs	r3, #255	; 0xff
 801c698:	2200      	movs	r2, #0
 801c69a:	69f9      	ldr	r1, [r7, #28]
 801c69c:	6878      	ldr	r0, [r7, #4]
 801c69e:	f000 fa8b 	bl	801cbb8 <ip4_output_if>
 801c6a2:	4603      	mov	r3, r0
 801c6a4:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801c6a6:	e001      	b.n	801c6ac <icmp_input+0x1cc>
      break;
 801c6a8:	bf00      	nop
 801c6aa:	e000      	b.n	801c6ae <icmp_input+0x1ce>
      break;
 801c6ac:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801c6ae:	6878      	ldr	r0, [r7, #4]
 801c6b0:	f002 fc3a 	bl	801ef28 <pbuf_free>
  return;
 801c6b4:	e013      	b.n	801c6de <icmp_input+0x1fe>
    goto lenerr;
 801c6b6:	bf00      	nop
 801c6b8:	e002      	b.n	801c6c0 <icmp_input+0x1e0>
    goto lenerr;
 801c6ba:	bf00      	nop
 801c6bc:	e000      	b.n	801c6c0 <icmp_input+0x1e0>
        goto lenerr;
 801c6be:	bf00      	nop
lenerr:
  pbuf_free(p);
 801c6c0:	6878      	ldr	r0, [r7, #4]
 801c6c2:	f002 fc31 	bl	801ef28 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801c6c6:	e00a      	b.n	801c6de <icmp_input+0x1fe>
        goto icmperr;
 801c6c8:	bf00      	nop
 801c6ca:	e004      	b.n	801c6d6 <icmp_input+0x1f6>
        goto icmperr;
 801c6cc:	bf00      	nop
 801c6ce:	e002      	b.n	801c6d6 <icmp_input+0x1f6>
          goto icmperr;
 801c6d0:	bf00      	nop
 801c6d2:	e000      	b.n	801c6d6 <icmp_input+0x1f6>
          goto icmperr;
 801c6d4:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801c6d6:	6878      	ldr	r0, [r7, #4]
 801c6d8:	f002 fc26 	bl	801ef28 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801c6dc:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801c6de:	3728      	adds	r7, #40	; 0x28
 801c6e0:	46bd      	mov	sp, r7
 801c6e2:	bd80      	pop	{r7, pc}
 801c6e4:	2001c9fc 	.word	0x2001c9fc
 801c6e8:	2001ca10 	.word	0x2001ca10
 801c6ec:	08028288 	.word	0x08028288
 801c6f0:	080282c0 	.word	0x080282c0
 801c6f4:	080282f8 	.word	0x080282f8
 801c6f8:	08028320 	.word	0x08028320

0801c6fc <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801c6fc:	b580      	push	{r7, lr}
 801c6fe:	b082      	sub	sp, #8
 801c700:	af00      	add	r7, sp, #0
 801c702:	6078      	str	r0, [r7, #4]
 801c704:	460b      	mov	r3, r1
 801c706:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801c708:	78fb      	ldrb	r3, [r7, #3]
 801c70a:	461a      	mov	r2, r3
 801c70c:	2103      	movs	r1, #3
 801c70e:	6878      	ldr	r0, [r7, #4]
 801c710:	f000 f814 	bl	801c73c <icmp_send_response>
}
 801c714:	bf00      	nop
 801c716:	3708      	adds	r7, #8
 801c718:	46bd      	mov	sp, r7
 801c71a:	bd80      	pop	{r7, pc}

0801c71c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801c71c:	b580      	push	{r7, lr}
 801c71e:	b082      	sub	sp, #8
 801c720:	af00      	add	r7, sp, #0
 801c722:	6078      	str	r0, [r7, #4]
 801c724:	460b      	mov	r3, r1
 801c726:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801c728:	78fb      	ldrb	r3, [r7, #3]
 801c72a:	461a      	mov	r2, r3
 801c72c:	210b      	movs	r1, #11
 801c72e:	6878      	ldr	r0, [r7, #4]
 801c730:	f000 f804 	bl	801c73c <icmp_send_response>
}
 801c734:	bf00      	nop
 801c736:	3708      	adds	r7, #8
 801c738:	46bd      	mov	sp, r7
 801c73a:	bd80      	pop	{r7, pc}

0801c73c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801c73c:	b580      	push	{r7, lr}
 801c73e:	b08c      	sub	sp, #48	; 0x30
 801c740:	af04      	add	r7, sp, #16
 801c742:	6078      	str	r0, [r7, #4]
 801c744:	460b      	mov	r3, r1
 801c746:	70fb      	strb	r3, [r7, #3]
 801c748:	4613      	mov	r3, r2
 801c74a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801c74c:	f44f 7220 	mov.w	r2, #640	; 0x280
 801c750:	2124      	movs	r1, #36	; 0x24
 801c752:	2022      	movs	r0, #34	; 0x22
 801c754:	f002 f906 	bl	801e964 <pbuf_alloc>
 801c758:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801c75a:	69fb      	ldr	r3, [r7, #28]
 801c75c:	2b00      	cmp	r3, #0
 801c75e:	d04c      	beq.n	801c7fa <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801c760:	69fb      	ldr	r3, [r7, #28]
 801c762:	895b      	ldrh	r3, [r3, #10]
 801c764:	2b23      	cmp	r3, #35	; 0x23
 801c766:	d806      	bhi.n	801c776 <icmp_send_response+0x3a>
 801c768:	4b26      	ldr	r3, [pc, #152]	; (801c804 <icmp_send_response+0xc8>)
 801c76a:	f240 1269 	movw	r2, #361	; 0x169
 801c76e:	4926      	ldr	r1, [pc, #152]	; (801c808 <icmp_send_response+0xcc>)
 801c770:	4826      	ldr	r0, [pc, #152]	; (801c80c <icmp_send_response+0xd0>)
 801c772:	f009 fddd 	bl	8026330 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801c776:	687b      	ldr	r3, [r7, #4]
 801c778:	685b      	ldr	r3, [r3, #4]
 801c77a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801c77c:	69fb      	ldr	r3, [r7, #28]
 801c77e:	685b      	ldr	r3, [r3, #4]
 801c780:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801c782:	697b      	ldr	r3, [r7, #20]
 801c784:	78fa      	ldrb	r2, [r7, #3]
 801c786:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801c788:	697b      	ldr	r3, [r7, #20]
 801c78a:	78ba      	ldrb	r2, [r7, #2]
 801c78c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801c78e:	697b      	ldr	r3, [r7, #20]
 801c790:	2200      	movs	r2, #0
 801c792:	711a      	strb	r2, [r3, #4]
 801c794:	2200      	movs	r2, #0
 801c796:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801c798:	697b      	ldr	r3, [r7, #20]
 801c79a:	2200      	movs	r2, #0
 801c79c:	719a      	strb	r2, [r3, #6]
 801c79e:	2200      	movs	r2, #0
 801c7a0:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801c7a2:	69fb      	ldr	r3, [r7, #28]
 801c7a4:	685b      	ldr	r3, [r3, #4]
 801c7a6:	f103 0008 	add.w	r0, r3, #8
 801c7aa:	687b      	ldr	r3, [r7, #4]
 801c7ac:	685b      	ldr	r3, [r3, #4]
 801c7ae:	221c      	movs	r2, #28
 801c7b0:	4619      	mov	r1, r3
 801c7b2:	f009 fce4 	bl	802617e <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801c7b6:	69bb      	ldr	r3, [r7, #24]
 801c7b8:	68db      	ldr	r3, [r3, #12]
 801c7ba:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801c7bc:	f107 030c 	add.w	r3, r7, #12
 801c7c0:	4618      	mov	r0, r3
 801c7c2:	f000 f825 	bl	801c810 <ip4_route>
 801c7c6:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801c7c8:	693b      	ldr	r3, [r7, #16]
 801c7ca:	2b00      	cmp	r3, #0
 801c7cc:	d011      	beq.n	801c7f2 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801c7ce:	697b      	ldr	r3, [r7, #20]
 801c7d0:	2200      	movs	r2, #0
 801c7d2:	709a      	strb	r2, [r3, #2]
 801c7d4:	2200      	movs	r2, #0
 801c7d6:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801c7d8:	f107 020c 	add.w	r2, r7, #12
 801c7dc:	693b      	ldr	r3, [r7, #16]
 801c7de:	9302      	str	r3, [sp, #8]
 801c7e0:	2301      	movs	r3, #1
 801c7e2:	9301      	str	r3, [sp, #4]
 801c7e4:	2300      	movs	r3, #0
 801c7e6:	9300      	str	r3, [sp, #0]
 801c7e8:	23ff      	movs	r3, #255	; 0xff
 801c7ea:	2100      	movs	r1, #0
 801c7ec:	69f8      	ldr	r0, [r7, #28]
 801c7ee:	f000 f9e3 	bl	801cbb8 <ip4_output_if>
  }
  pbuf_free(q);
 801c7f2:	69f8      	ldr	r0, [r7, #28]
 801c7f4:	f002 fb98 	bl	801ef28 <pbuf_free>
 801c7f8:	e000      	b.n	801c7fc <icmp_send_response+0xc0>
    return;
 801c7fa:	bf00      	nop
}
 801c7fc:	3720      	adds	r7, #32
 801c7fe:	46bd      	mov	sp, r7
 801c800:	bd80      	pop	{r7, pc}
 801c802:	bf00      	nop
 801c804:	08028288 	.word	0x08028288
 801c808:	08028354 	.word	0x08028354
 801c80c:	080282f8 	.word	0x080282f8

0801c810 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801c810:	b480      	push	{r7}
 801c812:	b085      	sub	sp, #20
 801c814:	af00      	add	r7, sp, #0
 801c816:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801c818:	4b31      	ldr	r3, [pc, #196]	; (801c8e0 <ip4_route+0xd0>)
 801c81a:	681b      	ldr	r3, [r3, #0]
 801c81c:	60fb      	str	r3, [r7, #12]
 801c81e:	e033      	b.n	801c888 <ip4_route+0x78>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801c820:	68fb      	ldr	r3, [r7, #12]
 801c822:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801c826:	f003 0301 	and.w	r3, r3, #1
 801c82a:	2b00      	cmp	r3, #0
 801c82c:	d029      	beq.n	801c882 <ip4_route+0x72>
 801c82e:	68fb      	ldr	r3, [r7, #12]
 801c830:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801c834:	f003 0304 	and.w	r3, r3, #4
 801c838:	2b00      	cmp	r3, #0
 801c83a:	d022      	beq.n	801c882 <ip4_route+0x72>
 801c83c:	68fb      	ldr	r3, [r7, #12]
 801c83e:	3304      	adds	r3, #4
 801c840:	681b      	ldr	r3, [r3, #0]
 801c842:	2b00      	cmp	r3, #0
 801c844:	d01d      	beq.n	801c882 <ip4_route+0x72>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801c846:	687b      	ldr	r3, [r7, #4]
 801c848:	681a      	ldr	r2, [r3, #0]
 801c84a:	68fb      	ldr	r3, [r7, #12]
 801c84c:	3304      	adds	r3, #4
 801c84e:	681b      	ldr	r3, [r3, #0]
 801c850:	405a      	eors	r2, r3
 801c852:	68fb      	ldr	r3, [r7, #12]
 801c854:	3308      	adds	r3, #8
 801c856:	681b      	ldr	r3, [r3, #0]
 801c858:	4013      	ands	r3, r2
 801c85a:	2b00      	cmp	r3, #0
 801c85c:	d101      	bne.n	801c862 <ip4_route+0x52>
        /* return netif on which to forward IP packet */
        return netif;
 801c85e:	68fb      	ldr	r3, [r7, #12]
 801c860:	e038      	b.n	801c8d4 <ip4_route+0xc4>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801c862:	68fb      	ldr	r3, [r7, #12]
 801c864:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801c868:	f003 0302 	and.w	r3, r3, #2
 801c86c:	2b00      	cmp	r3, #0
 801c86e:	d108      	bne.n	801c882 <ip4_route+0x72>
 801c870:	687b      	ldr	r3, [r7, #4]
 801c872:	681a      	ldr	r2, [r3, #0]
 801c874:	68fb      	ldr	r3, [r7, #12]
 801c876:	330c      	adds	r3, #12
 801c878:	681b      	ldr	r3, [r3, #0]
 801c87a:	429a      	cmp	r2, r3
 801c87c:	d101      	bne.n	801c882 <ip4_route+0x72>
        /* return netif on which to forward IP packet */
        return netif;
 801c87e:	68fb      	ldr	r3, [r7, #12]
 801c880:	e028      	b.n	801c8d4 <ip4_route+0xc4>
  NETIF_FOREACH(netif) {
 801c882:	68fb      	ldr	r3, [r7, #12]
 801c884:	681b      	ldr	r3, [r3, #0]
 801c886:	60fb      	str	r3, [r7, #12]
 801c888:	68fb      	ldr	r3, [r7, #12]
 801c88a:	2b00      	cmp	r3, #0
 801c88c:	d1c8      	bne.n	801c820 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801c88e:	4b15      	ldr	r3, [pc, #84]	; (801c8e4 <ip4_route+0xd4>)
 801c890:	681b      	ldr	r3, [r3, #0]
 801c892:	2b00      	cmp	r3, #0
 801c894:	d01a      	beq.n	801c8cc <ip4_route+0xbc>
 801c896:	4b13      	ldr	r3, [pc, #76]	; (801c8e4 <ip4_route+0xd4>)
 801c898:	681b      	ldr	r3, [r3, #0]
 801c89a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801c89e:	f003 0301 	and.w	r3, r3, #1
 801c8a2:	2b00      	cmp	r3, #0
 801c8a4:	d012      	beq.n	801c8cc <ip4_route+0xbc>
 801c8a6:	4b0f      	ldr	r3, [pc, #60]	; (801c8e4 <ip4_route+0xd4>)
 801c8a8:	681b      	ldr	r3, [r3, #0]
 801c8aa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801c8ae:	f003 0304 	and.w	r3, r3, #4
 801c8b2:	2b00      	cmp	r3, #0
 801c8b4:	d00a      	beq.n	801c8cc <ip4_route+0xbc>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801c8b6:	4b0b      	ldr	r3, [pc, #44]	; (801c8e4 <ip4_route+0xd4>)
 801c8b8:	681b      	ldr	r3, [r3, #0]
 801c8ba:	3304      	adds	r3, #4
 801c8bc:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801c8be:	2b00      	cmp	r3, #0
 801c8c0:	d004      	beq.n	801c8cc <ip4_route+0xbc>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801c8c2:	687b      	ldr	r3, [r7, #4]
 801c8c4:	681b      	ldr	r3, [r3, #0]
 801c8c6:	b2db      	uxtb	r3, r3
 801c8c8:	2b7f      	cmp	r3, #127	; 0x7f
 801c8ca:	d101      	bne.n	801c8d0 <ip4_route+0xc0>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801c8cc:	2300      	movs	r3, #0
 801c8ce:	e001      	b.n	801c8d4 <ip4_route+0xc4>
  }

  return netif_default;
 801c8d0:	4b04      	ldr	r3, [pc, #16]	; (801c8e4 <ip4_route+0xd4>)
 801c8d2:	681b      	ldr	r3, [r3, #0]
}
 801c8d4:	4618      	mov	r0, r3
 801c8d6:	3714      	adds	r7, #20
 801c8d8:	46bd      	mov	sp, r7
 801c8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c8de:	4770      	bx	lr
 801c8e0:	20022aa8 	.word	0x20022aa8
 801c8e4:	20022aac 	.word	0x20022aac

0801c8e8 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801c8e8:	b580      	push	{r7, lr}
 801c8ea:	b082      	sub	sp, #8
 801c8ec:	af00      	add	r7, sp, #0
 801c8ee:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801c8f0:	687b      	ldr	r3, [r7, #4]
 801c8f2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801c8f6:	f003 0301 	and.w	r3, r3, #1
 801c8fa:	2b00      	cmp	r3, #0
 801c8fc:	d016      	beq.n	801c92c <ip4_input_accept+0x44>
 801c8fe:	687b      	ldr	r3, [r7, #4]
 801c900:	3304      	adds	r3, #4
 801c902:	681b      	ldr	r3, [r3, #0]
 801c904:	2b00      	cmp	r3, #0
 801c906:	d011      	beq.n	801c92c <ip4_input_accept+0x44>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801c908:	4b0b      	ldr	r3, [pc, #44]	; (801c938 <ip4_input_accept+0x50>)
 801c90a:	695a      	ldr	r2, [r3, #20]
 801c90c:	687b      	ldr	r3, [r7, #4]
 801c90e:	3304      	adds	r3, #4
 801c910:	681b      	ldr	r3, [r3, #0]
 801c912:	429a      	cmp	r2, r3
 801c914:	d008      	beq.n	801c928 <ip4_input_accept+0x40>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801c916:	4b08      	ldr	r3, [pc, #32]	; (801c938 <ip4_input_accept+0x50>)
 801c918:	695b      	ldr	r3, [r3, #20]
 801c91a:	6879      	ldr	r1, [r7, #4]
 801c91c:	4618      	mov	r0, r3
 801c91e:	f000 fa23 	bl	801cd68 <ip4_addr_isbroadcast_u32>
 801c922:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801c924:	2b00      	cmp	r3, #0
 801c926:	d001      	beq.n	801c92c <ip4_input_accept+0x44>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801c928:	2301      	movs	r3, #1
 801c92a:	e000      	b.n	801c92e <ip4_input_accept+0x46>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801c92c:	2300      	movs	r3, #0
}
 801c92e:	4618      	mov	r0, r3
 801c930:	3708      	adds	r7, #8
 801c932:	46bd      	mov	sp, r7
 801c934:	bd80      	pop	{r7, pc}
 801c936:	bf00      	nop
 801c938:	2001c9fc 	.word	0x2001c9fc

0801c93c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801c93c:	b580      	push	{r7, lr}
 801c93e:	b088      	sub	sp, #32
 801c940:	af00      	add	r7, sp, #0
 801c942:	6078      	str	r0, [r7, #4]
 801c944:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 801c946:	2301      	movs	r3, #1
 801c948:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801c94a:	687b      	ldr	r3, [r7, #4]
 801c94c:	685b      	ldr	r3, [r3, #4]
 801c94e:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 801c950:	69fb      	ldr	r3, [r7, #28]
 801c952:	781b      	ldrb	r3, [r3, #0]
 801c954:	091b      	lsrs	r3, r3, #4
 801c956:	b2db      	uxtb	r3, r3
 801c958:	2b04      	cmp	r3, #4
 801c95a:	d004      	beq.n	801c966 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801c95c:	6878      	ldr	r0, [r7, #4]
 801c95e:	f002 fae3 	bl	801ef28 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801c962:	2300      	movs	r3, #0
 801c964:	e120      	b.n	801cba8 <ip4_input+0x26c>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801c966:	69fb      	ldr	r3, [r7, #28]
 801c968:	781b      	ldrb	r3, [r3, #0]
 801c96a:	f003 030f 	and.w	r3, r3, #15
 801c96e:	b2db      	uxtb	r3, r3
 801c970:	009b      	lsls	r3, r3, #2
 801c972:	b2db      	uxtb	r3, r3
 801c974:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801c976:	69fb      	ldr	r3, [r7, #28]
 801c978:	885b      	ldrh	r3, [r3, #2]
 801c97a:	b29b      	uxth	r3, r3
 801c97c:	4618      	mov	r0, r3
 801c97e:	f7fc fbd3 	bl	8019128 <lwip_htons>
 801c982:	4603      	mov	r3, r0
 801c984:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801c986:	687b      	ldr	r3, [r7, #4]
 801c988:	891b      	ldrh	r3, [r3, #8]
 801c98a:	8a3a      	ldrh	r2, [r7, #16]
 801c98c:	429a      	cmp	r2, r3
 801c98e:	d204      	bcs.n	801c99a <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 801c990:	8a3b      	ldrh	r3, [r7, #16]
 801c992:	4619      	mov	r1, r3
 801c994:	6878      	ldr	r0, [r7, #4]
 801c996:	f002 f93f 	bl	801ec18 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801c99a:	687b      	ldr	r3, [r7, #4]
 801c99c:	895b      	ldrh	r3, [r3, #10]
 801c99e:	8a7a      	ldrh	r2, [r7, #18]
 801c9a0:	429a      	cmp	r2, r3
 801c9a2:	d807      	bhi.n	801c9b4 <ip4_input+0x78>
 801c9a4:	687b      	ldr	r3, [r7, #4]
 801c9a6:	891b      	ldrh	r3, [r3, #8]
 801c9a8:	8a3a      	ldrh	r2, [r7, #16]
 801c9aa:	429a      	cmp	r2, r3
 801c9ac:	d802      	bhi.n	801c9b4 <ip4_input+0x78>
 801c9ae:	8a7b      	ldrh	r3, [r7, #18]
 801c9b0:	2b13      	cmp	r3, #19
 801c9b2:	d804      	bhi.n	801c9be <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801c9b4:	6878      	ldr	r0, [r7, #4]
 801c9b6:	f002 fab7 	bl	801ef28 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801c9ba:	2300      	movs	r3, #0
 801c9bc:	e0f4      	b.n	801cba8 <ip4_input+0x26c>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801c9be:	69fb      	ldr	r3, [r7, #28]
 801c9c0:	691b      	ldr	r3, [r3, #16]
 801c9c2:	4a7b      	ldr	r2, [pc, #492]	; (801cbb0 <ip4_input+0x274>)
 801c9c4:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801c9c6:	69fb      	ldr	r3, [r7, #28]
 801c9c8:	68db      	ldr	r3, [r3, #12]
 801c9ca:	4a79      	ldr	r2, [pc, #484]	; (801cbb0 <ip4_input+0x274>)
 801c9cc:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801c9ce:	4b78      	ldr	r3, [pc, #480]	; (801cbb0 <ip4_input+0x274>)
 801c9d0:	695b      	ldr	r3, [r3, #20]
 801c9d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801c9d6:	2be0      	cmp	r3, #224	; 0xe0
 801c9d8:	d111      	bne.n	801c9fe <ip4_input+0xc2>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801c9da:	683b      	ldr	r3, [r7, #0]
 801c9dc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801c9e0:	f003 0301 	and.w	r3, r3, #1
 801c9e4:	2b00      	cmp	r3, #0
 801c9e6:	d007      	beq.n	801c9f8 <ip4_input+0xbc>
 801c9e8:	683b      	ldr	r3, [r7, #0]
 801c9ea:	3304      	adds	r3, #4
 801c9ec:	681b      	ldr	r3, [r3, #0]
 801c9ee:	2b00      	cmp	r3, #0
 801c9f0:	d002      	beq.n	801c9f8 <ip4_input+0xbc>
      netif = inp;
 801c9f2:	683b      	ldr	r3, [r7, #0]
 801c9f4:	61bb      	str	r3, [r7, #24]
 801c9f6:	e02a      	b.n	801ca4e <ip4_input+0x112>
    } else {
      netif = NULL;
 801c9f8:	2300      	movs	r3, #0
 801c9fa:	61bb      	str	r3, [r7, #24]
 801c9fc:	e027      	b.n	801ca4e <ip4_input+0x112>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801c9fe:	6838      	ldr	r0, [r7, #0]
 801ca00:	f7ff ff72 	bl	801c8e8 <ip4_input_accept>
 801ca04:	4603      	mov	r3, r0
 801ca06:	2b00      	cmp	r3, #0
 801ca08:	d002      	beq.n	801ca10 <ip4_input+0xd4>
      netif = inp;
 801ca0a:	683b      	ldr	r3, [r7, #0]
 801ca0c:	61bb      	str	r3, [r7, #24]
 801ca0e:	e01e      	b.n	801ca4e <ip4_input+0x112>
    } else {
      netif = NULL;
 801ca10:	2300      	movs	r3, #0
 801ca12:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801ca14:	4b66      	ldr	r3, [pc, #408]	; (801cbb0 <ip4_input+0x274>)
 801ca16:	695b      	ldr	r3, [r3, #20]
 801ca18:	b2db      	uxtb	r3, r3
 801ca1a:	2b7f      	cmp	r3, #127	; 0x7f
 801ca1c:	d017      	beq.n	801ca4e <ip4_input+0x112>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801ca1e:	4b65      	ldr	r3, [pc, #404]	; (801cbb4 <ip4_input+0x278>)
 801ca20:	681b      	ldr	r3, [r3, #0]
 801ca22:	61bb      	str	r3, [r7, #24]
 801ca24:	e00e      	b.n	801ca44 <ip4_input+0x108>
          if (netif == inp) {
 801ca26:	69ba      	ldr	r2, [r7, #24]
 801ca28:	683b      	ldr	r3, [r7, #0]
 801ca2a:	429a      	cmp	r2, r3
 801ca2c:	d006      	beq.n	801ca3c <ip4_input+0x100>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801ca2e:	69b8      	ldr	r0, [r7, #24]
 801ca30:	f7ff ff5a 	bl	801c8e8 <ip4_input_accept>
 801ca34:	4603      	mov	r3, r0
 801ca36:	2b00      	cmp	r3, #0
 801ca38:	d108      	bne.n	801ca4c <ip4_input+0x110>
 801ca3a:	e000      	b.n	801ca3e <ip4_input+0x102>
            continue;
 801ca3c:	bf00      	nop
        NETIF_FOREACH(netif) {
 801ca3e:	69bb      	ldr	r3, [r7, #24]
 801ca40:	681b      	ldr	r3, [r3, #0]
 801ca42:	61bb      	str	r3, [r7, #24]
 801ca44:	69bb      	ldr	r3, [r7, #24]
 801ca46:	2b00      	cmp	r3, #0
 801ca48:	d1ed      	bne.n	801ca26 <ip4_input+0xea>
 801ca4a:	e000      	b.n	801ca4e <ip4_input+0x112>
            break;
 801ca4c:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 801ca4e:	69bb      	ldr	r3, [r7, #24]
 801ca50:	2b00      	cmp	r3, #0
 801ca52:	d111      	bne.n	801ca78 <ip4_input+0x13c>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 801ca54:	69fb      	ldr	r3, [r7, #28]
 801ca56:	7a5b      	ldrb	r3, [r3, #9]
 801ca58:	2b11      	cmp	r3, #17
 801ca5a:	d10d      	bne.n	801ca78 <ip4_input+0x13c>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 801ca5c:	8a7b      	ldrh	r3, [r7, #18]
 801ca5e:	69fa      	ldr	r2, [r7, #28]
 801ca60:	4413      	add	r3, r2
 801ca62:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 801ca64:	68fb      	ldr	r3, [r7, #12]
 801ca66:	885b      	ldrh	r3, [r3, #2]
 801ca68:	b29b      	uxth	r3, r3
 801ca6a:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 801ca6e:	d103      	bne.n	801ca78 <ip4_input+0x13c>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 801ca70:	683b      	ldr	r3, [r7, #0]
 801ca72:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 801ca74:	2300      	movs	r3, #0
 801ca76:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 801ca78:	697b      	ldr	r3, [r7, #20]
 801ca7a:	2b00      	cmp	r3, #0
 801ca7c:	d017      	beq.n	801caae <ip4_input+0x172>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 801ca7e:	4b4c      	ldr	r3, [pc, #304]	; (801cbb0 <ip4_input+0x274>)
 801ca80:	691b      	ldr	r3, [r3, #16]
 801ca82:	2b00      	cmp	r3, #0
 801ca84:	d013      	beq.n	801caae <ip4_input+0x172>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801ca86:	4b4a      	ldr	r3, [pc, #296]	; (801cbb0 <ip4_input+0x274>)
 801ca88:	691b      	ldr	r3, [r3, #16]
 801ca8a:	6839      	ldr	r1, [r7, #0]
 801ca8c:	4618      	mov	r0, r3
 801ca8e:	f000 f96b 	bl	801cd68 <ip4_addr_isbroadcast_u32>
 801ca92:	4603      	mov	r3, r0
 801ca94:	2b00      	cmp	r3, #0
 801ca96:	d105      	bne.n	801caa4 <ip4_input+0x168>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801ca98:	4b45      	ldr	r3, [pc, #276]	; (801cbb0 <ip4_input+0x274>)
 801ca9a:	691b      	ldr	r3, [r3, #16]
 801ca9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801caa0:	2be0      	cmp	r3, #224	; 0xe0
 801caa2:	d104      	bne.n	801caae <ip4_input+0x172>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801caa4:	6878      	ldr	r0, [r7, #4]
 801caa6:	f002 fa3f 	bl	801ef28 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801caaa:	2300      	movs	r3, #0
 801caac:	e07c      	b.n	801cba8 <ip4_input+0x26c>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801caae:	69bb      	ldr	r3, [r7, #24]
 801cab0:	2b00      	cmp	r3, #0
 801cab2:	d104      	bne.n	801cabe <ip4_input+0x182>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801cab4:	6878      	ldr	r0, [r7, #4]
 801cab6:	f002 fa37 	bl	801ef28 <pbuf_free>
    return ERR_OK;
 801caba:	2300      	movs	r3, #0
 801cabc:	e074      	b.n	801cba8 <ip4_input+0x26c>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801cabe:	69fb      	ldr	r3, [r7, #28]
 801cac0:	88db      	ldrh	r3, [r3, #6]
 801cac2:	b29b      	uxth	r3, r3
 801cac4:	461a      	mov	r2, r3
 801cac6:	f64f 733f 	movw	r3, #65343	; 0xff3f
 801caca:	4013      	ands	r3, r2
 801cacc:	2b00      	cmp	r3, #0
 801cace:	d00b      	beq.n	801cae8 <ip4_input+0x1ac>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801cad0:	6878      	ldr	r0, [r7, #4]
 801cad2:	f000 fc8f 	bl	801d3f4 <ip4_reass>
 801cad6:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801cad8:	687b      	ldr	r3, [r7, #4]
 801cada:	2b00      	cmp	r3, #0
 801cadc:	d101      	bne.n	801cae2 <ip4_input+0x1a6>
      return ERR_OK;
 801cade:	2300      	movs	r3, #0
 801cae0:	e062      	b.n	801cba8 <ip4_input+0x26c>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801cae2:	687b      	ldr	r3, [r7, #4]
 801cae4:	685b      	ldr	r3, [r3, #4]
 801cae6:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801cae8:	4a31      	ldr	r2, [pc, #196]	; (801cbb0 <ip4_input+0x274>)
 801caea:	69bb      	ldr	r3, [r7, #24]
 801caec:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801caee:	4a30      	ldr	r2, [pc, #192]	; (801cbb0 <ip4_input+0x274>)
 801caf0:	683b      	ldr	r3, [r7, #0]
 801caf2:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801caf4:	4a2e      	ldr	r2, [pc, #184]	; (801cbb0 <ip4_input+0x274>)
 801caf6:	69fb      	ldr	r3, [r7, #28]
 801caf8:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801cafa:	69fb      	ldr	r3, [r7, #28]
 801cafc:	781b      	ldrb	r3, [r3, #0]
 801cafe:	f003 030f 	and.w	r3, r3, #15
 801cb02:	b2db      	uxtb	r3, r3
 801cb04:	009b      	lsls	r3, r3, #2
 801cb06:	b2db      	uxtb	r3, r3
 801cb08:	b29a      	uxth	r2, r3
 801cb0a:	4b29      	ldr	r3, [pc, #164]	; (801cbb0 <ip4_input+0x274>)
 801cb0c:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801cb0e:	8a7b      	ldrh	r3, [r7, #18]
 801cb10:	4619      	mov	r1, r3
 801cb12:	6878      	ldr	r0, [r7, #4]
 801cb14:	f002 f982 	bl	801ee1c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801cb18:	69fb      	ldr	r3, [r7, #28]
 801cb1a:	7a5b      	ldrb	r3, [r3, #9]
 801cb1c:	2b06      	cmp	r3, #6
 801cb1e:	d009      	beq.n	801cb34 <ip4_input+0x1f8>
 801cb20:	2b11      	cmp	r3, #17
 801cb22:	d002      	beq.n	801cb2a <ip4_input+0x1ee>
 801cb24:	2b01      	cmp	r3, #1
 801cb26:	d00a      	beq.n	801cb3e <ip4_input+0x202>
 801cb28:	e00e      	b.n	801cb48 <ip4_input+0x20c>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801cb2a:	6839      	ldr	r1, [r7, #0]
 801cb2c:	6878      	ldr	r0, [r7, #4]
 801cb2e:	f008 fc65 	bl	80253fc <udp_input>
        break;
 801cb32:	e026      	b.n	801cb82 <ip4_input+0x246>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801cb34:	6839      	ldr	r1, [r7, #0]
 801cb36:	6878      	ldr	r0, [r7, #4]
 801cb38:	f004 fbce 	bl	80212d8 <tcp_input>
        break;
 801cb3c:	e021      	b.n	801cb82 <ip4_input+0x246>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801cb3e:	6839      	ldr	r1, [r7, #0]
 801cb40:	6878      	ldr	r0, [r7, #4]
 801cb42:	f7ff fccd 	bl	801c4e0 <icmp_input>
        break;
 801cb46:	e01c      	b.n	801cb82 <ip4_input+0x246>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801cb48:	4b19      	ldr	r3, [pc, #100]	; (801cbb0 <ip4_input+0x274>)
 801cb4a:	695b      	ldr	r3, [r3, #20]
 801cb4c:	69b9      	ldr	r1, [r7, #24]
 801cb4e:	4618      	mov	r0, r3
 801cb50:	f000 f90a 	bl	801cd68 <ip4_addr_isbroadcast_u32>
 801cb54:	4603      	mov	r3, r0
 801cb56:	2b00      	cmp	r3, #0
 801cb58:	d10f      	bne.n	801cb7a <ip4_input+0x23e>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801cb5a:	4b15      	ldr	r3, [pc, #84]	; (801cbb0 <ip4_input+0x274>)
 801cb5c:	695b      	ldr	r3, [r3, #20]
 801cb5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801cb62:	2be0      	cmp	r3, #224	; 0xe0
 801cb64:	d009      	beq.n	801cb7a <ip4_input+0x23e>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801cb66:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801cb6a:	4619      	mov	r1, r3
 801cb6c:	6878      	ldr	r0, [r7, #4]
 801cb6e:	f002 f9c8 	bl	801ef02 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801cb72:	2102      	movs	r1, #2
 801cb74:	6878      	ldr	r0, [r7, #4]
 801cb76:	f7ff fdc1 	bl	801c6fc <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801cb7a:	6878      	ldr	r0, [r7, #4]
 801cb7c:	f002 f9d4 	bl	801ef28 <pbuf_free>
        break;
 801cb80:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801cb82:	4b0b      	ldr	r3, [pc, #44]	; (801cbb0 <ip4_input+0x274>)
 801cb84:	2200      	movs	r2, #0
 801cb86:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801cb88:	4b09      	ldr	r3, [pc, #36]	; (801cbb0 <ip4_input+0x274>)
 801cb8a:	2200      	movs	r2, #0
 801cb8c:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801cb8e:	4b08      	ldr	r3, [pc, #32]	; (801cbb0 <ip4_input+0x274>)
 801cb90:	2200      	movs	r2, #0
 801cb92:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801cb94:	4b06      	ldr	r3, [pc, #24]	; (801cbb0 <ip4_input+0x274>)
 801cb96:	2200      	movs	r2, #0
 801cb98:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801cb9a:	4b05      	ldr	r3, [pc, #20]	; (801cbb0 <ip4_input+0x274>)
 801cb9c:	2200      	movs	r2, #0
 801cb9e:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801cba0:	4b03      	ldr	r3, [pc, #12]	; (801cbb0 <ip4_input+0x274>)
 801cba2:	2200      	movs	r2, #0
 801cba4:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801cba6:	2300      	movs	r3, #0
}
 801cba8:	4618      	mov	r0, r3
 801cbaa:	3720      	adds	r7, #32
 801cbac:	46bd      	mov	sp, r7
 801cbae:	bd80      	pop	{r7, pc}
 801cbb0:	2001c9fc 	.word	0x2001c9fc
 801cbb4:	20022aa8 	.word	0x20022aa8

0801cbb8 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801cbb8:	b580      	push	{r7, lr}
 801cbba:	b08a      	sub	sp, #40	; 0x28
 801cbbc:	af04      	add	r7, sp, #16
 801cbbe:	60f8      	str	r0, [r7, #12]
 801cbc0:	60b9      	str	r1, [r7, #8]
 801cbc2:	607a      	str	r2, [r7, #4]
 801cbc4:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801cbc6:	68bb      	ldr	r3, [r7, #8]
 801cbc8:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801cbca:	687b      	ldr	r3, [r7, #4]
 801cbcc:	2b00      	cmp	r3, #0
 801cbce:	d009      	beq.n	801cbe4 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801cbd0:	68bb      	ldr	r3, [r7, #8]
 801cbd2:	2b00      	cmp	r3, #0
 801cbd4:	d003      	beq.n	801cbde <ip4_output_if+0x26>
 801cbd6:	68bb      	ldr	r3, [r7, #8]
 801cbd8:	681b      	ldr	r3, [r3, #0]
 801cbda:	2b00      	cmp	r3, #0
 801cbdc:	d102      	bne.n	801cbe4 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801cbde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cbe0:	3304      	adds	r3, #4
 801cbe2:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801cbe4:	78fa      	ldrb	r2, [r7, #3]
 801cbe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cbe8:	9302      	str	r3, [sp, #8]
 801cbea:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801cbee:	9301      	str	r3, [sp, #4]
 801cbf0:	f897 3020 	ldrb.w	r3, [r7, #32]
 801cbf4:	9300      	str	r3, [sp, #0]
 801cbf6:	4613      	mov	r3, r2
 801cbf8:	687a      	ldr	r2, [r7, #4]
 801cbfa:	6979      	ldr	r1, [r7, #20]
 801cbfc:	68f8      	ldr	r0, [r7, #12]
 801cbfe:	f000 f805 	bl	801cc0c <ip4_output_if_src>
 801cc02:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801cc04:	4618      	mov	r0, r3
 801cc06:	3718      	adds	r7, #24
 801cc08:	46bd      	mov	sp, r7
 801cc0a:	bd80      	pop	{r7, pc}

0801cc0c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801cc0c:	b580      	push	{r7, lr}
 801cc0e:	b088      	sub	sp, #32
 801cc10:	af00      	add	r7, sp, #0
 801cc12:	60f8      	str	r0, [r7, #12]
 801cc14:	60b9      	str	r1, [r7, #8]
 801cc16:	607a      	str	r2, [r7, #4]
 801cc18:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801cc1a:	68fb      	ldr	r3, [r7, #12]
 801cc1c:	7b9b      	ldrb	r3, [r3, #14]
 801cc1e:	2b01      	cmp	r3, #1
 801cc20:	d006      	beq.n	801cc30 <ip4_output_if_src+0x24>
 801cc22:	4b4b      	ldr	r3, [pc, #300]	; (801cd50 <ip4_output_if_src+0x144>)
 801cc24:	f44f 7255 	mov.w	r2, #852	; 0x354
 801cc28:	494a      	ldr	r1, [pc, #296]	; (801cd54 <ip4_output_if_src+0x148>)
 801cc2a:	484b      	ldr	r0, [pc, #300]	; (801cd58 <ip4_output_if_src+0x14c>)
 801cc2c:	f009 fb80 	bl	8026330 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801cc30:	687b      	ldr	r3, [r7, #4]
 801cc32:	2b00      	cmp	r3, #0
 801cc34:	d060      	beq.n	801ccf8 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801cc36:	2314      	movs	r3, #20
 801cc38:	83fb      	strh	r3, [r7, #30]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801cc3a:	2114      	movs	r1, #20
 801cc3c:	68f8      	ldr	r0, [r7, #12]
 801cc3e:	f002 f8dd 	bl	801edfc <pbuf_add_header>
 801cc42:	4603      	mov	r3, r0
 801cc44:	2b00      	cmp	r3, #0
 801cc46:	d002      	beq.n	801cc4e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801cc48:	f06f 0301 	mvn.w	r3, #1
 801cc4c:	e07c      	b.n	801cd48 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801cc4e:	68fb      	ldr	r3, [r7, #12]
 801cc50:	685b      	ldr	r3, [r3, #4]
 801cc52:	61bb      	str	r3, [r7, #24]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801cc54:	68fb      	ldr	r3, [r7, #12]
 801cc56:	895b      	ldrh	r3, [r3, #10]
 801cc58:	2b13      	cmp	r3, #19
 801cc5a:	d806      	bhi.n	801cc6a <ip4_output_if_src+0x5e>
 801cc5c:	4b3c      	ldr	r3, [pc, #240]	; (801cd50 <ip4_output_if_src+0x144>)
 801cc5e:	f240 3289 	movw	r2, #905	; 0x389
 801cc62:	493e      	ldr	r1, [pc, #248]	; (801cd5c <ip4_output_if_src+0x150>)
 801cc64:	483c      	ldr	r0, [pc, #240]	; (801cd58 <ip4_output_if_src+0x14c>)
 801cc66:	f009 fb63 	bl	8026330 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801cc6a:	69bb      	ldr	r3, [r7, #24]
 801cc6c:	78fa      	ldrb	r2, [r7, #3]
 801cc6e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801cc70:	69bb      	ldr	r3, [r7, #24]
 801cc72:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801cc76:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801cc78:	687b      	ldr	r3, [r7, #4]
 801cc7a:	681a      	ldr	r2, [r3, #0]
 801cc7c:	69bb      	ldr	r3, [r7, #24]
 801cc7e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801cc80:	8bfb      	ldrh	r3, [r7, #30]
 801cc82:	089b      	lsrs	r3, r3, #2
 801cc84:	b29b      	uxth	r3, r3
 801cc86:	b2db      	uxtb	r3, r3
 801cc88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801cc8c:	b2da      	uxtb	r2, r3
 801cc8e:	69bb      	ldr	r3, [r7, #24]
 801cc90:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801cc92:	69bb      	ldr	r3, [r7, #24]
 801cc94:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801cc98:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801cc9a:	68fb      	ldr	r3, [r7, #12]
 801cc9c:	891b      	ldrh	r3, [r3, #8]
 801cc9e:	4618      	mov	r0, r3
 801cca0:	f7fc fa42 	bl	8019128 <lwip_htons>
 801cca4:	4603      	mov	r3, r0
 801cca6:	461a      	mov	r2, r3
 801cca8:	69bb      	ldr	r3, [r7, #24]
 801ccaa:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801ccac:	69bb      	ldr	r3, [r7, #24]
 801ccae:	2200      	movs	r2, #0
 801ccb0:	719a      	strb	r2, [r3, #6]
 801ccb2:	2200      	movs	r2, #0
 801ccb4:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801ccb6:	4b2a      	ldr	r3, [pc, #168]	; (801cd60 <ip4_output_if_src+0x154>)
 801ccb8:	881b      	ldrh	r3, [r3, #0]
 801ccba:	4618      	mov	r0, r3
 801ccbc:	f7fc fa34 	bl	8019128 <lwip_htons>
 801ccc0:	4603      	mov	r3, r0
 801ccc2:	461a      	mov	r2, r3
 801ccc4:	69bb      	ldr	r3, [r7, #24]
 801ccc6:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801ccc8:	4b25      	ldr	r3, [pc, #148]	; (801cd60 <ip4_output_if_src+0x154>)
 801ccca:	881b      	ldrh	r3, [r3, #0]
 801cccc:	3301      	adds	r3, #1
 801ccce:	b29a      	uxth	r2, r3
 801ccd0:	4b23      	ldr	r3, [pc, #140]	; (801cd60 <ip4_output_if_src+0x154>)
 801ccd2:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801ccd4:	68bb      	ldr	r3, [r7, #8]
 801ccd6:	2b00      	cmp	r3, #0
 801ccd8:	d104      	bne.n	801cce4 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801ccda:	4b22      	ldr	r3, [pc, #136]	; (801cd64 <ip4_output_if_src+0x158>)
 801ccdc:	681a      	ldr	r2, [r3, #0]
 801ccde:	69bb      	ldr	r3, [r7, #24]
 801cce0:	60da      	str	r2, [r3, #12]
 801cce2:	e003      	b.n	801ccec <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801cce4:	68bb      	ldr	r3, [r7, #8]
 801cce6:	681a      	ldr	r2, [r3, #0]
 801cce8:	69bb      	ldr	r3, [r7, #24]
 801ccea:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801ccec:	69bb      	ldr	r3, [r7, #24]
 801ccee:	2200      	movs	r2, #0
 801ccf0:	729a      	strb	r2, [r3, #10]
 801ccf2:	2200      	movs	r2, #0
 801ccf4:	72da      	strb	r2, [r3, #11]
 801ccf6:	e00f      	b.n	801cd18 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801ccf8:	68fb      	ldr	r3, [r7, #12]
 801ccfa:	895b      	ldrh	r3, [r3, #10]
 801ccfc:	2b13      	cmp	r3, #19
 801ccfe:	d802      	bhi.n	801cd06 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801cd00:	f06f 0301 	mvn.w	r3, #1
 801cd04:	e020      	b.n	801cd48 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801cd06:	68fb      	ldr	r3, [r7, #12]
 801cd08:	685b      	ldr	r3, [r3, #4]
 801cd0a:	61bb      	str	r3, [r7, #24]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801cd0c:	69bb      	ldr	r3, [r7, #24]
 801cd0e:	691b      	ldr	r3, [r3, #16]
 801cd10:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801cd12:	f107 0314 	add.w	r3, r7, #20
 801cd16:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801cd18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cd1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801cd1c:	2b00      	cmp	r3, #0
 801cd1e:	d00c      	beq.n	801cd3a <ip4_output_if_src+0x12e>
 801cd20:	68fb      	ldr	r3, [r7, #12]
 801cd22:	891a      	ldrh	r2, [r3, #8]
 801cd24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cd26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801cd28:	429a      	cmp	r2, r3
 801cd2a:	d906      	bls.n	801cd3a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801cd2c:	687a      	ldr	r2, [r7, #4]
 801cd2e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801cd30:	68f8      	ldr	r0, [r7, #12]
 801cd32:	f000 fd47 	bl	801d7c4 <ip4_frag>
 801cd36:	4603      	mov	r3, r0
 801cd38:	e006      	b.n	801cd48 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801cd3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cd3c:	695b      	ldr	r3, [r3, #20]
 801cd3e:	687a      	ldr	r2, [r7, #4]
 801cd40:	68f9      	ldr	r1, [r7, #12]
 801cd42:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801cd44:	4798      	blx	r3
 801cd46:	4603      	mov	r3, r0
}
 801cd48:	4618      	mov	r0, r3
 801cd4a:	3720      	adds	r7, #32
 801cd4c:	46bd      	mov	sp, r7
 801cd4e:	bd80      	pop	{r7, pc}
 801cd50:	08028380 	.word	0x08028380
 801cd54:	080283b4 	.word	0x080283b4
 801cd58:	080283c0 	.word	0x080283c0
 801cd5c:	080283e8 	.word	0x080283e8
 801cd60:	2001966a 	.word	0x2001966a
 801cd64:	0802b720 	.word	0x0802b720

0801cd68 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801cd68:	b480      	push	{r7}
 801cd6a:	b085      	sub	sp, #20
 801cd6c:	af00      	add	r7, sp, #0
 801cd6e:	6078      	str	r0, [r7, #4]
 801cd70:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801cd72:	687b      	ldr	r3, [r7, #4]
 801cd74:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801cd76:	687b      	ldr	r3, [r7, #4]
 801cd78:	f1b3 3fff 	cmp.w	r3, #4294967295
 801cd7c:	d002      	beq.n	801cd84 <ip4_addr_isbroadcast_u32+0x1c>
 801cd7e:	687b      	ldr	r3, [r7, #4]
 801cd80:	2b00      	cmp	r3, #0
 801cd82:	d101      	bne.n	801cd88 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801cd84:	2301      	movs	r3, #1
 801cd86:	e02a      	b.n	801cdde <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801cd88:	683b      	ldr	r3, [r7, #0]
 801cd8a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801cd8e:	f003 0302 	and.w	r3, r3, #2
 801cd92:	2b00      	cmp	r3, #0
 801cd94:	d101      	bne.n	801cd9a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801cd96:	2300      	movs	r3, #0
 801cd98:	e021      	b.n	801cdde <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801cd9a:	683b      	ldr	r3, [r7, #0]
 801cd9c:	3304      	adds	r3, #4
 801cd9e:	681a      	ldr	r2, [r3, #0]
 801cda0:	687b      	ldr	r3, [r7, #4]
 801cda2:	429a      	cmp	r2, r3
 801cda4:	d101      	bne.n	801cdaa <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801cda6:	2300      	movs	r3, #0
 801cda8:	e019      	b.n	801cdde <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801cdaa:	68fa      	ldr	r2, [r7, #12]
 801cdac:	683b      	ldr	r3, [r7, #0]
 801cdae:	3304      	adds	r3, #4
 801cdb0:	681b      	ldr	r3, [r3, #0]
 801cdb2:	405a      	eors	r2, r3
 801cdb4:	683b      	ldr	r3, [r7, #0]
 801cdb6:	3308      	adds	r3, #8
 801cdb8:	681b      	ldr	r3, [r3, #0]
 801cdba:	4013      	ands	r3, r2
 801cdbc:	2b00      	cmp	r3, #0
 801cdbe:	d10d      	bne.n	801cddc <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801cdc0:	683b      	ldr	r3, [r7, #0]
 801cdc2:	3308      	adds	r3, #8
 801cdc4:	681b      	ldr	r3, [r3, #0]
 801cdc6:	43da      	mvns	r2, r3
 801cdc8:	687b      	ldr	r3, [r7, #4]
 801cdca:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801cdcc:	683b      	ldr	r3, [r7, #0]
 801cdce:	3308      	adds	r3, #8
 801cdd0:	681b      	ldr	r3, [r3, #0]
 801cdd2:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801cdd4:	429a      	cmp	r2, r3
 801cdd6:	d101      	bne.n	801cddc <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801cdd8:	2301      	movs	r3, #1
 801cdda:	e000      	b.n	801cdde <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801cddc:	2300      	movs	r3, #0
  }
}
 801cdde:	4618      	mov	r0, r3
 801cde0:	3714      	adds	r7, #20
 801cde2:	46bd      	mov	sp, r7
 801cde4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cde8:	4770      	bx	lr
	...

0801cdec <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801cdec:	b580      	push	{r7, lr}
 801cdee:	b084      	sub	sp, #16
 801cdf0:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801cdf2:	2300      	movs	r3, #0
 801cdf4:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801cdf6:	4b12      	ldr	r3, [pc, #72]	; (801ce40 <ip_reass_tmr+0x54>)
 801cdf8:	681b      	ldr	r3, [r3, #0]
 801cdfa:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801cdfc:	e018      	b.n	801ce30 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801cdfe:	68fb      	ldr	r3, [r7, #12]
 801ce00:	7fdb      	ldrb	r3, [r3, #31]
 801ce02:	2b00      	cmp	r3, #0
 801ce04:	d00b      	beq.n	801ce1e <ip_reass_tmr+0x32>
      r->timer--;
 801ce06:	68fb      	ldr	r3, [r7, #12]
 801ce08:	7fdb      	ldrb	r3, [r3, #31]
 801ce0a:	3b01      	subs	r3, #1
 801ce0c:	b2da      	uxtb	r2, r3
 801ce0e:	68fb      	ldr	r3, [r7, #12]
 801ce10:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801ce12:	68fb      	ldr	r3, [r7, #12]
 801ce14:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801ce16:	68fb      	ldr	r3, [r7, #12]
 801ce18:	681b      	ldr	r3, [r3, #0]
 801ce1a:	60fb      	str	r3, [r7, #12]
 801ce1c:	e008      	b.n	801ce30 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801ce1e:	68fb      	ldr	r3, [r7, #12]
 801ce20:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801ce22:	68fb      	ldr	r3, [r7, #12]
 801ce24:	681b      	ldr	r3, [r3, #0]
 801ce26:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801ce28:	68b9      	ldr	r1, [r7, #8]
 801ce2a:	6878      	ldr	r0, [r7, #4]
 801ce2c:	f000 f80a 	bl	801ce44 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801ce30:	68fb      	ldr	r3, [r7, #12]
 801ce32:	2b00      	cmp	r3, #0
 801ce34:	d1e3      	bne.n	801cdfe <ip_reass_tmr+0x12>
    }
  }
}
 801ce36:	bf00      	nop
 801ce38:	3710      	adds	r7, #16
 801ce3a:	46bd      	mov	sp, r7
 801ce3c:	bd80      	pop	{r7, pc}
 801ce3e:	bf00      	nop
 801ce40:	2001966c 	.word	0x2001966c

0801ce44 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801ce44:	b580      	push	{r7, lr}
 801ce46:	b088      	sub	sp, #32
 801ce48:	af00      	add	r7, sp, #0
 801ce4a:	6078      	str	r0, [r7, #4]
 801ce4c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801ce4e:	2300      	movs	r3, #0
 801ce50:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801ce52:	683a      	ldr	r2, [r7, #0]
 801ce54:	687b      	ldr	r3, [r7, #4]
 801ce56:	429a      	cmp	r2, r3
 801ce58:	d105      	bne.n	801ce66 <ip_reass_free_complete_datagram+0x22>
 801ce5a:	4b45      	ldr	r3, [pc, #276]	; (801cf70 <ip_reass_free_complete_datagram+0x12c>)
 801ce5c:	22ab      	movs	r2, #171	; 0xab
 801ce5e:	4945      	ldr	r1, [pc, #276]	; (801cf74 <ip_reass_free_complete_datagram+0x130>)
 801ce60:	4845      	ldr	r0, [pc, #276]	; (801cf78 <ip_reass_free_complete_datagram+0x134>)
 801ce62:	f009 fa65 	bl	8026330 <iprintf>
  if (prev != NULL) {
 801ce66:	683b      	ldr	r3, [r7, #0]
 801ce68:	2b00      	cmp	r3, #0
 801ce6a:	d00a      	beq.n	801ce82 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801ce6c:	683b      	ldr	r3, [r7, #0]
 801ce6e:	681a      	ldr	r2, [r3, #0]
 801ce70:	687b      	ldr	r3, [r7, #4]
 801ce72:	429a      	cmp	r2, r3
 801ce74:	d005      	beq.n	801ce82 <ip_reass_free_complete_datagram+0x3e>
 801ce76:	4b3e      	ldr	r3, [pc, #248]	; (801cf70 <ip_reass_free_complete_datagram+0x12c>)
 801ce78:	22ad      	movs	r2, #173	; 0xad
 801ce7a:	4940      	ldr	r1, [pc, #256]	; (801cf7c <ip_reass_free_complete_datagram+0x138>)
 801ce7c:	483e      	ldr	r0, [pc, #248]	; (801cf78 <ip_reass_free_complete_datagram+0x134>)
 801ce7e:	f009 fa57 	bl	8026330 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801ce82:	687b      	ldr	r3, [r7, #4]
 801ce84:	685b      	ldr	r3, [r3, #4]
 801ce86:	685b      	ldr	r3, [r3, #4]
 801ce88:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801ce8a:	697b      	ldr	r3, [r7, #20]
 801ce8c:	889b      	ldrh	r3, [r3, #4]
 801ce8e:	b29b      	uxth	r3, r3
 801ce90:	2b00      	cmp	r3, #0
 801ce92:	d12a      	bne.n	801ceea <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801ce94:	687b      	ldr	r3, [r7, #4]
 801ce96:	685b      	ldr	r3, [r3, #4]
 801ce98:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801ce9a:	697b      	ldr	r3, [r7, #20]
 801ce9c:	681a      	ldr	r2, [r3, #0]
 801ce9e:	687b      	ldr	r3, [r7, #4]
 801cea0:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801cea2:	69bb      	ldr	r3, [r7, #24]
 801cea4:	6858      	ldr	r0, [r3, #4]
 801cea6:	687b      	ldr	r3, [r7, #4]
 801cea8:	3308      	adds	r3, #8
 801ceaa:	2214      	movs	r2, #20
 801ceac:	4619      	mov	r1, r3
 801ceae:	f009 f966 	bl	802617e <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801ceb2:	2101      	movs	r1, #1
 801ceb4:	69b8      	ldr	r0, [r7, #24]
 801ceb6:	f7ff fc31 	bl	801c71c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801ceba:	69b8      	ldr	r0, [r7, #24]
 801cebc:	f002 f8c2 	bl	801f044 <pbuf_clen>
 801cec0:	4603      	mov	r3, r0
 801cec2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801cec4:	8bfa      	ldrh	r2, [r7, #30]
 801cec6:	8a7b      	ldrh	r3, [r7, #18]
 801cec8:	4413      	add	r3, r2
 801ceca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801cece:	db05      	blt.n	801cedc <ip_reass_free_complete_datagram+0x98>
 801ced0:	4b27      	ldr	r3, [pc, #156]	; (801cf70 <ip_reass_free_complete_datagram+0x12c>)
 801ced2:	22bc      	movs	r2, #188	; 0xbc
 801ced4:	492a      	ldr	r1, [pc, #168]	; (801cf80 <ip_reass_free_complete_datagram+0x13c>)
 801ced6:	4828      	ldr	r0, [pc, #160]	; (801cf78 <ip_reass_free_complete_datagram+0x134>)
 801ced8:	f009 fa2a 	bl	8026330 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801cedc:	8bfa      	ldrh	r2, [r7, #30]
 801cede:	8a7b      	ldrh	r3, [r7, #18]
 801cee0:	4413      	add	r3, r2
 801cee2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801cee4:	69b8      	ldr	r0, [r7, #24]
 801cee6:	f002 f81f 	bl	801ef28 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801ceea:	687b      	ldr	r3, [r7, #4]
 801ceec:	685b      	ldr	r3, [r3, #4]
 801ceee:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801cef0:	e01f      	b.n	801cf32 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801cef2:	69bb      	ldr	r3, [r7, #24]
 801cef4:	685b      	ldr	r3, [r3, #4]
 801cef6:	617b      	str	r3, [r7, #20]
    pcur = p;
 801cef8:	69bb      	ldr	r3, [r7, #24]
 801cefa:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801cefc:	697b      	ldr	r3, [r7, #20]
 801cefe:	681b      	ldr	r3, [r3, #0]
 801cf00:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801cf02:	68f8      	ldr	r0, [r7, #12]
 801cf04:	f002 f89e 	bl	801f044 <pbuf_clen>
 801cf08:	4603      	mov	r3, r0
 801cf0a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801cf0c:	8bfa      	ldrh	r2, [r7, #30]
 801cf0e:	8a7b      	ldrh	r3, [r7, #18]
 801cf10:	4413      	add	r3, r2
 801cf12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801cf16:	db05      	blt.n	801cf24 <ip_reass_free_complete_datagram+0xe0>
 801cf18:	4b15      	ldr	r3, [pc, #84]	; (801cf70 <ip_reass_free_complete_datagram+0x12c>)
 801cf1a:	22cc      	movs	r2, #204	; 0xcc
 801cf1c:	4918      	ldr	r1, [pc, #96]	; (801cf80 <ip_reass_free_complete_datagram+0x13c>)
 801cf1e:	4816      	ldr	r0, [pc, #88]	; (801cf78 <ip_reass_free_complete_datagram+0x134>)
 801cf20:	f009 fa06 	bl	8026330 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801cf24:	8bfa      	ldrh	r2, [r7, #30]
 801cf26:	8a7b      	ldrh	r3, [r7, #18]
 801cf28:	4413      	add	r3, r2
 801cf2a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801cf2c:	68f8      	ldr	r0, [r7, #12]
 801cf2e:	f001 fffb 	bl	801ef28 <pbuf_free>
  while (p != NULL) {
 801cf32:	69bb      	ldr	r3, [r7, #24]
 801cf34:	2b00      	cmp	r3, #0
 801cf36:	d1dc      	bne.n	801cef2 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801cf38:	6839      	ldr	r1, [r7, #0]
 801cf3a:	6878      	ldr	r0, [r7, #4]
 801cf3c:	f000 f8c2 	bl	801d0c4 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801cf40:	4b10      	ldr	r3, [pc, #64]	; (801cf84 <ip_reass_free_complete_datagram+0x140>)
 801cf42:	881b      	ldrh	r3, [r3, #0]
 801cf44:	8bfa      	ldrh	r2, [r7, #30]
 801cf46:	429a      	cmp	r2, r3
 801cf48:	d905      	bls.n	801cf56 <ip_reass_free_complete_datagram+0x112>
 801cf4a:	4b09      	ldr	r3, [pc, #36]	; (801cf70 <ip_reass_free_complete_datagram+0x12c>)
 801cf4c:	22d2      	movs	r2, #210	; 0xd2
 801cf4e:	490e      	ldr	r1, [pc, #56]	; (801cf88 <ip_reass_free_complete_datagram+0x144>)
 801cf50:	4809      	ldr	r0, [pc, #36]	; (801cf78 <ip_reass_free_complete_datagram+0x134>)
 801cf52:	f009 f9ed 	bl	8026330 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801cf56:	4b0b      	ldr	r3, [pc, #44]	; (801cf84 <ip_reass_free_complete_datagram+0x140>)
 801cf58:	881a      	ldrh	r2, [r3, #0]
 801cf5a:	8bfb      	ldrh	r3, [r7, #30]
 801cf5c:	1ad3      	subs	r3, r2, r3
 801cf5e:	b29a      	uxth	r2, r3
 801cf60:	4b08      	ldr	r3, [pc, #32]	; (801cf84 <ip_reass_free_complete_datagram+0x140>)
 801cf62:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801cf64:	8bfb      	ldrh	r3, [r7, #30]
}
 801cf66:	4618      	mov	r0, r3
 801cf68:	3720      	adds	r7, #32
 801cf6a:	46bd      	mov	sp, r7
 801cf6c:	bd80      	pop	{r7, pc}
 801cf6e:	bf00      	nop
 801cf70:	08028418 	.word	0x08028418
 801cf74:	08028454 	.word	0x08028454
 801cf78:	08028460 	.word	0x08028460
 801cf7c:	08028488 	.word	0x08028488
 801cf80:	0802849c 	.word	0x0802849c
 801cf84:	20019670 	.word	0x20019670
 801cf88:	080284bc 	.word	0x080284bc

0801cf8c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801cf8c:	b580      	push	{r7, lr}
 801cf8e:	b08a      	sub	sp, #40	; 0x28
 801cf90:	af00      	add	r7, sp, #0
 801cf92:	6078      	str	r0, [r7, #4]
 801cf94:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801cf96:	2300      	movs	r3, #0
 801cf98:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801cf9a:	2300      	movs	r3, #0
 801cf9c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801cf9e:	2300      	movs	r3, #0
 801cfa0:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801cfa2:	2300      	movs	r3, #0
 801cfa4:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801cfa6:	2300      	movs	r3, #0
 801cfa8:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801cfaa:	4b28      	ldr	r3, [pc, #160]	; (801d04c <ip_reass_remove_oldest_datagram+0xc0>)
 801cfac:	681b      	ldr	r3, [r3, #0]
 801cfae:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801cfb0:	e030      	b.n	801d014 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801cfb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cfb4:	695a      	ldr	r2, [r3, #20]
 801cfb6:	687b      	ldr	r3, [r7, #4]
 801cfb8:	68db      	ldr	r3, [r3, #12]
 801cfba:	429a      	cmp	r2, r3
 801cfbc:	d10c      	bne.n	801cfd8 <ip_reass_remove_oldest_datagram+0x4c>
 801cfbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cfc0:	699a      	ldr	r2, [r3, #24]
 801cfc2:	687b      	ldr	r3, [r7, #4]
 801cfc4:	691b      	ldr	r3, [r3, #16]
 801cfc6:	429a      	cmp	r2, r3
 801cfc8:	d106      	bne.n	801cfd8 <ip_reass_remove_oldest_datagram+0x4c>
 801cfca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cfcc:	899a      	ldrh	r2, [r3, #12]
 801cfce:	687b      	ldr	r3, [r7, #4]
 801cfd0:	889b      	ldrh	r3, [r3, #4]
 801cfd2:	b29b      	uxth	r3, r3
 801cfd4:	429a      	cmp	r2, r3
 801cfd6:	d014      	beq.n	801d002 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801cfd8:	693b      	ldr	r3, [r7, #16]
 801cfda:	3301      	adds	r3, #1
 801cfdc:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801cfde:	6a3b      	ldr	r3, [r7, #32]
 801cfe0:	2b00      	cmp	r3, #0
 801cfe2:	d104      	bne.n	801cfee <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801cfe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cfe6:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801cfe8:	69fb      	ldr	r3, [r7, #28]
 801cfea:	61bb      	str	r3, [r7, #24]
 801cfec:	e009      	b.n	801d002 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801cfee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cff0:	7fda      	ldrb	r2, [r3, #31]
 801cff2:	6a3b      	ldr	r3, [r7, #32]
 801cff4:	7fdb      	ldrb	r3, [r3, #31]
 801cff6:	429a      	cmp	r2, r3
 801cff8:	d803      	bhi.n	801d002 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801cffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cffc:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801cffe:	69fb      	ldr	r3, [r7, #28]
 801d000:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801d002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d004:	681b      	ldr	r3, [r3, #0]
 801d006:	2b00      	cmp	r3, #0
 801d008:	d001      	beq.n	801d00e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801d00a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d00c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801d00e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d010:	681b      	ldr	r3, [r3, #0]
 801d012:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801d014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d016:	2b00      	cmp	r3, #0
 801d018:	d1cb      	bne.n	801cfb2 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801d01a:	6a3b      	ldr	r3, [r7, #32]
 801d01c:	2b00      	cmp	r3, #0
 801d01e:	d008      	beq.n	801d032 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801d020:	69b9      	ldr	r1, [r7, #24]
 801d022:	6a38      	ldr	r0, [r7, #32]
 801d024:	f7ff ff0e 	bl	801ce44 <ip_reass_free_complete_datagram>
 801d028:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801d02a:	697a      	ldr	r2, [r7, #20]
 801d02c:	68fb      	ldr	r3, [r7, #12]
 801d02e:	4413      	add	r3, r2
 801d030:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801d032:	697a      	ldr	r2, [r7, #20]
 801d034:	683b      	ldr	r3, [r7, #0]
 801d036:	429a      	cmp	r2, r3
 801d038:	da02      	bge.n	801d040 <ip_reass_remove_oldest_datagram+0xb4>
 801d03a:	693b      	ldr	r3, [r7, #16]
 801d03c:	2b01      	cmp	r3, #1
 801d03e:	dcac      	bgt.n	801cf9a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801d040:	697b      	ldr	r3, [r7, #20]
}
 801d042:	4618      	mov	r0, r3
 801d044:	3728      	adds	r7, #40	; 0x28
 801d046:	46bd      	mov	sp, r7
 801d048:	bd80      	pop	{r7, pc}
 801d04a:	bf00      	nop
 801d04c:	2001966c 	.word	0x2001966c

0801d050 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801d050:	b580      	push	{r7, lr}
 801d052:	b084      	sub	sp, #16
 801d054:	af00      	add	r7, sp, #0
 801d056:	6078      	str	r0, [r7, #4]
 801d058:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801d05a:	2004      	movs	r0, #4
 801d05c:	f001 f96a 	bl	801e334 <memp_malloc>
 801d060:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801d062:	68fb      	ldr	r3, [r7, #12]
 801d064:	2b00      	cmp	r3, #0
 801d066:	d110      	bne.n	801d08a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801d068:	6839      	ldr	r1, [r7, #0]
 801d06a:	6878      	ldr	r0, [r7, #4]
 801d06c:	f7ff ff8e 	bl	801cf8c <ip_reass_remove_oldest_datagram>
 801d070:	4602      	mov	r2, r0
 801d072:	683b      	ldr	r3, [r7, #0]
 801d074:	429a      	cmp	r2, r3
 801d076:	db03      	blt.n	801d080 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801d078:	2004      	movs	r0, #4
 801d07a:	f001 f95b 	bl	801e334 <memp_malloc>
 801d07e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801d080:	68fb      	ldr	r3, [r7, #12]
 801d082:	2b00      	cmp	r3, #0
 801d084:	d101      	bne.n	801d08a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801d086:	2300      	movs	r3, #0
 801d088:	e016      	b.n	801d0b8 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801d08a:	2220      	movs	r2, #32
 801d08c:	2100      	movs	r1, #0
 801d08e:	68f8      	ldr	r0, [r7, #12]
 801d090:	f009 f89a 	bl	80261c8 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801d094:	68fb      	ldr	r3, [r7, #12]
 801d096:	220f      	movs	r2, #15
 801d098:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801d09a:	4b09      	ldr	r3, [pc, #36]	; (801d0c0 <ip_reass_enqueue_new_datagram+0x70>)
 801d09c:	681a      	ldr	r2, [r3, #0]
 801d09e:	68fb      	ldr	r3, [r7, #12]
 801d0a0:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801d0a2:	4a07      	ldr	r2, [pc, #28]	; (801d0c0 <ip_reass_enqueue_new_datagram+0x70>)
 801d0a4:	68fb      	ldr	r3, [r7, #12]
 801d0a6:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801d0a8:	68fb      	ldr	r3, [r7, #12]
 801d0aa:	3308      	adds	r3, #8
 801d0ac:	2214      	movs	r2, #20
 801d0ae:	6879      	ldr	r1, [r7, #4]
 801d0b0:	4618      	mov	r0, r3
 801d0b2:	f009 f864 	bl	802617e <memcpy>
  return ipr;
 801d0b6:	68fb      	ldr	r3, [r7, #12]
}
 801d0b8:	4618      	mov	r0, r3
 801d0ba:	3710      	adds	r7, #16
 801d0bc:	46bd      	mov	sp, r7
 801d0be:	bd80      	pop	{r7, pc}
 801d0c0:	2001966c 	.word	0x2001966c

0801d0c4 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801d0c4:	b580      	push	{r7, lr}
 801d0c6:	b082      	sub	sp, #8
 801d0c8:	af00      	add	r7, sp, #0
 801d0ca:	6078      	str	r0, [r7, #4]
 801d0cc:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801d0ce:	4b10      	ldr	r3, [pc, #64]	; (801d110 <ip_reass_dequeue_datagram+0x4c>)
 801d0d0:	681a      	ldr	r2, [r3, #0]
 801d0d2:	687b      	ldr	r3, [r7, #4]
 801d0d4:	429a      	cmp	r2, r3
 801d0d6:	d104      	bne.n	801d0e2 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801d0d8:	687b      	ldr	r3, [r7, #4]
 801d0da:	681b      	ldr	r3, [r3, #0]
 801d0dc:	4a0c      	ldr	r2, [pc, #48]	; (801d110 <ip_reass_dequeue_datagram+0x4c>)
 801d0de:	6013      	str	r3, [r2, #0]
 801d0e0:	e00d      	b.n	801d0fe <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801d0e2:	683b      	ldr	r3, [r7, #0]
 801d0e4:	2b00      	cmp	r3, #0
 801d0e6:	d106      	bne.n	801d0f6 <ip_reass_dequeue_datagram+0x32>
 801d0e8:	4b0a      	ldr	r3, [pc, #40]	; (801d114 <ip_reass_dequeue_datagram+0x50>)
 801d0ea:	f240 1245 	movw	r2, #325	; 0x145
 801d0ee:	490a      	ldr	r1, [pc, #40]	; (801d118 <ip_reass_dequeue_datagram+0x54>)
 801d0f0:	480a      	ldr	r0, [pc, #40]	; (801d11c <ip_reass_dequeue_datagram+0x58>)
 801d0f2:	f009 f91d 	bl	8026330 <iprintf>
    prev->next = ipr->next;
 801d0f6:	687b      	ldr	r3, [r7, #4]
 801d0f8:	681a      	ldr	r2, [r3, #0]
 801d0fa:	683b      	ldr	r3, [r7, #0]
 801d0fc:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801d0fe:	6879      	ldr	r1, [r7, #4]
 801d100:	2004      	movs	r0, #4
 801d102:	f001 f969 	bl	801e3d8 <memp_free>
}
 801d106:	bf00      	nop
 801d108:	3708      	adds	r7, #8
 801d10a:	46bd      	mov	sp, r7
 801d10c:	bd80      	pop	{r7, pc}
 801d10e:	bf00      	nop
 801d110:	2001966c 	.word	0x2001966c
 801d114:	08028418 	.word	0x08028418
 801d118:	080284e0 	.word	0x080284e0
 801d11c:	08028460 	.word	0x08028460

0801d120 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801d120:	b580      	push	{r7, lr}
 801d122:	b08c      	sub	sp, #48	; 0x30
 801d124:	af00      	add	r7, sp, #0
 801d126:	60f8      	str	r0, [r7, #12]
 801d128:	60b9      	str	r1, [r7, #8]
 801d12a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801d12c:	2300      	movs	r3, #0
 801d12e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801d130:	2301      	movs	r3, #1
 801d132:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801d134:	68bb      	ldr	r3, [r7, #8]
 801d136:	685b      	ldr	r3, [r3, #4]
 801d138:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801d13a:	69fb      	ldr	r3, [r7, #28]
 801d13c:	885b      	ldrh	r3, [r3, #2]
 801d13e:	b29b      	uxth	r3, r3
 801d140:	4618      	mov	r0, r3
 801d142:	f7fb fff1 	bl	8019128 <lwip_htons>
 801d146:	4603      	mov	r3, r0
 801d148:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801d14a:	69fb      	ldr	r3, [r7, #28]
 801d14c:	781b      	ldrb	r3, [r3, #0]
 801d14e:	f003 030f 	and.w	r3, r3, #15
 801d152:	b2db      	uxtb	r3, r3
 801d154:	009b      	lsls	r3, r3, #2
 801d156:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801d158:	7e7b      	ldrb	r3, [r7, #25]
 801d15a:	b29b      	uxth	r3, r3
 801d15c:	8b7a      	ldrh	r2, [r7, #26]
 801d15e:	429a      	cmp	r2, r3
 801d160:	d202      	bcs.n	801d168 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801d162:	f04f 33ff 	mov.w	r3, #4294967295
 801d166:	e135      	b.n	801d3d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801d168:	7e7b      	ldrb	r3, [r7, #25]
 801d16a:	b29b      	uxth	r3, r3
 801d16c:	8b7a      	ldrh	r2, [r7, #26]
 801d16e:	1ad3      	subs	r3, r2, r3
 801d170:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801d172:	69fb      	ldr	r3, [r7, #28]
 801d174:	88db      	ldrh	r3, [r3, #6]
 801d176:	b29b      	uxth	r3, r3
 801d178:	4618      	mov	r0, r3
 801d17a:	f7fb ffd5 	bl	8019128 <lwip_htons>
 801d17e:	4603      	mov	r3, r0
 801d180:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801d184:	b29b      	uxth	r3, r3
 801d186:	00db      	lsls	r3, r3, #3
 801d188:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801d18a:	68bb      	ldr	r3, [r7, #8]
 801d18c:	685b      	ldr	r3, [r3, #4]
 801d18e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801d190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d192:	2200      	movs	r2, #0
 801d194:	701a      	strb	r2, [r3, #0]
 801d196:	2200      	movs	r2, #0
 801d198:	705a      	strb	r2, [r3, #1]
 801d19a:	2200      	movs	r2, #0
 801d19c:	709a      	strb	r2, [r3, #2]
 801d19e:	2200      	movs	r2, #0
 801d1a0:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801d1a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d1a4:	8afa      	ldrh	r2, [r7, #22]
 801d1a6:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801d1a8:	8afa      	ldrh	r2, [r7, #22]
 801d1aa:	8b7b      	ldrh	r3, [r7, #26]
 801d1ac:	4413      	add	r3, r2
 801d1ae:	b29a      	uxth	r2, r3
 801d1b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d1b2:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801d1b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d1b6:	88db      	ldrh	r3, [r3, #6]
 801d1b8:	b29b      	uxth	r3, r3
 801d1ba:	8afa      	ldrh	r2, [r7, #22]
 801d1bc:	429a      	cmp	r2, r3
 801d1be:	d902      	bls.n	801d1c6 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801d1c0:	f04f 33ff 	mov.w	r3, #4294967295
 801d1c4:	e106      	b.n	801d3d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801d1c6:	68fb      	ldr	r3, [r7, #12]
 801d1c8:	685b      	ldr	r3, [r3, #4]
 801d1ca:	627b      	str	r3, [r7, #36]	; 0x24
 801d1cc:	e068      	b.n	801d2a0 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801d1ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d1d0:	685b      	ldr	r3, [r3, #4]
 801d1d2:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801d1d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d1d6:	889b      	ldrh	r3, [r3, #4]
 801d1d8:	b29a      	uxth	r2, r3
 801d1da:	693b      	ldr	r3, [r7, #16]
 801d1dc:	889b      	ldrh	r3, [r3, #4]
 801d1de:	b29b      	uxth	r3, r3
 801d1e0:	429a      	cmp	r2, r3
 801d1e2:	d235      	bcs.n	801d250 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801d1e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d1e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d1e8:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801d1ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d1ec:	2b00      	cmp	r3, #0
 801d1ee:	d020      	beq.n	801d232 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801d1f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d1f2:	889b      	ldrh	r3, [r3, #4]
 801d1f4:	b29a      	uxth	r2, r3
 801d1f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d1f8:	88db      	ldrh	r3, [r3, #6]
 801d1fa:	b29b      	uxth	r3, r3
 801d1fc:	429a      	cmp	r2, r3
 801d1fe:	d307      	bcc.n	801d210 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801d200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d202:	88db      	ldrh	r3, [r3, #6]
 801d204:	b29a      	uxth	r2, r3
 801d206:	693b      	ldr	r3, [r7, #16]
 801d208:	889b      	ldrh	r3, [r3, #4]
 801d20a:	b29b      	uxth	r3, r3
 801d20c:	429a      	cmp	r2, r3
 801d20e:	d902      	bls.n	801d216 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801d210:	f04f 33ff 	mov.w	r3, #4294967295
 801d214:	e0de      	b.n	801d3d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801d216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d218:	68ba      	ldr	r2, [r7, #8]
 801d21a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801d21c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d21e:	88db      	ldrh	r3, [r3, #6]
 801d220:	b29a      	uxth	r2, r3
 801d222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d224:	889b      	ldrh	r3, [r3, #4]
 801d226:	b29b      	uxth	r3, r3
 801d228:	429a      	cmp	r2, r3
 801d22a:	d03d      	beq.n	801d2a8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801d22c:	2300      	movs	r3, #0
 801d22e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801d230:	e03a      	b.n	801d2a8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801d232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d234:	88db      	ldrh	r3, [r3, #6]
 801d236:	b29a      	uxth	r2, r3
 801d238:	693b      	ldr	r3, [r7, #16]
 801d23a:	889b      	ldrh	r3, [r3, #4]
 801d23c:	b29b      	uxth	r3, r3
 801d23e:	429a      	cmp	r2, r3
 801d240:	d902      	bls.n	801d248 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801d242:	f04f 33ff 	mov.w	r3, #4294967295
 801d246:	e0c5      	b.n	801d3d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801d248:	68fb      	ldr	r3, [r7, #12]
 801d24a:	68ba      	ldr	r2, [r7, #8]
 801d24c:	605a      	str	r2, [r3, #4]
      break;
 801d24e:	e02b      	b.n	801d2a8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801d250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d252:	889b      	ldrh	r3, [r3, #4]
 801d254:	b29a      	uxth	r2, r3
 801d256:	693b      	ldr	r3, [r7, #16]
 801d258:	889b      	ldrh	r3, [r3, #4]
 801d25a:	b29b      	uxth	r3, r3
 801d25c:	429a      	cmp	r2, r3
 801d25e:	d102      	bne.n	801d266 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801d260:	f04f 33ff 	mov.w	r3, #4294967295
 801d264:	e0b6      	b.n	801d3d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801d266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d268:	889b      	ldrh	r3, [r3, #4]
 801d26a:	b29a      	uxth	r2, r3
 801d26c:	693b      	ldr	r3, [r7, #16]
 801d26e:	88db      	ldrh	r3, [r3, #6]
 801d270:	b29b      	uxth	r3, r3
 801d272:	429a      	cmp	r2, r3
 801d274:	d202      	bcs.n	801d27c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801d276:	f04f 33ff 	mov.w	r3, #4294967295
 801d27a:	e0ab      	b.n	801d3d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801d27c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d27e:	2b00      	cmp	r3, #0
 801d280:	d009      	beq.n	801d296 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801d282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d284:	88db      	ldrh	r3, [r3, #6]
 801d286:	b29a      	uxth	r2, r3
 801d288:	693b      	ldr	r3, [r7, #16]
 801d28a:	889b      	ldrh	r3, [r3, #4]
 801d28c:	b29b      	uxth	r3, r3
 801d28e:	429a      	cmp	r2, r3
 801d290:	d001      	beq.n	801d296 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801d292:	2300      	movs	r3, #0
 801d294:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801d296:	693b      	ldr	r3, [r7, #16]
 801d298:	681b      	ldr	r3, [r3, #0]
 801d29a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801d29c:	693b      	ldr	r3, [r7, #16]
 801d29e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801d2a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d2a2:	2b00      	cmp	r3, #0
 801d2a4:	d193      	bne.n	801d1ce <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801d2a6:	e000      	b.n	801d2aa <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801d2a8:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801d2aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d2ac:	2b00      	cmp	r3, #0
 801d2ae:	d12d      	bne.n	801d30c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801d2b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d2b2:	2b00      	cmp	r3, #0
 801d2b4:	d01c      	beq.n	801d2f0 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801d2b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d2b8:	88db      	ldrh	r3, [r3, #6]
 801d2ba:	b29a      	uxth	r2, r3
 801d2bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d2be:	889b      	ldrh	r3, [r3, #4]
 801d2c0:	b29b      	uxth	r3, r3
 801d2c2:	429a      	cmp	r2, r3
 801d2c4:	d906      	bls.n	801d2d4 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801d2c6:	4b45      	ldr	r3, [pc, #276]	; (801d3dc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801d2c8:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801d2cc:	4944      	ldr	r1, [pc, #272]	; (801d3e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801d2ce:	4845      	ldr	r0, [pc, #276]	; (801d3e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801d2d0:	f009 f82e 	bl	8026330 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801d2d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d2d6:	68ba      	ldr	r2, [r7, #8]
 801d2d8:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801d2da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d2dc:	88db      	ldrh	r3, [r3, #6]
 801d2de:	b29a      	uxth	r2, r3
 801d2e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d2e2:	889b      	ldrh	r3, [r3, #4]
 801d2e4:	b29b      	uxth	r3, r3
 801d2e6:	429a      	cmp	r2, r3
 801d2e8:	d010      	beq.n	801d30c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801d2ea:	2300      	movs	r3, #0
 801d2ec:	623b      	str	r3, [r7, #32]
 801d2ee:	e00d      	b.n	801d30c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801d2f0:	68fb      	ldr	r3, [r7, #12]
 801d2f2:	685b      	ldr	r3, [r3, #4]
 801d2f4:	2b00      	cmp	r3, #0
 801d2f6:	d006      	beq.n	801d306 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801d2f8:	4b38      	ldr	r3, [pc, #224]	; (801d3dc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801d2fa:	f240 12bf 	movw	r2, #447	; 0x1bf
 801d2fe:	493a      	ldr	r1, [pc, #232]	; (801d3e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801d300:	4838      	ldr	r0, [pc, #224]	; (801d3e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801d302:	f009 f815 	bl	8026330 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801d306:	68fb      	ldr	r3, [r7, #12]
 801d308:	68ba      	ldr	r2, [r7, #8]
 801d30a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801d30c:	687b      	ldr	r3, [r7, #4]
 801d30e:	2b00      	cmp	r3, #0
 801d310:	d105      	bne.n	801d31e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801d312:	68fb      	ldr	r3, [r7, #12]
 801d314:	7f9b      	ldrb	r3, [r3, #30]
 801d316:	f003 0301 	and.w	r3, r3, #1
 801d31a:	2b00      	cmp	r3, #0
 801d31c:	d059      	beq.n	801d3d2 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801d31e:	6a3b      	ldr	r3, [r7, #32]
 801d320:	2b00      	cmp	r3, #0
 801d322:	d04f      	beq.n	801d3c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801d324:	68fb      	ldr	r3, [r7, #12]
 801d326:	685b      	ldr	r3, [r3, #4]
 801d328:	2b00      	cmp	r3, #0
 801d32a:	d006      	beq.n	801d33a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801d32c:	68fb      	ldr	r3, [r7, #12]
 801d32e:	685b      	ldr	r3, [r3, #4]
 801d330:	685b      	ldr	r3, [r3, #4]
 801d332:	889b      	ldrh	r3, [r3, #4]
 801d334:	b29b      	uxth	r3, r3
 801d336:	2b00      	cmp	r3, #0
 801d338:	d002      	beq.n	801d340 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801d33a:	2300      	movs	r3, #0
 801d33c:	623b      	str	r3, [r7, #32]
 801d33e:	e041      	b.n	801d3c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801d340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d342:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801d344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d346:	681b      	ldr	r3, [r3, #0]
 801d348:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801d34a:	e012      	b.n	801d372 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801d34c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d34e:	685b      	ldr	r3, [r3, #4]
 801d350:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801d352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d354:	88db      	ldrh	r3, [r3, #6]
 801d356:	b29a      	uxth	r2, r3
 801d358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d35a:	889b      	ldrh	r3, [r3, #4]
 801d35c:	b29b      	uxth	r3, r3
 801d35e:	429a      	cmp	r2, r3
 801d360:	d002      	beq.n	801d368 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801d362:	2300      	movs	r3, #0
 801d364:	623b      	str	r3, [r7, #32]
            break;
 801d366:	e007      	b.n	801d378 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801d368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d36a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801d36c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d36e:	681b      	ldr	r3, [r3, #0]
 801d370:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801d372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d374:	2b00      	cmp	r3, #0
 801d376:	d1e9      	bne.n	801d34c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801d378:	6a3b      	ldr	r3, [r7, #32]
 801d37a:	2b00      	cmp	r3, #0
 801d37c:	d022      	beq.n	801d3c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801d37e:	68fb      	ldr	r3, [r7, #12]
 801d380:	685b      	ldr	r3, [r3, #4]
 801d382:	2b00      	cmp	r3, #0
 801d384:	d106      	bne.n	801d394 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801d386:	4b15      	ldr	r3, [pc, #84]	; (801d3dc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801d388:	f240 12df 	movw	r2, #479	; 0x1df
 801d38c:	4917      	ldr	r1, [pc, #92]	; (801d3ec <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801d38e:	4815      	ldr	r0, [pc, #84]	; (801d3e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801d390:	f008 ffce 	bl	8026330 <iprintf>
          LWIP_ASSERT("sanity check",
 801d394:	68fb      	ldr	r3, [r7, #12]
 801d396:	685b      	ldr	r3, [r3, #4]
 801d398:	685a      	ldr	r2, [r3, #4]
 801d39a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d39c:	429a      	cmp	r2, r3
 801d39e:	d106      	bne.n	801d3ae <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801d3a0:	4b0e      	ldr	r3, [pc, #56]	; (801d3dc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801d3a2:	f240 12e1 	movw	r2, #481	; 0x1e1
 801d3a6:	4911      	ldr	r1, [pc, #68]	; (801d3ec <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801d3a8:	480e      	ldr	r0, [pc, #56]	; (801d3e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801d3aa:	f008 ffc1 	bl	8026330 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801d3ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d3b0:	681b      	ldr	r3, [r3, #0]
 801d3b2:	2b00      	cmp	r3, #0
 801d3b4:	d006      	beq.n	801d3c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801d3b6:	4b09      	ldr	r3, [pc, #36]	; (801d3dc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801d3b8:	f240 12e3 	movw	r2, #483	; 0x1e3
 801d3bc:	490c      	ldr	r1, [pc, #48]	; (801d3f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801d3be:	4809      	ldr	r0, [pc, #36]	; (801d3e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801d3c0:	f008 ffb6 	bl	8026330 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801d3c4:	6a3b      	ldr	r3, [r7, #32]
 801d3c6:	2b00      	cmp	r3, #0
 801d3c8:	bf14      	ite	ne
 801d3ca:	2301      	movne	r3, #1
 801d3cc:	2300      	moveq	r3, #0
 801d3ce:	b2db      	uxtb	r3, r3
 801d3d0:	e000      	b.n	801d3d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801d3d2:	2300      	movs	r3, #0
}
 801d3d4:	4618      	mov	r0, r3
 801d3d6:	3730      	adds	r7, #48	; 0x30
 801d3d8:	46bd      	mov	sp, r7
 801d3da:	bd80      	pop	{r7, pc}
 801d3dc:	08028418 	.word	0x08028418
 801d3e0:	080284fc 	.word	0x080284fc
 801d3e4:	08028460 	.word	0x08028460
 801d3e8:	0802851c 	.word	0x0802851c
 801d3ec:	08028554 	.word	0x08028554
 801d3f0:	08028564 	.word	0x08028564

0801d3f4 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801d3f4:	b580      	push	{r7, lr}
 801d3f6:	b08e      	sub	sp, #56	; 0x38
 801d3f8:	af00      	add	r7, sp, #0
 801d3fa:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801d3fc:	687b      	ldr	r3, [r7, #4]
 801d3fe:	685b      	ldr	r3, [r3, #4]
 801d400:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801d402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d404:	781b      	ldrb	r3, [r3, #0]
 801d406:	f003 030f 	and.w	r3, r3, #15
 801d40a:	b2db      	uxtb	r3, r3
 801d40c:	009b      	lsls	r3, r3, #2
 801d40e:	b2db      	uxtb	r3, r3
 801d410:	2b14      	cmp	r3, #20
 801d412:	f040 8165 	bne.w	801d6e0 <ip4_reass+0x2ec>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801d416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d418:	88db      	ldrh	r3, [r3, #6]
 801d41a:	b29b      	uxth	r3, r3
 801d41c:	4618      	mov	r0, r3
 801d41e:	f7fb fe83 	bl	8019128 <lwip_htons>
 801d422:	4603      	mov	r3, r0
 801d424:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801d428:	b29b      	uxth	r3, r3
 801d42a:	00db      	lsls	r3, r3, #3
 801d42c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801d42e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d430:	885b      	ldrh	r3, [r3, #2]
 801d432:	b29b      	uxth	r3, r3
 801d434:	4618      	mov	r0, r3
 801d436:	f7fb fe77 	bl	8019128 <lwip_htons>
 801d43a:	4603      	mov	r3, r0
 801d43c:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801d43e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d440:	781b      	ldrb	r3, [r3, #0]
 801d442:	f003 030f 	and.w	r3, r3, #15
 801d446:	b2db      	uxtb	r3, r3
 801d448:	009b      	lsls	r3, r3, #2
 801d44a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801d44e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801d452:	b29b      	uxth	r3, r3
 801d454:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801d456:	429a      	cmp	r2, r3
 801d458:	f0c0 8144 	bcc.w	801d6e4 <ip4_reass+0x2f0>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801d45c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801d460:	b29b      	uxth	r3, r3
 801d462:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801d464:	1ad3      	subs	r3, r2, r3
 801d466:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801d468:	6878      	ldr	r0, [r7, #4]
 801d46a:	f001 fdeb 	bl	801f044 <pbuf_clen>
 801d46e:	4603      	mov	r3, r0
 801d470:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801d472:	4ba1      	ldr	r3, [pc, #644]	; (801d6f8 <ip4_reass+0x304>)
 801d474:	881b      	ldrh	r3, [r3, #0]
 801d476:	461a      	mov	r2, r3
 801d478:	8c3b      	ldrh	r3, [r7, #32]
 801d47a:	4413      	add	r3, r2
 801d47c:	2b0a      	cmp	r3, #10
 801d47e:	dd10      	ble.n	801d4a2 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801d480:	8c3b      	ldrh	r3, [r7, #32]
 801d482:	4619      	mov	r1, r3
 801d484:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801d486:	f7ff fd81 	bl	801cf8c <ip_reass_remove_oldest_datagram>
 801d48a:	4603      	mov	r3, r0
 801d48c:	2b00      	cmp	r3, #0
 801d48e:	f000 812a 	beq.w	801d6e6 <ip4_reass+0x2f2>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801d492:	4b99      	ldr	r3, [pc, #612]	; (801d6f8 <ip4_reass+0x304>)
 801d494:	881b      	ldrh	r3, [r3, #0]
 801d496:	461a      	mov	r2, r3
 801d498:	8c3b      	ldrh	r3, [r7, #32]
 801d49a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801d49c:	2b0a      	cmp	r3, #10
 801d49e:	f300 8122 	bgt.w	801d6e6 <ip4_reass+0x2f2>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801d4a2:	4b96      	ldr	r3, [pc, #600]	; (801d6fc <ip4_reass+0x308>)
 801d4a4:	681b      	ldr	r3, [r3, #0]
 801d4a6:	633b      	str	r3, [r7, #48]	; 0x30
 801d4a8:	e015      	b.n	801d4d6 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801d4aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d4ac:	695a      	ldr	r2, [r3, #20]
 801d4ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d4b0:	68db      	ldr	r3, [r3, #12]
 801d4b2:	429a      	cmp	r2, r3
 801d4b4:	d10c      	bne.n	801d4d0 <ip4_reass+0xdc>
 801d4b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d4b8:	699a      	ldr	r2, [r3, #24]
 801d4ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d4bc:	691b      	ldr	r3, [r3, #16]
 801d4be:	429a      	cmp	r2, r3
 801d4c0:	d106      	bne.n	801d4d0 <ip4_reass+0xdc>
 801d4c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d4c4:	899a      	ldrh	r2, [r3, #12]
 801d4c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d4c8:	889b      	ldrh	r3, [r3, #4]
 801d4ca:	b29b      	uxth	r3, r3
 801d4cc:	429a      	cmp	r2, r3
 801d4ce:	d006      	beq.n	801d4de <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801d4d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d4d2:	681b      	ldr	r3, [r3, #0]
 801d4d4:	633b      	str	r3, [r7, #48]	; 0x30
 801d4d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d4d8:	2b00      	cmp	r3, #0
 801d4da:	d1e6      	bne.n	801d4aa <ip4_reass+0xb6>
 801d4dc:	e000      	b.n	801d4e0 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801d4de:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801d4e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d4e2:	2b00      	cmp	r3, #0
 801d4e4:	d109      	bne.n	801d4fa <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801d4e6:	8c3b      	ldrh	r3, [r7, #32]
 801d4e8:	4619      	mov	r1, r3
 801d4ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801d4ec:	f7ff fdb0 	bl	801d050 <ip_reass_enqueue_new_datagram>
 801d4f0:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801d4f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d4f4:	2b00      	cmp	r3, #0
 801d4f6:	d11c      	bne.n	801d532 <ip4_reass+0x13e>
      goto nullreturn;
 801d4f8:	e0f5      	b.n	801d6e6 <ip4_reass+0x2f2>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801d4fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d4fc:	88db      	ldrh	r3, [r3, #6]
 801d4fe:	b29b      	uxth	r3, r3
 801d500:	4618      	mov	r0, r3
 801d502:	f7fb fe11 	bl	8019128 <lwip_htons>
 801d506:	4603      	mov	r3, r0
 801d508:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801d50c:	2b00      	cmp	r3, #0
 801d50e:	d110      	bne.n	801d532 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801d510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d512:	89db      	ldrh	r3, [r3, #14]
 801d514:	4618      	mov	r0, r3
 801d516:	f7fb fe07 	bl	8019128 <lwip_htons>
 801d51a:	4603      	mov	r3, r0
 801d51c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801d520:	2b00      	cmp	r3, #0
 801d522:	d006      	beq.n	801d532 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801d524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d526:	3308      	adds	r3, #8
 801d528:	2214      	movs	r2, #20
 801d52a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801d52c:	4618      	mov	r0, r3
 801d52e:	f008 fe26 	bl	802617e <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801d532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d534:	88db      	ldrh	r3, [r3, #6]
 801d536:	b29b      	uxth	r3, r3
 801d538:	f003 0320 	and.w	r3, r3, #32
 801d53c:	2b00      	cmp	r3, #0
 801d53e:	bf0c      	ite	eq
 801d540:	2301      	moveq	r3, #1
 801d542:	2300      	movne	r3, #0
 801d544:	b2db      	uxtb	r3, r3
 801d546:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801d548:	69fb      	ldr	r3, [r7, #28]
 801d54a:	2b00      	cmp	r3, #0
 801d54c:	d00e      	beq.n	801d56c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801d54e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801d550:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801d552:	4413      	add	r3, r2
 801d554:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801d556:	8b7a      	ldrh	r2, [r7, #26]
 801d558:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801d55a:	429a      	cmp	r2, r3
 801d55c:	f0c0 80a1 	bcc.w	801d6a2 <ip4_reass+0x2ae>
 801d560:	8b7b      	ldrh	r3, [r7, #26]
 801d562:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801d566:	4293      	cmp	r3, r2
 801d568:	f200 809b 	bhi.w	801d6a2 <ip4_reass+0x2ae>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801d56c:	69fa      	ldr	r2, [r7, #28]
 801d56e:	6879      	ldr	r1, [r7, #4]
 801d570:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801d572:	f7ff fdd5 	bl	801d120 <ip_reass_chain_frag_into_datagram_and_validate>
 801d576:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801d578:	697b      	ldr	r3, [r7, #20]
 801d57a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d57e:	f000 808f 	beq.w	801d6a0 <ip4_reass+0x2ac>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801d582:	4b5d      	ldr	r3, [pc, #372]	; (801d6f8 <ip4_reass+0x304>)
 801d584:	881a      	ldrh	r2, [r3, #0]
 801d586:	8c3b      	ldrh	r3, [r7, #32]
 801d588:	4413      	add	r3, r2
 801d58a:	b29a      	uxth	r2, r3
 801d58c:	4b5a      	ldr	r3, [pc, #360]	; (801d6f8 <ip4_reass+0x304>)
 801d58e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801d590:	69fb      	ldr	r3, [r7, #28]
 801d592:	2b00      	cmp	r3, #0
 801d594:	d00d      	beq.n	801d5b2 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801d596:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801d598:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801d59a:	4413      	add	r3, r2
 801d59c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801d59e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d5a0:	8a7a      	ldrh	r2, [r7, #18]
 801d5a2:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801d5a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d5a6:	7f9b      	ldrb	r3, [r3, #30]
 801d5a8:	f043 0301 	orr.w	r3, r3, #1
 801d5ac:	b2da      	uxtb	r2, r3
 801d5ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d5b0:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801d5b2:	697b      	ldr	r3, [r7, #20]
 801d5b4:	2b01      	cmp	r3, #1
 801d5b6:	d171      	bne.n	801d69c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801d5b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d5ba:	8b9b      	ldrh	r3, [r3, #28]
 801d5bc:	3314      	adds	r3, #20
 801d5be:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801d5c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d5c2:	685b      	ldr	r3, [r3, #4]
 801d5c4:	685b      	ldr	r3, [r3, #4]
 801d5c6:	681b      	ldr	r3, [r3, #0]
 801d5c8:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801d5ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d5cc:	685b      	ldr	r3, [r3, #4]
 801d5ce:	685b      	ldr	r3, [r3, #4]
 801d5d0:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801d5d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d5d4:	3308      	adds	r3, #8
 801d5d6:	2214      	movs	r2, #20
 801d5d8:	4619      	mov	r1, r3
 801d5da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801d5dc:	f008 fdcf 	bl	802617e <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801d5e0:	8a3b      	ldrh	r3, [r7, #16]
 801d5e2:	4618      	mov	r0, r3
 801d5e4:	f7fb fda0 	bl	8019128 <lwip_htons>
 801d5e8:	4603      	mov	r3, r0
 801d5ea:	461a      	mov	r2, r3
 801d5ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d5ee:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801d5f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d5f2:	2200      	movs	r2, #0
 801d5f4:	719a      	strb	r2, [r3, #6]
 801d5f6:	2200      	movs	r2, #0
 801d5f8:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801d5fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d5fc:	2200      	movs	r2, #0
 801d5fe:	729a      	strb	r2, [r3, #10]
 801d600:	2200      	movs	r2, #0
 801d602:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801d604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d606:	685b      	ldr	r3, [r3, #4]
 801d608:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801d60a:	e00d      	b.n	801d628 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801d60c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d60e:	685b      	ldr	r3, [r3, #4]
 801d610:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801d612:	2114      	movs	r1, #20
 801d614:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801d616:	f001 fc01 	bl	801ee1c <pbuf_remove_header>
      pbuf_cat(p, r);
 801d61a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801d61c:	6878      	ldr	r0, [r7, #4]
 801d61e:	f001 fd51 	bl	801f0c4 <pbuf_cat>
      r = iprh->next_pbuf;
 801d622:	68fb      	ldr	r3, [r7, #12]
 801d624:	681b      	ldr	r3, [r3, #0]
 801d626:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801d628:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d62a:	2b00      	cmp	r3, #0
 801d62c:	d1ee      	bne.n	801d60c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801d62e:	4b33      	ldr	r3, [pc, #204]	; (801d6fc <ip4_reass+0x308>)
 801d630:	681b      	ldr	r3, [r3, #0]
 801d632:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801d634:	429a      	cmp	r2, r3
 801d636:	d102      	bne.n	801d63e <ip4_reass+0x24a>
      ipr_prev = NULL;
 801d638:	2300      	movs	r3, #0
 801d63a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801d63c:	e010      	b.n	801d660 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801d63e:	4b2f      	ldr	r3, [pc, #188]	; (801d6fc <ip4_reass+0x308>)
 801d640:	681b      	ldr	r3, [r3, #0]
 801d642:	62fb      	str	r3, [r7, #44]	; 0x2c
 801d644:	e007      	b.n	801d656 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801d646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d648:	681a      	ldr	r2, [r3, #0]
 801d64a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d64c:	429a      	cmp	r2, r3
 801d64e:	d006      	beq.n	801d65e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801d650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d652:	681b      	ldr	r3, [r3, #0]
 801d654:	62fb      	str	r3, [r7, #44]	; 0x2c
 801d656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d658:	2b00      	cmp	r3, #0
 801d65a:	d1f4      	bne.n	801d646 <ip4_reass+0x252>
 801d65c:	e000      	b.n	801d660 <ip4_reass+0x26c>
          break;
 801d65e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801d660:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801d662:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801d664:	f7ff fd2e 	bl	801d0c4 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801d668:	6878      	ldr	r0, [r7, #4]
 801d66a:	f001 fceb 	bl	801f044 <pbuf_clen>
 801d66e:	4603      	mov	r3, r0
 801d670:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801d672:	4b21      	ldr	r3, [pc, #132]	; (801d6f8 <ip4_reass+0x304>)
 801d674:	881b      	ldrh	r3, [r3, #0]
 801d676:	8c3a      	ldrh	r2, [r7, #32]
 801d678:	429a      	cmp	r2, r3
 801d67a:	d906      	bls.n	801d68a <ip4_reass+0x296>
 801d67c:	4b20      	ldr	r3, [pc, #128]	; (801d700 <ip4_reass+0x30c>)
 801d67e:	f240 229b 	movw	r2, #667	; 0x29b
 801d682:	4920      	ldr	r1, [pc, #128]	; (801d704 <ip4_reass+0x310>)
 801d684:	4820      	ldr	r0, [pc, #128]	; (801d708 <ip4_reass+0x314>)
 801d686:	f008 fe53 	bl	8026330 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801d68a:	4b1b      	ldr	r3, [pc, #108]	; (801d6f8 <ip4_reass+0x304>)
 801d68c:	881a      	ldrh	r2, [r3, #0]
 801d68e:	8c3b      	ldrh	r3, [r7, #32]
 801d690:	1ad3      	subs	r3, r2, r3
 801d692:	b29a      	uxth	r2, r3
 801d694:	4b18      	ldr	r3, [pc, #96]	; (801d6f8 <ip4_reass+0x304>)
 801d696:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801d698:	687b      	ldr	r3, [r7, #4]
 801d69a:	e028      	b.n	801d6ee <ip4_reass+0x2fa>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801d69c:	2300      	movs	r3, #0
 801d69e:	e026      	b.n	801d6ee <ip4_reass+0x2fa>
    goto nullreturn_ipr;
 801d6a0:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801d6a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d6a4:	2b00      	cmp	r3, #0
 801d6a6:	d106      	bne.n	801d6b6 <ip4_reass+0x2c2>
 801d6a8:	4b15      	ldr	r3, [pc, #84]	; (801d700 <ip4_reass+0x30c>)
 801d6aa:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801d6ae:	4917      	ldr	r1, [pc, #92]	; (801d70c <ip4_reass+0x318>)
 801d6b0:	4815      	ldr	r0, [pc, #84]	; (801d708 <ip4_reass+0x314>)
 801d6b2:	f008 fe3d 	bl	8026330 <iprintf>
  if (ipr->p == NULL) {
 801d6b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d6b8:	685b      	ldr	r3, [r3, #4]
 801d6ba:	2b00      	cmp	r3, #0
 801d6bc:	d113      	bne.n	801d6e6 <ip4_reass+0x2f2>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801d6be:	4b0f      	ldr	r3, [pc, #60]	; (801d6fc <ip4_reass+0x308>)
 801d6c0:	681b      	ldr	r3, [r3, #0]
 801d6c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801d6c4:	429a      	cmp	r2, r3
 801d6c6:	d006      	beq.n	801d6d6 <ip4_reass+0x2e2>
 801d6c8:	4b0d      	ldr	r3, [pc, #52]	; (801d700 <ip4_reass+0x30c>)
 801d6ca:	f240 22ab 	movw	r2, #683	; 0x2ab
 801d6ce:	4910      	ldr	r1, [pc, #64]	; (801d710 <ip4_reass+0x31c>)
 801d6d0:	480d      	ldr	r0, [pc, #52]	; (801d708 <ip4_reass+0x314>)
 801d6d2:	f008 fe2d 	bl	8026330 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801d6d6:	2100      	movs	r1, #0
 801d6d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801d6da:	f7ff fcf3 	bl	801d0c4 <ip_reass_dequeue_datagram>
 801d6de:	e002      	b.n	801d6e6 <ip4_reass+0x2f2>
    goto nullreturn;
 801d6e0:	bf00      	nop
 801d6e2:	e000      	b.n	801d6e6 <ip4_reass+0x2f2>
    goto nullreturn;
 801d6e4:	bf00      	nop
  }

nullreturn:
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801d6e6:	6878      	ldr	r0, [r7, #4]
 801d6e8:	f001 fc1e 	bl	801ef28 <pbuf_free>
  return NULL;
 801d6ec:	2300      	movs	r3, #0
}
 801d6ee:	4618      	mov	r0, r3
 801d6f0:	3738      	adds	r7, #56	; 0x38
 801d6f2:	46bd      	mov	sp, r7
 801d6f4:	bd80      	pop	{r7, pc}
 801d6f6:	bf00      	nop
 801d6f8:	20019670 	.word	0x20019670
 801d6fc:	2001966c 	.word	0x2001966c
 801d700:	08028418 	.word	0x08028418
 801d704:	08028588 	.word	0x08028588
 801d708:	08028460 	.word	0x08028460
 801d70c:	080285a4 	.word	0x080285a4
 801d710:	080285b0 	.word	0x080285b0

0801d714 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801d714:	b580      	push	{r7, lr}
 801d716:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801d718:	2005      	movs	r0, #5
 801d71a:	f000 fe0b 	bl	801e334 <memp_malloc>
 801d71e:	4603      	mov	r3, r0
}
 801d720:	4618      	mov	r0, r3
 801d722:	bd80      	pop	{r7, pc}

0801d724 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801d724:	b580      	push	{r7, lr}
 801d726:	b082      	sub	sp, #8
 801d728:	af00      	add	r7, sp, #0
 801d72a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801d72c:	687b      	ldr	r3, [r7, #4]
 801d72e:	2b00      	cmp	r3, #0
 801d730:	d106      	bne.n	801d740 <ip_frag_free_pbuf_custom_ref+0x1c>
 801d732:	4b07      	ldr	r3, [pc, #28]	; (801d750 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801d734:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801d738:	4906      	ldr	r1, [pc, #24]	; (801d754 <ip_frag_free_pbuf_custom_ref+0x30>)
 801d73a:	4807      	ldr	r0, [pc, #28]	; (801d758 <ip_frag_free_pbuf_custom_ref+0x34>)
 801d73c:	f008 fdf8 	bl	8026330 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801d740:	6879      	ldr	r1, [r7, #4]
 801d742:	2005      	movs	r0, #5
 801d744:	f000 fe48 	bl	801e3d8 <memp_free>
}
 801d748:	bf00      	nop
 801d74a:	3708      	adds	r7, #8
 801d74c:	46bd      	mov	sp, r7
 801d74e:	bd80      	pop	{r7, pc}
 801d750:	08028418 	.word	0x08028418
 801d754:	080285d0 	.word	0x080285d0
 801d758:	08028460 	.word	0x08028460

0801d75c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801d75c:	b580      	push	{r7, lr}
 801d75e:	b084      	sub	sp, #16
 801d760:	af00      	add	r7, sp, #0
 801d762:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801d764:	687b      	ldr	r3, [r7, #4]
 801d766:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801d768:	68fb      	ldr	r3, [r7, #12]
 801d76a:	2b00      	cmp	r3, #0
 801d76c:	d106      	bne.n	801d77c <ipfrag_free_pbuf_custom+0x20>
 801d76e:	4b11      	ldr	r3, [pc, #68]	; (801d7b4 <ipfrag_free_pbuf_custom+0x58>)
 801d770:	f240 22ce 	movw	r2, #718	; 0x2ce
 801d774:	4910      	ldr	r1, [pc, #64]	; (801d7b8 <ipfrag_free_pbuf_custom+0x5c>)
 801d776:	4811      	ldr	r0, [pc, #68]	; (801d7bc <ipfrag_free_pbuf_custom+0x60>)
 801d778:	f008 fdda 	bl	8026330 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801d77c:	68fa      	ldr	r2, [r7, #12]
 801d77e:	687b      	ldr	r3, [r7, #4]
 801d780:	429a      	cmp	r2, r3
 801d782:	d006      	beq.n	801d792 <ipfrag_free_pbuf_custom+0x36>
 801d784:	4b0b      	ldr	r3, [pc, #44]	; (801d7b4 <ipfrag_free_pbuf_custom+0x58>)
 801d786:	f240 22cf 	movw	r2, #719	; 0x2cf
 801d78a:	490d      	ldr	r1, [pc, #52]	; (801d7c0 <ipfrag_free_pbuf_custom+0x64>)
 801d78c:	480b      	ldr	r0, [pc, #44]	; (801d7bc <ipfrag_free_pbuf_custom+0x60>)
 801d78e:	f008 fdcf 	bl	8026330 <iprintf>
  if (pcr->original != NULL) {
 801d792:	68fb      	ldr	r3, [r7, #12]
 801d794:	695b      	ldr	r3, [r3, #20]
 801d796:	2b00      	cmp	r3, #0
 801d798:	d004      	beq.n	801d7a4 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801d79a:	68fb      	ldr	r3, [r7, #12]
 801d79c:	695b      	ldr	r3, [r3, #20]
 801d79e:	4618      	mov	r0, r3
 801d7a0:	f001 fbc2 	bl	801ef28 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801d7a4:	68f8      	ldr	r0, [r7, #12]
 801d7a6:	f7ff ffbd 	bl	801d724 <ip_frag_free_pbuf_custom_ref>
}
 801d7aa:	bf00      	nop
 801d7ac:	3710      	adds	r7, #16
 801d7ae:	46bd      	mov	sp, r7
 801d7b0:	bd80      	pop	{r7, pc}
 801d7b2:	bf00      	nop
 801d7b4:	08028418 	.word	0x08028418
 801d7b8:	080285dc 	.word	0x080285dc
 801d7bc:	08028460 	.word	0x08028460
 801d7c0:	080285e8 	.word	0x080285e8

0801d7c4 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801d7c4:	b580      	push	{r7, lr}
 801d7c6:	b094      	sub	sp, #80	; 0x50
 801d7c8:	af02      	add	r7, sp, #8
 801d7ca:	60f8      	str	r0, [r7, #12]
 801d7cc:	60b9      	str	r1, [r7, #8]
 801d7ce:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801d7d0:	2300      	movs	r3, #0
 801d7d2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801d7d6:	68bb      	ldr	r3, [r7, #8]
 801d7d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801d7da:	3b14      	subs	r3, #20
 801d7dc:	2b00      	cmp	r3, #0
 801d7de:	da00      	bge.n	801d7e2 <ip4_frag+0x1e>
 801d7e0:	3307      	adds	r3, #7
 801d7e2:	10db      	asrs	r3, r3, #3
 801d7e4:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801d7e6:	2314      	movs	r3, #20
 801d7e8:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801d7ea:	68fb      	ldr	r3, [r7, #12]
 801d7ec:	685b      	ldr	r3, [r3, #4]
 801d7ee:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801d7f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d7f2:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801d7f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d7f6:	781b      	ldrb	r3, [r3, #0]
 801d7f8:	f003 030f 	and.w	r3, r3, #15
 801d7fc:	b2db      	uxtb	r3, r3
 801d7fe:	009b      	lsls	r3, r3, #2
 801d800:	b2db      	uxtb	r3, r3
 801d802:	2b14      	cmp	r3, #20
 801d804:	d002      	beq.n	801d80c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801d806:	f06f 0305 	mvn.w	r3, #5
 801d80a:	e10f      	b.n	801da2c <ip4_frag+0x268>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801d80c:	68fb      	ldr	r3, [r7, #12]
 801d80e:	895b      	ldrh	r3, [r3, #10]
 801d810:	2b13      	cmp	r3, #19
 801d812:	d809      	bhi.n	801d828 <ip4_frag+0x64>
 801d814:	4b87      	ldr	r3, [pc, #540]	; (801da34 <ip4_frag+0x270>)
 801d816:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801d81a:	4987      	ldr	r1, [pc, #540]	; (801da38 <ip4_frag+0x274>)
 801d81c:	4887      	ldr	r0, [pc, #540]	; (801da3c <ip4_frag+0x278>)
 801d81e:	f008 fd87 	bl	8026330 <iprintf>
 801d822:	f06f 0305 	mvn.w	r3, #5
 801d826:	e101      	b.n	801da2c <ip4_frag+0x268>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801d828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d82a:	88db      	ldrh	r3, [r3, #6]
 801d82c:	b29b      	uxth	r3, r3
 801d82e:	4618      	mov	r0, r3
 801d830:	f7fb fc7a 	bl	8019128 <lwip_htons>
 801d834:	4603      	mov	r3, r0
 801d836:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801d838:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801d83a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801d83e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801d842:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801d844:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801d848:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801d84a:	68fb      	ldr	r3, [r7, #12]
 801d84c:	891b      	ldrh	r3, [r3, #8]
 801d84e:	3b14      	subs	r3, #20
 801d850:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801d854:	e0e0      	b.n	801da18 <ip4_frag+0x254>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801d856:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801d858:	00db      	lsls	r3, r3, #3
 801d85a:	b29a      	uxth	r2, r3
 801d85c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801d860:	4293      	cmp	r3, r2
 801d862:	bf28      	it	cs
 801d864:	4613      	movcs	r3, r2
 801d866:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801d868:	f44f 7220 	mov.w	r2, #640	; 0x280
 801d86c:	2114      	movs	r1, #20
 801d86e:	200e      	movs	r0, #14
 801d870:	f001 f878 	bl	801e964 <pbuf_alloc>
 801d874:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801d876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d878:	2b00      	cmp	r3, #0
 801d87a:	f000 80d4 	beq.w	801da26 <ip4_frag+0x262>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801d87e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d880:	895b      	ldrh	r3, [r3, #10]
 801d882:	2b13      	cmp	r3, #19
 801d884:	d806      	bhi.n	801d894 <ip4_frag+0xd0>
 801d886:	4b6b      	ldr	r3, [pc, #428]	; (801da34 <ip4_frag+0x270>)
 801d888:	f240 3225 	movw	r2, #805	; 0x325
 801d88c:	496c      	ldr	r1, [pc, #432]	; (801da40 <ip4_frag+0x27c>)
 801d88e:	486b      	ldr	r0, [pc, #428]	; (801da3c <ip4_frag+0x278>)
 801d890:	f008 fd4e 	bl	8026330 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801d894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d896:	685b      	ldr	r3, [r3, #4]
 801d898:	2214      	movs	r2, #20
 801d89a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801d89c:	4618      	mov	r0, r3
 801d89e:	f008 fc6e 	bl	802617e <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801d8a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d8a4:	685b      	ldr	r3, [r3, #4]
 801d8a6:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801d8a8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801d8aa:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801d8ae:	e064      	b.n	801d97a <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801d8b0:	68fb      	ldr	r3, [r7, #12]
 801d8b2:	895a      	ldrh	r2, [r3, #10]
 801d8b4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801d8b6:	1ad3      	subs	r3, r2, r3
 801d8b8:	847b      	strh	r3, [r7, #34]	; 0x22
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801d8ba:	68fb      	ldr	r3, [r7, #12]
 801d8bc:	895b      	ldrh	r3, [r3, #10]
 801d8be:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801d8c0:	429a      	cmp	r2, r3
 801d8c2:	d906      	bls.n	801d8d2 <ip4_frag+0x10e>
 801d8c4:	4b5b      	ldr	r3, [pc, #364]	; (801da34 <ip4_frag+0x270>)
 801d8c6:	f240 322d 	movw	r2, #813	; 0x32d
 801d8ca:	495e      	ldr	r1, [pc, #376]	; (801da44 <ip4_frag+0x280>)
 801d8cc:	485b      	ldr	r0, [pc, #364]	; (801da3c <ip4_frag+0x278>)
 801d8ce:	f008 fd2f 	bl	8026330 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801d8d2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801d8d4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801d8d8:	4293      	cmp	r3, r2
 801d8da:	bf28      	it	cs
 801d8dc:	4613      	movcs	r3, r2
 801d8de:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801d8e2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801d8e6:	2b00      	cmp	r3, #0
 801d8e8:	d105      	bne.n	801d8f6 <ip4_frag+0x132>
        poff = 0;
 801d8ea:	2300      	movs	r3, #0
 801d8ec:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801d8ee:	68fb      	ldr	r3, [r7, #12]
 801d8f0:	681b      	ldr	r3, [r3, #0]
 801d8f2:	60fb      	str	r3, [r7, #12]
        continue;
 801d8f4:	e041      	b.n	801d97a <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801d8f6:	f7ff ff0d 	bl	801d714 <ip_frag_alloc_pbuf_custom_ref>
 801d8fa:	61f8      	str	r0, [r7, #28]
      if (pcr == NULL) {
 801d8fc:	69fb      	ldr	r3, [r7, #28]
 801d8fe:	2b00      	cmp	r3, #0
 801d900:	d103      	bne.n	801d90a <ip4_frag+0x146>
        pbuf_free(rambuf);
 801d902:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801d904:	f001 fb10 	bl	801ef28 <pbuf_free>
        goto memerr;
 801d908:	e08e      	b.n	801da28 <ip4_frag+0x264>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801d90a:	69f8      	ldr	r0, [r7, #28]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801d90c:	68fb      	ldr	r3, [r7, #12]
 801d90e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801d910:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801d912:	4413      	add	r3, r2
 801d914:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 801d918:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801d91c:	9201      	str	r2, [sp, #4]
 801d91e:	9300      	str	r3, [sp, #0]
 801d920:	4603      	mov	r3, r0
 801d922:	2241      	movs	r2, #65	; 0x41
 801d924:	2000      	movs	r0, #0
 801d926:	f001 f943 	bl	801ebb0 <pbuf_alloced_custom>
 801d92a:	61b8      	str	r0, [r7, #24]
      if (newpbuf == NULL) {
 801d92c:	69bb      	ldr	r3, [r7, #24]
 801d92e:	2b00      	cmp	r3, #0
 801d930:	d106      	bne.n	801d940 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801d932:	69f8      	ldr	r0, [r7, #28]
 801d934:	f7ff fef6 	bl	801d724 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801d938:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801d93a:	f001 faf5 	bl	801ef28 <pbuf_free>
        goto memerr;
 801d93e:	e073      	b.n	801da28 <ip4_frag+0x264>
      }
      pbuf_ref(p);
 801d940:	68f8      	ldr	r0, [r7, #12]
 801d942:	f001 fb97 	bl	801f074 <pbuf_ref>
      pcr->original = p;
 801d946:	69fb      	ldr	r3, [r7, #28]
 801d948:	68fa      	ldr	r2, [r7, #12]
 801d94a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801d94c:	69fb      	ldr	r3, [r7, #28]
 801d94e:	4a3e      	ldr	r2, [pc, #248]	; (801da48 <ip4_frag+0x284>)
 801d950:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801d952:	69b9      	ldr	r1, [r7, #24]
 801d954:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801d956:	f001 fbb5 	bl	801f0c4 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801d95a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801d95e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801d962:	1ad3      	subs	r3, r2, r3
 801d964:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801d968:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801d96c:	2b00      	cmp	r3, #0
 801d96e:	d004      	beq.n	801d97a <ip4_frag+0x1b6>
        poff = 0;
 801d970:	2300      	movs	r3, #0
 801d972:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801d974:	68fb      	ldr	r3, [r7, #12]
 801d976:	681b      	ldr	r3, [r3, #0]
 801d978:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801d97a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801d97e:	2b00      	cmp	r3, #0
 801d980:	d196      	bne.n	801d8b0 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801d982:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801d984:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801d988:	4413      	add	r3, r2
 801d98a:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801d98c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801d990:	68bb      	ldr	r3, [r7, #8]
 801d992:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801d994:	3b14      	subs	r3, #20
 801d996:	429a      	cmp	r2, r3
 801d998:	bfd4      	ite	le
 801d99a:	2301      	movle	r3, #1
 801d99c:	2300      	movgt	r3, #0
 801d99e:	b2db      	uxtb	r3, r3
 801d9a0:	617b      	str	r3, [r7, #20]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801d9a2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801d9a6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801d9aa:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801d9ac:	697b      	ldr	r3, [r7, #20]
 801d9ae:	2b00      	cmp	r3, #0
 801d9b0:	d002      	beq.n	801d9b8 <ip4_frag+0x1f4>
 801d9b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d9b4:	2b00      	cmp	r3, #0
 801d9b6:	d003      	beq.n	801d9c0 <ip4_frag+0x1fc>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801d9b8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801d9ba:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801d9be:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801d9c0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801d9c2:	4618      	mov	r0, r3
 801d9c4:	f7fb fbb0 	bl	8019128 <lwip_htons>
 801d9c8:	4603      	mov	r3, r0
 801d9ca:	461a      	mov	r2, r3
 801d9cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d9ce:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801d9d0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801d9d2:	3314      	adds	r3, #20
 801d9d4:	b29b      	uxth	r3, r3
 801d9d6:	4618      	mov	r0, r3
 801d9d8:	f7fb fba6 	bl	8019128 <lwip_htons>
 801d9dc:	4603      	mov	r3, r0
 801d9de:	461a      	mov	r2, r3
 801d9e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d9e2:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801d9e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d9e6:	2200      	movs	r2, #0
 801d9e8:	729a      	strb	r2, [r3, #10]
 801d9ea:	2200      	movs	r2, #0
 801d9ec:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801d9ee:	68bb      	ldr	r3, [r7, #8]
 801d9f0:	695b      	ldr	r3, [r3, #20]
 801d9f2:	687a      	ldr	r2, [r7, #4]
 801d9f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801d9f6:	68b8      	ldr	r0, [r7, #8]
 801d9f8:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801d9fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801d9fc:	f001 fa94 	bl	801ef28 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801da00:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801da04:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801da06:	1ad3      	subs	r3, r2, r3
 801da08:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801da0c:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801da10:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801da12:	4413      	add	r3, r2
 801da14:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801da18:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801da1c:	2b00      	cmp	r3, #0
 801da1e:	f47f af1a 	bne.w	801d856 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801da22:	2300      	movs	r3, #0
 801da24:	e002      	b.n	801da2c <ip4_frag+0x268>
      goto memerr;
 801da26:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801da28:	f04f 33ff 	mov.w	r3, #4294967295
}
 801da2c:	4618      	mov	r0, r3
 801da2e:	3748      	adds	r7, #72	; 0x48
 801da30:	46bd      	mov	sp, r7
 801da32:	bd80      	pop	{r7, pc}
 801da34:	08028418 	.word	0x08028418
 801da38:	080285f4 	.word	0x080285f4
 801da3c:	08028460 	.word	0x08028460
 801da40:	08028610 	.word	0x08028610
 801da44:	08028630 	.word	0x08028630
 801da48:	0801d75d 	.word	0x0801d75d

0801da4c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 801da4c:	b480      	push	{r7}
 801da4e:	b083      	sub	sp, #12
 801da50:	af00      	add	r7, sp, #0
 801da52:	4603      	mov	r3, r0
 801da54:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 801da56:	4b05      	ldr	r3, [pc, #20]	; (801da6c <ptr_to_mem+0x20>)
 801da58:	681a      	ldr	r2, [r3, #0]
 801da5a:	88fb      	ldrh	r3, [r7, #6]
 801da5c:	4413      	add	r3, r2
}
 801da5e:	4618      	mov	r0, r3
 801da60:	370c      	adds	r7, #12
 801da62:	46bd      	mov	sp, r7
 801da64:	f85d 7b04 	ldr.w	r7, [sp], #4
 801da68:	4770      	bx	lr
 801da6a:	bf00      	nop
 801da6c:	20019674 	.word	0x20019674

0801da70 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 801da70:	b480      	push	{r7}
 801da72:	b083      	sub	sp, #12
 801da74:	af00      	add	r7, sp, #0
 801da76:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 801da78:	687b      	ldr	r3, [r7, #4]
 801da7a:	4a05      	ldr	r2, [pc, #20]	; (801da90 <mem_to_ptr+0x20>)
 801da7c:	6812      	ldr	r2, [r2, #0]
 801da7e:	1a9b      	subs	r3, r3, r2
 801da80:	b29b      	uxth	r3, r3
}
 801da82:	4618      	mov	r0, r3
 801da84:	370c      	adds	r7, #12
 801da86:	46bd      	mov	sp, r7
 801da88:	f85d 7b04 	ldr.w	r7, [sp], #4
 801da8c:	4770      	bx	lr
 801da8e:	bf00      	nop
 801da90:	20019674 	.word	0x20019674

0801da94 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 801da94:	b590      	push	{r4, r7, lr}
 801da96:	b085      	sub	sp, #20
 801da98:	af00      	add	r7, sp, #0
 801da9a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 801da9c:	4b45      	ldr	r3, [pc, #276]	; (801dbb4 <plug_holes+0x120>)
 801da9e:	681b      	ldr	r3, [r3, #0]
 801daa0:	687a      	ldr	r2, [r7, #4]
 801daa2:	429a      	cmp	r2, r3
 801daa4:	d206      	bcs.n	801dab4 <plug_holes+0x20>
 801daa6:	4b44      	ldr	r3, [pc, #272]	; (801dbb8 <plug_holes+0x124>)
 801daa8:	f240 12df 	movw	r2, #479	; 0x1df
 801daac:	4943      	ldr	r1, [pc, #268]	; (801dbbc <plug_holes+0x128>)
 801daae:	4844      	ldr	r0, [pc, #272]	; (801dbc0 <plug_holes+0x12c>)
 801dab0:	f008 fc3e 	bl	8026330 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 801dab4:	4b43      	ldr	r3, [pc, #268]	; (801dbc4 <plug_holes+0x130>)
 801dab6:	681b      	ldr	r3, [r3, #0]
 801dab8:	687a      	ldr	r2, [r7, #4]
 801daba:	429a      	cmp	r2, r3
 801dabc:	d306      	bcc.n	801dacc <plug_holes+0x38>
 801dabe:	4b3e      	ldr	r3, [pc, #248]	; (801dbb8 <plug_holes+0x124>)
 801dac0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801dac4:	4940      	ldr	r1, [pc, #256]	; (801dbc8 <plug_holes+0x134>)
 801dac6:	483e      	ldr	r0, [pc, #248]	; (801dbc0 <plug_holes+0x12c>)
 801dac8:	f008 fc32 	bl	8026330 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 801dacc:	687b      	ldr	r3, [r7, #4]
 801dace:	791b      	ldrb	r3, [r3, #4]
 801dad0:	2b00      	cmp	r3, #0
 801dad2:	d006      	beq.n	801dae2 <plug_holes+0x4e>
 801dad4:	4b38      	ldr	r3, [pc, #224]	; (801dbb8 <plug_holes+0x124>)
 801dad6:	f240 12e1 	movw	r2, #481	; 0x1e1
 801dada:	493c      	ldr	r1, [pc, #240]	; (801dbcc <plug_holes+0x138>)
 801dadc:	4838      	ldr	r0, [pc, #224]	; (801dbc0 <plug_holes+0x12c>)
 801dade:	f008 fc27 	bl	8026330 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 801dae2:	687b      	ldr	r3, [r7, #4]
 801dae4:	881b      	ldrh	r3, [r3, #0]
 801dae6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 801daea:	d906      	bls.n	801dafa <plug_holes+0x66>
 801daec:	4b32      	ldr	r3, [pc, #200]	; (801dbb8 <plug_holes+0x124>)
 801daee:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 801daf2:	4937      	ldr	r1, [pc, #220]	; (801dbd0 <plug_holes+0x13c>)
 801daf4:	4832      	ldr	r0, [pc, #200]	; (801dbc0 <plug_holes+0x12c>)
 801daf6:	f008 fc1b 	bl	8026330 <iprintf>

  nmem = ptr_to_mem(mem->next);
 801dafa:	687b      	ldr	r3, [r7, #4]
 801dafc:	881b      	ldrh	r3, [r3, #0]
 801dafe:	4618      	mov	r0, r3
 801db00:	f7ff ffa4 	bl	801da4c <ptr_to_mem>
 801db04:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 801db06:	687a      	ldr	r2, [r7, #4]
 801db08:	68fb      	ldr	r3, [r7, #12]
 801db0a:	429a      	cmp	r2, r3
 801db0c:	d024      	beq.n	801db58 <plug_holes+0xc4>
 801db0e:	68fb      	ldr	r3, [r7, #12]
 801db10:	791b      	ldrb	r3, [r3, #4]
 801db12:	2b00      	cmp	r3, #0
 801db14:	d120      	bne.n	801db58 <plug_holes+0xc4>
 801db16:	4b2b      	ldr	r3, [pc, #172]	; (801dbc4 <plug_holes+0x130>)
 801db18:	681b      	ldr	r3, [r3, #0]
 801db1a:	68fa      	ldr	r2, [r7, #12]
 801db1c:	429a      	cmp	r2, r3
 801db1e:	d01b      	beq.n	801db58 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 801db20:	4b2c      	ldr	r3, [pc, #176]	; (801dbd4 <plug_holes+0x140>)
 801db22:	681a      	ldr	r2, [r3, #0]
 801db24:	68fb      	ldr	r3, [r7, #12]
 801db26:	429a      	cmp	r2, r3
 801db28:	d102      	bne.n	801db30 <plug_holes+0x9c>
      lfree = mem;
 801db2a:	4a2a      	ldr	r2, [pc, #168]	; (801dbd4 <plug_holes+0x140>)
 801db2c:	687b      	ldr	r3, [r7, #4]
 801db2e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 801db30:	68fb      	ldr	r3, [r7, #12]
 801db32:	881a      	ldrh	r2, [r3, #0]
 801db34:	687b      	ldr	r3, [r7, #4]
 801db36:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 801db38:	68fb      	ldr	r3, [r7, #12]
 801db3a:	881b      	ldrh	r3, [r3, #0]
 801db3c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 801db40:	d00a      	beq.n	801db58 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 801db42:	68fb      	ldr	r3, [r7, #12]
 801db44:	881b      	ldrh	r3, [r3, #0]
 801db46:	4618      	mov	r0, r3
 801db48:	f7ff ff80 	bl	801da4c <ptr_to_mem>
 801db4c:	4604      	mov	r4, r0
 801db4e:	6878      	ldr	r0, [r7, #4]
 801db50:	f7ff ff8e 	bl	801da70 <mem_to_ptr>
 801db54:	4603      	mov	r3, r0
 801db56:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 801db58:	687b      	ldr	r3, [r7, #4]
 801db5a:	885b      	ldrh	r3, [r3, #2]
 801db5c:	4618      	mov	r0, r3
 801db5e:	f7ff ff75 	bl	801da4c <ptr_to_mem>
 801db62:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 801db64:	68ba      	ldr	r2, [r7, #8]
 801db66:	687b      	ldr	r3, [r7, #4]
 801db68:	429a      	cmp	r2, r3
 801db6a:	d01f      	beq.n	801dbac <plug_holes+0x118>
 801db6c:	68bb      	ldr	r3, [r7, #8]
 801db6e:	791b      	ldrb	r3, [r3, #4]
 801db70:	2b00      	cmp	r3, #0
 801db72:	d11b      	bne.n	801dbac <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 801db74:	4b17      	ldr	r3, [pc, #92]	; (801dbd4 <plug_holes+0x140>)
 801db76:	681a      	ldr	r2, [r3, #0]
 801db78:	687b      	ldr	r3, [r7, #4]
 801db7a:	429a      	cmp	r2, r3
 801db7c:	d102      	bne.n	801db84 <plug_holes+0xf0>
      lfree = pmem;
 801db7e:	4a15      	ldr	r2, [pc, #84]	; (801dbd4 <plug_holes+0x140>)
 801db80:	68bb      	ldr	r3, [r7, #8]
 801db82:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 801db84:	687b      	ldr	r3, [r7, #4]
 801db86:	881a      	ldrh	r2, [r3, #0]
 801db88:	68bb      	ldr	r3, [r7, #8]
 801db8a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 801db8c:	687b      	ldr	r3, [r7, #4]
 801db8e:	881b      	ldrh	r3, [r3, #0]
 801db90:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 801db94:	d00a      	beq.n	801dbac <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 801db96:	687b      	ldr	r3, [r7, #4]
 801db98:	881b      	ldrh	r3, [r3, #0]
 801db9a:	4618      	mov	r0, r3
 801db9c:	f7ff ff56 	bl	801da4c <ptr_to_mem>
 801dba0:	4604      	mov	r4, r0
 801dba2:	68b8      	ldr	r0, [r7, #8]
 801dba4:	f7ff ff64 	bl	801da70 <mem_to_ptr>
 801dba8:	4603      	mov	r3, r0
 801dbaa:	8063      	strh	r3, [r4, #2]
    }
  }
}
 801dbac:	bf00      	nop
 801dbae:	3714      	adds	r7, #20
 801dbb0:	46bd      	mov	sp, r7
 801dbb2:	bd90      	pop	{r4, r7, pc}
 801dbb4:	20019674 	.word	0x20019674
 801dbb8:	08028640 	.word	0x08028640
 801dbbc:	08028670 	.word	0x08028670
 801dbc0:	08028688 	.word	0x08028688
 801dbc4:	20019678 	.word	0x20019678
 801dbc8:	080286b0 	.word	0x080286b0
 801dbcc:	080286cc 	.word	0x080286cc
 801dbd0:	080286e8 	.word	0x080286e8
 801dbd4:	20019680 	.word	0x20019680

0801dbd8 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 801dbd8:	b580      	push	{r7, lr}
 801dbda:	b082      	sub	sp, #8
 801dbdc:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 801dbde:	4b1f      	ldr	r3, [pc, #124]	; (801dc5c <mem_init+0x84>)
 801dbe0:	3303      	adds	r3, #3
 801dbe2:	f023 0303 	bic.w	r3, r3, #3
 801dbe6:	461a      	mov	r2, r3
 801dbe8:	4b1d      	ldr	r3, [pc, #116]	; (801dc60 <mem_init+0x88>)
 801dbea:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 801dbec:	4b1c      	ldr	r3, [pc, #112]	; (801dc60 <mem_init+0x88>)
 801dbee:	681b      	ldr	r3, [r3, #0]
 801dbf0:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 801dbf2:	687b      	ldr	r3, [r7, #4]
 801dbf4:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 801dbf8:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 801dbfa:	687b      	ldr	r3, [r7, #4]
 801dbfc:	2200      	movs	r2, #0
 801dbfe:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 801dc00:	687b      	ldr	r3, [r7, #4]
 801dc02:	2200      	movs	r2, #0
 801dc04:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 801dc06:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 801dc0a:	f7ff ff1f 	bl	801da4c <ptr_to_mem>
 801dc0e:	4602      	mov	r2, r0
 801dc10:	4b14      	ldr	r3, [pc, #80]	; (801dc64 <mem_init+0x8c>)
 801dc12:	601a      	str	r2, [r3, #0]
  ram_end->used = 1;
 801dc14:	4b13      	ldr	r3, [pc, #76]	; (801dc64 <mem_init+0x8c>)
 801dc16:	681b      	ldr	r3, [r3, #0]
 801dc18:	2201      	movs	r2, #1
 801dc1a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 801dc1c:	4b11      	ldr	r3, [pc, #68]	; (801dc64 <mem_init+0x8c>)
 801dc1e:	681b      	ldr	r3, [r3, #0]
 801dc20:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 801dc24:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 801dc26:	4b0f      	ldr	r3, [pc, #60]	; (801dc64 <mem_init+0x8c>)
 801dc28:	681b      	ldr	r3, [r3, #0]
 801dc2a:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 801dc2e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 801dc30:	4b0b      	ldr	r3, [pc, #44]	; (801dc60 <mem_init+0x88>)
 801dc32:	681b      	ldr	r3, [r3, #0]
 801dc34:	4a0c      	ldr	r2, [pc, #48]	; (801dc68 <mem_init+0x90>)
 801dc36:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 801dc38:	2101      	movs	r1, #1
 801dc3a:	480c      	ldr	r0, [pc, #48]	; (801dc6c <mem_init+0x94>)
 801dc3c:	f008 f981 	bl	8025f42 <sys_sem_new>
 801dc40:	4603      	mov	r3, r0
 801dc42:	2b00      	cmp	r3, #0
 801dc44:	d006      	beq.n	801dc54 <mem_init+0x7c>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 801dc46:	4b0a      	ldr	r3, [pc, #40]	; (801dc70 <mem_init+0x98>)
 801dc48:	f240 221f 	movw	r2, #543	; 0x21f
 801dc4c:	4909      	ldr	r1, [pc, #36]	; (801dc74 <mem_init+0x9c>)
 801dc4e:	480a      	ldr	r0, [pc, #40]	; (801dc78 <mem_init+0xa0>)
 801dc50:	f008 fb6e 	bl	8026330 <iprintf>
  }
}
 801dc54:	bf00      	nop
 801dc56:	3708      	adds	r7, #8
 801dc58:	46bd      	mov	sp, r7
 801dc5a:	bd80      	pop	{r7, pc}
 801dc5c:	2001ca48 	.word	0x2001ca48
 801dc60:	20019674 	.word	0x20019674
 801dc64:	20019678 	.word	0x20019678
 801dc68:	20019680 	.word	0x20019680
 801dc6c:	2001967c 	.word	0x2001967c
 801dc70:	08028640 	.word	0x08028640
 801dc74:	08028714 	.word	0x08028714
 801dc78:	08028688 	.word	0x08028688

0801dc7c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 801dc7c:	b580      	push	{r7, lr}
 801dc7e:	b086      	sub	sp, #24
 801dc80:	af00      	add	r7, sp, #0
 801dc82:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 801dc84:	6878      	ldr	r0, [r7, #4]
 801dc86:	f7ff fef3 	bl	801da70 <mem_to_ptr>
 801dc8a:	4603      	mov	r3, r0
 801dc8c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 801dc8e:	687b      	ldr	r3, [r7, #4]
 801dc90:	881b      	ldrh	r3, [r3, #0]
 801dc92:	4618      	mov	r0, r3
 801dc94:	f7ff feda 	bl	801da4c <ptr_to_mem>
 801dc98:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 801dc9a:	687b      	ldr	r3, [r7, #4]
 801dc9c:	885b      	ldrh	r3, [r3, #2]
 801dc9e:	4618      	mov	r0, r3
 801dca0:	f7ff fed4 	bl	801da4c <ptr_to_mem>
 801dca4:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 801dca6:	687b      	ldr	r3, [r7, #4]
 801dca8:	881b      	ldrh	r3, [r3, #0]
 801dcaa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 801dcae:	d818      	bhi.n	801dce2 <mem_link_valid+0x66>
 801dcb0:	687b      	ldr	r3, [r7, #4]
 801dcb2:	885b      	ldrh	r3, [r3, #2]
 801dcb4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 801dcb8:	d813      	bhi.n	801dce2 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801dcba:	687b      	ldr	r3, [r7, #4]
 801dcbc:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 801dcbe:	8afa      	ldrh	r2, [r7, #22]
 801dcc0:	429a      	cmp	r2, r3
 801dcc2:	d004      	beq.n	801dcce <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801dcc4:	68fb      	ldr	r3, [r7, #12]
 801dcc6:	881b      	ldrh	r3, [r3, #0]
 801dcc8:	8afa      	ldrh	r2, [r7, #22]
 801dcca:	429a      	cmp	r2, r3
 801dccc:	d109      	bne.n	801dce2 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 801dcce:	4b08      	ldr	r3, [pc, #32]	; (801dcf0 <mem_link_valid+0x74>)
 801dcd0:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801dcd2:	693a      	ldr	r2, [r7, #16]
 801dcd4:	429a      	cmp	r2, r3
 801dcd6:	d006      	beq.n	801dce6 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 801dcd8:	693b      	ldr	r3, [r7, #16]
 801dcda:	885b      	ldrh	r3, [r3, #2]
 801dcdc:	8afa      	ldrh	r2, [r7, #22]
 801dcde:	429a      	cmp	r2, r3
 801dce0:	d001      	beq.n	801dce6 <mem_link_valid+0x6a>
    return 0;
 801dce2:	2300      	movs	r3, #0
 801dce4:	e000      	b.n	801dce8 <mem_link_valid+0x6c>
  }
  return 1;
 801dce6:	2301      	movs	r3, #1
}
 801dce8:	4618      	mov	r0, r3
 801dcea:	3718      	adds	r7, #24
 801dcec:	46bd      	mov	sp, r7
 801dcee:	bd80      	pop	{r7, pc}
 801dcf0:	20019678 	.word	0x20019678

0801dcf4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 801dcf4:	b580      	push	{r7, lr}
 801dcf6:	b088      	sub	sp, #32
 801dcf8:	af00      	add	r7, sp, #0
 801dcfa:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 801dcfc:	687b      	ldr	r3, [r7, #4]
 801dcfe:	2b00      	cmp	r3, #0
 801dd00:	d071      	beq.n	801dde6 <mem_free+0xf2>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 801dd02:	687b      	ldr	r3, [r7, #4]
 801dd04:	f003 0303 	and.w	r3, r3, #3
 801dd08:	2b00      	cmp	r3, #0
 801dd0a:	d00d      	beq.n	801dd28 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 801dd0c:	4b38      	ldr	r3, [pc, #224]	; (801ddf0 <mem_free+0xfc>)
 801dd0e:	f240 2273 	movw	r2, #627	; 0x273
 801dd12:	4938      	ldr	r1, [pc, #224]	; (801ddf4 <mem_free+0x100>)
 801dd14:	4838      	ldr	r0, [pc, #224]	; (801ddf8 <mem_free+0x104>)
 801dd16:	f008 fb0b 	bl	8026330 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801dd1a:	f008 f9ad 	bl	8026078 <sys_arch_protect>
 801dd1e:	61f8      	str	r0, [r7, #28]
 801dd20:	69f8      	ldr	r0, [r7, #28]
 801dd22:	f008 f9b7 	bl	8026094 <sys_arch_unprotect>
    return;
 801dd26:	e05f      	b.n	801dde8 <mem_free+0xf4>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 801dd28:	687b      	ldr	r3, [r7, #4]
 801dd2a:	3b08      	subs	r3, #8
 801dd2c:	61bb      	str	r3, [r7, #24]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 801dd2e:	4b33      	ldr	r3, [pc, #204]	; (801ddfc <mem_free+0x108>)
 801dd30:	681b      	ldr	r3, [r3, #0]
 801dd32:	69ba      	ldr	r2, [r7, #24]
 801dd34:	429a      	cmp	r2, r3
 801dd36:	d306      	bcc.n	801dd46 <mem_free+0x52>
 801dd38:	687b      	ldr	r3, [r7, #4]
 801dd3a:	f103 020c 	add.w	r2, r3, #12
 801dd3e:	4b30      	ldr	r3, [pc, #192]	; (801de00 <mem_free+0x10c>)
 801dd40:	681b      	ldr	r3, [r3, #0]
 801dd42:	429a      	cmp	r2, r3
 801dd44:	d90d      	bls.n	801dd62 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 801dd46:	4b2a      	ldr	r3, [pc, #168]	; (801ddf0 <mem_free+0xfc>)
 801dd48:	f240 227f 	movw	r2, #639	; 0x27f
 801dd4c:	492d      	ldr	r1, [pc, #180]	; (801de04 <mem_free+0x110>)
 801dd4e:	482a      	ldr	r0, [pc, #168]	; (801ddf8 <mem_free+0x104>)
 801dd50:	f008 faee 	bl	8026330 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801dd54:	f008 f990 	bl	8026078 <sys_arch_protect>
 801dd58:	60f8      	str	r0, [r7, #12]
 801dd5a:	68f8      	ldr	r0, [r7, #12]
 801dd5c:	f008 f99a 	bl	8026094 <sys_arch_unprotect>
    return;
 801dd60:	e042      	b.n	801dde8 <mem_free+0xf4>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 801dd62:	2100      	movs	r1, #0
 801dd64:	4828      	ldr	r0, [pc, #160]	; (801de08 <mem_free+0x114>)
 801dd66:	f008 f914 	bl	8025f92 <sys_arch_sem_wait>
  /* mem has to be in a used state */
  if (!mem->used) {
 801dd6a:	69bb      	ldr	r3, [r7, #24]
 801dd6c:	791b      	ldrb	r3, [r3, #4]
 801dd6e:	2b00      	cmp	r3, #0
 801dd70:	d110      	bne.n	801dd94 <mem_free+0xa0>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 801dd72:	4b1f      	ldr	r3, [pc, #124]	; (801ddf0 <mem_free+0xfc>)
 801dd74:	f44f 7223 	mov.w	r2, #652	; 0x28c
 801dd78:	4924      	ldr	r1, [pc, #144]	; (801de0c <mem_free+0x118>)
 801dd7a:	481f      	ldr	r0, [pc, #124]	; (801ddf8 <mem_free+0x104>)
 801dd7c:	f008 fad8 	bl	8026330 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 801dd80:	4821      	ldr	r0, [pc, #132]	; (801de08 <mem_free+0x114>)
 801dd82:	f008 f937 	bl	8025ff4 <sys_sem_signal>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801dd86:	f008 f977 	bl	8026078 <sys_arch_protect>
 801dd8a:	6178      	str	r0, [r7, #20]
 801dd8c:	6978      	ldr	r0, [r7, #20]
 801dd8e:	f008 f981 	bl	8026094 <sys_arch_unprotect>
    return;
 801dd92:	e029      	b.n	801dde8 <mem_free+0xf4>
  }

  if (!mem_link_valid(mem)) {
 801dd94:	69b8      	ldr	r0, [r7, #24]
 801dd96:	f7ff ff71 	bl	801dc7c <mem_link_valid>
 801dd9a:	4603      	mov	r3, r0
 801dd9c:	2b00      	cmp	r3, #0
 801dd9e:	d110      	bne.n	801ddc2 <mem_free+0xce>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 801dda0:	4b13      	ldr	r3, [pc, #76]	; (801ddf0 <mem_free+0xfc>)
 801dda2:	f240 2295 	movw	r2, #661	; 0x295
 801dda6:	491a      	ldr	r1, [pc, #104]	; (801de10 <mem_free+0x11c>)
 801dda8:	4813      	ldr	r0, [pc, #76]	; (801ddf8 <mem_free+0x104>)
 801ddaa:	f008 fac1 	bl	8026330 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 801ddae:	4816      	ldr	r0, [pc, #88]	; (801de08 <mem_free+0x114>)
 801ddb0:	f008 f920 	bl	8025ff4 <sys_sem_signal>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801ddb4:	f008 f960 	bl	8026078 <sys_arch_protect>
 801ddb8:	6138      	str	r0, [r7, #16]
 801ddba:	6938      	ldr	r0, [r7, #16]
 801ddbc:	f008 f96a 	bl	8026094 <sys_arch_unprotect>
    return;
 801ddc0:	e012      	b.n	801dde8 <mem_free+0xf4>
  }

  /* mem is now unused. */
  mem->used = 0;
 801ddc2:	69bb      	ldr	r3, [r7, #24]
 801ddc4:	2200      	movs	r2, #0
 801ddc6:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 801ddc8:	4b12      	ldr	r3, [pc, #72]	; (801de14 <mem_free+0x120>)
 801ddca:	681b      	ldr	r3, [r3, #0]
 801ddcc:	69ba      	ldr	r2, [r7, #24]
 801ddce:	429a      	cmp	r2, r3
 801ddd0:	d202      	bcs.n	801ddd8 <mem_free+0xe4>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 801ddd2:	4a10      	ldr	r2, [pc, #64]	; (801de14 <mem_free+0x120>)
 801ddd4:	69bb      	ldr	r3, [r7, #24]
 801ddd6:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 801ddd8:	69b8      	ldr	r0, [r7, #24]
 801ddda:	f7ff fe5b 	bl	801da94 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 801ddde:	480a      	ldr	r0, [pc, #40]	; (801de08 <mem_free+0x114>)
 801dde0:	f008 f908 	bl	8025ff4 <sys_sem_signal>
 801dde4:	e000      	b.n	801dde8 <mem_free+0xf4>
    return;
 801dde6:	bf00      	nop
}
 801dde8:	3720      	adds	r7, #32
 801ddea:	46bd      	mov	sp, r7
 801ddec:	bd80      	pop	{r7, pc}
 801ddee:	bf00      	nop
 801ddf0:	08028640 	.word	0x08028640
 801ddf4:	08028730 	.word	0x08028730
 801ddf8:	08028688 	.word	0x08028688
 801ddfc:	20019674 	.word	0x20019674
 801de00:	20019678 	.word	0x20019678
 801de04:	08028754 	.word	0x08028754
 801de08:	2001967c 	.word	0x2001967c
 801de0c:	08028770 	.word	0x08028770
 801de10:	08028798 	.word	0x08028798
 801de14:	20019680 	.word	0x20019680

0801de18 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 801de18:	b580      	push	{r7, lr}
 801de1a:	b088      	sub	sp, #32
 801de1c:	af00      	add	r7, sp, #0
 801de1e:	6078      	str	r0, [r7, #4]
 801de20:	460b      	mov	r3, r1
 801de22:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 801de24:	887b      	ldrh	r3, [r7, #2]
 801de26:	3303      	adds	r3, #3
 801de28:	b29b      	uxth	r3, r3
 801de2a:	f023 0303 	bic.w	r3, r3, #3
 801de2e:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 801de30:	8bfb      	ldrh	r3, [r7, #30]
 801de32:	2b0b      	cmp	r3, #11
 801de34:	d801      	bhi.n	801de3a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 801de36:	230c      	movs	r3, #12
 801de38:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 801de3a:	8bfb      	ldrh	r3, [r7, #30]
 801de3c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 801de40:	d803      	bhi.n	801de4a <mem_trim+0x32>
 801de42:	8bfa      	ldrh	r2, [r7, #30]
 801de44:	887b      	ldrh	r3, [r7, #2]
 801de46:	429a      	cmp	r2, r3
 801de48:	d201      	bcs.n	801de4e <mem_trim+0x36>
    return NULL;
 801de4a:	2300      	movs	r3, #0
 801de4c:	e0d9      	b.n	801e002 <mem_trim+0x1ea>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 801de4e:	4b6f      	ldr	r3, [pc, #444]	; (801e00c <mem_trim+0x1f4>)
 801de50:	681b      	ldr	r3, [r3, #0]
 801de52:	687a      	ldr	r2, [r7, #4]
 801de54:	429a      	cmp	r2, r3
 801de56:	d304      	bcc.n	801de62 <mem_trim+0x4a>
 801de58:	4b6d      	ldr	r3, [pc, #436]	; (801e010 <mem_trim+0x1f8>)
 801de5a:	681b      	ldr	r3, [r3, #0]
 801de5c:	687a      	ldr	r2, [r7, #4]
 801de5e:	429a      	cmp	r2, r3
 801de60:	d306      	bcc.n	801de70 <mem_trim+0x58>
 801de62:	4b6c      	ldr	r3, [pc, #432]	; (801e014 <mem_trim+0x1fc>)
 801de64:	f240 22d2 	movw	r2, #722	; 0x2d2
 801de68:	496b      	ldr	r1, [pc, #428]	; (801e018 <mem_trim+0x200>)
 801de6a:	486c      	ldr	r0, [pc, #432]	; (801e01c <mem_trim+0x204>)
 801de6c:	f008 fa60 	bl	8026330 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 801de70:	4b66      	ldr	r3, [pc, #408]	; (801e00c <mem_trim+0x1f4>)
 801de72:	681b      	ldr	r3, [r3, #0]
 801de74:	687a      	ldr	r2, [r7, #4]
 801de76:	429a      	cmp	r2, r3
 801de78:	d304      	bcc.n	801de84 <mem_trim+0x6c>
 801de7a:	4b65      	ldr	r3, [pc, #404]	; (801e010 <mem_trim+0x1f8>)
 801de7c:	681b      	ldr	r3, [r3, #0]
 801de7e:	687a      	ldr	r2, [r7, #4]
 801de80:	429a      	cmp	r2, r3
 801de82:	d307      	bcc.n	801de94 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801de84:	f008 f8f8 	bl	8026078 <sys_arch_protect>
 801de88:	60b8      	str	r0, [r7, #8]
 801de8a:	68b8      	ldr	r0, [r7, #8]
 801de8c:	f008 f902 	bl	8026094 <sys_arch_unprotect>
    return rmem;
 801de90:	687b      	ldr	r3, [r7, #4]
 801de92:	e0b6      	b.n	801e002 <mem_trim+0x1ea>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 801de94:	687b      	ldr	r3, [r7, #4]
 801de96:	3b08      	subs	r3, #8
 801de98:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 801de9a:	69b8      	ldr	r0, [r7, #24]
 801de9c:	f7ff fde8 	bl	801da70 <mem_to_ptr>
 801dea0:	4603      	mov	r3, r0
 801dea2:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 801dea4:	69bb      	ldr	r3, [r7, #24]
 801dea6:	881a      	ldrh	r2, [r3, #0]
 801dea8:	8afb      	ldrh	r3, [r7, #22]
 801deaa:	1ad3      	subs	r3, r2, r3
 801deac:	b29b      	uxth	r3, r3
 801deae:	3b08      	subs	r3, #8
 801deb0:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 801deb2:	8bfa      	ldrh	r2, [r7, #30]
 801deb4:	8abb      	ldrh	r3, [r7, #20]
 801deb6:	429a      	cmp	r2, r3
 801deb8:	d906      	bls.n	801dec8 <mem_trim+0xb0>
 801deba:	4b56      	ldr	r3, [pc, #344]	; (801e014 <mem_trim+0x1fc>)
 801debc:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 801dec0:	4957      	ldr	r1, [pc, #348]	; (801e020 <mem_trim+0x208>)
 801dec2:	4856      	ldr	r0, [pc, #344]	; (801e01c <mem_trim+0x204>)
 801dec4:	f008 fa34 	bl	8026330 <iprintf>
  if (newsize > size) {
 801dec8:	8bfa      	ldrh	r2, [r7, #30]
 801deca:	8abb      	ldrh	r3, [r7, #20]
 801decc:	429a      	cmp	r2, r3
 801dece:	d901      	bls.n	801ded4 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 801ded0:	2300      	movs	r3, #0
 801ded2:	e096      	b.n	801e002 <mem_trim+0x1ea>
  }
  if (newsize == size) {
 801ded4:	8bfa      	ldrh	r2, [r7, #30]
 801ded6:	8abb      	ldrh	r3, [r7, #20]
 801ded8:	429a      	cmp	r2, r3
 801deda:	d101      	bne.n	801dee0 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 801dedc:	687b      	ldr	r3, [r7, #4]
 801dede:	e090      	b.n	801e002 <mem_trim+0x1ea>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 801dee0:	2100      	movs	r1, #0
 801dee2:	4850      	ldr	r0, [pc, #320]	; (801e024 <mem_trim+0x20c>)
 801dee4:	f008 f855 	bl	8025f92 <sys_arch_sem_wait>

  mem2 = ptr_to_mem(mem->next);
 801dee8:	69bb      	ldr	r3, [r7, #24]
 801deea:	881b      	ldrh	r3, [r3, #0]
 801deec:	4618      	mov	r0, r3
 801deee:	f7ff fdad 	bl	801da4c <ptr_to_mem>
 801def2:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 801def4:	693b      	ldr	r3, [r7, #16]
 801def6:	791b      	ldrb	r3, [r3, #4]
 801def8:	2b00      	cmp	r3, #0
 801defa:	d13f      	bne.n	801df7c <mem_trim+0x164>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801defc:	69bb      	ldr	r3, [r7, #24]
 801defe:	881b      	ldrh	r3, [r3, #0]
 801df00:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 801df04:	d106      	bne.n	801df14 <mem_trim+0xfc>
 801df06:	4b43      	ldr	r3, [pc, #268]	; (801e014 <mem_trim+0x1fc>)
 801df08:	f240 22f5 	movw	r2, #757	; 0x2f5
 801df0c:	4946      	ldr	r1, [pc, #280]	; (801e028 <mem_trim+0x210>)
 801df0e:	4843      	ldr	r0, [pc, #268]	; (801e01c <mem_trim+0x204>)
 801df10:	f008 fa0e 	bl	8026330 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 801df14:	693b      	ldr	r3, [r7, #16]
 801df16:	881b      	ldrh	r3, [r3, #0]
 801df18:	81fb      	strh	r3, [r7, #14]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 801df1a:	8afa      	ldrh	r2, [r7, #22]
 801df1c:	8bfb      	ldrh	r3, [r7, #30]
 801df1e:	4413      	add	r3, r2
 801df20:	b29b      	uxth	r3, r3
 801df22:	3308      	adds	r3, #8
 801df24:	81bb      	strh	r3, [r7, #12]
    if (lfree == mem2) {
 801df26:	4b41      	ldr	r3, [pc, #260]	; (801e02c <mem_trim+0x214>)
 801df28:	681a      	ldr	r2, [r3, #0]
 801df2a:	693b      	ldr	r3, [r7, #16]
 801df2c:	429a      	cmp	r2, r3
 801df2e:	d106      	bne.n	801df3e <mem_trim+0x126>
      lfree = ptr_to_mem(ptr2);
 801df30:	89bb      	ldrh	r3, [r7, #12]
 801df32:	4618      	mov	r0, r3
 801df34:	f7ff fd8a 	bl	801da4c <ptr_to_mem>
 801df38:	4602      	mov	r2, r0
 801df3a:	4b3c      	ldr	r3, [pc, #240]	; (801e02c <mem_trim+0x214>)
 801df3c:	601a      	str	r2, [r3, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 801df3e:	89bb      	ldrh	r3, [r7, #12]
 801df40:	4618      	mov	r0, r3
 801df42:	f7ff fd83 	bl	801da4c <ptr_to_mem>
 801df46:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 801df48:	693b      	ldr	r3, [r7, #16]
 801df4a:	2200      	movs	r2, #0
 801df4c:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 801df4e:	693b      	ldr	r3, [r7, #16]
 801df50:	89fa      	ldrh	r2, [r7, #14]
 801df52:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 801df54:	693b      	ldr	r3, [r7, #16]
 801df56:	8afa      	ldrh	r2, [r7, #22]
 801df58:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 801df5a:	69bb      	ldr	r3, [r7, #24]
 801df5c:	89ba      	ldrh	r2, [r7, #12]
 801df5e:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801df60:	693b      	ldr	r3, [r7, #16]
 801df62:	881b      	ldrh	r3, [r3, #0]
 801df64:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 801df68:	d047      	beq.n	801dffa <mem_trim+0x1e2>
      ptr_to_mem(mem2->next)->prev = ptr2;
 801df6a:	693b      	ldr	r3, [r7, #16]
 801df6c:	881b      	ldrh	r3, [r3, #0]
 801df6e:	4618      	mov	r0, r3
 801df70:	f7ff fd6c 	bl	801da4c <ptr_to_mem>
 801df74:	4602      	mov	r2, r0
 801df76:	89bb      	ldrh	r3, [r7, #12]
 801df78:	8053      	strh	r3, [r2, #2]
 801df7a:	e03e      	b.n	801dffa <mem_trim+0x1e2>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 801df7c:	8bfb      	ldrh	r3, [r7, #30]
 801df7e:	f103 0214 	add.w	r2, r3, #20
 801df82:	8abb      	ldrh	r3, [r7, #20]
 801df84:	429a      	cmp	r2, r3
 801df86:	d838      	bhi.n	801dffa <mem_trim+0x1e2>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 801df88:	8afa      	ldrh	r2, [r7, #22]
 801df8a:	8bfb      	ldrh	r3, [r7, #30]
 801df8c:	4413      	add	r3, r2
 801df8e:	b29b      	uxth	r3, r3
 801df90:	3308      	adds	r3, #8
 801df92:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801df94:	69bb      	ldr	r3, [r7, #24]
 801df96:	881b      	ldrh	r3, [r3, #0]
 801df98:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 801df9c:	d106      	bne.n	801dfac <mem_trim+0x194>
 801df9e:	4b1d      	ldr	r3, [pc, #116]	; (801e014 <mem_trim+0x1fc>)
 801dfa0:	f240 3216 	movw	r2, #790	; 0x316
 801dfa4:	4920      	ldr	r1, [pc, #128]	; (801e028 <mem_trim+0x210>)
 801dfa6:	481d      	ldr	r0, [pc, #116]	; (801e01c <mem_trim+0x204>)
 801dfa8:	f008 f9c2 	bl	8026330 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 801dfac:	89bb      	ldrh	r3, [r7, #12]
 801dfae:	4618      	mov	r0, r3
 801dfb0:	f7ff fd4c 	bl	801da4c <ptr_to_mem>
 801dfb4:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 801dfb6:	4b1d      	ldr	r3, [pc, #116]	; (801e02c <mem_trim+0x214>)
 801dfb8:	681b      	ldr	r3, [r3, #0]
 801dfba:	693a      	ldr	r2, [r7, #16]
 801dfbc:	429a      	cmp	r2, r3
 801dfbe:	d202      	bcs.n	801dfc6 <mem_trim+0x1ae>
      lfree = mem2;
 801dfc0:	4a1a      	ldr	r2, [pc, #104]	; (801e02c <mem_trim+0x214>)
 801dfc2:	693b      	ldr	r3, [r7, #16]
 801dfc4:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 801dfc6:	693b      	ldr	r3, [r7, #16]
 801dfc8:	2200      	movs	r2, #0
 801dfca:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 801dfcc:	69bb      	ldr	r3, [r7, #24]
 801dfce:	881a      	ldrh	r2, [r3, #0]
 801dfd0:	693b      	ldr	r3, [r7, #16]
 801dfd2:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 801dfd4:	693b      	ldr	r3, [r7, #16]
 801dfd6:	8afa      	ldrh	r2, [r7, #22]
 801dfd8:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 801dfda:	69bb      	ldr	r3, [r7, #24]
 801dfdc:	89ba      	ldrh	r2, [r7, #12]
 801dfde:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801dfe0:	693b      	ldr	r3, [r7, #16]
 801dfe2:	881b      	ldrh	r3, [r3, #0]
 801dfe4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 801dfe8:	d007      	beq.n	801dffa <mem_trim+0x1e2>
      ptr_to_mem(mem2->next)->prev = ptr2;
 801dfea:	693b      	ldr	r3, [r7, #16]
 801dfec:	881b      	ldrh	r3, [r3, #0]
 801dfee:	4618      	mov	r0, r3
 801dff0:	f7ff fd2c 	bl	801da4c <ptr_to_mem>
 801dff4:	4602      	mov	r2, r0
 801dff6:	89bb      	ldrh	r3, [r7, #12]
 801dff8:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 801dffa:	480a      	ldr	r0, [pc, #40]	; (801e024 <mem_trim+0x20c>)
 801dffc:	f007 fffa 	bl	8025ff4 <sys_sem_signal>
  return rmem;
 801e000:	687b      	ldr	r3, [r7, #4]
}
 801e002:	4618      	mov	r0, r3
 801e004:	3720      	adds	r7, #32
 801e006:	46bd      	mov	sp, r7
 801e008:	bd80      	pop	{r7, pc}
 801e00a:	bf00      	nop
 801e00c:	20019674 	.word	0x20019674
 801e010:	20019678 	.word	0x20019678
 801e014:	08028640 	.word	0x08028640
 801e018:	080287cc 	.word	0x080287cc
 801e01c:	08028688 	.word	0x08028688
 801e020:	080287e4 	.word	0x080287e4
 801e024:	2001967c 	.word	0x2001967c
 801e028:	08028804 	.word	0x08028804
 801e02c:	20019680 	.word	0x20019680

0801e030 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 801e030:	b580      	push	{r7, lr}
 801e032:	b088      	sub	sp, #32
 801e034:	af00      	add	r7, sp, #0
 801e036:	4603      	mov	r3, r0
 801e038:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 801e03a:	88fb      	ldrh	r3, [r7, #6]
 801e03c:	2b00      	cmp	r3, #0
 801e03e:	d101      	bne.n	801e044 <mem_malloc+0x14>
    return NULL;
 801e040:	2300      	movs	r3, #0
 801e042:	e0e3      	b.n	801e20c <mem_malloc+0x1dc>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 801e044:	88fb      	ldrh	r3, [r7, #6]
 801e046:	3303      	adds	r3, #3
 801e048:	b29b      	uxth	r3, r3
 801e04a:	f023 0303 	bic.w	r3, r3, #3
 801e04e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 801e050:	8bbb      	ldrh	r3, [r7, #28]
 801e052:	2b0b      	cmp	r3, #11
 801e054:	d801      	bhi.n	801e05a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 801e056:	230c      	movs	r3, #12
 801e058:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 801e05a:	8bbb      	ldrh	r3, [r7, #28]
 801e05c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 801e060:	d803      	bhi.n	801e06a <mem_malloc+0x3a>
 801e062:	8bba      	ldrh	r2, [r7, #28]
 801e064:	88fb      	ldrh	r3, [r7, #6]
 801e066:	429a      	cmp	r2, r3
 801e068:	d201      	bcs.n	801e06e <mem_malloc+0x3e>
    return NULL;
 801e06a:	2300      	movs	r3, #0
 801e06c:	e0ce      	b.n	801e20c <mem_malloc+0x1dc>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 801e06e:	2100      	movs	r1, #0
 801e070:	4868      	ldr	r0, [pc, #416]	; (801e214 <mem_malloc+0x1e4>)
 801e072:	f007 ff8e 	bl	8025f92 <sys_arch_sem_wait>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 801e076:	4b68      	ldr	r3, [pc, #416]	; (801e218 <mem_malloc+0x1e8>)
 801e078:	681b      	ldr	r3, [r3, #0]
 801e07a:	4618      	mov	r0, r3
 801e07c:	f7ff fcf8 	bl	801da70 <mem_to_ptr>
 801e080:	4603      	mov	r3, r0
 801e082:	83fb      	strh	r3, [r7, #30]
 801e084:	e0b7      	b.n	801e1f6 <mem_malloc+0x1c6>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 801e086:	8bfb      	ldrh	r3, [r7, #30]
 801e088:	4618      	mov	r0, r3
 801e08a:	f7ff fcdf 	bl	801da4c <ptr_to_mem>
 801e08e:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 801e090:	697b      	ldr	r3, [r7, #20]
 801e092:	791b      	ldrb	r3, [r3, #4]
 801e094:	2b00      	cmp	r3, #0
 801e096:	f040 80a7 	bne.w	801e1e8 <mem_malloc+0x1b8>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 801e09a:	697b      	ldr	r3, [r7, #20]
 801e09c:	881b      	ldrh	r3, [r3, #0]
 801e09e:	461a      	mov	r2, r3
 801e0a0:	8bfb      	ldrh	r3, [r7, #30]
 801e0a2:	1ad3      	subs	r3, r2, r3
 801e0a4:	f1a3 0208 	sub.w	r2, r3, #8
 801e0a8:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 801e0aa:	429a      	cmp	r2, r3
 801e0ac:	f0c0 809c 	bcc.w	801e1e8 <mem_malloc+0x1b8>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 801e0b0:	697b      	ldr	r3, [r7, #20]
 801e0b2:	881b      	ldrh	r3, [r3, #0]
 801e0b4:	461a      	mov	r2, r3
 801e0b6:	8bfb      	ldrh	r3, [r7, #30]
 801e0b8:	1ad3      	subs	r3, r2, r3
 801e0ba:	f1a3 0208 	sub.w	r2, r3, #8
 801e0be:	8bbb      	ldrh	r3, [r7, #28]
 801e0c0:	3314      	adds	r3, #20
 801e0c2:	429a      	cmp	r2, r3
 801e0c4:	d333      	bcc.n	801e12e <mem_malloc+0xfe>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 801e0c6:	8bfa      	ldrh	r2, [r7, #30]
 801e0c8:	8bbb      	ldrh	r3, [r7, #28]
 801e0ca:	4413      	add	r3, r2
 801e0cc:	b29b      	uxth	r3, r3
 801e0ce:	3308      	adds	r3, #8
 801e0d0:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 801e0d2:	8a7b      	ldrh	r3, [r7, #18]
 801e0d4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 801e0d8:	d106      	bne.n	801e0e8 <mem_malloc+0xb8>
 801e0da:	4b50      	ldr	r3, [pc, #320]	; (801e21c <mem_malloc+0x1ec>)
 801e0dc:	f240 3287 	movw	r2, #903	; 0x387
 801e0e0:	494f      	ldr	r1, [pc, #316]	; (801e220 <mem_malloc+0x1f0>)
 801e0e2:	4850      	ldr	r0, [pc, #320]	; (801e224 <mem_malloc+0x1f4>)
 801e0e4:	f008 f924 	bl	8026330 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 801e0e8:	8a7b      	ldrh	r3, [r7, #18]
 801e0ea:	4618      	mov	r0, r3
 801e0ec:	f7ff fcae 	bl	801da4c <ptr_to_mem>
 801e0f0:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 801e0f2:	68fb      	ldr	r3, [r7, #12]
 801e0f4:	2200      	movs	r2, #0
 801e0f6:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 801e0f8:	697b      	ldr	r3, [r7, #20]
 801e0fa:	881a      	ldrh	r2, [r3, #0]
 801e0fc:	68fb      	ldr	r3, [r7, #12]
 801e0fe:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 801e100:	68fb      	ldr	r3, [r7, #12]
 801e102:	8bfa      	ldrh	r2, [r7, #30]
 801e104:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 801e106:	697b      	ldr	r3, [r7, #20]
 801e108:	8a7a      	ldrh	r2, [r7, #18]
 801e10a:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 801e10c:	697b      	ldr	r3, [r7, #20]
 801e10e:	2201      	movs	r2, #1
 801e110:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 801e112:	68fb      	ldr	r3, [r7, #12]
 801e114:	881b      	ldrh	r3, [r3, #0]
 801e116:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 801e11a:	d00b      	beq.n	801e134 <mem_malloc+0x104>
            ptr_to_mem(mem2->next)->prev = ptr2;
 801e11c:	68fb      	ldr	r3, [r7, #12]
 801e11e:	881b      	ldrh	r3, [r3, #0]
 801e120:	4618      	mov	r0, r3
 801e122:	f7ff fc93 	bl	801da4c <ptr_to_mem>
 801e126:	4602      	mov	r2, r0
 801e128:	8a7b      	ldrh	r3, [r7, #18]
 801e12a:	8053      	strh	r3, [r2, #2]
 801e12c:	e002      	b.n	801e134 <mem_malloc+0x104>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 801e12e:	697b      	ldr	r3, [r7, #20]
 801e130:	2201      	movs	r2, #1
 801e132:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 801e134:	4b38      	ldr	r3, [pc, #224]	; (801e218 <mem_malloc+0x1e8>)
 801e136:	681b      	ldr	r3, [r3, #0]
 801e138:	697a      	ldr	r2, [r7, #20]
 801e13a:	429a      	cmp	r2, r3
 801e13c:	d127      	bne.n	801e18e <mem_malloc+0x15e>
          struct mem *cur = lfree;
 801e13e:	4b36      	ldr	r3, [pc, #216]	; (801e218 <mem_malloc+0x1e8>)
 801e140:	681b      	ldr	r3, [r3, #0]
 801e142:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 801e144:	e005      	b.n	801e152 <mem_malloc+0x122>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 801e146:	69bb      	ldr	r3, [r7, #24]
 801e148:	881b      	ldrh	r3, [r3, #0]
 801e14a:	4618      	mov	r0, r3
 801e14c:	f7ff fc7e 	bl	801da4c <ptr_to_mem>
 801e150:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 801e152:	69bb      	ldr	r3, [r7, #24]
 801e154:	791b      	ldrb	r3, [r3, #4]
 801e156:	2b00      	cmp	r3, #0
 801e158:	d004      	beq.n	801e164 <mem_malloc+0x134>
 801e15a:	4b33      	ldr	r3, [pc, #204]	; (801e228 <mem_malloc+0x1f8>)
 801e15c:	681b      	ldr	r3, [r3, #0]
 801e15e:	69ba      	ldr	r2, [r7, #24]
 801e160:	429a      	cmp	r2, r3
 801e162:	d1f0      	bne.n	801e146 <mem_malloc+0x116>
          }
          lfree = cur;
 801e164:	4a2c      	ldr	r2, [pc, #176]	; (801e218 <mem_malloc+0x1e8>)
 801e166:	69bb      	ldr	r3, [r7, #24]
 801e168:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 801e16a:	4b2b      	ldr	r3, [pc, #172]	; (801e218 <mem_malloc+0x1e8>)
 801e16c:	681a      	ldr	r2, [r3, #0]
 801e16e:	4b2e      	ldr	r3, [pc, #184]	; (801e228 <mem_malloc+0x1f8>)
 801e170:	681b      	ldr	r3, [r3, #0]
 801e172:	429a      	cmp	r2, r3
 801e174:	d00b      	beq.n	801e18e <mem_malloc+0x15e>
 801e176:	4b28      	ldr	r3, [pc, #160]	; (801e218 <mem_malloc+0x1e8>)
 801e178:	681b      	ldr	r3, [r3, #0]
 801e17a:	791b      	ldrb	r3, [r3, #4]
 801e17c:	2b00      	cmp	r3, #0
 801e17e:	d006      	beq.n	801e18e <mem_malloc+0x15e>
 801e180:	4b26      	ldr	r3, [pc, #152]	; (801e21c <mem_malloc+0x1ec>)
 801e182:	f240 32b5 	movw	r2, #949	; 0x3b5
 801e186:	4929      	ldr	r1, [pc, #164]	; (801e22c <mem_malloc+0x1fc>)
 801e188:	4826      	ldr	r0, [pc, #152]	; (801e224 <mem_malloc+0x1f4>)
 801e18a:	f008 f8d1 	bl	8026330 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 801e18e:	4821      	ldr	r0, [pc, #132]	; (801e214 <mem_malloc+0x1e4>)
 801e190:	f007 ff30 	bl	8025ff4 <sys_sem_signal>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 801e194:	8bba      	ldrh	r2, [r7, #28]
 801e196:	697b      	ldr	r3, [r7, #20]
 801e198:	4413      	add	r3, r2
 801e19a:	3308      	adds	r3, #8
 801e19c:	4a22      	ldr	r2, [pc, #136]	; (801e228 <mem_malloc+0x1f8>)
 801e19e:	6812      	ldr	r2, [r2, #0]
 801e1a0:	4293      	cmp	r3, r2
 801e1a2:	d906      	bls.n	801e1b2 <mem_malloc+0x182>
 801e1a4:	4b1d      	ldr	r3, [pc, #116]	; (801e21c <mem_malloc+0x1ec>)
 801e1a6:	f240 32ba 	movw	r2, #954	; 0x3ba
 801e1aa:	4921      	ldr	r1, [pc, #132]	; (801e230 <mem_malloc+0x200>)
 801e1ac:	481d      	ldr	r0, [pc, #116]	; (801e224 <mem_malloc+0x1f4>)
 801e1ae:	f008 f8bf 	bl	8026330 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 801e1b2:	697b      	ldr	r3, [r7, #20]
 801e1b4:	f003 0303 	and.w	r3, r3, #3
 801e1b8:	2b00      	cmp	r3, #0
 801e1ba:	d006      	beq.n	801e1ca <mem_malloc+0x19a>
 801e1bc:	4b17      	ldr	r3, [pc, #92]	; (801e21c <mem_malloc+0x1ec>)
 801e1be:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 801e1c2:	491c      	ldr	r1, [pc, #112]	; (801e234 <mem_malloc+0x204>)
 801e1c4:	4817      	ldr	r0, [pc, #92]	; (801e224 <mem_malloc+0x1f4>)
 801e1c6:	f008 f8b3 	bl	8026330 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 801e1ca:	697b      	ldr	r3, [r7, #20]
 801e1cc:	f003 0303 	and.w	r3, r3, #3
 801e1d0:	2b00      	cmp	r3, #0
 801e1d2:	d006      	beq.n	801e1e2 <mem_malloc+0x1b2>
 801e1d4:	4b11      	ldr	r3, [pc, #68]	; (801e21c <mem_malloc+0x1ec>)
 801e1d6:	f240 32be 	movw	r2, #958	; 0x3be
 801e1da:	4917      	ldr	r1, [pc, #92]	; (801e238 <mem_malloc+0x208>)
 801e1dc:	4811      	ldr	r0, [pc, #68]	; (801e224 <mem_malloc+0x1f4>)
 801e1de:	f008 f8a7 	bl	8026330 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 801e1e2:	697b      	ldr	r3, [r7, #20]
 801e1e4:	3308      	adds	r3, #8
 801e1e6:	e011      	b.n	801e20c <mem_malloc+0x1dc>
         ptr = ptr_to_mem(ptr)->next) {
 801e1e8:	8bfb      	ldrh	r3, [r7, #30]
 801e1ea:	4618      	mov	r0, r3
 801e1ec:	f7ff fc2e 	bl	801da4c <ptr_to_mem>
 801e1f0:	4603      	mov	r3, r0
 801e1f2:	881b      	ldrh	r3, [r3, #0]
 801e1f4:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 801e1f6:	8bfa      	ldrh	r2, [r7, #30]
 801e1f8:	8bbb      	ldrh	r3, [r7, #28]
 801e1fa:	f5c3 53a0 	rsb	r3, r3, #5120	; 0x1400
 801e1fe:	429a      	cmp	r2, r3
 801e200:	f4ff af41 	bcc.w	801e086 <mem_malloc+0x56>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 801e204:	4803      	ldr	r0, [pc, #12]	; (801e214 <mem_malloc+0x1e4>)
 801e206:	f007 fef5 	bl	8025ff4 <sys_sem_signal>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 801e20a:	2300      	movs	r3, #0
}
 801e20c:	4618      	mov	r0, r3
 801e20e:	3720      	adds	r7, #32
 801e210:	46bd      	mov	sp, r7
 801e212:	bd80      	pop	{r7, pc}
 801e214:	2001967c 	.word	0x2001967c
 801e218:	20019680 	.word	0x20019680
 801e21c:	08028640 	.word	0x08028640
 801e220:	08028804 	.word	0x08028804
 801e224:	08028688 	.word	0x08028688
 801e228:	20019678 	.word	0x20019678
 801e22c:	08028818 	.word	0x08028818
 801e230:	08028834 	.word	0x08028834
 801e234:	08028864 	.word	0x08028864
 801e238:	08028894 	.word	0x08028894

0801e23c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 801e23c:	b480      	push	{r7}
 801e23e:	b085      	sub	sp, #20
 801e240:	af00      	add	r7, sp, #0
 801e242:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 801e244:	687b      	ldr	r3, [r7, #4]
 801e246:	689b      	ldr	r3, [r3, #8]
 801e248:	2200      	movs	r2, #0
 801e24a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 801e24c:	687b      	ldr	r3, [r7, #4]
 801e24e:	685b      	ldr	r3, [r3, #4]
 801e250:	3303      	adds	r3, #3
 801e252:	f023 0303 	bic.w	r3, r3, #3
 801e256:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 801e258:	2300      	movs	r3, #0
 801e25a:	60fb      	str	r3, [r7, #12]
 801e25c:	e011      	b.n	801e282 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 801e25e:	687b      	ldr	r3, [r7, #4]
 801e260:	689b      	ldr	r3, [r3, #8]
 801e262:	681a      	ldr	r2, [r3, #0]
 801e264:	68bb      	ldr	r3, [r7, #8]
 801e266:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 801e268:	687b      	ldr	r3, [r7, #4]
 801e26a:	689b      	ldr	r3, [r3, #8]
 801e26c:	68ba      	ldr	r2, [r7, #8]
 801e26e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 801e270:	687b      	ldr	r3, [r7, #4]
 801e272:	881b      	ldrh	r3, [r3, #0]
 801e274:	461a      	mov	r2, r3
 801e276:	68bb      	ldr	r3, [r7, #8]
 801e278:	4413      	add	r3, r2
 801e27a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 801e27c:	68fb      	ldr	r3, [r7, #12]
 801e27e:	3301      	adds	r3, #1
 801e280:	60fb      	str	r3, [r7, #12]
 801e282:	687b      	ldr	r3, [r7, #4]
 801e284:	885b      	ldrh	r3, [r3, #2]
 801e286:	461a      	mov	r2, r3
 801e288:	68fb      	ldr	r3, [r7, #12]
 801e28a:	429a      	cmp	r2, r3
 801e28c:	dce7      	bgt.n	801e25e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 801e28e:	bf00      	nop
 801e290:	3714      	adds	r7, #20
 801e292:	46bd      	mov	sp, r7
 801e294:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e298:	4770      	bx	lr
	...

0801e29c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 801e29c:	b580      	push	{r7, lr}
 801e29e:	b082      	sub	sp, #8
 801e2a0:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801e2a2:	2300      	movs	r3, #0
 801e2a4:	80fb      	strh	r3, [r7, #6]
 801e2a6:	e009      	b.n	801e2bc <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 801e2a8:	88fb      	ldrh	r3, [r7, #6]
 801e2aa:	4a08      	ldr	r2, [pc, #32]	; (801e2cc <memp_init+0x30>)
 801e2ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801e2b0:	4618      	mov	r0, r3
 801e2b2:	f7ff ffc3 	bl	801e23c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801e2b6:	88fb      	ldrh	r3, [r7, #6]
 801e2b8:	3301      	adds	r3, #1
 801e2ba:	80fb      	strh	r3, [r7, #6]
 801e2bc:	88fb      	ldrh	r3, [r7, #6]
 801e2be:	2b0d      	cmp	r3, #13
 801e2c0:	d9f2      	bls.n	801e2a8 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 801e2c2:	bf00      	nop
 801e2c4:	3708      	adds	r7, #8
 801e2c6:	46bd      	mov	sp, r7
 801e2c8:	bd80      	pop	{r7, pc}
 801e2ca:	bf00      	nop
 801e2cc:	0802b7d0 	.word	0x0802b7d0

0801e2d0 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 801e2d0:	b580      	push	{r7, lr}
 801e2d2:	b084      	sub	sp, #16
 801e2d4:	af00      	add	r7, sp, #0
 801e2d6:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 801e2d8:	f007 fece 	bl	8026078 <sys_arch_protect>
 801e2dc:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 801e2de:	687b      	ldr	r3, [r7, #4]
 801e2e0:	689b      	ldr	r3, [r3, #8]
 801e2e2:	681b      	ldr	r3, [r3, #0]
 801e2e4:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 801e2e6:	68bb      	ldr	r3, [r7, #8]
 801e2e8:	2b00      	cmp	r3, #0
 801e2ea:	d015      	beq.n	801e318 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 801e2ec:	687b      	ldr	r3, [r7, #4]
 801e2ee:	689b      	ldr	r3, [r3, #8]
 801e2f0:	68ba      	ldr	r2, [r7, #8]
 801e2f2:	6812      	ldr	r2, [r2, #0]
 801e2f4:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 801e2f6:	68bb      	ldr	r3, [r7, #8]
 801e2f8:	f003 0303 	and.w	r3, r3, #3
 801e2fc:	2b00      	cmp	r3, #0
 801e2fe:	d006      	beq.n	801e30e <do_memp_malloc_pool+0x3e>
 801e300:	4b09      	ldr	r3, [pc, #36]	; (801e328 <do_memp_malloc_pool+0x58>)
 801e302:	f240 1219 	movw	r2, #281	; 0x119
 801e306:	4909      	ldr	r1, [pc, #36]	; (801e32c <do_memp_malloc_pool+0x5c>)
 801e308:	4809      	ldr	r0, [pc, #36]	; (801e330 <do_memp_malloc_pool+0x60>)
 801e30a:	f008 f811 	bl	8026330 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 801e30e:	68f8      	ldr	r0, [r7, #12]
 801e310:	f007 fec0 	bl	8026094 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 801e314:	68bb      	ldr	r3, [r7, #8]
 801e316:	e003      	b.n	801e320 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 801e318:	68f8      	ldr	r0, [r7, #12]
 801e31a:	f007 febb 	bl	8026094 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 801e31e:	2300      	movs	r3, #0
}
 801e320:	4618      	mov	r0, r3
 801e322:	3710      	adds	r7, #16
 801e324:	46bd      	mov	sp, r7
 801e326:	bd80      	pop	{r7, pc}
 801e328:	080288b8 	.word	0x080288b8
 801e32c:	080288e8 	.word	0x080288e8
 801e330:	0802890c 	.word	0x0802890c

0801e334 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 801e334:	b580      	push	{r7, lr}
 801e336:	b084      	sub	sp, #16
 801e338:	af00      	add	r7, sp, #0
 801e33a:	4603      	mov	r3, r0
 801e33c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 801e33e:	79fb      	ldrb	r3, [r7, #7]
 801e340:	2b0d      	cmp	r3, #13
 801e342:	d908      	bls.n	801e356 <memp_malloc+0x22>
 801e344:	4b0a      	ldr	r3, [pc, #40]	; (801e370 <memp_malloc+0x3c>)
 801e346:	f240 1257 	movw	r2, #343	; 0x157
 801e34a:	490a      	ldr	r1, [pc, #40]	; (801e374 <memp_malloc+0x40>)
 801e34c:	480a      	ldr	r0, [pc, #40]	; (801e378 <memp_malloc+0x44>)
 801e34e:	f007 ffef 	bl	8026330 <iprintf>
 801e352:	2300      	movs	r3, #0
 801e354:	e008      	b.n	801e368 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 801e356:	79fb      	ldrb	r3, [r7, #7]
 801e358:	4a08      	ldr	r2, [pc, #32]	; (801e37c <memp_malloc+0x48>)
 801e35a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801e35e:	4618      	mov	r0, r3
 801e360:	f7ff ffb6 	bl	801e2d0 <do_memp_malloc_pool>
 801e364:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 801e366:	68fb      	ldr	r3, [r7, #12]
}
 801e368:	4618      	mov	r0, r3
 801e36a:	3710      	adds	r7, #16
 801e36c:	46bd      	mov	sp, r7
 801e36e:	bd80      	pop	{r7, pc}
 801e370:	080288b8 	.word	0x080288b8
 801e374:	08028948 	.word	0x08028948
 801e378:	0802890c 	.word	0x0802890c
 801e37c:	0802b7d0 	.word	0x0802b7d0

0801e380 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 801e380:	b580      	push	{r7, lr}
 801e382:	b084      	sub	sp, #16
 801e384:	af00      	add	r7, sp, #0
 801e386:	6078      	str	r0, [r7, #4]
 801e388:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 801e38a:	683b      	ldr	r3, [r7, #0]
 801e38c:	f003 0303 	and.w	r3, r3, #3
 801e390:	2b00      	cmp	r3, #0
 801e392:	d006      	beq.n	801e3a2 <do_memp_free_pool+0x22>
 801e394:	4b0d      	ldr	r3, [pc, #52]	; (801e3cc <do_memp_free_pool+0x4c>)
 801e396:	f240 126d 	movw	r2, #365	; 0x16d
 801e39a:	490d      	ldr	r1, [pc, #52]	; (801e3d0 <do_memp_free_pool+0x50>)
 801e39c:	480d      	ldr	r0, [pc, #52]	; (801e3d4 <do_memp_free_pool+0x54>)
 801e39e:	f007 ffc7 	bl	8026330 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 801e3a2:	683b      	ldr	r3, [r7, #0]
 801e3a4:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 801e3a6:	f007 fe67 	bl	8026078 <sys_arch_protect>
 801e3aa:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 801e3ac:	687b      	ldr	r3, [r7, #4]
 801e3ae:	689b      	ldr	r3, [r3, #8]
 801e3b0:	681a      	ldr	r2, [r3, #0]
 801e3b2:	68fb      	ldr	r3, [r7, #12]
 801e3b4:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 801e3b6:	687b      	ldr	r3, [r7, #4]
 801e3b8:	689b      	ldr	r3, [r3, #8]
 801e3ba:	68fa      	ldr	r2, [r7, #12]
 801e3bc:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 801e3be:	68b8      	ldr	r0, [r7, #8]
 801e3c0:	f007 fe68 	bl	8026094 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 801e3c4:	bf00      	nop
 801e3c6:	3710      	adds	r7, #16
 801e3c8:	46bd      	mov	sp, r7
 801e3ca:	bd80      	pop	{r7, pc}
 801e3cc:	080288b8 	.word	0x080288b8
 801e3d0:	08028968 	.word	0x08028968
 801e3d4:	0802890c 	.word	0x0802890c

0801e3d8 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 801e3d8:	b580      	push	{r7, lr}
 801e3da:	b082      	sub	sp, #8
 801e3dc:	af00      	add	r7, sp, #0
 801e3de:	4603      	mov	r3, r0
 801e3e0:	6039      	str	r1, [r7, #0]
 801e3e2:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 801e3e4:	79fb      	ldrb	r3, [r7, #7]
 801e3e6:	2b0d      	cmp	r3, #13
 801e3e8:	d907      	bls.n	801e3fa <memp_free+0x22>
 801e3ea:	4b0c      	ldr	r3, [pc, #48]	; (801e41c <memp_free+0x44>)
 801e3ec:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 801e3f0:	490b      	ldr	r1, [pc, #44]	; (801e420 <memp_free+0x48>)
 801e3f2:	480c      	ldr	r0, [pc, #48]	; (801e424 <memp_free+0x4c>)
 801e3f4:	f007 ff9c 	bl	8026330 <iprintf>
 801e3f8:	e00c      	b.n	801e414 <memp_free+0x3c>

  if (mem == NULL) {
 801e3fa:	683b      	ldr	r3, [r7, #0]
 801e3fc:	2b00      	cmp	r3, #0
 801e3fe:	d008      	beq.n	801e412 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 801e400:	79fb      	ldrb	r3, [r7, #7]
 801e402:	4a09      	ldr	r2, [pc, #36]	; (801e428 <memp_free+0x50>)
 801e404:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801e408:	6839      	ldr	r1, [r7, #0]
 801e40a:	4618      	mov	r0, r3
 801e40c:	f7ff ffb8 	bl	801e380 <do_memp_free_pool>
 801e410:	e000      	b.n	801e414 <memp_free+0x3c>
    return;
 801e412:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 801e414:	3708      	adds	r7, #8
 801e416:	46bd      	mov	sp, r7
 801e418:	bd80      	pop	{r7, pc}
 801e41a:	bf00      	nop
 801e41c:	080288b8 	.word	0x080288b8
 801e420:	08028988 	.word	0x08028988
 801e424:	0802890c 	.word	0x0802890c
 801e428:	0802b7d0 	.word	0x0802b7d0

0801e42c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 801e42c:	b480      	push	{r7}
 801e42e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 801e430:	bf00      	nop
 801e432:	46bd      	mov	sp, r7
 801e434:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e438:	4770      	bx	lr
	...

0801e43c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 801e43c:	b580      	push	{r7, lr}
 801e43e:	b086      	sub	sp, #24
 801e440:	af00      	add	r7, sp, #0
 801e442:	60f8      	str	r0, [r7, #12]
 801e444:	60b9      	str	r1, [r7, #8]
 801e446:	607a      	str	r2, [r7, #4]
 801e448:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 801e44a:	68fb      	ldr	r3, [r7, #12]
 801e44c:	2b00      	cmp	r3, #0
 801e44e:	d108      	bne.n	801e462 <netif_add+0x26>
 801e450:	4b5b      	ldr	r3, [pc, #364]	; (801e5c0 <netif_add+0x184>)
 801e452:	f240 1227 	movw	r2, #295	; 0x127
 801e456:	495b      	ldr	r1, [pc, #364]	; (801e5c4 <netif_add+0x188>)
 801e458:	485b      	ldr	r0, [pc, #364]	; (801e5c8 <netif_add+0x18c>)
 801e45a:	f007 ff69 	bl	8026330 <iprintf>
 801e45e:	2300      	movs	r3, #0
 801e460:	e0a9      	b.n	801e5b6 <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 801e462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e464:	2b00      	cmp	r3, #0
 801e466:	d108      	bne.n	801e47a <netif_add+0x3e>
 801e468:	4b55      	ldr	r3, [pc, #340]	; (801e5c0 <netif_add+0x184>)
 801e46a:	f44f 7294 	mov.w	r2, #296	; 0x128
 801e46e:	4957      	ldr	r1, [pc, #348]	; (801e5cc <netif_add+0x190>)
 801e470:	4855      	ldr	r0, [pc, #340]	; (801e5c8 <netif_add+0x18c>)
 801e472:	f007 ff5d 	bl	8026330 <iprintf>
 801e476:	2300      	movs	r3, #0
 801e478:	e09d      	b.n	801e5b6 <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 801e47a:	68bb      	ldr	r3, [r7, #8]
 801e47c:	2b00      	cmp	r3, #0
 801e47e:	d101      	bne.n	801e484 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 801e480:	4b53      	ldr	r3, [pc, #332]	; (801e5d0 <netif_add+0x194>)
 801e482:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 801e484:	687b      	ldr	r3, [r7, #4]
 801e486:	2b00      	cmp	r3, #0
 801e488:	d101      	bne.n	801e48e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 801e48a:	4b51      	ldr	r3, [pc, #324]	; (801e5d0 <netif_add+0x194>)
 801e48c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 801e48e:	683b      	ldr	r3, [r7, #0]
 801e490:	2b00      	cmp	r3, #0
 801e492:	d101      	bne.n	801e498 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 801e494:	4b4e      	ldr	r3, [pc, #312]	; (801e5d0 <netif_add+0x194>)
 801e496:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 801e498:	68fb      	ldr	r3, [r7, #12]
 801e49a:	2200      	movs	r2, #0
 801e49c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 801e49e:	68fb      	ldr	r3, [r7, #12]
 801e4a0:	2200      	movs	r2, #0
 801e4a2:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 801e4a4:	68fb      	ldr	r3, [r7, #12]
 801e4a6:	2200      	movs	r2, #0
 801e4a8:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 801e4aa:	68fb      	ldr	r3, [r7, #12]
 801e4ac:	4a49      	ldr	r2, [pc, #292]	; (801e5d4 <netif_add+0x198>)
 801e4ae:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 801e4b0:	68fb      	ldr	r3, [r7, #12]
 801e4b2:	2200      	movs	r2, #0
 801e4b4:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 801e4b6:	68fb      	ldr	r3, [r7, #12]
 801e4b8:	2200      	movs	r2, #0
 801e4ba:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 801e4be:	68fb      	ldr	r3, [r7, #12]
 801e4c0:	3324      	adds	r3, #36	; 0x24
 801e4c2:	2204      	movs	r2, #4
 801e4c4:	2100      	movs	r1, #0
 801e4c6:	4618      	mov	r0, r3
 801e4c8:	f007 fe7e 	bl	80261c8 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 801e4cc:	68fb      	ldr	r3, [r7, #12]
 801e4ce:	2200      	movs	r2, #0
 801e4d0:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 801e4d2:	68fb      	ldr	r3, [r7, #12]
 801e4d4:	6a3a      	ldr	r2, [r7, #32]
 801e4d6:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 801e4d8:	4b3f      	ldr	r3, [pc, #252]	; (801e5d8 <netif_add+0x19c>)
 801e4da:	781a      	ldrb	r2, [r3, #0]
 801e4dc:	68fb      	ldr	r3, [r7, #12]
 801e4de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 801e4e2:	68fb      	ldr	r3, [r7, #12]
 801e4e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801e4e6:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 801e4e8:	683b      	ldr	r3, [r7, #0]
 801e4ea:	687a      	ldr	r2, [r7, #4]
 801e4ec:	68b9      	ldr	r1, [r7, #8]
 801e4ee:	68f8      	ldr	r0, [r7, #12]
 801e4f0:	f000 f914 	bl	801e71c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 801e4f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e4f6:	68f8      	ldr	r0, [r7, #12]
 801e4f8:	4798      	blx	r3
 801e4fa:	4603      	mov	r3, r0
 801e4fc:	2b00      	cmp	r3, #0
 801e4fe:	d001      	beq.n	801e504 <netif_add+0xc8>
    return NULL;
 801e500:	2300      	movs	r3, #0
 801e502:	e058      	b.n	801e5b6 <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 801e504:	68fb      	ldr	r3, [r7, #12]
 801e506:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801e50a:	2bff      	cmp	r3, #255	; 0xff
 801e50c:	d103      	bne.n	801e516 <netif_add+0xda>
        netif->num = 0;
 801e50e:	68fb      	ldr	r3, [r7, #12]
 801e510:	2200      	movs	r2, #0
 801e512:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 801e516:	2300      	movs	r3, #0
 801e518:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 801e51a:	4b30      	ldr	r3, [pc, #192]	; (801e5dc <netif_add+0x1a0>)
 801e51c:	681b      	ldr	r3, [r3, #0]
 801e51e:	617b      	str	r3, [r7, #20]
 801e520:	e02b      	b.n	801e57a <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 801e522:	697a      	ldr	r2, [r7, #20]
 801e524:	68fb      	ldr	r3, [r7, #12]
 801e526:	429a      	cmp	r2, r3
 801e528:	d106      	bne.n	801e538 <netif_add+0xfc>
 801e52a:	4b25      	ldr	r3, [pc, #148]	; (801e5c0 <netif_add+0x184>)
 801e52c:	f240 128b 	movw	r2, #395	; 0x18b
 801e530:	492b      	ldr	r1, [pc, #172]	; (801e5e0 <netif_add+0x1a4>)
 801e532:	4825      	ldr	r0, [pc, #148]	; (801e5c8 <netif_add+0x18c>)
 801e534:	f007 fefc 	bl	8026330 <iprintf>
        num_netifs++;
 801e538:	693b      	ldr	r3, [r7, #16]
 801e53a:	3301      	adds	r3, #1
 801e53c:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 801e53e:	693b      	ldr	r3, [r7, #16]
 801e540:	2bff      	cmp	r3, #255	; 0xff
 801e542:	dd06      	ble.n	801e552 <netif_add+0x116>
 801e544:	4b1e      	ldr	r3, [pc, #120]	; (801e5c0 <netif_add+0x184>)
 801e546:	f240 128d 	movw	r2, #397	; 0x18d
 801e54a:	4926      	ldr	r1, [pc, #152]	; (801e5e4 <netif_add+0x1a8>)
 801e54c:	481e      	ldr	r0, [pc, #120]	; (801e5c8 <netif_add+0x18c>)
 801e54e:	f007 feef 	bl	8026330 <iprintf>
        if (netif2->num == netif->num) {
 801e552:	697b      	ldr	r3, [r7, #20]
 801e554:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 801e558:	68fb      	ldr	r3, [r7, #12]
 801e55a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801e55e:	429a      	cmp	r2, r3
 801e560:	d108      	bne.n	801e574 <netif_add+0x138>
          netif->num++;
 801e562:	68fb      	ldr	r3, [r7, #12]
 801e564:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801e568:	3301      	adds	r3, #1
 801e56a:	b2da      	uxtb	r2, r3
 801e56c:	68fb      	ldr	r3, [r7, #12]
 801e56e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 801e572:	e005      	b.n	801e580 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 801e574:	697b      	ldr	r3, [r7, #20]
 801e576:	681b      	ldr	r3, [r3, #0]
 801e578:	617b      	str	r3, [r7, #20]
 801e57a:	697b      	ldr	r3, [r7, #20]
 801e57c:	2b00      	cmp	r3, #0
 801e57e:	d1d0      	bne.n	801e522 <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 801e580:	697b      	ldr	r3, [r7, #20]
 801e582:	2b00      	cmp	r3, #0
 801e584:	d1be      	bne.n	801e504 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 801e586:	68fb      	ldr	r3, [r7, #12]
 801e588:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801e58c:	2bfe      	cmp	r3, #254	; 0xfe
 801e58e:	d103      	bne.n	801e598 <netif_add+0x15c>
    netif_num = 0;
 801e590:	4b11      	ldr	r3, [pc, #68]	; (801e5d8 <netif_add+0x19c>)
 801e592:	2200      	movs	r2, #0
 801e594:	701a      	strb	r2, [r3, #0]
 801e596:	e006      	b.n	801e5a6 <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 801e598:	68fb      	ldr	r3, [r7, #12]
 801e59a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801e59e:	3301      	adds	r3, #1
 801e5a0:	b2da      	uxtb	r2, r3
 801e5a2:	4b0d      	ldr	r3, [pc, #52]	; (801e5d8 <netif_add+0x19c>)
 801e5a4:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 801e5a6:	4b0d      	ldr	r3, [pc, #52]	; (801e5dc <netif_add+0x1a0>)
 801e5a8:	681a      	ldr	r2, [r3, #0]
 801e5aa:	68fb      	ldr	r3, [r7, #12]
 801e5ac:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 801e5ae:	4a0b      	ldr	r2, [pc, #44]	; (801e5dc <netif_add+0x1a0>)
 801e5b0:	68fb      	ldr	r3, [r7, #12]
 801e5b2:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 801e5b4:	68fb      	ldr	r3, [r7, #12]
}
 801e5b6:	4618      	mov	r0, r3
 801e5b8:	3718      	adds	r7, #24
 801e5ba:	46bd      	mov	sp, r7
 801e5bc:	bd80      	pop	{r7, pc}
 801e5be:	bf00      	nop
 801e5c0:	080289a4 	.word	0x080289a4
 801e5c4:	08028a38 	.word	0x08028a38
 801e5c8:	080289f4 	.word	0x080289f4
 801e5cc:	08028a54 	.word	0x08028a54
 801e5d0:	0802b720 	.word	0x0802b720
 801e5d4:	0801e8a9 	.word	0x0801e8a9
 801e5d8:	200196bc 	.word	0x200196bc
 801e5dc:	20022aa8 	.word	0x20022aa8
 801e5e0:	08028a78 	.word	0x08028a78
 801e5e4:	08028a8c 	.word	0x08028a8c

0801e5e8 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801e5e8:	b580      	push	{r7, lr}
 801e5ea:	b082      	sub	sp, #8
 801e5ec:	af00      	add	r7, sp, #0
 801e5ee:	6078      	str	r0, [r7, #4]
 801e5f0:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 801e5f2:	6839      	ldr	r1, [r7, #0]
 801e5f4:	6878      	ldr	r0, [r7, #4]
 801e5f6:	f002 fe31 	bl	802125c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 801e5fa:	6839      	ldr	r1, [r7, #0]
 801e5fc:	6878      	ldr	r0, [r7, #4]
 801e5fe:	f007 fb39 	bl	8025c74 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 801e602:	bf00      	nop
 801e604:	3708      	adds	r7, #8
 801e606:	46bd      	mov	sp, r7
 801e608:	bd80      	pop	{r7, pc}
	...

0801e60c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 801e60c:	b580      	push	{r7, lr}
 801e60e:	b086      	sub	sp, #24
 801e610:	af00      	add	r7, sp, #0
 801e612:	60f8      	str	r0, [r7, #12]
 801e614:	60b9      	str	r1, [r7, #8]
 801e616:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 801e618:	68bb      	ldr	r3, [r7, #8]
 801e61a:	2b00      	cmp	r3, #0
 801e61c:	d106      	bne.n	801e62c <netif_do_set_ipaddr+0x20>
 801e61e:	4b1d      	ldr	r3, [pc, #116]	; (801e694 <netif_do_set_ipaddr+0x88>)
 801e620:	f240 12cb 	movw	r2, #459	; 0x1cb
 801e624:	491c      	ldr	r1, [pc, #112]	; (801e698 <netif_do_set_ipaddr+0x8c>)
 801e626:	481d      	ldr	r0, [pc, #116]	; (801e69c <netif_do_set_ipaddr+0x90>)
 801e628:	f007 fe82 	bl	8026330 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 801e62c:	687b      	ldr	r3, [r7, #4]
 801e62e:	2b00      	cmp	r3, #0
 801e630:	d106      	bne.n	801e640 <netif_do_set_ipaddr+0x34>
 801e632:	4b18      	ldr	r3, [pc, #96]	; (801e694 <netif_do_set_ipaddr+0x88>)
 801e634:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 801e638:	4917      	ldr	r1, [pc, #92]	; (801e698 <netif_do_set_ipaddr+0x8c>)
 801e63a:	4818      	ldr	r0, [pc, #96]	; (801e69c <netif_do_set_ipaddr+0x90>)
 801e63c:	f007 fe78 	bl	8026330 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 801e640:	68bb      	ldr	r3, [r7, #8]
 801e642:	681a      	ldr	r2, [r3, #0]
 801e644:	68fb      	ldr	r3, [r7, #12]
 801e646:	3304      	adds	r3, #4
 801e648:	681b      	ldr	r3, [r3, #0]
 801e64a:	429a      	cmp	r2, r3
 801e64c:	d01c      	beq.n	801e688 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 801e64e:	68bb      	ldr	r3, [r7, #8]
 801e650:	681b      	ldr	r3, [r3, #0]
 801e652:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 801e654:	68fb      	ldr	r3, [r7, #12]
 801e656:	3304      	adds	r3, #4
 801e658:	681a      	ldr	r2, [r3, #0]
 801e65a:	687b      	ldr	r3, [r7, #4]
 801e65c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 801e65e:	f107 0314 	add.w	r3, r7, #20
 801e662:	4619      	mov	r1, r3
 801e664:	6878      	ldr	r0, [r7, #4]
 801e666:	f7ff ffbf 	bl	801e5e8 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 801e66a:	68bb      	ldr	r3, [r7, #8]
 801e66c:	2b00      	cmp	r3, #0
 801e66e:	d002      	beq.n	801e676 <netif_do_set_ipaddr+0x6a>
 801e670:	68bb      	ldr	r3, [r7, #8]
 801e672:	681b      	ldr	r3, [r3, #0]
 801e674:	e000      	b.n	801e678 <netif_do_set_ipaddr+0x6c>
 801e676:	2300      	movs	r3, #0
 801e678:	68fa      	ldr	r2, [r7, #12]
 801e67a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 801e67c:	2101      	movs	r1, #1
 801e67e:	68f8      	ldr	r0, [r7, #12]
 801e680:	f000 f8d2 	bl	801e828 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 801e684:	2301      	movs	r3, #1
 801e686:	e000      	b.n	801e68a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 801e688:	2300      	movs	r3, #0
}
 801e68a:	4618      	mov	r0, r3
 801e68c:	3718      	adds	r7, #24
 801e68e:	46bd      	mov	sp, r7
 801e690:	bd80      	pop	{r7, pc}
 801e692:	bf00      	nop
 801e694:	080289a4 	.word	0x080289a4
 801e698:	08028abc 	.word	0x08028abc
 801e69c:	080289f4 	.word	0x080289f4

0801e6a0 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 801e6a0:	b480      	push	{r7}
 801e6a2:	b085      	sub	sp, #20
 801e6a4:	af00      	add	r7, sp, #0
 801e6a6:	60f8      	str	r0, [r7, #12]
 801e6a8:	60b9      	str	r1, [r7, #8]
 801e6aa:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 801e6ac:	68bb      	ldr	r3, [r7, #8]
 801e6ae:	681a      	ldr	r2, [r3, #0]
 801e6b0:	68fb      	ldr	r3, [r7, #12]
 801e6b2:	3308      	adds	r3, #8
 801e6b4:	681b      	ldr	r3, [r3, #0]
 801e6b6:	429a      	cmp	r2, r3
 801e6b8:	d00a      	beq.n	801e6d0 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 801e6ba:	68bb      	ldr	r3, [r7, #8]
 801e6bc:	2b00      	cmp	r3, #0
 801e6be:	d002      	beq.n	801e6c6 <netif_do_set_netmask+0x26>
 801e6c0:	68bb      	ldr	r3, [r7, #8]
 801e6c2:	681b      	ldr	r3, [r3, #0]
 801e6c4:	e000      	b.n	801e6c8 <netif_do_set_netmask+0x28>
 801e6c6:	2300      	movs	r3, #0
 801e6c8:	68fa      	ldr	r2, [r7, #12]
 801e6ca:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 801e6cc:	2301      	movs	r3, #1
 801e6ce:	e000      	b.n	801e6d2 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 801e6d0:	2300      	movs	r3, #0
}
 801e6d2:	4618      	mov	r0, r3
 801e6d4:	3714      	adds	r7, #20
 801e6d6:	46bd      	mov	sp, r7
 801e6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e6dc:	4770      	bx	lr

0801e6de <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 801e6de:	b480      	push	{r7}
 801e6e0:	b085      	sub	sp, #20
 801e6e2:	af00      	add	r7, sp, #0
 801e6e4:	60f8      	str	r0, [r7, #12]
 801e6e6:	60b9      	str	r1, [r7, #8]
 801e6e8:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 801e6ea:	68bb      	ldr	r3, [r7, #8]
 801e6ec:	681a      	ldr	r2, [r3, #0]
 801e6ee:	68fb      	ldr	r3, [r7, #12]
 801e6f0:	330c      	adds	r3, #12
 801e6f2:	681b      	ldr	r3, [r3, #0]
 801e6f4:	429a      	cmp	r2, r3
 801e6f6:	d00a      	beq.n	801e70e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 801e6f8:	68bb      	ldr	r3, [r7, #8]
 801e6fa:	2b00      	cmp	r3, #0
 801e6fc:	d002      	beq.n	801e704 <netif_do_set_gw+0x26>
 801e6fe:	68bb      	ldr	r3, [r7, #8]
 801e700:	681b      	ldr	r3, [r3, #0]
 801e702:	e000      	b.n	801e706 <netif_do_set_gw+0x28>
 801e704:	2300      	movs	r3, #0
 801e706:	68fa      	ldr	r2, [r7, #12]
 801e708:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 801e70a:	2301      	movs	r3, #1
 801e70c:	e000      	b.n	801e710 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 801e70e:	2300      	movs	r3, #0
}
 801e710:	4618      	mov	r0, r3
 801e712:	3714      	adds	r7, #20
 801e714:	46bd      	mov	sp, r7
 801e716:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e71a:	4770      	bx	lr

0801e71c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 801e71c:	b580      	push	{r7, lr}
 801e71e:	b088      	sub	sp, #32
 801e720:	af00      	add	r7, sp, #0
 801e722:	60f8      	str	r0, [r7, #12]
 801e724:	60b9      	str	r1, [r7, #8]
 801e726:	607a      	str	r2, [r7, #4]
 801e728:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 801e72a:	2300      	movs	r3, #0
 801e72c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 801e72e:	2300      	movs	r3, #0
 801e730:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801e732:	68bb      	ldr	r3, [r7, #8]
 801e734:	2b00      	cmp	r3, #0
 801e736:	d101      	bne.n	801e73c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 801e738:	4b1c      	ldr	r3, [pc, #112]	; (801e7ac <netif_set_addr+0x90>)
 801e73a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 801e73c:	687b      	ldr	r3, [r7, #4]
 801e73e:	2b00      	cmp	r3, #0
 801e740:	d101      	bne.n	801e746 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 801e742:	4b1a      	ldr	r3, [pc, #104]	; (801e7ac <netif_set_addr+0x90>)
 801e744:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 801e746:	683b      	ldr	r3, [r7, #0]
 801e748:	2b00      	cmp	r3, #0
 801e74a:	d101      	bne.n	801e750 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 801e74c:	4b17      	ldr	r3, [pc, #92]	; (801e7ac <netif_set_addr+0x90>)
 801e74e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 801e750:	68bb      	ldr	r3, [r7, #8]
 801e752:	2b00      	cmp	r3, #0
 801e754:	d003      	beq.n	801e75e <netif_set_addr+0x42>
 801e756:	68bb      	ldr	r3, [r7, #8]
 801e758:	681b      	ldr	r3, [r3, #0]
 801e75a:	2b00      	cmp	r3, #0
 801e75c:	d101      	bne.n	801e762 <netif_set_addr+0x46>
 801e75e:	2301      	movs	r3, #1
 801e760:	e000      	b.n	801e764 <netif_set_addr+0x48>
 801e762:	2300      	movs	r3, #0
 801e764:	617b      	str	r3, [r7, #20]
  if (remove) {
 801e766:	697b      	ldr	r3, [r7, #20]
 801e768:	2b00      	cmp	r3, #0
 801e76a:	d006      	beq.n	801e77a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 801e76c:	f107 0310 	add.w	r3, r7, #16
 801e770:	461a      	mov	r2, r3
 801e772:	68b9      	ldr	r1, [r7, #8]
 801e774:	68f8      	ldr	r0, [r7, #12]
 801e776:	f7ff ff49 	bl	801e60c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 801e77a:	69fa      	ldr	r2, [r7, #28]
 801e77c:	6879      	ldr	r1, [r7, #4]
 801e77e:	68f8      	ldr	r0, [r7, #12]
 801e780:	f7ff ff8e 	bl	801e6a0 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 801e784:	69ba      	ldr	r2, [r7, #24]
 801e786:	6839      	ldr	r1, [r7, #0]
 801e788:	68f8      	ldr	r0, [r7, #12]
 801e78a:	f7ff ffa8 	bl	801e6de <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 801e78e:	697b      	ldr	r3, [r7, #20]
 801e790:	2b00      	cmp	r3, #0
 801e792:	d106      	bne.n	801e7a2 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 801e794:	f107 0310 	add.w	r3, r7, #16
 801e798:	461a      	mov	r2, r3
 801e79a:	68b9      	ldr	r1, [r7, #8]
 801e79c:	68f8      	ldr	r0, [r7, #12]
 801e79e:	f7ff ff35 	bl	801e60c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 801e7a2:	bf00      	nop
 801e7a4:	3720      	adds	r7, #32
 801e7a6:	46bd      	mov	sp, r7
 801e7a8:	bd80      	pop	{r7, pc}
 801e7aa:	bf00      	nop
 801e7ac:	0802b720 	.word	0x0802b720

0801e7b0 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 801e7b0:	b480      	push	{r7}
 801e7b2:	b083      	sub	sp, #12
 801e7b4:	af00      	add	r7, sp, #0
 801e7b6:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 801e7b8:	4a04      	ldr	r2, [pc, #16]	; (801e7cc <netif_set_default+0x1c>)
 801e7ba:	687b      	ldr	r3, [r7, #4]
 801e7bc:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 801e7be:	bf00      	nop
 801e7c0:	370c      	adds	r7, #12
 801e7c2:	46bd      	mov	sp, r7
 801e7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e7c8:	4770      	bx	lr
 801e7ca:	bf00      	nop
 801e7cc:	20022aac 	.word	0x20022aac

0801e7d0 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 801e7d0:	b580      	push	{r7, lr}
 801e7d2:	b082      	sub	sp, #8
 801e7d4:	af00      	add	r7, sp, #0
 801e7d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 801e7d8:	687b      	ldr	r3, [r7, #4]
 801e7da:	2b00      	cmp	r3, #0
 801e7dc:	d107      	bne.n	801e7ee <netif_set_up+0x1e>
 801e7de:	4b0f      	ldr	r3, [pc, #60]	; (801e81c <netif_set_up+0x4c>)
 801e7e0:	f44f 7254 	mov.w	r2, #848	; 0x350
 801e7e4:	490e      	ldr	r1, [pc, #56]	; (801e820 <netif_set_up+0x50>)
 801e7e6:	480f      	ldr	r0, [pc, #60]	; (801e824 <netif_set_up+0x54>)
 801e7e8:	f007 fda2 	bl	8026330 <iprintf>
 801e7ec:	e013      	b.n	801e816 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 801e7ee:	687b      	ldr	r3, [r7, #4]
 801e7f0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801e7f4:	f003 0301 	and.w	r3, r3, #1
 801e7f8:	2b00      	cmp	r3, #0
 801e7fa:	d10c      	bne.n	801e816 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 801e7fc:	687b      	ldr	r3, [r7, #4]
 801e7fe:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801e802:	f043 0301 	orr.w	r3, r3, #1
 801e806:	b2da      	uxtb	r2, r3
 801e808:	687b      	ldr	r3, [r7, #4]
 801e80a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801e80e:	2103      	movs	r1, #3
 801e810:	6878      	ldr	r0, [r7, #4]
 801e812:	f000 f809 	bl	801e828 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 801e816:	3708      	adds	r7, #8
 801e818:	46bd      	mov	sp, r7
 801e81a:	bd80      	pop	{r7, pc}
 801e81c:	080289a4 	.word	0x080289a4
 801e820:	08028b2c 	.word	0x08028b2c
 801e824:	080289f4 	.word	0x080289f4

0801e828 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 801e828:	b580      	push	{r7, lr}
 801e82a:	b082      	sub	sp, #8
 801e82c:	af00      	add	r7, sp, #0
 801e82e:	6078      	str	r0, [r7, #4]
 801e830:	460b      	mov	r3, r1
 801e832:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 801e834:	687b      	ldr	r3, [r7, #4]
 801e836:	2b00      	cmp	r3, #0
 801e838:	d106      	bne.n	801e848 <netif_issue_reports+0x20>
 801e83a:	4b18      	ldr	r3, [pc, #96]	; (801e89c <netif_issue_reports+0x74>)
 801e83c:	f240 326d 	movw	r2, #877	; 0x36d
 801e840:	4917      	ldr	r1, [pc, #92]	; (801e8a0 <netif_issue_reports+0x78>)
 801e842:	4818      	ldr	r0, [pc, #96]	; (801e8a4 <netif_issue_reports+0x7c>)
 801e844:	f007 fd74 	bl	8026330 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 801e848:	687b      	ldr	r3, [r7, #4]
 801e84a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801e84e:	f003 0304 	and.w	r3, r3, #4
 801e852:	2b00      	cmp	r3, #0
 801e854:	d01e      	beq.n	801e894 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 801e856:	687b      	ldr	r3, [r7, #4]
 801e858:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801e85c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 801e860:	2b00      	cmp	r3, #0
 801e862:	d017      	beq.n	801e894 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 801e864:	78fb      	ldrb	r3, [r7, #3]
 801e866:	f003 0301 	and.w	r3, r3, #1
 801e86a:	2b00      	cmp	r3, #0
 801e86c:	d013      	beq.n	801e896 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801e86e:	687b      	ldr	r3, [r7, #4]
 801e870:	3304      	adds	r3, #4
 801e872:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 801e874:	2b00      	cmp	r3, #0
 801e876:	d00e      	beq.n	801e896 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 801e878:	687b      	ldr	r3, [r7, #4]
 801e87a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801e87e:	f003 0308 	and.w	r3, r3, #8
 801e882:	2b00      	cmp	r3, #0
 801e884:	d007      	beq.n	801e896 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 801e886:	687b      	ldr	r3, [r7, #4]
 801e888:	3304      	adds	r3, #4
 801e88a:	4619      	mov	r1, r3
 801e88c:	6878      	ldr	r0, [r7, #4]
 801e88e:	f7fd fe15 	bl	801c4bc <etharp_request>
 801e892:	e000      	b.n	801e896 <netif_issue_reports+0x6e>
    return;
 801e894:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 801e896:	3708      	adds	r7, #8
 801e898:	46bd      	mov	sp, r7
 801e89a:	bd80      	pop	{r7, pc}
 801e89c:	080289a4 	.word	0x080289a4
 801e8a0:	08028b48 	.word	0x08028b48
 801e8a4:	080289f4 	.word	0x080289f4

0801e8a8 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 801e8a8:	b480      	push	{r7}
 801e8aa:	b085      	sub	sp, #20
 801e8ac:	af00      	add	r7, sp, #0
 801e8ae:	60f8      	str	r0, [r7, #12]
 801e8b0:	60b9      	str	r1, [r7, #8]
 801e8b2:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 801e8b4:	f06f 030b 	mvn.w	r3, #11
}
 801e8b8:	4618      	mov	r0, r3
 801e8ba:	3714      	adds	r7, #20
 801e8bc:	46bd      	mov	sp, r7
 801e8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e8c2:	4770      	bx	lr

0801e8c4 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 801e8c4:	b480      	push	{r7}
 801e8c6:	b085      	sub	sp, #20
 801e8c8:	af00      	add	r7, sp, #0
 801e8ca:	4603      	mov	r3, r0
 801e8cc:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 801e8ce:	79fb      	ldrb	r3, [r7, #7]
 801e8d0:	2b00      	cmp	r3, #0
 801e8d2:	d013      	beq.n	801e8fc <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 801e8d4:	4b0d      	ldr	r3, [pc, #52]	; (801e90c <netif_get_by_index+0x48>)
 801e8d6:	681b      	ldr	r3, [r3, #0]
 801e8d8:	60fb      	str	r3, [r7, #12]
 801e8da:	e00c      	b.n	801e8f6 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 801e8dc:	68fb      	ldr	r3, [r7, #12]
 801e8de:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801e8e2:	3301      	adds	r3, #1
 801e8e4:	b2db      	uxtb	r3, r3
 801e8e6:	79fa      	ldrb	r2, [r7, #7]
 801e8e8:	429a      	cmp	r2, r3
 801e8ea:	d101      	bne.n	801e8f0 <netif_get_by_index+0x2c>
        return netif; /* found! */
 801e8ec:	68fb      	ldr	r3, [r7, #12]
 801e8ee:	e006      	b.n	801e8fe <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 801e8f0:	68fb      	ldr	r3, [r7, #12]
 801e8f2:	681b      	ldr	r3, [r3, #0]
 801e8f4:	60fb      	str	r3, [r7, #12]
 801e8f6:	68fb      	ldr	r3, [r7, #12]
 801e8f8:	2b00      	cmp	r3, #0
 801e8fa:	d1ef      	bne.n	801e8dc <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 801e8fc:	2300      	movs	r3, #0
}
 801e8fe:	4618      	mov	r0, r3
 801e900:	3714      	adds	r7, #20
 801e902:	46bd      	mov	sp, r7
 801e904:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e908:	4770      	bx	lr
 801e90a:	bf00      	nop
 801e90c:	20022aa8 	.word	0x20022aa8

0801e910 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 801e910:	b480      	push	{r7}
 801e912:	b085      	sub	sp, #20
 801e914:	af00      	add	r7, sp, #0
 801e916:	60f8      	str	r0, [r7, #12]
 801e918:	60b9      	str	r1, [r7, #8]
 801e91a:	4611      	mov	r1, r2
 801e91c:	461a      	mov	r2, r3
 801e91e:	460b      	mov	r3, r1
 801e920:	80fb      	strh	r3, [r7, #6]
 801e922:	4613      	mov	r3, r2
 801e924:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 801e926:	68fb      	ldr	r3, [r7, #12]
 801e928:	2200      	movs	r2, #0
 801e92a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 801e92c:	68fb      	ldr	r3, [r7, #12]
 801e92e:	68ba      	ldr	r2, [r7, #8]
 801e930:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 801e932:	68fb      	ldr	r3, [r7, #12]
 801e934:	88fa      	ldrh	r2, [r7, #6]
 801e936:	811a      	strh	r2, [r3, #8]
  p->len = len;
 801e938:	68fb      	ldr	r3, [r7, #12]
 801e93a:	88ba      	ldrh	r2, [r7, #4]
 801e93c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 801e93e:	8b3b      	ldrh	r3, [r7, #24]
 801e940:	b2da      	uxtb	r2, r3
 801e942:	68fb      	ldr	r3, [r7, #12]
 801e944:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 801e946:	68fb      	ldr	r3, [r7, #12]
 801e948:	7f3a      	ldrb	r2, [r7, #28]
 801e94a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 801e94c:	68fb      	ldr	r3, [r7, #12]
 801e94e:	2201      	movs	r2, #1
 801e950:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 801e952:	68fb      	ldr	r3, [r7, #12]
 801e954:	2200      	movs	r2, #0
 801e956:	73da      	strb	r2, [r3, #15]
}
 801e958:	bf00      	nop
 801e95a:	3714      	adds	r7, #20
 801e95c:	46bd      	mov	sp, r7
 801e95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e962:	4770      	bx	lr

0801e964 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 801e964:	b580      	push	{r7, lr}
 801e966:	b08c      	sub	sp, #48	; 0x30
 801e968:	af02      	add	r7, sp, #8
 801e96a:	4603      	mov	r3, r0
 801e96c:	71fb      	strb	r3, [r7, #7]
 801e96e:	460b      	mov	r3, r1
 801e970:	80bb      	strh	r3, [r7, #4]
 801e972:	4613      	mov	r3, r2
 801e974:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 801e976:	79fb      	ldrb	r3, [r7, #7]
 801e978:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 801e97a:	887b      	ldrh	r3, [r7, #2]
 801e97c:	2b41      	cmp	r3, #65	; 0x41
 801e97e:	d00b      	beq.n	801e998 <pbuf_alloc+0x34>
 801e980:	2b41      	cmp	r3, #65	; 0x41
 801e982:	dc02      	bgt.n	801e98a <pbuf_alloc+0x26>
 801e984:	2b01      	cmp	r3, #1
 801e986:	d007      	beq.n	801e998 <pbuf_alloc+0x34>
 801e988:	e0c2      	b.n	801eb10 <pbuf_alloc+0x1ac>
 801e98a:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 801e98e:	d00b      	beq.n	801e9a8 <pbuf_alloc+0x44>
 801e990:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 801e994:	d070      	beq.n	801ea78 <pbuf_alloc+0x114>
 801e996:	e0bb      	b.n	801eb10 <pbuf_alloc+0x1ac>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 801e998:	887a      	ldrh	r2, [r7, #2]
 801e99a:	88bb      	ldrh	r3, [r7, #4]
 801e99c:	4619      	mov	r1, r3
 801e99e:	2000      	movs	r0, #0
 801e9a0:	f000 f8d2 	bl	801eb48 <pbuf_alloc_reference>
 801e9a4:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 801e9a6:	e0bd      	b.n	801eb24 <pbuf_alloc+0x1c0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 801e9a8:	2300      	movs	r3, #0
 801e9aa:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 801e9ac:	2300      	movs	r3, #0
 801e9ae:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 801e9b0:	88bb      	ldrh	r3, [r7, #4]
 801e9b2:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 801e9b4:	200d      	movs	r0, #13
 801e9b6:	f7ff fcbd 	bl	801e334 <memp_malloc>
 801e9ba:	6178      	str	r0, [r7, #20]
        if (q == NULL) {
 801e9bc:	697b      	ldr	r3, [r7, #20]
 801e9be:	2b00      	cmp	r3, #0
 801e9c0:	d107      	bne.n	801e9d2 <pbuf_alloc+0x6e>
          PBUF_POOL_IS_EMPTY();
          /* free chain so far allocated */
          if (p) {
 801e9c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e9c4:	2b00      	cmp	r3, #0
 801e9c6:	d002      	beq.n	801e9ce <pbuf_alloc+0x6a>
            pbuf_free(p);
 801e9c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801e9ca:	f000 faad 	bl	801ef28 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 801e9ce:	2300      	movs	r3, #0
 801e9d0:	e0a9      	b.n	801eb26 <pbuf_alloc+0x1c2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801e9d2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801e9d4:	3303      	adds	r3, #3
 801e9d6:	b29b      	uxth	r3, r3
 801e9d8:	f023 0303 	bic.w	r3, r3, #3
 801e9dc:	b29a      	uxth	r2, r3
 801e9de:	f240 53f4 	movw	r3, #1524	; 0x5f4
 801e9e2:	1a9b      	subs	r3, r3, r2
 801e9e4:	b29a      	uxth	r2, r3
 801e9e6:	8b7b      	ldrh	r3, [r7, #26]
 801e9e8:	4293      	cmp	r3, r2
 801e9ea:	bf28      	it	cs
 801e9ec:	4613      	movcs	r3, r2
 801e9ee:	827b      	strh	r3, [r7, #18]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 801e9f0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801e9f2:	3310      	adds	r3, #16
 801e9f4:	697a      	ldr	r2, [r7, #20]
 801e9f6:	4413      	add	r3, r2
 801e9f8:	3303      	adds	r3, #3
 801e9fa:	f023 0303 	bic.w	r3, r3, #3
 801e9fe:	4618      	mov	r0, r3
 801ea00:	8a79      	ldrh	r1, [r7, #18]
 801ea02:	8b7a      	ldrh	r2, [r7, #26]
 801ea04:	2300      	movs	r3, #0
 801ea06:	9301      	str	r3, [sp, #4]
 801ea08:	887b      	ldrh	r3, [r7, #2]
 801ea0a:	9300      	str	r3, [sp, #0]
 801ea0c:	460b      	mov	r3, r1
 801ea0e:	4601      	mov	r1, r0
 801ea10:	6978      	ldr	r0, [r7, #20]
 801ea12:	f7ff ff7d 	bl	801e910 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 801ea16:	697b      	ldr	r3, [r7, #20]
 801ea18:	685b      	ldr	r3, [r3, #4]
 801ea1a:	f003 0303 	and.w	r3, r3, #3
 801ea1e:	2b00      	cmp	r3, #0
 801ea20:	d006      	beq.n	801ea30 <pbuf_alloc+0xcc>
 801ea22:	4b43      	ldr	r3, [pc, #268]	; (801eb30 <pbuf_alloc+0x1cc>)
 801ea24:	f240 1201 	movw	r2, #257	; 0x101
 801ea28:	4942      	ldr	r1, [pc, #264]	; (801eb34 <pbuf_alloc+0x1d0>)
 801ea2a:	4843      	ldr	r0, [pc, #268]	; (801eb38 <pbuf_alloc+0x1d4>)
 801ea2c:	f007 fc80 	bl	8026330 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 801ea30:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801ea32:	3303      	adds	r3, #3
 801ea34:	f023 0303 	bic.w	r3, r3, #3
 801ea38:	f240 52f4 	movw	r2, #1524	; 0x5f4
 801ea3c:	4293      	cmp	r3, r2
 801ea3e:	d106      	bne.n	801ea4e <pbuf_alloc+0xea>
 801ea40:	4b3b      	ldr	r3, [pc, #236]	; (801eb30 <pbuf_alloc+0x1cc>)
 801ea42:	f240 1203 	movw	r2, #259	; 0x103
 801ea46:	493d      	ldr	r1, [pc, #244]	; (801eb3c <pbuf_alloc+0x1d8>)
 801ea48:	483b      	ldr	r0, [pc, #236]	; (801eb38 <pbuf_alloc+0x1d4>)
 801ea4a:	f007 fc71 	bl	8026330 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 801ea4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ea50:	2b00      	cmp	r3, #0
 801ea52:	d102      	bne.n	801ea5a <pbuf_alloc+0xf6>
          /* allocated head of pbuf chain (into p) */
          p = q;
 801ea54:	697b      	ldr	r3, [r7, #20]
 801ea56:	627b      	str	r3, [r7, #36]	; 0x24
 801ea58:	e002      	b.n	801ea60 <pbuf_alloc+0xfc>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 801ea5a:	69fb      	ldr	r3, [r7, #28]
 801ea5c:	697a      	ldr	r2, [r7, #20]
 801ea5e:	601a      	str	r2, [r3, #0]
        }
        last = q;
 801ea60:	697b      	ldr	r3, [r7, #20]
 801ea62:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 801ea64:	8b7a      	ldrh	r2, [r7, #26]
 801ea66:	8a7b      	ldrh	r3, [r7, #18]
 801ea68:	1ad3      	subs	r3, r2, r3
 801ea6a:	837b      	strh	r3, [r7, #26]
        offset = 0;
 801ea6c:	2300      	movs	r3, #0
 801ea6e:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 801ea70:	8b7b      	ldrh	r3, [r7, #26]
 801ea72:	2b00      	cmp	r3, #0
 801ea74:	d19e      	bne.n	801e9b4 <pbuf_alloc+0x50>
      break;
 801ea76:	e055      	b.n	801eb24 <pbuf_alloc+0x1c0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 801ea78:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801ea7a:	3303      	adds	r3, #3
 801ea7c:	b29b      	uxth	r3, r3
 801ea7e:	f023 0303 	bic.w	r3, r3, #3
 801ea82:	b29a      	uxth	r2, r3
 801ea84:	88bb      	ldrh	r3, [r7, #4]
 801ea86:	3303      	adds	r3, #3
 801ea88:	b29b      	uxth	r3, r3
 801ea8a:	f023 0303 	bic.w	r3, r3, #3
 801ea8e:	b29b      	uxth	r3, r3
 801ea90:	4413      	add	r3, r2
 801ea92:	823b      	strh	r3, [r7, #16]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 801ea94:	8a3b      	ldrh	r3, [r7, #16]
 801ea96:	3310      	adds	r3, #16
 801ea98:	81fb      	strh	r3, [r7, #14]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 801ea9a:	8a3a      	ldrh	r2, [r7, #16]
 801ea9c:	88bb      	ldrh	r3, [r7, #4]
 801ea9e:	3303      	adds	r3, #3
 801eaa0:	f023 0303 	bic.w	r3, r3, #3
 801eaa4:	429a      	cmp	r2, r3
 801eaa6:	d306      	bcc.n	801eab6 <pbuf_alloc+0x152>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 801eaa8:	89fa      	ldrh	r2, [r7, #14]
 801eaaa:	88bb      	ldrh	r3, [r7, #4]
 801eaac:	3303      	adds	r3, #3
 801eaae:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 801eab2:	429a      	cmp	r2, r3
 801eab4:	d201      	bcs.n	801eaba <pbuf_alloc+0x156>
        return NULL;
 801eab6:	2300      	movs	r3, #0
 801eab8:	e035      	b.n	801eb26 <pbuf_alloc+0x1c2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 801eaba:	89fb      	ldrh	r3, [r7, #14]
 801eabc:	4618      	mov	r0, r3
 801eabe:	f7ff fab7 	bl	801e030 <mem_malloc>
 801eac2:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 801eac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801eac6:	2b00      	cmp	r3, #0
 801eac8:	d101      	bne.n	801eace <pbuf_alloc+0x16a>
        return NULL;
 801eaca:	2300      	movs	r3, #0
 801eacc:	e02b      	b.n	801eb26 <pbuf_alloc+0x1c2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 801eace:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801ead0:	3310      	adds	r3, #16
 801ead2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ead4:	4413      	add	r3, r2
 801ead6:	3303      	adds	r3, #3
 801ead8:	f023 0303 	bic.w	r3, r3, #3
 801eadc:	4618      	mov	r0, r3
 801eade:	88b9      	ldrh	r1, [r7, #4]
 801eae0:	88ba      	ldrh	r2, [r7, #4]
 801eae2:	2300      	movs	r3, #0
 801eae4:	9301      	str	r3, [sp, #4]
 801eae6:	887b      	ldrh	r3, [r7, #2]
 801eae8:	9300      	str	r3, [sp, #0]
 801eaea:	460b      	mov	r3, r1
 801eaec:	4601      	mov	r1, r0
 801eaee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801eaf0:	f7ff ff0e 	bl	801e910 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 801eaf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801eaf6:	685b      	ldr	r3, [r3, #4]
 801eaf8:	f003 0303 	and.w	r3, r3, #3
 801eafc:	2b00      	cmp	r3, #0
 801eafe:	d010      	beq.n	801eb22 <pbuf_alloc+0x1be>
 801eb00:	4b0b      	ldr	r3, [pc, #44]	; (801eb30 <pbuf_alloc+0x1cc>)
 801eb02:	f240 1223 	movw	r2, #291	; 0x123
 801eb06:	490e      	ldr	r1, [pc, #56]	; (801eb40 <pbuf_alloc+0x1dc>)
 801eb08:	480b      	ldr	r0, [pc, #44]	; (801eb38 <pbuf_alloc+0x1d4>)
 801eb0a:	f007 fc11 	bl	8026330 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 801eb0e:	e008      	b.n	801eb22 <pbuf_alloc+0x1be>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 801eb10:	4b07      	ldr	r3, [pc, #28]	; (801eb30 <pbuf_alloc+0x1cc>)
 801eb12:	f240 1227 	movw	r2, #295	; 0x127
 801eb16:	490b      	ldr	r1, [pc, #44]	; (801eb44 <pbuf_alloc+0x1e0>)
 801eb18:	4807      	ldr	r0, [pc, #28]	; (801eb38 <pbuf_alloc+0x1d4>)
 801eb1a:	f007 fc09 	bl	8026330 <iprintf>
      return NULL;
 801eb1e:	2300      	movs	r3, #0
 801eb20:	e001      	b.n	801eb26 <pbuf_alloc+0x1c2>
      break;
 801eb22:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 801eb24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801eb26:	4618      	mov	r0, r3
 801eb28:	3728      	adds	r7, #40	; 0x28
 801eb2a:	46bd      	mov	sp, r7
 801eb2c:	bd80      	pop	{r7, pc}
 801eb2e:	bf00      	nop
 801eb30:	08028bd4 	.word	0x08028bd4
 801eb34:	08028c04 	.word	0x08028c04
 801eb38:	08028c34 	.word	0x08028c34
 801eb3c:	08028c5c 	.word	0x08028c5c
 801eb40:	08028c90 	.word	0x08028c90
 801eb44:	08028cbc 	.word	0x08028cbc

0801eb48 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 801eb48:	b580      	push	{r7, lr}
 801eb4a:	b086      	sub	sp, #24
 801eb4c:	af02      	add	r7, sp, #8
 801eb4e:	6078      	str	r0, [r7, #4]
 801eb50:	460b      	mov	r3, r1
 801eb52:	807b      	strh	r3, [r7, #2]
 801eb54:	4613      	mov	r3, r2
 801eb56:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 801eb58:	883b      	ldrh	r3, [r7, #0]
 801eb5a:	2b41      	cmp	r3, #65	; 0x41
 801eb5c:	d009      	beq.n	801eb72 <pbuf_alloc_reference+0x2a>
 801eb5e:	883b      	ldrh	r3, [r7, #0]
 801eb60:	2b01      	cmp	r3, #1
 801eb62:	d006      	beq.n	801eb72 <pbuf_alloc_reference+0x2a>
 801eb64:	4b0f      	ldr	r3, [pc, #60]	; (801eba4 <pbuf_alloc_reference+0x5c>)
 801eb66:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 801eb6a:	490f      	ldr	r1, [pc, #60]	; (801eba8 <pbuf_alloc_reference+0x60>)
 801eb6c:	480f      	ldr	r0, [pc, #60]	; (801ebac <pbuf_alloc_reference+0x64>)
 801eb6e:	f007 fbdf 	bl	8026330 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 801eb72:	200c      	movs	r0, #12
 801eb74:	f7ff fbde 	bl	801e334 <memp_malloc>
 801eb78:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 801eb7a:	68fb      	ldr	r3, [r7, #12]
 801eb7c:	2b00      	cmp	r3, #0
 801eb7e:	d101      	bne.n	801eb84 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 801eb80:	2300      	movs	r3, #0
 801eb82:	e00b      	b.n	801eb9c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 801eb84:	8879      	ldrh	r1, [r7, #2]
 801eb86:	887a      	ldrh	r2, [r7, #2]
 801eb88:	2300      	movs	r3, #0
 801eb8a:	9301      	str	r3, [sp, #4]
 801eb8c:	883b      	ldrh	r3, [r7, #0]
 801eb8e:	9300      	str	r3, [sp, #0]
 801eb90:	460b      	mov	r3, r1
 801eb92:	6879      	ldr	r1, [r7, #4]
 801eb94:	68f8      	ldr	r0, [r7, #12]
 801eb96:	f7ff febb 	bl	801e910 <pbuf_init_alloced_pbuf>
  return p;
 801eb9a:	68fb      	ldr	r3, [r7, #12]
}
 801eb9c:	4618      	mov	r0, r3
 801eb9e:	3710      	adds	r7, #16
 801eba0:	46bd      	mov	sp, r7
 801eba2:	bd80      	pop	{r7, pc}
 801eba4:	08028bd4 	.word	0x08028bd4
 801eba8:	08028cd8 	.word	0x08028cd8
 801ebac:	08028c34 	.word	0x08028c34

0801ebb0 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 801ebb0:	b580      	push	{r7, lr}
 801ebb2:	b088      	sub	sp, #32
 801ebb4:	af02      	add	r7, sp, #8
 801ebb6:	607b      	str	r3, [r7, #4]
 801ebb8:	4603      	mov	r3, r0
 801ebba:	73fb      	strb	r3, [r7, #15]
 801ebbc:	460b      	mov	r3, r1
 801ebbe:	81bb      	strh	r3, [r7, #12]
 801ebc0:	4613      	mov	r3, r2
 801ebc2:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 801ebc4:	7bfb      	ldrb	r3, [r7, #15]
 801ebc6:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 801ebc8:	8a7b      	ldrh	r3, [r7, #18]
 801ebca:	3303      	adds	r3, #3
 801ebcc:	f023 0203 	bic.w	r2, r3, #3
 801ebd0:	89bb      	ldrh	r3, [r7, #12]
 801ebd2:	441a      	add	r2, r3
 801ebd4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801ebd6:	429a      	cmp	r2, r3
 801ebd8:	d901      	bls.n	801ebde <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 801ebda:	2300      	movs	r3, #0
 801ebdc:	e018      	b.n	801ec10 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 801ebde:	6a3b      	ldr	r3, [r7, #32]
 801ebe0:	2b00      	cmp	r3, #0
 801ebe2:	d007      	beq.n	801ebf4 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 801ebe4:	8a7b      	ldrh	r3, [r7, #18]
 801ebe6:	3303      	adds	r3, #3
 801ebe8:	f023 0303 	bic.w	r3, r3, #3
 801ebec:	6a3a      	ldr	r2, [r7, #32]
 801ebee:	4413      	add	r3, r2
 801ebf0:	617b      	str	r3, [r7, #20]
 801ebf2:	e001      	b.n	801ebf8 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 801ebf4:	2300      	movs	r3, #0
 801ebf6:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 801ebf8:	6878      	ldr	r0, [r7, #4]
 801ebfa:	89b9      	ldrh	r1, [r7, #12]
 801ebfc:	89ba      	ldrh	r2, [r7, #12]
 801ebfe:	2302      	movs	r3, #2
 801ec00:	9301      	str	r3, [sp, #4]
 801ec02:	897b      	ldrh	r3, [r7, #10]
 801ec04:	9300      	str	r3, [sp, #0]
 801ec06:	460b      	mov	r3, r1
 801ec08:	6979      	ldr	r1, [r7, #20]
 801ec0a:	f7ff fe81 	bl	801e910 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 801ec0e:	687b      	ldr	r3, [r7, #4]
}
 801ec10:	4618      	mov	r0, r3
 801ec12:	3718      	adds	r7, #24
 801ec14:	46bd      	mov	sp, r7
 801ec16:	bd80      	pop	{r7, pc}

0801ec18 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 801ec18:	b580      	push	{r7, lr}
 801ec1a:	b084      	sub	sp, #16
 801ec1c:	af00      	add	r7, sp, #0
 801ec1e:	6078      	str	r0, [r7, #4]
 801ec20:	460b      	mov	r3, r1
 801ec22:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 801ec24:	687b      	ldr	r3, [r7, #4]
 801ec26:	2b00      	cmp	r3, #0
 801ec28:	d106      	bne.n	801ec38 <pbuf_realloc+0x20>
 801ec2a:	4b3a      	ldr	r3, [pc, #232]	; (801ed14 <pbuf_realloc+0xfc>)
 801ec2c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 801ec30:	4939      	ldr	r1, [pc, #228]	; (801ed18 <pbuf_realloc+0x100>)
 801ec32:	483a      	ldr	r0, [pc, #232]	; (801ed1c <pbuf_realloc+0x104>)
 801ec34:	f007 fb7c 	bl	8026330 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 801ec38:	687b      	ldr	r3, [r7, #4]
 801ec3a:	891b      	ldrh	r3, [r3, #8]
 801ec3c:	887a      	ldrh	r2, [r7, #2]
 801ec3e:	429a      	cmp	r2, r3
 801ec40:	d264      	bcs.n	801ed0c <pbuf_realloc+0xf4>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 801ec42:	687b      	ldr	r3, [r7, #4]
 801ec44:	891a      	ldrh	r2, [r3, #8]
 801ec46:	887b      	ldrh	r3, [r7, #2]
 801ec48:	1ad3      	subs	r3, r2, r3
 801ec4a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 801ec4c:	887b      	ldrh	r3, [r7, #2]
 801ec4e:	817b      	strh	r3, [r7, #10]
  q = p;
 801ec50:	687b      	ldr	r3, [r7, #4]
 801ec52:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 801ec54:	e018      	b.n	801ec88 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 801ec56:	68fb      	ldr	r3, [r7, #12]
 801ec58:	895b      	ldrh	r3, [r3, #10]
 801ec5a:	897a      	ldrh	r2, [r7, #10]
 801ec5c:	1ad3      	subs	r3, r2, r3
 801ec5e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 801ec60:	68fb      	ldr	r3, [r7, #12]
 801ec62:	891a      	ldrh	r2, [r3, #8]
 801ec64:	893b      	ldrh	r3, [r7, #8]
 801ec66:	1ad3      	subs	r3, r2, r3
 801ec68:	b29a      	uxth	r2, r3
 801ec6a:	68fb      	ldr	r3, [r7, #12]
 801ec6c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 801ec6e:	68fb      	ldr	r3, [r7, #12]
 801ec70:	681b      	ldr	r3, [r3, #0]
 801ec72:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 801ec74:	68fb      	ldr	r3, [r7, #12]
 801ec76:	2b00      	cmp	r3, #0
 801ec78:	d106      	bne.n	801ec88 <pbuf_realloc+0x70>
 801ec7a:	4b26      	ldr	r3, [pc, #152]	; (801ed14 <pbuf_realloc+0xfc>)
 801ec7c:	f240 12af 	movw	r2, #431	; 0x1af
 801ec80:	4927      	ldr	r1, [pc, #156]	; (801ed20 <pbuf_realloc+0x108>)
 801ec82:	4826      	ldr	r0, [pc, #152]	; (801ed1c <pbuf_realloc+0x104>)
 801ec84:	f007 fb54 	bl	8026330 <iprintf>
  while (rem_len > q->len) {
 801ec88:	68fb      	ldr	r3, [r7, #12]
 801ec8a:	895b      	ldrh	r3, [r3, #10]
 801ec8c:	897a      	ldrh	r2, [r7, #10]
 801ec8e:	429a      	cmp	r2, r3
 801ec90:	d8e1      	bhi.n	801ec56 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 801ec92:	68fb      	ldr	r3, [r7, #12]
 801ec94:	7b1b      	ldrb	r3, [r3, #12]
 801ec96:	f003 030f 	and.w	r3, r3, #15
 801ec9a:	2b00      	cmp	r3, #0
 801ec9c:	d122      	bne.n	801ece4 <pbuf_realloc+0xcc>
 801ec9e:	68fb      	ldr	r3, [r7, #12]
 801eca0:	895b      	ldrh	r3, [r3, #10]
 801eca2:	897a      	ldrh	r2, [r7, #10]
 801eca4:	429a      	cmp	r2, r3
 801eca6:	d01d      	beq.n	801ece4 <pbuf_realloc+0xcc>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 801eca8:	68fb      	ldr	r3, [r7, #12]
 801ecaa:	7b5b      	ldrb	r3, [r3, #13]
 801ecac:	f003 0302 	and.w	r3, r3, #2
 801ecb0:	2b00      	cmp	r3, #0
 801ecb2:	d117      	bne.n	801ece4 <pbuf_realloc+0xcc>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 801ecb4:	68fb      	ldr	r3, [r7, #12]
 801ecb6:	685b      	ldr	r3, [r3, #4]
 801ecb8:	461a      	mov	r2, r3
 801ecba:	68fb      	ldr	r3, [r7, #12]
 801ecbc:	1ad3      	subs	r3, r2, r3
 801ecbe:	b29a      	uxth	r2, r3
 801ecc0:	897b      	ldrh	r3, [r7, #10]
 801ecc2:	4413      	add	r3, r2
 801ecc4:	b29b      	uxth	r3, r3
 801ecc6:	4619      	mov	r1, r3
 801ecc8:	68f8      	ldr	r0, [r7, #12]
 801ecca:	f7ff f8a5 	bl	801de18 <mem_trim>
 801ecce:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 801ecd0:	68fb      	ldr	r3, [r7, #12]
 801ecd2:	2b00      	cmp	r3, #0
 801ecd4:	d106      	bne.n	801ece4 <pbuf_realloc+0xcc>
 801ecd6:	4b0f      	ldr	r3, [pc, #60]	; (801ed14 <pbuf_realloc+0xfc>)
 801ecd8:	f240 12bd 	movw	r2, #445	; 0x1bd
 801ecdc:	4911      	ldr	r1, [pc, #68]	; (801ed24 <pbuf_realloc+0x10c>)
 801ecde:	480f      	ldr	r0, [pc, #60]	; (801ed1c <pbuf_realloc+0x104>)
 801ece0:	f007 fb26 	bl	8026330 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 801ece4:	68fb      	ldr	r3, [r7, #12]
 801ece6:	897a      	ldrh	r2, [r7, #10]
 801ece8:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 801ecea:	68fb      	ldr	r3, [r7, #12]
 801ecec:	895a      	ldrh	r2, [r3, #10]
 801ecee:	68fb      	ldr	r3, [r7, #12]
 801ecf0:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 801ecf2:	68fb      	ldr	r3, [r7, #12]
 801ecf4:	681b      	ldr	r3, [r3, #0]
 801ecf6:	2b00      	cmp	r3, #0
 801ecf8:	d004      	beq.n	801ed04 <pbuf_realloc+0xec>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 801ecfa:	68fb      	ldr	r3, [r7, #12]
 801ecfc:	681b      	ldr	r3, [r3, #0]
 801ecfe:	4618      	mov	r0, r3
 801ed00:	f000 f912 	bl	801ef28 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 801ed04:	68fb      	ldr	r3, [r7, #12]
 801ed06:	2200      	movs	r2, #0
 801ed08:	601a      	str	r2, [r3, #0]
 801ed0a:	e000      	b.n	801ed0e <pbuf_realloc+0xf6>
    return;
 801ed0c:	bf00      	nop

}
 801ed0e:	3710      	adds	r7, #16
 801ed10:	46bd      	mov	sp, r7
 801ed12:	bd80      	pop	{r7, pc}
 801ed14:	08028bd4 	.word	0x08028bd4
 801ed18:	08028cec 	.word	0x08028cec
 801ed1c:	08028c34 	.word	0x08028c34
 801ed20:	08028d04 	.word	0x08028d04
 801ed24:	08028d1c 	.word	0x08028d1c

0801ed28 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 801ed28:	b580      	push	{r7, lr}
 801ed2a:	b086      	sub	sp, #24
 801ed2c:	af00      	add	r7, sp, #0
 801ed2e:	60f8      	str	r0, [r7, #12]
 801ed30:	60b9      	str	r1, [r7, #8]
 801ed32:	4613      	mov	r3, r2
 801ed34:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801ed36:	68fb      	ldr	r3, [r7, #12]
 801ed38:	2b00      	cmp	r3, #0
 801ed3a:	d106      	bne.n	801ed4a <pbuf_add_header_impl+0x22>
 801ed3c:	4b2c      	ldr	r3, [pc, #176]	; (801edf0 <pbuf_add_header_impl+0xc8>)
 801ed3e:	f240 12df 	movw	r2, #479	; 0x1df
 801ed42:	492c      	ldr	r1, [pc, #176]	; (801edf4 <pbuf_add_header_impl+0xcc>)
 801ed44:	482c      	ldr	r0, [pc, #176]	; (801edf8 <pbuf_add_header_impl+0xd0>)
 801ed46:	f007 faf3 	bl	8026330 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 801ed4a:	68fb      	ldr	r3, [r7, #12]
 801ed4c:	2b00      	cmp	r3, #0
 801ed4e:	d003      	beq.n	801ed58 <pbuf_add_header_impl+0x30>
 801ed50:	68bb      	ldr	r3, [r7, #8]
 801ed52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801ed56:	d301      	bcc.n	801ed5c <pbuf_add_header_impl+0x34>
    return 1;
 801ed58:	2301      	movs	r3, #1
 801ed5a:	e044      	b.n	801ede6 <pbuf_add_header_impl+0xbe>
  }
  if (header_size_increment == 0) {
 801ed5c:	68bb      	ldr	r3, [r7, #8]
 801ed5e:	2b00      	cmp	r3, #0
 801ed60:	d101      	bne.n	801ed66 <pbuf_add_header_impl+0x3e>
    return 0;
 801ed62:	2300      	movs	r3, #0
 801ed64:	e03f      	b.n	801ede6 <pbuf_add_header_impl+0xbe>
  }

  increment_magnitude = (u16_t)header_size_increment;
 801ed66:	68bb      	ldr	r3, [r7, #8]
 801ed68:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 801ed6a:	68fb      	ldr	r3, [r7, #12]
 801ed6c:	891a      	ldrh	r2, [r3, #8]
 801ed6e:	8a7b      	ldrh	r3, [r7, #18]
 801ed70:	4413      	add	r3, r2
 801ed72:	b29b      	uxth	r3, r3
 801ed74:	8a7a      	ldrh	r2, [r7, #18]
 801ed76:	429a      	cmp	r2, r3
 801ed78:	d901      	bls.n	801ed7e <pbuf_add_header_impl+0x56>
    return 1;
 801ed7a:	2301      	movs	r3, #1
 801ed7c:	e033      	b.n	801ede6 <pbuf_add_header_impl+0xbe>
  }

  type_internal = p->type_internal;
 801ed7e:	68fb      	ldr	r3, [r7, #12]
 801ed80:	7b1b      	ldrb	r3, [r3, #12]
 801ed82:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 801ed84:	8a3b      	ldrh	r3, [r7, #16]
 801ed86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801ed8a:	2b00      	cmp	r3, #0
 801ed8c:	d00d      	beq.n	801edaa <pbuf_add_header_impl+0x82>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 801ed8e:	68fb      	ldr	r3, [r7, #12]
 801ed90:	685a      	ldr	r2, [r3, #4]
 801ed92:	68bb      	ldr	r3, [r7, #8]
 801ed94:	425b      	negs	r3, r3
 801ed96:	4413      	add	r3, r2
 801ed98:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 801ed9a:	68fb      	ldr	r3, [r7, #12]
 801ed9c:	f103 0210 	add.w	r2, r3, #16
 801eda0:	697b      	ldr	r3, [r7, #20]
 801eda2:	429a      	cmp	r2, r3
 801eda4:	d90d      	bls.n	801edc2 <pbuf_add_header_impl+0x9a>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 801eda6:	2301      	movs	r3, #1
 801eda8:	e01d      	b.n	801ede6 <pbuf_add_header_impl+0xbe>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 801edaa:	79fb      	ldrb	r3, [r7, #7]
 801edac:	2b00      	cmp	r3, #0
 801edae:	d006      	beq.n	801edbe <pbuf_add_header_impl+0x96>
      payload = (u8_t *)p->payload - header_size_increment;
 801edb0:	68fb      	ldr	r3, [r7, #12]
 801edb2:	685a      	ldr	r2, [r3, #4]
 801edb4:	68bb      	ldr	r3, [r7, #8]
 801edb6:	425b      	negs	r3, r3
 801edb8:	4413      	add	r3, r2
 801edba:	617b      	str	r3, [r7, #20]
 801edbc:	e001      	b.n	801edc2 <pbuf_add_header_impl+0x9a>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 801edbe:	2301      	movs	r3, #1
 801edc0:	e011      	b.n	801ede6 <pbuf_add_header_impl+0xbe>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 801edc2:	68fb      	ldr	r3, [r7, #12]
 801edc4:	697a      	ldr	r2, [r7, #20]
 801edc6:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 801edc8:	68fb      	ldr	r3, [r7, #12]
 801edca:	895a      	ldrh	r2, [r3, #10]
 801edcc:	8a7b      	ldrh	r3, [r7, #18]
 801edce:	4413      	add	r3, r2
 801edd0:	b29a      	uxth	r2, r3
 801edd2:	68fb      	ldr	r3, [r7, #12]
 801edd4:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 801edd6:	68fb      	ldr	r3, [r7, #12]
 801edd8:	891a      	ldrh	r2, [r3, #8]
 801edda:	8a7b      	ldrh	r3, [r7, #18]
 801eddc:	4413      	add	r3, r2
 801edde:	b29a      	uxth	r2, r3
 801ede0:	68fb      	ldr	r3, [r7, #12]
 801ede2:	811a      	strh	r2, [r3, #8]


  return 0;
 801ede4:	2300      	movs	r3, #0
}
 801ede6:	4618      	mov	r0, r3
 801ede8:	3718      	adds	r7, #24
 801edea:	46bd      	mov	sp, r7
 801edec:	bd80      	pop	{r7, pc}
 801edee:	bf00      	nop
 801edf0:	08028bd4 	.word	0x08028bd4
 801edf4:	08028d38 	.word	0x08028d38
 801edf8:	08028c34 	.word	0x08028c34

0801edfc <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 801edfc:	b580      	push	{r7, lr}
 801edfe:	b082      	sub	sp, #8
 801ee00:	af00      	add	r7, sp, #0
 801ee02:	6078      	str	r0, [r7, #4]
 801ee04:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 801ee06:	2200      	movs	r2, #0
 801ee08:	6839      	ldr	r1, [r7, #0]
 801ee0a:	6878      	ldr	r0, [r7, #4]
 801ee0c:	f7ff ff8c 	bl	801ed28 <pbuf_add_header_impl>
 801ee10:	4603      	mov	r3, r0
}
 801ee12:	4618      	mov	r0, r3
 801ee14:	3708      	adds	r7, #8
 801ee16:	46bd      	mov	sp, r7
 801ee18:	bd80      	pop	{r7, pc}
	...

0801ee1c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 801ee1c:	b580      	push	{r7, lr}
 801ee1e:	b084      	sub	sp, #16
 801ee20:	af00      	add	r7, sp, #0
 801ee22:	6078      	str	r0, [r7, #4]
 801ee24:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801ee26:	687b      	ldr	r3, [r7, #4]
 801ee28:	2b00      	cmp	r3, #0
 801ee2a:	d106      	bne.n	801ee3a <pbuf_remove_header+0x1e>
 801ee2c:	4b20      	ldr	r3, [pc, #128]	; (801eeb0 <pbuf_remove_header+0x94>)
 801ee2e:	f240 224b 	movw	r2, #587	; 0x24b
 801ee32:	4920      	ldr	r1, [pc, #128]	; (801eeb4 <pbuf_remove_header+0x98>)
 801ee34:	4820      	ldr	r0, [pc, #128]	; (801eeb8 <pbuf_remove_header+0x9c>)
 801ee36:	f007 fa7b 	bl	8026330 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 801ee3a:	687b      	ldr	r3, [r7, #4]
 801ee3c:	2b00      	cmp	r3, #0
 801ee3e:	d003      	beq.n	801ee48 <pbuf_remove_header+0x2c>
 801ee40:	683b      	ldr	r3, [r7, #0]
 801ee42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801ee46:	d301      	bcc.n	801ee4c <pbuf_remove_header+0x30>
    return 1;
 801ee48:	2301      	movs	r3, #1
 801ee4a:	e02c      	b.n	801eea6 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 801ee4c:	683b      	ldr	r3, [r7, #0]
 801ee4e:	2b00      	cmp	r3, #0
 801ee50:	d101      	bne.n	801ee56 <pbuf_remove_header+0x3a>
    return 0;
 801ee52:	2300      	movs	r3, #0
 801ee54:	e027      	b.n	801eea6 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 801ee56:	683b      	ldr	r3, [r7, #0]
 801ee58:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 801ee5a:	687b      	ldr	r3, [r7, #4]
 801ee5c:	895b      	ldrh	r3, [r3, #10]
 801ee5e:	89fa      	ldrh	r2, [r7, #14]
 801ee60:	429a      	cmp	r2, r3
 801ee62:	d908      	bls.n	801ee76 <pbuf_remove_header+0x5a>
 801ee64:	4b12      	ldr	r3, [pc, #72]	; (801eeb0 <pbuf_remove_header+0x94>)
 801ee66:	f240 2255 	movw	r2, #597	; 0x255
 801ee6a:	4914      	ldr	r1, [pc, #80]	; (801eebc <pbuf_remove_header+0xa0>)
 801ee6c:	4812      	ldr	r0, [pc, #72]	; (801eeb8 <pbuf_remove_header+0x9c>)
 801ee6e:	f007 fa5f 	bl	8026330 <iprintf>
 801ee72:	2301      	movs	r3, #1
 801ee74:	e017      	b.n	801eea6 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 801ee76:	687b      	ldr	r3, [r7, #4]
 801ee78:	685b      	ldr	r3, [r3, #4]
 801ee7a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 801ee7c:	687b      	ldr	r3, [r7, #4]
 801ee7e:	685a      	ldr	r2, [r3, #4]
 801ee80:	683b      	ldr	r3, [r7, #0]
 801ee82:	441a      	add	r2, r3
 801ee84:	687b      	ldr	r3, [r7, #4]
 801ee86:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 801ee88:	687b      	ldr	r3, [r7, #4]
 801ee8a:	895a      	ldrh	r2, [r3, #10]
 801ee8c:	89fb      	ldrh	r3, [r7, #14]
 801ee8e:	1ad3      	subs	r3, r2, r3
 801ee90:	b29a      	uxth	r2, r3
 801ee92:	687b      	ldr	r3, [r7, #4]
 801ee94:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 801ee96:	687b      	ldr	r3, [r7, #4]
 801ee98:	891a      	ldrh	r2, [r3, #8]
 801ee9a:	89fb      	ldrh	r3, [r7, #14]
 801ee9c:	1ad3      	subs	r3, r2, r3
 801ee9e:	b29a      	uxth	r2, r3
 801eea0:	687b      	ldr	r3, [r7, #4]
 801eea2:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 801eea4:	2300      	movs	r3, #0
}
 801eea6:	4618      	mov	r0, r3
 801eea8:	3710      	adds	r7, #16
 801eeaa:	46bd      	mov	sp, r7
 801eeac:	bd80      	pop	{r7, pc}
 801eeae:	bf00      	nop
 801eeb0:	08028bd4 	.word	0x08028bd4
 801eeb4:	08028d38 	.word	0x08028d38
 801eeb8:	08028c34 	.word	0x08028c34
 801eebc:	08028d44 	.word	0x08028d44

0801eec0 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 801eec0:	b580      	push	{r7, lr}
 801eec2:	b082      	sub	sp, #8
 801eec4:	af00      	add	r7, sp, #0
 801eec6:	6078      	str	r0, [r7, #4]
 801eec8:	460b      	mov	r3, r1
 801eeca:	807b      	strh	r3, [r7, #2]
 801eecc:	4613      	mov	r3, r2
 801eece:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 801eed0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801eed4:	2b00      	cmp	r3, #0
 801eed6:	da08      	bge.n	801eeea <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 801eed8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801eedc:	425b      	negs	r3, r3
 801eede:	4619      	mov	r1, r3
 801eee0:	6878      	ldr	r0, [r7, #4]
 801eee2:	f7ff ff9b 	bl	801ee1c <pbuf_remove_header>
 801eee6:	4603      	mov	r3, r0
 801eee8:	e007      	b.n	801eefa <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 801eeea:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801eeee:	787a      	ldrb	r2, [r7, #1]
 801eef0:	4619      	mov	r1, r3
 801eef2:	6878      	ldr	r0, [r7, #4]
 801eef4:	f7ff ff18 	bl	801ed28 <pbuf_add_header_impl>
 801eef8:	4603      	mov	r3, r0
  }
}
 801eefa:	4618      	mov	r0, r3
 801eefc:	3708      	adds	r7, #8
 801eefe:	46bd      	mov	sp, r7
 801ef00:	bd80      	pop	{r7, pc}

0801ef02 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 801ef02:	b580      	push	{r7, lr}
 801ef04:	b082      	sub	sp, #8
 801ef06:	af00      	add	r7, sp, #0
 801ef08:	6078      	str	r0, [r7, #4]
 801ef0a:	460b      	mov	r3, r1
 801ef0c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 801ef0e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801ef12:	2201      	movs	r2, #1
 801ef14:	4619      	mov	r1, r3
 801ef16:	6878      	ldr	r0, [r7, #4]
 801ef18:	f7ff ffd2 	bl	801eec0 <pbuf_header_impl>
 801ef1c:	4603      	mov	r3, r0
}
 801ef1e:	4618      	mov	r0, r3
 801ef20:	3708      	adds	r7, #8
 801ef22:	46bd      	mov	sp, r7
 801ef24:	bd80      	pop	{r7, pc}
	...

0801ef28 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 801ef28:	b580      	push	{r7, lr}
 801ef2a:	b088      	sub	sp, #32
 801ef2c:	af00      	add	r7, sp, #0
 801ef2e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 801ef30:	687b      	ldr	r3, [r7, #4]
 801ef32:	2b00      	cmp	r3, #0
 801ef34:	d10b      	bne.n	801ef4e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 801ef36:	687b      	ldr	r3, [r7, #4]
 801ef38:	2b00      	cmp	r3, #0
 801ef3a:	d106      	bne.n	801ef4a <pbuf_free+0x22>
 801ef3c:	4b3b      	ldr	r3, [pc, #236]	; (801f02c <pbuf_free+0x104>)
 801ef3e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 801ef42:	493b      	ldr	r1, [pc, #236]	; (801f030 <pbuf_free+0x108>)
 801ef44:	483b      	ldr	r0, [pc, #236]	; (801f034 <pbuf_free+0x10c>)
 801ef46:	f007 f9f3 	bl	8026330 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 801ef4a:	2300      	movs	r3, #0
 801ef4c:	e069      	b.n	801f022 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 801ef4e:	2300      	movs	r3, #0
 801ef50:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 801ef52:	e062      	b.n	801f01a <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 801ef54:	f007 f890 	bl	8026078 <sys_arch_protect>
 801ef58:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 801ef5a:	687b      	ldr	r3, [r7, #4]
 801ef5c:	7b9b      	ldrb	r3, [r3, #14]
 801ef5e:	2b00      	cmp	r3, #0
 801ef60:	d106      	bne.n	801ef70 <pbuf_free+0x48>
 801ef62:	4b32      	ldr	r3, [pc, #200]	; (801f02c <pbuf_free+0x104>)
 801ef64:	f240 22f1 	movw	r2, #753	; 0x2f1
 801ef68:	4933      	ldr	r1, [pc, #204]	; (801f038 <pbuf_free+0x110>)
 801ef6a:	4832      	ldr	r0, [pc, #200]	; (801f034 <pbuf_free+0x10c>)
 801ef6c:	f007 f9e0 	bl	8026330 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 801ef70:	687b      	ldr	r3, [r7, #4]
 801ef72:	7b9b      	ldrb	r3, [r3, #14]
 801ef74:	3b01      	subs	r3, #1
 801ef76:	b2da      	uxtb	r2, r3
 801ef78:	687b      	ldr	r3, [r7, #4]
 801ef7a:	739a      	strb	r2, [r3, #14]
 801ef7c:	687b      	ldr	r3, [r7, #4]
 801ef7e:	7b9b      	ldrb	r3, [r3, #14]
 801ef80:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 801ef82:	69b8      	ldr	r0, [r7, #24]
 801ef84:	f007 f886 	bl	8026094 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 801ef88:	7dfb      	ldrb	r3, [r7, #23]
 801ef8a:	2b00      	cmp	r3, #0
 801ef8c:	d143      	bne.n	801f016 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 801ef8e:	687b      	ldr	r3, [r7, #4]
 801ef90:	681b      	ldr	r3, [r3, #0]
 801ef92:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 801ef94:	687b      	ldr	r3, [r7, #4]
 801ef96:	7b1b      	ldrb	r3, [r3, #12]
 801ef98:	f003 030f 	and.w	r3, r3, #15
 801ef9c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 801ef9e:	687b      	ldr	r3, [r7, #4]
 801efa0:	7b5b      	ldrb	r3, [r3, #13]
 801efa2:	f003 0302 	and.w	r3, r3, #2
 801efa6:	2b00      	cmp	r3, #0
 801efa8:	d011      	beq.n	801efce <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 801efaa:	687b      	ldr	r3, [r7, #4]
 801efac:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 801efae:	68bb      	ldr	r3, [r7, #8]
 801efb0:	691b      	ldr	r3, [r3, #16]
 801efb2:	2b00      	cmp	r3, #0
 801efb4:	d106      	bne.n	801efc4 <pbuf_free+0x9c>
 801efb6:	4b1d      	ldr	r3, [pc, #116]	; (801f02c <pbuf_free+0x104>)
 801efb8:	f240 22ff 	movw	r2, #767	; 0x2ff
 801efbc:	491f      	ldr	r1, [pc, #124]	; (801f03c <pbuf_free+0x114>)
 801efbe:	481d      	ldr	r0, [pc, #116]	; (801f034 <pbuf_free+0x10c>)
 801efc0:	f007 f9b6 	bl	8026330 <iprintf>
        pc->custom_free_function(p);
 801efc4:	68bb      	ldr	r3, [r7, #8]
 801efc6:	691b      	ldr	r3, [r3, #16]
 801efc8:	6878      	ldr	r0, [r7, #4]
 801efca:	4798      	blx	r3
 801efcc:	e01d      	b.n	801f00a <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 801efce:	7bfb      	ldrb	r3, [r7, #15]
 801efd0:	2b02      	cmp	r3, #2
 801efd2:	d104      	bne.n	801efde <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 801efd4:	6879      	ldr	r1, [r7, #4]
 801efd6:	200d      	movs	r0, #13
 801efd8:	f7ff f9fe 	bl	801e3d8 <memp_free>
 801efdc:	e015      	b.n	801f00a <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 801efde:	7bfb      	ldrb	r3, [r7, #15]
 801efe0:	2b01      	cmp	r3, #1
 801efe2:	d104      	bne.n	801efee <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 801efe4:	6879      	ldr	r1, [r7, #4]
 801efe6:	200c      	movs	r0, #12
 801efe8:	f7ff f9f6 	bl	801e3d8 <memp_free>
 801efec:	e00d      	b.n	801f00a <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 801efee:	7bfb      	ldrb	r3, [r7, #15]
 801eff0:	2b00      	cmp	r3, #0
 801eff2:	d103      	bne.n	801effc <pbuf_free+0xd4>
          mem_free(p);
 801eff4:	6878      	ldr	r0, [r7, #4]
 801eff6:	f7fe fe7d 	bl	801dcf4 <mem_free>
 801effa:	e006      	b.n	801f00a <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 801effc:	4b0b      	ldr	r3, [pc, #44]	; (801f02c <pbuf_free+0x104>)
 801effe:	f240 320f 	movw	r2, #783	; 0x30f
 801f002:	490f      	ldr	r1, [pc, #60]	; (801f040 <pbuf_free+0x118>)
 801f004:	480b      	ldr	r0, [pc, #44]	; (801f034 <pbuf_free+0x10c>)
 801f006:	f007 f993 	bl	8026330 <iprintf>
        }
      }
      count++;
 801f00a:	7ffb      	ldrb	r3, [r7, #31]
 801f00c:	3301      	adds	r3, #1
 801f00e:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 801f010:	693b      	ldr	r3, [r7, #16]
 801f012:	607b      	str	r3, [r7, #4]
 801f014:	e001      	b.n	801f01a <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 801f016:	2300      	movs	r3, #0
 801f018:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801f01a:	687b      	ldr	r3, [r7, #4]
 801f01c:	2b00      	cmp	r3, #0
 801f01e:	d199      	bne.n	801ef54 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 801f020:	7ffb      	ldrb	r3, [r7, #31]
}
 801f022:	4618      	mov	r0, r3
 801f024:	3720      	adds	r7, #32
 801f026:	46bd      	mov	sp, r7
 801f028:	bd80      	pop	{r7, pc}
 801f02a:	bf00      	nop
 801f02c:	08028bd4 	.word	0x08028bd4
 801f030:	08028d38 	.word	0x08028d38
 801f034:	08028c34 	.word	0x08028c34
 801f038:	08028d64 	.word	0x08028d64
 801f03c:	08028d7c 	.word	0x08028d7c
 801f040:	08028da0 	.word	0x08028da0

0801f044 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 801f044:	b480      	push	{r7}
 801f046:	b085      	sub	sp, #20
 801f048:	af00      	add	r7, sp, #0
 801f04a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 801f04c:	2300      	movs	r3, #0
 801f04e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 801f050:	e005      	b.n	801f05e <pbuf_clen+0x1a>
    ++len;
 801f052:	89fb      	ldrh	r3, [r7, #14]
 801f054:	3301      	adds	r3, #1
 801f056:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 801f058:	687b      	ldr	r3, [r7, #4]
 801f05a:	681b      	ldr	r3, [r3, #0]
 801f05c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801f05e:	687b      	ldr	r3, [r7, #4]
 801f060:	2b00      	cmp	r3, #0
 801f062:	d1f6      	bne.n	801f052 <pbuf_clen+0xe>
  }
  return len;
 801f064:	89fb      	ldrh	r3, [r7, #14]
}
 801f066:	4618      	mov	r0, r3
 801f068:	3714      	adds	r7, #20
 801f06a:	46bd      	mov	sp, r7
 801f06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f070:	4770      	bx	lr
	...

0801f074 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 801f074:	b580      	push	{r7, lr}
 801f076:	b084      	sub	sp, #16
 801f078:	af00      	add	r7, sp, #0
 801f07a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 801f07c:	687b      	ldr	r3, [r7, #4]
 801f07e:	2b00      	cmp	r3, #0
 801f080:	d016      	beq.n	801f0b0 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 801f082:	f006 fff9 	bl	8026078 <sys_arch_protect>
 801f086:	60f8      	str	r0, [r7, #12]
 801f088:	687b      	ldr	r3, [r7, #4]
 801f08a:	7b9b      	ldrb	r3, [r3, #14]
 801f08c:	3301      	adds	r3, #1
 801f08e:	b2da      	uxtb	r2, r3
 801f090:	687b      	ldr	r3, [r7, #4]
 801f092:	739a      	strb	r2, [r3, #14]
 801f094:	68f8      	ldr	r0, [r7, #12]
 801f096:	f006 fffd 	bl	8026094 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801f09a:	687b      	ldr	r3, [r7, #4]
 801f09c:	7b9b      	ldrb	r3, [r3, #14]
 801f09e:	2b00      	cmp	r3, #0
 801f0a0:	d106      	bne.n	801f0b0 <pbuf_ref+0x3c>
 801f0a2:	4b05      	ldr	r3, [pc, #20]	; (801f0b8 <pbuf_ref+0x44>)
 801f0a4:	f240 3242 	movw	r2, #834	; 0x342
 801f0a8:	4904      	ldr	r1, [pc, #16]	; (801f0bc <pbuf_ref+0x48>)
 801f0aa:	4805      	ldr	r0, [pc, #20]	; (801f0c0 <pbuf_ref+0x4c>)
 801f0ac:	f007 f940 	bl	8026330 <iprintf>
  }
}
 801f0b0:	bf00      	nop
 801f0b2:	3710      	adds	r7, #16
 801f0b4:	46bd      	mov	sp, r7
 801f0b6:	bd80      	pop	{r7, pc}
 801f0b8:	08028bd4 	.word	0x08028bd4
 801f0bc:	08028db4 	.word	0x08028db4
 801f0c0:	08028c34 	.word	0x08028c34

0801f0c4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 801f0c4:	b580      	push	{r7, lr}
 801f0c6:	b084      	sub	sp, #16
 801f0c8:	af00      	add	r7, sp, #0
 801f0ca:	6078      	str	r0, [r7, #4]
 801f0cc:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 801f0ce:	687b      	ldr	r3, [r7, #4]
 801f0d0:	2b00      	cmp	r3, #0
 801f0d2:	d002      	beq.n	801f0da <pbuf_cat+0x16>
 801f0d4:	683b      	ldr	r3, [r7, #0]
 801f0d6:	2b00      	cmp	r3, #0
 801f0d8:	d107      	bne.n	801f0ea <pbuf_cat+0x26>
 801f0da:	4b20      	ldr	r3, [pc, #128]	; (801f15c <pbuf_cat+0x98>)
 801f0dc:	f240 325a 	movw	r2, #858	; 0x35a
 801f0e0:	491f      	ldr	r1, [pc, #124]	; (801f160 <pbuf_cat+0x9c>)
 801f0e2:	4820      	ldr	r0, [pc, #128]	; (801f164 <pbuf_cat+0xa0>)
 801f0e4:	f007 f924 	bl	8026330 <iprintf>
 801f0e8:	e034      	b.n	801f154 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 801f0ea:	687b      	ldr	r3, [r7, #4]
 801f0ec:	60fb      	str	r3, [r7, #12]
 801f0ee:	e00a      	b.n	801f106 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801f0f0:	68fb      	ldr	r3, [r7, #12]
 801f0f2:	891a      	ldrh	r2, [r3, #8]
 801f0f4:	683b      	ldr	r3, [r7, #0]
 801f0f6:	891b      	ldrh	r3, [r3, #8]
 801f0f8:	4413      	add	r3, r2
 801f0fa:	b29a      	uxth	r2, r3
 801f0fc:	68fb      	ldr	r3, [r7, #12]
 801f0fe:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 801f100:	68fb      	ldr	r3, [r7, #12]
 801f102:	681b      	ldr	r3, [r3, #0]
 801f104:	60fb      	str	r3, [r7, #12]
 801f106:	68fb      	ldr	r3, [r7, #12]
 801f108:	681b      	ldr	r3, [r3, #0]
 801f10a:	2b00      	cmp	r3, #0
 801f10c:	d1f0      	bne.n	801f0f0 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 801f10e:	68fb      	ldr	r3, [r7, #12]
 801f110:	891a      	ldrh	r2, [r3, #8]
 801f112:	68fb      	ldr	r3, [r7, #12]
 801f114:	895b      	ldrh	r3, [r3, #10]
 801f116:	429a      	cmp	r2, r3
 801f118:	d006      	beq.n	801f128 <pbuf_cat+0x64>
 801f11a:	4b10      	ldr	r3, [pc, #64]	; (801f15c <pbuf_cat+0x98>)
 801f11c:	f240 3262 	movw	r2, #866	; 0x362
 801f120:	4911      	ldr	r1, [pc, #68]	; (801f168 <pbuf_cat+0xa4>)
 801f122:	4810      	ldr	r0, [pc, #64]	; (801f164 <pbuf_cat+0xa0>)
 801f124:	f007 f904 	bl	8026330 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 801f128:	68fb      	ldr	r3, [r7, #12]
 801f12a:	681b      	ldr	r3, [r3, #0]
 801f12c:	2b00      	cmp	r3, #0
 801f12e:	d006      	beq.n	801f13e <pbuf_cat+0x7a>
 801f130:	4b0a      	ldr	r3, [pc, #40]	; (801f15c <pbuf_cat+0x98>)
 801f132:	f240 3263 	movw	r2, #867	; 0x363
 801f136:	490d      	ldr	r1, [pc, #52]	; (801f16c <pbuf_cat+0xa8>)
 801f138:	480a      	ldr	r0, [pc, #40]	; (801f164 <pbuf_cat+0xa0>)
 801f13a:	f007 f8f9 	bl	8026330 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801f13e:	68fb      	ldr	r3, [r7, #12]
 801f140:	891a      	ldrh	r2, [r3, #8]
 801f142:	683b      	ldr	r3, [r7, #0]
 801f144:	891b      	ldrh	r3, [r3, #8]
 801f146:	4413      	add	r3, r2
 801f148:	b29a      	uxth	r2, r3
 801f14a:	68fb      	ldr	r3, [r7, #12]
 801f14c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 801f14e:	68fb      	ldr	r3, [r7, #12]
 801f150:	683a      	ldr	r2, [r7, #0]
 801f152:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 801f154:	3710      	adds	r7, #16
 801f156:	46bd      	mov	sp, r7
 801f158:	bd80      	pop	{r7, pc}
 801f15a:	bf00      	nop
 801f15c:	08028bd4 	.word	0x08028bd4
 801f160:	08028dc8 	.word	0x08028dc8
 801f164:	08028c34 	.word	0x08028c34
 801f168:	08028e00 	.word	0x08028e00
 801f16c:	08028e30 	.word	0x08028e30

0801f170 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 801f170:	b580      	push	{r7, lr}
 801f172:	b082      	sub	sp, #8
 801f174:	af00      	add	r7, sp, #0
 801f176:	6078      	str	r0, [r7, #4]
 801f178:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 801f17a:	6839      	ldr	r1, [r7, #0]
 801f17c:	6878      	ldr	r0, [r7, #4]
 801f17e:	f7ff ffa1 	bl	801f0c4 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 801f182:	6838      	ldr	r0, [r7, #0]
 801f184:	f7ff ff76 	bl	801f074 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 801f188:	bf00      	nop
 801f18a:	3708      	adds	r7, #8
 801f18c:	46bd      	mov	sp, r7
 801f18e:	bd80      	pop	{r7, pc}

0801f190 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 801f190:	b580      	push	{r7, lr}
 801f192:	b086      	sub	sp, #24
 801f194:	af00      	add	r7, sp, #0
 801f196:	6078      	str	r0, [r7, #4]
 801f198:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 801f19a:	2300      	movs	r3, #0
 801f19c:	617b      	str	r3, [r7, #20]
 801f19e:	2300      	movs	r3, #0
 801f1a0:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801f1a2:	687b      	ldr	r3, [r7, #4]
 801f1a4:	2b00      	cmp	r3, #0
 801f1a6:	d008      	beq.n	801f1ba <pbuf_copy+0x2a>
 801f1a8:	683b      	ldr	r3, [r7, #0]
 801f1aa:	2b00      	cmp	r3, #0
 801f1ac:	d005      	beq.n	801f1ba <pbuf_copy+0x2a>
 801f1ae:	687b      	ldr	r3, [r7, #4]
 801f1b0:	891a      	ldrh	r2, [r3, #8]
 801f1b2:	683b      	ldr	r3, [r7, #0]
 801f1b4:	891b      	ldrh	r3, [r3, #8]
 801f1b6:	429a      	cmp	r2, r3
 801f1b8:	d209      	bcs.n	801f1ce <pbuf_copy+0x3e>
 801f1ba:	4b57      	ldr	r3, [pc, #348]	; (801f318 <pbuf_copy+0x188>)
 801f1bc:	f240 32ca 	movw	r2, #970	; 0x3ca
 801f1c0:	4956      	ldr	r1, [pc, #344]	; (801f31c <pbuf_copy+0x18c>)
 801f1c2:	4857      	ldr	r0, [pc, #348]	; (801f320 <pbuf_copy+0x190>)
 801f1c4:	f007 f8b4 	bl	8026330 <iprintf>
 801f1c8:	f06f 030f 	mvn.w	r3, #15
 801f1cc:	e09f      	b.n	801f30e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 801f1ce:	687b      	ldr	r3, [r7, #4]
 801f1d0:	895b      	ldrh	r3, [r3, #10]
 801f1d2:	461a      	mov	r2, r3
 801f1d4:	697b      	ldr	r3, [r7, #20]
 801f1d6:	1ad2      	subs	r2, r2, r3
 801f1d8:	683b      	ldr	r3, [r7, #0]
 801f1da:	895b      	ldrh	r3, [r3, #10]
 801f1dc:	4619      	mov	r1, r3
 801f1de:	693b      	ldr	r3, [r7, #16]
 801f1e0:	1acb      	subs	r3, r1, r3
 801f1e2:	429a      	cmp	r2, r3
 801f1e4:	d306      	bcc.n	801f1f4 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 801f1e6:	683b      	ldr	r3, [r7, #0]
 801f1e8:	895b      	ldrh	r3, [r3, #10]
 801f1ea:	461a      	mov	r2, r3
 801f1ec:	693b      	ldr	r3, [r7, #16]
 801f1ee:	1ad3      	subs	r3, r2, r3
 801f1f0:	60fb      	str	r3, [r7, #12]
 801f1f2:	e005      	b.n	801f200 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 801f1f4:	687b      	ldr	r3, [r7, #4]
 801f1f6:	895b      	ldrh	r3, [r3, #10]
 801f1f8:	461a      	mov	r2, r3
 801f1fa:	697b      	ldr	r3, [r7, #20]
 801f1fc:	1ad3      	subs	r3, r2, r3
 801f1fe:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 801f200:	687b      	ldr	r3, [r7, #4]
 801f202:	685a      	ldr	r2, [r3, #4]
 801f204:	697b      	ldr	r3, [r7, #20]
 801f206:	18d0      	adds	r0, r2, r3
 801f208:	683b      	ldr	r3, [r7, #0]
 801f20a:	685a      	ldr	r2, [r3, #4]
 801f20c:	693b      	ldr	r3, [r7, #16]
 801f20e:	4413      	add	r3, r2
 801f210:	68fa      	ldr	r2, [r7, #12]
 801f212:	4619      	mov	r1, r3
 801f214:	f006 ffb3 	bl	802617e <memcpy>
    offset_to += len;
 801f218:	697a      	ldr	r2, [r7, #20]
 801f21a:	68fb      	ldr	r3, [r7, #12]
 801f21c:	4413      	add	r3, r2
 801f21e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 801f220:	693a      	ldr	r2, [r7, #16]
 801f222:	68fb      	ldr	r3, [r7, #12]
 801f224:	4413      	add	r3, r2
 801f226:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 801f228:	687b      	ldr	r3, [r7, #4]
 801f22a:	895b      	ldrh	r3, [r3, #10]
 801f22c:	461a      	mov	r2, r3
 801f22e:	697b      	ldr	r3, [r7, #20]
 801f230:	429a      	cmp	r2, r3
 801f232:	d206      	bcs.n	801f242 <pbuf_copy+0xb2>
 801f234:	4b38      	ldr	r3, [pc, #224]	; (801f318 <pbuf_copy+0x188>)
 801f236:	f240 32d9 	movw	r2, #985	; 0x3d9
 801f23a:	493a      	ldr	r1, [pc, #232]	; (801f324 <pbuf_copy+0x194>)
 801f23c:	4838      	ldr	r0, [pc, #224]	; (801f320 <pbuf_copy+0x190>)
 801f23e:	f007 f877 	bl	8026330 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 801f242:	683b      	ldr	r3, [r7, #0]
 801f244:	895b      	ldrh	r3, [r3, #10]
 801f246:	461a      	mov	r2, r3
 801f248:	693b      	ldr	r3, [r7, #16]
 801f24a:	429a      	cmp	r2, r3
 801f24c:	d206      	bcs.n	801f25c <pbuf_copy+0xcc>
 801f24e:	4b32      	ldr	r3, [pc, #200]	; (801f318 <pbuf_copy+0x188>)
 801f250:	f240 32da 	movw	r2, #986	; 0x3da
 801f254:	4934      	ldr	r1, [pc, #208]	; (801f328 <pbuf_copy+0x198>)
 801f256:	4832      	ldr	r0, [pc, #200]	; (801f320 <pbuf_copy+0x190>)
 801f258:	f007 f86a 	bl	8026330 <iprintf>
    if (offset_from >= p_from->len) {
 801f25c:	683b      	ldr	r3, [r7, #0]
 801f25e:	895b      	ldrh	r3, [r3, #10]
 801f260:	461a      	mov	r2, r3
 801f262:	693b      	ldr	r3, [r7, #16]
 801f264:	429a      	cmp	r2, r3
 801f266:	d804      	bhi.n	801f272 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 801f268:	2300      	movs	r3, #0
 801f26a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 801f26c:	683b      	ldr	r3, [r7, #0]
 801f26e:	681b      	ldr	r3, [r3, #0]
 801f270:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 801f272:	687b      	ldr	r3, [r7, #4]
 801f274:	895b      	ldrh	r3, [r3, #10]
 801f276:	461a      	mov	r2, r3
 801f278:	697b      	ldr	r3, [r7, #20]
 801f27a:	429a      	cmp	r2, r3
 801f27c:	d114      	bne.n	801f2a8 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 801f27e:	2300      	movs	r3, #0
 801f280:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 801f282:	687b      	ldr	r3, [r7, #4]
 801f284:	681b      	ldr	r3, [r3, #0]
 801f286:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 801f288:	687b      	ldr	r3, [r7, #4]
 801f28a:	2b00      	cmp	r3, #0
 801f28c:	d10c      	bne.n	801f2a8 <pbuf_copy+0x118>
 801f28e:	683b      	ldr	r3, [r7, #0]
 801f290:	2b00      	cmp	r3, #0
 801f292:	d009      	beq.n	801f2a8 <pbuf_copy+0x118>
 801f294:	4b20      	ldr	r3, [pc, #128]	; (801f318 <pbuf_copy+0x188>)
 801f296:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 801f29a:	4924      	ldr	r1, [pc, #144]	; (801f32c <pbuf_copy+0x19c>)
 801f29c:	4820      	ldr	r0, [pc, #128]	; (801f320 <pbuf_copy+0x190>)
 801f29e:	f007 f847 	bl	8026330 <iprintf>
 801f2a2:	f06f 030f 	mvn.w	r3, #15
 801f2a6:	e032      	b.n	801f30e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 801f2a8:	683b      	ldr	r3, [r7, #0]
 801f2aa:	2b00      	cmp	r3, #0
 801f2ac:	d013      	beq.n	801f2d6 <pbuf_copy+0x146>
 801f2ae:	683b      	ldr	r3, [r7, #0]
 801f2b0:	895a      	ldrh	r2, [r3, #10]
 801f2b2:	683b      	ldr	r3, [r7, #0]
 801f2b4:	891b      	ldrh	r3, [r3, #8]
 801f2b6:	429a      	cmp	r2, r3
 801f2b8:	d10d      	bne.n	801f2d6 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801f2ba:	683b      	ldr	r3, [r7, #0]
 801f2bc:	681b      	ldr	r3, [r3, #0]
 801f2be:	2b00      	cmp	r3, #0
 801f2c0:	d009      	beq.n	801f2d6 <pbuf_copy+0x146>
 801f2c2:	4b15      	ldr	r3, [pc, #84]	; (801f318 <pbuf_copy+0x188>)
 801f2c4:	f240 32ea 	movw	r2, #1002	; 0x3ea
 801f2c8:	4919      	ldr	r1, [pc, #100]	; (801f330 <pbuf_copy+0x1a0>)
 801f2ca:	4815      	ldr	r0, [pc, #84]	; (801f320 <pbuf_copy+0x190>)
 801f2cc:	f007 f830 	bl	8026330 <iprintf>
 801f2d0:	f06f 0305 	mvn.w	r3, #5
 801f2d4:	e01b      	b.n	801f30e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 801f2d6:	687b      	ldr	r3, [r7, #4]
 801f2d8:	2b00      	cmp	r3, #0
 801f2da:	d013      	beq.n	801f304 <pbuf_copy+0x174>
 801f2dc:	687b      	ldr	r3, [r7, #4]
 801f2de:	895a      	ldrh	r2, [r3, #10]
 801f2e0:	687b      	ldr	r3, [r7, #4]
 801f2e2:	891b      	ldrh	r3, [r3, #8]
 801f2e4:	429a      	cmp	r2, r3
 801f2e6:	d10d      	bne.n	801f304 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801f2e8:	687b      	ldr	r3, [r7, #4]
 801f2ea:	681b      	ldr	r3, [r3, #0]
 801f2ec:	2b00      	cmp	r3, #0
 801f2ee:	d009      	beq.n	801f304 <pbuf_copy+0x174>
 801f2f0:	4b09      	ldr	r3, [pc, #36]	; (801f318 <pbuf_copy+0x188>)
 801f2f2:	f240 32ef 	movw	r2, #1007	; 0x3ef
 801f2f6:	490e      	ldr	r1, [pc, #56]	; (801f330 <pbuf_copy+0x1a0>)
 801f2f8:	4809      	ldr	r0, [pc, #36]	; (801f320 <pbuf_copy+0x190>)
 801f2fa:	f007 f819 	bl	8026330 <iprintf>
 801f2fe:	f06f 0305 	mvn.w	r3, #5
 801f302:	e004      	b.n	801f30e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 801f304:	683b      	ldr	r3, [r7, #0]
 801f306:	2b00      	cmp	r3, #0
 801f308:	f47f af61 	bne.w	801f1ce <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 801f30c:	2300      	movs	r3, #0
}
 801f30e:	4618      	mov	r0, r3
 801f310:	3718      	adds	r7, #24
 801f312:	46bd      	mov	sp, r7
 801f314:	bd80      	pop	{r7, pc}
 801f316:	bf00      	nop
 801f318:	08028bd4 	.word	0x08028bd4
 801f31c:	08028e7c 	.word	0x08028e7c
 801f320:	08028c34 	.word	0x08028c34
 801f324:	08028eac 	.word	0x08028eac
 801f328:	08028ec4 	.word	0x08028ec4
 801f32c:	08028ee0 	.word	0x08028ee0
 801f330:	08028ef0 	.word	0x08028ef0

0801f334 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 801f334:	b580      	push	{r7, lr}
 801f336:	b088      	sub	sp, #32
 801f338:	af00      	add	r7, sp, #0
 801f33a:	60f8      	str	r0, [r7, #12]
 801f33c:	60b9      	str	r1, [r7, #8]
 801f33e:	4611      	mov	r1, r2
 801f340:	461a      	mov	r2, r3
 801f342:	460b      	mov	r3, r1
 801f344:	80fb      	strh	r3, [r7, #6]
 801f346:	4613      	mov	r3, r2
 801f348:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 801f34a:	2300      	movs	r3, #0
 801f34c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 801f34e:	2300      	movs	r3, #0
 801f350:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 801f352:	68fb      	ldr	r3, [r7, #12]
 801f354:	2b00      	cmp	r3, #0
 801f356:	d108      	bne.n	801f36a <pbuf_copy_partial+0x36>
 801f358:	4b2b      	ldr	r3, [pc, #172]	; (801f408 <pbuf_copy_partial+0xd4>)
 801f35a:	f240 420a 	movw	r2, #1034	; 0x40a
 801f35e:	492b      	ldr	r1, [pc, #172]	; (801f40c <pbuf_copy_partial+0xd8>)
 801f360:	482b      	ldr	r0, [pc, #172]	; (801f410 <pbuf_copy_partial+0xdc>)
 801f362:	f006 ffe5 	bl	8026330 <iprintf>
 801f366:	2300      	movs	r3, #0
 801f368:	e04a      	b.n	801f400 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 801f36a:	68bb      	ldr	r3, [r7, #8]
 801f36c:	2b00      	cmp	r3, #0
 801f36e:	d108      	bne.n	801f382 <pbuf_copy_partial+0x4e>
 801f370:	4b25      	ldr	r3, [pc, #148]	; (801f408 <pbuf_copy_partial+0xd4>)
 801f372:	f240 420b 	movw	r2, #1035	; 0x40b
 801f376:	4927      	ldr	r1, [pc, #156]	; (801f414 <pbuf_copy_partial+0xe0>)
 801f378:	4825      	ldr	r0, [pc, #148]	; (801f410 <pbuf_copy_partial+0xdc>)
 801f37a:	f006 ffd9 	bl	8026330 <iprintf>
 801f37e:	2300      	movs	r3, #0
 801f380:	e03e      	b.n	801f400 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801f382:	68fb      	ldr	r3, [r7, #12]
 801f384:	61fb      	str	r3, [r7, #28]
 801f386:	e034      	b.n	801f3f2 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 801f388:	88bb      	ldrh	r3, [r7, #4]
 801f38a:	2b00      	cmp	r3, #0
 801f38c:	d00a      	beq.n	801f3a4 <pbuf_copy_partial+0x70>
 801f38e:	69fb      	ldr	r3, [r7, #28]
 801f390:	895b      	ldrh	r3, [r3, #10]
 801f392:	88ba      	ldrh	r2, [r7, #4]
 801f394:	429a      	cmp	r2, r3
 801f396:	d305      	bcc.n	801f3a4 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 801f398:	69fb      	ldr	r3, [r7, #28]
 801f39a:	895b      	ldrh	r3, [r3, #10]
 801f39c:	88ba      	ldrh	r2, [r7, #4]
 801f39e:	1ad3      	subs	r3, r2, r3
 801f3a0:	80bb      	strh	r3, [r7, #4]
 801f3a2:	e023      	b.n	801f3ec <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 801f3a4:	69fb      	ldr	r3, [r7, #28]
 801f3a6:	895a      	ldrh	r2, [r3, #10]
 801f3a8:	88bb      	ldrh	r3, [r7, #4]
 801f3aa:	1ad3      	subs	r3, r2, r3
 801f3ac:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 801f3ae:	8b3a      	ldrh	r2, [r7, #24]
 801f3b0:	88fb      	ldrh	r3, [r7, #6]
 801f3b2:	429a      	cmp	r2, r3
 801f3b4:	d901      	bls.n	801f3ba <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 801f3b6:	88fb      	ldrh	r3, [r7, #6]
 801f3b8:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 801f3ba:	8b7b      	ldrh	r3, [r7, #26]
 801f3bc:	68ba      	ldr	r2, [r7, #8]
 801f3be:	18d0      	adds	r0, r2, r3
 801f3c0:	69fb      	ldr	r3, [r7, #28]
 801f3c2:	685a      	ldr	r2, [r3, #4]
 801f3c4:	88bb      	ldrh	r3, [r7, #4]
 801f3c6:	4413      	add	r3, r2
 801f3c8:	8b3a      	ldrh	r2, [r7, #24]
 801f3ca:	4619      	mov	r1, r3
 801f3cc:	f006 fed7 	bl	802617e <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 801f3d0:	8afa      	ldrh	r2, [r7, #22]
 801f3d2:	8b3b      	ldrh	r3, [r7, #24]
 801f3d4:	4413      	add	r3, r2
 801f3d6:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 801f3d8:	8b7a      	ldrh	r2, [r7, #26]
 801f3da:	8b3b      	ldrh	r3, [r7, #24]
 801f3dc:	4413      	add	r3, r2
 801f3de:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 801f3e0:	88fa      	ldrh	r2, [r7, #6]
 801f3e2:	8b3b      	ldrh	r3, [r7, #24]
 801f3e4:	1ad3      	subs	r3, r2, r3
 801f3e6:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 801f3e8:	2300      	movs	r3, #0
 801f3ea:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801f3ec:	69fb      	ldr	r3, [r7, #28]
 801f3ee:	681b      	ldr	r3, [r3, #0]
 801f3f0:	61fb      	str	r3, [r7, #28]
 801f3f2:	88fb      	ldrh	r3, [r7, #6]
 801f3f4:	2b00      	cmp	r3, #0
 801f3f6:	d002      	beq.n	801f3fe <pbuf_copy_partial+0xca>
 801f3f8:	69fb      	ldr	r3, [r7, #28]
 801f3fa:	2b00      	cmp	r3, #0
 801f3fc:	d1c4      	bne.n	801f388 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 801f3fe:	8afb      	ldrh	r3, [r7, #22]
}
 801f400:	4618      	mov	r0, r3
 801f402:	3720      	adds	r7, #32
 801f404:	46bd      	mov	sp, r7
 801f406:	bd80      	pop	{r7, pc}
 801f408:	08028bd4 	.word	0x08028bd4
 801f40c:	08028f1c 	.word	0x08028f1c
 801f410:	08028c34 	.word	0x08028c34
 801f414:	08028f3c 	.word	0x08028f3c

0801f418 <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf *
pbuf_skip_const(const struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 801f418:	b480      	push	{r7}
 801f41a:	b087      	sub	sp, #28
 801f41c:	af00      	add	r7, sp, #0
 801f41e:	60f8      	str	r0, [r7, #12]
 801f420:	460b      	mov	r3, r1
 801f422:	607a      	str	r2, [r7, #4]
 801f424:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 801f426:	897b      	ldrh	r3, [r7, #10]
 801f428:	82fb      	strh	r3, [r7, #22]
  const struct pbuf *q = in;
 801f42a:	68fb      	ldr	r3, [r7, #12]
 801f42c:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 801f42e:	e007      	b.n	801f440 <pbuf_skip_const+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 801f430:	693b      	ldr	r3, [r7, #16]
 801f432:	895b      	ldrh	r3, [r3, #10]
 801f434:	8afa      	ldrh	r2, [r7, #22]
 801f436:	1ad3      	subs	r3, r2, r3
 801f438:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 801f43a:	693b      	ldr	r3, [r7, #16]
 801f43c:	681b      	ldr	r3, [r3, #0]
 801f43e:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 801f440:	693b      	ldr	r3, [r7, #16]
 801f442:	2b00      	cmp	r3, #0
 801f444:	d004      	beq.n	801f450 <pbuf_skip_const+0x38>
 801f446:	693b      	ldr	r3, [r7, #16]
 801f448:	895b      	ldrh	r3, [r3, #10]
 801f44a:	8afa      	ldrh	r2, [r7, #22]
 801f44c:	429a      	cmp	r2, r3
 801f44e:	d2ef      	bcs.n	801f430 <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 801f450:	687b      	ldr	r3, [r7, #4]
 801f452:	2b00      	cmp	r3, #0
 801f454:	d002      	beq.n	801f45c <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 801f456:	687b      	ldr	r3, [r7, #4]
 801f458:	8afa      	ldrh	r2, [r7, #22]
 801f45a:	801a      	strh	r2, [r3, #0]
  }
  return q;
 801f45c:	693b      	ldr	r3, [r7, #16]
}
 801f45e:	4618      	mov	r0, r3
 801f460:	371c      	adds	r7, #28
 801f462:	46bd      	mov	sp, r7
 801f464:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f468:	4770      	bx	lr

0801f46a <pbuf_skip>:
 * @param out_offset resulting offset in the returned pbuf
 * @return the pbuf in the queue where the offset is
 */
struct pbuf *
pbuf_skip(struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 801f46a:	b580      	push	{r7, lr}
 801f46c:	b086      	sub	sp, #24
 801f46e:	af00      	add	r7, sp, #0
 801f470:	60f8      	str	r0, [r7, #12]
 801f472:	460b      	mov	r3, r1
 801f474:	607a      	str	r2, [r7, #4]
 801f476:	817b      	strh	r3, [r7, #10]
  const struct pbuf *out = pbuf_skip_const(in, in_offset, out_offset);
 801f478:	897b      	ldrh	r3, [r7, #10]
 801f47a:	687a      	ldr	r2, [r7, #4]
 801f47c:	4619      	mov	r1, r3
 801f47e:	68f8      	ldr	r0, [r7, #12]
 801f480:	f7ff ffca 	bl	801f418 <pbuf_skip_const>
 801f484:	6178      	str	r0, [r7, #20]
  return LWIP_CONST_CAST(struct pbuf *, out);
 801f486:	697b      	ldr	r3, [r7, #20]
}
 801f488:	4618      	mov	r0, r3
 801f48a:	3718      	adds	r7, #24
 801f48c:	46bd      	mov	sp, r7
 801f48e:	bd80      	pop	{r7, pc}

0801f490 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 801f490:	b580      	push	{r7, lr}
 801f492:	b088      	sub	sp, #32
 801f494:	af00      	add	r7, sp, #0
 801f496:	60f8      	str	r0, [r7, #12]
 801f498:	60b9      	str	r1, [r7, #8]
 801f49a:	4613      	mov	r3, r2
 801f49c:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 801f49e:	88fb      	ldrh	r3, [r7, #6]
 801f4a0:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 801f4a2:	2300      	movs	r3, #0
 801f4a4:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 801f4a6:	68fb      	ldr	r3, [r7, #12]
 801f4a8:	2b00      	cmp	r3, #0
 801f4aa:	d109      	bne.n	801f4c0 <pbuf_take+0x30>
 801f4ac:	4b3a      	ldr	r3, [pc, #232]	; (801f598 <pbuf_take+0x108>)
 801f4ae:	f240 42b3 	movw	r2, #1203	; 0x4b3
 801f4b2:	493a      	ldr	r1, [pc, #232]	; (801f59c <pbuf_take+0x10c>)
 801f4b4:	483a      	ldr	r0, [pc, #232]	; (801f5a0 <pbuf_take+0x110>)
 801f4b6:	f006 ff3b 	bl	8026330 <iprintf>
 801f4ba:	f06f 030f 	mvn.w	r3, #15
 801f4be:	e067      	b.n	801f590 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 801f4c0:	68bb      	ldr	r3, [r7, #8]
 801f4c2:	2b00      	cmp	r3, #0
 801f4c4:	d109      	bne.n	801f4da <pbuf_take+0x4a>
 801f4c6:	4b34      	ldr	r3, [pc, #208]	; (801f598 <pbuf_take+0x108>)
 801f4c8:	f240 42b4 	movw	r2, #1204	; 0x4b4
 801f4cc:	4935      	ldr	r1, [pc, #212]	; (801f5a4 <pbuf_take+0x114>)
 801f4ce:	4834      	ldr	r0, [pc, #208]	; (801f5a0 <pbuf_take+0x110>)
 801f4d0:	f006 ff2e 	bl	8026330 <iprintf>
 801f4d4:	f06f 030f 	mvn.w	r3, #15
 801f4d8:	e05a      	b.n	801f590 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 801f4da:	68fb      	ldr	r3, [r7, #12]
 801f4dc:	891b      	ldrh	r3, [r3, #8]
 801f4de:	88fa      	ldrh	r2, [r7, #6]
 801f4e0:	429a      	cmp	r2, r3
 801f4e2:	d909      	bls.n	801f4f8 <pbuf_take+0x68>
 801f4e4:	4b2c      	ldr	r3, [pc, #176]	; (801f598 <pbuf_take+0x108>)
 801f4e6:	f240 42b5 	movw	r2, #1205	; 0x4b5
 801f4ea:	492f      	ldr	r1, [pc, #188]	; (801f5a8 <pbuf_take+0x118>)
 801f4ec:	482c      	ldr	r0, [pc, #176]	; (801f5a0 <pbuf_take+0x110>)
 801f4ee:	f006 ff1f 	bl	8026330 <iprintf>
 801f4f2:	f04f 33ff 	mov.w	r3, #4294967295
 801f4f6:	e04b      	b.n	801f590 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 801f4f8:	68fb      	ldr	r3, [r7, #12]
 801f4fa:	2b00      	cmp	r3, #0
 801f4fc:	d007      	beq.n	801f50e <pbuf_take+0x7e>
 801f4fe:	68bb      	ldr	r3, [r7, #8]
 801f500:	2b00      	cmp	r3, #0
 801f502:	d004      	beq.n	801f50e <pbuf_take+0x7e>
 801f504:	68fb      	ldr	r3, [r7, #12]
 801f506:	891b      	ldrh	r3, [r3, #8]
 801f508:	88fa      	ldrh	r2, [r7, #6]
 801f50a:	429a      	cmp	r2, r3
 801f50c:	d902      	bls.n	801f514 <pbuf_take+0x84>
    return ERR_ARG;
 801f50e:	f06f 030f 	mvn.w	r3, #15
 801f512:	e03d      	b.n	801f590 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 801f514:	68fb      	ldr	r3, [r7, #12]
 801f516:	61fb      	str	r3, [r7, #28]
 801f518:	e028      	b.n	801f56c <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 801f51a:	69fb      	ldr	r3, [r7, #28]
 801f51c:	2b00      	cmp	r3, #0
 801f51e:	d106      	bne.n	801f52e <pbuf_take+0x9e>
 801f520:	4b1d      	ldr	r3, [pc, #116]	; (801f598 <pbuf_take+0x108>)
 801f522:	f240 42bd 	movw	r2, #1213	; 0x4bd
 801f526:	4921      	ldr	r1, [pc, #132]	; (801f5ac <pbuf_take+0x11c>)
 801f528:	481d      	ldr	r0, [pc, #116]	; (801f5a0 <pbuf_take+0x110>)
 801f52a:	f006 ff01 	bl	8026330 <iprintf>
    buf_copy_len = total_copy_len;
 801f52e:	697b      	ldr	r3, [r7, #20]
 801f530:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 801f532:	69fb      	ldr	r3, [r7, #28]
 801f534:	895b      	ldrh	r3, [r3, #10]
 801f536:	461a      	mov	r2, r3
 801f538:	69bb      	ldr	r3, [r7, #24]
 801f53a:	429a      	cmp	r2, r3
 801f53c:	d202      	bcs.n	801f544 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 801f53e:	69fb      	ldr	r3, [r7, #28]
 801f540:	895b      	ldrh	r3, [r3, #10]
 801f542:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 801f544:	69fb      	ldr	r3, [r7, #28]
 801f546:	6858      	ldr	r0, [r3, #4]
 801f548:	68ba      	ldr	r2, [r7, #8]
 801f54a:	693b      	ldr	r3, [r7, #16]
 801f54c:	4413      	add	r3, r2
 801f54e:	69ba      	ldr	r2, [r7, #24]
 801f550:	4619      	mov	r1, r3
 801f552:	f006 fe14 	bl	802617e <memcpy>
    total_copy_len -= buf_copy_len;
 801f556:	697a      	ldr	r2, [r7, #20]
 801f558:	69bb      	ldr	r3, [r7, #24]
 801f55a:	1ad3      	subs	r3, r2, r3
 801f55c:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 801f55e:	693a      	ldr	r2, [r7, #16]
 801f560:	69bb      	ldr	r3, [r7, #24]
 801f562:	4413      	add	r3, r2
 801f564:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 801f566:	69fb      	ldr	r3, [r7, #28]
 801f568:	681b      	ldr	r3, [r3, #0]
 801f56a:	61fb      	str	r3, [r7, #28]
 801f56c:	697b      	ldr	r3, [r7, #20]
 801f56e:	2b00      	cmp	r3, #0
 801f570:	d1d3      	bne.n	801f51a <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 801f572:	697b      	ldr	r3, [r7, #20]
 801f574:	2b00      	cmp	r3, #0
 801f576:	d103      	bne.n	801f580 <pbuf_take+0xf0>
 801f578:	88fa      	ldrh	r2, [r7, #6]
 801f57a:	693b      	ldr	r3, [r7, #16]
 801f57c:	429a      	cmp	r2, r3
 801f57e:	d006      	beq.n	801f58e <pbuf_take+0xfe>
 801f580:	4b05      	ldr	r3, [pc, #20]	; (801f598 <pbuf_take+0x108>)
 801f582:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 801f586:	490a      	ldr	r1, [pc, #40]	; (801f5b0 <pbuf_take+0x120>)
 801f588:	4805      	ldr	r0, [pc, #20]	; (801f5a0 <pbuf_take+0x110>)
 801f58a:	f006 fed1 	bl	8026330 <iprintf>
  return ERR_OK;
 801f58e:	2300      	movs	r3, #0
}
 801f590:	4618      	mov	r0, r3
 801f592:	3720      	adds	r7, #32
 801f594:	46bd      	mov	sp, r7
 801f596:	bd80      	pop	{r7, pc}
 801f598:	08028bd4 	.word	0x08028bd4
 801f59c:	08028fac 	.word	0x08028fac
 801f5a0:	08028c34 	.word	0x08028c34
 801f5a4:	08028fc4 	.word	0x08028fc4
 801f5a8:	08028fe0 	.word	0x08028fe0
 801f5ac:	08029000 	.word	0x08029000
 801f5b0:	08029018 	.word	0x08029018

0801f5b4 <pbuf_take_at>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take_at(struct pbuf *buf, const void *dataptr, u16_t len, u16_t offset)
{
 801f5b4:	b580      	push	{r7, lr}
 801f5b6:	b088      	sub	sp, #32
 801f5b8:	af00      	add	r7, sp, #0
 801f5ba:	60f8      	str	r0, [r7, #12]
 801f5bc:	60b9      	str	r1, [r7, #8]
 801f5be:	4611      	mov	r1, r2
 801f5c0:	461a      	mov	r2, r3
 801f5c2:	460b      	mov	r3, r1
 801f5c4:	80fb      	strh	r3, [r7, #6]
 801f5c6:	4613      	mov	r3, r2
 801f5c8:	80bb      	strh	r3, [r7, #4]
  u16_t target_offset;
  struct pbuf *q = pbuf_skip(buf, offset, &target_offset);
 801f5ca:	f107 0210 	add.w	r2, r7, #16
 801f5ce:	88bb      	ldrh	r3, [r7, #4]
 801f5d0:	4619      	mov	r1, r3
 801f5d2:	68f8      	ldr	r0, [r7, #12]
 801f5d4:	f7ff ff49 	bl	801f46a <pbuf_skip>
 801f5d8:	61f8      	str	r0, [r7, #28]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->tot_len >= target_offset + len)) {
 801f5da:	69fb      	ldr	r3, [r7, #28]
 801f5dc:	2b00      	cmp	r3, #0
 801f5de:	d047      	beq.n	801f670 <pbuf_take_at+0xbc>
 801f5e0:	69fb      	ldr	r3, [r7, #28]
 801f5e2:	891b      	ldrh	r3, [r3, #8]
 801f5e4:	461a      	mov	r2, r3
 801f5e6:	8a3b      	ldrh	r3, [r7, #16]
 801f5e8:	4619      	mov	r1, r3
 801f5ea:	88fb      	ldrh	r3, [r7, #6]
 801f5ec:	440b      	add	r3, r1
 801f5ee:	429a      	cmp	r2, r3
 801f5f0:	db3e      	blt.n	801f670 <pbuf_take_at+0xbc>
    u16_t remaining_len = len;
 801f5f2:	88fb      	ldrh	r3, [r7, #6]
 801f5f4:	837b      	strh	r3, [r7, #26]
    const u8_t *src_ptr = (const u8_t *)dataptr;
 801f5f6:	68bb      	ldr	r3, [r7, #8]
 801f5f8:	617b      	str	r3, [r7, #20]
    /* copy the part that goes into the first pbuf */
    u16_t first_copy_len;
    LWIP_ASSERT("check pbuf_skip result", target_offset < q->len);
 801f5fa:	69fb      	ldr	r3, [r7, #28]
 801f5fc:	895a      	ldrh	r2, [r3, #10]
 801f5fe:	8a3b      	ldrh	r3, [r7, #16]
 801f600:	429a      	cmp	r2, r3
 801f602:	d806      	bhi.n	801f612 <pbuf_take_at+0x5e>
 801f604:	4b1d      	ldr	r3, [pc, #116]	; (801f67c <pbuf_take_at+0xc8>)
 801f606:	f240 42e3 	movw	r2, #1251	; 0x4e3
 801f60a:	491d      	ldr	r1, [pc, #116]	; (801f680 <pbuf_take_at+0xcc>)
 801f60c:	481d      	ldr	r0, [pc, #116]	; (801f684 <pbuf_take_at+0xd0>)
 801f60e:	f006 fe8f 	bl	8026330 <iprintf>
    first_copy_len = (u16_t)LWIP_MIN(q->len - target_offset, len);
 801f612:	69fb      	ldr	r3, [r7, #28]
 801f614:	895b      	ldrh	r3, [r3, #10]
 801f616:	461a      	mov	r2, r3
 801f618:	8a3b      	ldrh	r3, [r7, #16]
 801f61a:	1ad2      	subs	r2, r2, r3
 801f61c:	88fb      	ldrh	r3, [r7, #6]
 801f61e:	429a      	cmp	r2, r3
 801f620:	da05      	bge.n	801f62e <pbuf_take_at+0x7a>
 801f622:	69fb      	ldr	r3, [r7, #28]
 801f624:	895a      	ldrh	r2, [r3, #10]
 801f626:	8a3b      	ldrh	r3, [r7, #16]
 801f628:	1ad3      	subs	r3, r2, r3
 801f62a:	b29b      	uxth	r3, r3
 801f62c:	e000      	b.n	801f630 <pbuf_take_at+0x7c>
 801f62e:	88fb      	ldrh	r3, [r7, #6]
 801f630:	827b      	strh	r3, [r7, #18]
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
 801f632:	69fb      	ldr	r3, [r7, #28]
 801f634:	685b      	ldr	r3, [r3, #4]
 801f636:	8a3a      	ldrh	r2, [r7, #16]
 801f638:	4413      	add	r3, r2
 801f63a:	8a7a      	ldrh	r2, [r7, #18]
 801f63c:	68b9      	ldr	r1, [r7, #8]
 801f63e:	4618      	mov	r0, r3
 801f640:	f006 fd9d 	bl	802617e <memcpy>
    remaining_len = (u16_t)(remaining_len - first_copy_len);
 801f644:	8b7a      	ldrh	r2, [r7, #26]
 801f646:	8a7b      	ldrh	r3, [r7, #18]
 801f648:	1ad3      	subs	r3, r2, r3
 801f64a:	837b      	strh	r3, [r7, #26]
    src_ptr += first_copy_len;
 801f64c:	8a7b      	ldrh	r3, [r7, #18]
 801f64e:	697a      	ldr	r2, [r7, #20]
 801f650:	4413      	add	r3, r2
 801f652:	617b      	str	r3, [r7, #20]
    if (remaining_len > 0) {
 801f654:	8b7b      	ldrh	r3, [r7, #26]
 801f656:	2b00      	cmp	r3, #0
 801f658:	d008      	beq.n	801f66c <pbuf_take_at+0xb8>
      return pbuf_take(q->next, src_ptr, remaining_len);
 801f65a:	69fb      	ldr	r3, [r7, #28]
 801f65c:	681b      	ldr	r3, [r3, #0]
 801f65e:	8b7a      	ldrh	r2, [r7, #26]
 801f660:	6979      	ldr	r1, [r7, #20]
 801f662:	4618      	mov	r0, r3
 801f664:	f7ff ff14 	bl	801f490 <pbuf_take>
 801f668:	4603      	mov	r3, r0
 801f66a:	e003      	b.n	801f674 <pbuf_take_at+0xc0>
    }
    return ERR_OK;
 801f66c:	2300      	movs	r3, #0
 801f66e:	e001      	b.n	801f674 <pbuf_take_at+0xc0>
  }
  return ERR_MEM;
 801f670:	f04f 33ff 	mov.w	r3, #4294967295
}
 801f674:	4618      	mov	r0, r3
 801f676:	3720      	adds	r7, #32
 801f678:	46bd      	mov	sp, r7
 801f67a:	bd80      	pop	{r7, pc}
 801f67c:	08028bd4 	.word	0x08028bd4
 801f680:	08029030 	.word	0x08029030
 801f684:	08028c34 	.word	0x08028c34

0801f688 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 801f688:	b580      	push	{r7, lr}
 801f68a:	b084      	sub	sp, #16
 801f68c:	af00      	add	r7, sp, #0
 801f68e:	4603      	mov	r3, r0
 801f690:	603a      	str	r2, [r7, #0]
 801f692:	71fb      	strb	r3, [r7, #7]
 801f694:	460b      	mov	r3, r1
 801f696:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 801f698:	683b      	ldr	r3, [r7, #0]
 801f69a:	8919      	ldrh	r1, [r3, #8]
 801f69c:	88ba      	ldrh	r2, [r7, #4]
 801f69e:	79fb      	ldrb	r3, [r7, #7]
 801f6a0:	4618      	mov	r0, r3
 801f6a2:	f7ff f95f 	bl	801e964 <pbuf_alloc>
 801f6a6:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 801f6a8:	68fb      	ldr	r3, [r7, #12]
 801f6aa:	2b00      	cmp	r3, #0
 801f6ac:	d101      	bne.n	801f6b2 <pbuf_clone+0x2a>
    return NULL;
 801f6ae:	2300      	movs	r3, #0
 801f6b0:	e011      	b.n	801f6d6 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 801f6b2:	6839      	ldr	r1, [r7, #0]
 801f6b4:	68f8      	ldr	r0, [r7, #12]
 801f6b6:	f7ff fd6b 	bl	801f190 <pbuf_copy>
 801f6ba:	4603      	mov	r3, r0
 801f6bc:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 801f6be:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801f6c2:	2b00      	cmp	r3, #0
 801f6c4:	d006      	beq.n	801f6d4 <pbuf_clone+0x4c>
 801f6c6:	4b06      	ldr	r3, [pc, #24]	; (801f6e0 <pbuf_clone+0x58>)
 801f6c8:	f240 5224 	movw	r2, #1316	; 0x524
 801f6cc:	4905      	ldr	r1, [pc, #20]	; (801f6e4 <pbuf_clone+0x5c>)
 801f6ce:	4806      	ldr	r0, [pc, #24]	; (801f6e8 <pbuf_clone+0x60>)
 801f6d0:	f006 fe2e 	bl	8026330 <iprintf>
  return q;
 801f6d4:	68fb      	ldr	r3, [r7, #12]
}
 801f6d6:	4618      	mov	r0, r3
 801f6d8:	3710      	adds	r7, #16
 801f6da:	46bd      	mov	sp, r7
 801f6dc:	bd80      	pop	{r7, pc}
 801f6de:	bf00      	nop
 801f6e0:	08028bd4 	.word	0x08028bd4
 801f6e4:	08029048 	.word	0x08029048
 801f6e8:	08028c34 	.word	0x08028c34

0801f6ec <pbuf_put_at>:
 * @param offset offset into p of the byte to write
 * @param data byte to write at an offset into p
 */
void
pbuf_put_at(struct pbuf *p, u16_t offset, u8_t data)
{
 801f6ec:	b580      	push	{r7, lr}
 801f6ee:	b084      	sub	sp, #16
 801f6f0:	af00      	add	r7, sp, #0
 801f6f2:	6078      	str	r0, [r7, #4]
 801f6f4:	460b      	mov	r3, r1
 801f6f6:	807b      	strh	r3, [r7, #2]
 801f6f8:	4613      	mov	r3, r2
 801f6fa:	707b      	strb	r3, [r7, #1]
  u16_t q_idx;
  struct pbuf *q = pbuf_skip(p, offset, &q_idx);
 801f6fc:	f107 020a 	add.w	r2, r7, #10
 801f700:	887b      	ldrh	r3, [r7, #2]
 801f702:	4619      	mov	r1, r3
 801f704:	6878      	ldr	r0, [r7, #4]
 801f706:	f7ff feb0 	bl	801f46a <pbuf_skip>
 801f70a:	60f8      	str	r0, [r7, #12]

  /* write requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 801f70c:	68fb      	ldr	r3, [r7, #12]
 801f70e:	2b00      	cmp	r3, #0
 801f710:	d00a      	beq.n	801f728 <pbuf_put_at+0x3c>
 801f712:	68fb      	ldr	r3, [r7, #12]
 801f714:	895a      	ldrh	r2, [r3, #10]
 801f716:	897b      	ldrh	r3, [r7, #10]
 801f718:	429a      	cmp	r2, r3
 801f71a:	d905      	bls.n	801f728 <pbuf_put_at+0x3c>
    ((u8_t *)q->payload)[q_idx] = data;
 801f71c:	68fb      	ldr	r3, [r7, #12]
 801f71e:	685b      	ldr	r3, [r3, #4]
 801f720:	897a      	ldrh	r2, [r7, #10]
 801f722:	4413      	add	r3, r2
 801f724:	787a      	ldrb	r2, [r7, #1]
 801f726:	701a      	strb	r2, [r3, #0]
  }
}
 801f728:	bf00      	nop
 801f72a:	3710      	adds	r7, #16
 801f72c:	46bd      	mov	sp, r7
 801f72e:	bd80      	pop	{r7, pc}

0801f730 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 801f730:	b580      	push	{r7, lr}
 801f732:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801f734:	f006 fe78 	bl	8026428 <rand>
 801f738:	4603      	mov	r3, r0
 801f73a:	b29b      	uxth	r3, r3
 801f73c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801f740:	b29b      	uxth	r3, r3
 801f742:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801f746:	b29a      	uxth	r2, r3
 801f748:	4b01      	ldr	r3, [pc, #4]	; (801f750 <tcp_init+0x20>)
 801f74a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801f74c:	bf00      	nop
 801f74e:	bd80      	pop	{r7, pc}
 801f750:	20000014 	.word	0x20000014

0801f754 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 801f754:	b580      	push	{r7, lr}
 801f756:	b082      	sub	sp, #8
 801f758:	af00      	add	r7, sp, #0
 801f75a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801f75c:	687b      	ldr	r3, [r7, #4]
 801f75e:	7d1b      	ldrb	r3, [r3, #20]
 801f760:	2b01      	cmp	r3, #1
 801f762:	d105      	bne.n	801f770 <tcp_free+0x1c>
 801f764:	4b06      	ldr	r3, [pc, #24]	; (801f780 <tcp_free+0x2c>)
 801f766:	22d4      	movs	r2, #212	; 0xd4
 801f768:	4906      	ldr	r1, [pc, #24]	; (801f784 <tcp_free+0x30>)
 801f76a:	4807      	ldr	r0, [pc, #28]	; (801f788 <tcp_free+0x34>)
 801f76c:	f006 fde0 	bl	8026330 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 801f770:	6879      	ldr	r1, [r7, #4]
 801f772:	2001      	movs	r0, #1
 801f774:	f7fe fe30 	bl	801e3d8 <memp_free>
}
 801f778:	bf00      	nop
 801f77a:	3708      	adds	r7, #8
 801f77c:	46bd      	mov	sp, r7
 801f77e:	bd80      	pop	{r7, pc}
 801f780:	080290d4 	.word	0x080290d4
 801f784:	08029104 	.word	0x08029104
 801f788:	08029118 	.word	0x08029118

0801f78c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 801f78c:	b580      	push	{r7, lr}
 801f78e:	b082      	sub	sp, #8
 801f790:	af00      	add	r7, sp, #0
 801f792:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 801f794:	687b      	ldr	r3, [r7, #4]
 801f796:	7d1b      	ldrb	r3, [r3, #20]
 801f798:	2b01      	cmp	r3, #1
 801f79a:	d105      	bne.n	801f7a8 <tcp_free_listen+0x1c>
 801f79c:	4b06      	ldr	r3, [pc, #24]	; (801f7b8 <tcp_free_listen+0x2c>)
 801f79e:	22df      	movs	r2, #223	; 0xdf
 801f7a0:	4906      	ldr	r1, [pc, #24]	; (801f7bc <tcp_free_listen+0x30>)
 801f7a2:	4807      	ldr	r0, [pc, #28]	; (801f7c0 <tcp_free_listen+0x34>)
 801f7a4:	f006 fdc4 	bl	8026330 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 801f7a8:	6879      	ldr	r1, [r7, #4]
 801f7aa:	2002      	movs	r0, #2
 801f7ac:	f7fe fe14 	bl	801e3d8 <memp_free>
}
 801f7b0:	bf00      	nop
 801f7b2:	3708      	adds	r7, #8
 801f7b4:	46bd      	mov	sp, r7
 801f7b6:	bd80      	pop	{r7, pc}
 801f7b8:	080290d4 	.word	0x080290d4
 801f7bc:	08029140 	.word	0x08029140
 801f7c0:	08029118 	.word	0x08029118

0801f7c4 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 801f7c4:	b580      	push	{r7, lr}
 801f7c6:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 801f7c8:	f001 f83c 	bl	8020844 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 801f7cc:	4b07      	ldr	r3, [pc, #28]	; (801f7ec <tcp_tmr+0x28>)
 801f7ce:	781b      	ldrb	r3, [r3, #0]
 801f7d0:	3301      	adds	r3, #1
 801f7d2:	b2da      	uxtb	r2, r3
 801f7d4:	4b05      	ldr	r3, [pc, #20]	; (801f7ec <tcp_tmr+0x28>)
 801f7d6:	701a      	strb	r2, [r3, #0]
 801f7d8:	4b04      	ldr	r3, [pc, #16]	; (801f7ec <tcp_tmr+0x28>)
 801f7da:	781b      	ldrb	r3, [r3, #0]
 801f7dc:	f003 0301 	and.w	r3, r3, #1
 801f7e0:	2b00      	cmp	r3, #0
 801f7e2:	d001      	beq.n	801f7e8 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 801f7e4:	f000 fd02 	bl	80201ec <tcp_slowtmr>
  }
}
 801f7e8:	bf00      	nop
 801f7ea:	bd80      	pop	{r7, pc}
 801f7ec:	200196bd 	.word	0x200196bd

0801f7f0 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 801f7f0:	b580      	push	{r7, lr}
 801f7f2:	b084      	sub	sp, #16
 801f7f4:	af00      	add	r7, sp, #0
 801f7f6:	6078      	str	r0, [r7, #4]
 801f7f8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 801f7fa:	683b      	ldr	r3, [r7, #0]
 801f7fc:	2b00      	cmp	r3, #0
 801f7fe:	d105      	bne.n	801f80c <tcp_remove_listener+0x1c>
 801f800:	4b0d      	ldr	r3, [pc, #52]	; (801f838 <tcp_remove_listener+0x48>)
 801f802:	22ff      	movs	r2, #255	; 0xff
 801f804:	490d      	ldr	r1, [pc, #52]	; (801f83c <tcp_remove_listener+0x4c>)
 801f806:	480e      	ldr	r0, [pc, #56]	; (801f840 <tcp_remove_listener+0x50>)
 801f808:	f006 fd92 	bl	8026330 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801f80c:	687b      	ldr	r3, [r7, #4]
 801f80e:	60fb      	str	r3, [r7, #12]
 801f810:	e00a      	b.n	801f828 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 801f812:	68fb      	ldr	r3, [r7, #12]
 801f814:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 801f816:	683b      	ldr	r3, [r7, #0]
 801f818:	429a      	cmp	r2, r3
 801f81a:	d102      	bne.n	801f822 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 801f81c:	68fb      	ldr	r3, [r7, #12]
 801f81e:	2200      	movs	r2, #0
 801f820:	679a      	str	r2, [r3, #120]	; 0x78
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801f822:	68fb      	ldr	r3, [r7, #12]
 801f824:	68db      	ldr	r3, [r3, #12]
 801f826:	60fb      	str	r3, [r7, #12]
 801f828:	68fb      	ldr	r3, [r7, #12]
 801f82a:	2b00      	cmp	r3, #0
 801f82c:	d1f1      	bne.n	801f812 <tcp_remove_listener+0x22>
    }
  }
}
 801f82e:	bf00      	nop
 801f830:	3710      	adds	r7, #16
 801f832:	46bd      	mov	sp, r7
 801f834:	bd80      	pop	{r7, pc}
 801f836:	bf00      	nop
 801f838:	080290d4 	.word	0x080290d4
 801f83c:	0802915c 	.word	0x0802915c
 801f840:	08029118 	.word	0x08029118

0801f844 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 801f844:	b580      	push	{r7, lr}
 801f846:	b084      	sub	sp, #16
 801f848:	af00      	add	r7, sp, #0
 801f84a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 801f84c:	687b      	ldr	r3, [r7, #4]
 801f84e:	2b00      	cmp	r3, #0
 801f850:	d106      	bne.n	801f860 <tcp_listen_closed+0x1c>
 801f852:	4b14      	ldr	r3, [pc, #80]	; (801f8a4 <tcp_listen_closed+0x60>)
 801f854:	f240 1211 	movw	r2, #273	; 0x111
 801f858:	4913      	ldr	r1, [pc, #76]	; (801f8a8 <tcp_listen_closed+0x64>)
 801f85a:	4814      	ldr	r0, [pc, #80]	; (801f8ac <tcp_listen_closed+0x68>)
 801f85c:	f006 fd68 	bl	8026330 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 801f860:	687b      	ldr	r3, [r7, #4]
 801f862:	7d1b      	ldrb	r3, [r3, #20]
 801f864:	2b01      	cmp	r3, #1
 801f866:	d006      	beq.n	801f876 <tcp_listen_closed+0x32>
 801f868:	4b0e      	ldr	r3, [pc, #56]	; (801f8a4 <tcp_listen_closed+0x60>)
 801f86a:	f44f 7289 	mov.w	r2, #274	; 0x112
 801f86e:	4910      	ldr	r1, [pc, #64]	; (801f8b0 <tcp_listen_closed+0x6c>)
 801f870:	480e      	ldr	r0, [pc, #56]	; (801f8ac <tcp_listen_closed+0x68>)
 801f872:	f006 fd5d 	bl	8026330 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801f876:	2301      	movs	r3, #1
 801f878:	60fb      	str	r3, [r7, #12]
 801f87a:	e00b      	b.n	801f894 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 801f87c:	4a0d      	ldr	r2, [pc, #52]	; (801f8b4 <tcp_listen_closed+0x70>)
 801f87e:	68fb      	ldr	r3, [r7, #12]
 801f880:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801f884:	681b      	ldr	r3, [r3, #0]
 801f886:	6879      	ldr	r1, [r7, #4]
 801f888:	4618      	mov	r0, r3
 801f88a:	f7ff ffb1 	bl	801f7f0 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801f88e:	68fb      	ldr	r3, [r7, #12]
 801f890:	3301      	adds	r3, #1
 801f892:	60fb      	str	r3, [r7, #12]
 801f894:	68fb      	ldr	r3, [r7, #12]
 801f896:	2b03      	cmp	r3, #3
 801f898:	d9f0      	bls.n	801f87c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 801f89a:	bf00      	nop
 801f89c:	3710      	adds	r7, #16
 801f89e:	46bd      	mov	sp, r7
 801f8a0:	bd80      	pop	{r7, pc}
 801f8a2:	bf00      	nop
 801f8a4:	080290d4 	.word	0x080290d4
 801f8a8:	08029184 	.word	0x08029184
 801f8ac:	08029118 	.word	0x08029118
 801f8b0:	08029190 	.word	0x08029190
 801f8b4:	0802b820 	.word	0x0802b820

0801f8b8 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 801f8b8:	b5b0      	push	{r4, r5, r7, lr}
 801f8ba:	b088      	sub	sp, #32
 801f8bc:	af04      	add	r7, sp, #16
 801f8be:	6078      	str	r0, [r7, #4]
 801f8c0:	460b      	mov	r3, r1
 801f8c2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 801f8c4:	687b      	ldr	r3, [r7, #4]
 801f8c6:	2b00      	cmp	r3, #0
 801f8c8:	d106      	bne.n	801f8d8 <tcp_close_shutdown+0x20>
 801f8ca:	4b62      	ldr	r3, [pc, #392]	; (801fa54 <tcp_close_shutdown+0x19c>)
 801f8cc:	f44f 72af 	mov.w	r2, #350	; 0x15e
 801f8d0:	4961      	ldr	r1, [pc, #388]	; (801fa58 <tcp_close_shutdown+0x1a0>)
 801f8d2:	4862      	ldr	r0, [pc, #392]	; (801fa5c <tcp_close_shutdown+0x1a4>)
 801f8d4:	f006 fd2c 	bl	8026330 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 801f8d8:	78fb      	ldrb	r3, [r7, #3]
 801f8da:	2b00      	cmp	r3, #0
 801f8dc:	d067      	beq.n	801f9ae <tcp_close_shutdown+0xf6>
 801f8de:	687b      	ldr	r3, [r7, #4]
 801f8e0:	7d1b      	ldrb	r3, [r3, #20]
 801f8e2:	2b04      	cmp	r3, #4
 801f8e4:	d003      	beq.n	801f8ee <tcp_close_shutdown+0x36>
 801f8e6:	687b      	ldr	r3, [r7, #4]
 801f8e8:	7d1b      	ldrb	r3, [r3, #20]
 801f8ea:	2b07      	cmp	r3, #7
 801f8ec:	d15f      	bne.n	801f9ae <tcp_close_shutdown+0xf6>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 801f8ee:	687b      	ldr	r3, [r7, #4]
 801f8f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801f8f2:	2b00      	cmp	r3, #0
 801f8f4:	d105      	bne.n	801f902 <tcp_close_shutdown+0x4a>
 801f8f6:	687b      	ldr	r3, [r7, #4]
 801f8f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801f8fa:	f640 3268 	movw	r2, #2920	; 0xb68
 801f8fe:	4293      	cmp	r3, r2
 801f900:	d055      	beq.n	801f9ae <tcp_close_shutdown+0xf6>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 801f902:	687b      	ldr	r3, [r7, #4]
 801f904:	8b5b      	ldrh	r3, [r3, #26]
 801f906:	f003 0310 	and.w	r3, r3, #16
 801f90a:	2b00      	cmp	r3, #0
 801f90c:	d106      	bne.n	801f91c <tcp_close_shutdown+0x64>
 801f90e:	4b51      	ldr	r3, [pc, #324]	; (801fa54 <tcp_close_shutdown+0x19c>)
 801f910:	f44f 72b2 	mov.w	r2, #356	; 0x164
 801f914:	4952      	ldr	r1, [pc, #328]	; (801fa60 <tcp_close_shutdown+0x1a8>)
 801f916:	4851      	ldr	r0, [pc, #324]	; (801fa5c <tcp_close_shutdown+0x1a4>)
 801f918:	f006 fd0a 	bl	8026330 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801f91c:	687b      	ldr	r3, [r7, #4]
 801f91e:	6d18      	ldr	r0, [r3, #80]	; 0x50
 801f920:	687b      	ldr	r3, [r7, #4]
 801f922:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801f924:	687d      	ldr	r5, [r7, #4]
 801f926:	687b      	ldr	r3, [r7, #4]
 801f928:	3304      	adds	r3, #4
 801f92a:	687a      	ldr	r2, [r7, #4]
 801f92c:	8ad2      	ldrh	r2, [r2, #22]
 801f92e:	6879      	ldr	r1, [r7, #4]
 801f930:	8b09      	ldrh	r1, [r1, #24]
 801f932:	9102      	str	r1, [sp, #8]
 801f934:	9201      	str	r2, [sp, #4]
 801f936:	9300      	str	r3, [sp, #0]
 801f938:	462b      	mov	r3, r5
 801f93a:	4622      	mov	r2, r4
 801f93c:	4601      	mov	r1, r0
 801f93e:	6878      	ldr	r0, [r7, #4]
 801f940:	f005 f986 	bl	8024c50 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 801f944:	6878      	ldr	r0, [r7, #4]
 801f946:	f001 fb27 	bl	8020f98 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 801f94a:	4b46      	ldr	r3, [pc, #280]	; (801fa64 <tcp_close_shutdown+0x1ac>)
 801f94c:	681a      	ldr	r2, [r3, #0]
 801f94e:	687b      	ldr	r3, [r7, #4]
 801f950:	429a      	cmp	r2, r3
 801f952:	d105      	bne.n	801f960 <tcp_close_shutdown+0xa8>
 801f954:	4b43      	ldr	r3, [pc, #268]	; (801fa64 <tcp_close_shutdown+0x1ac>)
 801f956:	681b      	ldr	r3, [r3, #0]
 801f958:	68db      	ldr	r3, [r3, #12]
 801f95a:	4a42      	ldr	r2, [pc, #264]	; (801fa64 <tcp_close_shutdown+0x1ac>)
 801f95c:	6013      	str	r3, [r2, #0]
 801f95e:	e013      	b.n	801f988 <tcp_close_shutdown+0xd0>
 801f960:	4b40      	ldr	r3, [pc, #256]	; (801fa64 <tcp_close_shutdown+0x1ac>)
 801f962:	681b      	ldr	r3, [r3, #0]
 801f964:	60fb      	str	r3, [r7, #12]
 801f966:	e00c      	b.n	801f982 <tcp_close_shutdown+0xca>
 801f968:	68fb      	ldr	r3, [r7, #12]
 801f96a:	68da      	ldr	r2, [r3, #12]
 801f96c:	687b      	ldr	r3, [r7, #4]
 801f96e:	429a      	cmp	r2, r3
 801f970:	d104      	bne.n	801f97c <tcp_close_shutdown+0xc4>
 801f972:	687b      	ldr	r3, [r7, #4]
 801f974:	68da      	ldr	r2, [r3, #12]
 801f976:	68fb      	ldr	r3, [r7, #12]
 801f978:	60da      	str	r2, [r3, #12]
 801f97a:	e005      	b.n	801f988 <tcp_close_shutdown+0xd0>
 801f97c:	68fb      	ldr	r3, [r7, #12]
 801f97e:	68db      	ldr	r3, [r3, #12]
 801f980:	60fb      	str	r3, [r7, #12]
 801f982:	68fb      	ldr	r3, [r7, #12]
 801f984:	2b00      	cmp	r3, #0
 801f986:	d1ef      	bne.n	801f968 <tcp_close_shutdown+0xb0>
 801f988:	687b      	ldr	r3, [r7, #4]
 801f98a:	2200      	movs	r2, #0
 801f98c:	60da      	str	r2, [r3, #12]
 801f98e:	4b36      	ldr	r3, [pc, #216]	; (801fa68 <tcp_close_shutdown+0x1b0>)
 801f990:	2201      	movs	r2, #1
 801f992:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 801f994:	4b35      	ldr	r3, [pc, #212]	; (801fa6c <tcp_close_shutdown+0x1b4>)
 801f996:	681a      	ldr	r2, [r3, #0]
 801f998:	687b      	ldr	r3, [r7, #4]
 801f99a:	429a      	cmp	r2, r3
 801f99c:	d102      	bne.n	801f9a4 <tcp_close_shutdown+0xec>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 801f99e:	f003 fbdb 	bl	8023158 <tcp_trigger_input_pcb_close>
 801f9a2:	e002      	b.n	801f9aa <tcp_close_shutdown+0xf2>
      } else {
        tcp_free(pcb);
 801f9a4:	6878      	ldr	r0, [r7, #4]
 801f9a6:	f7ff fed5 	bl	801f754 <tcp_free>
      }
      return ERR_OK;
 801f9aa:	2300      	movs	r3, #0
 801f9ac:	e04d      	b.n	801fa4a <tcp_close_shutdown+0x192>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 801f9ae:	687b      	ldr	r3, [r7, #4]
 801f9b0:	7d1b      	ldrb	r3, [r3, #20]
 801f9b2:	2b01      	cmp	r3, #1
 801f9b4:	d02d      	beq.n	801fa12 <tcp_close_shutdown+0x15a>
 801f9b6:	2b02      	cmp	r3, #2
 801f9b8:	d036      	beq.n	801fa28 <tcp_close_shutdown+0x170>
 801f9ba:	2b00      	cmp	r3, #0
 801f9bc:	d13f      	bne.n	801fa3e <tcp_close_shutdown+0x186>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 801f9be:	687b      	ldr	r3, [r7, #4]
 801f9c0:	8adb      	ldrh	r3, [r3, #22]
 801f9c2:	2b00      	cmp	r3, #0
 801f9c4:	d021      	beq.n	801fa0a <tcp_close_shutdown+0x152>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801f9c6:	4b2a      	ldr	r3, [pc, #168]	; (801fa70 <tcp_close_shutdown+0x1b8>)
 801f9c8:	681a      	ldr	r2, [r3, #0]
 801f9ca:	687b      	ldr	r3, [r7, #4]
 801f9cc:	429a      	cmp	r2, r3
 801f9ce:	d105      	bne.n	801f9dc <tcp_close_shutdown+0x124>
 801f9d0:	4b27      	ldr	r3, [pc, #156]	; (801fa70 <tcp_close_shutdown+0x1b8>)
 801f9d2:	681b      	ldr	r3, [r3, #0]
 801f9d4:	68db      	ldr	r3, [r3, #12]
 801f9d6:	4a26      	ldr	r2, [pc, #152]	; (801fa70 <tcp_close_shutdown+0x1b8>)
 801f9d8:	6013      	str	r3, [r2, #0]
 801f9da:	e013      	b.n	801fa04 <tcp_close_shutdown+0x14c>
 801f9dc:	4b24      	ldr	r3, [pc, #144]	; (801fa70 <tcp_close_shutdown+0x1b8>)
 801f9de:	681b      	ldr	r3, [r3, #0]
 801f9e0:	60bb      	str	r3, [r7, #8]
 801f9e2:	e00c      	b.n	801f9fe <tcp_close_shutdown+0x146>
 801f9e4:	68bb      	ldr	r3, [r7, #8]
 801f9e6:	68da      	ldr	r2, [r3, #12]
 801f9e8:	687b      	ldr	r3, [r7, #4]
 801f9ea:	429a      	cmp	r2, r3
 801f9ec:	d104      	bne.n	801f9f8 <tcp_close_shutdown+0x140>
 801f9ee:	687b      	ldr	r3, [r7, #4]
 801f9f0:	68da      	ldr	r2, [r3, #12]
 801f9f2:	68bb      	ldr	r3, [r7, #8]
 801f9f4:	60da      	str	r2, [r3, #12]
 801f9f6:	e005      	b.n	801fa04 <tcp_close_shutdown+0x14c>
 801f9f8:	68bb      	ldr	r3, [r7, #8]
 801f9fa:	68db      	ldr	r3, [r3, #12]
 801f9fc:	60bb      	str	r3, [r7, #8]
 801f9fe:	68bb      	ldr	r3, [r7, #8]
 801fa00:	2b00      	cmp	r3, #0
 801fa02:	d1ef      	bne.n	801f9e4 <tcp_close_shutdown+0x12c>
 801fa04:	687b      	ldr	r3, [r7, #4]
 801fa06:	2200      	movs	r2, #0
 801fa08:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 801fa0a:	6878      	ldr	r0, [r7, #4]
 801fa0c:	f7ff fea2 	bl	801f754 <tcp_free>
      break;
 801fa10:	e01a      	b.n	801fa48 <tcp_close_shutdown+0x190>
    case LISTEN:
      tcp_listen_closed(pcb);
 801fa12:	6878      	ldr	r0, [r7, #4]
 801fa14:	f7ff ff16 	bl	801f844 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 801fa18:	6879      	ldr	r1, [r7, #4]
 801fa1a:	4816      	ldr	r0, [pc, #88]	; (801fa74 <tcp_close_shutdown+0x1bc>)
 801fa1c:	f001 fb06 	bl	802102c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 801fa20:	6878      	ldr	r0, [r7, #4]
 801fa22:	f7ff feb3 	bl	801f78c <tcp_free_listen>
      break;
 801fa26:	e00f      	b.n	801fa48 <tcp_close_shutdown+0x190>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801fa28:	6879      	ldr	r1, [r7, #4]
 801fa2a:	480e      	ldr	r0, [pc, #56]	; (801fa64 <tcp_close_shutdown+0x1ac>)
 801fa2c:	f001 fafe 	bl	802102c <tcp_pcb_remove>
 801fa30:	4b0d      	ldr	r3, [pc, #52]	; (801fa68 <tcp_close_shutdown+0x1b0>)
 801fa32:	2201      	movs	r2, #1
 801fa34:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 801fa36:	6878      	ldr	r0, [r7, #4]
 801fa38:	f7ff fe8c 	bl	801f754 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 801fa3c:	e004      	b.n	801fa48 <tcp_close_shutdown+0x190>
    default:
      return tcp_close_shutdown_fin(pcb);
 801fa3e:	6878      	ldr	r0, [r7, #4]
 801fa40:	f000 f81a 	bl	801fa78 <tcp_close_shutdown_fin>
 801fa44:	4603      	mov	r3, r0
 801fa46:	e000      	b.n	801fa4a <tcp_close_shutdown+0x192>
  }
  return ERR_OK;
 801fa48:	2300      	movs	r3, #0
}
 801fa4a:	4618      	mov	r0, r3
 801fa4c:	3710      	adds	r7, #16
 801fa4e:	46bd      	mov	sp, r7
 801fa50:	bdb0      	pop	{r4, r5, r7, pc}
 801fa52:	bf00      	nop
 801fa54:	080290d4 	.word	0x080290d4
 801fa58:	080291a8 	.word	0x080291a8
 801fa5c:	08029118 	.word	0x08029118
 801fa60:	080291c8 	.word	0x080291c8
 801fa64:	20022ab4 	.word	0x20022ab4
 801fa68:	20022ab0 	.word	0x20022ab0
 801fa6c:	20022ac8 	.word	0x20022ac8
 801fa70:	20022ac0 	.word	0x20022ac0
 801fa74:	20022abc 	.word	0x20022abc

0801fa78 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 801fa78:	b580      	push	{r7, lr}
 801fa7a:	b084      	sub	sp, #16
 801fa7c:	af00      	add	r7, sp, #0
 801fa7e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 801fa80:	687b      	ldr	r3, [r7, #4]
 801fa82:	2b00      	cmp	r3, #0
 801fa84:	d106      	bne.n	801fa94 <tcp_close_shutdown_fin+0x1c>
 801fa86:	4b2c      	ldr	r3, [pc, #176]	; (801fb38 <tcp_close_shutdown_fin+0xc0>)
 801fa88:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 801fa8c:	492b      	ldr	r1, [pc, #172]	; (801fb3c <tcp_close_shutdown_fin+0xc4>)
 801fa8e:	482c      	ldr	r0, [pc, #176]	; (801fb40 <tcp_close_shutdown_fin+0xc8>)
 801fa90:	f006 fc4e 	bl	8026330 <iprintf>

  switch (pcb->state) {
 801fa94:	687b      	ldr	r3, [r7, #4]
 801fa96:	7d1b      	ldrb	r3, [r3, #20]
 801fa98:	2b04      	cmp	r3, #4
 801fa9a:	d010      	beq.n	801fabe <tcp_close_shutdown_fin+0x46>
 801fa9c:	2b07      	cmp	r3, #7
 801fa9e:	d01b      	beq.n	801fad8 <tcp_close_shutdown_fin+0x60>
 801faa0:	2b03      	cmp	r3, #3
 801faa2:	d126      	bne.n	801faf2 <tcp_close_shutdown_fin+0x7a>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 801faa4:	6878      	ldr	r0, [r7, #4]
 801faa6:	f004 f9c7 	bl	8023e38 <tcp_send_fin>
 801faaa:	4603      	mov	r3, r0
 801faac:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801faae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801fab2:	2b00      	cmp	r3, #0
 801fab4:	d11f      	bne.n	801faf6 <tcp_close_shutdown_fin+0x7e>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 801fab6:	687b      	ldr	r3, [r7, #4]
 801fab8:	2205      	movs	r2, #5
 801faba:	751a      	strb	r2, [r3, #20]
      }
      break;
 801fabc:	e01b      	b.n	801faf6 <tcp_close_shutdown_fin+0x7e>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 801fabe:	6878      	ldr	r0, [r7, #4]
 801fac0:	f004 f9ba 	bl	8023e38 <tcp_send_fin>
 801fac4:	4603      	mov	r3, r0
 801fac6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801fac8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801facc:	2b00      	cmp	r3, #0
 801face:	d114      	bne.n	801fafa <tcp_close_shutdown_fin+0x82>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 801fad0:	687b      	ldr	r3, [r7, #4]
 801fad2:	2205      	movs	r2, #5
 801fad4:	751a      	strb	r2, [r3, #20]
      }
      break;
 801fad6:	e010      	b.n	801fafa <tcp_close_shutdown_fin+0x82>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 801fad8:	6878      	ldr	r0, [r7, #4]
 801fada:	f004 f9ad 	bl	8023e38 <tcp_send_fin>
 801fade:	4603      	mov	r3, r0
 801fae0:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801fae2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801fae6:	2b00      	cmp	r3, #0
 801fae8:	d109      	bne.n	801fafe <tcp_close_shutdown_fin+0x86>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 801faea:	687b      	ldr	r3, [r7, #4]
 801faec:	2209      	movs	r2, #9
 801faee:	751a      	strb	r2, [r3, #20]
      }
      break;
 801faf0:	e005      	b.n	801fafe <tcp_close_shutdown_fin+0x86>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 801faf2:	2300      	movs	r3, #0
 801faf4:	e01c      	b.n	801fb30 <tcp_close_shutdown_fin+0xb8>
      break;
 801faf6:	bf00      	nop
 801faf8:	e002      	b.n	801fb00 <tcp_close_shutdown_fin+0x88>
      break;
 801fafa:	bf00      	nop
 801fafc:	e000      	b.n	801fb00 <tcp_close_shutdown_fin+0x88>
      break;
 801fafe:	bf00      	nop
  }

  if (err == ERR_OK) {
 801fb00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801fb04:	2b00      	cmp	r3, #0
 801fb06:	d103      	bne.n	801fb10 <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 801fb08:	6878      	ldr	r0, [r7, #4]
 801fb0a:	f004 fad5 	bl	80240b8 <tcp_output>
 801fb0e:	e00d      	b.n	801fb2c <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 801fb10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801fb14:	f1b3 3fff 	cmp.w	r3, #4294967295
 801fb18:	d108      	bne.n	801fb2c <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 801fb1a:	687b      	ldr	r3, [r7, #4]
 801fb1c:	8b5b      	ldrh	r3, [r3, #26]
 801fb1e:	f043 0308 	orr.w	r3, r3, #8
 801fb22:	b29a      	uxth	r2, r3
 801fb24:	687b      	ldr	r3, [r7, #4]
 801fb26:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 801fb28:	2300      	movs	r3, #0
 801fb2a:	e001      	b.n	801fb30 <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 801fb2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801fb30:	4618      	mov	r0, r3
 801fb32:	3710      	adds	r7, #16
 801fb34:	46bd      	mov	sp, r7
 801fb36:	bd80      	pop	{r7, pc}
 801fb38:	080290d4 	.word	0x080290d4
 801fb3c:	08029184 	.word	0x08029184
 801fb40:	08029118 	.word	0x08029118

0801fb44 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 801fb44:	b580      	push	{r7, lr}
 801fb46:	b082      	sub	sp, #8
 801fb48:	af00      	add	r7, sp, #0
 801fb4a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 801fb4c:	687b      	ldr	r3, [r7, #4]
 801fb4e:	2b00      	cmp	r3, #0
 801fb50:	d109      	bne.n	801fb66 <tcp_close+0x22>
 801fb52:	4b0f      	ldr	r3, [pc, #60]	; (801fb90 <tcp_close+0x4c>)
 801fb54:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 801fb58:	490e      	ldr	r1, [pc, #56]	; (801fb94 <tcp_close+0x50>)
 801fb5a:	480f      	ldr	r0, [pc, #60]	; (801fb98 <tcp_close+0x54>)
 801fb5c:	f006 fbe8 	bl	8026330 <iprintf>
 801fb60:	f06f 030f 	mvn.w	r3, #15
 801fb64:	e00f      	b.n	801fb86 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 801fb66:	687b      	ldr	r3, [r7, #4]
 801fb68:	7d1b      	ldrb	r3, [r3, #20]
 801fb6a:	2b01      	cmp	r3, #1
 801fb6c:	d006      	beq.n	801fb7c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 801fb6e:	687b      	ldr	r3, [r7, #4]
 801fb70:	8b5b      	ldrh	r3, [r3, #26]
 801fb72:	f043 0310 	orr.w	r3, r3, #16
 801fb76:	b29a      	uxth	r2, r3
 801fb78:	687b      	ldr	r3, [r7, #4]
 801fb7a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 801fb7c:	2101      	movs	r1, #1
 801fb7e:	6878      	ldr	r0, [r7, #4]
 801fb80:	f7ff fe9a 	bl	801f8b8 <tcp_close_shutdown>
 801fb84:	4603      	mov	r3, r0
}
 801fb86:	4618      	mov	r0, r3
 801fb88:	3708      	adds	r7, #8
 801fb8a:	46bd      	mov	sp, r7
 801fb8c:	bd80      	pop	{r7, pc}
 801fb8e:	bf00      	nop
 801fb90:	080290d4 	.word	0x080290d4
 801fb94:	080291e4 	.word	0x080291e4
 801fb98:	08029118 	.word	0x08029118

0801fb9c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 801fb9c:	b580      	push	{r7, lr}
 801fb9e:	b08e      	sub	sp, #56	; 0x38
 801fba0:	af04      	add	r7, sp, #16
 801fba2:	6078      	str	r0, [r7, #4]
 801fba4:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 801fba6:	687b      	ldr	r3, [r7, #4]
 801fba8:	2b00      	cmp	r3, #0
 801fbaa:	d107      	bne.n	801fbbc <tcp_abandon+0x20>
 801fbac:	4b4d      	ldr	r3, [pc, #308]	; (801fce4 <tcp_abandon+0x148>)
 801fbae:	f240 223d 	movw	r2, #573	; 0x23d
 801fbb2:	494d      	ldr	r1, [pc, #308]	; (801fce8 <tcp_abandon+0x14c>)
 801fbb4:	484d      	ldr	r0, [pc, #308]	; (801fcec <tcp_abandon+0x150>)
 801fbb6:	f006 fbbb 	bl	8026330 <iprintf>
 801fbba:	e090      	b.n	801fcde <tcp_abandon+0x142>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 801fbbc:	687b      	ldr	r3, [r7, #4]
 801fbbe:	7d1b      	ldrb	r3, [r3, #20]
 801fbc0:	2b01      	cmp	r3, #1
 801fbc2:	d106      	bne.n	801fbd2 <tcp_abandon+0x36>
 801fbc4:	4b47      	ldr	r3, [pc, #284]	; (801fce4 <tcp_abandon+0x148>)
 801fbc6:	f240 2241 	movw	r2, #577	; 0x241
 801fbca:	4949      	ldr	r1, [pc, #292]	; (801fcf0 <tcp_abandon+0x154>)
 801fbcc:	4847      	ldr	r0, [pc, #284]	; (801fcec <tcp_abandon+0x150>)
 801fbce:	f006 fbaf 	bl	8026330 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 801fbd2:	687b      	ldr	r3, [r7, #4]
 801fbd4:	7d1b      	ldrb	r3, [r3, #20]
 801fbd6:	2b0a      	cmp	r3, #10
 801fbd8:	d107      	bne.n	801fbea <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 801fbda:	6879      	ldr	r1, [r7, #4]
 801fbdc:	4845      	ldr	r0, [pc, #276]	; (801fcf4 <tcp_abandon+0x158>)
 801fbde:	f001 fa25 	bl	802102c <tcp_pcb_remove>
    tcp_free(pcb);
 801fbe2:	6878      	ldr	r0, [r7, #4]
 801fbe4:	f7ff fdb6 	bl	801f754 <tcp_free>
 801fbe8:	e079      	b.n	801fcde <tcp_abandon+0x142>
  } else {
    int send_rst = 0;
 801fbea:	2300      	movs	r3, #0
 801fbec:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 801fbee:	2300      	movs	r3, #0
 801fbf0:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 801fbf2:	687b      	ldr	r3, [r7, #4]
 801fbf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801fbf6:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 801fbf8:	687b      	ldr	r3, [r7, #4]
 801fbfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fbfc:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 801fbfe:	687b      	ldr	r3, [r7, #4]
 801fc00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801fc04:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 801fc06:	687b      	ldr	r3, [r7, #4]
 801fc08:	691b      	ldr	r3, [r3, #16]
 801fc0a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 801fc0c:	687b      	ldr	r3, [r7, #4]
 801fc0e:	7d1b      	ldrb	r3, [r3, #20]
 801fc10:	2b00      	cmp	r3, #0
 801fc12:	d126      	bne.n	801fc62 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 801fc14:	687b      	ldr	r3, [r7, #4]
 801fc16:	8adb      	ldrh	r3, [r3, #22]
 801fc18:	2b00      	cmp	r3, #0
 801fc1a:	d02e      	beq.n	801fc7a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801fc1c:	4b36      	ldr	r3, [pc, #216]	; (801fcf8 <tcp_abandon+0x15c>)
 801fc1e:	681a      	ldr	r2, [r3, #0]
 801fc20:	687b      	ldr	r3, [r7, #4]
 801fc22:	429a      	cmp	r2, r3
 801fc24:	d105      	bne.n	801fc32 <tcp_abandon+0x96>
 801fc26:	4b34      	ldr	r3, [pc, #208]	; (801fcf8 <tcp_abandon+0x15c>)
 801fc28:	681b      	ldr	r3, [r3, #0]
 801fc2a:	68db      	ldr	r3, [r3, #12]
 801fc2c:	4a32      	ldr	r2, [pc, #200]	; (801fcf8 <tcp_abandon+0x15c>)
 801fc2e:	6013      	str	r3, [r2, #0]
 801fc30:	e013      	b.n	801fc5a <tcp_abandon+0xbe>
 801fc32:	4b31      	ldr	r3, [pc, #196]	; (801fcf8 <tcp_abandon+0x15c>)
 801fc34:	681b      	ldr	r3, [r3, #0]
 801fc36:	61fb      	str	r3, [r7, #28]
 801fc38:	e00c      	b.n	801fc54 <tcp_abandon+0xb8>
 801fc3a:	69fb      	ldr	r3, [r7, #28]
 801fc3c:	68da      	ldr	r2, [r3, #12]
 801fc3e:	687b      	ldr	r3, [r7, #4]
 801fc40:	429a      	cmp	r2, r3
 801fc42:	d104      	bne.n	801fc4e <tcp_abandon+0xb2>
 801fc44:	687b      	ldr	r3, [r7, #4]
 801fc46:	68da      	ldr	r2, [r3, #12]
 801fc48:	69fb      	ldr	r3, [r7, #28]
 801fc4a:	60da      	str	r2, [r3, #12]
 801fc4c:	e005      	b.n	801fc5a <tcp_abandon+0xbe>
 801fc4e:	69fb      	ldr	r3, [r7, #28]
 801fc50:	68db      	ldr	r3, [r3, #12]
 801fc52:	61fb      	str	r3, [r7, #28]
 801fc54:	69fb      	ldr	r3, [r7, #28]
 801fc56:	2b00      	cmp	r3, #0
 801fc58:	d1ef      	bne.n	801fc3a <tcp_abandon+0x9e>
 801fc5a:	687b      	ldr	r3, [r7, #4]
 801fc5c:	2200      	movs	r2, #0
 801fc5e:	60da      	str	r2, [r3, #12]
 801fc60:	e00b      	b.n	801fc7a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 801fc62:	683b      	ldr	r3, [r7, #0]
 801fc64:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 801fc66:	687b      	ldr	r3, [r7, #4]
 801fc68:	8adb      	ldrh	r3, [r3, #22]
 801fc6a:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801fc6c:	6879      	ldr	r1, [r7, #4]
 801fc6e:	4823      	ldr	r0, [pc, #140]	; (801fcfc <tcp_abandon+0x160>)
 801fc70:	f001 f9dc 	bl	802102c <tcp_pcb_remove>
 801fc74:	4b22      	ldr	r3, [pc, #136]	; (801fd00 <tcp_abandon+0x164>)
 801fc76:	2201      	movs	r2, #1
 801fc78:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 801fc7a:	687b      	ldr	r3, [r7, #4]
 801fc7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801fc7e:	2b00      	cmp	r3, #0
 801fc80:	d004      	beq.n	801fc8c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 801fc82:	687b      	ldr	r3, [r7, #4]
 801fc84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801fc86:	4618      	mov	r0, r3
 801fc88:	f000 febe 	bl	8020a08 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 801fc8c:	687b      	ldr	r3, [r7, #4]
 801fc8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801fc90:	2b00      	cmp	r3, #0
 801fc92:	d004      	beq.n	801fc9e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 801fc94:	687b      	ldr	r3, [r7, #4]
 801fc96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801fc98:	4618      	mov	r0, r3
 801fc9a:	f000 feb5 	bl	8020a08 <tcp_segs_free>
    if (pcb->ooseq != NULL) {
      tcp_segs_free(pcb->ooseq);
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 801fc9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fca0:	2b00      	cmp	r3, #0
 801fca2:	d00e      	beq.n	801fcc2 <tcp_abandon+0x126>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 801fca4:	6879      	ldr	r1, [r7, #4]
 801fca6:	687b      	ldr	r3, [r7, #4]
 801fca8:	3304      	adds	r3, #4
 801fcaa:	687a      	ldr	r2, [r7, #4]
 801fcac:	8b12      	ldrh	r2, [r2, #24]
 801fcae:	9202      	str	r2, [sp, #8]
 801fcb0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801fcb2:	9201      	str	r2, [sp, #4]
 801fcb4:	9300      	str	r3, [sp, #0]
 801fcb6:	460b      	mov	r3, r1
 801fcb8:	697a      	ldr	r2, [r7, #20]
 801fcba:	69b9      	ldr	r1, [r7, #24]
 801fcbc:	6878      	ldr	r0, [r7, #4]
 801fcbe:	f004 ffc7 	bl	8024c50 <tcp_rst>
    }
    last_state = pcb->state;
 801fcc2:	687b      	ldr	r3, [r7, #4]
 801fcc4:	7d1b      	ldrb	r3, [r3, #20]
 801fcc6:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 801fcc8:	6878      	ldr	r0, [r7, #4]
 801fcca:	f7ff fd43 	bl	801f754 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 801fcce:	693b      	ldr	r3, [r7, #16]
 801fcd0:	2b00      	cmp	r3, #0
 801fcd2:	d004      	beq.n	801fcde <tcp_abandon+0x142>
 801fcd4:	693b      	ldr	r3, [r7, #16]
 801fcd6:	f06f 010c 	mvn.w	r1, #12
 801fcda:	68f8      	ldr	r0, [r7, #12]
 801fcdc:	4798      	blx	r3
  }
}
 801fcde:	3728      	adds	r7, #40	; 0x28
 801fce0:	46bd      	mov	sp, r7
 801fce2:	bd80      	pop	{r7, pc}
 801fce4:	080290d4 	.word	0x080290d4
 801fce8:	08029218 	.word	0x08029218
 801fcec:	08029118 	.word	0x08029118
 801fcf0:	08029234 	.word	0x08029234
 801fcf4:	20022ac4 	.word	0x20022ac4
 801fcf8:	20022ac0 	.word	0x20022ac0
 801fcfc:	20022ab4 	.word	0x20022ab4
 801fd00:	20022ab0 	.word	0x20022ab0

0801fd04 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 801fd04:	b580      	push	{r7, lr}
 801fd06:	b082      	sub	sp, #8
 801fd08:	af00      	add	r7, sp, #0
 801fd0a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 801fd0c:	2101      	movs	r1, #1
 801fd0e:	6878      	ldr	r0, [r7, #4]
 801fd10:	f7ff ff44 	bl	801fb9c <tcp_abandon>
}
 801fd14:	bf00      	nop
 801fd16:	3708      	adds	r7, #8
 801fd18:	46bd      	mov	sp, r7
 801fd1a:	bd80      	pop	{r7, pc}

0801fd1c <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801fd1c:	b580      	push	{r7, lr}
 801fd1e:	b088      	sub	sp, #32
 801fd20:	af00      	add	r7, sp, #0
 801fd22:	60f8      	str	r0, [r7, #12]
 801fd24:	60b9      	str	r1, [r7, #8]
 801fd26:	4613      	mov	r3, r2
 801fd28:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 801fd2a:	2304      	movs	r3, #4
 801fd2c:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801fd2e:	68bb      	ldr	r3, [r7, #8]
 801fd30:	2b00      	cmp	r3, #0
 801fd32:	d101      	bne.n	801fd38 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 801fd34:	4b3e      	ldr	r3, [pc, #248]	; (801fe30 <tcp_bind+0x114>)
 801fd36:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801fd38:	68fb      	ldr	r3, [r7, #12]
 801fd3a:	2b00      	cmp	r3, #0
 801fd3c:	d109      	bne.n	801fd52 <tcp_bind+0x36>
 801fd3e:	4b3d      	ldr	r3, [pc, #244]	; (801fe34 <tcp_bind+0x118>)
 801fd40:	f240 22a9 	movw	r2, #681	; 0x2a9
 801fd44:	493c      	ldr	r1, [pc, #240]	; (801fe38 <tcp_bind+0x11c>)
 801fd46:	483d      	ldr	r0, [pc, #244]	; (801fe3c <tcp_bind+0x120>)
 801fd48:	f006 faf2 	bl	8026330 <iprintf>
 801fd4c:	f06f 030f 	mvn.w	r3, #15
 801fd50:	e06a      	b.n	801fe28 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 801fd52:	68fb      	ldr	r3, [r7, #12]
 801fd54:	7d1b      	ldrb	r3, [r3, #20]
 801fd56:	2b00      	cmp	r3, #0
 801fd58:	d009      	beq.n	801fd6e <tcp_bind+0x52>
 801fd5a:	4b36      	ldr	r3, [pc, #216]	; (801fe34 <tcp_bind+0x118>)
 801fd5c:	f240 22ab 	movw	r2, #683	; 0x2ab
 801fd60:	4937      	ldr	r1, [pc, #220]	; (801fe40 <tcp_bind+0x124>)
 801fd62:	4836      	ldr	r0, [pc, #216]	; (801fe3c <tcp_bind+0x120>)
 801fd64:	f006 fae4 	bl	8026330 <iprintf>
 801fd68:	f06f 0305 	mvn.w	r3, #5
 801fd6c:	e05c      	b.n	801fe28 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 801fd6e:	88fb      	ldrh	r3, [r7, #6]
 801fd70:	2b00      	cmp	r3, #0
 801fd72:	d109      	bne.n	801fd88 <tcp_bind+0x6c>
    port = tcp_new_port();
 801fd74:	f000 f9f4 	bl	8020160 <tcp_new_port>
 801fd78:	4603      	mov	r3, r0
 801fd7a:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801fd7c:	88fb      	ldrh	r3, [r7, #6]
 801fd7e:	2b00      	cmp	r3, #0
 801fd80:	d135      	bne.n	801fdee <tcp_bind+0xd2>
      return ERR_BUF;
 801fd82:	f06f 0301 	mvn.w	r3, #1
 801fd86:	e04f      	b.n	801fe28 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 801fd88:	2300      	movs	r3, #0
 801fd8a:	61fb      	str	r3, [r7, #28]
 801fd8c:	e02b      	b.n	801fde6 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 801fd8e:	4a2d      	ldr	r2, [pc, #180]	; (801fe44 <tcp_bind+0x128>)
 801fd90:	69fb      	ldr	r3, [r7, #28]
 801fd92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801fd96:	681b      	ldr	r3, [r3, #0]
 801fd98:	61bb      	str	r3, [r7, #24]
 801fd9a:	e01e      	b.n	801fdda <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 801fd9c:	69bb      	ldr	r3, [r7, #24]
 801fd9e:	8adb      	ldrh	r3, [r3, #22]
 801fda0:	88fa      	ldrh	r2, [r7, #6]
 801fda2:	429a      	cmp	r2, r3
 801fda4:	d116      	bne.n	801fdd4 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 801fda6:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 801fda8:	2b00      	cmp	r3, #0
 801fdaa:	d010      	beq.n	801fdce <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 801fdac:	69bb      	ldr	r3, [r7, #24]
 801fdae:	681b      	ldr	r3, [r3, #0]
 801fdb0:	2b00      	cmp	r3, #0
 801fdb2:	d00c      	beq.n	801fdce <tcp_bind+0xb2>
 801fdb4:	68bb      	ldr	r3, [r7, #8]
 801fdb6:	2b00      	cmp	r3, #0
 801fdb8:	d009      	beq.n	801fdce <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 801fdba:	68bb      	ldr	r3, [r7, #8]
 801fdbc:	681b      	ldr	r3, [r3, #0]
 801fdbe:	2b00      	cmp	r3, #0
 801fdc0:	d005      	beq.n	801fdce <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 801fdc2:	69bb      	ldr	r3, [r7, #24]
 801fdc4:	681a      	ldr	r2, [r3, #0]
 801fdc6:	68bb      	ldr	r3, [r7, #8]
 801fdc8:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 801fdca:	429a      	cmp	r2, r3
 801fdcc:	d102      	bne.n	801fdd4 <tcp_bind+0xb8>
              return ERR_USE;
 801fdce:	f06f 0307 	mvn.w	r3, #7
 801fdd2:	e029      	b.n	801fe28 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 801fdd4:	69bb      	ldr	r3, [r7, #24]
 801fdd6:	68db      	ldr	r3, [r3, #12]
 801fdd8:	61bb      	str	r3, [r7, #24]
 801fdda:	69bb      	ldr	r3, [r7, #24]
 801fddc:	2b00      	cmp	r3, #0
 801fdde:	d1dd      	bne.n	801fd9c <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 801fde0:	69fb      	ldr	r3, [r7, #28]
 801fde2:	3301      	adds	r3, #1
 801fde4:	61fb      	str	r3, [r7, #28]
 801fde6:	69fa      	ldr	r2, [r7, #28]
 801fde8:	697b      	ldr	r3, [r7, #20]
 801fdea:	429a      	cmp	r2, r3
 801fdec:	dbcf      	blt.n	801fd8e <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 801fdee:	68bb      	ldr	r3, [r7, #8]
 801fdf0:	2b00      	cmp	r3, #0
 801fdf2:	d00c      	beq.n	801fe0e <tcp_bind+0xf2>
 801fdf4:	68bb      	ldr	r3, [r7, #8]
 801fdf6:	681b      	ldr	r3, [r3, #0]
 801fdf8:	2b00      	cmp	r3, #0
 801fdfa:	d008      	beq.n	801fe0e <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 801fdfc:	68bb      	ldr	r3, [r7, #8]
 801fdfe:	2b00      	cmp	r3, #0
 801fe00:	d002      	beq.n	801fe08 <tcp_bind+0xec>
 801fe02:	68bb      	ldr	r3, [r7, #8]
 801fe04:	681b      	ldr	r3, [r3, #0]
 801fe06:	e000      	b.n	801fe0a <tcp_bind+0xee>
 801fe08:	2300      	movs	r3, #0
 801fe0a:	68fa      	ldr	r2, [r7, #12]
 801fe0c:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 801fe0e:	68fb      	ldr	r3, [r7, #12]
 801fe10:	88fa      	ldrh	r2, [r7, #6]
 801fe12:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 801fe14:	4b0c      	ldr	r3, [pc, #48]	; (801fe48 <tcp_bind+0x12c>)
 801fe16:	681a      	ldr	r2, [r3, #0]
 801fe18:	68fb      	ldr	r3, [r7, #12]
 801fe1a:	60da      	str	r2, [r3, #12]
 801fe1c:	4a0a      	ldr	r2, [pc, #40]	; (801fe48 <tcp_bind+0x12c>)
 801fe1e:	68fb      	ldr	r3, [r7, #12]
 801fe20:	6013      	str	r3, [r2, #0]
 801fe22:	f005 f8d9 	bl	8024fd8 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 801fe26:	2300      	movs	r3, #0
}
 801fe28:	4618      	mov	r0, r3
 801fe2a:	3720      	adds	r7, #32
 801fe2c:	46bd      	mov	sp, r7
 801fe2e:	bd80      	pop	{r7, pc}
 801fe30:	0802b720 	.word	0x0802b720
 801fe34:	080290d4 	.word	0x080290d4
 801fe38:	08029268 	.word	0x08029268
 801fe3c:	08029118 	.word	0x08029118
 801fe40:	08029280 	.word	0x08029280
 801fe44:	0802b820 	.word	0x0802b820
 801fe48:	20022ac0 	.word	0x20022ac0

0801fe4c <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 801fe4c:	b580      	push	{r7, lr}
 801fe4e:	b084      	sub	sp, #16
 801fe50:	af00      	add	r7, sp, #0
 801fe52:	60f8      	str	r0, [r7, #12]
 801fe54:	60b9      	str	r1, [r7, #8]
 801fe56:	4613      	mov	r3, r2
 801fe58:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 801fe5a:	68bb      	ldr	r3, [r7, #8]
 801fe5c:	2b00      	cmp	r3, #0
 801fe5e:	d106      	bne.n	801fe6e <tcp_accept_null+0x22>
 801fe60:	4b07      	ldr	r3, [pc, #28]	; (801fe80 <tcp_accept_null+0x34>)
 801fe62:	f240 320f 	movw	r2, #783	; 0x30f
 801fe66:	4907      	ldr	r1, [pc, #28]	; (801fe84 <tcp_accept_null+0x38>)
 801fe68:	4807      	ldr	r0, [pc, #28]	; (801fe88 <tcp_accept_null+0x3c>)
 801fe6a:	f006 fa61 	bl	8026330 <iprintf>

  tcp_abort(pcb);
 801fe6e:	68b8      	ldr	r0, [r7, #8]
 801fe70:	f7ff ff48 	bl	801fd04 <tcp_abort>

  return ERR_ABRT;
 801fe74:	f06f 030c 	mvn.w	r3, #12
}
 801fe78:	4618      	mov	r0, r3
 801fe7a:	3710      	adds	r7, #16
 801fe7c:	46bd      	mov	sp, r7
 801fe7e:	bd80      	pop	{r7, pc}
 801fe80:	080290d4 	.word	0x080290d4
 801fe84:	080292a8 	.word	0x080292a8
 801fe88:	08029118 	.word	0x08029118

0801fe8c <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 801fe8c:	b580      	push	{r7, lr}
 801fe8e:	b082      	sub	sp, #8
 801fe90:	af00      	add	r7, sp, #0
 801fe92:	6078      	str	r0, [r7, #4]
 801fe94:	460b      	mov	r3, r1
 801fe96:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 801fe98:	78fb      	ldrb	r3, [r7, #3]
 801fe9a:	2200      	movs	r2, #0
 801fe9c:	4619      	mov	r1, r3
 801fe9e:	6878      	ldr	r0, [r7, #4]
 801fea0:	f000 f806 	bl	801feb0 <tcp_listen_with_backlog_and_err>
 801fea4:	4603      	mov	r3, r0
}
 801fea6:	4618      	mov	r0, r3
 801fea8:	3708      	adds	r7, #8
 801feaa:	46bd      	mov	sp, r7
 801feac:	bd80      	pop	{r7, pc}
	...

0801feb0 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 801feb0:	b580      	push	{r7, lr}
 801feb2:	b088      	sub	sp, #32
 801feb4:	af00      	add	r7, sp, #0
 801feb6:	60f8      	str	r0, [r7, #12]
 801feb8:	460b      	mov	r3, r1
 801feba:	607a      	str	r2, [r7, #4]
 801febc:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 801febe:	2300      	movs	r3, #0
 801fec0:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 801fec2:	68fb      	ldr	r3, [r7, #12]
 801fec4:	2b00      	cmp	r3, #0
 801fec6:	d109      	bne.n	801fedc <tcp_listen_with_backlog_and_err+0x2c>
 801fec8:	4b47      	ldr	r3, [pc, #284]	; (801ffe8 <tcp_listen_with_backlog_and_err+0x138>)
 801feca:	f240 3259 	movw	r2, #857	; 0x359
 801fece:	4947      	ldr	r1, [pc, #284]	; (801ffec <tcp_listen_with_backlog_and_err+0x13c>)
 801fed0:	4847      	ldr	r0, [pc, #284]	; (801fff0 <tcp_listen_with_backlog_and_err+0x140>)
 801fed2:	f006 fa2d 	bl	8026330 <iprintf>
 801fed6:	23f0      	movs	r3, #240	; 0xf0
 801fed8:	76fb      	strb	r3, [r7, #27]
 801feda:	e079      	b.n	801ffd0 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 801fedc:	68fb      	ldr	r3, [r7, #12]
 801fede:	7d1b      	ldrb	r3, [r3, #20]
 801fee0:	2b00      	cmp	r3, #0
 801fee2:	d009      	beq.n	801fef8 <tcp_listen_with_backlog_and_err+0x48>
 801fee4:	4b40      	ldr	r3, [pc, #256]	; (801ffe8 <tcp_listen_with_backlog_and_err+0x138>)
 801fee6:	f240 325a 	movw	r2, #858	; 0x35a
 801feea:	4942      	ldr	r1, [pc, #264]	; (801fff4 <tcp_listen_with_backlog_and_err+0x144>)
 801feec:	4840      	ldr	r0, [pc, #256]	; (801fff0 <tcp_listen_with_backlog_and_err+0x140>)
 801feee:	f006 fa1f 	bl	8026330 <iprintf>
 801fef2:	23f1      	movs	r3, #241	; 0xf1
 801fef4:	76fb      	strb	r3, [r7, #27]
 801fef6:	e06b      	b.n	801ffd0 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 801fef8:	68fb      	ldr	r3, [r7, #12]
 801fefa:	7d1b      	ldrb	r3, [r3, #20]
 801fefc:	2b01      	cmp	r3, #1
 801fefe:	d104      	bne.n	801ff0a <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 801ff00:	68fb      	ldr	r3, [r7, #12]
 801ff02:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 801ff04:	23f7      	movs	r3, #247	; 0xf7
 801ff06:	76fb      	strb	r3, [r7, #27]
    goto done;
 801ff08:	e062      	b.n	801ffd0 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 801ff0a:	2002      	movs	r0, #2
 801ff0c:	f7fe fa12 	bl	801e334 <memp_malloc>
 801ff10:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 801ff12:	69fb      	ldr	r3, [r7, #28]
 801ff14:	2b00      	cmp	r3, #0
 801ff16:	d102      	bne.n	801ff1e <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 801ff18:	23ff      	movs	r3, #255	; 0xff
 801ff1a:	76fb      	strb	r3, [r7, #27]
    goto done;
 801ff1c:	e058      	b.n	801ffd0 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 801ff1e:	68fb      	ldr	r3, [r7, #12]
 801ff20:	691a      	ldr	r2, [r3, #16]
 801ff22:	69fb      	ldr	r3, [r7, #28]
 801ff24:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 801ff26:	68fb      	ldr	r3, [r7, #12]
 801ff28:	8ada      	ldrh	r2, [r3, #22]
 801ff2a:	69fb      	ldr	r3, [r7, #28]
 801ff2c:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 801ff2e:	69fb      	ldr	r3, [r7, #28]
 801ff30:	2201      	movs	r2, #1
 801ff32:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 801ff34:	68fb      	ldr	r3, [r7, #12]
 801ff36:	7d5a      	ldrb	r2, [r3, #21]
 801ff38:	69fb      	ldr	r3, [r7, #28]
 801ff3a:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 801ff3c:	68fb      	ldr	r3, [r7, #12]
 801ff3e:	7a5a      	ldrb	r2, [r3, #9]
 801ff40:	69fb      	ldr	r3, [r7, #28]
 801ff42:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 801ff44:	69fb      	ldr	r3, [r7, #28]
 801ff46:	2200      	movs	r2, #0
 801ff48:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 801ff4a:	68fb      	ldr	r3, [r7, #12]
 801ff4c:	7ada      	ldrb	r2, [r3, #11]
 801ff4e:	69fb      	ldr	r3, [r7, #28]
 801ff50:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 801ff52:	68fb      	ldr	r3, [r7, #12]
 801ff54:	7a9a      	ldrb	r2, [r3, #10]
 801ff56:	69fb      	ldr	r3, [r7, #28]
 801ff58:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 801ff5a:	68fb      	ldr	r3, [r7, #12]
 801ff5c:	681a      	ldr	r2, [r3, #0]
 801ff5e:	69fb      	ldr	r3, [r7, #28]
 801ff60:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 801ff62:	68fb      	ldr	r3, [r7, #12]
 801ff64:	8adb      	ldrh	r3, [r3, #22]
 801ff66:	2b00      	cmp	r3, #0
 801ff68:	d021      	beq.n	801ffae <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 801ff6a:	4b23      	ldr	r3, [pc, #140]	; (801fff8 <tcp_listen_with_backlog_and_err+0x148>)
 801ff6c:	681a      	ldr	r2, [r3, #0]
 801ff6e:	68fb      	ldr	r3, [r7, #12]
 801ff70:	429a      	cmp	r2, r3
 801ff72:	d105      	bne.n	801ff80 <tcp_listen_with_backlog_and_err+0xd0>
 801ff74:	4b20      	ldr	r3, [pc, #128]	; (801fff8 <tcp_listen_with_backlog_and_err+0x148>)
 801ff76:	681b      	ldr	r3, [r3, #0]
 801ff78:	68db      	ldr	r3, [r3, #12]
 801ff7a:	4a1f      	ldr	r2, [pc, #124]	; (801fff8 <tcp_listen_with_backlog_and_err+0x148>)
 801ff7c:	6013      	str	r3, [r2, #0]
 801ff7e:	e013      	b.n	801ffa8 <tcp_listen_with_backlog_and_err+0xf8>
 801ff80:	4b1d      	ldr	r3, [pc, #116]	; (801fff8 <tcp_listen_with_backlog_and_err+0x148>)
 801ff82:	681b      	ldr	r3, [r3, #0]
 801ff84:	617b      	str	r3, [r7, #20]
 801ff86:	e00c      	b.n	801ffa2 <tcp_listen_with_backlog_and_err+0xf2>
 801ff88:	697b      	ldr	r3, [r7, #20]
 801ff8a:	68da      	ldr	r2, [r3, #12]
 801ff8c:	68fb      	ldr	r3, [r7, #12]
 801ff8e:	429a      	cmp	r2, r3
 801ff90:	d104      	bne.n	801ff9c <tcp_listen_with_backlog_and_err+0xec>
 801ff92:	68fb      	ldr	r3, [r7, #12]
 801ff94:	68da      	ldr	r2, [r3, #12]
 801ff96:	697b      	ldr	r3, [r7, #20]
 801ff98:	60da      	str	r2, [r3, #12]
 801ff9a:	e005      	b.n	801ffa8 <tcp_listen_with_backlog_and_err+0xf8>
 801ff9c:	697b      	ldr	r3, [r7, #20]
 801ff9e:	68db      	ldr	r3, [r3, #12]
 801ffa0:	617b      	str	r3, [r7, #20]
 801ffa2:	697b      	ldr	r3, [r7, #20]
 801ffa4:	2b00      	cmp	r3, #0
 801ffa6:	d1ef      	bne.n	801ff88 <tcp_listen_with_backlog_and_err+0xd8>
 801ffa8:	68fb      	ldr	r3, [r7, #12]
 801ffaa:	2200      	movs	r2, #0
 801ffac:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 801ffae:	68f8      	ldr	r0, [r7, #12]
 801ffb0:	f7ff fbd0 	bl	801f754 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 801ffb4:	69fb      	ldr	r3, [r7, #28]
 801ffb6:	4a11      	ldr	r2, [pc, #68]	; (801fffc <tcp_listen_with_backlog_and_err+0x14c>)
 801ffb8:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 801ffba:	4b11      	ldr	r3, [pc, #68]	; (8020000 <tcp_listen_with_backlog_and_err+0x150>)
 801ffbc:	681a      	ldr	r2, [r3, #0]
 801ffbe:	69fb      	ldr	r3, [r7, #28]
 801ffc0:	60da      	str	r2, [r3, #12]
 801ffc2:	4a0f      	ldr	r2, [pc, #60]	; (8020000 <tcp_listen_with_backlog_and_err+0x150>)
 801ffc4:	69fb      	ldr	r3, [r7, #28]
 801ffc6:	6013      	str	r3, [r2, #0]
 801ffc8:	f005 f806 	bl	8024fd8 <tcp_timer_needed>
  res = ERR_OK;
 801ffcc:	2300      	movs	r3, #0
 801ffce:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 801ffd0:	687b      	ldr	r3, [r7, #4]
 801ffd2:	2b00      	cmp	r3, #0
 801ffd4:	d002      	beq.n	801ffdc <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 801ffd6:	687b      	ldr	r3, [r7, #4]
 801ffd8:	7efa      	ldrb	r2, [r7, #27]
 801ffda:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 801ffdc:	69fb      	ldr	r3, [r7, #28]
}
 801ffde:	4618      	mov	r0, r3
 801ffe0:	3720      	adds	r7, #32
 801ffe2:	46bd      	mov	sp, r7
 801ffe4:	bd80      	pop	{r7, pc}
 801ffe6:	bf00      	nop
 801ffe8:	080290d4 	.word	0x080290d4
 801ffec:	080292c8 	.word	0x080292c8
 801fff0:	08029118 	.word	0x08029118
 801fff4:	080292f8 	.word	0x080292f8
 801fff8:	20022ac0 	.word	0x20022ac0
 801fffc:	0801fe4d 	.word	0x0801fe4d
 8020000:	20022abc 	.word	0x20022abc

08020004 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8020004:	b580      	push	{r7, lr}
 8020006:	b084      	sub	sp, #16
 8020008:	af00      	add	r7, sp, #0
 802000a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 802000c:	687b      	ldr	r3, [r7, #4]
 802000e:	2b00      	cmp	r3, #0
 8020010:	d106      	bne.n	8020020 <tcp_update_rcv_ann_wnd+0x1c>
 8020012:	4b26      	ldr	r3, [pc, #152]	; (80200ac <tcp_update_rcv_ann_wnd+0xa8>)
 8020014:	f240 32a6 	movw	r2, #934	; 0x3a6
 8020018:	4925      	ldr	r1, [pc, #148]	; (80200b0 <tcp_update_rcv_ann_wnd+0xac>)
 802001a:	4826      	ldr	r0, [pc, #152]	; (80200b4 <tcp_update_rcv_ann_wnd+0xb0>)
 802001c:	f006 f988 	bl	8026330 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8020020:	687b      	ldr	r3, [r7, #4]
 8020022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020024:	687a      	ldr	r2, [r7, #4]
 8020026:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8020028:	4413      	add	r3, r2
 802002a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 802002c:	687b      	ldr	r3, [r7, #4]
 802002e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020030:	687a      	ldr	r2, [r7, #4]
 8020032:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8020034:	f240 51b4 	movw	r1, #1460	; 0x5b4
 8020038:	428a      	cmp	r2, r1
 802003a:	d802      	bhi.n	8020042 <tcp_update_rcv_ann_wnd+0x3e>
 802003c:	687a      	ldr	r2, [r7, #4]
 802003e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8020040:	e001      	b.n	8020046 <tcp_update_rcv_ann_wnd+0x42>
 8020042:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8020046:	4413      	add	r3, r2
 8020048:	68fa      	ldr	r2, [r7, #12]
 802004a:	1ad3      	subs	r3, r2, r3
 802004c:	2b00      	cmp	r3, #0
 802004e:	db08      	blt.n	8020062 <tcp_update_rcv_ann_wnd+0x5e>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8020050:	687b      	ldr	r3, [r7, #4]
 8020052:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8020054:	687b      	ldr	r3, [r7, #4]
 8020056:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8020058:	687b      	ldr	r3, [r7, #4]
 802005a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802005c:	68fa      	ldr	r2, [r7, #12]
 802005e:	1ad3      	subs	r3, r2, r3
 8020060:	e020      	b.n	80200a4 <tcp_update_rcv_ann_wnd+0xa0>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8020062:	687b      	ldr	r3, [r7, #4]
 8020064:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8020066:	687b      	ldr	r3, [r7, #4]
 8020068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802006a:	1ad3      	subs	r3, r2, r3
 802006c:	2b00      	cmp	r3, #0
 802006e:	dd03      	ble.n	8020078 <tcp_update_rcv_ann_wnd+0x74>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8020070:	687b      	ldr	r3, [r7, #4]
 8020072:	2200      	movs	r2, #0
 8020074:	855a      	strh	r2, [r3, #42]	; 0x2a
 8020076:	e014      	b.n	80200a2 <tcp_update_rcv_ann_wnd+0x9e>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8020078:	687b      	ldr	r3, [r7, #4]
 802007a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802007c:	687b      	ldr	r3, [r7, #4]
 802007e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020080:	1ad3      	subs	r3, r2, r3
 8020082:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8020084:	68bb      	ldr	r3, [r7, #8]
 8020086:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 802008a:	d306      	bcc.n	802009a <tcp_update_rcv_ann_wnd+0x96>
 802008c:	4b07      	ldr	r3, [pc, #28]	; (80200ac <tcp_update_rcv_ann_wnd+0xa8>)
 802008e:	f240 32b6 	movw	r2, #950	; 0x3b6
 8020092:	4909      	ldr	r1, [pc, #36]	; (80200b8 <tcp_update_rcv_ann_wnd+0xb4>)
 8020094:	4807      	ldr	r0, [pc, #28]	; (80200b4 <tcp_update_rcv_ann_wnd+0xb0>)
 8020096:	f006 f94b 	bl	8026330 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 802009a:	68bb      	ldr	r3, [r7, #8]
 802009c:	b29a      	uxth	r2, r3
 802009e:	687b      	ldr	r3, [r7, #4]
 80200a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 80200a2:	2300      	movs	r3, #0
  }
}
 80200a4:	4618      	mov	r0, r3
 80200a6:	3710      	adds	r7, #16
 80200a8:	46bd      	mov	sp, r7
 80200aa:	bd80      	pop	{r7, pc}
 80200ac:	080290d4 	.word	0x080290d4
 80200b0:	08029330 	.word	0x08029330
 80200b4:	08029118 	.word	0x08029118
 80200b8:	08029354 	.word	0x08029354

080200bc <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80200bc:	b580      	push	{r7, lr}
 80200be:	b084      	sub	sp, #16
 80200c0:	af00      	add	r7, sp, #0
 80200c2:	6078      	str	r0, [r7, #4]
 80200c4:	460b      	mov	r3, r1
 80200c6:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80200c8:	687b      	ldr	r3, [r7, #4]
 80200ca:	2b00      	cmp	r3, #0
 80200cc:	d107      	bne.n	80200de <tcp_recved+0x22>
 80200ce:	4b20      	ldr	r3, [pc, #128]	; (8020150 <tcp_recved+0x94>)
 80200d0:	f240 32cf 	movw	r2, #975	; 0x3cf
 80200d4:	491f      	ldr	r1, [pc, #124]	; (8020154 <tcp_recved+0x98>)
 80200d6:	4820      	ldr	r0, [pc, #128]	; (8020158 <tcp_recved+0x9c>)
 80200d8:	f006 f92a 	bl	8026330 <iprintf>
 80200dc:	e034      	b.n	8020148 <tcp_recved+0x8c>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80200de:	687b      	ldr	r3, [r7, #4]
 80200e0:	7d1b      	ldrb	r3, [r3, #20]
 80200e2:	2b01      	cmp	r3, #1
 80200e4:	d106      	bne.n	80200f4 <tcp_recved+0x38>
 80200e6:	4b1a      	ldr	r3, [pc, #104]	; (8020150 <tcp_recved+0x94>)
 80200e8:	f240 32d3 	movw	r2, #979	; 0x3d3
 80200ec:	491b      	ldr	r1, [pc, #108]	; (802015c <tcp_recved+0xa0>)
 80200ee:	481a      	ldr	r0, [pc, #104]	; (8020158 <tcp_recved+0x9c>)
 80200f0:	f006 f91e 	bl	8026330 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80200f4:	687b      	ldr	r3, [r7, #4]
 80200f6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80200f8:	887b      	ldrh	r3, [r7, #2]
 80200fa:	4413      	add	r3, r2
 80200fc:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80200fe:	89fb      	ldrh	r3, [r7, #14]
 8020100:	f640 3268 	movw	r2, #2920	; 0xb68
 8020104:	4293      	cmp	r3, r2
 8020106:	d804      	bhi.n	8020112 <tcp_recved+0x56>
 8020108:	687b      	ldr	r3, [r7, #4]
 802010a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802010c:	89fa      	ldrh	r2, [r7, #14]
 802010e:	429a      	cmp	r2, r3
 8020110:	d204      	bcs.n	802011c <tcp_recved+0x60>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8020112:	687b      	ldr	r3, [r7, #4]
 8020114:	f640 3268 	movw	r2, #2920	; 0xb68
 8020118:	851a      	strh	r2, [r3, #40]	; 0x28
 802011a:	e002      	b.n	8020122 <tcp_recved+0x66>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 802011c:	687b      	ldr	r3, [r7, #4]
 802011e:	89fa      	ldrh	r2, [r7, #14]
 8020120:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8020122:	6878      	ldr	r0, [r7, #4]
 8020124:	f7ff ff6e 	bl	8020004 <tcp_update_rcv_ann_wnd>
 8020128:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 802012a:	68bb      	ldr	r3, [r7, #8]
 802012c:	f240 22d9 	movw	r2, #729	; 0x2d9
 8020130:	4293      	cmp	r3, r2
 8020132:	d909      	bls.n	8020148 <tcp_recved+0x8c>
    tcp_ack_now(pcb);
 8020134:	687b      	ldr	r3, [r7, #4]
 8020136:	8b5b      	ldrh	r3, [r3, #26]
 8020138:	f043 0302 	orr.w	r3, r3, #2
 802013c:	b29a      	uxth	r2, r3
 802013e:	687b      	ldr	r3, [r7, #4]
 8020140:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8020142:	6878      	ldr	r0, [r7, #4]
 8020144:	f003 ffb8 	bl	80240b8 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8020148:	3710      	adds	r7, #16
 802014a:	46bd      	mov	sp, r7
 802014c:	bd80      	pop	{r7, pc}
 802014e:	bf00      	nop
 8020150:	080290d4 	.word	0x080290d4
 8020154:	08029370 	.word	0x08029370
 8020158:	08029118 	.word	0x08029118
 802015c:	08029388 	.word	0x08029388

08020160 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8020160:	b480      	push	{r7}
 8020162:	b083      	sub	sp, #12
 8020164:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8020166:	2300      	movs	r3, #0
 8020168:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 802016a:	4b1e      	ldr	r3, [pc, #120]	; (80201e4 <tcp_new_port+0x84>)
 802016c:	881b      	ldrh	r3, [r3, #0]
 802016e:	3301      	adds	r3, #1
 8020170:	b29a      	uxth	r2, r3
 8020172:	4b1c      	ldr	r3, [pc, #112]	; (80201e4 <tcp_new_port+0x84>)
 8020174:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8020176:	4b1b      	ldr	r3, [pc, #108]	; (80201e4 <tcp_new_port+0x84>)
 8020178:	881b      	ldrh	r3, [r3, #0]
 802017a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 802017e:	4293      	cmp	r3, r2
 8020180:	d103      	bne.n	802018a <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8020182:	4b18      	ldr	r3, [pc, #96]	; (80201e4 <tcp_new_port+0x84>)
 8020184:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8020188:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 802018a:	2300      	movs	r3, #0
 802018c:	71fb      	strb	r3, [r7, #7]
 802018e:	e01e      	b.n	80201ce <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8020190:	79fb      	ldrb	r3, [r7, #7]
 8020192:	4a15      	ldr	r2, [pc, #84]	; (80201e8 <tcp_new_port+0x88>)
 8020194:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8020198:	681b      	ldr	r3, [r3, #0]
 802019a:	603b      	str	r3, [r7, #0]
 802019c:	e011      	b.n	80201c2 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 802019e:	683b      	ldr	r3, [r7, #0]
 80201a0:	8ada      	ldrh	r2, [r3, #22]
 80201a2:	4b10      	ldr	r3, [pc, #64]	; (80201e4 <tcp_new_port+0x84>)
 80201a4:	881b      	ldrh	r3, [r3, #0]
 80201a6:	429a      	cmp	r2, r3
 80201a8:	d108      	bne.n	80201bc <tcp_new_port+0x5c>
        n++;
 80201aa:	88bb      	ldrh	r3, [r7, #4]
 80201ac:	3301      	adds	r3, #1
 80201ae:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 80201b0:	88bb      	ldrh	r3, [r7, #4]
 80201b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80201b6:	d3d8      	bcc.n	802016a <tcp_new_port+0xa>
          return 0;
 80201b8:	2300      	movs	r3, #0
 80201ba:	e00d      	b.n	80201d8 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80201bc:	683b      	ldr	r3, [r7, #0]
 80201be:	68db      	ldr	r3, [r3, #12]
 80201c0:	603b      	str	r3, [r7, #0]
 80201c2:	683b      	ldr	r3, [r7, #0]
 80201c4:	2b00      	cmp	r3, #0
 80201c6:	d1ea      	bne.n	802019e <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80201c8:	79fb      	ldrb	r3, [r7, #7]
 80201ca:	3301      	adds	r3, #1
 80201cc:	71fb      	strb	r3, [r7, #7]
 80201ce:	79fb      	ldrb	r3, [r7, #7]
 80201d0:	2b03      	cmp	r3, #3
 80201d2:	d9dd      	bls.n	8020190 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 80201d4:	4b03      	ldr	r3, [pc, #12]	; (80201e4 <tcp_new_port+0x84>)
 80201d6:	881b      	ldrh	r3, [r3, #0]
}
 80201d8:	4618      	mov	r0, r3
 80201da:	370c      	adds	r7, #12
 80201dc:	46bd      	mov	sp, r7
 80201de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80201e2:	4770      	bx	lr
 80201e4:	20000014 	.word	0x20000014
 80201e8:	0802b820 	.word	0x0802b820

080201ec <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80201ec:	b5b0      	push	{r4, r5, r7, lr}
 80201ee:	b090      	sub	sp, #64	; 0x40
 80201f0:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80201f2:	2300      	movs	r3, #0
 80201f4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 80201f8:	4b94      	ldr	r3, [pc, #592]	; (802044c <tcp_slowtmr+0x260>)
 80201fa:	681b      	ldr	r3, [r3, #0]
 80201fc:	3301      	adds	r3, #1
 80201fe:	4a93      	ldr	r2, [pc, #588]	; (802044c <tcp_slowtmr+0x260>)
 8020200:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8020202:	4b93      	ldr	r3, [pc, #588]	; (8020450 <tcp_slowtmr+0x264>)
 8020204:	781b      	ldrb	r3, [r3, #0]
 8020206:	3301      	adds	r3, #1
 8020208:	b2da      	uxtb	r2, r3
 802020a:	4b91      	ldr	r3, [pc, #580]	; (8020450 <tcp_slowtmr+0x264>)
 802020c:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 802020e:	2300      	movs	r3, #0
 8020210:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8020212:	4b90      	ldr	r3, [pc, #576]	; (8020454 <tcp_slowtmr+0x268>)
 8020214:	681b      	ldr	r3, [r3, #0]
 8020216:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8020218:	e290      	b.n	802073c <tcp_slowtmr+0x550>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 802021a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802021c:	7d1b      	ldrb	r3, [r3, #20]
 802021e:	2b00      	cmp	r3, #0
 8020220:	d106      	bne.n	8020230 <tcp_slowtmr+0x44>
 8020222:	4b8d      	ldr	r3, [pc, #564]	; (8020458 <tcp_slowtmr+0x26c>)
 8020224:	f240 42be 	movw	r2, #1214	; 0x4be
 8020228:	498c      	ldr	r1, [pc, #560]	; (802045c <tcp_slowtmr+0x270>)
 802022a:	488d      	ldr	r0, [pc, #564]	; (8020460 <tcp_slowtmr+0x274>)
 802022c:	f006 f880 	bl	8026330 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8020230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020232:	7d1b      	ldrb	r3, [r3, #20]
 8020234:	2b01      	cmp	r3, #1
 8020236:	d106      	bne.n	8020246 <tcp_slowtmr+0x5a>
 8020238:	4b87      	ldr	r3, [pc, #540]	; (8020458 <tcp_slowtmr+0x26c>)
 802023a:	f240 42bf 	movw	r2, #1215	; 0x4bf
 802023e:	4989      	ldr	r1, [pc, #548]	; (8020464 <tcp_slowtmr+0x278>)
 8020240:	4887      	ldr	r0, [pc, #540]	; (8020460 <tcp_slowtmr+0x274>)
 8020242:	f006 f875 	bl	8026330 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8020246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020248:	7d1b      	ldrb	r3, [r3, #20]
 802024a:	2b0a      	cmp	r3, #10
 802024c:	d106      	bne.n	802025c <tcp_slowtmr+0x70>
 802024e:	4b82      	ldr	r3, [pc, #520]	; (8020458 <tcp_slowtmr+0x26c>)
 8020250:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8020254:	4984      	ldr	r1, [pc, #528]	; (8020468 <tcp_slowtmr+0x27c>)
 8020256:	4882      	ldr	r0, [pc, #520]	; (8020460 <tcp_slowtmr+0x274>)
 8020258:	f006 f86a 	bl	8026330 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 802025c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802025e:	7f9a      	ldrb	r2, [r3, #30]
 8020260:	4b7b      	ldr	r3, [pc, #492]	; (8020450 <tcp_slowtmr+0x264>)
 8020262:	781b      	ldrb	r3, [r3, #0]
 8020264:	429a      	cmp	r2, r3
 8020266:	d105      	bne.n	8020274 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8020268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802026a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 802026c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802026e:	68db      	ldr	r3, [r3, #12]
 8020270:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8020272:	e263      	b.n	802073c <tcp_slowtmr+0x550>
    }
    pcb->last_timer = tcp_timer_ctr;
 8020274:	4b76      	ldr	r3, [pc, #472]	; (8020450 <tcp_slowtmr+0x264>)
 8020276:	781a      	ldrb	r2, [r3, #0]
 8020278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802027a:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 802027c:	2300      	movs	r3, #0
 802027e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8020282:	2300      	movs	r3, #0
 8020284:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8020288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802028a:	7d1b      	ldrb	r3, [r3, #20]
 802028c:	2b02      	cmp	r3, #2
 802028e:	d10a      	bne.n	80202a6 <tcp_slowtmr+0xba>
 8020290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020292:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8020296:	2b05      	cmp	r3, #5
 8020298:	d905      	bls.n	80202a6 <tcp_slowtmr+0xba>
      ++pcb_remove;
 802029a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802029e:	3301      	adds	r3, #1
 80202a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80202a4:	e11e      	b.n	80204e4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 80202a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80202a8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80202ac:	2b0b      	cmp	r3, #11
 80202ae:	d905      	bls.n	80202bc <tcp_slowtmr+0xd0>
      ++pcb_remove;
 80202b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80202b4:	3301      	adds	r3, #1
 80202b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80202ba:	e113      	b.n	80204e4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 80202bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80202be:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80202c2:	2b00      	cmp	r3, #0
 80202c4:	d075      	beq.n	80203b2 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 80202c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80202c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80202ca:	2b00      	cmp	r3, #0
 80202cc:	d006      	beq.n	80202dc <tcp_slowtmr+0xf0>
 80202ce:	4b62      	ldr	r3, [pc, #392]	; (8020458 <tcp_slowtmr+0x26c>)
 80202d0:	f240 42d4 	movw	r2, #1236	; 0x4d4
 80202d4:	4965      	ldr	r1, [pc, #404]	; (802046c <tcp_slowtmr+0x280>)
 80202d6:	4862      	ldr	r0, [pc, #392]	; (8020460 <tcp_slowtmr+0x274>)
 80202d8:	f006 f82a 	bl	8026330 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80202dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80202de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80202e0:	2b00      	cmp	r3, #0
 80202e2:	d106      	bne.n	80202f2 <tcp_slowtmr+0x106>
 80202e4:	4b5c      	ldr	r3, [pc, #368]	; (8020458 <tcp_slowtmr+0x26c>)
 80202e6:	f240 42d5 	movw	r2, #1237	; 0x4d5
 80202ea:	4961      	ldr	r1, [pc, #388]	; (8020470 <tcp_slowtmr+0x284>)
 80202ec:	485c      	ldr	r0, [pc, #368]	; (8020460 <tcp_slowtmr+0x274>)
 80202ee:	f006 f81f 	bl	8026330 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80202f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80202f4:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 80202f8:	2b0b      	cmp	r3, #11
 80202fa:	d905      	bls.n	8020308 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 80202fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8020300:	3301      	adds	r3, #1
 8020302:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8020306:	e0ed      	b.n	80204e4 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8020308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802030a:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 802030e:	3b01      	subs	r3, #1
 8020310:	4a58      	ldr	r2, [pc, #352]	; (8020474 <tcp_slowtmr+0x288>)
 8020312:	5cd3      	ldrb	r3, [r2, r3]
 8020314:	77fb      	strb	r3, [r7, #31]
          if (pcb->persist_cnt < backoff_cnt) {
 8020316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020318:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 802031c:	7ffa      	ldrb	r2, [r7, #31]
 802031e:	429a      	cmp	r2, r3
 8020320:	d907      	bls.n	8020332 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8020322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020324:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8020328:	3301      	adds	r3, #1
 802032a:	b2da      	uxtb	r2, r3
 802032c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802032e:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8020332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020334:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8020338:	7ffa      	ldrb	r2, [r7, #31]
 802033a:	429a      	cmp	r2, r3
 802033c:	f200 80d2 	bhi.w	80204e4 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8020340:	2301      	movs	r3, #1
 8020342:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8020344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020346:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 802034a:	2b00      	cmp	r3, #0
 802034c:	d108      	bne.n	8020360 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 802034e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8020350:	f004 fd74 	bl	8024e3c <tcp_zero_window_probe>
 8020354:	4603      	mov	r3, r0
 8020356:	2b00      	cmp	r3, #0
 8020358:	d014      	beq.n	8020384 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 802035a:	2300      	movs	r3, #0
 802035c:	623b      	str	r3, [r7, #32]
 802035e:	e011      	b.n	8020384 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8020360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020362:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8020366:	4619      	mov	r1, r3
 8020368:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 802036a:	f003 fc1b 	bl	8023ba4 <tcp_split_unsent_seg>
 802036e:	4603      	mov	r3, r0
 8020370:	2b00      	cmp	r3, #0
 8020372:	d107      	bne.n	8020384 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8020374:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8020376:	f003 fe9f 	bl	80240b8 <tcp_output>
 802037a:	4603      	mov	r3, r0
 802037c:	2b00      	cmp	r3, #0
 802037e:	d101      	bne.n	8020384 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8020380:	2300      	movs	r3, #0
 8020382:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8020384:	6a3b      	ldr	r3, [r7, #32]
 8020386:	2b00      	cmp	r3, #0
 8020388:	f000 80ac 	beq.w	80204e4 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 802038c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802038e:	2200      	movs	r2, #0
 8020390:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8020394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020396:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 802039a:	2b06      	cmp	r3, #6
 802039c:	f200 80a2 	bhi.w	80204e4 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 80203a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80203a2:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80203a6:	3301      	adds	r3, #1
 80203a8:	b2da      	uxtb	r2, r3
 80203aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80203ac:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
 80203b0:	e098      	b.n	80204e4 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80203b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80203b4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80203b8:	2b00      	cmp	r3, #0
 80203ba:	db0f      	blt.n	80203dc <tcp_slowtmr+0x1f0>
 80203bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80203be:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80203c2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80203c6:	4293      	cmp	r3, r2
 80203c8:	d008      	beq.n	80203dc <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 80203ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80203cc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80203d0:	b29b      	uxth	r3, r3
 80203d2:	3301      	adds	r3, #1
 80203d4:	b29b      	uxth	r3, r3
 80203d6:	b21a      	sxth	r2, r3
 80203d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80203da:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 80203dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80203de:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 80203e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80203e4:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80203e8:	429a      	cmp	r2, r3
 80203ea:	db7b      	blt.n	80204e4 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80203ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80203ee:	f004 f95d 	bl	80246ac <tcp_rexmit_rto_prepare>
 80203f2:	4603      	mov	r3, r0
 80203f4:	2b00      	cmp	r3, #0
 80203f6:	d007      	beq.n	8020408 <tcp_slowtmr+0x21c>
 80203f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80203fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80203fc:	2b00      	cmp	r3, #0
 80203fe:	d171      	bne.n	80204e4 <tcp_slowtmr+0x2f8>
 8020400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020402:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8020404:	2b00      	cmp	r3, #0
 8020406:	d06d      	beq.n	80204e4 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8020408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802040a:	7d1b      	ldrb	r3, [r3, #20]
 802040c:	2b02      	cmp	r3, #2
 802040e:	d03a      	beq.n	8020486 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8020410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020412:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8020416:	2b0c      	cmp	r3, #12
 8020418:	bf28      	it	cs
 802041a:	230c      	movcs	r3, #12
 802041c:	77bb      	strb	r3, [r7, #30]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 802041e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020420:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8020424:	10db      	asrs	r3, r3, #3
 8020426:	b21b      	sxth	r3, r3
 8020428:	461a      	mov	r2, r3
 802042a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802042c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8020430:	4413      	add	r3, r2
 8020432:	7fba      	ldrb	r2, [r7, #30]
 8020434:	4910      	ldr	r1, [pc, #64]	; (8020478 <tcp_slowtmr+0x28c>)
 8020436:	5c8a      	ldrb	r2, [r1, r2]
 8020438:	4093      	lsls	r3, r2
 802043a:	61bb      	str	r3, [r7, #24]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 802043c:	69bb      	ldr	r3, [r7, #24]
 802043e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8020442:	4293      	cmp	r3, r2
 8020444:	dc1a      	bgt.n	802047c <tcp_slowtmr+0x290>
 8020446:	69bb      	ldr	r3, [r7, #24]
 8020448:	b21a      	sxth	r2, r3
 802044a:	e019      	b.n	8020480 <tcp_slowtmr+0x294>
 802044c:	20022ab8 	.word	0x20022ab8
 8020450:	200196be 	.word	0x200196be
 8020454:	20022ab4 	.word	0x20022ab4
 8020458:	080290d4 	.word	0x080290d4
 802045c:	08029418 	.word	0x08029418
 8020460:	08029118 	.word	0x08029118
 8020464:	08029444 	.word	0x08029444
 8020468:	08029470 	.word	0x08029470
 802046c:	080294a0 	.word	0x080294a0
 8020470:	080294d4 	.word	0x080294d4
 8020474:	0802b818 	.word	0x0802b818
 8020478:	0802b808 	.word	0x0802b808
 802047c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8020480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020482:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8020486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020488:	2200      	movs	r2, #0
 802048a:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 802048c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802048e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8020492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020494:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8020498:	4293      	cmp	r3, r2
 802049a:	bf28      	it	cs
 802049c:	4613      	movcs	r3, r2
 802049e:	82fb      	strh	r3, [r7, #22]
            pcb->ssthresh = eff_wnd >> 1;
 80204a0:	8afb      	ldrh	r3, [r7, #22]
 80204a2:	085b      	lsrs	r3, r3, #1
 80204a4:	b29a      	uxth	r2, r3
 80204a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80204a8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80204ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80204ae:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80204b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80204b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80204b6:	005b      	lsls	r3, r3, #1
 80204b8:	b29b      	uxth	r3, r3
 80204ba:	429a      	cmp	r2, r3
 80204bc:	d206      	bcs.n	80204cc <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 80204be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80204c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80204c2:	005b      	lsls	r3, r3, #1
 80204c4:	b29a      	uxth	r2, r3
 80204c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80204c8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 80204cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80204ce:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 80204d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80204d2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 80204d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80204d8:	2200      	movs	r2, #0
 80204da:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 80204de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80204e0:	f004 f954 	bl	802478c <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 80204e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80204e6:	7d1b      	ldrb	r3, [r3, #20]
 80204e8:	2b06      	cmp	r3, #6
 80204ea:	d111      	bne.n	8020510 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 80204ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80204ee:	8b5b      	ldrh	r3, [r3, #26]
 80204f0:	f003 0310 	and.w	r3, r3, #16
 80204f4:	2b00      	cmp	r3, #0
 80204f6:	d00b      	beq.n	8020510 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80204f8:	4b95      	ldr	r3, [pc, #596]	; (8020750 <tcp_slowtmr+0x564>)
 80204fa:	681a      	ldr	r2, [r3, #0]
 80204fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80204fe:	6a1b      	ldr	r3, [r3, #32]
 8020500:	1ad3      	subs	r3, r2, r3
 8020502:	2b28      	cmp	r3, #40	; 0x28
 8020504:	d904      	bls.n	8020510 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8020506:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802050a:	3301      	adds	r3, #1
 802050c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8020510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020512:	7a5b      	ldrb	r3, [r3, #9]
 8020514:	f003 0308 	and.w	r3, r3, #8
 8020518:	2b00      	cmp	r3, #0
 802051a:	d053      	beq.n	80205c4 <tcp_slowtmr+0x3d8>
        ((pcb->state == ESTABLISHED) ||
 802051c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802051e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8020520:	2b04      	cmp	r3, #4
 8020522:	d003      	beq.n	802052c <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8020524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020526:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8020528:	2b07      	cmp	r3, #7
 802052a:	d14b      	bne.n	80205c4 <tcp_slowtmr+0x3d8>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 802052c:	4b88      	ldr	r3, [pc, #544]	; (8020750 <tcp_slowtmr+0x564>)
 802052e:	681a      	ldr	r2, [r3, #0]
 8020530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020532:	6a1b      	ldr	r3, [r3, #32]
 8020534:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8020536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020538:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 802053c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802053e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8020542:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8020544:	f8d0 0094 	ldr.w	r0, [r0, #148]	; 0x94
 8020548:	fb00 f303 	mul.w	r3, r0, r3
 802054c:	440b      	add	r3, r1
 802054e:	4981      	ldr	r1, [pc, #516]	; (8020754 <tcp_slowtmr+0x568>)
 8020550:	fba1 1303 	umull	r1, r3, r1, r3
 8020554:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8020556:	429a      	cmp	r2, r3
 8020558:	d90a      	bls.n	8020570 <tcp_slowtmr+0x384>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 802055a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802055e:	3301      	adds	r3, #1
 8020560:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8020564:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8020568:	3301      	adds	r3, #1
 802056a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 802056e:	e029      	b.n	80205c4 <tcp_slowtmr+0x3d8>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8020570:	4b77      	ldr	r3, [pc, #476]	; (8020750 <tcp_slowtmr+0x564>)
 8020572:	681a      	ldr	r2, [r3, #0]
 8020574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020576:	6a1b      	ldr	r3, [r3, #32]
 8020578:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 802057a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802057c:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8020580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020582:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
 8020586:	4618      	mov	r0, r3
 8020588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802058a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 802058e:	fb03 f300 	mul.w	r3, r3, r0
 8020592:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8020594:	496f      	ldr	r1, [pc, #444]	; (8020754 <tcp_slowtmr+0x568>)
 8020596:	fba1 1303 	umull	r1, r3, r1, r3
 802059a:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 802059c:	429a      	cmp	r2, r3
 802059e:	d911      	bls.n	80205c4 <tcp_slowtmr+0x3d8>
        err = tcp_keepalive(pcb);
 80205a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80205a2:	f004 fc0b 	bl	8024dbc <tcp_keepalive>
 80205a6:	4603      	mov	r3, r0
 80205a8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 80205ac:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80205b0:	2b00      	cmp	r3, #0
 80205b2:	d107      	bne.n	80205c4 <tcp_slowtmr+0x3d8>
          pcb->keep_cnt_sent++;
 80205b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80205b6:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
 80205ba:	3301      	adds	r3, #1
 80205bc:	b2da      	uxtb	r2, r3
 80205be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80205c0:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
      tcp_free_ooseq(pcb);
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 80205c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80205c6:	7d1b      	ldrb	r3, [r3, #20]
 80205c8:	2b03      	cmp	r3, #3
 80205ca:	d10b      	bne.n	80205e4 <tcp_slowtmr+0x3f8>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80205cc:	4b60      	ldr	r3, [pc, #384]	; (8020750 <tcp_slowtmr+0x564>)
 80205ce:	681a      	ldr	r2, [r3, #0]
 80205d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80205d2:	6a1b      	ldr	r3, [r3, #32]
 80205d4:	1ad3      	subs	r3, r2, r3
 80205d6:	2b28      	cmp	r3, #40	; 0x28
 80205d8:	d904      	bls.n	80205e4 <tcp_slowtmr+0x3f8>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 80205da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80205de:	3301      	adds	r3, #1
 80205e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 80205e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80205e6:	7d1b      	ldrb	r3, [r3, #20]
 80205e8:	2b09      	cmp	r3, #9
 80205ea:	d10b      	bne.n	8020604 <tcp_slowtmr+0x418>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80205ec:	4b58      	ldr	r3, [pc, #352]	; (8020750 <tcp_slowtmr+0x564>)
 80205ee:	681a      	ldr	r2, [r3, #0]
 80205f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80205f2:	6a1b      	ldr	r3, [r3, #32]
 80205f4:	1ad3      	subs	r3, r2, r3
 80205f6:	2bf0      	cmp	r3, #240	; 0xf0
 80205f8:	d904      	bls.n	8020604 <tcp_slowtmr+0x418>
        ++pcb_remove;
 80205fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80205fe:	3301      	adds	r3, #1
 8020600:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8020604:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8020608:	2b00      	cmp	r3, #0
 802060a:	d060      	beq.n	80206ce <tcp_slowtmr+0x4e2>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 802060c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802060e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8020612:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8020614:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8020616:	f000 fcbf 	bl	8020f98 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 802061a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802061c:	2b00      	cmp	r3, #0
 802061e:	d010      	beq.n	8020642 <tcp_slowtmr+0x456>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8020620:	4b4d      	ldr	r3, [pc, #308]	; (8020758 <tcp_slowtmr+0x56c>)
 8020622:	681b      	ldr	r3, [r3, #0]
 8020624:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8020626:	429a      	cmp	r2, r3
 8020628:	d106      	bne.n	8020638 <tcp_slowtmr+0x44c>
 802062a:	4b4c      	ldr	r3, [pc, #304]	; (802075c <tcp_slowtmr+0x570>)
 802062c:	f240 526d 	movw	r2, #1389	; 0x56d
 8020630:	494b      	ldr	r1, [pc, #300]	; (8020760 <tcp_slowtmr+0x574>)
 8020632:	484c      	ldr	r0, [pc, #304]	; (8020764 <tcp_slowtmr+0x578>)
 8020634:	f005 fe7c 	bl	8026330 <iprintf>
        prev->next = pcb->next;
 8020638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802063a:	68da      	ldr	r2, [r3, #12]
 802063c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802063e:	60da      	str	r2, [r3, #12]
 8020640:	e00f      	b.n	8020662 <tcp_slowtmr+0x476>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8020642:	4b45      	ldr	r3, [pc, #276]	; (8020758 <tcp_slowtmr+0x56c>)
 8020644:	681a      	ldr	r2, [r3, #0]
 8020646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020648:	429a      	cmp	r2, r3
 802064a:	d006      	beq.n	802065a <tcp_slowtmr+0x46e>
 802064c:	4b43      	ldr	r3, [pc, #268]	; (802075c <tcp_slowtmr+0x570>)
 802064e:	f240 5271 	movw	r2, #1393	; 0x571
 8020652:	4945      	ldr	r1, [pc, #276]	; (8020768 <tcp_slowtmr+0x57c>)
 8020654:	4843      	ldr	r0, [pc, #268]	; (8020764 <tcp_slowtmr+0x578>)
 8020656:	f005 fe6b 	bl	8026330 <iprintf>
        tcp_active_pcbs = pcb->next;
 802065a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802065c:	68db      	ldr	r3, [r3, #12]
 802065e:	4a3e      	ldr	r2, [pc, #248]	; (8020758 <tcp_slowtmr+0x56c>)
 8020660:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8020662:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8020666:	2b00      	cmp	r3, #0
 8020668:	d013      	beq.n	8020692 <tcp_slowtmr+0x4a6>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 802066a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802066c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 802066e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020670:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8020672:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8020674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020676:	3304      	adds	r3, #4
 8020678:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802067a:	8ad2      	ldrh	r2, [r2, #22]
 802067c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 802067e:	8b09      	ldrh	r1, [r1, #24]
 8020680:	9102      	str	r1, [sp, #8]
 8020682:	9201      	str	r2, [sp, #4]
 8020684:	9300      	str	r3, [sp, #0]
 8020686:	462b      	mov	r3, r5
 8020688:	4622      	mov	r2, r4
 802068a:	4601      	mov	r1, r0
 802068c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 802068e:	f004 fadf 	bl	8024c50 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8020692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020694:	691b      	ldr	r3, [r3, #16]
 8020696:	60fb      	str	r3, [r7, #12]
      last_state = pcb->state;
 8020698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802069a:	7d1b      	ldrb	r3, [r3, #20]
 802069c:	72fb      	strb	r3, [r7, #11]
      pcb2 = pcb;
 802069e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80206a0:	607b      	str	r3, [r7, #4]
      pcb = pcb->next;
 80206a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80206a4:	68db      	ldr	r3, [r3, #12]
 80206a6:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80206a8:	6878      	ldr	r0, [r7, #4]
 80206aa:	f7ff f853 	bl	801f754 <tcp_free>

      tcp_active_pcbs_changed = 0;
 80206ae:	4b2f      	ldr	r3, [pc, #188]	; (802076c <tcp_slowtmr+0x580>)
 80206b0:	2200      	movs	r2, #0
 80206b2:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80206b4:	693b      	ldr	r3, [r7, #16]
 80206b6:	2b00      	cmp	r3, #0
 80206b8:	d004      	beq.n	80206c4 <tcp_slowtmr+0x4d8>
 80206ba:	693b      	ldr	r3, [r7, #16]
 80206bc:	f06f 010c 	mvn.w	r1, #12
 80206c0:	68f8      	ldr	r0, [r7, #12]
 80206c2:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80206c4:	4b29      	ldr	r3, [pc, #164]	; (802076c <tcp_slowtmr+0x580>)
 80206c6:	781b      	ldrb	r3, [r3, #0]
 80206c8:	2b00      	cmp	r3, #0
 80206ca:	d037      	beq.n	802073c <tcp_slowtmr+0x550>
        goto tcp_slowtmr_start;
 80206cc:	e59f      	b.n	802020e <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 80206ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80206d0:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80206d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80206d4:	68db      	ldr	r3, [r3, #12]
 80206d6:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 80206d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80206da:	7f1b      	ldrb	r3, [r3, #28]
 80206dc:	3301      	adds	r3, #1
 80206de:	b2da      	uxtb	r2, r3
 80206e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80206e2:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80206e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80206e6:	7f1a      	ldrb	r2, [r3, #28]
 80206e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80206ea:	7f5b      	ldrb	r3, [r3, #29]
 80206ec:	429a      	cmp	r2, r3
 80206ee:	d325      	bcc.n	802073c <tcp_slowtmr+0x550>
        prev->polltmr = 0;
 80206f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80206f2:	2200      	movs	r2, #0
 80206f4:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 80206f6:	4b1d      	ldr	r3, [pc, #116]	; (802076c <tcp_slowtmr+0x580>)
 80206f8:	2200      	movs	r2, #0
 80206fa:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80206fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80206fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8020702:	2b00      	cmp	r3, #0
 8020704:	d00b      	beq.n	802071e <tcp_slowtmr+0x532>
 8020706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020708:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 802070c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802070e:	6912      	ldr	r2, [r2, #16]
 8020710:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8020712:	4610      	mov	r0, r2
 8020714:	4798      	blx	r3
 8020716:	4603      	mov	r3, r0
 8020718:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 802071c:	e002      	b.n	8020724 <tcp_slowtmr+0x538>
 802071e:	2300      	movs	r3, #0
 8020720:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8020724:	4b11      	ldr	r3, [pc, #68]	; (802076c <tcp_slowtmr+0x580>)
 8020726:	781b      	ldrb	r3, [r3, #0]
 8020728:	2b00      	cmp	r3, #0
 802072a:	d000      	beq.n	802072e <tcp_slowtmr+0x542>
          goto tcp_slowtmr_start;
 802072c:	e56f      	b.n	802020e <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 802072e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8020732:	2b00      	cmp	r3, #0
 8020734:	d102      	bne.n	802073c <tcp_slowtmr+0x550>
          tcp_output(prev);
 8020736:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8020738:	f003 fcbe 	bl	80240b8 <tcp_output>
  while (pcb != NULL) {
 802073c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802073e:	2b00      	cmp	r3, #0
 8020740:	f47f ad6b 	bne.w	802021a <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8020744:	2300      	movs	r3, #0
 8020746:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8020748:	4b09      	ldr	r3, [pc, #36]	; (8020770 <tcp_slowtmr+0x584>)
 802074a:	681b      	ldr	r3, [r3, #0]
 802074c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 802074e:	e064      	b.n	802081a <tcp_slowtmr+0x62e>
 8020750:	20022ab8 	.word	0x20022ab8
 8020754:	10624dd3 	.word	0x10624dd3
 8020758:	20022ab4 	.word	0x20022ab4
 802075c:	080290d4 	.word	0x080290d4
 8020760:	0802950c 	.word	0x0802950c
 8020764:	08029118 	.word	0x08029118
 8020768:	08029538 	.word	0x08029538
 802076c:	20022ab0 	.word	0x20022ab0
 8020770:	20022ac4 	.word	0x20022ac4
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8020774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020776:	7d1b      	ldrb	r3, [r3, #20]
 8020778:	2b0a      	cmp	r3, #10
 802077a:	d006      	beq.n	802078a <tcp_slowtmr+0x59e>
 802077c:	4b2a      	ldr	r3, [pc, #168]	; (8020828 <tcp_slowtmr+0x63c>)
 802077e:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8020782:	492a      	ldr	r1, [pc, #168]	; (802082c <tcp_slowtmr+0x640>)
 8020784:	482a      	ldr	r0, [pc, #168]	; (8020830 <tcp_slowtmr+0x644>)
 8020786:	f005 fdd3 	bl	8026330 <iprintf>
    pcb_remove = 0;
 802078a:	2300      	movs	r3, #0
 802078c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8020790:	4b28      	ldr	r3, [pc, #160]	; (8020834 <tcp_slowtmr+0x648>)
 8020792:	681a      	ldr	r2, [r3, #0]
 8020794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020796:	6a1b      	ldr	r3, [r3, #32]
 8020798:	1ad3      	subs	r3, r2, r3
 802079a:	2bf0      	cmp	r3, #240	; 0xf0
 802079c:	d904      	bls.n	80207a8 <tcp_slowtmr+0x5bc>
      ++pcb_remove;
 802079e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80207a2:	3301      	adds	r3, #1
 80207a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80207a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80207ac:	2b00      	cmp	r3, #0
 80207ae:	d02f      	beq.n	8020810 <tcp_slowtmr+0x624>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80207b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80207b2:	f000 fbf1 	bl	8020f98 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80207b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80207b8:	2b00      	cmp	r3, #0
 80207ba:	d010      	beq.n	80207de <tcp_slowtmr+0x5f2>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80207bc:	4b1e      	ldr	r3, [pc, #120]	; (8020838 <tcp_slowtmr+0x64c>)
 80207be:	681b      	ldr	r3, [r3, #0]
 80207c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80207c2:	429a      	cmp	r2, r3
 80207c4:	d106      	bne.n	80207d4 <tcp_slowtmr+0x5e8>
 80207c6:	4b18      	ldr	r3, [pc, #96]	; (8020828 <tcp_slowtmr+0x63c>)
 80207c8:	f240 52af 	movw	r2, #1455	; 0x5af
 80207cc:	491b      	ldr	r1, [pc, #108]	; (802083c <tcp_slowtmr+0x650>)
 80207ce:	4818      	ldr	r0, [pc, #96]	; (8020830 <tcp_slowtmr+0x644>)
 80207d0:	f005 fdae 	bl	8026330 <iprintf>
        prev->next = pcb->next;
 80207d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80207d6:	68da      	ldr	r2, [r3, #12]
 80207d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80207da:	60da      	str	r2, [r3, #12]
 80207dc:	e00f      	b.n	80207fe <tcp_slowtmr+0x612>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80207de:	4b16      	ldr	r3, [pc, #88]	; (8020838 <tcp_slowtmr+0x64c>)
 80207e0:	681a      	ldr	r2, [r3, #0]
 80207e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80207e4:	429a      	cmp	r2, r3
 80207e6:	d006      	beq.n	80207f6 <tcp_slowtmr+0x60a>
 80207e8:	4b0f      	ldr	r3, [pc, #60]	; (8020828 <tcp_slowtmr+0x63c>)
 80207ea:	f240 52b3 	movw	r2, #1459	; 0x5b3
 80207ee:	4914      	ldr	r1, [pc, #80]	; (8020840 <tcp_slowtmr+0x654>)
 80207f0:	480f      	ldr	r0, [pc, #60]	; (8020830 <tcp_slowtmr+0x644>)
 80207f2:	f005 fd9d 	bl	8026330 <iprintf>
        tcp_tw_pcbs = pcb->next;
 80207f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80207f8:	68db      	ldr	r3, [r3, #12]
 80207fa:	4a0f      	ldr	r2, [pc, #60]	; (8020838 <tcp_slowtmr+0x64c>)
 80207fc:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80207fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020800:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8020802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020804:	68db      	ldr	r3, [r3, #12]
 8020806:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8020808:	6838      	ldr	r0, [r7, #0]
 802080a:	f7fe ffa3 	bl	801f754 <tcp_free>
 802080e:	e004      	b.n	802081a <tcp_slowtmr+0x62e>
    } else {
      prev = pcb;
 8020810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020812:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8020814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020816:	68db      	ldr	r3, [r3, #12]
 8020818:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 802081a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802081c:	2b00      	cmp	r3, #0
 802081e:	d1a9      	bne.n	8020774 <tcp_slowtmr+0x588>
    }
  }
}
 8020820:	bf00      	nop
 8020822:	3730      	adds	r7, #48	; 0x30
 8020824:	46bd      	mov	sp, r7
 8020826:	bdb0      	pop	{r4, r5, r7, pc}
 8020828:	080290d4 	.word	0x080290d4
 802082c:	08029564 	.word	0x08029564
 8020830:	08029118 	.word	0x08029118
 8020834:	20022ab8 	.word	0x20022ab8
 8020838:	20022ac4 	.word	0x20022ac4
 802083c:	08029594 	.word	0x08029594
 8020840:	080295bc 	.word	0x080295bc

08020844 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8020844:	b580      	push	{r7, lr}
 8020846:	b082      	sub	sp, #8
 8020848:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 802084a:	4b2d      	ldr	r3, [pc, #180]	; (8020900 <tcp_fasttmr+0xbc>)
 802084c:	781b      	ldrb	r3, [r3, #0]
 802084e:	3301      	adds	r3, #1
 8020850:	b2da      	uxtb	r2, r3
 8020852:	4b2b      	ldr	r3, [pc, #172]	; (8020900 <tcp_fasttmr+0xbc>)
 8020854:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8020856:	4b2b      	ldr	r3, [pc, #172]	; (8020904 <tcp_fasttmr+0xc0>)
 8020858:	681b      	ldr	r3, [r3, #0]
 802085a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 802085c:	e048      	b.n	80208f0 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 802085e:	687b      	ldr	r3, [r7, #4]
 8020860:	7f9a      	ldrb	r2, [r3, #30]
 8020862:	4b27      	ldr	r3, [pc, #156]	; (8020900 <tcp_fasttmr+0xbc>)
 8020864:	781b      	ldrb	r3, [r3, #0]
 8020866:	429a      	cmp	r2, r3
 8020868:	d03f      	beq.n	80208ea <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 802086a:	4b25      	ldr	r3, [pc, #148]	; (8020900 <tcp_fasttmr+0xbc>)
 802086c:	781a      	ldrb	r2, [r3, #0]
 802086e:	687b      	ldr	r3, [r7, #4]
 8020870:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8020872:	687b      	ldr	r3, [r7, #4]
 8020874:	8b5b      	ldrh	r3, [r3, #26]
 8020876:	f003 0301 	and.w	r3, r3, #1
 802087a:	2b00      	cmp	r3, #0
 802087c:	d010      	beq.n	80208a0 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 802087e:	687b      	ldr	r3, [r7, #4]
 8020880:	8b5b      	ldrh	r3, [r3, #26]
 8020882:	f043 0302 	orr.w	r3, r3, #2
 8020886:	b29a      	uxth	r2, r3
 8020888:	687b      	ldr	r3, [r7, #4]
 802088a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 802088c:	6878      	ldr	r0, [r7, #4]
 802088e:	f003 fc13 	bl	80240b8 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8020892:	687b      	ldr	r3, [r7, #4]
 8020894:	8b5b      	ldrh	r3, [r3, #26]
 8020896:	f023 0303 	bic.w	r3, r3, #3
 802089a:	b29a      	uxth	r2, r3
 802089c:	687b      	ldr	r3, [r7, #4]
 802089e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80208a0:	687b      	ldr	r3, [r7, #4]
 80208a2:	8b5b      	ldrh	r3, [r3, #26]
 80208a4:	f003 0308 	and.w	r3, r3, #8
 80208a8:	2b00      	cmp	r3, #0
 80208aa:	d009      	beq.n	80208c0 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80208ac:	687b      	ldr	r3, [r7, #4]
 80208ae:	8b5b      	ldrh	r3, [r3, #26]
 80208b0:	f023 0308 	bic.w	r3, r3, #8
 80208b4:	b29a      	uxth	r2, r3
 80208b6:	687b      	ldr	r3, [r7, #4]
 80208b8:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80208ba:	6878      	ldr	r0, [r7, #4]
 80208bc:	f7ff f8dc 	bl	801fa78 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80208c0:	687b      	ldr	r3, [r7, #4]
 80208c2:	68db      	ldr	r3, [r3, #12]
 80208c4:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80208c6:	687b      	ldr	r3, [r7, #4]
 80208c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80208ca:	2b00      	cmp	r3, #0
 80208cc:	d00a      	beq.n	80208e4 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80208ce:	4b0e      	ldr	r3, [pc, #56]	; (8020908 <tcp_fasttmr+0xc4>)
 80208d0:	2200      	movs	r2, #0
 80208d2:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80208d4:	6878      	ldr	r0, [r7, #4]
 80208d6:	f000 f819 	bl	802090c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80208da:	4b0b      	ldr	r3, [pc, #44]	; (8020908 <tcp_fasttmr+0xc4>)
 80208dc:	781b      	ldrb	r3, [r3, #0]
 80208de:	2b00      	cmp	r3, #0
 80208e0:	d000      	beq.n	80208e4 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80208e2:	e7b8      	b.n	8020856 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80208e4:	683b      	ldr	r3, [r7, #0]
 80208e6:	607b      	str	r3, [r7, #4]
 80208e8:	e002      	b.n	80208f0 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80208ea:	687b      	ldr	r3, [r7, #4]
 80208ec:	68db      	ldr	r3, [r3, #12]
 80208ee:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80208f0:	687b      	ldr	r3, [r7, #4]
 80208f2:	2b00      	cmp	r3, #0
 80208f4:	d1b3      	bne.n	802085e <tcp_fasttmr+0x1a>
    }
  }
}
 80208f6:	bf00      	nop
 80208f8:	3708      	adds	r7, #8
 80208fa:	46bd      	mov	sp, r7
 80208fc:	bd80      	pop	{r7, pc}
 80208fe:	bf00      	nop
 8020900:	200196be 	.word	0x200196be
 8020904:	20022ab4 	.word	0x20022ab4
 8020908:	20022ab0 	.word	0x20022ab0

0802090c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 802090c:	b590      	push	{r4, r7, lr}
 802090e:	b085      	sub	sp, #20
 8020910:	af00      	add	r7, sp, #0
 8020912:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8020914:	687b      	ldr	r3, [r7, #4]
 8020916:	2b00      	cmp	r3, #0
 8020918:	d109      	bne.n	802092e <tcp_process_refused_data+0x22>
 802091a:	4b38      	ldr	r3, [pc, #224]	; (80209fc <tcp_process_refused_data+0xf0>)
 802091c:	f240 6209 	movw	r2, #1545	; 0x609
 8020920:	4937      	ldr	r1, [pc, #220]	; (8020a00 <tcp_process_refused_data+0xf4>)
 8020922:	4838      	ldr	r0, [pc, #224]	; (8020a04 <tcp_process_refused_data+0xf8>)
 8020924:	f005 fd04 	bl	8026330 <iprintf>
 8020928:	f06f 030f 	mvn.w	r3, #15
 802092c:	e061      	b.n	80209f2 <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 802092e:	687b      	ldr	r3, [r7, #4]
 8020930:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8020932:	7b5b      	ldrb	r3, [r3, #13]
 8020934:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8020936:	687b      	ldr	r3, [r7, #4]
 8020938:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 802093a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 802093c:	687b      	ldr	r3, [r7, #4]
 802093e:	2200      	movs	r2, #0
 8020940:	675a      	str	r2, [r3, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8020942:	687b      	ldr	r3, [r7, #4]
 8020944:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8020948:	2b00      	cmp	r3, #0
 802094a:	d00b      	beq.n	8020964 <tcp_process_refused_data+0x58>
 802094c:	687b      	ldr	r3, [r7, #4]
 802094e:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8020952:	687b      	ldr	r3, [r7, #4]
 8020954:	6918      	ldr	r0, [r3, #16]
 8020956:	2300      	movs	r3, #0
 8020958:	68ba      	ldr	r2, [r7, #8]
 802095a:	6879      	ldr	r1, [r7, #4]
 802095c:	47a0      	blx	r4
 802095e:	4603      	mov	r3, r0
 8020960:	73fb      	strb	r3, [r7, #15]
 8020962:	e007      	b.n	8020974 <tcp_process_refused_data+0x68>
 8020964:	2300      	movs	r3, #0
 8020966:	68ba      	ldr	r2, [r7, #8]
 8020968:	6879      	ldr	r1, [r7, #4]
 802096a:	2000      	movs	r0, #0
 802096c:	f000 f896 	bl	8020a9c <tcp_recv_null>
 8020970:	4603      	mov	r3, r0
 8020972:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8020974:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8020978:	2b00      	cmp	r3, #0
 802097a:	d12b      	bne.n	80209d4 <tcp_process_refused_data+0xc8>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 802097c:	7bbb      	ldrb	r3, [r7, #14]
 802097e:	f003 0320 	and.w	r3, r3, #32
 8020982:	2b00      	cmp	r3, #0
 8020984:	d034      	beq.n	80209f0 <tcp_process_refused_data+0xe4>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8020986:	687b      	ldr	r3, [r7, #4]
 8020988:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802098a:	f640 3268 	movw	r2, #2920	; 0xb68
 802098e:	4293      	cmp	r3, r2
 8020990:	d005      	beq.n	802099e <tcp_process_refused_data+0x92>
          pcb->rcv_wnd++;
 8020992:	687b      	ldr	r3, [r7, #4]
 8020994:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8020996:	3301      	adds	r3, #1
 8020998:	b29a      	uxth	r2, r3
 802099a:	687b      	ldr	r3, [r7, #4]
 802099c:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 802099e:	687b      	ldr	r3, [r7, #4]
 80209a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80209a4:	2b00      	cmp	r3, #0
 80209a6:	d00b      	beq.n	80209c0 <tcp_process_refused_data+0xb4>
 80209a8:	687b      	ldr	r3, [r7, #4]
 80209aa:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 80209ae:	687b      	ldr	r3, [r7, #4]
 80209b0:	6918      	ldr	r0, [r3, #16]
 80209b2:	2300      	movs	r3, #0
 80209b4:	2200      	movs	r2, #0
 80209b6:	6879      	ldr	r1, [r7, #4]
 80209b8:	47a0      	blx	r4
 80209ba:	4603      	mov	r3, r0
 80209bc:	73fb      	strb	r3, [r7, #15]
 80209be:	e001      	b.n	80209c4 <tcp_process_refused_data+0xb8>
 80209c0:	2300      	movs	r3, #0
 80209c2:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80209c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80209c8:	f113 0f0d 	cmn.w	r3, #13
 80209cc:	d110      	bne.n	80209f0 <tcp_process_refused_data+0xe4>
          return ERR_ABRT;
 80209ce:	f06f 030c 	mvn.w	r3, #12
 80209d2:	e00e      	b.n	80209f2 <tcp_process_refused_data+0xe6>
        }
      }
    } else if (err == ERR_ABRT) {
 80209d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80209d8:	f113 0f0d 	cmn.w	r3, #13
 80209dc:	d102      	bne.n	80209e4 <tcp_process_refused_data+0xd8>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80209de:	f06f 030c 	mvn.w	r3, #12
 80209e2:	e006      	b.n	80209f2 <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80209e4:	687b      	ldr	r3, [r7, #4]
 80209e6:	68ba      	ldr	r2, [r7, #8]
 80209e8:	675a      	str	r2, [r3, #116]	; 0x74
      return ERR_INPROGRESS;
 80209ea:	f06f 0304 	mvn.w	r3, #4
 80209ee:	e000      	b.n	80209f2 <tcp_process_refused_data+0xe6>
    }
  }
  return ERR_OK;
 80209f0:	2300      	movs	r3, #0
}
 80209f2:	4618      	mov	r0, r3
 80209f4:	3714      	adds	r7, #20
 80209f6:	46bd      	mov	sp, r7
 80209f8:	bd90      	pop	{r4, r7, pc}
 80209fa:	bf00      	nop
 80209fc:	080290d4 	.word	0x080290d4
 8020a00:	080295e4 	.word	0x080295e4
 8020a04:	08029118 	.word	0x08029118

08020a08 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8020a08:	b580      	push	{r7, lr}
 8020a0a:	b084      	sub	sp, #16
 8020a0c:	af00      	add	r7, sp, #0
 8020a0e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8020a10:	e007      	b.n	8020a22 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8020a12:	687b      	ldr	r3, [r7, #4]
 8020a14:	681b      	ldr	r3, [r3, #0]
 8020a16:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8020a18:	6878      	ldr	r0, [r7, #4]
 8020a1a:	f000 f809 	bl	8020a30 <tcp_seg_free>
    seg = next;
 8020a1e:	68fb      	ldr	r3, [r7, #12]
 8020a20:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8020a22:	687b      	ldr	r3, [r7, #4]
 8020a24:	2b00      	cmp	r3, #0
 8020a26:	d1f4      	bne.n	8020a12 <tcp_segs_free+0xa>
  }
}
 8020a28:	bf00      	nop
 8020a2a:	3710      	adds	r7, #16
 8020a2c:	46bd      	mov	sp, r7
 8020a2e:	bd80      	pop	{r7, pc}

08020a30 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8020a30:	b580      	push	{r7, lr}
 8020a32:	b082      	sub	sp, #8
 8020a34:	af00      	add	r7, sp, #0
 8020a36:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8020a38:	687b      	ldr	r3, [r7, #4]
 8020a3a:	2b00      	cmp	r3, #0
 8020a3c:	d00c      	beq.n	8020a58 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8020a3e:	687b      	ldr	r3, [r7, #4]
 8020a40:	685b      	ldr	r3, [r3, #4]
 8020a42:	2b00      	cmp	r3, #0
 8020a44:	d004      	beq.n	8020a50 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8020a46:	687b      	ldr	r3, [r7, #4]
 8020a48:	685b      	ldr	r3, [r3, #4]
 8020a4a:	4618      	mov	r0, r3
 8020a4c:	f7fe fa6c 	bl	801ef28 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8020a50:	6879      	ldr	r1, [r7, #4]
 8020a52:	2003      	movs	r0, #3
 8020a54:	f7fd fcc0 	bl	801e3d8 <memp_free>
  }
}
 8020a58:	bf00      	nop
 8020a5a:	3708      	adds	r7, #8
 8020a5c:	46bd      	mov	sp, r7
 8020a5e:	bd80      	pop	{r7, pc}

08020a60 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 8020a60:	b580      	push	{r7, lr}
 8020a62:	b082      	sub	sp, #8
 8020a64:	af00      	add	r7, sp, #0
 8020a66:	6078      	str	r0, [r7, #4]
 8020a68:	460b      	mov	r3, r1
 8020a6a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 8020a6c:	687b      	ldr	r3, [r7, #4]
 8020a6e:	2b00      	cmp	r3, #0
 8020a70:	d107      	bne.n	8020a82 <tcp_setprio+0x22>
 8020a72:	4b07      	ldr	r3, [pc, #28]	; (8020a90 <tcp_setprio+0x30>)
 8020a74:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 8020a78:	4906      	ldr	r1, [pc, #24]	; (8020a94 <tcp_setprio+0x34>)
 8020a7a:	4807      	ldr	r0, [pc, #28]	; (8020a98 <tcp_setprio+0x38>)
 8020a7c:	f005 fc58 	bl	8026330 <iprintf>
 8020a80:	e002      	b.n	8020a88 <tcp_setprio+0x28>

  pcb->prio = prio;
 8020a82:	687b      	ldr	r3, [r7, #4]
 8020a84:	78fa      	ldrb	r2, [r7, #3]
 8020a86:	755a      	strb	r2, [r3, #21]
}
 8020a88:	3708      	adds	r7, #8
 8020a8a:	46bd      	mov	sp, r7
 8020a8c:	bd80      	pop	{r7, pc}
 8020a8e:	bf00      	nop
 8020a90:	080290d4 	.word	0x080290d4
 8020a94:	0802960c 	.word	0x0802960c
 8020a98:	08029118 	.word	0x08029118

08020a9c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8020a9c:	b580      	push	{r7, lr}
 8020a9e:	b084      	sub	sp, #16
 8020aa0:	af00      	add	r7, sp, #0
 8020aa2:	60f8      	str	r0, [r7, #12]
 8020aa4:	60b9      	str	r1, [r7, #8]
 8020aa6:	607a      	str	r2, [r7, #4]
 8020aa8:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8020aaa:	68bb      	ldr	r3, [r7, #8]
 8020aac:	2b00      	cmp	r3, #0
 8020aae:	d109      	bne.n	8020ac4 <tcp_recv_null+0x28>
 8020ab0:	4b12      	ldr	r3, [pc, #72]	; (8020afc <tcp_recv_null+0x60>)
 8020ab2:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8020ab6:	4912      	ldr	r1, [pc, #72]	; (8020b00 <tcp_recv_null+0x64>)
 8020ab8:	4812      	ldr	r0, [pc, #72]	; (8020b04 <tcp_recv_null+0x68>)
 8020aba:	f005 fc39 	bl	8026330 <iprintf>
 8020abe:	f06f 030f 	mvn.w	r3, #15
 8020ac2:	e016      	b.n	8020af2 <tcp_recv_null+0x56>

  if (p != NULL) {
 8020ac4:	687b      	ldr	r3, [r7, #4]
 8020ac6:	2b00      	cmp	r3, #0
 8020ac8:	d009      	beq.n	8020ade <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8020aca:	687b      	ldr	r3, [r7, #4]
 8020acc:	891b      	ldrh	r3, [r3, #8]
 8020ace:	4619      	mov	r1, r3
 8020ad0:	68b8      	ldr	r0, [r7, #8]
 8020ad2:	f7ff faf3 	bl	80200bc <tcp_recved>
    pbuf_free(p);
 8020ad6:	6878      	ldr	r0, [r7, #4]
 8020ad8:	f7fe fa26 	bl	801ef28 <pbuf_free>
 8020adc:	e008      	b.n	8020af0 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8020ade:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8020ae2:	2b00      	cmp	r3, #0
 8020ae4:	d104      	bne.n	8020af0 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8020ae6:	68b8      	ldr	r0, [r7, #8]
 8020ae8:	f7ff f82c 	bl	801fb44 <tcp_close>
 8020aec:	4603      	mov	r3, r0
 8020aee:	e000      	b.n	8020af2 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8020af0:	2300      	movs	r3, #0
}
 8020af2:	4618      	mov	r0, r3
 8020af4:	3710      	adds	r7, #16
 8020af6:	46bd      	mov	sp, r7
 8020af8:	bd80      	pop	{r7, pc}
 8020afa:	bf00      	nop
 8020afc:	080290d4 	.word	0x080290d4
 8020b00:	08029628 	.word	0x08029628
 8020b04:	08029118 	.word	0x08029118

08020b08 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8020b08:	b580      	push	{r7, lr}
 8020b0a:	b086      	sub	sp, #24
 8020b0c:	af00      	add	r7, sp, #0
 8020b0e:	4603      	mov	r3, r0
 8020b10:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8020b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8020b16:	2b00      	cmp	r3, #0
 8020b18:	db01      	blt.n	8020b1e <tcp_kill_prio+0x16>
 8020b1a:	79fb      	ldrb	r3, [r7, #7]
 8020b1c:	e000      	b.n	8020b20 <tcp_kill_prio+0x18>
 8020b1e:	237f      	movs	r3, #127	; 0x7f
 8020b20:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8020b22:	7afb      	ldrb	r3, [r7, #11]
 8020b24:	2b00      	cmp	r3, #0
 8020b26:	d034      	beq.n	8020b92 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8020b28:	7afb      	ldrb	r3, [r7, #11]
 8020b2a:	3b01      	subs	r3, #1
 8020b2c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8020b2e:	2300      	movs	r3, #0
 8020b30:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8020b32:	2300      	movs	r3, #0
 8020b34:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8020b36:	4b19      	ldr	r3, [pc, #100]	; (8020b9c <tcp_kill_prio+0x94>)
 8020b38:	681b      	ldr	r3, [r3, #0]
 8020b3a:	617b      	str	r3, [r7, #20]
 8020b3c:	e01f      	b.n	8020b7e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8020b3e:	697b      	ldr	r3, [r7, #20]
 8020b40:	7d5b      	ldrb	r3, [r3, #21]
 8020b42:	7afa      	ldrb	r2, [r7, #11]
 8020b44:	429a      	cmp	r2, r3
 8020b46:	d80c      	bhi.n	8020b62 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8020b48:	697b      	ldr	r3, [r7, #20]
 8020b4a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8020b4c:	7afa      	ldrb	r2, [r7, #11]
 8020b4e:	429a      	cmp	r2, r3
 8020b50:	d112      	bne.n	8020b78 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8020b52:	4b13      	ldr	r3, [pc, #76]	; (8020ba0 <tcp_kill_prio+0x98>)
 8020b54:	681a      	ldr	r2, [r3, #0]
 8020b56:	697b      	ldr	r3, [r7, #20]
 8020b58:	6a1b      	ldr	r3, [r3, #32]
 8020b5a:	1ad2      	subs	r2, r2, r3
 8020b5c:	68fb      	ldr	r3, [r7, #12]
 8020b5e:	429a      	cmp	r2, r3
 8020b60:	d30a      	bcc.n	8020b78 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8020b62:	4b0f      	ldr	r3, [pc, #60]	; (8020ba0 <tcp_kill_prio+0x98>)
 8020b64:	681a      	ldr	r2, [r3, #0]
 8020b66:	697b      	ldr	r3, [r7, #20]
 8020b68:	6a1b      	ldr	r3, [r3, #32]
 8020b6a:	1ad3      	subs	r3, r2, r3
 8020b6c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8020b6e:	697b      	ldr	r3, [r7, #20]
 8020b70:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8020b72:	697b      	ldr	r3, [r7, #20]
 8020b74:	7d5b      	ldrb	r3, [r3, #21]
 8020b76:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8020b78:	697b      	ldr	r3, [r7, #20]
 8020b7a:	68db      	ldr	r3, [r3, #12]
 8020b7c:	617b      	str	r3, [r7, #20]
 8020b7e:	697b      	ldr	r3, [r7, #20]
 8020b80:	2b00      	cmp	r3, #0
 8020b82:	d1dc      	bne.n	8020b3e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8020b84:	693b      	ldr	r3, [r7, #16]
 8020b86:	2b00      	cmp	r3, #0
 8020b88:	d004      	beq.n	8020b94 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8020b8a:	6938      	ldr	r0, [r7, #16]
 8020b8c:	f7ff f8ba 	bl	801fd04 <tcp_abort>
 8020b90:	e000      	b.n	8020b94 <tcp_kill_prio+0x8c>
    return;
 8020b92:	bf00      	nop
  }
}
 8020b94:	3718      	adds	r7, #24
 8020b96:	46bd      	mov	sp, r7
 8020b98:	bd80      	pop	{r7, pc}
 8020b9a:	bf00      	nop
 8020b9c:	20022ab4 	.word	0x20022ab4
 8020ba0:	20022ab8 	.word	0x20022ab8

08020ba4 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8020ba4:	b580      	push	{r7, lr}
 8020ba6:	b086      	sub	sp, #24
 8020ba8:	af00      	add	r7, sp, #0
 8020baa:	4603      	mov	r3, r0
 8020bac:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8020bae:	79fb      	ldrb	r3, [r7, #7]
 8020bb0:	2b08      	cmp	r3, #8
 8020bb2:	d009      	beq.n	8020bc8 <tcp_kill_state+0x24>
 8020bb4:	79fb      	ldrb	r3, [r7, #7]
 8020bb6:	2b09      	cmp	r3, #9
 8020bb8:	d006      	beq.n	8020bc8 <tcp_kill_state+0x24>
 8020bba:	4b1a      	ldr	r3, [pc, #104]	; (8020c24 <tcp_kill_state+0x80>)
 8020bbc:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8020bc0:	4919      	ldr	r1, [pc, #100]	; (8020c28 <tcp_kill_state+0x84>)
 8020bc2:	481a      	ldr	r0, [pc, #104]	; (8020c2c <tcp_kill_state+0x88>)
 8020bc4:	f005 fbb4 	bl	8026330 <iprintf>

  inactivity = 0;
 8020bc8:	2300      	movs	r3, #0
 8020bca:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8020bcc:	2300      	movs	r3, #0
 8020bce:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8020bd0:	4b17      	ldr	r3, [pc, #92]	; (8020c30 <tcp_kill_state+0x8c>)
 8020bd2:	681b      	ldr	r3, [r3, #0]
 8020bd4:	617b      	str	r3, [r7, #20]
 8020bd6:	e017      	b.n	8020c08 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8020bd8:	697b      	ldr	r3, [r7, #20]
 8020bda:	7d1b      	ldrb	r3, [r3, #20]
 8020bdc:	79fa      	ldrb	r2, [r7, #7]
 8020bde:	429a      	cmp	r2, r3
 8020be0:	d10f      	bne.n	8020c02 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8020be2:	4b14      	ldr	r3, [pc, #80]	; (8020c34 <tcp_kill_state+0x90>)
 8020be4:	681a      	ldr	r2, [r3, #0]
 8020be6:	697b      	ldr	r3, [r7, #20]
 8020be8:	6a1b      	ldr	r3, [r3, #32]
 8020bea:	1ad2      	subs	r2, r2, r3
 8020bec:	68fb      	ldr	r3, [r7, #12]
 8020bee:	429a      	cmp	r2, r3
 8020bf0:	d307      	bcc.n	8020c02 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8020bf2:	4b10      	ldr	r3, [pc, #64]	; (8020c34 <tcp_kill_state+0x90>)
 8020bf4:	681a      	ldr	r2, [r3, #0]
 8020bf6:	697b      	ldr	r3, [r7, #20]
 8020bf8:	6a1b      	ldr	r3, [r3, #32]
 8020bfa:	1ad3      	subs	r3, r2, r3
 8020bfc:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8020bfe:	697b      	ldr	r3, [r7, #20]
 8020c00:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8020c02:	697b      	ldr	r3, [r7, #20]
 8020c04:	68db      	ldr	r3, [r3, #12]
 8020c06:	617b      	str	r3, [r7, #20]
 8020c08:	697b      	ldr	r3, [r7, #20]
 8020c0a:	2b00      	cmp	r3, #0
 8020c0c:	d1e4      	bne.n	8020bd8 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8020c0e:	693b      	ldr	r3, [r7, #16]
 8020c10:	2b00      	cmp	r3, #0
 8020c12:	d003      	beq.n	8020c1c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8020c14:	2100      	movs	r1, #0
 8020c16:	6938      	ldr	r0, [r7, #16]
 8020c18:	f7fe ffc0 	bl	801fb9c <tcp_abandon>
  }
}
 8020c1c:	bf00      	nop
 8020c1e:	3718      	adds	r7, #24
 8020c20:	46bd      	mov	sp, r7
 8020c22:	bd80      	pop	{r7, pc}
 8020c24:	080290d4 	.word	0x080290d4
 8020c28:	08029644 	.word	0x08029644
 8020c2c:	08029118 	.word	0x08029118
 8020c30:	20022ab4 	.word	0x20022ab4
 8020c34:	20022ab8 	.word	0x20022ab8

08020c38 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8020c38:	b580      	push	{r7, lr}
 8020c3a:	b084      	sub	sp, #16
 8020c3c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8020c3e:	2300      	movs	r3, #0
 8020c40:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8020c42:	2300      	movs	r3, #0
 8020c44:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8020c46:	4b12      	ldr	r3, [pc, #72]	; (8020c90 <tcp_kill_timewait+0x58>)
 8020c48:	681b      	ldr	r3, [r3, #0]
 8020c4a:	60fb      	str	r3, [r7, #12]
 8020c4c:	e012      	b.n	8020c74 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8020c4e:	4b11      	ldr	r3, [pc, #68]	; (8020c94 <tcp_kill_timewait+0x5c>)
 8020c50:	681a      	ldr	r2, [r3, #0]
 8020c52:	68fb      	ldr	r3, [r7, #12]
 8020c54:	6a1b      	ldr	r3, [r3, #32]
 8020c56:	1ad2      	subs	r2, r2, r3
 8020c58:	687b      	ldr	r3, [r7, #4]
 8020c5a:	429a      	cmp	r2, r3
 8020c5c:	d307      	bcc.n	8020c6e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8020c5e:	4b0d      	ldr	r3, [pc, #52]	; (8020c94 <tcp_kill_timewait+0x5c>)
 8020c60:	681a      	ldr	r2, [r3, #0]
 8020c62:	68fb      	ldr	r3, [r7, #12]
 8020c64:	6a1b      	ldr	r3, [r3, #32]
 8020c66:	1ad3      	subs	r3, r2, r3
 8020c68:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8020c6a:	68fb      	ldr	r3, [r7, #12]
 8020c6c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8020c6e:	68fb      	ldr	r3, [r7, #12]
 8020c70:	68db      	ldr	r3, [r3, #12]
 8020c72:	60fb      	str	r3, [r7, #12]
 8020c74:	68fb      	ldr	r3, [r7, #12]
 8020c76:	2b00      	cmp	r3, #0
 8020c78:	d1e9      	bne.n	8020c4e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8020c7a:	68bb      	ldr	r3, [r7, #8]
 8020c7c:	2b00      	cmp	r3, #0
 8020c7e:	d002      	beq.n	8020c86 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8020c80:	68b8      	ldr	r0, [r7, #8]
 8020c82:	f7ff f83f 	bl	801fd04 <tcp_abort>
  }
}
 8020c86:	bf00      	nop
 8020c88:	3710      	adds	r7, #16
 8020c8a:	46bd      	mov	sp, r7
 8020c8c:	bd80      	pop	{r7, pc}
 8020c8e:	bf00      	nop
 8020c90:	20022ac4 	.word	0x20022ac4
 8020c94:	20022ab8 	.word	0x20022ab8

08020c98 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8020c98:	b580      	push	{r7, lr}
 8020c9a:	b082      	sub	sp, #8
 8020c9c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8020c9e:	4b10      	ldr	r3, [pc, #64]	; (8020ce0 <tcp_handle_closepend+0x48>)
 8020ca0:	681b      	ldr	r3, [r3, #0]
 8020ca2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8020ca4:	e014      	b.n	8020cd0 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8020ca6:	687b      	ldr	r3, [r7, #4]
 8020ca8:	68db      	ldr	r3, [r3, #12]
 8020caa:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8020cac:	687b      	ldr	r3, [r7, #4]
 8020cae:	8b5b      	ldrh	r3, [r3, #26]
 8020cb0:	f003 0308 	and.w	r3, r3, #8
 8020cb4:	2b00      	cmp	r3, #0
 8020cb6:	d009      	beq.n	8020ccc <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8020cb8:	687b      	ldr	r3, [r7, #4]
 8020cba:	8b5b      	ldrh	r3, [r3, #26]
 8020cbc:	f023 0308 	bic.w	r3, r3, #8
 8020cc0:	b29a      	uxth	r2, r3
 8020cc2:	687b      	ldr	r3, [r7, #4]
 8020cc4:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8020cc6:	6878      	ldr	r0, [r7, #4]
 8020cc8:	f7fe fed6 	bl	801fa78 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8020ccc:	683b      	ldr	r3, [r7, #0]
 8020cce:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8020cd0:	687b      	ldr	r3, [r7, #4]
 8020cd2:	2b00      	cmp	r3, #0
 8020cd4:	d1e7      	bne.n	8020ca6 <tcp_handle_closepend+0xe>
  }
}
 8020cd6:	bf00      	nop
 8020cd8:	3708      	adds	r7, #8
 8020cda:	46bd      	mov	sp, r7
 8020cdc:	bd80      	pop	{r7, pc}
 8020cde:	bf00      	nop
 8020ce0:	20022ab4 	.word	0x20022ab4

08020ce4 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8020ce4:	b580      	push	{r7, lr}
 8020ce6:	b084      	sub	sp, #16
 8020ce8:	af00      	add	r7, sp, #0
 8020cea:	4603      	mov	r3, r0
 8020cec:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8020cee:	2001      	movs	r0, #1
 8020cf0:	f7fd fb20 	bl	801e334 <memp_malloc>
 8020cf4:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8020cf6:	68fb      	ldr	r3, [r7, #12]
 8020cf8:	2b00      	cmp	r3, #0
 8020cfa:	d126      	bne.n	8020d4a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8020cfc:	f7ff ffcc 	bl	8020c98 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8020d00:	f7ff ff9a 	bl	8020c38 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8020d04:	2001      	movs	r0, #1
 8020d06:	f7fd fb15 	bl	801e334 <memp_malloc>
 8020d0a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8020d0c:	68fb      	ldr	r3, [r7, #12]
 8020d0e:	2b00      	cmp	r3, #0
 8020d10:	d11b      	bne.n	8020d4a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8020d12:	2009      	movs	r0, #9
 8020d14:	f7ff ff46 	bl	8020ba4 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8020d18:	2001      	movs	r0, #1
 8020d1a:	f7fd fb0b 	bl	801e334 <memp_malloc>
 8020d1e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8020d20:	68fb      	ldr	r3, [r7, #12]
 8020d22:	2b00      	cmp	r3, #0
 8020d24:	d111      	bne.n	8020d4a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8020d26:	2008      	movs	r0, #8
 8020d28:	f7ff ff3c 	bl	8020ba4 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8020d2c:	2001      	movs	r0, #1
 8020d2e:	f7fd fb01 	bl	801e334 <memp_malloc>
 8020d32:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8020d34:	68fb      	ldr	r3, [r7, #12]
 8020d36:	2b00      	cmp	r3, #0
 8020d38:	d107      	bne.n	8020d4a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8020d3a:	79fb      	ldrb	r3, [r7, #7]
 8020d3c:	4618      	mov	r0, r3
 8020d3e:	f7ff fee3 	bl	8020b08 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8020d42:	2001      	movs	r0, #1
 8020d44:	f7fd faf6 	bl	801e334 <memp_malloc>
 8020d48:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8020d4a:	68fb      	ldr	r3, [r7, #12]
 8020d4c:	2b00      	cmp	r3, #0
 8020d4e:	d047      	beq.n	8020de0 <tcp_alloc+0xfc>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8020d50:	22a0      	movs	r2, #160	; 0xa0
 8020d52:	2100      	movs	r1, #0
 8020d54:	68f8      	ldr	r0, [r7, #12]
 8020d56:	f005 fa37 	bl	80261c8 <memset>
    pcb->prio = prio;
 8020d5a:	68fb      	ldr	r3, [r7, #12]
 8020d5c:	79fa      	ldrb	r2, [r7, #7]
 8020d5e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8020d60:	68fb      	ldr	r3, [r7, #12]
 8020d62:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8020d66:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8020d6a:	68fb      	ldr	r3, [r7, #12]
 8020d6c:	f640 3268 	movw	r2, #2920	; 0xb68
 8020d70:	855a      	strh	r2, [r3, #42]	; 0x2a
 8020d72:	68fb      	ldr	r3, [r7, #12]
 8020d74:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8020d76:	68fb      	ldr	r3, [r7, #12]
 8020d78:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8020d7a:	68fb      	ldr	r3, [r7, #12]
 8020d7c:	22ff      	movs	r2, #255	; 0xff
 8020d7e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8020d80:	68fb      	ldr	r3, [r7, #12]
 8020d82:	f44f 7206 	mov.w	r2, #536	; 0x218
 8020d86:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8020d88:	68fb      	ldr	r3, [r7, #12]
 8020d8a:	2206      	movs	r2, #6
 8020d8c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8020d90:	68fb      	ldr	r3, [r7, #12]
 8020d92:	2206      	movs	r2, #6
 8020d94:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8020d96:	68fb      	ldr	r3, [r7, #12]
 8020d98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8020d9c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8020d9e:	68fb      	ldr	r3, [r7, #12]
 8020da0:	2201      	movs	r2, #1
 8020da2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8020da6:	4b11      	ldr	r3, [pc, #68]	; (8020dec <tcp_alloc+0x108>)
 8020da8:	681a      	ldr	r2, [r3, #0]
 8020daa:	68fb      	ldr	r3, [r7, #12]
 8020dac:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8020dae:	4b10      	ldr	r3, [pc, #64]	; (8020df0 <tcp_alloc+0x10c>)
 8020db0:	781a      	ldrb	r2, [r3, #0]
 8020db2:	68fb      	ldr	r3, [r7, #12]
 8020db4:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8020db6:	68fb      	ldr	r3, [r7, #12]
 8020db8:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8020dbc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8020dc0:	68fb      	ldr	r3, [r7, #12]
 8020dc2:	4a0c      	ldr	r2, [pc, #48]	; (8020df4 <tcp_alloc+0x110>)
 8020dc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8020dc8:	68fb      	ldr	r3, [r7, #12]
 8020dca:	4a0b      	ldr	r2, [pc, #44]	; (8020df8 <tcp_alloc+0x114>)
 8020dcc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
 8020dd0:	68fb      	ldr	r3, [r7, #12]
 8020dd2:	4a0a      	ldr	r2, [pc, #40]	; (8020dfc <tcp_alloc+0x118>)
 8020dd4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
 8020dd8:	68fb      	ldr	r3, [r7, #12]
 8020dda:	2209      	movs	r2, #9
 8020ddc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8020de0:	68fb      	ldr	r3, [r7, #12]
}
 8020de2:	4618      	mov	r0, r3
 8020de4:	3710      	adds	r7, #16
 8020de6:	46bd      	mov	sp, r7
 8020de8:	bd80      	pop	{r7, pc}
 8020dea:	bf00      	nop
 8020dec:	20022ab8 	.word	0x20022ab8
 8020df0:	200196be 	.word	0x200196be
 8020df4:	08020a9d 	.word	0x08020a9d
 8020df8:	006ddd00 	.word	0x006ddd00
 8020dfc:	000124f8 	.word	0x000124f8

08020e00 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8020e00:	b580      	push	{r7, lr}
 8020e02:	b084      	sub	sp, #16
 8020e04:	af00      	add	r7, sp, #0
 8020e06:	4603      	mov	r3, r0
 8020e08:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8020e0a:	2040      	movs	r0, #64	; 0x40
 8020e0c:	f7ff ff6a 	bl	8020ce4 <tcp_alloc>
 8020e10:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8020e12:	68fb      	ldr	r3, [r7, #12]
}
 8020e14:	4618      	mov	r0, r3
 8020e16:	3710      	adds	r7, #16
 8020e18:	46bd      	mov	sp, r7
 8020e1a:	bd80      	pop	{r7, pc}

08020e1c <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8020e1c:	b480      	push	{r7}
 8020e1e:	b083      	sub	sp, #12
 8020e20:	af00      	add	r7, sp, #0
 8020e22:	6078      	str	r0, [r7, #4]
 8020e24:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8020e26:	687b      	ldr	r3, [r7, #4]
 8020e28:	2b00      	cmp	r3, #0
 8020e2a:	d002      	beq.n	8020e32 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8020e2c:	687b      	ldr	r3, [r7, #4]
 8020e2e:	683a      	ldr	r2, [r7, #0]
 8020e30:	611a      	str	r2, [r3, #16]
  }
}
 8020e32:	bf00      	nop
 8020e34:	370c      	adds	r7, #12
 8020e36:	46bd      	mov	sp, r7
 8020e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020e3c:	4770      	bx	lr
	...

08020e40 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8020e40:	b580      	push	{r7, lr}
 8020e42:	b082      	sub	sp, #8
 8020e44:	af00      	add	r7, sp, #0
 8020e46:	6078      	str	r0, [r7, #4]
 8020e48:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8020e4a:	687b      	ldr	r3, [r7, #4]
 8020e4c:	2b00      	cmp	r3, #0
 8020e4e:	d00e      	beq.n	8020e6e <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8020e50:	687b      	ldr	r3, [r7, #4]
 8020e52:	7d1b      	ldrb	r3, [r3, #20]
 8020e54:	2b01      	cmp	r3, #1
 8020e56:	d106      	bne.n	8020e66 <tcp_recv+0x26>
 8020e58:	4b07      	ldr	r3, [pc, #28]	; (8020e78 <tcp_recv+0x38>)
 8020e5a:	f240 72df 	movw	r2, #2015	; 0x7df
 8020e5e:	4907      	ldr	r1, [pc, #28]	; (8020e7c <tcp_recv+0x3c>)
 8020e60:	4807      	ldr	r0, [pc, #28]	; (8020e80 <tcp_recv+0x40>)
 8020e62:	f005 fa65 	bl	8026330 <iprintf>
    pcb->recv = recv;
 8020e66:	687b      	ldr	r3, [r7, #4]
 8020e68:	683a      	ldr	r2, [r7, #0]
 8020e6a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8020e6e:	bf00      	nop
 8020e70:	3708      	adds	r7, #8
 8020e72:	46bd      	mov	sp, r7
 8020e74:	bd80      	pop	{r7, pc}
 8020e76:	bf00      	nop
 8020e78:	080290d4 	.word	0x080290d4
 8020e7c:	08029654 	.word	0x08029654
 8020e80:	08029118 	.word	0x08029118

08020e84 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8020e84:	b580      	push	{r7, lr}
 8020e86:	b082      	sub	sp, #8
 8020e88:	af00      	add	r7, sp, #0
 8020e8a:	6078      	str	r0, [r7, #4]
 8020e8c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8020e8e:	687b      	ldr	r3, [r7, #4]
 8020e90:	2b00      	cmp	r3, #0
 8020e92:	d00d      	beq.n	8020eb0 <tcp_sent+0x2c>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8020e94:	687b      	ldr	r3, [r7, #4]
 8020e96:	7d1b      	ldrb	r3, [r3, #20]
 8020e98:	2b01      	cmp	r3, #1
 8020e9a:	d106      	bne.n	8020eaa <tcp_sent+0x26>
 8020e9c:	4b06      	ldr	r3, [pc, #24]	; (8020eb8 <tcp_sent+0x34>)
 8020e9e:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8020ea2:	4906      	ldr	r1, [pc, #24]	; (8020ebc <tcp_sent+0x38>)
 8020ea4:	4806      	ldr	r0, [pc, #24]	; (8020ec0 <tcp_sent+0x3c>)
 8020ea6:	f005 fa43 	bl	8026330 <iprintf>
    pcb->sent = sent;
 8020eaa:	687b      	ldr	r3, [r7, #4]
 8020eac:	683a      	ldr	r2, [r7, #0]
 8020eae:	67da      	str	r2, [r3, #124]	; 0x7c
  }
}
 8020eb0:	bf00      	nop
 8020eb2:	3708      	adds	r7, #8
 8020eb4:	46bd      	mov	sp, r7
 8020eb6:	bd80      	pop	{r7, pc}
 8020eb8:	080290d4 	.word	0x080290d4
 8020ebc:	0802967c 	.word	0x0802967c
 8020ec0:	08029118 	.word	0x08029118

08020ec4 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8020ec4:	b580      	push	{r7, lr}
 8020ec6:	b082      	sub	sp, #8
 8020ec8:	af00      	add	r7, sp, #0
 8020eca:	6078      	str	r0, [r7, #4]
 8020ecc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8020ece:	687b      	ldr	r3, [r7, #4]
 8020ed0:	2b00      	cmp	r3, #0
 8020ed2:	d00e      	beq.n	8020ef2 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8020ed4:	687b      	ldr	r3, [r7, #4]
 8020ed6:	7d1b      	ldrb	r3, [r3, #20]
 8020ed8:	2b01      	cmp	r3, #1
 8020eda:	d106      	bne.n	8020eea <tcp_err+0x26>
 8020edc:	4b07      	ldr	r3, [pc, #28]	; (8020efc <tcp_err+0x38>)
 8020ede:	f640 020d 	movw	r2, #2061	; 0x80d
 8020ee2:	4907      	ldr	r1, [pc, #28]	; (8020f00 <tcp_err+0x3c>)
 8020ee4:	4807      	ldr	r0, [pc, #28]	; (8020f04 <tcp_err+0x40>)
 8020ee6:	f005 fa23 	bl	8026330 <iprintf>
    pcb->errf = err;
 8020eea:	687b      	ldr	r3, [r7, #4]
 8020eec:	683a      	ldr	r2, [r7, #0]
 8020eee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }
}
 8020ef2:	bf00      	nop
 8020ef4:	3708      	adds	r7, #8
 8020ef6:	46bd      	mov	sp, r7
 8020ef8:	bd80      	pop	{r7, pc}
 8020efa:	bf00      	nop
 8020efc:	080290d4 	.word	0x080290d4
 8020f00:	080296a4 	.word	0x080296a4
 8020f04:	08029118 	.word	0x08029118

08020f08 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8020f08:	b480      	push	{r7}
 8020f0a:	b085      	sub	sp, #20
 8020f0c:	af00      	add	r7, sp, #0
 8020f0e:	6078      	str	r0, [r7, #4]
 8020f10:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8020f12:	687b      	ldr	r3, [r7, #4]
 8020f14:	2b00      	cmp	r3, #0
 8020f16:	d008      	beq.n	8020f2a <tcp_accept+0x22>
 8020f18:	687b      	ldr	r3, [r7, #4]
 8020f1a:	7d1b      	ldrb	r3, [r3, #20]
 8020f1c:	2b01      	cmp	r3, #1
 8020f1e:	d104      	bne.n	8020f2a <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8020f20:	687b      	ldr	r3, [r7, #4]
 8020f22:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8020f24:	68fb      	ldr	r3, [r7, #12]
 8020f26:	683a      	ldr	r2, [r7, #0]
 8020f28:	619a      	str	r2, [r3, #24]
  }
}
 8020f2a:	bf00      	nop
 8020f2c:	3714      	adds	r7, #20
 8020f2e:	46bd      	mov	sp, r7
 8020f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020f34:	4770      	bx	lr
	...

08020f38 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8020f38:	b580      	push	{r7, lr}
 8020f3a:	b084      	sub	sp, #16
 8020f3c:	af00      	add	r7, sp, #0
 8020f3e:	60f8      	str	r0, [r7, #12]
 8020f40:	60b9      	str	r1, [r7, #8]
 8020f42:	4613      	mov	r3, r2
 8020f44:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8020f46:	68fb      	ldr	r3, [r7, #12]
 8020f48:	2b00      	cmp	r3, #0
 8020f4a:	d107      	bne.n	8020f5c <tcp_poll+0x24>
 8020f4c:	4b0e      	ldr	r3, [pc, #56]	; (8020f88 <tcp_poll+0x50>)
 8020f4e:	f640 023d 	movw	r2, #2109	; 0x83d
 8020f52:	490e      	ldr	r1, [pc, #56]	; (8020f8c <tcp_poll+0x54>)
 8020f54:	480e      	ldr	r0, [pc, #56]	; (8020f90 <tcp_poll+0x58>)
 8020f56:	f005 f9eb 	bl	8026330 <iprintf>
 8020f5a:	e011      	b.n	8020f80 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8020f5c:	68fb      	ldr	r3, [r7, #12]
 8020f5e:	7d1b      	ldrb	r3, [r3, #20]
 8020f60:	2b01      	cmp	r3, #1
 8020f62:	d106      	bne.n	8020f72 <tcp_poll+0x3a>
 8020f64:	4b08      	ldr	r3, [pc, #32]	; (8020f88 <tcp_poll+0x50>)
 8020f66:	f640 023e 	movw	r2, #2110	; 0x83e
 8020f6a:	490a      	ldr	r1, [pc, #40]	; (8020f94 <tcp_poll+0x5c>)
 8020f6c:	4808      	ldr	r0, [pc, #32]	; (8020f90 <tcp_poll+0x58>)
 8020f6e:	f005 f9df 	bl	8026330 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8020f72:	68fb      	ldr	r3, [r7, #12]
 8020f74:	68ba      	ldr	r2, [r7, #8]
 8020f76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8020f7a:	68fb      	ldr	r3, [r7, #12]
 8020f7c:	79fa      	ldrb	r2, [r7, #7]
 8020f7e:	775a      	strb	r2, [r3, #29]
}
 8020f80:	3710      	adds	r7, #16
 8020f82:	46bd      	mov	sp, r7
 8020f84:	bd80      	pop	{r7, pc}
 8020f86:	bf00      	nop
 8020f88:	080290d4 	.word	0x080290d4
 8020f8c:	080296cc 	.word	0x080296cc
 8020f90:	08029118 	.word	0x08029118
 8020f94:	080296e4 	.word	0x080296e4

08020f98 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8020f98:	b580      	push	{r7, lr}
 8020f9a:	b082      	sub	sp, #8
 8020f9c:	af00      	add	r7, sp, #0
 8020f9e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8020fa0:	687b      	ldr	r3, [r7, #4]
 8020fa2:	2b00      	cmp	r3, #0
 8020fa4:	d107      	bne.n	8020fb6 <tcp_pcb_purge+0x1e>
 8020fa6:	4b1e      	ldr	r3, [pc, #120]	; (8021020 <tcp_pcb_purge+0x88>)
 8020fa8:	f640 0251 	movw	r2, #2129	; 0x851
 8020fac:	491d      	ldr	r1, [pc, #116]	; (8021024 <tcp_pcb_purge+0x8c>)
 8020fae:	481e      	ldr	r0, [pc, #120]	; (8021028 <tcp_pcb_purge+0x90>)
 8020fb0:	f005 f9be 	bl	8026330 <iprintf>
 8020fb4:	e030      	b.n	8021018 <tcp_pcb_purge+0x80>

  if (pcb->state != CLOSED &&
 8020fb6:	687b      	ldr	r3, [r7, #4]
 8020fb8:	7d1b      	ldrb	r3, [r3, #20]
 8020fba:	2b00      	cmp	r3, #0
 8020fbc:	d02c      	beq.n	8021018 <tcp_pcb_purge+0x80>
      pcb->state != TIME_WAIT &&
 8020fbe:	687b      	ldr	r3, [r7, #4]
 8020fc0:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8020fc2:	2b0a      	cmp	r3, #10
 8020fc4:	d028      	beq.n	8021018 <tcp_pcb_purge+0x80>
      pcb->state != LISTEN) {
 8020fc6:	687b      	ldr	r3, [r7, #4]
 8020fc8:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8020fca:	2b01      	cmp	r3, #1
 8020fcc:	d024      	beq.n	8021018 <tcp_pcb_purge+0x80>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8020fce:	687b      	ldr	r3, [r7, #4]
 8020fd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8020fd2:	2b00      	cmp	r3, #0
 8020fd4:	d007      	beq.n	8020fe6 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8020fd6:	687b      	ldr	r3, [r7, #4]
 8020fd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8020fda:	4618      	mov	r0, r3
 8020fdc:	f7fd ffa4 	bl	801ef28 <pbuf_free>
      pcb->refused_data = NULL;
 8020fe0:	687b      	ldr	r3, [r7, #4]
 8020fe2:	2200      	movs	r2, #0
 8020fe4:	675a      	str	r2, [r3, #116]	; 0x74
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8020fe6:	687b      	ldr	r3, [r7, #4]
 8020fe8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8020fec:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8020fee:	687b      	ldr	r3, [r7, #4]
 8020ff0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8020ff2:	4618      	mov	r0, r3
 8020ff4:	f7ff fd08 	bl	8020a08 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8020ff8:	687b      	ldr	r3, [r7, #4]
 8020ffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8020ffc:	4618      	mov	r0, r3
 8020ffe:	f7ff fd03 	bl	8020a08 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8021002:	687b      	ldr	r3, [r7, #4]
 8021004:	2200      	movs	r2, #0
 8021006:	66da      	str	r2, [r3, #108]	; 0x6c
 8021008:	687b      	ldr	r3, [r7, #4]
 802100a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 802100c:	687b      	ldr	r3, [r7, #4]
 802100e:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8021010:	687b      	ldr	r3, [r7, #4]
 8021012:	2200      	movs	r2, #0
 8021014:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8021018:	3708      	adds	r7, #8
 802101a:	46bd      	mov	sp, r7
 802101c:	bd80      	pop	{r7, pc}
 802101e:	bf00      	nop
 8021020:	080290d4 	.word	0x080290d4
 8021024:	08029704 	.word	0x08029704
 8021028:	08029118 	.word	0x08029118

0802102c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 802102c:	b580      	push	{r7, lr}
 802102e:	b084      	sub	sp, #16
 8021030:	af00      	add	r7, sp, #0
 8021032:	6078      	str	r0, [r7, #4]
 8021034:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8021036:	683b      	ldr	r3, [r7, #0]
 8021038:	2b00      	cmp	r3, #0
 802103a:	d106      	bne.n	802104a <tcp_pcb_remove+0x1e>
 802103c:	4b38      	ldr	r3, [pc, #224]	; (8021120 <tcp_pcb_remove+0xf4>)
 802103e:	f640 0283 	movw	r2, #2179	; 0x883
 8021042:	4938      	ldr	r1, [pc, #224]	; (8021124 <tcp_pcb_remove+0xf8>)
 8021044:	4838      	ldr	r0, [pc, #224]	; (8021128 <tcp_pcb_remove+0xfc>)
 8021046:	f005 f973 	bl	8026330 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 802104a:	687b      	ldr	r3, [r7, #4]
 802104c:	2b00      	cmp	r3, #0
 802104e:	d106      	bne.n	802105e <tcp_pcb_remove+0x32>
 8021050:	4b33      	ldr	r3, [pc, #204]	; (8021120 <tcp_pcb_remove+0xf4>)
 8021052:	f640 0284 	movw	r2, #2180	; 0x884
 8021056:	4935      	ldr	r1, [pc, #212]	; (802112c <tcp_pcb_remove+0x100>)
 8021058:	4833      	ldr	r0, [pc, #204]	; (8021128 <tcp_pcb_remove+0xfc>)
 802105a:	f005 f969 	bl	8026330 <iprintf>

  TCP_RMV(pcblist, pcb);
 802105e:	687b      	ldr	r3, [r7, #4]
 8021060:	681a      	ldr	r2, [r3, #0]
 8021062:	683b      	ldr	r3, [r7, #0]
 8021064:	429a      	cmp	r2, r3
 8021066:	d105      	bne.n	8021074 <tcp_pcb_remove+0x48>
 8021068:	687b      	ldr	r3, [r7, #4]
 802106a:	681b      	ldr	r3, [r3, #0]
 802106c:	68da      	ldr	r2, [r3, #12]
 802106e:	687b      	ldr	r3, [r7, #4]
 8021070:	601a      	str	r2, [r3, #0]
 8021072:	e013      	b.n	802109c <tcp_pcb_remove+0x70>
 8021074:	687b      	ldr	r3, [r7, #4]
 8021076:	681b      	ldr	r3, [r3, #0]
 8021078:	60fb      	str	r3, [r7, #12]
 802107a:	e00c      	b.n	8021096 <tcp_pcb_remove+0x6a>
 802107c:	68fb      	ldr	r3, [r7, #12]
 802107e:	68da      	ldr	r2, [r3, #12]
 8021080:	683b      	ldr	r3, [r7, #0]
 8021082:	429a      	cmp	r2, r3
 8021084:	d104      	bne.n	8021090 <tcp_pcb_remove+0x64>
 8021086:	683b      	ldr	r3, [r7, #0]
 8021088:	68da      	ldr	r2, [r3, #12]
 802108a:	68fb      	ldr	r3, [r7, #12]
 802108c:	60da      	str	r2, [r3, #12]
 802108e:	e005      	b.n	802109c <tcp_pcb_remove+0x70>
 8021090:	68fb      	ldr	r3, [r7, #12]
 8021092:	68db      	ldr	r3, [r3, #12]
 8021094:	60fb      	str	r3, [r7, #12]
 8021096:	68fb      	ldr	r3, [r7, #12]
 8021098:	2b00      	cmp	r3, #0
 802109a:	d1ef      	bne.n	802107c <tcp_pcb_remove+0x50>
 802109c:	683b      	ldr	r3, [r7, #0]
 802109e:	2200      	movs	r2, #0
 80210a0:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80210a2:	6838      	ldr	r0, [r7, #0]
 80210a4:	f7ff ff78 	bl	8020f98 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80210a8:	683b      	ldr	r3, [r7, #0]
 80210aa:	7d1b      	ldrb	r3, [r3, #20]
 80210ac:	2b0a      	cmp	r3, #10
 80210ae:	d013      	beq.n	80210d8 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80210b0:	683b      	ldr	r3, [r7, #0]
 80210b2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80210b4:	2b01      	cmp	r3, #1
 80210b6:	d00f      	beq.n	80210d8 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80210b8:	683b      	ldr	r3, [r7, #0]
 80210ba:	8b5b      	ldrh	r3, [r3, #26]
 80210bc:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80210c0:	2b00      	cmp	r3, #0
 80210c2:	d009      	beq.n	80210d8 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 80210c4:	683b      	ldr	r3, [r7, #0]
 80210c6:	8b5b      	ldrh	r3, [r3, #26]
 80210c8:	f043 0302 	orr.w	r3, r3, #2
 80210cc:	b29a      	uxth	r2, r3
 80210ce:	683b      	ldr	r3, [r7, #0]
 80210d0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80210d2:	6838      	ldr	r0, [r7, #0]
 80210d4:	f002 fff0 	bl	80240b8 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80210d8:	683b      	ldr	r3, [r7, #0]
 80210da:	7d1b      	ldrb	r3, [r3, #20]
 80210dc:	2b01      	cmp	r3, #1
 80210de:	d015      	beq.n	802110c <tcp_pcb_remove+0xe0>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80210e0:	683b      	ldr	r3, [r7, #0]
 80210e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80210e4:	2b00      	cmp	r3, #0
 80210e6:	d006      	beq.n	80210f6 <tcp_pcb_remove+0xca>
 80210e8:	4b0d      	ldr	r3, [pc, #52]	; (8021120 <tcp_pcb_remove+0xf4>)
 80210ea:	f640 0293 	movw	r2, #2195	; 0x893
 80210ee:	4910      	ldr	r1, [pc, #64]	; (8021130 <tcp_pcb_remove+0x104>)
 80210f0:	480d      	ldr	r0, [pc, #52]	; (8021128 <tcp_pcb_remove+0xfc>)
 80210f2:	f005 f91d 	bl	8026330 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80210f6:	683b      	ldr	r3, [r7, #0]
 80210f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80210fa:	2b00      	cmp	r3, #0
 80210fc:	d006      	beq.n	802110c <tcp_pcb_remove+0xe0>
 80210fe:	4b08      	ldr	r3, [pc, #32]	; (8021120 <tcp_pcb_remove+0xf4>)
 8021100:	f640 0294 	movw	r2, #2196	; 0x894
 8021104:	490b      	ldr	r1, [pc, #44]	; (8021134 <tcp_pcb_remove+0x108>)
 8021106:	4808      	ldr	r0, [pc, #32]	; (8021128 <tcp_pcb_remove+0xfc>)
 8021108:	f005 f912 	bl	8026330 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 802110c:	683b      	ldr	r3, [r7, #0]
 802110e:	2200      	movs	r2, #0
 8021110:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8021112:	683b      	ldr	r3, [r7, #0]
 8021114:	2200      	movs	r2, #0
 8021116:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8021118:	bf00      	nop
 802111a:	3710      	adds	r7, #16
 802111c:	46bd      	mov	sp, r7
 802111e:	bd80      	pop	{r7, pc}
 8021120:	080290d4 	.word	0x080290d4
 8021124:	08029720 	.word	0x08029720
 8021128:	08029118 	.word	0x08029118
 802112c:	0802973c 	.word	0x0802973c
 8021130:	0802975c 	.word	0x0802975c
 8021134:	08029774 	.word	0x08029774

08021138 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8021138:	b580      	push	{r7, lr}
 802113a:	b082      	sub	sp, #8
 802113c:	af00      	add	r7, sp, #0
 802113e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8021140:	687b      	ldr	r3, [r7, #4]
 8021142:	2b00      	cmp	r3, #0
 8021144:	d106      	bne.n	8021154 <tcp_next_iss+0x1c>
 8021146:	4b0a      	ldr	r3, [pc, #40]	; (8021170 <tcp_next_iss+0x38>)
 8021148:	f640 02af 	movw	r2, #2223	; 0x8af
 802114c:	4909      	ldr	r1, [pc, #36]	; (8021174 <tcp_next_iss+0x3c>)
 802114e:	480a      	ldr	r0, [pc, #40]	; (8021178 <tcp_next_iss+0x40>)
 8021150:	f005 f8ee 	bl	8026330 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8021154:	4b09      	ldr	r3, [pc, #36]	; (802117c <tcp_next_iss+0x44>)
 8021156:	681a      	ldr	r2, [r3, #0]
 8021158:	4b09      	ldr	r3, [pc, #36]	; (8021180 <tcp_next_iss+0x48>)
 802115a:	681b      	ldr	r3, [r3, #0]
 802115c:	4413      	add	r3, r2
 802115e:	4a07      	ldr	r2, [pc, #28]	; (802117c <tcp_next_iss+0x44>)
 8021160:	6013      	str	r3, [r2, #0]
  return iss;
 8021162:	4b06      	ldr	r3, [pc, #24]	; (802117c <tcp_next_iss+0x44>)
 8021164:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8021166:	4618      	mov	r0, r3
 8021168:	3708      	adds	r7, #8
 802116a:	46bd      	mov	sp, r7
 802116c:	bd80      	pop	{r7, pc}
 802116e:	bf00      	nop
 8021170:	080290d4 	.word	0x080290d4
 8021174:	08029790 	.word	0x08029790
 8021178:	08029118 	.word	0x08029118
 802117c:	20000018 	.word	0x20000018
 8021180:	20022ab8 	.word	0x20022ab8

08021184 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8021184:	b580      	push	{r7, lr}
 8021186:	b086      	sub	sp, #24
 8021188:	af00      	add	r7, sp, #0
 802118a:	4603      	mov	r3, r0
 802118c:	60b9      	str	r1, [r7, #8]
 802118e:	607a      	str	r2, [r7, #4]
 8021190:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8021192:	687b      	ldr	r3, [r7, #4]
 8021194:	2b00      	cmp	r3, #0
 8021196:	d106      	bne.n	80211a6 <tcp_eff_send_mss_netif+0x22>
 8021198:	4b14      	ldr	r3, [pc, #80]	; (80211ec <tcp_eff_send_mss_netif+0x68>)
 802119a:	f640 02c5 	movw	r2, #2245	; 0x8c5
 802119e:	4914      	ldr	r1, [pc, #80]	; (80211f0 <tcp_eff_send_mss_netif+0x6c>)
 80211a0:	4814      	ldr	r0, [pc, #80]	; (80211f4 <tcp_eff_send_mss_netif+0x70>)
 80211a2:	f005 f8c5 	bl	8026330 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80211a6:	68bb      	ldr	r3, [r7, #8]
 80211a8:	2b00      	cmp	r3, #0
 80211aa:	d101      	bne.n	80211b0 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 80211ac:	89fb      	ldrh	r3, [r7, #14]
 80211ae:	e019      	b.n	80211e4 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 80211b0:	68bb      	ldr	r3, [r7, #8]
 80211b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80211b4:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80211b6:	8afb      	ldrh	r3, [r7, #22]
 80211b8:	2b00      	cmp	r3, #0
 80211ba:	d012      	beq.n	80211e2 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 80211bc:	2328      	movs	r3, #40	; 0x28
 80211be:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80211c0:	8afa      	ldrh	r2, [r7, #22]
 80211c2:	8abb      	ldrh	r3, [r7, #20]
 80211c4:	429a      	cmp	r2, r3
 80211c6:	d904      	bls.n	80211d2 <tcp_eff_send_mss_netif+0x4e>
 80211c8:	8afa      	ldrh	r2, [r7, #22]
 80211ca:	8abb      	ldrh	r3, [r7, #20]
 80211cc:	1ad3      	subs	r3, r2, r3
 80211ce:	b29b      	uxth	r3, r3
 80211d0:	e000      	b.n	80211d4 <tcp_eff_send_mss_netif+0x50>
 80211d2:	2300      	movs	r3, #0
 80211d4:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80211d6:	8a7a      	ldrh	r2, [r7, #18]
 80211d8:	89fb      	ldrh	r3, [r7, #14]
 80211da:	4293      	cmp	r3, r2
 80211dc:	bf28      	it	cs
 80211de:	4613      	movcs	r3, r2
 80211e0:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 80211e2:	89fb      	ldrh	r3, [r7, #14]
}
 80211e4:	4618      	mov	r0, r3
 80211e6:	3718      	adds	r7, #24
 80211e8:	46bd      	mov	sp, r7
 80211ea:	bd80      	pop	{r7, pc}
 80211ec:	080290d4 	.word	0x080290d4
 80211f0:	080297ac 	.word	0x080297ac
 80211f4:	08029118 	.word	0x08029118

080211f8 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 80211f8:	b580      	push	{r7, lr}
 80211fa:	b084      	sub	sp, #16
 80211fc:	af00      	add	r7, sp, #0
 80211fe:	6078      	str	r0, [r7, #4]
 8021200:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8021202:	683b      	ldr	r3, [r7, #0]
 8021204:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8021206:	687b      	ldr	r3, [r7, #4]
 8021208:	2b00      	cmp	r3, #0
 802120a:	d119      	bne.n	8021240 <tcp_netif_ip_addr_changed_pcblist+0x48>
 802120c:	4b10      	ldr	r3, [pc, #64]	; (8021250 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 802120e:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8021212:	4910      	ldr	r1, [pc, #64]	; (8021254 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8021214:	4810      	ldr	r0, [pc, #64]	; (8021258 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8021216:	f005 f88b 	bl	8026330 <iprintf>

  while (pcb != NULL) {
 802121a:	e011      	b.n	8021240 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 802121c:	68fb      	ldr	r3, [r7, #12]
 802121e:	681a      	ldr	r2, [r3, #0]
 8021220:	687b      	ldr	r3, [r7, #4]
 8021222:	681b      	ldr	r3, [r3, #0]
 8021224:	429a      	cmp	r2, r3
 8021226:	d108      	bne.n	802123a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8021228:	68fb      	ldr	r3, [r7, #12]
 802122a:	68db      	ldr	r3, [r3, #12]
 802122c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 802122e:	68f8      	ldr	r0, [r7, #12]
 8021230:	f7fe fd68 	bl	801fd04 <tcp_abort>
      pcb = next;
 8021234:	68bb      	ldr	r3, [r7, #8]
 8021236:	60fb      	str	r3, [r7, #12]
 8021238:	e002      	b.n	8021240 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 802123a:	68fb      	ldr	r3, [r7, #12]
 802123c:	68db      	ldr	r3, [r3, #12]
 802123e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8021240:	68fb      	ldr	r3, [r7, #12]
 8021242:	2b00      	cmp	r3, #0
 8021244:	d1ea      	bne.n	802121c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8021246:	bf00      	nop
 8021248:	3710      	adds	r7, #16
 802124a:	46bd      	mov	sp, r7
 802124c:	bd80      	pop	{r7, pc}
 802124e:	bf00      	nop
 8021250:	080290d4 	.word	0x080290d4
 8021254:	080297d4 	.word	0x080297d4
 8021258:	08029118 	.word	0x08029118

0802125c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 802125c:	b580      	push	{r7, lr}
 802125e:	b084      	sub	sp, #16
 8021260:	af00      	add	r7, sp, #0
 8021262:	6078      	str	r0, [r7, #4]
 8021264:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8021266:	687b      	ldr	r3, [r7, #4]
 8021268:	2b00      	cmp	r3, #0
 802126a:	d02a      	beq.n	80212c2 <tcp_netif_ip_addr_changed+0x66>
 802126c:	687b      	ldr	r3, [r7, #4]
 802126e:	681b      	ldr	r3, [r3, #0]
 8021270:	2b00      	cmp	r3, #0
 8021272:	d026      	beq.n	80212c2 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8021274:	4b15      	ldr	r3, [pc, #84]	; (80212cc <tcp_netif_ip_addr_changed+0x70>)
 8021276:	681b      	ldr	r3, [r3, #0]
 8021278:	4619      	mov	r1, r3
 802127a:	6878      	ldr	r0, [r7, #4]
 802127c:	f7ff ffbc 	bl	80211f8 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8021280:	4b13      	ldr	r3, [pc, #76]	; (80212d0 <tcp_netif_ip_addr_changed+0x74>)
 8021282:	681b      	ldr	r3, [r3, #0]
 8021284:	4619      	mov	r1, r3
 8021286:	6878      	ldr	r0, [r7, #4]
 8021288:	f7ff ffb6 	bl	80211f8 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 802128c:	683b      	ldr	r3, [r7, #0]
 802128e:	2b00      	cmp	r3, #0
 8021290:	d017      	beq.n	80212c2 <tcp_netif_ip_addr_changed+0x66>
 8021292:	683b      	ldr	r3, [r7, #0]
 8021294:	681b      	ldr	r3, [r3, #0]
 8021296:	2b00      	cmp	r3, #0
 8021298:	d013      	beq.n	80212c2 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 802129a:	4b0e      	ldr	r3, [pc, #56]	; (80212d4 <tcp_netif_ip_addr_changed+0x78>)
 802129c:	681b      	ldr	r3, [r3, #0]
 802129e:	60fb      	str	r3, [r7, #12]
 80212a0:	e00c      	b.n	80212bc <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80212a2:	68fb      	ldr	r3, [r7, #12]
 80212a4:	681a      	ldr	r2, [r3, #0]
 80212a6:	687b      	ldr	r3, [r7, #4]
 80212a8:	681b      	ldr	r3, [r3, #0]
 80212aa:	429a      	cmp	r2, r3
 80212ac:	d103      	bne.n	80212b6 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80212ae:	683b      	ldr	r3, [r7, #0]
 80212b0:	681a      	ldr	r2, [r3, #0]
 80212b2:	68fb      	ldr	r3, [r7, #12]
 80212b4:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80212b6:	68fb      	ldr	r3, [r7, #12]
 80212b8:	68db      	ldr	r3, [r3, #12]
 80212ba:	60fb      	str	r3, [r7, #12]
 80212bc:	68fb      	ldr	r3, [r7, #12]
 80212be:	2b00      	cmp	r3, #0
 80212c0:	d1ef      	bne.n	80212a2 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80212c2:	bf00      	nop
 80212c4:	3710      	adds	r7, #16
 80212c6:	46bd      	mov	sp, r7
 80212c8:	bd80      	pop	{r7, pc}
 80212ca:	bf00      	nop
 80212cc:	20022ab4 	.word	0x20022ab4
 80212d0:	20022ac0 	.word	0x20022ac0
 80212d4:	20022abc 	.word	0x20022abc

080212d8 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80212d8:	b590      	push	{r4, r7, lr}
 80212da:	b08d      	sub	sp, #52	; 0x34
 80212dc:	af04      	add	r7, sp, #16
 80212de:	6078      	str	r0, [r7, #4]
 80212e0:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80212e2:	687b      	ldr	r3, [r7, #4]
 80212e4:	2b00      	cmp	r3, #0
 80212e6:	d105      	bne.n	80212f4 <tcp_input+0x1c>
 80212e8:	4b9b      	ldr	r3, [pc, #620]	; (8021558 <tcp_input+0x280>)
 80212ea:	2283      	movs	r2, #131	; 0x83
 80212ec:	499b      	ldr	r1, [pc, #620]	; (802155c <tcp_input+0x284>)
 80212ee:	489c      	ldr	r0, [pc, #624]	; (8021560 <tcp_input+0x288>)
 80212f0:	f005 f81e 	bl	8026330 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80212f4:	687b      	ldr	r3, [r7, #4]
 80212f6:	685b      	ldr	r3, [r3, #4]
 80212f8:	4a9a      	ldr	r2, [pc, #616]	; (8021564 <tcp_input+0x28c>)
 80212fa:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80212fc:	687b      	ldr	r3, [r7, #4]
 80212fe:	895b      	ldrh	r3, [r3, #10]
 8021300:	2b13      	cmp	r3, #19
 8021302:	f240 83c1 	bls.w	8021a88 <tcp_input+0x7b0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8021306:	4b98      	ldr	r3, [pc, #608]	; (8021568 <tcp_input+0x290>)
 8021308:	695a      	ldr	r2, [r3, #20]
 802130a:	4b97      	ldr	r3, [pc, #604]	; (8021568 <tcp_input+0x290>)
 802130c:	681b      	ldr	r3, [r3, #0]
 802130e:	4619      	mov	r1, r3
 8021310:	4610      	mov	r0, r2
 8021312:	f7fb fd29 	bl	801cd68 <ip4_addr_isbroadcast_u32>
 8021316:	4603      	mov	r3, r0
 8021318:	2b00      	cmp	r3, #0
 802131a:	f040 83ba 	bne.w	8021a92 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 802131e:	4b92      	ldr	r3, [pc, #584]	; (8021568 <tcp_input+0x290>)
 8021320:	695b      	ldr	r3, [r3, #20]
 8021322:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8021326:	2be0      	cmp	r3, #224	; 0xe0
 8021328:	f000 83b3 	beq.w	8021a92 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 802132c:	4b8d      	ldr	r3, [pc, #564]	; (8021564 <tcp_input+0x28c>)
 802132e:	681b      	ldr	r3, [r3, #0]
 8021330:	899b      	ldrh	r3, [r3, #12]
 8021332:	b29b      	uxth	r3, r3
 8021334:	4618      	mov	r0, r3
 8021336:	f7f7 fef7 	bl	8019128 <lwip_htons>
 802133a:	4603      	mov	r3, r0
 802133c:	0b1b      	lsrs	r3, r3, #12
 802133e:	b29b      	uxth	r3, r3
 8021340:	b2db      	uxtb	r3, r3
 8021342:	009b      	lsls	r3, r3, #2
 8021344:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8021346:	7cbb      	ldrb	r3, [r7, #18]
 8021348:	2b13      	cmp	r3, #19
 802134a:	f240 83a2 	bls.w	8021a92 <tcp_input+0x7ba>
 802134e:	7cbb      	ldrb	r3, [r7, #18]
 8021350:	b29a      	uxth	r2, r3
 8021352:	687b      	ldr	r3, [r7, #4]
 8021354:	891b      	ldrh	r3, [r3, #8]
 8021356:	429a      	cmp	r2, r3
 8021358:	f200 839b 	bhi.w	8021a92 <tcp_input+0x7ba>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 802135c:	7cbb      	ldrb	r3, [r7, #18]
 802135e:	b29b      	uxth	r3, r3
 8021360:	3b14      	subs	r3, #20
 8021362:	b29a      	uxth	r2, r3
 8021364:	4b81      	ldr	r3, [pc, #516]	; (802156c <tcp_input+0x294>)
 8021366:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8021368:	4b81      	ldr	r3, [pc, #516]	; (8021570 <tcp_input+0x298>)
 802136a:	2200      	movs	r2, #0
 802136c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 802136e:	687b      	ldr	r3, [r7, #4]
 8021370:	895a      	ldrh	r2, [r3, #10]
 8021372:	7cbb      	ldrb	r3, [r7, #18]
 8021374:	b29b      	uxth	r3, r3
 8021376:	429a      	cmp	r2, r3
 8021378:	d309      	bcc.n	802138e <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 802137a:	4b7c      	ldr	r3, [pc, #496]	; (802156c <tcp_input+0x294>)
 802137c:	881a      	ldrh	r2, [r3, #0]
 802137e:	4b7d      	ldr	r3, [pc, #500]	; (8021574 <tcp_input+0x29c>)
 8021380:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8021382:	7cbb      	ldrb	r3, [r7, #18]
 8021384:	4619      	mov	r1, r3
 8021386:	6878      	ldr	r0, [r7, #4]
 8021388:	f7fd fd48 	bl	801ee1c <pbuf_remove_header>
 802138c:	e04e      	b.n	802142c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 802138e:	687b      	ldr	r3, [r7, #4]
 8021390:	681b      	ldr	r3, [r3, #0]
 8021392:	2b00      	cmp	r3, #0
 8021394:	d105      	bne.n	80213a2 <tcp_input+0xca>
 8021396:	4b70      	ldr	r3, [pc, #448]	; (8021558 <tcp_input+0x280>)
 8021398:	22c2      	movs	r2, #194	; 0xc2
 802139a:	4977      	ldr	r1, [pc, #476]	; (8021578 <tcp_input+0x2a0>)
 802139c:	4870      	ldr	r0, [pc, #448]	; (8021560 <tcp_input+0x288>)
 802139e:	f004 ffc7 	bl	8026330 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80213a2:	2114      	movs	r1, #20
 80213a4:	6878      	ldr	r0, [r7, #4]
 80213a6:	f7fd fd39 	bl	801ee1c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80213aa:	687b      	ldr	r3, [r7, #4]
 80213ac:	895a      	ldrh	r2, [r3, #10]
 80213ae:	4b71      	ldr	r3, [pc, #452]	; (8021574 <tcp_input+0x29c>)
 80213b0:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80213b2:	4b6e      	ldr	r3, [pc, #440]	; (802156c <tcp_input+0x294>)
 80213b4:	881a      	ldrh	r2, [r3, #0]
 80213b6:	4b6f      	ldr	r3, [pc, #444]	; (8021574 <tcp_input+0x29c>)
 80213b8:	881b      	ldrh	r3, [r3, #0]
 80213ba:	1ad3      	subs	r3, r2, r3
 80213bc:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 80213be:	4b6d      	ldr	r3, [pc, #436]	; (8021574 <tcp_input+0x29c>)
 80213c0:	881b      	ldrh	r3, [r3, #0]
 80213c2:	4619      	mov	r1, r3
 80213c4:	6878      	ldr	r0, [r7, #4]
 80213c6:	f7fd fd29 	bl	801ee1c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80213ca:	687b      	ldr	r3, [r7, #4]
 80213cc:	681b      	ldr	r3, [r3, #0]
 80213ce:	895b      	ldrh	r3, [r3, #10]
 80213d0:	8a3a      	ldrh	r2, [r7, #16]
 80213d2:	429a      	cmp	r2, r3
 80213d4:	f200 835a 	bhi.w	8021a8c <tcp_input+0x7b4>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 80213d8:	687b      	ldr	r3, [r7, #4]
 80213da:	681b      	ldr	r3, [r3, #0]
 80213dc:	685b      	ldr	r3, [r3, #4]
 80213de:	4a64      	ldr	r2, [pc, #400]	; (8021570 <tcp_input+0x298>)
 80213e0:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 80213e2:	687b      	ldr	r3, [r7, #4]
 80213e4:	681b      	ldr	r3, [r3, #0]
 80213e6:	8a3a      	ldrh	r2, [r7, #16]
 80213e8:	4611      	mov	r1, r2
 80213ea:	4618      	mov	r0, r3
 80213ec:	f7fd fd16 	bl	801ee1c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 80213f0:	687b      	ldr	r3, [r7, #4]
 80213f2:	891a      	ldrh	r2, [r3, #8]
 80213f4:	8a3b      	ldrh	r3, [r7, #16]
 80213f6:	1ad3      	subs	r3, r2, r3
 80213f8:	b29a      	uxth	r2, r3
 80213fa:	687b      	ldr	r3, [r7, #4]
 80213fc:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80213fe:	687b      	ldr	r3, [r7, #4]
 8021400:	895b      	ldrh	r3, [r3, #10]
 8021402:	2b00      	cmp	r3, #0
 8021404:	d005      	beq.n	8021412 <tcp_input+0x13a>
 8021406:	4b54      	ldr	r3, [pc, #336]	; (8021558 <tcp_input+0x280>)
 8021408:	22df      	movs	r2, #223	; 0xdf
 802140a:	495c      	ldr	r1, [pc, #368]	; (802157c <tcp_input+0x2a4>)
 802140c:	4854      	ldr	r0, [pc, #336]	; (8021560 <tcp_input+0x288>)
 802140e:	f004 ff8f 	bl	8026330 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8021412:	687b      	ldr	r3, [r7, #4]
 8021414:	891a      	ldrh	r2, [r3, #8]
 8021416:	687b      	ldr	r3, [r7, #4]
 8021418:	681b      	ldr	r3, [r3, #0]
 802141a:	891b      	ldrh	r3, [r3, #8]
 802141c:	429a      	cmp	r2, r3
 802141e:	d005      	beq.n	802142c <tcp_input+0x154>
 8021420:	4b4d      	ldr	r3, [pc, #308]	; (8021558 <tcp_input+0x280>)
 8021422:	22e0      	movs	r2, #224	; 0xe0
 8021424:	4956      	ldr	r1, [pc, #344]	; (8021580 <tcp_input+0x2a8>)
 8021426:	484e      	ldr	r0, [pc, #312]	; (8021560 <tcp_input+0x288>)
 8021428:	f004 ff82 	bl	8026330 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 802142c:	4b4d      	ldr	r3, [pc, #308]	; (8021564 <tcp_input+0x28c>)
 802142e:	681c      	ldr	r4, [r3, #0]
 8021430:	4b4c      	ldr	r3, [pc, #304]	; (8021564 <tcp_input+0x28c>)
 8021432:	681b      	ldr	r3, [r3, #0]
 8021434:	881b      	ldrh	r3, [r3, #0]
 8021436:	b29b      	uxth	r3, r3
 8021438:	4618      	mov	r0, r3
 802143a:	f7f7 fe75 	bl	8019128 <lwip_htons>
 802143e:	4603      	mov	r3, r0
 8021440:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8021442:	4b48      	ldr	r3, [pc, #288]	; (8021564 <tcp_input+0x28c>)
 8021444:	681c      	ldr	r4, [r3, #0]
 8021446:	4b47      	ldr	r3, [pc, #284]	; (8021564 <tcp_input+0x28c>)
 8021448:	681b      	ldr	r3, [r3, #0]
 802144a:	885b      	ldrh	r3, [r3, #2]
 802144c:	b29b      	uxth	r3, r3
 802144e:	4618      	mov	r0, r3
 8021450:	f7f7 fe6a 	bl	8019128 <lwip_htons>
 8021454:	4603      	mov	r3, r0
 8021456:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8021458:	4b42      	ldr	r3, [pc, #264]	; (8021564 <tcp_input+0x28c>)
 802145a:	681c      	ldr	r4, [r3, #0]
 802145c:	4b41      	ldr	r3, [pc, #260]	; (8021564 <tcp_input+0x28c>)
 802145e:	681b      	ldr	r3, [r3, #0]
 8021460:	685b      	ldr	r3, [r3, #4]
 8021462:	4618      	mov	r0, r3
 8021464:	f7f7 fe75 	bl	8019152 <lwip_htonl>
 8021468:	4603      	mov	r3, r0
 802146a:	6063      	str	r3, [r4, #4]
 802146c:	6863      	ldr	r3, [r4, #4]
 802146e:	4a45      	ldr	r2, [pc, #276]	; (8021584 <tcp_input+0x2ac>)
 8021470:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8021472:	4b3c      	ldr	r3, [pc, #240]	; (8021564 <tcp_input+0x28c>)
 8021474:	681c      	ldr	r4, [r3, #0]
 8021476:	4b3b      	ldr	r3, [pc, #236]	; (8021564 <tcp_input+0x28c>)
 8021478:	681b      	ldr	r3, [r3, #0]
 802147a:	689b      	ldr	r3, [r3, #8]
 802147c:	4618      	mov	r0, r3
 802147e:	f7f7 fe68 	bl	8019152 <lwip_htonl>
 8021482:	4603      	mov	r3, r0
 8021484:	60a3      	str	r3, [r4, #8]
 8021486:	68a3      	ldr	r3, [r4, #8]
 8021488:	4a3f      	ldr	r2, [pc, #252]	; (8021588 <tcp_input+0x2b0>)
 802148a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 802148c:	4b35      	ldr	r3, [pc, #212]	; (8021564 <tcp_input+0x28c>)
 802148e:	681c      	ldr	r4, [r3, #0]
 8021490:	4b34      	ldr	r3, [pc, #208]	; (8021564 <tcp_input+0x28c>)
 8021492:	681b      	ldr	r3, [r3, #0]
 8021494:	89db      	ldrh	r3, [r3, #14]
 8021496:	b29b      	uxth	r3, r3
 8021498:	4618      	mov	r0, r3
 802149a:	f7f7 fe45 	bl	8019128 <lwip_htons>
 802149e:	4603      	mov	r3, r0
 80214a0:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80214a2:	4b30      	ldr	r3, [pc, #192]	; (8021564 <tcp_input+0x28c>)
 80214a4:	681b      	ldr	r3, [r3, #0]
 80214a6:	899b      	ldrh	r3, [r3, #12]
 80214a8:	b29b      	uxth	r3, r3
 80214aa:	4618      	mov	r0, r3
 80214ac:	f7f7 fe3c 	bl	8019128 <lwip_htons>
 80214b0:	4603      	mov	r3, r0
 80214b2:	b2db      	uxtb	r3, r3
 80214b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80214b8:	b2da      	uxtb	r2, r3
 80214ba:	4b34      	ldr	r3, [pc, #208]	; (802158c <tcp_input+0x2b4>)
 80214bc:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 80214be:	687b      	ldr	r3, [r7, #4]
 80214c0:	891a      	ldrh	r2, [r3, #8]
 80214c2:	4b33      	ldr	r3, [pc, #204]	; (8021590 <tcp_input+0x2b8>)
 80214c4:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80214c6:	4b31      	ldr	r3, [pc, #196]	; (802158c <tcp_input+0x2b4>)
 80214c8:	781b      	ldrb	r3, [r3, #0]
 80214ca:	f003 0303 	and.w	r3, r3, #3
 80214ce:	2b00      	cmp	r3, #0
 80214d0:	d00c      	beq.n	80214ec <tcp_input+0x214>
    tcplen++;
 80214d2:	4b2f      	ldr	r3, [pc, #188]	; (8021590 <tcp_input+0x2b8>)
 80214d4:	881b      	ldrh	r3, [r3, #0]
 80214d6:	3301      	adds	r3, #1
 80214d8:	b29a      	uxth	r2, r3
 80214da:	4b2d      	ldr	r3, [pc, #180]	; (8021590 <tcp_input+0x2b8>)
 80214dc:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 80214de:	687b      	ldr	r3, [r7, #4]
 80214e0:	891a      	ldrh	r2, [r3, #8]
 80214e2:	4b2b      	ldr	r3, [pc, #172]	; (8021590 <tcp_input+0x2b8>)
 80214e4:	881b      	ldrh	r3, [r3, #0]
 80214e6:	429a      	cmp	r2, r3
 80214e8:	f200 82d2 	bhi.w	8021a90 <tcp_input+0x7b8>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80214ec:	2300      	movs	r3, #0
 80214ee:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80214f0:	4b28      	ldr	r3, [pc, #160]	; (8021594 <tcp_input+0x2bc>)
 80214f2:	681b      	ldr	r3, [r3, #0]
 80214f4:	61fb      	str	r3, [r7, #28]
 80214f6:	e09d      	b.n	8021634 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80214f8:	69fb      	ldr	r3, [r7, #28]
 80214fa:	7d1b      	ldrb	r3, [r3, #20]
 80214fc:	2b00      	cmp	r3, #0
 80214fe:	d105      	bne.n	802150c <tcp_input+0x234>
 8021500:	4b15      	ldr	r3, [pc, #84]	; (8021558 <tcp_input+0x280>)
 8021502:	22fb      	movs	r2, #251	; 0xfb
 8021504:	4924      	ldr	r1, [pc, #144]	; (8021598 <tcp_input+0x2c0>)
 8021506:	4816      	ldr	r0, [pc, #88]	; (8021560 <tcp_input+0x288>)
 8021508:	f004 ff12 	bl	8026330 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 802150c:	69fb      	ldr	r3, [r7, #28]
 802150e:	7d1b      	ldrb	r3, [r3, #20]
 8021510:	2b0a      	cmp	r3, #10
 8021512:	d105      	bne.n	8021520 <tcp_input+0x248>
 8021514:	4b10      	ldr	r3, [pc, #64]	; (8021558 <tcp_input+0x280>)
 8021516:	22fc      	movs	r2, #252	; 0xfc
 8021518:	4920      	ldr	r1, [pc, #128]	; (802159c <tcp_input+0x2c4>)
 802151a:	4811      	ldr	r0, [pc, #68]	; (8021560 <tcp_input+0x288>)
 802151c:	f004 ff08 	bl	8026330 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8021520:	69fb      	ldr	r3, [r7, #28]
 8021522:	7d1b      	ldrb	r3, [r3, #20]
 8021524:	2b01      	cmp	r3, #1
 8021526:	d105      	bne.n	8021534 <tcp_input+0x25c>
 8021528:	4b0b      	ldr	r3, [pc, #44]	; (8021558 <tcp_input+0x280>)
 802152a:	22fd      	movs	r2, #253	; 0xfd
 802152c:	491c      	ldr	r1, [pc, #112]	; (80215a0 <tcp_input+0x2c8>)
 802152e:	480c      	ldr	r0, [pc, #48]	; (8021560 <tcp_input+0x288>)
 8021530:	f004 fefe 	bl	8026330 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8021534:	69fb      	ldr	r3, [r7, #28]
 8021536:	7a1b      	ldrb	r3, [r3, #8]
 8021538:	2b00      	cmp	r3, #0
 802153a:	d033      	beq.n	80215a4 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 802153c:	69fb      	ldr	r3, [r7, #28]
 802153e:	7a1a      	ldrb	r2, [r3, #8]
 8021540:	4b09      	ldr	r3, [pc, #36]	; (8021568 <tcp_input+0x290>)
 8021542:	685b      	ldr	r3, [r3, #4]
 8021544:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8021548:	3301      	adds	r3, #1
 802154a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 802154c:	429a      	cmp	r2, r3
 802154e:	d029      	beq.n	80215a4 <tcp_input+0x2cc>
      prev = pcb;
 8021550:	69fb      	ldr	r3, [r7, #28]
 8021552:	61bb      	str	r3, [r7, #24]
      continue;
 8021554:	e06b      	b.n	802162e <tcp_input+0x356>
 8021556:	bf00      	nop
 8021558:	08029808 	.word	0x08029808
 802155c:	0802983c 	.word	0x0802983c
 8021560:	08029854 	.word	0x08029854
 8021564:	200196d0 	.word	0x200196d0
 8021568:	2001c9fc 	.word	0x2001c9fc
 802156c:	200196d4 	.word	0x200196d4
 8021570:	200196d8 	.word	0x200196d8
 8021574:	200196d6 	.word	0x200196d6
 8021578:	0802987c 	.word	0x0802987c
 802157c:	0802988c 	.word	0x0802988c
 8021580:	08029898 	.word	0x08029898
 8021584:	200196e0 	.word	0x200196e0
 8021588:	200196e4 	.word	0x200196e4
 802158c:	200196ec 	.word	0x200196ec
 8021590:	200196ea 	.word	0x200196ea
 8021594:	20022ab4 	.word	0x20022ab4
 8021598:	080298b8 	.word	0x080298b8
 802159c:	080298e0 	.word	0x080298e0
 80215a0:	0802990c 	.word	0x0802990c
    }

    if (pcb->remote_port == tcphdr->src &&
 80215a4:	69fb      	ldr	r3, [r7, #28]
 80215a6:	8b1a      	ldrh	r2, [r3, #24]
 80215a8:	4b94      	ldr	r3, [pc, #592]	; (80217fc <tcp_input+0x524>)
 80215aa:	681b      	ldr	r3, [r3, #0]
 80215ac:	881b      	ldrh	r3, [r3, #0]
 80215ae:	b29b      	uxth	r3, r3
 80215b0:	429a      	cmp	r2, r3
 80215b2:	d13a      	bne.n	802162a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 80215b4:	69fb      	ldr	r3, [r7, #28]
 80215b6:	8ada      	ldrh	r2, [r3, #22]
 80215b8:	4b90      	ldr	r3, [pc, #576]	; (80217fc <tcp_input+0x524>)
 80215ba:	681b      	ldr	r3, [r3, #0]
 80215bc:	885b      	ldrh	r3, [r3, #2]
 80215be:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 80215c0:	429a      	cmp	r2, r3
 80215c2:	d132      	bne.n	802162a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80215c4:	69fb      	ldr	r3, [r7, #28]
 80215c6:	685a      	ldr	r2, [r3, #4]
 80215c8:	4b8d      	ldr	r3, [pc, #564]	; (8021800 <tcp_input+0x528>)
 80215ca:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 80215cc:	429a      	cmp	r2, r3
 80215ce:	d12c      	bne.n	802162a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80215d0:	69fb      	ldr	r3, [r7, #28]
 80215d2:	681a      	ldr	r2, [r3, #0]
 80215d4:	4b8a      	ldr	r3, [pc, #552]	; (8021800 <tcp_input+0x528>)
 80215d6:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80215d8:	429a      	cmp	r2, r3
 80215da:	d126      	bne.n	802162a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80215dc:	69fb      	ldr	r3, [r7, #28]
 80215de:	68da      	ldr	r2, [r3, #12]
 80215e0:	69fb      	ldr	r3, [r7, #28]
 80215e2:	429a      	cmp	r2, r3
 80215e4:	d106      	bne.n	80215f4 <tcp_input+0x31c>
 80215e6:	4b87      	ldr	r3, [pc, #540]	; (8021804 <tcp_input+0x52c>)
 80215e8:	f240 120d 	movw	r2, #269	; 0x10d
 80215ec:	4986      	ldr	r1, [pc, #536]	; (8021808 <tcp_input+0x530>)
 80215ee:	4887      	ldr	r0, [pc, #540]	; (802180c <tcp_input+0x534>)
 80215f0:	f004 fe9e 	bl	8026330 <iprintf>
      if (prev != NULL) {
 80215f4:	69bb      	ldr	r3, [r7, #24]
 80215f6:	2b00      	cmp	r3, #0
 80215f8:	d00a      	beq.n	8021610 <tcp_input+0x338>
        prev->next = pcb->next;
 80215fa:	69fb      	ldr	r3, [r7, #28]
 80215fc:	68da      	ldr	r2, [r3, #12]
 80215fe:	69bb      	ldr	r3, [r7, #24]
 8021600:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8021602:	4b83      	ldr	r3, [pc, #524]	; (8021810 <tcp_input+0x538>)
 8021604:	681a      	ldr	r2, [r3, #0]
 8021606:	69fb      	ldr	r3, [r7, #28]
 8021608:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 802160a:	4a81      	ldr	r2, [pc, #516]	; (8021810 <tcp_input+0x538>)
 802160c:	69fb      	ldr	r3, [r7, #28]
 802160e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8021610:	69fb      	ldr	r3, [r7, #28]
 8021612:	68da      	ldr	r2, [r3, #12]
 8021614:	69fb      	ldr	r3, [r7, #28]
 8021616:	429a      	cmp	r2, r3
 8021618:	d111      	bne.n	802163e <tcp_input+0x366>
 802161a:	4b7a      	ldr	r3, [pc, #488]	; (8021804 <tcp_input+0x52c>)
 802161c:	f240 1215 	movw	r2, #277	; 0x115
 8021620:	497c      	ldr	r1, [pc, #496]	; (8021814 <tcp_input+0x53c>)
 8021622:	487a      	ldr	r0, [pc, #488]	; (802180c <tcp_input+0x534>)
 8021624:	f004 fe84 	bl	8026330 <iprintf>
      break;
 8021628:	e009      	b.n	802163e <tcp_input+0x366>
    }
    prev = pcb;
 802162a:	69fb      	ldr	r3, [r7, #28]
 802162c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 802162e:	69fb      	ldr	r3, [r7, #28]
 8021630:	68db      	ldr	r3, [r3, #12]
 8021632:	61fb      	str	r3, [r7, #28]
 8021634:	69fb      	ldr	r3, [r7, #28]
 8021636:	2b00      	cmp	r3, #0
 8021638:	f47f af5e 	bne.w	80214f8 <tcp_input+0x220>
 802163c:	e000      	b.n	8021640 <tcp_input+0x368>
      break;
 802163e:	bf00      	nop
  }

  if (pcb == NULL) {
 8021640:	69fb      	ldr	r3, [r7, #28]
 8021642:	2b00      	cmp	r3, #0
 8021644:	f040 8095 	bne.w	8021772 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8021648:	4b73      	ldr	r3, [pc, #460]	; (8021818 <tcp_input+0x540>)
 802164a:	681b      	ldr	r3, [r3, #0]
 802164c:	61fb      	str	r3, [r7, #28]
 802164e:	e03f      	b.n	80216d0 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8021650:	69fb      	ldr	r3, [r7, #28]
 8021652:	7d1b      	ldrb	r3, [r3, #20]
 8021654:	2b0a      	cmp	r3, #10
 8021656:	d006      	beq.n	8021666 <tcp_input+0x38e>
 8021658:	4b6a      	ldr	r3, [pc, #424]	; (8021804 <tcp_input+0x52c>)
 802165a:	f240 121f 	movw	r2, #287	; 0x11f
 802165e:	496f      	ldr	r1, [pc, #444]	; (802181c <tcp_input+0x544>)
 8021660:	486a      	ldr	r0, [pc, #424]	; (802180c <tcp_input+0x534>)
 8021662:	f004 fe65 	bl	8026330 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8021666:	69fb      	ldr	r3, [r7, #28]
 8021668:	7a1b      	ldrb	r3, [r3, #8]
 802166a:	2b00      	cmp	r3, #0
 802166c:	d009      	beq.n	8021682 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 802166e:	69fb      	ldr	r3, [r7, #28]
 8021670:	7a1a      	ldrb	r2, [r3, #8]
 8021672:	4b63      	ldr	r3, [pc, #396]	; (8021800 <tcp_input+0x528>)
 8021674:	685b      	ldr	r3, [r3, #4]
 8021676:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 802167a:	3301      	adds	r3, #1
 802167c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 802167e:	429a      	cmp	r2, r3
 8021680:	d122      	bne.n	80216c8 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8021682:	69fb      	ldr	r3, [r7, #28]
 8021684:	8b1a      	ldrh	r2, [r3, #24]
 8021686:	4b5d      	ldr	r3, [pc, #372]	; (80217fc <tcp_input+0x524>)
 8021688:	681b      	ldr	r3, [r3, #0]
 802168a:	881b      	ldrh	r3, [r3, #0]
 802168c:	b29b      	uxth	r3, r3
 802168e:	429a      	cmp	r2, r3
 8021690:	d11b      	bne.n	80216ca <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8021692:	69fb      	ldr	r3, [r7, #28]
 8021694:	8ada      	ldrh	r2, [r3, #22]
 8021696:	4b59      	ldr	r3, [pc, #356]	; (80217fc <tcp_input+0x524>)
 8021698:	681b      	ldr	r3, [r3, #0]
 802169a:	885b      	ldrh	r3, [r3, #2]
 802169c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 802169e:	429a      	cmp	r2, r3
 80216a0:	d113      	bne.n	80216ca <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80216a2:	69fb      	ldr	r3, [r7, #28]
 80216a4:	685a      	ldr	r2, [r3, #4]
 80216a6:	4b56      	ldr	r3, [pc, #344]	; (8021800 <tcp_input+0x528>)
 80216a8:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80216aa:	429a      	cmp	r2, r3
 80216ac:	d10d      	bne.n	80216ca <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80216ae:	69fb      	ldr	r3, [r7, #28]
 80216b0:	681a      	ldr	r2, [r3, #0]
 80216b2:	4b53      	ldr	r3, [pc, #332]	; (8021800 <tcp_input+0x528>)
 80216b4:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80216b6:	429a      	cmp	r2, r3
 80216b8:	d107      	bne.n	80216ca <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 80216ba:	69f8      	ldr	r0, [r7, #28]
 80216bc:	f000 fb4e 	bl	8021d5c <tcp_timewait_input>
        }
        pbuf_free(p);
 80216c0:	6878      	ldr	r0, [r7, #4]
 80216c2:	f7fd fc31 	bl	801ef28 <pbuf_free>
        return;
 80216c6:	e1e9      	b.n	8021a9c <tcp_input+0x7c4>
        continue;
 80216c8:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80216ca:	69fb      	ldr	r3, [r7, #28]
 80216cc:	68db      	ldr	r3, [r3, #12]
 80216ce:	61fb      	str	r3, [r7, #28]
 80216d0:	69fb      	ldr	r3, [r7, #28]
 80216d2:	2b00      	cmp	r3, #0
 80216d4:	d1bc      	bne.n	8021650 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80216d6:	2300      	movs	r3, #0
 80216d8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80216da:	4b51      	ldr	r3, [pc, #324]	; (8021820 <tcp_input+0x548>)
 80216dc:	681b      	ldr	r3, [r3, #0]
 80216de:	617b      	str	r3, [r7, #20]
 80216e0:	e02a      	b.n	8021738 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80216e2:	697b      	ldr	r3, [r7, #20]
 80216e4:	7a1b      	ldrb	r3, [r3, #8]
 80216e6:	2b00      	cmp	r3, #0
 80216e8:	d00c      	beq.n	8021704 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80216ea:	697b      	ldr	r3, [r7, #20]
 80216ec:	7a1a      	ldrb	r2, [r3, #8]
 80216ee:	4b44      	ldr	r3, [pc, #272]	; (8021800 <tcp_input+0x528>)
 80216f0:	685b      	ldr	r3, [r3, #4]
 80216f2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80216f6:	3301      	adds	r3, #1
 80216f8:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80216fa:	429a      	cmp	r2, r3
 80216fc:	d002      	beq.n	8021704 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 80216fe:	697b      	ldr	r3, [r7, #20]
 8021700:	61bb      	str	r3, [r7, #24]
        continue;
 8021702:	e016      	b.n	8021732 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8021704:	697b      	ldr	r3, [r7, #20]
 8021706:	8ada      	ldrh	r2, [r3, #22]
 8021708:	4b3c      	ldr	r3, [pc, #240]	; (80217fc <tcp_input+0x524>)
 802170a:	681b      	ldr	r3, [r3, #0]
 802170c:	885b      	ldrh	r3, [r3, #2]
 802170e:	b29b      	uxth	r3, r3
 8021710:	429a      	cmp	r2, r3
 8021712:	d10c      	bne.n	802172e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8021714:	697b      	ldr	r3, [r7, #20]
 8021716:	681a      	ldr	r2, [r3, #0]
 8021718:	4b39      	ldr	r3, [pc, #228]	; (8021800 <tcp_input+0x528>)
 802171a:	695b      	ldr	r3, [r3, #20]
 802171c:	429a      	cmp	r2, r3
 802171e:	d00f      	beq.n	8021740 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8021720:	697b      	ldr	r3, [r7, #20]
 8021722:	2b00      	cmp	r3, #0
 8021724:	d00d      	beq.n	8021742 <tcp_input+0x46a>
 8021726:	697b      	ldr	r3, [r7, #20]
 8021728:	681b      	ldr	r3, [r3, #0]
 802172a:	2b00      	cmp	r3, #0
 802172c:	d009      	beq.n	8021742 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 802172e:	697b      	ldr	r3, [r7, #20]
 8021730:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8021732:	697b      	ldr	r3, [r7, #20]
 8021734:	68db      	ldr	r3, [r3, #12]
 8021736:	617b      	str	r3, [r7, #20]
 8021738:	697b      	ldr	r3, [r7, #20]
 802173a:	2b00      	cmp	r3, #0
 802173c:	d1d1      	bne.n	80216e2 <tcp_input+0x40a>
 802173e:	e000      	b.n	8021742 <tcp_input+0x46a>
            break;
 8021740:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8021742:	697b      	ldr	r3, [r7, #20]
 8021744:	2b00      	cmp	r3, #0
 8021746:	d014      	beq.n	8021772 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8021748:	69bb      	ldr	r3, [r7, #24]
 802174a:	2b00      	cmp	r3, #0
 802174c:	d00a      	beq.n	8021764 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 802174e:	697b      	ldr	r3, [r7, #20]
 8021750:	68da      	ldr	r2, [r3, #12]
 8021752:	69bb      	ldr	r3, [r7, #24]
 8021754:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8021756:	4b32      	ldr	r3, [pc, #200]	; (8021820 <tcp_input+0x548>)
 8021758:	681a      	ldr	r2, [r3, #0]
 802175a:	697b      	ldr	r3, [r7, #20]
 802175c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 802175e:	4a30      	ldr	r2, [pc, #192]	; (8021820 <tcp_input+0x548>)
 8021760:	697b      	ldr	r3, [r7, #20]
 8021762:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8021764:	6978      	ldr	r0, [r7, #20]
 8021766:	f000 f9fb 	bl	8021b60 <tcp_listen_input>
      }
      pbuf_free(p);
 802176a:	6878      	ldr	r0, [r7, #4]
 802176c:	f7fd fbdc 	bl	801ef28 <pbuf_free>
      return;
 8021770:	e194      	b.n	8021a9c <tcp_input+0x7c4>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8021772:	69fb      	ldr	r3, [r7, #28]
 8021774:	2b00      	cmp	r3, #0
 8021776:	f000 815d 	beq.w	8021a34 <tcp_input+0x75c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 802177a:	4b2a      	ldr	r3, [pc, #168]	; (8021824 <tcp_input+0x54c>)
 802177c:	2200      	movs	r2, #0
 802177e:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8021780:	687b      	ldr	r3, [r7, #4]
 8021782:	891a      	ldrh	r2, [r3, #8]
 8021784:	4b27      	ldr	r3, [pc, #156]	; (8021824 <tcp_input+0x54c>)
 8021786:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8021788:	4a26      	ldr	r2, [pc, #152]	; (8021824 <tcp_input+0x54c>)
 802178a:	687b      	ldr	r3, [r7, #4]
 802178c:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 802178e:	4b1b      	ldr	r3, [pc, #108]	; (80217fc <tcp_input+0x524>)
 8021790:	681b      	ldr	r3, [r3, #0]
 8021792:	4a24      	ldr	r2, [pc, #144]	; (8021824 <tcp_input+0x54c>)
 8021794:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8021796:	4b24      	ldr	r3, [pc, #144]	; (8021828 <tcp_input+0x550>)
 8021798:	2200      	movs	r2, #0
 802179a:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 802179c:	4b23      	ldr	r3, [pc, #140]	; (802182c <tcp_input+0x554>)
 802179e:	2200      	movs	r2, #0
 80217a0:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80217a2:	4b23      	ldr	r3, [pc, #140]	; (8021830 <tcp_input+0x558>)
 80217a4:	2200      	movs	r2, #0
 80217a6:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80217a8:	4b22      	ldr	r3, [pc, #136]	; (8021834 <tcp_input+0x55c>)
 80217aa:	781b      	ldrb	r3, [r3, #0]
 80217ac:	f003 0308 	and.w	r3, r3, #8
 80217b0:	2b00      	cmp	r3, #0
 80217b2:	d006      	beq.n	80217c2 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 80217b4:	687b      	ldr	r3, [r7, #4]
 80217b6:	7b5b      	ldrb	r3, [r3, #13]
 80217b8:	f043 0301 	orr.w	r3, r3, #1
 80217bc:	b2da      	uxtb	r2, r3
 80217be:	687b      	ldr	r3, [r7, #4]
 80217c0:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80217c2:	69fb      	ldr	r3, [r7, #28]
 80217c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80217c6:	2b00      	cmp	r3, #0
 80217c8:	d038      	beq.n	802183c <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80217ca:	69f8      	ldr	r0, [r7, #28]
 80217cc:	f7ff f89e 	bl	802090c <tcp_process_refused_data>
 80217d0:	4603      	mov	r3, r0
 80217d2:	f113 0f0d 	cmn.w	r3, #13
 80217d6:	d007      	beq.n	80217e8 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80217d8:	69fb      	ldr	r3, [r7, #28]
 80217da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80217dc:	2b00      	cmp	r3, #0
 80217de:	d02d      	beq.n	802183c <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80217e0:	4b15      	ldr	r3, [pc, #84]	; (8021838 <tcp_input+0x560>)
 80217e2:	881b      	ldrh	r3, [r3, #0]
 80217e4:	2b00      	cmp	r3, #0
 80217e6:	d029      	beq.n	802183c <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80217e8:	69fb      	ldr	r3, [r7, #28]
 80217ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80217ec:	2b00      	cmp	r3, #0
 80217ee:	f040 8103 	bne.w	80219f8 <tcp_input+0x720>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80217f2:	69f8      	ldr	r0, [r7, #28]
 80217f4:	f003 fa7e 	bl	8024cf4 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80217f8:	e0fe      	b.n	80219f8 <tcp_input+0x720>
 80217fa:	bf00      	nop
 80217fc:	200196d0 	.word	0x200196d0
 8021800:	2001c9fc 	.word	0x2001c9fc
 8021804:	08029808 	.word	0x08029808
 8021808:	08029934 	.word	0x08029934
 802180c:	08029854 	.word	0x08029854
 8021810:	20022ab4 	.word	0x20022ab4
 8021814:	08029960 	.word	0x08029960
 8021818:	20022ac4 	.word	0x20022ac4
 802181c:	0802998c 	.word	0x0802998c
 8021820:	20022abc 	.word	0x20022abc
 8021824:	200196c0 	.word	0x200196c0
 8021828:	200196f0 	.word	0x200196f0
 802182c:	200196ed 	.word	0x200196ed
 8021830:	200196e8 	.word	0x200196e8
 8021834:	200196ec 	.word	0x200196ec
 8021838:	200196ea 	.word	0x200196ea
      }
    }
    tcp_input_pcb = pcb;
 802183c:	4a99      	ldr	r2, [pc, #612]	; (8021aa4 <tcp_input+0x7cc>)
 802183e:	69fb      	ldr	r3, [r7, #28]
 8021840:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8021842:	69f8      	ldr	r0, [r7, #28]
 8021844:	f000 fb06 	bl	8021e54 <tcp_process>
 8021848:	4603      	mov	r3, r0
 802184a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 802184c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8021850:	f113 0f0d 	cmn.w	r3, #13
 8021854:	f000 80db 	beq.w	8021a0e <tcp_input+0x736>
      if (recv_flags & TF_RESET) {
 8021858:	4b93      	ldr	r3, [pc, #588]	; (8021aa8 <tcp_input+0x7d0>)
 802185a:	781b      	ldrb	r3, [r3, #0]
 802185c:	f003 0308 	and.w	r3, r3, #8
 8021860:	2b00      	cmp	r3, #0
 8021862:	d015      	beq.n	8021890 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8021864:	69fb      	ldr	r3, [r7, #28]
 8021866:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 802186a:	2b00      	cmp	r3, #0
 802186c:	d008      	beq.n	8021880 <tcp_input+0x5a8>
 802186e:	69fb      	ldr	r3, [r7, #28]
 8021870:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8021874:	69fa      	ldr	r2, [r7, #28]
 8021876:	6912      	ldr	r2, [r2, #16]
 8021878:	f06f 010d 	mvn.w	r1, #13
 802187c:	4610      	mov	r0, r2
 802187e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8021880:	69f9      	ldr	r1, [r7, #28]
 8021882:	488a      	ldr	r0, [pc, #552]	; (8021aac <tcp_input+0x7d4>)
 8021884:	f7ff fbd2 	bl	802102c <tcp_pcb_remove>
        tcp_free(pcb);
 8021888:	69f8      	ldr	r0, [r7, #28]
 802188a:	f7fd ff63 	bl	801f754 <tcp_free>
 802188e:	e0be      	b.n	8021a0e <tcp_input+0x736>
      } else {
        err = ERR_OK;
 8021890:	2300      	movs	r3, #0
 8021892:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8021894:	4b86      	ldr	r3, [pc, #536]	; (8021ab0 <tcp_input+0x7d8>)
 8021896:	881b      	ldrh	r3, [r3, #0]
 8021898:	2b00      	cmp	r3, #0
 802189a:	d01b      	beq.n	80218d4 <tcp_input+0x5fc>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 802189c:	4b84      	ldr	r3, [pc, #528]	; (8021ab0 <tcp_input+0x7d8>)
 802189e:	881b      	ldrh	r3, [r3, #0]
 80218a0:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80218a2:	69fb      	ldr	r3, [r7, #28]
 80218a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80218a6:	2b00      	cmp	r3, #0
 80218a8:	d009      	beq.n	80218be <tcp_input+0x5e6>
 80218aa:	69fb      	ldr	r3, [r7, #28]
 80218ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80218ae:	69fa      	ldr	r2, [r7, #28]
 80218b0:	6910      	ldr	r0, [r2, #16]
 80218b2:	89fa      	ldrh	r2, [r7, #14]
 80218b4:	69f9      	ldr	r1, [r7, #28]
 80218b6:	4798      	blx	r3
 80218b8:	4603      	mov	r3, r0
 80218ba:	74fb      	strb	r3, [r7, #19]
 80218bc:	e001      	b.n	80218c2 <tcp_input+0x5ea>
 80218be:	2300      	movs	r3, #0
 80218c0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80218c2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80218c6:	f113 0f0d 	cmn.w	r3, #13
 80218ca:	f000 8097 	beq.w	80219fc <tcp_input+0x724>
              goto aborted;
            }
          }
          recv_acked = 0;
 80218ce:	4b78      	ldr	r3, [pc, #480]	; (8021ab0 <tcp_input+0x7d8>)
 80218d0:	2200      	movs	r2, #0
 80218d2:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80218d4:	69f8      	ldr	r0, [r7, #28]
 80218d6:	f000 f903 	bl	8021ae0 <tcp_input_delayed_close>
 80218da:	4603      	mov	r3, r0
 80218dc:	2b00      	cmp	r3, #0
 80218de:	f040 808f 	bne.w	8021a00 <tcp_input+0x728>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80218e2:	4b74      	ldr	r3, [pc, #464]	; (8021ab4 <tcp_input+0x7dc>)
 80218e4:	681b      	ldr	r3, [r3, #0]
 80218e6:	2b00      	cmp	r3, #0
 80218e8:	d041      	beq.n	802196e <tcp_input+0x696>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80218ea:	69fb      	ldr	r3, [r7, #28]
 80218ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80218ee:	2b00      	cmp	r3, #0
 80218f0:	d006      	beq.n	8021900 <tcp_input+0x628>
 80218f2:	4b71      	ldr	r3, [pc, #452]	; (8021ab8 <tcp_input+0x7e0>)
 80218f4:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80218f8:	4970      	ldr	r1, [pc, #448]	; (8021abc <tcp_input+0x7e4>)
 80218fa:	4871      	ldr	r0, [pc, #452]	; (8021ac0 <tcp_input+0x7e8>)
 80218fc:	f004 fd18 	bl	8026330 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8021900:	69fb      	ldr	r3, [r7, #28]
 8021902:	8b5b      	ldrh	r3, [r3, #26]
 8021904:	f003 0310 	and.w	r3, r3, #16
 8021908:	2b00      	cmp	r3, #0
 802190a:	d008      	beq.n	802191e <tcp_input+0x646>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 802190c:	4b69      	ldr	r3, [pc, #420]	; (8021ab4 <tcp_input+0x7dc>)
 802190e:	681b      	ldr	r3, [r3, #0]
 8021910:	4618      	mov	r0, r3
 8021912:	f7fd fb09 	bl	801ef28 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8021916:	69f8      	ldr	r0, [r7, #28]
 8021918:	f7fe f9f4 	bl	801fd04 <tcp_abort>
            goto aborted;
 802191c:	e077      	b.n	8021a0e <tcp_input+0x736>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 802191e:	69fb      	ldr	r3, [r7, #28]
 8021920:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8021924:	2b00      	cmp	r3, #0
 8021926:	d00c      	beq.n	8021942 <tcp_input+0x66a>
 8021928:	69fb      	ldr	r3, [r7, #28]
 802192a:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 802192e:	69fb      	ldr	r3, [r7, #28]
 8021930:	6918      	ldr	r0, [r3, #16]
 8021932:	4b60      	ldr	r3, [pc, #384]	; (8021ab4 <tcp_input+0x7dc>)
 8021934:	681a      	ldr	r2, [r3, #0]
 8021936:	2300      	movs	r3, #0
 8021938:	69f9      	ldr	r1, [r7, #28]
 802193a:	47a0      	blx	r4
 802193c:	4603      	mov	r3, r0
 802193e:	74fb      	strb	r3, [r7, #19]
 8021940:	e008      	b.n	8021954 <tcp_input+0x67c>
 8021942:	4b5c      	ldr	r3, [pc, #368]	; (8021ab4 <tcp_input+0x7dc>)
 8021944:	681a      	ldr	r2, [r3, #0]
 8021946:	2300      	movs	r3, #0
 8021948:	69f9      	ldr	r1, [r7, #28]
 802194a:	2000      	movs	r0, #0
 802194c:	f7ff f8a6 	bl	8020a9c <tcp_recv_null>
 8021950:	4603      	mov	r3, r0
 8021952:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8021954:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8021958:	f113 0f0d 	cmn.w	r3, #13
 802195c:	d052      	beq.n	8021a04 <tcp_input+0x72c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 802195e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8021962:	2b00      	cmp	r3, #0
 8021964:	d003      	beq.n	802196e <tcp_input+0x696>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8021966:	4b53      	ldr	r3, [pc, #332]	; (8021ab4 <tcp_input+0x7dc>)
 8021968:	681a      	ldr	r2, [r3, #0]
 802196a:	69fb      	ldr	r3, [r7, #28]
 802196c:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 802196e:	4b4e      	ldr	r3, [pc, #312]	; (8021aa8 <tcp_input+0x7d0>)
 8021970:	781b      	ldrb	r3, [r3, #0]
 8021972:	f003 0320 	and.w	r3, r3, #32
 8021976:	2b00      	cmp	r3, #0
 8021978:	d031      	beq.n	80219de <tcp_input+0x706>
          if (pcb->refused_data != NULL) {
 802197a:	69fb      	ldr	r3, [r7, #28]
 802197c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 802197e:	2b00      	cmp	r3, #0
 8021980:	d009      	beq.n	8021996 <tcp_input+0x6be>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8021982:	69fb      	ldr	r3, [r7, #28]
 8021984:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8021986:	69fa      	ldr	r2, [r7, #28]
 8021988:	6f52      	ldr	r2, [r2, #116]	; 0x74
 802198a:	7b52      	ldrb	r2, [r2, #13]
 802198c:	f042 0220 	orr.w	r2, r2, #32
 8021990:	b2d2      	uxtb	r2, r2
 8021992:	735a      	strb	r2, [r3, #13]
 8021994:	e023      	b.n	80219de <tcp_input+0x706>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8021996:	69fb      	ldr	r3, [r7, #28]
 8021998:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802199a:	f640 3268 	movw	r2, #2920	; 0xb68
 802199e:	4293      	cmp	r3, r2
 80219a0:	d005      	beq.n	80219ae <tcp_input+0x6d6>
              pcb->rcv_wnd++;
 80219a2:	69fb      	ldr	r3, [r7, #28]
 80219a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80219a6:	3301      	adds	r3, #1
 80219a8:	b29a      	uxth	r2, r3
 80219aa:	69fb      	ldr	r3, [r7, #28]
 80219ac:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80219ae:	69fb      	ldr	r3, [r7, #28]
 80219b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80219b4:	2b00      	cmp	r3, #0
 80219b6:	d00b      	beq.n	80219d0 <tcp_input+0x6f8>
 80219b8:	69fb      	ldr	r3, [r7, #28]
 80219ba:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 80219be:	69fb      	ldr	r3, [r7, #28]
 80219c0:	6918      	ldr	r0, [r3, #16]
 80219c2:	2300      	movs	r3, #0
 80219c4:	2200      	movs	r2, #0
 80219c6:	69f9      	ldr	r1, [r7, #28]
 80219c8:	47a0      	blx	r4
 80219ca:	4603      	mov	r3, r0
 80219cc:	74fb      	strb	r3, [r7, #19]
 80219ce:	e001      	b.n	80219d4 <tcp_input+0x6fc>
 80219d0:	2300      	movs	r3, #0
 80219d2:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80219d4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80219d8:	f113 0f0d 	cmn.w	r3, #13
 80219dc:	d014      	beq.n	8021a08 <tcp_input+0x730>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80219de:	4b31      	ldr	r3, [pc, #196]	; (8021aa4 <tcp_input+0x7cc>)
 80219e0:	2200      	movs	r2, #0
 80219e2:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80219e4:	69f8      	ldr	r0, [r7, #28]
 80219e6:	f000 f87b 	bl	8021ae0 <tcp_input_delayed_close>
 80219ea:	4603      	mov	r3, r0
 80219ec:	2b00      	cmp	r3, #0
 80219ee:	d10d      	bne.n	8021a0c <tcp_input+0x734>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80219f0:	69f8      	ldr	r0, [r7, #28]
 80219f2:	f002 fb61 	bl	80240b8 <tcp_output>
 80219f6:	e00a      	b.n	8021a0e <tcp_input+0x736>
        goto aborted;
 80219f8:	bf00      	nop
 80219fa:	e008      	b.n	8021a0e <tcp_input+0x736>
              goto aborted;
 80219fc:	bf00      	nop
 80219fe:	e006      	b.n	8021a0e <tcp_input+0x736>
          goto aborted;
 8021a00:	bf00      	nop
 8021a02:	e004      	b.n	8021a0e <tcp_input+0x736>
            goto aborted;
 8021a04:	bf00      	nop
 8021a06:	e002      	b.n	8021a0e <tcp_input+0x736>
              goto aborted;
 8021a08:	bf00      	nop
 8021a0a:	e000      	b.n	8021a0e <tcp_input+0x736>
          goto aborted;
 8021a0c:	bf00      	nop
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
    tcp_input_pcb = NULL;
 8021a0e:	4b25      	ldr	r3, [pc, #148]	; (8021aa4 <tcp_input+0x7cc>)
 8021a10:	2200      	movs	r2, #0
 8021a12:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8021a14:	4b27      	ldr	r3, [pc, #156]	; (8021ab4 <tcp_input+0x7dc>)
 8021a16:	2200      	movs	r2, #0
 8021a18:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8021a1a:	4b2a      	ldr	r3, [pc, #168]	; (8021ac4 <tcp_input+0x7ec>)
 8021a1c:	685b      	ldr	r3, [r3, #4]
 8021a1e:	2b00      	cmp	r3, #0
 8021a20:	d03b      	beq.n	8021a9a <tcp_input+0x7c2>
      pbuf_free(inseg.p);
 8021a22:	4b28      	ldr	r3, [pc, #160]	; (8021ac4 <tcp_input+0x7ec>)
 8021a24:	685b      	ldr	r3, [r3, #4]
 8021a26:	4618      	mov	r0, r3
 8021a28:	f7fd fa7e 	bl	801ef28 <pbuf_free>
      inseg.p = NULL;
 8021a2c:	4b25      	ldr	r3, [pc, #148]	; (8021ac4 <tcp_input+0x7ec>)
 8021a2e:	2200      	movs	r2, #0
 8021a30:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8021a32:	e032      	b.n	8021a9a <tcp_input+0x7c2>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8021a34:	4b24      	ldr	r3, [pc, #144]	; (8021ac8 <tcp_input+0x7f0>)
 8021a36:	681b      	ldr	r3, [r3, #0]
 8021a38:	899b      	ldrh	r3, [r3, #12]
 8021a3a:	b29b      	uxth	r3, r3
 8021a3c:	4618      	mov	r0, r3
 8021a3e:	f7f7 fb73 	bl	8019128 <lwip_htons>
 8021a42:	4603      	mov	r3, r0
 8021a44:	b2db      	uxtb	r3, r3
 8021a46:	f003 0304 	and.w	r3, r3, #4
 8021a4a:	2b00      	cmp	r3, #0
 8021a4c:	d118      	bne.n	8021a80 <tcp_input+0x7a8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8021a4e:	4b1f      	ldr	r3, [pc, #124]	; (8021acc <tcp_input+0x7f4>)
 8021a50:	6819      	ldr	r1, [r3, #0]
 8021a52:	4b1f      	ldr	r3, [pc, #124]	; (8021ad0 <tcp_input+0x7f8>)
 8021a54:	881b      	ldrh	r3, [r3, #0]
 8021a56:	461a      	mov	r2, r3
 8021a58:	4b1e      	ldr	r3, [pc, #120]	; (8021ad4 <tcp_input+0x7fc>)
 8021a5a:	681b      	ldr	r3, [r3, #0]
 8021a5c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8021a5e:	4b1a      	ldr	r3, [pc, #104]	; (8021ac8 <tcp_input+0x7f0>)
 8021a60:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8021a62:	885b      	ldrh	r3, [r3, #2]
 8021a64:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8021a66:	4a18      	ldr	r2, [pc, #96]	; (8021ac8 <tcp_input+0x7f0>)
 8021a68:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8021a6a:	8812      	ldrh	r2, [r2, #0]
 8021a6c:	b292      	uxth	r2, r2
 8021a6e:	9202      	str	r2, [sp, #8]
 8021a70:	9301      	str	r3, [sp, #4]
 8021a72:	4b19      	ldr	r3, [pc, #100]	; (8021ad8 <tcp_input+0x800>)
 8021a74:	9300      	str	r3, [sp, #0]
 8021a76:	4b19      	ldr	r3, [pc, #100]	; (8021adc <tcp_input+0x804>)
 8021a78:	4602      	mov	r2, r0
 8021a7a:	2000      	movs	r0, #0
 8021a7c:	f003 f8e8 	bl	8024c50 <tcp_rst>
    pbuf_free(p);
 8021a80:	6878      	ldr	r0, [r7, #4]
 8021a82:	f7fd fa51 	bl	801ef28 <pbuf_free>
  return;
 8021a86:	e008      	b.n	8021a9a <tcp_input+0x7c2>
    goto dropped;
 8021a88:	bf00      	nop
 8021a8a:	e002      	b.n	8021a92 <tcp_input+0x7ba>
      goto dropped;
 8021a8c:	bf00      	nop
 8021a8e:	e000      	b.n	8021a92 <tcp_input+0x7ba>
      goto dropped;
 8021a90:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8021a92:	6878      	ldr	r0, [r7, #4]
 8021a94:	f7fd fa48 	bl	801ef28 <pbuf_free>
 8021a98:	e000      	b.n	8021a9c <tcp_input+0x7c4>
  return;
 8021a9a:	bf00      	nop
}
 8021a9c:	3724      	adds	r7, #36	; 0x24
 8021a9e:	46bd      	mov	sp, r7
 8021aa0:	bd90      	pop	{r4, r7, pc}
 8021aa2:	bf00      	nop
 8021aa4:	20022ac8 	.word	0x20022ac8
 8021aa8:	200196ed 	.word	0x200196ed
 8021aac:	20022ab4 	.word	0x20022ab4
 8021ab0:	200196e8 	.word	0x200196e8
 8021ab4:	200196f0 	.word	0x200196f0
 8021ab8:	08029808 	.word	0x08029808
 8021abc:	080299bc 	.word	0x080299bc
 8021ac0:	08029854 	.word	0x08029854
 8021ac4:	200196c0 	.word	0x200196c0
 8021ac8:	200196d0 	.word	0x200196d0
 8021acc:	200196e4 	.word	0x200196e4
 8021ad0:	200196ea 	.word	0x200196ea
 8021ad4:	200196e0 	.word	0x200196e0
 8021ad8:	2001ca0c 	.word	0x2001ca0c
 8021adc:	2001ca10 	.word	0x2001ca10

08021ae0 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8021ae0:	b580      	push	{r7, lr}
 8021ae2:	b082      	sub	sp, #8
 8021ae4:	af00      	add	r7, sp, #0
 8021ae6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8021ae8:	687b      	ldr	r3, [r7, #4]
 8021aea:	2b00      	cmp	r3, #0
 8021aec:	d106      	bne.n	8021afc <tcp_input_delayed_close+0x1c>
 8021aee:	4b17      	ldr	r3, [pc, #92]	; (8021b4c <tcp_input_delayed_close+0x6c>)
 8021af0:	f240 225a 	movw	r2, #602	; 0x25a
 8021af4:	4916      	ldr	r1, [pc, #88]	; (8021b50 <tcp_input_delayed_close+0x70>)
 8021af6:	4817      	ldr	r0, [pc, #92]	; (8021b54 <tcp_input_delayed_close+0x74>)
 8021af8:	f004 fc1a 	bl	8026330 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8021afc:	4b16      	ldr	r3, [pc, #88]	; (8021b58 <tcp_input_delayed_close+0x78>)
 8021afe:	781b      	ldrb	r3, [r3, #0]
 8021b00:	f003 0310 	and.w	r3, r3, #16
 8021b04:	2b00      	cmp	r3, #0
 8021b06:	d01c      	beq.n	8021b42 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8021b08:	687b      	ldr	r3, [r7, #4]
 8021b0a:	8b5b      	ldrh	r3, [r3, #26]
 8021b0c:	f003 0310 	and.w	r3, r3, #16
 8021b10:	2b00      	cmp	r3, #0
 8021b12:	d10d      	bne.n	8021b30 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8021b14:	687b      	ldr	r3, [r7, #4]
 8021b16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8021b1a:	2b00      	cmp	r3, #0
 8021b1c:	d008      	beq.n	8021b30 <tcp_input_delayed_close+0x50>
 8021b1e:	687b      	ldr	r3, [r7, #4]
 8021b20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8021b24:	687a      	ldr	r2, [r7, #4]
 8021b26:	6912      	ldr	r2, [r2, #16]
 8021b28:	f06f 010e 	mvn.w	r1, #14
 8021b2c:	4610      	mov	r0, r2
 8021b2e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8021b30:	6879      	ldr	r1, [r7, #4]
 8021b32:	480a      	ldr	r0, [pc, #40]	; (8021b5c <tcp_input_delayed_close+0x7c>)
 8021b34:	f7ff fa7a 	bl	802102c <tcp_pcb_remove>
    tcp_free(pcb);
 8021b38:	6878      	ldr	r0, [r7, #4]
 8021b3a:	f7fd fe0b 	bl	801f754 <tcp_free>
    return 1;
 8021b3e:	2301      	movs	r3, #1
 8021b40:	e000      	b.n	8021b44 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8021b42:	2300      	movs	r3, #0
}
 8021b44:	4618      	mov	r0, r3
 8021b46:	3708      	adds	r7, #8
 8021b48:	46bd      	mov	sp, r7
 8021b4a:	bd80      	pop	{r7, pc}
 8021b4c:	08029808 	.word	0x08029808
 8021b50:	080299d8 	.word	0x080299d8
 8021b54:	08029854 	.word	0x08029854
 8021b58:	200196ed 	.word	0x200196ed
 8021b5c:	20022ab4 	.word	0x20022ab4

08021b60 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8021b60:	b590      	push	{r4, r7, lr}
 8021b62:	b08b      	sub	sp, #44	; 0x2c
 8021b64:	af04      	add	r7, sp, #16
 8021b66:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8021b68:	4b6f      	ldr	r3, [pc, #444]	; (8021d28 <tcp_listen_input+0x1c8>)
 8021b6a:	781b      	ldrb	r3, [r3, #0]
 8021b6c:	f003 0304 	and.w	r3, r3, #4
 8021b70:	2b00      	cmp	r3, #0
 8021b72:	f040 80d3 	bne.w	8021d1c <tcp_listen_input+0x1bc>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8021b76:	687b      	ldr	r3, [r7, #4]
 8021b78:	2b00      	cmp	r3, #0
 8021b7a:	d106      	bne.n	8021b8a <tcp_listen_input+0x2a>
 8021b7c:	4b6b      	ldr	r3, [pc, #428]	; (8021d2c <tcp_listen_input+0x1cc>)
 8021b7e:	f240 2281 	movw	r2, #641	; 0x281
 8021b82:	496b      	ldr	r1, [pc, #428]	; (8021d30 <tcp_listen_input+0x1d0>)
 8021b84:	486b      	ldr	r0, [pc, #428]	; (8021d34 <tcp_listen_input+0x1d4>)
 8021b86:	f004 fbd3 	bl	8026330 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8021b8a:	4b67      	ldr	r3, [pc, #412]	; (8021d28 <tcp_listen_input+0x1c8>)
 8021b8c:	781b      	ldrb	r3, [r3, #0]
 8021b8e:	f003 0310 	and.w	r3, r3, #16
 8021b92:	2b00      	cmp	r3, #0
 8021b94:	d019      	beq.n	8021bca <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8021b96:	4b68      	ldr	r3, [pc, #416]	; (8021d38 <tcp_listen_input+0x1d8>)
 8021b98:	6819      	ldr	r1, [r3, #0]
 8021b9a:	4b68      	ldr	r3, [pc, #416]	; (8021d3c <tcp_listen_input+0x1dc>)
 8021b9c:	881b      	ldrh	r3, [r3, #0]
 8021b9e:	461a      	mov	r2, r3
 8021ba0:	4b67      	ldr	r3, [pc, #412]	; (8021d40 <tcp_listen_input+0x1e0>)
 8021ba2:	681b      	ldr	r3, [r3, #0]
 8021ba4:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8021ba6:	4b67      	ldr	r3, [pc, #412]	; (8021d44 <tcp_listen_input+0x1e4>)
 8021ba8:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8021baa:	885b      	ldrh	r3, [r3, #2]
 8021bac:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8021bae:	4a65      	ldr	r2, [pc, #404]	; (8021d44 <tcp_listen_input+0x1e4>)
 8021bb0:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8021bb2:	8812      	ldrh	r2, [r2, #0]
 8021bb4:	b292      	uxth	r2, r2
 8021bb6:	9202      	str	r2, [sp, #8]
 8021bb8:	9301      	str	r3, [sp, #4]
 8021bba:	4b63      	ldr	r3, [pc, #396]	; (8021d48 <tcp_listen_input+0x1e8>)
 8021bbc:	9300      	str	r3, [sp, #0]
 8021bbe:	4b63      	ldr	r3, [pc, #396]	; (8021d4c <tcp_listen_input+0x1ec>)
 8021bc0:	4602      	mov	r2, r0
 8021bc2:	6878      	ldr	r0, [r7, #4]
 8021bc4:	f003 f844 	bl	8024c50 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8021bc8:	e0aa      	b.n	8021d20 <tcp_listen_input+0x1c0>
  } else if (flags & TCP_SYN) {
 8021bca:	4b57      	ldr	r3, [pc, #348]	; (8021d28 <tcp_listen_input+0x1c8>)
 8021bcc:	781b      	ldrb	r3, [r3, #0]
 8021bce:	f003 0302 	and.w	r3, r3, #2
 8021bd2:	2b00      	cmp	r3, #0
 8021bd4:	f000 80a4 	beq.w	8021d20 <tcp_listen_input+0x1c0>
    npcb = tcp_alloc(pcb->prio);
 8021bd8:	687b      	ldr	r3, [r7, #4]
 8021bda:	7d5b      	ldrb	r3, [r3, #21]
 8021bdc:	4618      	mov	r0, r3
 8021bde:	f7ff f881 	bl	8020ce4 <tcp_alloc>
 8021be2:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8021be4:	697b      	ldr	r3, [r7, #20]
 8021be6:	2b00      	cmp	r3, #0
 8021be8:	d111      	bne.n	8021c0e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8021bea:	687b      	ldr	r3, [r7, #4]
 8021bec:	699b      	ldr	r3, [r3, #24]
 8021bee:	2b00      	cmp	r3, #0
 8021bf0:	d00a      	beq.n	8021c08 <tcp_listen_input+0xa8>
 8021bf2:	687b      	ldr	r3, [r7, #4]
 8021bf4:	699b      	ldr	r3, [r3, #24]
 8021bf6:	687a      	ldr	r2, [r7, #4]
 8021bf8:	6910      	ldr	r0, [r2, #16]
 8021bfa:	f04f 32ff 	mov.w	r2, #4294967295
 8021bfe:	2100      	movs	r1, #0
 8021c00:	4798      	blx	r3
 8021c02:	4603      	mov	r3, r0
 8021c04:	74fb      	strb	r3, [r7, #19]
      return;
 8021c06:	e08c      	b.n	8021d22 <tcp_listen_input+0x1c2>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8021c08:	23f0      	movs	r3, #240	; 0xf0
 8021c0a:	74fb      	strb	r3, [r7, #19]
      return;
 8021c0c:	e089      	b.n	8021d22 <tcp_listen_input+0x1c2>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8021c0e:	4b50      	ldr	r3, [pc, #320]	; (8021d50 <tcp_listen_input+0x1f0>)
 8021c10:	695a      	ldr	r2, [r3, #20]
 8021c12:	697b      	ldr	r3, [r7, #20]
 8021c14:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8021c16:	4b4e      	ldr	r3, [pc, #312]	; (8021d50 <tcp_listen_input+0x1f0>)
 8021c18:	691a      	ldr	r2, [r3, #16]
 8021c1a:	697b      	ldr	r3, [r7, #20]
 8021c1c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8021c1e:	687b      	ldr	r3, [r7, #4]
 8021c20:	8ada      	ldrh	r2, [r3, #22]
 8021c22:	697b      	ldr	r3, [r7, #20]
 8021c24:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8021c26:	4b47      	ldr	r3, [pc, #284]	; (8021d44 <tcp_listen_input+0x1e4>)
 8021c28:	681b      	ldr	r3, [r3, #0]
 8021c2a:	881b      	ldrh	r3, [r3, #0]
 8021c2c:	b29a      	uxth	r2, r3
 8021c2e:	697b      	ldr	r3, [r7, #20]
 8021c30:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8021c32:	697b      	ldr	r3, [r7, #20]
 8021c34:	2203      	movs	r2, #3
 8021c36:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8021c38:	4b41      	ldr	r3, [pc, #260]	; (8021d40 <tcp_listen_input+0x1e0>)
 8021c3a:	681b      	ldr	r3, [r3, #0]
 8021c3c:	1c5a      	adds	r2, r3, #1
 8021c3e:	697b      	ldr	r3, [r7, #20]
 8021c40:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8021c42:	697b      	ldr	r3, [r7, #20]
 8021c44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8021c46:	697b      	ldr	r3, [r7, #20]
 8021c48:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8021c4a:	6978      	ldr	r0, [r7, #20]
 8021c4c:	f7ff fa74 	bl	8021138 <tcp_next_iss>
 8021c50:	60f8      	str	r0, [r7, #12]
    npcb->snd_wl2 = iss;
 8021c52:	697b      	ldr	r3, [r7, #20]
 8021c54:	68fa      	ldr	r2, [r7, #12]
 8021c56:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8021c58:	697b      	ldr	r3, [r7, #20]
 8021c5a:	68fa      	ldr	r2, [r7, #12]
 8021c5c:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8021c5e:	697b      	ldr	r3, [r7, #20]
 8021c60:	68fa      	ldr	r2, [r7, #12]
 8021c62:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8021c64:	697b      	ldr	r3, [r7, #20]
 8021c66:	68fa      	ldr	r2, [r7, #12]
 8021c68:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8021c6a:	4b35      	ldr	r3, [pc, #212]	; (8021d40 <tcp_listen_input+0x1e0>)
 8021c6c:	681b      	ldr	r3, [r3, #0]
 8021c6e:	1e5a      	subs	r2, r3, #1
 8021c70:	697b      	ldr	r3, [r7, #20]
 8021c72:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8021c74:	687b      	ldr	r3, [r7, #4]
 8021c76:	691a      	ldr	r2, [r3, #16]
 8021c78:	697b      	ldr	r3, [r7, #20]
 8021c7a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8021c7c:	697b      	ldr	r3, [r7, #20]
 8021c7e:	687a      	ldr	r2, [r7, #4]
 8021c80:	679a      	str	r2, [r3, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8021c82:	687b      	ldr	r3, [r7, #4]
 8021c84:	7a5b      	ldrb	r3, [r3, #9]
 8021c86:	f003 030c 	and.w	r3, r3, #12
 8021c8a:	b2da      	uxtb	r2, r3
 8021c8c:	697b      	ldr	r3, [r7, #20]
 8021c8e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8021c90:	687b      	ldr	r3, [r7, #4]
 8021c92:	7a1a      	ldrb	r2, [r3, #8]
 8021c94:	697b      	ldr	r3, [r7, #20]
 8021c96:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8021c98:	4b2e      	ldr	r3, [pc, #184]	; (8021d54 <tcp_listen_input+0x1f4>)
 8021c9a:	681a      	ldr	r2, [r3, #0]
 8021c9c:	697b      	ldr	r3, [r7, #20]
 8021c9e:	60da      	str	r2, [r3, #12]
 8021ca0:	4a2c      	ldr	r2, [pc, #176]	; (8021d54 <tcp_listen_input+0x1f4>)
 8021ca2:	697b      	ldr	r3, [r7, #20]
 8021ca4:	6013      	str	r3, [r2, #0]
 8021ca6:	f003 f997 	bl	8024fd8 <tcp_timer_needed>
 8021caa:	4b2b      	ldr	r3, [pc, #172]	; (8021d58 <tcp_listen_input+0x1f8>)
 8021cac:	2201      	movs	r2, #1
 8021cae:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8021cb0:	6978      	ldr	r0, [r7, #20]
 8021cb2:	f001 f9dd 	bl	8023070 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8021cb6:	4b23      	ldr	r3, [pc, #140]	; (8021d44 <tcp_listen_input+0x1e4>)
 8021cb8:	681b      	ldr	r3, [r3, #0]
 8021cba:	89db      	ldrh	r3, [r3, #14]
 8021cbc:	b29a      	uxth	r2, r3
 8021cbe:	697b      	ldr	r3, [r7, #20]
 8021cc0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8021cc4:	697b      	ldr	r3, [r7, #20]
 8021cc6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8021cca:	697b      	ldr	r3, [r7, #20]
 8021ccc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8021cd0:	697b      	ldr	r3, [r7, #20]
 8021cd2:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8021cd4:	697b      	ldr	r3, [r7, #20]
 8021cd6:	3304      	adds	r3, #4
 8021cd8:	4618      	mov	r0, r3
 8021cda:	f7fa fd99 	bl	801c810 <ip4_route>
 8021cde:	4601      	mov	r1, r0
 8021ce0:	697b      	ldr	r3, [r7, #20]
 8021ce2:	3304      	adds	r3, #4
 8021ce4:	461a      	mov	r2, r3
 8021ce6:	4620      	mov	r0, r4
 8021ce8:	f7ff fa4c 	bl	8021184 <tcp_eff_send_mss_netif>
 8021cec:	4603      	mov	r3, r0
 8021cee:	461a      	mov	r2, r3
 8021cf0:	697b      	ldr	r3, [r7, #20]
 8021cf2:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8021cf4:	2112      	movs	r1, #18
 8021cf6:	6978      	ldr	r0, [r7, #20]
 8021cf8:	f002 f8ee 	bl	8023ed8 <tcp_enqueue_flags>
 8021cfc:	4603      	mov	r3, r0
 8021cfe:	72fb      	strb	r3, [r7, #11]
    if (rc != ERR_OK) {
 8021d00:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8021d04:	2b00      	cmp	r3, #0
 8021d06:	d004      	beq.n	8021d12 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8021d08:	2100      	movs	r1, #0
 8021d0a:	6978      	ldr	r0, [r7, #20]
 8021d0c:	f7fd ff46 	bl	801fb9c <tcp_abandon>
      return;
 8021d10:	e007      	b.n	8021d22 <tcp_listen_input+0x1c2>
    tcp_output(npcb);
 8021d12:	6978      	ldr	r0, [r7, #20]
 8021d14:	f002 f9d0 	bl	80240b8 <tcp_output>
  return;
 8021d18:	bf00      	nop
 8021d1a:	e001      	b.n	8021d20 <tcp_listen_input+0x1c0>
    return;
 8021d1c:	bf00      	nop
 8021d1e:	e000      	b.n	8021d22 <tcp_listen_input+0x1c2>
  return;
 8021d20:	bf00      	nop
}
 8021d22:	371c      	adds	r7, #28
 8021d24:	46bd      	mov	sp, r7
 8021d26:	bd90      	pop	{r4, r7, pc}
 8021d28:	200196ec 	.word	0x200196ec
 8021d2c:	08029808 	.word	0x08029808
 8021d30:	08029a00 	.word	0x08029a00
 8021d34:	08029854 	.word	0x08029854
 8021d38:	200196e4 	.word	0x200196e4
 8021d3c:	200196ea 	.word	0x200196ea
 8021d40:	200196e0 	.word	0x200196e0
 8021d44:	200196d0 	.word	0x200196d0
 8021d48:	2001ca0c 	.word	0x2001ca0c
 8021d4c:	2001ca10 	.word	0x2001ca10
 8021d50:	2001c9fc 	.word	0x2001c9fc
 8021d54:	20022ab4 	.word	0x20022ab4
 8021d58:	20022ab0 	.word	0x20022ab0

08021d5c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8021d5c:	b580      	push	{r7, lr}
 8021d5e:	b086      	sub	sp, #24
 8021d60:	af04      	add	r7, sp, #16
 8021d62:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8021d64:	4b30      	ldr	r3, [pc, #192]	; (8021e28 <tcp_timewait_input+0xcc>)
 8021d66:	781b      	ldrb	r3, [r3, #0]
 8021d68:	f003 0304 	and.w	r3, r3, #4
 8021d6c:	2b00      	cmp	r3, #0
 8021d6e:	d154      	bne.n	8021e1a <tcp_timewait_input+0xbe>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8021d70:	687b      	ldr	r3, [r7, #4]
 8021d72:	2b00      	cmp	r3, #0
 8021d74:	d106      	bne.n	8021d84 <tcp_timewait_input+0x28>
 8021d76:	4b2d      	ldr	r3, [pc, #180]	; (8021e2c <tcp_timewait_input+0xd0>)
 8021d78:	f240 22ee 	movw	r2, #750	; 0x2ee
 8021d7c:	492c      	ldr	r1, [pc, #176]	; (8021e30 <tcp_timewait_input+0xd4>)
 8021d7e:	482d      	ldr	r0, [pc, #180]	; (8021e34 <tcp_timewait_input+0xd8>)
 8021d80:	f004 fad6 	bl	8026330 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8021d84:	4b28      	ldr	r3, [pc, #160]	; (8021e28 <tcp_timewait_input+0xcc>)
 8021d86:	781b      	ldrb	r3, [r3, #0]
 8021d88:	f003 0302 	and.w	r3, r3, #2
 8021d8c:	2b00      	cmp	r3, #0
 8021d8e:	d02a      	beq.n	8021de6 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8021d90:	4b29      	ldr	r3, [pc, #164]	; (8021e38 <tcp_timewait_input+0xdc>)
 8021d92:	681a      	ldr	r2, [r3, #0]
 8021d94:	687b      	ldr	r3, [r7, #4]
 8021d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021d98:	1ad3      	subs	r3, r2, r3
 8021d9a:	2b00      	cmp	r3, #0
 8021d9c:	db2d      	blt.n	8021dfa <tcp_timewait_input+0x9e>
 8021d9e:	4b26      	ldr	r3, [pc, #152]	; (8021e38 <tcp_timewait_input+0xdc>)
 8021da0:	681a      	ldr	r2, [r3, #0]
 8021da2:	687b      	ldr	r3, [r7, #4]
 8021da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021da6:	6879      	ldr	r1, [r7, #4]
 8021da8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8021daa:	440b      	add	r3, r1
 8021dac:	1ad3      	subs	r3, r2, r3
 8021dae:	2b00      	cmp	r3, #0
 8021db0:	dc23      	bgt.n	8021dfa <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8021db2:	4b22      	ldr	r3, [pc, #136]	; (8021e3c <tcp_timewait_input+0xe0>)
 8021db4:	6819      	ldr	r1, [r3, #0]
 8021db6:	4b22      	ldr	r3, [pc, #136]	; (8021e40 <tcp_timewait_input+0xe4>)
 8021db8:	881b      	ldrh	r3, [r3, #0]
 8021dba:	461a      	mov	r2, r3
 8021dbc:	4b1e      	ldr	r3, [pc, #120]	; (8021e38 <tcp_timewait_input+0xdc>)
 8021dbe:	681b      	ldr	r3, [r3, #0]
 8021dc0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8021dc2:	4b20      	ldr	r3, [pc, #128]	; (8021e44 <tcp_timewait_input+0xe8>)
 8021dc4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8021dc6:	885b      	ldrh	r3, [r3, #2]
 8021dc8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8021dca:	4a1e      	ldr	r2, [pc, #120]	; (8021e44 <tcp_timewait_input+0xe8>)
 8021dcc:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8021dce:	8812      	ldrh	r2, [r2, #0]
 8021dd0:	b292      	uxth	r2, r2
 8021dd2:	9202      	str	r2, [sp, #8]
 8021dd4:	9301      	str	r3, [sp, #4]
 8021dd6:	4b1c      	ldr	r3, [pc, #112]	; (8021e48 <tcp_timewait_input+0xec>)
 8021dd8:	9300      	str	r3, [sp, #0]
 8021dda:	4b1c      	ldr	r3, [pc, #112]	; (8021e4c <tcp_timewait_input+0xf0>)
 8021ddc:	4602      	mov	r2, r0
 8021dde:	6878      	ldr	r0, [r7, #4]
 8021de0:	f002 ff36 	bl	8024c50 <tcp_rst>
      return;
 8021de4:	e01c      	b.n	8021e20 <tcp_timewait_input+0xc4>
    }
  } else if (flags & TCP_FIN) {
 8021de6:	4b10      	ldr	r3, [pc, #64]	; (8021e28 <tcp_timewait_input+0xcc>)
 8021de8:	781b      	ldrb	r3, [r3, #0]
 8021dea:	f003 0301 	and.w	r3, r3, #1
 8021dee:	2b00      	cmp	r3, #0
 8021df0:	d003      	beq.n	8021dfa <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8021df2:	4b17      	ldr	r3, [pc, #92]	; (8021e50 <tcp_timewait_input+0xf4>)
 8021df4:	681a      	ldr	r2, [r3, #0]
 8021df6:	687b      	ldr	r3, [r7, #4]
 8021df8:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8021dfa:	4b11      	ldr	r3, [pc, #68]	; (8021e40 <tcp_timewait_input+0xe4>)
 8021dfc:	881b      	ldrh	r3, [r3, #0]
 8021dfe:	2b00      	cmp	r3, #0
 8021e00:	d00d      	beq.n	8021e1e <tcp_timewait_input+0xc2>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8021e02:	687b      	ldr	r3, [r7, #4]
 8021e04:	8b5b      	ldrh	r3, [r3, #26]
 8021e06:	f043 0302 	orr.w	r3, r3, #2
 8021e0a:	b29a      	uxth	r2, r3
 8021e0c:	687b      	ldr	r3, [r7, #4]
 8021e0e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8021e10:	6878      	ldr	r0, [r7, #4]
 8021e12:	f002 f951 	bl	80240b8 <tcp_output>
  }
  return;
 8021e16:	bf00      	nop
 8021e18:	e001      	b.n	8021e1e <tcp_timewait_input+0xc2>
    return;
 8021e1a:	bf00      	nop
 8021e1c:	e000      	b.n	8021e20 <tcp_timewait_input+0xc4>
  return;
 8021e1e:	bf00      	nop
}
 8021e20:	3708      	adds	r7, #8
 8021e22:	46bd      	mov	sp, r7
 8021e24:	bd80      	pop	{r7, pc}
 8021e26:	bf00      	nop
 8021e28:	200196ec 	.word	0x200196ec
 8021e2c:	08029808 	.word	0x08029808
 8021e30:	08029a20 	.word	0x08029a20
 8021e34:	08029854 	.word	0x08029854
 8021e38:	200196e0 	.word	0x200196e0
 8021e3c:	200196e4 	.word	0x200196e4
 8021e40:	200196ea 	.word	0x200196ea
 8021e44:	200196d0 	.word	0x200196d0
 8021e48:	2001ca0c 	.word	0x2001ca0c
 8021e4c:	2001ca10 	.word	0x2001ca10
 8021e50:	20022ab8 	.word	0x20022ab8

08021e54 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8021e54:	b590      	push	{r4, r7, lr}
 8021e56:	b08d      	sub	sp, #52	; 0x34
 8021e58:	af04      	add	r7, sp, #16
 8021e5a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8021e5c:	2300      	movs	r3, #0
 8021e5e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8021e60:	2300      	movs	r3, #0
 8021e62:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8021e64:	687b      	ldr	r3, [r7, #4]
 8021e66:	2b00      	cmp	r3, #0
 8021e68:	d106      	bne.n	8021e78 <tcp_process+0x24>
 8021e6a:	4ba5      	ldr	r3, [pc, #660]	; (8022100 <tcp_process+0x2ac>)
 8021e6c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8021e70:	49a4      	ldr	r1, [pc, #656]	; (8022104 <tcp_process+0x2b0>)
 8021e72:	48a5      	ldr	r0, [pc, #660]	; (8022108 <tcp_process+0x2b4>)
 8021e74:	f004 fa5c 	bl	8026330 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8021e78:	4ba4      	ldr	r3, [pc, #656]	; (802210c <tcp_process+0x2b8>)
 8021e7a:	781b      	ldrb	r3, [r3, #0]
 8021e7c:	f003 0304 	and.w	r3, r3, #4
 8021e80:	2b00      	cmp	r3, #0
 8021e82:	d04e      	beq.n	8021f22 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8021e84:	687b      	ldr	r3, [r7, #4]
 8021e86:	7d1b      	ldrb	r3, [r3, #20]
 8021e88:	2b02      	cmp	r3, #2
 8021e8a:	d108      	bne.n	8021e9e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8021e8c:	687b      	ldr	r3, [r7, #4]
 8021e8e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8021e90:	4b9f      	ldr	r3, [pc, #636]	; (8022110 <tcp_process+0x2bc>)
 8021e92:	681b      	ldr	r3, [r3, #0]
 8021e94:	429a      	cmp	r2, r3
 8021e96:	d123      	bne.n	8021ee0 <tcp_process+0x8c>
        acceptable = 1;
 8021e98:	2301      	movs	r3, #1
 8021e9a:	76fb      	strb	r3, [r7, #27]
 8021e9c:	e020      	b.n	8021ee0 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8021e9e:	687b      	ldr	r3, [r7, #4]
 8021ea0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8021ea2:	4b9c      	ldr	r3, [pc, #624]	; (8022114 <tcp_process+0x2c0>)
 8021ea4:	681b      	ldr	r3, [r3, #0]
 8021ea6:	429a      	cmp	r2, r3
 8021ea8:	d102      	bne.n	8021eb0 <tcp_process+0x5c>
        acceptable = 1;
 8021eaa:	2301      	movs	r3, #1
 8021eac:	76fb      	strb	r3, [r7, #27]
 8021eae:	e017      	b.n	8021ee0 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8021eb0:	4b98      	ldr	r3, [pc, #608]	; (8022114 <tcp_process+0x2c0>)
 8021eb2:	681a      	ldr	r2, [r3, #0]
 8021eb4:	687b      	ldr	r3, [r7, #4]
 8021eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021eb8:	1ad3      	subs	r3, r2, r3
 8021eba:	2b00      	cmp	r3, #0
 8021ebc:	db10      	blt.n	8021ee0 <tcp_process+0x8c>
 8021ebe:	4b95      	ldr	r3, [pc, #596]	; (8022114 <tcp_process+0x2c0>)
 8021ec0:	681a      	ldr	r2, [r3, #0]
 8021ec2:	687b      	ldr	r3, [r7, #4]
 8021ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021ec6:	6879      	ldr	r1, [r7, #4]
 8021ec8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8021eca:	440b      	add	r3, r1
 8021ecc:	1ad3      	subs	r3, r2, r3
 8021ece:	2b00      	cmp	r3, #0
 8021ed0:	dc06      	bgt.n	8021ee0 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8021ed2:	687b      	ldr	r3, [r7, #4]
 8021ed4:	8b5b      	ldrh	r3, [r3, #26]
 8021ed6:	f043 0302 	orr.w	r3, r3, #2
 8021eda:	b29a      	uxth	r2, r3
 8021edc:	687b      	ldr	r3, [r7, #4]
 8021ede:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8021ee0:	7efb      	ldrb	r3, [r7, #27]
 8021ee2:	2b00      	cmp	r3, #0
 8021ee4:	d01b      	beq.n	8021f1e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8021ee6:	687b      	ldr	r3, [r7, #4]
 8021ee8:	7d1b      	ldrb	r3, [r3, #20]
 8021eea:	2b00      	cmp	r3, #0
 8021eec:	d106      	bne.n	8021efc <tcp_process+0xa8>
 8021eee:	4b84      	ldr	r3, [pc, #528]	; (8022100 <tcp_process+0x2ac>)
 8021ef0:	f44f 724e 	mov.w	r2, #824	; 0x338
 8021ef4:	4988      	ldr	r1, [pc, #544]	; (8022118 <tcp_process+0x2c4>)
 8021ef6:	4884      	ldr	r0, [pc, #528]	; (8022108 <tcp_process+0x2b4>)
 8021ef8:	f004 fa1a 	bl	8026330 <iprintf>
      recv_flags |= TF_RESET;
 8021efc:	4b87      	ldr	r3, [pc, #540]	; (802211c <tcp_process+0x2c8>)
 8021efe:	781b      	ldrb	r3, [r3, #0]
 8021f00:	f043 0308 	orr.w	r3, r3, #8
 8021f04:	b2da      	uxtb	r2, r3
 8021f06:	4b85      	ldr	r3, [pc, #532]	; (802211c <tcp_process+0x2c8>)
 8021f08:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8021f0a:	687b      	ldr	r3, [r7, #4]
 8021f0c:	8b5b      	ldrh	r3, [r3, #26]
 8021f0e:	f023 0301 	bic.w	r3, r3, #1
 8021f12:	b29a      	uxth	r2, r3
 8021f14:	687b      	ldr	r3, [r7, #4]
 8021f16:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8021f18:	f06f 030d 	mvn.w	r3, #13
 8021f1c:	e37a      	b.n	8022614 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8021f1e:	2300      	movs	r3, #0
 8021f20:	e378      	b.n	8022614 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8021f22:	4b7a      	ldr	r3, [pc, #488]	; (802210c <tcp_process+0x2b8>)
 8021f24:	781b      	ldrb	r3, [r3, #0]
 8021f26:	f003 0302 	and.w	r3, r3, #2
 8021f2a:	2b00      	cmp	r3, #0
 8021f2c:	d010      	beq.n	8021f50 <tcp_process+0xfc>
 8021f2e:	687b      	ldr	r3, [r7, #4]
 8021f30:	7d1b      	ldrb	r3, [r3, #20]
 8021f32:	2b02      	cmp	r3, #2
 8021f34:	d00c      	beq.n	8021f50 <tcp_process+0xfc>
 8021f36:	687b      	ldr	r3, [r7, #4]
 8021f38:	7d1b      	ldrb	r3, [r3, #20]
 8021f3a:	2b03      	cmp	r3, #3
 8021f3c:	d008      	beq.n	8021f50 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8021f3e:	687b      	ldr	r3, [r7, #4]
 8021f40:	8b5b      	ldrh	r3, [r3, #26]
 8021f42:	f043 0302 	orr.w	r3, r3, #2
 8021f46:	b29a      	uxth	r2, r3
 8021f48:	687b      	ldr	r3, [r7, #4]
 8021f4a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8021f4c:	2300      	movs	r3, #0
 8021f4e:	e361      	b.n	8022614 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8021f50:	687b      	ldr	r3, [r7, #4]
 8021f52:	8b5b      	ldrh	r3, [r3, #26]
 8021f54:	f003 0310 	and.w	r3, r3, #16
 8021f58:	2b00      	cmp	r3, #0
 8021f5a:	d103      	bne.n	8021f64 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8021f5c:	4b70      	ldr	r3, [pc, #448]	; (8022120 <tcp_process+0x2cc>)
 8021f5e:	681a      	ldr	r2, [r3, #0]
 8021f60:	687b      	ldr	r3, [r7, #4]
 8021f62:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8021f64:	687b      	ldr	r3, [r7, #4]
 8021f66:	2200      	movs	r2, #0
 8021f68:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
  pcb->persist_probe = 0;
 8021f6c:	687b      	ldr	r3, [r7, #4]
 8021f6e:	2200      	movs	r2, #0
 8021f70:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e

  tcp_parseopt(pcb);
 8021f74:	6878      	ldr	r0, [r7, #4]
 8021f76:	f001 f87b 	bl	8023070 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8021f7a:	687b      	ldr	r3, [r7, #4]
 8021f7c:	7d1b      	ldrb	r3, [r3, #20]
 8021f7e:	3b02      	subs	r3, #2
 8021f80:	2b07      	cmp	r3, #7
 8021f82:	f200 8337 	bhi.w	80225f4 <tcp_process+0x7a0>
 8021f86:	a201      	add	r2, pc, #4	; (adr r2, 8021f8c <tcp_process+0x138>)
 8021f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021f8c:	08021fad 	.word	0x08021fad
 8021f90:	080221dd 	.word	0x080221dd
 8021f94:	08022355 	.word	0x08022355
 8021f98:	0802237f 	.word	0x0802237f
 8021f9c:	080224a3 	.word	0x080224a3
 8021fa0:	08022355 	.word	0x08022355
 8021fa4:	0802252f 	.word	0x0802252f
 8021fa8:	080225bf 	.word	0x080225bf
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8021fac:	4b57      	ldr	r3, [pc, #348]	; (802210c <tcp_process+0x2b8>)
 8021fae:	781b      	ldrb	r3, [r3, #0]
 8021fb0:	f003 0310 	and.w	r3, r3, #16
 8021fb4:	2b00      	cmp	r3, #0
 8021fb6:	f000 80e4 	beq.w	8022182 <tcp_process+0x32e>
 8021fba:	4b54      	ldr	r3, [pc, #336]	; (802210c <tcp_process+0x2b8>)
 8021fbc:	781b      	ldrb	r3, [r3, #0]
 8021fbe:	f003 0302 	and.w	r3, r3, #2
 8021fc2:	2b00      	cmp	r3, #0
 8021fc4:	f000 80dd 	beq.w	8022182 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8021fc8:	687b      	ldr	r3, [r7, #4]
 8021fca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021fcc:	1c5a      	adds	r2, r3, #1
 8021fce:	4b50      	ldr	r3, [pc, #320]	; (8022110 <tcp_process+0x2bc>)
 8021fd0:	681b      	ldr	r3, [r3, #0]
 8021fd2:	429a      	cmp	r2, r3
 8021fd4:	f040 80d5 	bne.w	8022182 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8021fd8:	4b4e      	ldr	r3, [pc, #312]	; (8022114 <tcp_process+0x2c0>)
 8021fda:	681b      	ldr	r3, [r3, #0]
 8021fdc:	1c5a      	adds	r2, r3, #1
 8021fde:	687b      	ldr	r3, [r7, #4]
 8021fe0:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8021fe2:	687b      	ldr	r3, [r7, #4]
 8021fe4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8021fe6:	687b      	ldr	r3, [r7, #4]
 8021fe8:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8021fea:	4b49      	ldr	r3, [pc, #292]	; (8022110 <tcp_process+0x2bc>)
 8021fec:	681a      	ldr	r2, [r3, #0]
 8021fee:	687b      	ldr	r3, [r7, #4]
 8021ff0:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8021ff2:	4b4c      	ldr	r3, [pc, #304]	; (8022124 <tcp_process+0x2d0>)
 8021ff4:	681b      	ldr	r3, [r3, #0]
 8021ff6:	89db      	ldrh	r3, [r3, #14]
 8021ff8:	b29a      	uxth	r2, r3
 8021ffa:	687b      	ldr	r3, [r7, #4]
 8021ffc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8022000:	687b      	ldr	r3, [r7, #4]
 8022002:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8022006:	687b      	ldr	r3, [r7, #4]
 8022008:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 802200c:	4b41      	ldr	r3, [pc, #260]	; (8022114 <tcp_process+0x2c0>)
 802200e:	681b      	ldr	r3, [r3, #0]
 8022010:	1e5a      	subs	r2, r3, #1
 8022012:	687b      	ldr	r3, [r7, #4]
 8022014:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8022016:	687b      	ldr	r3, [r7, #4]
 8022018:	2204      	movs	r2, #4
 802201a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 802201c:	687b      	ldr	r3, [r7, #4]
 802201e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8022020:	687b      	ldr	r3, [r7, #4]
 8022022:	3304      	adds	r3, #4
 8022024:	4618      	mov	r0, r3
 8022026:	f7fa fbf3 	bl	801c810 <ip4_route>
 802202a:	4601      	mov	r1, r0
 802202c:	687b      	ldr	r3, [r7, #4]
 802202e:	3304      	adds	r3, #4
 8022030:	461a      	mov	r2, r3
 8022032:	4620      	mov	r0, r4
 8022034:	f7ff f8a6 	bl	8021184 <tcp_eff_send_mss_netif>
 8022038:	4603      	mov	r3, r0
 802203a:	461a      	mov	r2, r3
 802203c:	687b      	ldr	r3, [r7, #4]
 802203e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8022040:	687b      	ldr	r3, [r7, #4]
 8022042:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8022044:	009a      	lsls	r2, r3, #2
 8022046:	687b      	ldr	r3, [r7, #4]
 8022048:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 802204a:	005b      	lsls	r3, r3, #1
 802204c:	f241 111c 	movw	r1, #4380	; 0x111c
 8022050:	428b      	cmp	r3, r1
 8022052:	bf38      	it	cc
 8022054:	460b      	movcc	r3, r1
 8022056:	429a      	cmp	r2, r3
 8022058:	d204      	bcs.n	8022064 <tcp_process+0x210>
 802205a:	687b      	ldr	r3, [r7, #4]
 802205c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 802205e:	009b      	lsls	r3, r3, #2
 8022060:	b29b      	uxth	r3, r3
 8022062:	e00d      	b.n	8022080 <tcp_process+0x22c>
 8022064:	687b      	ldr	r3, [r7, #4]
 8022066:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8022068:	005b      	lsls	r3, r3, #1
 802206a:	f241 121c 	movw	r2, #4380	; 0x111c
 802206e:	4293      	cmp	r3, r2
 8022070:	d904      	bls.n	802207c <tcp_process+0x228>
 8022072:	687b      	ldr	r3, [r7, #4]
 8022074:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8022076:	005b      	lsls	r3, r3, #1
 8022078:	b29b      	uxth	r3, r3
 802207a:	e001      	b.n	8022080 <tcp_process+0x22c>
 802207c:	f241 131c 	movw	r3, #4380	; 0x111c
 8022080:	687a      	ldr	r2, [r7, #4]
 8022082:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8022086:	687b      	ldr	r3, [r7, #4]
 8022088:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 802208c:	2b00      	cmp	r3, #0
 802208e:	d106      	bne.n	802209e <tcp_process+0x24a>
 8022090:	4b1b      	ldr	r3, [pc, #108]	; (8022100 <tcp_process+0x2ac>)
 8022092:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8022096:	4924      	ldr	r1, [pc, #144]	; (8022128 <tcp_process+0x2d4>)
 8022098:	481b      	ldr	r0, [pc, #108]	; (8022108 <tcp_process+0x2b4>)
 802209a:	f004 f949 	bl	8026330 <iprintf>
        --pcb->snd_queuelen;
 802209e:	687b      	ldr	r3, [r7, #4]
 80220a0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80220a4:	3b01      	subs	r3, #1
 80220a6:	b29a      	uxth	r2, r3
 80220a8:	687b      	ldr	r3, [r7, #4]
 80220aa:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 80220ae:	687b      	ldr	r3, [r7, #4]
 80220b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80220b2:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 80220b4:	69fb      	ldr	r3, [r7, #28]
 80220b6:	2b00      	cmp	r3, #0
 80220b8:	d111      	bne.n	80220de <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 80220ba:	687b      	ldr	r3, [r7, #4]
 80220bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80220be:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 80220c0:	69fb      	ldr	r3, [r7, #28]
 80220c2:	2b00      	cmp	r3, #0
 80220c4:	d106      	bne.n	80220d4 <tcp_process+0x280>
 80220c6:	4b0e      	ldr	r3, [pc, #56]	; (8022100 <tcp_process+0x2ac>)
 80220c8:	f44f 725d 	mov.w	r2, #884	; 0x374
 80220cc:	4917      	ldr	r1, [pc, #92]	; (802212c <tcp_process+0x2d8>)
 80220ce:	480e      	ldr	r0, [pc, #56]	; (8022108 <tcp_process+0x2b4>)
 80220d0:	f004 f92e 	bl	8026330 <iprintf>
          pcb->unsent = rseg->next;
 80220d4:	69fb      	ldr	r3, [r7, #28]
 80220d6:	681a      	ldr	r2, [r3, #0]
 80220d8:	687b      	ldr	r3, [r7, #4]
 80220da:	66da      	str	r2, [r3, #108]	; 0x6c
 80220dc:	e003      	b.n	80220e6 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 80220de:	69fb      	ldr	r3, [r7, #28]
 80220e0:	681a      	ldr	r2, [r3, #0]
 80220e2:	687b      	ldr	r3, [r7, #4]
 80220e4:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 80220e6:	69f8      	ldr	r0, [r7, #28]
 80220e8:	f7fe fca2 	bl	8020a30 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80220ec:	687b      	ldr	r3, [r7, #4]
 80220ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80220f0:	2b00      	cmp	r3, #0
 80220f2:	d11d      	bne.n	8022130 <tcp_process+0x2dc>
          pcb->rtime = -1;
 80220f4:	687b      	ldr	r3, [r7, #4]
 80220f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80220fa:	861a      	strh	r2, [r3, #48]	; 0x30
 80220fc:	e01f      	b.n	802213e <tcp_process+0x2ea>
 80220fe:	bf00      	nop
 8022100:	08029808 	.word	0x08029808
 8022104:	08029a40 	.word	0x08029a40
 8022108:	08029854 	.word	0x08029854
 802210c:	200196ec 	.word	0x200196ec
 8022110:	200196e4 	.word	0x200196e4
 8022114:	200196e0 	.word	0x200196e0
 8022118:	08029a5c 	.word	0x08029a5c
 802211c:	200196ed 	.word	0x200196ed
 8022120:	20022ab8 	.word	0x20022ab8
 8022124:	200196d0 	.word	0x200196d0
 8022128:	08029a7c 	.word	0x08029a7c
 802212c:	08029a94 	.word	0x08029a94
        } else {
          pcb->rtime = 0;
 8022130:	687b      	ldr	r3, [r7, #4]
 8022132:	2200      	movs	r2, #0
 8022134:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8022136:	687b      	ldr	r3, [r7, #4]
 8022138:	2200      	movs	r2, #0
 802213a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 802213e:	687b      	ldr	r3, [r7, #4]
 8022140:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8022144:	2b00      	cmp	r3, #0
 8022146:	d00a      	beq.n	802215e <tcp_process+0x30a>
 8022148:	687b      	ldr	r3, [r7, #4]
 802214a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 802214e:	687a      	ldr	r2, [r7, #4]
 8022150:	6910      	ldr	r0, [r2, #16]
 8022152:	2200      	movs	r2, #0
 8022154:	6879      	ldr	r1, [r7, #4]
 8022156:	4798      	blx	r3
 8022158:	4603      	mov	r3, r0
 802215a:	76bb      	strb	r3, [r7, #26]
 802215c:	e001      	b.n	8022162 <tcp_process+0x30e>
 802215e:	2300      	movs	r3, #0
 8022160:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8022162:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8022166:	f113 0f0d 	cmn.w	r3, #13
 802216a:	d102      	bne.n	8022172 <tcp_process+0x31e>
          return ERR_ABRT;
 802216c:	f06f 030c 	mvn.w	r3, #12
 8022170:	e250      	b.n	8022614 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8022172:	687b      	ldr	r3, [r7, #4]
 8022174:	8b5b      	ldrh	r3, [r3, #26]
 8022176:	f043 0302 	orr.w	r3, r3, #2
 802217a:	b29a      	uxth	r2, r3
 802217c:	687b      	ldr	r3, [r7, #4]
 802217e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8022180:	e23a      	b.n	80225f8 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8022182:	4b9d      	ldr	r3, [pc, #628]	; (80223f8 <tcp_process+0x5a4>)
 8022184:	781b      	ldrb	r3, [r3, #0]
 8022186:	f003 0310 	and.w	r3, r3, #16
 802218a:	2b00      	cmp	r3, #0
 802218c:	f000 8234 	beq.w	80225f8 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8022190:	4b9a      	ldr	r3, [pc, #616]	; (80223fc <tcp_process+0x5a8>)
 8022192:	6819      	ldr	r1, [r3, #0]
 8022194:	4b9a      	ldr	r3, [pc, #616]	; (8022400 <tcp_process+0x5ac>)
 8022196:	881b      	ldrh	r3, [r3, #0]
 8022198:	461a      	mov	r2, r3
 802219a:	4b9a      	ldr	r3, [pc, #616]	; (8022404 <tcp_process+0x5b0>)
 802219c:	681b      	ldr	r3, [r3, #0]
 802219e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80221a0:	4b99      	ldr	r3, [pc, #612]	; (8022408 <tcp_process+0x5b4>)
 80221a2:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80221a4:	885b      	ldrh	r3, [r3, #2]
 80221a6:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80221a8:	4a97      	ldr	r2, [pc, #604]	; (8022408 <tcp_process+0x5b4>)
 80221aa:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80221ac:	8812      	ldrh	r2, [r2, #0]
 80221ae:	b292      	uxth	r2, r2
 80221b0:	9202      	str	r2, [sp, #8]
 80221b2:	9301      	str	r3, [sp, #4]
 80221b4:	4b95      	ldr	r3, [pc, #596]	; (802240c <tcp_process+0x5b8>)
 80221b6:	9300      	str	r3, [sp, #0]
 80221b8:	4b95      	ldr	r3, [pc, #596]	; (8022410 <tcp_process+0x5bc>)
 80221ba:	4602      	mov	r2, r0
 80221bc:	6878      	ldr	r0, [r7, #4]
 80221be:	f002 fd47 	bl	8024c50 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80221c2:	687b      	ldr	r3, [r7, #4]
 80221c4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80221c8:	2b05      	cmp	r3, #5
 80221ca:	f200 8215 	bhi.w	80225f8 <tcp_process+0x7a4>
          pcb->rtime = 0;
 80221ce:	687b      	ldr	r3, [r7, #4]
 80221d0:	2200      	movs	r2, #0
 80221d2:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 80221d4:	6878      	ldr	r0, [r7, #4]
 80221d6:	f002 fb01 	bl	80247dc <tcp_rexmit_rto>
      break;
 80221da:	e20d      	b.n	80225f8 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80221dc:	4b86      	ldr	r3, [pc, #536]	; (80223f8 <tcp_process+0x5a4>)
 80221de:	781b      	ldrb	r3, [r3, #0]
 80221e0:	f003 0310 	and.w	r3, r3, #16
 80221e4:	2b00      	cmp	r3, #0
 80221e6:	f000 80a1 	beq.w	802232c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80221ea:	4b84      	ldr	r3, [pc, #528]	; (80223fc <tcp_process+0x5a8>)
 80221ec:	681a      	ldr	r2, [r3, #0]
 80221ee:	687b      	ldr	r3, [r7, #4]
 80221f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80221f2:	1ad3      	subs	r3, r2, r3
 80221f4:	3b01      	subs	r3, #1
 80221f6:	2b00      	cmp	r3, #0
 80221f8:	db7e      	blt.n	80222f8 <tcp_process+0x4a4>
 80221fa:	4b80      	ldr	r3, [pc, #512]	; (80223fc <tcp_process+0x5a8>)
 80221fc:	681a      	ldr	r2, [r3, #0]
 80221fe:	687b      	ldr	r3, [r7, #4]
 8022200:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8022202:	1ad3      	subs	r3, r2, r3
 8022204:	2b00      	cmp	r3, #0
 8022206:	dc77      	bgt.n	80222f8 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8022208:	687b      	ldr	r3, [r7, #4]
 802220a:	2204      	movs	r2, #4
 802220c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 802220e:	687b      	ldr	r3, [r7, #4]
 8022210:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8022212:	2b00      	cmp	r3, #0
 8022214:	d102      	bne.n	802221c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8022216:	23fa      	movs	r3, #250	; 0xfa
 8022218:	76bb      	strb	r3, [r7, #26]
 802221a:	e01d      	b.n	8022258 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 802221c:	687b      	ldr	r3, [r7, #4]
 802221e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8022220:	699b      	ldr	r3, [r3, #24]
 8022222:	2b00      	cmp	r3, #0
 8022224:	d106      	bne.n	8022234 <tcp_process+0x3e0>
 8022226:	4b7b      	ldr	r3, [pc, #492]	; (8022414 <tcp_process+0x5c0>)
 8022228:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 802222c:	497a      	ldr	r1, [pc, #488]	; (8022418 <tcp_process+0x5c4>)
 802222e:	487b      	ldr	r0, [pc, #492]	; (802241c <tcp_process+0x5c8>)
 8022230:	f004 f87e 	bl	8026330 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8022234:	687b      	ldr	r3, [r7, #4]
 8022236:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8022238:	699b      	ldr	r3, [r3, #24]
 802223a:	2b00      	cmp	r3, #0
 802223c:	d00a      	beq.n	8022254 <tcp_process+0x400>
 802223e:	687b      	ldr	r3, [r7, #4]
 8022240:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8022242:	699b      	ldr	r3, [r3, #24]
 8022244:	687a      	ldr	r2, [r7, #4]
 8022246:	6910      	ldr	r0, [r2, #16]
 8022248:	2200      	movs	r2, #0
 802224a:	6879      	ldr	r1, [r7, #4]
 802224c:	4798      	blx	r3
 802224e:	4603      	mov	r3, r0
 8022250:	76bb      	strb	r3, [r7, #26]
 8022252:	e001      	b.n	8022258 <tcp_process+0x404>
 8022254:	23f0      	movs	r3, #240	; 0xf0
 8022256:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8022258:	f997 301a 	ldrsb.w	r3, [r7, #26]
 802225c:	2b00      	cmp	r3, #0
 802225e:	d00a      	beq.n	8022276 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8022260:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8022264:	f113 0f0d 	cmn.w	r3, #13
 8022268:	d002      	beq.n	8022270 <tcp_process+0x41c>
              tcp_abort(pcb);
 802226a:	6878      	ldr	r0, [r7, #4]
 802226c:	f7fd fd4a 	bl	801fd04 <tcp_abort>
            }
            return ERR_ABRT;
 8022270:	f06f 030c 	mvn.w	r3, #12
 8022274:	e1ce      	b.n	8022614 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8022276:	6878      	ldr	r0, [r7, #4]
 8022278:	f000 fa58 	bl	802272c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 802227c:	4b68      	ldr	r3, [pc, #416]	; (8022420 <tcp_process+0x5cc>)
 802227e:	881b      	ldrh	r3, [r3, #0]
 8022280:	2b00      	cmp	r3, #0
 8022282:	d005      	beq.n	8022290 <tcp_process+0x43c>
            recv_acked--;
 8022284:	4b66      	ldr	r3, [pc, #408]	; (8022420 <tcp_process+0x5cc>)
 8022286:	881b      	ldrh	r3, [r3, #0]
 8022288:	3b01      	subs	r3, #1
 802228a:	b29a      	uxth	r2, r3
 802228c:	4b64      	ldr	r3, [pc, #400]	; (8022420 <tcp_process+0x5cc>)
 802228e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8022290:	687b      	ldr	r3, [r7, #4]
 8022292:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8022294:	009a      	lsls	r2, r3, #2
 8022296:	687b      	ldr	r3, [r7, #4]
 8022298:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 802229a:	005b      	lsls	r3, r3, #1
 802229c:	f241 111c 	movw	r1, #4380	; 0x111c
 80222a0:	428b      	cmp	r3, r1
 80222a2:	bf38      	it	cc
 80222a4:	460b      	movcc	r3, r1
 80222a6:	429a      	cmp	r2, r3
 80222a8:	d204      	bcs.n	80222b4 <tcp_process+0x460>
 80222aa:	687b      	ldr	r3, [r7, #4]
 80222ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80222ae:	009b      	lsls	r3, r3, #2
 80222b0:	b29b      	uxth	r3, r3
 80222b2:	e00d      	b.n	80222d0 <tcp_process+0x47c>
 80222b4:	687b      	ldr	r3, [r7, #4]
 80222b6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80222b8:	005b      	lsls	r3, r3, #1
 80222ba:	f241 121c 	movw	r2, #4380	; 0x111c
 80222be:	4293      	cmp	r3, r2
 80222c0:	d904      	bls.n	80222cc <tcp_process+0x478>
 80222c2:	687b      	ldr	r3, [r7, #4]
 80222c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80222c6:	005b      	lsls	r3, r3, #1
 80222c8:	b29b      	uxth	r3, r3
 80222ca:	e001      	b.n	80222d0 <tcp_process+0x47c>
 80222cc:	f241 131c 	movw	r3, #4380	; 0x111c
 80222d0:	687a      	ldr	r2, [r7, #4]
 80222d2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80222d6:	4b53      	ldr	r3, [pc, #332]	; (8022424 <tcp_process+0x5d0>)
 80222d8:	781b      	ldrb	r3, [r3, #0]
 80222da:	f003 0320 	and.w	r3, r3, #32
 80222de:	2b00      	cmp	r3, #0
 80222e0:	d037      	beq.n	8022352 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 80222e2:	687b      	ldr	r3, [r7, #4]
 80222e4:	8b5b      	ldrh	r3, [r3, #26]
 80222e6:	f043 0302 	orr.w	r3, r3, #2
 80222ea:	b29a      	uxth	r2, r3
 80222ec:	687b      	ldr	r3, [r7, #4]
 80222ee:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 80222f0:	687b      	ldr	r3, [r7, #4]
 80222f2:	2207      	movs	r2, #7
 80222f4:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 80222f6:	e02c      	b.n	8022352 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80222f8:	4b40      	ldr	r3, [pc, #256]	; (80223fc <tcp_process+0x5a8>)
 80222fa:	6819      	ldr	r1, [r3, #0]
 80222fc:	4b40      	ldr	r3, [pc, #256]	; (8022400 <tcp_process+0x5ac>)
 80222fe:	881b      	ldrh	r3, [r3, #0]
 8022300:	461a      	mov	r2, r3
 8022302:	4b40      	ldr	r3, [pc, #256]	; (8022404 <tcp_process+0x5b0>)
 8022304:	681b      	ldr	r3, [r3, #0]
 8022306:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8022308:	4b3f      	ldr	r3, [pc, #252]	; (8022408 <tcp_process+0x5b4>)
 802230a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 802230c:	885b      	ldrh	r3, [r3, #2]
 802230e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8022310:	4a3d      	ldr	r2, [pc, #244]	; (8022408 <tcp_process+0x5b4>)
 8022312:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8022314:	8812      	ldrh	r2, [r2, #0]
 8022316:	b292      	uxth	r2, r2
 8022318:	9202      	str	r2, [sp, #8]
 802231a:	9301      	str	r3, [sp, #4]
 802231c:	4b3b      	ldr	r3, [pc, #236]	; (802240c <tcp_process+0x5b8>)
 802231e:	9300      	str	r3, [sp, #0]
 8022320:	4b3b      	ldr	r3, [pc, #236]	; (8022410 <tcp_process+0x5bc>)
 8022322:	4602      	mov	r2, r0
 8022324:	6878      	ldr	r0, [r7, #4]
 8022326:	f002 fc93 	bl	8024c50 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 802232a:	e167      	b.n	80225fc <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 802232c:	4b32      	ldr	r3, [pc, #200]	; (80223f8 <tcp_process+0x5a4>)
 802232e:	781b      	ldrb	r3, [r3, #0]
 8022330:	f003 0302 	and.w	r3, r3, #2
 8022334:	2b00      	cmp	r3, #0
 8022336:	f000 8161 	beq.w	80225fc <tcp_process+0x7a8>
 802233a:	687b      	ldr	r3, [r7, #4]
 802233c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802233e:	1e5a      	subs	r2, r3, #1
 8022340:	4b30      	ldr	r3, [pc, #192]	; (8022404 <tcp_process+0x5b0>)
 8022342:	681b      	ldr	r3, [r3, #0]
 8022344:	429a      	cmp	r2, r3
 8022346:	f040 8159 	bne.w	80225fc <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 802234a:	6878      	ldr	r0, [r7, #4]
 802234c:	f002 fa68 	bl	8024820 <tcp_rexmit>
      break;
 8022350:	e154      	b.n	80225fc <tcp_process+0x7a8>
 8022352:	e153      	b.n	80225fc <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8022354:	6878      	ldr	r0, [r7, #4]
 8022356:	f000 f9e9 	bl	802272c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 802235a:	4b32      	ldr	r3, [pc, #200]	; (8022424 <tcp_process+0x5d0>)
 802235c:	781b      	ldrb	r3, [r3, #0]
 802235e:	f003 0320 	and.w	r3, r3, #32
 8022362:	2b00      	cmp	r3, #0
 8022364:	f000 814c 	beq.w	8022600 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8022368:	687b      	ldr	r3, [r7, #4]
 802236a:	8b5b      	ldrh	r3, [r3, #26]
 802236c:	f043 0302 	orr.w	r3, r3, #2
 8022370:	b29a      	uxth	r2, r3
 8022372:	687b      	ldr	r3, [r7, #4]
 8022374:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8022376:	687b      	ldr	r3, [r7, #4]
 8022378:	2207      	movs	r2, #7
 802237a:	751a      	strb	r2, [r3, #20]
      }
      break;
 802237c:	e140      	b.n	8022600 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 802237e:	6878      	ldr	r0, [r7, #4]
 8022380:	f000 f9d4 	bl	802272c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8022384:	4b27      	ldr	r3, [pc, #156]	; (8022424 <tcp_process+0x5d0>)
 8022386:	781b      	ldrb	r3, [r3, #0]
 8022388:	f003 0320 	and.w	r3, r3, #32
 802238c:	2b00      	cmp	r3, #0
 802238e:	d071      	beq.n	8022474 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8022390:	4b19      	ldr	r3, [pc, #100]	; (80223f8 <tcp_process+0x5a4>)
 8022392:	781b      	ldrb	r3, [r3, #0]
 8022394:	f003 0310 	and.w	r3, r3, #16
 8022398:	2b00      	cmp	r3, #0
 802239a:	d060      	beq.n	802245e <tcp_process+0x60a>
 802239c:	687b      	ldr	r3, [r7, #4]
 802239e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80223a0:	4b16      	ldr	r3, [pc, #88]	; (80223fc <tcp_process+0x5a8>)
 80223a2:	681b      	ldr	r3, [r3, #0]
 80223a4:	429a      	cmp	r2, r3
 80223a6:	d15a      	bne.n	802245e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80223a8:	687b      	ldr	r3, [r7, #4]
 80223aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80223ac:	2b00      	cmp	r3, #0
 80223ae:	d156      	bne.n	802245e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80223b0:	687b      	ldr	r3, [r7, #4]
 80223b2:	8b5b      	ldrh	r3, [r3, #26]
 80223b4:	f043 0302 	orr.w	r3, r3, #2
 80223b8:	b29a      	uxth	r2, r3
 80223ba:	687b      	ldr	r3, [r7, #4]
 80223bc:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80223be:	6878      	ldr	r0, [r7, #4]
 80223c0:	f7fe fdea 	bl	8020f98 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80223c4:	4b18      	ldr	r3, [pc, #96]	; (8022428 <tcp_process+0x5d4>)
 80223c6:	681a      	ldr	r2, [r3, #0]
 80223c8:	687b      	ldr	r3, [r7, #4]
 80223ca:	429a      	cmp	r2, r3
 80223cc:	d105      	bne.n	80223da <tcp_process+0x586>
 80223ce:	4b16      	ldr	r3, [pc, #88]	; (8022428 <tcp_process+0x5d4>)
 80223d0:	681b      	ldr	r3, [r3, #0]
 80223d2:	68db      	ldr	r3, [r3, #12]
 80223d4:	4a14      	ldr	r2, [pc, #80]	; (8022428 <tcp_process+0x5d4>)
 80223d6:	6013      	str	r3, [r2, #0]
 80223d8:	e02e      	b.n	8022438 <tcp_process+0x5e4>
 80223da:	4b13      	ldr	r3, [pc, #76]	; (8022428 <tcp_process+0x5d4>)
 80223dc:	681b      	ldr	r3, [r3, #0]
 80223de:	617b      	str	r3, [r7, #20]
 80223e0:	e027      	b.n	8022432 <tcp_process+0x5de>
 80223e2:	697b      	ldr	r3, [r7, #20]
 80223e4:	68da      	ldr	r2, [r3, #12]
 80223e6:	687b      	ldr	r3, [r7, #4]
 80223e8:	429a      	cmp	r2, r3
 80223ea:	d11f      	bne.n	802242c <tcp_process+0x5d8>
 80223ec:	687b      	ldr	r3, [r7, #4]
 80223ee:	68da      	ldr	r2, [r3, #12]
 80223f0:	697b      	ldr	r3, [r7, #20]
 80223f2:	60da      	str	r2, [r3, #12]
 80223f4:	e020      	b.n	8022438 <tcp_process+0x5e4>
 80223f6:	bf00      	nop
 80223f8:	200196ec 	.word	0x200196ec
 80223fc:	200196e4 	.word	0x200196e4
 8022400:	200196ea 	.word	0x200196ea
 8022404:	200196e0 	.word	0x200196e0
 8022408:	200196d0 	.word	0x200196d0
 802240c:	2001ca0c 	.word	0x2001ca0c
 8022410:	2001ca10 	.word	0x2001ca10
 8022414:	08029808 	.word	0x08029808
 8022418:	08029aa8 	.word	0x08029aa8
 802241c:	08029854 	.word	0x08029854
 8022420:	200196e8 	.word	0x200196e8
 8022424:	200196ed 	.word	0x200196ed
 8022428:	20022ab4 	.word	0x20022ab4
 802242c:	697b      	ldr	r3, [r7, #20]
 802242e:	68db      	ldr	r3, [r3, #12]
 8022430:	617b      	str	r3, [r7, #20]
 8022432:	697b      	ldr	r3, [r7, #20]
 8022434:	2b00      	cmp	r3, #0
 8022436:	d1d4      	bne.n	80223e2 <tcp_process+0x58e>
 8022438:	687b      	ldr	r3, [r7, #4]
 802243a:	2200      	movs	r2, #0
 802243c:	60da      	str	r2, [r3, #12]
 802243e:	4b77      	ldr	r3, [pc, #476]	; (802261c <tcp_process+0x7c8>)
 8022440:	2201      	movs	r2, #1
 8022442:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8022444:	687b      	ldr	r3, [r7, #4]
 8022446:	220a      	movs	r2, #10
 8022448:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 802244a:	4b75      	ldr	r3, [pc, #468]	; (8022620 <tcp_process+0x7cc>)
 802244c:	681a      	ldr	r2, [r3, #0]
 802244e:	687b      	ldr	r3, [r7, #4]
 8022450:	60da      	str	r2, [r3, #12]
 8022452:	4a73      	ldr	r2, [pc, #460]	; (8022620 <tcp_process+0x7cc>)
 8022454:	687b      	ldr	r3, [r7, #4]
 8022456:	6013      	str	r3, [r2, #0]
 8022458:	f002 fdbe 	bl	8024fd8 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 802245c:	e0d2      	b.n	8022604 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 802245e:	687b      	ldr	r3, [r7, #4]
 8022460:	8b5b      	ldrh	r3, [r3, #26]
 8022462:	f043 0302 	orr.w	r3, r3, #2
 8022466:	b29a      	uxth	r2, r3
 8022468:	687b      	ldr	r3, [r7, #4]
 802246a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 802246c:	687b      	ldr	r3, [r7, #4]
 802246e:	2208      	movs	r2, #8
 8022470:	751a      	strb	r2, [r3, #20]
      break;
 8022472:	e0c7      	b.n	8022604 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8022474:	4b6b      	ldr	r3, [pc, #428]	; (8022624 <tcp_process+0x7d0>)
 8022476:	781b      	ldrb	r3, [r3, #0]
 8022478:	f003 0310 	and.w	r3, r3, #16
 802247c:	2b00      	cmp	r3, #0
 802247e:	f000 80c1 	beq.w	8022604 <tcp_process+0x7b0>
 8022482:	687b      	ldr	r3, [r7, #4]
 8022484:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8022486:	4b68      	ldr	r3, [pc, #416]	; (8022628 <tcp_process+0x7d4>)
 8022488:	681b      	ldr	r3, [r3, #0]
 802248a:	429a      	cmp	r2, r3
 802248c:	f040 80ba 	bne.w	8022604 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8022490:	687b      	ldr	r3, [r7, #4]
 8022492:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8022494:	2b00      	cmp	r3, #0
 8022496:	f040 80b5 	bne.w	8022604 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 802249a:	687b      	ldr	r3, [r7, #4]
 802249c:	2206      	movs	r2, #6
 802249e:	751a      	strb	r2, [r3, #20]
      break;
 80224a0:	e0b0      	b.n	8022604 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80224a2:	6878      	ldr	r0, [r7, #4]
 80224a4:	f000 f942 	bl	802272c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80224a8:	4b60      	ldr	r3, [pc, #384]	; (802262c <tcp_process+0x7d8>)
 80224aa:	781b      	ldrb	r3, [r3, #0]
 80224ac:	f003 0320 	and.w	r3, r3, #32
 80224b0:	2b00      	cmp	r3, #0
 80224b2:	f000 80a9 	beq.w	8022608 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80224b6:	687b      	ldr	r3, [r7, #4]
 80224b8:	8b5b      	ldrh	r3, [r3, #26]
 80224ba:	f043 0302 	orr.w	r3, r3, #2
 80224be:	b29a      	uxth	r2, r3
 80224c0:	687b      	ldr	r3, [r7, #4]
 80224c2:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80224c4:	6878      	ldr	r0, [r7, #4]
 80224c6:	f7fe fd67 	bl	8020f98 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80224ca:	4b59      	ldr	r3, [pc, #356]	; (8022630 <tcp_process+0x7dc>)
 80224cc:	681a      	ldr	r2, [r3, #0]
 80224ce:	687b      	ldr	r3, [r7, #4]
 80224d0:	429a      	cmp	r2, r3
 80224d2:	d105      	bne.n	80224e0 <tcp_process+0x68c>
 80224d4:	4b56      	ldr	r3, [pc, #344]	; (8022630 <tcp_process+0x7dc>)
 80224d6:	681b      	ldr	r3, [r3, #0]
 80224d8:	68db      	ldr	r3, [r3, #12]
 80224da:	4a55      	ldr	r2, [pc, #340]	; (8022630 <tcp_process+0x7dc>)
 80224dc:	6013      	str	r3, [r2, #0]
 80224de:	e013      	b.n	8022508 <tcp_process+0x6b4>
 80224e0:	4b53      	ldr	r3, [pc, #332]	; (8022630 <tcp_process+0x7dc>)
 80224e2:	681b      	ldr	r3, [r3, #0]
 80224e4:	613b      	str	r3, [r7, #16]
 80224e6:	e00c      	b.n	8022502 <tcp_process+0x6ae>
 80224e8:	693b      	ldr	r3, [r7, #16]
 80224ea:	68da      	ldr	r2, [r3, #12]
 80224ec:	687b      	ldr	r3, [r7, #4]
 80224ee:	429a      	cmp	r2, r3
 80224f0:	d104      	bne.n	80224fc <tcp_process+0x6a8>
 80224f2:	687b      	ldr	r3, [r7, #4]
 80224f4:	68da      	ldr	r2, [r3, #12]
 80224f6:	693b      	ldr	r3, [r7, #16]
 80224f8:	60da      	str	r2, [r3, #12]
 80224fa:	e005      	b.n	8022508 <tcp_process+0x6b4>
 80224fc:	693b      	ldr	r3, [r7, #16]
 80224fe:	68db      	ldr	r3, [r3, #12]
 8022500:	613b      	str	r3, [r7, #16]
 8022502:	693b      	ldr	r3, [r7, #16]
 8022504:	2b00      	cmp	r3, #0
 8022506:	d1ef      	bne.n	80224e8 <tcp_process+0x694>
 8022508:	687b      	ldr	r3, [r7, #4]
 802250a:	2200      	movs	r2, #0
 802250c:	60da      	str	r2, [r3, #12]
 802250e:	4b43      	ldr	r3, [pc, #268]	; (802261c <tcp_process+0x7c8>)
 8022510:	2201      	movs	r2, #1
 8022512:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8022514:	687b      	ldr	r3, [r7, #4]
 8022516:	220a      	movs	r2, #10
 8022518:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 802251a:	4b41      	ldr	r3, [pc, #260]	; (8022620 <tcp_process+0x7cc>)
 802251c:	681a      	ldr	r2, [r3, #0]
 802251e:	687b      	ldr	r3, [r7, #4]
 8022520:	60da      	str	r2, [r3, #12]
 8022522:	4a3f      	ldr	r2, [pc, #252]	; (8022620 <tcp_process+0x7cc>)
 8022524:	687b      	ldr	r3, [r7, #4]
 8022526:	6013      	str	r3, [r2, #0]
 8022528:	f002 fd56 	bl	8024fd8 <tcp_timer_needed>
      }
      break;
 802252c:	e06c      	b.n	8022608 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 802252e:	6878      	ldr	r0, [r7, #4]
 8022530:	f000 f8fc 	bl	802272c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8022534:	4b3b      	ldr	r3, [pc, #236]	; (8022624 <tcp_process+0x7d0>)
 8022536:	781b      	ldrb	r3, [r3, #0]
 8022538:	f003 0310 	and.w	r3, r3, #16
 802253c:	2b00      	cmp	r3, #0
 802253e:	d065      	beq.n	802260c <tcp_process+0x7b8>
 8022540:	687b      	ldr	r3, [r7, #4]
 8022542:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8022544:	4b38      	ldr	r3, [pc, #224]	; (8022628 <tcp_process+0x7d4>)
 8022546:	681b      	ldr	r3, [r3, #0]
 8022548:	429a      	cmp	r2, r3
 802254a:	d15f      	bne.n	802260c <tcp_process+0x7b8>
 802254c:	687b      	ldr	r3, [r7, #4]
 802254e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8022550:	2b00      	cmp	r3, #0
 8022552:	d15b      	bne.n	802260c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8022554:	6878      	ldr	r0, [r7, #4]
 8022556:	f7fe fd1f 	bl	8020f98 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 802255a:	4b35      	ldr	r3, [pc, #212]	; (8022630 <tcp_process+0x7dc>)
 802255c:	681a      	ldr	r2, [r3, #0]
 802255e:	687b      	ldr	r3, [r7, #4]
 8022560:	429a      	cmp	r2, r3
 8022562:	d105      	bne.n	8022570 <tcp_process+0x71c>
 8022564:	4b32      	ldr	r3, [pc, #200]	; (8022630 <tcp_process+0x7dc>)
 8022566:	681b      	ldr	r3, [r3, #0]
 8022568:	68db      	ldr	r3, [r3, #12]
 802256a:	4a31      	ldr	r2, [pc, #196]	; (8022630 <tcp_process+0x7dc>)
 802256c:	6013      	str	r3, [r2, #0]
 802256e:	e013      	b.n	8022598 <tcp_process+0x744>
 8022570:	4b2f      	ldr	r3, [pc, #188]	; (8022630 <tcp_process+0x7dc>)
 8022572:	681b      	ldr	r3, [r3, #0]
 8022574:	60fb      	str	r3, [r7, #12]
 8022576:	e00c      	b.n	8022592 <tcp_process+0x73e>
 8022578:	68fb      	ldr	r3, [r7, #12]
 802257a:	68da      	ldr	r2, [r3, #12]
 802257c:	687b      	ldr	r3, [r7, #4]
 802257e:	429a      	cmp	r2, r3
 8022580:	d104      	bne.n	802258c <tcp_process+0x738>
 8022582:	687b      	ldr	r3, [r7, #4]
 8022584:	68da      	ldr	r2, [r3, #12]
 8022586:	68fb      	ldr	r3, [r7, #12]
 8022588:	60da      	str	r2, [r3, #12]
 802258a:	e005      	b.n	8022598 <tcp_process+0x744>
 802258c:	68fb      	ldr	r3, [r7, #12]
 802258e:	68db      	ldr	r3, [r3, #12]
 8022590:	60fb      	str	r3, [r7, #12]
 8022592:	68fb      	ldr	r3, [r7, #12]
 8022594:	2b00      	cmp	r3, #0
 8022596:	d1ef      	bne.n	8022578 <tcp_process+0x724>
 8022598:	687b      	ldr	r3, [r7, #4]
 802259a:	2200      	movs	r2, #0
 802259c:	60da      	str	r2, [r3, #12]
 802259e:	4b1f      	ldr	r3, [pc, #124]	; (802261c <tcp_process+0x7c8>)
 80225a0:	2201      	movs	r2, #1
 80225a2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80225a4:	687b      	ldr	r3, [r7, #4]
 80225a6:	220a      	movs	r2, #10
 80225a8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80225aa:	4b1d      	ldr	r3, [pc, #116]	; (8022620 <tcp_process+0x7cc>)
 80225ac:	681a      	ldr	r2, [r3, #0]
 80225ae:	687b      	ldr	r3, [r7, #4]
 80225b0:	60da      	str	r2, [r3, #12]
 80225b2:	4a1b      	ldr	r2, [pc, #108]	; (8022620 <tcp_process+0x7cc>)
 80225b4:	687b      	ldr	r3, [r7, #4]
 80225b6:	6013      	str	r3, [r2, #0]
 80225b8:	f002 fd0e 	bl	8024fd8 <tcp_timer_needed>
      }
      break;
 80225bc:	e026      	b.n	802260c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80225be:	6878      	ldr	r0, [r7, #4]
 80225c0:	f000 f8b4 	bl	802272c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80225c4:	4b17      	ldr	r3, [pc, #92]	; (8022624 <tcp_process+0x7d0>)
 80225c6:	781b      	ldrb	r3, [r3, #0]
 80225c8:	f003 0310 	and.w	r3, r3, #16
 80225cc:	2b00      	cmp	r3, #0
 80225ce:	d01f      	beq.n	8022610 <tcp_process+0x7bc>
 80225d0:	687b      	ldr	r3, [r7, #4]
 80225d2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80225d4:	4b14      	ldr	r3, [pc, #80]	; (8022628 <tcp_process+0x7d4>)
 80225d6:	681b      	ldr	r3, [r3, #0]
 80225d8:	429a      	cmp	r2, r3
 80225da:	d119      	bne.n	8022610 <tcp_process+0x7bc>
 80225dc:	687b      	ldr	r3, [r7, #4]
 80225de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80225e0:	2b00      	cmp	r3, #0
 80225e2:	d115      	bne.n	8022610 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 80225e4:	4b11      	ldr	r3, [pc, #68]	; (802262c <tcp_process+0x7d8>)
 80225e6:	781b      	ldrb	r3, [r3, #0]
 80225e8:	f043 0310 	orr.w	r3, r3, #16
 80225ec:	b2da      	uxtb	r2, r3
 80225ee:	4b0f      	ldr	r3, [pc, #60]	; (802262c <tcp_process+0x7d8>)
 80225f0:	701a      	strb	r2, [r3, #0]
      }
      break;
 80225f2:	e00d      	b.n	8022610 <tcp_process+0x7bc>
    default:
      break;
 80225f4:	bf00      	nop
 80225f6:	e00c      	b.n	8022612 <tcp_process+0x7be>
      break;
 80225f8:	bf00      	nop
 80225fa:	e00a      	b.n	8022612 <tcp_process+0x7be>
      break;
 80225fc:	bf00      	nop
 80225fe:	e008      	b.n	8022612 <tcp_process+0x7be>
      break;
 8022600:	bf00      	nop
 8022602:	e006      	b.n	8022612 <tcp_process+0x7be>
      break;
 8022604:	bf00      	nop
 8022606:	e004      	b.n	8022612 <tcp_process+0x7be>
      break;
 8022608:	bf00      	nop
 802260a:	e002      	b.n	8022612 <tcp_process+0x7be>
      break;
 802260c:	bf00      	nop
 802260e:	e000      	b.n	8022612 <tcp_process+0x7be>
      break;
 8022610:	bf00      	nop
  }
  return ERR_OK;
 8022612:	2300      	movs	r3, #0
}
 8022614:	4618      	mov	r0, r3
 8022616:	3724      	adds	r7, #36	; 0x24
 8022618:	46bd      	mov	sp, r7
 802261a:	bd90      	pop	{r4, r7, pc}
 802261c:	20022ab0 	.word	0x20022ab0
 8022620:	20022ac4 	.word	0x20022ac4
 8022624:	200196ec 	.word	0x200196ec
 8022628:	200196e4 	.word	0x200196e4
 802262c:	200196ed 	.word	0x200196ed
 8022630:	20022ab4 	.word	0x20022ab4

08022634 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8022634:	b5b0      	push	{r4, r5, r7, lr}
 8022636:	b086      	sub	sp, #24
 8022638:	af00      	add	r7, sp, #0
 802263a:	60f8      	str	r0, [r7, #12]
 802263c:	60b9      	str	r1, [r7, #8]
 802263e:	607a      	str	r2, [r7, #4]
 8022640:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8022642:	e03e      	b.n	80226c2 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8022644:	68bb      	ldr	r3, [r7, #8]
 8022646:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8022648:	68bb      	ldr	r3, [r7, #8]
 802264a:	681b      	ldr	r3, [r3, #0]
 802264c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 802264e:	697b      	ldr	r3, [r7, #20]
 8022650:	685b      	ldr	r3, [r3, #4]
 8022652:	4618      	mov	r0, r3
 8022654:	f7fc fcf6 	bl	801f044 <pbuf_clen>
 8022658:	4603      	mov	r3, r0
 802265a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 802265c:	68fb      	ldr	r3, [r7, #12]
 802265e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8022662:	8a7a      	ldrh	r2, [r7, #18]
 8022664:	429a      	cmp	r2, r3
 8022666:	d906      	bls.n	8022676 <tcp_free_acked_segments+0x42>
 8022668:	4b2a      	ldr	r3, [pc, #168]	; (8022714 <tcp_free_acked_segments+0xe0>)
 802266a:	f240 4257 	movw	r2, #1111	; 0x457
 802266e:	492a      	ldr	r1, [pc, #168]	; (8022718 <tcp_free_acked_segments+0xe4>)
 8022670:	482a      	ldr	r0, [pc, #168]	; (802271c <tcp_free_acked_segments+0xe8>)
 8022672:	f003 fe5d 	bl	8026330 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8022676:	68fb      	ldr	r3, [r7, #12]
 8022678:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 802267c:	8a7b      	ldrh	r3, [r7, #18]
 802267e:	1ad3      	subs	r3, r2, r3
 8022680:	b29a      	uxth	r2, r3
 8022682:	68fb      	ldr	r3, [r7, #12]
 8022684:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8022688:	697b      	ldr	r3, [r7, #20]
 802268a:	891a      	ldrh	r2, [r3, #8]
 802268c:	4b24      	ldr	r3, [pc, #144]	; (8022720 <tcp_free_acked_segments+0xec>)
 802268e:	881b      	ldrh	r3, [r3, #0]
 8022690:	4413      	add	r3, r2
 8022692:	b29a      	uxth	r2, r3
 8022694:	4b22      	ldr	r3, [pc, #136]	; (8022720 <tcp_free_acked_segments+0xec>)
 8022696:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8022698:	6978      	ldr	r0, [r7, #20]
 802269a:	f7fe f9c9 	bl	8020a30 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 802269e:	68fb      	ldr	r3, [r7, #12]
 80226a0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80226a4:	2b00      	cmp	r3, #0
 80226a6:	d00c      	beq.n	80226c2 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80226a8:	68bb      	ldr	r3, [r7, #8]
 80226aa:	2b00      	cmp	r3, #0
 80226ac:	d109      	bne.n	80226c2 <tcp_free_acked_segments+0x8e>
 80226ae:	683b      	ldr	r3, [r7, #0]
 80226b0:	2b00      	cmp	r3, #0
 80226b2:	d106      	bne.n	80226c2 <tcp_free_acked_segments+0x8e>
 80226b4:	4b17      	ldr	r3, [pc, #92]	; (8022714 <tcp_free_acked_segments+0xe0>)
 80226b6:	f240 4262 	movw	r2, #1122	; 0x462
 80226ba:	491a      	ldr	r1, [pc, #104]	; (8022724 <tcp_free_acked_segments+0xf0>)
 80226bc:	4817      	ldr	r0, [pc, #92]	; (802271c <tcp_free_acked_segments+0xe8>)
 80226be:	f003 fe37 	bl	8026330 <iprintf>
  while (seg_list != NULL &&
 80226c2:	68bb      	ldr	r3, [r7, #8]
 80226c4:	2b00      	cmp	r3, #0
 80226c6:	d020      	beq.n	802270a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80226c8:	68bb      	ldr	r3, [r7, #8]
 80226ca:	68db      	ldr	r3, [r3, #12]
 80226cc:	685b      	ldr	r3, [r3, #4]
 80226ce:	4618      	mov	r0, r3
 80226d0:	f7f6 fd3f 	bl	8019152 <lwip_htonl>
 80226d4:	4604      	mov	r4, r0
 80226d6:	68bb      	ldr	r3, [r7, #8]
 80226d8:	891b      	ldrh	r3, [r3, #8]
 80226da:	461d      	mov	r5, r3
 80226dc:	68bb      	ldr	r3, [r7, #8]
 80226de:	68db      	ldr	r3, [r3, #12]
 80226e0:	899b      	ldrh	r3, [r3, #12]
 80226e2:	b29b      	uxth	r3, r3
 80226e4:	4618      	mov	r0, r3
 80226e6:	f7f6 fd1f 	bl	8019128 <lwip_htons>
 80226ea:	4603      	mov	r3, r0
 80226ec:	b2db      	uxtb	r3, r3
 80226ee:	f003 0303 	and.w	r3, r3, #3
 80226f2:	2b00      	cmp	r3, #0
 80226f4:	d001      	beq.n	80226fa <tcp_free_acked_segments+0xc6>
 80226f6:	2301      	movs	r3, #1
 80226f8:	e000      	b.n	80226fc <tcp_free_acked_segments+0xc8>
 80226fa:	2300      	movs	r3, #0
 80226fc:	442b      	add	r3, r5
 80226fe:	18e2      	adds	r2, r4, r3
 8022700:	4b09      	ldr	r3, [pc, #36]	; (8022728 <tcp_free_acked_segments+0xf4>)
 8022702:	681b      	ldr	r3, [r3, #0]
 8022704:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8022706:	2b00      	cmp	r3, #0
 8022708:	dd9c      	ble.n	8022644 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 802270a:	68bb      	ldr	r3, [r7, #8]
}
 802270c:	4618      	mov	r0, r3
 802270e:	3718      	adds	r7, #24
 8022710:	46bd      	mov	sp, r7
 8022712:	bdb0      	pop	{r4, r5, r7, pc}
 8022714:	08029808 	.word	0x08029808
 8022718:	08029ac8 	.word	0x08029ac8
 802271c:	08029854 	.word	0x08029854
 8022720:	200196e8 	.word	0x200196e8
 8022724:	08029af0 	.word	0x08029af0
 8022728:	200196e4 	.word	0x200196e4

0802272c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 802272c:	b5b0      	push	{r4, r5, r7, lr}
 802272e:	b08c      	sub	sp, #48	; 0x30
 8022730:	af00      	add	r7, sp, #0
 8022732:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8022734:	2300      	movs	r3, #0
 8022736:	62bb      	str	r3, [r7, #40]	; 0x28

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8022738:	687b      	ldr	r3, [r7, #4]
 802273a:	2b00      	cmp	r3, #0
 802273c:	d106      	bne.n	802274c <tcp_receive+0x20>
 802273e:	4ba5      	ldr	r3, [pc, #660]	; (80229d4 <tcp_receive+0x2a8>)
 8022740:	f240 427b 	movw	r2, #1147	; 0x47b
 8022744:	49a4      	ldr	r1, [pc, #656]	; (80229d8 <tcp_receive+0x2ac>)
 8022746:	48a5      	ldr	r0, [pc, #660]	; (80229dc <tcp_receive+0x2b0>)
 8022748:	f003 fdf2 	bl	8026330 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 802274c:	687b      	ldr	r3, [r7, #4]
 802274e:	7d1b      	ldrb	r3, [r3, #20]
 8022750:	2b03      	cmp	r3, #3
 8022752:	d806      	bhi.n	8022762 <tcp_receive+0x36>
 8022754:	4b9f      	ldr	r3, [pc, #636]	; (80229d4 <tcp_receive+0x2a8>)
 8022756:	f240 427c 	movw	r2, #1148	; 0x47c
 802275a:	49a1      	ldr	r1, [pc, #644]	; (80229e0 <tcp_receive+0x2b4>)
 802275c:	489f      	ldr	r0, [pc, #636]	; (80229dc <tcp_receive+0x2b0>)
 802275e:	f003 fde7 	bl	8026330 <iprintf>

  if (flags & TCP_ACK) {
 8022762:	4ba0      	ldr	r3, [pc, #640]	; (80229e4 <tcp_receive+0x2b8>)
 8022764:	781b      	ldrb	r3, [r3, #0]
 8022766:	f003 0310 	and.w	r3, r3, #16
 802276a:	2b00      	cmp	r3, #0
 802276c:	f000 825e 	beq.w	8022c2c <tcp_receive+0x500>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8022770:	687b      	ldr	r3, [r7, #4]
 8022772:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8022776:	461a      	mov	r2, r3
 8022778:	687b      	ldr	r3, [r7, #4]
 802277a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802277c:	4413      	add	r3, r2
 802277e:	61fb      	str	r3, [r7, #28]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8022780:	687b      	ldr	r3, [r7, #4]
 8022782:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8022784:	4b98      	ldr	r3, [pc, #608]	; (80229e8 <tcp_receive+0x2bc>)
 8022786:	681b      	ldr	r3, [r3, #0]
 8022788:	1ad3      	subs	r3, r2, r3
 802278a:	2b00      	cmp	r3, #0
 802278c:	db1b      	blt.n	80227c6 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 802278e:	687b      	ldr	r3, [r7, #4]
 8022790:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8022792:	4b95      	ldr	r3, [pc, #596]	; (80229e8 <tcp_receive+0x2bc>)
 8022794:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8022796:	429a      	cmp	r2, r3
 8022798:	d106      	bne.n	80227a8 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 802279a:	687b      	ldr	r3, [r7, #4]
 802279c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 802279e:	4b93      	ldr	r3, [pc, #588]	; (80229ec <tcp_receive+0x2c0>)
 80227a0:	681b      	ldr	r3, [r3, #0]
 80227a2:	1ad3      	subs	r3, r2, r3
 80227a4:	2b00      	cmp	r3, #0
 80227a6:	db0e      	blt.n	80227c6 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80227a8:	687b      	ldr	r3, [r7, #4]
 80227aa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80227ac:	4b8f      	ldr	r3, [pc, #572]	; (80229ec <tcp_receive+0x2c0>)
 80227ae:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80227b0:	429a      	cmp	r2, r3
 80227b2:	d125      	bne.n	8022800 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80227b4:	4b8e      	ldr	r3, [pc, #568]	; (80229f0 <tcp_receive+0x2c4>)
 80227b6:	681b      	ldr	r3, [r3, #0]
 80227b8:	89db      	ldrh	r3, [r3, #14]
 80227ba:	b29a      	uxth	r2, r3
 80227bc:	687b      	ldr	r3, [r7, #4]
 80227be:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80227c2:	429a      	cmp	r2, r3
 80227c4:	d91c      	bls.n	8022800 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80227c6:	4b8a      	ldr	r3, [pc, #552]	; (80229f0 <tcp_receive+0x2c4>)
 80227c8:	681b      	ldr	r3, [r3, #0]
 80227ca:	89db      	ldrh	r3, [r3, #14]
 80227cc:	b29a      	uxth	r2, r3
 80227ce:	687b      	ldr	r3, [r7, #4]
 80227d0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80227d4:	687b      	ldr	r3, [r7, #4]
 80227d6:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 80227da:	687b      	ldr	r3, [r7, #4]
 80227dc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80227e0:	429a      	cmp	r2, r3
 80227e2:	d205      	bcs.n	80227f0 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80227e4:	687b      	ldr	r3, [r7, #4]
 80227e6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80227ea:	687b      	ldr	r3, [r7, #4]
 80227ec:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 80227f0:	4b7d      	ldr	r3, [pc, #500]	; (80229e8 <tcp_receive+0x2bc>)
 80227f2:	681a      	ldr	r2, [r3, #0]
 80227f4:	687b      	ldr	r3, [r7, #4]
 80227f6:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 80227f8:	4b7c      	ldr	r3, [pc, #496]	; (80229ec <tcp_receive+0x2c0>)
 80227fa:	681a      	ldr	r2, [r3, #0]
 80227fc:	687b      	ldr	r3, [r7, #4]
 80227fe:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8022800:	4b7a      	ldr	r3, [pc, #488]	; (80229ec <tcp_receive+0x2c0>)
 8022802:	681a      	ldr	r2, [r3, #0]
 8022804:	687b      	ldr	r3, [r7, #4]
 8022806:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8022808:	1ad3      	subs	r3, r2, r3
 802280a:	2b00      	cmp	r3, #0
 802280c:	dc5d      	bgt.n	80228ca <tcp_receive+0x19e>
      /* Clause 2 */
      if (tcplen == 0) {
 802280e:	4b79      	ldr	r3, [pc, #484]	; (80229f4 <tcp_receive+0x2c8>)
 8022810:	881b      	ldrh	r3, [r3, #0]
 8022812:	2b00      	cmp	r3, #0
 8022814:	d150      	bne.n	80228b8 <tcp_receive+0x18c>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8022816:	687b      	ldr	r3, [r7, #4]
 8022818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802281a:	687a      	ldr	r2, [r7, #4]
 802281c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8022820:	441a      	add	r2, r3
 8022822:	69fb      	ldr	r3, [r7, #28]
 8022824:	429a      	cmp	r2, r3
 8022826:	d147      	bne.n	80228b8 <tcp_receive+0x18c>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8022828:	687b      	ldr	r3, [r7, #4]
 802282a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 802282e:	2b00      	cmp	r3, #0
 8022830:	db42      	blt.n	80228b8 <tcp_receive+0x18c>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8022832:	687b      	ldr	r3, [r7, #4]
 8022834:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8022836:	4b6d      	ldr	r3, [pc, #436]	; (80229ec <tcp_receive+0x2c0>)
 8022838:	681b      	ldr	r3, [r3, #0]
 802283a:	429a      	cmp	r2, r3
 802283c:	d13c      	bne.n	80228b8 <tcp_receive+0x18c>
              found_dupack = 1;
 802283e:	2301      	movs	r3, #1
 8022840:	62bb      	str	r3, [r7, #40]	; 0x28
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8022842:	687b      	ldr	r3, [r7, #4]
 8022844:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8022848:	3301      	adds	r3, #1
 802284a:	b2da      	uxtb	r2, r3
 802284c:	687b      	ldr	r3, [r7, #4]
 802284e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8022852:	429a      	cmp	r2, r3
 8022854:	d907      	bls.n	8022866 <tcp_receive+0x13a>
                ++pcb->dupacks;
 8022856:	687b      	ldr	r3, [r7, #4]
 8022858:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 802285c:	3301      	adds	r3, #1
 802285e:	b2da      	uxtb	r2, r3
 8022860:	687b      	ldr	r3, [r7, #4]
 8022862:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8022866:	687b      	ldr	r3, [r7, #4]
 8022868:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 802286c:	2b03      	cmp	r3, #3
 802286e:	d91b      	bls.n	80228a8 <tcp_receive+0x17c>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8022870:	687b      	ldr	r3, [r7, #4]
 8022872:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8022876:	687b      	ldr	r3, [r7, #4]
 8022878:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 802287a:	4413      	add	r3, r2
 802287c:	b29a      	uxth	r2, r3
 802287e:	687b      	ldr	r3, [r7, #4]
 8022880:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8022884:	429a      	cmp	r2, r3
 8022886:	d30a      	bcc.n	802289e <tcp_receive+0x172>
 8022888:	687b      	ldr	r3, [r7, #4]
 802288a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 802288e:	687b      	ldr	r3, [r7, #4]
 8022890:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8022892:	4413      	add	r3, r2
 8022894:	b29a      	uxth	r2, r3
 8022896:	687b      	ldr	r3, [r7, #4]
 8022898:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 802289c:	e004      	b.n	80228a8 <tcp_receive+0x17c>
 802289e:	687b      	ldr	r3, [r7, #4]
 80228a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80228a4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 80228a8:	687b      	ldr	r3, [r7, #4]
 80228aa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80228ae:	2b02      	cmp	r3, #2
 80228b0:	d902      	bls.n	80228b8 <tcp_receive+0x18c>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80228b2:	6878      	ldr	r0, [r7, #4]
 80228b4:	f002 f820 	bl	80248f8 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80228b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80228ba:	2b00      	cmp	r3, #0
 80228bc:	f040 815f 	bne.w	8022b7e <tcp_receive+0x452>
        pcb->dupacks = 0;
 80228c0:	687b      	ldr	r3, [r7, #4]
 80228c2:	2200      	movs	r2, #0
 80228c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80228c8:	e159      	b.n	8022b7e <tcp_receive+0x452>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80228ca:	4b48      	ldr	r3, [pc, #288]	; (80229ec <tcp_receive+0x2c0>)
 80228cc:	681a      	ldr	r2, [r3, #0]
 80228ce:	687b      	ldr	r3, [r7, #4]
 80228d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80228d2:	1ad3      	subs	r3, r2, r3
 80228d4:	3b01      	subs	r3, #1
 80228d6:	2b00      	cmp	r3, #0
 80228d8:	f2c0 814c 	blt.w	8022b74 <tcp_receive+0x448>
 80228dc:	4b43      	ldr	r3, [pc, #268]	; (80229ec <tcp_receive+0x2c0>)
 80228de:	681a      	ldr	r2, [r3, #0]
 80228e0:	687b      	ldr	r3, [r7, #4]
 80228e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80228e4:	1ad3      	subs	r3, r2, r3
 80228e6:	2b00      	cmp	r3, #0
 80228e8:	f300 8144 	bgt.w	8022b74 <tcp_receive+0x448>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80228ec:	687b      	ldr	r3, [r7, #4]
 80228ee:	8b5b      	ldrh	r3, [r3, #26]
 80228f0:	f003 0304 	and.w	r3, r3, #4
 80228f4:	2b00      	cmp	r3, #0
 80228f6:	d010      	beq.n	802291a <tcp_receive+0x1ee>
        tcp_clear_flags(pcb, TF_INFR);
 80228f8:	687b      	ldr	r3, [r7, #4]
 80228fa:	8b5b      	ldrh	r3, [r3, #26]
 80228fc:	f023 0304 	bic.w	r3, r3, #4
 8022900:	b29a      	uxth	r2, r3
 8022902:	687b      	ldr	r3, [r7, #4]
 8022904:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8022906:	687b      	ldr	r3, [r7, #4]
 8022908:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 802290c:	687b      	ldr	r3, [r7, #4]
 802290e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8022912:	687b      	ldr	r3, [r7, #4]
 8022914:	2200      	movs	r2, #0
 8022916:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 802291a:	687b      	ldr	r3, [r7, #4]
 802291c:	2200      	movs	r2, #0
 802291e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8022922:	687b      	ldr	r3, [r7, #4]
 8022924:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8022928:	10db      	asrs	r3, r3, #3
 802292a:	b21b      	sxth	r3, r3
 802292c:	b29a      	uxth	r2, r3
 802292e:	687b      	ldr	r3, [r7, #4]
 8022930:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8022934:	b29b      	uxth	r3, r3
 8022936:	4413      	add	r3, r2
 8022938:	b29b      	uxth	r3, r3
 802293a:	b21a      	sxth	r2, r3
 802293c:	687b      	ldr	r3, [r7, #4]
 802293e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8022942:	4b2a      	ldr	r3, [pc, #168]	; (80229ec <tcp_receive+0x2c0>)
 8022944:	681b      	ldr	r3, [r3, #0]
 8022946:	b29a      	uxth	r2, r3
 8022948:	687b      	ldr	r3, [r7, #4]
 802294a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802294c:	b29b      	uxth	r3, r3
 802294e:	1ad3      	subs	r3, r2, r3
 8022950:	837b      	strh	r3, [r7, #26]

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8022952:	687b      	ldr	r3, [r7, #4]
 8022954:	2200      	movs	r2, #0
 8022956:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 802295a:	4b24      	ldr	r3, [pc, #144]	; (80229ec <tcp_receive+0x2c0>)
 802295c:	681a      	ldr	r2, [r3, #0]
 802295e:	687b      	ldr	r3, [r7, #4]
 8022960:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8022962:	687b      	ldr	r3, [r7, #4]
 8022964:	7d1b      	ldrb	r3, [r3, #20]
 8022966:	2b03      	cmp	r3, #3
 8022968:	f240 8095 	bls.w	8022a96 <tcp_receive+0x36a>
        if (pcb->cwnd < pcb->ssthresh) {
 802296c:	687b      	ldr	r3, [r7, #4]
 802296e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8022972:	687b      	ldr	r3, [r7, #4]
 8022974:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8022978:	429a      	cmp	r2, r3
 802297a:	d243      	bcs.n	8022a04 <tcp_receive+0x2d8>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 802297c:	687b      	ldr	r3, [r7, #4]
 802297e:	8b5b      	ldrh	r3, [r3, #26]
 8022980:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8022984:	2b00      	cmp	r3, #0
 8022986:	d001      	beq.n	802298c <tcp_receive+0x260>
 8022988:	2301      	movs	r3, #1
 802298a:	e000      	b.n	802298e <tcp_receive+0x262>
 802298c:	2302      	movs	r3, #2
 802298e:	767b      	strb	r3, [r7, #25]
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8022990:	7e7b      	ldrb	r3, [r7, #25]
 8022992:	b29a      	uxth	r2, r3
 8022994:	687b      	ldr	r3, [r7, #4]
 8022996:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8022998:	fb12 f303 	smulbb	r3, r2, r3
 802299c:	b29a      	uxth	r2, r3
 802299e:	8b7b      	ldrh	r3, [r7, #26]
 80229a0:	4293      	cmp	r3, r2
 80229a2:	bf28      	it	cs
 80229a4:	4613      	movcs	r3, r2
 80229a6:	82fb      	strh	r3, [r7, #22]
          TCP_WND_INC(pcb->cwnd, increase);
 80229a8:	687b      	ldr	r3, [r7, #4]
 80229aa:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80229ae:	8afb      	ldrh	r3, [r7, #22]
 80229b0:	4413      	add	r3, r2
 80229b2:	b29a      	uxth	r2, r3
 80229b4:	687b      	ldr	r3, [r7, #4]
 80229b6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80229ba:	429a      	cmp	r2, r3
 80229bc:	d31c      	bcc.n	80229f8 <tcp_receive+0x2cc>
 80229be:	687b      	ldr	r3, [r7, #4]
 80229c0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80229c4:	8afb      	ldrh	r3, [r7, #22]
 80229c6:	4413      	add	r3, r2
 80229c8:	b29a      	uxth	r2, r3
 80229ca:	687b      	ldr	r3, [r7, #4]
 80229cc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80229d0:	e061      	b.n	8022a96 <tcp_receive+0x36a>
 80229d2:	bf00      	nop
 80229d4:	08029808 	.word	0x08029808
 80229d8:	08029b10 	.word	0x08029b10
 80229dc:	08029854 	.word	0x08029854
 80229e0:	08029b2c 	.word	0x08029b2c
 80229e4:	200196ec 	.word	0x200196ec
 80229e8:	200196e0 	.word	0x200196e0
 80229ec:	200196e4 	.word	0x200196e4
 80229f0:	200196d0 	.word	0x200196d0
 80229f4:	200196ea 	.word	0x200196ea
 80229f8:	687b      	ldr	r3, [r7, #4]
 80229fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80229fe:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8022a02:	e048      	b.n	8022a96 <tcp_receive+0x36a>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8022a04:	687b      	ldr	r3, [r7, #4]
 8022a06:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8022a0a:	8b7b      	ldrh	r3, [r7, #26]
 8022a0c:	4413      	add	r3, r2
 8022a0e:	b29a      	uxth	r2, r3
 8022a10:	687b      	ldr	r3, [r7, #4]
 8022a12:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8022a16:	429a      	cmp	r2, r3
 8022a18:	d309      	bcc.n	8022a2e <tcp_receive+0x302>
 8022a1a:	687b      	ldr	r3, [r7, #4]
 8022a1c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8022a20:	8b7b      	ldrh	r3, [r7, #26]
 8022a22:	4413      	add	r3, r2
 8022a24:	b29a      	uxth	r2, r3
 8022a26:	687b      	ldr	r3, [r7, #4]
 8022a28:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8022a2c:	e004      	b.n	8022a38 <tcp_receive+0x30c>
 8022a2e:	687b      	ldr	r3, [r7, #4]
 8022a30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8022a34:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8022a38:	687b      	ldr	r3, [r7, #4]
 8022a3a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8022a3e:	687b      	ldr	r3, [r7, #4]
 8022a40:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8022a44:	429a      	cmp	r2, r3
 8022a46:	d326      	bcc.n	8022a96 <tcp_receive+0x36a>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8022a48:	687b      	ldr	r3, [r7, #4]
 8022a4a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8022a4e:	687b      	ldr	r3, [r7, #4]
 8022a50:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8022a54:	1ad3      	subs	r3, r2, r3
 8022a56:	b29a      	uxth	r2, r3
 8022a58:	687b      	ldr	r3, [r7, #4]
 8022a5a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8022a5e:	687b      	ldr	r3, [r7, #4]
 8022a60:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8022a64:	687b      	ldr	r3, [r7, #4]
 8022a66:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8022a68:	4413      	add	r3, r2
 8022a6a:	b29a      	uxth	r2, r3
 8022a6c:	687b      	ldr	r3, [r7, #4]
 8022a6e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8022a72:	429a      	cmp	r2, r3
 8022a74:	d30a      	bcc.n	8022a8c <tcp_receive+0x360>
 8022a76:	687b      	ldr	r3, [r7, #4]
 8022a78:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8022a7c:	687b      	ldr	r3, [r7, #4]
 8022a7e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8022a80:	4413      	add	r3, r2
 8022a82:	b29a      	uxth	r2, r3
 8022a84:	687b      	ldr	r3, [r7, #4]
 8022a86:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8022a8a:	e004      	b.n	8022a96 <tcp_receive+0x36a>
 8022a8c:	687b      	ldr	r3, [r7, #4]
 8022a8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8022a92:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8022a96:	687b      	ldr	r3, [r7, #4]
 8022a98:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8022a9a:	687b      	ldr	r3, [r7, #4]
 8022a9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8022a9e:	4a91      	ldr	r2, [pc, #580]	; (8022ce4 <tcp_receive+0x5b8>)
 8022aa0:	6878      	ldr	r0, [r7, #4]
 8022aa2:	f7ff fdc7 	bl	8022634 <tcp_free_acked_segments>
 8022aa6:	4602      	mov	r2, r0
 8022aa8:	687b      	ldr	r3, [r7, #4]
 8022aaa:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8022aac:	687b      	ldr	r3, [r7, #4]
 8022aae:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8022ab0:	687b      	ldr	r3, [r7, #4]
 8022ab2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8022ab4:	4a8c      	ldr	r2, [pc, #560]	; (8022ce8 <tcp_receive+0x5bc>)
 8022ab6:	6878      	ldr	r0, [r7, #4]
 8022ab8:	f7ff fdbc 	bl	8022634 <tcp_free_acked_segments>
 8022abc:	4602      	mov	r2, r0
 8022abe:	687b      	ldr	r3, [r7, #4]
 8022ac0:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8022ac2:	687b      	ldr	r3, [r7, #4]
 8022ac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8022ac6:	2b00      	cmp	r3, #0
 8022ac8:	d104      	bne.n	8022ad4 <tcp_receive+0x3a8>
        pcb->rtime = -1;
 8022aca:	687b      	ldr	r3, [r7, #4]
 8022acc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8022ad0:	861a      	strh	r2, [r3, #48]	; 0x30
 8022ad2:	e002      	b.n	8022ada <tcp_receive+0x3ae>
      } else {
        pcb->rtime = 0;
 8022ad4:	687b      	ldr	r3, [r7, #4]
 8022ad6:	2200      	movs	r2, #0
 8022ad8:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8022ada:	687b      	ldr	r3, [r7, #4]
 8022adc:	2200      	movs	r2, #0
 8022ade:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8022ae0:	687b      	ldr	r3, [r7, #4]
 8022ae2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8022ae4:	2b00      	cmp	r3, #0
 8022ae6:	d103      	bne.n	8022af0 <tcp_receive+0x3c4>
        pcb->unsent_oversize = 0;
 8022ae8:	687b      	ldr	r3, [r7, #4]
 8022aea:	2200      	movs	r2, #0
 8022aec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8022af0:	687b      	ldr	r3, [r7, #4]
 8022af2:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8022af6:	4b7d      	ldr	r3, [pc, #500]	; (8022cec <tcp_receive+0x5c0>)
 8022af8:	881b      	ldrh	r3, [r3, #0]
 8022afa:	4413      	add	r3, r2
 8022afc:	b29a      	uxth	r2, r3
 8022afe:	687b      	ldr	r3, [r7, #4]
 8022b00:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8022b04:	687b      	ldr	r3, [r7, #4]
 8022b06:	8b5b      	ldrh	r3, [r3, #26]
 8022b08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8022b0c:	2b00      	cmp	r3, #0
 8022b0e:	d035      	beq.n	8022b7c <tcp_receive+0x450>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8022b10:	687b      	ldr	r3, [r7, #4]
 8022b12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8022b14:	2b00      	cmp	r3, #0
 8022b16:	d118      	bne.n	8022b4a <tcp_receive+0x41e>
          if ((pcb->unsent == NULL) ||
 8022b18:	687b      	ldr	r3, [r7, #4]
 8022b1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8022b1c:	2b00      	cmp	r3, #0
 8022b1e:	d00c      	beq.n	8022b3a <tcp_receive+0x40e>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8022b20:	687b      	ldr	r3, [r7, #4]
 8022b22:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8022b24:	687b      	ldr	r3, [r7, #4]
 8022b26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8022b28:	68db      	ldr	r3, [r3, #12]
 8022b2a:	685b      	ldr	r3, [r3, #4]
 8022b2c:	4618      	mov	r0, r3
 8022b2e:	f7f6 fb10 	bl	8019152 <lwip_htonl>
 8022b32:	4603      	mov	r3, r0
 8022b34:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8022b36:	2b00      	cmp	r3, #0
 8022b38:	dc20      	bgt.n	8022b7c <tcp_receive+0x450>
            tcp_clear_flags(pcb, TF_RTO);
 8022b3a:	687b      	ldr	r3, [r7, #4]
 8022b3c:	8b5b      	ldrh	r3, [r3, #26]
 8022b3e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8022b42:	b29a      	uxth	r2, r3
 8022b44:	687b      	ldr	r3, [r7, #4]
 8022b46:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8022b48:	e018      	b.n	8022b7c <tcp_receive+0x450>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8022b4a:	687b      	ldr	r3, [r7, #4]
 8022b4c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8022b4e:	687b      	ldr	r3, [r7, #4]
 8022b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8022b52:	68db      	ldr	r3, [r3, #12]
 8022b54:	685b      	ldr	r3, [r3, #4]
 8022b56:	4618      	mov	r0, r3
 8022b58:	f7f6 fafb 	bl	8019152 <lwip_htonl>
 8022b5c:	4603      	mov	r3, r0
 8022b5e:	1ae3      	subs	r3, r4, r3
 8022b60:	2b00      	cmp	r3, #0
 8022b62:	dc0b      	bgt.n	8022b7c <tcp_receive+0x450>
          tcp_clear_flags(pcb, TF_RTO);
 8022b64:	687b      	ldr	r3, [r7, #4]
 8022b66:	8b5b      	ldrh	r3, [r3, #26]
 8022b68:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8022b6c:	b29a      	uxth	r2, r3
 8022b6e:	687b      	ldr	r3, [r7, #4]
 8022b70:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8022b72:	e003      	b.n	8022b7c <tcp_receive+0x450>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8022b74:	6878      	ldr	r0, [r7, #4]
 8022b76:	f002 f8bd 	bl	8024cf4 <tcp_send_empty_ack>
 8022b7a:	e000      	b.n	8022b7e <tcp_receive+0x452>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8022b7c:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8022b7e:	687b      	ldr	r3, [r7, #4]
 8022b80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8022b82:	2b00      	cmp	r3, #0
 8022b84:	d052      	beq.n	8022c2c <tcp_receive+0x500>
 8022b86:	687b      	ldr	r3, [r7, #4]
 8022b88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8022b8a:	4b59      	ldr	r3, [pc, #356]	; (8022cf0 <tcp_receive+0x5c4>)
 8022b8c:	681b      	ldr	r3, [r3, #0]
 8022b8e:	1ad3      	subs	r3, r2, r3
 8022b90:	2b00      	cmp	r3, #0
 8022b92:	da4b      	bge.n	8022c2c <tcp_receive+0x500>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8022b94:	4b57      	ldr	r3, [pc, #348]	; (8022cf4 <tcp_receive+0x5c8>)
 8022b96:	681b      	ldr	r3, [r3, #0]
 8022b98:	b29a      	uxth	r2, r3
 8022b9a:	687b      	ldr	r3, [r7, #4]
 8022b9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8022b9e:	b29b      	uxth	r3, r3
 8022ba0:	1ad3      	subs	r3, r2, r3
 8022ba2:	b29b      	uxth	r3, r3
 8022ba4:	85fb      	strh	r3, [r7, #46]	; 0x2e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8022ba6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8022ba8:	687b      	ldr	r3, [r7, #4]
 8022baa:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8022bae:	10db      	asrs	r3, r3, #3
 8022bb0:	b21b      	sxth	r3, r3
 8022bb2:	b29b      	uxth	r3, r3
 8022bb4:	1ad3      	subs	r3, r2, r3
 8022bb6:	b29b      	uxth	r3, r3
 8022bb8:	85fb      	strh	r3, [r7, #46]	; 0x2e
      pcb->sa = (s16_t)(pcb->sa + m);
 8022bba:	687b      	ldr	r3, [r7, #4]
 8022bbc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8022bc0:	b29a      	uxth	r2, r3
 8022bc2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8022bc4:	4413      	add	r3, r2
 8022bc6:	b29b      	uxth	r3, r3
 8022bc8:	b21a      	sxth	r2, r3
 8022bca:	687b      	ldr	r3, [r7, #4]
 8022bcc:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8022bce:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8022bd2:	2b00      	cmp	r3, #0
 8022bd4:	da03      	bge.n	8022bde <tcp_receive+0x4b2>
        m = (s16_t) - m;
 8022bd6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8022bd8:	425b      	negs	r3, r3
 8022bda:	b29b      	uxth	r3, r3
 8022bdc:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8022bde:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8022be0:	687b      	ldr	r3, [r7, #4]
 8022be2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8022be6:	109b      	asrs	r3, r3, #2
 8022be8:	b21b      	sxth	r3, r3
 8022bea:	b29b      	uxth	r3, r3
 8022bec:	1ad3      	subs	r3, r2, r3
 8022bee:	b29b      	uxth	r3, r3
 8022bf0:	85fb      	strh	r3, [r7, #46]	; 0x2e
      pcb->sv = (s16_t)(pcb->sv + m);
 8022bf2:	687b      	ldr	r3, [r7, #4]
 8022bf4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8022bf8:	b29a      	uxth	r2, r3
 8022bfa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8022bfc:	4413      	add	r3, r2
 8022bfe:	b29b      	uxth	r3, r3
 8022c00:	b21a      	sxth	r2, r3
 8022c02:	687b      	ldr	r3, [r7, #4]
 8022c04:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8022c06:	687b      	ldr	r3, [r7, #4]
 8022c08:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8022c0c:	10db      	asrs	r3, r3, #3
 8022c0e:	b21b      	sxth	r3, r3
 8022c10:	b29a      	uxth	r2, r3
 8022c12:	687b      	ldr	r3, [r7, #4]
 8022c14:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8022c18:	b29b      	uxth	r3, r3
 8022c1a:	4413      	add	r3, r2
 8022c1c:	b29b      	uxth	r3, r3
 8022c1e:	b21a      	sxth	r2, r3
 8022c20:	687b      	ldr	r3, [r7, #4]
 8022c22:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8022c26:	687b      	ldr	r3, [r7, #4]
 8022c28:	2200      	movs	r2, #0
 8022c2a:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8022c2c:	4b32      	ldr	r3, [pc, #200]	; (8022cf8 <tcp_receive+0x5cc>)
 8022c2e:	881b      	ldrh	r3, [r3, #0]
 8022c30:	2b00      	cmp	r3, #0
 8022c32:	f000 81c7 	beq.w	8022fc4 <tcp_receive+0x898>
 8022c36:	687b      	ldr	r3, [r7, #4]
 8022c38:	7d1b      	ldrb	r3, [r3, #20]
 8022c3a:	2b06      	cmp	r3, #6
 8022c3c:	f200 81c2 	bhi.w	8022fc4 <tcp_receive+0x898>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8022c40:	687b      	ldr	r3, [r7, #4]
 8022c42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8022c44:	4b2d      	ldr	r3, [pc, #180]	; (8022cfc <tcp_receive+0x5d0>)
 8022c46:	681b      	ldr	r3, [r3, #0]
 8022c48:	1ad3      	subs	r3, r2, r3
 8022c4a:	3b01      	subs	r3, #1
 8022c4c:	2b00      	cmp	r3, #0
 8022c4e:	f2c0 8085 	blt.w	8022d5c <tcp_receive+0x630>
 8022c52:	687b      	ldr	r3, [r7, #4]
 8022c54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8022c56:	4b28      	ldr	r3, [pc, #160]	; (8022cf8 <tcp_receive+0x5cc>)
 8022c58:	881b      	ldrh	r3, [r3, #0]
 8022c5a:	4619      	mov	r1, r3
 8022c5c:	4b27      	ldr	r3, [pc, #156]	; (8022cfc <tcp_receive+0x5d0>)
 8022c5e:	681b      	ldr	r3, [r3, #0]
 8022c60:	440b      	add	r3, r1
 8022c62:	1ad3      	subs	r3, r2, r3
 8022c64:	3301      	adds	r3, #1
 8022c66:	2b00      	cmp	r3, #0
 8022c68:	dc78      	bgt.n	8022d5c <tcp_receive+0x630>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8022c6a:	4b25      	ldr	r3, [pc, #148]	; (8022d00 <tcp_receive+0x5d4>)
 8022c6c:	685b      	ldr	r3, [r3, #4]
 8022c6e:	627b      	str	r3, [r7, #36]	; 0x24
      u32_t off32 = pcb->rcv_nxt - seqno;
 8022c70:	687b      	ldr	r3, [r7, #4]
 8022c72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8022c74:	4b21      	ldr	r3, [pc, #132]	; (8022cfc <tcp_receive+0x5d0>)
 8022c76:	681b      	ldr	r3, [r3, #0]
 8022c78:	1ad3      	subs	r3, r2, r3
 8022c7a:	613b      	str	r3, [r7, #16]
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8022c7c:	4b20      	ldr	r3, [pc, #128]	; (8022d00 <tcp_receive+0x5d4>)
 8022c7e:	685b      	ldr	r3, [r3, #4]
 8022c80:	2b00      	cmp	r3, #0
 8022c82:	d106      	bne.n	8022c92 <tcp_receive+0x566>
 8022c84:	4b1f      	ldr	r3, [pc, #124]	; (8022d04 <tcp_receive+0x5d8>)
 8022c86:	f240 5294 	movw	r2, #1428	; 0x594
 8022c8a:	491f      	ldr	r1, [pc, #124]	; (8022d08 <tcp_receive+0x5dc>)
 8022c8c:	481f      	ldr	r0, [pc, #124]	; (8022d0c <tcp_receive+0x5e0>)
 8022c8e:	f003 fb4f 	bl	8026330 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8022c92:	693b      	ldr	r3, [r7, #16]
 8022c94:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8022c98:	4293      	cmp	r3, r2
 8022c9a:	d906      	bls.n	8022caa <tcp_receive+0x57e>
 8022c9c:	4b19      	ldr	r3, [pc, #100]	; (8022d04 <tcp_receive+0x5d8>)
 8022c9e:	f240 5295 	movw	r2, #1429	; 0x595
 8022ca2:	491b      	ldr	r1, [pc, #108]	; (8022d10 <tcp_receive+0x5e4>)
 8022ca4:	4819      	ldr	r0, [pc, #100]	; (8022d0c <tcp_receive+0x5e0>)
 8022ca6:	f003 fb43 	bl	8026330 <iprintf>
      off = (u16_t)off32;
 8022caa:	693b      	ldr	r3, [r7, #16]
 8022cac:	847b      	strh	r3, [r7, #34]	; 0x22
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8022cae:	4b14      	ldr	r3, [pc, #80]	; (8022d00 <tcp_receive+0x5d4>)
 8022cb0:	685b      	ldr	r3, [r3, #4]
 8022cb2:	891b      	ldrh	r3, [r3, #8]
 8022cb4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8022cb6:	429a      	cmp	r2, r3
 8022cb8:	d906      	bls.n	8022cc8 <tcp_receive+0x59c>
 8022cba:	4b12      	ldr	r3, [pc, #72]	; (8022d04 <tcp_receive+0x5d8>)
 8022cbc:	f240 5297 	movw	r2, #1431	; 0x597
 8022cc0:	4914      	ldr	r1, [pc, #80]	; (8022d14 <tcp_receive+0x5e8>)
 8022cc2:	4812      	ldr	r0, [pc, #72]	; (8022d0c <tcp_receive+0x5e0>)
 8022cc4:	f003 fb34 	bl	8026330 <iprintf>
      inseg.len -= off;
 8022cc8:	4b0d      	ldr	r3, [pc, #52]	; (8022d00 <tcp_receive+0x5d4>)
 8022cca:	891a      	ldrh	r2, [r3, #8]
 8022ccc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8022cce:	1ad3      	subs	r3, r2, r3
 8022cd0:	b29a      	uxth	r2, r3
 8022cd2:	4b0b      	ldr	r3, [pc, #44]	; (8022d00 <tcp_receive+0x5d4>)
 8022cd4:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8022cd6:	4b0a      	ldr	r3, [pc, #40]	; (8022d00 <tcp_receive+0x5d4>)
 8022cd8:	685b      	ldr	r3, [r3, #4]
 8022cda:	891a      	ldrh	r2, [r3, #8]
 8022cdc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8022cde:	1ad3      	subs	r3, r2, r3
 8022ce0:	81fb      	strh	r3, [r7, #14]
      while (p->len < off) {
 8022ce2:	e027      	b.n	8022d34 <tcp_receive+0x608>
 8022ce4:	08029b48 	.word	0x08029b48
 8022ce8:	08029b50 	.word	0x08029b50
 8022cec:	200196e8 	.word	0x200196e8
 8022cf0:	200196e4 	.word	0x200196e4
 8022cf4:	20022ab8 	.word	0x20022ab8
 8022cf8:	200196ea 	.word	0x200196ea
 8022cfc:	200196e0 	.word	0x200196e0
 8022d00:	200196c0 	.word	0x200196c0
 8022d04:	08029808 	.word	0x08029808
 8022d08:	08029b58 	.word	0x08029b58
 8022d0c:	08029854 	.word	0x08029854
 8022d10:	08029b68 	.word	0x08029b68
 8022d14:	08029b78 	.word	0x08029b78
        off -= p->len;
 8022d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022d1a:	895b      	ldrh	r3, [r3, #10]
 8022d1c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8022d1e:	1ad3      	subs	r3, r2, r3
 8022d20:	847b      	strh	r3, [r7, #34]	; 0x22
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8022d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022d24:	89fa      	ldrh	r2, [r7, #14]
 8022d26:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8022d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022d2a:	2200      	movs	r2, #0
 8022d2c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8022d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022d30:	681b      	ldr	r3, [r3, #0]
 8022d32:	627b      	str	r3, [r7, #36]	; 0x24
      while (p->len < off) {
 8022d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022d36:	895b      	ldrh	r3, [r3, #10]
 8022d38:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8022d3a:	429a      	cmp	r2, r3
 8022d3c:	d8ec      	bhi.n	8022d18 <tcp_receive+0x5ec>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8022d3e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8022d40:	4619      	mov	r1, r3
 8022d42:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8022d44:	f7fc f86a 	bl	801ee1c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8022d48:	4b95      	ldr	r3, [pc, #596]	; (8022fa0 <tcp_receive+0x874>)
 8022d4a:	68db      	ldr	r3, [r3, #12]
 8022d4c:	687a      	ldr	r2, [r7, #4]
 8022d4e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8022d50:	4994      	ldr	r1, [pc, #592]	; (8022fa4 <tcp_receive+0x878>)
 8022d52:	600a      	str	r2, [r1, #0]
 8022d54:	4a93      	ldr	r2, [pc, #588]	; (8022fa4 <tcp_receive+0x878>)
 8022d56:	6812      	ldr	r2, [r2, #0]
 8022d58:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8022d5a:	e00d      	b.n	8022d78 <tcp_receive+0x64c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8022d5c:	4b91      	ldr	r3, [pc, #580]	; (8022fa4 <tcp_receive+0x878>)
 8022d5e:	681a      	ldr	r2, [r3, #0]
 8022d60:	687b      	ldr	r3, [r7, #4]
 8022d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022d64:	1ad3      	subs	r3, r2, r3
 8022d66:	2b00      	cmp	r3, #0
 8022d68:	da06      	bge.n	8022d78 <tcp_receive+0x64c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8022d6a:	687b      	ldr	r3, [r7, #4]
 8022d6c:	8b5b      	ldrh	r3, [r3, #26]
 8022d6e:	f043 0302 	orr.w	r3, r3, #2
 8022d72:	b29a      	uxth	r2, r3
 8022d74:	687b      	ldr	r3, [r7, #4]
 8022d76:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8022d78:	4b8a      	ldr	r3, [pc, #552]	; (8022fa4 <tcp_receive+0x878>)
 8022d7a:	681a      	ldr	r2, [r3, #0]
 8022d7c:	687b      	ldr	r3, [r7, #4]
 8022d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022d80:	1ad3      	subs	r3, r2, r3
 8022d82:	2b00      	cmp	r3, #0
 8022d84:	f2c0 8106 	blt.w	8022f94 <tcp_receive+0x868>
 8022d88:	4b86      	ldr	r3, [pc, #536]	; (8022fa4 <tcp_receive+0x878>)
 8022d8a:	681a      	ldr	r2, [r3, #0]
 8022d8c:	687b      	ldr	r3, [r7, #4]
 8022d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022d90:	6879      	ldr	r1, [r7, #4]
 8022d92:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8022d94:	440b      	add	r3, r1
 8022d96:	1ad3      	subs	r3, r2, r3
 8022d98:	3301      	adds	r3, #1
 8022d9a:	2b00      	cmp	r3, #0
 8022d9c:	f300 80fa 	bgt.w	8022f94 <tcp_receive+0x868>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8022da0:	687b      	ldr	r3, [r7, #4]
 8022da2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8022da4:	4b7f      	ldr	r3, [pc, #508]	; (8022fa4 <tcp_receive+0x878>)
 8022da6:	681b      	ldr	r3, [r3, #0]
 8022da8:	429a      	cmp	r2, r3
 8022daa:	f040 80ef 	bne.w	8022f8c <tcp_receive+0x860>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8022dae:	4b7c      	ldr	r3, [pc, #496]	; (8022fa0 <tcp_receive+0x874>)
 8022db0:	891c      	ldrh	r4, [r3, #8]
 8022db2:	4b7b      	ldr	r3, [pc, #492]	; (8022fa0 <tcp_receive+0x874>)
 8022db4:	68db      	ldr	r3, [r3, #12]
 8022db6:	899b      	ldrh	r3, [r3, #12]
 8022db8:	b29b      	uxth	r3, r3
 8022dba:	4618      	mov	r0, r3
 8022dbc:	f7f6 f9b4 	bl	8019128 <lwip_htons>
 8022dc0:	4603      	mov	r3, r0
 8022dc2:	b2db      	uxtb	r3, r3
 8022dc4:	f003 0303 	and.w	r3, r3, #3
 8022dc8:	2b00      	cmp	r3, #0
 8022dca:	d001      	beq.n	8022dd0 <tcp_receive+0x6a4>
 8022dcc:	2301      	movs	r3, #1
 8022dce:	e000      	b.n	8022dd2 <tcp_receive+0x6a6>
 8022dd0:	2300      	movs	r3, #0
 8022dd2:	4423      	add	r3, r4
 8022dd4:	b29a      	uxth	r2, r3
 8022dd6:	4b74      	ldr	r3, [pc, #464]	; (8022fa8 <tcp_receive+0x87c>)
 8022dd8:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8022dda:	687b      	ldr	r3, [r7, #4]
 8022ddc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8022dde:	4b72      	ldr	r3, [pc, #456]	; (8022fa8 <tcp_receive+0x87c>)
 8022de0:	881b      	ldrh	r3, [r3, #0]
 8022de2:	429a      	cmp	r2, r3
 8022de4:	d275      	bcs.n	8022ed2 <tcp_receive+0x7a6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8022de6:	4b6e      	ldr	r3, [pc, #440]	; (8022fa0 <tcp_receive+0x874>)
 8022de8:	68db      	ldr	r3, [r3, #12]
 8022dea:	899b      	ldrh	r3, [r3, #12]
 8022dec:	b29b      	uxth	r3, r3
 8022dee:	4618      	mov	r0, r3
 8022df0:	f7f6 f99a 	bl	8019128 <lwip_htons>
 8022df4:	4603      	mov	r3, r0
 8022df6:	b2db      	uxtb	r3, r3
 8022df8:	f003 0301 	and.w	r3, r3, #1
 8022dfc:	2b00      	cmp	r3, #0
 8022dfe:	d01f      	beq.n	8022e40 <tcp_receive+0x714>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8022e00:	4b67      	ldr	r3, [pc, #412]	; (8022fa0 <tcp_receive+0x874>)
 8022e02:	68dc      	ldr	r4, [r3, #12]
 8022e04:	4b66      	ldr	r3, [pc, #408]	; (8022fa0 <tcp_receive+0x874>)
 8022e06:	68db      	ldr	r3, [r3, #12]
 8022e08:	899b      	ldrh	r3, [r3, #12]
 8022e0a:	b29b      	uxth	r3, r3
 8022e0c:	b21b      	sxth	r3, r3
 8022e0e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8022e12:	b21d      	sxth	r5, r3
 8022e14:	4b62      	ldr	r3, [pc, #392]	; (8022fa0 <tcp_receive+0x874>)
 8022e16:	68db      	ldr	r3, [r3, #12]
 8022e18:	899b      	ldrh	r3, [r3, #12]
 8022e1a:	b29b      	uxth	r3, r3
 8022e1c:	4618      	mov	r0, r3
 8022e1e:	f7f6 f983 	bl	8019128 <lwip_htons>
 8022e22:	4603      	mov	r3, r0
 8022e24:	b2db      	uxtb	r3, r3
 8022e26:	b29b      	uxth	r3, r3
 8022e28:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8022e2c:	b29b      	uxth	r3, r3
 8022e2e:	4618      	mov	r0, r3
 8022e30:	f7f6 f97a 	bl	8019128 <lwip_htons>
 8022e34:	4603      	mov	r3, r0
 8022e36:	b21b      	sxth	r3, r3
 8022e38:	432b      	orrs	r3, r5
 8022e3a:	b21b      	sxth	r3, r3
 8022e3c:	b29b      	uxth	r3, r3
 8022e3e:	81a3      	strh	r3, [r4, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8022e40:	687b      	ldr	r3, [r7, #4]
 8022e42:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8022e44:	4b56      	ldr	r3, [pc, #344]	; (8022fa0 <tcp_receive+0x874>)
 8022e46:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8022e48:	4b55      	ldr	r3, [pc, #340]	; (8022fa0 <tcp_receive+0x874>)
 8022e4a:	68db      	ldr	r3, [r3, #12]
 8022e4c:	899b      	ldrh	r3, [r3, #12]
 8022e4e:	b29b      	uxth	r3, r3
 8022e50:	4618      	mov	r0, r3
 8022e52:	f7f6 f969 	bl	8019128 <lwip_htons>
 8022e56:	4603      	mov	r3, r0
 8022e58:	b2db      	uxtb	r3, r3
 8022e5a:	f003 0302 	and.w	r3, r3, #2
 8022e5e:	2b00      	cmp	r3, #0
 8022e60:	d005      	beq.n	8022e6e <tcp_receive+0x742>
            inseg.len -= 1;
 8022e62:	4b4f      	ldr	r3, [pc, #316]	; (8022fa0 <tcp_receive+0x874>)
 8022e64:	891b      	ldrh	r3, [r3, #8]
 8022e66:	3b01      	subs	r3, #1
 8022e68:	b29a      	uxth	r2, r3
 8022e6a:	4b4d      	ldr	r3, [pc, #308]	; (8022fa0 <tcp_receive+0x874>)
 8022e6c:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8022e6e:	4b4c      	ldr	r3, [pc, #304]	; (8022fa0 <tcp_receive+0x874>)
 8022e70:	685a      	ldr	r2, [r3, #4]
 8022e72:	4b4b      	ldr	r3, [pc, #300]	; (8022fa0 <tcp_receive+0x874>)
 8022e74:	891b      	ldrh	r3, [r3, #8]
 8022e76:	4619      	mov	r1, r3
 8022e78:	4610      	mov	r0, r2
 8022e7a:	f7fb fecd 	bl	801ec18 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8022e7e:	4b48      	ldr	r3, [pc, #288]	; (8022fa0 <tcp_receive+0x874>)
 8022e80:	891c      	ldrh	r4, [r3, #8]
 8022e82:	4b47      	ldr	r3, [pc, #284]	; (8022fa0 <tcp_receive+0x874>)
 8022e84:	68db      	ldr	r3, [r3, #12]
 8022e86:	899b      	ldrh	r3, [r3, #12]
 8022e88:	b29b      	uxth	r3, r3
 8022e8a:	4618      	mov	r0, r3
 8022e8c:	f7f6 f94c 	bl	8019128 <lwip_htons>
 8022e90:	4603      	mov	r3, r0
 8022e92:	b2db      	uxtb	r3, r3
 8022e94:	f003 0303 	and.w	r3, r3, #3
 8022e98:	2b00      	cmp	r3, #0
 8022e9a:	d001      	beq.n	8022ea0 <tcp_receive+0x774>
 8022e9c:	2301      	movs	r3, #1
 8022e9e:	e000      	b.n	8022ea2 <tcp_receive+0x776>
 8022ea0:	2300      	movs	r3, #0
 8022ea2:	4423      	add	r3, r4
 8022ea4:	b29a      	uxth	r2, r3
 8022ea6:	4b40      	ldr	r3, [pc, #256]	; (8022fa8 <tcp_receive+0x87c>)
 8022ea8:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8022eaa:	4b3f      	ldr	r3, [pc, #252]	; (8022fa8 <tcp_receive+0x87c>)
 8022eac:	881b      	ldrh	r3, [r3, #0]
 8022eae:	461a      	mov	r2, r3
 8022eb0:	4b3c      	ldr	r3, [pc, #240]	; (8022fa4 <tcp_receive+0x878>)
 8022eb2:	681b      	ldr	r3, [r3, #0]
 8022eb4:	441a      	add	r2, r3
 8022eb6:	687b      	ldr	r3, [r7, #4]
 8022eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022eba:	6879      	ldr	r1, [r7, #4]
 8022ebc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8022ebe:	440b      	add	r3, r1
 8022ec0:	429a      	cmp	r2, r3
 8022ec2:	d006      	beq.n	8022ed2 <tcp_receive+0x7a6>
 8022ec4:	4b39      	ldr	r3, [pc, #228]	; (8022fac <tcp_receive+0x880>)
 8022ec6:	f240 52cc 	movw	r2, #1484	; 0x5cc
 8022eca:	4939      	ldr	r1, [pc, #228]	; (8022fb0 <tcp_receive+0x884>)
 8022ecc:	4839      	ldr	r0, [pc, #228]	; (8022fb4 <tcp_receive+0x888>)
 8022ece:	f003 fa2f 	bl	8026330 <iprintf>
            pcb->ooseq = next;
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8022ed2:	4b35      	ldr	r3, [pc, #212]	; (8022fa8 <tcp_receive+0x87c>)
 8022ed4:	881b      	ldrh	r3, [r3, #0]
 8022ed6:	461a      	mov	r2, r3
 8022ed8:	4b32      	ldr	r3, [pc, #200]	; (8022fa4 <tcp_receive+0x878>)
 8022eda:	681b      	ldr	r3, [r3, #0]
 8022edc:	441a      	add	r2, r3
 8022ede:	687b      	ldr	r3, [r7, #4]
 8022ee0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8022ee2:	687b      	ldr	r3, [r7, #4]
 8022ee4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8022ee6:	4b30      	ldr	r3, [pc, #192]	; (8022fa8 <tcp_receive+0x87c>)
 8022ee8:	881b      	ldrh	r3, [r3, #0]
 8022eea:	429a      	cmp	r2, r3
 8022eec:	d206      	bcs.n	8022efc <tcp_receive+0x7d0>
 8022eee:	4b2f      	ldr	r3, [pc, #188]	; (8022fac <tcp_receive+0x880>)
 8022ef0:	f240 6207 	movw	r2, #1543	; 0x607
 8022ef4:	4930      	ldr	r1, [pc, #192]	; (8022fb8 <tcp_receive+0x88c>)
 8022ef6:	482f      	ldr	r0, [pc, #188]	; (8022fb4 <tcp_receive+0x888>)
 8022ef8:	f003 fa1a 	bl	8026330 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8022efc:	687b      	ldr	r3, [r7, #4]
 8022efe:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8022f00:	4b29      	ldr	r3, [pc, #164]	; (8022fa8 <tcp_receive+0x87c>)
 8022f02:	881b      	ldrh	r3, [r3, #0]
 8022f04:	1ad3      	subs	r3, r2, r3
 8022f06:	b29a      	uxth	r2, r3
 8022f08:	687b      	ldr	r3, [r7, #4]
 8022f0a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8022f0c:	6878      	ldr	r0, [r7, #4]
 8022f0e:	f7fd f879 	bl	8020004 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8022f12:	4b23      	ldr	r3, [pc, #140]	; (8022fa0 <tcp_receive+0x874>)
 8022f14:	685b      	ldr	r3, [r3, #4]
 8022f16:	891b      	ldrh	r3, [r3, #8]
 8022f18:	2b00      	cmp	r3, #0
 8022f1a:	d006      	beq.n	8022f2a <tcp_receive+0x7fe>
          recv_data = inseg.p;
 8022f1c:	4b20      	ldr	r3, [pc, #128]	; (8022fa0 <tcp_receive+0x874>)
 8022f1e:	685b      	ldr	r3, [r3, #4]
 8022f20:	4a26      	ldr	r2, [pc, #152]	; (8022fbc <tcp_receive+0x890>)
 8022f22:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8022f24:	4b1e      	ldr	r3, [pc, #120]	; (8022fa0 <tcp_receive+0x874>)
 8022f26:	2200      	movs	r2, #0
 8022f28:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8022f2a:	4b1d      	ldr	r3, [pc, #116]	; (8022fa0 <tcp_receive+0x874>)
 8022f2c:	68db      	ldr	r3, [r3, #12]
 8022f2e:	899b      	ldrh	r3, [r3, #12]
 8022f30:	b29b      	uxth	r3, r3
 8022f32:	4618      	mov	r0, r3
 8022f34:	f7f6 f8f8 	bl	8019128 <lwip_htons>
 8022f38:	4603      	mov	r3, r0
 8022f3a:	b2db      	uxtb	r3, r3
 8022f3c:	f003 0301 	and.w	r3, r3, #1
 8022f40:	2b00      	cmp	r3, #0
 8022f42:	d006      	beq.n	8022f52 <tcp_receive+0x826>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8022f44:	4b1e      	ldr	r3, [pc, #120]	; (8022fc0 <tcp_receive+0x894>)
 8022f46:	781b      	ldrb	r3, [r3, #0]
 8022f48:	f043 0320 	orr.w	r3, r3, #32
 8022f4c:	b2da      	uxtb	r2, r3
 8022f4e:	4b1c      	ldr	r3, [pc, #112]	; (8022fc0 <tcp_receive+0x894>)
 8022f50:	701a      	strb	r2, [r3, #0]
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8022f52:	687b      	ldr	r3, [r7, #4]
 8022f54:	8b5b      	ldrh	r3, [r3, #26]
 8022f56:	f003 0301 	and.w	r3, r3, #1
 8022f5a:	2b00      	cmp	r3, #0
 8022f5c:	d00e      	beq.n	8022f7c <tcp_receive+0x850>
 8022f5e:	687b      	ldr	r3, [r7, #4]
 8022f60:	8b5b      	ldrh	r3, [r3, #26]
 8022f62:	f023 0301 	bic.w	r3, r3, #1
 8022f66:	b29a      	uxth	r2, r3
 8022f68:	687b      	ldr	r3, [r7, #4]
 8022f6a:	835a      	strh	r2, [r3, #26]
 8022f6c:	687b      	ldr	r3, [r7, #4]
 8022f6e:	8b5b      	ldrh	r3, [r3, #26]
 8022f70:	f043 0302 	orr.w	r3, r3, #2
 8022f74:	b29a      	uxth	r2, r3
 8022f76:	687b      	ldr	r3, [r7, #4]
 8022f78:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8022f7a:	e00f      	b.n	8022f9c <tcp_receive+0x870>
        tcp_ack(pcb);
 8022f7c:	687b      	ldr	r3, [r7, #4]
 8022f7e:	8b5b      	ldrh	r3, [r3, #26]
 8022f80:	f043 0301 	orr.w	r3, r3, #1
 8022f84:	b29a      	uxth	r2, r3
 8022f86:	687b      	ldr	r3, [r7, #4]
 8022f88:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8022f8a:	e007      	b.n	8022f9c <tcp_receive+0x870>
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8022f8c:	6878      	ldr	r0, [r7, #4]
 8022f8e:	f001 feb1 	bl	8024cf4 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8022f92:	e003      	b.n	8022f9c <tcp_receive+0x870>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8022f94:	6878      	ldr	r0, [r7, #4]
 8022f96:	f001 fead 	bl	8024cf4 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8022f9a:	e02d      	b.n	8022ff8 <tcp_receive+0x8cc>
 8022f9c:	e02c      	b.n	8022ff8 <tcp_receive+0x8cc>
 8022f9e:	bf00      	nop
 8022fa0:	200196c0 	.word	0x200196c0
 8022fa4:	200196e0 	.word	0x200196e0
 8022fa8:	200196ea 	.word	0x200196ea
 8022fac:	08029808 	.word	0x08029808
 8022fb0:	08029b88 	.word	0x08029b88
 8022fb4:	08029854 	.word	0x08029854
 8022fb8:	08029bc0 	.word	0x08029bc0
 8022fbc:	200196f0 	.word	0x200196f0
 8022fc0:	200196ed 	.word	0x200196ed
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8022fc4:	4b0e      	ldr	r3, [pc, #56]	; (8023000 <tcp_receive+0x8d4>)
 8022fc6:	681a      	ldr	r2, [r3, #0]
 8022fc8:	687b      	ldr	r3, [r7, #4]
 8022fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022fcc:	1ad3      	subs	r3, r2, r3
 8022fce:	2b00      	cmp	r3, #0
 8022fd0:	db0a      	blt.n	8022fe8 <tcp_receive+0x8bc>
 8022fd2:	4b0b      	ldr	r3, [pc, #44]	; (8023000 <tcp_receive+0x8d4>)
 8022fd4:	681a      	ldr	r2, [r3, #0]
 8022fd6:	687b      	ldr	r3, [r7, #4]
 8022fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022fda:	6879      	ldr	r1, [r7, #4]
 8022fdc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8022fde:	440b      	add	r3, r1
 8022fe0:	1ad3      	subs	r3, r2, r3
 8022fe2:	3301      	adds	r3, #1
 8022fe4:	2b00      	cmp	r3, #0
 8022fe6:	dd07      	ble.n	8022ff8 <tcp_receive+0x8cc>
      tcp_ack_now(pcb);
 8022fe8:	687b      	ldr	r3, [r7, #4]
 8022fea:	8b5b      	ldrh	r3, [r3, #26]
 8022fec:	f043 0302 	orr.w	r3, r3, #2
 8022ff0:	b29a      	uxth	r2, r3
 8022ff2:	687b      	ldr	r3, [r7, #4]
 8022ff4:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8022ff6:	e7ff      	b.n	8022ff8 <tcp_receive+0x8cc>
 8022ff8:	bf00      	nop
 8022ffa:	3730      	adds	r7, #48	; 0x30
 8022ffc:	46bd      	mov	sp, r7
 8022ffe:	bdb0      	pop	{r4, r5, r7, pc}
 8023000:	200196e0 	.word	0x200196e0

08023004 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8023004:	b480      	push	{r7}
 8023006:	b083      	sub	sp, #12
 8023008:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 802300a:	4b15      	ldr	r3, [pc, #84]	; (8023060 <tcp_get_next_optbyte+0x5c>)
 802300c:	881b      	ldrh	r3, [r3, #0]
 802300e:	1c5a      	adds	r2, r3, #1
 8023010:	b291      	uxth	r1, r2
 8023012:	4a13      	ldr	r2, [pc, #76]	; (8023060 <tcp_get_next_optbyte+0x5c>)
 8023014:	8011      	strh	r1, [r2, #0]
 8023016:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8023018:	4b12      	ldr	r3, [pc, #72]	; (8023064 <tcp_get_next_optbyte+0x60>)
 802301a:	681b      	ldr	r3, [r3, #0]
 802301c:	2b00      	cmp	r3, #0
 802301e:	d004      	beq.n	802302a <tcp_get_next_optbyte+0x26>
 8023020:	4b11      	ldr	r3, [pc, #68]	; (8023068 <tcp_get_next_optbyte+0x64>)
 8023022:	881b      	ldrh	r3, [r3, #0]
 8023024:	88fa      	ldrh	r2, [r7, #6]
 8023026:	429a      	cmp	r2, r3
 8023028:	d208      	bcs.n	802303c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 802302a:	4b10      	ldr	r3, [pc, #64]	; (802306c <tcp_get_next_optbyte+0x68>)
 802302c:	681b      	ldr	r3, [r3, #0]
 802302e:	3314      	adds	r3, #20
 8023030:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8023032:	88fb      	ldrh	r3, [r7, #6]
 8023034:	683a      	ldr	r2, [r7, #0]
 8023036:	4413      	add	r3, r2
 8023038:	781b      	ldrb	r3, [r3, #0]
 802303a:	e00b      	b.n	8023054 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 802303c:	88fb      	ldrh	r3, [r7, #6]
 802303e:	b2da      	uxtb	r2, r3
 8023040:	4b09      	ldr	r3, [pc, #36]	; (8023068 <tcp_get_next_optbyte+0x64>)
 8023042:	881b      	ldrh	r3, [r3, #0]
 8023044:	b2db      	uxtb	r3, r3
 8023046:	1ad3      	subs	r3, r2, r3
 8023048:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 802304a:	4b06      	ldr	r3, [pc, #24]	; (8023064 <tcp_get_next_optbyte+0x60>)
 802304c:	681a      	ldr	r2, [r3, #0]
 802304e:	797b      	ldrb	r3, [r7, #5]
 8023050:	4413      	add	r3, r2
 8023052:	781b      	ldrb	r3, [r3, #0]
  }
}
 8023054:	4618      	mov	r0, r3
 8023056:	370c      	adds	r7, #12
 8023058:	46bd      	mov	sp, r7
 802305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802305e:	4770      	bx	lr
 8023060:	200196dc 	.word	0x200196dc
 8023064:	200196d8 	.word	0x200196d8
 8023068:	200196d6 	.word	0x200196d6
 802306c:	200196d0 	.word	0x200196d0

08023070 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8023070:	b580      	push	{r7, lr}
 8023072:	b084      	sub	sp, #16
 8023074:	af00      	add	r7, sp, #0
 8023076:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8023078:	687b      	ldr	r3, [r7, #4]
 802307a:	2b00      	cmp	r3, #0
 802307c:	d106      	bne.n	802308c <tcp_parseopt+0x1c>
 802307e:	4b31      	ldr	r3, [pc, #196]	; (8023144 <tcp_parseopt+0xd4>)
 8023080:	f240 727d 	movw	r2, #1917	; 0x77d
 8023084:	4930      	ldr	r1, [pc, #192]	; (8023148 <tcp_parseopt+0xd8>)
 8023086:	4831      	ldr	r0, [pc, #196]	; (802314c <tcp_parseopt+0xdc>)
 8023088:	f003 f952 	bl	8026330 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 802308c:	4b30      	ldr	r3, [pc, #192]	; (8023150 <tcp_parseopt+0xe0>)
 802308e:	881b      	ldrh	r3, [r3, #0]
 8023090:	2b00      	cmp	r3, #0
 8023092:	d054      	beq.n	802313e <tcp_parseopt+0xce>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8023094:	4b2f      	ldr	r3, [pc, #188]	; (8023154 <tcp_parseopt+0xe4>)
 8023096:	2200      	movs	r2, #0
 8023098:	801a      	strh	r2, [r3, #0]
 802309a:	e044      	b.n	8023126 <tcp_parseopt+0xb6>
      u8_t opt = tcp_get_next_optbyte();
 802309c:	f7ff ffb2 	bl	8023004 <tcp_get_next_optbyte>
 80230a0:	4603      	mov	r3, r0
 80230a2:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80230a4:	7bfb      	ldrb	r3, [r7, #15]
 80230a6:	2b01      	cmp	r3, #1
 80230a8:	d03d      	beq.n	8023126 <tcp_parseopt+0xb6>
 80230aa:	2b02      	cmp	r3, #2
 80230ac:	d002      	beq.n	80230b4 <tcp_parseopt+0x44>
 80230ae:	2b00      	cmp	r3, #0
 80230b0:	d040      	beq.n	8023134 <tcp_parseopt+0xc4>
 80230b2:	e027      	b.n	8023104 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80230b4:	f7ff ffa6 	bl	8023004 <tcp_get_next_optbyte>
 80230b8:	4603      	mov	r3, r0
 80230ba:	2b04      	cmp	r3, #4
 80230bc:	d13c      	bne.n	8023138 <tcp_parseopt+0xc8>
 80230be:	4b25      	ldr	r3, [pc, #148]	; (8023154 <tcp_parseopt+0xe4>)
 80230c0:	881b      	ldrh	r3, [r3, #0]
 80230c2:	3302      	adds	r3, #2
 80230c4:	4a22      	ldr	r2, [pc, #136]	; (8023150 <tcp_parseopt+0xe0>)
 80230c6:	8812      	ldrh	r2, [r2, #0]
 80230c8:	4293      	cmp	r3, r2
 80230ca:	dc35      	bgt.n	8023138 <tcp_parseopt+0xc8>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80230cc:	f7ff ff9a 	bl	8023004 <tcp_get_next_optbyte>
 80230d0:	4603      	mov	r3, r0
 80230d2:	b29b      	uxth	r3, r3
 80230d4:	021b      	lsls	r3, r3, #8
 80230d6:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80230d8:	f7ff ff94 	bl	8023004 <tcp_get_next_optbyte>
 80230dc:	4603      	mov	r3, r0
 80230de:	b29a      	uxth	r2, r3
 80230e0:	89bb      	ldrh	r3, [r7, #12]
 80230e2:	4313      	orrs	r3, r2
 80230e4:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80230e6:	89bb      	ldrh	r3, [r7, #12]
 80230e8:	f240 52b4 	movw	r2, #1460	; 0x5b4
 80230ec:	4293      	cmp	r3, r2
 80230ee:	d804      	bhi.n	80230fa <tcp_parseopt+0x8a>
 80230f0:	89bb      	ldrh	r3, [r7, #12]
 80230f2:	2b00      	cmp	r3, #0
 80230f4:	d001      	beq.n	80230fa <tcp_parseopt+0x8a>
 80230f6:	89ba      	ldrh	r2, [r7, #12]
 80230f8:	e001      	b.n	80230fe <tcp_parseopt+0x8e>
 80230fa:	f240 52b4 	movw	r2, #1460	; 0x5b4
 80230fe:	687b      	ldr	r3, [r7, #4]
 8023100:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8023102:	e010      	b.n	8023126 <tcp_parseopt+0xb6>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8023104:	f7ff ff7e 	bl	8023004 <tcp_get_next_optbyte>
 8023108:	4603      	mov	r3, r0
 802310a:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 802310c:	7afb      	ldrb	r3, [r7, #11]
 802310e:	2b01      	cmp	r3, #1
 8023110:	d914      	bls.n	802313c <tcp_parseopt+0xcc>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8023112:	7afb      	ldrb	r3, [r7, #11]
 8023114:	b29a      	uxth	r2, r3
 8023116:	4b0f      	ldr	r3, [pc, #60]	; (8023154 <tcp_parseopt+0xe4>)
 8023118:	881b      	ldrh	r3, [r3, #0]
 802311a:	4413      	add	r3, r2
 802311c:	b29b      	uxth	r3, r3
 802311e:	3b02      	subs	r3, #2
 8023120:	b29a      	uxth	r2, r3
 8023122:	4b0c      	ldr	r3, [pc, #48]	; (8023154 <tcp_parseopt+0xe4>)
 8023124:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8023126:	4b0b      	ldr	r3, [pc, #44]	; (8023154 <tcp_parseopt+0xe4>)
 8023128:	881a      	ldrh	r2, [r3, #0]
 802312a:	4b09      	ldr	r3, [pc, #36]	; (8023150 <tcp_parseopt+0xe0>)
 802312c:	881b      	ldrh	r3, [r3, #0]
 802312e:	429a      	cmp	r2, r3
 8023130:	d3b4      	bcc.n	802309c <tcp_parseopt+0x2c>
 8023132:	e004      	b.n	802313e <tcp_parseopt+0xce>
          return;
 8023134:	bf00      	nop
 8023136:	e002      	b.n	802313e <tcp_parseopt+0xce>
            return;
 8023138:	bf00      	nop
 802313a:	e000      	b.n	802313e <tcp_parseopt+0xce>
            return;
 802313c:	bf00      	nop
      }
    }
  }
}
 802313e:	3710      	adds	r7, #16
 8023140:	46bd      	mov	sp, r7
 8023142:	bd80      	pop	{r7, pc}
 8023144:	08029808 	.word	0x08029808
 8023148:	08029be0 	.word	0x08029be0
 802314c:	08029854 	.word	0x08029854
 8023150:	200196d4 	.word	0x200196d4
 8023154:	200196dc 	.word	0x200196dc

08023158 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8023158:	b480      	push	{r7}
 802315a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 802315c:	4b05      	ldr	r3, [pc, #20]	; (8023174 <tcp_trigger_input_pcb_close+0x1c>)
 802315e:	781b      	ldrb	r3, [r3, #0]
 8023160:	f043 0310 	orr.w	r3, r3, #16
 8023164:	b2da      	uxtb	r2, r3
 8023166:	4b03      	ldr	r3, [pc, #12]	; (8023174 <tcp_trigger_input_pcb_close+0x1c>)
 8023168:	701a      	strb	r2, [r3, #0]
}
 802316a:	bf00      	nop
 802316c:	46bd      	mov	sp, r7
 802316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023172:	4770      	bx	lr
 8023174:	200196ed 	.word	0x200196ed

08023178 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8023178:	b580      	push	{r7, lr}
 802317a:	b084      	sub	sp, #16
 802317c:	af00      	add	r7, sp, #0
 802317e:	60f8      	str	r0, [r7, #12]
 8023180:	60b9      	str	r1, [r7, #8]
 8023182:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8023184:	68fb      	ldr	r3, [r7, #12]
 8023186:	2b00      	cmp	r3, #0
 8023188:	d00a      	beq.n	80231a0 <tcp_route+0x28>
 802318a:	68fb      	ldr	r3, [r7, #12]
 802318c:	7a1b      	ldrb	r3, [r3, #8]
 802318e:	2b00      	cmp	r3, #0
 8023190:	d006      	beq.n	80231a0 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8023192:	68fb      	ldr	r3, [r7, #12]
 8023194:	7a1b      	ldrb	r3, [r3, #8]
 8023196:	4618      	mov	r0, r3
 8023198:	f7fb fb94 	bl	801e8c4 <netif_get_by_index>
 802319c:	4603      	mov	r3, r0
 802319e:	e003      	b.n	80231a8 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80231a0:	6878      	ldr	r0, [r7, #4]
 80231a2:	f7f9 fb35 	bl	801c810 <ip4_route>
 80231a6:	4603      	mov	r3, r0
  }
}
 80231a8:	4618      	mov	r0, r3
 80231aa:	3710      	adds	r7, #16
 80231ac:	46bd      	mov	sp, r7
 80231ae:	bd80      	pop	{r7, pc}

080231b0 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80231b0:	b590      	push	{r4, r7, lr}
 80231b2:	b087      	sub	sp, #28
 80231b4:	af00      	add	r7, sp, #0
 80231b6:	60f8      	str	r0, [r7, #12]
 80231b8:	60b9      	str	r1, [r7, #8]
 80231ba:	603b      	str	r3, [r7, #0]
 80231bc:	4613      	mov	r3, r2
 80231be:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80231c0:	68fb      	ldr	r3, [r7, #12]
 80231c2:	2b00      	cmp	r3, #0
 80231c4:	d105      	bne.n	80231d2 <tcp_create_segment+0x22>
 80231c6:	4b45      	ldr	r3, [pc, #276]	; (80232dc <tcp_create_segment+0x12c>)
 80231c8:	22a3      	movs	r2, #163	; 0xa3
 80231ca:	4945      	ldr	r1, [pc, #276]	; (80232e0 <tcp_create_segment+0x130>)
 80231cc:	4845      	ldr	r0, [pc, #276]	; (80232e4 <tcp_create_segment+0x134>)
 80231ce:	f003 f8af 	bl	8026330 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80231d2:	68bb      	ldr	r3, [r7, #8]
 80231d4:	2b00      	cmp	r3, #0
 80231d6:	d105      	bne.n	80231e4 <tcp_create_segment+0x34>
 80231d8:	4b40      	ldr	r3, [pc, #256]	; (80232dc <tcp_create_segment+0x12c>)
 80231da:	22a4      	movs	r2, #164	; 0xa4
 80231dc:	4942      	ldr	r1, [pc, #264]	; (80232e8 <tcp_create_segment+0x138>)
 80231de:	4841      	ldr	r0, [pc, #260]	; (80232e4 <tcp_create_segment+0x134>)
 80231e0:	f003 f8a6 	bl	8026330 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80231e4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80231e8:	f003 0301 	and.w	r3, r3, #1
 80231ec:	2b00      	cmp	r3, #0
 80231ee:	d001      	beq.n	80231f4 <tcp_create_segment+0x44>
 80231f0:	2304      	movs	r3, #4
 80231f2:	e000      	b.n	80231f6 <tcp_create_segment+0x46>
 80231f4:	2300      	movs	r3, #0
 80231f6:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80231f8:	2003      	movs	r0, #3
 80231fa:	f7fb f89b 	bl	801e334 <memp_malloc>
 80231fe:	6138      	str	r0, [r7, #16]
 8023200:	693b      	ldr	r3, [r7, #16]
 8023202:	2b00      	cmp	r3, #0
 8023204:	d104      	bne.n	8023210 <tcp_create_segment+0x60>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8023206:	68b8      	ldr	r0, [r7, #8]
 8023208:	f7fb fe8e 	bl	801ef28 <pbuf_free>
    return NULL;
 802320c:	2300      	movs	r3, #0
 802320e:	e061      	b.n	80232d4 <tcp_create_segment+0x124>
  }
  seg->flags = optflags;
 8023210:	693b      	ldr	r3, [r7, #16]
 8023212:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8023216:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8023218:	693b      	ldr	r3, [r7, #16]
 802321a:	2200      	movs	r2, #0
 802321c:	601a      	str	r2, [r3, #0]
  seg->p = p;
 802321e:	693b      	ldr	r3, [r7, #16]
 8023220:	68ba      	ldr	r2, [r7, #8]
 8023222:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8023224:	68bb      	ldr	r3, [r7, #8]
 8023226:	891a      	ldrh	r2, [r3, #8]
 8023228:	7dfb      	ldrb	r3, [r7, #23]
 802322a:	b29b      	uxth	r3, r3
 802322c:	429a      	cmp	r2, r3
 802322e:	d205      	bcs.n	802323c <tcp_create_segment+0x8c>
 8023230:	4b2a      	ldr	r3, [pc, #168]	; (80232dc <tcp_create_segment+0x12c>)
 8023232:	22b0      	movs	r2, #176	; 0xb0
 8023234:	492d      	ldr	r1, [pc, #180]	; (80232ec <tcp_create_segment+0x13c>)
 8023236:	482b      	ldr	r0, [pc, #172]	; (80232e4 <tcp_create_segment+0x134>)
 8023238:	f003 f87a 	bl	8026330 <iprintf>
  seg->len = p->tot_len - optlen;
 802323c:	68bb      	ldr	r3, [r7, #8]
 802323e:	891a      	ldrh	r2, [r3, #8]
 8023240:	7dfb      	ldrb	r3, [r7, #23]
 8023242:	b29b      	uxth	r3, r3
 8023244:	1ad3      	subs	r3, r2, r3
 8023246:	b29a      	uxth	r2, r3
 8023248:	693b      	ldr	r3, [r7, #16]
 802324a:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 802324c:	2114      	movs	r1, #20
 802324e:	68b8      	ldr	r0, [r7, #8]
 8023250:	f7fb fdd4 	bl	801edfc <pbuf_add_header>
 8023254:	4603      	mov	r3, r0
 8023256:	2b00      	cmp	r3, #0
 8023258:	d004      	beq.n	8023264 <tcp_create_segment+0xb4>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 802325a:	6938      	ldr	r0, [r7, #16]
 802325c:	f7fd fbe8 	bl	8020a30 <tcp_seg_free>
    return NULL;
 8023260:	2300      	movs	r3, #0
 8023262:	e037      	b.n	80232d4 <tcp_create_segment+0x124>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8023264:	693b      	ldr	r3, [r7, #16]
 8023266:	685b      	ldr	r3, [r3, #4]
 8023268:	685a      	ldr	r2, [r3, #4]
 802326a:	693b      	ldr	r3, [r7, #16]
 802326c:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 802326e:	693b      	ldr	r3, [r7, #16]
 8023270:	68dc      	ldr	r4, [r3, #12]
 8023272:	68fb      	ldr	r3, [r7, #12]
 8023274:	8adb      	ldrh	r3, [r3, #22]
 8023276:	4618      	mov	r0, r3
 8023278:	f7f5 ff56 	bl	8019128 <lwip_htons>
 802327c:	4603      	mov	r3, r0
 802327e:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8023280:	693b      	ldr	r3, [r7, #16]
 8023282:	68dc      	ldr	r4, [r3, #12]
 8023284:	68fb      	ldr	r3, [r7, #12]
 8023286:	8b1b      	ldrh	r3, [r3, #24]
 8023288:	4618      	mov	r0, r3
 802328a:	f7f5 ff4d 	bl	8019128 <lwip_htons>
 802328e:	4603      	mov	r3, r0
 8023290:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8023292:	693b      	ldr	r3, [r7, #16]
 8023294:	68dc      	ldr	r4, [r3, #12]
 8023296:	6838      	ldr	r0, [r7, #0]
 8023298:	f7f5 ff5b 	bl	8019152 <lwip_htonl>
 802329c:	4603      	mov	r3, r0
 802329e:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80232a0:	693b      	ldr	r3, [r7, #16]
 80232a2:	68dc      	ldr	r4, [r3, #12]
 80232a4:	7dfb      	ldrb	r3, [r7, #23]
 80232a6:	089b      	lsrs	r3, r3, #2
 80232a8:	b2db      	uxtb	r3, r3
 80232aa:	b29b      	uxth	r3, r3
 80232ac:	3305      	adds	r3, #5
 80232ae:	b29b      	uxth	r3, r3
 80232b0:	031b      	lsls	r3, r3, #12
 80232b2:	b29a      	uxth	r2, r3
 80232b4:	79fb      	ldrb	r3, [r7, #7]
 80232b6:	b29b      	uxth	r3, r3
 80232b8:	4313      	orrs	r3, r2
 80232ba:	b29b      	uxth	r3, r3
 80232bc:	4618      	mov	r0, r3
 80232be:	f7f5 ff33 	bl	8019128 <lwip_htons>
 80232c2:	4603      	mov	r3, r0
 80232c4:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80232c6:	693b      	ldr	r3, [r7, #16]
 80232c8:	68db      	ldr	r3, [r3, #12]
 80232ca:	2200      	movs	r2, #0
 80232cc:	749a      	strb	r2, [r3, #18]
 80232ce:	2200      	movs	r2, #0
 80232d0:	74da      	strb	r2, [r3, #19]
  return seg;
 80232d2:	693b      	ldr	r3, [r7, #16]
}
 80232d4:	4618      	mov	r0, r3
 80232d6:	371c      	adds	r7, #28
 80232d8:	46bd      	mov	sp, r7
 80232da:	bd90      	pop	{r4, r7, pc}
 80232dc:	08029bfc 	.word	0x08029bfc
 80232e0:	08029c30 	.word	0x08029c30
 80232e4:	08029c50 	.word	0x08029c50
 80232e8:	08029c78 	.word	0x08029c78
 80232ec:	08029c9c 	.word	0x08029c9c

080232f0 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 80232f0:	b580      	push	{r7, lr}
 80232f2:	b086      	sub	sp, #24
 80232f4:	af00      	add	r7, sp, #0
 80232f6:	607b      	str	r3, [r7, #4]
 80232f8:	4603      	mov	r3, r0
 80232fa:	73fb      	strb	r3, [r7, #15]
 80232fc:	460b      	mov	r3, r1
 80232fe:	81bb      	strh	r3, [r7, #12]
 8023300:	4613      	mov	r3, r2
 8023302:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8023304:	89bb      	ldrh	r3, [r7, #12]
 8023306:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8023308:	687b      	ldr	r3, [r7, #4]
 802330a:	2b00      	cmp	r3, #0
 802330c:	d105      	bne.n	802331a <tcp_pbuf_prealloc+0x2a>
 802330e:	4b30      	ldr	r3, [pc, #192]	; (80233d0 <tcp_pbuf_prealloc+0xe0>)
 8023310:	22e8      	movs	r2, #232	; 0xe8
 8023312:	4930      	ldr	r1, [pc, #192]	; (80233d4 <tcp_pbuf_prealloc+0xe4>)
 8023314:	4830      	ldr	r0, [pc, #192]	; (80233d8 <tcp_pbuf_prealloc+0xe8>)
 8023316:	f003 f80b 	bl	8026330 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 802331a:	6a3b      	ldr	r3, [r7, #32]
 802331c:	2b00      	cmp	r3, #0
 802331e:	d105      	bne.n	802332c <tcp_pbuf_prealloc+0x3c>
 8023320:	4b2b      	ldr	r3, [pc, #172]	; (80233d0 <tcp_pbuf_prealloc+0xe0>)
 8023322:	22e9      	movs	r2, #233	; 0xe9
 8023324:	492d      	ldr	r1, [pc, #180]	; (80233dc <tcp_pbuf_prealloc+0xec>)
 8023326:	482c      	ldr	r0, [pc, #176]	; (80233d8 <tcp_pbuf_prealloc+0xe8>)
 8023328:	f003 f802 	bl	8026330 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 802332c:	89ba      	ldrh	r2, [r7, #12]
 802332e:	897b      	ldrh	r3, [r7, #10]
 8023330:	429a      	cmp	r2, r3
 8023332:	d221      	bcs.n	8023378 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8023334:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8023338:	f003 0302 	and.w	r3, r3, #2
 802333c:	2b00      	cmp	r3, #0
 802333e:	d111      	bne.n	8023364 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8023340:	6a3b      	ldr	r3, [r7, #32]
 8023342:	8b5b      	ldrh	r3, [r3, #26]
 8023344:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8023348:	2b00      	cmp	r3, #0
 802334a:	d115      	bne.n	8023378 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 802334c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8023350:	2b00      	cmp	r3, #0
 8023352:	d007      	beq.n	8023364 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8023354:	6a3b      	ldr	r3, [r7, #32]
 8023356:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8023358:	2b00      	cmp	r3, #0
 802335a:	d103      	bne.n	8023364 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 802335c:	6a3b      	ldr	r3, [r7, #32]
 802335e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8023360:	2b00      	cmp	r3, #0
 8023362:	d009      	beq.n	8023378 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8023364:	89bb      	ldrh	r3, [r7, #12]
 8023366:	f203 53b7 	addw	r3, r3, #1463	; 0x5b7
 802336a:	f023 0203 	bic.w	r2, r3, #3
 802336e:	897b      	ldrh	r3, [r7, #10]
 8023370:	4293      	cmp	r3, r2
 8023372:	bf28      	it	cs
 8023374:	4613      	movcs	r3, r2
 8023376:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8023378:	8af9      	ldrh	r1, [r7, #22]
 802337a:	7bfb      	ldrb	r3, [r7, #15]
 802337c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8023380:	4618      	mov	r0, r3
 8023382:	f7fb faef 	bl	801e964 <pbuf_alloc>
 8023386:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8023388:	693b      	ldr	r3, [r7, #16]
 802338a:	2b00      	cmp	r3, #0
 802338c:	d101      	bne.n	8023392 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 802338e:	2300      	movs	r3, #0
 8023390:	e019      	b.n	80233c6 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8023392:	693b      	ldr	r3, [r7, #16]
 8023394:	681b      	ldr	r3, [r3, #0]
 8023396:	2b00      	cmp	r3, #0
 8023398:	d006      	beq.n	80233a8 <tcp_pbuf_prealloc+0xb8>
 802339a:	4b0d      	ldr	r3, [pc, #52]	; (80233d0 <tcp_pbuf_prealloc+0xe0>)
 802339c:	f240 120b 	movw	r2, #267	; 0x10b
 80233a0:	490f      	ldr	r1, [pc, #60]	; (80233e0 <tcp_pbuf_prealloc+0xf0>)
 80233a2:	480d      	ldr	r0, [pc, #52]	; (80233d8 <tcp_pbuf_prealloc+0xe8>)
 80233a4:	f002 ffc4 	bl	8026330 <iprintf>
  *oversize = p->len - length;
 80233a8:	693b      	ldr	r3, [r7, #16]
 80233aa:	895a      	ldrh	r2, [r3, #10]
 80233ac:	89bb      	ldrh	r3, [r7, #12]
 80233ae:	1ad3      	subs	r3, r2, r3
 80233b0:	b29a      	uxth	r2, r3
 80233b2:	687b      	ldr	r3, [r7, #4]
 80233b4:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 80233b6:	693b      	ldr	r3, [r7, #16]
 80233b8:	89ba      	ldrh	r2, [r7, #12]
 80233ba:	811a      	strh	r2, [r3, #8]
 80233bc:	693b      	ldr	r3, [r7, #16]
 80233be:	891a      	ldrh	r2, [r3, #8]
 80233c0:	693b      	ldr	r3, [r7, #16]
 80233c2:	815a      	strh	r2, [r3, #10]
  return p;
 80233c4:	693b      	ldr	r3, [r7, #16]
}
 80233c6:	4618      	mov	r0, r3
 80233c8:	3718      	adds	r7, #24
 80233ca:	46bd      	mov	sp, r7
 80233cc:	bd80      	pop	{r7, pc}
 80233ce:	bf00      	nop
 80233d0:	08029bfc 	.word	0x08029bfc
 80233d4:	08029cb4 	.word	0x08029cb4
 80233d8:	08029c50 	.word	0x08029c50
 80233dc:	08029cd8 	.word	0x08029cd8
 80233e0:	08029cf8 	.word	0x08029cf8

080233e4 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 80233e4:	b580      	push	{r7, lr}
 80233e6:	b082      	sub	sp, #8
 80233e8:	af00      	add	r7, sp, #0
 80233ea:	6078      	str	r0, [r7, #4]
 80233ec:	460b      	mov	r3, r1
 80233ee:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 80233f0:	687b      	ldr	r3, [r7, #4]
 80233f2:	2b00      	cmp	r3, #0
 80233f4:	d106      	bne.n	8023404 <tcp_write_checks+0x20>
 80233f6:	4b33      	ldr	r3, [pc, #204]	; (80234c4 <tcp_write_checks+0xe0>)
 80233f8:	f240 1233 	movw	r2, #307	; 0x133
 80233fc:	4932      	ldr	r1, [pc, #200]	; (80234c8 <tcp_write_checks+0xe4>)
 80233fe:	4833      	ldr	r0, [pc, #204]	; (80234cc <tcp_write_checks+0xe8>)
 8023400:	f002 ff96 	bl	8026330 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8023404:	687b      	ldr	r3, [r7, #4]
 8023406:	7d1b      	ldrb	r3, [r3, #20]
 8023408:	2b04      	cmp	r3, #4
 802340a:	d00e      	beq.n	802342a <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 802340c:	687b      	ldr	r3, [r7, #4]
 802340e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8023410:	2b07      	cmp	r3, #7
 8023412:	d00a      	beq.n	802342a <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8023414:	687b      	ldr	r3, [r7, #4]
 8023416:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8023418:	2b02      	cmp	r3, #2
 802341a:	d006      	beq.n	802342a <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 802341c:	687b      	ldr	r3, [r7, #4]
 802341e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8023420:	2b03      	cmp	r3, #3
 8023422:	d002      	beq.n	802342a <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8023424:	f06f 030a 	mvn.w	r3, #10
 8023428:	e048      	b.n	80234bc <tcp_write_checks+0xd8>
  } else if (len == 0) {
 802342a:	887b      	ldrh	r3, [r7, #2]
 802342c:	2b00      	cmp	r3, #0
 802342e:	d101      	bne.n	8023434 <tcp_write_checks+0x50>
    return ERR_OK;
 8023430:	2300      	movs	r3, #0
 8023432:	e043      	b.n	80234bc <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8023434:	687b      	ldr	r3, [r7, #4]
 8023436:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 802343a:	887a      	ldrh	r2, [r7, #2]
 802343c:	429a      	cmp	r2, r3
 802343e:	d909      	bls.n	8023454 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8023440:	687b      	ldr	r3, [r7, #4]
 8023442:	8b5b      	ldrh	r3, [r3, #26]
 8023444:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8023448:	b29a      	uxth	r2, r3
 802344a:	687b      	ldr	r3, [r7, #4]
 802344c:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 802344e:	f04f 33ff 	mov.w	r3, #4294967295
 8023452:	e033      	b.n	80234bc <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8023454:	687b      	ldr	r3, [r7, #4]
 8023456:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 802345a:	2b07      	cmp	r3, #7
 802345c:	d909      	bls.n	8023472 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 802345e:	687b      	ldr	r3, [r7, #4]
 8023460:	8b5b      	ldrh	r3, [r3, #26]
 8023462:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8023466:	b29a      	uxth	r2, r3
 8023468:	687b      	ldr	r3, [r7, #4]
 802346a:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 802346c:	f04f 33ff 	mov.w	r3, #4294967295
 8023470:	e024      	b.n	80234bc <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8023472:	687b      	ldr	r3, [r7, #4]
 8023474:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8023478:	2b00      	cmp	r3, #0
 802347a:	d00f      	beq.n	802349c <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 802347c:	687b      	ldr	r3, [r7, #4]
 802347e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8023480:	2b00      	cmp	r3, #0
 8023482:	d11a      	bne.n	80234ba <tcp_write_checks+0xd6>
 8023484:	687b      	ldr	r3, [r7, #4]
 8023486:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8023488:	2b00      	cmp	r3, #0
 802348a:	d116      	bne.n	80234ba <tcp_write_checks+0xd6>
 802348c:	4b0d      	ldr	r3, [pc, #52]	; (80234c4 <tcp_write_checks+0xe0>)
 802348e:	f44f 72ab 	mov.w	r2, #342	; 0x156
 8023492:	490f      	ldr	r1, [pc, #60]	; (80234d0 <tcp_write_checks+0xec>)
 8023494:	480d      	ldr	r0, [pc, #52]	; (80234cc <tcp_write_checks+0xe8>)
 8023496:	f002 ff4b 	bl	8026330 <iprintf>
 802349a:	e00e      	b.n	80234ba <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 802349c:	687b      	ldr	r3, [r7, #4]
 802349e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80234a0:	2b00      	cmp	r3, #0
 80234a2:	d103      	bne.n	80234ac <tcp_write_checks+0xc8>
 80234a4:	687b      	ldr	r3, [r7, #4]
 80234a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80234a8:	2b00      	cmp	r3, #0
 80234aa:	d006      	beq.n	80234ba <tcp_write_checks+0xd6>
 80234ac:	4b05      	ldr	r3, [pc, #20]	; (80234c4 <tcp_write_checks+0xe0>)
 80234ae:	f240 1259 	movw	r2, #345	; 0x159
 80234b2:	4908      	ldr	r1, [pc, #32]	; (80234d4 <tcp_write_checks+0xf0>)
 80234b4:	4805      	ldr	r0, [pc, #20]	; (80234cc <tcp_write_checks+0xe8>)
 80234b6:	f002 ff3b 	bl	8026330 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 80234ba:	2300      	movs	r3, #0
}
 80234bc:	4618      	mov	r0, r3
 80234be:	3708      	adds	r7, #8
 80234c0:	46bd      	mov	sp, r7
 80234c2:	bd80      	pop	{r7, pc}
 80234c4:	08029bfc 	.word	0x08029bfc
 80234c8:	08029d0c 	.word	0x08029d0c
 80234cc:	08029c50 	.word	0x08029c50
 80234d0:	08029d2c 	.word	0x08029d2c
 80234d4:	08029d68 	.word	0x08029d68

080234d8 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 80234d8:	b5b0      	push	{r4, r5, r7, lr}
 80234da:	b09a      	sub	sp, #104	; 0x68
 80234dc:	af04      	add	r7, sp, #16
 80234de:	60f8      	str	r0, [r7, #12]
 80234e0:	60b9      	str	r1, [r7, #8]
 80234e2:	4611      	mov	r1, r2
 80234e4:	461a      	mov	r2, r3
 80234e6:	460b      	mov	r3, r1
 80234e8:	80fb      	strh	r3, [r7, #6]
 80234ea:	4613      	mov	r3, r2
 80234ec:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 80234ee:	2300      	movs	r3, #0
 80234f0:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 80234f2:	2300      	movs	r3, #0
 80234f4:	653b      	str	r3, [r7, #80]	; 0x50
 80234f6:	2300      	movs	r3, #0
 80234f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80234fa:	2300      	movs	r3, #0
 80234fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80234fe:	2300      	movs	r3, #0
 8023500:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8023502:	2300      	movs	r3, #0
 8023504:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8023508:	2300      	movs	r3, #0
 802350a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 802350e:	2300      	movs	r3, #0
 8023510:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8023512:	2300      	movs	r3, #0
 8023514:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8023516:	2300      	movs	r3, #0
 8023518:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 802351a:	68fb      	ldr	r3, [r7, #12]
 802351c:	2b00      	cmp	r3, #0
 802351e:	d109      	bne.n	8023534 <tcp_write+0x5c>
 8023520:	4ba6      	ldr	r3, [pc, #664]	; (80237bc <tcp_write+0x2e4>)
 8023522:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8023526:	49a6      	ldr	r1, [pc, #664]	; (80237c0 <tcp_write+0x2e8>)
 8023528:	48a6      	ldr	r0, [pc, #664]	; (80237c4 <tcp_write+0x2ec>)
 802352a:	f002 ff01 	bl	8026330 <iprintf>
 802352e:	f06f 030f 	mvn.w	r3, #15
 8023532:	e32d      	b.n	8023b90 <tcp_write+0x6b8>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8023534:	68fb      	ldr	r3, [r7, #12]
 8023536:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 802353a:	085b      	lsrs	r3, r3, #1
 802353c:	b29a      	uxth	r2, r3
 802353e:	68fb      	ldr	r3, [r7, #12]
 8023540:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8023542:	4293      	cmp	r3, r2
 8023544:	bf28      	it	cs
 8023546:	4613      	movcs	r3, r2
 8023548:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 802354a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802354c:	2b00      	cmp	r3, #0
 802354e:	d102      	bne.n	8023556 <tcp_write+0x7e>
 8023550:	68fb      	ldr	r3, [r7, #12]
 8023552:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8023554:	e000      	b.n	8023558 <tcp_write+0x80>
 8023556:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8023558:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 802355a:	68bb      	ldr	r3, [r7, #8]
 802355c:	2b00      	cmp	r3, #0
 802355e:	d109      	bne.n	8023574 <tcp_write+0x9c>
 8023560:	4b96      	ldr	r3, [pc, #600]	; (80237bc <tcp_write+0x2e4>)
 8023562:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 8023566:	4998      	ldr	r1, [pc, #608]	; (80237c8 <tcp_write+0x2f0>)
 8023568:	4896      	ldr	r0, [pc, #600]	; (80237c4 <tcp_write+0x2ec>)
 802356a:	f002 fee1 	bl	8026330 <iprintf>
 802356e:	f06f 030f 	mvn.w	r3, #15
 8023572:	e30d      	b.n	8023b90 <tcp_write+0x6b8>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8023574:	88fb      	ldrh	r3, [r7, #6]
 8023576:	4619      	mov	r1, r3
 8023578:	68f8      	ldr	r0, [r7, #12]
 802357a:	f7ff ff33 	bl	80233e4 <tcp_write_checks>
 802357e:	4603      	mov	r3, r0
 8023580:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8023584:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8023588:	2b00      	cmp	r3, #0
 802358a:	d002      	beq.n	8023592 <tcp_write+0xba>
    return err;
 802358c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8023590:	e2fe      	b.n	8023b90 <tcp_write+0x6b8>
  }
  queuelen = pcb->snd_queuelen;
 8023592:	68fb      	ldr	r3, [r7, #12]
 8023594:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8023598:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 802359c:	2300      	movs	r3, #0
 802359e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 80235a2:	68fb      	ldr	r3, [r7, #12]
 80235a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80235a6:	2b00      	cmp	r3, #0
 80235a8:	f000 80fa 	beq.w	80237a0 <tcp_write+0x2c8>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80235ac:	68fb      	ldr	r3, [r7, #12]
 80235ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80235b0:	653b      	str	r3, [r7, #80]	; 0x50
 80235b2:	e002      	b.n	80235ba <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 80235b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80235b6:	681b      	ldr	r3, [r3, #0]
 80235b8:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80235ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80235bc:	681b      	ldr	r3, [r3, #0]
 80235be:	2b00      	cmp	r3, #0
 80235c0:	d1f8      	bne.n	80235b4 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 80235c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80235c4:	7a9b      	ldrb	r3, [r3, #10]
 80235c6:	f003 0301 	and.w	r3, r3, #1
 80235ca:	2b00      	cmp	r3, #0
 80235cc:	d001      	beq.n	80235d2 <tcp_write+0xfa>
 80235ce:	2304      	movs	r3, #4
 80235d0:	e000      	b.n	80235d4 <tcp_write+0xfc>
 80235d2:	2300      	movs	r3, #0
 80235d4:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 80235d6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80235d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80235da:	891b      	ldrh	r3, [r3, #8]
 80235dc:	4619      	mov	r1, r3
 80235de:	8c3b      	ldrh	r3, [r7, #32]
 80235e0:	440b      	add	r3, r1
 80235e2:	429a      	cmp	r2, r3
 80235e4:	da06      	bge.n	80235f4 <tcp_write+0x11c>
 80235e6:	4b75      	ldr	r3, [pc, #468]	; (80237bc <tcp_write+0x2e4>)
 80235e8:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80235ec:	4977      	ldr	r1, [pc, #476]	; (80237cc <tcp_write+0x2f4>)
 80235ee:	4875      	ldr	r0, [pc, #468]	; (80237c4 <tcp_write+0x2ec>)
 80235f0:	f002 fe9e 	bl	8026330 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 80235f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80235f6:	891a      	ldrh	r2, [r3, #8]
 80235f8:	8c3b      	ldrh	r3, [r7, #32]
 80235fa:	4413      	add	r3, r2
 80235fc:	b29b      	uxth	r3, r3
 80235fe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8023600:	1ad3      	subs	r3, r2, r3
 8023602:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8023604:	68fb      	ldr	r3, [r7, #12]
 8023606:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 802360a:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 802360c:	8a7b      	ldrh	r3, [r7, #18]
 802360e:	2b00      	cmp	r3, #0
 8023610:	d027      	beq.n	8023662 <tcp_write+0x18a>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8023612:	8a7b      	ldrh	r3, [r7, #18]
 8023614:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8023616:	429a      	cmp	r2, r3
 8023618:	d206      	bcs.n	8023628 <tcp_write+0x150>
 802361a:	4b68      	ldr	r3, [pc, #416]	; (80237bc <tcp_write+0x2e4>)
 802361c:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8023620:	496b      	ldr	r1, [pc, #428]	; (80237d0 <tcp_write+0x2f8>)
 8023622:	4868      	ldr	r0, [pc, #416]	; (80237c4 <tcp_write+0x2ec>)
 8023624:	f002 fe84 	bl	8026330 <iprintf>
      seg = last_unsent;
 8023628:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802362a:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 802362c:	8a7b      	ldrh	r3, [r7, #18]
 802362e:	88fa      	ldrh	r2, [r7, #6]
 8023630:	429a      	cmp	r2, r3
 8023632:	d901      	bls.n	8023638 <tcp_write+0x160>
 8023634:	8a7b      	ldrh	r3, [r7, #18]
 8023636:	e000      	b.n	802363a <tcp_write+0x162>
 8023638:	88fb      	ldrh	r3, [r7, #6]
 802363a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 802363c:	4293      	cmp	r3, r2
 802363e:	bfa8      	it	ge
 8023640:	4613      	movge	r3, r2
 8023642:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8023644:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8023648:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 802364a:	4413      	add	r3, r2
 802364c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8023650:	8a7a      	ldrh	r2, [r7, #18]
 8023652:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8023654:	1ad3      	subs	r3, r2, r3
 8023656:	b29b      	uxth	r3, r3
 8023658:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 802365a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 802365c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 802365e:	1ad3      	subs	r3, r2, r3
 8023660:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8023662:	8a7b      	ldrh	r3, [r7, #18]
 8023664:	2b00      	cmp	r3, #0
 8023666:	d00b      	beq.n	8023680 <tcp_write+0x1a8>
 8023668:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 802366c:	88fb      	ldrh	r3, [r7, #6]
 802366e:	429a      	cmp	r2, r3
 8023670:	d006      	beq.n	8023680 <tcp_write+0x1a8>
 8023672:	4b52      	ldr	r3, [pc, #328]	; (80237bc <tcp_write+0x2e4>)
 8023674:	f44f 7200 	mov.w	r2, #512	; 0x200
 8023678:	4956      	ldr	r1, [pc, #344]	; (80237d4 <tcp_write+0x2fc>)
 802367a:	4852      	ldr	r0, [pc, #328]	; (80237c4 <tcp_write+0x2ec>)
 802367c:	f002 fe58 	bl	8026330 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8023680:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8023684:	88fb      	ldrh	r3, [r7, #6]
 8023686:	429a      	cmp	r2, r3
 8023688:	f080 8167 	bcs.w	802395a <tcp_write+0x482>
 802368c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 802368e:	2b00      	cmp	r3, #0
 8023690:	f000 8163 	beq.w	802395a <tcp_write+0x482>
 8023694:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8023696:	891b      	ldrh	r3, [r3, #8]
 8023698:	2b00      	cmp	r3, #0
 802369a:	f000 815e 	beq.w	802395a <tcp_write+0x482>
      u16_t seglen = LWIP_MIN(space, len - pos);
 802369e:	88fa      	ldrh	r2, [r7, #6]
 80236a0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80236a4:	1ad2      	subs	r2, r2, r3
 80236a6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80236a8:	4293      	cmp	r3, r2
 80236aa:	bfa8      	it	ge
 80236ac:	4613      	movge	r3, r2
 80236ae:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 80236b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80236b2:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 80236b4:	797b      	ldrb	r3, [r7, #5]
 80236b6:	f003 0301 	and.w	r3, r3, #1
 80236ba:	2b00      	cmp	r3, #0
 80236bc:	d027      	beq.n	802370e <tcp_write+0x236>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 80236be:	f107 0012 	add.w	r0, r7, #18
 80236c2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80236c4:	8bf9      	ldrh	r1, [r7, #30]
 80236c6:	2301      	movs	r3, #1
 80236c8:	9302      	str	r3, [sp, #8]
 80236ca:	797b      	ldrb	r3, [r7, #5]
 80236cc:	9301      	str	r3, [sp, #4]
 80236ce:	68fb      	ldr	r3, [r7, #12]
 80236d0:	9300      	str	r3, [sp, #0]
 80236d2:	4603      	mov	r3, r0
 80236d4:	2000      	movs	r0, #0
 80236d6:	f7ff fe0b 	bl	80232f0 <tcp_pbuf_prealloc>
 80236da:	6578      	str	r0, [r7, #84]	; 0x54
 80236dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80236de:	2b00      	cmp	r3, #0
 80236e0:	f000 8224 	beq.w	8023b2c <tcp_write+0x654>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 80236e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80236e6:	6858      	ldr	r0, [r3, #4]
 80236e8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80236ec:	68ba      	ldr	r2, [r7, #8]
 80236ee:	4413      	add	r3, r2
 80236f0:	8bfa      	ldrh	r2, [r7, #30]
 80236f2:	4619      	mov	r1, r3
 80236f4:	f002 fd43 	bl	802617e <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 80236f8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80236fa:	f7fb fca3 	bl	801f044 <pbuf_clen>
 80236fe:	4603      	mov	r3, r0
 8023700:	461a      	mov	r2, r3
 8023702:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8023706:	4413      	add	r3, r2
 8023708:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 802370c:	e041      	b.n	8023792 <tcp_write+0x2ba>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 802370e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8023710:	685b      	ldr	r3, [r3, #4]
 8023712:	637b      	str	r3, [r7, #52]	; 0x34
 8023714:	e002      	b.n	802371c <tcp_write+0x244>
 8023716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8023718:	681b      	ldr	r3, [r3, #0]
 802371a:	637b      	str	r3, [r7, #52]	; 0x34
 802371c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802371e:	681b      	ldr	r3, [r3, #0]
 8023720:	2b00      	cmp	r3, #0
 8023722:	d1f8      	bne.n	8023716 <tcp_write+0x23e>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8023724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8023726:	7b1b      	ldrb	r3, [r3, #12]
 8023728:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 802372c:	2b00      	cmp	r3, #0
 802372e:	d115      	bne.n	802375c <tcp_write+0x284>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8023730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8023732:	685b      	ldr	r3, [r3, #4]
 8023734:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8023736:	8952      	ldrh	r2, [r2, #10]
 8023738:	441a      	add	r2, r3
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 802373a:	68bb      	ldr	r3, [r7, #8]
 802373c:	429a      	cmp	r2, r3
 802373e:	d10d      	bne.n	802375c <tcp_write+0x284>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8023740:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8023744:	2b00      	cmp	r3, #0
 8023746:	d006      	beq.n	8023756 <tcp_write+0x27e>
 8023748:	4b1c      	ldr	r3, [pc, #112]	; (80237bc <tcp_write+0x2e4>)
 802374a:	f240 2231 	movw	r2, #561	; 0x231
 802374e:	4922      	ldr	r1, [pc, #136]	; (80237d8 <tcp_write+0x300>)
 8023750:	481c      	ldr	r0, [pc, #112]	; (80237c4 <tcp_write+0x2ec>)
 8023752:	f002 fded 	bl	8026330 <iprintf>
          extendlen = seglen;
 8023756:	8bfb      	ldrh	r3, [r7, #30]
 8023758:	87bb      	strh	r3, [r7, #60]	; 0x3c
 802375a:	e01a      	b.n	8023792 <tcp_write+0x2ba>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 802375c:	8bfb      	ldrh	r3, [r7, #30]
 802375e:	2201      	movs	r2, #1
 8023760:	4619      	mov	r1, r3
 8023762:	2000      	movs	r0, #0
 8023764:	f7fb f8fe 	bl	801e964 <pbuf_alloc>
 8023768:	6578      	str	r0, [r7, #84]	; 0x54
 802376a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802376c:	2b00      	cmp	r3, #0
 802376e:	f000 81df 	beq.w	8023b30 <tcp_write+0x658>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8023772:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8023776:	68ba      	ldr	r2, [r7, #8]
 8023778:	441a      	add	r2, r3
 802377a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802377c:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 802377e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8023780:	f7fb fc60 	bl	801f044 <pbuf_clen>
 8023784:	4603      	mov	r3, r0
 8023786:	461a      	mov	r2, r3
 8023788:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 802378c:	4413      	add	r3, r2
 802378e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8023792:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8023796:	8bfb      	ldrh	r3, [r7, #30]
 8023798:	4413      	add	r3, r2
 802379a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 802379e:	e0dc      	b.n	802395a <tcp_write+0x482>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 80237a0:	68fb      	ldr	r3, [r7, #12]
 80237a2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80237a6:	2b00      	cmp	r3, #0
 80237a8:	f000 80d7 	beq.w	802395a <tcp_write+0x482>
 80237ac:	4b03      	ldr	r3, [pc, #12]	; (80237bc <tcp_write+0x2e4>)
 80237ae:	f240 224b 	movw	r2, #587	; 0x24b
 80237b2:	490a      	ldr	r1, [pc, #40]	; (80237dc <tcp_write+0x304>)
 80237b4:	4803      	ldr	r0, [pc, #12]	; (80237c4 <tcp_write+0x2ec>)
 80237b6:	f002 fdbb 	bl	8026330 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 80237ba:	e0ce      	b.n	802395a <tcp_write+0x482>
 80237bc:	08029bfc 	.word	0x08029bfc
 80237c0:	08029d9c 	.word	0x08029d9c
 80237c4:	08029c50 	.word	0x08029c50
 80237c8:	08029db4 	.word	0x08029db4
 80237cc:	08029de8 	.word	0x08029de8
 80237d0:	08029e00 	.word	0x08029e00
 80237d4:	08029e20 	.word	0x08029e20
 80237d8:	08029e40 	.word	0x08029e40
 80237dc:	08029e6c 	.word	0x08029e6c
    struct pbuf *p;
    u16_t left = len - pos;
 80237e0:	88fa      	ldrh	r2, [r7, #6]
 80237e2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80237e6:	1ad3      	subs	r3, r2, r3
 80237e8:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 80237ea:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80237ee:	b29b      	uxth	r3, r3
 80237f0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80237f2:	1ad3      	subs	r3, r2, r3
 80237f4:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 80237f6:	8b7a      	ldrh	r2, [r7, #26]
 80237f8:	8bbb      	ldrh	r3, [r7, #28]
 80237fa:	4293      	cmp	r3, r2
 80237fc:	bf28      	it	cs
 80237fe:	4613      	movcs	r3, r2
 8023800:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8023802:	797b      	ldrb	r3, [r7, #5]
 8023804:	f003 0301 	and.w	r3, r3, #1
 8023808:	2b00      	cmp	r3, #0
 802380a:	d036      	beq.n	802387a <tcp_write+0x3a2>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 802380c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8023810:	b29a      	uxth	r2, r3
 8023812:	8b3b      	ldrh	r3, [r7, #24]
 8023814:	4413      	add	r3, r2
 8023816:	b299      	uxth	r1, r3
 8023818:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802381a:	2b00      	cmp	r3, #0
 802381c:	bf0c      	ite	eq
 802381e:	2301      	moveq	r3, #1
 8023820:	2300      	movne	r3, #0
 8023822:	b2db      	uxtb	r3, r3
 8023824:	f107 0012 	add.w	r0, r7, #18
 8023828:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 802382a:	9302      	str	r3, [sp, #8]
 802382c:	797b      	ldrb	r3, [r7, #5]
 802382e:	9301      	str	r3, [sp, #4]
 8023830:	68fb      	ldr	r3, [r7, #12]
 8023832:	9300      	str	r3, [sp, #0]
 8023834:	4603      	mov	r3, r0
 8023836:	2036      	movs	r0, #54	; 0x36
 8023838:	f7ff fd5a 	bl	80232f0 <tcp_pbuf_prealloc>
 802383c:	6338      	str	r0, [r7, #48]	; 0x30
 802383e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023840:	2b00      	cmp	r3, #0
 8023842:	f000 8177 	beq.w	8023b34 <tcp_write+0x65c>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8023846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023848:	895b      	ldrh	r3, [r3, #10]
 802384a:	8b3a      	ldrh	r2, [r7, #24]
 802384c:	429a      	cmp	r2, r3
 802384e:	d906      	bls.n	802385e <tcp_write+0x386>
 8023850:	4b8c      	ldr	r3, [pc, #560]	; (8023a84 <tcp_write+0x5ac>)
 8023852:	f240 2267 	movw	r2, #615	; 0x267
 8023856:	498c      	ldr	r1, [pc, #560]	; (8023a88 <tcp_write+0x5b0>)
 8023858:	488c      	ldr	r0, [pc, #560]	; (8023a8c <tcp_write+0x5b4>)
 802385a:	f002 fd69 	bl	8026330 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 802385e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023860:	685a      	ldr	r2, [r3, #4]
 8023862:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8023866:	18d0      	adds	r0, r2, r3
 8023868:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 802386c:	68ba      	ldr	r2, [r7, #8]
 802386e:	4413      	add	r3, r2
 8023870:	8b3a      	ldrh	r2, [r7, #24]
 8023872:	4619      	mov	r1, r3
 8023874:	f002 fc83 	bl	802617e <memcpy>
 8023878:	e02f      	b.n	80238da <tcp_write+0x402>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 802387a:	8a7b      	ldrh	r3, [r7, #18]
 802387c:	2b00      	cmp	r3, #0
 802387e:	d006      	beq.n	802388e <tcp_write+0x3b6>
 8023880:	4b80      	ldr	r3, [pc, #512]	; (8023a84 <tcp_write+0x5ac>)
 8023882:	f240 2271 	movw	r2, #625	; 0x271
 8023886:	4982      	ldr	r1, [pc, #520]	; (8023a90 <tcp_write+0x5b8>)
 8023888:	4880      	ldr	r0, [pc, #512]	; (8023a8c <tcp_write+0x5b4>)
 802388a:	f002 fd51 	bl	8026330 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 802388e:	8b3b      	ldrh	r3, [r7, #24]
 8023890:	2201      	movs	r2, #1
 8023892:	4619      	mov	r1, r3
 8023894:	2036      	movs	r0, #54	; 0x36
 8023896:	f7fb f865 	bl	801e964 <pbuf_alloc>
 802389a:	6178      	str	r0, [r7, #20]
 802389c:	697b      	ldr	r3, [r7, #20]
 802389e:	2b00      	cmp	r3, #0
 80238a0:	f000 814a 	beq.w	8023b38 <tcp_write+0x660>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 80238a4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80238a8:	68ba      	ldr	r2, [r7, #8]
 80238aa:	441a      	add	r2, r3
 80238ac:	697b      	ldr	r3, [r7, #20]
 80238ae:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80238b0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80238b4:	b29b      	uxth	r3, r3
 80238b6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80238ba:	4619      	mov	r1, r3
 80238bc:	2036      	movs	r0, #54	; 0x36
 80238be:	f7fb f851 	bl	801e964 <pbuf_alloc>
 80238c2:	6338      	str	r0, [r7, #48]	; 0x30
 80238c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80238c6:	2b00      	cmp	r3, #0
 80238c8:	d103      	bne.n	80238d2 <tcp_write+0x3fa>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 80238ca:	6978      	ldr	r0, [r7, #20]
 80238cc:	f7fb fb2c 	bl	801ef28 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 80238d0:	e135      	b.n	8023b3e <tcp_write+0x666>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 80238d2:	6979      	ldr	r1, [r7, #20]
 80238d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80238d6:	f7fb fbf5 	bl	801f0c4 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 80238da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80238dc:	f7fb fbb2 	bl	801f044 <pbuf_clen>
 80238e0:	4603      	mov	r3, r0
 80238e2:	461a      	mov	r2, r3
 80238e4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80238e8:	4413      	add	r3, r2
 80238ea:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 80238ee:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80238f2:	2b08      	cmp	r3, #8
 80238f4:	d903      	bls.n	80238fe <tcp_write+0x426>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 80238f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80238f8:	f7fb fb16 	bl	801ef28 <pbuf_free>
      goto memerr;
 80238fc:	e11f      	b.n	8023b3e <tcp_write+0x666>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 80238fe:	68fb      	ldr	r3, [r7, #12]
 8023900:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8023902:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8023906:	441a      	add	r2, r3
 8023908:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802390c:	9300      	str	r3, [sp, #0]
 802390e:	4613      	mov	r3, r2
 8023910:	2200      	movs	r2, #0
 8023912:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8023914:	68f8      	ldr	r0, [r7, #12]
 8023916:	f7ff fc4b 	bl	80231b0 <tcp_create_segment>
 802391a:	64f8      	str	r0, [r7, #76]	; 0x4c
 802391c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802391e:	2b00      	cmp	r3, #0
 8023920:	f000 810c 	beq.w	8023b3c <tcp_write+0x664>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8023924:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8023926:	2b00      	cmp	r3, #0
 8023928:	d102      	bne.n	8023930 <tcp_write+0x458>
      queue = seg;
 802392a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802392c:	647b      	str	r3, [r7, #68]	; 0x44
 802392e:	e00c      	b.n	802394a <tcp_write+0x472>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8023930:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8023932:	2b00      	cmp	r3, #0
 8023934:	d106      	bne.n	8023944 <tcp_write+0x46c>
 8023936:	4b53      	ldr	r3, [pc, #332]	; (8023a84 <tcp_write+0x5ac>)
 8023938:	f240 22ab 	movw	r2, #683	; 0x2ab
 802393c:	4955      	ldr	r1, [pc, #340]	; (8023a94 <tcp_write+0x5bc>)
 802393e:	4853      	ldr	r0, [pc, #332]	; (8023a8c <tcp_write+0x5b4>)
 8023940:	f002 fcf6 	bl	8026330 <iprintf>
      prev_seg->next = seg;
 8023944:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8023946:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8023948:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 802394a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802394c:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 802394e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8023952:	8b3b      	ldrh	r3, [r7, #24]
 8023954:	4413      	add	r3, r2
 8023956:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 802395a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 802395e:	88fb      	ldrh	r3, [r7, #6]
 8023960:	429a      	cmp	r2, r3
 8023962:	f4ff af3d 	bcc.w	80237e0 <tcp_write+0x308>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8023966:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8023968:	2b00      	cmp	r3, #0
 802396a:	d02c      	beq.n	80239c6 <tcp_write+0x4ee>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 802396c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802396e:	685b      	ldr	r3, [r3, #4]
 8023970:	62fb      	str	r3, [r7, #44]	; 0x2c
 8023972:	e01e      	b.n	80239b2 <tcp_write+0x4da>
      p->tot_len += oversize_used;
 8023974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023976:	891a      	ldrh	r2, [r3, #8]
 8023978:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 802397a:	4413      	add	r3, r2
 802397c:	b29a      	uxth	r2, r3
 802397e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023980:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8023982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023984:	681b      	ldr	r3, [r3, #0]
 8023986:	2b00      	cmp	r3, #0
 8023988:	d110      	bne.n	80239ac <tcp_write+0x4d4>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 802398a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802398c:	685b      	ldr	r3, [r3, #4]
 802398e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8023990:	8952      	ldrh	r2, [r2, #10]
 8023992:	4413      	add	r3, r2
 8023994:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8023996:	68b9      	ldr	r1, [r7, #8]
 8023998:	4618      	mov	r0, r3
 802399a:	f002 fbf0 	bl	802617e <memcpy>
        p->len += oversize_used;
 802399e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80239a0:	895a      	ldrh	r2, [r3, #10]
 80239a2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80239a4:	4413      	add	r3, r2
 80239a6:	b29a      	uxth	r2, r3
 80239a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80239aa:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 80239ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80239ae:	681b      	ldr	r3, [r3, #0]
 80239b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80239b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80239b4:	2b00      	cmp	r3, #0
 80239b6:	d1dd      	bne.n	8023974 <tcp_write+0x49c>
      }
    }
    last_unsent->len += oversize_used;
 80239b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80239ba:	891a      	ldrh	r2, [r3, #8]
 80239bc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80239be:	4413      	add	r3, r2
 80239c0:	b29a      	uxth	r2, r3
 80239c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80239c4:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 80239c6:	8a7a      	ldrh	r2, [r7, #18]
 80239c8:	68fb      	ldr	r3, [r7, #12]
 80239ca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 80239ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80239d0:	2b00      	cmp	r3, #0
 80239d2:	d018      	beq.n	8023a06 <tcp_write+0x52e>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 80239d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80239d6:	2b00      	cmp	r3, #0
 80239d8:	d106      	bne.n	80239e8 <tcp_write+0x510>
 80239da:	4b2a      	ldr	r3, [pc, #168]	; (8023a84 <tcp_write+0x5ac>)
 80239dc:	f240 22e1 	movw	r2, #737	; 0x2e1
 80239e0:	492d      	ldr	r1, [pc, #180]	; (8023a98 <tcp_write+0x5c0>)
 80239e2:	482a      	ldr	r0, [pc, #168]	; (8023a8c <tcp_write+0x5b4>)
 80239e4:	f002 fca4 	bl	8026330 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 80239e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80239ea:	685b      	ldr	r3, [r3, #4]
 80239ec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80239ee:	4618      	mov	r0, r3
 80239f0:	f7fb fb68 	bl	801f0c4 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 80239f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80239f6:	891a      	ldrh	r2, [r3, #8]
 80239f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80239fa:	891b      	ldrh	r3, [r3, #8]
 80239fc:	4413      	add	r3, r2
 80239fe:	b29a      	uxth	r2, r3
 8023a00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8023a02:	811a      	strh	r2, [r3, #8]
 8023a04:	e037      	b.n	8023a76 <tcp_write+0x59e>
  } else if (extendlen > 0) {
 8023a06:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8023a08:	2b00      	cmp	r3, #0
 8023a0a:	d034      	beq.n	8023a76 <tcp_write+0x59e>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8023a0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8023a0e:	2b00      	cmp	r3, #0
 8023a10:	d003      	beq.n	8023a1a <tcp_write+0x542>
 8023a12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8023a14:	685b      	ldr	r3, [r3, #4]
 8023a16:	2b00      	cmp	r3, #0
 8023a18:	d106      	bne.n	8023a28 <tcp_write+0x550>
 8023a1a:	4b1a      	ldr	r3, [pc, #104]	; (8023a84 <tcp_write+0x5ac>)
 8023a1c:	f240 22e7 	movw	r2, #743	; 0x2e7
 8023a20:	491e      	ldr	r1, [pc, #120]	; (8023a9c <tcp_write+0x5c4>)
 8023a22:	481a      	ldr	r0, [pc, #104]	; (8023a8c <tcp_write+0x5b4>)
 8023a24:	f002 fc84 	bl	8026330 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8023a28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8023a2a:	685b      	ldr	r3, [r3, #4]
 8023a2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8023a2e:	e009      	b.n	8023a44 <tcp_write+0x56c>
      p->tot_len += extendlen;
 8023a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023a32:	891a      	ldrh	r2, [r3, #8]
 8023a34:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8023a36:	4413      	add	r3, r2
 8023a38:	b29a      	uxth	r2, r3
 8023a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023a3c:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8023a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023a40:	681b      	ldr	r3, [r3, #0]
 8023a42:	62bb      	str	r3, [r7, #40]	; 0x28
 8023a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023a46:	681b      	ldr	r3, [r3, #0]
 8023a48:	2b00      	cmp	r3, #0
 8023a4a:	d1f1      	bne.n	8023a30 <tcp_write+0x558>
    }
    p->tot_len += extendlen;
 8023a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023a4e:	891a      	ldrh	r2, [r3, #8]
 8023a50:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8023a52:	4413      	add	r3, r2
 8023a54:	b29a      	uxth	r2, r3
 8023a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023a58:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8023a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023a5c:	895a      	ldrh	r2, [r3, #10]
 8023a5e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8023a60:	4413      	add	r3, r2
 8023a62:	b29a      	uxth	r2, r3
 8023a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023a66:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8023a68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8023a6a:	891a      	ldrh	r2, [r3, #8]
 8023a6c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8023a6e:	4413      	add	r3, r2
 8023a70:	b29a      	uxth	r2, r3
 8023a72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8023a74:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8023a76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8023a78:	2b00      	cmp	r3, #0
 8023a7a:	d111      	bne.n	8023aa0 <tcp_write+0x5c8>
    pcb->unsent = queue;
 8023a7c:	68fb      	ldr	r3, [r7, #12]
 8023a7e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8023a80:	66da      	str	r2, [r3, #108]	; 0x6c
 8023a82:	e010      	b.n	8023aa6 <tcp_write+0x5ce>
 8023a84:	08029bfc 	.word	0x08029bfc
 8023a88:	08029e9c 	.word	0x08029e9c
 8023a8c:	08029c50 	.word	0x08029c50
 8023a90:	08029edc 	.word	0x08029edc
 8023a94:	08029eec 	.word	0x08029eec
 8023a98:	08029f00 	.word	0x08029f00
 8023a9c:	08029f38 	.word	0x08029f38
  } else {
    last_unsent->next = queue;
 8023aa0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8023aa2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8023aa4:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8023aa6:	68fb      	ldr	r3, [r7, #12]
 8023aa8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8023aaa:	88fb      	ldrh	r3, [r7, #6]
 8023aac:	441a      	add	r2, r3
 8023aae:	68fb      	ldr	r3, [r7, #12]
 8023ab0:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8023ab2:	68fb      	ldr	r3, [r7, #12]
 8023ab4:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8023ab8:	88fb      	ldrh	r3, [r7, #6]
 8023aba:	1ad3      	subs	r3, r2, r3
 8023abc:	b29a      	uxth	r2, r3
 8023abe:	68fb      	ldr	r3, [r7, #12]
 8023ac0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8023ac4:	68fb      	ldr	r3, [r7, #12]
 8023ac6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8023aca:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8023ace:	68fb      	ldr	r3, [r7, #12]
 8023ad0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8023ad4:	2b00      	cmp	r3, #0
 8023ad6:	d00e      	beq.n	8023af6 <tcp_write+0x61e>
    LWIP_ASSERT("tcp_write: valid queue length",
 8023ad8:	68fb      	ldr	r3, [r7, #12]
 8023ada:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8023adc:	2b00      	cmp	r3, #0
 8023ade:	d10a      	bne.n	8023af6 <tcp_write+0x61e>
 8023ae0:	68fb      	ldr	r3, [r7, #12]
 8023ae2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8023ae4:	2b00      	cmp	r3, #0
 8023ae6:	d106      	bne.n	8023af6 <tcp_write+0x61e>
 8023ae8:	4b2b      	ldr	r3, [pc, #172]	; (8023b98 <tcp_write+0x6c0>)
 8023aea:	f240 3213 	movw	r2, #787	; 0x313
 8023aee:	492b      	ldr	r1, [pc, #172]	; (8023b9c <tcp_write+0x6c4>)
 8023af0:	482b      	ldr	r0, [pc, #172]	; (8023ba0 <tcp_write+0x6c8>)
 8023af2:	f002 fc1d 	bl	8026330 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8023af6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8023af8:	2b00      	cmp	r3, #0
 8023afa:	d015      	beq.n	8023b28 <tcp_write+0x650>
 8023afc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8023afe:	68db      	ldr	r3, [r3, #12]
 8023b00:	2b00      	cmp	r3, #0
 8023b02:	d011      	beq.n	8023b28 <tcp_write+0x650>
 8023b04:	797b      	ldrb	r3, [r7, #5]
 8023b06:	f003 0302 	and.w	r3, r3, #2
 8023b0a:	2b00      	cmp	r3, #0
 8023b0c:	d10c      	bne.n	8023b28 <tcp_write+0x650>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8023b0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8023b10:	68dc      	ldr	r4, [r3, #12]
 8023b12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8023b14:	68db      	ldr	r3, [r3, #12]
 8023b16:	899b      	ldrh	r3, [r3, #12]
 8023b18:	b29d      	uxth	r5, r3
 8023b1a:	2008      	movs	r0, #8
 8023b1c:	f7f5 fb04 	bl	8019128 <lwip_htons>
 8023b20:	4603      	mov	r3, r0
 8023b22:	432b      	orrs	r3, r5
 8023b24:	b29b      	uxth	r3, r3
 8023b26:	81a3      	strh	r3, [r4, #12]
  }

  return ERR_OK;
 8023b28:	2300      	movs	r3, #0
 8023b2a:	e031      	b.n	8023b90 <tcp_write+0x6b8>
          goto memerr;
 8023b2c:	bf00      	nop
 8023b2e:	e006      	b.n	8023b3e <tcp_write+0x666>
            goto memerr;
 8023b30:	bf00      	nop
 8023b32:	e004      	b.n	8023b3e <tcp_write+0x666>
        goto memerr;
 8023b34:	bf00      	nop
 8023b36:	e002      	b.n	8023b3e <tcp_write+0x666>
        goto memerr;
 8023b38:	bf00      	nop
 8023b3a:	e000      	b.n	8023b3e <tcp_write+0x666>
      goto memerr;
 8023b3c:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8023b3e:	68fb      	ldr	r3, [r7, #12]
 8023b40:	8b5b      	ldrh	r3, [r3, #26]
 8023b42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8023b46:	b29a      	uxth	r2, r3
 8023b48:	68fb      	ldr	r3, [r7, #12]
 8023b4a:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8023b4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8023b4e:	2b00      	cmp	r3, #0
 8023b50:	d002      	beq.n	8023b58 <tcp_write+0x680>
    pbuf_free(concat_p);
 8023b52:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8023b54:	f7fb f9e8 	bl	801ef28 <pbuf_free>
  }
  if (queue != NULL) {
 8023b58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8023b5a:	2b00      	cmp	r3, #0
 8023b5c:	d002      	beq.n	8023b64 <tcp_write+0x68c>
    tcp_segs_free(queue);
 8023b5e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8023b60:	f7fc ff52 	bl	8020a08 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8023b64:	68fb      	ldr	r3, [r7, #12]
 8023b66:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8023b6a:	2b00      	cmp	r3, #0
 8023b6c:	d00e      	beq.n	8023b8c <tcp_write+0x6b4>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8023b6e:	68fb      	ldr	r3, [r7, #12]
 8023b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8023b72:	2b00      	cmp	r3, #0
 8023b74:	d10a      	bne.n	8023b8c <tcp_write+0x6b4>
 8023b76:	68fb      	ldr	r3, [r7, #12]
 8023b78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8023b7a:	2b00      	cmp	r3, #0
 8023b7c:	d106      	bne.n	8023b8c <tcp_write+0x6b4>
 8023b7e:	4b06      	ldr	r3, [pc, #24]	; (8023b98 <tcp_write+0x6c0>)
 8023b80:	f44f 724a 	mov.w	r2, #808	; 0x328
 8023b84:	4905      	ldr	r1, [pc, #20]	; (8023b9c <tcp_write+0x6c4>)
 8023b86:	4806      	ldr	r0, [pc, #24]	; (8023ba0 <tcp_write+0x6c8>)
 8023b88:	f002 fbd2 	bl	8026330 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8023b8c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8023b90:	4618      	mov	r0, r3
 8023b92:	3758      	adds	r7, #88	; 0x58
 8023b94:	46bd      	mov	sp, r7
 8023b96:	bdb0      	pop	{r4, r5, r7, pc}
 8023b98:	08029bfc 	.word	0x08029bfc
 8023b9c:	08029f70 	.word	0x08029f70
 8023ba0:	08029c50 	.word	0x08029c50

08023ba4 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8023ba4:	b5b0      	push	{r4, r5, r7, lr}
 8023ba6:	b08a      	sub	sp, #40	; 0x28
 8023ba8:	af02      	add	r7, sp, #8
 8023baa:	6078      	str	r0, [r7, #4]
 8023bac:	460b      	mov	r3, r1
 8023bae:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8023bb0:	2300      	movs	r3, #0
 8023bb2:	61fb      	str	r3, [r7, #28]
 8023bb4:	2300      	movs	r3, #0
 8023bb6:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8023bb8:	2300      	movs	r3, #0
 8023bba:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8023bbc:	687b      	ldr	r3, [r7, #4]
 8023bbe:	2b00      	cmp	r3, #0
 8023bc0:	d106      	bne.n	8023bd0 <tcp_split_unsent_seg+0x2c>
 8023bc2:	4b96      	ldr	r3, [pc, #600]	; (8023e1c <tcp_split_unsent_seg+0x278>)
 8023bc4:	f240 324b 	movw	r2, #843	; 0x34b
 8023bc8:	4995      	ldr	r1, [pc, #596]	; (8023e20 <tcp_split_unsent_seg+0x27c>)
 8023bca:	4896      	ldr	r0, [pc, #600]	; (8023e24 <tcp_split_unsent_seg+0x280>)
 8023bcc:	f002 fbb0 	bl	8026330 <iprintf>

  useg = pcb->unsent;
 8023bd0:	687b      	ldr	r3, [r7, #4]
 8023bd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8023bd4:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8023bd6:	697b      	ldr	r3, [r7, #20]
 8023bd8:	2b00      	cmp	r3, #0
 8023bda:	d102      	bne.n	8023be2 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8023bdc:	f04f 33ff 	mov.w	r3, #4294967295
 8023be0:	e118      	b.n	8023e14 <tcp_split_unsent_seg+0x270>
  }

  if (split == 0) {
 8023be2:	887b      	ldrh	r3, [r7, #2]
 8023be4:	2b00      	cmp	r3, #0
 8023be6:	d109      	bne.n	8023bfc <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8023be8:	4b8c      	ldr	r3, [pc, #560]	; (8023e1c <tcp_split_unsent_seg+0x278>)
 8023bea:	f240 3253 	movw	r2, #851	; 0x353
 8023bee:	498e      	ldr	r1, [pc, #568]	; (8023e28 <tcp_split_unsent_seg+0x284>)
 8023bf0:	488c      	ldr	r0, [pc, #560]	; (8023e24 <tcp_split_unsent_seg+0x280>)
 8023bf2:	f002 fb9d 	bl	8026330 <iprintf>
    return ERR_VAL;
 8023bf6:	f06f 0305 	mvn.w	r3, #5
 8023bfa:	e10b      	b.n	8023e14 <tcp_split_unsent_seg+0x270>
  }

  if (useg->len <= split) {
 8023bfc:	697b      	ldr	r3, [r7, #20]
 8023bfe:	891b      	ldrh	r3, [r3, #8]
 8023c00:	887a      	ldrh	r2, [r7, #2]
 8023c02:	429a      	cmp	r2, r3
 8023c04:	d301      	bcc.n	8023c0a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8023c06:	2300      	movs	r3, #0
 8023c08:	e104      	b.n	8023e14 <tcp_split_unsent_seg+0x270>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8023c0a:	687b      	ldr	r3, [r7, #4]
 8023c0c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8023c0e:	887a      	ldrh	r2, [r7, #2]
 8023c10:	429a      	cmp	r2, r3
 8023c12:	d906      	bls.n	8023c22 <tcp_split_unsent_seg+0x7e>
 8023c14:	4b81      	ldr	r3, [pc, #516]	; (8023e1c <tcp_split_unsent_seg+0x278>)
 8023c16:	f240 325b 	movw	r2, #859	; 0x35b
 8023c1a:	4984      	ldr	r1, [pc, #528]	; (8023e2c <tcp_split_unsent_seg+0x288>)
 8023c1c:	4881      	ldr	r0, [pc, #516]	; (8023e24 <tcp_split_unsent_seg+0x280>)
 8023c1e:	f002 fb87 	bl	8026330 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8023c22:	697b      	ldr	r3, [r7, #20]
 8023c24:	891b      	ldrh	r3, [r3, #8]
 8023c26:	2b00      	cmp	r3, #0
 8023c28:	d106      	bne.n	8023c38 <tcp_split_unsent_seg+0x94>
 8023c2a:	4b7c      	ldr	r3, [pc, #496]	; (8023e1c <tcp_split_unsent_seg+0x278>)
 8023c2c:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8023c30:	497f      	ldr	r1, [pc, #508]	; (8023e30 <tcp_split_unsent_seg+0x28c>)
 8023c32:	487c      	ldr	r0, [pc, #496]	; (8023e24 <tcp_split_unsent_seg+0x280>)
 8023c34:	f002 fb7c 	bl	8026330 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8023c38:	697b      	ldr	r3, [r7, #20]
 8023c3a:	7a9b      	ldrb	r3, [r3, #10]
 8023c3c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8023c3e:	7bfb      	ldrb	r3, [r7, #15]
 8023c40:	f003 0301 	and.w	r3, r3, #1
 8023c44:	2b00      	cmp	r3, #0
 8023c46:	d001      	beq.n	8023c4c <tcp_split_unsent_seg+0xa8>
 8023c48:	2304      	movs	r3, #4
 8023c4a:	e000      	b.n	8023c4e <tcp_split_unsent_seg+0xaa>
 8023c4c:	2300      	movs	r3, #0
 8023c4e:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8023c50:	697b      	ldr	r3, [r7, #20]
 8023c52:	891a      	ldrh	r2, [r3, #8]
 8023c54:	887b      	ldrh	r3, [r7, #2]
 8023c56:	1ad3      	subs	r3, r2, r3
 8023c58:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8023c5a:	7bbb      	ldrb	r3, [r7, #14]
 8023c5c:	b29a      	uxth	r2, r3
 8023c5e:	89bb      	ldrh	r3, [r7, #12]
 8023c60:	4413      	add	r3, r2
 8023c62:	b29b      	uxth	r3, r3
 8023c64:	f44f 7220 	mov.w	r2, #640	; 0x280
 8023c68:	4619      	mov	r1, r3
 8023c6a:	2036      	movs	r0, #54	; 0x36
 8023c6c:	f7fa fe7a 	bl	801e964 <pbuf_alloc>
 8023c70:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8023c72:	693b      	ldr	r3, [r7, #16]
 8023c74:	2b00      	cmp	r3, #0
 8023c76:	f000 80b6 	beq.w	8023de6 <tcp_split_unsent_seg+0x242>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8023c7a:	697b      	ldr	r3, [r7, #20]
 8023c7c:	685b      	ldr	r3, [r3, #4]
 8023c7e:	891a      	ldrh	r2, [r3, #8]
 8023c80:	697b      	ldr	r3, [r7, #20]
 8023c82:	891b      	ldrh	r3, [r3, #8]
 8023c84:	1ad3      	subs	r3, r2, r3
 8023c86:	b29a      	uxth	r2, r3
 8023c88:	887b      	ldrh	r3, [r7, #2]
 8023c8a:	4413      	add	r3, r2
 8023c8c:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8023c8e:	697b      	ldr	r3, [r7, #20]
 8023c90:	6858      	ldr	r0, [r3, #4]
 8023c92:	693b      	ldr	r3, [r7, #16]
 8023c94:	685a      	ldr	r2, [r3, #4]
 8023c96:	7bbb      	ldrb	r3, [r7, #14]
 8023c98:	18d1      	adds	r1, r2, r3
 8023c9a:	897b      	ldrh	r3, [r7, #10]
 8023c9c:	89ba      	ldrh	r2, [r7, #12]
 8023c9e:	f7fb fb49 	bl	801f334 <pbuf_copy_partial>
 8023ca2:	4603      	mov	r3, r0
 8023ca4:	461a      	mov	r2, r3
 8023ca6:	89bb      	ldrh	r3, [r7, #12]
 8023ca8:	4293      	cmp	r3, r2
 8023caa:	f040 809e 	bne.w	8023dea <tcp_split_unsent_seg+0x246>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8023cae:	697b      	ldr	r3, [r7, #20]
 8023cb0:	68db      	ldr	r3, [r3, #12]
 8023cb2:	899b      	ldrh	r3, [r3, #12]
 8023cb4:	b29b      	uxth	r3, r3
 8023cb6:	4618      	mov	r0, r3
 8023cb8:	f7f5 fa36 	bl	8019128 <lwip_htons>
 8023cbc:	4603      	mov	r3, r0
 8023cbe:	b2db      	uxtb	r3, r3
 8023cc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8023cc4:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8023cc6:	2300      	movs	r3, #0
 8023cc8:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8023cca:	7efb      	ldrb	r3, [r7, #27]
 8023ccc:	f003 0308 	and.w	r3, r3, #8
 8023cd0:	2b00      	cmp	r3, #0
 8023cd2:	d007      	beq.n	8023ce4 <tcp_split_unsent_seg+0x140>
    split_flags &= ~TCP_PSH;
 8023cd4:	7efb      	ldrb	r3, [r7, #27]
 8023cd6:	f023 0308 	bic.w	r3, r3, #8
 8023cda:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8023cdc:	7ebb      	ldrb	r3, [r7, #26]
 8023cde:	f043 0308 	orr.w	r3, r3, #8
 8023ce2:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8023ce4:	7efb      	ldrb	r3, [r7, #27]
 8023ce6:	f003 0301 	and.w	r3, r3, #1
 8023cea:	2b00      	cmp	r3, #0
 8023cec:	d007      	beq.n	8023cfe <tcp_split_unsent_seg+0x15a>
    split_flags &= ~TCP_FIN;
 8023cee:	7efb      	ldrb	r3, [r7, #27]
 8023cf0:	f023 0301 	bic.w	r3, r3, #1
 8023cf4:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8023cf6:	7ebb      	ldrb	r3, [r7, #26]
 8023cf8:	f043 0301 	orr.w	r3, r3, #1
 8023cfc:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8023cfe:	697b      	ldr	r3, [r7, #20]
 8023d00:	68db      	ldr	r3, [r3, #12]
 8023d02:	685b      	ldr	r3, [r3, #4]
 8023d04:	4618      	mov	r0, r3
 8023d06:	f7f5 fa24 	bl	8019152 <lwip_htonl>
 8023d0a:	4602      	mov	r2, r0
 8023d0c:	887b      	ldrh	r3, [r7, #2]
 8023d0e:	18d1      	adds	r1, r2, r3
 8023d10:	7eba      	ldrb	r2, [r7, #26]
 8023d12:	7bfb      	ldrb	r3, [r7, #15]
 8023d14:	9300      	str	r3, [sp, #0]
 8023d16:	460b      	mov	r3, r1
 8023d18:	6939      	ldr	r1, [r7, #16]
 8023d1a:	6878      	ldr	r0, [r7, #4]
 8023d1c:	f7ff fa48 	bl	80231b0 <tcp_create_segment>
 8023d20:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8023d22:	69fb      	ldr	r3, [r7, #28]
 8023d24:	2b00      	cmp	r3, #0
 8023d26:	d062      	beq.n	8023dee <tcp_split_unsent_seg+0x24a>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8023d28:	697b      	ldr	r3, [r7, #20]
 8023d2a:	685b      	ldr	r3, [r3, #4]
 8023d2c:	4618      	mov	r0, r3
 8023d2e:	f7fb f989 	bl	801f044 <pbuf_clen>
 8023d32:	4603      	mov	r3, r0
 8023d34:	461a      	mov	r2, r3
 8023d36:	687b      	ldr	r3, [r7, #4]
 8023d38:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8023d3c:	1a9b      	subs	r3, r3, r2
 8023d3e:	b29a      	uxth	r2, r3
 8023d40:	687b      	ldr	r3, [r7, #4]
 8023d42:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8023d46:	697b      	ldr	r3, [r7, #20]
 8023d48:	6858      	ldr	r0, [r3, #4]
 8023d4a:	697b      	ldr	r3, [r7, #20]
 8023d4c:	685b      	ldr	r3, [r3, #4]
 8023d4e:	891a      	ldrh	r2, [r3, #8]
 8023d50:	89bb      	ldrh	r3, [r7, #12]
 8023d52:	1ad3      	subs	r3, r2, r3
 8023d54:	b29b      	uxth	r3, r3
 8023d56:	4619      	mov	r1, r3
 8023d58:	f7fa ff5e 	bl	801ec18 <pbuf_realloc>
  useg->len -= remainder;
 8023d5c:	697b      	ldr	r3, [r7, #20]
 8023d5e:	891a      	ldrh	r2, [r3, #8]
 8023d60:	89bb      	ldrh	r3, [r7, #12]
 8023d62:	1ad3      	subs	r3, r2, r3
 8023d64:	b29a      	uxth	r2, r3
 8023d66:	697b      	ldr	r3, [r7, #20]
 8023d68:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8023d6a:	697b      	ldr	r3, [r7, #20]
 8023d6c:	68dc      	ldr	r4, [r3, #12]
 8023d6e:	697b      	ldr	r3, [r7, #20]
 8023d70:	68db      	ldr	r3, [r3, #12]
 8023d72:	899b      	ldrh	r3, [r3, #12]
 8023d74:	b29d      	uxth	r5, r3
 8023d76:	7efb      	ldrb	r3, [r7, #27]
 8023d78:	b29b      	uxth	r3, r3
 8023d7a:	4618      	mov	r0, r3
 8023d7c:	f7f5 f9d4 	bl	8019128 <lwip_htons>
 8023d80:	4603      	mov	r3, r0
 8023d82:	432b      	orrs	r3, r5
 8023d84:	b29b      	uxth	r3, r3
 8023d86:	81a3      	strh	r3, [r4, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8023d88:	697b      	ldr	r3, [r7, #20]
 8023d8a:	685b      	ldr	r3, [r3, #4]
 8023d8c:	4618      	mov	r0, r3
 8023d8e:	f7fb f959 	bl	801f044 <pbuf_clen>
 8023d92:	4603      	mov	r3, r0
 8023d94:	461a      	mov	r2, r3
 8023d96:	687b      	ldr	r3, [r7, #4]
 8023d98:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8023d9c:	4413      	add	r3, r2
 8023d9e:	b29a      	uxth	r2, r3
 8023da0:	687b      	ldr	r3, [r7, #4]
 8023da2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8023da6:	69fb      	ldr	r3, [r7, #28]
 8023da8:	685b      	ldr	r3, [r3, #4]
 8023daa:	4618      	mov	r0, r3
 8023dac:	f7fb f94a 	bl	801f044 <pbuf_clen>
 8023db0:	4603      	mov	r3, r0
 8023db2:	461a      	mov	r2, r3
 8023db4:	687b      	ldr	r3, [r7, #4]
 8023db6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8023dba:	4413      	add	r3, r2
 8023dbc:	b29a      	uxth	r2, r3
 8023dbe:	687b      	ldr	r3, [r7, #4]
 8023dc0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8023dc4:	697b      	ldr	r3, [r7, #20]
 8023dc6:	681a      	ldr	r2, [r3, #0]
 8023dc8:	69fb      	ldr	r3, [r7, #28]
 8023dca:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8023dcc:	697b      	ldr	r3, [r7, #20]
 8023dce:	69fa      	ldr	r2, [r7, #28]
 8023dd0:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8023dd2:	69fb      	ldr	r3, [r7, #28]
 8023dd4:	681b      	ldr	r3, [r3, #0]
 8023dd6:	2b00      	cmp	r3, #0
 8023dd8:	d103      	bne.n	8023de2 <tcp_split_unsent_seg+0x23e>
    pcb->unsent_oversize = 0;
 8023dda:	687b      	ldr	r3, [r7, #4]
 8023ddc:	2200      	movs	r2, #0
 8023dde:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8023de2:	2300      	movs	r3, #0
 8023de4:	e016      	b.n	8023e14 <tcp_split_unsent_seg+0x270>
    goto memerr;
 8023de6:	bf00      	nop
 8023de8:	e002      	b.n	8023df0 <tcp_split_unsent_seg+0x24c>
    goto memerr;
 8023dea:	bf00      	nop
 8023dec:	e000      	b.n	8023df0 <tcp_split_unsent_seg+0x24c>
    goto memerr;
 8023dee:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8023df0:	69fb      	ldr	r3, [r7, #28]
 8023df2:	2b00      	cmp	r3, #0
 8023df4:	d006      	beq.n	8023e04 <tcp_split_unsent_seg+0x260>
 8023df6:	4b09      	ldr	r3, [pc, #36]	; (8023e1c <tcp_split_unsent_seg+0x278>)
 8023df8:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8023dfc:	490d      	ldr	r1, [pc, #52]	; (8023e34 <tcp_split_unsent_seg+0x290>)
 8023dfe:	4809      	ldr	r0, [pc, #36]	; (8023e24 <tcp_split_unsent_seg+0x280>)
 8023e00:	f002 fa96 	bl	8026330 <iprintf>
  if (p != NULL) {
 8023e04:	693b      	ldr	r3, [r7, #16]
 8023e06:	2b00      	cmp	r3, #0
 8023e08:	d002      	beq.n	8023e10 <tcp_split_unsent_seg+0x26c>
    pbuf_free(p);
 8023e0a:	6938      	ldr	r0, [r7, #16]
 8023e0c:	f7fb f88c 	bl	801ef28 <pbuf_free>
  }

  return ERR_MEM;
 8023e10:	f04f 33ff 	mov.w	r3, #4294967295
}
 8023e14:	4618      	mov	r0, r3
 8023e16:	3720      	adds	r7, #32
 8023e18:	46bd      	mov	sp, r7
 8023e1a:	bdb0      	pop	{r4, r5, r7, pc}
 8023e1c:	08029bfc 	.word	0x08029bfc
 8023e20:	08029f90 	.word	0x08029f90
 8023e24:	08029c50 	.word	0x08029c50
 8023e28:	08029fb4 	.word	0x08029fb4
 8023e2c:	08029fd8 	.word	0x08029fd8
 8023e30:	08029fe8 	.word	0x08029fe8
 8023e34:	08029ff8 	.word	0x08029ff8

08023e38 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8023e38:	b5b0      	push	{r4, r5, r7, lr}
 8023e3a:	b084      	sub	sp, #16
 8023e3c:	af00      	add	r7, sp, #0
 8023e3e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8023e40:	687b      	ldr	r3, [r7, #4]
 8023e42:	2b00      	cmp	r3, #0
 8023e44:	d106      	bne.n	8023e54 <tcp_send_fin+0x1c>
 8023e46:	4b21      	ldr	r3, [pc, #132]	; (8023ecc <tcp_send_fin+0x94>)
 8023e48:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8023e4c:	4920      	ldr	r1, [pc, #128]	; (8023ed0 <tcp_send_fin+0x98>)
 8023e4e:	4821      	ldr	r0, [pc, #132]	; (8023ed4 <tcp_send_fin+0x9c>)
 8023e50:	f002 fa6e 	bl	8026330 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8023e54:	687b      	ldr	r3, [r7, #4]
 8023e56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8023e58:	2b00      	cmp	r3, #0
 8023e5a:	d02d      	beq.n	8023eb8 <tcp_send_fin+0x80>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8023e5c:	687b      	ldr	r3, [r7, #4]
 8023e5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8023e60:	60fb      	str	r3, [r7, #12]
 8023e62:	e002      	b.n	8023e6a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8023e64:	68fb      	ldr	r3, [r7, #12]
 8023e66:	681b      	ldr	r3, [r3, #0]
 8023e68:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8023e6a:	68fb      	ldr	r3, [r7, #12]
 8023e6c:	681b      	ldr	r3, [r3, #0]
 8023e6e:	2b00      	cmp	r3, #0
 8023e70:	d1f8      	bne.n	8023e64 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8023e72:	68fb      	ldr	r3, [r7, #12]
 8023e74:	68db      	ldr	r3, [r3, #12]
 8023e76:	899b      	ldrh	r3, [r3, #12]
 8023e78:	b29b      	uxth	r3, r3
 8023e7a:	4618      	mov	r0, r3
 8023e7c:	f7f5 f954 	bl	8019128 <lwip_htons>
 8023e80:	4603      	mov	r3, r0
 8023e82:	b2db      	uxtb	r3, r3
 8023e84:	f003 0307 	and.w	r3, r3, #7
 8023e88:	2b00      	cmp	r3, #0
 8023e8a:	d115      	bne.n	8023eb8 <tcp_send_fin+0x80>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8023e8c:	68fb      	ldr	r3, [r7, #12]
 8023e8e:	68dc      	ldr	r4, [r3, #12]
 8023e90:	68fb      	ldr	r3, [r7, #12]
 8023e92:	68db      	ldr	r3, [r3, #12]
 8023e94:	899b      	ldrh	r3, [r3, #12]
 8023e96:	b29d      	uxth	r5, r3
 8023e98:	2001      	movs	r0, #1
 8023e9a:	f7f5 f945 	bl	8019128 <lwip_htons>
 8023e9e:	4603      	mov	r3, r0
 8023ea0:	432b      	orrs	r3, r5
 8023ea2:	b29b      	uxth	r3, r3
 8023ea4:	81a3      	strh	r3, [r4, #12]
      tcp_set_flags(pcb, TF_FIN);
 8023ea6:	687b      	ldr	r3, [r7, #4]
 8023ea8:	8b5b      	ldrh	r3, [r3, #26]
 8023eaa:	f043 0320 	orr.w	r3, r3, #32
 8023eae:	b29a      	uxth	r2, r3
 8023eb0:	687b      	ldr	r3, [r7, #4]
 8023eb2:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8023eb4:	2300      	movs	r3, #0
 8023eb6:	e004      	b.n	8023ec2 <tcp_send_fin+0x8a>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8023eb8:	2101      	movs	r1, #1
 8023eba:	6878      	ldr	r0, [r7, #4]
 8023ebc:	f000 f80c 	bl	8023ed8 <tcp_enqueue_flags>
 8023ec0:	4603      	mov	r3, r0
}
 8023ec2:	4618      	mov	r0, r3
 8023ec4:	3710      	adds	r7, #16
 8023ec6:	46bd      	mov	sp, r7
 8023ec8:	bdb0      	pop	{r4, r5, r7, pc}
 8023eca:	bf00      	nop
 8023ecc:	08029bfc 	.word	0x08029bfc
 8023ed0:	0802a004 	.word	0x0802a004
 8023ed4:	08029c50 	.word	0x08029c50

08023ed8 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8023ed8:	b580      	push	{r7, lr}
 8023eda:	b08a      	sub	sp, #40	; 0x28
 8023edc:	af02      	add	r7, sp, #8
 8023ede:	6078      	str	r0, [r7, #4]
 8023ee0:	460b      	mov	r3, r1
 8023ee2:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8023ee4:	2300      	movs	r3, #0
 8023ee6:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8023ee8:	2300      	movs	r3, #0
 8023eea:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8023eec:	78fb      	ldrb	r3, [r7, #3]
 8023eee:	f003 0303 	and.w	r3, r3, #3
 8023ef2:	2b00      	cmp	r3, #0
 8023ef4:	d106      	bne.n	8023f04 <tcp_enqueue_flags+0x2c>
 8023ef6:	4b68      	ldr	r3, [pc, #416]	; (8024098 <tcp_enqueue_flags+0x1c0>)
 8023ef8:	f240 4212 	movw	r2, #1042	; 0x412
 8023efc:	4967      	ldr	r1, [pc, #412]	; (802409c <tcp_enqueue_flags+0x1c4>)
 8023efe:	4868      	ldr	r0, [pc, #416]	; (80240a0 <tcp_enqueue_flags+0x1c8>)
 8023f00:	f002 fa16 	bl	8026330 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8023f04:	687b      	ldr	r3, [r7, #4]
 8023f06:	2b00      	cmp	r3, #0
 8023f08:	d106      	bne.n	8023f18 <tcp_enqueue_flags+0x40>
 8023f0a:	4b63      	ldr	r3, [pc, #396]	; (8024098 <tcp_enqueue_flags+0x1c0>)
 8023f0c:	f240 4213 	movw	r2, #1043	; 0x413
 8023f10:	4964      	ldr	r1, [pc, #400]	; (80240a4 <tcp_enqueue_flags+0x1cc>)
 8023f12:	4863      	ldr	r0, [pc, #396]	; (80240a0 <tcp_enqueue_flags+0x1c8>)
 8023f14:	f002 fa0c 	bl	8026330 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8023f18:	78fb      	ldrb	r3, [r7, #3]
 8023f1a:	f003 0302 	and.w	r3, r3, #2
 8023f1e:	2b00      	cmp	r3, #0
 8023f20:	d001      	beq.n	8023f26 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8023f22:	2301      	movs	r3, #1
 8023f24:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8023f26:	7ffb      	ldrb	r3, [r7, #31]
 8023f28:	f003 0301 	and.w	r3, r3, #1
 8023f2c:	2b00      	cmp	r3, #0
 8023f2e:	d001      	beq.n	8023f34 <tcp_enqueue_flags+0x5c>
 8023f30:	2304      	movs	r3, #4
 8023f32:	e000      	b.n	8023f36 <tcp_enqueue_flags+0x5e>
 8023f34:	2300      	movs	r3, #0
 8023f36:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8023f38:	7dfb      	ldrb	r3, [r7, #23]
 8023f3a:	b29b      	uxth	r3, r3
 8023f3c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8023f40:	4619      	mov	r1, r3
 8023f42:	2036      	movs	r0, #54	; 0x36
 8023f44:	f7fa fd0e 	bl	801e964 <pbuf_alloc>
 8023f48:	6138      	str	r0, [r7, #16]
 8023f4a:	693b      	ldr	r3, [r7, #16]
 8023f4c:	2b00      	cmp	r3, #0
 8023f4e:	d109      	bne.n	8023f64 <tcp_enqueue_flags+0x8c>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8023f50:	687b      	ldr	r3, [r7, #4]
 8023f52:	8b5b      	ldrh	r3, [r3, #26]
 8023f54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8023f58:	b29a      	uxth	r2, r3
 8023f5a:	687b      	ldr	r3, [r7, #4]
 8023f5c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8023f5e:	f04f 33ff 	mov.w	r3, #4294967295
 8023f62:	e095      	b.n	8024090 <tcp_enqueue_flags+0x1b8>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8023f64:	693b      	ldr	r3, [r7, #16]
 8023f66:	895a      	ldrh	r2, [r3, #10]
 8023f68:	7dfb      	ldrb	r3, [r7, #23]
 8023f6a:	b29b      	uxth	r3, r3
 8023f6c:	429a      	cmp	r2, r3
 8023f6e:	d206      	bcs.n	8023f7e <tcp_enqueue_flags+0xa6>
 8023f70:	4b49      	ldr	r3, [pc, #292]	; (8024098 <tcp_enqueue_flags+0x1c0>)
 8023f72:	f240 423a 	movw	r2, #1082	; 0x43a
 8023f76:	494c      	ldr	r1, [pc, #304]	; (80240a8 <tcp_enqueue_flags+0x1d0>)
 8023f78:	4849      	ldr	r0, [pc, #292]	; (80240a0 <tcp_enqueue_flags+0x1c8>)
 8023f7a:	f002 f9d9 	bl	8026330 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8023f7e:	687b      	ldr	r3, [r7, #4]
 8023f80:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8023f82:	78fa      	ldrb	r2, [r7, #3]
 8023f84:	7ffb      	ldrb	r3, [r7, #31]
 8023f86:	9300      	str	r3, [sp, #0]
 8023f88:	460b      	mov	r3, r1
 8023f8a:	6939      	ldr	r1, [r7, #16]
 8023f8c:	6878      	ldr	r0, [r7, #4]
 8023f8e:	f7ff f90f 	bl	80231b0 <tcp_create_segment>
 8023f92:	60f8      	str	r0, [r7, #12]
 8023f94:	68fb      	ldr	r3, [r7, #12]
 8023f96:	2b00      	cmp	r3, #0
 8023f98:	d109      	bne.n	8023fae <tcp_enqueue_flags+0xd6>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8023f9a:	687b      	ldr	r3, [r7, #4]
 8023f9c:	8b5b      	ldrh	r3, [r3, #26]
 8023f9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8023fa2:	b29a      	uxth	r2, r3
 8023fa4:	687b      	ldr	r3, [r7, #4]
 8023fa6:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8023fa8:	f04f 33ff 	mov.w	r3, #4294967295
 8023fac:	e070      	b.n	8024090 <tcp_enqueue_flags+0x1b8>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8023fae:	68fb      	ldr	r3, [r7, #12]
 8023fb0:	68db      	ldr	r3, [r3, #12]
 8023fb2:	f003 0303 	and.w	r3, r3, #3
 8023fb6:	2b00      	cmp	r3, #0
 8023fb8:	d006      	beq.n	8023fc8 <tcp_enqueue_flags+0xf0>
 8023fba:	4b37      	ldr	r3, [pc, #220]	; (8024098 <tcp_enqueue_flags+0x1c0>)
 8023fbc:	f240 4242 	movw	r2, #1090	; 0x442
 8023fc0:	493a      	ldr	r1, [pc, #232]	; (80240ac <tcp_enqueue_flags+0x1d4>)
 8023fc2:	4837      	ldr	r0, [pc, #220]	; (80240a0 <tcp_enqueue_flags+0x1c8>)
 8023fc4:	f002 f9b4 	bl	8026330 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8023fc8:	68fb      	ldr	r3, [r7, #12]
 8023fca:	891b      	ldrh	r3, [r3, #8]
 8023fcc:	2b00      	cmp	r3, #0
 8023fce:	d006      	beq.n	8023fde <tcp_enqueue_flags+0x106>
 8023fd0:	4b31      	ldr	r3, [pc, #196]	; (8024098 <tcp_enqueue_flags+0x1c0>)
 8023fd2:	f240 4243 	movw	r2, #1091	; 0x443
 8023fd6:	4936      	ldr	r1, [pc, #216]	; (80240b0 <tcp_enqueue_flags+0x1d8>)
 8023fd8:	4831      	ldr	r0, [pc, #196]	; (80240a0 <tcp_enqueue_flags+0x1c8>)
 8023fda:	f002 f9a9 	bl	8026330 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8023fde:	687b      	ldr	r3, [r7, #4]
 8023fe0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8023fe2:	2b00      	cmp	r3, #0
 8023fe4:	d103      	bne.n	8023fee <tcp_enqueue_flags+0x116>
    pcb->unsent = seg;
 8023fe6:	687b      	ldr	r3, [r7, #4]
 8023fe8:	68fa      	ldr	r2, [r7, #12]
 8023fea:	66da      	str	r2, [r3, #108]	; 0x6c
 8023fec:	e00d      	b.n	802400a <tcp_enqueue_flags+0x132>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8023fee:	687b      	ldr	r3, [r7, #4]
 8023ff0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8023ff2:	61bb      	str	r3, [r7, #24]
 8023ff4:	e002      	b.n	8023ffc <tcp_enqueue_flags+0x124>
 8023ff6:	69bb      	ldr	r3, [r7, #24]
 8023ff8:	681b      	ldr	r3, [r3, #0]
 8023ffa:	61bb      	str	r3, [r7, #24]
 8023ffc:	69bb      	ldr	r3, [r7, #24]
 8023ffe:	681b      	ldr	r3, [r3, #0]
 8024000:	2b00      	cmp	r3, #0
 8024002:	d1f8      	bne.n	8023ff6 <tcp_enqueue_flags+0x11e>
    useg->next = seg;
 8024004:	69bb      	ldr	r3, [r7, #24]
 8024006:	68fa      	ldr	r2, [r7, #12]
 8024008:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 802400a:	687b      	ldr	r3, [r7, #4]
 802400c:	2200      	movs	r2, #0
 802400e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8024012:	78fb      	ldrb	r3, [r7, #3]
 8024014:	f003 0302 	and.w	r3, r3, #2
 8024018:	2b00      	cmp	r3, #0
 802401a:	d104      	bne.n	8024026 <tcp_enqueue_flags+0x14e>
 802401c:	78fb      	ldrb	r3, [r7, #3]
 802401e:	f003 0301 	and.w	r3, r3, #1
 8024022:	2b00      	cmp	r3, #0
 8024024:	d004      	beq.n	8024030 <tcp_enqueue_flags+0x158>
    pcb->snd_lbb++;
 8024026:	687b      	ldr	r3, [r7, #4]
 8024028:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802402a:	1c5a      	adds	r2, r3, #1
 802402c:	687b      	ldr	r3, [r7, #4]
 802402e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8024030:	78fb      	ldrb	r3, [r7, #3]
 8024032:	f003 0301 	and.w	r3, r3, #1
 8024036:	2b00      	cmp	r3, #0
 8024038:	d006      	beq.n	8024048 <tcp_enqueue_flags+0x170>
    tcp_set_flags(pcb, TF_FIN);
 802403a:	687b      	ldr	r3, [r7, #4]
 802403c:	8b5b      	ldrh	r3, [r3, #26]
 802403e:	f043 0320 	orr.w	r3, r3, #32
 8024042:	b29a      	uxth	r2, r3
 8024044:	687b      	ldr	r3, [r7, #4]
 8024046:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8024048:	68fb      	ldr	r3, [r7, #12]
 802404a:	685b      	ldr	r3, [r3, #4]
 802404c:	4618      	mov	r0, r3
 802404e:	f7fa fff9 	bl	801f044 <pbuf_clen>
 8024052:	4603      	mov	r3, r0
 8024054:	461a      	mov	r2, r3
 8024056:	687b      	ldr	r3, [r7, #4]
 8024058:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 802405c:	4413      	add	r3, r2
 802405e:	b29a      	uxth	r2, r3
 8024060:	687b      	ldr	r3, [r7, #4]
 8024062:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8024066:	687b      	ldr	r3, [r7, #4]
 8024068:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 802406c:	2b00      	cmp	r3, #0
 802406e:	d00e      	beq.n	802408e <tcp_enqueue_flags+0x1b6>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8024070:	687b      	ldr	r3, [r7, #4]
 8024072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8024074:	2b00      	cmp	r3, #0
 8024076:	d10a      	bne.n	802408e <tcp_enqueue_flags+0x1b6>
 8024078:	687b      	ldr	r3, [r7, #4]
 802407a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802407c:	2b00      	cmp	r3, #0
 802407e:	d106      	bne.n	802408e <tcp_enqueue_flags+0x1b6>
 8024080:	4b05      	ldr	r3, [pc, #20]	; (8024098 <tcp_enqueue_flags+0x1c0>)
 8024082:	f240 4266 	movw	r2, #1126	; 0x466
 8024086:	490b      	ldr	r1, [pc, #44]	; (80240b4 <tcp_enqueue_flags+0x1dc>)
 8024088:	4805      	ldr	r0, [pc, #20]	; (80240a0 <tcp_enqueue_flags+0x1c8>)
 802408a:	f002 f951 	bl	8026330 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 802408e:	2300      	movs	r3, #0
}
 8024090:	4618      	mov	r0, r3
 8024092:	3720      	adds	r7, #32
 8024094:	46bd      	mov	sp, r7
 8024096:	bd80      	pop	{r7, pc}
 8024098:	08029bfc 	.word	0x08029bfc
 802409c:	0802a020 	.word	0x0802a020
 80240a0:	08029c50 	.word	0x08029c50
 80240a4:	0802a078 	.word	0x0802a078
 80240a8:	0802a098 	.word	0x0802a098
 80240ac:	0802a0d4 	.word	0x0802a0d4
 80240b0:	0802a0ec 	.word	0x0802a0ec
 80240b4:	0802a118 	.word	0x0802a118

080240b8 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80240b8:	b5b0      	push	{r4, r5, r7, lr}
 80240ba:	b08a      	sub	sp, #40	; 0x28
 80240bc:	af00      	add	r7, sp, #0
 80240be:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80240c0:	687b      	ldr	r3, [r7, #4]
 80240c2:	2b00      	cmp	r3, #0
 80240c4:	d106      	bne.n	80240d4 <tcp_output+0x1c>
 80240c6:	4ba0      	ldr	r3, [pc, #640]	; (8024348 <tcp_output+0x290>)
 80240c8:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80240cc:	499f      	ldr	r1, [pc, #636]	; (802434c <tcp_output+0x294>)
 80240ce:	48a0      	ldr	r0, [pc, #640]	; (8024350 <tcp_output+0x298>)
 80240d0:	f002 f92e 	bl	8026330 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80240d4:	687b      	ldr	r3, [r7, #4]
 80240d6:	7d1b      	ldrb	r3, [r3, #20]
 80240d8:	2b01      	cmp	r3, #1
 80240da:	d106      	bne.n	80240ea <tcp_output+0x32>
 80240dc:	4b9a      	ldr	r3, [pc, #616]	; (8024348 <tcp_output+0x290>)
 80240de:	f240 42e4 	movw	r2, #1252	; 0x4e4
 80240e2:	499c      	ldr	r1, [pc, #624]	; (8024354 <tcp_output+0x29c>)
 80240e4:	489a      	ldr	r0, [pc, #616]	; (8024350 <tcp_output+0x298>)
 80240e6:	f002 f923 	bl	8026330 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80240ea:	4b9b      	ldr	r3, [pc, #620]	; (8024358 <tcp_output+0x2a0>)
 80240ec:	681a      	ldr	r2, [r3, #0]
 80240ee:	687b      	ldr	r3, [r7, #4]
 80240f0:	429a      	cmp	r2, r3
 80240f2:	d101      	bne.n	80240f8 <tcp_output+0x40>
    return ERR_OK;
 80240f4:	2300      	movs	r3, #0
 80240f6:	e1d0      	b.n	802449a <tcp_output+0x3e2>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80240f8:	687b      	ldr	r3, [r7, #4]
 80240fa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80240fe:	687b      	ldr	r3, [r7, #4]
 8024100:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8024104:	429a      	cmp	r2, r3
 8024106:	d203      	bcs.n	8024110 <tcp_output+0x58>
 8024108:	687b      	ldr	r3, [r7, #4]
 802410a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 802410e:	e002      	b.n	8024116 <tcp_output+0x5e>
 8024110:	687b      	ldr	r3, [r7, #4]
 8024112:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8024116:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8024118:	687b      	ldr	r3, [r7, #4]
 802411a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802411c:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 802411e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024120:	2b00      	cmp	r3, #0
 8024122:	d10b      	bne.n	802413c <tcp_output+0x84>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8024124:	687b      	ldr	r3, [r7, #4]
 8024126:	8b5b      	ldrh	r3, [r3, #26]
 8024128:	f003 0302 	and.w	r3, r3, #2
 802412c:	2b00      	cmp	r3, #0
 802412e:	f000 81a9 	beq.w	8024484 <tcp_output+0x3cc>
      return tcp_send_empty_ack(pcb);
 8024132:	6878      	ldr	r0, [r7, #4]
 8024134:	f000 fdde 	bl	8024cf4 <tcp_send_empty_ack>
 8024138:	4603      	mov	r3, r0
 802413a:	e1ae      	b.n	802449a <tcp_output+0x3e2>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 802413c:	6879      	ldr	r1, [r7, #4]
 802413e:	687b      	ldr	r3, [r7, #4]
 8024140:	3304      	adds	r3, #4
 8024142:	461a      	mov	r2, r3
 8024144:	6878      	ldr	r0, [r7, #4]
 8024146:	f7ff f817 	bl	8023178 <tcp_route>
 802414a:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 802414c:	697b      	ldr	r3, [r7, #20]
 802414e:	2b00      	cmp	r3, #0
 8024150:	d102      	bne.n	8024158 <tcp_output+0xa0>
    return ERR_RTE;
 8024152:	f06f 0303 	mvn.w	r3, #3
 8024156:	e1a0      	b.n	802449a <tcp_output+0x3e2>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8024158:	687b      	ldr	r3, [r7, #4]
 802415a:	2b00      	cmp	r3, #0
 802415c:	d003      	beq.n	8024166 <tcp_output+0xae>
 802415e:	687b      	ldr	r3, [r7, #4]
 8024160:	681b      	ldr	r3, [r3, #0]
 8024162:	2b00      	cmp	r3, #0
 8024164:	d111      	bne.n	802418a <tcp_output+0xd2>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8024166:	697b      	ldr	r3, [r7, #20]
 8024168:	2b00      	cmp	r3, #0
 802416a:	d002      	beq.n	8024172 <tcp_output+0xba>
 802416c:	697b      	ldr	r3, [r7, #20]
 802416e:	3304      	adds	r3, #4
 8024170:	e000      	b.n	8024174 <tcp_output+0xbc>
 8024172:	2300      	movs	r3, #0
 8024174:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8024176:	693b      	ldr	r3, [r7, #16]
 8024178:	2b00      	cmp	r3, #0
 802417a:	d102      	bne.n	8024182 <tcp_output+0xca>
      return ERR_RTE;
 802417c:	f06f 0303 	mvn.w	r3, #3
 8024180:	e18b      	b.n	802449a <tcp_output+0x3e2>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8024182:	693b      	ldr	r3, [r7, #16]
 8024184:	681a      	ldr	r2, [r3, #0]
 8024186:	687b      	ldr	r3, [r7, #4]
 8024188:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 802418a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802418c:	68db      	ldr	r3, [r3, #12]
 802418e:	685b      	ldr	r3, [r3, #4]
 8024190:	4618      	mov	r0, r3
 8024192:	f7f4 ffde 	bl	8019152 <lwip_htonl>
 8024196:	4602      	mov	r2, r0
 8024198:	687b      	ldr	r3, [r7, #4]
 802419a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802419c:	1ad3      	subs	r3, r2, r3
 802419e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80241a0:	8912      	ldrh	r2, [r2, #8]
 80241a2:	441a      	add	r2, r3
 80241a4:	69bb      	ldr	r3, [r7, #24]
 80241a6:	429a      	cmp	r2, r3
 80241a8:	d927      	bls.n	80241fa <tcp_output+0x142>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80241aa:	687b      	ldr	r3, [r7, #4]
 80241ac:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80241b0:	461a      	mov	r2, r3
 80241b2:	69bb      	ldr	r3, [r7, #24]
 80241b4:	429a      	cmp	r2, r3
 80241b6:	d114      	bne.n	80241e2 <tcp_output+0x12a>
 80241b8:	687b      	ldr	r3, [r7, #4]
 80241ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80241bc:	2b00      	cmp	r3, #0
 80241be:	d110      	bne.n	80241e2 <tcp_output+0x12a>
 80241c0:	687b      	ldr	r3, [r7, #4]
 80241c2:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80241c6:	2b00      	cmp	r3, #0
 80241c8:	d10b      	bne.n	80241e2 <tcp_output+0x12a>
      pcb->persist_cnt = 0;
 80241ca:	687b      	ldr	r3, [r7, #4]
 80241cc:	2200      	movs	r2, #0
 80241ce:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
      pcb->persist_backoff = 1;
 80241d2:	687b      	ldr	r3, [r7, #4]
 80241d4:	2201      	movs	r2, #1
 80241d6:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
      pcb->persist_probe = 0;
 80241da:	687b      	ldr	r3, [r7, #4]
 80241dc:	2200      	movs	r2, #0
 80241de:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 80241e2:	687b      	ldr	r3, [r7, #4]
 80241e4:	8b5b      	ldrh	r3, [r3, #26]
 80241e6:	f003 0302 	and.w	r3, r3, #2
 80241ea:	2b00      	cmp	r3, #0
 80241ec:	f000 814c 	beq.w	8024488 <tcp_output+0x3d0>
      return tcp_send_empty_ack(pcb);
 80241f0:	6878      	ldr	r0, [r7, #4]
 80241f2:	f000 fd7f 	bl	8024cf4 <tcp_send_empty_ack>
 80241f6:	4603      	mov	r3, r0
 80241f8:	e14f      	b.n	802449a <tcp_output+0x3e2>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 80241fa:	687b      	ldr	r3, [r7, #4]
 80241fc:	2200      	movs	r2, #0
 80241fe:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8024202:	687b      	ldr	r3, [r7, #4]
 8024204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8024206:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8024208:	6a3b      	ldr	r3, [r7, #32]
 802420a:	2b00      	cmp	r3, #0
 802420c:	f000 811b 	beq.w	8024446 <tcp_output+0x38e>
    for (; useg->next != NULL; useg = useg->next);
 8024210:	e002      	b.n	8024218 <tcp_output+0x160>
 8024212:	6a3b      	ldr	r3, [r7, #32]
 8024214:	681b      	ldr	r3, [r3, #0]
 8024216:	623b      	str	r3, [r7, #32]
 8024218:	6a3b      	ldr	r3, [r7, #32]
 802421a:	681b      	ldr	r3, [r3, #0]
 802421c:	2b00      	cmp	r3, #0
 802421e:	d1f8      	bne.n	8024212 <tcp_output+0x15a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8024220:	e111      	b.n	8024446 <tcp_output+0x38e>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8024222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024224:	68db      	ldr	r3, [r3, #12]
 8024226:	899b      	ldrh	r3, [r3, #12]
 8024228:	b29b      	uxth	r3, r3
 802422a:	4618      	mov	r0, r3
 802422c:	f7f4 ff7c 	bl	8019128 <lwip_htons>
 8024230:	4603      	mov	r3, r0
 8024232:	b2db      	uxtb	r3, r3
 8024234:	f003 0304 	and.w	r3, r3, #4
 8024238:	2b00      	cmp	r3, #0
 802423a:	d006      	beq.n	802424a <tcp_output+0x192>
 802423c:	4b42      	ldr	r3, [pc, #264]	; (8024348 <tcp_output+0x290>)
 802423e:	f240 5237 	movw	r2, #1335	; 0x537
 8024242:	4946      	ldr	r1, [pc, #280]	; (802435c <tcp_output+0x2a4>)
 8024244:	4842      	ldr	r0, [pc, #264]	; (8024350 <tcp_output+0x298>)
 8024246:	f002 f873 	bl	8026330 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 802424a:	687b      	ldr	r3, [r7, #4]
 802424c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802424e:	2b00      	cmp	r3, #0
 8024250:	d01f      	beq.n	8024292 <tcp_output+0x1da>
 8024252:	687b      	ldr	r3, [r7, #4]
 8024254:	8b5b      	ldrh	r3, [r3, #26]
 8024256:	f003 0344 	and.w	r3, r3, #68	; 0x44
 802425a:	2b00      	cmp	r3, #0
 802425c:	d119      	bne.n	8024292 <tcp_output+0x1da>
 802425e:	687b      	ldr	r3, [r7, #4]
 8024260:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8024262:	2b00      	cmp	r3, #0
 8024264:	d00b      	beq.n	802427e <tcp_output+0x1c6>
 8024266:	687b      	ldr	r3, [r7, #4]
 8024268:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802426a:	681b      	ldr	r3, [r3, #0]
 802426c:	2b00      	cmp	r3, #0
 802426e:	d110      	bne.n	8024292 <tcp_output+0x1da>
 8024270:	687b      	ldr	r3, [r7, #4]
 8024272:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8024274:	891a      	ldrh	r2, [r3, #8]
 8024276:	687b      	ldr	r3, [r7, #4]
 8024278:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 802427a:	429a      	cmp	r2, r3
 802427c:	d209      	bcs.n	8024292 <tcp_output+0x1da>
 802427e:	687b      	ldr	r3, [r7, #4]
 8024280:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8024284:	2b00      	cmp	r3, #0
 8024286:	d004      	beq.n	8024292 <tcp_output+0x1da>
 8024288:	687b      	ldr	r3, [r7, #4]
 802428a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 802428e:	2b07      	cmp	r3, #7
 8024290:	d901      	bls.n	8024296 <tcp_output+0x1de>
 8024292:	2301      	movs	r3, #1
 8024294:	e000      	b.n	8024298 <tcp_output+0x1e0>
 8024296:	2300      	movs	r3, #0
 8024298:	2b00      	cmp	r3, #0
 802429a:	d106      	bne.n	80242aa <tcp_output+0x1f2>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 802429c:	687b      	ldr	r3, [r7, #4]
 802429e:	8b5b      	ldrh	r3, [r3, #26]
 80242a0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80242a4:	2b00      	cmp	r3, #0
 80242a6:	f000 80e3 	beq.w	8024470 <tcp_output+0x3b8>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80242aa:	687b      	ldr	r3, [r7, #4]
 80242ac:	7d1b      	ldrb	r3, [r3, #20]
 80242ae:	2b02      	cmp	r3, #2
 80242b0:	d00c      	beq.n	80242cc <tcp_output+0x214>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80242b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80242b4:	68dc      	ldr	r4, [r3, #12]
 80242b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80242b8:	68db      	ldr	r3, [r3, #12]
 80242ba:	899b      	ldrh	r3, [r3, #12]
 80242bc:	b29d      	uxth	r5, r3
 80242be:	2010      	movs	r0, #16
 80242c0:	f7f4 ff32 	bl	8019128 <lwip_htons>
 80242c4:	4603      	mov	r3, r0
 80242c6:	432b      	orrs	r3, r5
 80242c8:	b29b      	uxth	r3, r3
 80242ca:	81a3      	strh	r3, [r4, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80242cc:	697a      	ldr	r2, [r7, #20]
 80242ce:	6879      	ldr	r1, [r7, #4]
 80242d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80242d2:	f000 f907 	bl	80244e4 <tcp_output_segment>
 80242d6:	4603      	mov	r3, r0
 80242d8:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80242da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80242de:	2b00      	cmp	r3, #0
 80242e0:	d009      	beq.n	80242f6 <tcp_output+0x23e>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80242e2:	687b      	ldr	r3, [r7, #4]
 80242e4:	8b5b      	ldrh	r3, [r3, #26]
 80242e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80242ea:	b29a      	uxth	r2, r3
 80242ec:	687b      	ldr	r3, [r7, #4]
 80242ee:	835a      	strh	r2, [r3, #26]
      return err;
 80242f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80242f4:	e0d1      	b.n	802449a <tcp_output+0x3e2>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 80242f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80242f8:	681a      	ldr	r2, [r3, #0]
 80242fa:	687b      	ldr	r3, [r7, #4]
 80242fc:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 80242fe:	687b      	ldr	r3, [r7, #4]
 8024300:	7d1b      	ldrb	r3, [r3, #20]
 8024302:	2b02      	cmp	r3, #2
 8024304:	d006      	beq.n	8024314 <tcp_output+0x25c>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8024306:	687b      	ldr	r3, [r7, #4]
 8024308:	8b5b      	ldrh	r3, [r3, #26]
 802430a:	f023 0303 	bic.w	r3, r3, #3
 802430e:	b29a      	uxth	r2, r3
 8024310:	687b      	ldr	r3, [r7, #4]
 8024312:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8024314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024316:	68db      	ldr	r3, [r3, #12]
 8024318:	685b      	ldr	r3, [r3, #4]
 802431a:	4618      	mov	r0, r3
 802431c:	f7f4 ff19 	bl	8019152 <lwip_htonl>
 8024320:	4604      	mov	r4, r0
 8024322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024324:	891b      	ldrh	r3, [r3, #8]
 8024326:	461d      	mov	r5, r3
 8024328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802432a:	68db      	ldr	r3, [r3, #12]
 802432c:	899b      	ldrh	r3, [r3, #12]
 802432e:	b29b      	uxth	r3, r3
 8024330:	4618      	mov	r0, r3
 8024332:	f7f4 fef9 	bl	8019128 <lwip_htons>
 8024336:	4603      	mov	r3, r0
 8024338:	b2db      	uxtb	r3, r3
 802433a:	f003 0303 	and.w	r3, r3, #3
 802433e:	2b00      	cmp	r3, #0
 8024340:	d00e      	beq.n	8024360 <tcp_output+0x2a8>
 8024342:	2301      	movs	r3, #1
 8024344:	e00d      	b.n	8024362 <tcp_output+0x2aa>
 8024346:	bf00      	nop
 8024348:	08029bfc 	.word	0x08029bfc
 802434c:	0802a140 	.word	0x0802a140
 8024350:	08029c50 	.word	0x08029c50
 8024354:	0802a158 	.word	0x0802a158
 8024358:	20022ac8 	.word	0x20022ac8
 802435c:	0802a180 	.word	0x0802a180
 8024360:	2300      	movs	r3, #0
 8024362:	442b      	add	r3, r5
 8024364:	4423      	add	r3, r4
 8024366:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8024368:	687b      	ldr	r3, [r7, #4]
 802436a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 802436c:	68bb      	ldr	r3, [r7, #8]
 802436e:	1ad3      	subs	r3, r2, r3
 8024370:	2b00      	cmp	r3, #0
 8024372:	da02      	bge.n	802437a <tcp_output+0x2c2>
      pcb->snd_nxt = snd_nxt;
 8024374:	687b      	ldr	r3, [r7, #4]
 8024376:	68ba      	ldr	r2, [r7, #8]
 8024378:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 802437a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802437c:	891b      	ldrh	r3, [r3, #8]
 802437e:	461c      	mov	r4, r3
 8024380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024382:	68db      	ldr	r3, [r3, #12]
 8024384:	899b      	ldrh	r3, [r3, #12]
 8024386:	b29b      	uxth	r3, r3
 8024388:	4618      	mov	r0, r3
 802438a:	f7f4 fecd 	bl	8019128 <lwip_htons>
 802438e:	4603      	mov	r3, r0
 8024390:	b2db      	uxtb	r3, r3
 8024392:	f003 0303 	and.w	r3, r3, #3
 8024396:	2b00      	cmp	r3, #0
 8024398:	d001      	beq.n	802439e <tcp_output+0x2e6>
 802439a:	2301      	movs	r3, #1
 802439c:	e000      	b.n	80243a0 <tcp_output+0x2e8>
 802439e:	2300      	movs	r3, #0
 80243a0:	4423      	add	r3, r4
 80243a2:	2b00      	cmp	r3, #0
 80243a4:	d049      	beq.n	802443a <tcp_output+0x382>
      seg->next = NULL;
 80243a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80243a8:	2200      	movs	r2, #0
 80243aa:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80243ac:	687b      	ldr	r3, [r7, #4]
 80243ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80243b0:	2b00      	cmp	r3, #0
 80243b2:	d105      	bne.n	80243c0 <tcp_output+0x308>
        pcb->unacked = seg;
 80243b4:	687b      	ldr	r3, [r7, #4]
 80243b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80243b8:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 80243ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80243bc:	623b      	str	r3, [r7, #32]
 80243be:	e03f      	b.n	8024440 <tcp_output+0x388>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80243c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80243c2:	68db      	ldr	r3, [r3, #12]
 80243c4:	685b      	ldr	r3, [r3, #4]
 80243c6:	4618      	mov	r0, r3
 80243c8:	f7f4 fec3 	bl	8019152 <lwip_htonl>
 80243cc:	4604      	mov	r4, r0
 80243ce:	6a3b      	ldr	r3, [r7, #32]
 80243d0:	68db      	ldr	r3, [r3, #12]
 80243d2:	685b      	ldr	r3, [r3, #4]
 80243d4:	4618      	mov	r0, r3
 80243d6:	f7f4 febc 	bl	8019152 <lwip_htonl>
 80243da:	4603      	mov	r3, r0
 80243dc:	1ae3      	subs	r3, r4, r3
 80243de:	2b00      	cmp	r3, #0
 80243e0:	da24      	bge.n	802442c <tcp_output+0x374>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80243e2:	687b      	ldr	r3, [r7, #4]
 80243e4:	3370      	adds	r3, #112	; 0x70
 80243e6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80243e8:	e002      	b.n	80243f0 <tcp_output+0x338>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 80243ea:	69fb      	ldr	r3, [r7, #28]
 80243ec:	681b      	ldr	r3, [r3, #0]
 80243ee:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80243f0:	69fb      	ldr	r3, [r7, #28]
 80243f2:	681b      	ldr	r3, [r3, #0]
 80243f4:	2b00      	cmp	r3, #0
 80243f6:	d011      	beq.n	802441c <tcp_output+0x364>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80243f8:	69fb      	ldr	r3, [r7, #28]
 80243fa:	681b      	ldr	r3, [r3, #0]
 80243fc:	68db      	ldr	r3, [r3, #12]
 80243fe:	685b      	ldr	r3, [r3, #4]
 8024400:	4618      	mov	r0, r3
 8024402:	f7f4 fea6 	bl	8019152 <lwip_htonl>
 8024406:	4604      	mov	r4, r0
 8024408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802440a:	68db      	ldr	r3, [r3, #12]
 802440c:	685b      	ldr	r3, [r3, #4]
 802440e:	4618      	mov	r0, r3
 8024410:	f7f4 fe9f 	bl	8019152 <lwip_htonl>
 8024414:	4603      	mov	r3, r0
 8024416:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8024418:	2b00      	cmp	r3, #0
 802441a:	dbe6      	blt.n	80243ea <tcp_output+0x332>
          }
          seg->next = (*cur_seg);
 802441c:	69fb      	ldr	r3, [r7, #28]
 802441e:	681a      	ldr	r2, [r3, #0]
 8024420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024422:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8024424:	69fb      	ldr	r3, [r7, #28]
 8024426:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8024428:	601a      	str	r2, [r3, #0]
 802442a:	e009      	b.n	8024440 <tcp_output+0x388>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 802442c:	6a3b      	ldr	r3, [r7, #32]
 802442e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8024430:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8024432:	6a3b      	ldr	r3, [r7, #32]
 8024434:	681b      	ldr	r3, [r3, #0]
 8024436:	623b      	str	r3, [r7, #32]
 8024438:	e002      	b.n	8024440 <tcp_output+0x388>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 802443a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802443c:	f7fc faf8 	bl	8020a30 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8024440:	687b      	ldr	r3, [r7, #4]
 8024442:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8024444:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8024446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024448:	2b00      	cmp	r3, #0
 802444a:	d012      	beq.n	8024472 <tcp_output+0x3ba>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 802444c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802444e:	68db      	ldr	r3, [r3, #12]
 8024450:	685b      	ldr	r3, [r3, #4]
 8024452:	4618      	mov	r0, r3
 8024454:	f7f4 fe7d 	bl	8019152 <lwip_htonl>
 8024458:	4602      	mov	r2, r0
 802445a:	687b      	ldr	r3, [r7, #4]
 802445c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802445e:	1ad3      	subs	r3, r2, r3
 8024460:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8024462:	8912      	ldrh	r2, [r2, #8]
 8024464:	441a      	add	r2, r3
  while (seg != NULL &&
 8024466:	69bb      	ldr	r3, [r7, #24]
 8024468:	429a      	cmp	r2, r3
 802446a:	f67f aeda 	bls.w	8024222 <tcp_output+0x16a>
 802446e:	e000      	b.n	8024472 <tcp_output+0x3ba>
      break;
 8024470:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8024472:	687b      	ldr	r3, [r7, #4]
 8024474:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8024476:	2b00      	cmp	r3, #0
 8024478:	d107      	bne.n	802448a <tcp_output+0x3d2>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 802447a:	687b      	ldr	r3, [r7, #4]
 802447c:	2200      	movs	r2, #0
 802447e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8024482:	e002      	b.n	802448a <tcp_output+0x3d2>
    goto output_done;
 8024484:	bf00      	nop
 8024486:	e000      	b.n	802448a <tcp_output+0x3d2>
    goto output_done;
 8024488:	bf00      	nop
  }
#endif /* TCP_OVERSIZE */

output_done:
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 802448a:	687b      	ldr	r3, [r7, #4]
 802448c:	8b5b      	ldrh	r3, [r3, #26]
 802448e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8024492:	b29a      	uxth	r2, r3
 8024494:	687b      	ldr	r3, [r7, #4]
 8024496:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8024498:	2300      	movs	r3, #0
}
 802449a:	4618      	mov	r0, r3
 802449c:	3728      	adds	r7, #40	; 0x28
 802449e:	46bd      	mov	sp, r7
 80244a0:	bdb0      	pop	{r4, r5, r7, pc}
 80244a2:	bf00      	nop

080244a4 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80244a4:	b580      	push	{r7, lr}
 80244a6:	b082      	sub	sp, #8
 80244a8:	af00      	add	r7, sp, #0
 80244aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80244ac:	687b      	ldr	r3, [r7, #4]
 80244ae:	2b00      	cmp	r3, #0
 80244b0:	d106      	bne.n	80244c0 <tcp_output_segment_busy+0x1c>
 80244b2:	4b09      	ldr	r3, [pc, #36]	; (80244d8 <tcp_output_segment_busy+0x34>)
 80244b4:	f240 529a 	movw	r2, #1434	; 0x59a
 80244b8:	4908      	ldr	r1, [pc, #32]	; (80244dc <tcp_output_segment_busy+0x38>)
 80244ba:	4809      	ldr	r0, [pc, #36]	; (80244e0 <tcp_output_segment_busy+0x3c>)
 80244bc:	f001 ff38 	bl	8026330 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80244c0:	687b      	ldr	r3, [r7, #4]
 80244c2:	685b      	ldr	r3, [r3, #4]
 80244c4:	7b9b      	ldrb	r3, [r3, #14]
 80244c6:	2b01      	cmp	r3, #1
 80244c8:	d001      	beq.n	80244ce <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80244ca:	2301      	movs	r3, #1
 80244cc:	e000      	b.n	80244d0 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80244ce:	2300      	movs	r3, #0
}
 80244d0:	4618      	mov	r0, r3
 80244d2:	3708      	adds	r7, #8
 80244d4:	46bd      	mov	sp, r7
 80244d6:	bd80      	pop	{r7, pc}
 80244d8:	08029bfc 	.word	0x08029bfc
 80244dc:	0802a198 	.word	0x0802a198
 80244e0:	08029c50 	.word	0x08029c50

080244e4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80244e4:	b5b0      	push	{r4, r5, r7, lr}
 80244e6:	b08c      	sub	sp, #48	; 0x30
 80244e8:	af04      	add	r7, sp, #16
 80244ea:	60f8      	str	r0, [r7, #12]
 80244ec:	60b9      	str	r1, [r7, #8]
 80244ee:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80244f0:	68fb      	ldr	r3, [r7, #12]
 80244f2:	2b00      	cmp	r3, #0
 80244f4:	d106      	bne.n	8024504 <tcp_output_segment+0x20>
 80244f6:	4b66      	ldr	r3, [pc, #408]	; (8024690 <tcp_output_segment+0x1ac>)
 80244f8:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 80244fc:	4965      	ldr	r1, [pc, #404]	; (8024694 <tcp_output_segment+0x1b0>)
 80244fe:	4866      	ldr	r0, [pc, #408]	; (8024698 <tcp_output_segment+0x1b4>)
 8024500:	f001 ff16 	bl	8026330 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8024504:	68bb      	ldr	r3, [r7, #8]
 8024506:	2b00      	cmp	r3, #0
 8024508:	d106      	bne.n	8024518 <tcp_output_segment+0x34>
 802450a:	4b61      	ldr	r3, [pc, #388]	; (8024690 <tcp_output_segment+0x1ac>)
 802450c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8024510:	4962      	ldr	r1, [pc, #392]	; (802469c <tcp_output_segment+0x1b8>)
 8024512:	4861      	ldr	r0, [pc, #388]	; (8024698 <tcp_output_segment+0x1b4>)
 8024514:	f001 ff0c 	bl	8026330 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8024518:	687b      	ldr	r3, [r7, #4]
 802451a:	2b00      	cmp	r3, #0
 802451c:	d106      	bne.n	802452c <tcp_output_segment+0x48>
 802451e:	4b5c      	ldr	r3, [pc, #368]	; (8024690 <tcp_output_segment+0x1ac>)
 8024520:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8024524:	495e      	ldr	r1, [pc, #376]	; (80246a0 <tcp_output_segment+0x1bc>)
 8024526:	485c      	ldr	r0, [pc, #368]	; (8024698 <tcp_output_segment+0x1b4>)
 8024528:	f001 ff02 	bl	8026330 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 802452c:	68f8      	ldr	r0, [r7, #12]
 802452e:	f7ff ffb9 	bl	80244a4 <tcp_output_segment_busy>
 8024532:	4603      	mov	r3, r0
 8024534:	2b00      	cmp	r3, #0
 8024536:	d001      	beq.n	802453c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8024538:	2300      	movs	r3, #0
 802453a:	e0a4      	b.n	8024686 <tcp_output_segment+0x1a2>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 802453c:	68fb      	ldr	r3, [r7, #12]
 802453e:	68dc      	ldr	r4, [r3, #12]
 8024540:	68bb      	ldr	r3, [r7, #8]
 8024542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024544:	4618      	mov	r0, r3
 8024546:	f7f4 fe04 	bl	8019152 <lwip_htonl>
 802454a:	4603      	mov	r3, r0
 802454c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 802454e:	68fb      	ldr	r3, [r7, #12]
 8024550:	68dc      	ldr	r4, [r3, #12]
 8024552:	68bb      	ldr	r3, [r7, #8]
 8024554:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8024556:	4618      	mov	r0, r3
 8024558:	f7f4 fde6 	bl	8019128 <lwip_htons>
 802455c:	4603      	mov	r3, r0
 802455e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8024560:	68bb      	ldr	r3, [r7, #8]
 8024562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024564:	68ba      	ldr	r2, [r7, #8]
 8024566:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8024568:	441a      	add	r2, r3
 802456a:	68bb      	ldr	r3, [r7, #8]
 802456c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 802456e:	68fb      	ldr	r3, [r7, #12]
 8024570:	68db      	ldr	r3, [r3, #12]
 8024572:	3314      	adds	r3, #20
 8024574:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8024576:	68fb      	ldr	r3, [r7, #12]
 8024578:	7a9b      	ldrb	r3, [r3, #10]
 802457a:	f003 0301 	and.w	r3, r3, #1
 802457e:	2b00      	cmp	r3, #0
 8024580:	d015      	beq.n	80245ae <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8024582:	68bb      	ldr	r3, [r7, #8]
 8024584:	3304      	adds	r3, #4
 8024586:	461a      	mov	r2, r3
 8024588:	6879      	ldr	r1, [r7, #4]
 802458a:	f240 50b4 	movw	r0, #1460	; 0x5b4
 802458e:	f7fc fdf9 	bl	8021184 <tcp_eff_send_mss_netif>
 8024592:	4603      	mov	r3, r0
 8024594:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8024596:	8b7b      	ldrh	r3, [r7, #26]
 8024598:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 802459c:	4618      	mov	r0, r3
 802459e:	f7f4 fdd8 	bl	8019152 <lwip_htonl>
 80245a2:	4602      	mov	r2, r0
 80245a4:	69fb      	ldr	r3, [r7, #28]
 80245a6:	601a      	str	r2, [r3, #0]
    opts += 1;
 80245a8:	69fb      	ldr	r3, [r7, #28]
 80245aa:	3304      	adds	r3, #4
 80245ac:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80245ae:	68bb      	ldr	r3, [r7, #8]
 80245b0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80245b4:	2b00      	cmp	r3, #0
 80245b6:	da02      	bge.n	80245be <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80245b8:	68bb      	ldr	r3, [r7, #8]
 80245ba:	2200      	movs	r2, #0
 80245bc:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 80245be:	68bb      	ldr	r3, [r7, #8]
 80245c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80245c2:	2b00      	cmp	r3, #0
 80245c4:	d10c      	bne.n	80245e0 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80245c6:	4b37      	ldr	r3, [pc, #220]	; (80246a4 <tcp_output_segment+0x1c0>)
 80245c8:	681a      	ldr	r2, [r3, #0]
 80245ca:	68bb      	ldr	r3, [r7, #8]
 80245cc:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80245ce:	68fb      	ldr	r3, [r7, #12]
 80245d0:	68db      	ldr	r3, [r3, #12]
 80245d2:	685b      	ldr	r3, [r3, #4]
 80245d4:	4618      	mov	r0, r3
 80245d6:	f7f4 fdbc 	bl	8019152 <lwip_htonl>
 80245da:	4602      	mov	r2, r0
 80245dc:	68bb      	ldr	r3, [r7, #8]
 80245de:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80245e0:	68fb      	ldr	r3, [r7, #12]
 80245e2:	68db      	ldr	r3, [r3, #12]
 80245e4:	461a      	mov	r2, r3
 80245e6:	68fb      	ldr	r3, [r7, #12]
 80245e8:	685b      	ldr	r3, [r3, #4]
 80245ea:	685b      	ldr	r3, [r3, #4]
 80245ec:	1ad3      	subs	r3, r2, r3
 80245ee:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80245f0:	68fb      	ldr	r3, [r7, #12]
 80245f2:	685b      	ldr	r3, [r3, #4]
 80245f4:	68fa      	ldr	r2, [r7, #12]
 80245f6:	6852      	ldr	r2, [r2, #4]
 80245f8:	8951      	ldrh	r1, [r2, #10]
 80245fa:	8b3a      	ldrh	r2, [r7, #24]
 80245fc:	1a8a      	subs	r2, r1, r2
 80245fe:	b292      	uxth	r2, r2
 8024600:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8024602:	68fb      	ldr	r3, [r7, #12]
 8024604:	685b      	ldr	r3, [r3, #4]
 8024606:	68fa      	ldr	r2, [r7, #12]
 8024608:	6852      	ldr	r2, [r2, #4]
 802460a:	8911      	ldrh	r1, [r2, #8]
 802460c:	8b3a      	ldrh	r2, [r7, #24]
 802460e:	1a8a      	subs	r2, r1, r2
 8024610:	b292      	uxth	r2, r2
 8024612:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8024614:	68fb      	ldr	r3, [r7, #12]
 8024616:	685b      	ldr	r3, [r3, #4]
 8024618:	68fa      	ldr	r2, [r7, #12]
 802461a:	68d2      	ldr	r2, [r2, #12]
 802461c:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 802461e:	68fb      	ldr	r3, [r7, #12]
 8024620:	68db      	ldr	r3, [r3, #12]
 8024622:	2200      	movs	r2, #0
 8024624:	741a      	strb	r2, [r3, #16]
 8024626:	2200      	movs	r2, #0
 8024628:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 802462a:	68fb      	ldr	r3, [r7, #12]
 802462c:	68db      	ldr	r3, [r3, #12]
 802462e:	f103 0214 	add.w	r2, r3, #20
 8024632:	68fb      	ldr	r3, [r7, #12]
 8024634:	7a9b      	ldrb	r3, [r3, #10]
 8024636:	f003 0301 	and.w	r3, r3, #1
 802463a:	2b00      	cmp	r3, #0
 802463c:	d001      	beq.n	8024642 <tcp_output_segment+0x15e>
 802463e:	2304      	movs	r3, #4
 8024640:	e000      	b.n	8024644 <tcp_output_segment+0x160>
 8024642:	2300      	movs	r3, #0
 8024644:	441a      	add	r2, r3
 8024646:	69fb      	ldr	r3, [r7, #28]
 8024648:	429a      	cmp	r2, r3
 802464a:	d006      	beq.n	802465a <tcp_output_segment+0x176>
 802464c:	4b10      	ldr	r3, [pc, #64]	; (8024690 <tcp_output_segment+0x1ac>)
 802464e:	f240 621c 	movw	r2, #1564	; 0x61c
 8024652:	4915      	ldr	r1, [pc, #84]	; (80246a8 <tcp_output_segment+0x1c4>)
 8024654:	4810      	ldr	r0, [pc, #64]	; (8024698 <tcp_output_segment+0x1b4>)
 8024656:	f001 fe6b 	bl	8026330 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 802465a:	68fb      	ldr	r3, [r7, #12]
 802465c:	6858      	ldr	r0, [r3, #4]
 802465e:	68b9      	ldr	r1, [r7, #8]
 8024660:	68bb      	ldr	r3, [r7, #8]
 8024662:	1d1c      	adds	r4, r3, #4
 8024664:	68bb      	ldr	r3, [r7, #8]
 8024666:	7add      	ldrb	r5, [r3, #11]
 8024668:	68bb      	ldr	r3, [r7, #8]
 802466a:	7a9b      	ldrb	r3, [r3, #10]
 802466c:	687a      	ldr	r2, [r7, #4]
 802466e:	9202      	str	r2, [sp, #8]
 8024670:	2206      	movs	r2, #6
 8024672:	9201      	str	r2, [sp, #4]
 8024674:	9300      	str	r3, [sp, #0]
 8024676:	462b      	mov	r3, r5
 8024678:	4622      	mov	r2, r4
 802467a:	f7f8 fa9d 	bl	801cbb8 <ip4_output_if>
 802467e:	4603      	mov	r3, r0
 8024680:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8024682:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8024686:	4618      	mov	r0, r3
 8024688:	3720      	adds	r7, #32
 802468a:	46bd      	mov	sp, r7
 802468c:	bdb0      	pop	{r4, r5, r7, pc}
 802468e:	bf00      	nop
 8024690:	08029bfc 	.word	0x08029bfc
 8024694:	0802a1c0 	.word	0x0802a1c0
 8024698:	08029c50 	.word	0x08029c50
 802469c:	0802a1e0 	.word	0x0802a1e0
 80246a0:	0802a200 	.word	0x0802a200
 80246a4:	20022ab8 	.word	0x20022ab8
 80246a8:	0802a224 	.word	0x0802a224

080246ac <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80246ac:	b5b0      	push	{r4, r5, r7, lr}
 80246ae:	b084      	sub	sp, #16
 80246b0:	af00      	add	r7, sp, #0
 80246b2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80246b4:	687b      	ldr	r3, [r7, #4]
 80246b6:	2b00      	cmp	r3, #0
 80246b8:	d106      	bne.n	80246c8 <tcp_rexmit_rto_prepare+0x1c>
 80246ba:	4b31      	ldr	r3, [pc, #196]	; (8024780 <tcp_rexmit_rto_prepare+0xd4>)
 80246bc:	f240 6263 	movw	r2, #1635	; 0x663
 80246c0:	4930      	ldr	r1, [pc, #192]	; (8024784 <tcp_rexmit_rto_prepare+0xd8>)
 80246c2:	4831      	ldr	r0, [pc, #196]	; (8024788 <tcp_rexmit_rto_prepare+0xdc>)
 80246c4:	f001 fe34 	bl	8026330 <iprintf>

  if (pcb->unacked == NULL) {
 80246c8:	687b      	ldr	r3, [r7, #4]
 80246ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80246cc:	2b00      	cmp	r3, #0
 80246ce:	d102      	bne.n	80246d6 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80246d0:	f06f 0305 	mvn.w	r3, #5
 80246d4:	e050      	b.n	8024778 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80246d6:	687b      	ldr	r3, [r7, #4]
 80246d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80246da:	60fb      	str	r3, [r7, #12]
 80246dc:	e00b      	b.n	80246f6 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80246de:	68f8      	ldr	r0, [r7, #12]
 80246e0:	f7ff fee0 	bl	80244a4 <tcp_output_segment_busy>
 80246e4:	4603      	mov	r3, r0
 80246e6:	2b00      	cmp	r3, #0
 80246e8:	d002      	beq.n	80246f0 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80246ea:	f06f 0305 	mvn.w	r3, #5
 80246ee:	e043      	b.n	8024778 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80246f0:	68fb      	ldr	r3, [r7, #12]
 80246f2:	681b      	ldr	r3, [r3, #0]
 80246f4:	60fb      	str	r3, [r7, #12]
 80246f6:	68fb      	ldr	r3, [r7, #12]
 80246f8:	681b      	ldr	r3, [r3, #0]
 80246fa:	2b00      	cmp	r3, #0
 80246fc:	d1ef      	bne.n	80246de <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80246fe:	68f8      	ldr	r0, [r7, #12]
 8024700:	f7ff fed0 	bl	80244a4 <tcp_output_segment_busy>
 8024704:	4603      	mov	r3, r0
 8024706:	2b00      	cmp	r3, #0
 8024708:	d002      	beq.n	8024710 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 802470a:	f06f 0305 	mvn.w	r3, #5
 802470e:	e033      	b.n	8024778 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8024710:	687b      	ldr	r3, [r7, #4]
 8024712:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8024714:	68fb      	ldr	r3, [r7, #12]
 8024716:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8024718:	687b      	ldr	r3, [r7, #4]
 802471a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 802471c:	687b      	ldr	r3, [r7, #4]
 802471e:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8024720:	687b      	ldr	r3, [r7, #4]
 8024722:	2200      	movs	r2, #0
 8024724:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8024726:	687b      	ldr	r3, [r7, #4]
 8024728:	8b5b      	ldrh	r3, [r3, #26]
 802472a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 802472e:	b29a      	uxth	r2, r3
 8024730:	687b      	ldr	r3, [r7, #4]
 8024732:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8024734:	68fb      	ldr	r3, [r7, #12]
 8024736:	68db      	ldr	r3, [r3, #12]
 8024738:	685b      	ldr	r3, [r3, #4]
 802473a:	4618      	mov	r0, r3
 802473c:	f7f4 fd09 	bl	8019152 <lwip_htonl>
 8024740:	4604      	mov	r4, r0
 8024742:	68fb      	ldr	r3, [r7, #12]
 8024744:	891b      	ldrh	r3, [r3, #8]
 8024746:	461d      	mov	r5, r3
 8024748:	68fb      	ldr	r3, [r7, #12]
 802474a:	68db      	ldr	r3, [r3, #12]
 802474c:	899b      	ldrh	r3, [r3, #12]
 802474e:	b29b      	uxth	r3, r3
 8024750:	4618      	mov	r0, r3
 8024752:	f7f4 fce9 	bl	8019128 <lwip_htons>
 8024756:	4603      	mov	r3, r0
 8024758:	b2db      	uxtb	r3, r3
 802475a:	f003 0303 	and.w	r3, r3, #3
 802475e:	2b00      	cmp	r3, #0
 8024760:	d001      	beq.n	8024766 <tcp_rexmit_rto_prepare+0xba>
 8024762:	2301      	movs	r3, #1
 8024764:	e000      	b.n	8024768 <tcp_rexmit_rto_prepare+0xbc>
 8024766:	2300      	movs	r3, #0
 8024768:	442b      	add	r3, r5
 802476a:	18e2      	adds	r2, r4, r3
 802476c:	687b      	ldr	r3, [r7, #4]
 802476e:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8024770:	687b      	ldr	r3, [r7, #4]
 8024772:	2200      	movs	r2, #0
 8024774:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8024776:	2300      	movs	r3, #0
}
 8024778:	4618      	mov	r0, r3
 802477a:	3710      	adds	r7, #16
 802477c:	46bd      	mov	sp, r7
 802477e:	bdb0      	pop	{r4, r5, r7, pc}
 8024780:	08029bfc 	.word	0x08029bfc
 8024784:	0802a238 	.word	0x0802a238
 8024788:	08029c50 	.word	0x08029c50

0802478c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 802478c:	b580      	push	{r7, lr}
 802478e:	b082      	sub	sp, #8
 8024790:	af00      	add	r7, sp, #0
 8024792:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8024794:	687b      	ldr	r3, [r7, #4]
 8024796:	2b00      	cmp	r3, #0
 8024798:	d106      	bne.n	80247a8 <tcp_rexmit_rto_commit+0x1c>
 802479a:	4b0d      	ldr	r3, [pc, #52]	; (80247d0 <tcp_rexmit_rto_commit+0x44>)
 802479c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80247a0:	490c      	ldr	r1, [pc, #48]	; (80247d4 <tcp_rexmit_rto_commit+0x48>)
 80247a2:	480d      	ldr	r0, [pc, #52]	; (80247d8 <tcp_rexmit_rto_commit+0x4c>)
 80247a4:	f001 fdc4 	bl	8026330 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80247a8:	687b      	ldr	r3, [r7, #4]
 80247aa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80247ae:	2bff      	cmp	r3, #255	; 0xff
 80247b0:	d007      	beq.n	80247c2 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80247b2:	687b      	ldr	r3, [r7, #4]
 80247b4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80247b8:	3301      	adds	r3, #1
 80247ba:	b2da      	uxtb	r2, r3
 80247bc:	687b      	ldr	r3, [r7, #4]
 80247be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80247c2:	6878      	ldr	r0, [r7, #4]
 80247c4:	f7ff fc78 	bl	80240b8 <tcp_output>
}
 80247c8:	bf00      	nop
 80247ca:	3708      	adds	r7, #8
 80247cc:	46bd      	mov	sp, r7
 80247ce:	bd80      	pop	{r7, pc}
 80247d0:	08029bfc 	.word	0x08029bfc
 80247d4:	0802a25c 	.word	0x0802a25c
 80247d8:	08029c50 	.word	0x08029c50

080247dc <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80247dc:	b580      	push	{r7, lr}
 80247de:	b082      	sub	sp, #8
 80247e0:	af00      	add	r7, sp, #0
 80247e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80247e4:	687b      	ldr	r3, [r7, #4]
 80247e6:	2b00      	cmp	r3, #0
 80247e8:	d106      	bne.n	80247f8 <tcp_rexmit_rto+0x1c>
 80247ea:	4b0a      	ldr	r3, [pc, #40]	; (8024814 <tcp_rexmit_rto+0x38>)
 80247ec:	f240 62ad 	movw	r2, #1709	; 0x6ad
 80247f0:	4909      	ldr	r1, [pc, #36]	; (8024818 <tcp_rexmit_rto+0x3c>)
 80247f2:	480a      	ldr	r0, [pc, #40]	; (802481c <tcp_rexmit_rto+0x40>)
 80247f4:	f001 fd9c 	bl	8026330 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80247f8:	6878      	ldr	r0, [r7, #4]
 80247fa:	f7ff ff57 	bl	80246ac <tcp_rexmit_rto_prepare>
 80247fe:	4603      	mov	r3, r0
 8024800:	2b00      	cmp	r3, #0
 8024802:	d102      	bne.n	802480a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8024804:	6878      	ldr	r0, [r7, #4]
 8024806:	f7ff ffc1 	bl	802478c <tcp_rexmit_rto_commit>
  }
}
 802480a:	bf00      	nop
 802480c:	3708      	adds	r7, #8
 802480e:	46bd      	mov	sp, r7
 8024810:	bd80      	pop	{r7, pc}
 8024812:	bf00      	nop
 8024814:	08029bfc 	.word	0x08029bfc
 8024818:	0802a280 	.word	0x0802a280
 802481c:	08029c50 	.word	0x08029c50

08024820 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8024820:	b590      	push	{r4, r7, lr}
 8024822:	b085      	sub	sp, #20
 8024824:	af00      	add	r7, sp, #0
 8024826:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8024828:	687b      	ldr	r3, [r7, #4]
 802482a:	2b00      	cmp	r3, #0
 802482c:	d106      	bne.n	802483c <tcp_rexmit+0x1c>
 802482e:	4b2f      	ldr	r3, [pc, #188]	; (80248ec <tcp_rexmit+0xcc>)
 8024830:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8024834:	492e      	ldr	r1, [pc, #184]	; (80248f0 <tcp_rexmit+0xd0>)
 8024836:	482f      	ldr	r0, [pc, #188]	; (80248f4 <tcp_rexmit+0xd4>)
 8024838:	f001 fd7a 	bl	8026330 <iprintf>

  if (pcb->unacked == NULL) {
 802483c:	687b      	ldr	r3, [r7, #4]
 802483e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8024840:	2b00      	cmp	r3, #0
 8024842:	d102      	bne.n	802484a <tcp_rexmit+0x2a>
    return ERR_VAL;
 8024844:	f06f 0305 	mvn.w	r3, #5
 8024848:	e04c      	b.n	80248e4 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 802484a:	687b      	ldr	r3, [r7, #4]
 802484c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802484e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8024850:	68b8      	ldr	r0, [r7, #8]
 8024852:	f7ff fe27 	bl	80244a4 <tcp_output_segment_busy>
 8024856:	4603      	mov	r3, r0
 8024858:	2b00      	cmp	r3, #0
 802485a:	d002      	beq.n	8024862 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 802485c:	f06f 0305 	mvn.w	r3, #5
 8024860:	e040      	b.n	80248e4 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8024862:	68bb      	ldr	r3, [r7, #8]
 8024864:	681a      	ldr	r2, [r3, #0]
 8024866:	687b      	ldr	r3, [r7, #4]
 8024868:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 802486a:	687b      	ldr	r3, [r7, #4]
 802486c:	336c      	adds	r3, #108	; 0x6c
 802486e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8024870:	e002      	b.n	8024878 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8024872:	68fb      	ldr	r3, [r7, #12]
 8024874:	681b      	ldr	r3, [r3, #0]
 8024876:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8024878:	68fb      	ldr	r3, [r7, #12]
 802487a:	681b      	ldr	r3, [r3, #0]
 802487c:	2b00      	cmp	r3, #0
 802487e:	d011      	beq.n	80248a4 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8024880:	68fb      	ldr	r3, [r7, #12]
 8024882:	681b      	ldr	r3, [r3, #0]
 8024884:	68db      	ldr	r3, [r3, #12]
 8024886:	685b      	ldr	r3, [r3, #4]
 8024888:	4618      	mov	r0, r3
 802488a:	f7f4 fc62 	bl	8019152 <lwip_htonl>
 802488e:	4604      	mov	r4, r0
 8024890:	68bb      	ldr	r3, [r7, #8]
 8024892:	68db      	ldr	r3, [r3, #12]
 8024894:	685b      	ldr	r3, [r3, #4]
 8024896:	4618      	mov	r0, r3
 8024898:	f7f4 fc5b 	bl	8019152 <lwip_htonl>
 802489c:	4603      	mov	r3, r0
 802489e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80248a0:	2b00      	cmp	r3, #0
 80248a2:	dbe6      	blt.n	8024872 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80248a4:	68fb      	ldr	r3, [r7, #12]
 80248a6:	681a      	ldr	r2, [r3, #0]
 80248a8:	68bb      	ldr	r3, [r7, #8]
 80248aa:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80248ac:	68fb      	ldr	r3, [r7, #12]
 80248ae:	68ba      	ldr	r2, [r7, #8]
 80248b0:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80248b2:	68bb      	ldr	r3, [r7, #8]
 80248b4:	681b      	ldr	r3, [r3, #0]
 80248b6:	2b00      	cmp	r3, #0
 80248b8:	d103      	bne.n	80248c2 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80248ba:	687b      	ldr	r3, [r7, #4]
 80248bc:	2200      	movs	r2, #0
 80248be:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80248c2:	687b      	ldr	r3, [r7, #4]
 80248c4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80248c8:	2bff      	cmp	r3, #255	; 0xff
 80248ca:	d007      	beq.n	80248dc <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80248cc:	687b      	ldr	r3, [r7, #4]
 80248ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80248d2:	3301      	adds	r3, #1
 80248d4:	b2da      	uxtb	r2, r3
 80248d6:	687b      	ldr	r3, [r7, #4]
 80248d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80248dc:	687b      	ldr	r3, [r7, #4]
 80248de:	2200      	movs	r2, #0
 80248e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80248e2:	2300      	movs	r3, #0
}
 80248e4:	4618      	mov	r0, r3
 80248e6:	3714      	adds	r7, #20
 80248e8:	46bd      	mov	sp, r7
 80248ea:	bd90      	pop	{r4, r7, pc}
 80248ec:	08029bfc 	.word	0x08029bfc
 80248f0:	0802a29c 	.word	0x0802a29c
 80248f4:	08029c50 	.word	0x08029c50

080248f8 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80248f8:	b580      	push	{r7, lr}
 80248fa:	b082      	sub	sp, #8
 80248fc:	af00      	add	r7, sp, #0
 80248fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8024900:	687b      	ldr	r3, [r7, #4]
 8024902:	2b00      	cmp	r3, #0
 8024904:	d106      	bne.n	8024914 <tcp_rexmit_fast+0x1c>
 8024906:	4b2f      	ldr	r3, [pc, #188]	; (80249c4 <tcp_rexmit_fast+0xcc>)
 8024908:	f240 62f9 	movw	r2, #1785	; 0x6f9
 802490c:	492e      	ldr	r1, [pc, #184]	; (80249c8 <tcp_rexmit_fast+0xd0>)
 802490e:	482f      	ldr	r0, [pc, #188]	; (80249cc <tcp_rexmit_fast+0xd4>)
 8024910:	f001 fd0e 	bl	8026330 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8024914:	687b      	ldr	r3, [r7, #4]
 8024916:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8024918:	2b00      	cmp	r3, #0
 802491a:	d04f      	beq.n	80249bc <tcp_rexmit_fast+0xc4>
 802491c:	687b      	ldr	r3, [r7, #4]
 802491e:	8b5b      	ldrh	r3, [r3, #26]
 8024920:	f003 0304 	and.w	r3, r3, #4
 8024924:	2b00      	cmp	r3, #0
 8024926:	d149      	bne.n	80249bc <tcp_rexmit_fast+0xc4>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8024928:	6878      	ldr	r0, [r7, #4]
 802492a:	f7ff ff79 	bl	8024820 <tcp_rexmit>
 802492e:	4603      	mov	r3, r0
 8024930:	2b00      	cmp	r3, #0
 8024932:	d143      	bne.n	80249bc <tcp_rexmit_fast+0xc4>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8024934:	687b      	ldr	r3, [r7, #4]
 8024936:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 802493a:	687b      	ldr	r3, [r7, #4]
 802493c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8024940:	429a      	cmp	r2, r3
 8024942:	d208      	bcs.n	8024956 <tcp_rexmit_fast+0x5e>
 8024944:	687b      	ldr	r3, [r7, #4]
 8024946:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 802494a:	2b00      	cmp	r3, #0
 802494c:	da00      	bge.n	8024950 <tcp_rexmit_fast+0x58>
 802494e:	3301      	adds	r3, #1
 8024950:	105b      	asrs	r3, r3, #1
 8024952:	b29b      	uxth	r3, r3
 8024954:	e007      	b.n	8024966 <tcp_rexmit_fast+0x6e>
 8024956:	687b      	ldr	r3, [r7, #4]
 8024958:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 802495c:	2b00      	cmp	r3, #0
 802495e:	da00      	bge.n	8024962 <tcp_rexmit_fast+0x6a>
 8024960:	3301      	adds	r3, #1
 8024962:	105b      	asrs	r3, r3, #1
 8024964:	b29b      	uxth	r3, r3
 8024966:	687a      	ldr	r2, [r7, #4]
 8024968:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 802496c:	687b      	ldr	r3, [r7, #4]
 802496e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8024972:	461a      	mov	r2, r3
 8024974:	687b      	ldr	r3, [r7, #4]
 8024976:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8024978:	005b      	lsls	r3, r3, #1
 802497a:	429a      	cmp	r2, r3
 802497c:	d206      	bcs.n	802498c <tcp_rexmit_fast+0x94>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 802497e:	687b      	ldr	r3, [r7, #4]
 8024980:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8024982:	005b      	lsls	r3, r3, #1
 8024984:	b29a      	uxth	r2, r3
 8024986:	687b      	ldr	r3, [r7, #4]
 8024988:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 802498c:	687b      	ldr	r3, [r7, #4]
 802498e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8024992:	687b      	ldr	r3, [r7, #4]
 8024994:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8024996:	4619      	mov	r1, r3
 8024998:	0049      	lsls	r1, r1, #1
 802499a:	440b      	add	r3, r1
 802499c:	b29b      	uxth	r3, r3
 802499e:	4413      	add	r3, r2
 80249a0:	b29a      	uxth	r2, r3
 80249a2:	687b      	ldr	r3, [r7, #4]
 80249a4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 80249a8:	687b      	ldr	r3, [r7, #4]
 80249aa:	8b5b      	ldrh	r3, [r3, #26]
 80249ac:	f043 0304 	orr.w	r3, r3, #4
 80249b0:	b29a      	uxth	r2, r3
 80249b2:	687b      	ldr	r3, [r7, #4]
 80249b4:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80249b6:	687b      	ldr	r3, [r7, #4]
 80249b8:	2200      	movs	r2, #0
 80249ba:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 80249bc:	bf00      	nop
 80249be:	3708      	adds	r7, #8
 80249c0:	46bd      	mov	sp, r7
 80249c2:	bd80      	pop	{r7, pc}
 80249c4:	08029bfc 	.word	0x08029bfc
 80249c8:	0802a2b4 	.word	0x0802a2b4
 80249cc:	08029c50 	.word	0x08029c50

080249d0 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80249d0:	b580      	push	{r7, lr}
 80249d2:	b086      	sub	sp, #24
 80249d4:	af00      	add	r7, sp, #0
 80249d6:	60f8      	str	r0, [r7, #12]
 80249d8:	607b      	str	r3, [r7, #4]
 80249da:	460b      	mov	r3, r1
 80249dc:	817b      	strh	r3, [r7, #10]
 80249de:	4613      	mov	r3, r2
 80249e0:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80249e2:	897a      	ldrh	r2, [r7, #10]
 80249e4:	893b      	ldrh	r3, [r7, #8]
 80249e6:	4413      	add	r3, r2
 80249e8:	b29b      	uxth	r3, r3
 80249ea:	3314      	adds	r3, #20
 80249ec:	b29b      	uxth	r3, r3
 80249ee:	f44f 7220 	mov.w	r2, #640	; 0x280
 80249f2:	4619      	mov	r1, r3
 80249f4:	2022      	movs	r0, #34	; 0x22
 80249f6:	f7f9 ffb5 	bl	801e964 <pbuf_alloc>
 80249fa:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80249fc:	697b      	ldr	r3, [r7, #20]
 80249fe:	2b00      	cmp	r3, #0
 8024a00:	d04e      	beq.n	8024aa0 <tcp_output_alloc_header_common+0xd0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8024a02:	697b      	ldr	r3, [r7, #20]
 8024a04:	895b      	ldrh	r3, [r3, #10]
 8024a06:	461a      	mov	r2, r3
 8024a08:	897b      	ldrh	r3, [r7, #10]
 8024a0a:	3314      	adds	r3, #20
 8024a0c:	429a      	cmp	r2, r3
 8024a0e:	da06      	bge.n	8024a1e <tcp_output_alloc_header_common+0x4e>
 8024a10:	4b26      	ldr	r3, [pc, #152]	; (8024aac <tcp_output_alloc_header_common+0xdc>)
 8024a12:	f240 7224 	movw	r2, #1828	; 0x724
 8024a16:	4926      	ldr	r1, [pc, #152]	; (8024ab0 <tcp_output_alloc_header_common+0xe0>)
 8024a18:	4826      	ldr	r0, [pc, #152]	; (8024ab4 <tcp_output_alloc_header_common+0xe4>)
 8024a1a:	f001 fc89 	bl	8026330 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8024a1e:	697b      	ldr	r3, [r7, #20]
 8024a20:	685b      	ldr	r3, [r3, #4]
 8024a22:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8024a24:	8c3b      	ldrh	r3, [r7, #32]
 8024a26:	4618      	mov	r0, r3
 8024a28:	f7f4 fb7e 	bl	8019128 <lwip_htons>
 8024a2c:	4603      	mov	r3, r0
 8024a2e:	461a      	mov	r2, r3
 8024a30:	693b      	ldr	r3, [r7, #16]
 8024a32:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8024a34:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8024a36:	4618      	mov	r0, r3
 8024a38:	f7f4 fb76 	bl	8019128 <lwip_htons>
 8024a3c:	4603      	mov	r3, r0
 8024a3e:	461a      	mov	r2, r3
 8024a40:	693b      	ldr	r3, [r7, #16]
 8024a42:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8024a44:	693b      	ldr	r3, [r7, #16]
 8024a46:	687a      	ldr	r2, [r7, #4]
 8024a48:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8024a4a:	68f8      	ldr	r0, [r7, #12]
 8024a4c:	f7f4 fb81 	bl	8019152 <lwip_htonl>
 8024a50:	4602      	mov	r2, r0
 8024a52:	693b      	ldr	r3, [r7, #16]
 8024a54:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8024a56:	897b      	ldrh	r3, [r7, #10]
 8024a58:	089b      	lsrs	r3, r3, #2
 8024a5a:	b29b      	uxth	r3, r3
 8024a5c:	3305      	adds	r3, #5
 8024a5e:	b29b      	uxth	r3, r3
 8024a60:	031b      	lsls	r3, r3, #12
 8024a62:	b29a      	uxth	r2, r3
 8024a64:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8024a68:	b29b      	uxth	r3, r3
 8024a6a:	4313      	orrs	r3, r2
 8024a6c:	b29b      	uxth	r3, r3
 8024a6e:	4618      	mov	r0, r3
 8024a70:	f7f4 fb5a 	bl	8019128 <lwip_htons>
 8024a74:	4603      	mov	r3, r0
 8024a76:	461a      	mov	r2, r3
 8024a78:	693b      	ldr	r3, [r7, #16]
 8024a7a:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8024a7c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8024a7e:	4618      	mov	r0, r3
 8024a80:	f7f4 fb52 	bl	8019128 <lwip_htons>
 8024a84:	4603      	mov	r3, r0
 8024a86:	461a      	mov	r2, r3
 8024a88:	693b      	ldr	r3, [r7, #16]
 8024a8a:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8024a8c:	693b      	ldr	r3, [r7, #16]
 8024a8e:	2200      	movs	r2, #0
 8024a90:	741a      	strb	r2, [r3, #16]
 8024a92:	2200      	movs	r2, #0
 8024a94:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8024a96:	693b      	ldr	r3, [r7, #16]
 8024a98:	2200      	movs	r2, #0
 8024a9a:	749a      	strb	r2, [r3, #18]
 8024a9c:	2200      	movs	r2, #0
 8024a9e:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8024aa0:	697b      	ldr	r3, [r7, #20]
}
 8024aa2:	4618      	mov	r0, r3
 8024aa4:	3718      	adds	r7, #24
 8024aa6:	46bd      	mov	sp, r7
 8024aa8:	bd80      	pop	{r7, pc}
 8024aaa:	bf00      	nop
 8024aac:	08029bfc 	.word	0x08029bfc
 8024ab0:	0802a2d4 	.word	0x0802a2d4
 8024ab4:	08029c50 	.word	0x08029c50

08024ab8 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8024ab8:	b5b0      	push	{r4, r5, r7, lr}
 8024aba:	b08a      	sub	sp, #40	; 0x28
 8024abc:	af04      	add	r7, sp, #16
 8024abe:	60f8      	str	r0, [r7, #12]
 8024ac0:	607b      	str	r3, [r7, #4]
 8024ac2:	460b      	mov	r3, r1
 8024ac4:	817b      	strh	r3, [r7, #10]
 8024ac6:	4613      	mov	r3, r2
 8024ac8:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8024aca:	68fb      	ldr	r3, [r7, #12]
 8024acc:	2b00      	cmp	r3, #0
 8024ace:	d106      	bne.n	8024ade <tcp_output_alloc_header+0x26>
 8024ad0:	4b15      	ldr	r3, [pc, #84]	; (8024b28 <tcp_output_alloc_header+0x70>)
 8024ad2:	f240 7242 	movw	r2, #1858	; 0x742
 8024ad6:	4915      	ldr	r1, [pc, #84]	; (8024b2c <tcp_output_alloc_header+0x74>)
 8024ad8:	4815      	ldr	r0, [pc, #84]	; (8024b30 <tcp_output_alloc_header+0x78>)
 8024ada:	f001 fc29 	bl	8026330 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8024ade:	68fb      	ldr	r3, [r7, #12]
 8024ae0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8024ae2:	68fb      	ldr	r3, [r7, #12]
 8024ae4:	8adb      	ldrh	r3, [r3, #22]
 8024ae6:	68fa      	ldr	r2, [r7, #12]
 8024ae8:	8b12      	ldrh	r2, [r2, #24]
 8024aea:	68f9      	ldr	r1, [r7, #12]
 8024aec:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8024aee:	893d      	ldrh	r5, [r7, #8]
 8024af0:	897c      	ldrh	r4, [r7, #10]
 8024af2:	9103      	str	r1, [sp, #12]
 8024af4:	2110      	movs	r1, #16
 8024af6:	9102      	str	r1, [sp, #8]
 8024af8:	9201      	str	r2, [sp, #4]
 8024afa:	9300      	str	r3, [sp, #0]
 8024afc:	687b      	ldr	r3, [r7, #4]
 8024afe:	462a      	mov	r2, r5
 8024b00:	4621      	mov	r1, r4
 8024b02:	f7ff ff65 	bl	80249d0 <tcp_output_alloc_header_common>
 8024b06:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8024b08:	697b      	ldr	r3, [r7, #20]
 8024b0a:	2b00      	cmp	r3, #0
 8024b0c:	d006      	beq.n	8024b1c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8024b0e:	68fb      	ldr	r3, [r7, #12]
 8024b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024b12:	68fa      	ldr	r2, [r7, #12]
 8024b14:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8024b16:	441a      	add	r2, r3
 8024b18:	68fb      	ldr	r3, [r7, #12]
 8024b1a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8024b1c:	697b      	ldr	r3, [r7, #20]
}
 8024b1e:	4618      	mov	r0, r3
 8024b20:	3718      	adds	r7, #24
 8024b22:	46bd      	mov	sp, r7
 8024b24:	bdb0      	pop	{r4, r5, r7, pc}
 8024b26:	bf00      	nop
 8024b28:	08029bfc 	.word	0x08029bfc
 8024b2c:	0802a304 	.word	0x0802a304
 8024b30:	08029c50 	.word	0x08029c50

08024b34 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8024b34:	b580      	push	{r7, lr}
 8024b36:	b088      	sub	sp, #32
 8024b38:	af00      	add	r7, sp, #0
 8024b3a:	60f8      	str	r0, [r7, #12]
 8024b3c:	60b9      	str	r1, [r7, #8]
 8024b3e:	4611      	mov	r1, r2
 8024b40:	461a      	mov	r2, r3
 8024b42:	460b      	mov	r3, r1
 8024b44:	71fb      	strb	r3, [r7, #7]
 8024b46:	4613      	mov	r3, r2
 8024b48:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8024b4a:	2300      	movs	r3, #0
 8024b4c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8024b4e:	68bb      	ldr	r3, [r7, #8]
 8024b50:	2b00      	cmp	r3, #0
 8024b52:	d106      	bne.n	8024b62 <tcp_output_fill_options+0x2e>
 8024b54:	4b15      	ldr	r3, [pc, #84]	; (8024bac <tcp_output_fill_options+0x78>)
 8024b56:	f240 7256 	movw	r2, #1878	; 0x756
 8024b5a:	4915      	ldr	r1, [pc, #84]	; (8024bb0 <tcp_output_fill_options+0x7c>)
 8024b5c:	4815      	ldr	r0, [pc, #84]	; (8024bb4 <tcp_output_fill_options+0x80>)
 8024b5e:	f001 fbe7 	bl	8026330 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8024b62:	68bb      	ldr	r3, [r7, #8]
 8024b64:	685b      	ldr	r3, [r3, #4]
 8024b66:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8024b68:	69bb      	ldr	r3, [r7, #24]
 8024b6a:	3314      	adds	r3, #20
 8024b6c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8024b6e:	69bb      	ldr	r3, [r7, #24]
 8024b70:	f103 0214 	add.w	r2, r3, #20
 8024b74:	8bfb      	ldrh	r3, [r7, #30]
 8024b76:	009b      	lsls	r3, r3, #2
 8024b78:	4619      	mov	r1, r3
 8024b7a:	79fb      	ldrb	r3, [r7, #7]
 8024b7c:	f003 0301 	and.w	r3, r3, #1
 8024b80:	2b00      	cmp	r3, #0
 8024b82:	d001      	beq.n	8024b88 <tcp_output_fill_options+0x54>
 8024b84:	2304      	movs	r3, #4
 8024b86:	e000      	b.n	8024b8a <tcp_output_fill_options+0x56>
 8024b88:	2300      	movs	r3, #0
 8024b8a:	440b      	add	r3, r1
 8024b8c:	441a      	add	r2, r3
 8024b8e:	697b      	ldr	r3, [r7, #20]
 8024b90:	429a      	cmp	r2, r3
 8024b92:	d006      	beq.n	8024ba2 <tcp_output_fill_options+0x6e>
 8024b94:	4b05      	ldr	r3, [pc, #20]	; (8024bac <tcp_output_fill_options+0x78>)
 8024b96:	f240 7275 	movw	r2, #1909	; 0x775
 8024b9a:	4907      	ldr	r1, [pc, #28]	; (8024bb8 <tcp_output_fill_options+0x84>)
 8024b9c:	4805      	ldr	r0, [pc, #20]	; (8024bb4 <tcp_output_fill_options+0x80>)
 8024b9e:	f001 fbc7 	bl	8026330 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8024ba2:	bf00      	nop
 8024ba4:	3720      	adds	r7, #32
 8024ba6:	46bd      	mov	sp, r7
 8024ba8:	bd80      	pop	{r7, pc}
 8024baa:	bf00      	nop
 8024bac:	08029bfc 	.word	0x08029bfc
 8024bb0:	0802a32c 	.word	0x0802a32c
 8024bb4:	08029c50 	.word	0x08029c50
 8024bb8:	0802a224 	.word	0x0802a224

08024bbc <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8024bbc:	b580      	push	{r7, lr}
 8024bbe:	b08a      	sub	sp, #40	; 0x28
 8024bc0:	af04      	add	r7, sp, #16
 8024bc2:	60f8      	str	r0, [r7, #12]
 8024bc4:	60b9      	str	r1, [r7, #8]
 8024bc6:	607a      	str	r2, [r7, #4]
 8024bc8:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8024bca:	68bb      	ldr	r3, [r7, #8]
 8024bcc:	2b00      	cmp	r3, #0
 8024bce:	d106      	bne.n	8024bde <tcp_output_control_segment+0x22>
 8024bd0:	4b1c      	ldr	r3, [pc, #112]	; (8024c44 <tcp_output_control_segment+0x88>)
 8024bd2:	f240 7287 	movw	r2, #1927	; 0x787
 8024bd6:	491c      	ldr	r1, [pc, #112]	; (8024c48 <tcp_output_control_segment+0x8c>)
 8024bd8:	481c      	ldr	r0, [pc, #112]	; (8024c4c <tcp_output_control_segment+0x90>)
 8024bda:	f001 fba9 	bl	8026330 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8024bde:	683a      	ldr	r2, [r7, #0]
 8024be0:	6879      	ldr	r1, [r7, #4]
 8024be2:	68f8      	ldr	r0, [r7, #12]
 8024be4:	f7fe fac8 	bl	8023178 <tcp_route>
 8024be8:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8024bea:	693b      	ldr	r3, [r7, #16]
 8024bec:	2b00      	cmp	r3, #0
 8024bee:	d102      	bne.n	8024bf6 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8024bf0:	23fc      	movs	r3, #252	; 0xfc
 8024bf2:	75fb      	strb	r3, [r7, #23]
 8024bf4:	e01c      	b.n	8024c30 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8024bf6:	68fb      	ldr	r3, [r7, #12]
 8024bf8:	2b00      	cmp	r3, #0
 8024bfa:	d006      	beq.n	8024c0a <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8024bfc:	68fb      	ldr	r3, [r7, #12]
 8024bfe:	7adb      	ldrb	r3, [r3, #11]
 8024c00:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8024c02:	68fb      	ldr	r3, [r7, #12]
 8024c04:	7a9b      	ldrb	r3, [r3, #10]
 8024c06:	757b      	strb	r3, [r7, #21]
 8024c08:	e003      	b.n	8024c12 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8024c0a:	23ff      	movs	r3, #255	; 0xff
 8024c0c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8024c0e:	2300      	movs	r3, #0
 8024c10:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8024c12:	7dba      	ldrb	r2, [r7, #22]
 8024c14:	693b      	ldr	r3, [r7, #16]
 8024c16:	9302      	str	r3, [sp, #8]
 8024c18:	2306      	movs	r3, #6
 8024c1a:	9301      	str	r3, [sp, #4]
 8024c1c:	7d7b      	ldrb	r3, [r7, #21]
 8024c1e:	9300      	str	r3, [sp, #0]
 8024c20:	4613      	mov	r3, r2
 8024c22:	683a      	ldr	r2, [r7, #0]
 8024c24:	6879      	ldr	r1, [r7, #4]
 8024c26:	68b8      	ldr	r0, [r7, #8]
 8024c28:	f7f7 ffc6 	bl	801cbb8 <ip4_output_if>
 8024c2c:	4603      	mov	r3, r0
 8024c2e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8024c30:	68b8      	ldr	r0, [r7, #8]
 8024c32:	f7fa f979 	bl	801ef28 <pbuf_free>
  return err;
 8024c36:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8024c3a:	4618      	mov	r0, r3
 8024c3c:	3718      	adds	r7, #24
 8024c3e:	46bd      	mov	sp, r7
 8024c40:	bd80      	pop	{r7, pc}
 8024c42:	bf00      	nop
 8024c44:	08029bfc 	.word	0x08029bfc
 8024c48:	0802a354 	.word	0x0802a354
 8024c4c:	08029c50 	.word	0x08029c50

08024c50 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8024c50:	b590      	push	{r4, r7, lr}
 8024c52:	b08b      	sub	sp, #44	; 0x2c
 8024c54:	af04      	add	r7, sp, #16
 8024c56:	60f8      	str	r0, [r7, #12]
 8024c58:	60b9      	str	r1, [r7, #8]
 8024c5a:	607a      	str	r2, [r7, #4]
 8024c5c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8024c5e:	683b      	ldr	r3, [r7, #0]
 8024c60:	2b00      	cmp	r3, #0
 8024c62:	d106      	bne.n	8024c72 <tcp_rst+0x22>
 8024c64:	4b1f      	ldr	r3, [pc, #124]	; (8024ce4 <tcp_rst+0x94>)
 8024c66:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8024c6a:	491f      	ldr	r1, [pc, #124]	; (8024ce8 <tcp_rst+0x98>)
 8024c6c:	481f      	ldr	r0, [pc, #124]	; (8024cec <tcp_rst+0x9c>)
 8024c6e:	f001 fb5f 	bl	8026330 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8024c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024c74:	2b00      	cmp	r3, #0
 8024c76:	d106      	bne.n	8024c86 <tcp_rst+0x36>
 8024c78:	4b1a      	ldr	r3, [pc, #104]	; (8024ce4 <tcp_rst+0x94>)
 8024c7a:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8024c7e:	491c      	ldr	r1, [pc, #112]	; (8024cf0 <tcp_rst+0xa0>)
 8024c80:	481a      	ldr	r0, [pc, #104]	; (8024cec <tcp_rst+0x9c>)
 8024c82:	f001 fb55 	bl	8026330 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8024c86:	2300      	movs	r3, #0
 8024c88:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8024c8a:	f646 030b 	movw	r3, #26635	; 0x680b
 8024c8e:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8024c90:	7dfb      	ldrb	r3, [r7, #23]
 8024c92:	b29c      	uxth	r4, r3
 8024c94:	68b8      	ldr	r0, [r7, #8]
 8024c96:	f7f4 fa5c 	bl	8019152 <lwip_htonl>
 8024c9a:	4602      	mov	r2, r0
 8024c9c:	8abb      	ldrh	r3, [r7, #20]
 8024c9e:	9303      	str	r3, [sp, #12]
 8024ca0:	2314      	movs	r3, #20
 8024ca2:	9302      	str	r3, [sp, #8]
 8024ca4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8024ca6:	9301      	str	r3, [sp, #4]
 8024ca8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8024caa:	9300      	str	r3, [sp, #0]
 8024cac:	4613      	mov	r3, r2
 8024cae:	2200      	movs	r2, #0
 8024cb0:	4621      	mov	r1, r4
 8024cb2:	6878      	ldr	r0, [r7, #4]
 8024cb4:	f7ff fe8c 	bl	80249d0 <tcp_output_alloc_header_common>
 8024cb8:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8024cba:	693b      	ldr	r3, [r7, #16]
 8024cbc:	2b00      	cmp	r3, #0
 8024cbe:	d00c      	beq.n	8024cda <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8024cc0:	7dfb      	ldrb	r3, [r7, #23]
 8024cc2:	2200      	movs	r2, #0
 8024cc4:	6939      	ldr	r1, [r7, #16]
 8024cc6:	68f8      	ldr	r0, [r7, #12]
 8024cc8:	f7ff ff34 	bl	8024b34 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8024ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024cce:	683a      	ldr	r2, [r7, #0]
 8024cd0:	6939      	ldr	r1, [r7, #16]
 8024cd2:	68f8      	ldr	r0, [r7, #12]
 8024cd4:	f7ff ff72 	bl	8024bbc <tcp_output_control_segment>
 8024cd8:	e000      	b.n	8024cdc <tcp_rst+0x8c>
    return;
 8024cda:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8024cdc:	371c      	adds	r7, #28
 8024cde:	46bd      	mov	sp, r7
 8024ce0:	bd90      	pop	{r4, r7, pc}
 8024ce2:	bf00      	nop
 8024ce4:	08029bfc 	.word	0x08029bfc
 8024ce8:	0802a380 	.word	0x0802a380
 8024cec:	08029c50 	.word	0x08029c50
 8024cf0:	0802a39c 	.word	0x0802a39c

08024cf4 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8024cf4:	b590      	push	{r4, r7, lr}
 8024cf6:	b087      	sub	sp, #28
 8024cf8:	af00      	add	r7, sp, #0
 8024cfa:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8024cfc:	2300      	movs	r3, #0
 8024cfe:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8024d00:	2300      	movs	r3, #0
 8024d02:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8024d04:	687b      	ldr	r3, [r7, #4]
 8024d06:	2b00      	cmp	r3, #0
 8024d08:	d106      	bne.n	8024d18 <tcp_send_empty_ack+0x24>
 8024d0a:	4b29      	ldr	r3, [pc, #164]	; (8024db0 <tcp_send_empty_ack+0xbc>)
 8024d0c:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8024d10:	4928      	ldr	r1, [pc, #160]	; (8024db4 <tcp_send_empty_ack+0xc0>)
 8024d12:	4829      	ldr	r0, [pc, #164]	; (8024db8 <tcp_send_empty_ack+0xc4>)
 8024d14:	f001 fb0c 	bl	8026330 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8024d18:	7dfb      	ldrb	r3, [r7, #23]
 8024d1a:	f003 0301 	and.w	r3, r3, #1
 8024d1e:	2b00      	cmp	r3, #0
 8024d20:	d001      	beq.n	8024d26 <tcp_send_empty_ack+0x32>
 8024d22:	2304      	movs	r3, #4
 8024d24:	e000      	b.n	8024d28 <tcp_send_empty_ack+0x34>
 8024d26:	2300      	movs	r3, #0
 8024d28:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8024d2a:	7d7b      	ldrb	r3, [r7, #21]
 8024d2c:	b29c      	uxth	r4, r3
 8024d2e:	687b      	ldr	r3, [r7, #4]
 8024d30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8024d32:	4618      	mov	r0, r3
 8024d34:	f7f4 fa0d 	bl	8019152 <lwip_htonl>
 8024d38:	4603      	mov	r3, r0
 8024d3a:	2200      	movs	r2, #0
 8024d3c:	4621      	mov	r1, r4
 8024d3e:	6878      	ldr	r0, [r7, #4]
 8024d40:	f7ff feba 	bl	8024ab8 <tcp_output_alloc_header>
 8024d44:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8024d46:	693b      	ldr	r3, [r7, #16]
 8024d48:	2b00      	cmp	r3, #0
 8024d4a:	d109      	bne.n	8024d60 <tcp_send_empty_ack+0x6c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8024d4c:	687b      	ldr	r3, [r7, #4]
 8024d4e:	8b5b      	ldrh	r3, [r3, #26]
 8024d50:	f043 0303 	orr.w	r3, r3, #3
 8024d54:	b29a      	uxth	r2, r3
 8024d56:	687b      	ldr	r3, [r7, #4]
 8024d58:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8024d5a:	f06f 0301 	mvn.w	r3, #1
 8024d5e:	e023      	b.n	8024da8 <tcp_send_empty_ack+0xb4>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8024d60:	7dbb      	ldrb	r3, [r7, #22]
 8024d62:	7dfa      	ldrb	r2, [r7, #23]
 8024d64:	6939      	ldr	r1, [r7, #16]
 8024d66:	6878      	ldr	r0, [r7, #4]
 8024d68:	f7ff fee4 	bl	8024b34 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8024d6c:	687a      	ldr	r2, [r7, #4]
 8024d6e:	687b      	ldr	r3, [r7, #4]
 8024d70:	3304      	adds	r3, #4
 8024d72:	6939      	ldr	r1, [r7, #16]
 8024d74:	6878      	ldr	r0, [r7, #4]
 8024d76:	f7ff ff21 	bl	8024bbc <tcp_output_control_segment>
 8024d7a:	4603      	mov	r3, r0
 8024d7c:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8024d7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8024d82:	2b00      	cmp	r3, #0
 8024d84:	d007      	beq.n	8024d96 <tcp_send_empty_ack+0xa2>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8024d86:	687b      	ldr	r3, [r7, #4]
 8024d88:	8b5b      	ldrh	r3, [r3, #26]
 8024d8a:	f043 0303 	orr.w	r3, r3, #3
 8024d8e:	b29a      	uxth	r2, r3
 8024d90:	687b      	ldr	r3, [r7, #4]
 8024d92:	835a      	strh	r2, [r3, #26]
 8024d94:	e006      	b.n	8024da4 <tcp_send_empty_ack+0xb0>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8024d96:	687b      	ldr	r3, [r7, #4]
 8024d98:	8b5b      	ldrh	r3, [r3, #26]
 8024d9a:	f023 0303 	bic.w	r3, r3, #3
 8024d9e:	b29a      	uxth	r2, r3
 8024da0:	687b      	ldr	r3, [r7, #4]
 8024da2:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8024da4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8024da8:	4618      	mov	r0, r3
 8024daa:	371c      	adds	r7, #28
 8024dac:	46bd      	mov	sp, r7
 8024dae:	bd90      	pop	{r4, r7, pc}
 8024db0:	08029bfc 	.word	0x08029bfc
 8024db4:	0802a3b8 	.word	0x0802a3b8
 8024db8:	08029c50 	.word	0x08029c50

08024dbc <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8024dbc:	b590      	push	{r4, r7, lr}
 8024dbe:	b087      	sub	sp, #28
 8024dc0:	af00      	add	r7, sp, #0
 8024dc2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8024dc4:	2300      	movs	r3, #0
 8024dc6:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8024dc8:	687b      	ldr	r3, [r7, #4]
 8024dca:	2b00      	cmp	r3, #0
 8024dcc:	d106      	bne.n	8024ddc <tcp_keepalive+0x20>
 8024dce:	4b18      	ldr	r3, [pc, #96]	; (8024e30 <tcp_keepalive+0x74>)
 8024dd0:	f640 0224 	movw	r2, #2084	; 0x824
 8024dd4:	4917      	ldr	r1, [pc, #92]	; (8024e34 <tcp_keepalive+0x78>)
 8024dd6:	4818      	ldr	r0, [pc, #96]	; (8024e38 <tcp_keepalive+0x7c>)
 8024dd8:	f001 faaa 	bl	8026330 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8024ddc:	7dfb      	ldrb	r3, [r7, #23]
 8024dde:	b29c      	uxth	r4, r3
 8024de0:	687b      	ldr	r3, [r7, #4]
 8024de2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8024de4:	3b01      	subs	r3, #1
 8024de6:	4618      	mov	r0, r3
 8024de8:	f7f4 f9b3 	bl	8019152 <lwip_htonl>
 8024dec:	4603      	mov	r3, r0
 8024dee:	2200      	movs	r2, #0
 8024df0:	4621      	mov	r1, r4
 8024df2:	6878      	ldr	r0, [r7, #4]
 8024df4:	f7ff fe60 	bl	8024ab8 <tcp_output_alloc_header>
 8024df8:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8024dfa:	693b      	ldr	r3, [r7, #16]
 8024dfc:	2b00      	cmp	r3, #0
 8024dfe:	d102      	bne.n	8024e06 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8024e00:	f04f 33ff 	mov.w	r3, #4294967295
 8024e04:	e010      	b.n	8024e28 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8024e06:	7dfb      	ldrb	r3, [r7, #23]
 8024e08:	2200      	movs	r2, #0
 8024e0a:	6939      	ldr	r1, [r7, #16]
 8024e0c:	6878      	ldr	r0, [r7, #4]
 8024e0e:	f7ff fe91 	bl	8024b34 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8024e12:	687a      	ldr	r2, [r7, #4]
 8024e14:	687b      	ldr	r3, [r7, #4]
 8024e16:	3304      	adds	r3, #4
 8024e18:	6939      	ldr	r1, [r7, #16]
 8024e1a:	6878      	ldr	r0, [r7, #4]
 8024e1c:	f7ff fece 	bl	8024bbc <tcp_output_control_segment>
 8024e20:	4603      	mov	r3, r0
 8024e22:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8024e24:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8024e28:	4618      	mov	r0, r3
 8024e2a:	371c      	adds	r7, #28
 8024e2c:	46bd      	mov	sp, r7
 8024e2e:	bd90      	pop	{r4, r7, pc}
 8024e30:	08029bfc 	.word	0x08029bfc
 8024e34:	0802a3d8 	.word	0x0802a3d8
 8024e38:	08029c50 	.word	0x08029c50

08024e3c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8024e3c:	b590      	push	{r4, r7, lr}
 8024e3e:	b08b      	sub	sp, #44	; 0x2c
 8024e40:	af00      	add	r7, sp, #0
 8024e42:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8024e44:	2300      	movs	r3, #0
 8024e46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8024e4a:	687b      	ldr	r3, [r7, #4]
 8024e4c:	2b00      	cmp	r3, #0
 8024e4e:	d106      	bne.n	8024e5e <tcp_zero_window_probe+0x22>
 8024e50:	4b4c      	ldr	r3, [pc, #304]	; (8024f84 <tcp_zero_window_probe+0x148>)
 8024e52:	f640 024f 	movw	r2, #2127	; 0x84f
 8024e56:	494c      	ldr	r1, [pc, #304]	; (8024f88 <tcp_zero_window_probe+0x14c>)
 8024e58:	484c      	ldr	r0, [pc, #304]	; (8024f8c <tcp_zero_window_probe+0x150>)
 8024e5a:	f001 fa69 	bl	8026330 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8024e5e:	687b      	ldr	r3, [r7, #4]
 8024e60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8024e62:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8024e64:	6a3b      	ldr	r3, [r7, #32]
 8024e66:	2b00      	cmp	r3, #0
 8024e68:	d101      	bne.n	8024e6e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8024e6a:	2300      	movs	r3, #0
 8024e6c:	e086      	b.n	8024f7c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8024e6e:	687b      	ldr	r3, [r7, #4]
 8024e70:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 8024e74:	2bff      	cmp	r3, #255	; 0xff
 8024e76:	d007      	beq.n	8024e88 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8024e78:	687b      	ldr	r3, [r7, #4]
 8024e7a:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 8024e7e:	3301      	adds	r3, #1
 8024e80:	b2da      	uxtb	r2, r3
 8024e82:	687b      	ldr	r3, [r7, #4]
 8024e84:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8024e88:	6a3b      	ldr	r3, [r7, #32]
 8024e8a:	68db      	ldr	r3, [r3, #12]
 8024e8c:	899b      	ldrh	r3, [r3, #12]
 8024e8e:	b29b      	uxth	r3, r3
 8024e90:	4618      	mov	r0, r3
 8024e92:	f7f4 f949 	bl	8019128 <lwip_htons>
 8024e96:	4603      	mov	r3, r0
 8024e98:	b2db      	uxtb	r3, r3
 8024e9a:	f003 0301 	and.w	r3, r3, #1
 8024e9e:	2b00      	cmp	r3, #0
 8024ea0:	d005      	beq.n	8024eae <tcp_zero_window_probe+0x72>
 8024ea2:	6a3b      	ldr	r3, [r7, #32]
 8024ea4:	891b      	ldrh	r3, [r3, #8]
 8024ea6:	2b00      	cmp	r3, #0
 8024ea8:	d101      	bne.n	8024eae <tcp_zero_window_probe+0x72>
 8024eaa:	2301      	movs	r3, #1
 8024eac:	e000      	b.n	8024eb0 <tcp_zero_window_probe+0x74>
 8024eae:	2300      	movs	r3, #0
 8024eb0:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8024eb2:	7ffb      	ldrb	r3, [r7, #31]
 8024eb4:	2b00      	cmp	r3, #0
 8024eb6:	bf0c      	ite	eq
 8024eb8:	2301      	moveq	r3, #1
 8024eba:	2300      	movne	r3, #0
 8024ebc:	b2db      	uxtb	r3, r3
 8024ebe:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8024ec0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8024ec4:	b299      	uxth	r1, r3
 8024ec6:	6a3b      	ldr	r3, [r7, #32]
 8024ec8:	68db      	ldr	r3, [r3, #12]
 8024eca:	685b      	ldr	r3, [r3, #4]
 8024ecc:	8bba      	ldrh	r2, [r7, #28]
 8024ece:	6878      	ldr	r0, [r7, #4]
 8024ed0:	f7ff fdf2 	bl	8024ab8 <tcp_output_alloc_header>
 8024ed4:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8024ed6:	69bb      	ldr	r3, [r7, #24]
 8024ed8:	2b00      	cmp	r3, #0
 8024eda:	d102      	bne.n	8024ee2 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8024edc:	f04f 33ff 	mov.w	r3, #4294967295
 8024ee0:	e04c      	b.n	8024f7c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8024ee2:	69bb      	ldr	r3, [r7, #24]
 8024ee4:	685b      	ldr	r3, [r3, #4]
 8024ee6:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8024ee8:	7ffb      	ldrb	r3, [r7, #31]
 8024eea:	2b00      	cmp	r3, #0
 8024eec:	d011      	beq.n	8024f12 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8024eee:	697b      	ldr	r3, [r7, #20]
 8024ef0:	899b      	ldrh	r3, [r3, #12]
 8024ef2:	b29b      	uxth	r3, r3
 8024ef4:	b21b      	sxth	r3, r3
 8024ef6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8024efa:	b21c      	sxth	r4, r3
 8024efc:	2011      	movs	r0, #17
 8024efe:	f7f4 f913 	bl	8019128 <lwip_htons>
 8024f02:	4603      	mov	r3, r0
 8024f04:	b21b      	sxth	r3, r3
 8024f06:	4323      	orrs	r3, r4
 8024f08:	b21b      	sxth	r3, r3
 8024f0a:	b29a      	uxth	r2, r3
 8024f0c:	697b      	ldr	r3, [r7, #20]
 8024f0e:	819a      	strh	r2, [r3, #12]
 8024f10:	e010      	b.n	8024f34 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8024f12:	69bb      	ldr	r3, [r7, #24]
 8024f14:	685b      	ldr	r3, [r3, #4]
 8024f16:	3314      	adds	r3, #20
 8024f18:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8024f1a:	6a3b      	ldr	r3, [r7, #32]
 8024f1c:	6858      	ldr	r0, [r3, #4]
 8024f1e:	6a3b      	ldr	r3, [r7, #32]
 8024f20:	685b      	ldr	r3, [r3, #4]
 8024f22:	891a      	ldrh	r2, [r3, #8]
 8024f24:	6a3b      	ldr	r3, [r7, #32]
 8024f26:	891b      	ldrh	r3, [r3, #8]
 8024f28:	1ad3      	subs	r3, r2, r3
 8024f2a:	b29b      	uxth	r3, r3
 8024f2c:	2201      	movs	r2, #1
 8024f2e:	6939      	ldr	r1, [r7, #16]
 8024f30:	f7fa fa00 	bl	801f334 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8024f34:	6a3b      	ldr	r3, [r7, #32]
 8024f36:	68db      	ldr	r3, [r3, #12]
 8024f38:	685b      	ldr	r3, [r3, #4]
 8024f3a:	4618      	mov	r0, r3
 8024f3c:	f7f4 f909 	bl	8019152 <lwip_htonl>
 8024f40:	4603      	mov	r3, r0
 8024f42:	3301      	adds	r3, #1
 8024f44:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8024f46:	687b      	ldr	r3, [r7, #4]
 8024f48:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8024f4a:	68fb      	ldr	r3, [r7, #12]
 8024f4c:	1ad3      	subs	r3, r2, r3
 8024f4e:	2b00      	cmp	r3, #0
 8024f50:	da02      	bge.n	8024f58 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8024f52:	687b      	ldr	r3, [r7, #4]
 8024f54:	68fa      	ldr	r2, [r7, #12]
 8024f56:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8024f58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8024f5c:	2200      	movs	r2, #0
 8024f5e:	69b9      	ldr	r1, [r7, #24]
 8024f60:	6878      	ldr	r0, [r7, #4]
 8024f62:	f7ff fde7 	bl	8024b34 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8024f66:	687a      	ldr	r2, [r7, #4]
 8024f68:	687b      	ldr	r3, [r7, #4]
 8024f6a:	3304      	adds	r3, #4
 8024f6c:	69b9      	ldr	r1, [r7, #24]
 8024f6e:	6878      	ldr	r0, [r7, #4]
 8024f70:	f7ff fe24 	bl	8024bbc <tcp_output_control_segment>
 8024f74:	4603      	mov	r3, r0
 8024f76:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8024f78:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8024f7c:	4618      	mov	r0, r3
 8024f7e:	372c      	adds	r7, #44	; 0x2c
 8024f80:	46bd      	mov	sp, r7
 8024f82:	bd90      	pop	{r4, r7, pc}
 8024f84:	08029bfc 	.word	0x08029bfc
 8024f88:	0802a3f4 	.word	0x0802a3f4
 8024f8c:	08029c50 	.word	0x08029c50

08024f90 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8024f90:	b580      	push	{r7, lr}
 8024f92:	b082      	sub	sp, #8
 8024f94:	af00      	add	r7, sp, #0
 8024f96:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8024f98:	f7fa fc14 	bl	801f7c4 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8024f9c:	4b0a      	ldr	r3, [pc, #40]	; (8024fc8 <tcpip_tcp_timer+0x38>)
 8024f9e:	681b      	ldr	r3, [r3, #0]
 8024fa0:	2b00      	cmp	r3, #0
 8024fa2:	d103      	bne.n	8024fac <tcpip_tcp_timer+0x1c>
 8024fa4:	4b09      	ldr	r3, [pc, #36]	; (8024fcc <tcpip_tcp_timer+0x3c>)
 8024fa6:	681b      	ldr	r3, [r3, #0]
 8024fa8:	2b00      	cmp	r3, #0
 8024faa:	d005      	beq.n	8024fb8 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8024fac:	2200      	movs	r2, #0
 8024fae:	4908      	ldr	r1, [pc, #32]	; (8024fd0 <tcpip_tcp_timer+0x40>)
 8024fb0:	20fa      	movs	r0, #250	; 0xfa
 8024fb2:	f000 f8e5 	bl	8025180 <sys_timeout>
 8024fb6:	e002      	b.n	8024fbe <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8024fb8:	4b06      	ldr	r3, [pc, #24]	; (8024fd4 <tcpip_tcp_timer+0x44>)
 8024fba:	2200      	movs	r2, #0
 8024fbc:	601a      	str	r2, [r3, #0]
  }
}
 8024fbe:	bf00      	nop
 8024fc0:	3708      	adds	r7, #8
 8024fc2:	46bd      	mov	sp, r7
 8024fc4:	bd80      	pop	{r7, pc}
 8024fc6:	bf00      	nop
 8024fc8:	20022ab4 	.word	0x20022ab4
 8024fcc:	20022ac4 	.word	0x20022ac4
 8024fd0:	08024f91 	.word	0x08024f91
 8024fd4:	200196fc 	.word	0x200196fc

08024fd8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8024fd8:	b580      	push	{r7, lr}
 8024fda:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8024fdc:	4b0a      	ldr	r3, [pc, #40]	; (8025008 <tcp_timer_needed+0x30>)
 8024fde:	681b      	ldr	r3, [r3, #0]
 8024fe0:	2b00      	cmp	r3, #0
 8024fe2:	d10f      	bne.n	8025004 <tcp_timer_needed+0x2c>
 8024fe4:	4b09      	ldr	r3, [pc, #36]	; (802500c <tcp_timer_needed+0x34>)
 8024fe6:	681b      	ldr	r3, [r3, #0]
 8024fe8:	2b00      	cmp	r3, #0
 8024fea:	d103      	bne.n	8024ff4 <tcp_timer_needed+0x1c>
 8024fec:	4b08      	ldr	r3, [pc, #32]	; (8025010 <tcp_timer_needed+0x38>)
 8024fee:	681b      	ldr	r3, [r3, #0]
 8024ff0:	2b00      	cmp	r3, #0
 8024ff2:	d007      	beq.n	8025004 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8024ff4:	4b04      	ldr	r3, [pc, #16]	; (8025008 <tcp_timer_needed+0x30>)
 8024ff6:	2201      	movs	r2, #1
 8024ff8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8024ffa:	2200      	movs	r2, #0
 8024ffc:	4905      	ldr	r1, [pc, #20]	; (8025014 <tcp_timer_needed+0x3c>)
 8024ffe:	20fa      	movs	r0, #250	; 0xfa
 8025000:	f000 f8be 	bl	8025180 <sys_timeout>
  }
}
 8025004:	bf00      	nop
 8025006:	bd80      	pop	{r7, pc}
 8025008:	200196fc 	.word	0x200196fc
 802500c:	20022ab4 	.word	0x20022ab4
 8025010:	20022ac4 	.word	0x20022ac4
 8025014:	08024f91 	.word	0x08024f91

08025018 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8025018:	b580      	push	{r7, lr}
 802501a:	b086      	sub	sp, #24
 802501c:	af00      	add	r7, sp, #0
 802501e:	60f8      	str	r0, [r7, #12]
 8025020:	60b9      	str	r1, [r7, #8]
 8025022:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8025024:	200a      	movs	r0, #10
 8025026:	f7f9 f985 	bl	801e334 <memp_malloc>
 802502a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 802502c:	693b      	ldr	r3, [r7, #16]
 802502e:	2b00      	cmp	r3, #0
 8025030:	d109      	bne.n	8025046 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8025032:	693b      	ldr	r3, [r7, #16]
 8025034:	2b00      	cmp	r3, #0
 8025036:	d149      	bne.n	80250cc <sys_timeout_abs+0xb4>
 8025038:	4b26      	ldr	r3, [pc, #152]	; (80250d4 <sys_timeout_abs+0xbc>)
 802503a:	22be      	movs	r2, #190	; 0xbe
 802503c:	4926      	ldr	r1, [pc, #152]	; (80250d8 <sys_timeout_abs+0xc0>)
 802503e:	4827      	ldr	r0, [pc, #156]	; (80250dc <sys_timeout_abs+0xc4>)
 8025040:	f001 f976 	bl	8026330 <iprintf>
    return;
 8025044:	e042      	b.n	80250cc <sys_timeout_abs+0xb4>
  }

  timeout->next = NULL;
 8025046:	693b      	ldr	r3, [r7, #16]
 8025048:	2200      	movs	r2, #0
 802504a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 802504c:	693b      	ldr	r3, [r7, #16]
 802504e:	68ba      	ldr	r2, [r7, #8]
 8025050:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8025052:	693b      	ldr	r3, [r7, #16]
 8025054:	687a      	ldr	r2, [r7, #4]
 8025056:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8025058:	693b      	ldr	r3, [r7, #16]
 802505a:	68fa      	ldr	r2, [r7, #12]
 802505c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 802505e:	4b20      	ldr	r3, [pc, #128]	; (80250e0 <sys_timeout_abs+0xc8>)
 8025060:	681b      	ldr	r3, [r3, #0]
 8025062:	2b00      	cmp	r3, #0
 8025064:	d103      	bne.n	802506e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8025066:	4a1e      	ldr	r2, [pc, #120]	; (80250e0 <sys_timeout_abs+0xc8>)
 8025068:	693b      	ldr	r3, [r7, #16]
 802506a:	6013      	str	r3, [r2, #0]
    return;
 802506c:	e02f      	b.n	80250ce <sys_timeout_abs+0xb6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 802506e:	693b      	ldr	r3, [r7, #16]
 8025070:	685a      	ldr	r2, [r3, #4]
 8025072:	4b1b      	ldr	r3, [pc, #108]	; (80250e0 <sys_timeout_abs+0xc8>)
 8025074:	681b      	ldr	r3, [r3, #0]
 8025076:	685b      	ldr	r3, [r3, #4]
 8025078:	1ad3      	subs	r3, r2, r3
 802507a:	2b00      	cmp	r3, #0
 802507c:	da07      	bge.n	802508e <sys_timeout_abs+0x76>
    timeout->next = next_timeout;
 802507e:	4b18      	ldr	r3, [pc, #96]	; (80250e0 <sys_timeout_abs+0xc8>)
 8025080:	681a      	ldr	r2, [r3, #0]
 8025082:	693b      	ldr	r3, [r7, #16]
 8025084:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8025086:	4a16      	ldr	r2, [pc, #88]	; (80250e0 <sys_timeout_abs+0xc8>)
 8025088:	693b      	ldr	r3, [r7, #16]
 802508a:	6013      	str	r3, [r2, #0]
 802508c:	e01f      	b.n	80250ce <sys_timeout_abs+0xb6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 802508e:	4b14      	ldr	r3, [pc, #80]	; (80250e0 <sys_timeout_abs+0xc8>)
 8025090:	681b      	ldr	r3, [r3, #0]
 8025092:	617b      	str	r3, [r7, #20]
 8025094:	e016      	b.n	80250c4 <sys_timeout_abs+0xac>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8025096:	697b      	ldr	r3, [r7, #20]
 8025098:	681b      	ldr	r3, [r3, #0]
 802509a:	2b00      	cmp	r3, #0
 802509c:	d007      	beq.n	80250ae <sys_timeout_abs+0x96>
 802509e:	693b      	ldr	r3, [r7, #16]
 80250a0:	685a      	ldr	r2, [r3, #4]
 80250a2:	697b      	ldr	r3, [r7, #20]
 80250a4:	681b      	ldr	r3, [r3, #0]
 80250a6:	685b      	ldr	r3, [r3, #4]
 80250a8:	1ad3      	subs	r3, r2, r3
 80250aa:	2b00      	cmp	r3, #0
 80250ac:	da07      	bge.n	80250be <sys_timeout_abs+0xa6>
        timeout->next = t->next;
 80250ae:	697b      	ldr	r3, [r7, #20]
 80250b0:	681a      	ldr	r2, [r3, #0]
 80250b2:	693b      	ldr	r3, [r7, #16]
 80250b4:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80250b6:	697b      	ldr	r3, [r7, #20]
 80250b8:	693a      	ldr	r2, [r7, #16]
 80250ba:	601a      	str	r2, [r3, #0]
        break;
 80250bc:	e007      	b.n	80250ce <sys_timeout_abs+0xb6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80250be:	697b      	ldr	r3, [r7, #20]
 80250c0:	681b      	ldr	r3, [r3, #0]
 80250c2:	617b      	str	r3, [r7, #20]
 80250c4:	697b      	ldr	r3, [r7, #20]
 80250c6:	2b00      	cmp	r3, #0
 80250c8:	d1e5      	bne.n	8025096 <sys_timeout_abs+0x7e>
 80250ca:	e000      	b.n	80250ce <sys_timeout_abs+0xb6>
    return;
 80250cc:	bf00      	nop
      }
    }
  }
}
 80250ce:	3718      	adds	r7, #24
 80250d0:	46bd      	mov	sp, r7
 80250d2:	bd80      	pop	{r7, pc}
 80250d4:	0802a418 	.word	0x0802a418
 80250d8:	0802a44c 	.word	0x0802a44c
 80250dc:	0802a48c 	.word	0x0802a48c
 80250e0:	200196f4 	.word	0x200196f4

080250e4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80250e4:	b580      	push	{r7, lr}
 80250e6:	b086      	sub	sp, #24
 80250e8:	af00      	add	r7, sp, #0
 80250ea:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80250ec:	687b      	ldr	r3, [r7, #4]
 80250ee:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80250f0:	697b      	ldr	r3, [r7, #20]
 80250f2:	685b      	ldr	r3, [r3, #4]
 80250f4:	4798      	blx	r3

  now = sys_now();
 80250f6:	f7f0 fb1f 	bl	8015738 <sys_now>
 80250fa:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80250fc:	697b      	ldr	r3, [r7, #20]
 80250fe:	681a      	ldr	r2, [r3, #0]
 8025100:	4b0d      	ldr	r3, [pc, #52]	; (8025138 <lwip_cyclic_timer+0x54>)
 8025102:	681b      	ldr	r3, [r3, #0]
 8025104:	4413      	add	r3, r2
 8025106:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8025108:	68fa      	ldr	r2, [r7, #12]
 802510a:	693b      	ldr	r3, [r7, #16]
 802510c:	1ad3      	subs	r3, r2, r3
 802510e:	2b00      	cmp	r3, #0
 8025110:	da09      	bge.n	8025126 <lwip_cyclic_timer+0x42>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8025112:	697b      	ldr	r3, [r7, #20]
 8025114:	681a      	ldr	r2, [r3, #0]
 8025116:	693b      	ldr	r3, [r7, #16]
 8025118:	4413      	add	r3, r2
 802511a:	687a      	ldr	r2, [r7, #4]
 802511c:	4907      	ldr	r1, [pc, #28]	; (802513c <lwip_cyclic_timer+0x58>)
 802511e:	4618      	mov	r0, r3
 8025120:	f7ff ff7a 	bl	8025018 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8025124:	e004      	b.n	8025130 <lwip_cyclic_timer+0x4c>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8025126:	687a      	ldr	r2, [r7, #4]
 8025128:	4904      	ldr	r1, [pc, #16]	; (802513c <lwip_cyclic_timer+0x58>)
 802512a:	68f8      	ldr	r0, [r7, #12]
 802512c:	f7ff ff74 	bl	8025018 <sys_timeout_abs>
}
 8025130:	bf00      	nop
 8025132:	3718      	adds	r7, #24
 8025134:	46bd      	mov	sp, r7
 8025136:	bd80      	pop	{r7, pc}
 8025138:	200196f8 	.word	0x200196f8
 802513c:	080250e5 	.word	0x080250e5

08025140 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8025140:	b580      	push	{r7, lr}
 8025142:	b082      	sub	sp, #8
 8025144:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8025146:	2301      	movs	r3, #1
 8025148:	607b      	str	r3, [r7, #4]
 802514a:	e00e      	b.n	802516a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 802514c:	4a0a      	ldr	r2, [pc, #40]	; (8025178 <sys_timeouts_init+0x38>)
 802514e:	687b      	ldr	r3, [r7, #4]
 8025150:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8025154:	687b      	ldr	r3, [r7, #4]
 8025156:	00db      	lsls	r3, r3, #3
 8025158:	4a07      	ldr	r2, [pc, #28]	; (8025178 <sys_timeouts_init+0x38>)
 802515a:	4413      	add	r3, r2
 802515c:	461a      	mov	r2, r3
 802515e:	4907      	ldr	r1, [pc, #28]	; (802517c <sys_timeouts_init+0x3c>)
 8025160:	f000 f80e 	bl	8025180 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8025164:	687b      	ldr	r3, [r7, #4]
 8025166:	3301      	adds	r3, #1
 8025168:	607b      	str	r3, [r7, #4]
 802516a:	687b      	ldr	r3, [r7, #4]
 802516c:	2b05      	cmp	r3, #5
 802516e:	d9ed      	bls.n	802514c <sys_timeouts_init+0xc>
  }
}
 8025170:	bf00      	nop
 8025172:	3708      	adds	r7, #8
 8025174:	46bd      	mov	sp, r7
 8025176:	bd80      	pop	{r7, pc}
 8025178:	0802b830 	.word	0x0802b830
 802517c:	080250e5 	.word	0x080250e5

08025180 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8025180:	b580      	push	{r7, lr}
 8025182:	b086      	sub	sp, #24
 8025184:	af00      	add	r7, sp, #0
 8025186:	60f8      	str	r0, [r7, #12]
 8025188:	60b9      	str	r1, [r7, #8]
 802518a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 802518c:	68fb      	ldr	r3, [r7, #12]
 802518e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8025192:	d306      	bcc.n	80251a2 <sys_timeout+0x22>
 8025194:	4b0a      	ldr	r3, [pc, #40]	; (80251c0 <sys_timeout+0x40>)
 8025196:	f240 1229 	movw	r2, #297	; 0x129
 802519a:	490a      	ldr	r1, [pc, #40]	; (80251c4 <sys_timeout+0x44>)
 802519c:	480a      	ldr	r0, [pc, #40]	; (80251c8 <sys_timeout+0x48>)
 802519e:	f001 f8c7 	bl	8026330 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80251a2:	f7f0 fac9 	bl	8015738 <sys_now>
 80251a6:	4602      	mov	r2, r0
 80251a8:	68fb      	ldr	r3, [r7, #12]
 80251aa:	4413      	add	r3, r2
 80251ac:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80251ae:	687a      	ldr	r2, [r7, #4]
 80251b0:	68b9      	ldr	r1, [r7, #8]
 80251b2:	6978      	ldr	r0, [r7, #20]
 80251b4:	f7ff ff30 	bl	8025018 <sys_timeout_abs>
#endif
}
 80251b8:	bf00      	nop
 80251ba:	3718      	adds	r7, #24
 80251bc:	46bd      	mov	sp, r7
 80251be:	bd80      	pop	{r7, pc}
 80251c0:	0802a418 	.word	0x0802a418
 80251c4:	0802a4b4 	.word	0x0802a4b4
 80251c8:	0802a48c 	.word	0x0802a48c

080251cc <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80251cc:	b580      	push	{r7, lr}
 80251ce:	b084      	sub	sp, #16
 80251d0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 80251d2:	f7f0 fab1 	bl	8015738 <sys_now>
 80251d6:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 80251d8:	4b15      	ldr	r3, [pc, #84]	; (8025230 <sys_check_timeouts+0x64>)
 80251da:	681b      	ldr	r3, [r3, #0]
 80251dc:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80251de:	68bb      	ldr	r3, [r7, #8]
 80251e0:	2b00      	cmp	r3, #0
 80251e2:	d01e      	beq.n	8025222 <sys_check_timeouts+0x56>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80251e4:	68bb      	ldr	r3, [r7, #8]
 80251e6:	685b      	ldr	r3, [r3, #4]
 80251e8:	68fa      	ldr	r2, [r7, #12]
 80251ea:	1ad3      	subs	r3, r2, r3
 80251ec:	2b00      	cmp	r3, #0
 80251ee:	db1a      	blt.n	8025226 <sys_check_timeouts+0x5a>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 80251f0:	68bb      	ldr	r3, [r7, #8]
 80251f2:	681b      	ldr	r3, [r3, #0]
 80251f4:	4a0e      	ldr	r2, [pc, #56]	; (8025230 <sys_check_timeouts+0x64>)
 80251f6:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 80251f8:	68bb      	ldr	r3, [r7, #8]
 80251fa:	689b      	ldr	r3, [r3, #8]
 80251fc:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 80251fe:	68bb      	ldr	r3, [r7, #8]
 8025200:	68db      	ldr	r3, [r3, #12]
 8025202:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8025204:	68bb      	ldr	r3, [r7, #8]
 8025206:	685b      	ldr	r3, [r3, #4]
 8025208:	4a0a      	ldr	r2, [pc, #40]	; (8025234 <sys_check_timeouts+0x68>)
 802520a:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 802520c:	68b9      	ldr	r1, [r7, #8]
 802520e:	200a      	movs	r0, #10
 8025210:	f7f9 f8e2 	bl	801e3d8 <memp_free>
    if (handler != NULL) {
 8025214:	687b      	ldr	r3, [r7, #4]
 8025216:	2b00      	cmp	r3, #0
 8025218:	d0de      	beq.n	80251d8 <sys_check_timeouts+0xc>
      handler(arg);
 802521a:	687b      	ldr	r3, [r7, #4]
 802521c:	6838      	ldr	r0, [r7, #0]
 802521e:	4798      	blx	r3
  do {
 8025220:	e7da      	b.n	80251d8 <sys_check_timeouts+0xc>
      return;
 8025222:	bf00      	nop
 8025224:	e000      	b.n	8025228 <sys_check_timeouts+0x5c>
      return;
 8025226:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8025228:	3710      	adds	r7, #16
 802522a:	46bd      	mov	sp, r7
 802522c:	bd80      	pop	{r7, pc}
 802522e:	bf00      	nop
 8025230:	200196f4 	.word	0x200196f4
 8025234:	200196f8 	.word	0x200196f8

08025238 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8025238:	b580      	push	{r7, lr}
 802523a:	b082      	sub	sp, #8
 802523c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 802523e:	4b14      	ldr	r3, [pc, #80]	; (8025290 <sys_timeouts_sleeptime+0x58>)
 8025240:	681b      	ldr	r3, [r3, #0]
 8025242:	2b00      	cmp	r3, #0
 8025244:	d102      	bne.n	802524c <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8025246:	f04f 33ff 	mov.w	r3, #4294967295
 802524a:	e01c      	b.n	8025286 <sys_timeouts_sleeptime+0x4e>
  }
  now = sys_now();
 802524c:	f7f0 fa74 	bl	8015738 <sys_now>
 8025250:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8025252:	4b0f      	ldr	r3, [pc, #60]	; (8025290 <sys_timeouts_sleeptime+0x58>)
 8025254:	681b      	ldr	r3, [r3, #0]
 8025256:	685a      	ldr	r2, [r3, #4]
 8025258:	687b      	ldr	r3, [r7, #4]
 802525a:	1ad3      	subs	r3, r2, r3
 802525c:	2b00      	cmp	r3, #0
 802525e:	da01      	bge.n	8025264 <sys_timeouts_sleeptime+0x2c>
    return 0;
 8025260:	2300      	movs	r3, #0
 8025262:	e010      	b.n	8025286 <sys_timeouts_sleeptime+0x4e>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8025264:	4b0a      	ldr	r3, [pc, #40]	; (8025290 <sys_timeouts_sleeptime+0x58>)
 8025266:	681b      	ldr	r3, [r3, #0]
 8025268:	685a      	ldr	r2, [r3, #4]
 802526a:	687b      	ldr	r3, [r7, #4]
 802526c:	1ad3      	subs	r3, r2, r3
 802526e:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8025270:	683b      	ldr	r3, [r7, #0]
 8025272:	2b00      	cmp	r3, #0
 8025274:	da06      	bge.n	8025284 <sys_timeouts_sleeptime+0x4c>
 8025276:	4b07      	ldr	r3, [pc, #28]	; (8025294 <sys_timeouts_sleeptime+0x5c>)
 8025278:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 802527c:	4906      	ldr	r1, [pc, #24]	; (8025298 <sys_timeouts_sleeptime+0x60>)
 802527e:	4807      	ldr	r0, [pc, #28]	; (802529c <sys_timeouts_sleeptime+0x64>)
 8025280:	f001 f856 	bl	8026330 <iprintf>
    return ret;
 8025284:	683b      	ldr	r3, [r7, #0]
  }
}
 8025286:	4618      	mov	r0, r3
 8025288:	3708      	adds	r7, #8
 802528a:	46bd      	mov	sp, r7
 802528c:	bd80      	pop	{r7, pc}
 802528e:	bf00      	nop
 8025290:	200196f4 	.word	0x200196f4
 8025294:	0802a418 	.word	0x0802a418
 8025298:	0802a4ec 	.word	0x0802a4ec
 802529c:	0802a48c 	.word	0x0802a48c

080252a0 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80252a0:	b580      	push	{r7, lr}
 80252a2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80252a4:	f001 f8c0 	bl	8026428 <rand>
 80252a8:	4603      	mov	r3, r0
 80252aa:	b29b      	uxth	r3, r3
 80252ac:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80252b0:	b29b      	uxth	r3, r3
 80252b2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80252b6:	b29a      	uxth	r2, r3
 80252b8:	4b01      	ldr	r3, [pc, #4]	; (80252c0 <udp_init+0x20>)
 80252ba:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80252bc:	bf00      	nop
 80252be:	bd80      	pop	{r7, pc}
 80252c0:	2000001c 	.word	0x2000001c

080252c4 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 80252c4:	b480      	push	{r7}
 80252c6:	b083      	sub	sp, #12
 80252c8:	af00      	add	r7, sp, #0
  u16_t n = 0;
 80252ca:	2300      	movs	r3, #0
 80252cc:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80252ce:	4b17      	ldr	r3, [pc, #92]	; (802532c <udp_new_port+0x68>)
 80252d0:	881b      	ldrh	r3, [r3, #0]
 80252d2:	1c5a      	adds	r2, r3, #1
 80252d4:	b291      	uxth	r1, r2
 80252d6:	4a15      	ldr	r2, [pc, #84]	; (802532c <udp_new_port+0x68>)
 80252d8:	8011      	strh	r1, [r2, #0]
 80252da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80252de:	4293      	cmp	r3, r2
 80252e0:	d103      	bne.n	80252ea <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80252e2:	4b12      	ldr	r3, [pc, #72]	; (802532c <udp_new_port+0x68>)
 80252e4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80252e8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80252ea:	4b11      	ldr	r3, [pc, #68]	; (8025330 <udp_new_port+0x6c>)
 80252ec:	681b      	ldr	r3, [r3, #0]
 80252ee:	603b      	str	r3, [r7, #0]
 80252f0:	e011      	b.n	8025316 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 80252f2:	683b      	ldr	r3, [r7, #0]
 80252f4:	8a5a      	ldrh	r2, [r3, #18]
 80252f6:	4b0d      	ldr	r3, [pc, #52]	; (802532c <udp_new_port+0x68>)
 80252f8:	881b      	ldrh	r3, [r3, #0]
 80252fa:	429a      	cmp	r2, r3
 80252fc:	d108      	bne.n	8025310 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80252fe:	88fb      	ldrh	r3, [r7, #6]
 8025300:	3301      	adds	r3, #1
 8025302:	80fb      	strh	r3, [r7, #6]
 8025304:	88fb      	ldrh	r3, [r7, #6]
 8025306:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 802530a:	d3e0      	bcc.n	80252ce <udp_new_port+0xa>
        return 0;
 802530c:	2300      	movs	r3, #0
 802530e:	e007      	b.n	8025320 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8025310:	683b      	ldr	r3, [r7, #0]
 8025312:	68db      	ldr	r3, [r3, #12]
 8025314:	603b      	str	r3, [r7, #0]
 8025316:	683b      	ldr	r3, [r7, #0]
 8025318:	2b00      	cmp	r3, #0
 802531a:	d1ea      	bne.n	80252f2 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 802531c:	4b03      	ldr	r3, [pc, #12]	; (802532c <udp_new_port+0x68>)
 802531e:	881b      	ldrh	r3, [r3, #0]
}
 8025320:	4618      	mov	r0, r3
 8025322:	370c      	adds	r7, #12
 8025324:	46bd      	mov	sp, r7
 8025326:	f85d 7b04 	ldr.w	r7, [sp], #4
 802532a:	4770      	bx	lr
 802532c:	2000001c 	.word	0x2000001c
 8025330:	20022acc 	.word	0x20022acc

08025334 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8025334:	b580      	push	{r7, lr}
 8025336:	b084      	sub	sp, #16
 8025338:	af00      	add	r7, sp, #0
 802533a:	60f8      	str	r0, [r7, #12]
 802533c:	60b9      	str	r1, [r7, #8]
 802533e:	4613      	mov	r3, r2
 8025340:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8025342:	68fb      	ldr	r3, [r7, #12]
 8025344:	2b00      	cmp	r3, #0
 8025346:	d105      	bne.n	8025354 <udp_input_local_match+0x20>
 8025348:	4b27      	ldr	r3, [pc, #156]	; (80253e8 <udp_input_local_match+0xb4>)
 802534a:	2287      	movs	r2, #135	; 0x87
 802534c:	4927      	ldr	r1, [pc, #156]	; (80253ec <udp_input_local_match+0xb8>)
 802534e:	4828      	ldr	r0, [pc, #160]	; (80253f0 <udp_input_local_match+0xbc>)
 8025350:	f000 ffee 	bl	8026330 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8025354:	68bb      	ldr	r3, [r7, #8]
 8025356:	2b00      	cmp	r3, #0
 8025358:	d105      	bne.n	8025366 <udp_input_local_match+0x32>
 802535a:	4b23      	ldr	r3, [pc, #140]	; (80253e8 <udp_input_local_match+0xb4>)
 802535c:	2288      	movs	r2, #136	; 0x88
 802535e:	4925      	ldr	r1, [pc, #148]	; (80253f4 <udp_input_local_match+0xc0>)
 8025360:	4823      	ldr	r0, [pc, #140]	; (80253f0 <udp_input_local_match+0xbc>)
 8025362:	f000 ffe5 	bl	8026330 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8025366:	68fb      	ldr	r3, [r7, #12]
 8025368:	7a1b      	ldrb	r3, [r3, #8]
 802536a:	2b00      	cmp	r3, #0
 802536c:	d00b      	beq.n	8025386 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 802536e:	68fb      	ldr	r3, [r7, #12]
 8025370:	7a1a      	ldrb	r2, [r3, #8]
 8025372:	4b21      	ldr	r3, [pc, #132]	; (80253f8 <udp_input_local_match+0xc4>)
 8025374:	685b      	ldr	r3, [r3, #4]
 8025376:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 802537a:	3301      	adds	r3, #1
 802537c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 802537e:	429a      	cmp	r2, r3
 8025380:	d001      	beq.n	8025386 <udp_input_local_match+0x52>
    return 0;
 8025382:	2300      	movs	r3, #0
 8025384:	e02b      	b.n	80253de <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8025386:	79fb      	ldrb	r3, [r7, #7]
 8025388:	2b00      	cmp	r3, #0
 802538a:	d018      	beq.n	80253be <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 802538c:	68fb      	ldr	r3, [r7, #12]
 802538e:	2b00      	cmp	r3, #0
 8025390:	d013      	beq.n	80253ba <udp_input_local_match+0x86>
 8025392:	68fb      	ldr	r3, [r7, #12]
 8025394:	681b      	ldr	r3, [r3, #0]
 8025396:	2b00      	cmp	r3, #0
 8025398:	d00f      	beq.n	80253ba <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 802539a:	4b17      	ldr	r3, [pc, #92]	; (80253f8 <udp_input_local_match+0xc4>)
 802539c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 802539e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80253a2:	d00a      	beq.n	80253ba <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80253a4:	68fb      	ldr	r3, [r7, #12]
 80253a6:	681a      	ldr	r2, [r3, #0]
 80253a8:	4b13      	ldr	r3, [pc, #76]	; (80253f8 <udp_input_local_match+0xc4>)
 80253aa:	695b      	ldr	r3, [r3, #20]
 80253ac:	405a      	eors	r2, r3
 80253ae:	68bb      	ldr	r3, [r7, #8]
 80253b0:	3308      	adds	r3, #8
 80253b2:	681b      	ldr	r3, [r3, #0]
 80253b4:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80253b6:	2b00      	cmp	r3, #0
 80253b8:	d110      	bne.n	80253dc <udp_input_local_match+0xa8>
          return 1;
 80253ba:	2301      	movs	r3, #1
 80253bc:	e00f      	b.n	80253de <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80253be:	68fb      	ldr	r3, [r7, #12]
 80253c0:	2b00      	cmp	r3, #0
 80253c2:	d009      	beq.n	80253d8 <udp_input_local_match+0xa4>
 80253c4:	68fb      	ldr	r3, [r7, #12]
 80253c6:	681b      	ldr	r3, [r3, #0]
 80253c8:	2b00      	cmp	r3, #0
 80253ca:	d005      	beq.n	80253d8 <udp_input_local_match+0xa4>
 80253cc:	68fb      	ldr	r3, [r7, #12]
 80253ce:	681a      	ldr	r2, [r3, #0]
 80253d0:	4b09      	ldr	r3, [pc, #36]	; (80253f8 <udp_input_local_match+0xc4>)
 80253d2:	695b      	ldr	r3, [r3, #20]
 80253d4:	429a      	cmp	r2, r3
 80253d6:	d101      	bne.n	80253dc <udp_input_local_match+0xa8>
        return 1;
 80253d8:	2301      	movs	r3, #1
 80253da:	e000      	b.n	80253de <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80253dc:	2300      	movs	r3, #0
}
 80253de:	4618      	mov	r0, r3
 80253e0:	3710      	adds	r7, #16
 80253e2:	46bd      	mov	sp, r7
 80253e4:	bd80      	pop	{r7, pc}
 80253e6:	bf00      	nop
 80253e8:	0802a500 	.word	0x0802a500
 80253ec:	0802a530 	.word	0x0802a530
 80253f0:	0802a554 	.word	0x0802a554
 80253f4:	0802a57c 	.word	0x0802a57c
 80253f8:	2001c9fc 	.word	0x2001c9fc

080253fc <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80253fc:	b590      	push	{r4, r7, lr}
 80253fe:	b08d      	sub	sp, #52	; 0x34
 8025400:	af02      	add	r7, sp, #8
 8025402:	6078      	str	r0, [r7, #4]
 8025404:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8025406:	2300      	movs	r3, #0
 8025408:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 802540a:	687b      	ldr	r3, [r7, #4]
 802540c:	2b00      	cmp	r3, #0
 802540e:	d105      	bne.n	802541c <udp_input+0x20>
 8025410:	4b7c      	ldr	r3, [pc, #496]	; (8025604 <udp_input+0x208>)
 8025412:	22cf      	movs	r2, #207	; 0xcf
 8025414:	497c      	ldr	r1, [pc, #496]	; (8025608 <udp_input+0x20c>)
 8025416:	487d      	ldr	r0, [pc, #500]	; (802560c <udp_input+0x210>)
 8025418:	f000 ff8a 	bl	8026330 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 802541c:	683b      	ldr	r3, [r7, #0]
 802541e:	2b00      	cmp	r3, #0
 8025420:	d105      	bne.n	802542e <udp_input+0x32>
 8025422:	4b78      	ldr	r3, [pc, #480]	; (8025604 <udp_input+0x208>)
 8025424:	22d0      	movs	r2, #208	; 0xd0
 8025426:	497a      	ldr	r1, [pc, #488]	; (8025610 <udp_input+0x214>)
 8025428:	4878      	ldr	r0, [pc, #480]	; (802560c <udp_input+0x210>)
 802542a:	f000 ff81 	bl	8026330 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 802542e:	687b      	ldr	r3, [r7, #4]
 8025430:	895b      	ldrh	r3, [r3, #10]
 8025432:	2b07      	cmp	r3, #7
 8025434:	d803      	bhi.n	802543e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8025436:	6878      	ldr	r0, [r7, #4]
 8025438:	f7f9 fd76 	bl	801ef28 <pbuf_free>
    goto end;
 802543c:	e0de      	b.n	80255fc <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 802543e:	687b      	ldr	r3, [r7, #4]
 8025440:	685b      	ldr	r3, [r3, #4]
 8025442:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8025444:	4b73      	ldr	r3, [pc, #460]	; (8025614 <udp_input+0x218>)
 8025446:	695a      	ldr	r2, [r3, #20]
 8025448:	4b72      	ldr	r3, [pc, #456]	; (8025614 <udp_input+0x218>)
 802544a:	681b      	ldr	r3, [r3, #0]
 802544c:	4619      	mov	r1, r3
 802544e:	4610      	mov	r0, r2
 8025450:	f7f7 fc8a 	bl	801cd68 <ip4_addr_isbroadcast_u32>
 8025454:	4603      	mov	r3, r0
 8025456:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8025458:	697b      	ldr	r3, [r7, #20]
 802545a:	881b      	ldrh	r3, [r3, #0]
 802545c:	b29b      	uxth	r3, r3
 802545e:	4618      	mov	r0, r3
 8025460:	f7f3 fe62 	bl	8019128 <lwip_htons>
 8025464:	4603      	mov	r3, r0
 8025466:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8025468:	697b      	ldr	r3, [r7, #20]
 802546a:	885b      	ldrh	r3, [r3, #2]
 802546c:	b29b      	uxth	r3, r3
 802546e:	4618      	mov	r0, r3
 8025470:	f7f3 fe5a 	bl	8019128 <lwip_htons>
 8025474:	4603      	mov	r3, r0
 8025476:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8025478:	2300      	movs	r3, #0
 802547a:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 802547c:	2300      	movs	r3, #0
 802547e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8025480:	2300      	movs	r3, #0
 8025482:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8025484:	4b64      	ldr	r3, [pc, #400]	; (8025618 <udp_input+0x21c>)
 8025486:	681b      	ldr	r3, [r3, #0]
 8025488:	627b      	str	r3, [r7, #36]	; 0x24
 802548a:	e054      	b.n	8025536 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 802548c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802548e:	8a5b      	ldrh	r3, [r3, #18]
 8025490:	89fa      	ldrh	r2, [r7, #14]
 8025492:	429a      	cmp	r2, r3
 8025494:	d14a      	bne.n	802552c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8025496:	7cfb      	ldrb	r3, [r7, #19]
 8025498:	461a      	mov	r2, r3
 802549a:	6839      	ldr	r1, [r7, #0]
 802549c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802549e:	f7ff ff49 	bl	8025334 <udp_input_local_match>
 80254a2:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80254a4:	2b00      	cmp	r3, #0
 80254a6:	d041      	beq.n	802552c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80254a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80254aa:	7c1b      	ldrb	r3, [r3, #16]
 80254ac:	f003 0304 	and.w	r3, r3, #4
 80254b0:	2b00      	cmp	r3, #0
 80254b2:	d11d      	bne.n	80254f0 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80254b4:	69fb      	ldr	r3, [r7, #28]
 80254b6:	2b00      	cmp	r3, #0
 80254b8:	d102      	bne.n	80254c0 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80254ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80254bc:	61fb      	str	r3, [r7, #28]
 80254be:	e017      	b.n	80254f0 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80254c0:	7cfb      	ldrb	r3, [r7, #19]
 80254c2:	2b00      	cmp	r3, #0
 80254c4:	d014      	beq.n	80254f0 <udp_input+0xf4>
 80254c6:	4b53      	ldr	r3, [pc, #332]	; (8025614 <udp_input+0x218>)
 80254c8:	695b      	ldr	r3, [r3, #20]
 80254ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80254ce:	d10f      	bne.n	80254f0 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80254d0:	69fb      	ldr	r3, [r7, #28]
 80254d2:	681a      	ldr	r2, [r3, #0]
 80254d4:	683b      	ldr	r3, [r7, #0]
 80254d6:	3304      	adds	r3, #4
 80254d8:	681b      	ldr	r3, [r3, #0]
 80254da:	429a      	cmp	r2, r3
 80254dc:	d008      	beq.n	80254f0 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80254de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80254e0:	681a      	ldr	r2, [r3, #0]
 80254e2:	683b      	ldr	r3, [r7, #0]
 80254e4:	3304      	adds	r3, #4
 80254e6:	681b      	ldr	r3, [r3, #0]
 80254e8:	429a      	cmp	r2, r3
 80254ea:	d101      	bne.n	80254f0 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80254ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80254ee:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80254f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80254f2:	8a9b      	ldrh	r3, [r3, #20]
 80254f4:	8a3a      	ldrh	r2, [r7, #16]
 80254f6:	429a      	cmp	r2, r3
 80254f8:	d118      	bne.n	802552c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80254fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80254fc:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80254fe:	2b00      	cmp	r3, #0
 8025500:	d005      	beq.n	802550e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8025502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025504:	685a      	ldr	r2, [r3, #4]
 8025506:	4b43      	ldr	r3, [pc, #268]	; (8025614 <udp_input+0x218>)
 8025508:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 802550a:	429a      	cmp	r2, r3
 802550c:	d10e      	bne.n	802552c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 802550e:	6a3b      	ldr	r3, [r7, #32]
 8025510:	2b00      	cmp	r3, #0
 8025512:	d014      	beq.n	802553e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8025514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025516:	68da      	ldr	r2, [r3, #12]
 8025518:	6a3b      	ldr	r3, [r7, #32]
 802551a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 802551c:	4b3e      	ldr	r3, [pc, #248]	; (8025618 <udp_input+0x21c>)
 802551e:	681a      	ldr	r2, [r3, #0]
 8025520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025522:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8025524:	4a3c      	ldr	r2, [pc, #240]	; (8025618 <udp_input+0x21c>)
 8025526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025528:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 802552a:	e008      	b.n	802553e <udp_input+0x142>
      }
    }

    prev = pcb;
 802552c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802552e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8025530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025532:	68db      	ldr	r3, [r3, #12]
 8025534:	627b      	str	r3, [r7, #36]	; 0x24
 8025536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025538:	2b00      	cmp	r3, #0
 802553a:	d1a7      	bne.n	802548c <udp_input+0x90>
 802553c:	e000      	b.n	8025540 <udp_input+0x144>
        break;
 802553e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8025540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025542:	2b00      	cmp	r3, #0
 8025544:	d101      	bne.n	802554a <udp_input+0x14e>
    pcb = uncon_pcb;
 8025546:	69fb      	ldr	r3, [r7, #28]
 8025548:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 802554a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802554c:	2b00      	cmp	r3, #0
 802554e:	d002      	beq.n	8025556 <udp_input+0x15a>
    for_us = 1;
 8025550:	2301      	movs	r3, #1
 8025552:	76fb      	strb	r3, [r7, #27]
 8025554:	e00a      	b.n	802556c <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8025556:	683b      	ldr	r3, [r7, #0]
 8025558:	3304      	adds	r3, #4
 802555a:	681a      	ldr	r2, [r3, #0]
 802555c:	4b2d      	ldr	r3, [pc, #180]	; (8025614 <udp_input+0x218>)
 802555e:	695b      	ldr	r3, [r3, #20]
 8025560:	429a      	cmp	r2, r3
 8025562:	bf0c      	ite	eq
 8025564:	2301      	moveq	r3, #1
 8025566:	2300      	movne	r3, #0
 8025568:	b2db      	uxtb	r3, r3
 802556a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 802556c:	7efb      	ldrb	r3, [r7, #27]
 802556e:	2b00      	cmp	r3, #0
 8025570:	d041      	beq.n	80255f6 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8025572:	2108      	movs	r1, #8
 8025574:	6878      	ldr	r0, [r7, #4]
 8025576:	f7f9 fc51 	bl	801ee1c <pbuf_remove_header>
 802557a:	4603      	mov	r3, r0
 802557c:	2b00      	cmp	r3, #0
 802557e:	d00a      	beq.n	8025596 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8025580:	4b20      	ldr	r3, [pc, #128]	; (8025604 <udp_input+0x208>)
 8025582:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8025586:	4925      	ldr	r1, [pc, #148]	; (802561c <udp_input+0x220>)
 8025588:	4820      	ldr	r0, [pc, #128]	; (802560c <udp_input+0x210>)
 802558a:	f000 fed1 	bl	8026330 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 802558e:	6878      	ldr	r0, [r7, #4]
 8025590:	f7f9 fcca 	bl	801ef28 <pbuf_free>
      goto end;
 8025594:	e032      	b.n	80255fc <udp_input+0x200>
    }

    if (pcb != NULL) {
 8025596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025598:	2b00      	cmp	r3, #0
 802559a:	d012      	beq.n	80255c2 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 802559c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802559e:	699b      	ldr	r3, [r3, #24]
 80255a0:	2b00      	cmp	r3, #0
 80255a2:	d00a      	beq.n	80255ba <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80255a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80255a6:	699c      	ldr	r4, [r3, #24]
 80255a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80255aa:	69d8      	ldr	r0, [r3, #28]
 80255ac:	8a3b      	ldrh	r3, [r7, #16]
 80255ae:	9300      	str	r3, [sp, #0]
 80255b0:	4b1b      	ldr	r3, [pc, #108]	; (8025620 <udp_input+0x224>)
 80255b2:	687a      	ldr	r2, [r7, #4]
 80255b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80255b6:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80255b8:	e021      	b.n	80255fe <udp_input+0x202>
        pbuf_free(p);
 80255ba:	6878      	ldr	r0, [r7, #4]
 80255bc:	f7f9 fcb4 	bl	801ef28 <pbuf_free>
        goto end;
 80255c0:	e01c      	b.n	80255fc <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80255c2:	7cfb      	ldrb	r3, [r7, #19]
 80255c4:	2b00      	cmp	r3, #0
 80255c6:	d112      	bne.n	80255ee <udp_input+0x1f2>
 80255c8:	4b12      	ldr	r3, [pc, #72]	; (8025614 <udp_input+0x218>)
 80255ca:	695b      	ldr	r3, [r3, #20]
 80255cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80255d0:	2be0      	cmp	r3, #224	; 0xe0
 80255d2:	d00c      	beq.n	80255ee <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80255d4:	4b0f      	ldr	r3, [pc, #60]	; (8025614 <udp_input+0x218>)
 80255d6:	899b      	ldrh	r3, [r3, #12]
 80255d8:	3308      	adds	r3, #8
 80255da:	b29b      	uxth	r3, r3
 80255dc:	b21b      	sxth	r3, r3
 80255de:	4619      	mov	r1, r3
 80255e0:	6878      	ldr	r0, [r7, #4]
 80255e2:	f7f9 fc8e 	bl	801ef02 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80255e6:	2103      	movs	r1, #3
 80255e8:	6878      	ldr	r0, [r7, #4]
 80255ea:	f7f7 f887 	bl	801c6fc <icmp_dest_unreach>
      pbuf_free(p);
 80255ee:	6878      	ldr	r0, [r7, #4]
 80255f0:	f7f9 fc9a 	bl	801ef28 <pbuf_free>
  return;
 80255f4:	e003      	b.n	80255fe <udp_input+0x202>
    pbuf_free(p);
 80255f6:	6878      	ldr	r0, [r7, #4]
 80255f8:	f7f9 fc96 	bl	801ef28 <pbuf_free>
  return;
 80255fc:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80255fe:	372c      	adds	r7, #44	; 0x2c
 8025600:	46bd      	mov	sp, r7
 8025602:	bd90      	pop	{r4, r7, pc}
 8025604:	0802a500 	.word	0x0802a500
 8025608:	0802a5a4 	.word	0x0802a5a4
 802560c:	0802a554 	.word	0x0802a554
 8025610:	0802a5bc 	.word	0x0802a5bc
 8025614:	2001c9fc 	.word	0x2001c9fc
 8025618:	20022acc 	.word	0x20022acc
 802561c:	0802a5d8 	.word	0x0802a5d8
 8025620:	2001ca0c 	.word	0x2001ca0c

08025624 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8025624:	b580      	push	{r7, lr}
 8025626:	b088      	sub	sp, #32
 8025628:	af02      	add	r7, sp, #8
 802562a:	60f8      	str	r0, [r7, #12]
 802562c:	60b9      	str	r1, [r7, #8]
 802562e:	607a      	str	r2, [r7, #4]
 8025630:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8025632:	68fb      	ldr	r3, [r7, #12]
 8025634:	2b00      	cmp	r3, #0
 8025636:	d109      	bne.n	802564c <udp_sendto+0x28>
 8025638:	4b23      	ldr	r3, [pc, #140]	; (80256c8 <udp_sendto+0xa4>)
 802563a:	f44f 7206 	mov.w	r2, #536	; 0x218
 802563e:	4923      	ldr	r1, [pc, #140]	; (80256cc <udp_sendto+0xa8>)
 8025640:	4823      	ldr	r0, [pc, #140]	; (80256d0 <udp_sendto+0xac>)
 8025642:	f000 fe75 	bl	8026330 <iprintf>
 8025646:	f06f 030f 	mvn.w	r3, #15
 802564a:	e038      	b.n	80256be <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 802564c:	68bb      	ldr	r3, [r7, #8]
 802564e:	2b00      	cmp	r3, #0
 8025650:	d109      	bne.n	8025666 <udp_sendto+0x42>
 8025652:	4b1d      	ldr	r3, [pc, #116]	; (80256c8 <udp_sendto+0xa4>)
 8025654:	f240 2219 	movw	r2, #537	; 0x219
 8025658:	491e      	ldr	r1, [pc, #120]	; (80256d4 <udp_sendto+0xb0>)
 802565a:	481d      	ldr	r0, [pc, #116]	; (80256d0 <udp_sendto+0xac>)
 802565c:	f000 fe68 	bl	8026330 <iprintf>
 8025660:	f06f 030f 	mvn.w	r3, #15
 8025664:	e02b      	b.n	80256be <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8025666:	687b      	ldr	r3, [r7, #4]
 8025668:	2b00      	cmp	r3, #0
 802566a:	d109      	bne.n	8025680 <udp_sendto+0x5c>
 802566c:	4b16      	ldr	r3, [pc, #88]	; (80256c8 <udp_sendto+0xa4>)
 802566e:	f240 221a 	movw	r2, #538	; 0x21a
 8025672:	4919      	ldr	r1, [pc, #100]	; (80256d8 <udp_sendto+0xb4>)
 8025674:	4816      	ldr	r0, [pc, #88]	; (80256d0 <udp_sendto+0xac>)
 8025676:	f000 fe5b 	bl	8026330 <iprintf>
 802567a:	f06f 030f 	mvn.w	r3, #15
 802567e:	e01e      	b.n	80256be <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8025680:	68fb      	ldr	r3, [r7, #12]
 8025682:	7a1b      	ldrb	r3, [r3, #8]
 8025684:	2b00      	cmp	r3, #0
 8025686:	d006      	beq.n	8025696 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8025688:	68fb      	ldr	r3, [r7, #12]
 802568a:	7a1b      	ldrb	r3, [r3, #8]
 802568c:	4618      	mov	r0, r3
 802568e:	f7f9 f919 	bl	801e8c4 <netif_get_by_index>
 8025692:	6178      	str	r0, [r7, #20]
 8025694:	e003      	b.n	802569e <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8025696:	6878      	ldr	r0, [r7, #4]
 8025698:	f7f7 f8ba 	bl	801c810 <ip4_route>
 802569c:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 802569e:	697b      	ldr	r3, [r7, #20]
 80256a0:	2b00      	cmp	r3, #0
 80256a2:	d102      	bne.n	80256aa <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 80256a4:	f06f 0303 	mvn.w	r3, #3
 80256a8:	e009      	b.n	80256be <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 80256aa:	887a      	ldrh	r2, [r7, #2]
 80256ac:	697b      	ldr	r3, [r7, #20]
 80256ae:	9300      	str	r3, [sp, #0]
 80256b0:	4613      	mov	r3, r2
 80256b2:	687a      	ldr	r2, [r7, #4]
 80256b4:	68b9      	ldr	r1, [r7, #8]
 80256b6:	68f8      	ldr	r0, [r7, #12]
 80256b8:	f000 f810 	bl	80256dc <udp_sendto_if>
 80256bc:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80256be:	4618      	mov	r0, r3
 80256c0:	3718      	adds	r7, #24
 80256c2:	46bd      	mov	sp, r7
 80256c4:	bd80      	pop	{r7, pc}
 80256c6:	bf00      	nop
 80256c8:	0802a500 	.word	0x0802a500
 80256cc:	0802a624 	.word	0x0802a624
 80256d0:	0802a554 	.word	0x0802a554
 80256d4:	0802a63c 	.word	0x0802a63c
 80256d8:	0802a658 	.word	0x0802a658

080256dc <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 80256dc:	b580      	push	{r7, lr}
 80256de:	b088      	sub	sp, #32
 80256e0:	af02      	add	r7, sp, #8
 80256e2:	60f8      	str	r0, [r7, #12]
 80256e4:	60b9      	str	r1, [r7, #8]
 80256e6:	607a      	str	r2, [r7, #4]
 80256e8:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 80256ea:	68fb      	ldr	r3, [r7, #12]
 80256ec:	2b00      	cmp	r3, #0
 80256ee:	d109      	bne.n	8025704 <udp_sendto_if+0x28>
 80256f0:	4b2e      	ldr	r3, [pc, #184]	; (80257ac <udp_sendto_if+0xd0>)
 80256f2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80256f6:	492e      	ldr	r1, [pc, #184]	; (80257b0 <udp_sendto_if+0xd4>)
 80256f8:	482e      	ldr	r0, [pc, #184]	; (80257b4 <udp_sendto_if+0xd8>)
 80256fa:	f000 fe19 	bl	8026330 <iprintf>
 80256fe:	f06f 030f 	mvn.w	r3, #15
 8025702:	e04f      	b.n	80257a4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8025704:	68bb      	ldr	r3, [r7, #8]
 8025706:	2b00      	cmp	r3, #0
 8025708:	d109      	bne.n	802571e <udp_sendto_if+0x42>
 802570a:	4b28      	ldr	r3, [pc, #160]	; (80257ac <udp_sendto_if+0xd0>)
 802570c:	f240 2281 	movw	r2, #641	; 0x281
 8025710:	4929      	ldr	r1, [pc, #164]	; (80257b8 <udp_sendto_if+0xdc>)
 8025712:	4828      	ldr	r0, [pc, #160]	; (80257b4 <udp_sendto_if+0xd8>)
 8025714:	f000 fe0c 	bl	8026330 <iprintf>
 8025718:	f06f 030f 	mvn.w	r3, #15
 802571c:	e042      	b.n	80257a4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 802571e:	687b      	ldr	r3, [r7, #4]
 8025720:	2b00      	cmp	r3, #0
 8025722:	d109      	bne.n	8025738 <udp_sendto_if+0x5c>
 8025724:	4b21      	ldr	r3, [pc, #132]	; (80257ac <udp_sendto_if+0xd0>)
 8025726:	f240 2282 	movw	r2, #642	; 0x282
 802572a:	4924      	ldr	r1, [pc, #144]	; (80257bc <udp_sendto_if+0xe0>)
 802572c:	4821      	ldr	r0, [pc, #132]	; (80257b4 <udp_sendto_if+0xd8>)
 802572e:	f000 fdff 	bl	8026330 <iprintf>
 8025732:	f06f 030f 	mvn.w	r3, #15
 8025736:	e035      	b.n	80257a4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8025738:	6a3b      	ldr	r3, [r7, #32]
 802573a:	2b00      	cmp	r3, #0
 802573c:	d109      	bne.n	8025752 <udp_sendto_if+0x76>
 802573e:	4b1b      	ldr	r3, [pc, #108]	; (80257ac <udp_sendto_if+0xd0>)
 8025740:	f240 2283 	movw	r2, #643	; 0x283
 8025744:	491e      	ldr	r1, [pc, #120]	; (80257c0 <udp_sendto_if+0xe4>)
 8025746:	481b      	ldr	r0, [pc, #108]	; (80257b4 <udp_sendto_if+0xd8>)
 8025748:	f000 fdf2 	bl	8026330 <iprintf>
 802574c:	f06f 030f 	mvn.w	r3, #15
 8025750:	e028      	b.n	80257a4 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8025752:	68fb      	ldr	r3, [r7, #12]
 8025754:	2b00      	cmp	r3, #0
 8025756:	d009      	beq.n	802576c <udp_sendto_if+0x90>
 8025758:	68fb      	ldr	r3, [r7, #12]
 802575a:	681b      	ldr	r3, [r3, #0]
 802575c:	2b00      	cmp	r3, #0
 802575e:	d005      	beq.n	802576c <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8025760:	68fb      	ldr	r3, [r7, #12]
 8025762:	681b      	ldr	r3, [r3, #0]
 8025764:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8025768:	2be0      	cmp	r3, #224	; 0xe0
 802576a:	d103      	bne.n	8025774 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 802576c:	6a3b      	ldr	r3, [r7, #32]
 802576e:	3304      	adds	r3, #4
 8025770:	617b      	str	r3, [r7, #20]
 8025772:	e00b      	b.n	802578c <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8025774:	68fb      	ldr	r3, [r7, #12]
 8025776:	681a      	ldr	r2, [r3, #0]
 8025778:	6a3b      	ldr	r3, [r7, #32]
 802577a:	3304      	adds	r3, #4
 802577c:	681b      	ldr	r3, [r3, #0]
 802577e:	429a      	cmp	r2, r3
 8025780:	d002      	beq.n	8025788 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8025782:	f06f 0303 	mvn.w	r3, #3
 8025786:	e00d      	b.n	80257a4 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8025788:	68fb      	ldr	r3, [r7, #12]
 802578a:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 802578c:	887a      	ldrh	r2, [r7, #2]
 802578e:	697b      	ldr	r3, [r7, #20]
 8025790:	9301      	str	r3, [sp, #4]
 8025792:	6a3b      	ldr	r3, [r7, #32]
 8025794:	9300      	str	r3, [sp, #0]
 8025796:	4613      	mov	r3, r2
 8025798:	687a      	ldr	r2, [r7, #4]
 802579a:	68b9      	ldr	r1, [r7, #8]
 802579c:	68f8      	ldr	r0, [r7, #12]
 802579e:	f000 f811 	bl	80257c4 <udp_sendto_if_src>
 80257a2:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80257a4:	4618      	mov	r0, r3
 80257a6:	3718      	adds	r7, #24
 80257a8:	46bd      	mov	sp, r7
 80257aa:	bd80      	pop	{r7, pc}
 80257ac:	0802a500 	.word	0x0802a500
 80257b0:	0802a674 	.word	0x0802a674
 80257b4:	0802a554 	.word	0x0802a554
 80257b8:	0802a690 	.word	0x0802a690
 80257bc:	0802a6ac 	.word	0x0802a6ac
 80257c0:	0802a6cc 	.word	0x0802a6cc

080257c4 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 80257c4:	b580      	push	{r7, lr}
 80257c6:	b08c      	sub	sp, #48	; 0x30
 80257c8:	af04      	add	r7, sp, #16
 80257ca:	60f8      	str	r0, [r7, #12]
 80257cc:	60b9      	str	r1, [r7, #8]
 80257ce:	607a      	str	r2, [r7, #4]
 80257d0:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 80257d2:	68fb      	ldr	r3, [r7, #12]
 80257d4:	2b00      	cmp	r3, #0
 80257d6:	d109      	bne.n	80257ec <udp_sendto_if_src+0x28>
 80257d8:	4b66      	ldr	r3, [pc, #408]	; (8025974 <udp_sendto_if_src+0x1b0>)
 80257da:	f240 22d1 	movw	r2, #721	; 0x2d1
 80257de:	4966      	ldr	r1, [pc, #408]	; (8025978 <udp_sendto_if_src+0x1b4>)
 80257e0:	4866      	ldr	r0, [pc, #408]	; (802597c <udp_sendto_if_src+0x1b8>)
 80257e2:	f000 fda5 	bl	8026330 <iprintf>
 80257e6:	f06f 030f 	mvn.w	r3, #15
 80257ea:	e0be      	b.n	802596a <udp_sendto_if_src+0x1a6>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 80257ec:	68bb      	ldr	r3, [r7, #8]
 80257ee:	2b00      	cmp	r3, #0
 80257f0:	d109      	bne.n	8025806 <udp_sendto_if_src+0x42>
 80257f2:	4b60      	ldr	r3, [pc, #384]	; (8025974 <udp_sendto_if_src+0x1b0>)
 80257f4:	f240 22d2 	movw	r2, #722	; 0x2d2
 80257f8:	4961      	ldr	r1, [pc, #388]	; (8025980 <udp_sendto_if_src+0x1bc>)
 80257fa:	4860      	ldr	r0, [pc, #384]	; (802597c <udp_sendto_if_src+0x1b8>)
 80257fc:	f000 fd98 	bl	8026330 <iprintf>
 8025800:	f06f 030f 	mvn.w	r3, #15
 8025804:	e0b1      	b.n	802596a <udp_sendto_if_src+0x1a6>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8025806:	687b      	ldr	r3, [r7, #4]
 8025808:	2b00      	cmp	r3, #0
 802580a:	d109      	bne.n	8025820 <udp_sendto_if_src+0x5c>
 802580c:	4b59      	ldr	r3, [pc, #356]	; (8025974 <udp_sendto_if_src+0x1b0>)
 802580e:	f240 22d3 	movw	r2, #723	; 0x2d3
 8025812:	495c      	ldr	r1, [pc, #368]	; (8025984 <udp_sendto_if_src+0x1c0>)
 8025814:	4859      	ldr	r0, [pc, #356]	; (802597c <udp_sendto_if_src+0x1b8>)
 8025816:	f000 fd8b 	bl	8026330 <iprintf>
 802581a:	f06f 030f 	mvn.w	r3, #15
 802581e:	e0a4      	b.n	802596a <udp_sendto_if_src+0x1a6>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8025820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025822:	2b00      	cmp	r3, #0
 8025824:	d109      	bne.n	802583a <udp_sendto_if_src+0x76>
 8025826:	4b53      	ldr	r3, [pc, #332]	; (8025974 <udp_sendto_if_src+0x1b0>)
 8025828:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 802582c:	4956      	ldr	r1, [pc, #344]	; (8025988 <udp_sendto_if_src+0x1c4>)
 802582e:	4853      	ldr	r0, [pc, #332]	; (802597c <udp_sendto_if_src+0x1b8>)
 8025830:	f000 fd7e 	bl	8026330 <iprintf>
 8025834:	f06f 030f 	mvn.w	r3, #15
 8025838:	e097      	b.n	802596a <udp_sendto_if_src+0x1a6>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 802583a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802583c:	2b00      	cmp	r3, #0
 802583e:	d109      	bne.n	8025854 <udp_sendto_if_src+0x90>
 8025840:	4b4c      	ldr	r3, [pc, #304]	; (8025974 <udp_sendto_if_src+0x1b0>)
 8025842:	f240 22d5 	movw	r2, #725	; 0x2d5
 8025846:	4951      	ldr	r1, [pc, #324]	; (802598c <udp_sendto_if_src+0x1c8>)
 8025848:	484c      	ldr	r0, [pc, #304]	; (802597c <udp_sendto_if_src+0x1b8>)
 802584a:	f000 fd71 	bl	8026330 <iprintf>
 802584e:	f06f 030f 	mvn.w	r3, #15
 8025852:	e08a      	b.n	802596a <udp_sendto_if_src+0x1a6>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8025854:	68fb      	ldr	r3, [r7, #12]
 8025856:	8a5b      	ldrh	r3, [r3, #18]
 8025858:	2b00      	cmp	r3, #0
 802585a:	d10f      	bne.n	802587c <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 802585c:	68f9      	ldr	r1, [r7, #12]
 802585e:	68fb      	ldr	r3, [r7, #12]
 8025860:	8a5b      	ldrh	r3, [r3, #18]
 8025862:	461a      	mov	r2, r3
 8025864:	68f8      	ldr	r0, [r7, #12]
 8025866:	f000 f895 	bl	8025994 <udp_bind>
 802586a:	4603      	mov	r3, r0
 802586c:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 802586e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8025872:	2b00      	cmp	r3, #0
 8025874:	d002      	beq.n	802587c <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8025876:	f997 301b 	ldrsb.w	r3, [r7, #27]
 802587a:	e076      	b.n	802596a <udp_sendto_if_src+0x1a6>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 802587c:	68bb      	ldr	r3, [r7, #8]
 802587e:	891b      	ldrh	r3, [r3, #8]
 8025880:	3308      	adds	r3, #8
 8025882:	b29a      	uxth	r2, r3
 8025884:	68bb      	ldr	r3, [r7, #8]
 8025886:	891b      	ldrh	r3, [r3, #8]
 8025888:	429a      	cmp	r2, r3
 802588a:	d202      	bcs.n	8025892 <udp_sendto_if_src+0xce>
    return ERR_MEM;
 802588c:	f04f 33ff 	mov.w	r3, #4294967295
 8025890:	e06b      	b.n	802596a <udp_sendto_if_src+0x1a6>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8025892:	2108      	movs	r1, #8
 8025894:	68b8      	ldr	r0, [r7, #8]
 8025896:	f7f9 fab1 	bl	801edfc <pbuf_add_header>
 802589a:	4603      	mov	r3, r0
 802589c:	2b00      	cmp	r3, #0
 802589e:	d015      	beq.n	80258cc <udp_sendto_if_src+0x108>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 80258a0:	f44f 7220 	mov.w	r2, #640	; 0x280
 80258a4:	2108      	movs	r1, #8
 80258a6:	2022      	movs	r0, #34	; 0x22
 80258a8:	f7f9 f85c 	bl	801e964 <pbuf_alloc>
 80258ac:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 80258ae:	69fb      	ldr	r3, [r7, #28]
 80258b0:	2b00      	cmp	r3, #0
 80258b2:	d102      	bne.n	80258ba <udp_sendto_if_src+0xf6>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 80258b4:	f04f 33ff 	mov.w	r3, #4294967295
 80258b8:	e057      	b.n	802596a <udp_sendto_if_src+0x1a6>
    }
    if (p->tot_len != 0) {
 80258ba:	68bb      	ldr	r3, [r7, #8]
 80258bc:	891b      	ldrh	r3, [r3, #8]
 80258be:	2b00      	cmp	r3, #0
 80258c0:	d006      	beq.n	80258d0 <udp_sendto_if_src+0x10c>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 80258c2:	68b9      	ldr	r1, [r7, #8]
 80258c4:	69f8      	ldr	r0, [r7, #28]
 80258c6:	f7f9 fc53 	bl	801f170 <pbuf_chain>
 80258ca:	e001      	b.n	80258d0 <udp_sendto_if_src+0x10c>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 80258cc:	68bb      	ldr	r3, [r7, #8]
 80258ce:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 80258d0:	69fb      	ldr	r3, [r7, #28]
 80258d2:	895b      	ldrh	r3, [r3, #10]
 80258d4:	2b07      	cmp	r3, #7
 80258d6:	d806      	bhi.n	80258e6 <udp_sendto_if_src+0x122>
 80258d8:	4b26      	ldr	r3, [pc, #152]	; (8025974 <udp_sendto_if_src+0x1b0>)
 80258da:	f240 320e 	movw	r2, #782	; 0x30e
 80258de:	492c      	ldr	r1, [pc, #176]	; (8025990 <udp_sendto_if_src+0x1cc>)
 80258e0:	4826      	ldr	r0, [pc, #152]	; (802597c <udp_sendto_if_src+0x1b8>)
 80258e2:	f000 fd25 	bl	8026330 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 80258e6:	69fb      	ldr	r3, [r7, #28]
 80258e8:	685b      	ldr	r3, [r3, #4]
 80258ea:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 80258ec:	68fb      	ldr	r3, [r7, #12]
 80258ee:	8a5b      	ldrh	r3, [r3, #18]
 80258f0:	4618      	mov	r0, r3
 80258f2:	f7f3 fc19 	bl	8019128 <lwip_htons>
 80258f6:	4603      	mov	r3, r0
 80258f8:	461a      	mov	r2, r3
 80258fa:	697b      	ldr	r3, [r7, #20]
 80258fc:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 80258fe:	887b      	ldrh	r3, [r7, #2]
 8025900:	4618      	mov	r0, r3
 8025902:	f7f3 fc11 	bl	8019128 <lwip_htons>
 8025906:	4603      	mov	r3, r0
 8025908:	461a      	mov	r2, r3
 802590a:	697b      	ldr	r3, [r7, #20]
 802590c:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 802590e:	697b      	ldr	r3, [r7, #20]
 8025910:	2200      	movs	r2, #0
 8025912:	719a      	strb	r2, [r3, #6]
 8025914:	2200      	movs	r2, #0
 8025916:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8025918:	69fb      	ldr	r3, [r7, #28]
 802591a:	891b      	ldrh	r3, [r3, #8]
 802591c:	4618      	mov	r0, r3
 802591e:	f7f3 fc03 	bl	8019128 <lwip_htons>
 8025922:	4603      	mov	r3, r0
 8025924:	461a      	mov	r2, r3
 8025926:	697b      	ldr	r3, [r7, #20]
 8025928:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 802592a:	2311      	movs	r3, #17
 802592c:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 802592e:	68fb      	ldr	r3, [r7, #12]
 8025930:	7adb      	ldrb	r3, [r3, #11]
 8025932:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8025934:	68fb      	ldr	r3, [r7, #12]
 8025936:	7a9b      	ldrb	r3, [r3, #10]
 8025938:	7cb9      	ldrb	r1, [r7, #18]
 802593a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802593c:	9202      	str	r2, [sp, #8]
 802593e:	7cfa      	ldrb	r2, [r7, #19]
 8025940:	9201      	str	r2, [sp, #4]
 8025942:	9300      	str	r3, [sp, #0]
 8025944:	460b      	mov	r3, r1
 8025946:	687a      	ldr	r2, [r7, #4]
 8025948:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 802594a:	69f8      	ldr	r0, [r7, #28]
 802594c:	f7f7 f95e 	bl	801cc0c <ip4_output_if_src>
 8025950:	4603      	mov	r3, r0
 8025952:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8025954:	69fa      	ldr	r2, [r7, #28]
 8025956:	68bb      	ldr	r3, [r7, #8]
 8025958:	429a      	cmp	r2, r3
 802595a:	d004      	beq.n	8025966 <udp_sendto_if_src+0x1a2>
    /* free the header pbuf */
    pbuf_free(q);
 802595c:	69f8      	ldr	r0, [r7, #28]
 802595e:	f7f9 fae3 	bl	801ef28 <pbuf_free>
    q = NULL;
 8025962:	2300      	movs	r3, #0
 8025964:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8025966:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 802596a:	4618      	mov	r0, r3
 802596c:	3720      	adds	r7, #32
 802596e:	46bd      	mov	sp, r7
 8025970:	bd80      	pop	{r7, pc}
 8025972:	bf00      	nop
 8025974:	0802a500 	.word	0x0802a500
 8025978:	0802a6ec 	.word	0x0802a6ec
 802597c:	0802a554 	.word	0x0802a554
 8025980:	0802a70c 	.word	0x0802a70c
 8025984:	0802a72c 	.word	0x0802a72c
 8025988:	0802a750 	.word	0x0802a750
 802598c:	0802a774 	.word	0x0802a774
 8025990:	0802a798 	.word	0x0802a798

08025994 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8025994:	b580      	push	{r7, lr}
 8025996:	b086      	sub	sp, #24
 8025998:	af00      	add	r7, sp, #0
 802599a:	60f8      	str	r0, [r7, #12]
 802599c:	60b9      	str	r1, [r7, #8]
 802599e:	4613      	mov	r3, r2
 80259a0:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80259a2:	68bb      	ldr	r3, [r7, #8]
 80259a4:	2b00      	cmp	r3, #0
 80259a6:	d101      	bne.n	80259ac <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80259a8:	4b39      	ldr	r3, [pc, #228]	; (8025a90 <udp_bind+0xfc>)
 80259aa:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80259ac:	68fb      	ldr	r3, [r7, #12]
 80259ae:	2b00      	cmp	r3, #0
 80259b0:	d109      	bne.n	80259c6 <udp_bind+0x32>
 80259b2:	4b38      	ldr	r3, [pc, #224]	; (8025a94 <udp_bind+0x100>)
 80259b4:	f240 32b7 	movw	r2, #951	; 0x3b7
 80259b8:	4937      	ldr	r1, [pc, #220]	; (8025a98 <udp_bind+0x104>)
 80259ba:	4838      	ldr	r0, [pc, #224]	; (8025a9c <udp_bind+0x108>)
 80259bc:	f000 fcb8 	bl	8026330 <iprintf>
 80259c0:	f06f 030f 	mvn.w	r3, #15
 80259c4:	e060      	b.n	8025a88 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 80259c6:	2300      	movs	r3, #0
 80259c8:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80259ca:	4b35      	ldr	r3, [pc, #212]	; (8025aa0 <udp_bind+0x10c>)
 80259cc:	681b      	ldr	r3, [r3, #0]
 80259ce:	617b      	str	r3, [r7, #20]
 80259d0:	e009      	b.n	80259e6 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 80259d2:	68fa      	ldr	r2, [r7, #12]
 80259d4:	697b      	ldr	r3, [r7, #20]
 80259d6:	429a      	cmp	r2, r3
 80259d8:	d102      	bne.n	80259e0 <udp_bind+0x4c>
      rebind = 1;
 80259da:	2301      	movs	r3, #1
 80259dc:	74fb      	strb	r3, [r7, #19]
      break;
 80259de:	e005      	b.n	80259ec <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80259e0:	697b      	ldr	r3, [r7, #20]
 80259e2:	68db      	ldr	r3, [r3, #12]
 80259e4:	617b      	str	r3, [r7, #20]
 80259e6:	697b      	ldr	r3, [r7, #20]
 80259e8:	2b00      	cmp	r3, #0
 80259ea:	d1f2      	bne.n	80259d2 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 80259ec:	88fb      	ldrh	r3, [r7, #6]
 80259ee:	2b00      	cmp	r3, #0
 80259f0:	d109      	bne.n	8025a06 <udp_bind+0x72>
    port = udp_new_port();
 80259f2:	f7ff fc67 	bl	80252c4 <udp_new_port>
 80259f6:	4603      	mov	r3, r0
 80259f8:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80259fa:	88fb      	ldrh	r3, [r7, #6]
 80259fc:	2b00      	cmp	r3, #0
 80259fe:	d12c      	bne.n	8025a5a <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8025a00:	f06f 0307 	mvn.w	r3, #7
 8025a04:	e040      	b.n	8025a88 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8025a06:	4b26      	ldr	r3, [pc, #152]	; (8025aa0 <udp_bind+0x10c>)
 8025a08:	681b      	ldr	r3, [r3, #0]
 8025a0a:	617b      	str	r3, [r7, #20]
 8025a0c:	e022      	b.n	8025a54 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8025a0e:	68fa      	ldr	r2, [r7, #12]
 8025a10:	697b      	ldr	r3, [r7, #20]
 8025a12:	429a      	cmp	r2, r3
 8025a14:	d01b      	beq.n	8025a4e <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8025a16:	697b      	ldr	r3, [r7, #20]
 8025a18:	8a5b      	ldrh	r3, [r3, #18]
 8025a1a:	88fa      	ldrh	r2, [r7, #6]
 8025a1c:	429a      	cmp	r2, r3
 8025a1e:	d116      	bne.n	8025a4e <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8025a20:	697b      	ldr	r3, [r7, #20]
 8025a22:	681a      	ldr	r2, [r3, #0]
 8025a24:	68bb      	ldr	r3, [r7, #8]
 8025a26:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8025a28:	429a      	cmp	r2, r3
 8025a2a:	d00d      	beq.n	8025a48 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8025a2c:	68bb      	ldr	r3, [r7, #8]
 8025a2e:	2b00      	cmp	r3, #0
 8025a30:	d00a      	beq.n	8025a48 <udp_bind+0xb4>
 8025a32:	68bb      	ldr	r3, [r7, #8]
 8025a34:	681b      	ldr	r3, [r3, #0]
 8025a36:	2b00      	cmp	r3, #0
 8025a38:	d006      	beq.n	8025a48 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8025a3a:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8025a3c:	2b00      	cmp	r3, #0
 8025a3e:	d003      	beq.n	8025a48 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8025a40:	697b      	ldr	r3, [r7, #20]
 8025a42:	681b      	ldr	r3, [r3, #0]
 8025a44:	2b00      	cmp	r3, #0
 8025a46:	d102      	bne.n	8025a4e <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8025a48:	f06f 0307 	mvn.w	r3, #7
 8025a4c:	e01c      	b.n	8025a88 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8025a4e:	697b      	ldr	r3, [r7, #20]
 8025a50:	68db      	ldr	r3, [r3, #12]
 8025a52:	617b      	str	r3, [r7, #20]
 8025a54:	697b      	ldr	r3, [r7, #20]
 8025a56:	2b00      	cmp	r3, #0
 8025a58:	d1d9      	bne.n	8025a0e <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8025a5a:	68bb      	ldr	r3, [r7, #8]
 8025a5c:	2b00      	cmp	r3, #0
 8025a5e:	d002      	beq.n	8025a66 <udp_bind+0xd2>
 8025a60:	68bb      	ldr	r3, [r7, #8]
 8025a62:	681b      	ldr	r3, [r3, #0]
 8025a64:	e000      	b.n	8025a68 <udp_bind+0xd4>
 8025a66:	2300      	movs	r3, #0
 8025a68:	68fa      	ldr	r2, [r7, #12]
 8025a6a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8025a6c:	68fb      	ldr	r3, [r7, #12]
 8025a6e:	88fa      	ldrh	r2, [r7, #6]
 8025a70:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8025a72:	7cfb      	ldrb	r3, [r7, #19]
 8025a74:	2b00      	cmp	r3, #0
 8025a76:	d106      	bne.n	8025a86 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8025a78:	4b09      	ldr	r3, [pc, #36]	; (8025aa0 <udp_bind+0x10c>)
 8025a7a:	681a      	ldr	r2, [r3, #0]
 8025a7c:	68fb      	ldr	r3, [r7, #12]
 8025a7e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8025a80:	4a07      	ldr	r2, [pc, #28]	; (8025aa0 <udp_bind+0x10c>)
 8025a82:	68fb      	ldr	r3, [r7, #12]
 8025a84:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8025a86:	2300      	movs	r3, #0
}
 8025a88:	4618      	mov	r0, r3
 8025a8a:	3718      	adds	r7, #24
 8025a8c:	46bd      	mov	sp, r7
 8025a8e:	bd80      	pop	{r7, pc}
 8025a90:	0802b720 	.word	0x0802b720
 8025a94:	0802a500 	.word	0x0802a500
 8025a98:	0802a7c8 	.word	0x0802a7c8
 8025a9c:	0802a554 	.word	0x0802a554
 8025aa0:	20022acc 	.word	0x20022acc

08025aa4 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8025aa4:	b580      	push	{r7, lr}
 8025aa6:	b086      	sub	sp, #24
 8025aa8:	af00      	add	r7, sp, #0
 8025aaa:	60f8      	str	r0, [r7, #12]
 8025aac:	60b9      	str	r1, [r7, #8]
 8025aae:	4613      	mov	r3, r2
 8025ab0:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8025ab2:	68fb      	ldr	r3, [r7, #12]
 8025ab4:	2b00      	cmp	r3, #0
 8025ab6:	d109      	bne.n	8025acc <udp_connect+0x28>
 8025ab8:	4b2c      	ldr	r3, [pc, #176]	; (8025b6c <udp_connect+0xc8>)
 8025aba:	f240 4235 	movw	r2, #1077	; 0x435
 8025abe:	492c      	ldr	r1, [pc, #176]	; (8025b70 <udp_connect+0xcc>)
 8025ac0:	482c      	ldr	r0, [pc, #176]	; (8025b74 <udp_connect+0xd0>)
 8025ac2:	f000 fc35 	bl	8026330 <iprintf>
 8025ac6:	f06f 030f 	mvn.w	r3, #15
 8025aca:	e04b      	b.n	8025b64 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8025acc:	68bb      	ldr	r3, [r7, #8]
 8025ace:	2b00      	cmp	r3, #0
 8025ad0:	d109      	bne.n	8025ae6 <udp_connect+0x42>
 8025ad2:	4b26      	ldr	r3, [pc, #152]	; (8025b6c <udp_connect+0xc8>)
 8025ad4:	f240 4236 	movw	r2, #1078	; 0x436
 8025ad8:	4927      	ldr	r1, [pc, #156]	; (8025b78 <udp_connect+0xd4>)
 8025ada:	4826      	ldr	r0, [pc, #152]	; (8025b74 <udp_connect+0xd0>)
 8025adc:	f000 fc28 	bl	8026330 <iprintf>
 8025ae0:	f06f 030f 	mvn.w	r3, #15
 8025ae4:	e03e      	b.n	8025b64 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8025ae6:	68fb      	ldr	r3, [r7, #12]
 8025ae8:	8a5b      	ldrh	r3, [r3, #18]
 8025aea:	2b00      	cmp	r3, #0
 8025aec:	d10f      	bne.n	8025b0e <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8025aee:	68f9      	ldr	r1, [r7, #12]
 8025af0:	68fb      	ldr	r3, [r7, #12]
 8025af2:	8a5b      	ldrh	r3, [r3, #18]
 8025af4:	461a      	mov	r2, r3
 8025af6:	68f8      	ldr	r0, [r7, #12]
 8025af8:	f7ff ff4c 	bl	8025994 <udp_bind>
 8025afc:	4603      	mov	r3, r0
 8025afe:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8025b00:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8025b04:	2b00      	cmp	r3, #0
 8025b06:	d002      	beq.n	8025b0e <udp_connect+0x6a>
      return err;
 8025b08:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8025b0c:	e02a      	b.n	8025b64 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8025b0e:	68bb      	ldr	r3, [r7, #8]
 8025b10:	2b00      	cmp	r3, #0
 8025b12:	d002      	beq.n	8025b1a <udp_connect+0x76>
 8025b14:	68bb      	ldr	r3, [r7, #8]
 8025b16:	681b      	ldr	r3, [r3, #0]
 8025b18:	e000      	b.n	8025b1c <udp_connect+0x78>
 8025b1a:	2300      	movs	r3, #0
 8025b1c:	68fa      	ldr	r2, [r7, #12]
 8025b1e:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8025b20:	68fb      	ldr	r3, [r7, #12]
 8025b22:	88fa      	ldrh	r2, [r7, #6]
 8025b24:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8025b26:	68fb      	ldr	r3, [r7, #12]
 8025b28:	7c1b      	ldrb	r3, [r3, #16]
 8025b2a:	f043 0304 	orr.w	r3, r3, #4
 8025b2e:	b2da      	uxtb	r2, r3
 8025b30:	68fb      	ldr	r3, [r7, #12]
 8025b32:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8025b34:	4b11      	ldr	r3, [pc, #68]	; (8025b7c <udp_connect+0xd8>)
 8025b36:	681b      	ldr	r3, [r3, #0]
 8025b38:	617b      	str	r3, [r7, #20]
 8025b3a:	e008      	b.n	8025b4e <udp_connect+0xaa>
    if (pcb == ipcb) {
 8025b3c:	68fa      	ldr	r2, [r7, #12]
 8025b3e:	697b      	ldr	r3, [r7, #20]
 8025b40:	429a      	cmp	r2, r3
 8025b42:	d101      	bne.n	8025b48 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8025b44:	2300      	movs	r3, #0
 8025b46:	e00d      	b.n	8025b64 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8025b48:	697b      	ldr	r3, [r7, #20]
 8025b4a:	68db      	ldr	r3, [r3, #12]
 8025b4c:	617b      	str	r3, [r7, #20]
 8025b4e:	697b      	ldr	r3, [r7, #20]
 8025b50:	2b00      	cmp	r3, #0
 8025b52:	d1f3      	bne.n	8025b3c <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8025b54:	4b09      	ldr	r3, [pc, #36]	; (8025b7c <udp_connect+0xd8>)
 8025b56:	681a      	ldr	r2, [r3, #0]
 8025b58:	68fb      	ldr	r3, [r7, #12]
 8025b5a:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8025b5c:	4a07      	ldr	r2, [pc, #28]	; (8025b7c <udp_connect+0xd8>)
 8025b5e:	68fb      	ldr	r3, [r7, #12]
 8025b60:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8025b62:	2300      	movs	r3, #0
}
 8025b64:	4618      	mov	r0, r3
 8025b66:	3718      	adds	r7, #24
 8025b68:	46bd      	mov	sp, r7
 8025b6a:	bd80      	pop	{r7, pc}
 8025b6c:	0802a500 	.word	0x0802a500
 8025b70:	0802a7e0 	.word	0x0802a7e0
 8025b74:	0802a554 	.word	0x0802a554
 8025b78:	0802a7fc 	.word	0x0802a7fc
 8025b7c:	20022acc 	.word	0x20022acc

08025b80 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8025b80:	b580      	push	{r7, lr}
 8025b82:	b084      	sub	sp, #16
 8025b84:	af00      	add	r7, sp, #0
 8025b86:	60f8      	str	r0, [r7, #12]
 8025b88:	60b9      	str	r1, [r7, #8]
 8025b8a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8025b8c:	68fb      	ldr	r3, [r7, #12]
 8025b8e:	2b00      	cmp	r3, #0
 8025b90:	d107      	bne.n	8025ba2 <udp_recv+0x22>
 8025b92:	4b08      	ldr	r3, [pc, #32]	; (8025bb4 <udp_recv+0x34>)
 8025b94:	f240 428a 	movw	r2, #1162	; 0x48a
 8025b98:	4907      	ldr	r1, [pc, #28]	; (8025bb8 <udp_recv+0x38>)
 8025b9a:	4808      	ldr	r0, [pc, #32]	; (8025bbc <udp_recv+0x3c>)
 8025b9c:	f000 fbc8 	bl	8026330 <iprintf>
 8025ba0:	e005      	b.n	8025bae <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8025ba2:	68fb      	ldr	r3, [r7, #12]
 8025ba4:	68ba      	ldr	r2, [r7, #8]
 8025ba6:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8025ba8:	68fb      	ldr	r3, [r7, #12]
 8025baa:	687a      	ldr	r2, [r7, #4]
 8025bac:	61da      	str	r2, [r3, #28]
}
 8025bae:	3710      	adds	r7, #16
 8025bb0:	46bd      	mov	sp, r7
 8025bb2:	bd80      	pop	{r7, pc}
 8025bb4:	0802a500 	.word	0x0802a500
 8025bb8:	0802a834 	.word	0x0802a834
 8025bbc:	0802a554 	.word	0x0802a554

08025bc0 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8025bc0:	b580      	push	{r7, lr}
 8025bc2:	b084      	sub	sp, #16
 8025bc4:	af00      	add	r7, sp, #0
 8025bc6:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8025bc8:	687b      	ldr	r3, [r7, #4]
 8025bca:	2b00      	cmp	r3, #0
 8025bcc:	d107      	bne.n	8025bde <udp_remove+0x1e>
 8025bce:	4b19      	ldr	r3, [pc, #100]	; (8025c34 <udp_remove+0x74>)
 8025bd0:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8025bd4:	4918      	ldr	r1, [pc, #96]	; (8025c38 <udp_remove+0x78>)
 8025bd6:	4819      	ldr	r0, [pc, #100]	; (8025c3c <udp_remove+0x7c>)
 8025bd8:	f000 fbaa 	bl	8026330 <iprintf>
 8025bdc:	e026      	b.n	8025c2c <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8025bde:	4b18      	ldr	r3, [pc, #96]	; (8025c40 <udp_remove+0x80>)
 8025be0:	681a      	ldr	r2, [r3, #0]
 8025be2:	687b      	ldr	r3, [r7, #4]
 8025be4:	429a      	cmp	r2, r3
 8025be6:	d105      	bne.n	8025bf4 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8025be8:	4b15      	ldr	r3, [pc, #84]	; (8025c40 <udp_remove+0x80>)
 8025bea:	681b      	ldr	r3, [r3, #0]
 8025bec:	68db      	ldr	r3, [r3, #12]
 8025bee:	4a14      	ldr	r2, [pc, #80]	; (8025c40 <udp_remove+0x80>)
 8025bf0:	6013      	str	r3, [r2, #0]
 8025bf2:	e017      	b.n	8025c24 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8025bf4:	4b12      	ldr	r3, [pc, #72]	; (8025c40 <udp_remove+0x80>)
 8025bf6:	681b      	ldr	r3, [r3, #0]
 8025bf8:	60fb      	str	r3, [r7, #12]
 8025bfa:	e010      	b.n	8025c1e <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8025bfc:	68fb      	ldr	r3, [r7, #12]
 8025bfe:	68db      	ldr	r3, [r3, #12]
 8025c00:	2b00      	cmp	r3, #0
 8025c02:	d009      	beq.n	8025c18 <udp_remove+0x58>
 8025c04:	68fb      	ldr	r3, [r7, #12]
 8025c06:	68da      	ldr	r2, [r3, #12]
 8025c08:	687b      	ldr	r3, [r7, #4]
 8025c0a:	429a      	cmp	r2, r3
 8025c0c:	d104      	bne.n	8025c18 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8025c0e:	687b      	ldr	r3, [r7, #4]
 8025c10:	68da      	ldr	r2, [r3, #12]
 8025c12:	68fb      	ldr	r3, [r7, #12]
 8025c14:	60da      	str	r2, [r3, #12]
        break;
 8025c16:	e005      	b.n	8025c24 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8025c18:	68fb      	ldr	r3, [r7, #12]
 8025c1a:	68db      	ldr	r3, [r3, #12]
 8025c1c:	60fb      	str	r3, [r7, #12]
 8025c1e:	68fb      	ldr	r3, [r7, #12]
 8025c20:	2b00      	cmp	r3, #0
 8025c22:	d1eb      	bne.n	8025bfc <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8025c24:	6879      	ldr	r1, [r7, #4]
 8025c26:	2000      	movs	r0, #0
 8025c28:	f7f8 fbd6 	bl	801e3d8 <memp_free>
}
 8025c2c:	3710      	adds	r7, #16
 8025c2e:	46bd      	mov	sp, r7
 8025c30:	bd80      	pop	{r7, pc}
 8025c32:	bf00      	nop
 8025c34:	0802a500 	.word	0x0802a500
 8025c38:	0802a84c 	.word	0x0802a84c
 8025c3c:	0802a554 	.word	0x0802a554
 8025c40:	20022acc 	.word	0x20022acc

08025c44 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8025c44:	b580      	push	{r7, lr}
 8025c46:	b082      	sub	sp, #8
 8025c48:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8025c4a:	2000      	movs	r0, #0
 8025c4c:	f7f8 fb72 	bl	801e334 <memp_malloc>
 8025c50:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8025c52:	687b      	ldr	r3, [r7, #4]
 8025c54:	2b00      	cmp	r3, #0
 8025c56:	d007      	beq.n	8025c68 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8025c58:	2220      	movs	r2, #32
 8025c5a:	2100      	movs	r1, #0
 8025c5c:	6878      	ldr	r0, [r7, #4]
 8025c5e:	f000 fab3 	bl	80261c8 <memset>
    pcb->ttl = UDP_TTL;
 8025c62:	687b      	ldr	r3, [r7, #4]
 8025c64:	22ff      	movs	r2, #255	; 0xff
 8025c66:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8025c68:	687b      	ldr	r3, [r7, #4]
}
 8025c6a:	4618      	mov	r0, r3
 8025c6c:	3708      	adds	r7, #8
 8025c6e:	46bd      	mov	sp, r7
 8025c70:	bd80      	pop	{r7, pc}
	...

08025c74 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8025c74:	b480      	push	{r7}
 8025c76:	b085      	sub	sp, #20
 8025c78:	af00      	add	r7, sp, #0
 8025c7a:	6078      	str	r0, [r7, #4]
 8025c7c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8025c7e:	687b      	ldr	r3, [r7, #4]
 8025c80:	2b00      	cmp	r3, #0
 8025c82:	d01e      	beq.n	8025cc2 <udp_netif_ip_addr_changed+0x4e>
 8025c84:	687b      	ldr	r3, [r7, #4]
 8025c86:	681b      	ldr	r3, [r3, #0]
 8025c88:	2b00      	cmp	r3, #0
 8025c8a:	d01a      	beq.n	8025cc2 <udp_netif_ip_addr_changed+0x4e>
 8025c8c:	683b      	ldr	r3, [r7, #0]
 8025c8e:	2b00      	cmp	r3, #0
 8025c90:	d017      	beq.n	8025cc2 <udp_netif_ip_addr_changed+0x4e>
 8025c92:	683b      	ldr	r3, [r7, #0]
 8025c94:	681b      	ldr	r3, [r3, #0]
 8025c96:	2b00      	cmp	r3, #0
 8025c98:	d013      	beq.n	8025cc2 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8025c9a:	4b0d      	ldr	r3, [pc, #52]	; (8025cd0 <udp_netif_ip_addr_changed+0x5c>)
 8025c9c:	681b      	ldr	r3, [r3, #0]
 8025c9e:	60fb      	str	r3, [r7, #12]
 8025ca0:	e00c      	b.n	8025cbc <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8025ca2:	68fb      	ldr	r3, [r7, #12]
 8025ca4:	681a      	ldr	r2, [r3, #0]
 8025ca6:	687b      	ldr	r3, [r7, #4]
 8025ca8:	681b      	ldr	r3, [r3, #0]
 8025caa:	429a      	cmp	r2, r3
 8025cac:	d103      	bne.n	8025cb6 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8025cae:	683b      	ldr	r3, [r7, #0]
 8025cb0:	681a      	ldr	r2, [r3, #0]
 8025cb2:	68fb      	ldr	r3, [r7, #12]
 8025cb4:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8025cb6:	68fb      	ldr	r3, [r7, #12]
 8025cb8:	68db      	ldr	r3, [r3, #12]
 8025cba:	60fb      	str	r3, [r7, #12]
 8025cbc:	68fb      	ldr	r3, [r7, #12]
 8025cbe:	2b00      	cmp	r3, #0
 8025cc0:	d1ef      	bne.n	8025ca2 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8025cc2:	bf00      	nop
 8025cc4:	3714      	adds	r7, #20
 8025cc6:	46bd      	mov	sp, r7
 8025cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025ccc:	4770      	bx	lr
 8025cce:	bf00      	nop
 8025cd0:	20022acc 	.word	0x20022acc

08025cd4 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8025cd4:	b580      	push	{r7, lr}
 8025cd6:	b086      	sub	sp, #24
 8025cd8:	af00      	add	r7, sp, #0
 8025cda:	6078      	str	r0, [r7, #4]
 8025cdc:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8025cde:	230e      	movs	r3, #14
 8025ce0:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8025ce2:	687b      	ldr	r3, [r7, #4]
 8025ce4:	895b      	ldrh	r3, [r3, #10]
 8025ce6:	2b0e      	cmp	r3, #14
 8025ce8:	d96e      	bls.n	8025dc8 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8025cea:	687b      	ldr	r3, [r7, #4]
 8025cec:	7bdb      	ldrb	r3, [r3, #15]
 8025cee:	2b00      	cmp	r3, #0
 8025cf0:	d106      	bne.n	8025d00 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8025cf2:	683b      	ldr	r3, [r7, #0]
 8025cf4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8025cf8:	3301      	adds	r3, #1
 8025cfa:	b2da      	uxtb	r2, r3
 8025cfc:	687b      	ldr	r3, [r7, #4]
 8025cfe:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8025d00:	687b      	ldr	r3, [r7, #4]
 8025d02:	685b      	ldr	r3, [r3, #4]
 8025d04:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8025d06:	693b      	ldr	r3, [r7, #16]
 8025d08:	7b1a      	ldrb	r2, [r3, #12]
 8025d0a:	7b5b      	ldrb	r3, [r3, #13]
 8025d0c:	021b      	lsls	r3, r3, #8
 8025d0e:	4313      	orrs	r3, r2
 8025d10:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8025d12:	693b      	ldr	r3, [r7, #16]
 8025d14:	781b      	ldrb	r3, [r3, #0]
 8025d16:	f003 0301 	and.w	r3, r3, #1
 8025d1a:	2b00      	cmp	r3, #0
 8025d1c:	d023      	beq.n	8025d66 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8025d1e:	693b      	ldr	r3, [r7, #16]
 8025d20:	781b      	ldrb	r3, [r3, #0]
 8025d22:	2b01      	cmp	r3, #1
 8025d24:	d10f      	bne.n	8025d46 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8025d26:	693b      	ldr	r3, [r7, #16]
 8025d28:	785b      	ldrb	r3, [r3, #1]
 8025d2a:	2b00      	cmp	r3, #0
 8025d2c:	d11b      	bne.n	8025d66 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8025d2e:	693b      	ldr	r3, [r7, #16]
 8025d30:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8025d32:	2b5e      	cmp	r3, #94	; 0x5e
 8025d34:	d117      	bne.n	8025d66 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8025d36:	687b      	ldr	r3, [r7, #4]
 8025d38:	7b5b      	ldrb	r3, [r3, #13]
 8025d3a:	f043 0310 	orr.w	r3, r3, #16
 8025d3e:	b2da      	uxtb	r2, r3
 8025d40:	687b      	ldr	r3, [r7, #4]
 8025d42:	735a      	strb	r2, [r3, #13]
 8025d44:	e00f      	b.n	8025d66 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8025d46:	693b      	ldr	r3, [r7, #16]
 8025d48:	2206      	movs	r2, #6
 8025d4a:	4928      	ldr	r1, [pc, #160]	; (8025dec <ethernet_input+0x118>)
 8025d4c:	4618      	mov	r0, r3
 8025d4e:	f000 fa07 	bl	8026160 <memcmp>
 8025d52:	4603      	mov	r3, r0
 8025d54:	2b00      	cmp	r3, #0
 8025d56:	d106      	bne.n	8025d66 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8025d58:	687b      	ldr	r3, [r7, #4]
 8025d5a:	7b5b      	ldrb	r3, [r3, #13]
 8025d5c:	f043 0308 	orr.w	r3, r3, #8
 8025d60:	b2da      	uxtb	r2, r3
 8025d62:	687b      	ldr	r3, [r7, #4]
 8025d64:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8025d66:	89fb      	ldrh	r3, [r7, #14]
 8025d68:	2b08      	cmp	r3, #8
 8025d6a:	d003      	beq.n	8025d74 <ethernet_input+0xa0>
 8025d6c:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8025d70:	d014      	beq.n	8025d9c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8025d72:	e032      	b.n	8025dda <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8025d74:	683b      	ldr	r3, [r7, #0]
 8025d76:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8025d7a:	f003 0308 	and.w	r3, r3, #8
 8025d7e:	2b00      	cmp	r3, #0
 8025d80:	d024      	beq.n	8025dcc <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8025d82:	8afb      	ldrh	r3, [r7, #22]
 8025d84:	4619      	mov	r1, r3
 8025d86:	6878      	ldr	r0, [r7, #4]
 8025d88:	f7f9 f848 	bl	801ee1c <pbuf_remove_header>
 8025d8c:	4603      	mov	r3, r0
 8025d8e:	2b00      	cmp	r3, #0
 8025d90:	d11e      	bne.n	8025dd0 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8025d92:	6839      	ldr	r1, [r7, #0]
 8025d94:	6878      	ldr	r0, [r7, #4]
 8025d96:	f7f6 fdd1 	bl	801c93c <ip4_input>
      break;
 8025d9a:	e013      	b.n	8025dc4 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8025d9c:	683b      	ldr	r3, [r7, #0]
 8025d9e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8025da2:	f003 0308 	and.w	r3, r3, #8
 8025da6:	2b00      	cmp	r3, #0
 8025da8:	d014      	beq.n	8025dd4 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8025daa:	8afb      	ldrh	r3, [r7, #22]
 8025dac:	4619      	mov	r1, r3
 8025dae:	6878      	ldr	r0, [r7, #4]
 8025db0:	f7f9 f834 	bl	801ee1c <pbuf_remove_header>
 8025db4:	4603      	mov	r3, r0
 8025db6:	2b00      	cmp	r3, #0
 8025db8:	d10e      	bne.n	8025dd8 <ethernet_input+0x104>
        etharp_input(p, netif);
 8025dba:	6839      	ldr	r1, [r7, #0]
 8025dbc:	6878      	ldr	r0, [r7, #4]
 8025dbe:	f7f5 ff67 	bl	801bc90 <etharp_input>
      break;
 8025dc2:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8025dc4:	2300      	movs	r3, #0
 8025dc6:	e00c      	b.n	8025de2 <ethernet_input+0x10e>
    goto free_and_return;
 8025dc8:	bf00      	nop
 8025dca:	e006      	b.n	8025dda <ethernet_input+0x106>
        goto free_and_return;
 8025dcc:	bf00      	nop
 8025dce:	e004      	b.n	8025dda <ethernet_input+0x106>
        goto free_and_return;
 8025dd0:	bf00      	nop
 8025dd2:	e002      	b.n	8025dda <ethernet_input+0x106>
        goto free_and_return;
 8025dd4:	bf00      	nop
 8025dd6:	e000      	b.n	8025dda <ethernet_input+0x106>
        goto free_and_return;
 8025dd8:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8025dda:	6878      	ldr	r0, [r7, #4]
 8025ddc:	f7f9 f8a4 	bl	801ef28 <pbuf_free>
  return ERR_OK;
 8025de0:	2300      	movs	r3, #0
}
 8025de2:	4618      	mov	r0, r3
 8025de4:	3718      	adds	r7, #24
 8025de6:	46bd      	mov	sp, r7
 8025de8:	bd80      	pop	{r7, pc}
 8025dea:	bf00      	nop
 8025dec:	0802b860 	.word	0x0802b860

08025df0 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8025df0:	b580      	push	{r7, lr}
 8025df2:	b086      	sub	sp, #24
 8025df4:	af00      	add	r7, sp, #0
 8025df6:	60f8      	str	r0, [r7, #12]
 8025df8:	60b9      	str	r1, [r7, #8]
 8025dfa:	607a      	str	r2, [r7, #4]
 8025dfc:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8025dfe:	8c3b      	ldrh	r3, [r7, #32]
 8025e00:	4618      	mov	r0, r3
 8025e02:	f7f3 f991 	bl	8019128 <lwip_htons>
 8025e06:	4603      	mov	r3, r0
 8025e08:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8025e0a:	210e      	movs	r1, #14
 8025e0c:	68b8      	ldr	r0, [r7, #8]
 8025e0e:	f7f8 fff5 	bl	801edfc <pbuf_add_header>
 8025e12:	4603      	mov	r3, r0
 8025e14:	2b00      	cmp	r3, #0
 8025e16:	d125      	bne.n	8025e64 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8025e18:	68bb      	ldr	r3, [r7, #8]
 8025e1a:	685b      	ldr	r3, [r3, #4]
 8025e1c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8025e1e:	693b      	ldr	r3, [r7, #16]
 8025e20:	8afa      	ldrh	r2, [r7, #22]
 8025e22:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8025e24:	693b      	ldr	r3, [r7, #16]
 8025e26:	2206      	movs	r2, #6
 8025e28:	6839      	ldr	r1, [r7, #0]
 8025e2a:	4618      	mov	r0, r3
 8025e2c:	f000 f9a7 	bl	802617e <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8025e30:	693b      	ldr	r3, [r7, #16]
 8025e32:	3306      	adds	r3, #6
 8025e34:	2206      	movs	r2, #6
 8025e36:	6879      	ldr	r1, [r7, #4]
 8025e38:	4618      	mov	r0, r3
 8025e3a:	f000 f9a0 	bl	802617e <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8025e3e:	68fb      	ldr	r3, [r7, #12]
 8025e40:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8025e44:	2b06      	cmp	r3, #6
 8025e46:	d006      	beq.n	8025e56 <ethernet_output+0x66>
 8025e48:	4b0a      	ldr	r3, [pc, #40]	; (8025e74 <ethernet_output+0x84>)
 8025e4a:	f240 1233 	movw	r2, #307	; 0x133
 8025e4e:	490a      	ldr	r1, [pc, #40]	; (8025e78 <ethernet_output+0x88>)
 8025e50:	480a      	ldr	r0, [pc, #40]	; (8025e7c <ethernet_output+0x8c>)
 8025e52:	f000 fa6d 	bl	8026330 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8025e56:	68fb      	ldr	r3, [r7, #12]
 8025e58:	699b      	ldr	r3, [r3, #24]
 8025e5a:	68b9      	ldr	r1, [r7, #8]
 8025e5c:	68f8      	ldr	r0, [r7, #12]
 8025e5e:	4798      	blx	r3
 8025e60:	4603      	mov	r3, r0
 8025e62:	e002      	b.n	8025e6a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8025e64:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8025e66:	f06f 0301 	mvn.w	r3, #1
}
 8025e6a:	4618      	mov	r0, r3
 8025e6c:	3718      	adds	r7, #24
 8025e6e:	46bd      	mov	sp, r7
 8025e70:	bd80      	pop	{r7, pc}
 8025e72:	bf00      	nop
 8025e74:	0802a864 	.word	0x0802a864
 8025e78:	0802a89c 	.word	0x0802a89c
 8025e7c:	0802a8d0 	.word	0x0802a8d0

08025e80 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8025e80:	b580      	push	{r7, lr}
 8025e82:	b086      	sub	sp, #24
 8025e84:	af00      	add	r7, sp, #0
 8025e86:	6078      	str	r0, [r7, #4]
 8025e88:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8025e8a:	683b      	ldr	r3, [r7, #0]
 8025e8c:	60bb      	str	r3, [r7, #8]
 8025e8e:	2304      	movs	r3, #4
 8025e90:	60fb      	str	r3, [r7, #12]
 8025e92:	2300      	movs	r3, #0
 8025e94:	613b      	str	r3, [r7, #16]
 8025e96:	2300      	movs	r3, #0
 8025e98:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8025e9a:	f107 0308 	add.w	r3, r7, #8
 8025e9e:	2100      	movs	r1, #0
 8025ea0:	4618      	mov	r0, r3
 8025ea2:	f7ef fe31 	bl	8015b08 <osMessageCreate>
 8025ea6:	4602      	mov	r2, r0
 8025ea8:	687b      	ldr	r3, [r7, #4]
 8025eaa:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8025eac:	687b      	ldr	r3, [r7, #4]
 8025eae:	681b      	ldr	r3, [r3, #0]
 8025eb0:	2b00      	cmp	r3, #0
 8025eb2:	d102      	bne.n	8025eba <sys_mbox_new+0x3a>
    return ERR_MEM;
 8025eb4:	f04f 33ff 	mov.w	r3, #4294967295
 8025eb8:	e000      	b.n	8025ebc <sys_mbox_new+0x3c>

  return ERR_OK;
 8025eba:	2300      	movs	r3, #0
}
 8025ebc:	4618      	mov	r0, r3
 8025ebe:	3718      	adds	r7, #24
 8025ec0:	46bd      	mov	sp, r7
 8025ec2:	bd80      	pop	{r7, pc}

08025ec4 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8025ec4:	b580      	push	{r7, lr}
 8025ec6:	b08c      	sub	sp, #48	; 0x30
 8025ec8:	af00      	add	r7, sp, #0
 8025eca:	61f8      	str	r0, [r7, #28]
 8025ecc:	61b9      	str	r1, [r7, #24]
 8025ece:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8025ed0:	f7ef fc6a 	bl	80157a8 <osKernelSysTick>
 8025ed4:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8025ed6:	697b      	ldr	r3, [r7, #20]
 8025ed8:	2b00      	cmp	r3, #0
 8025eda:	d017      	beq.n	8025f0c <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8025edc:	69fb      	ldr	r3, [r7, #28]
 8025ede:	6819      	ldr	r1, [r3, #0]
 8025ee0:	f107 0320 	add.w	r3, r7, #32
 8025ee4:	697a      	ldr	r2, [r7, #20]
 8025ee6:	4618      	mov	r0, r3
 8025ee8:	f7ef fe38 	bl	8015b5c <osMessageGet>

    if(event.status == osEventMessage)
 8025eec:	6a3b      	ldr	r3, [r7, #32]
 8025eee:	2b10      	cmp	r3, #16
 8025ef0:	d109      	bne.n	8025f06 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8025ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025ef4:	461a      	mov	r2, r3
 8025ef6:	69bb      	ldr	r3, [r7, #24]
 8025ef8:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8025efa:	f7ef fc55 	bl	80157a8 <osKernelSysTick>
 8025efe:	4602      	mov	r2, r0
 8025f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025f02:	1ad3      	subs	r3, r2, r3
 8025f04:	e019      	b.n	8025f3a <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8025f06:	f04f 33ff 	mov.w	r3, #4294967295
 8025f0a:	e016      	b.n	8025f3a <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8025f0c:	69fb      	ldr	r3, [r7, #28]
 8025f0e:	6819      	ldr	r1, [r3, #0]
 8025f10:	463b      	mov	r3, r7
 8025f12:	f04f 32ff 	mov.w	r2, #4294967295
 8025f16:	4618      	mov	r0, r3
 8025f18:	f7ef fe20 	bl	8015b5c <osMessageGet>
 8025f1c:	f107 0320 	add.w	r3, r7, #32
 8025f20:	463a      	mov	r2, r7
 8025f22:	ca07      	ldmia	r2, {r0, r1, r2}
 8025f24:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8025f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025f2a:	461a      	mov	r2, r3
 8025f2c:	69bb      	ldr	r3, [r7, #24]
 8025f2e:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8025f30:	f7ef fc3a 	bl	80157a8 <osKernelSysTick>
 8025f34:	4602      	mov	r2, r0
 8025f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025f38:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8025f3a:	4618      	mov	r0, r3
 8025f3c:	3730      	adds	r7, #48	; 0x30
 8025f3e:	46bd      	mov	sp, r7
 8025f40:	bd80      	pop	{r7, pc}

08025f42 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8025f42:	b580      	push	{r7, lr}
 8025f44:	b084      	sub	sp, #16
 8025f46:	af00      	add	r7, sp, #0
 8025f48:	6078      	str	r0, [r7, #4]
 8025f4a:	460b      	mov	r3, r1
 8025f4c:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 8025f4e:	2300      	movs	r3, #0
 8025f50:	60bb      	str	r3, [r7, #8]
 8025f52:	2300      	movs	r3, #0
 8025f54:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 8025f56:	f107 0308 	add.w	r3, r7, #8
 8025f5a:	2101      	movs	r1, #1
 8025f5c:	4618      	mov	r0, r3
 8025f5e:	f7ef fd1b 	bl	8015998 <osSemaphoreCreate>
 8025f62:	4602      	mov	r2, r0
 8025f64:	687b      	ldr	r3, [r7, #4]
 8025f66:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 8025f68:	687b      	ldr	r3, [r7, #4]
 8025f6a:	681b      	ldr	r3, [r3, #0]
 8025f6c:	2b00      	cmp	r3, #0
 8025f6e:	d102      	bne.n	8025f76 <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8025f70:	f04f 33ff 	mov.w	r3, #4294967295
 8025f74:	e009      	b.n	8025f8a <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 8025f76:	78fb      	ldrb	r3, [r7, #3]
 8025f78:	2b00      	cmp	r3, #0
 8025f7a:	d105      	bne.n	8025f88 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 8025f7c:	687b      	ldr	r3, [r7, #4]
 8025f7e:	681b      	ldr	r3, [r3, #0]
 8025f80:	2100      	movs	r1, #0
 8025f82:	4618      	mov	r0, r3
 8025f84:	f7ef fd3c 	bl	8015a00 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8025f88:	2300      	movs	r3, #0
}
 8025f8a:	4618      	mov	r0, r3
 8025f8c:	3710      	adds	r7, #16
 8025f8e:	46bd      	mov	sp, r7
 8025f90:	bd80      	pop	{r7, pc}

08025f92 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8025f92:	b580      	push	{r7, lr}
 8025f94:	b084      	sub	sp, #16
 8025f96:	af00      	add	r7, sp, #0
 8025f98:	6078      	str	r0, [r7, #4]
 8025f9a:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 8025f9c:	f7ef fc04 	bl	80157a8 <osKernelSysTick>
 8025fa0:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8025fa2:	683b      	ldr	r3, [r7, #0]
 8025fa4:	2b00      	cmp	r3, #0
 8025fa6:	d011      	beq.n	8025fcc <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 8025fa8:	687b      	ldr	r3, [r7, #4]
 8025faa:	681b      	ldr	r3, [r3, #0]
 8025fac:	6839      	ldr	r1, [r7, #0]
 8025fae:	4618      	mov	r0, r3
 8025fb0:	f7ef fd26 	bl	8015a00 <osSemaphoreWait>
 8025fb4:	4603      	mov	r3, r0
 8025fb6:	2b00      	cmp	r3, #0
 8025fb8:	d105      	bne.n	8025fc6 <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 8025fba:	f7ef fbf5 	bl	80157a8 <osKernelSysTick>
 8025fbe:	4602      	mov	r2, r0
 8025fc0:	68fb      	ldr	r3, [r7, #12]
 8025fc2:	1ad3      	subs	r3, r2, r3
 8025fc4:	e012      	b.n	8025fec <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8025fc6:	f04f 33ff 	mov.w	r3, #4294967295
 8025fca:	e00f      	b.n	8025fec <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 8025fcc:	bf00      	nop
 8025fce:	687b      	ldr	r3, [r7, #4]
 8025fd0:	681b      	ldr	r3, [r3, #0]
 8025fd2:	f04f 31ff 	mov.w	r1, #4294967295
 8025fd6:	4618      	mov	r0, r3
 8025fd8:	f7ef fd12 	bl	8015a00 <osSemaphoreWait>
 8025fdc:	4603      	mov	r3, r0
 8025fde:	2b00      	cmp	r3, #0
 8025fe0:	d1f5      	bne.n	8025fce <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 8025fe2:	f7ef fbe1 	bl	80157a8 <osKernelSysTick>
 8025fe6:	4602      	mov	r2, r0
 8025fe8:	68fb      	ldr	r3, [r7, #12]
 8025fea:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8025fec:	4618      	mov	r0, r3
 8025fee:	3710      	adds	r7, #16
 8025ff0:	46bd      	mov	sp, r7
 8025ff2:	bd80      	pop	{r7, pc}

08025ff4 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8025ff4:	b580      	push	{r7, lr}
 8025ff6:	b082      	sub	sp, #8
 8025ff8:	af00      	add	r7, sp, #0
 8025ffa:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8025ffc:	687b      	ldr	r3, [r7, #4]
 8025ffe:	681b      	ldr	r3, [r3, #0]
 8026000:	4618      	mov	r0, r3
 8026002:	f7ef fd4b 	bl	8015a9c <osSemaphoreRelease>
}
 8026006:	bf00      	nop
 8026008:	3708      	adds	r7, #8
 802600a:	46bd      	mov	sp, r7
 802600c:	bd80      	pop	{r7, pc}
	...

08026010 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8026010:	b580      	push	{r7, lr}
 8026012:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8026014:	4803      	ldr	r0, [pc, #12]	; (8026024 <sys_init+0x14>)
 8026016:	f7ef fc23 	bl	8015860 <osMutexCreate>
 802601a:	4602      	mov	r2, r0
 802601c:	4b02      	ldr	r3, [pc, #8]	; (8026028 <sys_init+0x18>)
 802601e:	601a      	str	r2, [r3, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8026020:	bf00      	nop
 8026022:	bd80      	pop	{r7, pc}
 8026024:	0802b870 	.word	0x0802b870
 8026028:	20022ad4 	.word	0x20022ad4

0802602c <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 802602c:	b580      	push	{r7, lr}
 802602e:	b08c      	sub	sp, #48	; 0x30
 8026030:	af00      	add	r7, sp, #0
 8026032:	60f8      	str	r0, [r7, #12]
 8026034:	60b9      	str	r1, [r7, #8]
 8026036:	607a      	str	r2, [r7, #4]
 8026038:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 802603a:	f107 0314 	add.w	r3, r7, #20
 802603e:	2200      	movs	r2, #0
 8026040:	601a      	str	r2, [r3, #0]
 8026042:	605a      	str	r2, [r3, #4]
 8026044:	609a      	str	r2, [r3, #8]
 8026046:	60da      	str	r2, [r3, #12]
 8026048:	611a      	str	r2, [r3, #16]
 802604a:	615a      	str	r2, [r3, #20]
 802604c:	619a      	str	r2, [r3, #24]
 802604e:	68fb      	ldr	r3, [r7, #12]
 8026050:	617b      	str	r3, [r7, #20]
 8026052:	68bb      	ldr	r3, [r7, #8]
 8026054:	61bb      	str	r3, [r7, #24]
 8026056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8026058:	b21b      	sxth	r3, r3
 802605a:	83bb      	strh	r3, [r7, #28]
 802605c:	683b      	ldr	r3, [r7, #0]
 802605e:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8026060:	f107 0314 	add.w	r3, r7, #20
 8026064:	6879      	ldr	r1, [r7, #4]
 8026066:	4618      	mov	r0, r3
 8026068:	f7ef fbae 	bl	80157c8 <osThreadCreate>
 802606c:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 802606e:	4618      	mov	r0, r3
 8026070:	3730      	adds	r7, #48	; 0x30
 8026072:	46bd      	mov	sp, r7
 8026074:	bd80      	pop	{r7, pc}
	...

08026078 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8026078:	b580      	push	{r7, lr}
 802607a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 802607c:	4b04      	ldr	r3, [pc, #16]	; (8026090 <sys_arch_protect+0x18>)
 802607e:	681b      	ldr	r3, [r3, #0]
 8026080:	f04f 31ff 	mov.w	r1, #4294967295
 8026084:	4618      	mov	r0, r3
 8026086:	f7ef fc03 	bl	8015890 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 802608a:	2301      	movs	r3, #1
}
 802608c:	4618      	mov	r0, r3
 802608e:	bd80      	pop	{r7, pc}
 8026090:	20022ad4 	.word	0x20022ad4

08026094 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8026094:	b580      	push	{r7, lr}
 8026096:	b082      	sub	sp, #8
 8026098:	af00      	add	r7, sp, #0
 802609a:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 802609c:	4b04      	ldr	r3, [pc, #16]	; (80260b0 <sys_arch_unprotect+0x1c>)
 802609e:	681b      	ldr	r3, [r3, #0]
 80260a0:	4618      	mov	r0, r3
 80260a2:	f7ef fc43 	bl	801592c <osMutexRelease>
}
 80260a6:	bf00      	nop
 80260a8:	3708      	adds	r7, #8
 80260aa:	46bd      	mov	sp, r7
 80260ac:	bd80      	pop	{r7, pc}
 80260ae:	bf00      	nop
 80260b0:	20022ad4 	.word	0x20022ad4

080260b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80260b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80260ec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80260b8:	480d      	ldr	r0, [pc, #52]	; (80260f0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80260ba:	490e      	ldr	r1, [pc, #56]	; (80260f4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80260bc:	4a0e      	ldr	r2, [pc, #56]	; (80260f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80260be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80260c0:	e002      	b.n	80260c8 <LoopCopyDataInit>

080260c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80260c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80260c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80260c6:	3304      	adds	r3, #4

080260c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80260c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80260ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80260cc:	d3f9      	bcc.n	80260c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80260ce:	4a0b      	ldr	r2, [pc, #44]	; (80260fc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80260d0:	4c0b      	ldr	r4, [pc, #44]	; (8026100 <LoopFillZerobss+0x26>)
  movs r3, #0
 80260d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80260d4:	e001      	b.n	80260da <LoopFillZerobss>

080260d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80260d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80260d8:	3204      	adds	r2, #4

080260da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80260da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80260dc:	d3fb      	bcc.n	80260d6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80260de:	f7eb f8bd 	bl	801125c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80260e2:	f000 f811 	bl	8026108 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80260e6:	f7ea faf3 	bl	80106d0 <main>
  bx  lr    
 80260ea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80260ec:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80260f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80260f4:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 80260f8:	08000208 	.word	0x08000208
  ldr r2, =_sbss
 80260fc:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8026100:	20022ad8 	.word	0x20022ad8

08026104 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8026104:	e7fe      	b.n	8026104 <ADC_IRQHandler>
	...

08026108 <__libc_init_array>:
 8026108:	b570      	push	{r4, r5, r6, lr}
 802610a:	4e0d      	ldr	r6, [pc, #52]	; (8026140 <__libc_init_array+0x38>)
 802610c:	4c0d      	ldr	r4, [pc, #52]	; (8026144 <__libc_init_array+0x3c>)
 802610e:	1ba4      	subs	r4, r4, r6
 8026110:	10a4      	asrs	r4, r4, #2
 8026112:	2500      	movs	r5, #0
 8026114:	42a5      	cmp	r5, r4
 8026116:	d109      	bne.n	802612c <__libc_init_array+0x24>
 8026118:	4e0b      	ldr	r6, [pc, #44]	; (8026148 <__libc_init_array+0x40>)
 802611a:	4c0c      	ldr	r4, [pc, #48]	; (802614c <__libc_init_array+0x44>)
 802611c:	f001 f9b6 	bl	802748c <_init>
 8026120:	1ba4      	subs	r4, r4, r6
 8026122:	10a4      	asrs	r4, r4, #2
 8026124:	2500      	movs	r5, #0
 8026126:	42a5      	cmp	r5, r4
 8026128:	d105      	bne.n	8026136 <__libc_init_array+0x2e>
 802612a:	bd70      	pop	{r4, r5, r6, pc}
 802612c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8026130:	4798      	blx	r3
 8026132:	3501      	adds	r5, #1
 8026134:	e7ee      	b.n	8026114 <__libc_init_array+0xc>
 8026136:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 802613a:	4798      	blx	r3
 802613c:	3501      	adds	r5, #1
 802613e:	e7f2      	b.n	8026126 <__libc_init_array+0x1e>
 8026140:	08000200 	.word	0x08000200
 8026144:	08000200 	.word	0x08000200
 8026148:	08000200 	.word	0x08000200
 802614c:	08000204 	.word	0x08000204

08026150 <malloc>:
 8026150:	4b02      	ldr	r3, [pc, #8]	; (802615c <malloc+0xc>)
 8026152:	4601      	mov	r1, r0
 8026154:	6818      	ldr	r0, [r3, #0]
 8026156:	f000 b88d 	b.w	8026274 <_malloc_r>
 802615a:	bf00      	nop
 802615c:	20000020 	.word	0x20000020

08026160 <memcmp>:
 8026160:	b510      	push	{r4, lr}
 8026162:	3901      	subs	r1, #1
 8026164:	4402      	add	r2, r0
 8026166:	4290      	cmp	r0, r2
 8026168:	d101      	bne.n	802616e <memcmp+0xe>
 802616a:	2000      	movs	r0, #0
 802616c:	bd10      	pop	{r4, pc}
 802616e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8026172:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8026176:	42a3      	cmp	r3, r4
 8026178:	d0f5      	beq.n	8026166 <memcmp+0x6>
 802617a:	1b18      	subs	r0, r3, r4
 802617c:	bd10      	pop	{r4, pc}

0802617e <memcpy>:
 802617e:	b510      	push	{r4, lr}
 8026180:	1e43      	subs	r3, r0, #1
 8026182:	440a      	add	r2, r1
 8026184:	4291      	cmp	r1, r2
 8026186:	d100      	bne.n	802618a <memcpy+0xc>
 8026188:	bd10      	pop	{r4, pc}
 802618a:	f811 4b01 	ldrb.w	r4, [r1], #1
 802618e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8026192:	e7f7      	b.n	8026184 <memcpy+0x6>

08026194 <memmove>:
 8026194:	4288      	cmp	r0, r1
 8026196:	b510      	push	{r4, lr}
 8026198:	eb01 0302 	add.w	r3, r1, r2
 802619c:	d803      	bhi.n	80261a6 <memmove+0x12>
 802619e:	1e42      	subs	r2, r0, #1
 80261a0:	4299      	cmp	r1, r3
 80261a2:	d10c      	bne.n	80261be <memmove+0x2a>
 80261a4:	bd10      	pop	{r4, pc}
 80261a6:	4298      	cmp	r0, r3
 80261a8:	d2f9      	bcs.n	802619e <memmove+0xa>
 80261aa:	1881      	adds	r1, r0, r2
 80261ac:	1ad2      	subs	r2, r2, r3
 80261ae:	42d3      	cmn	r3, r2
 80261b0:	d100      	bne.n	80261b4 <memmove+0x20>
 80261b2:	bd10      	pop	{r4, pc}
 80261b4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80261b8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80261bc:	e7f7      	b.n	80261ae <memmove+0x1a>
 80261be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80261c2:	f802 4f01 	strb.w	r4, [r2, #1]!
 80261c6:	e7eb      	b.n	80261a0 <memmove+0xc>

080261c8 <memset>:
 80261c8:	4402      	add	r2, r0
 80261ca:	4603      	mov	r3, r0
 80261cc:	4293      	cmp	r3, r2
 80261ce:	d100      	bne.n	80261d2 <memset+0xa>
 80261d0:	4770      	bx	lr
 80261d2:	f803 1b01 	strb.w	r1, [r3], #1
 80261d6:	e7f9      	b.n	80261cc <memset+0x4>

080261d8 <_free_r>:
 80261d8:	b538      	push	{r3, r4, r5, lr}
 80261da:	4605      	mov	r5, r0
 80261dc:	2900      	cmp	r1, #0
 80261de:	d045      	beq.n	802626c <_free_r+0x94>
 80261e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80261e4:	1f0c      	subs	r4, r1, #4
 80261e6:	2b00      	cmp	r3, #0
 80261e8:	bfb8      	it	lt
 80261ea:	18e4      	addlt	r4, r4, r3
 80261ec:	f000 fcc2 	bl	8026b74 <__malloc_lock>
 80261f0:	4a1f      	ldr	r2, [pc, #124]	; (8026270 <_free_r+0x98>)
 80261f2:	6813      	ldr	r3, [r2, #0]
 80261f4:	4610      	mov	r0, r2
 80261f6:	b933      	cbnz	r3, 8026206 <_free_r+0x2e>
 80261f8:	6063      	str	r3, [r4, #4]
 80261fa:	6014      	str	r4, [r2, #0]
 80261fc:	4628      	mov	r0, r5
 80261fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8026202:	f000 bcb8 	b.w	8026b76 <__malloc_unlock>
 8026206:	42a3      	cmp	r3, r4
 8026208:	d90c      	bls.n	8026224 <_free_r+0x4c>
 802620a:	6821      	ldr	r1, [r4, #0]
 802620c:	1862      	adds	r2, r4, r1
 802620e:	4293      	cmp	r3, r2
 8026210:	bf04      	itt	eq
 8026212:	681a      	ldreq	r2, [r3, #0]
 8026214:	685b      	ldreq	r3, [r3, #4]
 8026216:	6063      	str	r3, [r4, #4]
 8026218:	bf04      	itt	eq
 802621a:	1852      	addeq	r2, r2, r1
 802621c:	6022      	streq	r2, [r4, #0]
 802621e:	6004      	str	r4, [r0, #0]
 8026220:	e7ec      	b.n	80261fc <_free_r+0x24>
 8026222:	4613      	mov	r3, r2
 8026224:	685a      	ldr	r2, [r3, #4]
 8026226:	b10a      	cbz	r2, 802622c <_free_r+0x54>
 8026228:	42a2      	cmp	r2, r4
 802622a:	d9fa      	bls.n	8026222 <_free_r+0x4a>
 802622c:	6819      	ldr	r1, [r3, #0]
 802622e:	1858      	adds	r0, r3, r1
 8026230:	42a0      	cmp	r0, r4
 8026232:	d10b      	bne.n	802624c <_free_r+0x74>
 8026234:	6820      	ldr	r0, [r4, #0]
 8026236:	4401      	add	r1, r0
 8026238:	1858      	adds	r0, r3, r1
 802623a:	4282      	cmp	r2, r0
 802623c:	6019      	str	r1, [r3, #0]
 802623e:	d1dd      	bne.n	80261fc <_free_r+0x24>
 8026240:	6810      	ldr	r0, [r2, #0]
 8026242:	6852      	ldr	r2, [r2, #4]
 8026244:	605a      	str	r2, [r3, #4]
 8026246:	4401      	add	r1, r0
 8026248:	6019      	str	r1, [r3, #0]
 802624a:	e7d7      	b.n	80261fc <_free_r+0x24>
 802624c:	d902      	bls.n	8026254 <_free_r+0x7c>
 802624e:	230c      	movs	r3, #12
 8026250:	602b      	str	r3, [r5, #0]
 8026252:	e7d3      	b.n	80261fc <_free_r+0x24>
 8026254:	6820      	ldr	r0, [r4, #0]
 8026256:	1821      	adds	r1, r4, r0
 8026258:	428a      	cmp	r2, r1
 802625a:	bf04      	itt	eq
 802625c:	6811      	ldreq	r1, [r2, #0]
 802625e:	6852      	ldreq	r2, [r2, #4]
 8026260:	6062      	str	r2, [r4, #4]
 8026262:	bf04      	itt	eq
 8026264:	1809      	addeq	r1, r1, r0
 8026266:	6021      	streq	r1, [r4, #0]
 8026268:	605c      	str	r4, [r3, #4]
 802626a:	e7c7      	b.n	80261fc <_free_r+0x24>
 802626c:	bd38      	pop	{r3, r4, r5, pc}
 802626e:	bf00      	nop
 8026270:	20019700 	.word	0x20019700

08026274 <_malloc_r>:
 8026274:	b570      	push	{r4, r5, r6, lr}
 8026276:	1ccd      	adds	r5, r1, #3
 8026278:	f025 0503 	bic.w	r5, r5, #3
 802627c:	3508      	adds	r5, #8
 802627e:	2d0c      	cmp	r5, #12
 8026280:	bf38      	it	cc
 8026282:	250c      	movcc	r5, #12
 8026284:	2d00      	cmp	r5, #0
 8026286:	4606      	mov	r6, r0
 8026288:	db01      	blt.n	802628e <_malloc_r+0x1a>
 802628a:	42a9      	cmp	r1, r5
 802628c:	d903      	bls.n	8026296 <_malloc_r+0x22>
 802628e:	230c      	movs	r3, #12
 8026290:	6033      	str	r3, [r6, #0]
 8026292:	2000      	movs	r0, #0
 8026294:	bd70      	pop	{r4, r5, r6, pc}
 8026296:	f000 fc6d 	bl	8026b74 <__malloc_lock>
 802629a:	4a23      	ldr	r2, [pc, #140]	; (8026328 <_malloc_r+0xb4>)
 802629c:	6814      	ldr	r4, [r2, #0]
 802629e:	4621      	mov	r1, r4
 80262a0:	b991      	cbnz	r1, 80262c8 <_malloc_r+0x54>
 80262a2:	4c22      	ldr	r4, [pc, #136]	; (802632c <_malloc_r+0xb8>)
 80262a4:	6823      	ldr	r3, [r4, #0]
 80262a6:	b91b      	cbnz	r3, 80262b0 <_malloc_r+0x3c>
 80262a8:	4630      	mov	r0, r6
 80262aa:	f000 f8f7 	bl	802649c <_sbrk_r>
 80262ae:	6020      	str	r0, [r4, #0]
 80262b0:	4629      	mov	r1, r5
 80262b2:	4630      	mov	r0, r6
 80262b4:	f000 f8f2 	bl	802649c <_sbrk_r>
 80262b8:	1c43      	adds	r3, r0, #1
 80262ba:	d126      	bne.n	802630a <_malloc_r+0x96>
 80262bc:	230c      	movs	r3, #12
 80262be:	6033      	str	r3, [r6, #0]
 80262c0:	4630      	mov	r0, r6
 80262c2:	f000 fc58 	bl	8026b76 <__malloc_unlock>
 80262c6:	e7e4      	b.n	8026292 <_malloc_r+0x1e>
 80262c8:	680b      	ldr	r3, [r1, #0]
 80262ca:	1b5b      	subs	r3, r3, r5
 80262cc:	d41a      	bmi.n	8026304 <_malloc_r+0x90>
 80262ce:	2b0b      	cmp	r3, #11
 80262d0:	d90f      	bls.n	80262f2 <_malloc_r+0x7e>
 80262d2:	600b      	str	r3, [r1, #0]
 80262d4:	50cd      	str	r5, [r1, r3]
 80262d6:	18cc      	adds	r4, r1, r3
 80262d8:	4630      	mov	r0, r6
 80262da:	f000 fc4c 	bl	8026b76 <__malloc_unlock>
 80262de:	f104 000b 	add.w	r0, r4, #11
 80262e2:	1d23      	adds	r3, r4, #4
 80262e4:	f020 0007 	bic.w	r0, r0, #7
 80262e8:	1ac3      	subs	r3, r0, r3
 80262ea:	d01b      	beq.n	8026324 <_malloc_r+0xb0>
 80262ec:	425a      	negs	r2, r3
 80262ee:	50e2      	str	r2, [r4, r3]
 80262f0:	bd70      	pop	{r4, r5, r6, pc}
 80262f2:	428c      	cmp	r4, r1
 80262f4:	bf0d      	iteet	eq
 80262f6:	6863      	ldreq	r3, [r4, #4]
 80262f8:	684b      	ldrne	r3, [r1, #4]
 80262fa:	6063      	strne	r3, [r4, #4]
 80262fc:	6013      	streq	r3, [r2, #0]
 80262fe:	bf18      	it	ne
 8026300:	460c      	movne	r4, r1
 8026302:	e7e9      	b.n	80262d8 <_malloc_r+0x64>
 8026304:	460c      	mov	r4, r1
 8026306:	6849      	ldr	r1, [r1, #4]
 8026308:	e7ca      	b.n	80262a0 <_malloc_r+0x2c>
 802630a:	1cc4      	adds	r4, r0, #3
 802630c:	f024 0403 	bic.w	r4, r4, #3
 8026310:	42a0      	cmp	r0, r4
 8026312:	d005      	beq.n	8026320 <_malloc_r+0xac>
 8026314:	1a21      	subs	r1, r4, r0
 8026316:	4630      	mov	r0, r6
 8026318:	f000 f8c0 	bl	802649c <_sbrk_r>
 802631c:	3001      	adds	r0, #1
 802631e:	d0cd      	beq.n	80262bc <_malloc_r+0x48>
 8026320:	6025      	str	r5, [r4, #0]
 8026322:	e7d9      	b.n	80262d8 <_malloc_r+0x64>
 8026324:	bd70      	pop	{r4, r5, r6, pc}
 8026326:	bf00      	nop
 8026328:	20019700 	.word	0x20019700
 802632c:	20019704 	.word	0x20019704

08026330 <iprintf>:
 8026330:	b40f      	push	{r0, r1, r2, r3}
 8026332:	4b0a      	ldr	r3, [pc, #40]	; (802635c <iprintf+0x2c>)
 8026334:	b513      	push	{r0, r1, r4, lr}
 8026336:	681c      	ldr	r4, [r3, #0]
 8026338:	b124      	cbz	r4, 8026344 <iprintf+0x14>
 802633a:	69a3      	ldr	r3, [r4, #24]
 802633c:	b913      	cbnz	r3, 8026344 <iprintf+0x14>
 802633e:	4620      	mov	r0, r4
 8026340:	f000 fb18 	bl	8026974 <__sinit>
 8026344:	ab05      	add	r3, sp, #20
 8026346:	9a04      	ldr	r2, [sp, #16]
 8026348:	68a1      	ldr	r1, [r4, #8]
 802634a:	9301      	str	r3, [sp, #4]
 802634c:	4620      	mov	r0, r4
 802634e:	f000 fd8d 	bl	8026e6c <_vfiprintf_r>
 8026352:	b002      	add	sp, #8
 8026354:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8026358:	b004      	add	sp, #16
 802635a:	4770      	bx	lr
 802635c:	20000020 	.word	0x20000020

08026360 <_puts_r>:
 8026360:	b570      	push	{r4, r5, r6, lr}
 8026362:	460e      	mov	r6, r1
 8026364:	4605      	mov	r5, r0
 8026366:	b118      	cbz	r0, 8026370 <_puts_r+0x10>
 8026368:	6983      	ldr	r3, [r0, #24]
 802636a:	b90b      	cbnz	r3, 8026370 <_puts_r+0x10>
 802636c:	f000 fb02 	bl	8026974 <__sinit>
 8026370:	69ab      	ldr	r3, [r5, #24]
 8026372:	68ac      	ldr	r4, [r5, #8]
 8026374:	b913      	cbnz	r3, 802637c <_puts_r+0x1c>
 8026376:	4628      	mov	r0, r5
 8026378:	f000 fafc 	bl	8026974 <__sinit>
 802637c:	4b23      	ldr	r3, [pc, #140]	; (802640c <_puts_r+0xac>)
 802637e:	429c      	cmp	r4, r3
 8026380:	d117      	bne.n	80263b2 <_puts_r+0x52>
 8026382:	686c      	ldr	r4, [r5, #4]
 8026384:	89a3      	ldrh	r3, [r4, #12]
 8026386:	071b      	lsls	r3, r3, #28
 8026388:	d51d      	bpl.n	80263c6 <_puts_r+0x66>
 802638a:	6923      	ldr	r3, [r4, #16]
 802638c:	b1db      	cbz	r3, 80263c6 <_puts_r+0x66>
 802638e:	3e01      	subs	r6, #1
 8026390:	68a3      	ldr	r3, [r4, #8]
 8026392:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8026396:	3b01      	subs	r3, #1
 8026398:	60a3      	str	r3, [r4, #8]
 802639a:	b9e9      	cbnz	r1, 80263d8 <_puts_r+0x78>
 802639c:	2b00      	cmp	r3, #0
 802639e:	da2e      	bge.n	80263fe <_puts_r+0x9e>
 80263a0:	4622      	mov	r2, r4
 80263a2:	210a      	movs	r1, #10
 80263a4:	4628      	mov	r0, r5
 80263a6:	f000 f911 	bl	80265cc <__swbuf_r>
 80263aa:	3001      	adds	r0, #1
 80263ac:	d011      	beq.n	80263d2 <_puts_r+0x72>
 80263ae:	200a      	movs	r0, #10
 80263b0:	bd70      	pop	{r4, r5, r6, pc}
 80263b2:	4b17      	ldr	r3, [pc, #92]	; (8026410 <_puts_r+0xb0>)
 80263b4:	429c      	cmp	r4, r3
 80263b6:	d101      	bne.n	80263bc <_puts_r+0x5c>
 80263b8:	68ac      	ldr	r4, [r5, #8]
 80263ba:	e7e3      	b.n	8026384 <_puts_r+0x24>
 80263bc:	4b15      	ldr	r3, [pc, #84]	; (8026414 <_puts_r+0xb4>)
 80263be:	429c      	cmp	r4, r3
 80263c0:	bf08      	it	eq
 80263c2:	68ec      	ldreq	r4, [r5, #12]
 80263c4:	e7de      	b.n	8026384 <_puts_r+0x24>
 80263c6:	4621      	mov	r1, r4
 80263c8:	4628      	mov	r0, r5
 80263ca:	f000 f963 	bl	8026694 <__swsetup_r>
 80263ce:	2800      	cmp	r0, #0
 80263d0:	d0dd      	beq.n	802638e <_puts_r+0x2e>
 80263d2:	f04f 30ff 	mov.w	r0, #4294967295
 80263d6:	bd70      	pop	{r4, r5, r6, pc}
 80263d8:	2b00      	cmp	r3, #0
 80263da:	da04      	bge.n	80263e6 <_puts_r+0x86>
 80263dc:	69a2      	ldr	r2, [r4, #24]
 80263de:	4293      	cmp	r3, r2
 80263e0:	db06      	blt.n	80263f0 <_puts_r+0x90>
 80263e2:	290a      	cmp	r1, #10
 80263e4:	d004      	beq.n	80263f0 <_puts_r+0x90>
 80263e6:	6823      	ldr	r3, [r4, #0]
 80263e8:	1c5a      	adds	r2, r3, #1
 80263ea:	6022      	str	r2, [r4, #0]
 80263ec:	7019      	strb	r1, [r3, #0]
 80263ee:	e7cf      	b.n	8026390 <_puts_r+0x30>
 80263f0:	4622      	mov	r2, r4
 80263f2:	4628      	mov	r0, r5
 80263f4:	f000 f8ea 	bl	80265cc <__swbuf_r>
 80263f8:	3001      	adds	r0, #1
 80263fa:	d1c9      	bne.n	8026390 <_puts_r+0x30>
 80263fc:	e7e9      	b.n	80263d2 <_puts_r+0x72>
 80263fe:	6823      	ldr	r3, [r4, #0]
 8026400:	200a      	movs	r0, #10
 8026402:	1c5a      	adds	r2, r3, #1
 8026404:	6022      	str	r2, [r4, #0]
 8026406:	7018      	strb	r0, [r3, #0]
 8026408:	bd70      	pop	{r4, r5, r6, pc}
 802640a:	bf00      	nop
 802640c:	0802b89c 	.word	0x0802b89c
 8026410:	0802b8bc 	.word	0x0802b8bc
 8026414:	0802b87c 	.word	0x0802b87c

08026418 <puts>:
 8026418:	4b02      	ldr	r3, [pc, #8]	; (8026424 <puts+0xc>)
 802641a:	4601      	mov	r1, r0
 802641c:	6818      	ldr	r0, [r3, #0]
 802641e:	f7ff bf9f 	b.w	8026360 <_puts_r>
 8026422:	bf00      	nop
 8026424:	20000020 	.word	0x20000020

08026428 <rand>:
 8026428:	4b19      	ldr	r3, [pc, #100]	; (8026490 <rand+0x68>)
 802642a:	b510      	push	{r4, lr}
 802642c:	681c      	ldr	r4, [r3, #0]
 802642e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8026430:	b9d3      	cbnz	r3, 8026468 <rand+0x40>
 8026432:	2018      	movs	r0, #24
 8026434:	f7ff fe8c 	bl	8026150 <malloc>
 8026438:	f243 330e 	movw	r3, #13070	; 0x330e
 802643c:	63a0      	str	r0, [r4, #56]	; 0x38
 802643e:	8003      	strh	r3, [r0, #0]
 8026440:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 8026444:	8043      	strh	r3, [r0, #2]
 8026446:	f241 2334 	movw	r3, #4660	; 0x1234
 802644a:	8083      	strh	r3, [r0, #4]
 802644c:	f24e 636d 	movw	r3, #58989	; 0xe66d
 8026450:	80c3      	strh	r3, [r0, #6]
 8026452:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 8026456:	8103      	strh	r3, [r0, #8]
 8026458:	2305      	movs	r3, #5
 802645a:	8143      	strh	r3, [r0, #10]
 802645c:	230b      	movs	r3, #11
 802645e:	8183      	strh	r3, [r0, #12]
 8026460:	2201      	movs	r2, #1
 8026462:	2300      	movs	r3, #0
 8026464:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8026468:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 802646a:	480a      	ldr	r0, [pc, #40]	; (8026494 <rand+0x6c>)
 802646c:	690a      	ldr	r2, [r1, #16]
 802646e:	694b      	ldr	r3, [r1, #20]
 8026470:	4c09      	ldr	r4, [pc, #36]	; (8026498 <rand+0x70>)
 8026472:	4350      	muls	r0, r2
 8026474:	fb04 0003 	mla	r0, r4, r3, r0
 8026478:	fba2 2304 	umull	r2, r3, r2, r4
 802647c:	3201      	adds	r2, #1
 802647e:	4403      	add	r3, r0
 8026480:	f143 0300 	adc.w	r3, r3, #0
 8026484:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8026488:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 802648c:	bd10      	pop	{r4, pc}
 802648e:	bf00      	nop
 8026490:	20000020 	.word	0x20000020
 8026494:	5851f42d 	.word	0x5851f42d
 8026498:	4c957f2d 	.word	0x4c957f2d

0802649c <_sbrk_r>:
 802649c:	b538      	push	{r3, r4, r5, lr}
 802649e:	4c06      	ldr	r4, [pc, #24]	; (80264b8 <_sbrk_r+0x1c>)
 80264a0:	2300      	movs	r3, #0
 80264a2:	4605      	mov	r5, r0
 80264a4:	4608      	mov	r0, r1
 80264a6:	6023      	str	r3, [r4, #0]
 80264a8:	f7ea fe76 	bl	8011198 <_sbrk>
 80264ac:	1c43      	adds	r3, r0, #1
 80264ae:	d102      	bne.n	80264b6 <_sbrk_r+0x1a>
 80264b0:	6823      	ldr	r3, [r4, #0]
 80264b2:	b103      	cbz	r3, 80264b6 <_sbrk_r+0x1a>
 80264b4:	602b      	str	r3, [r5, #0]
 80264b6:	bd38      	pop	{r3, r4, r5, pc}
 80264b8:	20022ad0 	.word	0x20022ad0

080264bc <siprintf>:
 80264bc:	b40e      	push	{r1, r2, r3}
 80264be:	b500      	push	{lr}
 80264c0:	b09c      	sub	sp, #112	; 0x70
 80264c2:	f44f 7102 	mov.w	r1, #520	; 0x208
 80264c6:	ab1d      	add	r3, sp, #116	; 0x74
 80264c8:	f8ad 1014 	strh.w	r1, [sp, #20]
 80264cc:	9002      	str	r0, [sp, #8]
 80264ce:	9006      	str	r0, [sp, #24]
 80264d0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80264d4:	480a      	ldr	r0, [pc, #40]	; (8026500 <siprintf+0x44>)
 80264d6:	9104      	str	r1, [sp, #16]
 80264d8:	9107      	str	r1, [sp, #28]
 80264da:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80264de:	f853 2b04 	ldr.w	r2, [r3], #4
 80264e2:	f8ad 1016 	strh.w	r1, [sp, #22]
 80264e6:	6800      	ldr	r0, [r0, #0]
 80264e8:	9301      	str	r3, [sp, #4]
 80264ea:	a902      	add	r1, sp, #8
 80264ec:	f000 fba0 	bl	8026c30 <_svfiprintf_r>
 80264f0:	9b02      	ldr	r3, [sp, #8]
 80264f2:	2200      	movs	r2, #0
 80264f4:	701a      	strb	r2, [r3, #0]
 80264f6:	b01c      	add	sp, #112	; 0x70
 80264f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80264fc:	b003      	add	sp, #12
 80264fe:	4770      	bx	lr
 8026500:	20000020 	.word	0x20000020

08026504 <__sread>:
 8026504:	b510      	push	{r4, lr}
 8026506:	460c      	mov	r4, r1
 8026508:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802650c:	f000 ff5a 	bl	80273c4 <_read_r>
 8026510:	2800      	cmp	r0, #0
 8026512:	bfab      	itete	ge
 8026514:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8026516:	89a3      	ldrhlt	r3, [r4, #12]
 8026518:	181b      	addge	r3, r3, r0
 802651a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802651e:	bfac      	ite	ge
 8026520:	6563      	strge	r3, [r4, #84]	; 0x54
 8026522:	81a3      	strhlt	r3, [r4, #12]
 8026524:	bd10      	pop	{r4, pc}

08026526 <__swrite>:
 8026526:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802652a:	461f      	mov	r7, r3
 802652c:	898b      	ldrh	r3, [r1, #12]
 802652e:	05db      	lsls	r3, r3, #23
 8026530:	4605      	mov	r5, r0
 8026532:	460c      	mov	r4, r1
 8026534:	4616      	mov	r6, r2
 8026536:	d505      	bpl.n	8026544 <__swrite+0x1e>
 8026538:	2302      	movs	r3, #2
 802653a:	2200      	movs	r2, #0
 802653c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026540:	f000 faa2 	bl	8026a88 <_lseek_r>
 8026544:	89a3      	ldrh	r3, [r4, #12]
 8026546:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802654a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802654e:	81a3      	strh	r3, [r4, #12]
 8026550:	4632      	mov	r2, r6
 8026552:	463b      	mov	r3, r7
 8026554:	4628      	mov	r0, r5
 8026556:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802655a:	f000 b889 	b.w	8026670 <_write_r>

0802655e <__sseek>:
 802655e:	b510      	push	{r4, lr}
 8026560:	460c      	mov	r4, r1
 8026562:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026566:	f000 fa8f 	bl	8026a88 <_lseek_r>
 802656a:	1c43      	adds	r3, r0, #1
 802656c:	89a3      	ldrh	r3, [r4, #12]
 802656e:	bf15      	itete	ne
 8026570:	6560      	strne	r0, [r4, #84]	; 0x54
 8026572:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8026576:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802657a:	81a3      	strheq	r3, [r4, #12]
 802657c:	bf18      	it	ne
 802657e:	81a3      	strhne	r3, [r4, #12]
 8026580:	bd10      	pop	{r4, pc}

08026582 <__sclose>:
 8026582:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026586:	f000 b8f3 	b.w	8026770 <_close_r>

0802658a <strchr>:
 802658a:	b2c9      	uxtb	r1, r1
 802658c:	4603      	mov	r3, r0
 802658e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8026592:	b11a      	cbz	r2, 802659c <strchr+0x12>
 8026594:	4291      	cmp	r1, r2
 8026596:	d1f9      	bne.n	802658c <strchr+0x2>
 8026598:	4618      	mov	r0, r3
 802659a:	4770      	bx	lr
 802659c:	2900      	cmp	r1, #0
 802659e:	bf0c      	ite	eq
 80265a0:	4618      	moveq	r0, r3
 80265a2:	2000      	movne	r0, #0
 80265a4:	4770      	bx	lr

080265a6 <strncmp>:
 80265a6:	b510      	push	{r4, lr}
 80265a8:	b16a      	cbz	r2, 80265c6 <strncmp+0x20>
 80265aa:	3901      	subs	r1, #1
 80265ac:	1884      	adds	r4, r0, r2
 80265ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80265b2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80265b6:	4293      	cmp	r3, r2
 80265b8:	d103      	bne.n	80265c2 <strncmp+0x1c>
 80265ba:	42a0      	cmp	r0, r4
 80265bc:	d001      	beq.n	80265c2 <strncmp+0x1c>
 80265be:	2b00      	cmp	r3, #0
 80265c0:	d1f5      	bne.n	80265ae <strncmp+0x8>
 80265c2:	1a98      	subs	r0, r3, r2
 80265c4:	bd10      	pop	{r4, pc}
 80265c6:	4610      	mov	r0, r2
 80265c8:	bd10      	pop	{r4, pc}
	...

080265cc <__swbuf_r>:
 80265cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80265ce:	460e      	mov	r6, r1
 80265d0:	4614      	mov	r4, r2
 80265d2:	4605      	mov	r5, r0
 80265d4:	b118      	cbz	r0, 80265de <__swbuf_r+0x12>
 80265d6:	6983      	ldr	r3, [r0, #24]
 80265d8:	b90b      	cbnz	r3, 80265de <__swbuf_r+0x12>
 80265da:	f000 f9cb 	bl	8026974 <__sinit>
 80265de:	4b21      	ldr	r3, [pc, #132]	; (8026664 <__swbuf_r+0x98>)
 80265e0:	429c      	cmp	r4, r3
 80265e2:	d12a      	bne.n	802663a <__swbuf_r+0x6e>
 80265e4:	686c      	ldr	r4, [r5, #4]
 80265e6:	69a3      	ldr	r3, [r4, #24]
 80265e8:	60a3      	str	r3, [r4, #8]
 80265ea:	89a3      	ldrh	r3, [r4, #12]
 80265ec:	071a      	lsls	r2, r3, #28
 80265ee:	d52e      	bpl.n	802664e <__swbuf_r+0x82>
 80265f0:	6923      	ldr	r3, [r4, #16]
 80265f2:	b363      	cbz	r3, 802664e <__swbuf_r+0x82>
 80265f4:	6923      	ldr	r3, [r4, #16]
 80265f6:	6820      	ldr	r0, [r4, #0]
 80265f8:	1ac0      	subs	r0, r0, r3
 80265fa:	6963      	ldr	r3, [r4, #20]
 80265fc:	b2f6      	uxtb	r6, r6
 80265fe:	4298      	cmp	r0, r3
 8026600:	4637      	mov	r7, r6
 8026602:	db04      	blt.n	802660e <__swbuf_r+0x42>
 8026604:	4621      	mov	r1, r4
 8026606:	4628      	mov	r0, r5
 8026608:	f000 f94a 	bl	80268a0 <_fflush_r>
 802660c:	bb28      	cbnz	r0, 802665a <__swbuf_r+0x8e>
 802660e:	68a3      	ldr	r3, [r4, #8]
 8026610:	3b01      	subs	r3, #1
 8026612:	60a3      	str	r3, [r4, #8]
 8026614:	6823      	ldr	r3, [r4, #0]
 8026616:	1c5a      	adds	r2, r3, #1
 8026618:	6022      	str	r2, [r4, #0]
 802661a:	701e      	strb	r6, [r3, #0]
 802661c:	6963      	ldr	r3, [r4, #20]
 802661e:	3001      	adds	r0, #1
 8026620:	4298      	cmp	r0, r3
 8026622:	d004      	beq.n	802662e <__swbuf_r+0x62>
 8026624:	89a3      	ldrh	r3, [r4, #12]
 8026626:	07db      	lsls	r3, r3, #31
 8026628:	d519      	bpl.n	802665e <__swbuf_r+0x92>
 802662a:	2e0a      	cmp	r6, #10
 802662c:	d117      	bne.n	802665e <__swbuf_r+0x92>
 802662e:	4621      	mov	r1, r4
 8026630:	4628      	mov	r0, r5
 8026632:	f000 f935 	bl	80268a0 <_fflush_r>
 8026636:	b190      	cbz	r0, 802665e <__swbuf_r+0x92>
 8026638:	e00f      	b.n	802665a <__swbuf_r+0x8e>
 802663a:	4b0b      	ldr	r3, [pc, #44]	; (8026668 <__swbuf_r+0x9c>)
 802663c:	429c      	cmp	r4, r3
 802663e:	d101      	bne.n	8026644 <__swbuf_r+0x78>
 8026640:	68ac      	ldr	r4, [r5, #8]
 8026642:	e7d0      	b.n	80265e6 <__swbuf_r+0x1a>
 8026644:	4b09      	ldr	r3, [pc, #36]	; (802666c <__swbuf_r+0xa0>)
 8026646:	429c      	cmp	r4, r3
 8026648:	bf08      	it	eq
 802664a:	68ec      	ldreq	r4, [r5, #12]
 802664c:	e7cb      	b.n	80265e6 <__swbuf_r+0x1a>
 802664e:	4621      	mov	r1, r4
 8026650:	4628      	mov	r0, r5
 8026652:	f000 f81f 	bl	8026694 <__swsetup_r>
 8026656:	2800      	cmp	r0, #0
 8026658:	d0cc      	beq.n	80265f4 <__swbuf_r+0x28>
 802665a:	f04f 37ff 	mov.w	r7, #4294967295
 802665e:	4638      	mov	r0, r7
 8026660:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8026662:	bf00      	nop
 8026664:	0802b89c 	.word	0x0802b89c
 8026668:	0802b8bc 	.word	0x0802b8bc
 802666c:	0802b87c 	.word	0x0802b87c

08026670 <_write_r>:
 8026670:	b538      	push	{r3, r4, r5, lr}
 8026672:	4c07      	ldr	r4, [pc, #28]	; (8026690 <_write_r+0x20>)
 8026674:	4605      	mov	r5, r0
 8026676:	4608      	mov	r0, r1
 8026678:	4611      	mov	r1, r2
 802667a:	2200      	movs	r2, #0
 802667c:	6022      	str	r2, [r4, #0]
 802667e:	461a      	mov	r2, r3
 8026680:	f7ea fd6d 	bl	801115e <_write>
 8026684:	1c43      	adds	r3, r0, #1
 8026686:	d102      	bne.n	802668e <_write_r+0x1e>
 8026688:	6823      	ldr	r3, [r4, #0]
 802668a:	b103      	cbz	r3, 802668e <_write_r+0x1e>
 802668c:	602b      	str	r3, [r5, #0]
 802668e:	bd38      	pop	{r3, r4, r5, pc}
 8026690:	20022ad0 	.word	0x20022ad0

08026694 <__swsetup_r>:
 8026694:	4b32      	ldr	r3, [pc, #200]	; (8026760 <__swsetup_r+0xcc>)
 8026696:	b570      	push	{r4, r5, r6, lr}
 8026698:	681d      	ldr	r5, [r3, #0]
 802669a:	4606      	mov	r6, r0
 802669c:	460c      	mov	r4, r1
 802669e:	b125      	cbz	r5, 80266aa <__swsetup_r+0x16>
 80266a0:	69ab      	ldr	r3, [r5, #24]
 80266a2:	b913      	cbnz	r3, 80266aa <__swsetup_r+0x16>
 80266a4:	4628      	mov	r0, r5
 80266a6:	f000 f965 	bl	8026974 <__sinit>
 80266aa:	4b2e      	ldr	r3, [pc, #184]	; (8026764 <__swsetup_r+0xd0>)
 80266ac:	429c      	cmp	r4, r3
 80266ae:	d10f      	bne.n	80266d0 <__swsetup_r+0x3c>
 80266b0:	686c      	ldr	r4, [r5, #4]
 80266b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80266b6:	b29a      	uxth	r2, r3
 80266b8:	0715      	lsls	r5, r2, #28
 80266ba:	d42c      	bmi.n	8026716 <__swsetup_r+0x82>
 80266bc:	06d0      	lsls	r0, r2, #27
 80266be:	d411      	bmi.n	80266e4 <__swsetup_r+0x50>
 80266c0:	2209      	movs	r2, #9
 80266c2:	6032      	str	r2, [r6, #0]
 80266c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80266c8:	81a3      	strh	r3, [r4, #12]
 80266ca:	f04f 30ff 	mov.w	r0, #4294967295
 80266ce:	bd70      	pop	{r4, r5, r6, pc}
 80266d0:	4b25      	ldr	r3, [pc, #148]	; (8026768 <__swsetup_r+0xd4>)
 80266d2:	429c      	cmp	r4, r3
 80266d4:	d101      	bne.n	80266da <__swsetup_r+0x46>
 80266d6:	68ac      	ldr	r4, [r5, #8]
 80266d8:	e7eb      	b.n	80266b2 <__swsetup_r+0x1e>
 80266da:	4b24      	ldr	r3, [pc, #144]	; (802676c <__swsetup_r+0xd8>)
 80266dc:	429c      	cmp	r4, r3
 80266de:	bf08      	it	eq
 80266e0:	68ec      	ldreq	r4, [r5, #12]
 80266e2:	e7e6      	b.n	80266b2 <__swsetup_r+0x1e>
 80266e4:	0751      	lsls	r1, r2, #29
 80266e6:	d512      	bpl.n	802670e <__swsetup_r+0x7a>
 80266e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80266ea:	b141      	cbz	r1, 80266fe <__swsetup_r+0x6a>
 80266ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80266f0:	4299      	cmp	r1, r3
 80266f2:	d002      	beq.n	80266fa <__swsetup_r+0x66>
 80266f4:	4630      	mov	r0, r6
 80266f6:	f7ff fd6f 	bl	80261d8 <_free_r>
 80266fa:	2300      	movs	r3, #0
 80266fc:	6363      	str	r3, [r4, #52]	; 0x34
 80266fe:	89a3      	ldrh	r3, [r4, #12]
 8026700:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8026704:	81a3      	strh	r3, [r4, #12]
 8026706:	2300      	movs	r3, #0
 8026708:	6063      	str	r3, [r4, #4]
 802670a:	6923      	ldr	r3, [r4, #16]
 802670c:	6023      	str	r3, [r4, #0]
 802670e:	89a3      	ldrh	r3, [r4, #12]
 8026710:	f043 0308 	orr.w	r3, r3, #8
 8026714:	81a3      	strh	r3, [r4, #12]
 8026716:	6923      	ldr	r3, [r4, #16]
 8026718:	b94b      	cbnz	r3, 802672e <__swsetup_r+0x9a>
 802671a:	89a3      	ldrh	r3, [r4, #12]
 802671c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8026720:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8026724:	d003      	beq.n	802672e <__swsetup_r+0x9a>
 8026726:	4621      	mov	r1, r4
 8026728:	4630      	mov	r0, r6
 802672a:	f000 f9e3 	bl	8026af4 <__smakebuf_r>
 802672e:	89a2      	ldrh	r2, [r4, #12]
 8026730:	f012 0301 	ands.w	r3, r2, #1
 8026734:	d00c      	beq.n	8026750 <__swsetup_r+0xbc>
 8026736:	2300      	movs	r3, #0
 8026738:	60a3      	str	r3, [r4, #8]
 802673a:	6963      	ldr	r3, [r4, #20]
 802673c:	425b      	negs	r3, r3
 802673e:	61a3      	str	r3, [r4, #24]
 8026740:	6923      	ldr	r3, [r4, #16]
 8026742:	b953      	cbnz	r3, 802675a <__swsetup_r+0xc6>
 8026744:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8026748:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 802674c:	d1ba      	bne.n	80266c4 <__swsetup_r+0x30>
 802674e:	bd70      	pop	{r4, r5, r6, pc}
 8026750:	0792      	lsls	r2, r2, #30
 8026752:	bf58      	it	pl
 8026754:	6963      	ldrpl	r3, [r4, #20]
 8026756:	60a3      	str	r3, [r4, #8]
 8026758:	e7f2      	b.n	8026740 <__swsetup_r+0xac>
 802675a:	2000      	movs	r0, #0
 802675c:	e7f7      	b.n	802674e <__swsetup_r+0xba>
 802675e:	bf00      	nop
 8026760:	20000020 	.word	0x20000020
 8026764:	0802b89c 	.word	0x0802b89c
 8026768:	0802b8bc 	.word	0x0802b8bc
 802676c:	0802b87c 	.word	0x0802b87c

08026770 <_close_r>:
 8026770:	b538      	push	{r3, r4, r5, lr}
 8026772:	4c06      	ldr	r4, [pc, #24]	; (802678c <_close_r+0x1c>)
 8026774:	2300      	movs	r3, #0
 8026776:	4605      	mov	r5, r0
 8026778:	4608      	mov	r0, r1
 802677a:	6023      	str	r3, [r4, #0]
 802677c:	f7ea fd3a 	bl	80111f4 <_close>
 8026780:	1c43      	adds	r3, r0, #1
 8026782:	d102      	bne.n	802678a <_close_r+0x1a>
 8026784:	6823      	ldr	r3, [r4, #0]
 8026786:	b103      	cbz	r3, 802678a <_close_r+0x1a>
 8026788:	602b      	str	r3, [r5, #0]
 802678a:	bd38      	pop	{r3, r4, r5, pc}
 802678c:	20022ad0 	.word	0x20022ad0

08026790 <__sflush_r>:
 8026790:	898a      	ldrh	r2, [r1, #12]
 8026792:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026796:	4605      	mov	r5, r0
 8026798:	0710      	lsls	r0, r2, #28
 802679a:	460c      	mov	r4, r1
 802679c:	d45a      	bmi.n	8026854 <__sflush_r+0xc4>
 802679e:	684b      	ldr	r3, [r1, #4]
 80267a0:	2b00      	cmp	r3, #0
 80267a2:	dc05      	bgt.n	80267b0 <__sflush_r+0x20>
 80267a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80267a6:	2b00      	cmp	r3, #0
 80267a8:	dc02      	bgt.n	80267b0 <__sflush_r+0x20>
 80267aa:	2000      	movs	r0, #0
 80267ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80267b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80267b2:	2e00      	cmp	r6, #0
 80267b4:	d0f9      	beq.n	80267aa <__sflush_r+0x1a>
 80267b6:	2300      	movs	r3, #0
 80267b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80267bc:	682f      	ldr	r7, [r5, #0]
 80267be:	602b      	str	r3, [r5, #0]
 80267c0:	d033      	beq.n	802682a <__sflush_r+0x9a>
 80267c2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80267c4:	89a3      	ldrh	r3, [r4, #12]
 80267c6:	075a      	lsls	r2, r3, #29
 80267c8:	d505      	bpl.n	80267d6 <__sflush_r+0x46>
 80267ca:	6863      	ldr	r3, [r4, #4]
 80267cc:	1ac0      	subs	r0, r0, r3
 80267ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80267d0:	b10b      	cbz	r3, 80267d6 <__sflush_r+0x46>
 80267d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80267d4:	1ac0      	subs	r0, r0, r3
 80267d6:	2300      	movs	r3, #0
 80267d8:	4602      	mov	r2, r0
 80267da:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80267dc:	6a21      	ldr	r1, [r4, #32]
 80267de:	4628      	mov	r0, r5
 80267e0:	47b0      	blx	r6
 80267e2:	1c43      	adds	r3, r0, #1
 80267e4:	89a3      	ldrh	r3, [r4, #12]
 80267e6:	d106      	bne.n	80267f6 <__sflush_r+0x66>
 80267e8:	6829      	ldr	r1, [r5, #0]
 80267ea:	291d      	cmp	r1, #29
 80267ec:	d84b      	bhi.n	8026886 <__sflush_r+0xf6>
 80267ee:	4a2b      	ldr	r2, [pc, #172]	; (802689c <__sflush_r+0x10c>)
 80267f0:	40ca      	lsrs	r2, r1
 80267f2:	07d6      	lsls	r6, r2, #31
 80267f4:	d547      	bpl.n	8026886 <__sflush_r+0xf6>
 80267f6:	2200      	movs	r2, #0
 80267f8:	6062      	str	r2, [r4, #4]
 80267fa:	04d9      	lsls	r1, r3, #19
 80267fc:	6922      	ldr	r2, [r4, #16]
 80267fe:	6022      	str	r2, [r4, #0]
 8026800:	d504      	bpl.n	802680c <__sflush_r+0x7c>
 8026802:	1c42      	adds	r2, r0, #1
 8026804:	d101      	bne.n	802680a <__sflush_r+0x7a>
 8026806:	682b      	ldr	r3, [r5, #0]
 8026808:	b903      	cbnz	r3, 802680c <__sflush_r+0x7c>
 802680a:	6560      	str	r0, [r4, #84]	; 0x54
 802680c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802680e:	602f      	str	r7, [r5, #0]
 8026810:	2900      	cmp	r1, #0
 8026812:	d0ca      	beq.n	80267aa <__sflush_r+0x1a>
 8026814:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8026818:	4299      	cmp	r1, r3
 802681a:	d002      	beq.n	8026822 <__sflush_r+0x92>
 802681c:	4628      	mov	r0, r5
 802681e:	f7ff fcdb 	bl	80261d8 <_free_r>
 8026822:	2000      	movs	r0, #0
 8026824:	6360      	str	r0, [r4, #52]	; 0x34
 8026826:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802682a:	6a21      	ldr	r1, [r4, #32]
 802682c:	2301      	movs	r3, #1
 802682e:	4628      	mov	r0, r5
 8026830:	47b0      	blx	r6
 8026832:	1c41      	adds	r1, r0, #1
 8026834:	d1c6      	bne.n	80267c4 <__sflush_r+0x34>
 8026836:	682b      	ldr	r3, [r5, #0]
 8026838:	2b00      	cmp	r3, #0
 802683a:	d0c3      	beq.n	80267c4 <__sflush_r+0x34>
 802683c:	2b1d      	cmp	r3, #29
 802683e:	d001      	beq.n	8026844 <__sflush_r+0xb4>
 8026840:	2b16      	cmp	r3, #22
 8026842:	d101      	bne.n	8026848 <__sflush_r+0xb8>
 8026844:	602f      	str	r7, [r5, #0]
 8026846:	e7b0      	b.n	80267aa <__sflush_r+0x1a>
 8026848:	89a3      	ldrh	r3, [r4, #12]
 802684a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802684e:	81a3      	strh	r3, [r4, #12]
 8026850:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8026854:	690f      	ldr	r7, [r1, #16]
 8026856:	2f00      	cmp	r7, #0
 8026858:	d0a7      	beq.n	80267aa <__sflush_r+0x1a>
 802685a:	0793      	lsls	r3, r2, #30
 802685c:	680e      	ldr	r6, [r1, #0]
 802685e:	bf08      	it	eq
 8026860:	694b      	ldreq	r3, [r1, #20]
 8026862:	600f      	str	r7, [r1, #0]
 8026864:	bf18      	it	ne
 8026866:	2300      	movne	r3, #0
 8026868:	eba6 0807 	sub.w	r8, r6, r7
 802686c:	608b      	str	r3, [r1, #8]
 802686e:	f1b8 0f00 	cmp.w	r8, #0
 8026872:	dd9a      	ble.n	80267aa <__sflush_r+0x1a>
 8026874:	4643      	mov	r3, r8
 8026876:	463a      	mov	r2, r7
 8026878:	6a21      	ldr	r1, [r4, #32]
 802687a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802687c:	4628      	mov	r0, r5
 802687e:	47b0      	blx	r6
 8026880:	2800      	cmp	r0, #0
 8026882:	dc07      	bgt.n	8026894 <__sflush_r+0x104>
 8026884:	89a3      	ldrh	r3, [r4, #12]
 8026886:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802688a:	81a3      	strh	r3, [r4, #12]
 802688c:	f04f 30ff 	mov.w	r0, #4294967295
 8026890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8026894:	4407      	add	r7, r0
 8026896:	eba8 0800 	sub.w	r8, r8, r0
 802689a:	e7e8      	b.n	802686e <__sflush_r+0xde>
 802689c:	20400001 	.word	0x20400001

080268a0 <_fflush_r>:
 80268a0:	b538      	push	{r3, r4, r5, lr}
 80268a2:	690b      	ldr	r3, [r1, #16]
 80268a4:	4605      	mov	r5, r0
 80268a6:	460c      	mov	r4, r1
 80268a8:	b1db      	cbz	r3, 80268e2 <_fflush_r+0x42>
 80268aa:	b118      	cbz	r0, 80268b4 <_fflush_r+0x14>
 80268ac:	6983      	ldr	r3, [r0, #24]
 80268ae:	b90b      	cbnz	r3, 80268b4 <_fflush_r+0x14>
 80268b0:	f000 f860 	bl	8026974 <__sinit>
 80268b4:	4b0c      	ldr	r3, [pc, #48]	; (80268e8 <_fflush_r+0x48>)
 80268b6:	429c      	cmp	r4, r3
 80268b8:	d109      	bne.n	80268ce <_fflush_r+0x2e>
 80268ba:	686c      	ldr	r4, [r5, #4]
 80268bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80268c0:	b17b      	cbz	r3, 80268e2 <_fflush_r+0x42>
 80268c2:	4621      	mov	r1, r4
 80268c4:	4628      	mov	r0, r5
 80268c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80268ca:	f7ff bf61 	b.w	8026790 <__sflush_r>
 80268ce:	4b07      	ldr	r3, [pc, #28]	; (80268ec <_fflush_r+0x4c>)
 80268d0:	429c      	cmp	r4, r3
 80268d2:	d101      	bne.n	80268d8 <_fflush_r+0x38>
 80268d4:	68ac      	ldr	r4, [r5, #8]
 80268d6:	e7f1      	b.n	80268bc <_fflush_r+0x1c>
 80268d8:	4b05      	ldr	r3, [pc, #20]	; (80268f0 <_fflush_r+0x50>)
 80268da:	429c      	cmp	r4, r3
 80268dc:	bf08      	it	eq
 80268de:	68ec      	ldreq	r4, [r5, #12]
 80268e0:	e7ec      	b.n	80268bc <_fflush_r+0x1c>
 80268e2:	2000      	movs	r0, #0
 80268e4:	bd38      	pop	{r3, r4, r5, pc}
 80268e6:	bf00      	nop
 80268e8:	0802b89c 	.word	0x0802b89c
 80268ec:	0802b8bc 	.word	0x0802b8bc
 80268f0:	0802b87c 	.word	0x0802b87c

080268f4 <_cleanup_r>:
 80268f4:	4901      	ldr	r1, [pc, #4]	; (80268fc <_cleanup_r+0x8>)
 80268f6:	f000 b8a9 	b.w	8026a4c <_fwalk_reent>
 80268fa:	bf00      	nop
 80268fc:	080268a1 	.word	0x080268a1

08026900 <std.isra.0>:
 8026900:	2300      	movs	r3, #0
 8026902:	b510      	push	{r4, lr}
 8026904:	4604      	mov	r4, r0
 8026906:	6003      	str	r3, [r0, #0]
 8026908:	6043      	str	r3, [r0, #4]
 802690a:	6083      	str	r3, [r0, #8]
 802690c:	8181      	strh	r1, [r0, #12]
 802690e:	6643      	str	r3, [r0, #100]	; 0x64
 8026910:	81c2      	strh	r2, [r0, #14]
 8026912:	6103      	str	r3, [r0, #16]
 8026914:	6143      	str	r3, [r0, #20]
 8026916:	6183      	str	r3, [r0, #24]
 8026918:	4619      	mov	r1, r3
 802691a:	2208      	movs	r2, #8
 802691c:	305c      	adds	r0, #92	; 0x5c
 802691e:	f7ff fc53 	bl	80261c8 <memset>
 8026922:	4b05      	ldr	r3, [pc, #20]	; (8026938 <std.isra.0+0x38>)
 8026924:	6263      	str	r3, [r4, #36]	; 0x24
 8026926:	4b05      	ldr	r3, [pc, #20]	; (802693c <std.isra.0+0x3c>)
 8026928:	62a3      	str	r3, [r4, #40]	; 0x28
 802692a:	4b05      	ldr	r3, [pc, #20]	; (8026940 <std.isra.0+0x40>)
 802692c:	62e3      	str	r3, [r4, #44]	; 0x2c
 802692e:	4b05      	ldr	r3, [pc, #20]	; (8026944 <std.isra.0+0x44>)
 8026930:	6224      	str	r4, [r4, #32]
 8026932:	6323      	str	r3, [r4, #48]	; 0x30
 8026934:	bd10      	pop	{r4, pc}
 8026936:	bf00      	nop
 8026938:	08026505 	.word	0x08026505
 802693c:	08026527 	.word	0x08026527
 8026940:	0802655f 	.word	0x0802655f
 8026944:	08026583 	.word	0x08026583

08026948 <__sfmoreglue>:
 8026948:	b570      	push	{r4, r5, r6, lr}
 802694a:	1e4a      	subs	r2, r1, #1
 802694c:	2568      	movs	r5, #104	; 0x68
 802694e:	4355      	muls	r5, r2
 8026950:	460e      	mov	r6, r1
 8026952:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8026956:	f7ff fc8d 	bl	8026274 <_malloc_r>
 802695a:	4604      	mov	r4, r0
 802695c:	b140      	cbz	r0, 8026970 <__sfmoreglue+0x28>
 802695e:	2100      	movs	r1, #0
 8026960:	e880 0042 	stmia.w	r0, {r1, r6}
 8026964:	300c      	adds	r0, #12
 8026966:	60a0      	str	r0, [r4, #8]
 8026968:	f105 0268 	add.w	r2, r5, #104	; 0x68
 802696c:	f7ff fc2c 	bl	80261c8 <memset>
 8026970:	4620      	mov	r0, r4
 8026972:	bd70      	pop	{r4, r5, r6, pc}

08026974 <__sinit>:
 8026974:	6983      	ldr	r3, [r0, #24]
 8026976:	b510      	push	{r4, lr}
 8026978:	4604      	mov	r4, r0
 802697a:	bb33      	cbnz	r3, 80269ca <__sinit+0x56>
 802697c:	6483      	str	r3, [r0, #72]	; 0x48
 802697e:	64c3      	str	r3, [r0, #76]	; 0x4c
 8026980:	6503      	str	r3, [r0, #80]	; 0x50
 8026982:	4b12      	ldr	r3, [pc, #72]	; (80269cc <__sinit+0x58>)
 8026984:	4a12      	ldr	r2, [pc, #72]	; (80269d0 <__sinit+0x5c>)
 8026986:	681b      	ldr	r3, [r3, #0]
 8026988:	6282      	str	r2, [r0, #40]	; 0x28
 802698a:	4298      	cmp	r0, r3
 802698c:	bf04      	itt	eq
 802698e:	2301      	moveq	r3, #1
 8026990:	6183      	streq	r3, [r0, #24]
 8026992:	f000 f81f 	bl	80269d4 <__sfp>
 8026996:	6060      	str	r0, [r4, #4]
 8026998:	4620      	mov	r0, r4
 802699a:	f000 f81b 	bl	80269d4 <__sfp>
 802699e:	60a0      	str	r0, [r4, #8]
 80269a0:	4620      	mov	r0, r4
 80269a2:	f000 f817 	bl	80269d4 <__sfp>
 80269a6:	2200      	movs	r2, #0
 80269a8:	60e0      	str	r0, [r4, #12]
 80269aa:	2104      	movs	r1, #4
 80269ac:	6860      	ldr	r0, [r4, #4]
 80269ae:	f7ff ffa7 	bl	8026900 <std.isra.0>
 80269b2:	2201      	movs	r2, #1
 80269b4:	2109      	movs	r1, #9
 80269b6:	68a0      	ldr	r0, [r4, #8]
 80269b8:	f7ff ffa2 	bl	8026900 <std.isra.0>
 80269bc:	2202      	movs	r2, #2
 80269be:	2112      	movs	r1, #18
 80269c0:	68e0      	ldr	r0, [r4, #12]
 80269c2:	f7ff ff9d 	bl	8026900 <std.isra.0>
 80269c6:	2301      	movs	r3, #1
 80269c8:	61a3      	str	r3, [r4, #24]
 80269ca:	bd10      	pop	{r4, pc}
 80269cc:	0802b878 	.word	0x0802b878
 80269d0:	080268f5 	.word	0x080268f5

080269d4 <__sfp>:
 80269d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80269d6:	4b1c      	ldr	r3, [pc, #112]	; (8026a48 <__sfp+0x74>)
 80269d8:	681e      	ldr	r6, [r3, #0]
 80269da:	69b3      	ldr	r3, [r6, #24]
 80269dc:	4607      	mov	r7, r0
 80269de:	b913      	cbnz	r3, 80269e6 <__sfp+0x12>
 80269e0:	4630      	mov	r0, r6
 80269e2:	f7ff ffc7 	bl	8026974 <__sinit>
 80269e6:	3648      	adds	r6, #72	; 0x48
 80269e8:	68b4      	ldr	r4, [r6, #8]
 80269ea:	6873      	ldr	r3, [r6, #4]
 80269ec:	3b01      	subs	r3, #1
 80269ee:	d503      	bpl.n	80269f8 <__sfp+0x24>
 80269f0:	6833      	ldr	r3, [r6, #0]
 80269f2:	b133      	cbz	r3, 8026a02 <__sfp+0x2e>
 80269f4:	6836      	ldr	r6, [r6, #0]
 80269f6:	e7f7      	b.n	80269e8 <__sfp+0x14>
 80269f8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80269fc:	b16d      	cbz	r5, 8026a1a <__sfp+0x46>
 80269fe:	3468      	adds	r4, #104	; 0x68
 8026a00:	e7f4      	b.n	80269ec <__sfp+0x18>
 8026a02:	2104      	movs	r1, #4
 8026a04:	4638      	mov	r0, r7
 8026a06:	f7ff ff9f 	bl	8026948 <__sfmoreglue>
 8026a0a:	6030      	str	r0, [r6, #0]
 8026a0c:	2800      	cmp	r0, #0
 8026a0e:	d1f1      	bne.n	80269f4 <__sfp+0x20>
 8026a10:	230c      	movs	r3, #12
 8026a12:	603b      	str	r3, [r7, #0]
 8026a14:	4604      	mov	r4, r0
 8026a16:	4620      	mov	r0, r4
 8026a18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8026a1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8026a1e:	81e3      	strh	r3, [r4, #14]
 8026a20:	2301      	movs	r3, #1
 8026a22:	81a3      	strh	r3, [r4, #12]
 8026a24:	6665      	str	r5, [r4, #100]	; 0x64
 8026a26:	6025      	str	r5, [r4, #0]
 8026a28:	60a5      	str	r5, [r4, #8]
 8026a2a:	6065      	str	r5, [r4, #4]
 8026a2c:	6125      	str	r5, [r4, #16]
 8026a2e:	6165      	str	r5, [r4, #20]
 8026a30:	61a5      	str	r5, [r4, #24]
 8026a32:	2208      	movs	r2, #8
 8026a34:	4629      	mov	r1, r5
 8026a36:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8026a3a:	f7ff fbc5 	bl	80261c8 <memset>
 8026a3e:	6365      	str	r5, [r4, #52]	; 0x34
 8026a40:	63a5      	str	r5, [r4, #56]	; 0x38
 8026a42:	64a5      	str	r5, [r4, #72]	; 0x48
 8026a44:	64e5      	str	r5, [r4, #76]	; 0x4c
 8026a46:	e7e6      	b.n	8026a16 <__sfp+0x42>
 8026a48:	0802b878 	.word	0x0802b878

08026a4c <_fwalk_reent>:
 8026a4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8026a50:	4680      	mov	r8, r0
 8026a52:	4689      	mov	r9, r1
 8026a54:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8026a58:	2600      	movs	r6, #0
 8026a5a:	b914      	cbnz	r4, 8026a62 <_fwalk_reent+0x16>
 8026a5c:	4630      	mov	r0, r6
 8026a5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8026a62:	68a5      	ldr	r5, [r4, #8]
 8026a64:	6867      	ldr	r7, [r4, #4]
 8026a66:	3f01      	subs	r7, #1
 8026a68:	d501      	bpl.n	8026a6e <_fwalk_reent+0x22>
 8026a6a:	6824      	ldr	r4, [r4, #0]
 8026a6c:	e7f5      	b.n	8026a5a <_fwalk_reent+0xe>
 8026a6e:	89ab      	ldrh	r3, [r5, #12]
 8026a70:	2b01      	cmp	r3, #1
 8026a72:	d907      	bls.n	8026a84 <_fwalk_reent+0x38>
 8026a74:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8026a78:	3301      	adds	r3, #1
 8026a7a:	d003      	beq.n	8026a84 <_fwalk_reent+0x38>
 8026a7c:	4629      	mov	r1, r5
 8026a7e:	4640      	mov	r0, r8
 8026a80:	47c8      	blx	r9
 8026a82:	4306      	orrs	r6, r0
 8026a84:	3568      	adds	r5, #104	; 0x68
 8026a86:	e7ee      	b.n	8026a66 <_fwalk_reent+0x1a>

08026a88 <_lseek_r>:
 8026a88:	b538      	push	{r3, r4, r5, lr}
 8026a8a:	4c07      	ldr	r4, [pc, #28]	; (8026aa8 <_lseek_r+0x20>)
 8026a8c:	4605      	mov	r5, r0
 8026a8e:	4608      	mov	r0, r1
 8026a90:	4611      	mov	r1, r2
 8026a92:	2200      	movs	r2, #0
 8026a94:	6022      	str	r2, [r4, #0]
 8026a96:	461a      	mov	r2, r3
 8026a98:	f7ea fbd3 	bl	8011242 <_lseek>
 8026a9c:	1c43      	adds	r3, r0, #1
 8026a9e:	d102      	bne.n	8026aa6 <_lseek_r+0x1e>
 8026aa0:	6823      	ldr	r3, [r4, #0]
 8026aa2:	b103      	cbz	r3, 8026aa6 <_lseek_r+0x1e>
 8026aa4:	602b      	str	r3, [r5, #0]
 8026aa6:	bd38      	pop	{r3, r4, r5, pc}
 8026aa8:	20022ad0 	.word	0x20022ad0

08026aac <__swhatbuf_r>:
 8026aac:	b570      	push	{r4, r5, r6, lr}
 8026aae:	460e      	mov	r6, r1
 8026ab0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026ab4:	2900      	cmp	r1, #0
 8026ab6:	b090      	sub	sp, #64	; 0x40
 8026ab8:	4614      	mov	r4, r2
 8026aba:	461d      	mov	r5, r3
 8026abc:	da07      	bge.n	8026ace <__swhatbuf_r+0x22>
 8026abe:	2300      	movs	r3, #0
 8026ac0:	602b      	str	r3, [r5, #0]
 8026ac2:	89b3      	ldrh	r3, [r6, #12]
 8026ac4:	061a      	lsls	r2, r3, #24
 8026ac6:	d410      	bmi.n	8026aea <__swhatbuf_r+0x3e>
 8026ac8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8026acc:	e00e      	b.n	8026aec <__swhatbuf_r+0x40>
 8026ace:	aa01      	add	r2, sp, #4
 8026ad0:	f000 fc8a 	bl	80273e8 <_fstat_r>
 8026ad4:	2800      	cmp	r0, #0
 8026ad6:	dbf2      	blt.n	8026abe <__swhatbuf_r+0x12>
 8026ad8:	9a02      	ldr	r2, [sp, #8]
 8026ada:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8026ade:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8026ae2:	425a      	negs	r2, r3
 8026ae4:	415a      	adcs	r2, r3
 8026ae6:	602a      	str	r2, [r5, #0]
 8026ae8:	e7ee      	b.n	8026ac8 <__swhatbuf_r+0x1c>
 8026aea:	2340      	movs	r3, #64	; 0x40
 8026aec:	2000      	movs	r0, #0
 8026aee:	6023      	str	r3, [r4, #0]
 8026af0:	b010      	add	sp, #64	; 0x40
 8026af2:	bd70      	pop	{r4, r5, r6, pc}

08026af4 <__smakebuf_r>:
 8026af4:	898b      	ldrh	r3, [r1, #12]
 8026af6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8026af8:	079d      	lsls	r5, r3, #30
 8026afa:	4606      	mov	r6, r0
 8026afc:	460c      	mov	r4, r1
 8026afe:	d507      	bpl.n	8026b10 <__smakebuf_r+0x1c>
 8026b00:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8026b04:	6023      	str	r3, [r4, #0]
 8026b06:	6123      	str	r3, [r4, #16]
 8026b08:	2301      	movs	r3, #1
 8026b0a:	6163      	str	r3, [r4, #20]
 8026b0c:	b002      	add	sp, #8
 8026b0e:	bd70      	pop	{r4, r5, r6, pc}
 8026b10:	ab01      	add	r3, sp, #4
 8026b12:	466a      	mov	r2, sp
 8026b14:	f7ff ffca 	bl	8026aac <__swhatbuf_r>
 8026b18:	9900      	ldr	r1, [sp, #0]
 8026b1a:	4605      	mov	r5, r0
 8026b1c:	4630      	mov	r0, r6
 8026b1e:	f7ff fba9 	bl	8026274 <_malloc_r>
 8026b22:	b948      	cbnz	r0, 8026b38 <__smakebuf_r+0x44>
 8026b24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8026b28:	059a      	lsls	r2, r3, #22
 8026b2a:	d4ef      	bmi.n	8026b0c <__smakebuf_r+0x18>
 8026b2c:	f023 0303 	bic.w	r3, r3, #3
 8026b30:	f043 0302 	orr.w	r3, r3, #2
 8026b34:	81a3      	strh	r3, [r4, #12]
 8026b36:	e7e3      	b.n	8026b00 <__smakebuf_r+0xc>
 8026b38:	4b0d      	ldr	r3, [pc, #52]	; (8026b70 <__smakebuf_r+0x7c>)
 8026b3a:	62b3      	str	r3, [r6, #40]	; 0x28
 8026b3c:	89a3      	ldrh	r3, [r4, #12]
 8026b3e:	6020      	str	r0, [r4, #0]
 8026b40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8026b44:	81a3      	strh	r3, [r4, #12]
 8026b46:	9b00      	ldr	r3, [sp, #0]
 8026b48:	6163      	str	r3, [r4, #20]
 8026b4a:	9b01      	ldr	r3, [sp, #4]
 8026b4c:	6120      	str	r0, [r4, #16]
 8026b4e:	b15b      	cbz	r3, 8026b68 <__smakebuf_r+0x74>
 8026b50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8026b54:	4630      	mov	r0, r6
 8026b56:	f000 fc59 	bl	802740c <_isatty_r>
 8026b5a:	b128      	cbz	r0, 8026b68 <__smakebuf_r+0x74>
 8026b5c:	89a3      	ldrh	r3, [r4, #12]
 8026b5e:	f023 0303 	bic.w	r3, r3, #3
 8026b62:	f043 0301 	orr.w	r3, r3, #1
 8026b66:	81a3      	strh	r3, [r4, #12]
 8026b68:	89a3      	ldrh	r3, [r4, #12]
 8026b6a:	431d      	orrs	r5, r3
 8026b6c:	81a5      	strh	r5, [r4, #12]
 8026b6e:	e7cd      	b.n	8026b0c <__smakebuf_r+0x18>
 8026b70:	080268f5 	.word	0x080268f5

08026b74 <__malloc_lock>:
 8026b74:	4770      	bx	lr

08026b76 <__malloc_unlock>:
 8026b76:	4770      	bx	lr

08026b78 <__ssputs_r>:
 8026b78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026b7c:	688e      	ldr	r6, [r1, #8]
 8026b7e:	429e      	cmp	r6, r3
 8026b80:	4682      	mov	sl, r0
 8026b82:	460c      	mov	r4, r1
 8026b84:	4691      	mov	r9, r2
 8026b86:	4698      	mov	r8, r3
 8026b88:	d835      	bhi.n	8026bf6 <__ssputs_r+0x7e>
 8026b8a:	898a      	ldrh	r2, [r1, #12]
 8026b8c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8026b90:	d031      	beq.n	8026bf6 <__ssputs_r+0x7e>
 8026b92:	6825      	ldr	r5, [r4, #0]
 8026b94:	6909      	ldr	r1, [r1, #16]
 8026b96:	1a6f      	subs	r7, r5, r1
 8026b98:	6965      	ldr	r5, [r4, #20]
 8026b9a:	2302      	movs	r3, #2
 8026b9c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8026ba0:	fb95 f5f3 	sdiv	r5, r5, r3
 8026ba4:	f108 0301 	add.w	r3, r8, #1
 8026ba8:	443b      	add	r3, r7
 8026baa:	429d      	cmp	r5, r3
 8026bac:	bf38      	it	cc
 8026bae:	461d      	movcc	r5, r3
 8026bb0:	0553      	lsls	r3, r2, #21
 8026bb2:	d531      	bpl.n	8026c18 <__ssputs_r+0xa0>
 8026bb4:	4629      	mov	r1, r5
 8026bb6:	f7ff fb5d 	bl	8026274 <_malloc_r>
 8026bba:	4606      	mov	r6, r0
 8026bbc:	b950      	cbnz	r0, 8026bd4 <__ssputs_r+0x5c>
 8026bbe:	230c      	movs	r3, #12
 8026bc0:	f8ca 3000 	str.w	r3, [sl]
 8026bc4:	89a3      	ldrh	r3, [r4, #12]
 8026bc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8026bca:	81a3      	strh	r3, [r4, #12]
 8026bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8026bd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026bd4:	463a      	mov	r2, r7
 8026bd6:	6921      	ldr	r1, [r4, #16]
 8026bd8:	f7ff fad1 	bl	802617e <memcpy>
 8026bdc:	89a3      	ldrh	r3, [r4, #12]
 8026bde:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8026be2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8026be6:	81a3      	strh	r3, [r4, #12]
 8026be8:	6126      	str	r6, [r4, #16]
 8026bea:	6165      	str	r5, [r4, #20]
 8026bec:	443e      	add	r6, r7
 8026bee:	1bed      	subs	r5, r5, r7
 8026bf0:	6026      	str	r6, [r4, #0]
 8026bf2:	60a5      	str	r5, [r4, #8]
 8026bf4:	4646      	mov	r6, r8
 8026bf6:	4546      	cmp	r6, r8
 8026bf8:	bf28      	it	cs
 8026bfa:	4646      	movcs	r6, r8
 8026bfc:	4632      	mov	r2, r6
 8026bfe:	4649      	mov	r1, r9
 8026c00:	6820      	ldr	r0, [r4, #0]
 8026c02:	f7ff fac7 	bl	8026194 <memmove>
 8026c06:	68a3      	ldr	r3, [r4, #8]
 8026c08:	1b9b      	subs	r3, r3, r6
 8026c0a:	60a3      	str	r3, [r4, #8]
 8026c0c:	6823      	ldr	r3, [r4, #0]
 8026c0e:	441e      	add	r6, r3
 8026c10:	6026      	str	r6, [r4, #0]
 8026c12:	2000      	movs	r0, #0
 8026c14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026c18:	462a      	mov	r2, r5
 8026c1a:	f000 fc07 	bl	802742c <_realloc_r>
 8026c1e:	4606      	mov	r6, r0
 8026c20:	2800      	cmp	r0, #0
 8026c22:	d1e1      	bne.n	8026be8 <__ssputs_r+0x70>
 8026c24:	6921      	ldr	r1, [r4, #16]
 8026c26:	4650      	mov	r0, sl
 8026c28:	f7ff fad6 	bl	80261d8 <_free_r>
 8026c2c:	e7c7      	b.n	8026bbe <__ssputs_r+0x46>
	...

08026c30 <_svfiprintf_r>:
 8026c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026c34:	b09d      	sub	sp, #116	; 0x74
 8026c36:	4680      	mov	r8, r0
 8026c38:	9303      	str	r3, [sp, #12]
 8026c3a:	898b      	ldrh	r3, [r1, #12]
 8026c3c:	061c      	lsls	r4, r3, #24
 8026c3e:	460d      	mov	r5, r1
 8026c40:	4616      	mov	r6, r2
 8026c42:	d50f      	bpl.n	8026c64 <_svfiprintf_r+0x34>
 8026c44:	690b      	ldr	r3, [r1, #16]
 8026c46:	b96b      	cbnz	r3, 8026c64 <_svfiprintf_r+0x34>
 8026c48:	2140      	movs	r1, #64	; 0x40
 8026c4a:	f7ff fb13 	bl	8026274 <_malloc_r>
 8026c4e:	6028      	str	r0, [r5, #0]
 8026c50:	6128      	str	r0, [r5, #16]
 8026c52:	b928      	cbnz	r0, 8026c60 <_svfiprintf_r+0x30>
 8026c54:	230c      	movs	r3, #12
 8026c56:	f8c8 3000 	str.w	r3, [r8]
 8026c5a:	f04f 30ff 	mov.w	r0, #4294967295
 8026c5e:	e0c5      	b.n	8026dec <_svfiprintf_r+0x1bc>
 8026c60:	2340      	movs	r3, #64	; 0x40
 8026c62:	616b      	str	r3, [r5, #20]
 8026c64:	2300      	movs	r3, #0
 8026c66:	9309      	str	r3, [sp, #36]	; 0x24
 8026c68:	2320      	movs	r3, #32
 8026c6a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8026c6e:	2330      	movs	r3, #48	; 0x30
 8026c70:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8026c74:	f04f 0b01 	mov.w	fp, #1
 8026c78:	4637      	mov	r7, r6
 8026c7a:	463c      	mov	r4, r7
 8026c7c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8026c80:	2b00      	cmp	r3, #0
 8026c82:	d13c      	bne.n	8026cfe <_svfiprintf_r+0xce>
 8026c84:	ebb7 0a06 	subs.w	sl, r7, r6
 8026c88:	d00b      	beq.n	8026ca2 <_svfiprintf_r+0x72>
 8026c8a:	4653      	mov	r3, sl
 8026c8c:	4632      	mov	r2, r6
 8026c8e:	4629      	mov	r1, r5
 8026c90:	4640      	mov	r0, r8
 8026c92:	f7ff ff71 	bl	8026b78 <__ssputs_r>
 8026c96:	3001      	adds	r0, #1
 8026c98:	f000 80a3 	beq.w	8026de2 <_svfiprintf_r+0x1b2>
 8026c9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026c9e:	4453      	add	r3, sl
 8026ca0:	9309      	str	r3, [sp, #36]	; 0x24
 8026ca2:	783b      	ldrb	r3, [r7, #0]
 8026ca4:	2b00      	cmp	r3, #0
 8026ca6:	f000 809c 	beq.w	8026de2 <_svfiprintf_r+0x1b2>
 8026caa:	2300      	movs	r3, #0
 8026cac:	f04f 32ff 	mov.w	r2, #4294967295
 8026cb0:	9304      	str	r3, [sp, #16]
 8026cb2:	9307      	str	r3, [sp, #28]
 8026cb4:	9205      	str	r2, [sp, #20]
 8026cb6:	9306      	str	r3, [sp, #24]
 8026cb8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8026cbc:	931a      	str	r3, [sp, #104]	; 0x68
 8026cbe:	2205      	movs	r2, #5
 8026cc0:	7821      	ldrb	r1, [r4, #0]
 8026cc2:	4850      	ldr	r0, [pc, #320]	; (8026e04 <_svfiprintf_r+0x1d4>)
 8026cc4:	f7e9 f9d4 	bl	8010070 <memchr>
 8026cc8:	1c67      	adds	r7, r4, #1
 8026cca:	9b04      	ldr	r3, [sp, #16]
 8026ccc:	b9d8      	cbnz	r0, 8026d06 <_svfiprintf_r+0xd6>
 8026cce:	06d9      	lsls	r1, r3, #27
 8026cd0:	bf44      	itt	mi
 8026cd2:	2220      	movmi	r2, #32
 8026cd4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8026cd8:	071a      	lsls	r2, r3, #28
 8026cda:	bf44      	itt	mi
 8026cdc:	222b      	movmi	r2, #43	; 0x2b
 8026cde:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8026ce2:	7822      	ldrb	r2, [r4, #0]
 8026ce4:	2a2a      	cmp	r2, #42	; 0x2a
 8026ce6:	d016      	beq.n	8026d16 <_svfiprintf_r+0xe6>
 8026ce8:	9a07      	ldr	r2, [sp, #28]
 8026cea:	2100      	movs	r1, #0
 8026cec:	200a      	movs	r0, #10
 8026cee:	4627      	mov	r7, r4
 8026cf0:	3401      	adds	r4, #1
 8026cf2:	783b      	ldrb	r3, [r7, #0]
 8026cf4:	3b30      	subs	r3, #48	; 0x30
 8026cf6:	2b09      	cmp	r3, #9
 8026cf8:	d951      	bls.n	8026d9e <_svfiprintf_r+0x16e>
 8026cfa:	b1c9      	cbz	r1, 8026d30 <_svfiprintf_r+0x100>
 8026cfc:	e011      	b.n	8026d22 <_svfiprintf_r+0xf2>
 8026cfe:	2b25      	cmp	r3, #37	; 0x25
 8026d00:	d0c0      	beq.n	8026c84 <_svfiprintf_r+0x54>
 8026d02:	4627      	mov	r7, r4
 8026d04:	e7b9      	b.n	8026c7a <_svfiprintf_r+0x4a>
 8026d06:	4a3f      	ldr	r2, [pc, #252]	; (8026e04 <_svfiprintf_r+0x1d4>)
 8026d08:	1a80      	subs	r0, r0, r2
 8026d0a:	fa0b f000 	lsl.w	r0, fp, r0
 8026d0e:	4318      	orrs	r0, r3
 8026d10:	9004      	str	r0, [sp, #16]
 8026d12:	463c      	mov	r4, r7
 8026d14:	e7d3      	b.n	8026cbe <_svfiprintf_r+0x8e>
 8026d16:	9a03      	ldr	r2, [sp, #12]
 8026d18:	1d11      	adds	r1, r2, #4
 8026d1a:	6812      	ldr	r2, [r2, #0]
 8026d1c:	9103      	str	r1, [sp, #12]
 8026d1e:	2a00      	cmp	r2, #0
 8026d20:	db01      	blt.n	8026d26 <_svfiprintf_r+0xf6>
 8026d22:	9207      	str	r2, [sp, #28]
 8026d24:	e004      	b.n	8026d30 <_svfiprintf_r+0x100>
 8026d26:	4252      	negs	r2, r2
 8026d28:	f043 0302 	orr.w	r3, r3, #2
 8026d2c:	9207      	str	r2, [sp, #28]
 8026d2e:	9304      	str	r3, [sp, #16]
 8026d30:	783b      	ldrb	r3, [r7, #0]
 8026d32:	2b2e      	cmp	r3, #46	; 0x2e
 8026d34:	d10e      	bne.n	8026d54 <_svfiprintf_r+0x124>
 8026d36:	787b      	ldrb	r3, [r7, #1]
 8026d38:	2b2a      	cmp	r3, #42	; 0x2a
 8026d3a:	f107 0101 	add.w	r1, r7, #1
 8026d3e:	d132      	bne.n	8026da6 <_svfiprintf_r+0x176>
 8026d40:	9b03      	ldr	r3, [sp, #12]
 8026d42:	1d1a      	adds	r2, r3, #4
 8026d44:	681b      	ldr	r3, [r3, #0]
 8026d46:	9203      	str	r2, [sp, #12]
 8026d48:	2b00      	cmp	r3, #0
 8026d4a:	bfb8      	it	lt
 8026d4c:	f04f 33ff 	movlt.w	r3, #4294967295
 8026d50:	3702      	adds	r7, #2
 8026d52:	9305      	str	r3, [sp, #20]
 8026d54:	4c2c      	ldr	r4, [pc, #176]	; (8026e08 <_svfiprintf_r+0x1d8>)
 8026d56:	7839      	ldrb	r1, [r7, #0]
 8026d58:	2203      	movs	r2, #3
 8026d5a:	4620      	mov	r0, r4
 8026d5c:	f7e9 f988 	bl	8010070 <memchr>
 8026d60:	b138      	cbz	r0, 8026d72 <_svfiprintf_r+0x142>
 8026d62:	2340      	movs	r3, #64	; 0x40
 8026d64:	1b00      	subs	r0, r0, r4
 8026d66:	fa03 f000 	lsl.w	r0, r3, r0
 8026d6a:	9b04      	ldr	r3, [sp, #16]
 8026d6c:	4303      	orrs	r3, r0
 8026d6e:	9304      	str	r3, [sp, #16]
 8026d70:	3701      	adds	r7, #1
 8026d72:	7839      	ldrb	r1, [r7, #0]
 8026d74:	4825      	ldr	r0, [pc, #148]	; (8026e0c <_svfiprintf_r+0x1dc>)
 8026d76:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8026d7a:	2206      	movs	r2, #6
 8026d7c:	1c7e      	adds	r6, r7, #1
 8026d7e:	f7e9 f977 	bl	8010070 <memchr>
 8026d82:	2800      	cmp	r0, #0
 8026d84:	d035      	beq.n	8026df2 <_svfiprintf_r+0x1c2>
 8026d86:	4b22      	ldr	r3, [pc, #136]	; (8026e10 <_svfiprintf_r+0x1e0>)
 8026d88:	b9fb      	cbnz	r3, 8026dca <_svfiprintf_r+0x19a>
 8026d8a:	9b03      	ldr	r3, [sp, #12]
 8026d8c:	3307      	adds	r3, #7
 8026d8e:	f023 0307 	bic.w	r3, r3, #7
 8026d92:	3308      	adds	r3, #8
 8026d94:	9303      	str	r3, [sp, #12]
 8026d96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026d98:	444b      	add	r3, r9
 8026d9a:	9309      	str	r3, [sp, #36]	; 0x24
 8026d9c:	e76c      	b.n	8026c78 <_svfiprintf_r+0x48>
 8026d9e:	fb00 3202 	mla	r2, r0, r2, r3
 8026da2:	2101      	movs	r1, #1
 8026da4:	e7a3      	b.n	8026cee <_svfiprintf_r+0xbe>
 8026da6:	2300      	movs	r3, #0
 8026da8:	9305      	str	r3, [sp, #20]
 8026daa:	4618      	mov	r0, r3
 8026dac:	240a      	movs	r4, #10
 8026dae:	460f      	mov	r7, r1
 8026db0:	3101      	adds	r1, #1
 8026db2:	783a      	ldrb	r2, [r7, #0]
 8026db4:	3a30      	subs	r2, #48	; 0x30
 8026db6:	2a09      	cmp	r2, #9
 8026db8:	d903      	bls.n	8026dc2 <_svfiprintf_r+0x192>
 8026dba:	2b00      	cmp	r3, #0
 8026dbc:	d0ca      	beq.n	8026d54 <_svfiprintf_r+0x124>
 8026dbe:	9005      	str	r0, [sp, #20]
 8026dc0:	e7c8      	b.n	8026d54 <_svfiprintf_r+0x124>
 8026dc2:	fb04 2000 	mla	r0, r4, r0, r2
 8026dc6:	2301      	movs	r3, #1
 8026dc8:	e7f1      	b.n	8026dae <_svfiprintf_r+0x17e>
 8026dca:	ab03      	add	r3, sp, #12
 8026dcc:	9300      	str	r3, [sp, #0]
 8026dce:	462a      	mov	r2, r5
 8026dd0:	4b10      	ldr	r3, [pc, #64]	; (8026e14 <_svfiprintf_r+0x1e4>)
 8026dd2:	a904      	add	r1, sp, #16
 8026dd4:	4640      	mov	r0, r8
 8026dd6:	f3af 8000 	nop.w
 8026dda:	f1b0 3fff 	cmp.w	r0, #4294967295
 8026dde:	4681      	mov	r9, r0
 8026de0:	d1d9      	bne.n	8026d96 <_svfiprintf_r+0x166>
 8026de2:	89ab      	ldrh	r3, [r5, #12]
 8026de4:	065b      	lsls	r3, r3, #25
 8026de6:	f53f af38 	bmi.w	8026c5a <_svfiprintf_r+0x2a>
 8026dea:	9809      	ldr	r0, [sp, #36]	; 0x24
 8026dec:	b01d      	add	sp, #116	; 0x74
 8026dee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026df2:	ab03      	add	r3, sp, #12
 8026df4:	9300      	str	r3, [sp, #0]
 8026df6:	462a      	mov	r2, r5
 8026df8:	4b06      	ldr	r3, [pc, #24]	; (8026e14 <_svfiprintf_r+0x1e4>)
 8026dfa:	a904      	add	r1, sp, #16
 8026dfc:	4640      	mov	r0, r8
 8026dfe:	f000 f9c1 	bl	8027184 <_printf_i>
 8026e02:	e7ea      	b.n	8026dda <_svfiprintf_r+0x1aa>
 8026e04:	0802b8dc 	.word	0x0802b8dc
 8026e08:	0802b8e2 	.word	0x0802b8e2
 8026e0c:	0802b8e6 	.word	0x0802b8e6
 8026e10:	00000000 	.word	0x00000000
 8026e14:	08026b79 	.word	0x08026b79

08026e18 <__sfputc_r>:
 8026e18:	6893      	ldr	r3, [r2, #8]
 8026e1a:	3b01      	subs	r3, #1
 8026e1c:	2b00      	cmp	r3, #0
 8026e1e:	b410      	push	{r4}
 8026e20:	6093      	str	r3, [r2, #8]
 8026e22:	da09      	bge.n	8026e38 <__sfputc_r+0x20>
 8026e24:	6994      	ldr	r4, [r2, #24]
 8026e26:	42a3      	cmp	r3, r4
 8026e28:	db02      	blt.n	8026e30 <__sfputc_r+0x18>
 8026e2a:	b2cb      	uxtb	r3, r1
 8026e2c:	2b0a      	cmp	r3, #10
 8026e2e:	d103      	bne.n	8026e38 <__sfputc_r+0x20>
 8026e30:	f85d 4b04 	ldr.w	r4, [sp], #4
 8026e34:	f7ff bbca 	b.w	80265cc <__swbuf_r>
 8026e38:	6813      	ldr	r3, [r2, #0]
 8026e3a:	1c58      	adds	r0, r3, #1
 8026e3c:	6010      	str	r0, [r2, #0]
 8026e3e:	7019      	strb	r1, [r3, #0]
 8026e40:	b2c8      	uxtb	r0, r1
 8026e42:	f85d 4b04 	ldr.w	r4, [sp], #4
 8026e46:	4770      	bx	lr

08026e48 <__sfputs_r>:
 8026e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026e4a:	4606      	mov	r6, r0
 8026e4c:	460f      	mov	r7, r1
 8026e4e:	4614      	mov	r4, r2
 8026e50:	18d5      	adds	r5, r2, r3
 8026e52:	42ac      	cmp	r4, r5
 8026e54:	d101      	bne.n	8026e5a <__sfputs_r+0x12>
 8026e56:	2000      	movs	r0, #0
 8026e58:	e007      	b.n	8026e6a <__sfputs_r+0x22>
 8026e5a:	463a      	mov	r2, r7
 8026e5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8026e60:	4630      	mov	r0, r6
 8026e62:	f7ff ffd9 	bl	8026e18 <__sfputc_r>
 8026e66:	1c43      	adds	r3, r0, #1
 8026e68:	d1f3      	bne.n	8026e52 <__sfputs_r+0xa>
 8026e6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08026e6c <_vfiprintf_r>:
 8026e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026e70:	b09d      	sub	sp, #116	; 0x74
 8026e72:	460c      	mov	r4, r1
 8026e74:	4617      	mov	r7, r2
 8026e76:	9303      	str	r3, [sp, #12]
 8026e78:	4606      	mov	r6, r0
 8026e7a:	b118      	cbz	r0, 8026e84 <_vfiprintf_r+0x18>
 8026e7c:	6983      	ldr	r3, [r0, #24]
 8026e7e:	b90b      	cbnz	r3, 8026e84 <_vfiprintf_r+0x18>
 8026e80:	f7ff fd78 	bl	8026974 <__sinit>
 8026e84:	4b7c      	ldr	r3, [pc, #496]	; (8027078 <_vfiprintf_r+0x20c>)
 8026e86:	429c      	cmp	r4, r3
 8026e88:	d157      	bne.n	8026f3a <_vfiprintf_r+0xce>
 8026e8a:	6874      	ldr	r4, [r6, #4]
 8026e8c:	89a3      	ldrh	r3, [r4, #12]
 8026e8e:	0718      	lsls	r0, r3, #28
 8026e90:	d55d      	bpl.n	8026f4e <_vfiprintf_r+0xe2>
 8026e92:	6923      	ldr	r3, [r4, #16]
 8026e94:	2b00      	cmp	r3, #0
 8026e96:	d05a      	beq.n	8026f4e <_vfiprintf_r+0xe2>
 8026e98:	2300      	movs	r3, #0
 8026e9a:	9309      	str	r3, [sp, #36]	; 0x24
 8026e9c:	2320      	movs	r3, #32
 8026e9e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8026ea2:	2330      	movs	r3, #48	; 0x30
 8026ea4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8026ea8:	f04f 0b01 	mov.w	fp, #1
 8026eac:	46b8      	mov	r8, r7
 8026eae:	4645      	mov	r5, r8
 8026eb0:	f815 3b01 	ldrb.w	r3, [r5], #1
 8026eb4:	2b00      	cmp	r3, #0
 8026eb6:	d155      	bne.n	8026f64 <_vfiprintf_r+0xf8>
 8026eb8:	ebb8 0a07 	subs.w	sl, r8, r7
 8026ebc:	d00b      	beq.n	8026ed6 <_vfiprintf_r+0x6a>
 8026ebe:	4653      	mov	r3, sl
 8026ec0:	463a      	mov	r2, r7
 8026ec2:	4621      	mov	r1, r4
 8026ec4:	4630      	mov	r0, r6
 8026ec6:	f7ff ffbf 	bl	8026e48 <__sfputs_r>
 8026eca:	3001      	adds	r0, #1
 8026ecc:	f000 80c4 	beq.w	8027058 <_vfiprintf_r+0x1ec>
 8026ed0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026ed2:	4453      	add	r3, sl
 8026ed4:	9309      	str	r3, [sp, #36]	; 0x24
 8026ed6:	f898 3000 	ldrb.w	r3, [r8]
 8026eda:	2b00      	cmp	r3, #0
 8026edc:	f000 80bc 	beq.w	8027058 <_vfiprintf_r+0x1ec>
 8026ee0:	2300      	movs	r3, #0
 8026ee2:	f04f 32ff 	mov.w	r2, #4294967295
 8026ee6:	9304      	str	r3, [sp, #16]
 8026ee8:	9307      	str	r3, [sp, #28]
 8026eea:	9205      	str	r2, [sp, #20]
 8026eec:	9306      	str	r3, [sp, #24]
 8026eee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8026ef2:	931a      	str	r3, [sp, #104]	; 0x68
 8026ef4:	2205      	movs	r2, #5
 8026ef6:	7829      	ldrb	r1, [r5, #0]
 8026ef8:	4860      	ldr	r0, [pc, #384]	; (802707c <_vfiprintf_r+0x210>)
 8026efa:	f7e9 f8b9 	bl	8010070 <memchr>
 8026efe:	f105 0801 	add.w	r8, r5, #1
 8026f02:	9b04      	ldr	r3, [sp, #16]
 8026f04:	2800      	cmp	r0, #0
 8026f06:	d131      	bne.n	8026f6c <_vfiprintf_r+0x100>
 8026f08:	06d9      	lsls	r1, r3, #27
 8026f0a:	bf44      	itt	mi
 8026f0c:	2220      	movmi	r2, #32
 8026f0e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8026f12:	071a      	lsls	r2, r3, #28
 8026f14:	bf44      	itt	mi
 8026f16:	222b      	movmi	r2, #43	; 0x2b
 8026f18:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8026f1c:	782a      	ldrb	r2, [r5, #0]
 8026f1e:	2a2a      	cmp	r2, #42	; 0x2a
 8026f20:	d02c      	beq.n	8026f7c <_vfiprintf_r+0x110>
 8026f22:	9a07      	ldr	r2, [sp, #28]
 8026f24:	2100      	movs	r1, #0
 8026f26:	200a      	movs	r0, #10
 8026f28:	46a8      	mov	r8, r5
 8026f2a:	3501      	adds	r5, #1
 8026f2c:	f898 3000 	ldrb.w	r3, [r8]
 8026f30:	3b30      	subs	r3, #48	; 0x30
 8026f32:	2b09      	cmp	r3, #9
 8026f34:	d96d      	bls.n	8027012 <_vfiprintf_r+0x1a6>
 8026f36:	b371      	cbz	r1, 8026f96 <_vfiprintf_r+0x12a>
 8026f38:	e026      	b.n	8026f88 <_vfiprintf_r+0x11c>
 8026f3a:	4b51      	ldr	r3, [pc, #324]	; (8027080 <_vfiprintf_r+0x214>)
 8026f3c:	429c      	cmp	r4, r3
 8026f3e:	d101      	bne.n	8026f44 <_vfiprintf_r+0xd8>
 8026f40:	68b4      	ldr	r4, [r6, #8]
 8026f42:	e7a3      	b.n	8026e8c <_vfiprintf_r+0x20>
 8026f44:	4b4f      	ldr	r3, [pc, #316]	; (8027084 <_vfiprintf_r+0x218>)
 8026f46:	429c      	cmp	r4, r3
 8026f48:	bf08      	it	eq
 8026f4a:	68f4      	ldreq	r4, [r6, #12]
 8026f4c:	e79e      	b.n	8026e8c <_vfiprintf_r+0x20>
 8026f4e:	4621      	mov	r1, r4
 8026f50:	4630      	mov	r0, r6
 8026f52:	f7ff fb9f 	bl	8026694 <__swsetup_r>
 8026f56:	2800      	cmp	r0, #0
 8026f58:	d09e      	beq.n	8026e98 <_vfiprintf_r+0x2c>
 8026f5a:	f04f 30ff 	mov.w	r0, #4294967295
 8026f5e:	b01d      	add	sp, #116	; 0x74
 8026f60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026f64:	2b25      	cmp	r3, #37	; 0x25
 8026f66:	d0a7      	beq.n	8026eb8 <_vfiprintf_r+0x4c>
 8026f68:	46a8      	mov	r8, r5
 8026f6a:	e7a0      	b.n	8026eae <_vfiprintf_r+0x42>
 8026f6c:	4a43      	ldr	r2, [pc, #268]	; (802707c <_vfiprintf_r+0x210>)
 8026f6e:	1a80      	subs	r0, r0, r2
 8026f70:	fa0b f000 	lsl.w	r0, fp, r0
 8026f74:	4318      	orrs	r0, r3
 8026f76:	9004      	str	r0, [sp, #16]
 8026f78:	4645      	mov	r5, r8
 8026f7a:	e7bb      	b.n	8026ef4 <_vfiprintf_r+0x88>
 8026f7c:	9a03      	ldr	r2, [sp, #12]
 8026f7e:	1d11      	adds	r1, r2, #4
 8026f80:	6812      	ldr	r2, [r2, #0]
 8026f82:	9103      	str	r1, [sp, #12]
 8026f84:	2a00      	cmp	r2, #0
 8026f86:	db01      	blt.n	8026f8c <_vfiprintf_r+0x120>
 8026f88:	9207      	str	r2, [sp, #28]
 8026f8a:	e004      	b.n	8026f96 <_vfiprintf_r+0x12a>
 8026f8c:	4252      	negs	r2, r2
 8026f8e:	f043 0302 	orr.w	r3, r3, #2
 8026f92:	9207      	str	r2, [sp, #28]
 8026f94:	9304      	str	r3, [sp, #16]
 8026f96:	f898 3000 	ldrb.w	r3, [r8]
 8026f9a:	2b2e      	cmp	r3, #46	; 0x2e
 8026f9c:	d110      	bne.n	8026fc0 <_vfiprintf_r+0x154>
 8026f9e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8026fa2:	2b2a      	cmp	r3, #42	; 0x2a
 8026fa4:	f108 0101 	add.w	r1, r8, #1
 8026fa8:	d137      	bne.n	802701a <_vfiprintf_r+0x1ae>
 8026faa:	9b03      	ldr	r3, [sp, #12]
 8026fac:	1d1a      	adds	r2, r3, #4
 8026fae:	681b      	ldr	r3, [r3, #0]
 8026fb0:	9203      	str	r2, [sp, #12]
 8026fb2:	2b00      	cmp	r3, #0
 8026fb4:	bfb8      	it	lt
 8026fb6:	f04f 33ff 	movlt.w	r3, #4294967295
 8026fba:	f108 0802 	add.w	r8, r8, #2
 8026fbe:	9305      	str	r3, [sp, #20]
 8026fc0:	4d31      	ldr	r5, [pc, #196]	; (8027088 <_vfiprintf_r+0x21c>)
 8026fc2:	f898 1000 	ldrb.w	r1, [r8]
 8026fc6:	2203      	movs	r2, #3
 8026fc8:	4628      	mov	r0, r5
 8026fca:	f7e9 f851 	bl	8010070 <memchr>
 8026fce:	b140      	cbz	r0, 8026fe2 <_vfiprintf_r+0x176>
 8026fd0:	2340      	movs	r3, #64	; 0x40
 8026fd2:	1b40      	subs	r0, r0, r5
 8026fd4:	fa03 f000 	lsl.w	r0, r3, r0
 8026fd8:	9b04      	ldr	r3, [sp, #16]
 8026fda:	4303      	orrs	r3, r0
 8026fdc:	9304      	str	r3, [sp, #16]
 8026fde:	f108 0801 	add.w	r8, r8, #1
 8026fe2:	f898 1000 	ldrb.w	r1, [r8]
 8026fe6:	4829      	ldr	r0, [pc, #164]	; (802708c <_vfiprintf_r+0x220>)
 8026fe8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8026fec:	2206      	movs	r2, #6
 8026fee:	f108 0701 	add.w	r7, r8, #1
 8026ff2:	f7e9 f83d 	bl	8010070 <memchr>
 8026ff6:	2800      	cmp	r0, #0
 8026ff8:	d034      	beq.n	8027064 <_vfiprintf_r+0x1f8>
 8026ffa:	4b25      	ldr	r3, [pc, #148]	; (8027090 <_vfiprintf_r+0x224>)
 8026ffc:	bb03      	cbnz	r3, 8027040 <_vfiprintf_r+0x1d4>
 8026ffe:	9b03      	ldr	r3, [sp, #12]
 8027000:	3307      	adds	r3, #7
 8027002:	f023 0307 	bic.w	r3, r3, #7
 8027006:	3308      	adds	r3, #8
 8027008:	9303      	str	r3, [sp, #12]
 802700a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802700c:	444b      	add	r3, r9
 802700e:	9309      	str	r3, [sp, #36]	; 0x24
 8027010:	e74c      	b.n	8026eac <_vfiprintf_r+0x40>
 8027012:	fb00 3202 	mla	r2, r0, r2, r3
 8027016:	2101      	movs	r1, #1
 8027018:	e786      	b.n	8026f28 <_vfiprintf_r+0xbc>
 802701a:	2300      	movs	r3, #0
 802701c:	9305      	str	r3, [sp, #20]
 802701e:	4618      	mov	r0, r3
 8027020:	250a      	movs	r5, #10
 8027022:	4688      	mov	r8, r1
 8027024:	3101      	adds	r1, #1
 8027026:	f898 2000 	ldrb.w	r2, [r8]
 802702a:	3a30      	subs	r2, #48	; 0x30
 802702c:	2a09      	cmp	r2, #9
 802702e:	d903      	bls.n	8027038 <_vfiprintf_r+0x1cc>
 8027030:	2b00      	cmp	r3, #0
 8027032:	d0c5      	beq.n	8026fc0 <_vfiprintf_r+0x154>
 8027034:	9005      	str	r0, [sp, #20]
 8027036:	e7c3      	b.n	8026fc0 <_vfiprintf_r+0x154>
 8027038:	fb05 2000 	mla	r0, r5, r0, r2
 802703c:	2301      	movs	r3, #1
 802703e:	e7f0      	b.n	8027022 <_vfiprintf_r+0x1b6>
 8027040:	ab03      	add	r3, sp, #12
 8027042:	9300      	str	r3, [sp, #0]
 8027044:	4622      	mov	r2, r4
 8027046:	4b13      	ldr	r3, [pc, #76]	; (8027094 <_vfiprintf_r+0x228>)
 8027048:	a904      	add	r1, sp, #16
 802704a:	4630      	mov	r0, r6
 802704c:	f3af 8000 	nop.w
 8027050:	f1b0 3fff 	cmp.w	r0, #4294967295
 8027054:	4681      	mov	r9, r0
 8027056:	d1d8      	bne.n	802700a <_vfiprintf_r+0x19e>
 8027058:	89a3      	ldrh	r3, [r4, #12]
 802705a:	065b      	lsls	r3, r3, #25
 802705c:	f53f af7d 	bmi.w	8026f5a <_vfiprintf_r+0xee>
 8027060:	9809      	ldr	r0, [sp, #36]	; 0x24
 8027062:	e77c      	b.n	8026f5e <_vfiprintf_r+0xf2>
 8027064:	ab03      	add	r3, sp, #12
 8027066:	9300      	str	r3, [sp, #0]
 8027068:	4622      	mov	r2, r4
 802706a:	4b0a      	ldr	r3, [pc, #40]	; (8027094 <_vfiprintf_r+0x228>)
 802706c:	a904      	add	r1, sp, #16
 802706e:	4630      	mov	r0, r6
 8027070:	f000 f888 	bl	8027184 <_printf_i>
 8027074:	e7ec      	b.n	8027050 <_vfiprintf_r+0x1e4>
 8027076:	bf00      	nop
 8027078:	0802b89c 	.word	0x0802b89c
 802707c:	0802b8dc 	.word	0x0802b8dc
 8027080:	0802b8bc 	.word	0x0802b8bc
 8027084:	0802b87c 	.word	0x0802b87c
 8027088:	0802b8e2 	.word	0x0802b8e2
 802708c:	0802b8e6 	.word	0x0802b8e6
 8027090:	00000000 	.word	0x00000000
 8027094:	08026e49 	.word	0x08026e49

08027098 <_printf_common>:
 8027098:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802709c:	4691      	mov	r9, r2
 802709e:	461f      	mov	r7, r3
 80270a0:	688a      	ldr	r2, [r1, #8]
 80270a2:	690b      	ldr	r3, [r1, #16]
 80270a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80270a8:	4293      	cmp	r3, r2
 80270aa:	bfb8      	it	lt
 80270ac:	4613      	movlt	r3, r2
 80270ae:	f8c9 3000 	str.w	r3, [r9]
 80270b2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80270b6:	4606      	mov	r6, r0
 80270b8:	460c      	mov	r4, r1
 80270ba:	b112      	cbz	r2, 80270c2 <_printf_common+0x2a>
 80270bc:	3301      	adds	r3, #1
 80270be:	f8c9 3000 	str.w	r3, [r9]
 80270c2:	6823      	ldr	r3, [r4, #0]
 80270c4:	0699      	lsls	r1, r3, #26
 80270c6:	bf42      	ittt	mi
 80270c8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80270cc:	3302      	addmi	r3, #2
 80270ce:	f8c9 3000 	strmi.w	r3, [r9]
 80270d2:	6825      	ldr	r5, [r4, #0]
 80270d4:	f015 0506 	ands.w	r5, r5, #6
 80270d8:	d107      	bne.n	80270ea <_printf_common+0x52>
 80270da:	f104 0a19 	add.w	sl, r4, #25
 80270de:	68e3      	ldr	r3, [r4, #12]
 80270e0:	f8d9 2000 	ldr.w	r2, [r9]
 80270e4:	1a9b      	subs	r3, r3, r2
 80270e6:	429d      	cmp	r5, r3
 80270e8:	db29      	blt.n	802713e <_printf_common+0xa6>
 80270ea:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80270ee:	6822      	ldr	r2, [r4, #0]
 80270f0:	3300      	adds	r3, #0
 80270f2:	bf18      	it	ne
 80270f4:	2301      	movne	r3, #1
 80270f6:	0692      	lsls	r2, r2, #26
 80270f8:	d42e      	bmi.n	8027158 <_printf_common+0xc0>
 80270fa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80270fe:	4639      	mov	r1, r7
 8027100:	4630      	mov	r0, r6
 8027102:	47c0      	blx	r8
 8027104:	3001      	adds	r0, #1
 8027106:	d021      	beq.n	802714c <_printf_common+0xb4>
 8027108:	6823      	ldr	r3, [r4, #0]
 802710a:	68e5      	ldr	r5, [r4, #12]
 802710c:	f8d9 2000 	ldr.w	r2, [r9]
 8027110:	f003 0306 	and.w	r3, r3, #6
 8027114:	2b04      	cmp	r3, #4
 8027116:	bf08      	it	eq
 8027118:	1aad      	subeq	r5, r5, r2
 802711a:	68a3      	ldr	r3, [r4, #8]
 802711c:	6922      	ldr	r2, [r4, #16]
 802711e:	bf0c      	ite	eq
 8027120:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8027124:	2500      	movne	r5, #0
 8027126:	4293      	cmp	r3, r2
 8027128:	bfc4      	itt	gt
 802712a:	1a9b      	subgt	r3, r3, r2
 802712c:	18ed      	addgt	r5, r5, r3
 802712e:	f04f 0900 	mov.w	r9, #0
 8027132:	341a      	adds	r4, #26
 8027134:	454d      	cmp	r5, r9
 8027136:	d11b      	bne.n	8027170 <_printf_common+0xd8>
 8027138:	2000      	movs	r0, #0
 802713a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802713e:	2301      	movs	r3, #1
 8027140:	4652      	mov	r2, sl
 8027142:	4639      	mov	r1, r7
 8027144:	4630      	mov	r0, r6
 8027146:	47c0      	blx	r8
 8027148:	3001      	adds	r0, #1
 802714a:	d103      	bne.n	8027154 <_printf_common+0xbc>
 802714c:	f04f 30ff 	mov.w	r0, #4294967295
 8027150:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8027154:	3501      	adds	r5, #1
 8027156:	e7c2      	b.n	80270de <_printf_common+0x46>
 8027158:	18e1      	adds	r1, r4, r3
 802715a:	1c5a      	adds	r2, r3, #1
 802715c:	2030      	movs	r0, #48	; 0x30
 802715e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8027162:	4422      	add	r2, r4
 8027164:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8027168:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802716c:	3302      	adds	r3, #2
 802716e:	e7c4      	b.n	80270fa <_printf_common+0x62>
 8027170:	2301      	movs	r3, #1
 8027172:	4622      	mov	r2, r4
 8027174:	4639      	mov	r1, r7
 8027176:	4630      	mov	r0, r6
 8027178:	47c0      	blx	r8
 802717a:	3001      	adds	r0, #1
 802717c:	d0e6      	beq.n	802714c <_printf_common+0xb4>
 802717e:	f109 0901 	add.w	r9, r9, #1
 8027182:	e7d7      	b.n	8027134 <_printf_common+0x9c>

08027184 <_printf_i>:
 8027184:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8027188:	4617      	mov	r7, r2
 802718a:	7e0a      	ldrb	r2, [r1, #24]
 802718c:	b085      	sub	sp, #20
 802718e:	2a6e      	cmp	r2, #110	; 0x6e
 8027190:	4698      	mov	r8, r3
 8027192:	4606      	mov	r6, r0
 8027194:	460c      	mov	r4, r1
 8027196:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8027198:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 802719c:	f000 80bc 	beq.w	8027318 <_printf_i+0x194>
 80271a0:	d81a      	bhi.n	80271d8 <_printf_i+0x54>
 80271a2:	2a63      	cmp	r2, #99	; 0x63
 80271a4:	d02e      	beq.n	8027204 <_printf_i+0x80>
 80271a6:	d80a      	bhi.n	80271be <_printf_i+0x3a>
 80271a8:	2a00      	cmp	r2, #0
 80271aa:	f000 80c8 	beq.w	802733e <_printf_i+0x1ba>
 80271ae:	2a58      	cmp	r2, #88	; 0x58
 80271b0:	f000 808a 	beq.w	80272c8 <_printf_i+0x144>
 80271b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80271b8:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80271bc:	e02a      	b.n	8027214 <_printf_i+0x90>
 80271be:	2a64      	cmp	r2, #100	; 0x64
 80271c0:	d001      	beq.n	80271c6 <_printf_i+0x42>
 80271c2:	2a69      	cmp	r2, #105	; 0x69
 80271c4:	d1f6      	bne.n	80271b4 <_printf_i+0x30>
 80271c6:	6821      	ldr	r1, [r4, #0]
 80271c8:	681a      	ldr	r2, [r3, #0]
 80271ca:	f011 0f80 	tst.w	r1, #128	; 0x80
 80271ce:	d023      	beq.n	8027218 <_printf_i+0x94>
 80271d0:	1d11      	adds	r1, r2, #4
 80271d2:	6019      	str	r1, [r3, #0]
 80271d4:	6813      	ldr	r3, [r2, #0]
 80271d6:	e027      	b.n	8027228 <_printf_i+0xa4>
 80271d8:	2a73      	cmp	r2, #115	; 0x73
 80271da:	f000 80b4 	beq.w	8027346 <_printf_i+0x1c2>
 80271de:	d808      	bhi.n	80271f2 <_printf_i+0x6e>
 80271e0:	2a6f      	cmp	r2, #111	; 0x6f
 80271e2:	d02a      	beq.n	802723a <_printf_i+0xb6>
 80271e4:	2a70      	cmp	r2, #112	; 0x70
 80271e6:	d1e5      	bne.n	80271b4 <_printf_i+0x30>
 80271e8:	680a      	ldr	r2, [r1, #0]
 80271ea:	f042 0220 	orr.w	r2, r2, #32
 80271ee:	600a      	str	r2, [r1, #0]
 80271f0:	e003      	b.n	80271fa <_printf_i+0x76>
 80271f2:	2a75      	cmp	r2, #117	; 0x75
 80271f4:	d021      	beq.n	802723a <_printf_i+0xb6>
 80271f6:	2a78      	cmp	r2, #120	; 0x78
 80271f8:	d1dc      	bne.n	80271b4 <_printf_i+0x30>
 80271fa:	2278      	movs	r2, #120	; 0x78
 80271fc:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8027200:	496e      	ldr	r1, [pc, #440]	; (80273bc <_printf_i+0x238>)
 8027202:	e064      	b.n	80272ce <_printf_i+0x14a>
 8027204:	681a      	ldr	r2, [r3, #0]
 8027206:	f101 0542 	add.w	r5, r1, #66	; 0x42
 802720a:	1d11      	adds	r1, r2, #4
 802720c:	6019      	str	r1, [r3, #0]
 802720e:	6813      	ldr	r3, [r2, #0]
 8027210:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8027214:	2301      	movs	r3, #1
 8027216:	e0a3      	b.n	8027360 <_printf_i+0x1dc>
 8027218:	f011 0f40 	tst.w	r1, #64	; 0x40
 802721c:	f102 0104 	add.w	r1, r2, #4
 8027220:	6019      	str	r1, [r3, #0]
 8027222:	d0d7      	beq.n	80271d4 <_printf_i+0x50>
 8027224:	f9b2 3000 	ldrsh.w	r3, [r2]
 8027228:	2b00      	cmp	r3, #0
 802722a:	da03      	bge.n	8027234 <_printf_i+0xb0>
 802722c:	222d      	movs	r2, #45	; 0x2d
 802722e:	425b      	negs	r3, r3
 8027230:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8027234:	4962      	ldr	r1, [pc, #392]	; (80273c0 <_printf_i+0x23c>)
 8027236:	220a      	movs	r2, #10
 8027238:	e017      	b.n	802726a <_printf_i+0xe6>
 802723a:	6820      	ldr	r0, [r4, #0]
 802723c:	6819      	ldr	r1, [r3, #0]
 802723e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8027242:	d003      	beq.n	802724c <_printf_i+0xc8>
 8027244:	1d08      	adds	r0, r1, #4
 8027246:	6018      	str	r0, [r3, #0]
 8027248:	680b      	ldr	r3, [r1, #0]
 802724a:	e006      	b.n	802725a <_printf_i+0xd6>
 802724c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8027250:	f101 0004 	add.w	r0, r1, #4
 8027254:	6018      	str	r0, [r3, #0]
 8027256:	d0f7      	beq.n	8027248 <_printf_i+0xc4>
 8027258:	880b      	ldrh	r3, [r1, #0]
 802725a:	4959      	ldr	r1, [pc, #356]	; (80273c0 <_printf_i+0x23c>)
 802725c:	2a6f      	cmp	r2, #111	; 0x6f
 802725e:	bf14      	ite	ne
 8027260:	220a      	movne	r2, #10
 8027262:	2208      	moveq	r2, #8
 8027264:	2000      	movs	r0, #0
 8027266:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 802726a:	6865      	ldr	r5, [r4, #4]
 802726c:	60a5      	str	r5, [r4, #8]
 802726e:	2d00      	cmp	r5, #0
 8027270:	f2c0 809c 	blt.w	80273ac <_printf_i+0x228>
 8027274:	6820      	ldr	r0, [r4, #0]
 8027276:	f020 0004 	bic.w	r0, r0, #4
 802727a:	6020      	str	r0, [r4, #0]
 802727c:	2b00      	cmp	r3, #0
 802727e:	d13f      	bne.n	8027300 <_printf_i+0x17c>
 8027280:	2d00      	cmp	r5, #0
 8027282:	f040 8095 	bne.w	80273b0 <_printf_i+0x22c>
 8027286:	4675      	mov	r5, lr
 8027288:	2a08      	cmp	r2, #8
 802728a:	d10b      	bne.n	80272a4 <_printf_i+0x120>
 802728c:	6823      	ldr	r3, [r4, #0]
 802728e:	07da      	lsls	r2, r3, #31
 8027290:	d508      	bpl.n	80272a4 <_printf_i+0x120>
 8027292:	6923      	ldr	r3, [r4, #16]
 8027294:	6862      	ldr	r2, [r4, #4]
 8027296:	429a      	cmp	r2, r3
 8027298:	bfde      	ittt	le
 802729a:	2330      	movle	r3, #48	; 0x30
 802729c:	f805 3c01 	strble.w	r3, [r5, #-1]
 80272a0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80272a4:	ebae 0305 	sub.w	r3, lr, r5
 80272a8:	6123      	str	r3, [r4, #16]
 80272aa:	f8cd 8000 	str.w	r8, [sp]
 80272ae:	463b      	mov	r3, r7
 80272b0:	aa03      	add	r2, sp, #12
 80272b2:	4621      	mov	r1, r4
 80272b4:	4630      	mov	r0, r6
 80272b6:	f7ff feef 	bl	8027098 <_printf_common>
 80272ba:	3001      	adds	r0, #1
 80272bc:	d155      	bne.n	802736a <_printf_i+0x1e6>
 80272be:	f04f 30ff 	mov.w	r0, #4294967295
 80272c2:	b005      	add	sp, #20
 80272c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80272c8:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80272cc:	493c      	ldr	r1, [pc, #240]	; (80273c0 <_printf_i+0x23c>)
 80272ce:	6822      	ldr	r2, [r4, #0]
 80272d0:	6818      	ldr	r0, [r3, #0]
 80272d2:	f012 0f80 	tst.w	r2, #128	; 0x80
 80272d6:	f100 0504 	add.w	r5, r0, #4
 80272da:	601d      	str	r5, [r3, #0]
 80272dc:	d001      	beq.n	80272e2 <_printf_i+0x15e>
 80272de:	6803      	ldr	r3, [r0, #0]
 80272e0:	e002      	b.n	80272e8 <_printf_i+0x164>
 80272e2:	0655      	lsls	r5, r2, #25
 80272e4:	d5fb      	bpl.n	80272de <_printf_i+0x15a>
 80272e6:	8803      	ldrh	r3, [r0, #0]
 80272e8:	07d0      	lsls	r0, r2, #31
 80272ea:	bf44      	itt	mi
 80272ec:	f042 0220 	orrmi.w	r2, r2, #32
 80272f0:	6022      	strmi	r2, [r4, #0]
 80272f2:	b91b      	cbnz	r3, 80272fc <_printf_i+0x178>
 80272f4:	6822      	ldr	r2, [r4, #0]
 80272f6:	f022 0220 	bic.w	r2, r2, #32
 80272fa:	6022      	str	r2, [r4, #0]
 80272fc:	2210      	movs	r2, #16
 80272fe:	e7b1      	b.n	8027264 <_printf_i+0xe0>
 8027300:	4675      	mov	r5, lr
 8027302:	fbb3 f0f2 	udiv	r0, r3, r2
 8027306:	fb02 3310 	mls	r3, r2, r0, r3
 802730a:	5ccb      	ldrb	r3, [r1, r3]
 802730c:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8027310:	4603      	mov	r3, r0
 8027312:	2800      	cmp	r0, #0
 8027314:	d1f5      	bne.n	8027302 <_printf_i+0x17e>
 8027316:	e7b7      	b.n	8027288 <_printf_i+0x104>
 8027318:	6808      	ldr	r0, [r1, #0]
 802731a:	681a      	ldr	r2, [r3, #0]
 802731c:	6949      	ldr	r1, [r1, #20]
 802731e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8027322:	d004      	beq.n	802732e <_printf_i+0x1aa>
 8027324:	1d10      	adds	r0, r2, #4
 8027326:	6018      	str	r0, [r3, #0]
 8027328:	6813      	ldr	r3, [r2, #0]
 802732a:	6019      	str	r1, [r3, #0]
 802732c:	e007      	b.n	802733e <_printf_i+0x1ba>
 802732e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8027332:	f102 0004 	add.w	r0, r2, #4
 8027336:	6018      	str	r0, [r3, #0]
 8027338:	6813      	ldr	r3, [r2, #0]
 802733a:	d0f6      	beq.n	802732a <_printf_i+0x1a6>
 802733c:	8019      	strh	r1, [r3, #0]
 802733e:	2300      	movs	r3, #0
 8027340:	6123      	str	r3, [r4, #16]
 8027342:	4675      	mov	r5, lr
 8027344:	e7b1      	b.n	80272aa <_printf_i+0x126>
 8027346:	681a      	ldr	r2, [r3, #0]
 8027348:	1d11      	adds	r1, r2, #4
 802734a:	6019      	str	r1, [r3, #0]
 802734c:	6815      	ldr	r5, [r2, #0]
 802734e:	6862      	ldr	r2, [r4, #4]
 8027350:	2100      	movs	r1, #0
 8027352:	4628      	mov	r0, r5
 8027354:	f7e8 fe8c 	bl	8010070 <memchr>
 8027358:	b108      	cbz	r0, 802735e <_printf_i+0x1da>
 802735a:	1b40      	subs	r0, r0, r5
 802735c:	6060      	str	r0, [r4, #4]
 802735e:	6863      	ldr	r3, [r4, #4]
 8027360:	6123      	str	r3, [r4, #16]
 8027362:	2300      	movs	r3, #0
 8027364:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8027368:	e79f      	b.n	80272aa <_printf_i+0x126>
 802736a:	6923      	ldr	r3, [r4, #16]
 802736c:	462a      	mov	r2, r5
 802736e:	4639      	mov	r1, r7
 8027370:	4630      	mov	r0, r6
 8027372:	47c0      	blx	r8
 8027374:	3001      	adds	r0, #1
 8027376:	d0a2      	beq.n	80272be <_printf_i+0x13a>
 8027378:	6823      	ldr	r3, [r4, #0]
 802737a:	079b      	lsls	r3, r3, #30
 802737c:	d507      	bpl.n	802738e <_printf_i+0x20a>
 802737e:	2500      	movs	r5, #0
 8027380:	f104 0919 	add.w	r9, r4, #25
 8027384:	68e3      	ldr	r3, [r4, #12]
 8027386:	9a03      	ldr	r2, [sp, #12]
 8027388:	1a9b      	subs	r3, r3, r2
 802738a:	429d      	cmp	r5, r3
 802738c:	db05      	blt.n	802739a <_printf_i+0x216>
 802738e:	68e0      	ldr	r0, [r4, #12]
 8027390:	9b03      	ldr	r3, [sp, #12]
 8027392:	4298      	cmp	r0, r3
 8027394:	bfb8      	it	lt
 8027396:	4618      	movlt	r0, r3
 8027398:	e793      	b.n	80272c2 <_printf_i+0x13e>
 802739a:	2301      	movs	r3, #1
 802739c:	464a      	mov	r2, r9
 802739e:	4639      	mov	r1, r7
 80273a0:	4630      	mov	r0, r6
 80273a2:	47c0      	blx	r8
 80273a4:	3001      	adds	r0, #1
 80273a6:	d08a      	beq.n	80272be <_printf_i+0x13a>
 80273a8:	3501      	adds	r5, #1
 80273aa:	e7eb      	b.n	8027384 <_printf_i+0x200>
 80273ac:	2b00      	cmp	r3, #0
 80273ae:	d1a7      	bne.n	8027300 <_printf_i+0x17c>
 80273b0:	780b      	ldrb	r3, [r1, #0]
 80273b2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80273b6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80273ba:	e765      	b.n	8027288 <_printf_i+0x104>
 80273bc:	0802b8fe 	.word	0x0802b8fe
 80273c0:	0802b8ed 	.word	0x0802b8ed

080273c4 <_read_r>:
 80273c4:	b538      	push	{r3, r4, r5, lr}
 80273c6:	4c07      	ldr	r4, [pc, #28]	; (80273e4 <_read_r+0x20>)
 80273c8:	4605      	mov	r5, r0
 80273ca:	4608      	mov	r0, r1
 80273cc:	4611      	mov	r1, r2
 80273ce:	2200      	movs	r2, #0
 80273d0:	6022      	str	r2, [r4, #0]
 80273d2:	461a      	mov	r2, r3
 80273d4:	f7e9 fea6 	bl	8011124 <_read>
 80273d8:	1c43      	adds	r3, r0, #1
 80273da:	d102      	bne.n	80273e2 <_read_r+0x1e>
 80273dc:	6823      	ldr	r3, [r4, #0]
 80273de:	b103      	cbz	r3, 80273e2 <_read_r+0x1e>
 80273e0:	602b      	str	r3, [r5, #0]
 80273e2:	bd38      	pop	{r3, r4, r5, pc}
 80273e4:	20022ad0 	.word	0x20022ad0

080273e8 <_fstat_r>:
 80273e8:	b538      	push	{r3, r4, r5, lr}
 80273ea:	4c07      	ldr	r4, [pc, #28]	; (8027408 <_fstat_r+0x20>)
 80273ec:	2300      	movs	r3, #0
 80273ee:	4605      	mov	r5, r0
 80273f0:	4608      	mov	r0, r1
 80273f2:	4611      	mov	r1, r2
 80273f4:	6023      	str	r3, [r4, #0]
 80273f6:	f7e9 ff09 	bl	801120c <_fstat>
 80273fa:	1c43      	adds	r3, r0, #1
 80273fc:	d102      	bne.n	8027404 <_fstat_r+0x1c>
 80273fe:	6823      	ldr	r3, [r4, #0]
 8027400:	b103      	cbz	r3, 8027404 <_fstat_r+0x1c>
 8027402:	602b      	str	r3, [r5, #0]
 8027404:	bd38      	pop	{r3, r4, r5, pc}
 8027406:	bf00      	nop
 8027408:	20022ad0 	.word	0x20022ad0

0802740c <_isatty_r>:
 802740c:	b538      	push	{r3, r4, r5, lr}
 802740e:	4c06      	ldr	r4, [pc, #24]	; (8027428 <_isatty_r+0x1c>)
 8027410:	2300      	movs	r3, #0
 8027412:	4605      	mov	r5, r0
 8027414:	4608      	mov	r0, r1
 8027416:	6023      	str	r3, [r4, #0]
 8027418:	f7e9 ff08 	bl	801122c <_isatty>
 802741c:	1c43      	adds	r3, r0, #1
 802741e:	d102      	bne.n	8027426 <_isatty_r+0x1a>
 8027420:	6823      	ldr	r3, [r4, #0]
 8027422:	b103      	cbz	r3, 8027426 <_isatty_r+0x1a>
 8027424:	602b      	str	r3, [r5, #0]
 8027426:	bd38      	pop	{r3, r4, r5, pc}
 8027428:	20022ad0 	.word	0x20022ad0

0802742c <_realloc_r>:
 802742c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802742e:	4607      	mov	r7, r0
 8027430:	4614      	mov	r4, r2
 8027432:	460e      	mov	r6, r1
 8027434:	b921      	cbnz	r1, 8027440 <_realloc_r+0x14>
 8027436:	4611      	mov	r1, r2
 8027438:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 802743c:	f7fe bf1a 	b.w	8026274 <_malloc_r>
 8027440:	b922      	cbnz	r2, 802744c <_realloc_r+0x20>
 8027442:	f7fe fec9 	bl	80261d8 <_free_r>
 8027446:	4625      	mov	r5, r4
 8027448:	4628      	mov	r0, r5
 802744a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802744c:	f000 f814 	bl	8027478 <_malloc_usable_size_r>
 8027450:	4284      	cmp	r4, r0
 8027452:	d90f      	bls.n	8027474 <_realloc_r+0x48>
 8027454:	4621      	mov	r1, r4
 8027456:	4638      	mov	r0, r7
 8027458:	f7fe ff0c 	bl	8026274 <_malloc_r>
 802745c:	4605      	mov	r5, r0
 802745e:	2800      	cmp	r0, #0
 8027460:	d0f2      	beq.n	8027448 <_realloc_r+0x1c>
 8027462:	4631      	mov	r1, r6
 8027464:	4622      	mov	r2, r4
 8027466:	f7fe fe8a 	bl	802617e <memcpy>
 802746a:	4631      	mov	r1, r6
 802746c:	4638      	mov	r0, r7
 802746e:	f7fe feb3 	bl	80261d8 <_free_r>
 8027472:	e7e9      	b.n	8027448 <_realloc_r+0x1c>
 8027474:	4635      	mov	r5, r6
 8027476:	e7e7      	b.n	8027448 <_realloc_r+0x1c>

08027478 <_malloc_usable_size_r>:
 8027478:	f851 0c04 	ldr.w	r0, [r1, #-4]
 802747c:	2800      	cmp	r0, #0
 802747e:	f1a0 0004 	sub.w	r0, r0, #4
 8027482:	bfbc      	itt	lt
 8027484:	580b      	ldrlt	r3, [r1, r0]
 8027486:	18c0      	addlt	r0, r0, r3
 8027488:	4770      	bx	lr
	...

0802748c <_init>:
 802748c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802748e:	bf00      	nop
 8027490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8027492:	bc08      	pop	{r3}
 8027494:	469e      	mov	lr, r3
 8027496:	4770      	bx	lr

08027498 <_fini>:
 8027498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802749a:	bf00      	nop
 802749c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802749e:	bc08      	pop	{r3}
 80274a0:	469e      	mov	lr, r3
 80274a2:	4770      	bx	lr
