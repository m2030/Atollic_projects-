
rawhttpstm767_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f3c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002f10  0800a13c  0800a13c  0001a13c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800d04c  0800d04c  0001d04c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800d054  0800d054  0001d054  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800d058  0800d058  0001d058  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  20000000  0800d05c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00003c50  20000078  0800d0d4  00020078  2**2
                  ALLOC
  8 ._user_heap_stack 00001800  20003cc8  0800d0d4  00023cc8  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 10 .debug_info   00034e3b  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00006999  00000000  00000000  00054ee3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000fcce  00000000  00000000  0005b87c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000010e0  00000000  00000000  0006b550  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001c80  00000000  00000000  0006c630  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000da8b  00000000  00000000  0006e2b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00006b73  00000000  00000000  0007bd3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  000828ae  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003864  00000000  00000000  0008292c  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .RxDecripSection 00000080  2007c000  2007c000  0002c000  2**2
                  ALLOC
 20 .RxarraySection 000017d0  2007c100  2007c100  0002c100  2**0
                  ALLOC
 21 .TxDescripSection 00000080  2007c080  2007c080  0002c080  2**2
                  ALLOC
 22 .TxarraySection 000017d0  2007d8d0  2007d8d0  0002d8d0  2**0
                  ALLOC

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000078 	.word	0x20000078
 800021c:	00000000 	.word	0x00000000
 8000220:	0800a124 	.word	0x0800a124

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000007c 	.word	0x2000007c
 800023c:	0800a124 	.word	0x0800a124

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b97a 	b.w	800061c <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	468c      	mov	ip, r1
 8000346:	460d      	mov	r5, r1
 8000348:	4604      	mov	r4, r0
 800034a:	9e08      	ldr	r6, [sp, #32]
 800034c:	2b00      	cmp	r3, #0
 800034e:	d151      	bne.n	80003f4 <__udivmoddi4+0xb4>
 8000350:	428a      	cmp	r2, r1
 8000352:	4617      	mov	r7, r2
 8000354:	d96d      	bls.n	8000432 <__udivmoddi4+0xf2>
 8000356:	fab2 fe82 	clz	lr, r2
 800035a:	f1be 0f00 	cmp.w	lr, #0
 800035e:	d00b      	beq.n	8000378 <__udivmoddi4+0x38>
 8000360:	f1ce 0c20 	rsb	ip, lr, #32
 8000364:	fa01 f50e 	lsl.w	r5, r1, lr
 8000368:	fa20 fc0c 	lsr.w	ip, r0, ip
 800036c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000370:	ea4c 0c05 	orr.w	ip, ip, r5
 8000374:	fa00 f40e 	lsl.w	r4, r0, lr
 8000378:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800037c:	0c25      	lsrs	r5, r4, #16
 800037e:	fbbc f8fa 	udiv	r8, ip, sl
 8000382:	fa1f f987 	uxth.w	r9, r7
 8000386:	fb0a cc18 	mls	ip, sl, r8, ip
 800038a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800038e:	fb08 f309 	mul.w	r3, r8, r9
 8000392:	42ab      	cmp	r3, r5
 8000394:	d90a      	bls.n	80003ac <__udivmoddi4+0x6c>
 8000396:	19ed      	adds	r5, r5, r7
 8000398:	f108 32ff 	add.w	r2, r8, #4294967295
 800039c:	f080 8123 	bcs.w	80005e6 <__udivmoddi4+0x2a6>
 80003a0:	42ab      	cmp	r3, r5
 80003a2:	f240 8120 	bls.w	80005e6 <__udivmoddi4+0x2a6>
 80003a6:	f1a8 0802 	sub.w	r8, r8, #2
 80003aa:	443d      	add	r5, r7
 80003ac:	1aed      	subs	r5, r5, r3
 80003ae:	b2a4      	uxth	r4, r4
 80003b0:	fbb5 f0fa 	udiv	r0, r5, sl
 80003b4:	fb0a 5510 	mls	r5, sl, r0, r5
 80003b8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003bc:	fb00 f909 	mul.w	r9, r0, r9
 80003c0:	45a1      	cmp	r9, r4
 80003c2:	d909      	bls.n	80003d8 <__udivmoddi4+0x98>
 80003c4:	19e4      	adds	r4, r4, r7
 80003c6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ca:	f080 810a 	bcs.w	80005e2 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8107 	bls.w	80005e2 <__udivmoddi4+0x2a2>
 80003d4:	3802      	subs	r0, #2
 80003d6:	443c      	add	r4, r7
 80003d8:	eba4 0409 	sub.w	r4, r4, r9
 80003dc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e0:	2100      	movs	r1, #0
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d061      	beq.n	80004aa <__udivmoddi4+0x16a>
 80003e6:	fa24 f40e 	lsr.w	r4, r4, lr
 80003ea:	2300      	movs	r3, #0
 80003ec:	6034      	str	r4, [r6, #0]
 80003ee:	6073      	str	r3, [r6, #4]
 80003f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d907      	bls.n	8000408 <__udivmoddi4+0xc8>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d054      	beq.n	80004a6 <__udivmoddi4+0x166>
 80003fc:	2100      	movs	r1, #0
 80003fe:	e886 0021 	stmia.w	r6, {r0, r5}
 8000402:	4608      	mov	r0, r1
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	fab3 f183 	clz	r1, r3
 800040c:	2900      	cmp	r1, #0
 800040e:	f040 808e 	bne.w	800052e <__udivmoddi4+0x1ee>
 8000412:	42ab      	cmp	r3, r5
 8000414:	d302      	bcc.n	800041c <__udivmoddi4+0xdc>
 8000416:	4282      	cmp	r2, r0
 8000418:	f200 80fa 	bhi.w	8000610 <__udivmoddi4+0x2d0>
 800041c:	1a84      	subs	r4, r0, r2
 800041e:	eb65 0503 	sbc.w	r5, r5, r3
 8000422:	2001      	movs	r0, #1
 8000424:	46ac      	mov	ip, r5
 8000426:	2e00      	cmp	r6, #0
 8000428:	d03f      	beq.n	80004aa <__udivmoddi4+0x16a>
 800042a:	e886 1010 	stmia.w	r6, {r4, ip}
 800042e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000432:	b912      	cbnz	r2, 800043a <__udivmoddi4+0xfa>
 8000434:	2701      	movs	r7, #1
 8000436:	fbb7 f7f2 	udiv	r7, r7, r2
 800043a:	fab7 fe87 	clz	lr, r7
 800043e:	f1be 0f00 	cmp.w	lr, #0
 8000442:	d134      	bne.n	80004ae <__udivmoddi4+0x16e>
 8000444:	1beb      	subs	r3, r5, r7
 8000446:	0c3a      	lsrs	r2, r7, #16
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	2101      	movs	r1, #1
 800044e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000452:	0c25      	lsrs	r5, r4, #16
 8000454:	fb02 3318 	mls	r3, r2, r8, r3
 8000458:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800045c:	fb0c f308 	mul.w	r3, ip, r8
 8000460:	42ab      	cmp	r3, r5
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x134>
 8000464:	19ed      	adds	r5, r5, r7
 8000466:	f108 30ff 	add.w	r0, r8, #4294967295
 800046a:	d202      	bcs.n	8000472 <__udivmoddi4+0x132>
 800046c:	42ab      	cmp	r3, r5
 800046e:	f200 80d1 	bhi.w	8000614 <__udivmoddi4+0x2d4>
 8000472:	4680      	mov	r8, r0
 8000474:	1aed      	subs	r5, r5, r3
 8000476:	b2a3      	uxth	r3, r4
 8000478:	fbb5 f0f2 	udiv	r0, r5, r2
 800047c:	fb02 5510 	mls	r5, r2, r0, r5
 8000480:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000484:	fb0c fc00 	mul.w	ip, ip, r0
 8000488:	45a4      	cmp	ip, r4
 800048a:	d907      	bls.n	800049c <__udivmoddi4+0x15c>
 800048c:	19e4      	adds	r4, r4, r7
 800048e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000492:	d202      	bcs.n	800049a <__udivmoddi4+0x15a>
 8000494:	45a4      	cmp	ip, r4
 8000496:	f200 80b8 	bhi.w	800060a <__udivmoddi4+0x2ca>
 800049a:	4618      	mov	r0, r3
 800049c:	eba4 040c 	sub.w	r4, r4, ip
 80004a0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a4:	e79d      	b.n	80003e2 <__udivmoddi4+0xa2>
 80004a6:	4631      	mov	r1, r6
 80004a8:	4630      	mov	r0, r6
 80004aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ae:	f1ce 0420 	rsb	r4, lr, #32
 80004b2:	fa05 f30e 	lsl.w	r3, r5, lr
 80004b6:	fa07 f70e 	lsl.w	r7, r7, lr
 80004ba:	fa20 f804 	lsr.w	r8, r0, r4
 80004be:	0c3a      	lsrs	r2, r7, #16
 80004c0:	fa25 f404 	lsr.w	r4, r5, r4
 80004c4:	ea48 0803 	orr.w	r8, r8, r3
 80004c8:	fbb4 f1f2 	udiv	r1, r4, r2
 80004cc:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80004d0:	fb02 4411 	mls	r4, r2, r1, r4
 80004d4:	fa1f fc87 	uxth.w	ip, r7
 80004d8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80004dc:	fb01 f30c 	mul.w	r3, r1, ip
 80004e0:	42ab      	cmp	r3, r5
 80004e2:	fa00 f40e 	lsl.w	r4, r0, lr
 80004e6:	d909      	bls.n	80004fc <__udivmoddi4+0x1bc>
 80004e8:	19ed      	adds	r5, r5, r7
 80004ea:	f101 30ff 	add.w	r0, r1, #4294967295
 80004ee:	f080 808a 	bcs.w	8000606 <__udivmoddi4+0x2c6>
 80004f2:	42ab      	cmp	r3, r5
 80004f4:	f240 8087 	bls.w	8000606 <__udivmoddi4+0x2c6>
 80004f8:	3902      	subs	r1, #2
 80004fa:	443d      	add	r5, r7
 80004fc:	1aeb      	subs	r3, r5, r3
 80004fe:	fa1f f588 	uxth.w	r5, r8
 8000502:	fbb3 f0f2 	udiv	r0, r3, r2
 8000506:	fb02 3310 	mls	r3, r2, r0, r3
 800050a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800050e:	fb00 f30c 	mul.w	r3, r0, ip
 8000512:	42ab      	cmp	r3, r5
 8000514:	d907      	bls.n	8000526 <__udivmoddi4+0x1e6>
 8000516:	19ed      	adds	r5, r5, r7
 8000518:	f100 38ff 	add.w	r8, r0, #4294967295
 800051c:	d26f      	bcs.n	80005fe <__udivmoddi4+0x2be>
 800051e:	42ab      	cmp	r3, r5
 8000520:	d96d      	bls.n	80005fe <__udivmoddi4+0x2be>
 8000522:	3802      	subs	r0, #2
 8000524:	443d      	add	r5, r7
 8000526:	1aeb      	subs	r3, r5, r3
 8000528:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800052c:	e78f      	b.n	800044e <__udivmoddi4+0x10e>
 800052e:	f1c1 0720 	rsb	r7, r1, #32
 8000532:	fa22 f807 	lsr.w	r8, r2, r7
 8000536:	408b      	lsls	r3, r1
 8000538:	fa05 f401 	lsl.w	r4, r5, r1
 800053c:	ea48 0303 	orr.w	r3, r8, r3
 8000540:	fa20 fe07 	lsr.w	lr, r0, r7
 8000544:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000548:	40fd      	lsrs	r5, r7
 800054a:	ea4e 0e04 	orr.w	lr, lr, r4
 800054e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000552:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000556:	fb0c 5519 	mls	r5, ip, r9, r5
 800055a:	fa1f f883 	uxth.w	r8, r3
 800055e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000562:	fb09 f408 	mul.w	r4, r9, r8
 8000566:	42ac      	cmp	r4, r5
 8000568:	fa02 f201 	lsl.w	r2, r2, r1
 800056c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000570:	d908      	bls.n	8000584 <__udivmoddi4+0x244>
 8000572:	18ed      	adds	r5, r5, r3
 8000574:	f109 30ff 	add.w	r0, r9, #4294967295
 8000578:	d243      	bcs.n	8000602 <__udivmoddi4+0x2c2>
 800057a:	42ac      	cmp	r4, r5
 800057c:	d941      	bls.n	8000602 <__udivmoddi4+0x2c2>
 800057e:	f1a9 0902 	sub.w	r9, r9, #2
 8000582:	441d      	add	r5, r3
 8000584:	1b2d      	subs	r5, r5, r4
 8000586:	fa1f fe8e 	uxth.w	lr, lr
 800058a:	fbb5 f0fc 	udiv	r0, r5, ip
 800058e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000592:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000596:	fb00 f808 	mul.w	r8, r0, r8
 800059a:	45a0      	cmp	r8, r4
 800059c:	d907      	bls.n	80005ae <__udivmoddi4+0x26e>
 800059e:	18e4      	adds	r4, r4, r3
 80005a0:	f100 35ff 	add.w	r5, r0, #4294967295
 80005a4:	d229      	bcs.n	80005fa <__udivmoddi4+0x2ba>
 80005a6:	45a0      	cmp	r8, r4
 80005a8:	d927      	bls.n	80005fa <__udivmoddi4+0x2ba>
 80005aa:	3802      	subs	r0, #2
 80005ac:	441c      	add	r4, r3
 80005ae:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80005b2:	eba4 0408 	sub.w	r4, r4, r8
 80005b6:	fba0 8902 	umull	r8, r9, r0, r2
 80005ba:	454c      	cmp	r4, r9
 80005bc:	46c6      	mov	lr, r8
 80005be:	464d      	mov	r5, r9
 80005c0:	d315      	bcc.n	80005ee <__udivmoddi4+0x2ae>
 80005c2:	d012      	beq.n	80005ea <__udivmoddi4+0x2aa>
 80005c4:	b156      	cbz	r6, 80005dc <__udivmoddi4+0x29c>
 80005c6:	ebba 030e 	subs.w	r3, sl, lr
 80005ca:	eb64 0405 	sbc.w	r4, r4, r5
 80005ce:	fa04 f707 	lsl.w	r7, r4, r7
 80005d2:	40cb      	lsrs	r3, r1
 80005d4:	431f      	orrs	r7, r3
 80005d6:	40cc      	lsrs	r4, r1
 80005d8:	6037      	str	r7, [r6, #0]
 80005da:	6074      	str	r4, [r6, #4]
 80005dc:	2100      	movs	r1, #0
 80005de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005e2:	4618      	mov	r0, r3
 80005e4:	e6f8      	b.n	80003d8 <__udivmoddi4+0x98>
 80005e6:	4690      	mov	r8, r2
 80005e8:	e6e0      	b.n	80003ac <__udivmoddi4+0x6c>
 80005ea:	45c2      	cmp	sl, r8
 80005ec:	d2ea      	bcs.n	80005c4 <__udivmoddi4+0x284>
 80005ee:	ebb8 0e02 	subs.w	lr, r8, r2
 80005f2:	eb69 0503 	sbc.w	r5, r9, r3
 80005f6:	3801      	subs	r0, #1
 80005f8:	e7e4      	b.n	80005c4 <__udivmoddi4+0x284>
 80005fa:	4628      	mov	r0, r5
 80005fc:	e7d7      	b.n	80005ae <__udivmoddi4+0x26e>
 80005fe:	4640      	mov	r0, r8
 8000600:	e791      	b.n	8000526 <__udivmoddi4+0x1e6>
 8000602:	4681      	mov	r9, r0
 8000604:	e7be      	b.n	8000584 <__udivmoddi4+0x244>
 8000606:	4601      	mov	r1, r0
 8000608:	e778      	b.n	80004fc <__udivmoddi4+0x1bc>
 800060a:	3802      	subs	r0, #2
 800060c:	443c      	add	r4, r7
 800060e:	e745      	b.n	800049c <__udivmoddi4+0x15c>
 8000610:	4608      	mov	r0, r1
 8000612:	e708      	b.n	8000426 <__udivmoddi4+0xe6>
 8000614:	f1a8 0802 	sub.w	r8, r8, #2
 8000618:	443d      	add	r5, r7
 800061a:	e72b      	b.n	8000474 <__udivmoddi4+0x134>

0800061c <__aeabi_idiv0>:
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop

08000620 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000620:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000622:	4b0e      	ldr	r3, [pc, #56]	; (800065c <HAL_InitTick+0x3c>)
{
 8000624:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000626:	4a0e      	ldr	r2, [pc, #56]	; (8000660 <HAL_InitTick+0x40>)
 8000628:	7818      	ldrb	r0, [r3, #0]
 800062a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800062e:	fbb3 f3f0 	udiv	r3, r3, r0
 8000632:	6810      	ldr	r0, [r2, #0]
 8000634:	fbb0 f0f3 	udiv	r0, r0, r3
 8000638:	f000 f890 	bl	800075c <HAL_SYSTICK_Config>
 800063c:	4604      	mov	r4, r0
 800063e:	b958      	cbnz	r0, 8000658 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000640:	2d0f      	cmp	r5, #15
 8000642:	d809      	bhi.n	8000658 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000644:	4602      	mov	r2, r0
 8000646:	4629      	mov	r1, r5
 8000648:	f04f 30ff 	mov.w	r0, #4294967295
 800064c:	f000 f84e 	bl	80006ec <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000650:	4b04      	ldr	r3, [pc, #16]	; (8000664 <HAL_InitTick+0x44>)
 8000652:	4620      	mov	r0, r4
 8000654:	601d      	str	r5, [r3, #0]
 8000656:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000658:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800065a:	bd38      	pop	{r3, r4, r5, pc}
 800065c:	20000000 	.word	0x20000000
 8000660:	20000010 	.word	0x20000010
 8000664:	20000004 	.word	0x20000004

08000668 <HAL_Init>:
{
 8000668:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800066a:	2003      	movs	r0, #3
 800066c:	f000 f82c 	bl	80006c8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000670:	2000      	movs	r0, #0
 8000672:	f7ff ffd5 	bl	8000620 <HAL_InitTick>
  HAL_MspInit();
 8000676:	f008 fce5 	bl	8009044 <HAL_MspInit>
}
 800067a:	2000      	movs	r0, #0
 800067c:	bd08      	pop	{r3, pc}
	...

08000680 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000680:	4a03      	ldr	r2, [pc, #12]	; (8000690 <HAL_IncTick+0x10>)
 8000682:	4b04      	ldr	r3, [pc, #16]	; (8000694 <HAL_IncTick+0x14>)
 8000684:	6811      	ldr	r1, [r2, #0]
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	440b      	add	r3, r1
 800068a:	6013      	str	r3, [r2, #0]
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	20000658 	.word	0x20000658
 8000694:	20000000 	.word	0x20000000

08000698 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000698:	4b01      	ldr	r3, [pc, #4]	; (80006a0 <HAL_GetTick+0x8>)
 800069a:	6818      	ldr	r0, [r3, #0]
}
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	20000658 	.word	0x20000658

080006a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006a4:	b538      	push	{r3, r4, r5, lr}
 80006a6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80006a8:	f7ff fff6 	bl	8000698 <HAL_GetTick>
 80006ac:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006ae:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80006b0:	bf1e      	ittt	ne
 80006b2:	4b04      	ldrne	r3, [pc, #16]	; (80006c4 <HAL_Delay+0x20>)
 80006b4:	781b      	ldrbne	r3, [r3, #0]
 80006b6:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80006b8:	f7ff ffee 	bl	8000698 <HAL_GetTick>
 80006bc:	1b40      	subs	r0, r0, r5
 80006be:	4284      	cmp	r4, r0
 80006c0:	d8fa      	bhi.n	80006b8 <HAL_Delay+0x14>
  {
  }
}
 80006c2:	bd38      	pop	{r3, r4, r5, pc}
 80006c4:	20000000 	.word	0x20000000

080006c8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006c8:	4a07      	ldr	r2, [pc, #28]	; (80006e8 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006ca:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006cc:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006ce:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006d2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80006d6:	041b      	lsls	r3, r3, #16
 80006d8:	0c1b      	lsrs	r3, r3, #16
 80006da:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80006e2:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80006e4:	60d3      	str	r3, [r2, #12]
 80006e6:	4770      	bx	lr
 80006e8:	e000ed00 	.word	0xe000ed00

080006ec <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006ec:	4b19      	ldr	r3, [pc, #100]	; (8000754 <HAL_NVIC_SetPriority+0x68>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80006ee:	b530      	push	{r4, r5, lr}
 80006f0:	68dc      	ldr	r4, [r3, #12]
 80006f2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006f6:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006fa:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006fc:	2b04      	cmp	r3, #4
 80006fe:	bf28      	it	cs
 8000700:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000702:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000704:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000708:	bf8c      	ite	hi
 800070a:	3c03      	subhi	r4, #3
 800070c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800070e:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
 8000712:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000714:	f103 33ff 	add.w	r3, r3, #4294967295
 8000718:	ea01 0103 	and.w	r1, r1, r3
 800071c:	fa01 f104 	lsl.w	r1, r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000720:	fa05 f404 	lsl.w	r4, r5, r4
 8000724:	f104 34ff 	add.w	r4, r4, #4294967295
 8000728:	ea02 0204 	and.w	r2, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800072c:	ea42 0201 	orr.w	r2, r2, r1
 8000730:	ea4f 1202 	mov.w	r2, r2, lsl #4
  if ((int32_t)(IRQn) >= 0)
 8000734:	db07      	blt.n	8000746 <HAL_NVIC_SetPriority+0x5a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000736:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800073a:	b2d2      	uxtb	r2, r2
 800073c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000740:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
 8000744:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000746:	f000 000f 	and.w	r0, r0, #15
 800074a:	b2d2      	uxtb	r2, r2
 800074c:	4b02      	ldr	r3, [pc, #8]	; (8000758 <HAL_NVIC_SetPriority+0x6c>)
 800074e:	541a      	strb	r2, [r3, r0]
 8000750:	bd30      	pop	{r4, r5, pc}
 8000752:	bf00      	nop
 8000754:	e000ed00 	.word	0xe000ed00
 8000758:	e000ed14 	.word	0xe000ed14

0800075c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800075c:	3801      	subs	r0, #1
 800075e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000762:	d20a      	bcs.n	800077a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000764:	4b06      	ldr	r3, [pc, #24]	; (8000780 <HAL_SYSTICK_Config+0x24>)
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000766:	21f0      	movs	r1, #240	; 0xf0
 8000768:	4a06      	ldr	r2, [pc, #24]	; (8000784 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800076a:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800076c:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800076e:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000772:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000774:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000776:	601a      	str	r2, [r3, #0]
 8000778:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800077a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800077c:	4770      	bx	lr
 800077e:	bf00      	nop
 8000780:	e000e010 	.word	0xe000e010
 8000784:	e000ed00 	.word	0xe000ed00

08000788 <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000788:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800078c:	4a04      	ldr	r2, [pc, #16]	; (80007a0 <HAL_MPU_Disable+0x18>)
 800078e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000790:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000794:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000796:	2200      	movs	r2, #0
 8000798:	4b02      	ldr	r3, [pc, #8]	; (80007a4 <HAL_MPU_Disable+0x1c>)
 800079a:	605a      	str	r2, [r3, #4]
 800079c:	4770      	bx	lr
 800079e:	bf00      	nop
 80007a0:	e000ed00 	.word	0xe000ed00
 80007a4:	e000ed90 	.word	0xe000ed90

080007a8 <HAL_MPU_Enable>:
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80007a8:	4a06      	ldr	r2, [pc, #24]	; (80007c4 <HAL_MPU_Enable+0x1c>)
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80007aa:	f040 0001 	orr.w	r0, r0, #1
 80007ae:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <HAL_MPU_Enable+0x20>)
 80007b0:	6058      	str	r0, [r3, #4]
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80007b2:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80007b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007b8:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80007ba:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80007be:	f3bf 8f6f 	isb	sy
 80007c2:	4770      	bx	lr
 80007c4:	e000ed00 	.word	0xe000ed00
 80007c8:	e000ed90 	.word	0xe000ed90

080007cc <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80007cc:	7843      	ldrb	r3, [r0, #1]
 80007ce:	4a12      	ldr	r2, [pc, #72]	; (8000818 <HAL_MPU_ConfigRegion+0x4c>)
{
 80007d0:	b510      	push	{r4, lr}
  MPU->RNR = MPU_Init->Number;
 80007d2:	6093      	str	r3, [r2, #8]

  if ((MPU_Init->Enable) != RESET)
 80007d4:	7801      	ldrb	r1, [r0, #0]
 80007d6:	b1d9      	cbz	r1, 8000810 <HAL_MPU_ConfigRegion+0x44>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 80007d8:	6843      	ldr	r3, [r0, #4]
 80007da:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80007dc:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80007de:	7b04      	ldrb	r4, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80007e0:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80007e2:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80007e6:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80007e8:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80007ea:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80007ee:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80007f0:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80007f4:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80007f6:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80007fa:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80007fc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000800:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000802:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8000806:	7a01      	ldrb	r1, [r0, #8]
 8000808:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800080c:	6113      	str	r3, [r2, #16]
 800080e:	bd10      	pop	{r4, pc}
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
  }
  else
  {
    MPU->RBAR = 0x00;
 8000810:	60d1      	str	r1, [r2, #12]
    MPU->RASR = 0x00;
 8000812:	6111      	str	r1, [r2, #16]
 8000814:	bd10      	pop	{r4, pc}
 8000816:	bf00      	nop
 8000818:	e000ed90 	.word	0xe000ed90

0800081c <ETH_FlushTransmitFIFO>:
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
  __IO uint32_t tmpreg = 0;
 800081c:	2300      	movs	r3, #0
{
 800081e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8000820:	f241 0418 	movw	r4, #4120	; 0x1018
  __IO uint32_t tmpreg = 0;
 8000824:	9301      	str	r3, [sp, #4]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8000826:	6803      	ldr	r3, [r0, #0]
{
 8000828:	4605      	mov	r5, r0
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800082a:	2001      	movs	r0, #1
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800082c:	591a      	ldr	r2, [r3, r4]
 800082e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000832:	511a      	str	r2, [r3, r4]
  tmpreg = (heth->Instance)->DMAOMR;
 8000834:	591b      	ldr	r3, [r3, r4]
 8000836:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8000838:	f7ff ff34 	bl	80006a4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800083c:	682b      	ldr	r3, [r5, #0]
 800083e:	9a01      	ldr	r2, [sp, #4]
 8000840:	511a      	str	r2, [r3, r4]
}
 8000842:	b003      	add	sp, #12
 8000844:	bd30      	pop	{r4, r5, pc}
	...

08000848 <ETH_MACDMAConfig>:
{
 8000848:	b570      	push	{r4, r5, r6, lr}
 800084a:	4604      	mov	r4, r0
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 800084c:	b129      	cbz	r1, 800085a <ETH_MACDMAConfig+0x12>
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800084e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000852:	60c3      	str	r3, [r0, #12]
    (heth->Init).Speed = ETH_SPEED_100M;
 8000854:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000858:	6083      	str	r3, [r0, #8]
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800085a:	69e3      	ldr	r3, [r4, #28]
  tmpreg = (heth->Instance)->MACCR;
 800085c:	6822      	ldr	r2, [r4, #0]
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800085e:	2b00      	cmp	r3, #0
                       macinit.LoopbackMode |
 8000860:	68e0      	ldr	r0, [r4, #12]
 8000862:	68a3      	ldr	r3, [r4, #8]
  tmpreg = (heth->Instance)->MACCR;
 8000864:	6815      	ldr	r5, [r2, #0]
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8000866:	bf08      	it	eq
 8000868:	f44f 6180 	moveq.w	r1, #1024	; 0x400
                       macinit.LoopbackMode |
 800086c:	ea43 0300 	orr.w	r3, r3, r0
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8000870:	482e      	ldr	r0, [pc, #184]	; (800092c <ETH_MACDMAConfig+0xe4>)
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8000872:	bf18      	it	ne
 8000874:	2100      	movne	r1, #0
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8000876:	4028      	ands	r0, r5
 8000878:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800087c:	4303      	orrs	r3, r0
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800087e:	2001      	movs	r0, #1
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8000880:	430b      	orrs	r3, r1
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8000882:	6013      	str	r3, [r2, #0]
  tmpreg = (heth->Instance)->MACCR;
 8000884:	6815      	ldr	r5, [r2, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8000886:	f7ff ff0d 	bl	80006a4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 800088a:	6823      	ldr	r3, [r4, #0]
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800088c:	2240      	movs	r2, #64	; 0x40
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800088e:	2001      	movs	r0, #1
  (heth->Instance)->MACCR = tmpreg; 
 8000890:	601d      	str	r5, [r3, #0]
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8000892:	605a      	str	r2, [r3, #4]
   tmpreg = (heth->Instance)->MACFFR;
 8000894:	685d      	ldr	r5, [r3, #4]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8000896:	f7ff ff05 	bl	80006a4 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 800089a:	6823      	ldr	r3, [r4, #0]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800089c:	2001      	movs	r0, #1
   (heth->Instance)->MACFFR = tmpreg;
 800089e:	605d      	str	r5, [r3, #4]
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80008a0:	2500      	movs	r5, #0
 80008a2:	609d      	str	r5, [r3, #8]
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80008a4:	60dd      	str	r5, [r3, #12]
   tmpreg = (heth->Instance)->MACFCR;
 80008a6:	699a      	ldr	r2, [r3, #24]
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 80008a8:	f022 02be 	bic.w	r2, r2, #190	; 0xbe
 80008ac:	0412      	lsls	r2, r2, #16
 80008ae:	0c12      	lsrs	r2, r2, #16
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80008b0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 80008b4:	619a      	str	r2, [r3, #24]
   tmpreg = (heth->Instance)->MACFCR;
 80008b6:	699e      	ldr	r6, [r3, #24]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80008b8:	f7ff fef4 	bl	80006a4 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 80008bc:	6823      	ldr	r3, [r4, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80008be:	2001      	movs	r0, #1
   (heth->Instance)->MACFCR = tmpreg;
 80008c0:	619e      	str	r6, [r3, #24]
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80008c2:	61dd      	str	r5, [r3, #28]
    tmpreg = (heth->Instance)->MACVLANTR;
 80008c4:	69dd      	ldr	r5, [r3, #28]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80008c6:	f7ff feed 	bl	80006a4 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 80008ca:	6822      	ldr	r2, [r4, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80008cc:	2001      	movs	r0, #1
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 80008ce:	4b18      	ldr	r3, [pc, #96]	; (8000930 <ETH_MACDMAConfig+0xe8>)
    (heth->Instance)->MACVLANTR = tmpreg;
 80008d0:	61d5      	str	r5, [r2, #28]
    tmpreg = (heth->Instance)->DMAOMR;
 80008d2:	f241 0518 	movw	r5, #4120	; 0x1018
 80008d6:	5951      	ldr	r1, [r2, r5]
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 80008d8:	400b      	ands	r3, r1
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80008da:	f043 7308 	orr.w	r3, r3, #35651584	; 0x2200000
 80008de:	f043 0304 	orr.w	r3, r3, #4
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 80008e2:	5153      	str	r3, [r2, r5]
    tmpreg = (heth->Instance)->DMAOMR;
 80008e4:	5956      	ldr	r6, [r2, r5]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80008e6:	f7ff fedd 	bl	80006a4 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 80008ea:	6823      	ldr	r3, [r4, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80008ec:	2001      	movs	r0, #1
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80008ee:	4a11      	ldr	r2, [pc, #68]	; (8000934 <ETH_MACDMAConfig+0xec>)
    (heth->Instance)->DMAOMR = tmpreg;
 80008f0:	515e      	str	r6, [r3, r5]
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80008f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008f6:	601a      	str	r2, [r3, #0]
     tmpreg = (heth->Instance)->DMABMR;
 80008f8:	681d      	ldr	r5, [r3, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80008fa:	f7ff fed3 	bl	80006a4 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 80008fe:	6822      	ldr	r2, [r4, #0]
 8000900:	f502 5380 	add.w	r3, r2, #4096	; 0x1000
 8000904:	601d      	str	r5, [r3, #0]
     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8000906:	69a3      	ldr	r3, [r4, #24]
 8000908:	2b01      	cmp	r3, #1
 800090a:	d107      	bne.n	800091c <ETH_MACDMAConfig+0xd4>
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800090c:	f241 011c 	movw	r1, #4124	; 0x101c
 8000910:	5853      	ldr	r3, [r2, r1]
 8000912:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000916:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800091a:	5053      	str	r3, [r2, r1]
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800091c:	6963      	ldr	r3, [r4, #20]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 800091e:	4a06      	ldr	r2, [pc, #24]	; (8000938 <ETH_MACDMAConfig+0xf0>)
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8000920:	8899      	ldrh	r1, [r3, #4]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8000922:	6011      	str	r1, [r2, #0]
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8000924:	681a      	ldr	r2, [r3, #0]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8000926:	4b05      	ldr	r3, [pc, #20]	; (800093c <ETH_MACDMAConfig+0xf4>)
 8000928:	601a      	str	r2, [r3, #0]
 800092a:	bd70      	pop	{r4, r5, r6, pc}
 800092c:	ff20810f 	.word	0xff20810f
 8000930:	f8de3f23 	.word	0xf8de3f23
 8000934:	02c12080 	.word	0x02c12080
 8000938:	40028040 	.word	0x40028040
 800093c:	40028044 	.word	0x40028044

08000940 <HAL_ETH_DMATxDescListInit>:
{
 8000940:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(heth);
 8000942:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 8000946:	2c01      	cmp	r4, #1
 8000948:	f04f 0402 	mov.w	r4, #2
 800094c:	d033      	beq.n	80009b6 <HAL_ETH_DMATxDescListInit+0x76>
 800094e:	2501      	movs	r5, #1
  heth->State = HAL_ETH_STATE_BUSY;
 8000950:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8000954:	f44f 1780 	mov.w	r7, #1048576	; 0x100000
 8000958:	f101 0420 	add.w	r4, r1, #32
  __HAL_LOCK(heth);
 800095c:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8000960:	f240 5ef4 	movw	lr, #1524	; 0x5f4
  for(i=0; i < TxBuffCount; i++)
 8000964:	2500      	movs	r5, #0
    if(i < (TxBuffCount-1))
 8000966:	f103 3cff 	add.w	ip, r3, #4294967295
  heth->TxDesc = DMATxDescTab;
 800096a:	62c1      	str	r1, [r0, #44]	; 0x2c
  for(i=0; i < TxBuffCount; i++)
 800096c:	429d      	cmp	r5, r3
 800096e:	d10b      	bne.n	8000988 <HAL_ETH_DMATxDescListInit+0x48>
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8000970:	6802      	ldr	r2, [r0, #0]
 8000972:	f241 0310 	movw	r3, #4112	; 0x1010
 8000976:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 8000978:	2301      	movs	r3, #1
 800097a:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 800097e:	2300      	movs	r3, #0
 8000980:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 8000984:	4618      	mov	r0, r3
 8000986:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8000988:	fb0e 2605 	mla	r6, lr, r5, r2
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800098c:	f844 7c20 	str.w	r7, [r4, #-32]
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8000990:	f844 6c18 	str.w	r6, [r4, #-24]
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8000994:	69c6      	ldr	r6, [r0, #28]
 8000996:	b92e      	cbnz	r6, 80009a4 <HAL_ETH_DMATxDescListInit+0x64>
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8000998:	f854 6c20 	ldr.w	r6, [r4, #-32]
 800099c:	f446 0640 	orr.w	r6, r6, #12582912	; 0xc00000
 80009a0:	f844 6c20 	str.w	r6, [r4, #-32]
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 80009a4:	4565      	cmp	r5, ip
 80009a6:	bf2c      	ite	cs
 80009a8:	460e      	movcs	r6, r1
 80009aa:	4626      	movcc	r6, r4
  for(i=0; i < TxBuffCount; i++)
 80009ac:	3501      	adds	r5, #1
 80009ae:	3420      	adds	r4, #32
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 80009b0:	f844 6c34 	str.w	r6, [r4, #-52]
 80009b4:	e7da      	b.n	800096c <HAL_ETH_DMATxDescListInit+0x2c>
  __HAL_LOCK(heth);
 80009b6:	4620      	mov	r0, r4
}
 80009b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080009ba <HAL_ETH_DMARxDescListInit>:
{
 80009ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(heth);
 80009be:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 80009c2:	2c01      	cmp	r4, #1
 80009c4:	f04f 0402 	mov.w	r4, #2
 80009c8:	d030      	beq.n	8000a2c <HAL_ETH_DMARxDescListInit+0x72>
 80009ca:	2501      	movs	r5, #1
  heth->State = HAL_ETH_STATE_BUSY;
 80009cc:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80009d0:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80009d4:	f101 0420 	add.w	r4, r1, #32
  __HAL_LOCK(heth);
 80009d8:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80009dc:	f244 57f4 	movw	r7, #17908	; 0x45f4
  for(i=0; i < RxBuffCount; i++)
 80009e0:	2500      	movs	r5, #0
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80009e2:	f240 5ef4 	movw	lr, #1524	; 0x5f4
    if(i < (RxBuffCount-1))
 80009e6:	f103 3cff 	add.w	ip, r3, #4294967295
  heth->RxDesc = DMARxDescTab; 
 80009ea:	6281      	str	r1, [r0, #40]	; 0x28
  for(i=0; i < RxBuffCount; i++)
 80009ec:	429d      	cmp	r5, r3
 80009ee:	d10c      	bne.n	8000a0a <HAL_ETH_DMARxDescListInit+0x50>
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80009f0:	6802      	ldr	r2, [r0, #0]
 80009f2:	f241 030c 	movw	r3, #4108	; 0x100c
 80009f6:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 80009f8:	2301      	movs	r3, #1
 80009fa:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 80009fe:	2300      	movs	r3, #0
 8000a00:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 8000a04:	4618      	mov	r0, r3
 8000a06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8000a0a:	fb0e 2805 	mla	r8, lr, r5, r2
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8000a0e:	f844 6c20 	str.w	r6, [r4, #-32]
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8000a12:	f844 8c18 	str.w	r8, [r4, #-24]
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 8000a16:	4565      	cmp	r5, ip
 8000a18:	bf2c      	ite	cs
 8000a1a:	4688      	movcs	r8, r1
 8000a1c:	46a0      	movcc	r8, r4
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8000a1e:	f844 7c1c 	str.w	r7, [r4, #-28]
  for(i=0; i < RxBuffCount; i++)
 8000a22:	3501      	adds	r5, #1
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 8000a24:	f844 8c14 	str.w	r8, [r4, #-20]
 8000a28:	3420      	adds	r4, #32
 8000a2a:	e7df      	b.n	80009ec <HAL_ETH_DMARxDescListInit+0x32>
  __HAL_LOCK(heth);
 8000a2c:	4620      	mov	r0, r4
}
 8000a2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08000a34 <HAL_ETH_TransmitFrame>:
  __HAL_LOCK(heth);
 8000a34:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8000a38:	2b01      	cmp	r3, #1
 8000a3a:	f04f 0302 	mov.w	r3, #2
{
 8000a3e:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(heth);
 8000a40:	d066      	beq.n	8000b10 <HAL_ETH_TransmitFrame+0xdc>
 8000a42:	2201      	movs	r2, #1
  heth->State = HAL_ETH_STATE_BUSY;
 8000a44:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_LOCK(heth);
 8000a48:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  if (FrameLength == 0) 
 8000a4c:	b929      	cbnz	r1, 8000a5a <HAL_ETH_TransmitFrame+0x26>
    heth->State = HAL_ETH_STATE_READY;
 8000a4e:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8000a52:	f880 1045 	strb.w	r1, [r0, #69]	; 0x45
    return HAL_ERROR;
 8000a56:	4610      	mov	r0, r2
 8000a58:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8000a5a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000a5c:	681c      	ldr	r4, [r3, #0]
 8000a5e:	2c00      	cmp	r4, #0
 8000a60:	da06      	bge.n	8000a70 <HAL_ETH_TransmitFrame+0x3c>
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8000a62:	2312      	movs	r3, #18
 8000a64:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8000a68:	2300      	movs	r3, #0
 8000a6a:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
 8000a6e:	e7f2      	b.n	8000a56 <HAL_ETH_TransmitFrame+0x22>
  if (FrameLength > ETH_TX_BUF_SIZE)
 8000a70:	f240 54f4 	movw	r4, #1524	; 0x5f4
 8000a74:	42a1      	cmp	r1, r4
 8000a76:	d92c      	bls.n	8000ad2 <HAL_ETH_TransmitFrame+0x9e>
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8000a78:	fbb1 f2f4 	udiv	r2, r1, r4
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8000a7c:	fb04 1412 	mls	r4, r4, r2, r1
 8000a80:	b32c      	cbz	r4, 8000ace <HAL_ETH_TransmitFrame+0x9a>
      bufcount++;
 8000a82:	3201      	adds	r2, #1
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8000a84:	4c23      	ldr	r4, [pc, #140]	; (8000b14 <HAL_ETH_TransmitFrame+0xe0>)
 8000a86:	f201 51f4 	addw	r1, r1, #1524	; 0x5f4
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8000a8a:	f240 56f4 	movw	r6, #1524	; 0x5f4
      if (i == (bufcount-1))
 8000a8e:	1e57      	subs	r7, r2, #1
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8000a90:	fb04 1102 	mla	r1, r4, r2, r1
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8000a94:	2400      	movs	r4, #0
 8000a96:	f3c1 010c 	ubfx	r1, r1, #0, #13
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8000a9a:	681d      	ldr	r5, [r3, #0]
 8000a9c:	f025 5540 	bic.w	r5, r5, #805306368	; 0x30000000
 8000aa0:	601d      	str	r5, [r3, #0]
      if (i == 0) 
 8000aa2:	b91c      	cbnz	r4, 8000aac <HAL_ETH_TransmitFrame+0x78>
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8000aa4:	681d      	ldr	r5, [r3, #0]
 8000aa6:	f045 5580 	orr.w	r5, r5, #268435456	; 0x10000000
 8000aaa:	601d      	str	r5, [r3, #0]
      if (i == (bufcount-1))
 8000aac:	42a7      	cmp	r7, r4
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8000aae:	605e      	str	r6, [r3, #4]
      if (i == (bufcount-1))
 8000ab0:	d104      	bne.n	8000abc <HAL_ETH_TransmitFrame+0x88>
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8000ab2:	681d      	ldr	r5, [r3, #0]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8000ab4:	6059      	str	r1, [r3, #4]
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8000ab6:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8000aba:	601d      	str	r5, [r3, #0]
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8000abc:	681d      	ldr	r5, [r3, #0]
    for (i=0; i< bufcount; i++)
 8000abe:	3401      	adds	r4, #1
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8000ac0:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
    for (i=0; i< bufcount; i++)
 8000ac4:	4294      	cmp	r4, r2
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8000ac6:	601d      	str	r5, [r3, #0]
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8000ac8:	68db      	ldr	r3, [r3, #12]
    for (i=0; i< bufcount; i++)
 8000aca:	d1e6      	bne.n	8000a9a <HAL_ETH_TransmitFrame+0x66>
 8000acc:	e00d      	b.n	8000aea <HAL_ETH_TransmitFrame+0xb6>
  if (bufcount == 1)
 8000ace:	2a01      	cmp	r2, #1
 8000ad0:	d1d8      	bne.n	8000a84 <HAL_ETH_TransmitFrame+0x50>
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8000ad2:	681a      	ldr	r2, [r3, #0]
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8000ad4:	f3c1 010c 	ubfx	r1, r1, #0, #13
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8000ad8:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8000adc:	6059      	str	r1, [r3, #4]
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8000ade:	601a      	str	r2, [r3, #0]
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8000ae0:	681a      	ldr	r2, [r3, #0]
 8000ae2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000ae6:	601a      	str	r2, [r3, #0]
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8000ae8:	68db      	ldr	r3, [r3, #12]
 8000aea:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8000aec:	f241 0214 	movw	r2, #4116	; 0x1014
 8000af0:	6803      	ldr	r3, [r0, #0]
 8000af2:	5899      	ldr	r1, [r3, r2]
 8000af4:	0749      	lsls	r1, r1, #29
 8000af6:	d505      	bpl.n	8000b04 <HAL_ETH_TransmitFrame+0xd0>
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8000af8:	2104      	movs	r1, #4
 8000afa:	5099      	str	r1, [r3, r2]
    (heth->Instance)->DMATPDR = 0;
 8000afc:	2100      	movs	r1, #0
 8000afe:	f241 0204 	movw	r2, #4100	; 0x1004
 8000b02:	5099      	str	r1, [r3, r2]
  heth->State = HAL_ETH_STATE_READY;
 8000b04:	2301      	movs	r3, #1
 8000b06:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  __HAL_LOCK(heth);
 8000b10:	4618      	mov	r0, r3
}
 8000b12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b14:	fffffa0c 	.word	0xfffffa0c

08000b18 <HAL_ETH_GetReceivedFrame>:
  __HAL_LOCK(heth);
 8000b18:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8000b1c:	2b01      	cmp	r3, #1
 8000b1e:	f04f 0302 	mov.w	r3, #2
{
 8000b22:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(heth);
 8000b24:	d023      	beq.n	8000b6e <HAL_ETH_GetReceivedFrame+0x56>
  heth->State = HAL_ETH_STATE_BUSY;
 8000b26:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_LOCK(heth);
 8000b2a:	2401      	movs	r4, #1
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 8000b2c:	6a83      	ldr	r3, [r0, #40]	; 0x28
  __HAL_LOCK(heth);
 8000b2e:	f880 4045 	strb.w	r4, [r0, #69]	; 0x45
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 8000b32:	681a      	ldr	r2, [r3, #0]
 8000b34:	2a00      	cmp	r2, #0
 8000b36:	db27      	blt.n	8000b88 <HAL_ETH_GetReceivedFrame+0x70>
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 8000b38:	681a      	ldr	r2, [r3, #0]
 8000b3a:	68d9      	ldr	r1, [r3, #12]
 8000b3c:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8000b40:	d017      	beq.n	8000b72 <HAL_ETH_GetReceivedFrame+0x5a>
      (heth->RxFrameInfos).SegCount++;
 8000b42:	6b82      	ldr	r2, [r0, #56]	; 0x38
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8000b44:	6343      	str	r3, [r0, #52]	; 0x34
      (heth->RxFrameInfos).SegCount++;
 8000b46:	4422      	add	r2, r4
      if ((heth->RxFrameInfos).SegCount == 1)
 8000b48:	42a2      	cmp	r2, r4
      (heth->RxFrameInfos).SegCount++;
 8000b4a:	6382      	str	r2, [r0, #56]	; 0x38
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 8000b4c:	bf08      	it	eq
 8000b4e:	6303      	streq	r3, [r0, #48]	; 0x30
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	f3c3 430d 	ubfx	r3, r3, #16, #14
 8000b56:	3b04      	subs	r3, #4
      heth->RxFrameInfos.length = framelength;
 8000b58:	63c3      	str	r3, [r0, #60]	; 0x3c
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8000b5a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8000b5c:	689b      	ldr	r3, [r3, #8]
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 8000b5e:	6281      	str	r1, [r0, #40]	; 0x28
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8000b60:	6403      	str	r3, [r0, #64]	; 0x40
      heth->State = HAL_ETH_STATE_READY;
 8000b62:	2301      	movs	r3, #1
 8000b64:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000b68:	2300      	movs	r3, #0
 8000b6a:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	bd30      	pop	{r4, r5, pc}
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8000b72:	681d      	ldr	r5, [r3, #0]
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8000b74:	6281      	str	r1, [r0, #40]	; 0x28
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8000b76:	05ad      	lsls	r5, r5, #22
      (heth->RxFrameInfos).SegCount++;
 8000b78:	bf55      	itete	pl
 8000b7a:	6b83      	ldrpl	r3, [r0, #56]	; 0x38
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8000b7c:	6303      	strmi	r3, [r0, #48]	; 0x30
      (heth->RxFrameInfos).SegCount++;
 8000b7e:	3301      	addpl	r3, #1
      (heth->RxFrameInfos).LSRxDesc = NULL;
 8000b80:	6342      	strmi	r2, [r0, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1;
 8000b82:	bf4c      	ite	mi
 8000b84:	6384      	strmi	r4, [r0, #56]	; 0x38
      (heth->RxFrameInfos).SegCount++;
 8000b86:	6383      	strpl	r3, [r0, #56]	; 0x38
  heth->State = HAL_ETH_STATE_READY;
 8000b88:	2301      	movs	r3, #1
  __HAL_UNLOCK(heth);
 8000b8a:	2200      	movs	r2, #0
  heth->State = HAL_ETH_STATE_READY;
 8000b8c:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8000b90:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  return HAL_ERROR;
 8000b94:	e7eb      	b.n	8000b6e <HAL_ETH_GetReceivedFrame+0x56>

08000b96 <HAL_ETH_ReadPHYRegister>:
{
 8000b96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8000b98:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
{
 8000b9c:	4605      	mov	r5, r0
 8000b9e:	4616      	mov	r6, r2
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8000ba0:	2b82      	cmp	r3, #130	; 0x82
 8000ba2:	d030      	beq.n	8000c06 <HAL_ETH_ReadPHYRegister+0x70>
  tmpreg = heth->Instance->MACMIIAR;
 8000ba4:	6802      	ldr	r2, [r0, #0]
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8000ba6:	2382      	movs	r3, #130	; 0x82
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8000ba8:	0189      	lsls	r1, r1, #6
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8000baa:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg = heth->Instance->MACMIIAR;
 8000bae:	6913      	ldr	r3, [r2, #16]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8000bb0:	f401 64f8 	and.w	r4, r1, #1984	; 0x7c0
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8000bb4:	f003 011c 	and.w	r1, r3, #28
 8000bb8:	4321      	orrs	r1, r4
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8000bba:	8a04      	ldrh	r4, [r0, #16]
 8000bbc:	02e4      	lsls	r4, r4, #11
 8000bbe:	b2a4      	uxth	r4, r4
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8000bc0:	430c      	orrs	r4, r1
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8000bc2:	f044 0401 	orr.w	r4, r4, #1
  heth->Instance->MACMIIAR = tmpreg;
 8000bc6:	6114      	str	r4, [r2, #16]
  tickstart = HAL_GetTick();
 8000bc8:	f7ff fd66 	bl	8000698 <HAL_GetTick>
 8000bcc:	4607      	mov	r7, r0
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000bce:	f014 0001 	ands.w	r0, r4, #1
 8000bd2:	d107      	bne.n	8000be4 <HAL_ETH_ReadPHYRegister+0x4e>
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8000bd4:	682b      	ldr	r3, [r5, #0]
 8000bd6:	695b      	ldr	r3, [r3, #20]
 8000bd8:	b29b      	uxth	r3, r3
 8000bda:	6033      	str	r3, [r6, #0]
  heth->State = HAL_ETH_STATE_READY;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
 8000be2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8000be4:	f7ff fd58 	bl	8000698 <HAL_GetTick>
 8000be8:	1bc0      	subs	r0, r0, r7
 8000bea:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8000bee:	d307      	bcc.n	8000c00 <HAL_ETH_ReadPHYRegister+0x6a>
      heth->State= HAL_ETH_STATE_READY;
 8000bf0:	2301      	movs	r3, #1
      return HAL_TIMEOUT;
 8000bf2:	2003      	movs	r0, #3
      heth->State= HAL_ETH_STATE_READY;
 8000bf4:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
      return HAL_TIMEOUT;
 8000bfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpreg = heth->Instance->MACMIIAR;
 8000c00:	682b      	ldr	r3, [r5, #0]
 8000c02:	691c      	ldr	r4, [r3, #16]
 8000c04:	e7e3      	b.n	8000bce <HAL_ETH_ReadPHYRegister+0x38>
    return HAL_BUSY;
 8000c06:	2002      	movs	r0, #2
}
 8000c08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000c0a <HAL_ETH_WritePHYRegister>:
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8000c0a:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8000c0e:	2b42      	cmp	r3, #66	; 0x42
{
 8000c10:	b570      	push	{r4, r5, r6, lr}
 8000c12:	4605      	mov	r5, r0
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8000c14:	d02e      	beq.n	8000c74 <HAL_ETH_WritePHYRegister+0x6a>
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8000c16:	2342      	movs	r3, #66	; 0x42
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8000c18:	018c      	lsls	r4, r1, #6
 8000c1a:	b292      	uxth	r2, r2
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8000c1c:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8000c20:	f404 64f8 	and.w	r4, r4, #1984	; 0x7c0
  tmpreg = heth->Instance->MACMIIAR;
 8000c24:	6803      	ldr	r3, [r0, #0]
 8000c26:	f044 0403 	orr.w	r4, r4, #3
 8000c2a:	6918      	ldr	r0, [r3, #16]
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8000c2c:	f000 001c 	and.w	r0, r0, #28
 8000c30:	4320      	orrs	r0, r4
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8000c32:	8a2c      	ldrh	r4, [r5, #16]
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8000c34:	615a      	str	r2, [r3, #20]
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8000c36:	02e4      	lsls	r4, r4, #11
 8000c38:	b2a4      	uxth	r4, r4
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8000c3a:	4304      	orrs	r4, r0
  heth->Instance->MACMIIAR = tmpreg;
 8000c3c:	611c      	str	r4, [r3, #16]
  tickstart = HAL_GetTick();
 8000c3e:	f7ff fd2b 	bl	8000698 <HAL_GetTick>
 8000c42:	4606      	mov	r6, r0
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000c44:	f014 0001 	ands.w	r0, r4, #1
 8000c48:	d103      	bne.n	8000c52 <HAL_ETH_WritePHYRegister+0x48>
  heth->State = HAL_ETH_STATE_READY;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
 8000c50:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8000c52:	f7ff fd21 	bl	8000698 <HAL_GetTick>
 8000c56:	1b80      	subs	r0, r0, r6
 8000c58:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8000c5c:	d307      	bcc.n	8000c6e <HAL_ETH_WritePHYRegister+0x64>
      heth->State= HAL_ETH_STATE_READY;
 8000c5e:	2301      	movs	r3, #1
      return HAL_TIMEOUT;
 8000c60:	2003      	movs	r0, #3
      heth->State= HAL_ETH_STATE_READY;
 8000c62:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000c66:	2300      	movs	r3, #0
 8000c68:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
 8000c6c:	bd70      	pop	{r4, r5, r6, pc}
    tmpreg = heth->Instance->MACMIIAR;
 8000c6e:	682b      	ldr	r3, [r5, #0]
 8000c70:	691c      	ldr	r4, [r3, #16]
 8000c72:	e7e7      	b.n	8000c44 <HAL_ETH_WritePHYRegister+0x3a>
    return HAL_BUSY;
 8000c74:	2002      	movs	r0, #2
}
 8000c76:	bd70      	pop	{r4, r5, r6, pc}

08000c78 <HAL_ETH_Init>:
  uint32_t tempreg = 0, phyreg = 0;
 8000c78:	2300      	movs	r3, #0
{
 8000c7a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(heth == NULL)
 8000c7c:	4604      	mov	r4, r0
  uint32_t tempreg = 0, phyreg = 0;
 8000c7e:	9300      	str	r3, [sp, #0]
  if(heth == NULL)
 8000c80:	2800      	cmp	r0, #0
 8000c82:	f000 80dc 	beq.w	8000e3e <HAL_ETH_Init+0x1c6>
  if(heth->State == HAL_ETH_STATE_RESET)
 8000c86:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8000c8a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000c8e:	b91b      	cbnz	r3, 8000c98 <HAL_ETH_Init+0x20>
    heth->Lock = HAL_UNLOCKED;
 8000c90:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
    HAL_ETH_MspInit(heth);
 8000c94:	f007 fe36 	bl	8008904 <HAL_ETH_MspInit>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c98:	4b6a      	ldr	r3, [pc, #424]	; (8000e44 <HAL_ETH_Init+0x1cc>)
 8000c9a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000c9c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000ca0:	645a      	str	r2, [r3, #68]	; 0x44
 8000ca2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ca4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ca8:	9301      	str	r3, [sp, #4]
 8000caa:	9b01      	ldr	r3, [sp, #4]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8000cac:	4b66      	ldr	r3, [pc, #408]	; (8000e48 <HAL_ETH_Init+0x1d0>)
 8000cae:	685a      	ldr	r2, [r3, #4]
 8000cb0:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8000cb4:	605a      	str	r2, [r3, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8000cb6:	685a      	ldr	r2, [r3, #4]
 8000cb8:	6a21      	ldr	r1, [r4, #32]
 8000cba:	430a      	orrs	r2, r1
 8000cbc:	605a      	str	r2, [r3, #4]
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8000cbe:	6823      	ldr	r3, [r4, #0]
 8000cc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000cc4:	681a      	ldr	r2, [r3, #0]
 8000cc6:	f042 0201 	orr.w	r2, r2, #1
 8000cca:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8000ccc:	f7ff fce4 	bl	8000698 <HAL_GetTick>
 8000cd0:	4605      	mov	r5, r0
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000cd2:	6823      	ldr	r3, [r4, #0]
 8000cd4:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8000cd8:	6812      	ldr	r2, [r2, #0]
 8000cda:	07d0      	lsls	r0, r2, #31
 8000cdc:	d41d      	bmi.n	8000d1a <HAL_ETH_Init+0xa2>
  tempreg = (heth->Instance)->MACMIIAR;
 8000cde:	691d      	ldr	r5, [r3, #16]
  hclk = HAL_RCC_GetHCLKFreq();
 8000ce0:	f000 fcd4 	bl	800168c <HAL_RCC_GetHCLKFreq>
  if((hclk >= 20000000)&&(hclk < 35000000))
 8000ce4:	4b59      	ldr	r3, [pc, #356]	; (8000e4c <HAL_ETH_Init+0x1d4>)
 8000ce6:	4a5a      	ldr	r2, [pc, #360]	; (8000e50 <HAL_ETH_Init+0x1d8>)
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8000ce8:	f025 051c 	bic.w	r5, r5, #28
  if((hclk >= 20000000)&&(hclk < 35000000))
 8000cec:	4403      	add	r3, r0
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d822      	bhi.n	8000d38 <HAL_ETH_Init+0xc0>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8000cf2:	f045 0508 	orr.w	r5, r5, #8
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8000cf6:	6823      	ldr	r3, [r4, #0]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8000cf8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	4620      	mov	r0, r4
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8000d00:	611d      	str	r5, [r3, #16]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8000d02:	f7ff ff82 	bl	8000c0a <HAL_ETH_WritePHYRegister>
 8000d06:	4605      	mov	r5, r0
 8000d08:	b368      	cbz	r0, 8000d66 <HAL_ETH_Init+0xee>
      heth->State = HAL_ETH_STATE_READY;
 8000d0a:	2501      	movs	r5, #1
      ETH_MACDMAConfig(heth, err);
 8000d0c:	2101      	movs	r1, #1
 8000d0e:	4620      	mov	r0, r4
 8000d10:	f7ff fd9a 	bl	8000848 <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 8000d14:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;
 8000d18:	e00b      	b.n	8000d32 <HAL_ETH_Init+0xba>
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8000d1a:	f7ff fcbd 	bl	8000698 <HAL_GetTick>
 8000d1e:	1b40      	subs	r0, r0, r5
 8000d20:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8000d24:	d9d5      	bls.n	8000cd2 <HAL_ETH_Init+0x5a>
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8000d26:	2503      	movs	r5, #3
      __HAL_UNLOCK(heth);
 8000d28:	2300      	movs	r3, #0
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8000d2a:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000d2e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 8000d32:	4628      	mov	r0, r5
 8000d34:	b003      	add	sp, #12
 8000d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8000d38:	4b46      	ldr	r3, [pc, #280]	; (8000e54 <HAL_ETH_Init+0x1dc>)
 8000d3a:	4a47      	ldr	r2, [pc, #284]	; (8000e58 <HAL_ETH_Init+0x1e0>)
 8000d3c:	4403      	add	r3, r0
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d802      	bhi.n	8000d48 <HAL_ETH_Init+0xd0>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8000d42:	f045 050c 	orr.w	r5, r5, #12
 8000d46:	e7d6      	b.n	8000cf6 <HAL_ETH_Init+0x7e>
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8000d48:	4b44      	ldr	r3, [pc, #272]	; (8000e5c <HAL_ETH_Init+0x1e4>)
 8000d4a:	4a45      	ldr	r2, [pc, #276]	; (8000e60 <HAL_ETH_Init+0x1e8>)
 8000d4c:	4403      	add	r3, r0
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d9d1      	bls.n	8000cf6 <HAL_ETH_Init+0x7e>
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8000d52:	4b44      	ldr	r3, [pc, #272]	; (8000e64 <HAL_ETH_Init+0x1ec>)
 8000d54:	4a44      	ldr	r2, [pc, #272]	; (8000e68 <HAL_ETH_Init+0x1f0>)
 8000d56:	4403      	add	r3, r0
 8000d58:	4293      	cmp	r3, r2
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8000d5a:	bf94      	ite	ls
 8000d5c:	f045 0504 	orrls.w	r5, r5, #4
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8000d60:	f045 0510 	orrhi.w	r5, r5, #16
 8000d64:	e7c7      	b.n	8000cf6 <HAL_ETH_Init+0x7e>
  HAL_Delay(PHY_RESET_DELAY);
 8000d66:	20ff      	movs	r0, #255	; 0xff
 8000d68:	f7ff fc9c 	bl	80006a4 <HAL_Delay>
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8000d6c:	6863      	ldr	r3, [r4, #4]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d053      	beq.n	8000e1a <HAL_ETH_Init+0x1a2>
    tickstart = HAL_GetTick();
 8000d72:	f7ff fc91 	bl	8000698 <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8000d76:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000d7a:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000d7c:	466a      	mov	r2, sp
 8000d7e:	2101      	movs	r1, #1
 8000d80:	4620      	mov	r0, r4
 8000d82:	f7ff ff08 	bl	8000b96 <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8000d86:	f7ff fc87 	bl	8000698 <HAL_GetTick>
 8000d8a:	1b80      	subs	r0, r0, r6
 8000d8c:	42b8      	cmp	r0, r7
 8000d8e:	d90b      	bls.n	8000da8 <HAL_ETH_Init+0x130>
        ETH_MACDMAConfig(heth, err);
 8000d90:	2101      	movs	r1, #1
 8000d92:	4620      	mov	r0, r4
 8000d94:	f7ff fd58 	bl	8000848 <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 8000d98:	2301      	movs	r3, #1
        return HAL_TIMEOUT;
 8000d9a:	2503      	movs	r5, #3
        heth->State= HAL_ETH_STATE_READY;
 8000d9c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 8000da0:	2300      	movs	r3, #0
 8000da2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 8000da6:	e7c4      	b.n	8000d32 <HAL_ETH_Init+0xba>
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8000da8:	9b00      	ldr	r3, [sp, #0]
 8000daa:	0759      	lsls	r1, r3, #29
 8000dac:	d5e6      	bpl.n	8000d7c <HAL_ETH_Init+0x104>
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8000dae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000db2:	2100      	movs	r1, #0
 8000db4:	4620      	mov	r0, r4
 8000db6:	f7ff ff28 	bl	8000c0a <HAL_ETH_WritePHYRegister>
 8000dba:	2800      	cmp	r0, #0
 8000dbc:	d1a5      	bne.n	8000d0a <HAL_ETH_Init+0x92>
    tickstart = HAL_GetTick();
 8000dbe:	f7ff fc6b 	bl	8000698 <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8000dc2:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000dc6:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000dc8:	466a      	mov	r2, sp
 8000dca:	2101      	movs	r1, #1
 8000dcc:	4620      	mov	r0, r4
 8000dce:	f7ff fee2 	bl	8000b96 <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8000dd2:	f7ff fc61 	bl	8000698 <HAL_GetTick>
 8000dd6:	1b80      	subs	r0, r0, r6
 8000dd8:	42b8      	cmp	r0, r7
 8000dda:	d8d9      	bhi.n	8000d90 <HAL_ETH_Init+0x118>
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8000ddc:	9b00      	ldr	r3, [sp, #0]
 8000dde:	069a      	lsls	r2, r3, #26
 8000de0:	d5f2      	bpl.n	8000dc8 <HAL_ETH_Init+0x150>
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8000de2:	466a      	mov	r2, sp
 8000de4:	211f      	movs	r1, #31
 8000de6:	4620      	mov	r0, r4
 8000de8:	f7ff fed5 	bl	8000b96 <HAL_ETH_ReadPHYRegister>
 8000dec:	2800      	cmp	r0, #0
 8000dee:	d18c      	bne.n	8000d0a <HAL_ETH_Init+0x92>
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8000df0:	9b00      	ldr	r3, [sp, #0]
 8000df2:	f013 0210 	ands.w	r2, r3, #16
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8000df6:	bf18      	it	ne
 8000df8:	f44f 6200 	movne.w	r2, #2048	; 0x800
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8000dfc:	075b      	lsls	r3, r3, #29
      (heth->Init).Speed = ETH_SPEED_10M; 
 8000dfe:	bf4c      	ite	mi
 8000e00:	2300      	movmi	r3, #0
      (heth->Init).Speed = ETH_SPEED_100M;
 8000e02:	f44f 4380 	movpl.w	r3, #16384	; 0x4000
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8000e06:	60e2      	str	r2, [r4, #12]
      (heth->Init).Speed = ETH_SPEED_100M;
 8000e08:	60a3      	str	r3, [r4, #8]
  ETH_MACDMAConfig(heth, err);
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	4620      	mov	r0, r4
 8000e0e:	f7ff fd1b 	bl	8000848 <ETH_MACDMAConfig>
  heth->State= HAL_ETH_STATE_READY;
 8000e12:	2301      	movs	r3, #1
 8000e14:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  return HAL_OK;
 8000e18:	e78b      	b.n	8000d32 <HAL_ETH_Init+0xba>
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8000e1a:	68a3      	ldr	r3, [r4, #8]
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8000e1c:	4629      	mov	r1, r5
 8000e1e:	68e2      	ldr	r2, [r4, #12]
 8000e20:	4620      	mov	r0, r4
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8000e22:	085b      	lsrs	r3, r3, #1
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8000e24:	ea43 02d2 	orr.w	r2, r3, r2, lsr #3
 8000e28:	b292      	uxth	r2, r2
 8000e2a:	f7ff feee 	bl	8000c0a <HAL_ETH_WritePHYRegister>
 8000e2e:	2800      	cmp	r0, #0
 8000e30:	f47f af6b 	bne.w	8000d0a <HAL_ETH_Init+0x92>
    HAL_Delay(PHY_CONFIG_DELAY);
 8000e34:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000e38:	f7ff fc34 	bl	80006a4 <HAL_Delay>
 8000e3c:	e7e5      	b.n	8000e0a <HAL_ETH_Init+0x192>
    return HAL_ERROR;
 8000e3e:	2501      	movs	r5, #1
 8000e40:	e777      	b.n	8000d32 <HAL_ETH_Init+0xba>
 8000e42:	bf00      	nop
 8000e44:	40023800 	.word	0x40023800
 8000e48:	40013800 	.word	0x40013800
 8000e4c:	feced300 	.word	0xfeced300
 8000e50:	00e4e1bf 	.word	0x00e4e1bf
 8000e54:	fde9f140 	.word	0xfde9f140
 8000e58:	017d783f 	.word	0x017d783f
 8000e5c:	fc6c7900 	.word	0xfc6c7900
 8000e60:	026259ff 	.word	0x026259ff
 8000e64:	fa0a1f00 	.word	0xfa0a1f00
 8000e68:	02faf07f 	.word	0x02faf07f

08000e6c <HAL_ETH_Start>:
  __HAL_LOCK(heth);
 8000e6c:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8000e70:	2b01      	cmp	r3, #1
{  
 8000e72:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000e74:	4605      	mov	r5, r0
 8000e76:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(heth);
 8000e7a:	d033      	beq.n	8000ee4 <HAL_ETH_Start+0x78>
  __IO uint32_t tmpreg = 0;
 8000e7c:	2400      	movs	r4, #0
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8000e7e:	682b      	ldr	r3, [r5, #0]
  heth->State = HAL_ETH_STATE_BUSY;
 8000e80:	f885 0044 	strb.w	r0, [r5, #68]	; 0x44
  __HAL_LOCK(heth);
 8000e84:	2601      	movs	r6, #1
  __IO uint32_t tmpreg = 0;
 8000e86:	9401      	str	r4, [sp, #4]
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8000e88:	681a      	ldr	r2, [r3, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8000e8a:	4630      	mov	r0, r6
  __HAL_LOCK(heth);
 8000e8c:	f885 6045 	strb.w	r6, [r5, #69]	; 0x45
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8000e90:	f042 0208 	orr.w	r2, r2, #8
 8000e94:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8000e9a:	f7ff fc03 	bl	80006a4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8000e9e:	9a01      	ldr	r2, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8000ea0:	4630      	mov	r0, r6
  (heth->Instance)->MACCR = tmpreg;
 8000ea2:	682b      	ldr	r3, [r5, #0]
 8000ea4:	601a      	str	r2, [r3, #0]
  __IO uint32_t tmpreg = 0;
 8000ea6:	9400      	str	r4, [sp, #0]
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8000ea8:	681a      	ldr	r2, [r3, #0]
 8000eaa:	f042 0204 	orr.w	r2, r2, #4
 8000eae:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	9300      	str	r3, [sp, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8000eb4:	f7ff fbf6 	bl	80006a4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8000eb8:	682b      	ldr	r3, [r5, #0]
  ETH_FlushTransmitFIFO(heth);
 8000eba:	4628      	mov	r0, r5
  (heth->Instance)->MACCR = tmpreg;
 8000ebc:	9a00      	ldr	r2, [sp, #0]
 8000ebe:	601a      	str	r2, [r3, #0]
  ETH_FlushTransmitFIFO(heth);
 8000ec0:	f7ff fcac 	bl	800081c <ETH_FlushTransmitFIFO>
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8000ec4:	682a      	ldr	r2, [r5, #0]
 8000ec6:	f241 0318 	movw	r3, #4120	; 0x1018
  return HAL_OK;
 8000eca:	4620      	mov	r0, r4
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8000ecc:	58d1      	ldr	r1, [r2, r3]
 8000ece:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 8000ed2:	50d1      	str	r1, [r2, r3]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8000ed4:	58d1      	ldr	r1, [r2, r3]
 8000ed6:	f041 0102 	orr.w	r1, r1, #2
 8000eda:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 8000edc:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8000ee0:	f885 4045 	strb.w	r4, [r5, #69]	; 0x45
}
 8000ee4:	b002      	add	sp, #8
 8000ee6:	bd70      	pop	{r4, r5, r6, pc}

08000ee8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000eec:	680b      	ldr	r3, [r1, #0]
{
 8000eee:	b085      	sub	sp, #20
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ef0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80010b4 <HAL_GPIO_Init+0x1cc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ef4:	9301      	str	r3, [sp, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000ef6:	2300      	movs	r3, #0
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ef8:	4a6c      	ldr	r2, [pc, #432]	; (80010ac <HAL_GPIO_Init+0x1c4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000efa:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 80010b8 <HAL_GPIO_Init+0x1d0>
    ioposition = ((uint32_t)0x01) << position;
 8000efe:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f00:	9d01      	ldr	r5, [sp, #4]
    ioposition = ((uint32_t)0x01) << position;
 8000f02:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f04:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 8000f06:	42ac      	cmp	r4, r5
 8000f08:	f040 80b6 	bne.w	8001078 <HAL_GPIO_Init+0x190>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f0c:	684c      	ldr	r4, [r1, #4]
 8000f0e:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000f12:	f024 0c10 	bic.w	ip, r4, #16
 8000f16:	f10c 36ff 	add.w	r6, ip, #4294967295
 8000f1a:	2e01      	cmp	r6, #1
 8000f1c:	d812      	bhi.n	8000f44 <HAL_GPIO_Init+0x5c>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000f1e:	2603      	movs	r6, #3
        temp = GPIOx->OSPEEDR; 
 8000f20:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000f22:	fa06 f60e 	lsl.w	r6, r6, lr
 8000f26:	ea27 0706 	bic.w	r7, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2));
 8000f2a:	68ce      	ldr	r6, [r1, #12]
 8000f2c:	fa06 f60e 	lsl.w	r6, r6, lr
 8000f30:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 8000f32:	6086      	str	r6, [r0, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000f34:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp = GPIOx->OTYPER;
 8000f38:	6847      	ldr	r7, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000f3a:	409e      	lsls	r6, r3
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f3c:	ea27 0705 	bic.w	r7, r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000f40:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 8000f42:	6046      	str	r6, [r0, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000f44:	2603      	movs	r6, #3
      temp = GPIOx->PUPDR;
 8000f46:	68c7      	ldr	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f48:	f1bc 0f02 	cmp.w	ip, #2
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000f4c:	fa06 f60e 	lsl.w	r6, r6, lr
 8000f50:	ea6f 0606 	mvn.w	r6, r6
 8000f54:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000f58:	688f      	ldr	r7, [r1, #8]
 8000f5a:	fa07 f70e 	lsl.w	r7, r7, lr
 8000f5e:	ea47 070a 	orr.w	r7, r7, sl
      GPIOx->PUPDR = temp;
 8000f62:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f64:	d116      	bne.n	8000f94 <HAL_GPIO_Init+0xac>
        temp = GPIOx->AFR[position >> 3];
 8000f66:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000f6a:	f003 0b07 	and.w	fp, r3, #7
 8000f6e:	f04f 0c0f 	mov.w	ip, #15
 8000f72:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8000f76:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8000f7a:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000f7e:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000f82:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000f86:	690f      	ldr	r7, [r1, #16]
 8000f88:	fa07 f70b 	lsl.w	r7, r7, fp
 8000f8c:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3] = temp;
 8000f90:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 8000f94:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000f96:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000f98:	f004 0703 	and.w	r7, r4, #3
 8000f9c:	fa07 fe0e 	lsl.w	lr, r7, lr
 8000fa0:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 8000fa4:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fa6:	00e6      	lsls	r6, r4, #3
 8000fa8:	d566      	bpl.n	8001078 <HAL_GPIO_Init+0x190>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000faa:	f8d8 6044 	ldr.w	r6, [r8, #68]	; 0x44
 8000fae:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000fb2:	f003 0e03 	and.w	lr, r3, #3
 8000fb6:	f04f 0c0f 	mov.w	ip, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fba:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8000fbe:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000fc2:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fc6:	f8c8 6044 	str.w	r6, [r8, #68]	; 0x44
 8000fca:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 8000fce:	f8d8 6044 	ldr.w	r6, [r8, #68]	; 0x44
 8000fd2:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8000fd6:	9603      	str	r6, [sp, #12]
 8000fd8:	9e03      	ldr	r6, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000fda:	fa0c f60e 	lsl.w	r6, ip, lr
        temp = SYSCFG->EXTICR[position >> 2];
 8000fde:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000fe2:	ea2a 0c06 	bic.w	ip, sl, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000fe6:	4e32      	ldr	r6, [pc, #200]	; (80010b0 <HAL_GPIO_Init+0x1c8>)
 8000fe8:	42b0      	cmp	r0, r6
 8000fea:	d04c      	beq.n	8001086 <HAL_GPIO_Init+0x19e>
 8000fec:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000ff0:	42b0      	cmp	r0, r6
 8000ff2:	d04a      	beq.n	800108a <HAL_GPIO_Init+0x1a2>
 8000ff4:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000ff8:	42b0      	cmp	r0, r6
 8000ffa:	d048      	beq.n	800108e <HAL_GPIO_Init+0x1a6>
 8000ffc:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001000:	42b0      	cmp	r0, r6
 8001002:	d046      	beq.n	8001092 <HAL_GPIO_Init+0x1aa>
 8001004:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001008:	42b0      	cmp	r0, r6
 800100a:	d044      	beq.n	8001096 <HAL_GPIO_Init+0x1ae>
 800100c:	4548      	cmp	r0, r9
 800100e:	d044      	beq.n	800109a <HAL_GPIO_Init+0x1b2>
 8001010:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8001014:	42b0      	cmp	r0, r6
 8001016:	d042      	beq.n	800109e <HAL_GPIO_Init+0x1b6>
 8001018:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800101c:	42b0      	cmp	r0, r6
 800101e:	d040      	beq.n	80010a2 <HAL_GPIO_Init+0x1ba>
 8001020:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001024:	42b0      	cmp	r0, r6
 8001026:	d03e      	beq.n	80010a6 <HAL_GPIO_Init+0x1be>
 8001028:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800102c:	42b0      	cmp	r0, r6
 800102e:	bf14      	ite	ne
 8001030:	260a      	movne	r6, #10
 8001032:	2609      	moveq	r6, #9
 8001034:	fa06 f60e 	lsl.w	r6, r6, lr
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001038:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800103c:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 8001040:	60be      	str	r6, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
 8001042:	ea6f 0705 	mvn.w	r7, r5
        temp = EXTI->IMR;
 8001046:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001048:	bf0c      	ite	eq
 800104a:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 800104c:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800104e:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        EXTI->IMR = temp;
 8001052:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR;
 8001054:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8001056:	bf0c      	ite	eq
 8001058:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 800105a:	432e      	orrne	r6, r5
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800105c:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        EXTI->EMR = temp;
 8001060:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR;
 8001062:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8001064:	bf0c      	ite	eq
 8001066:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8001068:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800106a:	02a4      	lsls	r4, r4, #10
        EXTI->RTSR = temp;
 800106c:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR;
 800106e:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8001070:	bf54      	ite	pl
 8001072:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 8001074:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 8001076:	60d6      	str	r6, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001078:	3301      	adds	r3, #1
 800107a:	2b10      	cmp	r3, #16
 800107c:	f47f af3f 	bne.w	8000efe <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8001080:	b005      	add	sp, #20
 8001082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001086:	2600      	movs	r6, #0
 8001088:	e7d4      	b.n	8001034 <HAL_GPIO_Init+0x14c>
 800108a:	2601      	movs	r6, #1
 800108c:	e7d2      	b.n	8001034 <HAL_GPIO_Init+0x14c>
 800108e:	2602      	movs	r6, #2
 8001090:	e7d0      	b.n	8001034 <HAL_GPIO_Init+0x14c>
 8001092:	2603      	movs	r6, #3
 8001094:	e7ce      	b.n	8001034 <HAL_GPIO_Init+0x14c>
 8001096:	2604      	movs	r6, #4
 8001098:	e7cc      	b.n	8001034 <HAL_GPIO_Init+0x14c>
 800109a:	2605      	movs	r6, #5
 800109c:	e7ca      	b.n	8001034 <HAL_GPIO_Init+0x14c>
 800109e:	2606      	movs	r6, #6
 80010a0:	e7c8      	b.n	8001034 <HAL_GPIO_Init+0x14c>
 80010a2:	2607      	movs	r6, #7
 80010a4:	e7c6      	b.n	8001034 <HAL_GPIO_Init+0x14c>
 80010a6:	2608      	movs	r6, #8
 80010a8:	e7c4      	b.n	8001034 <HAL_GPIO_Init+0x14c>
 80010aa:	bf00      	nop
 80010ac:	40013c00 	.word	0x40013c00
 80010b0:	40020000 	.word	0x40020000
 80010b4:	40023800 	.word	0x40023800
 80010b8:	40021400 	.word	0x40021400

080010bc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010bc:	b10a      	cbz	r2, 80010c2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80010be:	6181      	str	r1, [r0, #24]
 80010c0:	4770      	bx	lr
 80010c2:	0409      	lsls	r1, r1, #16
 80010c4:	e7fb      	b.n	80010be <HAL_GPIO_WritePin+0x2>
	...

080010c8 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80010c8:	4a02      	ldr	r2, [pc, #8]	; (80010d4 <HAL_PWR_EnableBkUpAccess+0xc>)
 80010ca:	6813      	ldr	r3, [r2, #0]
 80010cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010d0:	6013      	str	r3, [r2, #0]
 80010d2:	4770      	bx	lr
 80010d4:	40007000 	.word	0x40007000

080010d8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010d8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010dc:	4604      	mov	r4, r0
 80010de:	b908      	cbnz	r0, 80010e4 <HAL_RCC_OscConfig+0xc>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80010e0:	2001      	movs	r0, #1
 80010e2:	e03f      	b.n	8001164 <HAL_RCC_OscConfig+0x8c>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010e4:	6803      	ldr	r3, [r0, #0]
 80010e6:	07d8      	lsls	r0, r3, #31
 80010e8:	d410      	bmi.n	800110c <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010ea:	6823      	ldr	r3, [r4, #0]
 80010ec:	0799      	lsls	r1, r3, #30
 80010ee:	d460      	bmi.n	80011b2 <HAL_RCC_OscConfig+0xda>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010f0:	6823      	ldr	r3, [r4, #0]
 80010f2:	0719      	lsls	r1, r3, #28
 80010f4:	f100 80a5 	bmi.w	8001242 <HAL_RCC_OscConfig+0x16a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010f8:	6823      	ldr	r3, [r4, #0]
 80010fa:	075a      	lsls	r2, r3, #29
 80010fc:	f100 80c6 	bmi.w	800128c <HAL_RCC_OscConfig+0x1b4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001100:	69a0      	ldr	r0, [r4, #24]
 8001102:	2800      	cmp	r0, #0
 8001104:	f040 8130 	bne.w	8001368 <HAL_RCC_OscConfig+0x290>
      }
    }
  }
  return HAL_OK;
 8001108:	2000      	movs	r0, #0
 800110a:	e02b      	b.n	8001164 <HAL_RCC_OscConfig+0x8c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800110c:	4b94      	ldr	r3, [pc, #592]	; (8001360 <HAL_RCC_OscConfig+0x288>)
 800110e:	689a      	ldr	r2, [r3, #8]
 8001110:	f002 020c 	and.w	r2, r2, #12
 8001114:	2a04      	cmp	r2, #4
 8001116:	d007      	beq.n	8001128 <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001118:	689a      	ldr	r2, [r3, #8]
 800111a:	f002 020c 	and.w	r2, r2, #12
 800111e:	2a08      	cmp	r2, #8
 8001120:	d10a      	bne.n	8001138 <HAL_RCC_OscConfig+0x60>
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	025a      	lsls	r2, r3, #9
 8001126:	d507      	bpl.n	8001138 <HAL_RCC_OscConfig+0x60>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001128:	4b8d      	ldr	r3, [pc, #564]	; (8001360 <HAL_RCC_OscConfig+0x288>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	039b      	lsls	r3, r3, #14
 800112e:	d5dc      	bpl.n	80010ea <HAL_RCC_OscConfig+0x12>
 8001130:	6863      	ldr	r3, [r4, #4]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d1d9      	bne.n	80010ea <HAL_RCC_OscConfig+0x12>
 8001136:	e7d3      	b.n	80010e0 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001138:	6863      	ldr	r3, [r4, #4]
 800113a:	4d89      	ldr	r5, [pc, #548]	; (8001360 <HAL_RCC_OscConfig+0x288>)
 800113c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001140:	d113      	bne.n	800116a <HAL_RCC_OscConfig+0x92>
 8001142:	682b      	ldr	r3, [r5, #0]
 8001144:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001148:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800114a:	f7ff faa5 	bl	8000698 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800114e:	4d84      	ldr	r5, [pc, #528]	; (8001360 <HAL_RCC_OscConfig+0x288>)
        tickstart = HAL_GetTick();
 8001150:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001152:	682b      	ldr	r3, [r5, #0]
 8001154:	039f      	lsls	r7, r3, #14
 8001156:	d4c8      	bmi.n	80010ea <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001158:	f7ff fa9e 	bl	8000698 <HAL_GetTick>
 800115c:	1b80      	subs	r0, r0, r6
 800115e:	2864      	cmp	r0, #100	; 0x64
 8001160:	d9f7      	bls.n	8001152 <HAL_RCC_OscConfig+0x7a>
            return HAL_TIMEOUT;
 8001162:	2003      	movs	r0, #3
}
 8001164:	b002      	add	sp, #8
 8001166:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800116a:	b99b      	cbnz	r3, 8001194 <HAL_RCC_OscConfig+0xbc>
 800116c:	682b      	ldr	r3, [r5, #0]
 800116e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001172:	602b      	str	r3, [r5, #0]
 8001174:	682b      	ldr	r3, [r5, #0]
 8001176:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800117a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800117c:	f7ff fa8c 	bl	8000698 <HAL_GetTick>
 8001180:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001182:	682b      	ldr	r3, [r5, #0]
 8001184:	0398      	lsls	r0, r3, #14
 8001186:	d5b0      	bpl.n	80010ea <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001188:	f7ff fa86 	bl	8000698 <HAL_GetTick>
 800118c:	1b80      	subs	r0, r0, r6
 800118e:	2864      	cmp	r0, #100	; 0x64
 8001190:	d9f7      	bls.n	8001182 <HAL_RCC_OscConfig+0xaa>
 8001192:	e7e6      	b.n	8001162 <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001194:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001198:	682b      	ldr	r3, [r5, #0]
 800119a:	d103      	bne.n	80011a4 <HAL_RCC_OscConfig+0xcc>
 800119c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011a0:	602b      	str	r3, [r5, #0]
 80011a2:	e7ce      	b.n	8001142 <HAL_RCC_OscConfig+0x6a>
 80011a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011a8:	602b      	str	r3, [r5, #0]
 80011aa:	682b      	ldr	r3, [r5, #0]
 80011ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011b0:	e7ca      	b.n	8001148 <HAL_RCC_OscConfig+0x70>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80011b2:	4b6b      	ldr	r3, [pc, #428]	; (8001360 <HAL_RCC_OscConfig+0x288>)
 80011b4:	689a      	ldr	r2, [r3, #8]
 80011b6:	f012 0f0c 	tst.w	r2, #12
 80011ba:	d007      	beq.n	80011cc <HAL_RCC_OscConfig+0xf4>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011bc:	689a      	ldr	r2, [r3, #8]
 80011be:	f002 020c 	and.w	r2, r2, #12
 80011c2:	2a08      	cmp	r2, #8
 80011c4:	d111      	bne.n	80011ea <HAL_RCC_OscConfig+0x112>
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	0259      	lsls	r1, r3, #9
 80011ca:	d40e      	bmi.n	80011ea <HAL_RCC_OscConfig+0x112>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011cc:	4b64      	ldr	r3, [pc, #400]	; (8001360 <HAL_RCC_OscConfig+0x288>)
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	0792      	lsls	r2, r2, #30
 80011d2:	d502      	bpl.n	80011da <HAL_RCC_OscConfig+0x102>
 80011d4:	68e2      	ldr	r2, [r4, #12]
 80011d6:	2a01      	cmp	r2, #1
 80011d8:	d182      	bne.n	80010e0 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	6921      	ldr	r1, [r4, #16]
 80011de:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80011e2:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80011e6:	601a      	str	r2, [r3, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011e8:	e782      	b.n	80010f0 <HAL_RCC_OscConfig+0x18>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80011ea:	68e3      	ldr	r3, [r4, #12]
 80011ec:	4d5c      	ldr	r5, [pc, #368]	; (8001360 <HAL_RCC_OscConfig+0x288>)
 80011ee:	b1bb      	cbz	r3, 8001220 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_ENABLE();
 80011f0:	682b      	ldr	r3, [r5, #0]
 80011f2:	f043 0301 	orr.w	r3, r3, #1
 80011f6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80011f8:	f7ff fa4e 	bl	8000698 <HAL_GetTick>
 80011fc:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011fe:	682b      	ldr	r3, [r5, #0]
 8001200:	079f      	lsls	r7, r3, #30
 8001202:	d507      	bpl.n	8001214 <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001204:	682b      	ldr	r3, [r5, #0]
 8001206:	6922      	ldr	r2, [r4, #16]
 8001208:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800120c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001210:	602b      	str	r3, [r5, #0]
 8001212:	e76d      	b.n	80010f0 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001214:	f7ff fa40 	bl	8000698 <HAL_GetTick>
 8001218:	1b80      	subs	r0, r0, r6
 800121a:	2802      	cmp	r0, #2
 800121c:	d9ef      	bls.n	80011fe <HAL_RCC_OscConfig+0x126>
 800121e:	e7a0      	b.n	8001162 <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_HSI_DISABLE();
 8001220:	682b      	ldr	r3, [r5, #0]
 8001222:	f023 0301 	bic.w	r3, r3, #1
 8001226:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001228:	f7ff fa36 	bl	8000698 <HAL_GetTick>
 800122c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800122e:	682b      	ldr	r3, [r5, #0]
 8001230:	0798      	lsls	r0, r3, #30
 8001232:	f57f af5d 	bpl.w	80010f0 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001236:	f7ff fa2f 	bl	8000698 <HAL_GetTick>
 800123a:	1b80      	subs	r0, r0, r6
 800123c:	2802      	cmp	r0, #2
 800123e:	d9f6      	bls.n	800122e <HAL_RCC_OscConfig+0x156>
 8001240:	e78f      	b.n	8001162 <HAL_RCC_OscConfig+0x8a>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001242:	6963      	ldr	r3, [r4, #20]
 8001244:	4d46      	ldr	r5, [pc, #280]	; (8001360 <HAL_RCC_OscConfig+0x288>)
 8001246:	b183      	cbz	r3, 800126a <HAL_RCC_OscConfig+0x192>
      __HAL_RCC_LSI_ENABLE();
 8001248:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800124a:	f043 0301 	orr.w	r3, r3, #1
 800124e:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8001250:	f7ff fa22 	bl	8000698 <HAL_GetTick>
 8001254:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001256:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001258:	079b      	lsls	r3, r3, #30
 800125a:	f53f af4d 	bmi.w	80010f8 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800125e:	f7ff fa1b 	bl	8000698 <HAL_GetTick>
 8001262:	1b80      	subs	r0, r0, r6
 8001264:	2802      	cmp	r0, #2
 8001266:	d9f6      	bls.n	8001256 <HAL_RCC_OscConfig+0x17e>
 8001268:	e77b      	b.n	8001162 <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_LSI_DISABLE();
 800126a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800126c:	f023 0301 	bic.w	r3, r3, #1
 8001270:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8001272:	f7ff fa11 	bl	8000698 <HAL_GetTick>
 8001276:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001278:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800127a:	079f      	lsls	r7, r3, #30
 800127c:	f57f af3c 	bpl.w	80010f8 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001280:	f7ff fa0a 	bl	8000698 <HAL_GetTick>
 8001284:	1b80      	subs	r0, r0, r6
 8001286:	2802      	cmp	r0, #2
 8001288:	d9f6      	bls.n	8001278 <HAL_RCC_OscConfig+0x1a0>
 800128a:	e76a      	b.n	8001162 <HAL_RCC_OscConfig+0x8a>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800128c:	4b34      	ldr	r3, [pc, #208]	; (8001360 <HAL_RCC_OscConfig+0x288>)
 800128e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001290:	00d0      	lsls	r0, r2, #3
 8001292:	d427      	bmi.n	80012e4 <HAL_RCC_OscConfig+0x20c>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001294:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 8001296:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001298:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800129c:	641a      	str	r2, [r3, #64]	; 0x40
 800129e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012a4:	9301      	str	r3, [sp, #4]
 80012a6:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012a8:	4d2e      	ldr	r5, [pc, #184]	; (8001364 <HAL_RCC_OscConfig+0x28c>)
 80012aa:	682b      	ldr	r3, [r5, #0]
 80012ac:	05d9      	lsls	r1, r3, #23
 80012ae:	d51b      	bpl.n	80012e8 <HAL_RCC_OscConfig+0x210>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012b0:	68a3      	ldr	r3, [r4, #8]
 80012b2:	4d2b      	ldr	r5, [pc, #172]	; (8001360 <HAL_RCC_OscConfig+0x288>)
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d127      	bne.n	8001308 <HAL_RCC_OscConfig+0x230>
 80012b8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80012ba:	f043 0301 	orr.w	r3, r3, #1
 80012be:	672b      	str	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012c0:	f241 3588 	movw	r5, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80012c4:	f7ff f9e8 	bl	8000698 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012c8:	4f25      	ldr	r7, [pc, #148]	; (8001360 <HAL_RCC_OscConfig+0x288>)
      tickstart = HAL_GetTick();
 80012ca:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80012ce:	079b      	lsls	r3, r3, #30
 80012d0:	d53f      	bpl.n	8001352 <HAL_RCC_OscConfig+0x27a>
    if (pwrclkchanged == SET)
 80012d2:	2e00      	cmp	r6, #0
 80012d4:	f43f af14 	beq.w	8001100 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 80012d8:	4a21      	ldr	r2, [pc, #132]	; (8001360 <HAL_RCC_OscConfig+0x288>)
 80012da:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80012dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012e0:	6413      	str	r3, [r2, #64]	; 0x40
 80012e2:	e70d      	b.n	8001100 <HAL_RCC_OscConfig+0x28>
  FlagStatus pwrclkchanged = RESET;
 80012e4:	2600      	movs	r6, #0
 80012e6:	e7df      	b.n	80012a8 <HAL_RCC_OscConfig+0x1d0>
      PWR->CR1 |= PWR_CR1_DBP;
 80012e8:	682b      	ldr	r3, [r5, #0]
 80012ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012ee:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80012f0:	f7ff f9d2 	bl	8000698 <HAL_GetTick>
 80012f4:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012f6:	682b      	ldr	r3, [r5, #0]
 80012f8:	05da      	lsls	r2, r3, #23
 80012fa:	d4d9      	bmi.n	80012b0 <HAL_RCC_OscConfig+0x1d8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012fc:	f7ff f9cc 	bl	8000698 <HAL_GetTick>
 8001300:	1bc0      	subs	r0, r0, r7
 8001302:	2864      	cmp	r0, #100	; 0x64
 8001304:	d9f7      	bls.n	80012f6 <HAL_RCC_OscConfig+0x21e>
 8001306:	e72c      	b.n	8001162 <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001308:	b9ab      	cbnz	r3, 8001336 <HAL_RCC_OscConfig+0x25e>
 800130a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800130c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001310:	f023 0301 	bic.w	r3, r3, #1
 8001314:	672b      	str	r3, [r5, #112]	; 0x70
 8001316:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001318:	f023 0304 	bic.w	r3, r3, #4
 800131c:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800131e:	f7ff f9bb 	bl	8000698 <HAL_GetTick>
 8001322:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001324:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001326:	0798      	lsls	r0, r3, #30
 8001328:	d5d3      	bpl.n	80012d2 <HAL_RCC_OscConfig+0x1fa>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800132a:	f7ff f9b5 	bl	8000698 <HAL_GetTick>
 800132e:	1bc0      	subs	r0, r0, r7
 8001330:	4540      	cmp	r0, r8
 8001332:	d9f7      	bls.n	8001324 <HAL_RCC_OscConfig+0x24c>
 8001334:	e715      	b.n	8001162 <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001336:	2b05      	cmp	r3, #5
 8001338:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800133a:	d103      	bne.n	8001344 <HAL_RCC_OscConfig+0x26c>
 800133c:	f043 0304 	orr.w	r3, r3, #4
 8001340:	672b      	str	r3, [r5, #112]	; 0x70
 8001342:	e7b9      	b.n	80012b8 <HAL_RCC_OscConfig+0x1e0>
 8001344:	f023 0301 	bic.w	r3, r3, #1
 8001348:	672b      	str	r3, [r5, #112]	; 0x70
 800134a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800134c:	f023 0304 	bic.w	r3, r3, #4
 8001350:	e7b5      	b.n	80012be <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001352:	f7ff f9a1 	bl	8000698 <HAL_GetTick>
 8001356:	eba0 0008 	sub.w	r0, r0, r8
 800135a:	42a8      	cmp	r0, r5
 800135c:	d9b6      	bls.n	80012cc <HAL_RCC_OscConfig+0x1f4>
 800135e:	e700      	b.n	8001162 <HAL_RCC_OscConfig+0x8a>
 8001360:	40023800 	.word	0x40023800
 8001364:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001368:	4d3c      	ldr	r5, [pc, #240]	; (800145c <HAL_RCC_OscConfig+0x384>)
 800136a:	68ab      	ldr	r3, [r5, #8]
 800136c:	f003 030c 	and.w	r3, r3, #12
 8001370:	2b08      	cmp	r3, #8
 8001372:	d042      	beq.n	80013fa <HAL_RCC_OscConfig+0x322>
        __HAL_RCC_PLL_DISABLE();
 8001374:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001376:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8001378:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800137c:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800137e:	d12f      	bne.n	80013e0 <HAL_RCC_OscConfig+0x308>
        tickstart = HAL_GetTick();
 8001380:	f7ff f98a 	bl	8000698 <HAL_GetTick>
 8001384:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001386:	682b      	ldr	r3, [r5, #0]
 8001388:	0199      	lsls	r1, r3, #6
 800138a:	d423      	bmi.n	80013d4 <HAL_RCC_OscConfig+0x2fc>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800138c:	6a22      	ldr	r2, [r4, #32]
 800138e:	69e3      	ldr	r3, [r4, #28]
 8001390:	4313      	orrs	r3, r2
 8001392:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001394:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001398:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800139a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800139e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80013a0:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80013a4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013a6:	4c2d      	ldr	r4, [pc, #180]	; (800145c <HAL_RCC_OscConfig+0x384>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013a8:	0852      	lsrs	r2, r2, #1
 80013aa:	3a01      	subs	r2, #1
 80013ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80013b0:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80013b2:	682b      	ldr	r3, [r5, #0]
 80013b4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013b8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80013ba:	f7ff f96d 	bl	8000698 <HAL_GetTick>
 80013be:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013c0:	6823      	ldr	r3, [r4, #0]
 80013c2:	019a      	lsls	r2, r3, #6
 80013c4:	f53f aea0 	bmi.w	8001108 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013c8:	f7ff f966 	bl	8000698 <HAL_GetTick>
 80013cc:	1b40      	subs	r0, r0, r5
 80013ce:	2802      	cmp	r0, #2
 80013d0:	d9f6      	bls.n	80013c0 <HAL_RCC_OscConfig+0x2e8>
 80013d2:	e6c6      	b.n	8001162 <HAL_RCC_OscConfig+0x8a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013d4:	f7ff f960 	bl	8000698 <HAL_GetTick>
 80013d8:	1b80      	subs	r0, r0, r6
 80013da:	2802      	cmp	r0, #2
 80013dc:	d9d3      	bls.n	8001386 <HAL_RCC_OscConfig+0x2ae>
 80013de:	e6c0      	b.n	8001162 <HAL_RCC_OscConfig+0x8a>
        tickstart = HAL_GetTick();
 80013e0:	f7ff f95a 	bl	8000698 <HAL_GetTick>
 80013e4:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013e6:	682b      	ldr	r3, [r5, #0]
 80013e8:	019b      	lsls	r3, r3, #6
 80013ea:	f57f ae8d 	bpl.w	8001108 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013ee:	f7ff f953 	bl	8000698 <HAL_GetTick>
 80013f2:	1b00      	subs	r0, r0, r4
 80013f4:	2802      	cmp	r0, #2
 80013f6:	d9f6      	bls.n	80013e6 <HAL_RCC_OscConfig+0x30e>
 80013f8:	e6b3      	b.n	8001162 <HAL_RCC_OscConfig+0x8a>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80013fa:	2801      	cmp	r0, #1
      pll_config = RCC->PLLCFGR;
 80013fc:	686b      	ldr	r3, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80013fe:	f43f aeb1 	beq.w	8001164 <HAL_RCC_OscConfig+0x8c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001402:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001406:	69e1      	ldr	r1, [r4, #28]
 8001408:	428a      	cmp	r2, r1
 800140a:	f47f ae69 	bne.w	80010e0 <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800140e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001412:	6a21      	ldr	r1, [r4, #32]
 8001414:	428a      	cmp	r2, r1
 8001416:	f47f ae63 	bne.w	80010e0 <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800141a:	f647 72c0 	movw	r2, #32704	; 0x7fc0
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800141e:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001420:	401a      	ands	r2, r3
 8001422:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8001426:	f47f ae5b 	bne.w	80010e0 <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800142a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800142c:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8001430:	0852      	lsrs	r2, r2, #1
 8001432:	3a01      	subs	r2, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001434:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8001438:	f47f ae52 	bne.w	80010e0 <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800143c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001440:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001442:	ebb2 6f01 	cmp.w	r2, r1, lsl #24
 8001446:	f47f ae4b 	bne.w	80010e0 <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800144a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800144c:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001450:	ebb3 7f02 	cmp.w	r3, r2, lsl #28
    return HAL_ERROR;
 8001454:	bf14      	ite	ne
 8001456:	2001      	movne	r0, #1
 8001458:	2000      	moveq	r0, #0
 800145a:	e683      	b.n	8001164 <HAL_RCC_OscConfig+0x8c>
 800145c:	40023800 	.word	0x40023800

08001460 <HAL_RCC_MCOConfig>:
  *            @arg RCC_MCODIV_4: division by 4 applied to MCOx clock
  *            @arg RCC_MCODIV_5: division by 5 applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8001460:	b570      	push	{r4, r5, r6, lr}
 8001462:	4c20      	ldr	r4, [pc, #128]	; (80014e4 <HAL_RCC_MCOConfig+0x84>)
 8001464:	b088      	sub	sp, #32
 8001466:	460d      	mov	r5, r1
 8001468:	4616      	mov	r6, r2
  if (RCC_MCOx == RCC_MCO1)
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800146a:	6b23      	ldr	r3, [r4, #48]	; 0x30
  if (RCC_MCOx == RCC_MCO1)
 800146c:	b9e0      	cbnz	r0, 80014a8 <HAL_RCC_MCOConfig+0x48>
    MCO1_CLK_ENABLE();
 800146e:	f043 0301 	orr.w	r3, r3, #1
    GPIO_InitStruct.Pin = MCO1_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8001472:	a903      	add	r1, sp, #12
    MCO1_CLK_ENABLE();
 8001474:	6323      	str	r3, [r4, #48]	; 0x30
 8001476:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001478:	9005      	str	r0, [sp, #20]
    MCO1_CLK_ENABLE();
 800147a:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800147e:	9007      	str	r0, [sp, #28]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8001480:	4819      	ldr	r0, [pc, #100]	; (80014e8 <HAL_RCC_MCOConfig+0x88>)
    MCO1_CLK_ENABLE();
 8001482:	9301      	str	r3, [sp, #4]
 8001484:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = MCO1_PIN;
 8001486:	f44f 7380 	mov.w	r3, #256	; 0x100
 800148a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148c:	2302      	movs	r3, #2
 800148e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8001490:	2303      	movs	r3, #3
 8001492:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8001494:	f7ff fd28 	bl	8000ee8 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8001498:	68a1      	ldr	r1, [r4, #8]
 800149a:	f021 61ec 	bic.w	r1, r1, #123731968	; 0x7600000
 800149e:	4331      	orrs	r1, r6
 80014a0:	4329      	orrs	r1, r5
 80014a2:	60a1      	str	r1, [r4, #8]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[2:0] bits then Select MCO2 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3)));
  }
}
 80014a4:	b008      	add	sp, #32
 80014a6:	bd70      	pop	{r4, r5, r6, pc}
    MCO2_CLK_ENABLE();
 80014a8:	f043 0304 	orr.w	r3, r3, #4
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80014ac:	a903      	add	r1, sp, #12
 80014ae:	480f      	ldr	r0, [pc, #60]	; (80014ec <HAL_RCC_MCOConfig+0x8c>)
    MCO2_CLK_ENABLE();
 80014b0:	6323      	str	r3, [r4, #48]	; 0x30
 80014b2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80014b4:	f003 0304 	and.w	r3, r3, #4
 80014b8:	9302      	str	r3, [sp, #8]
 80014ba:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = MCO2_PIN;
 80014bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014c0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c2:	2302      	movs	r3, #2
 80014c4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80014c6:	2303      	movs	r3, #3
 80014c8:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ca:	2300      	movs	r3, #0
 80014cc:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80014ce:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80014d0:	f7ff fd0a 	bl	8000ee8 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3)));
 80014d4:	68a3      	ldr	r3, [r4, #8]
 80014d6:	ea45 01c6 	orr.w	r1, r5, r6, lsl #3
 80014da:	f023 4578 	bic.w	r5, r3, #4160749568	; 0xf8000000
 80014de:	430d      	orrs	r5, r1
 80014e0:	60a5      	str	r5, [r4, #8]
}
 80014e2:	e7df      	b.n	80014a4 <HAL_RCC_MCOConfig+0x44>
 80014e4:	40023800 	.word	0x40023800
 80014e8:	40020000 	.word	0x40020000
 80014ec:	40020800 	.word	0x40020800

080014f0 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80014f0:	4913      	ldr	r1, [pc, #76]	; (8001540 <HAL_RCC_GetSysClockFreq+0x50>)
{
 80014f2:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80014f4:	688b      	ldr	r3, [r1, #8]
 80014f6:	f003 030c 	and.w	r3, r3, #12
 80014fa:	2b04      	cmp	r3, #4
 80014fc:	d003      	beq.n	8001506 <HAL_RCC_GetSysClockFreq+0x16>
 80014fe:	2b08      	cmp	r3, #8
 8001500:	d003      	beq.n	800150a <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001502:	4810      	ldr	r0, [pc, #64]	; (8001544 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001504:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8001506:	4810      	ldr	r0, [pc, #64]	; (8001548 <HAL_RCC_GetSysClockFreq+0x58>)
 8001508:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800150a:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800150c:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800150e:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001510:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001514:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001518:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800151c:	bf1a      	itte	ne
 800151e:	480a      	ldrne	r0, [pc, #40]	; (8001548 <HAL_RCC_GetSysClockFreq+0x58>)
 8001520:	2300      	movne	r3, #0
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001522:	4808      	ldreq	r0, [pc, #32]	; (8001544 <HAL_RCC_GetSysClockFreq+0x54>)
 8001524:	fba1 0100 	umull	r0, r1, r1, r0
 8001528:	f7fe fef2 	bl	8000310 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800152c:	4b04      	ldr	r3, [pc, #16]	; (8001540 <HAL_RCC_GetSysClockFreq+0x50>)
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001534:	3301      	adds	r3, #1
 8001536:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco / pllp;
 8001538:	fbb0 f0f3 	udiv	r0, r0, r3
 800153c:	bd08      	pop	{r3, pc}
 800153e:	bf00      	nop
 8001540:	40023800 	.word	0x40023800
 8001544:	00f42400 	.word	0x00f42400
 8001548:	007a1200 	.word	0x007a1200

0800154c <HAL_RCC_ClockConfig>:
{
 800154c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001550:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8001552:	4604      	mov	r4, r0
 8001554:	b910      	cbnz	r0, 800155c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001556:	2001      	movs	r0, #1
 8001558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800155c:	4a46      	ldr	r2, [pc, #280]	; (8001678 <HAL_RCC_ClockConfig+0x12c>)
 800155e:	6813      	ldr	r3, [r2, #0]
 8001560:	f003 030f 	and.w	r3, r3, #15
 8001564:	428b      	cmp	r3, r1
 8001566:	d329      	bcc.n	80015bc <HAL_RCC_ClockConfig+0x70>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001568:	6821      	ldr	r1, [r4, #0]
 800156a:	078f      	lsls	r7, r1, #30
 800156c:	d431      	bmi.n	80015d2 <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800156e:	07c8      	lsls	r0, r1, #31
 8001570:	d444      	bmi.n	80015fc <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001572:	4a41      	ldr	r2, [pc, #260]	; (8001678 <HAL_RCC_ClockConfig+0x12c>)
 8001574:	6813      	ldr	r3, [r2, #0]
 8001576:	f003 030f 	and.w	r3, r3, #15
 800157a:	429d      	cmp	r5, r3
 800157c:	d368      	bcc.n	8001650 <HAL_RCC_ClockConfig+0x104>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800157e:	6822      	ldr	r2, [r4, #0]
 8001580:	0751      	lsls	r1, r2, #29
 8001582:	d471      	bmi.n	8001668 <HAL_RCC_ClockConfig+0x11c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001584:	0713      	lsls	r3, r2, #28
 8001586:	d507      	bpl.n	8001598 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001588:	4a3c      	ldr	r2, [pc, #240]	; (800167c <HAL_RCC_ClockConfig+0x130>)
 800158a:	6921      	ldr	r1, [r4, #16]
 800158c:	6893      	ldr	r3, [r2, #8]
 800158e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001592:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001596:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001598:	f7ff ffaa 	bl	80014f0 <HAL_RCC_GetSysClockFreq>
 800159c:	4b37      	ldr	r3, [pc, #220]	; (800167c <HAL_RCC_ClockConfig+0x130>)
 800159e:	4a38      	ldr	r2, [pc, #224]	; (8001680 <HAL_RCC_ClockConfig+0x134>)
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80015a6:	5cd3      	ldrb	r3, [r2, r3]
 80015a8:	40d8      	lsrs	r0, r3
 80015aa:	4b36      	ldr	r3, [pc, #216]	; (8001684 <HAL_RCC_ClockConfig+0x138>)
 80015ac:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80015ae:	4b36      	ldr	r3, [pc, #216]	; (8001688 <HAL_RCC_ClockConfig+0x13c>)
 80015b0:	6818      	ldr	r0, [r3, #0]
 80015b2:	f7ff f835 	bl	8000620 <HAL_InitTick>
  return HAL_OK;
 80015b6:	2000      	movs	r0, #0
 80015b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015bc:	6813      	ldr	r3, [r2, #0]
 80015be:	f023 030f 	bic.w	r3, r3, #15
 80015c2:	430b      	orrs	r3, r1
 80015c4:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015c6:	6813      	ldr	r3, [r2, #0]
 80015c8:	f003 030f 	and.w	r3, r3, #15
 80015cc:	4299      	cmp	r1, r3
 80015ce:	d1c2      	bne.n	8001556 <HAL_RCC_ClockConfig+0xa>
 80015d0:	e7ca      	b.n	8001568 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015d2:	f011 0f04 	tst.w	r1, #4
 80015d6:	4b29      	ldr	r3, [pc, #164]	; (800167c <HAL_RCC_ClockConfig+0x130>)
 80015d8:	d003      	beq.n	80015e2 <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015da:	689a      	ldr	r2, [r3, #8]
 80015dc:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 80015e0:	609a      	str	r2, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015e2:	070e      	lsls	r6, r1, #28
 80015e4:	d503      	bpl.n	80015ee <HAL_RCC_ClockConfig+0xa2>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015e6:	689a      	ldr	r2, [r3, #8]
 80015e8:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 80015ec:	609a      	str	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015ee:	689a      	ldr	r2, [r3, #8]
 80015f0:	68a0      	ldr	r0, [r4, #8]
 80015f2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80015f6:	4302      	orrs	r2, r0
 80015f8:	609a      	str	r2, [r3, #8]
 80015fa:	e7b8      	b.n	800156e <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015fc:	6861      	ldr	r1, [r4, #4]
 80015fe:	4b1f      	ldr	r3, [pc, #124]	; (800167c <HAL_RCC_ClockConfig+0x130>)
 8001600:	2901      	cmp	r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001602:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001604:	d11c      	bne.n	8001640 <HAL_RCC_ClockConfig+0xf4>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001606:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800160a:	d0a4      	beq.n	8001556 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800160c:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800160e:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001612:	4e1a      	ldr	r6, [pc, #104]	; (800167c <HAL_RCC_ClockConfig+0x130>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001614:	f022 0203 	bic.w	r2, r2, #3
 8001618:	430a      	orrs	r2, r1
 800161a:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800161c:	f7ff f83c 	bl	8000698 <HAL_GetTick>
 8001620:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001622:	68b3      	ldr	r3, [r6, #8]
 8001624:	6862      	ldr	r2, [r4, #4]
 8001626:	f003 030c 	and.w	r3, r3, #12
 800162a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800162e:	d0a0      	beq.n	8001572 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001630:	f7ff f832 	bl	8000698 <HAL_GetTick>
 8001634:	1bc0      	subs	r0, r0, r7
 8001636:	4540      	cmp	r0, r8
 8001638:	d9f3      	bls.n	8001622 <HAL_RCC_ClockConfig+0xd6>
        return HAL_TIMEOUT;
 800163a:	2003      	movs	r0, #3
}
 800163c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001640:	2902      	cmp	r1, #2
 8001642:	d102      	bne.n	800164a <HAL_RCC_ClockConfig+0xfe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001644:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001648:	e7df      	b.n	800160a <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800164a:	f012 0f02 	tst.w	r2, #2
 800164e:	e7dc      	b.n	800160a <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001650:	6813      	ldr	r3, [r2, #0]
 8001652:	f023 030f 	bic.w	r3, r3, #15
 8001656:	432b      	orrs	r3, r5
 8001658:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800165a:	6813      	ldr	r3, [r2, #0]
 800165c:	f003 030f 	and.w	r3, r3, #15
 8001660:	429d      	cmp	r5, r3
 8001662:	f47f af78 	bne.w	8001556 <HAL_RCC_ClockConfig+0xa>
 8001666:	e78a      	b.n	800157e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001668:	4904      	ldr	r1, [pc, #16]	; (800167c <HAL_RCC_ClockConfig+0x130>)
 800166a:	68e0      	ldr	r0, [r4, #12]
 800166c:	688b      	ldr	r3, [r1, #8]
 800166e:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001672:	4303      	orrs	r3, r0
 8001674:	608b      	str	r3, [r1, #8]
 8001676:	e785      	b.n	8001584 <HAL_RCC_ClockConfig+0x38>
 8001678:	40023c00 	.word	0x40023c00
 800167c:	40023800 	.word	0x40023800
 8001680:	0800cf99 	.word	0x0800cf99
 8001684:	20000010 	.word	0x20000010
 8001688:	20000004 	.word	0x20000004

0800168c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 800168c:	4b01      	ldr	r3, [pc, #4]	; (8001694 <HAL_RCC_GetHCLKFreq+0x8>)
 800168e:	6818      	ldr	r0, [r3, #0]
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	20000010 	.word	0x20000010

08001698 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001698:	4b04      	ldr	r3, [pc, #16]	; (80016ac <HAL_RCC_GetPCLK1Freq+0x14>)
 800169a:	4a05      	ldr	r2, [pc, #20]	; (80016b0 <HAL_RCC_GetPCLK1Freq+0x18>)
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80016a2:	5cd3      	ldrb	r3, [r2, r3]
 80016a4:	4a03      	ldr	r2, [pc, #12]	; (80016b4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80016a6:	6810      	ldr	r0, [r2, #0]
}
 80016a8:	40d8      	lsrs	r0, r3
 80016aa:	4770      	bx	lr
 80016ac:	40023800 	.word	0x40023800
 80016b0:	0800cfa9 	.word	0x0800cfa9
 80016b4:	20000010 	.word	0x20000010

080016b8 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80016b8:	4b04      	ldr	r3, [pc, #16]	; (80016cc <HAL_RCC_GetPCLK2Freq+0x14>)
 80016ba:	4a05      	ldr	r2, [pc, #20]	; (80016d0 <HAL_RCC_GetPCLK2Freq+0x18>)
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80016c2:	5cd3      	ldrb	r3, [r2, r3]
 80016c4:	4a03      	ldr	r2, [pc, #12]	; (80016d4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80016c6:	6810      	ldr	r0, [r2, #0]
}
 80016c8:	40d8      	lsrs	r0, r3
 80016ca:	4770      	bx	lr
 80016cc:	40023800 	.word	0x40023800
 80016d0:	0800cfa9 	.word	0x0800cfa9
 80016d4:	20000010 	.word	0x20000010

080016d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80016d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80016dc:	6802      	ldr	r2, [r0, #0]
{
 80016de:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80016e0:	f012 0601 	ands.w	r6, r2, #1
 80016e4:	d00b      	beq.n	80016fe <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80016e6:	4bba      	ldr	r3, [pc, #744]	; (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80016e8:	6899      	ldr	r1, [r3, #8]
 80016ea:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 80016ee:	6099      	str	r1, [r3, #8]
 80016f0:	6b46      	ldr	r6, [r0, #52]	; 0x34
 80016f2:	6899      	ldr	r1, [r3, #8]
 80016f4:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80016f6:	fab6 f686 	clz	r6, r6
 80016fa:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80016fc:	6099      	str	r1, [r3, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80016fe:	f412 2500 	ands.w	r5, r2, #524288	; 0x80000
 8001702:	d012      	beq.n	800172a <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001704:	49b2      	ldr	r1, [pc, #712]	; (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001706:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8001708:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800170c:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001710:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
    {
      plli2sused = 1;
 8001714:	bf08      	it	eq
 8001716:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001718:	ea43 0305 	orr.w	r3, r3, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800171c:	bf16      	itet	ne
 800171e:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 8001722:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001724:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001726:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800172a:	02d7      	lsls	r7, r2, #11
 800172c:	d510      	bpl.n	8001750 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800172e:	48a8      	ldr	r0, [pc, #672]	; (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001730:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001732:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001736:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800173a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800173e:	ea43 0301 	orr.w	r3, r3, r1
 8001742:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001746:	f000 81a9 	beq.w	8001a9c <HAL_RCCEx_PeriphCLKConfig+0x3c4>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 800174a:	2900      	cmp	r1, #0
 800174c:	bf08      	it	eq
 800174e:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 8001750:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
 8001754:	bf18      	it	ne
 8001756:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001758:	0690      	lsls	r0, r2, #26
 800175a:	d531      	bpl.n	80017c0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800175c:	4b9c      	ldr	r3, [pc, #624]	; (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800175e:	4f9d      	ldr	r7, [pc, #628]	; (80019d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8001760:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001762:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001766:	641a      	str	r2, [r3, #64]	; 0x40
 8001768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800176e:	9301      	str	r3, [sp, #4]
 8001770:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001778:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800177a:	f7fe ff8d 	bl	8000698 <HAL_GetTick>
 800177e:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	05d9      	lsls	r1, r3, #23
 8001784:	f140 818c 	bpl.w	8001aa0 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001788:	4f91      	ldr	r7, [pc, #580]	; (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800178a:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800178c:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001790:	f040 8191 	bne.w	8001ab6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001794:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001796:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800179a:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800179e:	4a8c      	ldr	r2, [pc, #560]	; (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80017a0:	f040 81af 	bne.w	8001b02 <HAL_RCCEx_PeriphCLKConfig+0x42a>
 80017a4:	6891      	ldr	r1, [r2, #8]
 80017a6:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 80017aa:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80017ae:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 80017b2:	4301      	orrs	r1, r0
 80017b4:	6091      	str	r1, [r2, #8]
 80017b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017ba:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80017bc:	430b      	orrs	r3, r1
 80017be:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80017c0:	6823      	ldr	r3, [r4, #0]
 80017c2:	06df      	lsls	r7, r3, #27
 80017c4:	d50c      	bpl.n	80017e0 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80017c6:	4a82      	ldr	r2, [pc, #520]	; (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80017c8:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 80017cc:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 80017d0:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 80017d4:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 80017d8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80017da:	4301      	orrs	r1, r0
 80017dc:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80017e0:	0458      	lsls	r0, r3, #17
 80017e2:	d508      	bpl.n	80017f6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80017e4:	497a      	ldr	r1, [pc, #488]	; (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80017e6:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80017e8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80017ec:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80017f0:	4302      	orrs	r2, r0
 80017f2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80017f6:	0419      	lsls	r1, r3, #16
 80017f8:	d508      	bpl.n	800180c <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80017fa:	4975      	ldr	r1, [pc, #468]	; (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80017fc:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 80017fe:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001802:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8001806:	4302      	orrs	r2, r0
 8001808:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800180c:	03da      	lsls	r2, r3, #15
 800180e:	d508      	bpl.n	8001822 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001810:	496f      	ldr	r1, [pc, #444]	; (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001812:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8001814:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001818:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800181c:	4302      	orrs	r2, r0
 800181e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001822:	039f      	lsls	r7, r3, #14
 8001824:	d508      	bpl.n	8001838 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001826:	496a      	ldr	r1, [pc, #424]	; (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001828:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800182a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800182e:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8001832:	4302      	orrs	r2, r0
 8001834:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001838:	0658      	lsls	r0, r3, #25
 800183a:	d508      	bpl.n	800184e <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800183c:	4964      	ldr	r1, [pc, #400]	; (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800183e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8001840:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001844:	f022 0203 	bic.w	r2, r2, #3
 8001848:	4302      	orrs	r2, r0
 800184a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800184e:	0619      	lsls	r1, r3, #24
 8001850:	d508      	bpl.n	8001864 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001852:	495f      	ldr	r1, [pc, #380]	; (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001854:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8001856:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800185a:	f022 020c 	bic.w	r2, r2, #12
 800185e:	4302      	orrs	r2, r0
 8001860:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001864:	05da      	lsls	r2, r3, #23
 8001866:	d508      	bpl.n	800187a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001868:	4959      	ldr	r1, [pc, #356]	; (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800186a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800186c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001870:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8001874:	4302      	orrs	r2, r0
 8001876:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800187a:	059f      	lsls	r7, r3, #22
 800187c:	d508      	bpl.n	8001890 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800187e:	4954      	ldr	r1, [pc, #336]	; (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001880:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8001882:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001886:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800188a:	4302      	orrs	r2, r0
 800188c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001890:	0558      	lsls	r0, r3, #21
 8001892:	d508      	bpl.n	80018a6 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001894:	494e      	ldr	r1, [pc, #312]	; (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001896:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001898:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800189c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80018a0:	4302      	orrs	r2, r0
 80018a2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80018a6:	0519      	lsls	r1, r3, #20
 80018a8:	d508      	bpl.n	80018bc <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80018aa:	4949      	ldr	r1, [pc, #292]	; (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80018ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80018ae:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80018b2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80018b6:	4302      	orrs	r2, r0
 80018b8:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80018bc:	04da      	lsls	r2, r3, #19
 80018be:	d508      	bpl.n	80018d2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80018c0:	4943      	ldr	r1, [pc, #268]	; (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80018c2:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80018c4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80018c8:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80018cc:	4302      	orrs	r2, r0
 80018ce:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80018d2:	049f      	lsls	r7, r3, #18
 80018d4:	d508      	bpl.n	80018e8 <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80018d6:	493e      	ldr	r1, [pc, #248]	; (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80018d8:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80018da:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80018de:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80018e2:	4302      	orrs	r2, r0
 80018e4:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80018e8:	0258      	lsls	r0, r3, #9
 80018ea:	d508      	bpl.n	80018fe <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80018ec:	4938      	ldr	r1, [pc, #224]	; (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80018ee:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 80018f0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80018f4:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 80018f8:	4302      	orrs	r2, r0
 80018fa:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80018fe:	0299      	lsls	r1, r3, #10
 8001900:	d50c      	bpl.n	800191c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001902:	4833      	ldr	r0, [pc, #204]	; (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001904:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8001906:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 800190a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800190e:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 8001912:	bf08      	it	eq
 8001914:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001916:	430a      	orrs	r2, r1
 8001918:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 800191c:	f013 0f08 	tst.w	r3, #8
 8001920:	bf18      	it	ne
 8001922:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001924:	035a      	lsls	r2, r3, #13
 8001926:	d508      	bpl.n	800193a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001928:	4929      	ldr	r1, [pc, #164]	; (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800192a:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800192c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001930:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001934:	4302      	orrs	r2, r0
 8001936:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800193a:	021f      	lsls	r7, r3, #8
 800193c:	d509      	bpl.n	8001952 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800193e:	4924      	ldr	r1, [pc, #144]	; (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001940:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8001944:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001948:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800194c:	4302      	orrs	r2, r0
 800194e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8001952:	0158      	lsls	r0, r3, #5
 8001954:	d509      	bpl.n	800196a <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8001956:	491e      	ldr	r1, [pc, #120]	; (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001958:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 800195c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001960:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8001964:	4302      	orrs	r2, r0
 8001966:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800196a:	0119      	lsls	r1, r3, #4
 800196c:	d509      	bpl.n	8001982 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800196e:	4918      	ldr	r1, [pc, #96]	; (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001970:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8001974:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8001978:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 800197c:	4302      	orrs	r2, r0
 800197e:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8001982:	00da      	lsls	r2, r3, #3
 8001984:	d509      	bpl.n	800199a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8001986:	4912      	ldr	r1, [pc, #72]	; (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001988:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 800198c:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8001990:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8001994:	4302      	orrs	r2, r0
 8001996:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800199a:	2e01      	cmp	r6, #1
 800199c:	f000 80b5 	beq.w	8001b0a <HAL_RCCEx_PeriphCLKConfig+0x432>
 80019a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80019a4:	f000 80b1 	beq.w	8001b0a <HAL_RCCEx_PeriphCLKConfig+0x432>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80019a8:	2d01      	cmp	r5, #1
 80019aa:	d175      	bne.n	8001a98 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80019ac:	4d08      	ldr	r5, [pc, #32]	; (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80019ae:	682b      	ldr	r3, [r5, #0]
 80019b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019b4:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80019b6:	f7fe fe6f 	bl	8000698 <HAL_GetTick>
 80019ba:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80019bc:	682b      	ldr	r3, [r5, #0]
 80019be:	009f      	lsls	r7, r3, #2
 80019c0:	f100 8127 	bmi.w	8001c12 <HAL_RCCEx_PeriphCLKConfig+0x53a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80019c4:	6821      	ldr	r1, [r4, #0]
 80019c6:	030e      	lsls	r6, r1, #12
 80019c8:	d506      	bpl.n	80019d8 <HAL_RCCEx_PeriphCLKConfig+0x300>
 80019ca:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80019cc:	b143      	cbz	r3, 80019e0 <HAL_RCCEx_PeriphCLKConfig+0x308>
 80019ce:	e003      	b.n	80019d8 <HAL_RCCEx_PeriphCLKConfig+0x300>
 80019d0:	40023800 	.word	0x40023800
 80019d4:	40007000 	.word	0x40007000
 80019d8:	02cd      	lsls	r5, r1, #11
 80019da:	d51d      	bpl.n	8001a18 <HAL_RCCEx_PeriphCLKConfig+0x340>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80019dc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80019de:	b9db      	cbnz	r3, 8001a18 <HAL_RCCEx_PeriphCLKConfig+0x340>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80019e0:	4a93      	ldr	r2, [pc, #588]	; (8001c30 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 80019e2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80019e6:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80019ea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019ee:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 80019f2:	4303      	orrs	r3, r0
 80019f4:	6960      	ldr	r0, [r4, #20]
 80019f6:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80019fa:	69a0      	ldr	r0, [r4, #24]
 80019fc:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8001a00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001a04:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001a08:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001a0a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8001a0e:	3801      	subs	r0, #1
 8001a10:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8001a14:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8001a18:	0288      	lsls	r0, r1, #10
 8001a1a:	d515      	bpl.n	8001a48 <HAL_RCCEx_PeriphCLKConfig+0x370>
 8001a1c:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8001a1e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001a22:	d111      	bne.n	8001a48 <HAL_RCCEx_PeriphCLKConfig+0x370>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001a24:	4a82      	ldr	r2, [pc, #520]	; (8001c30 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001a26:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001a2a:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8001a2e:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8001a32:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8001a36:	4303      	orrs	r3, r0
 8001a38:	6960      	ldr	r0, [r4, #20]
 8001a3a:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001a3e:	6a20      	ldr	r0, [r4, #32]
 8001a40:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8001a44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8001a48:	070a      	lsls	r2, r1, #28
 8001a4a:	d519      	bpl.n	8001a80 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001a4c:	4978      	ldr	r1, [pc, #480]	; (8001c30 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001a4e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8001a52:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8001a56:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 8001a5a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	6962      	ldr	r2, [r4, #20]
 8001a62:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001a66:	69e2      	ldr	r2, [r4, #28]
 8001a68:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001a6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8001a70:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
 8001a74:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001a76:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001a80:	4c6b      	ldr	r4, [pc, #428]	; (8001c30 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001a82:	6823      	ldr	r3, [r4, #0]
 8001a84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a88:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a8a:	f7fe fe05 	bl	8000698 <HAL_GetTick>
 8001a8e:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001a90:	6823      	ldr	r3, [r4, #0]
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	f140 80c4 	bpl.w	8001c20 <HAL_RCCEx_PeriphCLKConfig+0x548>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001a98:	2000      	movs	r0, #0
 8001a9a:	e009      	b.n	8001ab0 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
      plli2sused = 1;
 8001a9c:	2601      	movs	r6, #1
 8001a9e:	e657      	b.n	8001750 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001aa0:	f7fe fdfa 	bl	8000698 <HAL_GetTick>
 8001aa4:	eba0 0008 	sub.w	r0, r0, r8
 8001aa8:	2864      	cmp	r0, #100	; 0x64
 8001aaa:	f67f ae69 	bls.w	8001780 <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 8001aae:	2003      	movs	r0, #3
}
 8001ab0:	b003      	add	sp, #12
 8001ab2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001ab6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001ab8:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001abc:	4293      	cmp	r3, r2
 8001abe:	f43f ae69 	beq.w	8001794 <HAL_RCCEx_PeriphCLKConfig+0xbc>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001ac2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8001ac4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001ac6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8001aca:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001ace:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001ad0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001ad2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001ad6:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8001ad8:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001ada:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001adc:	07da      	lsls	r2, r3, #31
 8001ade:	f57f ae59 	bpl.w	8001794 <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 8001ae2:	f7fe fdd9 	bl	8000698 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ae6:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001aea:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001aee:	079b      	lsls	r3, r3, #30
 8001af0:	f53f ae50 	bmi.w	8001794 <HAL_RCCEx_PeriphCLKConfig+0xbc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001af4:	f7fe fdd0 	bl	8000698 <HAL_GetTick>
 8001af8:	eba0 0008 	sub.w	r0, r0, r8
 8001afc:	4548      	cmp	r0, r9
 8001afe:	d9f5      	bls.n	8001aec <HAL_RCCEx_PeriphCLKConfig+0x414>
 8001b00:	e7d5      	b.n	8001aae <HAL_RCCEx_PeriphCLKConfig+0x3d6>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001b02:	6891      	ldr	r1, [r2, #8]
 8001b04:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8001b08:	e654      	b.n	80017b4 <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_PLLI2S_DISABLE();
 8001b0a:	4e49      	ldr	r6, [pc, #292]	; (8001c30 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001b0c:	6833      	ldr	r3, [r6, #0]
 8001b0e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001b12:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8001b14:	f7fe fdc0 	bl	8000698 <HAL_GetTick>
 8001b18:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001b1a:	6833      	ldr	r3, [r6, #0]
 8001b1c:	011b      	lsls	r3, r3, #4
 8001b1e:	d472      	bmi.n	8001c06 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8001b20:	6822      	ldr	r2, [r4, #0]
 8001b22:	07d7      	lsls	r7, r2, #31
 8001b24:	d512      	bpl.n	8001b4c <HAL_RCCEx_PeriphCLKConfig+0x474>
 8001b26:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001b28:	b983      	cbnz	r3, 8001b4c <HAL_RCCEx_PeriphCLKConfig+0x474>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001b2a:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001b2e:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8001b32:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b36:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8001b3a:	430b      	orrs	r3, r1
 8001b3c:	6861      	ldr	r1, [r4, #4]
 8001b3e:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8001b42:	68a1      	ldr	r1, [r4, #8]
 8001b44:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8001b48:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001b4c:	0316      	lsls	r6, r2, #12
 8001b4e:	d503      	bpl.n	8001b58 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8001b50:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001b52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001b56:	d005      	beq.n	8001b64 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8001b58:	02d0      	lsls	r0, r2, #11
 8001b5a:	d51e      	bpl.n	8001b9a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001b5c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001b5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b62:	d11a      	bne.n	8001b9a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001b64:	4932      	ldr	r1, [pc, #200]	; (8001c30 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001b66:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001b6a:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8001b6e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b72:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8001b76:	4303      	orrs	r3, r0
 8001b78:	6860      	ldr	r0, [r4, #4]
 8001b7a:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001b7e:	68e0      	ldr	r0, [r4, #12]
 8001b80:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8001b84:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001b88:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 8001b8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001b8e:	f020 001f 	bic.w	r0, r0, #31
 8001b92:	3b01      	subs	r3, #1
 8001b94:	4303      	orrs	r3, r0
 8001b96:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001b9a:	01d1      	lsls	r1, r2, #7
 8001b9c:	d511      	bpl.n	8001bc2 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001b9e:	4924      	ldr	r1, [pc, #144]	; (8001c30 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001ba0:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001ba4:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8001ba8:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8001bac:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8001bb0:	4303      	orrs	r3, r0
 8001bb2:	6860      	ldr	r0, [r4, #4]
 8001bb4:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001bb8:	6920      	ldr	r0, [r4, #16]
 8001bba:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8001bbe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001bc2:	0192      	lsls	r2, r2, #6
 8001bc4:	d50d      	bpl.n	8001be2 <HAL_RCCEx_PeriphCLKConfig+0x50a>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001bc6:	6923      	ldr	r3, [r4, #16]
 8001bc8:	6862      	ldr	r2, [r4, #4]
 8001bca:	041b      	lsls	r3, r3, #16
 8001bcc:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001bd0:	68e2      	ldr	r2, [r4, #12]
 8001bd2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001bd6:	68a2      	ldr	r2, [r4, #8]
 8001bd8:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001bdc:	4a14      	ldr	r2, [pc, #80]	; (8001c30 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001bde:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8001be2:	4e13      	ldr	r6, [pc, #76]	; (8001c30 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001be4:	6833      	ldr	r3, [r6, #0]
 8001be6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001bea:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8001bec:	f7fe fd54 	bl	8000698 <HAL_GetTick>
 8001bf0:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001bf2:	6833      	ldr	r3, [r6, #0]
 8001bf4:	011b      	lsls	r3, r3, #4
 8001bf6:	f53f aed7 	bmi.w	80019a8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001bfa:	f7fe fd4d 	bl	8000698 <HAL_GetTick>
 8001bfe:	1bc0      	subs	r0, r0, r7
 8001c00:	2864      	cmp	r0, #100	; 0x64
 8001c02:	d9f6      	bls.n	8001bf2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8001c04:	e753      	b.n	8001aae <HAL_RCCEx_PeriphCLKConfig+0x3d6>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001c06:	f7fe fd47 	bl	8000698 <HAL_GetTick>
 8001c0a:	1bc0      	subs	r0, r0, r7
 8001c0c:	2864      	cmp	r0, #100	; 0x64
 8001c0e:	d984      	bls.n	8001b1a <HAL_RCCEx_PeriphCLKConfig+0x442>
 8001c10:	e74d      	b.n	8001aae <HAL_RCCEx_PeriphCLKConfig+0x3d6>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001c12:	f7fe fd41 	bl	8000698 <HAL_GetTick>
 8001c16:	1b80      	subs	r0, r0, r6
 8001c18:	2864      	cmp	r0, #100	; 0x64
 8001c1a:	f67f aecf 	bls.w	80019bc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 8001c1e:	e746      	b.n	8001aae <HAL_RCCEx_PeriphCLKConfig+0x3d6>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001c20:	f7fe fd3a 	bl	8000698 <HAL_GetTick>
 8001c24:	1b40      	subs	r0, r0, r5
 8001c26:	2864      	cmp	r0, #100	; 0x64
 8001c28:	f67f af32 	bls.w	8001a90 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
 8001c2c:	e73f      	b.n	8001aae <HAL_RCCEx_PeriphCLKConfig+0x3d6>
 8001c2e:	bf00      	nop
 8001c30:	40023800 	.word	0x40023800

08001c34 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001c34:	b538      	push	{r3, r4, r5, lr}
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001c36:	69c2      	ldr	r2, [r0, #28]
{
 8001c38:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001c3a:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001c3c:	6881      	ldr	r1, [r0, #8]
 8001c3e:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001c40:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001c42:	4301      	orrs	r1, r0
 8001c44:	6960      	ldr	r0, [r4, #20]
 8001c46:	4301      	orrs	r1, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001c48:	4890      	ldr	r0, [pc, #576]	; (8001e8c <UART_SetConfig+0x258>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001c4a:	4311      	orrs	r1, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001c4c:	4028      	ands	r0, r5
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  tmpreg |= huart->Init.OneBitSampling;
 8001c4e:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001c50:	4301      	orrs	r1, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001c52:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001c54:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001c56:	6859      	ldr	r1, [r3, #4]
 8001c58:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8001c5c:	4301      	orrs	r1, r0
 8001c5e:	6059      	str	r1, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001c60:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001c62:	6898      	ldr	r0, [r3, #8]
  tmpreg |= huart->Init.OneBitSampling;
 8001c64:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001c66:	f420 6030 	bic.w	r0, r0, #2816	; 0xb00
 8001c6a:	4301      	orrs	r1, r0
 8001c6c:	6099      	str	r1, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001c6e:	4988      	ldr	r1, [pc, #544]	; (8001e90 <UART_SetConfig+0x25c>)
 8001c70:	428b      	cmp	r3, r1
 8001c72:	d117      	bne.n	8001ca4 <UART_SetConfig+0x70>
 8001c74:	4b87      	ldr	r3, [pc, #540]	; (8001e94 <UART_SetConfig+0x260>)
 8001c76:	4988      	ldr	r1, [pc, #544]	; (8001e98 <UART_SetConfig+0x264>)
 8001c78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c7c:	f003 0303 	and.w	r3, r3, #3

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001c80:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001c84:	5ccb      	ldrb	r3, [r1, r3]
 8001c86:	d129      	bne.n	8001cdc <UART_SetConfig+0xa8>
  {
    switch (clocksource)
 8001c88:	2b08      	cmp	r3, #8
 8001c8a:	f200 809d 	bhi.w	8001dc8 <UART_SetConfig+0x194>
 8001c8e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8001c92:	008c      	.short	0x008c
 8001c94:	00ee00e8 	.word	0x00ee00e8
 8001c98:	00fa009b 	.word	0x00fa009b
 8001c9c:	009b009b 	.word	0x009b009b
 8001ca0:	0076009b 	.word	0x0076009b
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001ca4:	497d      	ldr	r1, [pc, #500]	; (8001e9c <UART_SetConfig+0x268>)
 8001ca6:	428b      	cmp	r3, r1
 8001ca8:	d106      	bne.n	8001cb8 <UART_SetConfig+0x84>
 8001caa:	4b7a      	ldr	r3, [pc, #488]	; (8001e94 <UART_SetConfig+0x260>)
 8001cac:	497c      	ldr	r1, [pc, #496]	; (8001ea0 <UART_SetConfig+0x26c>)
 8001cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cb2:	f003 030c 	and.w	r3, r3, #12
 8001cb6:	e7e3      	b.n	8001c80 <UART_SetConfig+0x4c>
 8001cb8:	497a      	ldr	r1, [pc, #488]	; (8001ea4 <UART_SetConfig+0x270>)
 8001cba:	428b      	cmp	r3, r1
 8001cbc:	d11d      	bne.n	8001cfa <UART_SetConfig+0xc6>
 8001cbe:	4b75      	ldr	r3, [pc, #468]	; (8001e94 <UART_SetConfig+0x260>)
 8001cc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cc4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001cc8:	2b10      	cmp	r3, #16
 8001cca:	f000 80d9 	beq.w	8001e80 <UART_SetConfig+0x24c>
 8001cce:	d80e      	bhi.n	8001cee <UART_SetConfig+0xba>
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d067      	beq.n	8001da4 <UART_SetConfig+0x170>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001cd4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001cd8:	d076      	beq.n	8001dc8 <UART_SetConfig+0x194>
 8001cda:	2310      	movs	r3, #16
      ret = HAL_ERROR;
    }
  }
  else
  {
    switch (clocksource)
 8001cdc:	2b08      	cmp	r3, #8
 8001cde:	d873      	bhi.n	8001dc8 <UART_SetConfig+0x194>
 8001ce0:	e8df f003 	tbb	[pc, r3]
 8001ce4:	72a29f99 	.word	0x72a29f99
 8001ce8:	727272b4 	.word	0x727272b4
 8001cec:	b7          	.byte	0xb7
 8001ced:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001cee:	2b20      	cmp	r3, #32
 8001cf0:	f000 80ba 	beq.w	8001e68 <UART_SetConfig+0x234>
 8001cf4:	2b30      	cmp	r3, #48	; 0x30
 8001cf6:	d03f      	beq.n	8001d78 <UART_SetConfig+0x144>
 8001cf8:	e7ec      	b.n	8001cd4 <UART_SetConfig+0xa0>
 8001cfa:	496b      	ldr	r1, [pc, #428]	; (8001ea8 <UART_SetConfig+0x274>)
 8001cfc:	428b      	cmp	r3, r1
 8001cfe:	d10d      	bne.n	8001d1c <UART_SetConfig+0xe8>
 8001d00:	4b64      	ldr	r3, [pc, #400]	; (8001e94 <UART_SetConfig+0x260>)
 8001d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d06:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001d0a:	2b40      	cmp	r3, #64	; 0x40
 8001d0c:	f000 80b8 	beq.w	8001e80 <UART_SetConfig+0x24c>
 8001d10:	d9de      	bls.n	8001cd0 <UART_SetConfig+0x9c>
 8001d12:	2b80      	cmp	r3, #128	; 0x80
 8001d14:	f000 80a8 	beq.w	8001e68 <UART_SetConfig+0x234>
 8001d18:	2bc0      	cmp	r3, #192	; 0xc0
 8001d1a:	e7ec      	b.n	8001cf6 <UART_SetConfig+0xc2>
 8001d1c:	4963      	ldr	r1, [pc, #396]	; (8001eac <UART_SetConfig+0x278>)
 8001d1e:	428b      	cmp	r3, r1
 8001d20:	d110      	bne.n	8001d44 <UART_SetConfig+0x110>
 8001d22:	4b5c      	ldr	r3, [pc, #368]	; (8001e94 <UART_SetConfig+0x260>)
 8001d24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d30:	f000 80a6 	beq.w	8001e80 <UART_SetConfig+0x24c>
 8001d34:	d9cc      	bls.n	8001cd0 <UART_SetConfig+0x9c>
 8001d36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d3a:	f000 8095 	beq.w	8001e68 <UART_SetConfig+0x234>
 8001d3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001d42:	e7d8      	b.n	8001cf6 <UART_SetConfig+0xc2>
 8001d44:	495a      	ldr	r1, [pc, #360]	; (8001eb0 <UART_SetConfig+0x27c>)
 8001d46:	428b      	cmp	r3, r1
 8001d48:	d11e      	bne.n	8001d88 <UART_SetConfig+0x154>
 8001d4a:	4b52      	ldr	r3, [pc, #328]	; (8001e94 <UART_SetConfig+0x260>)
 8001d4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d50:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001d54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d58:	f000 8092 	beq.w	8001e80 <UART_SetConfig+0x24c>
 8001d5c:	d806      	bhi.n	8001d6c <UART_SetConfig+0x138>
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d07c      	beq.n	8001e5c <UART_SetConfig+0x228>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001d62:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001d66:	d12f      	bne.n	8001dc8 <UART_SetConfig+0x194>
 8001d68:	2310      	movs	r3, #16
 8001d6a:	e78d      	b.n	8001c88 <UART_SetConfig+0x54>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001d6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001d70:	d07a      	beq.n	8001e68 <UART_SetConfig+0x234>
 8001d72:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8001d76:	d1f4      	bne.n	8001d62 <UART_SetConfig+0x12e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001d78:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001d7c:	d169      	bne.n	8001e52 <UART_SetConfig+0x21e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001d7e:	6863      	ldr	r3, [r4, #4]
 8001d80:	0858      	lsrs	r0, r3, #1
 8001d82:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 8001d86:	e078      	b.n	8001e7a <UART_SetConfig+0x246>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001d88:	494a      	ldr	r1, [pc, #296]	; (8001eb4 <UART_SetConfig+0x280>)
 8001d8a:	428b      	cmp	r3, r1
 8001d8c:	d124      	bne.n	8001dd8 <UART_SetConfig+0x1a4>
 8001d8e:	4b41      	ldr	r3, [pc, #260]	; (8001e94 <UART_SetConfig+0x260>)
 8001d90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d94:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001d98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d9c:	d070      	beq.n	8001e80 <UART_SetConfig+0x24c>
 8001d9e:	d815      	bhi.n	8001dcc <UART_SetConfig+0x198>
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d1de      	bne.n	8001d62 <UART_SetConfig+0x12e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001da4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001da8:	d135      	bne.n	8001e16 <UART_SetConfig+0x1e2>
        pclk = HAL_RCC_GetPCLK1Freq();
 8001daa:	f7ff fc75 	bl	8001698 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001dae:	6862      	ldr	r2, [r4, #4]
 8001db0:	0853      	lsrs	r3, r2, #1
 8001db2:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8001db6:	fbb0 f0f2 	udiv	r0, r0, r2
 8001dba:	b280      	uxth	r0, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001dbc:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8001dc0:	f1a0 0210 	sub.w	r2, r0, #16
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d91a      	bls.n	8001dfe <UART_SetConfig+0x1ca>
    {
      huart->Instance->BRR = usartdiv;
    }
    else
    {
      ret = HAL_ERROR;
 8001dc8:	2001      	movs	r0, #1
 8001dca:	e020      	b.n	8001e0e <UART_SetConfig+0x1da>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001dcc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001dd0:	d04a      	beq.n	8001e68 <UART_SetConfig+0x234>
 8001dd2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001dd6:	e7ce      	b.n	8001d76 <UART_SetConfig+0x142>
 8001dd8:	4937      	ldr	r1, [pc, #220]	; (8001eb8 <UART_SetConfig+0x284>)
 8001dda:	428b      	cmp	r3, r1
 8001ddc:	d1f4      	bne.n	8001dc8 <UART_SetConfig+0x194>
 8001dde:	4b2d      	ldr	r3, [pc, #180]	; (8001e94 <UART_SetConfig+0x260>)
 8001de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001de4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001de8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001dec:	d048      	beq.n	8001e80 <UART_SetConfig+0x24c>
 8001dee:	f67f af6f 	bls.w	8001cd0 <UART_SetConfig+0x9c>
 8001df2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001df6:	d037      	beq.n	8001e68 <UART_SetConfig+0x234>
 8001df8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001dfc:	e77b      	b.n	8001cf6 <UART_SetConfig+0xc2>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001dfe:	f020 030f 	bic.w	r3, r0, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001e02:	f3c0 0042 	ubfx	r0, r0, #1, #3
      huart->Instance->BRR = brrtemp;
 8001e06:	6822      	ldr	r2, [r4, #0]
 8001e08:	4318      	orrs	r0, r3
 8001e0a:	60d0      	str	r0, [r2, #12]
 8001e0c:	2000      	movs	r0, #0
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8001e12:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 8001e14:	bd38      	pop	{r3, r4, r5, pc}
        pclk = HAL_RCC_GetPCLK1Freq();
 8001e16:	f7ff fc3f 	bl	8001698 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001e1a:	6863      	ldr	r3, [r4, #4]
 8001e1c:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8001e20:	e008      	b.n	8001e34 <UART_SetConfig+0x200>
        pclk = HAL_RCC_GetPCLK2Freq();
 8001e22:	f7ff fc49 	bl	80016b8 <HAL_RCC_GetPCLK2Freq>
 8001e26:	e7f8      	b.n	8001e1a <UART_SetConfig+0x1e6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001e28:	6863      	ldr	r3, [r4, #4]
 8001e2a:	0858      	lsrs	r0, r3, #1
 8001e2c:	f500 0074 	add.w	r0, r0, #15990784	; 0xf40000
 8001e30:	f500 5010 	add.w	r0, r0, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001e34:	fbb0 f0f3 	udiv	r0, r0, r3
 8001e38:	b280      	uxth	r0, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001e3a:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8001e3e:	f1a0 0210 	sub.w	r2, r0, #16
 8001e42:	429a      	cmp	r2, r3
 8001e44:	d8c0      	bhi.n	8001dc8 <UART_SetConfig+0x194>
      huart->Instance->BRR = usartdiv;
 8001e46:	6823      	ldr	r3, [r4, #0]
 8001e48:	60d8      	str	r0, [r3, #12]
 8001e4a:	e7df      	b.n	8001e0c <UART_SetConfig+0x1d8>
        pclk = HAL_RCC_GetSysClockFreq();
 8001e4c:	f7ff fb50 	bl	80014f0 <HAL_RCC_GetSysClockFreq>
 8001e50:	e7e3      	b.n	8001e1a <UART_SetConfig+0x1e6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001e52:	6863      	ldr	r3, [r4, #4]
 8001e54:	0858      	lsrs	r0, r3, #1
 8001e56:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
 8001e5a:	e7eb      	b.n	8001e34 <UART_SetConfig+0x200>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e5c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001e60:	d1df      	bne.n	8001e22 <UART_SetConfig+0x1ee>
        pclk = HAL_RCC_GetPCLK2Freq();
 8001e62:	f7ff fc29 	bl	80016b8 <HAL_RCC_GetPCLK2Freq>
 8001e66:	e7a2      	b.n	8001dae <UART_SetConfig+0x17a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e68:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001e6c:	d1dc      	bne.n	8001e28 <UART_SetConfig+0x1f4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001e6e:	6863      	ldr	r3, [r4, #4]
 8001e70:	0858      	lsrs	r0, r3, #1
 8001e72:	f100 70f4 	add.w	r0, r0, #31981568	; 0x1e80000
 8001e76:	f500 4090 	add.w	r0, r0, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001e7a:	fbb0 f0f3 	udiv	r0, r0, r3
 8001e7e:	e79c      	b.n	8001dba <UART_SetConfig+0x186>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e80:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001e84:	d1e2      	bne.n	8001e4c <UART_SetConfig+0x218>
        pclk = HAL_RCC_GetSysClockFreq();
 8001e86:	f7ff fb33 	bl	80014f0 <HAL_RCC_GetSysClockFreq>
 8001e8a:	e790      	b.n	8001dae <UART_SetConfig+0x17a>
 8001e8c:	efff69f3 	.word	0xefff69f3
 8001e90:	40011000 	.word	0x40011000
 8001e94:	40023800 	.word	0x40023800
 8001e98:	0800a13c 	.word	0x0800a13c
 8001e9c:	40004400 	.word	0x40004400
 8001ea0:	0800a140 	.word	0x0800a140
 8001ea4:	40004800 	.word	0x40004800
 8001ea8:	40004c00 	.word	0x40004c00
 8001eac:	40005000 	.word	0x40005000
 8001eb0:	40011400 	.word	0x40011400
 8001eb4:	40007800 	.word	0x40007800
 8001eb8:	40007c00 	.word	0x40007c00

08001ebc <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001ebc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001ebe:	07da      	lsls	r2, r3, #31
{
 8001ec0:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001ec2:	d506      	bpl.n	8001ed2 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001ec4:	6801      	ldr	r1, [r0, #0]
 8001ec6:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001ec8:	684a      	ldr	r2, [r1, #4]
 8001eca:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001ece:	4322      	orrs	r2, r4
 8001ed0:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001ed2:	079c      	lsls	r4, r3, #30
 8001ed4:	d506      	bpl.n	8001ee4 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001ed6:	6801      	ldr	r1, [r0, #0]
 8001ed8:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001eda:	684a      	ldr	r2, [r1, #4]
 8001edc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001ee0:	4322      	orrs	r2, r4
 8001ee2:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001ee4:	0759      	lsls	r1, r3, #29
 8001ee6:	d506      	bpl.n	8001ef6 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001ee8:	6801      	ldr	r1, [r0, #0]
 8001eea:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001eec:	684a      	ldr	r2, [r1, #4]
 8001eee:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001ef2:	4322      	orrs	r2, r4
 8001ef4:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001ef6:	071a      	lsls	r2, r3, #28
 8001ef8:	d506      	bpl.n	8001f08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001efa:	6801      	ldr	r1, [r0, #0]
 8001efc:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001efe:	684a      	ldr	r2, [r1, #4]
 8001f00:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f04:	4322      	orrs	r2, r4
 8001f06:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001f08:	06dc      	lsls	r4, r3, #27
 8001f0a:	d506      	bpl.n	8001f1a <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001f0c:	6801      	ldr	r1, [r0, #0]
 8001f0e:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001f10:	688a      	ldr	r2, [r1, #8]
 8001f12:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001f16:	4322      	orrs	r2, r4
 8001f18:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001f1a:	0699      	lsls	r1, r3, #26
 8001f1c:	d506      	bpl.n	8001f2c <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001f1e:	6801      	ldr	r1, [r0, #0]
 8001f20:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001f22:	688a      	ldr	r2, [r1, #8]
 8001f24:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f28:	4322      	orrs	r2, r4
 8001f2a:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001f2c:	065a      	lsls	r2, r3, #25
 8001f2e:	d510      	bpl.n	8001f52 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001f30:	6801      	ldr	r1, [r0, #0]
 8001f32:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001f34:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001f36:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001f3a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8001f3e:	ea42 0204 	orr.w	r2, r2, r4
 8001f42:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001f44:	d105      	bne.n	8001f52 <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001f46:	684a      	ldr	r2, [r1, #4]
 8001f48:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001f4a:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8001f4e:	4322      	orrs	r2, r4
 8001f50:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001f52:	061b      	lsls	r3, r3, #24
 8001f54:	d506      	bpl.n	8001f64 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001f56:	6802      	ldr	r2, [r0, #0]
 8001f58:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001f5a:	6853      	ldr	r3, [r2, #4]
 8001f5c:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001f60:	430b      	orrs	r3, r1
 8001f62:	6053      	str	r3, [r2, #4]
 8001f64:	bd10      	pop	{r4, pc}

08001f66 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8001f66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f6a:	9d06      	ldr	r5, [sp, #24]
 8001f6c:	4604      	mov	r4, r0
 8001f6e:	460f      	mov	r7, r1
 8001f70:	4616      	mov	r6, r2
 8001f72:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f74:	6821      	ldr	r1, [r4, #0]
 8001f76:	69ca      	ldr	r2, [r1, #28]
 8001f78:	ea37 0302 	bics.w	r3, r7, r2
 8001f7c:	bf0c      	ite	eq
 8001f7e:	2201      	moveq	r2, #1
 8001f80:	2200      	movne	r2, #0
 8001f82:	42b2      	cmp	r2, r6
 8001f84:	d002      	beq.n	8001f8c <UART_WaitOnFlagUntilTimeout+0x26>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8001f86:	2000      	movs	r0, #0
}
 8001f88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001f8c:	1c68      	adds	r0, r5, #1
 8001f8e:	d0f2      	beq.n	8001f76 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f90:	f7fe fb82 	bl	8000698 <HAL_GetTick>
 8001f94:	eba0 0008 	sub.w	r0, r0, r8
 8001f98:	4285      	cmp	r5, r0
 8001f9a:	6820      	ldr	r0, [r4, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001f9c:	6803      	ldr	r3, [r0, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f9e:	d300      	bcc.n	8001fa2 <UART_WaitOnFlagUntilTimeout+0x3c>
 8001fa0:	b97d      	cbnz	r5, 8001fc2 <UART_WaitOnFlagUntilTimeout+0x5c>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001fa2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001fa6:	6003      	str	r3, [r0, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001fa8:	6883      	ldr	r3, [r0, #8]
 8001faa:	f023 0301 	bic.w	r3, r3, #1
 8001fae:	6083      	str	r3, [r0, #8]
        huart->gState = HAL_UART_STATE_READY;
 8001fb0:	2320      	movs	r3, #32
 8001fb2:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8001fb4:	67a3      	str	r3, [r4, #120]	; 0x78
          __HAL_UNLOCK(huart);
 8001fb6:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 8001fb8:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 8001fba:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
          return HAL_TIMEOUT;
 8001fbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8001fc2:	075a      	lsls	r2, r3, #29
 8001fc4:	d5d6      	bpl.n	8001f74 <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001fc6:	69c3      	ldr	r3, [r0, #28]
 8001fc8:	051b      	lsls	r3, r3, #20
 8001fca:	d5d3      	bpl.n	8001f74 <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001fcc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001fd0:	6203      	str	r3, [r0, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001fd2:	6803      	ldr	r3, [r0, #0]
 8001fd4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001fd8:	6003      	str	r3, [r0, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001fda:	6883      	ldr	r3, [r0, #8]
 8001fdc:	f023 0301 	bic.w	r3, r3, #1
 8001fe0:	6083      	str	r3, [r0, #8]
          huart->gState = HAL_UART_STATE_READY;
 8001fe2:	2320      	movs	r3, #32
 8001fe4:	6763      	str	r3, [r4, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8001fe6:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8001fe8:	67e3      	str	r3, [r4, #124]	; 0x7c
 8001fea:	e7e4      	b.n	8001fb6 <UART_WaitOnFlagUntilTimeout+0x50>

08001fec <UART_CheckIdleState>:
{
 8001fec:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fee:	2600      	movs	r6, #0
{
 8001ff0:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ff2:	67c6      	str	r6, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8001ff4:	f7fe fb50 	bl	8000698 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001ff8:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8001ffa:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	071a      	lsls	r2, r3, #28
 8002000:	d415      	bmi.n	800202e <UART_CheckIdleState+0x42>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002002:	6823      	ldr	r3, [r4, #0]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	075b      	lsls	r3, r3, #29
 8002008:	d50a      	bpl.n	8002020 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800200a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800200e:	2200      	movs	r2, #0
 8002010:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002014:	4620      	mov	r0, r4
 8002016:	9300      	str	r3, [sp, #0]
 8002018:	462b      	mov	r3, r5
 800201a:	f7ff ffa4 	bl	8001f66 <UART_WaitOnFlagUntilTimeout>
 800201e:	b990      	cbnz	r0, 8002046 <UART_CheckIdleState+0x5a>
  huart->gState = HAL_UART_STATE_READY;
 8002020:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8002022:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8002024:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UNLOCK(huart);
 8002026:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 800202a:	67a3      	str	r3, [r4, #120]	; 0x78
  return HAL_OK;
 800202c:	e00c      	b.n	8002048 <UART_CheckIdleState+0x5c>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800202e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002032:	4632      	mov	r2, r6
 8002034:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002038:	9300      	str	r3, [sp, #0]
 800203a:	4603      	mov	r3, r0
 800203c:	4620      	mov	r0, r4
 800203e:	f7ff ff92 	bl	8001f66 <UART_WaitOnFlagUntilTimeout>
 8002042:	2800      	cmp	r0, #0
 8002044:	d0dd      	beq.n	8002002 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8002046:	2003      	movs	r0, #3
}
 8002048:	b002      	add	sp, #8
 800204a:	bd70      	pop	{r4, r5, r6, pc}

0800204c <HAL_UART_Init>:
{
 800204c:	b510      	push	{r4, lr}
  if (huart == NULL)
 800204e:	4604      	mov	r4, r0
 8002050:	b340      	cbz	r0, 80020a4 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8002052:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8002054:	b91b      	cbnz	r3, 800205e <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 8002056:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 800205a:	f007 f80b 	bl	8009074 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 800205e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002060:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002062:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 8002064:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8002066:	6813      	ldr	r3, [r2, #0]
 8002068:	f023 0301 	bic.w	r3, r3, #1
 800206c:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800206e:	f7ff fde1 	bl	8001c34 <UART_SetConfig>
 8002072:	2801      	cmp	r0, #1
 8002074:	d016      	beq.n	80020a4 <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002076:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002078:	b113      	cbz	r3, 8002080 <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 800207a:	4620      	mov	r0, r4
 800207c:	f7ff ff1e 	bl	8001ebc <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002080:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8002082:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002084:	685a      	ldr	r2, [r3, #4]
 8002086:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800208a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800208c:	689a      	ldr	r2, [r3, #8]
 800208e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002092:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	f042 0201 	orr.w	r2, r2, #1
}
 800209a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 800209e:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 80020a0:	f7ff bfa4 	b.w	8001fec <UART_CheckIdleState>
}
 80020a4:	2001      	movs	r0, #1
 80020a6:	bd10      	pop	{r4, pc}

080020a8 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 80020a8:	b570      	push	{r4, r5, r6, lr}
 80020aa:	460e      	mov	r6, r1
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 80020ac:	4605      	mov	r5, r0
 80020ae:	b1a8      	cbz	r0, 80020dc <fs_open+0x34>
 80020b0:	b1a1      	cbz	r1, 80020dc <fs_open+0x34>
 80020b2:	4c0c      	ldr	r4, [pc, #48]	; (80020e4 <fs_open+0x3c>)
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
    if (!strcmp(name, (const char *)f->name)) {
 80020b4:	6861      	ldr	r1, [r4, #4]
 80020b6:	4630      	mov	r0, r6
 80020b8:	f7fe f8c2 	bl	8000240 <strcmp>
 80020bc:	b940      	cbnz	r0, 80020d0 <fs_open+0x28>
      file->data = (const char *)f->data;
 80020be:	68a3      	ldr	r3, [r4, #8]
 80020c0:	602b      	str	r3, [r5, #0]
      file->len = f->len;
 80020c2:	68e3      	ldr	r3, [r4, #12]
      file->index = f->len;
      file->pextension = NULL;
 80020c4:	60e8      	str	r0, [r5, #12]
      file->len = f->len;
 80020c6:	606b      	str	r3, [r5, #4]
      file->index = f->len;
 80020c8:	60ab      	str	r3, [r5, #8]
      file->flags = f->flags;
 80020ca:	7c23      	ldrb	r3, [r4, #16]
 80020cc:	742b      	strb	r3, [r5, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 80020ce:	bd70      	pop	{r4, r5, r6, pc}
  for (f = FS_ROOT; f != NULL; f = f->next) {
 80020d0:	6824      	ldr	r4, [r4, #0]
 80020d2:	2c00      	cmp	r4, #0
 80020d4:	d1ee      	bne.n	80020b4 <fs_open+0xc>
    }
  }
  /* file not found */
  return ERR_VAL;
 80020d6:	f06f 0005 	mvn.w	r0, #5
 80020da:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_ARG;
 80020dc:	f06f 000f 	mvn.w	r0, #15
}
 80020e0:	bd70      	pop	{r4, r5, r6, pc}
 80020e2:	bf00      	nop
 80020e4:	0800af10 	.word	0x0800af10

080020e8 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 80020e8:	4770      	bx	lr

080020ea <fs_bytes_left>:
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
  return file->len - file->index;
 80020ea:	6842      	ldr	r2, [r0, #4]
 80020ec:	6880      	ldr	r0, [r0, #8]
}
 80020ee:	1a10      	subs	r0, r2, r0
 80020f0:	4770      	bx	lr

080020f2 <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 80020f2:	b510      	push	{r4, lr}
 80020f4:	4604      	mov	r4, r0
  if (hs->handle) {
 80020f6:	6940      	ldr	r0, [r0, #20]
 80020f8:	b118      	cbz	r0, 8002102 <http_state_eof+0x10>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed / 100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
                                     ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 80020fa:	f7ff fff5 	bl	80020e8 <fs_close>
    hs->handle = NULL;
 80020fe:	2300      	movs	r3, #0
 8002100:	6163      	str	r3, [r4, #20]
    http_ssi_state_free(hs->ssi);
    hs->ssi = NULL;
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 8002102:	6a20      	ldr	r0, [r4, #32]
 8002104:	b118      	cbz	r0, 800210e <http_state_eof+0x1c>
    pbuf_free(hs->req);
 8002106:	f002 f9df 	bl	80044c8 <pbuf_free>
    hs->req = NULL;
 800210a:	2300      	movs	r3, #0
 800210c:	6223      	str	r3, [r4, #32]
 800210e:	bd10      	pop	{r4, pc}

08002110 <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 8002110:	b538      	push	{r3, r4, r5, lr}
 8002112:	460d      	mov	r5, r1
  err_t err;

  *uri = "/404.html";
 8002114:	490a      	ldr	r1, [pc, #40]	; (8002140 <http_get_404_file+0x30>)
  err = fs_open(&hs->file_handle, *uri);
 8002116:	4604      	mov	r4, r0
  *uri = "/404.html";
 8002118:	6029      	str	r1, [r5, #0]
  err = fs_open(&hs->file_handle, *uri);
 800211a:	f7ff ffc5 	bl	80020a8 <fs_open>
  if (err != ERR_OK) {
 800211e:	b168      	cbz	r0, 800213c <http_get_404_file+0x2c>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 8002120:	4908      	ldr	r1, [pc, #32]	; (8002144 <http_get_404_file+0x34>)
    err = fs_open(&hs->file_handle, *uri);
 8002122:	4620      	mov	r0, r4
    *uri = "/404.htm";
 8002124:	6029      	str	r1, [r5, #0]
    err = fs_open(&hs->file_handle, *uri);
 8002126:	f7ff ffbf 	bl	80020a8 <fs_open>
    if (err != ERR_OK) {
 800212a:	b138      	cbz	r0, 800213c <http_get_404_file+0x2c>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 800212c:	4906      	ldr	r1, [pc, #24]	; (8002148 <http_get_404_file+0x38>)
      err = fs_open(&hs->file_handle, *uri);
 800212e:	4620      	mov	r0, r4
      *uri = "/404.shtml";
 8002130:	6029      	str	r1, [r5, #0]
      err = fs_open(&hs->file_handle, *uri);
 8002132:	f7ff ffb9 	bl	80020a8 <fs_open>
      if (err != ERR_OK) {
 8002136:	b108      	cbz	r0, 800213c <http_get_404_file+0x2c>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 8002138:	2400      	movs	r4, #0
 800213a:	602c      	str	r4, [r5, #0]
      }
    }
  }

  return &hs->file_handle;
}
 800213c:	4620      	mov	r0, r4
 800213e:	bd38      	pop	{r3, r4, r5, pc}
 8002140:	0800af24 	.word	0x0800af24
 8002144:	0800af2e 	.word	0x0800af2e
 8002148:	0800af37 	.word	0x0800af37

0800214c <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
 800214c:	b570      	push	{r4, r5, r6, lr}
 800214e:	460c      	mov	r4, r1
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 8002150:	4615      	mov	r5, r2
 8002152:	bb2a      	cbnz	r2, 80021a0 <http_accept+0x54>
 8002154:	b321      	cbz	r1, 80021a0 <http_accept+0x54>
    return ERR_VAL;
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 8002156:	2101      	movs	r1, #1
 8002158:	4620      	mov	r0, r4
 800215a:	f002 fdf9 	bl	8004d50 <tcp_setprio>
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 800215e:	202c      	movs	r0, #44	; 0x2c
 8002160:	f001 fe62 	bl	8003e28 <mem_malloc>
  if (ret != NULL) {
 8002164:	4606      	mov	r6, r0
 8002166:	b1f0      	cbz	r0, 80021a6 <http_accept+0x5a>
  memset(hs, 0, sizeof(struct http_state));
 8002168:	222c      	movs	r2, #44	; 0x2c
 800216a:	4629      	mov	r1, r5
 800216c:	f007 f878 	bl	8009260 <memset>
  }
  hs->pcb = pcb;

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 8002170:	4631      	mov	r1, r6
 8002172:	4620      	mov	r0, r4
  hs->pcb = pcb;
 8002174:	61f4      	str	r4, [r6, #28]
  altcp_arg(pcb, hs);
 8002176:	f002 fe1f 	bl	8004db8 <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 800217a:	490c      	ldr	r1, [pc, #48]	; (80021ac <http_accept+0x60>)
 800217c:	4620      	mov	r0, r4
 800217e:	f002 fe1f 	bl	8004dc0 <tcp_recv>
  altcp_err(pcb, http_err);
 8002182:	490b      	ldr	r1, [pc, #44]	; (80021b0 <http_accept+0x64>)
 8002184:	4620      	mov	r0, r4
 8002186:	f002 fe4b 	bl	8004e20 <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800218a:	490a      	ldr	r1, [pc, #40]	; (80021b4 <http_accept+0x68>)
 800218c:	4620      	mov	r0, r4
 800218e:	2204      	movs	r2, #4
 8002190:	f002 fe64 	bl	8004e5c <tcp_poll>
  altcp_sent(pcb, http_sent);
 8002194:	4908      	ldr	r1, [pc, #32]	; (80021b8 <http_accept+0x6c>)
 8002196:	4620      	mov	r0, r4
 8002198:	f002 fe2a 	bl	8004df0 <tcp_sent>

  return ERR_OK;
}
 800219c:	4628      	mov	r0, r5
 800219e:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_VAL;
 80021a0:	f06f 0505 	mvn.w	r5, #5
 80021a4:	e7fa      	b.n	800219c <http_accept+0x50>
    return ERR_MEM;
 80021a6:	f04f 35ff 	mov.w	r5, #4294967295
 80021aa:	e7f7      	b.n	800219c <http_accept+0x50>
 80021ac:	08002321 	.word	0x08002321
 80021b0:	08002629 	.word	0x08002629
 80021b4:	080022e5 	.word	0x080022e5
 80021b8:	080022cd 	.word	0x080022cd

080021bc <http_close_conn>:
{
 80021bc:	b538      	push	{r3, r4, r5, lr}
 80021be:	4604      	mov	r4, r0
 80021c0:	460d      	mov	r5, r1
  altcp_arg(pcb, NULL);
 80021c2:	2100      	movs	r1, #0
 80021c4:	f002 fdf8 	bl	8004db8 <tcp_arg>
  altcp_recv(pcb, NULL);
 80021c8:	2100      	movs	r1, #0
 80021ca:	4620      	mov	r0, r4
 80021cc:	f002 fdf8 	bl	8004dc0 <tcp_recv>
  altcp_err(pcb, NULL);
 80021d0:	2100      	movs	r1, #0
 80021d2:	4620      	mov	r0, r4
 80021d4:	f002 fe24 	bl	8004e20 <tcp_err>
  altcp_poll(pcb, NULL, 0);
 80021d8:	2200      	movs	r2, #0
 80021da:	4620      	mov	r0, r4
 80021dc:	4611      	mov	r1, r2
 80021de:	f002 fe3d 	bl	8004e5c <tcp_poll>
  altcp_sent(pcb, NULL);
 80021e2:	2100      	movs	r1, #0
 80021e4:	4620      	mov	r0, r4
 80021e6:	f002 fe03 	bl	8004df0 <tcp_sent>
  if (hs != NULL) {
 80021ea:	b12d      	cbz	r5, 80021f8 <http_close_conn+0x3c>
    http_state_eof(hs);
 80021ec:	4628      	mov	r0, r5
 80021ee:	f7ff ff80 	bl	80020f2 <http_state_eof>
    HTTP_FREE_HTTP_STATE(hs);
 80021f2:	4628      	mov	r0, r5
 80021f4:	f001 fcc4 	bl	8003b80 <mem_free>
  err = altcp_close(pcb);
 80021f8:	4620      	mov	r0, r4
 80021fa:	f003 f989 	bl	8005510 <tcp_close>
  if (err != ERR_OK) {
 80021fe:	4605      	mov	r5, r0
 8002200:	b120      	cbz	r0, 800220c <http_close_conn+0x50>
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8002202:	2204      	movs	r2, #4
 8002204:	4902      	ldr	r1, [pc, #8]	; (8002210 <http_close_conn+0x54>)
 8002206:	4620      	mov	r0, r4
 8002208:	f002 fe28 	bl	8004e5c <tcp_poll>
}
 800220c:	4628      	mov	r0, r5
 800220e:	bd38      	pop	{r3, r4, r5, pc}
 8002210:	080022e5 	.word	0x080022e5

08002214 <http_send>:
{
 8002214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002216:	4606      	mov	r6, r0
  if (hs == NULL) {
 8002218:	460d      	mov	r5, r1
 800221a:	b139      	cbz	r1, 800222c <http_send+0x18>
  if (hs->left == 0) {
 800221c:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 800221e:	b99b      	cbnz	r3, 8002248 <http_send+0x34>
  if (hs->handle == NULL) {
 8002220:	6948      	ldr	r0, [r1, #20]
 8002222:	b930      	cbnz	r0, 8002232 <http_send+0x1e>
    http_close_conn(pcb, hs);
 8002224:	4629      	mov	r1, r5
 8002226:	4630      	mov	r0, r6
 8002228:	f7ff ffc8 	bl	80021bc <http_close_conn>
      return 0;
 800222c:	2400      	movs	r4, #0
}
 800222e:	4620      	mov	r0, r4
 8002230:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  bytes_left = fs_bytes_left(hs->handle);
 8002232:	f7ff ff5a 	bl	80020ea <fs_bytes_left>
  if (bytes_left <= 0) {
 8002236:	2800      	cmp	r0, #0
 8002238:	ddf4      	ble.n	8002224 <http_send+0x10>
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 800223a:	4b21      	ldr	r3, [pc, #132]	; (80022c0 <http_send+0xac>)
 800223c:	f240 429d 	movw	r2, #1181	; 0x49d
 8002240:	4920      	ldr	r1, [pc, #128]	; (80022c4 <http_send+0xb0>)
 8002242:	4821      	ldr	r0, [pc, #132]	; (80022c8 <http_send+0xb4>)
 8002244:	f007 f814 	bl	8009270 <iprintf>
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 8002248:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800224c:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 800224e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002252:	4294      	cmp	r4, r2
 8002254:	bf88      	it	hi
 8002256:	461c      	movhi	r4, r3
 8002258:	b2a3      	uxth	r3, r4
  if (len == 0) {
 800225a:	b34c      	cbz	r4, 80022b0 <http_send+0x9c>
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 800225c:	8e74      	ldrh	r4, [r6, #50]	; 0x32
 800225e:	f8b6 2064 	ldrh.w	r2, [r6, #100]	; 0x64
 8002262:	0064      	lsls	r4, r4, #1
  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8002264:	69af      	ldr	r7, [r5, #24]
 8002266:	b2a4      	uxth	r4, r4
 8002268:	4294      	cmp	r4, r2
 800226a:	bf28      	it	cs
 800226c:	4614      	movcs	r4, r2
 800226e:	429c      	cmp	r4, r3
 8002270:	bf28      	it	cs
 8002272:	461c      	movcs	r4, r3
    err = altcp_write(pcb, ptr, len, apiflags);
 8002274:	2300      	movs	r3, #0
 8002276:	4622      	mov	r2, r4
 8002278:	4639      	mov	r1, r7
 800227a:	4630      	mov	r0, r6
 800227c:	f005 f8be 	bl	80073fc <tcp_write>
    if (err == ERR_MEM) {
 8002280:	1c43      	adds	r3, r0, #1
 8002282:	d113      	bne.n	80022ac <http_send+0x98>
      if ((altcp_sndbuf(pcb) == 0) ||
 8002284:	f8b6 3064 	ldrh.w	r3, [r6, #100]	; 0x64
 8002288:	b133      	cbz	r3, 8002298 <http_send+0x84>
 800228a:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
 800228e:	2b08      	cmp	r3, #8
 8002290:	d802      	bhi.n	8002298 <http_send+0x84>
        len /= 2;
 8002292:	0864      	lsrs	r4, r4, #1
  } while ((err == ERR_MEM) && (len > 1));
 8002294:	2c01      	cmp	r4, #1
 8002296:	d8ed      	bhi.n	8002274 <http_send+0x60>
  u8_t data_to_send = 0;
 8002298:	2400      	movs	r4, #0
  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 800229a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800229c:	2b00      	cmp	r3, #0
 800229e:	d1c6      	bne.n	800222e <http_send+0x1a>
 80022a0:	6968      	ldr	r0, [r5, #20]
 80022a2:	f7ff ff22 	bl	80020ea <fs_bytes_left>
 80022a6:	2800      	cmp	r0, #0
 80022a8:	dcc1      	bgt.n	800222e <http_send+0x1a>
 80022aa:	e7bb      	b.n	8002224 <http_send+0x10>
  if (err == ERR_OK) {
 80022ac:	2800      	cmp	r0, #0
 80022ae:	d1f3      	bne.n	8002298 <http_send+0x84>
    hs->file += len;
 80022b0:	69ab      	ldr	r3, [r5, #24]
 80022b2:	4423      	add	r3, r4
 80022b4:	61ab      	str	r3, [r5, #24]
    hs->left -= len;
 80022b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80022b8:	1b1c      	subs	r4, r3, r4
 80022ba:	626c      	str	r4, [r5, #36]	; 0x24
    data_to_send = 1;
 80022bc:	2401      	movs	r4, #1
 80022be:	e7ec      	b.n	800229a <http_send+0x86>
 80022c0:	0800afa6 	.word	0x0800afa6
 80022c4:	0800afdc 	.word	0x0800afdc
 80022c8:	0800b013 	.word	0x0800b013

080022cc <http_sent>:
{
 80022cc:	b508      	push	{r3, lr}
 80022ce:	460b      	mov	r3, r1
  if (hs == NULL) {
 80022d0:	4601      	mov	r1, r0
 80022d2:	b128      	cbz	r0, 80022e0 <http_sent+0x14>
  hs->retries = 0;
 80022d4:	2200      	movs	r2, #0
 80022d6:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
  http_send(pcb, hs);
 80022da:	4618      	mov	r0, r3
 80022dc:	f7ff ff9a 	bl	8002214 <http_send>
}
 80022e0:	2000      	movs	r0, #0
 80022e2:	bd08      	pop	{r3, pc}

080022e4 <http_poll>:
{
 80022e4:	b510      	push	{r4, lr}
 80022e6:	460c      	mov	r4, r1
  if (hs == NULL) {
 80022e8:	4601      	mov	r1, r0
 80022ea:	b920      	cbnz	r0, 80022f6 <http_poll+0x12>
      http_close_conn(pcb, hs);
 80022ec:	4620      	mov	r0, r4
 80022ee:	f7ff ff65 	bl	80021bc <http_close_conn>
}
 80022f2:	2000      	movs	r0, #0
 80022f4:	bd10      	pop	{r4, pc}
    hs->retries++;
 80022f6:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 80022fa:	3301      	adds	r3, #1
 80022fc:	b2db      	uxtb	r3, r3
    if (hs->retries == HTTPD_MAX_RETRIES) {
 80022fe:	2b04      	cmp	r3, #4
    hs->retries++;
 8002300:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 8002304:	d0f2      	beq.n	80022ec <http_poll+0x8>
    if (hs->handle) {
 8002306:	6943      	ldr	r3, [r0, #20]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d0f2      	beq.n	80022f2 <http_poll+0xe>
      if (http_send(pcb, hs)) {
 800230c:	4620      	mov	r0, r4
 800230e:	f7ff ff81 	bl	8002214 <http_send>
 8002312:	2800      	cmp	r0, #0
 8002314:	d0ed      	beq.n	80022f2 <http_poll+0xe>
        altcp_output(pcb);
 8002316:	4620      	mov	r0, r4
 8002318:	f005 fdd6 	bl	8007ec8 <tcp_output>
 800231c:	e7e9      	b.n	80022f2 <http_poll+0xe>
	...

08002320 <http_recv>:
{
 8002320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002324:	4604      	mov	r4, r0
 8002326:	b087      	sub	sp, #28
 8002328:	468b      	mov	fp, r1
 800232a:	4615      	mov	r5, r2
  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 800232c:	469a      	mov	sl, r3
 800232e:	b94b      	cbnz	r3, 8002344 <http_recv+0x24>
 8002330:	b152      	cbz	r2, 8002348 <http_recv+0x28>
 8002332:	b988      	cbnz	r0, 8002358 <http_recv+0x38>
      altcp_recved(pcb, p->tot_len);
 8002334:	4658      	mov	r0, fp
 8002336:	8929      	ldrh	r1, [r5, #8]
 8002338:	f002 fcb8 	bl	8004cac <tcp_recved>
      pbuf_free(p);
 800233c:	4628      	mov	r0, r5
 800233e:	f002 f8c3 	bl	80044c8 <pbuf_free>
 8002342:	e001      	b.n	8002348 <http_recv+0x28>
    if (p != NULL) {
 8002344:	2a00      	cmp	r2, #0
 8002346:	d1f5      	bne.n	8002334 <http_recv+0x14>
    http_close_conn(pcb, hs);
 8002348:	4621      	mov	r1, r4
 800234a:	4658      	mov	r0, fp
 800234c:	f7ff ff36 	bl	80021bc <http_close_conn>
}
 8002350:	2000      	movs	r0, #0
 8002352:	b007      	add	sp, #28
 8002354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    altcp_recved(pcb, p->tot_len);
 8002358:	8911      	ldrh	r1, [r2, #8]
 800235a:	4658      	mov	r0, fp
 800235c:	f002 fca6 	bl	8004cac <tcp_recved>
    if (hs->handle == NULL) {
 8002360:	6963      	ldr	r3, [r4, #20]
 8002362:	2b00      	cmp	r3, #0
 8002364:	f040 813d 	bne.w	80025e2 <http_recv+0x2c2>
  if ((hs->handle != NULL) || (hs->file != NULL)) {
 8002368:	69a3      	ldr	r3, [r4, #24]
 800236a:	2b00      	cmp	r3, #0
 800236c:	f040 8141 	bne.w	80025f2 <http_recv+0x2d2>
  if (hs->req == NULL) {
 8002370:	6a20      	ldr	r0, [r4, #32]
 8002372:	2800      	cmp	r0, #0
 8002374:	f040 8093 	bne.w	800249e <http_recv+0x17e>
    hs->req = p;
 8002378:	6225      	str	r5, [r4, #32]
  pbuf_ref(p);
 800237a:	4628      	mov	r0, r5
 800237c:	f002 f9ee 	bl	800475c <pbuf_ref>
  if (hs->req->next != NULL) {
 8002380:	6a20      	ldr	r0, [r4, #32]
 8002382:	6803      	ldr	r3, [r0, #0]
 8002384:	2b00      	cmp	r3, #0
 8002386:	f000 808e 	beq.w	80024a6 <http_recv+0x186>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 800238a:	f8b0 9008 	ldrh.w	r9, [r0, #8]
 800238e:	f240 33ff 	movw	r3, #1023	; 0x3ff
    data = httpd_req_buf;
 8002392:	f8df 8264 	ldr.w	r8, [pc, #612]	; 80025f8 <http_recv+0x2d8>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 8002396:	4599      	cmp	r9, r3
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 8002398:	4997      	ldr	r1, [pc, #604]	; (80025f8 <http_recv+0x2d8>)
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 800239a:	bf28      	it	cs
 800239c:	4699      	movcs	r9, r3
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 800239e:	2300      	movs	r3, #0
 80023a0:	464a      	mov	r2, r9
 80023a2:	f002 faaf 	bl	8004904 <pbuf_copy_partial>
  if (data_len >= MIN_REQ_LEN) {
 80023a6:	f1b9 0f06 	cmp.w	r9, #6
 80023aa:	f240 8106 	bls.w	80025ba <http_recv+0x29a>
    crlf = lwip_strnstr(data, CRLF, data_len);
 80023ae:	464a      	mov	r2, r9
 80023b0:	4992      	ldr	r1, [pc, #584]	; (80025fc <http_recv+0x2dc>)
 80023b2:	4640      	mov	r0, r8
 80023b4:	f000 f989 	bl	80026ca <lwip_strnstr>
    if (crlf != NULL) {
 80023b8:	2800      	cmp	r0, #0
 80023ba:	f000 80fe 	beq.w	80025ba <http_recv+0x29a>
      if (!strncmp(data, "GET ", 4)) {
 80023be:	2204      	movs	r2, #4
 80023c0:	498f      	ldr	r1, [pc, #572]	; (8002600 <http_recv+0x2e0>)
 80023c2:	4640      	mov	r0, r8
 80023c4:	f006 ffb4 	bl	8009330 <strncmp>
 80023c8:	9001      	str	r0, [sp, #4]
 80023ca:	2800      	cmp	r0, #0
 80023cc:	d170      	bne.n	80024b0 <http_recv+0x190>
        sp1 = data + 3;
 80023ce:	f108 0303 	add.w	r3, r8, #3
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 80023d2:	f108 0604 	add.w	r6, r8, #4
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 80023d6:	498b      	ldr	r1, [pc, #556]	; (8002604 <http_recv+0x2e4>)
        sp1 = data + 3;
 80023d8:	9302      	str	r3, [sp, #8]
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 80023da:	f1a9 0304 	sub.w	r3, r9, #4
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 80023de:	4630      	mov	r0, r6
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	461a      	mov	r2, r3
 80023e4:	9303      	str	r3, [sp, #12]
 80023e6:	f000 f970 	bl	80026ca <lwip_strnstr>
      if (sp2 == NULL) {
 80023ea:	9b03      	ldr	r3, [sp, #12]
 80023ec:	4607      	mov	r7, r0
 80023ee:	b950      	cbnz	r0, 8002406 <http_recv+0xe6>
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 80023f0:	461a      	mov	r2, r3
 80023f2:	4982      	ldr	r1, [pc, #520]	; (80025fc <http_recv+0x2dc>)
 80023f4:	4630      	mov	r0, r6
 80023f6:	f000 f968 	bl	80026ca <lwip_strnstr>
      if ((sp2 != 0) && (sp2 > sp1)) {
 80023fa:	4607      	mov	r7, r0
 80023fc:	2800      	cmp	r0, #0
 80023fe:	f000 80dc 	beq.w	80025ba <http_recv+0x29a>
        is_09 = 1;
 8002402:	2301      	movs	r3, #1
 8002404:	9301      	str	r3, [sp, #4]
      if ((sp2 != 0) && (sp2 > sp1)) {
 8002406:	9b02      	ldr	r3, [sp, #8]
 8002408:	42bb      	cmp	r3, r7
 800240a:	f080 80d6 	bcs.w	80025ba <http_recv+0x29a>
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 800240e:	464a      	mov	r2, r9
 8002410:	497d      	ldr	r1, [pc, #500]	; (8002608 <http_recv+0x2e8>)
 8002412:	4640      	mov	r0, r8
 8002414:	f000 f959 	bl	80026ca <lwip_strnstr>
 8002418:	2800      	cmp	r0, #0
 800241a:	f000 80ce 	beq.w	80025ba <http_recv+0x29a>
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 800241e:	1bbf      	subs	r7, r7, r6
          *sp1 = 0;
 8002420:	2300      	movs	r3, #0
  size_t uri_len = strlen(uri);
 8002422:	4630      	mov	r0, r6
          uri[uri_len] = 0;
 8002424:	b2bf      	uxth	r7, r7
          *sp1 = 0;
 8002426:	f888 3003 	strb.w	r3, [r8, #3]
          uri[uri_len] = 0;
 800242a:	55f3      	strb	r3, [r6, r7]
 800242c:	9605      	str	r6, [sp, #20]
  size_t uri_len = strlen(uri);
 800242e:	f7fd ff11 	bl	8000254 <strlen>
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 8002432:	2800      	cmp	r0, #0
 8002434:	f000 809f 	beq.w	8002576 <http_recv+0x256>
 8002438:	1e47      	subs	r7, r0, #1
 800243a:	5df3      	ldrb	r3, [r6, r7]
 800243c:	2b2f      	cmp	r3, #47	; 0x2f
 800243e:	f040 809a 	bne.w	8002576 <http_recv+0x256>
 8002442:	4b72      	ldr	r3, [pc, #456]	; (800260c <http_recv+0x2ec>)
 8002444:	429e      	cmp	r6, r3
 8002446:	4699      	mov	r9, r3
 8002448:	d102      	bne.n	8002450 <http_recv+0x130>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800244a:	2801      	cmp	r0, #1
 800244c:	f040 8093 	bne.w	8002576 <http_recv+0x256>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 8002450:	2f3f      	cmp	r7, #63	; 0x3f
 8002452:	bf28      	it	cs
 8002454:	273f      	movcs	r7, #63	; 0x3f
    if (copy_len > 0) {
 8002456:	b13f      	cbz	r7, 8002468 <http_recv+0x148>
      MEMCPY(http_uri_buf, uri, copy_len);
 8002458:	463a      	mov	r2, r7
 800245a:	4631      	mov	r1, r6
 800245c:	486b      	ldr	r0, [pc, #428]	; (800260c <http_recv+0x2ec>)
 800245e:	f006 fef4 	bl	800924a <memcpy>
      http_uri_buf[copy_len] = 0;
 8002462:	2300      	movs	r3, #0
 8002464:	f809 3007 	strb.w	r3, [r9, r7]
        is_09 = 1;
 8002468:	f04f 0800 	mov.w	r8, #0
      if (copy_len > 0) {
 800246c:	b337      	cbz	r7, 80024bc <http_recv+0x19c>
        if (len_left > 0) {
 800246e:	f1d7 063f 	rsbs	r6, r7, #63	; 0x3f
 8002472:	d012      	beq.n	800249a <http_recv+0x17a>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 8002474:	4b66      	ldr	r3, [pc, #408]	; (8002610 <http_recv+0x2f0>)
 8002476:	f853 1038 	ldr.w	r1, [r3, r8, lsl #3]
 800247a:	4608      	mov	r0, r1
 800247c:	9102      	str	r1, [sp, #8]
 800247e:	f7fd fee9 	bl	8000254 <strlen>
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 8002482:	4286      	cmp	r6, r0
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 8002484:	eb09 0307 	add.w	r3, r9, r7
 8002488:	9902      	ldr	r1, [sp, #8]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 800248a:	bf28      	it	cs
 800248c:	4606      	movcs	r6, r0
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 800248e:	4618      	mov	r0, r3
 8002490:	4632      	mov	r2, r6
 8002492:	f006 feda 	bl	800924a <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 8002496:	2200      	movs	r2, #0
 8002498:	5582      	strb	r2, [r0, r6]
        file_name = http_uri_buf;
 800249a:	4b5c      	ldr	r3, [pc, #368]	; (800260c <http_recv+0x2ec>)
 800249c:	e011      	b.n	80024c2 <http_recv+0x1a2>
    pbuf_cat(hs->req, p);
 800249e:	4629      	mov	r1, r5
 80024a0:	f002 f970 	bl	8004784 <pbuf_cat>
 80024a4:	e769      	b.n	800237a <http_recv+0x5a>
    data = (char *)p->payload;
 80024a6:	f8d5 8004 	ldr.w	r8, [r5, #4]
    data_len = p->len;
 80024aa:	f8b5 900a 	ldrh.w	r9, [r5, #10]
 80024ae:	e77a      	b.n	80023a6 <http_recv+0x86>
        data[4] = 0;
 80024b0:	2300      	movs	r3, #0
 80024b2:	f888 3004 	strb.w	r3, [r8, #4]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 80024b6:	f06f 0a0f 	mvn.w	sl, #15
 80024ba:	e045      	b.n	8002548 <http_recv+0x228>
        file_name = httpd_default_filenames[loop].name;
 80024bc:	4b54      	ldr	r3, [pc, #336]	; (8002610 <http_recv+0x2f0>)
 80024be:	f853 3038 	ldr.w	r3, [r3, r8, lsl #3]
      err = fs_open(&hs->file_handle, file_name);
 80024c2:	4619      	mov	r1, r3
 80024c4:	4620      	mov	r0, r4
 80024c6:	9302      	str	r3, [sp, #8]
 80024c8:	4626      	mov	r6, r4
 80024ca:	f7ff fded 	bl	80020a8 <fs_open>
      if (err == ERR_OK) {
 80024ce:	9b02      	ldr	r3, [sp, #8]
 80024d0:	2800      	cmp	r0, #0
 80024d2:	d14a      	bne.n	800256a <http_recv+0x24a>
        uri = file_name;
 80024d4:	9305      	str	r3, [sp, #20]
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 80024d6:	6833      	ldr	r3, [r6, #0]
 80024d8:	b933      	cbnz	r3, 80024e8 <http_recv+0x1c8>
 80024da:	4b4e      	ldr	r3, [pc, #312]	; (8002614 <http_recv+0x2f4>)
 80024dc:	f640 120b 	movw	r2, #2315	; 0x90b
 80024e0:	494d      	ldr	r1, [pc, #308]	; (8002618 <http_recv+0x2f8>)
 80024e2:	484e      	ldr	r0, [pc, #312]	; (800261c <http_recv+0x2fc>)
 80024e4:	f006 fec4 	bl	8009270 <iprintf>
    hs->file = file->data;
 80024e8:	6833      	ldr	r3, [r6, #0]
    hs->handle = file;
 80024ea:	6166      	str	r6, [r4, #20]
    hs->file = file->data;
 80024ec:	61a3      	str	r3, [r4, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 80024ee:	6873      	ldr	r3, [r6, #4]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	da06      	bge.n	8002502 <http_recv+0x1e2>
 80024f4:	4b47      	ldr	r3, [pc, #284]	; (8002614 <http_recv+0x2f4>)
 80024f6:	f640 1234 	movw	r2, #2356	; 0x934
 80024fa:	4949      	ldr	r1, [pc, #292]	; (8002620 <http_recv+0x300>)
 80024fc:	4847      	ldr	r0, [pc, #284]	; (800261c <http_recv+0x2fc>)
 80024fe:	f006 feb7 	bl	8009270 <iprintf>
      hs->left = (u32_t)file->len;
 8002502:	6873      	ldr	r3, [r6, #4]
 8002504:	6263      	str	r3, [r4, #36]	; 0x24
    hs->retries = 0;
 8002506:	2300      	movs	r3, #0
 8002508:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    LWIP_ASSERT("HTTP headers not included in file system",
 800250c:	6963      	ldr	r3, [r4, #20]
 800250e:	7c1b      	ldrb	r3, [r3, #16]
 8002510:	07da      	lsls	r2, r3, #31
 8002512:	d46a      	bmi.n	80025ea <http_recv+0x2ca>
 8002514:	4b3f      	ldr	r3, [pc, #252]	; (8002614 <http_recv+0x2f4>)
 8002516:	f640 1244 	movw	r2, #2372	; 0x944
 800251a:	4942      	ldr	r1, [pc, #264]	; (8002624 <http_recv+0x304>)
 800251c:	483f      	ldr	r0, [pc, #252]	; (800261c <http_recv+0x2fc>)
 800251e:	f006 fea7 	bl	8009270 <iprintf>
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 8002522:	9b01      	ldr	r3, [sp, #4]
 8002524:	b183      	cbz	r3, 8002548 <http_recv+0x228>
 8002526:	6963      	ldr	r3, [r4, #20]
 8002528:	7c1b      	ldrb	r3, [r3, #16]
 800252a:	07db      	lsls	r3, r3, #31
 800252c:	d50c      	bpl.n	8002548 <http_recv+0x228>
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 800252e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002530:	4935      	ldr	r1, [pc, #212]	; (8002608 <http_recv+0x2e8>)
 8002532:	69a0      	ldr	r0, [r4, #24]
 8002534:	f000 f8c9 	bl	80026ca <lwip_strnstr>
      if (file_start != NULL) {
 8002538:	b130      	cbz	r0, 8002548 <http_recv+0x228>
        int diff = file_start + 4 - hs->file;
 800253a:	69a3      	ldr	r3, [r4, #24]
 800253c:	3004      	adds	r0, #4
 800253e:	1ac2      	subs	r2, r0, r3
        hs->left -= (u32_t)diff;
 8002540:	6a63      	ldr	r3, [r4, #36]	; 0x24
        hs->file += diff;
 8002542:	61a0      	str	r0, [r4, #24]
        hs->left -= (u32_t)diff;
 8002544:	1a9b      	subs	r3, r3, r2
 8002546:	6263      	str	r3, [r4, #36]	; 0x24
        if (hs->req != NULL) {
 8002548:	6a20      	ldr	r0, [r4, #32]
 800254a:	b118      	cbz	r0, 8002554 <http_recv+0x234>
          pbuf_free(hs->req);
 800254c:	f001 ffbc 	bl	80044c8 <pbuf_free>
          hs->req = NULL;
 8002550:	2300      	movs	r3, #0
 8002552:	6223      	str	r3, [r4, #32]
      pbuf_free(p);
 8002554:	4628      	mov	r0, r5
 8002556:	f001 ffb7 	bl	80044c8 <pbuf_free>
      if (parsed == ERR_OK) {
 800255a:	f1ba 0f00 	cmp.w	sl, #0
 800255e:	d13b      	bne.n	80025d8 <http_recv+0x2b8>
          http_send(pcb, hs);
 8002560:	4621      	mov	r1, r4
 8002562:	4658      	mov	r0, fp
 8002564:	f7ff fe56 	bl	8002214 <http_send>
 8002568:	e6f2      	b.n	8002350 <http_recv+0x30>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800256a:	f108 0801 	add.w	r8, r8, #1
 800256e:	f1b8 0f05 	cmp.w	r8, #5
 8002572:	f47f af7b 	bne.w	800246c <http_recv+0x14c>
    params = (char *)strchr(uri, '?');
 8002576:	213f      	movs	r1, #63	; 0x3f
 8002578:	9805      	ldr	r0, [sp, #20]
 800257a:	f006 fecb 	bl	8009314 <strchr>
    if (params != NULL) {
 800257e:	b108      	cbz	r0, 8002584 <http_recv+0x264>
      *params = '\0';
 8002580:	2300      	movs	r3, #0
 8002582:	7003      	strb	r3, [r0, #0]
    err = fs_open(&hs->file_handle, uri);
 8002584:	9905      	ldr	r1, [sp, #20]
 8002586:	4620      	mov	r0, r4
 8002588:	4626      	mov	r6, r4
 800258a:	f7ff fd8d 	bl	80020a8 <fs_open>
    if (err == ERR_OK) {
 800258e:	2800      	cmp	r0, #0
 8002590:	d0a1      	beq.n	80024d6 <http_recv+0x1b6>
      file = http_get_404_file(hs, &uri);
 8002592:	a905      	add	r1, sp, #20
 8002594:	4620      	mov	r0, r4
 8002596:	f7ff fdbb 	bl	8002110 <http_get_404_file>
  if (file == NULL) {
 800259a:	4606      	mov	r6, r0
 800259c:	2800      	cmp	r0, #0
 800259e:	d19a      	bne.n	80024d6 <http_recv+0x1b6>
    file = http_get_404_file(hs, &uri);
 80025a0:	a905      	add	r1, sp, #20
 80025a2:	4620      	mov	r0, r4
 80025a4:	f7ff fdb4 	bl	8002110 <http_get_404_file>
  if (file != NULL) {
 80025a8:	4606      	mov	r6, r0
 80025aa:	2800      	cmp	r0, #0
 80025ac:	d193      	bne.n	80024d6 <http_recv+0x1b6>
    hs->handle = NULL;
 80025ae:	6160      	str	r0, [r4, #20]
    hs->file = NULL;
 80025b0:	61a0      	str	r0, [r4, #24]
    hs->left = 0;
 80025b2:	6260      	str	r0, [r4, #36]	; 0x24
    hs->retries = 0;
 80025b4:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
 80025b8:	e7c6      	b.n	8002548 <http_recv+0x228>
  clen = pbuf_clen(hs->req);
 80025ba:	6a20      	ldr	r0, [r4, #32]
 80025bc:	f002 f8c6 	bl	800474c <pbuf_clen>
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 80025c0:	6a23      	ldr	r3, [r4, #32]
 80025c2:	891b      	ldrh	r3, [r3, #8]
 80025c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025c8:	f4bf af75 	bcs.w	80024b6 <http_recv+0x196>
 80025cc:	2805      	cmp	r0, #5
 80025ce:	f63f af72 	bhi.w	80024b6 <http_recv+0x196>
 80025d2:	f06f 0a04 	mvn.w	sl, #4
 80025d6:	e7bd      	b.n	8002554 <http_recv+0x234>
      } else if (parsed == ERR_ARG) {
 80025d8:	f11a 0f10 	cmn.w	sl, #16
 80025dc:	f47f aeb8 	bne.w	8002350 <http_recv+0x30>
 80025e0:	e6b2      	b.n	8002348 <http_recv+0x28>
      pbuf_free(p);
 80025e2:	4628      	mov	r0, r5
 80025e4:	f001 ff70 	bl	80044c8 <pbuf_free>
 80025e8:	e6b2      	b.n	8002350 <http_recv+0x30>
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 80025ea:	9b01      	ldr	r3, [sp, #4]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d0ab      	beq.n	8002548 <http_recv+0x228>
 80025f0:	e79d      	b.n	800252e <http_recv+0x20e>
    return ERR_USE;
 80025f2:	f06f 0a07 	mvn.w	sl, #7
 80025f6:	e7a7      	b.n	8002548 <http_recv+0x228>
 80025f8:	200000d4 	.word	0x200000d4
 80025fc:	0800af49 	.word	0x0800af49
 8002600:	0800af42 	.word	0x0800af42
 8002604:	0800d01c 	.word	0x0800d01c
 8002608:	0800af47 	.word	0x0800af47
 800260c:	20000094 	.word	0x20000094
 8002610:	0800b03c 	.word	0x0800b03c
 8002614:	0800afa6 	.word	0x0800afa6
 8002618:	0800af4c 	.word	0x0800af4c
 800261c:	0800b013 	.word	0x0800b013
 8002620:	0800af5f 	.word	0x0800af5f
 8002624:	0800af7d 	.word	0x0800af7d

08002628 <http_err>:
{
 8002628:	b510      	push	{r4, lr}
  if (hs != NULL) {
 800262a:	4604      	mov	r4, r0
 800262c:	b130      	cbz	r0, 800263c <http_err+0x14>
    http_state_eof(hs);
 800262e:	f7ff fd60 	bl	80020f2 <http_state_eof>
    HTTP_FREE_HTTP_STATE(hs);
 8002632:	4620      	mov	r0, r4
}
 8002634:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HTTP_FREE_HTTP_STATE(hs);
 8002638:	f001 baa2 	b.w	8003b80 <mem_free>
 800263c:	bd10      	pop	{r4, pc}
	...

08002640 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 8002640:	b510      	push	{r4, lr}
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 8002642:	202e      	movs	r0, #46	; 0x2e
 8002644:	f002 feb0 	bl	80053a8 <tcp_new_ip_type>
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 8002648:	4604      	mov	r4, r0
 800264a:	b940      	cbnz	r0, 800265e <httpd_init+0x1e>
 800264c:	4b15      	ldr	r3, [pc, #84]	; (80026a4 <httpd_init+0x64>)
 800264e:	f640 2272 	movw	r2, #2674	; 0xa72
 8002652:	4915      	ldr	r1, [pc, #84]	; (80026a8 <httpd_init+0x68>)
 8002654:	4815      	ldr	r0, [pc, #84]	; (80026ac <httpd_init+0x6c>)
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
}
 8002656:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 800265a:	f006 be09 	b.w	8009270 <iprintf>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800265e:	2101      	movs	r1, #1
 8002660:	f002 fb76 	bl	8004d50 <tcp_setprio>
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 8002664:	2250      	movs	r2, #80	; 0x50
 8002666:	4912      	ldr	r1, [pc, #72]	; (80026b0 <httpd_init+0x70>)
 8002668:	4620      	mov	r0, r4
 800266a:	f002 fa29 	bl	8004ac0 <tcp_bind>
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 800266e:	b130      	cbz	r0, 800267e <httpd_init+0x3e>
 8002670:	4b0c      	ldr	r3, [pc, #48]	; (80026a4 <httpd_init+0x64>)
 8002672:	f640 2257 	movw	r2, #2647	; 0xa57
 8002676:	490f      	ldr	r1, [pc, #60]	; (80026b4 <httpd_init+0x74>)
 8002678:	480c      	ldr	r0, [pc, #48]	; (80026ac <httpd_init+0x6c>)
 800267a:	f006 fdf9 	bl	8009270 <iprintf>
    pcb = altcp_listen(pcb);
 800267e:	4620      	mov	r0, r4
 8002680:	21ff      	movs	r1, #255	; 0xff
 8002682:	f002 fad9 	bl	8004c38 <tcp_listen_with_backlog>
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 8002686:	4604      	mov	r4, r0
 8002688:	b930      	cbnz	r0, 8002698 <httpd_init+0x58>
 800268a:	4b06      	ldr	r3, [pc, #24]	; (80026a4 <httpd_init+0x64>)
 800268c:	f640 2259 	movw	r2, #2649	; 0xa59
 8002690:	4909      	ldr	r1, [pc, #36]	; (80026b8 <httpd_init+0x78>)
 8002692:	4806      	ldr	r0, [pc, #24]	; (80026ac <httpd_init+0x6c>)
 8002694:	f006 fdec 	bl	8009270 <iprintf>
    altcp_accept(pcb, http_accept);
 8002698:	4620      	mov	r0, r4
 800269a:	4908      	ldr	r1, [pc, #32]	; (80026bc <httpd_init+0x7c>)
}
 800269c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    altcp_accept(pcb, http_accept);
 80026a0:	f002 bbd6 	b.w	8004e50 <tcp_accept>
 80026a4:	0800afa6 	.word	0x0800afa6
 80026a8:	0800b064 	.word	0x0800b064
 80026ac:	0800b013 	.word	0x0800b013
 80026b0:	0800b3e4 	.word	0x0800b3e4
 80026b4:	0800b07f 	.word	0x0800b07f
 80026b8:	0800b09b 	.word	0x0800b09b
 80026bc:	0800214d 	.word	0x0800214d

080026c0 <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return PP_HTONS(n);
 80026c0:	ba40      	rev16	r0, r0
}
 80026c2:	b280      	uxth	r0, r0
 80026c4:	4770      	bx	lr

080026c6 <lwip_htonl>:
 */
u32_t
lwip_htonl(u32_t n)
{
  return PP_HTONL(n);
}
 80026c6:	ba00      	rev	r0, r0
 80026c8:	4770      	bx	lr

080026ca <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 80026ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026cc:	4604      	mov	r4, r0
  const char *p;
  size_t tokenlen = strlen(token);
 80026ce:	4608      	mov	r0, r1
{
 80026d0:	460f      	mov	r7, r1
 80026d2:	4615      	mov	r5, r2
  size_t tokenlen = strlen(token);
 80026d4:	f7fd fdbe 	bl	8000254 <strlen>
  if (tokenlen == 0) {
 80026d8:	4606      	mov	r6, r0
 80026da:	b190      	cbz	r0, 8002702 <lwip_strnstr+0x38>
    return LWIP_CONST_CAST(char *, buffer);
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 80026dc:	4425      	add	r5, r4
 80026de:	7820      	ldrb	r0, [r4, #0]
 80026e0:	b180      	cbz	r0, 8002704 <lwip_strnstr+0x3a>
 80026e2:	19a3      	adds	r3, r4, r6
 80026e4:	429d      	cmp	r5, r3
 80026e6:	d201      	bcs.n	80026ec <lwip_strnstr+0x22>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
      return LWIP_CONST_CAST(char *, p);
    }
  }
  return NULL;
 80026e8:	2000      	movs	r0, #0
 80026ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 80026ec:	783b      	ldrb	r3, [r7, #0]
 80026ee:	4283      	cmp	r3, r0
 80026f0:	d105      	bne.n	80026fe <lwip_strnstr+0x34>
 80026f2:	4632      	mov	r2, r6
 80026f4:	4639      	mov	r1, r7
 80026f6:	4620      	mov	r0, r4
 80026f8:	f006 fe1a 	bl	8009330 <strncmp>
 80026fc:	b108      	cbz	r0, 8002702 <lwip_strnstr+0x38>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 80026fe:	3401      	adds	r4, #1
 8002700:	e7ed      	b.n	80026de <lwip_strnstr+0x14>
 8002702:	4620      	mov	r0, r4
}
 8002704:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002706 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8002706:	b508      	push	{r3, lr}
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8002708:	f001 fa1a 	bl	8003b40 <mem_init>
  memp_init();
 800270c:	f001 fc70 	bl	8003ff0 <memp_init>
  pbuf_init();
  netif_init();
 8002710:	f001 fd10 	bl	8004134 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8002714:	f005 ff28 	bl	8008568 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8002718:	f002 f9ae 	bl	8004a78 <tcp_init>
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
#endif /* LWIP_TIMERS */
}
 800271c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeouts_init();
 8002720:	f005 bede 	b.w	80084e0 <sys_timeouts_init>

08002724 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8002724:	b570      	push	{r4, r5, r6, lr}
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8002726:	2618      	movs	r6, #24
 8002728:	4c07      	ldr	r4, [pc, #28]	; (8002748 <etharp_free_entry+0x24>)
{
 800272a:	4605      	mov	r5, r0
  if (arp_table[i].q != NULL) {
 800272c:	4346      	muls	r6, r0
 800272e:	59a0      	ldr	r0, [r4, r6]
 8002730:	b118      	cbz	r0, 800273a <etharp_free_entry+0x16>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8002732:	f001 fec9 	bl	80044c8 <pbuf_free>
    arp_table[i].q = NULL;
 8002736:	2300      	movs	r3, #0
 8002738:	51a3      	str	r3, [r4, r6]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800273a:	2318      	movs	r3, #24
 800273c:	fb03 4405 	mla	r4, r3, r5, r4
 8002740:	2300      	movs	r3, #0
 8002742:	7523      	strb	r3, [r4, #20]
 8002744:	bd70      	pop	{r4, r5, r6, pc}
 8002746:	bf00      	nop
 8002748:	200004d4 	.word	0x200004d4

0800274c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800274c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
  s16_t empty = ARP_TABLE_SIZE;
  s16_t i = 0;
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8002750:	f04f 0c0a 	mov.w	ip, #10
{
 8002754:	f04f 0e00 	mov.w	lr, #0
 8002758:	4606      	mov	r6, r0
 800275a:	4617      	mov	r7, r2
 800275c:	4b44      	ldr	r3, [pc, #272]	; (8002870 <etharp_find_entry+0x124>)
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800275e:	46f3      	mov	fp, lr
  s16_t empty = ARP_TABLE_SIZE;
 8002760:	4664      	mov	r4, ip
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8002762:	4665      	mov	r5, ip
 8002764:	46e0      	mov	r8, ip
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8002766:	f8cd e004 	str.w	lr, [sp, #4]
 800276a:	f8cd e000 	str.w	lr, [sp]
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
    u8_t state = arp_table[i].state;
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800276e:	2c0a      	cmp	r4, #10
 8002770:	fa0f f08e 	sxth.w	r0, lr
    u8_t state = arp_table[i].state;
 8002774:	f893 9014 	ldrb.w	r9, [r3, #20]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8002778:	d110      	bne.n	800279c <etharp_find_entry+0x50>
 800277a:	f1b9 0f00 	cmp.w	r9, #0
 800277e:	d059      	beq.n	8002834 <etharp_find_entry+0xe8>
      empty = i;
    } else if (state != ETHARP_STATE_EMPTY) {
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8002780:	2e00      	cmp	r6, #0
 8002782:	d066      	beq.n	8002852 <etharp_find_entry+0x106>
 8002784:	6832      	ldr	r2, [r6, #0]
 8002786:	4692      	mov	sl, r2
 8002788:	685a      	ldr	r2, [r3, #4]
 800278a:	4592      	cmp	sl, r2
 800278c:	d161      	bne.n	8002852 <etharp_find_entry+0x106>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800278e:	b117      	cbz	r7, 8002796 <etharp_find_entry+0x4a>
 8002790:	689a      	ldr	r2, [r3, #8]
 8002792:	4297      	cmp	r7, r2
 8002794:	d15d      	bne.n	8002852 <etharp_find_entry+0x106>
  arp_table[i].ctime = 0;
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
}
 8002796:	b003      	add	sp, #12
 8002798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    } else if (state != ETHARP_STATE_EMPTY) {
 800279c:	f1b9 0f00 	cmp.w	r9, #0
 80027a0:	d1ee      	bne.n	8002780 <etharp_find_entry+0x34>
 80027a2:	f10e 0e01 	add.w	lr, lr, #1
 80027a6:	3318      	adds	r3, #24
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80027a8:	f1be 0f0a 	cmp.w	lr, #10
 80027ac:	d1df      	bne.n	800276e <etharp_find_entry+0x22>
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80027ae:	078a      	lsls	r2, r1, #30
 80027b0:	d44c      	bmi.n	800284c <etharp_find_entry+0x100>
 80027b2:	2c0a      	cmp	r4, #10
 80027b4:	d113      	bne.n	80027de <etharp_find_entry+0x92>
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80027b6:	07cb      	lsls	r3, r1, #31
 80027b8:	d548      	bpl.n	800284c <etharp_find_entry+0x100>
    if (old_stable < ARP_TABLE_SIZE) {
 80027ba:	2d0a      	cmp	r5, #10
 80027bc:	d03c      	beq.n	8002838 <etharp_find_entry+0xec>
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80027be:	2318      	movs	r3, #24
 80027c0:	4a2b      	ldr	r2, [pc, #172]	; (8002870 <etharp_find_entry+0x124>)
 80027c2:	436b      	muls	r3, r5
 80027c4:	58d3      	ldr	r3, [r2, r3]
 80027c6:	b133      	cbz	r3, 80027d6 <etharp_find_entry+0x8a>
 80027c8:	4b2a      	ldr	r3, [pc, #168]	; (8002874 <etharp_find_entry+0x128>)
 80027ca:	f240 126d 	movw	r2, #365	; 0x16d
 80027ce:	492a      	ldr	r1, [pc, #168]	; (8002878 <etharp_find_entry+0x12c>)
 80027d0:	482a      	ldr	r0, [pc, #168]	; (800287c <etharp_find_entry+0x130>)
 80027d2:	f006 fd4d 	bl	8009270 <iprintf>
    etharp_free_entry(i);
 80027d6:	462c      	mov	r4, r5
 80027d8:	4628      	mov	r0, r5
 80027da:	f7ff ffa3 	bl	8002724 <etharp_free_entry>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80027de:	2318      	movs	r3, #24
 80027e0:	4a23      	ldr	r2, [pc, #140]	; (8002870 <etharp_find_entry+0x124>)
 80027e2:	fb03 2304 	mla	r3, r3, r4, r2
 80027e6:	7d1b      	ldrb	r3, [r3, #20]
 80027e8:	b133      	cbz	r3, 80027f8 <etharp_find_entry+0xac>
 80027ea:	4b22      	ldr	r3, [pc, #136]	; (8002874 <etharp_find_entry+0x128>)
 80027ec:	f240 1285 	movw	r2, #389	; 0x185
 80027f0:	4923      	ldr	r1, [pc, #140]	; (8002880 <etharp_find_entry+0x134>)
 80027f2:	4822      	ldr	r0, [pc, #136]	; (800287c <etharp_find_entry+0x130>)
 80027f4:	f006 fd3c 	bl	8009270 <iprintf>
  if (ipaddr != NULL) {
 80027f8:	b12e      	cbz	r6, 8002806 <etharp_find_entry+0xba>
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80027fa:	2318      	movs	r3, #24
 80027fc:	491c      	ldr	r1, [pc, #112]	; (8002870 <etharp_find_entry+0x124>)
 80027fe:	6832      	ldr	r2, [r6, #0]
 8002800:	fb03 1304 	mla	r3, r3, r4, r1
 8002804:	605a      	str	r2, [r3, #4]
  arp_table[i].ctime = 0;
 8002806:	2318      	movs	r3, #24
 8002808:	4a19      	ldr	r2, [pc, #100]	; (8002870 <etharp_find_entry+0x124>)
  return (s16_t)i;
 800280a:	4620      	mov	r0, r4
  arp_table[i].ctime = 0;
 800280c:	fb03 2a04 	mla	sl, r3, r4, r2
 8002810:	2300      	movs	r3, #0
  arp_table[i].netif = netif;
 8002812:	f8ca 7008 	str.w	r7, [sl, #8]
  arp_table[i].ctime = 0;
 8002816:	f8aa 3012 	strh.w	r3, [sl, #18]
  return (s16_t)i;
 800281a:	e7bc      	b.n	8002796 <etharp_find_entry+0x4a>
          if (arp_table[i].ctime >= age_pending) {
 800281c:	9a01      	ldr	r2, [sp, #4]
 800281e:	4591      	cmp	r9, r2
 8002820:	d3bf      	bcc.n	80027a2 <etharp_find_entry+0x56>
 8002822:	f8cd 9004 	str.w	r9, [sp, #4]
 8002826:	4680      	mov	r8, r0
 8002828:	e7bb      	b.n	80027a2 <etharp_find_entry+0x56>
          if (arp_table[i].ctime >= age_stable) {
 800282a:	45d9      	cmp	r9, fp
 800282c:	d3b9      	bcc.n	80027a2 <etharp_find_entry+0x56>
 800282e:	46cb      	mov	fp, r9
 8002830:	4605      	mov	r5, r0
 8002832:	e7b6      	b.n	80027a2 <etharp_find_entry+0x56>
 8002834:	4604      	mov	r4, r0
 8002836:	e7b4      	b.n	80027a2 <etharp_find_entry+0x56>
    } else if (old_pending < ARP_TABLE_SIZE) {
 8002838:	f1b8 0f0a 	cmp.w	r8, #10
 800283c:	d104      	bne.n	8002848 <etharp_find_entry+0xfc>
    } else if (old_queue < ARP_TABLE_SIZE) {
 800283e:	f1bc 0f0a 	cmp.w	ip, #10
 8002842:	d003      	beq.n	800284c <etharp_find_entry+0x100>
 8002844:	4665      	mov	r5, ip
 8002846:	e7c6      	b.n	80027d6 <etharp_find_entry+0x8a>
 8002848:	4645      	mov	r5, r8
 800284a:	e7c4      	b.n	80027d6 <etharp_find_entry+0x8a>
    return (s16_t)ERR_MEM;
 800284c:	f04f 30ff 	mov.w	r0, #4294967295
 8002850:	e7a1      	b.n	8002796 <etharp_find_entry+0x4a>
      if (state == ETHARP_STATE_PENDING) {
 8002852:	f1b9 0f01 	cmp.w	r9, #1
 8002856:	f8b3 9012 	ldrh.w	r9, [r3, #18]
 800285a:	d1e6      	bne.n	800282a <etharp_find_entry+0xde>
        if (arp_table[i].q != NULL) {
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	2a00      	cmp	r2, #0
 8002860:	d0dc      	beq.n	800281c <etharp_find_entry+0xd0>
          if (arp_table[i].ctime >= age_queue) {
 8002862:	9a00      	ldr	r2, [sp, #0]
 8002864:	4591      	cmp	r9, r2
 8002866:	d39c      	bcc.n	80027a2 <etharp_find_entry+0x56>
 8002868:	f8cd 9000 	str.w	r9, [sp]
 800286c:	4684      	mov	ip, r0
 800286e:	e798      	b.n	80027a2 <etharp_find_entry+0x56>
 8002870:	200004d4 	.word	0x200004d4
 8002874:	0800b0f4 	.word	0x0800b0f4
 8002878:	0800b12b 	.word	0x0800b12b
 800287c:	0800b013 	.word	0x0800b013
 8002880:	0800b142 	.word	0x0800b142

08002884 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8002884:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8002888:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800288a:	4689      	mov	r9, r1
 800288c:	4692      	mov	sl, r2
 800288e:	4698      	mov	r8, r3
  struct pbuf *p;
  err_t result = ERR_OK;
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8002890:	4607      	mov	r7, r0
 8002892:	b930      	cbnz	r0, 80028a2 <etharp_raw+0x1e>
 8002894:	4b2d      	ldr	r3, [pc, #180]	; (800294c <etharp_raw+0xc8>)
 8002896:	f240 4257 	movw	r2, #1111	; 0x457
 800289a:	492d      	ldr	r1, [pc, #180]	; (8002950 <etharp_raw+0xcc>)
 800289c:	482d      	ldr	r0, [pc, #180]	; (8002954 <etharp_raw+0xd0>)
 800289e:	f006 fce7 	bl	8009270 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80028a2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80028a6:	211c      	movs	r1, #28
 80028a8:	200e      	movs	r0, #14
 80028aa:	f001 fe6f 	bl	800458c <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80028ae:	4606      	mov	r6, r0
 80028b0:	2800      	cmp	r0, #0
 80028b2:	d047      	beq.n	8002944 <etharp_raw+0xc0>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80028b4:	8943      	ldrh	r3, [r0, #10]
 80028b6:	2b1b      	cmp	r3, #27
 80028b8:	d806      	bhi.n	80028c8 <etharp_raw+0x44>
 80028ba:	4b24      	ldr	r3, [pc, #144]	; (800294c <etharp_raw+0xc8>)
 80028bc:	f240 4263 	movw	r2, #1123	; 0x463
 80028c0:	4925      	ldr	r1, [pc, #148]	; (8002958 <etharp_raw+0xd4>)
 80028c2:	4824      	ldr	r0, [pc, #144]	; (8002954 <etharp_raw+0xd0>)
 80028c4:	f006 fcd4 	bl	8009270 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80028c8:	6874      	ldr	r4, [r6, #4]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80028ca:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 80028ce:	f7ff fef7 	bl	80026c0 <lwip_htons>
 80028d2:	80e0      	strh	r0, [r4, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80028d4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80028d8:	2b06      	cmp	r3, #6
 80028da:	d006      	beq.n	80028ea <etharp_raw+0x66>
 80028dc:	4b1b      	ldr	r3, [pc, #108]	; (800294c <etharp_raw+0xc8>)
 80028de:	f240 426a 	movw	r2, #1130	; 0x46a
 80028e2:	491e      	ldr	r1, [pc, #120]	; (800295c <etharp_raw+0xd8>)
 80028e4:	481b      	ldr	r0, [pc, #108]	; (8002954 <etharp_raw+0xd0>)
 80028e6:	f006 fcc3 	bl	8009270 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80028ea:	f8d8 3000 	ldr.w	r3, [r8]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80028ee:	464a      	mov	r2, r9
 80028f0:	4631      	mov	r1, r6
 80028f2:	4638      	mov	r0, r7
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80028f4:	60a3      	str	r3, [r4, #8]
 80028f6:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 80028fa:	81a3      	strh	r3, [r4, #12]
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80028fc:	682b      	ldr	r3, [r5, #0]
 80028fe:	f8c4 3012 	str.w	r3, [r4, #18]
 8002902:	88ab      	ldrh	r3, [r5, #4]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8002904:	2500      	movs	r5, #0
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8002906:	82e3      	strh	r3, [r4, #22]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8002908:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f8c4 300e 	str.w	r3, [r4, #14]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8002910:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002912:	681b      	ldr	r3, [r3, #0]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8002914:	7025      	strb	r5, [r4, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8002916:	61a3      	str	r3, [r4, #24]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8002918:	2301      	movs	r3, #1
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800291a:	70e5      	strb	r5, [r4, #3]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800291c:	7063      	strb	r3, [r4, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800291e:	2308      	movs	r3, #8
 8002920:	70a3      	strb	r3, [r4, #2]
  hdr->hwlen = ETH_HWADDR_LEN;
 8002922:	2306      	movs	r3, #6
 8002924:	7123      	strb	r3, [r4, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8002926:	2304      	movs	r3, #4
 8002928:	7163      	strb	r3, [r4, #5]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800292a:	f640 0306 	movw	r3, #2054	; 0x806
 800292e:	9300      	str	r3, [sp, #0]
 8002930:	4653      	mov	r3, sl
 8002932:	f005 ff5f 	bl	80087f4 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8002936:	4630      	mov	r0, r6
 8002938:	f001 fdc6 	bl	80044c8 <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
 800293c:	4628      	mov	r0, r5
}
 800293e:	b002      	add	sp, #8
 8002940:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return ERR_MEM;
 8002944:	f04f 30ff 	mov.w	r0, #4294967295
 8002948:	e7f9      	b.n	800293e <etharp_raw+0xba>
 800294a:	bf00      	nop
 800294c:	0800b0f4 	.word	0x0800b0f4
 8002950:	0800b22e 	.word	0x0800b22e
 8002954:	0800b013 	.word	0x0800b013
 8002958:	0800b23c 	.word	0x0800b23c
 800295c:	0800b26d 	.word	0x0800b26d

08002960 <etharp_cleanup_netif>:
{
 8002960:	b570      	push	{r4, r5, r6, lr}
 8002962:	4606      	mov	r6, r0
 8002964:	4d07      	ldr	r5, [pc, #28]	; (8002984 <etharp_cleanup_netif+0x24>)
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8002966:	2400      	movs	r4, #0
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8002968:	7d2b      	ldrb	r3, [r5, #20]
 800296a:	b12b      	cbz	r3, 8002978 <etharp_cleanup_netif+0x18>
 800296c:	68ab      	ldr	r3, [r5, #8]
 800296e:	42b3      	cmp	r3, r6
 8002970:	d102      	bne.n	8002978 <etharp_cleanup_netif+0x18>
      etharp_free_entry(i);
 8002972:	4620      	mov	r0, r4
 8002974:	f7ff fed6 	bl	8002724 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8002978:	3401      	adds	r4, #1
 800297a:	3518      	adds	r5, #24
 800297c:	2c0a      	cmp	r4, #10
 800297e:	d1f3      	bne.n	8002968 <etharp_cleanup_netif+0x8>
}
 8002980:	bd70      	pop	{r4, r5, r6, pc}
 8002982:	bf00      	nop
 8002984:	200004d4 	.word	0x200004d4

08002988 <etharp_input>:
{
 8002988:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800298c:	4680      	mov	r8, r0
 800298e:	b086      	sub	sp, #24
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8002990:	460c      	mov	r4, r1
 8002992:	b949      	cbnz	r1, 80029a8 <etharp_input+0x20>
 8002994:	4b46      	ldr	r3, [pc, #280]	; (8002ab0 <etharp_input+0x128>)
 8002996:	f240 228a 	movw	r2, #650	; 0x28a
 800299a:	4946      	ldr	r1, [pc, #280]	; (8002ab4 <etharp_input+0x12c>)
 800299c:	4846      	ldr	r0, [pc, #280]	; (8002ab8 <etharp_input+0x130>)
 800299e:	f006 fc67 	bl	8009270 <iprintf>
}
 80029a2:	b006      	add	sp, #24
 80029a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  hdr = (struct etharp_hdr *)p->payload;
 80029a8:	6845      	ldr	r5, [r0, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80029aa:	882b      	ldrh	r3, [r5, #0]
 80029ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029b0:	d108      	bne.n	80029c4 <etharp_input+0x3c>
 80029b2:	792b      	ldrb	r3, [r5, #4]
 80029b4:	2b06      	cmp	r3, #6
 80029b6:	d105      	bne.n	80029c4 <etharp_input+0x3c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80029b8:	796b      	ldrb	r3, [r5, #5]
 80029ba:	2b04      	cmp	r3, #4
 80029bc:	d102      	bne.n	80029c4 <etharp_input+0x3c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80029be:	886b      	ldrh	r3, [r5, #2]
 80029c0:	2b08      	cmp	r3, #8
 80029c2:	d003      	beq.n	80029cc <etharp_input+0x44>
  pbuf_free(p);
 80029c4:	4640      	mov	r0, r8
 80029c6:	f001 fd7f 	bl	80044c8 <pbuf_free>
 80029ca:	e7ea      	b.n	80029a2 <etharp_input+0x1a>
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80029cc:	f8d5 300e 	ldr.w	r3, [r5, #14]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80029d0:	684e      	ldr	r6, [r1, #4]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80029d2:	9305      	str	r3, [sp, #20]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80029d4:	69ab      	ldr	r3, [r5, #24]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80029d6:	b116      	cbz	r6, 80029de <etharp_input+0x56>
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80029d8:	1b9b      	subs	r3, r3, r6
 80029da:	425e      	negs	r6, r3
 80029dc:	415e      	adcs	r6, r3
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80029de:	2e00      	cmp	r6, #0
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80029e0:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80029e4:	f105 0708 	add.w	r7, r5, #8
 80029e8:	bf14      	ite	ne
 80029ea:	f04f 0a01 	movne.w	sl, #1
 80029ee:	f04f 0a02 	moveq.w	sl, #2
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80029f2:	2b06      	cmp	r3, #6
 80029f4:	d006      	beq.n	8002a04 <etharp_input+0x7c>
 80029f6:	4b2e      	ldr	r3, [pc, #184]	; (8002ab0 <etharp_input+0x128>)
 80029f8:	f240 12a9 	movw	r2, #425	; 0x1a9
 80029fc:	492f      	ldr	r1, [pc, #188]	; (8002abc <etharp_input+0x134>)
 80029fe:	482e      	ldr	r0, [pc, #184]	; (8002ab8 <etharp_input+0x130>)
 8002a00:	f006 fc36 	bl	8009270 <iprintf>
  if (ip4_addr_isany(ipaddr) ||
 8002a04:	9805      	ldr	r0, [sp, #20]
 8002a06:	2800      	cmp	r0, #0
 8002a08:	d03d      	beq.n	8002a86 <etharp_input+0xfe>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8002a0a:	4621      	mov	r1, r4
 8002a0c:	f000 fcb1 	bl	8003372 <ip4_addr_isbroadcast_u32>
  if (ip4_addr_isany(ipaddr) ||
 8002a10:	4681      	mov	r9, r0
 8002a12:	bbc0      	cbnz	r0, 8002a86 <etharp_input+0xfe>
      ip4_addr_ismulticast(ipaddr)) {
 8002a14:	9b05      	ldr	r3, [sp, #20]
 8002a16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8002a1a:	2be0      	cmp	r3, #224	; 0xe0
 8002a1c:	d033      	beq.n	8002a86 <etharp_input+0xfe>
  i = etharp_find_entry(ipaddr, flags, netif);
 8002a1e:	4622      	mov	r2, r4
 8002a20:	4651      	mov	r1, sl
 8002a22:	a805      	add	r0, sp, #20
 8002a24:	f7ff fe92 	bl	800274c <etharp_find_entry>
  if (i < 0) {
 8002a28:	2800      	cmp	r0, #0
 8002a2a:	db2c      	blt.n	8002a86 <etharp_input+0xfe>
    arp_table[i].state = ETHARP_STATE_STABLE;
 8002a2c:	2218      	movs	r2, #24
 8002a2e:	4b24      	ldr	r3, [pc, #144]	; (8002ac0 <etharp_input+0x138>)
 8002a30:	f04f 0c02 	mov.w	ip, #2
 8002a34:	fb02 f100 	mul.w	r1, r2, r0
 8002a38:	eb03 0e01 	add.w	lr, r3, r1
 8002a3c:	f88e c014 	strb.w	ip, [lr, #20]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8002a40:	f04f 0c0c 	mov.w	ip, #12
  arp_table[i].netif = netif;
 8002a44:	f8ce 4008 	str.w	r4, [lr, #8]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8002a48:	fb10 c202 	smlabb	r2, r0, r2, ip
 8002a4c:	6838      	ldr	r0, [r7, #0]
 8002a4e:	eb03 0c02 	add.w	ip, r3, r2
 8002a52:	5098      	str	r0, [r3, r2]
 8002a54:	88ba      	ldrh	r2, [r7, #4]
 8002a56:	f8ac 2004 	strh.w	r2, [ip, #4]
  if (arp_table[i].q != NULL) {
 8002a5a:	f853 a001 	ldr.w	sl, [r3, r1]
  arp_table[i].ctime = 0;
 8002a5e:	f8ae 9012 	strh.w	r9, [lr, #18]
  if (arp_table[i].q != NULL) {
 8002a62:	f1ba 0f00 	cmp.w	sl, #0
 8002a66:	d00e      	beq.n	8002a86 <etharp_input+0xfe>
    arp_table[i].q = NULL;
 8002a68:	f843 9001 	str.w	r9, [r3, r1]
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8002a6c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002a70:	f104 0222 	add.w	r2, r4, #34	; 0x22
 8002a74:	4651      	mov	r1, sl
 8002a76:	9300      	str	r3, [sp, #0]
 8002a78:	4620      	mov	r0, r4
 8002a7a:	463b      	mov	r3, r7
 8002a7c:	f005 feba 	bl	80087f4 <ethernet_output>
    pbuf_free(p);
 8002a80:	4650      	mov	r0, sl
 8002a82:	f001 fd21 	bl	80044c8 <pbuf_free>
  switch (hdr->opcode) {
 8002a86:	88eb      	ldrh	r3, [r5, #6]
 8002a88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a8c:	d19a      	bne.n	80029c4 <etharp_input+0x3c>
      if (for_us) {
 8002a8e:	2e00      	cmp	r6, #0
 8002a90:	d098      	beq.n	80029c4 <etharp_input+0x3c>
        etharp_raw(netif,
 8002a92:	2202      	movs	r2, #2
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8002a94:	f104 0322 	add.w	r3, r4, #34	; 0x22
        etharp_raw(netif,
 8002a98:	9701      	str	r7, [sp, #4]
 8002a9a:	4620      	mov	r0, r4
 8002a9c:	9203      	str	r2, [sp, #12]
 8002a9e:	aa05      	add	r2, sp, #20
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	9202      	str	r2, [sp, #8]
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8002aa4:	1d22      	adds	r2, r4, #4
        etharp_raw(netif,
 8002aa6:	9200      	str	r2, [sp, #0]
 8002aa8:	463a      	mov	r2, r7
 8002aaa:	f7ff feeb 	bl	8002884 <etharp_raw>
 8002aae:	e789      	b.n	80029c4 <etharp_input+0x3c>
 8002ab0:	0800b0f4 	.word	0x0800b0f4
 8002ab4:	0800b22e 	.word	0x0800b22e
 8002ab8:	0800b013 	.word	0x0800b013
 8002abc:	0800b18a 	.word	0x0800b18a
 8002ac0:	200004d4 	.word	0x200004d4

08002ac4 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8002ac4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002ac6:	4602      	mov	r2, r0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8002ac8:	f100 0322 	add.w	r3, r0, #34	; 0x22
 8002acc:	9102      	str	r1, [sp, #8]
 8002ace:	2401      	movs	r4, #1
 8002ad0:	4905      	ldr	r1, [pc, #20]	; (8002ae8 <etharp_request+0x24>)
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8002ad2:	3204      	adds	r2, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8002ad4:	9403      	str	r4, [sp, #12]
 8002ad6:	9101      	str	r1, [sp, #4]
 8002ad8:	4619      	mov	r1, r3
 8002ada:	9200      	str	r2, [sp, #0]
 8002adc:	4a03      	ldr	r2, [pc, #12]	; (8002aec <etharp_request+0x28>)
 8002ade:	f7ff fed1 	bl	8002884 <etharp_raw>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
}
 8002ae2:	b004      	add	sp, #16
 8002ae4:	bd10      	pop	{r4, pc}
 8002ae6:	bf00      	nop
 8002ae8:	0800cf7f 	.word	0x0800cf7f
 8002aec:	0800cf13 	.word	0x0800cf13

08002af0 <etharp_tmr>:
{
 8002af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002af2:	4c13      	ldr	r4, [pc, #76]	; (8002b40 <etharp_tmr+0x50>)
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8002af4:	2500      	movs	r5, #0
        arp_table[i].state = ETHARP_STATE_STABLE;
 8002af6:	2602      	movs	r6, #2
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8002af8:	2704      	movs	r7, #4
    u8_t state = arp_table[i].state;
 8002afa:	7c22      	ldrb	r2, [r4, #16]
    if (state != ETHARP_STATE_EMPTY
 8002afc:	b16a      	cbz	r2, 8002b1a <etharp_tmr+0x2a>
      arp_table[i].ctime++;
 8002afe:	89e3      	ldrh	r3, [r4, #14]
 8002b00:	3301      	adds	r3, #1
 8002b02:	b29b      	uxth	r3, r3
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8002b04:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
      arp_table[i].ctime++;
 8002b08:	81e3      	strh	r3, [r4, #14]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8002b0a:	d203      	bcs.n	8002b14 <etharp_tmr+0x24>
 8002b0c:	2a01      	cmp	r2, #1
 8002b0e:	d109      	bne.n	8002b24 <etharp_tmr+0x34>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8002b10:	2b04      	cmp	r3, #4
 8002b12:	d90b      	bls.n	8002b2c <etharp_tmr+0x3c>
        etharp_free_entry(i);
 8002b14:	4628      	mov	r0, r5
 8002b16:	f7ff fe05 	bl	8002724 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8002b1a:	3501      	adds	r5, #1
 8002b1c:	3418      	adds	r4, #24
 8002b1e:	2d0a      	cmp	r5, #10
 8002b20:	d1eb      	bne.n	8002afa <etharp_tmr+0xa>
 8002b22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8002b24:	2a03      	cmp	r2, #3
 8002b26:	d106      	bne.n	8002b36 <etharp_tmr+0x46>
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8002b28:	7427      	strb	r7, [r4, #16]
 8002b2a:	e7f6      	b.n	8002b1a <etharp_tmr+0x2a>
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8002b2c:	4621      	mov	r1, r4
 8002b2e:	6860      	ldr	r0, [r4, #4]
 8002b30:	f7ff ffc8 	bl	8002ac4 <etharp_request>
 8002b34:	e7f1      	b.n	8002b1a <etharp_tmr+0x2a>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8002b36:	2a04      	cmp	r2, #4
 8002b38:	d1ef      	bne.n	8002b1a <etharp_tmr+0x2a>
        arp_table[i].state = ETHARP_STATE_STABLE;
 8002b3a:	7426      	strb	r6, [r4, #16]
 8002b3c:	e7ed      	b.n	8002b1a <etharp_tmr+0x2a>
 8002b3e:	bf00      	nop
 8002b40:	200004d8 	.word	0x200004d8

08002b44 <etharp_output_to_arp_index>:
{
 8002b44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002b48:	4614      	mov	r4, r2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8002b4a:	4d27      	ldr	r5, [pc, #156]	; (8002be8 <etharp_output_to_arp_index+0xa4>)
 8002b4c:	2218      	movs	r2, #24
{
 8002b4e:	b085      	sub	sp, #20
 8002b50:	4606      	mov	r6, r0
 8002b52:	4688      	mov	r8, r1
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8002b54:	fb02 5204 	mla	r2, r2, r4, r5
 8002b58:	7d12      	ldrb	r2, [r2, #20]
 8002b5a:	2a01      	cmp	r2, #1
 8002b5c:	d806      	bhi.n	8002b6c <etharp_output_to_arp_index+0x28>
 8002b5e:	4b23      	ldr	r3, [pc, #140]	; (8002bec <etharp_output_to_arp_index+0xa8>)
 8002b60:	f240 22ef 	movw	r2, #751	; 0x2ef
 8002b64:	4922      	ldr	r1, [pc, #136]	; (8002bf0 <etharp_output_to_arp_index+0xac>)
 8002b66:	4823      	ldr	r0, [pc, #140]	; (8002bf4 <etharp_output_to_arp_index+0xb0>)
 8002b68:	f006 fb82 	bl	8009270 <iprintf>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8002b6c:	2118      	movs	r1, #24
 8002b6e:	f106 0722 	add.w	r7, r6, #34	; 0x22
 8002b72:	fb01 5904 	mla	r9, r1, r4, r5
 8002b76:	f899 3014 	ldrb.w	r3, [r9, #20]
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d10d      	bne.n	8002b9a <etharp_output_to_arp_index+0x56>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8002b7e:	f8b9 3012 	ldrh.w	r3, [r9, #18]
 8002b82:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8002b86:	d917      	bls.n	8002bb8 <etharp_output_to_arp_index+0x74>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8002b88:	4649      	mov	r1, r9
 8002b8a:	4630      	mov	r0, r6
 8002b8c:	3104      	adds	r1, #4
 8002b8e:	f7ff ff99 	bl	8002ac4 <etharp_request>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8002b92:	b910      	cbnz	r0, 8002b9a <etharp_output_to_arp_index+0x56>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8002b94:	2303      	movs	r3, #3
 8002b96:	f889 3014 	strb.w	r3, [r9, #20]
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8002b9a:	2318      	movs	r3, #24
 8002b9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ba0:	4641      	mov	r1, r8
 8002ba2:	4630      	mov	r0, r6
 8002ba4:	fb03 5304 	mla	r3, r3, r4, r5
 8002ba8:	9200      	str	r2, [sp, #0]
 8002baa:	463a      	mov	r2, r7
 8002bac:	330c      	adds	r3, #12
 8002bae:	f005 fe21 	bl	80087f4 <ethernet_output>
}
 8002bb2:	b005      	add	sp, #20
 8002bb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8002bb8:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8002bbc:	d3ed      	bcc.n	8002b9a <etharp_output_to_arp_index+0x56>
 8002bbe:	eb04 0344 	add.w	r3, r4, r4, lsl #1
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8002bc2:	2101      	movs	r1, #1
 8002bc4:	4630      	mov	r0, r6
 8002bc6:	00db      	lsls	r3, r3, #3
 8002bc8:	9103      	str	r1, [sp, #12]
 8002bca:	4639      	mov	r1, r7
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8002bcc:	f103 020c 	add.w	r2, r3, #12
 8002bd0:	3304      	adds	r3, #4
 8002bd2:	442b      	add	r3, r5
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8002bd4:	442a      	add	r2, r5
 8002bd6:	9302      	str	r3, [sp, #8]
 8002bd8:	4b07      	ldr	r3, [pc, #28]	; (8002bf8 <etharp_output_to_arp_index+0xb4>)
 8002bda:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8002bdc:	1d33      	adds	r3, r6, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8002bde:	9300      	str	r3, [sp, #0]
 8002be0:	463b      	mov	r3, r7
 8002be2:	f7ff fe4f 	bl	8002884 <etharp_raw>
 8002be6:	e7d4      	b.n	8002b92 <etharp_output_to_arp_index+0x4e>
 8002be8:	200004d4 	.word	0x200004d4
 8002bec:	0800b0f4 	.word	0x0800b0f4
 8002bf0:	0800b1ae 	.word	0x0800b1ae
 8002bf4:	0800b013 	.word	0x0800b013
 8002bf8:	0800cf7f 	.word	0x0800cf7f

08002bfc <etharp_query>:
{
 8002bfc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8002c00:	4689      	mov	r9, r1
 8002c02:	4607      	mov	r7, r0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8002c04:	4601      	mov	r1, r0
{
 8002c06:	4615      	mov	r5, r2
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8002c08:	f8d9 0000 	ldr.w	r0, [r9]
 8002c0c:	f000 fbb1 	bl	8003372 <ip4_addr_isbroadcast_u32>
 8002c10:	2800      	cmp	r0, #0
 8002c12:	d175      	bne.n	8002d00 <etharp_query+0x104>
      ip4_addr_ismulticast(ipaddr) ||
 8002c14:	f8d9 3000 	ldr.w	r3, [r9]
 8002c18:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8002c1c:	2ae0      	cmp	r2, #224	; 0xe0
 8002c1e:	d06f      	beq.n	8002d00 <etharp_query+0x104>
      ip4_addr_isany(ipaddr)) {
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d06d      	beq.n	8002d00 <etharp_query+0x104>
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8002c24:	463a      	mov	r2, r7
 8002c26:	2101      	movs	r1, #1
 8002c28:	4648      	mov	r0, r9
 8002c2a:	f7ff fd8f 	bl	800274c <etharp_find_entry>
  if (i_err < 0) {
 8002c2e:	1e04      	subs	r4, r0, #0
 8002c30:	da03      	bge.n	8002c3a <etharp_query+0x3e>
    return (err_t)i_err;
 8002c32:	b260      	sxtb	r0, r4
}
 8002c34:	b002      	add	sp, #8
 8002c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8002c3a:	2c7e      	cmp	r4, #126	; 0x7e
 8002c3c:	dd06      	ble.n	8002c4c <etharp_query+0x50>
 8002c3e:	4b3f      	ldr	r3, [pc, #252]	; (8002d3c <etharp_query+0x140>)
 8002c40:	f240 32c1 	movw	r2, #961	; 0x3c1
 8002c44:	493e      	ldr	r1, [pc, #248]	; (8002d40 <etharp_query+0x144>)
 8002c46:	483f      	ldr	r0, [pc, #252]	; (8002d44 <etharp_query+0x148>)
 8002c48:	f006 fb12 	bl	8009270 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8002c4c:	b2e4      	uxtb	r4, r4
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8002c4e:	4e3e      	ldr	r6, [pc, #248]	; (8002d48 <etharp_query+0x14c>)
 8002c50:	2218      	movs	r2, #24
 8002c52:	fb02 6204 	mla	r2, r2, r4, r6
 8002c56:	7d13      	ldrb	r3, [r2, #20]
 8002c58:	bb83      	cbnz	r3, 8002cbc <etharp_query+0xc0>
    arp_table[i].state = ETHARP_STATE_PENDING;
 8002c5a:	f04f 0801 	mov.w	r8, #1
    arp_table[i].netif = netif;
 8002c5e:	6097      	str	r7, [r2, #8]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8002c60:	f882 8014 	strb.w	r8, [r2, #20]
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8002c64:	2318      	movs	r3, #24
 8002c66:	fb03 6304 	mla	r3, r3, r4, r6
 8002c6a:	7d1b      	ldrb	r3, [r3, #20]
 8002c6c:	b933      	cbnz	r3, 8002c7c <etharp_query+0x80>
 8002c6e:	4b33      	ldr	r3, [pc, #204]	; (8002d3c <etharp_query+0x140>)
 8002c70:	f240 32cf 	movw	r2, #975	; 0x3cf
 8002c74:	4935      	ldr	r1, [pc, #212]	; (8002d4c <etharp_query+0x150>)
 8002c76:	4833      	ldr	r0, [pc, #204]	; (8002d44 <etharp_query+0x148>)
 8002c78:	f006 fafa 	bl	8009270 <iprintf>
  if (is_new_entry || (q == NULL)) {
 8002c7c:	f1b8 0f00 	cmp.w	r8, #0
 8002c80:	d101      	bne.n	8002c86 <etharp_query+0x8a>
 8002c82:	2d00      	cmp	r5, #0
 8002c84:	d142      	bne.n	8002d0c <etharp_query+0x110>
    result = etharp_request(netif, ipaddr);
 8002c86:	4649      	mov	r1, r9
 8002c88:	4638      	mov	r0, r7
 8002c8a:	f7ff ff1b 	bl	8002ac4 <etharp_request>
    if (q == NULL) {
 8002c8e:	2d00      	cmp	r5, #0
 8002c90:	d0d0      	beq.n	8002c34 <etharp_query+0x38>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8002c92:	2318      	movs	r3, #24
 8002c94:	fb03 6204 	mla	r2, r3, r4, r6
 8002c98:	7d12      	ldrb	r2, [r2, #20]
 8002c9a:	2a01      	cmp	r2, #1
 8002c9c:	d911      	bls.n	8002cc2 <etharp_query+0xc6>
    ETHARP_SET_ADDRHINT(netif, i);
 8002c9e:	4a2c      	ldr	r2, [pc, #176]	; (8002d50 <etharp_query+0x154>)
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8002ca0:	fb03 6304 	mla	r3, r3, r4, r6
 8002ca4:	4629      	mov	r1, r5
 8002ca6:	4638      	mov	r0, r7
    ETHARP_SET_ADDRHINT(netif, i);
 8002ca8:	7014      	strb	r4, [r2, #0]
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8002caa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002cae:	330c      	adds	r3, #12
 8002cb0:	9200      	str	r2, [sp, #0]
 8002cb2:	f107 0222 	add.w	r2, r7, #34	; 0x22
 8002cb6:	f005 fd9d 	bl	80087f4 <ethernet_output>
 8002cba:	e7bb      	b.n	8002c34 <etharp_query+0x38>
  int is_new_entry = 0;
 8002cbc:	f04f 0800 	mov.w	r8, #0
 8002cc0:	e7d0      	b.n	8002c64 <etharp_query+0x68>
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8002cc2:	d1b7      	bne.n	8002c34 <etharp_query+0x38>
 8002cc4:	462f      	mov	r7, r5
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8002cc6:	f8df 8074 	ldr.w	r8, [pc, #116]	; 8002d3c <etharp_query+0x140>
 8002cca:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8002d54 <etharp_query+0x158>
 8002cce:	f8df a074 	ldr.w	sl, [pc, #116]	; 8002d44 <etharp_query+0x148>
    while (p) {
 8002cd2:	b91f      	cbnz	r7, 8002cdc <etharp_query+0xe0>
      pbuf_ref(p);
 8002cd4:	4628      	mov	r0, r5
 8002cd6:	f001 fd41 	bl	800475c <pbuf_ref>
 8002cda:	e021      	b.n	8002d20 <etharp_query+0x124>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8002cdc:	897a      	ldrh	r2, [r7, #10]
 8002cde:	893b      	ldrh	r3, [r7, #8]
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d108      	bne.n	8002cf6 <etharp_query+0xfa>
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	b133      	cbz	r3, 8002cf6 <etharp_query+0xfa>
 8002ce8:	4643      	mov	r3, r8
 8002cea:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8002cee:	4649      	mov	r1, r9
 8002cf0:	4650      	mov	r0, sl
 8002cf2:	f006 fabd 	bl	8009270 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8002cf6:	7b3b      	ldrb	r3, [r7, #12]
 8002cf8:	065b      	lsls	r3, r3, #25
 8002cfa:	d40a      	bmi.n	8002d12 <etharp_query+0x116>
      p = p->next;
 8002cfc:	683f      	ldr	r7, [r7, #0]
 8002cfe:	e7e8      	b.n	8002cd2 <etharp_query+0xd6>
    return ERR_ARG;
 8002d00:	f06f 000f 	mvn.w	r0, #15
 8002d04:	e796      	b.n	8002c34 <etharp_query+0x38>
      result = ERR_MEM;
 8002d06:	f04f 30ff 	mov.w	r0, #4294967295
 8002d0a:	e793      	b.n	8002c34 <etharp_query+0x38>
  err_t result = ERR_MEM;
 8002d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d10:	e7bf      	b.n	8002c92 <etharp_query+0x96>
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8002d12:	462a      	mov	r2, r5
 8002d14:	f44f 7120 	mov.w	r1, #640	; 0x280
 8002d18:	200e      	movs	r0, #14
 8002d1a:	f001 fe39 	bl	8004990 <pbuf_clone>
 8002d1e:	4605      	mov	r5, r0
    if (p != NULL) {
 8002d20:	2d00      	cmp	r5, #0
 8002d22:	d0f0      	beq.n	8002d06 <etharp_query+0x10a>
      if (arp_table[i].q != NULL) {
 8002d24:	2318      	movs	r3, #24
 8002d26:	fb03 f204 	mul.w	r2, r3, r4
 8002d2a:	461f      	mov	r7, r3
 8002d2c:	58b0      	ldr	r0, [r6, r2]
 8002d2e:	b108      	cbz	r0, 8002d34 <etharp_query+0x138>
        pbuf_free(arp_table[i].q);
 8002d30:	f001 fbca 	bl	80044c8 <pbuf_free>
      arp_table[i].q = p;
 8002d34:	437c      	muls	r4, r7
      result = ERR_OK;
 8002d36:	2000      	movs	r0, #0
      arp_table[i].q = p;
 8002d38:	5135      	str	r5, [r6, r4]
 8002d3a:	e77b      	b.n	8002c34 <etharp_query+0x38>
 8002d3c:	0800b0f4 	.word	0x0800b0f4
 8002d40:	0800b1de 	.word	0x0800b1de
 8002d44:	0800b013 	.word	0x0800b013
 8002d48:	200004d4 	.word	0x200004d4
 8002d4c:	0800b1ec 	.word	0x0800b1ec
 8002d50:	200005c4 	.word	0x200005c4
 8002d54:	0800b214 	.word	0x0800b214

08002d58 <etharp_output>:
{
 8002d58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d5a:	460e      	mov	r6, r1
 8002d5c:	b085      	sub	sp, #20
 8002d5e:	4615      	mov	r5, r2
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8002d60:	4604      	mov	r4, r0
 8002d62:	b930      	cbnz	r0, 8002d72 <etharp_output+0x1a>
 8002d64:	4b42      	ldr	r3, [pc, #264]	; (8002e70 <etharp_output+0x118>)
 8002d66:	f240 321e 	movw	r2, #798	; 0x31e
 8002d6a:	4942      	ldr	r1, [pc, #264]	; (8002e74 <etharp_output+0x11c>)
 8002d6c:	4842      	ldr	r0, [pc, #264]	; (8002e78 <etharp_output+0x120>)
 8002d6e:	f006 fa7f 	bl	8009270 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8002d72:	b936      	cbnz	r6, 8002d82 <etharp_output+0x2a>
 8002d74:	4b3e      	ldr	r3, [pc, #248]	; (8002e70 <etharp_output+0x118>)
 8002d76:	f240 321f 	movw	r2, #799	; 0x31f
 8002d7a:	4940      	ldr	r1, [pc, #256]	; (8002e7c <etharp_output+0x124>)
 8002d7c:	483e      	ldr	r0, [pc, #248]	; (8002e78 <etharp_output+0x120>)
 8002d7e:	f006 fa77 	bl	8009270 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8002d82:	b935      	cbnz	r5, 8002d92 <etharp_output+0x3a>
 8002d84:	4b3a      	ldr	r3, [pc, #232]	; (8002e70 <etharp_output+0x118>)
 8002d86:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002d8a:	493d      	ldr	r1, [pc, #244]	; (8002e80 <etharp_output+0x128>)
 8002d8c:	483a      	ldr	r0, [pc, #232]	; (8002e78 <etharp_output+0x120>)
 8002d8e:	f006 fa6f 	bl	8009270 <iprintf>
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8002d92:	4621      	mov	r1, r4
 8002d94:	6828      	ldr	r0, [r5, #0]
 8002d96:	f000 faec 	bl	8003372 <ip4_addr_isbroadcast_u32>
 8002d9a:	2800      	cmp	r0, #0
 8002d9c:	d162      	bne.n	8002e64 <etharp_output+0x10c>
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8002d9e:	682b      	ldr	r3, [r5, #0]
 8002da0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002da4:	2ae0      	cmp	r2, #224	; 0xe0
 8002da6:	d11d      	bne.n	8002de4 <etharp_output+0x8c>
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8002da8:	2301      	movs	r3, #1
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8002daa:	f88d 0009 	strb.w	r0, [sp, #9]
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8002dae:	f88d 3008 	strb.w	r3, [sp, #8]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8002db2:	235e      	movs	r3, #94	; 0x5e
 8002db4:	f88d 300a 	strb.w	r3, [sp, #10]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8002db8:	786b      	ldrb	r3, [r5, #1]
 8002dba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002dbe:	f88d 300b 	strb.w	r3, [sp, #11]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8002dc2:	78ab      	ldrb	r3, [r5, #2]
 8002dc4:	f88d 300c 	strb.w	r3, [sp, #12]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8002dc8:	78eb      	ldrb	r3, [r5, #3]
 8002dca:	f88d 300d 	strb.w	r3, [sp, #13]
    dest = &mcastaddr;
 8002dce:	ab02      	add	r3, sp, #8
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8002dd0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002dd4:	4631      	mov	r1, r6
 8002dd6:	4620      	mov	r0, r4
 8002dd8:	9200      	str	r2, [sp, #0]
 8002dda:	f104 0222 	add.w	r2, r4, #34	; 0x22
 8002dde:	f005 fd09 	bl	80087f4 <ethernet_output>
 8002de2:	e023      	b.n	8002e2c <etharp_output+0xd4>
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8002de4:	6862      	ldr	r2, [r4, #4]
 8002de6:	68a1      	ldr	r1, [r4, #8]
 8002de8:	405a      	eors	r2, r3
 8002dea:	420a      	tst	r2, r1
 8002dec:	d009      	beq.n	8002e02 <etharp_output+0xaa>
        !ip4_addr_islinklocal(ipaddr)) {
 8002dee:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8002df0:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d004      	beq.n	8002e02 <etharp_output+0xaa>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8002df8:	68e3      	ldr	r3, [r4, #12]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d034      	beq.n	8002e68 <etharp_output+0x110>
            dst_addr = netif_ip4_gw(netif);
 8002dfe:	f104 050c 	add.w	r5, r4, #12
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8002e02:	4920      	ldr	r1, [pc, #128]	; (8002e84 <etharp_output+0x12c>)
 8002e04:	2318      	movs	r3, #24
 8002e06:	4820      	ldr	r0, [pc, #128]	; (8002e88 <etharp_output+0x130>)
 8002e08:	780a      	ldrb	r2, [r1, #0]
 8002e0a:	468e      	mov	lr, r1
 8002e0c:	fb03 0302 	mla	r3, r3, r2, r0
 8002e10:	7d18      	ldrb	r0, [r3, #20]
 8002e12:	2801      	cmp	r0, #1
 8002e14:	d90c      	bls.n	8002e30 <etharp_output+0xd8>
 8002e16:	6899      	ldr	r1, [r3, #8]
 8002e18:	428c      	cmp	r4, r1
 8002e1a:	d109      	bne.n	8002e30 <etharp_output+0xd8>
            (arp_table[etharp_cached_entry].netif == netif) &&
 8002e1c:	6829      	ldr	r1, [r5, #0]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	4299      	cmp	r1, r3
 8002e22:	d105      	bne.n	8002e30 <etharp_output+0xd8>
        return etharp_output_to_arp_index(netif, q, i);
 8002e24:	4631      	mov	r1, r6
 8002e26:	4620      	mov	r0, r4
 8002e28:	f7ff fe8c 	bl	8002b44 <etharp_output_to_arp_index>
}
 8002e2c:	b005      	add	sp, #20
 8002e2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e30:	4b15      	ldr	r3, [pc, #84]	; (8002e88 <etharp_output+0x130>)
{
 8002e32:	2100      	movs	r1, #0
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8002e34:	7d18      	ldrb	r0, [r3, #20]
 8002e36:	b2ca      	uxtb	r2, r1
 8002e38:	2801      	cmp	r0, #1
 8002e3a:	d909      	bls.n	8002e50 <etharp_output+0xf8>
 8002e3c:	6898      	ldr	r0, [r3, #8]
 8002e3e:	4284      	cmp	r4, r0
 8002e40:	d106      	bne.n	8002e50 <etharp_output+0xf8>
          (arp_table[i].netif == netif) &&
 8002e42:	682f      	ldr	r7, [r5, #0]
 8002e44:	6858      	ldr	r0, [r3, #4]
 8002e46:	4287      	cmp	r7, r0
 8002e48:	d102      	bne.n	8002e50 <etharp_output+0xf8>
        ETHARP_SET_ADDRHINT(netif, i);
 8002e4a:	f88e 2000 	strb.w	r2, [lr]
 8002e4e:	e7e9      	b.n	8002e24 <etharp_output+0xcc>
 8002e50:	3101      	adds	r1, #1
 8002e52:	3318      	adds	r3, #24
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8002e54:	290a      	cmp	r1, #10
 8002e56:	d1ed      	bne.n	8002e34 <etharp_output+0xdc>
    return etharp_query(netif, dst_addr, q);
 8002e58:	4632      	mov	r2, r6
 8002e5a:	4629      	mov	r1, r5
 8002e5c:	4620      	mov	r0, r4
 8002e5e:	f7ff fecd 	bl	8002bfc <etharp_query>
 8002e62:	e7e3      	b.n	8002e2c <etharp_output+0xd4>
    dest = (const struct eth_addr *)&ethbroadcast;
 8002e64:	4b09      	ldr	r3, [pc, #36]	; (8002e8c <etharp_output+0x134>)
 8002e66:	e7b3      	b.n	8002dd0 <etharp_output+0x78>
            return ERR_RTE;
 8002e68:	f06f 0003 	mvn.w	r0, #3
 8002e6c:	e7de      	b.n	8002e2c <etharp_output+0xd4>
 8002e6e:	bf00      	nop
 8002e70:	0800b0f4 	.word	0x0800b0f4
 8002e74:	0800b22e 	.word	0x0800b22e
 8002e78:	0800b013 	.word	0x0800b013
 8002e7c:	0800bc31 	.word	0x0800bc31
 8002e80:	0800b16b 	.word	0x0800b16b
 8002e84:	200005c4 	.word	0x200005c4
 8002e88:	200004d4 	.word	0x200004d4
 8002e8c:	0800cf13 	.word	0x0800cf13

08002e90 <icmp_send_response.isra.0>:
 *          p->payload pointing to the IP header
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
 8002e90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e92:	4604      	mov	r4, r0
 8002e94:	b087      	sub	sp, #28
 8002e96:	460f      	mov	r7, r1
 8002e98:	4616      	mov	r6, r2

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8002e9a:	2124      	movs	r1, #36	; 0x24
 8002e9c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8002ea0:	2022      	movs	r0, #34	; 0x22
 8002ea2:	f001 fb73 	bl	800458c <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 8002ea6:	4605      	mov	r5, r0
 8002ea8:	b3a0      	cbz	r0, 8002f14 <icmp_send_response.isra.0+0x84>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8002eaa:	8943      	ldrh	r3, [r0, #10]
 8002eac:	2b23      	cmp	r3, #35	; 0x23
 8002eae:	d806      	bhi.n	8002ebe <icmp_send_response.isra.0+0x2e>
 8002eb0:	4b19      	ldr	r3, [pc, #100]	; (8002f18 <icmp_send_response.isra.0+0x88>)
 8002eb2:	f240 1269 	movw	r2, #361	; 0x169
 8002eb6:	4919      	ldr	r1, [pc, #100]	; (8002f1c <icmp_send_response.isra.0+0x8c>)
 8002eb8:	4819      	ldr	r0, [pc, #100]	; (8002f20 <icmp_send_response.isra.0+0x90>)
 8002eba:	f006 f9d9 	bl	8009270 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8002ebe:	6822      	ldr	r2, [r4, #0]
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
  icmphdr->type = type;
  icmphdr->code = code;
  icmphdr->id = 0;
 8002ec0:	2300      	movs	r3, #0
  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8002ec2:	686c      	ldr	r4, [r5, #4]
  icmphdr->seqno = 0;

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8002ec4:	f102 001c 	add.w	r0, r2, #28
  icmphdr->id = 0;
 8002ec8:	7123      	strb	r3, [r4, #4]
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8002eca:	f104 0108 	add.w	r1, r4, #8
  icmphdr->id = 0;
 8002ece:	7163      	strb	r3, [r4, #5]
  icmphdr->seqno = 0;
 8002ed0:	71a3      	strb	r3, [r4, #6]
 8002ed2:	71e3      	strb	r3, [r4, #7]
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8002ed4:	4613      	mov	r3, r2
  icmphdr->type = type;
 8002ed6:	7027      	strb	r7, [r4, #0]
  icmphdr->code = code;
 8002ed8:	7066      	strb	r6, [r4, #1]
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8002eda:	f853 6b04 	ldr.w	r6, [r3], #4
 8002ede:	4283      	cmp	r3, r0
 8002ee0:	f841 6b04 	str.w	r6, [r1], #4
 8002ee4:	d1f9      	bne.n	8002eda <icmp_send_response.isra.0+0x4a>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8002ee6:	ae06      	add	r6, sp, #24
 8002ee8:	68d3      	ldr	r3, [r2, #12]
 8002eea:	f846 3d04 	str.w	r3, [r6, #-4]!
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8002eee:	4630      	mov	r0, r6
 8002ef0:	f000 f8d2 	bl	8003098 <ip4_route>
#endif
  if (netif != NULL) {
 8002ef4:	b158      	cbz	r0, 8002f0e <icmp_send_response.isra.0+0x7e>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8002ef6:	2100      	movs	r1, #0
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8002ef8:	2301      	movs	r3, #1
 8002efa:	4632      	mov	r2, r6
    icmphdr->chksum = 0;
 8002efc:	70a1      	strb	r1, [r4, #2]
 8002efe:	70e1      	strb	r1, [r4, #3]
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8002f00:	9002      	str	r0, [sp, #8]
 8002f02:	4628      	mov	r0, r5
 8002f04:	e88d 000a 	stmia.w	sp, {r1, r3}
 8002f08:	23ff      	movs	r3, #255	; 0xff
 8002f0a:	f000 fa21 	bl	8003350 <ip4_output_if>
  }
  pbuf_free(q);
 8002f0e:	4628      	mov	r0, r5
 8002f10:	f001 fada 	bl	80044c8 <pbuf_free>
}
 8002f14:	b007      	add	sp, #28
 8002f16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f18:	0800b315 	.word	0x0800b315
 8002f1c:	0800b34a 	.word	0x0800b34a
 8002f20:	0800b013 	.word	0x0800b013

08002f24 <icmp_input>:
{
 8002f24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  iphdr_in = ip4_current_header();
 8002f28:	4f43      	ldr	r7, [pc, #268]	; (8003038 <icmp_input+0x114>)
{
 8002f2a:	b085      	sub	sp, #20
 8002f2c:	4604      	mov	r4, r0
 8002f2e:	4688      	mov	r8, r1
  iphdr_in = ip4_current_header();
 8002f30:	f8d7 9008 	ldr.w	r9, [r7, #8]
  hlen = IPH_HL_BYTES(iphdr_in);
 8002f34:	f899 5000 	ldrb.w	r5, [r9]
 8002f38:	f005 050f 	and.w	r5, r5, #15
 8002f3c:	00ad      	lsls	r5, r5, #2
  if (hlen < IP_HLEN) {
 8002f3e:	2d13      	cmp	r5, #19
 8002f40:	d92e      	bls.n	8002fa0 <icmp_input+0x7c>
  if (p->len < sizeof(u16_t) * 2) {
 8002f42:	8943      	ldrh	r3, [r0, #10]
 8002f44:	2b03      	cmp	r3, #3
 8002f46:	d92b      	bls.n	8002fa0 <icmp_input+0x7c>
  type = *((u8_t *)p->payload);
 8002f48:	6843      	ldr	r3, [r0, #4]
  switch (type) {
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	2b08      	cmp	r3, #8
 8002f4e:	d127      	bne.n	8002fa0 <icmp_input+0x7c>
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8002f50:	6978      	ldr	r0, [r7, #20]
 8002f52:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8002f56:	2be0      	cmp	r3, #224	; 0xe0
 8002f58:	d022      	beq.n	8002fa0 <icmp_input+0x7c>
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8002f5a:	6839      	ldr	r1, [r7, #0]
 8002f5c:	f000 fa09 	bl	8003372 <ip4_addr_isbroadcast_u32>
 8002f60:	b9f0      	cbnz	r0, 8002fa0 <icmp_input+0x7c>
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8002f62:	8923      	ldrh	r3, [r4, #8]
 8002f64:	2b07      	cmp	r3, #7
 8002f66:	d91b      	bls.n	8002fa0 <icmp_input+0x7c>
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8002f68:	f105 060e 	add.w	r6, r5, #14
 8002f6c:	4620      	mov	r0, r4
 8002f6e:	4631      	mov	r1, r6
 8002f70:	f001 fa73 	bl	800445a <pbuf_add_header>
 8002f74:	2800      	cmp	r0, #0
 8002f76:	d052      	beq.n	800301e <icmp_input+0xfa>
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8002f78:	8923      	ldrh	r3, [r4, #8]
 8002f7a:	1959      	adds	r1, r3, r5
 8002f7c:	b289      	uxth	r1, r1
        if (alloc_len < p->tot_len) {
 8002f7e:	428b      	cmp	r3, r1
 8002f80:	d80e      	bhi.n	8002fa0 <icmp_input+0x7c>
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8002f82:	f44f 7220 	mov.w	r2, #640	; 0x280
 8002f86:	200e      	movs	r0, #14
 8002f88:	f001 fb00 	bl	800458c <pbuf_alloc>
        if (r == NULL) {
 8002f8c:	4606      	mov	r6, r0
 8002f8e:	b138      	cbz	r0, 8002fa0 <icmp_input+0x7c>
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8002f90:	8942      	ldrh	r2, [r0, #10]
 8002f92:	f105 0308 	add.w	r3, r5, #8
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d208      	bcs.n	8002fac <icmp_input+0x88>
          pbuf_free(r);
 8002f9a:	4630      	mov	r0, r6
 8002f9c:	f001 fa94 	bl	80044c8 <pbuf_free>
  pbuf_free(p);
 8002fa0:	4620      	mov	r0, r4
}
 8002fa2:	b005      	add	sp, #20
 8002fa4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  pbuf_free(p);
 8002fa8:	f001 ba8e 	b.w	80044c8 <pbuf_free>
        MEMCPY(r->payload, iphdr_in, hlen);
 8002fac:	4649      	mov	r1, r9
 8002fae:	462a      	mov	r2, r5
 8002fb0:	6840      	ldr	r0, [r0, #4]
 8002fb2:	f006 f94a 	bl	800924a <memcpy>
        if (pbuf_remove_header(r, hlen)) {
 8002fb6:	4629      	mov	r1, r5
 8002fb8:	4630      	mov	r0, r6
 8002fba:	f001 fa51 	bl	8004460 <pbuf_remove_header>
 8002fbe:	b130      	cbz	r0, 8002fce <icmp_input+0xaa>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8002fc0:	4b1e      	ldr	r3, [pc, #120]	; (800303c <icmp_input+0x118>)
 8002fc2:	22b6      	movs	r2, #182	; 0xb6
 8002fc4:	491e      	ldr	r1, [pc, #120]	; (8003040 <icmp_input+0x11c>)
 8002fc6:	481f      	ldr	r0, [pc, #124]	; (8003044 <icmp_input+0x120>)
 8002fc8:	f006 f952 	bl	8009270 <iprintf>
 8002fcc:	e7e5      	b.n	8002f9a <icmp_input+0x76>
        if (pbuf_copy(r, p) != ERR_OK) {
 8002fce:	4621      	mov	r1, r4
 8002fd0:	4630      	mov	r0, r6
 8002fd2:	f001 fc11 	bl	80047f8 <pbuf_copy>
 8002fd6:	2800      	cmp	r0, #0
 8002fd8:	d1df      	bne.n	8002f9a <icmp_input+0x76>
        pbuf_free(p);
 8002fda:	4620      	mov	r0, r4
 8002fdc:	4634      	mov	r4, r6
 8002fde:	f001 fa73 	bl	80044c8 <pbuf_free>
      if (pbuf_add_header(p, hlen)) {
 8002fe2:	4629      	mov	r1, r5
 8002fe4:	4620      	mov	r0, r4
      iecho = (struct icmp_echo_hdr *)p->payload;
 8002fe6:	6866      	ldr	r6, [r4, #4]
      if (pbuf_add_header(p, hlen)) {
 8002fe8:	f001 fa37 	bl	800445a <pbuf_add_header>
 8002fec:	4602      	mov	r2, r0
 8002fee:	2800      	cmp	r0, #0
 8002ff0:	d1d6      	bne.n	8002fa0 <icmp_input+0x7c>
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8002ff2:	6861      	ldr	r1, [r4, #4]
        ip4_addr_copy(iphdr->src, *src);
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	60cb      	str	r3, [r1, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	610b      	str	r3, [r1, #16]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8002ffc:	23ff      	movs	r3, #255	; 0xff
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8002ffe:	7030      	strb	r0, [r6, #0]
        iecho->chksum = 0;
 8003000:	70b0      	strb	r0, [r6, #2]
 8003002:	70f0      	strb	r0, [r6, #3]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8003004:	720b      	strb	r3, [r1, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8003006:	7288      	strb	r0, [r1, #10]
 8003008:	72c8      	strb	r0, [r1, #11]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800300a:	2101      	movs	r1, #1
 800300c:	9000      	str	r0, [sp, #0]
 800300e:	4620      	mov	r0, r4
 8003010:	9101      	str	r1, [sp, #4]
 8003012:	f8cd 8008 	str.w	r8, [sp, #8]
 8003016:	490c      	ldr	r1, [pc, #48]	; (8003048 <icmp_input+0x124>)
 8003018:	f000 f99a 	bl	8003350 <ip4_output_if>
 800301c:	e7c0      	b.n	8002fa0 <icmp_input+0x7c>
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800301e:	4631      	mov	r1, r6
 8003020:	4620      	mov	r0, r4
 8003022:	f001 fa1d 	bl	8004460 <pbuf_remove_header>
 8003026:	2800      	cmp	r0, #0
 8003028:	d0db      	beq.n	8002fe2 <icmp_input+0xbe>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800302a:	4b04      	ldr	r3, [pc, #16]	; (800303c <icmp_input+0x118>)
 800302c:	22c7      	movs	r2, #199	; 0xc7
 800302e:	4907      	ldr	r1, [pc, #28]	; (800304c <icmp_input+0x128>)
 8003030:	4804      	ldr	r0, [pc, #16]	; (8003044 <icmp_input+0x120>)
 8003032:	f006 f91d 	bl	8009270 <iprintf>
          goto icmperr;
 8003036:	e7b3      	b.n	8002fa0 <icmp_input+0x7c>
 8003038:	2000065c 	.word	0x2000065c
 800303c:	0800b315 	.word	0x0800b315
 8003040:	0800b2ae 	.word	0x0800b2ae
 8003044:	0800b013 	.word	0x0800b013
 8003048:	20000670 	.word	0x20000670
 800304c:	0800b2e3 	.word	0x0800b2e3

08003050 <icmp_dest_unreach>:
  icmp_send_response(p, ICMP_DUR, t);
 8003050:	460a      	mov	r2, r1
 8003052:	3004      	adds	r0, #4
 8003054:	2103      	movs	r1, #3
 8003056:	f7ff bf1b 	b.w	8002e90 <icmp_send_response.isra.0>

0800305a <icmp_time_exceeded>:
  icmp_send_response(p, ICMP_TE, t);
 800305a:	460a      	mov	r2, r1
 800305c:	3004      	adds	r0, #4
 800305e:	210b      	movs	r1, #11
 8003060:	f7ff bf16 	b.w	8002e90 <icmp_send_response.isra.0>

08003064 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8003064:	b508      	push	{r3, lr}
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8003066:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
{
 800306a:	4601      	mov	r1, r0
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800306c:	f013 0301 	ands.w	r3, r3, #1
 8003070:	d00b      	beq.n	800308a <ip4_input_accept+0x26>
 8003072:	6843      	ldr	r3, [r0, #4]
 8003074:	b14b      	cbz	r3, 800308a <ip4_input_accept+0x26>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8003076:	4a07      	ldr	r2, [pc, #28]	; (8003094 <ip4_input_accept+0x30>)
 8003078:	6950      	ldr	r0, [r2, #20]
 800307a:	4283      	cmp	r3, r0
 800307c:	d007      	beq.n	800308e <ip4_input_accept+0x2a>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800307e:	f000 f978 	bl	8003372 <ip4_addr_isbroadcast_u32>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8003082:	3000      	adds	r0, #0
 8003084:	bf18      	it	ne
 8003086:	2001      	movne	r0, #1
 8003088:	bd08      	pop	{r3, pc}
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800308a:	4618      	mov	r0, r3
 800308c:	bd08      	pop	{r3, pc}
      return 1;
 800308e:	2001      	movs	r0, #1
}
 8003090:	bd08      	pop	{r3, pc}
 8003092:	bf00      	nop
 8003094:	2000065c 	.word	0x2000065c

08003098 <ip4_route>:
  NETIF_FOREACH(netif) {
 8003098:	4b14      	ldr	r3, [pc, #80]	; (80030ec <ip4_route+0x54>)
{
 800309a:	b530      	push	{r4, r5, lr}
  NETIF_FOREACH(netif) {
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	b97b      	cbnz	r3, 80030c0 <ip4_route+0x28>
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80030a0:	4a13      	ldr	r2, [pc, #76]	; (80030f0 <ip4_route+0x58>)
 80030a2:	6812      	ldr	r2, [r2, #0]
 80030a4:	b1fa      	cbz	r2, 80030e6 <ip4_route+0x4e>
 80030a6:	f892 1029 	ldrb.w	r1, [r2, #41]	; 0x29
 80030aa:	f001 0105 	and.w	r1, r1, #5
 80030ae:	2905      	cmp	r1, #5
 80030b0:	d119      	bne.n	80030e6 <ip4_route+0x4e>
 80030b2:	6851      	ldr	r1, [r2, #4]
 80030b4:	b1b9      	cbz	r1, 80030e6 <ip4_route+0x4e>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80030b6:	7801      	ldrb	r1, [r0, #0]
 80030b8:	297f      	cmp	r1, #127	; 0x7f
 80030ba:	bf18      	it	ne
 80030bc:	4613      	movne	r3, r2
 80030be:	e012      	b.n	80030e6 <ip4_route+0x4e>
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80030c0:	f893 4029 	ldrb.w	r4, [r3, #41]	; 0x29
 80030c4:	f004 0205 	and.w	r2, r4, #5
 80030c8:	2a05      	cmp	r2, #5
 80030ca:	d1e7      	bne.n	800309c <ip4_route+0x4>
 80030cc:	685a      	ldr	r2, [r3, #4]
 80030ce:	2a00      	cmp	r2, #0
 80030d0:	d0e4      	beq.n	800309c <ip4_route+0x4>
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80030d2:	6801      	ldr	r1, [r0, #0]
 80030d4:	689d      	ldr	r5, [r3, #8]
 80030d6:	404a      	eors	r2, r1
 80030d8:	422a      	tst	r2, r5
 80030da:	d004      	beq.n	80030e6 <ip4_route+0x4e>
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80030dc:	07a2      	lsls	r2, r4, #30
 80030de:	d4dd      	bmi.n	800309c <ip4_route+0x4>
 80030e0:	68da      	ldr	r2, [r3, #12]
 80030e2:	4291      	cmp	r1, r2
 80030e4:	d1da      	bne.n	800309c <ip4_route+0x4>
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	bd30      	pop	{r4, r5, pc}
 80030ea:	bf00      	nop
 80030ec:	20003b88 	.word	0x20003b88
 80030f0:	20003b8c 	.word	0x20003b8c

080030f4 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80030f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80030f8:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
 80030fc:	4605      	mov	r5, r0
 80030fe:	460f      	mov	r7, r1
  if (IPH_V(iphdr) != 4) {
 8003100:	f898 9000 	ldrb.w	r9, [r8]
 8003104:	ea4f 1319 	mov.w	r3, r9, lsr #4
 8003108:	2b04      	cmp	r3, #4
 800310a:	d005      	beq.n	8003118 <ip4_input+0x24>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800310c:	4628      	mov	r0, r5
 800310e:	f001 f9db 	bl	80044c8 <pbuf_free>
  ip_data.current_ip_header_tot_len = 0;
  ip4_addr_set_any(ip4_current_src_addr());
  ip4_addr_set_any(ip4_current_dest_addr());

  return ERR_OK;
}
 8003112:	2000      	movs	r0, #0
 8003114:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8003118:	f8b8 0002 	ldrh.w	r0, [r8, #2]
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800311c:	f009 090f 	and.w	r9, r9, #15
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8003120:	f7ff face 	bl	80026c0 <lwip_htons>
  if (iphdr_len < p->tot_len) {
 8003124:	892b      	ldrh	r3, [r5, #8]
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8003126:	ea4f 0989 	mov.w	r9, r9, lsl #2
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800312a:	4604      	mov	r4, r0
  if (iphdr_len < p->tot_len) {
 800312c:	4283      	cmp	r3, r0
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800312e:	fa1f f689 	uxth.w	r6, r9
  if (iphdr_len < p->tot_len) {
 8003132:	d903      	bls.n	800313c <ip4_input+0x48>
    pbuf_realloc(p, iphdr_len);
 8003134:	4601      	mov	r1, r0
 8003136:	4628      	mov	r0, r5
 8003138:	f001 fab0 	bl	800469c <pbuf_realloc>
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800313c:	896b      	ldrh	r3, [r5, #10]
 800313e:	42b3      	cmp	r3, r6
 8003140:	d3e4      	bcc.n	800310c <ip4_input+0x18>
 8003142:	892b      	ldrh	r3, [r5, #8]
 8003144:	42a3      	cmp	r3, r4
 8003146:	d3e1      	bcc.n	800310c <ip4_input+0x18>
 8003148:	2e13      	cmp	r6, #19
 800314a:	d9df      	bls.n	800310c <ip4_input+0x18>
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800314c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8003150:	4c40      	ldr	r4, [pc, #256]	; (8003254 <ip4_input+0x160>)
 8003152:	6163      	str	r3, [r4, #20]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8003154:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8003158:	f8d8 200c 	ldr.w	r2, [r8, #12]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800315c:	2be0      	cmp	r3, #224	; 0xe0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800315e:	6122      	str	r2, [r4, #16]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8003160:	d13a      	bne.n	80031d8 <ip4_input+0xe4>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8003162:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8003166:	07db      	lsls	r3, r3, #31
 8003168:	d541      	bpl.n	80031ee <ip4_input+0xfa>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d03e      	beq.n	80031ee <ip4_input+0xfa>
      netif = NULL;
 8003170:	463e      	mov	r6, r7
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8003172:	4639      	mov	r1, r7
 8003174:	6920      	ldr	r0, [r4, #16]
 8003176:	f000 f8fc 	bl	8003372 <ip4_addr_isbroadcast_u32>
 800317a:	2800      	cmp	r0, #0
 800317c:	d1c6      	bne.n	800310c <ip4_input+0x18>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800317e:	6923      	ldr	r3, [r4, #16]
 8003180:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8003184:	2be0      	cmp	r3, #224	; 0xe0
 8003186:	d0c1      	beq.n	800310c <ip4_input+0x18>
  if (netif == NULL) {
 8003188:	2e00      	cmp	r6, #0
 800318a:	d0bf      	beq.n	800310c <ip4_input+0x18>
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800318c:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8003190:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003194:	b13b      	cbz	r3, 80031a6 <ip4_input+0xb2>
    p = ip4_reass(p);
 8003196:	4628      	mov	r0, r5
 8003198:	f000 fa1a 	bl	80035d0 <ip4_reass>
    if (p == NULL) {
 800319c:	4605      	mov	r5, r0
 800319e:	2800      	cmp	r0, #0
 80031a0:	d0b7      	beq.n	8003112 <ip4_input+0x1e>
    iphdr = (const struct ip_hdr *)p->payload;
 80031a2:	f8d0 8004 	ldr.w	r8, [r0, #4]
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80031a6:	4649      	mov	r1, r9
 80031a8:	4628      	mov	r0, r5
  ip_data.current_ip4_header = iphdr;
 80031aa:	e884 01c0 	stmia.w	r4, {r6, r7, r8}
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80031ae:	f898 3000 	ldrb.w	r3, [r8]
 80031b2:	f003 030f 	and.w	r3, r3, #15
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	81a3      	strh	r3, [r4, #12]
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80031ba:	f001 f951 	bl	8004460 <pbuf_remove_header>
    switch (IPH_PROTO(iphdr)) {
 80031be:	f898 3009 	ldrb.w	r3, [r8, #9]
 80031c2:	2b06      	cmp	r3, #6
 80031c4:	d02b      	beq.n	800321e <ip4_input+0x12a>
 80031c6:	2b11      	cmp	r3, #17
 80031c8:	d01d      	beq.n	8003206 <ip4_input+0x112>
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d12c      	bne.n	8003228 <ip4_input+0x134>
        icmp_input(p, inp);
 80031ce:	4639      	mov	r1, r7
 80031d0:	4628      	mov	r0, r5
 80031d2:	f7ff fea7 	bl	8002f24 <icmp_input>
        break;
 80031d6:	e01a      	b.n	800320e <ip4_input+0x11a>
    if (ip4_input_accept(inp)) {
 80031d8:	4638      	mov	r0, r7
 80031da:	f7ff ff43 	bl	8003064 <ip4_input_accept>
 80031de:	2800      	cmp	r0, #0
 80031e0:	d1c6      	bne.n	8003170 <ip4_input+0x7c>
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80031e2:	7d23      	ldrb	r3, [r4, #20]
 80031e4:	2b7f      	cmp	r3, #127	; 0x7f
 80031e6:	d002      	beq.n	80031ee <ip4_input+0xfa>
        NETIF_FOREACH(netif) {
 80031e8:	4b1b      	ldr	r3, [pc, #108]	; (8003258 <ip4_input+0x164>)
 80031ea:	681e      	ldr	r6, [r3, #0]
 80031ec:	b90e      	cbnz	r6, 80031f2 <ip4_input+0xfe>
      netif = NULL;
 80031ee:	2600      	movs	r6, #0
 80031f0:	e7bf      	b.n	8003172 <ip4_input+0x7e>
          if (netif == inp) {
 80031f2:	42be      	cmp	r6, r7
 80031f4:	d101      	bne.n	80031fa <ip4_input+0x106>
        NETIF_FOREACH(netif) {
 80031f6:	6836      	ldr	r6, [r6, #0]
 80031f8:	e7f8      	b.n	80031ec <ip4_input+0xf8>
          if (ip4_input_accept(netif)) {
 80031fa:	4630      	mov	r0, r6
 80031fc:	f7ff ff32 	bl	8003064 <ip4_input_accept>
 8003200:	2800      	cmp	r0, #0
 8003202:	d0f8      	beq.n	80031f6 <ip4_input+0x102>
 8003204:	e7b5      	b.n	8003172 <ip4_input+0x7e>
        udp_input(p, inp);
 8003206:	4639      	mov	r1, r7
 8003208:	4628      	mov	r0, r5
 800320a:	f005 f9b9 	bl	8008580 <udp_input>
  ip_data.current_netif = NULL;
 800320e:	2300      	movs	r3, #0
 8003210:	6023      	str	r3, [r4, #0]
  ip_data.current_input_netif = NULL;
 8003212:	6063      	str	r3, [r4, #4]
  ip_data.current_ip4_header = NULL;
 8003214:	60a3      	str	r3, [r4, #8]
  ip_data.current_ip_header_tot_len = 0;
 8003216:	81a3      	strh	r3, [r4, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8003218:	6123      	str	r3, [r4, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800321a:	6163      	str	r3, [r4, #20]
  return ERR_OK;
 800321c:	e779      	b.n	8003112 <ip4_input+0x1e>
        tcp_input(p, inp);
 800321e:	4639      	mov	r1, r7
 8003220:	4628      	mov	r0, r5
 8003222:	f003 f9df 	bl	80065e4 <tcp_input>
        break;
 8003226:	e7f2      	b.n	800320e <ip4_input+0x11a>
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8003228:	4631      	mov	r1, r6
 800322a:	6960      	ldr	r0, [r4, #20]
 800322c:	f000 f8a1 	bl	8003372 <ip4_addr_isbroadcast_u32>
 8003230:	b960      	cbnz	r0, 800324c <ip4_input+0x158>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8003232:	6963      	ldr	r3, [r4, #20]
 8003234:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8003238:	2be0      	cmp	r3, #224	; 0xe0
 800323a:	d007      	beq.n	800324c <ip4_input+0x158>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800323c:	4649      	mov	r1, r9
 800323e:	4628      	mov	r0, r5
 8003240:	f001 f93a 	bl	80044b8 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8003244:	2102      	movs	r1, #2
 8003246:	4628      	mov	r0, r5
 8003248:	f7ff ff02 	bl	8003050 <icmp_dest_unreach>
        pbuf_free(p);
 800324c:	4628      	mov	r0, r5
 800324e:	f001 f93b 	bl	80044c8 <pbuf_free>
        break;
 8003252:	e7dc      	b.n	800320e <ip4_input+0x11a>
 8003254:	2000065c 	.word	0x2000065c
 8003258:	20003b88 	.word	0x20003b88

0800325c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800325c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8003260:	461f      	mov	r7, r3
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8003262:	7b83      	ldrb	r3, [r0, #14]
{
 8003264:	4605      	mov	r5, r0
 8003266:	468a      	mov	sl, r1
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8003268:	2b01      	cmp	r3, #1
{
 800326a:	4616      	mov	r6, r2
 800326c:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8003270:	d006      	beq.n	8003280 <ip4_output_if_src+0x24>
 8003272:	4b31      	ldr	r3, [pc, #196]	; (8003338 <ip4_output_if_src+0xdc>)
 8003274:	f44f 7255 	mov.w	r2, #852	; 0x354
 8003278:	4930      	ldr	r1, [pc, #192]	; (800333c <ip4_output_if_src+0xe0>)
 800327a:	4831      	ldr	r0, [pc, #196]	; (8003340 <ip4_output_if_src+0xe4>)
 800327c:	f005 fff8 	bl	8009270 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8003280:	2e00      	cmp	r6, #0
 8003282:	d049      	beq.n	8003318 <ip4_output_if_src+0xbc>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8003284:	2114      	movs	r1, #20
 8003286:	4628      	mov	r0, r5
 8003288:	f001 f8e7 	bl	800445a <pbuf_add_header>
 800328c:	b120      	cbz	r0, 8003298 <ip4_output_if_src+0x3c>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800328e:	f06f 0001 	mvn.w	r0, #1
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
}
 8003292:	b002      	add	sp, #8
 8003294:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8003298:	896b      	ldrh	r3, [r5, #10]
    iphdr = (struct ip_hdr *)p->payload;
 800329a:	686c      	ldr	r4, [r5, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800329c:	2b13      	cmp	r3, #19
 800329e:	d806      	bhi.n	80032ae <ip4_output_if_src+0x52>
 80032a0:	4b25      	ldr	r3, [pc, #148]	; (8003338 <ip4_output_if_src+0xdc>)
 80032a2:	f240 3289 	movw	r2, #905	; 0x389
 80032a6:	4927      	ldr	r1, [pc, #156]	; (8003344 <ip4_output_if_src+0xe8>)
 80032a8:	4825      	ldr	r0, [pc, #148]	; (8003340 <ip4_output_if_src+0xe4>)
 80032aa:	f005 ffe1 	bl	8009270 <iprintf>
    IPH_PROTO_SET(iphdr, proto);
 80032ae:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    IPH_TTL_SET(iphdr, ttl);
 80032b2:	7227      	strb	r7, [r4, #8]
    IPH_OFFSET_SET(iphdr, 0);
 80032b4:	2700      	movs	r7, #0
    IPH_PROTO_SET(iphdr, proto);
 80032b6:	7263      	strb	r3, [r4, #9]
    ip4_addr_copy(iphdr->dest, *dest);
 80032b8:	6833      	ldr	r3, [r6, #0]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80032ba:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800334c <ip4_output_if_src+0xf0>
    ip4_addr_copy(iphdr->dest, *dest);
 80032be:	6123      	str	r3, [r4, #16]
    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80032c0:	2345      	movs	r3, #69	; 0x45
 80032c2:	7023      	strb	r3, [r4, #0]
    IPH_TOS_SET(iphdr, tos);
 80032c4:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 80032c8:	7063      	strb	r3, [r4, #1]
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80032ca:	8928      	ldrh	r0, [r5, #8]
 80032cc:	f7ff f9f8 	bl	80026c0 <lwip_htons>
    IPH_OFFSET_SET(iphdr, 0);
 80032d0:	71a7      	strb	r7, [r4, #6]
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80032d2:	8060      	strh	r0, [r4, #2]
    IPH_OFFSET_SET(iphdr, 0);
 80032d4:	71e7      	strb	r7, [r4, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80032d6:	f8b9 0000 	ldrh.w	r0, [r9]
 80032da:	f7ff f9f1 	bl	80026c0 <lwip_htons>
    ++ip_id;
 80032de:	f8b9 3000 	ldrh.w	r3, [r9]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80032e2:	80a0      	strh	r0, [r4, #4]
    ++ip_id;
 80032e4:	3301      	adds	r3, #1
 80032e6:	f8a9 3000 	strh.w	r3, [r9]
    if (src == NULL) {
 80032ea:	f1ba 0f00 	cmp.w	sl, #0
 80032ee:	d110      	bne.n	8003312 <ip4_output_if_src+0xb6>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80032f0:	4b15      	ldr	r3, [pc, #84]	; (8003348 <ip4_output_if_src+0xec>)
 80032f2:	681b      	ldr	r3, [r3, #0]
      ip4_addr_copy(iphdr->src, *src);
 80032f4:	60e3      	str	r3, [r4, #12]
    IPH_CHKSUM_SET(iphdr, 0);
 80032f6:	72a7      	strb	r7, [r4, #10]
 80032f8:	72e7      	strb	r7, [r4, #11]
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80032fa:	f8b8 3020 	ldrh.w	r3, [r8, #32]
 80032fe:	b1a3      	cbz	r3, 800332a <ip4_output_if_src+0xce>
 8003300:	892a      	ldrh	r2, [r5, #8]
 8003302:	429a      	cmp	r2, r3
 8003304:	d911      	bls.n	800332a <ip4_output_if_src+0xce>
    return ip4_frag(p, netif, dest);
 8003306:	4632      	mov	r2, r6
 8003308:	4641      	mov	r1, r8
 800330a:	4628      	mov	r0, r5
 800330c:	f000 fb36 	bl	800397c <ip4_frag>
 8003310:	e7bf      	b.n	8003292 <ip4_output_if_src+0x36>
      ip4_addr_copy(iphdr->src, *src);
 8003312:	f8da 3000 	ldr.w	r3, [sl]
 8003316:	e7ed      	b.n	80032f4 <ip4_output_if_src+0x98>
    if (p->len < IP_HLEN) {
 8003318:	896b      	ldrh	r3, [r5, #10]
 800331a:	2b13      	cmp	r3, #19
 800331c:	d9b7      	bls.n	800328e <ip4_output_if_src+0x32>
    ip4_addr_copy(dest_addr, iphdr->dest);
 800331e:	686b      	ldr	r3, [r5, #4]
 8003320:	ae02      	add	r6, sp, #8
 8003322:	691b      	ldr	r3, [r3, #16]
 8003324:	f846 3d04 	str.w	r3, [r6, #-4]!
 8003328:	e7e7      	b.n	80032fa <ip4_output_if_src+0x9e>
  return netif->output(netif, p, dest);
 800332a:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800332e:	4632      	mov	r2, r6
 8003330:	4629      	mov	r1, r5
 8003332:	4640      	mov	r0, r8
 8003334:	4798      	blx	r3
 8003336:	e7ac      	b.n	8003292 <ip4_output_if_src+0x36>
 8003338:	0800b376 	.word	0x0800b376
 800333c:	0800b3aa 	.word	0x0800b3aa
 8003340:	0800b013 	.word	0x0800b013
 8003344:	0800b3b6 	.word	0x0800b3b6
 8003348:	0800b3e4 	.word	0x0800b3e4
 800334c:	200005c6 	.word	0x200005c6

08003350 <ip4_output_if>:
{
 8003350:	b4f0      	push	{r4, r5, r6, r7}
 8003352:	9c06      	ldr	r4, [sp, #24]
 8003354:	f89d 5010 	ldrb.w	r5, [sp, #16]
 8003358:	f89d 6014 	ldrb.w	r6, [sp, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800335c:	b11a      	cbz	r2, 8003366 <ip4_output_if+0x16>
    if (ip4_addr_isany(src)) {
 800335e:	b109      	cbz	r1, 8003364 <ip4_output_if+0x14>
 8003360:	680f      	ldr	r7, [r1, #0]
 8003362:	b907      	cbnz	r7, 8003366 <ip4_output_if+0x16>
      src_used = netif_ip4_addr(netif);
 8003364:	1d21      	adds	r1, r4, #4
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8003366:	9406      	str	r4, [sp, #24]
 8003368:	9605      	str	r6, [sp, #20]
 800336a:	9504      	str	r5, [sp, #16]
}
 800336c:	bcf0      	pop	{r4, r5, r6, r7}
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800336e:	f7ff bf75 	b.w	800325c <ip4_output_if_src>

08003372 <ip4_addr_isbroadcast_u32>:
{
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8003372:	1e43      	subs	r3, r0, #1
 8003374:	3303      	adds	r3, #3
 8003376:	d811      	bhi.n	800339c <ip4_addr_isbroadcast_u32+0x2a>
      (addr == IPADDR_ANY)) {
    return 1;
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8003378:	f891 3029 	ldrb.w	r3, [r1, #41]	; 0x29
 800337c:	f013 0302 	ands.w	r3, r3, #2
 8003380:	d00e      	beq.n	80033a0 <ip4_addr_isbroadcast_u32+0x2e>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8003382:	684a      	ldr	r2, [r1, #4]
 8003384:	4290      	cmp	r0, r2
 8003386:	d00b      	beq.n	80033a0 <ip4_addr_isbroadcast_u32+0x2e>
    return 0;
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8003388:	688b      	ldr	r3, [r1, #8]
 800338a:	4042      	eors	r2, r0
 800338c:	421a      	tst	r2, r3
 800338e:	d107      	bne.n	80033a0 <ip4_addr_isbroadcast_u32+0x2e>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8003390:	43db      	mvns	r3, r3
 8003392:	4383      	bics	r3, r0
    return 1;
 8003394:	bf0c      	ite	eq
 8003396:	2001      	moveq	r0, #1
 8003398:	2000      	movne	r0, #0
 800339a:	4770      	bx	lr
 800339c:	2001      	movs	r0, #1
 800339e:	4770      	bx	lr
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
 80033a0:	2000      	movs	r0, #0
  }
}
 80033a2:	4770      	bx	lr

080033a4 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80033a4:	b538      	push	{r3, r4, r5, lr}
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80033a6:	4b0c      	ldr	r3, [pc, #48]	; (80033d8 <ip_reass_dequeue_datagram+0x34>)
{
 80033a8:	4604      	mov	r4, r0
 80033aa:	460d      	mov	r5, r1
  if (reassdatagrams == ipr) {
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	4282      	cmp	r2, r0
 80033b0:	d107      	bne.n	80033c2 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80033b2:	6802      	ldr	r2, [r0, #0]
 80033b4:	601a      	str	r2, [r3, #0]
    LWIP_ASSERT("sanity check linked list", prev != NULL);
    prev->next = ipr->next;
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80033b6:	4621      	mov	r1, r4
 80033b8:	2004      	movs	r0, #4
}
 80033ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  memp_free(MEMP_REASSDATA, ipr);
 80033be:	f000 be41 	b.w	8004044 <memp_free>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80033c2:	b931      	cbnz	r1, 80033d2 <ip_reass_dequeue_datagram+0x2e>
 80033c4:	4b05      	ldr	r3, [pc, #20]	; (80033dc <ip_reass_dequeue_datagram+0x38>)
 80033c6:	f240 1245 	movw	r2, #325	; 0x145
 80033ca:	4905      	ldr	r1, [pc, #20]	; (80033e0 <ip_reass_dequeue_datagram+0x3c>)
 80033cc:	4805      	ldr	r0, [pc, #20]	; (80033e4 <ip_reass_dequeue_datagram+0x40>)
 80033ce:	f005 ff4f 	bl	8009270 <iprintf>
    prev->next = ipr->next;
 80033d2:	6823      	ldr	r3, [r4, #0]
 80033d4:	602b      	str	r3, [r5, #0]
 80033d6:	e7ee      	b.n	80033b6 <ip_reass_dequeue_datagram+0x12>
 80033d8:	200005cc 	.word	0x200005cc
 80033dc:	0800b4f1 	.word	0x0800b4f1
 80033e0:	0800b52a 	.word	0x0800b52a
 80033e4:	0800b013 	.word	0x0800b013

080033e8 <ip_reass_free_complete_datagram>:
  LWIP_ASSERT("prev != ipr", prev != ipr);
 80033e8:	4281      	cmp	r1, r0
{
 80033ea:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033ee:	4605      	mov	r5, r0
 80033f0:	460f      	mov	r7, r1
  LWIP_ASSERT("prev != ipr", prev != ipr);
 80033f2:	d105      	bne.n	8003400 <ip_reass_free_complete_datagram+0x18>
 80033f4:	4b2f      	ldr	r3, [pc, #188]	; (80034b4 <ip_reass_free_complete_datagram+0xcc>)
 80033f6:	22ab      	movs	r2, #171	; 0xab
 80033f8:	492f      	ldr	r1, [pc, #188]	; (80034b8 <ip_reass_free_complete_datagram+0xd0>)
 80033fa:	4830      	ldr	r0, [pc, #192]	; (80034bc <ip_reass_free_complete_datagram+0xd4>)
 80033fc:	f005 ff38 	bl	8009270 <iprintf>
  if (prev != NULL) {
 8003400:	b147      	cbz	r7, 8003414 <ip_reass_free_complete_datagram+0x2c>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	429d      	cmp	r5, r3
 8003406:	d005      	beq.n	8003414 <ip_reass_free_complete_datagram+0x2c>
 8003408:	4b2a      	ldr	r3, [pc, #168]	; (80034b4 <ip_reass_free_complete_datagram+0xcc>)
 800340a:	22ad      	movs	r2, #173	; 0xad
 800340c:	492c      	ldr	r1, [pc, #176]	; (80034c0 <ip_reass_free_complete_datagram+0xd8>)
 800340e:	482b      	ldr	r0, [pc, #172]	; (80034bc <ip_reass_free_complete_datagram+0xd4>)
 8003410:	f005 ff2e 	bl	8009270 <iprintf>
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8003414:	686e      	ldr	r6, [r5, #4]
 8003416:	6873      	ldr	r3, [r6, #4]
  if (iprh->start == 0) {
 8003418:	889a      	ldrh	r2, [r3, #4]
 800341a:	bb92      	cbnz	r2, 8003482 <ip_reass_free_complete_datagram+0x9a>
    ipr->p = iprh->next_pbuf;
 800341c:	681a      	ldr	r2, [r3, #0]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800341e:	f105 011c 	add.w	r1, r5, #28
    ipr->p = iprh->next_pbuf;
 8003422:	606a      	str	r2, [r5, #4]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8003424:	f105 0208 	add.w	r2, r5, #8
 8003428:	f852 0b04 	ldr.w	r0, [r2], #4
 800342c:	428a      	cmp	r2, r1
 800342e:	f843 0b04 	str.w	r0, [r3], #4
 8003432:	d1f9      	bne.n	8003428 <ip_reass_free_complete_datagram+0x40>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8003434:	2101      	movs	r1, #1
 8003436:	4630      	mov	r0, r6
 8003438:	f7ff fe0f 	bl	800305a <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800343c:	4630      	mov	r0, r6
 800343e:	f001 f985 	bl	800474c <pbuf_clen>
 8003442:	4604      	mov	r4, r0
    pbuf_free(p);
 8003444:	4630      	mov	r0, r6
 8003446:	f001 f83f 	bl	80044c8 <pbuf_free>
  p = ipr->p;
 800344a:	686e      	ldr	r6, [r5, #4]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800344c:	f8df 8064 	ldr.w	r8, [pc, #100]	; 80034b4 <ip_reass_free_complete_datagram+0xcc>
 8003450:	f8df 9078 	ldr.w	r9, [pc, #120]	; 80034cc <ip_reass_free_complete_datagram+0xe4>
 8003454:	f8df a064 	ldr.w	sl, [pc, #100]	; 80034bc <ip_reass_free_complete_datagram+0xd4>
  while (p != NULL) {
 8003458:	b9ae      	cbnz	r6, 8003486 <ip_reass_free_complete_datagram+0x9e>
  ip_reass_dequeue_datagram(ipr, prev);
 800345a:	4628      	mov	r0, r5
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800345c:	4d19      	ldr	r5, [pc, #100]	; (80034c4 <ip_reass_free_complete_datagram+0xdc>)
  ip_reass_dequeue_datagram(ipr, prev);
 800345e:	4639      	mov	r1, r7
 8003460:	f7ff ffa0 	bl	80033a4 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8003464:	882b      	ldrh	r3, [r5, #0]
 8003466:	42a3      	cmp	r3, r4
 8003468:	d205      	bcs.n	8003476 <ip_reass_free_complete_datagram+0x8e>
 800346a:	4b12      	ldr	r3, [pc, #72]	; (80034b4 <ip_reass_free_complete_datagram+0xcc>)
 800346c:	22d2      	movs	r2, #210	; 0xd2
 800346e:	4916      	ldr	r1, [pc, #88]	; (80034c8 <ip_reass_free_complete_datagram+0xe0>)
 8003470:	4812      	ldr	r0, [pc, #72]	; (80034bc <ip_reass_free_complete_datagram+0xd4>)
 8003472:	f005 fefd 	bl	8009270 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8003476:	882b      	ldrh	r3, [r5, #0]
}
 8003478:	4620      	mov	r0, r4
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800347a:	1b1b      	subs	r3, r3, r4
 800347c:	802b      	strh	r3, [r5, #0]
}
 800347e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  u16_t pbufs_freed = 0;
 8003482:	2400      	movs	r4, #0
 8003484:	e7e1      	b.n	800344a <ip_reass_free_complete_datagram+0x62>
    iprh = (struct ip_reass_helper *)p->payload;
 8003486:	6873      	ldr	r3, [r6, #4]
    clen = pbuf_clen(pcur);
 8003488:	4630      	mov	r0, r6
    p = iprh->next_pbuf;
 800348a:	f8d3 b000 	ldr.w	fp, [r3]
    clen = pbuf_clen(pcur);
 800348e:	f001 f95d 	bl	800474c <pbuf_clen>
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8003492:	4404      	add	r4, r0
 8003494:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 8003498:	db05      	blt.n	80034a6 <ip_reass_free_complete_datagram+0xbe>
 800349a:	4643      	mov	r3, r8
 800349c:	22cc      	movs	r2, #204	; 0xcc
 800349e:	4649      	mov	r1, r9
 80034a0:	4650      	mov	r0, sl
 80034a2:	f005 fee5 	bl	8009270 <iprintf>
    pbuf_free(pcur);
 80034a6:	4630      	mov	r0, r6
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80034a8:	b2a4      	uxth	r4, r4
    pbuf_free(pcur);
 80034aa:	f001 f80d 	bl	80044c8 <pbuf_free>
    p = iprh->next_pbuf;
 80034ae:	465e      	mov	r6, fp
 80034b0:	e7d2      	b.n	8003458 <ip_reass_free_complete_datagram+0x70>
 80034b2:	bf00      	nop
 80034b4:	0800b4f1 	.word	0x0800b4f1
 80034b8:	0800b543 	.word	0x0800b543
 80034bc:	0800b013 	.word	0x0800b013
 80034c0:	0800b54f 	.word	0x0800b54f
 80034c4:	200005c8 	.word	0x200005c8
 80034c8:	0800b57e 	.word	0x0800b57e
 80034cc:	0800b561 	.word	0x0800b561

080034d0 <ip_reass_remove_oldest_datagram>:
{
 80034d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034d4:	4606      	mov	r6, r0
 80034d6:	460f      	mov	r7, r1
  int pbufs_freed = 0, pbufs_freed_current;
 80034d8:	2500      	movs	r5, #0
    r = reassdatagrams;
 80034da:	f8df 8068 	ldr.w	r8, [pc, #104]	; 8003544 <ip_reass_remove_oldest_datagram+0x74>
    other_datagrams = 0;
 80034de:	2400      	movs	r4, #0
    r = reassdatagrams;
 80034e0:	f8d8 3000 	ldr.w	r3, [r8]
    oldest_prev = NULL;
 80034e4:	4621      	mov	r1, r4
    prev = NULL;
 80034e6:	46a6      	mov	lr, r4
    oldest = NULL;
 80034e8:	4620      	mov	r0, r4
    while (r != NULL) {
 80034ea:	b953      	cbnz	r3, 8003502 <ip_reass_remove_oldest_datagram+0x32>
    if (oldest != NULL) {
 80034ec:	b110      	cbz	r0, 80034f4 <ip_reass_remove_oldest_datagram+0x24>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80034ee:	f7ff ff7b 	bl	80033e8 <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
 80034f2:	4405      	add	r5, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80034f4:	42bd      	cmp	r5, r7
 80034f6:	da01      	bge.n	80034fc <ip_reass_remove_oldest_datagram+0x2c>
 80034f8:	2c01      	cmp	r4, #1
 80034fa:	dcf0      	bgt.n	80034de <ip_reass_remove_oldest_datagram+0xe>
}
 80034fc:	4628      	mov	r0, r5
 80034fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8003502:	f8d6 c00c 	ldr.w	ip, [r6, #12]
 8003506:	695a      	ldr	r2, [r3, #20]
 8003508:	4562      	cmp	r2, ip
 800350a:	d109      	bne.n	8003520 <ip_reass_remove_oldest_datagram+0x50>
 800350c:	f8d6 c010 	ldr.w	ip, [r6, #16]
 8003510:	699a      	ldr	r2, [r3, #24]
 8003512:	4562      	cmp	r2, ip
 8003514:	d104      	bne.n	8003520 <ip_reass_remove_oldest_datagram+0x50>
 8003516:	f8b3 c00c 	ldrh.w	ip, [r3, #12]
 800351a:	88b2      	ldrh	r2, [r6, #4]
 800351c:	4594      	cmp	ip, r2
 800351e:	d008      	beq.n	8003532 <ip_reass_remove_oldest_datagram+0x62>
        other_datagrams++;
 8003520:	3401      	adds	r4, #1
        if (oldest == NULL) {
 8003522:	b160      	cbz	r0, 800353e <ip_reass_remove_oldest_datagram+0x6e>
        } else if (r->timer <= oldest->timer) {
 8003524:	7fc2      	ldrb	r2, [r0, #31]
 8003526:	f893 c01f 	ldrb.w	ip, [r3, #31]
          oldest_prev = prev;
 800352a:	4594      	cmp	ip, r2
 800352c:	bf9c      	itt	ls
 800352e:	4671      	movls	r1, lr
 8003530:	4618      	movls	r0, r3
      if (r->next != NULL) {
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	2a00      	cmp	r2, #0
 8003536:	bf18      	it	ne
 8003538:	469e      	movne	lr, r3
 800353a:	4613      	mov	r3, r2
 800353c:	e7d5      	b.n	80034ea <ip_reass_remove_oldest_datagram+0x1a>
          oldest_prev = prev;
 800353e:	4671      	mov	r1, lr
 8003540:	4618      	mov	r0, r3
 8003542:	e7f6      	b.n	8003532 <ip_reass_remove_oldest_datagram+0x62>
 8003544:	200005cc 	.word	0x200005cc

08003548 <ip_frag_free_pbuf_custom_ref>:
}

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8003548:	b510      	push	{r4, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 800354a:	4604      	mov	r4, r0
 800354c:	b930      	cbnz	r0, 800355c <ip_frag_free_pbuf_custom_ref+0x14>
 800354e:	4b06      	ldr	r3, [pc, #24]	; (8003568 <ip_frag_free_pbuf_custom_ref+0x20>)
 8003550:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8003554:	4905      	ldr	r1, [pc, #20]	; (800356c <ip_frag_free_pbuf_custom_ref+0x24>)
 8003556:	4806      	ldr	r0, [pc, #24]	; (8003570 <ip_frag_free_pbuf_custom_ref+0x28>)
 8003558:	f005 fe8a 	bl	8009270 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800355c:	4621      	mov	r1, r4
 800355e:	2005      	movs	r0, #5
}
 8003560:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_FRAG_PBUF, p);
 8003564:	f000 bd6e 	b.w	8004044 <memp_free>
 8003568:	0800b4f1 	.word	0x0800b4f1
 800356c:	0800bc19 	.word	0x0800bc19
 8003570:	0800b013 	.word	0x0800b013

08003574 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8003574:	b510      	push	{r4, lr}
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8003576:	4604      	mov	r4, r0
 8003578:	b930      	cbnz	r0, 8003588 <ipfrag_free_pbuf_custom+0x14>
 800357a:	4b08      	ldr	r3, [pc, #32]	; (800359c <ipfrag_free_pbuf_custom+0x28>)
 800357c:	f240 22ce 	movw	r2, #718	; 0x2ce
 8003580:	4907      	ldr	r1, [pc, #28]	; (80035a0 <ipfrag_free_pbuf_custom+0x2c>)
 8003582:	4808      	ldr	r0, [pc, #32]	; (80035a4 <ipfrag_free_pbuf_custom+0x30>)
 8003584:	f005 fe74 	bl	8009270 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
  if (pcr->original != NULL) {
 8003588:	6960      	ldr	r0, [r4, #20]
 800358a:	b108      	cbz	r0, 8003590 <ipfrag_free_pbuf_custom+0x1c>
    pbuf_free(pcr->original);
 800358c:	f000 ff9c 	bl	80044c8 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8003590:	4620      	mov	r0, r4
}
 8003592:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ip_frag_free_pbuf_custom_ref(pcr);
 8003596:	f7ff bfd7 	b.w	8003548 <ip_frag_free_pbuf_custom_ref>
 800359a:	bf00      	nop
 800359c:	0800b4f1 	.word	0x0800b4f1
 80035a0:	0800b5a0 	.word	0x0800b5a0
 80035a4:	0800b013 	.word	0x0800b013

080035a8 <ip_reass_tmr>:
{
 80035a8:	b538      	push	{r3, r4, r5, lr}
  r = reassdatagrams;
 80035aa:	4b08      	ldr	r3, [pc, #32]	; (80035cc <ip_reass_tmr+0x24>)
  struct ip_reassdata *r, *prev = NULL;
 80035ac:	2400      	movs	r4, #0
  r = reassdatagrams;
 80035ae:	6818      	ldr	r0, [r3, #0]
  while (r != NULL) {
 80035b0:	b900      	cbnz	r0, 80035b4 <ip_reass_tmr+0xc>
}
 80035b2:	bd38      	pop	{r3, r4, r5, pc}
    if (r->timer > 0) {
 80035b4:	7fc3      	ldrb	r3, [r0, #31]
 80035b6:	6805      	ldr	r5, [r0, #0]
 80035b8:	b123      	cbz	r3, 80035c4 <ip_reass_tmr+0x1c>
      r->timer--;
 80035ba:	3b01      	subs	r3, #1
 80035bc:	4604      	mov	r4, r0
 80035be:	77c3      	strb	r3, [r0, #31]
      r = r->next;
 80035c0:	4628      	mov	r0, r5
 80035c2:	e7f5      	b.n	80035b0 <ip_reass_tmr+0x8>
      ip_reass_free_complete_datagram(tmp, prev);
 80035c4:	4621      	mov	r1, r4
 80035c6:	f7ff ff0f 	bl	80033e8 <ip_reass_free_complete_datagram>
 80035ca:	e7f9      	b.n	80035c0 <ip_reass_tmr+0x18>
 80035cc:	200005cc 	.word	0x200005cc

080035d0 <ip4_reass>:
{
 80035d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  fraghdr = (struct ip_hdr *)p->payload;
 80035d4:	6845      	ldr	r5, [r0, #4]
{
 80035d6:	4680      	mov	r8, r0
  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80035d8:	782b      	ldrb	r3, [r5, #0]
 80035da:	f003 030f 	and.w	r3, r3, #15
 80035de:	2b05      	cmp	r3, #5
 80035e0:	f040 8099 	bne.w	8003716 <ip4_reass+0x146>
  offset = IPH_OFFSET_BYTES(fraghdr);
 80035e4:	88e8      	ldrh	r0, [r5, #6]
 80035e6:	f7ff f86b 	bl	80026c0 <lwip_htons>
 80035ea:	4607      	mov	r7, r0
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80035ec:	8868      	ldrh	r0, [r5, #2]
 80035ee:	f7ff f867 	bl	80026c0 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 80035f2:	782b      	ldrb	r3, [r5, #0]
 80035f4:	f003 030f 	and.w	r3, r3, #15
  if (hlen > len) {
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	4298      	cmp	r0, r3
 80035fc:	f0c0 808b 	bcc.w	8003716 <ip4_reass+0x146>
  len = (u16_t)(len - hlen);
 8003600:	1ac0      	subs	r0, r0, r3
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8003602:	4cb4      	ldr	r4, [pc, #720]	; (80038d4 <ip4_reass+0x304>)
  len = (u16_t)(len - hlen);
 8003604:	b283      	uxth	r3, r0
  clen = pbuf_clen(p);
 8003606:	4640      	mov	r0, r8
  len = (u16_t)(len - hlen);
 8003608:	9301      	str	r3, [sp, #4]
  clen = pbuf_clen(p);
 800360a:	f001 f89f 	bl	800474c <pbuf_clen>
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800360e:	8823      	ldrh	r3, [r4, #0]
  clen = pbuf_clen(p);
 8003610:	4682      	mov	sl, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8003612:	4403      	add	r3, r0
 8003614:	2b0a      	cmp	r3, #10
 8003616:	dc75      	bgt.n	8003704 <ip4_reass+0x134>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8003618:	4eaf      	ldr	r6, [pc, #700]	; (80038d8 <ip4_reass+0x308>)
 800361a:	6834      	ldr	r4, [r6, #0]
 800361c:	2c00      	cmp	r4, #0
 800361e:	d17f      	bne.n	8003720 <ip4_reass+0x150>
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8003620:	2004      	movs	r0, #4
 8003622:	f000 fcf3 	bl	800400c <memp_malloc>
  if (ipr == NULL) {
 8003626:	4604      	mov	r4, r0
 8003628:	b958      	cbnz	r0, 8003642 <ip4_reass+0x72>
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800362a:	4651      	mov	r1, sl
 800362c:	4628      	mov	r0, r5
 800362e:	f7ff ff4f 	bl	80034d0 <ip_reass_remove_oldest_datagram>
 8003632:	4582      	cmp	sl, r0
 8003634:	dc6f      	bgt.n	8003716 <ip4_reass+0x146>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8003636:	2004      	movs	r0, #4
 8003638:	f000 fce8 	bl	800400c <memp_malloc>
    if (ipr == NULL)
 800363c:	4604      	mov	r4, r0
 800363e:	2800      	cmp	r0, #0
 8003640:	d069      	beq.n	8003716 <ip4_reass+0x146>
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8003642:	2220      	movs	r2, #32
 8003644:	2100      	movs	r1, #0
 8003646:	4620      	mov	r0, r4
 8003648:	f005 fe0a 	bl	8009260 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800364c:	230f      	movs	r3, #15
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800364e:	f104 0208 	add.w	r2, r4, #8
 8003652:	f105 0114 	add.w	r1, r5, #20
  ipr->timer = IP_REASS_MAXAGE;
 8003656:	77e3      	strb	r3, [r4, #31]
  ipr->next = reassdatagrams;
 8003658:	6833      	ldr	r3, [r6, #0]
  reassdatagrams = ipr;
 800365a:	6034      	str	r4, [r6, #0]
  ipr->next = reassdatagrams;
 800365c:	6023      	str	r3, [r4, #0]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800365e:	462b      	mov	r3, r5
 8003660:	f853 0b04 	ldr.w	r0, [r3], #4
 8003664:	428b      	cmp	r3, r1
 8003666:	f842 0b04 	str.w	r0, [r2], #4
 800366a:	d1f9      	bne.n	8003660 <ip4_reass+0x90>
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800366c:	f8b5 b006 	ldrh.w	fp, [r5, #6]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8003670:	f3c7 070c 	ubfx	r7, r7, #0, #13
  if (is_last) {
 8003674:	f01b 0b20 	ands.w	fp, fp, #32
  offset = IPH_OFFSET_BYTES(fraghdr);
 8003678:	ea4f 07c7 	mov.w	r7, r7, lsl #3
  if (is_last) {
 800367c:	d10a      	bne.n	8003694 <ip4_reass+0xc4>
    u16_t datagram_len = (u16_t)(offset + len);
 800367e:	9b01      	ldr	r3, [sp, #4]
 8003680:	18fb      	adds	r3, r7, r3
 8003682:	b29b      	uxth	r3, r3
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8003684:	429f      	cmp	r7, r3
 8003686:	f200 8137 	bhi.w	80038f8 <ip4_reass+0x328>
 800368a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800368e:	4293      	cmp	r3, r2
 8003690:	f200 8132 	bhi.w	80038f8 <ip4_reass+0x328>
  fraghdr = (struct ip_hdr *)new_p->payload;
 8003694:	f8d8 5004 	ldr.w	r5, [r8, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8003698:	8868      	ldrh	r0, [r5, #2]
 800369a:	f7ff f811 	bl	80026c0 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 800369e:	782b      	ldrb	r3, [r5, #0]
 80036a0:	f003 030f 	and.w	r3, r3, #15
  if (hlen > len) {
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	4298      	cmp	r0, r3
 80036a8:	f0c0 8126 	bcc.w	80038f8 <ip4_reass+0x328>
  len = (u16_t)(len - hlen);
 80036ac:	1ac3      	subs	r3, r0, r3
  offset = IPH_OFFSET_BYTES(fraghdr);
 80036ae:	88e8      	ldrh	r0, [r5, #6]
  iprh->next_pbuf = NULL;
 80036b0:	2500      	movs	r5, #0
  len = (u16_t)(len - hlen);
 80036b2:	fa1f f983 	uxth.w	r9, r3
  offset = IPH_OFFSET_BYTES(fraghdr);
 80036b6:	f7ff f803 	bl	80026c0 <lwip_htons>
 80036ba:	f3c0 000c 	ubfx	r0, r0, #0, #13
  iprh = (struct ip_reass_helper *)new_p->payload;
 80036be:	f8d8 6004 	ldr.w	r6, [r8, #4]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80036c2:	00c0      	lsls	r0, r0, #3
  iprh->next_pbuf = NULL;
 80036c4:	7035      	strb	r5, [r6, #0]
  iprh->end = (u16_t)(offset + len);
 80036c6:	eb09 0300 	add.w	r3, r9, r0
  iprh->next_pbuf = NULL;
 80036ca:	7075      	strb	r5, [r6, #1]
 80036cc:	70b5      	strb	r5, [r6, #2]
  iprh->end = (u16_t)(offset + len);
 80036ce:	b29b      	uxth	r3, r3
  iprh->next_pbuf = NULL;
 80036d0:	70f5      	strb	r5, [r6, #3]
  iprh->start = offset;
 80036d2:	80b0      	strh	r0, [r6, #4]
  if (iprh->end < offset) {
 80036d4:	4298      	cmp	r0, r3
  iprh->end = (u16_t)(offset + len);
 80036d6:	80f3      	strh	r3, [r6, #6]
  if (iprh->end < offset) {
 80036d8:	f200 810e 	bhi.w	80038f8 <ip4_reass+0x328>
  for (q = ipr->p; q != NULL;) {
 80036dc:	f8d4 e004 	ldr.w	lr, [r4, #4]
  int valid = 1;
 80036e0:	f04f 0901 	mov.w	r9, #1
  for (q = ipr->p; q != NULL;) {
 80036e4:	4672      	mov	r2, lr
 80036e6:	bb52      	cbnz	r2, 800373e <ip4_reass+0x16e>
    if (iprh_prev != NULL) {
 80036e8:	2d00      	cmp	r5, #0
 80036ea:	f040 8093 	bne.w	8003814 <ip4_reass+0x244>
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80036ee:	f1be 0f00 	cmp.w	lr, #0
 80036f2:	d07d      	beq.n	80037f0 <ip4_reass+0x220>
 80036f4:	4b79      	ldr	r3, [pc, #484]	; (80038dc <ip4_reass+0x30c>)
 80036f6:	f240 12bf 	movw	r2, #447	; 0x1bf
 80036fa:	4979      	ldr	r1, [pc, #484]	; (80038e0 <ip4_reass+0x310>)
 80036fc:	4879      	ldr	r0, [pc, #484]	; (80038e4 <ip4_reass+0x314>)
 80036fe:	f005 fdb7 	bl	8009270 <iprintf>
 8003702:	e075      	b.n	80037f0 <ip4_reass+0x220>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8003704:	4601      	mov	r1, r0
 8003706:	4628      	mov	r0, r5
 8003708:	f7ff fee2 	bl	80034d0 <ip_reass_remove_oldest_datagram>
 800370c:	b118      	cbz	r0, 8003716 <ip4_reass+0x146>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800370e:	8823      	ldrh	r3, [r4, #0]
 8003710:	4453      	add	r3, sl
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8003712:	2b0a      	cmp	r3, #10
 8003714:	dd80      	ble.n	8003618 <ip4_reass+0x48>
  pbuf_free(p);
 8003716:	4640      	mov	r0, r8
 8003718:	f000 fed6 	bl	80044c8 <pbuf_free>
  return NULL;
 800371c:	2600      	movs	r6, #0
 800371e:	e0d5      	b.n	80038cc <ip4_reass+0x2fc>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8003720:	68eb      	ldr	r3, [r5, #12]
 8003722:	6962      	ldr	r2, [r4, #20]
 8003724:	429a      	cmp	r2, r3
 8003726:	d108      	bne.n	800373a <ip4_reass+0x16a>
 8003728:	692b      	ldr	r3, [r5, #16]
 800372a:	69a2      	ldr	r2, [r4, #24]
 800372c:	429a      	cmp	r2, r3
 800372e:	d104      	bne.n	800373a <ip4_reass+0x16a>
 8003730:	89a2      	ldrh	r2, [r4, #12]
 8003732:	88ab      	ldrh	r3, [r5, #4]
 8003734:	429a      	cmp	r2, r3
 8003736:	f000 80f3 	beq.w	8003920 <ip4_reass+0x350>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800373a:	6824      	ldr	r4, [r4, #0]
 800373c:	e76e      	b.n	800361c <ip4_reass+0x4c>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800373e:	f8d2 c004 	ldr.w	ip, [r2, #4]
    if (iprh->start < iprh_tmp->start) {
 8003742:	f8bc 1004 	ldrh.w	r1, [ip, #4]
 8003746:	4288      	cmp	r0, r1
 8003748:	d255      	bcs.n	80037f6 <ip4_reass+0x226>
      iprh->next_pbuf = q;
 800374a:	6032      	str	r2, [r6, #0]
      if (iprh_prev != NULL) {
 800374c:	2d00      	cmp	r5, #0
 800374e:	d04c      	beq.n	80037ea <ip4_reass+0x21a>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8003750:	88ea      	ldrh	r2, [r5, #6]
 8003752:	4290      	cmp	r0, r2
 8003754:	f0c0 80d0 	bcc.w	80038f8 <ip4_reass+0x328>
 8003758:	428b      	cmp	r3, r1
 800375a:	f200 80cd 	bhi.w	80038f8 <ip4_reass+0x328>
        if (iprh_prev->end != iprh->start) {
 800375e:	4290      	cmp	r0, r2
        iprh_prev->next_pbuf = new_p;
 8003760:	f8c5 8000 	str.w	r8, [r5]
      if (iprh_prev->end != iprh->start) {
 8003764:	f040 80fa 	bne.w	800395c <ip4_reass+0x38c>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8003768:	f1bb 0f00 	cmp.w	fp, #0
 800376c:	d004      	beq.n	8003778 <ip4_reass+0x1a8>
 800376e:	7fa3      	ldrb	r3, [r4, #30]
 8003770:	f013 0301 	ands.w	r3, r3, #1
 8003774:	f000 80f0 	beq.w	8003958 <ip4_reass+0x388>
    if (valid) {
 8003778:	f1b9 0f00 	cmp.w	r9, #0
 800377c:	d15a      	bne.n	8003834 <ip4_reass+0x264>
          q = iprh->next_pbuf;
 800377e:	f04f 0900 	mov.w	r9, #0
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8003782:	4d54      	ldr	r5, [pc, #336]	; (80038d4 <ip4_reass+0x304>)
 8003784:	882b      	ldrh	r3, [r5, #0]
 8003786:	449a      	add	sl, r3
 8003788:	f8a5 a000 	strh.w	sl, [r5]
  if (is_last) {
 800378c:	f1bb 0f00 	cmp.w	fp, #0
 8003790:	d106      	bne.n	80037a0 <ip4_reass+0x1d0>
    u16_t datagram_len = (u16_t)(offset + len);
 8003792:	9b01      	ldr	r3, [sp, #4]
 8003794:	441f      	add	r7, r3
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8003796:	7fa3      	ldrb	r3, [r4, #30]
 8003798:	f043 0301 	orr.w	r3, r3, #1
    ipr->datagram_len = datagram_len;
 800379c:	83a7      	strh	r7, [r4, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800379e:	77a3      	strb	r3, [r4, #30]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80037a0:	f1b9 0f01 	cmp.w	r9, #1
 80037a4:	d1ba      	bne.n	800371c <ip4_reass+0x14c>
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80037a6:	6863      	ldr	r3, [r4, #4]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80037a8:	f104 011c 	add.w	r1, r4, #28
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80037ac:	8ba0      	ldrh	r0, [r4, #28]
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80037ae:	685e      	ldr	r6, [r3, #4]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80037b0:	f104 0308 	add.w	r3, r4, #8
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80037b4:	3014      	adds	r0, #20
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80037b6:	6837      	ldr	r7, [r6, #0]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80037b8:	4632      	mov	r2, r6
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80037ba:	b280      	uxth	r0, r0
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80037bc:	f853 eb04 	ldr.w	lr, [r3], #4
 80037c0:	428b      	cmp	r3, r1
 80037c2:	f842 eb04 	str.w	lr, [r2], #4
 80037c6:	d1f9      	bne.n	80037bc <ip4_reass+0x1ec>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80037c8:	f7fe ff7a 	bl	80026c0 <lwip_htons>
    IPH_OFFSET_SET(fraghdr, 0);
 80037cc:	2300      	movs	r3, #0
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80037ce:	8070      	strh	r0, [r6, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80037d0:	71b3      	strb	r3, [r6, #6]
 80037d2:	71f3      	strb	r3, [r6, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80037d4:	72b3      	strb	r3, [r6, #10]
 80037d6:	72f3      	strb	r3, [r6, #11]
    p = ipr->p;
 80037d8:	6866      	ldr	r6, [r4, #4]
    while (r != NULL) {
 80037da:	2f00      	cmp	r7, #0
 80037dc:	d14f      	bne.n	800387e <ip4_reass+0x2ae>
    if (ipr == reassdatagrams) {
 80037de:	4b3e      	ldr	r3, [pc, #248]	; (80038d8 <ip4_reass+0x308>)
 80037e0:	6819      	ldr	r1, [r3, #0]
 80037e2:	428c      	cmp	r4, r1
 80037e4:	d15c      	bne.n	80038a0 <ip4_reass+0x2d0>
      ipr_prev = NULL;
 80037e6:	4639      	mov	r1, r7
 80037e8:	e05c      	b.n	80038a4 <ip4_reass+0x2d4>
        if (iprh->end > iprh_tmp->start) {
 80037ea:	428b      	cmp	r3, r1
 80037ec:	f200 8084 	bhi.w	80038f8 <ip4_reass+0x328>
      ipr->p = new_p;
 80037f0:	f8c4 8004 	str.w	r8, [r4, #4]
 80037f4:	e7b8      	b.n	8003768 <ip4_reass+0x198>
    } else if (iprh->start == iprh_tmp->start) {
 80037f6:	d07f      	beq.n	80038f8 <ip4_reass+0x328>
    } else if (iprh->start < iprh_tmp->end) {
 80037f8:	f8bc 2006 	ldrh.w	r2, [ip, #6]
 80037fc:	4282      	cmp	r2, r0
 80037fe:	d87b      	bhi.n	80038f8 <ip4_reass+0x328>
      if (iprh_prev != NULL) {
 8003800:	b125      	cbz	r5, 800380c <ip4_reass+0x23c>
        if (iprh_prev->end != iprh_tmp->start) {
 8003802:	88ea      	ldrh	r2, [r5, #6]
          valid = 0;
 8003804:	428a      	cmp	r2, r1
 8003806:	bf18      	it	ne
 8003808:	f04f 0900 	movne.w	r9, #0
    q = iprh_tmp->next_pbuf;
 800380c:	f8dc 2000 	ldr.w	r2, [ip]
 8003810:	4665      	mov	r5, ip
 8003812:	e768      	b.n	80036e6 <ip4_reass+0x116>
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8003814:	88eb      	ldrh	r3, [r5, #6]
 8003816:	4283      	cmp	r3, r0
 8003818:	d906      	bls.n	8003828 <ip4_reass+0x258>
 800381a:	4b30      	ldr	r3, [pc, #192]	; (80038dc <ip4_reass+0x30c>)
 800381c:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8003820:	4931      	ldr	r1, [pc, #196]	; (80038e8 <ip4_reass+0x318>)
 8003822:	4830      	ldr	r0, [pc, #192]	; (80038e4 <ip4_reass+0x314>)
 8003824:	f005 fd24 	bl	8009270 <iprintf>
      iprh_prev->next_pbuf = new_p;
 8003828:	f8c5 8000 	str.w	r8, [r5]
      if (iprh_prev->end != iprh->start) {
 800382c:	88ea      	ldrh	r2, [r5, #6]
 800382e:	88b3      	ldrh	r3, [r6, #4]
 8003830:	429a      	cmp	r2, r3
 8003832:	e797      	b.n	8003764 <ip4_reass+0x194>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8003834:	6863      	ldr	r3, [r4, #4]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d0a1      	beq.n	800377e <ip4_reass+0x1ae>
 800383a:	6859      	ldr	r1, [r3, #4]
 800383c:	888b      	ldrh	r3, [r1, #4]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d19d      	bne.n	800377e <ip4_reass+0x1ae>
        q = iprh->next_pbuf;
 8003842:	6833      	ldr	r3, [r6, #0]
        while (q != NULL) {
 8003844:	b99b      	cbnz	r3, 800386e <ip4_reass+0x29e>
          LWIP_ASSERT("sanity check",
 8003846:	42b1      	cmp	r1, r6
 8003848:	d106      	bne.n	8003858 <ip4_reass+0x288>
 800384a:	4b24      	ldr	r3, [pc, #144]	; (80038dc <ip4_reass+0x30c>)
 800384c:	f240 12e1 	movw	r2, #481	; 0x1e1
 8003850:	4926      	ldr	r1, [pc, #152]	; (80038ec <ip4_reass+0x31c>)
 8003852:	4824      	ldr	r0, [pc, #144]	; (80038e4 <ip4_reass+0x314>)
 8003854:	f005 fd0c 	bl	8009270 <iprintf>
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8003858:	6833      	ldr	r3, [r6, #0]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d091      	beq.n	8003782 <ip4_reass+0x1b2>
 800385e:	4b1f      	ldr	r3, [pc, #124]	; (80038dc <ip4_reass+0x30c>)
 8003860:	f240 12e3 	movw	r2, #483	; 0x1e3
 8003864:	4922      	ldr	r1, [pc, #136]	; (80038f0 <ip4_reass+0x320>)
 8003866:	481f      	ldr	r0, [pc, #124]	; (80038e4 <ip4_reass+0x314>)
 8003868:	f005 fd02 	bl	8009270 <iprintf>
 800386c:	e789      	b.n	8003782 <ip4_reass+0x1b2>
          iprh = (struct ip_reass_helper *)q->payload;
 800386e:	685a      	ldr	r2, [r3, #4]
          if (iprh_prev->end != iprh->start) {
 8003870:	88f0      	ldrh	r0, [r6, #6]
 8003872:	8893      	ldrh	r3, [r2, #4]
 8003874:	4298      	cmp	r0, r3
 8003876:	d182      	bne.n	800377e <ip4_reass+0x1ae>
          q = iprh->next_pbuf;
 8003878:	6813      	ldr	r3, [r2, #0]
 800387a:	4616      	mov	r6, r2
 800387c:	e7e2      	b.n	8003844 <ip4_reass+0x274>
      iprh = (struct ip_reass_helper *)r->payload;
 800387e:	f8d7 8004 	ldr.w	r8, [r7, #4]
      pbuf_remove_header(r, IP_HLEN);
 8003882:	2114      	movs	r1, #20
 8003884:	4638      	mov	r0, r7
 8003886:	f000 fdeb 	bl	8004460 <pbuf_remove_header>
      pbuf_cat(p, r);
 800388a:	4639      	mov	r1, r7
 800388c:	4630      	mov	r0, r6
 800388e:	f000 ff79 	bl	8004784 <pbuf_cat>
      r = iprh->next_pbuf;
 8003892:	f8d8 7000 	ldr.w	r7, [r8]
 8003896:	e7a0      	b.n	80037da <ip4_reass+0x20a>
        if (ipr_prev->next == ipr) {
 8003898:	680b      	ldr	r3, [r1, #0]
 800389a:	429c      	cmp	r4, r3
 800389c:	d002      	beq.n	80038a4 <ip4_reass+0x2d4>
 800389e:	4619      	mov	r1, r3
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80038a0:	2900      	cmp	r1, #0
 80038a2:	d1f9      	bne.n	8003898 <ip4_reass+0x2c8>
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80038a4:	4620      	mov	r0, r4
 80038a6:	f7ff fd7d 	bl	80033a4 <ip_reass_dequeue_datagram>
    clen = pbuf_clen(p);
 80038aa:	4630      	mov	r0, r6
 80038ac:	f000 ff4e 	bl	800474c <pbuf_clen>
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80038b0:	882b      	ldrh	r3, [r5, #0]
    clen = pbuf_clen(p);
 80038b2:	4604      	mov	r4, r0
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80038b4:	4283      	cmp	r3, r0
 80038b6:	d206      	bcs.n	80038c6 <ip4_reass+0x2f6>
 80038b8:	4b08      	ldr	r3, [pc, #32]	; (80038dc <ip4_reass+0x30c>)
 80038ba:	f240 229b 	movw	r2, #667	; 0x29b
 80038be:	490d      	ldr	r1, [pc, #52]	; (80038f4 <ip4_reass+0x324>)
 80038c0:	4808      	ldr	r0, [pc, #32]	; (80038e4 <ip4_reass+0x314>)
 80038c2:	f005 fcd5 	bl	8009270 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80038c6:	8828      	ldrh	r0, [r5, #0]
 80038c8:	1b00      	subs	r0, r0, r4
 80038ca:	8028      	strh	r0, [r5, #0]
}
 80038cc:	4630      	mov	r0, r6
 80038ce:	b003      	add	sp, #12
 80038d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038d4:	200005c8 	.word	0x200005c8
 80038d8:	200005cc 	.word	0x200005cc
 80038dc:	0800b4f1 	.word	0x0800b4f1
 80038e0:	0800b450 	.word	0x0800b450
 80038e4:	0800b013 	.word	0x0800b013
 80038e8:	0800b432 	.word	0x0800b432
 80038ec:	0800b487 	.word	0x0800b487
 80038f0:	0800b494 	.word	0x0800b494
 80038f4:	0800b4b6 	.word	0x0800b4b6
  if (ipr->p == NULL) {
 80038f8:	6863      	ldr	r3, [r4, #4]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	f47f af0b 	bne.w	8003716 <ip4_reass+0x146>
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8003900:	4b1a      	ldr	r3, [pc, #104]	; (800396c <ip4_reass+0x39c>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	429c      	cmp	r4, r3
 8003906:	d006      	beq.n	8003916 <ip4_reass+0x346>
 8003908:	4b19      	ldr	r3, [pc, #100]	; (8003970 <ip4_reass+0x3a0>)
 800390a:	f240 22ab 	movw	r2, #683	; 0x2ab
 800390e:	4919      	ldr	r1, [pc, #100]	; (8003974 <ip4_reass+0x3a4>)
 8003910:	4819      	ldr	r0, [pc, #100]	; (8003978 <ip4_reass+0x3a8>)
 8003912:	f005 fcad 	bl	8009270 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8003916:	2100      	movs	r1, #0
 8003918:	4620      	mov	r0, r4
 800391a:	f7ff fd43 	bl	80033a4 <ip_reass_dequeue_datagram>
 800391e:	e6fa      	b.n	8003716 <ip4_reass+0x146>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8003920:	88e8      	ldrh	r0, [r5, #6]
 8003922:	f7fe fecd 	bl	80026c0 <lwip_htons>
 8003926:	f3c0 000c 	ubfx	r0, r0, #0, #13
 800392a:	2800      	cmp	r0, #0
 800392c:	f47f ae9e 	bne.w	800366c <ip4_reass+0x9c>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8003930:	89e0      	ldrh	r0, [r4, #14]
 8003932:	f7fe fec5 	bl	80026c0 <lwip_htons>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8003936:	f3c0 000c 	ubfx	r0, r0, #0, #13
 800393a:	2800      	cmp	r0, #0
 800393c:	f43f ae96 	beq.w	800366c <ip4_reass+0x9c>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8003940:	462b      	mov	r3, r5
 8003942:	f104 0208 	add.w	r2, r4, #8
 8003946:	f105 0114 	add.w	r1, r5, #20
 800394a:	f853 0b04 	ldr.w	r0, [r3], #4
 800394e:	428b      	cmp	r3, r1
 8003950:	f842 0b04 	str.w	r0, [r2], #4
 8003954:	d1f9      	bne.n	800394a <ip4_reass+0x37a>
 8003956:	e689      	b.n	800366c <ip4_reass+0x9c>
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8003958:	4699      	mov	r9, r3
 800395a:	e712      	b.n	8003782 <ip4_reass+0x1b2>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800395c:	f1bb 0f00 	cmp.w	fp, #0
 8003960:	f43f af0d 	beq.w	800377e <ip4_reass+0x1ae>
 8003964:	f04f 0900 	mov.w	r9, #0
 8003968:	e701      	b.n	800376e <ip4_reass+0x19e>
 800396a:	bf00      	nop
 800396c:	200005cc 	.word	0x200005cc
 8003970:	0800b4f1 	.word	0x0800b4f1
 8003974:	0800b4d1 	.word	0x0800b4d1
 8003978:	0800b013 	.word	0x0800b013

0800397c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800397c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8003980:	8c0b      	ldrh	r3, [r1, #32]
{
 8003982:	b08d      	sub	sp, #52	; 0x34
 8003984:	4607      	mov	r7, r0
 8003986:	468b      	mov	fp, r1
 8003988:	920a      	str	r2, [sp, #40]	; 0x28
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800398a:	3b14      	subs	r3, #20
 800398c:	2208      	movs	r2, #8
 800398e:	fb93 f3f2 	sdiv	r3, r3, r2
 8003992:	b29b      	uxth	r3, r3
 8003994:	9307      	str	r3, [sp, #28]
  int last;
  u16_t poff = IP_HLEN;
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8003996:	6843      	ldr	r3, [r0, #4]
  iphdr = original_iphdr;
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8003998:	781d      	ldrb	r5, [r3, #0]
  original_iphdr = (struct ip_hdr *)p->payload;
 800399a:	9303      	str	r3, [sp, #12]
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800399c:	f005 050f 	and.w	r5, r5, #15
 80039a0:	00ad      	lsls	r5, r5, #2
 80039a2:	2d14      	cmp	r5, #20
 80039a4:	d109      	bne.n	80039ba <ip4_frag+0x3e>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80039a6:	8943      	ldrh	r3, [r0, #10]
 80039a8:	2b13      	cmp	r3, #19
 80039aa:	d809      	bhi.n	80039c0 <ip4_frag+0x44>
 80039ac:	4b5e      	ldr	r3, [pc, #376]	; (8003b28 <ip4_frag+0x1ac>)
 80039ae:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80039b2:	495e      	ldr	r1, [pc, #376]	; (8003b2c <ip4_frag+0x1b0>)
 80039b4:	485e      	ldr	r0, [pc, #376]	; (8003b30 <ip4_frag+0x1b4>)
 80039b6:	f005 fc5b 	bl	8009270 <iprintf>
    return ERR_VAL;
 80039ba:	f06f 0005 	mvn.w	r0, #5
 80039be:	e013      	b.n	80039e8 <ip4_frag+0x6c>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80039c0:	9b03      	ldr	r3, [sp, #12]
  u16_t newpbuflen = 0;
 80039c2:	2600      	movs	r6, #0
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80039c4:	88d8      	ldrh	r0, [r3, #6]
 80039c6:	f7fe fe7b 	bl	80026c0 <lwip_htons>
  ofo = tmp & IP_OFFMASK;
 80039ca:	f3c0 030c 	ubfx	r3, r0, #0, #13
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;

  left = (u16_t)(p->tot_len - IP_HLEN);
 80039ce:	893c      	ldrh	r4, [r7, #8]
  ofo = tmp & IP_OFFMASK;
 80039d0:	9305      	str	r3, [sp, #20]
 80039d2:	f400 5300 	and.w	r3, r0, #8192	; 0x2000
  left = (u16_t)(p->tot_len - IP_HLEN);
 80039d6:	3c14      	subs	r4, #20
 80039d8:	9308      	str	r3, [sp, #32]

  while (left) {
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80039da:	9b07      	ldr	r3, [sp, #28]
  left = (u16_t)(p->tot_len - IP_HLEN);
 80039dc:	b2a4      	uxth	r4, r4
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80039de:	00db      	lsls	r3, r3, #3
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	9309      	str	r3, [sp, #36]	; 0x24
  while (left) {
 80039e4:	b91c      	cbnz	r4, 80039ee <ip4_frag+0x72>
    pbuf_free(rambuf);
    left = (u16_t)(left - fragsize);
    ofo = (u16_t)(ofo + nfb);
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80039e6:	4620      	mov	r0, r4
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
}
 80039e8:	b00d      	add	sp, #52	; 0x34
 80039ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80039ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80039f0:	f44f 7220 	mov.w	r2, #640	; 0x280
 80039f4:	2114      	movs	r1, #20
 80039f6:	200e      	movs	r0, #14
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80039f8:	42a3      	cmp	r3, r4
 80039fa:	bf28      	it	cs
 80039fc:	4623      	movcs	r3, r4
 80039fe:	9306      	str	r3, [sp, #24]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8003a00:	f000 fdc4 	bl	800458c <pbuf_alloc>
    if (rambuf == NULL) {
 8003a04:	4680      	mov	r8, r0
 8003a06:	2800      	cmp	r0, #0
 8003a08:	d037      	beq.n	8003a7a <ip4_frag+0xfe>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8003a0a:	8943      	ldrh	r3, [r0, #10]
 8003a0c:	2b13      	cmp	r3, #19
 8003a0e:	d806      	bhi.n	8003a1e <ip4_frag+0xa2>
 8003a10:	4b45      	ldr	r3, [pc, #276]	; (8003b28 <ip4_frag+0x1ac>)
 8003a12:	f240 3225 	movw	r2, #805	; 0x325
 8003a16:	4947      	ldr	r1, [pc, #284]	; (8003b34 <ip4_frag+0x1b8>)
 8003a18:	4845      	ldr	r0, [pc, #276]	; (8003b30 <ip4_frag+0x1b4>)
 8003a1a:	f005 fc29 	bl	8009270 <iprintf>
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8003a1e:	9b03      	ldr	r3, [sp, #12]
 8003a20:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8003a24:	4619      	mov	r1, r3
 8003a26:	3114      	adds	r1, #20
 8003a28:	f853 0b04 	ldr.w	r0, [r3], #4
 8003a2c:	428b      	cmp	r3, r1
 8003a2e:	f842 0b04 	str.w	r0, [r2], #4
 8003a32:	d1f9      	bne.n	8003a28 <ip4_frag+0xac>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8003a34:	f8d8 3004 	ldr.w	r3, [r8, #4]
    left_to_copy = fragsize;
 8003a38:	f8dd 9018 	ldr.w	r9, [sp, #24]
    iphdr = (struct ip_hdr *)rambuf->payload;
 8003a3c:	9304      	str	r3, [sp, #16]
    while (left_to_copy) {
 8003a3e:	f1b9 0f00 	cmp.w	r9, #0
 8003a42:	d040      	beq.n	8003ac6 <ip4_frag+0x14a>
      u16_t plen = (u16_t)(p->len - poff);
 8003a44:	897b      	ldrh	r3, [r7, #10]
 8003a46:	1b5e      	subs	r6, r3, r5
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8003a48:	429d      	cmp	r5, r3
      u16_t plen = (u16_t)(p->len - poff);
 8003a4a:	b2b6      	uxth	r6, r6
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8003a4c:	d906      	bls.n	8003a5c <ip4_frag+0xe0>
 8003a4e:	4b36      	ldr	r3, [pc, #216]	; (8003b28 <ip4_frag+0x1ac>)
 8003a50:	f240 322d 	movw	r2, #813	; 0x32d
 8003a54:	4938      	ldr	r1, [pc, #224]	; (8003b38 <ip4_frag+0x1bc>)
 8003a56:	4836      	ldr	r0, [pc, #216]	; (8003b30 <ip4_frag+0x1b4>)
 8003a58:	f005 fc0a 	bl	8009270 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8003a5c:	454e      	cmp	r6, r9
 8003a5e:	bf28      	it	cs
 8003a60:	464e      	movcs	r6, r9
      if (!newpbuflen) {
 8003a62:	b916      	cbnz	r6, 8003a6a <ip4_frag+0xee>
        p = p->next;
 8003a64:	683f      	ldr	r7, [r7, #0]
        poff = 0;
 8003a66:	2500      	movs	r5, #0
 8003a68:	e7e9      	b.n	8003a3e <ip4_frag+0xc2>
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8003a6a:	2005      	movs	r0, #5
 8003a6c:	f000 face 	bl	800400c <memp_malloc>
      if (pcr == NULL) {
 8003a70:	4682      	mov	sl, r0
 8003a72:	b928      	cbnz	r0, 8003a80 <ip4_frag+0x104>
        pbuf_free(rambuf);
 8003a74:	4640      	mov	r0, r8
 8003a76:	f000 fd27 	bl	80044c8 <pbuf_free>
  return ERR_MEM;
 8003a7a:	f04f 30ff 	mov.w	r0, #4294967295
 8003a7e:	e7b3      	b.n	80039e8 <ip4_frag+0x6c>
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8003a80:	9601      	str	r6, [sp, #4]
 8003a82:	2241      	movs	r2, #65	; 0x41
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	4631      	mov	r1, r6
 8003a88:	442b      	add	r3, r5
 8003a8a:	9300      	str	r3, [sp, #0]
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2000      	movs	r0, #0
 8003a90:	f000 fcc8 	bl	8004424 <pbuf_alloced_custom>
      if (newpbuf == NULL) {
 8003a94:	b918      	cbnz	r0, 8003a9e <ip4_frag+0x122>
        ip_frag_free_pbuf_custom_ref(pcr);
 8003a96:	4650      	mov	r0, sl
 8003a98:	f7ff fd56 	bl	8003548 <ip_frag_free_pbuf_custom_ref>
 8003a9c:	e7ea      	b.n	8003a74 <ip4_frag+0xf8>
 8003a9e:	900b      	str	r0, [sp, #44]	; 0x2c
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8003aa0:	eba9 0906 	sub.w	r9, r9, r6
      pbuf_ref(p);
 8003aa4:	4638      	mov	r0, r7
 8003aa6:	f000 fe59 	bl	800475c <pbuf_ref>
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8003aaa:	4b24      	ldr	r3, [pc, #144]	; (8003b3c <ip4_frag+0x1c0>)
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8003aac:	fa1f f989 	uxth.w	r9, r9
      pcr->original = p;
 8003ab0:	f8ca 7014 	str.w	r7, [sl, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8003ab4:	f8ca 3010 	str.w	r3, [sl, #16]
      pbuf_cat(rambuf, newpbuf);
 8003ab8:	4640      	mov	r0, r8
 8003aba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003abc:	f000 fe62 	bl	8004784 <pbuf_cat>
      if (left_to_copy) {
 8003ac0:	f1b9 0f00 	cmp.w	r9, #0
 8003ac4:	d1ce      	bne.n	8003a64 <ip4_frag+0xe8>
    tmp = (IP_OFFMASK & (ofo));
 8003ac6:	9b05      	ldr	r3, [sp, #20]
    poff = (u16_t)(poff + newpbuflen);
 8003ac8:	4435      	add	r5, r6
    tmp = (IP_OFFMASK & (ofo));
 8003aca:	f3c3 000c 	ubfx	r0, r3, #0, #13
    last = (left <= netif->mtu - IP_HLEN);
 8003ace:	f8bb 3020 	ldrh.w	r3, [fp, #32]
    poff = (u16_t)(poff + newpbuflen);
 8003ad2:	b2ad      	uxth	r5, r5
    last = (left <= netif->mtu - IP_HLEN);
 8003ad4:	3b13      	subs	r3, #19
    if (!last || mf_set) {
 8003ad6:	42a3      	cmp	r3, r4
 8003ad8:	dd01      	ble.n	8003ade <ip4_frag+0x162>
 8003ada:	9b08      	ldr	r3, [sp, #32]
 8003adc:	b10b      	cbz	r3, 8003ae2 <ip4_frag+0x166>
      tmp = tmp | IP_MF;
 8003ade:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8003ae2:	f7fe fded 	bl	80026c0 <lwip_htons>
 8003ae6:	9b04      	ldr	r3, [sp, #16]
 8003ae8:	80d8      	strh	r0, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8003aea:	9b06      	ldr	r3, [sp, #24]
 8003aec:	f103 0014 	add.w	r0, r3, #20
 8003af0:	b280      	uxth	r0, r0
 8003af2:	f7fe fde5 	bl	80026c0 <lwip_htons>
 8003af6:	9b04      	ldr	r3, [sp, #16]
    IPH_CHKSUM_SET(iphdr, 0);
 8003af8:	9a04      	ldr	r2, [sp, #16]
    netif->output(netif, rambuf, dest);
 8003afa:	4641      	mov	r1, r8
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8003afc:	8058      	strh	r0, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8003afe:	2300      	movs	r3, #0
    netif->output(netif, rambuf, dest);
 8003b00:	4658      	mov	r0, fp
    IPH_CHKSUM_SET(iphdr, 0);
 8003b02:	7293      	strb	r3, [r2, #10]
 8003b04:	72d3      	strb	r3, [r2, #11]
    netif->output(netif, rambuf, dest);
 8003b06:	f8db 3014 	ldr.w	r3, [fp, #20]
 8003b0a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003b0c:	4798      	blx	r3
    pbuf_free(rambuf);
 8003b0e:	4640      	mov	r0, r8
 8003b10:	f000 fcda 	bl	80044c8 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8003b14:	9b06      	ldr	r3, [sp, #24]
    ofo = (u16_t)(ofo + nfb);
 8003b16:	9a07      	ldr	r2, [sp, #28]
    left = (u16_t)(left - fragsize);
 8003b18:	1ae4      	subs	r4, r4, r3
    ofo = (u16_t)(ofo + nfb);
 8003b1a:	9b05      	ldr	r3, [sp, #20]
 8003b1c:	4413      	add	r3, r2
    left = (u16_t)(left - fragsize);
 8003b1e:	b2a4      	uxth	r4, r4
    ofo = (u16_t)(ofo + nfb);
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	9305      	str	r3, [sp, #20]
 8003b24:	e75e      	b.n	80039e4 <ip4_frag+0x68>
 8003b26:	bf00      	nop
 8003b28:	0800b4f1 	.word	0x0800b4f1
 8003b2c:	0800b3e8 	.word	0x0800b3e8
 8003b30:	0800b013 	.word	0x0800b013
 8003b34:	0800b403 	.word	0x0800b403
 8003b38:	0800b423 	.word	0x0800b423
 8003b3c:	08003575 	.word	0x08003575

08003b40 <mem_init>:

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8003b40:	4b0b      	ldr	r3, [pc, #44]	; (8003b70 <mem_init+0x30>)
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
  mem->next = MEM_SIZE_ALIGNED;
  mem->prev = 0;
 8003b42:	2100      	movs	r1, #0
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8003b44:	4a0b      	ldr	r2, [pc, #44]	; (8003b74 <mem_init+0x34>)
 8003b46:	f023 0303 	bic.w	r3, r3, #3
 8003b4a:	6013      	str	r3, [r2, #0]
  mem->next = MEM_SIZE_ALIGNED;
 8003b4c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
  mem->prev = 0;
 8003b50:	8059      	strh	r1, [r3, #2]
  return (struct mem *)(void *)&ram[ptr];
 8003b52:	1898      	adds	r0, r3, r2
  mem->used = 0;
 8003b54:	7119      	strb	r1, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8003b56:	4908      	ldr	r1, [pc, #32]	; (8003b78 <mem_init+0x38>)
  mem->next = MEM_SIZE_ALIGNED;
 8003b58:	801a      	strh	r2, [r3, #0]
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8003b5a:	6008      	str	r0, [r1, #0]
  ram_end->used = 1;
 8003b5c:	2101      	movs	r1, #1
  ram_end->next = MEM_SIZE_ALIGNED;
 8003b5e:	f8a3 2640 	strh.w	r2, [r3, #1600]	; 0x640
  ram_end->prev = MEM_SIZE_ALIGNED;
 8003b62:	f8a3 2642 	strh.w	r2, [r3, #1602]	; 0x642
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8003b66:	4a05      	ldr	r2, [pc, #20]	; (8003b7c <mem_init+0x3c>)
  ram_end->used = 1;
 8003b68:	f883 1644 	strb.w	r1, [r3, #1604]	; 0x644
  lfree = (struct mem *)(void *)ram;
 8003b6c:	6013      	str	r3, [r2, #0]
 8003b6e:	4770      	bx	lr
 8003b70:	20000677 	.word	0x20000677
 8003b74:	200005d4 	.word	0x200005d4
 8003b78:	200005d8 	.word	0x200005d8
 8003b7c:	200005d0 	.word	0x200005d0

08003b80 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8003b80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8003b84:	4604      	mov	r4, r0
 8003b86:	2800      	cmp	r0, #0
 8003b88:	f000 8099 	beq.w	8003cbe <mem_free+0x13e>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8003b8c:	0783      	lsls	r3, r0, #30
 8003b8e:	d008      	beq.n	8003ba2 <mem_free+0x22>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8003b90:	4b4c      	ldr	r3, [pc, #304]	; (8003cc4 <mem_free+0x144>)
 8003b92:	f240 2273 	movw	r2, #627	; 0x273
 8003b96:	494c      	ldr	r1, [pc, #304]	; (8003cc8 <mem_free+0x148>)
    MEM_STATS_INC_LOCKED(illegal);
    return;
  }

  if (!mem_link_valid(mem)) {
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8003b98:	484c      	ldr	r0, [pc, #304]	; (8003ccc <mem_free+0x14c>)
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8003b9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8003b9e:	f005 bb67 	b.w	8009270 <iprintf>
  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8003ba2:	4a4b      	ldr	r2, [pc, #300]	; (8003cd0 <mem_free+0x150>)
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8003ba4:	f1a0 0508 	sub.w	r5, r0, #8
  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8003ba8:	6813      	ldr	r3, [r2, #0]
 8003baa:	4690      	mov	r8, r2
 8003bac:	429d      	cmp	r5, r3
 8003bae:	d305      	bcc.n	8003bbc <mem_free+0x3c>
 8003bb0:	4f48      	ldr	r7, [pc, #288]	; (8003cd4 <mem_free+0x154>)
 8003bb2:	f100 020c 	add.w	r2, r0, #12
 8003bb6:	6839      	ldr	r1, [r7, #0]
 8003bb8:	4291      	cmp	r1, r2
 8003bba:	d204      	bcs.n	8003bc6 <mem_free+0x46>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8003bbc:	4b41      	ldr	r3, [pc, #260]	; (8003cc4 <mem_free+0x144>)
 8003bbe:	f240 227f 	movw	r2, #639	; 0x27f
 8003bc2:	4945      	ldr	r1, [pc, #276]	; (8003cd8 <mem_free+0x158>)
 8003bc4:	e7e8      	b.n	8003b98 <mem_free+0x18>
  if (!mem->used) {
 8003bc6:	f810 2c04 	ldrb.w	r2, [r0, #-4]
 8003bca:	b922      	cbnz	r2, 8003bd6 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8003bcc:	4b3d      	ldr	r3, [pc, #244]	; (8003cc4 <mem_free+0x144>)
 8003bce:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8003bd2:	4942      	ldr	r1, [pc, #264]	; (8003cdc <mem_free+0x15c>)
 8003bd4:	e7e0      	b.n	8003b98 <mem_free+0x18>
  nmem = ptr_to_mem(mem->next);
 8003bd6:	f830 6c08 	ldrh.w	r6, [r0, #-8]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8003bda:	f5b6 6fc8 	cmp.w	r6, #1600	; 0x640
 8003bde:	d869      	bhi.n	8003cb4 <mem_free+0x134>
  pmem = ptr_to_mem(mem->prev);
 8003be0:	f830 0c06 	ldrh.w	r0, [r0, #-6]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8003be4:	f5b0 6fc8 	cmp.w	r0, #1600	; 0x640
 8003be8:	d864      	bhi.n	8003cb4 <mem_free+0x134>
  return (mem_size_t)((u8_t *)mem - ram);
 8003bea:	1aea      	subs	r2, r5, r3
 8003bec:	b292      	uxth	r2, r2
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8003bee:	4282      	cmp	r2, r0
 8003bf0:	d002      	beq.n	8003bf8 <mem_free+0x78>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8003bf2:	5a18      	ldrh	r0, [r3, r0]
 8003bf4:	4290      	cmp	r0, r2
 8003bf6:	d15d      	bne.n	8003cb4 <mem_free+0x134>
  return (struct mem *)(void *)&ram[ptr];
 8003bf8:	4433      	add	r3, r6
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8003bfa:	4299      	cmp	r1, r3
 8003bfc:	d002      	beq.n	8003c04 <mem_free+0x84>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8003bfe:	885b      	ldrh	r3, [r3, #2]
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d157      	bne.n	8003cb4 <mem_free+0x134>
  mem->used = 0;
 8003c04:	2300      	movs	r3, #0
  if (mem < lfree) {
 8003c06:	4e36      	ldr	r6, [pc, #216]	; (8003ce0 <mem_free+0x160>)
  mem->used = 0;
 8003c08:	f804 3c04 	strb.w	r3, [r4, #-4]
  if (mem < lfree) {
 8003c0c:	6833      	ldr	r3, [r6, #0]
 8003c0e:	429d      	cmp	r5, r3
 8003c10:	d200      	bcs.n	8003c14 <mem_free+0x94>
    lfree = mem;
 8003c12:	6035      	str	r5, [r6, #0]
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8003c14:	428d      	cmp	r5, r1
 8003c16:	d306      	bcc.n	8003c26 <mem_free+0xa6>
 8003c18:	4b2a      	ldr	r3, [pc, #168]	; (8003cc4 <mem_free+0x144>)
 8003c1a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003c1e:	4931      	ldr	r1, [pc, #196]	; (8003ce4 <mem_free+0x164>)
 8003c20:	482a      	ldr	r0, [pc, #168]	; (8003ccc <mem_free+0x14c>)
 8003c22:	f005 fb25 	bl	8009270 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8003c26:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 8003c2a:	b133      	cbz	r3, 8003c3a <mem_free+0xba>
 8003c2c:	4b25      	ldr	r3, [pc, #148]	; (8003cc4 <mem_free+0x144>)
 8003c2e:	f240 12e1 	movw	r2, #481	; 0x1e1
 8003c32:	492d      	ldr	r1, [pc, #180]	; (8003ce8 <mem_free+0x168>)
 8003c34:	4825      	ldr	r0, [pc, #148]	; (8003ccc <mem_free+0x14c>)
 8003c36:	f005 fb1b 	bl	8009270 <iprintf>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8003c3a:	f834 3c08 	ldrh.w	r3, [r4, #-8]
 8003c3e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003c42:	d906      	bls.n	8003c52 <mem_free+0xd2>
 8003c44:	4b1f      	ldr	r3, [pc, #124]	; (8003cc4 <mem_free+0x144>)
 8003c46:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8003c4a:	4928      	ldr	r1, [pc, #160]	; (8003cec <mem_free+0x16c>)
 8003c4c:	481f      	ldr	r0, [pc, #124]	; (8003ccc <mem_free+0x14c>)
 8003c4e:	f005 fb0f 	bl	8009270 <iprintf>
  return (struct mem *)(void *)&ram[ptr];
 8003c52:	f8d8 3000 	ldr.w	r3, [r8]
 8003c56:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 8003c5a:	185a      	adds	r2, r3, r1
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8003c5c:	4295      	cmp	r5, r2
 8003c5e:	d012      	beq.n	8003c86 <mem_free+0x106>
 8003c60:	7910      	ldrb	r0, [r2, #4]
 8003c62:	b980      	cbnz	r0, 8003c86 <mem_free+0x106>
 8003c64:	6838      	ldr	r0, [r7, #0]
 8003c66:	4282      	cmp	r2, r0
 8003c68:	d00d      	beq.n	8003c86 <mem_free+0x106>
    if (lfree == nmem) {
 8003c6a:	6830      	ldr	r0, [r6, #0]
 8003c6c:	4282      	cmp	r2, r0
    mem->next = nmem->next;
 8003c6e:	5a5a      	ldrh	r2, [r3, r1]
 8003c70:	f824 2c08 	strh.w	r2, [r4, #-8]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8003c74:	5a5a      	ldrh	r2, [r3, r1]
      lfree = mem;
 8003c76:	bf08      	it	eq
 8003c78:	6035      	streq	r5, [r6, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8003c7a:	f5b2 6fc8 	cmp.w	r2, #1600	; 0x640
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8003c7e:	bf1e      	ittt	ne
 8003c80:	18d2      	addne	r2, r2, r3
  return (mem_size_t)((u8_t *)mem - ram);
 8003c82:	1ae9      	subne	r1, r5, r3
 8003c84:	8051      	strhne	r1, [r2, #2]
  pmem = ptr_to_mem(mem->prev);
 8003c86:	f834 2c06 	ldrh.w	r2, [r4, #-6]
  return (struct mem *)(void *)&ram[ptr];
 8003c8a:	1899      	adds	r1, r3, r2
  if (pmem != mem && pmem->used == 0) {
 8003c8c:	428d      	cmp	r5, r1
 8003c8e:	d016      	beq.n	8003cbe <mem_free+0x13e>
 8003c90:	7908      	ldrb	r0, [r1, #4]
 8003c92:	b9a0      	cbnz	r0, 8003cbe <mem_free+0x13e>
    if (lfree == mem) {
 8003c94:	6830      	ldr	r0, [r6, #0]
 8003c96:	4285      	cmp	r5, r0
      lfree = pmem;
 8003c98:	bf08      	it	eq
 8003c9a:	6031      	streq	r1, [r6, #0]
    pmem->next = mem->next;
 8003c9c:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 8003ca0:	5299      	strh	r1, [r3, r2]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8003ca2:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 8003ca6:	f5b1 6fc8 	cmp.w	r1, #1600	; 0x640
 8003caa:	d008      	beq.n	8003cbe <mem_free+0x13e>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8003cac:	440b      	add	r3, r1
 8003cae:	805a      	strh	r2, [r3, #2]
 8003cb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8003cb4:	4b03      	ldr	r3, [pc, #12]	; (8003cc4 <mem_free+0x144>)
 8003cb6:	f240 2295 	movw	r2, #661	; 0x295
 8003cba:	490d      	ldr	r1, [pc, #52]	; (8003cf0 <mem_free+0x170>)
 8003cbc:	e76c      	b.n	8003b98 <mem_free+0x18>
 8003cbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003cc2:	bf00      	nop
 8003cc4:	0800b5ac 	.word	0x0800b5ac
 8003cc8:	0800b5db 	.word	0x0800b5db
 8003ccc:	0800b013 	.word	0x0800b013
 8003cd0:	200005d4 	.word	0x200005d4
 8003cd4:	200005d8 	.word	0x200005d8
 8003cd8:	0800b5fc 	.word	0x0800b5fc
 8003cdc:	0800b615 	.word	0x0800b615
 8003ce0:	200005d0 	.word	0x200005d0
 8003ce4:	0800b63b 	.word	0x0800b63b
 8003ce8:	0800b655 	.word	0x0800b655
 8003cec:	0800b670 	.word	0x0800b670
 8003cf0:	0800b69a 	.word	0x0800b69a

08003cf4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8003cf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8003cf8:	1ccd      	adds	r5, r1, #3
{
 8003cfa:	4604      	mov	r4, r0
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8003cfc:	f025 0503 	bic.w	r5, r5, #3
 8003d00:	b2ad      	uxth	r5, r5
  if (newsize < MIN_SIZE_ALIGNED) {
 8003d02:	2d0b      	cmp	r5, #11
 8003d04:	d904      	bls.n	8003d10 <mem_trim+0x1c>
    newsize = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8003d06:	f5b5 6fc8 	cmp.w	r5, #1600	; 0x640
 8003d0a:	d902      	bls.n	8003d12 <mem_trim+0x1e>
    return NULL;
 8003d0c:	2400      	movs	r4, #0
 8003d0e:	e078      	b.n	8003e02 <mem_trim+0x10e>
    newsize = MIN_SIZE_ALIGNED;
 8003d10:	250c      	movs	r5, #12
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8003d12:	42a9      	cmp	r1, r5
 8003d14:	d8fa      	bhi.n	8003d0c <mem_trim+0x18>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8003d16:	4f3c      	ldr	r7, [pc, #240]	; (8003e08 <mem_trim+0x114>)
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	42a3      	cmp	r3, r4
 8003d1c:	d803      	bhi.n	8003d26 <mem_trim+0x32>
 8003d1e:	4b3b      	ldr	r3, [pc, #236]	; (8003e0c <mem_trim+0x118>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	429c      	cmp	r4, r3
 8003d24:	d306      	bcc.n	8003d34 <mem_trim+0x40>
 8003d26:	4b3a      	ldr	r3, [pc, #232]	; (8003e10 <mem_trim+0x11c>)
 8003d28:	f240 22d2 	movw	r2, #722	; 0x2d2
 8003d2c:	4939      	ldr	r1, [pc, #228]	; (8003e14 <mem_trim+0x120>)
 8003d2e:	483a      	ldr	r0, [pc, #232]	; (8003e18 <mem_trim+0x124>)
 8003d30:	f005 fa9e 	bl	8009270 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8003d34:	f8d7 a000 	ldr.w	sl, [r7]
 8003d38:	4554      	cmp	r4, sl
 8003d3a:	d362      	bcc.n	8003e02 <mem_trim+0x10e>
 8003d3c:	4b33      	ldr	r3, [pc, #204]	; (8003e0c <mem_trim+0x118>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	429c      	cmp	r4, r3
 8003d42:	d25e      	bcs.n	8003e02 <mem_trim+0x10e>
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8003d44:	f1a4 0608 	sub.w	r6, r4, #8
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8003d48:	f834 8c08 	ldrh.w	r8, [r4, #-8]
  return (mem_size_t)((u8_t *)mem - ram);
 8003d4c:	eba6 060a 	sub.w	r6, r6, sl
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8003d50:	f1a8 0308 	sub.w	r3, r8, #8
  return (mem_size_t)((u8_t *)mem - ram);
 8003d54:	b2b6      	uxth	r6, r6
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8003d56:	1b9b      	subs	r3, r3, r6
 8003d58:	b29b      	uxth	r3, r3
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8003d5a:	42ab      	cmp	r3, r5
 8003d5c:	d225      	bcs.n	8003daa <mem_trim+0xb6>
 8003d5e:	4b2c      	ldr	r3, [pc, #176]	; (8003e10 <mem_trim+0x11c>)
 8003d60:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8003d64:	492d      	ldr	r1, [pc, #180]	; (8003e1c <mem_trim+0x128>)
 8003d66:	482c      	ldr	r0, [pc, #176]	; (8003e18 <mem_trim+0x124>)
 8003d68:	f005 fa82 	bl	8009270 <iprintf>
 8003d6c:	e7ce      	b.n	8003d0c <mem_trim+0x18>
    if (mem2->next != MEM_SIZE_ALIGNED) {
      ptr_to_mem(mem2->next)->prev = ptr2;
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8003d6e:	f105 0214 	add.w	r2, r5, #20
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d845      	bhi.n	8003e02 <mem_trim+0x10e>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8003d76:	f106 0308 	add.w	r3, r6, #8
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8003d7a:	f5b8 6fc8 	cmp.w	r8, #1600	; 0x640
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8003d7e:	441d      	add	r5, r3
 8003d80:	b2ad      	uxth	r5, r5
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8003d82:	d106      	bne.n	8003d92 <mem_trim+0x9e>
 8003d84:	4b22      	ldr	r3, [pc, #136]	; (8003e10 <mem_trim+0x11c>)
 8003d86:	f240 3216 	movw	r2, #790	; 0x316
 8003d8a:	4925      	ldr	r1, [pc, #148]	; (8003e20 <mem_trim+0x12c>)
 8003d8c:	4822      	ldr	r0, [pc, #136]	; (8003e18 <mem_trim+0x124>)
 8003d8e:	f005 fa6f 	bl	8009270 <iprintf>
    mem2 = ptr_to_mem(ptr2);
    if (mem2 < lfree) {
 8003d92:	4924      	ldr	r1, [pc, #144]	; (8003e24 <mem_trim+0x130>)
  return (struct mem *)(void *)&ram[ptr];
 8003d94:	683b      	ldr	r3, [r7, #0]
    if (mem2 < lfree) {
 8003d96:	6808      	ldr	r0, [r1, #0]
  return (struct mem *)(void *)&ram[ptr];
 8003d98:	195a      	adds	r2, r3, r5
    if (mem2 < lfree) {
 8003d9a:	4290      	cmp	r0, r2
      lfree = mem2;
 8003d9c:	bf88      	it	hi
 8003d9e:	600a      	strhi	r2, [r1, #0]
    }
    mem2->used = 0;
 8003da0:	2100      	movs	r1, #0
 8003da2:	7111      	strb	r1, [r2, #4]
    mem2->next = mem->next;
 8003da4:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 8003da8:	e021      	b.n	8003dee <mem_trim+0xfa>
  if (newsize == size) {
 8003daa:	d02a      	beq.n	8003e02 <mem_trim+0x10e>
  return (struct mem *)(void *)&ram[ptr];
 8003dac:	eb0a 0908 	add.w	r9, sl, r8
  if (mem2->used == 0) {
 8003db0:	f899 2004 	ldrb.w	r2, [r9, #4]
 8003db4:	2a00      	cmp	r2, #0
 8003db6:	d1da      	bne.n	8003d6e <mem_trim+0x7a>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8003db8:	f5b8 6fc8 	cmp.w	r8, #1600	; 0x640
 8003dbc:	d106      	bne.n	8003dcc <mem_trim+0xd8>
 8003dbe:	4b14      	ldr	r3, [pc, #80]	; (8003e10 <mem_trim+0x11c>)
 8003dc0:	f240 22f5 	movw	r2, #757	; 0x2f5
 8003dc4:	4916      	ldr	r1, [pc, #88]	; (8003e20 <mem_trim+0x12c>)
 8003dc6:	4814      	ldr	r0, [pc, #80]	; (8003e18 <mem_trim+0x124>)
 8003dc8:	f005 fa52 	bl	8009270 <iprintf>
    if (lfree == mem2) {
 8003dcc:	4a15      	ldr	r2, [pc, #84]	; (8003e24 <mem_trim+0x130>)
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8003dce:	f106 0308 	add.w	r3, r6, #8
    mem2->used = 0;
 8003dd2:	2000      	movs	r0, #0
    next = mem2->next;
 8003dd4:	f83a 1008 	ldrh.w	r1, [sl, r8]
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8003dd8:	441d      	add	r5, r3
    if (lfree == mem2) {
 8003dda:	6813      	ldr	r3, [r2, #0]
 8003ddc:	454b      	cmp	r3, r9
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8003dde:	b2ad      	uxth	r5, r5
  return (struct mem *)(void *)&ram[ptr];
 8003de0:	bf02      	ittt	eq
 8003de2:	683b      	ldreq	r3, [r7, #0]
 8003de4:	195b      	addeq	r3, r3, r5
      lfree = ptr_to_mem(ptr2);
 8003de6:	6013      	streq	r3, [r2, #0]
  return (struct mem *)(void *)&ram[ptr];
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	195a      	adds	r2, r3, r5
    mem2->used = 0;
 8003dec:	7110      	strb	r0, [r2, #4]
    mem2->next = mem->next;
 8003dee:	5359      	strh	r1, [r3, r5]
    mem2->prev = ptr;
 8003df0:	8056      	strh	r6, [r2, #2]
    mem->next = ptr2;
 8003df2:	f824 5c08 	strh.w	r5, [r4, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8003df6:	5b5a      	ldrh	r2, [r3, r5]
 8003df8:	f5b2 6fc8 	cmp.w	r2, #1600	; 0x640
 8003dfc:	d001      	beq.n	8003e02 <mem_trim+0x10e>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8003dfe:	4413      	add	r3, r2
 8003e00:	805d      	strh	r5, [r3, #2]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
}
 8003e02:	4620      	mov	r0, r4
 8003e04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e08:	200005d4 	.word	0x200005d4
 8003e0c:	200005d8 	.word	0x200005d8
 8003e10:	0800b5ac 	.word	0x0800b5ac
 8003e14:	0800b767 	.word	0x0800b767
 8003e18:	0800b013 	.word	0x0800b013
 8003e1c:	0800b77e 	.word	0x0800b77e
 8003e20:	0800b79e 	.word	0x0800b79e
 8003e24:	200005d0 	.word	0x200005d0

08003e28 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8003e28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8003e2c:	b148      	cbz	r0, 8003e42 <mem_malloc+0x1a>
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8003e2e:	1cc5      	adds	r5, r0, #3
 8003e30:	f025 0503 	bic.w	r5, r5, #3
 8003e34:	b2ad      	uxth	r5, r5
  if (size < MIN_SIZE_ALIGNED) {
 8003e36:	2d0b      	cmp	r5, #11
 8003e38:	d905      	bls.n	8003e46 <mem_malloc+0x1e>
    size = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8003e3a:	f5b5 6fc8 	cmp.w	r5, #1600	; 0x640
 8003e3e:	d903      	bls.n	8003e48 <mem_malloc+0x20>
    return NULL;
 8003e40:	2000      	movs	r0, #0
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
}
 8003e42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    size = MIN_SIZE_ALIGNED;
 8003e46:	250c      	movs	r5, #12
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8003e48:	42a8      	cmp	r0, r5
 8003e4a:	d8f9      	bhi.n	8003e40 <mem_malloc+0x18>
  return (mem_size_t)((u8_t *)mem - ram);
 8003e4c:	493d      	ldr	r1, [pc, #244]	; (8003f44 <mem_malloc+0x11c>)
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8003e4e:	f5c5 60c8 	rsb	r0, r5, #1600	; 0x640
 8003e52:	4b3d      	ldr	r3, [pc, #244]	; (8003f48 <mem_malloc+0x120>)
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8003e54:	f06f 0707 	mvn.w	r7, #7
  return (mem_size_t)((u8_t *)mem - ram);
 8003e58:	680a      	ldr	r2, [r1, #0]
 8003e5a:	4689      	mov	r9, r1
 8003e5c:	681e      	ldr	r6, [r3, #0]
 8003e5e:	4698      	mov	r8, r3
 8003e60:	1ab6      	subs	r6, r6, r2
 8003e62:	b2b6      	uxth	r6, r6
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8003e64:	4286      	cmp	r6, r0
 8003e66:	d2eb      	bcs.n	8003e40 <mem_malloc+0x18>
  return (struct mem *)(void *)&ram[ptr];
 8003e68:	1994      	adds	r4, r2, r6
 8003e6a:	5b91      	ldrh	r1, [r2, r6]
      if ((!mem->used) &&
 8003e6c:	7923      	ldrb	r3, [r4, #4]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d165      	bne.n	8003f3e <mem_malloc+0x116>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8003e72:	1bbb      	subs	r3, r7, r6
 8003e74:	440b      	add	r3, r1
      if ((!mem->used) &&
 8003e76:	429d      	cmp	r5, r3
 8003e78:	d861      	bhi.n	8003f3e <mem_malloc+0x116>
        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8003e7a:	f105 0214 	add.w	r2, r5, #20
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d357      	bcc.n	8003f32 <mem_malloc+0x10a>
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8003e82:	f105 0708 	add.w	r7, r5, #8
 8003e86:	4437      	add	r7, r6
 8003e88:	b2bf      	uxth	r7, r7
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8003e8a:	f5b7 6fc8 	cmp.w	r7, #1600	; 0x640
 8003e8e:	d106      	bne.n	8003e9e <mem_malloc+0x76>
 8003e90:	4b2e      	ldr	r3, [pc, #184]	; (8003f4c <mem_malloc+0x124>)
 8003e92:	f240 3287 	movw	r2, #903	; 0x387
 8003e96:	492e      	ldr	r1, [pc, #184]	; (8003f50 <mem_malloc+0x128>)
 8003e98:	482e      	ldr	r0, [pc, #184]	; (8003f54 <mem_malloc+0x12c>)
 8003e9a:	f005 f9e9 	bl	8009270 <iprintf>
  return (struct mem *)(void *)&ram[ptr];
 8003e9e:	f8d9 3000 	ldr.w	r3, [r9]
          mem2->used = 0;
 8003ea2:	2100      	movs	r1, #0
  return (struct mem *)(void *)&ram[ptr];
 8003ea4:	19da      	adds	r2, r3, r7
          mem2->used = 0;
 8003ea6:	7111      	strb	r1, [r2, #4]
          mem2->next = mem->next;
 8003ea8:	8821      	ldrh	r1, [r4, #0]
 8003eaa:	53d9      	strh	r1, [r3, r7]
          mem2->prev = ptr;
 8003eac:	8056      	strh	r6, [r2, #2]
          mem->used = 1;
 8003eae:	2201      	movs	r2, #1
          mem->next = ptr2;
 8003eb0:	8027      	strh	r7, [r4, #0]
          mem->used = 1;
 8003eb2:	7122      	strb	r2, [r4, #4]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 8003eb4:	5bda      	ldrh	r2, [r3, r7]
 8003eb6:	f5b2 6fc8 	cmp.w	r2, #1600	; 0x640
 8003eba:	d001      	beq.n	8003ec0 <mem_malloc+0x98>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8003ebc:	4413      	add	r3, r2
 8003ebe:	805f      	strh	r7, [r3, #2]
        if (mem == lfree) {
 8003ec0:	f8d8 3000 	ldr.w	r3, [r8]
 8003ec4:	4e24      	ldr	r6, [pc, #144]	; (8003f58 <mem_malloc+0x130>)
 8003ec6:	42a3      	cmp	r3, r4
 8003ec8:	d113      	bne.n	8003ef2 <mem_malloc+0xca>
          while (cur->used && cur != ram_end) {
 8003eca:	6831      	ldr	r1, [r6, #0]
  return (struct mem *)(void *)&ram[ptr];
 8003ecc:	4623      	mov	r3, r4
 8003ece:	f8d9 0000 	ldr.w	r0, [r9]
          while (cur->used && cur != ram_end) {
 8003ed2:	791a      	ldrb	r2, [r3, #4]
 8003ed4:	b10a      	cbz	r2, 8003eda <mem_malloc+0xb2>
 8003ed6:	428b      	cmp	r3, r1
 8003ed8:	d12e      	bne.n	8003f38 <mem_malloc+0x110>
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8003eda:	428b      	cmp	r3, r1
          lfree = cur;
 8003edc:	f8c8 3000 	str.w	r3, [r8]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8003ee0:	d007      	beq.n	8003ef2 <mem_malloc+0xca>
 8003ee2:	b132      	cbz	r2, 8003ef2 <mem_malloc+0xca>
 8003ee4:	4b19      	ldr	r3, [pc, #100]	; (8003f4c <mem_malloc+0x124>)
 8003ee6:	f240 32b5 	movw	r2, #949	; 0x3b5
 8003eea:	491c      	ldr	r1, [pc, #112]	; (8003f5c <mem_malloc+0x134>)
 8003eec:	4819      	ldr	r0, [pc, #100]	; (8003f54 <mem_malloc+0x12c>)
 8003eee:	f005 f9bf 	bl	8009270 <iprintf>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8003ef2:	3508      	adds	r5, #8
 8003ef4:	6833      	ldr	r3, [r6, #0]
 8003ef6:	4425      	add	r5, r4
 8003ef8:	42ab      	cmp	r3, r5
 8003efa:	d206      	bcs.n	8003f0a <mem_malloc+0xe2>
 8003efc:	4b13      	ldr	r3, [pc, #76]	; (8003f4c <mem_malloc+0x124>)
 8003efe:	f240 32ba 	movw	r2, #954	; 0x3ba
 8003f02:	4917      	ldr	r1, [pc, #92]	; (8003f60 <mem_malloc+0x138>)
 8003f04:	4813      	ldr	r0, [pc, #76]	; (8003f54 <mem_malloc+0x12c>)
 8003f06:	f005 f9b3 	bl	8009270 <iprintf>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8003f0a:	07a3      	lsls	r3, r4, #30
 8003f0c:	d00d      	beq.n	8003f2a <mem_malloc+0x102>
 8003f0e:	4b0f      	ldr	r3, [pc, #60]	; (8003f4c <mem_malloc+0x124>)
 8003f10:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 8003f14:	4913      	ldr	r1, [pc, #76]	; (8003f64 <mem_malloc+0x13c>)
 8003f16:	480f      	ldr	r0, [pc, #60]	; (8003f54 <mem_malloc+0x12c>)
 8003f18:	f005 f9aa 	bl	8009270 <iprintf>
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8003f1c:	4b0b      	ldr	r3, [pc, #44]	; (8003f4c <mem_malloc+0x124>)
 8003f1e:	f240 32be 	movw	r2, #958	; 0x3be
 8003f22:	4911      	ldr	r1, [pc, #68]	; (8003f68 <mem_malloc+0x140>)
 8003f24:	480b      	ldr	r0, [pc, #44]	; (8003f54 <mem_malloc+0x12c>)
 8003f26:	f005 f9a3 	bl	8009270 <iprintf>
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8003f2a:	f104 0008 	add.w	r0, r4, #8
 8003f2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          mem->used = 1;
 8003f32:	2301      	movs	r3, #1
 8003f34:	7123      	strb	r3, [r4, #4]
 8003f36:	e7c3      	b.n	8003ec0 <mem_malloc+0x98>
  return (struct mem *)(void *)&ram[ptr];
 8003f38:	881b      	ldrh	r3, [r3, #0]
 8003f3a:	4403      	add	r3, r0
 8003f3c:	e7c9      	b.n	8003ed2 <mem_malloc+0xaa>
         ptr = ptr_to_mem(ptr)->next) {
 8003f3e:	460e      	mov	r6, r1
 8003f40:	e790      	b.n	8003e64 <mem_malloc+0x3c>
 8003f42:	bf00      	nop
 8003f44:	200005d4 	.word	0x200005d4
 8003f48:	200005d0 	.word	0x200005d0
 8003f4c:	0800b5ac 	.word	0x0800b5ac
 8003f50:	0800b79e 	.word	0x0800b79e
 8003f54:	0800b013 	.word	0x0800b013
 8003f58:	200005d8 	.word	0x200005d8
 8003f5c:	0800b6cc 	.word	0x0800b6cc
 8003f60:	0800b6e5 	.word	0x0800b6e5
 8003f64:	0800b715 	.word	0x0800b715
 8003f68:	0800b744 	.word	0x0800b744

08003f6c <do_memp_malloc_pool.isra.0>:
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}

static void *
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
 8003f6c:	b510      	push	{r4, lr}
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8003f6e:	6804      	ldr	r4, [r0, #0]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8003f70:	b154      	cbz	r4, 8003f88 <do_memp_malloc_pool.isra.0+0x1c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8003f72:	6823      	ldr	r3, [r4, #0]
 8003f74:	6003      	str	r3, [r0, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8003f76:	07a3      	lsls	r3, r4, #30
 8003f78:	d006      	beq.n	8003f88 <do_memp_malloc_pool.isra.0+0x1c>
 8003f7a:	4b04      	ldr	r3, [pc, #16]	; (8003f8c <do_memp_malloc_pool.isra.0+0x20>)
 8003f7c:	f240 1219 	movw	r2, #281	; 0x119
 8003f80:	4903      	ldr	r1, [pc, #12]	; (8003f90 <do_memp_malloc_pool.isra.0+0x24>)
 8003f82:	4804      	ldr	r0, [pc, #16]	; (8003f94 <do_memp_malloc_pool.isra.0+0x28>)
 8003f84:	f005 f974 	bl	8009270 <iprintf>
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
}
 8003f88:	4620      	mov	r0, r4
 8003f8a:	bd10      	pop	{r4, pc}
 8003f8c:	0800b7cf 	.word	0x0800b7cf
 8003f90:	0800b7ff 	.word	0x0800b7ff
 8003f94:	0800b013 	.word	0x0800b013

08003f98 <do_memp_free_pool.isra.1>:

  return memp;
}

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
 8003f98:	b538      	push	{r3, r4, r5, lr}
{
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8003f9a:	078b      	lsls	r3, r1, #30
do_memp_free_pool(const struct memp_desc *desc, void *mem)
 8003f9c:	4605      	mov	r5, r0
 8003f9e:	460c      	mov	r4, r1
  LWIP_ASSERT("memp_free: mem properly aligned",
 8003fa0:	d006      	beq.n	8003fb0 <do_memp_free_pool.isra.1+0x18>
 8003fa2:	4b06      	ldr	r3, [pc, #24]	; (8003fbc <do_memp_free_pool.isra.1+0x24>)
 8003fa4:	f240 126d 	movw	r2, #365	; 0x16d
 8003fa8:	4905      	ldr	r1, [pc, #20]	; (8003fc0 <do_memp_free_pool.isra.1+0x28>)
 8003faa:	4806      	ldr	r0, [pc, #24]	; (8003fc4 <do_memp_free_pool.isra.1+0x2c>)
 8003fac:	f005 f960 	bl	8009270 <iprintf>
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8003fb0:	682b      	ldr	r3, [r5, #0]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	6022      	str	r2, [r4, #0]
  *desc->tab = memp;
 8003fb6:	601c      	str	r4, [r3, #0]
 8003fb8:	bd38      	pop	{r3, r4, r5, pc}
 8003fba:	bf00      	nop
 8003fbc:	0800b7cf 	.word	0x0800b7cf
 8003fc0:	0800b7af 	.word	0x0800b7af
 8003fc4:	0800b013 	.word	0x0800b013

08003fc8 <memp_init_pool>:
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8003fc8:	6843      	ldr	r3, [r0, #4]
  *desc->tab = NULL;
 8003fca:	2200      	movs	r2, #0
 8003fcc:	6881      	ldr	r1, [r0, #8]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8003fce:	3303      	adds	r3, #3
{
 8003fd0:	b530      	push	{r4, r5, lr}
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8003fd2:	f023 0303 	bic.w	r3, r3, #3
  for (i = 0; i < desc->num; ++i) {
 8003fd6:	8844      	ldrh	r4, [r0, #2]
  *desc->tab = NULL;
 8003fd8:	600a      	str	r2, [r1, #0]
  for (i = 0; i < desc->num; ++i) {
 8003fda:	42a2      	cmp	r2, r4
 8003fdc:	db00      	blt.n	8003fe0 <memp_init_pool+0x18>
}
 8003fde:	bd30      	pop	{r4, r5, pc}
    memp->next = *desc->tab;
 8003fe0:	680d      	ldr	r5, [r1, #0]
  for (i = 0; i < desc->num; ++i) {
 8003fe2:	3201      	adds	r2, #1
    memp->next = *desc->tab;
 8003fe4:	601d      	str	r5, [r3, #0]
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8003fe6:	8805      	ldrh	r5, [r0, #0]
    *desc->tab = memp;
 8003fe8:	600b      	str	r3, [r1, #0]
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8003fea:	442b      	add	r3, r5
 8003fec:	e7f5      	b.n	8003fda <memp_init_pool+0x12>
	...

08003ff0 <memp_init>:
{
 8003ff0:	b538      	push	{r3, r4, r5, lr}
 8003ff2:	2400      	movs	r4, #0
    memp_init_pool(memp_pools[i]);
 8003ff4:	4d04      	ldr	r5, [pc, #16]	; (8004008 <memp_init+0x18>)
 8003ff6:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 8003ffa:	3401      	adds	r4, #1
 8003ffc:	f7ff ffe4 	bl	8003fc8 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8004000:	2c09      	cmp	r4, #9
 8004002:	d1f8      	bne.n	8003ff6 <memp_init+0x6>
}
 8004004:	bd38      	pop	{r3, r4, r5, pc}
 8004006:	bf00      	nop
 8004008:	0800b8c8 	.word	0x0800b8c8

0800400c <memp_malloc>:
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800400c:	2808      	cmp	r0, #8
{
 800400e:	b508      	push	{r3, lr}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8004010:	d807      	bhi.n	8004022 <memp_malloc+0x16>
  memp = do_memp_malloc_pool(memp_pools[type]);
 8004012:	4b08      	ldr	r3, [pc, #32]	; (8004034 <memp_malloc+0x28>)
 8004014:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8004018:	6898      	ldr	r0, [r3, #8]
}
 800401a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  memp = do_memp_malloc_pool(memp_pools[type]);
 800401e:	f7ff bfa5 	b.w	8003f6c <do_memp_malloc_pool.isra.0>
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8004022:	4b05      	ldr	r3, [pc, #20]	; (8004038 <memp_malloc+0x2c>)
 8004024:	f240 1257 	movw	r2, #343	; 0x157
 8004028:	4904      	ldr	r1, [pc, #16]	; (800403c <memp_malloc+0x30>)
 800402a:	4805      	ldr	r0, [pc, #20]	; (8004040 <memp_malloc+0x34>)
 800402c:	f005 f920 	bl	8009270 <iprintf>
}
 8004030:	2000      	movs	r0, #0
 8004032:	bd08      	pop	{r3, pc}
 8004034:	0800b8c8 	.word	0x0800b8c8
 8004038:	0800b7cf 	.word	0x0800b7cf
 800403c:	0800b8ab 	.word	0x0800b8ab
 8004040:	0800b013 	.word	0x0800b013

08004044 <memp_free>:
{
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8004044:	2808      	cmp	r0, #8
 8004046:	d906      	bls.n	8004056 <memp_free+0x12>
 8004048:	4b07      	ldr	r3, [pc, #28]	; (8004068 <memp_free+0x24>)
 800404a:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800404e:	4907      	ldr	r1, [pc, #28]	; (800406c <memp_free+0x28>)
 8004050:	4807      	ldr	r0, [pc, #28]	; (8004070 <memp_free+0x2c>)
 8004052:	f005 b90d 	b.w	8009270 <iprintf>

  if (mem == NULL) {
 8004056:	b129      	cbz	r1, 8004064 <memp_free+0x20>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8004058:	4b06      	ldr	r3, [pc, #24]	; (8004074 <memp_free+0x30>)
 800405a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800405e:	3008      	adds	r0, #8
 8004060:	f7ff bf9a 	b.w	8003f98 <do_memp_free_pool.isra.1>
 8004064:	4770      	bx	lr
 8004066:	bf00      	nop
 8004068:	0800b7cf 	.word	0x0800b7cf
 800406c:	0800b890 	.word	0x0800b890
 8004070:	0800b013 	.word	0x0800b013
 8004074:	0800b8c8 	.word	0x0800b8c8

08004078 <netif_null_output_ip4>:
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
}
 8004078:	f06f 000b 	mvn.w	r0, #11
 800407c:	4770      	bx	lr
	...

08004080 <netif_issue_reports>:
{
 8004080:	b538      	push	{r3, r4, r5, lr}
 8004082:	460d      	mov	r5, r1
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8004084:	4604      	mov	r4, r0
 8004086:	b930      	cbnz	r0, 8004096 <netif_issue_reports+0x16>
 8004088:	4b0c      	ldr	r3, [pc, #48]	; (80040bc <netif_issue_reports+0x3c>)
 800408a:	f240 326d 	movw	r2, #877	; 0x36d
 800408e:	490c      	ldr	r1, [pc, #48]	; (80040c0 <netif_issue_reports+0x40>)
 8004090:	480c      	ldr	r0, [pc, #48]	; (80040c4 <netif_issue_reports+0x44>)
 8004092:	f005 f8ed 	bl	8009270 <iprintf>
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8004096:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 800409a:	f003 0205 	and.w	r2, r3, #5
 800409e:	2a05      	cmp	r2, #5
 80040a0:	d10b      	bne.n	80040ba <netif_issue_reports+0x3a>
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80040a2:	07ea      	lsls	r2, r5, #31
 80040a4:	d509      	bpl.n	80040ba <netif_issue_reports+0x3a>
 80040a6:	6862      	ldr	r2, [r4, #4]
 80040a8:	b13a      	cbz	r2, 80040ba <netif_issue_reports+0x3a>
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80040aa:	071b      	lsls	r3, r3, #28
 80040ac:	d505      	bpl.n	80040ba <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
 80040ae:	1d21      	adds	r1, r4, #4
 80040b0:	4620      	mov	r0, r4
}
 80040b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      etharp_gratuitous(netif);
 80040b6:	f7fe bd05 	b.w	8002ac4 <etharp_request>
 80040ba:	bd38      	pop	{r3, r4, r5, pc}
 80040bc:	0800b979 	.word	0x0800b979
 80040c0:	0800b9aa 	.word	0x0800b9aa
 80040c4:	0800b013 	.word	0x0800b013

080040c8 <netif_do_set_ipaddr>:
{
 80040c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80040ca:	4606      	mov	r6, r0
 80040cc:	4614      	mov	r4, r2
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80040ce:	460f      	mov	r7, r1
 80040d0:	b931      	cbnz	r1, 80040e0 <netif_do_set_ipaddr+0x18>
 80040d2:	4b15      	ldr	r3, [pc, #84]	; (8004128 <netif_do_set_ipaddr+0x60>)
 80040d4:	f240 12cb 	movw	r2, #459	; 0x1cb
 80040d8:	4914      	ldr	r1, [pc, #80]	; (800412c <netif_do_set_ipaddr+0x64>)
 80040da:	4815      	ldr	r0, [pc, #84]	; (8004130 <netif_do_set_ipaddr+0x68>)
 80040dc:	f005 f8c8 	bl	8009270 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80040e0:	b934      	cbnz	r4, 80040f0 <netif_do_set_ipaddr+0x28>
 80040e2:	4b11      	ldr	r3, [pc, #68]	; (8004128 <netif_do_set_ipaddr+0x60>)
 80040e4:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 80040e8:	4910      	ldr	r1, [pc, #64]	; (800412c <netif_do_set_ipaddr+0x64>)
 80040ea:	4811      	ldr	r0, [pc, #68]	; (8004130 <netif_do_set_ipaddr+0x68>)
 80040ec:	f005 f8c0 	bl	8009270 <iprintf>
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80040f0:	6873      	ldr	r3, [r6, #4]
 80040f2:	683a      	ldr	r2, [r7, #0]
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d014      	beq.n	8004122 <netif_do_set_ipaddr+0x5a>
    *ip_2_ip4(&new_addr) = *ipaddr;
 80040f8:	ad02      	add	r5, sp, #8
    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80040fa:	6023      	str	r3, [r4, #0]
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80040fc:	4620      	mov	r0, r4
    *ip_2_ip4(&new_addr) = *ipaddr;
 80040fe:	f845 2d04 	str.w	r2, [r5, #-4]!
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8004102:	4629      	mov	r1, r5
 8004104:	f001 f860 	bl	80051c8 <tcp_netif_ip_addr_changed>
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8004108:	4629      	mov	r1, r5
 800410a:	4620      	mov	r0, r4
 800410c:	f004 fb0c 	bl	8008728 <udp_netif_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8004110:	683b      	ldr	r3, [r7, #0]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8004112:	4630      	mov	r0, r6
 8004114:	2101      	movs	r1, #1
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8004116:	6073      	str	r3, [r6, #4]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8004118:	f7ff ffb2 	bl	8004080 <netif_issue_reports>
    return 1; /* address changed */
 800411c:	2001      	movs	r0, #1
}
 800411e:	b003      	add	sp, #12
 8004120:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return 0; /* address unchanged */
 8004122:	2000      	movs	r0, #0
 8004124:	e7fb      	b.n	800411e <netif_do_set_ipaddr+0x56>
 8004126:	bf00      	nop
 8004128:	0800b979 	.word	0x0800b979
 800412c:	0800b969 	.word	0x0800b969
 8004130:	0800b013 	.word	0x0800b013

08004134 <netif_init>:
{
 8004134:	4770      	bx	lr
	...

08004138 <netif_set_addr>:
{
 8004138:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    ipaddr = IP4_ADDR_ANY4;
 800413a:	4d14      	ldr	r5, [pc, #80]	; (800418c <netif_set_addr+0x54>)
{
 800413c:	4604      	mov	r4, r0
    ipaddr = IP4_ADDR_ANY4;
 800413e:	2900      	cmp	r1, #0
 8004140:	bf14      	ite	ne
 8004142:	460e      	movne	r6, r1
 8004144:	462e      	moveq	r6, r5
    netmask = IP4_ADDR_ANY4;
 8004146:	2a00      	cmp	r2, #0
 8004148:	bf14      	ite	ne
 800414a:	4617      	movne	r7, r2
 800414c:	462f      	moveq	r7, r5
    gw = IP4_ADDR_ANY4;
 800414e:	2b00      	cmp	r3, #0
 8004150:	bf18      	it	ne
 8004152:	461d      	movne	r5, r3
  remove = ip4_addr_isany(ipaddr);
 8004154:	6833      	ldr	r3, [r6, #0]
 8004156:	b193      	cbz	r3, 800417e <netif_set_addr+0x46>
 8004158:	2300      	movs	r3, #0
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800415a:	683a      	ldr	r2, [r7, #0]
 800415c:	68a1      	ldr	r1, [r4, #8]
 800415e:	428a      	cmp	r2, r1
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8004160:	68e1      	ldr	r1, [r4, #12]
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8004162:	bf18      	it	ne
 8004164:	60a2      	strne	r2, [r4, #8]
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8004166:	682a      	ldr	r2, [r5, #0]
 8004168:	428a      	cmp	r2, r1
    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800416a:	bf18      	it	ne
 800416c:	60e2      	strne	r2, [r4, #12]
  if (!remove) {
 800416e:	b923      	cbnz	r3, 800417a <netif_set_addr+0x42>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8004170:	aa01      	add	r2, sp, #4
 8004172:	4631      	mov	r1, r6
 8004174:	4620      	mov	r0, r4
 8004176:	f7ff ffa7 	bl	80040c8 <netif_do_set_ipaddr>
}
 800417a:	b003      	add	sp, #12
 800417c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800417e:	aa01      	add	r2, sp, #4
 8004180:	4631      	mov	r1, r6
 8004182:	f7ff ffa1 	bl	80040c8 <netif_do_set_ipaddr>
  remove = ip4_addr_isany(ipaddr);
 8004186:	2301      	movs	r3, #1
 8004188:	e7e7      	b.n	800415a <netif_set_addr+0x22>
 800418a:	bf00      	nop
 800418c:	0800b3e4 	.word	0x0800b3e4

08004190 <netif_add>:
{
 8004190:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004194:	469c      	mov	ip, r3
 8004196:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8004198:	4604      	mov	r4, r0
 800419a:	b948      	cbnz	r0, 80041b0 <netif_add+0x20>
 800419c:	4b3d      	ldr	r3, [pc, #244]	; (8004294 <netif_add+0x104>)
 800419e:	f240 1227 	movw	r2, #295	; 0x127
 80041a2:	493d      	ldr	r1, [pc, #244]	; (8004298 <netif_add+0x108>)
 80041a4:	483d      	ldr	r0, [pc, #244]	; (800429c <netif_add+0x10c>)
 80041a6:	f005 f863 	bl	8009270 <iprintf>
}
 80041aa:	4620      	mov	r0, r4
 80041ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80041b0:	b947      	cbnz	r7, 80041c4 <netif_add+0x34>
 80041b2:	4b38      	ldr	r3, [pc, #224]	; (8004294 <netif_add+0x104>)
 80041b4:	f44f 7294 	mov.w	r2, #296	; 0x128
 80041b8:	4939      	ldr	r1, [pc, #228]	; (80042a0 <netif_add+0x110>)
 80041ba:	463c      	mov	r4, r7
 80041bc:	4837      	ldr	r0, [pc, #220]	; (800429c <netif_add+0x10c>)
 80041be:	f005 f857 	bl	8009270 <iprintf>
 80041c2:	e7f2      	b.n	80041aa <netif_add+0x1a>
  netif->state = state;
 80041c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80041c6:	2500      	movs	r5, #0
  netif->output = netif_null_output_ip4;
 80041c8:	f8df e0e4 	ldr.w	lr, [pc, #228]	; 80042b0 <netif_add+0x120>
  netif->num = netif_num;
 80041cc:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 80042b4 <netif_add+0x124>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80041d0:	4e34      	ldr	r6, [pc, #208]	; (80042a4 <netif_add+0x114>)
  netif->output = netif_null_output_ip4;
 80041d2:	f8c0 e014 	str.w	lr, [r0, #20]
  netif->state = state;
 80041d6:	61c3      	str	r3, [r0, #28]
  netif_set_addr(netif, ipaddr, netmask, gw);
 80041d8:	42aa      	cmp	r2, r5
 80041da:	bf08      	it	eq
 80041dc:	4632      	moveq	r2, r6
  netif->num = netif_num;
 80041de:	f898 e000 	ldrb.w	lr, [r8]
  netif_set_addr(netif, ipaddr, netmask, gw);
 80041e2:	42a9      	cmp	r1, r5
 80041e4:	bf08      	it	eq
 80041e6:	4631      	moveq	r1, r6
  netif->input = input;
 80041e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  netif->num = netif_num;
 80041ea:	f880 e02c 	strb.w	lr, [r0, #44]	; 0x2c
  netif->input = input;
 80041ee:	6103      	str	r3, [r0, #16]
  netif_set_addr(netif, ipaddr, netmask, gw);
 80041f0:	45ac      	cmp	ip, r5
 80041f2:	bf14      	ite	ne
 80041f4:	4663      	movne	r3, ip
 80041f6:	4633      	moveq	r3, r6
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80041f8:	6045      	str	r5, [r0, #4]
 80041fa:	4646      	mov	r6, r8
  ip_addr_set_zero_ip4(&netif->netmask);
 80041fc:	6085      	str	r5, [r0, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80041fe:	60c5      	str	r5, [r0, #12]
  netif->mtu = 0;
 8004200:	8405      	strh	r5, [r0, #32]
  netif->flags = 0;
 8004202:	f880 5029 	strb.w	r5, [r0, #41]	; 0x29
  netif_set_addr(netif, ipaddr, netmask, gw);
 8004206:	f7ff ff97 	bl	8004138 <netif_set_addr>
  if (init(netif) != ERR_OK) {
 800420a:	4620      	mov	r0, r4
 800420c:	47b8      	blx	r7
 800420e:	2800      	cmp	r0, #0
 8004210:	d13e      	bne.n	8004290 <netif_add+0x100>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8004212:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 80042b8 <netif_add+0x128>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8004216:	f8df a07c 	ldr.w	sl, [pc, #124]	; 8004294 <netif_add+0x104>
 800421a:	46c8      	mov	r8, r9
      if (netif->num == 255) {
 800421c:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
      num_netifs = 0;
 8004220:	2700      	movs	r7, #0
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8004222:	f8d9 5000 	ldr.w	r5, [r9]
      if (netif->num == 255) {
 8004226:	2bff      	cmp	r3, #255	; 0xff
        LWIP_ASSERT("netif already added", netif2 != netif);
 8004228:	f8df b070 	ldr.w	fp, [pc, #112]	; 800429c <netif_add+0x10c>
        netif->num = 0;
 800422c:	bf04      	itt	eq
 800422e:	2300      	moveq	r3, #0
 8004230:	f884 302c 	strbeq.w	r3, [r4, #44]	; 0x2c
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8004234:	b955      	cbnz	r5, 800424c <netif_add+0xbc>
  if (netif->num == 254) {
 8004236:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800423a:	2bfe      	cmp	r3, #254	; 0xfe
 800423c:	d125      	bne.n	800428a <netif_add+0xfa>
    netif_num = 0;
 800423e:	7035      	strb	r5, [r6, #0]
  netif->next = netif_list;
 8004240:	f8d8 3000 	ldr.w	r3, [r8]
 8004244:	6023      	str	r3, [r4, #0]
  netif_list = netif;
 8004246:	f8c8 4000 	str.w	r4, [r8]
  return netif;
 800424a:	e7ae      	b.n	80041aa <netif_add+0x1a>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800424c:	42a5      	cmp	r5, r4
 800424e:	d106      	bne.n	800425e <netif_add+0xce>
 8004250:	4653      	mov	r3, sl
 8004252:	f240 128b 	movw	r2, #395	; 0x18b
 8004256:	4914      	ldr	r1, [pc, #80]	; (80042a8 <netif_add+0x118>)
 8004258:	4658      	mov	r0, fp
 800425a:	f005 f809 	bl	8009270 <iprintf>
        num_netifs++;
 800425e:	3701      	adds	r7, #1
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8004260:	2fff      	cmp	r7, #255	; 0xff
 8004262:	dd06      	ble.n	8004272 <netif_add+0xe2>
 8004264:	4653      	mov	r3, sl
 8004266:	f240 128d 	movw	r2, #397	; 0x18d
 800426a:	4910      	ldr	r1, [pc, #64]	; (80042ac <netif_add+0x11c>)
 800426c:	4658      	mov	r0, fp
 800426e:	f004 ffff 	bl	8009270 <iprintf>
        if (netif2->num == netif->num) {
 8004272:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
 8004276:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800427a:	4293      	cmp	r3, r2
 800427c:	d103      	bne.n	8004286 <netif_add+0xf6>
          netif->num++;
 800427e:	3301      	adds	r3, #1
 8004280:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 8004284:	e7ca      	b.n	800421c <netif_add+0x8c>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8004286:	682d      	ldr	r5, [r5, #0]
 8004288:	e7d4      	b.n	8004234 <netif_add+0xa4>
    netif_num = (u8_t)(netif->num + 1);
 800428a:	3301      	adds	r3, #1
 800428c:	7033      	strb	r3, [r6, #0]
 800428e:	e7d7      	b.n	8004240 <netif_add+0xb0>
    return NULL;
 8004290:	462c      	mov	r4, r5
 8004292:	e78a      	b.n	80041aa <netif_add+0x1a>
 8004294:	0800b979 	.word	0x0800b979
 8004298:	0800b8ec 	.word	0x0800b8ec
 800429c:	0800b013 	.word	0x0800b013
 80042a0:	0800b905 	.word	0x0800b905
 80042a4:	0800b3e4 	.word	0x0800b3e4
 80042a8:	0800b927 	.word	0x0800b927
 80042ac:	0800b93b 	.word	0x0800b93b
 80042b0:	08004079 	.word	0x08004079
 80042b4:	20000600 	.word	0x20000600
 80042b8:	20003b88 	.word	0x20003b88

080042bc <netif_set_default>:
  netif_default = netif;
 80042bc:	4b01      	ldr	r3, [pc, #4]	; (80042c4 <netif_set_default+0x8>)
 80042be:	6018      	str	r0, [r3, #0]
 80042c0:	4770      	bx	lr
 80042c2:	bf00      	nop
 80042c4:	20003b8c 	.word	0x20003b8c

080042c8 <netif_set_up>:
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80042c8:	b930      	cbnz	r0, 80042d8 <netif_set_up+0x10>
 80042ca:	4b09      	ldr	r3, [pc, #36]	; (80042f0 <netif_set_up+0x28>)
 80042cc:	f44f 7254 	mov.w	r2, #848	; 0x350
 80042d0:	4908      	ldr	r1, [pc, #32]	; (80042f4 <netif_set_up+0x2c>)
 80042d2:	4809      	ldr	r0, [pc, #36]	; (80042f8 <netif_set_up+0x30>)
 80042d4:	f004 bfcc 	b.w	8009270 <iprintf>
  if (!(netif->flags & NETIF_FLAG_UP)) {
 80042d8:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 80042dc:	07d9      	lsls	r1, r3, #31
 80042de:	d406      	bmi.n	80042ee <netif_set_up+0x26>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80042e0:	f043 0301 	orr.w	r3, r3, #1
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80042e4:	2103      	movs	r1, #3
    netif_set_flags(netif, NETIF_FLAG_UP);
 80042e6:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80042ea:	f7ff bec9 	b.w	8004080 <netif_issue_reports>
 80042ee:	4770      	bx	lr
 80042f0:	0800b979 	.word	0x0800b979
 80042f4:	0800b9eb 	.word	0x0800b9eb
 80042f8:	0800b013 	.word	0x0800b013

080042fc <netif_set_down>:
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80042fc:	b930      	cbnz	r0, 800430c <netif_set_down+0x10>
 80042fe:	4b0a      	ldr	r3, [pc, #40]	; (8004328 <netif_set_down+0x2c>)
 8004300:	f240 329b 	movw	r2, #923	; 0x39b
 8004304:	4909      	ldr	r1, [pc, #36]	; (800432c <netif_set_down+0x30>)
 8004306:	480a      	ldr	r0, [pc, #40]	; (8004330 <netif_set_down+0x34>)
 8004308:	f004 bfb2 	b.w	8009270 <iprintf>
  if (netif->flags & NETIF_FLAG_UP) {
 800430c:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8004310:	07d9      	lsls	r1, r3, #31
 8004312:	d507      	bpl.n	8004324 <netif_set_down+0x28>
    netif_clear_flags(netif, NETIF_FLAG_UP);
 8004314:	f023 0101 	bic.w	r1, r3, #1
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8004318:	071b      	lsls	r3, r3, #28
    netif_clear_flags(netif, NETIF_FLAG_UP);
 800431a:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800431e:	d501      	bpl.n	8004324 <netif_set_down+0x28>
      etharp_cleanup_netif(netif);
 8004320:	f7fe bb1e 	b.w	8002960 <etharp_cleanup_netif>
 8004324:	4770      	bx	lr
 8004326:	bf00      	nop
 8004328:	0800b979 	.word	0x0800b979
 800432c:	0800b9cd 	.word	0x0800b9cd
 8004330:	0800b013 	.word	0x0800b013

08004334 <netif_get_by_index>:
{
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8004334:	b150      	cbz	r0, 800434c <netif_get_by_index+0x18>
    NETIF_FOREACH(netif) {
 8004336:	4b06      	ldr	r3, [pc, #24]	; (8004350 <netif_get_by_index+0x1c>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	b12b      	cbz	r3, 8004348 <netif_get_by_index+0x14>
      if (idx == netif_get_index(netif)) {
 800433c:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8004340:	3201      	adds	r2, #1
 8004342:	b2d2      	uxtb	r2, r2
 8004344:	4290      	cmp	r0, r2
 8004346:	d1f7      	bne.n	8004338 <netif_get_by_index+0x4>
      }
    }
  }

  return NULL;
}
 8004348:	4618      	mov	r0, r3
 800434a:	4770      	bx	lr
  return NULL;
 800434c:	4603      	mov	r3, r0
 800434e:	e7fb      	b.n	8004348 <netif_get_by_index+0x14>
 8004350:	20003b88 	.word	0x20003b88

08004354 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8004354:	b538      	push	{r3, r4, r5, lr}
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8004356:	b968      	cbnz	r0, 8004374 <pbuf_add_header_impl+0x20>
 8004358:	4b14      	ldr	r3, [pc, #80]	; (80043ac <pbuf_add_header_impl+0x58>)
 800435a:	f240 12df 	movw	r2, #479	; 0x1df
 800435e:	4914      	ldr	r1, [pc, #80]	; (80043b0 <pbuf_add_header_impl+0x5c>)
 8004360:	4814      	ldr	r0, [pc, #80]	; (80043b4 <pbuf_add_header_impl+0x60>)
 8004362:	f004 ff85 	bl	8009270 <iprintf>
  }

  increment_magnitude = (u16_t)header_size_increment;
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
    return 1;
 8004366:	2001      	movs	r0, #1
 8004368:	bd38      	pop	{r3, r4, r5, pc}
      return 1;
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800436a:	2a00      	cmp	r2, #0
 800436c:	d0fb      	beq.n	8004366 <pbuf_add_header_impl+0x12>
      payload = (u8_t *)p->payload - header_size_increment;
 800436e:	6842      	ldr	r2, [r0, #4]
 8004370:	1a51      	subs	r1, r2, r1
 8004372:	e013      	b.n	800439c <pbuf_add_header_impl+0x48>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8004374:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8004378:	d2f5      	bcs.n	8004366 <pbuf_add_header_impl+0x12>
  if (header_size_increment == 0) {
 800437a:	b1a1      	cbz	r1, 80043a6 <pbuf_add_header_impl+0x52>
  increment_magnitude = (u16_t)header_size_increment;
 800437c:	b28c      	uxth	r4, r1
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800437e:	8903      	ldrh	r3, [r0, #8]
 8004380:	4423      	add	r3, r4
 8004382:	b29b      	uxth	r3, r3
 8004384:	429c      	cmp	r4, r3
 8004386:	d8ee      	bhi.n	8004366 <pbuf_add_header_impl+0x12>
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8004388:	f990 500c 	ldrsb.w	r5, [r0, #12]
 800438c:	2d00      	cmp	r5, #0
 800438e:	daec      	bge.n	800436a <pbuf_add_header_impl+0x16>
    payload = (u8_t *)p->payload - header_size_increment;
 8004390:	6842      	ldr	r2, [r0, #4]
 8004392:	1a51      	subs	r1, r2, r1
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8004394:	f100 0210 	add.w	r2, r0, #16
 8004398:	4291      	cmp	r1, r2
 800439a:	d3e4      	bcc.n	8004366 <pbuf_add_header_impl+0x12>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
  p->len = (u16_t)(p->len + increment_magnitude);
 800439c:	8942      	ldrh	r2, [r0, #10]
  p->payload = payload;
 800439e:	6041      	str	r1, [r0, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80043a0:	4414      	add	r4, r2
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80043a2:	8103      	strh	r3, [r0, #8]
  p->len = (u16_t)(p->len + increment_magnitude);
 80043a4:	8144      	strh	r4, [r0, #10]


  return 0;
 80043a6:	2000      	movs	r0, #0
 80043a8:	bd38      	pop	{r3, r4, r5, pc}
 80043aa:	bf00      	nop
 80043ac:	0800ba07 	.word	0x0800ba07
 80043b0:	0800bc19 	.word	0x0800bc19
 80043b4:	0800b013 	.word	0x0800b013

080043b8 <pbuf_free_ooseq>:
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80043b8:	4b06      	ldr	r3, [pc, #24]	; (80043d4 <pbuf_free_ooseq+0x1c>)
 80043ba:	2200      	movs	r2, #0
 80043bc:	701a      	strb	r2, [r3, #0]
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80043be:	4b06      	ldr	r3, [pc, #24]	; (80043d8 <pbuf_free_ooseq+0x20>)
 80043c0:	6818      	ldr	r0, [r3, #0]
 80043c2:	b900      	cbnz	r0, 80043c6 <pbuf_free_ooseq+0xe>
}
 80043c4:	4770      	bx	lr
    if (pcb->ooseq != NULL) {
 80043c6:	6f43      	ldr	r3, [r0, #116]	; 0x74
 80043c8:	b10b      	cbz	r3, 80043ce <pbuf_free_ooseq+0x16>
      tcp_free_ooseq(pcb);
 80043ca:	f000 bda3 	b.w	8004f14 <tcp_free_ooseq>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80043ce:	68c0      	ldr	r0, [r0, #12]
 80043d0:	e7f7      	b.n	80043c2 <pbuf_free_ooseq+0xa>
 80043d2:	bf00      	nop
 80043d4:	20003b90 	.word	0x20003b90
 80043d8:	20003b98 	.word	0x20003b98

080043dc <pbuf_alloc_reference>:
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80043dc:	f022 0340 	bic.w	r3, r2, #64	; 0x40
 80043e0:	2b01      	cmp	r3, #1
{
 80043e2:	b570      	push	{r4, r5, r6, lr}
 80043e4:	4606      	mov	r6, r0
 80043e6:	460d      	mov	r5, r1
 80043e8:	4614      	mov	r4, r2
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80043ea:	d006      	beq.n	80043fa <pbuf_alloc_reference+0x1e>
 80043ec:	4b0a      	ldr	r3, [pc, #40]	; (8004418 <pbuf_alloc_reference+0x3c>)
 80043ee:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 80043f2:	490a      	ldr	r1, [pc, #40]	; (800441c <pbuf_alloc_reference+0x40>)
 80043f4:	480a      	ldr	r0, [pc, #40]	; (8004420 <pbuf_alloc_reference+0x44>)
 80043f6:	f004 ff3b 	bl	8009270 <iprintf>
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80043fa:	2007      	movs	r0, #7
 80043fc:	f7ff fe06 	bl	800400c <memp_malloc>
  if (p == NULL) {
 8004400:	b148      	cbz	r0, 8004416 <pbuf_alloc_reference+0x3a>
  p->next = NULL;
 8004402:	2300      	movs	r3, #0
  p->ref = 1;
 8004404:	2201      	movs	r2, #1
  p->tot_len = tot_len;
 8004406:	8105      	strh	r5, [r0, #8]
  p->len = len;
 8004408:	8145      	strh	r5, [r0, #10]
  p->type_internal = (u8_t)type;
 800440a:	7304      	strb	r4, [r0, #12]
  p->flags = flags;
 800440c:	7343      	strb	r3, [r0, #13]
  p->ref = 1;
 800440e:	7382      	strb	r2, [r0, #14]
  p->if_idx = NETIF_NO_INDEX;
 8004410:	73c3      	strb	r3, [r0, #15]
  p->payload = payload;
 8004412:	e880 0048 	stmia.w	r0, {r3, r6}
}
 8004416:	bd70      	pop	{r4, r5, r6, pc}
 8004418:	0800ba07 	.word	0x0800ba07
 800441c:	0800ba52 	.word	0x0800ba52
 8004420:	0800b013 	.word	0x0800b013

08004424 <pbuf_alloced_custom>:
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8004424:	3003      	adds	r0, #3
 8004426:	f020 0003 	bic.w	r0, r0, #3
{
 800442a:	b570      	push	{r4, r5, r6, lr}
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800442c:	180e      	adds	r6, r1, r0
 800442e:	f8bd 5014 	ldrh.w	r5, [sp, #20]
{
 8004432:	9c04      	ldr	r4, [sp, #16]
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8004434:	42ae      	cmp	r6, r5
 8004436:	d80e      	bhi.n	8004456 <pbuf_alloced_custom+0x32>
  if (payload_mem != NULL) {
 8004438:	b104      	cbz	r4, 800443c <pbuf_alloced_custom+0x18>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800443a:	4404      	add	r4, r0
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800443c:	4618      	mov	r0, r3
  p->next = NULL;
 800443e:	2300      	movs	r3, #0
  p->type_internal = (u8_t)type;
 8004440:	7302      	strb	r2, [r0, #12]
  p->flags = flags;
 8004442:	2202      	movs	r2, #2
  p->tot_len = tot_len;
 8004444:	8101      	strh	r1, [r0, #8]
  p->flags = flags;
 8004446:	7342      	strb	r2, [r0, #13]
  p->ref = 1;
 8004448:	2201      	movs	r2, #1
  p->len = len;
 800444a:	8141      	strh	r1, [r0, #10]
  p->ref = 1;
 800444c:	7382      	strb	r2, [r0, #14]
  p->if_idx = NETIF_NO_INDEX;
 800444e:	73c3      	strb	r3, [r0, #15]
  p->payload = payload;
 8004450:	e880 0018 	stmia.w	r0, {r3, r4}
  return &p->pbuf;
 8004454:	bd70      	pop	{r4, r5, r6, pc}
    return NULL;
 8004456:	2000      	movs	r0, #0
}
 8004458:	bd70      	pop	{r4, r5, r6, pc}

0800445a <pbuf_add_header>:
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800445a:	2200      	movs	r2, #0
 800445c:	f7ff bf7a 	b.w	8004354 <pbuf_add_header_impl>

08004460 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8004460:	b510      	push	{r4, lr}
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8004462:	b990      	cbnz	r0, 800448a <pbuf_remove_header+0x2a>
 8004464:	4b10      	ldr	r3, [pc, #64]	; (80044a8 <pbuf_remove_header+0x48>)
 8004466:	f240 224b 	movw	r2, #587	; 0x24b
 800446a:	4910      	ldr	r1, [pc, #64]	; (80044ac <pbuf_remove_header+0x4c>)
    return 0;
  }

  increment_magnitude = (u16_t)header_size_decrement;
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800446c:	4810      	ldr	r0, [pc, #64]	; (80044b0 <pbuf_remove_header+0x50>)
 800446e:	f004 feff 	bl	8009270 <iprintf>
    return 1;
 8004472:	2001      	movs	r0, #1
 8004474:	bd10      	pop	{r4, pc}
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8004476:	1a9b      	subs	r3, r3, r2
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8004478:	6844      	ldr	r4, [r0, #4]
  p->len = (u16_t)(p->len - increment_magnitude);
 800447a:	8143      	strh	r3, [r0, #10]
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800447c:	4421      	add	r1, r4
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800447e:	8903      	ldrh	r3, [r0, #8]
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8004480:	6041      	str	r1, [r0, #4]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8004482:	1a9b      	subs	r3, r3, r2
 8004484:	8103      	strh	r3, [r0, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8004486:	2000      	movs	r0, #0
 8004488:	bd10      	pop	{r4, pc}
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800448a:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800448e:	d2f0      	bcs.n	8004472 <pbuf_remove_header+0x12>
  if (header_size_decrement == 0) {
 8004490:	2900      	cmp	r1, #0
 8004492:	d0f8      	beq.n	8004486 <pbuf_remove_header+0x26>
  increment_magnitude = (u16_t)header_size_decrement;
 8004494:	b28a      	uxth	r2, r1
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8004496:	8943      	ldrh	r3, [r0, #10]
 8004498:	429a      	cmp	r2, r3
 800449a:	d9ec      	bls.n	8004476 <pbuf_remove_header+0x16>
 800449c:	4b02      	ldr	r3, [pc, #8]	; (80044a8 <pbuf_remove_header+0x48>)
 800449e:	f240 2255 	movw	r2, #597	; 0x255
 80044a2:	4904      	ldr	r1, [pc, #16]	; (80044b4 <pbuf_remove_header+0x54>)
 80044a4:	e7e2      	b.n	800446c <pbuf_remove_header+0xc>
 80044a6:	bf00      	nop
 80044a8:	0800ba07 	.word	0x0800ba07
 80044ac:	0800bc19 	.word	0x0800bc19
 80044b0:	0800b013 	.word	0x0800b013
 80044b4:	0800bc69 	.word	0x0800bc69

080044b8 <pbuf_header_force>:
}

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
  if (header_size_increment < 0) {
 80044b8:	1e0b      	subs	r3, r1, #0
 80044ba:	da02      	bge.n	80044c2 <pbuf_header_force+0xa>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80044bc:	4259      	negs	r1, r3
 80044be:	f7ff bfcf 	b.w	8004460 <pbuf_remove_header>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80044c2:	2201      	movs	r2, #1
 80044c4:	f7ff bf46 	b.w	8004354 <pbuf_add_header_impl>

080044c8 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80044c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80044cc:	4604      	mov	r4, r0
 80044ce:	b348      	cbz	r0, 8004524 <pbuf_free+0x5c>
 80044d0:	2500      	movs	r5, #0
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80044d2:	4e28      	ldr	r6, [pc, #160]	; (8004574 <pbuf_free+0xac>)
 80044d4:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8004588 <pbuf_free+0xc0>
 80044d8:	4f27      	ldr	r7, [pc, #156]	; (8004578 <pbuf_free+0xb0>)
 80044da:	fa5f f885 	uxtb.w	r8, r5
  while (p != NULL) {
 80044de:	b34c      	cbz	r4, 8004534 <pbuf_free+0x6c>
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80044e0:	7ba3      	ldrb	r3, [r4, #14]
 80044e2:	b933      	cbnz	r3, 80044f2 <pbuf_free+0x2a>
 80044e4:	4633      	mov	r3, r6
 80044e6:	f240 22f1 	movw	r2, #753	; 0x2f1
 80044ea:	4649      	mov	r1, r9
 80044ec:	4638      	mov	r0, r7
 80044ee:	f004 febf 	bl	8009270 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80044f2:	7ba3      	ldrb	r3, [r4, #14]
 80044f4:	3b01      	subs	r3, #1
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	73a3      	strb	r3, [r4, #14]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80044fa:	b9db      	cbnz	r3, 8004534 <pbuf_free+0x6c>
      q = p->next;
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80044fc:	7b63      	ldrb	r3, [r4, #13]
      q = p->next;
 80044fe:	f8d4 8000 	ldr.w	r8, [r4]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8004502:	079b      	lsls	r3, r3, #30
 8004504:	d519      	bpl.n	800453a <pbuf_free+0x72>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8004506:	6923      	ldr	r3, [r4, #16]
 8004508:	b933      	cbnz	r3, 8004518 <pbuf_free+0x50>
 800450a:	4633      	mov	r3, r6
 800450c:	f240 22ff 	movw	r2, #767	; 0x2ff
 8004510:	491a      	ldr	r1, [pc, #104]	; (800457c <pbuf_free+0xb4>)
 8004512:	4638      	mov	r0, r7
 8004514:	f004 feac 	bl	8009270 <iprintf>
        pc->custom_free_function(p);
 8004518:	6923      	ldr	r3, [r4, #16]
 800451a:	4620      	mov	r0, r4
 800451c:	4798      	blx	r3
 800451e:	3501      	adds	r5, #1
          LWIP_ASSERT("invalid pbuf type", 0);
        }
      }
      count++;
      /* proceed to next pbuf */
      p = q;
 8004520:	4644      	mov	r4, r8
 8004522:	e7da      	b.n	80044da <pbuf_free+0x12>
    return 0;
 8004524:	46a0      	mov	r8, r4
    LWIP_ASSERT("p != NULL", p != NULL);
 8004526:	4b13      	ldr	r3, [pc, #76]	; (8004574 <pbuf_free+0xac>)
 8004528:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800452c:	4914      	ldr	r1, [pc, #80]	; (8004580 <pbuf_free+0xb8>)
 800452e:	4812      	ldr	r0, [pc, #72]	; (8004578 <pbuf_free+0xb0>)
 8004530:	f004 fe9e 	bl	8009270 <iprintf>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
}
 8004534:	4640      	mov	r0, r8
 8004536:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      alloc_src = pbuf_get_allocsrc(p);
 800453a:	7b23      	ldrb	r3, [r4, #12]
 800453c:	f003 030f 	and.w	r3, r3, #15
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8004540:	2b02      	cmp	r3, #2
 8004542:	d104      	bne.n	800454e <pbuf_free+0x86>
          memp_free(MEMP_PBUF_POOL, p);
 8004544:	4621      	mov	r1, r4
 8004546:	2008      	movs	r0, #8
          memp_free(MEMP_PBUF, p);
 8004548:	f7ff fd7c 	bl	8004044 <memp_free>
 800454c:	e7e7      	b.n	800451e <pbuf_free+0x56>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800454e:	2b01      	cmp	r3, #1
 8004550:	d102      	bne.n	8004558 <pbuf_free+0x90>
          memp_free(MEMP_PBUF, p);
 8004552:	4621      	mov	r1, r4
 8004554:	2007      	movs	r0, #7
 8004556:	e7f7      	b.n	8004548 <pbuf_free+0x80>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8004558:	b91b      	cbnz	r3, 8004562 <pbuf_free+0x9a>
          mem_free(p);
 800455a:	4620      	mov	r0, r4
 800455c:	f7ff fb10 	bl	8003b80 <mem_free>
 8004560:	e7dd      	b.n	800451e <pbuf_free+0x56>
          LWIP_ASSERT("invalid pbuf type", 0);
 8004562:	4633      	mov	r3, r6
 8004564:	f240 320f 	movw	r2, #783	; 0x30f
 8004568:	4906      	ldr	r1, [pc, #24]	; (8004584 <pbuf_free+0xbc>)
 800456a:	4638      	mov	r0, r7
 800456c:	f004 fe80 	bl	8009270 <iprintf>
 8004570:	e7d5      	b.n	800451e <pbuf_free+0x56>
 8004572:	bf00      	nop
 8004574:	0800ba07 	.word	0x0800ba07
 8004578:	0800b013 	.word	0x0800b013
 800457c:	0800bbd8 	.word	0x0800bbd8
 8004580:	0800bc19 	.word	0x0800bc19
 8004584:	0800bbf9 	.word	0x0800bbf9
 8004588:	0800bbc2 	.word	0x0800bbc2

0800458c <pbuf_alloc>:
  switch (type) {
 800458c:	2a41      	cmp	r2, #65	; 0x41
{
 800458e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004592:	4606      	mov	r6, r0
 8004594:	460f      	mov	r7, r1
  u16_t offset = (u16_t)layer;
 8004596:	b285      	uxth	r5, r0
  switch (type) {
 8004598:	d034      	beq.n	8004604 <pbuf_alloc+0x78>
 800459a:	d809      	bhi.n	80045b0 <pbuf_alloc+0x24>
 800459c:	2a01      	cmp	r2, #1
 800459e:	d031      	beq.n	8004604 <pbuf_alloc+0x78>
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80045a0:	4b3a      	ldr	r3, [pc, #232]	; (800468c <pbuf_alloc+0x100>)
 80045a2:	f240 1227 	movw	r2, #295	; 0x127
 80045a6:	493a      	ldr	r1, [pc, #232]	; (8004690 <pbuf_alloc+0x104>)
 80045a8:	483a      	ldr	r0, [pc, #232]	; (8004694 <pbuf_alloc+0x108>)
 80045aa:	f004 fe61 	bl	8009270 <iprintf>
 80045ae:	e03e      	b.n	800462e <pbuf_alloc+0xa2>
  switch (type) {
 80045b0:	f5b2 7fc1 	cmp.w	r2, #386	; 0x182
 80045b4:	d02c      	beq.n	8004610 <pbuf_alloc+0x84>
 80045b6:	f5b2 7f20 	cmp.w	r2, #640	; 0x280
 80045ba:	d1f1      	bne.n	80045a0 <pbuf_alloc+0x14>
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80045bc:	3503      	adds	r5, #3
 80045be:	1ccb      	adds	r3, r1, #3
 80045c0:	f025 0503 	bic.w	r5, r5, #3
 80045c4:	f023 0303 	bic.w	r3, r3, #3
 80045c8:	441d      	add	r5, r3
 80045ca:	b2ad      	uxth	r5, r5
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80045cc:	f105 0010 	add.w	r0, r5, #16
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80045d0:	429d      	cmp	r5, r3
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80045d2:	b280      	uxth	r0, r0
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80045d4:	d32b      	bcc.n	800462e <pbuf_alloc+0xa2>
 80045d6:	4283      	cmp	r3, r0
 80045d8:	d829      	bhi.n	800462e <pbuf_alloc+0xa2>
      p = (struct pbuf *)mem_malloc(alloc_len);
 80045da:	f7ff fc25 	bl	8003e28 <mem_malloc>
      if (p == NULL) {
 80045de:	4604      	mov	r4, r0
 80045e0:	2800      	cmp	r0, #0
 80045e2:	d04d      	beq.n	8004680 <pbuf_alloc+0xf4>
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80045e4:	4406      	add	r6, r0
  p->type_internal = (u8_t)type;
 80045e6:	2280      	movs	r2, #128	; 0x80
  p->next = NULL;
 80045e8:	2300      	movs	r3, #0
  p->tot_len = tot_len;
 80045ea:	8107      	strh	r7, [r0, #8]
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80045ec:	3613      	adds	r6, #19
  p->type_internal = (u8_t)type;
 80045ee:	7302      	strb	r2, [r0, #12]
  p->ref = 1;
 80045f0:	2201      	movs	r2, #1
  p->next = NULL;
 80045f2:	6003      	str	r3, [r0, #0]
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80045f4:	f026 0603 	bic.w	r6, r6, #3
  p->len = len;
 80045f8:	8147      	strh	r7, [r0, #10]
  p->flags = flags;
 80045fa:	7343      	strb	r3, [r0, #13]
  p->payload = payload;
 80045fc:	6046      	str	r6, [r0, #4]
  p->ref = 1;
 80045fe:	7382      	strb	r2, [r0, #14]
  p->if_idx = NETIF_NO_INDEX;
 8004600:	73c3      	strb	r3, [r0, #15]
 8004602:	e03d      	b.n	8004680 <pbuf_alloc+0xf4>
      p = pbuf_alloc_reference(NULL, length, type);
 8004604:	4639      	mov	r1, r7
 8004606:	2000      	movs	r0, #0
}
 8004608:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
      p = pbuf_alloc_reference(NULL, length, type);
 800460c:	f7ff bee6 	b.w	80043dc <pbuf_alloc_reference>
  switch (type) {
 8004610:	f04f 0a00 	mov.w	sl, #0
  p->type_internal = (u8_t)type;
 8004614:	f04f 0982 	mov.w	r9, #130	; 0x82
  switch (type) {
 8004618:	4654      	mov	r4, sl
  p->next = NULL;
 800461a:	46d0      	mov	r8, sl
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800461c:	2008      	movs	r0, #8
 800461e:	f7ff fcf5 	bl	800400c <memp_malloc>
        if (q == NULL) {
 8004622:	4606      	mov	r6, r0
 8004624:	b948      	cbnz	r0, 800463a <pbuf_alloc+0xae>
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8004626:	2201      	movs	r2, #1
 8004628:	4b1b      	ldr	r3, [pc, #108]	; (8004698 <pbuf_alloc+0x10c>)
 800462a:	701a      	strb	r2, [r3, #0]
          if (p) {
 800462c:	b90c      	cbnz	r4, 8004632 <pbuf_alloc+0xa6>
      return NULL;
 800462e:	2400      	movs	r4, #0
 8004630:	e026      	b.n	8004680 <pbuf_alloc+0xf4>
            pbuf_free(p);
 8004632:	4620      	mov	r0, r4
 8004634:	f7ff ff48 	bl	80044c8 <pbuf_free>
 8004638:	e7f9      	b.n	800462e <pbuf_alloc+0xa2>
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800463a:	1ceb      	adds	r3, r5, #3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800463c:	4405      	add	r5, r0
  p->ref = 1;
 800463e:	2201      	movs	r2, #1
  p->next = NULL;
 8004640:	f8c0 8000 	str.w	r8, [r0]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8004644:	f023 0303 	bic.w	r3, r3, #3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8004648:	3513      	adds	r5, #19
  p->tot_len = tot_len;
 800464a:	8107      	strh	r7, [r0, #8]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800464c:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8004650:	f025 0503 	bic.w	r5, r5, #3
  p->type_internal = (u8_t)type;
 8004654:	f880 900c 	strb.w	r9, [r0, #12]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8004658:	b29b      	uxth	r3, r3
  p->payload = payload;
 800465a:	6045      	str	r5, [r0, #4]
  p->flags = flags;
 800465c:	f880 800d 	strb.w	r8, [r0, #13]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8004660:	42bb      	cmp	r3, r7
  p->ref = 1;
 8004662:	7382      	strb	r2, [r0, #14]
  p->if_idx = NETIF_NO_INDEX;
 8004664:	f880 800f 	strb.w	r8, [r0, #15]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8004668:	bf28      	it	cs
 800466a:	463b      	movcs	r3, r7
  p->len = len;
 800466c:	8143      	strh	r3, [r0, #10]
        if (p == NULL) {
 800466e:	b154      	cbz	r4, 8004686 <pbuf_alloc+0xfa>
          last->next = q;
 8004670:	f8ca 0000 	str.w	r0, [sl]
        rem_len = (u16_t)(rem_len - qlen);
 8004674:	1afb      	subs	r3, r7, r3
        offset = 0;
 8004676:	2500      	movs	r5, #0
 8004678:	46b2      	mov	sl, r6
        rem_len = (u16_t)(rem_len - qlen);
 800467a:	b29f      	uxth	r7, r3
      } while (rem_len > 0);
 800467c:	2f00      	cmp	r7, #0
 800467e:	d1cd      	bne.n	800461c <pbuf_alloc+0x90>
}
 8004680:	4620      	mov	r0, r4
 8004682:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004686:	4604      	mov	r4, r0
 8004688:	e7f4      	b.n	8004674 <pbuf_alloc+0xe8>
 800468a:	bf00      	nop
 800468c:	0800ba07 	.word	0x0800ba07
 8004690:	0800ba37 	.word	0x0800ba37
 8004694:	0800b013 	.word	0x0800b013
 8004698:	20003b90 	.word	0x20003b90

0800469c <pbuf_realloc>:
{
 800469c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80046a0:	460d      	mov	r5, r1
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80046a2:	4604      	mov	r4, r0
 80046a4:	b930      	cbnz	r0, 80046b4 <pbuf_realloc+0x18>
 80046a6:	4b24      	ldr	r3, [pc, #144]	; (8004738 <pbuf_realloc+0x9c>)
 80046a8:	f44f 72cc 	mov.w	r2, #408	; 0x198
 80046ac:	4923      	ldr	r1, [pc, #140]	; (800473c <pbuf_realloc+0xa0>)
 80046ae:	4824      	ldr	r0, [pc, #144]	; (8004740 <pbuf_realloc+0xa4>)
 80046b0:	f004 fdde 	bl	8009270 <iprintf>
  if (new_len >= p->tot_len) {
 80046b4:	8923      	ldrh	r3, [r4, #8]
 80046b6:	42ab      	cmp	r3, r5
 80046b8:	d93b      	bls.n	8004732 <pbuf_realloc+0x96>
  shrink = (u16_t)(p->tot_len - new_len);
 80046ba:	1b5b      	subs	r3, r3, r5
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80046bc:	4f1e      	ldr	r7, [pc, #120]	; (8004738 <pbuf_realloc+0x9c>)
 80046be:	f8df 8088 	ldr.w	r8, [pc, #136]	; 8004748 <pbuf_realloc+0xac>
  shrink = (u16_t)(p->tot_len - new_len);
 80046c2:	b29e      	uxth	r6, r3
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80046c4:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8004740 <pbuf_realloc+0xa4>
  while (rem_len > q->len) {
 80046c8:	8963      	ldrh	r3, [r4, #10]
 80046ca:	429d      	cmp	r5, r3
 80046cc:	d819      	bhi.n	8004702 <pbuf_realloc+0x66>
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80046ce:	7b22      	ldrb	r2, [r4, #12]
 80046d0:	0712      	lsls	r2, r2, #28
 80046d2:	d126      	bne.n	8004722 <pbuf_realloc+0x86>
 80046d4:	429d      	cmp	r5, r3
 80046d6:	d024      	beq.n	8004722 <pbuf_realloc+0x86>
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80046d8:	7b63      	ldrb	r3, [r4, #13]
 80046da:	079b      	lsls	r3, r3, #30
 80046dc:	d421      	bmi.n	8004722 <pbuf_realloc+0x86>
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80046de:	6861      	ldr	r1, [r4, #4]
 80046e0:	4620      	mov	r0, r4
 80046e2:	1b09      	subs	r1, r1, r4
 80046e4:	4429      	add	r1, r5
 80046e6:	b289      	uxth	r1, r1
 80046e8:	f7ff fb04 	bl	8003cf4 <mem_trim>
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80046ec:	4604      	mov	r4, r0
 80046ee:	b9c0      	cbnz	r0, 8004722 <pbuf_realloc+0x86>
 80046f0:	4b11      	ldr	r3, [pc, #68]	; (8004738 <pbuf_realloc+0x9c>)
 80046f2:	f240 12bd 	movw	r2, #445	; 0x1bd
 80046f6:	4913      	ldr	r1, [pc, #76]	; (8004744 <pbuf_realloc+0xa8>)
 80046f8:	4811      	ldr	r0, [pc, #68]	; (8004740 <pbuf_realloc+0xa4>)
 80046fa:	f004 fdb9 	bl	8009270 <iprintf>
  q->len = rem_len;
 80046fe:	8164      	strh	r4, [r4, #10]
 8004700:	deff      	udf	#255	; 0xff
    rem_len = (u16_t)(rem_len - q->len);
 8004702:	1aed      	subs	r5, r5, r3
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8004704:	8923      	ldrh	r3, [r4, #8]
 8004706:	1b9b      	subs	r3, r3, r6
    rem_len = (u16_t)(rem_len - q->len);
 8004708:	b2ad      	uxth	r5, r5
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800470a:	8123      	strh	r3, [r4, #8]
    q = q->next;
 800470c:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800470e:	2c00      	cmp	r4, #0
 8004710:	d1da      	bne.n	80046c8 <pbuf_realloc+0x2c>
 8004712:	463b      	mov	r3, r7
 8004714:	f240 12af 	movw	r2, #431	; 0x1af
 8004718:	4641      	mov	r1, r8
 800471a:	4648      	mov	r0, r9
 800471c:	f004 fda8 	bl	8009270 <iprintf>
 8004720:	e7d2      	b.n	80046c8 <pbuf_realloc+0x2c>
  if (q->next != NULL) {
 8004722:	6820      	ldr	r0, [r4, #0]
  q->len = rem_len;
 8004724:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
 8004726:	8125      	strh	r5, [r4, #8]
  if (q->next != NULL) {
 8004728:	b108      	cbz	r0, 800472e <pbuf_realloc+0x92>
    pbuf_free(q->next);
 800472a:	f7ff fecd 	bl	80044c8 <pbuf_free>
  q->next = NULL;
 800472e:	2300      	movs	r3, #0
 8004730:	6023      	str	r3, [r4, #0]
 8004732:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004736:	bf00      	nop
 8004738:	0800ba07 	.word	0x0800ba07
 800473c:	0800bc0b 	.word	0x0800bc0b
 8004740:	0800b013 	.word	0x0800b013
 8004744:	0800bc3b 	.word	0x0800bc3b
 8004748:	0800bc23 	.word	0x0800bc23

0800474c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800474c:	4603      	mov	r3, r0
  u16_t len;

  len = 0;
  while (p != NULL) {
 800474e:	2200      	movs	r2, #0
 8004750:	b290      	uxth	r0, r2
 8004752:	3201      	adds	r2, #1
 8004754:	b903      	cbnz	r3, 8004758 <pbuf_clen+0xc>
    ++len;
    p = p->next;
  }
  return len;
}
 8004756:	4770      	bx	lr
    p = p->next;
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	e7f9      	b.n	8004750 <pbuf_clen+0x4>

0800475c <pbuf_ref>:
 */
void
pbuf_ref(struct pbuf *p)
{
  /* pbuf given? */
  if (p != NULL) {
 800475c:	b158      	cbz	r0, 8004776 <pbuf_ref+0x1a>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800475e:	7b83      	ldrb	r3, [r0, #14]
 8004760:	3301      	adds	r3, #1
 8004762:	b2db      	uxtb	r3, r3
 8004764:	7383      	strb	r3, [r0, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8004766:	b933      	cbnz	r3, 8004776 <pbuf_ref+0x1a>
 8004768:	4b03      	ldr	r3, [pc, #12]	; (8004778 <pbuf_ref+0x1c>)
 800476a:	f240 3242 	movw	r2, #834	; 0x342
 800476e:	4903      	ldr	r1, [pc, #12]	; (800477c <pbuf_ref+0x20>)
 8004770:	4803      	ldr	r0, [pc, #12]	; (8004780 <pbuf_ref+0x24>)
 8004772:	f004 bd7d 	b.w	8009270 <iprintf>
 8004776:	4770      	bx	lr
 8004778:	0800ba07 	.word	0x0800ba07
 800477c:	0800bc57 	.word	0x0800bc57
 8004780:	0800b013 	.word	0x0800b013

08004784 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8004784:	b570      	push	{r4, r5, r6, lr}
 8004786:	460d      	mov	r5, r1
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8004788:	4604      	mov	r4, r0
 800478a:	b100      	cbz	r0, 800478e <pbuf_cat+0xa>
 800478c:	b969      	cbnz	r1, 80047aa <pbuf_cat+0x26>
 800478e:	4b15      	ldr	r3, [pc, #84]	; (80047e4 <pbuf_cat+0x60>)
 8004790:	f240 325a 	movw	r2, #858	; 0x35a
 8004794:	4914      	ldr	r1, [pc, #80]	; (80047e8 <pbuf_cat+0x64>)
 8004796:	4815      	ldr	r0, [pc, #84]	; (80047ec <pbuf_cat+0x68>)
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8004798:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800479c:	f004 bd68 	b.w	8009270 <iprintf>
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80047a0:	8923      	ldrh	r3, [r4, #8]
 80047a2:	8929      	ldrh	r1, [r5, #8]
 80047a4:	440b      	add	r3, r1
 80047a6:	8123      	strh	r3, [r4, #8]
 80047a8:	4614      	mov	r4, r2
  for (p = h; p->next != NULL; p = p->next) {
 80047aa:	6822      	ldr	r2, [r4, #0]
 80047ac:	2a00      	cmp	r2, #0
 80047ae:	d1f7      	bne.n	80047a0 <pbuf_cat+0x1c>
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80047b0:	8922      	ldrh	r2, [r4, #8]
 80047b2:	8963      	ldrh	r3, [r4, #10]
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d006      	beq.n	80047c6 <pbuf_cat+0x42>
 80047b8:	4b0a      	ldr	r3, [pc, #40]	; (80047e4 <pbuf_cat+0x60>)
 80047ba:	f240 3262 	movw	r2, #866	; 0x362
 80047be:	490c      	ldr	r1, [pc, #48]	; (80047f0 <pbuf_cat+0x6c>)
 80047c0:	480a      	ldr	r0, [pc, #40]	; (80047ec <pbuf_cat+0x68>)
 80047c2:	f004 fd55 	bl	8009270 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80047c6:	6823      	ldr	r3, [r4, #0]
 80047c8:	b133      	cbz	r3, 80047d8 <pbuf_cat+0x54>
 80047ca:	4b06      	ldr	r3, [pc, #24]	; (80047e4 <pbuf_cat+0x60>)
 80047cc:	f240 3263 	movw	r2, #867	; 0x363
 80047d0:	4908      	ldr	r1, [pc, #32]	; (80047f4 <pbuf_cat+0x70>)
 80047d2:	4806      	ldr	r0, [pc, #24]	; (80047ec <pbuf_cat+0x68>)
 80047d4:	f004 fd4c 	bl	8009270 <iprintf>
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80047d8:	892a      	ldrh	r2, [r5, #8]
 80047da:	8923      	ldrh	r3, [r4, #8]
  p->next = t;
 80047dc:	6025      	str	r5, [r4, #0]
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80047de:	4413      	add	r3, r2
 80047e0:	8123      	strh	r3, [r4, #8]
  p->next = t;
 80047e2:	bd70      	pop	{r4, r5, r6, pc}
 80047e4:	0800ba07 	.word	0x0800ba07
 80047e8:	0800ba64 	.word	0x0800ba64
 80047ec:	0800b013 	.word	0x0800b013
 80047f0:	0800ba99 	.word	0x0800ba99
 80047f4:	0800bac6 	.word	0x0800bac6

080047f8 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80047f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047fc:	460c      	mov	r4, r1

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80047fe:	4605      	mov	r5, r0
 8004800:	b120      	cbz	r0, 800480c <pbuf_copy+0x14>
 8004802:	b119      	cbz	r1, 800480c <pbuf_copy+0x14>
 8004804:	8902      	ldrh	r2, [r0, #8]
 8004806:	890b      	ldrh	r3, [r1, #8]
 8004808:	429a      	cmp	r2, r3
 800480a:	d20a      	bcs.n	8004822 <pbuf_copy+0x2a>
 800480c:	4b36      	ldr	r3, [pc, #216]	; (80048e8 <pbuf_copy+0xf0>)
 800480e:	f240 32ca 	movw	r2, #970	; 0x3ca
 8004812:	4936      	ldr	r1, [pc, #216]	; (80048ec <pbuf_copy+0xf4>)
    }
    if (offset_to == p_to->len) {
      /* on to next p_to (if any) */
      offset_to = 0;
      p_to = p_to->next;
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8004814:	4836      	ldr	r0, [pc, #216]	; (80048f0 <pbuf_copy+0xf8>)
 8004816:	f004 fd2b 	bl	8009270 <iprintf>
 800481a:	f06f 000f 	mvn.w	r0, #15
 800481e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004822:	2600      	movs	r6, #0
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8004824:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 80048e8 <pbuf_copy+0xf0>
 8004828:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 8004900 <pbuf_copy+0x108>
 800482c:	4637      	mov	r7, r6
 800482e:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 80048f0 <pbuf_copy+0xf8>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8004832:	f8b5 800a 	ldrh.w	r8, [r5, #10]
 8004836:	8963      	ldrh	r3, [r4, #10]
 8004838:	eba8 0807 	sub.w	r8, r8, r7
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800483c:	6868      	ldr	r0, [r5, #4]
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800483e:	1b9b      	subs	r3, r3, r6
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8004840:	6861      	ldr	r1, [r4, #4]
 8004842:	4438      	add	r0, r7
 8004844:	4598      	cmp	r8, r3
 8004846:	4431      	add	r1, r6
 8004848:	bf28      	it	cs
 800484a:	4698      	movcs	r8, r3
 800484c:	4642      	mov	r2, r8
    offset_to += len;
 800484e:	4447      	add	r7, r8
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8004850:	f004 fcfb 	bl	800924a <memcpy>
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8004854:	896b      	ldrh	r3, [r5, #10]
    offset_from += len;
 8004856:	4446      	add	r6, r8
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8004858:	429f      	cmp	r7, r3
 800485a:	d906      	bls.n	800486a <pbuf_copy+0x72>
 800485c:	464b      	mov	r3, r9
 800485e:	f240 32d9 	movw	r2, #985	; 0x3d9
 8004862:	4659      	mov	r1, fp
 8004864:	4650      	mov	r0, sl
 8004866:	f004 fd03 	bl	8009270 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800486a:	8963      	ldrh	r3, [r4, #10]
 800486c:	429e      	cmp	r6, r3
 800486e:	d906      	bls.n	800487e <pbuf_copy+0x86>
 8004870:	464b      	mov	r3, r9
 8004872:	f240 32da 	movw	r2, #986	; 0x3da
 8004876:	491f      	ldr	r1, [pc, #124]	; (80048f4 <pbuf_copy+0xfc>)
 8004878:	4650      	mov	r0, sl
 800487a:	f004 fcf9 	bl	8009270 <iprintf>
    if (offset_from >= p_from->len) {
 800487e:	8963      	ldrh	r3, [r4, #10]
 8004880:	429e      	cmp	r6, r3
    if (offset_to == p_to->len) {
 8004882:	896b      	ldrh	r3, [r5, #10]
      p_from = p_from->next;
 8004884:	bf24      	itt	cs
 8004886:	6824      	ldrcs	r4, [r4, #0]
      offset_from = 0;
 8004888:	2600      	movcs	r6, #0
    if (offset_to == p_to->len) {
 800488a:	429f      	cmp	r7, r3
 800488c:	d11e      	bne.n	80048cc <pbuf_copy+0xd4>
      p_to = p_to->next;
 800488e:	682d      	ldr	r5, [r5, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8004890:	b9dd      	cbnz	r5, 80048ca <pbuf_copy+0xd2>
 8004892:	b1bc      	cbz	r4, 80048c4 <pbuf_copy+0xcc>
 8004894:	4b14      	ldr	r3, [pc, #80]	; (80048e8 <pbuf_copy+0xf0>)
 8004896:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800489a:	4917      	ldr	r1, [pc, #92]	; (80048f8 <pbuf_copy+0x100>)
 800489c:	e7ba      	b.n	8004814 <pbuf_copy+0x1c>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800489e:	8962      	ldrh	r2, [r4, #10]
 80048a0:	8923      	ldrh	r3, [r4, #8]
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d114      	bne.n	80048d0 <pbuf_copy+0xd8>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80048a6:	6823      	ldr	r3, [r4, #0]
 80048a8:	b193      	cbz	r3, 80048d0 <pbuf_copy+0xd8>
 80048aa:	4b0f      	ldr	r3, [pc, #60]	; (80048e8 <pbuf_copy+0xf0>)
 80048ac:	f240 32ea 	movw	r2, #1002	; 0x3ea
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80048b0:	4912      	ldr	r1, [pc, #72]	; (80048fc <pbuf_copy+0x104>)
 80048b2:	480f      	ldr	r0, [pc, #60]	; (80048f0 <pbuf_copy+0xf8>)
 80048b4:	f004 fcdc 	bl	8009270 <iprintf>
 80048b8:	f06f 0005 	mvn.w	r0, #5
 80048bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80048c0:	2c00      	cmp	r4, #0
 80048c2:	d1b6      	bne.n	8004832 <pbuf_copy+0x3a>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80048c4:	4620      	mov	r0, r4
 80048c6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      offset_to = 0;
 80048ca:	2700      	movs	r7, #0
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80048cc:	2c00      	cmp	r4, #0
 80048ce:	d1e6      	bne.n	800489e <pbuf_copy+0xa6>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80048d0:	896a      	ldrh	r2, [r5, #10]
 80048d2:	892b      	ldrh	r3, [r5, #8]
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d1f3      	bne.n	80048c0 <pbuf_copy+0xc8>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80048d8:	682b      	ldr	r3, [r5, #0]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d0f0      	beq.n	80048c0 <pbuf_copy+0xc8>
 80048de:	4b02      	ldr	r3, [pc, #8]	; (80048e8 <pbuf_copy+0xf0>)
 80048e0:	f240 32ef 	movw	r2, #1007	; 0x3ef
 80048e4:	e7e4      	b.n	80048b0 <pbuf_copy+0xb8>
 80048e6:	bf00      	nop
 80048e8:	0800ba07 	.word	0x0800ba07
 80048ec:	0800bae7 	.word	0x0800bae7
 80048f0:	0800b013 	.word	0x0800b013
 80048f4:	0800bb2e 	.word	0x0800bb2e
 80048f8:	0800bb49 	.word	0x0800bb49
 80048fc:	0800bb56 	.word	0x0800bb56
 8004900:	0800bb17 	.word	0x0800bb17

08004904 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8004904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004908:	460f      	mov	r7, r1
 800490a:	4690      	mov	r8, r2
  const struct pbuf *p;
  u16_t left = 0;
  u16_t buf_copy_len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800490c:	4606      	mov	r6, r0
 800490e:	b950      	cbnz	r0, 8004926 <pbuf_copy_partial+0x22>
 8004910:	4635      	mov	r5, r6
 8004912:	4b1b      	ldr	r3, [pc, #108]	; (8004980 <pbuf_copy_partial+0x7c>)
 8004914:	f240 420a 	movw	r2, #1034	; 0x40a
 8004918:	491a      	ldr	r1, [pc, #104]	; (8004984 <pbuf_copy_partial+0x80>)
 800491a:	481b      	ldr	r0, [pc, #108]	; (8004988 <pbuf_copy_partial+0x84>)
 800491c:	f004 fca8 	bl	8009270 <iprintf>
      len = (u16_t)(len - buf_copy_len);
      offset = 0;
    }
  }
  return copied_total;
}
 8004920:	4628      	mov	r0, r5
 8004922:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8004926:	b169      	cbz	r1, 8004944 <pbuf_copy_partial+0x40>
 8004928:	2500      	movs	r5, #0
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800492a:	f1b8 0f00 	cmp.w	r8, #0
 800492e:	d0f7      	beq.n	8004920 <pbuf_copy_partial+0x1c>
 8004930:	2e00      	cmp	r6, #0
 8004932:	d0f5      	beq.n	8004920 <pbuf_copy_partial+0x1c>
    if ((offset != 0) && (offset >= p->len)) {
 8004934:	b17b      	cbz	r3, 8004956 <pbuf_copy_partial+0x52>
 8004936:	8971      	ldrh	r1, [r6, #10]
 8004938:	428b      	cmp	r3, r1
 800493a:	d30c      	bcc.n	8004956 <pbuf_copy_partial+0x52>
      offset = (u16_t)(offset - p->len);
 800493c:	1a5b      	subs	r3, r3, r1
 800493e:	b29b      	uxth	r3, r3
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8004940:	6836      	ldr	r6, [r6, #0]
 8004942:	e7f2      	b.n	800492a <pbuf_copy_partial+0x26>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8004944:	4b0e      	ldr	r3, [pc, #56]	; (8004980 <pbuf_copy_partial+0x7c>)
 8004946:	f240 420b 	movw	r2, #1035	; 0x40b
 800494a:	4910      	ldr	r1, [pc, #64]	; (800498c <pbuf_copy_partial+0x88>)
 800494c:	463d      	mov	r5, r7
 800494e:	480e      	ldr	r0, [pc, #56]	; (8004988 <pbuf_copy_partial+0x84>)
 8004950:	f004 fc8e 	bl	8009270 <iprintf>
 8004954:	e7e4      	b.n	8004920 <pbuf_copy_partial+0x1c>
      buf_copy_len = (u16_t)(p->len - offset);
 8004956:	8974      	ldrh	r4, [r6, #10]
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8004958:	1978      	adds	r0, r7, r5
 800495a:	6871      	ldr	r1, [r6, #4]
      buf_copy_len = (u16_t)(p->len - offset);
 800495c:	1ae4      	subs	r4, r4, r3
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800495e:	4419      	add	r1, r3
      buf_copy_len = (u16_t)(p->len - offset);
 8004960:	b2a4      	uxth	r4, r4
 8004962:	4544      	cmp	r4, r8
 8004964:	bf28      	it	cs
 8004966:	4644      	movcs	r4, r8
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8004968:	4622      	mov	r2, r4
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800496a:	4425      	add	r5, r4
      len = (u16_t)(len - buf_copy_len);
 800496c:	eba8 0404 	sub.w	r4, r8, r4
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8004970:	f004 fc6b 	bl	800924a <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8004974:	b2ad      	uxth	r5, r5
      offset = 0;
 8004976:	2300      	movs	r3, #0
      len = (u16_t)(len - buf_copy_len);
 8004978:	fa1f f884 	uxth.w	r8, r4
 800497c:	e7e0      	b.n	8004940 <pbuf_copy_partial+0x3c>
 800497e:	bf00      	nop
 8004980:	0800ba07 	.word	0x0800ba07
 8004984:	0800bb80 	.word	0x0800bb80
 8004988:	0800b013 	.word	0x0800b013
 800498c:	0800bb9f 	.word	0x0800bb9f

08004990 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8004990:	b538      	push	{r3, r4, r5, lr}
 8004992:	4614      	mov	r4, r2
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8004994:	460a      	mov	r2, r1
 8004996:	8921      	ldrh	r1, [r4, #8]
 8004998:	f7ff fdf8 	bl	800458c <pbuf_alloc>
  if (q == NULL) {
 800499c:	4605      	mov	r5, r0
 800499e:	b150      	cbz	r0, 80049b6 <pbuf_clone+0x26>
    return NULL;
  }
  err = pbuf_copy(q, p);
 80049a0:	4621      	mov	r1, r4
 80049a2:	f7ff ff29 	bl	80047f8 <pbuf_copy>
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80049a6:	b130      	cbz	r0, 80049b6 <pbuf_clone+0x26>
 80049a8:	4b04      	ldr	r3, [pc, #16]	; (80049bc <pbuf_clone+0x2c>)
 80049aa:	f240 5224 	movw	r2, #1316	; 0x524
 80049ae:	4904      	ldr	r1, [pc, #16]	; (80049c0 <pbuf_clone+0x30>)
 80049b0:	4804      	ldr	r0, [pc, #16]	; (80049c4 <pbuf_clone+0x34>)
 80049b2:	f004 fc5d 	bl	8009270 <iprintf>
  return q;
}
 80049b6:	4628      	mov	r0, r5
 80049b8:	bd38      	pop	{r3, r4, r5, pc}
 80049ba:	bf00      	nop
 80049bc:	0800ba07 	.word	0x0800ba07
 80049c0:	0800bad6 	.word	0x0800bad6
 80049c4:	0800b013 	.word	0x0800b013

080049c8 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 80049c8:	4a11      	ldr	r2, [pc, #68]	; (8004a10 <tcp_new_port+0x48>)
 80049ca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80049ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049d0:	8810      	ldrh	r0, [r2, #0]
  u16_t n = 0;
  struct tcp_pcb *pcb;

again:
  tcp_port++;
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 80049d2:	f64f 75ff 	movw	r5, #65535	; 0xffff
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80049d6:	4e0f      	ldr	r6, [pc, #60]	; (8004a14 <tcp_new_port+0x4c>)
  tcp_port++;
 80049d8:	3001      	adds	r0, #1
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 80049da:	2100      	movs	r1, #0
  tcp_port++;
 80049dc:	b280      	uxth	r0, r0
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 80049de:	42a8      	cmp	r0, r5
 80049e0:	bf08      	it	eq
 80049e2:	f44f 4040 	moveq.w	r0, #49152	; 0xc000
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80049e6:	f856 4021 	ldr.w	r4, [r6, r1, lsl #2]
 80049ea:	6824      	ldr	r4, [r4, #0]
 80049ec:	b924      	cbnz	r4, 80049f8 <tcp_new_port+0x30>
 80049ee:	3101      	adds	r1, #1
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80049f0:	2904      	cmp	r1, #4
 80049f2:	d1f8      	bne.n	80049e6 <tcp_new_port+0x1e>
 80049f4:	8010      	strh	r0, [r2, #0]
        goto again;
      }
    }
  }
  return tcp_port;
}
 80049f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (pcb->local_port == tcp_port) {
 80049f8:	8ae7      	ldrh	r7, [r4, #22]
 80049fa:	4287      	cmp	r7, r0
 80049fc:	d106      	bne.n	8004a0c <tcp_new_port+0x44>
 80049fe:	3b01      	subs	r3, #1
 8004a00:	b29b      	uxth	r3, r3
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d1e8      	bne.n	80049d8 <tcp_new_port+0x10>
 8004a06:	8010      	strh	r0, [r2, #0]
          return 0;
 8004a08:	4618      	mov	r0, r3
 8004a0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8004a0c:	68e4      	ldr	r4, [r4, #12]
 8004a0e:	e7ed      	b.n	80049ec <tcp_new_port+0x24>
 8004a10:	2000000c 	.word	0x2000000c
 8004a14:	0800befc 	.word	0x0800befc

08004a18 <tcp_close_shutdown_fin>:
{
 8004a18:	b510      	push	{r4, lr}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8004a1a:	4604      	mov	r4, r0
 8004a1c:	b930      	cbnz	r0, 8004a2c <tcp_close_shutdown_fin+0x14>
 8004a1e:	4b13      	ldr	r3, [pc, #76]	; (8004a6c <tcp_close_shutdown_fin+0x54>)
 8004a20:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8004a24:	4912      	ldr	r1, [pc, #72]	; (8004a70 <tcp_close_shutdown_fin+0x58>)
 8004a26:	4813      	ldr	r0, [pc, #76]	; (8004a74 <tcp_close_shutdown_fin+0x5c>)
 8004a28:	f004 fc22 	bl	8009270 <iprintf>
  switch (pcb->state) {
 8004a2c:	7d23      	ldrb	r3, [r4, #20]
 8004a2e:	2b04      	cmp	r3, #4
 8004a30:	d003      	beq.n	8004a3a <tcp_close_shutdown_fin+0x22>
 8004a32:	2b07      	cmp	r3, #7
 8004a34:	d00c      	beq.n	8004a50 <tcp_close_shutdown_fin+0x38>
 8004a36:	2b03      	cmp	r3, #3
 8004a38:	d108      	bne.n	8004a4c <tcp_close_shutdown_fin+0x34>
      err = tcp_send_fin(pcb);
 8004a3a:	4620      	mov	r0, r4
 8004a3c:	f003 f8e2 	bl	8007c04 <tcp_send_fin>
      if (err == ERR_OK) {
 8004a40:	b988      	cbnz	r0, 8004a66 <tcp_close_shutdown_fin+0x4e>
        pcb->state = FIN_WAIT_1;
 8004a42:	2305      	movs	r3, #5
        pcb->state = LAST_ACK;
 8004a44:	7523      	strb	r3, [r4, #20]
    tcp_output(pcb);
 8004a46:	4620      	mov	r0, r4
 8004a48:	f003 fa3e 	bl	8007ec8 <tcp_output>
 8004a4c:	2000      	movs	r0, #0
 8004a4e:	bd10      	pop	{r4, pc}
      err = tcp_send_fin(pcb);
 8004a50:	4620      	mov	r0, r4
 8004a52:	f003 f8d7 	bl	8007c04 <tcp_send_fin>
      if (err == ERR_OK) {
 8004a56:	b930      	cbnz	r0, 8004a66 <tcp_close_shutdown_fin+0x4e>
        pcb->state = LAST_ACK;
 8004a58:	2309      	movs	r3, #9
 8004a5a:	e7f3      	b.n	8004a44 <tcp_close_shutdown_fin+0x2c>
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8004a5c:	8b63      	ldrh	r3, [r4, #26]
 8004a5e:	f043 0308 	orr.w	r3, r3, #8
 8004a62:	8363      	strh	r3, [r4, #26]
 8004a64:	e7f2      	b.n	8004a4c <tcp_close_shutdown_fin+0x34>
  } else if (err == ERR_MEM) {
 8004a66:	1c43      	adds	r3, r0, #1
 8004a68:	d0f8      	beq.n	8004a5c <tcp_close_shutdown_fin+0x44>
}
 8004a6a:	bd10      	pop	{r4, pc}
 8004a6c:	0800bda2 	.word	0x0800bda2
 8004a70:	0800bdd1 	.word	0x0800bdd1
 8004a74:	0800b013 	.word	0x0800b013

08004a78 <tcp_init>:
{
 8004a78:	b508      	push	{r3, lr}
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8004a7a:	f004 fc11 	bl	80092a0 <rand>
 8004a7e:	ea6f 4080 	mvn.w	r0, r0, lsl #18
 8004a82:	4b02      	ldr	r3, [pc, #8]	; (8004a8c <tcp_init+0x14>)
 8004a84:	ea6f 4090 	mvn.w	r0, r0, lsr #18
 8004a88:	8018      	strh	r0, [r3, #0]
 8004a8a:	bd08      	pop	{r3, pc}
 8004a8c:	2000000c 	.word	0x2000000c

08004a90 <tcp_free>:
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8004a90:	7d03      	ldrb	r3, [r0, #20]
 8004a92:	2b01      	cmp	r3, #1
{
 8004a94:	b510      	push	{r4, lr}
 8004a96:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8004a98:	d105      	bne.n	8004aa6 <tcp_free+0x16>
 8004a9a:	4b06      	ldr	r3, [pc, #24]	; (8004ab4 <tcp_free+0x24>)
 8004a9c:	22d4      	movs	r2, #212	; 0xd4
 8004a9e:	4906      	ldr	r1, [pc, #24]	; (8004ab8 <tcp_free+0x28>)
 8004aa0:	4806      	ldr	r0, [pc, #24]	; (8004abc <tcp_free+0x2c>)
 8004aa2:	f004 fbe5 	bl	8009270 <iprintf>
  memp_free(MEMP_TCP_PCB, pcb);
 8004aa6:	4621      	mov	r1, r4
 8004aa8:	2001      	movs	r0, #1
}
 8004aaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_TCP_PCB, pcb);
 8004aae:	f7ff bac9 	b.w	8004044 <memp_free>
 8004ab2:	bf00      	nop
 8004ab4:	0800bda2 	.word	0x0800bda2
 8004ab8:	0800be2a 	.word	0x0800be2a
 8004abc:	0800b013 	.word	0x0800b013

08004ac0 <tcp_bind>:
{
 8004ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ipaddr = IP4_ADDR_ANY;
 8004ac2:	4d23      	ldr	r5, [pc, #140]	; (8004b50 <tcp_bind+0x90>)
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8004ac4:	4604      	mov	r4, r0
    ipaddr = IP4_ADDR_ANY;
 8004ac6:	2900      	cmp	r1, #0
 8004ac8:	bf18      	it	ne
 8004aca:	460d      	movne	r5, r1
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8004acc:	b948      	cbnz	r0, 8004ae2 <tcp_bind+0x22>
 8004ace:	4b21      	ldr	r3, [pc, #132]	; (8004b54 <tcp_bind+0x94>)
 8004ad0:	f240 22a9 	movw	r2, #681	; 0x2a9
 8004ad4:	4920      	ldr	r1, [pc, #128]	; (8004b58 <tcp_bind+0x98>)
 8004ad6:	4821      	ldr	r0, [pc, #132]	; (8004b5c <tcp_bind+0x9c>)
 8004ad8:	f004 fbca 	bl	8009270 <iprintf>
 8004adc:	f06f 000f 	mvn.w	r0, #15
 8004ae0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8004ae2:	7d03      	ldrb	r3, [r0, #20]
 8004ae4:	b14b      	cbz	r3, 8004afa <tcp_bind+0x3a>
 8004ae6:	4b1b      	ldr	r3, [pc, #108]	; (8004b54 <tcp_bind+0x94>)
 8004ae8:	f240 22ab 	movw	r2, #683	; 0x2ab
 8004aec:	491c      	ldr	r1, [pc, #112]	; (8004b60 <tcp_bind+0xa0>)
 8004aee:	481b      	ldr	r0, [pc, #108]	; (8004b5c <tcp_bind+0x9c>)
 8004af0:	f004 fbbe 	bl	8009270 <iprintf>
 8004af4:	f06f 0005 	mvn.w	r0, #5
 8004af8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (port == 0) {
 8004afa:	b932      	cbnz	r2, 8004b0a <tcp_bind+0x4a>
    port = tcp_new_port();
 8004afc:	f7ff ff64 	bl	80049c8 <tcp_new_port>
    if (port == 0) {
 8004b00:	4602      	mov	r2, r0
 8004b02:	b950      	cbnz	r0, 8004b1a <tcp_bind+0x5a>
      return ERR_BUF;
 8004b04:	f06f 0001 	mvn.w	r0, #1
 8004b08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8004b0a:	4f16      	ldr	r7, [pc, #88]	; (8004b64 <tcp_bind+0xa4>)
 8004b0c:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
 8004b10:	6808      	ldr	r0, [r1, #0]
 8004b12:	b970      	cbnz	r0, 8004b32 <tcp_bind+0x72>
    for (i = 0; i < max_pcb_list; i++) {
 8004b14:	3301      	adds	r3, #1
 8004b16:	2b04      	cmp	r3, #4
 8004b18:	d1f8      	bne.n	8004b0c <tcp_bind+0x4c>
  if (!ip_addr_isany(ipaddr)
 8004b1a:	682b      	ldr	r3, [r5, #0]
 8004b1c:	b103      	cbz	r3, 8004b20 <tcp_bind+0x60>
    ip_addr_set(&pcb->local_ip, ipaddr);
 8004b1e:	6023      	str	r3, [r4, #0]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8004b20:	4b11      	ldr	r3, [pc, #68]	; (8004b68 <tcp_bind+0xa8>)
  pcb->local_port = port;
 8004b22:	82e2      	strh	r2, [r4, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	601c      	str	r4, [r3, #0]
 8004b28:	60e2      	str	r2, [r4, #12]
 8004b2a:	f003 fca3 	bl	8008474 <tcp_timer_needed>
  return ERR_OK;
 8004b2e:	2000      	movs	r0, #0
 8004b30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (cpcb->local_port == port) {
 8004b32:	8ac1      	ldrh	r1, [r0, #22]
 8004b34:	4291      	cmp	r1, r2
 8004b36:	d105      	bne.n	8004b44 <tcp_bind+0x84>
                (ip_addr_isany(&cpcb->local_ip) ||
 8004b38:	6806      	ldr	r6, [r0, #0]
 8004b3a:	b12e      	cbz	r6, 8004b48 <tcp_bind+0x88>
                 ip_addr_isany(ipaddr) ||
 8004b3c:	6829      	ldr	r1, [r5, #0]
 8004b3e:	b119      	cbz	r1, 8004b48 <tcp_bind+0x88>
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8004b40:	428e      	cmp	r6, r1
 8004b42:	d001      	beq.n	8004b48 <tcp_bind+0x88>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8004b44:	68c0      	ldr	r0, [r0, #12]
 8004b46:	e7e4      	b.n	8004b12 <tcp_bind+0x52>
              return ERR_USE;
 8004b48:	f06f 0007 	mvn.w	r0, #7
}
 8004b4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b4e:	bf00      	nop
 8004b50:	0800b3e4 	.word	0x0800b3e4
 8004b54:	0800bda2 	.word	0x0800bda2
 8004b58:	0800bcfb 	.word	0x0800bcfb
 8004b5c:	0800b013 	.word	0x0800b013
 8004b60:	0800bd11 	.word	0x0800bd11
 8004b64:	0800befc 	.word	0x0800befc
 8004b68:	20003ba4 	.word	0x20003ba4

08004b6c <tcp_listen_with_backlog_and_err>:
{
 8004b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b6e:	4616      	mov	r6, r2
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8004b70:	4605      	mov	r5, r0
 8004b72:	b968      	cbnz	r0, 8004b90 <tcp_listen_with_backlog_and_err+0x24>
 8004b74:	4b29      	ldr	r3, [pc, #164]	; (8004c1c <tcp_listen_with_backlog_and_err+0xb0>)
 8004b76:	f240 3259 	movw	r2, #857	; 0x359
 8004b7a:	4929      	ldr	r1, [pc, #164]	; (8004c20 <tcp_listen_with_backlog_and_err+0xb4>)
 8004b7c:	4829      	ldr	r0, [pc, #164]	; (8004c24 <tcp_listen_with_backlog_and_err+0xb8>)
 8004b7e:	f004 fb77 	bl	8009270 <iprintf>
 8004b82:	f06f 030f 	mvn.w	r3, #15
  struct tcp_pcb_listen *lpcb = NULL;
 8004b86:	2400      	movs	r4, #0
  if (err != NULL) {
 8004b88:	b106      	cbz	r6, 8004b8c <tcp_listen_with_backlog_and_err+0x20>
    *err = res;
 8004b8a:	7033      	strb	r3, [r6, #0]
}
 8004b8c:	4620      	mov	r0, r4
 8004b8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8004b90:	7d07      	ldrb	r7, [r0, #20]
 8004b92:	b14f      	cbz	r7, 8004ba8 <tcp_listen_with_backlog_and_err+0x3c>
 8004b94:	4b21      	ldr	r3, [pc, #132]	; (8004c1c <tcp_listen_with_backlog_and_err+0xb0>)
 8004b96:	f240 325a 	movw	r2, #858	; 0x35a
 8004b9a:	4923      	ldr	r1, [pc, #140]	; (8004c28 <tcp_listen_with_backlog_and_err+0xbc>)
 8004b9c:	4821      	ldr	r0, [pc, #132]	; (8004c24 <tcp_listen_with_backlog_and_err+0xb8>)
 8004b9e:	f004 fb67 	bl	8009270 <iprintf>
 8004ba2:	f06f 030e 	mvn.w	r3, #14
 8004ba6:	e7ee      	b.n	8004b86 <tcp_listen_with_backlog_and_err+0x1a>
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8004ba8:	2002      	movs	r0, #2
 8004baa:	f7ff fa2f 	bl	800400c <memp_malloc>
  if (lpcb == NULL) {
 8004bae:	4604      	mov	r4, r0
 8004bb0:	2800      	cmp	r0, #0
 8004bb2:	d02f      	beq.n	8004c14 <tcp_listen_with_backlog_and_err+0xa8>
  lpcb->callback_arg = pcb->callback_arg;
 8004bb4:	692b      	ldr	r3, [r5, #16]
  lpcb->state = LISTEN;
 8004bb6:	2201      	movs	r2, #1
  lpcb->callback_arg = pcb->callback_arg;
 8004bb8:	6103      	str	r3, [r0, #16]
  lpcb->local_port = pcb->local_port;
 8004bba:	8aeb      	ldrh	r3, [r5, #22]
  lpcb->state = LISTEN;
 8004bbc:	7502      	strb	r2, [r0, #20]
  lpcb->local_port = pcb->local_port;
 8004bbe:	82c3      	strh	r3, [r0, #22]
  lpcb->prio = pcb->prio;
 8004bc0:	7d6a      	ldrb	r2, [r5, #21]
 8004bc2:	7542      	strb	r2, [r0, #21]
  lpcb->so_options = pcb->so_options;
 8004bc4:	7a6a      	ldrb	r2, [r5, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8004bc6:	7207      	strb	r7, [r0, #8]
  lpcb->so_options = pcb->so_options;
 8004bc8:	7242      	strb	r2, [r0, #9]
  lpcb->ttl = pcb->ttl;
 8004bca:	7aea      	ldrb	r2, [r5, #11]
 8004bcc:	72c2      	strb	r2, [r0, #11]
  lpcb->tos = pcb->tos;
 8004bce:	7aaa      	ldrb	r2, [r5, #10]
 8004bd0:	7282      	strb	r2, [r0, #10]
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8004bd2:	682a      	ldr	r2, [r5, #0]
 8004bd4:	6002      	str	r2, [r0, #0]
  if (pcb->local_port != 0) {
 8004bd6:	b13b      	cbz	r3, 8004be8 <tcp_listen_with_backlog_and_err+0x7c>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8004bd8:	4a14      	ldr	r2, [pc, #80]	; (8004c2c <tcp_listen_with_backlog_and_err+0xc0>)
 8004bda:	6813      	ldr	r3, [r2, #0]
 8004bdc:	429d      	cmp	r5, r3
 8004bde:	d111      	bne.n	8004c04 <tcp_listen_with_backlog_and_err+0x98>
 8004be0:	68eb      	ldr	r3, [r5, #12]
 8004be2:	6013      	str	r3, [r2, #0]
 8004be4:	2300      	movs	r3, #0
 8004be6:	60eb      	str	r3, [r5, #12]
  tcp_free(pcb);
 8004be8:	4628      	mov	r0, r5
 8004bea:	f7ff ff51 	bl	8004a90 <tcp_free>
  lpcb->accept = tcp_accept_null;
 8004bee:	4b10      	ldr	r3, [pc, #64]	; (8004c30 <tcp_listen_with_backlog_and_err+0xc4>)
 8004bf0:	61a3      	str	r3, [r4, #24]
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8004bf2:	4b10      	ldr	r3, [pc, #64]	; (8004c34 <tcp_listen_with_backlog_and_err+0xc8>)
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	601c      	str	r4, [r3, #0]
 8004bf8:	60e2      	str	r2, [r4, #12]
 8004bfa:	f003 fc3b 	bl	8008474 <tcp_timer_needed>
  res = ERR_OK;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	e7c2      	b.n	8004b88 <tcp_listen_with_backlog_and_err+0x1c>
 8004c02:	4613      	mov	r3, r2
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d0ed      	beq.n	8004be4 <tcp_listen_with_backlog_and_err+0x78>
 8004c08:	68da      	ldr	r2, [r3, #12]
 8004c0a:	4295      	cmp	r5, r2
 8004c0c:	d1f9      	bne.n	8004c02 <tcp_listen_with_backlog_and_err+0x96>
 8004c0e:	68ea      	ldr	r2, [r5, #12]
 8004c10:	60da      	str	r2, [r3, #12]
 8004c12:	e7e7      	b.n	8004be4 <tcp_listen_with_backlog_and_err+0x78>
    res = ERR_MEM;
 8004c14:	f04f 33ff 	mov.w	r3, #4294967295
 8004c18:	e7b6      	b.n	8004b88 <tcp_listen_with_backlog_and_err+0x1c>
 8004c1a:	bf00      	nop
 8004c1c:	0800bda2 	.word	0x0800bda2
 8004c20:	0800be49 	.word	0x0800be49
 8004c24:	0800b013 	.word	0x0800b013
 8004c28:	0800be76 	.word	0x0800be76
 8004c2c:	20003ba4 	.word	0x20003ba4
 8004c30:	08005161 	.word	0x08005161
 8004c34:	20003ba0 	.word	0x20003ba0

08004c38 <tcp_listen_with_backlog>:
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 8004c38:	2200      	movs	r2, #0
 8004c3a:	f7ff bf97 	b.w	8004b6c <tcp_listen_with_backlog_and_err>
	...

08004c40 <tcp_update_rcv_ann_wnd>:
{
 8004c40:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8004c42:	4604      	mov	r4, r0
 8004c44:	b930      	cbnz	r0, 8004c54 <tcp_update_rcv_ann_wnd+0x14>
 8004c46:	4b15      	ldr	r3, [pc, #84]	; (8004c9c <tcp_update_rcv_ann_wnd+0x5c>)
 8004c48:	f240 32a6 	movw	r2, #934	; 0x3a6
 8004c4c:	4914      	ldr	r1, [pc, #80]	; (8004ca0 <tcp_update_rcv_ann_wnd+0x60>)
 8004c4e:	4815      	ldr	r0, [pc, #84]	; (8004ca4 <tcp_update_rcv_ann_wnd+0x64>)
 8004c50:	f004 fb0e 	bl	8009270 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8004c54:	8d21      	ldrh	r1, [r4, #40]	; 0x28
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8004c56:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004c58:	8e62      	ldrh	r2, [r4, #50]	; 0x32
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8004c5a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8004c5c:	1ac8      	subs	r0, r1, r3
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8004c5e:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8004c62:	4428      	add	r0, r5
 8004c64:	bf94      	ite	ls
 8004c66:	1a82      	subls	r2, r0, r2
 8004c68:	f5a0 6286 	subhi.w	r2, r0, #1072	; 0x430
 8004c6c:	2a00      	cmp	r2, #0
 8004c6e:	db01      	blt.n	8004c74 <tcp_update_rcv_ann_wnd+0x34>
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8004c70:	8561      	strh	r1, [r4, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8004c72:	bd38      	pop	{r3, r4, r5, pc}
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8004c74:	1aea      	subs	r2, r5, r3
 8004c76:	2a00      	cmp	r2, #0
 8004c78:	dd02      	ble.n	8004c80 <tcp_update_rcv_ann_wnd+0x40>
      pcb->rcv_ann_wnd = 0;
 8004c7a:	2000      	movs	r0, #0
 8004c7c:	8560      	strh	r0, [r4, #42]	; 0x2a
 8004c7e:	bd38      	pop	{r3, r4, r5, pc}
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8004c80:	1b5d      	subs	r5, r3, r5
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8004c82:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 8004c86:	d306      	bcc.n	8004c96 <tcp_update_rcv_ann_wnd+0x56>
 8004c88:	4b04      	ldr	r3, [pc, #16]	; (8004c9c <tcp_update_rcv_ann_wnd+0x5c>)
 8004c8a:	f240 32b6 	movw	r2, #950	; 0x3b6
 8004c8e:	4906      	ldr	r1, [pc, #24]	; (8004ca8 <tcp_update_rcv_ann_wnd+0x68>)
 8004c90:	4804      	ldr	r0, [pc, #16]	; (8004ca4 <tcp_update_rcv_ann_wnd+0x64>)
 8004c92:	f004 faed 	bl	8009270 <iprintf>
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8004c96:	8565      	strh	r5, [r4, #42]	; 0x2a
    return 0;
 8004c98:	2000      	movs	r0, #0
}
 8004c9a:	bd38      	pop	{r3, r4, r5, pc}
 8004c9c:	0800bda2 	.word	0x0800bda2
 8004ca0:	0800c29f 	.word	0x0800c29f
 8004ca4:	0800b013 	.word	0x0800b013
 8004ca8:	0800c2c3 	.word	0x0800c2c3

08004cac <tcp_recved>:
{
 8004cac:	b570      	push	{r4, r5, r6, lr}
 8004cae:	460d      	mov	r5, r1
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8004cb0:	4604      	mov	r4, r0
 8004cb2:	b940      	cbnz	r0, 8004cc6 <tcp_recved+0x1a>
 8004cb4:	4b17      	ldr	r3, [pc, #92]	; (8004d14 <tcp_recved+0x68>)
 8004cb6:	f240 32cf 	movw	r2, #975	; 0x3cf
 8004cba:	4917      	ldr	r1, [pc, #92]	; (8004d18 <tcp_recved+0x6c>)
 8004cbc:	4817      	ldr	r0, [pc, #92]	; (8004d1c <tcp_recved+0x70>)
}
 8004cbe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8004cc2:	f004 bad5 	b.w	8009270 <iprintf>
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8004cc6:	7d03      	ldrb	r3, [r0, #20]
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d106      	bne.n	8004cda <tcp_recved+0x2e>
 8004ccc:	4b11      	ldr	r3, [pc, #68]	; (8004d14 <tcp_recved+0x68>)
 8004cce:	f240 32d3 	movw	r2, #979	; 0x3d3
 8004cd2:	4913      	ldr	r1, [pc, #76]	; (8004d20 <tcp_recved+0x74>)
 8004cd4:	4811      	ldr	r0, [pc, #68]	; (8004d1c <tcp_recved+0x70>)
 8004cd6:	f004 facb 	bl	8009270 <iprintf>
  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8004cda:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004cdc:	1959      	adds	r1, r3, r5
 8004cde:	b289      	uxth	r1, r1
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8004ce0:	f5b1 6f06 	cmp.w	r1, #2144	; 0x860
 8004ce4:	d801      	bhi.n	8004cea <tcp_recved+0x3e>
 8004ce6:	428b      	cmp	r3, r1
 8004ce8:	d911      	bls.n	8004d0e <tcp_recved+0x62>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8004cea:	f44f 6306 	mov.w	r3, #2144	; 0x860
 8004cee:	8523      	strh	r3, [r4, #40]	; 0x28
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8004cf0:	4620      	mov	r0, r4
 8004cf2:	f7ff ffa5 	bl	8004c40 <tcp_update_rcv_ann_wnd>
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8004cf6:	f5b0 7f06 	cmp.w	r0, #536	; 0x218
 8004cfa:	d30a      	bcc.n	8004d12 <tcp_recved+0x66>
    tcp_ack_now(pcb);
 8004cfc:	8b63      	ldrh	r3, [r4, #26]
    tcp_output(pcb);
 8004cfe:	4620      	mov	r0, r4
    tcp_ack_now(pcb);
 8004d00:	f043 0302 	orr.w	r3, r3, #2
 8004d04:	8363      	strh	r3, [r4, #26]
}
 8004d06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    tcp_output(pcb);
 8004d0a:	f003 b8dd 	b.w	8007ec8 <tcp_output>
    pcb->rcv_wnd = rcv_wnd;
 8004d0e:	8521      	strh	r1, [r4, #40]	; 0x28
 8004d10:	e7ee      	b.n	8004cf0 <tcp_recved+0x44>
 8004d12:	bd70      	pop	{r4, r5, r6, pc}
 8004d14:	0800bda2 	.word	0x0800bda2
 8004d18:	0800c04e 	.word	0x0800c04e
 8004d1c:	0800b013 	.word	0x0800b013
 8004d20:	0800c066 	.word	0x0800c066

08004d24 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8004d24:	b510      	push	{r4, lr}
  if (seg != NULL) {
 8004d26:	4604      	mov	r4, r0
 8004d28:	b148      	cbz	r0, 8004d3e <tcp_seg_free+0x1a>
    if (seg->p != NULL) {
 8004d2a:	6840      	ldr	r0, [r0, #4]
 8004d2c:	b108      	cbz	r0, 8004d32 <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 8004d2e:	f7ff fbcb 	bl	80044c8 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8004d32:	4621      	mov	r1, r4
 8004d34:	2003      	movs	r0, #3
  }
}
 8004d36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memp_free(MEMP_TCP_SEG, seg);
 8004d3a:	f7ff b983 	b.w	8004044 <memp_free>
 8004d3e:	bd10      	pop	{r4, pc}

08004d40 <tcp_segs_free>:
{
 8004d40:	b510      	push	{r4, lr}
  while (seg != NULL) {
 8004d42:	b900      	cbnz	r0, 8004d46 <tcp_segs_free+0x6>
}
 8004d44:	bd10      	pop	{r4, pc}
    struct tcp_seg *next = seg->next;
 8004d46:	6804      	ldr	r4, [r0, #0]
    tcp_seg_free(seg);
 8004d48:	f7ff ffec 	bl	8004d24 <tcp_seg_free>
    seg = next;
 8004d4c:	4620      	mov	r0, r4
 8004d4e:	e7f8      	b.n	8004d42 <tcp_segs_free+0x2>

08004d50 <tcp_setprio>:
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 8004d50:	b930      	cbnz	r0, 8004d60 <tcp_setprio+0x10>
 8004d52:	4b04      	ldr	r3, [pc, #16]	; (8004d64 <tcp_setprio+0x14>)
 8004d54:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 8004d58:	4903      	ldr	r1, [pc, #12]	; (8004d68 <tcp_setprio+0x18>)
 8004d5a:	4804      	ldr	r0, [pc, #16]	; (8004d6c <tcp_setprio+0x1c>)
 8004d5c:	f004 ba88 	b.w	8009270 <iprintf>

  pcb->prio = prio;
 8004d60:	7541      	strb	r1, [r0, #21]
 8004d62:	4770      	bx	lr
 8004d64:	0800bda2 	.word	0x0800bda2
 8004d68:	0800c0cd 	.word	0x0800c0cd
 8004d6c:	0800b013 	.word	0x0800b013

08004d70 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8004d70:	b538      	push	{r3, r4, r5, lr}
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8004d72:	4604      	mov	r4, r0
 8004d74:	b930      	cbnz	r0, 8004d84 <tcp_seg_copy+0x14>
 8004d76:	4b0d      	ldr	r3, [pc, #52]	; (8004dac <tcp_seg_copy+0x3c>)
 8004d78:	f240 6282 	movw	r2, #1666	; 0x682
 8004d7c:	490c      	ldr	r1, [pc, #48]	; (8004db0 <tcp_seg_copy+0x40>)
 8004d7e:	480d      	ldr	r0, [pc, #52]	; (8004db4 <tcp_seg_copy+0x44>)
 8004d80:	f004 fa76 	bl	8009270 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8004d84:	2003      	movs	r0, #3
 8004d86:	f7ff f941 	bl	800400c <memp_malloc>
  if (cseg == NULL) {
 8004d8a:	4605      	mov	r5, r0
 8004d8c:	b160      	cbz	r0, 8004da8 <tcp_seg_copy+0x38>
    return NULL;
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8004d8e:	4620      	mov	r0, r4
 8004d90:	462b      	mov	r3, r5
 8004d92:	f104 0210 	add.w	r2, r4, #16
 8004d96:	f850 1b04 	ldr.w	r1, [r0], #4
 8004d9a:	4290      	cmp	r0, r2
 8004d9c:	f843 1b04 	str.w	r1, [r3], #4
 8004da0:	d1f9      	bne.n	8004d96 <tcp_seg_copy+0x26>
  pbuf_ref(cseg->p);
 8004da2:	6868      	ldr	r0, [r5, #4]
 8004da4:	f7ff fcda 	bl	800475c <pbuf_ref>
  return cseg;
}
 8004da8:	4628      	mov	r0, r5
 8004daa:	bd38      	pop	{r3, r4, r5, pc}
 8004dac:	0800bda2 	.word	0x0800bda2
 8004db0:	0800c08c 	.word	0x0800c08c
 8004db4:	0800b013 	.word	0x0800b013

08004db8 <tcp_arg>:
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8004db8:	b100      	cbz	r0, 8004dbc <tcp_arg+0x4>
    pcb->callback_arg = arg;
 8004dba:	6101      	str	r1, [r0, #16]
 8004dbc:	4770      	bx	lr
	...

08004dc0 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8004dc0:	b538      	push	{r3, r4, r5, lr}
 8004dc2:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8004dc4:	4604      	mov	r4, r0
 8004dc6:	b158      	cbz	r0, 8004de0 <tcp_recv+0x20>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8004dc8:	7d03      	ldrb	r3, [r0, #20]
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	d106      	bne.n	8004ddc <tcp_recv+0x1c>
 8004dce:	4b05      	ldr	r3, [pc, #20]	; (8004de4 <tcp_recv+0x24>)
 8004dd0:	f240 72df 	movw	r2, #2015	; 0x7df
 8004dd4:	4904      	ldr	r1, [pc, #16]	; (8004de8 <tcp_recv+0x28>)
 8004dd6:	4805      	ldr	r0, [pc, #20]	; (8004dec <tcp_recv+0x2c>)
 8004dd8:	f004 fa4a 	bl	8009270 <iprintf>
    pcb->recv = recv;
 8004ddc:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
 8004de0:	bd38      	pop	{r3, r4, r5, pc}
 8004de2:	bf00      	nop
 8004de4:	0800bda2 	.word	0x0800bda2
 8004de8:	0800c00c 	.word	0x0800c00c
 8004dec:	0800b013 	.word	0x0800b013

08004df0 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8004df0:	b538      	push	{r3, r4, r5, lr}
 8004df2:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8004df4:	4604      	mov	r4, r0
 8004df6:	b158      	cbz	r0, 8004e10 <tcp_sent+0x20>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8004df8:	7d03      	ldrb	r3, [r0, #20]
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d106      	bne.n	8004e0c <tcp_sent+0x1c>
 8004dfe:	4b05      	ldr	r3, [pc, #20]	; (8004e14 <tcp_sent+0x24>)
 8004e00:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8004e04:	4904      	ldr	r1, [pc, #16]	; (8004e18 <tcp_sent+0x28>)
 8004e06:	4805      	ldr	r0, [pc, #20]	; (8004e1c <tcp_sent+0x2c>)
 8004e08:	f004 fa32 	bl	8009270 <iprintf>
    pcb->sent = sent;
 8004e0c:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
 8004e10:	bd38      	pop	{r3, r4, r5, pc}
 8004e12:	bf00      	nop
 8004e14:	0800bda2 	.word	0x0800bda2
 8004e18:	0800c0a6 	.word	0x0800c0a6
 8004e1c:	0800b013 	.word	0x0800b013

08004e20 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8004e20:	b538      	push	{r3, r4, r5, lr}
 8004e22:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8004e24:	4604      	mov	r4, r0
 8004e26:	b158      	cbz	r0, 8004e40 <tcp_err+0x20>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8004e28:	7d03      	ldrb	r3, [r0, #20]
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	d106      	bne.n	8004e3c <tcp_err+0x1c>
 8004e2e:	4b05      	ldr	r3, [pc, #20]	; (8004e44 <tcp_err+0x24>)
 8004e30:	f640 020d 	movw	r2, #2061	; 0x80d
 8004e34:	4904      	ldr	r1, [pc, #16]	; (8004e48 <tcp_err+0x28>)
 8004e36:	4805      	ldr	r0, [pc, #20]	; (8004e4c <tcp_err+0x2c>)
 8004e38:	f004 fa1a 	bl	8009270 <iprintf>
    pcb->errf = err;
 8004e3c:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
 8004e40:	bd38      	pop	{r3, r4, r5, pc}
 8004e42:	bf00      	nop
 8004e44:	0800bda2 	.word	0x0800bda2
 8004e48:	0800be04 	.word	0x0800be04
 8004e4c:	0800b013 	.word	0x0800b013

08004e50 <tcp_accept>:
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8004e50:	b118      	cbz	r0, 8004e5a <tcp_accept+0xa>
 8004e52:	7d03      	ldrb	r3, [r0, #20]
 8004e54:	2b01      	cmp	r3, #1
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
    lpcb->accept = accept;
 8004e56:	bf08      	it	eq
 8004e58:	6181      	streq	r1, [r0, #24]
 8004e5a:	4770      	bx	lr

08004e5c <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8004e5c:	b570      	push	{r4, r5, r6, lr}
 8004e5e:	460e      	mov	r6, r1
 8004e60:	4615      	mov	r5, r2
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8004e62:	4604      	mov	r4, r0
 8004e64:	b940      	cbnz	r0, 8004e78 <tcp_poll+0x1c>
 8004e66:	4b0b      	ldr	r3, [pc, #44]	; (8004e94 <tcp_poll+0x38>)
 8004e68:	f640 023d 	movw	r2, #2109	; 0x83d
 8004e6c:	490a      	ldr	r1, [pc, #40]	; (8004e98 <tcp_poll+0x3c>)
 8004e6e:	480b      	ldr	r0, [pc, #44]	; (8004e9c <tcp_poll+0x40>)
  pcb->poll = poll;
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
}
 8004e70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8004e74:	f004 b9fc 	b.w	8009270 <iprintf>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8004e78:	7d03      	ldrb	r3, [r0, #20]
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	d106      	bne.n	8004e8c <tcp_poll+0x30>
 8004e7e:	4b05      	ldr	r3, [pc, #20]	; (8004e94 <tcp_poll+0x38>)
 8004e80:	f640 023e 	movw	r2, #2110	; 0x83e
 8004e84:	4906      	ldr	r1, [pc, #24]	; (8004ea0 <tcp_poll+0x44>)
 8004e86:	4805      	ldr	r0, [pc, #20]	; (8004e9c <tcp_poll+0x40>)
 8004e88:	f004 f9f2 	bl	8009270 <iprintf>
  pcb->poll = poll;
 8004e8c:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
  pcb->pollinterval = interval;
 8004e90:	7765      	strb	r5, [r4, #29]
 8004e92:	bd70      	pop	{r4, r5, r6, pc}
 8004e94:	0800bda2 	.word	0x0800bda2
 8004e98:	0800bfb2 	.word	0x0800bfb2
 8004e9c:	0800b013 	.word	0x0800b013
 8004ea0:	0800bfc8 	.word	0x0800bfc8

08004ea4 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8004ea4:	b508      	push	{r3, lr}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8004ea6:	b930      	cbnz	r0, 8004eb6 <tcp_next_iss+0x12>
 8004ea8:	4b06      	ldr	r3, [pc, #24]	; (8004ec4 <tcp_next_iss+0x20>)
 8004eaa:	f640 02af 	movw	r2, #2223	; 0x8af
 8004eae:	4906      	ldr	r1, [pc, #24]	; (8004ec8 <tcp_next_iss+0x24>)
 8004eb0:	4806      	ldr	r0, [pc, #24]	; (8004ecc <tcp_next_iss+0x28>)
 8004eb2:	f004 f9dd 	bl	8009270 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8004eb6:	4b06      	ldr	r3, [pc, #24]	; (8004ed0 <tcp_next_iss+0x2c>)
 8004eb8:	4a06      	ldr	r2, [pc, #24]	; (8004ed4 <tcp_next_iss+0x30>)
 8004eba:	6818      	ldr	r0, [r3, #0]
 8004ebc:	6812      	ldr	r2, [r2, #0]
 8004ebe:	4410      	add	r0, r2
 8004ec0:	6018      	str	r0, [r3, #0]
  return iss;
#endif /* LWIP_HOOK_TCP_ISN */
}
 8004ec2:	bd08      	pop	{r3, pc}
 8004ec4:	0800bda2 	.word	0x0800bda2
 8004ec8:	0800bee1 	.word	0x0800bee1
 8004ecc:	0800b013 	.word	0x0800b013
 8004ed0:	20000008 	.word	0x20000008
 8004ed4:	20003b9c 	.word	0x20003b9c

08004ed8 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8004ed8:	b538      	push	{r3, r4, r5, lr}
 8004eda:	4604      	mov	r4, r0
 8004edc:	460d      	mov	r5, r1
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8004ede:	b932      	cbnz	r2, 8004eee <tcp_eff_send_mss_netif+0x16>
 8004ee0:	4b09      	ldr	r3, [pc, #36]	; (8004f08 <tcp_eff_send_mss_netif+0x30>)
 8004ee2:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8004ee6:	4909      	ldr	r1, [pc, #36]	; (8004f0c <tcp_eff_send_mss_netif+0x34>)
 8004ee8:	4809      	ldr	r0, [pc, #36]	; (8004f10 <tcp_eff_send_mss_netif+0x38>)
 8004eea:	f004 f9c1 	bl	8009270 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8004eee:	b14d      	cbz	r5, 8004f04 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
    }
    mtu = outif->mtu;
 8004ef0:	8c2b      	ldrh	r3, [r5, #32]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8004ef2:	b13b      	cbz	r3, 8004f04 <tcp_eff_send_mss_netif+0x2c>
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8004ef4:	2b28      	cmp	r3, #40	; 0x28
 8004ef6:	bf8a      	itet	hi
 8004ef8:	3b28      	subhi	r3, #40	; 0x28
 8004efa:	2300      	movls	r3, #0
 8004efc:	b29b      	uxthhi	r3, r3
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8004efe:	429c      	cmp	r4, r3
 8004f00:	bf28      	it	cs
 8004f02:	461c      	movcs	r4, r3
  }
  return sendmss;
}
 8004f04:	4620      	mov	r0, r4
 8004f06:	bd38      	pop	{r3, r4, r5, pc}
 8004f08:	0800bda2 	.word	0x0800bda2
 8004f0c:	0800bddd 	.word	0x0800bddd
 8004f10:	0800b013 	.word	0x0800b013

08004f14 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8004f14:	b510      	push	{r4, lr}
 8004f16:	4604      	mov	r4, r0
  if (pcb->ooseq) {
 8004f18:	6f40      	ldr	r0, [r0, #116]	; 0x74
 8004f1a:	b118      	cbz	r0, 8004f24 <tcp_free_ooseq+0x10>
    tcp_segs_free(pcb->ooseq);
 8004f1c:	f7ff ff10 	bl	8004d40 <tcp_segs_free>
    pcb->ooseq = NULL;
 8004f20:	2300      	movs	r3, #0
 8004f22:	6763      	str	r3, [r4, #116]	; 0x74
 8004f24:	bd10      	pop	{r4, pc}
	...

08004f28 <tcp_pcb_purge>:
{
 8004f28:	b510      	push	{r4, lr}
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8004f2a:	4604      	mov	r4, r0
 8004f2c:	b940      	cbnz	r0, 8004f40 <tcp_pcb_purge+0x18>
 8004f2e:	4b14      	ldr	r3, [pc, #80]	; (8004f80 <tcp_pcb_purge+0x58>)
 8004f30:	f640 0251 	movw	r2, #2129	; 0x851
 8004f34:	4913      	ldr	r1, [pc, #76]	; (8004f84 <tcp_pcb_purge+0x5c>)
 8004f36:	4814      	ldr	r0, [pc, #80]	; (8004f88 <tcp_pcb_purge+0x60>)
}
 8004f38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8004f3c:	f004 b998 	b.w	8009270 <iprintf>
  if (pcb->state != CLOSED &&
 8004f40:	7d03      	ldrb	r3, [r0, #20]
 8004f42:	2b01      	cmp	r3, #1
 8004f44:	d91a      	bls.n	8004f7c <tcp_pcb_purge+0x54>
 8004f46:	2b0a      	cmp	r3, #10
 8004f48:	d018      	beq.n	8004f7c <tcp_pcb_purge+0x54>
    if (pcb->refused_data != NULL) {
 8004f4a:	6f80      	ldr	r0, [r0, #120]	; 0x78
 8004f4c:	b118      	cbz	r0, 8004f56 <tcp_pcb_purge+0x2e>
      pbuf_free(pcb->refused_data);
 8004f4e:	f7ff fabb 	bl	80044c8 <pbuf_free>
      pcb->refused_data = NULL;
 8004f52:	2300      	movs	r3, #0
 8004f54:	67a3      	str	r3, [r4, #120]	; 0x78
    if (pcb->ooseq != NULL) {
 8004f56:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8004f58:	b113      	cbz	r3, 8004f60 <tcp_pcb_purge+0x38>
      tcp_free_ooseq(pcb);
 8004f5a:	4620      	mov	r0, r4
 8004f5c:	f7ff ffda 	bl	8004f14 <tcp_free_ooseq>
    pcb->rtime = -1;
 8004f60:	f64f 73ff 	movw	r3, #65535	; 0xffff
    tcp_segs_free(pcb->unsent);
 8004f64:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    pcb->rtime = -1;
 8004f66:	8623      	strh	r3, [r4, #48]	; 0x30
    tcp_segs_free(pcb->unsent);
 8004f68:	f7ff feea 	bl	8004d40 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8004f6c:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8004f6e:	f7ff fee7 	bl	8004d40 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8004f72:	2300      	movs	r3, #0
 8004f74:	66e3      	str	r3, [r4, #108]	; 0x6c
 8004f76:	6723      	str	r3, [r4, #112]	; 0x70
    pcb->unsent_oversize = 0;
 8004f78:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
 8004f7c:	bd10      	pop	{r4, pc}
 8004f7e:	bf00      	nop
 8004f80:	0800bda2 	.word	0x0800bda2
 8004f84:	0800bf0c 	.word	0x0800bf0c
 8004f88:	0800b013 	.word	0x0800b013

08004f8c <tcp_pcb_remove>:
{
 8004f8c:	b538      	push	{r3, r4, r5, lr}
 8004f8e:	4605      	mov	r5, r0
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8004f90:	460c      	mov	r4, r1
 8004f92:	b931      	cbnz	r1, 8004fa2 <tcp_pcb_remove+0x16>
 8004f94:	4b28      	ldr	r3, [pc, #160]	; (8005038 <tcp_pcb_remove+0xac>)
 8004f96:	f640 0283 	movw	r2, #2179	; 0x883
 8004f9a:	4928      	ldr	r1, [pc, #160]	; (800503c <tcp_pcb_remove+0xb0>)
 8004f9c:	4828      	ldr	r0, [pc, #160]	; (8005040 <tcp_pcb_remove+0xb4>)
 8004f9e:	f004 f967 	bl	8009270 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8004fa2:	b935      	cbnz	r5, 8004fb2 <tcp_pcb_remove+0x26>
 8004fa4:	4b24      	ldr	r3, [pc, #144]	; (8005038 <tcp_pcb_remove+0xac>)
 8004fa6:	f640 0284 	movw	r2, #2180	; 0x884
 8004faa:	4926      	ldr	r1, [pc, #152]	; (8005044 <tcp_pcb_remove+0xb8>)
 8004fac:	4824      	ldr	r0, [pc, #144]	; (8005040 <tcp_pcb_remove+0xb4>)
 8004fae:	f004 f95f 	bl	8009270 <iprintf>
  TCP_RMV(pcblist, pcb);
 8004fb2:	682b      	ldr	r3, [r5, #0]
 8004fb4:	429c      	cmp	r4, r3
 8004fb6:	d137      	bne.n	8005028 <tcp_pcb_remove+0x9c>
 8004fb8:	68e3      	ldr	r3, [r4, #12]
 8004fba:	602b      	str	r3, [r5, #0]
 8004fbc:	2300      	movs	r3, #0
  tcp_pcb_purge(pcb);
 8004fbe:	4620      	mov	r0, r4
  TCP_RMV(pcblist, pcb);
 8004fc0:	60e3      	str	r3, [r4, #12]
  tcp_pcb_purge(pcb);
 8004fc2:	f7ff ffb1 	bl	8004f28 <tcp_pcb_purge>
  if ((pcb->state != TIME_WAIT) &&
 8004fc6:	7d23      	ldrb	r3, [r4, #20]
 8004fc8:	2b0a      	cmp	r3, #10
 8004fca:	d00a      	beq.n	8004fe2 <tcp_pcb_remove+0x56>
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d008      	beq.n	8004fe2 <tcp_pcb_remove+0x56>
      (pcb->flags & TF_ACK_DELAY)) {
 8004fd0:	8b63      	ldrh	r3, [r4, #26]
      (pcb->state != LISTEN) &&
 8004fd2:	07da      	lsls	r2, r3, #31
 8004fd4:	d505      	bpl.n	8004fe2 <tcp_pcb_remove+0x56>
    tcp_ack_now(pcb);
 8004fd6:	f043 0302 	orr.w	r3, r3, #2
    tcp_output(pcb);
 8004fda:	4620      	mov	r0, r4
    tcp_ack_now(pcb);
 8004fdc:	8363      	strh	r3, [r4, #26]
    tcp_output(pcb);
 8004fde:	f002 ff73 	bl	8007ec8 <tcp_output>
  if (pcb->state != LISTEN) {
 8004fe2:	7d23      	ldrb	r3, [r4, #20]
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d01a      	beq.n	800501e <tcp_pcb_remove+0x92>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8004fe8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8004fea:	b133      	cbz	r3, 8004ffa <tcp_pcb_remove+0x6e>
 8004fec:	4b12      	ldr	r3, [pc, #72]	; (8005038 <tcp_pcb_remove+0xac>)
 8004fee:	f640 0293 	movw	r2, #2195	; 0x893
 8004ff2:	4915      	ldr	r1, [pc, #84]	; (8005048 <tcp_pcb_remove+0xbc>)
 8004ff4:	4812      	ldr	r0, [pc, #72]	; (8005040 <tcp_pcb_remove+0xb4>)
 8004ff6:	f004 f93b 	bl	8009270 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8004ffa:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8004ffc:	b133      	cbz	r3, 800500c <tcp_pcb_remove+0x80>
 8004ffe:	4b0e      	ldr	r3, [pc, #56]	; (8005038 <tcp_pcb_remove+0xac>)
 8005000:	f640 0294 	movw	r2, #2196	; 0x894
 8005004:	4911      	ldr	r1, [pc, #68]	; (800504c <tcp_pcb_remove+0xc0>)
 8005006:	480e      	ldr	r0, [pc, #56]	; (8005040 <tcp_pcb_remove+0xb4>)
 8005008:	f004 f932 	bl	8009270 <iprintf>
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800500c:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800500e:	b133      	cbz	r3, 800501e <tcp_pcb_remove+0x92>
 8005010:	4b09      	ldr	r3, [pc, #36]	; (8005038 <tcp_pcb_remove+0xac>)
 8005012:	f640 0296 	movw	r2, #2198	; 0x896
 8005016:	490e      	ldr	r1, [pc, #56]	; (8005050 <tcp_pcb_remove+0xc4>)
 8005018:	4809      	ldr	r0, [pc, #36]	; (8005040 <tcp_pcb_remove+0xb4>)
 800501a:	f004 f929 	bl	8009270 <iprintf>
  pcb->state = CLOSED;
 800501e:	2300      	movs	r3, #0
 8005020:	7523      	strb	r3, [r4, #20]
  pcb->local_port = 0;
 8005022:	82e3      	strh	r3, [r4, #22]
 8005024:	bd38      	pop	{r3, r4, r5, pc}
 8005026:	4613      	mov	r3, r2
  TCP_RMV(pcblist, pcb);
 8005028:	2b00      	cmp	r3, #0
 800502a:	d0c7      	beq.n	8004fbc <tcp_pcb_remove+0x30>
 800502c:	68da      	ldr	r2, [r3, #12]
 800502e:	4294      	cmp	r4, r2
 8005030:	d1f9      	bne.n	8005026 <tcp_pcb_remove+0x9a>
 8005032:	68e2      	ldr	r2, [r4, #12]
 8005034:	60da      	str	r2, [r3, #12]
 8005036:	e7c1      	b.n	8004fbc <tcp_pcb_remove+0x30>
 8005038:	0800bda2 	.word	0x0800bda2
 800503c:	0800bf27 	.word	0x0800bf27
 8005040:	0800b013 	.word	0x0800b013
 8005044:	0800bf43 	.word	0x0800bf43
 8005048:	0800bf63 	.word	0x0800bf63
 800504c:	0800bf7b 	.word	0x0800bf7b
 8005050:	0800bf94 	.word	0x0800bf94

08005054 <tcp_abandon>:
{
 8005054:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005058:	460e      	mov	r6, r1
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800505a:	4604      	mov	r4, r0
 800505c:	b948      	cbnz	r0, 8005072 <tcp_abandon+0x1e>
 800505e:	4b36      	ldr	r3, [pc, #216]	; (8005138 <tcp_abandon+0xe4>)
 8005060:	f240 223d 	movw	r2, #573	; 0x23d
 8005064:	4935      	ldr	r1, [pc, #212]	; (800513c <tcp_abandon+0xe8>)
 8005066:	4836      	ldr	r0, [pc, #216]	; (8005140 <tcp_abandon+0xec>)
}
 8005068:	b004      	add	sp, #16
 800506a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800506e:	f004 b8ff 	b.w	8009270 <iprintf>
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8005072:	7d03      	ldrb	r3, [r0, #20]
 8005074:	2b01      	cmp	r3, #1
 8005076:	d106      	bne.n	8005086 <tcp_abandon+0x32>
 8005078:	4b2f      	ldr	r3, [pc, #188]	; (8005138 <tcp_abandon+0xe4>)
 800507a:	f240 2241 	movw	r2, #577	; 0x241
 800507e:	4931      	ldr	r1, [pc, #196]	; (8005144 <tcp_abandon+0xf0>)
 8005080:	482f      	ldr	r0, [pc, #188]	; (8005140 <tcp_abandon+0xec>)
 8005082:	f004 f8f5 	bl	8009270 <iprintf>
  if (pcb->state == TIME_WAIT) {
 8005086:	7d23      	ldrb	r3, [r4, #20]
 8005088:	2b0a      	cmp	r3, #10
 800508a:	d109      	bne.n	80050a0 <tcp_abandon+0x4c>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800508c:	4621      	mov	r1, r4
 800508e:	482e      	ldr	r0, [pc, #184]	; (8005148 <tcp_abandon+0xf4>)
 8005090:	f7ff ff7c 	bl	8004f8c <tcp_pcb_remove>
    tcp_free(pcb);
 8005094:	4620      	mov	r0, r4
}
 8005096:	b004      	add	sp, #16
 8005098:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    tcp_free(pcb);
 800509c:	f7ff bcf8 	b.w	8004a90 <tcp_free>
    seqno = pcb->snd_nxt;
 80050a0:	f8d4 9050 	ldr.w	r9, [r4, #80]	; 0x50
    ackno = pcb->rcv_nxt;
 80050a4:	f8d4 a024 	ldr.w	sl, [r4, #36]	; 0x24
    errf = pcb->errf;
 80050a8:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
    errf_arg = pcb->callback_arg;
 80050ac:	f8d4 8010 	ldr.w	r8, [r4, #16]
 80050b0:	8ae5      	ldrh	r5, [r4, #22]
    if (pcb->state == CLOSED) {
 80050b2:	b99b      	cbnz	r3, 80050dc <tcp_abandon+0x88>
      if (pcb->local_port != 0) {
 80050b4:	b13d      	cbz	r5, 80050c6 <tcp_abandon+0x72>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80050b6:	4a25      	ldr	r2, [pc, #148]	; (800514c <tcp_abandon+0xf8>)
 80050b8:	6813      	ldr	r3, [r2, #0]
 80050ba:	429c      	cmp	r4, r3
 80050bc:	d106      	bne.n	80050cc <tcp_abandon+0x78>
 80050be:	68e3      	ldr	r3, [r4, #12]
 80050c0:	6013      	str	r3, [r2, #0]
 80050c2:	2500      	movs	r5, #0
 80050c4:	60e5      	str	r5, [r4, #12]
    int send_rst = 0;
 80050c6:	462e      	mov	r6, r5
 80050c8:	e00f      	b.n	80050ea <tcp_abandon+0x96>
 80050ca:	4613      	mov	r3, r2
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d0f8      	beq.n	80050c2 <tcp_abandon+0x6e>
 80050d0:	68da      	ldr	r2, [r3, #12]
 80050d2:	4294      	cmp	r4, r2
 80050d4:	d1f9      	bne.n	80050ca <tcp_abandon+0x76>
 80050d6:	68e2      	ldr	r2, [r4, #12]
 80050d8:	60da      	str	r2, [r3, #12]
 80050da:	e7f2      	b.n	80050c2 <tcp_abandon+0x6e>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80050dc:	4621      	mov	r1, r4
 80050de:	481c      	ldr	r0, [pc, #112]	; (8005150 <tcp_abandon+0xfc>)
 80050e0:	f7ff ff54 	bl	8004f8c <tcp_pcb_remove>
 80050e4:	2201      	movs	r2, #1
 80050e6:	4b1b      	ldr	r3, [pc, #108]	; (8005154 <tcp_abandon+0x100>)
 80050e8:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 80050ea:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80050ec:	b108      	cbz	r0, 80050f2 <tcp_abandon+0x9e>
      tcp_segs_free(pcb->unacked);
 80050ee:	f7ff fe27 	bl	8004d40 <tcp_segs_free>
    if (pcb->unsent != NULL) {
 80050f2:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80050f4:	b108      	cbz	r0, 80050fa <tcp_abandon+0xa6>
      tcp_segs_free(pcb->unsent);
 80050f6:	f7ff fe23 	bl	8004d40 <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 80050fa:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80050fc:	b108      	cbz	r0, 8005102 <tcp_abandon+0xae>
      tcp_segs_free(pcb->ooseq);
 80050fe:	f7ff fe1f 	bl	8004d40 <tcp_segs_free>
    if (send_rst) {
 8005102:	b156      	cbz	r6, 800511a <tcp_abandon+0xc6>
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8005104:	8b23      	ldrh	r3, [r4, #24]
 8005106:	4652      	mov	r2, sl
 8005108:	9501      	str	r5, [sp, #4]
 800510a:	4649      	mov	r1, r9
 800510c:	9302      	str	r3, [sp, #8]
 800510e:	1d23      	adds	r3, r4, #4
 8005110:	4620      	mov	r0, r4
 8005112:	9300      	str	r3, [sp, #0]
 8005114:	4623      	mov	r3, r4
 8005116:	f002 fe61 	bl	8007ddc <tcp_rst>
    tcp_free(pcb);
 800511a:	4620      	mov	r0, r4
 800511c:	f7ff fcb8 	bl	8004a90 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8005120:	b13f      	cbz	r7, 8005132 <tcp_abandon+0xde>
 8005122:	f06f 010c 	mvn.w	r1, #12
 8005126:	4640      	mov	r0, r8
 8005128:	463b      	mov	r3, r7
}
 800512a:	b004      	add	sp, #16
 800512c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8005130:	4718      	bx	r3
}
 8005132:	b004      	add	sp, #16
 8005134:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005138:	0800bda2 	.word	0x0800bda2
 800513c:	0800bc87 	.word	0x0800bc87
 8005140:	0800b013 	.word	0x0800b013
 8005144:	0800bca0 	.word	0x0800bca0
 8005148:	20003ba8 	.word	0x20003ba8
 800514c:	20003ba4 	.word	0x20003ba4
 8005150:	20003b98 	.word	0x20003b98
 8005154:	20003b94 	.word	0x20003b94

08005158 <tcp_abort>:
  tcp_abandon(pcb, 1);
 8005158:	2101      	movs	r1, #1
 800515a:	f7ff bf7b 	b.w	8005054 <tcp_abandon>
	...

08005160 <tcp_accept_null>:
{
 8005160:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8005162:	460c      	mov	r4, r1
 8005164:	b931      	cbnz	r1, 8005174 <tcp_accept_null+0x14>
 8005166:	4b06      	ldr	r3, [pc, #24]	; (8005180 <tcp_accept_null+0x20>)
 8005168:	f240 320f 	movw	r2, #783	; 0x30f
 800516c:	4905      	ldr	r1, [pc, #20]	; (8005184 <tcp_accept_null+0x24>)
 800516e:	4806      	ldr	r0, [pc, #24]	; (8005188 <tcp_accept_null+0x28>)
 8005170:	f004 f87e 	bl	8009270 <iprintf>
  tcp_abort(pcb);
 8005174:	4620      	mov	r0, r4
 8005176:	f7ff ffef 	bl	8005158 <tcp_abort>
}
 800517a:	f06f 000c 	mvn.w	r0, #12
 800517e:	bd10      	pop	{r4, pc}
 8005180:	0800bda2 	.word	0x0800bda2
 8005184:	0800bcd1 	.word	0x0800bcd1
 8005188:	0800b013 	.word	0x0800b013

0800518c <tcp_netif_ip_addr_changed_pcblist>:
{
 800518c:	b570      	push	{r4, r5, r6, lr}
 800518e:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8005190:	4605      	mov	r5, r0
 8005192:	b930      	cbnz	r0, 80051a2 <tcp_netif_ip_addr_changed_pcblist+0x16>
 8005194:	4b09      	ldr	r3, [pc, #36]	; (80051bc <tcp_netif_ip_addr_changed_pcblist+0x30>)
 8005196:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800519a:	4909      	ldr	r1, [pc, #36]	; (80051c0 <tcp_netif_ip_addr_changed_pcblist+0x34>)
 800519c:	4809      	ldr	r0, [pc, #36]	; (80051c4 <tcp_netif_ip_addr_changed_pcblist+0x38>)
 800519e:	f004 f867 	bl	8009270 <iprintf>
  while (pcb != NULL) {
 80051a2:	b904      	cbnz	r4, 80051a6 <tcp_netif_ip_addr_changed_pcblist+0x1a>
}
 80051a4:	bd70      	pop	{r4, r5, r6, pc}
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80051a6:	6822      	ldr	r2, [r4, #0]
 80051a8:	682b      	ldr	r3, [r5, #0]
 80051aa:	68e6      	ldr	r6, [r4, #12]
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d102      	bne.n	80051b6 <tcp_netif_ip_addr_changed_pcblist+0x2a>
      tcp_abort(pcb);
 80051b0:	4620      	mov	r0, r4
 80051b2:	f7ff ffd1 	bl	8005158 <tcp_abort>
      pcb = pcb->next;
 80051b6:	4634      	mov	r4, r6
 80051b8:	e7f3      	b.n	80051a2 <tcp_netif_ip_addr_changed_pcblist+0x16>
 80051ba:	bf00      	nop
 80051bc:	0800bda2 	.word	0x0800bda2
 80051c0:	0800bead 	.word	0x0800bead
 80051c4:	0800b013 	.word	0x0800b013

080051c8 <tcp_netif_ip_addr_changed>:
{
 80051c8:	b538      	push	{r3, r4, r5, lr}
 80051ca:	460d      	mov	r5, r1
  if (!ip_addr_isany(old_addr)) {
 80051cc:	4604      	mov	r4, r0
 80051ce:	b180      	cbz	r0, 80051f2 <tcp_netif_ip_addr_changed+0x2a>
 80051d0:	6803      	ldr	r3, [r0, #0]
 80051d2:	b173      	cbz	r3, 80051f2 <tcp_netif_ip_addr_changed+0x2a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80051d4:	4b0b      	ldr	r3, [pc, #44]	; (8005204 <tcp_netif_ip_addr_changed+0x3c>)
 80051d6:	6819      	ldr	r1, [r3, #0]
 80051d8:	f7ff ffd8 	bl	800518c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80051dc:	4b0a      	ldr	r3, [pc, #40]	; (8005208 <tcp_netif_ip_addr_changed+0x40>)
 80051de:	4620      	mov	r0, r4
 80051e0:	6819      	ldr	r1, [r3, #0]
 80051e2:	f7ff ffd3 	bl	800518c <tcp_netif_ip_addr_changed_pcblist>
    if (!ip_addr_isany(new_addr)) {
 80051e6:	b125      	cbz	r5, 80051f2 <tcp_netif_ip_addr_changed+0x2a>
 80051e8:	682b      	ldr	r3, [r5, #0]
 80051ea:	b113      	cbz	r3, 80051f2 <tcp_netif_ip_addr_changed+0x2a>
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80051ec:	4b07      	ldr	r3, [pc, #28]	; (800520c <tcp_netif_ip_addr_changed+0x44>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	b903      	cbnz	r3, 80051f4 <tcp_netif_ip_addr_changed+0x2c>
 80051f2:	bd38      	pop	{r3, r4, r5, pc}
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80051f4:	6819      	ldr	r1, [r3, #0]
 80051f6:	6822      	ldr	r2, [r4, #0]
 80051f8:	4291      	cmp	r1, r2
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80051fa:	bf04      	itt	eq
 80051fc:	682a      	ldreq	r2, [r5, #0]
 80051fe:	601a      	streq	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8005200:	68db      	ldr	r3, [r3, #12]
 8005202:	e7f5      	b.n	80051f0 <tcp_netif_ip_addr_changed+0x28>
 8005204:	20003b98 	.word	0x20003b98
 8005208:	20003ba4 	.word	0x20003ba4
 800520c:	20003ba0 	.word	0x20003ba0

08005210 <tcp_kill_state>:
{
 8005210:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8005212:	f1a0 0308 	sub.w	r3, r0, #8
{
 8005216:	4604      	mov	r4, r0
  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8005218:	2b01      	cmp	r3, #1
 800521a:	d906      	bls.n	800522a <tcp_kill_state+0x1a>
 800521c:	4b0f      	ldr	r3, [pc, #60]	; (800525c <tcp_kill_state+0x4c>)
 800521e:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8005222:	490f      	ldr	r1, [pc, #60]	; (8005260 <tcp_kill_state+0x50>)
 8005224:	480f      	ldr	r0, [pc, #60]	; (8005264 <tcp_kill_state+0x54>)
 8005226:	f004 f823 	bl	8009270 <iprintf>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800522a:	4b0f      	ldr	r3, [pc, #60]	; (8005268 <tcp_kill_state+0x58>)
  inactivity = 0;
 800522c:	2200      	movs	r2, #0
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800522e:	6819      	ldr	r1, [r3, #0]
  inactive = NULL;
 8005230:	4610      	mov	r0, r2
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8005232:	4b0e      	ldr	r3, [pc, #56]	; (800526c <tcp_kill_state+0x5c>)
 8005234:	681d      	ldr	r5, [r3, #0]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8005236:	b921      	cbnz	r1, 8005242 <tcp_kill_state+0x32>
  if (inactive != NULL) {
 8005238:	b170      	cbz	r0, 8005258 <tcp_kill_state+0x48>
}
 800523a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tcp_abandon(inactive, 0);
 800523e:	f7ff bf09 	b.w	8005054 <tcp_abandon>
    if (pcb->state == state) {
 8005242:	7d0b      	ldrb	r3, [r1, #20]
 8005244:	42a3      	cmp	r3, r4
 8005246:	d105      	bne.n	8005254 <tcp_kill_state+0x44>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8005248:	6a0b      	ldr	r3, [r1, #32]
 800524a:	1aeb      	subs	r3, r5, r3
 800524c:	429a      	cmp	r2, r3
 800524e:	bf9c      	itt	ls
 8005250:	461a      	movls	r2, r3
 8005252:	4608      	movls	r0, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8005254:	68c9      	ldr	r1, [r1, #12]
 8005256:	e7ee      	b.n	8005236 <tcp_kill_state+0x26>
 8005258:	bd38      	pop	{r3, r4, r5, pc}
 800525a:	bf00      	nop
 800525c:	0800bda2 	.word	0x0800bda2
 8005260:	0800be3b 	.word	0x0800be3b
 8005264:	0800b013 	.word	0x0800b013
 8005268:	20003b98 	.word	0x20003b98
 800526c:	20003b9c 	.word	0x20003b9c

08005270 <tcp_alloc>:
{
 8005270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005272:	4605      	mov	r5, r0
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8005274:	2001      	movs	r0, #1
 8005276:	f7fe fec9 	bl	800400c <memp_malloc>
  if (pcb == NULL) {
 800527a:	4604      	mov	r4, r0
 800527c:	2800      	cmp	r0, #0
 800527e:	d136      	bne.n	80052ee <tcp_alloc+0x7e>
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8005280:	4f43      	ldr	r7, [pc, #268]	; (8005390 <tcp_alloc+0x120>)
 8005282:	6838      	ldr	r0, [r7, #0]
  while (pcb != NULL) {
 8005284:	2800      	cmp	r0, #0
 8005286:	d15f      	bne.n	8005348 <tcp_alloc+0xd8>
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8005288:	4b42      	ldr	r3, [pc, #264]	; (8005394 <tcp_alloc+0x124>)
  inactivity = 0;
 800528a:	4601      	mov	r1, r0
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800528c:	4e42      	ldr	r6, [pc, #264]	; (8005398 <tcp_alloc+0x128>)
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800528e:	681b      	ldr	r3, [r3, #0]
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8005290:	6834      	ldr	r4, [r6, #0]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8005292:	2b00      	cmp	r3, #0
 8005294:	d163      	bne.n	800535e <tcp_alloc+0xee>
  if (inactive != NULL) {
 8005296:	b108      	cbz	r0, 800529c <tcp_alloc+0x2c>
    tcp_abort(inactive);
 8005298:	f7ff ff5e 	bl	8005158 <tcp_abort>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800529c:	2001      	movs	r0, #1
 800529e:	f7fe feb5 	bl	800400c <memp_malloc>
    if (pcb == NULL) {
 80052a2:	4604      	mov	r4, r0
 80052a4:	bb18      	cbnz	r0, 80052ee <tcp_alloc+0x7e>
      tcp_kill_state(LAST_ACK);
 80052a6:	2009      	movs	r0, #9
 80052a8:	f7ff ffb2 	bl	8005210 <tcp_kill_state>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80052ac:	2001      	movs	r0, #1
 80052ae:	f7fe fead 	bl	800400c <memp_malloc>
      if (pcb == NULL) {
 80052b2:	4604      	mov	r4, r0
 80052b4:	b9d8      	cbnz	r0, 80052ee <tcp_alloc+0x7e>
        tcp_kill_state(CLOSING);
 80052b6:	2008      	movs	r0, #8
 80052b8:	f7ff ffaa 	bl	8005210 <tcp_kill_state>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80052bc:	2001      	movs	r0, #1
 80052be:	f7fe fea5 	bl	800400c <memp_malloc>
        if (pcb == NULL) {
 80052c2:	4604      	mov	r4, r0
 80052c4:	b998      	cbnz	r0, 80052ee <tcp_alloc+0x7e>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80052c6:	062b      	lsls	r3, r5, #24
 80052c8:	d451      	bmi.n	800536e <tcp_alloc+0xfe>
  if (mprio == 0) {
 80052ca:	b15d      	cbz	r5, 80052e4 <tcp_alloc+0x74>
 80052cc:	462a      	mov	r2, r5
  mprio--;
 80052ce:	3a01      	subs	r2, #1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80052d0:	683b      	ldr	r3, [r7, #0]
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80052d2:	6836      	ldr	r6, [r6, #0]
  inactivity = 0;
 80052d4:	2100      	movs	r1, #0
  mprio--;
 80052d6:	b2d2      	uxtb	r2, r2
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d14a      	bne.n	8005372 <tcp_alloc+0x102>
  if (inactive != NULL) {
 80052dc:	b114      	cbz	r4, 80052e4 <tcp_alloc+0x74>
    tcp_abort(inactive);
 80052de:	4620      	mov	r0, r4
 80052e0:	f7ff ff3a 	bl	8005158 <tcp_abort>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80052e4:	2001      	movs	r0, #1
 80052e6:	f7fe fe91 	bl	800400c <memp_malloc>
  if (pcb != NULL) {
 80052ea:	4604      	mov	r4, r0
 80052ec:	b350      	cbz	r0, 8005344 <tcp_alloc+0xd4>
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80052ee:	229c      	movs	r2, #156	; 0x9c
 80052f0:	2100      	movs	r1, #0
 80052f2:	4620      	mov	r0, r4
 80052f4:	f003 ffb4 	bl	8009260 <memset>
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80052f8:	f44f 6206 	mov.w	r2, #2144	; 0x860
    pcb->snd_buf = TCP_SND_BUF;
 80052fc:	f44f 6386 	mov.w	r3, #1072	; 0x430
    pcb->prio = prio;
 8005300:	7565      	strb	r5, [r4, #21]
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8005302:	8562      	strh	r2, [r4, #42]	; 0x2a
 8005304:	8522      	strh	r2, [r4, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8005306:	22ff      	movs	r2, #255	; 0xff
    pcb->snd_buf = TCP_SND_BUF;
 8005308:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
    pcb->ttl = TCP_TTL;
 800530c:	72e2      	strb	r2, [r4, #11]
    pcb->mss = INITIAL_MSS;
 800530e:	f44f 7206 	mov.w	r2, #536	; 0x218
    pcb->ssthresh = TCP_SND_BUF;
 8005312:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
    pcb->mss = INITIAL_MSS;
 8005316:	8662      	strh	r2, [r4, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8005318:	2206      	movs	r2, #6
    pcb->recv = tcp_recv_null;
 800531a:	4b20      	ldr	r3, [pc, #128]	; (800539c <tcp_alloc+0x12c>)
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800531c:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8005320:	87e2      	strh	r2, [r4, #62]	; 0x3e
    pcb->rtime = -1;
 8005322:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pcb->recv = tcp_recv_null;
 8005326:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    pcb->rtime = -1;
 800532a:	8622      	strh	r2, [r4, #48]	; 0x30
    pcb->cwnd = 1;
 800532c:	2201      	movs	r2, #1
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800532e:	4b1c      	ldr	r3, [pc, #112]	; (80053a0 <tcp_alloc+0x130>)
    pcb->cwnd = 1;
 8005330:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8005334:	4a18      	ldr	r2, [pc, #96]	; (8005398 <tcp_alloc+0x128>)
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8005336:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    pcb->tmr = tcp_ticks;
 800533a:	6812      	ldr	r2, [r2, #0]
 800533c:	6222      	str	r2, [r4, #32]
    pcb->last_timer = tcp_timer_ctr;
 800533e:	4a19      	ldr	r2, [pc, #100]	; (80053a4 <tcp_alloc+0x134>)
 8005340:	7812      	ldrb	r2, [r2, #0]
 8005342:	77a2      	strb	r2, [r4, #30]
}
 8005344:	4620      	mov	r0, r4
 8005346:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (pcb->flags & TF_CLOSEPEND) {
 8005348:	8b43      	ldrh	r3, [r0, #26]
    struct tcp_pcb *next = pcb->next;
 800534a:	68c4      	ldr	r4, [r0, #12]
    if (pcb->flags & TF_CLOSEPEND) {
 800534c:	071a      	lsls	r2, r3, #28
 800534e:	d504      	bpl.n	800535a <tcp_alloc+0xea>
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8005350:	f023 0308 	bic.w	r3, r3, #8
 8005354:	8343      	strh	r3, [r0, #26]
      tcp_close_shutdown_fin(pcb);
 8005356:	f7ff fb5f 	bl	8004a18 <tcp_close_shutdown_fin>
{
 800535a:	4620      	mov	r0, r4
 800535c:	e792      	b.n	8005284 <tcp_alloc+0x14>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800535e:	6a1a      	ldr	r2, [r3, #32]
 8005360:	1aa2      	subs	r2, r4, r2
 8005362:	428a      	cmp	r2, r1
 8005364:	bf24      	itt	cs
 8005366:	4618      	movcs	r0, r3
 8005368:	4611      	movcs	r1, r2
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800536a:	68db      	ldr	r3, [r3, #12]
 800536c:	e791      	b.n	8005292 <tcp_alloc+0x22>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800536e:	227f      	movs	r2, #127	; 0x7f
 8005370:	e7ad      	b.n	80052ce <tcp_alloc+0x5e>
    if ((pcb->prio < mprio) ||
 8005372:	7d5f      	ldrb	r7, [r3, #21]
 8005374:	4297      	cmp	r7, r2
 8005376:	d304      	bcc.n	8005382 <tcp_alloc+0x112>
 8005378:	d107      	bne.n	800538a <tcp_alloc+0x11a>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800537a:	6a18      	ldr	r0, [r3, #32]
 800537c:	1a30      	subs	r0, r6, r0
 800537e:	4288      	cmp	r0, r1
 8005380:	d303      	bcc.n	800538a <tcp_alloc+0x11a>
      inactivity = tcp_ticks - pcb->tmr;
 8005382:	6a19      	ldr	r1, [r3, #32]
    if ((pcb->prio < mprio) ||
 8005384:	463a      	mov	r2, r7
      inactivity = tcp_ticks - pcb->tmr;
 8005386:	461c      	mov	r4, r3
 8005388:	1a71      	subs	r1, r6, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	e7a4      	b.n	80052d8 <tcp_alloc+0x68>
 800538e:	bf00      	nop
 8005390:	20003b98 	.word	0x20003b98
 8005394:	20003ba8 	.word	0x20003ba8
 8005398:	20003b9c 	.word	0x20003b9c
 800539c:	0800554d 	.word	0x0800554d
 80053a0:	006ddd00 	.word	0x006ddd00
 80053a4:	20000602 	.word	0x20000602

080053a8 <tcp_new_ip_type>:
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 80053a8:	2040      	movs	r0, #64	; 0x40
 80053aa:	f7ff bf61 	b.w	8005270 <tcp_alloc>
	...

080053b0 <tcp_close_shutdown>:
{
 80053b0:	b530      	push	{r4, r5, lr}
 80053b2:	460d      	mov	r5, r1
 80053b4:	b085      	sub	sp, #20
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80053b6:	4604      	mov	r4, r0
 80053b8:	b930      	cbnz	r0, 80053c8 <tcp_close_shutdown+0x18>
 80053ba:	4b4a      	ldr	r3, [pc, #296]	; (80054e4 <tcp_close_shutdown+0x134>)
 80053bc:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80053c0:	4949      	ldr	r1, [pc, #292]	; (80054e8 <tcp_close_shutdown+0x138>)
 80053c2:	484a      	ldr	r0, [pc, #296]	; (80054ec <tcp_close_shutdown+0x13c>)
 80053c4:	f003 ff54 	bl	8009270 <iprintf>
 80053c8:	7d23      	ldrb	r3, [r4, #20]
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80053ca:	2d00      	cmp	r5, #0
 80053cc:	d03f      	beq.n	800544e <tcp_close_shutdown+0x9e>
 80053ce:	2b04      	cmp	r3, #4
 80053d0:	d001      	beq.n	80053d6 <tcp_close_shutdown+0x26>
 80053d2:	2b07      	cmp	r3, #7
 80053d4:	d13b      	bne.n	800544e <tcp_close_shutdown+0x9e>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80053d6:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 80053d8:	b91a      	cbnz	r2, 80053e2 <tcp_close_shutdown+0x32>
 80053da:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80053dc:	f5b2 6f06 	cmp.w	r2, #2144	; 0x860
 80053e0:	d035      	beq.n	800544e <tcp_close_shutdown+0x9e>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80053e2:	8b63      	ldrh	r3, [r4, #26]
 80053e4:	06db      	lsls	r3, r3, #27
 80053e6:	d406      	bmi.n	80053f6 <tcp_close_shutdown+0x46>
 80053e8:	4b3e      	ldr	r3, [pc, #248]	; (80054e4 <tcp_close_shutdown+0x134>)
 80053ea:	f44f 72b2 	mov.w	r2, #356	; 0x164
 80053ee:	4940      	ldr	r1, [pc, #256]	; (80054f0 <tcp_close_shutdown+0x140>)
 80053f0:	483e      	ldr	r0, [pc, #248]	; (80054ec <tcp_close_shutdown+0x13c>)
 80053f2:	f003 ff3d 	bl	8009270 <iprintf>
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80053f6:	8b23      	ldrh	r3, [r4, #24]
 80053f8:	4620      	mov	r0, r4
 80053fa:	9302      	str	r3, [sp, #8]
 80053fc:	8ae3      	ldrh	r3, [r4, #22]
 80053fe:	9301      	str	r3, [sp, #4]
 8005400:	1d23      	adds	r3, r4, #4
 8005402:	9300      	str	r3, [sp, #0]
 8005404:	4623      	mov	r3, r4
 8005406:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005408:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800540a:	f002 fce7 	bl	8007ddc <tcp_rst>
      tcp_pcb_purge(pcb);
 800540e:	4620      	mov	r0, r4
 8005410:	f7ff fd8a 	bl	8004f28 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8005414:	4a37      	ldr	r2, [pc, #220]	; (80054f4 <tcp_close_shutdown+0x144>)
 8005416:	6813      	ldr	r3, [r2, #0]
 8005418:	429c      	cmp	r4, r3
 800541a:	d110      	bne.n	800543e <tcp_close_shutdown+0x8e>
 800541c:	68e3      	ldr	r3, [r4, #12]
 800541e:	6013      	str	r3, [r2, #0]
 8005420:	2300      	movs	r3, #0
 8005422:	2201      	movs	r2, #1
 8005424:	60e3      	str	r3, [r4, #12]
 8005426:	4b34      	ldr	r3, [pc, #208]	; (80054f8 <tcp_close_shutdown+0x148>)
 8005428:	701a      	strb	r2, [r3, #0]
      if (tcp_input_pcb == pcb) {
 800542a:	4b34      	ldr	r3, [pc, #208]	; (80054fc <tcp_close_shutdown+0x14c>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	429c      	cmp	r4, r3
 8005430:	d122      	bne.n	8005478 <tcp_close_shutdown+0xc8>
        tcp_trigger_input_pcb_close();
 8005432:	f001 fe45 	bl	80070c0 <tcp_trigger_input_pcb_close>
}
 8005436:	2000      	movs	r0, #0
 8005438:	b005      	add	sp, #20
 800543a:	bd30      	pop	{r4, r5, pc}
 800543c:	4613      	mov	r3, r2
      TCP_RMV_ACTIVE(pcb);
 800543e:	2b00      	cmp	r3, #0
 8005440:	d0ee      	beq.n	8005420 <tcp_close_shutdown+0x70>
 8005442:	68da      	ldr	r2, [r3, #12]
 8005444:	4294      	cmp	r4, r2
 8005446:	d1f9      	bne.n	800543c <tcp_close_shutdown+0x8c>
 8005448:	68e2      	ldr	r2, [r4, #12]
 800544a:	60da      	str	r2, [r3, #12]
 800544c:	e7e8      	b.n	8005420 <tcp_close_shutdown+0x70>
  switch (pcb->state) {
 800544e:	2b01      	cmp	r3, #1
 8005450:	d01f      	beq.n	8005492 <tcp_close_shutdown+0xe2>
 8005452:	d307      	bcc.n	8005464 <tcp_close_shutdown+0xb4>
 8005454:	2b02      	cmp	r3, #2
 8005456:	d03d      	beq.n	80054d4 <tcp_close_shutdown+0x124>
      return tcp_close_shutdown_fin(pcb);
 8005458:	4620      	mov	r0, r4
}
 800545a:	b005      	add	sp, #20
 800545c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      return tcp_close_shutdown_fin(pcb);
 8005460:	f7ff bada 	b.w	8004a18 <tcp_close_shutdown_fin>
      if (pcb->local_port != 0) {
 8005464:	8ae3      	ldrh	r3, [r4, #22]
 8005466:	b13b      	cbz	r3, 8005478 <tcp_close_shutdown+0xc8>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8005468:	4a25      	ldr	r2, [pc, #148]	; (8005500 <tcp_close_shutdown+0x150>)
 800546a:	6813      	ldr	r3, [r2, #0]
 800546c:	429c      	cmp	r4, r3
 800546e:	d108      	bne.n	8005482 <tcp_close_shutdown+0xd2>
 8005470:	68e3      	ldr	r3, [r4, #12]
 8005472:	6013      	str	r3, [r2, #0]
 8005474:	2300      	movs	r3, #0
 8005476:	60e3      	str	r3, [r4, #12]
      tcp_free(pcb);
 8005478:	4620      	mov	r0, r4
 800547a:	f7ff fb09 	bl	8004a90 <tcp_free>
      break;
 800547e:	e7da      	b.n	8005436 <tcp_close_shutdown+0x86>
 8005480:	4613      	mov	r3, r2
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8005482:	2b00      	cmp	r3, #0
 8005484:	d0f6      	beq.n	8005474 <tcp_close_shutdown+0xc4>
 8005486:	68da      	ldr	r2, [r3, #12]
 8005488:	4294      	cmp	r4, r2
 800548a:	d1f9      	bne.n	8005480 <tcp_close_shutdown+0xd0>
 800548c:	68e2      	ldr	r2, [r4, #12]
 800548e:	60da      	str	r2, [r3, #12]
 8005490:	e7f0      	b.n	8005474 <tcp_close_shutdown+0xc4>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8005492:	491c      	ldr	r1, [pc, #112]	; (8005504 <tcp_close_shutdown+0x154>)
      pcb->listener = NULL;
 8005494:	2000      	movs	r0, #0
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8005496:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 800549a:	6812      	ldr	r2, [r2, #0]
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800549c:	b9a2      	cbnz	r2, 80054c8 <tcp_close_shutdown+0x118>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800549e:	3301      	adds	r3, #1
 80054a0:	2b04      	cmp	r3, #4
 80054a2:	d1f8      	bne.n	8005496 <tcp_close_shutdown+0xe6>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80054a4:	4621      	mov	r1, r4
 80054a6:	4818      	ldr	r0, [pc, #96]	; (8005508 <tcp_close_shutdown+0x158>)
 80054a8:	f7ff fd70 	bl	8004f8c <tcp_pcb_remove>
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80054ac:	7d23      	ldrb	r3, [r4, #20]
 80054ae:	2b01      	cmp	r3, #1
 80054b0:	d105      	bne.n	80054be <tcp_close_shutdown+0x10e>
 80054b2:	4b0c      	ldr	r3, [pc, #48]	; (80054e4 <tcp_close_shutdown+0x134>)
 80054b4:	22df      	movs	r2, #223	; 0xdf
 80054b6:	4915      	ldr	r1, [pc, #84]	; (800550c <tcp_close_shutdown+0x15c>)
 80054b8:	480c      	ldr	r0, [pc, #48]	; (80054ec <tcp_close_shutdown+0x13c>)
 80054ba:	f003 fed9 	bl	8009270 <iprintf>
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80054be:	4621      	mov	r1, r4
 80054c0:	2002      	movs	r0, #2
 80054c2:	f7fe fdbf 	bl	8004044 <memp_free>
 80054c6:	e7b6      	b.n	8005436 <tcp_close_shutdown+0x86>
    if (pcb->listener == lpcb) {
 80054c8:	6fd5      	ldr	r5, [r2, #124]	; 0x7c
 80054ca:	42ac      	cmp	r4, r5
      pcb->listener = NULL;
 80054cc:	bf08      	it	eq
 80054ce:	67d0      	streq	r0, [r2, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80054d0:	68d2      	ldr	r2, [r2, #12]
 80054d2:	e7e3      	b.n	800549c <tcp_close_shutdown+0xec>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80054d4:	4621      	mov	r1, r4
 80054d6:	4807      	ldr	r0, [pc, #28]	; (80054f4 <tcp_close_shutdown+0x144>)
 80054d8:	f7ff fd58 	bl	8004f8c <tcp_pcb_remove>
 80054dc:	2201      	movs	r2, #1
 80054de:	4b06      	ldr	r3, [pc, #24]	; (80054f8 <tcp_close_shutdown+0x148>)
 80054e0:	701a      	strb	r2, [r3, #0]
 80054e2:	e7c9      	b.n	8005478 <tcp_close_shutdown+0xc8>
 80054e4:	0800bda2 	.word	0x0800bda2
 80054e8:	0800bd50 	.word	0x0800bd50
 80054ec:	0800b013 	.word	0x0800b013
 80054f0:	0800bd70 	.word	0x0800bd70
 80054f4:	20003b98 	.word	0x20003b98
 80054f8:	20003b94 	.word	0x20003b94
 80054fc:	20003bac 	.word	0x20003bac
 8005500:	20003ba4 	.word	0x20003ba4
 8005504:	0800befc 	.word	0x0800befc
 8005508:	20003ba0 	.word	0x20003ba0
 800550c:	0800bd89 	.word	0x0800bd89

08005510 <tcp_close>:
{
 8005510:	b508      	push	{r3, lr}
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8005512:	b158      	cbz	r0, 800552c <tcp_close+0x1c>
  if (pcb->state != LISTEN) {
 8005514:	7d03      	ldrb	r3, [r0, #20]
  return tcp_close_shutdown(pcb, 1);
 8005516:	2101      	movs	r1, #1
  if (pcb->state != LISTEN) {
 8005518:	2b01      	cmp	r3, #1
    tcp_set_flags(pcb, TF_RXCLOSED);
 800551a:	bf1e      	ittt	ne
 800551c:	8b43      	ldrhne	r3, [r0, #26]
 800551e:	f043 0310 	orrne.w	r3, r3, #16
 8005522:	8343      	strhne	r3, [r0, #26]
}
 8005524:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return tcp_close_shutdown(pcb, 1);
 8005528:	f7ff bf42 	b.w	80053b0 <tcp_close_shutdown>
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800552c:	4b04      	ldr	r3, [pc, #16]	; (8005540 <tcp_close+0x30>)
 800552e:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8005532:	4904      	ldr	r1, [pc, #16]	; (8005544 <tcp_close+0x34>)
 8005534:	4804      	ldr	r0, [pc, #16]	; (8005548 <tcp_close+0x38>)
 8005536:	f003 fe9b 	bl	8009270 <iprintf>
}
 800553a:	f06f 000f 	mvn.w	r0, #15
 800553e:	bd08      	pop	{r3, pc}
 8005540:	0800bda2 	.word	0x0800bda2
 8005544:	0800bd39 	.word	0x0800bd39
 8005548:	0800b013 	.word	0x0800b013

0800554c <tcp_recv_null>:
{
 800554c:	b510      	push	{r4, lr}
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800554e:	4608      	mov	r0, r1
{
 8005550:	4614      	mov	r4, r2
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8005552:	b949      	cbnz	r1, 8005568 <tcp_recv_null+0x1c>
 8005554:	4b0c      	ldr	r3, [pc, #48]	; (8005588 <tcp_recv_null+0x3c>)
 8005556:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800555a:	490c      	ldr	r1, [pc, #48]	; (800558c <tcp_recv_null+0x40>)
 800555c:	480c      	ldr	r0, [pc, #48]	; (8005590 <tcp_recv_null+0x44>)
 800555e:	f003 fe87 	bl	8009270 <iprintf>
 8005562:	f06f 000f 	mvn.w	r0, #15
 8005566:	bd10      	pop	{r4, pc}
  if (p != NULL) {
 8005568:	b13a      	cbz	r2, 800557a <tcp_recv_null+0x2e>
    tcp_recved(pcb, p->tot_len);
 800556a:	8911      	ldrh	r1, [r2, #8]
 800556c:	f7ff fb9e 	bl	8004cac <tcp_recved>
    pbuf_free(p);
 8005570:	4620      	mov	r0, r4
 8005572:	f7fe ffa9 	bl	80044c8 <pbuf_free>
  return ERR_OK;
 8005576:	2000      	movs	r0, #0
 8005578:	bd10      	pop	{r4, pc}
  } else if (err == ERR_OK) {
 800557a:	2b00      	cmp	r3, #0
 800557c:	d1fb      	bne.n	8005576 <tcp_recv_null+0x2a>
}
 800557e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return tcp_close(pcb);
 8005582:	f7ff bfc5 	b.w	8005510 <tcp_close>
 8005586:	bf00      	nop
 8005588:	0800bda2 	.word	0x0800bda2
 800558c:	0800c033 	.word	0x0800c033
 8005590:	0800b013 	.word	0x0800b013

08005594 <tcp_process_refused_data>:
{
 8005594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8005596:	4604      	mov	r4, r0
 8005598:	b950      	cbnz	r0, 80055b0 <tcp_process_refused_data+0x1c>
 800559a:	f06f 050f 	mvn.w	r5, #15
 800559e:	4b1d      	ldr	r3, [pc, #116]	; (8005614 <tcp_process_refused_data+0x80>)
 80055a0:	f240 6209 	movw	r2, #1545	; 0x609
 80055a4:	491c      	ldr	r1, [pc, #112]	; (8005618 <tcp_process_refused_data+0x84>)
 80055a6:	481d      	ldr	r0, [pc, #116]	; (800561c <tcp_process_refused_data+0x88>)
 80055a8:	f003 fe62 	bl	8009270 <iprintf>
}
 80055ac:	4628      	mov	r0, r5
 80055ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    u8_t refused_flags = pcb->refused_data->flags;
 80055b0:	6f86      	ldr	r6, [r0, #120]	; 0x78
    pcb->refused_data = NULL;
 80055b2:	2300      	movs	r3, #0
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80055b4:	f8d0 5084 	ldr.w	r5, [r0, #132]	; 0x84
    u8_t refused_flags = pcb->refused_data->flags;
 80055b8:	7b77      	ldrb	r7, [r6, #13]
    pcb->refused_data = NULL;
 80055ba:	6783      	str	r3, [r0, #120]	; 0x78
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80055bc:	b1dd      	cbz	r5, 80055f6 <tcp_process_refused_data+0x62>
 80055be:	4601      	mov	r1, r0
 80055c0:	4632      	mov	r2, r6
 80055c2:	6900      	ldr	r0, [r0, #16]
 80055c4:	47a8      	blx	r5
 80055c6:	4605      	mov	r5, r0
    if (err == ERR_OK) {
 80055c8:	b9e0      	cbnz	r0, 8005604 <tcp_process_refused_data+0x70>
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 80055ca:	06bb      	lsls	r3, r7, #26
 80055cc:	d5ee      	bpl.n	80055ac <tcp_process_refused_data+0x18>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80055ce:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 80055d0:	f8d4 6084 	ldr.w	r6, [r4, #132]	; 0x84
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80055d4:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
          pcb->rcv_wnd++;
 80055d8:	bf1c      	itt	ne
 80055da:	3301      	addne	r3, #1
 80055dc:	8523      	strhne	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 80055de:	2e00      	cmp	r6, #0
 80055e0:	d0e4      	beq.n	80055ac <tcp_process_refused_data+0x18>
 80055e2:	2300      	movs	r3, #0
 80055e4:	4621      	mov	r1, r4
 80055e6:	6920      	ldr	r0, [r4, #16]
 80055e8:	461a      	mov	r2, r3
 80055ea:	47b0      	blx	r6
        if (err == ERR_ABRT) {
 80055ec:	300d      	adds	r0, #13
 80055ee:	d1dd      	bne.n	80055ac <tcp_process_refused_data+0x18>
          return ERR_ABRT;
 80055f0:	f06f 050c 	mvn.w	r5, #12
 80055f4:	e7da      	b.n	80055ac <tcp_process_refused_data+0x18>
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80055f6:	4601      	mov	r1, r0
 80055f8:	462b      	mov	r3, r5
 80055fa:	4632      	mov	r2, r6
 80055fc:	4628      	mov	r0, r5
 80055fe:	f7ff ffa5 	bl	800554c <tcp_recv_null>
 8005602:	e7e0      	b.n	80055c6 <tcp_process_refused_data+0x32>
    } else if (err == ERR_ABRT) {
 8005604:	f110 050d 	adds.w	r5, r0, #13
 8005608:	d0f2      	beq.n	80055f0 <tcp_process_refused_data+0x5c>
      pcb->refused_data = refused_data;
 800560a:	67a6      	str	r6, [r4, #120]	; 0x78
      return ERR_INPROGRESS;
 800560c:	f06f 0504 	mvn.w	r5, #4
 8005610:	e7cc      	b.n	80055ac <tcp_process_refused_data+0x18>
 8005612:	bf00      	nop
 8005614:	0800bda2 	.word	0x0800bda2
 8005618:	0800bfe6 	.word	0x0800bfe6
 800561c:	0800b013 	.word	0x0800b013

08005620 <tcp_fasttmr>:
{
 8005620:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ++tcp_timer_ctr;
 8005624:	4d1b      	ldr	r5, [pc, #108]	; (8005694 <tcp_fasttmr+0x74>)
  pcb = tcp_active_pcbs;
 8005626:	4f1c      	ldr	r7, [pc, #112]	; (8005698 <tcp_fasttmr+0x78>)
  ++tcp_timer_ctr;
 8005628:	782b      	ldrb	r3, [r5, #0]
        tcp_active_pcbs_changed = 0;
 800562a:	4e1c      	ldr	r6, [pc, #112]	; (800569c <tcp_fasttmr+0x7c>)
  ++tcp_timer_ctr;
 800562c:	3301      	adds	r3, #1
 800562e:	702b      	strb	r3, [r5, #0]
  pcb = tcp_active_pcbs;
 8005630:	683c      	ldr	r4, [r7, #0]
        tcp_active_pcbs_changed = 0;
 8005632:	f04f 0800 	mov.w	r8, #0
  while (pcb != NULL) {
 8005636:	b90c      	cbnz	r4, 800563c <tcp_fasttmr+0x1c>
}
 8005638:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (pcb->last_timer != tcp_timer_ctr) {
 800563c:	782b      	ldrb	r3, [r5, #0]
 800563e:	7fa2      	ldrb	r2, [r4, #30]
 8005640:	429a      	cmp	r2, r3
 8005642:	d024      	beq.n	800568e <tcp_fasttmr+0x6e>
      pcb->last_timer = tcp_timer_ctr;
 8005644:	77a3      	strb	r3, [r4, #30]
      if (pcb->flags & TF_ACK_DELAY) {
 8005646:	8b63      	ldrh	r3, [r4, #26]
 8005648:	07d9      	lsls	r1, r3, #31
 800564a:	d509      	bpl.n	8005660 <tcp_fasttmr+0x40>
        tcp_ack_now(pcb);
 800564c:	f043 0302 	orr.w	r3, r3, #2
        tcp_output(pcb);
 8005650:	4620      	mov	r0, r4
        tcp_ack_now(pcb);
 8005652:	8363      	strh	r3, [r4, #26]
        tcp_output(pcb);
 8005654:	f002 fc38 	bl	8007ec8 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8005658:	8b63      	ldrh	r3, [r4, #26]
 800565a:	f023 0303 	bic.w	r3, r3, #3
 800565e:	8363      	strh	r3, [r4, #26]
      if (pcb->flags & TF_CLOSEPEND) {
 8005660:	8b63      	ldrh	r3, [r4, #26]
 8005662:	071a      	lsls	r2, r3, #28
 8005664:	d505      	bpl.n	8005672 <tcp_fasttmr+0x52>
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8005666:	f023 0308 	bic.w	r3, r3, #8
        tcp_close_shutdown_fin(pcb);
 800566a:	4620      	mov	r0, r4
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800566c:	8363      	strh	r3, [r4, #26]
        tcp_close_shutdown_fin(pcb);
 800566e:	f7ff f9d3 	bl	8004a18 <tcp_close_shutdown_fin>
      if (pcb->refused_data != NULL) {
 8005672:	6fa3      	ldr	r3, [r4, #120]	; 0x78
      next = pcb->next;
 8005674:	f8d4 900c 	ldr.w	r9, [r4, #12]
      if (pcb->refused_data != NULL) {
 8005678:	b13b      	cbz	r3, 800568a <tcp_fasttmr+0x6a>
        tcp_process_refused_data(pcb);
 800567a:	4620      	mov	r0, r4
        tcp_active_pcbs_changed = 0;
 800567c:	f886 8000 	strb.w	r8, [r6]
        tcp_process_refused_data(pcb);
 8005680:	f7ff ff88 	bl	8005594 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8005684:	7833      	ldrb	r3, [r6, #0]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d1d2      	bne.n	8005630 <tcp_fasttmr+0x10>
{
 800568a:	464c      	mov	r4, r9
 800568c:	e7d3      	b.n	8005636 <tcp_fasttmr+0x16>
      pcb = pcb->next;
 800568e:	f8d4 900c 	ldr.w	r9, [r4, #12]
 8005692:	e7fa      	b.n	800568a <tcp_fasttmr+0x6a>
 8005694:	20000602 	.word	0x20000602
 8005698:	20003b98 	.word	0x20003b98
 800569c:	20003b94 	.word	0x20003b94

080056a0 <tcp_slowtmr>:
{
 80056a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ++tcp_ticks;
 80056a4:	4e95      	ldr	r6, [pc, #596]	; (80058fc <tcp_slowtmr+0x25c>)
{
 80056a6:	b087      	sub	sp, #28
      tcp_active_pcbs_changed = 0;
 80056a8:	f8df a284 	ldr.w	sl, [pc, #644]	; 8005930 <tcp_slowtmr+0x290>
  ++tcp_ticks;
 80056ac:	6833      	ldr	r3, [r6, #0]
 80056ae:	3301      	adds	r3, #1
 80056b0:	6033      	str	r3, [r6, #0]
  ++tcp_timer_ctr;
 80056b2:	4b93      	ldr	r3, [pc, #588]	; (8005900 <tcp_slowtmr+0x260>)
 80056b4:	781a      	ldrb	r2, [r3, #0]
 80056b6:	9304      	str	r3, [sp, #16]
 80056b8:	3201      	adds	r2, #1
 80056ba:	701a      	strb	r2, [r3, #0]
  pcb = tcp_active_pcbs;
 80056bc:	4b91      	ldr	r3, [pc, #580]	; (8005904 <tcp_slowtmr+0x264>)
  prev = NULL;
 80056be:	f04f 0900 	mov.w	r9, #0
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80056c2:	4f91      	ldr	r7, [pc, #580]	; (8005908 <tcp_slowtmr+0x268>)
  pcb = tcp_active_pcbs;
 80056c4:	681c      	ldr	r4, [r3, #0]
 80056c6:	4698      	mov	r8, r3
  while (pcb != NULL) {
 80056c8:	b96c      	cbnz	r4, 80056e6 <tcp_slowtmr+0x46>
  pcb = tcp_tw_pcbs;
 80056ca:	4f90      	ldr	r7, [pc, #576]	; (800590c <tcp_slowtmr+0x26c>)
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80056cc:	f8df 8238 	ldr.w	r8, [pc, #568]	; 8005908 <tcp_slowtmr+0x268>
  pcb = tcp_tw_pcbs;
 80056d0:	683d      	ldr	r5, [r7, #0]
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80056d2:	f8df a260 	ldr.w	sl, [pc, #608]	; 8005934 <tcp_slowtmr+0x294>
 80056d6:	f8df 923c 	ldr.w	r9, [pc, #572]	; 8005914 <tcp_slowtmr+0x274>
  while (pcb != NULL) {
 80056da:	2d00      	cmp	r5, #0
 80056dc:	f040 81c6 	bne.w	8005a6c <tcp_slowtmr+0x3cc>
}
 80056e0:	b007      	add	sp, #28
 80056e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80056e6:	7d23      	ldrb	r3, [r4, #20]
 80056e8:	b933      	cbnz	r3, 80056f8 <tcp_slowtmr+0x58>
 80056ea:	463b      	mov	r3, r7
 80056ec:	f240 42be 	movw	r2, #1214	; 0x4be
 80056f0:	4987      	ldr	r1, [pc, #540]	; (8005910 <tcp_slowtmr+0x270>)
 80056f2:	4888      	ldr	r0, [pc, #544]	; (8005914 <tcp_slowtmr+0x274>)
 80056f4:	f003 fdbc 	bl	8009270 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80056f8:	7d23      	ldrb	r3, [r4, #20]
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d106      	bne.n	800570c <tcp_slowtmr+0x6c>
 80056fe:	463b      	mov	r3, r7
 8005700:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8005704:	4984      	ldr	r1, [pc, #528]	; (8005918 <tcp_slowtmr+0x278>)
 8005706:	4883      	ldr	r0, [pc, #524]	; (8005914 <tcp_slowtmr+0x274>)
 8005708:	f003 fdb2 	bl	8009270 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800570c:	7d23      	ldrb	r3, [r4, #20]
 800570e:	2b0a      	cmp	r3, #10
 8005710:	d106      	bne.n	8005720 <tcp_slowtmr+0x80>
 8005712:	463b      	mov	r3, r7
 8005714:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8005718:	4980      	ldr	r1, [pc, #512]	; (800591c <tcp_slowtmr+0x27c>)
 800571a:	487e      	ldr	r0, [pc, #504]	; (8005914 <tcp_slowtmr+0x274>)
 800571c:	f003 fda8 	bl	8009270 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8005720:	9b04      	ldr	r3, [sp, #16]
 8005722:	7fa2      	ldrb	r2, [r4, #30]
 8005724:	781b      	ldrb	r3, [r3, #0]
 8005726:	429a      	cmp	r2, r3
 8005728:	d103      	bne.n	8005732 <tcp_slowtmr+0x92>
      pcb = pcb->next;
 800572a:	68e5      	ldr	r5, [r4, #12]
 800572c:	46a1      	mov	r9, r4
 800572e:	462c      	mov	r4, r5
 8005730:	e7ca      	b.n	80056c8 <tcp_slowtmr+0x28>
    pcb->last_timer = tcp_timer_ctr;
 8005732:	77a3      	strb	r3, [r4, #30]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8005734:	7d23      	ldrb	r3, [r4, #20]
 8005736:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 800573a:	2b02      	cmp	r3, #2
 800573c:	d102      	bne.n	8005744 <tcp_slowtmr+0xa4>
 800573e:	2a05      	cmp	r2, #5
 8005740:	f200 81cb 	bhi.w	8005ada <tcp_slowtmr+0x43a>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8005744:	2a0b      	cmp	r2, #11
 8005746:	d830      	bhi.n	80057aa <tcp_slowtmr+0x10a>
      if (pcb->persist_backoff > 0) {
 8005748:	f894 b099 	ldrb.w	fp, [r4, #153]	; 0x99
 800574c:	f1bb 0f00 	cmp.w	fp, #0
 8005750:	f000 80f2 	beq.w	8005938 <tcp_slowtmr+0x298>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8005754:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8005756:	b133      	cbz	r3, 8005766 <tcp_slowtmr+0xc6>
 8005758:	463b      	mov	r3, r7
 800575a:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800575e:	4970      	ldr	r1, [pc, #448]	; (8005920 <tcp_slowtmr+0x280>)
 8005760:	486c      	ldr	r0, [pc, #432]	; (8005914 <tcp_slowtmr+0x274>)
 8005762:	f003 fd85 	bl	8009270 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8005766:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8005768:	b933      	cbnz	r3, 8005778 <tcp_slowtmr+0xd8>
 800576a:	463b      	mov	r3, r7
 800576c:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8005770:	496c      	ldr	r1, [pc, #432]	; (8005924 <tcp_slowtmr+0x284>)
 8005772:	4868      	ldr	r0, [pc, #416]	; (8005914 <tcp_slowtmr+0x274>)
 8005774:	f003 fd7c 	bl	8009270 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8005778:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
 800577c:	2b0b      	cmp	r3, #11
 800577e:	d814      	bhi.n	80057aa <tcp_slowtmr+0x10a>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8005780:	f894 2099 	ldrb.w	r2, [r4, #153]	; 0x99
 8005784:	4b68      	ldr	r3, [pc, #416]	; (8005928 <tcp_slowtmr+0x288>)
 8005786:	4413      	add	r3, r2
 8005788:	f813 2c01 	ldrb.w	r2, [r3, #-1]
          if (pcb->persist_cnt < backoff_cnt) {
 800578c:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
 8005790:	429a      	cmp	r2, r3
            pcb->persist_cnt++;
 8005792:	bf84      	itt	hi
 8005794:	3301      	addhi	r3, #1
 8005796:	f884 3098 	strbhi.w	r3, [r4, #152]	; 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 800579a:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
 800579e:	4293      	cmp	r3, r2
 80057a0:	f080 808a 	bcs.w	80058b8 <tcp_slowtmr+0x218>
    pcb_remove = 0;
 80057a4:	f04f 0b00 	mov.w	fp, #0
 80057a8:	e001      	b.n	80057ae <tcp_slowtmr+0x10e>
      ++pcb_remove;
 80057aa:	f04f 0b01 	mov.w	fp, #1
    if (pcb->state == FIN_WAIT_2) {
 80057ae:	7d23      	ldrb	r3, [r4, #20]
 80057b0:	2b06      	cmp	r3, #6
 80057b2:	d10b      	bne.n	80057cc <tcp_slowtmr+0x12c>
      if (pcb->flags & TF_RXCLOSED) {
 80057b4:	8b62      	ldrh	r2, [r4, #26]
 80057b6:	06d2      	lsls	r2, r2, #27
 80057b8:	d508      	bpl.n	80057cc <tcp_slowtmr+0x12c>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80057ba:	6832      	ldr	r2, [r6, #0]
 80057bc:	6a21      	ldr	r1, [r4, #32]
 80057be:	1a52      	subs	r2, r2, r1
 80057c0:	2a28      	cmp	r2, #40	; 0x28
          ++pcb_remove;
 80057c2:	bf84      	itt	hi
 80057c4:	f10b 0b01 	addhi.w	fp, fp, #1
 80057c8:	fa5f fb8b 	uxtbhi.w	fp, fp
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80057cc:	7a65      	ldrb	r5, [r4, #9]
 80057ce:	f015 0508 	ands.w	r5, r5, #8
 80057d2:	d019      	beq.n	8005808 <tcp_slowtmr+0x168>
 80057d4:	2b04      	cmp	r3, #4
 80057d6:	d002      	beq.n	80057de <tcp_slowtmr+0x13e>
        ((pcb->state == ESTABLISHED) ||
 80057d8:	2b07      	cmp	r3, #7
 80057da:	f040 810f 	bne.w	80059fc <tcp_slowtmr+0x35c>
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80057de:	f8d4 5094 	ldr.w	r5, [r4, #148]	; 0x94
 80057e2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80057e6:	6831      	ldr	r1, [r6, #0]
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80057e8:	f505 2224 	add.w	r2, r5, #671744	; 0xa4000
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80057ec:	6a23      	ldr	r3, [r4, #32]
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80057ee:	f602 42b8 	addw	r2, r2, #3256	; 0xcb8
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80057f2:	1ac9      	subs	r1, r1, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80057f4:	fbb2 f2f0 	udiv	r2, r2, r0
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80057f8:	4291      	cmp	r1, r2
 80057fa:	f240 80ed 	bls.w	80059d8 <tcp_slowtmr+0x338>
        ++pcb_remove;
 80057fe:	f10b 0b01 	add.w	fp, fp, #1
        ++pcb_reset;
 8005802:	2501      	movs	r5, #1
        ++pcb_remove;
 8005804:	fa5f fb8b 	uxtb.w	fp, fp
    if (pcb->ooseq != NULL &&
 8005808:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800580a:	b163      	cbz	r3, 8005826 <tcp_slowtmr+0x186>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800580c:	6833      	ldr	r3, [r6, #0]
 800580e:	6a22      	ldr	r2, [r4, #32]
 8005810:	1a9a      	subs	r2, r3, r2
 8005812:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 8005816:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    if (pcb->ooseq != NULL &&
 800581a:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 800581e:	d302      	bcc.n	8005826 <tcp_slowtmr+0x186>
      tcp_free_ooseq(pcb);
 8005820:	4620      	mov	r0, r4
 8005822:	f7ff fb77 	bl	8004f14 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 8005826:	7d23      	ldrb	r3, [r4, #20]
 8005828:	2b03      	cmp	r3, #3
 800582a:	f040 80e9 	bne.w	8005a00 <tcp_slowtmr+0x360>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800582e:	6833      	ldr	r3, [r6, #0]
 8005830:	6a22      	ldr	r2, [r4, #32]
 8005832:	1a9b      	subs	r3, r3, r2
 8005834:	2b28      	cmp	r3, #40	; 0x28
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8005836:	d803      	bhi.n	8005840 <tcp_slowtmr+0x1a0>
    if (pcb_remove) {
 8005838:	f1bb 0f00 	cmp.w	fp, #0
 800583c:	f000 80f5 	beq.w	8005a2a <tcp_slowtmr+0x38a>
      tcp_pcb_purge(pcb);
 8005840:	4620      	mov	r0, r4
      tcp_err_fn err_fn = pcb->errf;
 8005842:	f8d4 b090 	ldr.w	fp, [r4, #144]	; 0x90
      tcp_pcb_purge(pcb);
 8005846:	f7ff fb6f 	bl	8004f28 <tcp_pcb_purge>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800584a:	f8d8 3000 	ldr.w	r3, [r8]
      if (prev != NULL) {
 800584e:	f1b9 0f00 	cmp.w	r9, #0
 8005852:	f000 80dd 	beq.w	8005a10 <tcp_slowtmr+0x370>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8005856:	429c      	cmp	r4, r3
 8005858:	d106      	bne.n	8005868 <tcp_slowtmr+0x1c8>
 800585a:	463b      	mov	r3, r7
 800585c:	f240 526d 	movw	r2, #1389	; 0x56d
 8005860:	4932      	ldr	r1, [pc, #200]	; (800592c <tcp_slowtmr+0x28c>)
 8005862:	482c      	ldr	r0, [pc, #176]	; (8005914 <tcp_slowtmr+0x274>)
 8005864:	f003 fd04 	bl	8009270 <iprintf>
        prev->next = pcb->next;
 8005868:	68e3      	ldr	r3, [r4, #12]
 800586a:	f8c9 300c 	str.w	r3, [r9, #12]
      if (pcb_reset) {
 800586e:	b15d      	cbz	r5, 8005888 <tcp_slowtmr+0x1e8>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8005870:	8b23      	ldrh	r3, [r4, #24]
 8005872:	4620      	mov	r0, r4
 8005874:	9302      	str	r3, [sp, #8]
 8005876:	8ae3      	ldrh	r3, [r4, #22]
 8005878:	9301      	str	r3, [sp, #4]
 800587a:	1d23      	adds	r3, r4, #4
 800587c:	9300      	str	r3, [sp, #0]
 800587e:	4623      	mov	r3, r4
 8005880:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005882:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8005884:	f002 faaa 	bl	8007ddc <tcp_rst>
      err_arg = pcb->callback_arg;
 8005888:	6923      	ldr	r3, [r4, #16]
      tcp_free(pcb2);
 800588a:	4620      	mov	r0, r4
      pcb = pcb->next;
 800588c:	68e5      	ldr	r5, [r4, #12]
      err_arg = pcb->callback_arg;
 800588e:	9305      	str	r3, [sp, #20]
      tcp_free(pcb2);
 8005890:	f7ff f8fe 	bl	8004a90 <tcp_free>
      tcp_active_pcbs_changed = 0;
 8005894:	2200      	movs	r2, #0
 8005896:	f88a 2000 	strb.w	r2, [sl]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800589a:	f1bb 0f00 	cmp.w	fp, #0
 800589e:	d004      	beq.n	80058aa <tcp_slowtmr+0x20a>
 80058a0:	9b05      	ldr	r3, [sp, #20]
 80058a2:	f06f 010c 	mvn.w	r1, #12
 80058a6:	4618      	mov	r0, r3
 80058a8:	47d8      	blx	fp
      if (tcp_active_pcbs_changed) {
 80058aa:	f89a 3000 	ldrb.w	r3, [sl]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	f47f af04 	bne.w	80056bc <tcp_slowtmr+0x1c>
 80058b4:	464c      	mov	r4, r9
 80058b6:	e739      	b.n	800572c <tcp_slowtmr+0x8c>
            if (pcb->snd_wnd == 0) {
 80058b8:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80058bc:	4620      	mov	r0, r4
            if (pcb->snd_wnd == 0) {
 80058be:	b989      	cbnz	r1, 80058e4 <tcp_slowtmr+0x244>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80058c0:	f002 fd0a 	bl	80082d8 <tcp_zero_window_probe>
 80058c4:	2800      	cmp	r0, #0
 80058c6:	f47f af6d 	bne.w	80057a4 <tcp_slowtmr+0x104>
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80058ca:	f894 3099 	ldrb.w	r3, [r4, #153]	; 0x99
              pcb->persist_cnt = 0;
 80058ce:	f04f 0b00 	mov.w	fp, #0
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80058d2:	2b06      	cmp	r3, #6
              pcb->persist_cnt = 0;
 80058d4:	f884 b098 	strb.w	fp, [r4, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80058d8:	f63f af64 	bhi.w	80057a4 <tcp_slowtmr+0x104>
                pcb->persist_backoff++;
 80058dc:	3301      	adds	r3, #1
 80058de:	f884 3099 	strb.w	r3, [r4, #153]	; 0x99
 80058e2:	e764      	b.n	80057ae <tcp_slowtmr+0x10e>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80058e4:	f002 f82a 	bl	800793c <tcp_split_unsent_seg>
 80058e8:	2800      	cmp	r0, #0
 80058ea:	d1ee      	bne.n	80058ca <tcp_slowtmr+0x22a>
                if (tcp_output(pcb) == ERR_OK) {
 80058ec:	4620      	mov	r0, r4
 80058ee:	f002 faeb 	bl	8007ec8 <tcp_output>
 80058f2:	2800      	cmp	r0, #0
 80058f4:	f43f af56 	beq.w	80057a4 <tcp_slowtmr+0x104>
 80058f8:	e7e7      	b.n	80058ca <tcp_slowtmr+0x22a>
 80058fa:	bf00      	nop
 80058fc:	20003b9c 	.word	0x20003b9c
 8005900:	20000602 	.word	0x20000602
 8005904:	20003b98 	.word	0x20003b98
 8005908:	0800bda2 	.word	0x0800bda2
 800590c:	20003ba8 	.word	0x20003ba8
 8005910:	0800c0e6 	.word	0x0800c0e6
 8005914:	0800b013 	.word	0x0800b013
 8005918:	0800c110 	.word	0x0800c110
 800591c:	0800c13a 	.word	0x0800c13a
 8005920:	0800c167 	.word	0x0800c167
 8005924:	0800c199 	.word	0x0800c199
 8005928:	0800bfab 	.word	0x0800bfab
 800592c:	0800c1ce 	.word	0x0800c1ce
 8005930:	20003b94 	.word	0x20003b94
 8005934:	0800c223 	.word	0x0800c223
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8005938:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 800593c:	2b00      	cmp	r3, #0
 800593e:	db05      	blt.n	800594c <tcp_slowtmr+0x2ac>
 8005940:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8005944:	4293      	cmp	r3, r2
          ++pcb->rtime;
 8005946:	bf1c      	itt	ne
 8005948:	3301      	addne	r3, #1
 800594a:	8623      	strhne	r3, [r4, #48]	; 0x30
        if (pcb->rtime >= pcb->rto) {
 800594c:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
 8005950:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 8005954:	429a      	cmp	r2, r3
 8005956:	f6ff af25 	blt.w	80057a4 <tcp_slowtmr+0x104>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800595a:	4620      	mov	r0, r4
 800595c:	f002 f982 	bl	8007c64 <tcp_rexmit_rto_prepare>
 8005960:	b138      	cbz	r0, 8005972 <tcp_slowtmr+0x2d2>
 8005962:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8005964:	2b00      	cmp	r3, #0
 8005966:	f47f af1d 	bne.w	80057a4 <tcp_slowtmr+0x104>
 800596a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800596c:	2b00      	cmp	r3, #0
 800596e:	f43f af19 	beq.w	80057a4 <tcp_slowtmr+0x104>
            if (pcb->state != SYN_SENT) {
 8005972:	7d23      	ldrb	r3, [r4, #20]
 8005974:	2b02      	cmp	r3, #2
 8005976:	d014      	beq.n	80059a2 <tcp_slowtmr+0x302>
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8005978:	f9b4 203c 	ldrsh.w	r2, [r4, #60]	; 0x3c
 800597c:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
 8005980:	4957      	ldr	r1, [pc, #348]	; (8005ae0 <tcp_slowtmr+0x440>)
 8005982:	eb03 03e2 	add.w	r3, r3, r2, asr #3
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8005986:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800598a:	2a0c      	cmp	r2, #12
 800598c:	bf28      	it	cs
 800598e:	220c      	movcs	r2, #12
 8005990:	5c8a      	ldrb	r2, [r1, r2]
 8005992:	4093      	lsls	r3, r2
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8005994:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8005998:	4293      	cmp	r3, r2
 800599a:	bfa8      	it	ge
 800599c:	4613      	movge	r3, r2
 800599e:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80059a2:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
            pcb->rtime = 0;
 80059a6:	2100      	movs	r1, #0
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80059a8:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80059ac:	8e60      	ldrh	r0, [r4, #50]	; 0x32
            pcb->ssthresh = eff_wnd >> 1;
 80059ae:	4293      	cmp	r3, r2
            pcb->rtime = 0;
 80059b0:	8621      	strh	r1, [r4, #48]	; 0x30
            pcb->cwnd = pcb->mss;
 80059b2:	f8a4 0048 	strh.w	r0, [r4, #72]	; 0x48
            pcb->ssthresh = eff_wnd >> 1;
 80059b6:	bf28      	it	cs
 80059b8:	4613      	movcs	r3, r2
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80059ba:	0042      	lsls	r2, r0, #1
            pcb->bytes_acked = 0;
 80059bc:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
            tcp_rexmit_rto_commit(pcb);
 80059c0:	4620      	mov	r0, r4
            pcb->ssthresh = eff_wnd >> 1;
 80059c2:	085b      	lsrs	r3, r3, #1
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80059c4:	b292      	uxth	r2, r2
            pcb->ssthresh = eff_wnd >> 1;
 80059c6:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80059ca:	4293      	cmp	r3, r2
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 80059cc:	bf38      	it	cc
 80059ce:	f8a4 204a 	strhcc.w	r2, [r4, #74]	; 0x4a
            tcp_rexmit_rto_commit(pcb);
 80059d2:	f002 fc23 	bl	800821c <tcp_rexmit_rto_commit>
 80059d6:	e6ea      	b.n	80057ae <tcp_slowtmr+0x10e>
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80059d8:	f894 309b 	ldrb.w	r3, [r4, #155]	; 0x9b
 80059dc:	4a41      	ldr	r2, [pc, #260]	; (8005ae4 <tcp_slowtmr+0x444>)
 80059de:	fb02 5303 	mla	r3, r2, r3, r5
                 / TCP_SLOW_INTERVAL) {
 80059e2:	fbb3 f3f0 	udiv	r3, r3, r0
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80059e6:	4299      	cmp	r1, r3
 80059e8:	d908      	bls.n	80059fc <tcp_slowtmr+0x35c>
        err = tcp_keepalive(pcb);
 80059ea:	4620      	mov	r0, r4
 80059ec:	f002 fc4c 	bl	8008288 <tcp_keepalive>
        if (err == ERR_OK) {
 80059f0:	b920      	cbnz	r0, 80059fc <tcp_slowtmr+0x35c>
          pcb->keep_cnt_sent++;
 80059f2:	f894 309b 	ldrb.w	r3, [r4, #155]	; 0x9b
 80059f6:	3301      	adds	r3, #1
 80059f8:	f884 309b 	strb.w	r3, [r4, #155]	; 0x9b
    pcb_reset = 0;
 80059fc:	2500      	movs	r5, #0
 80059fe:	e703      	b.n	8005808 <tcp_slowtmr+0x168>
    if (pcb->state == LAST_ACK) {
 8005a00:	2b09      	cmp	r3, #9
 8005a02:	f47f af19 	bne.w	8005838 <tcp_slowtmr+0x198>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8005a06:	6833      	ldr	r3, [r6, #0]
 8005a08:	6a22      	ldr	r2, [r4, #32]
 8005a0a:	1a9b      	subs	r3, r3, r2
 8005a0c:	2bf0      	cmp	r3, #240	; 0xf0
 8005a0e:	e712      	b.n	8005836 <tcp_slowtmr+0x196>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8005a10:	429c      	cmp	r4, r3
 8005a12:	d006      	beq.n	8005a22 <tcp_slowtmr+0x382>
 8005a14:	463b      	mov	r3, r7
 8005a16:	f240 5271 	movw	r2, #1393	; 0x571
 8005a1a:	4933      	ldr	r1, [pc, #204]	; (8005ae8 <tcp_slowtmr+0x448>)
 8005a1c:	4833      	ldr	r0, [pc, #204]	; (8005aec <tcp_slowtmr+0x44c>)
 8005a1e:	f003 fc27 	bl	8009270 <iprintf>
        tcp_active_pcbs = pcb->next;
 8005a22:	68e3      	ldr	r3, [r4, #12]
 8005a24:	f8c8 3000 	str.w	r3, [r8]
 8005a28:	e721      	b.n	800586e <tcp_slowtmr+0x1ce>
      ++prev->polltmr;
 8005a2a:	7f23      	ldrb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8005a2c:	7f62      	ldrb	r2, [r4, #29]
      ++prev->polltmr;
 8005a2e:	3301      	adds	r3, #1
      pcb = pcb->next;
 8005a30:	68e5      	ldr	r5, [r4, #12]
      ++prev->polltmr;
 8005a32:	b2db      	uxtb	r3, r3
      if (prev->polltmr >= prev->pollinterval) {
 8005a34:	429a      	cmp	r2, r3
      ++prev->polltmr;
 8005a36:	7723      	strb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8005a38:	f63f ae78 	bhi.w	800572c <tcp_slowtmr+0x8c>
        TCP_EVENT_POLL(prev, err);
 8005a3c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
        prev->polltmr = 0;
 8005a40:	f884 b01c 	strb.w	fp, [r4, #28]
        tcp_active_pcbs_changed = 0;
 8005a44:	f88a b000 	strb.w	fp, [sl]
        TCP_EVENT_POLL(prev, err);
 8005a48:	b173      	cbz	r3, 8005a68 <tcp_slowtmr+0x3c8>
 8005a4a:	4621      	mov	r1, r4
 8005a4c:	6920      	ldr	r0, [r4, #16]
 8005a4e:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
 8005a50:	f89a 3000 	ldrb.w	r3, [sl]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	f47f ae31 	bne.w	80056bc <tcp_slowtmr+0x1c>
        if (err == ERR_OK) {
 8005a5a:	2800      	cmp	r0, #0
 8005a5c:	f47f ae66 	bne.w	800572c <tcp_slowtmr+0x8c>
          tcp_output(prev);
 8005a60:	4620      	mov	r0, r4
 8005a62:	f002 fa31 	bl	8007ec8 <tcp_output>
 8005a66:	e661      	b.n	800572c <tcp_slowtmr+0x8c>
        TCP_EVENT_POLL(prev, err);
 8005a68:	4658      	mov	r0, fp
 8005a6a:	e7f1      	b.n	8005a50 <tcp_slowtmr+0x3b0>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8005a6c:	7d2b      	ldrb	r3, [r5, #20]
 8005a6e:	2b0a      	cmp	r3, #10
 8005a70:	d006      	beq.n	8005a80 <tcp_slowtmr+0x3e0>
 8005a72:	4643      	mov	r3, r8
 8005a74:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8005a78:	4651      	mov	r1, sl
 8005a7a:	4648      	mov	r0, r9
 8005a7c:	f003 fbf8 	bl	8009270 <iprintf>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8005a80:	6833      	ldr	r3, [r6, #0]
 8005a82:	6a2a      	ldr	r2, [r5, #32]
 8005a84:	1a9b      	subs	r3, r3, r2
 8005a86:	2bf0      	cmp	r3, #240	; 0xf0
 8005a88:	d815      	bhi.n	8005ab6 <tcp_slowtmr+0x416>
      pcb = pcb->next;
 8005a8a:	462c      	mov	r4, r5
 8005a8c:	68ed      	ldr	r5, [r5, #12]
 8005a8e:	e624      	b.n	80056da <tcp_slowtmr+0x3a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	429d      	cmp	r5, r3
 8005a94:	d106      	bne.n	8005aa4 <tcp_slowtmr+0x404>
 8005a96:	4643      	mov	r3, r8
 8005a98:	f240 52af 	movw	r2, #1455	; 0x5af
 8005a9c:	4914      	ldr	r1, [pc, #80]	; (8005af0 <tcp_slowtmr+0x450>)
 8005a9e:	4648      	mov	r0, r9
 8005aa0:	f003 fbe6 	bl	8009270 <iprintf>
        prev->next = pcb->next;
 8005aa4:	68eb      	ldr	r3, [r5, #12]
 8005aa6:	60e3      	str	r3, [r4, #12]
      pcb = pcb->next;
 8005aa8:	f8d5 b00c 	ldr.w	fp, [r5, #12]
      tcp_free(pcb2);
 8005aac:	4628      	mov	r0, r5
 8005aae:	f7fe ffef 	bl	8004a90 <tcp_free>
      pcb = pcb->next;
 8005ab2:	465d      	mov	r5, fp
 8005ab4:	e611      	b.n	80056da <tcp_slowtmr+0x3a>
      tcp_pcb_purge(pcb);
 8005ab6:	4628      	mov	r0, r5
 8005ab8:	f7ff fa36 	bl	8004f28 <tcp_pcb_purge>
      if (prev != NULL) {
 8005abc:	2c00      	cmp	r4, #0
 8005abe:	d1e7      	bne.n	8005a90 <tcp_slowtmr+0x3f0>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	429d      	cmp	r5, r3
 8005ac4:	d006      	beq.n	8005ad4 <tcp_slowtmr+0x434>
 8005ac6:	4643      	mov	r3, r8
 8005ac8:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8005acc:	4909      	ldr	r1, [pc, #36]	; (8005af4 <tcp_slowtmr+0x454>)
 8005ace:	4648      	mov	r0, r9
 8005ad0:	f003 fbce 	bl	8009270 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8005ad4:	68eb      	ldr	r3, [r5, #12]
 8005ad6:	603b      	str	r3, [r7, #0]
 8005ad8:	e7e6      	b.n	8005aa8 <tcp_slowtmr+0x408>
      ++pcb_remove;
 8005ada:	f04f 0b01 	mov.w	fp, #1
 8005ade:	e675      	b.n	80057cc <tcp_slowtmr+0x12c>
 8005ae0:	0800bcee 	.word	0x0800bcee
 8005ae4:	000124f8 	.word	0x000124f8
 8005ae8:	0800c1f9 	.word	0x0800c1f9
 8005aec:	0800b013 	.word	0x0800b013
 8005af0:	0800c252 	.word	0x0800c252
 8005af4:	0800c279 	.word	0x0800c279

08005af8 <tcp_tmr>:
{
 8005af8:	b508      	push	{r3, lr}
  tcp_fasttmr();
 8005afa:	f7ff fd91 	bl	8005620 <tcp_fasttmr>
  if (++tcp_timer & 1) {
 8005afe:	4a06      	ldr	r2, [pc, #24]	; (8005b18 <tcp_tmr+0x20>)
 8005b00:	7813      	ldrb	r3, [r2, #0]
 8005b02:	3301      	adds	r3, #1
 8005b04:	b2db      	uxtb	r3, r3
 8005b06:	7013      	strb	r3, [r2, #0]
 8005b08:	07db      	lsls	r3, r3, #31
 8005b0a:	d503      	bpl.n	8005b14 <tcp_tmr+0x1c>
}
 8005b0c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    tcp_slowtmr();
 8005b10:	f7ff bdc6 	b.w	80056a0 <tcp_slowtmr>
 8005b14:	bd08      	pop	{r3, pc}
 8005b16:	bf00      	nop
 8005b18:	20000601 	.word	0x20000601

08005b1c <tcp_get_next_optbyte>:
}

static u8_t
tcp_get_next_optbyte(void)
{
  u16_t optidx = tcp_optidx++;
 8005b1c:	4a09      	ldr	r2, [pc, #36]	; (8005b44 <tcp_get_next_optbyte+0x28>)
 8005b1e:	8813      	ldrh	r3, [r2, #0]
 8005b20:	1c59      	adds	r1, r3, #1
 8005b22:	8011      	strh	r1, [r2, #0]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8005b24:	4a08      	ldr	r2, [pc, #32]	; (8005b48 <tcp_get_next_optbyte+0x2c>)
 8005b26:	6812      	ldr	r2, [r2, #0]
 8005b28:	b11a      	cbz	r2, 8005b32 <tcp_get_next_optbyte+0x16>
 8005b2a:	4908      	ldr	r1, [pc, #32]	; (8005b4c <tcp_get_next_optbyte+0x30>)
 8005b2c:	8809      	ldrh	r1, [r1, #0]
 8005b2e:	428b      	cmp	r3, r1
 8005b30:	d204      	bcs.n	8005b3c <tcp_get_next_optbyte+0x20>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8005b32:	4a07      	ldr	r2, [pc, #28]	; (8005b50 <tcp_get_next_optbyte+0x34>)
    return opts[optidx];
 8005b34:	6812      	ldr	r2, [r2, #0]
 8005b36:	4413      	add	r3, r2
 8005b38:	7d18      	ldrb	r0, [r3, #20]
 8005b3a:	4770      	bx	lr
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8005b3c:	1a5b      	subs	r3, r3, r1
    return tcphdr_opt2[idx];
 8005b3e:	b2db      	uxtb	r3, r3
 8005b40:	5cd0      	ldrb	r0, [r2, r3]
  }
}
 8005b42:	4770      	bx	lr
 8005b44:	2000062c 	.word	0x2000062c
 8005b48:	20000638 	.word	0x20000638
 8005b4c:	20000634 	.word	0x20000634
 8005b50:	20000630 	.word	0x20000630

08005b54 <tcp_oos_insert_segment>:
{
 8005b54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b58:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8005b5a:	4605      	mov	r5, r0
 8005b5c:	b930      	cbnz	r0, 8005b6c <tcp_oos_insert_segment+0x18>
 8005b5e:	4b1f      	ldr	r3, [pc, #124]	; (8005bdc <tcp_oos_insert_segment+0x88>)
 8005b60:	f240 421f 	movw	r2, #1055	; 0x41f
 8005b64:	491e      	ldr	r1, [pc, #120]	; (8005be0 <tcp_oos_insert_segment+0x8c>)
 8005b66:	481f      	ldr	r0, [pc, #124]	; (8005be4 <tcp_oos_insert_segment+0x90>)
 8005b68:	f003 fb82 	bl	8009270 <iprintf>
  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8005b6c:	68eb      	ldr	r3, [r5, #12]
 8005b6e:	8998      	ldrh	r0, [r3, #12]
 8005b70:	f7fc fda6 	bl	80026c0 <lwip_htons>
 8005b74:	07c2      	lsls	r2, r0, #31
 8005b76:	d415      	bmi.n	8005ba4 <tcp_oos_insert_segment+0x50>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8005b78:	4e1b      	ldr	r6, [pc, #108]	; (8005be8 <tcp_oos_insert_segment+0x94>)
    while (next &&
 8005b7a:	b1bc      	cbz	r4, 8005bac <tcp_oos_insert_segment+0x58>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8005b7c:	68e7      	ldr	r7, [r4, #12]
 8005b7e:	6830      	ldr	r0, [r6, #0]
 8005b80:	892b      	ldrh	r3, [r5, #8]
 8005b82:	6879      	ldr	r1, [r7, #4]
 8005b84:	8922      	ldrh	r2, [r4, #8]
 8005b86:	4403      	add	r3, r0
 8005b88:	440a      	add	r2, r1
 8005b8a:	1a9a      	subs	r2, r3, r2
    while (next &&
 8005b8c:	2a00      	cmp	r2, #0
 8005b8e:	da10      	bge.n	8005bb2 <tcp_oos_insert_segment+0x5e>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8005b90:	1a5b      	subs	r3, r3, r1
    if (next &&
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	dd0a      	ble.n	8005bac <tcp_oos_insert_segment+0x58>
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8005b96:	1a09      	subs	r1, r1, r0
      pbuf_realloc(cseg->p, cseg->len);
 8005b98:	6868      	ldr	r0, [r5, #4]
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8005b9a:	b289      	uxth	r1, r1
 8005b9c:	8129      	strh	r1, [r5, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8005b9e:	f7fe fd7d 	bl	800469c <pbuf_realloc>
 8005ba2:	e003      	b.n	8005bac <tcp_oos_insert_segment+0x58>
    tcp_segs_free(next);
 8005ba4:	4620      	mov	r0, r4
    next = NULL;
 8005ba6:	2400      	movs	r4, #0
    tcp_segs_free(next);
 8005ba8:	f7ff f8ca 	bl	8004d40 <tcp_segs_free>
  cseg->next = next;
 8005bac:	602c      	str	r4, [r5, #0]
}
 8005bae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8005bb2:	89b8      	ldrh	r0, [r7, #12]
 8005bb4:	f7fc fd84 	bl	80026c0 <lwip_htons>
 8005bb8:	07c3      	lsls	r3, r0, #31
 8005bba:	d509      	bpl.n	8005bd0 <tcp_oos_insert_segment+0x7c>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8005bbc:	f8d5 800c 	ldr.w	r8, [r5, #12]
 8005bc0:	2001      	movs	r0, #1
 8005bc2:	f8b8 700c 	ldrh.w	r7, [r8, #12]
 8005bc6:	f7fc fd7b 	bl	80026c0 <lwip_htons>
 8005bca:	4338      	orrs	r0, r7
 8005bcc:	f8a8 000c 	strh.w	r0, [r8, #12]
      next = next->next;
 8005bd0:	6827      	ldr	r7, [r4, #0]
      tcp_seg_free(old_seg);
 8005bd2:	4620      	mov	r0, r4
 8005bd4:	f7ff f8a6 	bl	8004d24 <tcp_seg_free>
      next = next->next;
 8005bd8:	463c      	mov	r4, r7
 8005bda:	e7ce      	b.n	8005b7a <tcp_oos_insert_segment+0x26>
 8005bdc:	0800c518 	.word	0x0800c518
 8005be0:	0800c54a 	.word	0x0800c54a
 8005be4:	0800b013 	.word	0x0800b013
 8005be8:	20000628 	.word	0x20000628

08005bec <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8005bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8005bee:	4607      	mov	r7, r0
 8005bf0:	b930      	cbnz	r0, 8005c00 <tcp_parseopt+0x14>
 8005bf2:	4b1d      	ldr	r3, [pc, #116]	; (8005c68 <tcp_parseopt+0x7c>)
 8005bf4:	f240 727d 	movw	r2, #1917	; 0x77d
 8005bf8:	491c      	ldr	r1, [pc, #112]	; (8005c6c <tcp_parseopt+0x80>)
 8005bfa:	481d      	ldr	r0, [pc, #116]	; (8005c70 <tcp_parseopt+0x84>)
 8005bfc:	f003 fb38 	bl	8009270 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8005c00:	4e1c      	ldr	r6, [pc, #112]	; (8005c74 <tcp_parseopt+0x88>)
 8005c02:	8833      	ldrh	r3, [r6, #0]
 8005c04:	b133      	cbz	r3, 8005c14 <tcp_parseopt+0x28>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8005c06:	4d1c      	ldr	r5, [pc, #112]	; (8005c78 <tcp_parseopt+0x8c>)
 8005c08:	2300      	movs	r3, #0
 8005c0a:	802b      	strh	r3, [r5, #0]
 8005c0c:	8834      	ldrh	r4, [r6, #0]
 8005c0e:	882b      	ldrh	r3, [r5, #0]
 8005c10:	42a3      	cmp	r3, r4
 8005c12:	d300      	bcc.n	8005c16 <tcp_parseopt+0x2a>
 8005c14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      u8_t opt = tcp_get_next_optbyte();
 8005c16:	f7ff ff81 	bl	8005b1c <tcp_get_next_optbyte>
      switch (opt) {
 8005c1a:	2801      	cmp	r0, #1
 8005c1c:	d0f6      	beq.n	8005c0c <tcp_parseopt+0x20>
 8005c1e:	d3f9      	bcc.n	8005c14 <tcp_parseopt+0x28>
 8005c20:	2802      	cmp	r0, #2
 8005c22:	d117      	bne.n	8005c54 <tcp_parseopt+0x68>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8005c24:	f7ff ff7a 	bl	8005b1c <tcp_get_next_optbyte>
 8005c28:	2804      	cmp	r0, #4
 8005c2a:	d1f3      	bne.n	8005c14 <tcp_parseopt+0x28>
 8005c2c:	882b      	ldrh	r3, [r5, #0]
 8005c2e:	3301      	adds	r3, #1
 8005c30:	42a3      	cmp	r3, r4
 8005c32:	daef      	bge.n	8005c14 <tcp_parseopt+0x28>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8005c34:	f7ff ff72 	bl	8005b1c <tcp_get_next_optbyte>
 8005c38:	0200      	lsls	r0, r0, #8
 8005c3a:	b284      	uxth	r4, r0
          mss |= tcp_get_next_optbyte();
 8005c3c:	f7ff ff6e 	bl	8005b1c <tcp_get_next_optbyte>
 8005c40:	4320      	orrs	r0, r4
 8005c42:	b280      	uxth	r0, r0
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8005c44:	1e43      	subs	r3, r0, #1
 8005c46:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8005c4a:	bf28      	it	cs
 8005c4c:	f44f 7006 	movcs.w	r0, #536	; 0x218
 8005c50:	8678      	strh	r0, [r7, #50]	; 0x32
 8005c52:	e7db      	b.n	8005c0c <tcp_parseopt+0x20>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8005c54:	f7ff ff62 	bl	8005b1c <tcp_get_next_optbyte>
          if (data < 2) {
 8005c58:	2801      	cmp	r0, #1
 8005c5a:	d9db      	bls.n	8005c14 <tcp_parseopt+0x28>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8005c5c:	882b      	ldrh	r3, [r5, #0]
 8005c5e:	3b02      	subs	r3, #2
 8005c60:	4418      	add	r0, r3
 8005c62:	8028      	strh	r0, [r5, #0]
 8005c64:	e7d2      	b.n	8005c0c <tcp_parseopt+0x20>
 8005c66:	bf00      	nop
 8005c68:	0800c518 	.word	0x0800c518
 8005c6c:	0800c56f 	.word	0x0800c56f
 8005c70:	0800b013 	.word	0x0800b013
 8005c74:	2000063c 	.word	0x2000063c
 8005c78:	2000062c 	.word	0x2000062c

08005c7c <tcp_input_delayed_close>:
{
 8005c7c:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8005c7e:	4604      	mov	r4, r0
 8005c80:	b930      	cbnz	r0, 8005c90 <tcp_input_delayed_close+0x14>
 8005c82:	4b0f      	ldr	r3, [pc, #60]	; (8005cc0 <tcp_input_delayed_close+0x44>)
 8005c84:	f240 225a 	movw	r2, #602	; 0x25a
 8005c88:	490e      	ldr	r1, [pc, #56]	; (8005cc4 <tcp_input_delayed_close+0x48>)
 8005c8a:	480f      	ldr	r0, [pc, #60]	; (8005cc8 <tcp_input_delayed_close+0x4c>)
 8005c8c:	f003 faf0 	bl	8009270 <iprintf>
  if (recv_flags & TF_CLOSED) {
 8005c90:	4b0e      	ldr	r3, [pc, #56]	; (8005ccc <tcp_input_delayed_close+0x50>)
 8005c92:	7818      	ldrb	r0, [r3, #0]
 8005c94:	f010 0010 	ands.w	r0, r0, #16
 8005c98:	d011      	beq.n	8005cbe <tcp_input_delayed_close+0x42>
    if (!(pcb->flags & TF_RXCLOSED)) {
 8005c9a:	8b63      	ldrh	r3, [r4, #26]
 8005c9c:	06db      	lsls	r3, r3, #27
 8005c9e:	d406      	bmi.n	8005cae <tcp_input_delayed_close+0x32>
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8005ca0:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8005ca4:	b11b      	cbz	r3, 8005cae <tcp_input_delayed_close+0x32>
 8005ca6:	f06f 010e 	mvn.w	r1, #14
 8005caa:	6920      	ldr	r0, [r4, #16]
 8005cac:	4798      	blx	r3
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8005cae:	4621      	mov	r1, r4
 8005cb0:	4807      	ldr	r0, [pc, #28]	; (8005cd0 <tcp_input_delayed_close+0x54>)
 8005cb2:	f7ff f96b 	bl	8004f8c <tcp_pcb_remove>
    tcp_free(pcb);
 8005cb6:	4620      	mov	r0, r4
 8005cb8:	f7fe feea 	bl	8004a90 <tcp_free>
 8005cbc:	2001      	movs	r0, #1
}
 8005cbe:	bd10      	pop	{r4, pc}
 8005cc0:	0800c518 	.word	0x0800c518
 8005cc4:	0800c4f3 	.word	0x0800c4f3
 8005cc8:	0800b013 	.word	0x0800b013
 8005ccc:	20000624 	.word	0x20000624
 8005cd0:	20003b98 	.word	0x20003b98

08005cd4 <tcp_free_acked_segments.isra.2>:
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
 8005cd4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cd8:	4606      	mov	r6, r0
 8005cda:	4617      	mov	r7, r2
      LWIP_ASSERT("tcp_receive: valid queue length",
 8005cdc:	460c      	mov	r4, r1
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8005cde:	f8df 909c 	ldr.w	r9, [pc, #156]	; 8005d7c <tcp_free_acked_segments.isra.2+0xa8>
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8005ce2:	f8df 809c 	ldr.w	r8, [pc, #156]	; 8005d80 <tcp_free_acked_segments.isra.2+0xac>
 8005ce6:	f8df a09c 	ldr.w	sl, [pc, #156]	; 8005d84 <tcp_free_acked_segments.isra.2+0xb0>
  while (seg_list != NULL &&
 8005cea:	b1ac      	cbz	r4, 8005d18 <tcp_free_acked_segments.isra.2+0x44>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8005cec:	68e3      	ldr	r3, [r4, #12]
 8005cee:	6858      	ldr	r0, [r3, #4]
 8005cf0:	f7fc fce9 	bl	80026c6 <lwip_htonl>
 8005cf4:	68e3      	ldr	r3, [r4, #12]
 8005cf6:	4683      	mov	fp, r0
 8005cf8:	8925      	ldrh	r5, [r4, #8]
 8005cfa:	8998      	ldrh	r0, [r3, #12]
 8005cfc:	f7fc fce0 	bl	80026c0 <lwip_htons>
 8005d00:	f8d9 3000 	ldr.w	r3, [r9]
 8005d04:	f010 0003 	ands.w	r0, r0, #3
 8005d08:	eba5 0503 	sub.w	r5, r5, r3
 8005d0c:	bf18      	it	ne
 8005d0e:	2001      	movne	r0, #1
 8005d10:	445d      	add	r5, fp
 8005d12:	4405      	add	r5, r0
  while (seg_list != NULL &&
 8005d14:	2d00      	cmp	r5, #0
 8005d16:	dd02      	ble.n	8005d1e <tcp_free_acked_segments.isra.2+0x4a>
}
 8005d18:	4620      	mov	r0, r4
 8005d1a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    clen = pbuf_clen(next->p);
 8005d1e:	6860      	ldr	r0, [r4, #4]
    seg_list = seg_list->next;
 8005d20:	6825      	ldr	r5, [r4, #0]
    clen = pbuf_clen(next->p);
 8005d22:	f7fe fd13 	bl	800474c <pbuf_clen>
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8005d26:	8833      	ldrh	r3, [r6, #0]
    clen = pbuf_clen(next->p);
 8005d28:	4683      	mov	fp, r0
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8005d2a:	4283      	cmp	r3, r0
 8005d2c:	d206      	bcs.n	8005d3c <tcp_free_acked_segments.isra.2+0x68>
 8005d2e:	4643      	mov	r3, r8
 8005d30:	f240 4257 	movw	r2, #1111	; 0x457
 8005d34:	4651      	mov	r1, sl
 8005d36:	480e      	ldr	r0, [pc, #56]	; (8005d70 <tcp_free_acked_segments.isra.2+0x9c>)
 8005d38:	f003 fa9a 	bl	8009270 <iprintf>
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8005d3c:	8830      	ldrh	r0, [r6, #0]
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8005d3e:	4a0d      	ldr	r2, [pc, #52]	; (8005d74 <tcp_free_acked_segments.isra.2+0xa0>)
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8005d40:	eba0 000b 	sub.w	r0, r0, fp
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8005d44:	8811      	ldrh	r1, [r2, #0]
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8005d46:	8030      	strh	r0, [r6, #0]
    tcp_seg_free(next);
 8005d48:	4620      	mov	r0, r4
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8005d4a:	8923      	ldrh	r3, [r4, #8]
 8005d4c:	440b      	add	r3, r1
 8005d4e:	8013      	strh	r3, [r2, #0]
    tcp_seg_free(next);
 8005d50:	f7fe ffe8 	bl	8004d24 <tcp_seg_free>
    if (pcb->snd_queuelen != 0) {
 8005d54:	8833      	ldrh	r3, [r6, #0]
 8005d56:	b14b      	cbz	r3, 8005d6c <tcp_free_acked_segments.isra.2+0x98>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8005d58:	b945      	cbnz	r5, 8005d6c <tcp_free_acked_segments.isra.2+0x98>
 8005d5a:	b93f      	cbnz	r7, 8005d6c <tcp_free_acked_segments.isra.2+0x98>
 8005d5c:	463d      	mov	r5, r7
 8005d5e:	4643      	mov	r3, r8
 8005d60:	f240 4262 	movw	r2, #1122	; 0x462
 8005d64:	4904      	ldr	r1, [pc, #16]	; (8005d78 <tcp_free_acked_segments.isra.2+0xa4>)
 8005d66:	4802      	ldr	r0, [pc, #8]	; (8005d70 <tcp_free_acked_segments.isra.2+0x9c>)
 8005d68:	f003 fa82 	bl	8009270 <iprintf>
 8005d6c:	462c      	mov	r4, r5
 8005d6e:	e7bc      	b.n	8005cea <tcp_free_acked_segments.isra.2+0x16>
 8005d70:	0800b013 	.word	0x0800b013
 8005d74:	2000061c 	.word	0x2000061c
 8005d78:	0800c305 	.word	0x0800c305
 8005d7c:	20000604 	.word	0x20000604
 8005d80:	0800c518 	.word	0x0800c518
 8005d84:	0800c2dd 	.word	0x0800c2dd

08005d88 <tcp_receive>:
{
 8005d88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8005d8c:	4604      	mov	r4, r0
 8005d8e:	b930      	cbnz	r0, 8005d9e <tcp_receive+0x16>
 8005d90:	4b3a      	ldr	r3, [pc, #232]	; (8005e7c <tcp_receive+0xf4>)
 8005d92:	f240 427b 	movw	r2, #1147	; 0x47b
 8005d96:	493a      	ldr	r1, [pc, #232]	; (8005e80 <tcp_receive+0xf8>)
 8005d98:	483a      	ldr	r0, [pc, #232]	; (8005e84 <tcp_receive+0xfc>)
 8005d9a:	f003 fa69 	bl	8009270 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8005d9e:	7d23      	ldrb	r3, [r4, #20]
 8005da0:	2b03      	cmp	r3, #3
 8005da2:	d806      	bhi.n	8005db2 <tcp_receive+0x2a>
 8005da4:	4b35      	ldr	r3, [pc, #212]	; (8005e7c <tcp_receive+0xf4>)
 8005da6:	f240 427c 	movw	r2, #1148	; 0x47c
 8005daa:	4937      	ldr	r1, [pc, #220]	; (8005e88 <tcp_receive+0x100>)
 8005dac:	4835      	ldr	r0, [pc, #212]	; (8005e84 <tcp_receive+0xfc>)
 8005dae:	f003 fa5f 	bl	8009270 <iprintf>
  if (flags & TCP_ACK) {
 8005db2:	4b36      	ldr	r3, [pc, #216]	; (8005e8c <tcp_receive+0x104>)
 8005db4:	4e36      	ldr	r6, [pc, #216]	; (8005e90 <tcp_receive+0x108>)
 8005db6:	781b      	ldrb	r3, [r3, #0]
 8005db8:	4f36      	ldr	r7, [pc, #216]	; (8005e94 <tcp_receive+0x10c>)
 8005dba:	f013 0f10 	tst.w	r3, #16
 8005dbe:	f000 8095 	beq.w	8005eec <tcp_receive+0x164>
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8005dc2:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005dc4:	6833      	ldr	r3, [r6, #0]
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8005dc6:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8005dca:	1ad5      	subs	r5, r2, r3
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8005dcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8005dce:	2d00      	cmp	r5, #0
 8005dd0:	4d31      	ldr	r5, [pc, #196]	; (8005e98 <tcp_receive+0x110>)
 8005dd2:	db0d      	blt.n	8005df0 <tcp_receive+0x68>
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	d103      	bne.n	8005de0 <tcp_receive+0x58>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8005dd8:	682a      	ldr	r2, [r5, #0]
 8005dda:	1a82      	subs	r2, r0, r2
 8005ddc:	2a00      	cmp	r2, #0
 8005dde:	db07      	blt.n	8005df0 <tcp_receive+0x68>
 8005de0:	682a      	ldr	r2, [r5, #0]
 8005de2:	4290      	cmp	r0, r2
 8005de4:	d112      	bne.n	8005e0c <tcp_receive+0x84>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8005de6:	4a2d      	ldr	r2, [pc, #180]	; (8005e9c <tcp_receive+0x114>)
 8005de8:	6812      	ldr	r2, [r2, #0]
 8005dea:	89d2      	ldrh	r2, [r2, #14]
 8005dec:	428a      	cmp	r2, r1
 8005dee:	d90d      	bls.n	8005e0c <tcp_receive+0x84>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8005df0:	4a2a      	ldr	r2, [pc, #168]	; (8005e9c <tcp_receive+0x114>)
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8005df2:	f8b4 e062 	ldrh.w	lr, [r4, #98]	; 0x62
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8005df6:	6812      	ldr	r2, [r2, #0]
 8005df8:	89d2      	ldrh	r2, [r2, #14]
      pcb->snd_wl1 = seqno;
 8005dfa:	6563      	str	r3, [r4, #84]	; 0x54
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8005dfc:	4596      	cmp	lr, r2
      pcb->snd_wl2 = ackno;
 8005dfe:	682b      	ldr	r3, [r5, #0]
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8005e00:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8005e04:	bf38      	it	cc
 8005e06:	f8a4 2062 	strhcc.w	r2, [r4, #98]	; 0x62
      pcb->snd_wl2 = ackno;
 8005e0a:	65a3      	str	r3, [r4, #88]	; 0x58
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8005e0c:	682a      	ldr	r2, [r5, #0]
 8005e0e:	f8d4 e044 	ldr.w	lr, [r4, #68]	; 0x44
 8005e12:	eba2 030e 	sub.w	r3, r2, lr
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	f300 8180 	bgt.w	800611c <tcp_receive+0x394>
      if (tcplen == 0) {
 8005e1c:	883b      	ldrh	r3, [r7, #0]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	f040 83d1 	bne.w	80065c6 <tcp_receive+0x83e>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8005e24:	4401      	add	r1, r0
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8005e26:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 8005e2a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e2c:	4403      	add	r3, r0
 8005e2e:	4299      	cmp	r1, r3
 8005e30:	f040 83c9 	bne.w	80065c6 <tcp_receive+0x83e>
          if (pcb->rtime >= 0) {
 8005e34:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	f2c0 83c4 	blt.w	80065c6 <tcp_receive+0x83e>
            if (pcb->lastack == ackno) {
 8005e3e:	4572      	cmp	r2, lr
 8005e40:	f040 83c1 	bne.w	80065c6 <tcp_receive+0x83e>
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8005e44:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005e48:	1c53      	adds	r3, r2, #1
 8005e4a:	b2db      	uxtb	r3, r3
 8005e4c:	429a      	cmp	r2, r3
                ++pcb->dupacks;
 8005e4e:	bf38      	it	cc
 8005e50:	f884 3043 	strbcc.w	r3, [r4, #67]	; 0x43
              if (pcb->dupacks > 3) {
 8005e54:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005e58:	2b03      	cmp	r3, #3
 8005e5a:	d921      	bls.n	8005ea0 <tcp_receive+0x118>
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8005e5c:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 8005e60:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8005e62:	4413      	add	r3, r2
 8005e64:	b29b      	uxth	r3, r3
 8005e66:	429a      	cmp	r2, r3
 8005e68:	bf88      	it	hi
 8005e6a:	f64f 73ff 	movwhi	r3, #65535	; 0xffff
 8005e6e:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
                tcp_rexmit_fast(pcb);
 8005e72:	4620      	mov	r0, r4
 8005e74:	f001 ff7a 	bl	8007d6c <tcp_rexmit_fast>
 8005e78:	e013      	b.n	8005ea2 <tcp_receive+0x11a>
 8005e7a:	bf00      	nop
 8005e7c:	0800c518 	.word	0x0800c518
 8005e80:	0800c589 	.word	0x0800c589
 8005e84:	0800b013 	.word	0x0800b013
 8005e88:	0800c5a2 	.word	0x0800c5a2
 8005e8c:	20000608 	.word	0x20000608
 8005e90:	20000628 	.word	0x20000628
 8005e94:	2000063e 	.word	0x2000063e
 8005e98:	20000604 	.word	0x20000604
 8005e9c:	20000630 	.word	0x20000630
              if (pcb->dupacks >= 3) {
 8005ea0:	d0e7      	beq.n	8005e72 <tcp_receive+0xea>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8005ea2:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8005ea4:	b312      	cbz	r2, 8005eec <tcp_receive+0x164>
 8005ea6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005ea8:	6829      	ldr	r1, [r5, #0]
 8005eaa:	1a5b      	subs	r3, r3, r1
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	da1d      	bge.n	8005eec <tcp_receive+0x164>
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8005eb0:	4b91      	ldr	r3, [pc, #580]	; (80060f8 <tcp_receive+0x370>)
      m = (s16_t)(m - (pcb->sa >> 3));
 8005eb2:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	; 0x3c
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8005eb6:	6819      	ldr	r1, [r3, #0]
 8005eb8:	1a89      	subs	r1, r1, r2
      m = (s16_t)(m - (pcb->sv >> 2));
 8005eba:	f9b4 203e 	ldrsh.w	r2, [r4, #62]	; 0x3e
      m = (s16_t)(m - (pcb->sa >> 3));
 8005ebe:	eba1 01e0 	sub.w	r1, r1, r0, asr #3
      pcb->sv = (s16_t)(pcb->sv + m);
 8005ec2:	eba2 02a2 	sub.w	r2, r2, r2, asr #2
      m = (s16_t)(m - (pcb->sa >> 3));
 8005ec6:	b289      	uxth	r1, r1
 8005ec8:	b20b      	sxth	r3, r1
      pcb->sa = (s16_t)(pcb->sa + m);
 8005eca:	4408      	add	r0, r1
      if (m < 0) {
 8005ecc:	2b00      	cmp	r3, #0
      pcb->sa = (s16_t)(pcb->sa + m);
 8005ece:	b200      	sxth	r0, r0
        m = (s16_t) - m;
 8005ed0:	bfb8      	it	lt
 8005ed2:	4249      	neglt	r1, r1
      pcb->sa = (s16_t)(pcb->sa + m);
 8005ed4:	87a0      	strh	r0, [r4, #60]	; 0x3c
        m = (s16_t) - m;
 8005ed6:	bfb8      	it	lt
 8005ed8:	b20b      	sxthlt	r3, r1
      pcb->sv = (s16_t)(pcb->sv + m);
 8005eda:	4413      	add	r3, r2
 8005edc:	b29b      	uxth	r3, r3
 8005ede:	87e3      	strh	r3, [r4, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8005ee0:	eb03 03e0 	add.w	r3, r3, r0, asr #3
 8005ee4:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
      pcb->rttest = 0;
 8005ee8:	2300      	movs	r3, #0
 8005eea:	6363      	str	r3, [r4, #52]	; 0x34
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8005eec:	8838      	ldrh	r0, [r7, #0]
 8005eee:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005ef0:	2800      	cmp	r0, #0
 8005ef2:	f000 835c 	beq.w	80065ae <tcp_receive+0x826>
 8005ef6:	7d23      	ldrb	r3, [r4, #20]
 8005ef8:	2b06      	cmp	r3, #6
 8005efa:	f200 8358 	bhi.w	80065ae <tcp_receive+0x826>
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8005efe:	6833      	ldr	r3, [r6, #0]
 8005f00:	1ad5      	subs	r5, r2, r3
 8005f02:	2d01      	cmp	r5, #1
 8005f04:	f100 81a5 	bmi.w	8006252 <tcp_receive+0x4ca>
 8005f08:	f1c3 0101 	rsb	r1, r3, #1
 8005f0c:	1a09      	subs	r1, r1, r0
 8005f0e:	4411      	add	r1, r2
 8005f10:	2900      	cmp	r1, #0
 8005f12:	f300 819e 	bgt.w	8006252 <tcp_receive+0x4ca>
      struct pbuf *p = inseg.p;
 8005f16:	4b79      	ldr	r3, [pc, #484]	; (80060fc <tcp_receive+0x374>)
 8005f18:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8005f1c:	4698      	mov	r8, r3
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8005f1e:	f1b9 0f00 	cmp.w	r9, #0
 8005f22:	d106      	bne.n	8005f32 <tcp_receive+0x1aa>
 8005f24:	4b76      	ldr	r3, [pc, #472]	; (8006100 <tcp_receive+0x378>)
 8005f26:	f240 5294 	movw	r2, #1428	; 0x594
 8005f2a:	4976      	ldr	r1, [pc, #472]	; (8006104 <tcp_receive+0x37c>)
 8005f2c:	4876      	ldr	r0, [pc, #472]	; (8006108 <tcp_receive+0x380>)
 8005f2e:	f003 f99f 	bl	8009270 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8005f32:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8005f36:	429d      	cmp	r5, r3
 8005f38:	d906      	bls.n	8005f48 <tcp_receive+0x1c0>
 8005f3a:	4b71      	ldr	r3, [pc, #452]	; (8006100 <tcp_receive+0x378>)
 8005f3c:	f240 5295 	movw	r2, #1429	; 0x595
 8005f40:	4972      	ldr	r1, [pc, #456]	; (800610c <tcp_receive+0x384>)
 8005f42:	4871      	ldr	r0, [pc, #452]	; (8006108 <tcp_receive+0x380>)
 8005f44:	f003 f994 	bl	8009270 <iprintf>
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8005f48:	f8d8 3004 	ldr.w	r3, [r8, #4]
      off = (u16_t)off32;
 8005f4c:	b2ad      	uxth	r5, r5
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8005f4e:	891b      	ldrh	r3, [r3, #8]
 8005f50:	42ab      	cmp	r3, r5
 8005f52:	d206      	bcs.n	8005f62 <tcp_receive+0x1da>
 8005f54:	4b6a      	ldr	r3, [pc, #424]	; (8006100 <tcp_receive+0x378>)
 8005f56:	f240 5297 	movw	r2, #1431	; 0x597
 8005f5a:	496d      	ldr	r1, [pc, #436]	; (8006110 <tcp_receive+0x388>)
 8005f5c:	486a      	ldr	r0, [pc, #424]	; (8006108 <tcp_receive+0x380>)
 8005f5e:	f003 f987 	bl	8009270 <iprintf>
      inseg.len -= off;
 8005f62:	f8b8 3008 	ldrh.w	r3, [r8, #8]
        p->len = 0;
 8005f66:	2100      	movs	r1, #0
      inseg.len -= off;
 8005f68:	1b5b      	subs	r3, r3, r5
 8005f6a:	f8a8 3008 	strh.w	r3, [r8, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8005f6e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8005f72:	891b      	ldrh	r3, [r3, #8]
 8005f74:	1b5b      	subs	r3, r3, r5
 8005f76:	b29b      	uxth	r3, r3
      while (p->len < off) {
 8005f78:	f8b9 200a 	ldrh.w	r2, [r9, #10]
 8005f7c:	4295      	cmp	r5, r2
 8005f7e:	f200 815f 	bhi.w	8006240 <tcp_receive+0x4b8>
      pbuf_remove_header(p, off);
 8005f82:	4629      	mov	r1, r5
 8005f84:	4648      	mov	r0, r9
 8005f86:	f7fe fa6b 	bl	8004460 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8005f8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f8c:	f8d8 200c 	ldr.w	r2, [r8, #12]
 8005f90:	6033      	str	r3, [r6, #0]
 8005f92:	6053      	str	r3, [r2, #4]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8005f94:	6833      	ldr	r3, [r6, #0]
 8005f96:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005f98:	1a99      	subs	r1, r3, r2
 8005f9a:	2900      	cmp	r1, #0
 8005f9c:	f2c0 8232 	blt.w	8006404 <tcp_receive+0x67c>
 8005fa0:	1c58      	adds	r0, r3, #1
 8005fa2:	8d25      	ldrh	r5, [r4, #40]	; 0x28
 8005fa4:	1a81      	subs	r1, r0, r2
 8005fa6:	1b49      	subs	r1, r1, r5
 8005fa8:	2900      	cmp	r1, #0
 8005faa:	f300 822b 	bgt.w	8006404 <tcp_receive+0x67c>
      if (pcb->rcv_nxt == seqno) {
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	f040 8222 	bne.w	80063f8 <tcp_receive+0x670>
        tcplen = TCP_TCPLEN(&inseg);
 8005fb4:	4d51      	ldr	r5, [pc, #324]	; (80060fc <tcp_receive+0x374>)
 8005fb6:	68eb      	ldr	r3, [r5, #12]
 8005fb8:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 8005fbc:	8998      	ldrh	r0, [r3, #12]
 8005fbe:	f7fc fb7f 	bl	80026c0 <lwip_htons>
 8005fc2:	f010 0003 	ands.w	r0, r0, #3
        if (tcplen > pcb->rcv_wnd) {
 8005fc6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        tcplen = TCP_TCPLEN(&inseg);
 8005fc8:	bf18      	it	ne
 8005fca:	2001      	movne	r0, #1
 8005fcc:	4440      	add	r0, r8
 8005fce:	b280      	uxth	r0, r0
        if (tcplen > pcb->rcv_wnd) {
 8005fd0:	4283      	cmp	r3, r0
        tcplen = TCP_TCPLEN(&inseg);
 8005fd2:	8038      	strh	r0, [r7, #0]
        if (tcplen > pcb->rcv_wnd) {
 8005fd4:	d241      	bcs.n	800605a <tcp_receive+0x2d2>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8005fd6:	68eb      	ldr	r3, [r5, #12]
 8005fd8:	8998      	ldrh	r0, [r3, #12]
 8005fda:	f7fc fb71 	bl	80026c0 <lwip_htons>
 8005fde:	07c2      	lsls	r2, r0, #31
 8005fe0:	d510      	bpl.n	8006004 <tcp_receive+0x27c>
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8005fe2:	f8d5 900c 	ldr.w	r9, [r5, #12]
 8005fe6:	f8b9 800c 	ldrh.w	r8, [r9, #12]
 8005fea:	4640      	mov	r0, r8
 8005fec:	f428 587c 	bic.w	r8, r8, #16128	; 0x3f00
 8005ff0:	f7fc fb66 	bl	80026c0 <lwip_htons>
 8005ff4:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 8005ff8:	f7fc fb62 	bl	80026c0 <lwip_htons>
 8005ffc:	ea48 0800 	orr.w	r8, r8, r0
 8006000:	f8a9 800c 	strh.w	r8, [r9, #12]
          inseg.len = (u16_t)pcb->rcv_wnd;
 8006004:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006006:	812b      	strh	r3, [r5, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8006008:	68eb      	ldr	r3, [r5, #12]
 800600a:	8998      	ldrh	r0, [r3, #12]
 800600c:	f7fc fb58 	bl	80026c0 <lwip_htons>
 8006010:	0783      	lsls	r3, r0, #30
          pbuf_realloc(inseg.p, inseg.len);
 8006012:	6868      	ldr	r0, [r5, #4]
            inseg.len -= 1;
 8006014:	bf42      	ittt	mi
 8006016:	892b      	ldrhmi	r3, [r5, #8]
 8006018:	f103 33ff 	addmi.w	r3, r3, #4294967295
 800601c:	812b      	strhmi	r3, [r5, #8]
          pbuf_realloc(inseg.p, inseg.len);
 800601e:	8929      	ldrh	r1, [r5, #8]
 8006020:	f7fe fb3c 	bl	800469c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8006024:	68eb      	ldr	r3, [r5, #12]
 8006026:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 800602a:	8998      	ldrh	r0, [r3, #12]
 800602c:	f7fc fb48 	bl	80026c0 <lwip_htons>
 8006030:	f010 0003 	ands.w	r0, r0, #3
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8006034:	6833      	ldr	r3, [r6, #0]
          tcplen = TCP_TCPLEN(&inseg);
 8006036:	bf18      	it	ne
 8006038:	2001      	movne	r0, #1
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800603a:	6a62      	ldr	r2, [r4, #36]	; 0x24
          tcplen = TCP_TCPLEN(&inseg);
 800603c:	4440      	add	r0, r8
 800603e:	b280      	uxth	r0, r0
 8006040:	8038      	strh	r0, [r7, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8006042:	4418      	add	r0, r3
 8006044:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006046:	4413      	add	r3, r2
 8006048:	4298      	cmp	r0, r3
 800604a:	d006      	beq.n	800605a <tcp_receive+0x2d2>
 800604c:	4b2c      	ldr	r3, [pc, #176]	; (8006100 <tcp_receive+0x378>)
 800604e:	f240 52cc 	movw	r2, #1484	; 0x5cc
 8006052:	4930      	ldr	r1, [pc, #192]	; (8006114 <tcp_receive+0x38c>)
 8006054:	482c      	ldr	r0, [pc, #176]	; (8006108 <tcp_receive+0x380>)
 8006056:	f003 f90b 	bl	8009270 <iprintf>
        if (pcb->ooseq != NULL) {
 800605a:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800605c:	2b00      	cmp	r3, #0
 800605e:	f000 8107 	beq.w	8006270 <tcp_receive+0x4e8>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8006062:	68eb      	ldr	r3, [r5, #12]
 8006064:	8998      	ldrh	r0, [r3, #12]
 8006066:	f7fc fb2b 	bl	80026c0 <lwip_htons>
 800606a:	07c0      	lsls	r0, r0, #31
 800606c:	f100 80fd 	bmi.w	800626a <tcp_receive+0x4e2>
            struct tcp_seg *next = pcb->ooseq;
 8006070:	f8d4 8074 	ldr.w	r8, [r4, #116]	; 0x74
            while (next &&
 8006074:	f1b8 0f00 	cmp.w	r8, #0
 8006078:	d03b      	beq.n	80060f2 <tcp_receive+0x36a>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800607a:	f8d8 e00c 	ldr.w	lr, [r8, #12]
 800607e:	6830      	ldr	r0, [r6, #0]
 8006080:	883b      	ldrh	r3, [r7, #0]
 8006082:	f8de 2004 	ldr.w	r2, [lr, #4]
 8006086:	f8b8 1008 	ldrh.w	r1, [r8, #8]
 800608a:	4403      	add	r3, r0
 800608c:	4411      	add	r1, r2
 800608e:	1a59      	subs	r1, r3, r1
            while (next &&
 8006090:	2900      	cmp	r1, #0
 8006092:	f280 812a 	bge.w	80062ea <tcp_receive+0x562>
                TCP_SEQ_GT(seqno + tcplen,
 8006096:	1a9b      	subs	r3, r3, r2
            if (next &&
 8006098:	2b00      	cmp	r3, #0
 800609a:	dd2a      	ble.n	80060f2 <tcp_receive+0x36a>
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800609c:	68eb      	ldr	r3, [r5, #12]
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800609e:	1a12      	subs	r2, r2, r0
 80060a0:	812a      	strh	r2, [r5, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80060a2:	8998      	ldrh	r0, [r3, #12]
 80060a4:	f7fc fb0c 	bl	80026c0 <lwip_htons>
 80060a8:	0783      	lsls	r3, r0, #30
              pbuf_realloc(inseg.p, inseg.len);
 80060aa:	6868      	ldr	r0, [r5, #4]
                inseg.len -= 1;
 80060ac:	bf42      	ittt	mi
 80060ae:	892b      	ldrhmi	r3, [r5, #8]
 80060b0:	f103 33ff 	addmi.w	r3, r3, #4294967295
 80060b4:	812b      	strhmi	r3, [r5, #8]
              pbuf_realloc(inseg.p, inseg.len);
 80060b6:	8929      	ldrh	r1, [r5, #8]
 80060b8:	f7fe faf0 	bl	800469c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80060bc:	68eb      	ldr	r3, [r5, #12]
 80060be:	f8b5 9008 	ldrh.w	r9, [r5, #8]
 80060c2:	8998      	ldrh	r0, [r3, #12]
 80060c4:	f7fc fafc 	bl	80026c0 <lwip_htons>
 80060c8:	f010 0003 	ands.w	r0, r0, #3
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80060cc:	6833      	ldr	r3, [r6, #0]
              tcplen = TCP_TCPLEN(&inseg);
 80060ce:	bf18      	it	ne
 80060d0:	2001      	movne	r0, #1
 80060d2:	4448      	add	r0, r9
 80060d4:	b280      	uxth	r0, r0
 80060d6:	8038      	strh	r0, [r7, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80060d8:	4418      	add	r0, r3
 80060da:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	4298      	cmp	r0, r3
 80060e2:	d006      	beq.n	80060f2 <tcp_receive+0x36a>
 80060e4:	4b06      	ldr	r3, [pc, #24]	; (8006100 <tcp_receive+0x378>)
 80060e6:	f240 52fd 	movw	r2, #1533	; 0x5fd
 80060ea:	490b      	ldr	r1, [pc, #44]	; (8006118 <tcp_receive+0x390>)
 80060ec:	4806      	ldr	r0, [pc, #24]	; (8006108 <tcp_receive+0x380>)
 80060ee:	f003 f8bf 	bl	8009270 <iprintf>
            pcb->ooseq = next;
 80060f2:	f8c4 8074 	str.w	r8, [r4, #116]	; 0x74
 80060f6:	e0bb      	b.n	8006270 <tcp_receive+0x4e8>
 80060f8:	20003b9c 	.word	0x20003b9c
 80060fc:	2000060c 	.word	0x2000060c
 8006100:	0800c518 	.word	0x0800c518
 8006104:	0800c5bb 	.word	0x0800c5bb
 8006108:	0800b013 	.word	0x0800b013
 800610c:	0800c5cb 	.word	0x0800c5cb
 8006110:	0800c5da 	.word	0x0800c5da
 8006114:	0800c5ea 	.word	0x0800c5ea
 8006118:	0800c621 	.word	0x0800c621
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800611c:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800611e:	1a51      	subs	r1, r2, r1
 8006120:	2900      	cmp	r1, #0
 8006122:	f300 8089 	bgt.w	8006238 <tcp_receive+0x4b0>
      if (pcb->flags & TF_INFR) {
 8006126:	8b61      	ldrh	r1, [r4, #26]
 8006128:	0748      	lsls	r0, r1, #29
 800612a:	d509      	bpl.n	8006140 <tcp_receive+0x3b8>
        tcp_clear_flags(pcb, TF_INFR);
 800612c:	f021 0104 	bic.w	r1, r1, #4
 8006130:	8361      	strh	r1, [r4, #26]
        pcb->cwnd = pcb->ssthresh;
 8006132:	f8b4 104a 	ldrh.w	r1, [r4, #74]	; 0x4a
 8006136:	f8a4 1048 	strh.w	r1, [r4, #72]	; 0x48
        pcb->bytes_acked = 0;
 800613a:	2100      	movs	r1, #0
 800613c:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8006140:	f9b4 e03c 	ldrsh.w	lr, [r4, #60]	; 0x3c
      pcb->nrtx = 0;
 8006144:	2000      	movs	r0, #0
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8006146:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
      pcb->lastack = ackno;
 8006148:	6462      	str	r2, [r4, #68]	; 0x44
      if (pcb->state >= ESTABLISHED) {
 800614a:	7d22      	ldrb	r2, [r4, #20]
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800614c:	eb01 01ee 	add.w	r1, r1, lr, asr #3
      pcb->nrtx = 0;
 8006150:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
      if (pcb->state >= ESTABLISHED) {
 8006154:	2a03      	cmp	r2, #3
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8006156:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
      pcb->dupacks = 0;
 800615a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
      if (pcb->state >= ESTABLISHED) {
 800615e:	d91b      	bls.n	8006198 <tcp_receive+0x410>
        if (pcb->cwnd < pcb->ssthresh) {
 8006160:	f8b4 1048 	ldrh.w	r1, [r4, #72]	; 0x48
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8006164:	b29b      	uxth	r3, r3
        if (pcb->cwnd < pcb->ssthresh) {
 8006166:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 800616a:	428a      	cmp	r2, r1
 800616c:	d93e      	bls.n	80061ec <tcp_receive+0x464>
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800616e:	8b62      	ldrh	r2, [r4, #26]
 8006170:	f412 6f00 	tst.w	r2, #2048	; 0x800
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8006174:	8e62      	ldrh	r2, [r4, #50]	; 0x32
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8006176:	bf0c      	ite	eq
 8006178:	2002      	moveq	r0, #2
 800617a:	2001      	movne	r0, #1
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800617c:	fb12 f200 	smulbb	r2, r2, r0
 8006180:	b292      	uxth	r2, r2
          TCP_WND_INC(pcb->cwnd, increase);
 8006182:	429a      	cmp	r2, r3
 8006184:	bf94      	ite	ls
 8006186:	188b      	addls	r3, r1, r2
 8006188:	18cb      	addhi	r3, r1, r3
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800618a:	b29b      	uxth	r3, r3
 800618c:	4299      	cmp	r1, r3
 800618e:	d901      	bls.n	8006194 <tcp_receive+0x40c>
          TCP_WND_INC(pcb->cwnd, increase);
 8006190:	f64f 73ff 	movw	r3, #65535	; 0xffff
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8006194:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
 8006198:	f104 0866 	add.w	r8, r4, #102	; 0x66
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800619c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800619e:	6f21      	ldr	r1, [r4, #112]	; 0x70
 80061a0:	4640      	mov	r0, r8
 80061a2:	f7ff fd97 	bl	8005cd4 <tcp_free_acked_segments.isra.2>
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80061a6:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 80061a8:	4602      	mov	r2, r0
 80061aa:	6720      	str	r0, [r4, #112]	; 0x70
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80061ac:	4640      	mov	r0, r8
 80061ae:	f7ff fd91 	bl	8005cd4 <tcp_free_acked_segments.isra.2>
      if (pcb->unacked == NULL) {
 80061b2:	6f23      	ldr	r3, [r4, #112]	; 0x70
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80061b4:	66e0      	str	r0, [r4, #108]	; 0x6c
 80061b6:	2200      	movs	r2, #0
      if (pcb->unacked == NULL) {
 80061b8:	bb63      	cbnz	r3, 8006214 <tcp_receive+0x48c>
        pcb->rtime = -1;
 80061ba:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80061be:	8621      	strh	r1, [r4, #48]	; 0x30
      pcb->polltmr = 0;
 80061c0:	7722      	strb	r2, [r4, #28]
      if (pcb->unsent == NULL) {
 80061c2:	b908      	cbnz	r0, 80061c8 <tcp_receive+0x440>
        pcb->unsent_oversize = 0;
 80061c4:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80061c8:	49a7      	ldr	r1, [pc, #668]	; (8006468 <tcp_receive+0x6e0>)
 80061ca:	f8b4 2064 	ldrh.w	r2, [r4, #100]	; 0x64
 80061ce:	8809      	ldrh	r1, [r1, #0]
 80061d0:	440a      	add	r2, r1
 80061d2:	f8a4 2064 	strh.w	r2, [r4, #100]	; 0x64
      if (pcb->flags & TF_RTO) {
 80061d6:	8b62      	ldrh	r2, [r4, #26]
 80061d8:	0511      	lsls	r1, r2, #20
 80061da:	f57f ae62 	bpl.w	8005ea2 <tcp_receive+0x11a>
        if (pcb->unacked == NULL) {
 80061de:	bb3b      	cbnz	r3, 8006230 <tcp_receive+0x4a8>
          if ((pcb->unsent == NULL) ||
 80061e0:	b9d0      	cbnz	r0, 8006218 <tcp_receive+0x490>
          tcp_clear_flags(pcb, TF_RTO);
 80061e2:	8b63      	ldrh	r3, [r4, #26]
 80061e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80061e8:	8363      	strh	r3, [r4, #26]
 80061ea:	e65a      	b.n	8005ea2 <tcp_receive+0x11a>
          TCP_WND_INC(pcb->bytes_acked, acked);
 80061ec:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 80061f0:	4413      	add	r3, r2
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	429a      	cmp	r2, r3
 80061f6:	bf88      	it	hi
 80061f8:	f64f 73ff 	movwhi	r3, #65535	; 0xffff
 80061fc:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8006200:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8006204:	4299      	cmp	r1, r3
 8006206:	d8c7      	bhi.n	8006198 <tcp_receive+0x410>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8006208:	1a5b      	subs	r3, r3, r1
 800620a:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800620e:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8006210:	440b      	add	r3, r1
 8006212:	e7ba      	b.n	800618a <tcp_receive+0x402>
        pcb->rtime = 0;
 8006214:	8622      	strh	r2, [r4, #48]	; 0x30
 8006216:	e7d3      	b.n	80061c0 <tcp_receive+0x438>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8006218:	f8d4 804c 	ldr.w	r8, [r4, #76]	; 0x4c
 800621c:	68c3      	ldr	r3, [r0, #12]
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800621e:	6858      	ldr	r0, [r3, #4]
 8006220:	f7fc fa51 	bl	80026c6 <lwip_htonl>
 8006224:	eba8 0000 	sub.w	r0, r8, r0
 8006228:	2800      	cmp	r0, #0
 800622a:	f73f ae3a 	bgt.w	8005ea2 <tcp_receive+0x11a>
 800622e:	e7d8      	b.n	80061e2 <tcp_receive+0x45a>
 8006230:	f8d4 804c 	ldr.w	r8, [r4, #76]	; 0x4c
 8006234:	68db      	ldr	r3, [r3, #12]
 8006236:	e7f2      	b.n	800621e <tcp_receive+0x496>
      tcp_send_empty_ack(pcb);
 8006238:	4620      	mov	r0, r4
 800623a:	f001 fe13 	bl	8007e64 <tcp_send_empty_ack>
 800623e:	e630      	b.n	8005ea2 <tcp_receive+0x11a>
        off -= p->len;
 8006240:	1aad      	subs	r5, r5, r2
        p->tot_len = new_tot_len;
 8006242:	f8a9 3008 	strh.w	r3, [r9, #8]
        p->len = 0;
 8006246:	f8a9 100a 	strh.w	r1, [r9, #10]
        off -= p->len;
 800624a:	b2ad      	uxth	r5, r5
        p = p->next;
 800624c:	f8d9 9000 	ldr.w	r9, [r9]
 8006250:	e692      	b.n	8005f78 <tcp_receive+0x1f0>
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8006252:	1a9b      	subs	r3, r3, r2
 8006254:	2b00      	cmp	r3, #0
        tcp_ack_now(pcb);
 8006256:	bfbe      	ittt	lt
 8006258:	8b63      	ldrhlt	r3, [r4, #26]
 800625a:	f043 0302 	orrlt.w	r3, r3, #2
 800625e:	8363      	strhlt	r3, [r4, #26]
 8006260:	e698      	b.n	8005f94 <tcp_receive+0x20c>
              pcb->ooseq = pcb->ooseq->next;
 8006262:	6803      	ldr	r3, [r0, #0]
 8006264:	6763      	str	r3, [r4, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8006266:	f7fe fd5d 	bl	8004d24 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800626a:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800626c:	2800      	cmp	r0, #0
 800626e:	d1f8      	bne.n	8006262 <tcp_receive+0x4da>
        pcb->rcv_nxt = seqno + tcplen;
 8006270:	883a      	ldrh	r2, [r7, #0]
 8006272:	6833      	ldr	r3, [r6, #0]
 8006274:	4413      	add	r3, r2
 8006276:	6263      	str	r3, [r4, #36]	; 0x24
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8006278:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800627a:	4293      	cmp	r3, r2
 800627c:	d206      	bcs.n	800628c <tcp_receive+0x504>
 800627e:	4b7b      	ldr	r3, [pc, #492]	; (800646c <tcp_receive+0x6e4>)
 8006280:	f240 6207 	movw	r2, #1543	; 0x607
 8006284:	497a      	ldr	r1, [pc, #488]	; (8006470 <tcp_receive+0x6e8>)
 8006286:	487b      	ldr	r0, [pc, #492]	; (8006474 <tcp_receive+0x6ec>)
 8006288:	f002 fff2 	bl	8009270 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800628c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        tcp_update_rcv_ann_wnd(pcb);
 800628e:	4620      	mov	r0, r4
        pcb->rcv_wnd -= tcplen;
 8006290:	883a      	ldrh	r2, [r7, #0]
 8006292:	1a9b      	subs	r3, r3, r2
 8006294:	8523      	strh	r3, [r4, #40]	; 0x28
        tcp_update_rcv_ann_wnd(pcb);
 8006296:	f7fe fcd3 	bl	8004c40 <tcp_update_rcv_ann_wnd>
        if (inseg.p->tot_len > 0) {
 800629a:	686b      	ldr	r3, [r5, #4]
 800629c:	891a      	ldrh	r2, [r3, #8]
 800629e:	b11a      	cbz	r2, 80062a8 <tcp_receive+0x520>
          recv_data = inseg.p;
 80062a0:	4a75      	ldr	r2, [pc, #468]	; (8006478 <tcp_receive+0x6f0>)
 80062a2:	6013      	str	r3, [r2, #0]
          inseg.p = NULL;
 80062a4:	2300      	movs	r3, #0
 80062a6:	606b      	str	r3, [r5, #4]
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80062a8:	68eb      	ldr	r3, [r5, #12]
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80062aa:	4f70      	ldr	r7, [pc, #448]	; (800646c <tcp_receive+0x6e4>)
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80062ac:	8998      	ldrh	r0, [r3, #12]
 80062ae:	f7fc fa07 	bl	80026c0 <lwip_htons>
 80062b2:	07c5      	lsls	r5, r0, #31
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80062b4:	f8df 81cc 	ldr.w	r8, [pc, #460]	; 8006484 <tcp_receive+0x6fc>
          recv_flags |= TF_GOT_FIN;
 80062b8:	bf48      	it	mi
 80062ba:	4a70      	ldrmi	r2, [pc, #448]	; (800647c <tcp_receive+0x6f4>)
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80062bc:	f8df 91b4 	ldr.w	r9, [pc, #436]	; 8006474 <tcp_receive+0x6ec>
          recv_flags |= TF_GOT_FIN;
 80062c0:	bf42      	ittt	mi
 80062c2:	7813      	ldrbmi	r3, [r2, #0]
 80062c4:	f043 0320 	orrmi.w	r3, r3, #32
 80062c8:	7013      	strbmi	r3, [r2, #0]
        while (pcb->ooseq != NULL &&
 80062ca:	6f65      	ldr	r5, [r4, #116]	; 0x74
 80062cc:	b125      	cbz	r5, 80062d8 <tcp_receive+0x550>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80062ce:	68ea      	ldr	r2, [r5, #12]
        while (pcb->ooseq != NULL &&
 80062d0:	6a61      	ldr	r1, [r4, #36]	; 0x24
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80062d2:	6853      	ldr	r3, [r2, #4]
        while (pcb->ooseq != NULL &&
 80062d4:	428b      	cmp	r3, r1
 80062d6:	d033      	beq.n	8006340 <tcp_receive+0x5b8>
        tcp_ack(pcb);
 80062d8:	8b63      	ldrh	r3, [r4, #26]
 80062da:	07d9      	lsls	r1, r3, #31
 80062dc:	f140 8087 	bpl.w	80063ee <tcp_receive+0x666>
 80062e0:	f023 0301 	bic.w	r3, r3, #1
      tcp_ack_now(pcb);
 80062e4:	f043 0302 	orr.w	r3, r3, #2
 80062e8:	e083      	b.n	80063f2 <tcp_receive+0x66a>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80062ea:	f8be 000c 	ldrh.w	r0, [lr, #12]
 80062ee:	f7fc f9e7 	bl	80026c0 <lwip_htons>
 80062f2:	07c1      	lsls	r1, r0, #31
 80062f4:	d51d      	bpl.n	8006332 <tcp_receive+0x5aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80062f6:	68eb      	ldr	r3, [r5, #12]
 80062f8:	8998      	ldrh	r0, [r3, #12]
 80062fa:	f7fc f9e1 	bl	80026c0 <lwip_htons>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80062fe:	0782      	lsls	r2, r0, #30
 8006300:	d417      	bmi.n	8006332 <tcp_receive+0x5aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8006302:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 8006306:	2001      	movs	r0, #1
 8006308:	f8ba 900c 	ldrh.w	r9, [sl, #12]
 800630c:	f7fc f9d8 	bl	80026c0 <lwip_htons>
                tcplen = TCP_TCPLEN(&inseg);
 8006310:	68eb      	ldr	r3, [r5, #12]
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8006312:	ea49 0000 	orr.w	r0, r9, r0
                tcplen = TCP_TCPLEN(&inseg);
 8006316:	f8b5 9008 	ldrh.w	r9, [r5, #8]
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800631a:	f8aa 000c 	strh.w	r0, [sl, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800631e:	8998      	ldrh	r0, [r3, #12]
 8006320:	f7fc f9ce 	bl	80026c0 <lwip_htons>
 8006324:	f010 0003 	ands.w	r0, r0, #3
 8006328:	bf18      	it	ne
 800632a:	2001      	movne	r0, #1
 800632c:	4481      	add	r9, r0
 800632e:	f8a7 9000 	strh.w	r9, [r7]
              next = next->next;
 8006332:	f8d8 9000 	ldr.w	r9, [r8]
              tcp_seg_free(tmp);
 8006336:	4640      	mov	r0, r8
 8006338:	f7fe fcf4 	bl	8004d24 <tcp_seg_free>
              next = next->next;
 800633c:	46c8      	mov	r8, r9
 800633e:	e699      	b.n	8006074 <tcp_receive+0x2ec>
          seqno = pcb->ooseq->tcphdr->seqno;
 8006340:	6033      	str	r3, [r6, #0]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8006342:	8990      	ldrh	r0, [r2, #12]
 8006344:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 8006348:	f7fc f9ba 	bl	80026c0 <lwip_htons>
 800634c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800634e:	f010 0003 	ands.w	r0, r0, #3
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8006352:	f8b5 b008 	ldrh.w	fp, [r5, #8]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8006356:	bf18      	it	ne
 8006358:	2001      	movne	r0, #1
 800635a:	449a      	add	sl, r3
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800635c:	68eb      	ldr	r3, [r5, #12]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800635e:	4450      	add	r0, sl
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8006360:	f8b4 a028 	ldrh.w	sl, [r4, #40]	; 0x28
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8006364:	6260      	str	r0, [r4, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8006366:	8998      	ldrh	r0, [r3, #12]
 8006368:	f7fc f9aa 	bl	80026c0 <lwip_htons>
 800636c:	f010 0003 	ands.w	r0, r0, #3
 8006370:	bf18      	it	ne
 8006372:	2001      	movne	r0, #1
 8006374:	4458      	add	r0, fp
 8006376:	4582      	cmp	sl, r0
 8006378:	d206      	bcs.n	8006388 <tcp_receive+0x600>
 800637a:	463b      	mov	r3, r7
 800637c:	f240 622c 	movw	r2, #1580	; 0x62c
 8006380:	4641      	mov	r1, r8
 8006382:	4648      	mov	r0, r9
 8006384:	f002 ff74 	bl	8009270 <iprintf>
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8006388:	68eb      	ldr	r3, [r5, #12]
 800638a:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 800638e:	8998      	ldrh	r0, [r3, #12]
 8006390:	f7fc f996 	bl	80026c0 <lwip_htons>
 8006394:	f010 0003 	ands.w	r0, r0, #3
 8006398:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800639a:	bf18      	it	ne
 800639c:	2001      	movne	r0, #1
 800639e:	4450      	add	r0, sl
 80063a0:	1a18      	subs	r0, r3, r0
 80063a2:	8520      	strh	r0, [r4, #40]	; 0x28
          tcp_update_rcv_ann_wnd(pcb);
 80063a4:	4620      	mov	r0, r4
 80063a6:	f7fe fc4b 	bl	8004c40 <tcp_update_rcv_ann_wnd>
          if (cseg->p->tot_len > 0) {
 80063aa:	6869      	ldr	r1, [r5, #4]
 80063ac:	890b      	ldrh	r3, [r1, #8]
 80063ae:	b133      	cbz	r3, 80063be <tcp_receive+0x636>
            if (recv_data) {
 80063b0:	4b31      	ldr	r3, [pc, #196]	; (8006478 <tcp_receive+0x6f0>)
 80063b2:	6818      	ldr	r0, [r3, #0]
 80063b4:	b1c8      	cbz	r0, 80063ea <tcp_receive+0x662>
              pbuf_cat(recv_data, cseg->p);
 80063b6:	f7fe f9e5 	bl	8004784 <pbuf_cat>
            cseg->p = NULL;
 80063ba:	2300      	movs	r3, #0
 80063bc:	606b      	str	r3, [r5, #4]
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80063be:	68eb      	ldr	r3, [r5, #12]
 80063c0:	8998      	ldrh	r0, [r3, #12]
 80063c2:	f7fc f97d 	bl	80026c0 <lwip_htons>
 80063c6:	07c0      	lsls	r0, r0, #31
 80063c8:	d509      	bpl.n	80063de <tcp_receive+0x656>
            recv_flags |= TF_GOT_FIN;
 80063ca:	4a2c      	ldr	r2, [pc, #176]	; (800647c <tcp_receive+0x6f4>)
 80063cc:	7813      	ldrb	r3, [r2, #0]
 80063ce:	f043 0320 	orr.w	r3, r3, #32
 80063d2:	7013      	strb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80063d4:	7d23      	ldrb	r3, [r4, #20]
 80063d6:	2b04      	cmp	r3, #4
              pcb->state = CLOSE_WAIT;
 80063d8:	bf04      	itt	eq
 80063da:	2307      	moveq	r3, #7
 80063dc:	7523      	strbeq	r3, [r4, #20]
          pcb->ooseq = cseg->next;
 80063de:	682b      	ldr	r3, [r5, #0]
          tcp_seg_free(cseg);
 80063e0:	4628      	mov	r0, r5
          pcb->ooseq = cseg->next;
 80063e2:	6763      	str	r3, [r4, #116]	; 0x74
          tcp_seg_free(cseg);
 80063e4:	f7fe fc9e 	bl	8004d24 <tcp_seg_free>
 80063e8:	e76f      	b.n	80062ca <tcp_receive+0x542>
              recv_data = cseg->p;
 80063ea:	6019      	str	r1, [r3, #0]
 80063ec:	e7e5      	b.n	80063ba <tcp_receive+0x632>
        tcp_ack(pcb);
 80063ee:	f043 0301 	orr.w	r3, r3, #1
      tcp_ack_now(pcb);
 80063f2:	8363      	strh	r3, [r4, #26]
}
 80063f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (pcb->ooseq == NULL) {
 80063f8:	6f65      	ldr	r5, [r4, #116]	; 0x74
 80063fa:	b945      	cbnz	r5, 800640e <tcp_receive+0x686>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80063fc:	4820      	ldr	r0, [pc, #128]	; (8006480 <tcp_receive+0x6f8>)
 80063fe:	f7fe fcb7 	bl	8004d70 <tcp_seg_copy>
 8006402:	6760      	str	r0, [r4, #116]	; 0x74
        tcp_send_empty_ack(pcb);
 8006404:	4620      	mov	r0, r4
}
 8006406:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        tcp_send_empty_ack(pcb);
 800640a:	f001 bd2b 	b.w	8007e64 <tcp_send_empty_ack>
 800640e:	f04f 0800 	mov.w	r8, #0
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8006412:	f103 3cff 	add.w	ip, r3, #4294967295
            if (seqno == next->tcphdr->seqno) {
 8006416:	f8d5 e00c 	ldr.w	lr, [r5, #12]
 800641a:	f8de 2004 	ldr.w	r2, [lr, #4]
 800641e:	4293      	cmp	r3, r2
 8006420:	d115      	bne.n	800644e <tcp_receive+0x6c6>
              if (inseg.len > next->len) {
 8006422:	4817      	ldr	r0, [pc, #92]	; (8006480 <tcp_receive+0x6f8>)
 8006424:	892b      	ldrh	r3, [r5, #8]
 8006426:	8902      	ldrh	r2, [r0, #8]
 8006428:	429a      	cmp	r2, r3
 800642a:	d9eb      	bls.n	8006404 <tcp_receive+0x67c>
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800642c:	f7fe fca0 	bl	8004d70 <tcp_seg_copy>
                if (cseg != NULL) {
 8006430:	2800      	cmp	r0, #0
 8006432:	d0e7      	beq.n	8006404 <tcp_receive+0x67c>
                  if (prev != NULL) {
 8006434:	f1b8 0f00 	cmp.w	r8, #0
 8006438:	d007      	beq.n	800644a <tcp_receive+0x6c2>
                    prev->next = cseg;
 800643a:	f8c8 0000 	str.w	r0, [r8]
                    tcp_oos_insert_segment(cseg, next);
 800643e:	4629      	mov	r1, r5
 8006440:	f7ff fb88 	bl	8005b54 <tcp_oos_insert_segment>
 8006444:	e7de      	b.n	8006404 <tcp_receive+0x67c>
 8006446:	460d      	mov	r5, r1
 8006448:	e7e5      	b.n	8006416 <tcp_receive+0x68e>
                    pcb->ooseq = cseg;
 800644a:	6760      	str	r0, [r4, #116]	; 0x74
 800644c:	e7f7      	b.n	800643e <tcp_receive+0x6b6>
              if (prev == NULL) {
 800644e:	f1b8 0f00 	cmp.w	r8, #0
 8006452:	d119      	bne.n	8006488 <tcp_receive+0x700>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8006454:	1a99      	subs	r1, r3, r2
 8006456:	2900      	cmp	r1, #0
 8006458:	da3d      	bge.n	80064d6 <tcp_receive+0x74e>
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800645a:	4809      	ldr	r0, [pc, #36]	; (8006480 <tcp_receive+0x6f8>)
 800645c:	f7fe fc88 	bl	8004d70 <tcp_seg_copy>
                  if (cseg != NULL) {
 8006460:	2800      	cmp	r0, #0
 8006462:	d0cf      	beq.n	8006404 <tcp_receive+0x67c>
                    pcb->ooseq = cseg;
 8006464:	6760      	str	r0, [r4, #116]	; 0x74
 8006466:	e7ea      	b.n	800643e <tcp_receive+0x6b6>
 8006468:	2000061c 	.word	0x2000061c
 800646c:	0800c518 	.word	0x0800c518
 8006470:	0800c65c 	.word	0x0800c65c
 8006474:	0800b013 	.word	0x0800b013
 8006478:	20000620 	.word	0x20000620
 800647c:	20000624 	.word	0x20000624
 8006480:	2000060c 	.word	0x2000060c
 8006484:	0800c67b 	.word	0x0800c67b
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8006488:	f8d8 100c 	ldr.w	r1, [r8, #12]
 800648c:	6849      	ldr	r1, [r1, #4]
 800648e:	ebac 0101 	sub.w	r1, ip, r1
 8006492:	2900      	cmp	r1, #0
 8006494:	db1f      	blt.n	80064d6 <tcp_receive+0x74e>
 8006496:	1a81      	subs	r1, r0, r2
 8006498:	2900      	cmp	r1, #0
 800649a:	dc1c      	bgt.n	80064d6 <tcp_receive+0x74e>
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800649c:	484d      	ldr	r0, [pc, #308]	; (80065d4 <tcp_receive+0x84c>)
 800649e:	f7fe fc67 	bl	8004d70 <tcp_seg_copy>
                  if (cseg != NULL) {
 80064a2:	4607      	mov	r7, r0
 80064a4:	2800      	cmp	r0, #0
 80064a6:	d0ad      	beq.n	8006404 <tcp_receive+0x67c>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80064a8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80064ac:	6831      	ldr	r1, [r6, #0]
 80064ae:	685a      	ldr	r2, [r3, #4]
 80064b0:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 80064b4:	4413      	add	r3, r2
 80064b6:	1a5b      	subs	r3, r3, r1
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	dd07      	ble.n	80064cc <tcp_receive+0x744>
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80064bc:	1a89      	subs	r1, r1, r2
                      pbuf_realloc(prev->p, prev->len);
 80064be:	f8d8 0004 	ldr.w	r0, [r8, #4]
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80064c2:	b289      	uxth	r1, r1
 80064c4:	f8a8 1008 	strh.w	r1, [r8, #8]
                      pbuf_realloc(prev->p, prev->len);
 80064c8:	f7fe f8e8 	bl	800469c <pbuf_realloc>
                    prev->next = cseg;
 80064cc:	f8c8 7000 	str.w	r7, [r8]
                    tcp_oos_insert_segment(cseg, next);
 80064d0:	4629      	mov	r1, r5
 80064d2:	4638      	mov	r0, r7
 80064d4:	e7b4      	b.n	8006440 <tcp_receive+0x6b8>
              if (next->next == NULL &&
 80064d6:	6829      	ldr	r1, [r5, #0]
 80064d8:	46a8      	mov	r8, r5
 80064da:	2900      	cmp	r1, #0
 80064dc:	d1b3      	bne.n	8006446 <tcp_receive+0x6be>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80064de:	1a9b      	subs	r3, r3, r2
              if (next->next == NULL &&
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	dd8f      	ble.n	8006404 <tcp_receive+0x67c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80064e4:	f8be 000c 	ldrh.w	r0, [lr, #12]
 80064e8:	f7fc f8ea 	bl	80026c0 <lwip_htons>
 80064ec:	07c2      	lsls	r2, r0, #31
 80064ee:	d489      	bmi.n	8006404 <tcp_receive+0x67c>
                next->next = tcp_seg_copy(&inseg);
 80064f0:	4838      	ldr	r0, [pc, #224]	; (80065d4 <tcp_receive+0x84c>)
 80064f2:	f7fe fc3d 	bl	8004d70 <tcp_seg_copy>
 80064f6:	6028      	str	r0, [r5, #0]
                if (next->next != NULL) {
 80064f8:	2800      	cmp	r0, #0
 80064fa:	d083      	beq.n	8006404 <tcp_receive+0x67c>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80064fc:	68eb      	ldr	r3, [r5, #12]
 80064fe:	6831      	ldr	r1, [r6, #0]
 8006500:	685a      	ldr	r2, [r3, #4]
 8006502:	892b      	ldrh	r3, [r5, #8]
 8006504:	4413      	add	r3, r2
 8006506:	1a5b      	subs	r3, r3, r1
 8006508:	2b00      	cmp	r3, #0
 800650a:	dd05      	ble.n	8006518 <tcp_receive+0x790>
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800650c:	1a89      	subs	r1, r1, r2
                    pbuf_realloc(next->p, next->len);
 800650e:	6868      	ldr	r0, [r5, #4]
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8006510:	b289      	uxth	r1, r1
 8006512:	8129      	strh	r1, [r5, #8]
                    pbuf_realloc(next->p, next->len);
 8006514:	f7fe f8c2 	bl	800469c <pbuf_realloc>
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8006518:	6832      	ldr	r2, [r6, #0]
 800651a:	883b      	ldrh	r3, [r7, #0]
 800651c:	4413      	add	r3, r2
 800651e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006520:	1a9b      	subs	r3, r3, r2
 8006522:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8006524:	1a9b      	subs	r3, r3, r2
 8006526:	2b00      	cmp	r3, #0
 8006528:	f77f af6c 	ble.w	8006404 <tcp_receive+0x67c>
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800652c:	682b      	ldr	r3, [r5, #0]
 800652e:	68db      	ldr	r3, [r3, #12]
 8006530:	8998      	ldrh	r0, [r3, #12]
 8006532:	f7fc f8c5 	bl	80026c0 <lwip_htons>
 8006536:	07c3      	lsls	r3, r0, #31
 8006538:	d511      	bpl.n	800655e <tcp_receive+0x7d6>
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800653a:	682b      	ldr	r3, [r5, #0]
 800653c:	f8d3 900c 	ldr.w	r9, [r3, #12]
 8006540:	f8b9 800c 	ldrh.w	r8, [r9, #12]
 8006544:	4640      	mov	r0, r8
 8006546:	f428 587c 	bic.w	r8, r8, #16128	; 0x3f00
 800654a:	f7fc f8b9 	bl	80026c0 <lwip_htons>
 800654e:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 8006552:	f7fc f8b5 	bl	80026c0 <lwip_htons>
 8006556:	ea48 0800 	orr.w	r8, r8, r0
 800655a:	f8a9 800c 	strh.w	r8, [r9, #12]
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800655e:	6832      	ldr	r2, [r6, #0]
 8006560:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 8006562:	682b      	ldr	r3, [r5, #0]
 8006564:	1a89      	subs	r1, r1, r2
 8006566:	6a62      	ldr	r2, [r4, #36]	; 0x24
                    pbuf_realloc(next->next->p, next->next->len);
 8006568:	6858      	ldr	r0, [r3, #4]
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800656a:	4411      	add	r1, r2
 800656c:	b289      	uxth	r1, r1
 800656e:	8119      	strh	r1, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8006570:	f7fe f894 	bl	800469c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8006574:	682b      	ldr	r3, [r5, #0]
 8006576:	891d      	ldrh	r5, [r3, #8]
 8006578:	68db      	ldr	r3, [r3, #12]
 800657a:	8998      	ldrh	r0, [r3, #12]
 800657c:	f7fc f8a0 	bl	80026c0 <lwip_htons>
 8006580:	f010 0003 	ands.w	r0, r0, #3
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8006584:	6833      	ldr	r3, [r6, #0]
                    tcplen = TCP_TCPLEN(next->next);
 8006586:	bf18      	it	ne
 8006588:	2001      	movne	r0, #1
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800658a:	6a62      	ldr	r2, [r4, #36]	; 0x24
                    tcplen = TCP_TCPLEN(next->next);
 800658c:	4428      	add	r0, r5
 800658e:	b280      	uxth	r0, r0
 8006590:	8038      	strh	r0, [r7, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8006592:	4418      	add	r0, r3
 8006594:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006596:	4413      	add	r3, r2
 8006598:	4298      	cmp	r0, r3
 800659a:	f43f af33 	beq.w	8006404 <tcp_receive+0x67c>
 800659e:	4b0e      	ldr	r3, [pc, #56]	; (80065d8 <tcp_receive+0x850>)
 80065a0:	f240 62f9 	movw	r2, #1785	; 0x6f9
 80065a4:	490d      	ldr	r1, [pc, #52]	; (80065dc <tcp_receive+0x854>)
 80065a6:	480e      	ldr	r0, [pc, #56]	; (80065e0 <tcp_receive+0x858>)
 80065a8:	f002 fe62 	bl	8009270 <iprintf>
 80065ac:	e72a      	b.n	8006404 <tcp_receive+0x67c>
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80065ae:	6833      	ldr	r3, [r6, #0]
 80065b0:	1a99      	subs	r1, r3, r2
 80065b2:	2900      	cmp	r1, #0
 80065b4:	db05      	blt.n	80065c2 <tcp_receive+0x83a>
 80065b6:	3301      	adds	r3, #1
 80065b8:	1a9b      	subs	r3, r3, r2
 80065ba:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80065bc:	1a9b      	subs	r3, r3, r2
 80065be:	2b00      	cmp	r3, #0
 80065c0:	dd05      	ble.n	80065ce <tcp_receive+0x846>
      tcp_ack_now(pcb);
 80065c2:	8b63      	ldrh	r3, [r4, #26]
 80065c4:	e68e      	b.n	80062e4 <tcp_receive+0x55c>
        pcb->dupacks = 0;
 80065c6:	2300      	movs	r3, #0
 80065c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065cc:	e469      	b.n	8005ea2 <tcp_receive+0x11a>
 80065ce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065d2:	bf00      	nop
 80065d4:	2000060c 	.word	0x2000060c
 80065d8:	0800c518 	.word	0x0800c518
 80065dc:	0800c5ea 	.word	0x0800c5ea
 80065e0:	0800b013 	.word	0x0800b013

080065e4 <tcp_input>:
{
 80065e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80065e8:	4605      	mov	r5, r0
{
 80065ea:	b089      	sub	sp, #36	; 0x24
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80065ec:	b928      	cbnz	r0, 80065fa <tcp_input+0x16>
 80065ee:	4bac      	ldr	r3, [pc, #688]	; (80068a0 <tcp_input+0x2bc>)
 80065f0:	2283      	movs	r2, #131	; 0x83
 80065f2:	49ac      	ldr	r1, [pc, #688]	; (80068a4 <tcp_input+0x2c0>)
 80065f4:	48ac      	ldr	r0, [pc, #688]	; (80068a8 <tcp_input+0x2c4>)
 80065f6:	f002 fe3b 	bl	8009270 <iprintf>
  tcphdr = (struct tcp_hdr *)p->payload;
 80065fa:	686b      	ldr	r3, [r5, #4]
 80065fc:	4eab      	ldr	r6, [pc, #684]	; (80068ac <tcp_input+0x2c8>)
 80065fe:	6033      	str	r3, [r6, #0]
  if (p->len < TCP_HLEN) {
 8006600:	896b      	ldrh	r3, [r5, #10]
 8006602:	2b13      	cmp	r3, #19
 8006604:	f240 80a9 	bls.w	800675a <tcp_input+0x176>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8006608:	4ca9      	ldr	r4, [pc, #676]	; (80068b0 <tcp_input+0x2cc>)
 800660a:	6821      	ldr	r1, [r4, #0]
 800660c:	46a0      	mov	r8, r4
 800660e:	6960      	ldr	r0, [r4, #20]
 8006610:	f7fc feaf 	bl	8003372 <ip4_addr_isbroadcast_u32>
 8006614:	4607      	mov	r7, r0
 8006616:	2800      	cmp	r0, #0
 8006618:	f040 809f 	bne.w	800675a <tcp_input+0x176>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800661c:	6963      	ldr	r3, [r4, #20]
 800661e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8006622:	2be0      	cmp	r3, #224	; 0xe0
 8006624:	f000 8099 	beq.w	800675a <tcp_input+0x176>
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8006628:	6833      	ldr	r3, [r6, #0]
 800662a:	8998      	ldrh	r0, [r3, #12]
 800662c:	f7fc f848 	bl	80026c0 <lwip_htons>
 8006630:	0a81      	lsrs	r1, r0, #10
 8006632:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8006636:	2913      	cmp	r1, #19
 8006638:	f240 808f 	bls.w	800675a <tcp_input+0x176>
 800663c:	b28a      	uxth	r2, r1
 800663e:	892b      	ldrh	r3, [r5, #8]
 8006640:	4293      	cmp	r3, r2
 8006642:	f0c0 808a 	bcc.w	800675a <tcp_input+0x176>
  tcphdr_opt2 = NULL;
 8006646:	489b      	ldr	r0, [pc, #620]	; (80068b4 <tcp_input+0x2d0>)
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8006648:	f1a2 0314 	sub.w	r3, r2, #20
 800664c:	4c9a      	ldr	r4, [pc, #616]	; (80068b8 <tcp_input+0x2d4>)
  tcphdr_opt2 = NULL;
 800664e:	6007      	str	r7, [r0, #0]
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8006650:	b29b      	uxth	r3, r3
  if (p->len >= hdrlen_bytes) {
 8006652:	896f      	ldrh	r7, [r5, #10]
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8006654:	8023      	strh	r3, [r4, #0]
  if (p->len >= hdrlen_bytes) {
 8006656:	4297      	cmp	r7, r2
 8006658:	f8df 92a8 	ldr.w	r9, [pc, #680]	; 8006904 <tcp_input+0x320>
 800665c:	4607      	mov	r7, r0
 800665e:	d341      	bcc.n	80066e4 <tcp_input+0x100>
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8006660:	4628      	mov	r0, r5
    tcphdr_opt1len = tcphdr_optlen;
 8006662:	f8a9 3000 	strh.w	r3, [r9]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8006666:	f7fd fefb 	bl	8004460 <pbuf_remove_header>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800666a:	6834      	ldr	r4, [r6, #0]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800666c:	4f93      	ldr	r7, [pc, #588]	; (80068bc <tcp_input+0x2d8>)
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800666e:	8820      	ldrh	r0, [r4, #0]
 8006670:	f7fc f826 	bl	80026c0 <lwip_htons>
 8006674:	8020      	strh	r0, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8006676:	6834      	ldr	r4, [r6, #0]
 8006678:	46bb      	mov	fp, r7
 800667a:	8860      	ldrh	r0, [r4, #2]
 800667c:	f7fc f820 	bl	80026c0 <lwip_htons>
 8006680:	8060      	strh	r0, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8006682:	6834      	ldr	r4, [r6, #0]
 8006684:	6860      	ldr	r0, [r4, #4]
 8006686:	f7fc f81e 	bl	80026c6 <lwip_htonl>
 800668a:	6060      	str	r0, [r4, #4]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800668c:	6834      	ldr	r4, [r6, #0]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800668e:	6038      	str	r0, [r7, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8006690:	68a0      	ldr	r0, [r4, #8]
 8006692:	f7fc f818 	bl	80026c6 <lwip_htonl>
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8006696:	f8d6 9000 	ldr.w	r9, [r6]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800669a:	60a0      	str	r0, [r4, #8]
 800669c:	4c88      	ldr	r4, [pc, #544]	; (80068c0 <tcp_input+0x2dc>)
 800669e:	6020      	str	r0, [r4, #0]
 80066a0:	46a2      	mov	sl, r4
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80066a2:	f8b9 000e 	ldrh.w	r0, [r9, #14]
 80066a6:	f7fc f80b 	bl	80026c0 <lwip_htons>
  flags = TCPH_FLAGS(tcphdr);
 80066aa:	6833      	ldr	r3, [r6, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80066ac:	f8a9 000e 	strh.w	r0, [r9, #14]
  flags = TCPH_FLAGS(tcphdr);
 80066b0:	8998      	ldrh	r0, [r3, #12]
 80066b2:	f7fc f805 	bl	80026c0 <lwip_htons>
 80066b6:	4b83      	ldr	r3, [pc, #524]	; (80068c4 <tcp_input+0x2e0>)
 80066b8:	b2c0      	uxtb	r0, r0
 80066ba:	9305      	str	r3, [sp, #20]
 80066bc:	f000 023f 	and.w	r2, r0, #63	; 0x3f
  if (flags & (TCP_FIN | TCP_SYN)) {
 80066c0:	f010 0f03 	tst.w	r0, #3
  flags = TCPH_FLAGS(tcphdr);
 80066c4:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 80066c6:	892a      	ldrh	r2, [r5, #8]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80066c8:	d141      	bne.n	800674e <tcp_input+0x16a>
  tcplen = p->tot_len;
 80066ca:	4b7f      	ldr	r3, [pc, #508]	; (80068c8 <tcp_input+0x2e4>)
 80066cc:	801a      	strh	r2, [r3, #0]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80066ce:	4f7f      	ldr	r7, [pc, #508]	; (80068cc <tcp_input+0x2e8>)
  prev = NULL;
 80066d0:	f04f 0900 	mov.w	r9, #0
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80066d4:	683c      	ldr	r4, [r7, #0]
 80066d6:	2c00      	cmp	r4, #0
 80066d8:	d145      	bne.n	8006766 <tcp_input+0x182>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80066da:	4b7d      	ldr	r3, [pc, #500]	; (80068d0 <tcp_input+0x2ec>)
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80066dc:	4c70      	ldr	r4, [pc, #448]	; (80068a0 <tcp_input+0x2bc>)
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80066de:	f8d3 9000 	ldr.w	r9, [r3]
 80066e2:	e17a      	b.n	80069da <tcp_input+0x3f6>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80066e4:	682b      	ldr	r3, [r5, #0]
 80066e6:	b92b      	cbnz	r3, 80066f4 <tcp_input+0x110>
 80066e8:	4b6d      	ldr	r3, [pc, #436]	; (80068a0 <tcp_input+0x2bc>)
 80066ea:	22c2      	movs	r2, #194	; 0xc2
 80066ec:	4979      	ldr	r1, [pc, #484]	; (80068d4 <tcp_input+0x2f0>)
 80066ee:	486e      	ldr	r0, [pc, #440]	; (80068a8 <tcp_input+0x2c4>)
 80066f0:	f002 fdbe 	bl	8009270 <iprintf>
    pbuf_remove_header(p, TCP_HLEN);
 80066f4:	2114      	movs	r1, #20
 80066f6:	4628      	mov	r0, r5
 80066f8:	f7fd feb2 	bl	8004460 <pbuf_remove_header>
    tcphdr_opt1len = p->len;
 80066fc:	8969      	ldrh	r1, [r5, #10]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80066fe:	8824      	ldrh	r4, [r4, #0]
    pbuf_remove_header(p, tcphdr_opt1len);
 8006700:	4628      	mov	r0, r5
    tcphdr_opt1len = p->len;
 8006702:	f8a9 1000 	strh.w	r1, [r9]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8006706:	1a64      	subs	r4, r4, r1
    pbuf_remove_header(p, tcphdr_opt1len);
 8006708:	f7fd feaa 	bl	8004460 <pbuf_remove_header>
    if (opt2len > p->next->len) {
 800670c:	6828      	ldr	r0, [r5, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800670e:	b2a4      	uxth	r4, r4
    if (opt2len > p->next->len) {
 8006710:	8943      	ldrh	r3, [r0, #10]
 8006712:	42a3      	cmp	r3, r4
 8006714:	d321      	bcc.n	800675a <tcp_input+0x176>
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8006716:	6843      	ldr	r3, [r0, #4]
    pbuf_remove_header(p->next, opt2len);
 8006718:	4621      	mov	r1, r4
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800671a:	603b      	str	r3, [r7, #0]
    pbuf_remove_header(p->next, opt2len);
 800671c:	f7fd fea0 	bl	8004460 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8006720:	892b      	ldrh	r3, [r5, #8]
 8006722:	1b1c      	subs	r4, r3, r4
    LWIP_ASSERT("p->len == 0", p->len == 0);
 8006724:	896b      	ldrh	r3, [r5, #10]
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8006726:	812c      	strh	r4, [r5, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 8006728:	b12b      	cbz	r3, 8006736 <tcp_input+0x152>
 800672a:	4b5d      	ldr	r3, [pc, #372]	; (80068a0 <tcp_input+0x2bc>)
 800672c:	22df      	movs	r2, #223	; 0xdf
 800672e:	496a      	ldr	r1, [pc, #424]	; (80068d8 <tcp_input+0x2f4>)
 8006730:	485d      	ldr	r0, [pc, #372]	; (80068a8 <tcp_input+0x2c4>)
 8006732:	f002 fd9d 	bl	8009270 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8006736:	682b      	ldr	r3, [r5, #0]
 8006738:	892a      	ldrh	r2, [r5, #8]
 800673a:	891b      	ldrh	r3, [r3, #8]
 800673c:	429a      	cmp	r2, r3
 800673e:	d094      	beq.n	800666a <tcp_input+0x86>
 8006740:	4b57      	ldr	r3, [pc, #348]	; (80068a0 <tcp_input+0x2bc>)
 8006742:	22e0      	movs	r2, #224	; 0xe0
 8006744:	4965      	ldr	r1, [pc, #404]	; (80068dc <tcp_input+0x2f8>)
 8006746:	4858      	ldr	r0, [pc, #352]	; (80068a8 <tcp_input+0x2c4>)
 8006748:	f002 fd92 	bl	8009270 <iprintf>
 800674c:	e78d      	b.n	800666a <tcp_input+0x86>
    tcplen++;
 800674e:	1c53      	adds	r3, r2, #1
 8006750:	495d      	ldr	r1, [pc, #372]	; (80068c8 <tcp_input+0x2e4>)
 8006752:	b29b      	uxth	r3, r3
    if (tcplen < p->tot_len) {
 8006754:	429a      	cmp	r2, r3
    tcplen++;
 8006756:	800b      	strh	r3, [r1, #0]
    if (tcplen < p->tot_len) {
 8006758:	d9b9      	bls.n	80066ce <tcp_input+0xea>
  pbuf_free(p);
 800675a:	4628      	mov	r0, r5
}
 800675c:	b009      	add	sp, #36	; 0x24
 800675e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 8006762:	f7fd beb1 	b.w	80044c8 <pbuf_free>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8006766:	7d23      	ldrb	r3, [r4, #20]
 8006768:	b92b      	cbnz	r3, 8006776 <tcp_input+0x192>
 800676a:	4b4d      	ldr	r3, [pc, #308]	; (80068a0 <tcp_input+0x2bc>)
 800676c:	22fb      	movs	r2, #251	; 0xfb
 800676e:	495c      	ldr	r1, [pc, #368]	; (80068e0 <tcp_input+0x2fc>)
 8006770:	484d      	ldr	r0, [pc, #308]	; (80068a8 <tcp_input+0x2c4>)
 8006772:	f002 fd7d 	bl	8009270 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8006776:	7d23      	ldrb	r3, [r4, #20]
 8006778:	2b0a      	cmp	r3, #10
 800677a:	d105      	bne.n	8006788 <tcp_input+0x1a4>
 800677c:	4b48      	ldr	r3, [pc, #288]	; (80068a0 <tcp_input+0x2bc>)
 800677e:	22fc      	movs	r2, #252	; 0xfc
 8006780:	4958      	ldr	r1, [pc, #352]	; (80068e4 <tcp_input+0x300>)
 8006782:	4849      	ldr	r0, [pc, #292]	; (80068a8 <tcp_input+0x2c4>)
 8006784:	f002 fd74 	bl	8009270 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8006788:	7d23      	ldrb	r3, [r4, #20]
 800678a:	2b01      	cmp	r3, #1
 800678c:	d105      	bne.n	800679a <tcp_input+0x1b6>
 800678e:	4b44      	ldr	r3, [pc, #272]	; (80068a0 <tcp_input+0x2bc>)
 8006790:	22fd      	movs	r2, #253	; 0xfd
 8006792:	4955      	ldr	r1, [pc, #340]	; (80068e8 <tcp_input+0x304>)
 8006794:	4844      	ldr	r0, [pc, #272]	; (80068a8 <tcp_input+0x2c4>)
 8006796:	f002 fd6b 	bl	8009270 <iprintf>
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800679a:	7a21      	ldrb	r1, [r4, #8]
 800679c:	68e2      	ldr	r2, [r4, #12]
 800679e:	b141      	cbz	r1, 80067b2 <tcp_input+0x1ce>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80067a0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80067a4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80067a8:	3301      	adds	r3, #1
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80067aa:	b2db      	uxtb	r3, r3
 80067ac:	4299      	cmp	r1, r3
 80067ae:	f040 80ad 	bne.w	800690c <tcp_input+0x328>
    if (pcb->remote_port == tcphdr->src &&
 80067b2:	6833      	ldr	r3, [r6, #0]
 80067b4:	8b20      	ldrh	r0, [r4, #24]
 80067b6:	8819      	ldrh	r1, [r3, #0]
 80067b8:	4288      	cmp	r0, r1
 80067ba:	f040 80a7 	bne.w	800690c <tcp_input+0x328>
 80067be:	8ae1      	ldrh	r1, [r4, #22]
 80067c0:	885b      	ldrh	r3, [r3, #2]
 80067c2:	4299      	cmp	r1, r3
 80067c4:	f040 80a2 	bne.w	800690c <tcp_input+0x328>
        pcb->local_port == tcphdr->dest &&
 80067c8:	6861      	ldr	r1, [r4, #4]
 80067ca:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80067ce:	4299      	cmp	r1, r3
 80067d0:	f040 809c 	bne.w	800690c <tcp_input+0x328>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80067d4:	6821      	ldr	r1, [r4, #0]
 80067d6:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80067da:	4299      	cmp	r1, r3
 80067dc:	f040 8096 	bne.w	800690c <tcp_input+0x328>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80067e0:	4294      	cmp	r4, r2
 80067e2:	f040 8458 	bne.w	8007096 <tcp_input+0xab2>
 80067e6:	4b2e      	ldr	r3, [pc, #184]	; (80068a0 <tcp_input+0x2bc>)
 80067e8:	f240 120d 	movw	r2, #269	; 0x10d
 80067ec:	493f      	ldr	r1, [pc, #252]	; (80068ec <tcp_input+0x308>)
 80067ee:	482e      	ldr	r0, [pc, #184]	; (80068a8 <tcp_input+0x2c4>)
 80067f0:	f002 fd3e 	bl	8009270 <iprintf>
      if (prev != NULL) {
 80067f4:	f1b9 0f00 	cmp.w	r9, #0
 80067f8:	d005      	beq.n	8006806 <tcp_input+0x222>
        prev->next = pcb->next;
 80067fa:	68e3      	ldr	r3, [r4, #12]
 80067fc:	f8c9 300c 	str.w	r3, [r9, #12]
        pcb->next = tcp_active_pcbs;
 8006800:	683b      	ldr	r3, [r7, #0]
        tcp_active_pcbs = pcb;
 8006802:	603c      	str	r4, [r7, #0]
        pcb->next = tcp_active_pcbs;
 8006804:	60e3      	str	r3, [r4, #12]
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8006806:	68e3      	ldr	r3, [r4, #12]
 8006808:	429c      	cmp	r4, r3
 800680a:	d106      	bne.n	800681a <tcp_input+0x236>
 800680c:	4b24      	ldr	r3, [pc, #144]	; (80068a0 <tcp_input+0x2bc>)
 800680e:	f240 1215 	movw	r2, #277	; 0x115
 8006812:	4937      	ldr	r1, [pc, #220]	; (80068f0 <tcp_input+0x30c>)
 8006814:	4824      	ldr	r0, [pc, #144]	; (80068a8 <tcp_input+0x2c4>)
 8006816:	f002 fd2b 	bl	8009270 <iprintf>
    inseg.next = NULL;
 800681a:	4b36      	ldr	r3, [pc, #216]	; (80068f4 <tcp_input+0x310>)
 800681c:	2200      	movs	r2, #0
    inseg.len = p->tot_len;
 800681e:	8929      	ldrh	r1, [r5, #8]
    recv_acked = 0;
 8006820:	4835      	ldr	r0, [pc, #212]	; (80068f8 <tcp_input+0x314>)
    inseg.len = p->tot_len;
 8006822:	8119      	strh	r1, [r3, #8]
    inseg.tcphdr = tcphdr;
 8006824:	6831      	ldr	r1, [r6, #0]
    recv_flags = 0;
 8006826:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 8006908 <tcp_input+0x324>
    inseg.tcphdr = tcphdr;
 800682a:	60d9      	str	r1, [r3, #12]
    recv_data = NULL;
 800682c:	4933      	ldr	r1, [pc, #204]	; (80068fc <tcp_input+0x318>)
    inseg.next = NULL;
 800682e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8006830:	600a      	str	r2, [r1, #0]
 8006832:	4689      	mov	r9, r1
    recv_flags = 0;
 8006834:	f888 2000 	strb.w	r2, [r8]
    recv_acked = 0;
 8006838:	8002      	strh	r2, [r0, #0]
    if (flags & TCP_PSH) {
 800683a:	9a05      	ldr	r2, [sp, #20]
    inseg.p = p;
 800683c:	605d      	str	r5, [r3, #4]
    if (flags & TCP_PSH) {
 800683e:	7812      	ldrb	r2, [r2, #0]
 8006840:	9006      	str	r0, [sp, #24]
 8006842:	f012 0f08 	tst.w	r2, #8
 8006846:	9307      	str	r3, [sp, #28]
 8006848:	d003      	beq.n	8006852 <tcp_input+0x26e>
      p->flags |= PBUF_FLAG_PUSH;
 800684a:	7b6b      	ldrb	r3, [r5, #13]
 800684c:	f043 0301 	orr.w	r3, r3, #1
 8006850:	736b      	strb	r3, [r5, #13]
    if (pcb->refused_data != NULL) {
 8006852:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8006854:	4d2a      	ldr	r5, [pc, #168]	; (8006900 <tcp_input+0x31c>)
 8006856:	2b00      	cmp	r3, #0
 8006858:	f000 8165 	beq.w	8006b26 <tcp_input+0x542>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800685c:	4620      	mov	r0, r4
 800685e:	f7fe fe99 	bl	8005594 <tcp_process_refused_data>
 8006862:	300d      	adds	r0, #13
 8006864:	d008      	beq.n	8006878 <tcp_input+0x294>
 8006866:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8006868:	2b00      	cmp	r3, #0
 800686a:	f000 815c 	beq.w	8006b26 <tcp_input+0x542>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800686e:	4b16      	ldr	r3, [pc, #88]	; (80068c8 <tcp_input+0x2e4>)
 8006870:	881b      	ldrh	r3, [r3, #0]
 8006872:	2b00      	cmp	r3, #0
 8006874:	f000 8157 	beq.w	8006b26 <tcp_input+0x542>
        if (pcb->rcv_ann_wnd == 0) {
 8006878:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800687a:	b913      	cbnz	r3, 8006882 <tcp_input+0x29e>
          tcp_send_empty_ack(pcb);
 800687c:	4620      	mov	r0, r4
 800687e:	f001 faf1 	bl	8007e64 <tcp_send_empty_ack>
    if (inseg.p != NULL) {
 8006882:	9b07      	ldr	r3, [sp, #28]
    tcp_input_pcb = NULL;
 8006884:	2400      	movs	r4, #0
    if (inseg.p != NULL) {
 8006886:	6858      	ldr	r0, [r3, #4]
    tcp_input_pcb = NULL;
 8006888:	602c      	str	r4, [r5, #0]
    recv_data = NULL;
 800688a:	f8c9 4000 	str.w	r4, [r9]
    if (inseg.p != NULL) {
 800688e:	b118      	cbz	r0, 8006898 <tcp_input+0x2b4>
      pbuf_free(inseg.p);
 8006890:	f7fd fe1a 	bl	80044c8 <pbuf_free>
      inseg.p = NULL;
 8006894:	9b07      	ldr	r3, [sp, #28]
 8006896:	605c      	str	r4, [r3, #4]
}
 8006898:	b009      	add	sp, #36	; 0x24
 800689a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800689e:	bf00      	nop
 80068a0:	0800c518 	.word	0x0800c518
 80068a4:	0800c325 	.word	0x0800c325
 80068a8:	0800b013 	.word	0x0800b013
 80068ac:	20000630 	.word	0x20000630
 80068b0:	2000065c 	.word	0x2000065c
 80068b4:	20000638 	.word	0x20000638
 80068b8:	2000063c 	.word	0x2000063c
 80068bc:	20000628 	.word	0x20000628
 80068c0:	20000604 	.word	0x20000604
 80068c4:	20000608 	.word	0x20000608
 80068c8:	2000063e 	.word	0x2000063e
 80068cc:	20003b98 	.word	0x20003b98
 80068d0:	20003ba8 	.word	0x20003ba8
 80068d4:	0800c33d 	.word	0x0800c33d
 80068d8:	0800c34d 	.word	0x0800c34d
 80068dc:	0800c359 	.word	0x0800c359
 80068e0:	0800c378 	.word	0x0800c378
 80068e4:	0800c39f 	.word	0x0800c39f
 80068e8:	0800c3c9 	.word	0x0800c3c9
 80068ec:	0800c3f0 	.word	0x0800c3f0
 80068f0:	0800c41b 	.word	0x0800c41b
 80068f4:	2000060c 	.word	0x2000060c
 80068f8:	2000061c 	.word	0x2000061c
 80068fc:	20000620 	.word	0x20000620
 8006900:	20003bac 	.word	0x20003bac
 8006904:	20000634 	.word	0x20000634
 8006908:	20000624 	.word	0x20000624
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800690c:	46a1      	mov	r9, r4
 800690e:	4614      	mov	r4, r2
 8006910:	e6e1      	b.n	80066d6 <tcp_input+0xf2>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8006912:	f899 3014 	ldrb.w	r3, [r9, #20]
 8006916:	2b0a      	cmp	r3, #10
 8006918:	d006      	beq.n	8006928 <tcp_input+0x344>
 800691a:	4623      	mov	r3, r4
 800691c:	f240 121f 	movw	r2, #287	; 0x11f
 8006920:	49b0      	ldr	r1, [pc, #704]	; (8006be4 <tcp_input+0x600>)
 8006922:	48b1      	ldr	r0, [pc, #708]	; (8006be8 <tcp_input+0x604>)
 8006924:	f002 fca4 	bl	8009270 <iprintf>
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8006928:	f899 2008 	ldrb.w	r2, [r9, #8]
 800692c:	b13a      	cbz	r2, 800693e <tcp_input+0x35a>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800692e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006932:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006936:	3301      	adds	r3, #1
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8006938:	b2db      	uxtb	r3, r3
 800693a:	429a      	cmp	r2, r3
 800693c:	d14b      	bne.n	80069d6 <tcp_input+0x3f2>
      if (pcb->remote_port == tcphdr->src &&
 800693e:	6833      	ldr	r3, [r6, #0]
 8006940:	f8b9 2018 	ldrh.w	r2, [r9, #24]
 8006944:	8818      	ldrh	r0, [r3, #0]
 8006946:	4290      	cmp	r0, r2
 8006948:	d145      	bne.n	80069d6 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800694a:	f8b9 2016 	ldrh.w	r2, [r9, #22]
      if (pcb->remote_port == tcphdr->src &&
 800694e:	8859      	ldrh	r1, [r3, #2]
 8006950:	4291      	cmp	r1, r2
 8006952:	d140      	bne.n	80069d6 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8006954:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8006958:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800695c:	429a      	cmp	r2, r3
 800695e:	d13a      	bne.n	80069d6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8006960:	f8d9 2000 	ldr.w	r2, [r9]
 8006964:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8006968:	429a      	cmp	r2, r3
 800696a:	d134      	bne.n	80069d6 <tcp_input+0x3f2>
  if (flags & TCP_RST) {
 800696c:	9b05      	ldr	r3, [sp, #20]
 800696e:	781b      	ldrb	r3, [r3, #0]
 8006970:	075e      	lsls	r6, r3, #29
 8006972:	f53f aef2 	bmi.w	800675a <tcp_input+0x176>
  if (flags & TCP_SYN) {
 8006976:	079c      	lsls	r4, r3, #30
 8006978:	d518      	bpl.n	80069ac <tcp_input+0x3c8>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800697a:	f8db 2000 	ldr.w	r2, [fp]
 800697e:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
 8006982:	1ad3      	subs	r3, r2, r3
 8006984:	d418      	bmi.n	80069b8 <tcp_input+0x3d4>
 8006986:	f8b9 4028 	ldrh.w	r4, [r9, #40]	; 0x28
 800698a:	1b1b      	subs	r3, r3, r4
 800698c:	2b00      	cmp	r3, #0
 800698e:	dc13      	bgt.n	80069b8 <tcp_input+0x3d4>
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8006990:	4b96      	ldr	r3, [pc, #600]	; (8006bec <tcp_input+0x608>)
 8006992:	881c      	ldrh	r4, [r3, #0]
 8006994:	4b96      	ldr	r3, [pc, #600]	; (8006bf0 <tcp_input+0x60c>)
 8006996:	9002      	str	r0, [sp, #8]
 8006998:	4422      	add	r2, r4
 800699a:	9300      	str	r3, [sp, #0]
 800699c:	4648      	mov	r0, r9
 800699e:	9101      	str	r1, [sp, #4]
 80069a0:	3304      	adds	r3, #4
 80069a2:	f8da 1000 	ldr.w	r1, [sl]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80069a6:	f001 fa19 	bl	8007ddc <tcp_rst>
 80069aa:	e6d6      	b.n	800675a <tcp_input+0x176>
  } else if (flags & TCP_FIN) {
 80069ac:	07d9      	lsls	r1, r3, #31
    pcb->tmr = tcp_ticks;
 80069ae:	bf42      	ittt	mi
 80069b0:	4b90      	ldrmi	r3, [pc, #576]	; (8006bf4 <tcp_input+0x610>)
 80069b2:	681b      	ldrmi	r3, [r3, #0]
 80069b4:	f8c9 3020 	strmi.w	r3, [r9, #32]
  if ((tcplen > 0)) {
 80069b8:	4b8c      	ldr	r3, [pc, #560]	; (8006bec <tcp_input+0x608>)
 80069ba:	881b      	ldrh	r3, [r3, #0]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	f43f aecc 	beq.w	800675a <tcp_input+0x176>
    tcp_ack_now(pcb);
 80069c2:	f8b9 301a 	ldrh.w	r3, [r9, #26]
    tcp_output(pcb);
 80069c6:	4648      	mov	r0, r9
    tcp_ack_now(pcb);
 80069c8:	f043 0302 	orr.w	r3, r3, #2
 80069cc:	f8a9 301a 	strh.w	r3, [r9, #26]
    tcp_output(pcb);
 80069d0:	f001 fa7a 	bl	8007ec8 <tcp_output>
 80069d4:	e6c1      	b.n	800675a <tcp_input+0x176>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80069d6:	f8d9 900c 	ldr.w	r9, [r9, #12]
 80069da:	f1b9 0f00 	cmp.w	r9, #0
 80069de:	d198      	bne.n	8006912 <tcp_input+0x32e>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80069e0:	4b85      	ldr	r3, [pc, #532]	; (8006bf8 <tcp_input+0x614>)
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80069e2:	f8d8 e004 	ldr.w	lr, [r8, #4]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80069e6:	681a      	ldr	r2, [r3, #0]
      if (lpcb->local_port == tcphdr->dest) {
 80069e8:	6831      	ldr	r1, [r6, #0]
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80069ea:	f8d8 c014 	ldr.w	ip, [r8, #20]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80069ee:	4614      	mov	r4, r2
 80069f0:	b99c      	cbnz	r4, 8006a1a <tcp_input+0x436>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80069f2:	8988      	ldrh	r0, [r1, #12]
 80069f4:	f7fb fe64 	bl	80026c0 <lwip_htons>
 80069f8:	0743      	lsls	r3, r0, #29
 80069fa:	f53f aeae 	bmi.w	800675a <tcp_input+0x176>
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80069fe:	6833      	ldr	r3, [r6, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8006a00:	4a7a      	ldr	r2, [pc, #488]	; (8006bec <tcp_input+0x608>)
 8006a02:	8818      	ldrh	r0, [r3, #0]
 8006a04:	8811      	ldrh	r1, [r2, #0]
 8006a06:	f8db 2000 	ldr.w	r2, [fp]
 8006a0a:	9002      	str	r0, [sp, #8]
 8006a0c:	885b      	ldrh	r3, [r3, #2]
 8006a0e:	440a      	add	r2, r1
 8006a10:	9301      	str	r3, [sp, #4]
 8006a12:	4b77      	ldr	r3, [pc, #476]	; (8006bf0 <tcp_input+0x60c>)
 8006a14:	9300      	str	r3, [sp, #0]
 8006a16:	3304      	adds	r3, #4
 8006a18:	e32e      	b.n	8007078 <tcp_input+0xa94>
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8006a1a:	7a20      	ldrb	r0, [r4, #8]
 8006a1c:	b128      	cbz	r0, 8006a2a <tcp_input+0x446>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8006a1e:	f89e 302c 	ldrb.w	r3, [lr, #44]	; 0x2c
 8006a22:	3301      	adds	r3, #1
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8006a24:	b2db      	uxtb	r3, r3
 8006a26:	4298      	cmp	r0, r3
 8006a28:	d10a      	bne.n	8006a40 <tcp_input+0x45c>
      if (lpcb->local_port == tcphdr->dest) {
 8006a2a:	8ae0      	ldrh	r0, [r4, #22]
 8006a2c:	884b      	ldrh	r3, [r1, #2]
 8006a2e:	4283      	cmp	r3, r0
 8006a30:	d106      	bne.n	8006a40 <tcp_input+0x45c>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8006a32:	6823      	ldr	r3, [r4, #0]
 8006a34:	4563      	cmp	r3, ip
 8006a36:	f000 8302 	beq.w	800703e <tcp_input+0xa5a>
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	f000 82ff 	beq.w	800703e <tcp_input+0xa5a>
 8006a40:	46a1      	mov	r9, r4
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8006a42:	68e4      	ldr	r4, [r4, #12]
 8006a44:	e7d4      	b.n	80069f0 <tcp_input+0x40c>
  } else if (flags & TCP_SYN) {
 8006a46:	0798      	lsls	r0, r3, #30
 8006a48:	f57f ae87 	bpl.w	800675a <tcp_input+0x176>
    npcb = tcp_alloc(pcb->prio);
 8006a4c:	7d60      	ldrb	r0, [r4, #21]
 8006a4e:	f7fe fc0f 	bl	8005270 <tcp_alloc>
    if (npcb == NULL) {
 8006a52:	4682      	mov	sl, r0
 8006a54:	b948      	cbnz	r0, 8006a6a <tcp_input+0x486>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8006a56:	69a3      	ldr	r3, [r4, #24]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	f43f ae7e 	beq.w	800675a <tcp_input+0x176>
 8006a5e:	4601      	mov	r1, r0
 8006a60:	f04f 32ff 	mov.w	r2, #4294967295
 8006a64:	6920      	ldr	r0, [r4, #16]
 8006a66:	4798      	blx	r3
 8006a68:	e677      	b.n	800675a <tcp_input+0x176>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8006a6a:	f8d8 3014 	ldr.w	r3, [r8, #20]
    npcb->remote_port = tcphdr->src;
 8006a6e:	6832      	ldr	r2, [r6, #0]
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8006a70:	6003      	str	r3, [r0, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8006a72:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8006a76:	6043      	str	r3, [r0, #4]
    npcb->local_port = pcb->local_port;
 8006a78:	8ae3      	ldrh	r3, [r4, #22]
 8006a7a:	82c3      	strh	r3, [r0, #22]
    npcb->remote_port = tcphdr->src;
 8006a7c:	7813      	ldrb	r3, [r2, #0]
 8006a7e:	7852      	ldrb	r2, [r2, #1]
 8006a80:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006a84:	8303      	strh	r3, [r0, #24]
    npcb->state = SYN_RCVD;
 8006a86:	2303      	movs	r3, #3
 8006a88:	7503      	strb	r3, [r0, #20]
    npcb->rcv_nxt = seqno + 1;
 8006a8a:	f8db 3000 	ldr.w	r3, [fp]
 8006a8e:	3301      	adds	r3, #1
 8006a90:	6243      	str	r3, [r0, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8006a92:	62c3      	str	r3, [r0, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8006a94:	f7fe fa06 	bl	8004ea4 <tcp_next_iss>
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8006a98:	f8db 3000 	ldr.w	r3, [fp]
    npcb->snd_wl2 = iss;
 8006a9c:	f8ca 0058 	str.w	r0, [sl, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8006aa0:	3b01      	subs	r3, #1
    npcb->snd_nxt = iss;
 8006aa2:	f8ca 0050 	str.w	r0, [sl, #80]	; 0x50
    npcb->lastack = iss;
 8006aa6:	f8ca 0044 	str.w	r0, [sl, #68]	; 0x44
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8006aaa:	f8ca 3054 	str.w	r3, [sl, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8006aae:	6923      	ldr	r3, [r4, #16]
    npcb->snd_lbb = iss;
 8006ab0:	f8ca 005c 	str.w	r0, [sl, #92]	; 0x5c
    npcb->listener = pcb;
 8006ab4:	f8ca 407c 	str.w	r4, [sl, #124]	; 0x7c
    npcb->callback_arg = pcb->callback_arg;
 8006ab8:	f8ca 3010 	str.w	r3, [sl, #16]
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8006abc:	7a63      	ldrb	r3, [r4, #9]
 8006abe:	f003 030c 	and.w	r3, r3, #12
 8006ac2:	f88a 3009 	strb.w	r3, [sl, #9]
    npcb->netif_idx = pcb->netif_idx;
 8006ac6:	7a23      	ldrb	r3, [r4, #8]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8006ac8:	f10a 0404 	add.w	r4, sl, #4
    npcb->netif_idx = pcb->netif_idx;
 8006acc:	f88a 3008 	strb.w	r3, [sl, #8]
    TCP_REG_ACTIVE(npcb);
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	f8c7 a000 	str.w	sl, [r7]
 8006ad6:	f8ca 300c 	str.w	r3, [sl, #12]
 8006ada:	f001 fccb 	bl	8008474 <tcp_timer_needed>
 8006ade:	2201      	movs	r2, #1
 8006ae0:	4b46      	ldr	r3, [pc, #280]	; (8006bfc <tcp_input+0x618>)
    tcp_parseopt(npcb);
 8006ae2:	4650      	mov	r0, sl
    TCP_REG_ACTIVE(npcb);
 8006ae4:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8006ae6:	f7ff f881 	bl	8005bec <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8006aea:	6833      	ldr	r3, [r6, #0]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8006aec:	4620      	mov	r0, r4
 8006aee:	f8ba 6032 	ldrh.w	r6, [sl, #50]	; 0x32
    npcb->snd_wnd = tcphdr->wnd;
 8006af2:	89db      	ldrh	r3, [r3, #14]
 8006af4:	f8aa 3060 	strh.w	r3, [sl, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8006af8:	f8aa 3062 	strh.w	r3, [sl, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8006afc:	f7fc facc 	bl	8003098 <ip4_route>
 8006b00:	4622      	mov	r2, r4
 8006b02:	4601      	mov	r1, r0
 8006b04:	4630      	mov	r0, r6
 8006b06:	f7fe f9e7 	bl	8004ed8 <tcp_eff_send_mss_netif>
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8006b0a:	2112      	movs	r1, #18
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8006b0c:	f8aa 0032 	strh.w	r0, [sl, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8006b10:	4650      	mov	r0, sl
 8006b12:	f000 ffdd 	bl	8007ad0 <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 8006b16:	b120      	cbz	r0, 8006b22 <tcp_input+0x53e>
      tcp_abandon(npcb, 0);
 8006b18:	4649      	mov	r1, r9
 8006b1a:	4650      	mov	r0, sl
 8006b1c:	f7fe fa9a 	bl	8005054 <tcp_abandon>
 8006b20:	e61b      	b.n	800675a <tcp_input+0x176>
    tcp_output(npcb);
 8006b22:	4650      	mov	r0, sl
 8006b24:	e754      	b.n	80069d0 <tcp_input+0x3ec>
  if (flags & TCP_RST) {
 8006b26:	9b05      	ldr	r3, [sp, #20]
    tcp_input_pcb = pcb;
 8006b28:	602c      	str	r4, [r5, #0]
  if (flags & TCP_RST) {
 8006b2a:	781b      	ldrb	r3, [r3, #0]
 8006b2c:	0759      	lsls	r1, r3, #29
 8006b2e:	d533      	bpl.n	8006b98 <tcp_input+0x5b4>
    if (pcb->state == SYN_SENT) {
 8006b30:	7d21      	ldrb	r1, [r4, #20]
 8006b32:	2902      	cmp	r1, #2
 8006b34:	d122      	bne.n	8006b7c <tcp_input+0x598>
      if (ackno == pcb->snd_nxt) {
 8006b36:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8006b38:	f8da 3000 	ldr.w	r3, [sl]
 8006b3c:	429a      	cmp	r2, r3
 8006b3e:	d109      	bne.n	8006b54 <tcp_input+0x570>
      recv_flags |= TF_RESET;
 8006b40:	f898 3000 	ldrb.w	r3, [r8]
 8006b44:	f043 0308 	orr.w	r3, r3, #8
 8006b48:	f888 3000 	strb.w	r3, [r8]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8006b4c:	8b63      	ldrh	r3, [r4, #26]
 8006b4e:	f023 0301 	bic.w	r3, r3, #1
 8006b52:	8363      	strh	r3, [r4, #26]
      if (recv_flags & TF_RESET) {
 8006b54:	f898 3000 	ldrb.w	r3, [r8]
 8006b58:	0719      	lsls	r1, r3, #28
 8006b5a:	f140 8206 	bpl.w	8006f6a <tcp_input+0x986>
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8006b5e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8006b62:	b11b      	cbz	r3, 8006b6c <tcp_input+0x588>
 8006b64:	f06f 010d 	mvn.w	r1, #13
 8006b68:	6920      	ldr	r0, [r4, #16]
 8006b6a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8006b6c:	4621      	mov	r1, r4
 8006b6e:	4824      	ldr	r0, [pc, #144]	; (8006c00 <tcp_input+0x61c>)
 8006b70:	f7fe fa0c 	bl	8004f8c <tcp_pcb_remove>
        tcp_free(pcb);
 8006b74:	4620      	mov	r0, r4
 8006b76:	f7fd ff8b 	bl	8004a90 <tcp_free>
 8006b7a:	e682      	b.n	8006882 <tcp_input+0x29e>
      if (seqno == pcb->rcv_nxt) {
 8006b7c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006b7e:	f8db 3000 	ldr.w	r3, [fp]
 8006b82:	429a      	cmp	r2, r3
 8006b84:	f000 827c 	beq.w	8007080 <tcp_input+0xa9c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8006b88:	1a9b      	subs	r3, r3, r2
 8006b8a:	d4e3      	bmi.n	8006b54 <tcp_input+0x570>
 8006b8c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8006b8e:	1a9b      	subs	r3, r3, r2
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	dcdf      	bgt.n	8006b54 <tcp_input+0x570>
        tcp_ack_now(pcb);
 8006b94:	8b63      	ldrh	r3, [r4, #26]
 8006b96:	e007      	b.n	8006ba8 <tcp_input+0x5c4>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8006b98:	f013 0f02 	tst.w	r3, #2
 8006b9c:	8b63      	ldrh	r3, [r4, #26]
 8006b9e:	d006      	beq.n	8006bae <tcp_input+0x5ca>
 8006ba0:	7d22      	ldrb	r2, [r4, #20]
 8006ba2:	3a02      	subs	r2, #2
 8006ba4:	2a01      	cmp	r2, #1
 8006ba6:	d902      	bls.n	8006bae <tcp_input+0x5ca>
        tcp_ack_now(pcb);
 8006ba8:	f043 0302 	orr.w	r3, r3, #2
 8006bac:	e7d1      	b.n	8006b52 <tcp_input+0x56e>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8006bae:	06da      	lsls	r2, r3, #27
  tcp_parseopt(pcb);
 8006bb0:	4620      	mov	r0, r4
    pcb->tmr = tcp_ticks;
 8006bb2:	bf5e      	ittt	pl
 8006bb4:	4b0f      	ldrpl	r3, [pc, #60]	; (8006bf4 <tcp_input+0x610>)
 8006bb6:	681b      	ldrpl	r3, [r3, #0]
 8006bb8:	6223      	strpl	r3, [r4, #32]
  pcb->keep_cnt_sent = 0;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	f884 309b 	strb.w	r3, [r4, #155]	; 0x9b
  pcb->persist_probe = 0;
 8006bc0:	f884 309a 	strb.w	r3, [r4, #154]	; 0x9a
  tcp_parseopt(pcb);
 8006bc4:	f7ff f812 	bl	8005bec <tcp_parseopt>
  switch (pcb->state) {
 8006bc8:	7d23      	ldrb	r3, [r4, #20]
 8006bca:	3b02      	subs	r3, #2
 8006bcc:	2b07      	cmp	r3, #7
 8006bce:	d8c1      	bhi.n	8006b54 <tcp_input+0x570>
 8006bd0:	e8df f013 	tbh	[pc, r3, lsl #1]
 8006bd4:	00a90018 	.word	0x00a90018
 8006bd8:	011d0119 	.word	0x011d0119
 8006bdc:	01190167 	.word	0x01190167
 8006be0:	01b20180 	.word	0x01b20180
 8006be4:	0800c445 	.word	0x0800c445
 8006be8:	0800b013 	.word	0x0800b013
 8006bec:	2000063e 	.word	0x2000063e
 8006bf0:	2000066c 	.word	0x2000066c
 8006bf4:	20003b9c 	.word	0x20003b9c
 8006bf8:	20003ba0 	.word	0x20003ba0
 8006bfc:	20003b94 	.word	0x20003b94
 8006c00:	20003b98 	.word	0x20003b98
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8006c04:	9b05      	ldr	r3, [sp, #20]
 8006c06:	781b      	ldrb	r3, [r3, #0]
 8006c08:	f003 0212 	and.w	r2, r3, #18
 8006c0c:	2a12      	cmp	r2, #18
 8006c0e:	d16a      	bne.n	8006ce6 <tcp_input+0x702>
          && (ackno == pcb->lastack + 1)) {
 8006c10:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8006c12:	f8da 1000 	ldr.w	r1, [sl]
 8006c16:	3201      	adds	r2, #1
 8006c18:	428a      	cmp	r2, r1
 8006c1a:	d164      	bne.n	8006ce6 <tcp_input+0x702>
        pcb->rcv_nxt = seqno + 1;
 8006c1c:	f8db 3000 	ldr.w	r3, [fp]
        pcb->lastack = ackno;
 8006c20:	6462      	str	r2, [r4, #68]	; 0x44
        pcb->rcv_nxt = seqno + 1;
 8006c22:	1c59      	adds	r1, r3, #1
        pcb->snd_wnd = tcphdr->wnd;
 8006c24:	6832      	ldr	r2, [r6, #0]
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8006c26:	3b01      	subs	r3, #1
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8006c28:	8e67      	ldrh	r7, [r4, #50]	; 0x32
        pcb->rcv_nxt = seqno + 1;
 8006c2a:	6261      	str	r1, [r4, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8006c2c:	62e1      	str	r1, [r4, #44]	; 0x2c
        pcb->snd_wnd = tcphdr->wnd;
 8006c2e:	89d2      	ldrh	r2, [r2, #14]
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8006c30:	6563      	str	r3, [r4, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8006c32:	2304      	movs	r3, #4
        pcb->snd_wnd = tcphdr->wnd;
 8006c34:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8006c38:	18e6      	adds	r6, r4, r3
        pcb->state = ESTABLISHED;
 8006c3a:	7523      	strb	r3, [r4, #20]
        pcb->snd_wnd_max = pcb->snd_wnd;
 8006c3c:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8006c40:	4630      	mov	r0, r6
 8006c42:	f7fc fa29 	bl	8003098 <ip4_route>
 8006c46:	4632      	mov	r2, r6
 8006c48:	4601      	mov	r1, r0
 8006c4a:	4638      	mov	r0, r7
 8006c4c:	f7fe f944 	bl	8004ed8 <tcp_eff_send_mss_netif>
 8006c50:	8660      	strh	r0, [r4, #50]	; 0x32
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8006c52:	0042      	lsls	r2, r0, #1
 8006c54:	0083      	lsls	r3, r0, #2
 8006c56:	f241 101c 	movw	r0, #4380	; 0x111c
 8006c5a:	4611      	mov	r1, r2
 8006c5c:	4282      	cmp	r2, r0
 8006c5e:	bf38      	it	cc
 8006c60:	4601      	movcc	r1, r0
 8006c62:	428b      	cmp	r3, r1
 8006c64:	d233      	bcs.n	8006cce <tcp_input+0x6ea>
 8006c66:	b298      	uxth	r0, r3
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8006c68:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8006c6c:	f8a4 0048 	strh.w	r0, [r4, #72]	; 0x48
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8006c70:	b933      	cbnz	r3, 8006c80 <tcp_input+0x69c>
 8006c72:	4ba8      	ldr	r3, [pc, #672]	; (8006f14 <tcp_input+0x930>)
 8006c74:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8006c78:	49a7      	ldr	r1, [pc, #668]	; (8006f18 <tcp_input+0x934>)
 8006c7a:	48a8      	ldr	r0, [pc, #672]	; (8006f1c <tcp_input+0x938>)
 8006c7c:	f002 faf8 	bl	8009270 <iprintf>
        --pcb->snd_queuelen;
 8006c80:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
        rseg = pcb->unacked;
 8006c84:	6f26      	ldr	r6, [r4, #112]	; 0x70
        --pcb->snd_queuelen;
 8006c86:	3b01      	subs	r3, #1
 8006c88:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
        if (rseg == NULL) {
 8006c8c:	bb1e      	cbnz	r6, 8006cd6 <tcp_input+0x6f2>
          rseg = pcb->unsent;
 8006c8e:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8006c90:	b936      	cbnz	r6, 8006ca0 <tcp_input+0x6bc>
 8006c92:	4ba0      	ldr	r3, [pc, #640]	; (8006f14 <tcp_input+0x930>)
 8006c94:	f44f 725d 	mov.w	r2, #884	; 0x374
 8006c98:	49a1      	ldr	r1, [pc, #644]	; (8006f20 <tcp_input+0x93c>)
 8006c9a:	48a0      	ldr	r0, [pc, #640]	; (8006f1c <tcp_input+0x938>)
 8006c9c:	f002 fae8 	bl	8009270 <iprintf>
          pcb->unsent = rseg->next;
 8006ca0:	6833      	ldr	r3, [r6, #0]
 8006ca2:	66e3      	str	r3, [r4, #108]	; 0x6c
        tcp_seg_free(rseg);
 8006ca4:	4630      	mov	r0, r6
 8006ca6:	f7fe f83d 	bl	8004d24 <tcp_seg_free>
        if (pcb->unacked == NULL) {
 8006caa:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8006cac:	b9b3      	cbnz	r3, 8006cdc <tcp_input+0x6f8>
          pcb->rtime = -1;
 8006cae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006cb2:	8623      	strh	r3, [r4, #48]	; 0x30
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8006cb4:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	f43f af6b 	beq.w	8006b94 <tcp_input+0x5b0>
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	4621      	mov	r1, r4
 8006cc2:	6920      	ldr	r0, [r4, #16]
 8006cc4:	4798      	blx	r3
        if (err == ERR_ABRT) {
 8006cc6:	300d      	adds	r0, #13
 8006cc8:	f47f af64 	bne.w	8006b94 <tcp_input+0x5b0>
 8006ccc:	e5d9      	b.n	8006882 <tcp_input+0x29e>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8006cce:	4282      	cmp	r2, r0
 8006cd0:	bf88      	it	hi
 8006cd2:	b290      	uxthhi	r0, r2
 8006cd4:	e7c8      	b.n	8006c68 <tcp_input+0x684>
          pcb->unacked = rseg->next;
 8006cd6:	6833      	ldr	r3, [r6, #0]
 8006cd8:	6723      	str	r3, [r4, #112]	; 0x70
 8006cda:	e7e3      	b.n	8006ca4 <tcp_input+0x6c0>
          pcb->rtime = 0;
 8006cdc:	2300      	movs	r3, #0
 8006cde:	8623      	strh	r3, [r4, #48]	; 0x30
          pcb->nrtx = 0;
 8006ce0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006ce4:	e7e6      	b.n	8006cb4 <tcp_input+0x6d0>
      else if (flags & TCP_ACK) {
 8006ce6:	06db      	lsls	r3, r3, #27
 8006ce8:	f57f af34 	bpl.w	8006b54 <tcp_input+0x570>
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8006cec:	6833      	ldr	r3, [r6, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8006cee:	4a8d      	ldr	r2, [pc, #564]	; (8006f24 <tcp_input+0x940>)
 8006cf0:	8818      	ldrh	r0, [r3, #0]
 8006cf2:	8811      	ldrh	r1, [r2, #0]
 8006cf4:	f8db 2000 	ldr.w	r2, [fp]
 8006cf8:	9002      	str	r0, [sp, #8]
 8006cfa:	4620      	mov	r0, r4
 8006cfc:	885b      	ldrh	r3, [r3, #2]
 8006cfe:	440a      	add	r2, r1
 8006d00:	9301      	str	r3, [sp, #4]
 8006d02:	4b89      	ldr	r3, [pc, #548]	; (8006f28 <tcp_input+0x944>)
 8006d04:	9300      	str	r3, [sp, #0]
 8006d06:	3304      	adds	r3, #4
 8006d08:	f8da 1000 	ldr.w	r1, [sl]
 8006d0c:	f001 f866 	bl	8007ddc <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8006d10:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8006d14:	2b05      	cmp	r3, #5
 8006d16:	f63f af1d 	bhi.w	8006b54 <tcp_input+0x570>
          pcb->rtime = 0;
 8006d1a:	2300      	movs	r3, #0
          tcp_rexmit_rto(pcb);
 8006d1c:	4620      	mov	r0, r4
          pcb->rtime = 0;
 8006d1e:	8623      	strh	r3, [r4, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8006d20:	f001 fa98 	bl	8008254 <tcp_rexmit_rto>
 8006d24:	e716      	b.n	8006b54 <tcp_input+0x570>
      if (flags & TCP_ACK) {
 8006d26:	9b05      	ldr	r3, [sp, #20]
 8006d28:	781b      	ldrb	r3, [r3, #0]
 8006d2a:	06df      	lsls	r7, r3, #27
 8006d2c:	d55d      	bpl.n	8006dea <tcp_input+0x806>
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8006d2e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006d30:	f8da 1000 	ldr.w	r1, [sl]
 8006d34:	43db      	mvns	r3, r3
 8006d36:	42cb      	cmn	r3, r1
 8006d38:	d446      	bmi.n	8006dc8 <tcp_input+0x7e4>
 8006d3a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006d3c:	1acb      	subs	r3, r1, r3
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	dc42      	bgt.n	8006dc8 <tcp_input+0x7e4>
          pcb->state = ESTABLISHED;
 8006d42:	2304      	movs	r3, #4
 8006d44:	7523      	strb	r3, [r4, #20]
          if (pcb->listener == NULL) {
 8006d46:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8006d48:	b19b      	cbz	r3, 8006d72 <tcp_input+0x78e>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8006d4a:	699b      	ldr	r3, [r3, #24]
 8006d4c:	b933      	cbnz	r3, 8006d5c <tcp_input+0x778>
 8006d4e:	4b71      	ldr	r3, [pc, #452]	; (8006f14 <tcp_input+0x930>)
 8006d50:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8006d54:	4975      	ldr	r1, [pc, #468]	; (8006f2c <tcp_input+0x948>)
 8006d56:	4871      	ldr	r0, [pc, #452]	; (8006f1c <tcp_input+0x938>)
 8006d58:	f002 fa8a 	bl	8009270 <iprintf>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8006d5c:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8006d5e:	699b      	ldr	r3, [r3, #24]
 8006d60:	b13b      	cbz	r3, 8006d72 <tcp_input+0x78e>
 8006d62:	2200      	movs	r2, #0
 8006d64:	4621      	mov	r1, r4
 8006d66:	6920      	ldr	r0, [r4, #16]
 8006d68:	4798      	blx	r3
          if (err != ERR_OK) {
 8006d6a:	b130      	cbz	r0, 8006d7a <tcp_input+0x796>
            if (err != ERR_ABRT) {
 8006d6c:	300d      	adds	r0, #13
 8006d6e:	f43f ad88 	beq.w	8006882 <tcp_input+0x29e>
              tcp_abort(pcb);
 8006d72:	4620      	mov	r0, r4
 8006d74:	f7fe f9f0 	bl	8005158 <tcp_abort>
 8006d78:	e583      	b.n	8006882 <tcp_input+0x29e>
          tcp_receive(pcb);
 8006d7a:	4620      	mov	r0, r4
 8006d7c:	f7ff f804 	bl	8005d88 <tcp_receive>
          if (recv_acked != 0) {
 8006d80:	9b06      	ldr	r3, [sp, #24]
 8006d82:	881b      	ldrh	r3, [r3, #0]
 8006d84:	b113      	cbz	r3, 8006d8c <tcp_input+0x7a8>
            recv_acked--;
 8006d86:	3b01      	subs	r3, #1
 8006d88:	9a06      	ldr	r2, [sp, #24]
 8006d8a:	8013      	strh	r3, [r2, #0]
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8006d8c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8006d8e:	0059      	lsls	r1, r3, #1
 8006d90:	009a      	lsls	r2, r3, #2
 8006d92:	f241 131c 	movw	r3, #4380	; 0x111c
 8006d96:	4608      	mov	r0, r1
 8006d98:	4299      	cmp	r1, r3
 8006d9a:	bf38      	it	cc
 8006d9c:	4618      	movcc	r0, r3
 8006d9e:	4282      	cmp	r2, r0
 8006da0:	d20e      	bcs.n	8006dc0 <tcp_input+0x7dc>
 8006da2:	b293      	uxth	r3, r2
 8006da4:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8006da8:	f898 3000 	ldrb.w	r3, [r8]
 8006dac:	0699      	lsls	r1, r3, #26
 8006dae:	f57f aed1 	bpl.w	8006b54 <tcp_input+0x570>
        tcp_ack_now(pcb);
 8006db2:	8b63      	ldrh	r3, [r4, #26]
 8006db4:	f043 0302 	orr.w	r3, r3, #2
 8006db8:	8363      	strh	r3, [r4, #26]
        pcb->state = CLOSE_WAIT;
 8006dba:	2307      	movs	r3, #7
          pcb->state = CLOSING;
 8006dbc:	7523      	strb	r3, [r4, #20]
 8006dbe:	e6c9      	b.n	8006b54 <tcp_input+0x570>
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8006dc0:	4299      	cmp	r1, r3
 8006dc2:	bf88      	it	hi
 8006dc4:	b28b      	uxthhi	r3, r1
 8006dc6:	e7ed      	b.n	8006da4 <tcp_input+0x7c0>
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8006dc8:	6833      	ldr	r3, [r6, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8006dca:	4a56      	ldr	r2, [pc, #344]	; (8006f24 <tcp_input+0x940>)
 8006dcc:	881e      	ldrh	r6, [r3, #0]
 8006dce:	8810      	ldrh	r0, [r2, #0]
 8006dd0:	f8db 2000 	ldr.w	r2, [fp]
 8006dd4:	9602      	str	r6, [sp, #8]
 8006dd6:	885b      	ldrh	r3, [r3, #2]
 8006dd8:	4402      	add	r2, r0
 8006dda:	4620      	mov	r0, r4
 8006ddc:	9301      	str	r3, [sp, #4]
 8006dde:	4b52      	ldr	r3, [pc, #328]	; (8006f28 <tcp_input+0x944>)
 8006de0:	9300      	str	r3, [sp, #0]
 8006de2:	3304      	adds	r3, #4
 8006de4:	f000 fffa 	bl	8007ddc <tcp_rst>
 8006de8:	e6b4      	b.n	8006b54 <tcp_input+0x570>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8006dea:	0798      	lsls	r0, r3, #30
 8006dec:	f57f aeb2 	bpl.w	8006b54 <tcp_input+0x570>
 8006df0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006df2:	f8db 2000 	ldr.w	r2, [fp]
 8006df6:	3b01      	subs	r3, #1
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	f47f aeab 	bne.w	8006b54 <tcp_input+0x570>
        tcp_rexmit(pcb);
 8006dfe:	4620      	mov	r0, r4
 8006e00:	f000 ff74 	bl	8007cec <tcp_rexmit>
 8006e04:	e6a6      	b.n	8006b54 <tcp_input+0x570>
      tcp_receive(pcb);
 8006e06:	4620      	mov	r0, r4
 8006e08:	f7fe ffbe 	bl	8005d88 <tcp_receive>
 8006e0c:	e7cc      	b.n	8006da8 <tcp_input+0x7c4>
      tcp_receive(pcb);
 8006e0e:	4620      	mov	r0, r4
 8006e10:	f7fe ffba 	bl	8005d88 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8006e14:	f898 3000 	ldrb.w	r3, [r8]
 8006e18:	f013 0f20 	tst.w	r3, #32
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8006e1c:	9b05      	ldr	r3, [sp, #20]
 8006e1e:	781b      	ldrb	r3, [r3, #0]
      if (recv_flags & TF_GOT_FIN) {
 8006e20:	d030      	beq.n	8006e84 <tcp_input+0x8a0>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8006e22:	f013 0f10 	tst.w	r3, #16
 8006e26:	8b63      	ldrh	r3, [r4, #26]
 8006e28:	d027      	beq.n	8006e7a <tcp_input+0x896>
 8006e2a:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8006e2c:	f8da 2000 	ldr.w	r2, [sl]
 8006e30:	4291      	cmp	r1, r2
 8006e32:	d122      	bne.n	8006e7a <tcp_input+0x896>
 8006e34:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8006e36:	bb02      	cbnz	r2, 8006e7a <tcp_input+0x896>
          tcp_ack_now(pcb);
 8006e38:	f043 0302 	orr.w	r3, r3, #2
          tcp_pcb_purge(pcb);
 8006e3c:	4620      	mov	r0, r4
          tcp_ack_now(pcb);
 8006e3e:	8363      	strh	r3, [r4, #26]
          tcp_pcb_purge(pcb);
 8006e40:	f7fe f872 	bl	8004f28 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	429c      	cmp	r4, r3
 8006e48:	d109      	bne.n	8006e5e <tcp_input+0x87a>
        TCP_RMV_ACTIVE(pcb);
 8006e4a:	68e3      	ldr	r3, [r4, #12]
 8006e4c:	603b      	str	r3, [r7, #0]
 8006e4e:	e008      	b.n	8006e62 <tcp_input+0x87e>
          TCP_RMV_ACTIVE(pcb);
 8006e50:	68da      	ldr	r2, [r3, #12]
 8006e52:	4294      	cmp	r4, r2
 8006e54:	d102      	bne.n	8006e5c <tcp_input+0x878>
        TCP_RMV_ACTIVE(pcb);
 8006e56:	68e2      	ldr	r2, [r4, #12]
 8006e58:	60da      	str	r2, [r3, #12]
 8006e5a:	e002      	b.n	8006e62 <tcp_input+0x87e>
          TCP_RMV_ACTIVE(pcb);
 8006e5c:	4613      	mov	r3, r2
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d1f6      	bne.n	8006e50 <tcp_input+0x86c>
        TCP_RMV_ACTIVE(pcb);
 8006e62:	2201      	movs	r2, #1
 8006e64:	4b32      	ldr	r3, [pc, #200]	; (8006f30 <tcp_input+0x94c>)
 8006e66:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8006e68:	230a      	movs	r3, #10
 8006e6a:	7523      	strb	r3, [r4, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8006e6c:	4b31      	ldr	r3, [pc, #196]	; (8006f34 <tcp_input+0x950>)
 8006e6e:	681a      	ldr	r2, [r3, #0]
 8006e70:	601c      	str	r4, [r3, #0]
 8006e72:	60e2      	str	r2, [r4, #12]
 8006e74:	f001 fafe 	bl	8008474 <tcp_timer_needed>
 8006e78:	e66c      	b.n	8006b54 <tcp_input+0x570>
          tcp_ack_now(pcb);
 8006e7a:	f043 0302 	orr.w	r3, r3, #2
 8006e7e:	8363      	strh	r3, [r4, #26]
          pcb->state = CLOSING;
 8006e80:	2308      	movs	r3, #8
 8006e82:	e79b      	b.n	8006dbc <tcp_input+0x7d8>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8006e84:	06da      	lsls	r2, r3, #27
 8006e86:	f57f ae65 	bpl.w	8006b54 <tcp_input+0x570>
 8006e8a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8006e8c:	f8da 3000 	ldr.w	r3, [sl]
 8006e90:	429a      	cmp	r2, r3
 8006e92:	f47f ae5f 	bne.w	8006b54 <tcp_input+0x570>
 8006e96:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	f47f ae5b 	bne.w	8006b54 <tcp_input+0x570>
        pcb->state = FIN_WAIT_2;
 8006e9e:	2306      	movs	r3, #6
 8006ea0:	e78c      	b.n	8006dbc <tcp_input+0x7d8>
      tcp_receive(pcb);
 8006ea2:	4620      	mov	r0, r4
 8006ea4:	f7fe ff70 	bl	8005d88 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8006ea8:	f898 3000 	ldrb.w	r3, [r8]
 8006eac:	069b      	lsls	r3, r3, #26
 8006eae:	f57f ae51 	bpl.w	8006b54 <tcp_input+0x570>
        tcp_ack_now(pcb);
 8006eb2:	8b63      	ldrh	r3, [r4, #26]
        tcp_pcb_purge(pcb);
 8006eb4:	4620      	mov	r0, r4
        tcp_ack_now(pcb);
 8006eb6:	f043 0302 	orr.w	r3, r3, #2
 8006eba:	8363      	strh	r3, [r4, #26]
        tcp_pcb_purge(pcb);
 8006ebc:	f7fe f834 	bl	8004f28 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	429c      	cmp	r4, r3
 8006ec4:	d0c1      	beq.n	8006e4a <tcp_input+0x866>
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d0cb      	beq.n	8006e62 <tcp_input+0x87e>
 8006eca:	68da      	ldr	r2, [r3, #12]
 8006ecc:	4294      	cmp	r4, r2
 8006ece:	d0c2      	beq.n	8006e56 <tcp_input+0x872>
 8006ed0:	4613      	mov	r3, r2
 8006ed2:	e7f8      	b.n	8006ec6 <tcp_input+0x8e2>
      tcp_receive(pcb);
 8006ed4:	4620      	mov	r0, r4
 8006ed6:	f7fe ff57 	bl	8005d88 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8006eda:	9b05      	ldr	r3, [sp, #20]
 8006edc:	781b      	ldrb	r3, [r3, #0]
 8006ede:	06de      	lsls	r6, r3, #27
 8006ee0:	f57f ae38 	bpl.w	8006b54 <tcp_input+0x570>
 8006ee4:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8006ee6:	f8da 3000 	ldr.w	r3, [sl]
 8006eea:	429a      	cmp	r2, r3
 8006eec:	f47f ae32 	bne.w	8006b54 <tcp_input+0x570>
 8006ef0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	f47f ae2e 	bne.w	8006b54 <tcp_input+0x570>
        tcp_pcb_purge(pcb);
 8006ef8:	4620      	mov	r0, r4
 8006efa:	f7fe f815 	bl	8004f28 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	429c      	cmp	r4, r3
 8006f02:	d0a2      	beq.n	8006e4a <tcp_input+0x866>
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d0ac      	beq.n	8006e62 <tcp_input+0x87e>
 8006f08:	68da      	ldr	r2, [r3, #12]
 8006f0a:	4294      	cmp	r4, r2
 8006f0c:	d0a3      	beq.n	8006e56 <tcp_input+0x872>
 8006f0e:	4613      	mov	r3, r2
 8006f10:	e7f8      	b.n	8006f04 <tcp_input+0x920>
 8006f12:	bf00      	nop
 8006f14:	0800c518 	.word	0x0800c518
 8006f18:	0800c492 	.word	0x0800c492
 8006f1c:	0800b013 	.word	0x0800b013
 8006f20:	0800c4a8 	.word	0x0800c4a8
 8006f24:	2000063e 	.word	0x2000063e
 8006f28:	2000066c 	.word	0x2000066c
 8006f2c:	0800c4bb 	.word	0x0800c4bb
 8006f30:	20003b94 	.word	0x20003b94
 8006f34:	20003ba8 	.word	0x20003ba8
      tcp_receive(pcb);
 8006f38:	4620      	mov	r0, r4
 8006f3a:	f7fe ff25 	bl	8005d88 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8006f3e:	9b05      	ldr	r3, [sp, #20]
 8006f40:	781b      	ldrb	r3, [r3, #0]
 8006f42:	06d8      	lsls	r0, r3, #27
 8006f44:	f57f ae06 	bpl.w	8006b54 <tcp_input+0x570>
 8006f48:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8006f4a:	f8da 3000 	ldr.w	r3, [sl]
 8006f4e:	429a      	cmp	r2, r3
 8006f50:	f47f ae00 	bne.w	8006b54 <tcp_input+0x570>
 8006f54:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	f47f adfc 	bne.w	8006b54 <tcp_input+0x570>
        recv_flags |= TF_CLOSED;
 8006f5c:	f898 3000 	ldrb.w	r3, [r8]
 8006f60:	f043 0310 	orr.w	r3, r3, #16
 8006f64:	f888 3000 	strb.w	r3, [r8]
 8006f68:	e5f4      	b.n	8006b54 <tcp_input+0x570>
        if (recv_acked > 0) {
 8006f6a:	9b06      	ldr	r3, [sp, #24]
 8006f6c:	881a      	ldrh	r2, [r3, #0]
 8006f6e:	b12a      	cbz	r2, 8006f7c <tcp_input+0x998>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8006f70:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8006f74:	b9eb      	cbnz	r3, 8006fb2 <tcp_input+0x9ce>
          recv_acked = 0;
 8006f76:	2300      	movs	r3, #0
 8006f78:	9a06      	ldr	r2, [sp, #24]
 8006f7a:	8013      	strh	r3, [r2, #0]
        if (tcp_input_delayed_close(pcb)) {
 8006f7c:	4620      	mov	r0, r4
 8006f7e:	f7fe fe7d 	bl	8005c7c <tcp_input_delayed_close>
 8006f82:	2800      	cmp	r0, #0
 8006f84:	f47f ac7d 	bne.w	8006882 <tcp_input+0x29e>
        if (recv_data != NULL) {
 8006f88:	f8d9 3000 	ldr.w	r3, [r9]
 8006f8c:	b33b      	cbz	r3, 8006fde <tcp_input+0x9fa>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8006f8e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8006f90:	b133      	cbz	r3, 8006fa0 <tcp_input+0x9bc>
 8006f92:	4b44      	ldr	r3, [pc, #272]	; (80070a4 <tcp_input+0xac0>)
 8006f94:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8006f98:	4943      	ldr	r1, [pc, #268]	; (80070a8 <tcp_input+0xac4>)
 8006f9a:	4844      	ldr	r0, [pc, #272]	; (80070ac <tcp_input+0xac8>)
 8006f9c:	f002 f968 	bl	8009270 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8006fa0:	8b63      	ldrh	r3, [r4, #26]
 8006fa2:	f013 0310 	ands.w	r3, r3, #16
 8006fa6:	d00a      	beq.n	8006fbe <tcp_input+0x9da>
            pbuf_free(recv_data);
 8006fa8:	f8d9 0000 	ldr.w	r0, [r9]
 8006fac:	f7fd fa8c 	bl	80044c8 <pbuf_free>
 8006fb0:	e6df      	b.n	8006d72 <tcp_input+0x78e>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8006fb2:	4621      	mov	r1, r4
 8006fb4:	6920      	ldr	r0, [r4, #16]
 8006fb6:	4798      	blx	r3
            if (err == ERR_ABRT) {
 8006fb8:	300d      	adds	r0, #13
 8006fba:	d1dc      	bne.n	8006f76 <tcp_input+0x992>
 8006fbc:	e461      	b.n	8006882 <tcp_input+0x29e>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8006fbe:	f8d4 6084 	ldr.w	r6, [r4, #132]	; 0x84
 8006fc2:	b316      	cbz	r6, 800700a <tcp_input+0xa26>
 8006fc4:	f8d9 2000 	ldr.w	r2, [r9]
 8006fc8:	4621      	mov	r1, r4
 8006fca:	6920      	ldr	r0, [r4, #16]
 8006fcc:	47b0      	blx	r6
          if (err == ERR_ABRT) {
 8006fce:	f110 0f0d 	cmn.w	r0, #13
 8006fd2:	f43f ac56 	beq.w	8006882 <tcp_input+0x29e>
          if (err != ERR_OK) {
 8006fd6:	b110      	cbz	r0, 8006fde <tcp_input+0x9fa>
            pcb->refused_data = recv_data;
 8006fd8:	f8d9 3000 	ldr.w	r3, [r9]
 8006fdc:	67a3      	str	r3, [r4, #120]	; 0x78
        if (recv_flags & TF_GOT_FIN) {
 8006fde:	f898 3000 	ldrb.w	r3, [r8]
 8006fe2:	069a      	lsls	r2, r3, #26
 8006fe4:	d505      	bpl.n	8006ff2 <tcp_input+0xa0e>
          if (pcb->refused_data != NULL) {
 8006fe6:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8006fe8:	b1bb      	cbz	r3, 800701a <tcp_input+0xa36>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8006fea:	7b5a      	ldrb	r2, [r3, #13]
 8006fec:	f042 0220 	orr.w	r2, r2, #32
 8006ff0:	735a      	strb	r2, [r3, #13]
        tcp_input_pcb = NULL;
 8006ff2:	2300      	movs	r3, #0
        if (tcp_input_delayed_close(pcb)) {
 8006ff4:	4620      	mov	r0, r4
        tcp_input_pcb = NULL;
 8006ff6:	602b      	str	r3, [r5, #0]
        if (tcp_input_delayed_close(pcb)) {
 8006ff8:	f7fe fe40 	bl	8005c7c <tcp_input_delayed_close>
 8006ffc:	2800      	cmp	r0, #0
 8006ffe:	f47f ac40 	bne.w	8006882 <tcp_input+0x29e>
        tcp_output(pcb);
 8007002:	4620      	mov	r0, r4
 8007004:	f000 ff60 	bl	8007ec8 <tcp_output>
 8007008:	e43b      	b.n	8006882 <tcp_input+0x29e>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800700a:	4633      	mov	r3, r6
 800700c:	f8d9 2000 	ldr.w	r2, [r9]
 8007010:	4621      	mov	r1, r4
 8007012:	4630      	mov	r0, r6
 8007014:	f7fe fa9a 	bl	800554c <tcp_recv_null>
 8007018:	e7d9      	b.n	8006fce <tcp_input+0x9ea>
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800701a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 800701c:	f8d4 6084 	ldr.w	r6, [r4, #132]	; 0x84
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8007020:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
              pcb->rcv_wnd++;
 8007024:	bf1c      	itt	ne
 8007026:	3301      	addne	r3, #1
 8007028:	8523      	strhne	r3, [r4, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 800702a:	2e00      	cmp	r6, #0
 800702c:	d0e1      	beq.n	8006ff2 <tcp_input+0xa0e>
 800702e:	2300      	movs	r3, #0
 8007030:	4621      	mov	r1, r4
 8007032:	6920      	ldr	r0, [r4, #16]
 8007034:	461a      	mov	r2, r3
 8007036:	47b0      	blx	r6
            if (err == ERR_ABRT) {
 8007038:	300d      	adds	r0, #13
 800703a:	d1da      	bne.n	8006ff2 <tcp_input+0xa0e>
 800703c:	e421      	b.n	8006882 <tcp_input+0x29e>
      if (prev != NULL) {
 800703e:	f1b9 0f00 	cmp.w	r9, #0
 8007042:	d005      	beq.n	8007050 <tcp_input+0xa6c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8007044:	68e3      	ldr	r3, [r4, #12]
 8007046:	f8c9 300c 	str.w	r3, [r9, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800704a:	4b19      	ldr	r3, [pc, #100]	; (80070b0 <tcp_input+0xacc>)
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800704c:	60e2      	str	r2, [r4, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800704e:	601c      	str	r4, [r3, #0]
  if (flags & TCP_RST) {
 8007050:	9b05      	ldr	r3, [sp, #20]
 8007052:	781b      	ldrb	r3, [r3, #0]
 8007054:	075a      	lsls	r2, r3, #29
 8007056:	f53f ab80 	bmi.w	800675a <tcp_input+0x176>
  if (flags & TCP_ACK) {
 800705a:	f013 0910 	ands.w	r9, r3, #16
 800705e:	f43f acf2 	beq.w	8006a46 <tcp_input+0x462>
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007062:	4b14      	ldr	r3, [pc, #80]	; (80070b4 <tcp_input+0xad0>)
 8007064:	f8db 2000 	ldr.w	r2, [fp]
 8007068:	881e      	ldrh	r6, [r3, #0]
 800706a:	880b      	ldrh	r3, [r1, #0]
 800706c:	4432      	add	r2, r6
 800706e:	9001      	str	r0, [sp, #4]
 8007070:	9302      	str	r3, [sp, #8]
 8007072:	4b11      	ldr	r3, [pc, #68]	; (80070b8 <tcp_input+0xad4>)
 8007074:	9300      	str	r3, [sp, #0]
 8007076:	3304      	adds	r3, #4
 8007078:	f8da 1000 	ldr.w	r1, [sl]
 800707c:	4620      	mov	r0, r4
 800707e:	e492      	b.n	80069a6 <tcp_input+0x3c2>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8007080:	2900      	cmp	r1, #0
 8007082:	f47f ad5d 	bne.w	8006b40 <tcp_input+0x55c>
 8007086:	4b07      	ldr	r3, [pc, #28]	; (80070a4 <tcp_input+0xac0>)
 8007088:	f44f 724e 	mov.w	r2, #824	; 0x338
 800708c:	490b      	ldr	r1, [pc, #44]	; (80070bc <tcp_input+0xad8>)
 800708e:	4807      	ldr	r0, [pc, #28]	; (80070ac <tcp_input+0xac8>)
 8007090:	f002 f8ee 	bl	8009270 <iprintf>
 8007094:	e554      	b.n	8006b40 <tcp_input+0x55c>
      if (prev != NULL) {
 8007096:	f1b9 0f00 	cmp.w	r9, #0
 800709a:	f47f abae 	bne.w	80067fa <tcp_input+0x216>
 800709e:	f7ff bbbc 	b.w	800681a <tcp_input+0x236>
 80070a2:	bf00      	nop
 80070a4:	0800c518 	.word	0x0800c518
 80070a8:	0800c4d9 	.word	0x0800c4d9
 80070ac:	0800b013 	.word	0x0800b013
 80070b0:	20003ba0 	.word	0x20003ba0
 80070b4:	2000063e 	.word	0x2000063e
 80070b8:	2000066c 	.word	0x2000066c
 80070bc:	0800c472 	.word	0x0800c472

080070c0 <tcp_trigger_input_pcb_close>:
}

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
 80070c0:	4a02      	ldr	r2, [pc, #8]	; (80070cc <tcp_trigger_input_pcb_close+0xc>)
 80070c2:	7813      	ldrb	r3, [r2, #0]
 80070c4:	f043 0310 	orr.w	r3, r3, #16
 80070c8:	7013      	strb	r3, [r2, #0]
 80070ca:	4770      	bx	lr
 80070cc:	20000624 	.word	0x20000624

080070d0 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80070d0:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80070d2:	4604      	mov	r4, r0
 80070d4:	b930      	cbnz	r0, 80070e4 <tcp_output_segment_busy+0x14>
 80070d6:	4b07      	ldr	r3, [pc, #28]	; (80070f4 <tcp_output_segment_busy+0x24>)
 80070d8:	f240 529a 	movw	r2, #1434	; 0x59a
 80070dc:	4906      	ldr	r1, [pc, #24]	; (80070f8 <tcp_output_segment_busy+0x28>)
 80070de:	4807      	ldr	r0, [pc, #28]	; (80070fc <tcp_output_segment_busy+0x2c>)
 80070e0:	f002 f8c6 	bl	8009270 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80070e4:	6863      	ldr	r3, [r4, #4]
 80070e6:	7b98      	ldrb	r0, [r3, #14]
    /* other reference found */
    return 1;
  }
  /* no other references found */
  return 0;
}
 80070e8:	f110 30ff 	adds.w	r0, r0, #4294967295
 80070ec:	bf18      	it	ne
 80070ee:	2001      	movne	r0, #1
 80070f0:	bd10      	pop	{r4, pc}
 80070f2:	bf00      	nop
 80070f4:	0800c932 	.word	0x0800c932
 80070f8:	0800c965 	.word	0x0800c965
 80070fc:	0800b013 	.word	0x0800b013

08007100 <tcp_pbuf_prealloc>:
{
 8007100:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007104:	9d08      	ldr	r5, [sp, #32]
 8007106:	4607      	mov	r7, r0
 8007108:	460c      	mov	r4, r1
 800710a:	4690      	mov	r8, r2
 800710c:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8007110:	461e      	mov	r6, r3
 8007112:	b92b      	cbnz	r3, 8007120 <tcp_pbuf_prealloc+0x20>
 8007114:	4b1f      	ldr	r3, [pc, #124]	; (8007194 <tcp_pbuf_prealloc+0x94>)
 8007116:	22e8      	movs	r2, #232	; 0xe8
 8007118:	491f      	ldr	r1, [pc, #124]	; (8007198 <tcp_pbuf_prealloc+0x98>)
 800711a:	4820      	ldr	r0, [pc, #128]	; (800719c <tcp_pbuf_prealloc+0x9c>)
 800711c:	f002 f8a8 	bl	8009270 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8007120:	b92d      	cbnz	r5, 800712e <tcp_pbuf_prealloc+0x2e>
 8007122:	4b1c      	ldr	r3, [pc, #112]	; (8007194 <tcp_pbuf_prealloc+0x94>)
 8007124:	22e9      	movs	r2, #233	; 0xe9
 8007126:	491e      	ldr	r1, [pc, #120]	; (80071a0 <tcp_pbuf_prealloc+0xa0>)
 8007128:	481c      	ldr	r0, [pc, #112]	; (800719c <tcp_pbuf_prealloc+0x9c>)
 800712a:	f002 f8a1 	bl	8009270 <iprintf>
  if (length < max_length) {
 800712e:	4544      	cmp	r4, r8
 8007130:	d22d      	bcs.n	800718e <tcp_pbuf_prealloc+0x8e>
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8007132:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8007136:	079a      	lsls	r2, r3, #30
 8007138:	d409      	bmi.n	800714e <tcp_pbuf_prealloc+0x4e>
 800713a:	8b6b      	ldrh	r3, [r5, #26]
 800713c:	065b      	lsls	r3, r3, #25
 800713e:	d426      	bmi.n	800718e <tcp_pbuf_prealloc+0x8e>
        (!(pcb->flags & TF_NODELAY) &&
 8007140:	f1b9 0f00 	cmp.w	r9, #0
 8007144:	d003      	beq.n	800714e <tcp_pbuf_prealloc+0x4e>
         (!first_seg ||
 8007146:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 8007148:	b90b      	cbnz	r3, 800714e <tcp_pbuf_prealloc+0x4e>
          pcb->unsent != NULL ||
 800714a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800714c:	b1fb      	cbz	r3, 800718e <tcp_pbuf_prealloc+0x8e>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800714e:	f204 211b 	addw	r1, r4, #539	; 0x21b
 8007152:	f021 0103 	bic.w	r1, r1, #3
 8007156:	4541      	cmp	r1, r8
 8007158:	bf28      	it	cs
 800715a:	4641      	movcs	r1, r8
 800715c:	b289      	uxth	r1, r1
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800715e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8007162:	4638      	mov	r0, r7
 8007164:	f7fd fa12 	bl	800458c <pbuf_alloc>
  if (p == NULL) {
 8007168:	4605      	mov	r5, r0
 800716a:	b168      	cbz	r0, 8007188 <tcp_pbuf_prealloc+0x88>
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800716c:	6803      	ldr	r3, [r0, #0]
 800716e:	b133      	cbz	r3, 800717e <tcp_pbuf_prealloc+0x7e>
 8007170:	4b08      	ldr	r3, [pc, #32]	; (8007194 <tcp_pbuf_prealloc+0x94>)
 8007172:	f240 120b 	movw	r2, #267	; 0x10b
 8007176:	490b      	ldr	r1, [pc, #44]	; (80071a4 <tcp_pbuf_prealloc+0xa4>)
 8007178:	4808      	ldr	r0, [pc, #32]	; (800719c <tcp_pbuf_prealloc+0x9c>)
 800717a:	f002 f879 	bl	8009270 <iprintf>
  *oversize = p->len - length;
 800717e:	896b      	ldrh	r3, [r5, #10]
 8007180:	1b1b      	subs	r3, r3, r4
 8007182:	8033      	strh	r3, [r6, #0]
  p->len = p->tot_len = length;
 8007184:	812c      	strh	r4, [r5, #8]
 8007186:	816c      	strh	r4, [r5, #10]
}
 8007188:	4628      	mov	r0, r5
 800718a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800718e:	4621      	mov	r1, r4
 8007190:	e7e5      	b.n	800715e <tcp_pbuf_prealloc+0x5e>
 8007192:	bf00      	nop
 8007194:	0800c932 	.word	0x0800c932
 8007198:	0800c98a 	.word	0x0800c98a
 800719c:	0800b013 	.word	0x0800b013
 80071a0:	0800c9ae 	.word	0x0800c9ae
 80071a4:	0800c9cd 	.word	0x0800c9cd

080071a8 <tcp_create_segment>:
{
 80071a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071ac:	460e      	mov	r6, r1
 80071ae:	4617      	mov	r7, r2
 80071b0:	4699      	mov	r9, r3
 80071b2:	f89d a020 	ldrb.w	sl, [sp, #32]
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80071b6:	4680      	mov	r8, r0
 80071b8:	b928      	cbnz	r0, 80071c6 <tcp_create_segment+0x1e>
 80071ba:	4b33      	ldr	r3, [pc, #204]	; (8007288 <tcp_create_segment+0xe0>)
 80071bc:	22a3      	movs	r2, #163	; 0xa3
 80071be:	4933      	ldr	r1, [pc, #204]	; (800728c <tcp_create_segment+0xe4>)
 80071c0:	4833      	ldr	r0, [pc, #204]	; (8007290 <tcp_create_segment+0xe8>)
 80071c2:	f002 f855 	bl	8009270 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80071c6:	b92e      	cbnz	r6, 80071d4 <tcp_create_segment+0x2c>
 80071c8:	4b2f      	ldr	r3, [pc, #188]	; (8007288 <tcp_create_segment+0xe0>)
 80071ca:	22a4      	movs	r2, #164	; 0xa4
 80071cc:	4931      	ldr	r1, [pc, #196]	; (8007294 <tcp_create_segment+0xec>)
 80071ce:	4830      	ldr	r0, [pc, #192]	; (8007290 <tcp_create_segment+0xe8>)
 80071d0:	f002 f84e 	bl	8009270 <iprintf>
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80071d4:	f01a 0f01 	tst.w	sl, #1
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80071d8:	f04f 0003 	mov.w	r0, #3
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80071dc:	bf14      	ite	ne
 80071de:	2504      	movne	r5, #4
 80071e0:	2500      	moveq	r5, #0
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80071e2:	f7fc ff13 	bl	800400c <memp_malloc>
 80071e6:	4604      	mov	r4, r0
 80071e8:	b928      	cbnz	r0, 80071f6 <tcp_create_segment+0x4e>
    pbuf_free(p);
 80071ea:	4630      	mov	r0, r6
 80071ec:	f7fd f96c 	bl	80044c8 <pbuf_free>
}
 80071f0:	4620      	mov	r0, r4
 80071f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  seg->next = NULL;
 80071f6:	2300      	movs	r3, #0
  seg->flags = optflags;
 80071f8:	f880 a00a 	strb.w	sl, [r0, #10]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80071fc:	fa1f fa85 	uxth.w	sl, r5
  seg->p = p;
 8007200:	e880 0048 	stmia.w	r0, {r3, r6}
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8007204:	8933      	ldrh	r3, [r6, #8]
 8007206:	4553      	cmp	r3, sl
 8007208:	d205      	bcs.n	8007216 <tcp_create_segment+0x6e>
 800720a:	4b1f      	ldr	r3, [pc, #124]	; (8007288 <tcp_create_segment+0xe0>)
 800720c:	22b0      	movs	r2, #176	; 0xb0
 800720e:	4922      	ldr	r1, [pc, #136]	; (8007298 <tcp_create_segment+0xf0>)
 8007210:	481f      	ldr	r0, [pc, #124]	; (8007290 <tcp_create_segment+0xe8>)
 8007212:	f002 f82d 	bl	8009270 <iprintf>
  seg->len = p->tot_len - optlen;
 8007216:	8933      	ldrh	r3, [r6, #8]
  if (pbuf_add_header(p, TCP_HLEN)) {
 8007218:	4630      	mov	r0, r6
 800721a:	2114      	movs	r1, #20
  seg->len = p->tot_len - optlen;
 800721c:	eba3 030a 	sub.w	r3, r3, sl
 8007220:	8123      	strh	r3, [r4, #8]
  if (pbuf_add_header(p, TCP_HLEN)) {
 8007222:	f7fd f91a 	bl	800445a <pbuf_add_header>
 8007226:	4606      	mov	r6, r0
 8007228:	b120      	cbz	r0, 8007234 <tcp_create_segment+0x8c>
    tcp_seg_free(seg);
 800722a:	4620      	mov	r0, r4
    return NULL;
 800722c:	2400      	movs	r4, #0
    tcp_seg_free(seg);
 800722e:	f7fd fd79 	bl	8004d24 <tcp_seg_free>
    return NULL;
 8007232:	e7dd      	b.n	80071f0 <tcp_create_segment+0x48>
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8007234:	6863      	ldr	r3, [r4, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8007236:	08ad      	lsrs	r5, r5, #2
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8007238:	f8b8 0016 	ldrh.w	r0, [r8, #22]
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800723c:	f8d3 a004 	ldr.w	sl, [r3, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8007240:	3505      	adds	r5, #5
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8007242:	f8c4 a00c 	str.w	sl, [r4, #12]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8007246:	ea47 3505 	orr.w	r5, r7, r5, lsl #12
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800724a:	f7fb fa39 	bl	80026c0 <lwip_htons>
 800724e:	f8aa 0000 	strh.w	r0, [sl]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8007252:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 8007256:	f8b8 0018 	ldrh.w	r0, [r8, #24]
 800725a:	f7fb fa31 	bl	80026c0 <lwip_htons>
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800725e:	f8d4 800c 	ldr.w	r8, [r4, #12]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8007262:	f8aa 0002 	strh.w	r0, [sl, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8007266:	4648      	mov	r0, r9
 8007268:	f7fb fa2d 	bl	80026c6 <lwip_htonl>
 800726c:	f8c8 0004 	str.w	r0, [r8, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8007270:	b2a8      	uxth	r0, r5
 8007272:	f8d4 800c 	ldr.w	r8, [r4, #12]
 8007276:	f7fb fa23 	bl	80026c0 <lwip_htons>
  seg->tcphdr->urgp = 0;
 800727a:	68e3      	ldr	r3, [r4, #12]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800727c:	f8a8 000c 	strh.w	r0, [r8, #12]
  seg->tcphdr->urgp = 0;
 8007280:	749e      	strb	r6, [r3, #18]
 8007282:	74de      	strb	r6, [r3, #19]
  return seg;
 8007284:	e7b4      	b.n	80071f0 <tcp_create_segment+0x48>
 8007286:	bf00      	nop
 8007288:	0800c932 	.word	0x0800c932
 800728c:	0800c6a0 	.word	0x0800c6a0
 8007290:	0800b013 	.word	0x0800b013
 8007294:	0800c6c0 	.word	0x0800c6c0
 8007298:	0800c6e1 	.word	0x0800c6e1

0800729c <tcp_output_alloc_header_common.constprop.3>:
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800729c:	3114      	adds	r1, #20
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 800729e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80072a2:	b289      	uxth	r1, r1
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 80072a4:	4606      	mov	r6, r0
 80072a6:	4617      	mov	r7, r2
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80072a8:	2022      	movs	r0, #34	; 0x22
 80072aa:	f44f 7220 	mov.w	r2, #640	; 0x280
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 80072ae:	4698      	mov	r8, r3
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80072b0:	f7fd f96c 	bl	800458c <pbuf_alloc>
  if (p != NULL) {
 80072b4:	4605      	mov	r5, r0
 80072b6:	b348      	cbz	r0, 800730c <tcp_output_alloc_header_common.constprop.3+0x70>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80072b8:	8943      	ldrh	r3, [r0, #10]
 80072ba:	2b13      	cmp	r3, #19
 80072bc:	dc06      	bgt.n	80072cc <tcp_output_alloc_header_common.constprop.3+0x30>
 80072be:	4b15      	ldr	r3, [pc, #84]	; (8007314 <tcp_output_alloc_header_common.constprop.3+0x78>)
 80072c0:	f240 7224 	movw	r2, #1828	; 0x724
 80072c4:	4914      	ldr	r1, [pc, #80]	; (8007318 <tcp_output_alloc_header_common.constprop.3+0x7c>)
 80072c6:	4815      	ldr	r0, [pc, #84]	; (800731c <tcp_output_alloc_header_common.constprop.3+0x80>)
 80072c8:	f001 ffd2 	bl	8009270 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80072cc:	686c      	ldr	r4, [r5, #4]
    tcphdr->src = lwip_htons(src_port);
 80072ce:	4640      	mov	r0, r8
 80072d0:	f7fb f9f6 	bl	80026c0 <lwip_htons>
 80072d4:	8020      	strh	r0, [r4, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80072d6:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 80072da:	f7fb f9f1 	bl	80026c0 <lwip_htons>
    tcphdr->seqno = seqno_be;
 80072de:	6067      	str	r7, [r4, #4]
    tcphdr->dest = lwip_htons(dst_port);
 80072e0:	8060      	strh	r0, [r4, #2]
    tcphdr->ackno = lwip_htonl(ackno);
 80072e2:	4630      	mov	r0, r6
 80072e4:	f7fb f9ef 	bl	80026c6 <lwip_htonl>
 80072e8:	60a0      	str	r0, [r4, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80072ea:	f89d 001c 	ldrb.w	r0, [sp, #28]
 80072ee:	f440 40a0 	orr.w	r0, r0, #20480	; 0x5000
 80072f2:	f7fb f9e5 	bl	80026c0 <lwip_htons>
 80072f6:	81a0      	strh	r0, [r4, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80072f8:	f8bd 0020 	ldrh.w	r0, [sp, #32]
 80072fc:	f7fb f9e0 	bl	80026c0 <lwip_htons>
    tcphdr->chksum = 0;
 8007300:	2300      	movs	r3, #0
    tcphdr->wnd = lwip_htons(wnd);
 8007302:	81e0      	strh	r0, [r4, #14]
    tcphdr->chksum = 0;
 8007304:	7423      	strb	r3, [r4, #16]
 8007306:	7463      	strb	r3, [r4, #17]
    tcphdr->urgp = 0;
 8007308:	74a3      	strb	r3, [r4, #18]
 800730a:	74e3      	strb	r3, [r4, #19]
  }
  return p;
}
 800730c:	4628      	mov	r0, r5
 800730e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007312:	bf00      	nop
 8007314:	0800c932 	.word	0x0800c932
 8007318:	0800c8b5 	.word	0x0800c8b5
 800731c:	0800b013 	.word	0x0800b013

08007320 <tcp_output_alloc_header.constprop.2>:
 * @param datalen length of tcp data to reserve in pbuf
 * @param seqno_be seqno in network byte order (big-endian)
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 8007320:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8007322:	460d      	mov	r5, r1
 8007324:	4616      	mov	r6, r2
                        u32_t seqno_be /* already in network byte order */)
{
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8007326:	4604      	mov	r4, r0
 8007328:	b930      	cbnz	r0, 8007338 <tcp_output_alloc_header.constprop.2+0x18>
 800732a:	4b0d      	ldr	r3, [pc, #52]	; (8007360 <tcp_output_alloc_header.constprop.2+0x40>)
 800732c:	f240 7242 	movw	r2, #1858	; 0x742
 8007330:	490c      	ldr	r1, [pc, #48]	; (8007364 <tcp_output_alloc_header.constprop.2+0x44>)
 8007332:	480d      	ldr	r0, [pc, #52]	; (8007368 <tcp_output_alloc_header.constprop.2+0x48>)
 8007334:	f001 ff9c 	bl	8009270 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8007338:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800733a:	4629      	mov	r1, r5
 800733c:	8ae3      	ldrh	r3, [r4, #22]
 800733e:	9202      	str	r2, [sp, #8]
 8007340:	2210      	movs	r2, #16
 8007342:	9201      	str	r2, [sp, #4]
 8007344:	8b22      	ldrh	r2, [r4, #24]
 8007346:	9200      	str	r2, [sp, #0]
 8007348:	4632      	mov	r2, r6
 800734a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800734c:	f7ff ffa6 	bl	800729c <tcp_output_alloc_header_common.constprop.3>
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8007350:	b118      	cbz	r0, 800735a <tcp_output_alloc_header.constprop.2+0x3a>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8007352:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8007354:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007356:	4413      	add	r3, r2
 8007358:	62e3      	str	r3, [r4, #44]	; 0x2c
  }
  return p;
}
 800735a:	b004      	add	sp, #16
 800735c:	bd70      	pop	{r4, r5, r6, pc}
 800735e:	bf00      	nop
 8007360:	0800c932 	.word	0x0800c932
 8007364:	0800c890 	.word	0x0800c890
 8007368:	0800b013 	.word	0x0800b013

0800736c <tcp_output_fill_options.isra.0.constprop.4>:
{
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800736c:	b930      	cbnz	r0, 800737c <tcp_output_fill_options.isra.0.constprop.4+0x10>
 800736e:	4b04      	ldr	r3, [pc, #16]	; (8007380 <tcp_output_fill_options.isra.0.constprop.4+0x14>)
 8007370:	f240 7256 	movw	r2, #1878	; 0x756
 8007374:	4903      	ldr	r1, [pc, #12]	; (8007384 <tcp_output_fill_options.isra.0.constprop.4+0x18>)
 8007376:	4804      	ldr	r0, [pc, #16]	; (8007388 <tcp_output_fill_options.isra.0.constprop.4+0x1c>)
 8007378:	f001 bf7a 	b.w	8009270 <iprintf>
 800737c:	4770      	bx	lr
 800737e:	bf00      	nop
 8007380:	0800c932 	.word	0x0800c932
 8007384:	0800c90c 	.word	0x0800c90c
 8007388:	0800b013 	.word	0x0800b013

0800738c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800738c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800738e:	4604      	mov	r4, r0
 8007390:	b085      	sub	sp, #20
 8007392:	4617      	mov	r7, r2
 8007394:	461e      	mov	r6, r3
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8007396:	460d      	mov	r5, r1
 8007398:	b931      	cbnz	r1, 80073a8 <tcp_output_control_segment+0x1c>
 800739a:	4b15      	ldr	r3, [pc, #84]	; (80073f0 <tcp_output_control_segment+0x64>)
 800739c:	f240 7287 	movw	r2, #1927	; 0x787
 80073a0:	4914      	ldr	r1, [pc, #80]	; (80073f4 <tcp_output_control_segment+0x68>)
 80073a2:	4815      	ldr	r0, [pc, #84]	; (80073f8 <tcp_output_control_segment+0x6c>)
 80073a4:	f001 ff64 	bl	8009270 <iprintf>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80073a8:	b164      	cbz	r4, 80073c4 <tcp_output_control_segment+0x38>
 80073aa:	7a20      	ldrb	r0, [r4, #8]
 80073ac:	b150      	cbz	r0, 80073c4 <tcp_output_control_segment+0x38>
    return netif_get_by_index(pcb->netif_idx);
 80073ae:	f7fc ffc1 	bl	8004334 <netif_get_by_index>

  netif = tcp_route(pcb, src, dst);
  if (netif == NULL) {
 80073b2:	b968      	cbnz	r0, 80073d0 <tcp_output_control_segment+0x44>
    err = ERR_RTE;
 80073b4:	f06f 0403 	mvn.w	r4, #3
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80073b8:	4628      	mov	r0, r5
 80073ba:	f7fd f885 	bl	80044c8 <pbuf_free>
  return err;
}
 80073be:	4620      	mov	r0, r4
 80073c0:	b005      	add	sp, #20
 80073c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return ip_route(src, dst);
 80073c4:	4630      	mov	r0, r6
 80073c6:	f7fb fe67 	bl	8003098 <ip4_route>
  if (netif == NULL) {
 80073ca:	2800      	cmp	r0, #0
 80073cc:	d0f2      	beq.n	80073b4 <tcp_output_control_segment+0x28>
    if (pcb != NULL) {
 80073ce:	b164      	cbz	r4, 80073ea <tcp_output_control_segment+0x5e>
      ttl = pcb->ttl;
 80073d0:	7ae3      	ldrb	r3, [r4, #11]
      tos = pcb->tos;
 80073d2:	7aa4      	ldrb	r4, [r4, #10]
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80073d4:	2206      	movs	r2, #6
 80073d6:	9002      	str	r0, [sp, #8]
 80073d8:	9400      	str	r4, [sp, #0]
 80073da:	4639      	mov	r1, r7
 80073dc:	9201      	str	r2, [sp, #4]
 80073de:	4628      	mov	r0, r5
 80073e0:	4632      	mov	r2, r6
 80073e2:	f7fb ffb5 	bl	8003350 <ip4_output_if>
 80073e6:	4604      	mov	r4, r0
 80073e8:	e7e6      	b.n	80073b8 <tcp_output_control_segment+0x2c>
      ttl = TCP_TTL;
 80073ea:	23ff      	movs	r3, #255	; 0xff
 80073ec:	e7f2      	b.n	80073d4 <tcp_output_control_segment+0x48>
 80073ee:	bf00      	nop
 80073f0:	0800c932 	.word	0x0800c932
 80073f4:	0800c8e3 	.word	0x0800c8e3
 80073f8:	0800b013 	.word	0x0800b013

080073fc <tcp_write>:
{
 80073fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007400:	b091      	sub	sp, #68	; 0x44
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8007402:	4605      	mov	r5, r0
{
 8007404:	930a      	str	r3, [sp, #40]	; 0x28
  u16_t oversize = 0;
 8007406:	2300      	movs	r3, #0
{
 8007408:	9108      	str	r1, [sp, #32]
 800740a:	9205      	str	r2, [sp, #20]
  u16_t oversize = 0;
 800740c:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8007410:	b958      	cbnz	r0, 800742a <tcp_write+0x2e>
 8007412:	4bab      	ldr	r3, [pc, #684]	; (80076c0 <tcp_write+0x2c4>)
 8007414:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8007418:	49aa      	ldr	r1, [pc, #680]	; (80076c4 <tcp_write+0x2c8>)
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800741a:	48ab      	ldr	r0, [pc, #684]	; (80076c8 <tcp_write+0x2cc>)
 800741c:	f001 ff28 	bl	8009270 <iprintf>
 8007420:	f06f 000f 	mvn.w	r0, #15
}
 8007424:	b011      	add	sp, #68	; 0x44
 8007426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800742a:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800742e:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 8007430:	085b      	lsrs	r3, r3, #1
 8007432:	4293      	cmp	r3, r2
 8007434:	bf28      	it	cs
 8007436:	4613      	movcs	r3, r2
  mss_local = mss_local ? mss_local : pcb->mss;
 8007438:	2b00      	cmp	r3, #0
 800743a:	bf08      	it	eq
 800743c:	4613      	moveq	r3, r2
 800743e:	9307      	str	r3, [sp, #28]
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8007440:	9b08      	ldr	r3, [sp, #32]
 8007442:	b923      	cbnz	r3, 800744e <tcp_write+0x52>
 8007444:	4b9e      	ldr	r3, [pc, #632]	; (80076c0 <tcp_write+0x2c4>)
 8007446:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 800744a:	49a0      	ldr	r1, [pc, #640]	; (80076cc <tcp_write+0x2d0>)
 800744c:	e7e5      	b.n	800741a <tcp_write+0x1e>
  if ((pcb->state != ESTABLISHED) &&
 800744e:	7d03      	ldrb	r3, [r0, #20]
 8007450:	2b07      	cmp	r3, #7
 8007452:	d003      	beq.n	800745c <tcp_write+0x60>
      (pcb->state != CLOSE_WAIT) &&
 8007454:	3b02      	subs	r3, #2
 8007456:	2b02      	cmp	r3, #2
 8007458:	f200 8258 	bhi.w	800790c <tcp_write+0x510>
  } else if (len == 0) {
 800745c:	9b05      	ldr	r3, [sp, #20]
 800745e:	b1db      	cbz	r3, 8007498 <tcp_write+0x9c>
  if (len > pcb->snd_buf) {
 8007460:	f8b5 3064 	ldrh.w	r3, [r5, #100]	; 0x64
 8007464:	9a05      	ldr	r2, [sp, #20]
 8007466:	4293      	cmp	r3, r2
 8007468:	d206      	bcs.n	8007478 <tcp_write+0x7c>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800746a:	8b6b      	ldrh	r3, [r5, #26]
 800746c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007470:	836b      	strh	r3, [r5, #26]
  return ERR_MEM;
 8007472:	f04f 30ff 	mov.w	r0, #4294967295
 8007476:	e7d5      	b.n	8007424 <tcp_write+0x28>
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8007478:	f8b5 2066 	ldrh.w	r2, [r5, #102]	; 0x66
 800747c:	2a08      	cmp	r2, #8
 800747e:	d8f4      	bhi.n	800746a <tcp_write+0x6e>
 8007480:	6f2b      	ldr	r3, [r5, #112]	; 0x70
  if (pcb->snd_queuelen != 0) {
 8007482:	b30a      	cbz	r2, 80074c8 <tcp_write+0xcc>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8007484:	b943      	cbnz	r3, 8007498 <tcp_write+0x9c>
 8007486:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 8007488:	b933      	cbnz	r3, 8007498 <tcp_write+0x9c>
 800748a:	4b8d      	ldr	r3, [pc, #564]	; (80076c0 <tcp_write+0x2c4>)
 800748c:	f44f 72ab 	mov.w	r2, #342	; 0x156
 8007490:	498f      	ldr	r1, [pc, #572]	; (80076d0 <tcp_write+0x2d4>)
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8007492:	488d      	ldr	r0, [pc, #564]	; (80076c8 <tcp_write+0x2cc>)
 8007494:	f001 feec 	bl	8009270 <iprintf>
  queuelen = pcb->snd_queuelen;
 8007498:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
  if (pcb->unsent != NULL) {
 800749c:	6eec      	ldr	r4, [r5, #108]	; 0x6c
  queuelen = pcb->snd_queuelen;
 800749e:	9306      	str	r3, [sp, #24]
  if (pcb->unsent != NULL) {
 80074a0:	b9dc      	cbnz	r4, 80074da <tcp_write+0xde>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 80074a2:	f8b5 8068 	ldrh.w	r8, [r5, #104]	; 0x68
 80074a6:	f1b8 0f00 	cmp.w	r8, #0
 80074aa:	f000 8104 	beq.w	80076b6 <tcp_write+0x2ba>
 80074ae:	4b84      	ldr	r3, [pc, #528]	; (80076c0 <tcp_write+0x2c4>)
 80074b0:	f240 224b 	movw	r2, #587	; 0x24b
 80074b4:	4987      	ldr	r1, [pc, #540]	; (80076d4 <tcp_write+0x2d8>)
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 80074b6:	4627      	mov	r7, r4
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 80074b8:	4883      	ldr	r0, [pc, #524]	; (80076c8 <tcp_write+0x2cc>)
  u16_t extendlen = 0;
 80074ba:	46a2      	mov	sl, r4
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 80074bc:	f001 fed8 	bl	8009270 <iprintf>
  u16_t oversize_used = 0;
 80074c0:	4626      	mov	r6, r4
  u16_t pos = 0; /* position in 'arg' data */
 80074c2:	46a0      	mov	r8, r4
  struct pbuf *concat_p = NULL;
 80074c4:	46a1      	mov	r9, r4
 80074c6:	e094      	b.n	80075f2 <tcp_write+0x1f6>
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 80074c8:	b913      	cbnz	r3, 80074d0 <tcp_write+0xd4>
 80074ca:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d0e3      	beq.n	8007498 <tcp_write+0x9c>
 80074d0:	4b7b      	ldr	r3, [pc, #492]	; (80076c0 <tcp_write+0x2c4>)
 80074d2:	f240 1259 	movw	r2, #345	; 0x159
 80074d6:	4980      	ldr	r1, [pc, #512]	; (80076d8 <tcp_write+0x2dc>)
 80074d8:	e7db      	b.n	8007492 <tcp_write+0x96>
  if (pcb->unsent != NULL) {
 80074da:	4627      	mov	r7, r4
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80074dc:	f8d7 b000 	ldr.w	fp, [r7]
 80074e0:	f1bb 0f00 	cmp.w	fp, #0
 80074e4:	f040 80b6 	bne.w	8007654 <tcp_write+0x258>
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 80074e8:	7abb      	ldrb	r3, [r7, #10]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 80074ea:	9a07      	ldr	r2, [sp, #28]
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 80074ec:	f013 0f01 	tst.w	r3, #1
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 80074f0:	893b      	ldrh	r3, [r7, #8]
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 80074f2:	bf14      	ite	ne
 80074f4:	2404      	movne	r4, #4
 80074f6:	2400      	moveq	r4, #0
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 80074f8:	4423      	add	r3, r4
 80074fa:	429a      	cmp	r2, r3
 80074fc:	da06      	bge.n	800750c <tcp_write+0x110>
 80074fe:	4b70      	ldr	r3, [pc, #448]	; (80076c0 <tcp_write+0x2c4>)
 8007500:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8007504:	4975      	ldr	r1, [pc, #468]	; (80076dc <tcp_write+0x2e0>)
 8007506:	4870      	ldr	r0, [pc, #448]	; (80076c8 <tcp_write+0x2cc>)
 8007508:	f001 feb2 	bl	8009270 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800750c:	f8b7 9008 	ldrh.w	r9, [r7, #8]
 8007510:	9b07      	ldr	r3, [sp, #28]
    oversize = pcb->unsent_oversize;
 8007512:	f8b5 6068 	ldrh.w	r6, [r5, #104]	; 0x68
    space = mss_local - (last_unsent->len + unsent_optlen);
 8007516:	eba3 0909 	sub.w	r9, r3, r9
    oversize = pcb->unsent_oversize;
 800751a:	f8ad 603e 	strh.w	r6, [sp, #62]	; 0x3e
    space = mss_local - (last_unsent->len + unsent_optlen);
 800751e:	eba9 0904 	sub.w	r9, r9, r4
 8007522:	fa1f f989 	uxth.w	r9, r9
    if (oversize > 0) {
 8007526:	2e00      	cmp	r6, #0
 8007528:	f000 8096 	beq.w	8007658 <tcp_write+0x25c>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800752c:	45b1      	cmp	r9, r6
 800752e:	d206      	bcs.n	800753e <tcp_write+0x142>
 8007530:	4b63      	ldr	r3, [pc, #396]	; (80076c0 <tcp_write+0x2c4>)
 8007532:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8007536:	496a      	ldr	r1, [pc, #424]	; (80076e0 <tcp_write+0x2e4>)
 8007538:	4863      	ldr	r0, [pc, #396]	; (80076c8 <tcp_write+0x2cc>)
 800753a:	f001 fe99 	bl	8009270 <iprintf>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800753e:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
      space -= oversize_used;
 8007542:	463c      	mov	r4, r7
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8007544:	9a05      	ldr	r2, [sp, #20]
 8007546:	429a      	cmp	r2, r3
 8007548:	bf28      	it	cs
 800754a:	461a      	movcs	r2, r3
 800754c:	454a      	cmp	r2, r9
 800754e:	4616      	mov	r6, r2
 8007550:	bfa8      	it	ge
 8007552:	464e      	movge	r6, r9
      space -= oversize_used;
 8007554:	eba9 0906 	sub.w	r9, r9, r6
      oversize -= oversize_used;
 8007558:	1b9b      	subs	r3, r3, r6
      space -= oversize_used;
 800755a:	fa1f f989 	uxth.w	r9, r9
      oversize -= oversize_used;
 800755e:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8007562:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8007566:	b153      	cbz	r3, 800757e <tcp_write+0x182>
 8007568:	9b05      	ldr	r3, [sp, #20]
 800756a:	429e      	cmp	r6, r3
 800756c:	f000 81d1 	beq.w	8007912 <tcp_write+0x516>
 8007570:	4b53      	ldr	r3, [pc, #332]	; (80076c0 <tcp_write+0x2c4>)
 8007572:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007576:	495b      	ldr	r1, [pc, #364]	; (80076e4 <tcp_write+0x2e8>)
 8007578:	4853      	ldr	r0, [pc, #332]	; (80076c8 <tcp_write+0x2cc>)
 800757a:	f001 fe79 	bl	8009270 <iprintf>
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800757e:	9b05      	ldr	r3, [sp, #20]
 8007580:	429e      	cmp	r6, r3
 8007582:	f080 81c6 	bcs.w	8007912 <tcp_write+0x516>
 8007586:	f1b9 0f00 	cmp.w	r9, #0
 800758a:	f000 8090 	beq.w	80076ae <tcp_write+0x2b2>
 800758e:	f8b7 a008 	ldrh.w	sl, [r7, #8]
 8007592:	f1ba 0f00 	cmp.w	sl, #0
 8007596:	f000 808b 	beq.w	80076b0 <tcp_write+0x2b4>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800759a:	1b9c      	subs	r4, r3, r6
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800759c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
      u16_t seglen = LWIP_MIN(space, len - pos);
 800759e:	454c      	cmp	r4, r9
 80075a0:	bfa8      	it	ge
 80075a2:	464c      	movge	r4, r9
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 80075a4:	07db      	lsls	r3, r3, #31
      u16_t seglen = LWIP_MIN(space, len - pos);
 80075a6:	fa1f f884 	uxth.w	r8, r4
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 80075aa:	d557      	bpl.n	800765c <tcp_write+0x260>
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 80075ac:	2301      	movs	r3, #1
 80075ae:	464a      	mov	r2, r9
 80075b0:	9500      	str	r5, [sp, #0]
 80075b2:	4641      	mov	r1, r8
 80075b4:	9302      	str	r3, [sp, #8]
 80075b6:	2000      	movs	r0, #0
 80075b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075ba:	9301      	str	r3, [sp, #4]
 80075bc:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 80075c0:	f7ff fd9e 	bl	8007100 <tcp_pbuf_prealloc>
 80075c4:	4681      	mov	r9, r0
 80075c6:	2800      	cmp	r0, #0
 80075c8:	f000 819d 	beq.w	8007906 <tcp_write+0x50a>
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 80075cc:	9b08      	ldr	r3, [sp, #32]
 80075ce:	4642      	mov	r2, r8
 80075d0:	6840      	ldr	r0, [r0, #4]
 80075d2:	1999      	adds	r1, r3, r6
 80075d4:	f001 fe39 	bl	800924a <memcpy>
        queuelen += pbuf_clen(concat_p);
 80075d8:	4648      	mov	r0, r9
          queuelen += pbuf_clen(concat_p);
 80075da:	f7fd f8b7 	bl	800474c <pbuf_clen>
 80075de:	9b06      	ldr	r3, [sp, #24]
  u16_t extendlen = 0;
 80075e0:	f04f 0a00 	mov.w	sl, #0
          queuelen += pbuf_clen(concat_p);
 80075e4:	4403      	add	r3, r0
 80075e6:	b29b      	uxth	r3, r3
 80075e8:	9306      	str	r3, [sp, #24]
      pos += seglen;
 80075ea:	44b0      	add	r8, r6
 80075ec:	463c      	mov	r4, r7
 80075ee:	fa1f f888 	uxth.w	r8, r8
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 80075f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075f4:	f04f 0b00 	mov.w	fp, #0
 80075f8:	f003 0301 	and.w	r3, r3, #1
 80075fc:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8007600:	930c      	str	r3, [sp, #48]	; 0x30
  while (pos < len) {
 8007602:	9b05      	ldr	r3, [sp, #20]
 8007604:	4598      	cmp	r8, r3
 8007606:	d373      	bcc.n	80076f0 <tcp_write+0x2f4>
  if (oversize_used > 0) {
 8007608:	b146      	cbz	r6, 800761c <tcp_write+0x220>
    for (p = last_unsent->p; p; p = p->next) {
 800760a:	f8d7 8004 	ldr.w	r8, [r7, #4]
 800760e:	f1b8 0f00 	cmp.w	r8, #0
 8007612:	f040 8114 	bne.w	800783e <tcp_write+0x442>
    last_unsent->len += oversize_used;
 8007616:	893b      	ldrh	r3, [r7, #8]
 8007618:	441e      	add	r6, r3
 800761a:	813e      	strh	r6, [r7, #8]
  pcb->unsent_oversize = oversize;
 800761c:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8007620:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
  if (concat_p != NULL) {
 8007624:	f1b9 0f00 	cmp.w	r9, #0
 8007628:	f000 8122 	beq.w	8007870 <tcp_write+0x474>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800762c:	b937      	cbnz	r7, 800763c <tcp_write+0x240>
 800762e:	4b24      	ldr	r3, [pc, #144]	; (80076c0 <tcp_write+0x2c4>)
 8007630:	f240 22e1 	movw	r2, #737	; 0x2e1
 8007634:	492c      	ldr	r1, [pc, #176]	; (80076e8 <tcp_write+0x2ec>)
 8007636:	4824      	ldr	r0, [pc, #144]	; (80076c8 <tcp_write+0x2cc>)
 8007638:	f001 fe1a 	bl	8009270 <iprintf>
    pbuf_cat(last_unsent->p, concat_p);
 800763c:	4649      	mov	r1, r9
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f7fd f8a0 	bl	8004784 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8007644:	893b      	ldrh	r3, [r7, #8]
 8007646:	f8b9 2008 	ldrh.w	r2, [r9, #8]
 800764a:	4413      	add	r3, r2
 800764c:	813b      	strh	r3, [r7, #8]
    last_unsent->next = queue;
 800764e:	f8c7 b000 	str.w	fp, [r7]
 8007652:	e12f      	b.n	80078b4 <tcp_write+0x4b8>
 8007654:	465f      	mov	r7, fp
 8007656:	e741      	b.n	80074dc <tcp_write+0xe0>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8007658:	4634      	mov	r4, r6
 800765a:	e782      	b.n	8007562 <tcp_write+0x166>
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f8d3 9000 	ldr.w	r9, [r3]
 8007662:	f1b9 0f00 	cmp.w	r9, #0
 8007666:	d113      	bne.n	8007690 <tcp_write+0x294>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8007668:	7b1a      	ldrb	r2, [r3, #12]
 800766a:	f012 0fc0 	tst.w	r2, #192	; 0xc0
 800766e:	d111      	bne.n	8007694 <tcp_write+0x298>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8007670:	895a      	ldrh	r2, [r3, #10]
 8007672:	685b      	ldr	r3, [r3, #4]
 8007674:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8007676:	9a08      	ldr	r2, [sp, #32]
 8007678:	429a      	cmp	r2, r3
 800767a:	d10b      	bne.n	8007694 <tcp_write+0x298>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800767c:	b136      	cbz	r6, 800768c <tcp_write+0x290>
 800767e:	4b10      	ldr	r3, [pc, #64]	; (80076c0 <tcp_write+0x2c4>)
 8007680:	f240 2231 	movw	r2, #561	; 0x231
 8007684:	4919      	ldr	r1, [pc, #100]	; (80076ec <tcp_write+0x2f0>)
 8007686:	4810      	ldr	r0, [pc, #64]	; (80076c8 <tcp_write+0x2cc>)
 8007688:	f001 fdf2 	bl	8009270 <iprintf>
          extendlen = seglen;
 800768c:	46c2      	mov	sl, r8
 800768e:	e7ac      	b.n	80075ea <tcp_write+0x1ee>
 8007690:	464b      	mov	r3, r9
 8007692:	e7e4      	b.n	800765e <tcp_write+0x262>
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8007694:	2201      	movs	r2, #1
 8007696:	4641      	mov	r1, r8
 8007698:	2000      	movs	r0, #0
 800769a:	f7fc ff77 	bl	800458c <pbuf_alloc>
 800769e:	4681      	mov	r9, r0
 80076a0:	2800      	cmp	r0, #0
 80076a2:	f000 8130 	beq.w	8007906 <tcp_write+0x50a>
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 80076a6:	9b08      	ldr	r3, [sp, #32]
 80076a8:	4433      	add	r3, r6
 80076aa:	6043      	str	r3, [r0, #4]
 80076ac:	e795      	b.n	80075da <tcp_write+0x1de>
  u16_t extendlen = 0;
 80076ae:	46ca      	mov	sl, r9
 80076b0:	46b0      	mov	r8, r6
  struct pbuf *concat_p = NULL;
 80076b2:	46d1      	mov	r9, sl
 80076b4:	e79d      	b.n	80075f2 <tcp_write+0x1f6>
  u16_t extendlen = 0;
 80076b6:	46c2      	mov	sl, r8
  u16_t oversize_used = 0;
 80076b8:	4646      	mov	r6, r8
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 80076ba:	4647      	mov	r7, r8
  struct pbuf *concat_p = NULL;
 80076bc:	46c1      	mov	r9, r8
 80076be:	e798      	b.n	80075f2 <tcp_write+0x1f6>
 80076c0:	0800c932 	.word	0x0800c932
 80076c4:	0800cb47 	.word	0x0800cb47
 80076c8:	0800b013 	.word	0x0800b013
 80076cc:	0800cb5e 	.word	0x0800cb5e
 80076d0:	0800cb8f 	.word	0x0800cb8f
 80076d4:	0800cc79 	.word	0x0800cc79
 80076d8:	0800cbc9 	.word	0x0800cbc9
 80076dc:	0800cbfb 	.word	0x0800cbfb
 80076e0:	0800cc12 	.word	0x0800cc12
 80076e4:	0800cc32 	.word	0x0800cc32
 80076e8:	0800cd05 	.word	0x0800cd05
 80076ec:	0800cc50 	.word	0x0800cc50
    u16_t left = len - pos;
 80076f0:	9b05      	ldr	r3, [sp, #20]
    u16_t seglen = LWIP_MIN(left, max_len);
 80076f2:	9a07      	ldr	r2, [sp, #28]
    u16_t left = len - pos;
 80076f4:	eba3 0308 	sub.w	r3, r3, r8
    u16_t seglen = LWIP_MIN(left, max_len);
 80076f8:	b29b      	uxth	r3, r3
 80076fa:	4293      	cmp	r3, r2
 80076fc:	bf28      	it	cs
 80076fe:	4613      	movcs	r3, r2
 8007700:	b29b      	uxth	r3, r3
 8007702:	9309      	str	r3, [sp, #36]	; 0x24
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8007704:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007706:	b363      	cbz	r3, 8007762 <tcp_write+0x366>
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8007708:	fabb f38b 	clz	r3, fp
 800770c:	9500      	str	r5, [sp, #0]
 800770e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007710:	2036      	movs	r0, #54	; 0x36
 8007712:	095b      	lsrs	r3, r3, #5
 8007714:	9302      	str	r3, [sp, #8]
 8007716:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007718:	9301      	str	r3, [sp, #4]
 800771a:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 800771e:	f7ff fcef 	bl	8007100 <tcp_pbuf_prealloc>
 8007722:	4604      	mov	r4, r0
 8007724:	2800      	cmp	r0, #0
 8007726:	d03c      	beq.n	80077a2 <tcp_write+0x3a6>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8007728:	8943      	ldrh	r3, [r0, #10]
 800772a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800772c:	4293      	cmp	r3, r2
 800772e:	d206      	bcs.n	800773e <tcp_write+0x342>
 8007730:	4b7b      	ldr	r3, [pc, #492]	; (8007920 <tcp_write+0x524>)
 8007732:	f240 2267 	movw	r2, #615	; 0x267
 8007736:	497b      	ldr	r1, [pc, #492]	; (8007924 <tcp_write+0x528>)
 8007738:	487b      	ldr	r0, [pc, #492]	; (8007928 <tcp_write+0x52c>)
 800773a:	f001 fd99 	bl	8009270 <iprintf>
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800773e:	9b08      	ldr	r3, [sp, #32]
 8007740:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007742:	eb03 0108 	add.w	r1, r3, r8
 8007746:	6860      	ldr	r0, [r4, #4]
 8007748:	f001 fd7f 	bl	800924a <memcpy>
    queuelen += pbuf_clen(p);
 800774c:	4620      	mov	r0, r4
 800774e:	f7fc fffd 	bl	800474c <pbuf_clen>
 8007752:	9b06      	ldr	r3, [sp, #24]
 8007754:	4403      	add	r3, r0
 8007756:	b29b      	uxth	r3, r3
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8007758:	2b09      	cmp	r3, #9
    queuelen += pbuf_clen(p);
 800775a:	9306      	str	r3, [sp, #24]
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800775c:	d94a      	bls.n	80077f4 <tcp_write+0x3f8>
      pbuf_free(p);
 800775e:	4620      	mov	r0, r4
 8007760:	e01d      	b.n	800779e <tcp_write+0x3a2>
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8007762:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8007766:	b133      	cbz	r3, 8007776 <tcp_write+0x37a>
 8007768:	4b6d      	ldr	r3, [pc, #436]	; (8007920 <tcp_write+0x524>)
 800776a:	f240 2271 	movw	r2, #625	; 0x271
 800776e:	496f      	ldr	r1, [pc, #444]	; (800792c <tcp_write+0x530>)
 8007770:	486d      	ldr	r0, [pc, #436]	; (8007928 <tcp_write+0x52c>)
 8007772:	f001 fd7d 	bl	8009270 <iprintf>
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8007776:	2201      	movs	r2, #1
 8007778:	9909      	ldr	r1, [sp, #36]	; 0x24
 800777a:	2036      	movs	r0, #54	; 0x36
 800777c:	f7fc ff06 	bl	800458c <pbuf_alloc>
 8007780:	b178      	cbz	r0, 80077a2 <tcp_write+0x3a6>
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8007782:	9a08      	ldr	r2, [sp, #32]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8007784:	2100      	movs	r1, #0
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8007786:	900d      	str	r0, [sp, #52]	; 0x34
 8007788:	4442      	add	r2, r8
 800778a:	6042      	str	r2, [r0, #4]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800778c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8007790:	2036      	movs	r0, #54	; 0x36
 8007792:	f7fc fefb 	bl	800458c <pbuf_alloc>
 8007796:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007798:	4604      	mov	r4, r0
 800779a:	bb38      	cbnz	r0, 80077ec <tcp_write+0x3f0>
        pbuf_free(p2);
 800779c:	4618      	mov	r0, r3
      pbuf_free(p);
 800779e:	f7fc fe93 	bl	80044c8 <pbuf_free>
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80077a2:	8b6b      	ldrh	r3, [r5, #26]
 80077a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077a8:	836b      	strh	r3, [r5, #26]
  if (concat_p != NULL) {
 80077aa:	f1b9 0f00 	cmp.w	r9, #0
 80077ae:	d002      	beq.n	80077b6 <tcp_write+0x3ba>
    pbuf_free(concat_p);
 80077b0:	4648      	mov	r0, r9
 80077b2:	f7fc fe89 	bl	80044c8 <pbuf_free>
  if (queue != NULL) {
 80077b6:	f1bb 0f00 	cmp.w	fp, #0
 80077ba:	d002      	beq.n	80077c2 <tcp_write+0x3c6>
    tcp_segs_free(queue);
 80077bc:	4658      	mov	r0, fp
 80077be:	f7fd fabf 	bl	8004d40 <tcp_segs_free>
  if (pcb->snd_queuelen != 0) {
 80077c2:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	f43f ae53 	beq.w	8007472 <tcp_write+0x76>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 80077cc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	f47f ae4f 	bne.w	8007472 <tcp_write+0x76>
 80077d4:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	f47f ae4b 	bne.w	8007472 <tcp_write+0x76>
 80077dc:	4b50      	ldr	r3, [pc, #320]	; (8007920 <tcp_write+0x524>)
 80077de:	f44f 724a 	mov.w	r2, #808	; 0x328
 80077e2:	4953      	ldr	r1, [pc, #332]	; (8007930 <tcp_write+0x534>)
 80077e4:	4850      	ldr	r0, [pc, #320]	; (8007928 <tcp_write+0x52c>)
 80077e6:	f001 fd43 	bl	8009270 <iprintf>
 80077ea:	e642      	b.n	8007472 <tcp_write+0x76>
      pbuf_cat(p/*header*/, p2/*data*/);
 80077ec:	4619      	mov	r1, r3
 80077ee:	f7fc ffc9 	bl	8004784 <pbuf_cat>
 80077f2:	e7ab      	b.n	800774c <tcp_write+0x350>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 80077f4:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 80077f6:	2200      	movs	r2, #0
 80077f8:	4621      	mov	r1, r4
 80077fa:	4628      	mov	r0, r5
 80077fc:	9200      	str	r2, [sp, #0]
 80077fe:	4443      	add	r3, r8
 8007800:	f7ff fcd2 	bl	80071a8 <tcp_create_segment>
 8007804:	4604      	mov	r4, r0
 8007806:	2800      	cmp	r0, #0
 8007808:	d0cb      	beq.n	80077a2 <tcp_write+0x3a6>
    if (queue == NULL) {
 800780a:	f1bb 0f00 	cmp.w	fp, #0
 800780e:	d010      	beq.n	8007832 <tcp_write+0x436>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8007810:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007812:	b933      	cbnz	r3, 8007822 <tcp_write+0x426>
 8007814:	4b42      	ldr	r3, [pc, #264]	; (8007920 <tcp_write+0x524>)
 8007816:	f240 22ab 	movw	r2, #683	; 0x2ab
 800781a:	4946      	ldr	r1, [pc, #280]	; (8007934 <tcp_write+0x538>)
 800781c:	4842      	ldr	r0, [pc, #264]	; (8007928 <tcp_write+0x52c>)
 800781e:	f001 fd27 	bl	8009270 <iprintf>
      prev_seg->next = seg;
 8007822:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007824:	601c      	str	r4, [r3, #0]
    pos += seglen;
 8007826:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007828:	940b      	str	r4, [sp, #44]	; 0x2c
 800782a:	4498      	add	r8, r3
 800782c:	fa1f f888 	uxth.w	r8, r8
 8007830:	e6e7      	b.n	8007602 <tcp_write+0x206>
 8007832:	4683      	mov	fp, r0
 8007834:	e7f7      	b.n	8007826 <tcp_write+0x42a>
  if (oversize_used > 0) {
 8007836:	f04f 0a00 	mov.w	sl, #0
 800783a:	46d1      	mov	r9, sl
 800783c:	e6e5      	b.n	800760a <tcp_write+0x20e>
      p->tot_len += oversize_used;
 800783e:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 8007842:	4433      	add	r3, r6
 8007844:	f8a8 3008 	strh.w	r3, [r8, #8]
      if (p->next == NULL) {
 8007848:	f8d8 3000 	ldr.w	r3, [r8]
 800784c:	b96b      	cbnz	r3, 800786a <tcp_write+0x46e>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800784e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007852:	4632      	mov	r2, r6
 8007854:	f8b8 000a 	ldrh.w	r0, [r8, #10]
 8007858:	9908      	ldr	r1, [sp, #32]
 800785a:	4418      	add	r0, r3
 800785c:	f001 fcf5 	bl	800924a <memcpy>
        p->len += oversize_used;
 8007860:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 8007864:	4433      	add	r3, r6
 8007866:	f8a8 300a 	strh.w	r3, [r8, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800786a:	f8d8 8000 	ldr.w	r8, [r8]
 800786e:	e6ce      	b.n	800760e <tcp_write+0x212>
  } else if (extendlen > 0) {
 8007870:	f1ba 0f00 	cmp.w	sl, #0
 8007874:	d019      	beq.n	80078aa <tcp_write+0x4ae>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8007876:	b10f      	cbz	r7, 800787c <tcp_write+0x480>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	b933      	cbnz	r3, 800788a <tcp_write+0x48e>
 800787c:	4b28      	ldr	r3, [pc, #160]	; (8007920 <tcp_write+0x524>)
 800787e:	f240 22e7 	movw	r2, #743	; 0x2e7
 8007882:	492d      	ldr	r1, [pc, #180]	; (8007938 <tcp_write+0x53c>)
 8007884:	4828      	ldr	r0, [pc, #160]	; (8007928 <tcp_write+0x52c>)
 8007886:	f001 fcf3 	bl	8009270 <iprintf>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	891a      	ldrh	r2, [r3, #8]
 800788e:	6819      	ldr	r1, [r3, #0]
      p->tot_len += extendlen;
 8007890:	4452      	add	r2, sl
 8007892:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8007894:	b939      	cbnz	r1, 80078a6 <tcp_write+0x4aa>
    p->len += extendlen;
 8007896:	895a      	ldrh	r2, [r3, #10]
 8007898:	4452      	add	r2, sl
 800789a:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800789c:	893b      	ldrh	r3, [r7, #8]
 800789e:	449a      	add	sl, r3
 80078a0:	f8a7 a008 	strh.w	sl, [r7, #8]
 80078a4:	e6d3      	b.n	800764e <tcp_write+0x252>
      p->tot_len += extendlen;
 80078a6:	460b      	mov	r3, r1
 80078a8:	e7f0      	b.n	800788c <tcp_write+0x490>
  if (last_unsent == NULL) {
 80078aa:	2f00      	cmp	r7, #0
 80078ac:	f47f aecf 	bne.w	800764e <tcp_write+0x252>
    pcb->unsent = queue;
 80078b0:	f8c5 b06c 	str.w	fp, [r5, #108]	; 0x6c
  pcb->snd_lbb += len;
 80078b4:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 80078b6:	9a05      	ldr	r2, [sp, #20]
 80078b8:	4413      	add	r3, r2
 80078ba:	65eb      	str	r3, [r5, #92]	; 0x5c
  pcb->snd_buf -= len;
 80078bc:	f8b5 3064 	ldrh.w	r3, [r5, #100]	; 0x64
 80078c0:	1a9b      	subs	r3, r3, r2
 80078c2:	f8a5 3064 	strh.w	r3, [r5, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 80078c6:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 80078ca:	f8a5 3066 	strh.w	r3, [r5, #102]	; 0x66
  if (pcb->snd_queuelen != 0) {
 80078ce:	9b06      	ldr	r3, [sp, #24]
 80078d0:	b153      	cbz	r3, 80078e8 <tcp_write+0x4ec>
    LWIP_ASSERT("tcp_write: valid queue length",
 80078d2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80078d4:	b943      	cbnz	r3, 80078e8 <tcp_write+0x4ec>
 80078d6:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 80078d8:	b933      	cbnz	r3, 80078e8 <tcp_write+0x4ec>
 80078da:	4b11      	ldr	r3, [pc, #68]	; (8007920 <tcp_write+0x524>)
 80078dc:	f240 3213 	movw	r2, #787	; 0x313
 80078e0:	4913      	ldr	r1, [pc, #76]	; (8007930 <tcp_write+0x534>)
 80078e2:	4811      	ldr	r0, [pc, #68]	; (8007928 <tcp_write+0x52c>)
 80078e4:	f001 fcc4 	bl	8009270 <iprintf>
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 80078e8:	b15c      	cbz	r4, 8007902 <tcp_write+0x506>
 80078ea:	68e4      	ldr	r4, [r4, #12]
 80078ec:	b14c      	cbz	r4, 8007902 <tcp_write+0x506>
 80078ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078f0:	f013 0602 	ands.w	r6, r3, #2
 80078f4:	d105      	bne.n	8007902 <tcp_write+0x506>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 80078f6:	89a5      	ldrh	r5, [r4, #12]
 80078f8:	2008      	movs	r0, #8
 80078fa:	f7fa fee1 	bl	80026c0 <lwip_htons>
 80078fe:	4328      	orrs	r0, r5
 8007900:	81a0      	strh	r0, [r4, #12]
  return ERR_OK;
 8007902:	2000      	movs	r0, #0
 8007904:	e58e      	b.n	8007424 <tcp_write+0x28>
      p->tot_len += extendlen;
 8007906:	f04f 0900 	mov.w	r9, #0
 800790a:	e74a      	b.n	80077a2 <tcp_write+0x3a6>
    return ERR_CONN;
 800790c:	f06f 000a 	mvn.w	r0, #10
 8007910:	e588      	b.n	8007424 <tcp_write+0x28>
  if (oversize_used > 0) {
 8007912:	2e00      	cmp	r6, #0
 8007914:	d18f      	bne.n	8007836 <tcp_write+0x43a>
  pcb->unsent_oversize = oversize;
 8007916:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800791a:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
 800791e:	e696      	b.n	800764e <tcp_write+0x252>
 8007920:	0800c932 	.word	0x0800c932
 8007924:	0800cca8 	.word	0x0800cca8
 8007928:	0800b013 	.word	0x0800b013
 800792c:	0800cce6 	.word	0x0800cce6
 8007930:	0800cd72 	.word	0x0800cd72
 8007934:	0800ccf4 	.word	0x0800ccf4
 8007938:	0800cd3d 	.word	0x0800cd3d

0800793c <tcp_split_unsent_seg>:
{
 800793c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007940:	4689      	mov	r9, r1
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8007942:	4605      	mov	r5, r0
 8007944:	b930      	cbnz	r0, 8007954 <tcp_split_unsent_seg+0x18>
 8007946:	4b5c      	ldr	r3, [pc, #368]	; (8007ab8 <tcp_split_unsent_seg+0x17c>)
 8007948:	f240 324b 	movw	r2, #843	; 0x34b
 800794c:	495b      	ldr	r1, [pc, #364]	; (8007abc <tcp_split_unsent_seg+0x180>)
 800794e:	485c      	ldr	r0, [pc, #368]	; (8007ac0 <tcp_split_unsent_seg+0x184>)
 8007950:	f001 fc8e 	bl	8009270 <iprintf>
  useg = pcb->unsent;
 8007954:	6eec      	ldr	r4, [r5, #108]	; 0x6c
  if (useg == NULL) {
 8007956:	b914      	cbnz	r4, 800795e <tcp_split_unsent_seg+0x22>
  return ERR_MEM;
 8007958:	f04f 30ff 	mov.w	r0, #4294967295
 800795c:	e00b      	b.n	8007976 <tcp_split_unsent_seg+0x3a>
  if (split == 0) {
 800795e:	f1b9 0f00 	cmp.w	r9, #0
 8007962:	d10b      	bne.n	800797c <tcp_split_unsent_seg+0x40>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8007964:	4b54      	ldr	r3, [pc, #336]	; (8007ab8 <tcp_split_unsent_seg+0x17c>)
 8007966:	f240 3253 	movw	r2, #851	; 0x353
 800796a:	4956      	ldr	r1, [pc, #344]	; (8007ac4 <tcp_split_unsent_seg+0x188>)
 800796c:	4854      	ldr	r0, [pc, #336]	; (8007ac0 <tcp_split_unsent_seg+0x184>)
 800796e:	f001 fc7f 	bl	8009270 <iprintf>
    return ERR_VAL;
 8007972:	f06f 0005 	mvn.w	r0, #5
}
 8007976:	b003      	add	sp, #12
 8007978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (useg->len <= split) {
 800797c:	8923      	ldrh	r3, [r4, #8]
 800797e:	454b      	cmp	r3, r9
 8007980:	d801      	bhi.n	8007986 <tcp_split_unsent_seg+0x4a>
    return ERR_OK;
 8007982:	2000      	movs	r0, #0
 8007984:	e7f7      	b.n	8007976 <tcp_split_unsent_seg+0x3a>
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8007986:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
 8007988:	454b      	cmp	r3, r9
 800798a:	d206      	bcs.n	800799a <tcp_split_unsent_seg+0x5e>
 800798c:	4b4a      	ldr	r3, [pc, #296]	; (8007ab8 <tcp_split_unsent_seg+0x17c>)
 800798e:	f240 325b 	movw	r2, #859	; 0x35b
 8007992:	494d      	ldr	r1, [pc, #308]	; (8007ac8 <tcp_split_unsent_seg+0x18c>)
 8007994:	484a      	ldr	r0, [pc, #296]	; (8007ac0 <tcp_split_unsent_seg+0x184>)
 8007996:	f001 fc6b 	bl	8009270 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800799a:	8923      	ldrh	r3, [r4, #8]
 800799c:	b933      	cbnz	r3, 80079ac <tcp_split_unsent_seg+0x70>
 800799e:	4b46      	ldr	r3, [pc, #280]	; (8007ab8 <tcp_split_unsent_seg+0x17c>)
 80079a0:	f44f 7257 	mov.w	r2, #860	; 0x35c
 80079a4:	4949      	ldr	r1, [pc, #292]	; (8007acc <tcp_split_unsent_seg+0x190>)
 80079a6:	4846      	ldr	r0, [pc, #280]	; (8007ac0 <tcp_split_unsent_seg+0x184>)
 80079a8:	f001 fc62 	bl	8009270 <iprintf>
  optflags = useg->flags;
 80079ac:	f894 b00a 	ldrb.w	fp, [r4, #10]
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80079b0:	f44f 7220 	mov.w	r2, #640	; 0x280
  remainder = useg->len - split;
 80079b4:	8927      	ldrh	r7, [r4, #8]
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80079b6:	2036      	movs	r0, #54	; 0x36
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80079b8:	f01b 0f01 	tst.w	fp, #1
  remainder = useg->len - split;
 80079bc:	eba7 0709 	sub.w	r7, r7, r9
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80079c0:	bf14      	ite	ne
 80079c2:	2604      	movne	r6, #4
 80079c4:	2600      	moveq	r6, #0
  remainder = useg->len - split;
 80079c6:	b2bf      	uxth	r7, r7
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80079c8:	19b9      	adds	r1, r7, r6
 80079ca:	b289      	uxth	r1, r1
 80079cc:	f7fc fdde 	bl	800458c <pbuf_alloc>
  if (p == NULL) {
 80079d0:	4682      	mov	sl, r0
 80079d2:	2800      	cmp	r0, #0
 80079d4:	d0c0      	beq.n	8007958 <tcp_split_unsent_seg+0x1c>
  offset = useg->p->tot_len - useg->len + split;
 80079d6:	6860      	ldr	r0, [r4, #4]
 80079d8:	8922      	ldrh	r2, [r4, #8]
 80079da:	8903      	ldrh	r3, [r0, #8]
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80079dc:	f8da 1004 	ldr.w	r1, [sl, #4]
  offset = useg->p->tot_len - useg->len + split;
 80079e0:	1a9b      	subs	r3, r3, r2
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80079e2:	463a      	mov	r2, r7
 80079e4:	4431      	add	r1, r6
  offset = useg->p->tot_len - useg->len + split;
 80079e6:	444b      	add	r3, r9
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80079e8:	b29b      	uxth	r3, r3
 80079ea:	f7fc ff8b 	bl	8004904 <pbuf_copy_partial>
 80079ee:	4287      	cmp	r7, r0
 80079f0:	d15d      	bne.n	8007aae <tcp_split_unsent_seg+0x172>
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80079f2:	68e3      	ldr	r3, [r4, #12]
 80079f4:	8998      	ldrh	r0, [r3, #12]
 80079f6:	f7fa fe63 	bl	80026c0 <lwip_htons>
 80079fa:	b2c6      	uxtb	r6, r0
  if (split_flags & TCP_PSH) {
 80079fc:	f016 0808 	ands.w	r8, r6, #8
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8007a00:	bf0e      	itee	eq
 8007a02:	f006 063f 	andeq.w	r6, r6, #63	; 0x3f
    split_flags &= ~TCP_PSH;
 8007a06:	f006 0637 	andne.w	r6, r6, #55	; 0x37
    remainder_flags |= TCP_PSH;
 8007a0a:	f04f 0808 	movne.w	r8, #8
  if (split_flags & TCP_FIN) {
 8007a0e:	07f3      	lsls	r3, r6, #31
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8007a10:	68e3      	ldr	r3, [r4, #12]
    remainder_flags |= TCP_FIN;
 8007a12:	bf48      	it	mi
 8007a14:	f048 0801 	orrmi.w	r8, r8, #1
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8007a18:	6858      	ldr	r0, [r3, #4]
    split_flags &= ~TCP_FIN;
 8007a1a:	bf48      	it	mi
 8007a1c:	f006 06fe 	andmi.w	r6, r6, #254	; 0xfe
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8007a20:	f7fa fe51 	bl	80026c6 <lwip_htonl>
 8007a24:	4642      	mov	r2, r8
 8007a26:	eb09 0300 	add.w	r3, r9, r0
 8007a2a:	f8cd b000 	str.w	fp, [sp]
 8007a2e:	4651      	mov	r1, sl
 8007a30:	4628      	mov	r0, r5
 8007a32:	f7ff fbb9 	bl	80071a8 <tcp_create_segment>
  if (seg == NULL) {
 8007a36:	4680      	mov	r8, r0
 8007a38:	2800      	cmp	r0, #0
 8007a3a:	d038      	beq.n	8007aae <tcp_split_unsent_seg+0x172>
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8007a3c:	6860      	ldr	r0, [r4, #4]
 8007a3e:	f7fc fe85 	bl	800474c <pbuf_clen>
 8007a42:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
 8007a46:	1a18      	subs	r0, r3, r0
 8007a48:	f8a5 0066 	strh.w	r0, [r5, #102]	; 0x66
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8007a4c:	6860      	ldr	r0, [r4, #4]
 8007a4e:	8901      	ldrh	r1, [r0, #8]
 8007a50:	1bc9      	subs	r1, r1, r7
 8007a52:	b289      	uxth	r1, r1
 8007a54:	f7fc fe22 	bl	800469c <pbuf_realloc>
  useg->len -= remainder;
 8007a58:	8923      	ldrh	r3, [r4, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8007a5a:	f8d4 900c 	ldr.w	r9, [r4, #12]
 8007a5e:	4630      	mov	r0, r6
  useg->len -= remainder;
 8007a60:	1bdf      	subs	r7, r3, r7
 8007a62:	8127      	strh	r7, [r4, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8007a64:	f8b9 700c 	ldrh.w	r7, [r9, #12]
 8007a68:	f7fa fe2a 	bl	80026c0 <lwip_htons>
 8007a6c:	4338      	orrs	r0, r7
 8007a6e:	f8a9 000c 	strh.w	r0, [r9, #12]
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8007a72:	6860      	ldr	r0, [r4, #4]
 8007a74:	f7fc fe6a 	bl	800474c <pbuf_clen>
 8007a78:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
 8007a7c:	4418      	add	r0, r3
 8007a7e:	f8a5 0066 	strh.w	r0, [r5, #102]	; 0x66
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8007a82:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007a86:	f7fc fe61 	bl	800474c <pbuf_clen>
 8007a8a:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
 8007a8e:	4418      	add	r0, r3
  seg->next = useg->next;
 8007a90:	6823      	ldr	r3, [r4, #0]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8007a92:	f8a5 0066 	strh.w	r0, [r5, #102]	; 0x66
  seg->next = useg->next;
 8007a96:	f8c8 3000 	str.w	r3, [r8]
  useg->next = seg;
 8007a9a:	f8c4 8000 	str.w	r8, [r4]
  if (seg->next == NULL) {
 8007a9e:	f8d8 0000 	ldr.w	r0, [r8]
 8007aa2:	2800      	cmp	r0, #0
 8007aa4:	f47f af6d 	bne.w	8007982 <tcp_split_unsent_seg+0x46>
    pcb->unsent_oversize = 0;
 8007aa8:	f8a5 0068 	strh.w	r0, [r5, #104]	; 0x68
 8007aac:	e763      	b.n	8007976 <tcp_split_unsent_seg+0x3a>
    pbuf_free(p);
 8007aae:	4650      	mov	r0, sl
 8007ab0:	f7fc fd0a 	bl	80044c8 <pbuf_free>
 8007ab4:	e750      	b.n	8007958 <tcp_split_unsent_seg+0x1c>
 8007ab6:	bf00      	nop
 8007ab8:	0800c932 	.word	0x0800c932
 8007abc:	0800cae8 	.word	0x0800cae8
 8007ac0:	0800b013 	.word	0x0800b013
 8007ac4:	0800cb0a 	.word	0x0800cb0a
 8007ac8:	0800cb2c 	.word	0x0800cb2c
 8007acc:	0800cb39 	.word	0x0800cb39

08007ad0 <tcp_enqueue_flags>:
{
 8007ad0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8007ad4:	f011 0803 	ands.w	r8, r1, #3
{
 8007ad8:	4604      	mov	r4, r0
 8007ada:	460e      	mov	r6, r1
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8007adc:	d106      	bne.n	8007aec <tcp_enqueue_flags+0x1c>
 8007ade:	4b41      	ldr	r3, [pc, #260]	; (8007be4 <tcp_enqueue_flags+0x114>)
 8007ae0:	f240 4212 	movw	r2, #1042	; 0x412
 8007ae4:	4940      	ldr	r1, [pc, #256]	; (8007be8 <tcp_enqueue_flags+0x118>)
 8007ae6:	4841      	ldr	r0, [pc, #260]	; (8007bec <tcp_enqueue_flags+0x11c>)
 8007ae8:	f001 fbc2 	bl	8009270 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8007aec:	b934      	cbnz	r4, 8007afc <tcp_enqueue_flags+0x2c>
 8007aee:	4b3d      	ldr	r3, [pc, #244]	; (8007be4 <tcp_enqueue_flags+0x114>)
 8007af0:	f240 4213 	movw	r2, #1043	; 0x413
 8007af4:	493e      	ldr	r1, [pc, #248]	; (8007bf0 <tcp_enqueue_flags+0x120>)
 8007af6:	483d      	ldr	r0, [pc, #244]	; (8007bec <tcp_enqueue_flags+0x11c>)
 8007af8:	f001 fbba 	bl	8009270 <iprintf>
 8007afc:	f006 0302 	and.w	r3, r6, #2
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8007b00:	f44f 7220 	mov.w	r2, #640	; 0x280
 8007b04:	2036      	movs	r0, #54	; 0x36
  if (flags & TCP_SYN) {
 8007b06:	2b00      	cmp	r3, #0
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8007b08:	bf15      	itete	ne
 8007b0a:	2704      	movne	r7, #4
 8007b0c:	2700      	moveq	r7, #0
  u8_t optflags = 0;
 8007b0e:	f04f 0901 	movne.w	r9, #1
 8007b12:	f04f 0900 	moveq.w	r9, #0
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8007b16:	4639      	mov	r1, r7
 8007b18:	f7fc fd38 	bl	800458c <pbuf_alloc>
 8007b1c:	4605      	mov	r5, r0
 8007b1e:	b940      	cbnz	r0, 8007b32 <tcp_enqueue_flags+0x62>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8007b20:	8b63      	ldrh	r3, [r4, #26]
    return ERR_MEM;
 8007b22:	f04f 30ff 	mov.w	r0, #4294967295
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8007b26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b2a:	8363      	strh	r3, [r4, #26]
}
 8007b2c:	b003      	add	sp, #12
 8007b2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8007b32:	8943      	ldrh	r3, [r0, #10]
 8007b34:	42bb      	cmp	r3, r7
 8007b36:	d206      	bcs.n	8007b46 <tcp_enqueue_flags+0x76>
 8007b38:	4b2a      	ldr	r3, [pc, #168]	; (8007be4 <tcp_enqueue_flags+0x114>)
 8007b3a:	f240 423a 	movw	r2, #1082	; 0x43a
 8007b3e:	492d      	ldr	r1, [pc, #180]	; (8007bf4 <tcp_enqueue_flags+0x124>)
 8007b40:	482a      	ldr	r0, [pc, #168]	; (8007bec <tcp_enqueue_flags+0x11c>)
 8007b42:	f001 fb95 	bl	8009270 <iprintf>
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8007b46:	f8cd 9000 	str.w	r9, [sp]
 8007b4a:	4629      	mov	r1, r5
 8007b4c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8007b4e:	4632      	mov	r2, r6
 8007b50:	4620      	mov	r0, r4
 8007b52:	f7ff fb29 	bl	80071a8 <tcp_create_segment>
 8007b56:	4605      	mov	r5, r0
 8007b58:	2800      	cmp	r0, #0
 8007b5a:	d0e1      	beq.n	8007b20 <tcp_enqueue_flags+0x50>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8007b5c:	68c3      	ldr	r3, [r0, #12]
 8007b5e:	079a      	lsls	r2, r3, #30
 8007b60:	d006      	beq.n	8007b70 <tcp_enqueue_flags+0xa0>
 8007b62:	4b20      	ldr	r3, [pc, #128]	; (8007be4 <tcp_enqueue_flags+0x114>)
 8007b64:	f240 4242 	movw	r2, #1090	; 0x442
 8007b68:	4923      	ldr	r1, [pc, #140]	; (8007bf8 <tcp_enqueue_flags+0x128>)
 8007b6a:	4820      	ldr	r0, [pc, #128]	; (8007bec <tcp_enqueue_flags+0x11c>)
 8007b6c:	f001 fb80 	bl	8009270 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8007b70:	892b      	ldrh	r3, [r5, #8]
 8007b72:	b133      	cbz	r3, 8007b82 <tcp_enqueue_flags+0xb2>
 8007b74:	4b1b      	ldr	r3, [pc, #108]	; (8007be4 <tcp_enqueue_flags+0x114>)
 8007b76:	f240 4243 	movw	r2, #1091	; 0x443
 8007b7a:	4920      	ldr	r1, [pc, #128]	; (8007bfc <tcp_enqueue_flags+0x12c>)
 8007b7c:	481b      	ldr	r0, [pc, #108]	; (8007bec <tcp_enqueue_flags+0x11c>)
 8007b7e:	f001 fb77 	bl	8009270 <iprintf>
  if (pcb->unsent == NULL) {
 8007b82:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8007b84:	bb4b      	cbnz	r3, 8007bda <tcp_enqueue_flags+0x10a>
    pcb->unsent = seg;
 8007b86:	66e5      	str	r5, [r4, #108]	; 0x6c
  pcb->unsent_oversize = 0;
 8007b88:	2300      	movs	r3, #0
 8007b8a:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8007b8e:	f1b8 0f00 	cmp.w	r8, #0
 8007b92:	d002      	beq.n	8007b9a <tcp_enqueue_flags+0xca>
    pcb->snd_lbb++;
 8007b94:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8007b96:	3301      	adds	r3, #1
 8007b98:	65e3      	str	r3, [r4, #92]	; 0x5c
  if (flags & TCP_FIN) {
 8007b9a:	07f3      	lsls	r3, r6, #31
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8007b9c:	6868      	ldr	r0, [r5, #4]
    tcp_set_flags(pcb, TF_FIN);
 8007b9e:	bf42      	ittt	mi
 8007ba0:	8b63      	ldrhmi	r3, [r4, #26]
 8007ba2:	f043 0320 	orrmi.w	r3, r3, #32
 8007ba6:	8363      	strhmi	r3, [r4, #26]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8007ba8:	f7fc fdd0 	bl	800474c <pbuf_clen>
 8007bac:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 8007bb0:	4418      	add	r0, r3
 8007bb2:	b280      	uxth	r0, r0
 8007bb4:	f8a4 0066 	strh.w	r0, [r4, #102]	; 0x66
  if (pcb->snd_queuelen != 0) {
 8007bb8:	2800      	cmp	r0, #0
 8007bba:	d0b7      	beq.n	8007b2c <tcp_enqueue_flags+0x5c>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8007bbc:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8007bbe:	b948      	cbnz	r0, 8007bd4 <tcp_enqueue_flags+0x104>
 8007bc0:	6ee4      	ldr	r4, [r4, #108]	; 0x6c
 8007bc2:	2c00      	cmp	r4, #0
 8007bc4:	d1b2      	bne.n	8007b2c <tcp_enqueue_flags+0x5c>
 8007bc6:	4b07      	ldr	r3, [pc, #28]	; (8007be4 <tcp_enqueue_flags+0x114>)
 8007bc8:	f240 4266 	movw	r2, #1126	; 0x466
 8007bcc:	490c      	ldr	r1, [pc, #48]	; (8007c00 <tcp_enqueue_flags+0x130>)
 8007bce:	4807      	ldr	r0, [pc, #28]	; (8007bec <tcp_enqueue_flags+0x11c>)
 8007bd0:	f001 fb4e 	bl	8009270 <iprintf>
  return ERR_OK;
 8007bd4:	2000      	movs	r0, #0
 8007bd6:	e7a9      	b.n	8007b2c <tcp_enqueue_flags+0x5c>
 8007bd8:	4613      	mov	r3, r2
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8007bda:	681a      	ldr	r2, [r3, #0]
 8007bdc:	2a00      	cmp	r2, #0
 8007bde:	d1fb      	bne.n	8007bd8 <tcp_enqueue_flags+0x108>
    useg->next = seg;
 8007be0:	601d      	str	r5, [r3, #0]
 8007be2:	e7d1      	b.n	8007b88 <tcp_enqueue_flags+0xb8>
 8007be4:	0800c932 	.word	0x0800c932
 8007be8:	0800c6f6 	.word	0x0800c6f6
 8007bec:	0800b013 	.word	0x0800b013
 8007bf0:	0800c74b 	.word	0x0800c74b
 8007bf4:	0800c76a 	.word	0x0800c76a
 8007bf8:	0800c7a3 	.word	0x0800c7a3
 8007bfc:	0800c7bb 	.word	0x0800c7bb
 8007c00:	0800c7e5 	.word	0x0800c7e5

08007c04 <tcp_send_fin>:
{
 8007c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8007c06:	4604      	mov	r4, r0
 8007c08:	b930      	cbnz	r0, 8007c18 <tcp_send_fin+0x14>
 8007c0a:	4b13      	ldr	r3, [pc, #76]	; (8007c58 <tcp_send_fin+0x54>)
 8007c0c:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8007c10:	4912      	ldr	r1, [pc, #72]	; (8007c5c <tcp_send_fin+0x58>)
 8007c12:	4813      	ldr	r0, [pc, #76]	; (8007c60 <tcp_send_fin+0x5c>)
 8007c14:	f001 fb2c 	bl	8009270 <iprintf>
  if (pcb->unsent != NULL) {
 8007c18:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 8007c1a:	b935      	cbnz	r5, 8007c2a <tcp_send_fin+0x26>
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8007c1c:	4620      	mov	r0, r4
 8007c1e:	2101      	movs	r1, #1
}
 8007c20:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8007c24:	f7ff bf54 	b.w	8007ad0 <tcp_enqueue_flags>
 8007c28:	461d      	mov	r5, r3
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8007c2a:	682b      	ldr	r3, [r5, #0]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d1fb      	bne.n	8007c28 <tcp_send_fin+0x24>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8007c30:	68eb      	ldr	r3, [r5, #12]
 8007c32:	8998      	ldrh	r0, [r3, #12]
 8007c34:	f7fa fd44 	bl	80026c0 <lwip_htons>
 8007c38:	f010 0707 	ands.w	r7, r0, #7
 8007c3c:	d1ee      	bne.n	8007c1c <tcp_send_fin+0x18>
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8007c3e:	68ee      	ldr	r6, [r5, #12]
 8007c40:	2001      	movs	r0, #1
 8007c42:	89b5      	ldrh	r5, [r6, #12]
 8007c44:	f7fa fd3c 	bl	80026c0 <lwip_htons>
      tcp_set_flags(pcb, TF_FIN);
 8007c48:	8b63      	ldrh	r3, [r4, #26]
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8007c4a:	4328      	orrs	r0, r5
      tcp_set_flags(pcb, TF_FIN);
 8007c4c:	f043 0320 	orr.w	r3, r3, #32
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8007c50:	81b0      	strh	r0, [r6, #12]
}
 8007c52:	4638      	mov	r0, r7
      tcp_set_flags(pcb, TF_FIN);
 8007c54:	8363      	strh	r3, [r4, #26]
}
 8007c56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c58:	0800c932 	.word	0x0800c932
 8007c5c:	0800cace 	.word	0x0800cace
 8007c60:	0800b013 	.word	0x0800b013

08007c64 <tcp_rexmit_rto_prepare>:
{
 8007c64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8007c68:	4604      	mov	r4, r0
 8007c6a:	b930      	cbnz	r0, 8007c7a <tcp_rexmit_rto_prepare+0x16>
 8007c6c:	4b1c      	ldr	r3, [pc, #112]	; (8007ce0 <tcp_rexmit_rto_prepare+0x7c>)
 8007c6e:	f240 6263 	movw	r2, #1635	; 0x663
 8007c72:	491c      	ldr	r1, [pc, #112]	; (8007ce4 <tcp_rexmit_rto_prepare+0x80>)
 8007c74:	481c      	ldr	r0, [pc, #112]	; (8007ce8 <tcp_rexmit_rto_prepare+0x84>)
 8007c76:	f001 fafb 	bl	8009270 <iprintf>
  if (pcb->unacked == NULL) {
 8007c7a:	6f25      	ldr	r5, [r4, #112]	; 0x70
 8007c7c:	b945      	cbnz	r5, 8007c90 <tcp_rexmit_rto_prepare+0x2c>
    return ERR_VAL;
 8007c7e:	f06f 0005 	mvn.w	r0, #5
 8007c82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (tcp_output_segment_busy(seg)) {
 8007c86:	f7ff fa23 	bl	80070d0 <tcp_output_segment_busy>
 8007c8a:	2800      	cmp	r0, #0
 8007c8c:	d1f7      	bne.n	8007c7e <tcp_rexmit_rto_prepare+0x1a>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8007c8e:	682d      	ldr	r5, [r5, #0]
 8007c90:	682b      	ldr	r3, [r5, #0]
    if (tcp_output_segment_busy(seg)) {
 8007c92:	4628      	mov	r0, r5
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d1f6      	bne.n	8007c86 <tcp_rexmit_rto_prepare+0x22>
  if (tcp_output_segment_busy(seg)) {
 8007c98:	f7ff fa1a 	bl	80070d0 <tcp_output_segment_busy>
 8007c9c:	4606      	mov	r6, r0
 8007c9e:	2800      	cmp	r0, #0
 8007ca0:	d1ed      	bne.n	8007c7e <tcp_rexmit_rto_prepare+0x1a>
  seg->next = pcb->unsent;
 8007ca2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8007ca4:	602b      	str	r3, [r5, #0]
  pcb->unsent = pcb->unacked;
 8007ca6:	6f23      	ldr	r3, [r4, #112]	; 0x70
  pcb->unacked = NULL;
 8007ca8:	6720      	str	r0, [r4, #112]	; 0x70
  pcb->unsent = pcb->unacked;
 8007caa:	66e3      	str	r3, [r4, #108]	; 0x6c
  tcp_set_flags(pcb, TF_RTO);
 8007cac:	8b63      	ldrh	r3, [r4, #26]
 8007cae:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007cb2:	8363      	strh	r3, [r4, #26]
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8007cb4:	68eb      	ldr	r3, [r5, #12]
 8007cb6:	6858      	ldr	r0, [r3, #4]
 8007cb8:	f7fa fd05 	bl	80026c6 <lwip_htonl>
 8007cbc:	68eb      	ldr	r3, [r5, #12]
 8007cbe:	4607      	mov	r7, r0
 8007cc0:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 8007cc4:	8998      	ldrh	r0, [r3, #12]
 8007cc6:	f7fa fcfb 	bl	80026c0 <lwip_htons>
 8007cca:	f010 0003 	ands.w	r0, r0, #3
 8007cce:	4447      	add	r7, r8
  pcb->rttest = 0;
 8007cd0:	6366      	str	r6, [r4, #52]	; 0x34
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8007cd2:	bf18      	it	ne
 8007cd4:	2001      	movne	r0, #1
 8007cd6:	4438      	add	r0, r7
 8007cd8:	64e0      	str	r0, [r4, #76]	; 0x4c
  return ERR_OK;
 8007cda:	4630      	mov	r0, r6
}
 8007cdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ce0:	0800c932 	.word	0x0800c932
 8007ce4:	0800ca55 	.word	0x0800ca55
 8007ce8:	0800b013 	.word	0x0800b013

08007cec <tcp_rexmit>:
{
 8007cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8007cee:	4604      	mov	r4, r0
 8007cf0:	b930      	cbnz	r0, 8007d00 <tcp_rexmit+0x14>
 8007cf2:	4b1b      	ldr	r3, [pc, #108]	; (8007d60 <tcp_rexmit+0x74>)
 8007cf4:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8007cf8:	491a      	ldr	r1, [pc, #104]	; (8007d64 <tcp_rexmit+0x78>)
 8007cfa:	481b      	ldr	r0, [pc, #108]	; (8007d68 <tcp_rexmit+0x7c>)
 8007cfc:	f001 fab8 	bl	8009270 <iprintf>
  if (pcb->unacked == NULL) {
 8007d00:	6f25      	ldr	r5, [r4, #112]	; 0x70
 8007d02:	b915      	cbnz	r5, 8007d0a <tcp_rexmit+0x1e>
    return ERR_VAL;
 8007d04:	f06f 0005 	mvn.w	r0, #5
 8007d08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (tcp_output_segment_busy(seg)) {
 8007d0a:	4628      	mov	r0, r5
 8007d0c:	f7ff f9e0 	bl	80070d0 <tcp_output_segment_busy>
 8007d10:	2800      	cmp	r0, #0
 8007d12:	d1f7      	bne.n	8007d04 <tcp_rexmit+0x18>
  pcb->unacked = seg->next;
 8007d14:	682b      	ldr	r3, [r5, #0]
  cur_seg = &(pcb->unsent);
 8007d16:	f104 066c 	add.w	r6, r4, #108	; 0x6c
  pcb->unacked = seg->next;
 8007d1a:	6723      	str	r3, [r4, #112]	; 0x70
  while (*cur_seg &&
 8007d1c:	6833      	ldr	r3, [r6, #0]
 8007d1e:	b983      	cbnz	r3, 8007d42 <tcp_rexmit+0x56>
  seg->next = *cur_seg;
 8007d20:	6833      	ldr	r3, [r6, #0]
 8007d22:	602b      	str	r3, [r5, #0]
  *cur_seg = seg;
 8007d24:	6035      	str	r5, [r6, #0]
  if (seg->next == NULL) {
 8007d26:	682b      	ldr	r3, [r5, #0]
 8007d28:	b90b      	cbnz	r3, 8007d2e <tcp_rexmit+0x42>
    pcb->unsent_oversize = 0;
 8007d2a:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  if (pcb->nrtx < 0xFF) {
 8007d2e:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
  pcb->rttest = 0;
 8007d32:	2000      	movs	r0, #0
  if (pcb->nrtx < 0xFF) {
 8007d34:	2bff      	cmp	r3, #255	; 0xff
  pcb->rttest = 0;
 8007d36:	6360      	str	r0, [r4, #52]	; 0x34
    ++pcb->nrtx;
 8007d38:	bf1c      	itt	ne
 8007d3a:	3301      	addne	r3, #1
 8007d3c:	f884 3042 	strbne.w	r3, [r4, #66]	; 0x42
}
 8007d40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8007d42:	68db      	ldr	r3, [r3, #12]
 8007d44:	6858      	ldr	r0, [r3, #4]
 8007d46:	f7fa fcbe 	bl	80026c6 <lwip_htonl>
 8007d4a:	68eb      	ldr	r3, [r5, #12]
 8007d4c:	4607      	mov	r7, r0
 8007d4e:	6858      	ldr	r0, [r3, #4]
 8007d50:	f7fa fcb9 	bl	80026c6 <lwip_htonl>
 8007d54:	1a38      	subs	r0, r7, r0
  while (*cur_seg &&
 8007d56:	2800      	cmp	r0, #0
 8007d58:	dae2      	bge.n	8007d20 <tcp_rexmit+0x34>
    cur_seg = &((*cur_seg)->next );
 8007d5a:	6836      	ldr	r6, [r6, #0]
 8007d5c:	e7de      	b.n	8007d1c <tcp_rexmit+0x30>
 8007d5e:	bf00      	nop
 8007d60:	0800c932 	.word	0x0800c932
 8007d64:	0800c9e1 	.word	0x0800c9e1
 8007d68:	0800b013 	.word	0x0800b013

08007d6c <tcp_rexmit_fast>:
{
 8007d6c:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8007d6e:	4604      	mov	r4, r0
 8007d70:	b930      	cbnz	r0, 8007d80 <tcp_rexmit_fast+0x14>
 8007d72:	4b17      	ldr	r3, [pc, #92]	; (8007dd0 <tcp_rexmit_fast+0x64>)
 8007d74:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8007d78:	4916      	ldr	r1, [pc, #88]	; (8007dd4 <tcp_rexmit_fast+0x68>)
 8007d7a:	4817      	ldr	r0, [pc, #92]	; (8007dd8 <tcp_rexmit_fast+0x6c>)
 8007d7c:	f001 fa78 	bl	8009270 <iprintf>
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8007d80:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8007d82:	b31b      	cbz	r3, 8007dcc <tcp_rexmit_fast+0x60>
 8007d84:	8b63      	ldrh	r3, [r4, #26]
 8007d86:	075b      	lsls	r3, r3, #29
 8007d88:	d420      	bmi.n	8007dcc <tcp_rexmit_fast+0x60>
    if (tcp_rexmit(pcb) == ERR_OK) {
 8007d8a:	4620      	mov	r0, r4
 8007d8c:	f7ff ffae 	bl	8007cec <tcp_rexmit>
 8007d90:	b9e0      	cbnz	r0, 8007dcc <tcp_rexmit_fast+0x60>
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8007d92:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
 8007d96:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	bf38      	it	cc
 8007d9e:	085a      	lsrcc	r2, r3, #1
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8007da0:	8e63      	ldrh	r3, [r4, #50]	; 0x32
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8007da2:	bf28      	it	cs
 8007da4:	0852      	lsrcs	r2, r2, #1
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8007da6:	0059      	lsls	r1, r3, #1
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8007da8:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8007dac:	428a      	cmp	r2, r1
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8007dae:	440b      	add	r3, r1
        pcb->ssthresh = 2 * pcb->mss;
 8007db0:	bf38      	it	cc
 8007db2:	f8a4 104a 	strhcc.w	r1, [r4, #74]	; 0x4a
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8007db6:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 8007dba:	4413      	add	r3, r2
 8007dbc:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8007dc0:	8b63      	ldrh	r3, [r4, #26]
 8007dc2:	f043 0304 	orr.w	r3, r3, #4
 8007dc6:	8363      	strh	r3, [r4, #26]
      pcb->rtime = 0;
 8007dc8:	2300      	movs	r3, #0
 8007dca:	8623      	strh	r3, [r4, #48]	; 0x30
 8007dcc:	bd10      	pop	{r4, pc}
 8007dce:	bf00      	nop
 8007dd0:	0800c932 	.word	0x0800c932
 8007dd4:	0800c9f9 	.word	0x0800c9f9
 8007dd8:	0800b013 	.word	0x0800b013

08007ddc <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8007ddc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007de0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007de2:	4606      	mov	r6, r0
 8007de4:	468a      	mov	sl, r1
 8007de6:	4617      	mov	r7, r2
 8007de8:	f8bd 8034 	ldrh.w	r8, [sp, #52]	; 0x34
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8007dec:	461c      	mov	r4, r3
{
 8007dee:	f8bd 9038 	ldrh.w	r9, [sp, #56]	; 0x38
  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8007df2:	b933      	cbnz	r3, 8007e02 <tcp_rst+0x26>
 8007df4:	4b17      	ldr	r3, [pc, #92]	; (8007e54 <tcp_rst+0x78>)
 8007df6:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8007dfa:	4917      	ldr	r1, [pc, #92]	; (8007e58 <tcp_rst+0x7c>)
 8007dfc:	4817      	ldr	r0, [pc, #92]	; (8007e5c <tcp_rst+0x80>)
 8007dfe:	f001 fa37 	bl	8009270 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8007e02:	b935      	cbnz	r5, 8007e12 <tcp_rst+0x36>
 8007e04:	4b13      	ldr	r3, [pc, #76]	; (8007e54 <tcp_rst+0x78>)
 8007e06:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8007e0a:	4915      	ldr	r1, [pc, #84]	; (8007e60 <tcp_rst+0x84>)
 8007e0c:	4813      	ldr	r0, [pc, #76]	; (8007e5c <tcp_rst+0x80>)
 8007e0e:	f001 fa2f 	bl	8009270 <iprintf>
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8007e12:	4650      	mov	r0, sl
 8007e14:	f7fa fc57 	bl	80026c6 <lwip_htonl>
 8007e18:	f246 0308 	movw	r3, #24584	; 0x6008
 8007e1c:	4602      	mov	r2, r0
 8007e1e:	f8cd 9000 	str.w	r9, [sp]
 8007e22:	9302      	str	r3, [sp, #8]
 8007e24:	2314      	movs	r3, #20
 8007e26:	4638      	mov	r0, r7
 8007e28:	2100      	movs	r1, #0
 8007e2a:	9301      	str	r3, [sp, #4]
 8007e2c:	4643      	mov	r3, r8
 8007e2e:	f7ff fa35 	bl	800729c <tcp_output_alloc_header_common.constprop.3>
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8007e32:	4607      	mov	r7, r0
 8007e34:	b150      	cbz	r0, 8007e4c <tcp_rst+0x70>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8007e36:	f7ff fa99 	bl	800736c <tcp_output_fill_options.isra.0.constprop.4>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8007e3a:	462b      	mov	r3, r5
 8007e3c:	4622      	mov	r2, r4
 8007e3e:	4639      	mov	r1, r7
 8007e40:	4630      	mov	r0, r6
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8007e42:	b004      	add	sp, #16
 8007e44:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8007e48:	f7ff baa0 	b.w	800738c <tcp_output_control_segment>
}
 8007e4c:	b004      	add	sp, #16
 8007e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e52:	bf00      	nop
 8007e54:	0800c932 	.word	0x0800c932
 8007e58:	0800ca79 	.word	0x0800ca79
 8007e5c:	0800b013 	.word	0x0800b013
 8007e60:	0800ca93 	.word	0x0800ca93

08007e64 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8007e64:	b538      	push	{r3, r4, r5, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
  u8_t num_sacks = 0;

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8007e66:	4604      	mov	r4, r0
 8007e68:	b930      	cbnz	r0, 8007e78 <tcp_send_empty_ack+0x14>
 8007e6a:	4b14      	ldr	r3, [pc, #80]	; (8007ebc <tcp_send_empty_ack+0x58>)
 8007e6c:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8007e70:	4913      	ldr	r1, [pc, #76]	; (8007ec0 <tcp_send_empty_ack+0x5c>)
 8007e72:	4814      	ldr	r0, [pc, #80]	; (8007ec4 <tcp_send_empty_ack+0x60>)
 8007e74:	f001 f9fc 	bl	8009270 <iprintf>
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8007e78:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8007e7a:	f7fa fc24 	bl	80026c6 <lwip_htonl>
 8007e7e:	2100      	movs	r1, #0
 8007e80:	4602      	mov	r2, r0
 8007e82:	4620      	mov	r0, r4
 8007e84:	f7ff fa4c 	bl	8007320 <tcp_output_alloc_header.constprop.2>
  if (p == NULL) {
 8007e88:	4605      	mov	r5, r0
 8007e8a:	b930      	cbnz	r0, 8007e9a <tcp_send_empty_ack+0x36>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8007e8c:	8b63      	ldrh	r3, [r4, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8007e8e:	f06f 0001 	mvn.w	r0, #1
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8007e92:	f043 0303 	orr.w	r3, r3, #3
 8007e96:	8363      	strh	r3, [r4, #26]
    return ERR_BUF;
 8007e98:	bd38      	pop	{r3, r4, r5, pc}
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8007e9a:	f7ff fa67 	bl	800736c <tcp_output_fill_options.isra.0.constprop.4>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8007e9e:	1d23      	adds	r3, r4, #4
 8007ea0:	4622      	mov	r2, r4
 8007ea2:	4629      	mov	r1, r5
 8007ea4:	4620      	mov	r0, r4
 8007ea6:	f7ff fa71 	bl	800738c <tcp_output_control_segment>
 8007eaa:	8b63      	ldrh	r3, [r4, #26]
  if (err != ERR_OK) {
 8007eac:	b118      	cbz	r0, 8007eb6 <tcp_send_empty_ack+0x52>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8007eae:	f043 0303 	orr.w	r3, r3, #3
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8007eb2:	8363      	strh	r3, [r4, #26]
  }

  return err;
}
 8007eb4:	bd38      	pop	{r3, r4, r5, pc}
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8007eb6:	f023 0303 	bic.w	r3, r3, #3
 8007eba:	e7fa      	b.n	8007eb2 <tcp_send_empty_ack+0x4e>
 8007ebc:	0800c932 	.word	0x0800c932
 8007ec0:	0800caae 	.word	0x0800caae
 8007ec4:	0800b013 	.word	0x0800b013

08007ec8 <tcp_output>:
{
 8007ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8007ecc:	4604      	mov	r4, r0
{
 8007ece:	b087      	sub	sp, #28
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8007ed0:	b930      	cbnz	r0, 8007ee0 <tcp_output+0x18>
 8007ed2:	4ba9      	ldr	r3, [pc, #676]	; (8008178 <tcp_output+0x2b0>)
 8007ed4:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8007ed8:	49a8      	ldr	r1, [pc, #672]	; (800817c <tcp_output+0x2b4>)
 8007eda:	48a9      	ldr	r0, [pc, #676]	; (8008180 <tcp_output+0x2b8>)
 8007edc:	f001 f9c8 	bl	8009270 <iprintf>
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8007ee0:	7d23      	ldrb	r3, [r4, #20]
 8007ee2:	2b01      	cmp	r3, #1
 8007ee4:	d106      	bne.n	8007ef4 <tcp_output+0x2c>
 8007ee6:	4ba4      	ldr	r3, [pc, #656]	; (8008178 <tcp_output+0x2b0>)
 8007ee8:	f240 42e4 	movw	r2, #1252	; 0x4e4
 8007eec:	49a5      	ldr	r1, [pc, #660]	; (8008184 <tcp_output+0x2bc>)
 8007eee:	48a4      	ldr	r0, [pc, #656]	; (8008180 <tcp_output+0x2b8>)
 8007ef0:	f001 f9be 	bl	8009270 <iprintf>
  if (tcp_input_pcb == pcb) {
 8007ef4:	4ba4      	ldr	r3, [pc, #656]	; (8008188 <tcp_output+0x2c0>)
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	429c      	cmp	r4, r3
 8007efa:	f000 816d 	beq.w	80081d8 <tcp_output+0x310>
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8007efe:	f8b4 7060 	ldrh.w	r7, [r4, #96]	; 0x60
 8007f02:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
  seg = pcb->unsent;
 8007f06:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8007f08:	429f      	cmp	r7, r3
 8007f0a:	bf28      	it	cs
 8007f0c:	461f      	movcs	r7, r3
  if (seg == NULL) {
 8007f0e:	b94d      	cbnz	r5, 8007f24 <tcp_output+0x5c>
    if (pcb->flags & TF_ACK_NOW) {
 8007f10:	8b63      	ldrh	r3, [r4, #26]
 8007f12:	0798      	lsls	r0, r3, #30
 8007f14:	f140 815c 	bpl.w	80081d0 <tcp_output+0x308>
      return tcp_send_empty_ack(pcb);
 8007f18:	4620      	mov	r0, r4
}
 8007f1a:	b007      	add	sp, #28
 8007f1c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      return tcp_send_empty_ack(pcb);
 8007f20:	f7ff bfa0 	b.w	8007e64 <tcp_send_empty_ack>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8007f24:	7a20      	ldrb	r0, [r4, #8]
  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8007f26:	f104 0904 	add.w	r9, r4, #4
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8007f2a:	b340      	cbz	r0, 8007f7e <tcp_output+0xb6>
    return netif_get_by_index(pcb->netif_idx);
 8007f2c:	f7fc fa02 	bl	8004334 <netif_get_by_index>
    return ip_route(src, dst);
 8007f30:	4680      	mov	r8, r0
  if (netif == NULL) {
 8007f32:	2800      	cmp	r0, #0
 8007f34:	f000 8169 	beq.w	800820a <tcp_output+0x342>
  if (ip_addr_isany(&pcb->local_ip)) {
 8007f38:	b10c      	cbz	r4, 8007f3e <tcp_output+0x76>
 8007f3a:	6823      	ldr	r3, [r4, #0]
 8007f3c:	b913      	cbnz	r3, 8007f44 <tcp_output+0x7c>
    ip_addr_copy(pcb->local_ip, *local_ip);
 8007f3e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007f42:	6023      	str	r3, [r4, #0]
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8007f44:	68eb      	ldr	r3, [r5, #12]
 8007f46:	6858      	ldr	r0, [r3, #4]
 8007f48:	f7fa fbbd 	bl	80026c6 <lwip_htonl>
 8007f4c:	892b      	ldrh	r3, [r5, #8]
 8007f4e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8007f50:	1a9b      	subs	r3, r3, r2
 8007f52:	4418      	add	r0, r3
 8007f54:	4287      	cmp	r7, r0
 8007f56:	d216      	bcs.n	8007f86 <tcp_output+0xbe>
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8007f58:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 8007f5c:	429f      	cmp	r7, r3
 8007f5e:	d1d7      	bne.n	8007f10 <tcp_output+0x48>
 8007f60:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d1d4      	bne.n	8007f10 <tcp_output+0x48>
 8007f66:	f894 3099 	ldrb.w	r3, [r4, #153]	; 0x99
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d1d0      	bne.n	8007f10 <tcp_output+0x48>
      pcb->persist_backoff = 1;
 8007f6e:	2201      	movs	r2, #1
      pcb->persist_cnt = 0;
 8007f70:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
      pcb->persist_probe = 0;
 8007f74:	f884 309a 	strb.w	r3, [r4, #154]	; 0x9a
      pcb->persist_backoff = 1;
 8007f78:	f884 2099 	strb.w	r2, [r4, #153]	; 0x99
 8007f7c:	e7c8      	b.n	8007f10 <tcp_output+0x48>
    return ip_route(src, dst);
 8007f7e:	4648      	mov	r0, r9
 8007f80:	f7fb f88a 	bl	8003098 <ip4_route>
 8007f84:	e7d4      	b.n	8007f30 <tcp_output+0x68>
  pcb->persist_backoff = 0;
 8007f86:	2300      	movs	r3, #0
  useg = pcb->unacked;
 8007f88:	6f26      	ldr	r6, [r4, #112]	; 0x70
  pcb->persist_backoff = 0;
 8007f8a:	f884 3099 	strb.w	r3, [r4, #153]	; 0x99
  if (useg != NULL) {
 8007f8e:	2e00      	cmp	r6, #0
 8007f90:	f040 80a8 	bne.w	80080e4 <tcp_output+0x21c>
    LWIP_ASSERT("RST not expected here!",
 8007f94:	f8df a1e0 	ldr.w	sl, [pc, #480]	; 8008178 <tcp_output+0x2b0>
 8007f98:	f8df b1e4 	ldr.w	fp, [pc, #484]	; 8008180 <tcp_output+0x2b8>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8007f9c:	68eb      	ldr	r3, [r5, #12]
 8007f9e:	6858      	ldr	r0, [r3, #4]
 8007fa0:	f7fa fb91 	bl	80026c6 <lwip_htonl>
 8007fa4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007fa6:	1ac0      	subs	r0, r0, r3
 8007fa8:	892b      	ldrh	r3, [r5, #8]
 8007faa:	4418      	add	r0, r3
  while (seg != NULL &&
 8007fac:	4287      	cmp	r7, r0
 8007fae:	f0c0 810b 	bcc.w	80081c8 <tcp_output+0x300>
    LWIP_ASSERT("RST not expected here!",
 8007fb2:	68eb      	ldr	r3, [r5, #12]
 8007fb4:	8998      	ldrh	r0, [r3, #12]
 8007fb6:	f7fa fb83 	bl	80026c0 <lwip_htons>
 8007fba:	0741      	lsls	r1, r0, #29
 8007fbc:	d506      	bpl.n	8007fcc <tcp_output+0x104>
 8007fbe:	4653      	mov	r3, sl
 8007fc0:	f240 5237 	movw	r2, #1335	; 0x537
 8007fc4:	4971      	ldr	r1, [pc, #452]	; (800818c <tcp_output+0x2c4>)
 8007fc6:	4658      	mov	r0, fp
 8007fc8:	f001 f952 	bl	8009270 <iprintf>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8007fcc:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8007fce:	b19b      	cbz	r3, 8007ff8 <tcp_output+0x130>
 8007fd0:	8b62      	ldrh	r2, [r4, #26]
 8007fd2:	f012 0f44 	tst.w	r2, #68	; 0x44
 8007fd6:	d10f      	bne.n	8007ff8 <tcp_output+0x130>
 8007fd8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8007fda:	b12b      	cbz	r3, 8007fe8 <tcp_output+0x120>
 8007fdc:	6819      	ldr	r1, [r3, #0]
 8007fde:	b959      	cbnz	r1, 8007ff8 <tcp_output+0x130>
 8007fe0:	8919      	ldrh	r1, [r3, #8]
 8007fe2:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8007fe4:	4299      	cmp	r1, r3
 8007fe6:	d207      	bcs.n	8007ff8 <tcp_output+0x130>
 8007fe8:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 8007fec:	b123      	cbz	r3, 8007ff8 <tcp_output+0x130>
 8007fee:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 8007ff2:	2b08      	cmp	r3, #8
 8007ff4:	f240 810c 	bls.w	8008210 <tcp_output+0x348>
    if (pcb->state != SYN_SENT) {
 8007ff8:	7d23      	ldrb	r3, [r4, #20]
 8007ffa:	2b02      	cmp	r3, #2
 8007ffc:	d00a      	beq.n	8008014 <tcp_output+0x14c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8007ffe:	68ea      	ldr	r2, [r5, #12]
 8008000:	2010      	movs	r0, #16
 8008002:	8993      	ldrh	r3, [r2, #12]
 8008004:	9205      	str	r2, [sp, #20]
 8008006:	9304      	str	r3, [sp, #16]
 8008008:	f7fa fb5a 	bl	80026c0 <lwip_htons>
 800800c:	9b04      	ldr	r3, [sp, #16]
 800800e:	9a05      	ldr	r2, [sp, #20]
 8008010:	4318      	orrs	r0, r3
 8008012:	8190      	strh	r0, [r2, #12]
  if (tcp_output_segment_busy(seg)) {
 8008014:	4628      	mov	r0, r5
 8008016:	f7ff f85b 	bl	80070d0 <tcp_output_segment_busy>
 800801a:	2800      	cmp	r0, #0
 800801c:	d176      	bne.n	800810c <tcp_output+0x244>
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800801e:	68eb      	ldr	r3, [r5, #12]
 8008020:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008022:	9304      	str	r3, [sp, #16]
 8008024:	f7fa fb4f 	bl	80026c6 <lwip_htonl>
 8008028:	9b04      	ldr	r3, [sp, #16]
 800802a:	6098      	str	r0, [r3, #8]
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800802c:	68eb      	ldr	r3, [r5, #12]
 800802e:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 8008030:	9304      	str	r3, [sp, #16]
 8008032:	f7fa fb45 	bl	80026c0 <lwip_htons>
 8008036:	9b04      	ldr	r3, [sp, #16]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8008038:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800803a:	81d8      	strh	r0, [r3, #14]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800803c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800803e:	4413      	add	r3, r2
 8008040:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8008042:	7aaa      	ldrb	r2, [r5, #10]
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8008044:	68eb      	ldr	r3, [r5, #12]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8008046:	07d2      	lsls	r2, r2, #31
 8008048:	d450      	bmi.n	80080ec <tcp_output+0x224>
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800804a:	f103 0214 	add.w	r2, r3, #20
  if (pcb->rtime < 0) {
 800804e:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 8008052:	2b00      	cmp	r3, #0
    pcb->rtime = 0;
 8008054:	bfbc      	itt	lt
 8008056:	2300      	movlt	r3, #0
 8008058:	8623      	strhlt	r3, [r4, #48]	; 0x30
  if (pcb->rttest == 0) {
 800805a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800805c:	b94b      	cbnz	r3, 8008072 <tcp_output+0x1aa>
    pcb->rttest = tcp_ticks;
 800805e:	4b4c      	ldr	r3, [pc, #304]	; (8008190 <tcp_output+0x2c8>)
 8008060:	9204      	str	r2, [sp, #16]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	6363      	str	r3, [r4, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8008066:	68eb      	ldr	r3, [r5, #12]
 8008068:	6858      	ldr	r0, [r3, #4]
 800806a:	f7fa fb2c 	bl	80026c6 <lwip_htonl>
 800806e:	9a04      	ldr	r2, [sp, #16]
 8008070:	63a0      	str	r0, [r4, #56]	; 0x38
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8008072:	6869      	ldr	r1, [r5, #4]
 8008074:	68eb      	ldr	r3, [r5, #12]
 8008076:	6848      	ldr	r0, [r1, #4]
  seg->p->len -= len;
 8008078:	f8b1 e00a 	ldrh.w	lr, [r1, #10]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800807c:	1a18      	subs	r0, r3, r0
  seg->p->payload = seg->tcphdr;
 800807e:	604b      	str	r3, [r1, #4]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8008080:	b280      	uxth	r0, r0
  seg->p->len -= len;
 8008082:	ebae 0e00 	sub.w	lr, lr, r0
 8008086:	f8a1 e00a 	strh.w	lr, [r1, #10]
  seg->p->tot_len -= len;
 800808a:	f8b1 e008 	ldrh.w	lr, [r1, #8]
 800808e:	ebae 0000 	sub.w	r0, lr, r0
 8008092:	8108      	strh	r0, [r1, #8]
  seg->tcphdr->chksum = 0;
 8008094:	2100      	movs	r1, #0
 8008096:	7419      	strb	r1, [r3, #16]
 8008098:	7459      	strb	r1, [r3, #17]
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800809a:	7aa9      	ldrb	r1, [r5, #10]
 800809c:	f011 0f01 	tst.w	r1, #1
 80080a0:	bf14      	ite	ne
 80080a2:	2118      	movne	r1, #24
 80080a4:	2114      	moveq	r1, #20
 80080a6:	440b      	add	r3, r1
 80080a8:	429a      	cmp	r2, r3
 80080aa:	d006      	beq.n	80080ba <tcp_output+0x1f2>
 80080ac:	4653      	mov	r3, sl
 80080ae:	f240 621c 	movw	r2, #1564	; 0x61c
 80080b2:	4938      	ldr	r1, [pc, #224]	; (8008194 <tcp_output+0x2cc>)
 80080b4:	4658      	mov	r0, fp
 80080b6:	f001 f8db 	bl	8009270 <iprintf>
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80080ba:	2206      	movs	r2, #6
 80080bc:	7ae3      	ldrb	r3, [r4, #11]
 80080be:	f8cd 8008 	str.w	r8, [sp, #8]
 80080c2:	4621      	mov	r1, r4
 80080c4:	9201      	str	r2, [sp, #4]
 80080c6:	7aa2      	ldrb	r2, [r4, #10]
 80080c8:	9200      	str	r2, [sp, #0]
 80080ca:	464a      	mov	r2, r9
 80080cc:	6868      	ldr	r0, [r5, #4]
 80080ce:	f7fb f93f 	bl	8003350 <ip4_output_if>
    if (err != ERR_OK) {
 80080d2:	b1d8      	cbz	r0, 800810c <tcp_output+0x244>
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80080d4:	8b63      	ldrh	r3, [r4, #26]
 80080d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080da:	8363      	strh	r3, [r4, #26]
}
 80080dc:	b007      	add	sp, #28
 80080de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080e2:	461e      	mov	r6, r3
    for (; useg->next != NULL; useg = useg->next);
 80080e4:	6833      	ldr	r3, [r6, #0]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d1fb      	bne.n	80080e2 <tcp_output+0x21a>
 80080ea:	e753      	b.n	8007f94 <tcp_output+0xcc>
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80080ec:	464a      	mov	r2, r9
 80080ee:	4641      	mov	r1, r8
 80080f0:	f44f 7006 	mov.w	r0, #536	; 0x218
 80080f4:	9304      	str	r3, [sp, #16]
 80080f6:	f7fc feef 	bl	8004ed8 <tcp_eff_send_mss_netif>
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80080fa:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
 80080fe:	f7fa fae2 	bl	80026c6 <lwip_htonl>
 8008102:	9b04      	ldr	r3, [sp, #16]
 8008104:	6158      	str	r0, [r3, #20]
    opts += 1;
 8008106:	f103 0218 	add.w	r2, r3, #24
 800810a:	e7a0      	b.n	800804e <tcp_output+0x186>
    pcb->unsent = seg->next;
 800810c:	682b      	ldr	r3, [r5, #0]
 800810e:	66e3      	str	r3, [r4, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8008110:	7d23      	ldrb	r3, [r4, #20]
 8008112:	2b02      	cmp	r3, #2
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8008114:	bf1e      	ittt	ne
 8008116:	8b63      	ldrhne	r3, [r4, #26]
 8008118:	f023 0303 	bicne.w	r3, r3, #3
 800811c:	8363      	strhne	r3, [r4, #26]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800811e:	68eb      	ldr	r3, [r5, #12]
 8008120:	6858      	ldr	r0, [r3, #4]
 8008122:	f7fa fad0 	bl	80026c6 <lwip_htonl>
 8008126:	892a      	ldrh	r2, [r5, #8]
 8008128:	68e9      	ldr	r1, [r5, #12]
 800812a:	9204      	str	r2, [sp, #16]
 800812c:	9005      	str	r0, [sp, #20]
 800812e:	8988      	ldrh	r0, [r1, #12]
 8008130:	f7fa fac6 	bl	80026c0 <lwip_htons>
 8008134:	9a04      	ldr	r2, [sp, #16]
 8008136:	f010 0003 	ands.w	r0, r0, #3
 800813a:	9b05      	ldr	r3, [sp, #20]
 800813c:	bf18      	it	ne
 800813e:	2001      	movne	r0, #1
 8008140:	4413      	add	r3, r2
    if (TCP_TCPLEN(seg) > 0) {
 8008142:	68ea      	ldr	r2, [r5, #12]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8008144:	4418      	add	r0, r3
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8008146:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8008148:	1a1b      	subs	r3, r3, r0
 800814a:	2b00      	cmp	r3, #0
    if (TCP_TCPLEN(seg) > 0) {
 800814c:	892b      	ldrh	r3, [r5, #8]
      pcb->snd_nxt = snd_nxt;
 800814e:	bfb8      	it	lt
 8008150:	6520      	strlt	r0, [r4, #80]	; 0x50
    if (TCP_TCPLEN(seg) > 0) {
 8008152:	9304      	str	r3, [sp, #16]
 8008154:	8990      	ldrh	r0, [r2, #12]
 8008156:	f7fa fab3 	bl	80026c0 <lwip_htons>
 800815a:	f010 0003 	ands.w	r0, r0, #3
 800815e:	9b04      	ldr	r3, [sp, #16]
 8008160:	bf18      	it	ne
 8008162:	2001      	movne	r0, #1
 8008164:	42d8      	cmn	r0, r3
 8008166:	d04c      	beq.n	8008202 <tcp_output+0x33a>
      seg->next = NULL;
 8008168:	2300      	movs	r3, #0
 800816a:	602b      	str	r3, [r5, #0]
      if (pcb->unacked == NULL) {
 800816c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800816e:	b99b      	cbnz	r3, 8008198 <tcp_output+0x2d0>
        pcb->unacked = seg;
 8008170:	6725      	str	r5, [r4, #112]	; 0x70
          useg->next = seg;
 8008172:	462e      	mov	r6, r5
 8008174:	e024      	b.n	80081c0 <tcp_output+0x2f8>
 8008176:	bf00      	nop
 8008178:	0800c932 	.word	0x0800c932
 800817c:	0800c828 	.word	0x0800c828
 8008180:	0800b013 	.word	0x0800b013
 8008184:	0800c840 	.word	0x0800c840
 8008188:	20003bac 	.word	0x20003bac
 800818c:	0800c866 	.word	0x0800c866
 8008190:	20003b9c 	.word	0x20003b9c
 8008194:	0800c87d 	.word	0x0800c87d
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8008198:	68eb      	ldr	r3, [r5, #12]
 800819a:	6858      	ldr	r0, [r3, #4]
 800819c:	f7fa fa93 	bl	80026c6 <lwip_htonl>
 80081a0:	68f2      	ldr	r2, [r6, #12]
 80081a2:	9004      	str	r0, [sp, #16]
 80081a4:	6850      	ldr	r0, [r2, #4]
 80081a6:	f7fa fa8e 	bl	80026c6 <lwip_htonl>
 80081aa:	9b04      	ldr	r3, [sp, #16]
 80081ac:	1a18      	subs	r0, r3, r0
 80081ae:	2800      	cmp	r0, #0
 80081b0:	da25      	bge.n	80081fe <tcp_output+0x336>
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80081b2:	f104 0370 	add.w	r3, r4, #112	; 0x70
          while (*cur_seg &&
 80081b6:	681a      	ldr	r2, [r3, #0]
 80081b8:	b982      	cbnz	r2, 80081dc <tcp_output+0x314>
          seg->next = (*cur_seg);
 80081ba:	681a      	ldr	r2, [r3, #0]
 80081bc:	602a      	str	r2, [r5, #0]
          (*cur_seg) = seg;
 80081be:	601d      	str	r5, [r3, #0]
    seg = pcb->unsent;
 80081c0:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  while (seg != NULL &&
 80081c2:	2d00      	cmp	r5, #0
 80081c4:	f47f aeea 	bne.w	8007f9c <tcp_output+0xd4>
  if (pcb->unsent == NULL) {
 80081c8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80081ca:	b90b      	cbnz	r3, 80081d0 <tcp_output+0x308>
    pcb->unsent_oversize = 0;
 80081cc:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80081d0:	8b63      	ldrh	r3, [r4, #26]
 80081d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80081d6:	8363      	strh	r3, [r4, #26]
    return ERR_OK;
 80081d8:	2000      	movs	r0, #0
 80081da:	e77f      	b.n	80080dc <tcp_output+0x214>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80081dc:	68d2      	ldr	r2, [r2, #12]
 80081de:	9305      	str	r3, [sp, #20]
 80081e0:	6850      	ldr	r0, [r2, #4]
 80081e2:	f7fa fa70 	bl	80026c6 <lwip_htonl>
 80081e6:	68e9      	ldr	r1, [r5, #12]
 80081e8:	9004      	str	r0, [sp, #16]
 80081ea:	6848      	ldr	r0, [r1, #4]
 80081ec:	f7fa fa6b 	bl	80026c6 <lwip_htonl>
 80081f0:	9a04      	ldr	r2, [sp, #16]
          while (*cur_seg &&
 80081f2:	9b05      	ldr	r3, [sp, #20]
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80081f4:	1a10      	subs	r0, r2, r0
          while (*cur_seg &&
 80081f6:	2800      	cmp	r0, #0
 80081f8:	dadf      	bge.n	80081ba <tcp_output+0x2f2>
            cur_seg = &((*cur_seg)->next );
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	e7db      	b.n	80081b6 <tcp_output+0x2ee>
          useg->next = seg;
 80081fe:	6035      	str	r5, [r6, #0]
 8008200:	e7b7      	b.n	8008172 <tcp_output+0x2aa>
      tcp_seg_free(seg);
 8008202:	4628      	mov	r0, r5
 8008204:	f7fc fd8e 	bl	8004d24 <tcp_seg_free>
 8008208:	e7da      	b.n	80081c0 <tcp_output+0x2f8>
    return ERR_RTE;
 800820a:	f06f 0003 	mvn.w	r0, #3
 800820e:	e765      	b.n	80080dc <tcp_output+0x214>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8008210:	f012 0fa0 	tst.w	r2, #160	; 0xa0
 8008214:	f47f aef0 	bne.w	8007ff8 <tcp_output+0x130>
 8008218:	e7d6      	b.n	80081c8 <tcp_output+0x300>
 800821a:	bf00      	nop

0800821c <tcp_rexmit_rto_commit>:
{
 800821c:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800821e:	4604      	mov	r4, r0
 8008220:	b930      	cbnz	r0, 8008230 <tcp_rexmit_rto_commit+0x14>
 8008222:	4b09      	ldr	r3, [pc, #36]	; (8008248 <tcp_rexmit_rto_commit+0x2c>)
 8008224:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8008228:	4908      	ldr	r1, [pc, #32]	; (800824c <tcp_rexmit_rto_commit+0x30>)
 800822a:	4809      	ldr	r0, [pc, #36]	; (8008250 <tcp_rexmit_rto_commit+0x34>)
 800822c:	f001 f820 	bl	8009270 <iprintf>
  if (pcb->nrtx < 0xFF) {
 8008230:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
  tcp_output(pcb);
 8008234:	4620      	mov	r0, r4
  if (pcb->nrtx < 0xFF) {
 8008236:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->nrtx;
 8008238:	bf1c      	itt	ne
 800823a:	3301      	addne	r3, #1
 800823c:	f884 3042 	strbne.w	r3, [r4, #66]	; 0x42
}
 8008240:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tcp_output(pcb);
 8008244:	f7ff be40 	b.w	8007ec8 <tcp_output>
 8008248:	0800c932 	.word	0x0800c932
 800824c:	0800ca32 	.word	0x0800ca32
 8008250:	0800b013 	.word	0x0800b013

08008254 <tcp_rexmit_rto>:
{
 8008254:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8008256:	4604      	mov	r4, r0
 8008258:	b930      	cbnz	r0, 8008268 <tcp_rexmit_rto+0x14>
 800825a:	4b08      	ldr	r3, [pc, #32]	; (800827c <tcp_rexmit_rto+0x28>)
 800825c:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8008260:	4907      	ldr	r1, [pc, #28]	; (8008280 <tcp_rexmit_rto+0x2c>)
 8008262:	4808      	ldr	r0, [pc, #32]	; (8008284 <tcp_rexmit_rto+0x30>)
 8008264:	f001 f804 	bl	8009270 <iprintf>
  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8008268:	4620      	mov	r0, r4
 800826a:	f7ff fcfb 	bl	8007c64 <tcp_rexmit_rto_prepare>
 800826e:	b920      	cbnz	r0, 800827a <tcp_rexmit_rto+0x26>
    tcp_rexmit_rto_commit(pcb);
 8008270:	4620      	mov	r0, r4
}
 8008272:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tcp_rexmit_rto_commit(pcb);
 8008276:	f7ff bfd1 	b.w	800821c <tcp_rexmit_rto_commit>
 800827a:	bd10      	pop	{r4, pc}
 800827c:	0800c932 	.word	0x0800c932
 8008280:	0800ca16 	.word	0x0800ca16
 8008284:	0800b013 	.word	0x0800b013

08008288 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8008288:	b570      	push	{r4, r5, r6, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800828a:	4604      	mov	r4, r0
 800828c:	b930      	cbnz	r0, 800829c <tcp_keepalive+0x14>
 800828e:	4b0f      	ldr	r3, [pc, #60]	; (80082cc <tcp_keepalive+0x44>)
 8008290:	f640 0224 	movw	r2, #2084	; 0x824
 8008294:	490e      	ldr	r1, [pc, #56]	; (80082d0 <tcp_keepalive+0x48>)
 8008296:	480f      	ldr	r0, [pc, #60]	; (80082d4 <tcp_keepalive+0x4c>)
 8008298:	f000 ffea 	bl	8009270 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800829c:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800829e:	3801      	subs	r0, #1
 80082a0:	f7fa fa11 	bl	80026c6 <lwip_htonl>
 80082a4:	2100      	movs	r1, #0
 80082a6:	4602      	mov	r2, r0
 80082a8:	4620      	mov	r0, r4
 80082aa:	f7ff f839 	bl	8007320 <tcp_output_alloc_header.constprop.2>
  if (p == NULL) {
 80082ae:	4605      	mov	r5, r0
 80082b0:	b148      	cbz	r0, 80082c6 <tcp_keepalive+0x3e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80082b2:	f7ff f85b 	bl	800736c <tcp_output_fill_options.isra.0.constprop.4>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80082b6:	1d23      	adds	r3, r4, #4
 80082b8:	4622      	mov	r2, r4
 80082ba:	4629      	mov	r1, r5
 80082bc:	4620      	mov	r0, r4

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 80082be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80082c2:	f7ff b863 	b.w	800738c <tcp_output_control_segment>
}
 80082c6:	f04f 30ff 	mov.w	r0, #4294967295
 80082ca:	bd70      	pop	{r4, r5, r6, pc}
 80082cc:	0800c932 	.word	0x0800c932
 80082d0:	0800c80d 	.word	0x0800c80d
 80082d4:	0800b013 	.word	0x0800b013

080082d8 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80082d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80082dc:	4605      	mov	r5, r0
 80082de:	b930      	cbnz	r0, 80082ee <tcp_zero_window_probe+0x16>
 80082e0:	4b2c      	ldr	r3, [pc, #176]	; (8008394 <tcp_zero_window_probe+0xbc>)
 80082e2:	f640 024f 	movw	r2, #2127	; 0x84f
 80082e6:	492c      	ldr	r1, [pc, #176]	; (8008398 <tcp_zero_window_probe+0xc0>)
 80082e8:	482c      	ldr	r0, [pc, #176]	; (800839c <tcp_zero_window_probe+0xc4>)
 80082ea:	f000 ffc1 	bl	8009270 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80082ee:	6eec      	ldr	r4, [r5, #108]	; 0x6c
  if (seg == NULL) {
 80082f0:	2c00      	cmp	r4, #0
 80082f2:	d048      	beq.n	8008386 <tcp_zero_window_probe+0xae>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80082f4:	f895 309a 	ldrb.w	r3, [r5, #154]	; 0x9a
 80082f8:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->persist_probe;
 80082fa:	bf1c      	itt	ne
 80082fc:	3301      	addne	r3, #1
 80082fe:	f885 309a 	strbne.w	r3, [r5, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8008302:	68e3      	ldr	r3, [r4, #12]
 8008304:	8998      	ldrh	r0, [r3, #12]
 8008306:	f7fa f9db 	bl	80026c0 <lwip_htons>
 800830a:	f010 0601 	ands.w	r6, r0, #1
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800830e:	68e3      	ldr	r3, [r4, #12]
 8008310:	4628      	mov	r0, r5
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8008312:	bf18      	it	ne
 8008314:	8926      	ldrhne	r6, [r4, #8]
  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8008316:	685a      	ldr	r2, [r3, #4]
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8008318:	bf1c      	itt	ne
 800831a:	fab6 f686 	clzne	r6, r6
 800831e:	0976      	lsrne	r6, r6, #5
  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8008320:	f086 0101 	eor.w	r1, r6, #1
 8008324:	f7fe fffc 	bl	8007320 <tcp_output_alloc_header.constprop.2>
  if (p == NULL) {
 8008328:	4607      	mov	r7, r0
 800832a:	b378      	cbz	r0, 800838c <tcp_zero_window_probe+0xb4>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800832c:	f8d0 8004 	ldr.w	r8, [r0, #4]

  if (is_fin) {
 8008330:	b1f6      	cbz	r6, 8008370 <tcp_zero_window_probe+0x98>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8008332:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 8008336:	2011      	movs	r0, #17
 8008338:	f7fa f9c2 	bl	80026c0 <lwip_htons>
 800833c:	f426 567c 	bic.w	r6, r6, #16128	; 0x3f00
 8008340:	4330      	orrs	r0, r6
 8008342:	f8a8 000c 	strh.w	r0, [r8, #12]
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8008346:	68e3      	ldr	r3, [r4, #12]
 8008348:	6858      	ldr	r0, [r3, #4]
 800834a:	f7fa f9bc 	bl	80026c6 <lwip_htonl>
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800834e:	6d2b      	ldr	r3, [r5, #80]	; 0x50
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8008350:	3001      	adds	r0, #1
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8008352:	1a1b      	subs	r3, r3, r0
 8008354:	2b00      	cmp	r3, #0
    pcb->snd_nxt = snd_nxt;
 8008356:	bfb8      	it	lt
 8008358:	6528      	strlt	r0, [r5, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800835a:	4638      	mov	r0, r7
 800835c:	f7ff f806 	bl	800736c <tcp_output_fill_options.isra.0.constprop.4>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8008360:	1d2b      	adds	r3, r5, #4
 8008362:	462a      	mov	r2, r5
 8008364:	4639      	mov	r1, r7
 8008366:	4628      	mov	r0, r5

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 8008368:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800836c:	f7ff b80e 	b.w	800738c <tcp_output_control_segment>
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8008370:	6860      	ldr	r0, [r4, #4]
 8008372:	f108 0114 	add.w	r1, r8, #20
 8008376:	8922      	ldrh	r2, [r4, #8]
 8008378:	8903      	ldrh	r3, [r0, #8]
 800837a:	1a9b      	subs	r3, r3, r2
 800837c:	2201      	movs	r2, #1
 800837e:	b29b      	uxth	r3, r3
 8008380:	f7fc fac0 	bl	8004904 <pbuf_copy_partial>
 8008384:	e7df      	b.n	8008346 <tcp_zero_window_probe+0x6e>
    return ERR_OK;
 8008386:	4620      	mov	r0, r4
 8008388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return ERR_MEM;
 800838c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8008390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008394:	0800c932 	.word	0x0800c932
 8008398:	0800cd90 	.word	0x0800cd90
 800839c:	0800b013 	.word	0x0800b013

080083a0 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80083a0:	b570      	push	{r4, r5, r6, lr}
 80083a2:	4604      	mov	r4, r0
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80083a4:	2006      	movs	r0, #6
{
 80083a6:	460e      	mov	r6, r1
 80083a8:	4615      	mov	r5, r2
  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80083aa:	f7fb fe2f 	bl	800400c <memp_malloc>
  if (timeout == NULL) {
 80083ae:	b938      	cbnz	r0, 80083c0 <sys_timeout_abs+0x20>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80083b0:	4b10      	ldr	r3, [pc, #64]	; (80083f4 <sys_timeout_abs+0x54>)
 80083b2:	22be      	movs	r2, #190	; 0xbe
 80083b4:	4910      	ldr	r1, [pc, #64]	; (80083f8 <sys_timeout_abs+0x58>)
 80083b6:	4811      	ldr	r0, [pc, #68]	; (80083fc <sys_timeout_abs+0x5c>)
        t->next = timeout;
        break;
      }
    }
  }
}
 80083b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80083bc:	f000 bf58 	b.w	8009270 <iprintf>
  timeout->next = NULL;
 80083c0:	2300      	movs	r3, #0
  if (next_timeout == NULL) {
 80083c2:	4a0f      	ldr	r2, [pc, #60]	; (8008400 <sys_timeout_abs+0x60>)
  timeout->h = handler;
 80083c4:	6086      	str	r6, [r0, #8]
  timeout->next = NULL;
 80083c6:	6003      	str	r3, [r0, #0]
  if (next_timeout == NULL) {
 80083c8:	6813      	ldr	r3, [r2, #0]
  timeout->arg = arg;
 80083ca:	60c5      	str	r5, [r0, #12]
  timeout->time = abs_time;
 80083cc:	6044      	str	r4, [r0, #4]
  if (next_timeout == NULL) {
 80083ce:	b90b      	cbnz	r3, 80083d4 <sys_timeout_abs+0x34>
    next_timeout = timeout;
 80083d0:	6010      	str	r0, [r2, #0]
 80083d2:	bd70      	pop	{r4, r5, r6, pc}
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80083d4:	6859      	ldr	r1, [r3, #4]
 80083d6:	1a61      	subs	r1, r4, r1
 80083d8:	2900      	cmp	r1, #0
 80083da:	da02      	bge.n	80083e2 <sys_timeout_abs+0x42>
    timeout->next = next_timeout;
 80083dc:	6003      	str	r3, [r0, #0]
 80083de:	e7f7      	b.n	80083d0 <sys_timeout_abs+0x30>
 80083e0:	4613      	mov	r3, r2
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80083e2:	681a      	ldr	r2, [r3, #0]
 80083e4:	b11a      	cbz	r2, 80083ee <sys_timeout_abs+0x4e>
 80083e6:	6851      	ldr	r1, [r2, #4]
 80083e8:	1a61      	subs	r1, r4, r1
 80083ea:	2900      	cmp	r1, #0
 80083ec:	daf8      	bge.n	80083e0 <sys_timeout_abs+0x40>
        timeout->next = t->next;
 80083ee:	6002      	str	r2, [r0, #0]
        t->next = timeout;
 80083f0:	6018      	str	r0, [r3, #0]
        break;
 80083f2:	bd70      	pop	{r4, r5, r6, pc}
 80083f4:	0800ce02 	.word	0x0800ce02
 80083f8:	0800ce36 	.word	0x0800ce36
 80083fc:	0800b013 	.word	0x0800b013
 8008400:	20000644 	.word	0x20000644

08008404 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8008404:	b538      	push	{r3, r4, r5, lr}
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8008406:	6843      	ldr	r3, [r0, #4]
{
 8008408:	4604      	mov	r4, r0
  cyclic->handler();
 800840a:	4798      	blx	r3

  now = sys_now();
 800840c:	f000 fc04 	bl	8008c18 <sys_now>
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8008410:	4b07      	ldr	r3, [pc, #28]	; (8008430 <lwip_cyclic_timer+0x2c>)
 8008412:	6825      	ldr	r5, [r4, #0]
 8008414:	681b      	ldr	r3, [r3, #0]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8008416:	4907      	ldr	r1, [pc, #28]	; (8008434 <lwip_cyclic_timer+0x30>)
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8008418:	442b      	add	r3, r5
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800841a:	1a1a      	subs	r2, r3, r0
 800841c:	2a00      	cmp	r2, #0
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800841e:	4622      	mov	r2, r4
 8008420:	bfb4      	ite	lt
 8008422:	1940      	addlt	r0, r0, r5
  } else {
    /* correct cyclic interval with handler execution delay and sys_check_timeouts jitter */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8008424:	4618      	movge	r0, r3
#endif
  }
}
 8008426:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800842a:	f7ff bfb9 	b.w	80083a0 <sys_timeout_abs>
 800842e:	bf00      	nop
 8008430:	20000640 	.word	0x20000640
 8008434:	08008405 	.word	0x08008405

08008438 <sys_timeout>:
{
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8008438:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
{
 800843c:	b570      	push	{r4, r5, r6, lr}
 800843e:	4604      	mov	r4, r0
 8008440:	460d      	mov	r5, r1
 8008442:	4616      	mov	r6, r2
  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8008444:	d306      	bcc.n	8008454 <sys_timeout+0x1c>
 8008446:	4b08      	ldr	r3, [pc, #32]	; (8008468 <sys_timeout+0x30>)
 8008448:	f240 1229 	movw	r2, #297	; 0x129
 800844c:	4907      	ldr	r1, [pc, #28]	; (800846c <sys_timeout+0x34>)
 800844e:	4808      	ldr	r0, [pc, #32]	; (8008470 <sys_timeout+0x38>)
 8008450:	f000 ff0e 	bl	8009270 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8008454:	f000 fbe0 	bl	8008c18 <sys_now>

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8008458:	4632      	mov	r2, r6
 800845a:	4629      	mov	r1, r5
 800845c:	4420      	add	r0, r4
#endif
}
 800845e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 8008462:	f7ff bf9d 	b.w	80083a0 <sys_timeout_abs>
 8008466:	bf00      	nop
 8008468:	0800ce02 	.word	0x0800ce02
 800846c:	0800cdcc 	.word	0x0800cdcc
 8008470:	0800b013 	.word	0x0800b013

08008474 <tcp_timer_needed>:
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8008474:	4b08      	ldr	r3, [pc, #32]	; (8008498 <tcp_timer_needed+0x24>)
 8008476:	681a      	ldr	r2, [r3, #0]
 8008478:	b962      	cbnz	r2, 8008494 <tcp_timer_needed+0x20>
 800847a:	4a08      	ldr	r2, [pc, #32]	; (800849c <tcp_timer_needed+0x28>)
 800847c:	6812      	ldr	r2, [r2, #0]
 800847e:	b912      	cbnz	r2, 8008486 <tcp_timer_needed+0x12>
 8008480:	4a07      	ldr	r2, [pc, #28]	; (80084a0 <tcp_timer_needed+0x2c>)
 8008482:	6812      	ldr	r2, [r2, #0]
 8008484:	b132      	cbz	r2, 8008494 <tcp_timer_needed+0x20>
    tcpip_tcp_timer_active = 1;
 8008486:	2201      	movs	r2, #1
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8008488:	4906      	ldr	r1, [pc, #24]	; (80084a4 <tcp_timer_needed+0x30>)
 800848a:	20fa      	movs	r0, #250	; 0xfa
    tcpip_tcp_timer_active = 1;
 800848c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800848e:	2200      	movs	r2, #0
 8008490:	f7ff bfd2 	b.w	8008438 <sys_timeout>
 8008494:	4770      	bx	lr
 8008496:	bf00      	nop
 8008498:	20000648 	.word	0x20000648
 800849c:	20003b98 	.word	0x20003b98
 80084a0:	20003ba8 	.word	0x20003ba8
 80084a4:	080084a9 	.word	0x080084a9

080084a8 <tcpip_tcp_timer>:
{
 80084a8:	b508      	push	{r3, lr}
  tcp_tmr();
 80084aa:	f7fd fb25 	bl	8005af8 <tcp_tmr>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80084ae:	4b08      	ldr	r3, [pc, #32]	; (80084d0 <tcpip_tcp_timer+0x28>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	b913      	cbnz	r3, 80084ba <tcpip_tcp_timer+0x12>
 80084b4:	4b07      	ldr	r3, [pc, #28]	; (80084d4 <tcpip_tcp_timer+0x2c>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	b133      	cbz	r3, 80084c8 <tcpip_tcp_timer+0x20>
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80084ba:	2200      	movs	r2, #0
 80084bc:	4906      	ldr	r1, [pc, #24]	; (80084d8 <tcpip_tcp_timer+0x30>)
 80084be:	20fa      	movs	r0, #250	; 0xfa
}
 80084c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80084c4:	f7ff bfb8 	b.w	8008438 <sys_timeout>
    tcpip_tcp_timer_active = 0;
 80084c8:	4a04      	ldr	r2, [pc, #16]	; (80084dc <tcpip_tcp_timer+0x34>)
 80084ca:	6013      	str	r3, [r2, #0]
 80084cc:	bd08      	pop	{r3, pc}
 80084ce:	bf00      	nop
 80084d0:	20003b98 	.word	0x20003b98
 80084d4:	20003ba8 	.word	0x20003ba8
 80084d8:	080084a9 	.word	0x080084a9
 80084dc:	20000648 	.word	0x20000648

080084e0 <sys_timeouts_init>:
{
 80084e0:	b538      	push	{r3, r4, r5, lr}
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80084e2:	4d09      	ldr	r5, [pc, #36]	; (8008508 <sys_timeouts_init+0x28>)
 80084e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80084e8:	4c08      	ldr	r4, [pc, #32]	; (800850c <sys_timeouts_init+0x2c>)
 80084ea:	f105 0208 	add.w	r2, r5, #8
 80084ee:	4621      	mov	r1, r4
 80084f0:	f7ff ffa2 	bl	8008438 <sys_timeout>
 80084f4:	f105 0210 	add.w	r2, r5, #16
 80084f8:	4621      	mov	r1, r4
 80084fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
}
 80084fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8008502:	f7ff bf99 	b.w	8008438 <sys_timeout>
 8008506:	bf00      	nop
 8008508:	0800cdb4 	.word	0x0800cdb4
 800850c:	08008405 	.word	0x08008405

08008510 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8008510:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8008514:	f000 fb80 	bl	8008c18 <sys_now>
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 8008518:	f8df 8044 	ldr.w	r8, [pc, #68]	; 8008560 <sys_check_timeouts+0x50>
  now = sys_now();
 800851c:	4607      	mov	r7, r0

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
    handler = tmptimeout->h;
    arg = tmptimeout->arg;
    current_timeout_due_time = tmptimeout->time;
 800851e:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8008564 <sys_check_timeouts+0x54>
    tmptimeout = next_timeout;
 8008522:	4d0e      	ldr	r5, [pc, #56]	; (800855c <sys_check_timeouts+0x4c>)
    PBUF_CHECK_FREE_OOSEQ();
 8008524:	f898 3000 	ldrb.w	r3, [r8]
 8008528:	b10b      	cbz	r3, 800852e <sys_check_timeouts+0x1e>
 800852a:	f7fb ff45 	bl	80043b8 <pbuf_free_ooseq>
    tmptimeout = next_timeout;
 800852e:	6829      	ldr	r1, [r5, #0]
    if (tmptimeout == NULL) {
 8008530:	b189      	cbz	r1, 8008556 <sys_check_timeouts+0x46>
    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8008532:	684b      	ldr	r3, [r1, #4]
 8008534:	1afa      	subs	r2, r7, r3
 8008536:	2a00      	cmp	r2, #0
 8008538:	db0d      	blt.n	8008556 <sys_check_timeouts+0x46>
    next_timeout = tmptimeout->next;
 800853a:	680a      	ldr	r2, [r1, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800853c:	2006      	movs	r0, #6
    handler = tmptimeout->h;
 800853e:	688c      	ldr	r4, [r1, #8]
    next_timeout = tmptimeout->next;
 8008540:	602a      	str	r2, [r5, #0]
    arg = tmptimeout->arg;
 8008542:	68ce      	ldr	r6, [r1, #12]
    current_timeout_due_time = tmptimeout->time;
 8008544:	f8c9 3000 	str.w	r3, [r9]
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8008548:	f7fb fd7c 	bl	8004044 <memp_free>
    if (handler != NULL) {
 800854c:	2c00      	cmp	r4, #0
 800854e:	d0e9      	beq.n	8008524 <sys_check_timeouts+0x14>
      handler(arg);
 8008550:	4630      	mov	r0, r6
 8008552:	47a0      	blx	r4
 8008554:	e7e5      	b.n	8008522 <sys_check_timeouts+0x12>
 8008556:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800855a:	bf00      	nop
 800855c:	20000644 	.word	0x20000644
 8008560:	20003b90 	.word	0x20003b90
 8008564:	20000640 	.word	0x20000640

08008568 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8008568:	b508      	push	{r3, lr}
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800856a:	f000 fe99 	bl	80092a0 <rand>
 800856e:	ea6f 4080 	mvn.w	r0, r0, lsl #18
 8008572:	4b02      	ldr	r3, [pc, #8]	; (800857c <udp_init+0x14>)
 8008574:	ea6f 4090 	mvn.w	r0, r0, lsr #18
 8008578:	8018      	strh	r0, [r3, #0]
 800857a:	bd08      	pop	{r3, pc}
 800857c:	2000000e 	.word	0x2000000e

08008580 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8008580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008584:	4688      	mov	r8, r1
 8008586:	b085      	sub	sp, #20

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8008588:	4607      	mov	r7, r0
 800858a:	b928      	cbnz	r0, 8008598 <udp_input+0x18>
 800858c:	4b5d      	ldr	r3, [pc, #372]	; (8008704 <udp_input+0x184>)
 800858e:	22cf      	movs	r2, #207	; 0xcf
 8008590:	495d      	ldr	r1, [pc, #372]	; (8008708 <udp_input+0x188>)
 8008592:	485e      	ldr	r0, [pc, #376]	; (800870c <udp_input+0x18c>)
 8008594:	f000 fe6c 	bl	8009270 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8008598:	f1b8 0f00 	cmp.w	r8, #0
 800859c:	d105      	bne.n	80085aa <udp_input+0x2a>
 800859e:	4b59      	ldr	r3, [pc, #356]	; (8008704 <udp_input+0x184>)
 80085a0:	22d0      	movs	r2, #208	; 0xd0
 80085a2:	495b      	ldr	r1, [pc, #364]	; (8008710 <udp_input+0x190>)
 80085a4:	4859      	ldr	r0, [pc, #356]	; (800870c <udp_input+0x18c>)
 80085a6:	f000 fe63 	bl	8009270 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80085aa:	897b      	ldrh	r3, [r7, #10]
 80085ac:	2b07      	cmp	r3, #7
 80085ae:	d805      	bhi.n	80085bc <udp_input+0x3c>
    if (pbuf_remove_header(p, UDP_HLEN)) {
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80085b0:	4638      	mov	r0, r7
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80085b2:	b005      	add	sp, #20
 80085b4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pbuf_free(p);
 80085b8:	f7fb bf86 	b.w	80044c8 <pbuf_free>
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80085bc:	4e55      	ldr	r6, [pc, #340]	; (8008714 <udp_input+0x194>)
  uncon_pcb = NULL;
 80085be:	2500      	movs	r5, #0
  udphdr = (struct udp_hdr *)p->payload;
 80085c0:	687c      	ldr	r4, [r7, #4]
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80085c2:	6831      	ldr	r1, [r6, #0]
  prev = NULL;
 80085c4:	46ab      	mov	fp, r5
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80085c6:	6970      	ldr	r0, [r6, #20]
 80085c8:	f7fa fed3 	bl	8003372 <ip4_addr_isbroadcast_u32>
 80085cc:	4682      	mov	sl, r0
  src = lwip_ntohs(udphdr->src);
 80085ce:	8820      	ldrh	r0, [r4, #0]
 80085d0:	f7fa f876 	bl	80026c0 <lwip_htons>
 80085d4:	9002      	str	r0, [sp, #8]
  dest = lwip_ntohs(udphdr->dest);
 80085d6:	8860      	ldrh	r0, [r4, #2]
 80085d8:	f7fa f872 	bl	80026c0 <lwip_htons>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80085dc:	4b4e      	ldr	r3, [pc, #312]	; (8008718 <udp_input+0x198>)
  dest = lwip_ntohs(udphdr->dest);
 80085de:	9003      	str	r0, [sp, #12]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80085e0:	681c      	ldr	r4, [r3, #0]
 80085e2:	4699      	mov	r9, r3
 80085e4:	b93c      	cbnz	r4, 80085f6 <udp_input+0x76>
  if (pcb != NULL) {
 80085e6:	2d00      	cmp	r5, #0
 80085e8:	d144      	bne.n	8008674 <udp_input+0xf4>
  if (for_us) {
 80085ea:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80085ee:	6973      	ldr	r3, [r6, #20]
 80085f0:	429a      	cmp	r2, r3
 80085f2:	d1dd      	bne.n	80085b0 <udp_input+0x30>
 80085f4:	e03e      	b.n	8008674 <udp_input+0xf4>
    if ((pcb->local_port == dest) &&
 80085f6:	8a63      	ldrh	r3, [r4, #18]
 80085f8:	9a03      	ldr	r2, [sp, #12]
 80085fa:	4293      	cmp	r3, r2
 80085fc:	d14c      	bne.n	8008698 <udp_input+0x118>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80085fe:	f1b8 0f00 	cmp.w	r8, #0
 8008602:	d105      	bne.n	8008610 <udp_input+0x90>
 8008604:	4b3f      	ldr	r3, [pc, #252]	; (8008704 <udp_input+0x184>)
 8008606:	2288      	movs	r2, #136	; 0x88
 8008608:	4944      	ldr	r1, [pc, #272]	; (800871c <udp_input+0x19c>)
 800860a:	4840      	ldr	r0, [pc, #256]	; (800870c <udp_input+0x18c>)
 800860c:	f000 fe30 	bl	8009270 <iprintf>
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008610:	7a22      	ldrb	r2, [r4, #8]
 8008612:	b132      	cbz	r2, 8008622 <udp_input+0xa2>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008614:	6873      	ldr	r3, [r6, #4]
 8008616:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800861a:	3301      	adds	r3, #1
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800861c:	b2db      	uxtb	r3, r3
 800861e:	429a      	cmp	r2, r3
 8008620:	d13a      	bne.n	8008698 <udp_input+0x118>
 8008622:	6823      	ldr	r3, [r4, #0]
    if (broadcast != 0) {
 8008624:	f1ba 0f00 	cmp.w	sl, #0
 8008628:	d031      	beq.n	800868e <udp_input+0x10e>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800862a:	b13b      	cbz	r3, 800863c <udp_input+0xbc>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800862c:	6972      	ldr	r2, [r6, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800862e:	1c51      	adds	r1, r2, #1
 8008630:	d004      	beq.n	800863c <udp_input+0xbc>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8008632:	405a      	eors	r2, r3
 8008634:	f8d8 1008 	ldr.w	r1, [r8, #8]
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8008638:	420a      	tst	r2, r1
 800863a:	d12d      	bne.n	8008698 <udp_input+0x118>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800863c:	7c22      	ldrb	r2, [r4, #16]
 800863e:	0752      	lsls	r2, r2, #29
 8008640:	d40e      	bmi.n	8008660 <udp_input+0xe0>
        if (uncon_pcb == NULL) {
 8008642:	b365      	cbz	r5, 800869e <udp_input+0x11e>
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8008644:	f1ba 0f00 	cmp.w	sl, #0
 8008648:	d00a      	beq.n	8008660 <udp_input+0xe0>
 800864a:	6972      	ldr	r2, [r6, #20]
 800864c:	3201      	adds	r2, #1
 800864e:	d107      	bne.n	8008660 <udp_input+0xe0>
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8008650:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8008654:	6829      	ldr	r1, [r5, #0]
 8008656:	4291      	cmp	r1, r2
 8008658:	d002      	beq.n	8008660 <udp_input+0xe0>
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800865a:	429a      	cmp	r2, r3
 800865c:	bf08      	it	eq
 800865e:	4625      	moveq	r5, r4
      if ((pcb->remote_port == src) &&
 8008660:	8aa3      	ldrh	r3, [r4, #20]
 8008662:	9a02      	ldr	r2, [sp, #8]
 8008664:	4293      	cmp	r3, r2
 8008666:	d117      	bne.n	8008698 <udp_input+0x118>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8008668:	6863      	ldr	r3, [r4, #4]
      if ((pcb->remote_port == src) &&
 800866a:	b9d3      	cbnz	r3, 80086a2 <udp_input+0x122>
        if (prev != NULL) {
 800866c:	f1bb 0f00 	cmp.w	fp, #0
 8008670:	d11b      	bne.n	80086aa <udp_input+0x12a>
 8008672:	4625      	mov	r5, r4
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8008674:	2108      	movs	r1, #8
 8008676:	4638      	mov	r0, r7
 8008678:	f7fb fef2 	bl	8004460 <pbuf_remove_header>
 800867c:	b1f0      	cbz	r0, 80086bc <udp_input+0x13c>
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800867e:	4b21      	ldr	r3, [pc, #132]	; (8008704 <udp_input+0x184>)
 8008680:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8008684:	4926      	ldr	r1, [pc, #152]	; (8008720 <udp_input+0x1a0>)
 8008686:	4821      	ldr	r0, [pc, #132]	; (800870c <udp_input+0x18c>)
 8008688:	f000 fdf2 	bl	8009270 <iprintf>
 800868c:	e790      	b.n	80085b0 <udp_input+0x30>
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800868e:	2b00      	cmp	r3, #0
 8008690:	d0d4      	beq.n	800863c <udp_input+0xbc>
 8008692:	6972      	ldr	r2, [r6, #20]
 8008694:	4293      	cmp	r3, r2
 8008696:	d0d1      	beq.n	800863c <udp_input+0xbc>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8008698:	46a3      	mov	fp, r4
 800869a:	68e4      	ldr	r4, [r4, #12]
 800869c:	e7a2      	b.n	80085e4 <udp_input+0x64>
 800869e:	4625      	mov	r5, r4
 80086a0:	e7de      	b.n	8008660 <udp_input+0xe0>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80086a2:	6932      	ldr	r2, [r6, #16]
 80086a4:	4293      	cmp	r3, r2
 80086a6:	d1f7      	bne.n	8008698 <udp_input+0x118>
 80086a8:	e7e0      	b.n	800866c <udp_input+0xec>
          prev->next = pcb->next;
 80086aa:	68e3      	ldr	r3, [r4, #12]
 80086ac:	f8cb 300c 	str.w	r3, [fp, #12]
          pcb->next = udp_pcbs;
 80086b0:	f8d9 3000 	ldr.w	r3, [r9]
          udp_pcbs = pcb;
 80086b4:	f8c9 4000 	str.w	r4, [r9]
          pcb->next = udp_pcbs;
 80086b8:	60e3      	str	r3, [r4, #12]
 80086ba:	e7da      	b.n	8008672 <udp_input+0xf2>
    if (pcb != NULL) {
 80086bc:	b16d      	cbz	r5, 80086da <udp_input+0x15a>
      if (pcb->recv != NULL) {
 80086be:	69ac      	ldr	r4, [r5, #24]
 80086c0:	2c00      	cmp	r4, #0
 80086c2:	f43f af75 	beq.w	80085b0 <udp_input+0x30>
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80086c6:	9b02      	ldr	r3, [sp, #8]
 80086c8:	463a      	mov	r2, r7
 80086ca:	4629      	mov	r1, r5
 80086cc:	9300      	str	r3, [sp, #0]
 80086ce:	4b15      	ldr	r3, [pc, #84]	; (8008724 <udp_input+0x1a4>)
 80086d0:	69e8      	ldr	r0, [r5, #28]
 80086d2:	47a0      	blx	r4
}
 80086d4:	b005      	add	sp, #20
 80086d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80086da:	f1ba 0f00 	cmp.w	sl, #0
 80086de:	f47f af67 	bne.w	80085b0 <udp_input+0x30>
 80086e2:	6973      	ldr	r3, [r6, #20]
 80086e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80086e8:	2be0      	cmp	r3, #224	; 0xe0
 80086ea:	f43f af61 	beq.w	80085b0 <udp_input+0x30>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80086ee:	89b1      	ldrh	r1, [r6, #12]
 80086f0:	4638      	mov	r0, r7
 80086f2:	3108      	adds	r1, #8
 80086f4:	b209      	sxth	r1, r1
 80086f6:	f7fb fedf 	bl	80044b8 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80086fa:	2103      	movs	r1, #3
 80086fc:	4638      	mov	r0, r7
 80086fe:	f7fa fca7 	bl	8003050 <icmp_dest_unreach>
 8008702:	e755      	b.n	80085b0 <udp_input+0x30>
 8008704:	0800ce73 	.word	0x0800ce73
 8008708:	0800cea2 	.word	0x0800cea2
 800870c:	0800b013 	.word	0x0800b013
 8008710:	0800ceba 	.word	0x0800ceba
 8008714:	2000065c 	.word	0x2000065c
 8008718:	20003bb0 	.word	0x20003bb0
 800871c:	0800ced3 	.word	0x0800ced3
 8008720:	0800cef8 	.word	0x0800cef8
 8008724:	2000066c 	.word	0x2000066c

08008728 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8008728:	b510      	push	{r4, lr}
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800872a:	b138      	cbz	r0, 800873c <udp_netif_ip_addr_changed+0x14>
 800872c:	6803      	ldr	r3, [r0, #0]
 800872e:	b12b      	cbz	r3, 800873c <udp_netif_ip_addr_changed+0x14>
 8008730:	b121      	cbz	r1, 800873c <udp_netif_ip_addr_changed+0x14>
 8008732:	680b      	ldr	r3, [r1, #0]
 8008734:	b113      	cbz	r3, 800873c <udp_netif_ip_addr_changed+0x14>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8008736:	4b06      	ldr	r3, [pc, #24]	; (8008750 <udp_netif_ip_addr_changed+0x28>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	b903      	cbnz	r3, 800873e <udp_netif_ip_addr_changed+0x16>
 800873c:	bd10      	pop	{r4, pc}
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800873e:	681c      	ldr	r4, [r3, #0]
 8008740:	6802      	ldr	r2, [r0, #0]
 8008742:	4294      	cmp	r4, r2
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8008744:	bf04      	itt	eq
 8008746:	680a      	ldreq	r2, [r1, #0]
 8008748:	601a      	streq	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800874a:	68db      	ldr	r3, [r3, #12]
 800874c:	e7f5      	b.n	800873a <udp_netif_ip_addr_changed+0x12>
 800874e:	bf00      	nop
 8008750:	20003bb0 	.word	0x20003bb0

08008754 <ethernet_input>:
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8008754:	8943      	ldrh	r3, [r0, #10]
 8008756:	2b0e      	cmp	r3, #14
{
 8008758:	b570      	push	{r4, r5, r6, lr}
 800875a:	4604      	mov	r4, r0
 800875c:	460d      	mov	r5, r1
  if (p->len <= SIZEOF_ETH_HDR) {
 800875e:	d91a      	bls.n	8008796 <ethernet_input+0x42>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8008760:	7bc3      	ldrb	r3, [r0, #15]
 8008762:	b91b      	cbnz	r3, 800876c <ethernet_input+0x18>
    p->if_idx = netif_get_index(netif);
 8008764:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 8008768:	3301      	adds	r3, #1
 800876a:	73c3      	strb	r3, [r0, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800876c:	6860      	ldr	r0, [r4, #4]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800876e:	7803      	ldrb	r3, [r0, #0]
  type = ethhdr->type;
 8008770:	8986      	ldrh	r6, [r0, #12]
  if (ethhdr->dest.addr[0] & 1) {
 8008772:	07d9      	lsls	r1, r3, #31
 8008774:	d50a      	bpl.n	800878c <ethernet_input+0x38>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8008776:	2b01      	cmp	r3, #1
 8008778:	d111      	bne.n	800879e <ethernet_input+0x4a>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800877a:	7843      	ldrb	r3, [r0, #1]
 800877c:	b933      	cbnz	r3, 800878c <ethernet_input+0x38>
 800877e:	7883      	ldrb	r3, [r0, #2]
 8008780:	2b5e      	cmp	r3, #94	; 0x5e
 8008782:	d103      	bne.n	800878c <ethernet_input+0x38>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8008784:	7b63      	ldrb	r3, [r4, #13]
 8008786:	f043 0310 	orr.w	r3, r3, #16
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800878a:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
 800878c:	2e08      	cmp	r6, #8
 800878e:	d010      	beq.n	80087b2 <ethernet_input+0x5e>
 8008790:	f5b6 6fc1 	cmp.w	r6, #1544	; 0x608
 8008794:	d01d      	beq.n	80087d2 <ethernet_input+0x7e>
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 8008796:	4620      	mov	r0, r4
 8008798:	f7fb fe96 	bl	80044c8 <pbuf_free>
  return ERR_OK;
 800879c:	e017      	b.n	80087ce <ethernet_input+0x7a>
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800879e:	2206      	movs	r2, #6
 80087a0:	4913      	ldr	r1, [pc, #76]	; (80087f0 <ethernet_input+0x9c>)
 80087a2:	f000 fd43 	bl	800922c <memcmp>
 80087a6:	2800      	cmp	r0, #0
 80087a8:	d1f0      	bne.n	800878c <ethernet_input+0x38>
      p->flags |= PBUF_FLAG_LLBCAST;
 80087aa:	7b63      	ldrb	r3, [r4, #13]
 80087ac:	f043 0308 	orr.w	r3, r3, #8
 80087b0:	e7eb      	b.n	800878a <ethernet_input+0x36>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80087b2:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
 80087b6:	071a      	lsls	r2, r3, #28
 80087b8:	d5ed      	bpl.n	8008796 <ethernet_input+0x42>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80087ba:	210e      	movs	r1, #14
 80087bc:	4620      	mov	r0, r4
 80087be:	f7fb fe4f 	bl	8004460 <pbuf_remove_header>
 80087c2:	2800      	cmp	r0, #0
 80087c4:	d1e7      	bne.n	8008796 <ethernet_input+0x42>
        ip4_input(p, netif);
 80087c6:	4629      	mov	r1, r5
 80087c8:	4620      	mov	r0, r4
 80087ca:	f7fa fc93 	bl	80030f4 <ip4_input>
}
 80087ce:	2000      	movs	r0, #0
 80087d0:	bd70      	pop	{r4, r5, r6, pc}
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80087d2:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
 80087d6:	071b      	lsls	r3, r3, #28
 80087d8:	d5dd      	bpl.n	8008796 <ethernet_input+0x42>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80087da:	210e      	movs	r1, #14
 80087dc:	4620      	mov	r0, r4
 80087de:	f7fb fe3f 	bl	8004460 <pbuf_remove_header>
 80087e2:	2800      	cmp	r0, #0
 80087e4:	d1d7      	bne.n	8008796 <ethernet_input+0x42>
        etharp_input(p, netif);
 80087e6:	4629      	mov	r1, r5
 80087e8:	4620      	mov	r0, r4
 80087ea:	f7fa f8cd 	bl	8002988 <etharp_input>
      break;
 80087ee:	e7ee      	b.n	80087ce <ethernet_input+0x7a>
 80087f0:	0800cf13 	.word	0x0800cf13

080087f4 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80087f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087f8:	460d      	mov	r5, r1
 80087fa:	4604      	mov	r4, r0
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80087fc:	f8bd 0018 	ldrh.w	r0, [sp, #24]
                u16_t eth_type) {
 8008800:	4616      	mov	r6, r2
 8008802:	461f      	mov	r7, r3
  u16_t eth_type_be = lwip_htons(eth_type);
 8008804:	f7f9 ff5c 	bl	80026c0 <lwip_htons>

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8008808:	210e      	movs	r1, #14
  u16_t eth_type_be = lwip_htons(eth_type);
 800880a:	4680      	mov	r8, r0
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800880c:	4628      	mov	r0, r5
 800880e:	f7fb fe24 	bl	800445a <pbuf_add_header>
 8008812:	b9e0      	cbnz	r0, 800884e <ethernet_output+0x5a>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8008814:	6869      	ldr	r1, [r5, #4]
  ethhdr->type = eth_type_be;
 8008816:	f8a1 800c 	strh.w	r8, [r1, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	600b      	str	r3, [r1, #0]
 800881e:	88bb      	ldrh	r3, [r7, #4]
 8008820:	808b      	strh	r3, [r1, #4]
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8008822:	6833      	ldr	r3, [r6, #0]
 8008824:	f8c1 3006 	str.w	r3, [r1, #6]
 8008828:	88b3      	ldrh	r3, [r6, #4]
 800882a:	814b      	strh	r3, [r1, #10]

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800882c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8008830:	2b06      	cmp	r3, #6
 8008832:	d006      	beq.n	8008842 <ethernet_output+0x4e>
 8008834:	4b08      	ldr	r3, [pc, #32]	; (8008858 <ethernet_output+0x64>)
 8008836:	f240 1233 	movw	r2, #307	; 0x133
 800883a:	4908      	ldr	r1, [pc, #32]	; (800885c <ethernet_output+0x68>)
 800883c:	4808      	ldr	r0, [pc, #32]	; (8008860 <ethernet_output+0x6c>)
 800883e:	f000 fd17 	bl	8009270 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8008842:	69a3      	ldr	r3, [r4, #24]
 8008844:	4629      	mov	r1, r5
 8008846:	4620      	mov	r0, r4
pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
}
 8008848:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return netif->linkoutput(netif, p);
 800884c:	4718      	bx	r3
}
 800884e:	f06f 0001 	mvn.w	r0, #1
 8008852:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008856:	bf00      	nop
 8008858:	0800cf19 	.word	0x0800cf19
 800885c:	0800cf4e 	.word	0x0800cf4e
 8008860:	0800b013 	.word	0x0800b013

08008864 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8008864:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8008868:	4a25      	ldr	r2, [pc, #148]	; (8008900 <low_level_output+0x9c>)
  uint32_t framelength = 0;
  uint32_t bufferoffset = 0;
  uint32_t byteslefttocopy = 0;
  uint32_t payloadoffset = 0;
  DmaTxDesc = heth.TxDesc;
  bufferoffset = 0;
 800886a:	f04f 0800 	mov.w	r8, #0
{
 800886e:	460c      	mov	r4, r1
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
      payloadoffset = 0;
    
      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8008870:	f240 5bf4 	movw	fp, #1524	; 0x5f4
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8008874:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
  uint32_t framelength = 0;
 8008876:	4647      	mov	r7, r8
 8008878:	9200      	str	r2, [sp, #0]
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800887a:	68ab      	ldr	r3, [r5, #8]
  for(q = p; q != NULL; q = q->next)
 800887c:	b92c      	cbnz	r4, 800888a <low_level_output+0x26>
      bufferoffset = bufferoffset + byteslefttocopy;
      framelength = framelength + byteslefttocopy;
    }
  
  /* Prepare transmit descriptors to give to DMA */ 
  HAL_ETH_TransmitFrame(&heth, framelength);
 800887e:	4639      	mov	r1, r7
 8008880:	481f      	ldr	r0, [pc, #124]	; (8008900 <low_level_output+0x9c>)
 8008882:	f7f8 f8d7 	bl	8000a34 <HAL_ETH_TransmitFrame>
  
  errval = ERR_OK;
 8008886:	4620      	mov	r0, r4
 8008888:	e004      	b.n	8008894 <low_level_output+0x30>
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800888a:	682a      	ldr	r2, [r5, #0]
 800888c:	2a00      	cmp	r2, #0
 800888e:	da11      	bge.n	80088b4 <low_level_output+0x50>
        errval = ERR_USE;
 8008890:	f06f 0007 	mvn.w	r0, #7
  
error:
  
  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8008894:	9b00      	ldr	r3, [sp, #0]
 8008896:	f241 0214 	movw	r2, #4116	; 0x1014
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	5899      	ldr	r1, [r3, r2]
 800889e:	0689      	lsls	r1, r1, #26
 80088a0:	d505      	bpl.n	80088ae <low_level_output+0x4a>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 80088a2:	2120      	movs	r1, #32
 80088a4:	5099      	str	r1, [r3, r2]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 80088a6:	2100      	movs	r1, #0
 80088a8:	f241 0204 	movw	r2, #4100	; 0x1004
 80088ac:	5099      	str	r1, [r3, r2]
  }
  return errval;
}
 80088ae:	b003      	add	sp, #12
 80088b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      byteslefttocopy = q->len;
 80088b4:	f8b4 900a 	ldrh.w	r9, [r4, #10]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80088b8:	4646      	mov	r6, r8
      payloadoffset = 0;
 80088ba:	f04f 0a00 	mov.w	sl, #0
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80088be:	eb06 0809 	add.w	r8, r6, r9
 80088c2:	1998      	adds	r0, r3, r6
 80088c4:	6861      	ldr	r1, [r4, #4]
 80088c6:	45d8      	cmp	r8, fp
 80088c8:	d808      	bhi.n	80088dc <low_level_output+0x78>
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 80088ca:	464a      	mov	r2, r9
 80088cc:	4451      	add	r1, sl
 80088ce:	9301      	str	r3, [sp, #4]
      framelength = framelength + byteslefttocopy;
 80088d0:	444f      	add	r7, r9
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 80088d2:	f000 fcba 	bl	800924a <memcpy>
  for(q = p; q != NULL; q = q->next)
 80088d6:	6824      	ldr	r4, [r4, #0]
 80088d8:	9b01      	ldr	r3, [sp, #4]
 80088da:	e7cf      	b.n	800887c <low_level_output+0x18>
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 80088dc:	ebab 0606 	sub.w	r6, fp, r6
 80088e0:	4451      	add	r1, sl
 80088e2:	4632      	mov	r2, r6
 80088e4:	f000 fcb1 	bl	800924a <memcpy>
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 80088e8:	68ed      	ldr	r5, [r5, #12]
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80088ea:	682b      	ldr	r3, [r5, #0]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	dbcf      	blt.n	8008890 <low_level_output+0x2c>
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 80088f0:	44b2      	add	sl, r6
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 80088f2:	4437      	add	r7, r6
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 80088f4:	68ab      	ldr	r3, [r5, #8]
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 80088f6:	f2a8 59f4 	subw	r9, r8, #1524	; 0x5f4
        bufferoffset = 0;
 80088fa:	2600      	movs	r6, #0
 80088fc:	e7df      	b.n	80088be <low_level_output+0x5a>
 80088fe:	bf00      	nop
 8008900:	20003bb4 	.word	0x20003bb4

08008904 <HAL_ETH_MspInit>:
{
 8008904:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008906:	b08d      	sub	sp, #52	; 0x34
 8008908:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800890a:	2214      	movs	r2, #20
 800890c:	2100      	movs	r1, #0
 800890e:	a807      	add	r0, sp, #28
 8008910:	f000 fca6 	bl	8009260 <memset>
  if(ethHandle->Instance==ETH)
 8008914:	6822      	ldr	r2, [r4, #0]
 8008916:	4b39      	ldr	r3, [pc, #228]	; (80089fc <HAL_ETH_MspInit+0xf8>)
 8008918:	429a      	cmp	r2, r3
 800891a:	d16d      	bne.n	80089f8 <HAL_ETH_MspInit+0xf4>
    __HAL_RCC_ETH_CLK_ENABLE();
 800891c:	f5a3 4390 	sub.w	r3, r3, #18432	; 0x4800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008920:	2602      	movs	r6, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008922:	2503      	movs	r5, #3
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008924:	240b      	movs	r4, #11
    __HAL_RCC_ETH_CLK_ENABLE();
 8008926:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008928:	a907      	add	r1, sp, #28
 800892a:	4835      	ldr	r0, [pc, #212]	; (8008a00 <HAL_ETH_MspInit+0xfc>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800892c:	2700      	movs	r7, #0
    __HAL_RCC_ETH_CLK_ENABLE();
 800892e:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8008932:	631a      	str	r2, [r3, #48]	; 0x30
 8008934:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008936:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 800893a:	9200      	str	r2, [sp, #0]
 800893c:	9a00      	ldr	r2, [sp, #0]
 800893e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008940:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8008944:	631a      	str	r2, [r3, #48]	; 0x30
 8008946:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008948:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 800894c:	9201      	str	r2, [sp, #4]
 800894e:	9a01      	ldr	r2, [sp, #4]
 8008950:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008952:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8008956:	631a      	str	r2, [r3, #48]	; 0x30
 8008958:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800895a:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800895e:	9202      	str	r2, [sp, #8]
 8008960:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008962:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008964:	f042 0204 	orr.w	r2, r2, #4
 8008968:	631a      	str	r2, [r3, #48]	; 0x30
 800896a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800896c:	f002 0204 	and.w	r2, r2, #4
 8008970:	9203      	str	r2, [sp, #12]
 8008972:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008974:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008976:	f042 0201 	orr.w	r2, r2, #1
 800897a:	631a      	str	r2, [r3, #48]	; 0x30
 800897c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800897e:	f002 0201 	and.w	r2, r2, #1
 8008982:	9204      	str	r2, [sp, #16]
 8008984:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008986:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008988:	f042 0202 	orr.w	r2, r2, #2
 800898c:	631a      	str	r2, [r3, #48]	; 0x30
 800898e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008990:	f002 0202 	and.w	r2, r2, #2
 8008994:	9205      	str	r2, [sp, #20]
 8008996:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8008998:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800899a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800899e:	631a      	str	r2, [r3, #48]	; 0x30
 80089a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80089a2:	9608      	str	r6, [sp, #32]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80089a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80089a8:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80089aa:	940b      	str	r4, [sp, #44]	; 0x2c
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80089ac:	9306      	str	r3, [sp, #24]
 80089ae:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80089b0:	2332      	movs	r3, #50	; 0x32
 80089b2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80089b4:	f7f8 fa98 	bl	8000ee8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80089b8:	2386      	movs	r3, #134	; 0x86
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80089ba:	a907      	add	r1, sp, #28
 80089bc:	4811      	ldr	r0, [pc, #68]	; (8008a04 <HAL_ETH_MspInit+0x100>)
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80089be:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80089c0:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089c2:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80089c4:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80089c6:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80089c8:	f7f8 fa8e 	bl	8000ee8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80089cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80089d0:	a907      	add	r1, sp, #28
 80089d2:	480d      	ldr	r0, [pc, #52]	; (8008a08 <HAL_ETH_MspInit+0x104>)
    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80089d4:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80089d6:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089d8:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80089da:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80089dc:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80089de:	f7f8 fa83 	bl	8000ee8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80089e2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80089e6:	a907      	add	r1, sp, #28
 80089e8:	4808      	ldr	r0, [pc, #32]	; (8008a0c <HAL_ETH_MspInit+0x108>)
    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80089ea:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80089ec:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089ee:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80089f0:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80089f2:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80089f4:	f7f8 fa78 	bl	8000ee8 <HAL_GPIO_Init>
}
 80089f8:	b00d      	add	sp, #52	; 0x34
 80089fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089fc:	40028000 	.word	0x40028000
 8008a00:	40020800 	.word	0x40020800
 8008a04:	40020000 	.word	0x40020000
 8008a08:	40020400 	.word	0x40020400
 8008a0c:	40021800 	.word	0x40021800

08008a10 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8008a10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 8008a14:	4c34      	ldr	r4, [pc, #208]	; (8008ae8 <ethernetif_input+0xd8>)
{
 8008a16:	9001      	str	r0, [sp, #4]
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 8008a18:	4620      	mov	r0, r4
 8008a1a:	f7f8 f87d 	bl	8000b18 <HAL_ETH_GetReceivedFrame>
 8008a1e:	4607      	mov	r7, r0
 8008a20:	2800      	cmp	r0, #0
 8008a22:	d15e      	bne.n	8008ae2 <ethernetif_input+0xd2>
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8008a24:	6c23      	ldr	r3, [r4, #64]	; 0x40
  len = heth.RxFrameInfos.length;
 8008a26:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8008a28:	9300      	str	r3, [sp, #0]
  if (len > 0)
 8008a2a:	bb09      	cbnz	r1, 8008a70 <ethernetif_input+0x60>
  struct pbuf *p = NULL;
 8008a2c:	2600      	movs	r6, #0
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8008a2e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8008a30:	2200      	movs	r2, #0
 8008a32:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8008a34:	4282      	cmp	r2, r0
 8008a36:	d14d      	bne.n	8008ad4 <ethernetif_input+0xc4>
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 8008a38:	6823      	ldr	r3, [r4, #0]
 8008a3a:	f241 0114 	movw	r1, #4116	; 0x1014
    heth.RxFrameInfos.SegCount =0;  
 8008a3e:	2200      	movs	r2, #0
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 8008a40:	5858      	ldr	r0, [r3, r1]
    heth.RxFrameInfos.SegCount =0;  
 8008a42:	63a2      	str	r2, [r4, #56]	; 0x38
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 8008a44:	0600      	lsls	r0, r0, #24
 8008a46:	d504      	bpl.n	8008a52 <ethernetif_input+0x42>
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8008a48:	2080      	movs	r0, #128	; 0x80
 8008a4a:	5058      	str	r0, [r3, r1]
    heth.Instance->DMARPDR = 0;
 8008a4c:	f241 0108 	movw	r1, #4104	; 0x1008
 8008a50:	505a      	str	r2, [r3, r1]

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
    
  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 8008a52:	2e00      	cmp	r6, #0
 8008a54:	d045      	beq.n	8008ae2 <ethernetif_input+0xd2>
    
  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 8008a56:	9b01      	ldr	r3, [sp, #4]
 8008a58:	4630      	mov	r0, r6
 8008a5a:	9901      	ldr	r1, [sp, #4]
 8008a5c:	691b      	ldr	r3, [r3, #16]
 8008a5e:	4798      	blx	r3
    
  if (err != ERR_OK)
 8008a60:	2800      	cmp	r0, #0
 8008a62:	d03e      	beq.n	8008ae2 <ethernetif_input+0xd2>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 8008a64:	4630      	mov	r0, r6
    p = NULL;    
  }
}
 8008a66:	b003      	add	sp, #12
 8008a68:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    pbuf_free(p);
 8008a6c:	f7fb bd2c 	b.w	80044c8 <pbuf_free>
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8008a70:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8008a74:	f7fb fd8a 	bl	800458c <pbuf_alloc>
  if (p != NULL)
 8008a78:	4606      	mov	r6, r0
 8008a7a:	2800      	cmp	r0, #0
 8008a7c:	d0d6      	beq.n	8008a2c <ethernetif_input+0x1c>
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8008a7e:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8008a82:	4680      	mov	r8, r0
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8008a84:	f240 5bf4 	movw	fp, #1524	; 0x5f4
      byteslefttocopy = q->len;
 8008a88:	f8b8 200a 	ldrh.w	r2, [r8, #10]
 8008a8c:	463d      	mov	r5, r7
      payloadoffset = 0;
 8008a8e:	f04f 0900 	mov.w	r9, #0
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8008a92:	18af      	adds	r7, r5, r2
 8008a94:	9b00      	ldr	r3, [sp, #0]
 8008a96:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008a9a:	455f      	cmp	r7, fp
 8008a9c:	eb03 0105 	add.w	r1, r3, r5
 8008aa0:	d808      	bhi.n	8008ab4 <ethernetif_input+0xa4>
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8008aa2:	4448      	add	r0, r9
 8008aa4:	f000 fbd1 	bl	800924a <memcpy>
    for(q = p; q != NULL; q = q->next)
 8008aa8:	f8d8 8000 	ldr.w	r8, [r8]
 8008aac:	f1b8 0f00 	cmp.w	r8, #0
 8008ab0:	d1ea      	bne.n	8008a88 <ethernetif_input+0x78>
 8008ab2:	e7bc      	b.n	8008a2e <ethernetif_input+0x1e>
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8008ab4:	ebab 0505 	sub.w	r5, fp, r5
 8008ab8:	4448      	add	r0, r9
 8008aba:	462a      	mov	r2, r5
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8008abc:	44a9      	add	r9, r5
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8008abe:	f000 fbc4 	bl	800924a <memcpy>
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8008ac2:	f8da a00c 	ldr.w	sl, [sl, #12]
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8008ac6:	f2a7 52f4 	subw	r2, r7, #1524	; 0x5f4
        bufferoffset = 0;
 8008aca:	2500      	movs	r5, #0
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8008acc:	f8da 3008 	ldr.w	r3, [sl, #8]
 8008ad0:	9300      	str	r3, [sp, #0]
 8008ad2:	e7de      	b.n	8008a92 <ethernetif_input+0x82>
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8008ad4:	6819      	ldr	r1, [r3, #0]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8008ad6:	3201      	adds	r2, #1
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8008ad8:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8008adc:	6019      	str	r1, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8008ade:	68db      	ldr	r3, [r3, #12]
 8008ae0:	e7a8      	b.n	8008a34 <ethernetif_input+0x24>
}
 8008ae2:	b003      	add	sp, #12
 8008ae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ae8:	20003bb4 	.word	0x20003bb4

08008aec <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8008aec:	b530      	push	{r4, r5, lr}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8008aee:	4604      	mov	r4, r0
{
 8008af0:	b085      	sub	sp, #20
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8008af2:	b930      	cbnz	r0, 8008b02 <ethernetif_init+0x16>
 8008af4:	4b3d      	ldr	r3, [pc, #244]	; (8008bec <ethernetif_init+0x100>)
 8008af6:	f240 2206 	movw	r2, #518	; 0x206
 8008afa:	493d      	ldr	r1, [pc, #244]	; (8008bf0 <ethernetif_init+0x104>)
 8008afc:	483d      	ldr	r0, [pc, #244]	; (8008bf4 <ethernetif_init+0x108>)
 8008afe:	f000 fbb7 	bl	8009270 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8008b02:	2373      	movs	r3, #115	; 0x73
  heth.Instance = ETH;
 8008b04:	4d3c      	ldr	r5, [pc, #240]	; (8008bf8 <ethernetif_init+0x10c>)
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8008b06:	2201      	movs	r2, #1
 8008b08:	493c      	ldr	r1, [pc, #240]	; (8008bfc <ethernetif_init+0x110>)
  netif->name[0] = IFNAME0;
 8008b0a:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
  netif->name[1] = IFNAME1;
 8008b0e:	2374      	movs	r3, #116	; 0x74
  hal_eth_init_status = HAL_ETH_Init(&heth);
 8008b10:	4628      	mov	r0, r5
  netif->name[1] = IFNAME1;
 8008b12:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8008b16:	4b3a      	ldr	r3, [pc, #232]	; (8008c00 <ethernetif_init+0x114>)
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8008b18:	e885 0006 	stmia.w	r5, {r1, r2}
  MACAddr[1] = 0x80;
 8008b1c:	2280      	movs	r2, #128	; 0x80
  netif->output = etharp_output;
 8008b1e:	6163      	str	r3, [r4, #20]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8008b20:	4b38      	ldr	r3, [pc, #224]	; (8008c04 <ethernetif_init+0x118>)
  MACAddr[1] = 0x80;
 8008b22:	f88d 2009 	strb.w	r2, [sp, #9]
  MACAddr[2] = 0xE1;
 8008b26:	22e1      	movs	r2, #225	; 0xe1
  netif->linkoutput = low_level_output;
 8008b28:	61a3      	str	r3, [r4, #24]
  uint32_t regvalue = 0;
 8008b2a:	2300      	movs	r3, #0
  MACAddr[2] = 0xE1;
 8008b2c:	f88d 200a 	strb.w	r2, [sp, #10]
  MACAddr[5] = 0x22;
 8008b30:	2222      	movs	r2, #34	; 0x22
  uint32_t regvalue = 0;
 8008b32:	9301      	str	r3, [sp, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8008b34:	822b      	strh	r3, [r5, #16]
  MACAddr[0] = 0x00;
 8008b36:	f88d 3008 	strb.w	r3, [sp, #8]
  MACAddr[3] = 0x00;
 8008b3a:	f88d 300b 	strb.w	r3, [sp, #11]
  MACAddr[4] = 0x00;
 8008b3e:	f88d 300c 	strb.w	r3, [sp, #12]
  MACAddr[5] = 0x22;
 8008b42:	f88d 200d 	strb.w	r2, [sp, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8008b46:	aa02      	add	r2, sp, #8
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8008b48:	61ab      	str	r3, [r5, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8008b4a:	61eb      	str	r3, [r5, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8008b4c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
  heth.Init.MACAddr = &MACAddr[0];
 8008b50:	616a      	str	r2, [r5, #20]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8008b52:	622b      	str	r3, [r5, #32]
  hal_eth_init_status = HAL_ETH_Init(&heth);
 8008b54:	f7f8 f890 	bl	8000c78 <HAL_ETH_Init>
  if (hal_eth_init_status == HAL_OK)
 8008b58:	b928      	cbnz	r0, 8008b66 <ethernetif_init+0x7a>
    netif->flags |= NETIF_FLAG_LINK_UP;
 8008b5a:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 8008b5e:	f043 0304 	orr.w	r3, r3, #4
 8008b62:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8008b66:	2304      	movs	r3, #4
 8008b68:	4a27      	ldr	r2, [pc, #156]	; (8008c08 <ethernetif_init+0x11c>)
 8008b6a:	4928      	ldr	r1, [pc, #160]	; (8008c0c <ethernetif_init+0x120>)
 8008b6c:	4822      	ldr	r0, [pc, #136]	; (8008bf8 <ethernetif_init+0x10c>)
 8008b6e:	f7f7 fee7 	bl	8000940 <HAL_ETH_DMATxDescListInit>
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8008b72:	4927      	ldr	r1, [pc, #156]	; (8008c10 <ethernetif_init+0x124>)
 8008b74:	2304      	movs	r3, #4
 8008b76:	4a27      	ldr	r2, [pc, #156]	; (8008c14 <ethernetif_init+0x128>)
 8008b78:	481f      	ldr	r0, [pc, #124]	; (8008bf8 <ethernetif_init+0x10c>)
 8008b7a:	f7f7 ff1e 	bl	80009ba <HAL_ETH_DMARxDescListInit>
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8008b7e:	2306      	movs	r3, #6
  HAL_ETH_Start(&heth);
 8008b80:	481d      	ldr	r0, [pc, #116]	; (8008bf8 <ethernetif_init+0x10c>)
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8008b82:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8008b86:	696b      	ldr	r3, [r5, #20]
 8008b88:	781a      	ldrb	r2, [r3, #0]
 8008b8a:	f884 2022 	strb.w	r2, [r4, #34]	; 0x22
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8008b8e:	785a      	ldrb	r2, [r3, #1]
 8008b90:	f884 2023 	strb.w	r2, [r4, #35]	; 0x23
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8008b94:	789a      	ldrb	r2, [r3, #2]
 8008b96:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8008b9a:	78da      	ldrb	r2, [r3, #3]
 8008b9c:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8008ba0:	791a      	ldrb	r2, [r3, #4]
 8008ba2:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8008ba6:	795b      	ldrb	r3, [r3, #5]
 8008ba8:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
  netif->mtu = 1500;
 8008bac:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8008bb0:	8423      	strh	r3, [r4, #32]
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8008bb2:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 8008bb6:	f043 030a 	orr.w	r3, r3, #10
 8008bba:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
  HAL_ETH_Start(&heth);
 8008bbe:	f7f8 f955 	bl	8000e6c <HAL_ETH_Start>
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8008bc2:	aa01      	add	r2, sp, #4
 8008bc4:	211d      	movs	r1, #29
 8008bc6:	480c      	ldr	r0, [pc, #48]	; (8008bf8 <ethernetif_init+0x10c>)
 8008bc8:	f7f7 ffe5 	bl	8000b96 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8008bcc:	9a01      	ldr	r2, [sp, #4]
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8008bce:	211d      	movs	r1, #29
 8008bd0:	4809      	ldr	r0, [pc, #36]	; (8008bf8 <ethernetif_init+0x10c>)
  regvalue |= (PHY_ISFR_INT4);
 8008bd2:	f042 020b 	orr.w	r2, r2, #11
 8008bd6:	9201      	str	r2, [sp, #4]
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8008bd8:	f7f8 f817 	bl	8000c0a <HAL_ETH_WritePHYRegister>
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8008bdc:	aa01      	add	r2, sp, #4
 8008bde:	211d      	movs	r1, #29
 8008be0:	4805      	ldr	r0, [pc, #20]	; (8008bf8 <ethernetif_init+0x10c>)
 8008be2:	f7f7 ffd8 	bl	8000b96 <HAL_ETH_ReadPHYRegister>

  /* initialize the hardware */
  low_level_init(netif);

  return ERR_OK;
}
 8008be6:	2000      	movs	r0, #0
 8008be8:	b005      	add	sp, #20
 8008bea:	bd30      	pop	{r4, r5, pc}
 8008bec:	0800cf85 	.word	0x0800cf85
 8008bf0:	0800b22e 	.word	0x0800b22e
 8008bf4:	0800b013 	.word	0x0800b013
 8008bf8:	20003bb4 	.word	0x20003bb4
 8008bfc:	40028000 	.word	0x40028000
 8008c00:	08002d59 	.word	0x08002d59
 8008c04:	08008865 	.word	0x08008865
 8008c08:	2007d8d0 	.word	0x2007d8d0
 8008c0c:	2007c080 	.word	0x2007c080
 8008c10:	2007c000 	.word	0x2007c000
 8008c14:	2007c100 	.word	0x2007c100

08008c18 <sys_now>:
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
  return HAL_GetTick();
 8008c18:	f7f7 bd3e 	b.w	8000698 <HAL_GetTick>

08008c1c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8008c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Initilialize the LwIP stack without RTOS */
	 /* IP_ADDRESS[0] = 192;
	  IP_ADDRESS[1] = 168;
	  IP_ADDRESS[2] = 137;
	  IP_ADDRESS[3] = 173;*/
	 IP_ADDRESS[0] = 169;
 8008c1e:	23a9      	movs	r3, #169	; 0xa9
 8008c20:	4f2c      	ldr	r7, [pc, #176]	; (8008cd4 <MX_LWIP_Init+0xb8>)
		  IP_ADDRESS[3] = 173;
	  NETMASK_ADDRESS[0] = 255;
	  NETMASK_ADDRESS[1] = 255;
	  NETMASK_ADDRESS[2] = 0;
	  NETMASK_ADDRESS[3] = 0;
	  GATEWAY_ADDRESS[0] = 0;
 8008c22:	4d2d      	ldr	r5, [pc, #180]	; (8008cd8 <MX_LWIP_Init+0xbc>)
	  NETMASK_ADDRESS[2] = 0;
 8008c24:	2400      	movs	r4, #0
	 IP_ADDRESS[0] = 169;
 8008c26:	703b      	strb	r3, [r7, #0]
		  IP_ADDRESS[1] = 254;
 8008c28:	23fe      	movs	r3, #254	; 0xfe
	  NETMASK_ADDRESS[0] = 255;
 8008c2a:	4e2c      	ldr	r6, [pc, #176]	; (8008cdc <MX_LWIP_Init+0xc0>)
{
 8008c2c:	b085      	sub	sp, #20
		  IP_ADDRESS[1] = 254;
 8008c2e:	707b      	strb	r3, [r7, #1]
		  IP_ADDRESS[2] = 215;
 8008c30:	23d7      	movs	r3, #215	; 0xd7
	  GATEWAY_ADDRESS[0] = 0;
 8008c32:	702c      	strb	r4, [r5, #0]
		  IP_ADDRESS[2] = 215;
 8008c34:	70bb      	strb	r3, [r7, #2]
		  IP_ADDRESS[3] = 173;
 8008c36:	23ad      	movs	r3, #173	; 0xad
	  GATEWAY_ADDRESS[1] = 0;
 8008c38:	706c      	strb	r4, [r5, #1]
		  IP_ADDRESS[3] = 173;
 8008c3a:	70fb      	strb	r3, [r7, #3]
	  NETMASK_ADDRESS[0] = 255;
 8008c3c:	23ff      	movs	r3, #255	; 0xff
	  GATEWAY_ADDRESS[2] = 0;
 8008c3e:	70ac      	strb	r4, [r5, #2]
	  NETMASK_ADDRESS[0] = 255;
 8008c40:	7033      	strb	r3, [r6, #0]
	  NETMASK_ADDRESS[1] = 255;
 8008c42:	7073      	strb	r3, [r6, #1]
	  GATEWAY_ADDRESS[3] = 0;
 8008c44:	70ec      	strb	r4, [r5, #3]
	  NETMASK_ADDRESS[2] = 0;
 8008c46:	70b4      	strb	r4, [r6, #2]
	  NETMASK_ADDRESS[3] = 0;
 8008c48:	70f4      	strb	r4, [r6, #3]
  lwip_init();
 8008c4a:	f7f9 fd5c 	bl	8002706 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8008c4e:	787b      	ldrb	r3, [r7, #1]
 8008c50:	783a      	ldrb	r2, [r7, #0]
 8008c52:	041b      	lsls	r3, r3, #16
 8008c54:	4922      	ldr	r1, [pc, #136]	; (8008ce0 <MX_LWIP_Init+0xc4>)
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8008c56:	7868      	ldrb	r0, [r5, #1]
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8008c58:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008c5c:	78fa      	ldrb	r2, [r7, #3]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8008c5e:	0400      	lsls	r0, r0, #16
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8008c60:	4313      	orrs	r3, r2
 8008c62:	78ba      	ldrb	r2, [r7, #2]
 8008c64:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8008c68:	7832      	ldrb	r2, [r6, #0]
 8008c6a:	ba1b      	rev	r3, r3
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8008c6c:	600b      	str	r3, [r1, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8008c6e:	7873      	ldrb	r3, [r6, #1]
 8008c70:	041b      	lsls	r3, r3, #16
 8008c72:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008c76:	78f2      	ldrb	r2, [r6, #3]
 8008c78:	4313      	orrs	r3, r2
 8008c7a:	78b2      	ldrb	r2, [r6, #2]
 8008c7c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008c80:	4a18      	ldr	r2, [pc, #96]	; (8008ce4 <MX_LWIP_Init+0xc8>)
 8008c82:	ba1b      	rev	r3, r3
 8008c84:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8008c86:	782b      	ldrb	r3, [r5, #0]
 8008c88:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8008c8c:	78eb      	ldrb	r3, [r5, #3]
 8008c8e:	4318      	orrs	r0, r3
 8008c90:	78ab      	ldrb	r3, [r5, #2]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8008c92:	4d15      	ldr	r5, [pc, #84]	; (8008ce8 <MX_LWIP_Init+0xcc>)
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8008c94:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8008c98:	4b14      	ldr	r3, [pc, #80]	; (8008cec <MX_LWIP_Init+0xd0>)
 8008c9a:	ba00      	rev	r0, r0
 8008c9c:	6018      	str	r0, [r3, #0]
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8008c9e:	4814      	ldr	r0, [pc, #80]	; (8008cf0 <MX_LWIP_Init+0xd4>)
 8008ca0:	9400      	str	r4, [sp, #0]
 8008ca2:	9002      	str	r0, [sp, #8]
 8008ca4:	4813      	ldr	r0, [pc, #76]	; (8008cf4 <MX_LWIP_Init+0xd8>)
 8008ca6:	9001      	str	r0, [sp, #4]
 8008ca8:	4628      	mov	r0, r5
 8008caa:	f7fb fa71 	bl	8004190 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8008cae:	4628      	mov	r0, r5
 8008cb0:	f7fb fb04 	bl	80042bc <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8008cb4:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8008cb8:	4628      	mov	r0, r5
  if (netif_is_link_up(&gnetif))
 8008cba:	075b      	lsls	r3, r3, #29
 8008cbc:	d504      	bpl.n	8008cc8 <MX_LWIP_Init+0xac>
  }

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8008cbe:	b005      	add	sp, #20
 8008cc0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    netif_set_up(&gnetif);
 8008cc4:	f7fb bb00 	b.w	80042c8 <netif_set_up>
}
 8008cc8:	b005      	add	sp, #20
 8008cca:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    netif_set_down(&gnetif);
 8008cce:	f7fb bb15 	b.w	80042fc <netif_set_down>
 8008cd2:	bf00      	nop
 8008cd4:	20003c38 	.word	0x20003c38
 8008cd8:	20003bfc 	.word	0x20003bfc
 8008cdc:	20003c34 	.word	0x20003c34
 8008ce0:	20003c30 	.word	0x20003c30
 8008ce4:	20003c3c 	.word	0x20003c3c
 8008ce8:	20003c00 	.word	0x20003c00
 8008cec:	20003c40 	.word	0x20003c40
 8008cf0:	08008755 	.word	0x08008755
 8008cf4:	08008aed 	.word	0x08008aed

08008cf8 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS 
 */
void MX_LWIP_Process(void)
{
 8008cf8:	b508      	push	{r3, lr}
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8008cfa:	4803      	ldr	r0, [pc, #12]	; (8008d08 <MX_LWIP_Process+0x10>)
 8008cfc:	f7ff fe88 	bl	8008a10 <ethernetif_input>
  /* Handle timeouts */
  sys_check_timeouts();

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8008d00:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_check_timeouts();
 8008d04:	f7ff bc04 	b.w	8008510 <sys_check_timeouts>
 8008d08:	20003c00 	.word	0x20003c00

08008d0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008d0c:	b510      	push	{r4, lr}
 8008d0e:	b0b8      	sub	sp, #224	; 0xe0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008d10:	2234      	movs	r2, #52	; 0x34
 8008d12:	2100      	movs	r1, #0
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008d14:	2402      	movs	r4, #2
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008d16:	a807      	add	r0, sp, #28
 8008d18:	f000 faa2 	bl	8009260 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008d1c:	2214      	movs	r2, #20
 8008d1e:	2100      	movs	r1, #0
 8008d20:	a802      	add	r0, sp, #8
 8008d22:	f000 fa9d 	bl	8009260 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008d26:	2100      	movs	r1, #0
 8008d28:	2290      	movs	r2, #144	; 0x90
 8008d2a:	a814      	add	r0, sp, #80	; 0x50
 8008d2c:	f000 fa98 	bl	8009260 <memset>
  HAL_PWR_EnableBkUpAccess();
 8008d30:	f7f8 f9ca 	bl	80010c8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_PWR_CLK_ENABLE();
 8008d34:	4b23      	ldr	r3, [pc, #140]	; (8008dc4 <SystemClock_Config+0xb8>)
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 200;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 8;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008d36:	a807      	add	r0, sp, #28
  __HAL_RCC_PWR_CLK_ENABLE();
 8008d38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008d3a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8008d3e:	641a      	str	r2, [r3, #64]	; 0x40
 8008d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8008d42:	4a21      	ldr	r2, [pc, #132]	; (8008dc8 <SystemClock_Config+0xbc>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8008d44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d48:	9300      	str	r3, [sp, #0]
 8008d4a:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8008d4c:	6813      	ldr	r3, [r2, #0]
 8008d4e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8008d52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008d56:	6013      	str	r3, [r2, #0]
 8008d58:	6813      	ldr	r3, [r2, #0]
  RCC_OscInitStruct.PLL.PLLN = 200;
 8008d5a:	22c8      	movs	r2, #200	; 0xc8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008d5c:	940d      	str	r4, [sp, #52]	; 0x34
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8008d5e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
  RCC_OscInitStruct.PLL.PLLN = 200;
 8008d62:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8008d64:	9411      	str	r4, [sp, #68]	; 0x44
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8008d66:	9301      	str	r3, [sp, #4]
 8008d68:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8008d6a:	2301      	movs	r3, #1
 8008d6c:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8008d6e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008d72:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008d74:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008d78:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8008d7a:	2308      	movs	r3, #8
 8008d7c:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8008d7e:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008d80:	f7f8 f9aa 	bl	80010d8 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008d84:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008d86:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008d88:	2400      	movs	r4, #0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8008d8a:	2103      	movs	r1, #3
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008d8c:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8008d8e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8008d92:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008d94:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8008d96:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8008d98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d9c:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8008d9e:	f7f8 fbd5 	bl	800154c <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8008da2:	f44f 7380 	mov.w	r3, #256	; 0x100
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008da6:	a814      	add	r0, sp, #80	; 0x50
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8008da8:	9427      	str	r4, [sp, #156]	; 0x9c
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8008daa:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008dac:	f7f8 fc94 	bl	80016d8 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_PLLCLK, RCC_MCODIV_4);
 8008db0:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8008db4:	f44f 01c0 	mov.w	r1, #6291456	; 0x600000
 8008db8:	4620      	mov	r0, r4
 8008dba:	f7f8 fb51 	bl	8001460 <HAL_RCC_MCOConfig>
}
 8008dbe:	b038      	add	sp, #224	; 0xe0
 8008dc0:	bd10      	pop	{r4, pc}
 8008dc2:	bf00      	nop
 8008dc4:	40023800 	.word	0x40023800
 8008dc8:	40007000 	.word	0x40007000

08008dcc <main>:
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b08c      	sub	sp, #48	; 0x30
		  /* Configure the MPU as Normal Non Cacheable for Ethernet Buffers in the SRAM2 */
		  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
		  MPU_InitStruct.BaseAddress = 0x2007C000;
		  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
		  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
		  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8008dd0:	2400      	movs	r4, #0
		  HAL_MPU_Disable();
 8008dd2:	f7f7 fcd9 	bl	8000788 <HAL_MPU_Disable>
		  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8008dd6:	2501      	movs	r5, #1
		  MPU_InitStruct.BaseAddress = 0x2007C000;
 8008dd8:	4f90      	ldr	r7, [pc, #576]	; (800901c <main+0x250>)
		  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 8008dda:	230d      	movs	r3, #13
		  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8008ddc:	2603      	movs	r6, #3
		  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
		  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
		  MPU_InitStruct.SubRegionDisable = 0x00;
		  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;

		  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8008dde:	a807      	add	r0, sp, #28
		  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 8008de0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
		  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8008de4:	f88d 501c 	strb.w	r5, [sp, #28]
		  MPU_InitStruct.BaseAddress = 0x2007C000;
 8008de8:	9708      	str	r7, [sp, #32]
		  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8008dea:	f88d 6027 	strb.w	r6, [sp, #39]	; 0x27
		  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8008dee:	f88d 402b 	strb.w	r4, [sp, #43]	; 0x2b
		  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8008df2:	f88d 402a 	strb.w	r4, [sp, #42]	; 0x2a
		  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8008df6:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
		  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8008dfa:	f88d 401d 	strb.w	r4, [sp, #29]
		  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8008dfe:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
		  MPU_InitStruct.SubRegionDisable = 0x00;
 8008e02:	f88d 4025 	strb.w	r4, [sp, #37]	; 0x25
		  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8008e06:	f88d 4028 	strb.w	r4, [sp, #40]	; 0x28
		  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8008e0a:	f7f7 fcdf 	bl	80007cc <HAL_MPU_ConfigRegion>

		  /* Configure the MPU as Device for Ethernet Descriptors in the SRAM2 */
		  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
		  MPU_InitStruct.BaseAddress = 0x2007C000;
		  MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 8008e0e:	2307      	movs	r3, #7
		  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
		  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
		  MPU_InitStruct.SubRegionDisable = 0x00;
		  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;

		  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8008e10:	a807      	add	r0, sp, #28
		  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8008e12:	f88d 501c 	strb.w	r5, [sp, #28]
		  MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 8008e16:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
		  MPU_InitStruct.BaseAddress = 0x2007C000;
 8008e1a:	9708      	str	r7, [sp, #32]
		  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8008e1c:	f88d 6027 	strb.w	r6, [sp, #39]	; 0x27
		  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8008e20:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
		  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8008e24:	f88d 402a 	strb.w	r4, [sp, #42]	; 0x2a
		  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8008e28:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
		  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8008e2c:	f88d 501d 	strb.w	r5, [sp, #29]
		  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8008e30:	f88d 4026 	strb.w	r4, [sp, #38]	; 0x26
		  MPU_InitStruct.SubRegionDisable = 0x00;
 8008e34:	f88d 4025 	strb.w	r4, [sp, #37]	; 0x25
		  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8008e38:	f88d 4028 	strb.w	r4, [sp, #40]	; 0x28
		  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8008e3c:	f7f7 fcc6 	bl	80007cc <HAL_MPU_ConfigRegion>

		  /* Enable the MPU */
		  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8008e40:	2004      	movs	r0, #4
 8008e42:	f7f7 fcb1 	bl	80007a8 <HAL_MPU_Enable>
  __ASM volatile ("dsb 0xF":::"memory");
 8008e46:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8008e4a:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8008e4e:	4b74      	ldr	r3, [pc, #464]	; (8009020 <main+0x254>)
 8008e50:	f8c3 4250 	str.w	r4, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8008e54:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8008e58:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8008e5c:	695a      	ldr	r2, [r3, #20]
 8008e5e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8008e62:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8008e64:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8008e68:	f3bf 8f6f 	isb	sy
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8008e6c:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8008e70:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8008e74:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8008e78:	f643 76e0 	movw	r6, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8008e7c:	f3c2 04c9 	ubfx	r4, r2, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8008e80:	f3c2 324e 	ubfx	r2, r2, #13, #15
 8008e84:	07a5      	lsls	r5, r4, #30
 8008e86:	0152      	lsls	r2, r2, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8008e88:	ea02 0e06 	and.w	lr, r2, r6
 8008e8c:	4628      	mov	r0, r5
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8008e8e:	4621      	mov	r1, r4
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8008e90:	ea4e 0700 	orr.w	r7, lr, r0
      } while (ways-- != 0U);
 8008e94:	3901      	subs	r1, #1
 8008e96:	f100 4040 	add.w	r0, r0, #3221225472	; 0xc0000000
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8008e9a:	f8c3 7260 	str.w	r7, [r3, #608]	; 0x260
      } while (ways-- != 0U);
 8008e9e:	1c4f      	adds	r7, r1, #1
 8008ea0:	d1f6      	bne.n	8008e90 <main+0xc4>
 8008ea2:	3a20      	subs	r2, #32
    } while(sets-- != 0U);
 8008ea4:	f112 0f20 	cmn.w	r2, #32
 8008ea8:	d1ee      	bne.n	8008e88 <main+0xbc>
 8008eaa:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8008eae:	695a      	ldr	r2, [r3, #20]
 8008eb0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008eb4:	615a      	str	r2, [r3, #20]
 8008eb6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8008eba:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8008ebe:	f7f7 fbd3 	bl	8000668 <HAL_Init>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ec2:	2400      	movs	r4, #0
  SystemClock_Config();
 8008ec4:	f7ff ff22 	bl	8008d0c <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008ec8:	2214      	movs	r2, #20
 8008eca:	2100      	movs	r1, #0
 8008ecc:	a807      	add	r0, sp, #28
 8008ece:	f000 f9c7 	bl	8009260 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008ed2:	4b54      	ldr	r3, [pc, #336]	; (8009024 <main+0x258>)
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8008ed4:	f244 0181 	movw	r1, #16513	; 0x4081
 8008ed8:	4853      	ldr	r0, [pc, #332]	; (8009028 <main+0x25c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008eda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008edc:	2501      	movs	r5, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008ede:	f042 0204 	orr.w	r2, r2, #4
 8008ee2:	631a      	str	r2, [r3, #48]	; 0x30
 8008ee4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008ee6:	f002 0204 	and.w	r2, r2, #4
 8008eea:	9201      	str	r2, [sp, #4]
 8008eec:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8008eee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008ef0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008ef4:	631a      	str	r2, [r3, #48]	; 0x30
 8008ef6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008ef8:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8008efc:	9202      	str	r2, [sp, #8]
 8008efe:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008f00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f02:	f042 0201 	orr.w	r2, r2, #1
 8008f06:	631a      	str	r2, [r3, #48]	; 0x30
 8008f08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f0a:	f002 0201 	and.w	r2, r2, #1
 8008f0e:	9203      	str	r2, [sp, #12]
 8008f10:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008f12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f14:	f042 0202 	orr.w	r2, r2, #2
 8008f18:	631a      	str	r2, [r3, #48]	; 0x30
 8008f1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f1c:	f002 0202 	and.w	r2, r2, #2
 8008f20:	9204      	str	r2, [sp, #16]
 8008f22:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008f24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f26:	f042 0208 	orr.w	r2, r2, #8
 8008f2a:	631a      	str	r2, [r3, #48]	; 0x30
 8008f2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f2e:	f002 0208 	and.w	r2, r2, #8
 8008f32:	9205      	str	r2, [sp, #20]
 8008f34:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8008f36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008f3c:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8008f3e:	2200      	movs	r2, #0
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8008f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f46:	9306      	str	r3, [sp, #24]
 8008f48:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8008f4a:	f7f8 f8b7 	bl	80010bc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8008f4e:	2200      	movs	r2, #0
 8008f50:	2140      	movs	r1, #64	; 0x40
 8008f52:	4836      	ldr	r0, [pc, #216]	; (800902c <main+0x260>)
 8008f54:	f7f8 f8b2 	bl	80010bc <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8008f58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8008f5c:	a907      	add	r1, sp, #28
 8008f5e:	4834      	ldr	r0, [pc, #208]	; (8009030 <main+0x264>)
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8008f60:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8008f62:	4b34      	ldr	r3, [pc, #208]	; (8009034 <main+0x268>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f64:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8008f66:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8008f68:	f7f7 ffbe 	bl	8000ee8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8008f6c:	f244 0381 	movw	r3, #16513	; 0x4081
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008f70:	a907      	add	r1, sp, #28
 8008f72:	482d      	ldr	r0, [pc, #180]	; (8009028 <main+0x25c>)
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8008f74:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008f76:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f78:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008f7a:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008f7c:	f7f7 ffb4 	bl	8000ee8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8008f80:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8008f82:	a907      	add	r1, sp, #28
 8008f84:	4829      	ldr	r0, [pc, #164]	; (800902c <main+0x260>)
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8008f86:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008f88:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008f8a:	2502      	movs	r5, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f8c:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008f8e:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8008f90:	f7f7 ffaa 	bl	8000ee8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8008f94:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8008f96:	a907      	add	r1, sp, #28
 8008f98:	4824      	ldr	r0, [pc, #144]	; (800902c <main+0x260>)
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8008f9a:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008f9c:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f9e:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8008fa0:	f7f7 ffa2 	bl	8000ee8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8008fa4:	f44f 7380 	mov.w	r3, #256	; 0x100
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008fa8:	a907      	add	r1, sp, #28
 8008faa:	4823      	ldr	r0, [pc, #140]	; (8009038 <main+0x26c>)
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8008fac:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008fae:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008fb0:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008fb2:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8008fb4:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008fb6:	f7f7 ff97 	bl	8000ee8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8008fba:	f44f 7300 	mov.w	r3, #512	; 0x200
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8008fbe:	a907      	add	r1, sp, #28
 8008fc0:	481d      	ldr	r0, [pc, #116]	; (8009038 <main+0x26c>)
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8008fc2:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008fc4:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008fc6:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8008fc8:	f7f7 ff8e 	bl	8000ee8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8008fcc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008fd0:	a907      	add	r1, sp, #28
 8008fd2:	4819      	ldr	r0, [pc, #100]	; (8009038 <main+0x26c>)
  GPIO_InitStruct.Pin = USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8008fd4:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008fd6:	2303      	movs	r3, #3
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008fd8:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008fda:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008fdc:	230a      	movs	r3, #10
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008fde:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008fe0:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008fe2:	f7f7 ff81 	bl	8000ee8 <HAL_GPIO_Init>
  huart3.Instance = USART3;
 8008fe6:	4815      	ldr	r0, [pc, #84]	; (800903c <main+0x270>)
  huart3.Init.BaudRate = 115200;
 8008fe8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8008fec:	4a14      	ldr	r2, [pc, #80]	; (8009040 <main+0x274>)
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8008fee:	6084      	str	r4, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8008ff0:	60c4      	str	r4, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8008ff2:	6104      	str	r4, [r0, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008ff4:	6184      	str	r4, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8008ff6:	61c4      	str	r4, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8008ff8:	6204      	str	r4, [r0, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8008ffa:	6244      	str	r4, [r0, #36]	; 0x24
  huart3.Init.BaudRate = 115200;
 8008ffc:	e880 000c 	stmia.w	r0, {r2, r3}
  huart3.Init.Mode = UART_MODE_TX_RX;
 8009000:	230c      	movs	r3, #12
 8009002:	6143      	str	r3, [r0, #20]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8009004:	f7f9 f822 	bl	800204c <HAL_UART_Init>
  MX_LWIP_Init();
 8009008:	f7ff fe08 	bl	8008c1c <MX_LWIP_Init>
  httpd_init();
 800900c:	f7f9 fb18 	bl	8002640 <httpd_init>
	  MX_LWIP_Process();
 8009010:	f7ff fe72 	bl	8008cf8 <MX_LWIP_Process>
	  HAL_Delay(1);
 8009014:	2001      	movs	r0, #1
 8009016:	f7f7 fb45 	bl	80006a4 <HAL_Delay>
 800901a:	e7f9      	b.n	8009010 <main+0x244>
 800901c:	2007c000 	.word	0x2007c000
 8009020:	e000ed00 	.word	0xe000ed00
 8009024:	40023800 	.word	0x40023800
 8009028:	40020400 	.word	0x40020400
 800902c:	40021800 	.word	0x40021800
 8009030:	40020800 	.word	0x40020800
 8009034:	10110000 	.word	0x10110000
 8009038:	40020000 	.word	0x40020000
 800903c:	20003c44 	.word	0x20003c44
 8009040:	40004800 	.word	0x40004800

08009044 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8009044:	4b0a      	ldr	r3, [pc, #40]	; (8009070 <HAL_MspInit+0x2c>)
{
 8009046:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 8009048:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800904a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800904e:	641a      	str	r2, [r3, #64]	; 0x40
 8009050:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009052:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8009056:	9200      	str	r2, [sp, #0]
 8009058:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800905a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800905c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009060:	645a      	str	r2, [r3, #68]	; 0x44
 8009062:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009064:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009068:	9301      	str	r3, [sp, #4]
 800906a:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800906c:	b002      	add	sp, #8
 800906e:	4770      	bx	lr
 8009070:	40023800 	.word	0x40023800

08009074 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8009074:	b510      	push	{r4, lr}
 8009076:	b088      	sub	sp, #32
 8009078:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800907a:	2214      	movs	r2, #20
 800907c:	2100      	movs	r1, #0
 800907e:	a803      	add	r0, sp, #12
 8009080:	f000 f8ee 	bl	8009260 <memset>
  if(huart->Instance==USART3)
 8009084:	6822      	ldr	r2, [r4, #0]
 8009086:	4b13      	ldr	r3, [pc, #76]	; (80090d4 <HAL_UART_MspInit+0x60>)
 8009088:	429a      	cmp	r2, r3
 800908a:	d120      	bne.n	80090ce <HAL_UART_MspInit+0x5a>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800908c:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009090:	a903      	add	r1, sp, #12
 8009092:	4811      	ldr	r0, [pc, #68]	; (80090d8 <HAL_UART_MspInit+0x64>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8009094:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009096:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800909a:	641a      	str	r2, [r3, #64]	; 0x40
 800909c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800909e:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 80090a2:	9201      	str	r2, [sp, #4]
 80090a4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80090a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80090a8:	f042 0208 	orr.w	r2, r2, #8
 80090ac:	631a      	str	r2, [r3, #48]	; 0x30
 80090ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090b0:	f003 0308 	and.w	r3, r3, #8
 80090b4:	9302      	str	r3, [sp, #8]
 80090b6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80090b8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80090bc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80090be:	2302      	movs	r3, #2
 80090c0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80090c2:	2303      	movs	r3, #3
 80090c4:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80090c6:	2307      	movs	r3, #7
 80090c8:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80090ca:	f7f7 ff0d 	bl	8000ee8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80090ce:	b008      	add	sp, #32
 80090d0:	bd10      	pop	{r4, pc}
 80090d2:	bf00      	nop
 80090d4:	40004800 	.word	0x40004800
 80090d8:	40020c00 	.word	0x40020c00

080090dc <NMI_Handler>:
 80090dc:	4770      	bx	lr

080090de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80090de:	e7fe      	b.n	80090de <HardFault_Handler>

080090e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80090e0:	e7fe      	b.n	80090e0 <MemManage_Handler>

080090e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80090e2:	e7fe      	b.n	80090e2 <BusFault_Handler>

080090e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80090e4:	e7fe      	b.n	80090e4 <UsageFault_Handler>

080090e6 <SVC_Handler>:
 80090e6:	4770      	bx	lr

080090e8 <DebugMon_Handler>:
 80090e8:	4770      	bx	lr

080090ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80090ea:	4770      	bx	lr

080090ec <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80090ec:	f7f7 bac8 	b.w	8000680 <HAL_IncTick>

080090f0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80090f0:	b570      	push	{r4, r5, r6, lr}
 80090f2:	460e      	mov	r6, r1
 80090f4:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80090f6:	460c      	mov	r4, r1
 80090f8:	1ba3      	subs	r3, r4, r6
 80090fa:	429d      	cmp	r5, r3
 80090fc:	dc01      	bgt.n	8009102 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 80090fe:	4628      	mov	r0, r5
 8009100:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8009102:	f3af 8000 	nop.w
 8009106:	f804 0b01 	strb.w	r0, [r4], #1
 800910a:	e7f5      	b.n	80090f8 <_read+0x8>

0800910c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800910c:	b570      	push	{r4, r5, r6, lr}
 800910e:	460e      	mov	r6, r1
 8009110:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009112:	460c      	mov	r4, r1
 8009114:	1ba3      	subs	r3, r4, r6
 8009116:	429d      	cmp	r5, r3
 8009118:	dc01      	bgt.n	800911e <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 800911a:	4628      	mov	r0, r5
 800911c:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 800911e:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009122:	f3af 8000 	nop.w
 8009126:	e7f5      	b.n	8009114 <_write+0x8>

08009128 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8009128:	4b09      	ldr	r3, [pc, #36]	; (8009150 <_sbrk+0x28>)
{
 800912a:	4602      	mov	r2, r0
	if (heap_end == 0)
 800912c:	6819      	ldr	r1, [r3, #0]
 800912e:	b909      	cbnz	r1, 8009134 <_sbrk+0xc>
		heap_end = &end;
 8009130:	4908      	ldr	r1, [pc, #32]	; (8009154 <_sbrk+0x2c>)
 8009132:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 8009134:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8009136:	4669      	mov	r1, sp
 8009138:	4402      	add	r2, r0
 800913a:	428a      	cmp	r2, r1
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 800913c:	bf83      	ittte	hi
 800913e:	220c      	movhi	r2, #12
 8009140:	4b05      	ldrhi	r3, [pc, #20]	; (8009158 <_sbrk+0x30>)
		return (caddr_t) -1;
 8009142:	f04f 30ff 	movhi.w	r0, #4294967295
	}

	heap_end += incr;
 8009146:	601a      	strls	r2, [r3, #0]
		errno = ENOMEM;
 8009148:	bf88      	it	hi
 800914a:	601a      	strhi	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 800914c:	4770      	bx	lr
 800914e:	bf00      	nop
 8009150:	2000064c 	.word	0x2000064c
 8009154:	20003cc8 	.word	0x20003cc8
 8009158:	20003cc4 	.word	0x20003cc4

0800915c <_close>:

int _close(int file)
{
	return -1;
}
 800915c:	f04f 30ff 	mov.w	r0, #4294967295
 8009160:	4770      	bx	lr

08009162 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8009162:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8009166:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8009168:	604b      	str	r3, [r1, #4]
}
 800916a:	4770      	bx	lr

0800916c <_isatty>:

int _isatty(int file)
{
	return 1;
}
 800916c:	2001      	movs	r0, #1
 800916e:	4770      	bx	lr

08009170 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8009170:	2000      	movs	r0, #0
 8009172:	4770      	bx	lr

08009174 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8009174:	4b05      	ldr	r3, [pc, #20]	; (800918c <SystemInit+0x18>)
 8009176:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800917a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800917e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8009182:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009186:	609a      	str	r2, [r3, #8]
 8009188:	4770      	bx	lr
 800918a:	bf00      	nop
 800918c:	e000ed00 	.word	0xe000ed00

08009190 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8009190:	f8df d034 	ldr.w	sp, [pc, #52]	; 80091c8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8009194:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8009196:	e003      	b.n	80091a0 <LoopCopyDataInit>

08009198 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8009198:	4b0c      	ldr	r3, [pc, #48]	; (80091cc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800919a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800919c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800919e:	3104      	adds	r1, #4

080091a0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80091a0:	480b      	ldr	r0, [pc, #44]	; (80091d0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80091a2:	4b0c      	ldr	r3, [pc, #48]	; (80091d4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80091a4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80091a6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80091a8:	d3f6      	bcc.n	8009198 <CopyDataInit>
  ldr  r2, =_sbss
 80091aa:	4a0b      	ldr	r2, [pc, #44]	; (80091d8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80091ac:	e002      	b.n	80091b4 <LoopFillZerobss>

080091ae <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80091ae:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80091b0:	f842 3b04 	str.w	r3, [r2], #4

080091b4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80091b4:	4b09      	ldr	r3, [pc, #36]	; (80091dc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80091b6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80091b8:	d3f9      	bcc.n	80091ae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80091ba:	f7ff ffdb 	bl	8009174 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80091be:	f000 f811 	bl	80091e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80091c2:	f7ff fe03 	bl	8008dcc <main>
  bx  lr    
 80091c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80091c8:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 80091cc:	0800d05c 	.word	0x0800d05c
  ldr  r0, =_sdata
 80091d0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80091d4:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 80091d8:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 80091dc:	20003cc8 	.word	0x20003cc8

080091e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80091e0:	e7fe      	b.n	80091e0 <ADC_IRQHandler>
	...

080091e4 <__libc_init_array>:
 80091e4:	b570      	push	{r4, r5, r6, lr}
 80091e6:	4e0d      	ldr	r6, [pc, #52]	; (800921c <__libc_init_array+0x38>)
 80091e8:	4c0d      	ldr	r4, [pc, #52]	; (8009220 <__libc_init_array+0x3c>)
 80091ea:	1ba4      	subs	r4, r4, r6
 80091ec:	10a4      	asrs	r4, r4, #2
 80091ee:	2500      	movs	r5, #0
 80091f0:	42a5      	cmp	r5, r4
 80091f2:	d109      	bne.n	8009208 <__libc_init_array+0x24>
 80091f4:	4e0b      	ldr	r6, [pc, #44]	; (8009224 <__libc_init_array+0x40>)
 80091f6:	4c0c      	ldr	r4, [pc, #48]	; (8009228 <__libc_init_array+0x44>)
 80091f8:	f000 ff94 	bl	800a124 <_init>
 80091fc:	1ba4      	subs	r4, r4, r6
 80091fe:	10a4      	asrs	r4, r4, #2
 8009200:	2500      	movs	r5, #0
 8009202:	42a5      	cmp	r5, r4
 8009204:	d105      	bne.n	8009212 <__libc_init_array+0x2e>
 8009206:	bd70      	pop	{r4, r5, r6, pc}
 8009208:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800920c:	4798      	blx	r3
 800920e:	3501      	adds	r5, #1
 8009210:	e7ee      	b.n	80091f0 <__libc_init_array+0xc>
 8009212:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009216:	4798      	blx	r3
 8009218:	3501      	adds	r5, #1
 800921a:	e7f2      	b.n	8009202 <__libc_init_array+0x1e>
 800921c:	0800d054 	.word	0x0800d054
 8009220:	0800d054 	.word	0x0800d054
 8009224:	0800d054 	.word	0x0800d054
 8009228:	0800d058 	.word	0x0800d058

0800922c <memcmp>:
 800922c:	b510      	push	{r4, lr}
 800922e:	3901      	subs	r1, #1
 8009230:	4402      	add	r2, r0
 8009232:	4290      	cmp	r0, r2
 8009234:	d101      	bne.n	800923a <memcmp+0xe>
 8009236:	2000      	movs	r0, #0
 8009238:	bd10      	pop	{r4, pc}
 800923a:	f810 3b01 	ldrb.w	r3, [r0], #1
 800923e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009242:	42a3      	cmp	r3, r4
 8009244:	d0f5      	beq.n	8009232 <memcmp+0x6>
 8009246:	1b18      	subs	r0, r3, r4
 8009248:	bd10      	pop	{r4, pc}

0800924a <memcpy>:
 800924a:	b510      	push	{r4, lr}
 800924c:	1e43      	subs	r3, r0, #1
 800924e:	440a      	add	r2, r1
 8009250:	4291      	cmp	r1, r2
 8009252:	d100      	bne.n	8009256 <memcpy+0xc>
 8009254:	bd10      	pop	{r4, pc}
 8009256:	f811 4b01 	ldrb.w	r4, [r1], #1
 800925a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800925e:	e7f7      	b.n	8009250 <memcpy+0x6>

08009260 <memset>:
 8009260:	4402      	add	r2, r0
 8009262:	4603      	mov	r3, r0
 8009264:	4293      	cmp	r3, r2
 8009266:	d100      	bne.n	800926a <memset+0xa>
 8009268:	4770      	bx	lr
 800926a:	f803 1b01 	strb.w	r1, [r3], #1
 800926e:	e7f9      	b.n	8009264 <memset+0x4>

08009270 <iprintf>:
 8009270:	b40f      	push	{r0, r1, r2, r3}
 8009272:	4b0a      	ldr	r3, [pc, #40]	; (800929c <iprintf+0x2c>)
 8009274:	b513      	push	{r0, r1, r4, lr}
 8009276:	681c      	ldr	r4, [r3, #0]
 8009278:	b124      	cbz	r4, 8009284 <iprintf+0x14>
 800927a:	69a3      	ldr	r3, [r4, #24]
 800927c:	b913      	cbnz	r3, 8009284 <iprintf+0x14>
 800927e:	4620      	mov	r0, r4
 8009280:	f000 f8a8 	bl	80093d4 <__sinit>
 8009284:	ab05      	add	r3, sp, #20
 8009286:	9a04      	ldr	r2, [sp, #16]
 8009288:	68a1      	ldr	r1, [r4, #8]
 800928a:	9301      	str	r3, [sp, #4]
 800928c:	4620      	mov	r0, r4
 800928e:	f000 fa09 	bl	80096a4 <_vfiprintf_r>
 8009292:	b002      	add	sp, #8
 8009294:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009298:	b004      	add	sp, #16
 800929a:	4770      	bx	lr
 800929c:	20000014 	.word	0x20000014

080092a0 <rand>:
 80092a0:	4b19      	ldr	r3, [pc, #100]	; (8009308 <rand+0x68>)
 80092a2:	b510      	push	{r4, lr}
 80092a4:	681c      	ldr	r4, [r3, #0]
 80092a6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80092a8:	b9d3      	cbnz	r3, 80092e0 <rand+0x40>
 80092aa:	2018      	movs	r0, #24
 80092ac:	f000 f91c 	bl	80094e8 <malloc>
 80092b0:	f243 330e 	movw	r3, #13070	; 0x330e
 80092b4:	63a0      	str	r0, [r4, #56]	; 0x38
 80092b6:	8003      	strh	r3, [r0, #0]
 80092b8:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80092bc:	8043      	strh	r3, [r0, #2]
 80092be:	f241 2334 	movw	r3, #4660	; 0x1234
 80092c2:	8083      	strh	r3, [r0, #4]
 80092c4:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80092c8:	80c3      	strh	r3, [r0, #6]
 80092ca:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80092ce:	8103      	strh	r3, [r0, #8]
 80092d0:	2305      	movs	r3, #5
 80092d2:	8143      	strh	r3, [r0, #10]
 80092d4:	230b      	movs	r3, #11
 80092d6:	8183      	strh	r3, [r0, #12]
 80092d8:	2201      	movs	r2, #1
 80092da:	2300      	movs	r3, #0
 80092dc:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80092e0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80092e2:	480a      	ldr	r0, [pc, #40]	; (800930c <rand+0x6c>)
 80092e4:	690a      	ldr	r2, [r1, #16]
 80092e6:	694b      	ldr	r3, [r1, #20]
 80092e8:	4c09      	ldr	r4, [pc, #36]	; (8009310 <rand+0x70>)
 80092ea:	4350      	muls	r0, r2
 80092ec:	fb04 0003 	mla	r0, r4, r3, r0
 80092f0:	fba2 2304 	umull	r2, r3, r2, r4
 80092f4:	3201      	adds	r2, #1
 80092f6:	4403      	add	r3, r0
 80092f8:	f143 0300 	adc.w	r3, r3, #0
 80092fc:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8009300:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 8009304:	bd10      	pop	{r4, pc}
 8009306:	bf00      	nop
 8009308:	20000014 	.word	0x20000014
 800930c:	5851f42d 	.word	0x5851f42d
 8009310:	4c957f2d 	.word	0x4c957f2d

08009314 <strchr>:
 8009314:	b2c9      	uxtb	r1, r1
 8009316:	4603      	mov	r3, r0
 8009318:	f810 2b01 	ldrb.w	r2, [r0], #1
 800931c:	b11a      	cbz	r2, 8009326 <strchr+0x12>
 800931e:	4291      	cmp	r1, r2
 8009320:	d1f9      	bne.n	8009316 <strchr+0x2>
 8009322:	4618      	mov	r0, r3
 8009324:	4770      	bx	lr
 8009326:	2900      	cmp	r1, #0
 8009328:	bf0c      	ite	eq
 800932a:	4618      	moveq	r0, r3
 800932c:	2000      	movne	r0, #0
 800932e:	4770      	bx	lr

08009330 <strncmp>:
 8009330:	b510      	push	{r4, lr}
 8009332:	b16a      	cbz	r2, 8009350 <strncmp+0x20>
 8009334:	3901      	subs	r1, #1
 8009336:	1884      	adds	r4, r0, r2
 8009338:	f810 3b01 	ldrb.w	r3, [r0], #1
 800933c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009340:	4293      	cmp	r3, r2
 8009342:	d103      	bne.n	800934c <strncmp+0x1c>
 8009344:	42a0      	cmp	r0, r4
 8009346:	d001      	beq.n	800934c <strncmp+0x1c>
 8009348:	2b00      	cmp	r3, #0
 800934a:	d1f5      	bne.n	8009338 <strncmp+0x8>
 800934c:	1a98      	subs	r0, r3, r2
 800934e:	bd10      	pop	{r4, pc}
 8009350:	4610      	mov	r0, r2
 8009352:	bd10      	pop	{r4, pc}

08009354 <_cleanup_r>:
 8009354:	4901      	ldr	r1, [pc, #4]	; (800935c <_cleanup_r+0x8>)
 8009356:	f000 b8a9 	b.w	80094ac <_fwalk_reent>
 800935a:	bf00      	nop
 800935c:	08009f79 	.word	0x08009f79

08009360 <std.isra.0>:
 8009360:	2300      	movs	r3, #0
 8009362:	b510      	push	{r4, lr}
 8009364:	4604      	mov	r4, r0
 8009366:	6003      	str	r3, [r0, #0]
 8009368:	6043      	str	r3, [r0, #4]
 800936a:	6083      	str	r3, [r0, #8]
 800936c:	8181      	strh	r1, [r0, #12]
 800936e:	6643      	str	r3, [r0, #100]	; 0x64
 8009370:	81c2      	strh	r2, [r0, #14]
 8009372:	6103      	str	r3, [r0, #16]
 8009374:	6143      	str	r3, [r0, #20]
 8009376:	6183      	str	r3, [r0, #24]
 8009378:	4619      	mov	r1, r3
 800937a:	2208      	movs	r2, #8
 800937c:	305c      	adds	r0, #92	; 0x5c
 800937e:	f7ff ff6f 	bl	8009260 <memset>
 8009382:	4b05      	ldr	r3, [pc, #20]	; (8009398 <std.isra.0+0x38>)
 8009384:	6263      	str	r3, [r4, #36]	; 0x24
 8009386:	4b05      	ldr	r3, [pc, #20]	; (800939c <std.isra.0+0x3c>)
 8009388:	62a3      	str	r3, [r4, #40]	; 0x28
 800938a:	4b05      	ldr	r3, [pc, #20]	; (80093a0 <std.isra.0+0x40>)
 800938c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800938e:	4b05      	ldr	r3, [pc, #20]	; (80093a4 <std.isra.0+0x44>)
 8009390:	6224      	str	r4, [r4, #32]
 8009392:	6323      	str	r3, [r4, #48]	; 0x30
 8009394:	bd10      	pop	{r4, pc}
 8009396:	bf00      	nop
 8009398:	08009c1d 	.word	0x08009c1d
 800939c:	08009c3f 	.word	0x08009c3f
 80093a0:	08009c77 	.word	0x08009c77
 80093a4:	08009c9b 	.word	0x08009c9b

080093a8 <__sfmoreglue>:
 80093a8:	b570      	push	{r4, r5, r6, lr}
 80093aa:	1e4a      	subs	r2, r1, #1
 80093ac:	2568      	movs	r5, #104	; 0x68
 80093ae:	4355      	muls	r5, r2
 80093b0:	460e      	mov	r6, r1
 80093b2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80093b6:	f000 f8ed 	bl	8009594 <_malloc_r>
 80093ba:	4604      	mov	r4, r0
 80093bc:	b140      	cbz	r0, 80093d0 <__sfmoreglue+0x28>
 80093be:	2100      	movs	r1, #0
 80093c0:	e880 0042 	stmia.w	r0, {r1, r6}
 80093c4:	300c      	adds	r0, #12
 80093c6:	60a0      	str	r0, [r4, #8]
 80093c8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80093cc:	f7ff ff48 	bl	8009260 <memset>
 80093d0:	4620      	mov	r0, r4
 80093d2:	bd70      	pop	{r4, r5, r6, pc}

080093d4 <__sinit>:
 80093d4:	6983      	ldr	r3, [r0, #24]
 80093d6:	b510      	push	{r4, lr}
 80093d8:	4604      	mov	r4, r0
 80093da:	bb33      	cbnz	r3, 800942a <__sinit+0x56>
 80093dc:	6483      	str	r3, [r0, #72]	; 0x48
 80093de:	64c3      	str	r3, [r0, #76]	; 0x4c
 80093e0:	6503      	str	r3, [r0, #80]	; 0x50
 80093e2:	4b12      	ldr	r3, [pc, #72]	; (800942c <__sinit+0x58>)
 80093e4:	4a12      	ldr	r2, [pc, #72]	; (8009430 <__sinit+0x5c>)
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	6282      	str	r2, [r0, #40]	; 0x28
 80093ea:	4298      	cmp	r0, r3
 80093ec:	bf04      	itt	eq
 80093ee:	2301      	moveq	r3, #1
 80093f0:	6183      	streq	r3, [r0, #24]
 80093f2:	f000 f81f 	bl	8009434 <__sfp>
 80093f6:	6060      	str	r0, [r4, #4]
 80093f8:	4620      	mov	r0, r4
 80093fa:	f000 f81b 	bl	8009434 <__sfp>
 80093fe:	60a0      	str	r0, [r4, #8]
 8009400:	4620      	mov	r0, r4
 8009402:	f000 f817 	bl	8009434 <__sfp>
 8009406:	2200      	movs	r2, #0
 8009408:	60e0      	str	r0, [r4, #12]
 800940a:	2104      	movs	r1, #4
 800940c:	6860      	ldr	r0, [r4, #4]
 800940e:	f7ff ffa7 	bl	8009360 <std.isra.0>
 8009412:	2201      	movs	r2, #1
 8009414:	2109      	movs	r1, #9
 8009416:	68a0      	ldr	r0, [r4, #8]
 8009418:	f7ff ffa2 	bl	8009360 <std.isra.0>
 800941c:	2202      	movs	r2, #2
 800941e:	2112      	movs	r1, #18
 8009420:	68e0      	ldr	r0, [r4, #12]
 8009422:	f7ff ff9d 	bl	8009360 <std.isra.0>
 8009426:	2301      	movs	r3, #1
 8009428:	61a3      	str	r3, [r4, #24]
 800942a:	bd10      	pop	{r4, pc}
 800942c:	0800d014 	.word	0x0800d014
 8009430:	08009355 	.word	0x08009355

08009434 <__sfp>:
 8009434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009436:	4b1c      	ldr	r3, [pc, #112]	; (80094a8 <__sfp+0x74>)
 8009438:	681e      	ldr	r6, [r3, #0]
 800943a:	69b3      	ldr	r3, [r6, #24]
 800943c:	4607      	mov	r7, r0
 800943e:	b913      	cbnz	r3, 8009446 <__sfp+0x12>
 8009440:	4630      	mov	r0, r6
 8009442:	f7ff ffc7 	bl	80093d4 <__sinit>
 8009446:	3648      	adds	r6, #72	; 0x48
 8009448:	68b4      	ldr	r4, [r6, #8]
 800944a:	6873      	ldr	r3, [r6, #4]
 800944c:	3b01      	subs	r3, #1
 800944e:	d503      	bpl.n	8009458 <__sfp+0x24>
 8009450:	6833      	ldr	r3, [r6, #0]
 8009452:	b133      	cbz	r3, 8009462 <__sfp+0x2e>
 8009454:	6836      	ldr	r6, [r6, #0]
 8009456:	e7f7      	b.n	8009448 <__sfp+0x14>
 8009458:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800945c:	b16d      	cbz	r5, 800947a <__sfp+0x46>
 800945e:	3468      	adds	r4, #104	; 0x68
 8009460:	e7f4      	b.n	800944c <__sfp+0x18>
 8009462:	2104      	movs	r1, #4
 8009464:	4638      	mov	r0, r7
 8009466:	f7ff ff9f 	bl	80093a8 <__sfmoreglue>
 800946a:	6030      	str	r0, [r6, #0]
 800946c:	2800      	cmp	r0, #0
 800946e:	d1f1      	bne.n	8009454 <__sfp+0x20>
 8009470:	230c      	movs	r3, #12
 8009472:	603b      	str	r3, [r7, #0]
 8009474:	4604      	mov	r4, r0
 8009476:	4620      	mov	r0, r4
 8009478:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800947a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800947e:	81e3      	strh	r3, [r4, #14]
 8009480:	2301      	movs	r3, #1
 8009482:	81a3      	strh	r3, [r4, #12]
 8009484:	6665      	str	r5, [r4, #100]	; 0x64
 8009486:	6025      	str	r5, [r4, #0]
 8009488:	60a5      	str	r5, [r4, #8]
 800948a:	6065      	str	r5, [r4, #4]
 800948c:	6125      	str	r5, [r4, #16]
 800948e:	6165      	str	r5, [r4, #20]
 8009490:	61a5      	str	r5, [r4, #24]
 8009492:	2208      	movs	r2, #8
 8009494:	4629      	mov	r1, r5
 8009496:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800949a:	f7ff fee1 	bl	8009260 <memset>
 800949e:	6365      	str	r5, [r4, #52]	; 0x34
 80094a0:	63a5      	str	r5, [r4, #56]	; 0x38
 80094a2:	64a5      	str	r5, [r4, #72]	; 0x48
 80094a4:	64e5      	str	r5, [r4, #76]	; 0x4c
 80094a6:	e7e6      	b.n	8009476 <__sfp+0x42>
 80094a8:	0800d014 	.word	0x0800d014

080094ac <_fwalk_reent>:
 80094ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094b0:	4680      	mov	r8, r0
 80094b2:	4689      	mov	r9, r1
 80094b4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80094b8:	2600      	movs	r6, #0
 80094ba:	b914      	cbnz	r4, 80094c2 <_fwalk_reent+0x16>
 80094bc:	4630      	mov	r0, r6
 80094be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094c2:	68a5      	ldr	r5, [r4, #8]
 80094c4:	6867      	ldr	r7, [r4, #4]
 80094c6:	3f01      	subs	r7, #1
 80094c8:	d501      	bpl.n	80094ce <_fwalk_reent+0x22>
 80094ca:	6824      	ldr	r4, [r4, #0]
 80094cc:	e7f5      	b.n	80094ba <_fwalk_reent+0xe>
 80094ce:	89ab      	ldrh	r3, [r5, #12]
 80094d0:	2b01      	cmp	r3, #1
 80094d2:	d907      	bls.n	80094e4 <_fwalk_reent+0x38>
 80094d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80094d8:	3301      	adds	r3, #1
 80094da:	d003      	beq.n	80094e4 <_fwalk_reent+0x38>
 80094dc:	4629      	mov	r1, r5
 80094de:	4640      	mov	r0, r8
 80094e0:	47c8      	blx	r9
 80094e2:	4306      	orrs	r6, r0
 80094e4:	3568      	adds	r5, #104	; 0x68
 80094e6:	e7ee      	b.n	80094c6 <_fwalk_reent+0x1a>

080094e8 <malloc>:
 80094e8:	4b02      	ldr	r3, [pc, #8]	; (80094f4 <malloc+0xc>)
 80094ea:	4601      	mov	r1, r0
 80094ec:	6818      	ldr	r0, [r3, #0]
 80094ee:	f000 b851 	b.w	8009594 <_malloc_r>
 80094f2:	bf00      	nop
 80094f4:	20000014 	.word	0x20000014

080094f8 <_free_r>:
 80094f8:	b538      	push	{r3, r4, r5, lr}
 80094fa:	4605      	mov	r5, r0
 80094fc:	2900      	cmp	r1, #0
 80094fe:	d045      	beq.n	800958c <_free_r+0x94>
 8009500:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009504:	1f0c      	subs	r4, r1, #4
 8009506:	2b00      	cmp	r3, #0
 8009508:	bfb8      	it	lt
 800950a:	18e4      	addlt	r4, r4, r3
 800950c:	f000 fdd4 	bl	800a0b8 <__malloc_lock>
 8009510:	4a1f      	ldr	r2, [pc, #124]	; (8009590 <_free_r+0x98>)
 8009512:	6813      	ldr	r3, [r2, #0]
 8009514:	4610      	mov	r0, r2
 8009516:	b933      	cbnz	r3, 8009526 <_free_r+0x2e>
 8009518:	6063      	str	r3, [r4, #4]
 800951a:	6014      	str	r4, [r2, #0]
 800951c:	4628      	mov	r0, r5
 800951e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009522:	f000 bdca 	b.w	800a0ba <__malloc_unlock>
 8009526:	42a3      	cmp	r3, r4
 8009528:	d90c      	bls.n	8009544 <_free_r+0x4c>
 800952a:	6821      	ldr	r1, [r4, #0]
 800952c:	1862      	adds	r2, r4, r1
 800952e:	4293      	cmp	r3, r2
 8009530:	bf04      	itt	eq
 8009532:	681a      	ldreq	r2, [r3, #0]
 8009534:	685b      	ldreq	r3, [r3, #4]
 8009536:	6063      	str	r3, [r4, #4]
 8009538:	bf04      	itt	eq
 800953a:	1852      	addeq	r2, r2, r1
 800953c:	6022      	streq	r2, [r4, #0]
 800953e:	6004      	str	r4, [r0, #0]
 8009540:	e7ec      	b.n	800951c <_free_r+0x24>
 8009542:	4613      	mov	r3, r2
 8009544:	685a      	ldr	r2, [r3, #4]
 8009546:	b10a      	cbz	r2, 800954c <_free_r+0x54>
 8009548:	42a2      	cmp	r2, r4
 800954a:	d9fa      	bls.n	8009542 <_free_r+0x4a>
 800954c:	6819      	ldr	r1, [r3, #0]
 800954e:	1858      	adds	r0, r3, r1
 8009550:	42a0      	cmp	r0, r4
 8009552:	d10b      	bne.n	800956c <_free_r+0x74>
 8009554:	6820      	ldr	r0, [r4, #0]
 8009556:	4401      	add	r1, r0
 8009558:	1858      	adds	r0, r3, r1
 800955a:	4282      	cmp	r2, r0
 800955c:	6019      	str	r1, [r3, #0]
 800955e:	d1dd      	bne.n	800951c <_free_r+0x24>
 8009560:	6810      	ldr	r0, [r2, #0]
 8009562:	6852      	ldr	r2, [r2, #4]
 8009564:	605a      	str	r2, [r3, #4]
 8009566:	4401      	add	r1, r0
 8009568:	6019      	str	r1, [r3, #0]
 800956a:	e7d7      	b.n	800951c <_free_r+0x24>
 800956c:	d902      	bls.n	8009574 <_free_r+0x7c>
 800956e:	230c      	movs	r3, #12
 8009570:	602b      	str	r3, [r5, #0]
 8009572:	e7d3      	b.n	800951c <_free_r+0x24>
 8009574:	6820      	ldr	r0, [r4, #0]
 8009576:	1821      	adds	r1, r4, r0
 8009578:	428a      	cmp	r2, r1
 800957a:	bf04      	itt	eq
 800957c:	6811      	ldreq	r1, [r2, #0]
 800957e:	6852      	ldreq	r2, [r2, #4]
 8009580:	6062      	str	r2, [r4, #4]
 8009582:	bf04      	itt	eq
 8009584:	1809      	addeq	r1, r1, r0
 8009586:	6021      	streq	r1, [r4, #0]
 8009588:	605c      	str	r4, [r3, #4]
 800958a:	e7c7      	b.n	800951c <_free_r+0x24>
 800958c:	bd38      	pop	{r3, r4, r5, pc}
 800958e:	bf00      	nop
 8009590:	20000650 	.word	0x20000650

08009594 <_malloc_r>:
 8009594:	b570      	push	{r4, r5, r6, lr}
 8009596:	1ccd      	adds	r5, r1, #3
 8009598:	f025 0503 	bic.w	r5, r5, #3
 800959c:	3508      	adds	r5, #8
 800959e:	2d0c      	cmp	r5, #12
 80095a0:	bf38      	it	cc
 80095a2:	250c      	movcc	r5, #12
 80095a4:	2d00      	cmp	r5, #0
 80095a6:	4606      	mov	r6, r0
 80095a8:	db01      	blt.n	80095ae <_malloc_r+0x1a>
 80095aa:	42a9      	cmp	r1, r5
 80095ac:	d903      	bls.n	80095b6 <_malloc_r+0x22>
 80095ae:	230c      	movs	r3, #12
 80095b0:	6033      	str	r3, [r6, #0]
 80095b2:	2000      	movs	r0, #0
 80095b4:	bd70      	pop	{r4, r5, r6, pc}
 80095b6:	f000 fd7f 	bl	800a0b8 <__malloc_lock>
 80095ba:	4a23      	ldr	r2, [pc, #140]	; (8009648 <_malloc_r+0xb4>)
 80095bc:	6814      	ldr	r4, [r2, #0]
 80095be:	4621      	mov	r1, r4
 80095c0:	b991      	cbnz	r1, 80095e8 <_malloc_r+0x54>
 80095c2:	4c22      	ldr	r4, [pc, #136]	; (800964c <_malloc_r+0xb8>)
 80095c4:	6823      	ldr	r3, [r4, #0]
 80095c6:	b91b      	cbnz	r3, 80095d0 <_malloc_r+0x3c>
 80095c8:	4630      	mov	r0, r6
 80095ca:	f000 fb17 	bl	8009bfc <_sbrk_r>
 80095ce:	6020      	str	r0, [r4, #0]
 80095d0:	4629      	mov	r1, r5
 80095d2:	4630      	mov	r0, r6
 80095d4:	f000 fb12 	bl	8009bfc <_sbrk_r>
 80095d8:	1c43      	adds	r3, r0, #1
 80095da:	d126      	bne.n	800962a <_malloc_r+0x96>
 80095dc:	230c      	movs	r3, #12
 80095de:	6033      	str	r3, [r6, #0]
 80095e0:	4630      	mov	r0, r6
 80095e2:	f000 fd6a 	bl	800a0ba <__malloc_unlock>
 80095e6:	e7e4      	b.n	80095b2 <_malloc_r+0x1e>
 80095e8:	680b      	ldr	r3, [r1, #0]
 80095ea:	1b5b      	subs	r3, r3, r5
 80095ec:	d41a      	bmi.n	8009624 <_malloc_r+0x90>
 80095ee:	2b0b      	cmp	r3, #11
 80095f0:	d90f      	bls.n	8009612 <_malloc_r+0x7e>
 80095f2:	600b      	str	r3, [r1, #0]
 80095f4:	50cd      	str	r5, [r1, r3]
 80095f6:	18cc      	adds	r4, r1, r3
 80095f8:	4630      	mov	r0, r6
 80095fa:	f000 fd5e 	bl	800a0ba <__malloc_unlock>
 80095fe:	f104 000b 	add.w	r0, r4, #11
 8009602:	1d23      	adds	r3, r4, #4
 8009604:	f020 0007 	bic.w	r0, r0, #7
 8009608:	1ac3      	subs	r3, r0, r3
 800960a:	d01b      	beq.n	8009644 <_malloc_r+0xb0>
 800960c:	425a      	negs	r2, r3
 800960e:	50e2      	str	r2, [r4, r3]
 8009610:	bd70      	pop	{r4, r5, r6, pc}
 8009612:	428c      	cmp	r4, r1
 8009614:	bf0d      	iteet	eq
 8009616:	6863      	ldreq	r3, [r4, #4]
 8009618:	684b      	ldrne	r3, [r1, #4]
 800961a:	6063      	strne	r3, [r4, #4]
 800961c:	6013      	streq	r3, [r2, #0]
 800961e:	bf18      	it	ne
 8009620:	460c      	movne	r4, r1
 8009622:	e7e9      	b.n	80095f8 <_malloc_r+0x64>
 8009624:	460c      	mov	r4, r1
 8009626:	6849      	ldr	r1, [r1, #4]
 8009628:	e7ca      	b.n	80095c0 <_malloc_r+0x2c>
 800962a:	1cc4      	adds	r4, r0, #3
 800962c:	f024 0403 	bic.w	r4, r4, #3
 8009630:	42a0      	cmp	r0, r4
 8009632:	d005      	beq.n	8009640 <_malloc_r+0xac>
 8009634:	1a21      	subs	r1, r4, r0
 8009636:	4630      	mov	r0, r6
 8009638:	f000 fae0 	bl	8009bfc <_sbrk_r>
 800963c:	3001      	adds	r0, #1
 800963e:	d0cd      	beq.n	80095dc <_malloc_r+0x48>
 8009640:	6025      	str	r5, [r4, #0]
 8009642:	e7d9      	b.n	80095f8 <_malloc_r+0x64>
 8009644:	bd70      	pop	{r4, r5, r6, pc}
 8009646:	bf00      	nop
 8009648:	20000650 	.word	0x20000650
 800964c:	20000654 	.word	0x20000654

08009650 <__sfputc_r>:
 8009650:	6893      	ldr	r3, [r2, #8]
 8009652:	3b01      	subs	r3, #1
 8009654:	2b00      	cmp	r3, #0
 8009656:	b410      	push	{r4}
 8009658:	6093      	str	r3, [r2, #8]
 800965a:	da09      	bge.n	8009670 <__sfputc_r+0x20>
 800965c:	6994      	ldr	r4, [r2, #24]
 800965e:	42a3      	cmp	r3, r4
 8009660:	db02      	blt.n	8009668 <__sfputc_r+0x18>
 8009662:	b2cb      	uxtb	r3, r1
 8009664:	2b0a      	cmp	r3, #10
 8009666:	d103      	bne.n	8009670 <__sfputc_r+0x20>
 8009668:	f85d 4b04 	ldr.w	r4, [sp], #4
 800966c:	f000 bb1a 	b.w	8009ca4 <__swbuf_r>
 8009670:	6813      	ldr	r3, [r2, #0]
 8009672:	1c58      	adds	r0, r3, #1
 8009674:	6010      	str	r0, [r2, #0]
 8009676:	7019      	strb	r1, [r3, #0]
 8009678:	b2c8      	uxtb	r0, r1
 800967a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800967e:	4770      	bx	lr

08009680 <__sfputs_r>:
 8009680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009682:	4606      	mov	r6, r0
 8009684:	460f      	mov	r7, r1
 8009686:	4614      	mov	r4, r2
 8009688:	18d5      	adds	r5, r2, r3
 800968a:	42ac      	cmp	r4, r5
 800968c:	d101      	bne.n	8009692 <__sfputs_r+0x12>
 800968e:	2000      	movs	r0, #0
 8009690:	e007      	b.n	80096a2 <__sfputs_r+0x22>
 8009692:	463a      	mov	r2, r7
 8009694:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009698:	4630      	mov	r0, r6
 800969a:	f7ff ffd9 	bl	8009650 <__sfputc_r>
 800969e:	1c43      	adds	r3, r0, #1
 80096a0:	d1f3      	bne.n	800968a <__sfputs_r+0xa>
 80096a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080096a4 <_vfiprintf_r>:
 80096a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096a8:	b09d      	sub	sp, #116	; 0x74
 80096aa:	460c      	mov	r4, r1
 80096ac:	4617      	mov	r7, r2
 80096ae:	9303      	str	r3, [sp, #12]
 80096b0:	4606      	mov	r6, r0
 80096b2:	b118      	cbz	r0, 80096bc <_vfiprintf_r+0x18>
 80096b4:	6983      	ldr	r3, [r0, #24]
 80096b6:	b90b      	cbnz	r3, 80096bc <_vfiprintf_r+0x18>
 80096b8:	f7ff fe8c 	bl	80093d4 <__sinit>
 80096bc:	4b7c      	ldr	r3, [pc, #496]	; (80098b0 <_vfiprintf_r+0x20c>)
 80096be:	429c      	cmp	r4, r3
 80096c0:	d157      	bne.n	8009772 <_vfiprintf_r+0xce>
 80096c2:	6874      	ldr	r4, [r6, #4]
 80096c4:	89a3      	ldrh	r3, [r4, #12]
 80096c6:	0718      	lsls	r0, r3, #28
 80096c8:	d55d      	bpl.n	8009786 <_vfiprintf_r+0xe2>
 80096ca:	6923      	ldr	r3, [r4, #16]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d05a      	beq.n	8009786 <_vfiprintf_r+0xe2>
 80096d0:	2300      	movs	r3, #0
 80096d2:	9309      	str	r3, [sp, #36]	; 0x24
 80096d4:	2320      	movs	r3, #32
 80096d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80096da:	2330      	movs	r3, #48	; 0x30
 80096dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80096e0:	f04f 0b01 	mov.w	fp, #1
 80096e4:	46b8      	mov	r8, r7
 80096e6:	4645      	mov	r5, r8
 80096e8:	f815 3b01 	ldrb.w	r3, [r5], #1
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d155      	bne.n	800979c <_vfiprintf_r+0xf8>
 80096f0:	ebb8 0a07 	subs.w	sl, r8, r7
 80096f4:	d00b      	beq.n	800970e <_vfiprintf_r+0x6a>
 80096f6:	4653      	mov	r3, sl
 80096f8:	463a      	mov	r2, r7
 80096fa:	4621      	mov	r1, r4
 80096fc:	4630      	mov	r0, r6
 80096fe:	f7ff ffbf 	bl	8009680 <__sfputs_r>
 8009702:	3001      	adds	r0, #1
 8009704:	f000 80c4 	beq.w	8009890 <_vfiprintf_r+0x1ec>
 8009708:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800970a:	4453      	add	r3, sl
 800970c:	9309      	str	r3, [sp, #36]	; 0x24
 800970e:	f898 3000 	ldrb.w	r3, [r8]
 8009712:	2b00      	cmp	r3, #0
 8009714:	f000 80bc 	beq.w	8009890 <_vfiprintf_r+0x1ec>
 8009718:	2300      	movs	r3, #0
 800971a:	f04f 32ff 	mov.w	r2, #4294967295
 800971e:	9304      	str	r3, [sp, #16]
 8009720:	9307      	str	r3, [sp, #28]
 8009722:	9205      	str	r2, [sp, #20]
 8009724:	9306      	str	r3, [sp, #24]
 8009726:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800972a:	931a      	str	r3, [sp, #104]	; 0x68
 800972c:	2205      	movs	r2, #5
 800972e:	7829      	ldrb	r1, [r5, #0]
 8009730:	4860      	ldr	r0, [pc, #384]	; (80098b4 <_vfiprintf_r+0x210>)
 8009732:	f7f6 fd9d 	bl	8000270 <memchr>
 8009736:	f105 0801 	add.w	r8, r5, #1
 800973a:	9b04      	ldr	r3, [sp, #16]
 800973c:	2800      	cmp	r0, #0
 800973e:	d131      	bne.n	80097a4 <_vfiprintf_r+0x100>
 8009740:	06d9      	lsls	r1, r3, #27
 8009742:	bf44      	itt	mi
 8009744:	2220      	movmi	r2, #32
 8009746:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800974a:	071a      	lsls	r2, r3, #28
 800974c:	bf44      	itt	mi
 800974e:	222b      	movmi	r2, #43	; 0x2b
 8009750:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009754:	782a      	ldrb	r2, [r5, #0]
 8009756:	2a2a      	cmp	r2, #42	; 0x2a
 8009758:	d02c      	beq.n	80097b4 <_vfiprintf_r+0x110>
 800975a:	9a07      	ldr	r2, [sp, #28]
 800975c:	2100      	movs	r1, #0
 800975e:	200a      	movs	r0, #10
 8009760:	46a8      	mov	r8, r5
 8009762:	3501      	adds	r5, #1
 8009764:	f898 3000 	ldrb.w	r3, [r8]
 8009768:	3b30      	subs	r3, #48	; 0x30
 800976a:	2b09      	cmp	r3, #9
 800976c:	d96d      	bls.n	800984a <_vfiprintf_r+0x1a6>
 800976e:	b371      	cbz	r1, 80097ce <_vfiprintf_r+0x12a>
 8009770:	e026      	b.n	80097c0 <_vfiprintf_r+0x11c>
 8009772:	4b51      	ldr	r3, [pc, #324]	; (80098b8 <_vfiprintf_r+0x214>)
 8009774:	429c      	cmp	r4, r3
 8009776:	d101      	bne.n	800977c <_vfiprintf_r+0xd8>
 8009778:	68b4      	ldr	r4, [r6, #8]
 800977a:	e7a3      	b.n	80096c4 <_vfiprintf_r+0x20>
 800977c:	4b4f      	ldr	r3, [pc, #316]	; (80098bc <_vfiprintf_r+0x218>)
 800977e:	429c      	cmp	r4, r3
 8009780:	bf08      	it	eq
 8009782:	68f4      	ldreq	r4, [r6, #12]
 8009784:	e79e      	b.n	80096c4 <_vfiprintf_r+0x20>
 8009786:	4621      	mov	r1, r4
 8009788:	4630      	mov	r0, r6
 800978a:	f000 faef 	bl	8009d6c <__swsetup_r>
 800978e:	2800      	cmp	r0, #0
 8009790:	d09e      	beq.n	80096d0 <_vfiprintf_r+0x2c>
 8009792:	f04f 30ff 	mov.w	r0, #4294967295
 8009796:	b01d      	add	sp, #116	; 0x74
 8009798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800979c:	2b25      	cmp	r3, #37	; 0x25
 800979e:	d0a7      	beq.n	80096f0 <_vfiprintf_r+0x4c>
 80097a0:	46a8      	mov	r8, r5
 80097a2:	e7a0      	b.n	80096e6 <_vfiprintf_r+0x42>
 80097a4:	4a43      	ldr	r2, [pc, #268]	; (80098b4 <_vfiprintf_r+0x210>)
 80097a6:	1a80      	subs	r0, r0, r2
 80097a8:	fa0b f000 	lsl.w	r0, fp, r0
 80097ac:	4318      	orrs	r0, r3
 80097ae:	9004      	str	r0, [sp, #16]
 80097b0:	4645      	mov	r5, r8
 80097b2:	e7bb      	b.n	800972c <_vfiprintf_r+0x88>
 80097b4:	9a03      	ldr	r2, [sp, #12]
 80097b6:	1d11      	adds	r1, r2, #4
 80097b8:	6812      	ldr	r2, [r2, #0]
 80097ba:	9103      	str	r1, [sp, #12]
 80097bc:	2a00      	cmp	r2, #0
 80097be:	db01      	blt.n	80097c4 <_vfiprintf_r+0x120>
 80097c0:	9207      	str	r2, [sp, #28]
 80097c2:	e004      	b.n	80097ce <_vfiprintf_r+0x12a>
 80097c4:	4252      	negs	r2, r2
 80097c6:	f043 0302 	orr.w	r3, r3, #2
 80097ca:	9207      	str	r2, [sp, #28]
 80097cc:	9304      	str	r3, [sp, #16]
 80097ce:	f898 3000 	ldrb.w	r3, [r8]
 80097d2:	2b2e      	cmp	r3, #46	; 0x2e
 80097d4:	d110      	bne.n	80097f8 <_vfiprintf_r+0x154>
 80097d6:	f898 3001 	ldrb.w	r3, [r8, #1]
 80097da:	2b2a      	cmp	r3, #42	; 0x2a
 80097dc:	f108 0101 	add.w	r1, r8, #1
 80097e0:	d137      	bne.n	8009852 <_vfiprintf_r+0x1ae>
 80097e2:	9b03      	ldr	r3, [sp, #12]
 80097e4:	1d1a      	adds	r2, r3, #4
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	9203      	str	r2, [sp, #12]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	bfb8      	it	lt
 80097ee:	f04f 33ff 	movlt.w	r3, #4294967295
 80097f2:	f108 0802 	add.w	r8, r8, #2
 80097f6:	9305      	str	r3, [sp, #20]
 80097f8:	4d31      	ldr	r5, [pc, #196]	; (80098c0 <_vfiprintf_r+0x21c>)
 80097fa:	f898 1000 	ldrb.w	r1, [r8]
 80097fe:	2203      	movs	r2, #3
 8009800:	4628      	mov	r0, r5
 8009802:	f7f6 fd35 	bl	8000270 <memchr>
 8009806:	b140      	cbz	r0, 800981a <_vfiprintf_r+0x176>
 8009808:	2340      	movs	r3, #64	; 0x40
 800980a:	1b40      	subs	r0, r0, r5
 800980c:	fa03 f000 	lsl.w	r0, r3, r0
 8009810:	9b04      	ldr	r3, [sp, #16]
 8009812:	4303      	orrs	r3, r0
 8009814:	9304      	str	r3, [sp, #16]
 8009816:	f108 0801 	add.w	r8, r8, #1
 800981a:	f898 1000 	ldrb.w	r1, [r8]
 800981e:	4829      	ldr	r0, [pc, #164]	; (80098c4 <_vfiprintf_r+0x220>)
 8009820:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009824:	2206      	movs	r2, #6
 8009826:	f108 0701 	add.w	r7, r8, #1
 800982a:	f7f6 fd21 	bl	8000270 <memchr>
 800982e:	2800      	cmp	r0, #0
 8009830:	d034      	beq.n	800989c <_vfiprintf_r+0x1f8>
 8009832:	4b25      	ldr	r3, [pc, #148]	; (80098c8 <_vfiprintf_r+0x224>)
 8009834:	bb03      	cbnz	r3, 8009878 <_vfiprintf_r+0x1d4>
 8009836:	9b03      	ldr	r3, [sp, #12]
 8009838:	3307      	adds	r3, #7
 800983a:	f023 0307 	bic.w	r3, r3, #7
 800983e:	3308      	adds	r3, #8
 8009840:	9303      	str	r3, [sp, #12]
 8009842:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009844:	444b      	add	r3, r9
 8009846:	9309      	str	r3, [sp, #36]	; 0x24
 8009848:	e74c      	b.n	80096e4 <_vfiprintf_r+0x40>
 800984a:	fb00 3202 	mla	r2, r0, r2, r3
 800984e:	2101      	movs	r1, #1
 8009850:	e786      	b.n	8009760 <_vfiprintf_r+0xbc>
 8009852:	2300      	movs	r3, #0
 8009854:	9305      	str	r3, [sp, #20]
 8009856:	4618      	mov	r0, r3
 8009858:	250a      	movs	r5, #10
 800985a:	4688      	mov	r8, r1
 800985c:	3101      	adds	r1, #1
 800985e:	f898 2000 	ldrb.w	r2, [r8]
 8009862:	3a30      	subs	r2, #48	; 0x30
 8009864:	2a09      	cmp	r2, #9
 8009866:	d903      	bls.n	8009870 <_vfiprintf_r+0x1cc>
 8009868:	2b00      	cmp	r3, #0
 800986a:	d0c5      	beq.n	80097f8 <_vfiprintf_r+0x154>
 800986c:	9005      	str	r0, [sp, #20]
 800986e:	e7c3      	b.n	80097f8 <_vfiprintf_r+0x154>
 8009870:	fb05 2000 	mla	r0, r5, r0, r2
 8009874:	2301      	movs	r3, #1
 8009876:	e7f0      	b.n	800985a <_vfiprintf_r+0x1b6>
 8009878:	ab03      	add	r3, sp, #12
 800987a:	9300      	str	r3, [sp, #0]
 800987c:	4622      	mov	r2, r4
 800987e:	4b13      	ldr	r3, [pc, #76]	; (80098cc <_vfiprintf_r+0x228>)
 8009880:	a904      	add	r1, sp, #16
 8009882:	4630      	mov	r0, r6
 8009884:	f3af 8000 	nop.w
 8009888:	f1b0 3fff 	cmp.w	r0, #4294967295
 800988c:	4681      	mov	r9, r0
 800988e:	d1d8      	bne.n	8009842 <_vfiprintf_r+0x19e>
 8009890:	89a3      	ldrh	r3, [r4, #12]
 8009892:	065b      	lsls	r3, r3, #25
 8009894:	f53f af7d 	bmi.w	8009792 <_vfiprintf_r+0xee>
 8009898:	9809      	ldr	r0, [sp, #36]	; 0x24
 800989a:	e77c      	b.n	8009796 <_vfiprintf_r+0xf2>
 800989c:	ab03      	add	r3, sp, #12
 800989e:	9300      	str	r3, [sp, #0]
 80098a0:	4622      	mov	r2, r4
 80098a2:	4b0a      	ldr	r3, [pc, #40]	; (80098cc <_vfiprintf_r+0x228>)
 80098a4:	a904      	add	r1, sp, #16
 80098a6:	4630      	mov	r0, r6
 80098a8:	f000 f888 	bl	80099bc <_printf_i>
 80098ac:	e7ec      	b.n	8009888 <_vfiprintf_r+0x1e4>
 80098ae:	bf00      	nop
 80098b0:	0800cfd4 	.word	0x0800cfd4
 80098b4:	0800d018 	.word	0x0800d018
 80098b8:	0800cff4 	.word	0x0800cff4
 80098bc:	0800cfb4 	.word	0x0800cfb4
 80098c0:	0800d01e 	.word	0x0800d01e
 80098c4:	0800d022 	.word	0x0800d022
 80098c8:	00000000 	.word	0x00000000
 80098cc:	08009681 	.word	0x08009681

080098d0 <_printf_common>:
 80098d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098d4:	4691      	mov	r9, r2
 80098d6:	461f      	mov	r7, r3
 80098d8:	688a      	ldr	r2, [r1, #8]
 80098da:	690b      	ldr	r3, [r1, #16]
 80098dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80098e0:	4293      	cmp	r3, r2
 80098e2:	bfb8      	it	lt
 80098e4:	4613      	movlt	r3, r2
 80098e6:	f8c9 3000 	str.w	r3, [r9]
 80098ea:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80098ee:	4606      	mov	r6, r0
 80098f0:	460c      	mov	r4, r1
 80098f2:	b112      	cbz	r2, 80098fa <_printf_common+0x2a>
 80098f4:	3301      	adds	r3, #1
 80098f6:	f8c9 3000 	str.w	r3, [r9]
 80098fa:	6823      	ldr	r3, [r4, #0]
 80098fc:	0699      	lsls	r1, r3, #26
 80098fe:	bf42      	ittt	mi
 8009900:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009904:	3302      	addmi	r3, #2
 8009906:	f8c9 3000 	strmi.w	r3, [r9]
 800990a:	6825      	ldr	r5, [r4, #0]
 800990c:	f015 0506 	ands.w	r5, r5, #6
 8009910:	d107      	bne.n	8009922 <_printf_common+0x52>
 8009912:	f104 0a19 	add.w	sl, r4, #25
 8009916:	68e3      	ldr	r3, [r4, #12]
 8009918:	f8d9 2000 	ldr.w	r2, [r9]
 800991c:	1a9b      	subs	r3, r3, r2
 800991e:	429d      	cmp	r5, r3
 8009920:	db29      	blt.n	8009976 <_printf_common+0xa6>
 8009922:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009926:	6822      	ldr	r2, [r4, #0]
 8009928:	3300      	adds	r3, #0
 800992a:	bf18      	it	ne
 800992c:	2301      	movne	r3, #1
 800992e:	0692      	lsls	r2, r2, #26
 8009930:	d42e      	bmi.n	8009990 <_printf_common+0xc0>
 8009932:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009936:	4639      	mov	r1, r7
 8009938:	4630      	mov	r0, r6
 800993a:	47c0      	blx	r8
 800993c:	3001      	adds	r0, #1
 800993e:	d021      	beq.n	8009984 <_printf_common+0xb4>
 8009940:	6823      	ldr	r3, [r4, #0]
 8009942:	68e5      	ldr	r5, [r4, #12]
 8009944:	f8d9 2000 	ldr.w	r2, [r9]
 8009948:	f003 0306 	and.w	r3, r3, #6
 800994c:	2b04      	cmp	r3, #4
 800994e:	bf08      	it	eq
 8009950:	1aad      	subeq	r5, r5, r2
 8009952:	68a3      	ldr	r3, [r4, #8]
 8009954:	6922      	ldr	r2, [r4, #16]
 8009956:	bf0c      	ite	eq
 8009958:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800995c:	2500      	movne	r5, #0
 800995e:	4293      	cmp	r3, r2
 8009960:	bfc4      	itt	gt
 8009962:	1a9b      	subgt	r3, r3, r2
 8009964:	18ed      	addgt	r5, r5, r3
 8009966:	f04f 0900 	mov.w	r9, #0
 800996a:	341a      	adds	r4, #26
 800996c:	454d      	cmp	r5, r9
 800996e:	d11b      	bne.n	80099a8 <_printf_common+0xd8>
 8009970:	2000      	movs	r0, #0
 8009972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009976:	2301      	movs	r3, #1
 8009978:	4652      	mov	r2, sl
 800997a:	4639      	mov	r1, r7
 800997c:	4630      	mov	r0, r6
 800997e:	47c0      	blx	r8
 8009980:	3001      	adds	r0, #1
 8009982:	d103      	bne.n	800998c <_printf_common+0xbc>
 8009984:	f04f 30ff 	mov.w	r0, #4294967295
 8009988:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800998c:	3501      	adds	r5, #1
 800998e:	e7c2      	b.n	8009916 <_printf_common+0x46>
 8009990:	18e1      	adds	r1, r4, r3
 8009992:	1c5a      	adds	r2, r3, #1
 8009994:	2030      	movs	r0, #48	; 0x30
 8009996:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800999a:	4422      	add	r2, r4
 800999c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80099a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80099a4:	3302      	adds	r3, #2
 80099a6:	e7c4      	b.n	8009932 <_printf_common+0x62>
 80099a8:	2301      	movs	r3, #1
 80099aa:	4622      	mov	r2, r4
 80099ac:	4639      	mov	r1, r7
 80099ae:	4630      	mov	r0, r6
 80099b0:	47c0      	blx	r8
 80099b2:	3001      	adds	r0, #1
 80099b4:	d0e6      	beq.n	8009984 <_printf_common+0xb4>
 80099b6:	f109 0901 	add.w	r9, r9, #1
 80099ba:	e7d7      	b.n	800996c <_printf_common+0x9c>

080099bc <_printf_i>:
 80099bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80099c0:	4617      	mov	r7, r2
 80099c2:	7e0a      	ldrb	r2, [r1, #24]
 80099c4:	b085      	sub	sp, #20
 80099c6:	2a6e      	cmp	r2, #110	; 0x6e
 80099c8:	4698      	mov	r8, r3
 80099ca:	4606      	mov	r6, r0
 80099cc:	460c      	mov	r4, r1
 80099ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80099d0:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80099d4:	f000 80bc 	beq.w	8009b50 <_printf_i+0x194>
 80099d8:	d81a      	bhi.n	8009a10 <_printf_i+0x54>
 80099da:	2a63      	cmp	r2, #99	; 0x63
 80099dc:	d02e      	beq.n	8009a3c <_printf_i+0x80>
 80099de:	d80a      	bhi.n	80099f6 <_printf_i+0x3a>
 80099e0:	2a00      	cmp	r2, #0
 80099e2:	f000 80c8 	beq.w	8009b76 <_printf_i+0x1ba>
 80099e6:	2a58      	cmp	r2, #88	; 0x58
 80099e8:	f000 808a 	beq.w	8009b00 <_printf_i+0x144>
 80099ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80099f0:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80099f4:	e02a      	b.n	8009a4c <_printf_i+0x90>
 80099f6:	2a64      	cmp	r2, #100	; 0x64
 80099f8:	d001      	beq.n	80099fe <_printf_i+0x42>
 80099fa:	2a69      	cmp	r2, #105	; 0x69
 80099fc:	d1f6      	bne.n	80099ec <_printf_i+0x30>
 80099fe:	6821      	ldr	r1, [r4, #0]
 8009a00:	681a      	ldr	r2, [r3, #0]
 8009a02:	f011 0f80 	tst.w	r1, #128	; 0x80
 8009a06:	d023      	beq.n	8009a50 <_printf_i+0x94>
 8009a08:	1d11      	adds	r1, r2, #4
 8009a0a:	6019      	str	r1, [r3, #0]
 8009a0c:	6813      	ldr	r3, [r2, #0]
 8009a0e:	e027      	b.n	8009a60 <_printf_i+0xa4>
 8009a10:	2a73      	cmp	r2, #115	; 0x73
 8009a12:	f000 80b4 	beq.w	8009b7e <_printf_i+0x1c2>
 8009a16:	d808      	bhi.n	8009a2a <_printf_i+0x6e>
 8009a18:	2a6f      	cmp	r2, #111	; 0x6f
 8009a1a:	d02a      	beq.n	8009a72 <_printf_i+0xb6>
 8009a1c:	2a70      	cmp	r2, #112	; 0x70
 8009a1e:	d1e5      	bne.n	80099ec <_printf_i+0x30>
 8009a20:	680a      	ldr	r2, [r1, #0]
 8009a22:	f042 0220 	orr.w	r2, r2, #32
 8009a26:	600a      	str	r2, [r1, #0]
 8009a28:	e003      	b.n	8009a32 <_printf_i+0x76>
 8009a2a:	2a75      	cmp	r2, #117	; 0x75
 8009a2c:	d021      	beq.n	8009a72 <_printf_i+0xb6>
 8009a2e:	2a78      	cmp	r2, #120	; 0x78
 8009a30:	d1dc      	bne.n	80099ec <_printf_i+0x30>
 8009a32:	2278      	movs	r2, #120	; 0x78
 8009a34:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8009a38:	496e      	ldr	r1, [pc, #440]	; (8009bf4 <_printf_i+0x238>)
 8009a3a:	e064      	b.n	8009b06 <_printf_i+0x14a>
 8009a3c:	681a      	ldr	r2, [r3, #0]
 8009a3e:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8009a42:	1d11      	adds	r1, r2, #4
 8009a44:	6019      	str	r1, [r3, #0]
 8009a46:	6813      	ldr	r3, [r2, #0]
 8009a48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009a4c:	2301      	movs	r3, #1
 8009a4e:	e0a3      	b.n	8009b98 <_printf_i+0x1dc>
 8009a50:	f011 0f40 	tst.w	r1, #64	; 0x40
 8009a54:	f102 0104 	add.w	r1, r2, #4
 8009a58:	6019      	str	r1, [r3, #0]
 8009a5a:	d0d7      	beq.n	8009a0c <_printf_i+0x50>
 8009a5c:	f9b2 3000 	ldrsh.w	r3, [r2]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	da03      	bge.n	8009a6c <_printf_i+0xb0>
 8009a64:	222d      	movs	r2, #45	; 0x2d
 8009a66:	425b      	negs	r3, r3
 8009a68:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009a6c:	4962      	ldr	r1, [pc, #392]	; (8009bf8 <_printf_i+0x23c>)
 8009a6e:	220a      	movs	r2, #10
 8009a70:	e017      	b.n	8009aa2 <_printf_i+0xe6>
 8009a72:	6820      	ldr	r0, [r4, #0]
 8009a74:	6819      	ldr	r1, [r3, #0]
 8009a76:	f010 0f80 	tst.w	r0, #128	; 0x80
 8009a7a:	d003      	beq.n	8009a84 <_printf_i+0xc8>
 8009a7c:	1d08      	adds	r0, r1, #4
 8009a7e:	6018      	str	r0, [r3, #0]
 8009a80:	680b      	ldr	r3, [r1, #0]
 8009a82:	e006      	b.n	8009a92 <_printf_i+0xd6>
 8009a84:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009a88:	f101 0004 	add.w	r0, r1, #4
 8009a8c:	6018      	str	r0, [r3, #0]
 8009a8e:	d0f7      	beq.n	8009a80 <_printf_i+0xc4>
 8009a90:	880b      	ldrh	r3, [r1, #0]
 8009a92:	4959      	ldr	r1, [pc, #356]	; (8009bf8 <_printf_i+0x23c>)
 8009a94:	2a6f      	cmp	r2, #111	; 0x6f
 8009a96:	bf14      	ite	ne
 8009a98:	220a      	movne	r2, #10
 8009a9a:	2208      	moveq	r2, #8
 8009a9c:	2000      	movs	r0, #0
 8009a9e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8009aa2:	6865      	ldr	r5, [r4, #4]
 8009aa4:	60a5      	str	r5, [r4, #8]
 8009aa6:	2d00      	cmp	r5, #0
 8009aa8:	f2c0 809c 	blt.w	8009be4 <_printf_i+0x228>
 8009aac:	6820      	ldr	r0, [r4, #0]
 8009aae:	f020 0004 	bic.w	r0, r0, #4
 8009ab2:	6020      	str	r0, [r4, #0]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d13f      	bne.n	8009b38 <_printf_i+0x17c>
 8009ab8:	2d00      	cmp	r5, #0
 8009aba:	f040 8095 	bne.w	8009be8 <_printf_i+0x22c>
 8009abe:	4675      	mov	r5, lr
 8009ac0:	2a08      	cmp	r2, #8
 8009ac2:	d10b      	bne.n	8009adc <_printf_i+0x120>
 8009ac4:	6823      	ldr	r3, [r4, #0]
 8009ac6:	07da      	lsls	r2, r3, #31
 8009ac8:	d508      	bpl.n	8009adc <_printf_i+0x120>
 8009aca:	6923      	ldr	r3, [r4, #16]
 8009acc:	6862      	ldr	r2, [r4, #4]
 8009ace:	429a      	cmp	r2, r3
 8009ad0:	bfde      	ittt	le
 8009ad2:	2330      	movle	r3, #48	; 0x30
 8009ad4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009ad8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009adc:	ebae 0305 	sub.w	r3, lr, r5
 8009ae0:	6123      	str	r3, [r4, #16]
 8009ae2:	f8cd 8000 	str.w	r8, [sp]
 8009ae6:	463b      	mov	r3, r7
 8009ae8:	aa03      	add	r2, sp, #12
 8009aea:	4621      	mov	r1, r4
 8009aec:	4630      	mov	r0, r6
 8009aee:	f7ff feef 	bl	80098d0 <_printf_common>
 8009af2:	3001      	adds	r0, #1
 8009af4:	d155      	bne.n	8009ba2 <_printf_i+0x1e6>
 8009af6:	f04f 30ff 	mov.w	r0, #4294967295
 8009afa:	b005      	add	sp, #20
 8009afc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009b00:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8009b04:	493c      	ldr	r1, [pc, #240]	; (8009bf8 <_printf_i+0x23c>)
 8009b06:	6822      	ldr	r2, [r4, #0]
 8009b08:	6818      	ldr	r0, [r3, #0]
 8009b0a:	f012 0f80 	tst.w	r2, #128	; 0x80
 8009b0e:	f100 0504 	add.w	r5, r0, #4
 8009b12:	601d      	str	r5, [r3, #0]
 8009b14:	d001      	beq.n	8009b1a <_printf_i+0x15e>
 8009b16:	6803      	ldr	r3, [r0, #0]
 8009b18:	e002      	b.n	8009b20 <_printf_i+0x164>
 8009b1a:	0655      	lsls	r5, r2, #25
 8009b1c:	d5fb      	bpl.n	8009b16 <_printf_i+0x15a>
 8009b1e:	8803      	ldrh	r3, [r0, #0]
 8009b20:	07d0      	lsls	r0, r2, #31
 8009b22:	bf44      	itt	mi
 8009b24:	f042 0220 	orrmi.w	r2, r2, #32
 8009b28:	6022      	strmi	r2, [r4, #0]
 8009b2a:	b91b      	cbnz	r3, 8009b34 <_printf_i+0x178>
 8009b2c:	6822      	ldr	r2, [r4, #0]
 8009b2e:	f022 0220 	bic.w	r2, r2, #32
 8009b32:	6022      	str	r2, [r4, #0]
 8009b34:	2210      	movs	r2, #16
 8009b36:	e7b1      	b.n	8009a9c <_printf_i+0xe0>
 8009b38:	4675      	mov	r5, lr
 8009b3a:	fbb3 f0f2 	udiv	r0, r3, r2
 8009b3e:	fb02 3310 	mls	r3, r2, r0, r3
 8009b42:	5ccb      	ldrb	r3, [r1, r3]
 8009b44:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009b48:	4603      	mov	r3, r0
 8009b4a:	2800      	cmp	r0, #0
 8009b4c:	d1f5      	bne.n	8009b3a <_printf_i+0x17e>
 8009b4e:	e7b7      	b.n	8009ac0 <_printf_i+0x104>
 8009b50:	6808      	ldr	r0, [r1, #0]
 8009b52:	681a      	ldr	r2, [r3, #0]
 8009b54:	6949      	ldr	r1, [r1, #20]
 8009b56:	f010 0f80 	tst.w	r0, #128	; 0x80
 8009b5a:	d004      	beq.n	8009b66 <_printf_i+0x1aa>
 8009b5c:	1d10      	adds	r0, r2, #4
 8009b5e:	6018      	str	r0, [r3, #0]
 8009b60:	6813      	ldr	r3, [r2, #0]
 8009b62:	6019      	str	r1, [r3, #0]
 8009b64:	e007      	b.n	8009b76 <_printf_i+0x1ba>
 8009b66:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009b6a:	f102 0004 	add.w	r0, r2, #4
 8009b6e:	6018      	str	r0, [r3, #0]
 8009b70:	6813      	ldr	r3, [r2, #0]
 8009b72:	d0f6      	beq.n	8009b62 <_printf_i+0x1a6>
 8009b74:	8019      	strh	r1, [r3, #0]
 8009b76:	2300      	movs	r3, #0
 8009b78:	6123      	str	r3, [r4, #16]
 8009b7a:	4675      	mov	r5, lr
 8009b7c:	e7b1      	b.n	8009ae2 <_printf_i+0x126>
 8009b7e:	681a      	ldr	r2, [r3, #0]
 8009b80:	1d11      	adds	r1, r2, #4
 8009b82:	6019      	str	r1, [r3, #0]
 8009b84:	6815      	ldr	r5, [r2, #0]
 8009b86:	6862      	ldr	r2, [r4, #4]
 8009b88:	2100      	movs	r1, #0
 8009b8a:	4628      	mov	r0, r5
 8009b8c:	f7f6 fb70 	bl	8000270 <memchr>
 8009b90:	b108      	cbz	r0, 8009b96 <_printf_i+0x1da>
 8009b92:	1b40      	subs	r0, r0, r5
 8009b94:	6060      	str	r0, [r4, #4]
 8009b96:	6863      	ldr	r3, [r4, #4]
 8009b98:	6123      	str	r3, [r4, #16]
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ba0:	e79f      	b.n	8009ae2 <_printf_i+0x126>
 8009ba2:	6923      	ldr	r3, [r4, #16]
 8009ba4:	462a      	mov	r2, r5
 8009ba6:	4639      	mov	r1, r7
 8009ba8:	4630      	mov	r0, r6
 8009baa:	47c0      	blx	r8
 8009bac:	3001      	adds	r0, #1
 8009bae:	d0a2      	beq.n	8009af6 <_printf_i+0x13a>
 8009bb0:	6823      	ldr	r3, [r4, #0]
 8009bb2:	079b      	lsls	r3, r3, #30
 8009bb4:	d507      	bpl.n	8009bc6 <_printf_i+0x20a>
 8009bb6:	2500      	movs	r5, #0
 8009bb8:	f104 0919 	add.w	r9, r4, #25
 8009bbc:	68e3      	ldr	r3, [r4, #12]
 8009bbe:	9a03      	ldr	r2, [sp, #12]
 8009bc0:	1a9b      	subs	r3, r3, r2
 8009bc2:	429d      	cmp	r5, r3
 8009bc4:	db05      	blt.n	8009bd2 <_printf_i+0x216>
 8009bc6:	68e0      	ldr	r0, [r4, #12]
 8009bc8:	9b03      	ldr	r3, [sp, #12]
 8009bca:	4298      	cmp	r0, r3
 8009bcc:	bfb8      	it	lt
 8009bce:	4618      	movlt	r0, r3
 8009bd0:	e793      	b.n	8009afa <_printf_i+0x13e>
 8009bd2:	2301      	movs	r3, #1
 8009bd4:	464a      	mov	r2, r9
 8009bd6:	4639      	mov	r1, r7
 8009bd8:	4630      	mov	r0, r6
 8009bda:	47c0      	blx	r8
 8009bdc:	3001      	adds	r0, #1
 8009bde:	d08a      	beq.n	8009af6 <_printf_i+0x13a>
 8009be0:	3501      	adds	r5, #1
 8009be2:	e7eb      	b.n	8009bbc <_printf_i+0x200>
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d1a7      	bne.n	8009b38 <_printf_i+0x17c>
 8009be8:	780b      	ldrb	r3, [r1, #0]
 8009bea:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009bee:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009bf2:	e765      	b.n	8009ac0 <_printf_i+0x104>
 8009bf4:	0800d03a 	.word	0x0800d03a
 8009bf8:	0800d029 	.word	0x0800d029

08009bfc <_sbrk_r>:
 8009bfc:	b538      	push	{r3, r4, r5, lr}
 8009bfe:	4c06      	ldr	r4, [pc, #24]	; (8009c18 <_sbrk_r+0x1c>)
 8009c00:	2300      	movs	r3, #0
 8009c02:	4605      	mov	r5, r0
 8009c04:	4608      	mov	r0, r1
 8009c06:	6023      	str	r3, [r4, #0]
 8009c08:	f7ff fa8e 	bl	8009128 <_sbrk>
 8009c0c:	1c43      	adds	r3, r0, #1
 8009c0e:	d102      	bne.n	8009c16 <_sbrk_r+0x1a>
 8009c10:	6823      	ldr	r3, [r4, #0]
 8009c12:	b103      	cbz	r3, 8009c16 <_sbrk_r+0x1a>
 8009c14:	602b      	str	r3, [r5, #0]
 8009c16:	bd38      	pop	{r3, r4, r5, pc}
 8009c18:	20003cc4 	.word	0x20003cc4

08009c1c <__sread>:
 8009c1c:	b510      	push	{r4, lr}
 8009c1e:	460c      	mov	r4, r1
 8009c20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c24:	f000 fa4a 	bl	800a0bc <_read_r>
 8009c28:	2800      	cmp	r0, #0
 8009c2a:	bfab      	itete	ge
 8009c2c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009c2e:	89a3      	ldrhlt	r3, [r4, #12]
 8009c30:	181b      	addge	r3, r3, r0
 8009c32:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009c36:	bfac      	ite	ge
 8009c38:	6563      	strge	r3, [r4, #84]	; 0x54
 8009c3a:	81a3      	strhlt	r3, [r4, #12]
 8009c3c:	bd10      	pop	{r4, pc}

08009c3e <__swrite>:
 8009c3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c42:	461f      	mov	r7, r3
 8009c44:	898b      	ldrh	r3, [r1, #12]
 8009c46:	05db      	lsls	r3, r3, #23
 8009c48:	4605      	mov	r5, r0
 8009c4a:	460c      	mov	r4, r1
 8009c4c:	4616      	mov	r6, r2
 8009c4e:	d505      	bpl.n	8009c5c <__swrite+0x1e>
 8009c50:	2302      	movs	r3, #2
 8009c52:	2200      	movs	r2, #0
 8009c54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c58:	f000 f9b8 	bl	8009fcc <_lseek_r>
 8009c5c:	89a3      	ldrh	r3, [r4, #12]
 8009c5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009c62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009c66:	81a3      	strh	r3, [r4, #12]
 8009c68:	4632      	mov	r2, r6
 8009c6a:	463b      	mov	r3, r7
 8009c6c:	4628      	mov	r0, r5
 8009c6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009c72:	f000 b869 	b.w	8009d48 <_write_r>

08009c76 <__sseek>:
 8009c76:	b510      	push	{r4, lr}
 8009c78:	460c      	mov	r4, r1
 8009c7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c7e:	f000 f9a5 	bl	8009fcc <_lseek_r>
 8009c82:	1c43      	adds	r3, r0, #1
 8009c84:	89a3      	ldrh	r3, [r4, #12]
 8009c86:	bf15      	itete	ne
 8009c88:	6560      	strne	r0, [r4, #84]	; 0x54
 8009c8a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009c8e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009c92:	81a3      	strheq	r3, [r4, #12]
 8009c94:	bf18      	it	ne
 8009c96:	81a3      	strhne	r3, [r4, #12]
 8009c98:	bd10      	pop	{r4, pc}

08009c9a <__sclose>:
 8009c9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c9e:	f000 b8d3 	b.w	8009e48 <_close_r>
	...

08009ca4 <__swbuf_r>:
 8009ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ca6:	460e      	mov	r6, r1
 8009ca8:	4614      	mov	r4, r2
 8009caa:	4605      	mov	r5, r0
 8009cac:	b118      	cbz	r0, 8009cb6 <__swbuf_r+0x12>
 8009cae:	6983      	ldr	r3, [r0, #24]
 8009cb0:	b90b      	cbnz	r3, 8009cb6 <__swbuf_r+0x12>
 8009cb2:	f7ff fb8f 	bl	80093d4 <__sinit>
 8009cb6:	4b21      	ldr	r3, [pc, #132]	; (8009d3c <__swbuf_r+0x98>)
 8009cb8:	429c      	cmp	r4, r3
 8009cba:	d12a      	bne.n	8009d12 <__swbuf_r+0x6e>
 8009cbc:	686c      	ldr	r4, [r5, #4]
 8009cbe:	69a3      	ldr	r3, [r4, #24]
 8009cc0:	60a3      	str	r3, [r4, #8]
 8009cc2:	89a3      	ldrh	r3, [r4, #12]
 8009cc4:	071a      	lsls	r2, r3, #28
 8009cc6:	d52e      	bpl.n	8009d26 <__swbuf_r+0x82>
 8009cc8:	6923      	ldr	r3, [r4, #16]
 8009cca:	b363      	cbz	r3, 8009d26 <__swbuf_r+0x82>
 8009ccc:	6923      	ldr	r3, [r4, #16]
 8009cce:	6820      	ldr	r0, [r4, #0]
 8009cd0:	1ac0      	subs	r0, r0, r3
 8009cd2:	6963      	ldr	r3, [r4, #20]
 8009cd4:	b2f6      	uxtb	r6, r6
 8009cd6:	4298      	cmp	r0, r3
 8009cd8:	4637      	mov	r7, r6
 8009cda:	db04      	blt.n	8009ce6 <__swbuf_r+0x42>
 8009cdc:	4621      	mov	r1, r4
 8009cde:	4628      	mov	r0, r5
 8009ce0:	f000 f94a 	bl	8009f78 <_fflush_r>
 8009ce4:	bb28      	cbnz	r0, 8009d32 <__swbuf_r+0x8e>
 8009ce6:	68a3      	ldr	r3, [r4, #8]
 8009ce8:	3b01      	subs	r3, #1
 8009cea:	60a3      	str	r3, [r4, #8]
 8009cec:	6823      	ldr	r3, [r4, #0]
 8009cee:	1c5a      	adds	r2, r3, #1
 8009cf0:	6022      	str	r2, [r4, #0]
 8009cf2:	701e      	strb	r6, [r3, #0]
 8009cf4:	6963      	ldr	r3, [r4, #20]
 8009cf6:	3001      	adds	r0, #1
 8009cf8:	4298      	cmp	r0, r3
 8009cfa:	d004      	beq.n	8009d06 <__swbuf_r+0x62>
 8009cfc:	89a3      	ldrh	r3, [r4, #12]
 8009cfe:	07db      	lsls	r3, r3, #31
 8009d00:	d519      	bpl.n	8009d36 <__swbuf_r+0x92>
 8009d02:	2e0a      	cmp	r6, #10
 8009d04:	d117      	bne.n	8009d36 <__swbuf_r+0x92>
 8009d06:	4621      	mov	r1, r4
 8009d08:	4628      	mov	r0, r5
 8009d0a:	f000 f935 	bl	8009f78 <_fflush_r>
 8009d0e:	b190      	cbz	r0, 8009d36 <__swbuf_r+0x92>
 8009d10:	e00f      	b.n	8009d32 <__swbuf_r+0x8e>
 8009d12:	4b0b      	ldr	r3, [pc, #44]	; (8009d40 <__swbuf_r+0x9c>)
 8009d14:	429c      	cmp	r4, r3
 8009d16:	d101      	bne.n	8009d1c <__swbuf_r+0x78>
 8009d18:	68ac      	ldr	r4, [r5, #8]
 8009d1a:	e7d0      	b.n	8009cbe <__swbuf_r+0x1a>
 8009d1c:	4b09      	ldr	r3, [pc, #36]	; (8009d44 <__swbuf_r+0xa0>)
 8009d1e:	429c      	cmp	r4, r3
 8009d20:	bf08      	it	eq
 8009d22:	68ec      	ldreq	r4, [r5, #12]
 8009d24:	e7cb      	b.n	8009cbe <__swbuf_r+0x1a>
 8009d26:	4621      	mov	r1, r4
 8009d28:	4628      	mov	r0, r5
 8009d2a:	f000 f81f 	bl	8009d6c <__swsetup_r>
 8009d2e:	2800      	cmp	r0, #0
 8009d30:	d0cc      	beq.n	8009ccc <__swbuf_r+0x28>
 8009d32:	f04f 37ff 	mov.w	r7, #4294967295
 8009d36:	4638      	mov	r0, r7
 8009d38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d3a:	bf00      	nop
 8009d3c:	0800cfd4 	.word	0x0800cfd4
 8009d40:	0800cff4 	.word	0x0800cff4
 8009d44:	0800cfb4 	.word	0x0800cfb4

08009d48 <_write_r>:
 8009d48:	b538      	push	{r3, r4, r5, lr}
 8009d4a:	4c07      	ldr	r4, [pc, #28]	; (8009d68 <_write_r+0x20>)
 8009d4c:	4605      	mov	r5, r0
 8009d4e:	4608      	mov	r0, r1
 8009d50:	4611      	mov	r1, r2
 8009d52:	2200      	movs	r2, #0
 8009d54:	6022      	str	r2, [r4, #0]
 8009d56:	461a      	mov	r2, r3
 8009d58:	f7ff f9d8 	bl	800910c <_write>
 8009d5c:	1c43      	adds	r3, r0, #1
 8009d5e:	d102      	bne.n	8009d66 <_write_r+0x1e>
 8009d60:	6823      	ldr	r3, [r4, #0]
 8009d62:	b103      	cbz	r3, 8009d66 <_write_r+0x1e>
 8009d64:	602b      	str	r3, [r5, #0]
 8009d66:	bd38      	pop	{r3, r4, r5, pc}
 8009d68:	20003cc4 	.word	0x20003cc4

08009d6c <__swsetup_r>:
 8009d6c:	4b32      	ldr	r3, [pc, #200]	; (8009e38 <__swsetup_r+0xcc>)
 8009d6e:	b570      	push	{r4, r5, r6, lr}
 8009d70:	681d      	ldr	r5, [r3, #0]
 8009d72:	4606      	mov	r6, r0
 8009d74:	460c      	mov	r4, r1
 8009d76:	b125      	cbz	r5, 8009d82 <__swsetup_r+0x16>
 8009d78:	69ab      	ldr	r3, [r5, #24]
 8009d7a:	b913      	cbnz	r3, 8009d82 <__swsetup_r+0x16>
 8009d7c:	4628      	mov	r0, r5
 8009d7e:	f7ff fb29 	bl	80093d4 <__sinit>
 8009d82:	4b2e      	ldr	r3, [pc, #184]	; (8009e3c <__swsetup_r+0xd0>)
 8009d84:	429c      	cmp	r4, r3
 8009d86:	d10f      	bne.n	8009da8 <__swsetup_r+0x3c>
 8009d88:	686c      	ldr	r4, [r5, #4]
 8009d8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d8e:	b29a      	uxth	r2, r3
 8009d90:	0715      	lsls	r5, r2, #28
 8009d92:	d42c      	bmi.n	8009dee <__swsetup_r+0x82>
 8009d94:	06d0      	lsls	r0, r2, #27
 8009d96:	d411      	bmi.n	8009dbc <__swsetup_r+0x50>
 8009d98:	2209      	movs	r2, #9
 8009d9a:	6032      	str	r2, [r6, #0]
 8009d9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009da0:	81a3      	strh	r3, [r4, #12]
 8009da2:	f04f 30ff 	mov.w	r0, #4294967295
 8009da6:	bd70      	pop	{r4, r5, r6, pc}
 8009da8:	4b25      	ldr	r3, [pc, #148]	; (8009e40 <__swsetup_r+0xd4>)
 8009daa:	429c      	cmp	r4, r3
 8009dac:	d101      	bne.n	8009db2 <__swsetup_r+0x46>
 8009dae:	68ac      	ldr	r4, [r5, #8]
 8009db0:	e7eb      	b.n	8009d8a <__swsetup_r+0x1e>
 8009db2:	4b24      	ldr	r3, [pc, #144]	; (8009e44 <__swsetup_r+0xd8>)
 8009db4:	429c      	cmp	r4, r3
 8009db6:	bf08      	it	eq
 8009db8:	68ec      	ldreq	r4, [r5, #12]
 8009dba:	e7e6      	b.n	8009d8a <__swsetup_r+0x1e>
 8009dbc:	0751      	lsls	r1, r2, #29
 8009dbe:	d512      	bpl.n	8009de6 <__swsetup_r+0x7a>
 8009dc0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009dc2:	b141      	cbz	r1, 8009dd6 <__swsetup_r+0x6a>
 8009dc4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009dc8:	4299      	cmp	r1, r3
 8009dca:	d002      	beq.n	8009dd2 <__swsetup_r+0x66>
 8009dcc:	4630      	mov	r0, r6
 8009dce:	f7ff fb93 	bl	80094f8 <_free_r>
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	6363      	str	r3, [r4, #52]	; 0x34
 8009dd6:	89a3      	ldrh	r3, [r4, #12]
 8009dd8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009ddc:	81a3      	strh	r3, [r4, #12]
 8009dde:	2300      	movs	r3, #0
 8009de0:	6063      	str	r3, [r4, #4]
 8009de2:	6923      	ldr	r3, [r4, #16]
 8009de4:	6023      	str	r3, [r4, #0]
 8009de6:	89a3      	ldrh	r3, [r4, #12]
 8009de8:	f043 0308 	orr.w	r3, r3, #8
 8009dec:	81a3      	strh	r3, [r4, #12]
 8009dee:	6923      	ldr	r3, [r4, #16]
 8009df0:	b94b      	cbnz	r3, 8009e06 <__swsetup_r+0x9a>
 8009df2:	89a3      	ldrh	r3, [r4, #12]
 8009df4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009df8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009dfc:	d003      	beq.n	8009e06 <__swsetup_r+0x9a>
 8009dfe:	4621      	mov	r1, r4
 8009e00:	4630      	mov	r0, r6
 8009e02:	f000 f919 	bl	800a038 <__smakebuf_r>
 8009e06:	89a2      	ldrh	r2, [r4, #12]
 8009e08:	f012 0301 	ands.w	r3, r2, #1
 8009e0c:	d00c      	beq.n	8009e28 <__swsetup_r+0xbc>
 8009e0e:	2300      	movs	r3, #0
 8009e10:	60a3      	str	r3, [r4, #8]
 8009e12:	6963      	ldr	r3, [r4, #20]
 8009e14:	425b      	negs	r3, r3
 8009e16:	61a3      	str	r3, [r4, #24]
 8009e18:	6923      	ldr	r3, [r4, #16]
 8009e1a:	b953      	cbnz	r3, 8009e32 <__swsetup_r+0xc6>
 8009e1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e20:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8009e24:	d1ba      	bne.n	8009d9c <__swsetup_r+0x30>
 8009e26:	bd70      	pop	{r4, r5, r6, pc}
 8009e28:	0792      	lsls	r2, r2, #30
 8009e2a:	bf58      	it	pl
 8009e2c:	6963      	ldrpl	r3, [r4, #20]
 8009e2e:	60a3      	str	r3, [r4, #8]
 8009e30:	e7f2      	b.n	8009e18 <__swsetup_r+0xac>
 8009e32:	2000      	movs	r0, #0
 8009e34:	e7f7      	b.n	8009e26 <__swsetup_r+0xba>
 8009e36:	bf00      	nop
 8009e38:	20000014 	.word	0x20000014
 8009e3c:	0800cfd4 	.word	0x0800cfd4
 8009e40:	0800cff4 	.word	0x0800cff4
 8009e44:	0800cfb4 	.word	0x0800cfb4

08009e48 <_close_r>:
 8009e48:	b538      	push	{r3, r4, r5, lr}
 8009e4a:	4c06      	ldr	r4, [pc, #24]	; (8009e64 <_close_r+0x1c>)
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	4605      	mov	r5, r0
 8009e50:	4608      	mov	r0, r1
 8009e52:	6023      	str	r3, [r4, #0]
 8009e54:	f7ff f982 	bl	800915c <_close>
 8009e58:	1c43      	adds	r3, r0, #1
 8009e5a:	d102      	bne.n	8009e62 <_close_r+0x1a>
 8009e5c:	6823      	ldr	r3, [r4, #0]
 8009e5e:	b103      	cbz	r3, 8009e62 <_close_r+0x1a>
 8009e60:	602b      	str	r3, [r5, #0]
 8009e62:	bd38      	pop	{r3, r4, r5, pc}
 8009e64:	20003cc4 	.word	0x20003cc4

08009e68 <__sflush_r>:
 8009e68:	898a      	ldrh	r2, [r1, #12]
 8009e6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e6e:	4605      	mov	r5, r0
 8009e70:	0710      	lsls	r0, r2, #28
 8009e72:	460c      	mov	r4, r1
 8009e74:	d45a      	bmi.n	8009f2c <__sflush_r+0xc4>
 8009e76:	684b      	ldr	r3, [r1, #4]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	dc05      	bgt.n	8009e88 <__sflush_r+0x20>
 8009e7c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	dc02      	bgt.n	8009e88 <__sflush_r+0x20>
 8009e82:	2000      	movs	r0, #0
 8009e84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009e8a:	2e00      	cmp	r6, #0
 8009e8c:	d0f9      	beq.n	8009e82 <__sflush_r+0x1a>
 8009e8e:	2300      	movs	r3, #0
 8009e90:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009e94:	682f      	ldr	r7, [r5, #0]
 8009e96:	602b      	str	r3, [r5, #0]
 8009e98:	d033      	beq.n	8009f02 <__sflush_r+0x9a>
 8009e9a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009e9c:	89a3      	ldrh	r3, [r4, #12]
 8009e9e:	075a      	lsls	r2, r3, #29
 8009ea0:	d505      	bpl.n	8009eae <__sflush_r+0x46>
 8009ea2:	6863      	ldr	r3, [r4, #4]
 8009ea4:	1ac0      	subs	r0, r0, r3
 8009ea6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009ea8:	b10b      	cbz	r3, 8009eae <__sflush_r+0x46>
 8009eaa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009eac:	1ac0      	subs	r0, r0, r3
 8009eae:	2300      	movs	r3, #0
 8009eb0:	4602      	mov	r2, r0
 8009eb2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009eb4:	6a21      	ldr	r1, [r4, #32]
 8009eb6:	4628      	mov	r0, r5
 8009eb8:	47b0      	blx	r6
 8009eba:	1c43      	adds	r3, r0, #1
 8009ebc:	89a3      	ldrh	r3, [r4, #12]
 8009ebe:	d106      	bne.n	8009ece <__sflush_r+0x66>
 8009ec0:	6829      	ldr	r1, [r5, #0]
 8009ec2:	291d      	cmp	r1, #29
 8009ec4:	d84b      	bhi.n	8009f5e <__sflush_r+0xf6>
 8009ec6:	4a2b      	ldr	r2, [pc, #172]	; (8009f74 <__sflush_r+0x10c>)
 8009ec8:	40ca      	lsrs	r2, r1
 8009eca:	07d6      	lsls	r6, r2, #31
 8009ecc:	d547      	bpl.n	8009f5e <__sflush_r+0xf6>
 8009ece:	2200      	movs	r2, #0
 8009ed0:	6062      	str	r2, [r4, #4]
 8009ed2:	04d9      	lsls	r1, r3, #19
 8009ed4:	6922      	ldr	r2, [r4, #16]
 8009ed6:	6022      	str	r2, [r4, #0]
 8009ed8:	d504      	bpl.n	8009ee4 <__sflush_r+0x7c>
 8009eda:	1c42      	adds	r2, r0, #1
 8009edc:	d101      	bne.n	8009ee2 <__sflush_r+0x7a>
 8009ede:	682b      	ldr	r3, [r5, #0]
 8009ee0:	b903      	cbnz	r3, 8009ee4 <__sflush_r+0x7c>
 8009ee2:	6560      	str	r0, [r4, #84]	; 0x54
 8009ee4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009ee6:	602f      	str	r7, [r5, #0]
 8009ee8:	2900      	cmp	r1, #0
 8009eea:	d0ca      	beq.n	8009e82 <__sflush_r+0x1a>
 8009eec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009ef0:	4299      	cmp	r1, r3
 8009ef2:	d002      	beq.n	8009efa <__sflush_r+0x92>
 8009ef4:	4628      	mov	r0, r5
 8009ef6:	f7ff faff 	bl	80094f8 <_free_r>
 8009efa:	2000      	movs	r0, #0
 8009efc:	6360      	str	r0, [r4, #52]	; 0x34
 8009efe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f02:	6a21      	ldr	r1, [r4, #32]
 8009f04:	2301      	movs	r3, #1
 8009f06:	4628      	mov	r0, r5
 8009f08:	47b0      	blx	r6
 8009f0a:	1c41      	adds	r1, r0, #1
 8009f0c:	d1c6      	bne.n	8009e9c <__sflush_r+0x34>
 8009f0e:	682b      	ldr	r3, [r5, #0]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d0c3      	beq.n	8009e9c <__sflush_r+0x34>
 8009f14:	2b1d      	cmp	r3, #29
 8009f16:	d001      	beq.n	8009f1c <__sflush_r+0xb4>
 8009f18:	2b16      	cmp	r3, #22
 8009f1a:	d101      	bne.n	8009f20 <__sflush_r+0xb8>
 8009f1c:	602f      	str	r7, [r5, #0]
 8009f1e:	e7b0      	b.n	8009e82 <__sflush_r+0x1a>
 8009f20:	89a3      	ldrh	r3, [r4, #12]
 8009f22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f26:	81a3      	strh	r3, [r4, #12]
 8009f28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f2c:	690f      	ldr	r7, [r1, #16]
 8009f2e:	2f00      	cmp	r7, #0
 8009f30:	d0a7      	beq.n	8009e82 <__sflush_r+0x1a>
 8009f32:	0793      	lsls	r3, r2, #30
 8009f34:	680e      	ldr	r6, [r1, #0]
 8009f36:	bf08      	it	eq
 8009f38:	694b      	ldreq	r3, [r1, #20]
 8009f3a:	600f      	str	r7, [r1, #0]
 8009f3c:	bf18      	it	ne
 8009f3e:	2300      	movne	r3, #0
 8009f40:	eba6 0807 	sub.w	r8, r6, r7
 8009f44:	608b      	str	r3, [r1, #8]
 8009f46:	f1b8 0f00 	cmp.w	r8, #0
 8009f4a:	dd9a      	ble.n	8009e82 <__sflush_r+0x1a>
 8009f4c:	4643      	mov	r3, r8
 8009f4e:	463a      	mov	r2, r7
 8009f50:	6a21      	ldr	r1, [r4, #32]
 8009f52:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009f54:	4628      	mov	r0, r5
 8009f56:	47b0      	blx	r6
 8009f58:	2800      	cmp	r0, #0
 8009f5a:	dc07      	bgt.n	8009f6c <__sflush_r+0x104>
 8009f5c:	89a3      	ldrh	r3, [r4, #12]
 8009f5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f62:	81a3      	strh	r3, [r4, #12]
 8009f64:	f04f 30ff 	mov.w	r0, #4294967295
 8009f68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f6c:	4407      	add	r7, r0
 8009f6e:	eba8 0800 	sub.w	r8, r8, r0
 8009f72:	e7e8      	b.n	8009f46 <__sflush_r+0xde>
 8009f74:	20400001 	.word	0x20400001

08009f78 <_fflush_r>:
 8009f78:	b538      	push	{r3, r4, r5, lr}
 8009f7a:	690b      	ldr	r3, [r1, #16]
 8009f7c:	4605      	mov	r5, r0
 8009f7e:	460c      	mov	r4, r1
 8009f80:	b1db      	cbz	r3, 8009fba <_fflush_r+0x42>
 8009f82:	b118      	cbz	r0, 8009f8c <_fflush_r+0x14>
 8009f84:	6983      	ldr	r3, [r0, #24]
 8009f86:	b90b      	cbnz	r3, 8009f8c <_fflush_r+0x14>
 8009f88:	f7ff fa24 	bl	80093d4 <__sinit>
 8009f8c:	4b0c      	ldr	r3, [pc, #48]	; (8009fc0 <_fflush_r+0x48>)
 8009f8e:	429c      	cmp	r4, r3
 8009f90:	d109      	bne.n	8009fa6 <_fflush_r+0x2e>
 8009f92:	686c      	ldr	r4, [r5, #4]
 8009f94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f98:	b17b      	cbz	r3, 8009fba <_fflush_r+0x42>
 8009f9a:	4621      	mov	r1, r4
 8009f9c:	4628      	mov	r0, r5
 8009f9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009fa2:	f7ff bf61 	b.w	8009e68 <__sflush_r>
 8009fa6:	4b07      	ldr	r3, [pc, #28]	; (8009fc4 <_fflush_r+0x4c>)
 8009fa8:	429c      	cmp	r4, r3
 8009faa:	d101      	bne.n	8009fb0 <_fflush_r+0x38>
 8009fac:	68ac      	ldr	r4, [r5, #8]
 8009fae:	e7f1      	b.n	8009f94 <_fflush_r+0x1c>
 8009fb0:	4b05      	ldr	r3, [pc, #20]	; (8009fc8 <_fflush_r+0x50>)
 8009fb2:	429c      	cmp	r4, r3
 8009fb4:	bf08      	it	eq
 8009fb6:	68ec      	ldreq	r4, [r5, #12]
 8009fb8:	e7ec      	b.n	8009f94 <_fflush_r+0x1c>
 8009fba:	2000      	movs	r0, #0
 8009fbc:	bd38      	pop	{r3, r4, r5, pc}
 8009fbe:	bf00      	nop
 8009fc0:	0800cfd4 	.word	0x0800cfd4
 8009fc4:	0800cff4 	.word	0x0800cff4
 8009fc8:	0800cfb4 	.word	0x0800cfb4

08009fcc <_lseek_r>:
 8009fcc:	b538      	push	{r3, r4, r5, lr}
 8009fce:	4c07      	ldr	r4, [pc, #28]	; (8009fec <_lseek_r+0x20>)
 8009fd0:	4605      	mov	r5, r0
 8009fd2:	4608      	mov	r0, r1
 8009fd4:	4611      	mov	r1, r2
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	6022      	str	r2, [r4, #0]
 8009fda:	461a      	mov	r2, r3
 8009fdc:	f7ff f8c8 	bl	8009170 <_lseek>
 8009fe0:	1c43      	adds	r3, r0, #1
 8009fe2:	d102      	bne.n	8009fea <_lseek_r+0x1e>
 8009fe4:	6823      	ldr	r3, [r4, #0]
 8009fe6:	b103      	cbz	r3, 8009fea <_lseek_r+0x1e>
 8009fe8:	602b      	str	r3, [r5, #0]
 8009fea:	bd38      	pop	{r3, r4, r5, pc}
 8009fec:	20003cc4 	.word	0x20003cc4

08009ff0 <__swhatbuf_r>:
 8009ff0:	b570      	push	{r4, r5, r6, lr}
 8009ff2:	460e      	mov	r6, r1
 8009ff4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ff8:	2900      	cmp	r1, #0
 8009ffa:	b090      	sub	sp, #64	; 0x40
 8009ffc:	4614      	mov	r4, r2
 8009ffe:	461d      	mov	r5, r3
 800a000:	da07      	bge.n	800a012 <__swhatbuf_r+0x22>
 800a002:	2300      	movs	r3, #0
 800a004:	602b      	str	r3, [r5, #0]
 800a006:	89b3      	ldrh	r3, [r6, #12]
 800a008:	061a      	lsls	r2, r3, #24
 800a00a:	d410      	bmi.n	800a02e <__swhatbuf_r+0x3e>
 800a00c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a010:	e00e      	b.n	800a030 <__swhatbuf_r+0x40>
 800a012:	aa01      	add	r2, sp, #4
 800a014:	f000 f864 	bl	800a0e0 <_fstat_r>
 800a018:	2800      	cmp	r0, #0
 800a01a:	dbf2      	blt.n	800a002 <__swhatbuf_r+0x12>
 800a01c:	9a02      	ldr	r2, [sp, #8]
 800a01e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a022:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a026:	425a      	negs	r2, r3
 800a028:	415a      	adcs	r2, r3
 800a02a:	602a      	str	r2, [r5, #0]
 800a02c:	e7ee      	b.n	800a00c <__swhatbuf_r+0x1c>
 800a02e:	2340      	movs	r3, #64	; 0x40
 800a030:	2000      	movs	r0, #0
 800a032:	6023      	str	r3, [r4, #0]
 800a034:	b010      	add	sp, #64	; 0x40
 800a036:	bd70      	pop	{r4, r5, r6, pc}

0800a038 <__smakebuf_r>:
 800a038:	898b      	ldrh	r3, [r1, #12]
 800a03a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a03c:	079d      	lsls	r5, r3, #30
 800a03e:	4606      	mov	r6, r0
 800a040:	460c      	mov	r4, r1
 800a042:	d507      	bpl.n	800a054 <__smakebuf_r+0x1c>
 800a044:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a048:	6023      	str	r3, [r4, #0]
 800a04a:	6123      	str	r3, [r4, #16]
 800a04c:	2301      	movs	r3, #1
 800a04e:	6163      	str	r3, [r4, #20]
 800a050:	b002      	add	sp, #8
 800a052:	bd70      	pop	{r4, r5, r6, pc}
 800a054:	ab01      	add	r3, sp, #4
 800a056:	466a      	mov	r2, sp
 800a058:	f7ff ffca 	bl	8009ff0 <__swhatbuf_r>
 800a05c:	9900      	ldr	r1, [sp, #0]
 800a05e:	4605      	mov	r5, r0
 800a060:	4630      	mov	r0, r6
 800a062:	f7ff fa97 	bl	8009594 <_malloc_r>
 800a066:	b948      	cbnz	r0, 800a07c <__smakebuf_r+0x44>
 800a068:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a06c:	059a      	lsls	r2, r3, #22
 800a06e:	d4ef      	bmi.n	800a050 <__smakebuf_r+0x18>
 800a070:	f023 0303 	bic.w	r3, r3, #3
 800a074:	f043 0302 	orr.w	r3, r3, #2
 800a078:	81a3      	strh	r3, [r4, #12]
 800a07a:	e7e3      	b.n	800a044 <__smakebuf_r+0xc>
 800a07c:	4b0d      	ldr	r3, [pc, #52]	; (800a0b4 <__smakebuf_r+0x7c>)
 800a07e:	62b3      	str	r3, [r6, #40]	; 0x28
 800a080:	89a3      	ldrh	r3, [r4, #12]
 800a082:	6020      	str	r0, [r4, #0]
 800a084:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a088:	81a3      	strh	r3, [r4, #12]
 800a08a:	9b00      	ldr	r3, [sp, #0]
 800a08c:	6163      	str	r3, [r4, #20]
 800a08e:	9b01      	ldr	r3, [sp, #4]
 800a090:	6120      	str	r0, [r4, #16]
 800a092:	b15b      	cbz	r3, 800a0ac <__smakebuf_r+0x74>
 800a094:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a098:	4630      	mov	r0, r6
 800a09a:	f000 f833 	bl	800a104 <_isatty_r>
 800a09e:	b128      	cbz	r0, 800a0ac <__smakebuf_r+0x74>
 800a0a0:	89a3      	ldrh	r3, [r4, #12]
 800a0a2:	f023 0303 	bic.w	r3, r3, #3
 800a0a6:	f043 0301 	orr.w	r3, r3, #1
 800a0aa:	81a3      	strh	r3, [r4, #12]
 800a0ac:	89a3      	ldrh	r3, [r4, #12]
 800a0ae:	431d      	orrs	r5, r3
 800a0b0:	81a5      	strh	r5, [r4, #12]
 800a0b2:	e7cd      	b.n	800a050 <__smakebuf_r+0x18>
 800a0b4:	08009355 	.word	0x08009355

0800a0b8 <__malloc_lock>:
 800a0b8:	4770      	bx	lr

0800a0ba <__malloc_unlock>:
 800a0ba:	4770      	bx	lr

0800a0bc <_read_r>:
 800a0bc:	b538      	push	{r3, r4, r5, lr}
 800a0be:	4c07      	ldr	r4, [pc, #28]	; (800a0dc <_read_r+0x20>)
 800a0c0:	4605      	mov	r5, r0
 800a0c2:	4608      	mov	r0, r1
 800a0c4:	4611      	mov	r1, r2
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	6022      	str	r2, [r4, #0]
 800a0ca:	461a      	mov	r2, r3
 800a0cc:	f7ff f810 	bl	80090f0 <_read>
 800a0d0:	1c43      	adds	r3, r0, #1
 800a0d2:	d102      	bne.n	800a0da <_read_r+0x1e>
 800a0d4:	6823      	ldr	r3, [r4, #0]
 800a0d6:	b103      	cbz	r3, 800a0da <_read_r+0x1e>
 800a0d8:	602b      	str	r3, [r5, #0]
 800a0da:	bd38      	pop	{r3, r4, r5, pc}
 800a0dc:	20003cc4 	.word	0x20003cc4

0800a0e0 <_fstat_r>:
 800a0e0:	b538      	push	{r3, r4, r5, lr}
 800a0e2:	4c07      	ldr	r4, [pc, #28]	; (800a100 <_fstat_r+0x20>)
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	4605      	mov	r5, r0
 800a0e8:	4608      	mov	r0, r1
 800a0ea:	4611      	mov	r1, r2
 800a0ec:	6023      	str	r3, [r4, #0]
 800a0ee:	f7ff f838 	bl	8009162 <_fstat>
 800a0f2:	1c43      	adds	r3, r0, #1
 800a0f4:	d102      	bne.n	800a0fc <_fstat_r+0x1c>
 800a0f6:	6823      	ldr	r3, [r4, #0]
 800a0f8:	b103      	cbz	r3, 800a0fc <_fstat_r+0x1c>
 800a0fa:	602b      	str	r3, [r5, #0]
 800a0fc:	bd38      	pop	{r3, r4, r5, pc}
 800a0fe:	bf00      	nop
 800a100:	20003cc4 	.word	0x20003cc4

0800a104 <_isatty_r>:
 800a104:	b538      	push	{r3, r4, r5, lr}
 800a106:	4c06      	ldr	r4, [pc, #24]	; (800a120 <_isatty_r+0x1c>)
 800a108:	2300      	movs	r3, #0
 800a10a:	4605      	mov	r5, r0
 800a10c:	4608      	mov	r0, r1
 800a10e:	6023      	str	r3, [r4, #0]
 800a110:	f7ff f82c 	bl	800916c <_isatty>
 800a114:	1c43      	adds	r3, r0, #1
 800a116:	d102      	bne.n	800a11e <_isatty_r+0x1a>
 800a118:	6823      	ldr	r3, [r4, #0]
 800a11a:	b103      	cbz	r3, 800a11e <_isatty_r+0x1a>
 800a11c:	602b      	str	r3, [r5, #0]
 800a11e:	bd38      	pop	{r3, r4, r5, pc}
 800a120:	20003cc4 	.word	0x20003cc4

0800a124 <_init>:
 800a124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a126:	bf00      	nop
 800a128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a12a:	bc08      	pop	{r3}
 800a12c:	469e      	mov	lr, r3
 800a12e:	4770      	bx	lr

0800a130 <_fini>:
 800a130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a132:	bf00      	nop
 800a134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a136:	bc08      	pop	{r3}
 800a138:	469e      	mov	lr, r3
 800a13a:	4770      	bx	lr
