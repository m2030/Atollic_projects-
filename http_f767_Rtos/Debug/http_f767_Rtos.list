
http_f767_Rtos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ce10  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003448  0800d010  0800d010  0001d010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08010458  08010458  00020458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08010460  08010460  00020460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08010464  08010464  00020464  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000007c  20000000  08010468  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000d890  2000007c  080104e4  0003007c  2**2
                  ALLOC
  8 ._user_heap_stack 00001804  2000d90c  080104e4  0003d90c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0003007c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0004db26  00000000  00000000  000300ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00009645  00000000  00000000  0007dbd2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0001a0fe  00000000  00000000  00087217  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001c38  00000000  00000000  000a1318  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00002d08  00000000  00000000  000a2f50  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00013a3f  00000000  00000000  000a5c58  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000b0c6  00000000  00000000  000b9697  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  000c475d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005c88  00000000  00000000  000c47dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .RxDecripSection 00000080  2007c000  2007c000  0003c000  2**2
                  ALLOC
 20 .RxarraySection 000017d0  2007c100  2007c100  0003c100  2**0
                  ALLOC
 21 .TxDescripSection 00000080  2007c080  2007c080  0003c080  2**2
                  ALLOC
 22 .TxarraySection 000017d0  2007d8d0  2007d8d0  0003d8d0  2**0
                  ALLOC

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000007c 	.word	0x2000007c
 800021c:	00000000 	.word	0x00000000
 8000220:	0800cff8 	.word	0x0800cff8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000080 	.word	0x20000080
 800023c:	0800cff8 	.word	0x0800cff8

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b97a 	b.w	800061c <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	468c      	mov	ip, r1
 8000346:	460d      	mov	r5, r1
 8000348:	4604      	mov	r4, r0
 800034a:	9e08      	ldr	r6, [sp, #32]
 800034c:	2b00      	cmp	r3, #0
 800034e:	d151      	bne.n	80003f4 <__udivmoddi4+0xb4>
 8000350:	428a      	cmp	r2, r1
 8000352:	4617      	mov	r7, r2
 8000354:	d96d      	bls.n	8000432 <__udivmoddi4+0xf2>
 8000356:	fab2 fe82 	clz	lr, r2
 800035a:	f1be 0f00 	cmp.w	lr, #0
 800035e:	d00b      	beq.n	8000378 <__udivmoddi4+0x38>
 8000360:	f1ce 0c20 	rsb	ip, lr, #32
 8000364:	fa01 f50e 	lsl.w	r5, r1, lr
 8000368:	fa20 fc0c 	lsr.w	ip, r0, ip
 800036c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000370:	ea4c 0c05 	orr.w	ip, ip, r5
 8000374:	fa00 f40e 	lsl.w	r4, r0, lr
 8000378:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800037c:	0c25      	lsrs	r5, r4, #16
 800037e:	fbbc f8fa 	udiv	r8, ip, sl
 8000382:	fa1f f987 	uxth.w	r9, r7
 8000386:	fb0a cc18 	mls	ip, sl, r8, ip
 800038a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800038e:	fb08 f309 	mul.w	r3, r8, r9
 8000392:	42ab      	cmp	r3, r5
 8000394:	d90a      	bls.n	80003ac <__udivmoddi4+0x6c>
 8000396:	19ed      	adds	r5, r5, r7
 8000398:	f108 32ff 	add.w	r2, r8, #4294967295
 800039c:	f080 8123 	bcs.w	80005e6 <__udivmoddi4+0x2a6>
 80003a0:	42ab      	cmp	r3, r5
 80003a2:	f240 8120 	bls.w	80005e6 <__udivmoddi4+0x2a6>
 80003a6:	f1a8 0802 	sub.w	r8, r8, #2
 80003aa:	443d      	add	r5, r7
 80003ac:	1aed      	subs	r5, r5, r3
 80003ae:	b2a4      	uxth	r4, r4
 80003b0:	fbb5 f0fa 	udiv	r0, r5, sl
 80003b4:	fb0a 5510 	mls	r5, sl, r0, r5
 80003b8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003bc:	fb00 f909 	mul.w	r9, r0, r9
 80003c0:	45a1      	cmp	r9, r4
 80003c2:	d909      	bls.n	80003d8 <__udivmoddi4+0x98>
 80003c4:	19e4      	adds	r4, r4, r7
 80003c6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ca:	f080 810a 	bcs.w	80005e2 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8107 	bls.w	80005e2 <__udivmoddi4+0x2a2>
 80003d4:	3802      	subs	r0, #2
 80003d6:	443c      	add	r4, r7
 80003d8:	eba4 0409 	sub.w	r4, r4, r9
 80003dc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e0:	2100      	movs	r1, #0
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d061      	beq.n	80004aa <__udivmoddi4+0x16a>
 80003e6:	fa24 f40e 	lsr.w	r4, r4, lr
 80003ea:	2300      	movs	r3, #0
 80003ec:	6034      	str	r4, [r6, #0]
 80003ee:	6073      	str	r3, [r6, #4]
 80003f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d907      	bls.n	8000408 <__udivmoddi4+0xc8>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d054      	beq.n	80004a6 <__udivmoddi4+0x166>
 80003fc:	2100      	movs	r1, #0
 80003fe:	e886 0021 	stmia.w	r6, {r0, r5}
 8000402:	4608      	mov	r0, r1
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	fab3 f183 	clz	r1, r3
 800040c:	2900      	cmp	r1, #0
 800040e:	f040 808e 	bne.w	800052e <__udivmoddi4+0x1ee>
 8000412:	42ab      	cmp	r3, r5
 8000414:	d302      	bcc.n	800041c <__udivmoddi4+0xdc>
 8000416:	4282      	cmp	r2, r0
 8000418:	f200 80fa 	bhi.w	8000610 <__udivmoddi4+0x2d0>
 800041c:	1a84      	subs	r4, r0, r2
 800041e:	eb65 0503 	sbc.w	r5, r5, r3
 8000422:	2001      	movs	r0, #1
 8000424:	46ac      	mov	ip, r5
 8000426:	2e00      	cmp	r6, #0
 8000428:	d03f      	beq.n	80004aa <__udivmoddi4+0x16a>
 800042a:	e886 1010 	stmia.w	r6, {r4, ip}
 800042e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000432:	b912      	cbnz	r2, 800043a <__udivmoddi4+0xfa>
 8000434:	2701      	movs	r7, #1
 8000436:	fbb7 f7f2 	udiv	r7, r7, r2
 800043a:	fab7 fe87 	clz	lr, r7
 800043e:	f1be 0f00 	cmp.w	lr, #0
 8000442:	d134      	bne.n	80004ae <__udivmoddi4+0x16e>
 8000444:	1beb      	subs	r3, r5, r7
 8000446:	0c3a      	lsrs	r2, r7, #16
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	2101      	movs	r1, #1
 800044e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000452:	0c25      	lsrs	r5, r4, #16
 8000454:	fb02 3318 	mls	r3, r2, r8, r3
 8000458:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800045c:	fb0c f308 	mul.w	r3, ip, r8
 8000460:	42ab      	cmp	r3, r5
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x134>
 8000464:	19ed      	adds	r5, r5, r7
 8000466:	f108 30ff 	add.w	r0, r8, #4294967295
 800046a:	d202      	bcs.n	8000472 <__udivmoddi4+0x132>
 800046c:	42ab      	cmp	r3, r5
 800046e:	f200 80d1 	bhi.w	8000614 <__udivmoddi4+0x2d4>
 8000472:	4680      	mov	r8, r0
 8000474:	1aed      	subs	r5, r5, r3
 8000476:	b2a3      	uxth	r3, r4
 8000478:	fbb5 f0f2 	udiv	r0, r5, r2
 800047c:	fb02 5510 	mls	r5, r2, r0, r5
 8000480:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000484:	fb0c fc00 	mul.w	ip, ip, r0
 8000488:	45a4      	cmp	ip, r4
 800048a:	d907      	bls.n	800049c <__udivmoddi4+0x15c>
 800048c:	19e4      	adds	r4, r4, r7
 800048e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000492:	d202      	bcs.n	800049a <__udivmoddi4+0x15a>
 8000494:	45a4      	cmp	ip, r4
 8000496:	f200 80b8 	bhi.w	800060a <__udivmoddi4+0x2ca>
 800049a:	4618      	mov	r0, r3
 800049c:	eba4 040c 	sub.w	r4, r4, ip
 80004a0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a4:	e79d      	b.n	80003e2 <__udivmoddi4+0xa2>
 80004a6:	4631      	mov	r1, r6
 80004a8:	4630      	mov	r0, r6
 80004aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ae:	f1ce 0420 	rsb	r4, lr, #32
 80004b2:	fa05 f30e 	lsl.w	r3, r5, lr
 80004b6:	fa07 f70e 	lsl.w	r7, r7, lr
 80004ba:	fa20 f804 	lsr.w	r8, r0, r4
 80004be:	0c3a      	lsrs	r2, r7, #16
 80004c0:	fa25 f404 	lsr.w	r4, r5, r4
 80004c4:	ea48 0803 	orr.w	r8, r8, r3
 80004c8:	fbb4 f1f2 	udiv	r1, r4, r2
 80004cc:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80004d0:	fb02 4411 	mls	r4, r2, r1, r4
 80004d4:	fa1f fc87 	uxth.w	ip, r7
 80004d8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80004dc:	fb01 f30c 	mul.w	r3, r1, ip
 80004e0:	42ab      	cmp	r3, r5
 80004e2:	fa00 f40e 	lsl.w	r4, r0, lr
 80004e6:	d909      	bls.n	80004fc <__udivmoddi4+0x1bc>
 80004e8:	19ed      	adds	r5, r5, r7
 80004ea:	f101 30ff 	add.w	r0, r1, #4294967295
 80004ee:	f080 808a 	bcs.w	8000606 <__udivmoddi4+0x2c6>
 80004f2:	42ab      	cmp	r3, r5
 80004f4:	f240 8087 	bls.w	8000606 <__udivmoddi4+0x2c6>
 80004f8:	3902      	subs	r1, #2
 80004fa:	443d      	add	r5, r7
 80004fc:	1aeb      	subs	r3, r5, r3
 80004fe:	fa1f f588 	uxth.w	r5, r8
 8000502:	fbb3 f0f2 	udiv	r0, r3, r2
 8000506:	fb02 3310 	mls	r3, r2, r0, r3
 800050a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800050e:	fb00 f30c 	mul.w	r3, r0, ip
 8000512:	42ab      	cmp	r3, r5
 8000514:	d907      	bls.n	8000526 <__udivmoddi4+0x1e6>
 8000516:	19ed      	adds	r5, r5, r7
 8000518:	f100 38ff 	add.w	r8, r0, #4294967295
 800051c:	d26f      	bcs.n	80005fe <__udivmoddi4+0x2be>
 800051e:	42ab      	cmp	r3, r5
 8000520:	d96d      	bls.n	80005fe <__udivmoddi4+0x2be>
 8000522:	3802      	subs	r0, #2
 8000524:	443d      	add	r5, r7
 8000526:	1aeb      	subs	r3, r5, r3
 8000528:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800052c:	e78f      	b.n	800044e <__udivmoddi4+0x10e>
 800052e:	f1c1 0720 	rsb	r7, r1, #32
 8000532:	fa22 f807 	lsr.w	r8, r2, r7
 8000536:	408b      	lsls	r3, r1
 8000538:	fa05 f401 	lsl.w	r4, r5, r1
 800053c:	ea48 0303 	orr.w	r3, r8, r3
 8000540:	fa20 fe07 	lsr.w	lr, r0, r7
 8000544:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000548:	40fd      	lsrs	r5, r7
 800054a:	ea4e 0e04 	orr.w	lr, lr, r4
 800054e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000552:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000556:	fb0c 5519 	mls	r5, ip, r9, r5
 800055a:	fa1f f883 	uxth.w	r8, r3
 800055e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000562:	fb09 f408 	mul.w	r4, r9, r8
 8000566:	42ac      	cmp	r4, r5
 8000568:	fa02 f201 	lsl.w	r2, r2, r1
 800056c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000570:	d908      	bls.n	8000584 <__udivmoddi4+0x244>
 8000572:	18ed      	adds	r5, r5, r3
 8000574:	f109 30ff 	add.w	r0, r9, #4294967295
 8000578:	d243      	bcs.n	8000602 <__udivmoddi4+0x2c2>
 800057a:	42ac      	cmp	r4, r5
 800057c:	d941      	bls.n	8000602 <__udivmoddi4+0x2c2>
 800057e:	f1a9 0902 	sub.w	r9, r9, #2
 8000582:	441d      	add	r5, r3
 8000584:	1b2d      	subs	r5, r5, r4
 8000586:	fa1f fe8e 	uxth.w	lr, lr
 800058a:	fbb5 f0fc 	udiv	r0, r5, ip
 800058e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000592:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000596:	fb00 f808 	mul.w	r8, r0, r8
 800059a:	45a0      	cmp	r8, r4
 800059c:	d907      	bls.n	80005ae <__udivmoddi4+0x26e>
 800059e:	18e4      	adds	r4, r4, r3
 80005a0:	f100 35ff 	add.w	r5, r0, #4294967295
 80005a4:	d229      	bcs.n	80005fa <__udivmoddi4+0x2ba>
 80005a6:	45a0      	cmp	r8, r4
 80005a8:	d927      	bls.n	80005fa <__udivmoddi4+0x2ba>
 80005aa:	3802      	subs	r0, #2
 80005ac:	441c      	add	r4, r3
 80005ae:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80005b2:	eba4 0408 	sub.w	r4, r4, r8
 80005b6:	fba0 8902 	umull	r8, r9, r0, r2
 80005ba:	454c      	cmp	r4, r9
 80005bc:	46c6      	mov	lr, r8
 80005be:	464d      	mov	r5, r9
 80005c0:	d315      	bcc.n	80005ee <__udivmoddi4+0x2ae>
 80005c2:	d012      	beq.n	80005ea <__udivmoddi4+0x2aa>
 80005c4:	b156      	cbz	r6, 80005dc <__udivmoddi4+0x29c>
 80005c6:	ebba 030e 	subs.w	r3, sl, lr
 80005ca:	eb64 0405 	sbc.w	r4, r4, r5
 80005ce:	fa04 f707 	lsl.w	r7, r4, r7
 80005d2:	40cb      	lsrs	r3, r1
 80005d4:	431f      	orrs	r7, r3
 80005d6:	40cc      	lsrs	r4, r1
 80005d8:	6037      	str	r7, [r6, #0]
 80005da:	6074      	str	r4, [r6, #4]
 80005dc:	2100      	movs	r1, #0
 80005de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005e2:	4618      	mov	r0, r3
 80005e4:	e6f8      	b.n	80003d8 <__udivmoddi4+0x98>
 80005e6:	4690      	mov	r8, r2
 80005e8:	e6e0      	b.n	80003ac <__udivmoddi4+0x6c>
 80005ea:	45c2      	cmp	sl, r8
 80005ec:	d2ea      	bcs.n	80005c4 <__udivmoddi4+0x284>
 80005ee:	ebb8 0e02 	subs.w	lr, r8, r2
 80005f2:	eb69 0503 	sbc.w	r5, r9, r3
 80005f6:	3801      	subs	r0, #1
 80005f8:	e7e4      	b.n	80005c4 <__udivmoddi4+0x284>
 80005fa:	4628      	mov	r0, r5
 80005fc:	e7d7      	b.n	80005ae <__udivmoddi4+0x26e>
 80005fe:	4640      	mov	r0, r8
 8000600:	e791      	b.n	8000526 <__udivmoddi4+0x1e6>
 8000602:	4681      	mov	r9, r0
 8000604:	e7be      	b.n	8000584 <__udivmoddi4+0x244>
 8000606:	4601      	mov	r1, r0
 8000608:	e778      	b.n	80004fc <__udivmoddi4+0x1bc>
 800060a:	3802      	subs	r0, #2
 800060c:	443c      	add	r4, r7
 800060e:	e745      	b.n	800049c <__udivmoddi4+0x15c>
 8000610:	4608      	mov	r0, r1
 8000612:	e708      	b.n	8000426 <__udivmoddi4+0xe6>
 8000614:	f1a8 0802 	sub.w	r8, r8, #2
 8000618:	443d      	add	r5, r7
 800061a:	e72b      	b.n	8000474 <__udivmoddi4+0x134>

0800061c <__aeabi_idiv0>:
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop

08000620 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000620:	b508      	push	{r3, lr}
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000622:	2003      	movs	r0, #3
 8000624:	f000 f82c 	bl	8000680 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000628:	2000      	movs	r0, #0
 800062a:	f00b fc83 	bl	800bf34 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800062e:	f00b fc2d 	bl	800be8c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 8000632:	2000      	movs	r0, #0
 8000634:	bd08      	pop	{r3, pc}
	...

08000638 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000638:	4a03      	ldr	r2, [pc, #12]	; (8000648 <HAL_IncTick+0x10>)
 800063a:	4b04      	ldr	r3, [pc, #16]	; (800064c <HAL_IncTick+0x14>)
 800063c:	6811      	ldr	r1, [r2, #0]
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	440b      	add	r3, r1
 8000642:	6013      	str	r3, [r2, #0]
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop
 8000648:	20006e28 	.word	0x20006e28
 800064c:	20000000 	.word	0x20000000

08000650 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000650:	4b01      	ldr	r3, [pc, #4]	; (8000658 <HAL_GetTick+0x8>)
 8000652:	6818      	ldr	r0, [r3, #0]
}
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	20006e28 	.word	0x20006e28

0800065c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800065c:	b538      	push	{r3, r4, r5, lr}
 800065e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000660:	f7ff fff6 	bl	8000650 <HAL_GetTick>
 8000664:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000666:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000668:	bf1e      	ittt	ne
 800066a:	4b04      	ldrne	r3, [pc, #16]	; (800067c <HAL_Delay+0x20>)
 800066c:	781b      	ldrbne	r3, [r3, #0]
 800066e:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000670:	f7ff ffee 	bl	8000650 <HAL_GetTick>
 8000674:	1b40      	subs	r0, r0, r5
 8000676:	4284      	cmp	r4, r0
 8000678:	d8fa      	bhi.n	8000670 <HAL_Delay+0x14>
  {
  }
}
 800067a:	bd38      	pop	{r3, r4, r5, pc}
 800067c:	20000000 	.word	0x20000000

08000680 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000680:	4a07      	ldr	r2, [pc, #28]	; (80006a0 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000682:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000684:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000686:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800068a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800068e:	041b      	lsls	r3, r3, #16
 8000690:	0c1b      	lsrs	r3, r3, #16
 8000692:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000696:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800069a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800069c:	60d3      	str	r3, [r2, #12]
 800069e:	4770      	bx	lr
 80006a0:	e000ed00 	.word	0xe000ed00

080006a4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006a4:	4b19      	ldr	r3, [pc, #100]	; (800070c <HAL_NVIC_SetPriority+0x68>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80006a6:	b530      	push	{r4, r5, lr}
 80006a8:	68dc      	ldr	r4, [r3, #12]
 80006aa:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006ae:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006b2:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006b4:	2b04      	cmp	r3, #4
 80006b6:	bf28      	it	cs
 80006b8:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006ba:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006bc:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006c0:	bf8c      	ite	hi
 80006c2:	3c03      	subhi	r4, #3
 80006c4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006c6:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
 80006ca:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006cc:	f103 33ff 	add.w	r3, r3, #4294967295
 80006d0:	ea01 0103 	and.w	r1, r1, r3
 80006d4:	fa01 f104 	lsl.w	r1, r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006d8:	fa05 f404 	lsl.w	r4, r5, r4
 80006dc:	f104 34ff 	add.w	r4, r4, #4294967295
 80006e0:	ea02 0204 	and.w	r2, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006e4:	ea42 0201 	orr.w	r2, r2, r1
 80006e8:	ea4f 1202 	mov.w	r2, r2, lsl #4
  if ((int32_t)(IRQn) >= 0)
 80006ec:	db07      	blt.n	80006fe <HAL_NVIC_SetPriority+0x5a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ee:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80006f2:	b2d2      	uxtb	r2, r2
 80006f4:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80006f8:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
 80006fc:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006fe:	f000 000f 	and.w	r0, r0, #15
 8000702:	b2d2      	uxtb	r2, r2
 8000704:	4b02      	ldr	r3, [pc, #8]	; (8000710 <HAL_NVIC_SetPriority+0x6c>)
 8000706:	541a      	strb	r2, [r3, r0]
 8000708:	bd30      	pop	{r4, r5, pc}
 800070a:	bf00      	nop
 800070c:	e000ed00 	.word	0xe000ed00
 8000710:	e000ed14 	.word	0xe000ed14

08000714 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000714:	2800      	cmp	r0, #0
 8000716:	db08      	blt.n	800072a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000718:	0942      	lsrs	r2, r0, #5
 800071a:	2301      	movs	r3, #1
 800071c:	f000 001f 	and.w	r0, r0, #31
 8000720:	fa03 f000 	lsl.w	r0, r3, r0
 8000724:	4b01      	ldr	r3, [pc, #4]	; (800072c <HAL_NVIC_EnableIRQ+0x18>)
 8000726:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800072a:	4770      	bx	lr
 800072c:	e000e100 	.word	0xe000e100

08000730 <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000730:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000734:	4a04      	ldr	r2, [pc, #16]	; (8000748 <HAL_MPU_Disable+0x18>)
 8000736:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000738:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800073c:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800073e:	2200      	movs	r2, #0
 8000740:	4b02      	ldr	r3, [pc, #8]	; (800074c <HAL_MPU_Disable+0x1c>)
 8000742:	605a      	str	r2, [r3, #4]
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	e000ed00 	.word	0xe000ed00
 800074c:	e000ed90 	.word	0xe000ed90

08000750 <HAL_MPU_Enable>:
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000750:	4a06      	ldr	r2, [pc, #24]	; (800076c <HAL_MPU_Enable+0x1c>)
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000752:	f040 0001 	orr.w	r0, r0, #1
 8000756:	4b06      	ldr	r3, [pc, #24]	; (8000770 <HAL_MPU_Enable+0x20>)
 8000758:	6058      	str	r0, [r3, #4]
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800075a:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800075c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000760:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000762:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000766:	f3bf 8f6f 	isb	sy
 800076a:	4770      	bx	lr
 800076c:	e000ed00 	.word	0xe000ed00
 8000770:	e000ed90 	.word	0xe000ed90

08000774 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000774:	7843      	ldrb	r3, [r0, #1]
 8000776:	4a12      	ldr	r2, [pc, #72]	; (80007c0 <HAL_MPU_ConfigRegion+0x4c>)
{
 8000778:	b510      	push	{r4, lr}
  MPU->RNR = MPU_Init->Number;
 800077a:	6093      	str	r3, [r2, #8]

  if ((MPU_Init->Enable) != RESET)
 800077c:	7801      	ldrb	r1, [r0, #0]
 800077e:	b1d9      	cbz	r1, 80007b8 <HAL_MPU_ConfigRegion+0x44>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8000780:	6843      	ldr	r3, [r0, #4]
 8000782:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000784:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000786:	7b04      	ldrb	r4, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000788:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800078a:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800078e:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000790:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000792:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000796:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000798:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800079c:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800079e:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80007a2:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80007a4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80007a8:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80007aa:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80007ae:	7a01      	ldrb	r1, [r0, #8]
 80007b0:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80007b4:	6113      	str	r3, [r2, #16]
 80007b6:	bd10      	pop	{r4, pc}
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
  }
  else
  {
    MPU->RBAR = 0x00;
 80007b8:	60d1      	str	r1, [r2, #12]
    MPU->RASR = 0x00;
 80007ba:	6111      	str	r1, [r2, #16]
 80007bc:	bd10      	pop	{r4, pc}
 80007be:	bf00      	nop
 80007c0:	e000ed90 	.word	0xe000ed90

080007c4 <ETH_FlushTransmitFIFO>:
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
  __IO uint32_t tmpreg = 0;
 80007c4:	2300      	movs	r3, #0
{
 80007c6:	b537      	push	{r0, r1, r2, r4, r5, lr}
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80007c8:	f241 0418 	movw	r4, #4120	; 0x1018
  __IO uint32_t tmpreg = 0;
 80007cc:	9301      	str	r3, [sp, #4]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80007ce:	6803      	ldr	r3, [r0, #0]
{
 80007d0:	4605      	mov	r5, r0
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80007d2:	2001      	movs	r0, #1
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80007d4:	591a      	ldr	r2, [r3, r4]
 80007d6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80007da:	511a      	str	r2, [r3, r4]
  tmpreg = (heth->Instance)->DMAOMR;
 80007dc:	591b      	ldr	r3, [r3, r4]
 80007de:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80007e0:	f7ff ff3c 	bl	800065c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80007e4:	682b      	ldr	r3, [r5, #0]
 80007e6:	9a01      	ldr	r2, [sp, #4]
 80007e8:	511a      	str	r2, [r3, r4]
}
 80007ea:	b003      	add	sp, #12
 80007ec:	bd30      	pop	{r4, r5, pc}
	...

080007f0 <ETH_MACDMAConfig>:
{
 80007f0:	b570      	push	{r4, r5, r6, lr}
 80007f2:	4604      	mov	r4, r0
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80007f4:	b129      	cbz	r1, 8000802 <ETH_MACDMAConfig+0x12>
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80007f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80007fa:	60c3      	str	r3, [r0, #12]
    (heth->Init).Speed = ETH_SPEED_100M;
 80007fc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000800:	6083      	str	r3, [r0, #8]
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8000802:	69e3      	ldr	r3, [r4, #28]
  tmpreg = (heth->Instance)->MACCR;
 8000804:	6822      	ldr	r2, [r4, #0]
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8000806:	2b00      	cmp	r3, #0
                       macinit.LoopbackMode |
 8000808:	68e0      	ldr	r0, [r4, #12]
 800080a:	68a3      	ldr	r3, [r4, #8]
  tmpreg = (heth->Instance)->MACCR;
 800080c:	6815      	ldr	r5, [r2, #0]
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800080e:	bf08      	it	eq
 8000810:	f44f 6180 	moveq.w	r1, #1024	; 0x400
                       macinit.LoopbackMode |
 8000814:	ea43 0300 	orr.w	r3, r3, r0
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8000818:	482e      	ldr	r0, [pc, #184]	; (80008d4 <ETH_MACDMAConfig+0xe4>)
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800081a:	bf18      	it	ne
 800081c:	2100      	movne	r1, #0
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 800081e:	4028      	ands	r0, r5
 8000820:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000824:	4303      	orrs	r3, r0
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8000826:	2001      	movs	r0, #1
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8000828:	430b      	orrs	r3, r1
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 800082a:	6013      	str	r3, [r2, #0]
  tmpreg = (heth->Instance)->MACCR;
 800082c:	6815      	ldr	r5, [r2, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800082e:	f7ff ff15 	bl	800065c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8000832:	6823      	ldr	r3, [r4, #0]
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8000834:	2240      	movs	r2, #64	; 0x40
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8000836:	2001      	movs	r0, #1
  (heth->Instance)->MACCR = tmpreg; 
 8000838:	601d      	str	r5, [r3, #0]
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800083a:	605a      	str	r2, [r3, #4]
   tmpreg = (heth->Instance)->MACFFR;
 800083c:	685d      	ldr	r5, [r3, #4]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800083e:	f7ff ff0d 	bl	800065c <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8000842:	6823      	ldr	r3, [r4, #0]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8000844:	2001      	movs	r0, #1
   (heth->Instance)->MACFFR = tmpreg;
 8000846:	605d      	str	r5, [r3, #4]
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8000848:	2500      	movs	r5, #0
 800084a:	609d      	str	r5, [r3, #8]
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 800084c:	60dd      	str	r5, [r3, #12]
   tmpreg = (heth->Instance)->MACFCR;
 800084e:	699a      	ldr	r2, [r3, #24]
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8000850:	f022 02be 	bic.w	r2, r2, #190	; 0xbe
 8000854:	0412      	lsls	r2, r2, #16
 8000856:	0c12      	lsrs	r2, r2, #16
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8000858:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 800085c:	619a      	str	r2, [r3, #24]
   tmpreg = (heth->Instance)->MACFCR;
 800085e:	699e      	ldr	r6, [r3, #24]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8000860:	f7ff fefc 	bl	800065c <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8000864:	6823      	ldr	r3, [r4, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8000866:	2001      	movs	r0, #1
   (heth->Instance)->MACFCR = tmpreg;
 8000868:	619e      	str	r6, [r3, #24]
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800086a:	61dd      	str	r5, [r3, #28]
    tmpreg = (heth->Instance)->MACVLANTR;
 800086c:	69dd      	ldr	r5, [r3, #28]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800086e:	f7ff fef5 	bl	800065c <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8000872:	6822      	ldr	r2, [r4, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8000874:	2001      	movs	r0, #1
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8000876:	4b18      	ldr	r3, [pc, #96]	; (80008d8 <ETH_MACDMAConfig+0xe8>)
    (heth->Instance)->MACVLANTR = tmpreg;
 8000878:	61d5      	str	r5, [r2, #28]
    tmpreg = (heth->Instance)->DMAOMR;
 800087a:	f241 0518 	movw	r5, #4120	; 0x1018
 800087e:	5951      	ldr	r1, [r2, r5]
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8000880:	400b      	ands	r3, r1
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8000882:	f043 7308 	orr.w	r3, r3, #35651584	; 0x2200000
 8000886:	f043 0304 	orr.w	r3, r3, #4
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 800088a:	5153      	str	r3, [r2, r5]
    tmpreg = (heth->Instance)->DMAOMR;
 800088c:	5956      	ldr	r6, [r2, r5]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800088e:	f7ff fee5 	bl	800065c <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8000892:	6823      	ldr	r3, [r4, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8000894:	2001      	movs	r0, #1
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8000896:	4a11      	ldr	r2, [pc, #68]	; (80008dc <ETH_MACDMAConfig+0xec>)
    (heth->Instance)->DMAOMR = tmpreg;
 8000898:	515e      	str	r6, [r3, r5]
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800089a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800089e:	601a      	str	r2, [r3, #0]
     tmpreg = (heth->Instance)->DMABMR;
 80008a0:	681d      	ldr	r5, [r3, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80008a2:	f7ff fedb 	bl	800065c <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 80008a6:	6822      	ldr	r2, [r4, #0]
 80008a8:	f502 5380 	add.w	r3, r2, #4096	; 0x1000
 80008ac:	601d      	str	r5, [r3, #0]
     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80008ae:	69a3      	ldr	r3, [r4, #24]
 80008b0:	2b01      	cmp	r3, #1
 80008b2:	d107      	bne.n	80008c4 <ETH_MACDMAConfig+0xd4>
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80008b4:	f241 011c 	movw	r1, #4124	; 0x101c
 80008b8:	5853      	ldr	r3, [r2, r1]
 80008ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008c2:	5053      	str	r3, [r2, r1]
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80008c4:	6963      	ldr	r3, [r4, #20]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 80008c6:	4a06      	ldr	r2, [pc, #24]	; (80008e0 <ETH_MACDMAConfig+0xf0>)
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 80008c8:	8899      	ldrh	r1, [r3, #4]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 80008ca:	6011      	str	r1, [r2, #0]
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 80008cc:	681a      	ldr	r2, [r3, #0]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 80008ce:	4b05      	ldr	r3, [pc, #20]	; (80008e4 <ETH_MACDMAConfig+0xf4>)
 80008d0:	601a      	str	r2, [r3, #0]
 80008d2:	bd70      	pop	{r4, r5, r6, pc}
 80008d4:	ff20810f 	.word	0xff20810f
 80008d8:	f8de3f23 	.word	0xf8de3f23
 80008dc:	02c12080 	.word	0x02c12080
 80008e0:	40028040 	.word	0x40028040
 80008e4:	40028044 	.word	0x40028044

080008e8 <HAL_ETH_DMATxDescListInit>:
{
 80008e8:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(heth);
 80008ea:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 80008ee:	2c01      	cmp	r4, #1
 80008f0:	f04f 0402 	mov.w	r4, #2
 80008f4:	d033      	beq.n	800095e <HAL_ETH_DMATxDescListInit+0x76>
 80008f6:	2501      	movs	r5, #1
  heth->State = HAL_ETH_STATE_BUSY;
 80008f8:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 80008fc:	f44f 1780 	mov.w	r7, #1048576	; 0x100000
 8000900:	f101 0420 	add.w	r4, r1, #32
  __HAL_LOCK(heth);
 8000904:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8000908:	f240 5ef4 	movw	lr, #1524	; 0x5f4
  for(i=0; i < TxBuffCount; i++)
 800090c:	2500      	movs	r5, #0
    if(i < (TxBuffCount-1))
 800090e:	f103 3cff 	add.w	ip, r3, #4294967295
  heth->TxDesc = DMATxDescTab;
 8000912:	62c1      	str	r1, [r0, #44]	; 0x2c
  for(i=0; i < TxBuffCount; i++)
 8000914:	429d      	cmp	r5, r3
 8000916:	d10b      	bne.n	8000930 <HAL_ETH_DMATxDescListInit+0x48>
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8000918:	6802      	ldr	r2, [r0, #0]
 800091a:	f241 0310 	movw	r3, #4112	; 0x1010
 800091e:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 8000920:	2301      	movs	r3, #1
 8000922:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8000926:	2300      	movs	r3, #0
 8000928:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 800092c:	4618      	mov	r0, r3
 800092e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8000930:	fb0e 2605 	mla	r6, lr, r5, r2
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8000934:	f844 7c20 	str.w	r7, [r4, #-32]
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8000938:	f844 6c18 	str.w	r6, [r4, #-24]
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800093c:	69c6      	ldr	r6, [r0, #28]
 800093e:	b92e      	cbnz	r6, 800094c <HAL_ETH_DMATxDescListInit+0x64>
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8000940:	f854 6c20 	ldr.w	r6, [r4, #-32]
 8000944:	f446 0640 	orr.w	r6, r6, #12582912	; 0xc00000
 8000948:	f844 6c20 	str.w	r6, [r4, #-32]
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 800094c:	4565      	cmp	r5, ip
 800094e:	bf2c      	ite	cs
 8000950:	460e      	movcs	r6, r1
 8000952:	4626      	movcc	r6, r4
  for(i=0; i < TxBuffCount; i++)
 8000954:	3501      	adds	r5, #1
 8000956:	3420      	adds	r4, #32
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 8000958:	f844 6c34 	str.w	r6, [r4, #-52]
 800095c:	e7da      	b.n	8000914 <HAL_ETH_DMATxDescListInit+0x2c>
  __HAL_LOCK(heth);
 800095e:	4620      	mov	r0, r4
}
 8000960:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000962 <HAL_ETH_DMARxDescListInit>:
{
 8000962:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(heth);
 8000966:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 800096a:	2c01      	cmp	r4, #1
 800096c:	f04f 0402 	mov.w	r4, #2
 8000970:	d030      	beq.n	80009d4 <HAL_ETH_DMARxDescListInit+0x72>
 8000972:	2501      	movs	r5, #1
  heth->State = HAL_ETH_STATE_BUSY;
 8000974:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8000978:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800097c:	f101 0420 	add.w	r4, r1, #32
  __HAL_LOCK(heth);
 8000980:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8000984:	f244 57f4 	movw	r7, #17908	; 0x45f4
  for(i=0; i < RxBuffCount; i++)
 8000988:	2500      	movs	r5, #0
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 800098a:	f240 5ef4 	movw	lr, #1524	; 0x5f4
    if(i < (RxBuffCount-1))
 800098e:	f103 3cff 	add.w	ip, r3, #4294967295
  heth->RxDesc = DMARxDescTab; 
 8000992:	6281      	str	r1, [r0, #40]	; 0x28
  for(i=0; i < RxBuffCount; i++)
 8000994:	429d      	cmp	r5, r3
 8000996:	d10c      	bne.n	80009b2 <HAL_ETH_DMARxDescListInit+0x50>
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8000998:	6802      	ldr	r2, [r0, #0]
 800099a:	f241 030c 	movw	r3, #4108	; 0x100c
 800099e:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 80009a0:	2301      	movs	r3, #1
 80009a2:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 80009a6:	2300      	movs	r3, #0
 80009a8:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 80009ac:	4618      	mov	r0, r3
 80009ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80009b2:	fb0e 2805 	mla	r8, lr, r5, r2
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80009b6:	f844 6c20 	str.w	r6, [r4, #-32]
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80009ba:	f844 8c18 	str.w	r8, [r4, #-24]
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 80009be:	4565      	cmp	r5, ip
 80009c0:	bf2c      	ite	cs
 80009c2:	4688      	movcs	r8, r1
 80009c4:	46a0      	movcc	r8, r4
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80009c6:	f844 7c1c 	str.w	r7, [r4, #-28]
  for(i=0; i < RxBuffCount; i++)
 80009ca:	3501      	adds	r5, #1
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 80009cc:	f844 8c14 	str.w	r8, [r4, #-20]
 80009d0:	3420      	adds	r4, #32
 80009d2:	e7df      	b.n	8000994 <HAL_ETH_DMARxDescListInit+0x32>
  __HAL_LOCK(heth);
 80009d4:	4620      	mov	r0, r4
}
 80009d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080009dc <HAL_ETH_TransmitFrame>:
  __HAL_LOCK(heth);
 80009dc:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 80009e0:	2b01      	cmp	r3, #1
 80009e2:	f04f 0302 	mov.w	r3, #2
{
 80009e6:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(heth);
 80009e8:	d066      	beq.n	8000ab8 <HAL_ETH_TransmitFrame+0xdc>
 80009ea:	2201      	movs	r2, #1
  heth->State = HAL_ETH_STATE_BUSY;
 80009ec:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_LOCK(heth);
 80009f0:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  if (FrameLength == 0) 
 80009f4:	b929      	cbnz	r1, 8000a02 <HAL_ETH_TransmitFrame+0x26>
    heth->State = HAL_ETH_STATE_READY;
 80009f6:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 80009fa:	f880 1045 	strb.w	r1, [r0, #69]	; 0x45
    return HAL_ERROR;
 80009fe:	4610      	mov	r0, r2
 8000a00:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8000a02:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000a04:	681c      	ldr	r4, [r3, #0]
 8000a06:	2c00      	cmp	r4, #0
 8000a08:	da06      	bge.n	8000a18 <HAL_ETH_TransmitFrame+0x3c>
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8000a0a:	2312      	movs	r3, #18
 8000a0c:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8000a10:	2300      	movs	r3, #0
 8000a12:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
 8000a16:	e7f2      	b.n	80009fe <HAL_ETH_TransmitFrame+0x22>
  if (FrameLength > ETH_TX_BUF_SIZE)
 8000a18:	f240 54f4 	movw	r4, #1524	; 0x5f4
 8000a1c:	42a1      	cmp	r1, r4
 8000a1e:	d92c      	bls.n	8000a7a <HAL_ETH_TransmitFrame+0x9e>
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8000a20:	fbb1 f2f4 	udiv	r2, r1, r4
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8000a24:	fb04 1412 	mls	r4, r4, r2, r1
 8000a28:	b32c      	cbz	r4, 8000a76 <HAL_ETH_TransmitFrame+0x9a>
      bufcount++;
 8000a2a:	3201      	adds	r2, #1
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8000a2c:	4c23      	ldr	r4, [pc, #140]	; (8000abc <HAL_ETH_TransmitFrame+0xe0>)
 8000a2e:	f201 51f4 	addw	r1, r1, #1524	; 0x5f4
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8000a32:	f240 56f4 	movw	r6, #1524	; 0x5f4
      if (i == (bufcount-1))
 8000a36:	1e57      	subs	r7, r2, #1
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8000a38:	fb04 1102 	mla	r1, r4, r2, r1
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8000a3c:	2400      	movs	r4, #0
 8000a3e:	f3c1 010c 	ubfx	r1, r1, #0, #13
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8000a42:	681d      	ldr	r5, [r3, #0]
 8000a44:	f025 5540 	bic.w	r5, r5, #805306368	; 0x30000000
 8000a48:	601d      	str	r5, [r3, #0]
      if (i == 0) 
 8000a4a:	b91c      	cbnz	r4, 8000a54 <HAL_ETH_TransmitFrame+0x78>
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8000a4c:	681d      	ldr	r5, [r3, #0]
 8000a4e:	f045 5580 	orr.w	r5, r5, #268435456	; 0x10000000
 8000a52:	601d      	str	r5, [r3, #0]
      if (i == (bufcount-1))
 8000a54:	42a7      	cmp	r7, r4
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8000a56:	605e      	str	r6, [r3, #4]
      if (i == (bufcount-1))
 8000a58:	d104      	bne.n	8000a64 <HAL_ETH_TransmitFrame+0x88>
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8000a5a:	681d      	ldr	r5, [r3, #0]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8000a5c:	6059      	str	r1, [r3, #4]
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8000a5e:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8000a62:	601d      	str	r5, [r3, #0]
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8000a64:	681d      	ldr	r5, [r3, #0]
    for (i=0; i< bufcount; i++)
 8000a66:	3401      	adds	r4, #1
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8000a68:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
    for (i=0; i< bufcount; i++)
 8000a6c:	4294      	cmp	r4, r2
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8000a6e:	601d      	str	r5, [r3, #0]
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8000a70:	68db      	ldr	r3, [r3, #12]
    for (i=0; i< bufcount; i++)
 8000a72:	d1e6      	bne.n	8000a42 <HAL_ETH_TransmitFrame+0x66>
 8000a74:	e00d      	b.n	8000a92 <HAL_ETH_TransmitFrame+0xb6>
  if (bufcount == 1)
 8000a76:	2a01      	cmp	r2, #1
 8000a78:	d1d8      	bne.n	8000a2c <HAL_ETH_TransmitFrame+0x50>
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8000a7a:	681a      	ldr	r2, [r3, #0]
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8000a7c:	f3c1 010c 	ubfx	r1, r1, #0, #13
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8000a80:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8000a84:	6059      	str	r1, [r3, #4]
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8000a86:	601a      	str	r2, [r3, #0]
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8000a88:	681a      	ldr	r2, [r3, #0]
 8000a8a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000a8e:	601a      	str	r2, [r3, #0]
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8000a90:	68db      	ldr	r3, [r3, #12]
 8000a92:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8000a94:	f241 0214 	movw	r2, #4116	; 0x1014
 8000a98:	6803      	ldr	r3, [r0, #0]
 8000a9a:	5899      	ldr	r1, [r3, r2]
 8000a9c:	0749      	lsls	r1, r1, #29
 8000a9e:	d505      	bpl.n	8000aac <HAL_ETH_TransmitFrame+0xd0>
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8000aa0:	2104      	movs	r1, #4
 8000aa2:	5099      	str	r1, [r3, r2]
    (heth->Instance)->DMATPDR = 0;
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	f241 0204 	movw	r2, #4100	; 0x1004
 8000aaa:	5099      	str	r1, [r3, r2]
  heth->State = HAL_ETH_STATE_READY;
 8000aac:	2301      	movs	r3, #1
 8000aae:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  __HAL_LOCK(heth);
 8000ab8:	4618      	mov	r0, r3
}
 8000aba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000abc:	fffffa0c 	.word	0xfffffa0c

08000ac0 <HAL_ETH_GetReceivedFrame_IT>:
  __HAL_LOCK(heth);
 8000ac0:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8000ac4:	2b01      	cmp	r3, #1
 8000ac6:	f04f 0302 	mov.w	r3, #2
{
 8000aca:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(heth);
 8000acc:	d03b      	beq.n	8000b46 <HAL_ETH_GetReceivedFrame_IT+0x86>
 8000ace:	2201      	movs	r2, #1
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8000ad0:	2405      	movs	r4, #5
  heth->State = HAL_ETH_STATE_BUSY;
 8000ad2:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
      heth->RxFrameInfos.SegCount = 1;   
 8000ad6:	4611      	mov	r1, r2
  __HAL_LOCK(heth);
 8000ad8:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8000adc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000ade:	681a      	ldr	r2, [r3, #0]
 8000ae0:	2a00      	cmp	r2, #0
 8000ae2:	db01      	blt.n	8000ae8 <HAL_ETH_GetReceivedFrame_IT+0x28>
 8000ae4:	3c01      	subs	r4, #1
 8000ae6:	d106      	bne.n	8000af6 <HAL_ETH_GetReceivedFrame_IT+0x36>
  heth->State = HAL_ETH_STATE_READY;
 8000ae8:	2301      	movs	r3, #1
  __HAL_UNLOCK(heth);
 8000aea:	2200      	movs	r2, #0
  heth->State = HAL_ETH_STATE_READY;
 8000aec:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8000af0:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  return HAL_ERROR;
 8000af4:	e027      	b.n	8000b46 <HAL_ETH_GetReceivedFrame_IT+0x86>
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8000af6:	681a      	ldr	r2, [r3, #0]
 8000af8:	68dd      	ldr	r5, [r3, #12]
 8000afa:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8000afe:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8000b02:	d103      	bne.n	8000b0c <HAL_ETH_GetReceivedFrame_IT+0x4c>
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8000b04:	6303      	str	r3, [r0, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1;   
 8000b06:	6381      	str	r1, [r0, #56]	; 0x38
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8000b08:	6285      	str	r5, [r0, #40]	; 0x28
 8000b0a:	e7e7      	b.n	8000adc <HAL_ETH_GetReceivedFrame_IT+0x1c>
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8000b0c:	681a      	ldr	r2, [r3, #0]
 8000b0e:	f412 7f40 	tst.w	r2, #768	; 0x300
 8000b12:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8000b14:	d102      	bne.n	8000b1c <HAL_ETH_GetReceivedFrame_IT+0x5c>
      (heth->RxFrameInfos.SegCount)++;
 8000b16:	3201      	adds	r2, #1
 8000b18:	6382      	str	r2, [r0, #56]	; 0x38
 8000b1a:	e7f5      	b.n	8000b08 <HAL_ETH_GetReceivedFrame_IT+0x48>
      (heth->RxFrameInfos.SegCount)++;
 8000b1c:	3201      	adds	r2, #1
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8000b1e:	6343      	str	r3, [r0, #52]	; 0x34
      if ((heth->RxFrameInfos.SegCount) == 1)
 8000b20:	2a01      	cmp	r2, #1
      (heth->RxFrameInfos.SegCount)++;
 8000b22:	6382      	str	r2, [r0, #56]	; 0x38
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8000b24:	bf08      	it	eq
 8000b26:	6303      	streq	r3, [r0, #48]	; 0x30
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	f3c3 430d 	ubfx	r3, r3, #16, #14
 8000b2e:	3b04      	subs	r3, #4
 8000b30:	63c3      	str	r3, [r0, #60]	; 0x3c
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8000b32:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8000b34:	689b      	ldr	r3, [r3, #8]
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8000b36:	6285      	str	r5, [r0, #40]	; 0x28
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8000b38:	6403      	str	r3, [r0, #64]	; 0x40
      heth->State = HAL_ETH_STATE_READY;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000b40:	2300      	movs	r3, #0
 8000b42:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	bd30      	pop	{r4, r5, pc}

08000b4a <HAL_ETH_ReadPHYRegister>:
{
 8000b4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8000b4c:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
{
 8000b50:	4605      	mov	r5, r0
 8000b52:	4616      	mov	r6, r2
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8000b54:	2b82      	cmp	r3, #130	; 0x82
 8000b56:	d030      	beq.n	8000bba <HAL_ETH_ReadPHYRegister+0x70>
  tmpreg = heth->Instance->MACMIIAR;
 8000b58:	6802      	ldr	r2, [r0, #0]
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8000b5a:	2382      	movs	r3, #130	; 0x82
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8000b5c:	0189      	lsls	r1, r1, #6
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8000b5e:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg = heth->Instance->MACMIIAR;
 8000b62:	6913      	ldr	r3, [r2, #16]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8000b64:	f401 64f8 	and.w	r4, r1, #1984	; 0x7c0
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8000b68:	f003 011c 	and.w	r1, r3, #28
 8000b6c:	4321      	orrs	r1, r4
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8000b6e:	8a04      	ldrh	r4, [r0, #16]
 8000b70:	02e4      	lsls	r4, r4, #11
 8000b72:	b2a4      	uxth	r4, r4
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8000b74:	430c      	orrs	r4, r1
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8000b76:	f044 0401 	orr.w	r4, r4, #1
  heth->Instance->MACMIIAR = tmpreg;
 8000b7a:	6114      	str	r4, [r2, #16]
  tickstart = HAL_GetTick();
 8000b7c:	f7ff fd68 	bl	8000650 <HAL_GetTick>
 8000b80:	4607      	mov	r7, r0
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000b82:	f014 0001 	ands.w	r0, r4, #1
 8000b86:	d107      	bne.n	8000b98 <HAL_ETH_ReadPHYRegister+0x4e>
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8000b88:	682b      	ldr	r3, [r5, #0]
 8000b8a:	695b      	ldr	r3, [r3, #20]
 8000b8c:	b29b      	uxth	r3, r3
 8000b8e:	6033      	str	r3, [r6, #0]
  heth->State = HAL_ETH_STATE_READY;
 8000b90:	2301      	movs	r3, #1
 8000b92:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
 8000b96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8000b98:	f7ff fd5a 	bl	8000650 <HAL_GetTick>
 8000b9c:	1bc0      	subs	r0, r0, r7
 8000b9e:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8000ba2:	d307      	bcc.n	8000bb4 <HAL_ETH_ReadPHYRegister+0x6a>
      heth->State= HAL_ETH_STATE_READY;
 8000ba4:	2301      	movs	r3, #1
      return HAL_TIMEOUT;
 8000ba6:	2003      	movs	r0, #3
      heth->State= HAL_ETH_STATE_READY;
 8000ba8:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000bac:	2300      	movs	r3, #0
 8000bae:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
      return HAL_TIMEOUT;
 8000bb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpreg = heth->Instance->MACMIIAR;
 8000bb4:	682b      	ldr	r3, [r5, #0]
 8000bb6:	691c      	ldr	r4, [r3, #16]
 8000bb8:	e7e3      	b.n	8000b82 <HAL_ETH_ReadPHYRegister+0x38>
    return HAL_BUSY;
 8000bba:	2002      	movs	r0, #2
}
 8000bbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000bbe <HAL_ETH_WritePHYRegister>:
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8000bbe:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8000bc2:	2b42      	cmp	r3, #66	; 0x42
{
 8000bc4:	b570      	push	{r4, r5, r6, lr}
 8000bc6:	4605      	mov	r5, r0
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8000bc8:	d02e      	beq.n	8000c28 <HAL_ETH_WritePHYRegister+0x6a>
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8000bca:	2342      	movs	r3, #66	; 0x42
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8000bcc:	018c      	lsls	r4, r1, #6
 8000bce:	b292      	uxth	r2, r2
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8000bd0:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8000bd4:	f404 64f8 	and.w	r4, r4, #1984	; 0x7c0
  tmpreg = heth->Instance->MACMIIAR;
 8000bd8:	6803      	ldr	r3, [r0, #0]
 8000bda:	f044 0403 	orr.w	r4, r4, #3
 8000bde:	6918      	ldr	r0, [r3, #16]
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8000be0:	f000 001c 	and.w	r0, r0, #28
 8000be4:	4320      	orrs	r0, r4
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8000be6:	8a2c      	ldrh	r4, [r5, #16]
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8000be8:	615a      	str	r2, [r3, #20]
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8000bea:	02e4      	lsls	r4, r4, #11
 8000bec:	b2a4      	uxth	r4, r4
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8000bee:	4304      	orrs	r4, r0
  heth->Instance->MACMIIAR = tmpreg;
 8000bf0:	611c      	str	r4, [r3, #16]
  tickstart = HAL_GetTick();
 8000bf2:	f7ff fd2d 	bl	8000650 <HAL_GetTick>
 8000bf6:	4606      	mov	r6, r0
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000bf8:	f014 0001 	ands.w	r0, r4, #1
 8000bfc:	d103      	bne.n	8000c06 <HAL_ETH_WritePHYRegister+0x48>
  heth->State = HAL_ETH_STATE_READY;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
 8000c04:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8000c06:	f7ff fd23 	bl	8000650 <HAL_GetTick>
 8000c0a:	1b80      	subs	r0, r0, r6
 8000c0c:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8000c10:	d307      	bcc.n	8000c22 <HAL_ETH_WritePHYRegister+0x64>
      heth->State= HAL_ETH_STATE_READY;
 8000c12:	2301      	movs	r3, #1
      return HAL_TIMEOUT;
 8000c14:	2003      	movs	r0, #3
      heth->State= HAL_ETH_STATE_READY;
 8000c16:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
 8000c20:	bd70      	pop	{r4, r5, r6, pc}
    tmpreg = heth->Instance->MACMIIAR;
 8000c22:	682b      	ldr	r3, [r5, #0]
 8000c24:	691c      	ldr	r4, [r3, #16]
 8000c26:	e7e7      	b.n	8000bf8 <HAL_ETH_WritePHYRegister+0x3a>
    return HAL_BUSY;
 8000c28:	2002      	movs	r0, #2
}
 8000c2a:	bd70      	pop	{r4, r5, r6, pc}

08000c2c <HAL_ETH_Init>:
  uint32_t tempreg = 0, phyreg = 0;
 8000c2c:	2300      	movs	r3, #0
{
 8000c2e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(heth == NULL)
 8000c30:	4604      	mov	r4, r0
  uint32_t tempreg = 0, phyreg = 0;
 8000c32:	9300      	str	r3, [sp, #0]
  if(heth == NULL)
 8000c34:	2800      	cmp	r0, #0
 8000c36:	f000 80dc 	beq.w	8000df2 <HAL_ETH_Init+0x1c6>
  if(heth->State == HAL_ETH_STATE_RESET)
 8000c3a:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8000c3e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000c42:	b91b      	cbnz	r3, 8000c4c <HAL_ETH_Init+0x20>
    heth->Lock = HAL_UNLOCKED;
 8000c44:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
    HAL_ETH_MspInit(heth);
 8000c48:	f00a fe3a 	bl	800b8c0 <HAL_ETH_MspInit>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c4c:	4b6a      	ldr	r3, [pc, #424]	; (8000df8 <HAL_ETH_Init+0x1cc>)
 8000c4e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000c50:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000c54:	645a      	str	r2, [r3, #68]	; 0x44
 8000c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c5c:	9301      	str	r3, [sp, #4]
 8000c5e:	9b01      	ldr	r3, [sp, #4]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8000c60:	4b66      	ldr	r3, [pc, #408]	; (8000dfc <HAL_ETH_Init+0x1d0>)
 8000c62:	685a      	ldr	r2, [r3, #4]
 8000c64:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8000c68:	605a      	str	r2, [r3, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8000c6a:	685a      	ldr	r2, [r3, #4]
 8000c6c:	6a21      	ldr	r1, [r4, #32]
 8000c6e:	430a      	orrs	r2, r1
 8000c70:	605a      	str	r2, [r3, #4]
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8000c72:	6823      	ldr	r3, [r4, #0]
 8000c74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	f042 0201 	orr.w	r2, r2, #1
 8000c7e:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8000c80:	f7ff fce6 	bl	8000650 <HAL_GetTick>
 8000c84:	4605      	mov	r5, r0
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000c86:	6823      	ldr	r3, [r4, #0]
 8000c88:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8000c8c:	6812      	ldr	r2, [r2, #0]
 8000c8e:	07d0      	lsls	r0, r2, #31
 8000c90:	d41d      	bmi.n	8000cce <HAL_ETH_Init+0xa2>
  tempreg = (heth->Instance)->MACMIIAR;
 8000c92:	691d      	ldr	r5, [r3, #16]
  hclk = HAL_RCC_GetHCLKFreq();
 8000c94:	f000 fcbc 	bl	8001610 <HAL_RCC_GetHCLKFreq>
  if((hclk >= 20000000)&&(hclk < 35000000))
 8000c98:	4b59      	ldr	r3, [pc, #356]	; (8000e00 <HAL_ETH_Init+0x1d4>)
 8000c9a:	4a5a      	ldr	r2, [pc, #360]	; (8000e04 <HAL_ETH_Init+0x1d8>)
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8000c9c:	f025 051c 	bic.w	r5, r5, #28
  if((hclk >= 20000000)&&(hclk < 35000000))
 8000ca0:	4403      	add	r3, r0
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d822      	bhi.n	8000cec <HAL_ETH_Init+0xc0>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8000ca6:	f045 0508 	orr.w	r5, r5, #8
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8000caa:	6823      	ldr	r3, [r4, #0]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8000cac:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	4620      	mov	r0, r4
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8000cb4:	611d      	str	r5, [r3, #16]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8000cb6:	f7ff ff82 	bl	8000bbe <HAL_ETH_WritePHYRegister>
 8000cba:	4605      	mov	r5, r0
 8000cbc:	b368      	cbz	r0, 8000d1a <HAL_ETH_Init+0xee>
      heth->State = HAL_ETH_STATE_READY;
 8000cbe:	2501      	movs	r5, #1
      ETH_MACDMAConfig(heth, err);
 8000cc0:	2101      	movs	r1, #1
 8000cc2:	4620      	mov	r0, r4
 8000cc4:	f7ff fd94 	bl	80007f0 <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 8000cc8:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;
 8000ccc:	e00b      	b.n	8000ce6 <HAL_ETH_Init+0xba>
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8000cce:	f7ff fcbf 	bl	8000650 <HAL_GetTick>
 8000cd2:	1b40      	subs	r0, r0, r5
 8000cd4:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8000cd8:	d9d5      	bls.n	8000c86 <HAL_ETH_Init+0x5a>
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8000cda:	2503      	movs	r5, #3
      __HAL_UNLOCK(heth);
 8000cdc:	2300      	movs	r3, #0
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8000cde:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000ce2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 8000ce6:	4628      	mov	r0, r5
 8000ce8:	b003      	add	sp, #12
 8000cea:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8000cec:	4b46      	ldr	r3, [pc, #280]	; (8000e08 <HAL_ETH_Init+0x1dc>)
 8000cee:	4a47      	ldr	r2, [pc, #284]	; (8000e0c <HAL_ETH_Init+0x1e0>)
 8000cf0:	4403      	add	r3, r0
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d802      	bhi.n	8000cfc <HAL_ETH_Init+0xd0>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8000cf6:	f045 050c 	orr.w	r5, r5, #12
 8000cfa:	e7d6      	b.n	8000caa <HAL_ETH_Init+0x7e>
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8000cfc:	4b44      	ldr	r3, [pc, #272]	; (8000e10 <HAL_ETH_Init+0x1e4>)
 8000cfe:	4a45      	ldr	r2, [pc, #276]	; (8000e14 <HAL_ETH_Init+0x1e8>)
 8000d00:	4403      	add	r3, r0
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d9d1      	bls.n	8000caa <HAL_ETH_Init+0x7e>
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8000d06:	4b44      	ldr	r3, [pc, #272]	; (8000e18 <HAL_ETH_Init+0x1ec>)
 8000d08:	4a44      	ldr	r2, [pc, #272]	; (8000e1c <HAL_ETH_Init+0x1f0>)
 8000d0a:	4403      	add	r3, r0
 8000d0c:	4293      	cmp	r3, r2
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8000d0e:	bf94      	ite	ls
 8000d10:	f045 0504 	orrls.w	r5, r5, #4
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8000d14:	f045 0510 	orrhi.w	r5, r5, #16
 8000d18:	e7c7      	b.n	8000caa <HAL_ETH_Init+0x7e>
  HAL_Delay(PHY_RESET_DELAY);
 8000d1a:	20ff      	movs	r0, #255	; 0xff
 8000d1c:	f7ff fc9e 	bl	800065c <HAL_Delay>
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8000d20:	6863      	ldr	r3, [r4, #4]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d053      	beq.n	8000dce <HAL_ETH_Init+0x1a2>
    tickstart = HAL_GetTick();
 8000d26:	f7ff fc93 	bl	8000650 <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8000d2a:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000d2e:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000d30:	466a      	mov	r2, sp
 8000d32:	2101      	movs	r1, #1
 8000d34:	4620      	mov	r0, r4
 8000d36:	f7ff ff08 	bl	8000b4a <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8000d3a:	f7ff fc89 	bl	8000650 <HAL_GetTick>
 8000d3e:	1b80      	subs	r0, r0, r6
 8000d40:	42b8      	cmp	r0, r7
 8000d42:	d90b      	bls.n	8000d5c <HAL_ETH_Init+0x130>
        ETH_MACDMAConfig(heth, err);
 8000d44:	2101      	movs	r1, #1
 8000d46:	4620      	mov	r0, r4
 8000d48:	f7ff fd52 	bl	80007f0 <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 8000d4c:	2301      	movs	r3, #1
        return HAL_TIMEOUT;
 8000d4e:	2503      	movs	r5, #3
        heth->State= HAL_ETH_STATE_READY;
 8000d50:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 8000d54:	2300      	movs	r3, #0
 8000d56:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 8000d5a:	e7c4      	b.n	8000ce6 <HAL_ETH_Init+0xba>
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8000d5c:	9b00      	ldr	r3, [sp, #0]
 8000d5e:	0759      	lsls	r1, r3, #29
 8000d60:	d5e6      	bpl.n	8000d30 <HAL_ETH_Init+0x104>
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8000d62:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d66:	2100      	movs	r1, #0
 8000d68:	4620      	mov	r0, r4
 8000d6a:	f7ff ff28 	bl	8000bbe <HAL_ETH_WritePHYRegister>
 8000d6e:	2800      	cmp	r0, #0
 8000d70:	d1a5      	bne.n	8000cbe <HAL_ETH_Init+0x92>
    tickstart = HAL_GetTick();
 8000d72:	f7ff fc6d 	bl	8000650 <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8000d76:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000d7a:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000d7c:	466a      	mov	r2, sp
 8000d7e:	2101      	movs	r1, #1
 8000d80:	4620      	mov	r0, r4
 8000d82:	f7ff fee2 	bl	8000b4a <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8000d86:	f7ff fc63 	bl	8000650 <HAL_GetTick>
 8000d8a:	1b80      	subs	r0, r0, r6
 8000d8c:	42b8      	cmp	r0, r7
 8000d8e:	d8d9      	bhi.n	8000d44 <HAL_ETH_Init+0x118>
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8000d90:	9b00      	ldr	r3, [sp, #0]
 8000d92:	069a      	lsls	r2, r3, #26
 8000d94:	d5f2      	bpl.n	8000d7c <HAL_ETH_Init+0x150>
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8000d96:	466a      	mov	r2, sp
 8000d98:	211f      	movs	r1, #31
 8000d9a:	4620      	mov	r0, r4
 8000d9c:	f7ff fed5 	bl	8000b4a <HAL_ETH_ReadPHYRegister>
 8000da0:	2800      	cmp	r0, #0
 8000da2:	d18c      	bne.n	8000cbe <HAL_ETH_Init+0x92>
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8000da4:	9b00      	ldr	r3, [sp, #0]
 8000da6:	f013 0210 	ands.w	r2, r3, #16
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8000daa:	bf18      	it	ne
 8000dac:	f44f 6200 	movne.w	r2, #2048	; 0x800
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8000db0:	075b      	lsls	r3, r3, #29
      (heth->Init).Speed = ETH_SPEED_10M; 
 8000db2:	bf4c      	ite	mi
 8000db4:	2300      	movmi	r3, #0
      (heth->Init).Speed = ETH_SPEED_100M;
 8000db6:	f44f 4380 	movpl.w	r3, #16384	; 0x4000
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8000dba:	60e2      	str	r2, [r4, #12]
      (heth->Init).Speed = ETH_SPEED_100M;
 8000dbc:	60a3      	str	r3, [r4, #8]
  ETH_MACDMAConfig(heth, err);
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	4620      	mov	r0, r4
 8000dc2:	f7ff fd15 	bl	80007f0 <ETH_MACDMAConfig>
  heth->State= HAL_ETH_STATE_READY;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  return HAL_OK;
 8000dcc:	e78b      	b.n	8000ce6 <HAL_ETH_Init+0xba>
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8000dce:	68a3      	ldr	r3, [r4, #8]
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8000dd0:	4629      	mov	r1, r5
 8000dd2:	68e2      	ldr	r2, [r4, #12]
 8000dd4:	4620      	mov	r0, r4
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8000dd6:	085b      	lsrs	r3, r3, #1
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8000dd8:	ea43 02d2 	orr.w	r2, r3, r2, lsr #3
 8000ddc:	b292      	uxth	r2, r2
 8000dde:	f7ff feee 	bl	8000bbe <HAL_ETH_WritePHYRegister>
 8000de2:	2800      	cmp	r0, #0
 8000de4:	f47f af6b 	bne.w	8000cbe <HAL_ETH_Init+0x92>
    HAL_Delay(PHY_CONFIG_DELAY);
 8000de8:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000dec:	f7ff fc36 	bl	800065c <HAL_Delay>
 8000df0:	e7e5      	b.n	8000dbe <HAL_ETH_Init+0x192>
    return HAL_ERROR;
 8000df2:	2501      	movs	r5, #1
 8000df4:	e777      	b.n	8000ce6 <HAL_ETH_Init+0xba>
 8000df6:	bf00      	nop
 8000df8:	40023800 	.word	0x40023800
 8000dfc:	40013800 	.word	0x40013800
 8000e00:	feced300 	.word	0xfeced300
 8000e04:	00e4e1bf 	.word	0x00e4e1bf
 8000e08:	fde9f140 	.word	0xfde9f140
 8000e0c:	017d783f 	.word	0x017d783f
 8000e10:	fc6c7900 	.word	0xfc6c7900
 8000e14:	026259ff 	.word	0x026259ff
 8000e18:	fa0a1f00 	.word	0xfa0a1f00
 8000e1c:	02faf07f 	.word	0x02faf07f

08000e20 <HAL_ETH_Start>:
  __HAL_LOCK(heth);
 8000e20:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8000e24:	2b01      	cmp	r3, #1
{  
 8000e26:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000e28:	4605      	mov	r5, r0
 8000e2a:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(heth);
 8000e2e:	d033      	beq.n	8000e98 <HAL_ETH_Start+0x78>
  __IO uint32_t tmpreg = 0;
 8000e30:	2400      	movs	r4, #0
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8000e32:	682b      	ldr	r3, [r5, #0]
  heth->State = HAL_ETH_STATE_BUSY;
 8000e34:	f885 0044 	strb.w	r0, [r5, #68]	; 0x44
  __HAL_LOCK(heth);
 8000e38:	2601      	movs	r6, #1
  __IO uint32_t tmpreg = 0;
 8000e3a:	9401      	str	r4, [sp, #4]
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8000e3c:	681a      	ldr	r2, [r3, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8000e3e:	4630      	mov	r0, r6
  __HAL_LOCK(heth);
 8000e40:	f885 6045 	strb.w	r6, [r5, #69]	; 0x45
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8000e44:	f042 0208 	orr.w	r2, r2, #8
 8000e48:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8000e4e:	f7ff fc05 	bl	800065c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8000e52:	9a01      	ldr	r2, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8000e54:	4630      	mov	r0, r6
  (heth->Instance)->MACCR = tmpreg;
 8000e56:	682b      	ldr	r3, [r5, #0]
 8000e58:	601a      	str	r2, [r3, #0]
  __IO uint32_t tmpreg = 0;
 8000e5a:	9400      	str	r4, [sp, #0]
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	f042 0204 	orr.w	r2, r2, #4
 8000e62:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	9300      	str	r3, [sp, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8000e68:	f7ff fbf8 	bl	800065c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8000e6c:	682b      	ldr	r3, [r5, #0]
  ETH_FlushTransmitFIFO(heth);
 8000e6e:	4628      	mov	r0, r5
  (heth->Instance)->MACCR = tmpreg;
 8000e70:	9a00      	ldr	r2, [sp, #0]
 8000e72:	601a      	str	r2, [r3, #0]
  ETH_FlushTransmitFIFO(heth);
 8000e74:	f7ff fca6 	bl	80007c4 <ETH_FlushTransmitFIFO>
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8000e78:	682a      	ldr	r2, [r5, #0]
 8000e7a:	f241 0318 	movw	r3, #4120	; 0x1018
  return HAL_OK;
 8000e7e:	4620      	mov	r0, r4
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8000e80:	58d1      	ldr	r1, [r2, r3]
 8000e82:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 8000e86:	50d1      	str	r1, [r2, r3]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8000e88:	58d1      	ldr	r1, [r2, r3]
 8000e8a:	f041 0102 	orr.w	r1, r1, #2
 8000e8e:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 8000e90:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8000e94:	f885 4045 	strb.w	r4, [r5, #69]	; 0x45
}
 8000e98:	b002      	add	sp, #8
 8000e9a:	bd70      	pop	{r4, r5, r6, pc}

08000e9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ea0:	680b      	ldr	r3, [r1, #0]
{
 8000ea2:	b085      	sub	sp, #20
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ea4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8001068 <HAL_GPIO_Init+0x1cc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ea8:	9301      	str	r3, [sp, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000eaa:	2300      	movs	r3, #0
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000eac:	4a6c      	ldr	r2, [pc, #432]	; (8001060 <HAL_GPIO_Init+0x1c4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000eae:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 800106c <HAL_GPIO_Init+0x1d0>
    ioposition = ((uint32_t)0x01) << position;
 8000eb2:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000eb4:	9d01      	ldr	r5, [sp, #4]
    ioposition = ((uint32_t)0x01) << position;
 8000eb6:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000eb8:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 8000eba:	42ac      	cmp	r4, r5
 8000ebc:	f040 80b6 	bne.w	800102c <HAL_GPIO_Init+0x190>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ec0:	684c      	ldr	r4, [r1, #4]
 8000ec2:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000ec6:	f024 0c10 	bic.w	ip, r4, #16
 8000eca:	f10c 36ff 	add.w	r6, ip, #4294967295
 8000ece:	2e01      	cmp	r6, #1
 8000ed0:	d812      	bhi.n	8000ef8 <HAL_GPIO_Init+0x5c>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000ed2:	2603      	movs	r6, #3
        temp = GPIOx->OSPEEDR; 
 8000ed4:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000ed6:	fa06 f60e 	lsl.w	r6, r6, lr
 8000eda:	ea27 0706 	bic.w	r7, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2));
 8000ede:	68ce      	ldr	r6, [r1, #12]
 8000ee0:	fa06 f60e 	lsl.w	r6, r6, lr
 8000ee4:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 8000ee6:	6086      	str	r6, [r0, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000ee8:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp = GPIOx->OTYPER;
 8000eec:	6847      	ldr	r7, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000eee:	409e      	lsls	r6, r3
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ef0:	ea27 0705 	bic.w	r7, r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000ef4:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 8000ef6:	6046      	str	r6, [r0, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000ef8:	2603      	movs	r6, #3
      temp = GPIOx->PUPDR;
 8000efa:	68c7      	ldr	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000efc:	f1bc 0f02 	cmp.w	ip, #2
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000f00:	fa06 f60e 	lsl.w	r6, r6, lr
 8000f04:	ea6f 0606 	mvn.w	r6, r6
 8000f08:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000f0c:	688f      	ldr	r7, [r1, #8]
 8000f0e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000f12:	ea47 070a 	orr.w	r7, r7, sl
      GPIOx->PUPDR = temp;
 8000f16:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f18:	d116      	bne.n	8000f48 <HAL_GPIO_Init+0xac>
        temp = GPIOx->AFR[position >> 3];
 8000f1a:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000f1e:	f003 0b07 	and.w	fp, r3, #7
 8000f22:	f04f 0c0f 	mov.w	ip, #15
 8000f26:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8000f2a:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8000f2e:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000f32:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000f36:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000f3a:	690f      	ldr	r7, [r1, #16]
 8000f3c:	fa07 f70b 	lsl.w	r7, r7, fp
 8000f40:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3] = temp;
 8000f44:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 8000f48:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000f4a:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000f4c:	f004 0703 	and.w	r7, r4, #3
 8000f50:	fa07 fe0e 	lsl.w	lr, r7, lr
 8000f54:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 8000f58:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f5a:	00e6      	lsls	r6, r4, #3
 8000f5c:	d566      	bpl.n	800102c <HAL_GPIO_Init+0x190>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f5e:	f8d8 6044 	ldr.w	r6, [r8, #68]	; 0x44
 8000f62:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000f66:	f003 0e03 	and.w	lr, r3, #3
 8000f6a:	f04f 0c0f 	mov.w	ip, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f6e:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8000f72:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000f76:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f7a:	f8c8 6044 	str.w	r6, [r8, #68]	; 0x44
 8000f7e:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 8000f82:	f8d8 6044 	ldr.w	r6, [r8, #68]	; 0x44
 8000f86:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8000f8a:	9603      	str	r6, [sp, #12]
 8000f8c:	9e03      	ldr	r6, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000f8e:	fa0c f60e 	lsl.w	r6, ip, lr
        temp = SYSCFG->EXTICR[position >> 2];
 8000f92:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000f96:	ea2a 0c06 	bic.w	ip, sl, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000f9a:	4e32      	ldr	r6, [pc, #200]	; (8001064 <HAL_GPIO_Init+0x1c8>)
 8000f9c:	42b0      	cmp	r0, r6
 8000f9e:	d04c      	beq.n	800103a <HAL_GPIO_Init+0x19e>
 8000fa0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000fa4:	42b0      	cmp	r0, r6
 8000fa6:	d04a      	beq.n	800103e <HAL_GPIO_Init+0x1a2>
 8000fa8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000fac:	42b0      	cmp	r0, r6
 8000fae:	d048      	beq.n	8001042 <HAL_GPIO_Init+0x1a6>
 8000fb0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000fb4:	42b0      	cmp	r0, r6
 8000fb6:	d046      	beq.n	8001046 <HAL_GPIO_Init+0x1aa>
 8000fb8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000fbc:	42b0      	cmp	r0, r6
 8000fbe:	d044      	beq.n	800104a <HAL_GPIO_Init+0x1ae>
 8000fc0:	4548      	cmp	r0, r9
 8000fc2:	d044      	beq.n	800104e <HAL_GPIO_Init+0x1b2>
 8000fc4:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8000fc8:	42b0      	cmp	r0, r6
 8000fca:	d042      	beq.n	8001052 <HAL_GPIO_Init+0x1b6>
 8000fcc:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000fd0:	42b0      	cmp	r0, r6
 8000fd2:	d040      	beq.n	8001056 <HAL_GPIO_Init+0x1ba>
 8000fd4:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000fd8:	42b0      	cmp	r0, r6
 8000fda:	d03e      	beq.n	800105a <HAL_GPIO_Init+0x1be>
 8000fdc:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000fe0:	42b0      	cmp	r0, r6
 8000fe2:	bf14      	ite	ne
 8000fe4:	260a      	movne	r6, #10
 8000fe6:	2609      	moveq	r6, #9
 8000fe8:	fa06 f60e 	lsl.w	r6, r6, lr
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fec:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000ff0:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 8000ff4:	60be      	str	r6, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
 8000ff6:	ea6f 0705 	mvn.w	r7, r5
        temp = EXTI->IMR;
 8000ffa:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000ffc:	bf0c      	ite	eq
 8000ffe:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8001000:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001002:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        EXTI->IMR = temp;
 8001006:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR;
 8001008:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 800100a:	bf0c      	ite	eq
 800100c:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 800100e:	432e      	orrne	r6, r5
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001010:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        EXTI->EMR = temp;
 8001014:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR;
 8001016:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8001018:	bf0c      	ite	eq
 800101a:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 800101c:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800101e:	02a4      	lsls	r4, r4, #10
        EXTI->RTSR = temp;
 8001020:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR;
 8001022:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8001024:	bf54      	ite	pl
 8001026:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 8001028:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 800102a:	60d6      	str	r6, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800102c:	3301      	adds	r3, #1
 800102e:	2b10      	cmp	r3, #16
 8001030:	f47f af3f 	bne.w	8000eb2 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8001034:	b005      	add	sp, #20
 8001036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800103a:	2600      	movs	r6, #0
 800103c:	e7d4      	b.n	8000fe8 <HAL_GPIO_Init+0x14c>
 800103e:	2601      	movs	r6, #1
 8001040:	e7d2      	b.n	8000fe8 <HAL_GPIO_Init+0x14c>
 8001042:	2602      	movs	r6, #2
 8001044:	e7d0      	b.n	8000fe8 <HAL_GPIO_Init+0x14c>
 8001046:	2603      	movs	r6, #3
 8001048:	e7ce      	b.n	8000fe8 <HAL_GPIO_Init+0x14c>
 800104a:	2604      	movs	r6, #4
 800104c:	e7cc      	b.n	8000fe8 <HAL_GPIO_Init+0x14c>
 800104e:	2605      	movs	r6, #5
 8001050:	e7ca      	b.n	8000fe8 <HAL_GPIO_Init+0x14c>
 8001052:	2606      	movs	r6, #6
 8001054:	e7c8      	b.n	8000fe8 <HAL_GPIO_Init+0x14c>
 8001056:	2607      	movs	r6, #7
 8001058:	e7c6      	b.n	8000fe8 <HAL_GPIO_Init+0x14c>
 800105a:	2608      	movs	r6, #8
 800105c:	e7c4      	b.n	8000fe8 <HAL_GPIO_Init+0x14c>
 800105e:	bf00      	nop
 8001060:	40013c00 	.word	0x40013c00
 8001064:	40020000 	.word	0x40020000
 8001068:	40023800 	.word	0x40023800
 800106c:	40021400 	.word	0x40021400

08001070 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001070:	b10a      	cbz	r2, 8001076 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001072:	6181      	str	r1, [r0, #24]
 8001074:	4770      	bx	lr
 8001076:	0409      	lsls	r1, r1, #16
 8001078:	e7fb      	b.n	8001072 <HAL_GPIO_WritePin+0x2>
	...

0800107c <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 800107c:	4b19      	ldr	r3, [pc, #100]	; (80010e4 <HAL_PWREx_EnableOverDrive+0x68>)
{
 800107e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8001080:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001082:	4c19      	ldr	r4, [pc, #100]	; (80010e8 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001084:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001088:	641a      	str	r2, [r3, #64]	; 0x40
 800108a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001090:	9301      	str	r3, [sp, #4]
 8001092:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001094:	6823      	ldr	r3, [r4, #0]
 8001096:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800109a:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800109c:	f7ff fad8 	bl	8000650 <HAL_GetTick>
 80010a0:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80010a2:	6863      	ldr	r3, [r4, #4]
 80010a4:	03da      	lsls	r2, r3, #15
 80010a6:	d50c      	bpl.n	80010c2 <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80010a8:	6823      	ldr	r3, [r4, #0]
 80010aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010ae:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010b0:	f7ff face 	bl	8000650 <HAL_GetTick>

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80010b4:	4c0c      	ldr	r4, [pc, #48]	; (80010e8 <HAL_PWREx_EnableOverDrive+0x6c>)
  tickstart = HAL_GetTick();
 80010b6:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80010b8:	6863      	ldr	r3, [r4, #4]
 80010ba:	039b      	lsls	r3, r3, #14
 80010bc:	d50a      	bpl.n	80010d4 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 80010be:	2000      	movs	r0, #0
 80010c0:	e006      	b.n	80010d0 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80010c2:	f7ff fac5 	bl	8000650 <HAL_GetTick>
 80010c6:	1b40      	subs	r0, r0, r5
 80010c8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80010cc:	d9e9      	bls.n	80010a2 <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 80010ce:	2003      	movs	r0, #3
}
 80010d0:	b003      	add	sp, #12
 80010d2:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80010d4:	f7ff fabc 	bl	8000650 <HAL_GetTick>
 80010d8:	1b40      	subs	r0, r0, r5
 80010da:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80010de:	d9eb      	bls.n	80010b8 <HAL_PWREx_EnableOverDrive+0x3c>
 80010e0:	e7f5      	b.n	80010ce <HAL_PWREx_EnableOverDrive+0x52>
 80010e2:	bf00      	nop
 80010e4:	40023800 	.word	0x40023800
 80010e8:	40007000 	.word	0x40007000

080010ec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010ec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010f0:	4604      	mov	r4, r0
 80010f2:	b908      	cbnz	r0, 80010f8 <HAL_RCC_OscConfig+0xc>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80010f4:	2001      	movs	r0, #1
 80010f6:	e03f      	b.n	8001178 <HAL_RCC_OscConfig+0x8c>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010f8:	6803      	ldr	r3, [r0, #0]
 80010fa:	07d8      	lsls	r0, r3, #31
 80010fc:	d410      	bmi.n	8001120 <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010fe:	6823      	ldr	r3, [r4, #0]
 8001100:	0799      	lsls	r1, r3, #30
 8001102:	d460      	bmi.n	80011c6 <HAL_RCC_OscConfig+0xda>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001104:	6823      	ldr	r3, [r4, #0]
 8001106:	0719      	lsls	r1, r3, #28
 8001108:	f100 80a5 	bmi.w	8001256 <HAL_RCC_OscConfig+0x16a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800110c:	6823      	ldr	r3, [r4, #0]
 800110e:	075a      	lsls	r2, r3, #29
 8001110:	f100 80c6 	bmi.w	80012a0 <HAL_RCC_OscConfig+0x1b4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001114:	69a0      	ldr	r0, [r4, #24]
 8001116:	2800      	cmp	r0, #0
 8001118:	f040 8130 	bne.w	800137c <HAL_RCC_OscConfig+0x290>
      }
    }
  }
  return HAL_OK;
 800111c:	2000      	movs	r0, #0
 800111e:	e02b      	b.n	8001178 <HAL_RCC_OscConfig+0x8c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001120:	4b94      	ldr	r3, [pc, #592]	; (8001374 <HAL_RCC_OscConfig+0x288>)
 8001122:	689a      	ldr	r2, [r3, #8]
 8001124:	f002 020c 	and.w	r2, r2, #12
 8001128:	2a04      	cmp	r2, #4
 800112a:	d007      	beq.n	800113c <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800112c:	689a      	ldr	r2, [r3, #8]
 800112e:	f002 020c 	and.w	r2, r2, #12
 8001132:	2a08      	cmp	r2, #8
 8001134:	d10a      	bne.n	800114c <HAL_RCC_OscConfig+0x60>
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	025a      	lsls	r2, r3, #9
 800113a:	d507      	bpl.n	800114c <HAL_RCC_OscConfig+0x60>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800113c:	4b8d      	ldr	r3, [pc, #564]	; (8001374 <HAL_RCC_OscConfig+0x288>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	039b      	lsls	r3, r3, #14
 8001142:	d5dc      	bpl.n	80010fe <HAL_RCC_OscConfig+0x12>
 8001144:	6863      	ldr	r3, [r4, #4]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d1d9      	bne.n	80010fe <HAL_RCC_OscConfig+0x12>
 800114a:	e7d3      	b.n	80010f4 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800114c:	6863      	ldr	r3, [r4, #4]
 800114e:	4d89      	ldr	r5, [pc, #548]	; (8001374 <HAL_RCC_OscConfig+0x288>)
 8001150:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001154:	d113      	bne.n	800117e <HAL_RCC_OscConfig+0x92>
 8001156:	682b      	ldr	r3, [r5, #0]
 8001158:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800115c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800115e:	f7ff fa77 	bl	8000650 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001162:	4d84      	ldr	r5, [pc, #528]	; (8001374 <HAL_RCC_OscConfig+0x288>)
        tickstart = HAL_GetTick();
 8001164:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001166:	682b      	ldr	r3, [r5, #0]
 8001168:	039f      	lsls	r7, r3, #14
 800116a:	d4c8      	bmi.n	80010fe <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800116c:	f7ff fa70 	bl	8000650 <HAL_GetTick>
 8001170:	1b80      	subs	r0, r0, r6
 8001172:	2864      	cmp	r0, #100	; 0x64
 8001174:	d9f7      	bls.n	8001166 <HAL_RCC_OscConfig+0x7a>
            return HAL_TIMEOUT;
 8001176:	2003      	movs	r0, #3
}
 8001178:	b002      	add	sp, #8
 800117a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800117e:	b99b      	cbnz	r3, 80011a8 <HAL_RCC_OscConfig+0xbc>
 8001180:	682b      	ldr	r3, [r5, #0]
 8001182:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001186:	602b      	str	r3, [r5, #0]
 8001188:	682b      	ldr	r3, [r5, #0]
 800118a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800118e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001190:	f7ff fa5e 	bl	8000650 <HAL_GetTick>
 8001194:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001196:	682b      	ldr	r3, [r5, #0]
 8001198:	0398      	lsls	r0, r3, #14
 800119a:	d5b0      	bpl.n	80010fe <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800119c:	f7ff fa58 	bl	8000650 <HAL_GetTick>
 80011a0:	1b80      	subs	r0, r0, r6
 80011a2:	2864      	cmp	r0, #100	; 0x64
 80011a4:	d9f7      	bls.n	8001196 <HAL_RCC_OscConfig+0xaa>
 80011a6:	e7e6      	b.n	8001176 <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011ac:	682b      	ldr	r3, [r5, #0]
 80011ae:	d103      	bne.n	80011b8 <HAL_RCC_OscConfig+0xcc>
 80011b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011b4:	602b      	str	r3, [r5, #0]
 80011b6:	e7ce      	b.n	8001156 <HAL_RCC_OscConfig+0x6a>
 80011b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011bc:	602b      	str	r3, [r5, #0]
 80011be:	682b      	ldr	r3, [r5, #0]
 80011c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011c4:	e7ca      	b.n	800115c <HAL_RCC_OscConfig+0x70>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80011c6:	4b6b      	ldr	r3, [pc, #428]	; (8001374 <HAL_RCC_OscConfig+0x288>)
 80011c8:	689a      	ldr	r2, [r3, #8]
 80011ca:	f012 0f0c 	tst.w	r2, #12
 80011ce:	d007      	beq.n	80011e0 <HAL_RCC_OscConfig+0xf4>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011d0:	689a      	ldr	r2, [r3, #8]
 80011d2:	f002 020c 	and.w	r2, r2, #12
 80011d6:	2a08      	cmp	r2, #8
 80011d8:	d111      	bne.n	80011fe <HAL_RCC_OscConfig+0x112>
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	0259      	lsls	r1, r3, #9
 80011de:	d40e      	bmi.n	80011fe <HAL_RCC_OscConfig+0x112>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011e0:	4b64      	ldr	r3, [pc, #400]	; (8001374 <HAL_RCC_OscConfig+0x288>)
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	0792      	lsls	r2, r2, #30
 80011e6:	d502      	bpl.n	80011ee <HAL_RCC_OscConfig+0x102>
 80011e8:	68e2      	ldr	r2, [r4, #12]
 80011ea:	2a01      	cmp	r2, #1
 80011ec:	d182      	bne.n	80010f4 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	6921      	ldr	r1, [r4, #16]
 80011f2:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80011f6:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80011fa:	601a      	str	r2, [r3, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011fc:	e782      	b.n	8001104 <HAL_RCC_OscConfig+0x18>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80011fe:	68e3      	ldr	r3, [r4, #12]
 8001200:	4d5c      	ldr	r5, [pc, #368]	; (8001374 <HAL_RCC_OscConfig+0x288>)
 8001202:	b1bb      	cbz	r3, 8001234 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_ENABLE();
 8001204:	682b      	ldr	r3, [r5, #0]
 8001206:	f043 0301 	orr.w	r3, r3, #1
 800120a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800120c:	f7ff fa20 	bl	8000650 <HAL_GetTick>
 8001210:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001212:	682b      	ldr	r3, [r5, #0]
 8001214:	079f      	lsls	r7, r3, #30
 8001216:	d507      	bpl.n	8001228 <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001218:	682b      	ldr	r3, [r5, #0]
 800121a:	6922      	ldr	r2, [r4, #16]
 800121c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001220:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001224:	602b      	str	r3, [r5, #0]
 8001226:	e76d      	b.n	8001104 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001228:	f7ff fa12 	bl	8000650 <HAL_GetTick>
 800122c:	1b80      	subs	r0, r0, r6
 800122e:	2802      	cmp	r0, #2
 8001230:	d9ef      	bls.n	8001212 <HAL_RCC_OscConfig+0x126>
 8001232:	e7a0      	b.n	8001176 <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_HSI_DISABLE();
 8001234:	682b      	ldr	r3, [r5, #0]
 8001236:	f023 0301 	bic.w	r3, r3, #1
 800123a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800123c:	f7ff fa08 	bl	8000650 <HAL_GetTick>
 8001240:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001242:	682b      	ldr	r3, [r5, #0]
 8001244:	0798      	lsls	r0, r3, #30
 8001246:	f57f af5d 	bpl.w	8001104 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800124a:	f7ff fa01 	bl	8000650 <HAL_GetTick>
 800124e:	1b80      	subs	r0, r0, r6
 8001250:	2802      	cmp	r0, #2
 8001252:	d9f6      	bls.n	8001242 <HAL_RCC_OscConfig+0x156>
 8001254:	e78f      	b.n	8001176 <HAL_RCC_OscConfig+0x8a>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001256:	6963      	ldr	r3, [r4, #20]
 8001258:	4d46      	ldr	r5, [pc, #280]	; (8001374 <HAL_RCC_OscConfig+0x288>)
 800125a:	b183      	cbz	r3, 800127e <HAL_RCC_OscConfig+0x192>
      __HAL_RCC_LSI_ENABLE();
 800125c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800125e:	f043 0301 	orr.w	r3, r3, #1
 8001262:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8001264:	f7ff f9f4 	bl	8000650 <HAL_GetTick>
 8001268:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800126a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800126c:	079b      	lsls	r3, r3, #30
 800126e:	f53f af4d 	bmi.w	800110c <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001272:	f7ff f9ed 	bl	8000650 <HAL_GetTick>
 8001276:	1b80      	subs	r0, r0, r6
 8001278:	2802      	cmp	r0, #2
 800127a:	d9f6      	bls.n	800126a <HAL_RCC_OscConfig+0x17e>
 800127c:	e77b      	b.n	8001176 <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_LSI_DISABLE();
 800127e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001280:	f023 0301 	bic.w	r3, r3, #1
 8001284:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8001286:	f7ff f9e3 	bl	8000650 <HAL_GetTick>
 800128a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800128c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800128e:	079f      	lsls	r7, r3, #30
 8001290:	f57f af3c 	bpl.w	800110c <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001294:	f7ff f9dc 	bl	8000650 <HAL_GetTick>
 8001298:	1b80      	subs	r0, r0, r6
 800129a:	2802      	cmp	r0, #2
 800129c:	d9f6      	bls.n	800128c <HAL_RCC_OscConfig+0x1a0>
 800129e:	e76a      	b.n	8001176 <HAL_RCC_OscConfig+0x8a>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012a0:	4b34      	ldr	r3, [pc, #208]	; (8001374 <HAL_RCC_OscConfig+0x288>)
 80012a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012a4:	00d0      	lsls	r0, r2, #3
 80012a6:	d427      	bmi.n	80012f8 <HAL_RCC_OscConfig+0x20c>
      __HAL_RCC_PWR_CLK_ENABLE();
 80012a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 80012aa:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80012ac:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80012b0:	641a      	str	r2, [r3, #64]	; 0x40
 80012b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012b8:	9301      	str	r3, [sp, #4]
 80012ba:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012bc:	4d2e      	ldr	r5, [pc, #184]	; (8001378 <HAL_RCC_OscConfig+0x28c>)
 80012be:	682b      	ldr	r3, [r5, #0]
 80012c0:	05d9      	lsls	r1, r3, #23
 80012c2:	d51b      	bpl.n	80012fc <HAL_RCC_OscConfig+0x210>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012c4:	68a3      	ldr	r3, [r4, #8]
 80012c6:	4d2b      	ldr	r5, [pc, #172]	; (8001374 <HAL_RCC_OscConfig+0x288>)
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d127      	bne.n	800131c <HAL_RCC_OscConfig+0x230>
 80012cc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80012ce:	f043 0301 	orr.w	r3, r3, #1
 80012d2:	672b      	str	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012d4:	f241 3588 	movw	r5, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80012d8:	f7ff f9ba 	bl	8000650 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012dc:	4f25      	ldr	r7, [pc, #148]	; (8001374 <HAL_RCC_OscConfig+0x288>)
      tickstart = HAL_GetTick();
 80012de:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80012e2:	079b      	lsls	r3, r3, #30
 80012e4:	d53f      	bpl.n	8001366 <HAL_RCC_OscConfig+0x27a>
    if (pwrclkchanged == SET)
 80012e6:	2e00      	cmp	r6, #0
 80012e8:	f43f af14 	beq.w	8001114 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 80012ec:	4a21      	ldr	r2, [pc, #132]	; (8001374 <HAL_RCC_OscConfig+0x288>)
 80012ee:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80012f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012f4:	6413      	str	r3, [r2, #64]	; 0x40
 80012f6:	e70d      	b.n	8001114 <HAL_RCC_OscConfig+0x28>
  FlagStatus pwrclkchanged = RESET;
 80012f8:	2600      	movs	r6, #0
 80012fa:	e7df      	b.n	80012bc <HAL_RCC_OscConfig+0x1d0>
      PWR->CR1 |= PWR_CR1_DBP;
 80012fc:	682b      	ldr	r3, [r5, #0]
 80012fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001302:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001304:	f7ff f9a4 	bl	8000650 <HAL_GetTick>
 8001308:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800130a:	682b      	ldr	r3, [r5, #0]
 800130c:	05da      	lsls	r2, r3, #23
 800130e:	d4d9      	bmi.n	80012c4 <HAL_RCC_OscConfig+0x1d8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001310:	f7ff f99e 	bl	8000650 <HAL_GetTick>
 8001314:	1bc0      	subs	r0, r0, r7
 8001316:	2864      	cmp	r0, #100	; 0x64
 8001318:	d9f7      	bls.n	800130a <HAL_RCC_OscConfig+0x21e>
 800131a:	e72c      	b.n	8001176 <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800131c:	b9ab      	cbnz	r3, 800134a <HAL_RCC_OscConfig+0x25e>
 800131e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001320:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001324:	f023 0301 	bic.w	r3, r3, #1
 8001328:	672b      	str	r3, [r5, #112]	; 0x70
 800132a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800132c:	f023 0304 	bic.w	r3, r3, #4
 8001330:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001332:	f7ff f98d 	bl	8000650 <HAL_GetTick>
 8001336:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001338:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800133a:	0798      	lsls	r0, r3, #30
 800133c:	d5d3      	bpl.n	80012e6 <HAL_RCC_OscConfig+0x1fa>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800133e:	f7ff f987 	bl	8000650 <HAL_GetTick>
 8001342:	1bc0      	subs	r0, r0, r7
 8001344:	4540      	cmp	r0, r8
 8001346:	d9f7      	bls.n	8001338 <HAL_RCC_OscConfig+0x24c>
 8001348:	e715      	b.n	8001176 <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800134a:	2b05      	cmp	r3, #5
 800134c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800134e:	d103      	bne.n	8001358 <HAL_RCC_OscConfig+0x26c>
 8001350:	f043 0304 	orr.w	r3, r3, #4
 8001354:	672b      	str	r3, [r5, #112]	; 0x70
 8001356:	e7b9      	b.n	80012cc <HAL_RCC_OscConfig+0x1e0>
 8001358:	f023 0301 	bic.w	r3, r3, #1
 800135c:	672b      	str	r3, [r5, #112]	; 0x70
 800135e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001360:	f023 0304 	bic.w	r3, r3, #4
 8001364:	e7b5      	b.n	80012d2 <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001366:	f7ff f973 	bl	8000650 <HAL_GetTick>
 800136a:	eba0 0008 	sub.w	r0, r0, r8
 800136e:	42a8      	cmp	r0, r5
 8001370:	d9b6      	bls.n	80012e0 <HAL_RCC_OscConfig+0x1f4>
 8001372:	e700      	b.n	8001176 <HAL_RCC_OscConfig+0x8a>
 8001374:	40023800 	.word	0x40023800
 8001378:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800137c:	4d3c      	ldr	r5, [pc, #240]	; (8001470 <HAL_RCC_OscConfig+0x384>)
 800137e:	68ab      	ldr	r3, [r5, #8]
 8001380:	f003 030c 	and.w	r3, r3, #12
 8001384:	2b08      	cmp	r3, #8
 8001386:	d042      	beq.n	800140e <HAL_RCC_OscConfig+0x322>
        __HAL_RCC_PLL_DISABLE();
 8001388:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800138a:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800138c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001390:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001392:	d12f      	bne.n	80013f4 <HAL_RCC_OscConfig+0x308>
        tickstart = HAL_GetTick();
 8001394:	f7ff f95c 	bl	8000650 <HAL_GetTick>
 8001398:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800139a:	682b      	ldr	r3, [r5, #0]
 800139c:	0199      	lsls	r1, r3, #6
 800139e:	d423      	bmi.n	80013e8 <HAL_RCC_OscConfig+0x2fc>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013a0:	6a22      	ldr	r2, [r4, #32]
 80013a2:	69e3      	ldr	r3, [r4, #28]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80013a8:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80013ac:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80013ae:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80013b2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80013b4:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80013b8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013ba:	4c2d      	ldr	r4, [pc, #180]	; (8001470 <HAL_RCC_OscConfig+0x384>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013bc:	0852      	lsrs	r2, r2, #1
 80013be:	3a01      	subs	r2, #1
 80013c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80013c4:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80013c6:	682b      	ldr	r3, [r5, #0]
 80013c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013cc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80013ce:	f7ff f93f 	bl	8000650 <HAL_GetTick>
 80013d2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013d4:	6823      	ldr	r3, [r4, #0]
 80013d6:	019a      	lsls	r2, r3, #6
 80013d8:	f53f aea0 	bmi.w	800111c <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013dc:	f7ff f938 	bl	8000650 <HAL_GetTick>
 80013e0:	1b40      	subs	r0, r0, r5
 80013e2:	2802      	cmp	r0, #2
 80013e4:	d9f6      	bls.n	80013d4 <HAL_RCC_OscConfig+0x2e8>
 80013e6:	e6c6      	b.n	8001176 <HAL_RCC_OscConfig+0x8a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013e8:	f7ff f932 	bl	8000650 <HAL_GetTick>
 80013ec:	1b80      	subs	r0, r0, r6
 80013ee:	2802      	cmp	r0, #2
 80013f0:	d9d3      	bls.n	800139a <HAL_RCC_OscConfig+0x2ae>
 80013f2:	e6c0      	b.n	8001176 <HAL_RCC_OscConfig+0x8a>
        tickstart = HAL_GetTick();
 80013f4:	f7ff f92c 	bl	8000650 <HAL_GetTick>
 80013f8:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013fa:	682b      	ldr	r3, [r5, #0]
 80013fc:	019b      	lsls	r3, r3, #6
 80013fe:	f57f ae8d 	bpl.w	800111c <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001402:	f7ff f925 	bl	8000650 <HAL_GetTick>
 8001406:	1b00      	subs	r0, r0, r4
 8001408:	2802      	cmp	r0, #2
 800140a:	d9f6      	bls.n	80013fa <HAL_RCC_OscConfig+0x30e>
 800140c:	e6b3      	b.n	8001176 <HAL_RCC_OscConfig+0x8a>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800140e:	2801      	cmp	r0, #1
      pll_config = RCC->PLLCFGR;
 8001410:	686b      	ldr	r3, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001412:	f43f aeb1 	beq.w	8001178 <HAL_RCC_OscConfig+0x8c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001416:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800141a:	69e1      	ldr	r1, [r4, #28]
 800141c:	428a      	cmp	r2, r1
 800141e:	f47f ae69 	bne.w	80010f4 <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001422:	f003 023f 	and.w	r2, r3, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001426:	6a21      	ldr	r1, [r4, #32]
 8001428:	428a      	cmp	r2, r1
 800142a:	f47f ae63 	bne.w	80010f4 <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800142e:	f647 72c0 	movw	r2, #32704	; 0x7fc0
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001432:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001434:	401a      	ands	r2, r3
 8001436:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 800143a:	f47f ae5b 	bne.w	80010f4 <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800143e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001440:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8001444:	0852      	lsrs	r2, r2, #1
 8001446:	3a01      	subs	r2, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001448:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 800144c:	f47f ae52 	bne.w	80010f4 <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001450:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001454:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001456:	ebb2 6f01 	cmp.w	r2, r1, lsl #24
 800145a:	f47f ae4b 	bne.w	80010f4 <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800145e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001460:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001464:	ebb3 7f02 	cmp.w	r3, r2, lsl #28
    return HAL_ERROR;
 8001468:	bf14      	ite	ne
 800146a:	2001      	movne	r0, #1
 800146c:	2000      	moveq	r0, #0
 800146e:	e683      	b.n	8001178 <HAL_RCC_OscConfig+0x8c>
 8001470:	40023800 	.word	0x40023800

08001474 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001474:	4913      	ldr	r1, [pc, #76]	; (80014c4 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8001476:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001478:	688b      	ldr	r3, [r1, #8]
 800147a:	f003 030c 	and.w	r3, r3, #12
 800147e:	2b04      	cmp	r3, #4
 8001480:	d003      	beq.n	800148a <HAL_RCC_GetSysClockFreq+0x16>
 8001482:	2b08      	cmp	r3, #8
 8001484:	d003      	beq.n	800148e <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001486:	4810      	ldr	r0, [pc, #64]	; (80014c8 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001488:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 800148a:	4810      	ldr	r0, [pc, #64]	; (80014cc <HAL_RCC_GetSysClockFreq+0x58>)
 800148c:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800148e:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001490:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001492:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001494:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001498:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800149c:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80014a0:	bf1a      	itte	ne
 80014a2:	480a      	ldrne	r0, [pc, #40]	; (80014cc <HAL_RCC_GetSysClockFreq+0x58>)
 80014a4:	2300      	movne	r3, #0
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014a6:	4808      	ldreq	r0, [pc, #32]	; (80014c8 <HAL_RCC_GetSysClockFreq+0x54>)
 80014a8:	fba1 0100 	umull	r0, r1, r1, r0
 80014ac:	f7fe ff30 	bl	8000310 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80014b0:	4b04      	ldr	r3, [pc, #16]	; (80014c4 <HAL_RCC_GetSysClockFreq+0x50>)
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80014b8:	3301      	adds	r3, #1
 80014ba:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco / pllp;
 80014bc:	fbb0 f0f3 	udiv	r0, r0, r3
 80014c0:	bd08      	pop	{r3, pc}
 80014c2:	bf00      	nop
 80014c4:	40023800 	.word	0x40023800
 80014c8:	00f42400 	.word	0x00f42400
 80014cc:	007a1200 	.word	0x007a1200

080014d0 <HAL_RCC_ClockConfig>:
{
 80014d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80014d4:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 80014d6:	4604      	mov	r4, r0
 80014d8:	b910      	cbnz	r0, 80014e0 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80014da:	2001      	movs	r0, #1
 80014dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80014e0:	4a46      	ldr	r2, [pc, #280]	; (80015fc <HAL_RCC_ClockConfig+0x12c>)
 80014e2:	6813      	ldr	r3, [r2, #0]
 80014e4:	f003 030f 	and.w	r3, r3, #15
 80014e8:	428b      	cmp	r3, r1
 80014ea:	d329      	bcc.n	8001540 <HAL_RCC_ClockConfig+0x70>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014ec:	6821      	ldr	r1, [r4, #0]
 80014ee:	078f      	lsls	r7, r1, #30
 80014f0:	d431      	bmi.n	8001556 <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014f2:	07c8      	lsls	r0, r1, #31
 80014f4:	d444      	bmi.n	8001580 <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80014f6:	4a41      	ldr	r2, [pc, #260]	; (80015fc <HAL_RCC_ClockConfig+0x12c>)
 80014f8:	6813      	ldr	r3, [r2, #0]
 80014fa:	f003 030f 	and.w	r3, r3, #15
 80014fe:	429d      	cmp	r5, r3
 8001500:	d368      	bcc.n	80015d4 <HAL_RCC_ClockConfig+0x104>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001502:	6822      	ldr	r2, [r4, #0]
 8001504:	0751      	lsls	r1, r2, #29
 8001506:	d471      	bmi.n	80015ec <HAL_RCC_ClockConfig+0x11c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001508:	0713      	lsls	r3, r2, #28
 800150a:	d507      	bpl.n	800151c <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800150c:	4a3c      	ldr	r2, [pc, #240]	; (8001600 <HAL_RCC_ClockConfig+0x130>)
 800150e:	6921      	ldr	r1, [r4, #16]
 8001510:	6893      	ldr	r3, [r2, #8]
 8001512:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001516:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800151a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800151c:	f7ff ffaa 	bl	8001474 <HAL_RCC_GetSysClockFreq>
 8001520:	4b37      	ldr	r3, [pc, #220]	; (8001600 <HAL_RCC_ClockConfig+0x130>)
 8001522:	4a38      	ldr	r2, [pc, #224]	; (8001604 <HAL_RCC_ClockConfig+0x134>)
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800152a:	5cd3      	ldrb	r3, [r2, r3]
 800152c:	40d8      	lsrs	r0, r3
 800152e:	4b36      	ldr	r3, [pc, #216]	; (8001608 <HAL_RCC_ClockConfig+0x138>)
 8001530:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8001532:	4b36      	ldr	r3, [pc, #216]	; (800160c <HAL_RCC_ClockConfig+0x13c>)
 8001534:	6818      	ldr	r0, [r3, #0]
 8001536:	f00a fcfd 	bl	800bf34 <HAL_InitTick>
  return HAL_OK;
 800153a:	2000      	movs	r0, #0
 800153c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001540:	6813      	ldr	r3, [r2, #0]
 8001542:	f023 030f 	bic.w	r3, r3, #15
 8001546:	430b      	orrs	r3, r1
 8001548:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800154a:	6813      	ldr	r3, [r2, #0]
 800154c:	f003 030f 	and.w	r3, r3, #15
 8001550:	4299      	cmp	r1, r3
 8001552:	d1c2      	bne.n	80014da <HAL_RCC_ClockConfig+0xa>
 8001554:	e7ca      	b.n	80014ec <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001556:	f011 0f04 	tst.w	r1, #4
 800155a:	4b29      	ldr	r3, [pc, #164]	; (8001600 <HAL_RCC_ClockConfig+0x130>)
 800155c:	d003      	beq.n	8001566 <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800155e:	689a      	ldr	r2, [r3, #8]
 8001560:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8001564:	609a      	str	r2, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001566:	070e      	lsls	r6, r1, #28
 8001568:	d503      	bpl.n	8001572 <HAL_RCC_ClockConfig+0xa2>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800156a:	689a      	ldr	r2, [r3, #8]
 800156c:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8001570:	609a      	str	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001572:	689a      	ldr	r2, [r3, #8]
 8001574:	68a0      	ldr	r0, [r4, #8]
 8001576:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800157a:	4302      	orrs	r2, r0
 800157c:	609a      	str	r2, [r3, #8]
 800157e:	e7b8      	b.n	80014f2 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001580:	6861      	ldr	r1, [r4, #4]
 8001582:	4b1f      	ldr	r3, [pc, #124]	; (8001600 <HAL_RCC_ClockConfig+0x130>)
 8001584:	2901      	cmp	r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001586:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001588:	d11c      	bne.n	80015c4 <HAL_RCC_ClockConfig+0xf4>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800158a:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800158e:	d0a4      	beq.n	80014da <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001590:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001592:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001596:	4e1a      	ldr	r6, [pc, #104]	; (8001600 <HAL_RCC_ClockConfig+0x130>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001598:	f022 0203 	bic.w	r2, r2, #3
 800159c:	430a      	orrs	r2, r1
 800159e:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80015a0:	f7ff f856 	bl	8000650 <HAL_GetTick>
 80015a4:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015a6:	68b3      	ldr	r3, [r6, #8]
 80015a8:	6862      	ldr	r2, [r4, #4]
 80015aa:	f003 030c 	and.w	r3, r3, #12
 80015ae:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80015b2:	d0a0      	beq.n	80014f6 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015b4:	f7ff f84c 	bl	8000650 <HAL_GetTick>
 80015b8:	1bc0      	subs	r0, r0, r7
 80015ba:	4540      	cmp	r0, r8
 80015bc:	d9f3      	bls.n	80015a6 <HAL_RCC_ClockConfig+0xd6>
        return HAL_TIMEOUT;
 80015be:	2003      	movs	r0, #3
}
 80015c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015c4:	2902      	cmp	r1, #2
 80015c6:	d102      	bne.n	80015ce <HAL_RCC_ClockConfig+0xfe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015c8:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80015cc:	e7df      	b.n	800158e <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015ce:	f012 0f02 	tst.w	r2, #2
 80015d2:	e7dc      	b.n	800158e <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015d4:	6813      	ldr	r3, [r2, #0]
 80015d6:	f023 030f 	bic.w	r3, r3, #15
 80015da:	432b      	orrs	r3, r5
 80015dc:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015de:	6813      	ldr	r3, [r2, #0]
 80015e0:	f003 030f 	and.w	r3, r3, #15
 80015e4:	429d      	cmp	r5, r3
 80015e6:	f47f af78 	bne.w	80014da <HAL_RCC_ClockConfig+0xa>
 80015ea:	e78a      	b.n	8001502 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015ec:	4904      	ldr	r1, [pc, #16]	; (8001600 <HAL_RCC_ClockConfig+0x130>)
 80015ee:	68e0      	ldr	r0, [r4, #12]
 80015f0:	688b      	ldr	r3, [r1, #8]
 80015f2:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80015f6:	4303      	orrs	r3, r0
 80015f8:	608b      	str	r3, [r1, #8]
 80015fa:	e785      	b.n	8001508 <HAL_RCC_ClockConfig+0x38>
 80015fc:	40023c00 	.word	0x40023c00
 8001600:	40023800 	.word	0x40023800
 8001604:	080103a8 	.word	0x080103a8
 8001608:	20000014 	.word	0x20000014
 800160c:	20000004 	.word	0x20000004

08001610 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001610:	4b01      	ldr	r3, [pc, #4]	; (8001618 <HAL_RCC_GetHCLKFreq+0x8>)
 8001612:	6818      	ldr	r0, [r3, #0]
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	20000014 	.word	0x20000014

0800161c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800161c:	4b04      	ldr	r3, [pc, #16]	; (8001630 <HAL_RCC_GetPCLK1Freq+0x14>)
 800161e:	4a05      	ldr	r2, [pc, #20]	; (8001634 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001626:	5cd3      	ldrb	r3, [r2, r3]
 8001628:	4a03      	ldr	r2, [pc, #12]	; (8001638 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800162a:	6810      	ldr	r0, [r2, #0]
}
 800162c:	40d8      	lsrs	r0, r3
 800162e:	4770      	bx	lr
 8001630:	40023800 	.word	0x40023800
 8001634:	080103b8 	.word	0x080103b8
 8001638:	20000014 	.word	0x20000014

0800163c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800163c:	4b04      	ldr	r3, [pc, #16]	; (8001650 <HAL_RCC_GetPCLK2Freq+0x14>)
 800163e:	4a05      	ldr	r2, [pc, #20]	; (8001654 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001646:	5cd3      	ldrb	r3, [r2, r3]
 8001648:	4a03      	ldr	r2, [pc, #12]	; (8001658 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800164a:	6810      	ldr	r0, [r2, #0]
}
 800164c:	40d8      	lsrs	r0, r3
 800164e:	4770      	bx	lr
 8001650:	40023800 	.word	0x40023800
 8001654:	080103b8 	.word	0x080103b8
 8001658:	20000014 	.word	0x20000014

0800165c <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800165c:	230f      	movs	r3, #15
 800165e:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001660:	4b0b      	ldr	r3, [pc, #44]	; (8001690 <HAL_RCC_GetClockConfig+0x34>)
 8001662:	689a      	ldr	r2, [r3, #8]
 8001664:	f002 0203 	and.w	r2, r2, #3
 8001668:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800166a:	689a      	ldr	r2, [r3, #8]
 800166c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8001670:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001672:	689a      	ldr	r2, [r3, #8]
 8001674:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8001678:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	08db      	lsrs	r3, r3, #3
 800167e:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001682:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001684:	4b03      	ldr	r3, [pc, #12]	; (8001694 <HAL_RCC_GetClockConfig+0x38>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f003 030f 	and.w	r3, r3, #15
 800168c:	600b      	str	r3, [r1, #0]
 800168e:	4770      	bx	lr
 8001690:	40023800 	.word	0x40023800
 8001694:	40023c00 	.word	0x40023c00

08001698 <HAL_TIM_Base_MspInit>:
 8001698:	4770      	bx	lr
	...

0800169c <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800169c:	6803      	ldr	r3, [r0, #0]
 800169e:	68da      	ldr	r2, [r3, #12]
 80016a0:	f042 0201 	orr.w	r2, r2, #1
 80016a4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80016a6:	4a07      	ldr	r2, [pc, #28]	; (80016c4 <HAL_TIM_Base_Start_IT+0x28>)
 80016a8:	6899      	ldr	r1, [r3, #8]
 80016aa:	400a      	ands	r2, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80016ac:	2a06      	cmp	r2, #6
 80016ae:	d006      	beq.n	80016be <HAL_TIM_Base_Start_IT+0x22>
 80016b0:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80016b4:	d003      	beq.n	80016be <HAL_TIM_Base_Start_IT+0x22>
  {
    __HAL_TIM_ENABLE(htim);
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	f042 0201 	orr.w	r2, r2, #1
 80016bc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 80016be:	2000      	movs	r0, #0
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	00010007 	.word	0x00010007

080016c8 <HAL_TIM_OC_DelayElapsedCallback>:
 80016c8:	4770      	bx	lr

080016ca <HAL_TIM_IC_CaptureCallback>:
 80016ca:	4770      	bx	lr

080016cc <HAL_TIM_PWM_PulseFinishedCallback>:
 80016cc:	4770      	bx	lr

080016ce <HAL_TIM_TriggerCallback>:
 80016ce:	4770      	bx	lr

080016d0 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80016d0:	6803      	ldr	r3, [r0, #0]
 80016d2:	691a      	ldr	r2, [r3, #16]
 80016d4:	0791      	lsls	r1, r2, #30
{
 80016d6:	b510      	push	{r4, lr}
 80016d8:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80016da:	d50f      	bpl.n	80016fc <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80016dc:	68da      	ldr	r2, [r3, #12]
 80016de:	0792      	lsls	r2, r2, #30
 80016e0:	d50c      	bpl.n	80016fc <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80016e2:	f06f 0202 	mvn.w	r2, #2
 80016e6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80016e8:	2201      	movs	r2, #1

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80016ea:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80016ec:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80016ee:	0799      	lsls	r1, r3, #30
 80016f0:	f000 8085 	beq.w	80017fe <HAL_TIM_IRQHandler+0x12e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80016f4:	f7ff ffe9 	bl	80016ca <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016f8:	2300      	movs	r3, #0
 80016fa:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80016fc:	6823      	ldr	r3, [r4, #0]
 80016fe:	691a      	ldr	r2, [r3, #16]
 8001700:	0752      	lsls	r2, r2, #29
 8001702:	d510      	bpl.n	8001726 <HAL_TIM_IRQHandler+0x56>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001704:	68da      	ldr	r2, [r3, #12]
 8001706:	0750      	lsls	r0, r2, #29
 8001708:	d50d      	bpl.n	8001726 <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800170a:	f06f 0204 	mvn.w	r2, #4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800170e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001710:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001712:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001714:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001716:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001718:	f413 7f40 	tst.w	r3, #768	; 0x300
 800171c:	d075      	beq.n	800180a <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 800171e:	f7ff ffd4 	bl	80016ca <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001722:	2300      	movs	r3, #0
 8001724:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001726:	6823      	ldr	r3, [r4, #0]
 8001728:	691a      	ldr	r2, [r3, #16]
 800172a:	0711      	lsls	r1, r2, #28
 800172c:	d50f      	bpl.n	800174e <HAL_TIM_IRQHandler+0x7e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800172e:	68da      	ldr	r2, [r3, #12]
 8001730:	0712      	lsls	r2, r2, #28
 8001732:	d50c      	bpl.n	800174e <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001734:	f06f 0208 	mvn.w	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001738:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800173a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800173c:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800173e:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001740:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001742:	079b      	lsls	r3, r3, #30
 8001744:	d067      	beq.n	8001816 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8001746:	f7ff ffc0 	bl	80016ca <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800174a:	2300      	movs	r3, #0
 800174c:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800174e:	6823      	ldr	r3, [r4, #0]
 8001750:	691a      	ldr	r2, [r3, #16]
 8001752:	06d0      	lsls	r0, r2, #27
 8001754:	d510      	bpl.n	8001778 <HAL_TIM_IRQHandler+0xa8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001756:	68da      	ldr	r2, [r3, #12]
 8001758:	06d1      	lsls	r1, r2, #27
 800175a:	d50d      	bpl.n	8001778 <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800175c:	f06f 0210 	mvn.w	r2, #16
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001760:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001762:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001764:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001766:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001768:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800176a:	f413 7f40 	tst.w	r3, #768	; 0x300
 800176e:	d058      	beq.n	8001822 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8001770:	f7ff ffab 	bl	80016ca <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001774:	2300      	movs	r3, #0
 8001776:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001778:	6823      	ldr	r3, [r4, #0]
 800177a:	691a      	ldr	r2, [r3, #16]
 800177c:	07d2      	lsls	r2, r2, #31
 800177e:	d508      	bpl.n	8001792 <HAL_TIM_IRQHandler+0xc2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001780:	68da      	ldr	r2, [r3, #12]
 8001782:	07d0      	lsls	r0, r2, #31
 8001784:	d505      	bpl.n	8001792 <HAL_TIM_IRQHandler+0xc2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001786:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800178a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800178c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800178e:	f00a fb75 	bl	800be7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001792:	6823      	ldr	r3, [r4, #0]
 8001794:	691a      	ldr	r2, [r3, #16]
 8001796:	0611      	lsls	r1, r2, #24
 8001798:	d508      	bpl.n	80017ac <HAL_TIM_IRQHandler+0xdc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800179a:	68da      	ldr	r2, [r3, #12]
 800179c:	0612      	lsls	r2, r2, #24
 800179e:	d505      	bpl.n	80017ac <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80017a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80017a4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80017a6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80017a8:	f000 f8c3 	bl	8001932 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80017ac:	6823      	ldr	r3, [r4, #0]
 80017ae:	691a      	ldr	r2, [r3, #16]
 80017b0:	05d0      	lsls	r0, r2, #23
 80017b2:	d508      	bpl.n	80017c6 <HAL_TIM_IRQHandler+0xf6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80017b4:	68da      	ldr	r2, [r3, #12]
 80017b6:	0611      	lsls	r1, r2, #24
 80017b8:	d505      	bpl.n	80017c6 <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80017ba:	f46f 7280 	mvn.w	r2, #256	; 0x100
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80017be:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80017c0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80017c2:	f000 f8b7 	bl	8001934 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80017c6:	6823      	ldr	r3, [r4, #0]
 80017c8:	691a      	ldr	r2, [r3, #16]
 80017ca:	0652      	lsls	r2, r2, #25
 80017cc:	d508      	bpl.n	80017e0 <HAL_TIM_IRQHandler+0x110>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80017ce:	68da      	ldr	r2, [r3, #12]
 80017d0:	0650      	lsls	r0, r2, #25
 80017d2:	d505      	bpl.n	80017e0 <HAL_TIM_IRQHandler+0x110>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80017d4:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80017d8:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80017da:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80017dc:	f7ff ff77 	bl	80016ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80017e0:	6823      	ldr	r3, [r4, #0]
 80017e2:	691a      	ldr	r2, [r3, #16]
 80017e4:	0691      	lsls	r1, r2, #26
 80017e6:	d522      	bpl.n	800182e <HAL_TIM_IRQHandler+0x15e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80017e8:	68da      	ldr	r2, [r3, #12]
 80017ea:	0692      	lsls	r2, r2, #26
 80017ec:	d51f      	bpl.n	800182e <HAL_TIM_IRQHandler+0x15e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80017ee:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80017f2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80017f4:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80017f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 80017fa:	f000 b899 	b.w	8001930 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80017fe:	f7ff ff63 	bl	80016c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001802:	4620      	mov	r0, r4
 8001804:	f7ff ff62 	bl	80016cc <HAL_TIM_PWM_PulseFinishedCallback>
 8001808:	e776      	b.n	80016f8 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800180a:	f7ff ff5d 	bl	80016c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800180e:	4620      	mov	r0, r4
 8001810:	f7ff ff5c 	bl	80016cc <HAL_TIM_PWM_PulseFinishedCallback>
 8001814:	e785      	b.n	8001722 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001816:	f7ff ff57 	bl	80016c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800181a:	4620      	mov	r0, r4
 800181c:	f7ff ff56 	bl	80016cc <HAL_TIM_PWM_PulseFinishedCallback>
 8001820:	e793      	b.n	800174a <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001822:	f7ff ff51 	bl	80016c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001826:	4620      	mov	r0, r4
 8001828:	f7ff ff50 	bl	80016cc <HAL_TIM_PWM_PulseFinishedCallback>
 800182c:	e7a2      	b.n	8001774 <HAL_TIM_IRQHandler+0xa4>
 800182e:	bd10      	pop	{r4, pc}

08001830 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001830:	4a30      	ldr	r2, [pc, #192]	; (80018f4 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8001832:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001834:	4290      	cmp	r0, r2
 8001836:	d012      	beq.n	800185e <TIM_Base_SetConfig+0x2e>
 8001838:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800183c:	d00f      	beq.n	800185e <TIM_Base_SetConfig+0x2e>
 800183e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001842:	4290      	cmp	r0, r2
 8001844:	d00b      	beq.n	800185e <TIM_Base_SetConfig+0x2e>
 8001846:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800184a:	4290      	cmp	r0, r2
 800184c:	d007      	beq.n	800185e <TIM_Base_SetConfig+0x2e>
 800184e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001852:	4290      	cmp	r0, r2
 8001854:	d003      	beq.n	800185e <TIM_Base_SetConfig+0x2e>
 8001856:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800185a:	4290      	cmp	r0, r2
 800185c:	d119      	bne.n	8001892 <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800185e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001860:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001864:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001866:	4a23      	ldr	r2, [pc, #140]	; (80018f4 <TIM_Base_SetConfig+0xc4>)
 8001868:	4290      	cmp	r0, r2
 800186a:	d029      	beq.n	80018c0 <TIM_Base_SetConfig+0x90>
 800186c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001870:	d026      	beq.n	80018c0 <TIM_Base_SetConfig+0x90>
 8001872:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001876:	4290      	cmp	r0, r2
 8001878:	d022      	beq.n	80018c0 <TIM_Base_SetConfig+0x90>
 800187a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800187e:	4290      	cmp	r0, r2
 8001880:	d01e      	beq.n	80018c0 <TIM_Base_SetConfig+0x90>
 8001882:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001886:	4290      	cmp	r0, r2
 8001888:	d01a      	beq.n	80018c0 <TIM_Base_SetConfig+0x90>
 800188a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800188e:	4290      	cmp	r0, r2
 8001890:	d016      	beq.n	80018c0 <TIM_Base_SetConfig+0x90>
 8001892:	4a19      	ldr	r2, [pc, #100]	; (80018f8 <TIM_Base_SetConfig+0xc8>)
 8001894:	4290      	cmp	r0, r2
 8001896:	d013      	beq.n	80018c0 <TIM_Base_SetConfig+0x90>
 8001898:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800189c:	4290      	cmp	r0, r2
 800189e:	d00f      	beq.n	80018c0 <TIM_Base_SetConfig+0x90>
 80018a0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80018a4:	4290      	cmp	r0, r2
 80018a6:	d00b      	beq.n	80018c0 <TIM_Base_SetConfig+0x90>
 80018a8:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80018ac:	4290      	cmp	r0, r2
 80018ae:	d007      	beq.n	80018c0 <TIM_Base_SetConfig+0x90>
 80018b0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80018b4:	4290      	cmp	r0, r2
 80018b6:	d003      	beq.n	80018c0 <TIM_Base_SetConfig+0x90>
 80018b8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80018bc:	4290      	cmp	r0, r2
 80018be:	d103      	bne.n	80018c8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80018c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80018c4:	68ca      	ldr	r2, [r1, #12]
 80018c6:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80018c8:	694a      	ldr	r2, [r1, #20]
 80018ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80018ce:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80018d0:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80018d2:	688b      	ldr	r3, [r1, #8]
 80018d4:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80018d6:	680b      	ldr	r3, [r1, #0]
 80018d8:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80018da:	4b06      	ldr	r3, [pc, #24]	; (80018f4 <TIM_Base_SetConfig+0xc4>)
 80018dc:	4298      	cmp	r0, r3
 80018de:	d003      	beq.n	80018e8 <TIM_Base_SetConfig+0xb8>
 80018e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80018e4:	4298      	cmp	r0, r3
 80018e6:	d101      	bne.n	80018ec <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80018e8:	690b      	ldr	r3, [r1, #16]
 80018ea:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80018ec:	2301      	movs	r3, #1
 80018ee:	6143      	str	r3, [r0, #20]
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	40010000 	.word	0x40010000
 80018f8:	40014000 	.word	0x40014000

080018fc <HAL_TIM_Base_Init>:
{
 80018fc:	b510      	push	{r4, lr}
  if (htim == NULL)
 80018fe:	4604      	mov	r4, r0
 8001900:	b1a0      	cbz	r0, 800192c <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001902:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001906:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800190a:	b91b      	cbnz	r3, 8001914 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800190c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001910:	f7ff fec2 	bl	8001698 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001914:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001916:	6820      	ldr	r0, [r4, #0]
 8001918:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 800191a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800191e:	f7ff ff87 	bl	8001830 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8001922:	2301      	movs	r3, #1
  return HAL_OK;
 8001924:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001926:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800192a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800192c:	2001      	movs	r0, #1
}
 800192e:	bd10      	pop	{r4, pc}

08001930 <HAL_TIMEx_CommutCallback>:
 8001930:	4770      	bx	lr

08001932 <HAL_TIMEx_BreakCallback>:
 8001932:	4770      	bx	lr

08001934 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8001934:	4770      	bx	lr
	...

08001938 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001938:	b538      	push	{r3, r4, r5, lr}
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800193a:	69c2      	ldr	r2, [r0, #28]
{
 800193c:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800193e:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001940:	6881      	ldr	r1, [r0, #8]
 8001942:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001944:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001946:	4301      	orrs	r1, r0
 8001948:	6960      	ldr	r0, [r4, #20]
 800194a:	4301      	orrs	r1, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800194c:	4890      	ldr	r0, [pc, #576]	; (8001b90 <UART_SetConfig+0x258>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800194e:	4311      	orrs	r1, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001950:	4028      	ands	r0, r5
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  tmpreg |= huart->Init.OneBitSampling;
 8001952:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001954:	4301      	orrs	r1, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001956:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001958:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800195a:	6859      	ldr	r1, [r3, #4]
 800195c:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8001960:	4301      	orrs	r1, r0
 8001962:	6059      	str	r1, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001964:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001966:	6898      	ldr	r0, [r3, #8]
  tmpreg |= huart->Init.OneBitSampling;
 8001968:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800196a:	f420 6030 	bic.w	r0, r0, #2816	; 0xb00
 800196e:	4301      	orrs	r1, r0
 8001970:	6099      	str	r1, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001972:	4988      	ldr	r1, [pc, #544]	; (8001b94 <UART_SetConfig+0x25c>)
 8001974:	428b      	cmp	r3, r1
 8001976:	d117      	bne.n	80019a8 <UART_SetConfig+0x70>
 8001978:	4b87      	ldr	r3, [pc, #540]	; (8001b98 <UART_SetConfig+0x260>)
 800197a:	4988      	ldr	r1, [pc, #544]	; (8001b9c <UART_SetConfig+0x264>)
 800197c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001980:	f003 0303 	and.w	r3, r3, #3

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001984:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001988:	5ccb      	ldrb	r3, [r1, r3]
 800198a:	d129      	bne.n	80019e0 <UART_SetConfig+0xa8>
  {
    switch (clocksource)
 800198c:	2b08      	cmp	r3, #8
 800198e:	f200 809d 	bhi.w	8001acc <UART_SetConfig+0x194>
 8001992:	e8df f013 	tbh	[pc, r3, lsl #1]
 8001996:	008c      	.short	0x008c
 8001998:	00ee00e8 	.word	0x00ee00e8
 800199c:	00fa009b 	.word	0x00fa009b
 80019a0:	009b009b 	.word	0x009b009b
 80019a4:	0076009b 	.word	0x0076009b
  UART_GETCLOCKSOURCE(huart, clocksource);
 80019a8:	497d      	ldr	r1, [pc, #500]	; (8001ba0 <UART_SetConfig+0x268>)
 80019aa:	428b      	cmp	r3, r1
 80019ac:	d106      	bne.n	80019bc <UART_SetConfig+0x84>
 80019ae:	4b7a      	ldr	r3, [pc, #488]	; (8001b98 <UART_SetConfig+0x260>)
 80019b0:	497c      	ldr	r1, [pc, #496]	; (8001ba4 <UART_SetConfig+0x26c>)
 80019b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019b6:	f003 030c 	and.w	r3, r3, #12
 80019ba:	e7e3      	b.n	8001984 <UART_SetConfig+0x4c>
 80019bc:	497a      	ldr	r1, [pc, #488]	; (8001ba8 <UART_SetConfig+0x270>)
 80019be:	428b      	cmp	r3, r1
 80019c0:	d11d      	bne.n	80019fe <UART_SetConfig+0xc6>
 80019c2:	4b75      	ldr	r3, [pc, #468]	; (8001b98 <UART_SetConfig+0x260>)
 80019c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019c8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80019cc:	2b10      	cmp	r3, #16
 80019ce:	f000 80d9 	beq.w	8001b84 <UART_SetConfig+0x24c>
 80019d2:	d80e      	bhi.n	80019f2 <UART_SetConfig+0xba>
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d067      	beq.n	8001aa8 <UART_SetConfig+0x170>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80019d8:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80019dc:	d076      	beq.n	8001acc <UART_SetConfig+0x194>
 80019de:	2310      	movs	r3, #16
      ret = HAL_ERROR;
    }
  }
  else
  {
    switch (clocksource)
 80019e0:	2b08      	cmp	r3, #8
 80019e2:	d873      	bhi.n	8001acc <UART_SetConfig+0x194>
 80019e4:	e8df f003 	tbb	[pc, r3]
 80019e8:	72a29f99 	.word	0x72a29f99
 80019ec:	727272b4 	.word	0x727272b4
 80019f0:	b7          	.byte	0xb7
 80019f1:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 80019f2:	2b20      	cmp	r3, #32
 80019f4:	f000 80ba 	beq.w	8001b6c <UART_SetConfig+0x234>
 80019f8:	2b30      	cmp	r3, #48	; 0x30
 80019fa:	d03f      	beq.n	8001a7c <UART_SetConfig+0x144>
 80019fc:	e7ec      	b.n	80019d8 <UART_SetConfig+0xa0>
 80019fe:	496b      	ldr	r1, [pc, #428]	; (8001bac <UART_SetConfig+0x274>)
 8001a00:	428b      	cmp	r3, r1
 8001a02:	d10d      	bne.n	8001a20 <UART_SetConfig+0xe8>
 8001a04:	4b64      	ldr	r3, [pc, #400]	; (8001b98 <UART_SetConfig+0x260>)
 8001a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a0a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001a0e:	2b40      	cmp	r3, #64	; 0x40
 8001a10:	f000 80b8 	beq.w	8001b84 <UART_SetConfig+0x24c>
 8001a14:	d9de      	bls.n	80019d4 <UART_SetConfig+0x9c>
 8001a16:	2b80      	cmp	r3, #128	; 0x80
 8001a18:	f000 80a8 	beq.w	8001b6c <UART_SetConfig+0x234>
 8001a1c:	2bc0      	cmp	r3, #192	; 0xc0
 8001a1e:	e7ec      	b.n	80019fa <UART_SetConfig+0xc2>
 8001a20:	4963      	ldr	r1, [pc, #396]	; (8001bb0 <UART_SetConfig+0x278>)
 8001a22:	428b      	cmp	r3, r1
 8001a24:	d110      	bne.n	8001a48 <UART_SetConfig+0x110>
 8001a26:	4b5c      	ldr	r3, [pc, #368]	; (8001b98 <UART_SetConfig+0x260>)
 8001a28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a34:	f000 80a6 	beq.w	8001b84 <UART_SetConfig+0x24c>
 8001a38:	d9cc      	bls.n	80019d4 <UART_SetConfig+0x9c>
 8001a3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a3e:	f000 8095 	beq.w	8001b6c <UART_SetConfig+0x234>
 8001a42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001a46:	e7d8      	b.n	80019fa <UART_SetConfig+0xc2>
 8001a48:	495a      	ldr	r1, [pc, #360]	; (8001bb4 <UART_SetConfig+0x27c>)
 8001a4a:	428b      	cmp	r3, r1
 8001a4c:	d11e      	bne.n	8001a8c <UART_SetConfig+0x154>
 8001a4e:	4b52      	ldr	r3, [pc, #328]	; (8001b98 <UART_SetConfig+0x260>)
 8001a50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a54:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001a58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a5c:	f000 8092 	beq.w	8001b84 <UART_SetConfig+0x24c>
 8001a60:	d806      	bhi.n	8001a70 <UART_SetConfig+0x138>
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d07c      	beq.n	8001b60 <UART_SetConfig+0x228>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001a66:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001a6a:	d12f      	bne.n	8001acc <UART_SetConfig+0x194>
 8001a6c:	2310      	movs	r3, #16
 8001a6e:	e78d      	b.n	800198c <UART_SetConfig+0x54>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001a70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001a74:	d07a      	beq.n	8001b6c <UART_SetConfig+0x234>
 8001a76:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8001a7a:	d1f4      	bne.n	8001a66 <UART_SetConfig+0x12e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001a7c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001a80:	d169      	bne.n	8001b56 <UART_SetConfig+0x21e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001a82:	6863      	ldr	r3, [r4, #4]
 8001a84:	0858      	lsrs	r0, r3, #1
 8001a86:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 8001a8a:	e078      	b.n	8001b7e <UART_SetConfig+0x246>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001a8c:	494a      	ldr	r1, [pc, #296]	; (8001bb8 <UART_SetConfig+0x280>)
 8001a8e:	428b      	cmp	r3, r1
 8001a90:	d124      	bne.n	8001adc <UART_SetConfig+0x1a4>
 8001a92:	4b41      	ldr	r3, [pc, #260]	; (8001b98 <UART_SetConfig+0x260>)
 8001a94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a98:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001a9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001aa0:	d070      	beq.n	8001b84 <UART_SetConfig+0x24c>
 8001aa2:	d815      	bhi.n	8001ad0 <UART_SetConfig+0x198>
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d1de      	bne.n	8001a66 <UART_SetConfig+0x12e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001aa8:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001aac:	d135      	bne.n	8001b1a <UART_SetConfig+0x1e2>
        pclk = HAL_RCC_GetPCLK1Freq();
 8001aae:	f7ff fdb5 	bl	800161c <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001ab2:	6862      	ldr	r2, [r4, #4]
 8001ab4:	0853      	lsrs	r3, r2, #1
 8001ab6:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8001aba:	fbb0 f0f2 	udiv	r0, r0, r2
 8001abe:	b280      	uxth	r0, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001ac0:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8001ac4:	f1a0 0210 	sub.w	r2, r0, #16
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d91a      	bls.n	8001b02 <UART_SetConfig+0x1ca>
    {
      huart->Instance->BRR = usartdiv;
    }
    else
    {
      ret = HAL_ERROR;
 8001acc:	2001      	movs	r0, #1
 8001ace:	e020      	b.n	8001b12 <UART_SetConfig+0x1da>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001ad0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ad4:	d04a      	beq.n	8001b6c <UART_SetConfig+0x234>
 8001ad6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001ada:	e7ce      	b.n	8001a7a <UART_SetConfig+0x142>
 8001adc:	4937      	ldr	r1, [pc, #220]	; (8001bbc <UART_SetConfig+0x284>)
 8001ade:	428b      	cmp	r3, r1
 8001ae0:	d1f4      	bne.n	8001acc <UART_SetConfig+0x194>
 8001ae2:	4b2d      	ldr	r3, [pc, #180]	; (8001b98 <UART_SetConfig+0x260>)
 8001ae4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ae8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001aec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001af0:	d048      	beq.n	8001b84 <UART_SetConfig+0x24c>
 8001af2:	f67f af6f 	bls.w	80019d4 <UART_SetConfig+0x9c>
 8001af6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001afa:	d037      	beq.n	8001b6c <UART_SetConfig+0x234>
 8001afc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001b00:	e77b      	b.n	80019fa <UART_SetConfig+0xc2>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001b02:	f020 030f 	bic.w	r3, r0, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001b06:	f3c0 0042 	ubfx	r0, r0, #1, #3
      huart->Instance->BRR = brrtemp;
 8001b0a:	6822      	ldr	r2, [r4, #0]
 8001b0c:	4318      	orrs	r0, r3
 8001b0e:	60d0      	str	r0, [r2, #12]
 8001b10:	2000      	movs	r0, #0
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001b12:	2300      	movs	r3, #0
 8001b14:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8001b16:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 8001b18:	bd38      	pop	{r3, r4, r5, pc}
        pclk = HAL_RCC_GetPCLK1Freq();
 8001b1a:	f7ff fd7f 	bl	800161c <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001b1e:	6863      	ldr	r3, [r4, #4]
 8001b20:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8001b24:	e008      	b.n	8001b38 <UART_SetConfig+0x200>
        pclk = HAL_RCC_GetPCLK2Freq();
 8001b26:	f7ff fd89 	bl	800163c <HAL_RCC_GetPCLK2Freq>
 8001b2a:	e7f8      	b.n	8001b1e <UART_SetConfig+0x1e6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001b2c:	6863      	ldr	r3, [r4, #4]
 8001b2e:	0858      	lsrs	r0, r3, #1
 8001b30:	f500 0074 	add.w	r0, r0, #15990784	; 0xf40000
 8001b34:	f500 5010 	add.w	r0, r0, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001b38:	fbb0 f0f3 	udiv	r0, r0, r3
 8001b3c:	b280      	uxth	r0, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001b3e:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8001b42:	f1a0 0210 	sub.w	r2, r0, #16
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d8c0      	bhi.n	8001acc <UART_SetConfig+0x194>
      huart->Instance->BRR = usartdiv;
 8001b4a:	6823      	ldr	r3, [r4, #0]
 8001b4c:	60d8      	str	r0, [r3, #12]
 8001b4e:	e7df      	b.n	8001b10 <UART_SetConfig+0x1d8>
        pclk = HAL_RCC_GetSysClockFreq();
 8001b50:	f7ff fc90 	bl	8001474 <HAL_RCC_GetSysClockFreq>
 8001b54:	e7e3      	b.n	8001b1e <UART_SetConfig+0x1e6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001b56:	6863      	ldr	r3, [r4, #4]
 8001b58:	0858      	lsrs	r0, r3, #1
 8001b5a:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
 8001b5e:	e7eb      	b.n	8001b38 <UART_SetConfig+0x200>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001b60:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001b64:	d1df      	bne.n	8001b26 <UART_SetConfig+0x1ee>
        pclk = HAL_RCC_GetPCLK2Freq();
 8001b66:	f7ff fd69 	bl	800163c <HAL_RCC_GetPCLK2Freq>
 8001b6a:	e7a2      	b.n	8001ab2 <UART_SetConfig+0x17a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001b6c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001b70:	d1dc      	bne.n	8001b2c <UART_SetConfig+0x1f4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001b72:	6863      	ldr	r3, [r4, #4]
 8001b74:	0858      	lsrs	r0, r3, #1
 8001b76:	f100 70f4 	add.w	r0, r0, #31981568	; 0x1e80000
 8001b7a:	f500 4090 	add.w	r0, r0, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001b7e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001b82:	e79c      	b.n	8001abe <UART_SetConfig+0x186>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001b84:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001b88:	d1e2      	bne.n	8001b50 <UART_SetConfig+0x218>
        pclk = HAL_RCC_GetSysClockFreq();
 8001b8a:	f7ff fc73 	bl	8001474 <HAL_RCC_GetSysClockFreq>
 8001b8e:	e790      	b.n	8001ab2 <UART_SetConfig+0x17a>
 8001b90:	efff69f3 	.word	0xefff69f3
 8001b94:	40011000 	.word	0x40011000
 8001b98:	40023800 	.word	0x40023800
 8001b9c:	0800d048 	.word	0x0800d048
 8001ba0:	40004400 	.word	0x40004400
 8001ba4:	0800d04c 	.word	0x0800d04c
 8001ba8:	40004800 	.word	0x40004800
 8001bac:	40004c00 	.word	0x40004c00
 8001bb0:	40005000 	.word	0x40005000
 8001bb4:	40011400 	.word	0x40011400
 8001bb8:	40007800 	.word	0x40007800
 8001bbc:	40007c00 	.word	0x40007c00

08001bc0 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001bc0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001bc2:	07da      	lsls	r2, r3, #31
{
 8001bc4:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001bc6:	d506      	bpl.n	8001bd6 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001bc8:	6801      	ldr	r1, [r0, #0]
 8001bca:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001bcc:	684a      	ldr	r2, [r1, #4]
 8001bce:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001bd2:	4322      	orrs	r2, r4
 8001bd4:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001bd6:	079c      	lsls	r4, r3, #30
 8001bd8:	d506      	bpl.n	8001be8 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001bda:	6801      	ldr	r1, [r0, #0]
 8001bdc:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001bde:	684a      	ldr	r2, [r1, #4]
 8001be0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001be4:	4322      	orrs	r2, r4
 8001be6:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001be8:	0759      	lsls	r1, r3, #29
 8001bea:	d506      	bpl.n	8001bfa <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001bec:	6801      	ldr	r1, [r0, #0]
 8001bee:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001bf0:	684a      	ldr	r2, [r1, #4]
 8001bf2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001bf6:	4322      	orrs	r2, r4
 8001bf8:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001bfa:	071a      	lsls	r2, r3, #28
 8001bfc:	d506      	bpl.n	8001c0c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001bfe:	6801      	ldr	r1, [r0, #0]
 8001c00:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001c02:	684a      	ldr	r2, [r1, #4]
 8001c04:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c08:	4322      	orrs	r2, r4
 8001c0a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001c0c:	06dc      	lsls	r4, r3, #27
 8001c0e:	d506      	bpl.n	8001c1e <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001c10:	6801      	ldr	r1, [r0, #0]
 8001c12:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001c14:	688a      	ldr	r2, [r1, #8]
 8001c16:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001c1a:	4322      	orrs	r2, r4
 8001c1c:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001c1e:	0699      	lsls	r1, r3, #26
 8001c20:	d506      	bpl.n	8001c30 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001c22:	6801      	ldr	r1, [r0, #0]
 8001c24:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001c26:	688a      	ldr	r2, [r1, #8]
 8001c28:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c2c:	4322      	orrs	r2, r4
 8001c2e:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001c30:	065a      	lsls	r2, r3, #25
 8001c32:	d510      	bpl.n	8001c56 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001c34:	6801      	ldr	r1, [r0, #0]
 8001c36:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001c38:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001c3a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001c3e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8001c42:	ea42 0204 	orr.w	r2, r2, r4
 8001c46:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001c48:	d105      	bne.n	8001c56 <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001c4a:	684a      	ldr	r2, [r1, #4]
 8001c4c:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001c4e:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8001c52:	4322      	orrs	r2, r4
 8001c54:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001c56:	061b      	lsls	r3, r3, #24
 8001c58:	d506      	bpl.n	8001c68 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001c5a:	6802      	ldr	r2, [r0, #0]
 8001c5c:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001c5e:	6853      	ldr	r3, [r2, #4]
 8001c60:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001c64:	430b      	orrs	r3, r1
 8001c66:	6053      	str	r3, [r2, #4]
 8001c68:	bd10      	pop	{r4, pc}

08001c6a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8001c6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c6e:	9d06      	ldr	r5, [sp, #24]
 8001c70:	4604      	mov	r4, r0
 8001c72:	460f      	mov	r7, r1
 8001c74:	4616      	mov	r6, r2
 8001c76:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c78:	6821      	ldr	r1, [r4, #0]
 8001c7a:	69ca      	ldr	r2, [r1, #28]
 8001c7c:	ea37 0302 	bics.w	r3, r7, r2
 8001c80:	bf0c      	ite	eq
 8001c82:	2201      	moveq	r2, #1
 8001c84:	2200      	movne	r2, #0
 8001c86:	42b2      	cmp	r2, r6
 8001c88:	d002      	beq.n	8001c90 <UART_WaitOnFlagUntilTimeout+0x26>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8001c8a:	2000      	movs	r0, #0
}
 8001c8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001c90:	1c68      	adds	r0, r5, #1
 8001c92:	d0f2      	beq.n	8001c7a <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c94:	f7fe fcdc 	bl	8000650 <HAL_GetTick>
 8001c98:	eba0 0008 	sub.w	r0, r0, r8
 8001c9c:	4285      	cmp	r5, r0
 8001c9e:	6820      	ldr	r0, [r4, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001ca0:	6803      	ldr	r3, [r0, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ca2:	d300      	bcc.n	8001ca6 <UART_WaitOnFlagUntilTimeout+0x3c>
 8001ca4:	b97d      	cbnz	r5, 8001cc6 <UART_WaitOnFlagUntilTimeout+0x5c>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001ca6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001caa:	6003      	str	r3, [r0, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001cac:	6883      	ldr	r3, [r0, #8]
 8001cae:	f023 0301 	bic.w	r3, r3, #1
 8001cb2:	6083      	str	r3, [r0, #8]
        huart->gState = HAL_UART_STATE_READY;
 8001cb4:	2320      	movs	r3, #32
 8001cb6:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8001cb8:	67a3      	str	r3, [r4, #120]	; 0x78
          __HAL_UNLOCK(huart);
 8001cba:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 8001cbc:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 8001cbe:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
          return HAL_TIMEOUT;
 8001cc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8001cc6:	075a      	lsls	r2, r3, #29
 8001cc8:	d5d6      	bpl.n	8001c78 <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001cca:	69c3      	ldr	r3, [r0, #28]
 8001ccc:	051b      	lsls	r3, r3, #20
 8001cce:	d5d3      	bpl.n	8001c78 <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001cd0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001cd4:	6203      	str	r3, [r0, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001cd6:	6803      	ldr	r3, [r0, #0]
 8001cd8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001cdc:	6003      	str	r3, [r0, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001cde:	6883      	ldr	r3, [r0, #8]
 8001ce0:	f023 0301 	bic.w	r3, r3, #1
 8001ce4:	6083      	str	r3, [r0, #8]
          huart->gState = HAL_UART_STATE_READY;
 8001ce6:	2320      	movs	r3, #32
 8001ce8:	6763      	str	r3, [r4, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8001cea:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8001cec:	67e3      	str	r3, [r4, #124]	; 0x7c
 8001cee:	e7e4      	b.n	8001cba <UART_WaitOnFlagUntilTimeout+0x50>

08001cf0 <UART_CheckIdleState>:
{
 8001cf0:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cf2:	2600      	movs	r6, #0
{
 8001cf4:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cf6:	67c6      	str	r6, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8001cf8:	f7fe fcaa 	bl	8000650 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001cfc:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8001cfe:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	071a      	lsls	r2, r3, #28
 8001d04:	d415      	bmi.n	8001d32 <UART_CheckIdleState+0x42>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001d06:	6823      	ldr	r3, [r4, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	075b      	lsls	r3, r3, #29
 8001d0c:	d50a      	bpl.n	8001d24 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001d0e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001d12:	2200      	movs	r2, #0
 8001d14:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8001d18:	4620      	mov	r0, r4
 8001d1a:	9300      	str	r3, [sp, #0]
 8001d1c:	462b      	mov	r3, r5
 8001d1e:	f7ff ffa4 	bl	8001c6a <UART_WaitOnFlagUntilTimeout>
 8001d22:	b990      	cbnz	r0, 8001d4a <UART_CheckIdleState+0x5a>
  huart->gState = HAL_UART_STATE_READY;
 8001d24:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8001d26:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8001d28:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UNLOCK(huart);
 8001d2a:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 8001d2e:	67a3      	str	r3, [r4, #120]	; 0x78
  return HAL_OK;
 8001d30:	e00c      	b.n	8001d4c <UART_CheckIdleState+0x5c>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001d32:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001d36:	4632      	mov	r2, r6
 8001d38:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001d3c:	9300      	str	r3, [sp, #0]
 8001d3e:	4603      	mov	r3, r0
 8001d40:	4620      	mov	r0, r4
 8001d42:	f7ff ff92 	bl	8001c6a <UART_WaitOnFlagUntilTimeout>
 8001d46:	2800      	cmp	r0, #0
 8001d48:	d0dd      	beq.n	8001d06 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8001d4a:	2003      	movs	r0, #3
}
 8001d4c:	b002      	add	sp, #8
 8001d4e:	bd70      	pop	{r4, r5, r6, pc}

08001d50 <HAL_UART_Init>:
{
 8001d50:	b510      	push	{r4, lr}
  if (huart == NULL)
 8001d52:	4604      	mov	r4, r0
 8001d54:	b340      	cbz	r0, 8001da8 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8001d56:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8001d58:	b91b      	cbnz	r3, 8001d62 <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 8001d5a:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8001d5e:	f00a f8b5 	bl	800becc <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001d62:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001d64:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001d66:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 8001d68:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8001d6a:	6813      	ldr	r3, [r2, #0]
 8001d6c:	f023 0301 	bic.w	r3, r3, #1
 8001d70:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001d72:	f7ff fde1 	bl	8001938 <UART_SetConfig>
 8001d76:	2801      	cmp	r0, #1
 8001d78:	d016      	beq.n	8001da8 <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001d7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001d7c:	b113      	cbz	r3, 8001d84 <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 8001d7e:	4620      	mov	r0, r4
 8001d80:	f7ff ff1e 	bl	8001bc0 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d84:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8001d86:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d88:	685a      	ldr	r2, [r3, #4]
 8001d8a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001d8e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d90:	689a      	ldr	r2, [r3, #8]
 8001d92:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001d96:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	f042 0201 	orr.w	r2, r2, #1
}
 8001d9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 8001da2:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8001da4:	f7ff bfa4 	b.w	8001cf0 <UART_CheckIdleState>
}
 8001da8:	2001      	movs	r0, #1
 8001daa:	bd10      	pop	{r4, pc}

08001dac <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001dac:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8001dae:	f001 fb1f 	bl	80033f0 <vTaskStartScheduler>
  
  return osOK;
}
 8001db2:	2000      	movs	r0, #0
 8001db4:	bd08      	pop	{r3, pc}

08001db6 <osKernelSysTick>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001db6:	f3ef 8305 	mrs	r3, IPSR
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
  if (inHandlerMode()) {
 8001dba:	b10b      	cbz	r3, 8001dc0 <osKernelSysTick+0xa>
    return xTaskGetTickCountFromISR();
 8001dbc:	f001 bb5e 	b.w	800347c <xTaskGetTickCountFromISR>
  }
  else {
    return xTaskGetTickCount();
 8001dc0:	f001 bb56 	b.w	8003470 <xTaskGetTickCount>

08001dc4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001dc4:	b570      	push	{r4, r5, r6, lr}
 8001dc6:	4605      	mov	r5, r0
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8001dc8:	6946      	ldr	r6, [r0, #20]
{
 8001dca:	460b      	mov	r3, r1
 8001dcc:	b086      	sub	sp, #24
 8001dce:	6840      	ldr	r0, [r0, #4]
 8001dd0:	6829      	ldr	r1, [r5, #0]
 8001dd2:	692a      	ldr	r2, [r5, #16]
 8001dd4:	f9b5 4008 	ldrsh.w	r4, [r5, #8]
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8001dd8:	b176      	cbz	r6, 8001df8 <osThreadCreate+0x34>
 8001dda:	69ad      	ldr	r5, [r5, #24]
 8001ddc:	b165      	cbz	r5, 8001df8 <osThreadCreate+0x34>
  if (priority != osPriorityError) {
 8001dde:	2c84      	cmp	r4, #132	; 0x84
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001de0:	9502      	str	r5, [sp, #8]
    fpriority += (priority - osPriorityIdle);
 8001de2:	bf14      	ite	ne
 8001de4:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001de6:	2400      	moveq	r4, #0
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001de8:	e88d 0050 	stmia.w	sp, {r4, r6}
 8001dec:	f001 fa31 	bl	8003252 <xTaskCreateStatic>
 8001df0:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001df2:	9805      	ldr	r0, [sp, #20]
}
 8001df4:	b006      	add	sp, #24
 8001df6:	bd70      	pop	{r4, r5, r6, pc}
  if (priority != osPriorityError) {
 8001df8:	2c84      	cmp	r4, #132	; 0x84
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001dfa:	ad05      	add	r5, sp, #20
 8001dfc:	b292      	uxth	r2, r2
    fpriority += (priority - osPriorityIdle);
 8001dfe:	bf14      	ite	ne
 8001e00:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001e02:	2400      	moveq	r4, #0
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001e04:	e88d 0030 	stmia.w	sp, {r4, r5}
 8001e08:	f001 fa58 	bl	80032bc <xTaskCreate>
 8001e0c:	2801      	cmp	r0, #1
 8001e0e:	d0f0      	beq.n	8001df2 <osThreadCreate+0x2e>
      return NULL;
 8001e10:	2000      	movs	r0, #0
 8001e12:	e7ef      	b.n	8001df4 <osThreadCreate+0x30>

08001e14 <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 8001e14:	b508      	push	{r3, lr}
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 8001e16:	f001 fa7f 	bl	8003318 <vTaskDelete>
  return osOK;
#else
  return osErrorOS;
#endif
}
 8001e1a:	2000      	movs	r0, #0
 8001e1c:	bd08      	pop	{r3, pc}

08001e1e <osMutexCreate>:
{
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8001e1e:	6841      	ldr	r1, [r0, #4]
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8001e20:	2001      	movs	r0, #1
  if (mutex_def->controlblock != NULL) {
 8001e22:	b109      	cbz	r1, 8001e28 <osMutexCreate+0xa>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8001e24:	f000 be05 	b.w	8002a32 <xQueueCreateMutexStatic>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8001e28:	f000 bdf8 	b.w	8002a1c <xQueueCreateMutex>

08001e2c <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8001e2c:	b513      	push	{r0, r1, r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8001e2e:	2400      	movs	r4, #0
 8001e30:	9401      	str	r4, [sp, #4]
  
  
  if (mutex_id == NULL) {
 8001e32:	b1e0      	cbz	r0, 8001e6e <osMutexWait+0x42>
 8001e34:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8001e38:	b1a3      	cbz	r3, 8001e64 <osMutexWait+0x38>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8001e3a:	aa01      	add	r2, sp, #4
 8001e3c:	4621      	mov	r1, r4
 8001e3e:	f001 f83f 	bl	8002ec0 <xQueueReceiveFromISR>
 8001e42:	2801      	cmp	r0, #1
 8001e44:	d002      	beq.n	8001e4c <osMutexWait+0x20>
      return osErrorOS;
 8001e46:	20ff      	movs	r0, #255	; 0xff
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
}
 8001e48:	b002      	add	sp, #8
 8001e4a:	bd10      	pop	{r4, pc}
	portEND_SWITCHING_ISR(taskWoken);
 8001e4c:	9b01      	ldr	r3, [sp, #4]
 8001e4e:	b13b      	cbz	r3, 8001e60 <osMutexWait+0x34>
 8001e50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e54:	4b07      	ldr	r3, [pc, #28]	; (8001e74 <osMutexWait+0x48>)
 8001e56:	601a      	str	r2, [r3, #0]
 8001e58:	f3bf 8f4f 	dsb	sy
 8001e5c:	f3bf 8f6f 	isb	sy
  return osOK;
 8001e60:	2000      	movs	r0, #0
 8001e62:	e7f1      	b.n	8001e48 <osMutexWait+0x1c>
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8001e64:	f000 ff64 	bl	8002d30 <xQueueSemaphoreTake>
 8001e68:	2801      	cmp	r0, #1
 8001e6a:	d1ec      	bne.n	8001e46 <osMutexWait+0x1a>
 8001e6c:	e7f8      	b.n	8001e60 <osMutexWait+0x34>
    return osErrorParameter;
 8001e6e:	2080      	movs	r0, #128	; 0x80
 8001e70:	e7ea      	b.n	8001e48 <osMutexWait+0x1c>
 8001e72:	bf00      	nop
 8001e74:	e000ed04 	.word	0xe000ed04

08001e78 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8001e78:	b537      	push	{r0, r1, r2, r4, r5, lr}
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8001e7a:	6844      	ldr	r4, [r0, #4]
{ 
 8001e7c:	460d      	mov	r5, r1
  if (semaphore_def->controlblock != NULL){
 8001e7e:	b16c      	cbz	r4, 8001e9c <osSemaphoreCreate+0x24>
    if (count == 1) {
 8001e80:	2901      	cmp	r1, #1
 8001e82:	d11b      	bne.n	8001ebc <osSemaphoreCreate+0x44>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8001e84:	2303      	movs	r3, #3
 8001e86:	2200      	movs	r2, #0
 8001e88:	4628      	mov	r0, r5
 8001e8a:	9300      	str	r3, [sp, #0]
 8001e8c:	4611      	mov	r1, r2
 8001e8e:	4623      	mov	r3, r4
 8001e90:	f000 fc82 	bl	8002798 <xQueueGenericCreateStatic>
 8001e94:	4605      	mov	r5, r0
#else
    return NULL;
#endif
  }
#endif
}
 8001e96:	4628      	mov	r0, r5
 8001e98:	b003      	add	sp, #12
 8001e9a:	bd30      	pop	{r4, r5, pc}
    if (count == 1) {
 8001e9c:	2901      	cmp	r1, #1
 8001e9e:	d10f      	bne.n	8001ec0 <osSemaphoreCreate+0x48>
      vSemaphoreCreateBinary(sema);
 8001ea0:	4628      	mov	r0, r5
 8001ea2:	2203      	movs	r2, #3
 8001ea4:	4621      	mov	r1, r4
 8001ea6:	f000 fccb 	bl	8002840 <xQueueGenericCreate>
 8001eaa:	4605      	mov	r5, r0
 8001eac:	2800      	cmp	r0, #0
 8001eae:	d0f2      	beq.n	8001e96 <osSemaphoreCreate+0x1e>
 8001eb0:	4623      	mov	r3, r4
 8001eb2:	4622      	mov	r2, r4
 8001eb4:	4621      	mov	r1, r4
 8001eb6:	f000 fce9 	bl	800288c <xQueueGenericSend>
 8001eba:	e7ec      	b.n	8001e96 <osSemaphoreCreate+0x1e>
      return NULL;
 8001ebc:	2500      	movs	r5, #0
 8001ebe:	e7ea      	b.n	8001e96 <osSemaphoreCreate+0x1e>
 8001ec0:	4625      	mov	r5, r4
 8001ec2:	e7e8      	b.n	8001e96 <osSemaphoreCreate+0x1e>

08001ec4 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8001ec4:	b513      	push	{r0, r1, r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8001ec6:	2400      	movs	r4, #0
 8001ec8:	9401      	str	r4, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 8001eca:	b1e0      	cbz	r0, 8001f06 <osSemaphoreWait+0x42>
 8001ecc:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8001ed0:	b1a3      	cbz	r3, 8001efc <osSemaphoreWait+0x38>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8001ed2:	aa01      	add	r2, sp, #4
 8001ed4:	4621      	mov	r1, r4
 8001ed6:	f000 fff3 	bl	8002ec0 <xQueueReceiveFromISR>
 8001eda:	2801      	cmp	r0, #1
 8001edc:	d002      	beq.n	8001ee4 <osSemaphoreWait+0x20>
      return osErrorOS;
 8001ede:	20ff      	movs	r0, #255	; 0xff
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
}
 8001ee0:	b002      	add	sp, #8
 8001ee2:	bd10      	pop	{r4, pc}
	portEND_SWITCHING_ISR(taskWoken);
 8001ee4:	9b01      	ldr	r3, [sp, #4]
 8001ee6:	b13b      	cbz	r3, 8001ef8 <osSemaphoreWait+0x34>
 8001ee8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001eec:	4b07      	ldr	r3, [pc, #28]	; (8001f0c <osSemaphoreWait+0x48>)
 8001eee:	601a      	str	r2, [r3, #0]
 8001ef0:	f3bf 8f4f 	dsb	sy
 8001ef4:	f3bf 8f6f 	isb	sy
  return osOK;
 8001ef8:	2000      	movs	r0, #0
 8001efa:	e7f1      	b.n	8001ee0 <osSemaphoreWait+0x1c>
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8001efc:	f000 ff18 	bl	8002d30 <xQueueSemaphoreTake>
 8001f00:	2801      	cmp	r0, #1
 8001f02:	d1ec      	bne.n	8001ede <osSemaphoreWait+0x1a>
 8001f04:	e7f8      	b.n	8001ef8 <osSemaphoreWait+0x34>
    return osErrorParameter;
 8001f06:	2080      	movs	r0, #128	; 0x80
 8001f08:	e7ea      	b.n	8001ee0 <osSemaphoreWait+0x1c>
 8001f0a:	bf00      	nop
 8001f0c:	e000ed04 	.word	0xe000ed04

08001f10 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8001f10:	b513      	push	{r0, r1, r4, lr}
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 8001f12:	2400      	movs	r4, #0
 8001f14:	9401      	str	r4, [sp, #4]
 8001f16:	f3ef 8305 	mrs	r3, IPSR
  
  
  if (inHandlerMode()) {
 8001f1a:	b193      	cbz	r3, 8001f42 <osSemaphoreRelease+0x32>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8001f1c:	a901      	add	r1, sp, #4
 8001f1e:	f000 fe00 	bl	8002b22 <xQueueGiveFromISR>
 8001f22:	2801      	cmp	r0, #1
 8001f24:	d113      	bne.n	8001f4e <osSemaphoreRelease+0x3e>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 8001f26:	9b01      	ldr	r3, [sp, #4]
 8001f28:	b913      	cbnz	r3, 8001f30 <osSemaphoreRelease+0x20>
  osStatus result = osOK;
 8001f2a:	2000      	movs	r0, #0
      result = osErrorOS;
    }
  }
  
  return result;
}
 8001f2c:	b002      	add	sp, #8
 8001f2e:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 8001f30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f34:	4b07      	ldr	r3, [pc, #28]	; (8001f54 <osSemaphoreRelease+0x44>)
 8001f36:	601a      	str	r2, [r3, #0]
 8001f38:	f3bf 8f4f 	dsb	sy
 8001f3c:	f3bf 8f6f 	isb	sy
 8001f40:	e7f3      	b.n	8001f2a <osSemaphoreRelease+0x1a>
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8001f42:	461a      	mov	r2, r3
 8001f44:	4619      	mov	r1, r3
 8001f46:	f000 fca1 	bl	800288c <xQueueGenericSend>
 8001f4a:	2801      	cmp	r0, #1
 8001f4c:	d0ed      	beq.n	8001f2a <osSemaphoreRelease+0x1a>
      result = osErrorOS;
 8001f4e:	20ff      	movs	r0, #255	; 0xff
 8001f50:	e7ec      	b.n	8001f2c <osSemaphoreRelease+0x1c>
 8001f52:	bf00      	nop
 8001f54:	e000ed04 	.word	0xe000ed04

08001f58 <osMutexRelease>:
 8001f58:	f7ff bfda 	b.w	8001f10 <osSemaphoreRelease>

08001f5c <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8001f5c:	b507      	push	{r0, r1, r2, lr}
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8001f5e:	6882      	ldr	r2, [r0, #8]
 8001f60:	b14a      	cbz	r2, 8001f76 <osMessageCreate+0x1a>
 8001f62:	68c3      	ldr	r3, [r0, #12]
 8001f64:	b13b      	cbz	r3, 8001f76 <osMessageCreate+0x1a>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8001f66:	2100      	movs	r1, #0
 8001f68:	9100      	str	r1, [sp, #0]
 8001f6a:	c803      	ldmia	r0, {r0, r1}
 8001f6c:	f000 fc14 	bl	8002798 <xQueueGenericCreateStatic>
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8001f70:	b003      	add	sp, #12
 8001f72:	f85d fb04 	ldr.w	pc, [sp], #4
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8001f76:	2200      	movs	r2, #0
 8001f78:	c803      	ldmia	r0, {r0, r1}
}
 8001f7a:	b003      	add	sp, #12
 8001f7c:	f85d eb04 	ldr.w	lr, [sp], #4
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8001f80:	f000 bc5e 	b.w	8002840 <xQueueGenericCreate>

08001f84 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8001f84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  portBASE_TYPE taskWoken = pdFALSE;
 8001f86:	2400      	movs	r4, #0
{
 8001f88:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8001f8a:	9403      	str	r4, [sp, #12]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
    ticks = 1;
 8001f8c:	42a2      	cmp	r2, r4
 8001f8e:	bf08      	it	eq
 8001f90:	2201      	moveq	r2, #1
 8001f92:	f3ef 8305 	mrs	r3, IPSR
  }
  
  if (inHandlerMode()) {
 8001f96:	b1ab      	cbz	r3, 8001fc4 <osMessagePut+0x40>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8001f98:	4623      	mov	r3, r4
 8001f9a:	aa03      	add	r2, sp, #12
 8001f9c:	a901      	add	r1, sp, #4
 8001f9e:	f000 fd56 	bl	8002a4e <xQueueGenericSendFromISR>
 8001fa2:	2801      	cmp	r0, #1
 8001fa4:	d002      	beq.n	8001fac <osMessagePut+0x28>
      return osErrorOS;
 8001fa6:	20ff      	movs	r0, #255	; 0xff
      return osErrorOS;
    }
  }
  
  return osOK;
}
 8001fa8:	b004      	add	sp, #16
 8001faa:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 8001fac:	9b03      	ldr	r3, [sp, #12]
 8001fae:	b13b      	cbz	r3, 8001fc0 <osMessagePut+0x3c>
 8001fb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001fb4:	4b06      	ldr	r3, [pc, #24]	; (8001fd0 <osMessagePut+0x4c>)
 8001fb6:	601a      	str	r2, [r3, #0]
 8001fb8:	f3bf 8f4f 	dsb	sy
 8001fbc:	f3bf 8f6f 	isb	sy
  return osOK;
 8001fc0:	2000      	movs	r0, #0
 8001fc2:	e7f1      	b.n	8001fa8 <osMessagePut+0x24>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8001fc4:	a901      	add	r1, sp, #4
 8001fc6:	f000 fc61 	bl	800288c <xQueueGenericSend>
 8001fca:	2801      	cmp	r0, #1
 8001fcc:	d1eb      	bne.n	8001fa6 <osMessagePut+0x22>
 8001fce:	e7f7      	b.n	8001fc0 <osMessagePut+0x3c>
 8001fd0:	e000ed04 	.word	0xe000ed04

08001fd4 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8001fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
  event.value.v = 0;
 8001fd6:	2600      	movs	r6, #0
{
 8001fd8:	b085      	sub	sp, #20
 8001fda:	4604      	mov	r4, r0
 8001fdc:	4617      	mov	r7, r2
 8001fde:	4608      	mov	r0, r1
  event.def.message_id = queue_id;
 8001fe0:	9103      	str	r1, [sp, #12]
  event.value.v = 0;
 8001fe2:	9602      	str	r6, [sp, #8]
 8001fe4:	ad01      	add	r5, sp, #4
  
  if (queue_id == NULL) {
 8001fe6:	b911      	cbnz	r1, 8001fee <osMessageGet+0x1a>
    event.status = osErrorParameter;
 8001fe8:	2380      	movs	r3, #128	; 0x80
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8001fea:	9301      	str	r3, [sp, #4]
 8001fec:	e016      	b.n	800201c <osMessageGet+0x48>
  taskWoken = pdFALSE;
 8001fee:	9600      	str	r6, [sp, #0]
 8001ff0:	f3ef 8305 	mrs	r3, IPSR
  if (inHandlerMode()) {
 8001ff4:	b1cb      	cbz	r3, 800202a <osMessageGet+0x56>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8001ff6:	466a      	mov	r2, sp
 8001ff8:	a902      	add	r1, sp, #8
 8001ffa:	f000 ff61 	bl	8002ec0 <xQueueReceiveFromISR>
 8001ffe:	2801      	cmp	r0, #1
      event.status = osEventMessage;
 8002000:	bf0a      	itet	eq
 8002002:	2310      	moveq	r3, #16
      event.status = osOK;
 8002004:	9601      	strne	r6, [sp, #4]
      event.status = osEventMessage;
 8002006:	9301      	streq	r3, [sp, #4]
    portEND_SWITCHING_ISR(taskWoken);
 8002008:	9b00      	ldr	r3, [sp, #0]
 800200a:	b13b      	cbz	r3, 800201c <osMessageGet+0x48>
 800200c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002010:	4b0c      	ldr	r3, [pc, #48]	; (8002044 <osMessageGet+0x70>)
 8002012:	601a      	str	r2, [r3, #0]
 8002014:	f3bf 8f4f 	dsb	sy
 8002018:	f3bf 8f6f 	isb	sy
    }
  }
  
  return event;
 800201c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002020:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8002024:	4620      	mov	r0, r4
 8002026:	b005      	add	sp, #20
 8002028:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800202a:	a902      	add	r1, sp, #8
 800202c:	f000 fdd6 	bl	8002bdc <xQueueReceive>
 8002030:	2801      	cmp	r0, #1
 8002032:	d101      	bne.n	8002038 <osMessageGet+0x64>
      event.status = osEventMessage;
 8002034:	2310      	movs	r3, #16
 8002036:	e7d8      	b.n	8001fea <osMessageGet+0x16>
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8002038:	2f00      	cmp	r7, #0
 800203a:	bf0c      	ite	eq
 800203c:	2300      	moveq	r3, #0
 800203e:	2340      	movne	r3, #64	; 0x40
 8002040:	e7d3      	b.n	8001fea <osMessageGet+0x16>
 8002042:	bf00      	nop
 8002044:	e000ed04 	.word	0xe000ed04

08002048 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002048:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800204c:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002050:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002052:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002054:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002056:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002058:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800205a:	6003      	str	r3, [r0, #0]
 800205c:	4770      	bx	lr

0800205e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800205e:	2300      	movs	r3, #0
 8002060:	6103      	str	r3, [r0, #16]
 8002062:	4770      	bx	lr

08002064 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8002064:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002066:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8002068:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800206a:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800206c:	689a      	ldr	r2, [r3, #8]
 800206e:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002070:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8002072:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8002074:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8002076:	3301      	adds	r3, #1
 8002078:	6003      	str	r3, [r0, #0]
 800207a:	4770      	bx	lr

0800207c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800207c:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800207e:	1c53      	adds	r3, r2, #1
{
 8002080:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 8002082:	d10a      	bne.n	800209a <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002084:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002086:	685a      	ldr	r2, [r3, #4]
 8002088:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800208a:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800208c:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800208e:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8002090:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8002092:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8002094:	3301      	adds	r3, #1
 8002096:	6003      	str	r3, [r0, #0]
 8002098:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800209a:	f100 0308 	add.w	r3, r0, #8
 800209e:	685c      	ldr	r4, [r3, #4]
 80020a0:	6825      	ldr	r5, [r4, #0]
 80020a2:	42aa      	cmp	r2, r5
 80020a4:	d3ef      	bcc.n	8002086 <vListInsert+0xa>
 80020a6:	4623      	mov	r3, r4
 80020a8:	e7f9      	b.n	800209e <vListInsert+0x22>

080020aa <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80020aa:	6841      	ldr	r1, [r0, #4]
 80020ac:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = pxItemToRemove->pxContainer;
 80020ae:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80020b0:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80020b2:	6882      	ldr	r2, [r0, #8]
 80020b4:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80020b6:	6859      	ldr	r1, [r3, #4]
 80020b8:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80020ba:	bf08      	it	eq
 80020bc:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80020be:	2200      	movs	r2, #0
 80020c0:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	3a01      	subs	r2, #1
 80020c6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80020c8:	6818      	ldr	r0, [r3, #0]
}
 80020ca:	4770      	bx	lr

080020cc <prvTaskExitError>:
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
volatile uint32_t ulDummy = 0;
 80020cc:	2300      	movs	r3, #0
{
 80020ce:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 80020d0:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80020d2:	4b0f      	ldr	r3, [pc, #60]	; (8002110 <prvTaskExitError+0x44>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	3301      	adds	r3, #1
 80020d8:	d00a      	beq.n	80020f0 <prvTaskExitError+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80020da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020de:	b672      	cpsid	i
 80020e0:	f383 8811 	msr	BASEPRI, r3
 80020e4:	f3bf 8f6f 	isb	sy
 80020e8:	f3bf 8f4f 	dsb	sy
 80020ec:	b662      	cpsie	i
 80020ee:	e7fe      	b.n	80020ee <prvTaskExitError+0x22>
 80020f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020f4:	b672      	cpsid	i
 80020f6:	f383 8811 	msr	BASEPRI, r3
 80020fa:	f3bf 8f6f 	isb	sy
 80020fe:	f3bf 8f4f 	dsb	sy
 8002102:	b662      	cpsie	i
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002104:	9b01      	ldr	r3, [sp, #4]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d0fc      	beq.n	8002104 <prvTaskExitError+0x38>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800210a:	b002      	add	sp, #8
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	20000008 	.word	0x20000008

08002114 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8002114:	4808      	ldr	r0, [pc, #32]	; (8002138 <prvPortStartFirstTask+0x24>)
 8002116:	6800      	ldr	r0, [r0, #0]
 8002118:	6800      	ldr	r0, [r0, #0]
 800211a:	f380 8808 	msr	MSP, r0
 800211e:	f04f 0000 	mov.w	r0, #0
 8002122:	f380 8814 	msr	CONTROL, r0
 8002126:	b662      	cpsie	i
 8002128:	b661      	cpsie	f
 800212a:	f3bf 8f4f 	dsb	sy
 800212e:	f3bf 8f6f 	isb	sy
 8002132:	df00      	svc	0
 8002134:	bf00      	nop
 8002136:	0000      	.short	0x0000
 8002138:	e000ed08 	.word	0xe000ed08

0800213c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800213c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800214c <vPortEnableVFP+0x10>
 8002140:	6801      	ldr	r1, [r0, #0]
 8002142:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002146:	6001      	str	r1, [r0, #0]
 8002148:	4770      	bx	lr
 800214a:	0000      	.short	0x0000
 800214c:	e000ed88 	.word	0xe000ed88

08002150 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002150:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002154:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002158:	f840 2c20 	str.w	r2, [r0, #-32]
}
 800215c:	3844      	subs	r0, #68	; 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800215e:	6403      	str	r3, [r0, #64]	; 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002160:	4b03      	ldr	r3, [pc, #12]	; (8002170 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002162:	63c1      	str	r1, [r0, #60]	; 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002164:	6383      	str	r3, [r0, #56]	; 0x38
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8002166:	f06f 0302 	mvn.w	r3, #2
 800216a:	6203      	str	r3, [r0, #32]
}
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	080020cd 	.word	0x080020cd
	...

08002180 <SVC_Handler>:
	__asm volatile (
 8002180:	4b07      	ldr	r3, [pc, #28]	; (80021a0 <pxCurrentTCBConst2>)
 8002182:	6819      	ldr	r1, [r3, #0]
 8002184:	6808      	ldr	r0, [r1, #0]
 8002186:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800218a:	f380 8809 	msr	PSP, r0
 800218e:	f3bf 8f6f 	isb	sy
 8002192:	f04f 0000 	mov.w	r0, #0
 8002196:	f380 8811 	msr	BASEPRI, r0
 800219a:	4770      	bx	lr
 800219c:	f3af 8000 	nop.w

080021a0 <pxCurrentTCBConst2>:
 80021a0:	200064b8 	.word	0x200064b8

080021a4 <vPortEnterCritical>:
 80021a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021a8:	b672      	cpsid	i
 80021aa:	f383 8811 	msr	BASEPRI, r3
 80021ae:	f3bf 8f6f 	isb	sy
 80021b2:	f3bf 8f4f 	dsb	sy
 80021b6:	b662      	cpsie	i
	uxCriticalNesting++;
 80021b8:	4a0b      	ldr	r2, [pc, #44]	; (80021e8 <vPortEnterCritical+0x44>)
 80021ba:	6813      	ldr	r3, [r2, #0]
 80021bc:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 80021be:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 80021c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80021c2:	d10f      	bne.n	80021e4 <vPortEnterCritical+0x40>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80021c4:	4b09      	ldr	r3, [pc, #36]	; (80021ec <vPortEnterCritical+0x48>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f013 0fff 	tst.w	r3, #255	; 0xff
 80021cc:	d00a      	beq.n	80021e4 <vPortEnterCritical+0x40>
 80021ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021d2:	b672      	cpsid	i
 80021d4:	f383 8811 	msr	BASEPRI, r3
 80021d8:	f3bf 8f6f 	isb	sy
 80021dc:	f3bf 8f4f 	dsb	sy
 80021e0:	b662      	cpsie	i
 80021e2:	e7fe      	b.n	80021e2 <vPortEnterCritical+0x3e>
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	20000008 	.word	0x20000008
 80021ec:	e000ed04 	.word	0xe000ed04

080021f0 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 80021f0:	4a09      	ldr	r2, [pc, #36]	; (8002218 <vPortExitCritical+0x28>)
 80021f2:	6813      	ldr	r3, [r2, #0]
 80021f4:	b953      	cbnz	r3, 800220c <vPortExitCritical+0x1c>
 80021f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021fa:	b672      	cpsid	i
 80021fc:	f383 8811 	msr	BASEPRI, r3
 8002200:	f3bf 8f6f 	isb	sy
 8002204:	f3bf 8f4f 	dsb	sy
 8002208:	b662      	cpsie	i
 800220a:	e7fe      	b.n	800220a <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 800220c:	3b01      	subs	r3, #1
 800220e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002210:	b90b      	cbnz	r3, 8002216 <vPortExitCritical+0x26>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002212:	f383 8811 	msr	BASEPRI, r3
 8002216:	4770      	bx	lr
 8002218:	20000008 	.word	0x20000008
 800221c:	00000000 	.word	0x00000000

08002220 <PendSV_Handler>:
	__asm volatile
 8002220:	f3ef 8009 	mrs	r0, PSP
 8002224:	f3bf 8f6f 	isb	sy
 8002228:	4b15      	ldr	r3, [pc, #84]	; (8002280 <pxCurrentTCBConst>)
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	f01e 0f10 	tst.w	lr, #16
 8002230:	bf08      	it	eq
 8002232:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002236:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800223a:	6010      	str	r0, [r2, #0]
 800223c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002240:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002244:	b672      	cpsid	i
 8002246:	f380 8811 	msr	BASEPRI, r0
 800224a:	f3bf 8f4f 	dsb	sy
 800224e:	f3bf 8f6f 	isb	sy
 8002252:	b662      	cpsie	i
 8002254:	f001 fa28 	bl	80036a8 <vTaskSwitchContext>
 8002258:	f04f 0000 	mov.w	r0, #0
 800225c:	f380 8811 	msr	BASEPRI, r0
 8002260:	bc09      	pop	{r0, r3}
 8002262:	6819      	ldr	r1, [r3, #0]
 8002264:	6808      	ldr	r0, [r1, #0]
 8002266:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800226a:	f01e 0f10 	tst.w	lr, #16
 800226e:	bf08      	it	eq
 8002270:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002274:	f380 8809 	msr	PSP, r0
 8002278:	f3bf 8f6f 	isb	sy
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop

08002280 <pxCurrentTCBConst>:
 8002280:	200064b8 	.word	0x200064b8

08002284 <SysTick_Handler>:
{
 8002284:	b508      	push	{r3, lr}
	__asm volatile
 8002286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800228a:	b672      	cpsid	i
 800228c:	f383 8811 	msr	BASEPRI, r3
 8002290:	f3bf 8f6f 	isb	sy
 8002294:	f3bf 8f4f 	dsb	sy
 8002298:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 800229a:	f001 f8f7 	bl	800348c <xTaskIncrementTick>
 800229e:	b118      	cbz	r0, 80022a8 <SysTick_Handler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80022a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022a4:	4b02      	ldr	r3, [pc, #8]	; (80022b0 <SysTick_Handler+0x2c>)
 80022a6:	601a      	str	r2, [r3, #0]
	__asm volatile
 80022a8:	2300      	movs	r3, #0
 80022aa:	f383 8811 	msr	BASEPRI, r3
 80022ae:	bd08      	pop	{r3, pc}
 80022b0:	e000ed04 	.word	0xe000ed04

080022b4 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80022b4:	2300      	movs	r3, #0
 80022b6:	4a08      	ldr	r2, [pc, #32]	; (80022d8 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80022b8:	4908      	ldr	r1, [pc, #32]	; (80022dc <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80022ba:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80022bc:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80022be:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80022c2:	4b07      	ldr	r3, [pc, #28]	; (80022e0 <vPortSetupTimerInterrupt+0x2c>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80022ca:	4906      	ldr	r1, [pc, #24]	; (80022e4 <vPortSetupTimerInterrupt+0x30>)
 80022cc:	3b01      	subs	r3, #1
 80022ce:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80022d0:	2307      	movs	r3, #7
 80022d2:	6013      	str	r3, [r2, #0]
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop
 80022d8:	e000e010 	.word	0xe000e010
 80022dc:	e000e018 	.word	0xe000e018
 80022e0:	20000014 	.word	0x20000014
 80022e4:	e000e014 	.word	0xe000e014

080022e8 <xPortStartScheduler>:
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80022e8:	4b2c      	ldr	r3, [pc, #176]	; (800239c <xPortStartScheduler+0xb4>)
{
 80022ea:	b513      	push	{r0, r1, r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80022ec:	781a      	ldrb	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80022ee:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80022f0:	b2d2      	uxtb	r2, r2
 80022f2:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80022f4:	22ff      	movs	r2, #255	; 0xff
 80022f6:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80022f8:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80022fa:	4a29      	ldr	r2, [pc, #164]	; (80023a0 <xPortStartScheduler+0xb8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002302:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8002306:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800230a:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800230c:	2207      	movs	r2, #7
 800230e:	4b25      	ldr	r3, [pc, #148]	; (80023a4 <xPortStartScheduler+0xbc>)
 8002310:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002312:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8002316:	1e54      	subs	r4, r2, #1
 8002318:	0600      	lsls	r0, r0, #24
 800231a:	d40f      	bmi.n	800233c <xPortStartScheduler+0x54>
 800231c:	b101      	cbz	r1, 8002320 <xPortStartScheduler+0x38>
 800231e:	601a      	str	r2, [r3, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	2a03      	cmp	r2, #3
 8002324:	d013      	beq.n	800234e <xPortStartScheduler+0x66>
	__asm volatile
 8002326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800232a:	b672      	cpsid	i
 800232c:	f383 8811 	msr	BASEPRI, r3
 8002330:	f3bf 8f6f 	isb	sy
 8002334:	f3bf 8f4f 	dsb	sy
 8002338:	b662      	cpsie	i
 800233a:	e7fe      	b.n	800233a <xPortStartScheduler+0x52>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800233c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8002340:	2101      	movs	r1, #1
 8002342:	0052      	lsls	r2, r2, #1
 8002344:	b2d2      	uxtb	r2, r2
 8002346:	f88d 2003 	strb.w	r2, [sp, #3]
 800234a:	4622      	mov	r2, r4
 800234c:	e7e1      	b.n	8002312 <xPortStartScheduler+0x2a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800234e:	0212      	lsls	r2, r2, #8
	uxCriticalNesting = 0;
 8002350:	2400      	movs	r4, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002352:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8002356:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002358:	9b01      	ldr	r3, [sp, #4]
 800235a:	4a10      	ldr	r2, [pc, #64]	; (800239c <xPortStartScheduler+0xb4>)
 800235c:	b2db      	uxtb	r3, r3
 800235e:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002360:	4b11      	ldr	r3, [pc, #68]	; (80023a8 <xPortStartScheduler+0xc0>)
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8002368:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8002370:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8002372:	f7ff ff9f 	bl	80022b4 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8002376:	4b0d      	ldr	r3, [pc, #52]	; (80023ac <xPortStartScheduler+0xc4>)
 8002378:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 800237a:	f7ff fedf 	bl	800213c <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800237e:	4a0c      	ldr	r2, [pc, #48]	; (80023b0 <xPortStartScheduler+0xc8>)
 8002380:	6813      	ldr	r3, [r2, #0]
 8002382:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002386:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8002388:	f7ff fec4 	bl	8002114 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800238c:	f001 f98c 	bl	80036a8 <vTaskSwitchContext>
	prvTaskExitError();
 8002390:	f7ff fe9c 	bl	80020cc <prvTaskExitError>
}
 8002394:	4620      	mov	r0, r4
 8002396:	b002      	add	sp, #8
 8002398:	bd10      	pop	{r4, pc}
 800239a:	bf00      	nop
 800239c:	e000e400 	.word	0xe000e400
 80023a0:	20000098 	.word	0x20000098
 80023a4:	2000009c 	.word	0x2000009c
 80023a8:	e000ed20 	.word	0xe000ed20
 80023ac:	20000008 	.word	0x20000008
 80023b0:	e000ef34 	.word	0xe000ef34

080023b4 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80023b4:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80023b8:	2b0f      	cmp	r3, #15
 80023ba:	d910      	bls.n	80023de <vPortValidateInterruptPriority+0x2a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80023bc:	4a12      	ldr	r2, [pc, #72]	; (8002408 <vPortValidateInterruptPriority+0x54>)
 80023be:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80023c0:	4a12      	ldr	r2, [pc, #72]	; (800240c <vPortValidateInterruptPriority+0x58>)
 80023c2:	7812      	ldrb	r2, [r2, #0]
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d90a      	bls.n	80023de <vPortValidateInterruptPriority+0x2a>
 80023c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023cc:	b672      	cpsid	i
 80023ce:	f383 8811 	msr	BASEPRI, r3
 80023d2:	f3bf 8f6f 	isb	sy
 80023d6:	f3bf 8f4f 	dsb	sy
 80023da:	b662      	cpsie	i
 80023dc:	e7fe      	b.n	80023dc <vPortValidateInterruptPriority+0x28>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80023de:	4b0c      	ldr	r3, [pc, #48]	; (8002410 <vPortValidateInterruptPriority+0x5c>)
 80023e0:	4a0c      	ldr	r2, [pc, #48]	; (8002414 <vPortValidateInterruptPriority+0x60>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	6812      	ldr	r2, [r2, #0]
 80023e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d90a      	bls.n	8002404 <vPortValidateInterruptPriority+0x50>
 80023ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023f2:	b672      	cpsid	i
 80023f4:	f383 8811 	msr	BASEPRI, r3
 80023f8:	f3bf 8f6f 	isb	sy
 80023fc:	f3bf 8f4f 	dsb	sy
 8002400:	b662      	cpsie	i
 8002402:	e7fe      	b.n	8002402 <vPortValidateInterruptPriority+0x4e>
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	e000e3f0 	.word	0xe000e3f0
 800240c:	20000098 	.word	0x20000098
 8002410:	e000ed0c 	.word	0xe000ed0c
 8002414:	2000009c 	.word	0x2000009c

08002418 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002418:	4b0f      	ldr	r3, [pc, #60]	; (8002458 <prvInsertBlockIntoFreeList+0x40>)
{
 800241a:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	4282      	cmp	r2, r0
 8002420:	d318      	bcc.n	8002454 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002422:	685c      	ldr	r4, [r3, #4]
 8002424:	1919      	adds	r1, r3, r4
 8002426:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002428:	bf01      	itttt	eq
 800242a:	6841      	ldreq	r1, [r0, #4]
 800242c:	4618      	moveq	r0, r3
 800242e:	1909      	addeq	r1, r1, r4
 8002430:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002432:	6844      	ldr	r4, [r0, #4]
 8002434:	1901      	adds	r1, r0, r4
 8002436:	428a      	cmp	r2, r1
 8002438:	d107      	bne.n	800244a <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800243a:	4908      	ldr	r1, [pc, #32]	; (800245c <prvInsertBlockIntoFreeList+0x44>)
 800243c:	6809      	ldr	r1, [r1, #0]
 800243e:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002440:	bf1f      	itttt	ne
 8002442:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002444:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002446:	1909      	addne	r1, r1, r4
 8002448:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800244a:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800244c:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800244e:	bf18      	it	ne
 8002450:	6018      	strne	r0, [r3, #0]
 8002452:	bd10      	pop	{r4, pc}
 8002454:	4613      	mov	r3, r2
 8002456:	e7e1      	b.n	800241c <prvInsertBlockIntoFreeList+0x4>
 8002458:	200064b0 	.word	0x200064b0
 800245c:	200000a0 	.word	0x200000a0

08002460 <pvPortMalloc>:
{
 8002460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002464:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8002466:	f000 fffb 	bl	8003460 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800246a:	4940      	ldr	r1, [pc, #256]	; (800256c <pvPortMalloc+0x10c>)
 800246c:	4d40      	ldr	r5, [pc, #256]	; (8002570 <pvPortMalloc+0x110>)
 800246e:	680b      	ldr	r3, [r1, #0]
 8002470:	bb0b      	cbnz	r3, 80024b6 <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 8002472:	4a40      	ldr	r2, [pc, #256]	; (8002574 <pvPortMalloc+0x114>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002474:	0756      	lsls	r6, r2, #29
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002476:	4e40      	ldr	r6, [pc, #256]	; (8002578 <pvPortMalloc+0x118>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002478:	bf1b      	ittet	ne
 800247a:	1dd0      	addne	r0, r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800247c:	f502 43c8 	addne.w	r3, r2, #25600	; 0x6400
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002480:	f44f 43c8 	moveq.w	r3, #25600	; 0x6400
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002484:	f020 0007 	bicne.w	r0, r0, #7
 8002488:	bf1c      	itt	ne
 800248a:	4602      	movne	r2, r0
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800248c:	1a1b      	subne	r3, r3, r0
	xStart.xBlockSize = ( size_t ) 0;
 800248e:	2000      	movs	r0, #0
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002490:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002492:	6032      	str	r2, [r6, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002494:	6070      	str	r0, [r6, #4]
	uxAddress -= xHeapStructSize;
 8002496:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002498:	f023 0307 	bic.w	r3, r3, #7
	pxEnd->pxNextFreeBlock = NULL;
 800249c:	6018      	str	r0, [r3, #0]
	pxEnd->xBlockSize = 0;
 800249e:	6058      	str	r0, [r3, #4]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80024a0:	1a98      	subs	r0, r3, r2
	pxEnd = ( void * ) uxAddress;
 80024a2:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80024a4:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80024a6:	4b35      	ldr	r3, [pc, #212]	; (800257c <pvPortMalloc+0x11c>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80024a8:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80024aa:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80024ac:	4b34      	ldr	r3, [pc, #208]	; (8002580 <pvPortMalloc+0x120>)
 80024ae:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80024b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80024b4:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80024b6:	682f      	ldr	r7, [r5, #0]
 80024b8:	4227      	tst	r7, r4
 80024ba:	d116      	bne.n	80024ea <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 80024bc:	2c00      	cmp	r4, #0
 80024be:	d042      	beq.n	8002546 <pvPortMalloc+0xe6>
				xWantedSize += xHeapStructSize;
 80024c0:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80024c4:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80024c6:	bf1c      	itt	ne
 80024c8:	f023 0307 	bicne.w	r3, r3, #7
 80024cc:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80024ce:	b163      	cbz	r3, 80024ea <pvPortMalloc+0x8a>
 80024d0:	4a2b      	ldr	r2, [pc, #172]	; (8002580 <pvPortMalloc+0x120>)
 80024d2:	6816      	ldr	r6, [r2, #0]
 80024d4:	4690      	mov	r8, r2
 80024d6:	42b3      	cmp	r3, r6
 80024d8:	d807      	bhi.n	80024ea <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 80024da:	4a27      	ldr	r2, [pc, #156]	; (8002578 <pvPortMalloc+0x118>)
 80024dc:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80024de:	6868      	ldr	r0, [r5, #4]
 80024e0:	4283      	cmp	r3, r0
 80024e2:	d804      	bhi.n	80024ee <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 80024e4:	6809      	ldr	r1, [r1, #0]
 80024e6:	428d      	cmp	r5, r1
 80024e8:	d107      	bne.n	80024fa <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 80024ea:	2400      	movs	r4, #0
 80024ec:	e02b      	b.n	8002546 <pvPortMalloc+0xe6>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80024ee:	682c      	ldr	r4, [r5, #0]
 80024f0:	2c00      	cmp	r4, #0
 80024f2:	d0f7      	beq.n	80024e4 <pvPortMalloc+0x84>
 80024f4:	462a      	mov	r2, r5
 80024f6:	4625      	mov	r5, r4
 80024f8:	e7f1      	b.n	80024de <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80024fa:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80024fc:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80024fe:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002500:	1ac2      	subs	r2, r0, r3
 8002502:	2a10      	cmp	r2, #16
 8002504:	d911      	bls.n	800252a <pvPortMalloc+0xca>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002506:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002508:	0741      	lsls	r1, r0, #29
 800250a:	d00a      	beq.n	8002522 <pvPortMalloc+0xc2>
 800250c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002510:	b672      	cpsid	i
 8002512:	f383 8811 	msr	BASEPRI, r3
 8002516:	f3bf 8f6f 	isb	sy
 800251a:	f3bf 8f4f 	dsb	sy
 800251e:	b662      	cpsie	i
 8002520:	e7fe      	b.n	8002520 <pvPortMalloc+0xc0>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002522:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002524:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002526:	f7ff ff77 	bl	8002418 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800252a:	686b      	ldr	r3, [r5, #4]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800252c:	3408      	adds	r4, #8
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800252e:	4913      	ldr	r1, [pc, #76]	; (800257c <pvPortMalloc+0x11c>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002530:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002532:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002534:	6808      	ldr	r0, [r1, #0]
					pxBlock->pxNextFreeBlock = NULL;
 8002536:	2300      	movs	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002538:	f8c8 6000 	str.w	r6, [r8]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800253c:	4286      	cmp	r6, r0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800253e:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002540:	602b      	str	r3, [r5, #0]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002542:	bf38      	it	cc
 8002544:	600e      	strcc	r6, [r1, #0]
	( void ) xTaskResumeAll();
 8002546:	f001 f835 	bl	80035b4 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800254a:	0763      	lsls	r3, r4, #29
 800254c:	d00a      	beq.n	8002564 <pvPortMalloc+0x104>
 800254e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002552:	b672      	cpsid	i
 8002554:	f383 8811 	msr	BASEPRI, r3
 8002558:	f3bf 8f6f 	isb	sy
 800255c:	f3bf 8f4f 	dsb	sy
 8002560:	b662      	cpsie	i
 8002562:	e7fe      	b.n	8002562 <pvPortMalloc+0x102>
}
 8002564:	4620      	mov	r0, r4
 8002566:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800256a:	bf00      	nop
 800256c:	200000a0 	.word	0x200000a0
 8002570:	200064a4 	.word	0x200064a4
 8002574:	200000a4 	.word	0x200000a4
 8002578:	200064b0 	.word	0x200064b0
 800257c:	200064ac 	.word	0x200064ac
 8002580:	200064a8 	.word	0x200064a8

08002584 <vPortFree>:
{
 8002584:	b510      	push	{r4, lr}
	if( pv != NULL )
 8002586:	4604      	mov	r4, r0
 8002588:	2800      	cmp	r0, #0
 800258a:	d032      	beq.n	80025f2 <vPortFree+0x6e>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800258c:	4a19      	ldr	r2, [pc, #100]	; (80025f4 <vPortFree+0x70>)
 800258e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8002592:	6812      	ldr	r2, [r2, #0]
 8002594:	4213      	tst	r3, r2
 8002596:	d10a      	bne.n	80025ae <vPortFree+0x2a>
 8002598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800259c:	b672      	cpsid	i
 800259e:	f383 8811 	msr	BASEPRI, r3
 80025a2:	f3bf 8f6f 	isb	sy
 80025a6:	f3bf 8f4f 	dsb	sy
 80025aa:	b662      	cpsie	i
 80025ac:	e7fe      	b.n	80025ac <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80025ae:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80025b2:	b151      	cbz	r1, 80025ca <vPortFree+0x46>
 80025b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025b8:	b672      	cpsid	i
 80025ba:	f383 8811 	msr	BASEPRI, r3
 80025be:	f3bf 8f6f 	isb	sy
 80025c2:	f3bf 8f4f 	dsb	sy
 80025c6:	b662      	cpsie	i
 80025c8:	e7fe      	b.n	80025c8 <vPortFree+0x44>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80025ca:	ea23 0302 	bic.w	r3, r3, r2
 80025ce:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 80025d2:	f000 ff45 	bl	8003460 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80025d6:	4a08      	ldr	r2, [pc, #32]	; (80025f8 <vPortFree+0x74>)
 80025d8:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80025dc:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 80025e0:	6811      	ldr	r1, [r2, #0]
 80025e2:	440b      	add	r3, r1
 80025e4:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80025e6:	f7ff ff17 	bl	8002418 <prvInsertBlockIntoFreeList>
}
 80025ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 80025ee:	f000 bfe1 	b.w	80035b4 <xTaskResumeAll>
 80025f2:	bd10      	pop	{r4, pc}
 80025f4:	200064a4 	.word	0x200064a4
 80025f8:	200064a8 	.word	0x200064a8

080025fc <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80025fc:	b510      	push	{r4, lr}
 80025fe:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002600:	f7ff fdd0 	bl	80021a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002604:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8002606:	f7ff fdf3 	bl	80021f0 <vPortExitCritical>

	return xReturn;
}
 800260a:	fab4 f084 	clz	r0, r4
 800260e:	0940      	lsrs	r0, r0, #5
 8002610:	bd10      	pop	{r4, pc}

08002612 <prvCopyDataToQueue>:
{
 8002612:	b570      	push	{r4, r5, r6, lr}
 8002614:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002616:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 8002618:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800261a:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800261c:	b942      	cbnz	r2, 8002630 <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800261e:	6805      	ldr	r5, [r0, #0]
 8002620:	b99d      	cbnz	r5, 800264a <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002622:	6880      	ldr	r0, [r0, #8]
 8002624:	f001 f992 	bl	800394c <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002628:	60a5      	str	r5, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800262a:	3601      	adds	r6, #1
 800262c:	63a6      	str	r6, [r4, #56]	; 0x38
}
 800262e:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8002630:	b96d      	cbnz	r5, 800264e <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002632:	6840      	ldr	r0, [r0, #4]
 8002634:	f009 fd73 	bl	800c11e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002638:	6863      	ldr	r3, [r4, #4]
 800263a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800263c:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800263e:	68a2      	ldr	r2, [r4, #8]
 8002640:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002642:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002644:	d301      	bcc.n	800264a <prvCopyDataToQueue+0x38>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002646:	6823      	ldr	r3, [r4, #0]
 8002648:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 800264a:	2000      	movs	r0, #0
 800264c:	e7ed      	b.n	800262a <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800264e:	68c0      	ldr	r0, [r0, #12]
 8002650:	f009 fd65 	bl	800c11e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002654:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002656:	68e2      	ldr	r2, [r4, #12]
 8002658:	425b      	negs	r3, r3
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800265a:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800265c:	441a      	add	r2, r3
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800265e:	428a      	cmp	r2, r1
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002660:	60e2      	str	r2, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002662:	bf3e      	ittt	cc
 8002664:	68a2      	ldrcc	r2, [r4, #8]
 8002666:	189b      	addcc	r3, r3, r2
 8002668:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800266a:	2d02      	cmp	r5, #2
 800266c:	d1ed      	bne.n	800264a <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800266e:	b10e      	cbz	r6, 8002674 <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 8002670:	3e01      	subs	r6, #1
 8002672:	e7ea      	b.n	800264a <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 8002674:	4630      	mov	r0, r6
 8002676:	e7d8      	b.n	800262a <prvCopyDataToQueue+0x18>

08002678 <prvCopyDataFromQueue>:
{
 8002678:	4603      	mov	r3, r0
 800267a:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800267c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 800267e:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002680:	b162      	cbz	r2, 800269c <prvCopyDataFromQueue+0x24>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002682:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002684:	689c      	ldr	r4, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002686:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002688:	42a1      	cmp	r1, r4
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800268a:	60d9      	str	r1, [r3, #12]
}
 800268c:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002690:	bf24      	itt	cs
 8002692:	6819      	ldrcs	r1, [r3, #0]
 8002694:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002696:	68d9      	ldr	r1, [r3, #12]
 8002698:	f009 bd41 	b.w	800c11e <memcpy>
}
 800269c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80026a0:	4770      	bx	lr

080026a2 <prvUnlockQueue>:
{
 80026a2:	b570      	push	{r4, r5, r6, lr}
 80026a4:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80026a6:	f7ff fd7d 	bl	80021a4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80026aa:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80026ae:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 80026b2:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80026b4:	2d00      	cmp	r5, #0
 80026b6:	dc14      	bgt.n	80026e2 <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 80026b8:	23ff      	movs	r3, #255	; 0xff
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80026ba:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 80026be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 80026c2:	f7ff fd95 	bl	80021f0 <vPortExitCritical>
	taskENTER_CRITICAL();
 80026c6:	f7ff fd6d 	bl	80021a4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80026ca:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 80026ce:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80026d0:	2d00      	cmp	r5, #0
 80026d2:	dc12      	bgt.n	80026fa <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 80026d4:	23ff      	movs	r3, #255	; 0xff
 80026d6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 80026da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 80026de:	f7ff bd87 	b.w	80021f0 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80026e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d0e7      	beq.n	80026b8 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80026e8:	4630      	mov	r0, r6
 80026ea:	f001 f835 	bl	8003758 <xTaskRemoveFromEventList>
 80026ee:	b108      	cbz	r0, 80026f4 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 80026f0:	f001 f8c2 	bl	8003878 <vTaskMissedYield>
 80026f4:	3d01      	subs	r5, #1
 80026f6:	b26d      	sxtb	r5, r5
 80026f8:	e7dc      	b.n	80026b4 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80026fa:	6923      	ldr	r3, [r4, #16]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d0e9      	beq.n	80026d4 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002700:	4630      	mov	r0, r6
 8002702:	f001 f829 	bl	8003758 <xTaskRemoveFromEventList>
 8002706:	b108      	cbz	r0, 800270c <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 8002708:	f001 f8b6 	bl	8003878 <vTaskMissedYield>
 800270c:	3d01      	subs	r5, #1
 800270e:	b26d      	sxtb	r5, r5
 8002710:	e7de      	b.n	80026d0 <prvUnlockQueue+0x2e>
	...

08002714 <xQueueGenericReset>:
{
 8002714:	b538      	push	{r3, r4, r5, lr}
 8002716:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8002718:	4604      	mov	r4, r0
 800271a:	b950      	cbnz	r0, 8002732 <xQueueGenericReset+0x1e>
 800271c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002720:	b672      	cpsid	i
 8002722:	f383 8811 	msr	BASEPRI, r3
 8002726:	f3bf 8f6f 	isb	sy
 800272a:	f3bf 8f4f 	dsb	sy
 800272e:	b662      	cpsie	i
 8002730:	e7fe      	b.n	8002730 <xQueueGenericReset+0x1c>
	taskENTER_CRITICAL();
 8002732:	f7ff fd37 	bl	80021a4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002736:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002738:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800273a:	6822      	ldr	r2, [r4, #0]
 800273c:	4343      	muls	r3, r0
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800273e:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002740:	18d1      	adds	r1, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002742:	1a1b      	subs	r3, r3, r0
 8002744:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002746:	60a1      	str	r1, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002748:	2100      	movs	r1, #0
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800274a:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800274c:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800274e:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 8002750:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002754:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8002758:	b995      	cbnz	r5, 8002780 <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800275a:	6923      	ldr	r3, [r4, #16]
 800275c:	b163      	cbz	r3, 8002778 <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800275e:	f104 0010 	add.w	r0, r4, #16
 8002762:	f000 fff9 	bl	8003758 <xTaskRemoveFromEventList>
 8002766:	b138      	cbz	r0, 8002778 <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 8002768:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800276c:	4b09      	ldr	r3, [pc, #36]	; (8002794 <xQueueGenericReset+0x80>)
 800276e:	601a      	str	r2, [r3, #0]
 8002770:	f3bf 8f4f 	dsb	sy
 8002774:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8002778:	f7ff fd3a 	bl	80021f0 <vPortExitCritical>
}
 800277c:	2001      	movs	r0, #1
 800277e:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002780:	f104 0010 	add.w	r0, r4, #16
 8002784:	f7ff fc60 	bl	8002048 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002788:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800278c:	f7ff fc5c 	bl	8002048 <vListInitialise>
 8002790:	e7f2      	b.n	8002778 <xQueueGenericReset+0x64>
 8002792:	bf00      	nop
 8002794:	e000ed04 	.word	0xe000ed04

08002798 <xQueueGenericCreateStatic>:
	{
 8002798:	b513      	push	{r0, r1, r4, lr}
 800279a:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800279c:	b950      	cbnz	r0, 80027b4 <xQueueGenericCreateStatic+0x1c>
 800279e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027a2:	b672      	cpsid	i
 80027a4:	f383 8811 	msr	BASEPRI, r3
 80027a8:	f3bf 8f6f 	isb	sy
 80027ac:	f3bf 8f4f 	dsb	sy
 80027b0:	b662      	cpsie	i
 80027b2:	e7fe      	b.n	80027b2 <xQueueGenericCreateStatic+0x1a>
		configASSERT( pxStaticQueue != NULL );
 80027b4:	b953      	cbnz	r3, 80027cc <xQueueGenericCreateStatic+0x34>
 80027b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027ba:	b672      	cpsid	i
 80027bc:	f383 8811 	msr	BASEPRI, r3
 80027c0:	f3bf 8f6f 	isb	sy
 80027c4:	f3bf 8f4f 	dsb	sy
 80027c8:	b662      	cpsie	i
 80027ca:	e7fe      	b.n	80027ca <xQueueGenericCreateStatic+0x32>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80027cc:	b15a      	cbz	r2, 80027e6 <xQueueGenericCreateStatic+0x4e>
 80027ce:	bb09      	cbnz	r1, 8002814 <xQueueGenericCreateStatic+0x7c>
 80027d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027d4:	b672      	cpsid	i
 80027d6:	f383 8811 	msr	BASEPRI, r3
 80027da:	f3bf 8f6f 	isb	sy
 80027de:	f3bf 8f4f 	dsb	sy
 80027e2:	b662      	cpsie	i
 80027e4:	e7fe      	b.n	80027e4 <xQueueGenericCreateStatic+0x4c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80027e6:	b1a9      	cbz	r1, 8002814 <xQueueGenericCreateStatic+0x7c>
 80027e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027ec:	b672      	cpsid	i
 80027ee:	f383 8811 	msr	BASEPRI, r3
 80027f2:	f3bf 8f6f 	isb	sy
 80027f6:	f3bf 8f4f 	dsb	sy
 80027fa:	b662      	cpsie	i
 80027fc:	e7fe      	b.n	80027fc <xQueueGenericCreateStatic+0x64>
 80027fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002802:	b672      	cpsid	i
 8002804:	f383 8811 	msr	BASEPRI, r3
 8002808:	f3bf 8f6f 	isb	sy
 800280c:	f3bf 8f4f 	dsb	sy
 8002810:	b662      	cpsie	i
 8002812:	e7fe      	b.n	8002812 <xQueueGenericCreateStatic+0x7a>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002814:	2348      	movs	r3, #72	; 0x48
 8002816:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002818:	9b01      	ldr	r3, [sp, #4]
 800281a:	2b48      	cmp	r3, #72	; 0x48
 800281c:	d1ef      	bne.n	80027fe <xQueueGenericCreateStatic+0x66>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800281e:	2900      	cmp	r1, #0
 8002820:	bf08      	it	eq
 8002822:	4622      	moveq	r2, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002824:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002826:	2301      	movs	r3, #1
	pxNewQueue->uxLength = uxQueueLength;
 8002828:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800282a:	6421      	str	r1, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800282c:	4620      	mov	r0, r4
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800282e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002832:	4619      	mov	r1, r3
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002834:	6022      	str	r2, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002836:	f7ff ff6d 	bl	8002714 <xQueueGenericReset>
	}
 800283a:	4620      	mov	r0, r4
 800283c:	b002      	add	sp, #8
 800283e:	bd10      	pop	{r4, pc}

08002840 <xQueueGenericCreate>:
	{
 8002840:	b570      	push	{r4, r5, r6, lr}
 8002842:	460d      	mov	r5, r1
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002844:	4606      	mov	r6, r0
 8002846:	b950      	cbnz	r0, 800285e <xQueueGenericCreate+0x1e>
 8002848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800284c:	b672      	cpsid	i
 800284e:	f383 8811 	msr	BASEPRI, r3
 8002852:	f3bf 8f6f 	isb	sy
 8002856:	f3bf 8f4f 	dsb	sy
 800285a:	b662      	cpsie	i
 800285c:	e7fe      	b.n	800285c <xQueueGenericCreate+0x1c>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800285e:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002860:	3048      	adds	r0, #72	; 0x48
 8002862:	f7ff fdfd 	bl	8002460 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8002866:	4604      	mov	r4, r0
 8002868:	b150      	cbz	r0, 8002880 <xQueueGenericCreate+0x40>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800286a:	2300      	movs	r3, #0
 800286c:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 8002870:	b945      	cbnz	r5, 8002884 <xQueueGenericCreate+0x44>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002872:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8002874:	63e6      	str	r6, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002876:	2101      	movs	r1, #1
	pxNewQueue->uxItemSize = uxItemSize;
 8002878:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800287a:	4620      	mov	r0, r4
 800287c:	f7ff ff4a 	bl	8002714 <xQueueGenericReset>
	}
 8002880:	4620      	mov	r0, r4
 8002882:	bd70      	pop	{r4, r5, r6, pc}
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002884:	f100 0348 	add.w	r3, r0, #72	; 0x48
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002888:	6003      	str	r3, [r0, #0]
 800288a:	e7f3      	b.n	8002874 <xQueueGenericCreate+0x34>

0800288c <xQueueGenericSend>:
{
 800288c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002890:	4689      	mov	r9, r1
 8002892:	9201      	str	r2, [sp, #4]
 8002894:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8002896:	4604      	mov	r4, r0
 8002898:	b950      	cbnz	r0, 80028b0 <xQueueGenericSend+0x24>
 800289a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800289e:	b672      	cpsid	i
 80028a0:	f383 8811 	msr	BASEPRI, r3
 80028a4:	f3bf 8f6f 	isb	sy
 80028a8:	f3bf 8f4f 	dsb	sy
 80028ac:	b662      	cpsie	i
 80028ae:	e7fe      	b.n	80028ae <xQueueGenericSend+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80028b0:	2900      	cmp	r1, #0
 80028b2:	f040 808c 	bne.w	80029ce <xQueueGenericSend+0x142>
 80028b6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	f000 8088 	beq.w	80029ce <xQueueGenericSend+0x142>
 80028be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028c2:	b672      	cpsid	i
 80028c4:	f383 8811 	msr	BASEPRI, r3
 80028c8:	f3bf 8f6f 	isb	sy
 80028cc:	f3bf 8f4f 	dsb	sy
 80028d0:	b662      	cpsie	i
 80028d2:	e7fe      	b.n	80028d2 <xQueueGenericSend+0x46>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80028d4:	9e01      	ldr	r6, [sp, #4]
 80028d6:	2e00      	cmp	r6, #0
 80028d8:	f000 8084 	beq.w	80029e4 <xQueueGenericSend+0x158>
 80028dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028e0:	b672      	cpsid	i
 80028e2:	f383 8811 	msr	BASEPRI, r3
 80028e6:	f3bf 8f6f 	isb	sy
 80028ea:	f3bf 8f4f 	dsb	sy
 80028ee:	b662      	cpsie	i
 80028f0:	e7fe      	b.n	80028f0 <xQueueGenericSend+0x64>
				if( xTicksToWait == ( TickType_t ) 0 )
 80028f2:	9d01      	ldr	r5, [sp, #4]
 80028f4:	b91d      	cbnz	r5, 80028fe <xQueueGenericSend+0x72>
					taskEXIT_CRITICAL();
 80028f6:	f7ff fc7b 	bl	80021f0 <vPortExitCritical>
			return errQUEUE_FULL;
 80028fa:	2000      	movs	r0, #0
 80028fc:	e058      	b.n	80029b0 <xQueueGenericSend+0x124>
				else if( xEntryTimeSet == pdFALSE )
 80028fe:	b916      	cbnz	r6, 8002906 <xQueueGenericSend+0x7a>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002900:	a802      	add	r0, sp, #8
 8002902:	f000 ff6d 	bl	80037e0 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8002906:	f7ff fc73 	bl	80021f0 <vPortExitCritical>
		vTaskSuspendAll();
 800290a:	f000 fda9 	bl	8003460 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800290e:	f7ff fc49 	bl	80021a4 <vPortEnterCritical>
 8002912:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002916:	2bff      	cmp	r3, #255	; 0xff
 8002918:	d101      	bne.n	800291e <xQueueGenericSend+0x92>
 800291a:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
 800291e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8002922:	2bff      	cmp	r3, #255	; 0xff
 8002924:	d101      	bne.n	800292a <xQueueGenericSend+0x9e>
 8002926:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
 800292a:	f7ff fc61 	bl	80021f0 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800292e:	a901      	add	r1, sp, #4
 8002930:	a802      	add	r0, sp, #8
 8002932:	f000 ff61 	bl	80037f8 <xTaskCheckForTimeOut>
 8002936:	2800      	cmp	r0, #0
 8002938:	d143      	bne.n	80029c2 <xQueueGenericSend+0x136>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800293a:	f7ff fc33 	bl	80021a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800293e:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8002940:	6be5      	ldr	r5, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8002942:	f7ff fc55 	bl	80021f0 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002946:	42ae      	cmp	r6, r5
 8002948:	d135      	bne.n	80029b6 <xQueueGenericSend+0x12a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800294a:	9901      	ldr	r1, [sp, #4]
 800294c:	f104 0010 	add.w	r0, r4, #16
 8002950:	f000 fee6 	bl	8003720 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002954:	4620      	mov	r0, r4
 8002956:	f7ff fea4 	bl	80026a2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800295a:	f000 fe2b 	bl	80035b4 <xTaskResumeAll>
 800295e:	b938      	cbnz	r0, 8002970 <xQueueGenericSend+0xe4>
					portYIELD_WITHIN_API();
 8002960:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002964:	f8ca 3000 	str.w	r3, [sl]
 8002968:	f3bf 8f4f 	dsb	sy
 800296c:	f3bf 8f6f 	isb	sy
 8002970:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8002972:	f7ff fc17 	bl	80021a4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002976:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002978:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800297a:	429a      	cmp	r2, r3
 800297c:	d301      	bcc.n	8002982 <xQueueGenericSend+0xf6>
 800297e:	2f02      	cmp	r7, #2
 8002980:	d1b7      	bne.n	80028f2 <xQueueGenericSend+0x66>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002982:	463a      	mov	r2, r7
 8002984:	4649      	mov	r1, r9
 8002986:	4620      	mov	r0, r4
 8002988:	f7ff fe43 	bl	8002612 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800298c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800298e:	b11b      	cbz	r3, 8002998 <xQueueGenericSend+0x10c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002990:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002994:	f000 fee0 	bl	8003758 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8002998:	b138      	cbz	r0, 80029aa <xQueueGenericSend+0x11e>
						queueYIELD_IF_USING_PREEMPTION();
 800299a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800299e:	4b19      	ldr	r3, [pc, #100]	; (8002a04 <xQueueGenericSend+0x178>)
 80029a0:	601a      	str	r2, [r3, #0]
 80029a2:	f3bf 8f4f 	dsb	sy
 80029a6:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80029aa:	f7ff fc21 	bl	80021f0 <vPortExitCritical>
				return pdPASS;
 80029ae:	2001      	movs	r0, #1
}
 80029b0:	b004      	add	sp, #16
 80029b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				prvUnlockQueue( pxQueue );
 80029b6:	4620      	mov	r0, r4
 80029b8:	f7ff fe73 	bl	80026a2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80029bc:	f000 fdfa 	bl	80035b4 <xTaskResumeAll>
 80029c0:	e7d6      	b.n	8002970 <xQueueGenericSend+0xe4>
			prvUnlockQueue( pxQueue );
 80029c2:	4620      	mov	r0, r4
 80029c4:	f7ff fe6d 	bl	80026a2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80029c8:	f000 fdf4 	bl	80035b4 <xTaskResumeAll>
 80029cc:	e795      	b.n	80028fa <xQueueGenericSend+0x6e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80029ce:	2f02      	cmp	r7, #2
 80029d0:	d102      	bne.n	80029d8 <xQueueGenericSend+0x14c>
 80029d2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d10a      	bne.n	80029ee <xQueueGenericSend+0x162>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80029d8:	f000 ff54 	bl	8003884 <xTaskGetSchedulerState>
 80029dc:	2800      	cmp	r0, #0
 80029de:	f43f af79 	beq.w	80028d4 <xQueueGenericSend+0x48>
 80029e2:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 80029e4:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 80029e8:	f8df a018 	ldr.w	sl, [pc, #24]	; 8002a04 <xQueueGenericSend+0x178>
 80029ec:	e7c1      	b.n	8002972 <xQueueGenericSend+0xe6>
 80029ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029f2:	b672      	cpsid	i
 80029f4:	f383 8811 	msr	BASEPRI, r3
 80029f8:	f3bf 8f6f 	isb	sy
 80029fc:	f3bf 8f4f 	dsb	sy
 8002a00:	b662      	cpsie	i
 8002a02:	e7fe      	b.n	8002a02 <xQueueGenericSend+0x176>
 8002a04:	e000ed04 	.word	0xe000ed04

08002a08 <prvInitialiseMutex>:
		if( pxNewQueue != NULL )
 8002a08:	b138      	cbz	r0, 8002a1a <prvInitialiseMutex+0x12>
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	6083      	str	r3, [r0, #8]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8002a0e:	461a      	mov	r2, r3
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8002a10:	6003      	str	r3, [r0, #0]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8002a12:	4619      	mov	r1, r3
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8002a14:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8002a16:	f7ff bf39 	b.w	800288c <xQueueGenericSend>
 8002a1a:	4770      	bx	lr

08002a1c <xQueueCreateMutex>:
	{
 8002a1c:	b510      	push	{r4, lr}
		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8002a1e:	4602      	mov	r2, r0
 8002a20:	2100      	movs	r1, #0
 8002a22:	2001      	movs	r0, #1
 8002a24:	f7ff ff0c 	bl	8002840 <xQueueGenericCreate>
 8002a28:	4604      	mov	r4, r0
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8002a2a:	f7ff ffed 	bl	8002a08 <prvInitialiseMutex>
	}
 8002a2e:	4620      	mov	r0, r4
 8002a30:	bd10      	pop	{r4, pc}

08002a32 <xQueueCreateMutexStatic>:
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8002a32:	2200      	movs	r2, #0
 8002a34:	460b      	mov	r3, r1
	{
 8002a36:	b513      	push	{r0, r1, r4, lr}
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8002a38:	4611      	mov	r1, r2
 8002a3a:	9000      	str	r0, [sp, #0]
 8002a3c:	2001      	movs	r0, #1
 8002a3e:	f7ff feab 	bl	8002798 <xQueueGenericCreateStatic>
 8002a42:	4604      	mov	r4, r0
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8002a44:	f7ff ffe0 	bl	8002a08 <prvInitialiseMutex>
	}
 8002a48:	4620      	mov	r0, r4
 8002a4a:	b002      	add	sp, #8
 8002a4c:	bd10      	pop	{r4, pc}

08002a4e <xQueueGenericSendFromISR>:
{
 8002a4e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002a52:	4688      	mov	r8, r1
 8002a54:	4691      	mov	r9, r2
 8002a56:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8002a58:	4604      	mov	r4, r0
 8002a5a:	b950      	cbnz	r0, 8002a72 <xQueueGenericSendFromISR+0x24>
 8002a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a60:	b672      	cpsid	i
 8002a62:	f383 8811 	msr	BASEPRI, r3
 8002a66:	f3bf 8f6f 	isb	sy
 8002a6a:	f3bf 8f4f 	dsb	sy
 8002a6e:	b662      	cpsie	i
 8002a70:	e7fe      	b.n	8002a70 <xQueueGenericSendFromISR+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002a72:	bb19      	cbnz	r1, 8002abc <xQueueGenericSendFromISR+0x6e>
 8002a74:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002a76:	b30b      	cbz	r3, 8002abc <xQueueGenericSendFromISR+0x6e>
 8002a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a7c:	b672      	cpsid	i
 8002a7e:	f383 8811 	msr	BASEPRI, r3
 8002a82:	f3bf 8f6f 	isb	sy
 8002a86:	f3bf 8f4f 	dsb	sy
 8002a8a:	b662      	cpsie	i
 8002a8c:	e7fe      	b.n	8002a8c <xQueueGenericSendFromISR+0x3e>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a8e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002a92:	f000 fe61 	bl	8003758 <xTaskRemoveFromEventList>
 8002a96:	2800      	cmp	r0, #0
 8002a98:	d036      	beq.n	8002b08 <xQueueGenericSendFromISR+0xba>
							if( pxHigherPriorityTaskWoken != NULL )
 8002a9a:	f1b9 0f00 	cmp.w	r9, #0
 8002a9e:	d033      	beq.n	8002b08 <xQueueGenericSendFromISR+0xba>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002aa0:	2001      	movs	r0, #1
 8002aa2:	f8c9 0000 	str.w	r0, [r9]
	__asm volatile
 8002aa6:	f386 8811 	msr	BASEPRI, r6
}
 8002aaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002aae:	3501      	adds	r5, #1
 8002ab0:	b26d      	sxtb	r5, r5
 8002ab2:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 8002ab6:	e027      	b.n	8002b08 <xQueueGenericSendFromISR+0xba>
			xReturn = errQUEUE_FULL;
 8002ab8:	2000      	movs	r0, #0
 8002aba:	e7f4      	b.n	8002aa6 <xQueueGenericSendFromISR+0x58>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002abc:	2f02      	cmp	r7, #2
 8002abe:	d102      	bne.n	8002ac6 <xQueueGenericSendFromISR+0x78>
 8002ac0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d122      	bne.n	8002b0c <xQueueGenericSendFromISR+0xbe>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002ac6:	f7ff fc75 	bl	80023b4 <vPortValidateInterruptPriority>
	__asm volatile
 8002aca:	f3ef 8611 	mrs	r6, BASEPRI
 8002ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ad2:	b672      	cpsid	i
 8002ad4:	f383 8811 	msr	BASEPRI, r3
 8002ad8:	f3bf 8f6f 	isb	sy
 8002adc:	f3bf 8f4f 	dsb	sy
 8002ae0:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002ae2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002ae4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d301      	bcc.n	8002aee <xQueueGenericSendFromISR+0xa0>
 8002aea:	2f02      	cmp	r7, #2
 8002aec:	d1e4      	bne.n	8002ab8 <xQueueGenericSendFromISR+0x6a>
			const int8_t cTxLock = pxQueue->cTxLock;
 8002aee:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002af2:	463a      	mov	r2, r7
 8002af4:	4641      	mov	r1, r8
 8002af6:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 8002af8:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002afa:	f7ff fd8a 	bl	8002612 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8002afe:	1c6b      	adds	r3, r5, #1
 8002b00:	d1d5      	bne.n	8002aae <xQueueGenericSendFromISR+0x60>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d1c2      	bne.n	8002a8e <xQueueGenericSendFromISR+0x40>
			xReturn = pdPASS;
 8002b08:	2001      	movs	r0, #1
 8002b0a:	e7cc      	b.n	8002aa6 <xQueueGenericSendFromISR+0x58>
	__asm volatile
 8002b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b10:	b672      	cpsid	i
 8002b12:	f383 8811 	msr	BASEPRI, r3
 8002b16:	f3bf 8f6f 	isb	sy
 8002b1a:	f3bf 8f4f 	dsb	sy
 8002b1e:	b662      	cpsie	i
 8002b20:	e7fe      	b.n	8002b20 <xQueueGenericSendFromISR+0xd2>

08002b22 <xQueueGiveFromISR>:
{
 8002b22:	b570      	push	{r4, r5, r6, lr}
 8002b24:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8002b26:	4604      	mov	r4, r0
 8002b28:	b950      	cbnz	r0, 8002b40 <xQueueGiveFromISR+0x1e>
 8002b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b2e:	b672      	cpsid	i
 8002b30:	f383 8811 	msr	BASEPRI, r3
 8002b34:	f3bf 8f6f 	isb	sy
 8002b38:	f3bf 8f4f 	dsb	sy
 8002b3c:	b662      	cpsie	i
 8002b3e:	e7fe      	b.n	8002b3e <xQueueGiveFromISR+0x1c>
	configASSERT( pxQueue->uxItemSize == 0 );
 8002b40:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002b42:	b153      	cbz	r3, 8002b5a <xQueueGiveFromISR+0x38>
 8002b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b48:	b672      	cpsid	i
 8002b4a:	f383 8811 	msr	BASEPRI, r3
 8002b4e:	f3bf 8f6f 	isb	sy
 8002b52:	f3bf 8f4f 	dsb	sy
 8002b56:	b662      	cpsie	i
 8002b58:	e7fe      	b.n	8002b58 <xQueueGiveFromISR+0x36>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8002b5a:	6803      	ldr	r3, [r0, #0]
 8002b5c:	b913      	cbnz	r3, 8002b64 <xQueueGiveFromISR+0x42>
 8002b5e:	6883      	ldr	r3, [r0, #8]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d130      	bne.n	8002bc6 <xQueueGiveFromISR+0xa4>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002b64:	f7ff fc26 	bl	80023b4 <vPortValidateInterruptPriority>
	__asm volatile
 8002b68:	f3ef 8611 	mrs	r6, BASEPRI
 8002b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b70:	b672      	cpsid	i
 8002b72:	f383 8811 	msr	BASEPRI, r3
 8002b76:	f3bf 8f6f 	isb	sy
 8002b7a:	f3bf 8f4f 	dsb	sy
 8002b7e:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002b80:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8002b82:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d301      	bcc.n	8002b8c <xQueueGiveFromISR+0x6a>
			xReturn = errQUEUE_FULL;
 8002b88:	2000      	movs	r0, #0
 8002b8a:	e014      	b.n	8002bb6 <xQueueGiveFromISR+0x94>
			const int8_t cTxLock = pxQueue->cTxLock;
 8002b8c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002b90:	3201      	adds	r2, #1
			const int8_t cTxLock = pxQueue->cTxLock;
 8002b92:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002b94:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 8002b96:	1c5a      	adds	r2, r3, #1
 8002b98:	d110      	bne.n	8002bbc <xQueueGiveFromISR+0x9a>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002b9c:	b90b      	cbnz	r3, 8002ba2 <xQueueGiveFromISR+0x80>
			xReturn = pdPASS;
 8002b9e:	2001      	movs	r0, #1
 8002ba0:	e009      	b.n	8002bb6 <xQueueGiveFromISR+0x94>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ba2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002ba6:	f000 fdd7 	bl	8003758 <xTaskRemoveFromEventList>
 8002baa:	2800      	cmp	r0, #0
 8002bac:	d0f7      	beq.n	8002b9e <xQueueGiveFromISR+0x7c>
							if( pxHigherPriorityTaskWoken != NULL )
 8002bae:	2d00      	cmp	r5, #0
 8002bb0:	d0f5      	beq.n	8002b9e <xQueueGiveFromISR+0x7c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002bb2:	2001      	movs	r0, #1
 8002bb4:	6028      	str	r0, [r5, #0]
	__asm volatile
 8002bb6:	f386 8811 	msr	BASEPRI, r6
}
 8002bba:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002bbc:	3301      	adds	r3, #1
 8002bbe:	b25b      	sxtb	r3, r3
 8002bc0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002bc4:	e7eb      	b.n	8002b9e <xQueueGiveFromISR+0x7c>
	__asm volatile
 8002bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bca:	b672      	cpsid	i
 8002bcc:	f383 8811 	msr	BASEPRI, r3
 8002bd0:	f3bf 8f6f 	isb	sy
 8002bd4:	f3bf 8f4f 	dsb	sy
 8002bd8:	b662      	cpsie	i
 8002bda:	e7fe      	b.n	8002bda <xQueueGiveFromISR+0xb8>

08002bdc <xQueueReceive>:
{
 8002bdc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002be0:	b085      	sub	sp, #20
 8002be2:	4688      	mov	r8, r1
	configASSERT( ( pxQueue ) );
 8002be4:	4604      	mov	r4, r0
{
 8002be6:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8002be8:	b950      	cbnz	r0, 8002c00 <xQueueReceive+0x24>
 8002bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bee:	b672      	cpsid	i
 8002bf0:	f383 8811 	msr	BASEPRI, r3
 8002bf4:	f3bf 8f6f 	isb	sy
 8002bf8:	f3bf 8f4f 	dsb	sy
 8002bfc:	b662      	cpsie	i
 8002bfe:	e7fe      	b.n	8002bfe <xQueueReceive+0x22>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c00:	2900      	cmp	r1, #0
 8002c02:	f040 808a 	bne.w	8002d1a <xQueueReceive+0x13e>
 8002c06:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	f000 8086 	beq.w	8002d1a <xQueueReceive+0x13e>
 8002c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c12:	b672      	cpsid	i
 8002c14:	f383 8811 	msr	BASEPRI, r3
 8002c18:	f3bf 8f6f 	isb	sy
 8002c1c:	f3bf 8f4f 	dsb	sy
 8002c20:	b662      	cpsie	i
 8002c22:	e7fe      	b.n	8002c22 <xQueueReceive+0x46>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002c24:	9e01      	ldr	r6, [sp, #4]
 8002c26:	2e00      	cmp	r6, #0
 8002c28:	d07c      	beq.n	8002d24 <xQueueReceive+0x148>
 8002c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c2e:	b672      	cpsid	i
 8002c30:	f383 8811 	msr	BASEPRI, r3
 8002c34:	f3bf 8f6f 	isb	sy
 8002c38:	f3bf 8f4f 	dsb	sy
 8002c3c:	b662      	cpsie	i
 8002c3e:	e7fe      	b.n	8002c3e <xQueueReceive+0x62>
				if( xTicksToWait == ( TickType_t ) 0 )
 8002c40:	9d01      	ldr	r5, [sp, #4]
 8002c42:	b91d      	cbnz	r5, 8002c4c <xQueueReceive+0x70>
					taskEXIT_CRITICAL();
 8002c44:	f7ff fad4 	bl	80021f0 <vPortExitCritical>
				return errQUEUE_EMPTY;
 8002c48:	2000      	movs	r0, #0
 8002c4a:	e052      	b.n	8002cf2 <xQueueReceive+0x116>
				else if( xEntryTimeSet == pdFALSE )
 8002c4c:	b916      	cbnz	r6, 8002c54 <xQueueReceive+0x78>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002c4e:	a802      	add	r0, sp, #8
 8002c50:	f000 fdc6 	bl	80037e0 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8002c54:	f7ff facc 	bl	80021f0 <vPortExitCritical>
		vTaskSuspendAll();
 8002c58:	f000 fc02 	bl	8003460 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002c5c:	f7ff faa2 	bl	80021a4 <vPortEnterCritical>
 8002c60:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002c64:	2bff      	cmp	r3, #255	; 0xff
 8002c66:	d101      	bne.n	8002c6c <xQueueReceive+0x90>
 8002c68:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 8002c6c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8002c70:	2bff      	cmp	r3, #255	; 0xff
 8002c72:	d101      	bne.n	8002c78 <xQueueReceive+0x9c>
 8002c74:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002c78:	f7ff faba 	bl	80021f0 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002c7c:	a901      	add	r1, sp, #4
 8002c7e:	a802      	add	r0, sp, #8
 8002c80:	f000 fdba 	bl	80037f8 <xTaskCheckForTimeOut>
 8002c84:	2800      	cmp	r0, #0
 8002c86:	d13d      	bne.n	8002d04 <xQueueReceive+0x128>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002c88:	4620      	mov	r0, r4
 8002c8a:	f7ff fcb7 	bl	80025fc <prvIsQueueEmpty>
 8002c8e:	b398      	cbz	r0, 8002cf8 <xQueueReceive+0x11c>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002c90:	9901      	ldr	r1, [sp, #4]
 8002c92:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002c96:	f000 fd43 	bl	8003720 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002c9a:	4620      	mov	r0, r4
 8002c9c:	f7ff fd01 	bl	80026a2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002ca0:	f000 fc88 	bl	80035b4 <xTaskResumeAll>
 8002ca4:	b938      	cbnz	r0, 8002cb6 <xQueueReceive+0xda>
					portYIELD_WITHIN_API();
 8002ca6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002caa:	f8c9 3000 	str.w	r3, [r9]
 8002cae:	f3bf 8f4f 	dsb	sy
 8002cb2:	f3bf 8f6f 	isb	sy
 8002cb6:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8002cb8:	f7ff fa74 	bl	80021a4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002cbc:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002cbe:	2d00      	cmp	r5, #0
 8002cc0:	d0be      	beq.n	8002c40 <xQueueReceive+0x64>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002cc2:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002cc4:	4641      	mov	r1, r8
 8002cc6:	4620      	mov	r0, r4
 8002cc8:	f7ff fcd6 	bl	8002678 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002ccc:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002cce:	6923      	ldr	r3, [r4, #16]
 8002cd0:	b163      	cbz	r3, 8002cec <xQueueReceive+0x110>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002cd2:	f104 0010 	add.w	r0, r4, #16
 8002cd6:	f000 fd3f 	bl	8003758 <xTaskRemoveFromEventList>
 8002cda:	b138      	cbz	r0, 8002cec <xQueueReceive+0x110>
						queueYIELD_IF_USING_PREEMPTION();
 8002cdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ce0:	4b12      	ldr	r3, [pc, #72]	; (8002d2c <xQueueReceive+0x150>)
 8002ce2:	601a      	str	r2, [r3, #0]
 8002ce4:	f3bf 8f4f 	dsb	sy
 8002ce8:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8002cec:	f7ff fa80 	bl	80021f0 <vPortExitCritical>
				return pdPASS;
 8002cf0:	2001      	movs	r0, #1
}
 8002cf2:	b005      	add	sp, #20
 8002cf4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				prvUnlockQueue( pxQueue );
 8002cf8:	4620      	mov	r0, r4
 8002cfa:	f7ff fcd2 	bl	80026a2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002cfe:	f000 fc59 	bl	80035b4 <xTaskResumeAll>
 8002d02:	e7d8      	b.n	8002cb6 <xQueueReceive+0xda>
			prvUnlockQueue( pxQueue );
 8002d04:	4620      	mov	r0, r4
 8002d06:	f7ff fccc 	bl	80026a2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002d0a:	f000 fc53 	bl	80035b4 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002d0e:	4620      	mov	r0, r4
 8002d10:	f7ff fc74 	bl	80025fc <prvIsQueueEmpty>
 8002d14:	2800      	cmp	r0, #0
 8002d16:	d0ce      	beq.n	8002cb6 <xQueueReceive+0xda>
 8002d18:	e796      	b.n	8002c48 <xQueueReceive+0x6c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002d1a:	f000 fdb3 	bl	8003884 <xTaskGetSchedulerState>
 8002d1e:	2800      	cmp	r0, #0
 8002d20:	d080      	beq.n	8002c24 <xQueueReceive+0x48>
 8002d22:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8002d24:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 8002d26:	f8df 9004 	ldr.w	r9, [pc, #4]	; 8002d2c <xQueueReceive+0x150>
 8002d2a:	e7c5      	b.n	8002cb8 <xQueueReceive+0xdc>
 8002d2c:	e000ed04 	.word	0xe000ed04

08002d30 <xQueueSemaphoreTake>:
{
 8002d30:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	configASSERT( ( pxQueue ) );
 8002d34:	4604      	mov	r4, r0
{
 8002d36:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8002d38:	b950      	cbnz	r0, 8002d50 <xQueueSemaphoreTake+0x20>
 8002d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d3e:	b672      	cpsid	i
 8002d40:	f383 8811 	msr	BASEPRI, r3
 8002d44:	f3bf 8f6f 	isb	sy
 8002d48:	f3bf 8f4f 	dsb	sy
 8002d4c:	b662      	cpsie	i
 8002d4e:	e7fe      	b.n	8002d4e <xQueueSemaphoreTake+0x1e>
	configASSERT( pxQueue->uxItemSize == 0 );
 8002d50:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8002d52:	b155      	cbz	r5, 8002d6a <xQueueSemaphoreTake+0x3a>
 8002d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d58:	b672      	cpsid	i
 8002d5a:	f383 8811 	msr	BASEPRI, r3
 8002d5e:	f3bf 8f6f 	isb	sy
 8002d62:	f3bf 8f4f 	dsb	sy
 8002d66:	b662      	cpsie	i
 8002d68:	e7fe      	b.n	8002d68 <xQueueSemaphoreTake+0x38>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002d6a:	f000 fd8b 	bl	8003884 <xTaskGetSchedulerState>
 8002d6e:	b918      	cbnz	r0, 8002d78 <xQueueSemaphoreTake+0x48>
 8002d70:	9d01      	ldr	r5, [sp, #4]
 8002d72:	2d00      	cmp	r5, #0
 8002d74:	f040 8097 	bne.w	8002ea6 <xQueueSemaphoreTake+0x176>
 8002d78:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 8002d7a:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 8002d7c:	f8df 813c 	ldr.w	r8, [pc, #316]	; 8002ebc <xQueueSemaphoreTake+0x18c>
		taskENTER_CRITICAL();
 8002d80:	f7ff fa10 	bl	80021a4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8002d84:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8002d86:	b1e3      	cbz	r3, 8002dc2 <xQueueSemaphoreTake+0x92>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8002d88:	3b01      	subs	r3, #1
 8002d8a:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002d8c:	6823      	ldr	r3, [r4, #0]
 8002d8e:	b913      	cbnz	r3, 8002d96 <xQueueSemaphoreTake+0x66>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8002d90:	f000 fe8c 	bl	8003aac <pvTaskIncrementMutexHeldCount>
 8002d94:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d96:	6923      	ldr	r3, [r4, #16]
 8002d98:	b163      	cbz	r3, 8002db4 <xQueueSemaphoreTake+0x84>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d9a:	f104 0010 	add.w	r0, r4, #16
 8002d9e:	f000 fcdb 	bl	8003758 <xTaskRemoveFromEventList>
 8002da2:	b138      	cbz	r0, 8002db4 <xQueueSemaphoreTake+0x84>
						queueYIELD_IF_USING_PREEMPTION();
 8002da4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002da8:	4b44      	ldr	r3, [pc, #272]	; (8002ebc <xQueueSemaphoreTake+0x18c>)
 8002daa:	601a      	str	r2, [r3, #0]
 8002dac:	f3bf 8f4f 	dsb	sy
 8002db0:	f3bf 8f6f 	isb	sy
				return pdPASS;
 8002db4:	2501      	movs	r5, #1
				taskEXIT_CRITICAL();
 8002db6:	f7ff fa1b 	bl	80021f0 <vPortExitCritical>
}
 8002dba:	4628      	mov	r0, r5
 8002dbc:	b004      	add	sp, #16
 8002dbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if( xTicksToWait == ( TickType_t ) 0 )
 8002dc2:	9b01      	ldr	r3, [sp, #4]
 8002dc4:	b973      	cbnz	r3, 8002de4 <xQueueSemaphoreTake+0xb4>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8002dc6:	b155      	cbz	r5, 8002dde <xQueueSemaphoreTake+0xae>
 8002dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dcc:	b672      	cpsid	i
 8002dce:	f383 8811 	msr	BASEPRI, r3
 8002dd2:	f3bf 8f6f 	isb	sy
 8002dd6:	f3bf 8f4f 	dsb	sy
 8002dda:	b662      	cpsie	i
 8002ddc:	e7fe      	b.n	8002ddc <xQueueSemaphoreTake+0xac>
					taskEXIT_CRITICAL();
 8002dde:	f7ff fa07 	bl	80021f0 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8002de2:	e7ea      	b.n	8002dba <xQueueSemaphoreTake+0x8a>
				else if( xEntryTimeSet == pdFALSE )
 8002de4:	b916      	cbnz	r6, 8002dec <xQueueSemaphoreTake+0xbc>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002de6:	a802      	add	r0, sp, #8
 8002de8:	f000 fcfa 	bl	80037e0 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8002dec:	f7ff fa00 	bl	80021f0 <vPortExitCritical>
		vTaskSuspendAll();
 8002df0:	f000 fb36 	bl	8003460 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002df4:	f7ff f9d6 	bl	80021a4 <vPortEnterCritical>
 8002df8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002dfc:	2bff      	cmp	r3, #255	; 0xff
 8002dfe:	d101      	bne.n	8002e04 <xQueueSemaphoreTake+0xd4>
 8002e00:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 8002e04:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8002e08:	2bff      	cmp	r3, #255	; 0xff
 8002e0a:	d101      	bne.n	8002e10 <xQueueSemaphoreTake+0xe0>
 8002e0c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002e10:	f7ff f9ee 	bl	80021f0 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002e14:	a901      	add	r1, sp, #4
 8002e16:	a802      	add	r0, sp, #8
 8002e18:	f000 fcee 	bl	80037f8 <xTaskCheckForTimeOut>
 8002e1c:	bb40      	cbnz	r0, 8002e70 <xQueueSemaphoreTake+0x140>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002e1e:	4620      	mov	r0, r4
 8002e20:	f7ff fbec 	bl	80025fc <prvIsQueueEmpty>
 8002e24:	b1f0      	cbz	r0, 8002e64 <xQueueSemaphoreTake+0x134>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002e26:	6823      	ldr	r3, [r4, #0]
 8002e28:	b93b      	cbnz	r3, 8002e3a <xQueueSemaphoreTake+0x10a>
						taskENTER_CRITICAL();
 8002e2a:	f7ff f9bb 	bl	80021a4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002e2e:	68a0      	ldr	r0, [r4, #8]
 8002e30:	f000 fd38 	bl	80038a4 <xTaskPriorityInherit>
 8002e34:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 8002e36:	f7ff f9db 	bl	80021f0 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002e3a:	9901      	ldr	r1, [sp, #4]
 8002e3c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002e40:	f000 fc6e 	bl	8003720 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002e44:	4620      	mov	r0, r4
 8002e46:	f7ff fc2c 	bl	80026a2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002e4a:	f000 fbb3 	bl	80035b4 <xTaskResumeAll>
 8002e4e:	b938      	cbnz	r0, 8002e60 <xQueueSemaphoreTake+0x130>
					portYIELD_WITHIN_API();
 8002e50:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002e54:	f8c8 3000 	str.w	r3, [r8]
 8002e58:	f3bf 8f4f 	dsb	sy
 8002e5c:	f3bf 8f6f 	isb	sy
 8002e60:	2601      	movs	r6, #1
 8002e62:	e78d      	b.n	8002d80 <xQueueSemaphoreTake+0x50>
				prvUnlockQueue( pxQueue );
 8002e64:	4620      	mov	r0, r4
 8002e66:	f7ff fc1c 	bl	80026a2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002e6a:	f000 fba3 	bl	80035b4 <xTaskResumeAll>
 8002e6e:	e7f7      	b.n	8002e60 <xQueueSemaphoreTake+0x130>
			prvUnlockQueue( pxQueue );
 8002e70:	4620      	mov	r0, r4
 8002e72:	f7ff fc16 	bl	80026a2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002e76:	f000 fb9d 	bl	80035b4 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002e7a:	4620      	mov	r0, r4
 8002e7c:	f7ff fbbe 	bl	80025fc <prvIsQueueEmpty>
 8002e80:	2800      	cmp	r0, #0
 8002e82:	d0ed      	beq.n	8002e60 <xQueueSemaphoreTake+0x130>
					if( xInheritanceOccurred != pdFALSE )
 8002e84:	2d00      	cmp	r5, #0
 8002e86:	d098      	beq.n	8002dba <xQueueSemaphoreTake+0x8a>
						taskENTER_CRITICAL();
 8002e88:	f7ff f98c 	bl	80021a4 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8002e8c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002e8e:	b119      	cbz	r1, 8002e98 <xQueueSemaphoreTake+0x168>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8002e90:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002e92:	6819      	ldr	r1, [r3, #0]
 8002e94:	f1c1 0107 	rsb	r1, r1, #7
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8002e98:	68a0      	ldr	r0, [r4, #8]
				return errQUEUE_EMPTY;
 8002e9a:	2500      	movs	r5, #0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8002e9c:	f000 fdaa 	bl	80039f4 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 8002ea0:	f7ff f9a6 	bl	80021f0 <vPortExitCritical>
 8002ea4:	e789      	b.n	8002dba <xQueueSemaphoreTake+0x8a>
 8002ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eaa:	b672      	cpsid	i
 8002eac:	f383 8811 	msr	BASEPRI, r3
 8002eb0:	f3bf 8f6f 	isb	sy
 8002eb4:	f3bf 8f4f 	dsb	sy
 8002eb8:	b662      	cpsie	i
 8002eba:	e7fe      	b.n	8002eba <xQueueSemaphoreTake+0x18a>
 8002ebc:	e000ed04 	.word	0xe000ed04

08002ec0 <xQueueReceiveFromISR>:
{
 8002ec0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002ec4:	4689      	mov	r9, r1
 8002ec6:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 8002ec8:	4605      	mov	r5, r0
 8002eca:	b950      	cbnz	r0, 8002ee2 <xQueueReceiveFromISR+0x22>
 8002ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ed0:	b672      	cpsid	i
 8002ed2:	f383 8811 	msr	BASEPRI, r3
 8002ed6:	f3bf 8f6f 	isb	sy
 8002eda:	f3bf 8f4f 	dsb	sy
 8002ede:	b662      	cpsie	i
 8002ee0:	e7fe      	b.n	8002ee0 <xQueueReceiveFromISR+0x20>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002ee2:	bb81      	cbnz	r1, 8002f46 <xQueueReceiveFromISR+0x86>
 8002ee4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002ee6:	b373      	cbz	r3, 8002f46 <xQueueReceiveFromISR+0x86>
 8002ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eec:	b672      	cpsid	i
 8002eee:	f383 8811 	msr	BASEPRI, r3
 8002ef2:	f3bf 8f6f 	isb	sy
 8002ef6:	f3bf 8f4f 	dsb	sy
 8002efa:	b662      	cpsie	i
 8002efc:	e7fe      	b.n	8002efc <xQueueReceiveFromISR+0x3c>
			const int8_t cRxLock = pxQueue->cRxLock;
 8002efe:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002f02:	4649      	mov	r1, r9
 8002f04:	4628      	mov	r0, r5
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002f06:	3c01      	subs	r4, #1
			const int8_t cRxLock = pxQueue->cRxLock;
 8002f08:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002f0a:	f7ff fbb5 	bl	8002678 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002f0e:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8002f10:	1c73      	adds	r3, r6, #1
 8002f12:	d113      	bne.n	8002f3c <xQueueReceiveFromISR+0x7c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f14:	692b      	ldr	r3, [r5, #16]
 8002f16:	b90b      	cbnz	r3, 8002f1c <xQueueReceiveFromISR+0x5c>
			xReturn = pdPASS;
 8002f18:	2001      	movs	r0, #1
 8002f1a:	e00b      	b.n	8002f34 <xQueueReceiveFromISR+0x74>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f1c:	f105 0010 	add.w	r0, r5, #16
 8002f20:	f000 fc1a 	bl	8003758 <xTaskRemoveFromEventList>
 8002f24:	2800      	cmp	r0, #0
 8002f26:	d0f7      	beq.n	8002f18 <xQueueReceiveFromISR+0x58>
						if( pxHigherPriorityTaskWoken != NULL )
 8002f28:	f1b8 0f00 	cmp.w	r8, #0
 8002f2c:	d0f4      	beq.n	8002f18 <xQueueReceiveFromISR+0x58>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8002f2e:	2001      	movs	r0, #1
 8002f30:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 8002f34:	f387 8811 	msr	BASEPRI, r7
}
 8002f38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8002f3c:	3601      	adds	r6, #1
 8002f3e:	b276      	sxtb	r6, r6
 8002f40:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
 8002f44:	e7e8      	b.n	8002f18 <xQueueReceiveFromISR+0x58>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002f46:	f7ff fa35 	bl	80023b4 <vPortValidateInterruptPriority>
	__asm volatile
 8002f4a:	f3ef 8711 	mrs	r7, BASEPRI
 8002f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f52:	b672      	cpsid	i
 8002f54:	f383 8811 	msr	BASEPRI, r3
 8002f58:	f3bf 8f6f 	isb	sy
 8002f5c:	f3bf 8f4f 	dsb	sy
 8002f60:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002f62:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002f64:	2c00      	cmp	r4, #0
 8002f66:	d1ca      	bne.n	8002efe <xQueueReceiveFromISR+0x3e>
			xReturn = pdFAIL;
 8002f68:	4620      	mov	r0, r4
 8002f6a:	e7e3      	b.n	8002f34 <xQueueReceiveFromISR+0x74>

08002f6c <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002f6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f70:	4606      	mov	r6, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002f72:	f7ff f917 	bl	80021a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002f76:	4b2d      	ldr	r3, [pc, #180]	; (800302c <prvAddNewTaskToReadyList+0xc0>)
		if( pxCurrentTCB == NULL )
 8002f78:	4c2d      	ldr	r4, [pc, #180]	; (8003030 <prvAddNewTaskToReadyList+0xc4>)
		uxCurrentNumberOfTasks++;
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	4f2d      	ldr	r7, [pc, #180]	; (8003034 <prvAddNewTaskToReadyList+0xc8>)
 8002f7e:	3201      	adds	r2, #1
 8002f80:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8002f82:	6825      	ldr	r5, [r4, #0]
 8002f84:	2d00      	cmp	r5, #0
 8002f86:	d145      	bne.n	8003014 <prvAddNewTaskToReadyList+0xa8>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002f88:	6026      	str	r6, [r4, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d11c      	bne.n	8002fca <prvAddNewTaskToReadyList+0x5e>
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002f90:	1978      	adds	r0, r7, r5
 8002f92:	3514      	adds	r5, #20
 8002f94:	f7ff f858 	bl	8002048 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002f98:	2d8c      	cmp	r5, #140	; 0x8c
 8002f9a:	d1f9      	bne.n	8002f90 <prvAddNewTaskToReadyList+0x24>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002f9c:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8003060 <prvAddNewTaskToReadyList+0xf4>
	vListInitialise( &xDelayedTaskList2 );
 8002fa0:	4d25      	ldr	r5, [pc, #148]	; (8003038 <prvAddNewTaskToReadyList+0xcc>)
	vListInitialise( &xDelayedTaskList1 );
 8002fa2:	4640      	mov	r0, r8
 8002fa4:	f7ff f850 	bl	8002048 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002fa8:	4628      	mov	r0, r5
 8002faa:	f7ff f84d 	bl	8002048 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002fae:	4823      	ldr	r0, [pc, #140]	; (800303c <prvAddNewTaskToReadyList+0xd0>)
 8002fb0:	f7ff f84a 	bl	8002048 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002fb4:	4822      	ldr	r0, [pc, #136]	; (8003040 <prvAddNewTaskToReadyList+0xd4>)
 8002fb6:	f7ff f847 	bl	8002048 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002fba:	4822      	ldr	r0, [pc, #136]	; (8003044 <prvAddNewTaskToReadyList+0xd8>)
 8002fbc:	f7ff f844 	bl	8002048 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002fc0:	4b21      	ldr	r3, [pc, #132]	; (8003048 <prvAddNewTaskToReadyList+0xdc>)
 8002fc2:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002fc6:	4b21      	ldr	r3, [pc, #132]	; (800304c <prvAddNewTaskToReadyList+0xe0>)
 8002fc8:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8002fca:	4a21      	ldr	r2, [pc, #132]	; (8003050 <prvAddNewTaskToReadyList+0xe4>)
		prvAddTaskToReadyList( pxNewTCB );
 8002fcc:	4921      	ldr	r1, [pc, #132]	; (8003054 <prvAddNewTaskToReadyList+0xe8>)
		uxTaskNumber++;
 8002fce:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8002fd0:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8002fda:	4093      	lsls	r3, r2
 8002fdc:	4303      	orrs	r3, r0
 8002fde:	2014      	movs	r0, #20
 8002fe0:	600b      	str	r3, [r1, #0]
 8002fe2:	1d31      	adds	r1, r6, #4
 8002fe4:	fb00 7002 	mla	r0, r0, r2, r7
 8002fe8:	f7ff f83c 	bl	8002064 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8002fec:	f7ff f900 	bl	80021f0 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8002ff0:	4b19      	ldr	r3, [pc, #100]	; (8003058 <prvAddNewTaskToReadyList+0xec>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	b163      	cbz	r3, 8003010 <prvAddNewTaskToReadyList+0xa4>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002ff6:	6823      	ldr	r3, [r4, #0]
 8002ff8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ffa:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d207      	bcs.n	8003010 <prvAddNewTaskToReadyList+0xa4>
			taskYIELD_IF_USING_PREEMPTION();
 8003000:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003004:	4b15      	ldr	r3, [pc, #84]	; (800305c <prvAddNewTaskToReadyList+0xf0>)
 8003006:	601a      	str	r2, [r3, #0]
 8003008:	f3bf 8f4f 	dsb	sy
 800300c:	f3bf 8f6f 	isb	sy
 8003010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 8003014:	4b10      	ldr	r3, [pc, #64]	; (8003058 <prvAddNewTaskToReadyList+0xec>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d1d6      	bne.n	8002fca <prvAddNewTaskToReadyList+0x5e>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800301c:	6823      	ldr	r3, [r4, #0]
 800301e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003020:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8003022:	429a      	cmp	r2, r3
 8003024:	d8d1      	bhi.n	8002fca <prvAddNewTaskToReadyList+0x5e>
					pxCurrentTCB = pxNewTCB;
 8003026:	6026      	str	r6, [r4, #0]
 8003028:	e7cf      	b.n	8002fca <prvAddNewTaskToReadyList+0x5e>
 800302a:	bf00      	nop
 800302c:	20006550 	.word	0x20006550
 8003030:	200064b8 	.word	0x200064b8
 8003034:	200064c4 	.word	0x200064c4
 8003038:	2000657c 	.word	0x2000657c
 800303c:	20006598 	.word	0x20006598
 8003040:	200065c4 	.word	0x200065c4
 8003044:	200065b0 	.word	0x200065b0
 8003048:	200064bc 	.word	0x200064bc
 800304c:	200064c0 	.word	0x200064c0
 8003050:	20006560 	.word	0x20006560
 8003054:	20006564 	.word	0x20006564
 8003058:	200065ac 	.word	0x200065ac
 800305c:	e000ed04 	.word	0xe000ed04
 8003060:	20006568 	.word	0x20006568

08003064 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003064:	4a06      	ldr	r2, [pc, #24]	; (8003080 <prvResetNextTaskUnblockTime+0x1c>)
 8003066:	6813      	ldr	r3, [r2, #0]
 8003068:	6819      	ldr	r1, [r3, #0]
 800306a:	4b06      	ldr	r3, [pc, #24]	; (8003084 <prvResetNextTaskUnblockTime+0x20>)
 800306c:	b919      	cbnz	r1, 8003076 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800306e:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003072:	601a      	str	r2, [r3, #0]
 8003074:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003076:	6812      	ldr	r2, [r2, #0]
 8003078:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800307a:	68d2      	ldr	r2, [r2, #12]
 800307c:	6852      	ldr	r2, [r2, #4]
 800307e:	e7f8      	b.n	8003072 <prvResetNextTaskUnblockTime+0xe>
 8003080:	200064bc 	.word	0x200064bc
 8003084:	20006590 	.word	0x20006590

08003088 <prvInitialiseNewTask.isra.2>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8003088:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800308c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800308e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8003092:	4680      	mov	r8, r0
 8003094:	4699      	mov	r9, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003096:	3a01      	subs	r2, #1
 8003098:	6b26      	ldr	r6, [r4, #48]	; 0x30
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800309a:	9f09      	ldr	r7, [sp, #36]	; 0x24
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800309c:	eb06 0682 	add.w	r6, r6, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80030a0:	f026 0607 	bic.w	r6, r6, #7
	if( pcName != NULL )
 80030a4:	b391      	cbz	r1, 800310c <prvInitialiseNewTask.isra.2+0x84>
 80030a6:	1e4b      	subs	r3, r1, #1
 80030a8:	f104 0234 	add.w	r2, r4, #52	; 0x34
 80030ac:	310f      	adds	r1, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80030ae:	7858      	ldrb	r0, [r3, #1]
 80030b0:	f802 0b01 	strb.w	r0, [r2], #1
			if( pcName[ x ] == ( char ) 0x00 )
 80030b4:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 80030b8:	b108      	cbz	r0, 80030be <prvInitialiseNewTask.isra.2+0x36>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80030ba:	428b      	cmp	r3, r1
 80030bc:	d1f7      	bne.n	80030ae <prvInitialiseNewTask.isra.2+0x26>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80030be:	2300      	movs	r3, #0
 80030c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80030c4:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 80030c6:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80030ca:	1d20      	adds	r0, r4, #4
 80030cc:	2d06      	cmp	r5, #6
		pxNewTCB->uxMutexesHeld = 0;
 80030ce:	f8c4 a048 	str.w	sl, [r4, #72]	; 0x48
 80030d2:	bf28      	it	cs
 80030d4:	2506      	movcs	r5, #6
	pxNewTCB->uxPriority = uxPriority;
 80030d6:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 80030d8:	6465      	str	r5, [r4, #68]	; 0x44
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80030da:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80030de:	f7fe ffbe 	bl	800205e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80030e2:	f104 0018 	add.w	r0, r4, #24
 80030e6:	f7fe ffba 	bl	800205e <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 80030ea:	f8c4 a04c 	str.w	sl, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80030ee:	6124      	str	r4, [r4, #16]
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80030f0:	464a      	mov	r2, r9
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80030f2:	61a5      	str	r5, [r4, #24]
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80030f4:	4641      	mov	r1, r8
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80030f6:	6264      	str	r4, [r4, #36]	; 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80030f8:	4630      	mov	r0, r6
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80030fa:	f884 a050 	strb.w	sl, [r4, #80]	; 0x50
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80030fe:	f7ff f827 	bl	8002150 <pxPortInitialiseStack>
 8003102:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8003104:	b107      	cbz	r7, 8003108 <prvInitialiseNewTask.isra.2+0x80>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003106:	603c      	str	r4, [r7, #0]
 8003108:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800310c:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
 8003110:	e7d8      	b.n	80030c4 <prvInitialiseNewTask.isra.2+0x3c>

08003112 <prvDeleteTCB>:
	{
 8003112:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003114:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
	{
 8003118:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800311a:	b93b      	cbnz	r3, 800312c <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 800311c:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800311e:	f7ff fa31 	bl	8002584 <vPortFree>
				vPortFree( pxTCB );
 8003122:	4620      	mov	r0, r4
	}
 8003124:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8003128:	f7ff ba2c 	b.w	8002584 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800312c:	2b01      	cmp	r3, #1
 800312e:	d0f9      	beq.n	8003124 <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003130:	2b02      	cmp	r3, #2
 8003132:	d00a      	beq.n	800314a <prvDeleteTCB+0x38>
	__asm volatile
 8003134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003138:	b672      	cpsid	i
 800313a:	f383 8811 	msr	BASEPRI, r3
 800313e:	f3bf 8f6f 	isb	sy
 8003142:	f3bf 8f4f 	dsb	sy
 8003146:	b662      	cpsie	i
 8003148:	e7fe      	b.n	8003148 <prvDeleteTCB+0x36>
 800314a:	bd10      	pop	{r4, pc}

0800314c <prvIdleTask>:
{
 800314c:	b580      	push	{r7, lr}
				taskYIELD();
 800314e:	f8df 805c 	ldr.w	r8, [pc, #92]	; 80031ac <prvIdleTask+0x60>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003152:	4f12      	ldr	r7, [pc, #72]	; (800319c <prvIdleTask+0x50>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003154:	4c12      	ldr	r4, [pc, #72]	; (80031a0 <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 8003156:	4d13      	ldr	r5, [pc, #76]	; (80031a4 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003158:	6823      	ldr	r3, [r4, #0]
 800315a:	b963      	cbnz	r3, 8003176 <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800315c:	4b12      	ldr	r3, [pc, #72]	; (80031a8 <prvIdleTask+0x5c>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	2b01      	cmp	r3, #1
 8003162:	d9f8      	bls.n	8003156 <prvIdleTask+0xa>
				taskYIELD();
 8003164:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003168:	f8c8 3000 	str.w	r3, [r8]
 800316c:	f3bf 8f4f 	dsb	sy
 8003170:	f3bf 8f6f 	isb	sy
 8003174:	e7ee      	b.n	8003154 <prvIdleTask+0x8>
			taskENTER_CRITICAL();
 8003176:	f7ff f815 	bl	80021a4 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800317e:	1d30      	adds	r0, r6, #4
 8003180:	f7fe ff93 	bl	80020aa <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003184:	682b      	ldr	r3, [r5, #0]
 8003186:	3b01      	subs	r3, #1
 8003188:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 800318a:	6823      	ldr	r3, [r4, #0]
 800318c:	3b01      	subs	r3, #1
 800318e:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8003190:	f7ff f82e 	bl	80021f0 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8003194:	4630      	mov	r0, r6
 8003196:	f7ff ffbc 	bl	8003112 <prvDeleteTCB>
 800319a:	e7dd      	b.n	8003158 <prvIdleTask+0xc>
 800319c:	200065c4 	.word	0x200065c4
 80031a0:	20006554 	.word	0x20006554
 80031a4:	20006550 	.word	0x20006550
 80031a8:	200064c4 	.word	0x200064c4
 80031ac:	e000ed04 	.word	0xe000ed04

080031b0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80031b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80031b2:	4b1b      	ldr	r3, [pc, #108]	; (8003220 <prvAddCurrentTaskToDelayedList+0x70>)
{
 80031b4:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80031b6:	4e1b      	ldr	r6, [pc, #108]	; (8003224 <prvAddCurrentTaskToDelayedList+0x74>)
{
 80031b8:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 80031ba:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80031bc:	6830      	ldr	r0, [r6, #0]
 80031be:	3004      	adds	r0, #4
 80031c0:	f7fe ff73 	bl	80020aa <uxListRemove>
 80031c4:	4633      	mov	r3, r6
 80031c6:	b940      	cbnz	r0, 80031da <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80031c8:	6831      	ldr	r1, [r6, #0]
 80031ca:	2001      	movs	r0, #1
 80031cc:	4e16      	ldr	r6, [pc, #88]	; (8003228 <prvAddCurrentTaskToDelayedList+0x78>)
 80031ce:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80031d0:	6832      	ldr	r2, [r6, #0]
 80031d2:	4088      	lsls	r0, r1
 80031d4:	ea22 0200 	bic.w	r2, r2, r0
 80031d8:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80031da:	1c62      	adds	r2, r4, #1
 80031dc:	d107      	bne.n	80031ee <prvAddCurrentTaskToDelayedList+0x3e>
 80031de:	b137      	cbz	r7, 80031ee <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80031e0:	6819      	ldr	r1, [r3, #0]
 80031e2:	4812      	ldr	r0, [pc, #72]	; (800322c <prvAddCurrentTaskToDelayedList+0x7c>)
 80031e4:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80031e6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80031ea:	f7fe bf3b 	b.w	8002064 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80031ee:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80031f0:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 80031f2:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80031f4:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 80031f6:	d907      	bls.n	8003208 <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80031f8:	4a0d      	ldr	r2, [pc, #52]	; (8003230 <prvAddCurrentTaskToDelayedList+0x80>)
 80031fa:	6810      	ldr	r0, [r2, #0]
 80031fc:	6819      	ldr	r1, [r3, #0]
}
 80031fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003202:	3104      	adds	r1, #4
 8003204:	f7fe bf3a 	b.w	800207c <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003208:	4a0a      	ldr	r2, [pc, #40]	; (8003234 <prvAddCurrentTaskToDelayedList+0x84>)
 800320a:	6810      	ldr	r0, [r2, #0]
 800320c:	6819      	ldr	r1, [r3, #0]
 800320e:	3104      	adds	r1, #4
 8003210:	f7fe ff34 	bl	800207c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003214:	4b08      	ldr	r3, [pc, #32]	; (8003238 <prvAddCurrentTaskToDelayedList+0x88>)
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	4294      	cmp	r4, r2
 800321a:	d200      	bcs.n	800321e <prvAddCurrentTaskToDelayedList+0x6e>
					xNextTaskUnblockTime = xTimeToWake;
 800321c:	601c      	str	r4, [r3, #0]
 800321e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003220:	200065d8 	.word	0x200065d8
 8003224:	200064b8 	.word	0x200064b8
 8003228:	20006564 	.word	0x20006564
 800322c:	200065b0 	.word	0x200065b0
 8003230:	200064c0 	.word	0x200064c0
 8003234:	200064bc 	.word	0x200064bc
 8003238:	20006590 	.word	0x20006590

0800323c <prvTaskIsTaskSuspended.part.0>:
 800323c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003240:	b672      	cpsid	i
 8003242:	f383 8811 	msr	BASEPRI, r3
 8003246:	f3bf 8f6f 	isb	sy
 800324a:	f3bf 8f4f 	dsb	sy
 800324e:	b662      	cpsie	i
 8003250:	e7fe      	b.n	8003250 <prvTaskIsTaskSuspended.part.0+0x14>

08003252 <xTaskCreateStatic>:
	{
 8003252:	b570      	push	{r4, r5, r6, lr}
 8003254:	b086      	sub	sp, #24
 8003256:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8003258:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 800325a:	b90d      	cbnz	r5, 8003260 <xTaskCreateStatic+0xe>
 800325c:	f7ff ffee 	bl	800323c <prvTaskIsTaskSuspended.part.0>
		configASSERT( pxTaskBuffer != NULL );
 8003260:	b954      	cbnz	r4, 8003278 <xTaskCreateStatic+0x26>
 8003262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003266:	b672      	cpsid	i
 8003268:	f383 8811 	msr	BASEPRI, r3
 800326c:	f3bf 8f6f 	isb	sy
 8003270:	f3bf 8f4f 	dsb	sy
 8003274:	b662      	cpsie	i
 8003276:	e7fe      	b.n	8003276 <xTaskCreateStatic+0x24>
			volatile size_t xSize = sizeof( StaticTask_t );
 8003278:	2654      	movs	r6, #84	; 0x54
 800327a:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800327c:	9e05      	ldr	r6, [sp, #20]
 800327e:	2e54      	cmp	r6, #84	; 0x54
 8003280:	d00a      	beq.n	8003298 <xTaskCreateStatic+0x46>
 8003282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003286:	b672      	cpsid	i
 8003288:	f383 8811 	msr	BASEPRI, r3
 800328c:	f3bf 8f6f 	isb	sy
 8003290:	f3bf 8f4f 	dsb	sy
 8003294:	b662      	cpsie	i
 8003296:	e7fe      	b.n	8003296 <xTaskCreateStatic+0x44>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003298:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800329a:	2502      	movs	r5, #2
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800329c:	9e05      	ldr	r6, [sp, #20]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800329e:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80032a2:	ad04      	add	r5, sp, #16
 80032a4:	9402      	str	r4, [sp, #8]
 80032a6:	9501      	str	r5, [sp, #4]
 80032a8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80032aa:	9500      	str	r5, [sp, #0]
 80032ac:	f7ff feec 	bl	8003088 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 80032b0:	4620      	mov	r0, r4
 80032b2:	f7ff fe5b 	bl	8002f6c <prvAddNewTaskToReadyList>
	}
 80032b6:	9804      	ldr	r0, [sp, #16]
 80032b8:	b006      	add	sp, #24
 80032ba:	bd70      	pop	{r4, r5, r6, pc}

080032bc <xTaskCreate>:
	{
 80032bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80032c0:	4607      	mov	r7, r0
 80032c2:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80032c4:	0090      	lsls	r0, r2, #2
	{
 80032c6:	4688      	mov	r8, r1
 80032c8:	4616      	mov	r6, r2
 80032ca:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80032cc:	f7ff f8c8 	bl	8002460 <pvPortMalloc>
			if( pxStack != NULL )
 80032d0:	4605      	mov	r5, r0
 80032d2:	b1e8      	cbz	r0, 8003310 <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80032d4:	2054      	movs	r0, #84	; 0x54
 80032d6:	f7ff f8c3 	bl	8002460 <pvPortMalloc>
				if( pxNewTCB != NULL )
 80032da:	4604      	mov	r4, r0
 80032dc:	b1a8      	cbz	r0, 800330a <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80032de:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
 80032e0:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80032e2:	4632      	mov	r2, r6
 80032e4:	4641      	mov	r1, r8
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80032e6:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80032ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80032ec:	9002      	str	r0, [sp, #8]
 80032ee:	4638      	mov	r0, r7
 80032f0:	9301      	str	r3, [sp, #4]
 80032f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80032f4:	9300      	str	r3, [sp, #0]
 80032f6:	464b      	mov	r3, r9
 80032f8:	f7ff fec6 	bl	8003088 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 80032fc:	4620      	mov	r0, r4
 80032fe:	f7ff fe35 	bl	8002f6c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003302:	2001      	movs	r0, #1
	}
 8003304:	b005      	add	sp, #20
 8003306:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 800330a:	4628      	mov	r0, r5
 800330c:	f7ff f93a 	bl	8002584 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003310:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 8003314:	e7f6      	b.n	8003304 <xTaskCreate+0x48>
	...

08003318 <vTaskDelete>:
	{
 8003318:	b570      	push	{r4, r5, r6, lr}
 800331a:	4604      	mov	r4, r0
 800331c:	4d2a      	ldr	r5, [pc, #168]	; (80033c8 <vTaskDelete+0xb0>)
		taskENTER_CRITICAL();
 800331e:	f7fe ff41 	bl	80021a4 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8003322:	b904      	cbnz	r4, 8003326 <vTaskDelete+0xe>
 8003324:	682c      	ldr	r4, [r5, #0]
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003326:	1d26      	adds	r6, r4, #4
 8003328:	4630      	mov	r0, r6
 800332a:	f7fe febe 	bl	80020aa <uxListRemove>
 800332e:	b960      	cbnz	r0, 800334a <vTaskDelete+0x32>
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003330:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8003332:	2114      	movs	r1, #20
 8003334:	4b25      	ldr	r3, [pc, #148]	; (80033cc <vTaskDelete+0xb4>)
 8003336:	4341      	muls	r1, r0
 8003338:	585b      	ldr	r3, [r3, r1]
 800333a:	b933      	cbnz	r3, 800334a <vTaskDelete+0x32>
 800333c:	4924      	ldr	r1, [pc, #144]	; (80033d0 <vTaskDelete+0xb8>)
 800333e:	2201      	movs	r2, #1
 8003340:	680b      	ldr	r3, [r1, #0]
 8003342:	4082      	lsls	r2, r0
 8003344:	ea23 0302 	bic.w	r3, r3, r2
 8003348:	600b      	str	r3, [r1, #0]
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800334a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800334c:	b11b      	cbz	r3, 8003356 <vTaskDelete+0x3e>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800334e:	f104 0018 	add.w	r0, r4, #24
 8003352:	f7fe feaa 	bl	80020aa <uxListRemove>
			uxTaskNumber++;
 8003356:	4a1f      	ldr	r2, [pc, #124]	; (80033d4 <vTaskDelete+0xbc>)
 8003358:	6813      	ldr	r3, [r2, #0]
 800335a:	3301      	adds	r3, #1
 800335c:	6013      	str	r3, [r2, #0]
			if( pxTCB == pxCurrentTCB )
 800335e:	682b      	ldr	r3, [r5, #0]
 8003360:	429c      	cmp	r4, r3
 8003362:	d11d      	bne.n	80033a0 <vTaskDelete+0x88>
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8003364:	4631      	mov	r1, r6
 8003366:	481c      	ldr	r0, [pc, #112]	; (80033d8 <vTaskDelete+0xc0>)
 8003368:	f7fe fe7c 	bl	8002064 <vListInsertEnd>
				++uxDeletedTasksWaitingCleanUp;
 800336c:	4a1b      	ldr	r2, [pc, #108]	; (80033dc <vTaskDelete+0xc4>)
 800336e:	6813      	ldr	r3, [r2, #0]
 8003370:	3301      	adds	r3, #1
 8003372:	6013      	str	r3, [r2, #0]
		taskEXIT_CRITICAL();
 8003374:	f7fe ff3c 	bl	80021f0 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 8003378:	4b19      	ldr	r3, [pc, #100]	; (80033e0 <vTaskDelete+0xc8>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	b313      	cbz	r3, 80033c4 <vTaskDelete+0xac>
			if( pxTCB == pxCurrentTCB )
 800337e:	682b      	ldr	r3, [r5, #0]
 8003380:	429c      	cmp	r4, r3
 8003382:	d11f      	bne.n	80033c4 <vTaskDelete+0xac>
				configASSERT( uxSchedulerSuspended == 0 );
 8003384:	4b17      	ldr	r3, [pc, #92]	; (80033e4 <vTaskDelete+0xcc>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	b1a3      	cbz	r3, 80033b4 <vTaskDelete+0x9c>
 800338a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800338e:	b672      	cpsid	i
 8003390:	f383 8811 	msr	BASEPRI, r3
 8003394:	f3bf 8f6f 	isb	sy
 8003398:	f3bf 8f4f 	dsb	sy
 800339c:	b662      	cpsie	i
 800339e:	e7fe      	b.n	800339e <vTaskDelete+0x86>
				--uxCurrentNumberOfTasks;
 80033a0:	4a11      	ldr	r2, [pc, #68]	; (80033e8 <vTaskDelete+0xd0>)
				prvDeleteTCB( pxTCB );
 80033a2:	4620      	mov	r0, r4
				--uxCurrentNumberOfTasks;
 80033a4:	6813      	ldr	r3, [r2, #0]
 80033a6:	3b01      	subs	r3, #1
 80033a8:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 80033aa:	f7ff feb2 	bl	8003112 <prvDeleteTCB>
				prvResetNextTaskUnblockTime();
 80033ae:	f7ff fe59 	bl	8003064 <prvResetNextTaskUnblockTime>
 80033b2:	e7df      	b.n	8003374 <vTaskDelete+0x5c>
				portYIELD_WITHIN_API();
 80033b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033b8:	4b0c      	ldr	r3, [pc, #48]	; (80033ec <vTaskDelete+0xd4>)
 80033ba:	601a      	str	r2, [r3, #0]
 80033bc:	f3bf 8f4f 	dsb	sy
 80033c0:	f3bf 8f6f 	isb	sy
 80033c4:	bd70      	pop	{r4, r5, r6, pc}
 80033c6:	bf00      	nop
 80033c8:	200064b8 	.word	0x200064b8
 80033cc:	200064c4 	.word	0x200064c4
 80033d0:	20006564 	.word	0x20006564
 80033d4:	20006560 	.word	0x20006560
 80033d8:	200065c4 	.word	0x200065c4
 80033dc:	20006554 	.word	0x20006554
 80033e0:	200065ac 	.word	0x200065ac
 80033e4:	2000655c 	.word	0x2000655c
 80033e8:	20006550 	.word	0x20006550
 80033ec:	e000ed04 	.word	0xe000ed04

080033f0 <vTaskStartScheduler>:
{
 80033f0:	b510      	push	{r4, lr}
 80033f2:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80033f4:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80033f6:	aa07      	add	r2, sp, #28
 80033f8:	a906      	add	r1, sp, #24
 80033fa:	a805      	add	r0, sp, #20
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80033fc:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80033fe:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003400:	f008 fb92 	bl	800bb28 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003404:	9b05      	ldr	r3, [sp, #20]
 8003406:	9400      	str	r4, [sp, #0]
 8003408:	9302      	str	r3, [sp, #8]
 800340a:	9b06      	ldr	r3, [sp, #24]
 800340c:	9a07      	ldr	r2, [sp, #28]
 800340e:	9301      	str	r3, [sp, #4]
 8003410:	4623      	mov	r3, r4
 8003412:	490e      	ldr	r1, [pc, #56]	; (800344c <vTaskStartScheduler+0x5c>)
 8003414:	480e      	ldr	r0, [pc, #56]	; (8003450 <vTaskStartScheduler+0x60>)
 8003416:	f7ff ff1c 	bl	8003252 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 800341a:	b1a0      	cbz	r0, 8003446 <vTaskStartScheduler+0x56>
 800341c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003420:	b672      	cpsid	i
 8003422:	f383 8811 	msr	BASEPRI, r3
 8003426:	f3bf 8f6f 	isb	sy
 800342a:	f3bf 8f4f 	dsb	sy
 800342e:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
 8003430:	f04f 32ff 	mov.w	r2, #4294967295
 8003434:	4b07      	ldr	r3, [pc, #28]	; (8003454 <vTaskStartScheduler+0x64>)
 8003436:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003438:	2201      	movs	r2, #1
 800343a:	4b07      	ldr	r3, [pc, #28]	; (8003458 <vTaskStartScheduler+0x68>)
 800343c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800343e:	4b07      	ldr	r3, [pc, #28]	; (800345c <vTaskStartScheduler+0x6c>)
 8003440:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8003442:	f7fe ff51 	bl	80022e8 <xPortStartScheduler>
}
 8003446:	b008      	add	sp, #32
 8003448:	bd10      	pop	{r4, pc}
 800344a:	bf00      	nop
 800344c:	0800d059 	.word	0x0800d059
 8003450:	0800314d 	.word	0x0800314d
 8003454:	20006590 	.word	0x20006590
 8003458:	200065ac 	.word	0x200065ac
 800345c:	200065d8 	.word	0x200065d8

08003460 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8003460:	4a02      	ldr	r2, [pc, #8]	; (800346c <vTaskSuspendAll+0xc>)
 8003462:	6813      	ldr	r3, [r2, #0]
 8003464:	3301      	adds	r3, #1
 8003466:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
 8003468:	4770      	bx	lr
 800346a:	bf00      	nop
 800346c:	2000655c 	.word	0x2000655c

08003470 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8003470:	4b01      	ldr	r3, [pc, #4]	; (8003478 <xTaskGetTickCount+0x8>)
 8003472:	6818      	ldr	r0, [r3, #0]
}
 8003474:	4770      	bx	lr
 8003476:	bf00      	nop
 8003478:	200065d8 	.word	0x200065d8

0800347c <xTaskGetTickCountFromISR>:
{
 800347c:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800347e:	f7fe ff99 	bl	80023b4 <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 8003482:	4b01      	ldr	r3, [pc, #4]	; (8003488 <xTaskGetTickCountFromISR+0xc>)
 8003484:	6818      	ldr	r0, [r3, #0]
}
 8003486:	bd08      	pop	{r3, pc}
 8003488:	200065d8 	.word	0x200065d8

0800348c <xTaskIncrementTick>:
{
 800348c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003490:	4b3d      	ldr	r3, [pc, #244]	; (8003588 <xTaskIncrementTick+0xfc>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d16f      	bne.n	8003578 <xTaskIncrementTick+0xec>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003498:	4b3c      	ldr	r3, [pc, #240]	; (800358c <xTaskIncrementTick+0x100>)
 800349a:	681c      	ldr	r4, [r3, #0]
 800349c:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 800349e:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80034a0:	b9cc      	cbnz	r4, 80034d6 <xTaskIncrementTick+0x4a>
			taskSWITCH_DELAYED_LISTS();
 80034a2:	4b3b      	ldr	r3, [pc, #236]	; (8003590 <xTaskIncrementTick+0x104>)
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	6812      	ldr	r2, [r2, #0]
 80034a8:	b152      	cbz	r2, 80034c0 <xTaskIncrementTick+0x34>
 80034aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ae:	b672      	cpsid	i
 80034b0:	f383 8811 	msr	BASEPRI, r3
 80034b4:	f3bf 8f6f 	isb	sy
 80034b8:	f3bf 8f4f 	dsb	sy
 80034bc:	b662      	cpsie	i
 80034be:	e7fe      	b.n	80034be <xTaskIncrementTick+0x32>
 80034c0:	4a34      	ldr	r2, [pc, #208]	; (8003594 <xTaskIncrementTick+0x108>)
 80034c2:	6819      	ldr	r1, [r3, #0]
 80034c4:	6810      	ldr	r0, [r2, #0]
 80034c6:	6018      	str	r0, [r3, #0]
 80034c8:	6011      	str	r1, [r2, #0]
 80034ca:	4a33      	ldr	r2, [pc, #204]	; (8003598 <xTaskIncrementTick+0x10c>)
 80034cc:	6813      	ldr	r3, [r2, #0]
 80034ce:	3301      	adds	r3, #1
 80034d0:	6013      	str	r3, [r2, #0]
 80034d2:	f7ff fdc7 	bl	8003064 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 80034d6:	4d31      	ldr	r5, [pc, #196]	; (800359c <xTaskIncrementTick+0x110>)
 80034d8:	f04f 0b00 	mov.w	fp, #0
 80034dc:	4f30      	ldr	r7, [pc, #192]	; (80035a0 <xTaskIncrementTick+0x114>)
 80034de:	682b      	ldr	r3, [r5, #0]
 80034e0:	429c      	cmp	r4, r3
 80034e2:	d30a      	bcc.n	80034fa <xTaskIncrementTick+0x6e>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80034e4:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 8003590 <xTaskIncrementTick+0x104>
					prvAddTaskToReadyList( pxTCB );
 80034e8:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 80035b0 <xTaskIncrementTick+0x124>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80034ec:	f8da 2000 	ldr.w	r2, [sl]
 80034f0:	6812      	ldr	r2, [r2, #0]
 80034f2:	b9a2      	cbnz	r2, 800351e <xTaskIncrementTick+0x92>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80034f4:	f04f 32ff 	mov.w	r2, #4294967295
 80034f8:	602a      	str	r2, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80034fa:	683a      	ldr	r2, [r7, #0]
 80034fc:	4b29      	ldr	r3, [pc, #164]	; (80035a4 <xTaskIncrementTick+0x118>)
 80034fe:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003500:	2214      	movs	r2, #20
 8003502:	434a      	muls	r2, r1
 8003504:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 8003506:	2a02      	cmp	r2, #2
 8003508:	bf28      	it	cs
 800350a:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 800350e:	4a26      	ldr	r2, [pc, #152]	; (80035a8 <xTaskIncrementTick+0x11c>)
 8003510:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 8003512:	2a00      	cmp	r2, #0
}
 8003514:	bf0c      	ite	eq
 8003516:	4658      	moveq	r0, fp
 8003518:	2001      	movne	r0, #1
 800351a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800351e:	f8da 2000 	ldr.w	r2, [sl]
 8003522:	68d2      	ldr	r2, [r2, #12]
 8003524:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003526:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 8003528:	428c      	cmp	r4, r1
 800352a:	d201      	bcs.n	8003530 <xTaskIncrementTick+0xa4>
						xNextTaskUnblockTime = xItemValue;
 800352c:	6029      	str	r1, [r5, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800352e:	e7e4      	b.n	80034fa <xTaskIncrementTick+0x6e>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003530:	f106 0804 	add.w	r8, r6, #4
 8003534:	4640      	mov	r0, r8
 8003536:	f7fe fdb8 	bl	80020aa <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800353a:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 800353c:	b119      	cbz	r1, 8003546 <xTaskIncrementTick+0xba>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800353e:	f106 0018 	add.w	r0, r6, #24
 8003542:	f7fe fdb2 	bl	80020aa <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003546:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8003548:	2201      	movs	r2, #1
 800354a:	f8d9 3000 	ldr.w	r3, [r9]
 800354e:	f04f 0e14 	mov.w	lr, #20
 8003552:	fa02 f100 	lsl.w	r1, r2, r0
 8003556:	4319      	orrs	r1, r3
 8003558:	4b12      	ldr	r3, [pc, #72]	; (80035a4 <xTaskIncrementTick+0x118>)
 800355a:	f8c9 1000 	str.w	r1, [r9]
 800355e:	4641      	mov	r1, r8
 8003560:	fb0e 3000 	mla	r0, lr, r0, r3
 8003564:	f7fe fd7e 	bl	8002064 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003568:	6838      	ldr	r0, [r7, #0]
 800356a:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 800356c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 800356e:	4291      	cmp	r1, r2
 8003570:	bf28      	it	cs
 8003572:	f04f 0b01 	movcs.w	fp, #1
 8003576:	e7b9      	b.n	80034ec <xTaskIncrementTick+0x60>
		++uxPendedTicks;
 8003578:	4a0c      	ldr	r2, [pc, #48]	; (80035ac <xTaskIncrementTick+0x120>)
BaseType_t xSwitchRequired = pdFALSE;
 800357a:	f04f 0b00 	mov.w	fp, #0
		++uxPendedTicks;
 800357e:	6813      	ldr	r3, [r2, #0]
 8003580:	3301      	adds	r3, #1
 8003582:	6013      	str	r3, [r2, #0]
 8003584:	e7c3      	b.n	800350e <xTaskIncrementTick+0x82>
 8003586:	bf00      	nop
 8003588:	2000655c 	.word	0x2000655c
 800358c:	200065d8 	.word	0x200065d8
 8003590:	200064bc 	.word	0x200064bc
 8003594:	200064c0 	.word	0x200064c0
 8003598:	20006594 	.word	0x20006594
 800359c:	20006590 	.word	0x20006590
 80035a0:	200064b8 	.word	0x200064b8
 80035a4:	200064c4 	.word	0x200064c4
 80035a8:	200065dc 	.word	0x200065dc
 80035ac:	20006558 	.word	0x20006558
 80035b0:	20006564 	.word	0x20006564

080035b4 <xTaskResumeAll>:
{
 80035b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 80035b8:	4c32      	ldr	r4, [pc, #200]	; (8003684 <xTaskResumeAll+0xd0>)
 80035ba:	6823      	ldr	r3, [r4, #0]
 80035bc:	b953      	cbnz	r3, 80035d4 <xTaskResumeAll+0x20>
 80035be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035c2:	b672      	cpsid	i
 80035c4:	f383 8811 	msr	BASEPRI, r3
 80035c8:	f3bf 8f6f 	isb	sy
 80035cc:	f3bf 8f4f 	dsb	sy
 80035d0:	b662      	cpsie	i
 80035d2:	e7fe      	b.n	80035d2 <xTaskResumeAll+0x1e>
	taskENTER_CRITICAL();
 80035d4:	f7fe fde6 	bl	80021a4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80035d8:	6823      	ldr	r3, [r4, #0]
 80035da:	3b01      	subs	r3, #1
 80035dc:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80035de:	6824      	ldr	r4, [r4, #0]
 80035e0:	b12c      	cbz	r4, 80035ee <xTaskResumeAll+0x3a>
BaseType_t xAlreadyYielded = pdFALSE;
 80035e2:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80035e4:	f7fe fe04 	bl	80021f0 <vPortExitCritical>
}
 80035e8:	4620      	mov	r0, r4
 80035ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80035ee:	4b26      	ldr	r3, [pc, #152]	; (8003688 <xTaskResumeAll+0xd4>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d0f5      	beq.n	80035e2 <xTaskResumeAll+0x2e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80035f6:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 80036a0 <xTaskResumeAll+0xec>
					prvAddTaskToReadyList( pxTCB );
 80035fa:	4f24      	ldr	r7, [pc, #144]	; (800368c <xTaskResumeAll+0xd8>)
 80035fc:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 80036a4 <xTaskResumeAll+0xf0>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003600:	f8d9 3000 	ldr.w	r3, [r9]
 8003604:	b9e3      	cbnz	r3, 8003640 <xTaskResumeAll+0x8c>
				if( pxTCB != NULL )
 8003606:	b10c      	cbz	r4, 800360c <xTaskResumeAll+0x58>
					prvResetNextTaskUnblockTime();
 8003608:	f7ff fd2c 	bl	8003064 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800360c:	4d20      	ldr	r5, [pc, #128]	; (8003690 <xTaskResumeAll+0xdc>)
 800360e:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003610:	b144      	cbz	r4, 8003624 <xTaskResumeAll+0x70>
								xYieldPending = pdTRUE;
 8003612:	4e20      	ldr	r6, [pc, #128]	; (8003694 <xTaskResumeAll+0xe0>)
 8003614:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8003616:	f7ff ff39 	bl	800348c <xTaskIncrementTick>
 800361a:	b100      	cbz	r0, 800361e <xTaskResumeAll+0x6a>
								xYieldPending = pdTRUE;
 800361c:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800361e:	3c01      	subs	r4, #1
 8003620:	d1f9      	bne.n	8003616 <xTaskResumeAll+0x62>
						uxPendedTicks = 0;
 8003622:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8003624:	4b1b      	ldr	r3, [pc, #108]	; (8003694 <xTaskResumeAll+0xe0>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d0da      	beq.n	80035e2 <xTaskResumeAll+0x2e>
					taskYIELD_IF_USING_PREEMPTION();
 800362c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003630:	4b19      	ldr	r3, [pc, #100]	; (8003698 <xTaskResumeAll+0xe4>)
 8003632:	601a      	str	r2, [r3, #0]
 8003634:	f3bf 8f4f 	dsb	sy
 8003638:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800363c:	2401      	movs	r4, #1
 800363e:	e7d1      	b.n	80035e4 <xTaskResumeAll+0x30>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003640:	f8d9 300c 	ldr.w	r3, [r9, #12]
					prvAddTaskToReadyList( pxTCB );
 8003644:	2501      	movs	r5, #1
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003646:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003648:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800364a:	f104 0018 	add.w	r0, r4, #24
 800364e:	f7fe fd2c 	bl	80020aa <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003652:	4630      	mov	r0, r6
 8003654:	f7fe fd29 	bl	80020aa <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003658:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800365a:	6839      	ldr	r1, [r7, #0]
 800365c:	2014      	movs	r0, #20
 800365e:	fa05 f302 	lsl.w	r3, r5, r2
 8003662:	fb00 8002 	mla	r0, r0, r2, r8
 8003666:	430b      	orrs	r3, r1
 8003668:	4631      	mov	r1, r6
 800366a:	603b      	str	r3, [r7, #0]
 800366c:	f7fe fcfa 	bl	8002064 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003670:	4b0a      	ldr	r3, [pc, #40]	; (800369c <xTaskResumeAll+0xe8>)
 8003672:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003678:	429a      	cmp	r2, r3
 800367a:	d3c1      	bcc.n	8003600 <xTaskResumeAll+0x4c>
						xYieldPending = pdTRUE;
 800367c:	4b05      	ldr	r3, [pc, #20]	; (8003694 <xTaskResumeAll+0xe0>)
 800367e:	601d      	str	r5, [r3, #0]
 8003680:	e7be      	b.n	8003600 <xTaskResumeAll+0x4c>
 8003682:	bf00      	nop
 8003684:	2000655c 	.word	0x2000655c
 8003688:	20006550 	.word	0x20006550
 800368c:	20006564 	.word	0x20006564
 8003690:	20006558 	.word	0x20006558
 8003694:	200065dc 	.word	0x200065dc
 8003698:	e000ed04 	.word	0xe000ed04
 800369c:	200064b8 	.word	0x200064b8
 80036a0:	20006598 	.word	0x20006598
 80036a4:	200064c4 	.word	0x200064c4

080036a8 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80036a8:	4b18      	ldr	r3, [pc, #96]	; (800370c <vTaskSwitchContext+0x64>)
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	4b18      	ldr	r3, [pc, #96]	; (8003710 <vTaskSwitchContext+0x68>)
{
 80036ae:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80036b0:	b112      	cbz	r2, 80036b8 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 80036b2:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80036b4:	601a      	str	r2, [r3, #0]
 80036b6:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 80036b8:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80036ba:	4b16      	ldr	r3, [pc, #88]	; (8003714 <vTaskSwitchContext+0x6c>)
 80036bc:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80036be:	fab3 f383 	clz	r3, r3
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	2214      	movs	r2, #20
 80036c6:	4914      	ldr	r1, [pc, #80]	; (8003718 <vTaskSwitchContext+0x70>)
 80036c8:	f1c3 031f 	rsb	r3, r3, #31
 80036cc:	435a      	muls	r2, r3
 80036ce:	588c      	ldr	r4, [r1, r2]
 80036d0:	1888      	adds	r0, r1, r2
 80036d2:	b954      	cbnz	r4, 80036ea <vTaskSwitchContext+0x42>
	__asm volatile
 80036d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036d8:	b672      	cpsid	i
 80036da:	f383 8811 	msr	BASEPRI, r3
 80036de:	f3bf 8f6f 	isb	sy
 80036e2:	f3bf 8f4f 	dsb	sy
 80036e6:	b662      	cpsie	i
 80036e8:	e7fe      	b.n	80036e8 <vTaskSwitchContext+0x40>
 80036ea:	6844      	ldr	r4, [r0, #4]
 80036ec:	3208      	adds	r2, #8
 80036ee:	6864      	ldr	r4, [r4, #4]
 80036f0:	440a      	add	r2, r1
 80036f2:	4294      	cmp	r4, r2
 80036f4:	6044      	str	r4, [r0, #4]
 80036f6:	bf04      	itt	eq
 80036f8:	6862      	ldreq	r2, [r4, #4]
 80036fa:	6042      	streq	r2, [r0, #4]
 80036fc:	2214      	movs	r2, #20
 80036fe:	fb02 1303 	mla	r3, r2, r3, r1
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	68da      	ldr	r2, [r3, #12]
 8003706:	4b05      	ldr	r3, [pc, #20]	; (800371c <vTaskSwitchContext+0x74>)
 8003708:	e7d4      	b.n	80036b4 <vTaskSwitchContext+0xc>
 800370a:	bf00      	nop
 800370c:	2000655c 	.word	0x2000655c
 8003710:	200065dc 	.word	0x200065dc
 8003714:	20006564 	.word	0x20006564
 8003718:	200064c4 	.word	0x200064c4
 800371c:	200064b8 	.word	0x200064b8

08003720 <vTaskPlaceOnEventList>:
{
 8003720:	b510      	push	{r4, lr}
 8003722:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8003724:	b950      	cbnz	r0, 800373c <vTaskPlaceOnEventList+0x1c>
 8003726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800372a:	b672      	cpsid	i
 800372c:	f383 8811 	msr	BASEPRI, r3
 8003730:	f3bf 8f6f 	isb	sy
 8003734:	f3bf 8f4f 	dsb	sy
 8003738:	b662      	cpsie	i
 800373a:	e7fe      	b.n	800373a <vTaskPlaceOnEventList+0x1a>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800373c:	4b05      	ldr	r3, [pc, #20]	; (8003754 <vTaskPlaceOnEventList+0x34>)
 800373e:	6819      	ldr	r1, [r3, #0]
 8003740:	3118      	adds	r1, #24
 8003742:	f7fe fc9b 	bl	800207c <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003746:	4620      	mov	r0, r4
 8003748:	2101      	movs	r1, #1
}
 800374a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800374e:	f7ff bd2f 	b.w	80031b0 <prvAddCurrentTaskToDelayedList>
 8003752:	bf00      	nop
 8003754:	200064b8 	.word	0x200064b8

08003758 <xTaskRemoveFromEventList>:
{
 8003758:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800375a:	68c3      	ldr	r3, [r0, #12]
 800375c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800375e:	b954      	cbnz	r4, 8003776 <xTaskRemoveFromEventList+0x1e>
 8003760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003764:	b672      	cpsid	i
 8003766:	f383 8811 	msr	BASEPRI, r3
 800376a:	f3bf 8f6f 	isb	sy
 800376e:	f3bf 8f4f 	dsb	sy
 8003772:	b662      	cpsie	i
 8003774:	e7fe      	b.n	8003774 <xTaskRemoveFromEventList+0x1c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003776:	f104 0518 	add.w	r5, r4, #24
 800377a:	4628      	mov	r0, r5
 800377c:	f7fe fc95 	bl	80020aa <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003780:	4b11      	ldr	r3, [pc, #68]	; (80037c8 <xTaskRemoveFromEventList+0x70>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	b9db      	cbnz	r3, 80037be <xTaskRemoveFromEventList+0x66>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003786:	1d25      	adds	r5, r4, #4
 8003788:	4628      	mov	r0, r5
 800378a:	f7fe fc8e 	bl	80020aa <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800378e:	490f      	ldr	r1, [pc, #60]	; (80037cc <xTaskRemoveFromEventList+0x74>)
 8003790:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003792:	2301      	movs	r3, #1
 8003794:	6808      	ldr	r0, [r1, #0]
 8003796:	4093      	lsls	r3, r2
 8003798:	4303      	orrs	r3, r0
 800379a:	2014      	movs	r0, #20
 800379c:	600b      	str	r3, [r1, #0]
 800379e:	4629      	mov	r1, r5
 80037a0:	4b0b      	ldr	r3, [pc, #44]	; (80037d0 <xTaskRemoveFromEventList+0x78>)
 80037a2:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80037a6:	f7fe fc5d 	bl	8002064 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80037aa:	4b0a      	ldr	r3, [pc, #40]	; (80037d4 <xTaskRemoveFromEventList+0x7c>)
 80037ac:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d906      	bls.n	80037c4 <xTaskRemoveFromEventList+0x6c>
		xYieldPending = pdTRUE;
 80037b6:	2001      	movs	r0, #1
 80037b8:	4b07      	ldr	r3, [pc, #28]	; (80037d8 <xTaskRemoveFromEventList+0x80>)
 80037ba:	6018      	str	r0, [r3, #0]
 80037bc:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80037be:	4629      	mov	r1, r5
 80037c0:	4806      	ldr	r0, [pc, #24]	; (80037dc <xTaskRemoveFromEventList+0x84>)
 80037c2:	e7f0      	b.n	80037a6 <xTaskRemoveFromEventList+0x4e>
		xReturn = pdFALSE;
 80037c4:	2000      	movs	r0, #0
}
 80037c6:	bd38      	pop	{r3, r4, r5, pc}
 80037c8:	2000655c 	.word	0x2000655c
 80037cc:	20006564 	.word	0x20006564
 80037d0:	200064c4 	.word	0x200064c4
 80037d4:	200064b8 	.word	0x200064b8
 80037d8:	200065dc 	.word	0x200065dc
 80037dc:	20006598 	.word	0x20006598

080037e0 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80037e0:	4b03      	ldr	r3, [pc, #12]	; (80037f0 <vTaskInternalSetTimeOutState+0x10>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80037e6:	4b03      	ldr	r3, [pc, #12]	; (80037f4 <vTaskInternalSetTimeOutState+0x14>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	6043      	str	r3, [r0, #4]
 80037ec:	4770      	bx	lr
 80037ee:	bf00      	nop
 80037f0:	20006594 	.word	0x20006594
 80037f4:	200065d8 	.word	0x200065d8

080037f8 <xTaskCheckForTimeOut>:
{
 80037f8:	b570      	push	{r4, r5, r6, lr}
 80037fa:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 80037fc:	4605      	mov	r5, r0
 80037fe:	b950      	cbnz	r0, 8003816 <xTaskCheckForTimeOut+0x1e>
 8003800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003804:	b672      	cpsid	i
 8003806:	f383 8811 	msr	BASEPRI, r3
 800380a:	f3bf 8f6f 	isb	sy
 800380e:	f3bf 8f4f 	dsb	sy
 8003812:	b662      	cpsie	i
 8003814:	e7fe      	b.n	8003814 <xTaskCheckForTimeOut+0x1c>
	configASSERT( pxTicksToWait );
 8003816:	b951      	cbnz	r1, 800382e <xTaskCheckForTimeOut+0x36>
 8003818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800381c:	b672      	cpsid	i
 800381e:	f383 8811 	msr	BASEPRI, r3
 8003822:	f3bf 8f6f 	isb	sy
 8003826:	f3bf 8f4f 	dsb	sy
 800382a:	b662      	cpsie	i
 800382c:	e7fe      	b.n	800382c <xTaskCheckForTimeOut+0x34>
	taskENTER_CRITICAL();
 800382e:	f7fe fcb9 	bl	80021a4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8003832:	4b0f      	ldr	r3, [pc, #60]	; (8003870 <xTaskCheckForTimeOut+0x78>)
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003834:	6869      	ldr	r1, [r5, #4]
		const TickType_t xConstTickCount = xTickCount;
 8003836:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8003838:	6823      	ldr	r3, [r4, #0]
 800383a:	1c58      	adds	r0, r3, #1
 800383c:	d00e      	beq.n	800385c <xTaskCheckForTimeOut+0x64>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800383e:	480d      	ldr	r0, [pc, #52]	; (8003874 <xTaskCheckForTimeOut+0x7c>)
 8003840:	682e      	ldr	r6, [r5, #0]
 8003842:	6800      	ldr	r0, [r0, #0]
 8003844:	4286      	cmp	r6, r0
 8003846:	d001      	beq.n	800384c <xTaskCheckForTimeOut+0x54>
 8003848:	428a      	cmp	r2, r1
 800384a:	d20e      	bcs.n	800386a <xTaskCheckForTimeOut+0x72>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800384c:	1a52      	subs	r2, r2, r1
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800384e:	429a      	cmp	r2, r3
 8003850:	d209      	bcs.n	8003866 <xTaskCheckForTimeOut+0x6e>
			*pxTicksToWait -= xElapsedTime;
 8003852:	1a9b      	subs	r3, r3, r2
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003854:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 8003856:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003858:	f7ff ffc2 	bl	80037e0 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 800385c:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800385e:	f7fe fcc7 	bl	80021f0 <vPortExitCritical>
}
 8003862:	4620      	mov	r0, r4
 8003864:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 8003866:	2300      	movs	r3, #0
 8003868:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800386a:	2401      	movs	r4, #1
 800386c:	e7f7      	b.n	800385e <xTaskCheckForTimeOut+0x66>
 800386e:	bf00      	nop
 8003870:	200065d8 	.word	0x200065d8
 8003874:	20006594 	.word	0x20006594

08003878 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8003878:	2201      	movs	r2, #1
 800387a:	4b01      	ldr	r3, [pc, #4]	; (8003880 <vTaskMissedYield+0x8>)
 800387c:	601a      	str	r2, [r3, #0]
 800387e:	4770      	bx	lr
 8003880:	200065dc 	.word	0x200065dc

08003884 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8003884:	4b05      	ldr	r3, [pc, #20]	; (800389c <xTaskGetSchedulerState+0x18>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	b133      	cbz	r3, 8003898 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800388a:	4b05      	ldr	r3, [pc, #20]	; (80038a0 <xTaskGetSchedulerState+0x1c>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 8003890:	bf0c      	ite	eq
 8003892:	2002      	moveq	r0, #2
 8003894:	2000      	movne	r0, #0
 8003896:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003898:	2001      	movs	r0, #1
	}
 800389a:	4770      	bx	lr
 800389c:	200065ac 	.word	0x200065ac
 80038a0:	2000655c 	.word	0x2000655c

080038a4 <xTaskPriorityInherit>:
	{
 80038a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxMutexHolder != NULL )
 80038a8:	4604      	mov	r4, r0
 80038aa:	2800      	cmp	r0, #0
 80038ac:	d035      	beq.n	800391a <xTaskPriorityInherit+0x76>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80038ae:	4a24      	ldr	r2, [pc, #144]	; (8003940 <xTaskPriorityInherit+0x9c>)
 80038b0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80038b2:	6811      	ldr	r1, [r2, #0]
 80038b4:	4617      	mov	r7, r2
 80038b6:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80038b8:	428b      	cmp	r3, r1
 80038ba:	d237      	bcs.n	800392c <xTaskPriorityInherit+0x88>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80038bc:	6982      	ldr	r2, [r0, #24]
 80038be:	2a00      	cmp	r2, #0
 80038c0:	db04      	blt.n	80038cc <xTaskPriorityInherit+0x28>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038c2:	683a      	ldr	r2, [r7, #0]
 80038c4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80038c6:	f1c2 0207 	rsb	r2, r2, #7
 80038ca:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80038cc:	4d1d      	ldr	r5, [pc, #116]	; (8003944 <xTaskPriorityInherit+0xa0>)
 80038ce:	2614      	movs	r6, #20
 80038d0:	6962      	ldr	r2, [r4, #20]
 80038d2:	fb06 5303 	mla	r3, r6, r3, r5
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d122      	bne.n	8003920 <xTaskPriorityInherit+0x7c>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80038da:	f104 0804 	add.w	r8, r4, #4
 80038de:	4640      	mov	r0, r8
 80038e0:	f7fe fbe3 	bl	80020aa <uxListRemove>
 80038e4:	4b18      	ldr	r3, [pc, #96]	; (8003948 <xTaskPriorityInherit+0xa4>)
 80038e6:	b948      	cbnz	r0, 80038fc <xTaskPriorityInherit+0x58>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80038e8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80038ea:	4346      	muls	r6, r0
 80038ec:	59aa      	ldr	r2, [r5, r6]
 80038ee:	b92a      	cbnz	r2, 80038fc <xTaskPriorityInherit+0x58>
 80038f0:	2101      	movs	r1, #1
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	4081      	lsls	r1, r0
 80038f6:	ea22 0201 	bic.w	r2, r2, r1
 80038fa:	601a      	str	r2, [r3, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80038fc:	683a      	ldr	r2, [r7, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80038fe:	6819      	ldr	r1, [r3, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003900:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003902:	62e2      	str	r2, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8003904:	2401      	movs	r4, #1
 8003906:	fa04 f002 	lsl.w	r0, r4, r2
 800390a:	4308      	orrs	r0, r1
 800390c:	4641      	mov	r1, r8
 800390e:	6018      	str	r0, [r3, #0]
 8003910:	2014      	movs	r0, #20
 8003912:	fb00 5002 	mla	r0, r0, r2, r5
 8003916:	f7fe fba5 	bl	8002064 <vListInsertEnd>
	BaseType_t xReturn = pdFALSE;
 800391a:	4620      	mov	r0, r4
	}
 800391c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003920:	683b      	ldr	r3, [r7, #0]
				xReturn = pdTRUE;
 8003922:	2001      	movs	r0, #1
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003926:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800392c:	6813      	ldr	r3, [r2, #0]
 800392e:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8003930:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8003932:	42a0      	cmp	r0, r4
 8003934:	bf2c      	ite	cs
 8003936:	2000      	movcs	r0, #0
 8003938:	2001      	movcc	r0, #1
 800393a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800393e:	bf00      	nop
 8003940:	200064b8 	.word	0x200064b8
 8003944:	200064c4 	.word	0x200064c4
 8003948:	20006564 	.word	0x20006564

0800394c <xTaskPriorityDisinherit>:
	{
 800394c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 800394e:	4604      	mov	r4, r0
 8003950:	b908      	cbnz	r0, 8003956 <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 8003952:	2000      	movs	r0, #0
 8003954:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8003956:	4b24      	ldr	r3, [pc, #144]	; (80039e8 <xTaskPriorityDisinherit+0x9c>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4298      	cmp	r0, r3
 800395c:	d00a      	beq.n	8003974 <xTaskPriorityDisinherit+0x28>
 800395e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003962:	b672      	cpsid	i
 8003964:	f383 8811 	msr	BASEPRI, r3
 8003968:	f3bf 8f6f 	isb	sy
 800396c:	f3bf 8f4f 	dsb	sy
 8003970:	b662      	cpsie	i
 8003972:	e7fe      	b.n	8003972 <xTaskPriorityDisinherit+0x26>
			configASSERT( pxTCB->uxMutexesHeld );
 8003974:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8003976:	b953      	cbnz	r3, 800398e <xTaskPriorityDisinherit+0x42>
 8003978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800397c:	b672      	cpsid	i
 800397e:	f383 8811 	msr	BASEPRI, r3
 8003982:	f3bf 8f6f 	isb	sy
 8003986:	f3bf 8f4f 	dsb	sy
 800398a:	b662      	cpsie	i
 800398c:	e7fe      	b.n	800398c <xTaskPriorityDisinherit+0x40>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800398e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 8003990:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003992:	6c42      	ldr	r2, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 8003994:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003996:	4291      	cmp	r1, r2
 8003998:	d0db      	beq.n	8003952 <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800399a:	2b00      	cmp	r3, #0
 800399c:	d1d9      	bne.n	8003952 <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800399e:	1d05      	adds	r5, r0, #4
 80039a0:	4e12      	ldr	r6, [pc, #72]	; (80039ec <xTaskPriorityDisinherit+0xa0>)
 80039a2:	4628      	mov	r0, r5
 80039a4:	f7fe fb81 	bl	80020aa <uxListRemove>
 80039a8:	4a11      	ldr	r2, [pc, #68]	; (80039f0 <xTaskPriorityDisinherit+0xa4>)
 80039aa:	b950      	cbnz	r0, 80039c2 <xTaskPriorityDisinherit+0x76>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80039ac:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80039ae:	2114      	movs	r1, #20
 80039b0:	4379      	muls	r1, r7
 80039b2:	5873      	ldr	r3, [r6, r1]
 80039b4:	b92b      	cbnz	r3, 80039c2 <xTaskPriorityDisinherit+0x76>
 80039b6:	2001      	movs	r0, #1
 80039b8:	6813      	ldr	r3, [r2, #0]
 80039ba:	40b8      	lsls	r0, r7
 80039bc:	ea23 0300 	bic.w	r3, r3, r0
 80039c0:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80039c2:	6c63      	ldr	r3, [r4, #68]	; 0x44
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039c4:	f1c3 0107 	rsb	r1, r3, #7
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80039c8:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039ca:	61a1      	str	r1, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 80039cc:	2401      	movs	r4, #1
 80039ce:	6811      	ldr	r1, [r2, #0]
 80039d0:	fa04 f003 	lsl.w	r0, r4, r3
 80039d4:	4308      	orrs	r0, r1
 80039d6:	4629      	mov	r1, r5
 80039d8:	6010      	str	r0, [r2, #0]
 80039da:	2014      	movs	r0, #20
 80039dc:	fb00 6003 	mla	r0, r0, r3, r6
 80039e0:	f7fe fb40 	bl	8002064 <vListInsertEnd>
					xReturn = pdTRUE;
 80039e4:	4620      	mov	r0, r4
	}
 80039e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039e8:	200064b8 	.word	0x200064b8
 80039ec:	200064c4 	.word	0x200064c4
 80039f0:	20006564 	.word	0x20006564

080039f4 <vTaskPriorityDisinheritAfterTimeout>:
	{
 80039f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 80039f6:	4604      	mov	r4, r0
 80039f8:	2800      	cmp	r0, #0
 80039fa:	d04f      	beq.n	8003a9c <vTaskPriorityDisinheritAfterTimeout+0xa8>
			configASSERT( pxTCB->uxMutexesHeld );
 80039fc:	6c82      	ldr	r2, [r0, #72]	; 0x48
 80039fe:	b952      	cbnz	r2, 8003a16 <vTaskPriorityDisinheritAfterTimeout+0x22>
 8003a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a04:	b672      	cpsid	i
 8003a06:	f383 8811 	msr	BASEPRI, r3
 8003a0a:	f3bf 8f6f 	isb	sy
 8003a0e:	f3bf 8f4f 	dsb	sy
 8003a12:	b662      	cpsie	i
 8003a14:	e7fe      	b.n	8003a14 <vTaskPriorityDisinheritAfterTimeout+0x20>
 8003a16:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003a18:	4299      	cmp	r1, r3
 8003a1a:	bf38      	it	cc
 8003a1c:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 8003a1e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003a20:	428b      	cmp	r3, r1
 8003a22:	d03b      	beq.n	8003a9c <vTaskPriorityDisinheritAfterTimeout+0xa8>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8003a24:	2a01      	cmp	r2, #1
 8003a26:	d139      	bne.n	8003a9c <vTaskPriorityDisinheritAfterTimeout+0xa8>
					configASSERT( pxTCB != pxCurrentTCB );
 8003a28:	4a1d      	ldr	r2, [pc, #116]	; (8003aa0 <vTaskPriorityDisinheritAfterTimeout+0xac>)
 8003a2a:	6812      	ldr	r2, [r2, #0]
 8003a2c:	4290      	cmp	r0, r2
 8003a2e:	d10a      	bne.n	8003a46 <vTaskPriorityDisinheritAfterTimeout+0x52>
 8003a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a34:	b672      	cpsid	i
 8003a36:	f383 8811 	msr	BASEPRI, r3
 8003a3a:	f3bf 8f6f 	isb	sy
 8003a3e:	f3bf 8f4f 	dsb	sy
 8003a42:	b662      	cpsie	i
 8003a44:	e7fe      	b.n	8003a44 <vTaskPriorityDisinheritAfterTimeout+0x50>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003a46:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003a48:	2614      	movs	r6, #20
 8003a4a:	4d16      	ldr	r5, [pc, #88]	; (8003aa4 <vTaskPriorityDisinheritAfterTimeout+0xb0>)
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003a4c:	2a00      	cmp	r2, #0
					pxTCB->uxPriority = uxPriorityToUse;
 8003a4e:	62c1      	str	r1, [r0, #44]	; 0x2c
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003a50:	fb06 5303 	mla	r3, r6, r3, r5
 8003a54:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a56:	bfa4      	itt	ge
 8003a58:	f1c1 0107 	rsbge	r1, r1, #7
 8003a5c:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d11c      	bne.n	8003a9c <vTaskPriorityDisinheritAfterTimeout+0xa8>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003a62:	1d07      	adds	r7, r0, #4
 8003a64:	4638      	mov	r0, r7
 8003a66:	f7fe fb20 	bl	80020aa <uxListRemove>
 8003a6a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003a6c:	4c0e      	ldr	r4, [pc, #56]	; (8003aa8 <vTaskPriorityDisinheritAfterTimeout+0xb4>)
 8003a6e:	b940      	cbnz	r0, 8003a82 <vTaskPriorityDisinheritAfterTimeout+0x8e>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003a70:	4356      	muls	r6, r2
 8003a72:	59ab      	ldr	r3, [r5, r6]
 8003a74:	b92b      	cbnz	r3, 8003a82 <vTaskPriorityDisinheritAfterTimeout+0x8e>
 8003a76:	2101      	movs	r1, #1
 8003a78:	6823      	ldr	r3, [r4, #0]
 8003a7a:	4091      	lsls	r1, r2
 8003a7c:	ea23 0301 	bic.w	r3, r3, r1
 8003a80:	6023      	str	r3, [r4, #0]
						prvAddTaskToReadyList( pxTCB );
 8003a82:	2301      	movs	r3, #1
 8003a84:	6821      	ldr	r1, [r4, #0]
 8003a86:	2014      	movs	r0, #20
 8003a88:	4093      	lsls	r3, r2
 8003a8a:	fb00 5002 	mla	r0, r0, r2, r5
 8003a8e:	430b      	orrs	r3, r1
 8003a90:	4639      	mov	r1, r7
 8003a92:	6023      	str	r3, [r4, #0]
	}
 8003a94:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
						prvAddTaskToReadyList( pxTCB );
 8003a98:	f7fe bae4 	b.w	8002064 <vListInsertEnd>
 8003a9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	200064b8 	.word	0x200064b8
 8003aa4:	200064c4 	.word	0x200064c4
 8003aa8:	20006564 	.word	0x20006564

08003aac <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8003aac:	4b04      	ldr	r3, [pc, #16]	; (8003ac0 <pvTaskIncrementMutexHeldCount+0x14>)
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	b11a      	cbz	r2, 8003aba <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 8003ab2:	6819      	ldr	r1, [r3, #0]
 8003ab4:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 8003ab6:	3201      	adds	r2, #1
 8003ab8:	648a      	str	r2, [r1, #72]	; 0x48
		return pxCurrentTCB;
 8003aba:	6818      	ldr	r0, [r3, #0]
	}
 8003abc:	4770      	bx	lr
 8003abe:	bf00      	nop
 8003ac0:	200064b8 	.word	0x200064b8

08003ac4 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8003ac4:	b583      	push	{r0, r1, r7, lr}
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8003ac6:	482b      	ldr	r0, [pc, #172]	; (8003b74 <tcpip_thread+0xb0>)
 8003ac8:	f007 fdeb 	bl	800b6a2 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8003acc:	4b2a      	ldr	r3, [pc, #168]	; (8003b78 <tcpip_thread+0xb4>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	b113      	cbz	r3, 8003ad8 <tcpip_thread+0x14>
    tcpip_init_done(tcpip_init_done_arg);
 8003ad2:	4a2a      	ldr	r2, [pc, #168]	; (8003b7c <tcpip_thread+0xb8>)
 8003ad4:	6810      	ldr	r0, [r2, #0]
 8003ad6:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 8003ad8:	4d26      	ldr	r5, [pc, #152]	; (8003b74 <tcpip_thread+0xb0>)
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8003ada:	4f29      	ldr	r7, [pc, #164]	; (8003b80 <tcpip_thread+0xbc>)
      msg->msg.cb.function(msg->msg.cb.ctx);
      break;

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8003adc:	4e29      	ldr	r6, [pc, #164]	; (8003b84 <tcpip_thread+0xc0>)
  sleeptime = sys_timeouts_sleeptime();
 8003ade:	f007 fa2f 	bl	800af40 <sys_timeouts_sleeptime>
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8003ae2:	1c43      	adds	r3, r0, #1
  sleeptime = sys_timeouts_sleeptime();
 8003ae4:	4604      	mov	r4, r0
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8003ae6:	d113      	bne.n	8003b10 <tcpip_thread+0x4c>
    UNLOCK_TCPIP_CORE();
 8003ae8:	4628      	mov	r0, r5
 8003aea:	f007 fddf 	bl	800b6ac <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8003aee:	2200      	movs	r2, #0
 8003af0:	a901      	add	r1, sp, #4
 8003af2:	4638      	mov	r0, r7
 8003af4:	f007 fd92 	bl	800b61c <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8003af8:	4628      	mov	r0, r5
 8003afa:	f007 fdd2 	bl	800b6a2 <sys_mutex_lock>
    if (msg == NULL) {
 8003afe:	9c01      	ldr	r4, [sp, #4]
 8003b00:	b9cc      	cbnz	r4, 8003b36 <tcpip_thread+0x72>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8003b02:	4633      	mov	r3, r6
 8003b04:	2291      	movs	r2, #145	; 0x91
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8003b06:	4920      	ldr	r1, [pc, #128]	; (8003b88 <tcpip_thread+0xc4>)
 8003b08:	4820      	ldr	r0, [pc, #128]	; (8003b8c <tcpip_thread+0xc8>)
 8003b0a:	f008 fb1b 	bl	800c144 <iprintf>
 8003b0e:	e7e6      	b.n	8003ade <tcpip_thread+0x1a>
  } else if (sleeptime == 0) {
 8003b10:	b910      	cbnz	r0, 8003b18 <tcpip_thread+0x54>
    sys_check_timeouts();
 8003b12:	f007 f9f3 	bl	800aefc <sys_check_timeouts>
 8003b16:	e7e2      	b.n	8003ade <tcpip_thread+0x1a>
  UNLOCK_TCPIP_CORE();
 8003b18:	4628      	mov	r0, r5
 8003b1a:	f007 fdc7 	bl	800b6ac <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8003b1e:	4622      	mov	r2, r4
 8003b20:	a901      	add	r1, sp, #4
 8003b22:	4638      	mov	r0, r7
 8003b24:	f007 fd7a 	bl	800b61c <sys_arch_mbox_fetch>
 8003b28:	4604      	mov	r4, r0
  LOCK_TCPIP_CORE();
 8003b2a:	4628      	mov	r0, r5
 8003b2c:	f007 fdb9 	bl	800b6a2 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8003b30:	3401      	adds	r4, #1
 8003b32:	d0ee      	beq.n	8003b12 <tcpip_thread+0x4e>
 8003b34:	e7e3      	b.n	8003afe <tcpip_thread+0x3a>
  switch (msg->type) {
 8003b36:	7823      	ldrb	r3, [r4, #0]
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d011      	beq.n	8003b60 <tcpip_thread+0x9c>
 8003b3c:	d304      	bcc.n	8003b48 <tcpip_thread+0x84>
 8003b3e:	2b02      	cmp	r3, #2
 8003b40:	d014      	beq.n	8003b6c <tcpip_thread+0xa8>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8003b42:	4633      	mov	r3, r6
 8003b44:	22cf      	movs	r2, #207	; 0xcf
 8003b46:	e7de      	b.n	8003b06 <tcpip_thread+0x42>
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8003b48:	1d20      	adds	r0, r4, #4
 8003b4a:	c80b      	ldmia	r0, {r0, r1, r3}
 8003b4c:	4798      	blx	r3
 8003b4e:	b110      	cbz	r0, 8003b56 <tcpip_thread+0x92>
        pbuf_free(msg->msg.inp.p);
 8003b50:	6860      	ldr	r0, [r4, #4]
 8003b52:	f003 fbe5 	bl	8007320 <pbuf_free>
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8003b56:	4621      	mov	r1, r4
 8003b58:	2009      	movs	r0, #9
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8003b5a:	f003 f9af 	bl	8006ebc <memp_free>
 8003b5e:	e7be      	b.n	8003ade <tcpip_thread+0x1a>
      msg->msg.cb.function(msg->msg.cb.ctx);
 8003b60:	68a0      	ldr	r0, [r4, #8]
 8003b62:	6863      	ldr	r3, [r4, #4]
 8003b64:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8003b66:	4621      	mov	r1, r4
 8003b68:	2008      	movs	r0, #8
 8003b6a:	e7f6      	b.n	8003b5a <tcpip_thread+0x96>
      msg->msg.cb.function(msg->msg.cb.ctx);
 8003b6c:	6863      	ldr	r3, [r4, #4]
 8003b6e:	68a0      	ldr	r0, [r4, #8]
 8003b70:	4798      	blx	r3
 8003b72:	e7b4      	b.n	8003ade <tcpip_thread+0x1a>
 8003b74:	20006e2c 	.word	0x20006e2c
 8003b78:	200065e0 	.word	0x200065e0
 8003b7c:	200065e4 	.word	0x200065e4
 8003b80:	200065e8 	.word	0x200065e8
 8003b84:	0800d0b6 	.word	0x0800d0b6
 8003b88:	0800d0e6 	.word	0x0800d0e6
 8003b8c:	0800d104 	.word	0x0800d104

08003b90 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8003b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b92:	4607      	mov	r7, r0
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8003b94:	4810      	ldr	r0, [pc, #64]	; (8003bd8 <tcpip_inpkt+0x48>)
{
 8003b96:	460e      	mov	r6, r1
 8003b98:	4615      	mov	r5, r2
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8003b9a:	f007 fd61 	bl	800b660 <sys_mbox_valid>
 8003b9e:	b928      	cbnz	r0, 8003bac <tcpip_inpkt+0x1c>
 8003ba0:	4b0e      	ldr	r3, [pc, #56]	; (8003bdc <tcpip_inpkt+0x4c>)
 8003ba2:	22fc      	movs	r2, #252	; 0xfc
 8003ba4:	490e      	ldr	r1, [pc, #56]	; (8003be0 <tcpip_inpkt+0x50>)
 8003ba6:	480f      	ldr	r0, [pc, #60]	; (8003be4 <tcpip_inpkt+0x54>)
 8003ba8:	f008 facc 	bl	800c144 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8003bac:	2009      	movs	r0, #9
 8003bae:	f003 f969 	bl	8006e84 <memp_malloc>
  if (msg == NULL) {
 8003bb2:	4604      	mov	r4, r0
 8003bb4:	b168      	cbz	r0, 8003bd2 <tcpip_inpkt+0x42>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_INPKT;
 8003bb6:	2300      	movs	r3, #0
  msg->msg.inp.p = p;
 8003bb8:	6047      	str	r7, [r0, #4]
  msg->msg.inp.netif = inp;
 8003bba:	6086      	str	r6, [r0, #8]
  msg->msg.inp.input_fn = input_fn;
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8003bbc:	4601      	mov	r1, r0
  msg->type = TCPIP_MSG_INPKT;
 8003bbe:	7003      	strb	r3, [r0, #0]
  msg->msg.inp.input_fn = input_fn;
 8003bc0:	60c5      	str	r5, [r0, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8003bc2:	4805      	ldr	r0, [pc, #20]	; (8003bd8 <tcpip_inpkt+0x48>)
 8003bc4:	f007 fd20 	bl	800b608 <sys_mbox_trypost>
 8003bc8:	b128      	cbz	r0, 8003bd6 <tcpip_inpkt+0x46>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8003bca:	4621      	mov	r1, r4
 8003bcc:	2009      	movs	r0, #9
 8003bce:	f003 f975 	bl	8006ebc <memp_free>
    return ERR_MEM;
 8003bd2:	f04f 30ff 	mov.w	r0, #4294967295
    return ERR_MEM;
  }
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8003bd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003bd8:	200065e8 	.word	0x200065e8
 8003bdc:	0800d0b6 	.word	0x0800d0b6
 8003be0:	0800d0a9 	.word	0x0800d0a9
 8003be4:	0800d104 	.word	0x0800d104

08003be8 <tcpip_input>:
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8003be8:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
 8003bec:	f013 0f18 	tst.w	r3, #24
    return tcpip_inpkt(p, inp, ethernet_input);
 8003bf0:	bf14      	ite	ne
 8003bf2:	4a02      	ldrne	r2, [pc, #8]	; (8003bfc <tcpip_input+0x14>)
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8003bf4:	4a02      	ldreq	r2, [pc, #8]	; (8003c00 <tcpip_input+0x18>)
 8003bf6:	f7ff bfcb 	b.w	8003b90 <tcpip_inpkt>
 8003bfa:	bf00      	nop
 8003bfc:	0800b4d5 	.word	0x0800b4d5
 8003c00:	08005e89 	.word	0x08005e89

08003c04 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8003c04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003c06:	4605      	mov	r5, r0
 8003c08:	460c      	mov	r4, r1
  lwip_init();
 8003c0a:	f000 fbbc 	bl	8004386 <lwip_init>

  tcpip_init_done = initfunc;
 8003c0e:	4b13      	ldr	r3, [pc, #76]	; (8003c5c <tcpip_init+0x58>)
  tcpip_init_done_arg = arg;
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8003c10:	2106      	movs	r1, #6
 8003c12:	4813      	ldr	r0, [pc, #76]	; (8003c60 <tcpip_init+0x5c>)
  tcpip_init_done = initfunc;
 8003c14:	601d      	str	r5, [r3, #0]
  tcpip_init_done_arg = arg;
 8003c16:	4b13      	ldr	r3, [pc, #76]	; (8003c64 <tcpip_init+0x60>)
 8003c18:	601c      	str	r4, [r3, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8003c1a:	f007 fce3 	bl	800b5e4 <sys_mbox_new>
 8003c1e:	b130      	cbz	r0, 8003c2e <tcpip_init+0x2a>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8003c20:	4b11      	ldr	r3, [pc, #68]	; (8003c68 <tcpip_init+0x64>)
 8003c22:	f240 2261 	movw	r2, #609	; 0x261
 8003c26:	4911      	ldr	r1, [pc, #68]	; (8003c6c <tcpip_init+0x68>)
 8003c28:	4811      	ldr	r0, [pc, #68]	; (8003c70 <tcpip_init+0x6c>)
 8003c2a:	f008 fa8b 	bl	800c144 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8003c2e:	4811      	ldr	r0, [pc, #68]	; (8003c74 <tcpip_init+0x70>)
 8003c30:	f007 fd28 	bl	800b684 <sys_mutex_new>
 8003c34:	b130      	cbz	r0, 8003c44 <tcpip_init+0x40>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8003c36:	4b0c      	ldr	r3, [pc, #48]	; (8003c68 <tcpip_init+0x64>)
 8003c38:	f240 2265 	movw	r2, #613	; 0x265
 8003c3c:	490e      	ldr	r1, [pc, #56]	; (8003c78 <tcpip_init+0x74>)
 8003c3e:	480c      	ldr	r0, [pc, #48]	; (8003c70 <tcpip_init+0x6c>)
 8003c40:	f008 fa80 	bl	800c144 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8003c44:	2302      	movs	r3, #2
 8003c46:	2200      	movs	r2, #0
 8003c48:	490c      	ldr	r1, [pc, #48]	; (8003c7c <tcpip_init+0x78>)
 8003c4a:	9300      	str	r3, [sp, #0]
 8003c4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c50:	480b      	ldr	r0, [pc, #44]	; (8003c80 <tcpip_init+0x7c>)
 8003c52:	f007 fd2e 	bl	800b6b2 <sys_thread_new>
}
 8003c56:	b003      	add	sp, #12
 8003c58:	bd30      	pop	{r4, r5, pc}
 8003c5a:	bf00      	nop
 8003c5c:	200065e0 	.word	0x200065e0
 8003c60:	200065e8 	.word	0x200065e8
 8003c64:	200065e4 	.word	0x200065e4
 8003c68:	0800d0b6 	.word	0x0800d0b6
 8003c6c:	0800d05e 	.word	0x0800d05e
 8003c70:	0800d104 	.word	0x0800d104
 8003c74:	20006e2c 	.word	0x20006e2c
 8003c78:	0800d081 	.word	0x0800d081
 8003c7c:	08003ac5 	.word	0x08003ac5
 8003c80:	0800d0a2 	.word	0x0800d0a2

08003c84 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 8003c84:	b570      	push	{r4, r5, r6, lr}
 8003c86:	460e      	mov	r6, r1
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 8003c88:	4605      	mov	r5, r0
 8003c8a:	b1a8      	cbz	r0, 8003cb8 <fs_open+0x34>
 8003c8c:	b1a1      	cbz	r1, 8003cb8 <fs_open+0x34>
 8003c8e:	4c0c      	ldr	r4, [pc, #48]	; (8003cc0 <fs_open+0x3c>)
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
    if (!strcmp(name, (const char *)f->name)) {
 8003c90:	6861      	ldr	r1, [r4, #4]
 8003c92:	4630      	mov	r0, r6
 8003c94:	f7fc fad4 	bl	8000240 <strcmp>
 8003c98:	b940      	cbnz	r0, 8003cac <fs_open+0x28>
      file->data = (const char *)f->data;
 8003c9a:	68a3      	ldr	r3, [r4, #8]
 8003c9c:	602b      	str	r3, [r5, #0]
      file->len = f->len;
 8003c9e:	68e3      	ldr	r3, [r4, #12]
      file->index = f->len;
      file->pextension = NULL;
 8003ca0:	60e8      	str	r0, [r5, #12]
      file->len = f->len;
 8003ca2:	606b      	str	r3, [r5, #4]
      file->index = f->len;
 8003ca4:	60ab      	str	r3, [r5, #8]
      file->flags = f->flags;
 8003ca6:	7c23      	ldrb	r3, [r4, #16]
 8003ca8:	742b      	strb	r3, [r5, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 8003caa:	bd70      	pop	{r4, r5, r6, pc}
  for (f = FS_ROOT; f != NULL; f = f->next) {
 8003cac:	6824      	ldr	r4, [r4, #0]
 8003cae:	2c00      	cmp	r4, #0
 8003cb0:	d1ee      	bne.n	8003c90 <fs_open+0xc>
    }
  }
  /* file not found */
  return ERR_VAL;
 8003cb2:	f06f 0005 	mvn.w	r0, #5
 8003cb6:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_ARG;
 8003cb8:	f06f 000f 	mvn.w	r0, #15
}
 8003cbc:	bd70      	pop	{r4, r5, r6, pc}
 8003cbe:	bf00      	nop
 8003cc0:	0800deac 	.word	0x0800deac

08003cc4 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 8003cc4:	4770      	bx	lr

08003cc6 <fs_bytes_left>:
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
  return file->len - file->index;
 8003cc6:	6842      	ldr	r2, [r0, #4]
 8003cc8:	6880      	ldr	r0, [r0, #8]
}
 8003cca:	1a10      	subs	r0, r2, r0
 8003ccc:	4770      	bx	lr

08003cce <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 8003cce:	b510      	push	{r4, lr}
 8003cd0:	4604      	mov	r4, r0
  if (hs->handle) {
 8003cd2:	6940      	ldr	r0, [r0, #20]
 8003cd4:	b118      	cbz	r0, 8003cde <http_state_eof+0x10>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed / 100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
                                     ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 8003cd6:	f7ff fff5 	bl	8003cc4 <fs_close>
    hs->handle = NULL;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	6163      	str	r3, [r4, #20]
    http_ssi_state_free(hs->ssi);
    hs->ssi = NULL;
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 8003cde:	6a20      	ldr	r0, [r4, #32]
 8003ce0:	b118      	cbz	r0, 8003cea <http_state_eof+0x1c>
    pbuf_free(hs->req);
 8003ce2:	f003 fb1d 	bl	8007320 <pbuf_free>
    hs->req = NULL;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	6223      	str	r3, [r4, #32]
 8003cea:	bd10      	pop	{r4, pc}

08003cec <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 8003cec:	b538      	push	{r3, r4, r5, lr}
 8003cee:	460d      	mov	r5, r1
  err_t err;

  *uri = "/404.html";
 8003cf0:	490a      	ldr	r1, [pc, #40]	; (8003d1c <http_get_404_file+0x30>)
  err = fs_open(&hs->file_handle, *uri);
 8003cf2:	4604      	mov	r4, r0
  *uri = "/404.html";
 8003cf4:	6029      	str	r1, [r5, #0]
  err = fs_open(&hs->file_handle, *uri);
 8003cf6:	f7ff ffc5 	bl	8003c84 <fs_open>
  if (err != ERR_OK) {
 8003cfa:	b168      	cbz	r0, 8003d18 <http_get_404_file+0x2c>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 8003cfc:	4908      	ldr	r1, [pc, #32]	; (8003d20 <http_get_404_file+0x34>)
    err = fs_open(&hs->file_handle, *uri);
 8003cfe:	4620      	mov	r0, r4
    *uri = "/404.htm";
 8003d00:	6029      	str	r1, [r5, #0]
    err = fs_open(&hs->file_handle, *uri);
 8003d02:	f7ff ffbf 	bl	8003c84 <fs_open>
    if (err != ERR_OK) {
 8003d06:	b138      	cbz	r0, 8003d18 <http_get_404_file+0x2c>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 8003d08:	4906      	ldr	r1, [pc, #24]	; (8003d24 <http_get_404_file+0x38>)
      err = fs_open(&hs->file_handle, *uri);
 8003d0a:	4620      	mov	r0, r4
      *uri = "/404.shtml";
 8003d0c:	6029      	str	r1, [r5, #0]
      err = fs_open(&hs->file_handle, *uri);
 8003d0e:	f7ff ffb9 	bl	8003c84 <fs_open>
      if (err != ERR_OK) {
 8003d12:	b108      	cbz	r0, 8003d18 <http_get_404_file+0x2c>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 8003d14:	2400      	movs	r4, #0
 8003d16:	602c      	str	r4, [r5, #0]
      }
    }
  }

  return &hs->file_handle;
}
 8003d18:	4620      	mov	r0, r4
 8003d1a:	bd38      	pop	{r3, r4, r5, pc}
 8003d1c:	0800dec0 	.word	0x0800dec0
 8003d20:	0800deca 	.word	0x0800deca
 8003d24:	0800ded3 	.word	0x0800ded3

08003d28 <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
 8003d28:	b570      	push	{r4, r5, r6, lr}
 8003d2a:	460c      	mov	r4, r1
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 8003d2c:	4615      	mov	r5, r2
 8003d2e:	bb2a      	cbnz	r2, 8003d7c <http_accept+0x54>
 8003d30:	b321      	cbz	r1, 8003d7c <http_accept+0x54>
    return ERR_VAL;
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 8003d32:	2101      	movs	r1, #1
 8003d34:	4620      	mov	r0, r4
 8003d36:	f003 ff49 	bl	8007bcc <tcp_setprio>
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 8003d3a:	202c      	movs	r0, #44	; 0x2c
 8003d3c:	f002 ff98 	bl	8006c70 <mem_malloc>
  if (ret != NULL) {
 8003d40:	4606      	mov	r6, r0
 8003d42:	b1f0      	cbz	r0, 8003d82 <http_accept+0x5a>
  memset(hs, 0, sizeof(struct http_state));
 8003d44:	222c      	movs	r2, #44	; 0x2c
 8003d46:	4629      	mov	r1, r5
 8003d48:	f008 f9f4 	bl	800c134 <memset>
  }
  hs->pcb = pcb;

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 8003d4c:	4631      	mov	r1, r6
 8003d4e:	4620      	mov	r0, r4
  hs->pcb = pcb;
 8003d50:	61f4      	str	r4, [r6, #28]
  altcp_arg(pcb, hs);
 8003d52:	f003 ff4b 	bl	8007bec <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 8003d56:	490c      	ldr	r1, [pc, #48]	; (8003d88 <http_accept+0x60>)
 8003d58:	4620      	mov	r0, r4
 8003d5a:	f003 ff4b 	bl	8007bf4 <tcp_recv>
  altcp_err(pcb, http_err);
 8003d5e:	490b      	ldr	r1, [pc, #44]	; (8003d8c <http_accept+0x64>)
 8003d60:	4620      	mov	r0, r4
 8003d62:	f003 ff75 	bl	8007c50 <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8003d66:	490a      	ldr	r1, [pc, #40]	; (8003d90 <http_accept+0x68>)
 8003d68:	4620      	mov	r0, r4
 8003d6a:	2204      	movs	r2, #4
 8003d6c:	f003 ff8e 	bl	8007c8c <tcp_poll>
  altcp_sent(pcb, http_sent);
 8003d70:	4908      	ldr	r1, [pc, #32]	; (8003d94 <http_accept+0x6c>)
 8003d72:	4620      	mov	r0, r4
 8003d74:	f003 ff56 	bl	8007c24 <tcp_sent>

  return ERR_OK;
}
 8003d78:	4628      	mov	r0, r5
 8003d7a:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_VAL;
 8003d7c:	f06f 0505 	mvn.w	r5, #5
 8003d80:	e7fa      	b.n	8003d78 <http_accept+0x50>
    return ERR_MEM;
 8003d82:	f04f 35ff 	mov.w	r5, #4294967295
 8003d86:	e7f7      	b.n	8003d78 <http_accept+0x50>
 8003d88:	08003efd 	.word	0x08003efd
 8003d8c:	08004205 	.word	0x08004205
 8003d90:	08003ec1 	.word	0x08003ec1
 8003d94:	08003ea9 	.word	0x08003ea9

08003d98 <http_close_conn>:
{
 8003d98:	b538      	push	{r3, r4, r5, lr}
 8003d9a:	4604      	mov	r4, r0
 8003d9c:	460d      	mov	r5, r1
  altcp_arg(pcb, NULL);
 8003d9e:	2100      	movs	r1, #0
 8003da0:	f003 ff24 	bl	8007bec <tcp_arg>
  altcp_recv(pcb, NULL);
 8003da4:	2100      	movs	r1, #0
 8003da6:	4620      	mov	r0, r4
 8003da8:	f003 ff24 	bl	8007bf4 <tcp_recv>
  altcp_err(pcb, NULL);
 8003dac:	2100      	movs	r1, #0
 8003dae:	4620      	mov	r0, r4
 8003db0:	f003 ff4e 	bl	8007c50 <tcp_err>
  altcp_poll(pcb, NULL, 0);
 8003db4:	2200      	movs	r2, #0
 8003db6:	4620      	mov	r0, r4
 8003db8:	4611      	mov	r1, r2
 8003dba:	f003 ff67 	bl	8007c8c <tcp_poll>
  altcp_sent(pcb, NULL);
 8003dbe:	2100      	movs	r1, #0
 8003dc0:	4620      	mov	r0, r4
 8003dc2:	f003 ff2f 	bl	8007c24 <tcp_sent>
  if (hs != NULL) {
 8003dc6:	b12d      	cbz	r5, 8003dd4 <http_close_conn+0x3c>
    http_state_eof(hs);
 8003dc8:	4628      	mov	r0, r5
 8003dca:	f7ff ff80 	bl	8003cce <http_state_eof>
    HTTP_FREE_HTTP_STATE(hs);
 8003dce:	4628      	mov	r0, r5
 8003dd0:	f002 fdc6 	bl	8006960 <mem_free>
  err = altcp_close(pcb);
 8003dd4:	4620      	mov	r0, r4
 8003dd6:	f004 fad1 	bl	800837c <tcp_close>
  if (err != ERR_OK) {
 8003dda:	4605      	mov	r5, r0
 8003ddc:	b120      	cbz	r0, 8003de8 <http_close_conn+0x50>
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8003dde:	2204      	movs	r2, #4
 8003de0:	4902      	ldr	r1, [pc, #8]	; (8003dec <http_close_conn+0x54>)
 8003de2:	4620      	mov	r0, r4
 8003de4:	f003 ff52 	bl	8007c8c <tcp_poll>
}
 8003de8:	4628      	mov	r0, r5
 8003dea:	bd38      	pop	{r3, r4, r5, pc}
 8003dec:	08003ec1 	.word	0x08003ec1

08003df0 <http_send>:
{
 8003df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003df2:	4606      	mov	r6, r0
  if (hs == NULL) {
 8003df4:	460d      	mov	r5, r1
 8003df6:	b139      	cbz	r1, 8003e08 <http_send+0x18>
  if (hs->left == 0) {
 8003df8:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8003dfa:	b99b      	cbnz	r3, 8003e24 <http_send+0x34>
  if (hs->handle == NULL) {
 8003dfc:	6948      	ldr	r0, [r1, #20]
 8003dfe:	b930      	cbnz	r0, 8003e0e <http_send+0x1e>
    http_close_conn(pcb, hs);
 8003e00:	4629      	mov	r1, r5
 8003e02:	4630      	mov	r0, r6
 8003e04:	f7ff ffc8 	bl	8003d98 <http_close_conn>
      return 0;
 8003e08:	2400      	movs	r4, #0
}
 8003e0a:	4620      	mov	r0, r4
 8003e0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  bytes_left = fs_bytes_left(hs->handle);
 8003e0e:	f7ff ff5a 	bl	8003cc6 <fs_bytes_left>
  if (bytes_left <= 0) {
 8003e12:	2800      	cmp	r0, #0
 8003e14:	ddf4      	ble.n	8003e00 <http_send+0x10>
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 8003e16:	4b21      	ldr	r3, [pc, #132]	; (8003e9c <http_send+0xac>)
 8003e18:	f240 429d 	movw	r2, #1181	; 0x49d
 8003e1c:	4920      	ldr	r1, [pc, #128]	; (8003ea0 <http_send+0xb0>)
 8003e1e:	4821      	ldr	r0, [pc, #132]	; (8003ea4 <http_send+0xb4>)
 8003e20:	f008 f990 	bl	800c144 <iprintf>
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 8003e24:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003e28:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8003e2a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003e2e:	4294      	cmp	r4, r2
 8003e30:	bf88      	it	hi
 8003e32:	461c      	movhi	r4, r3
 8003e34:	b2a3      	uxth	r3, r4
  if (len == 0) {
 8003e36:	b34c      	cbz	r4, 8003e8c <http_send+0x9c>
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 8003e38:	8e74      	ldrh	r4, [r6, #50]	; 0x32
 8003e3a:	f8b6 2064 	ldrh.w	r2, [r6, #100]	; 0x64
 8003e3e:	0064      	lsls	r4, r4, #1
  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8003e40:	69af      	ldr	r7, [r5, #24]
 8003e42:	b2a4      	uxth	r4, r4
 8003e44:	4294      	cmp	r4, r2
 8003e46:	bf28      	it	cs
 8003e48:	4614      	movcs	r4, r2
 8003e4a:	429c      	cmp	r4, r3
 8003e4c:	bf28      	it	cs
 8003e4e:	461c      	movcs	r4, r3
    err = altcp_write(pcb, ptr, len, apiflags);
 8003e50:	2300      	movs	r3, #0
 8003e52:	4622      	mov	r2, r4
 8003e54:	4639      	mov	r1, r7
 8003e56:	4630      	mov	r0, r6
 8003e58:	f005 ffb8 	bl	8009dcc <tcp_write>
    if (err == ERR_MEM) {
 8003e5c:	1c43      	adds	r3, r0, #1
 8003e5e:	d113      	bne.n	8003e88 <http_send+0x98>
      if ((altcp_sndbuf(pcb) == 0) ||
 8003e60:	f8b6 3064 	ldrh.w	r3, [r6, #100]	; 0x64
 8003e64:	b133      	cbz	r3, 8003e74 <http_send+0x84>
 8003e66:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
 8003e6a:	2b07      	cmp	r3, #7
 8003e6c:	d802      	bhi.n	8003e74 <http_send+0x84>
        len /= 2;
 8003e6e:	0864      	lsrs	r4, r4, #1
  } while ((err == ERR_MEM) && (len > 1));
 8003e70:	2c01      	cmp	r4, #1
 8003e72:	d8ed      	bhi.n	8003e50 <http_send+0x60>
  u8_t data_to_send = 0;
 8003e74:	2400      	movs	r4, #0
  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 8003e76:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d1c6      	bne.n	8003e0a <http_send+0x1a>
 8003e7c:	6968      	ldr	r0, [r5, #20]
 8003e7e:	f7ff ff22 	bl	8003cc6 <fs_bytes_left>
 8003e82:	2800      	cmp	r0, #0
 8003e84:	dcc1      	bgt.n	8003e0a <http_send+0x1a>
 8003e86:	e7bb      	b.n	8003e00 <http_send+0x10>
  if (err == ERR_OK) {
 8003e88:	2800      	cmp	r0, #0
 8003e8a:	d1f3      	bne.n	8003e74 <http_send+0x84>
    hs->file += len;
 8003e8c:	69ab      	ldr	r3, [r5, #24]
 8003e8e:	4423      	add	r3, r4
 8003e90:	61ab      	str	r3, [r5, #24]
    hs->left -= len;
 8003e92:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003e94:	1b1c      	subs	r4, r3, r4
 8003e96:	626c      	str	r4, [r5, #36]	; 0x24
    data_to_send = 1;
 8003e98:	2401      	movs	r4, #1
 8003e9a:	e7ec      	b.n	8003e76 <http_send+0x86>
 8003e9c:	0800df42 	.word	0x0800df42
 8003ea0:	0800df78 	.word	0x0800df78
 8003ea4:	0800d104 	.word	0x0800d104

08003ea8 <http_sent>:
{
 8003ea8:	b508      	push	{r3, lr}
 8003eaa:	460b      	mov	r3, r1
  if (hs == NULL) {
 8003eac:	4601      	mov	r1, r0
 8003eae:	b128      	cbz	r0, 8003ebc <http_sent+0x14>
  hs->retries = 0;
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
  http_send(pcb, hs);
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f7ff ff9a 	bl	8003df0 <http_send>
}
 8003ebc:	2000      	movs	r0, #0
 8003ebe:	bd08      	pop	{r3, pc}

08003ec0 <http_poll>:
{
 8003ec0:	b510      	push	{r4, lr}
 8003ec2:	460c      	mov	r4, r1
  if (hs == NULL) {
 8003ec4:	4601      	mov	r1, r0
 8003ec6:	b920      	cbnz	r0, 8003ed2 <http_poll+0x12>
      http_close_conn(pcb, hs);
 8003ec8:	4620      	mov	r0, r4
 8003eca:	f7ff ff65 	bl	8003d98 <http_close_conn>
}
 8003ece:	2000      	movs	r0, #0
 8003ed0:	bd10      	pop	{r4, pc}
    hs->retries++;
 8003ed2:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8003ed6:	3301      	adds	r3, #1
 8003ed8:	b2db      	uxtb	r3, r3
    if (hs->retries == HTTPD_MAX_RETRIES) {
 8003eda:	2b04      	cmp	r3, #4
    hs->retries++;
 8003edc:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 8003ee0:	d0f2      	beq.n	8003ec8 <http_poll+0x8>
    if (hs->handle) {
 8003ee2:	6943      	ldr	r3, [r0, #20]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d0f2      	beq.n	8003ece <http_poll+0xe>
      if (http_send(pcb, hs)) {
 8003ee8:	4620      	mov	r0, r4
 8003eea:	f7ff ff81 	bl	8003df0 <http_send>
 8003eee:	2800      	cmp	r0, #0
 8003ef0:	d0ed      	beq.n	8003ece <http_poll+0xe>
        altcp_output(pcb);
 8003ef2:	4620      	mov	r0, r4
 8003ef4:	f006 fcd0 	bl	800a898 <tcp_output>
 8003ef8:	e7e9      	b.n	8003ece <http_poll+0xe>
	...

08003efc <http_recv>:
{
 8003efc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f00:	4604      	mov	r4, r0
 8003f02:	b087      	sub	sp, #28
 8003f04:	468b      	mov	fp, r1
 8003f06:	4615      	mov	r5, r2
  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 8003f08:	469a      	mov	sl, r3
 8003f0a:	b94b      	cbnz	r3, 8003f20 <http_recv+0x24>
 8003f0c:	b152      	cbz	r2, 8003f24 <http_recv+0x28>
 8003f0e:	b988      	cbnz	r0, 8003f34 <http_recv+0x38>
      altcp_recved(pcb, p->tot_len);
 8003f10:	4658      	mov	r0, fp
 8003f12:	8929      	ldrh	r1, [r5, #8]
 8003f14:	f003 fe08 	bl	8007b28 <tcp_recved>
      pbuf_free(p);
 8003f18:	4628      	mov	r0, r5
 8003f1a:	f003 fa01 	bl	8007320 <pbuf_free>
 8003f1e:	e001      	b.n	8003f24 <http_recv+0x28>
    if (p != NULL) {
 8003f20:	2a00      	cmp	r2, #0
 8003f22:	d1f5      	bne.n	8003f10 <http_recv+0x14>
    http_close_conn(pcb, hs);
 8003f24:	4621      	mov	r1, r4
 8003f26:	4658      	mov	r0, fp
 8003f28:	f7ff ff36 	bl	8003d98 <http_close_conn>
}
 8003f2c:	2000      	movs	r0, #0
 8003f2e:	b007      	add	sp, #28
 8003f30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    altcp_recved(pcb, p->tot_len);
 8003f34:	8911      	ldrh	r1, [r2, #8]
 8003f36:	4658      	mov	r0, fp
 8003f38:	f003 fdf6 	bl	8007b28 <tcp_recved>
    if (hs->handle == NULL) {
 8003f3c:	6963      	ldr	r3, [r4, #20]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	f040 813d 	bne.w	80041be <http_recv+0x2c2>
  if ((hs->handle != NULL) || (hs->file != NULL)) {
 8003f44:	69a3      	ldr	r3, [r4, #24]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	f040 8141 	bne.w	80041ce <http_recv+0x2d2>
  if (hs->req == NULL) {
 8003f4c:	6a20      	ldr	r0, [r4, #32]
 8003f4e:	2800      	cmp	r0, #0
 8003f50:	f040 8093 	bne.w	800407a <http_recv+0x17e>
    hs->req = p;
 8003f54:	6225      	str	r5, [r4, #32]
  pbuf_ref(p);
 8003f56:	4628      	mov	r0, r5
 8003f58:	f003 fb2c 	bl	80075b4 <pbuf_ref>
  if (hs->req->next != NULL) {
 8003f5c:	6a20      	ldr	r0, [r4, #32]
 8003f5e:	6803      	ldr	r3, [r0, #0]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	f000 808e 	beq.w	8004082 <http_recv+0x186>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 8003f66:	f8b0 9008 	ldrh.w	r9, [r0, #8]
 8003f6a:	f240 33ff 	movw	r3, #1023	; 0x3ff
    data = httpd_req_buf;
 8003f6e:	f8df 8264 	ldr.w	r8, [pc, #612]	; 80041d4 <http_recv+0x2d8>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 8003f72:	4599      	cmp	r9, r3
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 8003f74:	4997      	ldr	r1, [pc, #604]	; (80041d4 <http_recv+0x2d8>)
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 8003f76:	bf28      	it	cs
 8003f78:	4699      	movcs	r9, r3
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	464a      	mov	r2, r9
 8003f7e:	f003 fbff 	bl	8007780 <pbuf_copy_partial>
  if (data_len >= MIN_REQ_LEN) {
 8003f82:	f1b9 0f06 	cmp.w	r9, #6
 8003f86:	f240 8106 	bls.w	8004196 <http_recv+0x29a>
    crlf = lwip_strnstr(data, CRLF, data_len);
 8003f8a:	464a      	mov	r2, r9
 8003f8c:	4992      	ldr	r1, [pc, #584]	; (80041d8 <http_recv+0x2dc>)
 8003f8e:	4640      	mov	r0, r8
 8003f90:	f000 f989 	bl	80042a6 <lwip_strnstr>
    if (crlf != NULL) {
 8003f94:	2800      	cmp	r0, #0
 8003f96:	f000 80fe 	beq.w	8004196 <http_recv+0x29a>
      if (!strncmp(data, "GET ", 4)) {
 8003f9a:	2204      	movs	r2, #4
 8003f9c:	498f      	ldr	r1, [pc, #572]	; (80041dc <http_recv+0x2e0>)
 8003f9e:	4640      	mov	r0, r8
 8003fa0:	f008 f930 	bl	800c204 <strncmp>
 8003fa4:	9001      	str	r0, [sp, #4]
 8003fa6:	2800      	cmp	r0, #0
 8003fa8:	d170      	bne.n	800408c <http_recv+0x190>
        sp1 = data + 3;
 8003faa:	f108 0303 	add.w	r3, r8, #3
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 8003fae:	f108 0604 	add.w	r6, r8, #4
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 8003fb2:	498b      	ldr	r1, [pc, #556]	; (80041e0 <http_recv+0x2e4>)
        sp1 = data + 3;
 8003fb4:	9302      	str	r3, [sp, #8]
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 8003fb6:	f1a9 0304 	sub.w	r3, r9, #4
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 8003fba:	4630      	mov	r0, r6
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	9303      	str	r3, [sp, #12]
 8003fc2:	f000 f970 	bl	80042a6 <lwip_strnstr>
      if (sp2 == NULL) {
 8003fc6:	9b03      	ldr	r3, [sp, #12]
 8003fc8:	4607      	mov	r7, r0
 8003fca:	b950      	cbnz	r0, 8003fe2 <http_recv+0xe6>
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 8003fcc:	461a      	mov	r2, r3
 8003fce:	4982      	ldr	r1, [pc, #520]	; (80041d8 <http_recv+0x2dc>)
 8003fd0:	4630      	mov	r0, r6
 8003fd2:	f000 f968 	bl	80042a6 <lwip_strnstr>
      if ((sp2 != 0) && (sp2 > sp1)) {
 8003fd6:	4607      	mov	r7, r0
 8003fd8:	2800      	cmp	r0, #0
 8003fda:	f000 80dc 	beq.w	8004196 <http_recv+0x29a>
        is_09 = 1;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	9301      	str	r3, [sp, #4]
      if ((sp2 != 0) && (sp2 > sp1)) {
 8003fe2:	9b02      	ldr	r3, [sp, #8]
 8003fe4:	42bb      	cmp	r3, r7
 8003fe6:	f080 80d6 	bcs.w	8004196 <http_recv+0x29a>
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 8003fea:	464a      	mov	r2, r9
 8003fec:	497d      	ldr	r1, [pc, #500]	; (80041e4 <http_recv+0x2e8>)
 8003fee:	4640      	mov	r0, r8
 8003ff0:	f000 f959 	bl	80042a6 <lwip_strnstr>
 8003ff4:	2800      	cmp	r0, #0
 8003ff6:	f000 80ce 	beq.w	8004196 <http_recv+0x29a>
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 8003ffa:	1bbf      	subs	r7, r7, r6
          *sp1 = 0;
 8003ffc:	2300      	movs	r3, #0
  size_t uri_len = strlen(uri);
 8003ffe:	4630      	mov	r0, r6
          uri[uri_len] = 0;
 8004000:	b2bf      	uxth	r7, r7
          *sp1 = 0;
 8004002:	f888 3003 	strb.w	r3, [r8, #3]
          uri[uri_len] = 0;
 8004006:	55f3      	strb	r3, [r6, r7]
 8004008:	9605      	str	r6, [sp, #20]
  size_t uri_len = strlen(uri);
 800400a:	f7fc f923 	bl	8000254 <strlen>
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 800400e:	2800      	cmp	r0, #0
 8004010:	f000 809f 	beq.w	8004152 <http_recv+0x256>
 8004014:	1e47      	subs	r7, r0, #1
 8004016:	5df3      	ldrb	r3, [r6, r7]
 8004018:	2b2f      	cmp	r3, #47	; 0x2f
 800401a:	f040 809a 	bne.w	8004152 <http_recv+0x256>
 800401e:	4b72      	ldr	r3, [pc, #456]	; (80041e8 <http_recv+0x2ec>)
 8004020:	429e      	cmp	r6, r3
 8004022:	4699      	mov	r9, r3
 8004024:	d102      	bne.n	800402c <http_recv+0x130>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8004026:	2801      	cmp	r0, #1
 8004028:	f040 8093 	bne.w	8004152 <http_recv+0x256>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 800402c:	2f3f      	cmp	r7, #63	; 0x3f
 800402e:	bf28      	it	cs
 8004030:	273f      	movcs	r7, #63	; 0x3f
    if (copy_len > 0) {
 8004032:	b13f      	cbz	r7, 8004044 <http_recv+0x148>
      MEMCPY(http_uri_buf, uri, copy_len);
 8004034:	463a      	mov	r2, r7
 8004036:	4631      	mov	r1, r6
 8004038:	486b      	ldr	r0, [pc, #428]	; (80041e8 <http_recv+0x2ec>)
 800403a:	f008 f870 	bl	800c11e <memcpy>
      http_uri_buf[copy_len] = 0;
 800403e:	2300      	movs	r3, #0
 8004040:	f809 3007 	strb.w	r3, [r9, r7]
        is_09 = 1;
 8004044:	f04f 0800 	mov.w	r8, #0
      if (copy_len > 0) {
 8004048:	b337      	cbz	r7, 8004098 <http_recv+0x19c>
        if (len_left > 0) {
 800404a:	f1d7 063f 	rsbs	r6, r7, #63	; 0x3f
 800404e:	d012      	beq.n	8004076 <http_recv+0x17a>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 8004050:	4b66      	ldr	r3, [pc, #408]	; (80041ec <http_recv+0x2f0>)
 8004052:	f853 1038 	ldr.w	r1, [r3, r8, lsl #3]
 8004056:	4608      	mov	r0, r1
 8004058:	9102      	str	r1, [sp, #8]
 800405a:	f7fc f8fb 	bl	8000254 <strlen>
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 800405e:	4286      	cmp	r6, r0
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 8004060:	eb09 0307 	add.w	r3, r9, r7
 8004064:	9902      	ldr	r1, [sp, #8]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 8004066:	bf28      	it	cs
 8004068:	4606      	movcs	r6, r0
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 800406a:	4618      	mov	r0, r3
 800406c:	4632      	mov	r2, r6
 800406e:	f008 f856 	bl	800c11e <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 8004072:	2200      	movs	r2, #0
 8004074:	5582      	strb	r2, [r0, r6]
        file_name = http_uri_buf;
 8004076:	4b5c      	ldr	r3, [pc, #368]	; (80041e8 <http_recv+0x2ec>)
 8004078:	e011      	b.n	800409e <http_recv+0x1a2>
    pbuf_cat(hs->req, p);
 800407a:	4629      	mov	r1, r5
 800407c:	f003 fab6 	bl	80075ec <pbuf_cat>
 8004080:	e769      	b.n	8003f56 <http_recv+0x5a>
    data = (char *)p->payload;
 8004082:	f8d5 8004 	ldr.w	r8, [r5, #4]
    data_len = p->len;
 8004086:	f8b5 900a 	ldrh.w	r9, [r5, #10]
 800408a:	e77a      	b.n	8003f82 <http_recv+0x86>
        data[4] = 0;
 800408c:	2300      	movs	r3, #0
 800408e:	f888 3004 	strb.w	r3, [r8, #4]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 8004092:	f06f 0a0f 	mvn.w	sl, #15
 8004096:	e045      	b.n	8004124 <http_recv+0x228>
        file_name = httpd_default_filenames[loop].name;
 8004098:	4b54      	ldr	r3, [pc, #336]	; (80041ec <http_recv+0x2f0>)
 800409a:	f853 3038 	ldr.w	r3, [r3, r8, lsl #3]
      err = fs_open(&hs->file_handle, file_name);
 800409e:	4619      	mov	r1, r3
 80040a0:	4620      	mov	r0, r4
 80040a2:	9302      	str	r3, [sp, #8]
 80040a4:	4626      	mov	r6, r4
 80040a6:	f7ff fded 	bl	8003c84 <fs_open>
      if (err == ERR_OK) {
 80040aa:	9b02      	ldr	r3, [sp, #8]
 80040ac:	2800      	cmp	r0, #0
 80040ae:	d14a      	bne.n	8004146 <http_recv+0x24a>
        uri = file_name;
 80040b0:	9305      	str	r3, [sp, #20]
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 80040b2:	6833      	ldr	r3, [r6, #0]
 80040b4:	b933      	cbnz	r3, 80040c4 <http_recv+0x1c8>
 80040b6:	4b4e      	ldr	r3, [pc, #312]	; (80041f0 <http_recv+0x2f4>)
 80040b8:	f640 120b 	movw	r2, #2315	; 0x90b
 80040bc:	494d      	ldr	r1, [pc, #308]	; (80041f4 <http_recv+0x2f8>)
 80040be:	484e      	ldr	r0, [pc, #312]	; (80041f8 <http_recv+0x2fc>)
 80040c0:	f008 f840 	bl	800c144 <iprintf>
    hs->file = file->data;
 80040c4:	6833      	ldr	r3, [r6, #0]
    hs->handle = file;
 80040c6:	6166      	str	r6, [r4, #20]
    hs->file = file->data;
 80040c8:	61a3      	str	r3, [r4, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 80040ca:	6873      	ldr	r3, [r6, #4]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	da06      	bge.n	80040de <http_recv+0x1e2>
 80040d0:	4b47      	ldr	r3, [pc, #284]	; (80041f0 <http_recv+0x2f4>)
 80040d2:	f640 1234 	movw	r2, #2356	; 0x934
 80040d6:	4949      	ldr	r1, [pc, #292]	; (80041fc <http_recv+0x300>)
 80040d8:	4847      	ldr	r0, [pc, #284]	; (80041f8 <http_recv+0x2fc>)
 80040da:	f008 f833 	bl	800c144 <iprintf>
      hs->left = (u32_t)file->len;
 80040de:	6873      	ldr	r3, [r6, #4]
 80040e0:	6263      	str	r3, [r4, #36]	; 0x24
    hs->retries = 0;
 80040e2:	2300      	movs	r3, #0
 80040e4:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    LWIP_ASSERT("HTTP headers not included in file system",
 80040e8:	6963      	ldr	r3, [r4, #20]
 80040ea:	7c1b      	ldrb	r3, [r3, #16]
 80040ec:	07da      	lsls	r2, r3, #31
 80040ee:	d46a      	bmi.n	80041c6 <http_recv+0x2ca>
 80040f0:	4b3f      	ldr	r3, [pc, #252]	; (80041f0 <http_recv+0x2f4>)
 80040f2:	f640 1244 	movw	r2, #2372	; 0x944
 80040f6:	4942      	ldr	r1, [pc, #264]	; (8004200 <http_recv+0x304>)
 80040f8:	483f      	ldr	r0, [pc, #252]	; (80041f8 <http_recv+0x2fc>)
 80040fa:	f008 f823 	bl	800c144 <iprintf>
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 80040fe:	9b01      	ldr	r3, [sp, #4]
 8004100:	b183      	cbz	r3, 8004124 <http_recv+0x228>
 8004102:	6963      	ldr	r3, [r4, #20]
 8004104:	7c1b      	ldrb	r3, [r3, #16]
 8004106:	07db      	lsls	r3, r3, #31
 8004108:	d50c      	bpl.n	8004124 <http_recv+0x228>
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 800410a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800410c:	4935      	ldr	r1, [pc, #212]	; (80041e4 <http_recv+0x2e8>)
 800410e:	69a0      	ldr	r0, [r4, #24]
 8004110:	f000 f8c9 	bl	80042a6 <lwip_strnstr>
      if (file_start != NULL) {
 8004114:	b130      	cbz	r0, 8004124 <http_recv+0x228>
        int diff = file_start + 4 - hs->file;
 8004116:	69a3      	ldr	r3, [r4, #24]
 8004118:	3004      	adds	r0, #4
 800411a:	1ac2      	subs	r2, r0, r3
        hs->left -= (u32_t)diff;
 800411c:	6a63      	ldr	r3, [r4, #36]	; 0x24
        hs->file += diff;
 800411e:	61a0      	str	r0, [r4, #24]
        hs->left -= (u32_t)diff;
 8004120:	1a9b      	subs	r3, r3, r2
 8004122:	6263      	str	r3, [r4, #36]	; 0x24
        if (hs->req != NULL) {
 8004124:	6a20      	ldr	r0, [r4, #32]
 8004126:	b118      	cbz	r0, 8004130 <http_recv+0x234>
          pbuf_free(hs->req);
 8004128:	f003 f8fa 	bl	8007320 <pbuf_free>
          hs->req = NULL;
 800412c:	2300      	movs	r3, #0
 800412e:	6223      	str	r3, [r4, #32]
      pbuf_free(p);
 8004130:	4628      	mov	r0, r5
 8004132:	f003 f8f5 	bl	8007320 <pbuf_free>
      if (parsed == ERR_OK) {
 8004136:	f1ba 0f00 	cmp.w	sl, #0
 800413a:	d13b      	bne.n	80041b4 <http_recv+0x2b8>
          http_send(pcb, hs);
 800413c:	4621      	mov	r1, r4
 800413e:	4658      	mov	r0, fp
 8004140:	f7ff fe56 	bl	8003df0 <http_send>
 8004144:	e6f2      	b.n	8003f2c <http_recv+0x30>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 8004146:	f108 0801 	add.w	r8, r8, #1
 800414a:	f1b8 0f05 	cmp.w	r8, #5
 800414e:	f47f af7b 	bne.w	8004048 <http_recv+0x14c>
    params = (char *)strchr(uri, '?');
 8004152:	213f      	movs	r1, #63	; 0x3f
 8004154:	9805      	ldr	r0, [sp, #20]
 8004156:	f008 f847 	bl	800c1e8 <strchr>
    if (params != NULL) {
 800415a:	b108      	cbz	r0, 8004160 <http_recv+0x264>
      *params = '\0';
 800415c:	2300      	movs	r3, #0
 800415e:	7003      	strb	r3, [r0, #0]
    err = fs_open(&hs->file_handle, uri);
 8004160:	9905      	ldr	r1, [sp, #20]
 8004162:	4620      	mov	r0, r4
 8004164:	4626      	mov	r6, r4
 8004166:	f7ff fd8d 	bl	8003c84 <fs_open>
    if (err == ERR_OK) {
 800416a:	2800      	cmp	r0, #0
 800416c:	d0a1      	beq.n	80040b2 <http_recv+0x1b6>
      file = http_get_404_file(hs, &uri);
 800416e:	a905      	add	r1, sp, #20
 8004170:	4620      	mov	r0, r4
 8004172:	f7ff fdbb 	bl	8003cec <http_get_404_file>
  if (file == NULL) {
 8004176:	4606      	mov	r6, r0
 8004178:	2800      	cmp	r0, #0
 800417a:	d19a      	bne.n	80040b2 <http_recv+0x1b6>
    file = http_get_404_file(hs, &uri);
 800417c:	a905      	add	r1, sp, #20
 800417e:	4620      	mov	r0, r4
 8004180:	f7ff fdb4 	bl	8003cec <http_get_404_file>
  if (file != NULL) {
 8004184:	4606      	mov	r6, r0
 8004186:	2800      	cmp	r0, #0
 8004188:	d193      	bne.n	80040b2 <http_recv+0x1b6>
    hs->handle = NULL;
 800418a:	6160      	str	r0, [r4, #20]
    hs->file = NULL;
 800418c:	61a0      	str	r0, [r4, #24]
    hs->left = 0;
 800418e:	6260      	str	r0, [r4, #36]	; 0x24
    hs->retries = 0;
 8004190:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
 8004194:	e7c6      	b.n	8004124 <http_recv+0x228>
  clen = pbuf_clen(hs->req);
 8004196:	6a20      	ldr	r0, [r4, #32]
 8004198:	f003 fa04 	bl	80075a4 <pbuf_clen>
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 800419c:	6a23      	ldr	r3, [r4, #32]
 800419e:	891b      	ldrh	r3, [r3, #8]
 80041a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041a4:	f4bf af75 	bcs.w	8004092 <http_recv+0x196>
 80041a8:	2805      	cmp	r0, #5
 80041aa:	f63f af72 	bhi.w	8004092 <http_recv+0x196>
 80041ae:	f06f 0a04 	mvn.w	sl, #4
 80041b2:	e7bd      	b.n	8004130 <http_recv+0x234>
      } else if (parsed == ERR_ARG) {
 80041b4:	f11a 0f10 	cmn.w	sl, #16
 80041b8:	f47f aeb8 	bne.w	8003f2c <http_recv+0x30>
 80041bc:	e6b2      	b.n	8003f24 <http_recv+0x28>
      pbuf_free(p);
 80041be:	4628      	mov	r0, r5
 80041c0:	f003 f8ae 	bl	8007320 <pbuf_free>
 80041c4:	e6b2      	b.n	8003f2c <http_recv+0x30>
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 80041c6:	9b01      	ldr	r3, [sp, #4]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d0ab      	beq.n	8004124 <http_recv+0x228>
 80041cc:	e79d      	b.n	800410a <http_recv+0x20e>
    return ERR_USE;
 80041ce:	f06f 0a07 	mvn.w	sl, #7
 80041d2:	e7a7      	b.n	8004124 <http_recv+0x228>
 80041d4:	2000662c 	.word	0x2000662c
 80041d8:	0800dee5 	.word	0x0800dee5
 80041dc:	0800dede 	.word	0x0800dede
 80041e0:	08010428 	.word	0x08010428
 80041e4:	0800dee3 	.word	0x0800dee3
 80041e8:	200065ec 	.word	0x200065ec
 80041ec:	0800dfb0 	.word	0x0800dfb0
 80041f0:	0800df42 	.word	0x0800df42
 80041f4:	0800dee8 	.word	0x0800dee8
 80041f8:	0800d104 	.word	0x0800d104
 80041fc:	0800defb 	.word	0x0800defb
 8004200:	0800df19 	.word	0x0800df19

08004204 <http_err>:
{
 8004204:	b510      	push	{r4, lr}
  if (hs != NULL) {
 8004206:	4604      	mov	r4, r0
 8004208:	b130      	cbz	r0, 8004218 <http_err+0x14>
    http_state_eof(hs);
 800420a:	f7ff fd60 	bl	8003cce <http_state_eof>
    HTTP_FREE_HTTP_STATE(hs);
 800420e:	4620      	mov	r0, r4
}
 8004210:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HTTP_FREE_HTTP_STATE(hs);
 8004214:	f002 bba4 	b.w	8006960 <mem_free>
 8004218:	bd10      	pop	{r4, pc}
	...

0800421c <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 800421c:	b510      	push	{r4, lr}
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 800421e:	202e      	movs	r0, #46	; 0x2e
 8004220:	f004 fb08 	bl	8008834 <tcp_new_ip_type>
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 8004224:	4604      	mov	r4, r0
 8004226:	b940      	cbnz	r0, 800423a <httpd_init+0x1e>
 8004228:	4b15      	ldr	r3, [pc, #84]	; (8004280 <httpd_init+0x64>)
 800422a:	f640 2272 	movw	r2, #2674	; 0xa72
 800422e:	4915      	ldr	r1, [pc, #84]	; (8004284 <httpd_init+0x68>)
 8004230:	4815      	ldr	r0, [pc, #84]	; (8004288 <httpd_init+0x6c>)
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
}
 8004232:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 8004236:	f007 bf85 	b.w	800c144 <iprintf>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800423a:	2101      	movs	r1, #1
 800423c:	f003 fcc6 	bl	8007bcc <tcp_setprio>
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 8004240:	2250      	movs	r2, #80	; 0x50
 8004242:	4912      	ldr	r1, [pc, #72]	; (800428c <httpd_init+0x70>)
 8004244:	4620      	mov	r0, r4
 8004246:	f003 fb79 	bl	800793c <tcp_bind>
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 800424a:	b130      	cbz	r0, 800425a <httpd_init+0x3e>
 800424c:	4b0c      	ldr	r3, [pc, #48]	; (8004280 <httpd_init+0x64>)
 800424e:	f640 2257 	movw	r2, #2647	; 0xa57
 8004252:	490f      	ldr	r1, [pc, #60]	; (8004290 <httpd_init+0x74>)
 8004254:	480c      	ldr	r0, [pc, #48]	; (8004288 <httpd_init+0x6c>)
 8004256:	f007 ff75 	bl	800c144 <iprintf>
    pcb = altcp_listen(pcb);
 800425a:	4620      	mov	r0, r4
 800425c:	21ff      	movs	r1, #255	; 0xff
 800425e:	f003 fc29 	bl	8007ab4 <tcp_listen_with_backlog>
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 8004262:	4604      	mov	r4, r0
 8004264:	b930      	cbnz	r0, 8004274 <httpd_init+0x58>
 8004266:	4b06      	ldr	r3, [pc, #24]	; (8004280 <httpd_init+0x64>)
 8004268:	f640 2259 	movw	r2, #2649	; 0xa59
 800426c:	4909      	ldr	r1, [pc, #36]	; (8004294 <httpd_init+0x78>)
 800426e:	4806      	ldr	r0, [pc, #24]	; (8004288 <httpd_init+0x6c>)
 8004270:	f007 ff68 	bl	800c144 <iprintf>
    altcp_accept(pcb, http_accept);
 8004274:	4620      	mov	r0, r4
 8004276:	4908      	ldr	r1, [pc, #32]	; (8004298 <httpd_init+0x7c>)
}
 8004278:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    altcp_accept(pcb, http_accept);
 800427c:	f003 bd00 	b.w	8007c80 <tcp_accept>
 8004280:	0800df42 	.word	0x0800df42
 8004284:	0800dfd8 	.word	0x0800dfd8
 8004288:	0800d104 	.word	0x0800d104
 800428c:	0800e650 	.word	0x0800e650
 8004290:	0800dff3 	.word	0x0800dff3
 8004294:	0800e00f 	.word	0x0800e00f
 8004298:	08003d29 	.word	0x08003d29

0800429c <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return PP_HTONS(n);
 800429c:	ba40      	rev16	r0, r0
}
 800429e:	b280      	uxth	r0, r0
 80042a0:	4770      	bx	lr

080042a2 <lwip_htonl>:
 */
u32_t
lwip_htonl(u32_t n)
{
  return PP_HTONL(n);
}
 80042a2:	ba00      	rev	r0, r0
 80042a4:	4770      	bx	lr

080042a6 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 80042a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042a8:	4604      	mov	r4, r0
  const char *p;
  size_t tokenlen = strlen(token);
 80042aa:	4608      	mov	r0, r1
{
 80042ac:	460f      	mov	r7, r1
 80042ae:	4615      	mov	r5, r2
  size_t tokenlen = strlen(token);
 80042b0:	f7fb ffd0 	bl	8000254 <strlen>
  if (tokenlen == 0) {
 80042b4:	4606      	mov	r6, r0
 80042b6:	b190      	cbz	r0, 80042de <lwip_strnstr+0x38>
    return LWIP_CONST_CAST(char *, buffer);
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 80042b8:	4425      	add	r5, r4
 80042ba:	7820      	ldrb	r0, [r4, #0]
 80042bc:	b180      	cbz	r0, 80042e0 <lwip_strnstr+0x3a>
 80042be:	19a3      	adds	r3, r4, r6
 80042c0:	429d      	cmp	r5, r3
 80042c2:	d201      	bcs.n	80042c8 <lwip_strnstr+0x22>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
      return LWIP_CONST_CAST(char *, p);
    }
  }
  return NULL;
 80042c4:	2000      	movs	r0, #0
 80042c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 80042c8:	783b      	ldrb	r3, [r7, #0]
 80042ca:	4283      	cmp	r3, r0
 80042cc:	d105      	bne.n	80042da <lwip_strnstr+0x34>
 80042ce:	4632      	mov	r2, r6
 80042d0:	4639      	mov	r1, r7
 80042d2:	4620      	mov	r0, r4
 80042d4:	f007 ff96 	bl	800c204 <strncmp>
 80042d8:	b108      	cbz	r0, 80042de <lwip_strnstr+0x38>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 80042da:	3401      	adds	r4, #1
 80042dc:	e7ed      	b.n	80042ba <lwip_strnstr+0x14>
 80042de:	4620      	mov	r0, r4
}
 80042e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080042e2 <lwip_standard_chksum>:
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
  const u8_t *pb = (const u8_t *)dataptr;
  const u16_t *ps;
  u16_t t = 0;
 80042e2:	2300      	movs	r3, #0
  u32_t sum = 0;
  int odd = ((mem_ptr_t)pb & 1);

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 80042e4:	f010 0201 	ands.w	r2, r0, #1
{
 80042e8:	b513      	push	{r0, r1, r4, lr}
  u16_t t = 0;
 80042ea:	f8ad 3006 	strh.w	r3, [sp, #6]
  if (odd && len > 0) {
 80042ee:	d01f      	beq.n	8004330 <lwip_standard_chksum+0x4e>
 80042f0:	4299      	cmp	r1, r3
 80042f2:	dd24      	ble.n	800433e <lwip_standard_chksum+0x5c>
    ((u8_t *)&t)[1] = *pb++;
 80042f4:	1c43      	adds	r3, r0, #1
    len--;
 80042f6:	3901      	subs	r1, #1
    ((u8_t *)&t)[1] = *pb++;
 80042f8:	7800      	ldrb	r0, [r0, #0]
 80042fa:	f88d 0007 	strb.w	r0, [sp, #7]
  u32_t sum = 0;
 80042fe:	2000      	movs	r0, #0
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
  while (len > 1) {
 8004300:	2901      	cmp	r1, #1
 8004302:	dc17      	bgt.n	8004334 <lwip_standard_chksum+0x52>
    sum += *ps++;
    len -= 2;
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 8004304:	d102      	bne.n	800430c <lwip_standard_chksum+0x2a>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8004306:	781b      	ldrb	r3, [r3, #0]
 8004308:	f88d 3006 	strb.w	r3, [sp, #6]
  }

  /* Add end bytes */
  sum += t;
 800430c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8004310:	4403      	add	r3, r0

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8004312:	b298      	uxth	r0, r3
 8004314:	eb00 4313 	add.w	r3, r0, r3, lsr #16
  sum = FOLD_U32T(sum);
 8004318:	b298      	uxth	r0, r3
 800431a:	eb00 4013 	add.w	r0, r0, r3, lsr #16

  /* Swap if alignment was odd */
  if (odd) {
 800431e:	b122      	cbz	r2, 800432a <lwip_standard_chksum+0x48>
    sum = SWAP_BYTES_IN_WORD(sum);
 8004320:	0203      	lsls	r3, r0, #8
 8004322:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8004326:	b29b      	uxth	r3, r3
 8004328:	4318      	orrs	r0, r3
  }

  return (u16_t)sum;
}
 800432a:	b280      	uxth	r0, r0
 800432c:	b002      	add	sp, #8
 800432e:	bd10      	pop	{r4, pc}
 8004330:	4603      	mov	r3, r0
 8004332:	e7e4      	b.n	80042fe <lwip_standard_chksum+0x1c>
    sum += *ps++;
 8004334:	f833 4b02 	ldrh.w	r4, [r3], #2
    len -= 2;
 8004338:	3902      	subs	r1, #2
    sum += *ps++;
 800433a:	4420      	add	r0, r4
 800433c:	e7e0      	b.n	8004300 <lwip_standard_chksum+0x1e>
  u32_t sum = 0;
 800433e:	4618      	mov	r0, r3
 8004340:	e7e4      	b.n	800430c <lwip_standard_chksum+0x2a>

08004342 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 8004342:	b570      	push	{r4, r5, r6, lr}
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 8004344:	2600      	movs	r6, #0
{
 8004346:	4605      	mov	r5, r0

  acc = 0;
 8004348:	4634      	mov	r4, r6
  for (q = p; q != NULL; q = q->next) {
 800434a:	b945      	cbnz	r5, 800435e <inet_chksum_pbuf+0x1c>
      swapped = !swapped;
      acc = SWAP_BYTES_IN_WORD(acc);
    }
  }

  if (swapped) {
 800434c:	b126      	cbz	r6, 8004358 <inet_chksum_pbuf+0x16>
    acc = SWAP_BYTES_IN_WORD(acc);
 800434e:	0223      	lsls	r3, r4, #8
 8004350:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8004354:	b29b      	uxth	r3, r3
 8004356:	431c      	orrs	r4, r3
  }
  return (u16_t)~(acc & 0xffffUL);
 8004358:	43e0      	mvns	r0, r4
}
 800435a:	b280      	uxth	r0, r0
 800435c:	bd70      	pop	{r4, r5, r6, pc}
    acc += LWIP_CHKSUM(q->payload, q->len);
 800435e:	8969      	ldrh	r1, [r5, #10]
 8004360:	6868      	ldr	r0, [r5, #4]
 8004362:	f7ff ffbe 	bl	80042e2 <lwip_standard_chksum>
    if (q->len % 2 != 0) {
 8004366:	896b      	ldrh	r3, [r5, #10]
    acc += LWIP_CHKSUM(q->payload, q->len);
 8004368:	4420      	add	r0, r4
    if (q->len % 2 != 0) {
 800436a:	07db      	lsls	r3, r3, #31
    acc = FOLD_U32T(acc);
 800436c:	b284      	uxth	r4, r0
 800436e:	eb04 4410 	add.w	r4, r4, r0, lsr #16
    if (q->len % 2 != 0) {
 8004372:	d506      	bpl.n	8004382 <inet_chksum_pbuf+0x40>
      acc = SWAP_BYTES_IN_WORD(acc);
 8004374:	0223      	lsls	r3, r4, #8
 8004376:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800437a:	f086 0601 	eor.w	r6, r6, #1
 800437e:	b29b      	uxth	r3, r3
 8004380:	431c      	orrs	r4, r3
  for (q = p; q != NULL; q = q->next) {
 8004382:	682d      	ldr	r5, [r5, #0]
 8004384:	e7e1      	b.n	800434a <inet_chksum_pbuf+0x8>

08004386 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8004386:	b508      	push	{r3, lr}
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8004388:	f007 f970 	bl	800b66c <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800438c:	f002 fab4 	bl	80068f8 <mem_init>
  memp_init();
 8004390:	f002 fd6a 	bl	8006e68 <memp_init>
  pbuf_init();
  netif_init();
 8004394:	f002 fe0a 	bl	8006fac <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8004398:	f006 fde4 	bl	800af64 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800439c:	f003 faaa 	bl	80078f4 <tcp_init>
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
#endif /* LWIP_TIMERS */
}
 80043a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeouts_init();
 80043a4:	f006 bd84 	b.w	800aeb0 <sys_timeouts_init>

080043a8 <dhcp_set_state>:
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
  if (new_state != dhcp->state) {
 80043a8:	7943      	ldrb	r3, [r0, #5]
 80043aa:	428b      	cmp	r3, r1
    dhcp->state = new_state;
    dhcp->tries = 0;
 80043ac:	bf1f      	itttt	ne
 80043ae:	2300      	movne	r3, #0
    dhcp->state = new_state;
 80043b0:	7141      	strbne	r1, [r0, #5]
    dhcp->tries = 0;
 80043b2:	7183      	strbne	r3, [r0, #6]
    dhcp->request_timeout = 0;
 80043b4:	8103      	strhne	r3, [r0, #8]
 80043b6:	4770      	bx	lr

080043b8 <dhcp_option_short>:
  return options_out_len;
}

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 80043b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 80043ba:	1c85      	adds	r5, r0, #2
{
 80043bc:	4604      	mov	r4, r0
 80043be:	460e      	mov	r6, r1
 80043c0:	4617      	mov	r7, r2
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 80043c2:	2d44      	cmp	r5, #68	; 0x44
 80043c4:	d906      	bls.n	80043d4 <dhcp_option_short+0x1c>
 80043c6:	4b07      	ldr	r3, [pc, #28]	; (80043e4 <dhcp_option_short+0x2c>)
 80043c8:	f240 52ae 	movw	r2, #1454	; 0x5ae
 80043cc:	4906      	ldr	r1, [pc, #24]	; (80043e8 <dhcp_option_short+0x30>)
 80043ce:	4807      	ldr	r0, [pc, #28]	; (80043ec <dhcp_option_short+0x34>)
 80043d0:	f007 feb8 	bl	800c144 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 80043d4:	0a3b      	lsrs	r3, r7, #8
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
  return options_out_len;
}
 80043d6:	b2a8      	uxth	r0, r5
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 80043d8:	5533      	strb	r3, [r6, r4]
 80043da:	3401      	adds	r4, #1
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 80043dc:	b2a4      	uxth	r4, r4
 80043de:	5537      	strb	r7, [r6, r4]
}
 80043e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80043e2:	bf00      	nop
 80043e4:	0800e213 	.word	0x0800e213
 80043e8:	0800e248 	.word	0x0800e248
 80043ec:	0800d104 	.word	0x0800d104

080043f0 <dhcp_option>:
{
 80043f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043f2:	461e      	mov	r6, r3
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80043f4:	3302      	adds	r3, #2
{
 80043f6:	4604      	mov	r4, r0
 80043f8:	460d      	mov	r5, r1
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80043fa:	4403      	add	r3, r0
{
 80043fc:	4617      	mov	r7, r2
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80043fe:	2b44      	cmp	r3, #68	; 0x44
 8004400:	d906      	bls.n	8004410 <dhcp_option+0x20>
 8004402:	4b07      	ldr	r3, [pc, #28]	; (8004420 <dhcp_option+0x30>)
 8004404:	f240 529a 	movw	r2, #1434	; 0x59a
 8004408:	4906      	ldr	r1, [pc, #24]	; (8004424 <dhcp_option+0x34>)
 800440a:	4807      	ldr	r0, [pc, #28]	; (8004428 <dhcp_option+0x38>)
 800440c:	f007 fe9a 	bl	800c144 <iprintf>
  options[options_out_len++] = option_type;
 8004410:	1c63      	adds	r3, r4, #1
  options[options_out_len++] = option_len;
 8004412:	1ca0      	adds	r0, r4, #2
  options[options_out_len++] = option_type;
 8004414:	552f      	strb	r7, [r5, r4]
  options[options_out_len++] = option_len;
 8004416:	b29b      	uxth	r3, r3
}
 8004418:	b280      	uxth	r0, r0
  options[options_out_len++] = option_len;
 800441a:	54ee      	strb	r6, [r5, r3]
}
 800441c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800441e:	bf00      	nop
 8004420:	0800e213 	.word	0x0800e213
 8004424:	0800e162 	.word	0x0800e162
 8004428:	0800d104 	.word	0x0800d104

0800442c <dhcp_option_byte>:
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 800442c:	2843      	cmp	r0, #67	; 0x43
{
 800442e:	b570      	push	{r4, r5, r6, lr}
 8004430:	4604      	mov	r4, r0
 8004432:	460d      	mov	r5, r1
 8004434:	4616      	mov	r6, r2
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8004436:	d906      	bls.n	8004446 <dhcp_option_byte+0x1a>
 8004438:	4b05      	ldr	r3, [pc, #20]	; (8004450 <dhcp_option_byte+0x24>)
 800443a:	f240 52a6 	movw	r2, #1446	; 0x5a6
 800443e:	4905      	ldr	r1, [pc, #20]	; (8004454 <dhcp_option_byte+0x28>)
 8004440:	4805      	ldr	r0, [pc, #20]	; (8004458 <dhcp_option_byte+0x2c>)
 8004442:	f007 fe7f 	bl	800c144 <iprintf>
  options[options_out_len++] = value;
 8004446:	1c60      	adds	r0, r4, #1
 8004448:	552e      	strb	r6, [r5, r4]
}
 800444a:	b280      	uxth	r0, r0
 800444c:	bd70      	pop	{r4, r5, r6, pc}
 800444e:	bf00      	nop
 8004450:	0800e213 	.word	0x0800e213
 8004454:	0800e1a4 	.word	0x0800e1a4
 8004458:	0800d104 	.word	0x0800d104

0800445c <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 800445c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 800445e:	1d07      	adds	r7, r0, #4
{
 8004460:	4604      	mov	r4, r0
 8004462:	460d      	mov	r5, r1
 8004464:	4616      	mov	r6, r2
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8004466:	2f44      	cmp	r7, #68	; 0x44
 8004468:	d906      	bls.n	8004478 <dhcp_option_long+0x1c>
 800446a:	4b0b      	ldr	r3, [pc, #44]	; (8004498 <dhcp_option_long+0x3c>)
 800446c:	f240 52b7 	movw	r2, #1463	; 0x5b7
 8004470:	490a      	ldr	r1, [pc, #40]	; (800449c <dhcp_option_long+0x40>)
 8004472:	480b      	ldr	r0, [pc, #44]	; (80044a0 <dhcp_option_long+0x44>)
 8004474:	f007 fe66 	bl	800c144 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8004478:	0e33      	lsrs	r3, r6, #24
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 800447a:	0c32      	lsrs	r2, r6, #16
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 800447c:	552b      	strb	r3, [r5, r4]
 800447e:	1c63      	adds	r3, r4, #1
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
  return options_out_len;
}
 8004480:	b2b8      	uxth	r0, r7
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8004482:	b29b      	uxth	r3, r3
 8004484:	54ea      	strb	r2, [r5, r3]
 8004486:	1ca3      	adds	r3, r4, #2
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8004488:	3403      	adds	r4, #3
 800448a:	0a32      	lsrs	r2, r6, #8
 800448c:	b29b      	uxth	r3, r3
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 800448e:	b2a4      	uxth	r4, r4
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8004490:	54ea      	strb	r2, [r5, r3]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8004492:	552e      	strb	r6, [r5, r4]
}
 8004494:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004496:	bf00      	nop
 8004498:	0800e213 	.word	0x0800e213
 800449c:	0800e1d9 	.word	0x0800e1d9
 80044a0:	0800d104 	.word	0x0800d104

080044a4 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 80044a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80044a8:	460e      	mov	r6, r1
 80044aa:	4690      	mov	r8, r2
 80044ac:	4699      	mov	r9, r3
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 80044ae:	4605      	mov	r5, r0
 80044b0:	b950      	cbnz	r0, 80044c8 <dhcp_create_msg+0x24>
 80044b2:	462f      	mov	r7, r5
 80044b4:	4b3f      	ldr	r3, [pc, #252]	; (80045b4 <dhcp_create_msg+0x110>)
 80044b6:	f240 7269 	movw	r2, #1897	; 0x769
 80044ba:	493f      	ldr	r1, [pc, #252]	; (80045b8 <dhcp_create_msg+0x114>)
 80044bc:	483f      	ldr	r0, [pc, #252]	; (80045bc <dhcp_create_msg+0x118>)
 80044be:	f007 fe41 	bl	800c144 <iprintf>
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
  if (options_out_len) {
    *options_out_len = options_out_len_loc;
  }
  return p_out;
}
 80044c2:	4638      	mov	r0, r7
 80044c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 80044c8:	b941      	cbnz	r1, 80044dc <dhcp_create_msg+0x38>
 80044ca:	4b3a      	ldr	r3, [pc, #232]	; (80045b4 <dhcp_create_msg+0x110>)
 80044cc:	f240 726a 	movw	r2, #1898	; 0x76a
 80044d0:	493b      	ldr	r1, [pc, #236]	; (80045c0 <dhcp_create_msg+0x11c>)
 80044d2:	4637      	mov	r7, r6
 80044d4:	4839      	ldr	r0, [pc, #228]	; (80045bc <dhcp_create_msg+0x118>)
 80044d6:	f007 fe35 	bl	800c144 <iprintf>
 80044da:	e7f2      	b.n	80044c2 <dhcp_create_msg+0x1e>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 80044dc:	f44f 7220 	mov.w	r2, #640	; 0x280
 80044e0:	f44f 719a 	mov.w	r1, #308	; 0x134
 80044e4:	2036      	movs	r0, #54	; 0x36
 80044e6:	f002 ff83 	bl	80073f0 <pbuf_alloc>
  if (p_out == NULL) {
 80044ea:	4607      	mov	r7, r0
 80044ec:	2800      	cmp	r0, #0
 80044ee:	d0e8      	beq.n	80044c2 <dhcp_create_msg+0x1e>
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 80044f0:	8943      	ldrh	r3, [r0, #10]
 80044f2:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 80044f6:	d206      	bcs.n	8004506 <dhcp_create_msg+0x62>
 80044f8:	4b2e      	ldr	r3, [pc, #184]	; (80045b4 <dhcp_create_msg+0x110>)
 80044fa:	f240 7272 	movw	r2, #1906	; 0x772
 80044fe:	4931      	ldr	r1, [pc, #196]	; (80045c4 <dhcp_create_msg+0x120>)
 8004500:	482e      	ldr	r0, [pc, #184]	; (80045bc <dhcp_create_msg+0x118>)
 8004502:	f007 fe1f 	bl	800c144 <iprintf>
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8004506:	f1b8 0f03 	cmp.w	r8, #3
 800450a:	d102      	bne.n	8004512 <dhcp_create_msg+0x6e>
 800450c:	7973      	ldrb	r3, [r6, #5]
 800450e:	2b03      	cmp	r3, #3
 8004510:	d107      	bne.n	8004522 <dhcp_create_msg+0x7e>
    if (dhcp->tries == 0) {
 8004512:	79b3      	ldrb	r3, [r6, #6]
 8004514:	4c2c      	ldr	r4, [pc, #176]	; (80045c8 <dhcp_create_msg+0x124>)
 8004516:	b913      	cbnz	r3, 800451e <dhcp_create_msg+0x7a>
      xid = LWIP_RAND();
 8004518:	f007 fe2c 	bl	800c174 <rand>
 800451c:	6020      	str	r0, [r4, #0]
    dhcp->xid = xid;
 800451e:	6823      	ldr	r3, [r4, #0]
 8004520:	6033      	str	r3, [r6, #0]
  msg_out = (struct dhcp_msg *)p_out->payload;
 8004522:	687c      	ldr	r4, [r7, #4]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8004524:	f44f 729a 	mov.w	r2, #308	; 0x134
 8004528:	2100      	movs	r1, #0
 800452a:	4620      	mov	r0, r4
 800452c:	f007 fe02 	bl	800c134 <memset>
  msg_out->op = DHCP_BOOTREQUEST;
 8004530:	2301      	movs	r3, #1
 8004532:	7023      	strb	r3, [r4, #0]
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8004534:	7063      	strb	r3, [r4, #1]
  msg_out->hlen = netif->hwaddr_len;
 8004536:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 800453a:	70a3      	strb	r3, [r4, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 800453c:	6830      	ldr	r0, [r6, #0]
 800453e:	f7ff feb0 	bl	80042a2 <lwip_htonl>
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8004542:	f1b8 0f04 	cmp.w	r8, #4
  msg_out->xid = lwip_htonl(dhcp->xid);
 8004546:	6060      	str	r0, [r4, #4]
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8004548:	d00a      	beq.n	8004560 <dhcp_create_msg+0xbc>
 800454a:	f1a8 0307 	sub.w	r3, r8, #7
 800454e:	2b01      	cmp	r3, #1
 8004550:	d906      	bls.n	8004560 <dhcp_create_msg+0xbc>
 8004552:	f1b8 0f03 	cmp.w	r8, #3
 8004556:	d105      	bne.n	8004564 <dhcp_create_msg+0xc0>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8004558:	7973      	ldrb	r3, [r6, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 800455a:	3b04      	subs	r3, #4
 800455c:	2b01      	cmp	r3, #1
 800455e:	d801      	bhi.n	8004564 <dhcp_create_msg+0xc0>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8004560:	686b      	ldr	r3, [r5, #4]
 8004562:	60e3      	str	r3, [r4, #12]
 8004564:	f105 032a 	add.w	r3, r5, #42	; 0x2a
 8004568:	f104 021c 	add.w	r2, r4, #28
 800456c:	3530      	adds	r5, #48	; 0x30
    msg_out->chaddr[i] = netif->hwaddr[i];
 800456e:	f813 1b01 	ldrb.w	r1, [r3], #1
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8004572:	42ab      	cmp	r3, r5
    msg_out->chaddr[i] = netif->hwaddr[i];
 8004574:	f802 1b01 	strb.w	r1, [r2], #1
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8004578:	d1f9      	bne.n	800456e <dhcp_create_msg+0xca>
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 800457a:	f06f 027d 	mvn.w	r2, #125	; 0x7d
 800457e:	2363      	movs	r3, #99	; 0x63
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8004580:	34f0      	adds	r4, #240	; 0xf0
 8004582:	2000      	movs	r0, #0
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8004584:	f804 2c03 	strb.w	r2, [r4, #-3]
 8004588:	2253      	movs	r2, #83	; 0x53
 800458a:	f804 3c04 	strb.w	r3, [r4, #-4]
 800458e:	f804 2c02 	strb.w	r2, [r4, #-2]
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8004592:	2235      	movs	r2, #53	; 0x35
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8004594:	f804 3c01 	strb.w	r3, [r4, #-1]
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8004598:	4621      	mov	r1, r4
 800459a:	2301      	movs	r3, #1
 800459c:	f7ff ff28 	bl	80043f0 <dhcp_option>
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 80045a0:	4642      	mov	r2, r8
 80045a2:	4621      	mov	r1, r4
 80045a4:	f7ff ff42 	bl	800442c <dhcp_option_byte>
  if (options_out_len) {
 80045a8:	f1b9 0f00 	cmp.w	r9, #0
 80045ac:	d089      	beq.n	80044c2 <dhcp_create_msg+0x1e>
    *options_out_len = options_out_len_loc;
 80045ae:	f8a9 0000 	strh.w	r0, [r9]
 80045b2:	e786      	b.n	80044c2 <dhcp_create_msg+0x1e>
 80045b4:	0800e213 	.word	0x0800e213
 80045b8:	0800e099 	.word	0x0800e099
 80045bc:	0800d104 	.word	0x0800d104
 80045c0:	0800e0b8 	.word	0x0800e0b8
 80045c4:	0800e0d6 	.word	0x0800e0d6
 80045c8:	20006a34 	.word	0x20006a34

080045cc <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 80045cc:	b410      	push	{r4}
  options[options_out_len++] = DHCP_OPTION_END;
 80045ce:	1c43      	adds	r3, r0, #1
 80045d0:	24ff      	movs	r4, #255	; 0xff
 80045d2:	b29b      	uxth	r3, r3
 80045d4:	540c      	strb	r4, [r1, r0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 80045d6:	2000      	movs	r0, #0
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 80045d8:	2b43      	cmp	r3, #67	; 0x43
 80045da:	d907      	bls.n	80045ec <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 80045dc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80045e0:	4610      	mov	r0, r2
}
 80045e2:	f85d 4b04 	ldr.w	r4, [sp], #4
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 80045e6:	b289      	uxth	r1, r1
 80045e8:	f002 bf84 	b.w	80074f4 <pbuf_realloc>
    options[options_out_len++] = 0;
 80045ec:	1c5c      	adds	r4, r3, #1
 80045ee:	54c8      	strb	r0, [r1, r3]
 80045f0:	b2a3      	uxth	r3, r4
 80045f2:	e7f1      	b.n	80045d8 <dhcp_option_trailer+0xc>

080045f4 <dhcp_reboot>:
{
 80045f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80045f8:	6a45      	ldr	r5, [r0, #36]	; 0x24
{
 80045fa:	b085      	sub	sp, #20
 80045fc:	4680      	mov	r8, r0
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 80045fe:	2103      	movs	r1, #3
 8004600:	4628      	mov	r0, r5
 8004602:	f7ff fed1 	bl	80043a8 <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8004606:	f10d 030e 	add.w	r3, sp, #14
 800460a:	2203      	movs	r2, #3
 800460c:	4629      	mov	r1, r5
 800460e:	4640      	mov	r0, r8
 8004610:	f7ff ff48 	bl	80044a4 <dhcp_create_msg>
  if (p_out != NULL) {
 8004614:	4606      	mov	r6, r0
 8004616:	2800      	cmp	r0, #0
 8004618:	d066      	beq.n	80046e8 <dhcp_reboot+0xf4>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800461a:	6844      	ldr	r4, [r0, #4]
 800461c:	2302      	movs	r3, #2
 800461e:	2239      	movs	r2, #57	; 0x39
 8004620:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8004624:	34f0      	adds	r4, #240	; 0xf0
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8004626:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 80046f8 <dhcp_reboot+0x104>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800462a:	4621      	mov	r1, r4
 800462c:	f7ff fee0 	bl	80043f0 <dhcp_option>
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8004630:	f44f 7210 	mov.w	r2, #576	; 0x240
 8004634:	4621      	mov	r1, r4
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8004636:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 800463a:	f7ff febd 	bl	80043b8 <dhcp_option_short>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800463e:	2304      	movs	r3, #4
 8004640:	2232      	movs	r2, #50	; 0x32
 8004642:	4621      	mov	r1, r4
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8004644:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8004648:	f7ff fed2 	bl	80043f0 <dhcp_option>
 800464c:	4607      	mov	r7, r0
 800464e:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8004652:	69e8      	ldr	r0, [r5, #28]
 8004654:	f7ff fe25 	bl	80042a2 <lwip_htonl>
 8004658:	4621      	mov	r1, r4
 800465a:	4602      	mov	r2, r0
 800465c:	4638      	mov	r0, r7
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800465e:	2700      	movs	r7, #0
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8004660:	f7ff fefc 	bl	800445c <dhcp_option_long>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8004664:	2303      	movs	r3, #3
 8004666:	2237      	movs	r2, #55	; 0x37
 8004668:	4621      	mov	r1, r4
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800466a:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800466e:	f7ff febf 	bl	80043f0 <dhcp_option>
 8004672:	f8ad 000e 	strh.w	r0, [sp, #14]
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8004676:	f819 2007 	ldrb.w	r2, [r9, r7]
 800467a:	3701      	adds	r7, #1
 800467c:	4621      	mov	r1, r4
 800467e:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8004682:	f7ff fed3 	bl	800442c <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8004686:	2f03      	cmp	r7, #3
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8004688:	f8ad 000e 	strh.w	r0, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800468c:	d1f3      	bne.n	8004676 <dhcp_reboot+0x82>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800468e:	4621      	mov	r1, r4
 8004690:	4632      	mov	r2, r6
 8004692:	f7ff ff9b 	bl	80045cc <dhcp_option_trailer>
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8004696:	4816      	ldr	r0, [pc, #88]	; (80046f0 <dhcp_reboot+0xfc>)
 8004698:	f8cd 8000 	str.w	r8, [sp]
 800469c:	2343      	movs	r3, #67	; 0x43
 800469e:	4a15      	ldr	r2, [pc, #84]	; (80046f4 <dhcp_reboot+0x100>)
 80046a0:	4631      	mov	r1, r6
 80046a2:	6800      	ldr	r0, [r0, #0]
 80046a4:	f006 fe3e 	bl	800b324 <udp_sendto_if>
 80046a8:	4604      	mov	r4, r0
    pbuf_free(p_out);
 80046aa:	4630      	mov	r0, r6
 80046ac:	f002 fe38 	bl	8007320 <pbuf_free>
  if (dhcp->tries < 255) {
 80046b0:	79ab      	ldrb	r3, [r5, #6]
}
 80046b2:	4620      	mov	r0, r4
  if (dhcp->tries < 255) {
 80046b4:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 80046b6:	bf1c      	itt	ne
 80046b8:	3301      	addne	r3, #1
 80046ba:	71ab      	strbne	r3, [r5, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80046bc:	79ab      	ldrb	r3, [r5, #6]
 80046be:	2b09      	cmp	r3, #9
 80046c0:	bf96      	itet	ls
 80046c2:	ebc3 1243 	rsbls	r2, r3, r3, lsl #5
 80046c6:	f242 7310 	movwhi	r3, #10000	; 0x2710
 80046ca:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80046ce:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80046d2:	bf9c      	itt	ls
 80046d4:	00db      	lslls	r3, r3, #3
 80046d6:	b29b      	uxthls	r3, r3
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80046d8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80046dc:	fb93 f3f2 	sdiv	r3, r3, r2
 80046e0:	812b      	strh	r3, [r5, #8]
}
 80046e2:	b005      	add	sp, #20
 80046e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    result = ERR_MEM;
 80046e8:	f04f 34ff 	mov.w	r4, #4294967295
 80046ec:	e7e0      	b.n	80046b0 <dhcp_reboot+0xbc>
 80046ee:	bf00      	nop
 80046f0:	20006a2c 	.word	0x20006a2c
 80046f4:	0800e654 	.word	0x0800e654
 80046f8:	0800e13a 	.word	0x0800e13a

080046fc <dhcp_select>:
{
 80046fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8004700:	4607      	mov	r7, r0
{
 8004702:	b085      	sub	sp, #20
  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8004704:	b960      	cbnz	r0, 8004720 <dhcp_select+0x24>
 8004706:	f06f 050f 	mvn.w	r5, #15
 800470a:	4b52      	ldr	r3, [pc, #328]	; (8004854 <dhcp_select+0x158>)
 800470c:	f240 1277 	movw	r2, #375	; 0x177
 8004710:	4951      	ldr	r1, [pc, #324]	; (8004858 <dhcp_select+0x15c>)
 8004712:	4852      	ldr	r0, [pc, #328]	; (800485c <dhcp_select+0x160>)
 8004714:	f007 fd16 	bl	800c144 <iprintf>
}
 8004718:	4628      	mov	r0, r5
 800471a:	b005      	add	sp, #20
 800471c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  dhcp = netif_dhcp_data(netif);
 8004720:	6a44      	ldr	r4, [r0, #36]	; 0x24
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8004722:	b94c      	cbnz	r4, 8004738 <dhcp_select+0x3c>
 8004724:	4b4b      	ldr	r3, [pc, #300]	; (8004854 <dhcp_select+0x158>)
 8004726:	f240 1279 	movw	r2, #377	; 0x179
 800472a:	494d      	ldr	r1, [pc, #308]	; (8004860 <dhcp_select+0x164>)
 800472c:	f06f 0505 	mvn.w	r5, #5
 8004730:	484a      	ldr	r0, [pc, #296]	; (800485c <dhcp_select+0x160>)
 8004732:	f007 fd07 	bl	800c144 <iprintf>
 8004736:	e7ef      	b.n	8004718 <dhcp_select+0x1c>
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8004738:	2101      	movs	r1, #1
 800473a:	4620      	mov	r0, r4
 800473c:	f7ff fe34 	bl	80043a8 <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8004740:	f10d 030e 	add.w	r3, sp, #14
 8004744:	2203      	movs	r2, #3
 8004746:	4621      	mov	r1, r4
 8004748:	4638      	mov	r0, r7
 800474a:	f7ff feab 	bl	80044a4 <dhcp_create_msg>
  if (p_out != NULL) {
 800474e:	4606      	mov	r6, r0
 8004750:	2800      	cmp	r0, #0
 8004752:	d07b      	beq.n	800484c <dhcp_select+0x150>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8004754:	6845      	ldr	r5, [r0, #4]
 8004756:	2302      	movs	r3, #2
 8004758:	2239      	movs	r2, #57	; 0x39
 800475a:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 800475e:	35f0      	adds	r5, #240	; 0xf0
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8004760:	f8df 910c 	ldr.w	r9, [pc, #268]	; 8004870 <dhcp_select+0x174>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8004764:	4629      	mov	r1, r5
 8004766:	f7ff fe43 	bl	80043f0 <dhcp_option>
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800476a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800476c:	4629      	mov	r1, r5
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800476e:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8004772:	f7ff fe21 	bl	80043b8 <dhcp_option_short>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8004776:	2304      	movs	r3, #4
 8004778:	2232      	movs	r2, #50	; 0x32
 800477a:	4629      	mov	r1, r5
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800477c:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8004780:	f7ff fe36 	bl	80043f0 <dhcp_option>
 8004784:	4680      	mov	r8, r0
 8004786:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800478a:	69e0      	ldr	r0, [r4, #28]
 800478c:	f7ff fd89 	bl	80042a2 <lwip_htonl>
 8004790:	4629      	mov	r1, r5
 8004792:	4602      	mov	r2, r0
 8004794:	4640      	mov	r0, r8
 8004796:	f7ff fe61 	bl	800445c <dhcp_option_long>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 800479a:	2304      	movs	r3, #4
 800479c:	2236      	movs	r2, #54	; 0x36
 800479e:	4629      	mov	r1, r5
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80047a0:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 80047a4:	f7ff fe24 	bl	80043f0 <dhcp_option>
 80047a8:	4680      	mov	r8, r0
 80047aa:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 80047ae:	69a0      	ldr	r0, [r4, #24]
 80047b0:	f7ff fd77 	bl	80042a2 <lwip_htonl>
 80047b4:	4629      	mov	r1, r5
 80047b6:	4602      	mov	r2, r0
 80047b8:	4640      	mov	r0, r8
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80047ba:	f04f 0800 	mov.w	r8, #0
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 80047be:	f7ff fe4d 	bl	800445c <dhcp_option_long>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80047c2:	2303      	movs	r3, #3
 80047c4:	2237      	movs	r2, #55	; 0x37
 80047c6:	4629      	mov	r1, r5
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 80047c8:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80047cc:	f7ff fe10 	bl	80043f0 <dhcp_option>
 80047d0:	f8ad 000e 	strh.w	r0, [sp, #14]
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80047d4:	f819 2008 	ldrb.w	r2, [r9, r8]
 80047d8:	f108 0801 	add.w	r8, r8, #1
 80047dc:	4629      	mov	r1, r5
 80047de:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 80047e2:	f7ff fe23 	bl	800442c <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80047e6:	f1b8 0f03 	cmp.w	r8, #3
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80047ea:	f8ad 000e 	strh.w	r0, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80047ee:	d1f1      	bne.n	80047d4 <dhcp_select+0xd8>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80047f0:	4629      	mov	r1, r5
 80047f2:	4632      	mov	r2, r6
 80047f4:	f7ff feea 	bl	80045cc <dhcp_option_trailer>
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80047f8:	4b1a      	ldr	r3, [pc, #104]	; (8004864 <dhcp_select+0x168>)
 80047fa:	481b      	ldr	r0, [pc, #108]	; (8004868 <dhcp_select+0x16c>)
 80047fc:	4631      	mov	r1, r6
 80047fe:	9301      	str	r3, [sp, #4]
 8004800:	2343      	movs	r3, #67	; 0x43
 8004802:	9700      	str	r7, [sp, #0]
 8004804:	4a19      	ldr	r2, [pc, #100]	; (800486c <dhcp_select+0x170>)
 8004806:	6800      	ldr	r0, [r0, #0]
 8004808:	f006 fcf2 	bl	800b1f0 <udp_sendto_if_src>
 800480c:	4605      	mov	r5, r0
    pbuf_free(p_out);
 800480e:	4630      	mov	r0, r6
 8004810:	f002 fd86 	bl	8007320 <pbuf_free>
  if (dhcp->tries < 255) {
 8004814:	79a3      	ldrb	r3, [r4, #6]
 8004816:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 8004818:	bf1c      	itt	ne
 800481a:	3301      	addne	r3, #1
 800481c:	71a3      	strbne	r3, [r4, #6]
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800481e:	79a2      	ldrb	r2, [r4, #6]
 8004820:	2a05      	cmp	r2, #5
 8004822:	bf97      	itett	ls
 8004824:	2301      	movls	r3, #1
 8004826:	f64e 2360 	movwhi	r3, #60000	; 0xea60
 800482a:	4093      	lslls	r3, r2
 800482c:	ebc3 1243 	rsbls	r2, r3, r3, lsl #5
 8004830:	bf98      	it	ls
 8004832:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8004836:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800483a:	bf9c      	itt	ls
 800483c:	00db      	lslls	r3, r3, #3
 800483e:	b29b      	uxthls	r3, r3
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8004840:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8004844:	fb93 f3f2 	sdiv	r3, r3, r2
 8004848:	8123      	strh	r3, [r4, #8]
  return result;
 800484a:	e765      	b.n	8004718 <dhcp_select+0x1c>
    result = ERR_MEM;
 800484c:	f04f 35ff 	mov.w	r5, #4294967295
 8004850:	e7e0      	b.n	8004814 <dhcp_select+0x118>
 8004852:	bf00      	nop
 8004854:	0800e213 	.word	0x0800e213
 8004858:	0800e2f5 	.word	0x0800e2f5
 800485c:	0800d104 	.word	0x0800d104
 8004860:	0800e310 	.word	0x0800e310
 8004864:	0800e650 	.word	0x0800e650
 8004868:	20006a2c 	.word	0x20006a2c
 800486c:	0800e654 	.word	0x0800e654
 8004870:	0800e13a 	.word	0x0800e13a

08004874 <dhcp_discover>:
{
 8004874:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8004878:	6a44      	ldr	r4, [r0, #36]	; 0x24
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 800487a:	2600      	movs	r6, #0
{
 800487c:	b085      	sub	sp, #20
 800487e:	4680      	mov	r8, r0
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8004880:	2106      	movs	r1, #6
 8004882:	4620      	mov	r0, r4
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8004884:	61e6      	str	r6, [r4, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8004886:	f7ff fd8f 	bl	80043a8 <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 800488a:	f10d 030e 	add.w	r3, sp, #14
 800488e:	2201      	movs	r2, #1
 8004890:	4621      	mov	r1, r4
 8004892:	4640      	mov	r0, r8
 8004894:	f7ff fe06 	bl	80044a4 <dhcp_create_msg>
  if (p_out != NULL) {
 8004898:	4607      	mov	r7, r0
 800489a:	b3c0      	cbz	r0, 800490e <dhcp_discover+0x9a>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800489c:	6845      	ldr	r5, [r0, #4]
 800489e:	2302      	movs	r3, #2
 80048a0:	2239      	movs	r2, #57	; 0x39
 80048a2:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 80048a6:	35f0      	adds	r5, #240	; 0xf0
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80048a8:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 8004958 <dhcp_discover+0xe4>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80048ac:	4629      	mov	r1, r5
 80048ae:	f7ff fd9f 	bl	80043f0 <dhcp_option>
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80048b2:	f8b8 2028 	ldrh.w	r2, [r8, #40]	; 0x28
 80048b6:	4629      	mov	r1, r5
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80048b8:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80048bc:	f7ff fd7c 	bl	80043b8 <dhcp_option_short>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80048c0:	2303      	movs	r3, #3
 80048c2:	2237      	movs	r2, #55	; 0x37
 80048c4:	4629      	mov	r1, r5
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80048c6:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80048ca:	f7ff fd91 	bl	80043f0 <dhcp_option>
 80048ce:	f8ad 000e 	strh.w	r0, [sp, #14]
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80048d2:	f819 2006 	ldrb.w	r2, [r9, r6]
 80048d6:	3601      	adds	r6, #1
 80048d8:	4629      	mov	r1, r5
 80048da:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 80048de:	f7ff fda5 	bl	800442c <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80048e2:	2e03      	cmp	r6, #3
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80048e4:	f8ad 000e 	strh.w	r0, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80048e8:	d1f3      	bne.n	80048d2 <dhcp_discover+0x5e>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80048ea:	463a      	mov	r2, r7
 80048ec:	4629      	mov	r1, r5
 80048ee:	f7ff fe6d 	bl	80045cc <dhcp_option_trailer>
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80048f2:	4b16      	ldr	r3, [pc, #88]	; (800494c <dhcp_discover+0xd8>)
 80048f4:	4816      	ldr	r0, [pc, #88]	; (8004950 <dhcp_discover+0xdc>)
 80048f6:	4639      	mov	r1, r7
 80048f8:	9301      	str	r3, [sp, #4]
 80048fa:	2343      	movs	r3, #67	; 0x43
 80048fc:	f8cd 8000 	str.w	r8, [sp]
 8004900:	4a14      	ldr	r2, [pc, #80]	; (8004954 <dhcp_discover+0xe0>)
 8004902:	6800      	ldr	r0, [r0, #0]
 8004904:	f006 fc74 	bl	800b1f0 <udp_sendto_if_src>
    pbuf_free(p_out);
 8004908:	4638      	mov	r0, r7
 800490a:	f002 fd09 	bl	8007320 <pbuf_free>
  if (dhcp->tries < 255) {
 800490e:	79a3      	ldrb	r3, [r4, #6]
}
 8004910:	2000      	movs	r0, #0
  if (dhcp->tries < 255) {
 8004912:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 8004914:	bf1c      	itt	ne
 8004916:	3301      	addne	r3, #1
 8004918:	71a3      	strbne	r3, [r4, #6]
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800491a:	79a2      	ldrb	r2, [r4, #6]
 800491c:	2a05      	cmp	r2, #5
 800491e:	bf97      	itett	ls
 8004920:	2301      	movls	r3, #1
 8004922:	f64e 2360 	movwhi	r3, #60000	; 0xea60
 8004926:	4093      	lslls	r3, r2
 8004928:	ebc3 1243 	rsbls	r2, r3, r3, lsl #5
 800492c:	bf98      	it	ls
 800492e:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8004932:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8004936:	bf9c      	itt	ls
 8004938:	00db      	lslls	r3, r3, #3
 800493a:	b29b      	uxthls	r3, r3
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800493c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8004940:	fb93 f3f2 	sdiv	r3, r3, r2
 8004944:	8123      	strh	r3, [r4, #8]
}
 8004946:	b005      	add	sp, #20
 8004948:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800494c:	0800e650 	.word	0x0800e650
 8004950:	20006a2c 	.word	0x20006a2c
 8004954:	0800e654 	.word	0x0800e654
 8004958:	0800e13a 	.word	0x0800e13a

0800495c <dhcp_check>:
{
 800495c:	b538      	push	{r3, r4, r5, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800495e:	6a44      	ldr	r4, [r0, #36]	; 0x24
{
 8004960:	4605      	mov	r5, r0
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8004962:	2108      	movs	r1, #8
 8004964:	4620      	mov	r0, r4
 8004966:	f7ff fd1f 	bl	80043a8 <dhcp_set_state>
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 800496a:	2200      	movs	r2, #0
 800496c:	f104 011c 	add.w	r1, r4, #28
 8004970:	4628      	mov	r0, r5
 8004972:	f001 f805 	bl	8005980 <etharp_query>
  if (dhcp->tries < 255) {
 8004976:	79a3      	ldrb	r3, [r4, #6]
 8004978:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 800497a:	bf1c      	itt	ne
 800497c:	3301      	addne	r3, #1
 800497e:	71a3      	strbne	r3, [r4, #6]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8004980:	2301      	movs	r3, #1
 8004982:	8123      	strh	r3, [r4, #8]
 8004984:	bd38      	pop	{r3, r4, r5, pc}
	...

08004988 <dhcp_bind>:
{
 8004988:	b537      	push	{r0, r1, r2, r4, r5, lr}
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 800498a:	4605      	mov	r5, r0
 800498c:	b940      	cbnz	r0, 80049a0 <dhcp_bind+0x18>
 800498e:	4b3a      	ldr	r3, [pc, #232]	; (8004a78 <dhcp_bind+0xf0>)
 8004990:	f240 4215 	movw	r2, #1045	; 0x415
 8004994:	4939      	ldr	r1, [pc, #228]	; (8004a7c <dhcp_bind+0xf4>)
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8004996:	483a      	ldr	r0, [pc, #232]	; (8004a80 <dhcp_bind+0xf8>)
 8004998:	f007 fbd4 	bl	800c144 <iprintf>
}
 800499c:	b003      	add	sp, #12
 800499e:	bd30      	pop	{r4, r5, pc}
  dhcp = netif_dhcp_data(netif);
 80049a0:	6a44      	ldr	r4, [r0, #36]	; 0x24
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 80049a2:	b924      	cbnz	r4, 80049ae <dhcp_bind+0x26>
 80049a4:	4b34      	ldr	r3, [pc, #208]	; (8004a78 <dhcp_bind+0xf0>)
 80049a6:	f240 4217 	movw	r2, #1047	; 0x417
 80049aa:	4936      	ldr	r1, [pc, #216]	; (8004a84 <dhcp_bind+0xfc>)
 80049ac:	e7f3      	b.n	8004996 <dhcp_bind+0xe>
  dhcp->lease_used = 0;
 80049ae:	2300      	movs	r3, #0
 80049b0:	8263      	strh	r3, [r4, #18]
  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 80049b2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80049b4:	1c5a      	adds	r2, r3, #1
 80049b6:	d00b      	beq.n	80049d0 <dhcp_bind+0x48>
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80049b8:	223c      	movs	r2, #60	; 0x3c
 80049ba:	331e      	adds	r3, #30
 80049bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80049c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80049c4:	4293      	cmp	r3, r2
 80049c6:	bf28      	it	cs
 80049c8:	4613      	movcs	r3, r2
    if (dhcp->t0_timeout == 0) {
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d041      	beq.n	8004a52 <dhcp_bind+0xca>
      dhcp->t0_timeout = 1;
 80049ce:	82a3      	strh	r3, [r4, #20]
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 80049d0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80049d2:	1c58      	adds	r0, r3, #1
 80049d4:	d00d      	beq.n	80049f2 <dhcp_bind+0x6a>
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80049d6:	223c      	movs	r2, #60	; 0x3c
 80049d8:	331e      	adds	r3, #30
 80049da:	fbb3 f3f2 	udiv	r3, r3, r2
 80049de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80049e2:	4293      	cmp	r3, r2
 80049e4:	bf28      	it	cs
 80049e6:	4613      	movcs	r3, r2
    if (dhcp->t1_timeout == 0) {
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d034      	beq.n	8004a56 <dhcp_bind+0xce>
      dhcp->t1_timeout = 1;
 80049ec:	8163      	strh	r3, [r4, #10]
    dhcp->t1_renew_time = dhcp->t1_timeout;
 80049ee:	8963      	ldrh	r3, [r4, #10]
 80049f0:	81e3      	strh	r3, [r4, #14]
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 80049f2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80049f4:	1c59      	adds	r1, r3, #1
 80049f6:	d00c      	beq.n	8004a12 <dhcp_bind+0x8a>
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80049f8:	223c      	movs	r2, #60	; 0x3c
 80049fa:	331e      	adds	r3, #30
 80049fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8004a00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a04:	4293      	cmp	r3, r2
 8004a06:	bf28      	it	cs
 8004a08:	4613      	movcs	r3, r2
    if (dhcp->t2_timeout == 0) {
 8004a0a:	b333      	cbz	r3, 8004a5a <dhcp_bind+0xd2>
      dhcp->t2_timeout = 1;
 8004a0c:	81a3      	strh	r3, [r4, #12]
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8004a0e:	89a3      	ldrh	r3, [r4, #12]
 8004a10:	8223      	strh	r3, [r4, #16]
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8004a12:	89a3      	ldrh	r3, [r4, #12]
 8004a14:	8962      	ldrh	r2, [r4, #10]
 8004a16:	429a      	cmp	r2, r3
 8004a18:	d302      	bcc.n	8004a20 <dhcp_bind+0x98>
 8004a1a:	b10b      	cbz	r3, 8004a20 <dhcp_bind+0x98>
    dhcp->t1_timeout = 0;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	8163      	strh	r3, [r4, #10]
  if (dhcp->subnet_mask_given) {
 8004a20:	79e3      	ldrb	r3, [r4, #7]
 8004a22:	b1e3      	cbz	r3, 8004a5e <dhcp_bind+0xd6>
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8004a24:	6a23      	ldr	r3, [r4, #32]
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8004a26:	9300      	str	r3, [sp, #0]
  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 8004a28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004a2a:	9301      	str	r3, [sp, #4]
  if (ip4_addr_isany_val(gw_addr)) {
 8004a2c:	b92b      	cbnz	r3, 8004a3a <dhcp_bind+0xb2>
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 8004a2e:	69e3      	ldr	r3, [r4, #28]
 8004a30:	9a00      	ldr	r2, [sp, #0]
 8004a32:	4013      	ands	r3, r2
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8004a34:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a38:	9301      	str	r3, [sp, #4]
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8004a3a:	4620      	mov	r0, r4
 8004a3c:	210a      	movs	r1, #10
 8004a3e:	f7ff fcb3 	bl	80043a8 <dhcp_set_state>
  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8004a42:	ab01      	add	r3, sp, #4
 8004a44:	466a      	mov	r2, sp
 8004a46:	f104 011c 	add.w	r1, r4, #28
 8004a4a:	4628      	mov	r0, r5
 8004a4c:	f002 fab0 	bl	8006fb0 <netif_set_addr>
 8004a50:	e7a4      	b.n	800499c <dhcp_bind+0x14>
      dhcp->t0_timeout = 1;
 8004a52:	2301      	movs	r3, #1
 8004a54:	e7bb      	b.n	80049ce <dhcp_bind+0x46>
      dhcp->t1_timeout = 1;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e7c8      	b.n	80049ec <dhcp_bind+0x64>
      dhcp->t2_timeout = 1;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e7d6      	b.n	8004a0c <dhcp_bind+0x84>
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8004a5e:	7f23      	ldrb	r3, [r4, #28]
    if (first_octet <= 127) {
 8004a60:	061a      	lsls	r2, r3, #24
 8004a62:	d401      	bmi.n	8004a68 <dhcp_bind+0xe0>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8004a64:	23ff      	movs	r3, #255	; 0xff
 8004a66:	e7de      	b.n	8004a26 <dhcp_bind+0x9e>
    } else if (first_octet >= 192) {
 8004a68:	2bbf      	cmp	r3, #191	; 0xbf
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8004a6a:	bf8c      	ite	hi
 8004a6c:	f06f 437f 	mvnhi.w	r3, #4278190080	; 0xff000000
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8004a70:	f64f 73ff 	movwls	r3, #65535	; 0xffff
 8004a74:	e7d7      	b.n	8004a26 <dhcp_bind+0x9e>
 8004a76:	bf00      	nop
 8004a78:	0800e213 	.word	0x0800e213
 8004a7c:	0800e068 	.word	0x0800e068
 8004a80:	0800d104 	.word	0x0800d104
 8004a84:	0800e081 	.word	0x0800e081

08004a88 <dhcp_inc_pcb_refcount>:
{
 8004a88:	b538      	push	{r3, r4, r5, lr}
  if (dhcp_pcb_refcount == 0) {
 8004a8a:	4d15      	ldr	r5, [pc, #84]	; (8004ae0 <dhcp_inc_pcb_refcount+0x58>)
 8004a8c:	782b      	ldrb	r3, [r5, #0]
 8004a8e:	b9f3      	cbnz	r3, 8004ace <dhcp_inc_pcb_refcount+0x46>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8004a90:	4c14      	ldr	r4, [pc, #80]	; (8004ae4 <dhcp_inc_pcb_refcount+0x5c>)
 8004a92:	6823      	ldr	r3, [r4, #0]
 8004a94:	b12b      	cbz	r3, 8004aa2 <dhcp_inc_pcb_refcount+0x1a>
 8004a96:	4b14      	ldr	r3, [pc, #80]	; (8004ae8 <dhcp_inc_pcb_refcount+0x60>)
 8004a98:	22e5      	movs	r2, #229	; 0xe5
 8004a9a:	4914      	ldr	r1, [pc, #80]	; (8004aec <dhcp_inc_pcb_refcount+0x64>)
 8004a9c:	4814      	ldr	r0, [pc, #80]	; (8004af0 <dhcp_inc_pcb_refcount+0x68>)
 8004a9e:	f007 fb51 	bl	800c144 <iprintf>
    dhcp_pcb = udp_new();
 8004aa2:	f006 fcf3 	bl	800b48c <udp_new>
 8004aa6:	6020      	str	r0, [r4, #0]
    if (dhcp_pcb == NULL) {
 8004aa8:	b1b0      	cbz	r0, 8004ad8 <dhcp_inc_pcb_refcount+0x50>
    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8004aaa:	7a42      	ldrb	r2, [r0, #9]
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8004aac:	4911      	ldr	r1, [pc, #68]	; (8004af4 <dhcp_inc_pcb_refcount+0x6c>)
    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8004aae:	f042 0220 	orr.w	r2, r2, #32
 8004ab2:	7242      	strb	r2, [r0, #9]
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8004ab4:	2244      	movs	r2, #68	; 0x44
 8004ab6:	f006 fb35 	bl	800b124 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8004aba:	2243      	movs	r2, #67	; 0x43
 8004abc:	490d      	ldr	r1, [pc, #52]	; (8004af4 <dhcp_inc_pcb_refcount+0x6c>)
 8004abe:	6820      	ldr	r0, [r4, #0]
 8004ac0:	f006 fc70 	bl	800b3a4 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	490c      	ldr	r1, [pc, #48]	; (8004af8 <dhcp_inc_pcb_refcount+0x70>)
 8004ac8:	6820      	ldr	r0, [r4, #0]
 8004aca:	f006 fca7 	bl	800b41c <udp_recv>
  dhcp_pcb_refcount++;
 8004ace:	782b      	ldrb	r3, [r5, #0]
  return ERR_OK;
 8004ad0:	2000      	movs	r0, #0
  dhcp_pcb_refcount++;
 8004ad2:	3301      	adds	r3, #1
 8004ad4:	702b      	strb	r3, [r5, #0]
  return ERR_OK;
 8004ad6:	bd38      	pop	{r3, r4, r5, pc}
      return ERR_MEM;
 8004ad8:	f04f 30ff 	mov.w	r0, #4294967295
}
 8004adc:	bd38      	pop	{r3, r4, r5, pc}
 8004ade:	bf00      	nop
 8004ae0:	20006a30 	.word	0x20006a30
 8004ae4:	20006a2c 	.word	0x20006a2c
 8004ae8:	0800e213 	.word	0x0800e213
 8004aec:	0800e13d 	.word	0x0800e13d
 8004af0:	0800d104 	.word	0x0800d104
 8004af4:	0800e650 	.word	0x0800e650
 8004af8:	08004ba5 	.word	0x08004ba5

08004afc <dhcp_handle_ack.isra.0>:
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
 8004afc:	b538      	push	{r3, r4, r5, lr}
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8004afe:	2300      	movs	r3, #0
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8004b00:	4d16      	ldr	r5, [pc, #88]	; (8004b5c <dhcp_handle_ack.isra.0+0x60>)
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
 8004b02:	4604      	mov	r4, r0
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8004b04:	6203      	str	r3, [r0, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8004b06:	6243      	str	r3, [r0, #36]	; 0x24
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8004b08:	78eb      	ldrb	r3, [r5, #3]
 8004b0a:	b113      	cbz	r3, 8004b12 <dhcp_handle_ack.isra.0+0x16>
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8004b0c:	4b14      	ldr	r3, [pc, #80]	; (8004b60 <dhcp_handle_ack.isra.0+0x64>)
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	6283      	str	r3, [r0, #40]	; 0x28
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8004b12:	792b      	ldrb	r3, [r5, #4]
 8004b14:	b1d3      	cbz	r3, 8004b4c <dhcp_handle_ack.isra.0+0x50>
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8004b16:	4b12      	ldr	r3, [pc, #72]	; (8004b60 <dhcp_handle_ack.isra.0+0x64>)
 8004b18:	691b      	ldr	r3, [r3, #16]
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8004b1a:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8004b1c:	796b      	ldrb	r3, [r5, #5]
 8004b1e:	b1c3      	cbz	r3, 8004b52 <dhcp_handle_ack.isra.0+0x56>
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8004b20:	4b0f      	ldr	r3, [pc, #60]	; (8004b60 <dhcp_handle_ack.isra.0+0x64>)
 8004b22:	695b      	ldr	r3, [r3, #20]
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8004b24:	6323      	str	r3, [r4, #48]	; 0x30
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8004b26:	690b      	ldr	r3, [r1, #16]
 8004b28:	61e3      	str	r3, [r4, #28]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8004b2a:	79ab      	ldrb	r3, [r5, #6]
 8004b2c:	b12b      	cbz	r3, 8004b3a <dhcp_handle_ack.isra.0+0x3e>
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8004b2e:	4b0c      	ldr	r3, [pc, #48]	; (8004b60 <dhcp_handle_ack.isra.0+0x64>)
 8004b30:	6998      	ldr	r0, [r3, #24]
 8004b32:	f7ff fbb6 	bl	80042a2 <lwip_htonl>
    dhcp->subnet_mask_given = 1;
 8004b36:	2301      	movs	r3, #1
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8004b38:	6220      	str	r0, [r4, #32]
    dhcp->subnet_mask_given = 0;
 8004b3a:	71e3      	strb	r3, [r4, #7]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8004b3c:	79eb      	ldrb	r3, [r5, #7]
 8004b3e:	b123      	cbz	r3, 8004b4a <dhcp_handle_ack.isra.0+0x4e>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8004b40:	4b07      	ldr	r3, [pc, #28]	; (8004b60 <dhcp_handle_ack.isra.0+0x64>)
 8004b42:	69d8      	ldr	r0, [r3, #28]
 8004b44:	f7ff fbad 	bl	80042a2 <lwip_htonl>
 8004b48:	6260      	str	r0, [r4, #36]	; 0x24
 8004b4a:	bd38      	pop	{r3, r4, r5, pc}
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8004b4c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004b4e:	085b      	lsrs	r3, r3, #1
 8004b50:	e7e3      	b.n	8004b1a <dhcp_handle_ack.isra.0+0x1e>
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8004b52:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004b54:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8004b58:	08db      	lsrs	r3, r3, #3
 8004b5a:	e7e3      	b.n	8004b24 <dhcp_handle_ack.isra.0+0x28>
 8004b5c:	20006e48 	.word	0x20006e48
 8004b60:	20006e50 	.word	0x20006e50

08004b64 <dhcp_dec_pcb_refcount>:
{
 8004b64:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8004b66:	4d0a      	ldr	r5, [pc, #40]	; (8004b90 <dhcp_dec_pcb_refcount+0x2c>)
 8004b68:	782b      	ldrb	r3, [r5, #0]
 8004b6a:	b92b      	cbnz	r3, 8004b78 <dhcp_dec_pcb_refcount+0x14>
 8004b6c:	4b09      	ldr	r3, [pc, #36]	; (8004b94 <dhcp_dec_pcb_refcount+0x30>)
 8004b6e:	22ff      	movs	r2, #255	; 0xff
 8004b70:	4909      	ldr	r1, [pc, #36]	; (8004b98 <dhcp_dec_pcb_refcount+0x34>)
 8004b72:	480a      	ldr	r0, [pc, #40]	; (8004b9c <dhcp_dec_pcb_refcount+0x38>)
 8004b74:	f007 fae6 	bl	800c144 <iprintf>
  dhcp_pcb_refcount--;
 8004b78:	782c      	ldrb	r4, [r5, #0]
 8004b7a:	3c01      	subs	r4, #1
 8004b7c:	b2e4      	uxtb	r4, r4
 8004b7e:	702c      	strb	r4, [r5, #0]
  if (dhcp_pcb_refcount == 0) {
 8004b80:	b924      	cbnz	r4, 8004b8c <dhcp_dec_pcb_refcount+0x28>
    udp_remove(dhcp_pcb);
 8004b82:	4d07      	ldr	r5, [pc, #28]	; (8004ba0 <dhcp_dec_pcb_refcount+0x3c>)
 8004b84:	6828      	ldr	r0, [r5, #0]
 8004b86:	f006 fc5b 	bl	800b440 <udp_remove>
    dhcp_pcb = NULL;
 8004b8a:	602c      	str	r4, [r5, #0]
 8004b8c:	bd38      	pop	{r3, r4, r5, pc}
 8004b8e:	bf00      	nop
 8004b90:	20006a30 	.word	0x20006a30
 8004b94:	0800e213 	.word	0x0800e213
 8004b98:	0800e116 	.word	0x0800e116
 8004b9c:	0800d104 	.word	0x0800d104
 8004ba0:	20006a2c 	.word	0x20006a2c

08004ba4 <dhcp_recv>:
  struct netif *netif = ip_current_input_netif();
 8004ba4:	4baa      	ldr	r3, [pc, #680]	; (8004e50 <dhcp_recv+0x2ac>)
{
 8004ba6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct netif *netif = ip_current_input_netif();
 8004baa:	685d      	ldr	r5, [r3, #4]
{
 8004bac:	b089      	sub	sp, #36	; 0x24
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8004bae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
{
 8004bb0:	9201      	str	r2, [sp, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8004bb2:	9302      	str	r3, [sp, #8]
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d03a      	beq.n	8004c2e <dhcp_recv+0x8a>
 8004bb8:	791b      	ldrb	r3, [r3, #4]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d037      	beq.n	8004c2e <dhcp_recv+0x8a>
  if (p->len < DHCP_MIN_REPLY_LEN) {
 8004bbe:	8953      	ldrh	r3, [r2, #10]
 8004bc0:	2b2b      	cmp	r3, #43	; 0x2b
 8004bc2:	d934      	bls.n	8004c2e <dhcp_recv+0x8a>
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8004bc4:	6852      	ldr	r2, [r2, #4]
  if (reply_msg->op != DHCP_BOOTREPLY) {
 8004bc6:	7813      	ldrb	r3, [r2, #0]
 8004bc8:	2b02      	cmp	r3, #2
 8004bca:	d130      	bne.n	8004c2e <dhcp_recv+0x8a>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8004bcc:	f895 4030 	ldrb.w	r4, [r5, #48]	; 0x30
 8004bd0:	f105 012a 	add.w	r1, r5, #42	; 0x2a
 8004bd4:	f102 001c 	add.w	r0, r2, #28
 8004bd8:	2300      	movs	r3, #0
 8004bda:	b2de      	uxtb	r6, r3
 8004bdc:	42b4      	cmp	r4, r6
 8004bde:	d901      	bls.n	8004be4 <dhcp_recv+0x40>
 8004be0:	2b06      	cmp	r3, #6
 8004be2:	d11d      	bne.n	8004c20 <dhcp_recv+0x7c>
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8004be4:	6850      	ldr	r0, [r2, #4]
 8004be6:	f7ff fb5c 	bl	80042a2 <lwip_htonl>
 8004bea:	9b02      	ldr	r3, [sp, #8]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4298      	cmp	r0, r3
 8004bf0:	d11d      	bne.n	8004c2e <dhcp_recv+0x8a>
  dhcp_clear_all_options(dhcp);
 8004bf2:	4b98      	ldr	r3, [pc, #608]	; (8004e54 <dhcp_recv+0x2b0>)
 8004bf4:	2200      	movs	r2, #0
  if (p->len < DHCP_SNAME_OFS) {
 8004bf6:	9901      	ldr	r1, [sp, #4]
  dhcp_clear_all_options(dhcp);
 8004bf8:	605a      	str	r2, [r3, #4]
  if (p->len < DHCP_SNAME_OFS) {
 8004bfa:	8949      	ldrh	r1, [r1, #10]
  dhcp_clear_all_options(dhcp);
 8004bfc:	601a      	str	r2, [r3, #0]
  if (p->len < DHCP_SNAME_OFS) {
 8004bfe:	292b      	cmp	r1, #43	; 0x2b
 8004c00:	d915      	bls.n	8004c2e <dhcp_recv+0x8a>
  options_idx_max = p->tot_len;
 8004c02:	9901      	ldr	r1, [sp, #4]
  options_idx = DHCP_OPTIONS_OFS;
 8004c04:	f04f 09f0 	mov.w	r9, #240	; 0xf0
  int parse_sname_as_options = 0;
 8004c08:	9204      	str	r2, [sp, #16]
  options_idx_max = p->tot_len;
 8004c0a:	f8b1 a008 	ldrh.w	sl, [r1, #8]
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8004c0e:	9303      	str	r3, [sp, #12]
  options_idx = DHCP_OPTIONS_OFS;
 8004c10:	9e01      	ldr	r6, [sp, #4]
  while ((q != NULL) && (options_idx >= q->len)) {
 8004c12:	8973      	ldrh	r3, [r6, #10]
 8004c14:	454b      	cmp	r3, r9
 8004c16:	d910      	bls.n	8004c3a <dhcp_recv+0x96>
  options = (u8_t *)q->payload;
 8004c18:	6873      	ldr	r3, [r6, #4]
 8004c1a:	464c      	mov	r4, r9
 8004c1c:	9305      	str	r3, [sp, #20]
 8004c1e:	e0f2      	b.n	8004e06 <dhcp_recv+0x262>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8004c20:	f811 7b01 	ldrb.w	r7, [r1], #1
 8004c24:	3301      	adds	r3, #1
 8004c26:	f810 6b01 	ldrb.w	r6, [r0], #1
 8004c2a:	42b7      	cmp	r7, r6
 8004c2c:	d0d5      	beq.n	8004bda <dhcp_recv+0x36>
  pbuf_free(p);
 8004c2e:	9801      	ldr	r0, [sp, #4]
 8004c30:	f002 fb76 	bl	8007320 <pbuf_free>
}
 8004c34:	b009      	add	sp, #36	; 0x24
 8004c36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    options_idx = (u16_t)(options_idx - q->len);
 8004c3a:	eba9 0903 	sub.w	r9, r9, r3
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8004c3e:	ebaa 0a03 	sub.w	sl, sl, r3
    q = q->next;
 8004c42:	6836      	ldr	r6, [r6, #0]
    options_idx = (u16_t)(options_idx - q->len);
 8004c44:	fa1f f989 	uxth.w	r9, r9
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8004c48:	fa1f fa8a 	uxth.w	sl, sl
  while ((q != NULL) && (options_idx >= q->len)) {
 8004c4c:	2e00      	cmp	r6, #0
 8004c4e:	d1e0      	bne.n	8004c12 <dhcp_recv+0x6e>
 8004c50:	e7ed      	b.n	8004c2e <dhcp_recv+0x8a>
    u16_t val_offset = (u16_t)(offset + 2);
 8004c52:	f104 0b02 	add.w	fp, r4, #2
 8004c56:	fa1f fb8b 	uxth.w	fp, fp
    if (val_offset < offset) {
 8004c5a:	455c      	cmp	r4, fp
 8004c5c:	d8e7      	bhi.n	8004c2e <dhcp_recv+0x8a>
    if ((offset + 1) < q->len) {
 8004c5e:	1c61      	adds	r1, r4, #1
 8004c60:	8973      	ldrh	r3, [r6, #10]
 8004c62:	4299      	cmp	r1, r3
 8004c64:	da25      	bge.n	8004cb2 <dhcp_recv+0x10e>
      len = options[offset + 1];
 8004c66:	9b05      	ldr	r3, [sp, #20]
 8004c68:	4423      	add	r3, r4
 8004c6a:	785b      	ldrb	r3, [r3, #1]
    switch (op) {
 8004c6c:	2a34      	cmp	r2, #52	; 0x34
 8004c6e:	d04c      	beq.n	8004d0a <dhcp_recv+0x166>
 8004c70:	d826      	bhi.n	8004cc0 <dhcp_recv+0x11c>
 8004c72:	2a01      	cmp	r2, #1
 8004c74:	d032      	beq.n	8004cdc <dhcp_recv+0x138>
 8004c76:	d306      	bcc.n	8004c86 <dhcp_recv+0xe2>
 8004c78:	2a03      	cmp	r2, #3
 8004c7a:	d036      	beq.n	8004cea <dhcp_recv+0x146>
 8004c7c:	2a33      	cmp	r2, #51	; 0x33
 8004c7e:	d03e      	beq.n	8004cfe <dhcp_recv+0x15a>
    if (op == DHCP_OPTION_PAD) {
 8004c80:	2a00      	cmp	r2, #0
 8004c82:	f040 80ad 	bne.w	8004de0 <dhcp_recv+0x23c>
      offset++;
 8004c86:	b28c      	uxth	r4, r1
    if (offset >= q->len) {
 8004c88:	8973      	ldrh	r3, [r6, #10]
 8004c8a:	42a3      	cmp	r3, r4
 8004c8c:	f200 80bb 	bhi.w	8004e06 <dhcp_recv+0x262>
      offset = (u16_t)(offset - q->len);
 8004c90:	1ae4      	subs	r4, r4, r3
      offset_max = (u16_t)(offset_max - q->len);
 8004c92:	ebaa 0a03 	sub.w	sl, sl, r3
      offset = (u16_t)(offset - q->len);
 8004c96:	b2a4      	uxth	r4, r4
      offset_max = (u16_t)(offset_max - q->len);
 8004c98:	fa1f fa8a 	uxth.w	sl, sl
      if (offset < offset_max) {
 8004c9c:	4554      	cmp	r4, sl
 8004c9e:	d2c6      	bcs.n	8004c2e <dhcp_recv+0x8a>
        q = q->next;
 8004ca0:	6836      	ldr	r6, [r6, #0]
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8004ca2:	2e00      	cmp	r6, #0
 8004ca4:	f040 80ad 	bne.w	8004e02 <dhcp_recv+0x25e>
 8004ca8:	4b6b      	ldr	r3, [pc, #428]	; (8004e58 <dhcp_recv+0x2b4>)
 8004caa:	f240 629d 	movw	r2, #1693	; 0x69d
 8004cae:	496b      	ldr	r1, [pc, #428]	; (8004e5c <dhcp_recv+0x2b8>)
 8004cb0:	e021      	b.n	8004cf6 <dhcp_recv+0x152>
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8004cb2:	6833      	ldr	r3, [r6, #0]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	f000 8122 	beq.w	8004efe <dhcp_recv+0x35a>
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	781b      	ldrb	r3, [r3, #0]
 8004cbe:	e7d5      	b.n	8004c6c <dhcp_recv+0xc8>
    switch (op) {
 8004cc0:	2a36      	cmp	r2, #54	; 0x36
 8004cc2:	d037      	beq.n	8004d34 <dhcp_recv+0x190>
 8004cc4:	d330      	bcc.n	8004d28 <dhcp_recv+0x184>
 8004cc6:	2a3a      	cmp	r2, #58	; 0x3a
 8004cc8:	d03a      	beq.n	8004d40 <dhcp_recv+0x19c>
 8004cca:	2a3b      	cmp	r2, #59	; 0x3b
 8004ccc:	d1d8      	bne.n	8004c80 <dhcp_recv+0xdc>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8004cce:	2b04      	cmp	r3, #4
 8004cd0:	f000 8083 	beq.w	8004dda <dhcp_recv+0x236>
 8004cd4:	4b60      	ldr	r3, [pc, #384]	; (8004e58 <dhcp_recv+0x2b4>)
 8004cd6:	f240 6261 	movw	r2, #1633	; 0x661
 8004cda:	e004      	b.n	8004ce6 <dhcp_recv+0x142>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8004cdc:	2b04      	cmp	r3, #4
 8004cde:	d035      	beq.n	8004d4c <dhcp_recv+0x1a8>
 8004ce0:	4b5d      	ldr	r3, [pc, #372]	; (8004e58 <dhcp_recv+0x2b4>)
 8004ce2:	f240 622e 	movw	r2, #1582	; 0x62e
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8004ce6:	495e      	ldr	r1, [pc, #376]	; (8004e60 <dhcp_recv+0x2bc>)
 8004ce8:	e005      	b.n	8004cf6 <dhcp_recv+0x152>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8004cea:	2b03      	cmp	r3, #3
 8004cec:	d865      	bhi.n	8004dba <dhcp_recv+0x216>
 8004cee:	4b5a      	ldr	r3, [pc, #360]	; (8004e58 <dhcp_recv+0x2b4>)
 8004cf0:	f240 6233 	movw	r2, #1587	; 0x633
 8004cf4:	495b      	ldr	r1, [pc, #364]	; (8004e64 <dhcp_recv+0x2c0>)
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8004cf6:	485c      	ldr	r0, [pc, #368]	; (8004e68 <dhcp_recv+0x2c4>)
 8004cf8:	f007 fa24 	bl	800c144 <iprintf>
 8004cfc:	e797      	b.n	8004c2e <dhcp_recv+0x8a>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8004cfe:	2b04      	cmp	r3, #4
 8004d00:	d05f      	beq.n	8004dc2 <dhcp_recv+0x21e>
 8004d02:	4b55      	ldr	r3, [pc, #340]	; (8004e58 <dhcp_recv+0x2b4>)
 8004d04:	f240 6241 	movw	r2, #1601	; 0x641
 8004d08:	e7ed      	b.n	8004ce6 <dhcp_recv+0x142>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d004      	beq.n	8004d18 <dhcp_recv+0x174>
 8004d0e:	4b52      	ldr	r3, [pc, #328]	; (8004e58 <dhcp_recv+0x2b4>)
 8004d10:	f240 624f 	movw	r2, #1615	; 0x64f
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8004d14:	4955      	ldr	r1, [pc, #340]	; (8004e6c <dhcp_recv+0x2c8>)
 8004d16:	e7ee      	b.n	8004cf6 <dhcp_recv+0x152>
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8004d18:	f1b9 0ff0 	cmp.w	r9, #240	; 0xf0
 8004d1c:	d054      	beq.n	8004dc8 <dhcp_recv+0x224>
 8004d1e:	4b4e      	ldr	r3, [pc, #312]	; (8004e58 <dhcp_recv+0x2b4>)
 8004d20:	f240 6251 	movw	r2, #1617	; 0x651
 8004d24:	4952      	ldr	r1, [pc, #328]	; (8004e70 <dhcp_recv+0x2cc>)
 8004d26:	e7e6      	b.n	8004cf6 <dhcp_recv+0x152>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d053      	beq.n	8004dd4 <dhcp_recv+0x230>
 8004d2c:	4b4a      	ldr	r3, [pc, #296]	; (8004e58 <dhcp_recv+0x2b4>)
 8004d2e:	f240 6255 	movw	r2, #1621	; 0x655
 8004d32:	e7ef      	b.n	8004d14 <dhcp_recv+0x170>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8004d34:	2b04      	cmp	r3, #4
 8004d36:	d04a      	beq.n	8004dce <dhcp_recv+0x22a>
 8004d38:	4b47      	ldr	r3, [pc, #284]	; (8004e58 <dhcp_recv+0x2b4>)
 8004d3a:	f240 6259 	movw	r2, #1625	; 0x659
 8004d3e:	e7d2      	b.n	8004ce6 <dhcp_recv+0x142>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8004d40:	2b04      	cmp	r3, #4
 8004d42:	d047      	beq.n	8004dd4 <dhcp_recv+0x230>
 8004d44:	4b44      	ldr	r3, [pc, #272]	; (8004e58 <dhcp_recv+0x2b4>)
 8004d46:	f240 625d 	movw	r2, #1629	; 0x65d
 8004d4a:	e7cc      	b.n	8004ce6 <dhcp_recv+0x142>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8004d4c:	4698      	mov	r8, r3
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8004d4e:	2706      	movs	r7, #6
      if (offset + len + 2 > 0xFFFF) {
 8004d50:	441c      	add	r4, r3
 8004d52:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8004d56:	4294      	cmp	r4, r2
 8004d58:	f73f af69 	bgt.w	8004c2e <dhcp_recv+0x8a>
      offset = (u16_t)(offset + len + 2);
 8004d5c:	eb0b 0403 	add.w	r4, fp, r3
 8004d60:	b2a4      	uxth	r4, r4
      if (decode_len > 0) {
 8004d62:	f1b8 0f00 	cmp.w	r8, #0
 8004d66:	d08f      	beq.n	8004c88 <dhcp_recv+0xe4>
        u32_t value = 0;
 8004d68:	2300      	movs	r3, #0
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8004d6a:	2f07      	cmp	r7, #7
        u32_t value = 0;
 8004d6c:	9307      	str	r3, [sp, #28]
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8004d6e:	d906      	bls.n	8004d7e <dhcp_recv+0x1da>
 8004d70:	4b39      	ldr	r3, [pc, #228]	; (8004e58 <dhcp_recv+0x2b4>)
 8004d72:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 8004d76:	493f      	ldr	r1, [pc, #252]	; (8004e74 <dhcp_recv+0x2d0>)
 8004d78:	483b      	ldr	r0, [pc, #236]	; (8004e68 <dhcp_recv+0x2c4>)
 8004d7a:	f007 f9e3 	bl	800c144 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8004d7e:	9b03      	ldr	r3, [sp, #12]
 8004d80:	5ddb      	ldrb	r3, [r3, r7]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d180      	bne.n	8004c88 <dhcp_recv+0xe4>
 8004d86:	fa1f f288 	uxth.w	r2, r8
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8004d8a:	465b      	mov	r3, fp
 8004d8c:	a907      	add	r1, sp, #28
 8004d8e:	4630      	mov	r0, r6
 8004d90:	4693      	mov	fp, r2
 8004d92:	f002 fcf5 	bl	8007780 <pbuf_copy_partial>
 8004d96:	4583      	cmp	fp, r0
 8004d98:	f47f af49 	bne.w	8004c2e <dhcp_recv+0x8a>
          } else if (decode_len == 4) {
 8004d9c:	f1b8 0f04 	cmp.w	r8, #4
 8004da0:	d123      	bne.n	8004dea <dhcp_recv+0x246>
            value = lwip_ntohl(value);
 8004da2:	9807      	ldr	r0, [sp, #28]
 8004da4:	f7ff fa7d 	bl	80042a2 <lwip_htonl>
 8004da8:	9007      	str	r0, [sp, #28]
          dhcp_got_option(dhcp, decode_idx);
 8004daa:	2301      	movs	r3, #1
 8004dac:	9a03      	ldr	r2, [sp, #12]
 8004dae:	55d3      	strb	r3, [r2, r7]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8004db0:	9b07      	ldr	r3, [sp, #28]
 8004db2:	4a31      	ldr	r2, [pc, #196]	; (8004e78 <dhcp_recv+0x2d4>)
 8004db4:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
 8004db8:	e766      	b.n	8004c88 <dhcp_recv+0xe4>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8004dba:	2707      	movs	r7, #7
        decode_len = 4; /* only copy the first given router */
 8004dbc:	f04f 0804 	mov.w	r8, #4
 8004dc0:	e7c6      	b.n	8004d50 <dhcp_recv+0x1ac>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8004dc2:	4698      	mov	r8, r3
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8004dc4:	2703      	movs	r7, #3
 8004dc6:	e7c3      	b.n	8004d50 <dhcp_recv+0x1ac>
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8004dc8:	4698      	mov	r8, r3
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8004dca:	2700      	movs	r7, #0
 8004dcc:	e7c0      	b.n	8004d50 <dhcp_recv+0x1ac>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8004dce:	4698      	mov	r8, r3
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8004dd0:	2702      	movs	r7, #2
 8004dd2:	e7bd      	b.n	8004d50 <dhcp_recv+0x1ac>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8004dd4:	4698      	mov	r8, r3
        decode_idx = DHCP_OPTION_IDX_T1;
 8004dd6:	461f      	mov	r7, r3
 8004dd8:	e7ba      	b.n	8004d50 <dhcp_recv+0x1ac>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8004dda:	4698      	mov	r8, r3
        decode_idx = DHCP_OPTION_IDX_T2;
 8004ddc:	2705      	movs	r7, #5
 8004dde:	e7b7      	b.n	8004d50 <dhcp_recv+0x1ac>
    if (op == DHCP_OPTION_PAD) {
 8004de0:	f04f 37ff 	mov.w	r7, #4294967295
 8004de4:	f04f 0800 	mov.w	r8, #0
 8004de8:	e7b2      	b.n	8004d50 <dhcp_recv+0x1ac>
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8004dea:	f1b8 0f01 	cmp.w	r8, #1
 8004dee:	d004      	beq.n	8004dfa <dhcp_recv+0x256>
 8004df0:	4b19      	ldr	r3, [pc, #100]	; (8004e58 <dhcp_recv+0x2b4>)
 8004df2:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8004df6:	4921      	ldr	r1, [pc, #132]	; (8004e7c <dhcp_recv+0x2d8>)
 8004df8:	e77d      	b.n	8004cf6 <dhcp_recv+0x152>
            value = ((u8_t *)&value)[0];
 8004dfa:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8004dfe:	9307      	str	r3, [sp, #28]
 8004e00:	e7d3      	b.n	8004daa <dhcp_recv+0x206>
        options = (u8_t *)q->payload;
 8004e02:	6873      	ldr	r3, [r6, #4]
 8004e04:	9305      	str	r3, [sp, #20]
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8004e06:	4554      	cmp	r4, sl
 8004e08:	d204      	bcs.n	8004e14 <dhcp_recv+0x270>
 8004e0a:	9b05      	ldr	r3, [sp, #20]
 8004e0c:	5d1a      	ldrb	r2, [r3, r4]
 8004e0e:	2aff      	cmp	r2, #255	; 0xff
 8004e10:	f47f af1f 	bne.w	8004c52 <dhcp_recv+0xae>
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8004e14:	9b03      	ldr	r3, [sp, #12]
 8004e16:	781b      	ldrb	r3, [r3, #0]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	f000 808d 	beq.w	8004f38 <dhcp_recv+0x394>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8004e1e:	4b16      	ldr	r3, [pc, #88]	; (8004e78 <dhcp_recv+0x2d4>)
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8004e20:	2200      	movs	r2, #0
 8004e22:	9903      	ldr	r1, [sp, #12]
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8004e24:	681b      	ldr	r3, [r3, #0]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8004e26:	700a      	strb	r2, [r1, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d00c      	beq.n	8004e46 <dhcp_recv+0x2a2>
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8004e2c:	2b02      	cmp	r3, #2
 8004e2e:	d106      	bne.n	8004e3e <dhcp_recv+0x29a>
    parse_sname_as_options = 0;
 8004e30:	2300      	movs	r3, #0
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8004e32:	f04f 0a6c 	mov.w	sl, #108	; 0x6c
    options_idx = DHCP_SNAME_OFS;
 8004e36:	f04f 092c 	mov.w	r9, #44	; 0x2c
    parse_sname_as_options = 0;
 8004e3a:	9304      	str	r3, [sp, #16]
 8004e3c:	e6e8      	b.n	8004c10 <dhcp_recv+0x6c>
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8004e3e:	2b03      	cmp	r3, #3
 8004e40:	d17a      	bne.n	8004f38 <dhcp_recv+0x394>
      parse_sname_as_options = 1;
 8004e42:	2301      	movs	r3, #1
 8004e44:	9304      	str	r3, [sp, #16]
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8004e46:	f04f 0aec 	mov.w	sl, #236	; 0xec
    options_idx = DHCP_FILE_OFS;
 8004e4a:	f04f 096c 	mov.w	r9, #108	; 0x6c
 8004e4e:	e6df      	b.n	8004c10 <dhcp_recv+0x6c>
 8004e50:	20006e30 	.word	0x20006e30
 8004e54:	20006e48 	.word	0x20006e48
 8004e58:	0800e213 	.word	0x0800e213
 8004e5c:	0800e2e2 	.word	0x0800e2e2
 8004e60:	0800e283 	.word	0x0800e283
 8004e64:	0800e28c 	.word	0x0800e28c
 8004e68:	0800d104 	.word	0x0800d104
 8004e6c:	0800e29e 	.word	0x0800e29e
 8004e70:	0800e2a7 	.word	0x0800e2a7
 8004e74:	0800e2be 	.word	0x0800e2be
 8004e78:	20006e50 	.word	0x20006e50
 8004e7c:	0800e2cf 	.word	0x0800e2cf
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8004e80:	3b03      	subs	r3, #3
 8004e82:	2b02      	cmp	r3, #2
 8004e84:	f63f aed3 	bhi.w	8004c2e <dhcp_recv+0x8a>
      dhcp_handle_ack(netif, msg_in);
 8004e88:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8004e8a:	4631      	mov	r1, r6
 8004e8c:	f7ff fe36 	bl	8004afc <dhcp_handle_ack.isra.0>
      dhcp_bind(netif);
 8004e90:	4628      	mov	r0, r5
 8004e92:	f7ff fd79 	bl	8004988 <dhcp_bind>
 8004e96:	e6ca      	b.n	8004c2e <dhcp_recv+0x8a>
  else if ((msg_type == DHCP_NAK) &&
 8004e98:	2b06      	cmp	r3, #6
 8004e9a:	d115      	bne.n	8004ec8 <dhcp_recv+0x324>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8004e9c:	9b02      	ldr	r3, [sp, #8]
 8004e9e:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 8004ea0:	1eda      	subs	r2, r3, #3
 8004ea2:	2a02      	cmp	r2, #2
 8004ea4:	d902      	bls.n	8004eac <dhcp_recv+0x308>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	f47f aec1 	bne.w	8004c2e <dhcp_recv+0x8a>
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8004eac:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8004eae:	210c      	movs	r1, #12
 8004eb0:	f7ff fa7a 	bl	80043a8 <dhcp_set_state>
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8004eb4:	4b30      	ldr	r3, [pc, #192]	; (8004f78 <dhcp_recv+0x3d4>)
 8004eb6:	4628      	mov	r0, r5
 8004eb8:	461a      	mov	r2, r3
 8004eba:	4619      	mov	r1, r3
 8004ebc:	f002 f878 	bl	8006fb0 <netif_set_addr>
  dhcp_discover(netif);
 8004ec0:	4628      	mov	r0, r5
 8004ec2:	f7ff fcd7 	bl	8004874 <dhcp_discover>
 8004ec6:	e6b2      	b.n	8004c2e <dhcp_recv+0x8a>
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8004ec8:	2b02      	cmp	r3, #2
 8004eca:	f47f aeb0 	bne.w	8004c2e <dhcp_recv+0x8a>
 8004ece:	9b02      	ldr	r3, [sp, #8]
 8004ed0:	795b      	ldrb	r3, [r3, #5]
 8004ed2:	2b06      	cmp	r3, #6
 8004ed4:	f47f aeab 	bne.w	8004c2e <dhcp_recv+0x8a>
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8004ed8:	9b03      	ldr	r3, [sp, #12]
 8004eda:	789b      	ldrb	r3, [r3, #2]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	f43f aea6 	beq.w	8004c2e <dhcp_recv+0x8a>
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8004ee2:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    dhcp->request_timeout = 0; /* stop timer */
 8004ee4:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8004ee8:	6890      	ldr	r0, [r2, #8]
    dhcp->request_timeout = 0; /* stop timer */
 8004eea:	8123      	strh	r3, [r4, #8]
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8004eec:	f7ff f9d9 	bl	80042a2 <lwip_htonl>
 8004ef0:	61a0      	str	r0, [r4, #24]
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8004ef2:	6933      	ldr	r3, [r6, #16]
    dhcp_select(netif);
 8004ef4:	4628      	mov	r0, r5
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8004ef6:	61e3      	str	r3, [r4, #28]
    dhcp_select(netif);
 8004ef8:	f7ff fc00 	bl	80046fc <dhcp_select>
 8004efc:	e697      	b.n	8004c2e <dhcp_recv+0x8a>
    switch (op) {
 8004efe:	2a34      	cmp	r2, #52	; 0x34
 8004f00:	f43f af05 	beq.w	8004d0e <dhcp_recv+0x16a>
 8004f04:	d80c      	bhi.n	8004f20 <dhcp_recv+0x37c>
 8004f06:	2a01      	cmp	r2, #1
 8004f08:	f43f aeea 	beq.w	8004ce0 <dhcp_recv+0x13c>
 8004f0c:	f4ff aebb 	bcc.w	8004c86 <dhcp_recv+0xe2>
 8004f10:	2a03      	cmp	r2, #3
 8004f12:	f43f aeec 	beq.w	8004cee <dhcp_recv+0x14a>
 8004f16:	2a33      	cmp	r2, #51	; 0x33
 8004f18:	f43f aef3 	beq.w	8004d02 <dhcp_recv+0x15e>
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	e6af      	b.n	8004c80 <dhcp_recv+0xdc>
    switch (op) {
 8004f20:	2a36      	cmp	r2, #54	; 0x36
 8004f22:	f43f af09 	beq.w	8004d38 <dhcp_recv+0x194>
 8004f26:	f4ff af01 	bcc.w	8004d2c <dhcp_recv+0x188>
 8004f2a:	2a3a      	cmp	r2, #58	; 0x3a
 8004f2c:	f43f af0a 	beq.w	8004d44 <dhcp_recv+0x1a0>
 8004f30:	2a3b      	cmp	r2, #59	; 0x3b
 8004f32:	f43f aecf 	beq.w	8004cd4 <dhcp_recv+0x130>
 8004f36:	e7f1      	b.n	8004f1c <dhcp_recv+0x378>
  } else if (parse_sname_as_options) {
 8004f38:	9b04      	ldr	r3, [sp, #16]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	f47f af78 	bne.w	8004e30 <dhcp_recv+0x28c>
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8004f40:	9b03      	ldr	r3, [sp, #12]
 8004f42:	785b      	ldrb	r3, [r3, #1]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	f43f ae72 	beq.w	8004c2e <dhcp_recv+0x8a>
  msg_in = (struct dhcp_msg *)p->payload;
 8004f4a:	9b01      	ldr	r3, [sp, #4]
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8004f4c:	4a0b      	ldr	r2, [pc, #44]	; (8004f7c <dhcp_recv+0x3d8>)
  msg_in = (struct dhcp_msg *)p->payload;
 8004f4e:	685e      	ldr	r6, [r3, #4]
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8004f50:	7913      	ldrb	r3, [r2, #4]
  if (msg_type == DHCP_ACK) {
 8004f52:	2b05      	cmp	r3, #5
 8004f54:	d1a0      	bne.n	8004e98 <dhcp_recv+0x2f4>
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8004f56:	9b02      	ldr	r3, [sp, #8]
 8004f58:	795b      	ldrb	r3, [r3, #5]
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d190      	bne.n	8004e80 <dhcp_recv+0x2dc>
      dhcp_handle_ack(netif, msg_in);
 8004f5e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8004f60:	4631      	mov	r1, r6
 8004f62:	f7ff fdcb 	bl	8004afc <dhcp_handle_ack.isra.0>
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8004f66:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
        dhcp_check(netif);
 8004f6a:	4628      	mov	r0, r5
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8004f6c:	071b      	lsls	r3, r3, #28
 8004f6e:	d590      	bpl.n	8004e92 <dhcp_recv+0x2ee>
        dhcp_check(netif);
 8004f70:	f7ff fcf4 	bl	800495c <dhcp_check>
 8004f74:	e65b      	b.n	8004c2e <dhcp_recv+0x8a>
 8004f76:	bf00      	nop
 8004f78:	0800e650 	.word	0x0800e650
 8004f7c:	20006e50 	.word	0x20006e50

08004f80 <dhcp_arp_reply>:
{
 8004f80:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8004f84:	4607      	mov	r7, r0
 8004f86:	b948      	cbnz	r0, 8004f9c <dhcp_arp_reply+0x1c>
 8004f88:	4b27      	ldr	r3, [pc, #156]	; (8005028 <dhcp_arp_reply+0xa8>)
 8004f8a:	f240 328b 	movw	r2, #907	; 0x38b
 8004f8e:	4927      	ldr	r1, [pc, #156]	; (800502c <dhcp_arp_reply+0xac>)
 8004f90:	4827      	ldr	r0, [pc, #156]	; (8005030 <dhcp_arp_reply+0xb0>)
 8004f92:	f007 f8d7 	bl	800c144 <iprintf>
}
 8004f96:	b004      	add	sp, #16
 8004f98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  dhcp = netif_dhcp_data(netif);
 8004f9c:	6a44      	ldr	r4, [r0, #36]	; 0x24
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8004f9e:	2c00      	cmp	r4, #0
 8004fa0:	d0f9      	beq.n	8004f96 <dhcp_arp_reply+0x16>
 8004fa2:	7963      	ldrb	r3, [r4, #5]
 8004fa4:	2b08      	cmp	r3, #8
 8004fa6:	d1f6      	bne.n	8004f96 <dhcp_arp_reply+0x16>
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8004fa8:	680a      	ldr	r2, [r1, #0]
 8004faa:	69e3      	ldr	r3, [r4, #28]
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d1f2      	bne.n	8004f96 <dhcp_arp_reply+0x16>
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8004fb0:	210c      	movs	r1, #12
 8004fb2:	4620      	mov	r0, r4
 8004fb4:	f7ff f9f8 	bl	80043a8 <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8004fb8:	f10d 030e 	add.w	r3, sp, #14
 8004fbc:	2204      	movs	r2, #4
 8004fbe:	4621      	mov	r1, r4
 8004fc0:	4638      	mov	r0, r7
 8004fc2:	f7ff fa6f 	bl	80044a4 <dhcp_create_msg>
  if (p_out != NULL) {
 8004fc6:	4605      	mov	r5, r0
 8004fc8:	b330      	cbz	r0, 8005018 <dhcp_arp_reply+0x98>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8004fca:	6846      	ldr	r6, [r0, #4]
 8004fcc:	2304      	movs	r3, #4
 8004fce:	2232      	movs	r2, #50	; 0x32
 8004fd0:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8004fd4:	36f0      	adds	r6, #240	; 0xf0
 8004fd6:	4631      	mov	r1, r6
 8004fd8:	f7ff fa0a 	bl	80043f0 <dhcp_option>
 8004fdc:	4680      	mov	r8, r0
 8004fde:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8004fe2:	69e0      	ldr	r0, [r4, #28]
 8004fe4:	f7ff f95d 	bl	80042a2 <lwip_htonl>
 8004fe8:	4631      	mov	r1, r6
 8004fea:	4602      	mov	r2, r0
 8004fec:	4640      	mov	r0, r8
 8004fee:	f7ff fa35 	bl	800445c <dhcp_option_long>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8004ff2:	462a      	mov	r2, r5
 8004ff4:	4631      	mov	r1, r6
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8004ff6:	f8ad 000e 	strh.w	r0, [sp, #14]
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8004ffa:	f7ff fae7 	bl	80045cc <dhcp_option_trailer>
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8004ffe:	4b0d      	ldr	r3, [pc, #52]	; (8005034 <dhcp_arp_reply+0xb4>)
 8005000:	480d      	ldr	r0, [pc, #52]	; (8005038 <dhcp_arp_reply+0xb8>)
 8005002:	4629      	mov	r1, r5
 8005004:	9301      	str	r3, [sp, #4]
 8005006:	2343      	movs	r3, #67	; 0x43
 8005008:	9700      	str	r7, [sp, #0]
 800500a:	4a0c      	ldr	r2, [pc, #48]	; (800503c <dhcp_arp_reply+0xbc>)
 800500c:	6800      	ldr	r0, [r0, #0]
 800500e:	f006 f8ef 	bl	800b1f0 <udp_sendto_if_src>
    pbuf_free(p_out);
 8005012:	4628      	mov	r0, r5
 8005014:	f002 f984 	bl	8007320 <pbuf_free>
  if (dhcp->tries < 255) {
 8005018:	79a3      	ldrb	r3, [r4, #6]
 800501a:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 800501c:	bf1c      	itt	ne
 800501e:	3301      	addne	r3, #1
 8005020:	71a3      	strbne	r3, [r4, #6]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8005022:	2314      	movs	r3, #20
 8005024:	8123      	strh	r3, [r4, #8]
 8005026:	e7b6      	b.n	8004f96 <dhcp_arp_reply+0x16>
 8005028:	0800e213 	.word	0x0800e213
 800502c:	0800e073 	.word	0x0800e073
 8005030:	0800d104 	.word	0x0800d104
 8005034:	0800e650 	.word	0x0800e650
 8005038:	20006a2c 	.word	0x20006a2c
 800503c:	0800e654 	.word	0x0800e654

08005040 <dhcp_renew>:
{
 8005040:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8005044:	6a44      	ldr	r4, [r0, #36]	; 0x24
{
 8005046:	b085      	sub	sp, #20
 8005048:	4607      	mov	r7, r0
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 800504a:	2105      	movs	r1, #5
 800504c:	4620      	mov	r0, r4
 800504e:	f7ff f9ab 	bl	80043a8 <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8005052:	f10d 030e 	add.w	r3, sp, #14
 8005056:	2203      	movs	r2, #3
 8005058:	4621      	mov	r1, r4
 800505a:	4638      	mov	r0, r7
 800505c:	f7ff fa22 	bl	80044a4 <dhcp_create_msg>
  if (p_out != NULL) {
 8005060:	4606      	mov	r6, r0
 8005062:	2800      	cmp	r0, #0
 8005064:	d056      	beq.n	8005114 <dhcp_renew+0xd4>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8005066:	6845      	ldr	r5, [r0, #4]
 8005068:	2302      	movs	r3, #2
 800506a:	2239      	movs	r2, #57	; 0x39
 800506c:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8005070:	35f0      	adds	r5, #240	; 0xf0
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8005072:	f04f 0800 	mov.w	r8, #0
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8005076:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8005120 <dhcp_renew+0xe0>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800507a:	4629      	mov	r1, r5
 800507c:	f7ff f9b8 	bl	80043f0 <dhcp_option>
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8005080:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005082:	4629      	mov	r1, r5
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8005084:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8005088:	f7ff f996 	bl	80043b8 <dhcp_option_short>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800508c:	2303      	movs	r3, #3
 800508e:	2237      	movs	r2, #55	; 0x37
 8005090:	4629      	mov	r1, r5
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8005092:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8005096:	f7ff f9ab 	bl	80043f0 <dhcp_option>
 800509a:	f8ad 000e 	strh.w	r0, [sp, #14]
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800509e:	f819 2008 	ldrb.w	r2, [r9, r8]
 80050a2:	f108 0801 	add.w	r8, r8, #1
 80050a6:	4629      	mov	r1, r5
 80050a8:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 80050ac:	f7ff f9be 	bl	800442c <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80050b0:	f1b8 0f03 	cmp.w	r8, #3
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80050b4:	f8ad 000e 	strh.w	r0, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80050b8:	d1f1      	bne.n	800509e <dhcp_renew+0x5e>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80050ba:	4629      	mov	r1, r5
 80050bc:	4632      	mov	r2, r6
 80050be:	f7ff fa85 	bl	80045cc <dhcp_option_trailer>
    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80050c2:	4816      	ldr	r0, [pc, #88]	; (800511c <dhcp_renew+0xdc>)
 80050c4:	9700      	str	r7, [sp, #0]
 80050c6:	2343      	movs	r3, #67	; 0x43
 80050c8:	f104 0218 	add.w	r2, r4, #24
 80050cc:	4631      	mov	r1, r6
 80050ce:	6800      	ldr	r0, [r0, #0]
 80050d0:	f006 f928 	bl	800b324 <udp_sendto_if>
 80050d4:	4605      	mov	r5, r0
    pbuf_free(p_out);
 80050d6:	4630      	mov	r0, r6
 80050d8:	f002 f922 	bl	8007320 <pbuf_free>
  if (dhcp->tries < 255) {
 80050dc:	79a3      	ldrb	r3, [r4, #6]
}
 80050de:	4628      	mov	r0, r5
  if (dhcp->tries < 255) {
 80050e0:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 80050e2:	bf1c      	itt	ne
 80050e4:	3301      	addne	r3, #1
 80050e6:	71a3      	strbne	r3, [r4, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 80050e8:	79a3      	ldrb	r3, [r4, #6]
 80050ea:	2b09      	cmp	r3, #9
 80050ec:	bf96      	itet	ls
 80050ee:	ebc3 1243 	rsbls	r2, r3, r3, lsl #5
 80050f2:	f644 6320 	movwhi	r3, #20000	; 0x4e20
 80050f6:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80050fa:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 80050fe:	bf9c      	itt	ls
 8005100:	011b      	lslls	r3, r3, #4
 8005102:	b29b      	uxthls	r3, r3
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8005104:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8005108:	fb93 f3f2 	sdiv	r3, r3, r2
 800510c:	8123      	strh	r3, [r4, #8]
}
 800510e:	b005      	add	sp, #20
 8005110:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    result = ERR_MEM;
 8005114:	f04f 35ff 	mov.w	r5, #4294967295
 8005118:	e7e0      	b.n	80050dc <dhcp_renew+0x9c>
 800511a:	bf00      	nop
 800511c:	20006a2c 	.word	0x20006a2c
 8005120:	0800e13a 	.word	0x0800e13a

08005124 <dhcp_supplied_address>:
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8005124:	b158      	cbz	r0, 800513e <dhcp_supplied_address+0x1a>
 8005126:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8005128:	b148      	cbz	r0, 800513e <dhcp_supplied_address+0x1a>
    struct dhcp *dhcp = netif_dhcp_data(netif);
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 800512a:	7940      	ldrb	r0, [r0, #5]
 800512c:	280a      	cmp	r0, #10
 800512e:	d005      	beq.n	800513c <dhcp_supplied_address+0x18>
 8005130:	3804      	subs	r0, #4
 8005132:	2801      	cmp	r0, #1
 8005134:	bf8c      	ite	hi
 8005136:	2000      	movhi	r0, #0
 8005138:	2001      	movls	r0, #1
 800513a:	4770      	bx	lr
 800513c:	2001      	movs	r0, #1
           (dhcp->state == DHCP_STATE_REBINDING);
  }
  return 0;
}
 800513e:	4770      	bx	lr

08005140 <dhcp_release_and_stop>:
{
 8005140:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8005144:	6a44      	ldr	r4, [r0, #36]	; 0x24
{
 8005146:	4607      	mov	r7, r0
  if (dhcp == NULL) {
 8005148:	2c00      	cmp	r4, #0
 800514a:	d051      	beq.n	80051f0 <dhcp_release_and_stop+0xb0>
  if (dhcp->state == DHCP_STATE_OFF) {
 800514c:	7963      	ldrb	r3, [r4, #5]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d04e      	beq.n	80051f0 <dhcp_release_and_stop+0xb0>
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8005152:	69a3      	ldr	r3, [r4, #24]
 8005154:	9303      	str	r3, [sp, #12]
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8005156:	2300      	movs	r3, #0
 8005158:	61a3      	str	r3, [r4, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 800515a:	61e3      	str	r3, [r4, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800515c:	6223      	str	r3, [r4, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800515e:	6263      	str	r3, [r4, #36]	; 0x24
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8005160:	6323      	str	r3, [r4, #48]	; 0x30
 8005162:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005164:	62a3      	str	r3, [r4, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8005166:	82a3      	strh	r3, [r4, #20]
 8005168:	8263      	strh	r3, [r4, #18]
 800516a:	8223      	strh	r3, [r4, #16]
 800516c:	81e3      	strh	r3, [r4, #14]
  if (dhcp_supplied_address(netif)) {
 800516e:	f7ff ffd9 	bl	8005124 <dhcp_supplied_address>
 8005172:	b368      	cbz	r0, 80051d0 <dhcp_release_and_stop+0x90>
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8005174:	f10d 030a 	add.w	r3, sp, #10
 8005178:	2207      	movs	r2, #7
 800517a:	4621      	mov	r1, r4
 800517c:	4638      	mov	r0, r7
 800517e:	f7ff f991 	bl	80044a4 <dhcp_create_msg>
    if (p_out != NULL) {
 8005182:	4605      	mov	r5, r0
 8005184:	b320      	cbz	r0, 80051d0 <dhcp_release_and_stop+0x90>
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8005186:	6846      	ldr	r6, [r0, #4]
 8005188:	2304      	movs	r3, #4
 800518a:	2236      	movs	r2, #54	; 0x36
 800518c:	f8bd 000a 	ldrh.w	r0, [sp, #10]
 8005190:	36f0      	adds	r6, #240	; 0xf0
 8005192:	4631      	mov	r1, r6
 8005194:	f7ff f92c 	bl	80043f0 <dhcp_option>
 8005198:	4680      	mov	r8, r0
 800519a:	f8ad 000a 	strh.w	r0, [sp, #10]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 800519e:	9803      	ldr	r0, [sp, #12]
 80051a0:	f7ff f87f 	bl	80042a2 <lwip_htonl>
 80051a4:	4631      	mov	r1, r6
 80051a6:	4602      	mov	r2, r0
 80051a8:	4640      	mov	r0, r8
 80051aa:	f7ff f957 	bl	800445c <dhcp_option_long>
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80051ae:	462a      	mov	r2, r5
 80051b0:	4631      	mov	r1, r6
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 80051b2:	f8ad 000a 	strh.w	r0, [sp, #10]
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80051b6:	f7ff fa09 	bl	80045cc <dhcp_option_trailer>
      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80051ba:	480f      	ldr	r0, [pc, #60]	; (80051f8 <dhcp_release_and_stop+0xb8>)
 80051bc:	9700      	str	r7, [sp, #0]
 80051be:	2343      	movs	r3, #67	; 0x43
 80051c0:	aa03      	add	r2, sp, #12
 80051c2:	4629      	mov	r1, r5
 80051c4:	6800      	ldr	r0, [r0, #0]
 80051c6:	f006 f8ad 	bl	800b324 <udp_sendto_if>
      pbuf_free(p_out);
 80051ca:	4628      	mov	r0, r5
 80051cc:	f002 f8a8 	bl	8007320 <pbuf_free>
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 80051d0:	4b0a      	ldr	r3, [pc, #40]	; (80051fc <dhcp_release_and_stop+0xbc>)
 80051d2:	4638      	mov	r0, r7
 80051d4:	4619      	mov	r1, r3
 80051d6:	461a      	mov	r2, r3
 80051d8:	f001 feea 	bl	8006fb0 <netif_set_addr>
  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 80051dc:	2100      	movs	r1, #0
 80051de:	4620      	mov	r0, r4
 80051e0:	f7ff f8e2 	bl	80043a8 <dhcp_set_state>
  if (dhcp->pcb_allocated != 0) {
 80051e4:	7923      	ldrb	r3, [r4, #4]
 80051e6:	b11b      	cbz	r3, 80051f0 <dhcp_release_and_stop+0xb0>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 80051e8:	f7ff fcbc 	bl	8004b64 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 80051ec:	2300      	movs	r3, #0
 80051ee:	7123      	strb	r3, [r4, #4]
}
 80051f0:	b004      	add	sp, #16
 80051f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051f6:	bf00      	nop
 80051f8:	20006a2c 	.word	0x20006a2c
 80051fc:	0800e650 	.word	0x0800e650

08005200 <dhcp_start>:
{
 8005200:	b538      	push	{r3, r4, r5, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8005202:	4604      	mov	r4, r0
 8005204:	b950      	cbnz	r0, 800521c <dhcp_start+0x1c>
 8005206:	4b24      	ldr	r3, [pc, #144]	; (8005298 <dhcp_start+0x98>)
 8005208:	f240 22e7 	movw	r2, #743	; 0x2e7
 800520c:	4923      	ldr	r1, [pc, #140]	; (800529c <dhcp_start+0x9c>)
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 800520e:	4824      	ldr	r0, [pc, #144]	; (80052a0 <dhcp_start+0xa0>)
 8005210:	f006 ff98 	bl	800c144 <iprintf>
 8005214:	f06f 020f 	mvn.w	r2, #15
}
 8005218:	4610      	mov	r0, r2
 800521a:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 800521c:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 8005220:	07da      	lsls	r2, r3, #31
 8005222:	d404      	bmi.n	800522e <dhcp_start+0x2e>
 8005224:	4b1c      	ldr	r3, [pc, #112]	; (8005298 <dhcp_start+0x98>)
 8005226:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 800522a:	491e      	ldr	r1, [pc, #120]	; (80052a4 <dhcp_start+0xa4>)
 800522c:	e7ef      	b.n	800520e <dhcp_start+0xe>
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 800522e:	8d03      	ldrh	r3, [r0, #40]	; 0x28
  dhcp = netif_dhcp_data(netif);
 8005230:	6a45      	ldr	r5, [r0, #36]	; 0x24
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8005232:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8005236:	d202      	bcs.n	800523e <dhcp_start+0x3e>
    return ERR_MEM;
 8005238:	f04f 32ff 	mov.w	r2, #4294967295
 800523c:	e7ec      	b.n	8005218 <dhcp_start+0x18>
  if (dhcp == NULL) {
 800523e:	b9dd      	cbnz	r5, 8005278 <dhcp_start+0x78>
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8005240:	2034      	movs	r0, #52	; 0x34
 8005242:	f001 fd15 	bl	8006c70 <mem_malloc>
    if (dhcp == NULL) {
 8005246:	4605      	mov	r5, r0
 8005248:	2800      	cmp	r0, #0
 800524a:	d0f5      	beq.n	8005238 <dhcp_start+0x38>
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 800524c:	6260      	str	r0, [r4, #36]	; 0x24
  memset(dhcp, 0, sizeof(struct dhcp));
 800524e:	2234      	movs	r2, #52	; 0x34
 8005250:	2100      	movs	r1, #0
 8005252:	4628      	mov	r0, r5
 8005254:	f006 ff6e 	bl	800c134 <memset>
  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8005258:	f7ff fc16 	bl	8004a88 <dhcp_inc_pcb_refcount>
 800525c:	4602      	mov	r2, r0
 800525e:	2800      	cmp	r0, #0
 8005260:	d1ea      	bne.n	8005238 <dhcp_start+0x38>
  dhcp->pcb_allocated = 1;
 8005262:	2301      	movs	r3, #1
 8005264:	712b      	strb	r3, [r5, #4]
  if (!netif_is_link_up(netif)) {
 8005266:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 800526a:	075b      	lsls	r3, r3, #29
 800526c:	d40a      	bmi.n	8005284 <dhcp_start+0x84>
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 800526e:	2102      	movs	r1, #2
 8005270:	4628      	mov	r0, r5
 8005272:	f7ff f899 	bl	80043a8 <dhcp_set_state>
    return ERR_OK;
 8005276:	e7cf      	b.n	8005218 <dhcp_start+0x18>
    if (dhcp->pcb_allocated != 0) {
 8005278:	792b      	ldrb	r3, [r5, #4]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d0e7      	beq.n	800524e <dhcp_start+0x4e>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800527e:	f7ff fc71 	bl	8004b64 <dhcp_dec_pcb_refcount>
 8005282:	e7e4      	b.n	800524e <dhcp_start+0x4e>
  result = dhcp_discover(netif);
 8005284:	4620      	mov	r0, r4
 8005286:	f7ff faf5 	bl	8004874 <dhcp_discover>
  if (result != ERR_OK) {
 800528a:	4602      	mov	r2, r0
 800528c:	2800      	cmp	r0, #0
 800528e:	d0c3      	beq.n	8005218 <dhcp_start+0x18>
    dhcp_release_and_stop(netif);
 8005290:	4620      	mov	r0, r4
 8005292:	f7ff ff55 	bl	8005140 <dhcp_release_and_stop>
 8005296:	e7cf      	b.n	8005238 <dhcp_start+0x38>
 8005298:	0800e213 	.word	0x0800e213
 800529c:	0800e073 	.word	0x0800e073
 80052a0:	0800d104 	.word	0x0800d104
 80052a4:	0800e34e 	.word	0x0800e34e

080052a8 <dhcp_coarse_tmr>:
  NETIF_FOREACH(netif) {
 80052a8:	4b57      	ldr	r3, [pc, #348]	; (8005408 <dhcp_coarse_tmr+0x160>)
{
 80052aa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  NETIF_FOREACH(netif) {
 80052ae:	681d      	ldr	r5, [r3, #0]
{
 80052b0:	b085      	sub	sp, #20
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80052b2:	4e56      	ldr	r6, [pc, #344]	; (800540c <dhcp_coarse_tmr+0x164>)
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80052b4:	4f56      	ldr	r7, [pc, #344]	; (8005410 <dhcp_coarse_tmr+0x168>)
 80052b6:	f8df 815c 	ldr.w	r8, [pc, #348]	; 8005414 <dhcp_coarse_tmr+0x16c>
  NETIF_FOREACH(netif) {
 80052ba:	b915      	cbnz	r5, 80052c2 <dhcp_coarse_tmr+0x1a>
}
 80052bc:	b005      	add	sp, #20
 80052be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80052c2:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 80052c4:	b17c      	cbz	r4, 80052e6 <dhcp_coarse_tmr+0x3e>
 80052c6:	7963      	ldrb	r3, [r4, #5]
 80052c8:	b16b      	cbz	r3, 80052e6 <dhcp_coarse_tmr+0x3e>
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 80052ca:	8aa1      	ldrh	r1, [r4, #20]
 80052cc:	b169      	cbz	r1, 80052ea <dhcp_coarse_tmr+0x42>
 80052ce:	8a62      	ldrh	r2, [r4, #18]
 80052d0:	3201      	adds	r2, #1
 80052d2:	b292      	uxth	r2, r2
 80052d4:	4291      	cmp	r1, r2
 80052d6:	8262      	strh	r2, [r4, #18]
 80052d8:	d107      	bne.n	80052ea <dhcp_coarse_tmr+0x42>
        dhcp_release_and_stop(netif);
 80052da:	4628      	mov	r0, r5
 80052dc:	f7ff ff30 	bl	8005140 <dhcp_release_and_stop>
        dhcp_start(netif);
 80052e0:	4628      	mov	r0, r5
 80052e2:	f7ff ff8d 	bl	8005200 <dhcp_start>
  NETIF_FOREACH(netif) {
 80052e6:	682d      	ldr	r5, [r5, #0]
 80052e8:	e7e7      	b.n	80052ba <dhcp_coarse_tmr+0x12>
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 80052ea:	8a22      	ldrh	r2, [r4, #16]
 80052ec:	2a00      	cmp	r2, #0
 80052ee:	d072      	beq.n	80053d6 <dhcp_coarse_tmr+0x12e>
 80052f0:	1e51      	subs	r1, r2, #1
 80052f2:	2a01      	cmp	r2, #1
 80052f4:	8221      	strh	r1, [r4, #16]
 80052f6:	d16e      	bne.n	80053d6 <dhcp_coarse_tmr+0x12e>
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80052f8:	3b01      	subs	r3, #1
 80052fa:	b2db      	uxtb	r3, r3
 80052fc:	2b09      	cmp	r3, #9
 80052fe:	d8f2      	bhi.n	80052e6 <dhcp_coarse_tmr+0x3e>
 8005300:	f240 2919 	movw	r9, #537	; 0x219
 8005304:	fa29 f903 	lsr.w	r9, r9, r3
 8005308:	ea6f 0909 	mvn.w	r9, r9
 800530c:	f019 0901 	ands.w	r9, r9, #1
 8005310:	d1e9      	bne.n	80052e6 <dhcp_coarse_tmr+0x3e>
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 8005312:	2104      	movs	r1, #4
 8005314:	4620      	mov	r0, r4
 8005316:	f7ff f847 	bl	80043a8 <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800531a:	f10d 030e 	add.w	r3, sp, #14
 800531e:	2203      	movs	r2, #3
 8005320:	4621      	mov	r1, r4
 8005322:	4628      	mov	r0, r5
 8005324:	f7ff f8be 	bl	80044a4 <dhcp_create_msg>
  if (p_out != NULL) {
 8005328:	4683      	mov	fp, r0
 800532a:	b3a0      	cbz	r0, 8005396 <dhcp_coarse_tmr+0xee>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800532c:	6843      	ldr	r3, [r0, #4]
 800532e:	2239      	movs	r2, #57	; 0x39
 8005330:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8005334:	f103 0af0 	add.w	sl, r3, #240	; 0xf0
 8005338:	2302      	movs	r3, #2
 800533a:	4651      	mov	r1, sl
 800533c:	f7ff f858 	bl	80043f0 <dhcp_option>
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8005340:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
 8005342:	4651      	mov	r1, sl
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8005344:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8005348:	f7ff f836 	bl	80043b8 <dhcp_option_short>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800534c:	2303      	movs	r3, #3
 800534e:	2237      	movs	r2, #55	; 0x37
 8005350:	4651      	mov	r1, sl
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8005352:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8005356:	f7ff f84b 	bl	80043f0 <dhcp_option>
 800535a:	f8ad 000e 	strh.w	r0, [sp, #14]
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800535e:	f816 2009 	ldrb.w	r2, [r6, r9]
 8005362:	f109 0901 	add.w	r9, r9, #1
 8005366:	4651      	mov	r1, sl
 8005368:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 800536c:	f7ff f85e 	bl	800442c <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8005370:	f1b9 0f03 	cmp.w	r9, #3
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8005374:	f8ad 000e 	strh.w	r0, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8005378:	d1f1      	bne.n	800535e <dhcp_coarse_tmr+0xb6>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800537a:	465a      	mov	r2, fp
 800537c:	4651      	mov	r1, sl
 800537e:	f7ff f925 	bl	80045cc <dhcp_option_trailer>
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8005382:	9500      	str	r5, [sp, #0]
 8005384:	2343      	movs	r3, #67	; 0x43
 8005386:	4642      	mov	r2, r8
 8005388:	4659      	mov	r1, fp
 800538a:	6838      	ldr	r0, [r7, #0]
 800538c:	f005 ffca 	bl	800b324 <udp_sendto_if>
    pbuf_free(p_out);
 8005390:	4658      	mov	r0, fp
 8005392:	f001 ffc5 	bl	8007320 <pbuf_free>
  if (dhcp->tries < 255) {
 8005396:	79a3      	ldrb	r3, [r4, #6]
 8005398:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 800539a:	bf1c      	itt	ne
 800539c:	3301      	addne	r3, #1
 800539e:	71a3      	strbne	r3, [r4, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80053a0:	79a3      	ldrb	r3, [r4, #6]
 80053a2:	2b09      	cmp	r3, #9
 80053a4:	bf96      	itet	ls
 80053a6:	ebc3 1243 	rsbls	r2, r3, r3, lsl #5
 80053aa:	f242 7310 	movwhi	r3, #10000	; 0x2710
 80053ae:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80053b2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80053b6:	bf9c      	itt	ls
 80053b8:	00db      	lslls	r3, r3, #3
 80053ba:	b29b      	uxthls	r3, r3
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80053bc:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80053c0:	fb93 f3f2 	sdiv	r3, r3, r2
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 80053c4:	8a62      	ldrh	r2, [r4, #18]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80053c6:	8123      	strh	r3, [r4, #8]
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 80053c8:	8aa3      	ldrh	r3, [r4, #20]
 80053ca:	1a9b      	subs	r3, r3, r2
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	dd8a      	ble.n	80052e6 <dhcp_coarse_tmr+0x3e>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 80053d0:	105b      	asrs	r3, r3, #1
 80053d2:	8223      	strh	r3, [r4, #16]
 80053d4:	e787      	b.n	80052e6 <dhcp_coarse_tmr+0x3e>
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 80053d6:	89e2      	ldrh	r2, [r4, #14]
 80053d8:	2a00      	cmp	r2, #0
 80053da:	d084      	beq.n	80052e6 <dhcp_coarse_tmr+0x3e>
 80053dc:	1e51      	subs	r1, r2, #1
 80053de:	2a01      	cmp	r2, #1
 80053e0:	81e1      	strh	r1, [r4, #14]
 80053e2:	d180      	bne.n	80052e6 <dhcp_coarse_tmr+0x3e>
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80053e4:	f003 02fb 	and.w	r2, r3, #251	; 0xfb
 80053e8:	2a01      	cmp	r2, #1
 80053ea:	d002      	beq.n	80053f2 <dhcp_coarse_tmr+0x14a>
 80053ec:	2b0a      	cmp	r3, #10
 80053ee:	f47f af7a 	bne.w	80052e6 <dhcp_coarse_tmr+0x3e>
    dhcp_renew(netif);
 80053f2:	4628      	mov	r0, r5
 80053f4:	f7ff fe24 	bl	8005040 <dhcp_renew>
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 80053f8:	89a3      	ldrh	r3, [r4, #12]
 80053fa:	8a62      	ldrh	r2, [r4, #18]
 80053fc:	1a9b      	subs	r3, r3, r2
 80053fe:	2b01      	cmp	r3, #1
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8005400:	bfc4      	itt	gt
 8005402:	105b      	asrgt	r3, r3, #1
 8005404:	81e3      	strhgt	r3, [r4, #14]
 8005406:	e76e      	b.n	80052e6 <dhcp_coarse_tmr+0x3e>
 8005408:	2000d380 	.word	0x2000d380
 800540c:	0800e13a 	.word	0x0800e13a
 8005410:	20006a2c 	.word	0x20006a2c
 8005414:	0800e654 	.word	0x0800e654

08005418 <dhcp_fine_tmr>:
{
 8005418:	b538      	push	{r3, r4, r5, lr}
  NETIF_FOREACH(netif) {
 800541a:	4b1e      	ldr	r3, [pc, #120]	; (8005494 <dhcp_fine_tmr+0x7c>)
        dhcp->request_timeout--;
 800541c:	2500      	movs	r5, #0
  NETIF_FOREACH(netif) {
 800541e:	681c      	ldr	r4, [r3, #0]
 8005420:	b904      	cbnz	r4, 8005424 <dhcp_fine_tmr+0xc>
}
 8005422:	bd38      	pop	{r3, r4, r5, pc}
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8005424:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if (dhcp != NULL) {
 8005426:	b123      	cbz	r3, 8005432 <dhcp_fine_tmr+0x1a>
      if (dhcp->request_timeout > 1) {
 8005428:	891a      	ldrh	r2, [r3, #8]
 800542a:	2a01      	cmp	r2, #1
 800542c:	d903      	bls.n	8005436 <dhcp_fine_tmr+0x1e>
        dhcp->request_timeout--;
 800542e:	3a01      	subs	r2, #1
 8005430:	811a      	strh	r2, [r3, #8]
  NETIF_FOREACH(netif) {
 8005432:	6824      	ldr	r4, [r4, #0]
 8005434:	e7f4      	b.n	8005420 <dhcp_fine_tmr+0x8>
      } else if (dhcp->request_timeout == 1) {
 8005436:	d1fc      	bne.n	8005432 <dhcp_fine_tmr+0x1a>
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8005438:	795a      	ldrb	r2, [r3, #5]
        dhcp->request_timeout--;
 800543a:	811d      	strh	r5, [r3, #8]
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 800543c:	2a0c      	cmp	r2, #12
 800543e:	d001      	beq.n	8005444 <dhcp_fine_tmr+0x2c>
 8005440:	2a06      	cmp	r2, #6
 8005442:	d103      	bne.n	800544c <dhcp_fine_tmr+0x34>
    dhcp_discover(netif);
 8005444:	4620      	mov	r0, r4
      dhcp_discover(netif);
 8005446:	f7ff fa15 	bl	8004874 <dhcp_discover>
 800544a:	e7f2      	b.n	8005432 <dhcp_fine_tmr+0x1a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 800544c:	2a01      	cmp	r2, #1
 800544e:	d10c      	bne.n	800546a <dhcp_fine_tmr+0x52>
    if (dhcp->tries <= 5) {
 8005450:	799b      	ldrb	r3, [r3, #6]
      dhcp_select(netif);
 8005452:	4620      	mov	r0, r4
    if (dhcp->tries <= 5) {
 8005454:	2b05      	cmp	r3, #5
 8005456:	d802      	bhi.n	800545e <dhcp_fine_tmr+0x46>
      dhcp_select(netif);
 8005458:	f7ff f950 	bl	80046fc <dhcp_select>
 800545c:	e7e9      	b.n	8005432 <dhcp_fine_tmr+0x1a>
      dhcp_release_and_stop(netif);
 800545e:	f7ff fe6f 	bl	8005140 <dhcp_release_and_stop>
      dhcp_start(netif);
 8005462:	4620      	mov	r0, r4
 8005464:	f7ff fecc 	bl	8005200 <dhcp_start>
 8005468:	e7e3      	b.n	8005432 <dhcp_fine_tmr+0x1a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 800546a:	2a08      	cmp	r2, #8
 800546c:	d109      	bne.n	8005482 <dhcp_fine_tmr+0x6a>
    if (dhcp->tries <= 1) {
 800546e:	799b      	ldrb	r3, [r3, #6]
      dhcp_check(netif);
 8005470:	4620      	mov	r0, r4
    if (dhcp->tries <= 1) {
 8005472:	2b01      	cmp	r3, #1
 8005474:	d802      	bhi.n	800547c <dhcp_fine_tmr+0x64>
      dhcp_check(netif);
 8005476:	f7ff fa71 	bl	800495c <dhcp_check>
 800547a:	e7da      	b.n	8005432 <dhcp_fine_tmr+0x1a>
      dhcp_bind(netif);
 800547c:	f7ff fa84 	bl	8004988 <dhcp_bind>
 8005480:	e7d7      	b.n	8005432 <dhcp_fine_tmr+0x1a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8005482:	2a03      	cmp	r2, #3
 8005484:	d1d5      	bne.n	8005432 <dhcp_fine_tmr+0x1a>
    if (dhcp->tries < REBOOT_TRIES) {
 8005486:	799b      	ldrb	r3, [r3, #6]
      dhcp_reboot(netif);
 8005488:	4620      	mov	r0, r4
    if (dhcp->tries < REBOOT_TRIES) {
 800548a:	2b01      	cmp	r3, #1
 800548c:	d8db      	bhi.n	8005446 <dhcp_fine_tmr+0x2e>
      dhcp_reboot(netif);
 800548e:	f7ff f8b1 	bl	80045f4 <dhcp_reboot>
 8005492:	e7ce      	b.n	8005432 <dhcp_fine_tmr+0x1a>
 8005494:	2000d380 	.word	0x2000d380

08005498 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8005498:	b570      	push	{r4, r5, r6, lr}
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800549a:	2618      	movs	r6, #24
 800549c:	4c07      	ldr	r4, [pc, #28]	; (80054bc <etharp_free_entry+0x24>)
{
 800549e:	4605      	mov	r5, r0
  if (arp_table[i].q != NULL) {
 80054a0:	4346      	muls	r6, r0
 80054a2:	59a0      	ldr	r0, [r4, r6]
 80054a4:	b118      	cbz	r0, 80054ae <etharp_free_entry+0x16>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80054a6:	f001 ff3b 	bl	8007320 <pbuf_free>
    arp_table[i].q = NULL;
 80054aa:	2300      	movs	r3, #0
 80054ac:	51a3      	str	r3, [r4, r6]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80054ae:	2318      	movs	r3, #24
 80054b0:	fb03 4405 	mla	r4, r3, r5, r4
 80054b4:	2300      	movs	r3, #0
 80054b6:	7523      	strb	r3, [r4, #20]
 80054b8:	bd70      	pop	{r4, r5, r6, pc}
 80054ba:	bf00      	nop
 80054bc:	20006a38 	.word	0x20006a38

080054c0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80054c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
  s16_t empty = ARP_TABLE_SIZE;
  s16_t i = 0;
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80054c4:	f04f 0c0a 	mov.w	ip, #10
{
 80054c8:	f04f 0e00 	mov.w	lr, #0
 80054cc:	4606      	mov	r6, r0
 80054ce:	4617      	mov	r7, r2
 80054d0:	4b44      	ldr	r3, [pc, #272]	; (80055e4 <etharp_find_entry+0x124>)
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80054d2:	46f3      	mov	fp, lr
  s16_t empty = ARP_TABLE_SIZE;
 80054d4:	4664      	mov	r4, ip
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80054d6:	4665      	mov	r5, ip
 80054d8:	46e0      	mov	r8, ip
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80054da:	f8cd e004 	str.w	lr, [sp, #4]
 80054de:	f8cd e000 	str.w	lr, [sp]
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
    u8_t state = arp_table[i].state;
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80054e2:	2c0a      	cmp	r4, #10
 80054e4:	fa0f f08e 	sxth.w	r0, lr
    u8_t state = arp_table[i].state;
 80054e8:	f893 9014 	ldrb.w	r9, [r3, #20]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80054ec:	d110      	bne.n	8005510 <etharp_find_entry+0x50>
 80054ee:	f1b9 0f00 	cmp.w	r9, #0
 80054f2:	d059      	beq.n	80055a8 <etharp_find_entry+0xe8>
      empty = i;
    } else if (state != ETHARP_STATE_EMPTY) {
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80054f4:	2e00      	cmp	r6, #0
 80054f6:	d066      	beq.n	80055c6 <etharp_find_entry+0x106>
 80054f8:	6832      	ldr	r2, [r6, #0]
 80054fa:	4692      	mov	sl, r2
 80054fc:	685a      	ldr	r2, [r3, #4]
 80054fe:	4592      	cmp	sl, r2
 8005500:	d161      	bne.n	80055c6 <etharp_find_entry+0x106>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8005502:	b117      	cbz	r7, 800550a <etharp_find_entry+0x4a>
 8005504:	689a      	ldr	r2, [r3, #8]
 8005506:	4297      	cmp	r7, r2
 8005508:	d15d      	bne.n	80055c6 <etharp_find_entry+0x106>
  arp_table[i].ctime = 0;
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
}
 800550a:	b003      	add	sp, #12
 800550c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    } else if (state != ETHARP_STATE_EMPTY) {
 8005510:	f1b9 0f00 	cmp.w	r9, #0
 8005514:	d1ee      	bne.n	80054f4 <etharp_find_entry+0x34>
 8005516:	f10e 0e01 	add.w	lr, lr, #1
 800551a:	3318      	adds	r3, #24
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800551c:	f1be 0f0a 	cmp.w	lr, #10
 8005520:	d1df      	bne.n	80054e2 <etharp_find_entry+0x22>
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8005522:	078a      	lsls	r2, r1, #30
 8005524:	d44c      	bmi.n	80055c0 <etharp_find_entry+0x100>
 8005526:	2c0a      	cmp	r4, #10
 8005528:	d113      	bne.n	8005552 <etharp_find_entry+0x92>
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800552a:	07cb      	lsls	r3, r1, #31
 800552c:	d548      	bpl.n	80055c0 <etharp_find_entry+0x100>
    if (old_stable < ARP_TABLE_SIZE) {
 800552e:	2d0a      	cmp	r5, #10
 8005530:	d03c      	beq.n	80055ac <etharp_find_entry+0xec>
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8005532:	2318      	movs	r3, #24
 8005534:	4a2b      	ldr	r2, [pc, #172]	; (80055e4 <etharp_find_entry+0x124>)
 8005536:	436b      	muls	r3, r5
 8005538:	58d3      	ldr	r3, [r2, r3]
 800553a:	b133      	cbz	r3, 800554a <etharp_find_entry+0x8a>
 800553c:	4b2a      	ldr	r3, [pc, #168]	; (80055e8 <etharp_find_entry+0x128>)
 800553e:	f240 126d 	movw	r2, #365	; 0x16d
 8005542:	492a      	ldr	r1, [pc, #168]	; (80055ec <etharp_find_entry+0x12c>)
 8005544:	482a      	ldr	r0, [pc, #168]	; (80055f0 <etharp_find_entry+0x130>)
 8005546:	f006 fdfd 	bl	800c144 <iprintf>
    etharp_free_entry(i);
 800554a:	462c      	mov	r4, r5
 800554c:	4628      	mov	r0, r5
 800554e:	f7ff ffa3 	bl	8005498 <etharp_free_entry>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8005552:	2318      	movs	r3, #24
 8005554:	4a23      	ldr	r2, [pc, #140]	; (80055e4 <etharp_find_entry+0x124>)
 8005556:	fb03 2304 	mla	r3, r3, r4, r2
 800555a:	7d1b      	ldrb	r3, [r3, #20]
 800555c:	b133      	cbz	r3, 800556c <etharp_find_entry+0xac>
 800555e:	4b22      	ldr	r3, [pc, #136]	; (80055e8 <etharp_find_entry+0x128>)
 8005560:	f240 1285 	movw	r2, #389	; 0x185
 8005564:	4923      	ldr	r1, [pc, #140]	; (80055f4 <etharp_find_entry+0x134>)
 8005566:	4822      	ldr	r0, [pc, #136]	; (80055f0 <etharp_find_entry+0x130>)
 8005568:	f006 fdec 	bl	800c144 <iprintf>
  if (ipaddr != NULL) {
 800556c:	b12e      	cbz	r6, 800557a <etharp_find_entry+0xba>
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800556e:	2318      	movs	r3, #24
 8005570:	491c      	ldr	r1, [pc, #112]	; (80055e4 <etharp_find_entry+0x124>)
 8005572:	6832      	ldr	r2, [r6, #0]
 8005574:	fb03 1304 	mla	r3, r3, r4, r1
 8005578:	605a      	str	r2, [r3, #4]
  arp_table[i].ctime = 0;
 800557a:	2318      	movs	r3, #24
 800557c:	4a19      	ldr	r2, [pc, #100]	; (80055e4 <etharp_find_entry+0x124>)
  return (s16_t)i;
 800557e:	4620      	mov	r0, r4
  arp_table[i].ctime = 0;
 8005580:	fb03 2a04 	mla	sl, r3, r4, r2
 8005584:	2300      	movs	r3, #0
  arp_table[i].netif = netif;
 8005586:	f8ca 7008 	str.w	r7, [sl, #8]
  arp_table[i].ctime = 0;
 800558a:	f8aa 3012 	strh.w	r3, [sl, #18]
  return (s16_t)i;
 800558e:	e7bc      	b.n	800550a <etharp_find_entry+0x4a>
          if (arp_table[i].ctime >= age_pending) {
 8005590:	9a01      	ldr	r2, [sp, #4]
 8005592:	4591      	cmp	r9, r2
 8005594:	d3bf      	bcc.n	8005516 <etharp_find_entry+0x56>
 8005596:	f8cd 9004 	str.w	r9, [sp, #4]
 800559a:	4680      	mov	r8, r0
 800559c:	e7bb      	b.n	8005516 <etharp_find_entry+0x56>
          if (arp_table[i].ctime >= age_stable) {
 800559e:	45d9      	cmp	r9, fp
 80055a0:	d3b9      	bcc.n	8005516 <etharp_find_entry+0x56>
 80055a2:	46cb      	mov	fp, r9
 80055a4:	4605      	mov	r5, r0
 80055a6:	e7b6      	b.n	8005516 <etharp_find_entry+0x56>
 80055a8:	4604      	mov	r4, r0
 80055aa:	e7b4      	b.n	8005516 <etharp_find_entry+0x56>
    } else if (old_pending < ARP_TABLE_SIZE) {
 80055ac:	f1b8 0f0a 	cmp.w	r8, #10
 80055b0:	d104      	bne.n	80055bc <etharp_find_entry+0xfc>
    } else if (old_queue < ARP_TABLE_SIZE) {
 80055b2:	f1bc 0f0a 	cmp.w	ip, #10
 80055b6:	d003      	beq.n	80055c0 <etharp_find_entry+0x100>
 80055b8:	4665      	mov	r5, ip
 80055ba:	e7c6      	b.n	800554a <etharp_find_entry+0x8a>
 80055bc:	4645      	mov	r5, r8
 80055be:	e7c4      	b.n	800554a <etharp_find_entry+0x8a>
    return (s16_t)ERR_MEM;
 80055c0:	f04f 30ff 	mov.w	r0, #4294967295
 80055c4:	e7a1      	b.n	800550a <etharp_find_entry+0x4a>
      if (state == ETHARP_STATE_PENDING) {
 80055c6:	f1b9 0f01 	cmp.w	r9, #1
 80055ca:	f8b3 9012 	ldrh.w	r9, [r3, #18]
 80055ce:	d1e6      	bne.n	800559e <etharp_find_entry+0xde>
        if (arp_table[i].q != NULL) {
 80055d0:	681a      	ldr	r2, [r3, #0]
 80055d2:	2a00      	cmp	r2, #0
 80055d4:	d0dc      	beq.n	8005590 <etharp_find_entry+0xd0>
          if (arp_table[i].ctime >= age_queue) {
 80055d6:	9a00      	ldr	r2, [sp, #0]
 80055d8:	4591      	cmp	r9, r2
 80055da:	d39c      	bcc.n	8005516 <etharp_find_entry+0x56>
 80055dc:	f8cd 9000 	str.w	r9, [sp]
 80055e0:	4684      	mov	ip, r0
 80055e2:	e798      	b.n	8005516 <etharp_find_entry+0x56>
 80055e4:	20006a38 	.word	0x20006a38
 80055e8:	0800e36f 	.word	0x0800e36f
 80055ec:	0800e3a6 	.word	0x0800e3a6
 80055f0:	0800d104 	.word	0x0800d104
 80055f4:	0800e3bd 	.word	0x0800e3bd

080055f8 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80055f8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80055fc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80055fe:	4689      	mov	r9, r1
 8005600:	4692      	mov	sl, r2
 8005602:	4698      	mov	r8, r3
  struct pbuf *p;
  err_t result = ERR_OK;
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8005604:	4607      	mov	r7, r0
 8005606:	b930      	cbnz	r0, 8005616 <etharp_raw+0x1e>
 8005608:	4b2d      	ldr	r3, [pc, #180]	; (80056c0 <etharp_raw+0xc8>)
 800560a:	f240 4257 	movw	r2, #1111	; 0x457
 800560e:	492d      	ldr	r1, [pc, #180]	; (80056c4 <etharp_raw+0xcc>)
 8005610:	482d      	ldr	r0, [pc, #180]	; (80056c8 <etharp_raw+0xd0>)
 8005612:	f006 fd97 	bl	800c144 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8005616:	f44f 7220 	mov.w	r2, #640	; 0x280
 800561a:	211c      	movs	r1, #28
 800561c:	200e      	movs	r0, #14
 800561e:	f001 fee7 	bl	80073f0 <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8005622:	4606      	mov	r6, r0
 8005624:	2800      	cmp	r0, #0
 8005626:	d047      	beq.n	80056b8 <etharp_raw+0xc0>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8005628:	8943      	ldrh	r3, [r0, #10]
 800562a:	2b1b      	cmp	r3, #27
 800562c:	d806      	bhi.n	800563c <etharp_raw+0x44>
 800562e:	4b24      	ldr	r3, [pc, #144]	; (80056c0 <etharp_raw+0xc8>)
 8005630:	f240 4263 	movw	r2, #1123	; 0x463
 8005634:	4925      	ldr	r1, [pc, #148]	; (80056cc <etharp_raw+0xd4>)
 8005636:	4824      	ldr	r0, [pc, #144]	; (80056c8 <etharp_raw+0xd0>)
 8005638:	f006 fd84 	bl	800c144 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800563c:	6874      	ldr	r4, [r6, #4]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800563e:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 8005642:	f7fe fe2b 	bl	800429c <lwip_htons>
 8005646:	80e0      	strh	r0, [r4, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8005648:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800564c:	2b06      	cmp	r3, #6
 800564e:	d006      	beq.n	800565e <etharp_raw+0x66>
 8005650:	4b1b      	ldr	r3, [pc, #108]	; (80056c0 <etharp_raw+0xc8>)
 8005652:	f240 426a 	movw	r2, #1130	; 0x46a
 8005656:	491e      	ldr	r1, [pc, #120]	; (80056d0 <etharp_raw+0xd8>)
 8005658:	481b      	ldr	r0, [pc, #108]	; (80056c8 <etharp_raw+0xd0>)
 800565a:	f006 fd73 	bl	800c144 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800565e:	f8d8 3000 	ldr.w	r3, [r8]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8005662:	464a      	mov	r2, r9
 8005664:	4631      	mov	r1, r6
 8005666:	4638      	mov	r0, r7
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8005668:	60a3      	str	r3, [r4, #8]
 800566a:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 800566e:	81a3      	strh	r3, [r4, #12]
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8005670:	682b      	ldr	r3, [r5, #0]
 8005672:	f8c4 3012 	str.w	r3, [r4, #18]
 8005676:	88ab      	ldrh	r3, [r5, #4]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8005678:	2500      	movs	r5, #0
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800567a:	82e3      	strh	r3, [r4, #22]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800567c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f8c4 300e 	str.w	r3, [r4, #14]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8005684:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005686:	681b      	ldr	r3, [r3, #0]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8005688:	7025      	strb	r5, [r4, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800568a:	61a3      	str	r3, [r4, #24]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800568c:	2301      	movs	r3, #1
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800568e:	70e5      	strb	r5, [r4, #3]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8005690:	7063      	strb	r3, [r4, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8005692:	2308      	movs	r3, #8
 8005694:	70a3      	strb	r3, [r4, #2]
  hdr->hwlen = ETH_HWADDR_LEN;
 8005696:	2306      	movs	r3, #6
 8005698:	7123      	strb	r3, [r4, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800569a:	2304      	movs	r3, #4
 800569c:	7163      	strb	r3, [r4, #5]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800569e:	f640 0306 	movw	r3, #2054	; 0x806
 80056a2:	9300      	str	r3, [sp, #0]
 80056a4:	4653      	mov	r3, sl
 80056a6:	f005 ff65 	bl	800b574 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80056aa:	4630      	mov	r0, r6
 80056ac:	f001 fe38 	bl	8007320 <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
 80056b0:	4628      	mov	r0, r5
}
 80056b2:	b002      	add	sp, #8
 80056b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return ERR_MEM;
 80056b8:	f04f 30ff 	mov.w	r0, #4294967295
 80056bc:	e7f9      	b.n	80056b2 <etharp_raw+0xba>
 80056be:	bf00      	nop
 80056c0:	0800e36f 	.word	0x0800e36f
 80056c4:	0800e073 	.word	0x0800e073
 80056c8:	0800d104 	.word	0x0800d104
 80056cc:	0800e4a9 	.word	0x0800e4a9
 80056d0:	0800e4da 	.word	0x0800e4da

080056d4 <etharp_cleanup_netif>:
{
 80056d4:	b570      	push	{r4, r5, r6, lr}
 80056d6:	4606      	mov	r6, r0
 80056d8:	4d07      	ldr	r5, [pc, #28]	; (80056f8 <etharp_cleanup_netif+0x24>)
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80056da:	2400      	movs	r4, #0
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80056dc:	7d2b      	ldrb	r3, [r5, #20]
 80056de:	b12b      	cbz	r3, 80056ec <etharp_cleanup_netif+0x18>
 80056e0:	68ab      	ldr	r3, [r5, #8]
 80056e2:	42b3      	cmp	r3, r6
 80056e4:	d102      	bne.n	80056ec <etharp_cleanup_netif+0x18>
      etharp_free_entry(i);
 80056e6:	4620      	mov	r0, r4
 80056e8:	f7ff fed6 	bl	8005498 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80056ec:	3401      	adds	r4, #1
 80056ee:	3518      	adds	r5, #24
 80056f0:	2c0a      	cmp	r4, #10
 80056f2:	d1f3      	bne.n	80056dc <etharp_cleanup_netif+0x8>
}
 80056f4:	bd70      	pop	{r4, r5, r6, pc}
 80056f6:	bf00      	nop
 80056f8:	20006a38 	.word	0x20006a38

080056fc <etharp_input>:
{
 80056fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005700:	4680      	mov	r8, r0
 8005702:	b086      	sub	sp, #24
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8005704:	460c      	mov	r4, r1
 8005706:	b949      	cbnz	r1, 800571c <etharp_input+0x20>
 8005708:	4b4a      	ldr	r3, [pc, #296]	; (8005834 <etharp_input+0x138>)
 800570a:	f240 228a 	movw	r2, #650	; 0x28a
 800570e:	494a      	ldr	r1, [pc, #296]	; (8005838 <etharp_input+0x13c>)
 8005710:	484a      	ldr	r0, [pc, #296]	; (800583c <etharp_input+0x140>)
 8005712:	f006 fd17 	bl	800c144 <iprintf>
}
 8005716:	b006      	add	sp, #24
 8005718:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  hdr = (struct etharp_hdr *)p->payload;
 800571c:	6845      	ldr	r5, [r0, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800571e:	882b      	ldrh	r3, [r5, #0]
 8005720:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005724:	d108      	bne.n	8005738 <etharp_input+0x3c>
 8005726:	792b      	ldrb	r3, [r5, #4]
 8005728:	2b06      	cmp	r3, #6
 800572a:	d105      	bne.n	8005738 <etharp_input+0x3c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800572c:	796b      	ldrb	r3, [r5, #5]
 800572e:	2b04      	cmp	r3, #4
 8005730:	d102      	bne.n	8005738 <etharp_input+0x3c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8005732:	886b      	ldrh	r3, [r5, #2]
 8005734:	2b08      	cmp	r3, #8
 8005736:	d003      	beq.n	8005740 <etharp_input+0x44>
  pbuf_free(p);
 8005738:	4640      	mov	r0, r8
 800573a:	f001 fdf1 	bl	8007320 <pbuf_free>
 800573e:	e7ea      	b.n	8005716 <etharp_input+0x1a>
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8005740:	f8d5 300e 	ldr.w	r3, [r5, #14]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8005744:	684e      	ldr	r6, [r1, #4]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8005746:	9305      	str	r3, [sp, #20]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8005748:	69ab      	ldr	r3, [r5, #24]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800574a:	b116      	cbz	r6, 8005752 <etharp_input+0x56>
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800574c:	1b9b      	subs	r3, r3, r6
 800574e:	425e      	negs	r6, r3
 8005750:	415e      	adcs	r6, r3
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8005752:	2e00      	cmp	r6, #0
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8005754:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8005758:	f105 0708 	add.w	r7, r5, #8
 800575c:	bf14      	ite	ne
 800575e:	f04f 0a01 	movne.w	sl, #1
 8005762:	f04f 0a02 	moveq.w	sl, #2
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8005766:	2b06      	cmp	r3, #6
 8005768:	d006      	beq.n	8005778 <etharp_input+0x7c>
 800576a:	4b32      	ldr	r3, [pc, #200]	; (8005834 <etharp_input+0x138>)
 800576c:	f240 12a9 	movw	r2, #425	; 0x1a9
 8005770:	4933      	ldr	r1, [pc, #204]	; (8005840 <etharp_input+0x144>)
 8005772:	4832      	ldr	r0, [pc, #200]	; (800583c <etharp_input+0x140>)
 8005774:	f006 fce6 	bl	800c144 <iprintf>
  if (ip4_addr_isany(ipaddr) ||
 8005778:	9805      	ldr	r0, [sp, #20]
 800577a:	2800      	cmp	r0, #0
 800577c:	d03d      	beq.n	80057fa <etharp_input+0xfe>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800577e:	4621      	mov	r1, r4
 8005780:	f000 fcd3 	bl	800612a <ip4_addr_isbroadcast_u32>
  if (ip4_addr_isany(ipaddr) ||
 8005784:	4681      	mov	r9, r0
 8005786:	bbc0      	cbnz	r0, 80057fa <etharp_input+0xfe>
      ip4_addr_ismulticast(ipaddr)) {
 8005788:	9b05      	ldr	r3, [sp, #20]
 800578a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800578e:	2be0      	cmp	r3, #224	; 0xe0
 8005790:	d033      	beq.n	80057fa <etharp_input+0xfe>
  i = etharp_find_entry(ipaddr, flags, netif);
 8005792:	4622      	mov	r2, r4
 8005794:	4651      	mov	r1, sl
 8005796:	a805      	add	r0, sp, #20
 8005798:	f7ff fe92 	bl	80054c0 <etharp_find_entry>
  if (i < 0) {
 800579c:	2800      	cmp	r0, #0
 800579e:	db2c      	blt.n	80057fa <etharp_input+0xfe>
    arp_table[i].state = ETHARP_STATE_STABLE;
 80057a0:	2218      	movs	r2, #24
 80057a2:	4b28      	ldr	r3, [pc, #160]	; (8005844 <etharp_input+0x148>)
 80057a4:	f04f 0c02 	mov.w	ip, #2
 80057a8:	fb02 f100 	mul.w	r1, r2, r0
 80057ac:	eb03 0e01 	add.w	lr, r3, r1
 80057b0:	f88e c014 	strb.w	ip, [lr, #20]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80057b4:	f04f 0c0c 	mov.w	ip, #12
  arp_table[i].netif = netif;
 80057b8:	f8ce 4008 	str.w	r4, [lr, #8]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80057bc:	fb10 c202 	smlabb	r2, r0, r2, ip
 80057c0:	6838      	ldr	r0, [r7, #0]
 80057c2:	eb03 0c02 	add.w	ip, r3, r2
 80057c6:	5098      	str	r0, [r3, r2]
 80057c8:	88ba      	ldrh	r2, [r7, #4]
 80057ca:	f8ac 2004 	strh.w	r2, [ip, #4]
  if (arp_table[i].q != NULL) {
 80057ce:	f853 a001 	ldr.w	sl, [r3, r1]
  arp_table[i].ctime = 0;
 80057d2:	f8ae 9012 	strh.w	r9, [lr, #18]
  if (arp_table[i].q != NULL) {
 80057d6:	f1ba 0f00 	cmp.w	sl, #0
 80057da:	d00e      	beq.n	80057fa <etharp_input+0xfe>
    arp_table[i].q = NULL;
 80057dc:	f843 9001 	str.w	r9, [r3, r1]
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80057e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80057e4:	f104 022a 	add.w	r2, r4, #42	; 0x2a
 80057e8:	4651      	mov	r1, sl
 80057ea:	9300      	str	r3, [sp, #0]
 80057ec:	4620      	mov	r0, r4
 80057ee:	463b      	mov	r3, r7
 80057f0:	f005 fec0 	bl	800b574 <ethernet_output>
    pbuf_free(p);
 80057f4:	4650      	mov	r0, sl
 80057f6:	f001 fd93 	bl	8007320 <pbuf_free>
  switch (hdr->opcode) {
 80057fa:	88eb      	ldrh	r3, [r5, #6]
 80057fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005800:	d007      	beq.n	8005812 <etharp_input+0x116>
 8005802:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005806:	d197      	bne.n	8005738 <etharp_input+0x3c>
      dhcp_arp_reply(netif, &sipaddr);
 8005808:	a905      	add	r1, sp, #20
 800580a:	4620      	mov	r0, r4
 800580c:	f7ff fbb8 	bl	8004f80 <dhcp_arp_reply>
      break;
 8005810:	e792      	b.n	8005738 <etharp_input+0x3c>
      if (for_us) {
 8005812:	2e00      	cmp	r6, #0
 8005814:	d090      	beq.n	8005738 <etharp_input+0x3c>
        etharp_raw(netif,
 8005816:	2202      	movs	r2, #2
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8005818:	f104 032a 	add.w	r3, r4, #42	; 0x2a
        etharp_raw(netif,
 800581c:	9701      	str	r7, [sp, #4]
 800581e:	4620      	mov	r0, r4
 8005820:	9203      	str	r2, [sp, #12]
 8005822:	aa05      	add	r2, sp, #20
 8005824:	4619      	mov	r1, r3
 8005826:	9202      	str	r2, [sp, #8]
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8005828:	1d22      	adds	r2, r4, #4
        etharp_raw(netif,
 800582a:	9200      	str	r2, [sp, #0]
 800582c:	463a      	mov	r2, r7
 800582e:	f7ff fee3 	bl	80055f8 <etharp_raw>
 8005832:	e781      	b.n	8005738 <etharp_input+0x3c>
 8005834:	0800e36f 	.word	0x0800e36f
 8005838:	0800e073 	.word	0x0800e073
 800583c:	0800d104 	.word	0x0800d104
 8005840:	0800e405 	.word	0x0800e405
 8005844:	20006a38 	.word	0x20006a38

08005848 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8005848:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800584a:	4602      	mov	r2, r0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800584c:	f100 032a 	add.w	r3, r0, #42	; 0x2a
 8005850:	9102      	str	r1, [sp, #8]
 8005852:	2401      	movs	r4, #1
 8005854:	4905      	ldr	r1, [pc, #20]	; (800586c <etharp_request+0x24>)
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8005856:	3204      	adds	r2, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8005858:	9403      	str	r4, [sp, #12]
 800585a:	9101      	str	r1, [sp, #4]
 800585c:	4619      	mov	r1, r3
 800585e:	9200      	str	r2, [sp, #0]
 8005860:	4a03      	ldr	r2, [pc, #12]	; (8005870 <etharp_request+0x28>)
 8005862:	f7ff fec9 	bl	80055f8 <etharp_raw>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
}
 8005866:	b004      	add	sp, #16
 8005868:	bd10      	pop	{r4, pc}
 800586a:	bf00      	nop
 800586c:	08010378 	.word	0x08010378
 8005870:	0801030c 	.word	0x0801030c

08005874 <etharp_tmr>:
{
 8005874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005876:	4c13      	ldr	r4, [pc, #76]	; (80058c4 <etharp_tmr+0x50>)
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8005878:	2500      	movs	r5, #0
        arp_table[i].state = ETHARP_STATE_STABLE;
 800587a:	2602      	movs	r6, #2
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800587c:	2704      	movs	r7, #4
    u8_t state = arp_table[i].state;
 800587e:	7c22      	ldrb	r2, [r4, #16]
    if (state != ETHARP_STATE_EMPTY
 8005880:	b16a      	cbz	r2, 800589e <etharp_tmr+0x2a>
      arp_table[i].ctime++;
 8005882:	89e3      	ldrh	r3, [r4, #14]
 8005884:	3301      	adds	r3, #1
 8005886:	b29b      	uxth	r3, r3
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8005888:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
      arp_table[i].ctime++;
 800588c:	81e3      	strh	r3, [r4, #14]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800588e:	d203      	bcs.n	8005898 <etharp_tmr+0x24>
 8005890:	2a01      	cmp	r2, #1
 8005892:	d109      	bne.n	80058a8 <etharp_tmr+0x34>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8005894:	2b04      	cmp	r3, #4
 8005896:	d90b      	bls.n	80058b0 <etharp_tmr+0x3c>
        etharp_free_entry(i);
 8005898:	4628      	mov	r0, r5
 800589a:	f7ff fdfd 	bl	8005498 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800589e:	3501      	adds	r5, #1
 80058a0:	3418      	adds	r4, #24
 80058a2:	2d0a      	cmp	r5, #10
 80058a4:	d1eb      	bne.n	800587e <etharp_tmr+0xa>
 80058a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80058a8:	2a03      	cmp	r2, #3
 80058aa:	d106      	bne.n	80058ba <etharp_tmr+0x46>
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80058ac:	7427      	strb	r7, [r4, #16]
 80058ae:	e7f6      	b.n	800589e <etharp_tmr+0x2a>
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80058b0:	4621      	mov	r1, r4
 80058b2:	6860      	ldr	r0, [r4, #4]
 80058b4:	f7ff ffc8 	bl	8005848 <etharp_request>
 80058b8:	e7f1      	b.n	800589e <etharp_tmr+0x2a>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80058ba:	2a04      	cmp	r2, #4
 80058bc:	d1ef      	bne.n	800589e <etharp_tmr+0x2a>
        arp_table[i].state = ETHARP_STATE_STABLE;
 80058be:	7426      	strb	r6, [r4, #16]
 80058c0:	e7ed      	b.n	800589e <etharp_tmr+0x2a>
 80058c2:	bf00      	nop
 80058c4:	20006a3c 	.word	0x20006a3c

080058c8 <etharp_output_to_arp_index>:
{
 80058c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80058cc:	4614      	mov	r4, r2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80058ce:	4d27      	ldr	r5, [pc, #156]	; (800596c <etharp_output_to_arp_index+0xa4>)
 80058d0:	2218      	movs	r2, #24
{
 80058d2:	b085      	sub	sp, #20
 80058d4:	4606      	mov	r6, r0
 80058d6:	4688      	mov	r8, r1
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80058d8:	fb02 5204 	mla	r2, r2, r4, r5
 80058dc:	7d12      	ldrb	r2, [r2, #20]
 80058de:	2a01      	cmp	r2, #1
 80058e0:	d806      	bhi.n	80058f0 <etharp_output_to_arp_index+0x28>
 80058e2:	4b23      	ldr	r3, [pc, #140]	; (8005970 <etharp_output_to_arp_index+0xa8>)
 80058e4:	f240 22ef 	movw	r2, #751	; 0x2ef
 80058e8:	4922      	ldr	r1, [pc, #136]	; (8005974 <etharp_output_to_arp_index+0xac>)
 80058ea:	4823      	ldr	r0, [pc, #140]	; (8005978 <etharp_output_to_arp_index+0xb0>)
 80058ec:	f006 fc2a 	bl	800c144 <iprintf>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80058f0:	2118      	movs	r1, #24
 80058f2:	f106 072a 	add.w	r7, r6, #42	; 0x2a
 80058f6:	fb01 5904 	mla	r9, r1, r4, r5
 80058fa:	f899 3014 	ldrb.w	r3, [r9, #20]
 80058fe:	2b02      	cmp	r3, #2
 8005900:	d10d      	bne.n	800591e <etharp_output_to_arp_index+0x56>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8005902:	f8b9 3012 	ldrh.w	r3, [r9, #18]
 8005906:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800590a:	d917      	bls.n	800593c <etharp_output_to_arp_index+0x74>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800590c:	4649      	mov	r1, r9
 800590e:	4630      	mov	r0, r6
 8005910:	3104      	adds	r1, #4
 8005912:	f7ff ff99 	bl	8005848 <etharp_request>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8005916:	b910      	cbnz	r0, 800591e <etharp_output_to_arp_index+0x56>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8005918:	2303      	movs	r3, #3
 800591a:	f889 3014 	strb.w	r3, [r9, #20]
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800591e:	2318      	movs	r3, #24
 8005920:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005924:	4641      	mov	r1, r8
 8005926:	4630      	mov	r0, r6
 8005928:	fb03 5304 	mla	r3, r3, r4, r5
 800592c:	9200      	str	r2, [sp, #0]
 800592e:	463a      	mov	r2, r7
 8005930:	330c      	adds	r3, #12
 8005932:	f005 fe1f 	bl	800b574 <ethernet_output>
}
 8005936:	b005      	add	sp, #20
 8005938:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800593c:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8005940:	d3ed      	bcc.n	800591e <etharp_output_to_arp_index+0x56>
 8005942:	eb04 0344 	add.w	r3, r4, r4, lsl #1
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8005946:	2101      	movs	r1, #1
 8005948:	4630      	mov	r0, r6
 800594a:	00db      	lsls	r3, r3, #3
 800594c:	9103      	str	r1, [sp, #12]
 800594e:	4639      	mov	r1, r7
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8005950:	f103 020c 	add.w	r2, r3, #12
 8005954:	3304      	adds	r3, #4
 8005956:	442b      	add	r3, r5
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8005958:	442a      	add	r2, r5
 800595a:	9302      	str	r3, [sp, #8]
 800595c:	4b07      	ldr	r3, [pc, #28]	; (800597c <etharp_output_to_arp_index+0xb4>)
 800595e:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8005960:	1d33      	adds	r3, r6, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8005962:	9300      	str	r3, [sp, #0]
 8005964:	463b      	mov	r3, r7
 8005966:	f7ff fe47 	bl	80055f8 <etharp_raw>
 800596a:	e7d4      	b.n	8005916 <etharp_output_to_arp_index+0x4e>
 800596c:	20006a38 	.word	0x20006a38
 8005970:	0800e36f 	.word	0x0800e36f
 8005974:	0800e429 	.word	0x0800e429
 8005978:	0800d104 	.word	0x0800d104
 800597c:	08010378 	.word	0x08010378

08005980 <etharp_query>:
{
 8005980:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8005984:	4689      	mov	r9, r1
 8005986:	4607      	mov	r7, r0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8005988:	4601      	mov	r1, r0
{
 800598a:	4615      	mov	r5, r2
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800598c:	f8d9 0000 	ldr.w	r0, [r9]
 8005990:	f000 fbcb 	bl	800612a <ip4_addr_isbroadcast_u32>
 8005994:	2800      	cmp	r0, #0
 8005996:	d175      	bne.n	8005a84 <etharp_query+0x104>
      ip4_addr_ismulticast(ipaddr) ||
 8005998:	f8d9 3000 	ldr.w	r3, [r9]
 800599c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80059a0:	2ae0      	cmp	r2, #224	; 0xe0
 80059a2:	d06f      	beq.n	8005a84 <etharp_query+0x104>
      ip4_addr_isany(ipaddr)) {
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d06d      	beq.n	8005a84 <etharp_query+0x104>
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80059a8:	463a      	mov	r2, r7
 80059aa:	2101      	movs	r1, #1
 80059ac:	4648      	mov	r0, r9
 80059ae:	f7ff fd87 	bl	80054c0 <etharp_find_entry>
  if (i_err < 0) {
 80059b2:	1e04      	subs	r4, r0, #0
 80059b4:	da03      	bge.n	80059be <etharp_query+0x3e>
    return (err_t)i_err;
 80059b6:	b260      	sxtb	r0, r4
}
 80059b8:	b002      	add	sp, #8
 80059ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80059be:	2c7e      	cmp	r4, #126	; 0x7e
 80059c0:	dd06      	ble.n	80059d0 <etharp_query+0x50>
 80059c2:	4b3f      	ldr	r3, [pc, #252]	; (8005ac0 <etharp_query+0x140>)
 80059c4:	f240 32c1 	movw	r2, #961	; 0x3c1
 80059c8:	493e      	ldr	r1, [pc, #248]	; (8005ac4 <etharp_query+0x144>)
 80059ca:	483f      	ldr	r0, [pc, #252]	; (8005ac8 <etharp_query+0x148>)
 80059cc:	f006 fbba 	bl	800c144 <iprintf>
  i = (netif_addr_idx_t)i_err;
 80059d0:	b2e4      	uxtb	r4, r4
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80059d2:	4e3e      	ldr	r6, [pc, #248]	; (8005acc <etharp_query+0x14c>)
 80059d4:	2218      	movs	r2, #24
 80059d6:	fb02 6204 	mla	r2, r2, r4, r6
 80059da:	7d13      	ldrb	r3, [r2, #20]
 80059dc:	bb83      	cbnz	r3, 8005a40 <etharp_query+0xc0>
    arp_table[i].state = ETHARP_STATE_PENDING;
 80059de:	f04f 0801 	mov.w	r8, #1
    arp_table[i].netif = netif;
 80059e2:	6097      	str	r7, [r2, #8]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80059e4:	f882 8014 	strb.w	r8, [r2, #20]
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80059e8:	2318      	movs	r3, #24
 80059ea:	fb03 6304 	mla	r3, r3, r4, r6
 80059ee:	7d1b      	ldrb	r3, [r3, #20]
 80059f0:	b933      	cbnz	r3, 8005a00 <etharp_query+0x80>
 80059f2:	4b33      	ldr	r3, [pc, #204]	; (8005ac0 <etharp_query+0x140>)
 80059f4:	f240 32cf 	movw	r2, #975	; 0x3cf
 80059f8:	4935      	ldr	r1, [pc, #212]	; (8005ad0 <etharp_query+0x150>)
 80059fa:	4833      	ldr	r0, [pc, #204]	; (8005ac8 <etharp_query+0x148>)
 80059fc:	f006 fba2 	bl	800c144 <iprintf>
  if (is_new_entry || (q == NULL)) {
 8005a00:	f1b8 0f00 	cmp.w	r8, #0
 8005a04:	d101      	bne.n	8005a0a <etharp_query+0x8a>
 8005a06:	2d00      	cmp	r5, #0
 8005a08:	d142      	bne.n	8005a90 <etharp_query+0x110>
    result = etharp_request(netif, ipaddr);
 8005a0a:	4649      	mov	r1, r9
 8005a0c:	4638      	mov	r0, r7
 8005a0e:	f7ff ff1b 	bl	8005848 <etharp_request>
    if (q == NULL) {
 8005a12:	2d00      	cmp	r5, #0
 8005a14:	d0d0      	beq.n	80059b8 <etharp_query+0x38>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8005a16:	2318      	movs	r3, #24
 8005a18:	fb03 6204 	mla	r2, r3, r4, r6
 8005a1c:	7d12      	ldrb	r2, [r2, #20]
 8005a1e:	2a01      	cmp	r2, #1
 8005a20:	d911      	bls.n	8005a46 <etharp_query+0xc6>
    ETHARP_SET_ADDRHINT(netif, i);
 8005a22:	4a2c      	ldr	r2, [pc, #176]	; (8005ad4 <etharp_query+0x154>)
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8005a24:	fb03 6304 	mla	r3, r3, r4, r6
 8005a28:	4629      	mov	r1, r5
 8005a2a:	4638      	mov	r0, r7
    ETHARP_SET_ADDRHINT(netif, i);
 8005a2c:	7014      	strb	r4, [r2, #0]
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8005a2e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a32:	330c      	adds	r3, #12
 8005a34:	9200      	str	r2, [sp, #0]
 8005a36:	f107 022a 	add.w	r2, r7, #42	; 0x2a
 8005a3a:	f005 fd9b 	bl	800b574 <ethernet_output>
 8005a3e:	e7bb      	b.n	80059b8 <etharp_query+0x38>
  int is_new_entry = 0;
 8005a40:	f04f 0800 	mov.w	r8, #0
 8005a44:	e7d0      	b.n	80059e8 <etharp_query+0x68>
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8005a46:	d1b7      	bne.n	80059b8 <etharp_query+0x38>
 8005a48:	462f      	mov	r7, r5
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8005a4a:	f8df 8074 	ldr.w	r8, [pc, #116]	; 8005ac0 <etharp_query+0x140>
 8005a4e:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8005ad8 <etharp_query+0x158>
 8005a52:	f8df a074 	ldr.w	sl, [pc, #116]	; 8005ac8 <etharp_query+0x148>
    while (p) {
 8005a56:	b91f      	cbnz	r7, 8005a60 <etharp_query+0xe0>
      pbuf_ref(p);
 8005a58:	4628      	mov	r0, r5
 8005a5a:	f001 fdab 	bl	80075b4 <pbuf_ref>
 8005a5e:	e021      	b.n	8005aa4 <etharp_query+0x124>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8005a60:	897a      	ldrh	r2, [r7, #10]
 8005a62:	893b      	ldrh	r3, [r7, #8]
 8005a64:	429a      	cmp	r2, r3
 8005a66:	d108      	bne.n	8005a7a <etharp_query+0xfa>
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	b133      	cbz	r3, 8005a7a <etharp_query+0xfa>
 8005a6c:	4643      	mov	r3, r8
 8005a6e:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8005a72:	4649      	mov	r1, r9
 8005a74:	4650      	mov	r0, sl
 8005a76:	f006 fb65 	bl	800c144 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8005a7a:	7b3b      	ldrb	r3, [r7, #12]
 8005a7c:	065b      	lsls	r3, r3, #25
 8005a7e:	d40a      	bmi.n	8005a96 <etharp_query+0x116>
      p = p->next;
 8005a80:	683f      	ldr	r7, [r7, #0]
 8005a82:	e7e8      	b.n	8005a56 <etharp_query+0xd6>
    return ERR_ARG;
 8005a84:	f06f 000f 	mvn.w	r0, #15
 8005a88:	e796      	b.n	80059b8 <etharp_query+0x38>
      result = ERR_MEM;
 8005a8a:	f04f 30ff 	mov.w	r0, #4294967295
 8005a8e:	e793      	b.n	80059b8 <etharp_query+0x38>
  err_t result = ERR_MEM;
 8005a90:	f04f 30ff 	mov.w	r0, #4294967295
 8005a94:	e7bf      	b.n	8005a16 <etharp_query+0x96>
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8005a96:	462a      	mov	r2, r5
 8005a98:	f44f 7120 	mov.w	r1, #640	; 0x280
 8005a9c:	200e      	movs	r0, #14
 8005a9e:	f001 feb5 	bl	800780c <pbuf_clone>
 8005aa2:	4605      	mov	r5, r0
    if (p != NULL) {
 8005aa4:	2d00      	cmp	r5, #0
 8005aa6:	d0f0      	beq.n	8005a8a <etharp_query+0x10a>
      if (arp_table[i].q != NULL) {
 8005aa8:	2318      	movs	r3, #24
 8005aaa:	fb03 f204 	mul.w	r2, r3, r4
 8005aae:	461f      	mov	r7, r3
 8005ab0:	58b0      	ldr	r0, [r6, r2]
 8005ab2:	b108      	cbz	r0, 8005ab8 <etharp_query+0x138>
        pbuf_free(arp_table[i].q);
 8005ab4:	f001 fc34 	bl	8007320 <pbuf_free>
      arp_table[i].q = p;
 8005ab8:	437c      	muls	r4, r7
      result = ERR_OK;
 8005aba:	2000      	movs	r0, #0
      arp_table[i].q = p;
 8005abc:	5135      	str	r5, [r6, r4]
 8005abe:	e77b      	b.n	80059b8 <etharp_query+0x38>
 8005ac0:	0800e36f 	.word	0x0800e36f
 8005ac4:	0800e459 	.word	0x0800e459
 8005ac8:	0800d104 	.word	0x0800d104
 8005acc:	20006a38 	.word	0x20006a38
 8005ad0:	0800e467 	.word	0x0800e467
 8005ad4:	20006b28 	.word	0x20006b28
 8005ad8:	0800e48f 	.word	0x0800e48f

08005adc <etharp_output>:
{
 8005adc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ade:	460e      	mov	r6, r1
 8005ae0:	b085      	sub	sp, #20
 8005ae2:	4615      	mov	r5, r2
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8005ae4:	4604      	mov	r4, r0
 8005ae6:	b930      	cbnz	r0, 8005af6 <etharp_output+0x1a>
 8005ae8:	4b42      	ldr	r3, [pc, #264]	; (8005bf4 <etharp_output+0x118>)
 8005aea:	f240 321e 	movw	r2, #798	; 0x31e
 8005aee:	4942      	ldr	r1, [pc, #264]	; (8005bf8 <etharp_output+0x11c>)
 8005af0:	4842      	ldr	r0, [pc, #264]	; (8005bfc <etharp_output+0x120>)
 8005af2:	f006 fb27 	bl	800c144 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8005af6:	b936      	cbnz	r6, 8005b06 <etharp_output+0x2a>
 8005af8:	4b3e      	ldr	r3, [pc, #248]	; (8005bf4 <etharp_output+0x118>)
 8005afa:	f240 321f 	movw	r2, #799	; 0x31f
 8005afe:	4940      	ldr	r1, [pc, #256]	; (8005c00 <etharp_output+0x124>)
 8005b00:	483e      	ldr	r0, [pc, #248]	; (8005bfc <etharp_output+0x120>)
 8005b02:	f006 fb1f 	bl	800c144 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8005b06:	b935      	cbnz	r5, 8005b16 <etharp_output+0x3a>
 8005b08:	4b3a      	ldr	r3, [pc, #232]	; (8005bf4 <etharp_output+0x118>)
 8005b0a:	f44f 7248 	mov.w	r2, #800	; 0x320
 8005b0e:	493d      	ldr	r1, [pc, #244]	; (8005c04 <etharp_output+0x128>)
 8005b10:	483a      	ldr	r0, [pc, #232]	; (8005bfc <etharp_output+0x120>)
 8005b12:	f006 fb17 	bl	800c144 <iprintf>
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8005b16:	4621      	mov	r1, r4
 8005b18:	6828      	ldr	r0, [r5, #0]
 8005b1a:	f000 fb06 	bl	800612a <ip4_addr_isbroadcast_u32>
 8005b1e:	2800      	cmp	r0, #0
 8005b20:	d162      	bne.n	8005be8 <etharp_output+0x10c>
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8005b22:	682b      	ldr	r3, [r5, #0]
 8005b24:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005b28:	2ae0      	cmp	r2, #224	; 0xe0
 8005b2a:	d11d      	bne.n	8005b68 <etharp_output+0x8c>
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8005b2c:	2301      	movs	r3, #1
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8005b2e:	f88d 0009 	strb.w	r0, [sp, #9]
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8005b32:	f88d 3008 	strb.w	r3, [sp, #8]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8005b36:	235e      	movs	r3, #94	; 0x5e
 8005b38:	f88d 300a 	strb.w	r3, [sp, #10]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8005b3c:	786b      	ldrb	r3, [r5, #1]
 8005b3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b42:	f88d 300b 	strb.w	r3, [sp, #11]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8005b46:	78ab      	ldrb	r3, [r5, #2]
 8005b48:	f88d 300c 	strb.w	r3, [sp, #12]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8005b4c:	78eb      	ldrb	r3, [r5, #3]
 8005b4e:	f88d 300d 	strb.w	r3, [sp, #13]
    dest = &mcastaddr;
 8005b52:	ab02      	add	r3, sp, #8
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8005b54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b58:	4631      	mov	r1, r6
 8005b5a:	4620      	mov	r0, r4
 8005b5c:	9200      	str	r2, [sp, #0]
 8005b5e:	f104 022a 	add.w	r2, r4, #42	; 0x2a
 8005b62:	f005 fd07 	bl	800b574 <ethernet_output>
 8005b66:	e023      	b.n	8005bb0 <etharp_output+0xd4>
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8005b68:	6862      	ldr	r2, [r4, #4]
 8005b6a:	68a1      	ldr	r1, [r4, #8]
 8005b6c:	405a      	eors	r2, r3
 8005b6e:	420a      	tst	r2, r1
 8005b70:	d009      	beq.n	8005b86 <etharp_output+0xaa>
        !ip4_addr_islinklocal(ipaddr)) {
 8005b72:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8005b74:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d004      	beq.n	8005b86 <etharp_output+0xaa>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8005b7c:	68e3      	ldr	r3, [r4, #12]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d034      	beq.n	8005bec <etharp_output+0x110>
            dst_addr = netif_ip4_gw(netif);
 8005b82:	f104 050c 	add.w	r5, r4, #12
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8005b86:	4920      	ldr	r1, [pc, #128]	; (8005c08 <etharp_output+0x12c>)
 8005b88:	2318      	movs	r3, #24
 8005b8a:	4820      	ldr	r0, [pc, #128]	; (8005c0c <etharp_output+0x130>)
 8005b8c:	780a      	ldrb	r2, [r1, #0]
 8005b8e:	468e      	mov	lr, r1
 8005b90:	fb03 0302 	mla	r3, r3, r2, r0
 8005b94:	7d18      	ldrb	r0, [r3, #20]
 8005b96:	2801      	cmp	r0, #1
 8005b98:	d90c      	bls.n	8005bb4 <etharp_output+0xd8>
 8005b9a:	6899      	ldr	r1, [r3, #8]
 8005b9c:	428c      	cmp	r4, r1
 8005b9e:	d109      	bne.n	8005bb4 <etharp_output+0xd8>
            (arp_table[etharp_cached_entry].netif == netif) &&
 8005ba0:	6829      	ldr	r1, [r5, #0]
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	4299      	cmp	r1, r3
 8005ba6:	d105      	bne.n	8005bb4 <etharp_output+0xd8>
        return etharp_output_to_arp_index(netif, q, i);
 8005ba8:	4631      	mov	r1, r6
 8005baa:	4620      	mov	r0, r4
 8005bac:	f7ff fe8c 	bl	80058c8 <etharp_output_to_arp_index>
}
 8005bb0:	b005      	add	sp, #20
 8005bb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005bb4:	4b15      	ldr	r3, [pc, #84]	; (8005c0c <etharp_output+0x130>)
{
 8005bb6:	2100      	movs	r1, #0
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8005bb8:	7d18      	ldrb	r0, [r3, #20]
 8005bba:	b2ca      	uxtb	r2, r1
 8005bbc:	2801      	cmp	r0, #1
 8005bbe:	d909      	bls.n	8005bd4 <etharp_output+0xf8>
 8005bc0:	6898      	ldr	r0, [r3, #8]
 8005bc2:	4284      	cmp	r4, r0
 8005bc4:	d106      	bne.n	8005bd4 <etharp_output+0xf8>
          (arp_table[i].netif == netif) &&
 8005bc6:	682f      	ldr	r7, [r5, #0]
 8005bc8:	6858      	ldr	r0, [r3, #4]
 8005bca:	4287      	cmp	r7, r0
 8005bcc:	d102      	bne.n	8005bd4 <etharp_output+0xf8>
        ETHARP_SET_ADDRHINT(netif, i);
 8005bce:	f88e 2000 	strb.w	r2, [lr]
 8005bd2:	e7e9      	b.n	8005ba8 <etharp_output+0xcc>
 8005bd4:	3101      	adds	r1, #1
 8005bd6:	3318      	adds	r3, #24
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8005bd8:	290a      	cmp	r1, #10
 8005bda:	d1ed      	bne.n	8005bb8 <etharp_output+0xdc>
    return etharp_query(netif, dst_addr, q);
 8005bdc:	4632      	mov	r2, r6
 8005bde:	4629      	mov	r1, r5
 8005be0:	4620      	mov	r0, r4
 8005be2:	f7ff fecd 	bl	8005980 <etharp_query>
 8005be6:	e7e3      	b.n	8005bb0 <etharp_output+0xd4>
    dest = (const struct eth_addr *)&ethbroadcast;
 8005be8:	4b09      	ldr	r3, [pc, #36]	; (8005c10 <etharp_output+0x134>)
 8005bea:	e7b3      	b.n	8005b54 <etharp_output+0x78>
            return ERR_RTE;
 8005bec:	f06f 0003 	mvn.w	r0, #3
 8005bf0:	e7de      	b.n	8005bb0 <etharp_output+0xd4>
 8005bf2:	bf00      	nop
 8005bf4:	0800e36f 	.word	0x0800e36f
 8005bf8:	0800e073 	.word	0x0800e073
 8005bfc:	0800d104 	.word	0x0800d104
 8005c00:	0800ef11 	.word	0x0800ef11
 8005c04:	0800e3e6 	.word	0x0800e3e6
 8005c08:	20006b28 	.word	0x20006b28
 8005c0c:	20006a38 	.word	0x20006a38
 8005c10:	0801030c 	.word	0x0801030c

08005c14 <icmp_send_response.isra.0>:
 *          p->payload pointing to the IP header
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
 8005c14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c16:	4604      	mov	r4, r0
 8005c18:	b087      	sub	sp, #28
 8005c1a:	460f      	mov	r7, r1
 8005c1c:	4616      	mov	r6, r2

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8005c1e:	2124      	movs	r1, #36	; 0x24
 8005c20:	f44f 7220 	mov.w	r2, #640	; 0x280
 8005c24:	2022      	movs	r0, #34	; 0x22
 8005c26:	f001 fbe3 	bl	80073f0 <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 8005c2a:	4605      	mov	r5, r0
 8005c2c:	b3a0      	cbz	r0, 8005c98 <icmp_send_response.isra.0+0x84>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8005c2e:	8943      	ldrh	r3, [r0, #10]
 8005c30:	2b23      	cmp	r3, #35	; 0x23
 8005c32:	d806      	bhi.n	8005c42 <icmp_send_response.isra.0+0x2e>
 8005c34:	4b19      	ldr	r3, [pc, #100]	; (8005c9c <icmp_send_response.isra.0+0x88>)
 8005c36:	f240 1269 	movw	r2, #361	; 0x169
 8005c3a:	4919      	ldr	r1, [pc, #100]	; (8005ca0 <icmp_send_response.isra.0+0x8c>)
 8005c3c:	4819      	ldr	r0, [pc, #100]	; (8005ca4 <icmp_send_response.isra.0+0x90>)
 8005c3e:	f006 fa81 	bl	800c144 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8005c42:	6822      	ldr	r2, [r4, #0]
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
  icmphdr->type = type;
  icmphdr->code = code;
  icmphdr->id = 0;
 8005c44:	2300      	movs	r3, #0
  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8005c46:	686c      	ldr	r4, [r5, #4]
  icmphdr->seqno = 0;

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8005c48:	f102 001c 	add.w	r0, r2, #28
  icmphdr->id = 0;
 8005c4c:	7123      	strb	r3, [r4, #4]
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8005c4e:	f104 0108 	add.w	r1, r4, #8
  icmphdr->id = 0;
 8005c52:	7163      	strb	r3, [r4, #5]
  icmphdr->seqno = 0;
 8005c54:	71a3      	strb	r3, [r4, #6]
 8005c56:	71e3      	strb	r3, [r4, #7]
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8005c58:	4613      	mov	r3, r2
  icmphdr->type = type;
 8005c5a:	7027      	strb	r7, [r4, #0]
  icmphdr->code = code;
 8005c5c:	7066      	strb	r6, [r4, #1]
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8005c5e:	f853 6b04 	ldr.w	r6, [r3], #4
 8005c62:	4283      	cmp	r3, r0
 8005c64:	f841 6b04 	str.w	r6, [r1], #4
 8005c68:	d1f9      	bne.n	8005c5e <icmp_send_response.isra.0+0x4a>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8005c6a:	ae06      	add	r6, sp, #24
 8005c6c:	68d3      	ldr	r3, [r2, #12]
 8005c6e:	f846 3d04 	str.w	r3, [r6, #-4]!
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8005c72:	4630      	mov	r0, r6
 8005c74:	f000 f8da 	bl	8005e2c <ip4_route>
#endif
  if (netif != NULL) {
 8005c78:	b158      	cbz	r0, 8005c92 <icmp_send_response.isra.0+0x7e>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8005c7a:	2100      	movs	r1, #0
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	4632      	mov	r2, r6
    icmphdr->chksum = 0;
 8005c80:	70a1      	strb	r1, [r4, #2]
 8005c82:	70e1      	strb	r1, [r4, #3]
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8005c84:	9002      	str	r0, [sp, #8]
 8005c86:	4628      	mov	r0, r5
 8005c88:	e88d 000a 	stmia.w	sp, {r1, r3}
 8005c8c:	23ff      	movs	r3, #255	; 0xff
 8005c8e:	f000 fa3b 	bl	8006108 <ip4_output_if>
  }
  pbuf_free(q);
 8005c92:	4628      	mov	r0, r5
 8005c94:	f001 fb44 	bl	8007320 <pbuf_free>
}
 8005c98:	b007      	add	sp, #28
 8005c9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c9c:	0800e582 	.word	0x0800e582
 8005ca0:	0800e5b7 	.word	0x0800e5b7
 8005ca4:	0800d104 	.word	0x0800d104

08005ca8 <icmp_input>:
  iphdr_in = ip4_current_header();
 8005ca8:	4b48      	ldr	r3, [pc, #288]	; (8005dcc <icmp_input+0x124>)
{
 8005caa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  iphdr_in = ip4_current_header();
 8005cae:	f8d3 9008 	ldr.w	r9, [r3, #8]
{
 8005cb2:	b085      	sub	sp, #20
 8005cb4:	4604      	mov	r4, r0
 8005cb6:	4688      	mov	r8, r1
  hlen = IPH_HL_BYTES(iphdr_in);
 8005cb8:	f899 5000 	ldrb.w	r5, [r9]
 8005cbc:	461f      	mov	r7, r3
 8005cbe:	f005 050f 	and.w	r5, r5, #15
 8005cc2:	00ad      	lsls	r5, r5, #2
  if (hlen < IP_HLEN) {
 8005cc4:	2d13      	cmp	r5, #19
 8005cc6:	d916      	bls.n	8005cf6 <icmp_input+0x4e>
  if (p->len < sizeof(u16_t) * 2) {
 8005cc8:	8942      	ldrh	r2, [r0, #10]
 8005cca:	2a03      	cmp	r2, #3
 8005ccc:	d913      	bls.n	8005cf6 <icmp_input+0x4e>
  type = *((u8_t *)p->payload);
 8005cce:	6842      	ldr	r2, [r0, #4]
  switch (type) {
 8005cd0:	7812      	ldrb	r2, [r2, #0]
 8005cd2:	2a08      	cmp	r2, #8
 8005cd4:	d10f      	bne.n	8005cf6 <icmp_input+0x4e>
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8005cd6:	6958      	ldr	r0, [r3, #20]
 8005cd8:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8005cdc:	2ae0      	cmp	r2, #224	; 0xe0
 8005cde:	d00a      	beq.n	8005cf6 <icmp_input+0x4e>
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8005ce0:	6819      	ldr	r1, [r3, #0]
 8005ce2:	f000 fa22 	bl	800612a <ip4_addr_isbroadcast_u32>
 8005ce6:	b930      	cbnz	r0, 8005cf6 <icmp_input+0x4e>
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8005ce8:	8923      	ldrh	r3, [r4, #8]
 8005cea:	2b07      	cmp	r3, #7
 8005cec:	d903      	bls.n	8005cf6 <icmp_input+0x4e>
        if (inet_chksum_pbuf(p) != 0) {
 8005cee:	4620      	mov	r0, r4
 8005cf0:	f7fe fb27 	bl	8004342 <inet_chksum_pbuf>
 8005cf4:	b128      	cbz	r0, 8005d02 <icmp_input+0x5a>
  pbuf_free(p);
 8005cf6:	4620      	mov	r0, r4
}
 8005cf8:	b005      	add	sp, #20
 8005cfa:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  pbuf_free(p);
 8005cfe:	f001 bb0f 	b.w	8007320 <pbuf_free>
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8005d02:	f105 060e 	add.w	r6, r5, #14
 8005d06:	4620      	mov	r0, r4
 8005d08:	4631      	mov	r1, r6
 8005d0a:	f001 fad2 	bl	80072b2 <pbuf_add_header>
 8005d0e:	2800      	cmp	r0, #0
 8005d10:	d04e      	beq.n	8005db0 <icmp_input+0x108>
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8005d12:	8923      	ldrh	r3, [r4, #8]
 8005d14:	1959      	adds	r1, r3, r5
 8005d16:	b289      	uxth	r1, r1
        if (alloc_len < p->tot_len) {
 8005d18:	428b      	cmp	r3, r1
 8005d1a:	d8ec      	bhi.n	8005cf6 <icmp_input+0x4e>
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8005d1c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8005d20:	200e      	movs	r0, #14
 8005d22:	f001 fb65 	bl	80073f0 <pbuf_alloc>
        if (r == NULL) {
 8005d26:	4606      	mov	r6, r0
 8005d28:	2800      	cmp	r0, #0
 8005d2a:	d0e4      	beq.n	8005cf6 <icmp_input+0x4e>
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8005d2c:	8942      	ldrh	r2, [r0, #10]
 8005d2e:	f105 0308 	add.w	r3, r5, #8
 8005d32:	429a      	cmp	r2, r3
 8005d34:	d203      	bcs.n	8005d3e <icmp_input+0x96>
          pbuf_free(r);
 8005d36:	4630      	mov	r0, r6
 8005d38:	f001 faf2 	bl	8007320 <pbuf_free>
          goto icmperr;
 8005d3c:	e7db      	b.n	8005cf6 <icmp_input+0x4e>
        MEMCPY(r->payload, iphdr_in, hlen);
 8005d3e:	4649      	mov	r1, r9
 8005d40:	462a      	mov	r2, r5
 8005d42:	6840      	ldr	r0, [r0, #4]
 8005d44:	f006 f9eb 	bl	800c11e <memcpy>
        if (pbuf_remove_header(r, hlen)) {
 8005d48:	4629      	mov	r1, r5
 8005d4a:	4630      	mov	r0, r6
 8005d4c:	f001 fab4 	bl	80072b8 <pbuf_remove_header>
 8005d50:	b130      	cbz	r0, 8005d60 <icmp_input+0xb8>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8005d52:	4b1f      	ldr	r3, [pc, #124]	; (8005dd0 <icmp_input+0x128>)
 8005d54:	22b6      	movs	r2, #182	; 0xb6
 8005d56:	491f      	ldr	r1, [pc, #124]	; (8005dd4 <icmp_input+0x12c>)
 8005d58:	481f      	ldr	r0, [pc, #124]	; (8005dd8 <icmp_input+0x130>)
 8005d5a:	f006 f9f3 	bl	800c144 <iprintf>
 8005d5e:	e7ea      	b.n	8005d36 <icmp_input+0x8e>
        if (pbuf_copy(r, p) != ERR_OK) {
 8005d60:	4621      	mov	r1, r4
 8005d62:	4630      	mov	r0, r6
 8005d64:	f001 fc86 	bl	8007674 <pbuf_copy>
 8005d68:	2800      	cmp	r0, #0
 8005d6a:	d1e4      	bne.n	8005d36 <icmp_input+0x8e>
        pbuf_free(p);
 8005d6c:	4620      	mov	r0, r4
 8005d6e:	4634      	mov	r4, r6
 8005d70:	f001 fad6 	bl	8007320 <pbuf_free>
      if (pbuf_add_header(p, hlen)) {
 8005d74:	4629      	mov	r1, r5
 8005d76:	4620      	mov	r0, r4
      iecho = (struct icmp_echo_hdr *)p->payload;
 8005d78:	6866      	ldr	r6, [r4, #4]
      if (pbuf_add_header(p, hlen)) {
 8005d7a:	f001 fa9a 	bl	80072b2 <pbuf_add_header>
 8005d7e:	4602      	mov	r2, r0
 8005d80:	2800      	cmp	r0, #0
 8005d82:	d1b8      	bne.n	8005cf6 <icmp_input+0x4e>
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8005d84:	6861      	ldr	r1, [r4, #4]
        ip4_addr_copy(iphdr->src, *src);
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	60cb      	str	r3, [r1, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	610b      	str	r3, [r1, #16]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8005d8e:	23ff      	movs	r3, #255	; 0xff
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8005d90:	7030      	strb	r0, [r6, #0]
        iecho->chksum = 0;
 8005d92:	70b0      	strb	r0, [r6, #2]
 8005d94:	70f0      	strb	r0, [r6, #3]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8005d96:	720b      	strb	r3, [r1, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8005d98:	7288      	strb	r0, [r1, #10]
 8005d9a:	72c8      	strb	r0, [r1, #11]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8005d9c:	2101      	movs	r1, #1
 8005d9e:	9000      	str	r0, [sp, #0]
 8005da0:	4620      	mov	r0, r4
 8005da2:	9101      	str	r1, [sp, #4]
 8005da4:	f8cd 8008 	str.w	r8, [sp, #8]
 8005da8:	490c      	ldr	r1, [pc, #48]	; (8005ddc <icmp_input+0x134>)
 8005daa:	f000 f9ad 	bl	8006108 <ip4_output_if>
 8005dae:	e7a2      	b.n	8005cf6 <icmp_input+0x4e>
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8005db0:	4631      	mov	r1, r6
 8005db2:	4620      	mov	r0, r4
 8005db4:	f001 fa80 	bl	80072b8 <pbuf_remove_header>
 8005db8:	2800      	cmp	r0, #0
 8005dba:	d0db      	beq.n	8005d74 <icmp_input+0xcc>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8005dbc:	4b04      	ldr	r3, [pc, #16]	; (8005dd0 <icmp_input+0x128>)
 8005dbe:	22c7      	movs	r2, #199	; 0xc7
 8005dc0:	4907      	ldr	r1, [pc, #28]	; (8005de0 <icmp_input+0x138>)
 8005dc2:	4805      	ldr	r0, [pc, #20]	; (8005dd8 <icmp_input+0x130>)
 8005dc4:	f006 f9be 	bl	800c144 <iprintf>
          goto icmperr;
 8005dc8:	e795      	b.n	8005cf6 <icmp_input+0x4e>
 8005dca:	bf00      	nop
 8005dcc:	20006e30 	.word	0x20006e30
 8005dd0:	0800e582 	.word	0x0800e582
 8005dd4:	0800e51b 	.word	0x0800e51b
 8005dd8:	0800d104 	.word	0x0800d104
 8005ddc:	20006e44 	.word	0x20006e44
 8005de0:	0800e550 	.word	0x0800e550

08005de4 <icmp_dest_unreach>:
  icmp_send_response(p, ICMP_DUR, t);
 8005de4:	460a      	mov	r2, r1
 8005de6:	3004      	adds	r0, #4
 8005de8:	2103      	movs	r1, #3
 8005dea:	f7ff bf13 	b.w	8005c14 <icmp_send_response.isra.0>

08005dee <icmp_time_exceeded>:
  icmp_send_response(p, ICMP_TE, t);
 8005dee:	460a      	mov	r2, r1
 8005df0:	3004      	adds	r0, #4
 8005df2:	210b      	movs	r1, #11
 8005df4:	f7ff bf0e 	b.w	8005c14 <icmp_send_response.isra.0>

08005df8 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8005df8:	b508      	push	{r3, lr}
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8005dfa:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
{
 8005dfe:	4601      	mov	r1, r0
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8005e00:	f013 0301 	ands.w	r3, r3, #1
 8005e04:	d00b      	beq.n	8005e1e <ip4_input_accept+0x26>
 8005e06:	6843      	ldr	r3, [r0, #4]
 8005e08:	b14b      	cbz	r3, 8005e1e <ip4_input_accept+0x26>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8005e0a:	4a07      	ldr	r2, [pc, #28]	; (8005e28 <ip4_input_accept+0x30>)
 8005e0c:	6950      	ldr	r0, [r2, #20]
 8005e0e:	4283      	cmp	r3, r0
 8005e10:	d007      	beq.n	8005e22 <ip4_input_accept+0x2a>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8005e12:	f000 f98a 	bl	800612a <ip4_addr_isbroadcast_u32>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8005e16:	3000      	adds	r0, #0
 8005e18:	bf18      	it	ne
 8005e1a:	2001      	movne	r0, #1
 8005e1c:	bd08      	pop	{r3, pc}
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8005e1e:	4618      	mov	r0, r3
 8005e20:	bd08      	pop	{r3, pc}
      return 1;
 8005e22:	2001      	movs	r0, #1
}
 8005e24:	bd08      	pop	{r3, pc}
 8005e26:	bf00      	nop
 8005e28:	20006e30 	.word	0x20006e30

08005e2c <ip4_route>:
  NETIF_FOREACH(netif) {
 8005e2c:	4b14      	ldr	r3, [pc, #80]	; (8005e80 <ip4_route+0x54>)
{
 8005e2e:	b530      	push	{r4, r5, lr}
  NETIF_FOREACH(netif) {
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	b97b      	cbnz	r3, 8005e54 <ip4_route+0x28>
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8005e34:	4a13      	ldr	r2, [pc, #76]	; (8005e84 <ip4_route+0x58>)
 8005e36:	6812      	ldr	r2, [r2, #0]
 8005e38:	b1fa      	cbz	r2, 8005e7a <ip4_route+0x4e>
 8005e3a:	f892 1031 	ldrb.w	r1, [r2, #49]	; 0x31
 8005e3e:	f001 0105 	and.w	r1, r1, #5
 8005e42:	2905      	cmp	r1, #5
 8005e44:	d119      	bne.n	8005e7a <ip4_route+0x4e>
 8005e46:	6851      	ldr	r1, [r2, #4]
 8005e48:	b1b9      	cbz	r1, 8005e7a <ip4_route+0x4e>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8005e4a:	7801      	ldrb	r1, [r0, #0]
 8005e4c:	297f      	cmp	r1, #127	; 0x7f
 8005e4e:	bf18      	it	ne
 8005e50:	4613      	movne	r3, r2
 8005e52:	e012      	b.n	8005e7a <ip4_route+0x4e>
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8005e54:	f893 4031 	ldrb.w	r4, [r3, #49]	; 0x31
 8005e58:	f004 0205 	and.w	r2, r4, #5
 8005e5c:	2a05      	cmp	r2, #5
 8005e5e:	d1e7      	bne.n	8005e30 <ip4_route+0x4>
 8005e60:	685a      	ldr	r2, [r3, #4]
 8005e62:	2a00      	cmp	r2, #0
 8005e64:	d0e4      	beq.n	8005e30 <ip4_route+0x4>
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8005e66:	6801      	ldr	r1, [r0, #0]
 8005e68:	689d      	ldr	r5, [r3, #8]
 8005e6a:	404a      	eors	r2, r1
 8005e6c:	422a      	tst	r2, r5
 8005e6e:	d004      	beq.n	8005e7a <ip4_route+0x4e>
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8005e70:	07a2      	lsls	r2, r4, #30
 8005e72:	d4dd      	bmi.n	8005e30 <ip4_route+0x4>
 8005e74:	68da      	ldr	r2, [r3, #12]
 8005e76:	4291      	cmp	r1, r2
 8005e78:	d1da      	bne.n	8005e30 <ip4_route+0x4>
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	bd30      	pop	{r4, r5, pc}
 8005e7e:	bf00      	nop
 8005e80:	2000d380 	.word	0x2000d380
 8005e84:	2000d384 	.word	0x2000d384

08005e88 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8005e88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8005e8c:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
 8005e90:	4605      	mov	r5, r0
 8005e92:	460f      	mov	r7, r1
  if (IPH_V(iphdr) != 4) {
 8005e94:	f898 9000 	ldrb.w	r9, [r8]
 8005e98:	ea4f 1319 	mov.w	r3, r9, lsr #4
 8005e9c:	2b04      	cmp	r3, #4
 8005e9e:	d005      	beq.n	8005eac <ip4_input+0x24>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8005ea0:	4628      	mov	r0, r5
 8005ea2:	f001 fa3d 	bl	8007320 <pbuf_free>
  ip_data.current_ip_header_tot_len = 0;
  ip4_addr_set_any(ip4_current_src_addr());
  ip4_addr_set_any(ip4_current_dest_addr());

  return ERR_OK;
}
 8005ea6:	2000      	movs	r0, #0
 8005ea8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8005eac:	f8b8 0002 	ldrh.w	r0, [r8, #2]
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8005eb0:	f009 090f 	and.w	r9, r9, #15
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8005eb4:	f7fe f9f2 	bl	800429c <lwip_htons>
  if (iphdr_len < p->tot_len) {
 8005eb8:	892b      	ldrh	r3, [r5, #8]
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8005eba:	ea4f 0989 	mov.w	r9, r9, lsl #2
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8005ebe:	4604      	mov	r4, r0
  if (iphdr_len < p->tot_len) {
 8005ec0:	4283      	cmp	r3, r0
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8005ec2:	fa1f f689 	uxth.w	r6, r9
  if (iphdr_len < p->tot_len) {
 8005ec6:	d903      	bls.n	8005ed0 <ip4_input+0x48>
    pbuf_realloc(p, iphdr_len);
 8005ec8:	4601      	mov	r1, r0
 8005eca:	4628      	mov	r0, r5
 8005ecc:	f001 fb12 	bl	80074f4 <pbuf_realloc>
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8005ed0:	896b      	ldrh	r3, [r5, #10]
 8005ed2:	42b3      	cmp	r3, r6
 8005ed4:	d3e4      	bcc.n	8005ea0 <ip4_input+0x18>
 8005ed6:	892b      	ldrh	r3, [r5, #8]
 8005ed8:	42a3      	cmp	r3, r4
 8005eda:	d3e1      	bcc.n	8005ea0 <ip4_input+0x18>
 8005edc:	2e13      	cmp	r6, #19
 8005ede:	d9df      	bls.n	8005ea0 <ip4_input+0x18>
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8005ee0:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8005ee4:	4c49      	ldr	r4, [pc, #292]	; (800600c <ip4_input+0x184>)
 8005ee6:	6163      	str	r3, [r4, #20]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8005ee8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8005eec:	f8d8 200c 	ldr.w	r2, [r8, #12]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8005ef0:	2be0      	cmp	r3, #224	; 0xe0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8005ef2:	6122      	str	r2, [r4, #16]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8005ef4:	d10e      	bne.n	8005f14 <ip4_input+0x8c>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8005ef6:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8005efa:	07db      	lsls	r3, r3, #31
 8005efc:	d405      	bmi.n	8005f0a <ip4_input+0x82>
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8005efe:	f898 3009 	ldrb.w	r3, [r8, #9]
 8005f02:	2b11      	cmp	r3, #17
 8005f04:	d052      	beq.n	8005fac <ip4_input+0x124>
 8005f06:	2600      	movs	r6, #0
 8005f08:	e019      	b.n	8005f3e <ip4_input+0xb6>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d0f6      	beq.n	8005efe <ip4_input+0x76>
 8005f10:	463e      	mov	r6, r7
 8005f12:	e014      	b.n	8005f3e <ip4_input+0xb6>
    if (ip4_input_accept(inp)) {
 8005f14:	4638      	mov	r0, r7
 8005f16:	f7ff ff6f 	bl	8005df8 <ip4_input_accept>
 8005f1a:	2800      	cmp	r0, #0
 8005f1c:	d143      	bne.n	8005fa6 <ip4_input+0x11e>
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8005f1e:	7d23      	ldrb	r3, [r4, #20]
 8005f20:	2b7f      	cmp	r3, #127	; 0x7f
 8005f22:	d0ec      	beq.n	8005efe <ip4_input+0x76>
        NETIF_FOREACH(netif) {
 8005f24:	4b3a      	ldr	r3, [pc, #232]	; (8006010 <ip4_input+0x188>)
 8005f26:	681e      	ldr	r6, [r3, #0]
 8005f28:	2e00      	cmp	r6, #0
 8005f2a:	d0e8      	beq.n	8005efe <ip4_input+0x76>
          if (netif == inp) {
 8005f2c:	42be      	cmp	r6, r7
 8005f2e:	d101      	bne.n	8005f34 <ip4_input+0xac>
        NETIF_FOREACH(netif) {
 8005f30:	6836      	ldr	r6, [r6, #0]
 8005f32:	e7f9      	b.n	8005f28 <ip4_input+0xa0>
          if (ip4_input_accept(netif)) {
 8005f34:	4630      	mov	r0, r6
 8005f36:	f7ff ff5f 	bl	8005df8 <ip4_input_accept>
 8005f3a:	2800      	cmp	r0, #0
 8005f3c:	d0f8      	beq.n	8005f30 <ip4_input+0xa8>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8005f3e:	6920      	ldr	r0, [r4, #16]
 8005f40:	b148      	cbz	r0, 8005f56 <ip4_input+0xce>
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8005f42:	4639      	mov	r1, r7
 8005f44:	f000 f8f1 	bl	800612a <ip4_addr_isbroadcast_u32>
 8005f48:	2800      	cmp	r0, #0
 8005f4a:	d1a9      	bne.n	8005ea0 <ip4_input+0x18>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8005f4c:	6923      	ldr	r3, [r4, #16]
 8005f4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8005f52:	2be0      	cmp	r3, #224	; 0xe0
 8005f54:	d0a4      	beq.n	8005ea0 <ip4_input+0x18>
  if (netif == NULL) {
 8005f56:	2e00      	cmp	r6, #0
 8005f58:	d0a2      	beq.n	8005ea0 <ip4_input+0x18>
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8005f5a:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8005f5e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005f62:	b13b      	cbz	r3, 8005f74 <ip4_input+0xec>
    p = ip4_reass(p);
 8005f64:	4628      	mov	r0, r5
 8005f66:	f000 fa0f 	bl	8006388 <ip4_reass>
    if (p == NULL) {
 8005f6a:	4605      	mov	r5, r0
 8005f6c:	2800      	cmp	r0, #0
 8005f6e:	d09a      	beq.n	8005ea6 <ip4_input+0x1e>
    iphdr = (const struct ip_hdr *)p->payload;
 8005f70:	f8d0 8004 	ldr.w	r8, [r0, #4]
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8005f74:	4649      	mov	r1, r9
 8005f76:	4628      	mov	r0, r5
  ip_data.current_ip4_header = iphdr;
 8005f78:	e884 01c0 	stmia.w	r4, {r6, r7, r8}
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8005f7c:	f898 3000 	ldrb.w	r3, [r8]
 8005f80:	f003 030f 	and.w	r3, r3, #15
 8005f84:	009b      	lsls	r3, r3, #2
 8005f86:	81a3      	strh	r3, [r4, #12]
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8005f88:	f001 f996 	bl	80072b8 <pbuf_remove_header>
    switch (IPH_PROTO(iphdr)) {
 8005f8c:	f898 3009 	ldrb.w	r3, [r8, #9]
 8005f90:	2b06      	cmp	r3, #6
 8005f92:	d01f      	beq.n	8005fd4 <ip4_input+0x14c>
 8005f94:	2b11      	cmp	r3, #17
 8005f96:	d011      	beq.n	8005fbc <ip4_input+0x134>
 8005f98:	2b01      	cmp	r3, #1
 8005f9a:	d120      	bne.n	8005fde <ip4_input+0x156>
        icmp_input(p, inp);
 8005f9c:	4639      	mov	r1, r7
 8005f9e:	4628      	mov	r0, r5
 8005fa0:	f7ff fe82 	bl	8005ca8 <icmp_input>
        break;
 8005fa4:	e00e      	b.n	8005fc4 <ip4_input+0x13c>
  if (netif == NULL) {
 8005fa6:	2f00      	cmp	r7, #0
 8005fa8:	d1b2      	bne.n	8005f10 <ip4_input+0x88>
 8005faa:	e7a8      	b.n	8005efe <ip4_input+0x76>
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8005fac:	eb08 0309 	add.w	r3, r8, r9
 8005fb0:	885b      	ldrh	r3, [r3, #2]
 8005fb2:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8005fb6:	d1a6      	bne.n	8005f06 <ip4_input+0x7e>
 8005fb8:	463e      	mov	r6, r7
 8005fba:	e7cc      	b.n	8005f56 <ip4_input+0xce>
        udp_input(p, inp);
 8005fbc:	4639      	mov	r1, r7
 8005fbe:	4628      	mov	r0, r5
 8005fc0:	f004 ffdc 	bl	800af7c <udp_input>
  ip_data.current_netif = NULL;
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	6023      	str	r3, [r4, #0]
  ip_data.current_input_netif = NULL;
 8005fc8:	6063      	str	r3, [r4, #4]
  ip_data.current_ip4_header = NULL;
 8005fca:	60a3      	str	r3, [r4, #8]
  ip_data.current_ip_header_tot_len = 0;
 8005fcc:	81a3      	strh	r3, [r4, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8005fce:	6123      	str	r3, [r4, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8005fd0:	6163      	str	r3, [r4, #20]
  return ERR_OK;
 8005fd2:	e768      	b.n	8005ea6 <ip4_input+0x1e>
        tcp_input(p, inp);
 8005fd4:	4639      	mov	r1, r7
 8005fd6:	4628      	mov	r0, r5
 8005fd8:	f002 ffec 	bl	8008fb4 <tcp_input>
        break;
 8005fdc:	e7f2      	b.n	8005fc4 <ip4_input+0x13c>
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8005fde:	4631      	mov	r1, r6
 8005fe0:	6960      	ldr	r0, [r4, #20]
 8005fe2:	f000 f8a2 	bl	800612a <ip4_addr_isbroadcast_u32>
 8005fe6:	b960      	cbnz	r0, 8006002 <ip4_input+0x17a>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8005fe8:	6963      	ldr	r3, [r4, #20]
 8005fea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8005fee:	2be0      	cmp	r3, #224	; 0xe0
 8005ff0:	d007      	beq.n	8006002 <ip4_input+0x17a>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8005ff2:	4649      	mov	r1, r9
 8005ff4:	4628      	mov	r0, r5
 8005ff6:	f001 f98b 	bl	8007310 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8005ffa:	2102      	movs	r1, #2
 8005ffc:	4628      	mov	r0, r5
 8005ffe:	f7ff fef1 	bl	8005de4 <icmp_dest_unreach>
        pbuf_free(p);
 8006002:	4628      	mov	r0, r5
 8006004:	f001 f98c 	bl	8007320 <pbuf_free>
        break;
 8006008:	e7dc      	b.n	8005fc4 <ip4_input+0x13c>
 800600a:	bf00      	nop
 800600c:	20006e30 	.word	0x20006e30
 8006010:	2000d380 	.word	0x2000d380

08006014 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8006014:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8006018:	461f      	mov	r7, r3
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800601a:	7b83      	ldrb	r3, [r0, #14]
{
 800601c:	4605      	mov	r5, r0
 800601e:	468a      	mov	sl, r1
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8006020:	2b01      	cmp	r3, #1
{
 8006022:	4616      	mov	r6, r2
 8006024:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8006028:	d006      	beq.n	8006038 <ip4_output_if_src+0x24>
 800602a:	4b31      	ldr	r3, [pc, #196]	; (80060f0 <ip4_output_if_src+0xdc>)
 800602c:	f44f 7255 	mov.w	r2, #852	; 0x354
 8006030:	4930      	ldr	r1, [pc, #192]	; (80060f4 <ip4_output_if_src+0xe0>)
 8006032:	4831      	ldr	r0, [pc, #196]	; (80060f8 <ip4_output_if_src+0xe4>)
 8006034:	f006 f886 	bl	800c144 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8006038:	2e00      	cmp	r6, #0
 800603a:	d049      	beq.n	80060d0 <ip4_output_if_src+0xbc>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800603c:	2114      	movs	r1, #20
 800603e:	4628      	mov	r0, r5
 8006040:	f001 f937 	bl	80072b2 <pbuf_add_header>
 8006044:	b120      	cbz	r0, 8006050 <ip4_output_if_src+0x3c>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8006046:	f06f 0001 	mvn.w	r0, #1
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
}
 800604a:	b002      	add	sp, #8
 800604c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8006050:	896b      	ldrh	r3, [r5, #10]
    iphdr = (struct ip_hdr *)p->payload;
 8006052:	686c      	ldr	r4, [r5, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8006054:	2b13      	cmp	r3, #19
 8006056:	d806      	bhi.n	8006066 <ip4_output_if_src+0x52>
 8006058:	4b25      	ldr	r3, [pc, #148]	; (80060f0 <ip4_output_if_src+0xdc>)
 800605a:	f240 3289 	movw	r2, #905	; 0x389
 800605e:	4927      	ldr	r1, [pc, #156]	; (80060fc <ip4_output_if_src+0xe8>)
 8006060:	4825      	ldr	r0, [pc, #148]	; (80060f8 <ip4_output_if_src+0xe4>)
 8006062:	f006 f86f 	bl	800c144 <iprintf>
    IPH_PROTO_SET(iphdr, proto);
 8006066:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    IPH_TTL_SET(iphdr, ttl);
 800606a:	7227      	strb	r7, [r4, #8]
    IPH_OFFSET_SET(iphdr, 0);
 800606c:	2700      	movs	r7, #0
    IPH_PROTO_SET(iphdr, proto);
 800606e:	7263      	strb	r3, [r4, #9]
    ip4_addr_copy(iphdr->dest, *dest);
 8006070:	6833      	ldr	r3, [r6, #0]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8006072:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8006104 <ip4_output_if_src+0xf0>
    ip4_addr_copy(iphdr->dest, *dest);
 8006076:	6123      	str	r3, [r4, #16]
    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8006078:	2345      	movs	r3, #69	; 0x45
 800607a:	7023      	strb	r3, [r4, #0]
    IPH_TOS_SET(iphdr, tos);
 800607c:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8006080:	7063      	strb	r3, [r4, #1]
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8006082:	8928      	ldrh	r0, [r5, #8]
 8006084:	f7fe f90a 	bl	800429c <lwip_htons>
    IPH_OFFSET_SET(iphdr, 0);
 8006088:	71a7      	strb	r7, [r4, #6]
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800608a:	8060      	strh	r0, [r4, #2]
    IPH_OFFSET_SET(iphdr, 0);
 800608c:	71e7      	strb	r7, [r4, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800608e:	f8b9 0000 	ldrh.w	r0, [r9]
 8006092:	f7fe f903 	bl	800429c <lwip_htons>
    ++ip_id;
 8006096:	f8b9 3000 	ldrh.w	r3, [r9]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800609a:	80a0      	strh	r0, [r4, #4]
    ++ip_id;
 800609c:	3301      	adds	r3, #1
 800609e:	f8a9 3000 	strh.w	r3, [r9]
    if (src == NULL) {
 80060a2:	f1ba 0f00 	cmp.w	sl, #0
 80060a6:	d110      	bne.n	80060ca <ip4_output_if_src+0xb6>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80060a8:	4b15      	ldr	r3, [pc, #84]	; (8006100 <ip4_output_if_src+0xec>)
 80060aa:	681b      	ldr	r3, [r3, #0]
      ip4_addr_copy(iphdr->src, *src);
 80060ac:	60e3      	str	r3, [r4, #12]
    IPH_CHKSUM_SET(iphdr, 0);
 80060ae:	72a7      	strb	r7, [r4, #10]
 80060b0:	72e7      	strb	r7, [r4, #11]
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80060b2:	f8b8 3028 	ldrh.w	r3, [r8, #40]	; 0x28
 80060b6:	b1a3      	cbz	r3, 80060e2 <ip4_output_if_src+0xce>
 80060b8:	892a      	ldrh	r2, [r5, #8]
 80060ba:	429a      	cmp	r2, r3
 80060bc:	d911      	bls.n	80060e2 <ip4_output_if_src+0xce>
    return ip4_frag(p, netif, dest);
 80060be:	4632      	mov	r2, r6
 80060c0:	4641      	mov	r1, r8
 80060c2:	4628      	mov	r0, r5
 80060c4:	f000 fb36 	bl	8006734 <ip4_frag>
 80060c8:	e7bf      	b.n	800604a <ip4_output_if_src+0x36>
      ip4_addr_copy(iphdr->src, *src);
 80060ca:	f8da 3000 	ldr.w	r3, [sl]
 80060ce:	e7ed      	b.n	80060ac <ip4_output_if_src+0x98>
    if (p->len < IP_HLEN) {
 80060d0:	896b      	ldrh	r3, [r5, #10]
 80060d2:	2b13      	cmp	r3, #19
 80060d4:	d9b7      	bls.n	8006046 <ip4_output_if_src+0x32>
    ip4_addr_copy(dest_addr, iphdr->dest);
 80060d6:	686b      	ldr	r3, [r5, #4]
 80060d8:	ae02      	add	r6, sp, #8
 80060da:	691b      	ldr	r3, [r3, #16]
 80060dc:	f846 3d04 	str.w	r3, [r6, #-4]!
 80060e0:	e7e7      	b.n	80060b2 <ip4_output_if_src+0x9e>
  return netif->output(netif, p, dest);
 80060e2:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80060e6:	4632      	mov	r2, r6
 80060e8:	4629      	mov	r1, r5
 80060ea:	4640      	mov	r0, r8
 80060ec:	4798      	blx	r3
 80060ee:	e7ac      	b.n	800604a <ip4_output_if_src+0x36>
 80060f0:	0800e5e3 	.word	0x0800e5e3
 80060f4:	0800e617 	.word	0x0800e617
 80060f8:	0800d104 	.word	0x0800d104
 80060fc:	0800e623 	.word	0x0800e623
 8006100:	0800e650 	.word	0x0800e650
 8006104:	20006b2a 	.word	0x20006b2a

08006108 <ip4_output_if>:
{
 8006108:	b4f0      	push	{r4, r5, r6, r7}
 800610a:	9c06      	ldr	r4, [sp, #24]
 800610c:	f89d 5010 	ldrb.w	r5, [sp, #16]
 8006110:	f89d 6014 	ldrb.w	r6, [sp, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8006114:	b11a      	cbz	r2, 800611e <ip4_output_if+0x16>
    if (ip4_addr_isany(src)) {
 8006116:	b109      	cbz	r1, 800611c <ip4_output_if+0x14>
 8006118:	680f      	ldr	r7, [r1, #0]
 800611a:	b907      	cbnz	r7, 800611e <ip4_output_if+0x16>
      src_used = netif_ip4_addr(netif);
 800611c:	1d21      	adds	r1, r4, #4
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800611e:	9406      	str	r4, [sp, #24]
 8006120:	9605      	str	r6, [sp, #20]
 8006122:	9504      	str	r5, [sp, #16]
}
 8006124:	bcf0      	pop	{r4, r5, r6, r7}
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8006126:	f7ff bf75 	b.w	8006014 <ip4_output_if_src>

0800612a <ip4_addr_isbroadcast_u32>:
{
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800612a:	1e43      	subs	r3, r0, #1
 800612c:	3303      	adds	r3, #3
 800612e:	d811      	bhi.n	8006154 <ip4_addr_isbroadcast_u32+0x2a>
      (addr == IPADDR_ANY)) {
    return 1;
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8006130:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
 8006134:	f013 0302 	ands.w	r3, r3, #2
 8006138:	d00e      	beq.n	8006158 <ip4_addr_isbroadcast_u32+0x2e>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800613a:	684a      	ldr	r2, [r1, #4]
 800613c:	4290      	cmp	r0, r2
 800613e:	d00b      	beq.n	8006158 <ip4_addr_isbroadcast_u32+0x2e>
    return 0;
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8006140:	688b      	ldr	r3, [r1, #8]
 8006142:	4042      	eors	r2, r0
 8006144:	421a      	tst	r2, r3
 8006146:	d107      	bne.n	8006158 <ip4_addr_isbroadcast_u32+0x2e>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8006148:	43db      	mvns	r3, r3
 800614a:	4383      	bics	r3, r0
    return 1;
 800614c:	bf0c      	ite	eq
 800614e:	2001      	moveq	r0, #1
 8006150:	2000      	movne	r0, #0
 8006152:	4770      	bx	lr
 8006154:	2001      	movs	r0, #1
 8006156:	4770      	bx	lr
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
 8006158:	2000      	movs	r0, #0
  }
}
 800615a:	4770      	bx	lr

0800615c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800615c:	b538      	push	{r3, r4, r5, lr}
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800615e:	4b0c      	ldr	r3, [pc, #48]	; (8006190 <ip_reass_dequeue_datagram+0x34>)
{
 8006160:	4604      	mov	r4, r0
 8006162:	460d      	mov	r5, r1
  if (reassdatagrams == ipr) {
 8006164:	681a      	ldr	r2, [r3, #0]
 8006166:	4282      	cmp	r2, r0
 8006168:	d107      	bne.n	800617a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800616a:	6802      	ldr	r2, [r0, #0]
 800616c:	601a      	str	r2, [r3, #0]
    LWIP_ASSERT("sanity check linked list", prev != NULL);
    prev->next = ipr->next;
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800616e:	4621      	mov	r1, r4
 8006170:	2004      	movs	r0, #4
}
 8006172:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  memp_free(MEMP_REASSDATA, ipr);
 8006176:	f000 bea1 	b.w	8006ebc <memp_free>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800617a:	b931      	cbnz	r1, 800618a <ip_reass_dequeue_datagram+0x2e>
 800617c:	4b05      	ldr	r3, [pc, #20]	; (8006194 <ip_reass_dequeue_datagram+0x38>)
 800617e:	f240 1245 	movw	r2, #325	; 0x145
 8006182:	4905      	ldr	r1, [pc, #20]	; (8006198 <ip_reass_dequeue_datagram+0x3c>)
 8006184:	4805      	ldr	r0, [pc, #20]	; (800619c <ip_reass_dequeue_datagram+0x40>)
 8006186:	f005 ffdd 	bl	800c144 <iprintf>
    prev->next = ipr->next;
 800618a:	6823      	ldr	r3, [r4, #0]
 800618c:	602b      	str	r3, [r5, #0]
 800618e:	e7ee      	b.n	800616e <ip_reass_dequeue_datagram+0x12>
 8006190:	20006b30 	.word	0x20006b30
 8006194:	0800e761 	.word	0x0800e761
 8006198:	0800e79a 	.word	0x0800e79a
 800619c:	0800d104 	.word	0x0800d104

080061a0 <ip_reass_free_complete_datagram>:
  LWIP_ASSERT("prev != ipr", prev != ipr);
 80061a0:	4281      	cmp	r1, r0
{
 80061a2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061a6:	4605      	mov	r5, r0
 80061a8:	460f      	mov	r7, r1
  LWIP_ASSERT("prev != ipr", prev != ipr);
 80061aa:	d105      	bne.n	80061b8 <ip_reass_free_complete_datagram+0x18>
 80061ac:	4b2f      	ldr	r3, [pc, #188]	; (800626c <ip_reass_free_complete_datagram+0xcc>)
 80061ae:	22ab      	movs	r2, #171	; 0xab
 80061b0:	492f      	ldr	r1, [pc, #188]	; (8006270 <ip_reass_free_complete_datagram+0xd0>)
 80061b2:	4830      	ldr	r0, [pc, #192]	; (8006274 <ip_reass_free_complete_datagram+0xd4>)
 80061b4:	f005 ffc6 	bl	800c144 <iprintf>
  if (prev != NULL) {
 80061b8:	b147      	cbz	r7, 80061cc <ip_reass_free_complete_datagram+0x2c>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	429d      	cmp	r5, r3
 80061be:	d005      	beq.n	80061cc <ip_reass_free_complete_datagram+0x2c>
 80061c0:	4b2a      	ldr	r3, [pc, #168]	; (800626c <ip_reass_free_complete_datagram+0xcc>)
 80061c2:	22ad      	movs	r2, #173	; 0xad
 80061c4:	492c      	ldr	r1, [pc, #176]	; (8006278 <ip_reass_free_complete_datagram+0xd8>)
 80061c6:	482b      	ldr	r0, [pc, #172]	; (8006274 <ip_reass_free_complete_datagram+0xd4>)
 80061c8:	f005 ffbc 	bl	800c144 <iprintf>
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80061cc:	686e      	ldr	r6, [r5, #4]
 80061ce:	6873      	ldr	r3, [r6, #4]
  if (iprh->start == 0) {
 80061d0:	889a      	ldrh	r2, [r3, #4]
 80061d2:	bb92      	cbnz	r2, 800623a <ip_reass_free_complete_datagram+0x9a>
    ipr->p = iprh->next_pbuf;
 80061d4:	681a      	ldr	r2, [r3, #0]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80061d6:	f105 011c 	add.w	r1, r5, #28
    ipr->p = iprh->next_pbuf;
 80061da:	606a      	str	r2, [r5, #4]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80061dc:	f105 0208 	add.w	r2, r5, #8
 80061e0:	f852 0b04 	ldr.w	r0, [r2], #4
 80061e4:	428a      	cmp	r2, r1
 80061e6:	f843 0b04 	str.w	r0, [r3], #4
 80061ea:	d1f9      	bne.n	80061e0 <ip_reass_free_complete_datagram+0x40>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80061ec:	2101      	movs	r1, #1
 80061ee:	4630      	mov	r0, r6
 80061f0:	f7ff fdfd 	bl	8005dee <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80061f4:	4630      	mov	r0, r6
 80061f6:	f001 f9d5 	bl	80075a4 <pbuf_clen>
 80061fa:	4604      	mov	r4, r0
    pbuf_free(p);
 80061fc:	4630      	mov	r0, r6
 80061fe:	f001 f88f 	bl	8007320 <pbuf_free>
  p = ipr->p;
 8006202:	686e      	ldr	r6, [r5, #4]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8006204:	f8df 8064 	ldr.w	r8, [pc, #100]	; 800626c <ip_reass_free_complete_datagram+0xcc>
 8006208:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8006284 <ip_reass_free_complete_datagram+0xe4>
 800620c:	f8df a064 	ldr.w	sl, [pc, #100]	; 8006274 <ip_reass_free_complete_datagram+0xd4>
  while (p != NULL) {
 8006210:	b9ae      	cbnz	r6, 800623e <ip_reass_free_complete_datagram+0x9e>
  ip_reass_dequeue_datagram(ipr, prev);
 8006212:	4628      	mov	r0, r5
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8006214:	4d19      	ldr	r5, [pc, #100]	; (800627c <ip_reass_free_complete_datagram+0xdc>)
  ip_reass_dequeue_datagram(ipr, prev);
 8006216:	4639      	mov	r1, r7
 8006218:	f7ff ffa0 	bl	800615c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800621c:	882b      	ldrh	r3, [r5, #0]
 800621e:	42a3      	cmp	r3, r4
 8006220:	d205      	bcs.n	800622e <ip_reass_free_complete_datagram+0x8e>
 8006222:	4b12      	ldr	r3, [pc, #72]	; (800626c <ip_reass_free_complete_datagram+0xcc>)
 8006224:	22d2      	movs	r2, #210	; 0xd2
 8006226:	4916      	ldr	r1, [pc, #88]	; (8006280 <ip_reass_free_complete_datagram+0xe0>)
 8006228:	4812      	ldr	r0, [pc, #72]	; (8006274 <ip_reass_free_complete_datagram+0xd4>)
 800622a:	f005 ff8b 	bl	800c144 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800622e:	882b      	ldrh	r3, [r5, #0]
}
 8006230:	4620      	mov	r0, r4
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8006232:	1b1b      	subs	r3, r3, r4
 8006234:	802b      	strh	r3, [r5, #0]
}
 8006236:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  u16_t pbufs_freed = 0;
 800623a:	2400      	movs	r4, #0
 800623c:	e7e1      	b.n	8006202 <ip_reass_free_complete_datagram+0x62>
    iprh = (struct ip_reass_helper *)p->payload;
 800623e:	6873      	ldr	r3, [r6, #4]
    clen = pbuf_clen(pcur);
 8006240:	4630      	mov	r0, r6
    p = iprh->next_pbuf;
 8006242:	f8d3 b000 	ldr.w	fp, [r3]
    clen = pbuf_clen(pcur);
 8006246:	f001 f9ad 	bl	80075a4 <pbuf_clen>
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800624a:	4404      	add	r4, r0
 800624c:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 8006250:	db05      	blt.n	800625e <ip_reass_free_complete_datagram+0xbe>
 8006252:	4643      	mov	r3, r8
 8006254:	22cc      	movs	r2, #204	; 0xcc
 8006256:	4649      	mov	r1, r9
 8006258:	4650      	mov	r0, sl
 800625a:	f005 ff73 	bl	800c144 <iprintf>
    pbuf_free(pcur);
 800625e:	4630      	mov	r0, r6
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8006260:	b2a4      	uxth	r4, r4
    pbuf_free(pcur);
 8006262:	f001 f85d 	bl	8007320 <pbuf_free>
    p = iprh->next_pbuf;
 8006266:	465e      	mov	r6, fp
 8006268:	e7d2      	b.n	8006210 <ip_reass_free_complete_datagram+0x70>
 800626a:	bf00      	nop
 800626c:	0800e761 	.word	0x0800e761
 8006270:	0800e7b3 	.word	0x0800e7b3
 8006274:	0800d104 	.word	0x0800d104
 8006278:	0800e7bf 	.word	0x0800e7bf
 800627c:	20006b2c 	.word	0x20006b2c
 8006280:	0800e7ee 	.word	0x0800e7ee
 8006284:	0800e7d1 	.word	0x0800e7d1

08006288 <ip_reass_remove_oldest_datagram>:
{
 8006288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800628c:	4606      	mov	r6, r0
 800628e:	460f      	mov	r7, r1
  int pbufs_freed = 0, pbufs_freed_current;
 8006290:	2500      	movs	r5, #0
    r = reassdatagrams;
 8006292:	f8df 8068 	ldr.w	r8, [pc, #104]	; 80062fc <ip_reass_remove_oldest_datagram+0x74>
    other_datagrams = 0;
 8006296:	2400      	movs	r4, #0
    r = reassdatagrams;
 8006298:	f8d8 3000 	ldr.w	r3, [r8]
    oldest_prev = NULL;
 800629c:	4621      	mov	r1, r4
    prev = NULL;
 800629e:	46a6      	mov	lr, r4
    oldest = NULL;
 80062a0:	4620      	mov	r0, r4
    while (r != NULL) {
 80062a2:	b953      	cbnz	r3, 80062ba <ip_reass_remove_oldest_datagram+0x32>
    if (oldest != NULL) {
 80062a4:	b110      	cbz	r0, 80062ac <ip_reass_remove_oldest_datagram+0x24>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80062a6:	f7ff ff7b 	bl	80061a0 <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
 80062aa:	4405      	add	r5, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80062ac:	42bd      	cmp	r5, r7
 80062ae:	da01      	bge.n	80062b4 <ip_reass_remove_oldest_datagram+0x2c>
 80062b0:	2c01      	cmp	r4, #1
 80062b2:	dcf0      	bgt.n	8006296 <ip_reass_remove_oldest_datagram+0xe>
}
 80062b4:	4628      	mov	r0, r5
 80062b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80062ba:	f8d6 c00c 	ldr.w	ip, [r6, #12]
 80062be:	695a      	ldr	r2, [r3, #20]
 80062c0:	4562      	cmp	r2, ip
 80062c2:	d109      	bne.n	80062d8 <ip_reass_remove_oldest_datagram+0x50>
 80062c4:	f8d6 c010 	ldr.w	ip, [r6, #16]
 80062c8:	699a      	ldr	r2, [r3, #24]
 80062ca:	4562      	cmp	r2, ip
 80062cc:	d104      	bne.n	80062d8 <ip_reass_remove_oldest_datagram+0x50>
 80062ce:	f8b3 c00c 	ldrh.w	ip, [r3, #12]
 80062d2:	88b2      	ldrh	r2, [r6, #4]
 80062d4:	4594      	cmp	ip, r2
 80062d6:	d008      	beq.n	80062ea <ip_reass_remove_oldest_datagram+0x62>
        other_datagrams++;
 80062d8:	3401      	adds	r4, #1
        if (oldest == NULL) {
 80062da:	b160      	cbz	r0, 80062f6 <ip_reass_remove_oldest_datagram+0x6e>
        } else if (r->timer <= oldest->timer) {
 80062dc:	7fc2      	ldrb	r2, [r0, #31]
 80062de:	f893 c01f 	ldrb.w	ip, [r3, #31]
          oldest_prev = prev;
 80062e2:	4594      	cmp	ip, r2
 80062e4:	bf9c      	itt	ls
 80062e6:	4671      	movls	r1, lr
 80062e8:	4618      	movls	r0, r3
      if (r->next != NULL) {
 80062ea:	681a      	ldr	r2, [r3, #0]
 80062ec:	2a00      	cmp	r2, #0
 80062ee:	bf18      	it	ne
 80062f0:	469e      	movne	lr, r3
 80062f2:	4613      	mov	r3, r2
 80062f4:	e7d5      	b.n	80062a2 <ip_reass_remove_oldest_datagram+0x1a>
          oldest_prev = prev;
 80062f6:	4671      	mov	r1, lr
 80062f8:	4618      	mov	r0, r3
 80062fa:	e7f6      	b.n	80062ea <ip_reass_remove_oldest_datagram+0x62>
 80062fc:	20006b30 	.word	0x20006b30

08006300 <ip_frag_free_pbuf_custom_ref>:
}

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8006300:	b510      	push	{r4, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 8006302:	4604      	mov	r4, r0
 8006304:	b930      	cbnz	r0, 8006314 <ip_frag_free_pbuf_custom_ref+0x14>
 8006306:	4b06      	ldr	r3, [pc, #24]	; (8006320 <ip_frag_free_pbuf_custom_ref+0x20>)
 8006308:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800630c:	4905      	ldr	r1, [pc, #20]	; (8006324 <ip_frag_free_pbuf_custom_ref+0x24>)
 800630e:	4806      	ldr	r0, [pc, #24]	; (8006328 <ip_frag_free_pbuf_custom_ref+0x28>)
 8006310:	f005 ff18 	bl	800c144 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8006314:	4621      	mov	r1, r4
 8006316:	2005      	movs	r0, #5
}
 8006318:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_FRAG_PBUF, p);
 800631c:	f000 bdce 	b.w	8006ebc <memp_free>
 8006320:	0800e761 	.word	0x0800e761
 8006324:	0800eef9 	.word	0x0800eef9
 8006328:	0800d104 	.word	0x0800d104

0800632c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800632c:	b510      	push	{r4, lr}
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800632e:	4604      	mov	r4, r0
 8006330:	b930      	cbnz	r0, 8006340 <ipfrag_free_pbuf_custom+0x14>
 8006332:	4b08      	ldr	r3, [pc, #32]	; (8006354 <ipfrag_free_pbuf_custom+0x28>)
 8006334:	f240 22ce 	movw	r2, #718	; 0x2ce
 8006338:	4907      	ldr	r1, [pc, #28]	; (8006358 <ipfrag_free_pbuf_custom+0x2c>)
 800633a:	4808      	ldr	r0, [pc, #32]	; (800635c <ipfrag_free_pbuf_custom+0x30>)
 800633c:	f005 ff02 	bl	800c144 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
  if (pcr->original != NULL) {
 8006340:	6960      	ldr	r0, [r4, #20]
 8006342:	b108      	cbz	r0, 8006348 <ipfrag_free_pbuf_custom+0x1c>
    pbuf_free(pcr->original);
 8006344:	f000 ffec 	bl	8007320 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8006348:	4620      	mov	r0, r4
}
 800634a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ip_frag_free_pbuf_custom_ref(pcr);
 800634e:	f7ff bfd7 	b.w	8006300 <ip_frag_free_pbuf_custom_ref>
 8006352:	bf00      	nop
 8006354:	0800e761 	.word	0x0800e761
 8006358:	0800e810 	.word	0x0800e810
 800635c:	0800d104 	.word	0x0800d104

08006360 <ip_reass_tmr>:
{
 8006360:	b538      	push	{r3, r4, r5, lr}
  r = reassdatagrams;
 8006362:	4b08      	ldr	r3, [pc, #32]	; (8006384 <ip_reass_tmr+0x24>)
  struct ip_reassdata *r, *prev = NULL;
 8006364:	2400      	movs	r4, #0
  r = reassdatagrams;
 8006366:	6818      	ldr	r0, [r3, #0]
  while (r != NULL) {
 8006368:	b900      	cbnz	r0, 800636c <ip_reass_tmr+0xc>
}
 800636a:	bd38      	pop	{r3, r4, r5, pc}
    if (r->timer > 0) {
 800636c:	7fc3      	ldrb	r3, [r0, #31]
 800636e:	6805      	ldr	r5, [r0, #0]
 8006370:	b123      	cbz	r3, 800637c <ip_reass_tmr+0x1c>
      r->timer--;
 8006372:	3b01      	subs	r3, #1
 8006374:	4604      	mov	r4, r0
 8006376:	77c3      	strb	r3, [r0, #31]
      r = r->next;
 8006378:	4628      	mov	r0, r5
 800637a:	e7f5      	b.n	8006368 <ip_reass_tmr+0x8>
      ip_reass_free_complete_datagram(tmp, prev);
 800637c:	4621      	mov	r1, r4
 800637e:	f7ff ff0f 	bl	80061a0 <ip_reass_free_complete_datagram>
 8006382:	e7f9      	b.n	8006378 <ip_reass_tmr+0x18>
 8006384:	20006b30 	.word	0x20006b30

08006388 <ip4_reass>:
{
 8006388:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  fraghdr = (struct ip_hdr *)p->payload;
 800638c:	6845      	ldr	r5, [r0, #4]
{
 800638e:	4680      	mov	r8, r0
  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8006390:	782b      	ldrb	r3, [r5, #0]
 8006392:	f003 030f 	and.w	r3, r3, #15
 8006396:	2b05      	cmp	r3, #5
 8006398:	f040 8099 	bne.w	80064ce <ip4_reass+0x146>
  offset = IPH_OFFSET_BYTES(fraghdr);
 800639c:	88e8      	ldrh	r0, [r5, #6]
 800639e:	f7fd ff7d 	bl	800429c <lwip_htons>
 80063a2:	4607      	mov	r7, r0
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80063a4:	8868      	ldrh	r0, [r5, #2]
 80063a6:	f7fd ff79 	bl	800429c <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 80063aa:	782b      	ldrb	r3, [r5, #0]
 80063ac:	f003 030f 	and.w	r3, r3, #15
  if (hlen > len) {
 80063b0:	009b      	lsls	r3, r3, #2
 80063b2:	4298      	cmp	r0, r3
 80063b4:	f0c0 808b 	bcc.w	80064ce <ip4_reass+0x146>
  len = (u16_t)(len - hlen);
 80063b8:	1ac0      	subs	r0, r0, r3
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80063ba:	4cb4      	ldr	r4, [pc, #720]	; (800668c <ip4_reass+0x304>)
  len = (u16_t)(len - hlen);
 80063bc:	b283      	uxth	r3, r0
  clen = pbuf_clen(p);
 80063be:	4640      	mov	r0, r8
  len = (u16_t)(len - hlen);
 80063c0:	9301      	str	r3, [sp, #4]
  clen = pbuf_clen(p);
 80063c2:	f001 f8ef 	bl	80075a4 <pbuf_clen>
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80063c6:	8823      	ldrh	r3, [r4, #0]
  clen = pbuf_clen(p);
 80063c8:	4682      	mov	sl, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80063ca:	4403      	add	r3, r0
 80063cc:	2b0a      	cmp	r3, #10
 80063ce:	dc75      	bgt.n	80064bc <ip4_reass+0x134>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80063d0:	4eaf      	ldr	r6, [pc, #700]	; (8006690 <ip4_reass+0x308>)
 80063d2:	6834      	ldr	r4, [r6, #0]
 80063d4:	2c00      	cmp	r4, #0
 80063d6:	d17f      	bne.n	80064d8 <ip4_reass+0x150>
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80063d8:	2004      	movs	r0, #4
 80063da:	f000 fd53 	bl	8006e84 <memp_malloc>
  if (ipr == NULL) {
 80063de:	4604      	mov	r4, r0
 80063e0:	b958      	cbnz	r0, 80063fa <ip4_reass+0x72>
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80063e2:	4651      	mov	r1, sl
 80063e4:	4628      	mov	r0, r5
 80063e6:	f7ff ff4f 	bl	8006288 <ip_reass_remove_oldest_datagram>
 80063ea:	4582      	cmp	sl, r0
 80063ec:	dc6f      	bgt.n	80064ce <ip4_reass+0x146>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80063ee:	2004      	movs	r0, #4
 80063f0:	f000 fd48 	bl	8006e84 <memp_malloc>
    if (ipr == NULL)
 80063f4:	4604      	mov	r4, r0
 80063f6:	2800      	cmp	r0, #0
 80063f8:	d069      	beq.n	80064ce <ip4_reass+0x146>
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80063fa:	2220      	movs	r2, #32
 80063fc:	2100      	movs	r1, #0
 80063fe:	4620      	mov	r0, r4
 8006400:	f005 fe98 	bl	800c134 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8006404:	230f      	movs	r3, #15
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8006406:	f104 0208 	add.w	r2, r4, #8
 800640a:	f105 0114 	add.w	r1, r5, #20
  ipr->timer = IP_REASS_MAXAGE;
 800640e:	77e3      	strb	r3, [r4, #31]
  ipr->next = reassdatagrams;
 8006410:	6833      	ldr	r3, [r6, #0]
  reassdatagrams = ipr;
 8006412:	6034      	str	r4, [r6, #0]
  ipr->next = reassdatagrams;
 8006414:	6023      	str	r3, [r4, #0]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8006416:	462b      	mov	r3, r5
 8006418:	f853 0b04 	ldr.w	r0, [r3], #4
 800641c:	428b      	cmp	r3, r1
 800641e:	f842 0b04 	str.w	r0, [r2], #4
 8006422:	d1f9      	bne.n	8006418 <ip4_reass+0x90>
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8006424:	f8b5 b006 	ldrh.w	fp, [r5, #6]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8006428:	f3c7 070c 	ubfx	r7, r7, #0, #13
  if (is_last) {
 800642c:	f01b 0b20 	ands.w	fp, fp, #32
  offset = IPH_OFFSET_BYTES(fraghdr);
 8006430:	ea4f 07c7 	mov.w	r7, r7, lsl #3
  if (is_last) {
 8006434:	d10a      	bne.n	800644c <ip4_reass+0xc4>
    u16_t datagram_len = (u16_t)(offset + len);
 8006436:	9b01      	ldr	r3, [sp, #4]
 8006438:	18fb      	adds	r3, r7, r3
 800643a:	b29b      	uxth	r3, r3
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800643c:	429f      	cmp	r7, r3
 800643e:	f200 8137 	bhi.w	80066b0 <ip4_reass+0x328>
 8006442:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8006446:	4293      	cmp	r3, r2
 8006448:	f200 8132 	bhi.w	80066b0 <ip4_reass+0x328>
  fraghdr = (struct ip_hdr *)new_p->payload;
 800644c:	f8d8 5004 	ldr.w	r5, [r8, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8006450:	8868      	ldrh	r0, [r5, #2]
 8006452:	f7fd ff23 	bl	800429c <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 8006456:	782b      	ldrb	r3, [r5, #0]
 8006458:	f003 030f 	and.w	r3, r3, #15
  if (hlen > len) {
 800645c:	009b      	lsls	r3, r3, #2
 800645e:	4298      	cmp	r0, r3
 8006460:	f0c0 8126 	bcc.w	80066b0 <ip4_reass+0x328>
  len = (u16_t)(len - hlen);
 8006464:	1ac3      	subs	r3, r0, r3
  offset = IPH_OFFSET_BYTES(fraghdr);
 8006466:	88e8      	ldrh	r0, [r5, #6]
  iprh->next_pbuf = NULL;
 8006468:	2500      	movs	r5, #0
  len = (u16_t)(len - hlen);
 800646a:	fa1f f983 	uxth.w	r9, r3
  offset = IPH_OFFSET_BYTES(fraghdr);
 800646e:	f7fd ff15 	bl	800429c <lwip_htons>
 8006472:	f3c0 000c 	ubfx	r0, r0, #0, #13
  iprh = (struct ip_reass_helper *)new_p->payload;
 8006476:	f8d8 6004 	ldr.w	r6, [r8, #4]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800647a:	00c0      	lsls	r0, r0, #3
  iprh->next_pbuf = NULL;
 800647c:	7035      	strb	r5, [r6, #0]
  iprh->end = (u16_t)(offset + len);
 800647e:	eb09 0300 	add.w	r3, r9, r0
  iprh->next_pbuf = NULL;
 8006482:	7075      	strb	r5, [r6, #1]
 8006484:	70b5      	strb	r5, [r6, #2]
  iprh->end = (u16_t)(offset + len);
 8006486:	b29b      	uxth	r3, r3
  iprh->next_pbuf = NULL;
 8006488:	70f5      	strb	r5, [r6, #3]
  iprh->start = offset;
 800648a:	80b0      	strh	r0, [r6, #4]
  if (iprh->end < offset) {
 800648c:	4298      	cmp	r0, r3
  iprh->end = (u16_t)(offset + len);
 800648e:	80f3      	strh	r3, [r6, #6]
  if (iprh->end < offset) {
 8006490:	f200 810e 	bhi.w	80066b0 <ip4_reass+0x328>
  for (q = ipr->p; q != NULL;) {
 8006494:	f8d4 e004 	ldr.w	lr, [r4, #4]
  int valid = 1;
 8006498:	f04f 0901 	mov.w	r9, #1
  for (q = ipr->p; q != NULL;) {
 800649c:	4672      	mov	r2, lr
 800649e:	bb52      	cbnz	r2, 80064f6 <ip4_reass+0x16e>
    if (iprh_prev != NULL) {
 80064a0:	2d00      	cmp	r5, #0
 80064a2:	f040 8093 	bne.w	80065cc <ip4_reass+0x244>
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80064a6:	f1be 0f00 	cmp.w	lr, #0
 80064aa:	d07d      	beq.n	80065a8 <ip4_reass+0x220>
 80064ac:	4b79      	ldr	r3, [pc, #484]	; (8006694 <ip4_reass+0x30c>)
 80064ae:	f240 12bf 	movw	r2, #447	; 0x1bf
 80064b2:	4979      	ldr	r1, [pc, #484]	; (8006698 <ip4_reass+0x310>)
 80064b4:	4879      	ldr	r0, [pc, #484]	; (800669c <ip4_reass+0x314>)
 80064b6:	f005 fe45 	bl	800c144 <iprintf>
 80064ba:	e075      	b.n	80065a8 <ip4_reass+0x220>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80064bc:	4601      	mov	r1, r0
 80064be:	4628      	mov	r0, r5
 80064c0:	f7ff fee2 	bl	8006288 <ip_reass_remove_oldest_datagram>
 80064c4:	b118      	cbz	r0, 80064ce <ip4_reass+0x146>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80064c6:	8823      	ldrh	r3, [r4, #0]
 80064c8:	4453      	add	r3, sl
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80064ca:	2b0a      	cmp	r3, #10
 80064cc:	dd80      	ble.n	80063d0 <ip4_reass+0x48>
  pbuf_free(p);
 80064ce:	4640      	mov	r0, r8
 80064d0:	f000 ff26 	bl	8007320 <pbuf_free>
  return NULL;
 80064d4:	2600      	movs	r6, #0
 80064d6:	e0d5      	b.n	8006684 <ip4_reass+0x2fc>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80064d8:	68eb      	ldr	r3, [r5, #12]
 80064da:	6962      	ldr	r2, [r4, #20]
 80064dc:	429a      	cmp	r2, r3
 80064de:	d108      	bne.n	80064f2 <ip4_reass+0x16a>
 80064e0:	692b      	ldr	r3, [r5, #16]
 80064e2:	69a2      	ldr	r2, [r4, #24]
 80064e4:	429a      	cmp	r2, r3
 80064e6:	d104      	bne.n	80064f2 <ip4_reass+0x16a>
 80064e8:	89a2      	ldrh	r2, [r4, #12]
 80064ea:	88ab      	ldrh	r3, [r5, #4]
 80064ec:	429a      	cmp	r2, r3
 80064ee:	f000 80f3 	beq.w	80066d8 <ip4_reass+0x350>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80064f2:	6824      	ldr	r4, [r4, #0]
 80064f4:	e76e      	b.n	80063d4 <ip4_reass+0x4c>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80064f6:	f8d2 c004 	ldr.w	ip, [r2, #4]
    if (iprh->start < iprh_tmp->start) {
 80064fa:	f8bc 1004 	ldrh.w	r1, [ip, #4]
 80064fe:	4288      	cmp	r0, r1
 8006500:	d255      	bcs.n	80065ae <ip4_reass+0x226>
      iprh->next_pbuf = q;
 8006502:	6032      	str	r2, [r6, #0]
      if (iprh_prev != NULL) {
 8006504:	2d00      	cmp	r5, #0
 8006506:	d04c      	beq.n	80065a2 <ip4_reass+0x21a>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8006508:	88ea      	ldrh	r2, [r5, #6]
 800650a:	4290      	cmp	r0, r2
 800650c:	f0c0 80d0 	bcc.w	80066b0 <ip4_reass+0x328>
 8006510:	428b      	cmp	r3, r1
 8006512:	f200 80cd 	bhi.w	80066b0 <ip4_reass+0x328>
        if (iprh_prev->end != iprh->start) {
 8006516:	4290      	cmp	r0, r2
        iprh_prev->next_pbuf = new_p;
 8006518:	f8c5 8000 	str.w	r8, [r5]
      if (iprh_prev->end != iprh->start) {
 800651c:	f040 80fa 	bne.w	8006714 <ip4_reass+0x38c>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8006520:	f1bb 0f00 	cmp.w	fp, #0
 8006524:	d004      	beq.n	8006530 <ip4_reass+0x1a8>
 8006526:	7fa3      	ldrb	r3, [r4, #30]
 8006528:	f013 0301 	ands.w	r3, r3, #1
 800652c:	f000 80f0 	beq.w	8006710 <ip4_reass+0x388>
    if (valid) {
 8006530:	f1b9 0f00 	cmp.w	r9, #0
 8006534:	d15a      	bne.n	80065ec <ip4_reass+0x264>
          q = iprh->next_pbuf;
 8006536:	f04f 0900 	mov.w	r9, #0
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800653a:	4d54      	ldr	r5, [pc, #336]	; (800668c <ip4_reass+0x304>)
 800653c:	882b      	ldrh	r3, [r5, #0]
 800653e:	449a      	add	sl, r3
 8006540:	f8a5 a000 	strh.w	sl, [r5]
  if (is_last) {
 8006544:	f1bb 0f00 	cmp.w	fp, #0
 8006548:	d106      	bne.n	8006558 <ip4_reass+0x1d0>
    u16_t datagram_len = (u16_t)(offset + len);
 800654a:	9b01      	ldr	r3, [sp, #4]
 800654c:	441f      	add	r7, r3
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800654e:	7fa3      	ldrb	r3, [r4, #30]
 8006550:	f043 0301 	orr.w	r3, r3, #1
    ipr->datagram_len = datagram_len;
 8006554:	83a7      	strh	r7, [r4, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8006556:	77a3      	strb	r3, [r4, #30]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8006558:	f1b9 0f01 	cmp.w	r9, #1
 800655c:	d1ba      	bne.n	80064d4 <ip4_reass+0x14c>
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800655e:	6863      	ldr	r3, [r4, #4]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8006560:	f104 011c 	add.w	r1, r4, #28
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8006564:	8ba0      	ldrh	r0, [r4, #28]
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8006566:	685e      	ldr	r6, [r3, #4]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8006568:	f104 0308 	add.w	r3, r4, #8
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800656c:	3014      	adds	r0, #20
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800656e:	6837      	ldr	r7, [r6, #0]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8006570:	4632      	mov	r2, r6
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8006572:	b280      	uxth	r0, r0
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8006574:	f853 eb04 	ldr.w	lr, [r3], #4
 8006578:	428b      	cmp	r3, r1
 800657a:	f842 eb04 	str.w	lr, [r2], #4
 800657e:	d1f9      	bne.n	8006574 <ip4_reass+0x1ec>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8006580:	f7fd fe8c 	bl	800429c <lwip_htons>
    IPH_OFFSET_SET(fraghdr, 0);
 8006584:	2300      	movs	r3, #0
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8006586:	8070      	strh	r0, [r6, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8006588:	71b3      	strb	r3, [r6, #6]
 800658a:	71f3      	strb	r3, [r6, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800658c:	72b3      	strb	r3, [r6, #10]
 800658e:	72f3      	strb	r3, [r6, #11]
    p = ipr->p;
 8006590:	6866      	ldr	r6, [r4, #4]
    while (r != NULL) {
 8006592:	2f00      	cmp	r7, #0
 8006594:	d14f      	bne.n	8006636 <ip4_reass+0x2ae>
    if (ipr == reassdatagrams) {
 8006596:	4b3e      	ldr	r3, [pc, #248]	; (8006690 <ip4_reass+0x308>)
 8006598:	6819      	ldr	r1, [r3, #0]
 800659a:	428c      	cmp	r4, r1
 800659c:	d15c      	bne.n	8006658 <ip4_reass+0x2d0>
      ipr_prev = NULL;
 800659e:	4639      	mov	r1, r7
 80065a0:	e05c      	b.n	800665c <ip4_reass+0x2d4>
        if (iprh->end > iprh_tmp->start) {
 80065a2:	428b      	cmp	r3, r1
 80065a4:	f200 8084 	bhi.w	80066b0 <ip4_reass+0x328>
      ipr->p = new_p;
 80065a8:	f8c4 8004 	str.w	r8, [r4, #4]
 80065ac:	e7b8      	b.n	8006520 <ip4_reass+0x198>
    } else if (iprh->start == iprh_tmp->start) {
 80065ae:	d07f      	beq.n	80066b0 <ip4_reass+0x328>
    } else if (iprh->start < iprh_tmp->end) {
 80065b0:	f8bc 2006 	ldrh.w	r2, [ip, #6]
 80065b4:	4282      	cmp	r2, r0
 80065b6:	d87b      	bhi.n	80066b0 <ip4_reass+0x328>
      if (iprh_prev != NULL) {
 80065b8:	b125      	cbz	r5, 80065c4 <ip4_reass+0x23c>
        if (iprh_prev->end != iprh_tmp->start) {
 80065ba:	88ea      	ldrh	r2, [r5, #6]
          valid = 0;
 80065bc:	428a      	cmp	r2, r1
 80065be:	bf18      	it	ne
 80065c0:	f04f 0900 	movne.w	r9, #0
    q = iprh_tmp->next_pbuf;
 80065c4:	f8dc 2000 	ldr.w	r2, [ip]
 80065c8:	4665      	mov	r5, ip
 80065ca:	e768      	b.n	800649e <ip4_reass+0x116>
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80065cc:	88eb      	ldrh	r3, [r5, #6]
 80065ce:	4283      	cmp	r3, r0
 80065d0:	d906      	bls.n	80065e0 <ip4_reass+0x258>
 80065d2:	4b30      	ldr	r3, [pc, #192]	; (8006694 <ip4_reass+0x30c>)
 80065d4:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80065d8:	4931      	ldr	r1, [pc, #196]	; (80066a0 <ip4_reass+0x318>)
 80065da:	4830      	ldr	r0, [pc, #192]	; (800669c <ip4_reass+0x314>)
 80065dc:	f005 fdb2 	bl	800c144 <iprintf>
      iprh_prev->next_pbuf = new_p;
 80065e0:	f8c5 8000 	str.w	r8, [r5]
      if (iprh_prev->end != iprh->start) {
 80065e4:	88ea      	ldrh	r2, [r5, #6]
 80065e6:	88b3      	ldrh	r3, [r6, #4]
 80065e8:	429a      	cmp	r2, r3
 80065ea:	e797      	b.n	800651c <ip4_reass+0x194>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80065ec:	6863      	ldr	r3, [r4, #4]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d0a1      	beq.n	8006536 <ip4_reass+0x1ae>
 80065f2:	6859      	ldr	r1, [r3, #4]
 80065f4:	888b      	ldrh	r3, [r1, #4]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d19d      	bne.n	8006536 <ip4_reass+0x1ae>
        q = iprh->next_pbuf;
 80065fa:	6833      	ldr	r3, [r6, #0]
        while (q != NULL) {
 80065fc:	b99b      	cbnz	r3, 8006626 <ip4_reass+0x29e>
          LWIP_ASSERT("sanity check",
 80065fe:	42b1      	cmp	r1, r6
 8006600:	d106      	bne.n	8006610 <ip4_reass+0x288>
 8006602:	4b24      	ldr	r3, [pc, #144]	; (8006694 <ip4_reass+0x30c>)
 8006604:	f240 12e1 	movw	r2, #481	; 0x1e1
 8006608:	4926      	ldr	r1, [pc, #152]	; (80066a4 <ip4_reass+0x31c>)
 800660a:	4824      	ldr	r0, [pc, #144]	; (800669c <ip4_reass+0x314>)
 800660c:	f005 fd9a 	bl	800c144 <iprintf>
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8006610:	6833      	ldr	r3, [r6, #0]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d091      	beq.n	800653a <ip4_reass+0x1b2>
 8006616:	4b1f      	ldr	r3, [pc, #124]	; (8006694 <ip4_reass+0x30c>)
 8006618:	f240 12e3 	movw	r2, #483	; 0x1e3
 800661c:	4922      	ldr	r1, [pc, #136]	; (80066a8 <ip4_reass+0x320>)
 800661e:	481f      	ldr	r0, [pc, #124]	; (800669c <ip4_reass+0x314>)
 8006620:	f005 fd90 	bl	800c144 <iprintf>
 8006624:	e789      	b.n	800653a <ip4_reass+0x1b2>
          iprh = (struct ip_reass_helper *)q->payload;
 8006626:	685a      	ldr	r2, [r3, #4]
          if (iprh_prev->end != iprh->start) {
 8006628:	88f0      	ldrh	r0, [r6, #6]
 800662a:	8893      	ldrh	r3, [r2, #4]
 800662c:	4298      	cmp	r0, r3
 800662e:	d182      	bne.n	8006536 <ip4_reass+0x1ae>
          q = iprh->next_pbuf;
 8006630:	6813      	ldr	r3, [r2, #0]
 8006632:	4616      	mov	r6, r2
 8006634:	e7e2      	b.n	80065fc <ip4_reass+0x274>
      iprh = (struct ip_reass_helper *)r->payload;
 8006636:	f8d7 8004 	ldr.w	r8, [r7, #4]
      pbuf_remove_header(r, IP_HLEN);
 800663a:	2114      	movs	r1, #20
 800663c:	4638      	mov	r0, r7
 800663e:	f000 fe3b 	bl	80072b8 <pbuf_remove_header>
      pbuf_cat(p, r);
 8006642:	4639      	mov	r1, r7
 8006644:	4630      	mov	r0, r6
 8006646:	f000 ffd1 	bl	80075ec <pbuf_cat>
      r = iprh->next_pbuf;
 800664a:	f8d8 7000 	ldr.w	r7, [r8]
 800664e:	e7a0      	b.n	8006592 <ip4_reass+0x20a>
        if (ipr_prev->next == ipr) {
 8006650:	680b      	ldr	r3, [r1, #0]
 8006652:	429c      	cmp	r4, r3
 8006654:	d002      	beq.n	800665c <ip4_reass+0x2d4>
 8006656:	4619      	mov	r1, r3
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8006658:	2900      	cmp	r1, #0
 800665a:	d1f9      	bne.n	8006650 <ip4_reass+0x2c8>
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800665c:	4620      	mov	r0, r4
 800665e:	f7ff fd7d 	bl	800615c <ip_reass_dequeue_datagram>
    clen = pbuf_clen(p);
 8006662:	4630      	mov	r0, r6
 8006664:	f000 ff9e 	bl	80075a4 <pbuf_clen>
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8006668:	882b      	ldrh	r3, [r5, #0]
    clen = pbuf_clen(p);
 800666a:	4604      	mov	r4, r0
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800666c:	4283      	cmp	r3, r0
 800666e:	d206      	bcs.n	800667e <ip4_reass+0x2f6>
 8006670:	4b08      	ldr	r3, [pc, #32]	; (8006694 <ip4_reass+0x30c>)
 8006672:	f240 229b 	movw	r2, #667	; 0x29b
 8006676:	490d      	ldr	r1, [pc, #52]	; (80066ac <ip4_reass+0x324>)
 8006678:	4808      	ldr	r0, [pc, #32]	; (800669c <ip4_reass+0x314>)
 800667a:	f005 fd63 	bl	800c144 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800667e:	8828      	ldrh	r0, [r5, #0]
 8006680:	1b00      	subs	r0, r0, r4
 8006682:	8028      	strh	r0, [r5, #0]
}
 8006684:	4630      	mov	r0, r6
 8006686:	b003      	add	sp, #12
 8006688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800668c:	20006b2c 	.word	0x20006b2c
 8006690:	20006b30 	.word	0x20006b30
 8006694:	0800e761 	.word	0x0800e761
 8006698:	0800e6c0 	.word	0x0800e6c0
 800669c:	0800d104 	.word	0x0800d104
 80066a0:	0800e6a2 	.word	0x0800e6a2
 80066a4:	0800e6f7 	.word	0x0800e6f7
 80066a8:	0800e704 	.word	0x0800e704
 80066ac:	0800e726 	.word	0x0800e726
  if (ipr->p == NULL) {
 80066b0:	6863      	ldr	r3, [r4, #4]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	f47f af0b 	bne.w	80064ce <ip4_reass+0x146>
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80066b8:	4b1a      	ldr	r3, [pc, #104]	; (8006724 <ip4_reass+0x39c>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	429c      	cmp	r4, r3
 80066be:	d006      	beq.n	80066ce <ip4_reass+0x346>
 80066c0:	4b19      	ldr	r3, [pc, #100]	; (8006728 <ip4_reass+0x3a0>)
 80066c2:	f240 22ab 	movw	r2, #683	; 0x2ab
 80066c6:	4919      	ldr	r1, [pc, #100]	; (800672c <ip4_reass+0x3a4>)
 80066c8:	4819      	ldr	r0, [pc, #100]	; (8006730 <ip4_reass+0x3a8>)
 80066ca:	f005 fd3b 	bl	800c144 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80066ce:	2100      	movs	r1, #0
 80066d0:	4620      	mov	r0, r4
 80066d2:	f7ff fd43 	bl	800615c <ip_reass_dequeue_datagram>
 80066d6:	e6fa      	b.n	80064ce <ip4_reass+0x146>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80066d8:	88e8      	ldrh	r0, [r5, #6]
 80066da:	f7fd fddf 	bl	800429c <lwip_htons>
 80066de:	f3c0 000c 	ubfx	r0, r0, #0, #13
 80066e2:	2800      	cmp	r0, #0
 80066e4:	f47f ae9e 	bne.w	8006424 <ip4_reass+0x9c>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80066e8:	89e0      	ldrh	r0, [r4, #14]
 80066ea:	f7fd fdd7 	bl	800429c <lwip_htons>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80066ee:	f3c0 000c 	ubfx	r0, r0, #0, #13
 80066f2:	2800      	cmp	r0, #0
 80066f4:	f43f ae96 	beq.w	8006424 <ip4_reass+0x9c>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80066f8:	462b      	mov	r3, r5
 80066fa:	f104 0208 	add.w	r2, r4, #8
 80066fe:	f105 0114 	add.w	r1, r5, #20
 8006702:	f853 0b04 	ldr.w	r0, [r3], #4
 8006706:	428b      	cmp	r3, r1
 8006708:	f842 0b04 	str.w	r0, [r2], #4
 800670c:	d1f9      	bne.n	8006702 <ip4_reass+0x37a>
 800670e:	e689      	b.n	8006424 <ip4_reass+0x9c>
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8006710:	4699      	mov	r9, r3
 8006712:	e712      	b.n	800653a <ip4_reass+0x1b2>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8006714:	f1bb 0f00 	cmp.w	fp, #0
 8006718:	f43f af0d 	beq.w	8006536 <ip4_reass+0x1ae>
 800671c:	f04f 0900 	mov.w	r9, #0
 8006720:	e701      	b.n	8006526 <ip4_reass+0x19e>
 8006722:	bf00      	nop
 8006724:	20006b30 	.word	0x20006b30
 8006728:	0800e761 	.word	0x0800e761
 800672c:	0800e741 	.word	0x0800e741
 8006730:	0800d104 	.word	0x0800d104

08006734 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8006734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8006738:	8d0b      	ldrh	r3, [r1, #40]	; 0x28
{
 800673a:	b08d      	sub	sp, #52	; 0x34
 800673c:	4607      	mov	r7, r0
 800673e:	468b      	mov	fp, r1
 8006740:	920a      	str	r2, [sp, #40]	; 0x28
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8006742:	3b14      	subs	r3, #20
 8006744:	2208      	movs	r2, #8
 8006746:	fb93 f3f2 	sdiv	r3, r3, r2
 800674a:	b29b      	uxth	r3, r3
 800674c:	9307      	str	r3, [sp, #28]
  int last;
  u16_t poff = IP_HLEN;
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800674e:	6843      	ldr	r3, [r0, #4]
  iphdr = original_iphdr;
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8006750:	781d      	ldrb	r5, [r3, #0]
  original_iphdr = (struct ip_hdr *)p->payload;
 8006752:	9303      	str	r3, [sp, #12]
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8006754:	f005 050f 	and.w	r5, r5, #15
 8006758:	00ad      	lsls	r5, r5, #2
 800675a:	2d14      	cmp	r5, #20
 800675c:	d109      	bne.n	8006772 <ip4_frag+0x3e>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800675e:	8943      	ldrh	r3, [r0, #10]
 8006760:	2b13      	cmp	r3, #19
 8006762:	d809      	bhi.n	8006778 <ip4_frag+0x44>
 8006764:	4b5e      	ldr	r3, [pc, #376]	; (80068e0 <ip4_frag+0x1ac>)
 8006766:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800676a:	495e      	ldr	r1, [pc, #376]	; (80068e4 <ip4_frag+0x1b0>)
 800676c:	485e      	ldr	r0, [pc, #376]	; (80068e8 <ip4_frag+0x1b4>)
 800676e:	f005 fce9 	bl	800c144 <iprintf>
    return ERR_VAL;
 8006772:	f06f 0005 	mvn.w	r0, #5
 8006776:	e013      	b.n	80067a0 <ip4_frag+0x6c>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8006778:	9b03      	ldr	r3, [sp, #12]
  u16_t newpbuflen = 0;
 800677a:	2600      	movs	r6, #0
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800677c:	88d8      	ldrh	r0, [r3, #6]
 800677e:	f7fd fd8d 	bl	800429c <lwip_htons>
  ofo = tmp & IP_OFFMASK;
 8006782:	f3c0 030c 	ubfx	r3, r0, #0, #13
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;

  left = (u16_t)(p->tot_len - IP_HLEN);
 8006786:	893c      	ldrh	r4, [r7, #8]
  ofo = tmp & IP_OFFMASK;
 8006788:	9305      	str	r3, [sp, #20]
 800678a:	f400 5300 	and.w	r3, r0, #8192	; 0x2000
  left = (u16_t)(p->tot_len - IP_HLEN);
 800678e:	3c14      	subs	r4, #20
 8006790:	9308      	str	r3, [sp, #32]

  while (left) {
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8006792:	9b07      	ldr	r3, [sp, #28]
  left = (u16_t)(p->tot_len - IP_HLEN);
 8006794:	b2a4      	uxth	r4, r4
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8006796:	00db      	lsls	r3, r3, #3
 8006798:	b29b      	uxth	r3, r3
 800679a:	9309      	str	r3, [sp, #36]	; 0x24
  while (left) {
 800679c:	b91c      	cbnz	r4, 80067a6 <ip4_frag+0x72>
    pbuf_free(rambuf);
    left = (u16_t)(left - fragsize);
    ofo = (u16_t)(ofo + nfb);
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800679e:	4620      	mov	r0, r4
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
}
 80067a0:	b00d      	add	sp, #52	; 0x34
 80067a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80067a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80067a8:	f44f 7220 	mov.w	r2, #640	; 0x280
 80067ac:	2114      	movs	r1, #20
 80067ae:	200e      	movs	r0, #14
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80067b0:	42a3      	cmp	r3, r4
 80067b2:	bf28      	it	cs
 80067b4:	4623      	movcs	r3, r4
 80067b6:	9306      	str	r3, [sp, #24]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80067b8:	f000 fe1a 	bl	80073f0 <pbuf_alloc>
    if (rambuf == NULL) {
 80067bc:	4680      	mov	r8, r0
 80067be:	2800      	cmp	r0, #0
 80067c0:	d037      	beq.n	8006832 <ip4_frag+0xfe>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80067c2:	8943      	ldrh	r3, [r0, #10]
 80067c4:	2b13      	cmp	r3, #19
 80067c6:	d806      	bhi.n	80067d6 <ip4_frag+0xa2>
 80067c8:	4b45      	ldr	r3, [pc, #276]	; (80068e0 <ip4_frag+0x1ac>)
 80067ca:	f240 3225 	movw	r2, #805	; 0x325
 80067ce:	4947      	ldr	r1, [pc, #284]	; (80068ec <ip4_frag+0x1b8>)
 80067d0:	4845      	ldr	r0, [pc, #276]	; (80068e8 <ip4_frag+0x1b4>)
 80067d2:	f005 fcb7 	bl	800c144 <iprintf>
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80067d6:	9b03      	ldr	r3, [sp, #12]
 80067d8:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80067dc:	4619      	mov	r1, r3
 80067de:	3114      	adds	r1, #20
 80067e0:	f853 0b04 	ldr.w	r0, [r3], #4
 80067e4:	428b      	cmp	r3, r1
 80067e6:	f842 0b04 	str.w	r0, [r2], #4
 80067ea:	d1f9      	bne.n	80067e0 <ip4_frag+0xac>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80067ec:	f8d8 3004 	ldr.w	r3, [r8, #4]
    left_to_copy = fragsize;
 80067f0:	f8dd 9018 	ldr.w	r9, [sp, #24]
    iphdr = (struct ip_hdr *)rambuf->payload;
 80067f4:	9304      	str	r3, [sp, #16]
    while (left_to_copy) {
 80067f6:	f1b9 0f00 	cmp.w	r9, #0
 80067fa:	d040      	beq.n	800687e <ip4_frag+0x14a>
      u16_t plen = (u16_t)(p->len - poff);
 80067fc:	897b      	ldrh	r3, [r7, #10]
 80067fe:	1b5e      	subs	r6, r3, r5
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8006800:	429d      	cmp	r5, r3
      u16_t plen = (u16_t)(p->len - poff);
 8006802:	b2b6      	uxth	r6, r6
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8006804:	d906      	bls.n	8006814 <ip4_frag+0xe0>
 8006806:	4b36      	ldr	r3, [pc, #216]	; (80068e0 <ip4_frag+0x1ac>)
 8006808:	f240 322d 	movw	r2, #813	; 0x32d
 800680c:	4938      	ldr	r1, [pc, #224]	; (80068f0 <ip4_frag+0x1bc>)
 800680e:	4836      	ldr	r0, [pc, #216]	; (80068e8 <ip4_frag+0x1b4>)
 8006810:	f005 fc98 	bl	800c144 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8006814:	454e      	cmp	r6, r9
 8006816:	bf28      	it	cs
 8006818:	464e      	movcs	r6, r9
      if (!newpbuflen) {
 800681a:	b916      	cbnz	r6, 8006822 <ip4_frag+0xee>
        p = p->next;
 800681c:	683f      	ldr	r7, [r7, #0]
        poff = 0;
 800681e:	2500      	movs	r5, #0
 8006820:	e7e9      	b.n	80067f6 <ip4_frag+0xc2>
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8006822:	2005      	movs	r0, #5
 8006824:	f000 fb2e 	bl	8006e84 <memp_malloc>
      if (pcr == NULL) {
 8006828:	4682      	mov	sl, r0
 800682a:	b928      	cbnz	r0, 8006838 <ip4_frag+0x104>
        pbuf_free(rambuf);
 800682c:	4640      	mov	r0, r8
 800682e:	f000 fd77 	bl	8007320 <pbuf_free>
  return ERR_MEM;
 8006832:	f04f 30ff 	mov.w	r0, #4294967295
 8006836:	e7b3      	b.n	80067a0 <ip4_frag+0x6c>
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8006838:	9601      	str	r6, [sp, #4]
 800683a:	2241      	movs	r2, #65	; 0x41
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	4631      	mov	r1, r6
 8006840:	442b      	add	r3, r5
 8006842:	9300      	str	r3, [sp, #0]
 8006844:	4603      	mov	r3, r0
 8006846:	2000      	movs	r0, #0
 8006848:	f000 fd18 	bl	800727c <pbuf_alloced_custom>
      if (newpbuf == NULL) {
 800684c:	b918      	cbnz	r0, 8006856 <ip4_frag+0x122>
        ip_frag_free_pbuf_custom_ref(pcr);
 800684e:	4650      	mov	r0, sl
 8006850:	f7ff fd56 	bl	8006300 <ip_frag_free_pbuf_custom_ref>
 8006854:	e7ea      	b.n	800682c <ip4_frag+0xf8>
 8006856:	900b      	str	r0, [sp, #44]	; 0x2c
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8006858:	eba9 0906 	sub.w	r9, r9, r6
      pbuf_ref(p);
 800685c:	4638      	mov	r0, r7
 800685e:	f000 fea9 	bl	80075b4 <pbuf_ref>
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8006862:	4b24      	ldr	r3, [pc, #144]	; (80068f4 <ip4_frag+0x1c0>)
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8006864:	fa1f f989 	uxth.w	r9, r9
      pcr->original = p;
 8006868:	f8ca 7014 	str.w	r7, [sl, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800686c:	f8ca 3010 	str.w	r3, [sl, #16]
      pbuf_cat(rambuf, newpbuf);
 8006870:	4640      	mov	r0, r8
 8006872:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006874:	f000 feba 	bl	80075ec <pbuf_cat>
      if (left_to_copy) {
 8006878:	f1b9 0f00 	cmp.w	r9, #0
 800687c:	d1ce      	bne.n	800681c <ip4_frag+0xe8>
    tmp = (IP_OFFMASK & (ofo));
 800687e:	9b05      	ldr	r3, [sp, #20]
    poff = (u16_t)(poff + newpbuflen);
 8006880:	4435      	add	r5, r6
    tmp = (IP_OFFMASK & (ofo));
 8006882:	f3c3 000c 	ubfx	r0, r3, #0, #13
    last = (left <= netif->mtu - IP_HLEN);
 8006886:	f8bb 3028 	ldrh.w	r3, [fp, #40]	; 0x28
    poff = (u16_t)(poff + newpbuflen);
 800688a:	b2ad      	uxth	r5, r5
    last = (left <= netif->mtu - IP_HLEN);
 800688c:	3b13      	subs	r3, #19
    if (!last || mf_set) {
 800688e:	42a3      	cmp	r3, r4
 8006890:	dd01      	ble.n	8006896 <ip4_frag+0x162>
 8006892:	9b08      	ldr	r3, [sp, #32]
 8006894:	b10b      	cbz	r3, 800689a <ip4_frag+0x166>
      tmp = tmp | IP_MF;
 8006896:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800689a:	f7fd fcff 	bl	800429c <lwip_htons>
 800689e:	9b04      	ldr	r3, [sp, #16]
 80068a0:	80d8      	strh	r0, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80068a2:	9b06      	ldr	r3, [sp, #24]
 80068a4:	f103 0014 	add.w	r0, r3, #20
 80068a8:	b280      	uxth	r0, r0
 80068aa:	f7fd fcf7 	bl	800429c <lwip_htons>
 80068ae:	9b04      	ldr	r3, [sp, #16]
    IPH_CHKSUM_SET(iphdr, 0);
 80068b0:	9a04      	ldr	r2, [sp, #16]
    netif->output(netif, rambuf, dest);
 80068b2:	4641      	mov	r1, r8
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80068b4:	8058      	strh	r0, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80068b6:	2300      	movs	r3, #0
    netif->output(netif, rambuf, dest);
 80068b8:	4658      	mov	r0, fp
    IPH_CHKSUM_SET(iphdr, 0);
 80068ba:	7293      	strb	r3, [r2, #10]
 80068bc:	72d3      	strb	r3, [r2, #11]
    netif->output(netif, rambuf, dest);
 80068be:	f8db 3014 	ldr.w	r3, [fp, #20]
 80068c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80068c4:	4798      	blx	r3
    pbuf_free(rambuf);
 80068c6:	4640      	mov	r0, r8
 80068c8:	f000 fd2a 	bl	8007320 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80068cc:	9b06      	ldr	r3, [sp, #24]
    ofo = (u16_t)(ofo + nfb);
 80068ce:	9a07      	ldr	r2, [sp, #28]
    left = (u16_t)(left - fragsize);
 80068d0:	1ae4      	subs	r4, r4, r3
    ofo = (u16_t)(ofo + nfb);
 80068d2:	9b05      	ldr	r3, [sp, #20]
 80068d4:	4413      	add	r3, r2
    left = (u16_t)(left - fragsize);
 80068d6:	b2a4      	uxth	r4, r4
    ofo = (u16_t)(ofo + nfb);
 80068d8:	b29b      	uxth	r3, r3
 80068da:	9305      	str	r3, [sp, #20]
 80068dc:	e75e      	b.n	800679c <ip4_frag+0x68>
 80068de:	bf00      	nop
 80068e0:	0800e761 	.word	0x0800e761
 80068e4:	0800e658 	.word	0x0800e658
 80068e8:	0800d104 	.word	0x0800d104
 80068ec:	0800e673 	.word	0x0800e673
 80068f0:	0800e693 	.word	0x0800e693
 80068f4:	0800632d 	.word	0x0800632d

080068f8 <mem_init>:

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80068f8:	4b11      	ldr	r3, [pc, #68]	; (8006940 <mem_init+0x48>)
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
  mem->next = MEM_SIZE_ALIGNED;
 80068fa:	f44f 5120 	mov.w	r1, #10240	; 0x2800
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80068fe:	4a11      	ldr	r2, [pc, #68]	; (8006944 <mem_init+0x4c>)
 8006900:	f023 0303 	bic.w	r3, r3, #3
  mem->prev = 0;
  mem->used = 0;
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8006904:	4810      	ldr	r0, [pc, #64]	; (8006948 <mem_init+0x50>)
{
 8006906:	b510      	push	{r4, lr}
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8006908:	6013      	str	r3, [r2, #0]
  mem->prev = 0;
 800690a:	2200      	movs	r2, #0
  mem->next = MEM_SIZE_ALIGNED;
 800690c:	8019      	strh	r1, [r3, #0]
  mem->prev = 0;
 800690e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8006910:	711a      	strb	r2, [r3, #4]
  return (struct mem *)(void *)&ram[ptr];
 8006912:	185a      	adds	r2, r3, r1
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8006914:	6002      	str	r2, [r0, #0]
  ram_end->used = 1;
 8006916:	2001      	movs	r0, #1
  ram_end->next = MEM_SIZE_ALIGNED;
 8006918:	8011      	strh	r1, [r2, #0]
  ram_end->used = 1;
 800691a:	7110      	strb	r0, [r2, #4]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800691c:	8051      	strh	r1, [r2, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800691e:	4a0b      	ldr	r2, [pc, #44]	; (800694c <mem_init+0x54>)

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8006920:	480b      	ldr	r0, [pc, #44]	; (8006950 <mem_init+0x58>)
  lfree = (struct mem *)(void *)ram;
 8006922:	6013      	str	r3, [r2, #0]
  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8006924:	f004 feae 	bl	800b684 <sys_mutex_new>
 8006928:	b140      	cbz	r0, 800693c <mem_init+0x44>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800692a:	4b0a      	ldr	r3, [pc, #40]	; (8006954 <mem_init+0x5c>)
 800692c:	f240 221f 	movw	r2, #543	; 0x21f
 8006930:	4909      	ldr	r1, [pc, #36]	; (8006958 <mem_init+0x60>)
 8006932:	480a      	ldr	r0, [pc, #40]	; (800695c <mem_init+0x64>)
  }
}
 8006934:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8006938:	f005 bc04 	b.w	800c144 <iprintf>
 800693c:	bd10      	pop	{r4, pc}
 800693e:	bf00      	nop
 8006940:	20006e73 	.word	0x20006e73
 8006944:	20006b3c 	.word	0x20006b3c
 8006948:	20006b40 	.word	0x20006b40
 800694c:	20006b34 	.word	0x20006b34
 8006950:	20006b38 	.word	0x20006b38
 8006954:	0800e924 	.word	0x0800e924
 8006958:	0800e953 	.word	0x0800e953
 800695c:	0800d104 	.word	0x0800d104

08006960 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8006960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8006964:	4604      	mov	r4, r0
 8006966:	2800      	cmp	r0, #0
 8006968:	f000 80b6 	beq.w	8006ad8 <mem_free+0x178>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800696c:	0783      	lsls	r3, r0, #30
 800696e:	d00c      	beq.n	800698a <mem_free+0x2a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8006970:	4b5a      	ldr	r3, [pc, #360]	; (8006adc <mem_free+0x17c>)
 8006972:	f240 2273 	movw	r2, #627	; 0x273
 8006976:	495a      	ldr	r1, [pc, #360]	; (8006ae0 <mem_free+0x180>)
  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8006978:	485a      	ldr	r0, [pc, #360]	; (8006ae4 <mem_free+0x184>)
 800697a:	f005 fbe3 	bl	800c144 <iprintf>
  if (!mem_link_valid(mem)) {
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800697e:	f004 feaf 	bl	800b6e0 <sys_arch_protect>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8006982:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    MEM_STATS_INC_LOCKED(illegal);
 8006986:	f004 beb7 	b.w	800b6f8 <sys_arch_unprotect>
  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800698a:	4b57      	ldr	r3, [pc, #348]	; (8006ae8 <mem_free+0x188>)
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800698c:	f1a0 0508 	sub.w	r5, r0, #8
  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8006990:	681a      	ldr	r2, [r3, #0]
 8006992:	4698      	mov	r8, r3
 8006994:	4295      	cmp	r5, r2
 8006996:	d305      	bcc.n	80069a4 <mem_free+0x44>
 8006998:	4f54      	ldr	r7, [pc, #336]	; (8006aec <mem_free+0x18c>)
 800699a:	f100 030c 	add.w	r3, r0, #12
 800699e:	683a      	ldr	r2, [r7, #0]
 80069a0:	429a      	cmp	r2, r3
 80069a2:	d204      	bcs.n	80069ae <mem_free+0x4e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80069a4:	4b4d      	ldr	r3, [pc, #308]	; (8006adc <mem_free+0x17c>)
 80069a6:	f240 227f 	movw	r2, #639	; 0x27f
 80069aa:	4951      	ldr	r1, [pc, #324]	; (8006af0 <mem_free+0x190>)
 80069ac:	e7e4      	b.n	8006978 <mem_free+0x18>
  LWIP_MEM_FREE_PROTECT();
 80069ae:	4851      	ldr	r0, [pc, #324]	; (8006af4 <mem_free+0x194>)
 80069b0:	f004 fe77 	bl	800b6a2 <sys_mutex_lock>
  if (!mem->used) {
 80069b4:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 80069b8:	b953      	cbnz	r3, 80069d0 <mem_free+0x70>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80069ba:	4b48      	ldr	r3, [pc, #288]	; (8006adc <mem_free+0x17c>)
 80069bc:	f44f 7223 	mov.w	r2, #652	; 0x28c
 80069c0:	494d      	ldr	r1, [pc, #308]	; (8006af8 <mem_free+0x198>)
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80069c2:	4848      	ldr	r0, [pc, #288]	; (8006ae4 <mem_free+0x184>)
 80069c4:	f005 fbbe 	bl	800c144 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 80069c8:	484a      	ldr	r0, [pc, #296]	; (8006af4 <mem_free+0x194>)
 80069ca:	f004 fe6f 	bl	800b6ac <sys_mutex_unlock>
 80069ce:	e7d6      	b.n	800697e <mem_free+0x1e>
  nmem = ptr_to_mem(mem->next);
 80069d0:	f834 2c08 	ldrh.w	r2, [r4, #-8]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80069d4:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
 80069d8:	d879      	bhi.n	8006ace <mem_free+0x16e>
  pmem = ptr_to_mem(mem->prev);
 80069da:	f834 0c06 	ldrh.w	r0, [r4, #-6]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80069de:	f5b0 5f20 	cmp.w	r0, #10240	; 0x2800
 80069e2:	d874      	bhi.n	8006ace <mem_free+0x16e>
  return (mem_size_t)((u8_t *)mem - ram);
 80069e4:	f8d8 1000 	ldr.w	r1, [r8]
 80069e8:	1a6b      	subs	r3, r5, r1
 80069ea:	b29b      	uxth	r3, r3
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80069ec:	4283      	cmp	r3, r0
 80069ee:	d002      	beq.n	80069f6 <mem_free+0x96>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80069f0:	5a08      	ldrh	r0, [r1, r0]
 80069f2:	4298      	cmp	r0, r3
 80069f4:	d16b      	bne.n	8006ace <mem_free+0x16e>
  return (struct mem *)(void *)&ram[ptr];
 80069f6:	440a      	add	r2, r1
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80069f8:	6838      	ldr	r0, [r7, #0]
 80069fa:	4282      	cmp	r2, r0
 80069fc:	d002      	beq.n	8006a04 <mem_free+0xa4>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80069fe:	8852      	ldrh	r2, [r2, #2]
 8006a00:	429a      	cmp	r2, r3
 8006a02:	d164      	bne.n	8006ace <mem_free+0x16e>
  mem->used = 0;
 8006a04:	2300      	movs	r3, #0
  if (mem < lfree) {
 8006a06:	4e3d      	ldr	r6, [pc, #244]	; (8006afc <mem_free+0x19c>)
  mem->used = 0;
 8006a08:	f804 3c04 	strb.w	r3, [r4, #-4]
  if (mem < lfree) {
 8006a0c:	6833      	ldr	r3, [r6, #0]
 8006a0e:	429d      	cmp	r5, r3
 8006a10:	d200      	bcs.n	8006a14 <mem_free+0xb4>
    lfree = mem;
 8006a12:	6035      	str	r5, [r6, #0]
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8006a14:	428d      	cmp	r5, r1
 8006a16:	d206      	bcs.n	8006a26 <mem_free+0xc6>
 8006a18:	4b30      	ldr	r3, [pc, #192]	; (8006adc <mem_free+0x17c>)
 8006a1a:	f240 12df 	movw	r2, #479	; 0x1df
 8006a1e:	4938      	ldr	r1, [pc, #224]	; (8006b00 <mem_free+0x1a0>)
 8006a20:	4830      	ldr	r0, [pc, #192]	; (8006ae4 <mem_free+0x184>)
 8006a22:	f005 fb8f 	bl	800c144 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	429d      	cmp	r5, r3
 8006a2a:	d306      	bcc.n	8006a3a <mem_free+0xda>
 8006a2c:	4b2b      	ldr	r3, [pc, #172]	; (8006adc <mem_free+0x17c>)
 8006a2e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8006a32:	4934      	ldr	r1, [pc, #208]	; (8006b04 <mem_free+0x1a4>)
 8006a34:	482b      	ldr	r0, [pc, #172]	; (8006ae4 <mem_free+0x184>)
 8006a36:	f005 fb85 	bl	800c144 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8006a3a:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 8006a3e:	b133      	cbz	r3, 8006a4e <mem_free+0xee>
 8006a40:	4b26      	ldr	r3, [pc, #152]	; (8006adc <mem_free+0x17c>)
 8006a42:	f240 12e1 	movw	r2, #481	; 0x1e1
 8006a46:	4930      	ldr	r1, [pc, #192]	; (8006b08 <mem_free+0x1a8>)
 8006a48:	4826      	ldr	r0, [pc, #152]	; (8006ae4 <mem_free+0x184>)
 8006a4a:	f005 fb7b 	bl	800c144 <iprintf>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8006a4e:	f834 3c08 	ldrh.w	r3, [r4, #-8]
 8006a52:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8006a56:	d906      	bls.n	8006a66 <mem_free+0x106>
 8006a58:	4b20      	ldr	r3, [pc, #128]	; (8006adc <mem_free+0x17c>)
 8006a5a:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8006a5e:	492b      	ldr	r1, [pc, #172]	; (8006b0c <mem_free+0x1ac>)
 8006a60:	4820      	ldr	r0, [pc, #128]	; (8006ae4 <mem_free+0x184>)
 8006a62:	f005 fb6f 	bl	800c144 <iprintf>
  return (struct mem *)(void *)&ram[ptr];
 8006a66:	f8d8 3000 	ldr.w	r3, [r8]
 8006a6a:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 8006a6e:	185a      	adds	r2, r3, r1
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8006a70:	4295      	cmp	r5, r2
 8006a72:	d012      	beq.n	8006a9a <mem_free+0x13a>
 8006a74:	7910      	ldrb	r0, [r2, #4]
 8006a76:	b980      	cbnz	r0, 8006a9a <mem_free+0x13a>
 8006a78:	6838      	ldr	r0, [r7, #0]
 8006a7a:	4282      	cmp	r2, r0
 8006a7c:	d00d      	beq.n	8006a9a <mem_free+0x13a>
    if (lfree == nmem) {
 8006a7e:	6830      	ldr	r0, [r6, #0]
 8006a80:	4282      	cmp	r2, r0
    mem->next = nmem->next;
 8006a82:	5a5a      	ldrh	r2, [r3, r1]
 8006a84:	f824 2c08 	strh.w	r2, [r4, #-8]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8006a88:	5a5a      	ldrh	r2, [r3, r1]
      lfree = mem;
 8006a8a:	bf08      	it	eq
 8006a8c:	6035      	streq	r5, [r6, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8006a8e:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8006a92:	bf1e      	ittt	ne
 8006a94:	18d2      	addne	r2, r2, r3
  return (mem_size_t)((u8_t *)mem - ram);
 8006a96:	1ae9      	subne	r1, r5, r3
 8006a98:	8051      	strhne	r1, [r2, #2]
  pmem = ptr_to_mem(mem->prev);
 8006a9a:	f834 2c06 	ldrh.w	r2, [r4, #-6]
  return (struct mem *)(void *)&ram[ptr];
 8006a9e:	1899      	adds	r1, r3, r2
  if (pmem != mem && pmem->used == 0) {
 8006aa0:	428d      	cmp	r5, r1
 8006aa2:	d00f      	beq.n	8006ac4 <mem_free+0x164>
 8006aa4:	7908      	ldrb	r0, [r1, #4]
 8006aa6:	b968      	cbnz	r0, 8006ac4 <mem_free+0x164>
    if (lfree == mem) {
 8006aa8:	6830      	ldr	r0, [r6, #0]
 8006aaa:	4285      	cmp	r5, r0
      lfree = pmem;
 8006aac:	bf08      	it	eq
 8006aae:	6031      	streq	r1, [r6, #0]
    pmem->next = mem->next;
 8006ab0:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 8006ab4:	5299      	strh	r1, [r3, r2]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8006ab6:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 8006aba:	f5b1 5f20 	cmp.w	r1, #10240	; 0x2800
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8006abe:	bf1c      	itt	ne
 8006ac0:	185b      	addne	r3, r3, r1
 8006ac2:	805a      	strhne	r2, [r3, #2]
  LWIP_MEM_FREE_UNPROTECT();
 8006ac4:	480b      	ldr	r0, [pc, #44]	; (8006af4 <mem_free+0x194>)
}
 8006ac6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_MEM_FREE_UNPROTECT();
 8006aca:	f004 bdef 	b.w	800b6ac <sys_mutex_unlock>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8006ace:	4b03      	ldr	r3, [pc, #12]	; (8006adc <mem_free+0x17c>)
 8006ad0:	f240 2295 	movw	r2, #661	; 0x295
 8006ad4:	490e      	ldr	r1, [pc, #56]	; (8006b10 <mem_free+0x1b0>)
 8006ad6:	e774      	b.n	80069c2 <mem_free+0x62>
 8006ad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006adc:	0800e924 	.word	0x0800e924
 8006ae0:	0800e81c 	.word	0x0800e81c
 8006ae4:	0800d104 	.word	0x0800d104
 8006ae8:	20006b3c 	.word	0x20006b3c
 8006aec:	20006b40 	.word	0x20006b40
 8006af0:	0800e83d 	.word	0x0800e83d
 8006af4:	20006b38 	.word	0x20006b38
 8006af8:	0800e856 	.word	0x0800e856
 8006afc:	20006b34 	.word	0x20006b34
 8006b00:	0800e87c 	.word	0x0800e87c
 8006b04:	0800e893 	.word	0x0800e893
 8006b08:	0800e8ad 	.word	0x0800e8ad
 8006b0c:	0800e8c8 	.word	0x0800e8c8
 8006b10:	0800e8f2 	.word	0x0800e8f2

08006b14 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8006b14:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8006b18:	1ccd      	adds	r5, r1, #3
{
 8006b1a:	4604      	mov	r4, r0
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8006b1c:	f025 0503 	bic.w	r5, r5, #3
 8006b20:	b2ad      	uxth	r5, r5
  if (newsize < MIN_SIZE_ALIGNED) {
 8006b22:	2d0b      	cmp	r5, #11
 8006b24:	d904      	bls.n	8006b30 <mem_trim+0x1c>
    newsize = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8006b26:	f5b5 5f20 	cmp.w	r5, #10240	; 0x2800
 8006b2a:	d902      	bls.n	8006b32 <mem_trim+0x1e>
    return NULL;
 8006b2c:	2400      	movs	r4, #0
 8006b2e:	e01e      	b.n	8006b6e <mem_trim+0x5a>
    newsize = MIN_SIZE_ALIGNED;
 8006b30:	250c      	movs	r5, #12
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8006b32:	42a9      	cmp	r1, r5
 8006b34:	d8fa      	bhi.n	8006b2c <mem_trim+0x18>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8006b36:	4b45      	ldr	r3, [pc, #276]	; (8006c4c <mem_trim+0x138>)
 8006b38:	681a      	ldr	r2, [r3, #0]
 8006b3a:	4698      	mov	r8, r3
 8006b3c:	42a2      	cmp	r2, r4
 8006b3e:	d803      	bhi.n	8006b48 <mem_trim+0x34>
 8006b40:	4b43      	ldr	r3, [pc, #268]	; (8006c50 <mem_trim+0x13c>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	429c      	cmp	r4, r3
 8006b46:	d306      	bcc.n	8006b56 <mem_trim+0x42>
 8006b48:	4b42      	ldr	r3, [pc, #264]	; (8006c54 <mem_trim+0x140>)
 8006b4a:	f240 22d2 	movw	r2, #722	; 0x2d2
 8006b4e:	4942      	ldr	r1, [pc, #264]	; (8006c58 <mem_trim+0x144>)
 8006b50:	4842      	ldr	r0, [pc, #264]	; (8006c5c <mem_trim+0x148>)
 8006b52:	f005 faf7 	bl	800c144 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8006b56:	f8d8 3000 	ldr.w	r3, [r8]
 8006b5a:	429c      	cmp	r4, r3
 8006b5c:	d303      	bcc.n	8006b66 <mem_trim+0x52>
 8006b5e:	4a3c      	ldr	r2, [pc, #240]	; (8006c50 <mem_trim+0x13c>)
 8006b60:	6812      	ldr	r2, [r2, #0]
 8006b62:	4294      	cmp	r4, r2
 8006b64:	d306      	bcc.n	8006b74 <mem_trim+0x60>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8006b66:	f004 fdbb 	bl	800b6e0 <sys_arch_protect>
 8006b6a:	f004 fdc5 	bl	800b6f8 <sys_arch_unprotect>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
}
 8006b6e:	4620      	mov	r0, r4
 8006b70:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8006b74:	f1a4 0608 	sub.w	r6, r4, #8
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8006b78:	f834 7c08 	ldrh.w	r7, [r4, #-8]
  return (mem_size_t)((u8_t *)mem - ram);
 8006b7c:	1af6      	subs	r6, r6, r3
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8006b7e:	3f08      	subs	r7, #8
  return (mem_size_t)((u8_t *)mem - ram);
 8006b80:	b2b6      	uxth	r6, r6
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8006b82:	1bbf      	subs	r7, r7, r6
 8006b84:	b2bf      	uxth	r7, r7
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8006b86:	42af      	cmp	r7, r5
 8006b88:	d226      	bcs.n	8006bd8 <mem_trim+0xc4>
 8006b8a:	4b32      	ldr	r3, [pc, #200]	; (8006c54 <mem_trim+0x140>)
 8006b8c:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8006b90:	4933      	ldr	r1, [pc, #204]	; (8006c60 <mem_trim+0x14c>)
 8006b92:	4832      	ldr	r0, [pc, #200]	; (8006c5c <mem_trim+0x148>)
 8006b94:	f005 fad6 	bl	800c144 <iprintf>
 8006b98:	e7c8      	b.n	8006b2c <mem_trim+0x18>
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8006b9a:	f105 0314 	add.w	r3, r5, #20
 8006b9e:	42bb      	cmp	r3, r7
 8006ba0:	d84f      	bhi.n	8006c42 <mem_trim+0x12e>
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8006ba2:	f106 0308 	add.w	r3, r6, #8
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8006ba6:	f5b9 5f20 	cmp.w	r9, #10240	; 0x2800
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8006baa:	441d      	add	r5, r3
 8006bac:	b2ad      	uxth	r5, r5
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8006bae:	d106      	bne.n	8006bbe <mem_trim+0xaa>
 8006bb0:	4b28      	ldr	r3, [pc, #160]	; (8006c54 <mem_trim+0x140>)
 8006bb2:	f240 3216 	movw	r2, #790	; 0x316
 8006bb6:	492b      	ldr	r1, [pc, #172]	; (8006c64 <mem_trim+0x150>)
 8006bb8:	4828      	ldr	r0, [pc, #160]	; (8006c5c <mem_trim+0x148>)
 8006bba:	f005 fac3 	bl	800c144 <iprintf>
    if (mem2 < lfree) {
 8006bbe:	492a      	ldr	r1, [pc, #168]	; (8006c68 <mem_trim+0x154>)
  return (struct mem *)(void *)&ram[ptr];
 8006bc0:	f8d8 3000 	ldr.w	r3, [r8]
    if (mem2 < lfree) {
 8006bc4:	6808      	ldr	r0, [r1, #0]
  return (struct mem *)(void *)&ram[ptr];
 8006bc6:	195a      	adds	r2, r3, r5
    if (mem2 < lfree) {
 8006bc8:	4290      	cmp	r0, r2
      lfree = mem2;
 8006bca:	bf88      	it	hi
 8006bcc:	600a      	strhi	r2, [r1, #0]
    mem2->used = 0;
 8006bce:	2100      	movs	r1, #0
 8006bd0:	7111      	strb	r1, [r2, #4]
    mem2->next = mem->next;
 8006bd2:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 8006bd6:	e02a      	b.n	8006c2e <mem_trim+0x11a>
  if (newsize == size) {
 8006bd8:	d0c9      	beq.n	8006b6e <mem_trim+0x5a>
  LWIP_MEM_FREE_PROTECT();
 8006bda:	4824      	ldr	r0, [pc, #144]	; (8006c6c <mem_trim+0x158>)
 8006bdc:	f004 fd61 	bl	800b6a2 <sys_mutex_lock>
  mem2 = ptr_to_mem(mem->next);
 8006be0:	f834 9c08 	ldrh.w	r9, [r4, #-8]
  return (struct mem *)(void *)&ram[ptr];
 8006be4:	f8d8 b000 	ldr.w	fp, [r8]
 8006be8:	eb0b 0a09 	add.w	sl, fp, r9
  if (mem2->used == 0) {
 8006bec:	f89a 3004 	ldrb.w	r3, [sl, #4]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d1d2      	bne.n	8006b9a <mem_trim+0x86>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8006bf4:	f5b9 5f20 	cmp.w	r9, #10240	; 0x2800
 8006bf8:	d106      	bne.n	8006c08 <mem_trim+0xf4>
 8006bfa:	4b16      	ldr	r3, [pc, #88]	; (8006c54 <mem_trim+0x140>)
 8006bfc:	f240 22f5 	movw	r2, #757	; 0x2f5
 8006c00:	4918      	ldr	r1, [pc, #96]	; (8006c64 <mem_trim+0x150>)
 8006c02:	4816      	ldr	r0, [pc, #88]	; (8006c5c <mem_trim+0x148>)
 8006c04:	f005 fa9e 	bl	800c144 <iprintf>
    if (lfree == mem2) {
 8006c08:	4a17      	ldr	r2, [pc, #92]	; (8006c68 <mem_trim+0x154>)
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8006c0a:	f106 0308 	add.w	r3, r6, #8
    mem2->used = 0;
 8006c0e:	2000      	movs	r0, #0
    next = mem2->next;
 8006c10:	f83b 1009 	ldrh.w	r1, [fp, r9]
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8006c14:	441d      	add	r5, r3
    if (lfree == mem2) {
 8006c16:	6813      	ldr	r3, [r2, #0]
 8006c18:	4553      	cmp	r3, sl
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8006c1a:	b2ad      	uxth	r5, r5
  return (struct mem *)(void *)&ram[ptr];
 8006c1c:	bf02      	ittt	eq
 8006c1e:	f8d8 3000 	ldreq.w	r3, [r8]
 8006c22:	195b      	addeq	r3, r3, r5
      lfree = ptr_to_mem(ptr2);
 8006c24:	6013      	streq	r3, [r2, #0]
  return (struct mem *)(void *)&ram[ptr];
 8006c26:	f8d8 3000 	ldr.w	r3, [r8]
 8006c2a:	195a      	adds	r2, r3, r5
    mem2->used = 0;
 8006c2c:	7110      	strb	r0, [r2, #4]
    mem2->next = mem->next;
 8006c2e:	5359      	strh	r1, [r3, r5]
    mem2->prev = ptr;
 8006c30:	8056      	strh	r6, [r2, #2]
    mem->next = ptr2;
 8006c32:	f824 5c08 	strh.w	r5, [r4, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8006c36:	5b5a      	ldrh	r2, [r3, r5]
 8006c38:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
      ptr_to_mem(mem2->next)->prev = ptr2;
 8006c3c:	bf1c      	itt	ne
 8006c3e:	189b      	addne	r3, r3, r2
 8006c40:	805d      	strhne	r5, [r3, #2]
  LWIP_MEM_FREE_UNPROTECT();
 8006c42:	480a      	ldr	r0, [pc, #40]	; (8006c6c <mem_trim+0x158>)
 8006c44:	f004 fd32 	bl	800b6ac <sys_mutex_unlock>
  return rmem;
 8006c48:	e791      	b.n	8006b6e <mem_trim+0x5a>
 8006c4a:	bf00      	nop
 8006c4c:	20006b3c 	.word	0x20006b3c
 8006c50:	20006b40 	.word	0x20006b40
 8006c54:	0800e924 	.word	0x0800e924
 8006c58:	0800ea09 	.word	0x0800ea09
 8006c5c:	0800d104 	.word	0x0800d104
 8006c60:	0800ea20 	.word	0x0800ea20
 8006c64:	0800ea40 	.word	0x0800ea40
 8006c68:	20006b34 	.word	0x20006b34
 8006c6c:	20006b38 	.word	0x20006b38

08006c70 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8006c70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8006c74:	b148      	cbz	r0, 8006c8a <mem_malloc+0x1a>
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8006c76:	1cc5      	adds	r5, r0, #3
 8006c78:	f025 0503 	bic.w	r5, r5, #3
 8006c7c:	b2ad      	uxth	r5, r5
  if (size < MIN_SIZE_ALIGNED) {
 8006c7e:	2d0b      	cmp	r5, #11
 8006c80:	d905      	bls.n	8006c8e <mem_malloc+0x1e>
    size = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8006c82:	f5b5 5f20 	cmp.w	r5, #10240	; 0x2800
 8006c86:	d903      	bls.n	8006c90 <mem_malloc+0x20>
    return NULL;
 8006c88:	2000      	movs	r0, #0
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
}
 8006c8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    size = MIN_SIZE_ALIGNED;
 8006c8e:	250c      	movs	r5, #12
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8006c90:	42a8      	cmp	r0, r5
 8006c92:	d8f9      	bhi.n	8006c88 <mem_malloc+0x18>
  sys_mutex_lock(&mem_mutex);
 8006c94:	4842      	ldr	r0, [pc, #264]	; (8006da0 <mem_malloc+0x130>)
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8006c96:	f06f 0707 	mvn.w	r7, #7
  sys_mutex_lock(&mem_mutex);
 8006c9a:	f004 fd02 	bl	800b6a2 <sys_mutex_lock>
  return (mem_size_t)((u8_t *)mem - ram);
 8006c9e:	4941      	ldr	r1, [pc, #260]	; (8006da4 <mem_malloc+0x134>)
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8006ca0:	4b41      	ldr	r3, [pc, #260]	; (8006da8 <mem_malloc+0x138>)
 8006ca2:	f5c5 5020 	rsb	r0, r5, #10240	; 0x2800
  return (mem_size_t)((u8_t *)mem - ram);
 8006ca6:	680a      	ldr	r2, [r1, #0]
 8006ca8:	4689      	mov	r9, r1
 8006caa:	681e      	ldr	r6, [r3, #0]
 8006cac:	4698      	mov	r8, r3
 8006cae:	1ab6      	subs	r6, r6, r2
 8006cb0:	b2b6      	uxth	r6, r6
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8006cb2:	4286      	cmp	r6, r0
 8006cb4:	d303      	bcc.n	8006cbe <mem_malloc+0x4e>
  sys_mutex_unlock(&mem_mutex);
 8006cb6:	483a      	ldr	r0, [pc, #232]	; (8006da0 <mem_malloc+0x130>)
 8006cb8:	f004 fcf8 	bl	800b6ac <sys_mutex_unlock>
 8006cbc:	e7e4      	b.n	8006c88 <mem_malloc+0x18>
  return (struct mem *)(void *)&ram[ptr];
 8006cbe:	1994      	adds	r4, r2, r6
 8006cc0:	5b91      	ldrh	r1, [r2, r6]
      if ((!mem->used) &&
 8006cc2:	7923      	ldrb	r3, [r4, #4]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d168      	bne.n	8006d9a <mem_malloc+0x12a>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8006cc8:	1bbb      	subs	r3, r7, r6
 8006cca:	440b      	add	r3, r1
      if ((!mem->used) &&
 8006ccc:	429d      	cmp	r5, r3
 8006cce:	d864      	bhi.n	8006d9a <mem_malloc+0x12a>
        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8006cd0:	f105 0214 	add.w	r2, r5, #20
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d35a      	bcc.n	8006d8e <mem_malloc+0x11e>
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8006cd8:	f105 0708 	add.w	r7, r5, #8
 8006cdc:	4437      	add	r7, r6
 8006cde:	b2bf      	uxth	r7, r7
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8006ce0:	f5b7 5f20 	cmp.w	r7, #10240	; 0x2800
 8006ce4:	d106      	bne.n	8006cf4 <mem_malloc+0x84>
 8006ce6:	4b31      	ldr	r3, [pc, #196]	; (8006dac <mem_malloc+0x13c>)
 8006ce8:	f240 3287 	movw	r2, #903	; 0x387
 8006cec:	4930      	ldr	r1, [pc, #192]	; (8006db0 <mem_malloc+0x140>)
 8006cee:	4831      	ldr	r0, [pc, #196]	; (8006db4 <mem_malloc+0x144>)
 8006cf0:	f005 fa28 	bl	800c144 <iprintf>
  return (struct mem *)(void *)&ram[ptr];
 8006cf4:	f8d9 3000 	ldr.w	r3, [r9]
          mem2->used = 0;
 8006cf8:	2100      	movs	r1, #0
  return (struct mem *)(void *)&ram[ptr];
 8006cfa:	19da      	adds	r2, r3, r7
          mem2->used = 0;
 8006cfc:	7111      	strb	r1, [r2, #4]
          mem2->next = mem->next;
 8006cfe:	8821      	ldrh	r1, [r4, #0]
 8006d00:	53d9      	strh	r1, [r3, r7]
          mem2->prev = ptr;
 8006d02:	8056      	strh	r6, [r2, #2]
          mem->used = 1;
 8006d04:	2201      	movs	r2, #1
          mem->next = ptr2;
 8006d06:	8027      	strh	r7, [r4, #0]
          mem->used = 1;
 8006d08:	7122      	strb	r2, [r4, #4]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 8006d0a:	5bda      	ldrh	r2, [r3, r7]
 8006d0c:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
 8006d10:	d001      	beq.n	8006d16 <mem_malloc+0xa6>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8006d12:	4413      	add	r3, r2
 8006d14:	805f      	strh	r7, [r3, #2]
        if (mem == lfree) {
 8006d16:	f8d8 3000 	ldr.w	r3, [r8]
 8006d1a:	4e27      	ldr	r6, [pc, #156]	; (8006db8 <mem_malloc+0x148>)
 8006d1c:	42a3      	cmp	r3, r4
 8006d1e:	d113      	bne.n	8006d48 <mem_malloc+0xd8>
          while (cur->used && cur != ram_end) {
 8006d20:	6831      	ldr	r1, [r6, #0]
  return (struct mem *)(void *)&ram[ptr];
 8006d22:	4623      	mov	r3, r4
 8006d24:	f8d9 0000 	ldr.w	r0, [r9]
          while (cur->used && cur != ram_end) {
 8006d28:	791a      	ldrb	r2, [r3, #4]
 8006d2a:	b10a      	cbz	r2, 8006d30 <mem_malloc+0xc0>
 8006d2c:	428b      	cmp	r3, r1
 8006d2e:	d131      	bne.n	8006d94 <mem_malloc+0x124>
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8006d30:	428b      	cmp	r3, r1
          lfree = cur;
 8006d32:	f8c8 3000 	str.w	r3, [r8]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8006d36:	d007      	beq.n	8006d48 <mem_malloc+0xd8>
 8006d38:	b132      	cbz	r2, 8006d48 <mem_malloc+0xd8>
 8006d3a:	4b1c      	ldr	r3, [pc, #112]	; (8006dac <mem_malloc+0x13c>)
 8006d3c:	f240 32b5 	movw	r2, #949	; 0x3b5
 8006d40:	491e      	ldr	r1, [pc, #120]	; (8006dbc <mem_malloc+0x14c>)
 8006d42:	481c      	ldr	r0, [pc, #112]	; (8006db4 <mem_malloc+0x144>)
 8006d44:	f005 f9fe 	bl	800c144 <iprintf>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8006d48:	3508      	adds	r5, #8
        sys_mutex_unlock(&mem_mutex);
 8006d4a:	4815      	ldr	r0, [pc, #84]	; (8006da0 <mem_malloc+0x130>)
 8006d4c:	f004 fcae 	bl	800b6ac <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8006d50:	6833      	ldr	r3, [r6, #0]
 8006d52:	4425      	add	r5, r4
 8006d54:	42ab      	cmp	r3, r5
 8006d56:	d206      	bcs.n	8006d66 <mem_malloc+0xf6>
 8006d58:	4b14      	ldr	r3, [pc, #80]	; (8006dac <mem_malloc+0x13c>)
 8006d5a:	f240 32ba 	movw	r2, #954	; 0x3ba
 8006d5e:	4918      	ldr	r1, [pc, #96]	; (8006dc0 <mem_malloc+0x150>)
 8006d60:	4814      	ldr	r0, [pc, #80]	; (8006db4 <mem_malloc+0x144>)
 8006d62:	f005 f9ef 	bl	800c144 <iprintf>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8006d66:	07a3      	lsls	r3, r4, #30
 8006d68:	d00d      	beq.n	8006d86 <mem_malloc+0x116>
 8006d6a:	4b10      	ldr	r3, [pc, #64]	; (8006dac <mem_malloc+0x13c>)
 8006d6c:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 8006d70:	4914      	ldr	r1, [pc, #80]	; (8006dc4 <mem_malloc+0x154>)
 8006d72:	4810      	ldr	r0, [pc, #64]	; (8006db4 <mem_malloc+0x144>)
 8006d74:	f005 f9e6 	bl	800c144 <iprintf>
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8006d78:	4b0c      	ldr	r3, [pc, #48]	; (8006dac <mem_malloc+0x13c>)
 8006d7a:	f240 32be 	movw	r2, #958	; 0x3be
 8006d7e:	4912      	ldr	r1, [pc, #72]	; (8006dc8 <mem_malloc+0x158>)
 8006d80:	480c      	ldr	r0, [pc, #48]	; (8006db4 <mem_malloc+0x144>)
 8006d82:	f005 f9df 	bl	800c144 <iprintf>
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8006d86:	f104 0008 	add.w	r0, r4, #8
 8006d8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          mem->used = 1;
 8006d8e:	2301      	movs	r3, #1
 8006d90:	7123      	strb	r3, [r4, #4]
 8006d92:	e7c0      	b.n	8006d16 <mem_malloc+0xa6>
  return (struct mem *)(void *)&ram[ptr];
 8006d94:	881b      	ldrh	r3, [r3, #0]
 8006d96:	4403      	add	r3, r0
 8006d98:	e7c6      	b.n	8006d28 <mem_malloc+0xb8>
         ptr = ptr_to_mem(ptr)->next) {
 8006d9a:	460e      	mov	r6, r1
 8006d9c:	e789      	b.n	8006cb2 <mem_malloc+0x42>
 8006d9e:	bf00      	nop
 8006da0:	20006b38 	.word	0x20006b38
 8006da4:	20006b3c 	.word	0x20006b3c
 8006da8:	20006b34 	.word	0x20006b34
 8006dac:	0800e924 	.word	0x0800e924
 8006db0:	0800ea40 	.word	0x0800ea40
 8006db4:	0800d104 	.word	0x0800d104
 8006db8:	20006b40 	.word	0x20006b40
 8006dbc:	0800e96e 	.word	0x0800e96e
 8006dc0:	0800e987 	.word	0x0800e987
 8006dc4:	0800e9b7 	.word	0x0800e9b7
 8006dc8:	0800e9e6 	.word	0x0800e9e6

08006dcc <do_memp_malloc_pool.isra.0>:
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}

static void *
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
 8006dcc:	b538      	push	{r3, r4, r5, lr}
 8006dce:	4604      	mov	r4, r0

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8006dd0:	f004 fc86 	bl	800b6e0 <sys_arch_protect>
 8006dd4:	4605      	mov	r5, r0

  memp = *desc->tab;
 8006dd6:	6823      	ldr	r3, [r4, #0]
 8006dd8:	681c      	ldr	r4, [r3, #0]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8006dda:	b15c      	cbz	r4, 8006df4 <do_memp_malloc_pool.isra.0+0x28>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8006ddc:	6822      	ldr	r2, [r4, #0]
 8006dde:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8006de0:	07a3      	lsls	r3, r4, #30
 8006de2:	d006      	beq.n	8006df2 <do_memp_malloc_pool.isra.0+0x26>
 8006de4:	4b05      	ldr	r3, [pc, #20]	; (8006dfc <do_memp_malloc_pool.isra.0+0x30>)
 8006de6:	f240 1219 	movw	r2, #281	; 0x119
 8006dea:	4905      	ldr	r1, [pc, #20]	; (8006e00 <do_memp_malloc_pool.isra.0+0x34>)
 8006dec:	4805      	ldr	r0, [pc, #20]	; (8006e04 <do_memp_malloc_pool.isra.0+0x38>)
 8006dee:	f005 f9a9 	bl	800c144 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8006df2:	4628      	mov	r0, r5
    return ((u8_t *)memp + MEMP_SIZE);
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8006df4:	f004 fc80 	bl	800b6f8 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
}
 8006df8:	4620      	mov	r0, r4
 8006dfa:	bd38      	pop	{r3, r4, r5, pc}
 8006dfc:	0800ea71 	.word	0x0800ea71
 8006e00:	0800eaa1 	.word	0x0800eaa1
 8006e04:	0800d104 	.word	0x0800d104

08006e08 <do_memp_free_pool.isra.1>:

  return memp;
}

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
 8006e08:	b538      	push	{r3, r4, r5, lr}
{
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8006e0a:	078b      	lsls	r3, r1, #30
do_memp_free_pool(const struct memp_desc *desc, void *mem)
 8006e0c:	4605      	mov	r5, r0
 8006e0e:	460c      	mov	r4, r1
  LWIP_ASSERT("memp_free: mem properly aligned",
 8006e10:	d006      	beq.n	8006e20 <do_memp_free_pool.isra.1+0x18>
 8006e12:	4b08      	ldr	r3, [pc, #32]	; (8006e34 <do_memp_free_pool.isra.1+0x2c>)
 8006e14:	f240 126d 	movw	r2, #365	; 0x16d
 8006e18:	4907      	ldr	r1, [pc, #28]	; (8006e38 <do_memp_free_pool.isra.1+0x30>)
 8006e1a:	4808      	ldr	r0, [pc, #32]	; (8006e3c <do_memp_free_pool.isra.1+0x34>)
 8006e1c:	f005 f992 	bl	800c144 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);

  SYS_ARCH_PROTECT(old_level);
 8006e20:	f004 fc5e 	bl	800b6e0 <sys_arch_protect>
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8006e24:	682b      	ldr	r3, [r5, #0]
 8006e26:	681a      	ldr	r2, [r3, #0]
 8006e28:	6022      	str	r2, [r4, #0]
  *desc->tab = memp;
 8006e2a:	601c      	str	r4, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8006e2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  SYS_ARCH_UNPROTECT(old_level);
 8006e30:	f004 bc62 	b.w	800b6f8 <sys_arch_unprotect>
 8006e34:	0800ea71 	.word	0x0800ea71
 8006e38:	0800ea51 	.word	0x0800ea51
 8006e3c:	0800d104 	.word	0x0800d104

08006e40 <memp_init_pool>:
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8006e40:	6843      	ldr	r3, [r0, #4]
  *desc->tab = NULL;
 8006e42:	2200      	movs	r2, #0
 8006e44:	6881      	ldr	r1, [r0, #8]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8006e46:	3303      	adds	r3, #3
{
 8006e48:	b530      	push	{r4, r5, lr}
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8006e4a:	f023 0303 	bic.w	r3, r3, #3
  for (i = 0; i < desc->num; ++i) {
 8006e4e:	8844      	ldrh	r4, [r0, #2]
  *desc->tab = NULL;
 8006e50:	600a      	str	r2, [r1, #0]
  for (i = 0; i < desc->num; ++i) {
 8006e52:	42a2      	cmp	r2, r4
 8006e54:	db00      	blt.n	8006e58 <memp_init_pool+0x18>
}
 8006e56:	bd30      	pop	{r4, r5, pc}
    memp->next = *desc->tab;
 8006e58:	680d      	ldr	r5, [r1, #0]
  for (i = 0; i < desc->num; ++i) {
 8006e5a:	3201      	adds	r2, #1
    memp->next = *desc->tab;
 8006e5c:	601d      	str	r5, [r3, #0]
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8006e5e:	8805      	ldrh	r5, [r0, #0]
    *desc->tab = memp;
 8006e60:	600b      	str	r3, [r1, #0]
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8006e62:	442b      	add	r3, r5
 8006e64:	e7f5      	b.n	8006e52 <memp_init_pool+0x12>
	...

08006e68 <memp_init>:
{
 8006e68:	b538      	push	{r3, r4, r5, lr}
 8006e6a:	2400      	movs	r4, #0
    memp_init_pool(memp_pools[i]);
 8006e6c:	4d04      	ldr	r5, [pc, #16]	; (8006e80 <memp_init+0x18>)
 8006e6e:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 8006e72:	3401      	adds	r4, #1
 8006e74:	f7ff ffe4 	bl	8006e40 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8006e78:	2c0d      	cmp	r4, #13
 8006e7a:	d1f8      	bne.n	8006e6e <memp_init+0x6>
}
 8006e7c:	bd38      	pop	{r3, r4, r5, pc}
 8006e7e:	bf00      	nop
 8006e80:	0800eb98 	.word	0x0800eb98

08006e84 <memp_malloc>:
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8006e84:	280c      	cmp	r0, #12
{
 8006e86:	b508      	push	{r3, lr}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8006e88:	d807      	bhi.n	8006e9a <memp_malloc+0x16>
  memp = do_memp_malloc_pool(memp_pools[type]);
 8006e8a:	4b08      	ldr	r3, [pc, #32]	; (8006eac <memp_malloc+0x28>)
 8006e8c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}
 8006e90:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  memp = do_memp_malloc_pool(memp_pools[type]);
 8006e94:	3008      	adds	r0, #8
 8006e96:	f7ff bf99 	b.w	8006dcc <do_memp_malloc_pool.isra.0>
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8006e9a:	4b05      	ldr	r3, [pc, #20]	; (8006eb0 <memp_malloc+0x2c>)
 8006e9c:	f240 1257 	movw	r2, #343	; 0x157
 8006ea0:	4904      	ldr	r1, [pc, #16]	; (8006eb4 <memp_malloc+0x30>)
 8006ea2:	4805      	ldr	r0, [pc, #20]	; (8006eb8 <memp_malloc+0x34>)
 8006ea4:	f005 f94e 	bl	800c144 <iprintf>
}
 8006ea8:	2000      	movs	r0, #0
 8006eaa:	bd08      	pop	{r3, pc}
 8006eac:	0800eb98 	.word	0x0800eb98
 8006eb0:	0800ea71 	.word	0x0800ea71
 8006eb4:	0800eb7b 	.word	0x0800eb7b
 8006eb8:	0800d104 	.word	0x0800d104

08006ebc <memp_free>:
{
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8006ebc:	280c      	cmp	r0, #12
 8006ebe:	d906      	bls.n	8006ece <memp_free+0x12>
 8006ec0:	4b07      	ldr	r3, [pc, #28]	; (8006ee0 <memp_free+0x24>)
 8006ec2:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8006ec6:	4907      	ldr	r1, [pc, #28]	; (8006ee4 <memp_free+0x28>)
 8006ec8:	4807      	ldr	r0, [pc, #28]	; (8006ee8 <memp_free+0x2c>)
 8006eca:	f005 b93b 	b.w	800c144 <iprintf>

  if (mem == NULL) {
 8006ece:	b129      	cbz	r1, 8006edc <memp_free+0x20>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8006ed0:	4b06      	ldr	r3, [pc, #24]	; (8006eec <memp_free+0x30>)
 8006ed2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8006ed6:	3008      	adds	r0, #8
 8006ed8:	f7ff bf96 	b.w	8006e08 <do_memp_free_pool.isra.1>
 8006edc:	4770      	bx	lr
 8006ede:	bf00      	nop
 8006ee0:	0800ea71 	.word	0x0800ea71
 8006ee4:	0800eb60 	.word	0x0800eb60
 8006ee8:	0800d104 	.word	0x0800d104
 8006eec:	0800eb98 	.word	0x0800eb98

08006ef0 <netif_null_output_ip4>:
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
}
 8006ef0:	f06f 000b 	mvn.w	r0, #11
 8006ef4:	4770      	bx	lr
	...

08006ef8 <netif_issue_reports>:
{
 8006ef8:	b538      	push	{r3, r4, r5, lr}
 8006efa:	460d      	mov	r5, r1
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8006efc:	4604      	mov	r4, r0
 8006efe:	b930      	cbnz	r0, 8006f0e <netif_issue_reports+0x16>
 8006f00:	4b0c      	ldr	r3, [pc, #48]	; (8006f34 <netif_issue_reports+0x3c>)
 8006f02:	f240 326d 	movw	r2, #877	; 0x36d
 8006f06:	490c      	ldr	r1, [pc, #48]	; (8006f38 <netif_issue_reports+0x40>)
 8006f08:	480c      	ldr	r0, [pc, #48]	; (8006f3c <netif_issue_reports+0x44>)
 8006f0a:	f005 f91b 	bl	800c144 <iprintf>
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8006f0e:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 8006f12:	f003 0205 	and.w	r2, r3, #5
 8006f16:	2a05      	cmp	r2, #5
 8006f18:	d10b      	bne.n	8006f32 <netif_issue_reports+0x3a>
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8006f1a:	07ea      	lsls	r2, r5, #31
 8006f1c:	d509      	bpl.n	8006f32 <netif_issue_reports+0x3a>
 8006f1e:	6862      	ldr	r2, [r4, #4]
 8006f20:	b13a      	cbz	r2, 8006f32 <netif_issue_reports+0x3a>
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8006f22:	071b      	lsls	r3, r3, #28
 8006f24:	d505      	bpl.n	8006f32 <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
 8006f26:	1d21      	adds	r1, r4, #4
 8006f28:	4620      	mov	r0, r4
}
 8006f2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      etharp_gratuitous(netif);
 8006f2e:	f7fe bc8b 	b.w	8005848 <etharp_request>
 8006f32:	bd38      	pop	{r3, r4, r5, pc}
 8006f34:	0800ec59 	.word	0x0800ec59
 8006f38:	0800ec8a 	.word	0x0800ec8a
 8006f3c:	0800d104 	.word	0x0800d104

08006f40 <netif_do_set_ipaddr>:
{
 8006f40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006f42:	4606      	mov	r6, r0
 8006f44:	4614      	mov	r4, r2
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8006f46:	460f      	mov	r7, r1
 8006f48:	b931      	cbnz	r1, 8006f58 <netif_do_set_ipaddr+0x18>
 8006f4a:	4b15      	ldr	r3, [pc, #84]	; (8006fa0 <netif_do_set_ipaddr+0x60>)
 8006f4c:	f240 12cb 	movw	r2, #459	; 0x1cb
 8006f50:	4914      	ldr	r1, [pc, #80]	; (8006fa4 <netif_do_set_ipaddr+0x64>)
 8006f52:	4815      	ldr	r0, [pc, #84]	; (8006fa8 <netif_do_set_ipaddr+0x68>)
 8006f54:	f005 f8f6 	bl	800c144 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8006f58:	b934      	cbnz	r4, 8006f68 <netif_do_set_ipaddr+0x28>
 8006f5a:	4b11      	ldr	r3, [pc, #68]	; (8006fa0 <netif_do_set_ipaddr+0x60>)
 8006f5c:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8006f60:	4910      	ldr	r1, [pc, #64]	; (8006fa4 <netif_do_set_ipaddr+0x64>)
 8006f62:	4811      	ldr	r0, [pc, #68]	; (8006fa8 <netif_do_set_ipaddr+0x68>)
 8006f64:	f005 f8ee 	bl	800c144 <iprintf>
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8006f68:	6873      	ldr	r3, [r6, #4]
 8006f6a:	683a      	ldr	r2, [r7, #0]
 8006f6c:	429a      	cmp	r2, r3
 8006f6e:	d014      	beq.n	8006f9a <netif_do_set_ipaddr+0x5a>
    *ip_2_ip4(&new_addr) = *ipaddr;
 8006f70:	ad02      	add	r5, sp, #8
    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8006f72:	6023      	str	r3, [r4, #0]
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8006f74:	4620      	mov	r0, r4
    *ip_2_ip4(&new_addr) = *ipaddr;
 8006f76:	f845 2d04 	str.w	r2, [r5, #-4]!
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8006f7a:	4629      	mov	r1, r5
 8006f7c:	f001 fc96 	bl	80088ac <tcp_netif_ip_addr_changed>
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8006f80:	4629      	mov	r1, r5
 8006f82:	4620      	mov	r0, r4
 8006f84:	f004 fa90 	bl	800b4a8 <udp_netif_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8006f88:	683b      	ldr	r3, [r7, #0]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8006f8a:	4630      	mov	r0, r6
 8006f8c:	2101      	movs	r1, #1
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8006f8e:	6073      	str	r3, [r6, #4]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8006f90:	f7ff ffb2 	bl	8006ef8 <netif_issue_reports>
    return 1; /* address changed */
 8006f94:	2001      	movs	r0, #1
}
 8006f96:	b003      	add	sp, #12
 8006f98:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return 0; /* address unchanged */
 8006f9a:	2000      	movs	r0, #0
 8006f9c:	e7fb      	b.n	8006f96 <netif_do_set_ipaddr+0x56>
 8006f9e:	bf00      	nop
 8006fa0:	0800ec59 	.word	0x0800ec59
 8006fa4:	0800ec49 	.word	0x0800ec49
 8006fa8:	0800d104 	.word	0x0800d104

08006fac <netif_init>:
{
 8006fac:	4770      	bx	lr
	...

08006fb0 <netif_set_addr>:
{
 8006fb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    ipaddr = IP4_ADDR_ANY4;
 8006fb2:	4d14      	ldr	r5, [pc, #80]	; (8007004 <netif_set_addr+0x54>)
{
 8006fb4:	4604      	mov	r4, r0
    ipaddr = IP4_ADDR_ANY4;
 8006fb6:	2900      	cmp	r1, #0
 8006fb8:	bf14      	ite	ne
 8006fba:	460e      	movne	r6, r1
 8006fbc:	462e      	moveq	r6, r5
    netmask = IP4_ADDR_ANY4;
 8006fbe:	2a00      	cmp	r2, #0
 8006fc0:	bf14      	ite	ne
 8006fc2:	4617      	movne	r7, r2
 8006fc4:	462f      	moveq	r7, r5
    gw = IP4_ADDR_ANY4;
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	bf18      	it	ne
 8006fca:	461d      	movne	r5, r3
  remove = ip4_addr_isany(ipaddr);
 8006fcc:	6833      	ldr	r3, [r6, #0]
 8006fce:	b193      	cbz	r3, 8006ff6 <netif_set_addr+0x46>
 8006fd0:	2300      	movs	r3, #0
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8006fd2:	683a      	ldr	r2, [r7, #0]
 8006fd4:	68a1      	ldr	r1, [r4, #8]
 8006fd6:	428a      	cmp	r2, r1
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8006fd8:	68e1      	ldr	r1, [r4, #12]
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8006fda:	bf18      	it	ne
 8006fdc:	60a2      	strne	r2, [r4, #8]
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8006fde:	682a      	ldr	r2, [r5, #0]
 8006fe0:	428a      	cmp	r2, r1
    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8006fe2:	bf18      	it	ne
 8006fe4:	60e2      	strne	r2, [r4, #12]
  if (!remove) {
 8006fe6:	b923      	cbnz	r3, 8006ff2 <netif_set_addr+0x42>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8006fe8:	aa01      	add	r2, sp, #4
 8006fea:	4631      	mov	r1, r6
 8006fec:	4620      	mov	r0, r4
 8006fee:	f7ff ffa7 	bl	8006f40 <netif_do_set_ipaddr>
}
 8006ff2:	b003      	add	sp, #12
 8006ff4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8006ff6:	aa01      	add	r2, sp, #4
 8006ff8:	4631      	mov	r1, r6
 8006ffa:	f7ff ffa1 	bl	8006f40 <netif_do_set_ipaddr>
  remove = ip4_addr_isany(ipaddr);
 8006ffe:	2301      	movs	r3, #1
 8007000:	e7e7      	b.n	8006fd2 <netif_set_addr+0x22>
 8007002:	bf00      	nop
 8007004:	0800e650 	.word	0x0800e650

08007008 <netif_add>:
{
 8007008:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800700c:	469c      	mov	ip, r3
 800700e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8007010:	4604      	mov	r4, r0
 8007012:	b948      	cbnz	r0, 8007028 <netif_add+0x20>
 8007014:	4b3e      	ldr	r3, [pc, #248]	; (8007110 <netif_add+0x108>)
 8007016:	f240 1227 	movw	r2, #295	; 0x127
 800701a:	493e      	ldr	r1, [pc, #248]	; (8007114 <netif_add+0x10c>)
 800701c:	483e      	ldr	r0, [pc, #248]	; (8007118 <netif_add+0x110>)
 800701e:	f005 f891 	bl	800c144 <iprintf>
}
 8007022:	4620      	mov	r0, r4
 8007024:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8007028:	b947      	cbnz	r7, 800703c <netif_add+0x34>
 800702a:	4b39      	ldr	r3, [pc, #228]	; (8007110 <netif_add+0x108>)
 800702c:	f44f 7294 	mov.w	r2, #296	; 0x128
 8007030:	493a      	ldr	r1, [pc, #232]	; (800711c <netif_add+0x114>)
 8007032:	463c      	mov	r4, r7
 8007034:	4838      	ldr	r0, [pc, #224]	; (8007118 <netif_add+0x110>)
 8007036:	f005 f885 	bl	800c144 <iprintf>
 800703a:	e7f2      	b.n	8007022 <netif_add+0x1a>
  netif->state = state;
 800703c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800703e:	2500      	movs	r5, #0
  netif->output = netif_null_output_ip4;
 8007040:	f8df e0e8 	ldr.w	lr, [pc, #232]	; 800712c <netif_add+0x124>
  netif->num = netif_num;
 8007044:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 8007130 <netif_add+0x128>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8007048:	4e35      	ldr	r6, [pc, #212]	; (8007120 <netif_add+0x118>)
  netif->output = netif_null_output_ip4;
 800704a:	f8c0 e014 	str.w	lr, [r0, #20]
  netif->state = state;
 800704e:	6203      	str	r3, [r0, #32]
  netif_set_addr(netif, ipaddr, netmask, gw);
 8007050:	42aa      	cmp	r2, r5
 8007052:	bf08      	it	eq
 8007054:	4632      	moveq	r2, r6
  netif->num = netif_num;
 8007056:	f898 e000 	ldrb.w	lr, [r8]
  netif_set_addr(netif, ipaddr, netmask, gw);
 800705a:	42a9      	cmp	r1, r5
 800705c:	bf08      	it	eq
 800705e:	4631      	moveq	r1, r6
  netif->input = input;
 8007060:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  netif->num = netif_num;
 8007062:	f880 e034 	strb.w	lr, [r0, #52]	; 0x34
  netif->input = input;
 8007066:	6103      	str	r3, [r0, #16]
  netif_set_addr(netif, ipaddr, netmask, gw);
 8007068:	45ac      	cmp	ip, r5
 800706a:	bf14      	ite	ne
 800706c:	4663      	movne	r3, ip
 800706e:	4633      	moveq	r3, r6
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8007070:	6045      	str	r5, [r0, #4]
 8007072:	4646      	mov	r6, r8
  ip_addr_set_zero_ip4(&netif->netmask);
 8007074:	6085      	str	r5, [r0, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8007076:	60c5      	str	r5, [r0, #12]
  netif->mtu = 0;
 8007078:	8505      	strh	r5, [r0, #40]	; 0x28
  netif->flags = 0;
 800707a:	f880 5031 	strb.w	r5, [r0, #49]	; 0x31
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800707e:	6245      	str	r5, [r0, #36]	; 0x24
  netif->link_callback = NULL;
 8007080:	61c5      	str	r5, [r0, #28]
  netif_set_addr(netif, ipaddr, netmask, gw);
 8007082:	f7ff ff95 	bl	8006fb0 <netif_set_addr>
  if (init(netif) != ERR_OK) {
 8007086:	4620      	mov	r0, r4
 8007088:	47b8      	blx	r7
 800708a:	2800      	cmp	r0, #0
 800708c:	d13e      	bne.n	800710c <netif_add+0x104>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800708e:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 8007134 <netif_add+0x12c>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8007092:	f8df a07c 	ldr.w	sl, [pc, #124]	; 8007110 <netif_add+0x108>
 8007096:	46c8      	mov	r8, r9
      if (netif->num == 255) {
 8007098:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
      num_netifs = 0;
 800709c:	2700      	movs	r7, #0
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800709e:	f8d9 5000 	ldr.w	r5, [r9]
      if (netif->num == 255) {
 80070a2:	2bff      	cmp	r3, #255	; 0xff
        LWIP_ASSERT("netif already added", netif2 != netif);
 80070a4:	f8df b070 	ldr.w	fp, [pc, #112]	; 8007118 <netif_add+0x110>
        netif->num = 0;
 80070a8:	bf04      	itt	eq
 80070aa:	2300      	moveq	r3, #0
 80070ac:	f884 3034 	strbeq.w	r3, [r4, #52]	; 0x34
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80070b0:	b955      	cbnz	r5, 80070c8 <netif_add+0xc0>
  if (netif->num == 254) {
 80070b2:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 80070b6:	2bfe      	cmp	r3, #254	; 0xfe
 80070b8:	d125      	bne.n	8007106 <netif_add+0xfe>
    netif_num = 0;
 80070ba:	7035      	strb	r5, [r6, #0]
  netif->next = netif_list;
 80070bc:	f8d8 3000 	ldr.w	r3, [r8]
 80070c0:	6023      	str	r3, [r4, #0]
  netif_list = netif;
 80070c2:	f8c8 4000 	str.w	r4, [r8]
  return netif;
 80070c6:	e7ac      	b.n	8007022 <netif_add+0x1a>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80070c8:	42a5      	cmp	r5, r4
 80070ca:	d106      	bne.n	80070da <netif_add+0xd2>
 80070cc:	4653      	mov	r3, sl
 80070ce:	f240 128b 	movw	r2, #395	; 0x18b
 80070d2:	4914      	ldr	r1, [pc, #80]	; (8007124 <netif_add+0x11c>)
 80070d4:	4658      	mov	r0, fp
 80070d6:	f005 f835 	bl	800c144 <iprintf>
        num_netifs++;
 80070da:	3701      	adds	r7, #1
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80070dc:	2fff      	cmp	r7, #255	; 0xff
 80070de:	dd06      	ble.n	80070ee <netif_add+0xe6>
 80070e0:	4653      	mov	r3, sl
 80070e2:	f240 128d 	movw	r2, #397	; 0x18d
 80070e6:	4910      	ldr	r1, [pc, #64]	; (8007128 <netif_add+0x120>)
 80070e8:	4658      	mov	r0, fp
 80070ea:	f005 f82b 	bl	800c144 <iprintf>
        if (netif2->num == netif->num) {
 80070ee:	f895 2034 	ldrb.w	r2, [r5, #52]	; 0x34
 80070f2:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d103      	bne.n	8007102 <netif_add+0xfa>
          netif->num++;
 80070fa:	3301      	adds	r3, #1
 80070fc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8007100:	e7ca      	b.n	8007098 <netif_add+0x90>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8007102:	682d      	ldr	r5, [r5, #0]
 8007104:	e7d4      	b.n	80070b0 <netif_add+0xa8>
    netif_num = (u8_t)(netif->num + 1);
 8007106:	3301      	adds	r3, #1
 8007108:	7033      	strb	r3, [r6, #0]
 800710a:	e7d7      	b.n	80070bc <netif_add+0xb4>
    return NULL;
 800710c:	462c      	mov	r4, r5
 800710e:	e788      	b.n	8007022 <netif_add+0x1a>
 8007110:	0800ec59 	.word	0x0800ec59
 8007114:	0800ebcc 	.word	0x0800ebcc
 8007118:	0800d104 	.word	0x0800d104
 800711c:	0800ebe5 	.word	0x0800ebe5
 8007120:	0800e650 	.word	0x0800e650
 8007124:	0800ec07 	.word	0x0800ec07
 8007128:	0800ec1b 	.word	0x0800ec1b
 800712c:	08006ef1 	.word	0x08006ef1
 8007130:	20006b78 	.word	0x20006b78
 8007134:	2000d380 	.word	0x2000d380

08007138 <netif_set_default>:
  netif_default = netif;
 8007138:	4b01      	ldr	r3, [pc, #4]	; (8007140 <netif_set_default+0x8>)
 800713a:	6018      	str	r0, [r3, #0]
 800713c:	4770      	bx	lr
 800713e:	bf00      	nop
 8007140:	2000d384 	.word	0x2000d384

08007144 <netif_set_up>:
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8007144:	b930      	cbnz	r0, 8007154 <netif_set_up+0x10>
 8007146:	4b09      	ldr	r3, [pc, #36]	; (800716c <netif_set_up+0x28>)
 8007148:	f44f 7254 	mov.w	r2, #848	; 0x350
 800714c:	4908      	ldr	r1, [pc, #32]	; (8007170 <netif_set_up+0x2c>)
 800714e:	4809      	ldr	r0, [pc, #36]	; (8007174 <netif_set_up+0x30>)
 8007150:	f004 bff8 	b.w	800c144 <iprintf>
  if (!(netif->flags & NETIF_FLAG_UP)) {
 8007154:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 8007158:	07d9      	lsls	r1, r3, #31
 800715a:	d406      	bmi.n	800716a <netif_set_up+0x26>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800715c:	f043 0301 	orr.w	r3, r3, #1
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8007160:	2103      	movs	r1, #3
    netif_set_flags(netif, NETIF_FLAG_UP);
 8007162:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8007166:	f7ff bec7 	b.w	8006ef8 <netif_issue_reports>
 800716a:	4770      	bx	lr
 800716c:	0800ec59 	.word	0x0800ec59
 8007170:	0800eccb 	.word	0x0800eccb
 8007174:	0800d104 	.word	0x0800d104

08007178 <netif_set_down>:
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8007178:	b930      	cbnz	r0, 8007188 <netif_set_down+0x10>
 800717a:	4b0a      	ldr	r3, [pc, #40]	; (80071a4 <netif_set_down+0x2c>)
 800717c:	f240 329b 	movw	r2, #923	; 0x39b
 8007180:	4909      	ldr	r1, [pc, #36]	; (80071a8 <netif_set_down+0x30>)
 8007182:	480a      	ldr	r0, [pc, #40]	; (80071ac <netif_set_down+0x34>)
 8007184:	f004 bfde 	b.w	800c144 <iprintf>
  if (netif->flags & NETIF_FLAG_UP) {
 8007188:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 800718c:	07d9      	lsls	r1, r3, #31
 800718e:	d507      	bpl.n	80071a0 <netif_set_down+0x28>
    netif_clear_flags(netif, NETIF_FLAG_UP);
 8007190:	f023 0101 	bic.w	r1, r3, #1
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8007194:	071b      	lsls	r3, r3, #28
    netif_clear_flags(netif, NETIF_FLAG_UP);
 8007196:	f880 1031 	strb.w	r1, [r0, #49]	; 0x31
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800719a:	d501      	bpl.n	80071a0 <netif_set_down+0x28>
      etharp_cleanup_netif(netif);
 800719c:	f7fe ba9a 	b.w	80056d4 <etharp_cleanup_netif>
 80071a0:	4770      	bx	lr
 80071a2:	bf00      	nop
 80071a4:	0800ec59 	.word	0x0800ec59
 80071a8:	0800ecad 	.word	0x0800ecad
 80071ac:	0800d104 	.word	0x0800d104

080071b0 <netif_get_by_index>:
{
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80071b0:	b150      	cbz	r0, 80071c8 <netif_get_by_index+0x18>
    NETIF_FOREACH(netif) {
 80071b2:	4b06      	ldr	r3, [pc, #24]	; (80071cc <netif_get_by_index+0x1c>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	b12b      	cbz	r3, 80071c4 <netif_get_by_index+0x14>
      if (idx == netif_get_index(netif)) {
 80071b8:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 80071bc:	3201      	adds	r2, #1
 80071be:	b2d2      	uxtb	r2, r2
 80071c0:	4290      	cmp	r0, r2
 80071c2:	d1f7      	bne.n	80071b4 <netif_get_by_index+0x4>
      }
    }
  }

  return NULL;
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	4770      	bx	lr
  return NULL;
 80071c8:	4603      	mov	r3, r0
 80071ca:	e7fb      	b.n	80071c4 <netif_get_by_index+0x14>
 80071cc:	2000d380 	.word	0x2000d380

080071d0 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 80071d0:	b538      	push	{r3, r4, r5, lr}
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80071d2:	b968      	cbnz	r0, 80071f0 <pbuf_add_header_impl+0x20>
 80071d4:	4b14      	ldr	r3, [pc, #80]	; (8007228 <pbuf_add_header_impl+0x58>)
 80071d6:	f240 12df 	movw	r2, #479	; 0x1df
 80071da:	4914      	ldr	r1, [pc, #80]	; (800722c <pbuf_add_header_impl+0x5c>)
 80071dc:	4814      	ldr	r0, [pc, #80]	; (8007230 <pbuf_add_header_impl+0x60>)
 80071de:	f004 ffb1 	bl	800c144 <iprintf>
  }

  increment_magnitude = (u16_t)header_size_increment;
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
    return 1;
 80071e2:	2001      	movs	r0, #1
 80071e4:	bd38      	pop	{r3, r4, r5, pc}
      return 1;
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80071e6:	2a00      	cmp	r2, #0
 80071e8:	d0fb      	beq.n	80071e2 <pbuf_add_header_impl+0x12>
      payload = (u8_t *)p->payload - header_size_increment;
 80071ea:	6842      	ldr	r2, [r0, #4]
 80071ec:	1a51      	subs	r1, r2, r1
 80071ee:	e013      	b.n	8007218 <pbuf_add_header_impl+0x48>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 80071f0:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 80071f4:	d2f5      	bcs.n	80071e2 <pbuf_add_header_impl+0x12>
  if (header_size_increment == 0) {
 80071f6:	b1a1      	cbz	r1, 8007222 <pbuf_add_header_impl+0x52>
  increment_magnitude = (u16_t)header_size_increment;
 80071f8:	b28c      	uxth	r4, r1
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80071fa:	8903      	ldrh	r3, [r0, #8]
 80071fc:	4423      	add	r3, r4
 80071fe:	b29b      	uxth	r3, r3
 8007200:	429c      	cmp	r4, r3
 8007202:	d8ee      	bhi.n	80071e2 <pbuf_add_header_impl+0x12>
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8007204:	f990 500c 	ldrsb.w	r5, [r0, #12]
 8007208:	2d00      	cmp	r5, #0
 800720a:	daec      	bge.n	80071e6 <pbuf_add_header_impl+0x16>
    payload = (u8_t *)p->payload - header_size_increment;
 800720c:	6842      	ldr	r2, [r0, #4]
 800720e:	1a51      	subs	r1, r2, r1
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8007210:	f100 0210 	add.w	r2, r0, #16
 8007214:	4291      	cmp	r1, r2
 8007216:	d3e4      	bcc.n	80071e2 <pbuf_add_header_impl+0x12>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
  p->len = (u16_t)(p->len + increment_magnitude);
 8007218:	8942      	ldrh	r2, [r0, #10]
  p->payload = payload;
 800721a:	6041      	str	r1, [r0, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800721c:	4414      	add	r4, r2
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800721e:	8103      	strh	r3, [r0, #8]
  p->len = (u16_t)(p->len + increment_magnitude);
 8007220:	8144      	strh	r4, [r0, #10]


  return 0;
 8007222:	2000      	movs	r0, #0
 8007224:	bd38      	pop	{r3, r4, r5, pc}
 8007226:	bf00      	nop
 8007228:	0800ece7 	.word	0x0800ece7
 800722c:	0800eef9 	.word	0x0800eef9
 8007230:	0800d104 	.word	0x0800d104

08007234 <pbuf_alloc_reference>:
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8007234:	f022 0340 	bic.w	r3, r2, #64	; 0x40
 8007238:	2b01      	cmp	r3, #1
{
 800723a:	b570      	push	{r4, r5, r6, lr}
 800723c:	4606      	mov	r6, r0
 800723e:	460d      	mov	r5, r1
 8007240:	4614      	mov	r4, r2
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8007242:	d006      	beq.n	8007252 <pbuf_alloc_reference+0x1e>
 8007244:	4b0a      	ldr	r3, [pc, #40]	; (8007270 <pbuf_alloc_reference+0x3c>)
 8007246:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800724a:	490a      	ldr	r1, [pc, #40]	; (8007274 <pbuf_alloc_reference+0x40>)
 800724c:	480a      	ldr	r0, [pc, #40]	; (8007278 <pbuf_alloc_reference+0x44>)
 800724e:	f004 ff79 	bl	800c144 <iprintf>
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8007252:	200b      	movs	r0, #11
 8007254:	f7ff fe16 	bl	8006e84 <memp_malloc>
  if (p == NULL) {
 8007258:	b148      	cbz	r0, 800726e <pbuf_alloc_reference+0x3a>
  p->next = NULL;
 800725a:	2300      	movs	r3, #0
  p->ref = 1;
 800725c:	2201      	movs	r2, #1
  p->tot_len = tot_len;
 800725e:	8105      	strh	r5, [r0, #8]
  p->len = len;
 8007260:	8145      	strh	r5, [r0, #10]
  p->type_internal = (u8_t)type;
 8007262:	7304      	strb	r4, [r0, #12]
  p->flags = flags;
 8007264:	7343      	strb	r3, [r0, #13]
  p->ref = 1;
 8007266:	7382      	strb	r2, [r0, #14]
  p->if_idx = NETIF_NO_INDEX;
 8007268:	73c3      	strb	r3, [r0, #15]
  p->payload = payload;
 800726a:	e880 0048 	stmia.w	r0, {r3, r6}
}
 800726e:	bd70      	pop	{r4, r5, r6, pc}
 8007270:	0800ece7 	.word	0x0800ece7
 8007274:	0800ed32 	.word	0x0800ed32
 8007278:	0800d104 	.word	0x0800d104

0800727c <pbuf_alloced_custom>:
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800727c:	3003      	adds	r0, #3
 800727e:	f020 0003 	bic.w	r0, r0, #3
{
 8007282:	b570      	push	{r4, r5, r6, lr}
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8007284:	180e      	adds	r6, r1, r0
 8007286:	f8bd 5014 	ldrh.w	r5, [sp, #20]
{
 800728a:	9c04      	ldr	r4, [sp, #16]
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800728c:	42ae      	cmp	r6, r5
 800728e:	d80e      	bhi.n	80072ae <pbuf_alloced_custom+0x32>
  if (payload_mem != NULL) {
 8007290:	b104      	cbz	r4, 8007294 <pbuf_alloced_custom+0x18>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8007292:	4404      	add	r4, r0
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8007294:	4618      	mov	r0, r3
  p->next = NULL;
 8007296:	2300      	movs	r3, #0
  p->type_internal = (u8_t)type;
 8007298:	7302      	strb	r2, [r0, #12]
  p->flags = flags;
 800729a:	2202      	movs	r2, #2
  p->tot_len = tot_len;
 800729c:	8101      	strh	r1, [r0, #8]
  p->flags = flags;
 800729e:	7342      	strb	r2, [r0, #13]
  p->ref = 1;
 80072a0:	2201      	movs	r2, #1
  p->len = len;
 80072a2:	8141      	strh	r1, [r0, #10]
  p->ref = 1;
 80072a4:	7382      	strb	r2, [r0, #14]
  p->if_idx = NETIF_NO_INDEX;
 80072a6:	73c3      	strb	r3, [r0, #15]
  p->payload = payload;
 80072a8:	e880 0018 	stmia.w	r0, {r3, r4}
  return &p->pbuf;
 80072ac:	bd70      	pop	{r4, r5, r6, pc}
    return NULL;
 80072ae:	2000      	movs	r0, #0
}
 80072b0:	bd70      	pop	{r4, r5, r6, pc}

080072b2 <pbuf_add_header>:
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
  return pbuf_add_header_impl(p, header_size_increment, 0);
 80072b2:	2200      	movs	r2, #0
 80072b4:	f7ff bf8c 	b.w	80071d0 <pbuf_add_header_impl>

080072b8 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 80072b8:	b510      	push	{r4, lr}
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80072ba:	b990      	cbnz	r0, 80072e2 <pbuf_remove_header+0x2a>
 80072bc:	4b10      	ldr	r3, [pc, #64]	; (8007300 <pbuf_remove_header+0x48>)
 80072be:	f240 224b 	movw	r2, #587	; 0x24b
 80072c2:	4910      	ldr	r1, [pc, #64]	; (8007304 <pbuf_remove_header+0x4c>)
    return 0;
  }

  increment_magnitude = (u16_t)header_size_decrement;
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80072c4:	4810      	ldr	r0, [pc, #64]	; (8007308 <pbuf_remove_header+0x50>)
 80072c6:	f004 ff3d 	bl	800c144 <iprintf>
    return 1;
 80072ca:	2001      	movs	r0, #1
 80072cc:	bd10      	pop	{r4, pc}
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80072ce:	1a9b      	subs	r3, r3, r2
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80072d0:	6844      	ldr	r4, [r0, #4]
  p->len = (u16_t)(p->len - increment_magnitude);
 80072d2:	8143      	strh	r3, [r0, #10]
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80072d4:	4421      	add	r1, r4
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80072d6:	8903      	ldrh	r3, [r0, #8]
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80072d8:	6041      	str	r1, [r0, #4]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80072da:	1a9b      	subs	r3, r3, r2
 80072dc:	8103      	strh	r3, [r0, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80072de:	2000      	movs	r0, #0
 80072e0:	bd10      	pop	{r4, pc}
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 80072e2:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 80072e6:	d2f0      	bcs.n	80072ca <pbuf_remove_header+0x12>
  if (header_size_decrement == 0) {
 80072e8:	2900      	cmp	r1, #0
 80072ea:	d0f8      	beq.n	80072de <pbuf_remove_header+0x26>
  increment_magnitude = (u16_t)header_size_decrement;
 80072ec:	b28a      	uxth	r2, r1
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80072ee:	8943      	ldrh	r3, [r0, #10]
 80072f0:	429a      	cmp	r2, r3
 80072f2:	d9ec      	bls.n	80072ce <pbuf_remove_header+0x16>
 80072f4:	4b02      	ldr	r3, [pc, #8]	; (8007300 <pbuf_remove_header+0x48>)
 80072f6:	f240 2255 	movw	r2, #597	; 0x255
 80072fa:	4904      	ldr	r1, [pc, #16]	; (800730c <pbuf_remove_header+0x54>)
 80072fc:	e7e2      	b.n	80072c4 <pbuf_remove_header+0xc>
 80072fe:	bf00      	nop
 8007300:	0800ece7 	.word	0x0800ece7
 8007304:	0800eef9 	.word	0x0800eef9
 8007308:	0800d104 	.word	0x0800d104
 800730c:	0800ef49 	.word	0x0800ef49

08007310 <pbuf_header_force>:
}

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
  if (header_size_increment < 0) {
 8007310:	1e0b      	subs	r3, r1, #0
 8007312:	da02      	bge.n	800731a <pbuf_header_force+0xa>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8007314:	4259      	negs	r1, r3
 8007316:	f7ff bfcf 	b.w	80072b8 <pbuf_remove_header>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800731a:	2201      	movs	r2, #1
 800731c:	f7ff bf58 	b.w	80071d0 <pbuf_add_header_impl>

08007320 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8007320:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8007324:	4604      	mov	r4, r0
 8007326:	b378      	cbz	r0, 8007388 <pbuf_free+0x68>
 8007328:	2600      	movs	r6, #0
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800732a:	4f2b      	ldr	r7, [pc, #172]	; (80073d8 <pbuf_free+0xb8>)
 800732c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80073ec <pbuf_free+0xcc>
 8007330:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 80073e4 <pbuf_free+0xc4>
 8007334:	fa5f f986 	uxtb.w	r9, r6
  while (p != NULL) {
 8007338:	b374      	cbz	r4, 8007398 <pbuf_free+0x78>
    SYS_ARCH_PROTECT(old_level);
 800733a:	f004 f9d1 	bl	800b6e0 <sys_arch_protect>
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800733e:	7ba3      	ldrb	r3, [r4, #14]
    SYS_ARCH_PROTECT(old_level);
 8007340:	4683      	mov	fp, r0
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8007342:	b933      	cbnz	r3, 8007352 <pbuf_free+0x32>
 8007344:	463b      	mov	r3, r7
 8007346:	f240 22f1 	movw	r2, #753	; 0x2f1
 800734a:	4651      	mov	r1, sl
 800734c:	4640      	mov	r0, r8
 800734e:	f004 fef9 	bl	800c144 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8007352:	7ba5      	ldrb	r5, [r4, #14]
    SYS_ARCH_UNPROTECT(old_level);
 8007354:	4658      	mov	r0, fp
    ref = --(p->ref);
 8007356:	3d01      	subs	r5, #1
 8007358:	b2ed      	uxtb	r5, r5
 800735a:	73a5      	strb	r5, [r4, #14]
    SYS_ARCH_UNPROTECT(old_level);
 800735c:	f004 f9cc 	bl	800b6f8 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8007360:	b9d5      	cbnz	r5, 8007398 <pbuf_free+0x78>
      q = p->next;
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8007362:	7b63      	ldrb	r3, [r4, #13]
      q = p->next;
 8007364:	6825      	ldr	r5, [r4, #0]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8007366:	079b      	lsls	r3, r3, #30
 8007368:	d519      	bpl.n	800739e <pbuf_free+0x7e>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800736a:	6923      	ldr	r3, [r4, #16]
 800736c:	b933      	cbnz	r3, 800737c <pbuf_free+0x5c>
 800736e:	463b      	mov	r3, r7
 8007370:	f240 22ff 	movw	r2, #767	; 0x2ff
 8007374:	4919      	ldr	r1, [pc, #100]	; (80073dc <pbuf_free+0xbc>)
 8007376:	4640      	mov	r0, r8
 8007378:	f004 fee4 	bl	800c144 <iprintf>
        pc->custom_free_function(p);
 800737c:	6923      	ldr	r3, [r4, #16]
 800737e:	4620      	mov	r0, r4
 8007380:	4798      	blx	r3
 8007382:	3601      	adds	r6, #1
          LWIP_ASSERT("invalid pbuf type", 0);
        }
      }
      count++;
      /* proceed to next pbuf */
      p = q;
 8007384:	462c      	mov	r4, r5
 8007386:	e7d5      	b.n	8007334 <pbuf_free+0x14>
    return 0;
 8007388:	46a1      	mov	r9, r4
    LWIP_ASSERT("p != NULL", p != NULL);
 800738a:	4b13      	ldr	r3, [pc, #76]	; (80073d8 <pbuf_free+0xb8>)
 800738c:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8007390:	4913      	ldr	r1, [pc, #76]	; (80073e0 <pbuf_free+0xc0>)
 8007392:	4814      	ldr	r0, [pc, #80]	; (80073e4 <pbuf_free+0xc4>)
 8007394:	f004 fed6 	bl	800c144 <iprintf>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
}
 8007398:	4648      	mov	r0, r9
 800739a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      alloc_src = pbuf_get_allocsrc(p);
 800739e:	7b23      	ldrb	r3, [r4, #12]
 80073a0:	f003 030f 	and.w	r3, r3, #15
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80073a4:	2b02      	cmp	r3, #2
 80073a6:	d104      	bne.n	80073b2 <pbuf_free+0x92>
          memp_free(MEMP_PBUF_POOL, p);
 80073a8:	4621      	mov	r1, r4
 80073aa:	200c      	movs	r0, #12
          memp_free(MEMP_PBUF, p);
 80073ac:	f7ff fd86 	bl	8006ebc <memp_free>
 80073b0:	e7e7      	b.n	8007382 <pbuf_free+0x62>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80073b2:	2b01      	cmp	r3, #1
 80073b4:	d102      	bne.n	80073bc <pbuf_free+0x9c>
          memp_free(MEMP_PBUF, p);
 80073b6:	4621      	mov	r1, r4
 80073b8:	200b      	movs	r0, #11
 80073ba:	e7f7      	b.n	80073ac <pbuf_free+0x8c>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80073bc:	b91b      	cbnz	r3, 80073c6 <pbuf_free+0xa6>
          mem_free(p);
 80073be:	4620      	mov	r0, r4
 80073c0:	f7ff face 	bl	8006960 <mem_free>
 80073c4:	e7dd      	b.n	8007382 <pbuf_free+0x62>
          LWIP_ASSERT("invalid pbuf type", 0);
 80073c6:	463b      	mov	r3, r7
 80073c8:	f240 320f 	movw	r2, #783	; 0x30f
 80073cc:	4906      	ldr	r1, [pc, #24]	; (80073e8 <pbuf_free+0xc8>)
 80073ce:	4640      	mov	r0, r8
 80073d0:	f004 feb8 	bl	800c144 <iprintf>
 80073d4:	e7d5      	b.n	8007382 <pbuf_free+0x62>
 80073d6:	bf00      	nop
 80073d8:	0800ece7 	.word	0x0800ece7
 80073dc:	0800eeb8 	.word	0x0800eeb8
 80073e0:	0800eef9 	.word	0x0800eef9
 80073e4:	0800d104 	.word	0x0800d104
 80073e8:	0800eed9 	.word	0x0800eed9
 80073ec:	0800eea2 	.word	0x0800eea2

080073f0 <pbuf_alloc>:
  switch (type) {
 80073f0:	2a41      	cmp	r2, #65	; 0x41
{
 80073f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073f6:	4606      	mov	r6, r0
 80073f8:	460f      	mov	r7, r1
  u16_t offset = (u16_t)layer;
 80073fa:	b285      	uxth	r5, r0
  switch (type) {
 80073fc:	d034      	beq.n	8007468 <pbuf_alloc+0x78>
 80073fe:	d809      	bhi.n	8007414 <pbuf_alloc+0x24>
 8007400:	2a01      	cmp	r2, #1
 8007402:	d031      	beq.n	8007468 <pbuf_alloc+0x78>
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8007404:	4b38      	ldr	r3, [pc, #224]	; (80074e8 <pbuf_alloc+0xf8>)
 8007406:	f240 1227 	movw	r2, #295	; 0x127
 800740a:	4938      	ldr	r1, [pc, #224]	; (80074ec <pbuf_alloc+0xfc>)
 800740c:	4838      	ldr	r0, [pc, #224]	; (80074f0 <pbuf_alloc+0x100>)
 800740e:	f004 fe99 	bl	800c144 <iprintf>
 8007412:	e03b      	b.n	800748c <pbuf_alloc+0x9c>
  switch (type) {
 8007414:	f5b2 7fc1 	cmp.w	r2, #386	; 0x182
 8007418:	d02c      	beq.n	8007474 <pbuf_alloc+0x84>
 800741a:	f5b2 7f20 	cmp.w	r2, #640	; 0x280
 800741e:	d1f1      	bne.n	8007404 <pbuf_alloc+0x14>
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8007420:	3503      	adds	r5, #3
 8007422:	1ccb      	adds	r3, r1, #3
 8007424:	f025 0503 	bic.w	r5, r5, #3
 8007428:	f023 0303 	bic.w	r3, r3, #3
 800742c:	441d      	add	r5, r3
 800742e:	b2ad      	uxth	r5, r5
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8007430:	f105 0010 	add.w	r0, r5, #16
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8007434:	429d      	cmp	r5, r3
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8007436:	b280      	uxth	r0, r0
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8007438:	d328      	bcc.n	800748c <pbuf_alloc+0x9c>
 800743a:	4283      	cmp	r3, r0
 800743c:	d826      	bhi.n	800748c <pbuf_alloc+0x9c>
      p = (struct pbuf *)mem_malloc(alloc_len);
 800743e:	f7ff fc17 	bl	8006c70 <mem_malloc>
      if (p == NULL) {
 8007442:	4604      	mov	r4, r0
 8007444:	2800      	cmp	r0, #0
 8007446:	d04a      	beq.n	80074de <pbuf_alloc+0xee>
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8007448:	4406      	add	r6, r0
  p->type_internal = (u8_t)type;
 800744a:	2280      	movs	r2, #128	; 0x80
  p->next = NULL;
 800744c:	2300      	movs	r3, #0
  p->tot_len = tot_len;
 800744e:	8107      	strh	r7, [r0, #8]
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8007450:	3613      	adds	r6, #19
  p->type_internal = (u8_t)type;
 8007452:	7302      	strb	r2, [r0, #12]
  p->ref = 1;
 8007454:	2201      	movs	r2, #1
  p->next = NULL;
 8007456:	6003      	str	r3, [r0, #0]
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8007458:	f026 0603 	bic.w	r6, r6, #3
  p->len = len;
 800745c:	8147      	strh	r7, [r0, #10]
  p->flags = flags;
 800745e:	7343      	strb	r3, [r0, #13]
  p->payload = payload;
 8007460:	6046      	str	r6, [r0, #4]
  p->ref = 1;
 8007462:	7382      	strb	r2, [r0, #14]
  p->if_idx = NETIF_NO_INDEX;
 8007464:	73c3      	strb	r3, [r0, #15]
 8007466:	e03a      	b.n	80074de <pbuf_alloc+0xee>
      p = pbuf_alloc_reference(NULL, length, type);
 8007468:	4639      	mov	r1, r7
 800746a:	2000      	movs	r0, #0
}
 800746c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
      p = pbuf_alloc_reference(NULL, length, type);
 8007470:	f7ff bee0 	b.w	8007234 <pbuf_alloc_reference>
  switch (type) {
 8007474:	f04f 0a00 	mov.w	sl, #0
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8007478:	f240 59f4 	movw	r9, #1524	; 0x5f4
  switch (type) {
 800747c:	4654      	mov	r4, sl
  p->next = NULL;
 800747e:	46d0      	mov	r8, sl
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8007480:	200c      	movs	r0, #12
 8007482:	f7ff fcff 	bl	8006e84 <memp_malloc>
        if (q == NULL) {
 8007486:	4606      	mov	r6, r0
 8007488:	b930      	cbnz	r0, 8007498 <pbuf_alloc+0xa8>
          if (p) {
 800748a:	b90c      	cbnz	r4, 8007490 <pbuf_alloc+0xa0>
      return NULL;
 800748c:	2400      	movs	r4, #0
 800748e:	e026      	b.n	80074de <pbuf_alloc+0xee>
            pbuf_free(p);
 8007490:	4620      	mov	r0, r4
 8007492:	f7ff ff45 	bl	8007320 <pbuf_free>
 8007496:	e7f9      	b.n	800748c <pbuf_alloc+0x9c>
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8007498:	1ceb      	adds	r3, r5, #3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800749a:	4405      	add	r5, r0
  p->type_internal = (u8_t)type;
 800749c:	2282      	movs	r2, #130	; 0x82
  p->next = NULL;
 800749e:	f8c0 8000 	str.w	r8, [r0]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80074a2:	f023 0303 	bic.w	r3, r3, #3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80074a6:	3513      	adds	r5, #19
  p->type_internal = (u8_t)type;
 80074a8:	7302      	strb	r2, [r0, #12]
  p->ref = 1;
 80074aa:	2201      	movs	r2, #1
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80074ac:	eba9 0303 	sub.w	r3, r9, r3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80074b0:	f025 0503 	bic.w	r5, r5, #3
  p->tot_len = tot_len;
 80074b4:	8107      	strh	r7, [r0, #8]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80074b6:	b29b      	uxth	r3, r3
  p->payload = payload;
 80074b8:	6045      	str	r5, [r0, #4]
  p->flags = flags;
 80074ba:	f880 800d 	strb.w	r8, [r0, #13]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80074be:	42bb      	cmp	r3, r7
  p->ref = 1;
 80074c0:	7382      	strb	r2, [r0, #14]
  p->if_idx = NETIF_NO_INDEX;
 80074c2:	f880 800f 	strb.w	r8, [r0, #15]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80074c6:	bf28      	it	cs
 80074c8:	463b      	movcs	r3, r7
  p->len = len;
 80074ca:	8143      	strh	r3, [r0, #10]
        if (p == NULL) {
 80074cc:	b154      	cbz	r4, 80074e4 <pbuf_alloc+0xf4>
          last->next = q;
 80074ce:	f8ca 0000 	str.w	r0, [sl]
        rem_len = (u16_t)(rem_len - qlen);
 80074d2:	1afb      	subs	r3, r7, r3
        offset = 0;
 80074d4:	2500      	movs	r5, #0
 80074d6:	46b2      	mov	sl, r6
        rem_len = (u16_t)(rem_len - qlen);
 80074d8:	b29f      	uxth	r7, r3
      } while (rem_len > 0);
 80074da:	2f00      	cmp	r7, #0
 80074dc:	d1d0      	bne.n	8007480 <pbuf_alloc+0x90>
}
 80074de:	4620      	mov	r0, r4
 80074e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074e4:	4604      	mov	r4, r0
 80074e6:	e7f4      	b.n	80074d2 <pbuf_alloc+0xe2>
 80074e8:	0800ece7 	.word	0x0800ece7
 80074ec:	0800ed17 	.word	0x0800ed17
 80074f0:	0800d104 	.word	0x0800d104

080074f4 <pbuf_realloc>:
{
 80074f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074f8:	460d      	mov	r5, r1
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80074fa:	4604      	mov	r4, r0
 80074fc:	b930      	cbnz	r0, 800750c <pbuf_realloc+0x18>
 80074fe:	4b24      	ldr	r3, [pc, #144]	; (8007590 <pbuf_realloc+0x9c>)
 8007500:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8007504:	4923      	ldr	r1, [pc, #140]	; (8007594 <pbuf_realloc+0xa0>)
 8007506:	4824      	ldr	r0, [pc, #144]	; (8007598 <pbuf_realloc+0xa4>)
 8007508:	f004 fe1c 	bl	800c144 <iprintf>
  if (new_len >= p->tot_len) {
 800750c:	8923      	ldrh	r3, [r4, #8]
 800750e:	42ab      	cmp	r3, r5
 8007510:	d93b      	bls.n	800758a <pbuf_realloc+0x96>
  shrink = (u16_t)(p->tot_len - new_len);
 8007512:	1b5b      	subs	r3, r3, r5
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8007514:	4f1e      	ldr	r7, [pc, #120]	; (8007590 <pbuf_realloc+0x9c>)
 8007516:	f8df 8088 	ldr.w	r8, [pc, #136]	; 80075a0 <pbuf_realloc+0xac>
  shrink = (u16_t)(p->tot_len - new_len);
 800751a:	b29e      	uxth	r6, r3
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800751c:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8007598 <pbuf_realloc+0xa4>
  while (rem_len > q->len) {
 8007520:	8963      	ldrh	r3, [r4, #10]
 8007522:	429d      	cmp	r5, r3
 8007524:	d819      	bhi.n	800755a <pbuf_realloc+0x66>
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8007526:	7b22      	ldrb	r2, [r4, #12]
 8007528:	0712      	lsls	r2, r2, #28
 800752a:	d126      	bne.n	800757a <pbuf_realloc+0x86>
 800752c:	429d      	cmp	r5, r3
 800752e:	d024      	beq.n	800757a <pbuf_realloc+0x86>
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8007530:	7b63      	ldrb	r3, [r4, #13]
 8007532:	079b      	lsls	r3, r3, #30
 8007534:	d421      	bmi.n	800757a <pbuf_realloc+0x86>
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8007536:	6861      	ldr	r1, [r4, #4]
 8007538:	4620      	mov	r0, r4
 800753a:	1b09      	subs	r1, r1, r4
 800753c:	4429      	add	r1, r5
 800753e:	b289      	uxth	r1, r1
 8007540:	f7ff fae8 	bl	8006b14 <mem_trim>
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8007544:	4604      	mov	r4, r0
 8007546:	b9c0      	cbnz	r0, 800757a <pbuf_realloc+0x86>
 8007548:	4b11      	ldr	r3, [pc, #68]	; (8007590 <pbuf_realloc+0x9c>)
 800754a:	f240 12bd 	movw	r2, #445	; 0x1bd
 800754e:	4913      	ldr	r1, [pc, #76]	; (800759c <pbuf_realloc+0xa8>)
 8007550:	4811      	ldr	r0, [pc, #68]	; (8007598 <pbuf_realloc+0xa4>)
 8007552:	f004 fdf7 	bl	800c144 <iprintf>
  q->len = rem_len;
 8007556:	8164      	strh	r4, [r4, #10]
 8007558:	deff      	udf	#255	; 0xff
    rem_len = (u16_t)(rem_len - q->len);
 800755a:	1aed      	subs	r5, r5, r3
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800755c:	8923      	ldrh	r3, [r4, #8]
 800755e:	1b9b      	subs	r3, r3, r6
    rem_len = (u16_t)(rem_len - q->len);
 8007560:	b2ad      	uxth	r5, r5
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8007562:	8123      	strh	r3, [r4, #8]
    q = q->next;
 8007564:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8007566:	2c00      	cmp	r4, #0
 8007568:	d1da      	bne.n	8007520 <pbuf_realloc+0x2c>
 800756a:	463b      	mov	r3, r7
 800756c:	f240 12af 	movw	r2, #431	; 0x1af
 8007570:	4641      	mov	r1, r8
 8007572:	4648      	mov	r0, r9
 8007574:	f004 fde6 	bl	800c144 <iprintf>
 8007578:	e7d2      	b.n	8007520 <pbuf_realloc+0x2c>
  if (q->next != NULL) {
 800757a:	6820      	ldr	r0, [r4, #0]
  q->len = rem_len;
 800757c:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
 800757e:	8125      	strh	r5, [r4, #8]
  if (q->next != NULL) {
 8007580:	b108      	cbz	r0, 8007586 <pbuf_realloc+0x92>
    pbuf_free(q->next);
 8007582:	f7ff fecd 	bl	8007320 <pbuf_free>
  q->next = NULL;
 8007586:	2300      	movs	r3, #0
 8007588:	6023      	str	r3, [r4, #0]
 800758a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800758e:	bf00      	nop
 8007590:	0800ece7 	.word	0x0800ece7
 8007594:	0800eeeb 	.word	0x0800eeeb
 8007598:	0800d104 	.word	0x0800d104
 800759c:	0800ef1b 	.word	0x0800ef1b
 80075a0:	0800ef03 	.word	0x0800ef03

080075a4 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80075a4:	4603      	mov	r3, r0
  u16_t len;

  len = 0;
  while (p != NULL) {
 80075a6:	2200      	movs	r2, #0
 80075a8:	b290      	uxth	r0, r2
 80075aa:	3201      	adds	r2, #1
 80075ac:	b903      	cbnz	r3, 80075b0 <pbuf_clen+0xc>
    ++len;
    p = p->next;
  }
  return len;
}
 80075ae:	4770      	bx	lr
    p = p->next;
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	e7f9      	b.n	80075a8 <pbuf_clen+0x4>

080075b4 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80075b4:	b510      	push	{r4, lr}
  /* pbuf given? */
  if (p != NULL) {
 80075b6:	4604      	mov	r4, r0
 80075b8:	b188      	cbz	r0, 80075de <pbuf_ref+0x2a>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80075ba:	f004 f891 	bl	800b6e0 <sys_arch_protect>
 80075be:	7ba3      	ldrb	r3, [r4, #14]
 80075c0:	3301      	adds	r3, #1
 80075c2:	73a3      	strb	r3, [r4, #14]
 80075c4:	f004 f898 	bl	800b6f8 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80075c8:	7ba3      	ldrb	r3, [r4, #14]
 80075ca:	b943      	cbnz	r3, 80075de <pbuf_ref+0x2a>
 80075cc:	4b04      	ldr	r3, [pc, #16]	; (80075e0 <pbuf_ref+0x2c>)
 80075ce:	f240 3242 	movw	r2, #834	; 0x342
 80075d2:	4904      	ldr	r1, [pc, #16]	; (80075e4 <pbuf_ref+0x30>)
 80075d4:	4804      	ldr	r0, [pc, #16]	; (80075e8 <pbuf_ref+0x34>)
  }
}
 80075d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80075da:	f004 bdb3 	b.w	800c144 <iprintf>
 80075de:	bd10      	pop	{r4, pc}
 80075e0:	0800ece7 	.word	0x0800ece7
 80075e4:	0800ef37 	.word	0x0800ef37
 80075e8:	0800d104 	.word	0x0800d104

080075ec <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80075ec:	b570      	push	{r4, r5, r6, lr}
 80075ee:	460d      	mov	r5, r1
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80075f0:	4604      	mov	r4, r0
 80075f2:	b100      	cbz	r0, 80075f6 <pbuf_cat+0xa>
 80075f4:	b969      	cbnz	r1, 8007612 <pbuf_cat+0x26>
 80075f6:	4b15      	ldr	r3, [pc, #84]	; (800764c <pbuf_cat+0x60>)
 80075f8:	f240 325a 	movw	r2, #858	; 0x35a
 80075fc:	4914      	ldr	r1, [pc, #80]	; (8007650 <pbuf_cat+0x64>)
 80075fe:	4815      	ldr	r0, [pc, #84]	; (8007654 <pbuf_cat+0x68>)
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8007600:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8007604:	f004 bd9e 	b.w	800c144 <iprintf>
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8007608:	8923      	ldrh	r3, [r4, #8]
 800760a:	8929      	ldrh	r1, [r5, #8]
 800760c:	440b      	add	r3, r1
 800760e:	8123      	strh	r3, [r4, #8]
 8007610:	4614      	mov	r4, r2
  for (p = h; p->next != NULL; p = p->next) {
 8007612:	6822      	ldr	r2, [r4, #0]
 8007614:	2a00      	cmp	r2, #0
 8007616:	d1f7      	bne.n	8007608 <pbuf_cat+0x1c>
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8007618:	8922      	ldrh	r2, [r4, #8]
 800761a:	8963      	ldrh	r3, [r4, #10]
 800761c:	429a      	cmp	r2, r3
 800761e:	d006      	beq.n	800762e <pbuf_cat+0x42>
 8007620:	4b0a      	ldr	r3, [pc, #40]	; (800764c <pbuf_cat+0x60>)
 8007622:	f240 3262 	movw	r2, #866	; 0x362
 8007626:	490c      	ldr	r1, [pc, #48]	; (8007658 <pbuf_cat+0x6c>)
 8007628:	480a      	ldr	r0, [pc, #40]	; (8007654 <pbuf_cat+0x68>)
 800762a:	f004 fd8b 	bl	800c144 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800762e:	6823      	ldr	r3, [r4, #0]
 8007630:	b133      	cbz	r3, 8007640 <pbuf_cat+0x54>
 8007632:	4b06      	ldr	r3, [pc, #24]	; (800764c <pbuf_cat+0x60>)
 8007634:	f240 3263 	movw	r2, #867	; 0x363
 8007638:	4908      	ldr	r1, [pc, #32]	; (800765c <pbuf_cat+0x70>)
 800763a:	4806      	ldr	r0, [pc, #24]	; (8007654 <pbuf_cat+0x68>)
 800763c:	f004 fd82 	bl	800c144 <iprintf>
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8007640:	892a      	ldrh	r2, [r5, #8]
 8007642:	8923      	ldrh	r3, [r4, #8]
  p->next = t;
 8007644:	6025      	str	r5, [r4, #0]
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8007646:	4413      	add	r3, r2
 8007648:	8123      	strh	r3, [r4, #8]
  p->next = t;
 800764a:	bd70      	pop	{r4, r5, r6, pc}
 800764c:	0800ece7 	.word	0x0800ece7
 8007650:	0800ed44 	.word	0x0800ed44
 8007654:	0800d104 	.word	0x0800d104
 8007658:	0800ed79 	.word	0x0800ed79
 800765c:	0800eda6 	.word	0x0800eda6

08007660 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8007660:	b510      	push	{r4, lr}
 8007662:	460c      	mov	r4, r1
  pbuf_cat(h, t);
 8007664:	f7ff ffc2 	bl	80075ec <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8007668:	4620      	mov	r0, r4
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800766a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  pbuf_ref(t);
 800766e:	f7ff bfa1 	b.w	80075b4 <pbuf_ref>
	...

08007674 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8007674:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007678:	460c      	mov	r4, r1

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800767a:	4605      	mov	r5, r0
 800767c:	b120      	cbz	r0, 8007688 <pbuf_copy+0x14>
 800767e:	b119      	cbz	r1, 8007688 <pbuf_copy+0x14>
 8007680:	8902      	ldrh	r2, [r0, #8]
 8007682:	890b      	ldrh	r3, [r1, #8]
 8007684:	429a      	cmp	r2, r3
 8007686:	d20a      	bcs.n	800769e <pbuf_copy+0x2a>
 8007688:	4b36      	ldr	r3, [pc, #216]	; (8007764 <pbuf_copy+0xf0>)
 800768a:	f240 32ca 	movw	r2, #970	; 0x3ca
 800768e:	4936      	ldr	r1, [pc, #216]	; (8007768 <pbuf_copy+0xf4>)
    }
    if (offset_to == p_to->len) {
      /* on to next p_to (if any) */
      offset_to = 0;
      p_to = p_to->next;
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8007690:	4836      	ldr	r0, [pc, #216]	; (800776c <pbuf_copy+0xf8>)
 8007692:	f004 fd57 	bl	800c144 <iprintf>
 8007696:	f06f 000f 	mvn.w	r0, #15
 800769a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800769e:	2600      	movs	r6, #0
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80076a0:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 8007764 <pbuf_copy+0xf0>
 80076a4:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 800777c <pbuf_copy+0x108>
 80076a8:	4637      	mov	r7, r6
 80076aa:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 800776c <pbuf_copy+0xf8>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80076ae:	f8b5 800a 	ldrh.w	r8, [r5, #10]
 80076b2:	8963      	ldrh	r3, [r4, #10]
 80076b4:	eba8 0807 	sub.w	r8, r8, r7
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80076b8:	6868      	ldr	r0, [r5, #4]
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80076ba:	1b9b      	subs	r3, r3, r6
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80076bc:	6861      	ldr	r1, [r4, #4]
 80076be:	4438      	add	r0, r7
 80076c0:	4598      	cmp	r8, r3
 80076c2:	4431      	add	r1, r6
 80076c4:	bf28      	it	cs
 80076c6:	4698      	movcs	r8, r3
 80076c8:	4642      	mov	r2, r8
    offset_to += len;
 80076ca:	4447      	add	r7, r8
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80076cc:	f004 fd27 	bl	800c11e <memcpy>
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80076d0:	896b      	ldrh	r3, [r5, #10]
    offset_from += len;
 80076d2:	4446      	add	r6, r8
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80076d4:	429f      	cmp	r7, r3
 80076d6:	d906      	bls.n	80076e6 <pbuf_copy+0x72>
 80076d8:	464b      	mov	r3, r9
 80076da:	f240 32d9 	movw	r2, #985	; 0x3d9
 80076de:	4659      	mov	r1, fp
 80076e0:	4650      	mov	r0, sl
 80076e2:	f004 fd2f 	bl	800c144 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80076e6:	8963      	ldrh	r3, [r4, #10]
 80076e8:	429e      	cmp	r6, r3
 80076ea:	d906      	bls.n	80076fa <pbuf_copy+0x86>
 80076ec:	464b      	mov	r3, r9
 80076ee:	f240 32da 	movw	r2, #986	; 0x3da
 80076f2:	491f      	ldr	r1, [pc, #124]	; (8007770 <pbuf_copy+0xfc>)
 80076f4:	4650      	mov	r0, sl
 80076f6:	f004 fd25 	bl	800c144 <iprintf>
    if (offset_from >= p_from->len) {
 80076fa:	8963      	ldrh	r3, [r4, #10]
 80076fc:	429e      	cmp	r6, r3
    if (offset_to == p_to->len) {
 80076fe:	896b      	ldrh	r3, [r5, #10]
      p_from = p_from->next;
 8007700:	bf24      	itt	cs
 8007702:	6824      	ldrcs	r4, [r4, #0]
      offset_from = 0;
 8007704:	2600      	movcs	r6, #0
    if (offset_to == p_to->len) {
 8007706:	429f      	cmp	r7, r3
 8007708:	d11e      	bne.n	8007748 <pbuf_copy+0xd4>
      p_to = p_to->next;
 800770a:	682d      	ldr	r5, [r5, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800770c:	b9dd      	cbnz	r5, 8007746 <pbuf_copy+0xd2>
 800770e:	b1bc      	cbz	r4, 8007740 <pbuf_copy+0xcc>
 8007710:	4b14      	ldr	r3, [pc, #80]	; (8007764 <pbuf_copy+0xf0>)
 8007712:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8007716:	4917      	ldr	r1, [pc, #92]	; (8007774 <pbuf_copy+0x100>)
 8007718:	e7ba      	b.n	8007690 <pbuf_copy+0x1c>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800771a:	8962      	ldrh	r2, [r4, #10]
 800771c:	8923      	ldrh	r3, [r4, #8]
 800771e:	429a      	cmp	r2, r3
 8007720:	d114      	bne.n	800774c <pbuf_copy+0xd8>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007722:	6823      	ldr	r3, [r4, #0]
 8007724:	b193      	cbz	r3, 800774c <pbuf_copy+0xd8>
 8007726:	4b0f      	ldr	r3, [pc, #60]	; (8007764 <pbuf_copy+0xf0>)
 8007728:	f240 32ea 	movw	r2, #1002	; 0x3ea
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800772c:	4912      	ldr	r1, [pc, #72]	; (8007778 <pbuf_copy+0x104>)
 800772e:	480f      	ldr	r0, [pc, #60]	; (800776c <pbuf_copy+0xf8>)
 8007730:	f004 fd08 	bl	800c144 <iprintf>
 8007734:	f06f 0005 	mvn.w	r0, #5
 8007738:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800773c:	2c00      	cmp	r4, #0
 800773e:	d1b6      	bne.n	80076ae <pbuf_copy+0x3a>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8007740:	4620      	mov	r0, r4
 8007742:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      offset_to = 0;
 8007746:	2700      	movs	r7, #0
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8007748:	2c00      	cmp	r4, #0
 800774a:	d1e6      	bne.n	800771a <pbuf_copy+0xa6>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800774c:	896a      	ldrh	r2, [r5, #10]
 800774e:	892b      	ldrh	r3, [r5, #8]
 8007750:	429a      	cmp	r2, r3
 8007752:	d1f3      	bne.n	800773c <pbuf_copy+0xc8>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007754:	682b      	ldr	r3, [r5, #0]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d0f0      	beq.n	800773c <pbuf_copy+0xc8>
 800775a:	4b02      	ldr	r3, [pc, #8]	; (8007764 <pbuf_copy+0xf0>)
 800775c:	f240 32ef 	movw	r2, #1007	; 0x3ef
 8007760:	e7e4      	b.n	800772c <pbuf_copy+0xb8>
 8007762:	bf00      	nop
 8007764:	0800ece7 	.word	0x0800ece7
 8007768:	0800edc7 	.word	0x0800edc7
 800776c:	0800d104 	.word	0x0800d104
 8007770:	0800ee0e 	.word	0x0800ee0e
 8007774:	0800ee29 	.word	0x0800ee29
 8007778:	0800ee36 	.word	0x0800ee36
 800777c:	0800edf7 	.word	0x0800edf7

08007780 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8007780:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007784:	460f      	mov	r7, r1
 8007786:	4690      	mov	r8, r2
  const struct pbuf *p;
  u16_t left = 0;
  u16_t buf_copy_len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8007788:	4606      	mov	r6, r0
 800778a:	b950      	cbnz	r0, 80077a2 <pbuf_copy_partial+0x22>
 800778c:	4635      	mov	r5, r6
 800778e:	4b1b      	ldr	r3, [pc, #108]	; (80077fc <pbuf_copy_partial+0x7c>)
 8007790:	f240 420a 	movw	r2, #1034	; 0x40a
 8007794:	491a      	ldr	r1, [pc, #104]	; (8007800 <pbuf_copy_partial+0x80>)
 8007796:	481b      	ldr	r0, [pc, #108]	; (8007804 <pbuf_copy_partial+0x84>)
 8007798:	f004 fcd4 	bl	800c144 <iprintf>
      len = (u16_t)(len - buf_copy_len);
      offset = 0;
    }
  }
  return copied_total;
}
 800779c:	4628      	mov	r0, r5
 800779e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80077a2:	b169      	cbz	r1, 80077c0 <pbuf_copy_partial+0x40>
 80077a4:	2500      	movs	r5, #0
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80077a6:	f1b8 0f00 	cmp.w	r8, #0
 80077aa:	d0f7      	beq.n	800779c <pbuf_copy_partial+0x1c>
 80077ac:	2e00      	cmp	r6, #0
 80077ae:	d0f5      	beq.n	800779c <pbuf_copy_partial+0x1c>
    if ((offset != 0) && (offset >= p->len)) {
 80077b0:	b17b      	cbz	r3, 80077d2 <pbuf_copy_partial+0x52>
 80077b2:	8971      	ldrh	r1, [r6, #10]
 80077b4:	428b      	cmp	r3, r1
 80077b6:	d30c      	bcc.n	80077d2 <pbuf_copy_partial+0x52>
      offset = (u16_t)(offset - p->len);
 80077b8:	1a5b      	subs	r3, r3, r1
 80077ba:	b29b      	uxth	r3, r3
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80077bc:	6836      	ldr	r6, [r6, #0]
 80077be:	e7f2      	b.n	80077a6 <pbuf_copy_partial+0x26>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80077c0:	4b0e      	ldr	r3, [pc, #56]	; (80077fc <pbuf_copy_partial+0x7c>)
 80077c2:	f240 420b 	movw	r2, #1035	; 0x40b
 80077c6:	4910      	ldr	r1, [pc, #64]	; (8007808 <pbuf_copy_partial+0x88>)
 80077c8:	463d      	mov	r5, r7
 80077ca:	480e      	ldr	r0, [pc, #56]	; (8007804 <pbuf_copy_partial+0x84>)
 80077cc:	f004 fcba 	bl	800c144 <iprintf>
 80077d0:	e7e4      	b.n	800779c <pbuf_copy_partial+0x1c>
      buf_copy_len = (u16_t)(p->len - offset);
 80077d2:	8974      	ldrh	r4, [r6, #10]
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80077d4:	1978      	adds	r0, r7, r5
 80077d6:	6871      	ldr	r1, [r6, #4]
      buf_copy_len = (u16_t)(p->len - offset);
 80077d8:	1ae4      	subs	r4, r4, r3
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80077da:	4419      	add	r1, r3
      buf_copy_len = (u16_t)(p->len - offset);
 80077dc:	b2a4      	uxth	r4, r4
 80077de:	4544      	cmp	r4, r8
 80077e0:	bf28      	it	cs
 80077e2:	4644      	movcs	r4, r8
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80077e4:	4622      	mov	r2, r4
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80077e6:	4425      	add	r5, r4
      len = (u16_t)(len - buf_copy_len);
 80077e8:	eba8 0404 	sub.w	r4, r8, r4
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80077ec:	f004 fc97 	bl	800c11e <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80077f0:	b2ad      	uxth	r5, r5
      offset = 0;
 80077f2:	2300      	movs	r3, #0
      len = (u16_t)(len - buf_copy_len);
 80077f4:	fa1f f884 	uxth.w	r8, r4
 80077f8:	e7e0      	b.n	80077bc <pbuf_copy_partial+0x3c>
 80077fa:	bf00      	nop
 80077fc:	0800ece7 	.word	0x0800ece7
 8007800:	0800ee60 	.word	0x0800ee60
 8007804:	0800d104 	.word	0x0800d104
 8007808:	0800ee7f 	.word	0x0800ee7f

0800780c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800780c:	b538      	push	{r3, r4, r5, lr}
 800780e:	4614      	mov	r4, r2
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8007810:	460a      	mov	r2, r1
 8007812:	8921      	ldrh	r1, [r4, #8]
 8007814:	f7ff fdec 	bl	80073f0 <pbuf_alloc>
  if (q == NULL) {
 8007818:	4605      	mov	r5, r0
 800781a:	b150      	cbz	r0, 8007832 <pbuf_clone+0x26>
    return NULL;
  }
  err = pbuf_copy(q, p);
 800781c:	4621      	mov	r1, r4
 800781e:	f7ff ff29 	bl	8007674 <pbuf_copy>
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8007822:	b130      	cbz	r0, 8007832 <pbuf_clone+0x26>
 8007824:	4b04      	ldr	r3, [pc, #16]	; (8007838 <pbuf_clone+0x2c>)
 8007826:	f240 5224 	movw	r2, #1316	; 0x524
 800782a:	4904      	ldr	r1, [pc, #16]	; (800783c <pbuf_clone+0x30>)
 800782c:	4804      	ldr	r0, [pc, #16]	; (8007840 <pbuf_clone+0x34>)
 800782e:	f004 fc89 	bl	800c144 <iprintf>
  return q;
}
 8007832:	4628      	mov	r0, r5
 8007834:	bd38      	pop	{r3, r4, r5, pc}
 8007836:	bf00      	nop
 8007838:	0800ece7 	.word	0x0800ece7
 800783c:	0800edb6 	.word	0x0800edb6
 8007840:	0800d104 	.word	0x0800d104

08007844 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8007844:	4a11      	ldr	r2, [pc, #68]	; (800788c <tcp_new_port+0x48>)
 8007846:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800784a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800784c:	8810      	ldrh	r0, [r2, #0]
  u16_t n = 0;
  struct tcp_pcb *pcb;

again:
  tcp_port++;
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800784e:	f64f 75ff 	movw	r5, #65535	; 0xffff
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8007852:	4e0f      	ldr	r6, [pc, #60]	; (8007890 <tcp_new_port+0x4c>)
  tcp_port++;
 8007854:	3001      	adds	r0, #1
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8007856:	2100      	movs	r1, #0
  tcp_port++;
 8007858:	b280      	uxth	r0, r0
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800785a:	42a8      	cmp	r0, r5
 800785c:	bf08      	it	eq
 800785e:	f44f 4040 	moveq.w	r0, #49152	; 0xc000
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8007862:	f856 4021 	ldr.w	r4, [r6, r1, lsl #2]
 8007866:	6824      	ldr	r4, [r4, #0]
 8007868:	b924      	cbnz	r4, 8007874 <tcp_new_port+0x30>
 800786a:	3101      	adds	r1, #1
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800786c:	2904      	cmp	r1, #4
 800786e:	d1f8      	bne.n	8007862 <tcp_new_port+0x1e>
 8007870:	8010      	strh	r0, [r2, #0]
        goto again;
      }
    }
  }
  return tcp_port;
}
 8007872:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (pcb->local_port == tcp_port) {
 8007874:	8ae7      	ldrh	r7, [r4, #22]
 8007876:	4287      	cmp	r7, r0
 8007878:	d106      	bne.n	8007888 <tcp_new_port+0x44>
 800787a:	3b01      	subs	r3, #1
 800787c:	b29b      	uxth	r3, r3
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800787e:	2b00      	cmp	r3, #0
 8007880:	d1e8      	bne.n	8007854 <tcp_new_port+0x10>
 8007882:	8010      	strh	r0, [r2, #0]
          return 0;
 8007884:	4618      	mov	r0, r3
 8007886:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8007888:	68e4      	ldr	r4, [r4, #12]
 800788a:	e7ed      	b.n	8007868 <tcp_new_port+0x24>
 800788c:	20000010 	.word	0x20000010
 8007890:	0800f1dc 	.word	0x0800f1dc

08007894 <tcp_close_shutdown_fin>:
{
 8007894:	b510      	push	{r4, lr}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8007896:	4604      	mov	r4, r0
 8007898:	b930      	cbnz	r0, 80078a8 <tcp_close_shutdown_fin+0x14>
 800789a:	4b13      	ldr	r3, [pc, #76]	; (80078e8 <tcp_close_shutdown_fin+0x54>)
 800789c:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 80078a0:	4912      	ldr	r1, [pc, #72]	; (80078ec <tcp_close_shutdown_fin+0x58>)
 80078a2:	4813      	ldr	r0, [pc, #76]	; (80078f0 <tcp_close_shutdown_fin+0x5c>)
 80078a4:	f004 fc4e 	bl	800c144 <iprintf>
  switch (pcb->state) {
 80078a8:	7d23      	ldrb	r3, [r4, #20]
 80078aa:	2b04      	cmp	r3, #4
 80078ac:	d003      	beq.n	80078b6 <tcp_close_shutdown_fin+0x22>
 80078ae:	2b07      	cmp	r3, #7
 80078b0:	d00c      	beq.n	80078cc <tcp_close_shutdown_fin+0x38>
 80078b2:	2b03      	cmp	r3, #3
 80078b4:	d108      	bne.n	80078c8 <tcp_close_shutdown_fin+0x34>
      err = tcp_send_fin(pcb);
 80078b6:	4620      	mov	r0, r4
 80078b8:	f002 fe8c 	bl	800a5d4 <tcp_send_fin>
      if (err == ERR_OK) {
 80078bc:	b988      	cbnz	r0, 80078e2 <tcp_close_shutdown_fin+0x4e>
        pcb->state = FIN_WAIT_1;
 80078be:	2305      	movs	r3, #5
        pcb->state = LAST_ACK;
 80078c0:	7523      	strb	r3, [r4, #20]
    tcp_output(pcb);
 80078c2:	4620      	mov	r0, r4
 80078c4:	f002 ffe8 	bl	800a898 <tcp_output>
 80078c8:	2000      	movs	r0, #0
 80078ca:	bd10      	pop	{r4, pc}
      err = tcp_send_fin(pcb);
 80078cc:	4620      	mov	r0, r4
 80078ce:	f002 fe81 	bl	800a5d4 <tcp_send_fin>
      if (err == ERR_OK) {
 80078d2:	b930      	cbnz	r0, 80078e2 <tcp_close_shutdown_fin+0x4e>
        pcb->state = LAST_ACK;
 80078d4:	2309      	movs	r3, #9
 80078d6:	e7f3      	b.n	80078c0 <tcp_close_shutdown_fin+0x2c>
    tcp_set_flags(pcb, TF_CLOSEPEND);
 80078d8:	8b63      	ldrh	r3, [r4, #26]
 80078da:	f043 0308 	orr.w	r3, r3, #8
 80078de:	8363      	strh	r3, [r4, #26]
 80078e0:	e7f2      	b.n	80078c8 <tcp_close_shutdown_fin+0x34>
  } else if (err == ERR_MEM) {
 80078e2:	1c43      	adds	r3, r0, #1
 80078e4:	d0f8      	beq.n	80078d8 <tcp_close_shutdown_fin+0x44>
}
 80078e6:	bd10      	pop	{r4, pc}
 80078e8:	0800f082 	.word	0x0800f082
 80078ec:	0800f0b1 	.word	0x0800f0b1
 80078f0:	0800d104 	.word	0x0800d104

080078f4 <tcp_init>:
{
 80078f4:	b508      	push	{r3, lr}
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80078f6:	f004 fc3d 	bl	800c174 <rand>
 80078fa:	ea6f 4080 	mvn.w	r0, r0, lsl #18
 80078fe:	4b02      	ldr	r3, [pc, #8]	; (8007908 <tcp_init+0x14>)
 8007900:	ea6f 4090 	mvn.w	r0, r0, lsr #18
 8007904:	8018      	strh	r0, [r3, #0]
 8007906:	bd08      	pop	{r3, pc}
 8007908:	20000010 	.word	0x20000010

0800790c <tcp_free>:
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800790c:	7d03      	ldrb	r3, [r0, #20]
 800790e:	2b01      	cmp	r3, #1
{
 8007910:	b510      	push	{r4, lr}
 8007912:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8007914:	d105      	bne.n	8007922 <tcp_free+0x16>
 8007916:	4b06      	ldr	r3, [pc, #24]	; (8007930 <tcp_free+0x24>)
 8007918:	22d4      	movs	r2, #212	; 0xd4
 800791a:	4906      	ldr	r1, [pc, #24]	; (8007934 <tcp_free+0x28>)
 800791c:	4806      	ldr	r0, [pc, #24]	; (8007938 <tcp_free+0x2c>)
 800791e:	f004 fc11 	bl	800c144 <iprintf>
  memp_free(MEMP_TCP_PCB, pcb);
 8007922:	4621      	mov	r1, r4
 8007924:	2001      	movs	r0, #1
}
 8007926:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_TCP_PCB, pcb);
 800792a:	f7ff bac7 	b.w	8006ebc <memp_free>
 800792e:	bf00      	nop
 8007930:	0800f082 	.word	0x0800f082
 8007934:	0800f10a 	.word	0x0800f10a
 8007938:	0800d104 	.word	0x0800d104

0800793c <tcp_bind>:
{
 800793c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ipaddr = IP4_ADDR_ANY;
 800793e:	4d23      	ldr	r5, [pc, #140]	; (80079cc <tcp_bind+0x90>)
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8007940:	4604      	mov	r4, r0
    ipaddr = IP4_ADDR_ANY;
 8007942:	2900      	cmp	r1, #0
 8007944:	bf18      	it	ne
 8007946:	460d      	movne	r5, r1
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8007948:	b948      	cbnz	r0, 800795e <tcp_bind+0x22>
 800794a:	4b21      	ldr	r3, [pc, #132]	; (80079d0 <tcp_bind+0x94>)
 800794c:	f240 22a9 	movw	r2, #681	; 0x2a9
 8007950:	4920      	ldr	r1, [pc, #128]	; (80079d4 <tcp_bind+0x98>)
 8007952:	4821      	ldr	r0, [pc, #132]	; (80079d8 <tcp_bind+0x9c>)
 8007954:	f004 fbf6 	bl	800c144 <iprintf>
 8007958:	f06f 000f 	mvn.w	r0, #15
 800795c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800795e:	7d03      	ldrb	r3, [r0, #20]
 8007960:	b14b      	cbz	r3, 8007976 <tcp_bind+0x3a>
 8007962:	4b1b      	ldr	r3, [pc, #108]	; (80079d0 <tcp_bind+0x94>)
 8007964:	f240 22ab 	movw	r2, #683	; 0x2ab
 8007968:	491c      	ldr	r1, [pc, #112]	; (80079dc <tcp_bind+0xa0>)
 800796a:	481b      	ldr	r0, [pc, #108]	; (80079d8 <tcp_bind+0x9c>)
 800796c:	f004 fbea 	bl	800c144 <iprintf>
 8007970:	f06f 0005 	mvn.w	r0, #5
 8007974:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (port == 0) {
 8007976:	b932      	cbnz	r2, 8007986 <tcp_bind+0x4a>
    port = tcp_new_port();
 8007978:	f7ff ff64 	bl	8007844 <tcp_new_port>
    if (port == 0) {
 800797c:	4602      	mov	r2, r0
 800797e:	b950      	cbnz	r0, 8007996 <tcp_bind+0x5a>
      return ERR_BUF;
 8007980:	f06f 0001 	mvn.w	r0, #1
 8007984:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8007986:	4f16      	ldr	r7, [pc, #88]	; (80079e0 <tcp_bind+0xa4>)
 8007988:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
 800798c:	6808      	ldr	r0, [r1, #0]
 800798e:	b970      	cbnz	r0, 80079ae <tcp_bind+0x72>
    for (i = 0; i < max_pcb_list; i++) {
 8007990:	3301      	adds	r3, #1
 8007992:	2b04      	cmp	r3, #4
 8007994:	d1f8      	bne.n	8007988 <tcp_bind+0x4c>
  if (!ip_addr_isany(ipaddr)
 8007996:	682b      	ldr	r3, [r5, #0]
 8007998:	b103      	cbz	r3, 800799c <tcp_bind+0x60>
    ip_addr_set(&pcb->local_ip, ipaddr);
 800799a:	6023      	str	r3, [r4, #0]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800799c:	4b11      	ldr	r3, [pc, #68]	; (80079e4 <tcp_bind+0xa8>)
  pcb->local_port = port;
 800799e:	82e2      	strh	r2, [r4, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 80079a0:	681a      	ldr	r2, [r3, #0]
 80079a2:	601c      	str	r4, [r3, #0]
 80079a4:	60e2      	str	r2, [r4, #12]
 80079a6:	f003 fa4d 	bl	800ae44 <tcp_timer_needed>
  return ERR_OK;
 80079aa:	2000      	movs	r0, #0
 80079ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (cpcb->local_port == port) {
 80079ae:	8ac1      	ldrh	r1, [r0, #22]
 80079b0:	4291      	cmp	r1, r2
 80079b2:	d105      	bne.n	80079c0 <tcp_bind+0x84>
                (ip_addr_isany(&cpcb->local_ip) ||
 80079b4:	6806      	ldr	r6, [r0, #0]
 80079b6:	b12e      	cbz	r6, 80079c4 <tcp_bind+0x88>
                 ip_addr_isany(ipaddr) ||
 80079b8:	6829      	ldr	r1, [r5, #0]
 80079ba:	b119      	cbz	r1, 80079c4 <tcp_bind+0x88>
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80079bc:	428e      	cmp	r6, r1
 80079be:	d001      	beq.n	80079c4 <tcp_bind+0x88>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80079c0:	68c0      	ldr	r0, [r0, #12]
 80079c2:	e7e4      	b.n	800798e <tcp_bind+0x52>
              return ERR_USE;
 80079c4:	f06f 0007 	mvn.w	r0, #7
}
 80079c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079ca:	bf00      	nop
 80079cc:	0800e650 	.word	0x0800e650
 80079d0:	0800f082 	.word	0x0800f082
 80079d4:	0800efdb 	.word	0x0800efdb
 80079d8:	0800d104 	.word	0x0800d104
 80079dc:	0800eff1 	.word	0x0800eff1
 80079e0:	0800f1dc 	.word	0x0800f1dc
 80079e4:	2000d398 	.word	0x2000d398

080079e8 <tcp_listen_with_backlog_and_err>:
{
 80079e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079ea:	4616      	mov	r6, r2
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 80079ec:	4605      	mov	r5, r0
 80079ee:	b968      	cbnz	r0, 8007a0c <tcp_listen_with_backlog_and_err+0x24>
 80079f0:	4b29      	ldr	r3, [pc, #164]	; (8007a98 <tcp_listen_with_backlog_and_err+0xb0>)
 80079f2:	f240 3259 	movw	r2, #857	; 0x359
 80079f6:	4929      	ldr	r1, [pc, #164]	; (8007a9c <tcp_listen_with_backlog_and_err+0xb4>)
 80079f8:	4829      	ldr	r0, [pc, #164]	; (8007aa0 <tcp_listen_with_backlog_and_err+0xb8>)
 80079fa:	f004 fba3 	bl	800c144 <iprintf>
 80079fe:	f06f 030f 	mvn.w	r3, #15
  struct tcp_pcb_listen *lpcb = NULL;
 8007a02:	2400      	movs	r4, #0
  if (err != NULL) {
 8007a04:	b106      	cbz	r6, 8007a08 <tcp_listen_with_backlog_and_err+0x20>
    *err = res;
 8007a06:	7033      	strb	r3, [r6, #0]
}
 8007a08:	4620      	mov	r0, r4
 8007a0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8007a0c:	7d07      	ldrb	r7, [r0, #20]
 8007a0e:	b14f      	cbz	r7, 8007a24 <tcp_listen_with_backlog_and_err+0x3c>
 8007a10:	4b21      	ldr	r3, [pc, #132]	; (8007a98 <tcp_listen_with_backlog_and_err+0xb0>)
 8007a12:	f240 325a 	movw	r2, #858	; 0x35a
 8007a16:	4923      	ldr	r1, [pc, #140]	; (8007aa4 <tcp_listen_with_backlog_and_err+0xbc>)
 8007a18:	4821      	ldr	r0, [pc, #132]	; (8007aa0 <tcp_listen_with_backlog_and_err+0xb8>)
 8007a1a:	f004 fb93 	bl	800c144 <iprintf>
 8007a1e:	f06f 030e 	mvn.w	r3, #14
 8007a22:	e7ee      	b.n	8007a02 <tcp_listen_with_backlog_and_err+0x1a>
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8007a24:	2002      	movs	r0, #2
 8007a26:	f7ff fa2d 	bl	8006e84 <memp_malloc>
  if (lpcb == NULL) {
 8007a2a:	4604      	mov	r4, r0
 8007a2c:	2800      	cmp	r0, #0
 8007a2e:	d02f      	beq.n	8007a90 <tcp_listen_with_backlog_and_err+0xa8>
  lpcb->callback_arg = pcb->callback_arg;
 8007a30:	692b      	ldr	r3, [r5, #16]
  lpcb->state = LISTEN;
 8007a32:	2201      	movs	r2, #1
  lpcb->callback_arg = pcb->callback_arg;
 8007a34:	6103      	str	r3, [r0, #16]
  lpcb->local_port = pcb->local_port;
 8007a36:	8aeb      	ldrh	r3, [r5, #22]
  lpcb->state = LISTEN;
 8007a38:	7502      	strb	r2, [r0, #20]
  lpcb->local_port = pcb->local_port;
 8007a3a:	82c3      	strh	r3, [r0, #22]
  lpcb->prio = pcb->prio;
 8007a3c:	7d6a      	ldrb	r2, [r5, #21]
 8007a3e:	7542      	strb	r2, [r0, #21]
  lpcb->so_options = pcb->so_options;
 8007a40:	7a6a      	ldrb	r2, [r5, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8007a42:	7207      	strb	r7, [r0, #8]
  lpcb->so_options = pcb->so_options;
 8007a44:	7242      	strb	r2, [r0, #9]
  lpcb->ttl = pcb->ttl;
 8007a46:	7aea      	ldrb	r2, [r5, #11]
 8007a48:	72c2      	strb	r2, [r0, #11]
  lpcb->tos = pcb->tos;
 8007a4a:	7aaa      	ldrb	r2, [r5, #10]
 8007a4c:	7282      	strb	r2, [r0, #10]
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8007a4e:	682a      	ldr	r2, [r5, #0]
 8007a50:	6002      	str	r2, [r0, #0]
  if (pcb->local_port != 0) {
 8007a52:	b13b      	cbz	r3, 8007a64 <tcp_listen_with_backlog_and_err+0x7c>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8007a54:	4a14      	ldr	r2, [pc, #80]	; (8007aa8 <tcp_listen_with_backlog_and_err+0xc0>)
 8007a56:	6813      	ldr	r3, [r2, #0]
 8007a58:	429d      	cmp	r5, r3
 8007a5a:	d111      	bne.n	8007a80 <tcp_listen_with_backlog_and_err+0x98>
 8007a5c:	68eb      	ldr	r3, [r5, #12]
 8007a5e:	6013      	str	r3, [r2, #0]
 8007a60:	2300      	movs	r3, #0
 8007a62:	60eb      	str	r3, [r5, #12]
  tcp_free(pcb);
 8007a64:	4628      	mov	r0, r5
 8007a66:	f7ff ff51 	bl	800790c <tcp_free>
  lpcb->accept = tcp_accept_null;
 8007a6a:	4b10      	ldr	r3, [pc, #64]	; (8007aac <tcp_listen_with_backlog_and_err+0xc4>)
 8007a6c:	61a3      	str	r3, [r4, #24]
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8007a6e:	4b10      	ldr	r3, [pc, #64]	; (8007ab0 <tcp_listen_with_backlog_and_err+0xc8>)
 8007a70:	681a      	ldr	r2, [r3, #0]
 8007a72:	601c      	str	r4, [r3, #0]
 8007a74:	60e2      	str	r2, [r4, #12]
 8007a76:	f003 f9e5 	bl	800ae44 <tcp_timer_needed>
  res = ERR_OK;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	e7c2      	b.n	8007a04 <tcp_listen_with_backlog_and_err+0x1c>
 8007a7e:	4613      	mov	r3, r2
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d0ed      	beq.n	8007a60 <tcp_listen_with_backlog_and_err+0x78>
 8007a84:	68da      	ldr	r2, [r3, #12]
 8007a86:	4295      	cmp	r5, r2
 8007a88:	d1f9      	bne.n	8007a7e <tcp_listen_with_backlog_and_err+0x96>
 8007a8a:	68ea      	ldr	r2, [r5, #12]
 8007a8c:	60da      	str	r2, [r3, #12]
 8007a8e:	e7e7      	b.n	8007a60 <tcp_listen_with_backlog_and_err+0x78>
    res = ERR_MEM;
 8007a90:	f04f 33ff 	mov.w	r3, #4294967295
 8007a94:	e7b6      	b.n	8007a04 <tcp_listen_with_backlog_and_err+0x1c>
 8007a96:	bf00      	nop
 8007a98:	0800f082 	.word	0x0800f082
 8007a9c:	0800f129 	.word	0x0800f129
 8007aa0:	0800d104 	.word	0x0800d104
 8007aa4:	0800f156 	.word	0x0800f156
 8007aa8:	2000d398 	.word	0x2000d398
 8007aac:	08008635 	.word	0x08008635
 8007ab0:	2000d394 	.word	0x2000d394

08007ab4 <tcp_listen_with_backlog>:
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	f7ff bf97 	b.w	80079e8 <tcp_listen_with_backlog_and_err>
	...

08007abc <tcp_update_rcv_ann_wnd>:
{
 8007abc:	b570      	push	{r4, r5, r6, lr}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8007abe:	4604      	mov	r4, r0
 8007ac0:	b930      	cbnz	r0, 8007ad0 <tcp_update_rcv_ann_wnd+0x14>
 8007ac2:	4b15      	ldr	r3, [pc, #84]	; (8007b18 <tcp_update_rcv_ann_wnd+0x5c>)
 8007ac4:	f240 32a6 	movw	r2, #934	; 0x3a6
 8007ac8:	4914      	ldr	r1, [pc, #80]	; (8007b1c <tcp_update_rcv_ann_wnd+0x60>)
 8007aca:	4815      	ldr	r0, [pc, #84]	; (8007b20 <tcp_update_rcv_ann_wnd+0x64>)
 8007acc:	f004 fb3a 	bl	800c144 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8007ad0:	8d21      	ldrh	r1, [r4, #40]	; 0x28
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8007ad2:	f240 56b4 	movw	r6, #1460	; 0x5b4
 8007ad6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007ad8:	8e62      	ldrh	r2, [r4, #50]	; 0x32
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8007ada:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8007adc:	1ac8      	subs	r0, r1, r3
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8007ade:	42b2      	cmp	r2, r6
 8007ae0:	4428      	add	r0, r5
 8007ae2:	bf94      	ite	ls
 8007ae4:	1a82      	subls	r2, r0, r2
 8007ae6:	1b82      	subhi	r2, r0, r6
 8007ae8:	2a00      	cmp	r2, #0
 8007aea:	db01      	blt.n	8007af0 <tcp_update_rcv_ann_wnd+0x34>
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8007aec:	8561      	strh	r1, [r4, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8007aee:	bd70      	pop	{r4, r5, r6, pc}
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8007af0:	1aea      	subs	r2, r5, r3
 8007af2:	2a00      	cmp	r2, #0
 8007af4:	dd02      	ble.n	8007afc <tcp_update_rcv_ann_wnd+0x40>
      pcb->rcv_ann_wnd = 0;
 8007af6:	2000      	movs	r0, #0
 8007af8:	8560      	strh	r0, [r4, #42]	; 0x2a
 8007afa:	bd70      	pop	{r4, r5, r6, pc}
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8007afc:	1b5d      	subs	r5, r3, r5
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8007afe:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 8007b02:	d306      	bcc.n	8007b12 <tcp_update_rcv_ann_wnd+0x56>
 8007b04:	4b04      	ldr	r3, [pc, #16]	; (8007b18 <tcp_update_rcv_ann_wnd+0x5c>)
 8007b06:	f240 32b6 	movw	r2, #950	; 0x3b6
 8007b0a:	4906      	ldr	r1, [pc, #24]	; (8007b24 <tcp_update_rcv_ann_wnd+0x68>)
 8007b0c:	4804      	ldr	r0, [pc, #16]	; (8007b20 <tcp_update_rcv_ann_wnd+0x64>)
 8007b0e:	f004 fb19 	bl	800c144 <iprintf>
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8007b12:	8565      	strh	r5, [r4, #42]	; 0x2a
    return 0;
 8007b14:	2000      	movs	r0, #0
}
 8007b16:	bd70      	pop	{r4, r5, r6, pc}
 8007b18:	0800f082 	.word	0x0800f082
 8007b1c:	0800f54e 	.word	0x0800f54e
 8007b20:	0800d104 	.word	0x0800d104
 8007b24:	0800f572 	.word	0x0800f572

08007b28 <tcp_recved>:
{
 8007b28:	b570      	push	{r4, r5, r6, lr}
 8007b2a:	460d      	mov	r5, r1
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8007b2c:	4604      	mov	r4, r0
 8007b2e:	b940      	cbnz	r0, 8007b42 <tcp_recved+0x1a>
 8007b30:	4b17      	ldr	r3, [pc, #92]	; (8007b90 <tcp_recved+0x68>)
 8007b32:	f240 32cf 	movw	r2, #975	; 0x3cf
 8007b36:	4917      	ldr	r1, [pc, #92]	; (8007b94 <tcp_recved+0x6c>)
 8007b38:	4817      	ldr	r0, [pc, #92]	; (8007b98 <tcp_recved+0x70>)
}
 8007b3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8007b3e:	f004 bb01 	b.w	800c144 <iprintf>
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8007b42:	7d03      	ldrb	r3, [r0, #20]
 8007b44:	2b01      	cmp	r3, #1
 8007b46:	d106      	bne.n	8007b56 <tcp_recved+0x2e>
 8007b48:	4b11      	ldr	r3, [pc, #68]	; (8007b90 <tcp_recved+0x68>)
 8007b4a:	f240 32d3 	movw	r2, #979	; 0x3d3
 8007b4e:	4913      	ldr	r1, [pc, #76]	; (8007b9c <tcp_recved+0x74>)
 8007b50:	4811      	ldr	r0, [pc, #68]	; (8007b98 <tcp_recved+0x70>)
 8007b52:	f004 faf7 	bl	800c144 <iprintf>
  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8007b56:	8d22      	ldrh	r2, [r4, #40]	; 0x28
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8007b58:	f640 3368 	movw	r3, #2920	; 0xb68
  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8007b5c:	1951      	adds	r1, r2, r5
 8007b5e:	b289      	uxth	r1, r1
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8007b60:	4299      	cmp	r1, r3
 8007b62:	d801      	bhi.n	8007b68 <tcp_recved+0x40>
 8007b64:	428a      	cmp	r2, r1
 8007b66:	d910      	bls.n	8007b8a <tcp_recved+0x62>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8007b68:	8523      	strh	r3, [r4, #40]	; 0x28
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8007b6a:	4620      	mov	r0, r4
 8007b6c:	f7ff ffa6 	bl	8007abc <tcp_update_rcv_ann_wnd>
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8007b70:	f240 23d9 	movw	r3, #729	; 0x2d9
 8007b74:	4298      	cmp	r0, r3
 8007b76:	d90a      	bls.n	8007b8e <tcp_recved+0x66>
    tcp_ack_now(pcb);
 8007b78:	8b63      	ldrh	r3, [r4, #26]
    tcp_output(pcb);
 8007b7a:	4620      	mov	r0, r4
    tcp_ack_now(pcb);
 8007b7c:	f043 0302 	orr.w	r3, r3, #2
 8007b80:	8363      	strh	r3, [r4, #26]
}
 8007b82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    tcp_output(pcb);
 8007b86:	f002 be87 	b.w	800a898 <tcp_output>
    pcb->rcv_wnd = rcv_wnd;
 8007b8a:	8521      	strh	r1, [r4, #40]	; 0x28
 8007b8c:	e7ed      	b.n	8007b6a <tcp_recved+0x42>
 8007b8e:	bd70      	pop	{r4, r5, r6, pc}
 8007b90:	0800f082 	.word	0x0800f082
 8007b94:	0800f317 	.word	0x0800f317
 8007b98:	0800d104 	.word	0x0800d104
 8007b9c:	0800f32f 	.word	0x0800f32f

08007ba0 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8007ba0:	b510      	push	{r4, lr}
  if (seg != NULL) {
 8007ba2:	4604      	mov	r4, r0
 8007ba4:	b148      	cbz	r0, 8007bba <tcp_seg_free+0x1a>
    if (seg->p != NULL) {
 8007ba6:	6840      	ldr	r0, [r0, #4]
 8007ba8:	b108      	cbz	r0, 8007bae <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 8007baa:	f7ff fbb9 	bl	8007320 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8007bae:	4621      	mov	r1, r4
 8007bb0:	2003      	movs	r0, #3
  }
}
 8007bb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memp_free(MEMP_TCP_SEG, seg);
 8007bb6:	f7ff b981 	b.w	8006ebc <memp_free>
 8007bba:	bd10      	pop	{r4, pc}

08007bbc <tcp_segs_free>:
{
 8007bbc:	b510      	push	{r4, lr}
  while (seg != NULL) {
 8007bbe:	b900      	cbnz	r0, 8007bc2 <tcp_segs_free+0x6>
}
 8007bc0:	bd10      	pop	{r4, pc}
    struct tcp_seg *next = seg->next;
 8007bc2:	6804      	ldr	r4, [r0, #0]
    tcp_seg_free(seg);
 8007bc4:	f7ff ffec 	bl	8007ba0 <tcp_seg_free>
    seg = next;
 8007bc8:	4620      	mov	r0, r4
 8007bca:	e7f8      	b.n	8007bbe <tcp_segs_free+0x2>

08007bcc <tcp_setprio>:
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 8007bcc:	b930      	cbnz	r0, 8007bdc <tcp_setprio+0x10>
 8007bce:	4b04      	ldr	r3, [pc, #16]	; (8007be0 <tcp_setprio+0x14>)
 8007bd0:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 8007bd4:	4903      	ldr	r1, [pc, #12]	; (8007be4 <tcp_setprio+0x18>)
 8007bd6:	4804      	ldr	r0, [pc, #16]	; (8007be8 <tcp_setprio+0x1c>)
 8007bd8:	f004 bab4 	b.w	800c144 <iprintf>

  pcb->prio = prio;
 8007bdc:	7541      	strb	r1, [r0, #21]
 8007bde:	4770      	bx	lr
 8007be0:	0800f082 	.word	0x0800f082
 8007be4:	0800f37c 	.word	0x0800f37c
 8007be8:	0800d104 	.word	0x0800d104

08007bec <tcp_arg>:
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8007bec:	b100      	cbz	r0, 8007bf0 <tcp_arg+0x4>
    pcb->callback_arg = arg;
 8007bee:	6101      	str	r1, [r0, #16]
 8007bf0:	4770      	bx	lr
	...

08007bf4 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8007bf4:	b538      	push	{r3, r4, r5, lr}
 8007bf6:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8007bf8:	4604      	mov	r4, r0
 8007bfa:	b158      	cbz	r0, 8007c14 <tcp_recv+0x20>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8007bfc:	7d03      	ldrb	r3, [r0, #20]
 8007bfe:	2b01      	cmp	r3, #1
 8007c00:	d106      	bne.n	8007c10 <tcp_recv+0x1c>
 8007c02:	4b05      	ldr	r3, [pc, #20]	; (8007c18 <tcp_recv+0x24>)
 8007c04:	f240 72df 	movw	r2, #2015	; 0x7df
 8007c08:	4904      	ldr	r1, [pc, #16]	; (8007c1c <tcp_recv+0x28>)
 8007c0a:	4805      	ldr	r0, [pc, #20]	; (8007c20 <tcp_recv+0x2c>)
 8007c0c:	f004 fa9a 	bl	800c144 <iprintf>
    pcb->recv = recv;
 8007c10:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
 8007c14:	bd38      	pop	{r3, r4, r5, pc}
 8007c16:	bf00      	nop
 8007c18:	0800f082 	.word	0x0800f082
 8007c1c:	0800f2d5 	.word	0x0800f2d5
 8007c20:	0800d104 	.word	0x0800d104

08007c24 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8007c24:	b538      	push	{r3, r4, r5, lr}
 8007c26:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8007c28:	4604      	mov	r4, r0
 8007c2a:	b150      	cbz	r0, 8007c42 <tcp_sent+0x1e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8007c2c:	7d03      	ldrb	r3, [r0, #20]
 8007c2e:	2b01      	cmp	r3, #1
 8007c30:	d106      	bne.n	8007c40 <tcp_sent+0x1c>
 8007c32:	4b04      	ldr	r3, [pc, #16]	; (8007c44 <tcp_sent+0x20>)
 8007c34:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8007c38:	4903      	ldr	r1, [pc, #12]	; (8007c48 <tcp_sent+0x24>)
 8007c3a:	4804      	ldr	r0, [pc, #16]	; (8007c4c <tcp_sent+0x28>)
 8007c3c:	f004 fa82 	bl	800c144 <iprintf>
    pcb->sent = sent;
 8007c40:	67e5      	str	r5, [r4, #124]	; 0x7c
 8007c42:	bd38      	pop	{r3, r4, r5, pc}
 8007c44:	0800f082 	.word	0x0800f082
 8007c48:	0800f355 	.word	0x0800f355
 8007c4c:	0800d104 	.word	0x0800d104

08007c50 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8007c50:	b538      	push	{r3, r4, r5, lr}
 8007c52:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8007c54:	4604      	mov	r4, r0
 8007c56:	b158      	cbz	r0, 8007c70 <tcp_err+0x20>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8007c58:	7d03      	ldrb	r3, [r0, #20]
 8007c5a:	2b01      	cmp	r3, #1
 8007c5c:	d106      	bne.n	8007c6c <tcp_err+0x1c>
 8007c5e:	4b05      	ldr	r3, [pc, #20]	; (8007c74 <tcp_err+0x24>)
 8007c60:	f640 020d 	movw	r2, #2061	; 0x80d
 8007c64:	4904      	ldr	r1, [pc, #16]	; (8007c78 <tcp_err+0x28>)
 8007c66:	4805      	ldr	r0, [pc, #20]	; (8007c7c <tcp_err+0x2c>)
 8007c68:	f004 fa6c 	bl	800c144 <iprintf>
    pcb->errf = err;
 8007c6c:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
 8007c70:	bd38      	pop	{r3, r4, r5, pc}
 8007c72:	bf00      	nop
 8007c74:	0800f082 	.word	0x0800f082
 8007c78:	0800f0e4 	.word	0x0800f0e4
 8007c7c:	0800d104 	.word	0x0800d104

08007c80 <tcp_accept>:
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8007c80:	b118      	cbz	r0, 8007c8a <tcp_accept+0xa>
 8007c82:	7d03      	ldrb	r3, [r0, #20]
 8007c84:	2b01      	cmp	r3, #1
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
    lpcb->accept = accept;
 8007c86:	bf08      	it	eq
 8007c88:	6181      	streq	r1, [r0, #24]
 8007c8a:	4770      	bx	lr

08007c8c <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8007c8c:	b570      	push	{r4, r5, r6, lr}
 8007c8e:	460e      	mov	r6, r1
 8007c90:	4615      	mov	r5, r2
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8007c92:	4604      	mov	r4, r0
 8007c94:	b940      	cbnz	r0, 8007ca8 <tcp_poll+0x1c>
 8007c96:	4b0b      	ldr	r3, [pc, #44]	; (8007cc4 <tcp_poll+0x38>)
 8007c98:	f640 023d 	movw	r2, #2109	; 0x83d
 8007c9c:	490a      	ldr	r1, [pc, #40]	; (8007cc8 <tcp_poll+0x3c>)
 8007c9e:	480b      	ldr	r0, [pc, #44]	; (8007ccc <tcp_poll+0x40>)
  pcb->poll = poll;
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
}
 8007ca0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8007ca4:	f004 ba4e 	b.w	800c144 <iprintf>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8007ca8:	7d03      	ldrb	r3, [r0, #20]
 8007caa:	2b01      	cmp	r3, #1
 8007cac:	d106      	bne.n	8007cbc <tcp_poll+0x30>
 8007cae:	4b05      	ldr	r3, [pc, #20]	; (8007cc4 <tcp_poll+0x38>)
 8007cb0:	f640 023e 	movw	r2, #2110	; 0x83e
 8007cb4:	4906      	ldr	r1, [pc, #24]	; (8007cd0 <tcp_poll+0x44>)
 8007cb6:	4805      	ldr	r0, [pc, #20]	; (8007ccc <tcp_poll+0x40>)
 8007cb8:	f004 fa44 	bl	800c144 <iprintf>
  pcb->poll = poll;
 8007cbc:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
  pcb->pollinterval = interval;
 8007cc0:	7765      	strb	r5, [r4, #29]
 8007cc2:	bd70      	pop	{r4, r5, r6, pc}
 8007cc4:	0800f082 	.word	0x0800f082
 8007cc8:	0800f27b 	.word	0x0800f27b
 8007ccc:	0800d104 	.word	0x0800d104
 8007cd0:	0800f291 	.word	0x0800f291

08007cd4 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8007cd4:	b510      	push	{r4, lr}
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8007cd6:	4604      	mov	r4, r0
 8007cd8:	b940      	cbnz	r0, 8007cec <tcp_pcb_purge+0x18>
 8007cda:	4b11      	ldr	r3, [pc, #68]	; (8007d20 <tcp_pcb_purge+0x4c>)
 8007cdc:	f640 0251 	movw	r2, #2129	; 0x851
 8007ce0:	4910      	ldr	r1, [pc, #64]	; (8007d24 <tcp_pcb_purge+0x50>)
 8007ce2:	4811      	ldr	r0, [pc, #68]	; (8007d28 <tcp_pcb_purge+0x54>)
    pcb->unacked = pcb->unsent = NULL;
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
#endif /* TCP_OVERSIZE */
  }
}
 8007ce4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8007ce8:	f004 ba2c 	b.w	800c144 <iprintf>
  if (pcb->state != CLOSED &&
 8007cec:	7d03      	ldrb	r3, [r0, #20]
 8007cee:	2b01      	cmp	r3, #1
 8007cf0:	d915      	bls.n	8007d1e <tcp_pcb_purge+0x4a>
 8007cf2:	2b0a      	cmp	r3, #10
 8007cf4:	d013      	beq.n	8007d1e <tcp_pcb_purge+0x4a>
    if (pcb->refused_data != NULL) {
 8007cf6:	6f40      	ldr	r0, [r0, #116]	; 0x74
 8007cf8:	b118      	cbz	r0, 8007d02 <tcp_pcb_purge+0x2e>
      pbuf_free(pcb->refused_data);
 8007cfa:	f7ff fb11 	bl	8007320 <pbuf_free>
      pcb->refused_data = NULL;
 8007cfe:	2300      	movs	r3, #0
 8007d00:	6763      	str	r3, [r4, #116]	; 0x74
    pcb->rtime = -1;
 8007d02:	f64f 73ff 	movw	r3, #65535	; 0xffff
    tcp_segs_free(pcb->unsent);
 8007d06:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    pcb->rtime = -1;
 8007d08:	8623      	strh	r3, [r4, #48]	; 0x30
    tcp_segs_free(pcb->unsent);
 8007d0a:	f7ff ff57 	bl	8007bbc <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8007d0e:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8007d10:	f7ff ff54 	bl	8007bbc <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8007d14:	2300      	movs	r3, #0
 8007d16:	66e3      	str	r3, [r4, #108]	; 0x6c
 8007d18:	6723      	str	r3, [r4, #112]	; 0x70
    pcb->unsent_oversize = 0;
 8007d1a:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
 8007d1e:	bd10      	pop	{r4, pc}
 8007d20:	0800f082 	.word	0x0800f082
 8007d24:	0800f1ec 	.word	0x0800f1ec
 8007d28:	0800d104 	.word	0x0800d104

08007d2c <tcp_slowtmr>:
{
 8007d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ++tcp_ticks;
 8007d30:	4eb5      	ldr	r6, [pc, #724]	; (8008008 <tcp_slowtmr+0x2dc>)
{
 8007d32:	b087      	sub	sp, #28
      tcp_active_pcbs_changed = 0;
 8007d34:	f8df a308 	ldr.w	sl, [pc, #776]	; 8008040 <tcp_slowtmr+0x314>
  ++tcp_ticks;
 8007d38:	6833      	ldr	r3, [r6, #0]
 8007d3a:	3301      	adds	r3, #1
 8007d3c:	6033      	str	r3, [r6, #0]
  ++tcp_timer_ctr;
 8007d3e:	4bb3      	ldr	r3, [pc, #716]	; (800800c <tcp_slowtmr+0x2e0>)
 8007d40:	781a      	ldrb	r2, [r3, #0]
 8007d42:	9304      	str	r3, [sp, #16]
 8007d44:	3201      	adds	r2, #1
 8007d46:	701a      	strb	r2, [r3, #0]
  pcb = tcp_active_pcbs;
 8007d48:	4bb1      	ldr	r3, [pc, #708]	; (8008010 <tcp_slowtmr+0x2e4>)
  prev = NULL;
 8007d4a:	f04f 0900 	mov.w	r9, #0
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8007d4e:	4fb1      	ldr	r7, [pc, #708]	; (8008014 <tcp_slowtmr+0x2e8>)
  pcb = tcp_active_pcbs;
 8007d50:	681c      	ldr	r4, [r3, #0]
 8007d52:	4698      	mov	r8, r3
  while (pcb != NULL) {
 8007d54:	b96c      	cbnz	r4, 8007d72 <tcp_slowtmr+0x46>
  pcb = tcp_tw_pcbs;
 8007d56:	4fb0      	ldr	r7, [pc, #704]	; (8008018 <tcp_slowtmr+0x2ec>)
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8007d58:	f8df 82b8 	ldr.w	r8, [pc, #696]	; 8008014 <tcp_slowtmr+0x2e8>
  pcb = tcp_tw_pcbs;
 8007d5c:	683d      	ldr	r5, [r7, #0]
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8007d5e:	f8df a2e4 	ldr.w	sl, [pc, #740]	; 8008044 <tcp_slowtmr+0x318>
 8007d62:	f8df 92bc 	ldr.w	r9, [pc, #700]	; 8008020 <tcp_slowtmr+0x2f4>
  while (pcb != NULL) {
 8007d66:	2d00      	cmp	r5, #0
 8007d68:	f040 81b8 	bne.w	80080dc <tcp_slowtmr+0x3b0>
}
 8007d6c:	b007      	add	sp, #28
 8007d6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8007d72:	7d23      	ldrb	r3, [r4, #20]
 8007d74:	b933      	cbnz	r3, 8007d84 <tcp_slowtmr+0x58>
 8007d76:	463b      	mov	r3, r7
 8007d78:	f240 42be 	movw	r2, #1214	; 0x4be
 8007d7c:	49a7      	ldr	r1, [pc, #668]	; (800801c <tcp_slowtmr+0x2f0>)
 8007d7e:	48a8      	ldr	r0, [pc, #672]	; (8008020 <tcp_slowtmr+0x2f4>)
 8007d80:	f004 f9e0 	bl	800c144 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8007d84:	7d23      	ldrb	r3, [r4, #20]
 8007d86:	2b01      	cmp	r3, #1
 8007d88:	d106      	bne.n	8007d98 <tcp_slowtmr+0x6c>
 8007d8a:	463b      	mov	r3, r7
 8007d8c:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8007d90:	49a4      	ldr	r1, [pc, #656]	; (8008024 <tcp_slowtmr+0x2f8>)
 8007d92:	48a3      	ldr	r0, [pc, #652]	; (8008020 <tcp_slowtmr+0x2f4>)
 8007d94:	f004 f9d6 	bl	800c144 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8007d98:	7d23      	ldrb	r3, [r4, #20]
 8007d9a:	2b0a      	cmp	r3, #10
 8007d9c:	d106      	bne.n	8007dac <tcp_slowtmr+0x80>
 8007d9e:	463b      	mov	r3, r7
 8007da0:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8007da4:	49a0      	ldr	r1, [pc, #640]	; (8008028 <tcp_slowtmr+0x2fc>)
 8007da6:	489e      	ldr	r0, [pc, #632]	; (8008020 <tcp_slowtmr+0x2f4>)
 8007da8:	f004 f9cc 	bl	800c144 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8007dac:	9b04      	ldr	r3, [sp, #16]
 8007dae:	7fa2      	ldrb	r2, [r4, #30]
 8007db0:	781b      	ldrb	r3, [r3, #0]
 8007db2:	429a      	cmp	r2, r3
 8007db4:	d103      	bne.n	8007dbe <tcp_slowtmr+0x92>
      pcb = pcb->next;
 8007db6:	68e5      	ldr	r5, [r4, #12]
 8007db8:	46a1      	mov	r9, r4
 8007dba:	462c      	mov	r4, r5
 8007dbc:	e7ca      	b.n	8007d54 <tcp_slowtmr+0x28>
    pcb->last_timer = tcp_timer_ctr;
 8007dbe:	77a3      	strb	r3, [r4, #30]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8007dc0:	7d23      	ldrb	r3, [r4, #20]
 8007dc2:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 8007dc6:	2b02      	cmp	r3, #2
 8007dc8:	d102      	bne.n	8007dd0 <tcp_slowtmr+0xa4>
 8007dca:	2a05      	cmp	r2, #5
 8007dcc:	f200 81bd 	bhi.w	800814a <tcp_slowtmr+0x41e>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8007dd0:	2a0b      	cmp	r2, #11
 8007dd2:	d82f      	bhi.n	8007e34 <tcp_slowtmr+0x108>
      if (pcb->persist_backoff > 0) {
 8007dd4:	f894 b095 	ldrb.w	fp, [r4, #149]	; 0x95
 8007dd8:	f1bb 0f00 	cmp.w	fp, #0
 8007ddc:	f000 80c3 	beq.w	8007f66 <tcp_slowtmr+0x23a>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8007de0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8007de2:	b133      	cbz	r3, 8007df2 <tcp_slowtmr+0xc6>
 8007de4:	463b      	mov	r3, r7
 8007de6:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8007dea:	4990      	ldr	r1, [pc, #576]	; (800802c <tcp_slowtmr+0x300>)
 8007dec:	488c      	ldr	r0, [pc, #560]	; (8008020 <tcp_slowtmr+0x2f4>)
 8007dee:	f004 f9a9 	bl	800c144 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8007df2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8007df4:	b933      	cbnz	r3, 8007e04 <tcp_slowtmr+0xd8>
 8007df6:	463b      	mov	r3, r7
 8007df8:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8007dfc:	498c      	ldr	r1, [pc, #560]	; (8008030 <tcp_slowtmr+0x304>)
 8007dfe:	4888      	ldr	r0, [pc, #544]	; (8008020 <tcp_slowtmr+0x2f4>)
 8007e00:	f004 f9a0 	bl	800c144 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8007e04:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
 8007e08:	2b0b      	cmp	r3, #11
 8007e0a:	d813      	bhi.n	8007e34 <tcp_slowtmr+0x108>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8007e0c:	f894 2095 	ldrb.w	r2, [r4, #149]	; 0x95
 8007e10:	4b88      	ldr	r3, [pc, #544]	; (8008034 <tcp_slowtmr+0x308>)
 8007e12:	4413      	add	r3, r2
 8007e14:	f813 2c01 	ldrb.w	r2, [r3, #-1]
          if (pcb->persist_cnt < backoff_cnt) {
 8007e18:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
 8007e1c:	429a      	cmp	r2, r3
            pcb->persist_cnt++;
 8007e1e:	bf84      	itt	hi
 8007e20:	3301      	addhi	r3, #1
 8007e22:	f884 3094 	strbhi.w	r3, [r4, #148]	; 0x94
          if (pcb->persist_cnt >= backoff_cnt) {
 8007e26:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d27a      	bcs.n	8007f24 <tcp_slowtmr+0x1f8>
    pcb_remove = 0;
 8007e2e:	f04f 0b00 	mov.w	fp, #0
 8007e32:	e001      	b.n	8007e38 <tcp_slowtmr+0x10c>
      ++pcb_remove;
 8007e34:	f04f 0b01 	mov.w	fp, #1
    if (pcb->state == FIN_WAIT_2) {
 8007e38:	7d23      	ldrb	r3, [r4, #20]
 8007e3a:	2b06      	cmp	r3, #6
 8007e3c:	d10b      	bne.n	8007e56 <tcp_slowtmr+0x12a>
      if (pcb->flags & TF_RXCLOSED) {
 8007e3e:	8b62      	ldrh	r2, [r4, #26]
 8007e40:	06d2      	lsls	r2, r2, #27
 8007e42:	d508      	bpl.n	8007e56 <tcp_slowtmr+0x12a>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007e44:	6832      	ldr	r2, [r6, #0]
 8007e46:	6a21      	ldr	r1, [r4, #32]
 8007e48:	1a52      	subs	r2, r2, r1
 8007e4a:	2a28      	cmp	r2, #40	; 0x28
          ++pcb_remove;
 8007e4c:	bf84      	itt	hi
 8007e4e:	f10b 0b01 	addhi.w	fp, fp, #1
 8007e52:	fa5f fb8b 	uxtbhi.w	fp, fp
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8007e56:	7a65      	ldrb	r5, [r4, #9]
 8007e58:	f015 0508 	ands.w	r5, r5, #8
 8007e5c:	d019      	beq.n	8007e92 <tcp_slowtmr+0x166>
 8007e5e:	2b04      	cmp	r3, #4
 8007e60:	d002      	beq.n	8007e68 <tcp_slowtmr+0x13c>
        ((pcb->state == ESTABLISHED) ||
 8007e62:	2b07      	cmp	r3, #7
 8007e64:	f040 8102 	bne.w	800806c <tcp_slowtmr+0x340>
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8007e68:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
 8007e6c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007e70:	6831      	ldr	r1, [r6, #0]
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8007e72:	f505 2224 	add.w	r2, r5, #671744	; 0xa4000
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007e76:	6a23      	ldr	r3, [r4, #32]
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8007e78:	f602 42b8 	addw	r2, r2, #3256	; 0xcb8
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007e7c:	1ac9      	subs	r1, r1, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8007e7e:	fbb2 f2f0 	udiv	r2, r2, r0
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007e82:	4291      	cmp	r1, r2
 8007e84:	f240 80e0 	bls.w	8008048 <tcp_slowtmr+0x31c>
        ++pcb_remove;
 8007e88:	f10b 0b01 	add.w	fp, fp, #1
        ++pcb_reset;
 8007e8c:	2501      	movs	r5, #1
        ++pcb_remove;
 8007e8e:	fa5f fb8b 	uxtb.w	fp, fp
    if (pcb->state == SYN_RCVD) {
 8007e92:	7d23      	ldrb	r3, [r4, #20]
 8007e94:	2b03      	cmp	r3, #3
 8007e96:	f040 80eb 	bne.w	8008070 <tcp_slowtmr+0x344>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007e9a:	6833      	ldr	r3, [r6, #0]
 8007e9c:	6a22      	ldr	r2, [r4, #32]
 8007e9e:	1a9b      	subs	r3, r3, r2
 8007ea0:	2b28      	cmp	r3, #40	; 0x28
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8007ea2:	d803      	bhi.n	8007eac <tcp_slowtmr+0x180>
    if (pcb_remove) {
 8007ea4:	f1bb 0f00 	cmp.w	fp, #0
 8007ea8:	f000 80f7 	beq.w	800809a <tcp_slowtmr+0x36e>
      tcp_pcb_purge(pcb);
 8007eac:	4620      	mov	r0, r4
      tcp_err_fn err_fn = pcb->errf;
 8007eae:	f8d4 b08c 	ldr.w	fp, [r4, #140]	; 0x8c
      tcp_pcb_purge(pcb);
 8007eb2:	f7ff ff0f 	bl	8007cd4 <tcp_pcb_purge>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8007eb6:	f8d8 3000 	ldr.w	r3, [r8]
      if (prev != NULL) {
 8007eba:	f1b9 0f00 	cmp.w	r9, #0
 8007ebe:	f000 80df 	beq.w	8008080 <tcp_slowtmr+0x354>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8007ec2:	429c      	cmp	r4, r3
 8007ec4:	d106      	bne.n	8007ed4 <tcp_slowtmr+0x1a8>
 8007ec6:	463b      	mov	r3, r7
 8007ec8:	f240 526d 	movw	r2, #1389	; 0x56d
 8007ecc:	495a      	ldr	r1, [pc, #360]	; (8008038 <tcp_slowtmr+0x30c>)
 8007ece:	4854      	ldr	r0, [pc, #336]	; (8008020 <tcp_slowtmr+0x2f4>)
 8007ed0:	f004 f938 	bl	800c144 <iprintf>
        prev->next = pcb->next;
 8007ed4:	68e3      	ldr	r3, [r4, #12]
 8007ed6:	f8c9 300c 	str.w	r3, [r9, #12]
      if (pcb_reset) {
 8007eda:	b15d      	cbz	r5, 8007ef4 <tcp_slowtmr+0x1c8>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8007edc:	8b23      	ldrh	r3, [r4, #24]
 8007ede:	4620      	mov	r0, r4
 8007ee0:	9302      	str	r3, [sp, #8]
 8007ee2:	8ae3      	ldrh	r3, [r4, #22]
 8007ee4:	9301      	str	r3, [sp, #4]
 8007ee6:	1d23      	adds	r3, r4, #4
 8007ee8:	9300      	str	r3, [sp, #0]
 8007eea:	4623      	mov	r3, r4
 8007eec:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007eee:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8007ef0:	f002 fc5c 	bl	800a7ac <tcp_rst>
      err_arg = pcb->callback_arg;
 8007ef4:	6923      	ldr	r3, [r4, #16]
      tcp_free(pcb2);
 8007ef6:	4620      	mov	r0, r4
      pcb = pcb->next;
 8007ef8:	68e5      	ldr	r5, [r4, #12]
      err_arg = pcb->callback_arg;
 8007efa:	9305      	str	r3, [sp, #20]
      tcp_free(pcb2);
 8007efc:	f7ff fd06 	bl	800790c <tcp_free>
      tcp_active_pcbs_changed = 0;
 8007f00:	2200      	movs	r2, #0
 8007f02:	f88a 2000 	strb.w	r2, [sl]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8007f06:	f1bb 0f00 	cmp.w	fp, #0
 8007f0a:	d004      	beq.n	8007f16 <tcp_slowtmr+0x1ea>
 8007f0c:	9b05      	ldr	r3, [sp, #20]
 8007f0e:	f06f 010c 	mvn.w	r1, #12
 8007f12:	4618      	mov	r0, r3
 8007f14:	47d8      	blx	fp
      if (tcp_active_pcbs_changed) {
 8007f16:	f89a 3000 	ldrb.w	r3, [sl]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	f47f af14 	bne.w	8007d48 <tcp_slowtmr+0x1c>
 8007f20:	464c      	mov	r4, r9
 8007f22:	e749      	b.n	8007db8 <tcp_slowtmr+0x8c>
            if (pcb->snd_wnd == 0) {
 8007f24:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8007f28:	4620      	mov	r0, r4
            if (pcb->snd_wnd == 0) {
 8007f2a:	b989      	cbnz	r1, 8007f50 <tcp_slowtmr+0x224>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8007f2c:	f002 febc 	bl	800aca8 <tcp_zero_window_probe>
 8007f30:	2800      	cmp	r0, #0
 8007f32:	f47f af7c 	bne.w	8007e2e <tcp_slowtmr+0x102>
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8007f36:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
              pcb->persist_cnt = 0;
 8007f3a:	f04f 0b00 	mov.w	fp, #0
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8007f3e:	2b06      	cmp	r3, #6
              pcb->persist_cnt = 0;
 8007f40:	f884 b094 	strb.w	fp, [r4, #148]	; 0x94
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8007f44:	f63f af73 	bhi.w	8007e2e <tcp_slowtmr+0x102>
                pcb->persist_backoff++;
 8007f48:	3301      	adds	r3, #1
 8007f4a:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
 8007f4e:	e773      	b.n	8007e38 <tcp_slowtmr+0x10c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8007f50:	f002 f9dc 	bl	800a30c <tcp_split_unsent_seg>
 8007f54:	2800      	cmp	r0, #0
 8007f56:	d1ee      	bne.n	8007f36 <tcp_slowtmr+0x20a>
                if (tcp_output(pcb) == ERR_OK) {
 8007f58:	4620      	mov	r0, r4
 8007f5a:	f002 fc9d 	bl	800a898 <tcp_output>
 8007f5e:	2800      	cmp	r0, #0
 8007f60:	f43f af65 	beq.w	8007e2e <tcp_slowtmr+0x102>
 8007f64:	e7e7      	b.n	8007f36 <tcp_slowtmr+0x20a>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8007f66:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	db05      	blt.n	8007f7a <tcp_slowtmr+0x24e>
 8007f6e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8007f72:	4293      	cmp	r3, r2
          ++pcb->rtime;
 8007f74:	bf1c      	itt	ne
 8007f76:	3301      	addne	r3, #1
 8007f78:	8623      	strhne	r3, [r4, #48]	; 0x30
        if (pcb->rtime >= pcb->rto) {
 8007f7a:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
 8007f7e:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 8007f82:	429a      	cmp	r2, r3
 8007f84:	f6ff af53 	blt.w	8007e2e <tcp_slowtmr+0x102>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8007f88:	4620      	mov	r0, r4
 8007f8a:	f002 fb53 	bl	800a634 <tcp_rexmit_rto_prepare>
 8007f8e:	b138      	cbz	r0, 8007fa0 <tcp_slowtmr+0x274>
 8007f90:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	f47f af4b 	bne.w	8007e2e <tcp_slowtmr+0x102>
 8007f98:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	f43f af47 	beq.w	8007e2e <tcp_slowtmr+0x102>
            if (pcb->state != SYN_SENT) {
 8007fa0:	7d23      	ldrb	r3, [r4, #20]
 8007fa2:	2b02      	cmp	r3, #2
 8007fa4:	d014      	beq.n	8007fd0 <tcp_slowtmr+0x2a4>
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8007fa6:	f9b4 203c 	ldrsh.w	r2, [r4, #60]	; 0x3c
 8007faa:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
 8007fae:	4923      	ldr	r1, [pc, #140]	; (800803c <tcp_slowtmr+0x310>)
 8007fb0:	eb03 03e2 	add.w	r3, r3, r2, asr #3
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8007fb4:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8007fb8:	2a0c      	cmp	r2, #12
 8007fba:	bf28      	it	cs
 8007fbc:	220c      	movcs	r2, #12
 8007fbe:	5c8a      	ldrb	r2, [r1, r2]
 8007fc0:	4093      	lsls	r3, r2
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8007fc2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	bfa8      	it	ge
 8007fca:	4613      	movge	r3, r2
 8007fcc:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8007fd0:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
            pcb->rtime = 0;
 8007fd4:	2100      	movs	r1, #0
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8007fd6:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8007fda:	8e60      	ldrh	r0, [r4, #50]	; 0x32
            pcb->ssthresh = eff_wnd >> 1;
 8007fdc:	4293      	cmp	r3, r2
            pcb->rtime = 0;
 8007fde:	8621      	strh	r1, [r4, #48]	; 0x30
            pcb->cwnd = pcb->mss;
 8007fe0:	f8a4 0048 	strh.w	r0, [r4, #72]	; 0x48
            pcb->ssthresh = eff_wnd >> 1;
 8007fe4:	bf28      	it	cs
 8007fe6:	4613      	movcs	r3, r2
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8007fe8:	0042      	lsls	r2, r0, #1
            pcb->bytes_acked = 0;
 8007fea:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
            tcp_rexmit_rto_commit(pcb);
 8007fee:	4620      	mov	r0, r4
            pcb->ssthresh = eff_wnd >> 1;
 8007ff0:	085b      	lsrs	r3, r3, #1
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8007ff2:	b292      	uxth	r2, r2
            pcb->ssthresh = eff_wnd >> 1;
 8007ff4:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8007ff8:	4293      	cmp	r3, r2
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8007ffa:	bf38      	it	cc
 8007ffc:	f8a4 204a 	strhcc.w	r2, [r4, #74]	; 0x4a
            tcp_rexmit_rto_commit(pcb);
 8008000:	f002 fdf4 	bl	800abec <tcp_rexmit_rto_commit>
 8008004:	e718      	b.n	8007e38 <tcp_slowtmr+0x10c>
 8008006:	bf00      	nop
 8008008:	2000d390 	.word	0x2000d390
 800800c:	20006b7a 	.word	0x20006b7a
 8008010:	2000d38c 	.word	0x2000d38c
 8008014:	0800f082 	.word	0x0800f082
 8008018:	2000d39c 	.word	0x2000d39c
 800801c:	0800f395 	.word	0x0800f395
 8008020:	0800d104 	.word	0x0800d104
 8008024:	0800f3bf 	.word	0x0800f3bf
 8008028:	0800f3e9 	.word	0x0800f3e9
 800802c:	0800f416 	.word	0x0800f416
 8008030:	0800f448 	.word	0x0800f448
 8008034:	0800f274 	.word	0x0800f274
 8008038:	0800f47d 	.word	0x0800f47d
 800803c:	0800efce 	.word	0x0800efce
 8008040:	2000d388 	.word	0x2000d388
 8008044:	0800f4d2 	.word	0x0800f4d2
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8008048:	f894 3097 	ldrb.w	r3, [r4, #151]	; 0x97
 800804c:	4a40      	ldr	r2, [pc, #256]	; (8008150 <tcp_slowtmr+0x424>)
 800804e:	fb02 5303 	mla	r3, r2, r3, r5
                 / TCP_SLOW_INTERVAL) {
 8008052:	fbb3 f3f0 	udiv	r3, r3, r0
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008056:	4299      	cmp	r1, r3
 8008058:	d908      	bls.n	800806c <tcp_slowtmr+0x340>
        err = tcp_keepalive(pcb);
 800805a:	4620      	mov	r0, r4
 800805c:	f002 fdfc 	bl	800ac58 <tcp_keepalive>
        if (err == ERR_OK) {
 8008060:	b920      	cbnz	r0, 800806c <tcp_slowtmr+0x340>
          pcb->keep_cnt_sent++;
 8008062:	f894 3097 	ldrb.w	r3, [r4, #151]	; 0x97
 8008066:	3301      	adds	r3, #1
 8008068:	f884 3097 	strb.w	r3, [r4, #151]	; 0x97
    pcb_reset = 0;
 800806c:	2500      	movs	r5, #0
 800806e:	e710      	b.n	8007e92 <tcp_slowtmr+0x166>
    if (pcb->state == LAST_ACK) {
 8008070:	2b09      	cmp	r3, #9
 8008072:	f47f af17 	bne.w	8007ea4 <tcp_slowtmr+0x178>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8008076:	6833      	ldr	r3, [r6, #0]
 8008078:	6a22      	ldr	r2, [r4, #32]
 800807a:	1a9b      	subs	r3, r3, r2
 800807c:	2bf0      	cmp	r3, #240	; 0xf0
 800807e:	e710      	b.n	8007ea2 <tcp_slowtmr+0x176>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8008080:	429c      	cmp	r4, r3
 8008082:	d006      	beq.n	8008092 <tcp_slowtmr+0x366>
 8008084:	463b      	mov	r3, r7
 8008086:	f240 5271 	movw	r2, #1393	; 0x571
 800808a:	4932      	ldr	r1, [pc, #200]	; (8008154 <tcp_slowtmr+0x428>)
 800808c:	4832      	ldr	r0, [pc, #200]	; (8008158 <tcp_slowtmr+0x42c>)
 800808e:	f004 f859 	bl	800c144 <iprintf>
        tcp_active_pcbs = pcb->next;
 8008092:	68e3      	ldr	r3, [r4, #12]
 8008094:	f8c8 3000 	str.w	r3, [r8]
 8008098:	e71f      	b.n	8007eda <tcp_slowtmr+0x1ae>
      ++prev->polltmr;
 800809a:	7f23      	ldrb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800809c:	7f62      	ldrb	r2, [r4, #29]
      ++prev->polltmr;
 800809e:	3301      	adds	r3, #1
      pcb = pcb->next;
 80080a0:	68e5      	ldr	r5, [r4, #12]
      ++prev->polltmr;
 80080a2:	b2db      	uxtb	r3, r3
      if (prev->polltmr >= prev->pollinterval) {
 80080a4:	429a      	cmp	r2, r3
      ++prev->polltmr;
 80080a6:	7723      	strb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80080a8:	f63f ae86 	bhi.w	8007db8 <tcp_slowtmr+0x8c>
        TCP_EVENT_POLL(prev, err);
 80080ac:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
        prev->polltmr = 0;
 80080b0:	f884 b01c 	strb.w	fp, [r4, #28]
        tcp_active_pcbs_changed = 0;
 80080b4:	f88a b000 	strb.w	fp, [sl]
        TCP_EVENT_POLL(prev, err);
 80080b8:	b173      	cbz	r3, 80080d8 <tcp_slowtmr+0x3ac>
 80080ba:	4621      	mov	r1, r4
 80080bc:	6920      	ldr	r0, [r4, #16]
 80080be:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
 80080c0:	f89a 3000 	ldrb.w	r3, [sl]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	f47f ae3f 	bne.w	8007d48 <tcp_slowtmr+0x1c>
        if (err == ERR_OK) {
 80080ca:	2800      	cmp	r0, #0
 80080cc:	f47f ae74 	bne.w	8007db8 <tcp_slowtmr+0x8c>
          tcp_output(prev);
 80080d0:	4620      	mov	r0, r4
 80080d2:	f002 fbe1 	bl	800a898 <tcp_output>
 80080d6:	e66f      	b.n	8007db8 <tcp_slowtmr+0x8c>
        TCP_EVENT_POLL(prev, err);
 80080d8:	4658      	mov	r0, fp
 80080da:	e7f1      	b.n	80080c0 <tcp_slowtmr+0x394>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80080dc:	7d2b      	ldrb	r3, [r5, #20]
 80080de:	2b0a      	cmp	r3, #10
 80080e0:	d006      	beq.n	80080f0 <tcp_slowtmr+0x3c4>
 80080e2:	4643      	mov	r3, r8
 80080e4:	f240 52a1 	movw	r2, #1441	; 0x5a1
 80080e8:	4651      	mov	r1, sl
 80080ea:	4648      	mov	r0, r9
 80080ec:	f004 f82a 	bl	800c144 <iprintf>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80080f0:	6833      	ldr	r3, [r6, #0]
 80080f2:	6a2a      	ldr	r2, [r5, #32]
 80080f4:	1a9b      	subs	r3, r3, r2
 80080f6:	2bf0      	cmp	r3, #240	; 0xf0
 80080f8:	d815      	bhi.n	8008126 <tcp_slowtmr+0x3fa>
      pcb = pcb->next;
 80080fa:	462c      	mov	r4, r5
 80080fc:	68ed      	ldr	r5, [r5, #12]
 80080fe:	e632      	b.n	8007d66 <tcp_slowtmr+0x3a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	429d      	cmp	r5, r3
 8008104:	d106      	bne.n	8008114 <tcp_slowtmr+0x3e8>
 8008106:	4643      	mov	r3, r8
 8008108:	f240 52af 	movw	r2, #1455	; 0x5af
 800810c:	4913      	ldr	r1, [pc, #76]	; (800815c <tcp_slowtmr+0x430>)
 800810e:	4648      	mov	r0, r9
 8008110:	f004 f818 	bl	800c144 <iprintf>
        prev->next = pcb->next;
 8008114:	68eb      	ldr	r3, [r5, #12]
 8008116:	60e3      	str	r3, [r4, #12]
      pcb = pcb->next;
 8008118:	f8d5 b00c 	ldr.w	fp, [r5, #12]
      tcp_free(pcb2);
 800811c:	4628      	mov	r0, r5
 800811e:	f7ff fbf5 	bl	800790c <tcp_free>
      pcb = pcb->next;
 8008122:	465d      	mov	r5, fp
 8008124:	e61f      	b.n	8007d66 <tcp_slowtmr+0x3a>
      tcp_pcb_purge(pcb);
 8008126:	4628      	mov	r0, r5
 8008128:	f7ff fdd4 	bl	8007cd4 <tcp_pcb_purge>
      if (prev != NULL) {
 800812c:	2c00      	cmp	r4, #0
 800812e:	d1e7      	bne.n	8008100 <tcp_slowtmr+0x3d4>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	429d      	cmp	r5, r3
 8008134:	d006      	beq.n	8008144 <tcp_slowtmr+0x418>
 8008136:	4643      	mov	r3, r8
 8008138:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800813c:	4908      	ldr	r1, [pc, #32]	; (8008160 <tcp_slowtmr+0x434>)
 800813e:	4648      	mov	r0, r9
 8008140:	f004 f800 	bl	800c144 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8008144:	68eb      	ldr	r3, [r5, #12]
 8008146:	603b      	str	r3, [r7, #0]
 8008148:	e7e6      	b.n	8008118 <tcp_slowtmr+0x3ec>
      ++pcb_remove;
 800814a:	f04f 0b01 	mov.w	fp, #1
 800814e:	e682      	b.n	8007e56 <tcp_slowtmr+0x12a>
 8008150:	000124f8 	.word	0x000124f8
 8008154:	0800f4a8 	.word	0x0800f4a8
 8008158:	0800d104 	.word	0x0800d104
 800815c:	0800f501 	.word	0x0800f501
 8008160:	0800f528 	.word	0x0800f528

08008164 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8008164:	b538      	push	{r3, r4, r5, lr}
 8008166:	4605      	mov	r5, r0
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8008168:	460c      	mov	r4, r1
 800816a:	b931      	cbnz	r1, 800817a <tcp_pcb_remove+0x16>
 800816c:	4b24      	ldr	r3, [pc, #144]	; (8008200 <tcp_pcb_remove+0x9c>)
 800816e:	f640 0283 	movw	r2, #2179	; 0x883
 8008172:	4924      	ldr	r1, [pc, #144]	; (8008204 <tcp_pcb_remove+0xa0>)
 8008174:	4824      	ldr	r0, [pc, #144]	; (8008208 <tcp_pcb_remove+0xa4>)
 8008176:	f003 ffe5 	bl	800c144 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800817a:	b935      	cbnz	r5, 800818a <tcp_pcb_remove+0x26>
 800817c:	4b20      	ldr	r3, [pc, #128]	; (8008200 <tcp_pcb_remove+0x9c>)
 800817e:	f640 0284 	movw	r2, #2180	; 0x884
 8008182:	4922      	ldr	r1, [pc, #136]	; (800820c <tcp_pcb_remove+0xa8>)
 8008184:	4820      	ldr	r0, [pc, #128]	; (8008208 <tcp_pcb_remove+0xa4>)
 8008186:	f003 ffdd 	bl	800c144 <iprintf>

  TCP_RMV(pcblist, pcb);
 800818a:	682b      	ldr	r3, [r5, #0]
 800818c:	429c      	cmp	r4, r3
 800818e:	d12e      	bne.n	80081ee <tcp_pcb_remove+0x8a>
 8008190:	68e3      	ldr	r3, [r4, #12]
 8008192:	602b      	str	r3, [r5, #0]
 8008194:	2300      	movs	r3, #0

  tcp_pcb_purge(pcb);
 8008196:	4620      	mov	r0, r4
  TCP_RMV(pcblist, pcb);
 8008198:	60e3      	str	r3, [r4, #12]
  tcp_pcb_purge(pcb);
 800819a:	f7ff fd9b 	bl	8007cd4 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800819e:	7d23      	ldrb	r3, [r4, #20]
 80081a0:	2b0a      	cmp	r3, #10
 80081a2:	d00a      	beq.n	80081ba <tcp_pcb_remove+0x56>
 80081a4:	2b01      	cmp	r3, #1
 80081a6:	d008      	beq.n	80081ba <tcp_pcb_remove+0x56>
      (pcb->state != LISTEN) &&
      (pcb->flags & TF_ACK_DELAY)) {
 80081a8:	8b63      	ldrh	r3, [r4, #26]
      (pcb->state != LISTEN) &&
 80081aa:	07da      	lsls	r2, r3, #31
 80081ac:	d505      	bpl.n	80081ba <tcp_pcb_remove+0x56>
    tcp_ack_now(pcb);
 80081ae:	f043 0302 	orr.w	r3, r3, #2
    tcp_output(pcb);
 80081b2:	4620      	mov	r0, r4
    tcp_ack_now(pcb);
 80081b4:	8363      	strh	r3, [r4, #26]
    tcp_output(pcb);
 80081b6:	f002 fb6f 	bl	800a898 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80081ba:	7d23      	ldrb	r3, [r4, #20]
 80081bc:	2b01      	cmp	r3, #1
 80081be:	d011      	beq.n	80081e4 <tcp_pcb_remove+0x80>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80081c0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80081c2:	b133      	cbz	r3, 80081d2 <tcp_pcb_remove+0x6e>
 80081c4:	4b0e      	ldr	r3, [pc, #56]	; (8008200 <tcp_pcb_remove+0x9c>)
 80081c6:	f640 0293 	movw	r2, #2195	; 0x893
 80081ca:	4911      	ldr	r1, [pc, #68]	; (8008210 <tcp_pcb_remove+0xac>)
 80081cc:	480e      	ldr	r0, [pc, #56]	; (8008208 <tcp_pcb_remove+0xa4>)
 80081ce:	f003 ffb9 	bl	800c144 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80081d2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80081d4:	b133      	cbz	r3, 80081e4 <tcp_pcb_remove+0x80>
 80081d6:	4b0a      	ldr	r3, [pc, #40]	; (8008200 <tcp_pcb_remove+0x9c>)
 80081d8:	f640 0294 	movw	r2, #2196	; 0x894
 80081dc:	490d      	ldr	r1, [pc, #52]	; (8008214 <tcp_pcb_remove+0xb0>)
 80081de:	480a      	ldr	r0, [pc, #40]	; (8008208 <tcp_pcb_remove+0xa4>)
 80081e0:	f003 ffb0 	bl	800c144 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80081e4:	2300      	movs	r3, #0
 80081e6:	7523      	strb	r3, [r4, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80081e8:	82e3      	strh	r3, [r4, #22]
 80081ea:	bd38      	pop	{r3, r4, r5, pc}
 80081ec:	4613      	mov	r3, r2
  TCP_RMV(pcblist, pcb);
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d0d0      	beq.n	8008194 <tcp_pcb_remove+0x30>
 80081f2:	68da      	ldr	r2, [r3, #12]
 80081f4:	4294      	cmp	r4, r2
 80081f6:	d1f9      	bne.n	80081ec <tcp_pcb_remove+0x88>
 80081f8:	68e2      	ldr	r2, [r4, #12]
 80081fa:	60da      	str	r2, [r3, #12]
 80081fc:	e7ca      	b.n	8008194 <tcp_pcb_remove+0x30>
 80081fe:	bf00      	nop
 8008200:	0800f082 	.word	0x0800f082
 8008204:	0800f207 	.word	0x0800f207
 8008208:	0800d104 	.word	0x0800d104
 800820c:	0800f223 	.word	0x0800f223
 8008210:	0800f243 	.word	0x0800f243
 8008214:	0800f25b 	.word	0x0800f25b

08008218 <tcp_close_shutdown>:
{
 8008218:	b530      	push	{r4, r5, lr}
 800821a:	460d      	mov	r5, r1
 800821c:	b085      	sub	sp, #20
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800821e:	4604      	mov	r4, r0
 8008220:	b930      	cbnz	r0, 8008230 <tcp_close_shutdown+0x18>
 8008222:	4b4b      	ldr	r3, [pc, #300]	; (8008350 <tcp_close_shutdown+0x138>)
 8008224:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8008228:	494a      	ldr	r1, [pc, #296]	; (8008354 <tcp_close_shutdown+0x13c>)
 800822a:	484b      	ldr	r0, [pc, #300]	; (8008358 <tcp_close_shutdown+0x140>)
 800822c:	f003 ff8a 	bl	800c144 <iprintf>
 8008230:	7d23      	ldrb	r3, [r4, #20]
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8008232:	2d00      	cmp	r5, #0
 8008234:	d040      	beq.n	80082b8 <tcp_close_shutdown+0xa0>
 8008236:	2b04      	cmp	r3, #4
 8008238:	d001      	beq.n	800823e <tcp_close_shutdown+0x26>
 800823a:	2b07      	cmp	r3, #7
 800823c:	d13c      	bne.n	80082b8 <tcp_close_shutdown+0xa0>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800823e:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8008240:	b922      	cbnz	r2, 800824c <tcp_close_shutdown+0x34>
 8008242:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 8008244:	f640 3268 	movw	r2, #2920	; 0xb68
 8008248:	4291      	cmp	r1, r2
 800824a:	d035      	beq.n	80082b8 <tcp_close_shutdown+0xa0>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800824c:	8b63      	ldrh	r3, [r4, #26]
 800824e:	06db      	lsls	r3, r3, #27
 8008250:	d406      	bmi.n	8008260 <tcp_close_shutdown+0x48>
 8008252:	4b3f      	ldr	r3, [pc, #252]	; (8008350 <tcp_close_shutdown+0x138>)
 8008254:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8008258:	4940      	ldr	r1, [pc, #256]	; (800835c <tcp_close_shutdown+0x144>)
 800825a:	483f      	ldr	r0, [pc, #252]	; (8008358 <tcp_close_shutdown+0x140>)
 800825c:	f003 ff72 	bl	800c144 <iprintf>
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8008260:	8b23      	ldrh	r3, [r4, #24]
 8008262:	4620      	mov	r0, r4
 8008264:	9302      	str	r3, [sp, #8]
 8008266:	8ae3      	ldrh	r3, [r4, #22]
 8008268:	9301      	str	r3, [sp, #4]
 800826a:	1d23      	adds	r3, r4, #4
 800826c:	9300      	str	r3, [sp, #0]
 800826e:	4623      	mov	r3, r4
 8008270:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008272:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8008274:	f002 fa9a 	bl	800a7ac <tcp_rst>
      tcp_pcb_purge(pcb);
 8008278:	4620      	mov	r0, r4
 800827a:	f7ff fd2b 	bl	8007cd4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800827e:	4a38      	ldr	r2, [pc, #224]	; (8008360 <tcp_close_shutdown+0x148>)
 8008280:	6813      	ldr	r3, [r2, #0]
 8008282:	429c      	cmp	r4, r3
 8008284:	d110      	bne.n	80082a8 <tcp_close_shutdown+0x90>
 8008286:	68e3      	ldr	r3, [r4, #12]
 8008288:	6013      	str	r3, [r2, #0]
 800828a:	2300      	movs	r3, #0
 800828c:	2201      	movs	r2, #1
 800828e:	60e3      	str	r3, [r4, #12]
 8008290:	4b34      	ldr	r3, [pc, #208]	; (8008364 <tcp_close_shutdown+0x14c>)
 8008292:	701a      	strb	r2, [r3, #0]
      if (tcp_input_pcb == pcb) {
 8008294:	4b34      	ldr	r3, [pc, #208]	; (8008368 <tcp_close_shutdown+0x150>)
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	429c      	cmp	r4, r3
 800829a:	d122      	bne.n	80082e2 <tcp_close_shutdown+0xca>
        tcp_trigger_input_pcb_close();
 800829c:	f001 fbf8 	bl	8009a90 <tcp_trigger_input_pcb_close>
}
 80082a0:	2000      	movs	r0, #0
 80082a2:	b005      	add	sp, #20
 80082a4:	bd30      	pop	{r4, r5, pc}
 80082a6:	4613      	mov	r3, r2
      TCP_RMV_ACTIVE(pcb);
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d0ee      	beq.n	800828a <tcp_close_shutdown+0x72>
 80082ac:	68da      	ldr	r2, [r3, #12]
 80082ae:	4294      	cmp	r4, r2
 80082b0:	d1f9      	bne.n	80082a6 <tcp_close_shutdown+0x8e>
 80082b2:	68e2      	ldr	r2, [r4, #12]
 80082b4:	60da      	str	r2, [r3, #12]
 80082b6:	e7e8      	b.n	800828a <tcp_close_shutdown+0x72>
  switch (pcb->state) {
 80082b8:	2b01      	cmp	r3, #1
 80082ba:	d01f      	beq.n	80082fc <tcp_close_shutdown+0xe4>
 80082bc:	d307      	bcc.n	80082ce <tcp_close_shutdown+0xb6>
 80082be:	2b02      	cmp	r3, #2
 80082c0:	d03d      	beq.n	800833e <tcp_close_shutdown+0x126>
      return tcp_close_shutdown_fin(pcb);
 80082c2:	4620      	mov	r0, r4
}
 80082c4:	b005      	add	sp, #20
 80082c6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      return tcp_close_shutdown_fin(pcb);
 80082ca:	f7ff bae3 	b.w	8007894 <tcp_close_shutdown_fin>
      if (pcb->local_port != 0) {
 80082ce:	8ae3      	ldrh	r3, [r4, #22]
 80082d0:	b13b      	cbz	r3, 80082e2 <tcp_close_shutdown+0xca>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80082d2:	4a26      	ldr	r2, [pc, #152]	; (800836c <tcp_close_shutdown+0x154>)
 80082d4:	6813      	ldr	r3, [r2, #0]
 80082d6:	429c      	cmp	r4, r3
 80082d8:	d108      	bne.n	80082ec <tcp_close_shutdown+0xd4>
 80082da:	68e3      	ldr	r3, [r4, #12]
 80082dc:	6013      	str	r3, [r2, #0]
 80082de:	2300      	movs	r3, #0
 80082e0:	60e3      	str	r3, [r4, #12]
      tcp_free(pcb);
 80082e2:	4620      	mov	r0, r4
 80082e4:	f7ff fb12 	bl	800790c <tcp_free>
      break;
 80082e8:	e7da      	b.n	80082a0 <tcp_close_shutdown+0x88>
 80082ea:	4613      	mov	r3, r2
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d0f6      	beq.n	80082de <tcp_close_shutdown+0xc6>
 80082f0:	68da      	ldr	r2, [r3, #12]
 80082f2:	4294      	cmp	r4, r2
 80082f4:	d1f9      	bne.n	80082ea <tcp_close_shutdown+0xd2>
 80082f6:	68e2      	ldr	r2, [r4, #12]
 80082f8:	60da      	str	r2, [r3, #12]
 80082fa:	e7f0      	b.n	80082de <tcp_close_shutdown+0xc6>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80082fc:	491c      	ldr	r1, [pc, #112]	; (8008370 <tcp_close_shutdown+0x158>)
      pcb->listener = NULL;
 80082fe:	2000      	movs	r0, #0
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8008300:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8008304:	6812      	ldr	r2, [r2, #0]
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8008306:	b9a2      	cbnz	r2, 8008332 <tcp_close_shutdown+0x11a>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8008308:	3301      	adds	r3, #1
 800830a:	2b04      	cmp	r3, #4
 800830c:	d1f8      	bne.n	8008300 <tcp_close_shutdown+0xe8>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800830e:	4621      	mov	r1, r4
 8008310:	4818      	ldr	r0, [pc, #96]	; (8008374 <tcp_close_shutdown+0x15c>)
 8008312:	f7ff ff27 	bl	8008164 <tcp_pcb_remove>
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8008316:	7d23      	ldrb	r3, [r4, #20]
 8008318:	2b01      	cmp	r3, #1
 800831a:	d105      	bne.n	8008328 <tcp_close_shutdown+0x110>
 800831c:	4b0c      	ldr	r3, [pc, #48]	; (8008350 <tcp_close_shutdown+0x138>)
 800831e:	22df      	movs	r2, #223	; 0xdf
 8008320:	4915      	ldr	r1, [pc, #84]	; (8008378 <tcp_close_shutdown+0x160>)
 8008322:	480d      	ldr	r0, [pc, #52]	; (8008358 <tcp_close_shutdown+0x140>)
 8008324:	f003 ff0e 	bl	800c144 <iprintf>
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8008328:	4621      	mov	r1, r4
 800832a:	2002      	movs	r0, #2
 800832c:	f7fe fdc6 	bl	8006ebc <memp_free>
 8008330:	e7b6      	b.n	80082a0 <tcp_close_shutdown+0x88>
    if (pcb->listener == lpcb) {
 8008332:	6f95      	ldr	r5, [r2, #120]	; 0x78
 8008334:	42ac      	cmp	r4, r5
      pcb->listener = NULL;
 8008336:	bf08      	it	eq
 8008338:	6790      	streq	r0, [r2, #120]	; 0x78
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800833a:	68d2      	ldr	r2, [r2, #12]
 800833c:	e7e3      	b.n	8008306 <tcp_close_shutdown+0xee>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800833e:	4621      	mov	r1, r4
 8008340:	4807      	ldr	r0, [pc, #28]	; (8008360 <tcp_close_shutdown+0x148>)
 8008342:	f7ff ff0f 	bl	8008164 <tcp_pcb_remove>
 8008346:	2201      	movs	r2, #1
 8008348:	4b06      	ldr	r3, [pc, #24]	; (8008364 <tcp_close_shutdown+0x14c>)
 800834a:	701a      	strb	r2, [r3, #0]
 800834c:	e7c9      	b.n	80082e2 <tcp_close_shutdown+0xca>
 800834e:	bf00      	nop
 8008350:	0800f082 	.word	0x0800f082
 8008354:	0800f030 	.word	0x0800f030
 8008358:	0800d104 	.word	0x0800d104
 800835c:	0800f050 	.word	0x0800f050
 8008360:	2000d38c 	.word	0x2000d38c
 8008364:	2000d388 	.word	0x2000d388
 8008368:	2000d3a0 	.word	0x2000d3a0
 800836c:	2000d398 	.word	0x2000d398
 8008370:	0800f1dc 	.word	0x0800f1dc
 8008374:	2000d394 	.word	0x2000d394
 8008378:	0800f069 	.word	0x0800f069

0800837c <tcp_close>:
{
 800837c:	b508      	push	{r3, lr}
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800837e:	b158      	cbz	r0, 8008398 <tcp_close+0x1c>
  if (pcb->state != LISTEN) {
 8008380:	7d03      	ldrb	r3, [r0, #20]
  return tcp_close_shutdown(pcb, 1);
 8008382:	2101      	movs	r1, #1
  if (pcb->state != LISTEN) {
 8008384:	2b01      	cmp	r3, #1
    tcp_set_flags(pcb, TF_RXCLOSED);
 8008386:	bf1e      	ittt	ne
 8008388:	8b43      	ldrhne	r3, [r0, #26]
 800838a:	f043 0310 	orrne.w	r3, r3, #16
 800838e:	8343      	strhne	r3, [r0, #26]
}
 8008390:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return tcp_close_shutdown(pcb, 1);
 8008394:	f7ff bf40 	b.w	8008218 <tcp_close_shutdown>
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8008398:	4b04      	ldr	r3, [pc, #16]	; (80083ac <tcp_close+0x30>)
 800839a:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800839e:	4904      	ldr	r1, [pc, #16]	; (80083b0 <tcp_close+0x34>)
 80083a0:	4804      	ldr	r0, [pc, #16]	; (80083b4 <tcp_close+0x38>)
 80083a2:	f003 fecf 	bl	800c144 <iprintf>
}
 80083a6:	f06f 000f 	mvn.w	r0, #15
 80083aa:	bd08      	pop	{r3, pc}
 80083ac:	0800f082 	.word	0x0800f082
 80083b0:	0800f019 	.word	0x0800f019
 80083b4:	0800d104 	.word	0x0800d104

080083b8 <tcp_recv_null>:
{
 80083b8:	b510      	push	{r4, lr}
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80083ba:	4608      	mov	r0, r1
{
 80083bc:	4614      	mov	r4, r2
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80083be:	b949      	cbnz	r1, 80083d4 <tcp_recv_null+0x1c>
 80083c0:	4b0c      	ldr	r3, [pc, #48]	; (80083f4 <tcp_recv_null+0x3c>)
 80083c2:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80083c6:	490c      	ldr	r1, [pc, #48]	; (80083f8 <tcp_recv_null+0x40>)
 80083c8:	480c      	ldr	r0, [pc, #48]	; (80083fc <tcp_recv_null+0x44>)
 80083ca:	f003 febb 	bl	800c144 <iprintf>
 80083ce:	f06f 000f 	mvn.w	r0, #15
 80083d2:	bd10      	pop	{r4, pc}
  if (p != NULL) {
 80083d4:	b13a      	cbz	r2, 80083e6 <tcp_recv_null+0x2e>
    tcp_recved(pcb, p->tot_len);
 80083d6:	8911      	ldrh	r1, [r2, #8]
 80083d8:	f7ff fba6 	bl	8007b28 <tcp_recved>
    pbuf_free(p);
 80083dc:	4620      	mov	r0, r4
 80083de:	f7fe ff9f 	bl	8007320 <pbuf_free>
  return ERR_OK;
 80083e2:	2000      	movs	r0, #0
 80083e4:	bd10      	pop	{r4, pc}
  } else if (err == ERR_OK) {
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d1fb      	bne.n	80083e2 <tcp_recv_null+0x2a>
}
 80083ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return tcp_close(pcb);
 80083ee:	f7ff bfc5 	b.w	800837c <tcp_close>
 80083f2:	bf00      	nop
 80083f4:	0800f082 	.word	0x0800f082
 80083f8:	0800f2fc 	.word	0x0800f2fc
 80083fc:	0800d104 	.word	0x0800d104

08008400 <tcp_process_refused_data>:
{
 8008400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8008402:	4604      	mov	r4, r0
 8008404:	b950      	cbnz	r0, 800841c <tcp_process_refused_data+0x1c>
 8008406:	f06f 050f 	mvn.w	r5, #15
 800840a:	4b1d      	ldr	r3, [pc, #116]	; (8008480 <tcp_process_refused_data+0x80>)
 800840c:	f240 6209 	movw	r2, #1545	; 0x609
 8008410:	491c      	ldr	r1, [pc, #112]	; (8008484 <tcp_process_refused_data+0x84>)
 8008412:	481d      	ldr	r0, [pc, #116]	; (8008488 <tcp_process_refused_data+0x88>)
 8008414:	f003 fe96 	bl	800c144 <iprintf>
}
 8008418:	4628      	mov	r0, r5
 800841a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    u8_t refused_flags = pcb->refused_data->flags;
 800841c:	6f46      	ldr	r6, [r0, #116]	; 0x74
    pcb->refused_data = NULL;
 800841e:	2300      	movs	r3, #0
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8008420:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
    u8_t refused_flags = pcb->refused_data->flags;
 8008424:	7b77      	ldrb	r7, [r6, #13]
    pcb->refused_data = NULL;
 8008426:	6743      	str	r3, [r0, #116]	; 0x74
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8008428:	b1e5      	cbz	r5, 8008464 <tcp_process_refused_data+0x64>
 800842a:	4601      	mov	r1, r0
 800842c:	4632      	mov	r2, r6
 800842e:	6900      	ldr	r0, [r0, #16]
 8008430:	47a8      	blx	r5
 8008432:	4605      	mov	r5, r0
    if (err == ERR_OK) {
 8008434:	b9e8      	cbnz	r0, 8008472 <tcp_process_refused_data+0x72>
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8008436:	06bb      	lsls	r3, r7, #26
 8008438:	d5ee      	bpl.n	8008418 <tcp_process_refused_data+0x18>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800843a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800843c:	f640 3268 	movw	r2, #2920	; 0xb68
        TCP_EVENT_CLOSED(pcb, err);
 8008440:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8008444:	4293      	cmp	r3, r2
          pcb->rcv_wnd++;
 8008446:	bf1c      	itt	ne
 8008448:	3301      	addne	r3, #1
 800844a:	8523      	strhne	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 800844c:	2e00      	cmp	r6, #0
 800844e:	d0e3      	beq.n	8008418 <tcp_process_refused_data+0x18>
 8008450:	2300      	movs	r3, #0
 8008452:	4621      	mov	r1, r4
 8008454:	6920      	ldr	r0, [r4, #16]
 8008456:	461a      	mov	r2, r3
 8008458:	47b0      	blx	r6
        if (err == ERR_ABRT) {
 800845a:	300d      	adds	r0, #13
 800845c:	d1dc      	bne.n	8008418 <tcp_process_refused_data+0x18>
          return ERR_ABRT;
 800845e:	f06f 050c 	mvn.w	r5, #12
 8008462:	e7d9      	b.n	8008418 <tcp_process_refused_data+0x18>
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8008464:	4601      	mov	r1, r0
 8008466:	462b      	mov	r3, r5
 8008468:	4632      	mov	r2, r6
 800846a:	4628      	mov	r0, r5
 800846c:	f7ff ffa4 	bl	80083b8 <tcp_recv_null>
 8008470:	e7df      	b.n	8008432 <tcp_process_refused_data+0x32>
    } else if (err == ERR_ABRT) {
 8008472:	f110 050d 	adds.w	r5, r0, #13
 8008476:	d0f2      	beq.n	800845e <tcp_process_refused_data+0x5e>
      pcb->refused_data = refused_data;
 8008478:	6766      	str	r6, [r4, #116]	; 0x74
      return ERR_INPROGRESS;
 800847a:	f06f 0504 	mvn.w	r5, #4
 800847e:	e7cb      	b.n	8008418 <tcp_process_refused_data+0x18>
 8008480:	0800f082 	.word	0x0800f082
 8008484:	0800f2af 	.word	0x0800f2af
 8008488:	0800d104 	.word	0x0800d104

0800848c <tcp_fasttmr>:
{
 800848c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ++tcp_timer_ctr;
 8008490:	4d1b      	ldr	r5, [pc, #108]	; (8008500 <tcp_fasttmr+0x74>)
  pcb = tcp_active_pcbs;
 8008492:	4f1c      	ldr	r7, [pc, #112]	; (8008504 <tcp_fasttmr+0x78>)
  ++tcp_timer_ctr;
 8008494:	782b      	ldrb	r3, [r5, #0]
        tcp_active_pcbs_changed = 0;
 8008496:	4e1c      	ldr	r6, [pc, #112]	; (8008508 <tcp_fasttmr+0x7c>)
  ++tcp_timer_ctr;
 8008498:	3301      	adds	r3, #1
 800849a:	702b      	strb	r3, [r5, #0]
  pcb = tcp_active_pcbs;
 800849c:	683c      	ldr	r4, [r7, #0]
        tcp_active_pcbs_changed = 0;
 800849e:	f04f 0800 	mov.w	r8, #0
  while (pcb != NULL) {
 80084a2:	b90c      	cbnz	r4, 80084a8 <tcp_fasttmr+0x1c>
}
 80084a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (pcb->last_timer != tcp_timer_ctr) {
 80084a8:	782b      	ldrb	r3, [r5, #0]
 80084aa:	7fa2      	ldrb	r2, [r4, #30]
 80084ac:	429a      	cmp	r2, r3
 80084ae:	d024      	beq.n	80084fa <tcp_fasttmr+0x6e>
      pcb->last_timer = tcp_timer_ctr;
 80084b0:	77a3      	strb	r3, [r4, #30]
      if (pcb->flags & TF_ACK_DELAY) {
 80084b2:	8b63      	ldrh	r3, [r4, #26]
 80084b4:	07d9      	lsls	r1, r3, #31
 80084b6:	d509      	bpl.n	80084cc <tcp_fasttmr+0x40>
        tcp_ack_now(pcb);
 80084b8:	f043 0302 	orr.w	r3, r3, #2
        tcp_output(pcb);
 80084bc:	4620      	mov	r0, r4
        tcp_ack_now(pcb);
 80084be:	8363      	strh	r3, [r4, #26]
        tcp_output(pcb);
 80084c0:	f002 f9ea 	bl	800a898 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80084c4:	8b63      	ldrh	r3, [r4, #26]
 80084c6:	f023 0303 	bic.w	r3, r3, #3
 80084ca:	8363      	strh	r3, [r4, #26]
      if (pcb->flags & TF_CLOSEPEND) {
 80084cc:	8b63      	ldrh	r3, [r4, #26]
 80084ce:	071a      	lsls	r2, r3, #28
 80084d0:	d505      	bpl.n	80084de <tcp_fasttmr+0x52>
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80084d2:	f023 0308 	bic.w	r3, r3, #8
        tcp_close_shutdown_fin(pcb);
 80084d6:	4620      	mov	r0, r4
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80084d8:	8363      	strh	r3, [r4, #26]
        tcp_close_shutdown_fin(pcb);
 80084da:	f7ff f9db 	bl	8007894 <tcp_close_shutdown_fin>
      if (pcb->refused_data != NULL) {
 80084de:	6f63      	ldr	r3, [r4, #116]	; 0x74
      next = pcb->next;
 80084e0:	f8d4 900c 	ldr.w	r9, [r4, #12]
      if (pcb->refused_data != NULL) {
 80084e4:	b13b      	cbz	r3, 80084f6 <tcp_fasttmr+0x6a>
        tcp_process_refused_data(pcb);
 80084e6:	4620      	mov	r0, r4
        tcp_active_pcbs_changed = 0;
 80084e8:	f886 8000 	strb.w	r8, [r6]
        tcp_process_refused_data(pcb);
 80084ec:	f7ff ff88 	bl	8008400 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80084f0:	7833      	ldrb	r3, [r6, #0]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d1d2      	bne.n	800849c <tcp_fasttmr+0x10>
{
 80084f6:	464c      	mov	r4, r9
 80084f8:	e7d3      	b.n	80084a2 <tcp_fasttmr+0x16>
      pcb = pcb->next;
 80084fa:	f8d4 900c 	ldr.w	r9, [r4, #12]
 80084fe:	e7fa      	b.n	80084f6 <tcp_fasttmr+0x6a>
 8008500:	20006b7a 	.word	0x20006b7a
 8008504:	2000d38c 	.word	0x2000d38c
 8008508:	2000d388 	.word	0x2000d388

0800850c <tcp_tmr>:
{
 800850c:	b508      	push	{r3, lr}
  tcp_fasttmr();
 800850e:	f7ff ffbd 	bl	800848c <tcp_fasttmr>
  if (++tcp_timer & 1) {
 8008512:	4a06      	ldr	r2, [pc, #24]	; (800852c <tcp_tmr+0x20>)
 8008514:	7813      	ldrb	r3, [r2, #0]
 8008516:	3301      	adds	r3, #1
 8008518:	b2db      	uxtb	r3, r3
 800851a:	7013      	strb	r3, [r2, #0]
 800851c:	07db      	lsls	r3, r3, #31
 800851e:	d503      	bpl.n	8008528 <tcp_tmr+0x1c>
}
 8008520:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    tcp_slowtmr();
 8008524:	f7ff bc02 	b.w	8007d2c <tcp_slowtmr>
 8008528:	bd08      	pop	{r3, pc}
 800852a:	bf00      	nop
 800852c:	20006b79 	.word	0x20006b79

08008530 <tcp_abandon>:
{
 8008530:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008534:	460e      	mov	r6, r1
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8008536:	4604      	mov	r4, r0
 8008538:	b948      	cbnz	r0, 800854e <tcp_abandon+0x1e>
 800853a:	4b34      	ldr	r3, [pc, #208]	; (800860c <tcp_abandon+0xdc>)
 800853c:	f240 223d 	movw	r2, #573	; 0x23d
 8008540:	4933      	ldr	r1, [pc, #204]	; (8008610 <tcp_abandon+0xe0>)
 8008542:	4834      	ldr	r0, [pc, #208]	; (8008614 <tcp_abandon+0xe4>)
}
 8008544:	b004      	add	sp, #16
 8008546:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800854a:	f003 bdfb 	b.w	800c144 <iprintf>
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800854e:	7d03      	ldrb	r3, [r0, #20]
 8008550:	2b01      	cmp	r3, #1
 8008552:	d106      	bne.n	8008562 <tcp_abandon+0x32>
 8008554:	4b2d      	ldr	r3, [pc, #180]	; (800860c <tcp_abandon+0xdc>)
 8008556:	f240 2241 	movw	r2, #577	; 0x241
 800855a:	492f      	ldr	r1, [pc, #188]	; (8008618 <tcp_abandon+0xe8>)
 800855c:	482d      	ldr	r0, [pc, #180]	; (8008614 <tcp_abandon+0xe4>)
 800855e:	f003 fdf1 	bl	800c144 <iprintf>
  if (pcb->state == TIME_WAIT) {
 8008562:	7d23      	ldrb	r3, [r4, #20]
 8008564:	2b0a      	cmp	r3, #10
 8008566:	d109      	bne.n	800857c <tcp_abandon+0x4c>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8008568:	4621      	mov	r1, r4
 800856a:	482c      	ldr	r0, [pc, #176]	; (800861c <tcp_abandon+0xec>)
 800856c:	f7ff fdfa 	bl	8008164 <tcp_pcb_remove>
    tcp_free(pcb);
 8008570:	4620      	mov	r0, r4
}
 8008572:	b004      	add	sp, #16
 8008574:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    tcp_free(pcb);
 8008578:	f7ff b9c8 	b.w	800790c <tcp_free>
    seqno = pcb->snd_nxt;
 800857c:	f8d4 9050 	ldr.w	r9, [r4, #80]	; 0x50
    ackno = pcb->rcv_nxt;
 8008580:	f8d4 a024 	ldr.w	sl, [r4, #36]	; 0x24
    errf = pcb->errf;
 8008584:	f8d4 708c 	ldr.w	r7, [r4, #140]	; 0x8c
    errf_arg = pcb->callback_arg;
 8008588:	f8d4 8010 	ldr.w	r8, [r4, #16]
 800858c:	8ae5      	ldrh	r5, [r4, #22]
    if (pcb->state == CLOSED) {
 800858e:	b99b      	cbnz	r3, 80085b8 <tcp_abandon+0x88>
      if (pcb->local_port != 0) {
 8008590:	b13d      	cbz	r5, 80085a2 <tcp_abandon+0x72>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8008592:	4a23      	ldr	r2, [pc, #140]	; (8008620 <tcp_abandon+0xf0>)
 8008594:	6813      	ldr	r3, [r2, #0]
 8008596:	429c      	cmp	r4, r3
 8008598:	d106      	bne.n	80085a8 <tcp_abandon+0x78>
 800859a:	68e3      	ldr	r3, [r4, #12]
 800859c:	6013      	str	r3, [r2, #0]
 800859e:	2500      	movs	r5, #0
 80085a0:	60e5      	str	r5, [r4, #12]
    int send_rst = 0;
 80085a2:	462e      	mov	r6, r5
 80085a4:	e00f      	b.n	80085c6 <tcp_abandon+0x96>
 80085a6:	4613      	mov	r3, r2
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d0f8      	beq.n	800859e <tcp_abandon+0x6e>
 80085ac:	68da      	ldr	r2, [r3, #12]
 80085ae:	4294      	cmp	r4, r2
 80085b0:	d1f9      	bne.n	80085a6 <tcp_abandon+0x76>
 80085b2:	68e2      	ldr	r2, [r4, #12]
 80085b4:	60da      	str	r2, [r3, #12]
 80085b6:	e7f2      	b.n	800859e <tcp_abandon+0x6e>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80085b8:	4621      	mov	r1, r4
 80085ba:	481a      	ldr	r0, [pc, #104]	; (8008624 <tcp_abandon+0xf4>)
 80085bc:	f7ff fdd2 	bl	8008164 <tcp_pcb_remove>
 80085c0:	2201      	movs	r2, #1
 80085c2:	4b19      	ldr	r3, [pc, #100]	; (8008628 <tcp_abandon+0xf8>)
 80085c4:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 80085c6:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80085c8:	b108      	cbz	r0, 80085ce <tcp_abandon+0x9e>
      tcp_segs_free(pcb->unacked);
 80085ca:	f7ff faf7 	bl	8007bbc <tcp_segs_free>
    if (pcb->unsent != NULL) {
 80085ce:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80085d0:	b108      	cbz	r0, 80085d6 <tcp_abandon+0xa6>
      tcp_segs_free(pcb->unsent);
 80085d2:	f7ff faf3 	bl	8007bbc <tcp_segs_free>
    if (send_rst) {
 80085d6:	b156      	cbz	r6, 80085ee <tcp_abandon+0xbe>
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80085d8:	8b23      	ldrh	r3, [r4, #24]
 80085da:	4652      	mov	r2, sl
 80085dc:	9501      	str	r5, [sp, #4]
 80085de:	4649      	mov	r1, r9
 80085e0:	9302      	str	r3, [sp, #8]
 80085e2:	1d23      	adds	r3, r4, #4
 80085e4:	4620      	mov	r0, r4
 80085e6:	9300      	str	r3, [sp, #0]
 80085e8:	4623      	mov	r3, r4
 80085ea:	f002 f8df 	bl	800a7ac <tcp_rst>
    tcp_free(pcb);
 80085ee:	4620      	mov	r0, r4
 80085f0:	f7ff f98c 	bl	800790c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80085f4:	b13f      	cbz	r7, 8008606 <tcp_abandon+0xd6>
 80085f6:	f06f 010c 	mvn.w	r1, #12
 80085fa:	4640      	mov	r0, r8
 80085fc:	463b      	mov	r3, r7
}
 80085fe:	b004      	add	sp, #16
 8008600:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8008604:	4718      	bx	r3
}
 8008606:	b004      	add	sp, #16
 8008608:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800860c:	0800f082 	.word	0x0800f082
 8008610:	0800ef67 	.word	0x0800ef67
 8008614:	0800d104 	.word	0x0800d104
 8008618:	0800ef80 	.word	0x0800ef80
 800861c:	2000d39c 	.word	0x2000d39c
 8008620:	2000d398 	.word	0x2000d398
 8008624:	2000d38c 	.word	0x2000d38c
 8008628:	2000d388 	.word	0x2000d388

0800862c <tcp_abort>:
  tcp_abandon(pcb, 1);
 800862c:	2101      	movs	r1, #1
 800862e:	f7ff bf7f 	b.w	8008530 <tcp_abandon>
	...

08008634 <tcp_accept_null>:
{
 8008634:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8008636:	460c      	mov	r4, r1
 8008638:	b931      	cbnz	r1, 8008648 <tcp_accept_null+0x14>
 800863a:	4b06      	ldr	r3, [pc, #24]	; (8008654 <tcp_accept_null+0x20>)
 800863c:	f240 320f 	movw	r2, #783	; 0x30f
 8008640:	4905      	ldr	r1, [pc, #20]	; (8008658 <tcp_accept_null+0x24>)
 8008642:	4806      	ldr	r0, [pc, #24]	; (800865c <tcp_accept_null+0x28>)
 8008644:	f003 fd7e 	bl	800c144 <iprintf>
  tcp_abort(pcb);
 8008648:	4620      	mov	r0, r4
 800864a:	f7ff ffef 	bl	800862c <tcp_abort>
}
 800864e:	f06f 000c 	mvn.w	r0, #12
 8008652:	bd10      	pop	{r4, pc}
 8008654:	0800f082 	.word	0x0800f082
 8008658:	0800efb1 	.word	0x0800efb1
 800865c:	0800d104 	.word	0x0800d104

08008660 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8008660:	b570      	push	{r4, r5, r6, lr}
 8008662:	460c      	mov	r4, r1
  struct tcp_pcb *pcb;
  pcb = pcb_list;

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8008664:	4605      	mov	r5, r0
 8008666:	b930      	cbnz	r0, 8008676 <tcp_netif_ip_addr_changed_pcblist+0x16>
 8008668:	4b09      	ldr	r3, [pc, #36]	; (8008690 <tcp_netif_ip_addr_changed_pcblist+0x30>)
 800866a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800866e:	4909      	ldr	r1, [pc, #36]	; (8008694 <tcp_netif_ip_addr_changed_pcblist+0x34>)
 8008670:	4809      	ldr	r0, [pc, #36]	; (8008698 <tcp_netif_ip_addr_changed_pcblist+0x38>)
 8008672:	f003 fd67 	bl	800c144 <iprintf>

  while (pcb != NULL) {
 8008676:	b904      	cbnz	r4, 800867a <tcp_netif_ip_addr_changed_pcblist+0x1a>
      pcb = next;
    } else {
      pcb = pcb->next;
    }
  }
}
 8008678:	bd70      	pop	{r4, r5, r6, pc}
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800867a:	6822      	ldr	r2, [r4, #0]
 800867c:	682b      	ldr	r3, [r5, #0]
 800867e:	68e6      	ldr	r6, [r4, #12]
 8008680:	429a      	cmp	r2, r3
 8008682:	d102      	bne.n	800868a <tcp_netif_ip_addr_changed_pcblist+0x2a>
      tcp_abort(pcb);
 8008684:	4620      	mov	r0, r4
 8008686:	f7ff ffd1 	bl	800862c <tcp_abort>
      pcb = pcb->next;
 800868a:	4634      	mov	r4, r6
 800868c:	e7f3      	b.n	8008676 <tcp_netif_ip_addr_changed_pcblist+0x16>
 800868e:	bf00      	nop
 8008690:	0800f082 	.word	0x0800f082
 8008694:	0800f18d 	.word	0x0800f18d
 8008698:	0800d104 	.word	0x0800d104

0800869c <tcp_kill_state>:
{
 800869c:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800869e:	f1a0 0308 	sub.w	r3, r0, #8
{
 80086a2:	4604      	mov	r4, r0
  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80086a4:	2b01      	cmp	r3, #1
 80086a6:	d906      	bls.n	80086b6 <tcp_kill_state+0x1a>
 80086a8:	4b0f      	ldr	r3, [pc, #60]	; (80086e8 <tcp_kill_state+0x4c>)
 80086aa:	f240 62dd 	movw	r2, #1757	; 0x6dd
 80086ae:	490f      	ldr	r1, [pc, #60]	; (80086ec <tcp_kill_state+0x50>)
 80086b0:	480f      	ldr	r0, [pc, #60]	; (80086f0 <tcp_kill_state+0x54>)
 80086b2:	f003 fd47 	bl	800c144 <iprintf>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80086b6:	4b0f      	ldr	r3, [pc, #60]	; (80086f4 <tcp_kill_state+0x58>)
  inactivity = 0;
 80086b8:	2200      	movs	r2, #0
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80086ba:	6819      	ldr	r1, [r3, #0]
  inactive = NULL;
 80086bc:	4610      	mov	r0, r2
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80086be:	4b0e      	ldr	r3, [pc, #56]	; (80086f8 <tcp_kill_state+0x5c>)
 80086c0:	681d      	ldr	r5, [r3, #0]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80086c2:	b921      	cbnz	r1, 80086ce <tcp_kill_state+0x32>
  if (inactive != NULL) {
 80086c4:	b170      	cbz	r0, 80086e4 <tcp_kill_state+0x48>
}
 80086c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tcp_abandon(inactive, 0);
 80086ca:	f7ff bf31 	b.w	8008530 <tcp_abandon>
    if (pcb->state == state) {
 80086ce:	7d0b      	ldrb	r3, [r1, #20]
 80086d0:	42a3      	cmp	r3, r4
 80086d2:	d105      	bne.n	80086e0 <tcp_kill_state+0x44>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80086d4:	6a0b      	ldr	r3, [r1, #32]
 80086d6:	1aeb      	subs	r3, r5, r3
 80086d8:	429a      	cmp	r2, r3
 80086da:	bf9c      	itt	ls
 80086dc:	461a      	movls	r2, r3
 80086de:	4608      	movls	r0, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80086e0:	68c9      	ldr	r1, [r1, #12]
 80086e2:	e7ee      	b.n	80086c2 <tcp_kill_state+0x26>
 80086e4:	bd38      	pop	{r3, r4, r5, pc}
 80086e6:	bf00      	nop
 80086e8:	0800f082 	.word	0x0800f082
 80086ec:	0800f11b 	.word	0x0800f11b
 80086f0:	0800d104 	.word	0x0800d104
 80086f4:	2000d38c 	.word	0x2000d38c
 80086f8:	2000d390 	.word	0x2000d390

080086fc <tcp_alloc>:
{
 80086fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086fe:	4605      	mov	r5, r0
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008700:	2001      	movs	r0, #1
 8008702:	f7fe fbbf 	bl	8006e84 <memp_malloc>
  if (pcb == NULL) {
 8008706:	4604      	mov	r4, r0
 8008708:	2800      	cmp	r0, #0
 800870a:	d136      	bne.n	800877a <tcp_alloc+0x7e>
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800870c:	4f43      	ldr	r7, [pc, #268]	; (800881c <tcp_alloc+0x120>)
 800870e:	6838      	ldr	r0, [r7, #0]
  while (pcb != NULL) {
 8008710:	2800      	cmp	r0, #0
 8008712:	d15f      	bne.n	80087d4 <tcp_alloc+0xd8>
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008714:	4b42      	ldr	r3, [pc, #264]	; (8008820 <tcp_alloc+0x124>)
  inactivity = 0;
 8008716:	4601      	mov	r1, r0
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8008718:	4e42      	ldr	r6, [pc, #264]	; (8008824 <tcp_alloc+0x128>)
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800871a:	681b      	ldr	r3, [r3, #0]
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800871c:	6834      	ldr	r4, [r6, #0]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800871e:	2b00      	cmp	r3, #0
 8008720:	d163      	bne.n	80087ea <tcp_alloc+0xee>
  if (inactive != NULL) {
 8008722:	b108      	cbz	r0, 8008728 <tcp_alloc+0x2c>
    tcp_abort(inactive);
 8008724:	f7ff ff82 	bl	800862c <tcp_abort>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008728:	2001      	movs	r0, #1
 800872a:	f7fe fbab 	bl	8006e84 <memp_malloc>
    if (pcb == NULL) {
 800872e:	4604      	mov	r4, r0
 8008730:	bb18      	cbnz	r0, 800877a <tcp_alloc+0x7e>
      tcp_kill_state(LAST_ACK);
 8008732:	2009      	movs	r0, #9
 8008734:	f7ff ffb2 	bl	800869c <tcp_kill_state>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008738:	2001      	movs	r0, #1
 800873a:	f7fe fba3 	bl	8006e84 <memp_malloc>
      if (pcb == NULL) {
 800873e:	4604      	mov	r4, r0
 8008740:	b9d8      	cbnz	r0, 800877a <tcp_alloc+0x7e>
        tcp_kill_state(CLOSING);
 8008742:	2008      	movs	r0, #8
 8008744:	f7ff ffaa 	bl	800869c <tcp_kill_state>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008748:	2001      	movs	r0, #1
 800874a:	f7fe fb9b 	bl	8006e84 <memp_malloc>
        if (pcb == NULL) {
 800874e:	4604      	mov	r4, r0
 8008750:	b998      	cbnz	r0, 800877a <tcp_alloc+0x7e>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8008752:	062b      	lsls	r3, r5, #24
 8008754:	d451      	bmi.n	80087fa <tcp_alloc+0xfe>
  if (mprio == 0) {
 8008756:	b15d      	cbz	r5, 8008770 <tcp_alloc+0x74>
 8008758:	462a      	mov	r2, r5
  mprio--;
 800875a:	3a01      	subs	r2, #1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800875c:	683b      	ldr	r3, [r7, #0]
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800875e:	6836      	ldr	r6, [r6, #0]
  inactivity = 0;
 8008760:	2100      	movs	r1, #0
  mprio--;
 8008762:	b2d2      	uxtb	r2, r2
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008764:	2b00      	cmp	r3, #0
 8008766:	d14a      	bne.n	80087fe <tcp_alloc+0x102>
  if (inactive != NULL) {
 8008768:	b114      	cbz	r4, 8008770 <tcp_alloc+0x74>
    tcp_abort(inactive);
 800876a:	4620      	mov	r0, r4
 800876c:	f7ff ff5e 	bl	800862c <tcp_abort>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008770:	2001      	movs	r0, #1
 8008772:	f7fe fb87 	bl	8006e84 <memp_malloc>
  if (pcb != NULL) {
 8008776:	4604      	mov	r4, r0
 8008778:	b350      	cbz	r0, 80087d0 <tcp_alloc+0xd4>
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800877a:	2298      	movs	r2, #152	; 0x98
 800877c:	2100      	movs	r1, #0
 800877e:	4620      	mov	r0, r4
 8008780:	f003 fcd8 	bl	800c134 <memset>
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8008784:	f640 3268 	movw	r2, #2920	; 0xb68
    pcb->snd_buf = TCP_SND_BUF;
 8008788:	f241 63d0 	movw	r3, #5840	; 0x16d0
    pcb->prio = prio;
 800878c:	7565      	strb	r5, [r4, #21]
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800878e:	8562      	strh	r2, [r4, #42]	; 0x2a
 8008790:	8522      	strh	r2, [r4, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8008792:	22ff      	movs	r2, #255	; 0xff
    pcb->snd_buf = TCP_SND_BUF;
 8008794:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
    pcb->ttl = TCP_TTL;
 8008798:	72e2      	strb	r2, [r4, #11]
    pcb->mss = INITIAL_MSS;
 800879a:	f44f 7206 	mov.w	r2, #536	; 0x218
    pcb->ssthresh = TCP_SND_BUF;
 800879e:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
    pcb->mss = INITIAL_MSS;
 80087a2:	8662      	strh	r2, [r4, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80087a4:	2206      	movs	r2, #6
    pcb->recv = tcp_recv_null;
 80087a6:	4b20      	ldr	r3, [pc, #128]	; (8008828 <tcp_alloc+0x12c>)
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80087a8:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80087ac:	87e2      	strh	r2, [r4, #62]	; 0x3e
    pcb->rtime = -1;
 80087ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pcb->recv = tcp_recv_null;
 80087b2:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    pcb->rtime = -1;
 80087b6:	8622      	strh	r2, [r4, #48]	; 0x30
    pcb->cwnd = 1;
 80087b8:	2201      	movs	r2, #1
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80087ba:	4b1c      	ldr	r3, [pc, #112]	; (800882c <tcp_alloc+0x130>)
    pcb->cwnd = 1;
 80087bc:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 80087c0:	4a18      	ldr	r2, [pc, #96]	; (8008824 <tcp_alloc+0x128>)
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80087c2:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    pcb->tmr = tcp_ticks;
 80087c6:	6812      	ldr	r2, [r2, #0]
 80087c8:	6222      	str	r2, [r4, #32]
    pcb->last_timer = tcp_timer_ctr;
 80087ca:	4a19      	ldr	r2, [pc, #100]	; (8008830 <tcp_alloc+0x134>)
 80087cc:	7812      	ldrb	r2, [r2, #0]
 80087ce:	77a2      	strb	r2, [r4, #30]
}
 80087d0:	4620      	mov	r0, r4
 80087d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (pcb->flags & TF_CLOSEPEND) {
 80087d4:	8b43      	ldrh	r3, [r0, #26]
    struct tcp_pcb *next = pcb->next;
 80087d6:	68c4      	ldr	r4, [r0, #12]
    if (pcb->flags & TF_CLOSEPEND) {
 80087d8:	071a      	lsls	r2, r3, #28
 80087da:	d504      	bpl.n	80087e6 <tcp_alloc+0xea>
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80087dc:	f023 0308 	bic.w	r3, r3, #8
 80087e0:	8343      	strh	r3, [r0, #26]
      tcp_close_shutdown_fin(pcb);
 80087e2:	f7ff f857 	bl	8007894 <tcp_close_shutdown_fin>
{
 80087e6:	4620      	mov	r0, r4
 80087e8:	e792      	b.n	8008710 <tcp_alloc+0x14>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80087ea:	6a1a      	ldr	r2, [r3, #32]
 80087ec:	1aa2      	subs	r2, r4, r2
 80087ee:	428a      	cmp	r2, r1
 80087f0:	bf24      	itt	cs
 80087f2:	4618      	movcs	r0, r3
 80087f4:	4611      	movcs	r1, r2
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80087f6:	68db      	ldr	r3, [r3, #12]
 80087f8:	e791      	b.n	800871e <tcp_alloc+0x22>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80087fa:	227f      	movs	r2, #127	; 0x7f
 80087fc:	e7ad      	b.n	800875a <tcp_alloc+0x5e>
    if ((pcb->prio < mprio) ||
 80087fe:	7d5f      	ldrb	r7, [r3, #21]
 8008800:	4297      	cmp	r7, r2
 8008802:	d304      	bcc.n	800880e <tcp_alloc+0x112>
 8008804:	d107      	bne.n	8008816 <tcp_alloc+0x11a>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8008806:	6a18      	ldr	r0, [r3, #32]
 8008808:	1a30      	subs	r0, r6, r0
 800880a:	4288      	cmp	r0, r1
 800880c:	d303      	bcc.n	8008816 <tcp_alloc+0x11a>
      inactivity = tcp_ticks - pcb->tmr;
 800880e:	6a19      	ldr	r1, [r3, #32]
    if ((pcb->prio < mprio) ||
 8008810:	463a      	mov	r2, r7
      inactivity = tcp_ticks - pcb->tmr;
 8008812:	461c      	mov	r4, r3
 8008814:	1a71      	subs	r1, r6, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008816:	68db      	ldr	r3, [r3, #12]
 8008818:	e7a4      	b.n	8008764 <tcp_alloc+0x68>
 800881a:	bf00      	nop
 800881c:	2000d38c 	.word	0x2000d38c
 8008820:	2000d39c 	.word	0x2000d39c
 8008824:	2000d390 	.word	0x2000d390
 8008828:	080083b9 	.word	0x080083b9
 800882c:	006ddd00 	.word	0x006ddd00
 8008830:	20006b7a 	.word	0x20006b7a

08008834 <tcp_new_ip_type>:
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8008834:	2040      	movs	r0, #64	; 0x40
 8008836:	f7ff bf61 	b.w	80086fc <tcp_alloc>
	...

0800883c <tcp_next_iss>:
{
 800883c:	b508      	push	{r3, lr}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800883e:	b930      	cbnz	r0, 800884e <tcp_next_iss+0x12>
 8008840:	4b06      	ldr	r3, [pc, #24]	; (800885c <tcp_next_iss+0x20>)
 8008842:	f640 02af 	movw	r2, #2223	; 0x8af
 8008846:	4906      	ldr	r1, [pc, #24]	; (8008860 <tcp_next_iss+0x24>)
 8008848:	4806      	ldr	r0, [pc, #24]	; (8008864 <tcp_next_iss+0x28>)
 800884a:	f003 fc7b 	bl	800c144 <iprintf>
  iss += tcp_ticks;       /* XXX */
 800884e:	4b06      	ldr	r3, [pc, #24]	; (8008868 <tcp_next_iss+0x2c>)
 8008850:	4a06      	ldr	r2, [pc, #24]	; (800886c <tcp_next_iss+0x30>)
 8008852:	6818      	ldr	r0, [r3, #0]
 8008854:	6812      	ldr	r2, [r2, #0]
 8008856:	4410      	add	r0, r2
 8008858:	6018      	str	r0, [r3, #0]
}
 800885a:	bd08      	pop	{r3, pc}
 800885c:	0800f082 	.word	0x0800f082
 8008860:	0800f1c1 	.word	0x0800f1c1
 8008864:	0800d104 	.word	0x0800d104
 8008868:	2000000c 	.word	0x2000000c
 800886c:	2000d390 	.word	0x2000d390

08008870 <tcp_eff_send_mss_netif>:
{
 8008870:	b538      	push	{r3, r4, r5, lr}
 8008872:	4604      	mov	r4, r0
 8008874:	460d      	mov	r5, r1
  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8008876:	b932      	cbnz	r2, 8008886 <tcp_eff_send_mss_netif+0x16>
 8008878:	4b09      	ldr	r3, [pc, #36]	; (80088a0 <tcp_eff_send_mss_netif+0x30>)
 800887a:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800887e:	4909      	ldr	r1, [pc, #36]	; (80088a4 <tcp_eff_send_mss_netif+0x34>)
 8008880:	4809      	ldr	r0, [pc, #36]	; (80088a8 <tcp_eff_send_mss_netif+0x38>)
 8008882:	f003 fc5f 	bl	800c144 <iprintf>
    if (outif == NULL) {
 8008886:	b14d      	cbz	r5, 800889c <tcp_eff_send_mss_netif+0x2c>
    mtu = outif->mtu;
 8008888:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
  if (mtu != 0) {
 800888a:	b13b      	cbz	r3, 800889c <tcp_eff_send_mss_netif+0x2c>
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800888c:	2b28      	cmp	r3, #40	; 0x28
 800888e:	bf8a      	itet	hi
 8008890:	3b28      	subhi	r3, #40	; 0x28
 8008892:	2300      	movls	r3, #0
 8008894:	b29b      	uxthhi	r3, r3
    sendmss = LWIP_MIN(sendmss, mss_s);
 8008896:	429c      	cmp	r4, r3
 8008898:	bf28      	it	cs
 800889a:	461c      	movcs	r4, r3
}
 800889c:	4620      	mov	r0, r4
 800889e:	bd38      	pop	{r3, r4, r5, pc}
 80088a0:	0800f082 	.word	0x0800f082
 80088a4:	0800f0bd 	.word	0x0800f0bd
 80088a8:	0800d104 	.word	0x0800d104

080088ac <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80088ac:	b538      	push	{r3, r4, r5, lr}
 80088ae:	460d      	mov	r5, r1
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 80088b0:	4604      	mov	r4, r0
 80088b2:	b180      	cbz	r0, 80088d6 <tcp_netif_ip_addr_changed+0x2a>
 80088b4:	6803      	ldr	r3, [r0, #0]
 80088b6:	b173      	cbz	r3, 80088d6 <tcp_netif_ip_addr_changed+0x2a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80088b8:	4b0b      	ldr	r3, [pc, #44]	; (80088e8 <tcp_netif_ip_addr_changed+0x3c>)
 80088ba:	6819      	ldr	r1, [r3, #0]
 80088bc:	f7ff fed0 	bl	8008660 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80088c0:	4b0a      	ldr	r3, [pc, #40]	; (80088ec <tcp_netif_ip_addr_changed+0x40>)
 80088c2:	4620      	mov	r0, r4
 80088c4:	6819      	ldr	r1, [r3, #0]
 80088c6:	f7ff fecb 	bl	8008660 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80088ca:	b125      	cbz	r5, 80088d6 <tcp_netif_ip_addr_changed+0x2a>
 80088cc:	682b      	ldr	r3, [r5, #0]
 80088ce:	b113      	cbz	r3, 80088d6 <tcp_netif_ip_addr_changed+0x2a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80088d0:	4b07      	ldr	r3, [pc, #28]	; (80088f0 <tcp_netif_ip_addr_changed+0x44>)
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	b903      	cbnz	r3, 80088d8 <tcp_netif_ip_addr_changed+0x2c>
 80088d6:	bd38      	pop	{r3, r4, r5, pc}
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80088d8:	6819      	ldr	r1, [r3, #0]
 80088da:	6822      	ldr	r2, [r4, #0]
 80088dc:	4291      	cmp	r1, r2
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80088de:	bf04      	itt	eq
 80088e0:	682a      	ldreq	r2, [r5, #0]
 80088e2:	601a      	streq	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80088e4:	68db      	ldr	r3, [r3, #12]
 80088e6:	e7f5      	b.n	80088d4 <tcp_netif_ip_addr_changed+0x28>
 80088e8:	2000d38c 	.word	0x2000d38c
 80088ec:	2000d398 	.word	0x2000d398
 80088f0:	2000d394 	.word	0x2000d394

080088f4 <tcp_get_next_optbyte>:
}

static u8_t
tcp_get_next_optbyte(void)
{
  u16_t optidx = tcp_optidx++;
 80088f4:	4a09      	ldr	r2, [pc, #36]	; (800891c <tcp_get_next_optbyte+0x28>)
 80088f6:	8813      	ldrh	r3, [r2, #0]
 80088f8:	1c59      	adds	r1, r3, #1
 80088fa:	8011      	strh	r1, [r2, #0]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80088fc:	4a08      	ldr	r2, [pc, #32]	; (8008920 <tcp_get_next_optbyte+0x2c>)
 80088fe:	6812      	ldr	r2, [r2, #0]
 8008900:	b11a      	cbz	r2, 800890a <tcp_get_next_optbyte+0x16>
 8008902:	4908      	ldr	r1, [pc, #32]	; (8008924 <tcp_get_next_optbyte+0x30>)
 8008904:	8809      	ldrh	r1, [r1, #0]
 8008906:	428b      	cmp	r3, r1
 8008908:	d204      	bcs.n	8008914 <tcp_get_next_optbyte+0x20>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800890a:	4a07      	ldr	r2, [pc, #28]	; (8008928 <tcp_get_next_optbyte+0x34>)
    return opts[optidx];
 800890c:	6812      	ldr	r2, [r2, #0]
 800890e:	4413      	add	r3, r2
 8008910:	7d18      	ldrb	r0, [r3, #20]
 8008912:	4770      	bx	lr
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8008914:	1a5b      	subs	r3, r3, r1
    return tcphdr_opt2[idx];
 8008916:	b2db      	uxtb	r3, r3
 8008918:	5cd0      	ldrb	r0, [r2, r3]
  }
}
 800891a:	4770      	bx	lr
 800891c:	20006ba4 	.word	0x20006ba4
 8008920:	20006bb0 	.word	0x20006bb0
 8008924:	20006bac 	.word	0x20006bac
 8008928:	20006ba8 	.word	0x20006ba8

0800892c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800892c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8008930:	4607      	mov	r7, r0
 8008932:	b930      	cbnz	r0, 8008942 <tcp_parseopt+0x16>
 8008934:	4b1e      	ldr	r3, [pc, #120]	; (80089b0 <tcp_parseopt+0x84>)
 8008936:	f240 727d 	movw	r2, #1917	; 0x77d
 800893a:	491e      	ldr	r1, [pc, #120]	; (80089b4 <tcp_parseopt+0x88>)
 800893c:	481e      	ldr	r0, [pc, #120]	; (80089b8 <tcp_parseopt+0x8c>)
 800893e:	f003 fc01 	bl	800c144 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8008942:	4e1e      	ldr	r6, [pc, #120]	; (80089bc <tcp_parseopt+0x90>)
 8008944:	8833      	ldrh	r3, [r6, #0]
 8008946:	b153      	cbz	r3, 800895e <tcp_parseopt+0x32>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8008948:	4d1d      	ldr	r5, [pc, #116]	; (80089c0 <tcp_parseopt+0x94>)
 800894a:	2300      	movs	r3, #0
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
          mss |= tcp_get_next_optbyte();
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800894c:	f240 58b3 	movw	r8, #1459	; 0x5b3
 8008950:	f240 59b4 	movw	r9, #1460	; 0x5b4
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8008954:	802b      	strh	r3, [r5, #0]
 8008956:	8834      	ldrh	r4, [r6, #0]
 8008958:	882b      	ldrh	r3, [r5, #0]
 800895a:	42a3      	cmp	r3, r4
 800895c:	d301      	bcc.n	8008962 <tcp_parseopt+0x36>
 800895e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      u8_t opt = tcp_get_next_optbyte();
 8008962:	f7ff ffc7 	bl	80088f4 <tcp_get_next_optbyte>
      switch (opt) {
 8008966:	2801      	cmp	r0, #1
 8008968:	d0f5      	beq.n	8008956 <tcp_parseopt+0x2a>
 800896a:	d3f8      	bcc.n	800895e <tcp_parseopt+0x32>
 800896c:	2802      	cmp	r0, #2
 800896e:	d116      	bne.n	800899e <tcp_parseopt+0x72>
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8008970:	f7ff ffc0 	bl	80088f4 <tcp_get_next_optbyte>
 8008974:	2804      	cmp	r0, #4
 8008976:	d1f2      	bne.n	800895e <tcp_parseopt+0x32>
 8008978:	882b      	ldrh	r3, [r5, #0]
 800897a:	3301      	adds	r3, #1
 800897c:	42a3      	cmp	r3, r4
 800897e:	daee      	bge.n	800895e <tcp_parseopt+0x32>
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8008980:	f7ff ffb8 	bl	80088f4 <tcp_get_next_optbyte>
 8008984:	0200      	lsls	r0, r0, #8
 8008986:	b284      	uxth	r4, r0
          mss |= tcp_get_next_optbyte();
 8008988:	f7ff ffb4 	bl	80088f4 <tcp_get_next_optbyte>
 800898c:	4320      	orrs	r0, r4
 800898e:	b280      	uxth	r0, r0
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8008990:	1e43      	subs	r3, r0, #1
 8008992:	b29b      	uxth	r3, r3
 8008994:	4543      	cmp	r3, r8
 8008996:	bf88      	it	hi
 8008998:	4648      	movhi	r0, r9
 800899a:	8678      	strh	r0, [r7, #50]	; 0x32
 800899c:	e7db      	b.n	8008956 <tcp_parseopt+0x2a>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800899e:	f7ff ffa9 	bl	80088f4 <tcp_get_next_optbyte>
          if (data < 2) {
 80089a2:	2801      	cmp	r0, #1
 80089a4:	d9db      	bls.n	800895e <tcp_parseopt+0x32>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80089a6:	882b      	ldrh	r3, [r5, #0]
 80089a8:	3b02      	subs	r3, #2
 80089aa:	4418      	add	r0, r3
 80089ac:	8028      	strh	r0, [r5, #0]
 80089ae:	e7d2      	b.n	8008956 <tcp_parseopt+0x2a>
 80089b0:	0800f7c7 	.word	0x0800f7c7
 80089b4:	0800f7f9 	.word	0x0800f7f9
 80089b8:	0800d104 	.word	0x0800d104
 80089bc:	20006bb4 	.word	0x20006bb4
 80089c0:	20006ba4 	.word	0x20006ba4

080089c4 <tcp_input_delayed_close>:
{
 80089c4:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80089c6:	4604      	mov	r4, r0
 80089c8:	b930      	cbnz	r0, 80089d8 <tcp_input_delayed_close+0x14>
 80089ca:	4b0f      	ldr	r3, [pc, #60]	; (8008a08 <tcp_input_delayed_close+0x44>)
 80089cc:	f240 225a 	movw	r2, #602	; 0x25a
 80089d0:	490e      	ldr	r1, [pc, #56]	; (8008a0c <tcp_input_delayed_close+0x48>)
 80089d2:	480f      	ldr	r0, [pc, #60]	; (8008a10 <tcp_input_delayed_close+0x4c>)
 80089d4:	f003 fbb6 	bl	800c144 <iprintf>
  if (recv_flags & TF_CLOSED) {
 80089d8:	4b0e      	ldr	r3, [pc, #56]	; (8008a14 <tcp_input_delayed_close+0x50>)
 80089da:	7818      	ldrb	r0, [r3, #0]
 80089dc:	f010 0010 	ands.w	r0, r0, #16
 80089e0:	d011      	beq.n	8008a06 <tcp_input_delayed_close+0x42>
    if (!(pcb->flags & TF_RXCLOSED)) {
 80089e2:	8b63      	ldrh	r3, [r4, #26]
 80089e4:	06db      	lsls	r3, r3, #27
 80089e6:	d406      	bmi.n	80089f6 <tcp_input_delayed_close+0x32>
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80089e8:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80089ec:	b11b      	cbz	r3, 80089f6 <tcp_input_delayed_close+0x32>
 80089ee:	f06f 010e 	mvn.w	r1, #14
 80089f2:	6920      	ldr	r0, [r4, #16]
 80089f4:	4798      	blx	r3
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80089f6:	4621      	mov	r1, r4
 80089f8:	4807      	ldr	r0, [pc, #28]	; (8008a18 <tcp_input_delayed_close+0x54>)
 80089fa:	f7ff fbb3 	bl	8008164 <tcp_pcb_remove>
    tcp_free(pcb);
 80089fe:	4620      	mov	r0, r4
 8008a00:	f7fe ff84 	bl	800790c <tcp_free>
 8008a04:	2001      	movs	r0, #1
}
 8008a06:	bd10      	pop	{r4, pc}
 8008a08:	0800f7c7 	.word	0x0800f7c7
 8008a0c:	0800f7a2 	.word	0x0800f7a2
 8008a10:	0800d104 	.word	0x0800d104
 8008a14:	20006b9c 	.word	0x20006b9c
 8008a18:	2000d38c 	.word	0x2000d38c

08008a1c <tcp_free_acked_segments.isra.2>:
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
 8008a1c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a20:	4606      	mov	r6, r0
 8008a22:	4617      	mov	r7, r2
      LWIP_ASSERT("tcp_receive: valid queue length",
 8008a24:	460c      	mov	r4, r1
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8008a26:	f8df 909c 	ldr.w	r9, [pc, #156]	; 8008ac4 <tcp_free_acked_segments.isra.2+0xa8>
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8008a2a:	f8df 809c 	ldr.w	r8, [pc, #156]	; 8008ac8 <tcp_free_acked_segments.isra.2+0xac>
 8008a2e:	f8df a09c 	ldr.w	sl, [pc, #156]	; 8008acc <tcp_free_acked_segments.isra.2+0xb0>
  while (seg_list != NULL &&
 8008a32:	b1ac      	cbz	r4, 8008a60 <tcp_free_acked_segments.isra.2+0x44>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8008a34:	68e3      	ldr	r3, [r4, #12]
 8008a36:	6858      	ldr	r0, [r3, #4]
 8008a38:	f7fb fc33 	bl	80042a2 <lwip_htonl>
 8008a3c:	68e3      	ldr	r3, [r4, #12]
 8008a3e:	4683      	mov	fp, r0
 8008a40:	8925      	ldrh	r5, [r4, #8]
 8008a42:	8998      	ldrh	r0, [r3, #12]
 8008a44:	f7fb fc2a 	bl	800429c <lwip_htons>
 8008a48:	f8d9 3000 	ldr.w	r3, [r9]
 8008a4c:	f010 0003 	ands.w	r0, r0, #3
 8008a50:	eba5 0503 	sub.w	r5, r5, r3
 8008a54:	bf18      	it	ne
 8008a56:	2001      	movne	r0, #1
 8008a58:	445d      	add	r5, fp
 8008a5a:	4405      	add	r5, r0
  while (seg_list != NULL &&
 8008a5c:	2d00      	cmp	r5, #0
 8008a5e:	dd02      	ble.n	8008a66 <tcp_free_acked_segments.isra.2+0x4a>
}
 8008a60:	4620      	mov	r0, r4
 8008a62:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    clen = pbuf_clen(next->p);
 8008a66:	6860      	ldr	r0, [r4, #4]
    seg_list = seg_list->next;
 8008a68:	6825      	ldr	r5, [r4, #0]
    clen = pbuf_clen(next->p);
 8008a6a:	f7fe fd9b 	bl	80075a4 <pbuf_clen>
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8008a6e:	8833      	ldrh	r3, [r6, #0]
    clen = pbuf_clen(next->p);
 8008a70:	4683      	mov	fp, r0
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8008a72:	4283      	cmp	r3, r0
 8008a74:	d206      	bcs.n	8008a84 <tcp_free_acked_segments.isra.2+0x68>
 8008a76:	4643      	mov	r3, r8
 8008a78:	f240 4257 	movw	r2, #1111	; 0x457
 8008a7c:	4651      	mov	r1, sl
 8008a7e:	480e      	ldr	r0, [pc, #56]	; (8008ab8 <tcp_free_acked_segments.isra.2+0x9c>)
 8008a80:	f003 fb60 	bl	800c144 <iprintf>
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8008a84:	8830      	ldrh	r0, [r6, #0]
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8008a86:	4a0d      	ldr	r2, [pc, #52]	; (8008abc <tcp_free_acked_segments.isra.2+0xa0>)
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8008a88:	eba0 000b 	sub.w	r0, r0, fp
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8008a8c:	8811      	ldrh	r1, [r2, #0]
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8008a8e:	8030      	strh	r0, [r6, #0]
    tcp_seg_free(next);
 8008a90:	4620      	mov	r0, r4
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8008a92:	8923      	ldrh	r3, [r4, #8]
 8008a94:	440b      	add	r3, r1
 8008a96:	8013      	strh	r3, [r2, #0]
    tcp_seg_free(next);
 8008a98:	f7ff f882 	bl	8007ba0 <tcp_seg_free>
    if (pcb->snd_queuelen != 0) {
 8008a9c:	8833      	ldrh	r3, [r6, #0]
 8008a9e:	b14b      	cbz	r3, 8008ab4 <tcp_free_acked_segments.isra.2+0x98>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8008aa0:	b945      	cbnz	r5, 8008ab4 <tcp_free_acked_segments.isra.2+0x98>
 8008aa2:	b93f      	cbnz	r7, 8008ab4 <tcp_free_acked_segments.isra.2+0x98>
 8008aa4:	463d      	mov	r5, r7
 8008aa6:	4643      	mov	r3, r8
 8008aa8:	f240 4262 	movw	r2, #1122	; 0x462
 8008aac:	4904      	ldr	r1, [pc, #16]	; (8008ac0 <tcp_free_acked_segments.isra.2+0xa4>)
 8008aae:	4802      	ldr	r0, [pc, #8]	; (8008ab8 <tcp_free_acked_segments.isra.2+0x9c>)
 8008ab0:	f003 fb48 	bl	800c144 <iprintf>
 8008ab4:	462c      	mov	r4, r5
 8008ab6:	e7bc      	b.n	8008a32 <tcp_free_acked_segments.isra.2+0x16>
 8008ab8:	0800d104 	.word	0x0800d104
 8008abc:	20006b94 	.word	0x20006b94
 8008ac0:	0800f5b4 	.word	0x0800f5b4
 8008ac4:	20006b7c 	.word	0x20006b7c
 8008ac8:	0800f7c7 	.word	0x0800f7c7
 8008acc:	0800f58c 	.word	0x0800f58c

08008ad0 <tcp_receive>:
{
 8008ad0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8008ad4:	4604      	mov	r4, r0
 8008ad6:	b930      	cbnz	r0, 8008ae6 <tcp_receive+0x16>
 8008ad8:	4b3a      	ldr	r3, [pc, #232]	; (8008bc4 <tcp_receive+0xf4>)
 8008ada:	f240 427b 	movw	r2, #1147	; 0x47b
 8008ade:	493a      	ldr	r1, [pc, #232]	; (8008bc8 <tcp_receive+0xf8>)
 8008ae0:	483a      	ldr	r0, [pc, #232]	; (8008bcc <tcp_receive+0xfc>)
 8008ae2:	f003 fb2f 	bl	800c144 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8008ae6:	7d23      	ldrb	r3, [r4, #20]
 8008ae8:	2b03      	cmp	r3, #3
 8008aea:	d806      	bhi.n	8008afa <tcp_receive+0x2a>
 8008aec:	4b35      	ldr	r3, [pc, #212]	; (8008bc4 <tcp_receive+0xf4>)
 8008aee:	f240 427c 	movw	r2, #1148	; 0x47c
 8008af2:	4937      	ldr	r1, [pc, #220]	; (8008bd0 <tcp_receive+0x100>)
 8008af4:	4835      	ldr	r0, [pc, #212]	; (8008bcc <tcp_receive+0xfc>)
 8008af6:	f003 fb25 	bl	800c144 <iprintf>
  if (flags & TCP_ACK) {
 8008afa:	4b36      	ldr	r3, [pc, #216]	; (8008bd4 <tcp_receive+0x104>)
 8008afc:	4e36      	ldr	r6, [pc, #216]	; (8008bd8 <tcp_receive+0x108>)
 8008afe:	781b      	ldrb	r3, [r3, #0]
 8008b00:	4f36      	ldr	r7, [pc, #216]	; (8008bdc <tcp_receive+0x10c>)
 8008b02:	f013 0f10 	tst.w	r3, #16
 8008b06:	f000 8095 	beq.w	8008c34 <tcp_receive+0x164>
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8008b0a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8008b0c:	6833      	ldr	r3, [r6, #0]
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8008b0e:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8008b12:	1ad5      	subs	r5, r2, r3
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8008b14:	6da0      	ldr	r0, [r4, #88]	; 0x58
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8008b16:	2d00      	cmp	r5, #0
 8008b18:	4d31      	ldr	r5, [pc, #196]	; (8008be0 <tcp_receive+0x110>)
 8008b1a:	db0d      	blt.n	8008b38 <tcp_receive+0x68>
 8008b1c:	429a      	cmp	r2, r3
 8008b1e:	d103      	bne.n	8008b28 <tcp_receive+0x58>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8008b20:	682a      	ldr	r2, [r5, #0]
 8008b22:	1a82      	subs	r2, r0, r2
 8008b24:	2a00      	cmp	r2, #0
 8008b26:	db07      	blt.n	8008b38 <tcp_receive+0x68>
 8008b28:	682a      	ldr	r2, [r5, #0]
 8008b2a:	4290      	cmp	r0, r2
 8008b2c:	d112      	bne.n	8008b54 <tcp_receive+0x84>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8008b2e:	4a2d      	ldr	r2, [pc, #180]	; (8008be4 <tcp_receive+0x114>)
 8008b30:	6812      	ldr	r2, [r2, #0]
 8008b32:	89d2      	ldrh	r2, [r2, #14]
 8008b34:	428a      	cmp	r2, r1
 8008b36:	d90d      	bls.n	8008b54 <tcp_receive+0x84>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8008b38:	4a2a      	ldr	r2, [pc, #168]	; (8008be4 <tcp_receive+0x114>)
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8008b3a:	f8b4 e062 	ldrh.w	lr, [r4, #98]	; 0x62
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8008b3e:	6812      	ldr	r2, [r2, #0]
 8008b40:	89d2      	ldrh	r2, [r2, #14]
      pcb->snd_wl1 = seqno;
 8008b42:	6563      	str	r3, [r4, #84]	; 0x54
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8008b44:	4596      	cmp	lr, r2
      pcb->snd_wl2 = ackno;
 8008b46:	682b      	ldr	r3, [r5, #0]
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8008b48:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8008b4c:	bf38      	it	cc
 8008b4e:	f8a4 2062 	strhcc.w	r2, [r4, #98]	; 0x62
      pcb->snd_wl2 = ackno;
 8008b52:	65a3      	str	r3, [r4, #88]	; 0x58
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8008b54:	682a      	ldr	r2, [r5, #0]
 8008b56:	f8d4 e044 	ldr.w	lr, [r4, #68]	; 0x44
 8008b5a:	eba2 030e 	sub.w	r3, r2, lr
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	f300 8166 	bgt.w	8008e30 <tcp_receive+0x360>
      if (tcplen == 0) {
 8008b64:	883b      	ldrh	r3, [r7, #0]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	f040 821b 	bne.w	8008fa2 <tcp_receive+0x4d2>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8008b6c:	4401      	add	r1, r0
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8008b6e:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 8008b72:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b74:	4403      	add	r3, r0
 8008b76:	4299      	cmp	r1, r3
 8008b78:	f040 8213 	bne.w	8008fa2 <tcp_receive+0x4d2>
          if (pcb->rtime >= 0) {
 8008b7c:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	f2c0 820e 	blt.w	8008fa2 <tcp_receive+0x4d2>
            if (pcb->lastack == ackno) {
 8008b86:	4572      	cmp	r2, lr
 8008b88:	f040 820b 	bne.w	8008fa2 <tcp_receive+0x4d2>
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8008b8c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008b90:	1c53      	adds	r3, r2, #1
 8008b92:	b2db      	uxtb	r3, r3
 8008b94:	429a      	cmp	r2, r3
                ++pcb->dupacks;
 8008b96:	bf38      	it	cc
 8008b98:	f884 3043 	strbcc.w	r3, [r4, #67]	; 0x43
              if (pcb->dupacks > 3) {
 8008b9c:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008ba0:	2b03      	cmp	r3, #3
 8008ba2:	d921      	bls.n	8008be8 <tcp_receive+0x118>
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8008ba4:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 8008ba8:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8008baa:	4413      	add	r3, r2
 8008bac:	b29b      	uxth	r3, r3
 8008bae:	429a      	cmp	r2, r3
 8008bb0:	bf88      	it	hi
 8008bb2:	f64f 73ff 	movwhi	r3, #65535	; 0xffff
 8008bb6:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
                tcp_rexmit_fast(pcb);
 8008bba:	4620      	mov	r0, r4
 8008bbc:	f001 fdbe 	bl	800a73c <tcp_rexmit_fast>
 8008bc0:	e013      	b.n	8008bea <tcp_receive+0x11a>
 8008bc2:	bf00      	nop
 8008bc4:	0800f7c7 	.word	0x0800f7c7
 8008bc8:	0800f813 	.word	0x0800f813
 8008bcc:	0800d104 	.word	0x0800d104
 8008bd0:	0800f82c 	.word	0x0800f82c
 8008bd4:	20006b80 	.word	0x20006b80
 8008bd8:	20006ba0 	.word	0x20006ba0
 8008bdc:	20006bb6 	.word	0x20006bb6
 8008be0:	20006b7c 	.word	0x20006b7c
 8008be4:	20006ba8 	.word	0x20006ba8
              if (pcb->dupacks >= 3) {
 8008be8:	d0e7      	beq.n	8008bba <tcp_receive+0xea>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8008bea:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8008bec:	b312      	cbz	r2, 8008c34 <tcp_receive+0x164>
 8008bee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008bf0:	6829      	ldr	r1, [r5, #0]
 8008bf2:	1a5b      	subs	r3, r3, r1
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	da1d      	bge.n	8008c34 <tcp_receive+0x164>
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8008bf8:	4b82      	ldr	r3, [pc, #520]	; (8008e04 <tcp_receive+0x334>)
      m = (s16_t)(m - (pcb->sa >> 3));
 8008bfa:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	; 0x3c
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8008bfe:	6819      	ldr	r1, [r3, #0]
 8008c00:	1a89      	subs	r1, r1, r2
      m = (s16_t)(m - (pcb->sv >> 2));
 8008c02:	f9b4 203e 	ldrsh.w	r2, [r4, #62]	; 0x3e
      m = (s16_t)(m - (pcb->sa >> 3));
 8008c06:	eba1 01e0 	sub.w	r1, r1, r0, asr #3
      pcb->sv = (s16_t)(pcb->sv + m);
 8008c0a:	eba2 02a2 	sub.w	r2, r2, r2, asr #2
      m = (s16_t)(m - (pcb->sa >> 3));
 8008c0e:	b289      	uxth	r1, r1
 8008c10:	b20b      	sxth	r3, r1
      pcb->sa = (s16_t)(pcb->sa + m);
 8008c12:	4408      	add	r0, r1
      if (m < 0) {
 8008c14:	2b00      	cmp	r3, #0
      pcb->sa = (s16_t)(pcb->sa + m);
 8008c16:	b200      	sxth	r0, r0
        m = (s16_t) - m;
 8008c18:	bfb8      	it	lt
 8008c1a:	4249      	neglt	r1, r1
      pcb->sa = (s16_t)(pcb->sa + m);
 8008c1c:	87a0      	strh	r0, [r4, #60]	; 0x3c
        m = (s16_t) - m;
 8008c1e:	bfb8      	it	lt
 8008c20:	b20b      	sxthlt	r3, r1
      pcb->sv = (s16_t)(pcb->sv + m);
 8008c22:	4413      	add	r3, r2
 8008c24:	b29b      	uxth	r3, r3
 8008c26:	87e3      	strh	r3, [r4, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8008c28:	eb03 03e0 	add.w	r3, r3, r0, asr #3
 8008c2c:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
      pcb->rttest = 0;
 8008c30:	2300      	movs	r3, #0
 8008c32:	6363      	str	r3, [r4, #52]	; 0x34
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8008c34:	8838      	ldrh	r0, [r7, #0]
 8008c36:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008c38:	2800      	cmp	r0, #0
 8008c3a:	f000 81a6 	beq.w	8008f8a <tcp_receive+0x4ba>
 8008c3e:	7d23      	ldrb	r3, [r4, #20]
 8008c40:	2b06      	cmp	r3, #6
 8008c42:	f200 81a2 	bhi.w	8008f8a <tcp_receive+0x4ba>
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8008c46:	6833      	ldr	r3, [r6, #0]
 8008c48:	1ad5      	subs	r5, r2, r3
 8008c4a:	2d01      	cmp	r5, #1
 8008c4c:	f100 818b 	bmi.w	8008f66 <tcp_receive+0x496>
 8008c50:	f1c3 0101 	rsb	r1, r3, #1
 8008c54:	1a09      	subs	r1, r1, r0
 8008c56:	4411      	add	r1, r2
 8008c58:	2900      	cmp	r1, #0
 8008c5a:	f300 8184 	bgt.w	8008f66 <tcp_receive+0x496>
      struct pbuf *p = inseg.p;
 8008c5e:	4b6a      	ldr	r3, [pc, #424]	; (8008e08 <tcp_receive+0x338>)
 8008c60:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8008c64:	4698      	mov	r8, r3
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8008c66:	f1b9 0f00 	cmp.w	r9, #0
 8008c6a:	d106      	bne.n	8008c7a <tcp_receive+0x1aa>
 8008c6c:	4b67      	ldr	r3, [pc, #412]	; (8008e0c <tcp_receive+0x33c>)
 8008c6e:	f240 5294 	movw	r2, #1428	; 0x594
 8008c72:	4967      	ldr	r1, [pc, #412]	; (8008e10 <tcp_receive+0x340>)
 8008c74:	4867      	ldr	r0, [pc, #412]	; (8008e14 <tcp_receive+0x344>)
 8008c76:	f003 fa65 	bl	800c144 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8008c7a:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8008c7e:	429d      	cmp	r5, r3
 8008c80:	d906      	bls.n	8008c90 <tcp_receive+0x1c0>
 8008c82:	4b62      	ldr	r3, [pc, #392]	; (8008e0c <tcp_receive+0x33c>)
 8008c84:	f240 5295 	movw	r2, #1429	; 0x595
 8008c88:	4963      	ldr	r1, [pc, #396]	; (8008e18 <tcp_receive+0x348>)
 8008c8a:	4862      	ldr	r0, [pc, #392]	; (8008e14 <tcp_receive+0x344>)
 8008c8c:	f003 fa5a 	bl	800c144 <iprintf>
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8008c90:	f8d8 3004 	ldr.w	r3, [r8, #4]
      off = (u16_t)off32;
 8008c94:	b2ad      	uxth	r5, r5
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8008c96:	891b      	ldrh	r3, [r3, #8]
 8008c98:	42ab      	cmp	r3, r5
 8008c9a:	d206      	bcs.n	8008caa <tcp_receive+0x1da>
 8008c9c:	4b5b      	ldr	r3, [pc, #364]	; (8008e0c <tcp_receive+0x33c>)
 8008c9e:	f240 5297 	movw	r2, #1431	; 0x597
 8008ca2:	495e      	ldr	r1, [pc, #376]	; (8008e1c <tcp_receive+0x34c>)
 8008ca4:	485b      	ldr	r0, [pc, #364]	; (8008e14 <tcp_receive+0x344>)
 8008ca6:	f003 fa4d 	bl	800c144 <iprintf>
      inseg.len -= off;
 8008caa:	f8b8 3008 	ldrh.w	r3, [r8, #8]
        p->len = 0;
 8008cae:	2100      	movs	r1, #0
      inseg.len -= off;
 8008cb0:	1b5b      	subs	r3, r3, r5
 8008cb2:	f8a8 3008 	strh.w	r3, [r8, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8008cb6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008cba:	891b      	ldrh	r3, [r3, #8]
 8008cbc:	1b5b      	subs	r3, r3, r5
 8008cbe:	b29b      	uxth	r3, r3
      while (p->len < off) {
 8008cc0:	f8b9 200a 	ldrh.w	r2, [r9, #10]
 8008cc4:	4295      	cmp	r5, r2
 8008cc6:	f200 8145 	bhi.w	8008f54 <tcp_receive+0x484>
      pbuf_remove_header(p, off);
 8008cca:	4629      	mov	r1, r5
 8008ccc:	4648      	mov	r0, r9
 8008cce:	f7fe faf3 	bl	80072b8 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8008cd2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008cd4:	f8d8 200c 	ldr.w	r2, [r8, #12]
 8008cd8:	6033      	str	r3, [r6, #0]
 8008cda:	6053      	str	r3, [r2, #4]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8008cdc:	6831      	ldr	r1, [r6, #0]
 8008cde:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008ce0:	1a8b      	subs	r3, r1, r2
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	f2c0 814c 	blt.w	8008f80 <tcp_receive+0x4b0>
 8008ce8:	1c4b      	adds	r3, r1, #1
 8008cea:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 8008cec:	1a9b      	subs	r3, r3, r2
 8008cee:	1a1b      	subs	r3, r3, r0
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	f300 8145 	bgt.w	8008f80 <tcp_receive+0x4b0>
      if (pcb->rcv_nxt == seqno) {
 8008cf6:	4291      	cmp	r1, r2
 8008cf8:	f040 8142 	bne.w	8008f80 <tcp_receive+0x4b0>
        tcplen = TCP_TCPLEN(&inseg);
 8008cfc:	4d42      	ldr	r5, [pc, #264]	; (8008e08 <tcp_receive+0x338>)
 8008cfe:	68eb      	ldr	r3, [r5, #12]
 8008d00:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 8008d04:	8998      	ldrh	r0, [r3, #12]
 8008d06:	f7fb fac9 	bl	800429c <lwip_htons>
 8008d0a:	f010 0003 	ands.w	r0, r0, #3
        if (tcplen > pcb->rcv_wnd) {
 8008d0e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        tcplen = TCP_TCPLEN(&inseg);
 8008d10:	bf18      	it	ne
 8008d12:	2001      	movne	r0, #1
 8008d14:	4440      	add	r0, r8
 8008d16:	b280      	uxth	r0, r0
        if (tcplen > pcb->rcv_wnd) {
 8008d18:	4283      	cmp	r3, r0
        tcplen = TCP_TCPLEN(&inseg);
 8008d1a:	8038      	strh	r0, [r7, #0]
        if (tcplen > pcb->rcv_wnd) {
 8008d1c:	d241      	bcs.n	8008da2 <tcp_receive+0x2d2>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8008d1e:	68eb      	ldr	r3, [r5, #12]
 8008d20:	8998      	ldrh	r0, [r3, #12]
 8008d22:	f7fb fabb 	bl	800429c <lwip_htons>
 8008d26:	07c3      	lsls	r3, r0, #31
 8008d28:	d510      	bpl.n	8008d4c <tcp_receive+0x27c>
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8008d2a:	f8d5 900c 	ldr.w	r9, [r5, #12]
 8008d2e:	f8b9 800c 	ldrh.w	r8, [r9, #12]
 8008d32:	4640      	mov	r0, r8
 8008d34:	f428 587c 	bic.w	r8, r8, #16128	; 0x3f00
 8008d38:	f7fb fab0 	bl	800429c <lwip_htons>
 8008d3c:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 8008d40:	f7fb faac 	bl	800429c <lwip_htons>
 8008d44:	ea48 0800 	orr.w	r8, r8, r0
 8008d48:	f8a9 800c 	strh.w	r8, [r9, #12]
          inseg.len = (u16_t)pcb->rcv_wnd;
 8008d4c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8008d4e:	812b      	strh	r3, [r5, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8008d50:	68eb      	ldr	r3, [r5, #12]
 8008d52:	8998      	ldrh	r0, [r3, #12]
 8008d54:	f7fb faa2 	bl	800429c <lwip_htons>
 8008d58:	0780      	lsls	r0, r0, #30
          pbuf_realloc(inseg.p, inseg.len);
 8008d5a:	6868      	ldr	r0, [r5, #4]
            inseg.len -= 1;
 8008d5c:	bf42      	ittt	mi
 8008d5e:	892b      	ldrhmi	r3, [r5, #8]
 8008d60:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8008d64:	812b      	strhmi	r3, [r5, #8]
          pbuf_realloc(inseg.p, inseg.len);
 8008d66:	8929      	ldrh	r1, [r5, #8]
 8008d68:	f7fe fbc4 	bl	80074f4 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8008d6c:	68eb      	ldr	r3, [r5, #12]
 8008d6e:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 8008d72:	8998      	ldrh	r0, [r3, #12]
 8008d74:	f7fb fa92 	bl	800429c <lwip_htons>
 8008d78:	f010 0003 	ands.w	r0, r0, #3
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8008d7c:	6833      	ldr	r3, [r6, #0]
          tcplen = TCP_TCPLEN(&inseg);
 8008d7e:	bf18      	it	ne
 8008d80:	2001      	movne	r0, #1
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8008d82:	6a62      	ldr	r2, [r4, #36]	; 0x24
          tcplen = TCP_TCPLEN(&inseg);
 8008d84:	4440      	add	r0, r8
 8008d86:	b280      	uxth	r0, r0
 8008d88:	8038      	strh	r0, [r7, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8008d8a:	4418      	add	r0, r3
 8008d8c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8008d8e:	4413      	add	r3, r2
 8008d90:	4298      	cmp	r0, r3
 8008d92:	d006      	beq.n	8008da2 <tcp_receive+0x2d2>
 8008d94:	4b1d      	ldr	r3, [pc, #116]	; (8008e0c <tcp_receive+0x33c>)
 8008d96:	f240 52cc 	movw	r2, #1484	; 0x5cc
 8008d9a:	4921      	ldr	r1, [pc, #132]	; (8008e20 <tcp_receive+0x350>)
 8008d9c:	481d      	ldr	r0, [pc, #116]	; (8008e14 <tcp_receive+0x344>)
 8008d9e:	f003 f9d1 	bl	800c144 <iprintf>
        pcb->rcv_nxt = seqno + tcplen;
 8008da2:	883a      	ldrh	r2, [r7, #0]
 8008da4:	6833      	ldr	r3, [r6, #0]
 8008da6:	4413      	add	r3, r2
 8008da8:	6263      	str	r3, [r4, #36]	; 0x24
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8008daa:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8008dac:	4293      	cmp	r3, r2
 8008dae:	d206      	bcs.n	8008dbe <tcp_receive+0x2ee>
 8008db0:	4b16      	ldr	r3, [pc, #88]	; (8008e0c <tcp_receive+0x33c>)
 8008db2:	f240 6207 	movw	r2, #1543	; 0x607
 8008db6:	491b      	ldr	r1, [pc, #108]	; (8008e24 <tcp_receive+0x354>)
 8008db8:	4816      	ldr	r0, [pc, #88]	; (8008e14 <tcp_receive+0x344>)
 8008dba:	f003 f9c3 	bl	800c144 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8008dbe:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        tcp_update_rcv_ann_wnd(pcb);
 8008dc0:	4620      	mov	r0, r4
        pcb->rcv_wnd -= tcplen;
 8008dc2:	883a      	ldrh	r2, [r7, #0]
 8008dc4:	1a9b      	subs	r3, r3, r2
 8008dc6:	8523      	strh	r3, [r4, #40]	; 0x28
        tcp_update_rcv_ann_wnd(pcb);
 8008dc8:	f7fe fe78 	bl	8007abc <tcp_update_rcv_ann_wnd>
        if (inseg.p->tot_len > 0) {
 8008dcc:	686b      	ldr	r3, [r5, #4]
 8008dce:	891a      	ldrh	r2, [r3, #8]
 8008dd0:	b11a      	cbz	r2, 8008dda <tcp_receive+0x30a>
          recv_data = inseg.p;
 8008dd2:	4a15      	ldr	r2, [pc, #84]	; (8008e28 <tcp_receive+0x358>)
 8008dd4:	6013      	str	r3, [r2, #0]
          inseg.p = NULL;
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	606b      	str	r3, [r5, #4]
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8008dda:	68eb      	ldr	r3, [r5, #12]
 8008ddc:	8998      	ldrh	r0, [r3, #12]
 8008dde:	f7fb fa5d 	bl	800429c <lwip_htons>
 8008de2:	07c1      	lsls	r1, r0, #31
          recv_flags |= TF_GOT_FIN;
 8008de4:	bf41      	itttt	mi
 8008de6:	4a11      	ldrmi	r2, [pc, #68]	; (8008e2c <tcp_receive+0x35c>)
 8008de8:	7813      	ldrbmi	r3, [r2, #0]
 8008dea:	f043 0320 	orrmi.w	r3, r3, #32
 8008dee:	7013      	strbmi	r3, [r2, #0]
        tcp_ack(pcb);
 8008df0:	8b63      	ldrh	r3, [r4, #26]
 8008df2:	07da      	lsls	r2, r3, #31
 8008df4:	f140 80bf 	bpl.w	8008f76 <tcp_receive+0x4a6>
 8008df8:	f023 0301 	bic.w	r3, r3, #1
      tcp_ack_now(pcb);
 8008dfc:	f043 0302 	orr.w	r3, r3, #2
 8008e00:	e0bb      	b.n	8008f7a <tcp_receive+0x4aa>
 8008e02:	bf00      	nop
 8008e04:	2000d390 	.word	0x2000d390
 8008e08:	20006b84 	.word	0x20006b84
 8008e0c:	0800f7c7 	.word	0x0800f7c7
 8008e10:	0800f845 	.word	0x0800f845
 8008e14:	0800d104 	.word	0x0800d104
 8008e18:	0800f855 	.word	0x0800f855
 8008e1c:	0800f864 	.word	0x0800f864
 8008e20:	0800f874 	.word	0x0800f874
 8008e24:	0800f8ab 	.word	0x0800f8ab
 8008e28:	20006b98 	.word	0x20006b98
 8008e2c:	20006b9c 	.word	0x20006b9c
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008e30:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8008e32:	1a51      	subs	r1, r2, r1
 8008e34:	2900      	cmp	r1, #0
 8008e36:	f300 8089 	bgt.w	8008f4c <tcp_receive+0x47c>
      if (pcb->flags & TF_INFR) {
 8008e3a:	8b61      	ldrh	r1, [r4, #26]
 8008e3c:	0748      	lsls	r0, r1, #29
 8008e3e:	d509      	bpl.n	8008e54 <tcp_receive+0x384>
        tcp_clear_flags(pcb, TF_INFR);
 8008e40:	f021 0104 	bic.w	r1, r1, #4
 8008e44:	8361      	strh	r1, [r4, #26]
        pcb->cwnd = pcb->ssthresh;
 8008e46:	f8b4 104a 	ldrh.w	r1, [r4, #74]	; 0x4a
 8008e4a:	f8a4 1048 	strh.w	r1, [r4, #72]	; 0x48
        pcb->bytes_acked = 0;
 8008e4e:	2100      	movs	r1, #0
 8008e50:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8008e54:	f9b4 e03c 	ldrsh.w	lr, [r4, #60]	; 0x3c
      pcb->nrtx = 0;
 8008e58:	2000      	movs	r0, #0
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8008e5a:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
      pcb->lastack = ackno;
 8008e5c:	6462      	str	r2, [r4, #68]	; 0x44
      if (pcb->state >= ESTABLISHED) {
 8008e5e:	7d22      	ldrb	r2, [r4, #20]
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8008e60:	eb01 01ee 	add.w	r1, r1, lr, asr #3
      pcb->nrtx = 0;
 8008e64:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
      if (pcb->state >= ESTABLISHED) {
 8008e68:	2a03      	cmp	r2, #3
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8008e6a:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
      pcb->dupacks = 0;
 8008e6e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
      if (pcb->state >= ESTABLISHED) {
 8008e72:	d91b      	bls.n	8008eac <tcp_receive+0x3dc>
        if (pcb->cwnd < pcb->ssthresh) {
 8008e74:	f8b4 1048 	ldrh.w	r1, [r4, #72]	; 0x48
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8008e78:	b29b      	uxth	r3, r3
        if (pcb->cwnd < pcb->ssthresh) {
 8008e7a:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 8008e7e:	428a      	cmp	r2, r1
 8008e80:	d93e      	bls.n	8008f00 <tcp_receive+0x430>
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8008e82:	8b62      	ldrh	r2, [r4, #26]
 8008e84:	f412 6f00 	tst.w	r2, #2048	; 0x800
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8008e88:	8e62      	ldrh	r2, [r4, #50]	; 0x32
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8008e8a:	bf14      	ite	ne
 8008e8c:	2001      	movne	r0, #1
 8008e8e:	2002      	moveq	r0, #2
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8008e90:	fb12 f200 	smulbb	r2, r2, r0
 8008e94:	b292      	uxth	r2, r2
          TCP_WND_INC(pcb->cwnd, increase);
 8008e96:	429a      	cmp	r2, r3
 8008e98:	bf94      	ite	ls
 8008e9a:	188b      	addls	r3, r1, r2
 8008e9c:	18cb      	addhi	r3, r1, r3
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8008e9e:	b29b      	uxth	r3, r3
 8008ea0:	4299      	cmp	r1, r3
 8008ea2:	d901      	bls.n	8008ea8 <tcp_receive+0x3d8>
          TCP_WND_INC(pcb->cwnd, increase);
 8008ea4:	f64f 73ff 	movw	r3, #65535	; 0xffff
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8008ea8:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
 8008eac:	f104 0866 	add.w	r8, r4, #102	; 0x66
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8008eb0:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8008eb2:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8008eb4:	4640      	mov	r0, r8
 8008eb6:	f7ff fdb1 	bl	8008a1c <tcp_free_acked_segments.isra.2>
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8008eba:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8008ebc:	4602      	mov	r2, r0
 8008ebe:	6720      	str	r0, [r4, #112]	; 0x70
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8008ec0:	4640      	mov	r0, r8
 8008ec2:	f7ff fdab 	bl	8008a1c <tcp_free_acked_segments.isra.2>
      if (pcb->unacked == NULL) {
 8008ec6:	6f23      	ldr	r3, [r4, #112]	; 0x70
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8008ec8:	66e0      	str	r0, [r4, #108]	; 0x6c
 8008eca:	2200      	movs	r2, #0
      if (pcb->unacked == NULL) {
 8008ecc:	bb63      	cbnz	r3, 8008f28 <tcp_receive+0x458>
        pcb->rtime = -1;
 8008ece:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008ed2:	8621      	strh	r1, [r4, #48]	; 0x30
      pcb->polltmr = 0;
 8008ed4:	7722      	strb	r2, [r4, #28]
      if (pcb->unsent == NULL) {
 8008ed6:	b908      	cbnz	r0, 8008edc <tcp_receive+0x40c>
        pcb->unsent_oversize = 0;
 8008ed8:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8008edc:	4934      	ldr	r1, [pc, #208]	; (8008fb0 <tcp_receive+0x4e0>)
 8008ede:	f8b4 2064 	ldrh.w	r2, [r4, #100]	; 0x64
 8008ee2:	8809      	ldrh	r1, [r1, #0]
 8008ee4:	440a      	add	r2, r1
 8008ee6:	f8a4 2064 	strh.w	r2, [r4, #100]	; 0x64
      if (pcb->flags & TF_RTO) {
 8008eea:	8b62      	ldrh	r2, [r4, #26]
 8008eec:	0512      	lsls	r2, r2, #20
 8008eee:	f57f ae7c 	bpl.w	8008bea <tcp_receive+0x11a>
        if (pcb->unacked == NULL) {
 8008ef2:	bb3b      	cbnz	r3, 8008f44 <tcp_receive+0x474>
          if ((pcb->unsent == NULL) ||
 8008ef4:	b9d0      	cbnz	r0, 8008f2c <tcp_receive+0x45c>
          tcp_clear_flags(pcb, TF_RTO);
 8008ef6:	8b63      	ldrh	r3, [r4, #26]
 8008ef8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008efc:	8363      	strh	r3, [r4, #26]
 8008efe:	e674      	b.n	8008bea <tcp_receive+0x11a>
          TCP_WND_INC(pcb->bytes_acked, acked);
 8008f00:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 8008f04:	4413      	add	r3, r2
 8008f06:	b29b      	uxth	r3, r3
 8008f08:	429a      	cmp	r2, r3
 8008f0a:	bf88      	it	hi
 8008f0c:	f64f 73ff 	movwhi	r3, #65535	; 0xffff
 8008f10:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8008f14:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8008f18:	4299      	cmp	r1, r3
 8008f1a:	d8c7      	bhi.n	8008eac <tcp_receive+0x3dc>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8008f1c:	1a5b      	subs	r3, r3, r1
 8008f1e:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8008f22:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8008f24:	440b      	add	r3, r1
 8008f26:	e7ba      	b.n	8008e9e <tcp_receive+0x3ce>
        pcb->rtime = 0;
 8008f28:	8622      	strh	r2, [r4, #48]	; 0x30
 8008f2a:	e7d3      	b.n	8008ed4 <tcp_receive+0x404>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8008f2c:	f8d4 804c 	ldr.w	r8, [r4, #76]	; 0x4c
 8008f30:	68c3      	ldr	r3, [r0, #12]
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8008f32:	6858      	ldr	r0, [r3, #4]
 8008f34:	f7fb f9b5 	bl	80042a2 <lwip_htonl>
 8008f38:	eba8 0000 	sub.w	r0, r8, r0
 8008f3c:	2800      	cmp	r0, #0
 8008f3e:	f73f ae54 	bgt.w	8008bea <tcp_receive+0x11a>
 8008f42:	e7d8      	b.n	8008ef6 <tcp_receive+0x426>
 8008f44:	f8d4 804c 	ldr.w	r8, [r4, #76]	; 0x4c
 8008f48:	68db      	ldr	r3, [r3, #12]
 8008f4a:	e7f2      	b.n	8008f32 <tcp_receive+0x462>
      tcp_send_empty_ack(pcb);
 8008f4c:	4620      	mov	r0, r4
 8008f4e:	f001 fc71 	bl	800a834 <tcp_send_empty_ack>
 8008f52:	e64a      	b.n	8008bea <tcp_receive+0x11a>
        off -= p->len;
 8008f54:	1aad      	subs	r5, r5, r2
        p->tot_len = new_tot_len;
 8008f56:	f8a9 3008 	strh.w	r3, [r9, #8]
        p->len = 0;
 8008f5a:	f8a9 100a 	strh.w	r1, [r9, #10]
        off -= p->len;
 8008f5e:	b2ad      	uxth	r5, r5
        p = p->next;
 8008f60:	f8d9 9000 	ldr.w	r9, [r9]
 8008f64:	e6ac      	b.n	8008cc0 <tcp_receive+0x1f0>
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8008f66:	1a9b      	subs	r3, r3, r2
 8008f68:	2b00      	cmp	r3, #0
        tcp_ack_now(pcb);
 8008f6a:	bfbe      	ittt	lt
 8008f6c:	8b63      	ldrhlt	r3, [r4, #26]
 8008f6e:	f043 0302 	orrlt.w	r3, r3, #2
 8008f72:	8363      	strhlt	r3, [r4, #26]
 8008f74:	e6b2      	b.n	8008cdc <tcp_receive+0x20c>
        tcp_ack(pcb);
 8008f76:	f043 0301 	orr.w	r3, r3, #1
      tcp_ack_now(pcb);
 8008f7a:	8363      	strh	r3, [r4, #26]
}
 8008f7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        tcp_send_empty_ack(pcb);
 8008f80:	4620      	mov	r0, r4
}
 8008f82:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        tcp_send_empty_ack(pcb);
 8008f86:	f001 bc55 	b.w	800a834 <tcp_send_empty_ack>
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8008f8a:	6833      	ldr	r3, [r6, #0]
 8008f8c:	1a99      	subs	r1, r3, r2
 8008f8e:	2900      	cmp	r1, #0
 8008f90:	db05      	blt.n	8008f9e <tcp_receive+0x4ce>
 8008f92:	3301      	adds	r3, #1
 8008f94:	1a9b      	subs	r3, r3, r2
 8008f96:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8008f98:	1a9b      	subs	r3, r3, r2
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	dd05      	ble.n	8008faa <tcp_receive+0x4da>
      tcp_ack_now(pcb);
 8008f9e:	8b63      	ldrh	r3, [r4, #26]
 8008fa0:	e72c      	b.n	8008dfc <tcp_receive+0x32c>
        pcb->dupacks = 0;
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008fa8:	e61f      	b.n	8008bea <tcp_receive+0x11a>
 8008faa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008fae:	bf00      	nop
 8008fb0:	20006b94 	.word	0x20006b94

08008fb4 <tcp_input>:
{
 8008fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8008fb8:	4605      	mov	r5, r0
{
 8008fba:	b089      	sub	sp, #36	; 0x24
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8008fbc:	b928      	cbnz	r0, 8008fca <tcp_input+0x16>
 8008fbe:	4bac      	ldr	r3, [pc, #688]	; (8009270 <tcp_input+0x2bc>)
 8008fc0:	2283      	movs	r2, #131	; 0x83
 8008fc2:	49ac      	ldr	r1, [pc, #688]	; (8009274 <tcp_input+0x2c0>)
 8008fc4:	48ac      	ldr	r0, [pc, #688]	; (8009278 <tcp_input+0x2c4>)
 8008fc6:	f003 f8bd 	bl	800c144 <iprintf>
  tcphdr = (struct tcp_hdr *)p->payload;
 8008fca:	686b      	ldr	r3, [r5, #4]
 8008fcc:	4eab      	ldr	r6, [pc, #684]	; (800927c <tcp_input+0x2c8>)
 8008fce:	6033      	str	r3, [r6, #0]
  if (p->len < TCP_HLEN) {
 8008fd0:	896b      	ldrh	r3, [r5, #10]
 8008fd2:	2b13      	cmp	r3, #19
 8008fd4:	f240 80a9 	bls.w	800912a <tcp_input+0x176>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8008fd8:	4ca9      	ldr	r4, [pc, #676]	; (8009280 <tcp_input+0x2cc>)
 8008fda:	6821      	ldr	r1, [r4, #0]
 8008fdc:	46a0      	mov	r8, r4
 8008fde:	6960      	ldr	r0, [r4, #20]
 8008fe0:	f7fd f8a3 	bl	800612a <ip4_addr_isbroadcast_u32>
 8008fe4:	4607      	mov	r7, r0
 8008fe6:	2800      	cmp	r0, #0
 8008fe8:	f040 809f 	bne.w	800912a <tcp_input+0x176>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8008fec:	6963      	ldr	r3, [r4, #20]
 8008fee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8008ff2:	2be0      	cmp	r3, #224	; 0xe0
 8008ff4:	f000 8099 	beq.w	800912a <tcp_input+0x176>
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8008ff8:	6833      	ldr	r3, [r6, #0]
 8008ffa:	8998      	ldrh	r0, [r3, #12]
 8008ffc:	f7fb f94e 	bl	800429c <lwip_htons>
 8009000:	0a81      	lsrs	r1, r0, #10
 8009002:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8009006:	2913      	cmp	r1, #19
 8009008:	f240 808f 	bls.w	800912a <tcp_input+0x176>
 800900c:	b28a      	uxth	r2, r1
 800900e:	892b      	ldrh	r3, [r5, #8]
 8009010:	4293      	cmp	r3, r2
 8009012:	f0c0 808a 	bcc.w	800912a <tcp_input+0x176>
  tcphdr_opt2 = NULL;
 8009016:	489b      	ldr	r0, [pc, #620]	; (8009284 <tcp_input+0x2d0>)
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8009018:	f1a2 0314 	sub.w	r3, r2, #20
 800901c:	4c9a      	ldr	r4, [pc, #616]	; (8009288 <tcp_input+0x2d4>)
  tcphdr_opt2 = NULL;
 800901e:	6007      	str	r7, [r0, #0]
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8009020:	b29b      	uxth	r3, r3
  if (p->len >= hdrlen_bytes) {
 8009022:	896f      	ldrh	r7, [r5, #10]
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8009024:	8023      	strh	r3, [r4, #0]
  if (p->len >= hdrlen_bytes) {
 8009026:	4297      	cmp	r7, r2
 8009028:	f8df 92a8 	ldr.w	r9, [pc, #680]	; 80092d4 <tcp_input+0x320>
 800902c:	4607      	mov	r7, r0
 800902e:	d341      	bcc.n	80090b4 <tcp_input+0x100>
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8009030:	4628      	mov	r0, r5
    tcphdr_opt1len = tcphdr_optlen;
 8009032:	f8a9 3000 	strh.w	r3, [r9]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8009036:	f7fe f93f 	bl	80072b8 <pbuf_remove_header>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800903a:	6834      	ldr	r4, [r6, #0]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800903c:	4f93      	ldr	r7, [pc, #588]	; (800928c <tcp_input+0x2d8>)
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800903e:	8820      	ldrh	r0, [r4, #0]
 8009040:	f7fb f92c 	bl	800429c <lwip_htons>
 8009044:	8020      	strh	r0, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8009046:	6834      	ldr	r4, [r6, #0]
 8009048:	46bb      	mov	fp, r7
 800904a:	8860      	ldrh	r0, [r4, #2]
 800904c:	f7fb f926 	bl	800429c <lwip_htons>
 8009050:	8060      	strh	r0, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8009052:	6834      	ldr	r4, [r6, #0]
 8009054:	6860      	ldr	r0, [r4, #4]
 8009056:	f7fb f924 	bl	80042a2 <lwip_htonl>
 800905a:	6060      	str	r0, [r4, #4]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800905c:	6834      	ldr	r4, [r6, #0]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800905e:	6038      	str	r0, [r7, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8009060:	68a0      	ldr	r0, [r4, #8]
 8009062:	f7fb f91e 	bl	80042a2 <lwip_htonl>
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8009066:	f8d6 9000 	ldr.w	r9, [r6]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800906a:	60a0      	str	r0, [r4, #8]
 800906c:	4c88      	ldr	r4, [pc, #544]	; (8009290 <tcp_input+0x2dc>)
 800906e:	6020      	str	r0, [r4, #0]
 8009070:	46a2      	mov	sl, r4
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8009072:	f8b9 000e 	ldrh.w	r0, [r9, #14]
 8009076:	f7fb f911 	bl	800429c <lwip_htons>
  flags = TCPH_FLAGS(tcphdr);
 800907a:	6833      	ldr	r3, [r6, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800907c:	f8a9 000e 	strh.w	r0, [r9, #14]
  flags = TCPH_FLAGS(tcphdr);
 8009080:	8998      	ldrh	r0, [r3, #12]
 8009082:	f7fb f90b 	bl	800429c <lwip_htons>
 8009086:	4b83      	ldr	r3, [pc, #524]	; (8009294 <tcp_input+0x2e0>)
 8009088:	b2c0      	uxtb	r0, r0
 800908a:	9305      	str	r3, [sp, #20]
 800908c:	f000 023f 	and.w	r2, r0, #63	; 0x3f
  if (flags & (TCP_FIN | TCP_SYN)) {
 8009090:	f010 0f03 	tst.w	r0, #3
  flags = TCPH_FLAGS(tcphdr);
 8009094:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8009096:	892a      	ldrh	r2, [r5, #8]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8009098:	d141      	bne.n	800911e <tcp_input+0x16a>
  tcplen = p->tot_len;
 800909a:	4b7f      	ldr	r3, [pc, #508]	; (8009298 <tcp_input+0x2e4>)
 800909c:	801a      	strh	r2, [r3, #0]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800909e:	4f7f      	ldr	r7, [pc, #508]	; (800929c <tcp_input+0x2e8>)
  prev = NULL;
 80090a0:	f04f 0900 	mov.w	r9, #0
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80090a4:	683c      	ldr	r4, [r7, #0]
 80090a6:	2c00      	cmp	r4, #0
 80090a8:	d145      	bne.n	8009136 <tcp_input+0x182>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80090aa:	4b7d      	ldr	r3, [pc, #500]	; (80092a0 <tcp_input+0x2ec>)
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80090ac:	4c70      	ldr	r4, [pc, #448]	; (8009270 <tcp_input+0x2bc>)
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80090ae:	f8d3 9000 	ldr.w	r9, [r3]
 80090b2:	e17a      	b.n	80093aa <tcp_input+0x3f6>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80090b4:	682b      	ldr	r3, [r5, #0]
 80090b6:	b92b      	cbnz	r3, 80090c4 <tcp_input+0x110>
 80090b8:	4b6d      	ldr	r3, [pc, #436]	; (8009270 <tcp_input+0x2bc>)
 80090ba:	22c2      	movs	r2, #194	; 0xc2
 80090bc:	4979      	ldr	r1, [pc, #484]	; (80092a4 <tcp_input+0x2f0>)
 80090be:	486e      	ldr	r0, [pc, #440]	; (8009278 <tcp_input+0x2c4>)
 80090c0:	f003 f840 	bl	800c144 <iprintf>
    pbuf_remove_header(p, TCP_HLEN);
 80090c4:	2114      	movs	r1, #20
 80090c6:	4628      	mov	r0, r5
 80090c8:	f7fe f8f6 	bl	80072b8 <pbuf_remove_header>
    tcphdr_opt1len = p->len;
 80090cc:	8969      	ldrh	r1, [r5, #10]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80090ce:	8824      	ldrh	r4, [r4, #0]
    pbuf_remove_header(p, tcphdr_opt1len);
 80090d0:	4628      	mov	r0, r5
    tcphdr_opt1len = p->len;
 80090d2:	f8a9 1000 	strh.w	r1, [r9]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80090d6:	1a64      	subs	r4, r4, r1
    pbuf_remove_header(p, tcphdr_opt1len);
 80090d8:	f7fe f8ee 	bl	80072b8 <pbuf_remove_header>
    if (opt2len > p->next->len) {
 80090dc:	6828      	ldr	r0, [r5, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80090de:	b2a4      	uxth	r4, r4
    if (opt2len > p->next->len) {
 80090e0:	8943      	ldrh	r3, [r0, #10]
 80090e2:	42a3      	cmp	r3, r4
 80090e4:	d321      	bcc.n	800912a <tcp_input+0x176>
    tcphdr_opt2 = (u8_t *)p->next->payload;
 80090e6:	6843      	ldr	r3, [r0, #4]
    pbuf_remove_header(p->next, opt2len);
 80090e8:	4621      	mov	r1, r4
    tcphdr_opt2 = (u8_t *)p->next->payload;
 80090ea:	603b      	str	r3, [r7, #0]
    pbuf_remove_header(p->next, opt2len);
 80090ec:	f7fe f8e4 	bl	80072b8 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 80090f0:	892b      	ldrh	r3, [r5, #8]
 80090f2:	1b1c      	subs	r4, r3, r4
    LWIP_ASSERT("p->len == 0", p->len == 0);
 80090f4:	896b      	ldrh	r3, [r5, #10]
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 80090f6:	812c      	strh	r4, [r5, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 80090f8:	b12b      	cbz	r3, 8009106 <tcp_input+0x152>
 80090fa:	4b5d      	ldr	r3, [pc, #372]	; (8009270 <tcp_input+0x2bc>)
 80090fc:	22df      	movs	r2, #223	; 0xdf
 80090fe:	496a      	ldr	r1, [pc, #424]	; (80092a8 <tcp_input+0x2f4>)
 8009100:	485d      	ldr	r0, [pc, #372]	; (8009278 <tcp_input+0x2c4>)
 8009102:	f003 f81f 	bl	800c144 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8009106:	682b      	ldr	r3, [r5, #0]
 8009108:	892a      	ldrh	r2, [r5, #8]
 800910a:	891b      	ldrh	r3, [r3, #8]
 800910c:	429a      	cmp	r2, r3
 800910e:	d094      	beq.n	800903a <tcp_input+0x86>
 8009110:	4b57      	ldr	r3, [pc, #348]	; (8009270 <tcp_input+0x2bc>)
 8009112:	22e0      	movs	r2, #224	; 0xe0
 8009114:	4965      	ldr	r1, [pc, #404]	; (80092ac <tcp_input+0x2f8>)
 8009116:	4858      	ldr	r0, [pc, #352]	; (8009278 <tcp_input+0x2c4>)
 8009118:	f003 f814 	bl	800c144 <iprintf>
 800911c:	e78d      	b.n	800903a <tcp_input+0x86>
    tcplen++;
 800911e:	1c53      	adds	r3, r2, #1
 8009120:	495d      	ldr	r1, [pc, #372]	; (8009298 <tcp_input+0x2e4>)
 8009122:	b29b      	uxth	r3, r3
    if (tcplen < p->tot_len) {
 8009124:	429a      	cmp	r2, r3
    tcplen++;
 8009126:	800b      	strh	r3, [r1, #0]
    if (tcplen < p->tot_len) {
 8009128:	d9b9      	bls.n	800909e <tcp_input+0xea>
  pbuf_free(p);
 800912a:	4628      	mov	r0, r5
}
 800912c:	b009      	add	sp, #36	; 0x24
 800912e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 8009132:	f7fe b8f5 	b.w	8007320 <pbuf_free>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8009136:	7d23      	ldrb	r3, [r4, #20]
 8009138:	b92b      	cbnz	r3, 8009146 <tcp_input+0x192>
 800913a:	4b4d      	ldr	r3, [pc, #308]	; (8009270 <tcp_input+0x2bc>)
 800913c:	22fb      	movs	r2, #251	; 0xfb
 800913e:	495c      	ldr	r1, [pc, #368]	; (80092b0 <tcp_input+0x2fc>)
 8009140:	484d      	ldr	r0, [pc, #308]	; (8009278 <tcp_input+0x2c4>)
 8009142:	f002 ffff 	bl	800c144 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8009146:	7d23      	ldrb	r3, [r4, #20]
 8009148:	2b0a      	cmp	r3, #10
 800914a:	d105      	bne.n	8009158 <tcp_input+0x1a4>
 800914c:	4b48      	ldr	r3, [pc, #288]	; (8009270 <tcp_input+0x2bc>)
 800914e:	22fc      	movs	r2, #252	; 0xfc
 8009150:	4958      	ldr	r1, [pc, #352]	; (80092b4 <tcp_input+0x300>)
 8009152:	4849      	ldr	r0, [pc, #292]	; (8009278 <tcp_input+0x2c4>)
 8009154:	f002 fff6 	bl	800c144 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8009158:	7d23      	ldrb	r3, [r4, #20]
 800915a:	2b01      	cmp	r3, #1
 800915c:	d105      	bne.n	800916a <tcp_input+0x1b6>
 800915e:	4b44      	ldr	r3, [pc, #272]	; (8009270 <tcp_input+0x2bc>)
 8009160:	22fd      	movs	r2, #253	; 0xfd
 8009162:	4955      	ldr	r1, [pc, #340]	; (80092b8 <tcp_input+0x304>)
 8009164:	4844      	ldr	r0, [pc, #272]	; (8009278 <tcp_input+0x2c4>)
 8009166:	f002 ffed 	bl	800c144 <iprintf>
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800916a:	7a21      	ldrb	r1, [r4, #8]
 800916c:	68e2      	ldr	r2, [r4, #12]
 800916e:	b141      	cbz	r1, 8009182 <tcp_input+0x1ce>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8009170:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009174:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009178:	3301      	adds	r3, #1
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800917a:	b2db      	uxtb	r3, r3
 800917c:	4299      	cmp	r1, r3
 800917e:	f040 80ad 	bne.w	80092dc <tcp_input+0x328>
    if (pcb->remote_port == tcphdr->src &&
 8009182:	6833      	ldr	r3, [r6, #0]
 8009184:	8b20      	ldrh	r0, [r4, #24]
 8009186:	8819      	ldrh	r1, [r3, #0]
 8009188:	4288      	cmp	r0, r1
 800918a:	f040 80a7 	bne.w	80092dc <tcp_input+0x328>
 800918e:	8ae1      	ldrh	r1, [r4, #22]
 8009190:	885b      	ldrh	r3, [r3, #2]
 8009192:	4299      	cmp	r1, r3
 8009194:	f040 80a2 	bne.w	80092dc <tcp_input+0x328>
        pcb->local_port == tcphdr->dest &&
 8009198:	6861      	ldr	r1, [r4, #4]
 800919a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800919e:	4299      	cmp	r1, r3
 80091a0:	f040 809c 	bne.w	80092dc <tcp_input+0x328>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80091a4:	6821      	ldr	r1, [r4, #0]
 80091a6:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80091aa:	4299      	cmp	r1, r3
 80091ac:	f040 8096 	bne.w	80092dc <tcp_input+0x328>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80091b0:	4294      	cmp	r4, r2
 80091b2:	f040 8458 	bne.w	8009a66 <tcp_input+0xab2>
 80091b6:	4b2e      	ldr	r3, [pc, #184]	; (8009270 <tcp_input+0x2bc>)
 80091b8:	f240 120d 	movw	r2, #269	; 0x10d
 80091bc:	493f      	ldr	r1, [pc, #252]	; (80092bc <tcp_input+0x308>)
 80091be:	482e      	ldr	r0, [pc, #184]	; (8009278 <tcp_input+0x2c4>)
 80091c0:	f002 ffc0 	bl	800c144 <iprintf>
      if (prev != NULL) {
 80091c4:	f1b9 0f00 	cmp.w	r9, #0
 80091c8:	d005      	beq.n	80091d6 <tcp_input+0x222>
        prev->next = pcb->next;
 80091ca:	68e3      	ldr	r3, [r4, #12]
 80091cc:	f8c9 300c 	str.w	r3, [r9, #12]
        pcb->next = tcp_active_pcbs;
 80091d0:	683b      	ldr	r3, [r7, #0]
        tcp_active_pcbs = pcb;
 80091d2:	603c      	str	r4, [r7, #0]
        pcb->next = tcp_active_pcbs;
 80091d4:	60e3      	str	r3, [r4, #12]
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80091d6:	68e3      	ldr	r3, [r4, #12]
 80091d8:	429c      	cmp	r4, r3
 80091da:	d106      	bne.n	80091ea <tcp_input+0x236>
 80091dc:	4b24      	ldr	r3, [pc, #144]	; (8009270 <tcp_input+0x2bc>)
 80091de:	f240 1215 	movw	r2, #277	; 0x115
 80091e2:	4937      	ldr	r1, [pc, #220]	; (80092c0 <tcp_input+0x30c>)
 80091e4:	4824      	ldr	r0, [pc, #144]	; (8009278 <tcp_input+0x2c4>)
 80091e6:	f002 ffad 	bl	800c144 <iprintf>
    inseg.next = NULL;
 80091ea:	4b36      	ldr	r3, [pc, #216]	; (80092c4 <tcp_input+0x310>)
 80091ec:	2200      	movs	r2, #0
    inseg.len = p->tot_len;
 80091ee:	8929      	ldrh	r1, [r5, #8]
    recv_acked = 0;
 80091f0:	4835      	ldr	r0, [pc, #212]	; (80092c8 <tcp_input+0x314>)
    inseg.len = p->tot_len;
 80091f2:	8119      	strh	r1, [r3, #8]
    inseg.tcphdr = tcphdr;
 80091f4:	6831      	ldr	r1, [r6, #0]
    recv_flags = 0;
 80091f6:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 80092d8 <tcp_input+0x324>
    inseg.tcphdr = tcphdr;
 80091fa:	60d9      	str	r1, [r3, #12]
    recv_data = NULL;
 80091fc:	4933      	ldr	r1, [pc, #204]	; (80092cc <tcp_input+0x318>)
    inseg.next = NULL;
 80091fe:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8009200:	600a      	str	r2, [r1, #0]
 8009202:	4689      	mov	r9, r1
    recv_flags = 0;
 8009204:	f888 2000 	strb.w	r2, [r8]
    recv_acked = 0;
 8009208:	8002      	strh	r2, [r0, #0]
    if (flags & TCP_PSH) {
 800920a:	9a05      	ldr	r2, [sp, #20]
    inseg.p = p;
 800920c:	605d      	str	r5, [r3, #4]
    if (flags & TCP_PSH) {
 800920e:	7812      	ldrb	r2, [r2, #0]
 8009210:	9006      	str	r0, [sp, #24]
 8009212:	f012 0f08 	tst.w	r2, #8
 8009216:	9307      	str	r3, [sp, #28]
 8009218:	d003      	beq.n	8009222 <tcp_input+0x26e>
      p->flags |= PBUF_FLAG_PUSH;
 800921a:	7b6b      	ldrb	r3, [r5, #13]
 800921c:	f043 0301 	orr.w	r3, r3, #1
 8009220:	736b      	strb	r3, [r5, #13]
    if (pcb->refused_data != NULL) {
 8009222:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8009224:	4d2a      	ldr	r5, [pc, #168]	; (80092d0 <tcp_input+0x31c>)
 8009226:	2b00      	cmp	r3, #0
 8009228:	f000 8165 	beq.w	80094f6 <tcp_input+0x542>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800922c:	4620      	mov	r0, r4
 800922e:	f7ff f8e7 	bl	8008400 <tcp_process_refused_data>
 8009232:	300d      	adds	r0, #13
 8009234:	d008      	beq.n	8009248 <tcp_input+0x294>
 8009236:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8009238:	2b00      	cmp	r3, #0
 800923a:	f000 815c 	beq.w	80094f6 <tcp_input+0x542>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800923e:	4b16      	ldr	r3, [pc, #88]	; (8009298 <tcp_input+0x2e4>)
 8009240:	881b      	ldrh	r3, [r3, #0]
 8009242:	2b00      	cmp	r3, #0
 8009244:	f000 8157 	beq.w	80094f6 <tcp_input+0x542>
        if (pcb->rcv_ann_wnd == 0) {
 8009248:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800924a:	b913      	cbnz	r3, 8009252 <tcp_input+0x29e>
          tcp_send_empty_ack(pcb);
 800924c:	4620      	mov	r0, r4
 800924e:	f001 faf1 	bl	800a834 <tcp_send_empty_ack>
    if (inseg.p != NULL) {
 8009252:	9b07      	ldr	r3, [sp, #28]
    tcp_input_pcb = NULL;
 8009254:	2400      	movs	r4, #0
    if (inseg.p != NULL) {
 8009256:	6858      	ldr	r0, [r3, #4]
    tcp_input_pcb = NULL;
 8009258:	602c      	str	r4, [r5, #0]
    recv_data = NULL;
 800925a:	f8c9 4000 	str.w	r4, [r9]
    if (inseg.p != NULL) {
 800925e:	b118      	cbz	r0, 8009268 <tcp_input+0x2b4>
      pbuf_free(inseg.p);
 8009260:	f7fe f85e 	bl	8007320 <pbuf_free>
      inseg.p = NULL;
 8009264:	9b07      	ldr	r3, [sp, #28]
 8009266:	605c      	str	r4, [r3, #4]
}
 8009268:	b009      	add	sp, #36	; 0x24
 800926a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800926e:	bf00      	nop
 8009270:	0800f7c7 	.word	0x0800f7c7
 8009274:	0800f5d4 	.word	0x0800f5d4
 8009278:	0800d104 	.word	0x0800d104
 800927c:	20006ba8 	.word	0x20006ba8
 8009280:	20006e30 	.word	0x20006e30
 8009284:	20006bb0 	.word	0x20006bb0
 8009288:	20006bb4 	.word	0x20006bb4
 800928c:	20006ba0 	.word	0x20006ba0
 8009290:	20006b7c 	.word	0x20006b7c
 8009294:	20006b80 	.word	0x20006b80
 8009298:	20006bb6 	.word	0x20006bb6
 800929c:	2000d38c 	.word	0x2000d38c
 80092a0:	2000d39c 	.word	0x2000d39c
 80092a4:	0800f5ec 	.word	0x0800f5ec
 80092a8:	0800f5fc 	.word	0x0800f5fc
 80092ac:	0800f608 	.word	0x0800f608
 80092b0:	0800f627 	.word	0x0800f627
 80092b4:	0800f64e 	.word	0x0800f64e
 80092b8:	0800f678 	.word	0x0800f678
 80092bc:	0800f69f 	.word	0x0800f69f
 80092c0:	0800f6ca 	.word	0x0800f6ca
 80092c4:	20006b84 	.word	0x20006b84
 80092c8:	20006b94 	.word	0x20006b94
 80092cc:	20006b98 	.word	0x20006b98
 80092d0:	2000d3a0 	.word	0x2000d3a0
 80092d4:	20006bac 	.word	0x20006bac
 80092d8:	20006b9c 	.word	0x20006b9c
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80092dc:	46a1      	mov	r9, r4
 80092de:	4614      	mov	r4, r2
 80092e0:	e6e1      	b.n	80090a6 <tcp_input+0xf2>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80092e2:	f899 3014 	ldrb.w	r3, [r9, #20]
 80092e6:	2b0a      	cmp	r3, #10
 80092e8:	d006      	beq.n	80092f8 <tcp_input+0x344>
 80092ea:	4623      	mov	r3, r4
 80092ec:	f240 121f 	movw	r2, #287	; 0x11f
 80092f0:	49b0      	ldr	r1, [pc, #704]	; (80095b4 <tcp_input+0x600>)
 80092f2:	48b1      	ldr	r0, [pc, #708]	; (80095b8 <tcp_input+0x604>)
 80092f4:	f002 ff26 	bl	800c144 <iprintf>
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80092f8:	f899 2008 	ldrb.w	r2, [r9, #8]
 80092fc:	b13a      	cbz	r2, 800930e <tcp_input+0x35a>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80092fe:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009302:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009306:	3301      	adds	r3, #1
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009308:	b2db      	uxtb	r3, r3
 800930a:	429a      	cmp	r2, r3
 800930c:	d14b      	bne.n	80093a6 <tcp_input+0x3f2>
      if (pcb->remote_port == tcphdr->src &&
 800930e:	6833      	ldr	r3, [r6, #0]
 8009310:	f8b9 2018 	ldrh.w	r2, [r9, #24]
 8009314:	8818      	ldrh	r0, [r3, #0]
 8009316:	4290      	cmp	r0, r2
 8009318:	d145      	bne.n	80093a6 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800931a:	f8b9 2016 	ldrh.w	r2, [r9, #22]
      if (pcb->remote_port == tcphdr->src &&
 800931e:	8859      	ldrh	r1, [r3, #2]
 8009320:	4291      	cmp	r1, r2
 8009322:	d140      	bne.n	80093a6 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8009324:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8009328:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800932c:	429a      	cmp	r2, r3
 800932e:	d13a      	bne.n	80093a6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009330:	f8d9 2000 	ldr.w	r2, [r9]
 8009334:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8009338:	429a      	cmp	r2, r3
 800933a:	d134      	bne.n	80093a6 <tcp_input+0x3f2>
  if (flags & TCP_RST) {
 800933c:	9b05      	ldr	r3, [sp, #20]
 800933e:	781b      	ldrb	r3, [r3, #0]
 8009340:	075e      	lsls	r6, r3, #29
 8009342:	f53f aef2 	bmi.w	800912a <tcp_input+0x176>
  if (flags & TCP_SYN) {
 8009346:	079c      	lsls	r4, r3, #30
 8009348:	d518      	bpl.n	800937c <tcp_input+0x3c8>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800934a:	f8db 2000 	ldr.w	r2, [fp]
 800934e:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
 8009352:	1ad3      	subs	r3, r2, r3
 8009354:	d418      	bmi.n	8009388 <tcp_input+0x3d4>
 8009356:	f8b9 4028 	ldrh.w	r4, [r9, #40]	; 0x28
 800935a:	1b1b      	subs	r3, r3, r4
 800935c:	2b00      	cmp	r3, #0
 800935e:	dc13      	bgt.n	8009388 <tcp_input+0x3d4>
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009360:	4b96      	ldr	r3, [pc, #600]	; (80095bc <tcp_input+0x608>)
 8009362:	881c      	ldrh	r4, [r3, #0]
 8009364:	4b96      	ldr	r3, [pc, #600]	; (80095c0 <tcp_input+0x60c>)
 8009366:	9002      	str	r0, [sp, #8]
 8009368:	4422      	add	r2, r4
 800936a:	9300      	str	r3, [sp, #0]
 800936c:	4648      	mov	r0, r9
 800936e:	9101      	str	r1, [sp, #4]
 8009370:	3304      	adds	r3, #4
 8009372:	f8da 1000 	ldr.w	r1, [sl]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009376:	f001 fa19 	bl	800a7ac <tcp_rst>
 800937a:	e6d6      	b.n	800912a <tcp_input+0x176>
  } else if (flags & TCP_FIN) {
 800937c:	07d9      	lsls	r1, r3, #31
    pcb->tmr = tcp_ticks;
 800937e:	bf42      	ittt	mi
 8009380:	4b90      	ldrmi	r3, [pc, #576]	; (80095c4 <tcp_input+0x610>)
 8009382:	681b      	ldrmi	r3, [r3, #0]
 8009384:	f8c9 3020 	strmi.w	r3, [r9, #32]
  if ((tcplen > 0)) {
 8009388:	4b8c      	ldr	r3, [pc, #560]	; (80095bc <tcp_input+0x608>)
 800938a:	881b      	ldrh	r3, [r3, #0]
 800938c:	2b00      	cmp	r3, #0
 800938e:	f43f aecc 	beq.w	800912a <tcp_input+0x176>
    tcp_ack_now(pcb);
 8009392:	f8b9 301a 	ldrh.w	r3, [r9, #26]
    tcp_output(pcb);
 8009396:	4648      	mov	r0, r9
    tcp_ack_now(pcb);
 8009398:	f043 0302 	orr.w	r3, r3, #2
 800939c:	f8a9 301a 	strh.w	r3, [r9, #26]
    tcp_output(pcb);
 80093a0:	f001 fa7a 	bl	800a898 <tcp_output>
 80093a4:	e6c1      	b.n	800912a <tcp_input+0x176>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80093a6:	f8d9 900c 	ldr.w	r9, [r9, #12]
 80093aa:	f1b9 0f00 	cmp.w	r9, #0
 80093ae:	d198      	bne.n	80092e2 <tcp_input+0x32e>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80093b0:	4b85      	ldr	r3, [pc, #532]	; (80095c8 <tcp_input+0x614>)
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80093b2:	f8d8 e004 	ldr.w	lr, [r8, #4]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80093b6:	681a      	ldr	r2, [r3, #0]
      if (lpcb->local_port == tcphdr->dest) {
 80093b8:	6831      	ldr	r1, [r6, #0]
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80093ba:	f8d8 c014 	ldr.w	ip, [r8, #20]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80093be:	4614      	mov	r4, r2
 80093c0:	b99c      	cbnz	r4, 80093ea <tcp_input+0x436>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80093c2:	8988      	ldrh	r0, [r1, #12]
 80093c4:	f7fa ff6a 	bl	800429c <lwip_htons>
 80093c8:	0743      	lsls	r3, r0, #29
 80093ca:	f53f aeae 	bmi.w	800912a <tcp_input+0x176>
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80093ce:	6833      	ldr	r3, [r6, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80093d0:	4a7a      	ldr	r2, [pc, #488]	; (80095bc <tcp_input+0x608>)
 80093d2:	8818      	ldrh	r0, [r3, #0]
 80093d4:	8811      	ldrh	r1, [r2, #0]
 80093d6:	f8db 2000 	ldr.w	r2, [fp]
 80093da:	9002      	str	r0, [sp, #8]
 80093dc:	885b      	ldrh	r3, [r3, #2]
 80093de:	440a      	add	r2, r1
 80093e0:	9301      	str	r3, [sp, #4]
 80093e2:	4b77      	ldr	r3, [pc, #476]	; (80095c0 <tcp_input+0x60c>)
 80093e4:	9300      	str	r3, [sp, #0]
 80093e6:	3304      	adds	r3, #4
 80093e8:	e32e      	b.n	8009a48 <tcp_input+0xa94>
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80093ea:	7a20      	ldrb	r0, [r4, #8]
 80093ec:	b128      	cbz	r0, 80093fa <tcp_input+0x446>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80093ee:	f89e 3034 	ldrb.w	r3, [lr, #52]	; 0x34
 80093f2:	3301      	adds	r3, #1
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80093f4:	b2db      	uxtb	r3, r3
 80093f6:	4298      	cmp	r0, r3
 80093f8:	d10a      	bne.n	8009410 <tcp_input+0x45c>
      if (lpcb->local_port == tcphdr->dest) {
 80093fa:	8ae0      	ldrh	r0, [r4, #22]
 80093fc:	884b      	ldrh	r3, [r1, #2]
 80093fe:	4283      	cmp	r3, r0
 8009400:	d106      	bne.n	8009410 <tcp_input+0x45c>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8009402:	6823      	ldr	r3, [r4, #0]
 8009404:	4563      	cmp	r3, ip
 8009406:	f000 8302 	beq.w	8009a0e <tcp_input+0xa5a>
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800940a:	2b00      	cmp	r3, #0
 800940c:	f000 82ff 	beq.w	8009a0e <tcp_input+0xa5a>
 8009410:	46a1      	mov	r9, r4
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009412:	68e4      	ldr	r4, [r4, #12]
 8009414:	e7d4      	b.n	80093c0 <tcp_input+0x40c>
  } else if (flags & TCP_SYN) {
 8009416:	0798      	lsls	r0, r3, #30
 8009418:	f57f ae87 	bpl.w	800912a <tcp_input+0x176>
    npcb = tcp_alloc(pcb->prio);
 800941c:	7d60      	ldrb	r0, [r4, #21]
 800941e:	f7ff f96d 	bl	80086fc <tcp_alloc>
    if (npcb == NULL) {
 8009422:	4682      	mov	sl, r0
 8009424:	b948      	cbnz	r0, 800943a <tcp_input+0x486>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8009426:	69a3      	ldr	r3, [r4, #24]
 8009428:	2b00      	cmp	r3, #0
 800942a:	f43f ae7e 	beq.w	800912a <tcp_input+0x176>
 800942e:	4601      	mov	r1, r0
 8009430:	f04f 32ff 	mov.w	r2, #4294967295
 8009434:	6920      	ldr	r0, [r4, #16]
 8009436:	4798      	blx	r3
 8009438:	e677      	b.n	800912a <tcp_input+0x176>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800943a:	f8d8 3014 	ldr.w	r3, [r8, #20]
    npcb->remote_port = tcphdr->src;
 800943e:	6832      	ldr	r2, [r6, #0]
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8009440:	6003      	str	r3, [r0, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8009442:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8009446:	6043      	str	r3, [r0, #4]
    npcb->local_port = pcb->local_port;
 8009448:	8ae3      	ldrh	r3, [r4, #22]
 800944a:	82c3      	strh	r3, [r0, #22]
    npcb->remote_port = tcphdr->src;
 800944c:	7813      	ldrb	r3, [r2, #0]
 800944e:	7852      	ldrb	r2, [r2, #1]
 8009450:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009454:	8303      	strh	r3, [r0, #24]
    npcb->state = SYN_RCVD;
 8009456:	2303      	movs	r3, #3
 8009458:	7503      	strb	r3, [r0, #20]
    npcb->rcv_nxt = seqno + 1;
 800945a:	f8db 3000 	ldr.w	r3, [fp]
 800945e:	3301      	adds	r3, #1
 8009460:	6243      	str	r3, [r0, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8009462:	62c3      	str	r3, [r0, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8009464:	f7ff f9ea 	bl	800883c <tcp_next_iss>
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8009468:	f8db 3000 	ldr.w	r3, [fp]
    npcb->snd_wl2 = iss;
 800946c:	f8ca 0058 	str.w	r0, [sl, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8009470:	3b01      	subs	r3, #1
    npcb->snd_nxt = iss;
 8009472:	f8ca 0050 	str.w	r0, [sl, #80]	; 0x50
    npcb->lastack = iss;
 8009476:	f8ca 0044 	str.w	r0, [sl, #68]	; 0x44
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800947a:	f8ca 3054 	str.w	r3, [sl, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800947e:	6923      	ldr	r3, [r4, #16]
    npcb->snd_lbb = iss;
 8009480:	f8ca 005c 	str.w	r0, [sl, #92]	; 0x5c
    npcb->listener = pcb;
 8009484:	f8ca 4078 	str.w	r4, [sl, #120]	; 0x78
    npcb->callback_arg = pcb->callback_arg;
 8009488:	f8ca 3010 	str.w	r3, [sl, #16]
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800948c:	7a63      	ldrb	r3, [r4, #9]
 800948e:	f003 030c 	and.w	r3, r3, #12
 8009492:	f88a 3009 	strb.w	r3, [sl, #9]
    npcb->netif_idx = pcb->netif_idx;
 8009496:	7a23      	ldrb	r3, [r4, #8]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8009498:	f10a 0404 	add.w	r4, sl, #4
    npcb->netif_idx = pcb->netif_idx;
 800949c:	f88a 3008 	strb.w	r3, [sl, #8]
    TCP_REG_ACTIVE(npcb);
 80094a0:	683b      	ldr	r3, [r7, #0]
 80094a2:	f8c7 a000 	str.w	sl, [r7]
 80094a6:	f8ca 300c 	str.w	r3, [sl, #12]
 80094aa:	f001 fccb 	bl	800ae44 <tcp_timer_needed>
 80094ae:	2201      	movs	r2, #1
 80094b0:	4b46      	ldr	r3, [pc, #280]	; (80095cc <tcp_input+0x618>)
    tcp_parseopt(npcb);
 80094b2:	4650      	mov	r0, sl
    TCP_REG_ACTIVE(npcb);
 80094b4:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80094b6:	f7ff fa39 	bl	800892c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80094ba:	6833      	ldr	r3, [r6, #0]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80094bc:	4620      	mov	r0, r4
 80094be:	f8ba 6032 	ldrh.w	r6, [sl, #50]	; 0x32
    npcb->snd_wnd = tcphdr->wnd;
 80094c2:	89db      	ldrh	r3, [r3, #14]
 80094c4:	f8aa 3060 	strh.w	r3, [sl, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80094c8:	f8aa 3062 	strh.w	r3, [sl, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80094cc:	f7fc fcae 	bl	8005e2c <ip4_route>
 80094d0:	4622      	mov	r2, r4
 80094d2:	4601      	mov	r1, r0
 80094d4:	4630      	mov	r0, r6
 80094d6:	f7ff f9cb 	bl	8008870 <tcp_eff_send_mss_netif>
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80094da:	2112      	movs	r1, #18
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80094dc:	f8aa 0032 	strh.w	r0, [sl, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80094e0:	4650      	mov	r0, sl
 80094e2:	f000 ffdd 	bl	800a4a0 <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 80094e6:	b120      	cbz	r0, 80094f2 <tcp_input+0x53e>
      tcp_abandon(npcb, 0);
 80094e8:	4649      	mov	r1, r9
 80094ea:	4650      	mov	r0, sl
 80094ec:	f7ff f820 	bl	8008530 <tcp_abandon>
 80094f0:	e61b      	b.n	800912a <tcp_input+0x176>
    tcp_output(npcb);
 80094f2:	4650      	mov	r0, sl
 80094f4:	e754      	b.n	80093a0 <tcp_input+0x3ec>
  if (flags & TCP_RST) {
 80094f6:	9b05      	ldr	r3, [sp, #20]
    tcp_input_pcb = pcb;
 80094f8:	602c      	str	r4, [r5, #0]
  if (flags & TCP_RST) {
 80094fa:	781b      	ldrb	r3, [r3, #0]
 80094fc:	0759      	lsls	r1, r3, #29
 80094fe:	d533      	bpl.n	8009568 <tcp_input+0x5b4>
    if (pcb->state == SYN_SENT) {
 8009500:	7d21      	ldrb	r1, [r4, #20]
 8009502:	2902      	cmp	r1, #2
 8009504:	d122      	bne.n	800954c <tcp_input+0x598>
      if (ackno == pcb->snd_nxt) {
 8009506:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8009508:	f8da 3000 	ldr.w	r3, [sl]
 800950c:	429a      	cmp	r2, r3
 800950e:	d109      	bne.n	8009524 <tcp_input+0x570>
      recv_flags |= TF_RESET;
 8009510:	f898 3000 	ldrb.w	r3, [r8]
 8009514:	f043 0308 	orr.w	r3, r3, #8
 8009518:	f888 3000 	strb.w	r3, [r8]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800951c:	8b63      	ldrh	r3, [r4, #26]
 800951e:	f023 0301 	bic.w	r3, r3, #1
 8009522:	8363      	strh	r3, [r4, #26]
      if (recv_flags & TF_RESET) {
 8009524:	f898 3000 	ldrb.w	r3, [r8]
 8009528:	0719      	lsls	r1, r3, #28
 800952a:	f140 8206 	bpl.w	800993a <tcp_input+0x986>
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800952e:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8009532:	b11b      	cbz	r3, 800953c <tcp_input+0x588>
 8009534:	f06f 010d 	mvn.w	r1, #13
 8009538:	6920      	ldr	r0, [r4, #16]
 800953a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800953c:	4621      	mov	r1, r4
 800953e:	4824      	ldr	r0, [pc, #144]	; (80095d0 <tcp_input+0x61c>)
 8009540:	f7fe fe10 	bl	8008164 <tcp_pcb_remove>
        tcp_free(pcb);
 8009544:	4620      	mov	r0, r4
 8009546:	f7fe f9e1 	bl	800790c <tcp_free>
 800954a:	e682      	b.n	8009252 <tcp_input+0x29e>
      if (seqno == pcb->rcv_nxt) {
 800954c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800954e:	f8db 3000 	ldr.w	r3, [fp]
 8009552:	429a      	cmp	r2, r3
 8009554:	f000 827c 	beq.w	8009a50 <tcp_input+0xa9c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009558:	1a9b      	subs	r3, r3, r2
 800955a:	d4e3      	bmi.n	8009524 <tcp_input+0x570>
 800955c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800955e:	1a9b      	subs	r3, r3, r2
 8009560:	2b00      	cmp	r3, #0
 8009562:	dcdf      	bgt.n	8009524 <tcp_input+0x570>
        tcp_ack_now(pcb);
 8009564:	8b63      	ldrh	r3, [r4, #26]
 8009566:	e007      	b.n	8009578 <tcp_input+0x5c4>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8009568:	f013 0f02 	tst.w	r3, #2
 800956c:	8b63      	ldrh	r3, [r4, #26]
 800956e:	d006      	beq.n	800957e <tcp_input+0x5ca>
 8009570:	7d22      	ldrb	r2, [r4, #20]
 8009572:	3a02      	subs	r2, #2
 8009574:	2a01      	cmp	r2, #1
 8009576:	d902      	bls.n	800957e <tcp_input+0x5ca>
        tcp_ack_now(pcb);
 8009578:	f043 0302 	orr.w	r3, r3, #2
 800957c:	e7d1      	b.n	8009522 <tcp_input+0x56e>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800957e:	06da      	lsls	r2, r3, #27
  tcp_parseopt(pcb);
 8009580:	4620      	mov	r0, r4
    pcb->tmr = tcp_ticks;
 8009582:	bf5e      	ittt	pl
 8009584:	4b0f      	ldrpl	r3, [pc, #60]	; (80095c4 <tcp_input+0x610>)
 8009586:	681b      	ldrpl	r3, [r3, #0]
 8009588:	6223      	strpl	r3, [r4, #32]
  pcb->keep_cnt_sent = 0;
 800958a:	2300      	movs	r3, #0
 800958c:	f884 3097 	strb.w	r3, [r4, #151]	; 0x97
  pcb->persist_probe = 0;
 8009590:	f884 3096 	strb.w	r3, [r4, #150]	; 0x96
  tcp_parseopt(pcb);
 8009594:	f7ff f9ca 	bl	800892c <tcp_parseopt>
  switch (pcb->state) {
 8009598:	7d23      	ldrb	r3, [r4, #20]
 800959a:	3b02      	subs	r3, #2
 800959c:	2b07      	cmp	r3, #7
 800959e:	d8c1      	bhi.n	8009524 <tcp_input+0x570>
 80095a0:	e8df f013 	tbh	[pc, r3, lsl #1]
 80095a4:	00a90018 	.word	0x00a90018
 80095a8:	011d0119 	.word	0x011d0119
 80095ac:	01190167 	.word	0x01190167
 80095b0:	01b20180 	.word	0x01b20180
 80095b4:	0800f6f4 	.word	0x0800f6f4
 80095b8:	0800d104 	.word	0x0800d104
 80095bc:	20006bb6 	.word	0x20006bb6
 80095c0:	20006e40 	.word	0x20006e40
 80095c4:	2000d390 	.word	0x2000d390
 80095c8:	2000d394 	.word	0x2000d394
 80095cc:	2000d388 	.word	0x2000d388
 80095d0:	2000d38c 	.word	0x2000d38c
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80095d4:	9b05      	ldr	r3, [sp, #20]
 80095d6:	781b      	ldrb	r3, [r3, #0]
 80095d8:	f003 0212 	and.w	r2, r3, #18
 80095dc:	2a12      	cmp	r2, #18
 80095de:	d16a      	bne.n	80096b6 <tcp_input+0x702>
          && (ackno == pcb->lastack + 1)) {
 80095e0:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80095e2:	f8da 1000 	ldr.w	r1, [sl]
 80095e6:	3201      	adds	r2, #1
 80095e8:	428a      	cmp	r2, r1
 80095ea:	d164      	bne.n	80096b6 <tcp_input+0x702>
        pcb->rcv_nxt = seqno + 1;
 80095ec:	f8db 3000 	ldr.w	r3, [fp]
        pcb->lastack = ackno;
 80095f0:	6462      	str	r2, [r4, #68]	; 0x44
        pcb->rcv_nxt = seqno + 1;
 80095f2:	1c59      	adds	r1, r3, #1
        pcb->snd_wnd = tcphdr->wnd;
 80095f4:	6832      	ldr	r2, [r6, #0]
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80095f6:	3b01      	subs	r3, #1
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80095f8:	8e67      	ldrh	r7, [r4, #50]	; 0x32
        pcb->rcv_nxt = seqno + 1;
 80095fa:	6261      	str	r1, [r4, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80095fc:	62e1      	str	r1, [r4, #44]	; 0x2c
        pcb->snd_wnd = tcphdr->wnd;
 80095fe:	89d2      	ldrh	r2, [r2, #14]
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8009600:	6563      	str	r3, [r4, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8009602:	2304      	movs	r3, #4
        pcb->snd_wnd = tcphdr->wnd;
 8009604:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8009608:	18e6      	adds	r6, r4, r3
        pcb->state = ESTABLISHED;
 800960a:	7523      	strb	r3, [r4, #20]
        pcb->snd_wnd_max = pcb->snd_wnd;
 800960c:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8009610:	4630      	mov	r0, r6
 8009612:	f7fc fc0b 	bl	8005e2c <ip4_route>
 8009616:	4632      	mov	r2, r6
 8009618:	4601      	mov	r1, r0
 800961a:	4638      	mov	r0, r7
 800961c:	f7ff f928 	bl	8008870 <tcp_eff_send_mss_netif>
 8009620:	8660      	strh	r0, [r4, #50]	; 0x32
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8009622:	0042      	lsls	r2, r0, #1
 8009624:	0083      	lsls	r3, r0, #2
 8009626:	f241 101c 	movw	r0, #4380	; 0x111c
 800962a:	4611      	mov	r1, r2
 800962c:	4282      	cmp	r2, r0
 800962e:	bf38      	it	cc
 8009630:	4601      	movcc	r1, r0
 8009632:	428b      	cmp	r3, r1
 8009634:	d233      	bcs.n	800969e <tcp_input+0x6ea>
 8009636:	b298      	uxth	r0, r3
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8009638:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800963c:	f8a4 0048 	strh.w	r0, [r4, #72]	; 0x48
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8009640:	b933      	cbnz	r3, 8009650 <tcp_input+0x69c>
 8009642:	4ba8      	ldr	r3, [pc, #672]	; (80098e4 <tcp_input+0x930>)
 8009644:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8009648:	49a7      	ldr	r1, [pc, #668]	; (80098e8 <tcp_input+0x934>)
 800964a:	48a8      	ldr	r0, [pc, #672]	; (80098ec <tcp_input+0x938>)
 800964c:	f002 fd7a 	bl	800c144 <iprintf>
        --pcb->snd_queuelen;
 8009650:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
        rseg = pcb->unacked;
 8009654:	6f26      	ldr	r6, [r4, #112]	; 0x70
        --pcb->snd_queuelen;
 8009656:	3b01      	subs	r3, #1
 8009658:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
        if (rseg == NULL) {
 800965c:	bb1e      	cbnz	r6, 80096a6 <tcp_input+0x6f2>
          rseg = pcb->unsent;
 800965e:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8009660:	b936      	cbnz	r6, 8009670 <tcp_input+0x6bc>
 8009662:	4ba0      	ldr	r3, [pc, #640]	; (80098e4 <tcp_input+0x930>)
 8009664:	f44f 725d 	mov.w	r2, #884	; 0x374
 8009668:	49a1      	ldr	r1, [pc, #644]	; (80098f0 <tcp_input+0x93c>)
 800966a:	48a0      	ldr	r0, [pc, #640]	; (80098ec <tcp_input+0x938>)
 800966c:	f002 fd6a 	bl	800c144 <iprintf>
          pcb->unsent = rseg->next;
 8009670:	6833      	ldr	r3, [r6, #0]
 8009672:	66e3      	str	r3, [r4, #108]	; 0x6c
        tcp_seg_free(rseg);
 8009674:	4630      	mov	r0, r6
 8009676:	f7fe fa93 	bl	8007ba0 <tcp_seg_free>
        if (pcb->unacked == NULL) {
 800967a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800967c:	b9b3      	cbnz	r3, 80096ac <tcp_input+0x6f8>
          pcb->rtime = -1;
 800967e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009682:	8623      	strh	r3, [r4, #48]	; 0x30
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8009684:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8009688:	2b00      	cmp	r3, #0
 800968a:	f43f af6b 	beq.w	8009564 <tcp_input+0x5b0>
 800968e:	2200      	movs	r2, #0
 8009690:	4621      	mov	r1, r4
 8009692:	6920      	ldr	r0, [r4, #16]
 8009694:	4798      	blx	r3
        if (err == ERR_ABRT) {
 8009696:	300d      	adds	r0, #13
 8009698:	f47f af64 	bne.w	8009564 <tcp_input+0x5b0>
 800969c:	e5d9      	b.n	8009252 <tcp_input+0x29e>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800969e:	4282      	cmp	r2, r0
 80096a0:	bf88      	it	hi
 80096a2:	b290      	uxthhi	r0, r2
 80096a4:	e7c8      	b.n	8009638 <tcp_input+0x684>
          pcb->unacked = rseg->next;
 80096a6:	6833      	ldr	r3, [r6, #0]
 80096a8:	6723      	str	r3, [r4, #112]	; 0x70
 80096aa:	e7e3      	b.n	8009674 <tcp_input+0x6c0>
          pcb->rtime = 0;
 80096ac:	2300      	movs	r3, #0
 80096ae:	8623      	strh	r3, [r4, #48]	; 0x30
          pcb->nrtx = 0;
 80096b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80096b4:	e7e6      	b.n	8009684 <tcp_input+0x6d0>
      else if (flags & TCP_ACK) {
 80096b6:	06db      	lsls	r3, r3, #27
 80096b8:	f57f af34 	bpl.w	8009524 <tcp_input+0x570>
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80096bc:	6833      	ldr	r3, [r6, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80096be:	4a8d      	ldr	r2, [pc, #564]	; (80098f4 <tcp_input+0x940>)
 80096c0:	8818      	ldrh	r0, [r3, #0]
 80096c2:	8811      	ldrh	r1, [r2, #0]
 80096c4:	f8db 2000 	ldr.w	r2, [fp]
 80096c8:	9002      	str	r0, [sp, #8]
 80096ca:	4620      	mov	r0, r4
 80096cc:	885b      	ldrh	r3, [r3, #2]
 80096ce:	440a      	add	r2, r1
 80096d0:	9301      	str	r3, [sp, #4]
 80096d2:	4b89      	ldr	r3, [pc, #548]	; (80098f8 <tcp_input+0x944>)
 80096d4:	9300      	str	r3, [sp, #0]
 80096d6:	3304      	adds	r3, #4
 80096d8:	f8da 1000 	ldr.w	r1, [sl]
 80096dc:	f001 f866 	bl	800a7ac <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80096e0:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 80096e4:	2b05      	cmp	r3, #5
 80096e6:	f63f af1d 	bhi.w	8009524 <tcp_input+0x570>
          pcb->rtime = 0;
 80096ea:	2300      	movs	r3, #0
          tcp_rexmit_rto(pcb);
 80096ec:	4620      	mov	r0, r4
          pcb->rtime = 0;
 80096ee:	8623      	strh	r3, [r4, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 80096f0:	f001 fa98 	bl	800ac24 <tcp_rexmit_rto>
 80096f4:	e716      	b.n	8009524 <tcp_input+0x570>
      if (flags & TCP_ACK) {
 80096f6:	9b05      	ldr	r3, [sp, #20]
 80096f8:	781b      	ldrb	r3, [r3, #0]
 80096fa:	06df      	lsls	r7, r3, #27
 80096fc:	d55d      	bpl.n	80097ba <tcp_input+0x806>
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80096fe:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8009700:	f8da 1000 	ldr.w	r1, [sl]
 8009704:	43db      	mvns	r3, r3
 8009706:	42cb      	cmn	r3, r1
 8009708:	d446      	bmi.n	8009798 <tcp_input+0x7e4>
 800970a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800970c:	1acb      	subs	r3, r1, r3
 800970e:	2b00      	cmp	r3, #0
 8009710:	dc42      	bgt.n	8009798 <tcp_input+0x7e4>
          pcb->state = ESTABLISHED;
 8009712:	2304      	movs	r3, #4
 8009714:	7523      	strb	r3, [r4, #20]
          if (pcb->listener == NULL) {
 8009716:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8009718:	b19b      	cbz	r3, 8009742 <tcp_input+0x78e>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800971a:	699b      	ldr	r3, [r3, #24]
 800971c:	b933      	cbnz	r3, 800972c <tcp_input+0x778>
 800971e:	4b71      	ldr	r3, [pc, #452]	; (80098e4 <tcp_input+0x930>)
 8009720:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8009724:	4975      	ldr	r1, [pc, #468]	; (80098fc <tcp_input+0x948>)
 8009726:	4871      	ldr	r0, [pc, #452]	; (80098ec <tcp_input+0x938>)
 8009728:	f002 fd0c 	bl	800c144 <iprintf>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800972c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800972e:	699b      	ldr	r3, [r3, #24]
 8009730:	b13b      	cbz	r3, 8009742 <tcp_input+0x78e>
 8009732:	2200      	movs	r2, #0
 8009734:	4621      	mov	r1, r4
 8009736:	6920      	ldr	r0, [r4, #16]
 8009738:	4798      	blx	r3
          if (err != ERR_OK) {
 800973a:	b130      	cbz	r0, 800974a <tcp_input+0x796>
            if (err != ERR_ABRT) {
 800973c:	300d      	adds	r0, #13
 800973e:	f43f ad88 	beq.w	8009252 <tcp_input+0x29e>
              tcp_abort(pcb);
 8009742:	4620      	mov	r0, r4
 8009744:	f7fe ff72 	bl	800862c <tcp_abort>
 8009748:	e583      	b.n	8009252 <tcp_input+0x29e>
          tcp_receive(pcb);
 800974a:	4620      	mov	r0, r4
 800974c:	f7ff f9c0 	bl	8008ad0 <tcp_receive>
          if (recv_acked != 0) {
 8009750:	9b06      	ldr	r3, [sp, #24]
 8009752:	881b      	ldrh	r3, [r3, #0]
 8009754:	b113      	cbz	r3, 800975c <tcp_input+0x7a8>
            recv_acked--;
 8009756:	3b01      	subs	r3, #1
 8009758:	9a06      	ldr	r2, [sp, #24]
 800975a:	8013      	strh	r3, [r2, #0]
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800975c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800975e:	0059      	lsls	r1, r3, #1
 8009760:	009a      	lsls	r2, r3, #2
 8009762:	f241 131c 	movw	r3, #4380	; 0x111c
 8009766:	4608      	mov	r0, r1
 8009768:	4299      	cmp	r1, r3
 800976a:	bf38      	it	cc
 800976c:	4618      	movcc	r0, r3
 800976e:	4282      	cmp	r2, r0
 8009770:	d20e      	bcs.n	8009790 <tcp_input+0x7dc>
 8009772:	b293      	uxth	r3, r2
 8009774:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8009778:	f898 3000 	ldrb.w	r3, [r8]
 800977c:	0699      	lsls	r1, r3, #26
 800977e:	f57f aed1 	bpl.w	8009524 <tcp_input+0x570>
        tcp_ack_now(pcb);
 8009782:	8b63      	ldrh	r3, [r4, #26]
 8009784:	f043 0302 	orr.w	r3, r3, #2
 8009788:	8363      	strh	r3, [r4, #26]
        pcb->state = CLOSE_WAIT;
 800978a:	2307      	movs	r3, #7
          pcb->state = CLOSING;
 800978c:	7523      	strb	r3, [r4, #20]
 800978e:	e6c9      	b.n	8009524 <tcp_input+0x570>
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8009790:	4299      	cmp	r1, r3
 8009792:	bf88      	it	hi
 8009794:	b28b      	uxthhi	r3, r1
 8009796:	e7ed      	b.n	8009774 <tcp_input+0x7c0>
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009798:	6833      	ldr	r3, [r6, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800979a:	4a56      	ldr	r2, [pc, #344]	; (80098f4 <tcp_input+0x940>)
 800979c:	881e      	ldrh	r6, [r3, #0]
 800979e:	8810      	ldrh	r0, [r2, #0]
 80097a0:	f8db 2000 	ldr.w	r2, [fp]
 80097a4:	9602      	str	r6, [sp, #8]
 80097a6:	885b      	ldrh	r3, [r3, #2]
 80097a8:	4402      	add	r2, r0
 80097aa:	4620      	mov	r0, r4
 80097ac:	9301      	str	r3, [sp, #4]
 80097ae:	4b52      	ldr	r3, [pc, #328]	; (80098f8 <tcp_input+0x944>)
 80097b0:	9300      	str	r3, [sp, #0]
 80097b2:	3304      	adds	r3, #4
 80097b4:	f000 fffa 	bl	800a7ac <tcp_rst>
 80097b8:	e6b4      	b.n	8009524 <tcp_input+0x570>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80097ba:	0798      	lsls	r0, r3, #30
 80097bc:	f57f aeb2 	bpl.w	8009524 <tcp_input+0x570>
 80097c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80097c2:	f8db 2000 	ldr.w	r2, [fp]
 80097c6:	3b01      	subs	r3, #1
 80097c8:	4293      	cmp	r3, r2
 80097ca:	f47f aeab 	bne.w	8009524 <tcp_input+0x570>
        tcp_rexmit(pcb);
 80097ce:	4620      	mov	r0, r4
 80097d0:	f000 ff74 	bl	800a6bc <tcp_rexmit>
 80097d4:	e6a6      	b.n	8009524 <tcp_input+0x570>
      tcp_receive(pcb);
 80097d6:	4620      	mov	r0, r4
 80097d8:	f7ff f97a 	bl	8008ad0 <tcp_receive>
 80097dc:	e7cc      	b.n	8009778 <tcp_input+0x7c4>
      tcp_receive(pcb);
 80097de:	4620      	mov	r0, r4
 80097e0:	f7ff f976 	bl	8008ad0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80097e4:	f898 3000 	ldrb.w	r3, [r8]
 80097e8:	f013 0f20 	tst.w	r3, #32
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80097ec:	9b05      	ldr	r3, [sp, #20]
 80097ee:	781b      	ldrb	r3, [r3, #0]
      if (recv_flags & TF_GOT_FIN) {
 80097f0:	d030      	beq.n	8009854 <tcp_input+0x8a0>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80097f2:	f013 0f10 	tst.w	r3, #16
 80097f6:	8b63      	ldrh	r3, [r4, #26]
 80097f8:	d027      	beq.n	800984a <tcp_input+0x896>
 80097fa:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80097fc:	f8da 2000 	ldr.w	r2, [sl]
 8009800:	4291      	cmp	r1, r2
 8009802:	d122      	bne.n	800984a <tcp_input+0x896>
 8009804:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8009806:	bb02      	cbnz	r2, 800984a <tcp_input+0x896>
          tcp_ack_now(pcb);
 8009808:	f043 0302 	orr.w	r3, r3, #2
          tcp_pcb_purge(pcb);
 800980c:	4620      	mov	r0, r4
          tcp_ack_now(pcb);
 800980e:	8363      	strh	r3, [r4, #26]
          tcp_pcb_purge(pcb);
 8009810:	f7fe fa60 	bl	8007cd4 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8009814:	683b      	ldr	r3, [r7, #0]
 8009816:	429c      	cmp	r4, r3
 8009818:	d109      	bne.n	800982e <tcp_input+0x87a>
        TCP_RMV_ACTIVE(pcb);
 800981a:	68e3      	ldr	r3, [r4, #12]
 800981c:	603b      	str	r3, [r7, #0]
 800981e:	e008      	b.n	8009832 <tcp_input+0x87e>
          TCP_RMV_ACTIVE(pcb);
 8009820:	68da      	ldr	r2, [r3, #12]
 8009822:	4294      	cmp	r4, r2
 8009824:	d102      	bne.n	800982c <tcp_input+0x878>
        TCP_RMV_ACTIVE(pcb);
 8009826:	68e2      	ldr	r2, [r4, #12]
 8009828:	60da      	str	r2, [r3, #12]
 800982a:	e002      	b.n	8009832 <tcp_input+0x87e>
          TCP_RMV_ACTIVE(pcb);
 800982c:	4613      	mov	r3, r2
 800982e:	2b00      	cmp	r3, #0
 8009830:	d1f6      	bne.n	8009820 <tcp_input+0x86c>
        TCP_RMV_ACTIVE(pcb);
 8009832:	2201      	movs	r2, #1
 8009834:	4b32      	ldr	r3, [pc, #200]	; (8009900 <tcp_input+0x94c>)
 8009836:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8009838:	230a      	movs	r3, #10
 800983a:	7523      	strb	r3, [r4, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800983c:	4b31      	ldr	r3, [pc, #196]	; (8009904 <tcp_input+0x950>)
 800983e:	681a      	ldr	r2, [r3, #0]
 8009840:	601c      	str	r4, [r3, #0]
 8009842:	60e2      	str	r2, [r4, #12]
 8009844:	f001 fafe 	bl	800ae44 <tcp_timer_needed>
 8009848:	e66c      	b.n	8009524 <tcp_input+0x570>
          tcp_ack_now(pcb);
 800984a:	f043 0302 	orr.w	r3, r3, #2
 800984e:	8363      	strh	r3, [r4, #26]
          pcb->state = CLOSING;
 8009850:	2308      	movs	r3, #8
 8009852:	e79b      	b.n	800978c <tcp_input+0x7d8>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009854:	06da      	lsls	r2, r3, #27
 8009856:	f57f ae65 	bpl.w	8009524 <tcp_input+0x570>
 800985a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800985c:	f8da 3000 	ldr.w	r3, [sl]
 8009860:	429a      	cmp	r2, r3
 8009862:	f47f ae5f 	bne.w	8009524 <tcp_input+0x570>
 8009866:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8009868:	2b00      	cmp	r3, #0
 800986a:	f47f ae5b 	bne.w	8009524 <tcp_input+0x570>
        pcb->state = FIN_WAIT_2;
 800986e:	2306      	movs	r3, #6
 8009870:	e78c      	b.n	800978c <tcp_input+0x7d8>
      tcp_receive(pcb);
 8009872:	4620      	mov	r0, r4
 8009874:	f7ff f92c 	bl	8008ad0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8009878:	f898 3000 	ldrb.w	r3, [r8]
 800987c:	069b      	lsls	r3, r3, #26
 800987e:	f57f ae51 	bpl.w	8009524 <tcp_input+0x570>
        tcp_ack_now(pcb);
 8009882:	8b63      	ldrh	r3, [r4, #26]
        tcp_pcb_purge(pcb);
 8009884:	4620      	mov	r0, r4
        tcp_ack_now(pcb);
 8009886:	f043 0302 	orr.w	r3, r3, #2
 800988a:	8363      	strh	r3, [r4, #26]
        tcp_pcb_purge(pcb);
 800988c:	f7fe fa22 	bl	8007cd4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	429c      	cmp	r4, r3
 8009894:	d0c1      	beq.n	800981a <tcp_input+0x866>
 8009896:	2b00      	cmp	r3, #0
 8009898:	d0cb      	beq.n	8009832 <tcp_input+0x87e>
 800989a:	68da      	ldr	r2, [r3, #12]
 800989c:	4294      	cmp	r4, r2
 800989e:	d0c2      	beq.n	8009826 <tcp_input+0x872>
 80098a0:	4613      	mov	r3, r2
 80098a2:	e7f8      	b.n	8009896 <tcp_input+0x8e2>
      tcp_receive(pcb);
 80098a4:	4620      	mov	r0, r4
 80098a6:	f7ff f913 	bl	8008ad0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80098aa:	9b05      	ldr	r3, [sp, #20]
 80098ac:	781b      	ldrb	r3, [r3, #0]
 80098ae:	06de      	lsls	r6, r3, #27
 80098b0:	f57f ae38 	bpl.w	8009524 <tcp_input+0x570>
 80098b4:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80098b6:	f8da 3000 	ldr.w	r3, [sl]
 80098ba:	429a      	cmp	r2, r3
 80098bc:	f47f ae32 	bne.w	8009524 <tcp_input+0x570>
 80098c0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	f47f ae2e 	bne.w	8009524 <tcp_input+0x570>
        tcp_pcb_purge(pcb);
 80098c8:	4620      	mov	r0, r4
 80098ca:	f7fe fa03 	bl	8007cd4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	429c      	cmp	r4, r3
 80098d2:	d0a2      	beq.n	800981a <tcp_input+0x866>
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d0ac      	beq.n	8009832 <tcp_input+0x87e>
 80098d8:	68da      	ldr	r2, [r3, #12]
 80098da:	4294      	cmp	r4, r2
 80098dc:	d0a3      	beq.n	8009826 <tcp_input+0x872>
 80098de:	4613      	mov	r3, r2
 80098e0:	e7f8      	b.n	80098d4 <tcp_input+0x920>
 80098e2:	bf00      	nop
 80098e4:	0800f7c7 	.word	0x0800f7c7
 80098e8:	0800f741 	.word	0x0800f741
 80098ec:	0800d104 	.word	0x0800d104
 80098f0:	0800f757 	.word	0x0800f757
 80098f4:	20006bb6 	.word	0x20006bb6
 80098f8:	20006e40 	.word	0x20006e40
 80098fc:	0800f76a 	.word	0x0800f76a
 8009900:	2000d388 	.word	0x2000d388
 8009904:	2000d39c 	.word	0x2000d39c
      tcp_receive(pcb);
 8009908:	4620      	mov	r0, r4
 800990a:	f7ff f8e1 	bl	8008ad0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800990e:	9b05      	ldr	r3, [sp, #20]
 8009910:	781b      	ldrb	r3, [r3, #0]
 8009912:	06d8      	lsls	r0, r3, #27
 8009914:	f57f ae06 	bpl.w	8009524 <tcp_input+0x570>
 8009918:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800991a:	f8da 3000 	ldr.w	r3, [sl]
 800991e:	429a      	cmp	r2, r3
 8009920:	f47f ae00 	bne.w	8009524 <tcp_input+0x570>
 8009924:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8009926:	2b00      	cmp	r3, #0
 8009928:	f47f adfc 	bne.w	8009524 <tcp_input+0x570>
        recv_flags |= TF_CLOSED;
 800992c:	f898 3000 	ldrb.w	r3, [r8]
 8009930:	f043 0310 	orr.w	r3, r3, #16
 8009934:	f888 3000 	strb.w	r3, [r8]
 8009938:	e5f4      	b.n	8009524 <tcp_input+0x570>
        if (recv_acked > 0) {
 800993a:	9b06      	ldr	r3, [sp, #24]
 800993c:	881a      	ldrh	r2, [r3, #0]
 800993e:	b122      	cbz	r2, 800994a <tcp_input+0x996>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8009940:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8009942:	b9eb      	cbnz	r3, 8009980 <tcp_input+0x9cc>
          recv_acked = 0;
 8009944:	2300      	movs	r3, #0
 8009946:	9a06      	ldr	r2, [sp, #24]
 8009948:	8013      	strh	r3, [r2, #0]
        if (tcp_input_delayed_close(pcb)) {
 800994a:	4620      	mov	r0, r4
 800994c:	f7ff f83a 	bl	80089c4 <tcp_input_delayed_close>
 8009950:	2800      	cmp	r0, #0
 8009952:	f47f ac7e 	bne.w	8009252 <tcp_input+0x29e>
        if (recv_data != NULL) {
 8009956:	f8d9 3000 	ldr.w	r3, [r9]
 800995a:	b33b      	cbz	r3, 80099ac <tcp_input+0x9f8>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800995c:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800995e:	b133      	cbz	r3, 800996e <tcp_input+0x9ba>
 8009960:	4b44      	ldr	r3, [pc, #272]	; (8009a74 <tcp_input+0xac0>)
 8009962:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8009966:	4944      	ldr	r1, [pc, #272]	; (8009a78 <tcp_input+0xac4>)
 8009968:	4844      	ldr	r0, [pc, #272]	; (8009a7c <tcp_input+0xac8>)
 800996a:	f002 fbeb 	bl	800c144 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800996e:	8b63      	ldrh	r3, [r4, #26]
 8009970:	f013 0310 	ands.w	r3, r3, #16
 8009974:	d00a      	beq.n	800998c <tcp_input+0x9d8>
            pbuf_free(recv_data);
 8009976:	f8d9 0000 	ldr.w	r0, [r9]
 800997a:	f7fd fcd1 	bl	8007320 <pbuf_free>
 800997e:	e6e0      	b.n	8009742 <tcp_input+0x78e>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8009980:	4621      	mov	r1, r4
 8009982:	6920      	ldr	r0, [r4, #16]
 8009984:	4798      	blx	r3
            if (err == ERR_ABRT) {
 8009986:	300d      	adds	r0, #13
 8009988:	d1dc      	bne.n	8009944 <tcp_input+0x990>
 800998a:	e462      	b.n	8009252 <tcp_input+0x29e>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800998c:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
 8009990:	b316      	cbz	r6, 80099d8 <tcp_input+0xa24>
 8009992:	f8d9 2000 	ldr.w	r2, [r9]
 8009996:	4621      	mov	r1, r4
 8009998:	6920      	ldr	r0, [r4, #16]
 800999a:	47b0      	blx	r6
          if (err == ERR_ABRT) {
 800999c:	f110 0f0d 	cmn.w	r0, #13
 80099a0:	f43f ac57 	beq.w	8009252 <tcp_input+0x29e>
          if (err != ERR_OK) {
 80099a4:	b110      	cbz	r0, 80099ac <tcp_input+0x9f8>
            pcb->refused_data = recv_data;
 80099a6:	f8d9 3000 	ldr.w	r3, [r9]
 80099aa:	6763      	str	r3, [r4, #116]	; 0x74
        if (recv_flags & TF_GOT_FIN) {
 80099ac:	f898 3000 	ldrb.w	r3, [r8]
 80099b0:	069a      	lsls	r2, r3, #26
 80099b2:	d505      	bpl.n	80099c0 <tcp_input+0xa0c>
          if (pcb->refused_data != NULL) {
 80099b4:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80099b6:	b1bb      	cbz	r3, 80099e8 <tcp_input+0xa34>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80099b8:	7b5a      	ldrb	r2, [r3, #13]
 80099ba:	f042 0220 	orr.w	r2, r2, #32
 80099be:	735a      	strb	r2, [r3, #13]
        tcp_input_pcb = NULL;
 80099c0:	2300      	movs	r3, #0
        if (tcp_input_delayed_close(pcb)) {
 80099c2:	4620      	mov	r0, r4
        tcp_input_pcb = NULL;
 80099c4:	602b      	str	r3, [r5, #0]
        if (tcp_input_delayed_close(pcb)) {
 80099c6:	f7fe fffd 	bl	80089c4 <tcp_input_delayed_close>
 80099ca:	2800      	cmp	r0, #0
 80099cc:	f47f ac41 	bne.w	8009252 <tcp_input+0x29e>
        tcp_output(pcb);
 80099d0:	4620      	mov	r0, r4
 80099d2:	f000 ff61 	bl	800a898 <tcp_output>
 80099d6:	e43c      	b.n	8009252 <tcp_input+0x29e>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80099d8:	4633      	mov	r3, r6
 80099da:	f8d9 2000 	ldr.w	r2, [r9]
 80099de:	4621      	mov	r1, r4
 80099e0:	4630      	mov	r0, r6
 80099e2:	f7fe fce9 	bl	80083b8 <tcp_recv_null>
 80099e6:	e7d9      	b.n	800999c <tcp_input+0x9e8>
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80099e8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80099ea:	f640 3268 	movw	r2, #2920	; 0xb68
            TCP_EVENT_CLOSED(pcb, err);
 80099ee:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80099f2:	4293      	cmp	r3, r2
              pcb->rcv_wnd++;
 80099f4:	bf1c      	itt	ne
 80099f6:	3301      	addne	r3, #1
 80099f8:	8523      	strhne	r3, [r4, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 80099fa:	2e00      	cmp	r6, #0
 80099fc:	d0e0      	beq.n	80099c0 <tcp_input+0xa0c>
 80099fe:	2300      	movs	r3, #0
 8009a00:	4621      	mov	r1, r4
 8009a02:	6920      	ldr	r0, [r4, #16]
 8009a04:	461a      	mov	r2, r3
 8009a06:	47b0      	blx	r6
            if (err == ERR_ABRT) {
 8009a08:	300d      	adds	r0, #13
 8009a0a:	d1d9      	bne.n	80099c0 <tcp_input+0xa0c>
 8009a0c:	e421      	b.n	8009252 <tcp_input+0x29e>
      if (prev != NULL) {
 8009a0e:	f1b9 0f00 	cmp.w	r9, #0
 8009a12:	d005      	beq.n	8009a20 <tcp_input+0xa6c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8009a14:	68e3      	ldr	r3, [r4, #12]
 8009a16:	f8c9 300c 	str.w	r3, [r9, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8009a1a:	4b19      	ldr	r3, [pc, #100]	; (8009a80 <tcp_input+0xacc>)
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8009a1c:	60e2      	str	r2, [r4, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8009a1e:	601c      	str	r4, [r3, #0]
  if (flags & TCP_RST) {
 8009a20:	9b05      	ldr	r3, [sp, #20]
 8009a22:	781b      	ldrb	r3, [r3, #0]
 8009a24:	075a      	lsls	r2, r3, #29
 8009a26:	f53f ab80 	bmi.w	800912a <tcp_input+0x176>
  if (flags & TCP_ACK) {
 8009a2a:	f013 0910 	ands.w	r9, r3, #16
 8009a2e:	f43f acf2 	beq.w	8009416 <tcp_input+0x462>
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009a32:	4b14      	ldr	r3, [pc, #80]	; (8009a84 <tcp_input+0xad0>)
 8009a34:	f8db 2000 	ldr.w	r2, [fp]
 8009a38:	881e      	ldrh	r6, [r3, #0]
 8009a3a:	880b      	ldrh	r3, [r1, #0]
 8009a3c:	4432      	add	r2, r6
 8009a3e:	9001      	str	r0, [sp, #4]
 8009a40:	9302      	str	r3, [sp, #8]
 8009a42:	4b11      	ldr	r3, [pc, #68]	; (8009a88 <tcp_input+0xad4>)
 8009a44:	9300      	str	r3, [sp, #0]
 8009a46:	3304      	adds	r3, #4
 8009a48:	f8da 1000 	ldr.w	r1, [sl]
 8009a4c:	4620      	mov	r0, r4
 8009a4e:	e492      	b.n	8009376 <tcp_input+0x3c2>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8009a50:	2900      	cmp	r1, #0
 8009a52:	f47f ad5d 	bne.w	8009510 <tcp_input+0x55c>
 8009a56:	4b07      	ldr	r3, [pc, #28]	; (8009a74 <tcp_input+0xac0>)
 8009a58:	f44f 724e 	mov.w	r2, #824	; 0x338
 8009a5c:	490b      	ldr	r1, [pc, #44]	; (8009a8c <tcp_input+0xad8>)
 8009a5e:	4807      	ldr	r0, [pc, #28]	; (8009a7c <tcp_input+0xac8>)
 8009a60:	f002 fb70 	bl	800c144 <iprintf>
 8009a64:	e554      	b.n	8009510 <tcp_input+0x55c>
      if (prev != NULL) {
 8009a66:	f1b9 0f00 	cmp.w	r9, #0
 8009a6a:	f47f abae 	bne.w	80091ca <tcp_input+0x216>
 8009a6e:	f7ff bbbc 	b.w	80091ea <tcp_input+0x236>
 8009a72:	bf00      	nop
 8009a74:	0800f7c7 	.word	0x0800f7c7
 8009a78:	0800f788 	.word	0x0800f788
 8009a7c:	0800d104 	.word	0x0800d104
 8009a80:	2000d394 	.word	0x2000d394
 8009a84:	20006bb6 	.word	0x20006bb6
 8009a88:	20006e40 	.word	0x20006e40
 8009a8c:	0800f721 	.word	0x0800f721

08009a90 <tcp_trigger_input_pcb_close>:
}

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
 8009a90:	4a02      	ldr	r2, [pc, #8]	; (8009a9c <tcp_trigger_input_pcb_close+0xc>)
 8009a92:	7813      	ldrb	r3, [r2, #0]
 8009a94:	f043 0310 	orr.w	r3, r3, #16
 8009a98:	7013      	strb	r3, [r2, #0]
 8009a9a:	4770      	bx	lr
 8009a9c:	20006b9c 	.word	0x20006b9c

08009aa0 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8009aa0:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8009aa2:	4604      	mov	r4, r0
 8009aa4:	b930      	cbnz	r0, 8009ab4 <tcp_output_segment_busy+0x14>
 8009aa6:	4b07      	ldr	r3, [pc, #28]	; (8009ac4 <tcp_output_segment_busy+0x24>)
 8009aa8:	f240 529a 	movw	r2, #1434	; 0x59a
 8009aac:	4906      	ldr	r1, [pc, #24]	; (8009ac8 <tcp_output_segment_busy+0x28>)
 8009aae:	4807      	ldr	r0, [pc, #28]	; (8009acc <tcp_output_segment_busy+0x2c>)
 8009ab0:	f002 fb48 	bl	800c144 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8009ab4:	6863      	ldr	r3, [r4, #4]
 8009ab6:	7b98      	ldrb	r0, [r3, #14]
    /* other reference found */
    return 1;
  }
  /* no other references found */
  return 0;
}
 8009ab8:	f110 30ff 	adds.w	r0, r0, #4294967295
 8009abc:	bf18      	it	ne
 8009abe:	2001      	movne	r0, #1
 8009ac0:	bd10      	pop	{r4, pc}
 8009ac2:	bf00      	nop
 8009ac4:	0800fb5c 	.word	0x0800fb5c
 8009ac8:	0800fb8f 	.word	0x0800fb8f
 8009acc:	0800d104 	.word	0x0800d104

08009ad0 <tcp_pbuf_prealloc>:
{
 8009ad0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ad4:	9d08      	ldr	r5, [sp, #32]
 8009ad6:	4607      	mov	r7, r0
 8009ad8:	460c      	mov	r4, r1
 8009ada:	4690      	mov	r8, r2
 8009adc:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8009ae0:	461e      	mov	r6, r3
 8009ae2:	b92b      	cbnz	r3, 8009af0 <tcp_pbuf_prealloc+0x20>
 8009ae4:	4b1f      	ldr	r3, [pc, #124]	; (8009b64 <tcp_pbuf_prealloc+0x94>)
 8009ae6:	22e8      	movs	r2, #232	; 0xe8
 8009ae8:	491f      	ldr	r1, [pc, #124]	; (8009b68 <tcp_pbuf_prealloc+0x98>)
 8009aea:	4820      	ldr	r0, [pc, #128]	; (8009b6c <tcp_pbuf_prealloc+0x9c>)
 8009aec:	f002 fb2a 	bl	800c144 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8009af0:	b92d      	cbnz	r5, 8009afe <tcp_pbuf_prealloc+0x2e>
 8009af2:	4b1c      	ldr	r3, [pc, #112]	; (8009b64 <tcp_pbuf_prealloc+0x94>)
 8009af4:	22e9      	movs	r2, #233	; 0xe9
 8009af6:	491e      	ldr	r1, [pc, #120]	; (8009b70 <tcp_pbuf_prealloc+0xa0>)
 8009af8:	481c      	ldr	r0, [pc, #112]	; (8009b6c <tcp_pbuf_prealloc+0x9c>)
 8009afa:	f002 fb23 	bl	800c144 <iprintf>
  if (length < max_length) {
 8009afe:	4544      	cmp	r4, r8
 8009b00:	d22d      	bcs.n	8009b5e <tcp_pbuf_prealloc+0x8e>
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8009b02:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8009b06:	079a      	lsls	r2, r3, #30
 8009b08:	d409      	bmi.n	8009b1e <tcp_pbuf_prealloc+0x4e>
 8009b0a:	8b6b      	ldrh	r3, [r5, #26]
 8009b0c:	065b      	lsls	r3, r3, #25
 8009b0e:	d426      	bmi.n	8009b5e <tcp_pbuf_prealloc+0x8e>
        (!(pcb->flags & TF_NODELAY) &&
 8009b10:	f1b9 0f00 	cmp.w	r9, #0
 8009b14:	d003      	beq.n	8009b1e <tcp_pbuf_prealloc+0x4e>
         (!first_seg ||
 8009b16:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 8009b18:	b90b      	cbnz	r3, 8009b1e <tcp_pbuf_prealloc+0x4e>
          pcb->unsent != NULL ||
 8009b1a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8009b1c:	b1fb      	cbz	r3, 8009b5e <tcp_pbuf_prealloc+0x8e>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8009b1e:	f204 51b7 	addw	r1, r4, #1463	; 0x5b7
 8009b22:	f021 0103 	bic.w	r1, r1, #3
 8009b26:	4541      	cmp	r1, r8
 8009b28:	bf28      	it	cs
 8009b2a:	4641      	movcs	r1, r8
 8009b2c:	b289      	uxth	r1, r1
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8009b2e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8009b32:	4638      	mov	r0, r7
 8009b34:	f7fd fc5c 	bl	80073f0 <pbuf_alloc>
  if (p == NULL) {
 8009b38:	4605      	mov	r5, r0
 8009b3a:	b168      	cbz	r0, 8009b58 <tcp_pbuf_prealloc+0x88>
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8009b3c:	6803      	ldr	r3, [r0, #0]
 8009b3e:	b133      	cbz	r3, 8009b4e <tcp_pbuf_prealloc+0x7e>
 8009b40:	4b08      	ldr	r3, [pc, #32]	; (8009b64 <tcp_pbuf_prealloc+0x94>)
 8009b42:	f240 120b 	movw	r2, #267	; 0x10b
 8009b46:	490b      	ldr	r1, [pc, #44]	; (8009b74 <tcp_pbuf_prealloc+0xa4>)
 8009b48:	4808      	ldr	r0, [pc, #32]	; (8009b6c <tcp_pbuf_prealloc+0x9c>)
 8009b4a:	f002 fafb 	bl	800c144 <iprintf>
  *oversize = p->len - length;
 8009b4e:	896b      	ldrh	r3, [r5, #10]
 8009b50:	1b1b      	subs	r3, r3, r4
 8009b52:	8033      	strh	r3, [r6, #0]
  p->len = p->tot_len = length;
 8009b54:	812c      	strh	r4, [r5, #8]
 8009b56:	816c      	strh	r4, [r5, #10]
}
 8009b58:	4628      	mov	r0, r5
 8009b5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b5e:	4621      	mov	r1, r4
 8009b60:	e7e5      	b.n	8009b2e <tcp_pbuf_prealloc+0x5e>
 8009b62:	bf00      	nop
 8009b64:	0800fb5c 	.word	0x0800fb5c
 8009b68:	0800fbb4 	.word	0x0800fbb4
 8009b6c:	0800d104 	.word	0x0800d104
 8009b70:	0800fbd8 	.word	0x0800fbd8
 8009b74:	0800fbf7 	.word	0x0800fbf7

08009b78 <tcp_create_segment>:
{
 8009b78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b7c:	460e      	mov	r6, r1
 8009b7e:	4617      	mov	r7, r2
 8009b80:	4699      	mov	r9, r3
 8009b82:	f89d a020 	ldrb.w	sl, [sp, #32]
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8009b86:	4680      	mov	r8, r0
 8009b88:	b928      	cbnz	r0, 8009b96 <tcp_create_segment+0x1e>
 8009b8a:	4b33      	ldr	r3, [pc, #204]	; (8009c58 <tcp_create_segment+0xe0>)
 8009b8c:	22a3      	movs	r2, #163	; 0xa3
 8009b8e:	4933      	ldr	r1, [pc, #204]	; (8009c5c <tcp_create_segment+0xe4>)
 8009b90:	4833      	ldr	r0, [pc, #204]	; (8009c60 <tcp_create_segment+0xe8>)
 8009b92:	f002 fad7 	bl	800c144 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8009b96:	b92e      	cbnz	r6, 8009ba4 <tcp_create_segment+0x2c>
 8009b98:	4b2f      	ldr	r3, [pc, #188]	; (8009c58 <tcp_create_segment+0xe0>)
 8009b9a:	22a4      	movs	r2, #164	; 0xa4
 8009b9c:	4931      	ldr	r1, [pc, #196]	; (8009c64 <tcp_create_segment+0xec>)
 8009b9e:	4830      	ldr	r0, [pc, #192]	; (8009c60 <tcp_create_segment+0xe8>)
 8009ba0:	f002 fad0 	bl	800c144 <iprintf>
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8009ba4:	f01a 0f01 	tst.w	sl, #1
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8009ba8:	f04f 0003 	mov.w	r0, #3
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8009bac:	bf14      	ite	ne
 8009bae:	2504      	movne	r5, #4
 8009bb0:	2500      	moveq	r5, #0
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8009bb2:	f7fd f967 	bl	8006e84 <memp_malloc>
 8009bb6:	4604      	mov	r4, r0
 8009bb8:	b928      	cbnz	r0, 8009bc6 <tcp_create_segment+0x4e>
    pbuf_free(p);
 8009bba:	4630      	mov	r0, r6
 8009bbc:	f7fd fbb0 	bl	8007320 <pbuf_free>
}
 8009bc0:	4620      	mov	r0, r4
 8009bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  seg->next = NULL;
 8009bc6:	2300      	movs	r3, #0
  seg->flags = optflags;
 8009bc8:	f880 a00a 	strb.w	sl, [r0, #10]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8009bcc:	fa1f fa85 	uxth.w	sl, r5
  seg->p = p;
 8009bd0:	e880 0048 	stmia.w	r0, {r3, r6}
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8009bd4:	8933      	ldrh	r3, [r6, #8]
 8009bd6:	4553      	cmp	r3, sl
 8009bd8:	d205      	bcs.n	8009be6 <tcp_create_segment+0x6e>
 8009bda:	4b1f      	ldr	r3, [pc, #124]	; (8009c58 <tcp_create_segment+0xe0>)
 8009bdc:	22b0      	movs	r2, #176	; 0xb0
 8009bde:	4922      	ldr	r1, [pc, #136]	; (8009c68 <tcp_create_segment+0xf0>)
 8009be0:	481f      	ldr	r0, [pc, #124]	; (8009c60 <tcp_create_segment+0xe8>)
 8009be2:	f002 faaf 	bl	800c144 <iprintf>
  seg->len = p->tot_len - optlen;
 8009be6:	8933      	ldrh	r3, [r6, #8]
  if (pbuf_add_header(p, TCP_HLEN)) {
 8009be8:	4630      	mov	r0, r6
 8009bea:	2114      	movs	r1, #20
  seg->len = p->tot_len - optlen;
 8009bec:	eba3 030a 	sub.w	r3, r3, sl
 8009bf0:	8123      	strh	r3, [r4, #8]
  if (pbuf_add_header(p, TCP_HLEN)) {
 8009bf2:	f7fd fb5e 	bl	80072b2 <pbuf_add_header>
 8009bf6:	4606      	mov	r6, r0
 8009bf8:	b120      	cbz	r0, 8009c04 <tcp_create_segment+0x8c>
    tcp_seg_free(seg);
 8009bfa:	4620      	mov	r0, r4
    return NULL;
 8009bfc:	2400      	movs	r4, #0
    tcp_seg_free(seg);
 8009bfe:	f7fd ffcf 	bl	8007ba0 <tcp_seg_free>
    return NULL;
 8009c02:	e7dd      	b.n	8009bc0 <tcp_create_segment+0x48>
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8009c04:	6863      	ldr	r3, [r4, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8009c06:	08ad      	lsrs	r5, r5, #2
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8009c08:	f8b8 0016 	ldrh.w	r0, [r8, #22]
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8009c0c:	f8d3 a004 	ldr.w	sl, [r3, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8009c10:	3505      	adds	r5, #5
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8009c12:	f8c4 a00c 	str.w	sl, [r4, #12]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8009c16:	ea47 3505 	orr.w	r5, r7, r5, lsl #12
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8009c1a:	f7fa fb3f 	bl	800429c <lwip_htons>
 8009c1e:	f8aa 0000 	strh.w	r0, [sl]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8009c22:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 8009c26:	f8b8 0018 	ldrh.w	r0, [r8, #24]
 8009c2a:	f7fa fb37 	bl	800429c <lwip_htons>
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8009c2e:	f8d4 800c 	ldr.w	r8, [r4, #12]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8009c32:	f8aa 0002 	strh.w	r0, [sl, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8009c36:	4648      	mov	r0, r9
 8009c38:	f7fa fb33 	bl	80042a2 <lwip_htonl>
 8009c3c:	f8c8 0004 	str.w	r0, [r8, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8009c40:	b2a8      	uxth	r0, r5
 8009c42:	f8d4 800c 	ldr.w	r8, [r4, #12]
 8009c46:	f7fa fb29 	bl	800429c <lwip_htons>
  seg->tcphdr->urgp = 0;
 8009c4a:	68e3      	ldr	r3, [r4, #12]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8009c4c:	f8a8 000c 	strh.w	r0, [r8, #12]
  seg->tcphdr->urgp = 0;
 8009c50:	749e      	strb	r6, [r3, #18]
 8009c52:	74de      	strb	r6, [r3, #19]
  return seg;
 8009c54:	e7b4      	b.n	8009bc0 <tcp_create_segment+0x48>
 8009c56:	bf00      	nop
 8009c58:	0800fb5c 	.word	0x0800fb5c
 8009c5c:	0800f8ca 	.word	0x0800f8ca
 8009c60:	0800d104 	.word	0x0800d104
 8009c64:	0800f8ea 	.word	0x0800f8ea
 8009c68:	0800f90b 	.word	0x0800f90b

08009c6c <tcp_output_alloc_header_common.constprop.3>:
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8009c6c:	3114      	adds	r1, #20
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 8009c6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8009c72:	b289      	uxth	r1, r1
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 8009c74:	4606      	mov	r6, r0
 8009c76:	4617      	mov	r7, r2
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8009c78:	2022      	movs	r0, #34	; 0x22
 8009c7a:	f44f 7220 	mov.w	r2, #640	; 0x280
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 8009c7e:	4698      	mov	r8, r3
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8009c80:	f7fd fbb6 	bl	80073f0 <pbuf_alloc>
  if (p != NULL) {
 8009c84:	4605      	mov	r5, r0
 8009c86:	b348      	cbz	r0, 8009cdc <tcp_output_alloc_header_common.constprop.3+0x70>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8009c88:	8943      	ldrh	r3, [r0, #10]
 8009c8a:	2b13      	cmp	r3, #19
 8009c8c:	dc06      	bgt.n	8009c9c <tcp_output_alloc_header_common.constprop.3+0x30>
 8009c8e:	4b15      	ldr	r3, [pc, #84]	; (8009ce4 <tcp_output_alloc_header_common.constprop.3+0x78>)
 8009c90:	f240 7224 	movw	r2, #1828	; 0x724
 8009c94:	4914      	ldr	r1, [pc, #80]	; (8009ce8 <tcp_output_alloc_header_common.constprop.3+0x7c>)
 8009c96:	4815      	ldr	r0, [pc, #84]	; (8009cec <tcp_output_alloc_header_common.constprop.3+0x80>)
 8009c98:	f002 fa54 	bl	800c144 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8009c9c:	686c      	ldr	r4, [r5, #4]
    tcphdr->src = lwip_htons(src_port);
 8009c9e:	4640      	mov	r0, r8
 8009ca0:	f7fa fafc 	bl	800429c <lwip_htons>
 8009ca4:	8020      	strh	r0, [r4, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8009ca6:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 8009caa:	f7fa faf7 	bl	800429c <lwip_htons>
    tcphdr->seqno = seqno_be;
 8009cae:	6067      	str	r7, [r4, #4]
    tcphdr->dest = lwip_htons(dst_port);
 8009cb0:	8060      	strh	r0, [r4, #2]
    tcphdr->ackno = lwip_htonl(ackno);
 8009cb2:	4630      	mov	r0, r6
 8009cb4:	f7fa faf5 	bl	80042a2 <lwip_htonl>
 8009cb8:	60a0      	str	r0, [r4, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8009cba:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8009cbe:	f440 40a0 	orr.w	r0, r0, #20480	; 0x5000
 8009cc2:	f7fa faeb 	bl	800429c <lwip_htons>
 8009cc6:	81a0      	strh	r0, [r4, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8009cc8:	f8bd 0020 	ldrh.w	r0, [sp, #32]
 8009ccc:	f7fa fae6 	bl	800429c <lwip_htons>
    tcphdr->chksum = 0;
 8009cd0:	2300      	movs	r3, #0
    tcphdr->wnd = lwip_htons(wnd);
 8009cd2:	81e0      	strh	r0, [r4, #14]
    tcphdr->chksum = 0;
 8009cd4:	7423      	strb	r3, [r4, #16]
 8009cd6:	7463      	strb	r3, [r4, #17]
    tcphdr->urgp = 0;
 8009cd8:	74a3      	strb	r3, [r4, #18]
 8009cda:	74e3      	strb	r3, [r4, #19]
  }
  return p;
}
 8009cdc:	4628      	mov	r0, r5
 8009cde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ce2:	bf00      	nop
 8009ce4:	0800fb5c 	.word	0x0800fb5c
 8009ce8:	0800fadf 	.word	0x0800fadf
 8009cec:	0800d104 	.word	0x0800d104

08009cf0 <tcp_output_alloc_header.constprop.2>:
 * @param datalen length of tcp data to reserve in pbuf
 * @param seqno_be seqno in network byte order (big-endian)
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 8009cf0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8009cf2:	460d      	mov	r5, r1
 8009cf4:	4616      	mov	r6, r2
                        u32_t seqno_be /* already in network byte order */)
{
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8009cf6:	4604      	mov	r4, r0
 8009cf8:	b930      	cbnz	r0, 8009d08 <tcp_output_alloc_header.constprop.2+0x18>
 8009cfa:	4b0d      	ldr	r3, [pc, #52]	; (8009d30 <tcp_output_alloc_header.constprop.2+0x40>)
 8009cfc:	f240 7242 	movw	r2, #1858	; 0x742
 8009d00:	490c      	ldr	r1, [pc, #48]	; (8009d34 <tcp_output_alloc_header.constprop.2+0x44>)
 8009d02:	480d      	ldr	r0, [pc, #52]	; (8009d38 <tcp_output_alloc_header.constprop.2+0x48>)
 8009d04:	f002 fa1e 	bl	800c144 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8009d08:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8009d0a:	4629      	mov	r1, r5
 8009d0c:	8ae3      	ldrh	r3, [r4, #22]
 8009d0e:	9202      	str	r2, [sp, #8]
 8009d10:	2210      	movs	r2, #16
 8009d12:	9201      	str	r2, [sp, #4]
 8009d14:	8b22      	ldrh	r2, [r4, #24]
 8009d16:	9200      	str	r2, [sp, #0]
 8009d18:	4632      	mov	r2, r6
 8009d1a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009d1c:	f7ff ffa6 	bl	8009c6c <tcp_output_alloc_header_common.constprop.3>
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8009d20:	b118      	cbz	r0, 8009d2a <tcp_output_alloc_header.constprop.2+0x3a>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8009d22:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8009d24:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009d26:	4413      	add	r3, r2
 8009d28:	62e3      	str	r3, [r4, #44]	; 0x2c
  }
  return p;
}
 8009d2a:	b004      	add	sp, #16
 8009d2c:	bd70      	pop	{r4, r5, r6, pc}
 8009d2e:	bf00      	nop
 8009d30:	0800fb5c 	.word	0x0800fb5c
 8009d34:	0800faba 	.word	0x0800faba
 8009d38:	0800d104 	.word	0x0800d104

08009d3c <tcp_output_fill_options.isra.0.constprop.4>:
{
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8009d3c:	b930      	cbnz	r0, 8009d4c <tcp_output_fill_options.isra.0.constprop.4+0x10>
 8009d3e:	4b04      	ldr	r3, [pc, #16]	; (8009d50 <tcp_output_fill_options.isra.0.constprop.4+0x14>)
 8009d40:	f240 7256 	movw	r2, #1878	; 0x756
 8009d44:	4903      	ldr	r1, [pc, #12]	; (8009d54 <tcp_output_fill_options.isra.0.constprop.4+0x18>)
 8009d46:	4804      	ldr	r0, [pc, #16]	; (8009d58 <tcp_output_fill_options.isra.0.constprop.4+0x1c>)
 8009d48:	f002 b9fc 	b.w	800c144 <iprintf>
 8009d4c:	4770      	bx	lr
 8009d4e:	bf00      	nop
 8009d50:	0800fb5c 	.word	0x0800fb5c
 8009d54:	0800fb36 	.word	0x0800fb36
 8009d58:	0800d104 	.word	0x0800d104

08009d5c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8009d5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d5e:	4604      	mov	r4, r0
 8009d60:	b085      	sub	sp, #20
 8009d62:	4617      	mov	r7, r2
 8009d64:	461e      	mov	r6, r3
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8009d66:	460d      	mov	r5, r1
 8009d68:	b931      	cbnz	r1, 8009d78 <tcp_output_control_segment+0x1c>
 8009d6a:	4b15      	ldr	r3, [pc, #84]	; (8009dc0 <tcp_output_control_segment+0x64>)
 8009d6c:	f240 7287 	movw	r2, #1927	; 0x787
 8009d70:	4914      	ldr	r1, [pc, #80]	; (8009dc4 <tcp_output_control_segment+0x68>)
 8009d72:	4815      	ldr	r0, [pc, #84]	; (8009dc8 <tcp_output_control_segment+0x6c>)
 8009d74:	f002 f9e6 	bl	800c144 <iprintf>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8009d78:	b164      	cbz	r4, 8009d94 <tcp_output_control_segment+0x38>
 8009d7a:	7a20      	ldrb	r0, [r4, #8]
 8009d7c:	b150      	cbz	r0, 8009d94 <tcp_output_control_segment+0x38>
    return netif_get_by_index(pcb->netif_idx);
 8009d7e:	f7fd fa17 	bl	80071b0 <netif_get_by_index>

  netif = tcp_route(pcb, src, dst);
  if (netif == NULL) {
 8009d82:	b968      	cbnz	r0, 8009da0 <tcp_output_control_segment+0x44>
    err = ERR_RTE;
 8009d84:	f06f 0403 	mvn.w	r4, #3
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8009d88:	4628      	mov	r0, r5
 8009d8a:	f7fd fac9 	bl	8007320 <pbuf_free>
  return err;
}
 8009d8e:	4620      	mov	r0, r4
 8009d90:	b005      	add	sp, #20
 8009d92:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return ip_route(src, dst);
 8009d94:	4630      	mov	r0, r6
 8009d96:	f7fc f849 	bl	8005e2c <ip4_route>
  if (netif == NULL) {
 8009d9a:	2800      	cmp	r0, #0
 8009d9c:	d0f2      	beq.n	8009d84 <tcp_output_control_segment+0x28>
    if (pcb != NULL) {
 8009d9e:	b164      	cbz	r4, 8009dba <tcp_output_control_segment+0x5e>
      ttl = pcb->ttl;
 8009da0:	7ae3      	ldrb	r3, [r4, #11]
      tos = pcb->tos;
 8009da2:	7aa4      	ldrb	r4, [r4, #10]
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8009da4:	2206      	movs	r2, #6
 8009da6:	9002      	str	r0, [sp, #8]
 8009da8:	9400      	str	r4, [sp, #0]
 8009daa:	4639      	mov	r1, r7
 8009dac:	9201      	str	r2, [sp, #4]
 8009dae:	4628      	mov	r0, r5
 8009db0:	4632      	mov	r2, r6
 8009db2:	f7fc f9a9 	bl	8006108 <ip4_output_if>
 8009db6:	4604      	mov	r4, r0
 8009db8:	e7e6      	b.n	8009d88 <tcp_output_control_segment+0x2c>
      ttl = TCP_TTL;
 8009dba:	23ff      	movs	r3, #255	; 0xff
 8009dbc:	e7f2      	b.n	8009da4 <tcp_output_control_segment+0x48>
 8009dbe:	bf00      	nop
 8009dc0:	0800fb5c 	.word	0x0800fb5c
 8009dc4:	0800fb0d 	.word	0x0800fb0d
 8009dc8:	0800d104 	.word	0x0800d104

08009dcc <tcp_write>:
{
 8009dcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dd0:	b091      	sub	sp, #68	; 0x44
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8009dd2:	4605      	mov	r5, r0
{
 8009dd4:	930a      	str	r3, [sp, #40]	; 0x28
  u16_t oversize = 0;
 8009dd6:	2300      	movs	r3, #0
{
 8009dd8:	9108      	str	r1, [sp, #32]
 8009dda:	9205      	str	r2, [sp, #20]
  u16_t oversize = 0;
 8009ddc:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8009de0:	b958      	cbnz	r0, 8009dfa <tcp_write+0x2e>
 8009de2:	4bab      	ldr	r3, [pc, #684]	; (800a090 <tcp_write+0x2c4>)
 8009de4:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8009de8:	49aa      	ldr	r1, [pc, #680]	; (800a094 <tcp_write+0x2c8>)
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8009dea:	48ab      	ldr	r0, [pc, #684]	; (800a098 <tcp_write+0x2cc>)
 8009dec:	f002 f9aa 	bl	800c144 <iprintf>
 8009df0:	f06f 000f 	mvn.w	r0, #15
}
 8009df4:	b011      	add	sp, #68	; 0x44
 8009df6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8009dfa:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 8009dfe:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 8009e00:	085b      	lsrs	r3, r3, #1
 8009e02:	4293      	cmp	r3, r2
 8009e04:	bf28      	it	cs
 8009e06:	4613      	movcs	r3, r2
  mss_local = mss_local ? mss_local : pcb->mss;
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	bf08      	it	eq
 8009e0c:	4613      	moveq	r3, r2
 8009e0e:	9307      	str	r3, [sp, #28]
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8009e10:	9b08      	ldr	r3, [sp, #32]
 8009e12:	b923      	cbnz	r3, 8009e1e <tcp_write+0x52>
 8009e14:	4b9e      	ldr	r3, [pc, #632]	; (800a090 <tcp_write+0x2c4>)
 8009e16:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 8009e1a:	49a0      	ldr	r1, [pc, #640]	; (800a09c <tcp_write+0x2d0>)
 8009e1c:	e7e5      	b.n	8009dea <tcp_write+0x1e>
  if ((pcb->state != ESTABLISHED) &&
 8009e1e:	7d03      	ldrb	r3, [r0, #20]
 8009e20:	2b07      	cmp	r3, #7
 8009e22:	d003      	beq.n	8009e2c <tcp_write+0x60>
      (pcb->state != CLOSE_WAIT) &&
 8009e24:	3b02      	subs	r3, #2
 8009e26:	2b02      	cmp	r3, #2
 8009e28:	f200 8258 	bhi.w	800a2dc <tcp_write+0x510>
  } else if (len == 0) {
 8009e2c:	9b05      	ldr	r3, [sp, #20]
 8009e2e:	b1db      	cbz	r3, 8009e68 <tcp_write+0x9c>
  if (len > pcb->snd_buf) {
 8009e30:	f8b5 3064 	ldrh.w	r3, [r5, #100]	; 0x64
 8009e34:	9a05      	ldr	r2, [sp, #20]
 8009e36:	4293      	cmp	r3, r2
 8009e38:	d206      	bcs.n	8009e48 <tcp_write+0x7c>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8009e3a:	8b6b      	ldrh	r3, [r5, #26]
 8009e3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e40:	836b      	strh	r3, [r5, #26]
  return ERR_MEM;
 8009e42:	f04f 30ff 	mov.w	r0, #4294967295
 8009e46:	e7d5      	b.n	8009df4 <tcp_write+0x28>
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8009e48:	f8b5 2066 	ldrh.w	r2, [r5, #102]	; 0x66
 8009e4c:	2a07      	cmp	r2, #7
 8009e4e:	d8f4      	bhi.n	8009e3a <tcp_write+0x6e>
 8009e50:	6f2b      	ldr	r3, [r5, #112]	; 0x70
  if (pcb->snd_queuelen != 0) {
 8009e52:	b30a      	cbz	r2, 8009e98 <tcp_write+0xcc>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8009e54:	b943      	cbnz	r3, 8009e68 <tcp_write+0x9c>
 8009e56:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 8009e58:	b933      	cbnz	r3, 8009e68 <tcp_write+0x9c>
 8009e5a:	4b8d      	ldr	r3, [pc, #564]	; (800a090 <tcp_write+0x2c4>)
 8009e5c:	f44f 72ab 	mov.w	r2, #342	; 0x156
 8009e60:	498f      	ldr	r1, [pc, #572]	; (800a0a0 <tcp_write+0x2d4>)
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8009e62:	488d      	ldr	r0, [pc, #564]	; (800a098 <tcp_write+0x2cc>)
 8009e64:	f002 f96e 	bl	800c144 <iprintf>
  queuelen = pcb->snd_queuelen;
 8009e68:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
  if (pcb->unsent != NULL) {
 8009e6c:	6eec      	ldr	r4, [r5, #108]	; 0x6c
  queuelen = pcb->snd_queuelen;
 8009e6e:	9306      	str	r3, [sp, #24]
  if (pcb->unsent != NULL) {
 8009e70:	b9dc      	cbnz	r4, 8009eaa <tcp_write+0xde>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8009e72:	f8b5 8068 	ldrh.w	r8, [r5, #104]	; 0x68
 8009e76:	f1b8 0f00 	cmp.w	r8, #0
 8009e7a:	f000 8104 	beq.w	800a086 <tcp_write+0x2ba>
 8009e7e:	4b84      	ldr	r3, [pc, #528]	; (800a090 <tcp_write+0x2c4>)
 8009e80:	f240 224b 	movw	r2, #587	; 0x24b
 8009e84:	4987      	ldr	r1, [pc, #540]	; (800a0a4 <tcp_write+0x2d8>)
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8009e86:	4627      	mov	r7, r4
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8009e88:	4883      	ldr	r0, [pc, #524]	; (800a098 <tcp_write+0x2cc>)
  u16_t extendlen = 0;
 8009e8a:	46a2      	mov	sl, r4
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8009e8c:	f002 f95a 	bl	800c144 <iprintf>
  u16_t oversize_used = 0;
 8009e90:	4626      	mov	r6, r4
  u16_t pos = 0; /* position in 'arg' data */
 8009e92:	46a0      	mov	r8, r4
  struct pbuf *concat_p = NULL;
 8009e94:	46a1      	mov	r9, r4
 8009e96:	e094      	b.n	8009fc2 <tcp_write+0x1f6>
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8009e98:	b913      	cbnz	r3, 8009ea0 <tcp_write+0xd4>
 8009e9a:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d0e3      	beq.n	8009e68 <tcp_write+0x9c>
 8009ea0:	4b7b      	ldr	r3, [pc, #492]	; (800a090 <tcp_write+0x2c4>)
 8009ea2:	f240 1259 	movw	r2, #345	; 0x159
 8009ea6:	4980      	ldr	r1, [pc, #512]	; (800a0a8 <tcp_write+0x2dc>)
 8009ea8:	e7db      	b.n	8009e62 <tcp_write+0x96>
  if (pcb->unsent != NULL) {
 8009eaa:	4627      	mov	r7, r4
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8009eac:	f8d7 b000 	ldr.w	fp, [r7]
 8009eb0:	f1bb 0f00 	cmp.w	fp, #0
 8009eb4:	f040 80b6 	bne.w	800a024 <tcp_write+0x258>
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8009eb8:	7abb      	ldrb	r3, [r7, #10]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8009eba:	9a07      	ldr	r2, [sp, #28]
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8009ebc:	f013 0f01 	tst.w	r3, #1
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8009ec0:	893b      	ldrh	r3, [r7, #8]
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8009ec2:	bf14      	ite	ne
 8009ec4:	2404      	movne	r4, #4
 8009ec6:	2400      	moveq	r4, #0
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8009ec8:	4423      	add	r3, r4
 8009eca:	429a      	cmp	r2, r3
 8009ecc:	da06      	bge.n	8009edc <tcp_write+0x110>
 8009ece:	4b70      	ldr	r3, [pc, #448]	; (800a090 <tcp_write+0x2c4>)
 8009ed0:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8009ed4:	4975      	ldr	r1, [pc, #468]	; (800a0ac <tcp_write+0x2e0>)
 8009ed6:	4870      	ldr	r0, [pc, #448]	; (800a098 <tcp_write+0x2cc>)
 8009ed8:	f002 f934 	bl	800c144 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8009edc:	f8b7 9008 	ldrh.w	r9, [r7, #8]
 8009ee0:	9b07      	ldr	r3, [sp, #28]
    oversize = pcb->unsent_oversize;
 8009ee2:	f8b5 6068 	ldrh.w	r6, [r5, #104]	; 0x68
    space = mss_local - (last_unsent->len + unsent_optlen);
 8009ee6:	eba3 0909 	sub.w	r9, r3, r9
    oversize = pcb->unsent_oversize;
 8009eea:	f8ad 603e 	strh.w	r6, [sp, #62]	; 0x3e
    space = mss_local - (last_unsent->len + unsent_optlen);
 8009eee:	eba9 0904 	sub.w	r9, r9, r4
 8009ef2:	fa1f f989 	uxth.w	r9, r9
    if (oversize > 0) {
 8009ef6:	2e00      	cmp	r6, #0
 8009ef8:	f000 8096 	beq.w	800a028 <tcp_write+0x25c>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8009efc:	45b1      	cmp	r9, r6
 8009efe:	d206      	bcs.n	8009f0e <tcp_write+0x142>
 8009f00:	4b63      	ldr	r3, [pc, #396]	; (800a090 <tcp_write+0x2c4>)
 8009f02:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8009f06:	496a      	ldr	r1, [pc, #424]	; (800a0b0 <tcp_write+0x2e4>)
 8009f08:	4863      	ldr	r0, [pc, #396]	; (800a098 <tcp_write+0x2cc>)
 8009f0a:	f002 f91b 	bl	800c144 <iprintf>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8009f0e:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
      space -= oversize_used;
 8009f12:	463c      	mov	r4, r7
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8009f14:	9a05      	ldr	r2, [sp, #20]
 8009f16:	429a      	cmp	r2, r3
 8009f18:	bf28      	it	cs
 8009f1a:	461a      	movcs	r2, r3
 8009f1c:	454a      	cmp	r2, r9
 8009f1e:	4616      	mov	r6, r2
 8009f20:	bfa8      	it	ge
 8009f22:	464e      	movge	r6, r9
      space -= oversize_used;
 8009f24:	eba9 0906 	sub.w	r9, r9, r6
      oversize -= oversize_used;
 8009f28:	1b9b      	subs	r3, r3, r6
      space -= oversize_used;
 8009f2a:	fa1f f989 	uxth.w	r9, r9
      oversize -= oversize_used;
 8009f2e:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8009f32:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8009f36:	b153      	cbz	r3, 8009f4e <tcp_write+0x182>
 8009f38:	9b05      	ldr	r3, [sp, #20]
 8009f3a:	429e      	cmp	r6, r3
 8009f3c:	f000 81d1 	beq.w	800a2e2 <tcp_write+0x516>
 8009f40:	4b53      	ldr	r3, [pc, #332]	; (800a090 <tcp_write+0x2c4>)
 8009f42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009f46:	495b      	ldr	r1, [pc, #364]	; (800a0b4 <tcp_write+0x2e8>)
 8009f48:	4853      	ldr	r0, [pc, #332]	; (800a098 <tcp_write+0x2cc>)
 8009f4a:	f002 f8fb 	bl	800c144 <iprintf>
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8009f4e:	9b05      	ldr	r3, [sp, #20]
 8009f50:	429e      	cmp	r6, r3
 8009f52:	f080 81c6 	bcs.w	800a2e2 <tcp_write+0x516>
 8009f56:	f1b9 0f00 	cmp.w	r9, #0
 8009f5a:	f000 8090 	beq.w	800a07e <tcp_write+0x2b2>
 8009f5e:	f8b7 a008 	ldrh.w	sl, [r7, #8]
 8009f62:	f1ba 0f00 	cmp.w	sl, #0
 8009f66:	f000 808b 	beq.w	800a080 <tcp_write+0x2b4>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8009f6a:	1b9c      	subs	r4, r3, r6
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8009f6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
      u16_t seglen = LWIP_MIN(space, len - pos);
 8009f6e:	454c      	cmp	r4, r9
 8009f70:	bfa8      	it	ge
 8009f72:	464c      	movge	r4, r9
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8009f74:	07db      	lsls	r3, r3, #31
      u16_t seglen = LWIP_MIN(space, len - pos);
 8009f76:	fa1f f884 	uxth.w	r8, r4
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8009f7a:	d557      	bpl.n	800a02c <tcp_write+0x260>
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8009f7c:	2301      	movs	r3, #1
 8009f7e:	464a      	mov	r2, r9
 8009f80:	9500      	str	r5, [sp, #0]
 8009f82:	4641      	mov	r1, r8
 8009f84:	9302      	str	r3, [sp, #8]
 8009f86:	2000      	movs	r0, #0
 8009f88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f8a:	9301      	str	r3, [sp, #4]
 8009f8c:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 8009f90:	f7ff fd9e 	bl	8009ad0 <tcp_pbuf_prealloc>
 8009f94:	4681      	mov	r9, r0
 8009f96:	2800      	cmp	r0, #0
 8009f98:	f000 819d 	beq.w	800a2d6 <tcp_write+0x50a>
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8009f9c:	9b08      	ldr	r3, [sp, #32]
 8009f9e:	4642      	mov	r2, r8
 8009fa0:	6840      	ldr	r0, [r0, #4]
 8009fa2:	1999      	adds	r1, r3, r6
 8009fa4:	f002 f8bb 	bl	800c11e <memcpy>
        queuelen += pbuf_clen(concat_p);
 8009fa8:	4648      	mov	r0, r9
          queuelen += pbuf_clen(concat_p);
 8009faa:	f7fd fafb 	bl	80075a4 <pbuf_clen>
 8009fae:	9b06      	ldr	r3, [sp, #24]
  u16_t extendlen = 0;
 8009fb0:	f04f 0a00 	mov.w	sl, #0
          queuelen += pbuf_clen(concat_p);
 8009fb4:	4403      	add	r3, r0
 8009fb6:	b29b      	uxth	r3, r3
 8009fb8:	9306      	str	r3, [sp, #24]
      pos += seglen;
 8009fba:	44b0      	add	r8, r6
 8009fbc:	463c      	mov	r4, r7
 8009fbe:	fa1f f888 	uxth.w	r8, r8
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8009fc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009fc4:	f04f 0b00 	mov.w	fp, #0
 8009fc8:	f003 0301 	and.w	r3, r3, #1
 8009fcc:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8009fd0:	930c      	str	r3, [sp, #48]	; 0x30
  while (pos < len) {
 8009fd2:	9b05      	ldr	r3, [sp, #20]
 8009fd4:	4598      	cmp	r8, r3
 8009fd6:	d373      	bcc.n	800a0c0 <tcp_write+0x2f4>
  if (oversize_used > 0) {
 8009fd8:	b146      	cbz	r6, 8009fec <tcp_write+0x220>
    for (p = last_unsent->p; p; p = p->next) {
 8009fda:	f8d7 8004 	ldr.w	r8, [r7, #4]
 8009fde:	f1b8 0f00 	cmp.w	r8, #0
 8009fe2:	f040 8114 	bne.w	800a20e <tcp_write+0x442>
    last_unsent->len += oversize_used;
 8009fe6:	893b      	ldrh	r3, [r7, #8]
 8009fe8:	441e      	add	r6, r3
 8009fea:	813e      	strh	r6, [r7, #8]
  pcb->unsent_oversize = oversize;
 8009fec:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8009ff0:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
  if (concat_p != NULL) {
 8009ff4:	f1b9 0f00 	cmp.w	r9, #0
 8009ff8:	f000 8122 	beq.w	800a240 <tcp_write+0x474>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8009ffc:	b937      	cbnz	r7, 800a00c <tcp_write+0x240>
 8009ffe:	4b24      	ldr	r3, [pc, #144]	; (800a090 <tcp_write+0x2c4>)
 800a000:	f240 22e1 	movw	r2, #737	; 0x2e1
 800a004:	492c      	ldr	r1, [pc, #176]	; (800a0b8 <tcp_write+0x2ec>)
 800a006:	4824      	ldr	r0, [pc, #144]	; (800a098 <tcp_write+0x2cc>)
 800a008:	f002 f89c 	bl	800c144 <iprintf>
    pbuf_cat(last_unsent->p, concat_p);
 800a00c:	4649      	mov	r1, r9
 800a00e:	6878      	ldr	r0, [r7, #4]
 800a010:	f7fd faec 	bl	80075ec <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800a014:	893b      	ldrh	r3, [r7, #8]
 800a016:	f8b9 2008 	ldrh.w	r2, [r9, #8]
 800a01a:	4413      	add	r3, r2
 800a01c:	813b      	strh	r3, [r7, #8]
    last_unsent->next = queue;
 800a01e:	f8c7 b000 	str.w	fp, [r7]
 800a022:	e12f      	b.n	800a284 <tcp_write+0x4b8>
 800a024:	465f      	mov	r7, fp
 800a026:	e741      	b.n	8009eac <tcp_write+0xe0>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800a028:	4634      	mov	r4, r6
 800a02a:	e782      	b.n	8009f32 <tcp_write+0x166>
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	f8d3 9000 	ldr.w	r9, [r3]
 800a032:	f1b9 0f00 	cmp.w	r9, #0
 800a036:	d113      	bne.n	800a060 <tcp_write+0x294>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800a038:	7b1a      	ldrb	r2, [r3, #12]
 800a03a:	f012 0fc0 	tst.w	r2, #192	; 0xc0
 800a03e:	d111      	bne.n	800a064 <tcp_write+0x298>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800a040:	895a      	ldrh	r2, [r3, #10]
 800a042:	685b      	ldr	r3, [r3, #4]
 800a044:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800a046:	9a08      	ldr	r2, [sp, #32]
 800a048:	429a      	cmp	r2, r3
 800a04a:	d10b      	bne.n	800a064 <tcp_write+0x298>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800a04c:	b136      	cbz	r6, 800a05c <tcp_write+0x290>
 800a04e:	4b10      	ldr	r3, [pc, #64]	; (800a090 <tcp_write+0x2c4>)
 800a050:	f240 2231 	movw	r2, #561	; 0x231
 800a054:	4919      	ldr	r1, [pc, #100]	; (800a0bc <tcp_write+0x2f0>)
 800a056:	4810      	ldr	r0, [pc, #64]	; (800a098 <tcp_write+0x2cc>)
 800a058:	f002 f874 	bl	800c144 <iprintf>
          extendlen = seglen;
 800a05c:	46c2      	mov	sl, r8
 800a05e:	e7ac      	b.n	8009fba <tcp_write+0x1ee>
 800a060:	464b      	mov	r3, r9
 800a062:	e7e4      	b.n	800a02e <tcp_write+0x262>
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800a064:	2201      	movs	r2, #1
 800a066:	4641      	mov	r1, r8
 800a068:	2000      	movs	r0, #0
 800a06a:	f7fd f9c1 	bl	80073f0 <pbuf_alloc>
 800a06e:	4681      	mov	r9, r0
 800a070:	2800      	cmp	r0, #0
 800a072:	f000 8130 	beq.w	800a2d6 <tcp_write+0x50a>
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800a076:	9b08      	ldr	r3, [sp, #32]
 800a078:	4433      	add	r3, r6
 800a07a:	6043      	str	r3, [r0, #4]
 800a07c:	e795      	b.n	8009faa <tcp_write+0x1de>
  u16_t extendlen = 0;
 800a07e:	46ca      	mov	sl, r9
 800a080:	46b0      	mov	r8, r6
  struct pbuf *concat_p = NULL;
 800a082:	46d1      	mov	r9, sl
 800a084:	e79d      	b.n	8009fc2 <tcp_write+0x1f6>
  u16_t extendlen = 0;
 800a086:	46c2      	mov	sl, r8
  u16_t oversize_used = 0;
 800a088:	4646      	mov	r6, r8
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800a08a:	4647      	mov	r7, r8
  struct pbuf *concat_p = NULL;
 800a08c:	46c1      	mov	r9, r8
 800a08e:	e798      	b.n	8009fc2 <tcp_write+0x1f6>
 800a090:	0800fb5c 	.word	0x0800fb5c
 800a094:	0800fd71 	.word	0x0800fd71
 800a098:	0800d104 	.word	0x0800d104
 800a09c:	0800fd88 	.word	0x0800fd88
 800a0a0:	0800fdb9 	.word	0x0800fdb9
 800a0a4:	0800fea3 	.word	0x0800fea3
 800a0a8:	0800fdf3 	.word	0x0800fdf3
 800a0ac:	0800fe25 	.word	0x0800fe25
 800a0b0:	0800fe3c 	.word	0x0800fe3c
 800a0b4:	0800fe5c 	.word	0x0800fe5c
 800a0b8:	0800ff2f 	.word	0x0800ff2f
 800a0bc:	0800fe7a 	.word	0x0800fe7a
    u16_t left = len - pos;
 800a0c0:	9b05      	ldr	r3, [sp, #20]
    u16_t seglen = LWIP_MIN(left, max_len);
 800a0c2:	9a07      	ldr	r2, [sp, #28]
    u16_t left = len - pos;
 800a0c4:	eba3 0308 	sub.w	r3, r3, r8
    u16_t seglen = LWIP_MIN(left, max_len);
 800a0c8:	b29b      	uxth	r3, r3
 800a0ca:	4293      	cmp	r3, r2
 800a0cc:	bf28      	it	cs
 800a0ce:	4613      	movcs	r3, r2
 800a0d0:	b29b      	uxth	r3, r3
 800a0d2:	9309      	str	r3, [sp, #36]	; 0x24
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800a0d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a0d6:	b363      	cbz	r3, 800a132 <tcp_write+0x366>
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800a0d8:	fabb f38b 	clz	r3, fp
 800a0dc:	9500      	str	r5, [sp, #0]
 800a0de:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a0e0:	2036      	movs	r0, #54	; 0x36
 800a0e2:	095b      	lsrs	r3, r3, #5
 800a0e4:	9302      	str	r3, [sp, #8]
 800a0e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0e8:	9301      	str	r3, [sp, #4]
 800a0ea:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 800a0ee:	f7ff fcef 	bl	8009ad0 <tcp_pbuf_prealloc>
 800a0f2:	4604      	mov	r4, r0
 800a0f4:	2800      	cmp	r0, #0
 800a0f6:	d03c      	beq.n	800a172 <tcp_write+0x3a6>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800a0f8:	8943      	ldrh	r3, [r0, #10]
 800a0fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a0fc:	4293      	cmp	r3, r2
 800a0fe:	d206      	bcs.n	800a10e <tcp_write+0x342>
 800a100:	4b7b      	ldr	r3, [pc, #492]	; (800a2f0 <tcp_write+0x524>)
 800a102:	f240 2267 	movw	r2, #615	; 0x267
 800a106:	497b      	ldr	r1, [pc, #492]	; (800a2f4 <tcp_write+0x528>)
 800a108:	487b      	ldr	r0, [pc, #492]	; (800a2f8 <tcp_write+0x52c>)
 800a10a:	f002 f81b 	bl	800c144 <iprintf>
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800a10e:	9b08      	ldr	r3, [sp, #32]
 800a110:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a112:	eb03 0108 	add.w	r1, r3, r8
 800a116:	6860      	ldr	r0, [r4, #4]
 800a118:	f002 f801 	bl	800c11e <memcpy>
    queuelen += pbuf_clen(p);
 800a11c:	4620      	mov	r0, r4
 800a11e:	f7fd fa41 	bl	80075a4 <pbuf_clen>
 800a122:	9b06      	ldr	r3, [sp, #24]
 800a124:	4403      	add	r3, r0
 800a126:	b29b      	uxth	r3, r3
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800a128:	2b08      	cmp	r3, #8
    queuelen += pbuf_clen(p);
 800a12a:	9306      	str	r3, [sp, #24]
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800a12c:	d94a      	bls.n	800a1c4 <tcp_write+0x3f8>
      pbuf_free(p);
 800a12e:	4620      	mov	r0, r4
 800a130:	e01d      	b.n	800a16e <tcp_write+0x3a2>
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800a132:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800a136:	b133      	cbz	r3, 800a146 <tcp_write+0x37a>
 800a138:	4b6d      	ldr	r3, [pc, #436]	; (800a2f0 <tcp_write+0x524>)
 800a13a:	f240 2271 	movw	r2, #625	; 0x271
 800a13e:	496f      	ldr	r1, [pc, #444]	; (800a2fc <tcp_write+0x530>)
 800a140:	486d      	ldr	r0, [pc, #436]	; (800a2f8 <tcp_write+0x52c>)
 800a142:	f001 ffff 	bl	800c144 <iprintf>
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800a146:	2201      	movs	r2, #1
 800a148:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a14a:	2036      	movs	r0, #54	; 0x36
 800a14c:	f7fd f950 	bl	80073f0 <pbuf_alloc>
 800a150:	b178      	cbz	r0, 800a172 <tcp_write+0x3a6>
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800a152:	9a08      	ldr	r2, [sp, #32]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800a154:	2100      	movs	r1, #0
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800a156:	900d      	str	r0, [sp, #52]	; 0x34
 800a158:	4442      	add	r2, r8
 800a15a:	6042      	str	r2, [r0, #4]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800a15c:	f44f 7220 	mov.w	r2, #640	; 0x280
 800a160:	2036      	movs	r0, #54	; 0x36
 800a162:	f7fd f945 	bl	80073f0 <pbuf_alloc>
 800a166:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a168:	4604      	mov	r4, r0
 800a16a:	bb38      	cbnz	r0, 800a1bc <tcp_write+0x3f0>
        pbuf_free(p2);
 800a16c:	4618      	mov	r0, r3
      pbuf_free(p);
 800a16e:	f7fd f8d7 	bl	8007320 <pbuf_free>
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800a172:	8b6b      	ldrh	r3, [r5, #26]
 800a174:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a178:	836b      	strh	r3, [r5, #26]
  if (concat_p != NULL) {
 800a17a:	f1b9 0f00 	cmp.w	r9, #0
 800a17e:	d002      	beq.n	800a186 <tcp_write+0x3ba>
    pbuf_free(concat_p);
 800a180:	4648      	mov	r0, r9
 800a182:	f7fd f8cd 	bl	8007320 <pbuf_free>
  if (queue != NULL) {
 800a186:	f1bb 0f00 	cmp.w	fp, #0
 800a18a:	d002      	beq.n	800a192 <tcp_write+0x3c6>
    tcp_segs_free(queue);
 800a18c:	4658      	mov	r0, fp
 800a18e:	f7fd fd15 	bl	8007bbc <tcp_segs_free>
  if (pcb->snd_queuelen != 0) {
 800a192:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
 800a196:	2b00      	cmp	r3, #0
 800a198:	f43f ae53 	beq.w	8009e42 <tcp_write+0x76>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800a19c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	f47f ae4f 	bne.w	8009e42 <tcp_write+0x76>
 800a1a4:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	f47f ae4b 	bne.w	8009e42 <tcp_write+0x76>
 800a1ac:	4b50      	ldr	r3, [pc, #320]	; (800a2f0 <tcp_write+0x524>)
 800a1ae:	f44f 724a 	mov.w	r2, #808	; 0x328
 800a1b2:	4953      	ldr	r1, [pc, #332]	; (800a300 <tcp_write+0x534>)
 800a1b4:	4850      	ldr	r0, [pc, #320]	; (800a2f8 <tcp_write+0x52c>)
 800a1b6:	f001 ffc5 	bl	800c144 <iprintf>
 800a1ba:	e642      	b.n	8009e42 <tcp_write+0x76>
      pbuf_cat(p/*header*/, p2/*data*/);
 800a1bc:	4619      	mov	r1, r3
 800a1be:	f7fd fa15 	bl	80075ec <pbuf_cat>
 800a1c2:	e7ab      	b.n	800a11c <tcp_write+0x350>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800a1c4:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	4621      	mov	r1, r4
 800a1ca:	4628      	mov	r0, r5
 800a1cc:	9200      	str	r2, [sp, #0]
 800a1ce:	4443      	add	r3, r8
 800a1d0:	f7ff fcd2 	bl	8009b78 <tcp_create_segment>
 800a1d4:	4604      	mov	r4, r0
 800a1d6:	2800      	cmp	r0, #0
 800a1d8:	d0cb      	beq.n	800a172 <tcp_write+0x3a6>
    if (queue == NULL) {
 800a1da:	f1bb 0f00 	cmp.w	fp, #0
 800a1de:	d010      	beq.n	800a202 <tcp_write+0x436>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800a1e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a1e2:	b933      	cbnz	r3, 800a1f2 <tcp_write+0x426>
 800a1e4:	4b42      	ldr	r3, [pc, #264]	; (800a2f0 <tcp_write+0x524>)
 800a1e6:	f240 22ab 	movw	r2, #683	; 0x2ab
 800a1ea:	4946      	ldr	r1, [pc, #280]	; (800a304 <tcp_write+0x538>)
 800a1ec:	4842      	ldr	r0, [pc, #264]	; (800a2f8 <tcp_write+0x52c>)
 800a1ee:	f001 ffa9 	bl	800c144 <iprintf>
      prev_seg->next = seg;
 800a1f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a1f4:	601c      	str	r4, [r3, #0]
    pos += seglen;
 800a1f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1f8:	940b      	str	r4, [sp, #44]	; 0x2c
 800a1fa:	4498      	add	r8, r3
 800a1fc:	fa1f f888 	uxth.w	r8, r8
 800a200:	e6e7      	b.n	8009fd2 <tcp_write+0x206>
 800a202:	4683      	mov	fp, r0
 800a204:	e7f7      	b.n	800a1f6 <tcp_write+0x42a>
  if (oversize_used > 0) {
 800a206:	f04f 0a00 	mov.w	sl, #0
 800a20a:	46d1      	mov	r9, sl
 800a20c:	e6e5      	b.n	8009fda <tcp_write+0x20e>
      p->tot_len += oversize_used;
 800a20e:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 800a212:	4433      	add	r3, r6
 800a214:	f8a8 3008 	strh.w	r3, [r8, #8]
      if (p->next == NULL) {
 800a218:	f8d8 3000 	ldr.w	r3, [r8]
 800a21c:	b96b      	cbnz	r3, 800a23a <tcp_write+0x46e>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800a21e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a222:	4632      	mov	r2, r6
 800a224:	f8b8 000a 	ldrh.w	r0, [r8, #10]
 800a228:	9908      	ldr	r1, [sp, #32]
 800a22a:	4418      	add	r0, r3
 800a22c:	f001 ff77 	bl	800c11e <memcpy>
        p->len += oversize_used;
 800a230:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 800a234:	4433      	add	r3, r6
 800a236:	f8a8 300a 	strh.w	r3, [r8, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800a23a:	f8d8 8000 	ldr.w	r8, [r8]
 800a23e:	e6ce      	b.n	8009fde <tcp_write+0x212>
  } else if (extendlen > 0) {
 800a240:	f1ba 0f00 	cmp.w	sl, #0
 800a244:	d019      	beq.n	800a27a <tcp_write+0x4ae>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800a246:	b10f      	cbz	r7, 800a24c <tcp_write+0x480>
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	b933      	cbnz	r3, 800a25a <tcp_write+0x48e>
 800a24c:	4b28      	ldr	r3, [pc, #160]	; (800a2f0 <tcp_write+0x524>)
 800a24e:	f240 22e7 	movw	r2, #743	; 0x2e7
 800a252:	492d      	ldr	r1, [pc, #180]	; (800a308 <tcp_write+0x53c>)
 800a254:	4828      	ldr	r0, [pc, #160]	; (800a2f8 <tcp_write+0x52c>)
 800a256:	f001 ff75 	bl	800c144 <iprintf>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	891a      	ldrh	r2, [r3, #8]
 800a25e:	6819      	ldr	r1, [r3, #0]
      p->tot_len += extendlen;
 800a260:	4452      	add	r2, sl
 800a262:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800a264:	b939      	cbnz	r1, 800a276 <tcp_write+0x4aa>
    p->len += extendlen;
 800a266:	895a      	ldrh	r2, [r3, #10]
 800a268:	4452      	add	r2, sl
 800a26a:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800a26c:	893b      	ldrh	r3, [r7, #8]
 800a26e:	449a      	add	sl, r3
 800a270:	f8a7 a008 	strh.w	sl, [r7, #8]
 800a274:	e6d3      	b.n	800a01e <tcp_write+0x252>
      p->tot_len += extendlen;
 800a276:	460b      	mov	r3, r1
 800a278:	e7f0      	b.n	800a25c <tcp_write+0x490>
  if (last_unsent == NULL) {
 800a27a:	2f00      	cmp	r7, #0
 800a27c:	f47f aecf 	bne.w	800a01e <tcp_write+0x252>
    pcb->unsent = queue;
 800a280:	f8c5 b06c 	str.w	fp, [r5, #108]	; 0x6c
  pcb->snd_lbb += len;
 800a284:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 800a286:	9a05      	ldr	r2, [sp, #20]
 800a288:	4413      	add	r3, r2
 800a28a:	65eb      	str	r3, [r5, #92]	; 0x5c
  pcb->snd_buf -= len;
 800a28c:	f8b5 3064 	ldrh.w	r3, [r5, #100]	; 0x64
 800a290:	1a9b      	subs	r3, r3, r2
 800a292:	f8a5 3064 	strh.w	r3, [r5, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 800a296:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 800a29a:	f8a5 3066 	strh.w	r3, [r5, #102]	; 0x66
  if (pcb->snd_queuelen != 0) {
 800a29e:	9b06      	ldr	r3, [sp, #24]
 800a2a0:	b153      	cbz	r3, 800a2b8 <tcp_write+0x4ec>
    LWIP_ASSERT("tcp_write: valid queue length",
 800a2a2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800a2a4:	b943      	cbnz	r3, 800a2b8 <tcp_write+0x4ec>
 800a2a6:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800a2a8:	b933      	cbnz	r3, 800a2b8 <tcp_write+0x4ec>
 800a2aa:	4b11      	ldr	r3, [pc, #68]	; (800a2f0 <tcp_write+0x524>)
 800a2ac:	f240 3213 	movw	r2, #787	; 0x313
 800a2b0:	4913      	ldr	r1, [pc, #76]	; (800a300 <tcp_write+0x534>)
 800a2b2:	4811      	ldr	r0, [pc, #68]	; (800a2f8 <tcp_write+0x52c>)
 800a2b4:	f001 ff46 	bl	800c144 <iprintf>
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800a2b8:	b15c      	cbz	r4, 800a2d2 <tcp_write+0x506>
 800a2ba:	68e4      	ldr	r4, [r4, #12]
 800a2bc:	b14c      	cbz	r4, 800a2d2 <tcp_write+0x506>
 800a2be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2c0:	f013 0602 	ands.w	r6, r3, #2
 800a2c4:	d105      	bne.n	800a2d2 <tcp_write+0x506>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800a2c6:	89a5      	ldrh	r5, [r4, #12]
 800a2c8:	2008      	movs	r0, #8
 800a2ca:	f7f9 ffe7 	bl	800429c <lwip_htons>
 800a2ce:	4328      	orrs	r0, r5
 800a2d0:	81a0      	strh	r0, [r4, #12]
  return ERR_OK;
 800a2d2:	2000      	movs	r0, #0
 800a2d4:	e58e      	b.n	8009df4 <tcp_write+0x28>
      p->tot_len += extendlen;
 800a2d6:	f04f 0900 	mov.w	r9, #0
 800a2da:	e74a      	b.n	800a172 <tcp_write+0x3a6>
    return ERR_CONN;
 800a2dc:	f06f 000a 	mvn.w	r0, #10
 800a2e0:	e588      	b.n	8009df4 <tcp_write+0x28>
  if (oversize_used > 0) {
 800a2e2:	2e00      	cmp	r6, #0
 800a2e4:	d18f      	bne.n	800a206 <tcp_write+0x43a>
  pcb->unsent_oversize = oversize;
 800a2e6:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800a2ea:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
 800a2ee:	e696      	b.n	800a01e <tcp_write+0x252>
 800a2f0:	0800fb5c 	.word	0x0800fb5c
 800a2f4:	0800fed2 	.word	0x0800fed2
 800a2f8:	0800d104 	.word	0x0800d104
 800a2fc:	0800ff10 	.word	0x0800ff10
 800a300:	0800ff9c 	.word	0x0800ff9c
 800a304:	0800ff1e 	.word	0x0800ff1e
 800a308:	0800ff67 	.word	0x0800ff67

0800a30c <tcp_split_unsent_seg>:
{
 800a30c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a310:	4689      	mov	r9, r1
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800a312:	4605      	mov	r5, r0
 800a314:	b930      	cbnz	r0, 800a324 <tcp_split_unsent_seg+0x18>
 800a316:	4b5c      	ldr	r3, [pc, #368]	; (800a488 <tcp_split_unsent_seg+0x17c>)
 800a318:	f240 324b 	movw	r2, #843	; 0x34b
 800a31c:	495b      	ldr	r1, [pc, #364]	; (800a48c <tcp_split_unsent_seg+0x180>)
 800a31e:	485c      	ldr	r0, [pc, #368]	; (800a490 <tcp_split_unsent_seg+0x184>)
 800a320:	f001 ff10 	bl	800c144 <iprintf>
  useg = pcb->unsent;
 800a324:	6eec      	ldr	r4, [r5, #108]	; 0x6c
  if (useg == NULL) {
 800a326:	b914      	cbnz	r4, 800a32e <tcp_split_unsent_seg+0x22>
  return ERR_MEM;
 800a328:	f04f 30ff 	mov.w	r0, #4294967295
 800a32c:	e00b      	b.n	800a346 <tcp_split_unsent_seg+0x3a>
  if (split == 0) {
 800a32e:	f1b9 0f00 	cmp.w	r9, #0
 800a332:	d10b      	bne.n	800a34c <tcp_split_unsent_seg+0x40>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800a334:	4b54      	ldr	r3, [pc, #336]	; (800a488 <tcp_split_unsent_seg+0x17c>)
 800a336:	f240 3253 	movw	r2, #851	; 0x353
 800a33a:	4956      	ldr	r1, [pc, #344]	; (800a494 <tcp_split_unsent_seg+0x188>)
 800a33c:	4854      	ldr	r0, [pc, #336]	; (800a490 <tcp_split_unsent_seg+0x184>)
 800a33e:	f001 ff01 	bl	800c144 <iprintf>
    return ERR_VAL;
 800a342:	f06f 0005 	mvn.w	r0, #5
}
 800a346:	b003      	add	sp, #12
 800a348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (useg->len <= split) {
 800a34c:	8923      	ldrh	r3, [r4, #8]
 800a34e:	454b      	cmp	r3, r9
 800a350:	d801      	bhi.n	800a356 <tcp_split_unsent_seg+0x4a>
    return ERR_OK;
 800a352:	2000      	movs	r0, #0
 800a354:	e7f7      	b.n	800a346 <tcp_split_unsent_seg+0x3a>
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800a356:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
 800a358:	454b      	cmp	r3, r9
 800a35a:	d206      	bcs.n	800a36a <tcp_split_unsent_seg+0x5e>
 800a35c:	4b4a      	ldr	r3, [pc, #296]	; (800a488 <tcp_split_unsent_seg+0x17c>)
 800a35e:	f240 325b 	movw	r2, #859	; 0x35b
 800a362:	494d      	ldr	r1, [pc, #308]	; (800a498 <tcp_split_unsent_seg+0x18c>)
 800a364:	484a      	ldr	r0, [pc, #296]	; (800a490 <tcp_split_unsent_seg+0x184>)
 800a366:	f001 feed 	bl	800c144 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800a36a:	8923      	ldrh	r3, [r4, #8]
 800a36c:	b933      	cbnz	r3, 800a37c <tcp_split_unsent_seg+0x70>
 800a36e:	4b46      	ldr	r3, [pc, #280]	; (800a488 <tcp_split_unsent_seg+0x17c>)
 800a370:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800a374:	4949      	ldr	r1, [pc, #292]	; (800a49c <tcp_split_unsent_seg+0x190>)
 800a376:	4846      	ldr	r0, [pc, #280]	; (800a490 <tcp_split_unsent_seg+0x184>)
 800a378:	f001 fee4 	bl	800c144 <iprintf>
  optflags = useg->flags;
 800a37c:	f894 b00a 	ldrb.w	fp, [r4, #10]
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800a380:	f44f 7220 	mov.w	r2, #640	; 0x280
  remainder = useg->len - split;
 800a384:	8927      	ldrh	r7, [r4, #8]
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800a386:	2036      	movs	r0, #54	; 0x36
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800a388:	f01b 0f01 	tst.w	fp, #1
  remainder = useg->len - split;
 800a38c:	eba7 0709 	sub.w	r7, r7, r9
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800a390:	bf14      	ite	ne
 800a392:	2604      	movne	r6, #4
 800a394:	2600      	moveq	r6, #0
  remainder = useg->len - split;
 800a396:	b2bf      	uxth	r7, r7
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800a398:	19b9      	adds	r1, r7, r6
 800a39a:	b289      	uxth	r1, r1
 800a39c:	f7fd f828 	bl	80073f0 <pbuf_alloc>
  if (p == NULL) {
 800a3a0:	4682      	mov	sl, r0
 800a3a2:	2800      	cmp	r0, #0
 800a3a4:	d0c0      	beq.n	800a328 <tcp_split_unsent_seg+0x1c>
  offset = useg->p->tot_len - useg->len + split;
 800a3a6:	6860      	ldr	r0, [r4, #4]
 800a3a8:	8922      	ldrh	r2, [r4, #8]
 800a3aa:	8903      	ldrh	r3, [r0, #8]
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800a3ac:	f8da 1004 	ldr.w	r1, [sl, #4]
  offset = useg->p->tot_len - useg->len + split;
 800a3b0:	1a9b      	subs	r3, r3, r2
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800a3b2:	463a      	mov	r2, r7
 800a3b4:	4431      	add	r1, r6
  offset = useg->p->tot_len - useg->len + split;
 800a3b6:	444b      	add	r3, r9
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800a3b8:	b29b      	uxth	r3, r3
 800a3ba:	f7fd f9e1 	bl	8007780 <pbuf_copy_partial>
 800a3be:	4287      	cmp	r7, r0
 800a3c0:	d15d      	bne.n	800a47e <tcp_split_unsent_seg+0x172>
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800a3c2:	68e3      	ldr	r3, [r4, #12]
 800a3c4:	8998      	ldrh	r0, [r3, #12]
 800a3c6:	f7f9 ff69 	bl	800429c <lwip_htons>
 800a3ca:	b2c6      	uxtb	r6, r0
  if (split_flags & TCP_PSH) {
 800a3cc:	f016 0808 	ands.w	r8, r6, #8
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800a3d0:	bf0e      	itee	eq
 800a3d2:	f006 063f 	andeq.w	r6, r6, #63	; 0x3f
    split_flags &= ~TCP_PSH;
 800a3d6:	f006 0637 	andne.w	r6, r6, #55	; 0x37
    remainder_flags |= TCP_PSH;
 800a3da:	f04f 0808 	movne.w	r8, #8
  if (split_flags & TCP_FIN) {
 800a3de:	07f3      	lsls	r3, r6, #31
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800a3e0:	68e3      	ldr	r3, [r4, #12]
    remainder_flags |= TCP_FIN;
 800a3e2:	bf48      	it	mi
 800a3e4:	f048 0801 	orrmi.w	r8, r8, #1
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800a3e8:	6858      	ldr	r0, [r3, #4]
    split_flags &= ~TCP_FIN;
 800a3ea:	bf48      	it	mi
 800a3ec:	f006 06fe 	andmi.w	r6, r6, #254	; 0xfe
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800a3f0:	f7f9 ff57 	bl	80042a2 <lwip_htonl>
 800a3f4:	4642      	mov	r2, r8
 800a3f6:	eb09 0300 	add.w	r3, r9, r0
 800a3fa:	f8cd b000 	str.w	fp, [sp]
 800a3fe:	4651      	mov	r1, sl
 800a400:	4628      	mov	r0, r5
 800a402:	f7ff fbb9 	bl	8009b78 <tcp_create_segment>
  if (seg == NULL) {
 800a406:	4680      	mov	r8, r0
 800a408:	2800      	cmp	r0, #0
 800a40a:	d038      	beq.n	800a47e <tcp_split_unsent_seg+0x172>
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800a40c:	6860      	ldr	r0, [r4, #4]
 800a40e:	f7fd f8c9 	bl	80075a4 <pbuf_clen>
 800a412:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
 800a416:	1a18      	subs	r0, r3, r0
 800a418:	f8a5 0066 	strh.w	r0, [r5, #102]	; 0x66
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800a41c:	6860      	ldr	r0, [r4, #4]
 800a41e:	8901      	ldrh	r1, [r0, #8]
 800a420:	1bc9      	subs	r1, r1, r7
 800a422:	b289      	uxth	r1, r1
 800a424:	f7fd f866 	bl	80074f4 <pbuf_realloc>
  useg->len -= remainder;
 800a428:	8923      	ldrh	r3, [r4, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800a42a:	f8d4 900c 	ldr.w	r9, [r4, #12]
 800a42e:	4630      	mov	r0, r6
  useg->len -= remainder;
 800a430:	1bdf      	subs	r7, r3, r7
 800a432:	8127      	strh	r7, [r4, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800a434:	f8b9 700c 	ldrh.w	r7, [r9, #12]
 800a438:	f7f9 ff30 	bl	800429c <lwip_htons>
 800a43c:	4338      	orrs	r0, r7
 800a43e:	f8a9 000c 	strh.w	r0, [r9, #12]
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800a442:	6860      	ldr	r0, [r4, #4]
 800a444:	f7fd f8ae 	bl	80075a4 <pbuf_clen>
 800a448:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
 800a44c:	4418      	add	r0, r3
 800a44e:	f8a5 0066 	strh.w	r0, [r5, #102]	; 0x66
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800a452:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a456:	f7fd f8a5 	bl	80075a4 <pbuf_clen>
 800a45a:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
 800a45e:	4418      	add	r0, r3
  seg->next = useg->next;
 800a460:	6823      	ldr	r3, [r4, #0]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800a462:	f8a5 0066 	strh.w	r0, [r5, #102]	; 0x66
  seg->next = useg->next;
 800a466:	f8c8 3000 	str.w	r3, [r8]
  useg->next = seg;
 800a46a:	f8c4 8000 	str.w	r8, [r4]
  if (seg->next == NULL) {
 800a46e:	f8d8 0000 	ldr.w	r0, [r8]
 800a472:	2800      	cmp	r0, #0
 800a474:	f47f af6d 	bne.w	800a352 <tcp_split_unsent_seg+0x46>
    pcb->unsent_oversize = 0;
 800a478:	f8a5 0068 	strh.w	r0, [r5, #104]	; 0x68
 800a47c:	e763      	b.n	800a346 <tcp_split_unsent_seg+0x3a>
    pbuf_free(p);
 800a47e:	4650      	mov	r0, sl
 800a480:	f7fc ff4e 	bl	8007320 <pbuf_free>
 800a484:	e750      	b.n	800a328 <tcp_split_unsent_seg+0x1c>
 800a486:	bf00      	nop
 800a488:	0800fb5c 	.word	0x0800fb5c
 800a48c:	0800fd12 	.word	0x0800fd12
 800a490:	0800d104 	.word	0x0800d104
 800a494:	0800fd34 	.word	0x0800fd34
 800a498:	0800fd56 	.word	0x0800fd56
 800a49c:	0800fd63 	.word	0x0800fd63

0800a4a0 <tcp_enqueue_flags>:
{
 800a4a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800a4a4:	f011 0803 	ands.w	r8, r1, #3
{
 800a4a8:	4604      	mov	r4, r0
 800a4aa:	460e      	mov	r6, r1
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800a4ac:	d106      	bne.n	800a4bc <tcp_enqueue_flags+0x1c>
 800a4ae:	4b41      	ldr	r3, [pc, #260]	; (800a5b4 <tcp_enqueue_flags+0x114>)
 800a4b0:	f240 4212 	movw	r2, #1042	; 0x412
 800a4b4:	4940      	ldr	r1, [pc, #256]	; (800a5b8 <tcp_enqueue_flags+0x118>)
 800a4b6:	4841      	ldr	r0, [pc, #260]	; (800a5bc <tcp_enqueue_flags+0x11c>)
 800a4b8:	f001 fe44 	bl	800c144 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800a4bc:	b934      	cbnz	r4, 800a4cc <tcp_enqueue_flags+0x2c>
 800a4be:	4b3d      	ldr	r3, [pc, #244]	; (800a5b4 <tcp_enqueue_flags+0x114>)
 800a4c0:	f240 4213 	movw	r2, #1043	; 0x413
 800a4c4:	493e      	ldr	r1, [pc, #248]	; (800a5c0 <tcp_enqueue_flags+0x120>)
 800a4c6:	483d      	ldr	r0, [pc, #244]	; (800a5bc <tcp_enqueue_flags+0x11c>)
 800a4c8:	f001 fe3c 	bl	800c144 <iprintf>
 800a4cc:	f006 0302 	and.w	r3, r6, #2
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800a4d0:	f44f 7220 	mov.w	r2, #640	; 0x280
 800a4d4:	2036      	movs	r0, #54	; 0x36
  if (flags & TCP_SYN) {
 800a4d6:	2b00      	cmp	r3, #0
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800a4d8:	bf15      	itete	ne
 800a4da:	2704      	movne	r7, #4
 800a4dc:	2700      	moveq	r7, #0
  u8_t optflags = 0;
 800a4de:	f04f 0901 	movne.w	r9, #1
 800a4e2:	f04f 0900 	moveq.w	r9, #0
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800a4e6:	4639      	mov	r1, r7
 800a4e8:	f7fc ff82 	bl	80073f0 <pbuf_alloc>
 800a4ec:	4605      	mov	r5, r0
 800a4ee:	b940      	cbnz	r0, 800a502 <tcp_enqueue_flags+0x62>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800a4f0:	8b63      	ldrh	r3, [r4, #26]
    return ERR_MEM;
 800a4f2:	f04f 30ff 	mov.w	r0, #4294967295
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800a4f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a4fa:	8363      	strh	r3, [r4, #26]
}
 800a4fc:	b003      	add	sp, #12
 800a4fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800a502:	8943      	ldrh	r3, [r0, #10]
 800a504:	42bb      	cmp	r3, r7
 800a506:	d206      	bcs.n	800a516 <tcp_enqueue_flags+0x76>
 800a508:	4b2a      	ldr	r3, [pc, #168]	; (800a5b4 <tcp_enqueue_flags+0x114>)
 800a50a:	f240 423a 	movw	r2, #1082	; 0x43a
 800a50e:	492d      	ldr	r1, [pc, #180]	; (800a5c4 <tcp_enqueue_flags+0x124>)
 800a510:	482a      	ldr	r0, [pc, #168]	; (800a5bc <tcp_enqueue_flags+0x11c>)
 800a512:	f001 fe17 	bl	800c144 <iprintf>
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800a516:	f8cd 9000 	str.w	r9, [sp]
 800a51a:	4629      	mov	r1, r5
 800a51c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800a51e:	4632      	mov	r2, r6
 800a520:	4620      	mov	r0, r4
 800a522:	f7ff fb29 	bl	8009b78 <tcp_create_segment>
 800a526:	4605      	mov	r5, r0
 800a528:	2800      	cmp	r0, #0
 800a52a:	d0e1      	beq.n	800a4f0 <tcp_enqueue_flags+0x50>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800a52c:	68c3      	ldr	r3, [r0, #12]
 800a52e:	079a      	lsls	r2, r3, #30
 800a530:	d006      	beq.n	800a540 <tcp_enqueue_flags+0xa0>
 800a532:	4b20      	ldr	r3, [pc, #128]	; (800a5b4 <tcp_enqueue_flags+0x114>)
 800a534:	f240 4242 	movw	r2, #1090	; 0x442
 800a538:	4923      	ldr	r1, [pc, #140]	; (800a5c8 <tcp_enqueue_flags+0x128>)
 800a53a:	4820      	ldr	r0, [pc, #128]	; (800a5bc <tcp_enqueue_flags+0x11c>)
 800a53c:	f001 fe02 	bl	800c144 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800a540:	892b      	ldrh	r3, [r5, #8]
 800a542:	b133      	cbz	r3, 800a552 <tcp_enqueue_flags+0xb2>
 800a544:	4b1b      	ldr	r3, [pc, #108]	; (800a5b4 <tcp_enqueue_flags+0x114>)
 800a546:	f240 4243 	movw	r2, #1091	; 0x443
 800a54a:	4920      	ldr	r1, [pc, #128]	; (800a5cc <tcp_enqueue_flags+0x12c>)
 800a54c:	481b      	ldr	r0, [pc, #108]	; (800a5bc <tcp_enqueue_flags+0x11c>)
 800a54e:	f001 fdf9 	bl	800c144 <iprintf>
  if (pcb->unsent == NULL) {
 800a552:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800a554:	bb4b      	cbnz	r3, 800a5aa <tcp_enqueue_flags+0x10a>
    pcb->unsent = seg;
 800a556:	66e5      	str	r5, [r4, #108]	; 0x6c
  pcb->unsent_oversize = 0;
 800a558:	2300      	movs	r3, #0
 800a55a:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800a55e:	f1b8 0f00 	cmp.w	r8, #0
 800a562:	d002      	beq.n	800a56a <tcp_enqueue_flags+0xca>
    pcb->snd_lbb++;
 800a564:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800a566:	3301      	adds	r3, #1
 800a568:	65e3      	str	r3, [r4, #92]	; 0x5c
  if (flags & TCP_FIN) {
 800a56a:	07f3      	lsls	r3, r6, #31
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800a56c:	6868      	ldr	r0, [r5, #4]
    tcp_set_flags(pcb, TF_FIN);
 800a56e:	bf42      	ittt	mi
 800a570:	8b63      	ldrhmi	r3, [r4, #26]
 800a572:	f043 0320 	orrmi.w	r3, r3, #32
 800a576:	8363      	strhmi	r3, [r4, #26]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800a578:	f7fd f814 	bl	80075a4 <pbuf_clen>
 800a57c:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 800a580:	4418      	add	r0, r3
 800a582:	b280      	uxth	r0, r0
 800a584:	f8a4 0066 	strh.w	r0, [r4, #102]	; 0x66
  if (pcb->snd_queuelen != 0) {
 800a588:	2800      	cmp	r0, #0
 800a58a:	d0b7      	beq.n	800a4fc <tcp_enqueue_flags+0x5c>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800a58c:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800a58e:	b948      	cbnz	r0, 800a5a4 <tcp_enqueue_flags+0x104>
 800a590:	6ee4      	ldr	r4, [r4, #108]	; 0x6c
 800a592:	2c00      	cmp	r4, #0
 800a594:	d1b2      	bne.n	800a4fc <tcp_enqueue_flags+0x5c>
 800a596:	4b07      	ldr	r3, [pc, #28]	; (800a5b4 <tcp_enqueue_flags+0x114>)
 800a598:	f240 4266 	movw	r2, #1126	; 0x466
 800a59c:	490c      	ldr	r1, [pc, #48]	; (800a5d0 <tcp_enqueue_flags+0x130>)
 800a59e:	4807      	ldr	r0, [pc, #28]	; (800a5bc <tcp_enqueue_flags+0x11c>)
 800a5a0:	f001 fdd0 	bl	800c144 <iprintf>
  return ERR_OK;
 800a5a4:	2000      	movs	r0, #0
 800a5a6:	e7a9      	b.n	800a4fc <tcp_enqueue_flags+0x5c>
 800a5a8:	4613      	mov	r3, r2
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800a5aa:	681a      	ldr	r2, [r3, #0]
 800a5ac:	2a00      	cmp	r2, #0
 800a5ae:	d1fb      	bne.n	800a5a8 <tcp_enqueue_flags+0x108>
    useg->next = seg;
 800a5b0:	601d      	str	r5, [r3, #0]
 800a5b2:	e7d1      	b.n	800a558 <tcp_enqueue_flags+0xb8>
 800a5b4:	0800fb5c 	.word	0x0800fb5c
 800a5b8:	0800f920 	.word	0x0800f920
 800a5bc:	0800d104 	.word	0x0800d104
 800a5c0:	0800f975 	.word	0x0800f975
 800a5c4:	0800f994 	.word	0x0800f994
 800a5c8:	0800f9cd 	.word	0x0800f9cd
 800a5cc:	0800f9e5 	.word	0x0800f9e5
 800a5d0:	0800fa0f 	.word	0x0800fa0f

0800a5d4 <tcp_send_fin>:
{
 800a5d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800a5d6:	4604      	mov	r4, r0
 800a5d8:	b930      	cbnz	r0, 800a5e8 <tcp_send_fin+0x14>
 800a5da:	4b13      	ldr	r3, [pc, #76]	; (800a628 <tcp_send_fin+0x54>)
 800a5dc:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800a5e0:	4912      	ldr	r1, [pc, #72]	; (800a62c <tcp_send_fin+0x58>)
 800a5e2:	4813      	ldr	r0, [pc, #76]	; (800a630 <tcp_send_fin+0x5c>)
 800a5e4:	f001 fdae 	bl	800c144 <iprintf>
  if (pcb->unsent != NULL) {
 800a5e8:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 800a5ea:	b935      	cbnz	r5, 800a5fa <tcp_send_fin+0x26>
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800a5ec:	4620      	mov	r0, r4
 800a5ee:	2101      	movs	r1, #1
}
 800a5f0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800a5f4:	f7ff bf54 	b.w	800a4a0 <tcp_enqueue_flags>
 800a5f8:	461d      	mov	r5, r3
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800a5fa:	682b      	ldr	r3, [r5, #0]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d1fb      	bne.n	800a5f8 <tcp_send_fin+0x24>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800a600:	68eb      	ldr	r3, [r5, #12]
 800a602:	8998      	ldrh	r0, [r3, #12]
 800a604:	f7f9 fe4a 	bl	800429c <lwip_htons>
 800a608:	f010 0707 	ands.w	r7, r0, #7
 800a60c:	d1ee      	bne.n	800a5ec <tcp_send_fin+0x18>
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800a60e:	68ee      	ldr	r6, [r5, #12]
 800a610:	2001      	movs	r0, #1
 800a612:	89b5      	ldrh	r5, [r6, #12]
 800a614:	f7f9 fe42 	bl	800429c <lwip_htons>
      tcp_set_flags(pcb, TF_FIN);
 800a618:	8b63      	ldrh	r3, [r4, #26]
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800a61a:	4328      	orrs	r0, r5
      tcp_set_flags(pcb, TF_FIN);
 800a61c:	f043 0320 	orr.w	r3, r3, #32
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800a620:	81b0      	strh	r0, [r6, #12]
}
 800a622:	4638      	mov	r0, r7
      tcp_set_flags(pcb, TF_FIN);
 800a624:	8363      	strh	r3, [r4, #26]
}
 800a626:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a628:	0800fb5c 	.word	0x0800fb5c
 800a62c:	0800fcf8 	.word	0x0800fcf8
 800a630:	0800d104 	.word	0x0800d104

0800a634 <tcp_rexmit_rto_prepare>:
{
 800a634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800a638:	4604      	mov	r4, r0
 800a63a:	b930      	cbnz	r0, 800a64a <tcp_rexmit_rto_prepare+0x16>
 800a63c:	4b1c      	ldr	r3, [pc, #112]	; (800a6b0 <tcp_rexmit_rto_prepare+0x7c>)
 800a63e:	f240 6263 	movw	r2, #1635	; 0x663
 800a642:	491c      	ldr	r1, [pc, #112]	; (800a6b4 <tcp_rexmit_rto_prepare+0x80>)
 800a644:	481c      	ldr	r0, [pc, #112]	; (800a6b8 <tcp_rexmit_rto_prepare+0x84>)
 800a646:	f001 fd7d 	bl	800c144 <iprintf>
  if (pcb->unacked == NULL) {
 800a64a:	6f25      	ldr	r5, [r4, #112]	; 0x70
 800a64c:	b945      	cbnz	r5, 800a660 <tcp_rexmit_rto_prepare+0x2c>
    return ERR_VAL;
 800a64e:	f06f 0005 	mvn.w	r0, #5
 800a652:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (tcp_output_segment_busy(seg)) {
 800a656:	f7ff fa23 	bl	8009aa0 <tcp_output_segment_busy>
 800a65a:	2800      	cmp	r0, #0
 800a65c:	d1f7      	bne.n	800a64e <tcp_rexmit_rto_prepare+0x1a>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800a65e:	682d      	ldr	r5, [r5, #0]
 800a660:	682b      	ldr	r3, [r5, #0]
    if (tcp_output_segment_busy(seg)) {
 800a662:	4628      	mov	r0, r5
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800a664:	2b00      	cmp	r3, #0
 800a666:	d1f6      	bne.n	800a656 <tcp_rexmit_rto_prepare+0x22>
  if (tcp_output_segment_busy(seg)) {
 800a668:	f7ff fa1a 	bl	8009aa0 <tcp_output_segment_busy>
 800a66c:	4606      	mov	r6, r0
 800a66e:	2800      	cmp	r0, #0
 800a670:	d1ed      	bne.n	800a64e <tcp_rexmit_rto_prepare+0x1a>
  seg->next = pcb->unsent;
 800a672:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800a674:	602b      	str	r3, [r5, #0]
  pcb->unsent = pcb->unacked;
 800a676:	6f23      	ldr	r3, [r4, #112]	; 0x70
  pcb->unacked = NULL;
 800a678:	6720      	str	r0, [r4, #112]	; 0x70
  pcb->unsent = pcb->unacked;
 800a67a:	66e3      	str	r3, [r4, #108]	; 0x6c
  tcp_set_flags(pcb, TF_RTO);
 800a67c:	8b63      	ldrh	r3, [r4, #26]
 800a67e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a682:	8363      	strh	r3, [r4, #26]
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800a684:	68eb      	ldr	r3, [r5, #12]
 800a686:	6858      	ldr	r0, [r3, #4]
 800a688:	f7f9 fe0b 	bl	80042a2 <lwip_htonl>
 800a68c:	68eb      	ldr	r3, [r5, #12]
 800a68e:	4607      	mov	r7, r0
 800a690:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 800a694:	8998      	ldrh	r0, [r3, #12]
 800a696:	f7f9 fe01 	bl	800429c <lwip_htons>
 800a69a:	f010 0003 	ands.w	r0, r0, #3
 800a69e:	4447      	add	r7, r8
  pcb->rttest = 0;
 800a6a0:	6366      	str	r6, [r4, #52]	; 0x34
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800a6a2:	bf18      	it	ne
 800a6a4:	2001      	movne	r0, #1
 800a6a6:	4438      	add	r0, r7
 800a6a8:	64e0      	str	r0, [r4, #76]	; 0x4c
  return ERR_OK;
 800a6aa:	4630      	mov	r0, r6
}
 800a6ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6b0:	0800fb5c 	.word	0x0800fb5c
 800a6b4:	0800fc7f 	.word	0x0800fc7f
 800a6b8:	0800d104 	.word	0x0800d104

0800a6bc <tcp_rexmit>:
{
 800a6bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800a6be:	4604      	mov	r4, r0
 800a6c0:	b930      	cbnz	r0, 800a6d0 <tcp_rexmit+0x14>
 800a6c2:	4b1b      	ldr	r3, [pc, #108]	; (800a730 <tcp_rexmit+0x74>)
 800a6c4:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800a6c8:	491a      	ldr	r1, [pc, #104]	; (800a734 <tcp_rexmit+0x78>)
 800a6ca:	481b      	ldr	r0, [pc, #108]	; (800a738 <tcp_rexmit+0x7c>)
 800a6cc:	f001 fd3a 	bl	800c144 <iprintf>
  if (pcb->unacked == NULL) {
 800a6d0:	6f25      	ldr	r5, [r4, #112]	; 0x70
 800a6d2:	b915      	cbnz	r5, 800a6da <tcp_rexmit+0x1e>
    return ERR_VAL;
 800a6d4:	f06f 0005 	mvn.w	r0, #5
 800a6d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (tcp_output_segment_busy(seg)) {
 800a6da:	4628      	mov	r0, r5
 800a6dc:	f7ff f9e0 	bl	8009aa0 <tcp_output_segment_busy>
 800a6e0:	2800      	cmp	r0, #0
 800a6e2:	d1f7      	bne.n	800a6d4 <tcp_rexmit+0x18>
  pcb->unacked = seg->next;
 800a6e4:	682b      	ldr	r3, [r5, #0]
  cur_seg = &(pcb->unsent);
 800a6e6:	f104 066c 	add.w	r6, r4, #108	; 0x6c
  pcb->unacked = seg->next;
 800a6ea:	6723      	str	r3, [r4, #112]	; 0x70
  while (*cur_seg &&
 800a6ec:	6833      	ldr	r3, [r6, #0]
 800a6ee:	b983      	cbnz	r3, 800a712 <tcp_rexmit+0x56>
  seg->next = *cur_seg;
 800a6f0:	6833      	ldr	r3, [r6, #0]
 800a6f2:	602b      	str	r3, [r5, #0]
  *cur_seg = seg;
 800a6f4:	6035      	str	r5, [r6, #0]
  if (seg->next == NULL) {
 800a6f6:	682b      	ldr	r3, [r5, #0]
 800a6f8:	b90b      	cbnz	r3, 800a6fe <tcp_rexmit+0x42>
    pcb->unsent_oversize = 0;
 800a6fa:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  if (pcb->nrtx < 0xFF) {
 800a6fe:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
  pcb->rttest = 0;
 800a702:	2000      	movs	r0, #0
  if (pcb->nrtx < 0xFF) {
 800a704:	2bff      	cmp	r3, #255	; 0xff
  pcb->rttest = 0;
 800a706:	6360      	str	r0, [r4, #52]	; 0x34
    ++pcb->nrtx;
 800a708:	bf1c      	itt	ne
 800a70a:	3301      	addne	r3, #1
 800a70c:	f884 3042 	strbne.w	r3, [r4, #66]	; 0x42
}
 800a710:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800a712:	68db      	ldr	r3, [r3, #12]
 800a714:	6858      	ldr	r0, [r3, #4]
 800a716:	f7f9 fdc4 	bl	80042a2 <lwip_htonl>
 800a71a:	68eb      	ldr	r3, [r5, #12]
 800a71c:	4607      	mov	r7, r0
 800a71e:	6858      	ldr	r0, [r3, #4]
 800a720:	f7f9 fdbf 	bl	80042a2 <lwip_htonl>
 800a724:	1a38      	subs	r0, r7, r0
  while (*cur_seg &&
 800a726:	2800      	cmp	r0, #0
 800a728:	dae2      	bge.n	800a6f0 <tcp_rexmit+0x34>
    cur_seg = &((*cur_seg)->next );
 800a72a:	6836      	ldr	r6, [r6, #0]
 800a72c:	e7de      	b.n	800a6ec <tcp_rexmit+0x30>
 800a72e:	bf00      	nop
 800a730:	0800fb5c 	.word	0x0800fb5c
 800a734:	0800fc0b 	.word	0x0800fc0b
 800a738:	0800d104 	.word	0x0800d104

0800a73c <tcp_rexmit_fast>:
{
 800a73c:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800a73e:	4604      	mov	r4, r0
 800a740:	b930      	cbnz	r0, 800a750 <tcp_rexmit_fast+0x14>
 800a742:	4b17      	ldr	r3, [pc, #92]	; (800a7a0 <tcp_rexmit_fast+0x64>)
 800a744:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800a748:	4916      	ldr	r1, [pc, #88]	; (800a7a4 <tcp_rexmit_fast+0x68>)
 800a74a:	4817      	ldr	r0, [pc, #92]	; (800a7a8 <tcp_rexmit_fast+0x6c>)
 800a74c:	f001 fcfa 	bl	800c144 <iprintf>
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800a750:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800a752:	b31b      	cbz	r3, 800a79c <tcp_rexmit_fast+0x60>
 800a754:	8b63      	ldrh	r3, [r4, #26]
 800a756:	075b      	lsls	r3, r3, #29
 800a758:	d420      	bmi.n	800a79c <tcp_rexmit_fast+0x60>
    if (tcp_rexmit(pcb) == ERR_OK) {
 800a75a:	4620      	mov	r0, r4
 800a75c:	f7ff ffae 	bl	800a6bc <tcp_rexmit>
 800a760:	b9e0      	cbnz	r0, 800a79c <tcp_rexmit_fast+0x60>
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800a762:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
 800a766:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 800a76a:	4293      	cmp	r3, r2
 800a76c:	bf38      	it	cc
 800a76e:	085a      	lsrcc	r2, r3, #1
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800a770:	8e63      	ldrh	r3, [r4, #50]	; 0x32
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800a772:	bf28      	it	cs
 800a774:	0852      	lsrcs	r2, r2, #1
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800a776:	0059      	lsls	r1, r3, #1
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800a778:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800a77c:	428a      	cmp	r2, r1
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800a77e:	440b      	add	r3, r1
        pcb->ssthresh = 2 * pcb->mss;
 800a780:	bf38      	it	cc
 800a782:	f8a4 104a 	strhcc.w	r1, [r4, #74]	; 0x4a
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800a786:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 800a78a:	4413      	add	r3, r2
 800a78c:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800a790:	8b63      	ldrh	r3, [r4, #26]
 800a792:	f043 0304 	orr.w	r3, r3, #4
 800a796:	8363      	strh	r3, [r4, #26]
      pcb->rtime = 0;
 800a798:	2300      	movs	r3, #0
 800a79a:	8623      	strh	r3, [r4, #48]	; 0x30
 800a79c:	bd10      	pop	{r4, pc}
 800a79e:	bf00      	nop
 800a7a0:	0800fb5c 	.word	0x0800fb5c
 800a7a4:	0800fc23 	.word	0x0800fc23
 800a7a8:	0800d104 	.word	0x0800d104

0800a7ac <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800a7ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a7b0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a7b2:	4606      	mov	r6, r0
 800a7b4:	468a      	mov	sl, r1
 800a7b6:	4617      	mov	r7, r2
 800a7b8:	f8bd 8034 	ldrh.w	r8, [sp, #52]	; 0x34
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800a7bc:	461c      	mov	r4, r3
{
 800a7be:	f8bd 9038 	ldrh.w	r9, [sp, #56]	; 0x38
  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800a7c2:	b933      	cbnz	r3, 800a7d2 <tcp_rst+0x26>
 800a7c4:	4b17      	ldr	r3, [pc, #92]	; (800a824 <tcp_rst+0x78>)
 800a7c6:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800a7ca:	4917      	ldr	r1, [pc, #92]	; (800a828 <tcp_rst+0x7c>)
 800a7cc:	4817      	ldr	r0, [pc, #92]	; (800a82c <tcp_rst+0x80>)
 800a7ce:	f001 fcb9 	bl	800c144 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800a7d2:	b935      	cbnz	r5, 800a7e2 <tcp_rst+0x36>
 800a7d4:	4b13      	ldr	r3, [pc, #76]	; (800a824 <tcp_rst+0x78>)
 800a7d6:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800a7da:	4915      	ldr	r1, [pc, #84]	; (800a830 <tcp_rst+0x84>)
 800a7dc:	4813      	ldr	r0, [pc, #76]	; (800a82c <tcp_rst+0x80>)
 800a7de:	f001 fcb1 	bl	800c144 <iprintf>
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800a7e2:	4650      	mov	r0, sl
 800a7e4:	f7f9 fd5d 	bl	80042a2 <lwip_htonl>
 800a7e8:	f646 030b 	movw	r3, #26635	; 0x680b
 800a7ec:	4602      	mov	r2, r0
 800a7ee:	f8cd 9000 	str.w	r9, [sp]
 800a7f2:	9302      	str	r3, [sp, #8]
 800a7f4:	2314      	movs	r3, #20
 800a7f6:	4638      	mov	r0, r7
 800a7f8:	2100      	movs	r1, #0
 800a7fa:	9301      	str	r3, [sp, #4]
 800a7fc:	4643      	mov	r3, r8
 800a7fe:	f7ff fa35 	bl	8009c6c <tcp_output_alloc_header_common.constprop.3>
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800a802:	4607      	mov	r7, r0
 800a804:	b150      	cbz	r0, 800a81c <tcp_rst+0x70>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800a806:	f7ff fa99 	bl	8009d3c <tcp_output_fill_options.isra.0.constprop.4>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800a80a:	462b      	mov	r3, r5
 800a80c:	4622      	mov	r2, r4
 800a80e:	4639      	mov	r1, r7
 800a810:	4630      	mov	r0, r6
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800a812:	b004      	add	sp, #16
 800a814:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800a818:	f7ff baa0 	b.w	8009d5c <tcp_output_control_segment>
}
 800a81c:	b004      	add	sp, #16
 800a81e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a822:	bf00      	nop
 800a824:	0800fb5c 	.word	0x0800fb5c
 800a828:	0800fca3 	.word	0x0800fca3
 800a82c:	0800d104 	.word	0x0800d104
 800a830:	0800fcbd 	.word	0x0800fcbd

0800a834 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800a834:	b538      	push	{r3, r4, r5, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
  u8_t num_sacks = 0;

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800a836:	4604      	mov	r4, r0
 800a838:	b930      	cbnz	r0, 800a848 <tcp_send_empty_ack+0x14>
 800a83a:	4b14      	ldr	r3, [pc, #80]	; (800a88c <tcp_send_empty_ack+0x58>)
 800a83c:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800a840:	4913      	ldr	r1, [pc, #76]	; (800a890 <tcp_send_empty_ack+0x5c>)
 800a842:	4814      	ldr	r0, [pc, #80]	; (800a894 <tcp_send_empty_ack+0x60>)
 800a844:	f001 fc7e 	bl	800c144 <iprintf>
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800a848:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800a84a:	f7f9 fd2a 	bl	80042a2 <lwip_htonl>
 800a84e:	2100      	movs	r1, #0
 800a850:	4602      	mov	r2, r0
 800a852:	4620      	mov	r0, r4
 800a854:	f7ff fa4c 	bl	8009cf0 <tcp_output_alloc_header.constprop.2>
  if (p == NULL) {
 800a858:	4605      	mov	r5, r0
 800a85a:	b930      	cbnz	r0, 800a86a <tcp_send_empty_ack+0x36>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a85c:	8b63      	ldrh	r3, [r4, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800a85e:	f06f 0001 	mvn.w	r0, #1
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a862:	f043 0303 	orr.w	r3, r3, #3
 800a866:	8363      	strh	r3, [r4, #26]
    return ERR_BUF;
 800a868:	bd38      	pop	{r3, r4, r5, pc}
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800a86a:	f7ff fa67 	bl	8009d3c <tcp_output_fill_options.isra.0.constprop.4>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800a86e:	1d23      	adds	r3, r4, #4
 800a870:	4622      	mov	r2, r4
 800a872:	4629      	mov	r1, r5
 800a874:	4620      	mov	r0, r4
 800a876:	f7ff fa71 	bl	8009d5c <tcp_output_control_segment>
 800a87a:	8b63      	ldrh	r3, [r4, #26]
  if (err != ERR_OK) {
 800a87c:	b118      	cbz	r0, 800a886 <tcp_send_empty_ack+0x52>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a87e:	f043 0303 	orr.w	r3, r3, #3
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a882:	8363      	strh	r3, [r4, #26]
  }

  return err;
}
 800a884:	bd38      	pop	{r3, r4, r5, pc}
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a886:	f023 0303 	bic.w	r3, r3, #3
 800a88a:	e7fa      	b.n	800a882 <tcp_send_empty_ack+0x4e>
 800a88c:	0800fb5c 	.word	0x0800fb5c
 800a890:	0800fcd8 	.word	0x0800fcd8
 800a894:	0800d104 	.word	0x0800d104

0800a898 <tcp_output>:
{
 800a898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800a89c:	4604      	mov	r4, r0
{
 800a89e:	b087      	sub	sp, #28
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800a8a0:	b930      	cbnz	r0, 800a8b0 <tcp_output+0x18>
 800a8a2:	4ba9      	ldr	r3, [pc, #676]	; (800ab48 <tcp_output+0x2b0>)
 800a8a4:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800a8a8:	49a8      	ldr	r1, [pc, #672]	; (800ab4c <tcp_output+0x2b4>)
 800a8aa:	48a9      	ldr	r0, [pc, #676]	; (800ab50 <tcp_output+0x2b8>)
 800a8ac:	f001 fc4a 	bl	800c144 <iprintf>
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800a8b0:	7d23      	ldrb	r3, [r4, #20]
 800a8b2:	2b01      	cmp	r3, #1
 800a8b4:	d106      	bne.n	800a8c4 <tcp_output+0x2c>
 800a8b6:	4ba4      	ldr	r3, [pc, #656]	; (800ab48 <tcp_output+0x2b0>)
 800a8b8:	f240 42e4 	movw	r2, #1252	; 0x4e4
 800a8bc:	49a5      	ldr	r1, [pc, #660]	; (800ab54 <tcp_output+0x2bc>)
 800a8be:	48a4      	ldr	r0, [pc, #656]	; (800ab50 <tcp_output+0x2b8>)
 800a8c0:	f001 fc40 	bl	800c144 <iprintf>
  if (tcp_input_pcb == pcb) {
 800a8c4:	4ba4      	ldr	r3, [pc, #656]	; (800ab58 <tcp_output+0x2c0>)
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	429c      	cmp	r4, r3
 800a8ca:	f000 816d 	beq.w	800aba8 <tcp_output+0x310>
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800a8ce:	f8b4 7060 	ldrh.w	r7, [r4, #96]	; 0x60
 800a8d2:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
  seg = pcb->unsent;
 800a8d6:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800a8d8:	429f      	cmp	r7, r3
 800a8da:	bf28      	it	cs
 800a8dc:	461f      	movcs	r7, r3
  if (seg == NULL) {
 800a8de:	b94d      	cbnz	r5, 800a8f4 <tcp_output+0x5c>
    if (pcb->flags & TF_ACK_NOW) {
 800a8e0:	8b63      	ldrh	r3, [r4, #26]
 800a8e2:	0798      	lsls	r0, r3, #30
 800a8e4:	f140 815c 	bpl.w	800aba0 <tcp_output+0x308>
      return tcp_send_empty_ack(pcb);
 800a8e8:	4620      	mov	r0, r4
}
 800a8ea:	b007      	add	sp, #28
 800a8ec:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      return tcp_send_empty_ack(pcb);
 800a8f0:	f7ff bfa0 	b.w	800a834 <tcp_send_empty_ack>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800a8f4:	7a20      	ldrb	r0, [r4, #8]
  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800a8f6:	f104 0904 	add.w	r9, r4, #4
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800a8fa:	b340      	cbz	r0, 800a94e <tcp_output+0xb6>
    return netif_get_by_index(pcb->netif_idx);
 800a8fc:	f7fc fc58 	bl	80071b0 <netif_get_by_index>
    return ip_route(src, dst);
 800a900:	4680      	mov	r8, r0
  if (netif == NULL) {
 800a902:	2800      	cmp	r0, #0
 800a904:	f000 8169 	beq.w	800abda <tcp_output+0x342>
  if (ip_addr_isany(&pcb->local_ip)) {
 800a908:	b10c      	cbz	r4, 800a90e <tcp_output+0x76>
 800a90a:	6823      	ldr	r3, [r4, #0]
 800a90c:	b913      	cbnz	r3, 800a914 <tcp_output+0x7c>
    ip_addr_copy(pcb->local_ip, *local_ip);
 800a90e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a912:	6023      	str	r3, [r4, #0]
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800a914:	68eb      	ldr	r3, [r5, #12]
 800a916:	6858      	ldr	r0, [r3, #4]
 800a918:	f7f9 fcc3 	bl	80042a2 <lwip_htonl>
 800a91c:	892b      	ldrh	r3, [r5, #8]
 800a91e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800a920:	1a9b      	subs	r3, r3, r2
 800a922:	4418      	add	r0, r3
 800a924:	4287      	cmp	r7, r0
 800a926:	d216      	bcs.n	800a956 <tcp_output+0xbe>
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800a928:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 800a92c:	429f      	cmp	r7, r3
 800a92e:	d1d7      	bne.n	800a8e0 <tcp_output+0x48>
 800a930:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800a932:	2b00      	cmp	r3, #0
 800a934:	d1d4      	bne.n	800a8e0 <tcp_output+0x48>
 800a936:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d1d0      	bne.n	800a8e0 <tcp_output+0x48>
      pcb->persist_backoff = 1;
 800a93e:	2201      	movs	r2, #1
      pcb->persist_cnt = 0;
 800a940:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
      pcb->persist_probe = 0;
 800a944:	f884 3096 	strb.w	r3, [r4, #150]	; 0x96
      pcb->persist_backoff = 1;
 800a948:	f884 2095 	strb.w	r2, [r4, #149]	; 0x95
 800a94c:	e7c8      	b.n	800a8e0 <tcp_output+0x48>
    return ip_route(src, dst);
 800a94e:	4648      	mov	r0, r9
 800a950:	f7fb fa6c 	bl	8005e2c <ip4_route>
 800a954:	e7d4      	b.n	800a900 <tcp_output+0x68>
  pcb->persist_backoff = 0;
 800a956:	2300      	movs	r3, #0
  useg = pcb->unacked;
 800a958:	6f26      	ldr	r6, [r4, #112]	; 0x70
  pcb->persist_backoff = 0;
 800a95a:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
  if (useg != NULL) {
 800a95e:	2e00      	cmp	r6, #0
 800a960:	f040 80a8 	bne.w	800aab4 <tcp_output+0x21c>
    LWIP_ASSERT("RST not expected here!",
 800a964:	f8df a1e0 	ldr.w	sl, [pc, #480]	; 800ab48 <tcp_output+0x2b0>
 800a968:	f8df b1e4 	ldr.w	fp, [pc, #484]	; 800ab50 <tcp_output+0x2b8>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800a96c:	68eb      	ldr	r3, [r5, #12]
 800a96e:	6858      	ldr	r0, [r3, #4]
 800a970:	f7f9 fc97 	bl	80042a2 <lwip_htonl>
 800a974:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800a976:	1ac0      	subs	r0, r0, r3
 800a978:	892b      	ldrh	r3, [r5, #8]
 800a97a:	4418      	add	r0, r3
  while (seg != NULL &&
 800a97c:	4287      	cmp	r7, r0
 800a97e:	f0c0 810b 	bcc.w	800ab98 <tcp_output+0x300>
    LWIP_ASSERT("RST not expected here!",
 800a982:	68eb      	ldr	r3, [r5, #12]
 800a984:	8998      	ldrh	r0, [r3, #12]
 800a986:	f7f9 fc89 	bl	800429c <lwip_htons>
 800a98a:	0741      	lsls	r1, r0, #29
 800a98c:	d506      	bpl.n	800a99c <tcp_output+0x104>
 800a98e:	4653      	mov	r3, sl
 800a990:	f240 5237 	movw	r2, #1335	; 0x537
 800a994:	4971      	ldr	r1, [pc, #452]	; (800ab5c <tcp_output+0x2c4>)
 800a996:	4658      	mov	r0, fp
 800a998:	f001 fbd4 	bl	800c144 <iprintf>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800a99c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800a99e:	b19b      	cbz	r3, 800a9c8 <tcp_output+0x130>
 800a9a0:	8b62      	ldrh	r2, [r4, #26]
 800a9a2:	f012 0f44 	tst.w	r2, #68	; 0x44
 800a9a6:	d10f      	bne.n	800a9c8 <tcp_output+0x130>
 800a9a8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800a9aa:	b12b      	cbz	r3, 800a9b8 <tcp_output+0x120>
 800a9ac:	6819      	ldr	r1, [r3, #0]
 800a9ae:	b959      	cbnz	r1, 800a9c8 <tcp_output+0x130>
 800a9b0:	8919      	ldrh	r1, [r3, #8]
 800a9b2:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800a9b4:	4299      	cmp	r1, r3
 800a9b6:	d207      	bcs.n	800a9c8 <tcp_output+0x130>
 800a9b8:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 800a9bc:	b123      	cbz	r3, 800a9c8 <tcp_output+0x130>
 800a9be:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 800a9c2:	2b07      	cmp	r3, #7
 800a9c4:	f240 810c 	bls.w	800abe0 <tcp_output+0x348>
    if (pcb->state != SYN_SENT) {
 800a9c8:	7d23      	ldrb	r3, [r4, #20]
 800a9ca:	2b02      	cmp	r3, #2
 800a9cc:	d00a      	beq.n	800a9e4 <tcp_output+0x14c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800a9ce:	68ea      	ldr	r2, [r5, #12]
 800a9d0:	2010      	movs	r0, #16
 800a9d2:	8993      	ldrh	r3, [r2, #12]
 800a9d4:	9205      	str	r2, [sp, #20]
 800a9d6:	9304      	str	r3, [sp, #16]
 800a9d8:	f7f9 fc60 	bl	800429c <lwip_htons>
 800a9dc:	9b04      	ldr	r3, [sp, #16]
 800a9de:	9a05      	ldr	r2, [sp, #20]
 800a9e0:	4318      	orrs	r0, r3
 800a9e2:	8190      	strh	r0, [r2, #12]
  if (tcp_output_segment_busy(seg)) {
 800a9e4:	4628      	mov	r0, r5
 800a9e6:	f7ff f85b 	bl	8009aa0 <tcp_output_segment_busy>
 800a9ea:	2800      	cmp	r0, #0
 800a9ec:	d176      	bne.n	800aadc <tcp_output+0x244>
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800a9ee:	68eb      	ldr	r3, [r5, #12]
 800a9f0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a9f2:	9304      	str	r3, [sp, #16]
 800a9f4:	f7f9 fc55 	bl	80042a2 <lwip_htonl>
 800a9f8:	9b04      	ldr	r3, [sp, #16]
 800a9fa:	6098      	str	r0, [r3, #8]
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800a9fc:	68eb      	ldr	r3, [r5, #12]
 800a9fe:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 800aa00:	9304      	str	r3, [sp, #16]
 800aa02:	f7f9 fc4b 	bl	800429c <lwip_htons>
 800aa06:	9b04      	ldr	r3, [sp, #16]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800aa08:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800aa0a:	81d8      	strh	r0, [r3, #14]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800aa0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aa0e:	4413      	add	r3, r2
 800aa10:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800aa12:	7aaa      	ldrb	r2, [r5, #10]
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800aa14:	68eb      	ldr	r3, [r5, #12]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800aa16:	07d2      	lsls	r2, r2, #31
 800aa18:	d450      	bmi.n	800aabc <tcp_output+0x224>
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800aa1a:	f103 0214 	add.w	r2, r3, #20
  if (pcb->rtime < 0) {
 800aa1e:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 800aa22:	2b00      	cmp	r3, #0
    pcb->rtime = 0;
 800aa24:	bfbc      	itt	lt
 800aa26:	2300      	movlt	r3, #0
 800aa28:	8623      	strhlt	r3, [r4, #48]	; 0x30
  if (pcb->rttest == 0) {
 800aa2a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800aa2c:	b94b      	cbnz	r3, 800aa42 <tcp_output+0x1aa>
    pcb->rttest = tcp_ticks;
 800aa2e:	4b4c      	ldr	r3, [pc, #304]	; (800ab60 <tcp_output+0x2c8>)
 800aa30:	9204      	str	r2, [sp, #16]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	6363      	str	r3, [r4, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800aa36:	68eb      	ldr	r3, [r5, #12]
 800aa38:	6858      	ldr	r0, [r3, #4]
 800aa3a:	f7f9 fc32 	bl	80042a2 <lwip_htonl>
 800aa3e:	9a04      	ldr	r2, [sp, #16]
 800aa40:	63a0      	str	r0, [r4, #56]	; 0x38
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800aa42:	6869      	ldr	r1, [r5, #4]
 800aa44:	68eb      	ldr	r3, [r5, #12]
 800aa46:	6848      	ldr	r0, [r1, #4]
  seg->p->len -= len;
 800aa48:	f8b1 e00a 	ldrh.w	lr, [r1, #10]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800aa4c:	1a18      	subs	r0, r3, r0
  seg->p->payload = seg->tcphdr;
 800aa4e:	604b      	str	r3, [r1, #4]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800aa50:	b280      	uxth	r0, r0
  seg->p->len -= len;
 800aa52:	ebae 0e00 	sub.w	lr, lr, r0
 800aa56:	f8a1 e00a 	strh.w	lr, [r1, #10]
  seg->p->tot_len -= len;
 800aa5a:	f8b1 e008 	ldrh.w	lr, [r1, #8]
 800aa5e:	ebae 0000 	sub.w	r0, lr, r0
 800aa62:	8108      	strh	r0, [r1, #8]
  seg->tcphdr->chksum = 0;
 800aa64:	2100      	movs	r1, #0
 800aa66:	7419      	strb	r1, [r3, #16]
 800aa68:	7459      	strb	r1, [r3, #17]
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800aa6a:	7aa9      	ldrb	r1, [r5, #10]
 800aa6c:	f011 0f01 	tst.w	r1, #1
 800aa70:	bf14      	ite	ne
 800aa72:	2118      	movne	r1, #24
 800aa74:	2114      	moveq	r1, #20
 800aa76:	440b      	add	r3, r1
 800aa78:	429a      	cmp	r2, r3
 800aa7a:	d006      	beq.n	800aa8a <tcp_output+0x1f2>
 800aa7c:	4653      	mov	r3, sl
 800aa7e:	f240 621c 	movw	r2, #1564	; 0x61c
 800aa82:	4938      	ldr	r1, [pc, #224]	; (800ab64 <tcp_output+0x2cc>)
 800aa84:	4658      	mov	r0, fp
 800aa86:	f001 fb5d 	bl	800c144 <iprintf>
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800aa8a:	2206      	movs	r2, #6
 800aa8c:	7ae3      	ldrb	r3, [r4, #11]
 800aa8e:	f8cd 8008 	str.w	r8, [sp, #8]
 800aa92:	4621      	mov	r1, r4
 800aa94:	9201      	str	r2, [sp, #4]
 800aa96:	7aa2      	ldrb	r2, [r4, #10]
 800aa98:	9200      	str	r2, [sp, #0]
 800aa9a:	464a      	mov	r2, r9
 800aa9c:	6868      	ldr	r0, [r5, #4]
 800aa9e:	f7fb fb33 	bl	8006108 <ip4_output_if>
    if (err != ERR_OK) {
 800aaa2:	b1d8      	cbz	r0, 800aadc <tcp_output+0x244>
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800aaa4:	8b63      	ldrh	r3, [r4, #26]
 800aaa6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aaaa:	8363      	strh	r3, [r4, #26]
}
 800aaac:	b007      	add	sp, #28
 800aaae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aab2:	461e      	mov	r6, r3
    for (; useg->next != NULL; useg = useg->next);
 800aab4:	6833      	ldr	r3, [r6, #0]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d1fb      	bne.n	800aab2 <tcp_output+0x21a>
 800aaba:	e753      	b.n	800a964 <tcp_output+0xcc>
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800aabc:	464a      	mov	r2, r9
 800aabe:	4641      	mov	r1, r8
 800aac0:	f240 50b4 	movw	r0, #1460	; 0x5b4
 800aac4:	9304      	str	r3, [sp, #16]
 800aac6:	f7fd fed3 	bl	8008870 <tcp_eff_send_mss_netif>
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800aaca:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
 800aace:	f7f9 fbe8 	bl	80042a2 <lwip_htonl>
 800aad2:	9b04      	ldr	r3, [sp, #16]
 800aad4:	6158      	str	r0, [r3, #20]
    opts += 1;
 800aad6:	f103 0218 	add.w	r2, r3, #24
 800aada:	e7a0      	b.n	800aa1e <tcp_output+0x186>
    pcb->unsent = seg->next;
 800aadc:	682b      	ldr	r3, [r5, #0]
 800aade:	66e3      	str	r3, [r4, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800aae0:	7d23      	ldrb	r3, [r4, #20]
 800aae2:	2b02      	cmp	r3, #2
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800aae4:	bf1e      	ittt	ne
 800aae6:	8b63      	ldrhne	r3, [r4, #26]
 800aae8:	f023 0303 	bicne.w	r3, r3, #3
 800aaec:	8363      	strhne	r3, [r4, #26]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800aaee:	68eb      	ldr	r3, [r5, #12]
 800aaf0:	6858      	ldr	r0, [r3, #4]
 800aaf2:	f7f9 fbd6 	bl	80042a2 <lwip_htonl>
 800aaf6:	892a      	ldrh	r2, [r5, #8]
 800aaf8:	68e9      	ldr	r1, [r5, #12]
 800aafa:	9204      	str	r2, [sp, #16]
 800aafc:	9005      	str	r0, [sp, #20]
 800aafe:	8988      	ldrh	r0, [r1, #12]
 800ab00:	f7f9 fbcc 	bl	800429c <lwip_htons>
 800ab04:	9a04      	ldr	r2, [sp, #16]
 800ab06:	f010 0003 	ands.w	r0, r0, #3
 800ab0a:	9b05      	ldr	r3, [sp, #20]
 800ab0c:	bf18      	it	ne
 800ab0e:	2001      	movne	r0, #1
 800ab10:	4413      	add	r3, r2
    if (TCP_TCPLEN(seg) > 0) {
 800ab12:	68ea      	ldr	r2, [r5, #12]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800ab14:	4418      	add	r0, r3
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800ab16:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800ab18:	1a1b      	subs	r3, r3, r0
 800ab1a:	2b00      	cmp	r3, #0
    if (TCP_TCPLEN(seg) > 0) {
 800ab1c:	892b      	ldrh	r3, [r5, #8]
      pcb->snd_nxt = snd_nxt;
 800ab1e:	bfb8      	it	lt
 800ab20:	6520      	strlt	r0, [r4, #80]	; 0x50
    if (TCP_TCPLEN(seg) > 0) {
 800ab22:	9304      	str	r3, [sp, #16]
 800ab24:	8990      	ldrh	r0, [r2, #12]
 800ab26:	f7f9 fbb9 	bl	800429c <lwip_htons>
 800ab2a:	f010 0003 	ands.w	r0, r0, #3
 800ab2e:	9b04      	ldr	r3, [sp, #16]
 800ab30:	bf18      	it	ne
 800ab32:	2001      	movne	r0, #1
 800ab34:	42d8      	cmn	r0, r3
 800ab36:	d04c      	beq.n	800abd2 <tcp_output+0x33a>
      seg->next = NULL;
 800ab38:	2300      	movs	r3, #0
 800ab3a:	602b      	str	r3, [r5, #0]
      if (pcb->unacked == NULL) {
 800ab3c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800ab3e:	b99b      	cbnz	r3, 800ab68 <tcp_output+0x2d0>
        pcb->unacked = seg;
 800ab40:	6725      	str	r5, [r4, #112]	; 0x70
          useg->next = seg;
 800ab42:	462e      	mov	r6, r5
 800ab44:	e024      	b.n	800ab90 <tcp_output+0x2f8>
 800ab46:	bf00      	nop
 800ab48:	0800fb5c 	.word	0x0800fb5c
 800ab4c:	0800fa52 	.word	0x0800fa52
 800ab50:	0800d104 	.word	0x0800d104
 800ab54:	0800fa6a 	.word	0x0800fa6a
 800ab58:	2000d3a0 	.word	0x2000d3a0
 800ab5c:	0800fa90 	.word	0x0800fa90
 800ab60:	2000d390 	.word	0x2000d390
 800ab64:	0800faa7 	.word	0x0800faa7
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800ab68:	68eb      	ldr	r3, [r5, #12]
 800ab6a:	6858      	ldr	r0, [r3, #4]
 800ab6c:	f7f9 fb99 	bl	80042a2 <lwip_htonl>
 800ab70:	68f2      	ldr	r2, [r6, #12]
 800ab72:	9004      	str	r0, [sp, #16]
 800ab74:	6850      	ldr	r0, [r2, #4]
 800ab76:	f7f9 fb94 	bl	80042a2 <lwip_htonl>
 800ab7a:	9b04      	ldr	r3, [sp, #16]
 800ab7c:	1a18      	subs	r0, r3, r0
 800ab7e:	2800      	cmp	r0, #0
 800ab80:	da25      	bge.n	800abce <tcp_output+0x336>
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800ab82:	f104 0370 	add.w	r3, r4, #112	; 0x70
          while (*cur_seg &&
 800ab86:	681a      	ldr	r2, [r3, #0]
 800ab88:	b982      	cbnz	r2, 800abac <tcp_output+0x314>
          seg->next = (*cur_seg);
 800ab8a:	681a      	ldr	r2, [r3, #0]
 800ab8c:	602a      	str	r2, [r5, #0]
          (*cur_seg) = seg;
 800ab8e:	601d      	str	r5, [r3, #0]
    seg = pcb->unsent;
 800ab90:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  while (seg != NULL &&
 800ab92:	2d00      	cmp	r5, #0
 800ab94:	f47f aeea 	bne.w	800a96c <tcp_output+0xd4>
  if (pcb->unsent == NULL) {
 800ab98:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800ab9a:	b90b      	cbnz	r3, 800aba0 <tcp_output+0x308>
    pcb->unsent_oversize = 0;
 800ab9c:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800aba0:	8b63      	ldrh	r3, [r4, #26]
 800aba2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aba6:	8363      	strh	r3, [r4, #26]
    return ERR_OK;
 800aba8:	2000      	movs	r0, #0
 800abaa:	e77f      	b.n	800aaac <tcp_output+0x214>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800abac:	68d2      	ldr	r2, [r2, #12]
 800abae:	9305      	str	r3, [sp, #20]
 800abb0:	6850      	ldr	r0, [r2, #4]
 800abb2:	f7f9 fb76 	bl	80042a2 <lwip_htonl>
 800abb6:	68e9      	ldr	r1, [r5, #12]
 800abb8:	9004      	str	r0, [sp, #16]
 800abba:	6848      	ldr	r0, [r1, #4]
 800abbc:	f7f9 fb71 	bl	80042a2 <lwip_htonl>
 800abc0:	9a04      	ldr	r2, [sp, #16]
          while (*cur_seg &&
 800abc2:	9b05      	ldr	r3, [sp, #20]
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800abc4:	1a10      	subs	r0, r2, r0
          while (*cur_seg &&
 800abc6:	2800      	cmp	r0, #0
 800abc8:	dadf      	bge.n	800ab8a <tcp_output+0x2f2>
            cur_seg = &((*cur_seg)->next );
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	e7db      	b.n	800ab86 <tcp_output+0x2ee>
          useg->next = seg;
 800abce:	6035      	str	r5, [r6, #0]
 800abd0:	e7b7      	b.n	800ab42 <tcp_output+0x2aa>
      tcp_seg_free(seg);
 800abd2:	4628      	mov	r0, r5
 800abd4:	f7fc ffe4 	bl	8007ba0 <tcp_seg_free>
 800abd8:	e7da      	b.n	800ab90 <tcp_output+0x2f8>
    return ERR_RTE;
 800abda:	f06f 0003 	mvn.w	r0, #3
 800abde:	e765      	b.n	800aaac <tcp_output+0x214>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800abe0:	f012 0fa0 	tst.w	r2, #160	; 0xa0
 800abe4:	f47f aef0 	bne.w	800a9c8 <tcp_output+0x130>
 800abe8:	e7d6      	b.n	800ab98 <tcp_output+0x300>
 800abea:	bf00      	nop

0800abec <tcp_rexmit_rto_commit>:
{
 800abec:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800abee:	4604      	mov	r4, r0
 800abf0:	b930      	cbnz	r0, 800ac00 <tcp_rexmit_rto_commit+0x14>
 800abf2:	4b09      	ldr	r3, [pc, #36]	; (800ac18 <tcp_rexmit_rto_commit+0x2c>)
 800abf4:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800abf8:	4908      	ldr	r1, [pc, #32]	; (800ac1c <tcp_rexmit_rto_commit+0x30>)
 800abfa:	4809      	ldr	r0, [pc, #36]	; (800ac20 <tcp_rexmit_rto_commit+0x34>)
 800abfc:	f001 faa2 	bl	800c144 <iprintf>
  if (pcb->nrtx < 0xFF) {
 800ac00:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
  tcp_output(pcb);
 800ac04:	4620      	mov	r0, r4
  if (pcb->nrtx < 0xFF) {
 800ac06:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->nrtx;
 800ac08:	bf1c      	itt	ne
 800ac0a:	3301      	addne	r3, #1
 800ac0c:	f884 3042 	strbne.w	r3, [r4, #66]	; 0x42
}
 800ac10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tcp_output(pcb);
 800ac14:	f7ff be40 	b.w	800a898 <tcp_output>
 800ac18:	0800fb5c 	.word	0x0800fb5c
 800ac1c:	0800fc5c 	.word	0x0800fc5c
 800ac20:	0800d104 	.word	0x0800d104

0800ac24 <tcp_rexmit_rto>:
{
 800ac24:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800ac26:	4604      	mov	r4, r0
 800ac28:	b930      	cbnz	r0, 800ac38 <tcp_rexmit_rto+0x14>
 800ac2a:	4b08      	ldr	r3, [pc, #32]	; (800ac4c <tcp_rexmit_rto+0x28>)
 800ac2c:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800ac30:	4907      	ldr	r1, [pc, #28]	; (800ac50 <tcp_rexmit_rto+0x2c>)
 800ac32:	4808      	ldr	r0, [pc, #32]	; (800ac54 <tcp_rexmit_rto+0x30>)
 800ac34:	f001 fa86 	bl	800c144 <iprintf>
  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800ac38:	4620      	mov	r0, r4
 800ac3a:	f7ff fcfb 	bl	800a634 <tcp_rexmit_rto_prepare>
 800ac3e:	b920      	cbnz	r0, 800ac4a <tcp_rexmit_rto+0x26>
    tcp_rexmit_rto_commit(pcb);
 800ac40:	4620      	mov	r0, r4
}
 800ac42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tcp_rexmit_rto_commit(pcb);
 800ac46:	f7ff bfd1 	b.w	800abec <tcp_rexmit_rto_commit>
 800ac4a:	bd10      	pop	{r4, pc}
 800ac4c:	0800fb5c 	.word	0x0800fb5c
 800ac50:	0800fc40 	.word	0x0800fc40
 800ac54:	0800d104 	.word	0x0800d104

0800ac58 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800ac58:	b570      	push	{r4, r5, r6, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800ac5a:	4604      	mov	r4, r0
 800ac5c:	b930      	cbnz	r0, 800ac6c <tcp_keepalive+0x14>
 800ac5e:	4b0f      	ldr	r3, [pc, #60]	; (800ac9c <tcp_keepalive+0x44>)
 800ac60:	f640 0224 	movw	r2, #2084	; 0x824
 800ac64:	490e      	ldr	r1, [pc, #56]	; (800aca0 <tcp_keepalive+0x48>)
 800ac66:	480f      	ldr	r0, [pc, #60]	; (800aca4 <tcp_keepalive+0x4c>)
 800ac68:	f001 fa6c 	bl	800c144 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800ac6c:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800ac6e:	3801      	subs	r0, #1
 800ac70:	f7f9 fb17 	bl	80042a2 <lwip_htonl>
 800ac74:	2100      	movs	r1, #0
 800ac76:	4602      	mov	r2, r0
 800ac78:	4620      	mov	r0, r4
 800ac7a:	f7ff f839 	bl	8009cf0 <tcp_output_alloc_header.constprop.2>
  if (p == NULL) {
 800ac7e:	4605      	mov	r5, r0
 800ac80:	b148      	cbz	r0, 800ac96 <tcp_keepalive+0x3e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800ac82:	f7ff f85b 	bl	8009d3c <tcp_output_fill_options.isra.0.constprop.4>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800ac86:	1d23      	adds	r3, r4, #4
 800ac88:	4622      	mov	r2, r4
 800ac8a:	4629      	mov	r1, r5
 800ac8c:	4620      	mov	r0, r4

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800ac8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800ac92:	f7ff b863 	b.w	8009d5c <tcp_output_control_segment>
}
 800ac96:	f04f 30ff 	mov.w	r0, #4294967295
 800ac9a:	bd70      	pop	{r4, r5, r6, pc}
 800ac9c:	0800fb5c 	.word	0x0800fb5c
 800aca0:	0800fa37 	.word	0x0800fa37
 800aca4:	0800d104 	.word	0x0800d104

0800aca8 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800aca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800acac:	4605      	mov	r5, r0
 800acae:	b930      	cbnz	r0, 800acbe <tcp_zero_window_probe+0x16>
 800acb0:	4b2c      	ldr	r3, [pc, #176]	; (800ad64 <tcp_zero_window_probe+0xbc>)
 800acb2:	f640 024f 	movw	r2, #2127	; 0x84f
 800acb6:	492c      	ldr	r1, [pc, #176]	; (800ad68 <tcp_zero_window_probe+0xc0>)
 800acb8:	482c      	ldr	r0, [pc, #176]	; (800ad6c <tcp_zero_window_probe+0xc4>)
 800acba:	f001 fa43 	bl	800c144 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800acbe:	6eec      	ldr	r4, [r5, #108]	; 0x6c
  if (seg == NULL) {
 800acc0:	2c00      	cmp	r4, #0
 800acc2:	d048      	beq.n	800ad56 <tcp_zero_window_probe+0xae>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800acc4:	f895 3096 	ldrb.w	r3, [r5, #150]	; 0x96
 800acc8:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->persist_probe;
 800acca:	bf1c      	itt	ne
 800accc:	3301      	addne	r3, #1
 800acce:	f885 3096 	strbne.w	r3, [r5, #150]	; 0x96
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800acd2:	68e3      	ldr	r3, [r4, #12]
 800acd4:	8998      	ldrh	r0, [r3, #12]
 800acd6:	f7f9 fae1 	bl	800429c <lwip_htons>
 800acda:	f010 0601 	ands.w	r6, r0, #1
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800acde:	68e3      	ldr	r3, [r4, #12]
 800ace0:	4628      	mov	r0, r5
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800ace2:	bf18      	it	ne
 800ace4:	8926      	ldrhne	r6, [r4, #8]
  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800ace6:	685a      	ldr	r2, [r3, #4]
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800ace8:	bf1c      	itt	ne
 800acea:	fab6 f686 	clzne	r6, r6
 800acee:	0976      	lsrne	r6, r6, #5
  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800acf0:	f086 0101 	eor.w	r1, r6, #1
 800acf4:	f7fe fffc 	bl	8009cf0 <tcp_output_alloc_header.constprop.2>
  if (p == NULL) {
 800acf8:	4607      	mov	r7, r0
 800acfa:	b378      	cbz	r0, 800ad5c <tcp_zero_window_probe+0xb4>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800acfc:	f8d0 8004 	ldr.w	r8, [r0, #4]

  if (is_fin) {
 800ad00:	b1f6      	cbz	r6, 800ad40 <tcp_zero_window_probe+0x98>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800ad02:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 800ad06:	2011      	movs	r0, #17
 800ad08:	f7f9 fac8 	bl	800429c <lwip_htons>
 800ad0c:	f426 567c 	bic.w	r6, r6, #16128	; 0x3f00
 800ad10:	4330      	orrs	r0, r6
 800ad12:	f8a8 000c 	strh.w	r0, [r8, #12]
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800ad16:	68e3      	ldr	r3, [r4, #12]
 800ad18:	6858      	ldr	r0, [r3, #4]
 800ad1a:	f7f9 fac2 	bl	80042a2 <lwip_htonl>
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800ad1e:	6d2b      	ldr	r3, [r5, #80]	; 0x50
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800ad20:	3001      	adds	r0, #1
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800ad22:	1a1b      	subs	r3, r3, r0
 800ad24:	2b00      	cmp	r3, #0
    pcb->snd_nxt = snd_nxt;
 800ad26:	bfb8      	it	lt
 800ad28:	6528      	strlt	r0, [r5, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800ad2a:	4638      	mov	r0, r7
 800ad2c:	f7ff f806 	bl	8009d3c <tcp_output_fill_options.isra.0.constprop.4>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800ad30:	1d2b      	adds	r3, r5, #4
 800ad32:	462a      	mov	r2, r5
 800ad34:	4639      	mov	r1, r7
 800ad36:	4628      	mov	r0, r5

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800ad38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800ad3c:	f7ff b80e 	b.w	8009d5c <tcp_output_control_segment>
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800ad40:	6860      	ldr	r0, [r4, #4]
 800ad42:	f108 0114 	add.w	r1, r8, #20
 800ad46:	8922      	ldrh	r2, [r4, #8]
 800ad48:	8903      	ldrh	r3, [r0, #8]
 800ad4a:	1a9b      	subs	r3, r3, r2
 800ad4c:	2201      	movs	r2, #1
 800ad4e:	b29b      	uxth	r3, r3
 800ad50:	f7fc fd16 	bl	8007780 <pbuf_copy_partial>
 800ad54:	e7df      	b.n	800ad16 <tcp_zero_window_probe+0x6e>
    return ERR_OK;
 800ad56:	4620      	mov	r0, r4
 800ad58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return ERR_MEM;
 800ad5c:	f04f 30ff 	mov.w	r0, #4294967295
}
 800ad60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad64:	0800fb5c 	.word	0x0800fb5c
 800ad68:	0800ffba 	.word	0x0800ffba
 800ad6c:	0800d104 	.word	0x0800d104

0800ad70 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800ad70:	b570      	push	{r4, r5, r6, lr}
 800ad72:	4604      	mov	r4, r0
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800ad74:	200a      	movs	r0, #10
{
 800ad76:	460e      	mov	r6, r1
 800ad78:	4615      	mov	r5, r2
  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800ad7a:	f7fc f883 	bl	8006e84 <memp_malloc>
  if (timeout == NULL) {
 800ad7e:	b938      	cbnz	r0, 800ad90 <sys_timeout_abs+0x20>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800ad80:	4b10      	ldr	r3, [pc, #64]	; (800adc4 <sys_timeout_abs+0x54>)
 800ad82:	22be      	movs	r2, #190	; 0xbe
 800ad84:	4910      	ldr	r1, [pc, #64]	; (800adc8 <sys_timeout_abs+0x58>)
 800ad86:	4811      	ldr	r0, [pc, #68]	; (800adcc <sys_timeout_abs+0x5c>)
        t->next = timeout;
        break;
      }
    }
  }
}
 800ad88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800ad8c:	f001 b9da 	b.w	800c144 <iprintf>
  timeout->next = NULL;
 800ad90:	2300      	movs	r3, #0
  if (next_timeout == NULL) {
 800ad92:	4a0f      	ldr	r2, [pc, #60]	; (800add0 <sys_timeout_abs+0x60>)
  timeout->h = handler;
 800ad94:	6086      	str	r6, [r0, #8]
  timeout->next = NULL;
 800ad96:	6003      	str	r3, [r0, #0]
  if (next_timeout == NULL) {
 800ad98:	6813      	ldr	r3, [r2, #0]
  timeout->arg = arg;
 800ad9a:	60c5      	str	r5, [r0, #12]
  timeout->time = abs_time;
 800ad9c:	6044      	str	r4, [r0, #4]
  if (next_timeout == NULL) {
 800ad9e:	b90b      	cbnz	r3, 800ada4 <sys_timeout_abs+0x34>
    next_timeout = timeout;
 800ada0:	6010      	str	r0, [r2, #0]
 800ada2:	bd70      	pop	{r4, r5, r6, pc}
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800ada4:	6859      	ldr	r1, [r3, #4]
 800ada6:	1a61      	subs	r1, r4, r1
 800ada8:	2900      	cmp	r1, #0
 800adaa:	da02      	bge.n	800adb2 <sys_timeout_abs+0x42>
    timeout->next = next_timeout;
 800adac:	6003      	str	r3, [r0, #0]
 800adae:	e7f7      	b.n	800ada0 <sys_timeout_abs+0x30>
 800adb0:	4613      	mov	r3, r2
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800adb2:	681a      	ldr	r2, [r3, #0]
 800adb4:	b11a      	cbz	r2, 800adbe <sys_timeout_abs+0x4e>
 800adb6:	6851      	ldr	r1, [r2, #4]
 800adb8:	1a61      	subs	r1, r4, r1
 800adba:	2900      	cmp	r1, #0
 800adbc:	daf8      	bge.n	800adb0 <sys_timeout_abs+0x40>
        timeout->next = t->next;
 800adbe:	6002      	str	r2, [r0, #0]
        t->next = timeout;
 800adc0:	6018      	str	r0, [r3, #0]
        break;
 800adc2:	bd70      	pop	{r4, r5, r6, pc}
 800adc4:	0801003e 	.word	0x0801003e
 800adc8:	08010072 	.word	0x08010072
 800adcc:	0800d104 	.word	0x0800d104
 800add0:	20006bbc 	.word	0x20006bbc

0800add4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800add4:	b538      	push	{r3, r4, r5, lr}
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800add6:	6843      	ldr	r3, [r0, #4]
{
 800add8:	4604      	mov	r4, r0
  cyclic->handler();
 800adda:	4798      	blx	r3

  now = sys_now();
 800addc:	f000 fea2 	bl	800bb24 <sys_now>
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800ade0:	4b07      	ldr	r3, [pc, #28]	; (800ae00 <lwip_cyclic_timer+0x2c>)
 800ade2:	6825      	ldr	r5, [r4, #0]
 800ade4:	681b      	ldr	r3, [r3, #0]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800ade6:	4907      	ldr	r1, [pc, #28]	; (800ae04 <lwip_cyclic_timer+0x30>)
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800ade8:	442b      	add	r3, r5
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800adea:	1a1a      	subs	r2, r3, r0
 800adec:	2a00      	cmp	r2, #0
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800adee:	4622      	mov	r2, r4
 800adf0:	bfb4      	ite	lt
 800adf2:	1940      	addlt	r0, r0, r5
  } else {
    /* correct cyclic interval with handler execution delay and sys_check_timeouts jitter */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800adf4:	4618      	movge	r0, r3
#endif
  }
}
 800adf6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800adfa:	f7ff bfb9 	b.w	800ad70 <sys_timeout_abs>
 800adfe:	bf00      	nop
 800ae00:	20006bb8 	.word	0x20006bb8
 800ae04:	0800add5 	.word	0x0800add5

0800ae08 <sys_timeout>:
{
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800ae08:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
{
 800ae0c:	b570      	push	{r4, r5, r6, lr}
 800ae0e:	4604      	mov	r4, r0
 800ae10:	460d      	mov	r5, r1
 800ae12:	4616      	mov	r6, r2
  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800ae14:	d306      	bcc.n	800ae24 <sys_timeout+0x1c>
 800ae16:	4b08      	ldr	r3, [pc, #32]	; (800ae38 <sys_timeout+0x30>)
 800ae18:	f240 1229 	movw	r2, #297	; 0x129
 800ae1c:	4907      	ldr	r1, [pc, #28]	; (800ae3c <sys_timeout+0x34>)
 800ae1e:	4808      	ldr	r0, [pc, #32]	; (800ae40 <sys_timeout+0x38>)
 800ae20:	f001 f990 	bl	800c144 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800ae24:	f000 fe7e 	bl	800bb24 <sys_now>

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800ae28:	4632      	mov	r2, r6
 800ae2a:	4629      	mov	r1, r5
 800ae2c:	4420      	add	r0, r4
#endif
}
 800ae2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 800ae32:	f7ff bf9d 	b.w	800ad70 <sys_timeout_abs>
 800ae36:	bf00      	nop
 800ae38:	0801003e 	.word	0x0801003e
 800ae3c:	08010008 	.word	0x08010008
 800ae40:	0800d104 	.word	0x0800d104

0800ae44 <tcp_timer_needed>:
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800ae44:	4b08      	ldr	r3, [pc, #32]	; (800ae68 <tcp_timer_needed+0x24>)
 800ae46:	681a      	ldr	r2, [r3, #0]
 800ae48:	b962      	cbnz	r2, 800ae64 <tcp_timer_needed+0x20>
 800ae4a:	4a08      	ldr	r2, [pc, #32]	; (800ae6c <tcp_timer_needed+0x28>)
 800ae4c:	6812      	ldr	r2, [r2, #0]
 800ae4e:	b912      	cbnz	r2, 800ae56 <tcp_timer_needed+0x12>
 800ae50:	4a07      	ldr	r2, [pc, #28]	; (800ae70 <tcp_timer_needed+0x2c>)
 800ae52:	6812      	ldr	r2, [r2, #0]
 800ae54:	b132      	cbz	r2, 800ae64 <tcp_timer_needed+0x20>
    tcpip_tcp_timer_active = 1;
 800ae56:	2201      	movs	r2, #1
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800ae58:	4906      	ldr	r1, [pc, #24]	; (800ae74 <tcp_timer_needed+0x30>)
 800ae5a:	20fa      	movs	r0, #250	; 0xfa
    tcpip_tcp_timer_active = 1;
 800ae5c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800ae5e:	2200      	movs	r2, #0
 800ae60:	f7ff bfd2 	b.w	800ae08 <sys_timeout>
 800ae64:	4770      	bx	lr
 800ae66:	bf00      	nop
 800ae68:	20006bc0 	.word	0x20006bc0
 800ae6c:	2000d38c 	.word	0x2000d38c
 800ae70:	2000d39c 	.word	0x2000d39c
 800ae74:	0800ae79 	.word	0x0800ae79

0800ae78 <tcpip_tcp_timer>:
{
 800ae78:	b508      	push	{r3, lr}
  tcp_tmr();
 800ae7a:	f7fd fb47 	bl	800850c <tcp_tmr>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800ae7e:	4b08      	ldr	r3, [pc, #32]	; (800aea0 <tcpip_tcp_timer+0x28>)
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	b913      	cbnz	r3, 800ae8a <tcpip_tcp_timer+0x12>
 800ae84:	4b07      	ldr	r3, [pc, #28]	; (800aea4 <tcpip_tcp_timer+0x2c>)
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	b133      	cbz	r3, 800ae98 <tcpip_tcp_timer+0x20>
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800ae8a:	2200      	movs	r2, #0
 800ae8c:	4906      	ldr	r1, [pc, #24]	; (800aea8 <tcpip_tcp_timer+0x30>)
 800ae8e:	20fa      	movs	r0, #250	; 0xfa
}
 800ae90:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800ae94:	f7ff bfb8 	b.w	800ae08 <sys_timeout>
    tcpip_tcp_timer_active = 0;
 800ae98:	4a04      	ldr	r2, [pc, #16]	; (800aeac <tcpip_tcp_timer+0x34>)
 800ae9a:	6013      	str	r3, [r2, #0]
 800ae9c:	bd08      	pop	{r3, pc}
 800ae9e:	bf00      	nop
 800aea0:	2000d38c 	.word	0x2000d38c
 800aea4:	2000d39c 	.word	0x2000d39c
 800aea8:	0800ae79 	.word	0x0800ae79
 800aeac:	20006bc0 	.word	0x20006bc0

0800aeb0 <sys_timeouts_init>:
{
 800aeb0:	b538      	push	{r3, r4, r5, lr}
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800aeb2:	4d10      	ldr	r5, [pc, #64]	; (800aef4 <sys_timeouts_init+0x44>)
 800aeb4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800aeb8:	4c0f      	ldr	r4, [pc, #60]	; (800aef8 <sys_timeouts_init+0x48>)
 800aeba:	f105 0208 	add.w	r2, r5, #8
 800aebe:	4621      	mov	r1, r4
 800aec0:	f7ff ffa2 	bl	800ae08 <sys_timeout>
 800aec4:	f105 0210 	add.w	r2, r5, #16
 800aec8:	4621      	mov	r1, r4
 800aeca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800aece:	f7ff ff9b 	bl	800ae08 <sys_timeout>
 800aed2:	f105 0218 	add.w	r2, r5, #24
 800aed6:	4621      	mov	r1, r4
 800aed8:	f64e 2060 	movw	r0, #60000	; 0xea60
 800aedc:	f7ff ff94 	bl	800ae08 <sys_timeout>
 800aee0:	f105 0220 	add.w	r2, r5, #32
 800aee4:	4621      	mov	r1, r4
 800aee6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
}
 800aeea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800aeee:	f7ff bf8b 	b.w	800ae08 <sys_timeout>
 800aef2:	bf00      	nop
 800aef4:	0800ffe0 	.word	0x0800ffe0
 800aef8:	0800add5 	.word	0x0800add5

0800aefc <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800aefc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800af00:	f000 fe10 	bl	800bb24 <sys_now>
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 800af04:	4d0c      	ldr	r5, [pc, #48]	; (800af38 <sys_check_timeouts+0x3c>)
  now = sys_now();
 800af06:	4607      	mov	r7, r0

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
    handler = tmptimeout->h;
    arg = tmptimeout->arg;
    current_timeout_due_time = tmptimeout->time;
 800af08:	f8df 8030 	ldr.w	r8, [pc, #48]	; 800af3c <sys_check_timeouts+0x40>
    tmptimeout = next_timeout;
 800af0c:	6829      	ldr	r1, [r5, #0]
    if (tmptimeout == NULL) {
 800af0e:	b189      	cbz	r1, 800af34 <sys_check_timeouts+0x38>
    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800af10:	684b      	ldr	r3, [r1, #4]
 800af12:	1afa      	subs	r2, r7, r3
 800af14:	2a00      	cmp	r2, #0
 800af16:	db0d      	blt.n	800af34 <sys_check_timeouts+0x38>
    next_timeout = tmptimeout->next;
 800af18:	680a      	ldr	r2, [r1, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800af1a:	200a      	movs	r0, #10
    handler = tmptimeout->h;
 800af1c:	688c      	ldr	r4, [r1, #8]
    next_timeout = tmptimeout->next;
 800af1e:	602a      	str	r2, [r5, #0]
    arg = tmptimeout->arg;
 800af20:	68ce      	ldr	r6, [r1, #12]
    current_timeout_due_time = tmptimeout->time;
 800af22:	f8c8 3000 	str.w	r3, [r8]
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800af26:	f7fb ffc9 	bl	8006ebc <memp_free>
    if (handler != NULL) {
 800af2a:	2c00      	cmp	r4, #0
 800af2c:	d0ee      	beq.n	800af0c <sys_check_timeouts+0x10>
      handler(arg);
 800af2e:	4630      	mov	r0, r6
 800af30:	47a0      	blx	r4
 800af32:	e7eb      	b.n	800af0c <sys_check_timeouts+0x10>
 800af34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af38:	20006bbc 	.word	0x20006bbc
 800af3c:	20006bb8 	.word	0x20006bb8

0800af40 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 800af40:	b510      	push	{r4, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 800af42:	4c07      	ldr	r4, [pc, #28]	; (800af60 <sys_timeouts_sleeptime+0x20>)
 800af44:	6823      	ldr	r3, [r4, #0]
 800af46:	b13b      	cbz	r3, 800af58 <sys_timeouts_sleeptime+0x18>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
  }
  now = sys_now();
 800af48:	f000 fdec 	bl	800bb24 <sys_now>
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 800af4c:	6823      	ldr	r3, [r4, #0]
 800af4e:	685b      	ldr	r3, [r3, #4]
 800af50:	1a18      	subs	r0, r3, r0
    return 0;
 800af52:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800af56:	bd10      	pop	{r4, pc}
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 800af58:	f04f 30ff 	mov.w	r0, #4294967295
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
    return ret;
  }
}
 800af5c:	bd10      	pop	{r4, pc}
 800af5e:	bf00      	nop
 800af60:	20006bbc 	.word	0x20006bbc

0800af64 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800af64:	b508      	push	{r3, lr}
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800af66:	f001 f905 	bl	800c174 <rand>
 800af6a:	ea6f 4080 	mvn.w	r0, r0, lsl #18
 800af6e:	4b02      	ldr	r3, [pc, #8]	; (800af78 <udp_init+0x14>)
 800af70:	ea6f 4090 	mvn.w	r0, r0, lsr #18
 800af74:	8018      	strh	r0, [r3, #0]
 800af76:	bd08      	pop	{r3, pc}
 800af78:	20000012 	.word	0x20000012

0800af7c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800af7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af80:	4688      	mov	r8, r1
 800af82:	b085      	sub	sp, #20

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800af84:	4607      	mov	r7, r0
 800af86:	b928      	cbnz	r0, 800af94 <udp_input+0x18>
 800af88:	4b5d      	ldr	r3, [pc, #372]	; (800b100 <udp_input+0x184>)
 800af8a:	22cf      	movs	r2, #207	; 0xcf
 800af8c:	495d      	ldr	r1, [pc, #372]	; (800b104 <udp_input+0x188>)
 800af8e:	485e      	ldr	r0, [pc, #376]	; (800b108 <udp_input+0x18c>)
 800af90:	f001 f8d8 	bl	800c144 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800af94:	f1b8 0f00 	cmp.w	r8, #0
 800af98:	d105      	bne.n	800afa6 <udp_input+0x2a>
 800af9a:	4b59      	ldr	r3, [pc, #356]	; (800b100 <udp_input+0x184>)
 800af9c:	22d0      	movs	r2, #208	; 0xd0
 800af9e:	495b      	ldr	r1, [pc, #364]	; (800b10c <udp_input+0x190>)
 800afa0:	4859      	ldr	r0, [pc, #356]	; (800b108 <udp_input+0x18c>)
 800afa2:	f001 f8cf 	bl	800c144 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800afa6:	897b      	ldrh	r3, [r7, #10]
 800afa8:	2b07      	cmp	r3, #7
 800afaa:	d805      	bhi.n	800afb8 <udp_input+0x3c>
    if (pbuf_remove_header(p, UDP_HLEN)) {
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800afac:	4638      	mov	r0, r7
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800afae:	b005      	add	sp, #20
 800afb0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pbuf_free(p);
 800afb4:	f7fc b9b4 	b.w	8007320 <pbuf_free>
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800afb8:	4e55      	ldr	r6, [pc, #340]	; (800b110 <udp_input+0x194>)
  uncon_pcb = NULL;
 800afba:	2500      	movs	r5, #0
  udphdr = (struct udp_hdr *)p->payload;
 800afbc:	687c      	ldr	r4, [r7, #4]
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800afbe:	6831      	ldr	r1, [r6, #0]
  prev = NULL;
 800afc0:	46ab      	mov	fp, r5
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800afc2:	6970      	ldr	r0, [r6, #20]
 800afc4:	f7fb f8b1 	bl	800612a <ip4_addr_isbroadcast_u32>
 800afc8:	4682      	mov	sl, r0
  src = lwip_ntohs(udphdr->src);
 800afca:	8820      	ldrh	r0, [r4, #0]
 800afcc:	f7f9 f966 	bl	800429c <lwip_htons>
 800afd0:	9002      	str	r0, [sp, #8]
  dest = lwip_ntohs(udphdr->dest);
 800afd2:	8860      	ldrh	r0, [r4, #2]
 800afd4:	f7f9 f962 	bl	800429c <lwip_htons>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800afd8:	4b4e      	ldr	r3, [pc, #312]	; (800b114 <udp_input+0x198>)
  dest = lwip_ntohs(udphdr->dest);
 800afda:	9003      	str	r0, [sp, #12]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800afdc:	681c      	ldr	r4, [r3, #0]
 800afde:	4699      	mov	r9, r3
 800afe0:	b93c      	cbnz	r4, 800aff2 <udp_input+0x76>
  if (pcb != NULL) {
 800afe2:	2d00      	cmp	r5, #0
 800afe4:	d144      	bne.n	800b070 <udp_input+0xf4>
  if (for_us) {
 800afe6:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800afea:	6973      	ldr	r3, [r6, #20]
 800afec:	429a      	cmp	r2, r3
 800afee:	d1dd      	bne.n	800afac <udp_input+0x30>
 800aff0:	e03e      	b.n	800b070 <udp_input+0xf4>
    if ((pcb->local_port == dest) &&
 800aff2:	8a63      	ldrh	r3, [r4, #18]
 800aff4:	9a03      	ldr	r2, [sp, #12]
 800aff6:	4293      	cmp	r3, r2
 800aff8:	d14c      	bne.n	800b094 <udp_input+0x118>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800affa:	f1b8 0f00 	cmp.w	r8, #0
 800affe:	d105      	bne.n	800b00c <udp_input+0x90>
 800b000:	4b3f      	ldr	r3, [pc, #252]	; (800b100 <udp_input+0x184>)
 800b002:	2288      	movs	r2, #136	; 0x88
 800b004:	4944      	ldr	r1, [pc, #272]	; (800b118 <udp_input+0x19c>)
 800b006:	4840      	ldr	r0, [pc, #256]	; (800b108 <udp_input+0x18c>)
 800b008:	f001 f89c 	bl	800c144 <iprintf>
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b00c:	7a22      	ldrb	r2, [r4, #8]
 800b00e:	b132      	cbz	r2, 800b01e <udp_input+0xa2>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b010:	6873      	ldr	r3, [r6, #4]
 800b012:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b016:	3301      	adds	r3, #1
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b018:	b2db      	uxtb	r3, r3
 800b01a:	429a      	cmp	r2, r3
 800b01c:	d13a      	bne.n	800b094 <udp_input+0x118>
 800b01e:	6823      	ldr	r3, [r4, #0]
    if (broadcast != 0) {
 800b020:	f1ba 0f00 	cmp.w	sl, #0
 800b024:	d031      	beq.n	800b08a <udp_input+0x10e>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800b026:	b13b      	cbz	r3, 800b038 <udp_input+0xbc>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800b028:	6972      	ldr	r2, [r6, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800b02a:	1c51      	adds	r1, r2, #1
 800b02c:	d004      	beq.n	800b038 <udp_input+0xbc>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800b02e:	405a      	eors	r2, r3
 800b030:	f8d8 1008 	ldr.w	r1, [r8, #8]
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800b034:	420a      	tst	r2, r1
 800b036:	d12d      	bne.n	800b094 <udp_input+0x118>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800b038:	7c22      	ldrb	r2, [r4, #16]
 800b03a:	0752      	lsls	r2, r2, #29
 800b03c:	d40e      	bmi.n	800b05c <udp_input+0xe0>
        if (uncon_pcb == NULL) {
 800b03e:	b365      	cbz	r5, 800b09a <udp_input+0x11e>
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800b040:	f1ba 0f00 	cmp.w	sl, #0
 800b044:	d00a      	beq.n	800b05c <udp_input+0xe0>
 800b046:	6972      	ldr	r2, [r6, #20]
 800b048:	3201      	adds	r2, #1
 800b04a:	d107      	bne.n	800b05c <udp_input+0xe0>
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800b04c:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800b050:	6829      	ldr	r1, [r5, #0]
 800b052:	4291      	cmp	r1, r2
 800b054:	d002      	beq.n	800b05c <udp_input+0xe0>
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800b056:	429a      	cmp	r2, r3
 800b058:	bf08      	it	eq
 800b05a:	4625      	moveq	r5, r4
      if ((pcb->remote_port == src) &&
 800b05c:	8aa3      	ldrh	r3, [r4, #20]
 800b05e:	9a02      	ldr	r2, [sp, #8]
 800b060:	4293      	cmp	r3, r2
 800b062:	d117      	bne.n	800b094 <udp_input+0x118>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800b064:	6863      	ldr	r3, [r4, #4]
      if ((pcb->remote_port == src) &&
 800b066:	b9d3      	cbnz	r3, 800b09e <udp_input+0x122>
        if (prev != NULL) {
 800b068:	f1bb 0f00 	cmp.w	fp, #0
 800b06c:	d11b      	bne.n	800b0a6 <udp_input+0x12a>
 800b06e:	4625      	mov	r5, r4
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800b070:	2108      	movs	r1, #8
 800b072:	4638      	mov	r0, r7
 800b074:	f7fc f920 	bl	80072b8 <pbuf_remove_header>
 800b078:	b1f0      	cbz	r0, 800b0b8 <udp_input+0x13c>
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800b07a:	4b21      	ldr	r3, [pc, #132]	; (800b100 <udp_input+0x184>)
 800b07c:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800b080:	4926      	ldr	r1, [pc, #152]	; (800b11c <udp_input+0x1a0>)
 800b082:	4821      	ldr	r0, [pc, #132]	; (800b108 <udp_input+0x18c>)
 800b084:	f001 f85e 	bl	800c144 <iprintf>
 800b088:	e790      	b.n	800afac <udp_input+0x30>
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d0d4      	beq.n	800b038 <udp_input+0xbc>
 800b08e:	6972      	ldr	r2, [r6, #20]
 800b090:	4293      	cmp	r3, r2
 800b092:	d0d1      	beq.n	800b038 <udp_input+0xbc>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b094:	46a3      	mov	fp, r4
 800b096:	68e4      	ldr	r4, [r4, #12]
 800b098:	e7a2      	b.n	800afe0 <udp_input+0x64>
 800b09a:	4625      	mov	r5, r4
 800b09c:	e7de      	b.n	800b05c <udp_input+0xe0>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800b09e:	6932      	ldr	r2, [r6, #16]
 800b0a0:	4293      	cmp	r3, r2
 800b0a2:	d1f7      	bne.n	800b094 <udp_input+0x118>
 800b0a4:	e7e0      	b.n	800b068 <udp_input+0xec>
          prev->next = pcb->next;
 800b0a6:	68e3      	ldr	r3, [r4, #12]
 800b0a8:	f8cb 300c 	str.w	r3, [fp, #12]
          pcb->next = udp_pcbs;
 800b0ac:	f8d9 3000 	ldr.w	r3, [r9]
          udp_pcbs = pcb;
 800b0b0:	f8c9 4000 	str.w	r4, [r9]
          pcb->next = udp_pcbs;
 800b0b4:	60e3      	str	r3, [r4, #12]
 800b0b6:	e7da      	b.n	800b06e <udp_input+0xf2>
    if (pcb != NULL) {
 800b0b8:	b16d      	cbz	r5, 800b0d6 <udp_input+0x15a>
      if (pcb->recv != NULL) {
 800b0ba:	69ac      	ldr	r4, [r5, #24]
 800b0bc:	2c00      	cmp	r4, #0
 800b0be:	f43f af75 	beq.w	800afac <udp_input+0x30>
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800b0c2:	9b02      	ldr	r3, [sp, #8]
 800b0c4:	463a      	mov	r2, r7
 800b0c6:	4629      	mov	r1, r5
 800b0c8:	9300      	str	r3, [sp, #0]
 800b0ca:	4b15      	ldr	r3, [pc, #84]	; (800b120 <udp_input+0x1a4>)
 800b0cc:	69e8      	ldr	r0, [r5, #28]
 800b0ce:	47a0      	blx	r4
}
 800b0d0:	b005      	add	sp, #20
 800b0d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800b0d6:	f1ba 0f00 	cmp.w	sl, #0
 800b0da:	f47f af67 	bne.w	800afac <udp_input+0x30>
 800b0de:	6973      	ldr	r3, [r6, #20]
 800b0e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b0e4:	2be0      	cmp	r3, #224	; 0xe0
 800b0e6:	f43f af61 	beq.w	800afac <udp_input+0x30>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800b0ea:	89b1      	ldrh	r1, [r6, #12]
 800b0ec:	4638      	mov	r0, r7
 800b0ee:	3108      	adds	r1, #8
 800b0f0:	b209      	sxth	r1, r1
 800b0f2:	f7fc f90d 	bl	8007310 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800b0f6:	2103      	movs	r1, #3
 800b0f8:	4638      	mov	r0, r7
 800b0fa:	f7fa fe73 	bl	8005de4 <icmp_dest_unreach>
 800b0fe:	e755      	b.n	800afac <udp_input+0x30>
 800b100:	080100fa 	.word	0x080100fa
 800b104:	08010129 	.word	0x08010129
 800b108:	0800d104 	.word	0x0800d104
 800b10c:	08010141 	.word	0x08010141
 800b110:	20006e30 	.word	0x20006e30
 800b114:	2000d3a4 	.word	0x2000d3a4
 800b118:	0801015a 	.word	0x0801015a
 800b11c:	0801017f 	.word	0x0801017f
 800b120:	20006e40 	.word	0x20006e40

0800b124 <udp_bind>:
  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
    ipaddr = IP4_ADDR_ANY;
 800b124:	4b2c      	ldr	r3, [pc, #176]	; (800b1d8 <udp_bind+0xb4>)
{
 800b126:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ipaddr = IP4_ADDR_ANY;
 800b12a:	2900      	cmp	r1, #0
 800b12c:	bf08      	it	eq
 800b12e:	4619      	moveq	r1, r3
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800b130:	b950      	cbnz	r0, 800b148 <udp_bind+0x24>
 800b132:	4b2a      	ldr	r3, [pc, #168]	; (800b1dc <udp_bind+0xb8>)
 800b134:	f240 32b7 	movw	r2, #951	; 0x3b7
 800b138:	4929      	ldr	r1, [pc, #164]	; (800b1e0 <udp_bind+0xbc>)
 800b13a:	482a      	ldr	r0, [pc, #168]	; (800b1e4 <udp_bind+0xc0>)
 800b13c:	f001 f802 	bl	800c144 <iprintf>
 800b140:	f06f 000f 	mvn.w	r0, #15
 800b144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b148:	4e27      	ldr	r6, [pc, #156]	; (800b1e8 <udp_bind+0xc4>)
 800b14a:	6837      	ldr	r7, [r6, #0]
 800b14c:	463d      	mov	r5, r7
 800b14e:	b99d      	cbnz	r5, 800b178 <udp_bind+0x54>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800b150:	b1c2      	cbz	r2, 800b184 <udp_bind+0x60>
 800b152:	463b      	mov	r3, r7
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b154:	b33b      	cbz	r3, 800b1a6 <udp_bind+0x82>
      if (pcb != ipcb) {
 800b156:	4283      	cmp	r3, r0
 800b158:	d00c      	beq.n	800b174 <udp_bind+0x50>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800b15a:	8a5c      	ldrh	r4, [r3, #18]
 800b15c:	4294      	cmp	r4, r2
 800b15e:	d109      	bne.n	800b174 <udp_bind+0x50>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800b160:	681c      	ldr	r4, [r3, #0]
 800b162:	f8d1 e000 	ldr.w	lr, [r1]
          if ((ipcb->local_port == port) &&
 800b166:	4574      	cmp	r4, lr
 800b168:	d02f      	beq.n	800b1ca <udp_bind+0xa6>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800b16a:	f1be 0f00 	cmp.w	lr, #0
 800b16e:	d02c      	beq.n	800b1ca <udp_bind+0xa6>
 800b170:	b35b      	cbz	r3, 800b1ca <udp_bind+0xa6>
              ip_addr_isany(&ipcb->local_ip))) {
 800b172:	b354      	cbz	r4, 800b1ca <udp_bind+0xa6>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b174:	68db      	ldr	r3, [r3, #12]
 800b176:	e7ed      	b.n	800b154 <udp_bind+0x30>
    if (pcb == ipcb) {
 800b178:	4285      	cmp	r5, r0
 800b17a:	d001      	beq.n	800b180 <udp_bind+0x5c>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b17c:	68ed      	ldr	r5, [r5, #12]
 800b17e:	e7e6      	b.n	800b14e <udp_bind+0x2a>
      rebind = 1;
 800b180:	2501      	movs	r5, #1
 800b182:	e7e5      	b.n	800b150 <udp_bind+0x2c>
 800b184:	4b19      	ldr	r3, [pc, #100]	; (800b1ec <udp_bind+0xc8>)
  if (port == 0) {
 800b186:	f44f 4480 	mov.w	r4, #16384	; 0x4000
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800b18a:	f64f 7cff 	movw	ip, #65535	; 0xffff
 800b18e:	881a      	ldrh	r2, [r3, #0]
 800b190:	4562      	cmp	r2, ip
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b192:	46be      	mov	lr, r7
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800b194:	bf16      	itet	ne
 800b196:	3201      	addne	r2, #1
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800b198:	f44f 4240 	moveq.w	r2, #49152	; 0xc000
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800b19c:	b292      	uxthne	r2, r2
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b19e:	f1be 0f00 	cmp.w	lr, #0
 800b1a2:	d109      	bne.n	800b1b8 <udp_bind+0x94>
 800b1a4:	801a      	strh	r2, [r3, #0]
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800b1a6:	680b      	ldr	r3, [r1, #0]

  pcb->local_port = port;
 800b1a8:	8242      	strh	r2, [r0, #18]
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800b1aa:	6003      	str	r3, [r0, #0]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800b1ac:	b90d      	cbnz	r5, 800b1b2 <udp_bind+0x8e>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800b1ae:	60c7      	str	r7, [r0, #12]
    udp_pcbs = pcb;
 800b1b0:	6030      	str	r0, [r6, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800b1b2:	2000      	movs	r0, #0
}
 800b1b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (pcb->local_port == udp_port) {
 800b1b8:	f8be 8012 	ldrh.w	r8, [lr, #18]
 800b1bc:	4590      	cmp	r8, r2
 800b1be:	d108      	bne.n	800b1d2 <udp_bind+0xae>
 800b1c0:	3c01      	subs	r4, #1
 800b1c2:	b2a4      	uxth	r4, r4
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800b1c4:	2c00      	cmp	r4, #0
 800b1c6:	d1e3      	bne.n	800b190 <udp_bind+0x6c>
 800b1c8:	801a      	strh	r2, [r3, #0]
      return ERR_USE;
 800b1ca:	f06f 0007 	mvn.w	r0, #7
 800b1ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b1d2:	f8de e00c 	ldr.w	lr, [lr, #12]
 800b1d6:	e7e2      	b.n	800b19e <udp_bind+0x7a>
 800b1d8:	0800e650 	.word	0x0800e650
 800b1dc:	080100fa 	.word	0x080100fa
 800b1e0:	080100af 	.word	0x080100af
 800b1e4:	0800d104 	.word	0x0800d104
 800b1e8:	2000d3a4 	.word	0x2000d3a4
 800b1ec:	20000012 	.word	0x20000012

0800b1f0 <udp_sendto_if_src>:
{
 800b1f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1f4:	b085      	sub	sp, #20
 800b1f6:	460e      	mov	r6, r1
 800b1f8:	4691      	mov	r9, r2
 800b1fa:	469b      	mov	fp, r3
 800b1fc:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800b200:	4607      	mov	r7, r0
{
 800b202:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800b206:	b960      	cbnz	r0, 800b222 <udp_sendto_if_src+0x32>
 800b208:	4b3e      	ldr	r3, [pc, #248]	; (800b304 <udp_sendto_if_src+0x114>)
 800b20a:	f240 22d1 	movw	r2, #721	; 0x2d1
 800b20e:	493e      	ldr	r1, [pc, #248]	; (800b308 <udp_sendto_if_src+0x118>)
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800b210:	f06f 040f 	mvn.w	r4, #15
 800b214:	483d      	ldr	r0, [pc, #244]	; (800b30c <udp_sendto_if_src+0x11c>)
 800b216:	f000 ff95 	bl	800c144 <iprintf>
}
 800b21a:	4620      	mov	r0, r4
 800b21c:	b005      	add	sp, #20
 800b21e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800b222:	b921      	cbnz	r1, 800b22e <udp_sendto_if_src+0x3e>
 800b224:	4b37      	ldr	r3, [pc, #220]	; (800b304 <udp_sendto_if_src+0x114>)
 800b226:	f240 22d2 	movw	r2, #722	; 0x2d2
 800b22a:	4939      	ldr	r1, [pc, #228]	; (800b310 <udp_sendto_if_src+0x120>)
 800b22c:	e7f0      	b.n	800b210 <udp_sendto_if_src+0x20>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800b22e:	b922      	cbnz	r2, 800b23a <udp_sendto_if_src+0x4a>
 800b230:	4b34      	ldr	r3, [pc, #208]	; (800b304 <udp_sendto_if_src+0x114>)
 800b232:	f240 22d3 	movw	r2, #723	; 0x2d3
 800b236:	4937      	ldr	r1, [pc, #220]	; (800b314 <udp_sendto_if_src+0x124>)
 800b238:	e7ea      	b.n	800b210 <udp_sendto_if_src+0x20>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800b23a:	f1b8 0f00 	cmp.w	r8, #0
 800b23e:	d104      	bne.n	800b24a <udp_sendto_if_src+0x5a>
 800b240:	4b30      	ldr	r3, [pc, #192]	; (800b304 <udp_sendto_if_src+0x114>)
 800b242:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800b246:	4934      	ldr	r1, [pc, #208]	; (800b318 <udp_sendto_if_src+0x128>)
 800b248:	e7e2      	b.n	800b210 <udp_sendto_if_src+0x20>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800b24a:	f1ba 0f00 	cmp.w	sl, #0
 800b24e:	d104      	bne.n	800b25a <udp_sendto_if_src+0x6a>
 800b250:	4b2c      	ldr	r3, [pc, #176]	; (800b304 <udp_sendto_if_src+0x114>)
 800b252:	f240 22d5 	movw	r2, #725	; 0x2d5
 800b256:	4931      	ldr	r1, [pc, #196]	; (800b31c <udp_sendto_if_src+0x12c>)
 800b258:	e7da      	b.n	800b210 <udp_sendto_if_src+0x20>
  if (pcb->local_port == 0) {
 800b25a:	8a42      	ldrh	r2, [r0, #18]
 800b25c:	b142      	cbz	r2, 800b270 <udp_sendto_if_src+0x80>
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800b25e:	8932      	ldrh	r2, [r6, #8]
 800b260:	f102 0308 	add.w	r3, r2, #8
 800b264:	b29b      	uxth	r3, r3
 800b266:	429a      	cmp	r2, r3
 800b268:	d909      	bls.n	800b27e <udp_sendto_if_src+0x8e>
    return ERR_MEM;
 800b26a:	f04f 34ff 	mov.w	r4, #4294967295
 800b26e:	e7d4      	b.n	800b21a <udp_sendto_if_src+0x2a>
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800b270:	4601      	mov	r1, r0
 800b272:	f7ff ff57 	bl	800b124 <udp_bind>
    if (err != ERR_OK) {
 800b276:	4604      	mov	r4, r0
 800b278:	2800      	cmp	r0, #0
 800b27a:	d0f0      	beq.n	800b25e <udp_sendto_if_src+0x6e>
 800b27c:	e7cd      	b.n	800b21a <udp_sendto_if_src+0x2a>
  if (pbuf_add_header(p, UDP_HLEN)) {
 800b27e:	2108      	movs	r1, #8
 800b280:	4630      	mov	r0, r6
 800b282:	f7fc f816 	bl	80072b2 <pbuf_add_header>
 800b286:	2800      	cmp	r0, #0
 800b288:	d03a      	beq.n	800b300 <udp_sendto_if_src+0x110>
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800b28a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b28e:	2108      	movs	r1, #8
 800b290:	2022      	movs	r0, #34	; 0x22
 800b292:	f7fc f8ad 	bl	80073f0 <pbuf_alloc>
    if (q == NULL) {
 800b296:	4605      	mov	r5, r0
 800b298:	2800      	cmp	r0, #0
 800b29a:	d0e6      	beq.n	800b26a <udp_sendto_if_src+0x7a>
    if (p->tot_len != 0) {
 800b29c:	8933      	ldrh	r3, [r6, #8]
 800b29e:	b113      	cbz	r3, 800b2a6 <udp_sendto_if_src+0xb6>
      pbuf_chain(q, p);
 800b2a0:	4631      	mov	r1, r6
 800b2a2:	f7fc f9dd 	bl	8007660 <pbuf_chain>
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800b2a6:	896b      	ldrh	r3, [r5, #10]
 800b2a8:	2b07      	cmp	r3, #7
 800b2aa:	d806      	bhi.n	800b2ba <udp_sendto_if_src+0xca>
 800b2ac:	4b15      	ldr	r3, [pc, #84]	; (800b304 <udp_sendto_if_src+0x114>)
 800b2ae:	f240 320e 	movw	r2, #782	; 0x30e
 800b2b2:	491b      	ldr	r1, [pc, #108]	; (800b320 <udp_sendto_if_src+0x130>)
 800b2b4:	4815      	ldr	r0, [pc, #84]	; (800b30c <udp_sendto_if_src+0x11c>)
 800b2b6:	f000 ff45 	bl	800c144 <iprintf>
  udphdr = (struct udp_hdr *)q->payload;
 800b2ba:	686c      	ldr	r4, [r5, #4]
  udphdr->src = lwip_htons(pcb->local_port);
 800b2bc:	8a78      	ldrh	r0, [r7, #18]
 800b2be:	f7f8 ffed 	bl	800429c <lwip_htons>
 800b2c2:	8020      	strh	r0, [r4, #0]
  udphdr->dest = lwip_htons(dst_port);
 800b2c4:	4658      	mov	r0, fp
 800b2c6:	f7f8 ffe9 	bl	800429c <lwip_htons>
  udphdr->chksum = 0x0000;
 800b2ca:	2300      	movs	r3, #0
  udphdr->dest = lwip_htons(dst_port);
 800b2cc:	8060      	strh	r0, [r4, #2]
  udphdr->chksum = 0x0000;
 800b2ce:	71a3      	strb	r3, [r4, #6]
 800b2d0:	71e3      	strb	r3, [r4, #7]
    udphdr->len = lwip_htons(q->tot_len);
 800b2d2:	8928      	ldrh	r0, [r5, #8]
 800b2d4:	f7f8 ffe2 	bl	800429c <lwip_htons>
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800b2d8:	2211      	movs	r2, #17
    udphdr->len = lwip_htons(q->tot_len);
 800b2da:	80a0      	strh	r0, [r4, #4]
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800b2dc:	4641      	mov	r1, r8
 800b2de:	7afb      	ldrb	r3, [r7, #11]
 800b2e0:	4628      	mov	r0, r5
 800b2e2:	f8cd a008 	str.w	sl, [sp, #8]
 800b2e6:	9201      	str	r2, [sp, #4]
 800b2e8:	7aba      	ldrb	r2, [r7, #10]
 800b2ea:	9200      	str	r2, [sp, #0]
 800b2ec:	464a      	mov	r2, r9
 800b2ee:	f7fa fe91 	bl	8006014 <ip4_output_if_src>
  if (q != p) {
 800b2f2:	42b5      	cmp	r5, r6
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800b2f4:	4604      	mov	r4, r0
  if (q != p) {
 800b2f6:	d090      	beq.n	800b21a <udp_sendto_if_src+0x2a>
    pbuf_free(q);
 800b2f8:	4628      	mov	r0, r5
 800b2fa:	f7fc f811 	bl	8007320 <pbuf_free>
 800b2fe:	e78c      	b.n	800b21a <udp_sendto_if_src+0x2a>
 800b300:	4635      	mov	r5, r6
 800b302:	e7d0      	b.n	800b2a6 <udp_sendto_if_src+0xb6>
 800b304:	080100fa 	.word	0x080100fa
 800b308:	0801023a 	.word	0x0801023a
 800b30c:	0800d104 	.word	0x0800d104
 800b310:	08010259 	.word	0x08010259
 800b314:	08010279 	.word	0x08010279
 800b318:	0801029b 	.word	0x0801029b
 800b31c:	080102bd 	.word	0x080102bd
 800b320:	080102de 	.word	0x080102de

0800b324 <udp_sendto_if>:
{
 800b324:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b326:	9c06      	ldr	r4, [sp, #24]
  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800b328:	b950      	cbnz	r0, 800b340 <udp_sendto_if+0x1c>
 800b32a:	4b18      	ldr	r3, [pc, #96]	; (800b38c <udp_sendto_if+0x68>)
 800b32c:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b330:	4917      	ldr	r1, [pc, #92]	; (800b390 <udp_sendto_if+0x6c>)
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800b332:	4818      	ldr	r0, [pc, #96]	; (800b394 <udp_sendto_if+0x70>)
 800b334:	f000 ff06 	bl	800c144 <iprintf>
 800b338:	f06f 000f 	mvn.w	r0, #15
}
 800b33c:	b002      	add	sp, #8
 800b33e:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800b340:	b921      	cbnz	r1, 800b34c <udp_sendto_if+0x28>
 800b342:	4b12      	ldr	r3, [pc, #72]	; (800b38c <udp_sendto_if+0x68>)
 800b344:	f240 2281 	movw	r2, #641	; 0x281
 800b348:	4913      	ldr	r1, [pc, #76]	; (800b398 <udp_sendto_if+0x74>)
 800b34a:	e7f2      	b.n	800b332 <udp_sendto_if+0xe>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800b34c:	b922      	cbnz	r2, 800b358 <udp_sendto_if+0x34>
 800b34e:	4b0f      	ldr	r3, [pc, #60]	; (800b38c <udp_sendto_if+0x68>)
 800b350:	f240 2282 	movw	r2, #642	; 0x282
 800b354:	4911      	ldr	r1, [pc, #68]	; (800b39c <udp_sendto_if+0x78>)
 800b356:	e7ec      	b.n	800b332 <udp_sendto_if+0xe>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800b358:	b924      	cbnz	r4, 800b364 <udp_sendto_if+0x40>
 800b35a:	4b0c      	ldr	r3, [pc, #48]	; (800b38c <udp_sendto_if+0x68>)
 800b35c:	f240 2283 	movw	r2, #643	; 0x283
 800b360:	490f      	ldr	r1, [pc, #60]	; (800b3a0 <udp_sendto_if+0x7c>)
 800b362:	e7e6      	b.n	800b332 <udp_sendto_if+0xe>
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800b364:	6805      	ldr	r5, [r0, #0]
 800b366:	b11d      	cbz	r5, 800b370 <udp_sendto_if+0x4c>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800b368:	f005 06f0 	and.w	r6, r5, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800b36c:	2ee0      	cmp	r6, #224	; 0xe0
 800b36e:	d105      	bne.n	800b37c <udp_sendto_if+0x58>
      src_ip = netif_ip_addr4(netif);
 800b370:	1d25      	adds	r5, r4, #4
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800b372:	e88d 0030 	stmia.w	sp, {r4, r5}
 800b376:	f7ff ff3b 	bl	800b1f0 <udp_sendto_if_src>
 800b37a:	e7df      	b.n	800b33c <udp_sendto_if+0x18>
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800b37c:	6866      	ldr	r6, [r4, #4]
 800b37e:	42b5      	cmp	r5, r6
 800b380:	d101      	bne.n	800b386 <udp_sendto_if+0x62>
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800b382:	4605      	mov	r5, r0
 800b384:	e7f5      	b.n	800b372 <udp_sendto_if+0x4e>
        return ERR_RTE;
 800b386:	f06f 0003 	mvn.w	r0, #3
 800b38a:	e7d7      	b.n	800b33c <udp_sendto_if+0x18>
 800b38c:	080100fa 	.word	0x080100fa
 800b390:	080101c8 	.word	0x080101c8
 800b394:	0800d104 	.word	0x0800d104
 800b398:	080101e3 	.word	0x080101e3
 800b39c:	080101ff 	.word	0x080101ff
 800b3a0:	0801021d 	.word	0x0801021d

0800b3a4 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800b3a4:	b570      	push	{r4, r5, r6, lr}
 800b3a6:	460d      	mov	r5, r1
 800b3a8:	4616      	mov	r6, r2
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800b3aa:	4604      	mov	r4, r0
 800b3ac:	b948      	cbnz	r0, 800b3c2 <udp_connect+0x1e>
 800b3ae:	4b16      	ldr	r3, [pc, #88]	; (800b408 <udp_connect+0x64>)
 800b3b0:	f240 4235 	movw	r2, #1077	; 0x435
 800b3b4:	4915      	ldr	r1, [pc, #84]	; (800b40c <udp_connect+0x68>)
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800b3b6:	4816      	ldr	r0, [pc, #88]	; (800b410 <udp_connect+0x6c>)
 800b3b8:	f000 fec4 	bl	800c144 <iprintf>
 800b3bc:	f06f 000f 	mvn.w	r0, #15
 800b3c0:	bd70      	pop	{r4, r5, r6, pc}
 800b3c2:	b921      	cbnz	r1, 800b3ce <udp_connect+0x2a>
 800b3c4:	4b10      	ldr	r3, [pc, #64]	; (800b408 <udp_connect+0x64>)
 800b3c6:	f240 4236 	movw	r2, #1078	; 0x436
 800b3ca:	4912      	ldr	r1, [pc, #72]	; (800b414 <udp_connect+0x70>)
 800b3cc:	e7f3      	b.n	800b3b6 <udp_connect+0x12>

  if (pcb->local_port == 0) {
 800b3ce:	8a42      	ldrh	r2, [r0, #18]
 800b3d0:	b16a      	cbz	r2, 800b3ee <udp_connect+0x4a>
    if (err != ERR_OK) {
      return err;
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800b3d2:	682b      	ldr	r3, [r5, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 800b3d4:	82a6      	strh	r6, [r4, #20]
  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800b3d6:	6063      	str	r3, [r4, #4]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800b3d8:	7c23      	ldrb	r3, [r4, #16]
 800b3da:	f043 0304 	orr.w	r3, r3, #4
 800b3de:	7423      	strb	r3, [r4, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b3e0:	4b0d      	ldr	r3, [pc, #52]	; (800b418 <udp_connect+0x74>)
 800b3e2:	681a      	ldr	r2, [r3, #0]
 800b3e4:	4610      	mov	r0, r2
 800b3e6:	b940      	cbnz	r0, 800b3fa <udp_connect+0x56>
      /* already on the list, just return */
      return ERR_OK;
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800b3e8:	60e2      	str	r2, [r4, #12]
  udp_pcbs = pcb;
 800b3ea:	601c      	str	r4, [r3, #0]
  return ERR_OK;
 800b3ec:	bd70      	pop	{r4, r5, r6, pc}
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800b3ee:	4601      	mov	r1, r0
 800b3f0:	f7ff fe98 	bl	800b124 <udp_bind>
    if (err != ERR_OK) {
 800b3f4:	2800      	cmp	r0, #0
 800b3f6:	d0ec      	beq.n	800b3d2 <udp_connect+0x2e>
 800b3f8:	bd70      	pop	{r4, r5, r6, pc}
    if (pcb == ipcb) {
 800b3fa:	42a0      	cmp	r0, r4
 800b3fc:	d001      	beq.n	800b402 <udp_connect+0x5e>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b3fe:	68c0      	ldr	r0, [r0, #12]
 800b400:	e7f1      	b.n	800b3e6 <udp_connect+0x42>
      return ERR_OK;
 800b402:	2000      	movs	r0, #0
}
 800b404:	bd70      	pop	{r4, r5, r6, pc}
 800b406:	bf00      	nop
 800b408:	080100fa 	.word	0x080100fa
 800b40c:	080100c5 	.word	0x080100c5
 800b410:	0800d104 	.word	0x0800d104
 800b414:	080100de 	.word	0x080100de
 800b418:	2000d3a4 	.word	0x2000d3a4

0800b41c <udp_recv>:
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800b41c:	b930      	cbnz	r0, 800b42c <udp_recv+0x10>
 800b41e:	4b05      	ldr	r3, [pc, #20]	; (800b434 <udp_recv+0x18>)
 800b420:	f240 428a 	movw	r2, #1162	; 0x48a
 800b424:	4904      	ldr	r1, [pc, #16]	; (800b438 <udp_recv+0x1c>)
 800b426:	4805      	ldr	r0, [pc, #20]	; (800b43c <udp_recv+0x20>)
 800b428:	f000 be8c 	b.w	800c144 <iprintf>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800b42c:	6181      	str	r1, [r0, #24]
  pcb->recv_arg = recv_arg;
 800b42e:	61c2      	str	r2, [r0, #28]
 800b430:	4770      	bx	lr
 800b432:	bf00      	nop
 800b434:	080100fa 	.word	0x080100fa
 800b438:	0801019a 	.word	0x0801019a
 800b43c:	0800d104 	.word	0x0800d104

0800b440 <udp_remove>:
{
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800b440:	4601      	mov	r1, r0
 800b442:	b930      	cbnz	r0, 800b452 <udp_remove+0x12>
 800b444:	4b0d      	ldr	r3, [pc, #52]	; (800b47c <udp_remove+0x3c>)
 800b446:	f240 42a1 	movw	r2, #1185	; 0x4a1
 800b44a:	490d      	ldr	r1, [pc, #52]	; (800b480 <udp_remove+0x40>)
 800b44c:	480d      	ldr	r0, [pc, #52]	; (800b484 <udp_remove+0x44>)
 800b44e:	f000 be79 	b.w	800c144 <iprintf>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800b452:	4a0d      	ldr	r2, [pc, #52]	; (800b488 <udp_remove+0x48>)
 800b454:	6813      	ldr	r3, [r2, #0]
 800b456:	4298      	cmp	r0, r3
 800b458:	d104      	bne.n	800b464 <udp_remove+0x24>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800b45a:	68c3      	ldr	r3, [r0, #12]
 800b45c:	6013      	str	r3, [r2, #0]
        pcb2->next = pcb->next;
        break;
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800b45e:	2000      	movs	r0, #0
 800b460:	f7fb bd2c 	b.w	8006ebc <memp_free>
{
 800b464:	461a      	mov	r2, r3
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800b466:	2b00      	cmp	r3, #0
 800b468:	d0f9      	beq.n	800b45e <udp_remove+0x1e>
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800b46a:	68db      	ldr	r3, [r3, #12]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d0f6      	beq.n	800b45e <udp_remove+0x1e>
 800b470:	4299      	cmp	r1, r3
 800b472:	d1f7      	bne.n	800b464 <udp_remove+0x24>
        pcb2->next = pcb->next;
 800b474:	68cb      	ldr	r3, [r1, #12]
 800b476:	60d3      	str	r3, [r2, #12]
        break;
 800b478:	e7f1      	b.n	800b45e <udp_remove+0x1e>
 800b47a:	bf00      	nop
 800b47c:	080100fa 	.word	0x080100fa
 800b480:	080101b0 	.word	0x080101b0
 800b484:	0800d104 	.word	0x0800d104
 800b488:	2000d3a4 	.word	0x2000d3a4

0800b48c <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800b48c:	b510      	push	{r4, lr}
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800b48e:	2000      	movs	r0, #0
 800b490:	f7fb fcf8 	bl	8006e84 <memp_malloc>
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800b494:	4604      	mov	r4, r0
 800b496:	b128      	cbz	r0, 800b4a4 <udp_new+0x18>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800b498:	2220      	movs	r2, #32
 800b49a:	2100      	movs	r1, #0
 800b49c:	f000 fe4a 	bl	800c134 <memset>
    pcb->ttl = UDP_TTL;
 800b4a0:	23ff      	movs	r3, #255	; 0xff
 800b4a2:	72e3      	strb	r3, [r4, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
}
 800b4a4:	4620      	mov	r0, r4
 800b4a6:	bd10      	pop	{r4, pc}

0800b4a8 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800b4a8:	b510      	push	{r4, lr}
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800b4aa:	b138      	cbz	r0, 800b4bc <udp_netif_ip_addr_changed+0x14>
 800b4ac:	6803      	ldr	r3, [r0, #0]
 800b4ae:	b12b      	cbz	r3, 800b4bc <udp_netif_ip_addr_changed+0x14>
 800b4b0:	b121      	cbz	r1, 800b4bc <udp_netif_ip_addr_changed+0x14>
 800b4b2:	680b      	ldr	r3, [r1, #0]
 800b4b4:	b113      	cbz	r3, 800b4bc <udp_netif_ip_addr_changed+0x14>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800b4b6:	4b06      	ldr	r3, [pc, #24]	; (800b4d0 <udp_netif_ip_addr_changed+0x28>)
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	b903      	cbnz	r3, 800b4be <udp_netif_ip_addr_changed+0x16>
 800b4bc:	bd10      	pop	{r4, pc}
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800b4be:	681c      	ldr	r4, [r3, #0]
 800b4c0:	6802      	ldr	r2, [r0, #0]
 800b4c2:	4294      	cmp	r4, r2
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800b4c4:	bf04      	itt	eq
 800b4c6:	680a      	ldreq	r2, [r1, #0]
 800b4c8:	601a      	streq	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800b4ca:	68db      	ldr	r3, [r3, #12]
 800b4cc:	e7f5      	b.n	800b4ba <udp_netif_ip_addr_changed+0x12>
 800b4ce:	bf00      	nop
 800b4d0:	2000d3a4 	.word	0x2000d3a4

0800b4d4 <ethernet_input>:
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800b4d4:	8943      	ldrh	r3, [r0, #10]
 800b4d6:	2b0e      	cmp	r3, #14
{
 800b4d8:	b570      	push	{r4, r5, r6, lr}
 800b4da:	4604      	mov	r4, r0
 800b4dc:	460d      	mov	r5, r1
  if (p->len <= SIZEOF_ETH_HDR) {
 800b4de:	d91a      	bls.n	800b516 <ethernet_input+0x42>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800b4e0:	7bc3      	ldrb	r3, [r0, #15]
 800b4e2:	b91b      	cbnz	r3, 800b4ec <ethernet_input+0x18>
    p->if_idx = netif_get_index(netif);
 800b4e4:	f891 3034 	ldrb.w	r3, [r1, #52]	; 0x34
 800b4e8:	3301      	adds	r3, #1
 800b4ea:	73c3      	strb	r3, [r0, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800b4ec:	6860      	ldr	r0, [r4, #4]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800b4ee:	7803      	ldrb	r3, [r0, #0]
  type = ethhdr->type;
 800b4f0:	8986      	ldrh	r6, [r0, #12]
  if (ethhdr->dest.addr[0] & 1) {
 800b4f2:	07d9      	lsls	r1, r3, #31
 800b4f4:	d50a      	bpl.n	800b50c <ethernet_input+0x38>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800b4f6:	2b01      	cmp	r3, #1
 800b4f8:	d111      	bne.n	800b51e <ethernet_input+0x4a>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800b4fa:	7843      	ldrb	r3, [r0, #1]
 800b4fc:	b933      	cbnz	r3, 800b50c <ethernet_input+0x38>
 800b4fe:	7883      	ldrb	r3, [r0, #2]
 800b500:	2b5e      	cmp	r3, #94	; 0x5e
 800b502:	d103      	bne.n	800b50c <ethernet_input+0x38>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800b504:	7b63      	ldrb	r3, [r4, #13]
 800b506:	f043 0310 	orr.w	r3, r3, #16
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800b50a:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
 800b50c:	2e08      	cmp	r6, #8
 800b50e:	d010      	beq.n	800b532 <ethernet_input+0x5e>
 800b510:	f5b6 6fc1 	cmp.w	r6, #1544	; 0x608
 800b514:	d01d      	beq.n	800b552 <ethernet_input+0x7e>
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 800b516:	4620      	mov	r0, r4
 800b518:	f7fb ff02 	bl	8007320 <pbuf_free>
  return ERR_OK;
 800b51c:	e017      	b.n	800b54e <ethernet_input+0x7a>
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800b51e:	2206      	movs	r2, #6
 800b520:	4913      	ldr	r1, [pc, #76]	; (800b570 <ethernet_input+0x9c>)
 800b522:	f000 fded 	bl	800c100 <memcmp>
 800b526:	2800      	cmp	r0, #0
 800b528:	d1f0      	bne.n	800b50c <ethernet_input+0x38>
      p->flags |= PBUF_FLAG_LLBCAST;
 800b52a:	7b63      	ldrb	r3, [r4, #13]
 800b52c:	f043 0308 	orr.w	r3, r3, #8
 800b530:	e7eb      	b.n	800b50a <ethernet_input+0x36>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800b532:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
 800b536:	071a      	lsls	r2, r3, #28
 800b538:	d5ed      	bpl.n	800b516 <ethernet_input+0x42>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800b53a:	210e      	movs	r1, #14
 800b53c:	4620      	mov	r0, r4
 800b53e:	f7fb febb 	bl	80072b8 <pbuf_remove_header>
 800b542:	2800      	cmp	r0, #0
 800b544:	d1e7      	bne.n	800b516 <ethernet_input+0x42>
        ip4_input(p, netif);
 800b546:	4629      	mov	r1, r5
 800b548:	4620      	mov	r0, r4
 800b54a:	f7fa fc9d 	bl	8005e88 <ip4_input>
}
 800b54e:	2000      	movs	r0, #0
 800b550:	bd70      	pop	{r4, r5, r6, pc}
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800b552:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
 800b556:	071b      	lsls	r3, r3, #28
 800b558:	d5dd      	bpl.n	800b516 <ethernet_input+0x42>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800b55a:	210e      	movs	r1, #14
 800b55c:	4620      	mov	r0, r4
 800b55e:	f7fb feab 	bl	80072b8 <pbuf_remove_header>
 800b562:	2800      	cmp	r0, #0
 800b564:	d1d7      	bne.n	800b516 <ethernet_input+0x42>
        etharp_input(p, netif);
 800b566:	4629      	mov	r1, r5
 800b568:	4620      	mov	r0, r4
 800b56a:	f7fa f8c7 	bl	80056fc <etharp_input>
      break;
 800b56e:	e7ee      	b.n	800b54e <ethernet_input+0x7a>
 800b570:	0801030c 	.word	0x0801030c

0800b574 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800b574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b578:	460d      	mov	r5, r1
 800b57a:	4604      	mov	r4, r0
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800b57c:	f8bd 0018 	ldrh.w	r0, [sp, #24]
                u16_t eth_type) {
 800b580:	4616      	mov	r6, r2
 800b582:	461f      	mov	r7, r3
  u16_t eth_type_be = lwip_htons(eth_type);
 800b584:	f7f8 fe8a 	bl	800429c <lwip_htons>

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800b588:	210e      	movs	r1, #14
  u16_t eth_type_be = lwip_htons(eth_type);
 800b58a:	4680      	mov	r8, r0
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800b58c:	4628      	mov	r0, r5
 800b58e:	f7fb fe90 	bl	80072b2 <pbuf_add_header>
 800b592:	b9e0      	cbnz	r0, 800b5ce <ethernet_output+0x5a>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800b594:	6869      	ldr	r1, [r5, #4]
  ethhdr->type = eth_type_be;
 800b596:	f8a1 800c 	strh.w	r8, [r1, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800b59a:	683b      	ldr	r3, [r7, #0]
 800b59c:	600b      	str	r3, [r1, #0]
 800b59e:	88bb      	ldrh	r3, [r7, #4]
 800b5a0:	808b      	strh	r3, [r1, #4]
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800b5a2:	6833      	ldr	r3, [r6, #0]
 800b5a4:	f8c1 3006 	str.w	r3, [r1, #6]
 800b5a8:	88b3      	ldrh	r3, [r6, #4]
 800b5aa:	814b      	strh	r3, [r1, #10]

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800b5ac:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800b5b0:	2b06      	cmp	r3, #6
 800b5b2:	d006      	beq.n	800b5c2 <ethernet_output+0x4e>
 800b5b4:	4b08      	ldr	r3, [pc, #32]	; (800b5d8 <ethernet_output+0x64>)
 800b5b6:	f240 1233 	movw	r2, #307	; 0x133
 800b5ba:	4908      	ldr	r1, [pc, #32]	; (800b5dc <ethernet_output+0x68>)
 800b5bc:	4808      	ldr	r0, [pc, #32]	; (800b5e0 <ethernet_output+0x6c>)
 800b5be:	f000 fdc1 	bl	800c144 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800b5c2:	69a3      	ldr	r3, [r4, #24]
 800b5c4:	4629      	mov	r1, r5
 800b5c6:	4620      	mov	r0, r4
pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
}
 800b5c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return netif->linkoutput(netif, p);
 800b5cc:	4718      	bx	r3
}
 800b5ce:	f06f 0001 	mvn.w	r0, #1
 800b5d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5d6:	bf00      	nop
 800b5d8:	08010312 	.word	0x08010312
 800b5dc:	08010347 	.word	0x08010347
 800b5e0:	0800d104 	.word	0x0800d104

0800b5e4 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 800b5e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b5e6:	4604      	mov	r4, r0
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 800b5e8:	9100      	str	r1, [sp, #0]
 800b5ea:	2304      	movs	r3, #4
 800b5ec:	2100      	movs	r1, #0
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 800b5ee:	4668      	mov	r0, sp
  osMessageQDef(QUEUE, size, void *);
 800b5f0:	9301      	str	r3, [sp, #4]
 800b5f2:	9102      	str	r1, [sp, #8]
 800b5f4:	9103      	str	r1, [sp, #12]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 800b5f6:	f7f6 fcb1 	bl	8001f5c <osMessageCreate>
 800b5fa:	6020      	str	r0, [r4, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 800b5fc:	fab0 f080 	clz	r0, r0
 800b600:	0940      	lsrs	r0, r0, #5
    return ERR_MEM;

  return ERR_OK;
}
 800b602:	4240      	negs	r0, r0
 800b604:	b004      	add	sp, #16
 800b606:	bd10      	pop	{r4, pc}

0800b608 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 800b608:	b508      	push	{r3, lr}
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 800b60a:	2200      	movs	r2, #0
 800b60c:	6800      	ldr	r0, [r0, #0]
 800b60e:	f7f6 fcb9 	bl	8001f84 <osMessagePut>
 800b612:	3000      	adds	r0, #0
 800b614:	bf18      	it	ne
 800b616:	2001      	movne	r0, #1
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
}
 800b618:	4240      	negs	r0, r0
 800b61a:	bd08      	pop	{r3, pc}

0800b61c <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 800b61c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b61e:	4617      	mov	r7, r2
 800b620:	b085      	sub	sp, #20
 800b622:	4606      	mov	r6, r0
 800b624:	460d      	mov	r5, r1
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 800b626:	f7f6 fbc6 	bl	8001db6 <osKernelSysTick>
 800b62a:	4604      	mov	r4, r0
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 800b62c:	b177      	cbz	r7, 800b64c <sys_arch_mbox_fetch+0x30>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 800b62e:	463a      	mov	r2, r7
 800b630:	6831      	ldr	r1, [r6, #0]
 800b632:	a801      	add	r0, sp, #4
 800b634:	f7f6 fcce 	bl	8001fd4 <osMessageGet>

    if(event.status == osEventMessage)
 800b638:	9b01      	ldr	r3, [sp, #4]
 800b63a:	2b10      	cmp	r3, #16
 800b63c:	d10d      	bne.n	800b65a <sys_arch_mbox_fetch+0x3e>
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
 800b63e:	9b02      	ldr	r3, [sp, #8]
 800b640:	602b      	str	r3, [r5, #0]
    return (osKernelSysTick() - starttime);
 800b642:	f7f6 fbb8 	bl	8001db6 <osKernelSysTick>
 800b646:	1b00      	subs	r0, r0, r4
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 800b648:	b005      	add	sp, #20
 800b64a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    event = osMessageGet (*mbox, osWaitForever);
 800b64c:	f04f 32ff 	mov.w	r2, #4294967295
 800b650:	6831      	ldr	r1, [r6, #0]
 800b652:	a801      	add	r0, sp, #4
 800b654:	f7f6 fcbe 	bl	8001fd4 <osMessageGet>
 800b658:	e7f1      	b.n	800b63e <sys_arch_mbox_fetch+0x22>
      return SYS_ARCH_TIMEOUT;
 800b65a:	f04f 30ff 	mov.w	r0, #4294967295
 800b65e:	e7f3      	b.n	800b648 <sys_arch_mbox_fetch+0x2c>

0800b660 <sys_mbox_valid>:
 800b660:	6800      	ldr	r0, [r0, #0]
 800b662:	3000      	adds	r0, #0
 800b664:	bf18      	it	ne
 800b666:	2001      	movne	r0, #1
 800b668:	4770      	bx	lr
	...

0800b66c <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 800b66c:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 800b66e:	4803      	ldr	r0, [pc, #12]	; (800b67c <sys_init+0x10>)
 800b670:	f7f6 fbd5 	bl	8001e1e <osMutexCreate>
 800b674:	4b02      	ldr	r3, [pc, #8]	; (800b680 <sys_init+0x14>)
 800b676:	6018      	str	r0, [r3, #0]
 800b678:	bd08      	pop	{r3, pc}
 800b67a:	bf00      	nop
 800b67c:	08010380 	.word	0x08010380
 800b680:	2000d3ac 	.word	0x2000d3ac

0800b684 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 800b684:	b513      	push	{r0, r1, r4, lr}

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 800b686:	2300      	movs	r3, #0
err_t sys_mutex_new(sys_mutex_t *mutex) {
 800b688:	4604      	mov	r4, r0
  *mutex = osMutexCreate(osMutex(MUTEX));
 800b68a:	4668      	mov	r0, sp
  osMutexDef(MUTEX);
 800b68c:	9300      	str	r3, [sp, #0]
 800b68e:	9301      	str	r3, [sp, #4]
  *mutex = osMutexCreate(osMutex(MUTEX));
 800b690:	f7f6 fbc5 	bl	8001e1e <osMutexCreate>
 800b694:	6020      	str	r0, [r4, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 800b696:	fab0 f080 	clz	r0, r0
 800b69a:	0940      	lsrs	r0, r0, #5
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
}
 800b69c:	4240      	negs	r0, r0
 800b69e:	b002      	add	sp, #8
 800b6a0:	bd10      	pop	{r4, pc}

0800b6a2 <sys_mutex_lock>:
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 800b6a2:	f04f 31ff 	mov.w	r1, #4294967295
 800b6a6:	6800      	ldr	r0, [r0, #0]
 800b6a8:	f7f6 bbc0 	b.w	8001e2c <osMutexWait>

0800b6ac <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
  osMutexRelease(*mutex);
 800b6ac:	6800      	ldr	r0, [r0, #0]
 800b6ae:	f7f6 bc53 	b.w	8001f58 <osMutexRelease>

0800b6b2 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 800b6b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b6b4:	b089      	sub	sp, #36	; 0x24
 800b6b6:	4614      	mov	r4, r2
 800b6b8:	4607      	mov	r7, r0
 800b6ba:	460e      	mov	r6, r1
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 800b6bc:	221c      	movs	r2, #28
 800b6be:	2100      	movs	r1, #0
 800b6c0:	a801      	add	r0, sp, #4
{
 800b6c2:	461d      	mov	r5, r3
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 800b6c4:	f000 fd36 	bl	800c134 <memset>
 800b6c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  return osThreadCreate(&os_thread_def, arg);
 800b6ca:	4621      	mov	r1, r4
 800b6cc:	a801      	add	r0, sp, #4
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 800b6ce:	9701      	str	r7, [sp, #4]
 800b6d0:	9602      	str	r6, [sp, #8]
 800b6d2:	f8ad 300c 	strh.w	r3, [sp, #12]
 800b6d6:	9505      	str	r5, [sp, #20]
  return osThreadCreate(&os_thread_def, arg);
 800b6d8:	f7f6 fb74 	bl	8001dc4 <osThreadCreate>
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 800b6dc:	b009      	add	sp, #36	; 0x24
 800b6de:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b6e0 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 800b6e0:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 800b6e2:	4b04      	ldr	r3, [pc, #16]	; (800b6f4 <sys_arch_protect+0x14>)
 800b6e4:	f04f 31ff 	mov.w	r1, #4294967295
 800b6e8:	6818      	ldr	r0, [r3, #0]
 800b6ea:	f7f6 fb9f 	bl	8001e2c <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
}
 800b6ee:	2001      	movs	r0, #1
 800b6f0:	bd08      	pop	{r3, pc}
 800b6f2:	bf00      	nop
 800b6f4:	2000d3ac 	.word	0x2000d3ac

0800b6f8 <sys_arch_unprotect>:
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 800b6f8:	4b01      	ldr	r3, [pc, #4]	; (800b700 <sys_arch_unprotect+0x8>)
 800b6fa:	6818      	ldr	r0, [r3, #0]
 800b6fc:	f7f6 bc2c 	b.w	8001f58 <osMutexRelease>
 800b700:	2000d3ac 	.word	0x2000d3ac

0800b704 <User_notification>:
  * @param  netif: the network interface
  * @retval None
  */
void User_notification(struct netif *netif) 
{
  if (netif_is_up(netif))
 800b704:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
  {

    /* Turn On LED 1 to indicate ETH and LwIP init success*/
	  HAL_GPIO_WritePin(LD1_GPIO_Port,LD1_Pin,GPIO_PIN_SET);
 800b708:	2201      	movs	r2, #1
  }
  else
  {  

   /* Turn On LED 3 to indicate ETH and LwIP init error */
	  HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin,GPIO_PIN_SET);
 800b70a:	4804      	ldr	r0, [pc, #16]	; (800b71c <User_notification+0x18>)
  if (netif_is_up(netif))
 800b70c:	07db      	lsls	r3, r3, #31
	  HAL_GPIO_WritePin(LD1_GPIO_Port,LD1_Pin,GPIO_PIN_SET);
 800b70e:	bf4c      	ite	mi
 800b710:	4611      	movmi	r1, r2
	  HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin,GPIO_PIN_SET);
 800b712:	f44f 4180 	movpl.w	r1, #16384	; 0x4000
 800b716:	f7f5 bcab 	b.w	8001070 <HAL_GPIO_WritePin>
 800b71a:	bf00      	nop
 800b71c:	40020400 	.word	0x40020400

0800b720 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800b720:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800b724:	4a25      	ldr	r2, [pc, #148]	; (800b7bc <low_level_output+0x9c>)
  uint32_t framelength = 0;
  uint32_t bufferoffset = 0;
  uint32_t byteslefttocopy = 0;
  uint32_t payloadoffset = 0;
  DmaTxDesc = heth.TxDesc;
  bufferoffset = 0;
 800b726:	f04f 0800 	mov.w	r8, #0
{
 800b72a:	460c      	mov	r4, r1
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
      payloadoffset = 0;
    
      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800b72c:	f240 5bf4 	movw	fp, #1524	; 0x5f4
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800b730:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
  uint32_t framelength = 0;
 800b732:	4647      	mov	r7, r8
 800b734:	9200      	str	r2, [sp, #0]
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800b736:	68ab      	ldr	r3, [r5, #8]
  for(q = p; q != NULL; q = q->next)
 800b738:	b92c      	cbnz	r4, 800b746 <low_level_output+0x26>
      bufferoffset = bufferoffset + byteslefttocopy;
      framelength = framelength + byteslefttocopy;
    }
  
  /* Prepare transmit descriptors to give to DMA */ 
  HAL_ETH_TransmitFrame(&heth, framelength);
 800b73a:	4639      	mov	r1, r7
 800b73c:	481f      	ldr	r0, [pc, #124]	; (800b7bc <low_level_output+0x9c>)
 800b73e:	f7f5 f94d 	bl	80009dc <HAL_ETH_TransmitFrame>
  
  errval = ERR_OK;
 800b742:	4620      	mov	r0, r4
 800b744:	e004      	b.n	800b750 <low_level_output+0x30>
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800b746:	682a      	ldr	r2, [r5, #0]
 800b748:	2a00      	cmp	r2, #0
 800b74a:	da11      	bge.n	800b770 <low_level_output+0x50>
        errval = ERR_USE;
 800b74c:	f06f 0007 	mvn.w	r0, #7
  
error:
  
  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800b750:	9b00      	ldr	r3, [sp, #0]
 800b752:	f241 0214 	movw	r2, #4116	; 0x1014
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	5899      	ldr	r1, [r3, r2]
 800b75a:	0689      	lsls	r1, r1, #26
 800b75c:	d505      	bpl.n	800b76a <low_level_output+0x4a>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800b75e:	2120      	movs	r1, #32
 800b760:	5099      	str	r1, [r3, r2]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800b762:	2100      	movs	r1, #0
 800b764:	f241 0204 	movw	r2, #4100	; 0x1004
 800b768:	5099      	str	r1, [r3, r2]
  }
  return errval;
}
 800b76a:	b003      	add	sp, #12
 800b76c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      byteslefttocopy = q->len;
 800b770:	f8b4 900a 	ldrh.w	r9, [r4, #10]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800b774:	4646      	mov	r6, r8
      payloadoffset = 0;
 800b776:	f04f 0a00 	mov.w	sl, #0
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800b77a:	eb06 0809 	add.w	r8, r6, r9
 800b77e:	1998      	adds	r0, r3, r6
 800b780:	6861      	ldr	r1, [r4, #4]
 800b782:	45d8      	cmp	r8, fp
 800b784:	d808      	bhi.n	800b798 <low_level_output+0x78>
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800b786:	464a      	mov	r2, r9
 800b788:	4451      	add	r1, sl
 800b78a:	9301      	str	r3, [sp, #4]
      framelength = framelength + byteslefttocopy;
 800b78c:	444f      	add	r7, r9
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800b78e:	f000 fcc6 	bl	800c11e <memcpy>
  for(q = p; q != NULL; q = q->next)
 800b792:	6824      	ldr	r4, [r4, #0]
 800b794:	9b01      	ldr	r3, [sp, #4]
 800b796:	e7cf      	b.n	800b738 <low_level_output+0x18>
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800b798:	ebab 0606 	sub.w	r6, fp, r6
 800b79c:	4451      	add	r1, sl
 800b79e:	4632      	mov	r2, r6
 800b7a0:	f000 fcbd 	bl	800c11e <memcpy>
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800b7a4:	68ed      	ldr	r5, [r5, #12]
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800b7a6:	682b      	ldr	r3, [r5, #0]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	dbcf      	blt.n	800b74c <low_level_output+0x2c>
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800b7ac:	44b2      	add	sl, r6
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800b7ae:	4437      	add	r7, r6
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800b7b0:	68ab      	ldr	r3, [r5, #8]
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800b7b2:	f2a8 59f4 	subw	r9, r8, #1524	; 0x5f4
        bufferoffset = 0;
 800b7b6:	2600      	movs	r6, #0
 800b7b8:	e7df      	b.n	800b77a <low_level_output+0x5a>
 800b7ba:	bf00      	nop
 800b7bc:	2000d3b0 	.word	0x2000d3b0

0800b7c0 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 800b7c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7c4:	4682      	mov	sl, r0
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
  
  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800b7c6:	4c3b      	ldr	r4, [pc, #236]	; (800b8b4 <ethernetif_input+0xf4>)
 800b7c8:	f04f 31ff 	mov.w	r1, #4294967295
 800b7cc:	6820      	ldr	r0, [r4, #0]
 800b7ce:	f7f6 fb79 	bl	8001ec4 <osSemaphoreWait>
 800b7d2:	2800      	cmp	r0, #0
 800b7d4:	d1f8      	bne.n	800b7c8 <ethernetif_input+0x8>
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 800b7d6:	4d38      	ldr	r5, [pc, #224]	; (800b8b8 <ethernetif_input+0xf8>)
    {
      do
      {   
        LOCK_TCPIP_CORE();
 800b7d8:	4838      	ldr	r0, [pc, #224]	; (800b8bc <ethernetif_input+0xfc>)
 800b7da:	f7ff ff62 	bl	800b6a2 <sys_mutex_lock>
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 800b7de:	4628      	mov	r0, r5
 800b7e0:	f7f5 f96e 	bl	8000ac0 <HAL_ETH_GetReceivedFrame_IT>
 800b7e4:	4607      	mov	r7, r0
 800b7e6:	b130      	cbz	r0, 800b7f6 <ethernetif_input+0x36>
    return NULL;
 800b7e8:	2400      	movs	r4, #0
          if (netif->input( p, netif) != ERR_OK )
          {
            pbuf_free(p);
          }
        }
        UNLOCK_TCPIP_CORE();
 800b7ea:	4834      	ldr	r0, [pc, #208]	; (800b8bc <ethernetif_input+0xfc>)
 800b7ec:	f7ff ff5e 	bl	800b6ac <sys_mutex_unlock>
      } while(p!=NULL);
 800b7f0:	2c00      	cmp	r4, #0
 800b7f2:	d1f0      	bne.n	800b7d6 <ethernetif_input+0x16>
 800b7f4:	e7e7      	b.n	800b7c6 <ethernetif_input+0x6>
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800b7f6:	6c2b      	ldr	r3, [r5, #64]	; 0x40
  len = heth.RxFrameInfos.length;
 800b7f8:	8fa9      	ldrh	r1, [r5, #60]	; 0x3c
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800b7fa:	9301      	str	r3, [sp, #4]
  if (len > 0)
 800b7fc:	bb01      	cbnz	r1, 800b840 <ethernetif_input+0x80>
  struct pbuf *p = NULL;
 800b7fe:	2400      	movs	r4, #0
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800b800:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800b802:	2200      	movs	r2, #0
 800b804:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 800b806:	4282      	cmp	r2, r0
 800b808:	d14d      	bne.n	800b8a6 <ethernetif_input+0xe6>
    heth.RxFrameInfos.SegCount =0;  
 800b80a:	2300      	movs	r3, #0
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 800b80c:	f241 0214 	movw	r2, #4116	; 0x1014
    heth.RxFrameInfos.SegCount =0;  
 800b810:	63ab      	str	r3, [r5, #56]	; 0x38
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 800b812:	682b      	ldr	r3, [r5, #0]
 800b814:	5899      	ldr	r1, [r3, r2]
 800b816:	0609      	lsls	r1, r1, #24
 800b818:	d505      	bpl.n	800b826 <ethernetif_input+0x66>
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 800b81a:	2180      	movs	r1, #128	; 0x80
 800b81c:	5099      	str	r1, [r3, r2]
    heth.Instance->DMARPDR = 0;
 800b81e:	f241 0208 	movw	r2, #4104	; 0x1008
 800b822:	2100      	movs	r1, #0
 800b824:	5099      	str	r1, [r3, r2]
        if   (p != NULL)
 800b826:	2c00      	cmp	r4, #0
 800b828:	d0de      	beq.n	800b7e8 <ethernetif_input+0x28>
          if (netif->input( p, netif) != ERR_OK )
 800b82a:	f8da 3010 	ldr.w	r3, [sl, #16]
 800b82e:	4651      	mov	r1, sl
 800b830:	4620      	mov	r0, r4
 800b832:	4798      	blx	r3
 800b834:	2800      	cmp	r0, #0
 800b836:	d0d8      	beq.n	800b7ea <ethernetif_input+0x2a>
            pbuf_free(p);
 800b838:	4620      	mov	r0, r4
 800b83a:	f7fb fd71 	bl	8007320 <pbuf_free>
 800b83e:	e7d4      	b.n	800b7ea <ethernetif_input+0x2a>
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800b840:	f44f 72c1 	mov.w	r2, #386	; 0x182
 800b844:	f7fb fdd4 	bl	80073f0 <pbuf_alloc>
  if (p != NULL)
 800b848:	4604      	mov	r4, r0
 800b84a:	2800      	cmp	r0, #0
 800b84c:	d0d7      	beq.n	800b7fe <ethernetif_input+0x3e>
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800b84e:	f8d5 b030 	ldr.w	fp, [r5, #48]	; 0x30
 800b852:	4680      	mov	r8, r0
      byteslefttocopy = q->len;
 800b854:	f8b8 200a 	ldrh.w	r2, [r8, #10]
 800b858:	463e      	mov	r6, r7
      payloadoffset = 0;
 800b85a:	f04f 0900 	mov.w	r9, #0
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800b85e:	f240 53f4 	movw	r3, #1524	; 0x5f4
 800b862:	18b7      	adds	r7, r6, r2
 800b864:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b868:	429f      	cmp	r7, r3
 800b86a:	9b01      	ldr	r3, [sp, #4]
 800b86c:	eb03 0106 	add.w	r1, r3, r6
 800b870:	d808      	bhi.n	800b884 <ethernetif_input+0xc4>
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800b872:	4448      	add	r0, r9
 800b874:	f000 fc53 	bl	800c11e <memcpy>
    for(q = p; q != NULL; q = q->next)
 800b878:	f8d8 8000 	ldr.w	r8, [r8]
 800b87c:	f1b8 0f00 	cmp.w	r8, #0
 800b880:	d1e8      	bne.n	800b854 <ethernetif_input+0x94>
 800b882:	e7bd      	b.n	800b800 <ethernetif_input+0x40>
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800b884:	f5c6 66be 	rsb	r6, r6, #1520	; 0x5f0
 800b888:	4448      	add	r0, r9
 800b88a:	3604      	adds	r6, #4
 800b88c:	4632      	mov	r2, r6
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800b88e:	44b1      	add	r9, r6
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800b890:	f000 fc45 	bl	800c11e <memcpy>
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800b894:	f8db b00c 	ldr.w	fp, [fp, #12]
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800b898:	f2a7 52f4 	subw	r2, r7, #1524	; 0x5f4
        bufferoffset = 0;
 800b89c:	2600      	movs	r6, #0
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800b89e:	f8db 3008 	ldr.w	r3, [fp, #8]
 800b8a2:	9301      	str	r3, [sp, #4]
 800b8a4:	e7db      	b.n	800b85e <ethernetif_input+0x9e>
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800b8a6:	6819      	ldr	r1, [r3, #0]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800b8a8:	3201      	adds	r2, #1
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800b8aa:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 800b8ae:	6019      	str	r1, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800b8b0:	68db      	ldr	r3, [r3, #12]
 800b8b2:	e7a8      	b.n	800b806 <ethernetif_input+0x46>
 800b8b4:	20006bc4 	.word	0x20006bc4
 800b8b8:	2000d3b0 	.word	0x2000d3b0
 800b8bc:	20006e2c 	.word	0x20006e2c

0800b8c0 <HAL_ETH_MspInit>:
{
 800b8c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b8c2:	b08d      	sub	sp, #52	; 0x34
 800b8c4:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b8c6:	2214      	movs	r2, #20
 800b8c8:	2100      	movs	r1, #0
 800b8ca:	a807      	add	r0, sp, #28
 800b8cc:	f000 fc32 	bl	800c134 <memset>
  if(ethHandle->Instance==ETH)
 800b8d0:	6822      	ldr	r2, [r4, #0]
 800b8d2:	4b39      	ldr	r3, [pc, #228]	; (800b9b8 <HAL_ETH_MspInit+0xf8>)
 800b8d4:	429a      	cmp	r2, r3
 800b8d6:	d16d      	bne.n	800b9b4 <HAL_ETH_MspInit+0xf4>
    __HAL_RCC_ETH_CLK_ENABLE();
 800b8d8:	f5a3 4390 	sub.w	r3, r3, #18432	; 0x4800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b8dc:	2602      	movs	r6, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b8de:	2503      	movs	r5, #3
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b8e0:	240b      	movs	r4, #11
    __HAL_RCC_ETH_CLK_ENABLE();
 800b8e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b8e4:	a907      	add	r1, sp, #28
 800b8e6:	4835      	ldr	r0, [pc, #212]	; (800b9bc <HAL_ETH_MspInit+0xfc>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b8e8:	2700      	movs	r7, #0
    __HAL_RCC_ETH_CLK_ENABLE();
 800b8ea:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800b8ee:	631a      	str	r2, [r3, #48]	; 0x30
 800b8f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b8f2:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 800b8f6:	9200      	str	r2, [sp, #0]
 800b8f8:	9a00      	ldr	r2, [sp, #0]
 800b8fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b8fc:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800b900:	631a      	str	r2, [r3, #48]	; 0x30
 800b902:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b904:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 800b908:	9201      	str	r2, [sp, #4]
 800b90a:	9a01      	ldr	r2, [sp, #4]
 800b90c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b90e:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800b912:	631a      	str	r2, [r3, #48]	; 0x30
 800b914:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b916:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800b91a:	9202      	str	r2, [sp, #8]
 800b91c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b91e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b920:	f042 0204 	orr.w	r2, r2, #4
 800b924:	631a      	str	r2, [r3, #48]	; 0x30
 800b926:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b928:	f002 0204 	and.w	r2, r2, #4
 800b92c:	9203      	str	r2, [sp, #12]
 800b92e:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b930:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b932:	f042 0201 	orr.w	r2, r2, #1
 800b936:	631a      	str	r2, [r3, #48]	; 0x30
 800b938:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b93a:	f002 0201 	and.w	r2, r2, #1
 800b93e:	9204      	str	r2, [sp, #16]
 800b940:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b942:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b944:	f042 0202 	orr.w	r2, r2, #2
 800b948:	631a      	str	r2, [r3, #48]	; 0x30
 800b94a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b94c:	f002 0202 	and.w	r2, r2, #2
 800b950:	9205      	str	r2, [sp, #20]
 800b952:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800b954:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b956:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b95a:	631a      	str	r2, [r3, #48]	; 0x30
 800b95c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b95e:	9608      	str	r6, [sp, #32]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800b960:	f003 0340 	and.w	r3, r3, #64	; 0x40
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b964:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b966:	940b      	str	r4, [sp, #44]	; 0x2c
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800b968:	9306      	str	r3, [sp, #24]
 800b96a:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800b96c:	2332      	movs	r3, #50	; 0x32
 800b96e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b970:	f7f5 fa94 	bl	8000e9c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800b974:	2386      	movs	r3, #134	; 0x86
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b976:	a907      	add	r1, sp, #28
 800b978:	4811      	ldr	r0, [pc, #68]	; (800b9c0 <HAL_ETH_MspInit+0x100>)
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800b97a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b97c:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b97e:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b980:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b982:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b984:	f7f5 fa8a 	bl	8000e9c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800b988:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800b98c:	a907      	add	r1, sp, #28
 800b98e:	480d      	ldr	r0, [pc, #52]	; (800b9c4 <HAL_ETH_MspInit+0x104>)
    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800b990:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b992:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b994:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b996:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b998:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800b99a:	f7f5 fa7f 	bl	8000e9c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800b99e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800b9a2:	a907      	add	r1, sp, #28
 800b9a4:	4808      	ldr	r0, [pc, #32]	; (800b9c8 <HAL_ETH_MspInit+0x108>)
    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800b9a6:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b9a8:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b9aa:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b9ac:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b9ae:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800b9b0:	f7f5 fa74 	bl	8000e9c <HAL_GPIO_Init>
}
 800b9b4:	b00d      	add	sp, #52	; 0x34
 800b9b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b9b8:	40028000 	.word	0x40028000
 800b9bc:	40020800 	.word	0x40020800
 800b9c0:	40020000 	.word	0x40020000
 800b9c4:	40020400 	.word	0x40020400
 800b9c8:	40021800 	.word	0x40021800

0800b9cc <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800b9cc:	b5f0      	push	{r4, r5, r6, r7, lr}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800b9ce:	4604      	mov	r4, r0
{
 800b9d0:	b08d      	sub	sp, #52	; 0x34
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800b9d2:	b930      	cbnz	r0, 800b9e2 <ethernetif_init+0x16>
 800b9d4:	4b46      	ldr	r3, [pc, #280]	; (800baf0 <ethernetif_init+0x124>)
 800b9d6:	f240 2223 	movw	r2, #547	; 0x223
 800b9da:	4946      	ldr	r1, [pc, #280]	; (800baf4 <ethernetif_init+0x128>)
 800b9dc:	4846      	ldr	r0, [pc, #280]	; (800baf8 <ethernetif_init+0x12c>)
 800b9de:	f000 fbb1 	bl	800c144 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800b9e2:	2373      	movs	r3, #115	; 0x73
  heth.Instance = ETH;
 800b9e4:	4845      	ldr	r0, [pc, #276]	; (800bafc <ethernetif_init+0x130>)
  uint8_t macaddress[6]= { MAC_ADDR0, MAC_ADDR1, MAC_ADDR2, MAC_ADDR3, MAC_ADDR4, MAC_ADDR5 };
 800b9e6:	2202      	movs	r2, #2
  heth.Init.MACAddr = macaddress ;
 800b9e8:	a901      	add	r1, sp, #4
  netif->name[0] = IFNAME0;
 800b9ea:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
  netif->name[1] = IFNAME1;
 800b9ee:	2374      	movs	r3, #116	; 0x74
  uint8_t macaddress[6]= { MAC_ADDR0, MAC_ADDR1, MAC_ADDR2, MAC_ADDR3, MAC_ADDR4, MAC_ADDR5 };
 800b9f0:	f88d 2004 	strb.w	r2, [sp, #4]
  netif->name[1] = IFNAME1;
 800b9f4:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800b9f8:	4b41      	ldr	r3, [pc, #260]	; (800bb00 <ethernetif_init+0x134>)
  heth.Instance = ETH;
 800b9fa:	4a42      	ldr	r2, [pc, #264]	; (800bb04 <ethernetif_init+0x138>)
  netif->output = etharp_output;
 800b9fc:	6163      	str	r3, [r4, #20]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800b9fe:	4b42      	ldr	r3, [pc, #264]	; (800bb08 <ethernetif_init+0x13c>)
  heth.Instance = ETH;
 800ba00:	6002      	str	r2, [r0, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800ba02:	2201      	movs	r2, #1
  netif->linkoutput = low_level_output;
 800ba04:	61a3      	str	r3, [r4, #24]
  uint32_t regvalue = 0;
 800ba06:	2300      	movs	r3, #0
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800ba08:	6042      	str	r2, [r0, #4]
  uint32_t regvalue = 0;
 800ba0a:	9300      	str	r3, [sp, #0]
  uint8_t macaddress[6]= { MAC_ADDR0, MAC_ADDR1, MAC_ADDR2, MAC_ADDR3, MAC_ADDR4, MAC_ADDR5 };
 800ba0c:	f88d 3005 	strb.w	r3, [sp, #5]
 800ba10:	f88d 3006 	strb.w	r3, [sp, #6]
 800ba14:	f88d 3007 	strb.w	r3, [sp, #7]
 800ba18:	f88d 3008 	strb.w	r3, [sp, #8]
 800ba1c:	f88d 3009 	strb.w	r3, [sp, #9]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800ba20:	8203      	strh	r3, [r0, #16]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800ba22:	61c3      	str	r3, [r0, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800ba24:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
  heth.Init.MACAddr = macaddress ;
 800ba28:	6141      	str	r1, [r0, #20]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800ba2a:	6203      	str	r3, [r0, #32]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800ba2c:	f44f 6300 	mov.w	r3, #2048	; 0x800
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 800ba30:	6182      	str	r2, [r0, #24]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800ba32:	60c3      	str	r3, [r0, #12]
  heth.Init.Speed = ETH_SPEED_100M;
 800ba34:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ba38:	6083      	str	r3, [r0, #8]
  hal_eth_init_status = HAL_ETH_Init(&heth);
 800ba3a:	f7f5 f8f7 	bl	8000c2c <HAL_ETH_Init>
  if (hal_eth_init_status == HAL_OK)
 800ba3e:	b928      	cbnz	r0, 800ba4c <ethernetif_init+0x80>
    netif->flags |= NETIF_FLAG_LINK_UP;
 800ba40:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 800ba44:	f043 0304 	orr.w	r3, r3, #4
 800ba48:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800ba4c:	2304      	movs	r3, #4
 800ba4e:	4a2f      	ldr	r2, [pc, #188]	; (800bb0c <ethernetif_init+0x140>)
 800ba50:	492f      	ldr	r1, [pc, #188]	; (800bb10 <ethernetif_init+0x144>)
  netif->hwaddr[1] =  MAC_ADDR1;
 800ba52:	2700      	movs	r7, #0
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800ba54:	4829      	ldr	r0, [pc, #164]	; (800bafc <ethernetif_init+0x130>)
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800ba56:	ad05      	add	r5, sp, #20
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800ba58:	f7f4 ff46 	bl	80008e8 <HAL_ETH_DMATxDescListInit>
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800ba5c:	4a2d      	ldr	r2, [pc, #180]	; (800bb14 <ethernetif_init+0x148>)
 800ba5e:	2304      	movs	r3, #4
 800ba60:	492d      	ldr	r1, [pc, #180]	; (800bb18 <ethernetif_init+0x14c>)
 800ba62:	4826      	ldr	r0, [pc, #152]	; (800bafc <ethernetif_init+0x130>)
 800ba64:	f7f4 ff7d 	bl	8000962 <HAL_ETH_DMARxDescListInit>
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800ba68:	2306      	movs	r3, #6
  netif->hwaddr[1] =  MAC_ADDR1;
 800ba6a:	f884 702b 	strb.w	r7, [r4, #43]	; 0x2b
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 800ba6e:	2101      	movs	r1, #1
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800ba70:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  netif->hwaddr[0] =  MAC_ADDR0;
 800ba74:	2302      	movs	r3, #2
  netif->hwaddr[2] =  MAC_ADDR2;
 800ba76:	f884 702c 	strb.w	r7, [r4, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 800ba7a:	a803      	add	r0, sp, #12
  netif->hwaddr[0] =  MAC_ADDR0;
 800ba7c:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
  netif->mtu = 1500;
 800ba80:	f240 53dc 	movw	r3, #1500	; 0x5dc
  netif->hwaddr[3] =  MAC_ADDR3;
 800ba84:	f884 702d 	strb.w	r7, [r4, #45]	; 0x2d
  netif->mtu = 1500;
 800ba88:	8523      	strh	r3, [r4, #40]	; 0x28
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800ba8a:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
  netif->hwaddr[4] =  MAC_ADDR4;
 800ba8e:	f884 702e 	strb.w	r7, [r4, #46]	; 0x2e
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800ba92:	f043 030a 	orr.w	r3, r3, #10
  netif->hwaddr[5] =  MAC_ADDR5;
 800ba96:	f884 702f 	strb.w	r7, [r4, #47]	; 0x2f
  osSemaphoreDef(SEM);
 800ba9a:	9703      	str	r7, [sp, #12]
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800ba9c:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  osSemaphoreDef(SEM);
 800baa0:	9704      	str	r7, [sp, #16]
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 800baa2:	f7f6 f9e9 	bl	8001e78 <osSemaphoreCreate>
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800baa6:	4e1d      	ldr	r6, [pc, #116]	; (800bb1c <ethernetif_init+0x150>)
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 800baa8:	4b1d      	ldr	r3, [pc, #116]	; (800bb20 <ethernetif_init+0x154>)
 800baaa:	6018      	str	r0, [r3, #0]
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800baac:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800baae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800bab0:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800bab4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 800bab8:	4621      	mov	r1, r4
 800baba:	a805      	add	r0, sp, #20
 800babc:	f7f6 f982 	bl	8001dc4 <osThreadCreate>
  HAL_ETH_Start(&heth);
 800bac0:	480e      	ldr	r0, [pc, #56]	; (800bafc <ethernetif_init+0x130>)
 800bac2:	f7f5 f9ad 	bl	8000e20 <HAL_ETH_Start>
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 800bac6:	466a      	mov	r2, sp
 800bac8:	211d      	movs	r1, #29
 800baca:	480c      	ldr	r0, [pc, #48]	; (800bafc <ethernetif_init+0x130>)
 800bacc:	f7f5 f83d 	bl	8000b4a <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 800bad0:	9a00      	ldr	r2, [sp, #0]
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800bad2:	211d      	movs	r1, #29
 800bad4:	4809      	ldr	r0, [pc, #36]	; (800bafc <ethernetif_init+0x130>)
  regvalue |= (PHY_ISFR_INT4);
 800bad6:	f042 020b 	orr.w	r2, r2, #11
 800bada:	9200      	str	r2, [sp, #0]
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800badc:	f7f5 f86f 	bl	8000bbe <HAL_ETH_WritePHYRegister>
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 800bae0:	466a      	mov	r2, sp
 800bae2:	211d      	movs	r1, #29
 800bae4:	4805      	ldr	r0, [pc, #20]	; (800bafc <ethernetif_init+0x130>)
 800bae6:	f7f5 f830 	bl	8000b4a <HAL_ETH_ReadPHYRegister>

  /* initialize the hardware */
  low_level_init(netif);

  return ERR_OK;
}
 800baea:	4638      	mov	r0, r7
 800baec:	b00d      	add	sp, #52	; 0x34
 800baee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800baf0:	08010388 	.word	0x08010388
 800baf4:	0800e073 	.word	0x0800e073
 800baf8:	0800d104 	.word	0x0800d104
 800bafc:	2000d3b0 	.word	0x2000d3b0
 800bb00:	08005add 	.word	0x08005add
 800bb04:	40028000 	.word	0x40028000
 800bb08:	0800b721 	.word	0x0800b721
 800bb0c:	2007d8d0 	.word	0x2007d8d0
 800bb10:	2007c080 	.word	0x2007c080
 800bb14:	2007c100 	.word	0x2007c100
 800bb18:	2007c000 	.word	0x2007c000
 800bb1c:	0800d010 	.word	0x0800d010
 800bb20:	20006bc4 	.word	0x20006bc4

0800bb24 <sys_now>:
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
  return HAL_GetTick();
 800bb24:	f7f4 bd94 	b.w	8000650 <HAL_GetTick>

0800bb28 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800bb28:	4b03      	ldr	r3, [pc, #12]	; (800bb38 <vApplicationGetIdleTaskMemory+0x10>)
 800bb2a:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800bb2c:	4b03      	ldr	r3, [pc, #12]	; (800bb3c <vApplicationGetIdleTaskMemory+0x14>)
 800bb2e:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800bb30:	2380      	movs	r3, #128	; 0x80
 800bb32:	6013      	str	r3, [r2, #0]
 800bb34:	4770      	bx	lr
 800bb36:	bf00      	nop
 800bb38:	20006dc8 	.word	0x20006dc8
 800bb3c:	20006bc8 	.word	0x20006bc8

0800bb40 <StartThread>:
  * @retval None
  */
static void StartThread(void const * argument)
{
  /* Create tcp_ip stack thread */
  tcpip_init(NULL, NULL);
 800bb40:	2100      	movs	r1, #0
  IP_ADDR4(&ipaddr,IP_ADDR0,IP_ADDR1,IP_ADDR2,IP_ADDR3);
  IP_ADDR4(&netmask,NETMASK_ADDR0,NETMASK_ADDR1,NETMASK_ADDR2,NETMASK_ADDR3);
  IP_ADDR4(&gw,GW_ADDR0,GW_ADDR1,GW_ADDR2,GW_ADDR3);

  /* add the network interface */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800bb42:	4c18      	ldr	r4, [pc, #96]	; (800bba4 <StartThread+0x64>)
{
 800bb44:	b500      	push	{lr}
  tcpip_init(NULL, NULL);
 800bb46:	4608      	mov	r0, r1
{
 800bb48:	b089      	sub	sp, #36	; 0x24
  tcpip_init(NULL, NULL);
 800bb4a:	f7f8 f85b 	bl	8003c04 <tcpip_init>
  IP_ADDR4(&ipaddr,IP_ADDR0,IP_ADDR1,IP_ADDR2,IP_ADDR3);
 800bb4e:	4b16      	ldr	r3, [pc, #88]	; (800bba8 <StartThread+0x68>)
  IP_ADDR4(&gw,GW_ADDR0,GW_ADDR1,GW_ADDR2,GW_ADDR3);
 800bb50:	4a16      	ldr	r2, [pc, #88]	; (800bbac <StartThread+0x6c>)
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800bb52:	a905      	add	r1, sp, #20
  IP_ADDR4(&ipaddr,IP_ADDR0,IP_ADDR1,IP_ADDR2,IP_ADDR3);
 800bb54:	9305      	str	r3, [sp, #20]
  IP_ADDR4(&netmask,NETMASK_ADDR0,NETMASK_ADDR1,NETMASK_ADDR2,NETMASK_ADDR3);
 800bb56:	f64f 73ff 	movw	r3, #65535	; 0xffff
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800bb5a:	4620      	mov	r0, r4
  IP_ADDR4(&netmask,NETMASK_ADDR0,NETMASK_ADDR1,NETMASK_ADDR2,NETMASK_ADDR3);
 800bb5c:	9306      	str	r3, [sp, #24]
  IP_ADDR4(&gw,GW_ADDR0,GW_ADDR1,GW_ADDR2,GW_ADDR3);
 800bb5e:	ab08      	add	r3, sp, #32
 800bb60:	f843 2d04 	str.w	r2, [r3, #-4]!
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800bb64:	4a12      	ldr	r2, [pc, #72]	; (800bbb0 <StartThread+0x70>)
 800bb66:	9202      	str	r2, [sp, #8]
 800bb68:	4a12      	ldr	r2, [pc, #72]	; (800bbb4 <StartThread+0x74>)
 800bb6a:	9201      	str	r2, [sp, #4]
 800bb6c:	2200      	movs	r2, #0
 800bb6e:	9200      	str	r2, [sp, #0]
 800bb70:	aa06      	add	r2, sp, #24
 800bb72:	f7fb fa49 	bl	8007008 <netif_add>

  /*  Registers the default network interface. */
  netif_set_default(&gnetif);
 800bb76:	4620      	mov	r0, r4
 800bb78:	f7fb fade 	bl	8007138 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800bb7c:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
  {
    /* When the netif is fully configured this function must be called.*/
    netif_set_up(&gnetif);
 800bb80:	4620      	mov	r0, r4
  if (netif_is_link_up(&gnetif))
 800bb82:	075b      	lsls	r3, r3, #29
 800bb84:	d50a      	bpl.n	800bb9c <StartThread+0x5c>
    netif_set_up(&gnetif);
 800bb86:	f7fb fadd 	bl	8007144 <netif_set_up>
  httpd_init();
 800bb8a:	f7f8 fb47 	bl	800421c <httpd_init>
  User_notification(&gnetif);
 800bb8e:	4805      	ldr	r0, [pc, #20]	; (800bba4 <StartThread+0x64>)
 800bb90:	f7ff fdb8 	bl	800b704 <User_notification>
	osThreadTerminate(NULL);
 800bb94:	2000      	movs	r0, #0
 800bb96:	f7f6 f93d 	bl	8001e14 <osThreadTerminate>
 800bb9a:	e7fb      	b.n	800bb94 <StartThread+0x54>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800bb9c:	f7fb faec 	bl	8007178 <netif_set_down>
 800bba0:	e7f3      	b.n	800bb8a <StartThread+0x4a>
 800bba2:	bf00      	nop
 800bba4:	2000d3fc 	.word	0x2000d3fc
 800bba8:	7bd7fea9 	.word	0x7bd7fea9
 800bbac:	22d7fea9 	.word	0x22d7fea9
 800bbb0:	08003be9 	.word	0x08003be9
 800bbb4:	0800b9cd 	.word	0x0800b9cd

0800bbb8 <main>:
{
 800bbb8:	b580      	push	{r7, lr}
 800bbba:	b09a      	sub	sp, #104	; 0x68
  /* Configure the MPU as Normal Non Cacheable for Ethernet Buffers in the SRAM2 */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
  MPU_InitStruct.BaseAddress = 0x2007C000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800bbbc:	2400      	movs	r4, #0
  HAL_MPU_Disable();
 800bbbe:	f7f4 fdb7 	bl	8000730 <HAL_MPU_Disable>
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800bbc2:	2501      	movs	r5, #1
  MPU_InitStruct.BaseAddress = 0x2007C000;
 800bbc4:	4fa2      	ldr	r7, [pc, #648]	; (800be50 <main+0x298>)
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 800bbc6:	230d      	movs	r3, #13
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800bbc8:	2603      	movs	r6, #3
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
  MPU_InitStruct.SubRegionDisable = 0x00;
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800bbca:	a80d      	add	r0, sp, #52	; 0x34
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 800bbcc:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800bbd0:	f88d 5034 	strb.w	r5, [sp, #52]	; 0x34
  MPU_InitStruct.BaseAddress = 0x2007C000;
 800bbd4:	970e      	str	r7, [sp, #56]	; 0x38
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800bbd6:	f88d 603f 	strb.w	r6, [sp, #63]	; 0x3f
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800bbda:	f88d 4043 	strb.w	r4, [sp, #67]	; 0x43
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800bbde:	f88d 4042 	strb.w	r4, [sp, #66]	; 0x42
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800bbe2:	f88d 5041 	strb.w	r5, [sp, #65]	; 0x41
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800bbe6:	f88d 4035 	strb.w	r4, [sp, #53]	; 0x35
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 800bbea:	f88d 503e 	strb.w	r5, [sp, #62]	; 0x3e
  MPU_InitStruct.SubRegionDisable = 0x00;
 800bbee:	f88d 403d 	strb.w	r4, [sp, #61]	; 0x3d
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 800bbf2:	f88d 4040 	strb.w	r4, [sp, #64]	; 0x40
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800bbf6:	f7f4 fdbd 	bl	8000774 <HAL_MPU_ConfigRegion>

  /* Configure the MPU as Device for Ethernet Descriptors in the SRAM2 */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
  MPU_InitStruct.BaseAddress = 0x2007C000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 800bbfa:	2307      	movs	r3, #7
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
  MPU_InitStruct.SubRegionDisable = 0x00;
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800bbfc:	a80d      	add	r0, sp, #52	; 0x34
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800bbfe:	f88d 5034 	strb.w	r5, [sp, #52]	; 0x34
  MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 800bc02:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
  MPU_InitStruct.BaseAddress = 0x2007C000;
 800bc06:	970e      	str	r7, [sp, #56]	; 0x38
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800bc08:	f88d 603f 	strb.w	r6, [sp, #63]	; 0x3f
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 800bc0c:	f88d 5043 	strb.w	r5, [sp, #67]	; 0x43
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800bc10:	f88d 4042 	strb.w	r4, [sp, #66]	; 0x42
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800bc14:	f88d 5041 	strb.w	r5, [sp, #65]	; 0x41
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 800bc18:	f88d 5035 	strb.w	r5, [sp, #53]	; 0x35
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800bc1c:	f88d 403e 	strb.w	r4, [sp, #62]	; 0x3e
  MPU_InitStruct.SubRegionDisable = 0x00;
 800bc20:	f88d 403d 	strb.w	r4, [sp, #61]	; 0x3d
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 800bc24:	f88d 4040 	strb.w	r4, [sp, #64]	; 0x40
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800bc28:	f7f4 fda4 	bl	8000774 <HAL_MPU_ConfigRegion>

  /* Enable the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800bc2c:	2004      	movs	r0, #4
 800bc2e:	f7f4 fd8f 	bl	8000750 <HAL_MPU_Enable>
  __ASM volatile ("dsb 0xF":::"memory");
 800bc32:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800bc36:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800bc3a:	4b86      	ldr	r3, [pc, #536]	; (800be54 <main+0x29c>)
 800bc3c:	f8c3 4250 	str.w	r4, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800bc40:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800bc44:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800bc48:	695a      	ldr	r2, [r3, #20]
 800bc4a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800bc4e:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800bc50:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800bc54:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800bc58:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800bc5c:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 800bc60:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800bc64:	f643 76e0 	movw	r6, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800bc68:	f3c2 04c9 	ubfx	r4, r2, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800bc6c:	f3c2 324e 	ubfx	r2, r2, #13, #15
 800bc70:	07a5      	lsls	r5, r4, #30
 800bc72:	0152      	lsls	r2, r2, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800bc74:	ea02 0e06 	and.w	lr, r2, r6
 800bc78:	4628      	mov	r0, r5
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800bc7a:	4621      	mov	r1, r4
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800bc7c:	ea4e 0700 	orr.w	r7, lr, r0
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800bc80:	3901      	subs	r1, #1
 800bc82:	f100 4040 	add.w	r0, r0, #3221225472	; 0xc0000000
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800bc86:	f8c3 7260 	str.w	r7, [r3, #608]	; 0x260
      } while (ways-- != 0U);
 800bc8a:	1c4f      	adds	r7, r1, #1
 800bc8c:	d1f6      	bne.n	800bc7c <main+0xc4>
 800bc8e:	3a20      	subs	r2, #32
    } while(sets-- != 0U);
 800bc90:	f112 0f20 	cmn.w	r2, #32
 800bc94:	d1ee      	bne.n	800bc74 <main+0xbc>
 800bc96:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800bc9a:	695a      	ldr	r2, [r3, #20]
 800bc9c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800bca0:	615a      	str	r2, [r3, #20]
 800bca2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800bca6:	f3bf 8f6f 	isb	sy
  __HAL_RCC_PWR_CLK_ENABLE();
 800bcaa:	4c6b      	ldr	r4, [pc, #428]	; (800be58 <main+0x2a0>)
  HAL_Init();
 800bcac:	f7f4 fcb8 	bl	8000620 <HAL_Init>
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800bcb0:	2502      	movs	r5, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800bcb2:	2601      	movs	r6, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 800bcb4:	6c23      	ldr	r3, [r4, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLR = 7;
 800bcb6:	2707      	movs	r7, #7
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800bcb8:	a80d      	add	r0, sp, #52	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800bcba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bcbe:	6423      	str	r3, [r4, #64]	; 0x40
 800bcc0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bcc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bcc6:	9306      	str	r3, [sp, #24]
 800bcc8:	9b06      	ldr	r3, [sp, #24]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800bcca:	4b64      	ldr	r3, [pc, #400]	; (800be5c <main+0x2a4>)
 800bccc:	681a      	ldr	r2, [r3, #0]
 800bcce:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800bcd2:	601a      	str	r2, [r3, #0]
 800bcd4:	681b      	ldr	r3, [r3, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800bcd6:	960d      	str	r6, [sp, #52]	; 0x34
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800bcd8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800bcdc:	9513      	str	r5, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800bcde:	9517      	str	r5, [sp, #92]	; 0x5c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800bce0:	9307      	str	r3, [sp, #28]
 800bce2:	9b07      	ldr	r3, [sp, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800bce4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLR = 7;
 800bce8:	9719      	str	r7, [sp, #100]	; 0x64
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800bcea:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800bcec:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800bcf0:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = 25;
 800bcf2:	2319      	movs	r3, #25
 800bcf4:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 400;
 800bcf6:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800bcfa:	9316      	str	r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800bcfc:	2309      	movs	r3, #9
 800bcfe:	9318      	str	r3, [sp, #96]	; 0x60
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800bd00:	f7f5 f9f4 	bl	80010ec <HAL_RCC_OscConfig>
  if(ret != HAL_OK)
 800bd04:	b100      	cbz	r0, 800bd08 <main+0x150>
 800bd06:	e7fe      	b.n	800bd06 <main+0x14e>
  ret = HAL_PWREx_EnableOverDrive();
 800bd08:	f7f5 f9b8 	bl	800107c <HAL_PWREx_EnableOverDrive>
  if(ret != HAL_OK)
 800bd0c:	b100      	cbz	r0, 800bd10 <main+0x158>
 800bd0e:	e7fe      	b.n	800bd0e <main+0x156>
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800bd10:	230f      	movs	r3, #15
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800bd12:	900a      	str	r0, [sp, #40]	; 0x28
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7);
 800bd14:	4639      	mov	r1, r7
 800bd16:	a808      	add	r0, sp, #32
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800bd18:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800bd1a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800bd1e:	9509      	str	r5, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800bd20:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800bd22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bd26:	930c      	str	r3, [sp, #48]	; 0x30
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7);
 800bd28:	f7f5 fbd2 	bl	80014d0 <HAL_RCC_ClockConfig>
  if(ret != HAL_OK)
 800bd2c:	4605      	mov	r5, r0
 800bd2e:	b100      	cbz	r0, 800bd32 <main+0x17a>
 800bd30:	e7fe      	b.n	800bd30 <main+0x178>
  SCB_EnableDCache();
}

static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bd32:	4601      	mov	r1, r0
 800bd34:	2214      	movs	r2, #20
 800bd36:	a80d      	add	r0, sp, #52	; 0x34
 800bd38:	f000 f9fc 	bl	800c134 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800bd3c:	6b23      	ldr	r3, [r4, #48]	; 0x30
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOG_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800bd3e:	462a      	mov	r2, r5
 800bd40:	f244 0181 	movw	r1, #16513	; 0x4081
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800bd44:	f043 0304 	orr.w	r3, r3, #4
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800bd48:	4845      	ldr	r0, [pc, #276]	; (800be60 <main+0x2a8>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800bd4a:	6323      	str	r3, [r4, #48]	; 0x30
 800bd4c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800bd4e:	f003 0304 	and.w	r3, r3, #4
 800bd52:	9301      	str	r3, [sp, #4]
 800bd54:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800bd56:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800bd58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd5c:	6323      	str	r3, [r4, #48]	; 0x30
 800bd5e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800bd60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd64:	9302      	str	r3, [sp, #8]
 800bd66:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800bd68:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800bd6a:	f043 0301 	orr.w	r3, r3, #1
 800bd6e:	6323      	str	r3, [r4, #48]	; 0x30
 800bd70:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800bd72:	f003 0301 	and.w	r3, r3, #1
 800bd76:	9303      	str	r3, [sp, #12]
 800bd78:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800bd7a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800bd7c:	f043 0302 	orr.w	r3, r3, #2
 800bd80:	6323      	str	r3, [r4, #48]	; 0x30
 800bd82:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800bd84:	f003 0302 	and.w	r3, r3, #2
 800bd88:	9304      	str	r3, [sp, #16]
 800bd8a:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800bd8c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800bd8e:	f043 0308 	orr.w	r3, r3, #8
 800bd92:	6323      	str	r3, [r4, #48]	; 0x30
 800bd94:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800bd96:	f003 0308 	and.w	r3, r3, #8
 800bd9a:	9305      	str	r3, [sp, #20]
 800bd9c:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800bd9e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800bda0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bda4:	6323      	str	r3, [r4, #48]	; 0x30
 800bda6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800bda8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bdac:	9308      	str	r3, [sp, #32]
 800bdae:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800bdb0:	f7f5 f95e 	bl	8001070 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800bdb4:	462a      	mov	r2, r5
 800bdb6:	2140      	movs	r1, #64	; 0x40
 800bdb8:	482a      	ldr	r0, [pc, #168]	; (800be64 <main+0x2ac>)
 800bdba:	f7f5 f959 	bl	8001070 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800bdbe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800bdc2:	a90d      	add	r1, sp, #52	; 0x34
 800bdc4:	4828      	ldr	r0, [pc, #160]	; (800be68 <main+0x2b0>)
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800bdc6:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800bdc8:	4b28      	ldr	r3, [pc, #160]	; (800be6c <main+0x2b4>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bdca:	950f      	str	r5, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800bdcc:	930e      	str	r3, [sp, #56]	; 0x38
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800bdce:	f7f5 f865 	bl	8000e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800bdd2:	f244 0381 	movw	r3, #16513	; 0x4081
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bdd6:	a90d      	add	r1, sp, #52	; 0x34
 800bdd8:	4821      	ldr	r0, [pc, #132]	; (800be60 <main+0x2a8>)
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800bdda:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800bddc:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bdde:	950f      	str	r5, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bde0:	9510      	str	r5, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bde2:	f7f5 f85b 	bl	8000e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800bde6:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800bde8:	a90d      	add	r1, sp, #52	; 0x34
 800bdea:	481e      	ldr	r0, [pc, #120]	; (800be64 <main+0x2ac>)
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800bdec:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800bdee:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bdf0:	950f      	str	r5, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bdf2:	9510      	str	r5, [sp, #64]	; 0x40
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800bdf4:	f7f5 f852 	bl	8000e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800bdf8:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800bdfa:	a90d      	add	r1, sp, #52	; 0x34
 800bdfc:	4819      	ldr	r0, [pc, #100]	; (800be64 <main+0x2ac>)
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800bdfe:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800be00:	950e      	str	r5, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800be02:	950f      	str	r5, [sp, #60]	; 0x3c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800be04:	f7f5 f84a 	bl	8000e9c <HAL_GPIO_Init>
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800be08:	4819      	ldr	r0, [pc, #100]	; (800be70 <main+0x2b8>)
  huart3.Init.BaudRate = 115200;
 800be0a:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800be0e:	4a19      	ldr	r2, [pc, #100]	; (800be74 <main+0x2bc>)
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800be10:	6085      	str	r5, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800be12:	60c5      	str	r5, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800be14:	6105      	str	r5, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800be16:	6185      	str	r5, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800be18:	61c5      	str	r5, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800be1a:	6205      	str	r5, [r0, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800be1c:	6245      	str	r5, [r0, #36]	; 0x24
  huart3.Init.BaudRate = 115200;
 800be1e:	e880 000c 	stmia.w	r0, {r2, r3}
  huart3.Init.Mode = UART_MODE_TX_RX;
 800be22:	230c      	movs	r3, #12
 800be24:	6143      	str	r3, [r0, #20]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800be26:	f7f5 ff93 	bl	8001d50 <HAL_UART_Init>
 800be2a:	4606      	mov	r6, r0
 800be2c:	b100      	cbz	r0, 800be30 <main+0x278>
 800be2e:	e7fe      	b.n	800be2e <main+0x276>
  osThreadDef(Start, StartThread, osPriorityNormal, 0, configMINIMAL_STACK_SIZE * 5);
 800be30:	4d11      	ldr	r5, [pc, #68]	; (800be78 <main+0x2c0>)
 800be32:	ac0d      	add	r4, sp, #52	; 0x34
 800be34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800be36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800be38:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800be3c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(Start), NULL);
 800be40:	4631      	mov	r1, r6
 800be42:	a80d      	add	r0, sp, #52	; 0x34
 800be44:	f7f5 ffbe 	bl	8001dc4 <osThreadCreate>
  osKernelStart();
 800be48:	f7f5 ffb0 	bl	8001dac <osKernelStart>
 800be4c:	e7fe      	b.n	800be4c <main+0x294>
 800be4e:	bf00      	nop
 800be50:	2007c000 	.word	0x2007c000
 800be54:	e000ed00 	.word	0xe000ed00
 800be58:	40023800 	.word	0x40023800
 800be5c:	40007000 	.word	0x40007000
 800be60:	40020400 	.word	0x40020400
 800be64:	40021800 	.word	0x40021800
 800be68:	40020800 	.word	0x40020800
 800be6c:	10110000 	.word	0x10110000
 800be70:	2000d448 	.word	0x2000d448
 800be74:	40004800 	.word	0x40004800
 800be78:	0800d02c 	.word	0x0800d02c

0800be7c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 800be7c:	6803      	ldr	r3, [r0, #0]
 800be7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800be82:	d101      	bne.n	800be88 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 800be84:	f7f4 bbd8 	b.w	8000638 <HAL_IncTick>
 800be88:	4770      	bx	lr
	...

0800be8c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800be8c:	4b0e      	ldr	r3, [pc, #56]	; (800bec8 <HAL_MspInit+0x3c>)
{
 800be8e:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 800be90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  __HAL_RCC_SYSCFG_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800be92:	210f      	movs	r1, #15
 800be94:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 800be98:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800be9c:	641a      	str	r2, [r3, #64]	; 0x40
 800be9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bea0:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800bea4:	9200      	str	r2, [sp, #0]
 800bea6:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800bea8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800beaa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800beae:	645a      	str	r2, [r3, #68]	; 0x44
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800beb0:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800beb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800beb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800beb8:	9301      	str	r3, [sp, #4]
 800beba:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800bebc:	f7f4 fbf2 	bl	80006a4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800bec0:	b003      	add	sp, #12
 800bec2:	f85d fb04 	ldr.w	pc, [sp], #4
 800bec6:	bf00      	nop
 800bec8:	40023800 	.word	0x40023800

0800becc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800becc:	b510      	push	{r4, lr}
 800bece:	b088      	sub	sp, #32
 800bed0:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bed2:	2214      	movs	r2, #20
 800bed4:	2100      	movs	r1, #0
 800bed6:	a803      	add	r0, sp, #12
 800bed8:	f000 f92c 	bl	800c134 <memset>
  if(huart->Instance==USART3)
 800bedc:	6822      	ldr	r2, [r4, #0]
 800bede:	4b13      	ldr	r3, [pc, #76]	; (800bf2c <HAL_UART_MspInit+0x60>)
 800bee0:	429a      	cmp	r2, r3
 800bee2:	d120      	bne.n	800bf26 <HAL_UART_MspInit+0x5a>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800bee4:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800bee8:	a903      	add	r1, sp, #12
 800beea:	4811      	ldr	r0, [pc, #68]	; (800bf30 <HAL_UART_MspInit+0x64>)
    __HAL_RCC_USART3_CLK_ENABLE();
 800beec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800beee:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800bef2:	641a      	str	r2, [r3, #64]	; 0x40
 800bef4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bef6:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 800befa:	9201      	str	r2, [sp, #4]
 800befc:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800befe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bf00:	f042 0208 	orr.w	r2, r2, #8
 800bf04:	631a      	str	r2, [r3, #48]	; 0x30
 800bf06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf08:	f003 0308 	and.w	r3, r3, #8
 800bf0c:	9302      	str	r3, [sp, #8]
 800bf0e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800bf10:	f44f 7340 	mov.w	r3, #768	; 0x300
 800bf14:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bf16:	2302      	movs	r3, #2
 800bf18:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bf1a:	2303      	movs	r3, #3
 800bf1c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800bf1e:	2307      	movs	r3, #7
 800bf20:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800bf22:	f7f4 ffbb 	bl	8000e9c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800bf26:	b008      	add	sp, #32
 800bf28:	bd10      	pop	{r4, pc}
 800bf2a:	bf00      	nop
 800bf2c:	40004800 	.word	0x40004800
 800bf30:	40020c00 	.word	0x40020c00

0800bf34 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800bf34:	b510      	push	{r4, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0); 
 800bf36:	4601      	mov	r1, r0
{
 800bf38:	b088      	sub	sp, #32
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0); 
 800bf3a:	2200      	movs	r2, #0
 800bf3c:	201c      	movs	r0, #28
 800bf3e:	f7f4 fbb1 	bl	80006a4 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn); 
 800bf42:	201c      	movs	r0, #28
 800bf44:	f7f4 fbe6 	bl	8000714 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800bf48:	4b15      	ldr	r3, [pc, #84]	; (800bfa0 <HAL_InitTick+0x6c>)
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800bf4a:	a901      	add	r1, sp, #4
 800bf4c:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM2_CLK_ENABLE();
 800bf4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800bf50:	4c14      	ldr	r4, [pc, #80]	; (800bfa4 <HAL_InitTick+0x70>)
  __HAL_RCC_TIM2_CLK_ENABLE();
 800bf52:	f042 0201 	orr.w	r2, r2, #1
 800bf56:	641a      	str	r2, [r3, #64]	; 0x40
 800bf58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf5a:	f003 0301 	and.w	r3, r3, #1
 800bf5e:	9302      	str	r3, [sp, #8]
 800bf60:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800bf62:	f7f5 fb7b 	bl	800165c <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800bf66:	f7f5 fb59 	bl	800161c <HAL_RCC_GetPCLK1Freq>
  htim2.Instance = TIM2;
 800bf6a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800bf6e:	0040      	lsls	r0, r0, #1
  htim2.Instance = TIM2;
 800bf70:	6023      	str	r3, [r4, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000 / 1000) - 1;
 800bf72:	f240 33e7 	movw	r3, #999	; 0x3e7
 800bf76:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800bf78:	4b0b      	ldr	r3, [pc, #44]	; (800bfa8 <HAL_InitTick+0x74>)
 800bf7a:	fbb0 f0f3 	udiv	r0, r0, r3
 800bf7e:	3801      	subs	r0, #1
  htim2.Init.Prescaler = uwPrescalerValue;
  htim2.Init.ClockDivision = 0;
 800bf80:	2300      	movs	r3, #0
  htim2.Init.Prescaler = uwPrescalerValue;
 800bf82:	6060      	str	r0, [r4, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 800bf84:	4620      	mov	r0, r4
  htim2.Init.ClockDivision = 0;
 800bf86:	6123      	str	r3, [r4, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800bf88:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 800bf8a:	f7f5 fcb7 	bl	80018fc <HAL_TIM_Base_Init>
 800bf8e:	b920      	cbnz	r0, 800bf9a <HAL_InitTick+0x66>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 800bf90:	4620      	mov	r0, r4
 800bf92:	f7f5 fb83 	bl	800169c <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 800bf96:	b008      	add	sp, #32
 800bf98:	bd10      	pop	{r4, pc}
  return HAL_ERROR;
 800bf9a:	2001      	movs	r0, #1
 800bf9c:	e7fb      	b.n	800bf96 <HAL_InitTick+0x62>
 800bf9e:	bf00      	nop
 800bfa0:	40023800 	.word	0x40023800
 800bfa4:	2000d8cc 	.word	0x2000d8cc
 800bfa8:	000f4240 	.word	0x000f4240

0800bfac <NMI_Handler>:
 800bfac:	4770      	bx	lr

0800bfae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800bfae:	e7fe      	b.n	800bfae <HardFault_Handler>

0800bfb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800bfb0:	e7fe      	b.n	800bfb0 <MemManage_Handler>

0800bfb2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800bfb2:	e7fe      	b.n	800bfb2 <BusFault_Handler>

0800bfb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800bfb4:	e7fe      	b.n	800bfb4 <UsageFault_Handler>

0800bfb6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800bfb6:	4770      	bx	lr

0800bfb8 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800bfb8:	4801      	ldr	r0, [pc, #4]	; (800bfc0 <TIM2_IRQHandler+0x8>)
 800bfba:	f7f5 bb89 	b.w	80016d0 <HAL_TIM_IRQHandler>
 800bfbe:	bf00      	nop
 800bfc0:	2000d8cc 	.word	0x2000d8cc

0800bfc4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800bfc4:	b570      	push	{r4, r5, r6, lr}
 800bfc6:	460e      	mov	r6, r1
 800bfc8:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800bfca:	460c      	mov	r4, r1
 800bfcc:	1ba3      	subs	r3, r4, r6
 800bfce:	429d      	cmp	r5, r3
 800bfd0:	dc01      	bgt.n	800bfd6 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 800bfd2:	4628      	mov	r0, r5
 800bfd4:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 800bfd6:	f3af 8000 	nop.w
 800bfda:	f804 0b01 	strb.w	r0, [r4], #1
 800bfde:	e7f5      	b.n	800bfcc <_read+0x8>

0800bfe0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800bfe0:	b570      	push	{r4, r5, r6, lr}
 800bfe2:	460e      	mov	r6, r1
 800bfe4:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800bfe6:	460c      	mov	r4, r1
 800bfe8:	1ba3      	subs	r3, r4, r6
 800bfea:	429d      	cmp	r5, r3
 800bfec:	dc01      	bgt.n	800bff2 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 800bfee:	4628      	mov	r0, r5
 800bff0:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 800bff2:	f814 0b01 	ldrb.w	r0, [r4], #1
 800bff6:	f3af 8000 	nop.w
 800bffa:	e7f5      	b.n	800bfe8 <_write+0x8>

0800bffc <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800bffc:	4b09      	ldr	r3, [pc, #36]	; (800c024 <_sbrk+0x28>)
{
 800bffe:	4602      	mov	r2, r0
	if (heap_end == 0)
 800c000:	6819      	ldr	r1, [r3, #0]
 800c002:	b909      	cbnz	r1, 800c008 <_sbrk+0xc>
		heap_end = &end;
 800c004:	4908      	ldr	r1, [pc, #32]	; (800c028 <_sbrk+0x2c>)
 800c006:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 800c008:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 800c00a:	4669      	mov	r1, sp
 800c00c:	4402      	add	r2, r0
 800c00e:	428a      	cmp	r2, r1
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 800c010:	bf83      	ittte	hi
 800c012:	220c      	movhi	r2, #12
 800c014:	4b05      	ldrhi	r3, [pc, #20]	; (800c02c <_sbrk+0x30>)
		return (caddr_t) -1;
 800c016:	f04f 30ff 	movhi.w	r0, #4294967295
	}

	heap_end += incr;
 800c01a:	601a      	strls	r2, [r3, #0]
		errno = ENOMEM;
 800c01c:	bf88      	it	hi
 800c01e:	601a      	strhi	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 800c020:	4770      	bx	lr
 800c022:	bf00      	nop
 800c024:	20006e1c 	.word	0x20006e1c
 800c028:	2000d910 	.word	0x2000d910
 800c02c:	2000d3a8 	.word	0x2000d3a8

0800c030 <_close>:

int _close(int file)
{
	return -1;
}
 800c030:	f04f 30ff 	mov.w	r0, #4294967295
 800c034:	4770      	bx	lr

0800c036 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800c036:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 800c03a:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 800c03c:	604b      	str	r3, [r1, #4]
}
 800c03e:	4770      	bx	lr

0800c040 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 800c040:	2001      	movs	r0, #1
 800c042:	4770      	bx	lr

0800c044 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800c044:	2000      	movs	r0, #0
 800c046:	4770      	bx	lr

0800c048 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800c048:	4b05      	ldr	r3, [pc, #20]	; (800c060 <SystemInit+0x18>)
 800c04a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800c04e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800c052:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800c056:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800c05a:	609a      	str	r2, [r3, #8]
 800c05c:	4770      	bx	lr
 800c05e:	bf00      	nop
 800c060:	e000ed00 	.word	0xe000ed00

0800c064 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800c064:	f8df d034 	ldr.w	sp, [pc, #52]	; 800c09c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800c068:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800c06a:	e003      	b.n	800c074 <LoopCopyDataInit>

0800c06c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800c06c:	4b0c      	ldr	r3, [pc, #48]	; (800c0a0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800c06e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800c070:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800c072:	3104      	adds	r1, #4

0800c074 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800c074:	480b      	ldr	r0, [pc, #44]	; (800c0a4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800c076:	4b0c      	ldr	r3, [pc, #48]	; (800c0a8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800c078:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800c07a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800c07c:	d3f6      	bcc.n	800c06c <CopyDataInit>
  ldr  r2, =_sbss
 800c07e:	4a0b      	ldr	r2, [pc, #44]	; (800c0ac <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800c080:	e002      	b.n	800c088 <LoopFillZerobss>

0800c082 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800c082:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800c084:	f842 3b04 	str.w	r3, [r2], #4

0800c088 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800c088:	4b09      	ldr	r3, [pc, #36]	; (800c0b0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800c08a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800c08c:	d3f9      	bcc.n	800c082 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800c08e:	f7ff ffdb 	bl	800c048 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800c092:	f000 f811 	bl	800c0b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800c096:	f7ff fd8f 	bl	800bbb8 <main>
  bx  lr    
 800c09a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800c09c:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 800c0a0:	08010468 	.word	0x08010468
  ldr  r0, =_sdata
 800c0a4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800c0a8:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 800c0ac:	2000007c 	.word	0x2000007c
  ldr  r3, = _ebss
 800c0b0:	2000d90c 	.word	0x2000d90c

0800c0b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800c0b4:	e7fe      	b.n	800c0b4 <ADC_IRQHandler>
	...

0800c0b8 <__libc_init_array>:
 800c0b8:	b570      	push	{r4, r5, r6, lr}
 800c0ba:	4e0d      	ldr	r6, [pc, #52]	; (800c0f0 <__libc_init_array+0x38>)
 800c0bc:	4c0d      	ldr	r4, [pc, #52]	; (800c0f4 <__libc_init_array+0x3c>)
 800c0be:	1ba4      	subs	r4, r4, r6
 800c0c0:	10a4      	asrs	r4, r4, #2
 800c0c2:	2500      	movs	r5, #0
 800c0c4:	42a5      	cmp	r5, r4
 800c0c6:	d109      	bne.n	800c0dc <__libc_init_array+0x24>
 800c0c8:	4e0b      	ldr	r6, [pc, #44]	; (800c0f8 <__libc_init_array+0x40>)
 800c0ca:	4c0c      	ldr	r4, [pc, #48]	; (800c0fc <__libc_init_array+0x44>)
 800c0cc:	f000 ff94 	bl	800cff8 <_init>
 800c0d0:	1ba4      	subs	r4, r4, r6
 800c0d2:	10a4      	asrs	r4, r4, #2
 800c0d4:	2500      	movs	r5, #0
 800c0d6:	42a5      	cmp	r5, r4
 800c0d8:	d105      	bne.n	800c0e6 <__libc_init_array+0x2e>
 800c0da:	bd70      	pop	{r4, r5, r6, pc}
 800c0dc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c0e0:	4798      	blx	r3
 800c0e2:	3501      	adds	r5, #1
 800c0e4:	e7ee      	b.n	800c0c4 <__libc_init_array+0xc>
 800c0e6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c0ea:	4798      	blx	r3
 800c0ec:	3501      	adds	r5, #1
 800c0ee:	e7f2      	b.n	800c0d6 <__libc_init_array+0x1e>
 800c0f0:	08010460 	.word	0x08010460
 800c0f4:	08010460 	.word	0x08010460
 800c0f8:	08010460 	.word	0x08010460
 800c0fc:	08010464 	.word	0x08010464

0800c100 <memcmp>:
 800c100:	b510      	push	{r4, lr}
 800c102:	3901      	subs	r1, #1
 800c104:	4402      	add	r2, r0
 800c106:	4290      	cmp	r0, r2
 800c108:	d101      	bne.n	800c10e <memcmp+0xe>
 800c10a:	2000      	movs	r0, #0
 800c10c:	bd10      	pop	{r4, pc}
 800c10e:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c112:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c116:	42a3      	cmp	r3, r4
 800c118:	d0f5      	beq.n	800c106 <memcmp+0x6>
 800c11a:	1b18      	subs	r0, r3, r4
 800c11c:	bd10      	pop	{r4, pc}

0800c11e <memcpy>:
 800c11e:	b510      	push	{r4, lr}
 800c120:	1e43      	subs	r3, r0, #1
 800c122:	440a      	add	r2, r1
 800c124:	4291      	cmp	r1, r2
 800c126:	d100      	bne.n	800c12a <memcpy+0xc>
 800c128:	bd10      	pop	{r4, pc}
 800c12a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c12e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c132:	e7f7      	b.n	800c124 <memcpy+0x6>

0800c134 <memset>:
 800c134:	4402      	add	r2, r0
 800c136:	4603      	mov	r3, r0
 800c138:	4293      	cmp	r3, r2
 800c13a:	d100      	bne.n	800c13e <memset+0xa>
 800c13c:	4770      	bx	lr
 800c13e:	f803 1b01 	strb.w	r1, [r3], #1
 800c142:	e7f9      	b.n	800c138 <memset+0x4>

0800c144 <iprintf>:
 800c144:	b40f      	push	{r0, r1, r2, r3}
 800c146:	4b0a      	ldr	r3, [pc, #40]	; (800c170 <iprintf+0x2c>)
 800c148:	b513      	push	{r0, r1, r4, lr}
 800c14a:	681c      	ldr	r4, [r3, #0]
 800c14c:	b124      	cbz	r4, 800c158 <iprintf+0x14>
 800c14e:	69a3      	ldr	r3, [r4, #24]
 800c150:	b913      	cbnz	r3, 800c158 <iprintf+0x14>
 800c152:	4620      	mov	r0, r4
 800c154:	f000 f8a8 	bl	800c2a8 <__sinit>
 800c158:	ab05      	add	r3, sp, #20
 800c15a:	9a04      	ldr	r2, [sp, #16]
 800c15c:	68a1      	ldr	r1, [r4, #8]
 800c15e:	9301      	str	r3, [sp, #4]
 800c160:	4620      	mov	r0, r4
 800c162:	f000 fa09 	bl	800c578 <_vfiprintf_r>
 800c166:	b002      	add	sp, #8
 800c168:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c16c:	b004      	add	sp, #16
 800c16e:	4770      	bx	lr
 800c170:	20000018 	.word	0x20000018

0800c174 <rand>:
 800c174:	4b19      	ldr	r3, [pc, #100]	; (800c1dc <rand+0x68>)
 800c176:	b510      	push	{r4, lr}
 800c178:	681c      	ldr	r4, [r3, #0]
 800c17a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c17c:	b9d3      	cbnz	r3, 800c1b4 <rand+0x40>
 800c17e:	2018      	movs	r0, #24
 800c180:	f000 f91c 	bl	800c3bc <malloc>
 800c184:	f243 330e 	movw	r3, #13070	; 0x330e
 800c188:	63a0      	str	r0, [r4, #56]	; 0x38
 800c18a:	8003      	strh	r3, [r0, #0]
 800c18c:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 800c190:	8043      	strh	r3, [r0, #2]
 800c192:	f241 2334 	movw	r3, #4660	; 0x1234
 800c196:	8083      	strh	r3, [r0, #4]
 800c198:	f24e 636d 	movw	r3, #58989	; 0xe66d
 800c19c:	80c3      	strh	r3, [r0, #6]
 800c19e:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 800c1a2:	8103      	strh	r3, [r0, #8]
 800c1a4:	2305      	movs	r3, #5
 800c1a6:	8143      	strh	r3, [r0, #10]
 800c1a8:	230b      	movs	r3, #11
 800c1aa:	8183      	strh	r3, [r0, #12]
 800c1ac:	2201      	movs	r2, #1
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800c1b4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c1b6:	480a      	ldr	r0, [pc, #40]	; (800c1e0 <rand+0x6c>)
 800c1b8:	690a      	ldr	r2, [r1, #16]
 800c1ba:	694b      	ldr	r3, [r1, #20]
 800c1bc:	4c09      	ldr	r4, [pc, #36]	; (800c1e4 <rand+0x70>)
 800c1be:	4350      	muls	r0, r2
 800c1c0:	fb04 0003 	mla	r0, r4, r3, r0
 800c1c4:	fba2 2304 	umull	r2, r3, r2, r4
 800c1c8:	3201      	adds	r2, #1
 800c1ca:	4403      	add	r3, r0
 800c1cc:	f143 0300 	adc.w	r3, r3, #0
 800c1d0:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800c1d4:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 800c1d8:	bd10      	pop	{r4, pc}
 800c1da:	bf00      	nop
 800c1dc:	20000018 	.word	0x20000018
 800c1e0:	5851f42d 	.word	0x5851f42d
 800c1e4:	4c957f2d 	.word	0x4c957f2d

0800c1e8 <strchr>:
 800c1e8:	b2c9      	uxtb	r1, r1
 800c1ea:	4603      	mov	r3, r0
 800c1ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c1f0:	b11a      	cbz	r2, 800c1fa <strchr+0x12>
 800c1f2:	4291      	cmp	r1, r2
 800c1f4:	d1f9      	bne.n	800c1ea <strchr+0x2>
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	4770      	bx	lr
 800c1fa:	2900      	cmp	r1, #0
 800c1fc:	bf0c      	ite	eq
 800c1fe:	4618      	moveq	r0, r3
 800c200:	2000      	movne	r0, #0
 800c202:	4770      	bx	lr

0800c204 <strncmp>:
 800c204:	b510      	push	{r4, lr}
 800c206:	b16a      	cbz	r2, 800c224 <strncmp+0x20>
 800c208:	3901      	subs	r1, #1
 800c20a:	1884      	adds	r4, r0, r2
 800c20c:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c210:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c214:	4293      	cmp	r3, r2
 800c216:	d103      	bne.n	800c220 <strncmp+0x1c>
 800c218:	42a0      	cmp	r0, r4
 800c21a:	d001      	beq.n	800c220 <strncmp+0x1c>
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d1f5      	bne.n	800c20c <strncmp+0x8>
 800c220:	1a98      	subs	r0, r3, r2
 800c222:	bd10      	pop	{r4, pc}
 800c224:	4610      	mov	r0, r2
 800c226:	bd10      	pop	{r4, pc}

0800c228 <_cleanup_r>:
 800c228:	4901      	ldr	r1, [pc, #4]	; (800c230 <_cleanup_r+0x8>)
 800c22a:	f000 b8a9 	b.w	800c380 <_fwalk_reent>
 800c22e:	bf00      	nop
 800c230:	0800ce4d 	.word	0x0800ce4d

0800c234 <std.isra.0>:
 800c234:	2300      	movs	r3, #0
 800c236:	b510      	push	{r4, lr}
 800c238:	4604      	mov	r4, r0
 800c23a:	6003      	str	r3, [r0, #0]
 800c23c:	6043      	str	r3, [r0, #4]
 800c23e:	6083      	str	r3, [r0, #8]
 800c240:	8181      	strh	r1, [r0, #12]
 800c242:	6643      	str	r3, [r0, #100]	; 0x64
 800c244:	81c2      	strh	r2, [r0, #14]
 800c246:	6103      	str	r3, [r0, #16]
 800c248:	6143      	str	r3, [r0, #20]
 800c24a:	6183      	str	r3, [r0, #24]
 800c24c:	4619      	mov	r1, r3
 800c24e:	2208      	movs	r2, #8
 800c250:	305c      	adds	r0, #92	; 0x5c
 800c252:	f7ff ff6f 	bl	800c134 <memset>
 800c256:	4b05      	ldr	r3, [pc, #20]	; (800c26c <std.isra.0+0x38>)
 800c258:	6263      	str	r3, [r4, #36]	; 0x24
 800c25a:	4b05      	ldr	r3, [pc, #20]	; (800c270 <std.isra.0+0x3c>)
 800c25c:	62a3      	str	r3, [r4, #40]	; 0x28
 800c25e:	4b05      	ldr	r3, [pc, #20]	; (800c274 <std.isra.0+0x40>)
 800c260:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c262:	4b05      	ldr	r3, [pc, #20]	; (800c278 <std.isra.0+0x44>)
 800c264:	6224      	str	r4, [r4, #32]
 800c266:	6323      	str	r3, [r4, #48]	; 0x30
 800c268:	bd10      	pop	{r4, pc}
 800c26a:	bf00      	nop
 800c26c:	0800caf1 	.word	0x0800caf1
 800c270:	0800cb13 	.word	0x0800cb13
 800c274:	0800cb4b 	.word	0x0800cb4b
 800c278:	0800cb6f 	.word	0x0800cb6f

0800c27c <__sfmoreglue>:
 800c27c:	b570      	push	{r4, r5, r6, lr}
 800c27e:	1e4a      	subs	r2, r1, #1
 800c280:	2568      	movs	r5, #104	; 0x68
 800c282:	4355      	muls	r5, r2
 800c284:	460e      	mov	r6, r1
 800c286:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c28a:	f000 f8ed 	bl	800c468 <_malloc_r>
 800c28e:	4604      	mov	r4, r0
 800c290:	b140      	cbz	r0, 800c2a4 <__sfmoreglue+0x28>
 800c292:	2100      	movs	r1, #0
 800c294:	e880 0042 	stmia.w	r0, {r1, r6}
 800c298:	300c      	adds	r0, #12
 800c29a:	60a0      	str	r0, [r4, #8]
 800c29c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c2a0:	f7ff ff48 	bl	800c134 <memset>
 800c2a4:	4620      	mov	r0, r4
 800c2a6:	bd70      	pop	{r4, r5, r6, pc}

0800c2a8 <__sinit>:
 800c2a8:	6983      	ldr	r3, [r0, #24]
 800c2aa:	b510      	push	{r4, lr}
 800c2ac:	4604      	mov	r4, r0
 800c2ae:	bb33      	cbnz	r3, 800c2fe <__sinit+0x56>
 800c2b0:	6483      	str	r3, [r0, #72]	; 0x48
 800c2b2:	64c3      	str	r3, [r0, #76]	; 0x4c
 800c2b4:	6503      	str	r3, [r0, #80]	; 0x50
 800c2b6:	4b12      	ldr	r3, [pc, #72]	; (800c300 <__sinit+0x58>)
 800c2b8:	4a12      	ldr	r2, [pc, #72]	; (800c304 <__sinit+0x5c>)
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	6282      	str	r2, [r0, #40]	; 0x28
 800c2be:	4298      	cmp	r0, r3
 800c2c0:	bf04      	itt	eq
 800c2c2:	2301      	moveq	r3, #1
 800c2c4:	6183      	streq	r3, [r0, #24]
 800c2c6:	f000 f81f 	bl	800c308 <__sfp>
 800c2ca:	6060      	str	r0, [r4, #4]
 800c2cc:	4620      	mov	r0, r4
 800c2ce:	f000 f81b 	bl	800c308 <__sfp>
 800c2d2:	60a0      	str	r0, [r4, #8]
 800c2d4:	4620      	mov	r0, r4
 800c2d6:	f000 f817 	bl	800c308 <__sfp>
 800c2da:	2200      	movs	r2, #0
 800c2dc:	60e0      	str	r0, [r4, #12]
 800c2de:	2104      	movs	r1, #4
 800c2e0:	6860      	ldr	r0, [r4, #4]
 800c2e2:	f7ff ffa7 	bl	800c234 <std.isra.0>
 800c2e6:	2201      	movs	r2, #1
 800c2e8:	2109      	movs	r1, #9
 800c2ea:	68a0      	ldr	r0, [r4, #8]
 800c2ec:	f7ff ffa2 	bl	800c234 <std.isra.0>
 800c2f0:	2202      	movs	r2, #2
 800c2f2:	2112      	movs	r1, #18
 800c2f4:	68e0      	ldr	r0, [r4, #12]
 800c2f6:	f7ff ff9d 	bl	800c234 <std.isra.0>
 800c2fa:	2301      	movs	r3, #1
 800c2fc:	61a3      	str	r3, [r4, #24]
 800c2fe:	bd10      	pop	{r4, pc}
 800c300:	08010420 	.word	0x08010420
 800c304:	0800c229 	.word	0x0800c229

0800c308 <__sfp>:
 800c308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c30a:	4b1c      	ldr	r3, [pc, #112]	; (800c37c <__sfp+0x74>)
 800c30c:	681e      	ldr	r6, [r3, #0]
 800c30e:	69b3      	ldr	r3, [r6, #24]
 800c310:	4607      	mov	r7, r0
 800c312:	b913      	cbnz	r3, 800c31a <__sfp+0x12>
 800c314:	4630      	mov	r0, r6
 800c316:	f7ff ffc7 	bl	800c2a8 <__sinit>
 800c31a:	3648      	adds	r6, #72	; 0x48
 800c31c:	68b4      	ldr	r4, [r6, #8]
 800c31e:	6873      	ldr	r3, [r6, #4]
 800c320:	3b01      	subs	r3, #1
 800c322:	d503      	bpl.n	800c32c <__sfp+0x24>
 800c324:	6833      	ldr	r3, [r6, #0]
 800c326:	b133      	cbz	r3, 800c336 <__sfp+0x2e>
 800c328:	6836      	ldr	r6, [r6, #0]
 800c32a:	e7f7      	b.n	800c31c <__sfp+0x14>
 800c32c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c330:	b16d      	cbz	r5, 800c34e <__sfp+0x46>
 800c332:	3468      	adds	r4, #104	; 0x68
 800c334:	e7f4      	b.n	800c320 <__sfp+0x18>
 800c336:	2104      	movs	r1, #4
 800c338:	4638      	mov	r0, r7
 800c33a:	f7ff ff9f 	bl	800c27c <__sfmoreglue>
 800c33e:	6030      	str	r0, [r6, #0]
 800c340:	2800      	cmp	r0, #0
 800c342:	d1f1      	bne.n	800c328 <__sfp+0x20>
 800c344:	230c      	movs	r3, #12
 800c346:	603b      	str	r3, [r7, #0]
 800c348:	4604      	mov	r4, r0
 800c34a:	4620      	mov	r0, r4
 800c34c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c34e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c352:	81e3      	strh	r3, [r4, #14]
 800c354:	2301      	movs	r3, #1
 800c356:	81a3      	strh	r3, [r4, #12]
 800c358:	6665      	str	r5, [r4, #100]	; 0x64
 800c35a:	6025      	str	r5, [r4, #0]
 800c35c:	60a5      	str	r5, [r4, #8]
 800c35e:	6065      	str	r5, [r4, #4]
 800c360:	6125      	str	r5, [r4, #16]
 800c362:	6165      	str	r5, [r4, #20]
 800c364:	61a5      	str	r5, [r4, #24]
 800c366:	2208      	movs	r2, #8
 800c368:	4629      	mov	r1, r5
 800c36a:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c36e:	f7ff fee1 	bl	800c134 <memset>
 800c372:	6365      	str	r5, [r4, #52]	; 0x34
 800c374:	63a5      	str	r5, [r4, #56]	; 0x38
 800c376:	64a5      	str	r5, [r4, #72]	; 0x48
 800c378:	64e5      	str	r5, [r4, #76]	; 0x4c
 800c37a:	e7e6      	b.n	800c34a <__sfp+0x42>
 800c37c:	08010420 	.word	0x08010420

0800c380 <_fwalk_reent>:
 800c380:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c384:	4680      	mov	r8, r0
 800c386:	4689      	mov	r9, r1
 800c388:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c38c:	2600      	movs	r6, #0
 800c38e:	b914      	cbnz	r4, 800c396 <_fwalk_reent+0x16>
 800c390:	4630      	mov	r0, r6
 800c392:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c396:	68a5      	ldr	r5, [r4, #8]
 800c398:	6867      	ldr	r7, [r4, #4]
 800c39a:	3f01      	subs	r7, #1
 800c39c:	d501      	bpl.n	800c3a2 <_fwalk_reent+0x22>
 800c39e:	6824      	ldr	r4, [r4, #0]
 800c3a0:	e7f5      	b.n	800c38e <_fwalk_reent+0xe>
 800c3a2:	89ab      	ldrh	r3, [r5, #12]
 800c3a4:	2b01      	cmp	r3, #1
 800c3a6:	d907      	bls.n	800c3b8 <_fwalk_reent+0x38>
 800c3a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c3ac:	3301      	adds	r3, #1
 800c3ae:	d003      	beq.n	800c3b8 <_fwalk_reent+0x38>
 800c3b0:	4629      	mov	r1, r5
 800c3b2:	4640      	mov	r0, r8
 800c3b4:	47c8      	blx	r9
 800c3b6:	4306      	orrs	r6, r0
 800c3b8:	3568      	adds	r5, #104	; 0x68
 800c3ba:	e7ee      	b.n	800c39a <_fwalk_reent+0x1a>

0800c3bc <malloc>:
 800c3bc:	4b02      	ldr	r3, [pc, #8]	; (800c3c8 <malloc+0xc>)
 800c3be:	4601      	mov	r1, r0
 800c3c0:	6818      	ldr	r0, [r3, #0]
 800c3c2:	f000 b851 	b.w	800c468 <_malloc_r>
 800c3c6:	bf00      	nop
 800c3c8:	20000018 	.word	0x20000018

0800c3cc <_free_r>:
 800c3cc:	b538      	push	{r3, r4, r5, lr}
 800c3ce:	4605      	mov	r5, r0
 800c3d0:	2900      	cmp	r1, #0
 800c3d2:	d045      	beq.n	800c460 <_free_r+0x94>
 800c3d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c3d8:	1f0c      	subs	r4, r1, #4
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	bfb8      	it	lt
 800c3de:	18e4      	addlt	r4, r4, r3
 800c3e0:	f000 fdd4 	bl	800cf8c <__malloc_lock>
 800c3e4:	4a1f      	ldr	r2, [pc, #124]	; (800c464 <_free_r+0x98>)
 800c3e6:	6813      	ldr	r3, [r2, #0]
 800c3e8:	4610      	mov	r0, r2
 800c3ea:	b933      	cbnz	r3, 800c3fa <_free_r+0x2e>
 800c3ec:	6063      	str	r3, [r4, #4]
 800c3ee:	6014      	str	r4, [r2, #0]
 800c3f0:	4628      	mov	r0, r5
 800c3f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c3f6:	f000 bdca 	b.w	800cf8e <__malloc_unlock>
 800c3fa:	42a3      	cmp	r3, r4
 800c3fc:	d90c      	bls.n	800c418 <_free_r+0x4c>
 800c3fe:	6821      	ldr	r1, [r4, #0]
 800c400:	1862      	adds	r2, r4, r1
 800c402:	4293      	cmp	r3, r2
 800c404:	bf04      	itt	eq
 800c406:	681a      	ldreq	r2, [r3, #0]
 800c408:	685b      	ldreq	r3, [r3, #4]
 800c40a:	6063      	str	r3, [r4, #4]
 800c40c:	bf04      	itt	eq
 800c40e:	1852      	addeq	r2, r2, r1
 800c410:	6022      	streq	r2, [r4, #0]
 800c412:	6004      	str	r4, [r0, #0]
 800c414:	e7ec      	b.n	800c3f0 <_free_r+0x24>
 800c416:	4613      	mov	r3, r2
 800c418:	685a      	ldr	r2, [r3, #4]
 800c41a:	b10a      	cbz	r2, 800c420 <_free_r+0x54>
 800c41c:	42a2      	cmp	r2, r4
 800c41e:	d9fa      	bls.n	800c416 <_free_r+0x4a>
 800c420:	6819      	ldr	r1, [r3, #0]
 800c422:	1858      	adds	r0, r3, r1
 800c424:	42a0      	cmp	r0, r4
 800c426:	d10b      	bne.n	800c440 <_free_r+0x74>
 800c428:	6820      	ldr	r0, [r4, #0]
 800c42a:	4401      	add	r1, r0
 800c42c:	1858      	adds	r0, r3, r1
 800c42e:	4282      	cmp	r2, r0
 800c430:	6019      	str	r1, [r3, #0]
 800c432:	d1dd      	bne.n	800c3f0 <_free_r+0x24>
 800c434:	6810      	ldr	r0, [r2, #0]
 800c436:	6852      	ldr	r2, [r2, #4]
 800c438:	605a      	str	r2, [r3, #4]
 800c43a:	4401      	add	r1, r0
 800c43c:	6019      	str	r1, [r3, #0]
 800c43e:	e7d7      	b.n	800c3f0 <_free_r+0x24>
 800c440:	d902      	bls.n	800c448 <_free_r+0x7c>
 800c442:	230c      	movs	r3, #12
 800c444:	602b      	str	r3, [r5, #0]
 800c446:	e7d3      	b.n	800c3f0 <_free_r+0x24>
 800c448:	6820      	ldr	r0, [r4, #0]
 800c44a:	1821      	adds	r1, r4, r0
 800c44c:	428a      	cmp	r2, r1
 800c44e:	bf04      	itt	eq
 800c450:	6811      	ldreq	r1, [r2, #0]
 800c452:	6852      	ldreq	r2, [r2, #4]
 800c454:	6062      	str	r2, [r4, #4]
 800c456:	bf04      	itt	eq
 800c458:	1809      	addeq	r1, r1, r0
 800c45a:	6021      	streq	r1, [r4, #0]
 800c45c:	605c      	str	r4, [r3, #4]
 800c45e:	e7c7      	b.n	800c3f0 <_free_r+0x24>
 800c460:	bd38      	pop	{r3, r4, r5, pc}
 800c462:	bf00      	nop
 800c464:	20006e20 	.word	0x20006e20

0800c468 <_malloc_r>:
 800c468:	b570      	push	{r4, r5, r6, lr}
 800c46a:	1ccd      	adds	r5, r1, #3
 800c46c:	f025 0503 	bic.w	r5, r5, #3
 800c470:	3508      	adds	r5, #8
 800c472:	2d0c      	cmp	r5, #12
 800c474:	bf38      	it	cc
 800c476:	250c      	movcc	r5, #12
 800c478:	2d00      	cmp	r5, #0
 800c47a:	4606      	mov	r6, r0
 800c47c:	db01      	blt.n	800c482 <_malloc_r+0x1a>
 800c47e:	42a9      	cmp	r1, r5
 800c480:	d903      	bls.n	800c48a <_malloc_r+0x22>
 800c482:	230c      	movs	r3, #12
 800c484:	6033      	str	r3, [r6, #0]
 800c486:	2000      	movs	r0, #0
 800c488:	bd70      	pop	{r4, r5, r6, pc}
 800c48a:	f000 fd7f 	bl	800cf8c <__malloc_lock>
 800c48e:	4a23      	ldr	r2, [pc, #140]	; (800c51c <_malloc_r+0xb4>)
 800c490:	6814      	ldr	r4, [r2, #0]
 800c492:	4621      	mov	r1, r4
 800c494:	b991      	cbnz	r1, 800c4bc <_malloc_r+0x54>
 800c496:	4c22      	ldr	r4, [pc, #136]	; (800c520 <_malloc_r+0xb8>)
 800c498:	6823      	ldr	r3, [r4, #0]
 800c49a:	b91b      	cbnz	r3, 800c4a4 <_malloc_r+0x3c>
 800c49c:	4630      	mov	r0, r6
 800c49e:	f000 fb17 	bl	800cad0 <_sbrk_r>
 800c4a2:	6020      	str	r0, [r4, #0]
 800c4a4:	4629      	mov	r1, r5
 800c4a6:	4630      	mov	r0, r6
 800c4a8:	f000 fb12 	bl	800cad0 <_sbrk_r>
 800c4ac:	1c43      	adds	r3, r0, #1
 800c4ae:	d126      	bne.n	800c4fe <_malloc_r+0x96>
 800c4b0:	230c      	movs	r3, #12
 800c4b2:	6033      	str	r3, [r6, #0]
 800c4b4:	4630      	mov	r0, r6
 800c4b6:	f000 fd6a 	bl	800cf8e <__malloc_unlock>
 800c4ba:	e7e4      	b.n	800c486 <_malloc_r+0x1e>
 800c4bc:	680b      	ldr	r3, [r1, #0]
 800c4be:	1b5b      	subs	r3, r3, r5
 800c4c0:	d41a      	bmi.n	800c4f8 <_malloc_r+0x90>
 800c4c2:	2b0b      	cmp	r3, #11
 800c4c4:	d90f      	bls.n	800c4e6 <_malloc_r+0x7e>
 800c4c6:	600b      	str	r3, [r1, #0]
 800c4c8:	50cd      	str	r5, [r1, r3]
 800c4ca:	18cc      	adds	r4, r1, r3
 800c4cc:	4630      	mov	r0, r6
 800c4ce:	f000 fd5e 	bl	800cf8e <__malloc_unlock>
 800c4d2:	f104 000b 	add.w	r0, r4, #11
 800c4d6:	1d23      	adds	r3, r4, #4
 800c4d8:	f020 0007 	bic.w	r0, r0, #7
 800c4dc:	1ac3      	subs	r3, r0, r3
 800c4de:	d01b      	beq.n	800c518 <_malloc_r+0xb0>
 800c4e0:	425a      	negs	r2, r3
 800c4e2:	50e2      	str	r2, [r4, r3]
 800c4e4:	bd70      	pop	{r4, r5, r6, pc}
 800c4e6:	428c      	cmp	r4, r1
 800c4e8:	bf0d      	iteet	eq
 800c4ea:	6863      	ldreq	r3, [r4, #4]
 800c4ec:	684b      	ldrne	r3, [r1, #4]
 800c4ee:	6063      	strne	r3, [r4, #4]
 800c4f0:	6013      	streq	r3, [r2, #0]
 800c4f2:	bf18      	it	ne
 800c4f4:	460c      	movne	r4, r1
 800c4f6:	e7e9      	b.n	800c4cc <_malloc_r+0x64>
 800c4f8:	460c      	mov	r4, r1
 800c4fa:	6849      	ldr	r1, [r1, #4]
 800c4fc:	e7ca      	b.n	800c494 <_malloc_r+0x2c>
 800c4fe:	1cc4      	adds	r4, r0, #3
 800c500:	f024 0403 	bic.w	r4, r4, #3
 800c504:	42a0      	cmp	r0, r4
 800c506:	d005      	beq.n	800c514 <_malloc_r+0xac>
 800c508:	1a21      	subs	r1, r4, r0
 800c50a:	4630      	mov	r0, r6
 800c50c:	f000 fae0 	bl	800cad0 <_sbrk_r>
 800c510:	3001      	adds	r0, #1
 800c512:	d0cd      	beq.n	800c4b0 <_malloc_r+0x48>
 800c514:	6025      	str	r5, [r4, #0]
 800c516:	e7d9      	b.n	800c4cc <_malloc_r+0x64>
 800c518:	bd70      	pop	{r4, r5, r6, pc}
 800c51a:	bf00      	nop
 800c51c:	20006e20 	.word	0x20006e20
 800c520:	20006e24 	.word	0x20006e24

0800c524 <__sfputc_r>:
 800c524:	6893      	ldr	r3, [r2, #8]
 800c526:	3b01      	subs	r3, #1
 800c528:	2b00      	cmp	r3, #0
 800c52a:	b410      	push	{r4}
 800c52c:	6093      	str	r3, [r2, #8]
 800c52e:	da09      	bge.n	800c544 <__sfputc_r+0x20>
 800c530:	6994      	ldr	r4, [r2, #24]
 800c532:	42a3      	cmp	r3, r4
 800c534:	db02      	blt.n	800c53c <__sfputc_r+0x18>
 800c536:	b2cb      	uxtb	r3, r1
 800c538:	2b0a      	cmp	r3, #10
 800c53a:	d103      	bne.n	800c544 <__sfputc_r+0x20>
 800c53c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c540:	f000 bb1a 	b.w	800cb78 <__swbuf_r>
 800c544:	6813      	ldr	r3, [r2, #0]
 800c546:	1c58      	adds	r0, r3, #1
 800c548:	6010      	str	r0, [r2, #0]
 800c54a:	7019      	strb	r1, [r3, #0]
 800c54c:	b2c8      	uxtb	r0, r1
 800c54e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c552:	4770      	bx	lr

0800c554 <__sfputs_r>:
 800c554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c556:	4606      	mov	r6, r0
 800c558:	460f      	mov	r7, r1
 800c55a:	4614      	mov	r4, r2
 800c55c:	18d5      	adds	r5, r2, r3
 800c55e:	42ac      	cmp	r4, r5
 800c560:	d101      	bne.n	800c566 <__sfputs_r+0x12>
 800c562:	2000      	movs	r0, #0
 800c564:	e007      	b.n	800c576 <__sfputs_r+0x22>
 800c566:	463a      	mov	r2, r7
 800c568:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c56c:	4630      	mov	r0, r6
 800c56e:	f7ff ffd9 	bl	800c524 <__sfputc_r>
 800c572:	1c43      	adds	r3, r0, #1
 800c574:	d1f3      	bne.n	800c55e <__sfputs_r+0xa>
 800c576:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c578 <_vfiprintf_r>:
 800c578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c57c:	b09d      	sub	sp, #116	; 0x74
 800c57e:	460c      	mov	r4, r1
 800c580:	4617      	mov	r7, r2
 800c582:	9303      	str	r3, [sp, #12]
 800c584:	4606      	mov	r6, r0
 800c586:	b118      	cbz	r0, 800c590 <_vfiprintf_r+0x18>
 800c588:	6983      	ldr	r3, [r0, #24]
 800c58a:	b90b      	cbnz	r3, 800c590 <_vfiprintf_r+0x18>
 800c58c:	f7ff fe8c 	bl	800c2a8 <__sinit>
 800c590:	4b7c      	ldr	r3, [pc, #496]	; (800c784 <_vfiprintf_r+0x20c>)
 800c592:	429c      	cmp	r4, r3
 800c594:	d157      	bne.n	800c646 <_vfiprintf_r+0xce>
 800c596:	6874      	ldr	r4, [r6, #4]
 800c598:	89a3      	ldrh	r3, [r4, #12]
 800c59a:	0718      	lsls	r0, r3, #28
 800c59c:	d55d      	bpl.n	800c65a <_vfiprintf_r+0xe2>
 800c59e:	6923      	ldr	r3, [r4, #16]
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d05a      	beq.n	800c65a <_vfiprintf_r+0xe2>
 800c5a4:	2300      	movs	r3, #0
 800c5a6:	9309      	str	r3, [sp, #36]	; 0x24
 800c5a8:	2320      	movs	r3, #32
 800c5aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c5ae:	2330      	movs	r3, #48	; 0x30
 800c5b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c5b4:	f04f 0b01 	mov.w	fp, #1
 800c5b8:	46b8      	mov	r8, r7
 800c5ba:	4645      	mov	r5, r8
 800c5bc:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d155      	bne.n	800c670 <_vfiprintf_r+0xf8>
 800c5c4:	ebb8 0a07 	subs.w	sl, r8, r7
 800c5c8:	d00b      	beq.n	800c5e2 <_vfiprintf_r+0x6a>
 800c5ca:	4653      	mov	r3, sl
 800c5cc:	463a      	mov	r2, r7
 800c5ce:	4621      	mov	r1, r4
 800c5d0:	4630      	mov	r0, r6
 800c5d2:	f7ff ffbf 	bl	800c554 <__sfputs_r>
 800c5d6:	3001      	adds	r0, #1
 800c5d8:	f000 80c4 	beq.w	800c764 <_vfiprintf_r+0x1ec>
 800c5dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5de:	4453      	add	r3, sl
 800c5e0:	9309      	str	r3, [sp, #36]	; 0x24
 800c5e2:	f898 3000 	ldrb.w	r3, [r8]
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	f000 80bc 	beq.w	800c764 <_vfiprintf_r+0x1ec>
 800c5ec:	2300      	movs	r3, #0
 800c5ee:	f04f 32ff 	mov.w	r2, #4294967295
 800c5f2:	9304      	str	r3, [sp, #16]
 800c5f4:	9307      	str	r3, [sp, #28]
 800c5f6:	9205      	str	r2, [sp, #20]
 800c5f8:	9306      	str	r3, [sp, #24]
 800c5fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c5fe:	931a      	str	r3, [sp, #104]	; 0x68
 800c600:	2205      	movs	r2, #5
 800c602:	7829      	ldrb	r1, [r5, #0]
 800c604:	4860      	ldr	r0, [pc, #384]	; (800c788 <_vfiprintf_r+0x210>)
 800c606:	f7f3 fe33 	bl	8000270 <memchr>
 800c60a:	f105 0801 	add.w	r8, r5, #1
 800c60e:	9b04      	ldr	r3, [sp, #16]
 800c610:	2800      	cmp	r0, #0
 800c612:	d131      	bne.n	800c678 <_vfiprintf_r+0x100>
 800c614:	06d9      	lsls	r1, r3, #27
 800c616:	bf44      	itt	mi
 800c618:	2220      	movmi	r2, #32
 800c61a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c61e:	071a      	lsls	r2, r3, #28
 800c620:	bf44      	itt	mi
 800c622:	222b      	movmi	r2, #43	; 0x2b
 800c624:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c628:	782a      	ldrb	r2, [r5, #0]
 800c62a:	2a2a      	cmp	r2, #42	; 0x2a
 800c62c:	d02c      	beq.n	800c688 <_vfiprintf_r+0x110>
 800c62e:	9a07      	ldr	r2, [sp, #28]
 800c630:	2100      	movs	r1, #0
 800c632:	200a      	movs	r0, #10
 800c634:	46a8      	mov	r8, r5
 800c636:	3501      	adds	r5, #1
 800c638:	f898 3000 	ldrb.w	r3, [r8]
 800c63c:	3b30      	subs	r3, #48	; 0x30
 800c63e:	2b09      	cmp	r3, #9
 800c640:	d96d      	bls.n	800c71e <_vfiprintf_r+0x1a6>
 800c642:	b371      	cbz	r1, 800c6a2 <_vfiprintf_r+0x12a>
 800c644:	e026      	b.n	800c694 <_vfiprintf_r+0x11c>
 800c646:	4b51      	ldr	r3, [pc, #324]	; (800c78c <_vfiprintf_r+0x214>)
 800c648:	429c      	cmp	r4, r3
 800c64a:	d101      	bne.n	800c650 <_vfiprintf_r+0xd8>
 800c64c:	68b4      	ldr	r4, [r6, #8]
 800c64e:	e7a3      	b.n	800c598 <_vfiprintf_r+0x20>
 800c650:	4b4f      	ldr	r3, [pc, #316]	; (800c790 <_vfiprintf_r+0x218>)
 800c652:	429c      	cmp	r4, r3
 800c654:	bf08      	it	eq
 800c656:	68f4      	ldreq	r4, [r6, #12]
 800c658:	e79e      	b.n	800c598 <_vfiprintf_r+0x20>
 800c65a:	4621      	mov	r1, r4
 800c65c:	4630      	mov	r0, r6
 800c65e:	f000 faef 	bl	800cc40 <__swsetup_r>
 800c662:	2800      	cmp	r0, #0
 800c664:	d09e      	beq.n	800c5a4 <_vfiprintf_r+0x2c>
 800c666:	f04f 30ff 	mov.w	r0, #4294967295
 800c66a:	b01d      	add	sp, #116	; 0x74
 800c66c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c670:	2b25      	cmp	r3, #37	; 0x25
 800c672:	d0a7      	beq.n	800c5c4 <_vfiprintf_r+0x4c>
 800c674:	46a8      	mov	r8, r5
 800c676:	e7a0      	b.n	800c5ba <_vfiprintf_r+0x42>
 800c678:	4a43      	ldr	r2, [pc, #268]	; (800c788 <_vfiprintf_r+0x210>)
 800c67a:	1a80      	subs	r0, r0, r2
 800c67c:	fa0b f000 	lsl.w	r0, fp, r0
 800c680:	4318      	orrs	r0, r3
 800c682:	9004      	str	r0, [sp, #16]
 800c684:	4645      	mov	r5, r8
 800c686:	e7bb      	b.n	800c600 <_vfiprintf_r+0x88>
 800c688:	9a03      	ldr	r2, [sp, #12]
 800c68a:	1d11      	adds	r1, r2, #4
 800c68c:	6812      	ldr	r2, [r2, #0]
 800c68e:	9103      	str	r1, [sp, #12]
 800c690:	2a00      	cmp	r2, #0
 800c692:	db01      	blt.n	800c698 <_vfiprintf_r+0x120>
 800c694:	9207      	str	r2, [sp, #28]
 800c696:	e004      	b.n	800c6a2 <_vfiprintf_r+0x12a>
 800c698:	4252      	negs	r2, r2
 800c69a:	f043 0302 	orr.w	r3, r3, #2
 800c69e:	9207      	str	r2, [sp, #28]
 800c6a0:	9304      	str	r3, [sp, #16]
 800c6a2:	f898 3000 	ldrb.w	r3, [r8]
 800c6a6:	2b2e      	cmp	r3, #46	; 0x2e
 800c6a8:	d110      	bne.n	800c6cc <_vfiprintf_r+0x154>
 800c6aa:	f898 3001 	ldrb.w	r3, [r8, #1]
 800c6ae:	2b2a      	cmp	r3, #42	; 0x2a
 800c6b0:	f108 0101 	add.w	r1, r8, #1
 800c6b4:	d137      	bne.n	800c726 <_vfiprintf_r+0x1ae>
 800c6b6:	9b03      	ldr	r3, [sp, #12]
 800c6b8:	1d1a      	adds	r2, r3, #4
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	9203      	str	r2, [sp, #12]
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	bfb8      	it	lt
 800c6c2:	f04f 33ff 	movlt.w	r3, #4294967295
 800c6c6:	f108 0802 	add.w	r8, r8, #2
 800c6ca:	9305      	str	r3, [sp, #20]
 800c6cc:	4d31      	ldr	r5, [pc, #196]	; (800c794 <_vfiprintf_r+0x21c>)
 800c6ce:	f898 1000 	ldrb.w	r1, [r8]
 800c6d2:	2203      	movs	r2, #3
 800c6d4:	4628      	mov	r0, r5
 800c6d6:	f7f3 fdcb 	bl	8000270 <memchr>
 800c6da:	b140      	cbz	r0, 800c6ee <_vfiprintf_r+0x176>
 800c6dc:	2340      	movs	r3, #64	; 0x40
 800c6de:	1b40      	subs	r0, r0, r5
 800c6e0:	fa03 f000 	lsl.w	r0, r3, r0
 800c6e4:	9b04      	ldr	r3, [sp, #16]
 800c6e6:	4303      	orrs	r3, r0
 800c6e8:	9304      	str	r3, [sp, #16]
 800c6ea:	f108 0801 	add.w	r8, r8, #1
 800c6ee:	f898 1000 	ldrb.w	r1, [r8]
 800c6f2:	4829      	ldr	r0, [pc, #164]	; (800c798 <_vfiprintf_r+0x220>)
 800c6f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c6f8:	2206      	movs	r2, #6
 800c6fa:	f108 0701 	add.w	r7, r8, #1
 800c6fe:	f7f3 fdb7 	bl	8000270 <memchr>
 800c702:	2800      	cmp	r0, #0
 800c704:	d034      	beq.n	800c770 <_vfiprintf_r+0x1f8>
 800c706:	4b25      	ldr	r3, [pc, #148]	; (800c79c <_vfiprintf_r+0x224>)
 800c708:	bb03      	cbnz	r3, 800c74c <_vfiprintf_r+0x1d4>
 800c70a:	9b03      	ldr	r3, [sp, #12]
 800c70c:	3307      	adds	r3, #7
 800c70e:	f023 0307 	bic.w	r3, r3, #7
 800c712:	3308      	adds	r3, #8
 800c714:	9303      	str	r3, [sp, #12]
 800c716:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c718:	444b      	add	r3, r9
 800c71a:	9309      	str	r3, [sp, #36]	; 0x24
 800c71c:	e74c      	b.n	800c5b8 <_vfiprintf_r+0x40>
 800c71e:	fb00 3202 	mla	r2, r0, r2, r3
 800c722:	2101      	movs	r1, #1
 800c724:	e786      	b.n	800c634 <_vfiprintf_r+0xbc>
 800c726:	2300      	movs	r3, #0
 800c728:	9305      	str	r3, [sp, #20]
 800c72a:	4618      	mov	r0, r3
 800c72c:	250a      	movs	r5, #10
 800c72e:	4688      	mov	r8, r1
 800c730:	3101      	adds	r1, #1
 800c732:	f898 2000 	ldrb.w	r2, [r8]
 800c736:	3a30      	subs	r2, #48	; 0x30
 800c738:	2a09      	cmp	r2, #9
 800c73a:	d903      	bls.n	800c744 <_vfiprintf_r+0x1cc>
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d0c5      	beq.n	800c6cc <_vfiprintf_r+0x154>
 800c740:	9005      	str	r0, [sp, #20]
 800c742:	e7c3      	b.n	800c6cc <_vfiprintf_r+0x154>
 800c744:	fb05 2000 	mla	r0, r5, r0, r2
 800c748:	2301      	movs	r3, #1
 800c74a:	e7f0      	b.n	800c72e <_vfiprintf_r+0x1b6>
 800c74c:	ab03      	add	r3, sp, #12
 800c74e:	9300      	str	r3, [sp, #0]
 800c750:	4622      	mov	r2, r4
 800c752:	4b13      	ldr	r3, [pc, #76]	; (800c7a0 <_vfiprintf_r+0x228>)
 800c754:	a904      	add	r1, sp, #16
 800c756:	4630      	mov	r0, r6
 800c758:	f3af 8000 	nop.w
 800c75c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800c760:	4681      	mov	r9, r0
 800c762:	d1d8      	bne.n	800c716 <_vfiprintf_r+0x19e>
 800c764:	89a3      	ldrh	r3, [r4, #12]
 800c766:	065b      	lsls	r3, r3, #25
 800c768:	f53f af7d 	bmi.w	800c666 <_vfiprintf_r+0xee>
 800c76c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c76e:	e77c      	b.n	800c66a <_vfiprintf_r+0xf2>
 800c770:	ab03      	add	r3, sp, #12
 800c772:	9300      	str	r3, [sp, #0]
 800c774:	4622      	mov	r2, r4
 800c776:	4b0a      	ldr	r3, [pc, #40]	; (800c7a0 <_vfiprintf_r+0x228>)
 800c778:	a904      	add	r1, sp, #16
 800c77a:	4630      	mov	r0, r6
 800c77c:	f000 f888 	bl	800c890 <_printf_i>
 800c780:	e7ec      	b.n	800c75c <_vfiprintf_r+0x1e4>
 800c782:	bf00      	nop
 800c784:	080103e0 	.word	0x080103e0
 800c788:	08010424 	.word	0x08010424
 800c78c:	08010400 	.word	0x08010400
 800c790:	080103c0 	.word	0x080103c0
 800c794:	0801042a 	.word	0x0801042a
 800c798:	0801042e 	.word	0x0801042e
 800c79c:	00000000 	.word	0x00000000
 800c7a0:	0800c555 	.word	0x0800c555

0800c7a4 <_printf_common>:
 800c7a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c7a8:	4691      	mov	r9, r2
 800c7aa:	461f      	mov	r7, r3
 800c7ac:	688a      	ldr	r2, [r1, #8]
 800c7ae:	690b      	ldr	r3, [r1, #16]
 800c7b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c7b4:	4293      	cmp	r3, r2
 800c7b6:	bfb8      	it	lt
 800c7b8:	4613      	movlt	r3, r2
 800c7ba:	f8c9 3000 	str.w	r3, [r9]
 800c7be:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c7c2:	4606      	mov	r6, r0
 800c7c4:	460c      	mov	r4, r1
 800c7c6:	b112      	cbz	r2, 800c7ce <_printf_common+0x2a>
 800c7c8:	3301      	adds	r3, #1
 800c7ca:	f8c9 3000 	str.w	r3, [r9]
 800c7ce:	6823      	ldr	r3, [r4, #0]
 800c7d0:	0699      	lsls	r1, r3, #26
 800c7d2:	bf42      	ittt	mi
 800c7d4:	f8d9 3000 	ldrmi.w	r3, [r9]
 800c7d8:	3302      	addmi	r3, #2
 800c7da:	f8c9 3000 	strmi.w	r3, [r9]
 800c7de:	6825      	ldr	r5, [r4, #0]
 800c7e0:	f015 0506 	ands.w	r5, r5, #6
 800c7e4:	d107      	bne.n	800c7f6 <_printf_common+0x52>
 800c7e6:	f104 0a19 	add.w	sl, r4, #25
 800c7ea:	68e3      	ldr	r3, [r4, #12]
 800c7ec:	f8d9 2000 	ldr.w	r2, [r9]
 800c7f0:	1a9b      	subs	r3, r3, r2
 800c7f2:	429d      	cmp	r5, r3
 800c7f4:	db29      	blt.n	800c84a <_printf_common+0xa6>
 800c7f6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800c7fa:	6822      	ldr	r2, [r4, #0]
 800c7fc:	3300      	adds	r3, #0
 800c7fe:	bf18      	it	ne
 800c800:	2301      	movne	r3, #1
 800c802:	0692      	lsls	r2, r2, #26
 800c804:	d42e      	bmi.n	800c864 <_printf_common+0xc0>
 800c806:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c80a:	4639      	mov	r1, r7
 800c80c:	4630      	mov	r0, r6
 800c80e:	47c0      	blx	r8
 800c810:	3001      	adds	r0, #1
 800c812:	d021      	beq.n	800c858 <_printf_common+0xb4>
 800c814:	6823      	ldr	r3, [r4, #0]
 800c816:	68e5      	ldr	r5, [r4, #12]
 800c818:	f8d9 2000 	ldr.w	r2, [r9]
 800c81c:	f003 0306 	and.w	r3, r3, #6
 800c820:	2b04      	cmp	r3, #4
 800c822:	bf08      	it	eq
 800c824:	1aad      	subeq	r5, r5, r2
 800c826:	68a3      	ldr	r3, [r4, #8]
 800c828:	6922      	ldr	r2, [r4, #16]
 800c82a:	bf0c      	ite	eq
 800c82c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c830:	2500      	movne	r5, #0
 800c832:	4293      	cmp	r3, r2
 800c834:	bfc4      	itt	gt
 800c836:	1a9b      	subgt	r3, r3, r2
 800c838:	18ed      	addgt	r5, r5, r3
 800c83a:	f04f 0900 	mov.w	r9, #0
 800c83e:	341a      	adds	r4, #26
 800c840:	454d      	cmp	r5, r9
 800c842:	d11b      	bne.n	800c87c <_printf_common+0xd8>
 800c844:	2000      	movs	r0, #0
 800c846:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c84a:	2301      	movs	r3, #1
 800c84c:	4652      	mov	r2, sl
 800c84e:	4639      	mov	r1, r7
 800c850:	4630      	mov	r0, r6
 800c852:	47c0      	blx	r8
 800c854:	3001      	adds	r0, #1
 800c856:	d103      	bne.n	800c860 <_printf_common+0xbc>
 800c858:	f04f 30ff 	mov.w	r0, #4294967295
 800c85c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c860:	3501      	adds	r5, #1
 800c862:	e7c2      	b.n	800c7ea <_printf_common+0x46>
 800c864:	18e1      	adds	r1, r4, r3
 800c866:	1c5a      	adds	r2, r3, #1
 800c868:	2030      	movs	r0, #48	; 0x30
 800c86a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c86e:	4422      	add	r2, r4
 800c870:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c874:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c878:	3302      	adds	r3, #2
 800c87a:	e7c4      	b.n	800c806 <_printf_common+0x62>
 800c87c:	2301      	movs	r3, #1
 800c87e:	4622      	mov	r2, r4
 800c880:	4639      	mov	r1, r7
 800c882:	4630      	mov	r0, r6
 800c884:	47c0      	blx	r8
 800c886:	3001      	adds	r0, #1
 800c888:	d0e6      	beq.n	800c858 <_printf_common+0xb4>
 800c88a:	f109 0901 	add.w	r9, r9, #1
 800c88e:	e7d7      	b.n	800c840 <_printf_common+0x9c>

0800c890 <_printf_i>:
 800c890:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c894:	4617      	mov	r7, r2
 800c896:	7e0a      	ldrb	r2, [r1, #24]
 800c898:	b085      	sub	sp, #20
 800c89a:	2a6e      	cmp	r2, #110	; 0x6e
 800c89c:	4698      	mov	r8, r3
 800c89e:	4606      	mov	r6, r0
 800c8a0:	460c      	mov	r4, r1
 800c8a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c8a4:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 800c8a8:	f000 80bc 	beq.w	800ca24 <_printf_i+0x194>
 800c8ac:	d81a      	bhi.n	800c8e4 <_printf_i+0x54>
 800c8ae:	2a63      	cmp	r2, #99	; 0x63
 800c8b0:	d02e      	beq.n	800c910 <_printf_i+0x80>
 800c8b2:	d80a      	bhi.n	800c8ca <_printf_i+0x3a>
 800c8b4:	2a00      	cmp	r2, #0
 800c8b6:	f000 80c8 	beq.w	800ca4a <_printf_i+0x1ba>
 800c8ba:	2a58      	cmp	r2, #88	; 0x58
 800c8bc:	f000 808a 	beq.w	800c9d4 <_printf_i+0x144>
 800c8c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c8c4:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800c8c8:	e02a      	b.n	800c920 <_printf_i+0x90>
 800c8ca:	2a64      	cmp	r2, #100	; 0x64
 800c8cc:	d001      	beq.n	800c8d2 <_printf_i+0x42>
 800c8ce:	2a69      	cmp	r2, #105	; 0x69
 800c8d0:	d1f6      	bne.n	800c8c0 <_printf_i+0x30>
 800c8d2:	6821      	ldr	r1, [r4, #0]
 800c8d4:	681a      	ldr	r2, [r3, #0]
 800c8d6:	f011 0f80 	tst.w	r1, #128	; 0x80
 800c8da:	d023      	beq.n	800c924 <_printf_i+0x94>
 800c8dc:	1d11      	adds	r1, r2, #4
 800c8de:	6019      	str	r1, [r3, #0]
 800c8e0:	6813      	ldr	r3, [r2, #0]
 800c8e2:	e027      	b.n	800c934 <_printf_i+0xa4>
 800c8e4:	2a73      	cmp	r2, #115	; 0x73
 800c8e6:	f000 80b4 	beq.w	800ca52 <_printf_i+0x1c2>
 800c8ea:	d808      	bhi.n	800c8fe <_printf_i+0x6e>
 800c8ec:	2a6f      	cmp	r2, #111	; 0x6f
 800c8ee:	d02a      	beq.n	800c946 <_printf_i+0xb6>
 800c8f0:	2a70      	cmp	r2, #112	; 0x70
 800c8f2:	d1e5      	bne.n	800c8c0 <_printf_i+0x30>
 800c8f4:	680a      	ldr	r2, [r1, #0]
 800c8f6:	f042 0220 	orr.w	r2, r2, #32
 800c8fa:	600a      	str	r2, [r1, #0]
 800c8fc:	e003      	b.n	800c906 <_printf_i+0x76>
 800c8fe:	2a75      	cmp	r2, #117	; 0x75
 800c900:	d021      	beq.n	800c946 <_printf_i+0xb6>
 800c902:	2a78      	cmp	r2, #120	; 0x78
 800c904:	d1dc      	bne.n	800c8c0 <_printf_i+0x30>
 800c906:	2278      	movs	r2, #120	; 0x78
 800c908:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800c90c:	496e      	ldr	r1, [pc, #440]	; (800cac8 <_printf_i+0x238>)
 800c90e:	e064      	b.n	800c9da <_printf_i+0x14a>
 800c910:	681a      	ldr	r2, [r3, #0]
 800c912:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800c916:	1d11      	adds	r1, r2, #4
 800c918:	6019      	str	r1, [r3, #0]
 800c91a:	6813      	ldr	r3, [r2, #0]
 800c91c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c920:	2301      	movs	r3, #1
 800c922:	e0a3      	b.n	800ca6c <_printf_i+0x1dc>
 800c924:	f011 0f40 	tst.w	r1, #64	; 0x40
 800c928:	f102 0104 	add.w	r1, r2, #4
 800c92c:	6019      	str	r1, [r3, #0]
 800c92e:	d0d7      	beq.n	800c8e0 <_printf_i+0x50>
 800c930:	f9b2 3000 	ldrsh.w	r3, [r2]
 800c934:	2b00      	cmp	r3, #0
 800c936:	da03      	bge.n	800c940 <_printf_i+0xb0>
 800c938:	222d      	movs	r2, #45	; 0x2d
 800c93a:	425b      	negs	r3, r3
 800c93c:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800c940:	4962      	ldr	r1, [pc, #392]	; (800cacc <_printf_i+0x23c>)
 800c942:	220a      	movs	r2, #10
 800c944:	e017      	b.n	800c976 <_printf_i+0xe6>
 800c946:	6820      	ldr	r0, [r4, #0]
 800c948:	6819      	ldr	r1, [r3, #0]
 800c94a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800c94e:	d003      	beq.n	800c958 <_printf_i+0xc8>
 800c950:	1d08      	adds	r0, r1, #4
 800c952:	6018      	str	r0, [r3, #0]
 800c954:	680b      	ldr	r3, [r1, #0]
 800c956:	e006      	b.n	800c966 <_printf_i+0xd6>
 800c958:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c95c:	f101 0004 	add.w	r0, r1, #4
 800c960:	6018      	str	r0, [r3, #0]
 800c962:	d0f7      	beq.n	800c954 <_printf_i+0xc4>
 800c964:	880b      	ldrh	r3, [r1, #0]
 800c966:	4959      	ldr	r1, [pc, #356]	; (800cacc <_printf_i+0x23c>)
 800c968:	2a6f      	cmp	r2, #111	; 0x6f
 800c96a:	bf14      	ite	ne
 800c96c:	220a      	movne	r2, #10
 800c96e:	2208      	moveq	r2, #8
 800c970:	2000      	movs	r0, #0
 800c972:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800c976:	6865      	ldr	r5, [r4, #4]
 800c978:	60a5      	str	r5, [r4, #8]
 800c97a:	2d00      	cmp	r5, #0
 800c97c:	f2c0 809c 	blt.w	800cab8 <_printf_i+0x228>
 800c980:	6820      	ldr	r0, [r4, #0]
 800c982:	f020 0004 	bic.w	r0, r0, #4
 800c986:	6020      	str	r0, [r4, #0]
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d13f      	bne.n	800ca0c <_printf_i+0x17c>
 800c98c:	2d00      	cmp	r5, #0
 800c98e:	f040 8095 	bne.w	800cabc <_printf_i+0x22c>
 800c992:	4675      	mov	r5, lr
 800c994:	2a08      	cmp	r2, #8
 800c996:	d10b      	bne.n	800c9b0 <_printf_i+0x120>
 800c998:	6823      	ldr	r3, [r4, #0]
 800c99a:	07da      	lsls	r2, r3, #31
 800c99c:	d508      	bpl.n	800c9b0 <_printf_i+0x120>
 800c99e:	6923      	ldr	r3, [r4, #16]
 800c9a0:	6862      	ldr	r2, [r4, #4]
 800c9a2:	429a      	cmp	r2, r3
 800c9a4:	bfde      	ittt	le
 800c9a6:	2330      	movle	r3, #48	; 0x30
 800c9a8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c9ac:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c9b0:	ebae 0305 	sub.w	r3, lr, r5
 800c9b4:	6123      	str	r3, [r4, #16]
 800c9b6:	f8cd 8000 	str.w	r8, [sp]
 800c9ba:	463b      	mov	r3, r7
 800c9bc:	aa03      	add	r2, sp, #12
 800c9be:	4621      	mov	r1, r4
 800c9c0:	4630      	mov	r0, r6
 800c9c2:	f7ff feef 	bl	800c7a4 <_printf_common>
 800c9c6:	3001      	adds	r0, #1
 800c9c8:	d155      	bne.n	800ca76 <_printf_i+0x1e6>
 800c9ca:	f04f 30ff 	mov.w	r0, #4294967295
 800c9ce:	b005      	add	sp, #20
 800c9d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c9d4:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 800c9d8:	493c      	ldr	r1, [pc, #240]	; (800cacc <_printf_i+0x23c>)
 800c9da:	6822      	ldr	r2, [r4, #0]
 800c9dc:	6818      	ldr	r0, [r3, #0]
 800c9de:	f012 0f80 	tst.w	r2, #128	; 0x80
 800c9e2:	f100 0504 	add.w	r5, r0, #4
 800c9e6:	601d      	str	r5, [r3, #0]
 800c9e8:	d001      	beq.n	800c9ee <_printf_i+0x15e>
 800c9ea:	6803      	ldr	r3, [r0, #0]
 800c9ec:	e002      	b.n	800c9f4 <_printf_i+0x164>
 800c9ee:	0655      	lsls	r5, r2, #25
 800c9f0:	d5fb      	bpl.n	800c9ea <_printf_i+0x15a>
 800c9f2:	8803      	ldrh	r3, [r0, #0]
 800c9f4:	07d0      	lsls	r0, r2, #31
 800c9f6:	bf44      	itt	mi
 800c9f8:	f042 0220 	orrmi.w	r2, r2, #32
 800c9fc:	6022      	strmi	r2, [r4, #0]
 800c9fe:	b91b      	cbnz	r3, 800ca08 <_printf_i+0x178>
 800ca00:	6822      	ldr	r2, [r4, #0]
 800ca02:	f022 0220 	bic.w	r2, r2, #32
 800ca06:	6022      	str	r2, [r4, #0]
 800ca08:	2210      	movs	r2, #16
 800ca0a:	e7b1      	b.n	800c970 <_printf_i+0xe0>
 800ca0c:	4675      	mov	r5, lr
 800ca0e:	fbb3 f0f2 	udiv	r0, r3, r2
 800ca12:	fb02 3310 	mls	r3, r2, r0, r3
 800ca16:	5ccb      	ldrb	r3, [r1, r3]
 800ca18:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800ca1c:	4603      	mov	r3, r0
 800ca1e:	2800      	cmp	r0, #0
 800ca20:	d1f5      	bne.n	800ca0e <_printf_i+0x17e>
 800ca22:	e7b7      	b.n	800c994 <_printf_i+0x104>
 800ca24:	6808      	ldr	r0, [r1, #0]
 800ca26:	681a      	ldr	r2, [r3, #0]
 800ca28:	6949      	ldr	r1, [r1, #20]
 800ca2a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800ca2e:	d004      	beq.n	800ca3a <_printf_i+0x1aa>
 800ca30:	1d10      	adds	r0, r2, #4
 800ca32:	6018      	str	r0, [r3, #0]
 800ca34:	6813      	ldr	r3, [r2, #0]
 800ca36:	6019      	str	r1, [r3, #0]
 800ca38:	e007      	b.n	800ca4a <_printf_i+0x1ba>
 800ca3a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ca3e:	f102 0004 	add.w	r0, r2, #4
 800ca42:	6018      	str	r0, [r3, #0]
 800ca44:	6813      	ldr	r3, [r2, #0]
 800ca46:	d0f6      	beq.n	800ca36 <_printf_i+0x1a6>
 800ca48:	8019      	strh	r1, [r3, #0]
 800ca4a:	2300      	movs	r3, #0
 800ca4c:	6123      	str	r3, [r4, #16]
 800ca4e:	4675      	mov	r5, lr
 800ca50:	e7b1      	b.n	800c9b6 <_printf_i+0x126>
 800ca52:	681a      	ldr	r2, [r3, #0]
 800ca54:	1d11      	adds	r1, r2, #4
 800ca56:	6019      	str	r1, [r3, #0]
 800ca58:	6815      	ldr	r5, [r2, #0]
 800ca5a:	6862      	ldr	r2, [r4, #4]
 800ca5c:	2100      	movs	r1, #0
 800ca5e:	4628      	mov	r0, r5
 800ca60:	f7f3 fc06 	bl	8000270 <memchr>
 800ca64:	b108      	cbz	r0, 800ca6a <_printf_i+0x1da>
 800ca66:	1b40      	subs	r0, r0, r5
 800ca68:	6060      	str	r0, [r4, #4]
 800ca6a:	6863      	ldr	r3, [r4, #4]
 800ca6c:	6123      	str	r3, [r4, #16]
 800ca6e:	2300      	movs	r3, #0
 800ca70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ca74:	e79f      	b.n	800c9b6 <_printf_i+0x126>
 800ca76:	6923      	ldr	r3, [r4, #16]
 800ca78:	462a      	mov	r2, r5
 800ca7a:	4639      	mov	r1, r7
 800ca7c:	4630      	mov	r0, r6
 800ca7e:	47c0      	blx	r8
 800ca80:	3001      	adds	r0, #1
 800ca82:	d0a2      	beq.n	800c9ca <_printf_i+0x13a>
 800ca84:	6823      	ldr	r3, [r4, #0]
 800ca86:	079b      	lsls	r3, r3, #30
 800ca88:	d507      	bpl.n	800ca9a <_printf_i+0x20a>
 800ca8a:	2500      	movs	r5, #0
 800ca8c:	f104 0919 	add.w	r9, r4, #25
 800ca90:	68e3      	ldr	r3, [r4, #12]
 800ca92:	9a03      	ldr	r2, [sp, #12]
 800ca94:	1a9b      	subs	r3, r3, r2
 800ca96:	429d      	cmp	r5, r3
 800ca98:	db05      	blt.n	800caa6 <_printf_i+0x216>
 800ca9a:	68e0      	ldr	r0, [r4, #12]
 800ca9c:	9b03      	ldr	r3, [sp, #12]
 800ca9e:	4298      	cmp	r0, r3
 800caa0:	bfb8      	it	lt
 800caa2:	4618      	movlt	r0, r3
 800caa4:	e793      	b.n	800c9ce <_printf_i+0x13e>
 800caa6:	2301      	movs	r3, #1
 800caa8:	464a      	mov	r2, r9
 800caaa:	4639      	mov	r1, r7
 800caac:	4630      	mov	r0, r6
 800caae:	47c0      	blx	r8
 800cab0:	3001      	adds	r0, #1
 800cab2:	d08a      	beq.n	800c9ca <_printf_i+0x13a>
 800cab4:	3501      	adds	r5, #1
 800cab6:	e7eb      	b.n	800ca90 <_printf_i+0x200>
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d1a7      	bne.n	800ca0c <_printf_i+0x17c>
 800cabc:	780b      	ldrb	r3, [r1, #0]
 800cabe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cac2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cac6:	e765      	b.n	800c994 <_printf_i+0x104>
 800cac8:	08010446 	.word	0x08010446
 800cacc:	08010435 	.word	0x08010435

0800cad0 <_sbrk_r>:
 800cad0:	b538      	push	{r3, r4, r5, lr}
 800cad2:	4c06      	ldr	r4, [pc, #24]	; (800caec <_sbrk_r+0x1c>)
 800cad4:	2300      	movs	r3, #0
 800cad6:	4605      	mov	r5, r0
 800cad8:	4608      	mov	r0, r1
 800cada:	6023      	str	r3, [r4, #0]
 800cadc:	f7ff fa8e 	bl	800bffc <_sbrk>
 800cae0:	1c43      	adds	r3, r0, #1
 800cae2:	d102      	bne.n	800caea <_sbrk_r+0x1a>
 800cae4:	6823      	ldr	r3, [r4, #0]
 800cae6:	b103      	cbz	r3, 800caea <_sbrk_r+0x1a>
 800cae8:	602b      	str	r3, [r5, #0]
 800caea:	bd38      	pop	{r3, r4, r5, pc}
 800caec:	2000d3a8 	.word	0x2000d3a8

0800caf0 <__sread>:
 800caf0:	b510      	push	{r4, lr}
 800caf2:	460c      	mov	r4, r1
 800caf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800caf8:	f000 fa4a 	bl	800cf90 <_read_r>
 800cafc:	2800      	cmp	r0, #0
 800cafe:	bfab      	itete	ge
 800cb00:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cb02:	89a3      	ldrhlt	r3, [r4, #12]
 800cb04:	181b      	addge	r3, r3, r0
 800cb06:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cb0a:	bfac      	ite	ge
 800cb0c:	6563      	strge	r3, [r4, #84]	; 0x54
 800cb0e:	81a3      	strhlt	r3, [r4, #12]
 800cb10:	bd10      	pop	{r4, pc}

0800cb12 <__swrite>:
 800cb12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb16:	461f      	mov	r7, r3
 800cb18:	898b      	ldrh	r3, [r1, #12]
 800cb1a:	05db      	lsls	r3, r3, #23
 800cb1c:	4605      	mov	r5, r0
 800cb1e:	460c      	mov	r4, r1
 800cb20:	4616      	mov	r6, r2
 800cb22:	d505      	bpl.n	800cb30 <__swrite+0x1e>
 800cb24:	2302      	movs	r3, #2
 800cb26:	2200      	movs	r2, #0
 800cb28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb2c:	f000 f9b8 	bl	800cea0 <_lseek_r>
 800cb30:	89a3      	ldrh	r3, [r4, #12]
 800cb32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cb36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cb3a:	81a3      	strh	r3, [r4, #12]
 800cb3c:	4632      	mov	r2, r6
 800cb3e:	463b      	mov	r3, r7
 800cb40:	4628      	mov	r0, r5
 800cb42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cb46:	f000 b869 	b.w	800cc1c <_write_r>

0800cb4a <__sseek>:
 800cb4a:	b510      	push	{r4, lr}
 800cb4c:	460c      	mov	r4, r1
 800cb4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb52:	f000 f9a5 	bl	800cea0 <_lseek_r>
 800cb56:	1c43      	adds	r3, r0, #1
 800cb58:	89a3      	ldrh	r3, [r4, #12]
 800cb5a:	bf15      	itete	ne
 800cb5c:	6560      	strne	r0, [r4, #84]	; 0x54
 800cb5e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cb62:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cb66:	81a3      	strheq	r3, [r4, #12]
 800cb68:	bf18      	it	ne
 800cb6a:	81a3      	strhne	r3, [r4, #12]
 800cb6c:	bd10      	pop	{r4, pc}

0800cb6e <__sclose>:
 800cb6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb72:	f000 b8d3 	b.w	800cd1c <_close_r>
	...

0800cb78 <__swbuf_r>:
 800cb78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb7a:	460e      	mov	r6, r1
 800cb7c:	4614      	mov	r4, r2
 800cb7e:	4605      	mov	r5, r0
 800cb80:	b118      	cbz	r0, 800cb8a <__swbuf_r+0x12>
 800cb82:	6983      	ldr	r3, [r0, #24]
 800cb84:	b90b      	cbnz	r3, 800cb8a <__swbuf_r+0x12>
 800cb86:	f7ff fb8f 	bl	800c2a8 <__sinit>
 800cb8a:	4b21      	ldr	r3, [pc, #132]	; (800cc10 <__swbuf_r+0x98>)
 800cb8c:	429c      	cmp	r4, r3
 800cb8e:	d12a      	bne.n	800cbe6 <__swbuf_r+0x6e>
 800cb90:	686c      	ldr	r4, [r5, #4]
 800cb92:	69a3      	ldr	r3, [r4, #24]
 800cb94:	60a3      	str	r3, [r4, #8]
 800cb96:	89a3      	ldrh	r3, [r4, #12]
 800cb98:	071a      	lsls	r2, r3, #28
 800cb9a:	d52e      	bpl.n	800cbfa <__swbuf_r+0x82>
 800cb9c:	6923      	ldr	r3, [r4, #16]
 800cb9e:	b363      	cbz	r3, 800cbfa <__swbuf_r+0x82>
 800cba0:	6923      	ldr	r3, [r4, #16]
 800cba2:	6820      	ldr	r0, [r4, #0]
 800cba4:	1ac0      	subs	r0, r0, r3
 800cba6:	6963      	ldr	r3, [r4, #20]
 800cba8:	b2f6      	uxtb	r6, r6
 800cbaa:	4298      	cmp	r0, r3
 800cbac:	4637      	mov	r7, r6
 800cbae:	db04      	blt.n	800cbba <__swbuf_r+0x42>
 800cbb0:	4621      	mov	r1, r4
 800cbb2:	4628      	mov	r0, r5
 800cbb4:	f000 f94a 	bl	800ce4c <_fflush_r>
 800cbb8:	bb28      	cbnz	r0, 800cc06 <__swbuf_r+0x8e>
 800cbba:	68a3      	ldr	r3, [r4, #8]
 800cbbc:	3b01      	subs	r3, #1
 800cbbe:	60a3      	str	r3, [r4, #8]
 800cbc0:	6823      	ldr	r3, [r4, #0]
 800cbc2:	1c5a      	adds	r2, r3, #1
 800cbc4:	6022      	str	r2, [r4, #0]
 800cbc6:	701e      	strb	r6, [r3, #0]
 800cbc8:	6963      	ldr	r3, [r4, #20]
 800cbca:	3001      	adds	r0, #1
 800cbcc:	4298      	cmp	r0, r3
 800cbce:	d004      	beq.n	800cbda <__swbuf_r+0x62>
 800cbd0:	89a3      	ldrh	r3, [r4, #12]
 800cbd2:	07db      	lsls	r3, r3, #31
 800cbd4:	d519      	bpl.n	800cc0a <__swbuf_r+0x92>
 800cbd6:	2e0a      	cmp	r6, #10
 800cbd8:	d117      	bne.n	800cc0a <__swbuf_r+0x92>
 800cbda:	4621      	mov	r1, r4
 800cbdc:	4628      	mov	r0, r5
 800cbde:	f000 f935 	bl	800ce4c <_fflush_r>
 800cbe2:	b190      	cbz	r0, 800cc0a <__swbuf_r+0x92>
 800cbe4:	e00f      	b.n	800cc06 <__swbuf_r+0x8e>
 800cbe6:	4b0b      	ldr	r3, [pc, #44]	; (800cc14 <__swbuf_r+0x9c>)
 800cbe8:	429c      	cmp	r4, r3
 800cbea:	d101      	bne.n	800cbf0 <__swbuf_r+0x78>
 800cbec:	68ac      	ldr	r4, [r5, #8]
 800cbee:	e7d0      	b.n	800cb92 <__swbuf_r+0x1a>
 800cbf0:	4b09      	ldr	r3, [pc, #36]	; (800cc18 <__swbuf_r+0xa0>)
 800cbf2:	429c      	cmp	r4, r3
 800cbf4:	bf08      	it	eq
 800cbf6:	68ec      	ldreq	r4, [r5, #12]
 800cbf8:	e7cb      	b.n	800cb92 <__swbuf_r+0x1a>
 800cbfa:	4621      	mov	r1, r4
 800cbfc:	4628      	mov	r0, r5
 800cbfe:	f000 f81f 	bl	800cc40 <__swsetup_r>
 800cc02:	2800      	cmp	r0, #0
 800cc04:	d0cc      	beq.n	800cba0 <__swbuf_r+0x28>
 800cc06:	f04f 37ff 	mov.w	r7, #4294967295
 800cc0a:	4638      	mov	r0, r7
 800cc0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc0e:	bf00      	nop
 800cc10:	080103e0 	.word	0x080103e0
 800cc14:	08010400 	.word	0x08010400
 800cc18:	080103c0 	.word	0x080103c0

0800cc1c <_write_r>:
 800cc1c:	b538      	push	{r3, r4, r5, lr}
 800cc1e:	4c07      	ldr	r4, [pc, #28]	; (800cc3c <_write_r+0x20>)
 800cc20:	4605      	mov	r5, r0
 800cc22:	4608      	mov	r0, r1
 800cc24:	4611      	mov	r1, r2
 800cc26:	2200      	movs	r2, #0
 800cc28:	6022      	str	r2, [r4, #0]
 800cc2a:	461a      	mov	r2, r3
 800cc2c:	f7ff f9d8 	bl	800bfe0 <_write>
 800cc30:	1c43      	adds	r3, r0, #1
 800cc32:	d102      	bne.n	800cc3a <_write_r+0x1e>
 800cc34:	6823      	ldr	r3, [r4, #0]
 800cc36:	b103      	cbz	r3, 800cc3a <_write_r+0x1e>
 800cc38:	602b      	str	r3, [r5, #0]
 800cc3a:	bd38      	pop	{r3, r4, r5, pc}
 800cc3c:	2000d3a8 	.word	0x2000d3a8

0800cc40 <__swsetup_r>:
 800cc40:	4b32      	ldr	r3, [pc, #200]	; (800cd0c <__swsetup_r+0xcc>)
 800cc42:	b570      	push	{r4, r5, r6, lr}
 800cc44:	681d      	ldr	r5, [r3, #0]
 800cc46:	4606      	mov	r6, r0
 800cc48:	460c      	mov	r4, r1
 800cc4a:	b125      	cbz	r5, 800cc56 <__swsetup_r+0x16>
 800cc4c:	69ab      	ldr	r3, [r5, #24]
 800cc4e:	b913      	cbnz	r3, 800cc56 <__swsetup_r+0x16>
 800cc50:	4628      	mov	r0, r5
 800cc52:	f7ff fb29 	bl	800c2a8 <__sinit>
 800cc56:	4b2e      	ldr	r3, [pc, #184]	; (800cd10 <__swsetup_r+0xd0>)
 800cc58:	429c      	cmp	r4, r3
 800cc5a:	d10f      	bne.n	800cc7c <__swsetup_r+0x3c>
 800cc5c:	686c      	ldr	r4, [r5, #4]
 800cc5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc62:	b29a      	uxth	r2, r3
 800cc64:	0715      	lsls	r5, r2, #28
 800cc66:	d42c      	bmi.n	800ccc2 <__swsetup_r+0x82>
 800cc68:	06d0      	lsls	r0, r2, #27
 800cc6a:	d411      	bmi.n	800cc90 <__swsetup_r+0x50>
 800cc6c:	2209      	movs	r2, #9
 800cc6e:	6032      	str	r2, [r6, #0]
 800cc70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cc74:	81a3      	strh	r3, [r4, #12]
 800cc76:	f04f 30ff 	mov.w	r0, #4294967295
 800cc7a:	bd70      	pop	{r4, r5, r6, pc}
 800cc7c:	4b25      	ldr	r3, [pc, #148]	; (800cd14 <__swsetup_r+0xd4>)
 800cc7e:	429c      	cmp	r4, r3
 800cc80:	d101      	bne.n	800cc86 <__swsetup_r+0x46>
 800cc82:	68ac      	ldr	r4, [r5, #8]
 800cc84:	e7eb      	b.n	800cc5e <__swsetup_r+0x1e>
 800cc86:	4b24      	ldr	r3, [pc, #144]	; (800cd18 <__swsetup_r+0xd8>)
 800cc88:	429c      	cmp	r4, r3
 800cc8a:	bf08      	it	eq
 800cc8c:	68ec      	ldreq	r4, [r5, #12]
 800cc8e:	e7e6      	b.n	800cc5e <__swsetup_r+0x1e>
 800cc90:	0751      	lsls	r1, r2, #29
 800cc92:	d512      	bpl.n	800ccba <__swsetup_r+0x7a>
 800cc94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cc96:	b141      	cbz	r1, 800ccaa <__swsetup_r+0x6a>
 800cc98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cc9c:	4299      	cmp	r1, r3
 800cc9e:	d002      	beq.n	800cca6 <__swsetup_r+0x66>
 800cca0:	4630      	mov	r0, r6
 800cca2:	f7ff fb93 	bl	800c3cc <_free_r>
 800cca6:	2300      	movs	r3, #0
 800cca8:	6363      	str	r3, [r4, #52]	; 0x34
 800ccaa:	89a3      	ldrh	r3, [r4, #12]
 800ccac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ccb0:	81a3      	strh	r3, [r4, #12]
 800ccb2:	2300      	movs	r3, #0
 800ccb4:	6063      	str	r3, [r4, #4]
 800ccb6:	6923      	ldr	r3, [r4, #16]
 800ccb8:	6023      	str	r3, [r4, #0]
 800ccba:	89a3      	ldrh	r3, [r4, #12]
 800ccbc:	f043 0308 	orr.w	r3, r3, #8
 800ccc0:	81a3      	strh	r3, [r4, #12]
 800ccc2:	6923      	ldr	r3, [r4, #16]
 800ccc4:	b94b      	cbnz	r3, 800ccda <__swsetup_r+0x9a>
 800ccc6:	89a3      	ldrh	r3, [r4, #12]
 800ccc8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cccc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ccd0:	d003      	beq.n	800ccda <__swsetup_r+0x9a>
 800ccd2:	4621      	mov	r1, r4
 800ccd4:	4630      	mov	r0, r6
 800ccd6:	f000 f919 	bl	800cf0c <__smakebuf_r>
 800ccda:	89a2      	ldrh	r2, [r4, #12]
 800ccdc:	f012 0301 	ands.w	r3, r2, #1
 800cce0:	d00c      	beq.n	800ccfc <__swsetup_r+0xbc>
 800cce2:	2300      	movs	r3, #0
 800cce4:	60a3      	str	r3, [r4, #8]
 800cce6:	6963      	ldr	r3, [r4, #20]
 800cce8:	425b      	negs	r3, r3
 800ccea:	61a3      	str	r3, [r4, #24]
 800ccec:	6923      	ldr	r3, [r4, #16]
 800ccee:	b953      	cbnz	r3, 800cd06 <__swsetup_r+0xc6>
 800ccf0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ccf4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800ccf8:	d1ba      	bne.n	800cc70 <__swsetup_r+0x30>
 800ccfa:	bd70      	pop	{r4, r5, r6, pc}
 800ccfc:	0792      	lsls	r2, r2, #30
 800ccfe:	bf58      	it	pl
 800cd00:	6963      	ldrpl	r3, [r4, #20]
 800cd02:	60a3      	str	r3, [r4, #8]
 800cd04:	e7f2      	b.n	800ccec <__swsetup_r+0xac>
 800cd06:	2000      	movs	r0, #0
 800cd08:	e7f7      	b.n	800ccfa <__swsetup_r+0xba>
 800cd0a:	bf00      	nop
 800cd0c:	20000018 	.word	0x20000018
 800cd10:	080103e0 	.word	0x080103e0
 800cd14:	08010400 	.word	0x08010400
 800cd18:	080103c0 	.word	0x080103c0

0800cd1c <_close_r>:
 800cd1c:	b538      	push	{r3, r4, r5, lr}
 800cd1e:	4c06      	ldr	r4, [pc, #24]	; (800cd38 <_close_r+0x1c>)
 800cd20:	2300      	movs	r3, #0
 800cd22:	4605      	mov	r5, r0
 800cd24:	4608      	mov	r0, r1
 800cd26:	6023      	str	r3, [r4, #0]
 800cd28:	f7ff f982 	bl	800c030 <_close>
 800cd2c:	1c43      	adds	r3, r0, #1
 800cd2e:	d102      	bne.n	800cd36 <_close_r+0x1a>
 800cd30:	6823      	ldr	r3, [r4, #0]
 800cd32:	b103      	cbz	r3, 800cd36 <_close_r+0x1a>
 800cd34:	602b      	str	r3, [r5, #0]
 800cd36:	bd38      	pop	{r3, r4, r5, pc}
 800cd38:	2000d3a8 	.word	0x2000d3a8

0800cd3c <__sflush_r>:
 800cd3c:	898a      	ldrh	r2, [r1, #12]
 800cd3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd42:	4605      	mov	r5, r0
 800cd44:	0710      	lsls	r0, r2, #28
 800cd46:	460c      	mov	r4, r1
 800cd48:	d45a      	bmi.n	800ce00 <__sflush_r+0xc4>
 800cd4a:	684b      	ldr	r3, [r1, #4]
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	dc05      	bgt.n	800cd5c <__sflush_r+0x20>
 800cd50:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	dc02      	bgt.n	800cd5c <__sflush_r+0x20>
 800cd56:	2000      	movs	r0, #0
 800cd58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cd5e:	2e00      	cmp	r6, #0
 800cd60:	d0f9      	beq.n	800cd56 <__sflush_r+0x1a>
 800cd62:	2300      	movs	r3, #0
 800cd64:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cd68:	682f      	ldr	r7, [r5, #0]
 800cd6a:	602b      	str	r3, [r5, #0]
 800cd6c:	d033      	beq.n	800cdd6 <__sflush_r+0x9a>
 800cd6e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cd70:	89a3      	ldrh	r3, [r4, #12]
 800cd72:	075a      	lsls	r2, r3, #29
 800cd74:	d505      	bpl.n	800cd82 <__sflush_r+0x46>
 800cd76:	6863      	ldr	r3, [r4, #4]
 800cd78:	1ac0      	subs	r0, r0, r3
 800cd7a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cd7c:	b10b      	cbz	r3, 800cd82 <__sflush_r+0x46>
 800cd7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cd80:	1ac0      	subs	r0, r0, r3
 800cd82:	2300      	movs	r3, #0
 800cd84:	4602      	mov	r2, r0
 800cd86:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cd88:	6a21      	ldr	r1, [r4, #32]
 800cd8a:	4628      	mov	r0, r5
 800cd8c:	47b0      	blx	r6
 800cd8e:	1c43      	adds	r3, r0, #1
 800cd90:	89a3      	ldrh	r3, [r4, #12]
 800cd92:	d106      	bne.n	800cda2 <__sflush_r+0x66>
 800cd94:	6829      	ldr	r1, [r5, #0]
 800cd96:	291d      	cmp	r1, #29
 800cd98:	d84b      	bhi.n	800ce32 <__sflush_r+0xf6>
 800cd9a:	4a2b      	ldr	r2, [pc, #172]	; (800ce48 <__sflush_r+0x10c>)
 800cd9c:	40ca      	lsrs	r2, r1
 800cd9e:	07d6      	lsls	r6, r2, #31
 800cda0:	d547      	bpl.n	800ce32 <__sflush_r+0xf6>
 800cda2:	2200      	movs	r2, #0
 800cda4:	6062      	str	r2, [r4, #4]
 800cda6:	04d9      	lsls	r1, r3, #19
 800cda8:	6922      	ldr	r2, [r4, #16]
 800cdaa:	6022      	str	r2, [r4, #0]
 800cdac:	d504      	bpl.n	800cdb8 <__sflush_r+0x7c>
 800cdae:	1c42      	adds	r2, r0, #1
 800cdb0:	d101      	bne.n	800cdb6 <__sflush_r+0x7a>
 800cdb2:	682b      	ldr	r3, [r5, #0]
 800cdb4:	b903      	cbnz	r3, 800cdb8 <__sflush_r+0x7c>
 800cdb6:	6560      	str	r0, [r4, #84]	; 0x54
 800cdb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cdba:	602f      	str	r7, [r5, #0]
 800cdbc:	2900      	cmp	r1, #0
 800cdbe:	d0ca      	beq.n	800cd56 <__sflush_r+0x1a>
 800cdc0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cdc4:	4299      	cmp	r1, r3
 800cdc6:	d002      	beq.n	800cdce <__sflush_r+0x92>
 800cdc8:	4628      	mov	r0, r5
 800cdca:	f7ff faff 	bl	800c3cc <_free_r>
 800cdce:	2000      	movs	r0, #0
 800cdd0:	6360      	str	r0, [r4, #52]	; 0x34
 800cdd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cdd6:	6a21      	ldr	r1, [r4, #32]
 800cdd8:	2301      	movs	r3, #1
 800cdda:	4628      	mov	r0, r5
 800cddc:	47b0      	blx	r6
 800cdde:	1c41      	adds	r1, r0, #1
 800cde0:	d1c6      	bne.n	800cd70 <__sflush_r+0x34>
 800cde2:	682b      	ldr	r3, [r5, #0]
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d0c3      	beq.n	800cd70 <__sflush_r+0x34>
 800cde8:	2b1d      	cmp	r3, #29
 800cdea:	d001      	beq.n	800cdf0 <__sflush_r+0xb4>
 800cdec:	2b16      	cmp	r3, #22
 800cdee:	d101      	bne.n	800cdf4 <__sflush_r+0xb8>
 800cdf0:	602f      	str	r7, [r5, #0]
 800cdf2:	e7b0      	b.n	800cd56 <__sflush_r+0x1a>
 800cdf4:	89a3      	ldrh	r3, [r4, #12]
 800cdf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cdfa:	81a3      	strh	r3, [r4, #12]
 800cdfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce00:	690f      	ldr	r7, [r1, #16]
 800ce02:	2f00      	cmp	r7, #0
 800ce04:	d0a7      	beq.n	800cd56 <__sflush_r+0x1a>
 800ce06:	0793      	lsls	r3, r2, #30
 800ce08:	680e      	ldr	r6, [r1, #0]
 800ce0a:	bf08      	it	eq
 800ce0c:	694b      	ldreq	r3, [r1, #20]
 800ce0e:	600f      	str	r7, [r1, #0]
 800ce10:	bf18      	it	ne
 800ce12:	2300      	movne	r3, #0
 800ce14:	eba6 0807 	sub.w	r8, r6, r7
 800ce18:	608b      	str	r3, [r1, #8]
 800ce1a:	f1b8 0f00 	cmp.w	r8, #0
 800ce1e:	dd9a      	ble.n	800cd56 <__sflush_r+0x1a>
 800ce20:	4643      	mov	r3, r8
 800ce22:	463a      	mov	r2, r7
 800ce24:	6a21      	ldr	r1, [r4, #32]
 800ce26:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ce28:	4628      	mov	r0, r5
 800ce2a:	47b0      	blx	r6
 800ce2c:	2800      	cmp	r0, #0
 800ce2e:	dc07      	bgt.n	800ce40 <__sflush_r+0x104>
 800ce30:	89a3      	ldrh	r3, [r4, #12]
 800ce32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ce36:	81a3      	strh	r3, [r4, #12]
 800ce38:	f04f 30ff 	mov.w	r0, #4294967295
 800ce3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce40:	4407      	add	r7, r0
 800ce42:	eba8 0800 	sub.w	r8, r8, r0
 800ce46:	e7e8      	b.n	800ce1a <__sflush_r+0xde>
 800ce48:	20400001 	.word	0x20400001

0800ce4c <_fflush_r>:
 800ce4c:	b538      	push	{r3, r4, r5, lr}
 800ce4e:	690b      	ldr	r3, [r1, #16]
 800ce50:	4605      	mov	r5, r0
 800ce52:	460c      	mov	r4, r1
 800ce54:	b1db      	cbz	r3, 800ce8e <_fflush_r+0x42>
 800ce56:	b118      	cbz	r0, 800ce60 <_fflush_r+0x14>
 800ce58:	6983      	ldr	r3, [r0, #24]
 800ce5a:	b90b      	cbnz	r3, 800ce60 <_fflush_r+0x14>
 800ce5c:	f7ff fa24 	bl	800c2a8 <__sinit>
 800ce60:	4b0c      	ldr	r3, [pc, #48]	; (800ce94 <_fflush_r+0x48>)
 800ce62:	429c      	cmp	r4, r3
 800ce64:	d109      	bne.n	800ce7a <_fflush_r+0x2e>
 800ce66:	686c      	ldr	r4, [r5, #4]
 800ce68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce6c:	b17b      	cbz	r3, 800ce8e <_fflush_r+0x42>
 800ce6e:	4621      	mov	r1, r4
 800ce70:	4628      	mov	r0, r5
 800ce72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ce76:	f7ff bf61 	b.w	800cd3c <__sflush_r>
 800ce7a:	4b07      	ldr	r3, [pc, #28]	; (800ce98 <_fflush_r+0x4c>)
 800ce7c:	429c      	cmp	r4, r3
 800ce7e:	d101      	bne.n	800ce84 <_fflush_r+0x38>
 800ce80:	68ac      	ldr	r4, [r5, #8]
 800ce82:	e7f1      	b.n	800ce68 <_fflush_r+0x1c>
 800ce84:	4b05      	ldr	r3, [pc, #20]	; (800ce9c <_fflush_r+0x50>)
 800ce86:	429c      	cmp	r4, r3
 800ce88:	bf08      	it	eq
 800ce8a:	68ec      	ldreq	r4, [r5, #12]
 800ce8c:	e7ec      	b.n	800ce68 <_fflush_r+0x1c>
 800ce8e:	2000      	movs	r0, #0
 800ce90:	bd38      	pop	{r3, r4, r5, pc}
 800ce92:	bf00      	nop
 800ce94:	080103e0 	.word	0x080103e0
 800ce98:	08010400 	.word	0x08010400
 800ce9c:	080103c0 	.word	0x080103c0

0800cea0 <_lseek_r>:
 800cea0:	b538      	push	{r3, r4, r5, lr}
 800cea2:	4c07      	ldr	r4, [pc, #28]	; (800cec0 <_lseek_r+0x20>)
 800cea4:	4605      	mov	r5, r0
 800cea6:	4608      	mov	r0, r1
 800cea8:	4611      	mov	r1, r2
 800ceaa:	2200      	movs	r2, #0
 800ceac:	6022      	str	r2, [r4, #0]
 800ceae:	461a      	mov	r2, r3
 800ceb0:	f7ff f8c8 	bl	800c044 <_lseek>
 800ceb4:	1c43      	adds	r3, r0, #1
 800ceb6:	d102      	bne.n	800cebe <_lseek_r+0x1e>
 800ceb8:	6823      	ldr	r3, [r4, #0]
 800ceba:	b103      	cbz	r3, 800cebe <_lseek_r+0x1e>
 800cebc:	602b      	str	r3, [r5, #0]
 800cebe:	bd38      	pop	{r3, r4, r5, pc}
 800cec0:	2000d3a8 	.word	0x2000d3a8

0800cec4 <__swhatbuf_r>:
 800cec4:	b570      	push	{r4, r5, r6, lr}
 800cec6:	460e      	mov	r6, r1
 800cec8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cecc:	2900      	cmp	r1, #0
 800cece:	b090      	sub	sp, #64	; 0x40
 800ced0:	4614      	mov	r4, r2
 800ced2:	461d      	mov	r5, r3
 800ced4:	da07      	bge.n	800cee6 <__swhatbuf_r+0x22>
 800ced6:	2300      	movs	r3, #0
 800ced8:	602b      	str	r3, [r5, #0]
 800ceda:	89b3      	ldrh	r3, [r6, #12]
 800cedc:	061a      	lsls	r2, r3, #24
 800cede:	d410      	bmi.n	800cf02 <__swhatbuf_r+0x3e>
 800cee0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cee4:	e00e      	b.n	800cf04 <__swhatbuf_r+0x40>
 800cee6:	aa01      	add	r2, sp, #4
 800cee8:	f000 f864 	bl	800cfb4 <_fstat_r>
 800ceec:	2800      	cmp	r0, #0
 800ceee:	dbf2      	blt.n	800ced6 <__swhatbuf_r+0x12>
 800cef0:	9a02      	ldr	r2, [sp, #8]
 800cef2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cef6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cefa:	425a      	negs	r2, r3
 800cefc:	415a      	adcs	r2, r3
 800cefe:	602a      	str	r2, [r5, #0]
 800cf00:	e7ee      	b.n	800cee0 <__swhatbuf_r+0x1c>
 800cf02:	2340      	movs	r3, #64	; 0x40
 800cf04:	2000      	movs	r0, #0
 800cf06:	6023      	str	r3, [r4, #0]
 800cf08:	b010      	add	sp, #64	; 0x40
 800cf0a:	bd70      	pop	{r4, r5, r6, pc}

0800cf0c <__smakebuf_r>:
 800cf0c:	898b      	ldrh	r3, [r1, #12]
 800cf0e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cf10:	079d      	lsls	r5, r3, #30
 800cf12:	4606      	mov	r6, r0
 800cf14:	460c      	mov	r4, r1
 800cf16:	d507      	bpl.n	800cf28 <__smakebuf_r+0x1c>
 800cf18:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cf1c:	6023      	str	r3, [r4, #0]
 800cf1e:	6123      	str	r3, [r4, #16]
 800cf20:	2301      	movs	r3, #1
 800cf22:	6163      	str	r3, [r4, #20]
 800cf24:	b002      	add	sp, #8
 800cf26:	bd70      	pop	{r4, r5, r6, pc}
 800cf28:	ab01      	add	r3, sp, #4
 800cf2a:	466a      	mov	r2, sp
 800cf2c:	f7ff ffca 	bl	800cec4 <__swhatbuf_r>
 800cf30:	9900      	ldr	r1, [sp, #0]
 800cf32:	4605      	mov	r5, r0
 800cf34:	4630      	mov	r0, r6
 800cf36:	f7ff fa97 	bl	800c468 <_malloc_r>
 800cf3a:	b948      	cbnz	r0, 800cf50 <__smakebuf_r+0x44>
 800cf3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf40:	059a      	lsls	r2, r3, #22
 800cf42:	d4ef      	bmi.n	800cf24 <__smakebuf_r+0x18>
 800cf44:	f023 0303 	bic.w	r3, r3, #3
 800cf48:	f043 0302 	orr.w	r3, r3, #2
 800cf4c:	81a3      	strh	r3, [r4, #12]
 800cf4e:	e7e3      	b.n	800cf18 <__smakebuf_r+0xc>
 800cf50:	4b0d      	ldr	r3, [pc, #52]	; (800cf88 <__smakebuf_r+0x7c>)
 800cf52:	62b3      	str	r3, [r6, #40]	; 0x28
 800cf54:	89a3      	ldrh	r3, [r4, #12]
 800cf56:	6020      	str	r0, [r4, #0]
 800cf58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cf5c:	81a3      	strh	r3, [r4, #12]
 800cf5e:	9b00      	ldr	r3, [sp, #0]
 800cf60:	6163      	str	r3, [r4, #20]
 800cf62:	9b01      	ldr	r3, [sp, #4]
 800cf64:	6120      	str	r0, [r4, #16]
 800cf66:	b15b      	cbz	r3, 800cf80 <__smakebuf_r+0x74>
 800cf68:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cf6c:	4630      	mov	r0, r6
 800cf6e:	f000 f833 	bl	800cfd8 <_isatty_r>
 800cf72:	b128      	cbz	r0, 800cf80 <__smakebuf_r+0x74>
 800cf74:	89a3      	ldrh	r3, [r4, #12]
 800cf76:	f023 0303 	bic.w	r3, r3, #3
 800cf7a:	f043 0301 	orr.w	r3, r3, #1
 800cf7e:	81a3      	strh	r3, [r4, #12]
 800cf80:	89a3      	ldrh	r3, [r4, #12]
 800cf82:	431d      	orrs	r5, r3
 800cf84:	81a5      	strh	r5, [r4, #12]
 800cf86:	e7cd      	b.n	800cf24 <__smakebuf_r+0x18>
 800cf88:	0800c229 	.word	0x0800c229

0800cf8c <__malloc_lock>:
 800cf8c:	4770      	bx	lr

0800cf8e <__malloc_unlock>:
 800cf8e:	4770      	bx	lr

0800cf90 <_read_r>:
 800cf90:	b538      	push	{r3, r4, r5, lr}
 800cf92:	4c07      	ldr	r4, [pc, #28]	; (800cfb0 <_read_r+0x20>)
 800cf94:	4605      	mov	r5, r0
 800cf96:	4608      	mov	r0, r1
 800cf98:	4611      	mov	r1, r2
 800cf9a:	2200      	movs	r2, #0
 800cf9c:	6022      	str	r2, [r4, #0]
 800cf9e:	461a      	mov	r2, r3
 800cfa0:	f7ff f810 	bl	800bfc4 <_read>
 800cfa4:	1c43      	adds	r3, r0, #1
 800cfa6:	d102      	bne.n	800cfae <_read_r+0x1e>
 800cfa8:	6823      	ldr	r3, [r4, #0]
 800cfaa:	b103      	cbz	r3, 800cfae <_read_r+0x1e>
 800cfac:	602b      	str	r3, [r5, #0]
 800cfae:	bd38      	pop	{r3, r4, r5, pc}
 800cfb0:	2000d3a8 	.word	0x2000d3a8

0800cfb4 <_fstat_r>:
 800cfb4:	b538      	push	{r3, r4, r5, lr}
 800cfb6:	4c07      	ldr	r4, [pc, #28]	; (800cfd4 <_fstat_r+0x20>)
 800cfb8:	2300      	movs	r3, #0
 800cfba:	4605      	mov	r5, r0
 800cfbc:	4608      	mov	r0, r1
 800cfbe:	4611      	mov	r1, r2
 800cfc0:	6023      	str	r3, [r4, #0]
 800cfc2:	f7ff f838 	bl	800c036 <_fstat>
 800cfc6:	1c43      	adds	r3, r0, #1
 800cfc8:	d102      	bne.n	800cfd0 <_fstat_r+0x1c>
 800cfca:	6823      	ldr	r3, [r4, #0]
 800cfcc:	b103      	cbz	r3, 800cfd0 <_fstat_r+0x1c>
 800cfce:	602b      	str	r3, [r5, #0]
 800cfd0:	bd38      	pop	{r3, r4, r5, pc}
 800cfd2:	bf00      	nop
 800cfd4:	2000d3a8 	.word	0x2000d3a8

0800cfd8 <_isatty_r>:
 800cfd8:	b538      	push	{r3, r4, r5, lr}
 800cfda:	4c06      	ldr	r4, [pc, #24]	; (800cff4 <_isatty_r+0x1c>)
 800cfdc:	2300      	movs	r3, #0
 800cfde:	4605      	mov	r5, r0
 800cfe0:	4608      	mov	r0, r1
 800cfe2:	6023      	str	r3, [r4, #0]
 800cfe4:	f7ff f82c 	bl	800c040 <_isatty>
 800cfe8:	1c43      	adds	r3, r0, #1
 800cfea:	d102      	bne.n	800cff2 <_isatty_r+0x1a>
 800cfec:	6823      	ldr	r3, [r4, #0]
 800cfee:	b103      	cbz	r3, 800cff2 <_isatty_r+0x1a>
 800cff0:	602b      	str	r3, [r5, #0]
 800cff2:	bd38      	pop	{r3, r4, r5, pc}
 800cff4:	2000d3a8 	.word	0x2000d3a8

0800cff8 <_init>:
 800cff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cffa:	bf00      	nop
 800cffc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cffe:	bc08      	pop	{r3}
 800d000:	469e      	mov	lr, r3
 800d002:	4770      	bx	lr

0800d004 <_fini>:
 800d004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d006:	bf00      	nop
 800d008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d00a:	bc08      	pop	{r3}
 800d00c:	469e      	mov	lr, r3
 800d00e:	4770      	bx	lr
