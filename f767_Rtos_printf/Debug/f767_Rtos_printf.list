
f767_Rtos_printf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004238  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  08004438  08004438  00014438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08004548  08004548  00014548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08004550  08004550  00014550  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08004554  08004554  00014554  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  20020000  08004558  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .dtcmram      00000000  20000000  20000000  00020074  2**0
                  CONTENTS
  8 .sram2        00000000  2007c000  2007c000  00020074  2**0
                  CONTENTS
  9 .bss          0000449c  20020074  20020074  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000400  20024510  20024510  00020074  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019865  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003a81  00000000  00000000  00039909  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000909d  00000000  00000000  0003d38a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000f30  00000000  00000000  00046428  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001370  00000000  00000000  00047358  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007fa2  00000000  00000000  000486c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00006aca  00000000  00000000  0005066a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007c  00000000  00000000  00057134  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000304c  00000000  00000000  000571b0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20020074 	.word	0x20020074
 800021c:	00000000 	.word	0x00000000
 8000220:	08004420 	.word	0x08004420

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20020078 	.word	0x20020078
 800023c:	08004420 	.word	0x08004420

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b97a 	b.w	80005ec <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	468c      	mov	ip, r1
 8000316:	460d      	mov	r5, r1
 8000318:	4604      	mov	r4, r0
 800031a:	9e08      	ldr	r6, [sp, #32]
 800031c:	2b00      	cmp	r3, #0
 800031e:	d151      	bne.n	80003c4 <__udivmoddi4+0xb4>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d96d      	bls.n	8000402 <__udivmoddi4+0xf2>
 8000326:	fab2 fe82 	clz	lr, r2
 800032a:	f1be 0f00 	cmp.w	lr, #0
 800032e:	d00b      	beq.n	8000348 <__udivmoddi4+0x38>
 8000330:	f1ce 0c20 	rsb	ip, lr, #32
 8000334:	fa01 f50e 	lsl.w	r5, r1, lr
 8000338:	fa20 fc0c 	lsr.w	ip, r0, ip
 800033c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000340:	ea4c 0c05 	orr.w	ip, ip, r5
 8000344:	fa00 f40e 	lsl.w	r4, r0, lr
 8000348:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800034c:	0c25      	lsrs	r5, r4, #16
 800034e:	fbbc f8fa 	udiv	r8, ip, sl
 8000352:	fa1f f987 	uxth.w	r9, r7
 8000356:	fb0a cc18 	mls	ip, sl, r8, ip
 800035a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800035e:	fb08 f309 	mul.w	r3, r8, r9
 8000362:	42ab      	cmp	r3, r5
 8000364:	d90a      	bls.n	800037c <__udivmoddi4+0x6c>
 8000366:	19ed      	adds	r5, r5, r7
 8000368:	f108 32ff 	add.w	r2, r8, #4294967295
 800036c:	f080 8123 	bcs.w	80005b6 <__udivmoddi4+0x2a6>
 8000370:	42ab      	cmp	r3, r5
 8000372:	f240 8120 	bls.w	80005b6 <__udivmoddi4+0x2a6>
 8000376:	f1a8 0802 	sub.w	r8, r8, #2
 800037a:	443d      	add	r5, r7
 800037c:	1aed      	subs	r5, r5, r3
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb5 f0fa 	udiv	r0, r5, sl
 8000384:	fb0a 5510 	mls	r5, sl, r0, r5
 8000388:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800038c:	fb00 f909 	mul.w	r9, r0, r9
 8000390:	45a1      	cmp	r9, r4
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x98>
 8000394:	19e4      	adds	r4, r4, r7
 8000396:	f100 33ff 	add.w	r3, r0, #4294967295
 800039a:	f080 810a 	bcs.w	80005b2 <__udivmoddi4+0x2a2>
 800039e:	45a1      	cmp	r9, r4
 80003a0:	f240 8107 	bls.w	80005b2 <__udivmoddi4+0x2a2>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	eba4 0409 	sub.w	r4, r4, r9
 80003ac:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003b0:	2100      	movs	r1, #0
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	d061      	beq.n	800047a <__udivmoddi4+0x16a>
 80003b6:	fa24 f40e 	lsr.w	r4, r4, lr
 80003ba:	2300      	movs	r3, #0
 80003bc:	6034      	str	r4, [r6, #0]
 80003be:	6073      	str	r3, [r6, #4]
 80003c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d907      	bls.n	80003d8 <__udivmoddi4+0xc8>
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d054      	beq.n	8000476 <__udivmoddi4+0x166>
 80003cc:	2100      	movs	r1, #0
 80003ce:	e886 0021 	stmia.w	r6, {r0, r5}
 80003d2:	4608      	mov	r0, r1
 80003d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d8:	fab3 f183 	clz	r1, r3
 80003dc:	2900      	cmp	r1, #0
 80003de:	f040 808e 	bne.w	80004fe <__udivmoddi4+0x1ee>
 80003e2:	42ab      	cmp	r3, r5
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xdc>
 80003e6:	4282      	cmp	r2, r0
 80003e8:	f200 80fa 	bhi.w	80005e0 <__udivmoddi4+0x2d0>
 80003ec:	1a84      	subs	r4, r0, r2
 80003ee:	eb65 0503 	sbc.w	r5, r5, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	46ac      	mov	ip, r5
 80003f6:	2e00      	cmp	r6, #0
 80003f8:	d03f      	beq.n	800047a <__udivmoddi4+0x16a>
 80003fa:	e886 1010 	stmia.w	r6, {r4, ip}
 80003fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000402:	b912      	cbnz	r2, 800040a <__udivmoddi4+0xfa>
 8000404:	2701      	movs	r7, #1
 8000406:	fbb7 f7f2 	udiv	r7, r7, r2
 800040a:	fab7 fe87 	clz	lr, r7
 800040e:	f1be 0f00 	cmp.w	lr, #0
 8000412:	d134      	bne.n	800047e <__udivmoddi4+0x16e>
 8000414:	1beb      	subs	r3, r5, r7
 8000416:	0c3a      	lsrs	r2, r7, #16
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	2101      	movs	r1, #1
 800041e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000422:	0c25      	lsrs	r5, r4, #16
 8000424:	fb02 3318 	mls	r3, r2, r8, r3
 8000428:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800042c:	fb0c f308 	mul.w	r3, ip, r8
 8000430:	42ab      	cmp	r3, r5
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x134>
 8000434:	19ed      	adds	r5, r5, r7
 8000436:	f108 30ff 	add.w	r0, r8, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x132>
 800043c:	42ab      	cmp	r3, r5
 800043e:	f200 80d1 	bhi.w	80005e4 <__udivmoddi4+0x2d4>
 8000442:	4680      	mov	r8, r0
 8000444:	1aed      	subs	r5, r5, r3
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb5 f0f2 	udiv	r0, r5, r2
 800044c:	fb02 5510 	mls	r5, r2, r0, r5
 8000450:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000454:	fb0c fc00 	mul.w	ip, ip, r0
 8000458:	45a4      	cmp	ip, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x15c>
 800045c:	19e4      	adds	r4, r4, r7
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x15a>
 8000464:	45a4      	cmp	ip, r4
 8000466:	f200 80b8 	bhi.w	80005da <__udivmoddi4+0x2ca>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 040c 	sub.w	r4, r4, ip
 8000470:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000474:	e79d      	b.n	80003b2 <__udivmoddi4+0xa2>
 8000476:	4631      	mov	r1, r6
 8000478:	4630      	mov	r0, r6
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	f1ce 0420 	rsb	r4, lr, #32
 8000482:	fa05 f30e 	lsl.w	r3, r5, lr
 8000486:	fa07 f70e 	lsl.w	r7, r7, lr
 800048a:	fa20 f804 	lsr.w	r8, r0, r4
 800048e:	0c3a      	lsrs	r2, r7, #16
 8000490:	fa25 f404 	lsr.w	r4, r5, r4
 8000494:	ea48 0803 	orr.w	r8, r8, r3
 8000498:	fbb4 f1f2 	udiv	r1, r4, r2
 800049c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80004a0:	fb02 4411 	mls	r4, r2, r1, r4
 80004a4:	fa1f fc87 	uxth.w	ip, r7
 80004a8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80004ac:	fb01 f30c 	mul.w	r3, r1, ip
 80004b0:	42ab      	cmp	r3, r5
 80004b2:	fa00 f40e 	lsl.w	r4, r0, lr
 80004b6:	d909      	bls.n	80004cc <__udivmoddi4+0x1bc>
 80004b8:	19ed      	adds	r5, r5, r7
 80004ba:	f101 30ff 	add.w	r0, r1, #4294967295
 80004be:	f080 808a 	bcs.w	80005d6 <__udivmoddi4+0x2c6>
 80004c2:	42ab      	cmp	r3, r5
 80004c4:	f240 8087 	bls.w	80005d6 <__udivmoddi4+0x2c6>
 80004c8:	3902      	subs	r1, #2
 80004ca:	443d      	add	r5, r7
 80004cc:	1aeb      	subs	r3, r5, r3
 80004ce:	fa1f f588 	uxth.w	r5, r8
 80004d2:	fbb3 f0f2 	udiv	r0, r3, r2
 80004d6:	fb02 3310 	mls	r3, r2, r0, r3
 80004da:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004de:	fb00 f30c 	mul.w	r3, r0, ip
 80004e2:	42ab      	cmp	r3, r5
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x1e6>
 80004e6:	19ed      	adds	r5, r5, r7
 80004e8:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ec:	d26f      	bcs.n	80005ce <__udivmoddi4+0x2be>
 80004ee:	42ab      	cmp	r3, r5
 80004f0:	d96d      	bls.n	80005ce <__udivmoddi4+0x2be>
 80004f2:	3802      	subs	r0, #2
 80004f4:	443d      	add	r5, r7
 80004f6:	1aeb      	subs	r3, r5, r3
 80004f8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004fc:	e78f      	b.n	800041e <__udivmoddi4+0x10e>
 80004fe:	f1c1 0720 	rsb	r7, r1, #32
 8000502:	fa22 f807 	lsr.w	r8, r2, r7
 8000506:	408b      	lsls	r3, r1
 8000508:	fa05 f401 	lsl.w	r4, r5, r1
 800050c:	ea48 0303 	orr.w	r3, r8, r3
 8000510:	fa20 fe07 	lsr.w	lr, r0, r7
 8000514:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000518:	40fd      	lsrs	r5, r7
 800051a:	ea4e 0e04 	orr.w	lr, lr, r4
 800051e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000522:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000526:	fb0c 5519 	mls	r5, ip, r9, r5
 800052a:	fa1f f883 	uxth.w	r8, r3
 800052e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000532:	fb09 f408 	mul.w	r4, r9, r8
 8000536:	42ac      	cmp	r4, r5
 8000538:	fa02 f201 	lsl.w	r2, r2, r1
 800053c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x244>
 8000542:	18ed      	adds	r5, r5, r3
 8000544:	f109 30ff 	add.w	r0, r9, #4294967295
 8000548:	d243      	bcs.n	80005d2 <__udivmoddi4+0x2c2>
 800054a:	42ac      	cmp	r4, r5
 800054c:	d941      	bls.n	80005d2 <__udivmoddi4+0x2c2>
 800054e:	f1a9 0902 	sub.w	r9, r9, #2
 8000552:	441d      	add	r5, r3
 8000554:	1b2d      	subs	r5, r5, r4
 8000556:	fa1f fe8e 	uxth.w	lr, lr
 800055a:	fbb5 f0fc 	udiv	r0, r5, ip
 800055e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000562:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000566:	fb00 f808 	mul.w	r8, r0, r8
 800056a:	45a0      	cmp	r8, r4
 800056c:	d907      	bls.n	800057e <__udivmoddi4+0x26e>
 800056e:	18e4      	adds	r4, r4, r3
 8000570:	f100 35ff 	add.w	r5, r0, #4294967295
 8000574:	d229      	bcs.n	80005ca <__udivmoddi4+0x2ba>
 8000576:	45a0      	cmp	r8, r4
 8000578:	d927      	bls.n	80005ca <__udivmoddi4+0x2ba>
 800057a:	3802      	subs	r0, #2
 800057c:	441c      	add	r4, r3
 800057e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000582:	eba4 0408 	sub.w	r4, r4, r8
 8000586:	fba0 8902 	umull	r8, r9, r0, r2
 800058a:	454c      	cmp	r4, r9
 800058c:	46c6      	mov	lr, r8
 800058e:	464d      	mov	r5, r9
 8000590:	d315      	bcc.n	80005be <__udivmoddi4+0x2ae>
 8000592:	d012      	beq.n	80005ba <__udivmoddi4+0x2aa>
 8000594:	b156      	cbz	r6, 80005ac <__udivmoddi4+0x29c>
 8000596:	ebba 030e 	subs.w	r3, sl, lr
 800059a:	eb64 0405 	sbc.w	r4, r4, r5
 800059e:	fa04 f707 	lsl.w	r7, r4, r7
 80005a2:	40cb      	lsrs	r3, r1
 80005a4:	431f      	orrs	r7, r3
 80005a6:	40cc      	lsrs	r4, r1
 80005a8:	6037      	str	r7, [r6, #0]
 80005aa:	6074      	str	r4, [r6, #4]
 80005ac:	2100      	movs	r1, #0
 80005ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005b2:	4618      	mov	r0, r3
 80005b4:	e6f8      	b.n	80003a8 <__udivmoddi4+0x98>
 80005b6:	4690      	mov	r8, r2
 80005b8:	e6e0      	b.n	800037c <__udivmoddi4+0x6c>
 80005ba:	45c2      	cmp	sl, r8
 80005bc:	d2ea      	bcs.n	8000594 <__udivmoddi4+0x284>
 80005be:	ebb8 0e02 	subs.w	lr, r8, r2
 80005c2:	eb69 0503 	sbc.w	r5, r9, r3
 80005c6:	3801      	subs	r0, #1
 80005c8:	e7e4      	b.n	8000594 <__udivmoddi4+0x284>
 80005ca:	4628      	mov	r0, r5
 80005cc:	e7d7      	b.n	800057e <__udivmoddi4+0x26e>
 80005ce:	4640      	mov	r0, r8
 80005d0:	e791      	b.n	80004f6 <__udivmoddi4+0x1e6>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e7be      	b.n	8000554 <__udivmoddi4+0x244>
 80005d6:	4601      	mov	r1, r0
 80005d8:	e778      	b.n	80004cc <__udivmoddi4+0x1bc>
 80005da:	3802      	subs	r0, #2
 80005dc:	443c      	add	r4, r7
 80005de:	e745      	b.n	800046c <__udivmoddi4+0x15c>
 80005e0:	4608      	mov	r0, r1
 80005e2:	e708      	b.n	80003f6 <__udivmoddi4+0xe6>
 80005e4:	f1a8 0802 	sub.w	r8, r8, #2
 80005e8:	443d      	add	r5, r7
 80005ea:	e72b      	b.n	8000444 <__udivmoddi4+0x134>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005f0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005f2:	4b0e      	ldr	r3, [pc, #56]	; (800062c <HAL_InitTick+0x3c>)
{
 80005f4:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005f6:	4a0e      	ldr	r2, [pc, #56]	; (8000630 <HAL_InitTick+0x40>)
 80005f8:	7818      	ldrb	r0, [r3, #0]
 80005fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005fe:	fbb3 f3f0 	udiv	r3, r3, r0
 8000602:	6810      	ldr	r0, [r2, #0]
 8000604:	fbb0 f0f3 	udiv	r0, r0, r3
 8000608:	f000 f89e 	bl	8000748 <HAL_SYSTICK_Config>
 800060c:	4604      	mov	r4, r0
 800060e:	b958      	cbnz	r0, 8000628 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000610:	2d0f      	cmp	r5, #15
 8000612:	d809      	bhi.n	8000628 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000614:	4602      	mov	r2, r0
 8000616:	4629      	mov	r1, r5
 8000618:	f04f 30ff 	mov.w	r0, #4294967295
 800061c:	f000 f84e 	bl	80006bc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000620:	4b04      	ldr	r3, [pc, #16]	; (8000634 <HAL_InitTick+0x44>)
 8000622:	4620      	mov	r0, r4
 8000624:	601d      	str	r5, [r3, #0]
 8000626:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000628:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800062a:	bd38      	pop	{r3, r4, r5, pc}
 800062c:	20020000 	.word	0x20020000
 8000630:	2002000c 	.word	0x2002000c
 8000634:	20020004 	.word	0x20020004

08000638 <HAL_Init>:
{
 8000638:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800063a:	2003      	movs	r0, #3
 800063c:	f000 f82c 	bl	8000698 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000640:	200f      	movs	r0, #15
 8000642:	f7ff ffd5 	bl	80005f0 <HAL_InitTick>
  HAL_MspInit();
 8000646:	f002 fe11 	bl	800326c <HAL_MspInit>
}
 800064a:	2000      	movs	r0, #0
 800064c:	bd08      	pop	{r3, pc}
	...

08000650 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000650:	4a03      	ldr	r2, [pc, #12]	; (8000660 <HAL_IncTick+0x10>)
 8000652:	4b04      	ldr	r3, [pc, #16]	; (8000664 <HAL_IncTick+0x14>)
 8000654:	6811      	ldr	r1, [r2, #0]
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	440b      	add	r3, r1
 800065a:	6013      	str	r3, [r2, #0]
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	20024038 	.word	0x20024038
 8000664:	20020000 	.word	0x20020000

08000668 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000668:	4b01      	ldr	r3, [pc, #4]	; (8000670 <HAL_GetTick+0x8>)
 800066a:	6818      	ldr	r0, [r3, #0]
}
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	20024038 	.word	0x20024038

08000674 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000674:	b538      	push	{r3, r4, r5, lr}
 8000676:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000678:	f7ff fff6 	bl	8000668 <HAL_GetTick>
 800067c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800067e:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000680:	bf1e      	ittt	ne
 8000682:	4b04      	ldrne	r3, [pc, #16]	; (8000694 <HAL_Delay+0x20>)
 8000684:	781b      	ldrbne	r3, [r3, #0]
 8000686:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000688:	f7ff ffee 	bl	8000668 <HAL_GetTick>
 800068c:	1b40      	subs	r0, r0, r5
 800068e:	4284      	cmp	r4, r0
 8000690:	d8fa      	bhi.n	8000688 <HAL_Delay+0x14>
  {
  }
}
 8000692:	bd38      	pop	{r3, r4, r5, pc}
 8000694:	20020000 	.word	0x20020000

08000698 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000698:	4a07      	ldr	r2, [pc, #28]	; (80006b8 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800069a:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800069c:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800069e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006a2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80006a6:	041b      	lsls	r3, r3, #16
 80006a8:	0c1b      	lsrs	r3, r3, #16
 80006aa:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80006b2:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80006b4:	60d3      	str	r3, [r2, #12]
 80006b6:	4770      	bx	lr
 80006b8:	e000ed00 	.word	0xe000ed00

080006bc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006bc:	4b19      	ldr	r3, [pc, #100]	; (8000724 <HAL_NVIC_SetPriority+0x68>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80006be:	b530      	push	{r4, r5, lr}
 80006c0:	68dc      	ldr	r4, [r3, #12]
 80006c2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006c6:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006ca:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006cc:	2b04      	cmp	r3, #4
 80006ce:	bf28      	it	cs
 80006d0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006d2:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006d4:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006d8:	bf8c      	ite	hi
 80006da:	3c03      	subhi	r4, #3
 80006dc:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006de:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
 80006e2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006e4:	f103 33ff 	add.w	r3, r3, #4294967295
 80006e8:	ea01 0103 	and.w	r1, r1, r3
 80006ec:	fa01 f104 	lsl.w	r1, r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006f0:	fa05 f404 	lsl.w	r4, r5, r4
 80006f4:	f104 34ff 	add.w	r4, r4, #4294967295
 80006f8:	ea02 0204 	and.w	r2, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006fc:	ea42 0201 	orr.w	r2, r2, r1
 8000700:	ea4f 1202 	mov.w	r2, r2, lsl #4
  if ((int32_t)(IRQn) >= 0)
 8000704:	db07      	blt.n	8000716 <HAL_NVIC_SetPriority+0x5a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000706:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800070a:	b2d2      	uxtb	r2, r2
 800070c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000710:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
 8000714:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000716:	f000 000f 	and.w	r0, r0, #15
 800071a:	b2d2      	uxtb	r2, r2
 800071c:	4b02      	ldr	r3, [pc, #8]	; (8000728 <HAL_NVIC_SetPriority+0x6c>)
 800071e:	541a      	strb	r2, [r3, r0]
 8000720:	bd30      	pop	{r4, r5, pc}
 8000722:	bf00      	nop
 8000724:	e000ed00 	.word	0xe000ed00
 8000728:	e000ed14 	.word	0xe000ed14

0800072c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800072c:	2800      	cmp	r0, #0
 800072e:	db08      	blt.n	8000742 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000730:	0942      	lsrs	r2, r0, #5
 8000732:	2301      	movs	r3, #1
 8000734:	f000 001f 	and.w	r0, r0, #31
 8000738:	fa03 f000 	lsl.w	r0, r3, r0
 800073c:	4b01      	ldr	r3, [pc, #4]	; (8000744 <HAL_NVIC_EnableIRQ+0x18>)
 800073e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000742:	4770      	bx	lr
 8000744:	e000e100 	.word	0xe000e100

08000748 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000748:	3801      	subs	r0, #1
 800074a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800074e:	d20a      	bcs.n	8000766 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000750:	4b06      	ldr	r3, [pc, #24]	; (800076c <HAL_SYSTICK_Config+0x24>)
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000752:	21f0      	movs	r1, #240	; 0xf0
 8000754:	4a06      	ldr	r2, [pc, #24]	; (8000770 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000756:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000758:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800075a:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800075e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000760:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000766:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	e000e010 	.word	0xe000e010
 8000770:	e000ed00 	.word	0xe000ed00

08000774 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8000774:	b570      	push	{r4, r5, r6, lr}
 8000776:	4604      	mov	r4, r0
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8000778:	b129      	cbz	r1, 8000786 <ETH_MACDMAConfig+0x12>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800077a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800077e:	60c3      	str	r3, [r0, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8000780:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000784:	6083      	str	r3, [r0, #8]
  macinit.Jabber = ETH_JABBER_ENABLE;
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8000786:	69e3      	ldr	r3, [r4, #28]
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
  macinit.VLANTagIdentifier = 0x0;
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8000788:	6822      	ldr	r2, [r4, #0]
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800078a:	2b00      	cmp	r3, #0
                       macinit.Jabber | 
                       macinit.InterFrameGap |
                       macinit.CarrierSense |
                       (heth->Init).Speed | 
                       macinit.ReceiveOwn |
                       macinit.LoopbackMode |
 800078c:	68e0      	ldr	r0, [r4, #12]
 800078e:	68a3      	ldr	r3, [r4, #8]
  tmpreg = (heth->Instance)->MACCR;
 8000790:	6815      	ldr	r5, [r2, #0]
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8000792:	bf08      	it	eq
 8000794:	f44f 6180 	moveq.w	r1, #1024	; 0x400
                       macinit.LoopbackMode |
 8000798:	ea43 0300 	orr.w	r3, r3, r0
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 800079c:	482e      	ldr	r0, [pc, #184]	; (8000858 <ETH_MACDMAConfig+0xe4>)
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800079e:	bf18      	it	ne
 80007a0:	2100      	movne	r1, #0
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 80007a2:	4028      	ands	r0, r5
 80007a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007a8:	4303      	orrs	r3, r0
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80007aa:	2001      	movs	r0, #1
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80007ac:	430b      	orrs	r3, r1
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 80007ae:	6013      	str	r3, [r2, #0]
  tmpreg = (heth->Instance)->MACCR;
 80007b0:	6815      	ldr	r5, [r2, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80007b2:	f7ff ff5f 	bl	8000674 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 80007b6:	6823      	ldr	r3, [r4, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80007b8:	2240      	movs	r2, #64	; 0x40
                                        macinit.UnicastFramesFilter);
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80007ba:	2001      	movs	r0, #1
  (heth->Instance)->MACCR = tmpreg; 
 80007bc:	601d      	str	r5, [r3, #0]
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80007be:	605a      	str	r2, [r3, #4]
   tmpreg = (heth->Instance)->MACFFR;
 80007c0:	685d      	ldr	r5, [r3, #4]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80007c2:	f7ff ff57 	bl	8000674 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 80007c6:	6823      	ldr	r3, [r4, #0]
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80007c8:	2001      	movs	r0, #1
   (heth->Instance)->MACFFR = tmpreg;
 80007ca:	605d      	str	r5, [r3, #4]
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80007cc:	2500      	movs	r5, #0
 80007ce:	609d      	str	r5, [r3, #8]
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80007d0:	60dd      	str	r5, [r3, #12]
   tmpreg = (heth->Instance)->MACFCR;
 80007d2:	699a      	ldr	r2, [r3, #24]
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 80007d4:	f022 02be 	bic.w	r2, r2, #190	; 0xbe
 80007d8:	0412      	lsls	r2, r2, #16
 80007da:	0c12      	lsrs	r2, r2, #16
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80007dc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 80007e0:	619a      	str	r2, [r3, #24]
   tmpreg = (heth->Instance)->MACFCR;
 80007e2:	699e      	ldr	r6, [r3, #24]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80007e4:	f7ff ff46 	bl	8000674 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 80007e8:	6823      	ldr	r3, [r4, #0]
                                            macinit.VLANTagIdentifier);
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80007ea:	2001      	movs	r0, #1
   (heth->Instance)->MACFCR = tmpreg;
 80007ec:	619e      	str	r6, [r3, #24]
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80007ee:	61dd      	str	r5, [r3, #28]
    tmpreg = (heth->Instance)->MACVLANTR;
 80007f0:	69dd      	ldr	r5, [r3, #28]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80007f2:	f7ff ff3f 	bl	8000674 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 80007f6:	6822      	ldr	r2, [r4, #0]
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80007f8:	2001      	movs	r0, #1
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 80007fa:	4b18      	ldr	r3, [pc, #96]	; (800085c <ETH_MACDMAConfig+0xe8>)
    (heth->Instance)->MACVLANTR = tmpreg;
 80007fc:	61d5      	str	r5, [r2, #28]
    tmpreg = (heth->Instance)->DMAOMR;
 80007fe:	f241 0518 	movw	r5, #4120	; 0x1018
 8000802:	5951      	ldr	r1, [r2, r5]
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8000804:	400b      	ands	r3, r1
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8000806:	f043 7308 	orr.w	r3, r3, #35651584	; 0x2200000
 800080a:	f043 0304 	orr.w	r3, r3, #4
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 800080e:	5153      	str	r3, [r2, r5]
    tmpreg = (heth->Instance)->DMAOMR;
 8000810:	5956      	ldr	r6, [r2, r5]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8000812:	f7ff ff2f 	bl	8000674 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8000816:	6823      	ldr	r3, [r4, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8000818:	2001      	movs	r0, #1
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800081a:	4a11      	ldr	r2, [pc, #68]	; (8000860 <ETH_MACDMAConfig+0xec>)
    (heth->Instance)->DMAOMR = tmpreg;
 800081c:	515e      	str	r6, [r3, r5]
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800081e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000822:	601a      	str	r2, [r3, #0]
     tmpreg = (heth->Instance)->DMABMR;
 8000824:	681d      	ldr	r5, [r3, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8000826:	f7ff ff25 	bl	8000674 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 800082a:	6822      	ldr	r2, [r4, #0]
 800082c:	f502 5380 	add.w	r3, r2, #4096	; 0x1000
 8000830:	601d      	str	r5, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8000832:	69a3      	ldr	r3, [r4, #24]
 8000834:	2b01      	cmp	r3, #1
 8000836:	d107      	bne.n	8000848 <ETH_MACDMAConfig+0xd4>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8000838:	f241 011c 	movw	r1, #4124	; 0x101c
 800083c:	5853      	ldr	r3, [r2, r1]
 800083e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000842:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000846:	5053      	str	r3, [r2, r1]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8000848:	6963      	ldr	r3, [r4, #20]
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 800084a:	4a06      	ldr	r2, [pc, #24]	; (8000864 <ETH_MACDMAConfig+0xf0>)
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 800084c:	8899      	ldrh	r1, [r3, #4]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 800084e:	6011      	str	r1, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8000850:	681a      	ldr	r2, [r3, #0]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8000852:	4b05      	ldr	r3, [pc, #20]	; (8000868 <ETH_MACDMAConfig+0xf4>)
 8000854:	601a      	str	r2, [r3, #0]
 8000856:	bd70      	pop	{r4, r5, r6, pc}
 8000858:	ff20810f 	.word	0xff20810f
 800085c:	f8de3f23 	.word	0xf8de3f23
 8000860:	02c12080 	.word	0x02c12080
 8000864:	40028040 	.word	0x40028040
 8000868:	40028044 	.word	0x40028044

0800086c <HAL_ETH_ReadPHYRegister>:
{
 800086c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 800086e:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
{
 8000872:	4605      	mov	r5, r0
 8000874:	4616      	mov	r6, r2
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8000876:	2b82      	cmp	r3, #130	; 0x82
 8000878:	d030      	beq.n	80008dc <HAL_ETH_ReadPHYRegister+0x70>
  tmpreg = heth->Instance->MACMIIAR;
 800087a:	6802      	ldr	r2, [r0, #0]
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800087c:	2382      	movs	r3, #130	; 0x82
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 800087e:	0189      	lsls	r1, r1, #6
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8000880:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg = heth->Instance->MACMIIAR;
 8000884:	6913      	ldr	r3, [r2, #16]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8000886:	f401 64f8 	and.w	r4, r1, #1984	; 0x7c0
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 800088a:	f003 011c 	and.w	r1, r3, #28
 800088e:	4321      	orrs	r1, r4
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8000890:	8a04      	ldrh	r4, [r0, #16]
 8000892:	02e4      	lsls	r4, r4, #11
 8000894:	b2a4      	uxth	r4, r4
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8000896:	430c      	orrs	r4, r1
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8000898:	f044 0401 	orr.w	r4, r4, #1
  heth->Instance->MACMIIAR = tmpreg;
 800089c:	6114      	str	r4, [r2, #16]
  tickstart = HAL_GetTick();
 800089e:	f7ff fee3 	bl	8000668 <HAL_GetTick>
 80008a2:	4607      	mov	r7, r0
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80008a4:	f014 0001 	ands.w	r0, r4, #1
 80008a8:	d107      	bne.n	80008ba <HAL_ETH_ReadPHYRegister+0x4e>
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80008aa:	682b      	ldr	r3, [r5, #0]
 80008ac:	695b      	ldr	r3, [r3, #20]
 80008ae:	b29b      	uxth	r3, r3
 80008b0:	6033      	str	r3, [r6, #0]
  heth->State = HAL_ETH_STATE_READY;
 80008b2:	2301      	movs	r3, #1
 80008b4:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
 80008b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80008ba:	f7ff fed5 	bl	8000668 <HAL_GetTick>
 80008be:	1bc0      	subs	r0, r0, r7
 80008c0:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 80008c4:	d307      	bcc.n	80008d6 <HAL_ETH_ReadPHYRegister+0x6a>
      heth->State= HAL_ETH_STATE_READY;
 80008c6:	2301      	movs	r3, #1
      return HAL_TIMEOUT;
 80008c8:	2003      	movs	r0, #3
      heth->State= HAL_ETH_STATE_READY;
 80008ca:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 80008ce:	2300      	movs	r3, #0
 80008d0:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
      return HAL_TIMEOUT;
 80008d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpreg = heth->Instance->MACMIIAR;
 80008d6:	682b      	ldr	r3, [r5, #0]
 80008d8:	691c      	ldr	r4, [r3, #16]
 80008da:	e7e3      	b.n	80008a4 <HAL_ETH_ReadPHYRegister+0x38>
    return HAL_BUSY;
 80008dc:	2002      	movs	r0, #2
}
 80008de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080008e0 <HAL_ETH_WritePHYRegister>:
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80008e0:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 80008e4:	2b42      	cmp	r3, #66	; 0x42
{
 80008e6:	b570      	push	{r4, r5, r6, lr}
 80008e8:	4605      	mov	r5, r0
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80008ea:	d02e      	beq.n	800094a <HAL_ETH_WritePHYRegister+0x6a>
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80008ec:	2342      	movs	r3, #66	; 0x42
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80008ee:	018c      	lsls	r4, r1, #6
 80008f0:	b292      	uxth	r2, r2
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80008f2:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80008f6:	f404 64f8 	and.w	r4, r4, #1984	; 0x7c0
  tmpreg = heth->Instance->MACMIIAR;
 80008fa:	6803      	ldr	r3, [r0, #0]
 80008fc:	f044 0403 	orr.w	r4, r4, #3
 8000900:	6918      	ldr	r0, [r3, #16]
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8000902:	f000 001c 	and.w	r0, r0, #28
 8000906:	4320      	orrs	r0, r4
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8000908:	8a2c      	ldrh	r4, [r5, #16]
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800090a:	615a      	str	r2, [r3, #20]
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800090c:	02e4      	lsls	r4, r4, #11
 800090e:	b2a4      	uxth	r4, r4
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8000910:	4304      	orrs	r4, r0
  heth->Instance->MACMIIAR = tmpreg;
 8000912:	611c      	str	r4, [r3, #16]
  tickstart = HAL_GetTick();
 8000914:	f7ff fea8 	bl	8000668 <HAL_GetTick>
 8000918:	4606      	mov	r6, r0
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800091a:	f014 0001 	ands.w	r0, r4, #1
 800091e:	d103      	bne.n	8000928 <HAL_ETH_WritePHYRegister+0x48>
  heth->State = HAL_ETH_STATE_READY;
 8000920:	2301      	movs	r3, #1
 8000922:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
 8000926:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8000928:	f7ff fe9e 	bl	8000668 <HAL_GetTick>
 800092c:	1b80      	subs	r0, r0, r6
 800092e:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8000932:	d307      	bcc.n	8000944 <HAL_ETH_WritePHYRegister+0x64>
      heth->State= HAL_ETH_STATE_READY;
 8000934:	2301      	movs	r3, #1
      return HAL_TIMEOUT;
 8000936:	2003      	movs	r0, #3
      heth->State= HAL_ETH_STATE_READY;
 8000938:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 800093c:	2300      	movs	r3, #0
 800093e:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
 8000942:	bd70      	pop	{r4, r5, r6, pc}
    tmpreg = heth->Instance->MACMIIAR;
 8000944:	682b      	ldr	r3, [r5, #0]
 8000946:	691c      	ldr	r4, [r3, #16]
 8000948:	e7e7      	b.n	800091a <HAL_ETH_WritePHYRegister+0x3a>
    return HAL_BUSY;
 800094a:	2002      	movs	r0, #2
}
 800094c:	bd70      	pop	{r4, r5, r6, pc}
	...

08000950 <HAL_ETH_Init>:
  uint32_t tempreg = 0, phyreg = 0;
 8000950:	2300      	movs	r3, #0
{
 8000952:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(heth == NULL)
 8000954:	4604      	mov	r4, r0
  uint32_t tempreg = 0, phyreg = 0;
 8000956:	9300      	str	r3, [sp, #0]
  if(heth == NULL)
 8000958:	2800      	cmp	r0, #0
 800095a:	f000 80dc 	beq.w	8000b16 <HAL_ETH_Init+0x1c6>
  if(heth->State == HAL_ETH_STATE_RESET)
 800095e:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8000962:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000966:	b91b      	cbnz	r3, 8000970 <HAL_ETH_Init+0x20>
    heth->Lock = HAL_UNLOCKED;
 8000968:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
    HAL_ETH_MspInit(heth);
 800096c:	f002 fc9e 	bl	80032ac <HAL_ETH_MspInit>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000970:	4b6a      	ldr	r3, [pc, #424]	; (8000b1c <HAL_ETH_Init+0x1cc>)
 8000972:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000974:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000978:	645a      	str	r2, [r3, #68]	; 0x44
 800097a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800097c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000980:	9301      	str	r3, [sp, #4]
 8000982:	9b01      	ldr	r3, [sp, #4]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8000984:	4b66      	ldr	r3, [pc, #408]	; (8000b20 <HAL_ETH_Init+0x1d0>)
 8000986:	685a      	ldr	r2, [r3, #4]
 8000988:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800098c:	605a      	str	r2, [r3, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800098e:	685a      	ldr	r2, [r3, #4]
 8000990:	6a21      	ldr	r1, [r4, #32]
 8000992:	430a      	orrs	r2, r1
 8000994:	605a      	str	r2, [r3, #4]
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8000996:	6823      	ldr	r3, [r4, #0]
 8000998:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800099c:	681a      	ldr	r2, [r3, #0]
 800099e:	f042 0201 	orr.w	r2, r2, #1
 80009a2:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 80009a4:	f7ff fe60 	bl	8000668 <HAL_GetTick>
 80009a8:	4605      	mov	r5, r0
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80009aa:	6823      	ldr	r3, [r4, #0]
 80009ac:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 80009b0:	6812      	ldr	r2, [r2, #0]
 80009b2:	07d0      	lsls	r0, r2, #31
 80009b4:	d41d      	bmi.n	80009f2 <HAL_ETH_Init+0xa2>
  tempreg = (heth->Instance)->MACMIIAR;
 80009b6:	691d      	ldr	r5, [r3, #16]
  hclk = HAL_RCC_GetHCLKFreq();
 80009b8:	f000 fd30 	bl	800141c <HAL_RCC_GetHCLKFreq>
  if((hclk >= 20000000)&&(hclk < 35000000))
 80009bc:	4b59      	ldr	r3, [pc, #356]	; (8000b24 <HAL_ETH_Init+0x1d4>)
 80009be:	4a5a      	ldr	r2, [pc, #360]	; (8000b28 <HAL_ETH_Init+0x1d8>)
  tempreg &= ETH_MACMIIAR_CR_MASK;
 80009c0:	f025 051c 	bic.w	r5, r5, #28
  if((hclk >= 20000000)&&(hclk < 35000000))
 80009c4:	4403      	add	r3, r0
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d822      	bhi.n	8000a10 <HAL_ETH_Init+0xc0>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80009ca:	f045 0508 	orr.w	r5, r5, #8
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 80009ce:	6823      	ldr	r3, [r4, #0]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80009d0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80009d4:	2100      	movs	r1, #0
 80009d6:	4620      	mov	r0, r4
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 80009d8:	611d      	str	r5, [r3, #16]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80009da:	f7ff ff81 	bl	80008e0 <HAL_ETH_WritePHYRegister>
 80009de:	4605      	mov	r5, r0
 80009e0:	b368      	cbz	r0, 8000a3e <HAL_ETH_Init+0xee>
      heth->State = HAL_ETH_STATE_READY;
 80009e2:	2501      	movs	r5, #1
      ETH_MACDMAConfig(heth, err);
 80009e4:	2101      	movs	r1, #1
 80009e6:	4620      	mov	r0, r4
 80009e8:	f7ff fec4 	bl	8000774 <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 80009ec:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;
 80009f0:	e00b      	b.n	8000a0a <HAL_ETH_Init+0xba>
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80009f2:	f7ff fe39 	bl	8000668 <HAL_GetTick>
 80009f6:	1b40      	subs	r0, r0, r5
 80009f8:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 80009fc:	d9d5      	bls.n	80009aa <HAL_ETH_Init+0x5a>
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80009fe:	2503      	movs	r5, #3
      __HAL_UNLOCK(heth);
 8000a00:	2300      	movs	r3, #0
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8000a02:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000a06:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 8000a0a:	4628      	mov	r0, r5
 8000a0c:	b003      	add	sp, #12
 8000a0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8000a10:	4b46      	ldr	r3, [pc, #280]	; (8000b2c <HAL_ETH_Init+0x1dc>)
 8000a12:	4a47      	ldr	r2, [pc, #284]	; (8000b30 <HAL_ETH_Init+0x1e0>)
 8000a14:	4403      	add	r3, r0
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d802      	bhi.n	8000a20 <HAL_ETH_Init+0xd0>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8000a1a:	f045 050c 	orr.w	r5, r5, #12
 8000a1e:	e7d6      	b.n	80009ce <HAL_ETH_Init+0x7e>
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8000a20:	4b44      	ldr	r3, [pc, #272]	; (8000b34 <HAL_ETH_Init+0x1e4>)
 8000a22:	4a45      	ldr	r2, [pc, #276]	; (8000b38 <HAL_ETH_Init+0x1e8>)
 8000a24:	4403      	add	r3, r0
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d9d1      	bls.n	80009ce <HAL_ETH_Init+0x7e>
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8000a2a:	4b44      	ldr	r3, [pc, #272]	; (8000b3c <HAL_ETH_Init+0x1ec>)
 8000a2c:	4a44      	ldr	r2, [pc, #272]	; (8000b40 <HAL_ETH_Init+0x1f0>)
 8000a2e:	4403      	add	r3, r0
 8000a30:	4293      	cmp	r3, r2
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8000a32:	bf94      	ite	ls
 8000a34:	f045 0504 	orrls.w	r5, r5, #4
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8000a38:	f045 0510 	orrhi.w	r5, r5, #16
 8000a3c:	e7c7      	b.n	80009ce <HAL_ETH_Init+0x7e>
  HAL_Delay(PHY_RESET_DELAY);
 8000a3e:	20ff      	movs	r0, #255	; 0xff
 8000a40:	f7ff fe18 	bl	8000674 <HAL_Delay>
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8000a44:	6863      	ldr	r3, [r4, #4]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d053      	beq.n	8000af2 <HAL_ETH_Init+0x1a2>
    tickstart = HAL_GetTick();
 8000a4a:	f7ff fe0d 	bl	8000668 <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8000a4e:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000a52:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000a54:	466a      	mov	r2, sp
 8000a56:	2101      	movs	r1, #1
 8000a58:	4620      	mov	r0, r4
 8000a5a:	f7ff ff07 	bl	800086c <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8000a5e:	f7ff fe03 	bl	8000668 <HAL_GetTick>
 8000a62:	1b80      	subs	r0, r0, r6
 8000a64:	42b8      	cmp	r0, r7
 8000a66:	d90b      	bls.n	8000a80 <HAL_ETH_Init+0x130>
        ETH_MACDMAConfig(heth, err);
 8000a68:	2101      	movs	r1, #1
 8000a6a:	4620      	mov	r0, r4
 8000a6c:	f7ff fe82 	bl	8000774 <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 8000a70:	2301      	movs	r3, #1
        return HAL_TIMEOUT;
 8000a72:	2503      	movs	r5, #3
        heth->State= HAL_ETH_STATE_READY;
 8000a74:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 8000a78:	2300      	movs	r3, #0
 8000a7a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 8000a7e:	e7c4      	b.n	8000a0a <HAL_ETH_Init+0xba>
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8000a80:	9b00      	ldr	r3, [sp, #0]
 8000a82:	0759      	lsls	r1, r3, #29
 8000a84:	d5e6      	bpl.n	8000a54 <HAL_ETH_Init+0x104>
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8000a86:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	4620      	mov	r0, r4
 8000a8e:	f7ff ff27 	bl	80008e0 <HAL_ETH_WritePHYRegister>
 8000a92:	2800      	cmp	r0, #0
 8000a94:	d1a5      	bne.n	80009e2 <HAL_ETH_Init+0x92>
    tickstart = HAL_GetTick();
 8000a96:	f7ff fde7 	bl	8000668 <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8000a9a:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000a9e:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000aa0:	466a      	mov	r2, sp
 8000aa2:	2101      	movs	r1, #1
 8000aa4:	4620      	mov	r0, r4
 8000aa6:	f7ff fee1 	bl	800086c <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8000aaa:	f7ff fddd 	bl	8000668 <HAL_GetTick>
 8000aae:	1b80      	subs	r0, r0, r6
 8000ab0:	42b8      	cmp	r0, r7
 8000ab2:	d8d9      	bhi.n	8000a68 <HAL_ETH_Init+0x118>
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8000ab4:	9b00      	ldr	r3, [sp, #0]
 8000ab6:	069a      	lsls	r2, r3, #26
 8000ab8:	d5f2      	bpl.n	8000aa0 <HAL_ETH_Init+0x150>
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8000aba:	466a      	mov	r2, sp
 8000abc:	211f      	movs	r1, #31
 8000abe:	4620      	mov	r0, r4
 8000ac0:	f7ff fed4 	bl	800086c <HAL_ETH_ReadPHYRegister>
 8000ac4:	2800      	cmp	r0, #0
 8000ac6:	d18c      	bne.n	80009e2 <HAL_ETH_Init+0x92>
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8000ac8:	9b00      	ldr	r3, [sp, #0]
 8000aca:	f013 0210 	ands.w	r2, r3, #16
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8000ace:	bf18      	it	ne
 8000ad0:	f44f 6200 	movne.w	r2, #2048	; 0x800
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8000ad4:	075b      	lsls	r3, r3, #29
      (heth->Init).Speed = ETH_SPEED_10M; 
 8000ad6:	bf4c      	ite	mi
 8000ad8:	2300      	movmi	r3, #0
      (heth->Init).Speed = ETH_SPEED_100M;
 8000ada:	f44f 4380 	movpl.w	r3, #16384	; 0x4000
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8000ade:	60e2      	str	r2, [r4, #12]
      (heth->Init).Speed = ETH_SPEED_100M;
 8000ae0:	60a3      	str	r3, [r4, #8]
  ETH_MACDMAConfig(heth, err);
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	4620      	mov	r0, r4
 8000ae6:	f7ff fe45 	bl	8000774 <ETH_MACDMAConfig>
  heth->State= HAL_ETH_STATE_READY;
 8000aea:	2301      	movs	r3, #1
 8000aec:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  return HAL_OK;
 8000af0:	e78b      	b.n	8000a0a <HAL_ETH_Init+0xba>
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8000af2:	68a3      	ldr	r3, [r4, #8]
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8000af4:	4629      	mov	r1, r5
 8000af6:	68e2      	ldr	r2, [r4, #12]
 8000af8:	4620      	mov	r0, r4
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8000afa:	085b      	lsrs	r3, r3, #1
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8000afc:	ea43 02d2 	orr.w	r2, r3, r2, lsr #3
 8000b00:	b292      	uxth	r2, r2
 8000b02:	f7ff feed 	bl	80008e0 <HAL_ETH_WritePHYRegister>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	f47f af6b 	bne.w	80009e2 <HAL_ETH_Init+0x92>
    HAL_Delay(PHY_CONFIG_DELAY);
 8000b0c:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000b10:	f7ff fdb0 	bl	8000674 <HAL_Delay>
 8000b14:	e7e5      	b.n	8000ae2 <HAL_ETH_Init+0x192>
    return HAL_ERROR;
 8000b16:	2501      	movs	r5, #1
 8000b18:	e777      	b.n	8000a0a <HAL_ETH_Init+0xba>
 8000b1a:	bf00      	nop
 8000b1c:	40023800 	.word	0x40023800
 8000b20:	40013800 	.word	0x40013800
 8000b24:	feced300 	.word	0xfeced300
 8000b28:	00e4e1bf 	.word	0x00e4e1bf
 8000b2c:	fde9f140 	.word	0xfde9f140
 8000b30:	017d783f 	.word	0x017d783f
 8000b34:	fc6c7900 	.word	0xfc6c7900
 8000b38:	026259ff 	.word	0x026259ff
 8000b3c:	fa0a1f00 	.word	0xfa0a1f00
 8000b40:	02faf07f 	.word	0x02faf07f

08000b44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b48:	680b      	ldr	r3, [r1, #0]
{
 8000b4a:	b085      	sub	sp, #20
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b4c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8000d10 <HAL_GPIO_Init+0x1cc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b50:	9301      	str	r3, [sp, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000b52:	2300      	movs	r3, #0
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b54:	4a6c      	ldr	r2, [pc, #432]	; (8000d08 <HAL_GPIO_Init+0x1c4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000b56:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 8000d14 <HAL_GPIO_Init+0x1d0>
    ioposition = ((uint32_t)0x01) << position;
 8000b5a:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b5c:	9d01      	ldr	r5, [sp, #4]
    ioposition = ((uint32_t)0x01) << position;
 8000b5e:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b60:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 8000b62:	42ac      	cmp	r4, r5
 8000b64:	f040 80b6 	bne.w	8000cd4 <HAL_GPIO_Init+0x190>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b68:	684c      	ldr	r4, [r1, #4]
 8000b6a:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000b6e:	f024 0c10 	bic.w	ip, r4, #16
 8000b72:	f10c 36ff 	add.w	r6, ip, #4294967295
 8000b76:	2e01      	cmp	r6, #1
 8000b78:	d812      	bhi.n	8000ba0 <HAL_GPIO_Init+0x5c>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000b7a:	2603      	movs	r6, #3
        temp = GPIOx->OSPEEDR; 
 8000b7c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000b7e:	fa06 f60e 	lsl.w	r6, r6, lr
 8000b82:	ea27 0706 	bic.w	r7, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2));
 8000b86:	68ce      	ldr	r6, [r1, #12]
 8000b88:	fa06 f60e 	lsl.w	r6, r6, lr
 8000b8c:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 8000b8e:	6086      	str	r6, [r0, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000b90:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp = GPIOx->OTYPER;
 8000b94:	6847      	ldr	r7, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000b96:	409e      	lsls	r6, r3
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b98:	ea27 0705 	bic.w	r7, r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000b9c:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 8000b9e:	6046      	str	r6, [r0, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000ba0:	2603      	movs	r6, #3
      temp = GPIOx->PUPDR;
 8000ba2:	68c7      	ldr	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ba4:	f1bc 0f02 	cmp.w	ip, #2
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000ba8:	fa06 f60e 	lsl.w	r6, r6, lr
 8000bac:	ea6f 0606 	mvn.w	r6, r6
 8000bb0:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000bb4:	688f      	ldr	r7, [r1, #8]
 8000bb6:	fa07 f70e 	lsl.w	r7, r7, lr
 8000bba:	ea47 070a 	orr.w	r7, r7, sl
      GPIOx->PUPDR = temp;
 8000bbe:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bc0:	d116      	bne.n	8000bf0 <HAL_GPIO_Init+0xac>
        temp = GPIOx->AFR[position >> 3];
 8000bc2:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000bc6:	f003 0b07 	and.w	fp, r3, #7
 8000bca:	f04f 0c0f 	mov.w	ip, #15
 8000bce:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8000bd2:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8000bd6:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000bda:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000bde:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000be2:	690f      	ldr	r7, [r1, #16]
 8000be4:	fa07 f70b 	lsl.w	r7, r7, fp
 8000be8:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3] = temp;
 8000bec:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 8000bf0:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000bf2:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000bf4:	f004 0703 	and.w	r7, r4, #3
 8000bf8:	fa07 fe0e 	lsl.w	lr, r7, lr
 8000bfc:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 8000c00:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c02:	00e6      	lsls	r6, r4, #3
 8000c04:	d566      	bpl.n	8000cd4 <HAL_GPIO_Init+0x190>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c06:	f8d8 6044 	ldr.w	r6, [r8, #68]	; 0x44
 8000c0a:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000c0e:	f003 0e03 	and.w	lr, r3, #3
 8000c12:	f04f 0c0f 	mov.w	ip, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c16:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8000c1a:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000c1e:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c22:	f8c8 6044 	str.w	r6, [r8, #68]	; 0x44
 8000c26:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 8000c2a:	f8d8 6044 	ldr.w	r6, [r8, #68]	; 0x44
 8000c2e:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8000c32:	9603      	str	r6, [sp, #12]
 8000c34:	9e03      	ldr	r6, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000c36:	fa0c f60e 	lsl.w	r6, ip, lr
        temp = SYSCFG->EXTICR[position >> 2];
 8000c3a:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000c3e:	ea2a 0c06 	bic.w	ip, sl, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000c42:	4e32      	ldr	r6, [pc, #200]	; (8000d0c <HAL_GPIO_Init+0x1c8>)
 8000c44:	42b0      	cmp	r0, r6
 8000c46:	d04c      	beq.n	8000ce2 <HAL_GPIO_Init+0x19e>
 8000c48:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000c4c:	42b0      	cmp	r0, r6
 8000c4e:	d04a      	beq.n	8000ce6 <HAL_GPIO_Init+0x1a2>
 8000c50:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000c54:	42b0      	cmp	r0, r6
 8000c56:	d048      	beq.n	8000cea <HAL_GPIO_Init+0x1a6>
 8000c58:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000c5c:	42b0      	cmp	r0, r6
 8000c5e:	d046      	beq.n	8000cee <HAL_GPIO_Init+0x1aa>
 8000c60:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000c64:	42b0      	cmp	r0, r6
 8000c66:	d044      	beq.n	8000cf2 <HAL_GPIO_Init+0x1ae>
 8000c68:	4548      	cmp	r0, r9
 8000c6a:	d044      	beq.n	8000cf6 <HAL_GPIO_Init+0x1b2>
 8000c6c:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8000c70:	42b0      	cmp	r0, r6
 8000c72:	d042      	beq.n	8000cfa <HAL_GPIO_Init+0x1b6>
 8000c74:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000c78:	42b0      	cmp	r0, r6
 8000c7a:	d040      	beq.n	8000cfe <HAL_GPIO_Init+0x1ba>
 8000c7c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000c80:	42b0      	cmp	r0, r6
 8000c82:	d03e      	beq.n	8000d02 <HAL_GPIO_Init+0x1be>
 8000c84:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000c88:	42b0      	cmp	r0, r6
 8000c8a:	bf14      	ite	ne
 8000c8c:	260a      	movne	r6, #10
 8000c8e:	2609      	moveq	r6, #9
 8000c90:	fa06 f60e 	lsl.w	r6, r6, lr
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c94:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000c98:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 8000c9c:	60be      	str	r6, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
 8000c9e:	ea6f 0705 	mvn.w	r7, r5
        temp = EXTI->IMR;
 8000ca2:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000ca4:	bf0c      	ite	eq
 8000ca6:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000ca8:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000caa:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        EXTI->IMR = temp;
 8000cae:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR;
 8000cb0:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8000cb2:	bf0c      	ite	eq
 8000cb4:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000cb6:	432e      	orrne	r6, r5
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000cb8:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        EXTI->EMR = temp;
 8000cbc:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR;
 8000cbe:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8000cc0:	bf0c      	ite	eq
 8000cc2:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000cc4:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000cc6:	02a4      	lsls	r4, r4, #10
        EXTI->RTSR = temp;
 8000cc8:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR;
 8000cca:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8000ccc:	bf54      	ite	pl
 8000cce:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 8000cd0:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 8000cd2:	60d6      	str	r6, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	2b10      	cmp	r3, #16
 8000cd8:	f47f af3f 	bne.w	8000b5a <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000cdc:	b005      	add	sp, #20
 8000cde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000ce2:	2600      	movs	r6, #0
 8000ce4:	e7d4      	b.n	8000c90 <HAL_GPIO_Init+0x14c>
 8000ce6:	2601      	movs	r6, #1
 8000ce8:	e7d2      	b.n	8000c90 <HAL_GPIO_Init+0x14c>
 8000cea:	2602      	movs	r6, #2
 8000cec:	e7d0      	b.n	8000c90 <HAL_GPIO_Init+0x14c>
 8000cee:	2603      	movs	r6, #3
 8000cf0:	e7ce      	b.n	8000c90 <HAL_GPIO_Init+0x14c>
 8000cf2:	2604      	movs	r6, #4
 8000cf4:	e7cc      	b.n	8000c90 <HAL_GPIO_Init+0x14c>
 8000cf6:	2605      	movs	r6, #5
 8000cf8:	e7ca      	b.n	8000c90 <HAL_GPIO_Init+0x14c>
 8000cfa:	2606      	movs	r6, #6
 8000cfc:	e7c8      	b.n	8000c90 <HAL_GPIO_Init+0x14c>
 8000cfe:	2607      	movs	r6, #7
 8000d00:	e7c6      	b.n	8000c90 <HAL_GPIO_Init+0x14c>
 8000d02:	2608      	movs	r6, #8
 8000d04:	e7c4      	b.n	8000c90 <HAL_GPIO_Init+0x14c>
 8000d06:	bf00      	nop
 8000d08:	40013c00 	.word	0x40013c00
 8000d0c:	40020000 	.word	0x40020000
 8000d10:	40023800 	.word	0x40023800
 8000d14:	40021400 	.word	0x40021400

08000d18 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d18:	b10a      	cbz	r2, 8000d1e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000d1a:	6181      	str	r1, [r0, #24]
 8000d1c:	4770      	bx	lr
 8000d1e:	0409      	lsls	r1, r1, #16
 8000d20:	e7fb      	b.n	8000d1a <HAL_GPIO_WritePin+0x2>

08000d22 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000d22:	4770      	bx	lr

08000d24 <HAL_GPIO_EXTI_IRQHandler>:
{
 8000d24:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000d26:	4b04      	ldr	r3, [pc, #16]	; (8000d38 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8000d28:	6959      	ldr	r1, [r3, #20]
 8000d2a:	4201      	tst	r1, r0
 8000d2c:	d002      	beq.n	8000d34 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000d2e:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000d30:	f7ff fff7 	bl	8000d22 <HAL_GPIO_EXTI_Callback>
 8000d34:	bd08      	pop	{r3, pc}
 8000d36:	bf00      	nop
 8000d38:	40013c00 	.word	0x40013c00

08000d3c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000d3c:	b5f0      	push	{r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000d3e:	4604      	mov	r4, r0
{
 8000d40:	b08b      	sub	sp, #44	; 0x2c
  if (hpcd == NULL)
 8000d42:	b360      	cbz	r0, 8000d9e <HAL_PCD_Init+0x62>
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000d44:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
  USBx = hpcd->Instance;
 8000d48:	6805      	ldr	r5, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000d4a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000d4e:	b91b      	cbnz	r3, 8000d58 <HAL_PCD_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000d50:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000d54:	f002 fb64 	bl	8003420 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000d58:	2303      	movs	r3, #3

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000d5a:	466e      	mov	r6, sp
 8000d5c:	1d27      	adds	r7, r4, #4
  hpcd->State = HAL_PCD_STATE_BUSY;
 8000d5e:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000d62:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  __HAL_PCD_DISABLE(hpcd);
 8000d64:	4625      	mov	r5, r4
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000d66:	f413 7380 	ands.w	r3, r3, #256	; 0x100
  __HAL_PCD_DISABLE(hpcd);
 8000d6a:	f855 0b10 	ldr.w	r0, [r5], #16
    hpcd->Init.dma_enable = 0U;
 8000d6e:	bf08      	it	eq
 8000d70:	6123      	streq	r3, [r4, #16]
  __HAL_PCD_DISABLE(hpcd);
 8000d72:	f001 f97e 	bl	8002072 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000d76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d78:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000d7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d7c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000d7e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000d82:	4625      	mov	r5, r4
 8000d84:	e886 0003 	stmia.w	r6, {r0, r1}
 8000d88:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8000d8c:	f855 0b10 	ldr.w	r0, [r5], #16
 8000d90:	f001 f934 	bl	8001ffc <USB_CoreInit>
 8000d94:	4606      	mov	r6, r0
 8000d96:	b120      	cbz	r0, 8000da2 <HAL_PCD_Init+0x66>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000d98:	2302      	movs	r3, #2
 8000d9a:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
    return HAL_ERROR;
 8000d9e:	2501      	movs	r5, #1
 8000da0:	e054      	b.n	8000e4c <HAL_PCD_Init+0x110>
    return HAL_ERROR;
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000da2:	4601      	mov	r1, r0
 8000da4:	6820      	ldr	r0, [r4, #0]
 8000da6:	f001 f96a 	bl	800207e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000daa:	4630      	mov	r0, r6
 8000dac:	f8d4 e004 	ldr.w	lr, [r4, #4]
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000db0:	261c      	movs	r6, #28
 8000db2:	f04f 0c01 	mov.w	ip, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000db6:	4601      	mov	r1, r0
 8000db8:	b2c2      	uxtb	r2, r0
 8000dba:	3001      	adds	r0, #1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000dbc:	4596      	cmp	lr, r2
 8000dbe:	d81b      	bhi.n	8000df8 <HAL_PCD_Init+0xbc>
 8000dc0:	2300      	movs	r3, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000dc2:	261c      	movs	r6, #28
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	b2d8      	uxtb	r0, r3
 8000dc8:	3301      	adds	r3, #1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000dca:	4586      	cmp	lr, r0
 8000dcc:	d822      	bhi.n	8000e14 <HAL_PCD_Init+0xd8>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000dce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dd0:	466e      	mov	r6, sp
 8000dd2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000dd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dd6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000dd8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000ddc:	e886 0003 	stmia.w	r6, {r0, r1}
 8000de0:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8000de4:	6820      	ldr	r0, [r4, #0]
 8000de6:	f001 f98b 	bl	8002100 <USB_DevInit>
 8000dea:	2301      	movs	r3, #1
 8000dec:	4605      	mov	r5, r0
 8000dee:	b300      	cbz	r0, 8000e32 <HAL_PCD_Init+0xf6>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000df0:	2202      	movs	r2, #2
 8000df2:	f884 23bd 	strb.w	r2, [r4, #957]	; 0x3bd
 8000df6:	e7d2      	b.n	8000d9e <HAL_PCD_Init+0x62>
    hpcd->IN_ep[i].is_in = 1U;
 8000df8:	fb06 4302 	mla	r3, r6, r2, r4
 8000dfc:	f883 c03d 	strb.w	ip, [r3, #61]	; 0x3d
    hpcd->IN_ep[i].num = i;
 8000e00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000e04:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000e08:	f883 103f 	strb.w	r1, [r3, #63]	; 0x3f
    hpcd->IN_ep[i].maxpacket = 0U;
 8000e0c:	6459      	str	r1, [r3, #68]	; 0x44
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000e0e:	6499      	str	r1, [r3, #72]	; 0x48
    hpcd->IN_ep[i].xfer_len = 0U;
 8000e10:	6519      	str	r1, [r3, #80]	; 0x50
 8000e12:	e7d1      	b.n	8000db8 <HAL_PCD_Init+0x7c>
    hpcd->OUT_ep[i].is_in = 0U;
 8000e14:	fb06 4200 	mla	r2, r6, r0, r4
 8000e18:	f882 11fd 	strb.w	r1, [r2, #509]	; 0x1fd
    hpcd->OUT_ep[i].num = i;
 8000e1c:	f882 01fc 	strb.w	r0, [r2, #508]	; 0x1fc
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000e20:	f882 11ff 	strb.w	r1, [r2, #511]	; 0x1ff
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000e24:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000e28:	f8c2 1208 	str.w	r1, [r2, #520]	; 0x208
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000e2c:	f8c2 1210 	str.w	r1, [r2, #528]	; 0x210
 8000e30:	e7c9      	b.n	8000dc6 <HAL_PCD_Init+0x8a>
    return HAL_ERROR;
  }

  hpcd->USB_Address = 0U;
 8000e32:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8000e36:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8000e3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000e3c:	2b01      	cmp	r3, #1
 8000e3e:	d102      	bne.n	8000e46 <HAL_PCD_Init+0x10a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000e40:	4620      	mov	r0, r4
 8000e42:	f000 f806 	bl	8000e52 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8000e46:	6820      	ldr	r0, [r4, #0]
 8000e48:	f001 fa14 	bl	8002274 <USB_DevDisconnect>

  return HAL_OK;
}
 8000e4c:	4628      	mov	r0, r5
 8000e4e:	b00b      	add	sp, #44	; 0x2c
 8000e50:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000e52 <HAL_PCDEx_ActivateLPM>:
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;

  hpcd->lpm_active = 1U;
 8000e52:	2101      	movs	r1, #1
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000e54:	6802      	ldr	r2, [r0, #0]
{
 8000e56:	4603      	mov	r3, r0
  hpcd->lpm_active = 1U;
 8000e58:	f8c0 13fc 	str.w	r1, [r0, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8000e5c:	2000      	movs	r0, #0
 8000e5e:	f883 03f4 	strb.w	r0, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8000e62:	6993      	ldr	r3, [r2, #24]
 8000e64:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000e68:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8000e6a:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8000e6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e70:	f043 0303 	orr.w	r3, r3, #3
 8000e74:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
}
 8000e76:	4770      	bx	lr

08000e78 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000e78:	4a02      	ldr	r2, [pc, #8]	; (8000e84 <HAL_PWR_EnableBkUpAccess+0xc>)
 8000e7a:	6813      	ldr	r3, [r2, #0]
 8000e7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e80:	6013      	str	r3, [r2, #0]
 8000e82:	4770      	bx	lr
 8000e84:	40007000 	.word	0x40007000

08000e88 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8000e88:	4b19      	ldr	r3, [pc, #100]	; (8000ef0 <HAL_PWREx_EnableOverDrive+0x68>)
{
 8000e8a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000e8e:	4c19      	ldr	r4, [pc, #100]	; (8000ef4 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e90:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000e94:	641a      	str	r2, [r3, #64]	; 0x40
 8000e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e9c:	9301      	str	r3, [sp, #4]
 8000e9e:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000ea0:	6823      	ldr	r3, [r4, #0]
 8000ea2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ea6:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ea8:	f7ff fbde 	bl	8000668 <HAL_GetTick>
 8000eac:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000eae:	6863      	ldr	r3, [r4, #4]
 8000eb0:	03da      	lsls	r2, r3, #15
 8000eb2:	d50c      	bpl.n	8000ece <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000eb4:	6823      	ldr	r3, [r4, #0]
 8000eb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eba:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ebc:	f7ff fbd4 	bl	8000668 <HAL_GetTick>

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000ec0:	4c0c      	ldr	r4, [pc, #48]	; (8000ef4 <HAL_PWREx_EnableOverDrive+0x6c>)
  tickstart = HAL_GetTick();
 8000ec2:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000ec4:	6863      	ldr	r3, [r4, #4]
 8000ec6:	039b      	lsls	r3, r3, #14
 8000ec8:	d50a      	bpl.n	8000ee0 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8000eca:	2000      	movs	r0, #0
 8000ecc:	e006      	b.n	8000edc <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000ece:	f7ff fbcb 	bl	8000668 <HAL_GetTick>
 8000ed2:	1b40      	subs	r0, r0, r5
 8000ed4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000ed8:	d9e9      	bls.n	8000eae <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 8000eda:	2003      	movs	r0, #3
}
 8000edc:	b003      	add	sp, #12
 8000ede:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000ee0:	f7ff fbc2 	bl	8000668 <HAL_GetTick>
 8000ee4:	1b40      	subs	r0, r0, r5
 8000ee6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000eea:	d9eb      	bls.n	8000ec4 <HAL_PWREx_EnableOverDrive+0x3c>
 8000eec:	e7f5      	b.n	8000eda <HAL_PWREx_EnableOverDrive+0x52>
 8000eee:	bf00      	nop
 8000ef0:	40023800 	.word	0x40023800
 8000ef4:	40007000 	.word	0x40007000

08000ef8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ef8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000efc:	4604      	mov	r4, r0
 8000efe:	b908      	cbnz	r0, 8000f04 <HAL_RCC_OscConfig+0xc>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8000f00:	2001      	movs	r0, #1
 8000f02:	e03f      	b.n	8000f84 <HAL_RCC_OscConfig+0x8c>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f04:	6803      	ldr	r3, [r0, #0]
 8000f06:	07d8      	lsls	r0, r3, #31
 8000f08:	d410      	bmi.n	8000f2c <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f0a:	6823      	ldr	r3, [r4, #0]
 8000f0c:	0799      	lsls	r1, r3, #30
 8000f0e:	d460      	bmi.n	8000fd2 <HAL_RCC_OscConfig+0xda>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f10:	6823      	ldr	r3, [r4, #0]
 8000f12:	0719      	lsls	r1, r3, #28
 8000f14:	f100 80a5 	bmi.w	8001062 <HAL_RCC_OscConfig+0x16a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f18:	6823      	ldr	r3, [r4, #0]
 8000f1a:	075a      	lsls	r2, r3, #29
 8000f1c:	f100 80c6 	bmi.w	80010ac <HAL_RCC_OscConfig+0x1b4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f20:	69a0      	ldr	r0, [r4, #24]
 8000f22:	2800      	cmp	r0, #0
 8000f24:	f040 8130 	bne.w	8001188 <HAL_RCC_OscConfig+0x290>
      }
    }
  }
  return HAL_OK;
 8000f28:	2000      	movs	r0, #0
 8000f2a:	e02b      	b.n	8000f84 <HAL_RCC_OscConfig+0x8c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f2c:	4b94      	ldr	r3, [pc, #592]	; (8001180 <HAL_RCC_OscConfig+0x288>)
 8000f2e:	689a      	ldr	r2, [r3, #8]
 8000f30:	f002 020c 	and.w	r2, r2, #12
 8000f34:	2a04      	cmp	r2, #4
 8000f36:	d007      	beq.n	8000f48 <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f38:	689a      	ldr	r2, [r3, #8]
 8000f3a:	f002 020c 	and.w	r2, r2, #12
 8000f3e:	2a08      	cmp	r2, #8
 8000f40:	d10a      	bne.n	8000f58 <HAL_RCC_OscConfig+0x60>
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	025a      	lsls	r2, r3, #9
 8000f46:	d507      	bpl.n	8000f58 <HAL_RCC_OscConfig+0x60>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f48:	4b8d      	ldr	r3, [pc, #564]	; (8001180 <HAL_RCC_OscConfig+0x288>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	039b      	lsls	r3, r3, #14
 8000f4e:	d5dc      	bpl.n	8000f0a <HAL_RCC_OscConfig+0x12>
 8000f50:	6863      	ldr	r3, [r4, #4]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d1d9      	bne.n	8000f0a <HAL_RCC_OscConfig+0x12>
 8000f56:	e7d3      	b.n	8000f00 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f58:	6863      	ldr	r3, [r4, #4]
 8000f5a:	4d89      	ldr	r5, [pc, #548]	; (8001180 <HAL_RCC_OscConfig+0x288>)
 8000f5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f60:	d113      	bne.n	8000f8a <HAL_RCC_OscConfig+0x92>
 8000f62:	682b      	ldr	r3, [r5, #0]
 8000f64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f68:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000f6a:	f7ff fb7d 	bl	8000668 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f6e:	4d84      	ldr	r5, [pc, #528]	; (8001180 <HAL_RCC_OscConfig+0x288>)
        tickstart = HAL_GetTick();
 8000f70:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f72:	682b      	ldr	r3, [r5, #0]
 8000f74:	039f      	lsls	r7, r3, #14
 8000f76:	d4c8      	bmi.n	8000f0a <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f78:	f7ff fb76 	bl	8000668 <HAL_GetTick>
 8000f7c:	1b80      	subs	r0, r0, r6
 8000f7e:	2864      	cmp	r0, #100	; 0x64
 8000f80:	d9f7      	bls.n	8000f72 <HAL_RCC_OscConfig+0x7a>
            return HAL_TIMEOUT;
 8000f82:	2003      	movs	r0, #3
}
 8000f84:	b002      	add	sp, #8
 8000f86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f8a:	b99b      	cbnz	r3, 8000fb4 <HAL_RCC_OscConfig+0xbc>
 8000f8c:	682b      	ldr	r3, [r5, #0]
 8000f8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f92:	602b      	str	r3, [r5, #0]
 8000f94:	682b      	ldr	r3, [r5, #0]
 8000f96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f9a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000f9c:	f7ff fb64 	bl	8000668 <HAL_GetTick>
 8000fa0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fa2:	682b      	ldr	r3, [r5, #0]
 8000fa4:	0398      	lsls	r0, r3, #14
 8000fa6:	d5b0      	bpl.n	8000f0a <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fa8:	f7ff fb5e 	bl	8000668 <HAL_GetTick>
 8000fac:	1b80      	subs	r0, r0, r6
 8000fae:	2864      	cmp	r0, #100	; 0x64
 8000fb0:	d9f7      	bls.n	8000fa2 <HAL_RCC_OscConfig+0xaa>
 8000fb2:	e7e6      	b.n	8000f82 <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000fb8:	682b      	ldr	r3, [r5, #0]
 8000fba:	d103      	bne.n	8000fc4 <HAL_RCC_OscConfig+0xcc>
 8000fbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fc0:	602b      	str	r3, [r5, #0]
 8000fc2:	e7ce      	b.n	8000f62 <HAL_RCC_OscConfig+0x6a>
 8000fc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fc8:	602b      	str	r3, [r5, #0]
 8000fca:	682b      	ldr	r3, [r5, #0]
 8000fcc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fd0:	e7ca      	b.n	8000f68 <HAL_RCC_OscConfig+0x70>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000fd2:	4b6b      	ldr	r3, [pc, #428]	; (8001180 <HAL_RCC_OscConfig+0x288>)
 8000fd4:	689a      	ldr	r2, [r3, #8]
 8000fd6:	f012 0f0c 	tst.w	r2, #12
 8000fda:	d007      	beq.n	8000fec <HAL_RCC_OscConfig+0xf4>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000fdc:	689a      	ldr	r2, [r3, #8]
 8000fde:	f002 020c 	and.w	r2, r2, #12
 8000fe2:	2a08      	cmp	r2, #8
 8000fe4:	d111      	bne.n	800100a <HAL_RCC_OscConfig+0x112>
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	0259      	lsls	r1, r3, #9
 8000fea:	d40e      	bmi.n	800100a <HAL_RCC_OscConfig+0x112>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fec:	4b64      	ldr	r3, [pc, #400]	; (8001180 <HAL_RCC_OscConfig+0x288>)
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	0792      	lsls	r2, r2, #30
 8000ff2:	d502      	bpl.n	8000ffa <HAL_RCC_OscConfig+0x102>
 8000ff4:	68e2      	ldr	r2, [r4, #12]
 8000ff6:	2a01      	cmp	r2, #1
 8000ff8:	d182      	bne.n	8000f00 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	6921      	ldr	r1, [r4, #16]
 8000ffe:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001002:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8001006:	601a      	str	r2, [r3, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001008:	e782      	b.n	8000f10 <HAL_RCC_OscConfig+0x18>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800100a:	68e3      	ldr	r3, [r4, #12]
 800100c:	4d5c      	ldr	r5, [pc, #368]	; (8001180 <HAL_RCC_OscConfig+0x288>)
 800100e:	b1bb      	cbz	r3, 8001040 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_ENABLE();
 8001010:	682b      	ldr	r3, [r5, #0]
 8001012:	f043 0301 	orr.w	r3, r3, #1
 8001016:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001018:	f7ff fb26 	bl	8000668 <HAL_GetTick>
 800101c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800101e:	682b      	ldr	r3, [r5, #0]
 8001020:	079f      	lsls	r7, r3, #30
 8001022:	d507      	bpl.n	8001034 <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001024:	682b      	ldr	r3, [r5, #0]
 8001026:	6922      	ldr	r2, [r4, #16]
 8001028:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800102c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001030:	602b      	str	r3, [r5, #0]
 8001032:	e76d      	b.n	8000f10 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001034:	f7ff fb18 	bl	8000668 <HAL_GetTick>
 8001038:	1b80      	subs	r0, r0, r6
 800103a:	2802      	cmp	r0, #2
 800103c:	d9ef      	bls.n	800101e <HAL_RCC_OscConfig+0x126>
 800103e:	e7a0      	b.n	8000f82 <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_HSI_DISABLE();
 8001040:	682b      	ldr	r3, [r5, #0]
 8001042:	f023 0301 	bic.w	r3, r3, #1
 8001046:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001048:	f7ff fb0e 	bl	8000668 <HAL_GetTick>
 800104c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800104e:	682b      	ldr	r3, [r5, #0]
 8001050:	0798      	lsls	r0, r3, #30
 8001052:	f57f af5d 	bpl.w	8000f10 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001056:	f7ff fb07 	bl	8000668 <HAL_GetTick>
 800105a:	1b80      	subs	r0, r0, r6
 800105c:	2802      	cmp	r0, #2
 800105e:	d9f6      	bls.n	800104e <HAL_RCC_OscConfig+0x156>
 8001060:	e78f      	b.n	8000f82 <HAL_RCC_OscConfig+0x8a>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001062:	6963      	ldr	r3, [r4, #20]
 8001064:	4d46      	ldr	r5, [pc, #280]	; (8001180 <HAL_RCC_OscConfig+0x288>)
 8001066:	b183      	cbz	r3, 800108a <HAL_RCC_OscConfig+0x192>
      __HAL_RCC_LSI_ENABLE();
 8001068:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800106a:	f043 0301 	orr.w	r3, r3, #1
 800106e:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8001070:	f7ff fafa 	bl	8000668 <HAL_GetTick>
 8001074:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001076:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001078:	079b      	lsls	r3, r3, #30
 800107a:	f53f af4d 	bmi.w	8000f18 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800107e:	f7ff faf3 	bl	8000668 <HAL_GetTick>
 8001082:	1b80      	subs	r0, r0, r6
 8001084:	2802      	cmp	r0, #2
 8001086:	d9f6      	bls.n	8001076 <HAL_RCC_OscConfig+0x17e>
 8001088:	e77b      	b.n	8000f82 <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_LSI_DISABLE();
 800108a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800108c:	f023 0301 	bic.w	r3, r3, #1
 8001090:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8001092:	f7ff fae9 	bl	8000668 <HAL_GetTick>
 8001096:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001098:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800109a:	079f      	lsls	r7, r3, #30
 800109c:	f57f af3c 	bpl.w	8000f18 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010a0:	f7ff fae2 	bl	8000668 <HAL_GetTick>
 80010a4:	1b80      	subs	r0, r0, r6
 80010a6:	2802      	cmp	r0, #2
 80010a8:	d9f6      	bls.n	8001098 <HAL_RCC_OscConfig+0x1a0>
 80010aa:	e76a      	b.n	8000f82 <HAL_RCC_OscConfig+0x8a>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010ac:	4b34      	ldr	r3, [pc, #208]	; (8001180 <HAL_RCC_OscConfig+0x288>)
 80010ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010b0:	00d0      	lsls	r0, r2, #3
 80010b2:	d427      	bmi.n	8001104 <HAL_RCC_OscConfig+0x20c>
      __HAL_RCC_PWR_CLK_ENABLE();
 80010b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 80010b6:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80010b8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80010bc:	641a      	str	r2, [r3, #64]	; 0x40
 80010be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010c4:	9301      	str	r3, [sp, #4]
 80010c6:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010c8:	4d2e      	ldr	r5, [pc, #184]	; (8001184 <HAL_RCC_OscConfig+0x28c>)
 80010ca:	682b      	ldr	r3, [r5, #0]
 80010cc:	05d9      	lsls	r1, r3, #23
 80010ce:	d51b      	bpl.n	8001108 <HAL_RCC_OscConfig+0x210>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010d0:	68a3      	ldr	r3, [r4, #8]
 80010d2:	4d2b      	ldr	r5, [pc, #172]	; (8001180 <HAL_RCC_OscConfig+0x288>)
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	d127      	bne.n	8001128 <HAL_RCC_OscConfig+0x230>
 80010d8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80010da:	f043 0301 	orr.w	r3, r3, #1
 80010de:	672b      	str	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010e0:	f241 3588 	movw	r5, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80010e4:	f7ff fac0 	bl	8000668 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010e8:	4f25      	ldr	r7, [pc, #148]	; (8001180 <HAL_RCC_OscConfig+0x288>)
      tickstart = HAL_GetTick();
 80010ea:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80010ee:	079b      	lsls	r3, r3, #30
 80010f0:	d53f      	bpl.n	8001172 <HAL_RCC_OscConfig+0x27a>
    if (pwrclkchanged == SET)
 80010f2:	2e00      	cmp	r6, #0
 80010f4:	f43f af14 	beq.w	8000f20 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 80010f8:	4a21      	ldr	r2, [pc, #132]	; (8001180 <HAL_RCC_OscConfig+0x288>)
 80010fa:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80010fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001100:	6413      	str	r3, [r2, #64]	; 0x40
 8001102:	e70d      	b.n	8000f20 <HAL_RCC_OscConfig+0x28>
  FlagStatus pwrclkchanged = RESET;
 8001104:	2600      	movs	r6, #0
 8001106:	e7df      	b.n	80010c8 <HAL_RCC_OscConfig+0x1d0>
      PWR->CR1 |= PWR_CR1_DBP;
 8001108:	682b      	ldr	r3, [r5, #0]
 800110a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800110e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001110:	f7ff faaa 	bl	8000668 <HAL_GetTick>
 8001114:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001116:	682b      	ldr	r3, [r5, #0]
 8001118:	05da      	lsls	r2, r3, #23
 800111a:	d4d9      	bmi.n	80010d0 <HAL_RCC_OscConfig+0x1d8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800111c:	f7ff faa4 	bl	8000668 <HAL_GetTick>
 8001120:	1bc0      	subs	r0, r0, r7
 8001122:	2864      	cmp	r0, #100	; 0x64
 8001124:	d9f7      	bls.n	8001116 <HAL_RCC_OscConfig+0x21e>
 8001126:	e72c      	b.n	8000f82 <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001128:	b9ab      	cbnz	r3, 8001156 <HAL_RCC_OscConfig+0x25e>
 800112a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800112c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001130:	f023 0301 	bic.w	r3, r3, #1
 8001134:	672b      	str	r3, [r5, #112]	; 0x70
 8001136:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001138:	f023 0304 	bic.w	r3, r3, #4
 800113c:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800113e:	f7ff fa93 	bl	8000668 <HAL_GetTick>
 8001142:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001144:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001146:	0798      	lsls	r0, r3, #30
 8001148:	d5d3      	bpl.n	80010f2 <HAL_RCC_OscConfig+0x1fa>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800114a:	f7ff fa8d 	bl	8000668 <HAL_GetTick>
 800114e:	1bc0      	subs	r0, r0, r7
 8001150:	4540      	cmp	r0, r8
 8001152:	d9f7      	bls.n	8001144 <HAL_RCC_OscConfig+0x24c>
 8001154:	e715      	b.n	8000f82 <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001156:	2b05      	cmp	r3, #5
 8001158:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800115a:	d103      	bne.n	8001164 <HAL_RCC_OscConfig+0x26c>
 800115c:	f043 0304 	orr.w	r3, r3, #4
 8001160:	672b      	str	r3, [r5, #112]	; 0x70
 8001162:	e7b9      	b.n	80010d8 <HAL_RCC_OscConfig+0x1e0>
 8001164:	f023 0301 	bic.w	r3, r3, #1
 8001168:	672b      	str	r3, [r5, #112]	; 0x70
 800116a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800116c:	f023 0304 	bic.w	r3, r3, #4
 8001170:	e7b5      	b.n	80010de <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001172:	f7ff fa79 	bl	8000668 <HAL_GetTick>
 8001176:	eba0 0008 	sub.w	r0, r0, r8
 800117a:	42a8      	cmp	r0, r5
 800117c:	d9b6      	bls.n	80010ec <HAL_RCC_OscConfig+0x1f4>
 800117e:	e700      	b.n	8000f82 <HAL_RCC_OscConfig+0x8a>
 8001180:	40023800 	.word	0x40023800
 8001184:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001188:	4d3c      	ldr	r5, [pc, #240]	; (800127c <HAL_RCC_OscConfig+0x384>)
 800118a:	68ab      	ldr	r3, [r5, #8]
 800118c:	f003 030c 	and.w	r3, r3, #12
 8001190:	2b08      	cmp	r3, #8
 8001192:	d042      	beq.n	800121a <HAL_RCC_OscConfig+0x322>
        __HAL_RCC_PLL_DISABLE();
 8001194:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001196:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8001198:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800119c:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800119e:	d12f      	bne.n	8001200 <HAL_RCC_OscConfig+0x308>
        tickstart = HAL_GetTick();
 80011a0:	f7ff fa62 	bl	8000668 <HAL_GetTick>
 80011a4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80011a6:	682b      	ldr	r3, [r5, #0]
 80011a8:	0199      	lsls	r1, r3, #6
 80011aa:	d423      	bmi.n	80011f4 <HAL_RCC_OscConfig+0x2fc>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80011ac:	6a22      	ldr	r2, [r4, #32]
 80011ae:	69e3      	ldr	r3, [r4, #28]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80011b4:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80011b8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80011ba:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80011be:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80011c0:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80011c4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011c6:	4c2d      	ldr	r4, [pc, #180]	; (800127c <HAL_RCC_OscConfig+0x384>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80011c8:	0852      	lsrs	r2, r2, #1
 80011ca:	3a01      	subs	r2, #1
 80011cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80011d0:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80011d2:	682b      	ldr	r3, [r5, #0]
 80011d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80011d8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80011da:	f7ff fa45 	bl	8000668 <HAL_GetTick>
 80011de:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011e0:	6823      	ldr	r3, [r4, #0]
 80011e2:	019a      	lsls	r2, r3, #6
 80011e4:	f53f aea0 	bmi.w	8000f28 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011e8:	f7ff fa3e 	bl	8000668 <HAL_GetTick>
 80011ec:	1b40      	subs	r0, r0, r5
 80011ee:	2802      	cmp	r0, #2
 80011f0:	d9f6      	bls.n	80011e0 <HAL_RCC_OscConfig+0x2e8>
 80011f2:	e6c6      	b.n	8000f82 <HAL_RCC_OscConfig+0x8a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011f4:	f7ff fa38 	bl	8000668 <HAL_GetTick>
 80011f8:	1b80      	subs	r0, r0, r6
 80011fa:	2802      	cmp	r0, #2
 80011fc:	d9d3      	bls.n	80011a6 <HAL_RCC_OscConfig+0x2ae>
 80011fe:	e6c0      	b.n	8000f82 <HAL_RCC_OscConfig+0x8a>
        tickstart = HAL_GetTick();
 8001200:	f7ff fa32 	bl	8000668 <HAL_GetTick>
 8001204:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001206:	682b      	ldr	r3, [r5, #0]
 8001208:	019b      	lsls	r3, r3, #6
 800120a:	f57f ae8d 	bpl.w	8000f28 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800120e:	f7ff fa2b 	bl	8000668 <HAL_GetTick>
 8001212:	1b00      	subs	r0, r0, r4
 8001214:	2802      	cmp	r0, #2
 8001216:	d9f6      	bls.n	8001206 <HAL_RCC_OscConfig+0x30e>
 8001218:	e6b3      	b.n	8000f82 <HAL_RCC_OscConfig+0x8a>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800121a:	2801      	cmp	r0, #1
      pll_config = RCC->PLLCFGR;
 800121c:	686b      	ldr	r3, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800121e:	f43f aeb1 	beq.w	8000f84 <HAL_RCC_OscConfig+0x8c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001222:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001226:	69e1      	ldr	r1, [r4, #28]
 8001228:	428a      	cmp	r2, r1
 800122a:	f47f ae69 	bne.w	8000f00 <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800122e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001232:	6a21      	ldr	r1, [r4, #32]
 8001234:	428a      	cmp	r2, r1
 8001236:	f47f ae63 	bne.w	8000f00 <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800123a:	f647 72c0 	movw	r2, #32704	; 0x7fc0
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800123e:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001240:	401a      	ands	r2, r3
 8001242:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8001246:	f47f ae5b 	bne.w	8000f00 <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800124a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800124c:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8001250:	0852      	lsrs	r2, r2, #1
 8001252:	3a01      	subs	r2, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001254:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8001258:	f47f ae52 	bne.w	8000f00 <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800125c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001260:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001262:	ebb2 6f01 	cmp.w	r2, r1, lsl #24
 8001266:	f47f ae4b 	bne.w	8000f00 <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800126a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800126c:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001270:	ebb3 7f02 	cmp.w	r3, r2, lsl #28
    return HAL_ERROR;
 8001274:	bf14      	ite	ne
 8001276:	2001      	movne	r0, #1
 8001278:	2000      	moveq	r0, #0
 800127a:	e683      	b.n	8000f84 <HAL_RCC_OscConfig+0x8c>
 800127c:	40023800 	.word	0x40023800

08001280 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001280:	4913      	ldr	r1, [pc, #76]	; (80012d0 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8001282:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001284:	688b      	ldr	r3, [r1, #8]
 8001286:	f003 030c 	and.w	r3, r3, #12
 800128a:	2b04      	cmp	r3, #4
 800128c:	d003      	beq.n	8001296 <HAL_RCC_GetSysClockFreq+0x16>
 800128e:	2b08      	cmp	r3, #8
 8001290:	d003      	beq.n	800129a <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001292:	4810      	ldr	r0, [pc, #64]	; (80012d4 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001294:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8001296:	4810      	ldr	r0, [pc, #64]	; (80012d8 <HAL_RCC_GetSysClockFreq+0x58>)
 8001298:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800129a:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800129c:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800129e:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80012a0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80012a4:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012a8:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80012ac:	bf1a      	itte	ne
 80012ae:	480a      	ldrne	r0, [pc, #40]	; (80012d8 <HAL_RCC_GetSysClockFreq+0x58>)
 80012b0:	2300      	movne	r3, #0
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012b2:	4808      	ldreq	r0, [pc, #32]	; (80012d4 <HAL_RCC_GetSysClockFreq+0x54>)
 80012b4:	fba1 0100 	umull	r0, r1, r1, r0
 80012b8:	f7ff f812 	bl	80002e0 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80012bc:	4b04      	ldr	r3, [pc, #16]	; (80012d0 <HAL_RCC_GetSysClockFreq+0x50>)
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80012c4:	3301      	adds	r3, #1
 80012c6:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco / pllp;
 80012c8:	fbb0 f0f3 	udiv	r0, r0, r3
 80012cc:	bd08      	pop	{r3, pc}
 80012ce:	bf00      	nop
 80012d0:	40023800 	.word	0x40023800
 80012d4:	00f42400 	.word	0x00f42400
 80012d8:	007a1200 	.word	0x007a1200

080012dc <HAL_RCC_ClockConfig>:
{
 80012dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012e0:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 80012e2:	4604      	mov	r4, r0
 80012e4:	b910      	cbnz	r0, 80012ec <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80012e6:	2001      	movs	r0, #1
 80012e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80012ec:	4a46      	ldr	r2, [pc, #280]	; (8001408 <HAL_RCC_ClockConfig+0x12c>)
 80012ee:	6813      	ldr	r3, [r2, #0]
 80012f0:	f003 030f 	and.w	r3, r3, #15
 80012f4:	428b      	cmp	r3, r1
 80012f6:	d329      	bcc.n	800134c <HAL_RCC_ClockConfig+0x70>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012f8:	6821      	ldr	r1, [r4, #0]
 80012fa:	078f      	lsls	r7, r1, #30
 80012fc:	d431      	bmi.n	8001362 <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012fe:	07c8      	lsls	r0, r1, #31
 8001300:	d444      	bmi.n	800138c <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001302:	4a41      	ldr	r2, [pc, #260]	; (8001408 <HAL_RCC_ClockConfig+0x12c>)
 8001304:	6813      	ldr	r3, [r2, #0]
 8001306:	f003 030f 	and.w	r3, r3, #15
 800130a:	429d      	cmp	r5, r3
 800130c:	d368      	bcc.n	80013e0 <HAL_RCC_ClockConfig+0x104>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800130e:	6822      	ldr	r2, [r4, #0]
 8001310:	0751      	lsls	r1, r2, #29
 8001312:	d471      	bmi.n	80013f8 <HAL_RCC_ClockConfig+0x11c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001314:	0713      	lsls	r3, r2, #28
 8001316:	d507      	bpl.n	8001328 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001318:	4a3c      	ldr	r2, [pc, #240]	; (800140c <HAL_RCC_ClockConfig+0x130>)
 800131a:	6921      	ldr	r1, [r4, #16]
 800131c:	6893      	ldr	r3, [r2, #8]
 800131e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001322:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001326:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001328:	f7ff ffaa 	bl	8001280 <HAL_RCC_GetSysClockFreq>
 800132c:	4b37      	ldr	r3, [pc, #220]	; (800140c <HAL_RCC_ClockConfig+0x130>)
 800132e:	4a38      	ldr	r2, [pc, #224]	; (8001410 <HAL_RCC_ClockConfig+0x134>)
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001336:	5cd3      	ldrb	r3, [r2, r3]
 8001338:	40d8      	lsrs	r0, r3
 800133a:	4b36      	ldr	r3, [pc, #216]	; (8001414 <HAL_RCC_ClockConfig+0x138>)
 800133c:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800133e:	4b36      	ldr	r3, [pc, #216]	; (8001418 <HAL_RCC_ClockConfig+0x13c>)
 8001340:	6818      	ldr	r0, [r3, #0]
 8001342:	f7ff f955 	bl	80005f0 <HAL_InitTick>
  return HAL_OK;
 8001346:	2000      	movs	r0, #0
 8001348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800134c:	6813      	ldr	r3, [r2, #0]
 800134e:	f023 030f 	bic.w	r3, r3, #15
 8001352:	430b      	orrs	r3, r1
 8001354:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001356:	6813      	ldr	r3, [r2, #0]
 8001358:	f003 030f 	and.w	r3, r3, #15
 800135c:	4299      	cmp	r1, r3
 800135e:	d1c2      	bne.n	80012e6 <HAL_RCC_ClockConfig+0xa>
 8001360:	e7ca      	b.n	80012f8 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001362:	f011 0f04 	tst.w	r1, #4
 8001366:	4b29      	ldr	r3, [pc, #164]	; (800140c <HAL_RCC_ClockConfig+0x130>)
 8001368:	d003      	beq.n	8001372 <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800136a:	689a      	ldr	r2, [r3, #8]
 800136c:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8001370:	609a      	str	r2, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001372:	070e      	lsls	r6, r1, #28
 8001374:	d503      	bpl.n	800137e <HAL_RCC_ClockConfig+0xa2>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001376:	689a      	ldr	r2, [r3, #8]
 8001378:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 800137c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800137e:	689a      	ldr	r2, [r3, #8]
 8001380:	68a0      	ldr	r0, [r4, #8]
 8001382:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001386:	4302      	orrs	r2, r0
 8001388:	609a      	str	r2, [r3, #8]
 800138a:	e7b8      	b.n	80012fe <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800138c:	6861      	ldr	r1, [r4, #4]
 800138e:	4b1f      	ldr	r3, [pc, #124]	; (800140c <HAL_RCC_ClockConfig+0x130>)
 8001390:	2901      	cmp	r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001392:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001394:	d11c      	bne.n	80013d0 <HAL_RCC_ClockConfig+0xf4>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001396:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800139a:	d0a4      	beq.n	80012e6 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800139c:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800139e:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013a2:	4e1a      	ldr	r6, [pc, #104]	; (800140c <HAL_RCC_ClockConfig+0x130>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013a4:	f022 0203 	bic.w	r2, r2, #3
 80013a8:	430a      	orrs	r2, r1
 80013aa:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80013ac:	f7ff f95c 	bl	8000668 <HAL_GetTick>
 80013b0:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013b2:	68b3      	ldr	r3, [r6, #8]
 80013b4:	6862      	ldr	r2, [r4, #4]
 80013b6:	f003 030c 	and.w	r3, r3, #12
 80013ba:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80013be:	d0a0      	beq.n	8001302 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013c0:	f7ff f952 	bl	8000668 <HAL_GetTick>
 80013c4:	1bc0      	subs	r0, r0, r7
 80013c6:	4540      	cmp	r0, r8
 80013c8:	d9f3      	bls.n	80013b2 <HAL_RCC_ClockConfig+0xd6>
        return HAL_TIMEOUT;
 80013ca:	2003      	movs	r0, #3
}
 80013cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80013d0:	2902      	cmp	r1, #2
 80013d2:	d102      	bne.n	80013da <HAL_RCC_ClockConfig+0xfe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013d4:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80013d8:	e7df      	b.n	800139a <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013da:	f012 0f02 	tst.w	r2, #2
 80013de:	e7dc      	b.n	800139a <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013e0:	6813      	ldr	r3, [r2, #0]
 80013e2:	f023 030f 	bic.w	r3, r3, #15
 80013e6:	432b      	orrs	r3, r5
 80013e8:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013ea:	6813      	ldr	r3, [r2, #0]
 80013ec:	f003 030f 	and.w	r3, r3, #15
 80013f0:	429d      	cmp	r5, r3
 80013f2:	f47f af78 	bne.w	80012e6 <HAL_RCC_ClockConfig+0xa>
 80013f6:	e78a      	b.n	800130e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013f8:	4904      	ldr	r1, [pc, #16]	; (800140c <HAL_RCC_ClockConfig+0x130>)
 80013fa:	68e0      	ldr	r0, [r4, #12]
 80013fc:	688b      	ldr	r3, [r1, #8]
 80013fe:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001402:	4303      	orrs	r3, r0
 8001404:	608b      	str	r3, [r1, #8]
 8001406:	e785      	b.n	8001314 <HAL_RCC_ClockConfig+0x38>
 8001408:	40023c00 	.word	0x40023c00
 800140c:	40023800 	.word	0x40023800
 8001410:	08004498 	.word	0x08004498
 8001414:	2002000c 	.word	0x2002000c
 8001418:	20020004 	.word	0x20020004

0800141c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 800141c:	4b01      	ldr	r3, [pc, #4]	; (8001424 <HAL_RCC_GetHCLKFreq+0x8>)
 800141e:	6818      	ldr	r0, [r3, #0]
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	2002000c 	.word	0x2002000c

08001428 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001428:	4b04      	ldr	r3, [pc, #16]	; (800143c <HAL_RCC_GetPCLK1Freq+0x14>)
 800142a:	4a05      	ldr	r2, [pc, #20]	; (8001440 <HAL_RCC_GetPCLK1Freq+0x18>)
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001432:	5cd3      	ldrb	r3, [r2, r3]
 8001434:	4a03      	ldr	r2, [pc, #12]	; (8001444 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001436:	6810      	ldr	r0, [r2, #0]
}
 8001438:	40d8      	lsrs	r0, r3
 800143a:	4770      	bx	lr
 800143c:	40023800 	.word	0x40023800
 8001440:	080044a8 	.word	0x080044a8
 8001444:	2002000c 	.word	0x2002000c

08001448 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001448:	4b04      	ldr	r3, [pc, #16]	; (800145c <HAL_RCC_GetPCLK2Freq+0x14>)
 800144a:	4a05      	ldr	r2, [pc, #20]	; (8001460 <HAL_RCC_GetPCLK2Freq+0x18>)
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001452:	5cd3      	ldrb	r3, [r2, r3]
 8001454:	4a03      	ldr	r2, [pc, #12]	; (8001464 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001456:	6810      	ldr	r0, [r2, #0]
}
 8001458:	40d8      	lsrs	r0, r3
 800145a:	4770      	bx	lr
 800145c:	40023800 	.word	0x40023800
 8001460:	080044a8 	.word	0x080044a8
 8001464:	2002000c 	.word	0x2002000c

08001468 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001468:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800146c:	6802      	ldr	r2, [r0, #0]
{
 800146e:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001470:	f012 0601 	ands.w	r6, r2, #1
 8001474:	d00b      	beq.n	800148e <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001476:	4bba      	ldr	r3, [pc, #744]	; (8001760 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001478:	6899      	ldr	r1, [r3, #8]
 800147a:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 800147e:	6099      	str	r1, [r3, #8]
 8001480:	6b46      	ldr	r6, [r0, #52]	; 0x34
 8001482:	6899      	ldr	r1, [r3, #8]
 8001484:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001486:	fab6 f686 	clz	r6, r6
 800148a:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800148c:	6099      	str	r1, [r3, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800148e:	f412 2500 	ands.w	r5, r2, #524288	; 0x80000
 8001492:	d012      	beq.n	80014ba <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001494:	49b2      	ldr	r1, [pc, #712]	; (8001760 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001496:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8001498:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800149c:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80014a0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
    {
      plli2sused = 1;
 80014a4:	bf08      	it	eq
 80014a6:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80014a8:	ea43 0305 	orr.w	r3, r3, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80014ac:	bf16      	itet	ne
 80014ae:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 80014b2:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80014b4:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80014b6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80014ba:	02d7      	lsls	r7, r2, #11
 80014bc:	d510      	bpl.n	80014e0 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80014be:	48a8      	ldr	r0, [pc, #672]	; (8001760 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80014c0:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80014c2:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80014c6:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80014ca:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80014ce:	ea43 0301 	orr.w	r3, r3, r1
 80014d2:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80014d6:	f000 81a9 	beq.w	800182c <HAL_RCCEx_PeriphCLKConfig+0x3c4>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 80014da:	2900      	cmp	r1, #0
 80014dc:	bf08      	it	eq
 80014de:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 80014e0:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
 80014e4:	bf18      	it	ne
 80014e6:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80014e8:	0690      	lsls	r0, r2, #26
 80014ea:	d531      	bpl.n	8001550 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80014ec:	4b9c      	ldr	r3, [pc, #624]	; (8001760 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80014ee:	4f9d      	ldr	r7, [pc, #628]	; (8001764 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
    __HAL_RCC_PWR_CLK_ENABLE();
 80014f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014f2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80014f6:	641a      	str	r2, [r3, #64]	; 0x40
 80014f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014fe:	9301      	str	r3, [sp, #4]
 8001500:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001508:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800150a:	f7ff f8ad 	bl	8000668 <HAL_GetTick>
 800150e:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	05d9      	lsls	r1, r3, #23
 8001514:	f140 818c 	bpl.w	8001830 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001518:	4f91      	ldr	r7, [pc, #580]	; (8001760 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800151a:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800151c:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001520:	f040 8191 	bne.w	8001846 <HAL_RCCEx_PeriphCLKConfig+0x3de>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001524:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001526:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800152a:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800152e:	4a8c      	ldr	r2, [pc, #560]	; (8001760 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001530:	f040 81af 	bne.w	8001892 <HAL_RCCEx_PeriphCLKConfig+0x42a>
 8001534:	6891      	ldr	r1, [r2, #8]
 8001536:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 800153a:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 800153e:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8001542:	4301      	orrs	r1, r0
 8001544:	6091      	str	r1, [r2, #8]
 8001546:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800154a:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800154c:	430b      	orrs	r3, r1
 800154e:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001550:	6823      	ldr	r3, [r4, #0]
 8001552:	06df      	lsls	r7, r3, #27
 8001554:	d50c      	bpl.n	8001570 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001556:	4a82      	ldr	r2, [pc, #520]	; (8001760 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001558:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 800155c:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8001560:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 8001564:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8001568:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800156a:	4301      	orrs	r1, r0
 800156c:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001570:	0458      	lsls	r0, r3, #17
 8001572:	d508      	bpl.n	8001586 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001574:	497a      	ldr	r1, [pc, #488]	; (8001760 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001576:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8001578:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800157c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001580:	4302      	orrs	r2, r0
 8001582:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001586:	0419      	lsls	r1, r3, #16
 8001588:	d508      	bpl.n	800159c <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800158a:	4975      	ldr	r1, [pc, #468]	; (8001760 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800158c:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800158e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001592:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8001596:	4302      	orrs	r2, r0
 8001598:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800159c:	03da      	lsls	r2, r3, #15
 800159e:	d508      	bpl.n	80015b2 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80015a0:	496f      	ldr	r1, [pc, #444]	; (8001760 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80015a2:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80015a4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80015a8:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80015ac:	4302      	orrs	r2, r0
 80015ae:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80015b2:	039f      	lsls	r7, r3, #14
 80015b4:	d508      	bpl.n	80015c8 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80015b6:	496a      	ldr	r1, [pc, #424]	; (8001760 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80015b8:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80015ba:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80015be:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 80015c2:	4302      	orrs	r2, r0
 80015c4:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80015c8:	0658      	lsls	r0, r3, #25
 80015ca:	d508      	bpl.n	80015de <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80015cc:	4964      	ldr	r1, [pc, #400]	; (8001760 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80015ce:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80015d0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80015d4:	f022 0203 	bic.w	r2, r2, #3
 80015d8:	4302      	orrs	r2, r0
 80015da:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80015de:	0619      	lsls	r1, r3, #24
 80015e0:	d508      	bpl.n	80015f4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80015e2:	495f      	ldr	r1, [pc, #380]	; (8001760 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80015e4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80015e6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80015ea:	f022 020c 	bic.w	r2, r2, #12
 80015ee:	4302      	orrs	r2, r0
 80015f0:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80015f4:	05da      	lsls	r2, r3, #23
 80015f6:	d508      	bpl.n	800160a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80015f8:	4959      	ldr	r1, [pc, #356]	; (8001760 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80015fa:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80015fc:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001600:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8001604:	4302      	orrs	r2, r0
 8001606:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800160a:	059f      	lsls	r7, r3, #22
 800160c:	d508      	bpl.n	8001620 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800160e:	4954      	ldr	r1, [pc, #336]	; (8001760 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001610:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8001612:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001616:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800161a:	4302      	orrs	r2, r0
 800161c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001620:	0558      	lsls	r0, r3, #21
 8001622:	d508      	bpl.n	8001636 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001624:	494e      	ldr	r1, [pc, #312]	; (8001760 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001626:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001628:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800162c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001630:	4302      	orrs	r2, r0
 8001632:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001636:	0519      	lsls	r1, r3, #20
 8001638:	d508      	bpl.n	800164c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800163a:	4949      	ldr	r1, [pc, #292]	; (8001760 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800163c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800163e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001642:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001646:	4302      	orrs	r2, r0
 8001648:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800164c:	04da      	lsls	r2, r3, #19
 800164e:	d508      	bpl.n	8001662 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001650:	4943      	ldr	r1, [pc, #268]	; (8001760 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001652:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8001654:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001658:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800165c:	4302      	orrs	r2, r0
 800165e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001662:	049f      	lsls	r7, r3, #18
 8001664:	d508      	bpl.n	8001678 <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001666:	493e      	ldr	r1, [pc, #248]	; (8001760 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001668:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800166a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800166e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8001672:	4302      	orrs	r2, r0
 8001674:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001678:	0258      	lsls	r0, r3, #9
 800167a:	d508      	bpl.n	800168e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800167c:	4938      	ldr	r1, [pc, #224]	; (8001760 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800167e:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8001680:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001684:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8001688:	4302      	orrs	r2, r0
 800168a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800168e:	0299      	lsls	r1, r3, #10
 8001690:	d50c      	bpl.n	80016ac <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001692:	4833      	ldr	r0, [pc, #204]	; (8001760 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001694:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8001696:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 800169a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800169e:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 80016a2:	bf08      	it	eq
 80016a4:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80016a6:	430a      	orrs	r2, r1
 80016a8:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 80016ac:	f013 0f08 	tst.w	r3, #8
 80016b0:	bf18      	it	ne
 80016b2:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80016b4:	035a      	lsls	r2, r3, #13
 80016b6:	d508      	bpl.n	80016ca <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80016b8:	4929      	ldr	r1, [pc, #164]	; (8001760 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80016ba:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80016bc:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80016c0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80016c4:	4302      	orrs	r2, r0
 80016c6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80016ca:	021f      	lsls	r7, r3, #8
 80016cc:	d509      	bpl.n	80016e2 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80016ce:	4924      	ldr	r1, [pc, #144]	; (8001760 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80016d0:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 80016d4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80016d8:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80016dc:	4302      	orrs	r2, r0
 80016de:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80016e2:	0158      	lsls	r0, r3, #5
 80016e4:	d509      	bpl.n	80016fa <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80016e6:	491e      	ldr	r1, [pc, #120]	; (8001760 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80016e8:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 80016ec:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80016f0:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80016f4:	4302      	orrs	r2, r0
 80016f6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80016fa:	0119      	lsls	r1, r3, #4
 80016fc:	d509      	bpl.n	8001712 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80016fe:	4918      	ldr	r1, [pc, #96]	; (8001760 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001700:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8001704:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8001708:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 800170c:	4302      	orrs	r2, r0
 800170e:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8001712:	00da      	lsls	r2, r3, #3
 8001714:	d509      	bpl.n	800172a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8001716:	4912      	ldr	r1, [pc, #72]	; (8001760 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001718:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 800171c:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8001720:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8001724:	4302      	orrs	r2, r0
 8001726:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800172a:	2e01      	cmp	r6, #1
 800172c:	f000 80b5 	beq.w	800189a <HAL_RCCEx_PeriphCLKConfig+0x432>
 8001730:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001734:	f000 80b1 	beq.w	800189a <HAL_RCCEx_PeriphCLKConfig+0x432>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8001738:	2d01      	cmp	r5, #1
 800173a:	d175      	bne.n	8001828 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800173c:	4d08      	ldr	r5, [pc, #32]	; (8001760 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800173e:	682b      	ldr	r3, [r5, #0]
 8001740:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001744:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001746:	f7fe ff8f 	bl	8000668 <HAL_GetTick>
 800174a:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800174c:	682b      	ldr	r3, [r5, #0]
 800174e:	009f      	lsls	r7, r3, #2
 8001750:	f100 8127 	bmi.w	80019a2 <HAL_RCCEx_PeriphCLKConfig+0x53a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8001754:	6821      	ldr	r1, [r4, #0]
 8001756:	030e      	lsls	r6, r1, #12
 8001758:	d506      	bpl.n	8001768 <HAL_RCCEx_PeriphCLKConfig+0x300>
 800175a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800175c:	b143      	cbz	r3, 8001770 <HAL_RCCEx_PeriphCLKConfig+0x308>
 800175e:	e003      	b.n	8001768 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8001760:	40023800 	.word	0x40023800
 8001764:	40007000 	.word	0x40007000
 8001768:	02cd      	lsls	r5, r1, #11
 800176a:	d51d      	bpl.n	80017a8 <HAL_RCCEx_PeriphCLKConfig+0x340>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800176c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800176e:	b9db      	cbnz	r3, 80017a8 <HAL_RCCEx_PeriphCLKConfig+0x340>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8001770:	4a93      	ldr	r2, [pc, #588]	; (80019c0 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001772:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001776:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800177a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800177e:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8001782:	4303      	orrs	r3, r0
 8001784:	6960      	ldr	r0, [r4, #20]
 8001786:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800178a:	69a0      	ldr	r0, [r4, #24]
 800178c:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8001790:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001794:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001798:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800179a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 800179e:	3801      	subs	r0, #1
 80017a0:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80017a4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80017a8:	0288      	lsls	r0, r1, #10
 80017aa:	d515      	bpl.n	80017d8 <HAL_RCCEx_PeriphCLKConfig+0x370>
 80017ac:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80017ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80017b2:	d111      	bne.n	80017d8 <HAL_RCCEx_PeriphCLKConfig+0x370>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80017b4:	4a82      	ldr	r2, [pc, #520]	; (80019c0 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 80017b6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80017ba:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80017be:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80017c2:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 80017c6:	4303      	orrs	r3, r0
 80017c8:	6960      	ldr	r0, [r4, #20]
 80017ca:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80017ce:	6a20      	ldr	r0, [r4, #32]
 80017d0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80017d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80017d8:	070a      	lsls	r2, r1, #28
 80017da:	d519      	bpl.n	8001810 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80017dc:	4978      	ldr	r1, [pc, #480]	; (80019c0 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 80017de:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80017e2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80017e6:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 80017ea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017ee:	4313      	orrs	r3, r2
 80017f0:	6962      	ldr	r2, [r4, #20]
 80017f2:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80017f6:	69e2      	ldr	r2, [r4, #28]
 80017f8:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80017fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8001800:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
 8001804:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001806:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800180a:	4313      	orrs	r3, r2
 800180c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001810:	4c6b      	ldr	r4, [pc, #428]	; (80019c0 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001812:	6823      	ldr	r3, [r4, #0]
 8001814:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001818:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800181a:	f7fe ff25 	bl	8000668 <HAL_GetTick>
 800181e:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001820:	6823      	ldr	r3, [r4, #0]
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	f140 80c4 	bpl.w	80019b0 <HAL_RCCEx_PeriphCLKConfig+0x548>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001828:	2000      	movs	r0, #0
 800182a:	e009      	b.n	8001840 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
      plli2sused = 1;
 800182c:	2601      	movs	r6, #1
 800182e:	e657      	b.n	80014e0 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001830:	f7fe ff1a 	bl	8000668 <HAL_GetTick>
 8001834:	eba0 0008 	sub.w	r0, r0, r8
 8001838:	2864      	cmp	r0, #100	; 0x64
 800183a:	f67f ae69 	bls.w	8001510 <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 800183e:	2003      	movs	r0, #3
}
 8001840:	b003      	add	sp, #12
 8001842:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001846:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001848:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800184c:	4293      	cmp	r3, r2
 800184e:	f43f ae69 	beq.w	8001524 <HAL_RCCEx_PeriphCLKConfig+0xbc>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001852:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8001854:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001856:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 800185a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800185e:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001860:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001862:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001866:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8001868:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800186a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800186c:	07da      	lsls	r2, r3, #31
 800186e:	f57f ae59 	bpl.w	8001524 <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 8001872:	f7fe fef9 	bl	8000668 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001876:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800187a:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800187c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800187e:	079b      	lsls	r3, r3, #30
 8001880:	f53f ae50 	bmi.w	8001524 <HAL_RCCEx_PeriphCLKConfig+0xbc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001884:	f7fe fef0 	bl	8000668 <HAL_GetTick>
 8001888:	eba0 0008 	sub.w	r0, r0, r8
 800188c:	4548      	cmp	r0, r9
 800188e:	d9f5      	bls.n	800187c <HAL_RCCEx_PeriphCLKConfig+0x414>
 8001890:	e7d5      	b.n	800183e <HAL_RCCEx_PeriphCLKConfig+0x3d6>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001892:	6891      	ldr	r1, [r2, #8]
 8001894:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8001898:	e654      	b.n	8001544 <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_PLLI2S_DISABLE();
 800189a:	4e49      	ldr	r6, [pc, #292]	; (80019c0 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 800189c:	6833      	ldr	r3, [r6, #0]
 800189e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80018a2:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80018a4:	f7fe fee0 	bl	8000668 <HAL_GetTick>
 80018a8:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80018aa:	6833      	ldr	r3, [r6, #0]
 80018ac:	011b      	lsls	r3, r3, #4
 80018ae:	d472      	bmi.n	8001996 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80018b0:	6822      	ldr	r2, [r4, #0]
 80018b2:	07d7      	lsls	r7, r2, #31
 80018b4:	d512      	bpl.n	80018dc <HAL_RCCEx_PeriphCLKConfig+0x474>
 80018b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80018b8:	b983      	cbnz	r3, 80018dc <HAL_RCCEx_PeriphCLKConfig+0x474>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80018ba:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80018be:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80018c2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018c6:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 80018ca:	430b      	orrs	r3, r1
 80018cc:	6861      	ldr	r1, [r4, #4]
 80018ce:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 80018d2:	68a1      	ldr	r1, [r4, #8]
 80018d4:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 80018d8:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80018dc:	0316      	lsls	r6, r2, #12
 80018de:	d503      	bpl.n	80018e8 <HAL_RCCEx_PeriphCLKConfig+0x480>
 80018e0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80018e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80018e6:	d005      	beq.n	80018f4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80018e8:	02d0      	lsls	r0, r2, #11
 80018ea:	d51e      	bpl.n	800192a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80018ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80018ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80018f2:	d11a      	bne.n	800192a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80018f4:	4932      	ldr	r1, [pc, #200]	; (80019c0 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 80018f6:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80018fa:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80018fe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001902:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8001906:	4303      	orrs	r3, r0
 8001908:	6860      	ldr	r0, [r4, #4]
 800190a:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800190e:	68e0      	ldr	r0, [r4, #12]
 8001910:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8001914:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001918:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 800191c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800191e:	f020 001f 	bic.w	r0, r0, #31
 8001922:	3b01      	subs	r3, #1
 8001924:	4303      	orrs	r3, r0
 8001926:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800192a:	01d1      	lsls	r1, r2, #7
 800192c:	d511      	bpl.n	8001952 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800192e:	4924      	ldr	r1, [pc, #144]	; (80019c0 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001930:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001934:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8001938:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 800193c:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8001940:	4303      	orrs	r3, r0
 8001942:	6860      	ldr	r0, [r4, #4]
 8001944:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001948:	6920      	ldr	r0, [r4, #16]
 800194a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800194e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001952:	0192      	lsls	r2, r2, #6
 8001954:	d50d      	bpl.n	8001972 <HAL_RCCEx_PeriphCLKConfig+0x50a>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001956:	6923      	ldr	r3, [r4, #16]
 8001958:	6862      	ldr	r2, [r4, #4]
 800195a:	041b      	lsls	r3, r3, #16
 800195c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001960:	68e2      	ldr	r2, [r4, #12]
 8001962:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001966:	68a2      	ldr	r2, [r4, #8]
 8001968:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 800196c:	4a14      	ldr	r2, [pc, #80]	; (80019c0 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 800196e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8001972:	4e13      	ldr	r6, [pc, #76]	; (80019c0 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001974:	6833      	ldr	r3, [r6, #0]
 8001976:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800197a:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800197c:	f7fe fe74 	bl	8000668 <HAL_GetTick>
 8001980:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001982:	6833      	ldr	r3, [r6, #0]
 8001984:	011b      	lsls	r3, r3, #4
 8001986:	f53f aed7 	bmi.w	8001738 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800198a:	f7fe fe6d 	bl	8000668 <HAL_GetTick>
 800198e:	1bc0      	subs	r0, r0, r7
 8001990:	2864      	cmp	r0, #100	; 0x64
 8001992:	d9f6      	bls.n	8001982 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8001994:	e753      	b.n	800183e <HAL_RCCEx_PeriphCLKConfig+0x3d6>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001996:	f7fe fe67 	bl	8000668 <HAL_GetTick>
 800199a:	1bc0      	subs	r0, r0, r7
 800199c:	2864      	cmp	r0, #100	; 0x64
 800199e:	d984      	bls.n	80018aa <HAL_RCCEx_PeriphCLKConfig+0x442>
 80019a0:	e74d      	b.n	800183e <HAL_RCCEx_PeriphCLKConfig+0x3d6>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80019a2:	f7fe fe61 	bl	8000668 <HAL_GetTick>
 80019a6:	1b80      	subs	r0, r0, r6
 80019a8:	2864      	cmp	r0, #100	; 0x64
 80019aa:	f67f aecf 	bls.w	800174c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 80019ae:	e746      	b.n	800183e <HAL_RCCEx_PeriphCLKConfig+0x3d6>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80019b0:	f7fe fe5a 	bl	8000668 <HAL_GetTick>
 80019b4:	1b40      	subs	r0, r0, r5
 80019b6:	2864      	cmp	r0, #100	; 0x64
 80019b8:	f67f af32 	bls.w	8001820 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
 80019bc:	e73f      	b.n	800183e <HAL_RCCEx_PeriphCLKConfig+0x3d6>
 80019be:	bf00      	nop
 80019c0:	40023800 	.word	0x40023800

080019c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80019c4:	b538      	push	{r3, r4, r5, lr}
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80019c6:	69c2      	ldr	r2, [r0, #28]
{
 80019c8:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80019ca:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80019cc:	6881      	ldr	r1, [r0, #8]
 80019ce:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80019d0:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80019d2:	4301      	orrs	r1, r0
 80019d4:	6960      	ldr	r0, [r4, #20]
 80019d6:	4301      	orrs	r1, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80019d8:	4890      	ldr	r0, [pc, #576]	; (8001c1c <UART_SetConfig+0x258>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80019da:	4311      	orrs	r1, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80019dc:	4028      	ands	r0, r5
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  tmpreg |= huart->Init.OneBitSampling;
 80019de:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80019e0:	4301      	orrs	r1, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80019e2:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80019e4:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80019e6:	6859      	ldr	r1, [r3, #4]
 80019e8:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 80019ec:	4301      	orrs	r1, r0
 80019ee:	6059      	str	r1, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80019f0:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80019f2:	6898      	ldr	r0, [r3, #8]
  tmpreg |= huart->Init.OneBitSampling;
 80019f4:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80019f6:	f420 6030 	bic.w	r0, r0, #2816	; 0xb00
 80019fa:	4301      	orrs	r1, r0
 80019fc:	6099      	str	r1, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80019fe:	4988      	ldr	r1, [pc, #544]	; (8001c20 <UART_SetConfig+0x25c>)
 8001a00:	428b      	cmp	r3, r1
 8001a02:	d117      	bne.n	8001a34 <UART_SetConfig+0x70>
 8001a04:	4b87      	ldr	r3, [pc, #540]	; (8001c24 <UART_SetConfig+0x260>)
 8001a06:	4988      	ldr	r1, [pc, #544]	; (8001c28 <UART_SetConfig+0x264>)
 8001a08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a0c:	f003 0303 	and.w	r3, r3, #3

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001a10:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001a14:	5ccb      	ldrb	r3, [r1, r3]
 8001a16:	d129      	bne.n	8001a6c <UART_SetConfig+0xa8>
  {
    switch (clocksource)
 8001a18:	2b08      	cmp	r3, #8
 8001a1a:	f200 809d 	bhi.w	8001b58 <UART_SetConfig+0x194>
 8001a1e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8001a22:	008c      	.short	0x008c
 8001a24:	00ee00e8 	.word	0x00ee00e8
 8001a28:	00fa009b 	.word	0x00fa009b
 8001a2c:	009b009b 	.word	0x009b009b
 8001a30:	0076009b 	.word	0x0076009b
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001a34:	497d      	ldr	r1, [pc, #500]	; (8001c2c <UART_SetConfig+0x268>)
 8001a36:	428b      	cmp	r3, r1
 8001a38:	d106      	bne.n	8001a48 <UART_SetConfig+0x84>
 8001a3a:	4b7a      	ldr	r3, [pc, #488]	; (8001c24 <UART_SetConfig+0x260>)
 8001a3c:	497c      	ldr	r1, [pc, #496]	; (8001c30 <UART_SetConfig+0x26c>)
 8001a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a42:	f003 030c 	and.w	r3, r3, #12
 8001a46:	e7e3      	b.n	8001a10 <UART_SetConfig+0x4c>
 8001a48:	497a      	ldr	r1, [pc, #488]	; (8001c34 <UART_SetConfig+0x270>)
 8001a4a:	428b      	cmp	r3, r1
 8001a4c:	d11d      	bne.n	8001a8a <UART_SetConfig+0xc6>
 8001a4e:	4b75      	ldr	r3, [pc, #468]	; (8001c24 <UART_SetConfig+0x260>)
 8001a50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a54:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001a58:	2b10      	cmp	r3, #16
 8001a5a:	f000 80d9 	beq.w	8001c10 <UART_SetConfig+0x24c>
 8001a5e:	d80e      	bhi.n	8001a7e <UART_SetConfig+0xba>
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d067      	beq.n	8001b34 <UART_SetConfig+0x170>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001a64:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001a68:	d076      	beq.n	8001b58 <UART_SetConfig+0x194>
 8001a6a:	2310      	movs	r3, #16
      ret = HAL_ERROR;
    }
  }
  else
  {
    switch (clocksource)
 8001a6c:	2b08      	cmp	r3, #8
 8001a6e:	d873      	bhi.n	8001b58 <UART_SetConfig+0x194>
 8001a70:	e8df f003 	tbb	[pc, r3]
 8001a74:	72a29f99 	.word	0x72a29f99
 8001a78:	727272b4 	.word	0x727272b4
 8001a7c:	b7          	.byte	0xb7
 8001a7d:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001a7e:	2b20      	cmp	r3, #32
 8001a80:	f000 80ba 	beq.w	8001bf8 <UART_SetConfig+0x234>
 8001a84:	2b30      	cmp	r3, #48	; 0x30
 8001a86:	d03f      	beq.n	8001b08 <UART_SetConfig+0x144>
 8001a88:	e7ec      	b.n	8001a64 <UART_SetConfig+0xa0>
 8001a8a:	496b      	ldr	r1, [pc, #428]	; (8001c38 <UART_SetConfig+0x274>)
 8001a8c:	428b      	cmp	r3, r1
 8001a8e:	d10d      	bne.n	8001aac <UART_SetConfig+0xe8>
 8001a90:	4b64      	ldr	r3, [pc, #400]	; (8001c24 <UART_SetConfig+0x260>)
 8001a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a96:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001a9a:	2b40      	cmp	r3, #64	; 0x40
 8001a9c:	f000 80b8 	beq.w	8001c10 <UART_SetConfig+0x24c>
 8001aa0:	d9de      	bls.n	8001a60 <UART_SetConfig+0x9c>
 8001aa2:	2b80      	cmp	r3, #128	; 0x80
 8001aa4:	f000 80a8 	beq.w	8001bf8 <UART_SetConfig+0x234>
 8001aa8:	2bc0      	cmp	r3, #192	; 0xc0
 8001aaa:	e7ec      	b.n	8001a86 <UART_SetConfig+0xc2>
 8001aac:	4963      	ldr	r1, [pc, #396]	; (8001c3c <UART_SetConfig+0x278>)
 8001aae:	428b      	cmp	r3, r1
 8001ab0:	d110      	bne.n	8001ad4 <UART_SetConfig+0x110>
 8001ab2:	4b5c      	ldr	r3, [pc, #368]	; (8001c24 <UART_SetConfig+0x260>)
 8001ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ab8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001abc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ac0:	f000 80a6 	beq.w	8001c10 <UART_SetConfig+0x24c>
 8001ac4:	d9cc      	bls.n	8001a60 <UART_SetConfig+0x9c>
 8001ac6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001aca:	f000 8095 	beq.w	8001bf8 <UART_SetConfig+0x234>
 8001ace:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001ad2:	e7d8      	b.n	8001a86 <UART_SetConfig+0xc2>
 8001ad4:	495a      	ldr	r1, [pc, #360]	; (8001c40 <UART_SetConfig+0x27c>)
 8001ad6:	428b      	cmp	r3, r1
 8001ad8:	d11e      	bne.n	8001b18 <UART_SetConfig+0x154>
 8001ada:	4b52      	ldr	r3, [pc, #328]	; (8001c24 <UART_SetConfig+0x260>)
 8001adc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ae0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001ae4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ae8:	f000 8092 	beq.w	8001c10 <UART_SetConfig+0x24c>
 8001aec:	d806      	bhi.n	8001afc <UART_SetConfig+0x138>
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d07c      	beq.n	8001bec <UART_SetConfig+0x228>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001af2:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001af6:	d12f      	bne.n	8001b58 <UART_SetConfig+0x194>
 8001af8:	2310      	movs	r3, #16
 8001afa:	e78d      	b.n	8001a18 <UART_SetConfig+0x54>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001afc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001b00:	d07a      	beq.n	8001bf8 <UART_SetConfig+0x234>
 8001b02:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8001b06:	d1f4      	bne.n	8001af2 <UART_SetConfig+0x12e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001b08:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001b0c:	d169      	bne.n	8001be2 <UART_SetConfig+0x21e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001b0e:	6863      	ldr	r3, [r4, #4]
 8001b10:	0858      	lsrs	r0, r3, #1
 8001b12:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 8001b16:	e078      	b.n	8001c0a <UART_SetConfig+0x246>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001b18:	494a      	ldr	r1, [pc, #296]	; (8001c44 <UART_SetConfig+0x280>)
 8001b1a:	428b      	cmp	r3, r1
 8001b1c:	d124      	bne.n	8001b68 <UART_SetConfig+0x1a4>
 8001b1e:	4b41      	ldr	r3, [pc, #260]	; (8001c24 <UART_SetConfig+0x260>)
 8001b20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b24:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001b28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b2c:	d070      	beq.n	8001c10 <UART_SetConfig+0x24c>
 8001b2e:	d815      	bhi.n	8001b5c <UART_SetConfig+0x198>
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d1de      	bne.n	8001af2 <UART_SetConfig+0x12e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001b34:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001b38:	d135      	bne.n	8001ba6 <UART_SetConfig+0x1e2>
        pclk = HAL_RCC_GetPCLK1Freq();
 8001b3a:	f7ff fc75 	bl	8001428 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001b3e:	6862      	ldr	r2, [r4, #4]
 8001b40:	0853      	lsrs	r3, r2, #1
 8001b42:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8001b46:	fbb0 f0f2 	udiv	r0, r0, r2
 8001b4a:	b280      	uxth	r0, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001b4c:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8001b50:	f1a0 0210 	sub.w	r2, r0, #16
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d91a      	bls.n	8001b8e <UART_SetConfig+0x1ca>
    {
      huart->Instance->BRR = usartdiv;
    }
    else
    {
      ret = HAL_ERROR;
 8001b58:	2001      	movs	r0, #1
 8001b5a:	e020      	b.n	8001b9e <UART_SetConfig+0x1da>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001b5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b60:	d04a      	beq.n	8001bf8 <UART_SetConfig+0x234>
 8001b62:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001b66:	e7ce      	b.n	8001b06 <UART_SetConfig+0x142>
 8001b68:	4937      	ldr	r1, [pc, #220]	; (8001c48 <UART_SetConfig+0x284>)
 8001b6a:	428b      	cmp	r3, r1
 8001b6c:	d1f4      	bne.n	8001b58 <UART_SetConfig+0x194>
 8001b6e:	4b2d      	ldr	r3, [pc, #180]	; (8001c24 <UART_SetConfig+0x260>)
 8001b70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b74:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001b78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001b7c:	d048      	beq.n	8001c10 <UART_SetConfig+0x24c>
 8001b7e:	f67f af6f 	bls.w	8001a60 <UART_SetConfig+0x9c>
 8001b82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b86:	d037      	beq.n	8001bf8 <UART_SetConfig+0x234>
 8001b88:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001b8c:	e77b      	b.n	8001a86 <UART_SetConfig+0xc2>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001b8e:	f020 030f 	bic.w	r3, r0, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001b92:	f3c0 0042 	ubfx	r0, r0, #1, #3
      huart->Instance->BRR = brrtemp;
 8001b96:	6822      	ldr	r2, [r4, #0]
 8001b98:	4318      	orrs	r0, r3
 8001b9a:	60d0      	str	r0, [r2, #12]
 8001b9c:	2000      	movs	r0, #0
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8001ba2:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 8001ba4:	bd38      	pop	{r3, r4, r5, pc}
        pclk = HAL_RCC_GetPCLK1Freq();
 8001ba6:	f7ff fc3f 	bl	8001428 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001baa:	6863      	ldr	r3, [r4, #4]
 8001bac:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8001bb0:	e008      	b.n	8001bc4 <UART_SetConfig+0x200>
        pclk = HAL_RCC_GetPCLK2Freq();
 8001bb2:	f7ff fc49 	bl	8001448 <HAL_RCC_GetPCLK2Freq>
 8001bb6:	e7f8      	b.n	8001baa <UART_SetConfig+0x1e6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001bb8:	6863      	ldr	r3, [r4, #4]
 8001bba:	0858      	lsrs	r0, r3, #1
 8001bbc:	f500 0074 	add.w	r0, r0, #15990784	; 0xf40000
 8001bc0:	f500 5010 	add.w	r0, r0, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001bc4:	fbb0 f0f3 	udiv	r0, r0, r3
 8001bc8:	b280      	uxth	r0, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001bca:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8001bce:	f1a0 0210 	sub.w	r2, r0, #16
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d8c0      	bhi.n	8001b58 <UART_SetConfig+0x194>
      huart->Instance->BRR = usartdiv;
 8001bd6:	6823      	ldr	r3, [r4, #0]
 8001bd8:	60d8      	str	r0, [r3, #12]
 8001bda:	e7df      	b.n	8001b9c <UART_SetConfig+0x1d8>
        pclk = HAL_RCC_GetSysClockFreq();
 8001bdc:	f7ff fb50 	bl	8001280 <HAL_RCC_GetSysClockFreq>
 8001be0:	e7e3      	b.n	8001baa <UART_SetConfig+0x1e6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001be2:	6863      	ldr	r3, [r4, #4]
 8001be4:	0858      	lsrs	r0, r3, #1
 8001be6:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
 8001bea:	e7eb      	b.n	8001bc4 <UART_SetConfig+0x200>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001bec:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001bf0:	d1df      	bne.n	8001bb2 <UART_SetConfig+0x1ee>
        pclk = HAL_RCC_GetPCLK2Freq();
 8001bf2:	f7ff fc29 	bl	8001448 <HAL_RCC_GetPCLK2Freq>
 8001bf6:	e7a2      	b.n	8001b3e <UART_SetConfig+0x17a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001bf8:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001bfc:	d1dc      	bne.n	8001bb8 <UART_SetConfig+0x1f4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001bfe:	6863      	ldr	r3, [r4, #4]
 8001c00:	0858      	lsrs	r0, r3, #1
 8001c02:	f100 70f4 	add.w	r0, r0, #31981568	; 0x1e80000
 8001c06:	f500 4090 	add.w	r0, r0, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001c0a:	fbb0 f0f3 	udiv	r0, r0, r3
 8001c0e:	e79c      	b.n	8001b4a <UART_SetConfig+0x186>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001c10:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001c14:	d1e2      	bne.n	8001bdc <UART_SetConfig+0x218>
        pclk = HAL_RCC_GetSysClockFreq();
 8001c16:	f7ff fb33 	bl	8001280 <HAL_RCC_GetSysClockFreq>
 8001c1a:	e790      	b.n	8001b3e <UART_SetConfig+0x17a>
 8001c1c:	efff69f3 	.word	0xefff69f3
 8001c20:	40011000 	.word	0x40011000
 8001c24:	40023800 	.word	0x40023800
 8001c28:	08004454 	.word	0x08004454
 8001c2c:	40004400 	.word	0x40004400
 8001c30:	08004458 	.word	0x08004458
 8001c34:	40004800 	.word	0x40004800
 8001c38:	40004c00 	.word	0x40004c00
 8001c3c:	40005000 	.word	0x40005000
 8001c40:	40011400 	.word	0x40011400
 8001c44:	40007800 	.word	0x40007800
 8001c48:	40007c00 	.word	0x40007c00

08001c4c <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001c4c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001c4e:	07da      	lsls	r2, r3, #31
{
 8001c50:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001c52:	d506      	bpl.n	8001c62 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001c54:	6801      	ldr	r1, [r0, #0]
 8001c56:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001c58:	684a      	ldr	r2, [r1, #4]
 8001c5a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001c5e:	4322      	orrs	r2, r4
 8001c60:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001c62:	079c      	lsls	r4, r3, #30
 8001c64:	d506      	bpl.n	8001c74 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001c66:	6801      	ldr	r1, [r0, #0]
 8001c68:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001c6a:	684a      	ldr	r2, [r1, #4]
 8001c6c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001c70:	4322      	orrs	r2, r4
 8001c72:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001c74:	0759      	lsls	r1, r3, #29
 8001c76:	d506      	bpl.n	8001c86 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001c78:	6801      	ldr	r1, [r0, #0]
 8001c7a:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001c7c:	684a      	ldr	r2, [r1, #4]
 8001c7e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001c82:	4322      	orrs	r2, r4
 8001c84:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001c86:	071a      	lsls	r2, r3, #28
 8001c88:	d506      	bpl.n	8001c98 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001c8a:	6801      	ldr	r1, [r0, #0]
 8001c8c:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001c8e:	684a      	ldr	r2, [r1, #4]
 8001c90:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c94:	4322      	orrs	r2, r4
 8001c96:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001c98:	06dc      	lsls	r4, r3, #27
 8001c9a:	d506      	bpl.n	8001caa <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001c9c:	6801      	ldr	r1, [r0, #0]
 8001c9e:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001ca0:	688a      	ldr	r2, [r1, #8]
 8001ca2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001ca6:	4322      	orrs	r2, r4
 8001ca8:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001caa:	0699      	lsls	r1, r3, #26
 8001cac:	d506      	bpl.n	8001cbc <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001cae:	6801      	ldr	r1, [r0, #0]
 8001cb0:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001cb2:	688a      	ldr	r2, [r1, #8]
 8001cb4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001cb8:	4322      	orrs	r2, r4
 8001cba:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001cbc:	065a      	lsls	r2, r3, #25
 8001cbe:	d510      	bpl.n	8001ce2 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001cc0:	6801      	ldr	r1, [r0, #0]
 8001cc2:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001cc4:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001cc6:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001cca:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8001cce:	ea42 0204 	orr.w	r2, r2, r4
 8001cd2:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001cd4:	d105      	bne.n	8001ce2 <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001cd6:	684a      	ldr	r2, [r1, #4]
 8001cd8:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001cda:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8001cde:	4322      	orrs	r2, r4
 8001ce0:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001ce2:	061b      	lsls	r3, r3, #24
 8001ce4:	d506      	bpl.n	8001cf4 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001ce6:	6802      	ldr	r2, [r0, #0]
 8001ce8:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001cea:	6853      	ldr	r3, [r2, #4]
 8001cec:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001cf0:	430b      	orrs	r3, r1
 8001cf2:	6053      	str	r3, [r2, #4]
 8001cf4:	bd10      	pop	{r4, pc}

08001cf6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8001cf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001cfa:	9d06      	ldr	r5, [sp, #24]
 8001cfc:	4604      	mov	r4, r0
 8001cfe:	460f      	mov	r7, r1
 8001d00:	4616      	mov	r6, r2
 8001d02:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d04:	6821      	ldr	r1, [r4, #0]
 8001d06:	69ca      	ldr	r2, [r1, #28]
 8001d08:	ea37 0302 	bics.w	r3, r7, r2
 8001d0c:	bf0c      	ite	eq
 8001d0e:	2201      	moveq	r2, #1
 8001d10:	2200      	movne	r2, #0
 8001d12:	42b2      	cmp	r2, r6
 8001d14:	d002      	beq.n	8001d1c <UART_WaitOnFlagUntilTimeout+0x26>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8001d16:	2000      	movs	r0, #0
}
 8001d18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001d1c:	1c68      	adds	r0, r5, #1
 8001d1e:	d0f2      	beq.n	8001d06 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d20:	f7fe fca2 	bl	8000668 <HAL_GetTick>
 8001d24:	eba0 0008 	sub.w	r0, r0, r8
 8001d28:	4285      	cmp	r5, r0
 8001d2a:	6820      	ldr	r0, [r4, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001d2c:	6803      	ldr	r3, [r0, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d2e:	d300      	bcc.n	8001d32 <UART_WaitOnFlagUntilTimeout+0x3c>
 8001d30:	b97d      	cbnz	r5, 8001d52 <UART_WaitOnFlagUntilTimeout+0x5c>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001d32:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001d36:	6003      	str	r3, [r0, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d38:	6883      	ldr	r3, [r0, #8]
 8001d3a:	f023 0301 	bic.w	r3, r3, #1
 8001d3e:	6083      	str	r3, [r0, #8]
        huart->gState = HAL_UART_STATE_READY;
 8001d40:	2320      	movs	r3, #32
 8001d42:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8001d44:	67a3      	str	r3, [r4, #120]	; 0x78
          __HAL_UNLOCK(huart);
 8001d46:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 8001d48:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 8001d4a:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
          return HAL_TIMEOUT;
 8001d4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8001d52:	075a      	lsls	r2, r3, #29
 8001d54:	d5d6      	bpl.n	8001d04 <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001d56:	69c3      	ldr	r3, [r0, #28]
 8001d58:	051b      	lsls	r3, r3, #20
 8001d5a:	d5d3      	bpl.n	8001d04 <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001d5c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d60:	6203      	str	r3, [r0, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001d62:	6803      	ldr	r3, [r0, #0]
 8001d64:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001d68:	6003      	str	r3, [r0, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d6a:	6883      	ldr	r3, [r0, #8]
 8001d6c:	f023 0301 	bic.w	r3, r3, #1
 8001d70:	6083      	str	r3, [r0, #8]
          huart->gState = HAL_UART_STATE_READY;
 8001d72:	2320      	movs	r3, #32
 8001d74:	6763      	str	r3, [r4, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8001d76:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8001d78:	67e3      	str	r3, [r4, #124]	; 0x7c
 8001d7a:	e7e4      	b.n	8001d46 <UART_WaitOnFlagUntilTimeout+0x50>

08001d7c <HAL_UART_Transmit>:
{
 8001d7c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001d80:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8001d82:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 8001d84:	4604      	mov	r4, r0
 8001d86:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 8001d88:	2b20      	cmp	r3, #32
{
 8001d8a:	4691      	mov	r9, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8001d8c:	d14c      	bne.n	8001e28 <HAL_UART_Transmit+0xac>
    if ((pData == NULL) || (Size == 0U))
 8001d8e:	2900      	cmp	r1, #0
 8001d90:	d048      	beq.n	8001e24 <HAL_UART_Transmit+0xa8>
 8001d92:	2a00      	cmp	r2, #0
 8001d94:	d046      	beq.n	8001e24 <HAL_UART_Transmit+0xa8>
    __HAL_LOCK(huart);
 8001d96:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d044      	beq.n	8001e28 <HAL_UART_Transmit+0xac>
 8001d9e:	2301      	movs	r3, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001da0:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 8001da2:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001da6:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001da8:	67c5      	str	r5, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001daa:	6743      	str	r3, [r0, #116]	; 0x74
    tickstart = HAL_GetTick();
 8001dac:	f7fe fc5c 	bl	8000668 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001db0:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8001db2:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 8001db4:	f8a4 9050 	strh.w	r9, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001db8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferCount = Size;
 8001dbc:	f8a4 9052 	strh.w	r9, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001dc0:	d103      	bne.n	8001dca <HAL_UART_Transmit+0x4e>
 8001dc2:	6923      	ldr	r3, [r4, #16]
 8001dc4:	b90b      	cbnz	r3, 8001dca <HAL_UART_Transmit+0x4e>
 8001dc6:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8001dc8:	461e      	mov	r6, r3
    __HAL_UNLOCK(huart);
 8001dca:	2300      	movs	r3, #0
 8001dcc:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
    while (huart->TxXferCount > 0U)
 8001dd0:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001dd4:	463b      	mov	r3, r7
 8001dd6:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 8001dda:	b292      	uxth	r2, r2
 8001ddc:	b93a      	cbnz	r2, 8001dee <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001dde:	2140      	movs	r1, #64	; 0x40
 8001de0:	4620      	mov	r0, r4
 8001de2:	f7ff ff88 	bl	8001cf6 <UART_WaitOnFlagUntilTimeout>
 8001de6:	b940      	cbnz	r0, 8001dfa <HAL_UART_Transmit+0x7e>
    huart->gState = HAL_UART_STATE_READY;
 8001de8:	2320      	movs	r3, #32
 8001dea:	6763      	str	r3, [r4, #116]	; 0x74
    return HAL_OK;
 8001dec:	e006      	b.n	8001dfc <HAL_UART_Transmit+0x80>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001dee:	2200      	movs	r2, #0
 8001df0:	2180      	movs	r1, #128	; 0x80
 8001df2:	4620      	mov	r0, r4
 8001df4:	f7ff ff7f 	bl	8001cf6 <UART_WaitOnFlagUntilTimeout>
 8001df8:	b118      	cbz	r0, 8001e02 <HAL_UART_Transmit+0x86>
        return HAL_TIMEOUT;
 8001dfa:	2003      	movs	r0, #3
}
 8001dfc:	b003      	add	sp, #12
 8001dfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001e02:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8001e04:	b95e      	cbnz	r6, 8001e1e <HAL_UART_Transmit+0xa2>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001e06:	f835 3b02 	ldrh.w	r3, [r5], #2
 8001e0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001e0e:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8001e10:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8001e14:	3b01      	subs	r3, #1
 8001e16:	b29b      	uxth	r3, r3
 8001e18:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8001e1c:	e7d8      	b.n	8001dd0 <HAL_UART_Transmit+0x54>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001e1e:	f816 3b01 	ldrb.w	r3, [r6], #1
 8001e22:	e7f4      	b.n	8001e0e <HAL_UART_Transmit+0x92>
      return  HAL_ERROR;
 8001e24:	2001      	movs	r0, #1
 8001e26:	e7e9      	b.n	8001dfc <HAL_UART_Transmit+0x80>
    return HAL_BUSY;
 8001e28:	2002      	movs	r0, #2
 8001e2a:	e7e7      	b.n	8001dfc <HAL_UART_Transmit+0x80>

08001e2c <HAL_UART_Receive>:
{
 8001e2c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001e30:	4699      	mov	r9, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 8001e32:	6f83      	ldr	r3, [r0, #120]	; 0x78
{
 8001e34:	4604      	mov	r4, r0
 8001e36:	460d      	mov	r5, r1
  if (huart->RxState == HAL_UART_STATE_READY)
 8001e38:	2b20      	cmp	r3, #32
{
 8001e3a:	4616      	mov	r6, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 8001e3c:	d164      	bne.n	8001f08 <HAL_UART_Receive+0xdc>
    if ((pData == NULL) || (Size == 0U))
 8001e3e:	2900      	cmp	r1, #0
 8001e40:	d060      	beq.n	8001f04 <HAL_UART_Receive+0xd8>
 8001e42:	2a00      	cmp	r2, #0
 8001e44:	d05e      	beq.n	8001f04 <HAL_UART_Receive+0xd8>
    __HAL_LOCK(huart);
 8001e46:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d05c      	beq.n	8001f08 <HAL_UART_Receive+0xdc>
 8001e4e:	2301      	movs	r3, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e50:	2700      	movs	r7, #0
    __HAL_LOCK(huart);
 8001e52:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001e56:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e58:	67c7      	str	r7, [r0, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001e5a:	6783      	str	r3, [r0, #120]	; 0x78
    tickstart = HAL_GetTick();
 8001e5c:	f7fe fc04 	bl	8000668 <HAL_GetTick>
    UART_MASK_COMPUTATION(huart);
 8001e60:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8001e62:	4680      	mov	r8, r0
    huart->RxXferSize  = Size;
 8001e64:	f8a4 6058 	strh.w	r6, [r4, #88]	; 0x58
    UART_MASK_COMPUTATION(huart);
 8001e68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->RxXferCount = Size;
 8001e6c:	f8a4 605a 	strh.w	r6, [r4, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 8001e70:	d11c      	bne.n	8001eac <HAL_UART_Receive+0x80>
 8001e72:	6922      	ldr	r2, [r4, #16]
 8001e74:	b9c2      	cbnz	r2, 8001ea8 <HAL_UART_Receive+0x7c>
 8001e76:	f240 12ff 	movw	r2, #511	; 0x1ff
 8001e7a:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    uhMask = huart->Mask;
 8001e82:	f8b4 705c 	ldrh.w	r7, [r4, #92]	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e86:	d122      	bne.n	8001ece <HAL_UART_Receive+0xa2>
 8001e88:	6923      	ldr	r3, [r4, #16]
 8001e8a:	bb03      	cbnz	r3, 8001ece <HAL_UART_Receive+0xa2>
 8001e8c:	462e      	mov	r6, r5
      pdata8bits  = NULL;
 8001e8e:	461d      	mov	r5, r3
    __HAL_UNLOCK(huart);
 8001e90:	2300      	movs	r3, #0
 8001e92:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
    while (huart->RxXferCount > 0U)
 8001e96:	f8b4 005a 	ldrh.w	r0, [r4, #90]	; 0x5a
 8001e9a:	b280      	uxth	r0, r0
 8001e9c:	b9c8      	cbnz	r0, 8001ed2 <HAL_UART_Receive+0xa6>
    huart->RxState = HAL_UART_STATE_READY;
 8001e9e:	2320      	movs	r3, #32
 8001ea0:	67a3      	str	r3, [r4, #120]	; 0x78
}
 8001ea2:	b003      	add	sp, #12
 8001ea4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    UART_MASK_COMPUTATION(huart);
 8001ea8:	22ff      	movs	r2, #255	; 0xff
 8001eaa:	e7e6      	b.n	8001e7a <HAL_UART_Receive+0x4e>
 8001eac:	b923      	cbnz	r3, 8001eb8 <HAL_UART_Receive+0x8c>
 8001eae:	6922      	ldr	r2, [r4, #16]
 8001eb0:	2a00      	cmp	r2, #0
 8001eb2:	d0f9      	beq.n	8001ea8 <HAL_UART_Receive+0x7c>
 8001eb4:	227f      	movs	r2, #127	; 0x7f
 8001eb6:	e7e0      	b.n	8001e7a <HAL_UART_Receive+0x4e>
 8001eb8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001ebc:	d104      	bne.n	8001ec8 <HAL_UART_Receive+0x9c>
 8001ebe:	6922      	ldr	r2, [r4, #16]
 8001ec0:	2a00      	cmp	r2, #0
 8001ec2:	d0f7      	beq.n	8001eb4 <HAL_UART_Receive+0x88>
 8001ec4:	223f      	movs	r2, #63	; 0x3f
 8001ec6:	e7d8      	b.n	8001e7a <HAL_UART_Receive+0x4e>
 8001ec8:	f8a4 705c 	strh.w	r7, [r4, #92]	; 0x5c
 8001ecc:	e7d7      	b.n	8001e7e <HAL_UART_Receive+0x52>
      pdata16bits = NULL;
 8001ece:	2600      	movs	r6, #0
 8001ed0:	e7de      	b.n	8001e90 <HAL_UART_Receive+0x64>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001ed2:	f8cd 9000 	str.w	r9, [sp]
 8001ed6:	4643      	mov	r3, r8
 8001ed8:	2200      	movs	r2, #0
 8001eda:	2120      	movs	r1, #32
 8001edc:	4620      	mov	r0, r4
 8001ede:	f7ff ff0a 	bl	8001cf6 <UART_WaitOnFlagUntilTimeout>
 8001ee2:	b998      	cbnz	r0, 8001f0c <HAL_UART_Receive+0xe0>
 8001ee4:	6823      	ldr	r3, [r4, #0]
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8001ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee8:	403b      	ands	r3, r7
      if (pdata8bits == NULL)
 8001eea:	b945      	cbnz	r5, 8001efe <HAL_UART_Receive+0xd2>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8001eec:	f826 3b02 	strh.w	r3, [r6], #2
      huart->RxXferCount--;
 8001ef0:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8001ef4:	3b01      	subs	r3, #1
 8001ef6:	b29b      	uxth	r3, r3
 8001ef8:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8001efc:	e7cb      	b.n	8001e96 <HAL_UART_Receive+0x6a>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8001efe:	f805 3b01 	strb.w	r3, [r5], #1
 8001f02:	e7f5      	b.n	8001ef0 <HAL_UART_Receive+0xc4>
      return  HAL_ERROR;
 8001f04:	2001      	movs	r0, #1
 8001f06:	e7cc      	b.n	8001ea2 <HAL_UART_Receive+0x76>
    return HAL_BUSY;
 8001f08:	2002      	movs	r0, #2
 8001f0a:	e7ca      	b.n	8001ea2 <HAL_UART_Receive+0x76>
        return HAL_TIMEOUT;
 8001f0c:	2003      	movs	r0, #3
 8001f0e:	e7c8      	b.n	8001ea2 <HAL_UART_Receive+0x76>

08001f10 <UART_CheckIdleState>:
{
 8001f10:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f12:	2600      	movs	r6, #0
{
 8001f14:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f16:	67c6      	str	r6, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8001f18:	f7fe fba6 	bl	8000668 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001f1c:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8001f1e:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	071a      	lsls	r2, r3, #28
 8001f24:	d415      	bmi.n	8001f52 <UART_CheckIdleState+0x42>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001f26:	6823      	ldr	r3, [r4, #0]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	075b      	lsls	r3, r3, #29
 8001f2c:	d50a      	bpl.n	8001f44 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001f2e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001f32:	2200      	movs	r2, #0
 8001f34:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8001f38:	4620      	mov	r0, r4
 8001f3a:	9300      	str	r3, [sp, #0]
 8001f3c:	462b      	mov	r3, r5
 8001f3e:	f7ff feda 	bl	8001cf6 <UART_WaitOnFlagUntilTimeout>
 8001f42:	b990      	cbnz	r0, 8001f6a <UART_CheckIdleState+0x5a>
  huart->gState = HAL_UART_STATE_READY;
 8001f44:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8001f46:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8001f48:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UNLOCK(huart);
 8001f4a:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 8001f4e:	67a3      	str	r3, [r4, #120]	; 0x78
  return HAL_OK;
 8001f50:	e00c      	b.n	8001f6c <UART_CheckIdleState+0x5c>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001f52:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001f56:	4632      	mov	r2, r6
 8001f58:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001f5c:	9300      	str	r3, [sp, #0]
 8001f5e:	4603      	mov	r3, r0
 8001f60:	4620      	mov	r0, r4
 8001f62:	f7ff fec8 	bl	8001cf6 <UART_WaitOnFlagUntilTimeout>
 8001f66:	2800      	cmp	r0, #0
 8001f68:	d0dd      	beq.n	8001f26 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8001f6a:	2003      	movs	r0, #3
}
 8001f6c:	b002      	add	sp, #8
 8001f6e:	bd70      	pop	{r4, r5, r6, pc}

08001f70 <HAL_UART_Init>:
{
 8001f70:	b510      	push	{r4, lr}
  if (huart == NULL)
 8001f72:	4604      	mov	r4, r0
 8001f74:	b340      	cbz	r0, 8001fc8 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8001f76:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8001f78:	b91b      	cbnz	r3, 8001f82 <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 8001f7a:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8001f7e:	f001 fa1b 	bl	80033b8 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001f82:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001f84:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001f86:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 8001f88:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8001f8a:	6813      	ldr	r3, [r2, #0]
 8001f8c:	f023 0301 	bic.w	r3, r3, #1
 8001f90:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001f92:	f7ff fd17 	bl	80019c4 <UART_SetConfig>
 8001f96:	2801      	cmp	r0, #1
 8001f98:	d016      	beq.n	8001fc8 <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001f9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001f9c:	b113      	cbz	r3, 8001fa4 <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 8001f9e:	4620      	mov	r0, r4
 8001fa0:	f7ff fe54 	bl	8001c4c <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001fa4:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8001fa6:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001fa8:	685a      	ldr	r2, [r3, #4]
 8001faa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001fae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001fb0:	689a      	ldr	r2, [r3, #8]
 8001fb2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001fb6:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	f042 0201 	orr.w	r2, r2, #1
}
 8001fbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 8001fc2:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8001fc4:	f7ff bfa4 	b.w	8001f10 <UART_CheckIdleState>
}
 8001fc8:	2001      	movs	r0, #1
 8001fca:	bd10      	pop	{r4, pc}

08001fcc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8001fcc:	4b0a      	ldr	r3, [pc, #40]	; (8001ff8 <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8001fce:	3b01      	subs	r3, #1
 8001fd0:	d101      	bne.n	8001fd6 <USB_CoreReset+0xa>
    {
      return HAL_TIMEOUT;
 8001fd2:	2003      	movs	r0, #3
 8001fd4:	4770      	bx	lr
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8001fd6:	6902      	ldr	r2, [r0, #16]
 8001fd8:	2a00      	cmp	r2, #0
 8001fda:	daf8      	bge.n	8001fce <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8001fdc:	6903      	ldr	r3, [r0, #16]
 8001fde:	4a06      	ldr	r2, [pc, #24]	; (8001ff8 <USB_CoreReset+0x2c>)
 8001fe0:	f043 0301 	orr.w	r3, r3, #1
 8001fe4:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 8001fe6:	3a01      	subs	r2, #1
 8001fe8:	d0f3      	beq.n	8001fd2 <USB_CoreReset+0x6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8001fea:	6903      	ldr	r3, [r0, #16]
 8001fec:	f013 0301 	ands.w	r3, r3, #1
 8001ff0:	d1f9      	bne.n	8001fe6 <USB_CoreReset+0x1a>

  return HAL_OK;
 8001ff2:	4618      	mov	r0, r3
}
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	00030d41 	.word	0x00030d41

08001ffc <USB_CoreInit>:
{
 8001ffc:	b084      	sub	sp, #16
 8001ffe:	b538      	push	{r3, r4, r5, lr}
 8002000:	ad05      	add	r5, sp, #20
 8002002:	4604      	mov	r4, r0
 8002004:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002008:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800200a:	2b01      	cmp	r3, #1
 800200c:	d126      	bne.n	800205c <USB_CoreInit+0x60>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800200e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002010:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002014:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002016:	68c3      	ldr	r3, [r0, #12]
 8002018:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800201c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002020:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002022:	68c3      	ldr	r3, [r0, #12]
 8002024:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002028:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 800202a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800202c:	2b01      	cmp	r3, #1
 800202e:	d103      	bne.n	8002038 <USB_CoreInit+0x3c>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002030:	68c3      	ldr	r3, [r0, #12]
 8002032:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002036:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 8002038:	4620      	mov	r0, r4
 800203a:	f7ff ffc7 	bl	8001fcc <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 800203e:	9b08      	ldr	r3, [sp, #32]
 8002040:	2b01      	cmp	r3, #1
 8002042:	d107      	bne.n	8002054 <USB_CoreInit+0x58>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002044:	68a3      	ldr	r3, [r4, #8]
 8002046:	f043 0306 	orr.w	r3, r3, #6
 800204a:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800204c:	68a3      	ldr	r3, [r4, #8]
 800204e:	f043 0320 	orr.w	r3, r3, #32
 8002052:	60a3      	str	r3, [r4, #8]
}
 8002054:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002058:	b004      	add	sp, #16
 800205a:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800205c:	68c3      	ldr	r3, [r0, #12]
 800205e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002062:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 8002064:	f7ff ffb2 	bl	8001fcc <USB_CoreReset>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002068:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800206a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800206e:	63a3      	str	r3, [r4, #56]	; 0x38
 8002070:	e7e5      	b.n	800203e <USB_CoreInit+0x42>

08002072 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002072:	6883      	ldr	r3, [r0, #8]
 8002074:	f023 0301 	bic.w	r3, r3, #1
 8002078:	6083      	str	r3, [r0, #8]
}
 800207a:	2000      	movs	r0, #0
 800207c:	4770      	bx	lr

0800207e <USB_SetCurrentMode>:
{
 800207e:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002080:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8002082:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002084:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8002088:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800208a:	d108      	bne.n	800209e <USB_SetCurrentMode+0x20>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800208c:	68c3      	ldr	r3, [r0, #12]
 800208e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002092:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 8002094:	2032      	movs	r0, #50	; 0x32
 8002096:	f7fe faed 	bl	8000674 <HAL_Delay>
  return HAL_OK;
 800209a:	2000      	movs	r0, #0
 800209c:	bd08      	pop	{r3, pc}
  else if (mode == USB_DEVICE_MODE)
 800209e:	b919      	cbnz	r1, 80020a8 <USB_SetCurrentMode+0x2a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80020a0:	68c3      	ldr	r3, [r0, #12]
 80020a2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80020a6:	e7f4      	b.n	8002092 <USB_SetCurrentMode+0x14>
    return HAL_ERROR;
 80020a8:	2001      	movs	r0, #1
}
 80020aa:	bd08      	pop	{r3, pc}

080020ac <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80020ac:	0189      	lsls	r1, r1, #6
 80020ae:	4a07      	ldr	r2, [pc, #28]	; (80020cc <USB_FlushTxFifo+0x20>)
 80020b0:	f041 0120 	orr.w	r1, r1, #32
 80020b4:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 80020b6:	3a01      	subs	r2, #1
 80020b8:	d005      	beq.n	80020c6 <USB_FlushTxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80020ba:	6903      	ldr	r3, [r0, #16]
 80020bc:	f013 0320 	ands.w	r3, r3, #32
 80020c0:	d1f9      	bne.n	80020b6 <USB_FlushTxFifo+0xa>
  return HAL_OK;
 80020c2:	4618      	mov	r0, r3
 80020c4:	4770      	bx	lr
      return HAL_TIMEOUT;
 80020c6:	2003      	movs	r0, #3
}
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	00030d41 	.word	0x00030d41

080020d0 <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80020d0:	2310      	movs	r3, #16
 80020d2:	4a06      	ldr	r2, [pc, #24]	; (80020ec <USB_FlushRxFifo+0x1c>)
 80020d4:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
 80020d6:	3a01      	subs	r2, #1
 80020d8:	d005      	beq.n	80020e6 <USB_FlushRxFifo+0x16>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80020da:	6903      	ldr	r3, [r0, #16]
 80020dc:	f013 0310 	ands.w	r3, r3, #16
 80020e0:	d1f9      	bne.n	80020d6 <USB_FlushRxFifo+0x6>
  return HAL_OK;
 80020e2:	4618      	mov	r0, r3
 80020e4:	4770      	bx	lr
      return HAL_TIMEOUT;
 80020e6:	2003      	movs	r0, #3
}
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	00030d41 	.word	0x00030d41

080020f0 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 80020f0:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 80020f4:	4319      	orrs	r1, r3
 80020f6:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 80020fa:	2000      	movs	r0, #0
 80020fc:	4770      	bx	lr
	...

08002100 <USB_DevInit>:
{
 8002100:	b084      	sub	sp, #16
 8002102:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002106:	4604      	mov	r4, r0
 8002108:	a809      	add	r0, sp, #36	; 0x24
 800210a:	460f      	mov	r7, r1
 800210c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 8002110:	2300      	movs	r3, #0
 8002112:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002114:	990e      	ldr	r1, [sp, #56]	; 0x38
 8002116:	9d13      	ldr	r5, [sp, #76]	; 0x4c
    USBx->DIEPTXF[i] = 0U;
 8002118:	461e      	mov	r6, r3
 800211a:	f103 0040 	add.w	r0, r3, #64	; 0x40
  for (i = 0U; i < 15U; i++)
 800211e:	3301      	adds	r3, #1
    USBx->DIEPTXF[i] = 0U;
 8002120:	eb04 0080 	add.w	r0, r4, r0, lsl #2
  for (i = 0U; i < 15U; i++)
 8002124:	2b0f      	cmp	r3, #15
    USBx->DIEPTXF[i] = 0U;
 8002126:	6046      	str	r6, [r0, #4]
  for (i = 0U; i < 15U; i++)
 8002128:	d1f7      	bne.n	800211a <USB_DevInit+0x1a>
 800212a:	f504 6600 	add.w	r6, r4, #2048	; 0x800
  if (cfg.vbus_sensing_enable == 0U)
 800212e:	2d00      	cmp	r5, #0
 8002130:	d16b      	bne.n	800220a <USB_DevInit+0x10a>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002132:	6873      	ldr	r3, [r6, #4]
 8002134:	f043 0302 	orr.w	r3, r3, #2
 8002138:	6073      	str	r3, [r6, #4]
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800213a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800213c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002140:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8002142:	6823      	ldr	r3, [r4, #0]
 8002144:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002148:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800214a:	6823      	ldr	r3, [r4, #0]
 800214c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002150:	6023      	str	r3, [r4, #0]
  USBx_PCGCCTL = 0U;
 8002152:	2300      	movs	r3, #0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002154:	2901      	cmp	r1, #1
  USBx_PCGCCTL = 0U;
 8002156:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800215a:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 800215e:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002162:	d159      	bne.n	8002218 <USB_DevInit+0x118>
    if (cfg.speed == USBD_HS_SPEED)
 8002164:	2a00      	cmp	r2, #0
 8002166:	d155      	bne.n	8002214 <USB_DevInit+0x114>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002168:	2100      	movs	r1, #0
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800216a:	4620      	mov	r0, r4
 800216c:	f7ff ffc0 	bl	80020f0 <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002170:	2110      	movs	r1, #16
 8002172:	4620      	mov	r0, r4
 8002174:	f7ff ff9a 	bl	80020ac <USB_FlushTxFifo>
 8002178:	4601      	mov	r1, r0
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800217a:	4620      	mov	r0, r4
 800217c:	f7ff ffa8 	bl	80020d0 <USB_FlushRxFifo>
 8002180:	2800      	cmp	r0, #0
 8002182:	d14d      	bne.n	8002220 <USB_DevInit+0x120>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002184:	1c08      	adds	r0, r1, #0
 8002186:	bf18      	it	ne
 8002188:	2001      	movne	r0, #1
  USBx_DEVICE->DIEPMSK = 0U;
 800218a:	2300      	movs	r3, #0
 800218c:	f504 6210 	add.w	r2, r4, #2304	; 0x900
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002190:	f04f 4e90 	mov.w	lr, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002194:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
      USBx_INEP(i)->DIEPCTL = 0U;
 8002198:	4619      	mov	r1, r3
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800219a:	f64f 387f 	movw	r8, #64383	; 0xfb7f
  USBx_DEVICE->DIEPMSK = 0U;
 800219e:	6133      	str	r3, [r6, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80021a0:	6173      	str	r3, [r6, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80021a2:	61f3      	str	r3, [r6, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80021a4:	42bb      	cmp	r3, r7
 80021a6:	d13d      	bne.n	8002224 <USB_DevInit+0x124>
 80021a8:	2100      	movs	r1, #0
 80021aa:	f504 6230 	add.w	r2, r4, #2816	; 0xb00
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80021ae:	f04f 4e90 	mov.w	lr, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80021b2:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80021b6:	460f      	mov	r7, r1
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80021b8:	f64f 387f 	movw	r8, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80021bc:	428b      	cmp	r3, r1
 80021be:	d144      	bne.n	800224a <USB_DevInit+0x14a>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80021c0:	6933      	ldr	r3, [r6, #16]
 80021c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80021c6:	6133      	str	r3, [r6, #16]
  USBx->GINTMSK = 0U;
 80021c8:	2300      	movs	r3, #0
 80021ca:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 80021cc:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 80021d0:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == 0U)
 80021d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80021d4:	b91b      	cbnz	r3, 80021de <USB_DevInit+0xde>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80021d6:	69a3      	ldr	r3, [r4, #24]
 80021d8:	f043 0310 	orr.w	r3, r3, #16
 80021dc:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80021de:	69a2      	ldr	r2, [r4, #24]
 80021e0:	4b23      	ldr	r3, [pc, #140]	; (8002270 <USB_DevInit+0x170>)
 80021e2:	4313      	orrs	r3, r2
 80021e4:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 80021e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80021e8:	b11b      	cbz	r3, 80021f2 <USB_DevInit+0xf2>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80021ea:	69a3      	ldr	r3, [r4, #24]
 80021ec:	f043 0308 	orr.w	r3, r3, #8
 80021f0:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 80021f2:	2d01      	cmp	r5, #1
 80021f4:	d105      	bne.n	8002202 <USB_DevInit+0x102>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80021f6:	69a3      	ldr	r3, [r4, #24]
 80021f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80021fc:	f043 0304 	orr.w	r3, r3, #4
 8002200:	61a3      	str	r3, [r4, #24]
}
 8002202:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002206:	b004      	add	sp, #16
 8002208:	4770      	bx	lr
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800220a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800220c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002210:	63a3      	str	r3, [r4, #56]	; 0x38
 8002212:	e79e      	b.n	8002152 <USB_DevInit+0x52>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002214:	2101      	movs	r1, #1
 8002216:	e7a8      	b.n	800216a <USB_DevInit+0x6a>
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8002218:	2903      	cmp	r1, #3
 800221a:	d0a3      	beq.n	8002164 <USB_DevInit+0x64>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800221c:	2103      	movs	r1, #3
 800221e:	e7a4      	b.n	800216a <USB_DevInit+0x6a>
 8002220:	2001      	movs	r0, #1
 8002222:	e7b2      	b.n	800218a <USB_DevInit+0x8a>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002224:	f8d2 9000 	ldr.w	r9, [r2]
 8002228:	f1b9 0f00 	cmp.w	r9, #0
 800222c:	da0b      	bge.n	8002246 <USB_DevInit+0x146>
      if (i == 0U)
 800222e:	b93b      	cbnz	r3, 8002240 <USB_DevInit+0x140>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002230:	f8c2 c000 	str.w	ip, [r2]
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002234:	6111      	str	r1, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002236:	3301      	adds	r3, #1
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002238:	f8c2 8008 	str.w	r8, [r2, #8]
 800223c:	3220      	adds	r2, #32
 800223e:	e7b1      	b.n	80021a4 <USB_DevInit+0xa4>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002240:	f8c2 e000 	str.w	lr, [r2]
 8002244:	e7f6      	b.n	8002234 <USB_DevInit+0x134>
      USBx_INEP(i)->DIEPCTL = 0U;
 8002246:	6011      	str	r1, [r2, #0]
 8002248:	e7f4      	b.n	8002234 <USB_DevInit+0x134>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800224a:	f8d2 9000 	ldr.w	r9, [r2]
 800224e:	f1b9 0f00 	cmp.w	r9, #0
 8002252:	da0b      	bge.n	800226c <USB_DevInit+0x16c>
      if (i == 0U)
 8002254:	b939      	cbnz	r1, 8002266 <USB_DevInit+0x166>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002256:	f8c2 c000 	str.w	ip, [r2]
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800225a:	6117      	str	r7, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800225c:	3101      	adds	r1, #1
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800225e:	f8c2 8008 	str.w	r8, [r2, #8]
 8002262:	3220      	adds	r2, #32
 8002264:	e7aa      	b.n	80021bc <USB_DevInit+0xbc>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002266:	f8c2 e000 	str.w	lr, [r2]
 800226a:	e7f6      	b.n	800225a <USB_DevInit+0x15a>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800226c:	6017      	str	r7, [r2, #0]
 800226e:	e7f4      	b.n	800225a <USB_DevInit+0x15a>
 8002270:	803c3800 	.word	0x803c3800

08002274 <USB_DevDisconnect>:
{
 8002274:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002276:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 800227a:	f043 0302 	orr.w	r3, r3, #2
 800227e:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 8002282:	2003      	movs	r0, #3
 8002284:	f7fe f9f6 	bl	8000674 <HAL_Delay>
}
 8002288:	2000      	movs	r0, #0
 800228a:	bd08      	pop	{r3, pc}

0800228c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800228c:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 800228e:	f000 fcb1 	bl	8002bf4 <vTaskStartScheduler>
  
  return osOK;
}
 8002292:	2000      	movs	r0, #0
 8002294:	bd08      	pop	{r3, pc}

08002296 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002296:	b570      	push	{r4, r5, r6, lr}
 8002298:	4605      	mov	r5, r0
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800229a:	6946      	ldr	r6, [r0, #20]
{
 800229c:	460b      	mov	r3, r1
 800229e:	b086      	sub	sp, #24
 80022a0:	6840      	ldr	r0, [r0, #4]
 80022a2:	6829      	ldr	r1, [r5, #0]
 80022a4:	692a      	ldr	r2, [r5, #16]
 80022a6:	f9b5 4008 	ldrsh.w	r4, [r5, #8]
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80022aa:	b176      	cbz	r6, 80022ca <osThreadCreate+0x34>
 80022ac:	69ad      	ldr	r5, [r5, #24]
 80022ae:	b165      	cbz	r5, 80022ca <osThreadCreate+0x34>
  if (priority != osPriorityError) {
 80022b0:	2c84      	cmp	r4, #132	; 0x84
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80022b2:	9502      	str	r5, [sp, #8]
    fpriority += (priority - osPriorityIdle);
 80022b4:	bf14      	ite	ne
 80022b6:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80022b8:	2400      	moveq	r4, #0
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80022ba:	e88d 0050 	stmia.w	sp, {r4, r6}
 80022be:	f000 fc36 	bl	8002b2e <xTaskCreateStatic>
 80022c2:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80022c4:	9805      	ldr	r0, [sp, #20]
}
 80022c6:	b006      	add	sp, #24
 80022c8:	bd70      	pop	{r4, r5, r6, pc}
  if (priority != osPriorityError) {
 80022ca:	2c84      	cmp	r4, #132	; 0x84
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80022cc:	ad05      	add	r5, sp, #20
 80022ce:	b292      	uxth	r2, r2
    fpriority += (priority - osPriorityIdle);
 80022d0:	bf14      	ite	ne
 80022d2:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80022d4:	2400      	moveq	r4, #0
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80022d6:	e88d 0030 	stmia.w	sp, {r4, r5}
 80022da:	f000 fc5d 	bl	8002b98 <xTaskCreate>
 80022de:	2801      	cmp	r0, #1
 80022e0:	d0f0      	beq.n	80022c4 <osThreadCreate+0x2e>
      return NULL;
 80022e2:	2000      	movs	r0, #0
 80022e4:	e7ef      	b.n	80022c6 <osThreadCreate+0x30>

080022e6 <osDelay>:
osStatus osDelay (uint32_t millisec)
{
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80022e6:	2800      	cmp	r0, #0
 80022e8:	bf08      	it	eq
 80022ea:	2001      	moveq	r0, #1
{
 80022ec:	b508      	push	{r3, lr}
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80022ee:	f000 fdcf 	bl	8002e90 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80022f2:	2000      	movs	r0, #0
 80022f4:	bd08      	pop	{r3, pc}

080022f6 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022f6:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80022fa:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022fe:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002300:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002302:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002304:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002306:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002308:	6003      	str	r3, [r0, #0]
 800230a:	4770      	bx	lr

0800230c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800230c:	2300      	movs	r3, #0
 800230e:	6103      	str	r3, [r0, #16]
 8002310:	4770      	bx	lr

08002312 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8002312:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002314:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8002316:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002318:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800231a:	689a      	ldr	r2, [r3, #8]
 800231c:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800231e:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8002320:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8002322:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8002324:	3301      	adds	r3, #1
 8002326:	6003      	str	r3, [r0, #0]
 8002328:	4770      	bx	lr

0800232a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800232a:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800232c:	1c53      	adds	r3, r2, #1
{
 800232e:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 8002330:	d10a      	bne.n	8002348 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002332:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002334:	685a      	ldr	r2, [r3, #4]
 8002336:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002338:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800233a:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800233c:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800233e:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8002340:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8002342:	3301      	adds	r3, #1
 8002344:	6003      	str	r3, [r0, #0]
 8002346:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002348:	f100 0308 	add.w	r3, r0, #8
 800234c:	685c      	ldr	r4, [r3, #4]
 800234e:	6825      	ldr	r5, [r4, #0]
 8002350:	42aa      	cmp	r2, r5
 8002352:	d3ef      	bcc.n	8002334 <vListInsert+0xa>
 8002354:	4623      	mov	r3, r4
 8002356:	e7f9      	b.n	800234c <vListInsert+0x22>

08002358 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002358:	6841      	ldr	r1, [r0, #4]
 800235a:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = pxItemToRemove->pxContainer;
 800235c:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800235e:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002360:	6882      	ldr	r2, [r0, #8]
 8002362:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002364:	6859      	ldr	r1, [r3, #4]
 8002366:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002368:	bf08      	it	eq
 800236a:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800236c:	2200      	movs	r2, #0
 800236e:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	3a01      	subs	r2, #1
 8002374:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002376:	6818      	ldr	r0, [r3, #0]
}
 8002378:	4770      	bx	lr
	...

0800237c <prvTaskExitError>:
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
volatile uint32_t ulDummy = 0;
 800237c:	2300      	movs	r3, #0
{
 800237e:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8002380:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002382:	4b0f      	ldr	r3, [pc, #60]	; (80023c0 <prvTaskExitError+0x44>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	3301      	adds	r3, #1
 8002388:	d00a      	beq.n	80023a0 <prvTaskExitError+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800238a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800238e:	b672      	cpsid	i
 8002390:	f383 8811 	msr	BASEPRI, r3
 8002394:	f3bf 8f6f 	isb	sy
 8002398:	f3bf 8f4f 	dsb	sy
 800239c:	b662      	cpsie	i
 800239e:	e7fe      	b.n	800239e <prvTaskExitError+0x22>
 80023a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023a4:	b672      	cpsid	i
 80023a6:	f383 8811 	msr	BASEPRI, r3
 80023aa:	f3bf 8f6f 	isb	sy
 80023ae:	f3bf 8f4f 	dsb	sy
 80023b2:	b662      	cpsie	i
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80023b4:	9b01      	ldr	r3, [sp, #4]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d0fc      	beq.n	80023b4 <prvTaskExitError+0x38>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80023ba:	b002      	add	sp, #8
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop
 80023c0:	20020008 	.word	0x20020008

080023c4 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80023c4:	4808      	ldr	r0, [pc, #32]	; (80023e8 <prvPortStartFirstTask+0x24>)
 80023c6:	6800      	ldr	r0, [r0, #0]
 80023c8:	6800      	ldr	r0, [r0, #0]
 80023ca:	f380 8808 	msr	MSP, r0
 80023ce:	f04f 0000 	mov.w	r0, #0
 80023d2:	f380 8814 	msr	CONTROL, r0
 80023d6:	b662      	cpsie	i
 80023d8:	b661      	cpsie	f
 80023da:	f3bf 8f4f 	dsb	sy
 80023de:	f3bf 8f6f 	isb	sy
 80023e2:	df00      	svc	0
 80023e4:	bf00      	nop
 80023e6:	0000      	.short	0x0000
 80023e8:	e000ed08 	.word	0xe000ed08

080023ec <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80023ec:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80023fc <vPortEnableVFP+0x10>
 80023f0:	6801      	ldr	r1, [r0, #0]
 80023f2:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80023f6:	6001      	str	r1, [r0, #0]
 80023f8:	4770      	bx	lr
 80023fa:	0000      	.short	0x0000
 80023fc:	e000ed88 	.word	0xe000ed88

08002400 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002400:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002404:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002408:	f840 2c20 	str.w	r2, [r0, #-32]
}
 800240c:	3844      	subs	r0, #68	; 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800240e:	6403      	str	r3, [r0, #64]	; 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002410:	4b03      	ldr	r3, [pc, #12]	; (8002420 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002412:	63c1      	str	r1, [r0, #60]	; 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002414:	6383      	str	r3, [r0, #56]	; 0x38
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8002416:	f06f 0302 	mvn.w	r3, #2
 800241a:	6203      	str	r3, [r0, #32]
}
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	0800237d 	.word	0x0800237d
	...

08002430 <SVC_Handler>:
	__asm volatile (
 8002430:	4b07      	ldr	r3, [pc, #28]	; (8002450 <pxCurrentTCBConst2>)
 8002432:	6819      	ldr	r1, [r3, #0]
 8002434:	6808      	ldr	r0, [r1, #0]
 8002436:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800243a:	f380 8809 	msr	PSP, r0
 800243e:	f3bf 8f6f 	isb	sy
 8002442:	f04f 0000 	mov.w	r0, #0
 8002446:	f380 8811 	msr	BASEPRI, r0
 800244a:	4770      	bx	lr
 800244c:	f3af 8000 	nop.w

08002450 <pxCurrentTCBConst2>:
 8002450:	20023cb0 	.word	0x20023cb0

08002454 <vPortEnterCritical>:
 8002454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002458:	b672      	cpsid	i
 800245a:	f383 8811 	msr	BASEPRI, r3
 800245e:	f3bf 8f6f 	isb	sy
 8002462:	f3bf 8f4f 	dsb	sy
 8002466:	b662      	cpsie	i
	uxCriticalNesting++;
 8002468:	4a0b      	ldr	r2, [pc, #44]	; (8002498 <vPortEnterCritical+0x44>)
 800246a:	6813      	ldr	r3, [r2, #0]
 800246c:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800246e:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8002470:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8002472:	d10f      	bne.n	8002494 <vPortEnterCritical+0x40>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002474:	4b09      	ldr	r3, [pc, #36]	; (800249c <vPortEnterCritical+0x48>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f013 0fff 	tst.w	r3, #255	; 0xff
 800247c:	d00a      	beq.n	8002494 <vPortEnterCritical+0x40>
 800247e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002482:	b672      	cpsid	i
 8002484:	f383 8811 	msr	BASEPRI, r3
 8002488:	f3bf 8f6f 	isb	sy
 800248c:	f3bf 8f4f 	dsb	sy
 8002490:	b662      	cpsie	i
 8002492:	e7fe      	b.n	8002492 <vPortEnterCritical+0x3e>
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	20020008 	.word	0x20020008
 800249c:	e000ed04 	.word	0xe000ed04

080024a0 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 80024a0:	4a09      	ldr	r2, [pc, #36]	; (80024c8 <vPortExitCritical+0x28>)
 80024a2:	6813      	ldr	r3, [r2, #0]
 80024a4:	b953      	cbnz	r3, 80024bc <vPortExitCritical+0x1c>
 80024a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024aa:	b672      	cpsid	i
 80024ac:	f383 8811 	msr	BASEPRI, r3
 80024b0:	f3bf 8f6f 	isb	sy
 80024b4:	f3bf 8f4f 	dsb	sy
 80024b8:	b662      	cpsie	i
 80024ba:	e7fe      	b.n	80024ba <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 80024bc:	3b01      	subs	r3, #1
 80024be:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80024c0:	b90b      	cbnz	r3, 80024c6 <vPortExitCritical+0x26>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80024c2:	f383 8811 	msr	BASEPRI, r3
 80024c6:	4770      	bx	lr
 80024c8:	20020008 	.word	0x20020008
 80024cc:	00000000 	.word	0x00000000

080024d0 <PendSV_Handler>:
	__asm volatile
 80024d0:	f3ef 8009 	mrs	r0, PSP
 80024d4:	f3bf 8f6f 	isb	sy
 80024d8:	4b15      	ldr	r3, [pc, #84]	; (8002530 <pxCurrentTCBConst>)
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	f01e 0f10 	tst.w	lr, #16
 80024e0:	bf08      	it	eq
 80024e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80024e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024ea:	6010      	str	r0, [r2, #0]
 80024ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80024f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80024f4:	b672      	cpsid	i
 80024f6:	f380 8811 	msr	BASEPRI, r0
 80024fa:	f3bf 8f4f 	dsb	sy
 80024fe:	f3bf 8f6f 	isb	sy
 8002502:	b662      	cpsie	i
 8002504:	f000 fcea 	bl	8002edc <vTaskSwitchContext>
 8002508:	f04f 0000 	mov.w	r0, #0
 800250c:	f380 8811 	msr	BASEPRI, r0
 8002510:	bc09      	pop	{r0, r3}
 8002512:	6819      	ldr	r1, [r3, #0]
 8002514:	6808      	ldr	r0, [r1, #0]
 8002516:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800251a:	f01e 0f10 	tst.w	lr, #16
 800251e:	bf08      	it	eq
 8002520:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002524:	f380 8809 	msr	PSP, r0
 8002528:	f3bf 8f6f 	isb	sy
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop

08002530 <pxCurrentTCBConst>:
 8002530:	20023cb0 	.word	0x20023cb0

08002534 <xPortSysTickHandler>:
{
 8002534:	b508      	push	{r3, lr}
	__asm volatile
 8002536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800253a:	b672      	cpsid	i
 800253c:	f383 8811 	msr	BASEPRI, r3
 8002540:	f3bf 8f6f 	isb	sy
 8002544:	f3bf 8f4f 	dsb	sy
 8002548:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 800254a:	f000 fb93 	bl	8002c74 <xTaskIncrementTick>
 800254e:	b118      	cbz	r0, 8002558 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002550:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002554:	4b02      	ldr	r3, [pc, #8]	; (8002560 <xPortSysTickHandler+0x2c>)
 8002556:	601a      	str	r2, [r3, #0]
	__asm volatile
 8002558:	2300      	movs	r3, #0
 800255a:	f383 8811 	msr	BASEPRI, r3
 800255e:	bd08      	pop	{r3, pc}
 8002560:	e000ed04 	.word	0xe000ed04

08002564 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002564:	2300      	movs	r3, #0
 8002566:	4a08      	ldr	r2, [pc, #32]	; (8002588 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002568:	4908      	ldr	r1, [pc, #32]	; (800258c <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800256a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800256c:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800256e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002572:	4b07      	ldr	r3, [pc, #28]	; (8002590 <vPortSetupTimerInterrupt+0x2c>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	fbb3 f3f1 	udiv	r3, r3, r1
 800257a:	4906      	ldr	r1, [pc, #24]	; (8002594 <vPortSetupTimerInterrupt+0x30>)
 800257c:	3b01      	subs	r3, #1
 800257e:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002580:	2307      	movs	r3, #7
 8002582:	6013      	str	r3, [r2, #0]
 8002584:	4770      	bx	lr
 8002586:	bf00      	nop
 8002588:	e000e010 	.word	0xe000e010
 800258c:	e000e018 	.word	0xe000e018
 8002590:	2002000c 	.word	0x2002000c
 8002594:	e000e014 	.word	0xe000e014

08002598 <xPortStartScheduler>:
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002598:	4b2c      	ldr	r3, [pc, #176]	; (800264c <xPortStartScheduler+0xb4>)
{
 800259a:	b513      	push	{r0, r1, r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800259c:	781a      	ldrb	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800259e:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80025a0:	b2d2      	uxtb	r2, r2
 80025a2:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80025a4:	22ff      	movs	r2, #255	; 0xff
 80025a6:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80025a8:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80025aa:	4a29      	ldr	r2, [pc, #164]	; (8002650 <xPortStartScheduler+0xb8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80025b2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80025b6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80025ba:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80025bc:	2207      	movs	r2, #7
 80025be:	4b25      	ldr	r3, [pc, #148]	; (8002654 <xPortStartScheduler+0xbc>)
 80025c0:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80025c2:	f89d 0003 	ldrb.w	r0, [sp, #3]
 80025c6:	1e54      	subs	r4, r2, #1
 80025c8:	0600      	lsls	r0, r0, #24
 80025ca:	d40f      	bmi.n	80025ec <xPortStartScheduler+0x54>
 80025cc:	b101      	cbz	r1, 80025d0 <xPortStartScheduler+0x38>
 80025ce:	601a      	str	r2, [r3, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	2a03      	cmp	r2, #3
 80025d4:	d013      	beq.n	80025fe <xPortStartScheduler+0x66>
	__asm volatile
 80025d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025da:	b672      	cpsid	i
 80025dc:	f383 8811 	msr	BASEPRI, r3
 80025e0:	f3bf 8f6f 	isb	sy
 80025e4:	f3bf 8f4f 	dsb	sy
 80025e8:	b662      	cpsie	i
 80025ea:	e7fe      	b.n	80025ea <xPortStartScheduler+0x52>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80025ec:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80025f0:	2101      	movs	r1, #1
 80025f2:	0052      	lsls	r2, r2, #1
 80025f4:	b2d2      	uxtb	r2, r2
 80025f6:	f88d 2003 	strb.w	r2, [sp, #3]
 80025fa:	4622      	mov	r2, r4
 80025fc:	e7e1      	b.n	80025c2 <xPortStartScheduler+0x2a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80025fe:	0212      	lsls	r2, r2, #8
	uxCriticalNesting = 0;
 8002600:	2400      	movs	r4, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002602:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8002606:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002608:	9b01      	ldr	r3, [sp, #4]
 800260a:	4a10      	ldr	r2, [pc, #64]	; (800264c <xPortStartScheduler+0xb4>)
 800260c:	b2db      	uxtb	r3, r3
 800260e:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002610:	4b11      	ldr	r3, [pc, #68]	; (8002658 <xPortStartScheduler+0xc0>)
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8002618:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8002620:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8002622:	f7ff ff9f 	bl	8002564 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8002626:	4b0d      	ldr	r3, [pc, #52]	; (800265c <xPortStartScheduler+0xc4>)
 8002628:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 800262a:	f7ff fedf 	bl	80023ec <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800262e:	4a0c      	ldr	r2, [pc, #48]	; (8002660 <xPortStartScheduler+0xc8>)
 8002630:	6813      	ldr	r3, [r2, #0]
 8002632:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002636:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8002638:	f7ff fec4 	bl	80023c4 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800263c:	f000 fc4e 	bl	8002edc <vTaskSwitchContext>
	prvTaskExitError();
 8002640:	f7ff fe9c 	bl	800237c <prvTaskExitError>
}
 8002644:	4620      	mov	r0, r4
 8002646:	b002      	add	sp, #8
 8002648:	bd10      	pop	{r4, pc}
 800264a:	bf00      	nop
 800264c:	e000e400 	.word	0xe000e400
 8002650:	20020090 	.word	0x20020090
 8002654:	20020094 	.word	0x20020094
 8002658:	e000ed20 	.word	0xe000ed20
 800265c:	20020008 	.word	0x20020008
 8002660:	e000ef34 	.word	0xe000ef34

08002664 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002664:	4b0f      	ldr	r3, [pc, #60]	; (80026a4 <prvInsertBlockIntoFreeList+0x40>)
{
 8002666:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	4282      	cmp	r2, r0
 800266c:	d318      	bcc.n	80026a0 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800266e:	685c      	ldr	r4, [r3, #4]
 8002670:	1919      	adds	r1, r3, r4
 8002672:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002674:	bf01      	itttt	eq
 8002676:	6841      	ldreq	r1, [r0, #4]
 8002678:	4618      	moveq	r0, r3
 800267a:	1909      	addeq	r1, r1, r4
 800267c:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800267e:	6844      	ldr	r4, [r0, #4]
 8002680:	1901      	adds	r1, r0, r4
 8002682:	428a      	cmp	r2, r1
 8002684:	d107      	bne.n	8002696 <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002686:	4908      	ldr	r1, [pc, #32]	; (80026a8 <prvInsertBlockIntoFreeList+0x44>)
 8002688:	6809      	ldr	r1, [r1, #0]
 800268a:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800268c:	bf1f      	itttt	ne
 800268e:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002690:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002692:	1909      	addne	r1, r1, r4
 8002694:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002696:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002698:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800269a:	bf18      	it	ne
 800269c:	6018      	strne	r0, [r3, #0]
 800269e:	bd10      	pop	{r4, pc}
 80026a0:	4613      	mov	r3, r2
 80026a2:	e7e1      	b.n	8002668 <prvInsertBlockIntoFreeList+0x4>
 80026a4:	20023ca8 	.word	0x20023ca8
 80026a8:	20020098 	.word	0x20020098

080026ac <pvPortMalloc>:
{
 80026ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80026b0:	4604      	mov	r4, r0
	vTaskSuspendAll();
 80026b2:	f000 fad7 	bl	8002c64 <vTaskSuspendAll>
		if( pxEnd == NULL )
 80026b6:	4940      	ldr	r1, [pc, #256]	; (80027b8 <pvPortMalloc+0x10c>)
 80026b8:	4d40      	ldr	r5, [pc, #256]	; (80027bc <pvPortMalloc+0x110>)
 80026ba:	680b      	ldr	r3, [r1, #0]
 80026bc:	bb0b      	cbnz	r3, 8002702 <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 80026be:	4a40      	ldr	r2, [pc, #256]	; (80027c0 <pvPortMalloc+0x114>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80026c0:	0756      	lsls	r6, r2, #29
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80026c2:	4e40      	ldr	r6, [pc, #256]	; (80027c4 <pvPortMalloc+0x118>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80026c4:	bf1b      	ittet	ne
 80026c6:	1dd0      	addne	r0, r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80026c8:	f502 5370 	addne.w	r3, r2, #15360	; 0x3c00
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80026cc:	f44f 5370 	moveq.w	r3, #15360	; 0x3c00
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80026d0:	f020 0007 	bicne.w	r0, r0, #7
 80026d4:	bf1c      	itt	ne
 80026d6:	4602      	movne	r2, r0
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80026d8:	1a1b      	subne	r3, r3, r0
	xStart.xBlockSize = ( size_t ) 0;
 80026da:	2000      	movs	r0, #0
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80026dc:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80026de:	6032      	str	r2, [r6, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80026e0:	6070      	str	r0, [r6, #4]
	uxAddress -= xHeapStructSize;
 80026e2:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80026e4:	f023 0307 	bic.w	r3, r3, #7
	pxEnd->pxNextFreeBlock = NULL;
 80026e8:	6018      	str	r0, [r3, #0]
	pxEnd->xBlockSize = 0;
 80026ea:	6058      	str	r0, [r3, #4]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80026ec:	1a98      	subs	r0, r3, r2
	pxEnd = ( void * ) uxAddress;
 80026ee:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80026f0:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80026f2:	4b35      	ldr	r3, [pc, #212]	; (80027c8 <pvPortMalloc+0x11c>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80026f4:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80026f6:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80026f8:	4b34      	ldr	r3, [pc, #208]	; (80027cc <pvPortMalloc+0x120>)
 80026fa:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80026fc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002700:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002702:	682f      	ldr	r7, [r5, #0]
 8002704:	4227      	tst	r7, r4
 8002706:	d116      	bne.n	8002736 <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 8002708:	2c00      	cmp	r4, #0
 800270a:	d042      	beq.n	8002792 <pvPortMalloc+0xe6>
				xWantedSize += xHeapStructSize;
 800270c:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002710:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002712:	bf1c      	itt	ne
 8002714:	f023 0307 	bicne.w	r3, r3, #7
 8002718:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800271a:	b163      	cbz	r3, 8002736 <pvPortMalloc+0x8a>
 800271c:	4a2b      	ldr	r2, [pc, #172]	; (80027cc <pvPortMalloc+0x120>)
 800271e:	6816      	ldr	r6, [r2, #0]
 8002720:	4690      	mov	r8, r2
 8002722:	42b3      	cmp	r3, r6
 8002724:	d807      	bhi.n	8002736 <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 8002726:	4a27      	ldr	r2, [pc, #156]	; (80027c4 <pvPortMalloc+0x118>)
 8002728:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800272a:	6868      	ldr	r0, [r5, #4]
 800272c:	4283      	cmp	r3, r0
 800272e:	d804      	bhi.n	800273a <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 8002730:	6809      	ldr	r1, [r1, #0]
 8002732:	428d      	cmp	r5, r1
 8002734:	d107      	bne.n	8002746 <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 8002736:	2400      	movs	r4, #0
 8002738:	e02b      	b.n	8002792 <pvPortMalloc+0xe6>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800273a:	682c      	ldr	r4, [r5, #0]
 800273c:	2c00      	cmp	r4, #0
 800273e:	d0f7      	beq.n	8002730 <pvPortMalloc+0x84>
 8002740:	462a      	mov	r2, r5
 8002742:	4625      	mov	r5, r4
 8002744:	e7f1      	b.n	800272a <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002746:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002748:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800274a:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800274c:	1ac2      	subs	r2, r0, r3
 800274e:	2a10      	cmp	r2, #16
 8002750:	d911      	bls.n	8002776 <pvPortMalloc+0xca>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002752:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002754:	0741      	lsls	r1, r0, #29
 8002756:	d00a      	beq.n	800276e <pvPortMalloc+0xc2>
 8002758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800275c:	b672      	cpsid	i
 800275e:	f383 8811 	msr	BASEPRI, r3
 8002762:	f3bf 8f6f 	isb	sy
 8002766:	f3bf 8f4f 	dsb	sy
 800276a:	b662      	cpsie	i
 800276c:	e7fe      	b.n	800276c <pvPortMalloc+0xc0>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800276e:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002770:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002772:	f7ff ff77 	bl	8002664 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002776:	686b      	ldr	r3, [r5, #4]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002778:	3408      	adds	r4, #8
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800277a:	4913      	ldr	r1, [pc, #76]	; (80027c8 <pvPortMalloc+0x11c>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800277c:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800277e:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002780:	6808      	ldr	r0, [r1, #0]
					pxBlock->pxNextFreeBlock = NULL;
 8002782:	2300      	movs	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002784:	f8c8 6000 	str.w	r6, [r8]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002788:	4286      	cmp	r6, r0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800278a:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800278c:	602b      	str	r3, [r5, #0]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800278e:	bf38      	it	cc
 8002790:	600e      	strcc	r6, [r1, #0]
	( void ) xTaskResumeAll();
 8002792:	f000 fb03 	bl	8002d9c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002796:	0763      	lsls	r3, r4, #29
 8002798:	d00a      	beq.n	80027b0 <pvPortMalloc+0x104>
 800279a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800279e:	b672      	cpsid	i
 80027a0:	f383 8811 	msr	BASEPRI, r3
 80027a4:	f3bf 8f6f 	isb	sy
 80027a8:	f3bf 8f4f 	dsb	sy
 80027ac:	b662      	cpsie	i
 80027ae:	e7fe      	b.n	80027ae <pvPortMalloc+0x102>
}
 80027b0:	4620      	mov	r0, r4
 80027b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80027b6:	bf00      	nop
 80027b8:	20020098 	.word	0x20020098
 80027bc:	20023c9c 	.word	0x20023c9c
 80027c0:	2002009c 	.word	0x2002009c
 80027c4:	20023ca8 	.word	0x20023ca8
 80027c8:	20023ca4 	.word	0x20023ca4
 80027cc:	20023ca0 	.word	0x20023ca0

080027d0 <vPortFree>:
{
 80027d0:	b510      	push	{r4, lr}
	if( pv != NULL )
 80027d2:	4604      	mov	r4, r0
 80027d4:	2800      	cmp	r0, #0
 80027d6:	d032      	beq.n	800283e <vPortFree+0x6e>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80027d8:	4a19      	ldr	r2, [pc, #100]	; (8002840 <vPortFree+0x70>)
 80027da:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80027de:	6812      	ldr	r2, [r2, #0]
 80027e0:	4213      	tst	r3, r2
 80027e2:	d10a      	bne.n	80027fa <vPortFree+0x2a>
 80027e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027e8:	b672      	cpsid	i
 80027ea:	f383 8811 	msr	BASEPRI, r3
 80027ee:	f3bf 8f6f 	isb	sy
 80027f2:	f3bf 8f4f 	dsb	sy
 80027f6:	b662      	cpsie	i
 80027f8:	e7fe      	b.n	80027f8 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80027fa:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80027fe:	b151      	cbz	r1, 8002816 <vPortFree+0x46>
 8002800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002804:	b672      	cpsid	i
 8002806:	f383 8811 	msr	BASEPRI, r3
 800280a:	f3bf 8f6f 	isb	sy
 800280e:	f3bf 8f4f 	dsb	sy
 8002812:	b662      	cpsie	i
 8002814:	e7fe      	b.n	8002814 <vPortFree+0x44>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002816:	ea23 0302 	bic.w	r3, r3, r2
 800281a:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800281e:	f000 fa21 	bl	8002c64 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002822:	4a08      	ldr	r2, [pc, #32]	; (8002844 <vPortFree+0x74>)
 8002824:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002828:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 800282c:	6811      	ldr	r1, [r2, #0]
 800282e:	440b      	add	r3, r1
 8002830:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002832:	f7ff ff17 	bl	8002664 <prvInsertBlockIntoFreeList>
}
 8002836:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 800283a:	f000 baaf 	b.w	8002d9c <xTaskResumeAll>
 800283e:	bd10      	pop	{r4, pc}
 8002840:	20023c9c 	.word	0x20023c9c
 8002844:	20023ca0 	.word	0x20023ca0

08002848 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800284c:	4606      	mov	r6, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800284e:	f7ff fe01 	bl	8002454 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002852:	4b2d      	ldr	r3, [pc, #180]	; (8002908 <prvAddNewTaskToReadyList+0xc0>)
		if( pxCurrentTCB == NULL )
 8002854:	4c2d      	ldr	r4, [pc, #180]	; (800290c <prvAddNewTaskToReadyList+0xc4>)
		uxCurrentNumberOfTasks++;
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	4f2d      	ldr	r7, [pc, #180]	; (8002910 <prvAddNewTaskToReadyList+0xc8>)
 800285a:	3201      	adds	r2, #1
 800285c:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800285e:	6825      	ldr	r5, [r4, #0]
 8002860:	2d00      	cmp	r5, #0
 8002862:	d145      	bne.n	80028f0 <prvAddNewTaskToReadyList+0xa8>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002864:	6026      	str	r6, [r4, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	2b01      	cmp	r3, #1
 800286a:	d11c      	bne.n	80028a6 <prvAddNewTaskToReadyList+0x5e>
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800286c:	1978      	adds	r0, r7, r5
 800286e:	3514      	adds	r5, #20
 8002870:	f7ff fd41 	bl	80022f6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002874:	2d8c      	cmp	r5, #140	; 0x8c
 8002876:	d1f9      	bne.n	800286c <prvAddNewTaskToReadyList+0x24>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002878:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 800293c <prvAddNewTaskToReadyList+0xf4>
	vListInitialise( &xDelayedTaskList2 );
 800287c:	4d25      	ldr	r5, [pc, #148]	; (8002914 <prvAddNewTaskToReadyList+0xcc>)
	vListInitialise( &xDelayedTaskList1 );
 800287e:	4640      	mov	r0, r8
 8002880:	f7ff fd39 	bl	80022f6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002884:	4628      	mov	r0, r5
 8002886:	f7ff fd36 	bl	80022f6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800288a:	4823      	ldr	r0, [pc, #140]	; (8002918 <prvAddNewTaskToReadyList+0xd0>)
 800288c:	f7ff fd33 	bl	80022f6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002890:	4822      	ldr	r0, [pc, #136]	; (800291c <prvAddNewTaskToReadyList+0xd4>)
 8002892:	f7ff fd30 	bl	80022f6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002896:	4822      	ldr	r0, [pc, #136]	; (8002920 <prvAddNewTaskToReadyList+0xd8>)
 8002898:	f7ff fd2d 	bl	80022f6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800289c:	4b21      	ldr	r3, [pc, #132]	; (8002924 <prvAddNewTaskToReadyList+0xdc>)
 800289e:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80028a2:	4b21      	ldr	r3, [pc, #132]	; (8002928 <prvAddNewTaskToReadyList+0xe0>)
 80028a4:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 80028a6:	4a21      	ldr	r2, [pc, #132]	; (800292c <prvAddNewTaskToReadyList+0xe4>)
		prvAddTaskToReadyList( pxNewTCB );
 80028a8:	4921      	ldr	r1, [pc, #132]	; (8002930 <prvAddNewTaskToReadyList+0xe8>)
		uxTaskNumber++;
 80028aa:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80028ac:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 80028ae:	3301      	adds	r3, #1
 80028b0:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80028b2:	2301      	movs	r3, #1
 80028b4:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 80028b6:	4093      	lsls	r3, r2
 80028b8:	4303      	orrs	r3, r0
 80028ba:	2014      	movs	r0, #20
 80028bc:	600b      	str	r3, [r1, #0]
 80028be:	1d31      	adds	r1, r6, #4
 80028c0:	fb00 7002 	mla	r0, r0, r2, r7
 80028c4:	f7ff fd25 	bl	8002312 <vListInsertEnd>
	taskEXIT_CRITICAL();
 80028c8:	f7ff fdea 	bl	80024a0 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80028cc:	4b19      	ldr	r3, [pc, #100]	; (8002934 <prvAddNewTaskToReadyList+0xec>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	b163      	cbz	r3, 80028ec <prvAddNewTaskToReadyList+0xa4>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80028d2:	6823      	ldr	r3, [r4, #0]
 80028d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028d6:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 80028d8:	429a      	cmp	r2, r3
 80028da:	d207      	bcs.n	80028ec <prvAddNewTaskToReadyList+0xa4>
			taskYIELD_IF_USING_PREEMPTION();
 80028dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028e0:	4b15      	ldr	r3, [pc, #84]	; (8002938 <prvAddNewTaskToReadyList+0xf0>)
 80028e2:	601a      	str	r2, [r3, #0]
 80028e4:	f3bf 8f4f 	dsb	sy
 80028e8:	f3bf 8f6f 	isb	sy
 80028ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 80028f0:	4b10      	ldr	r3, [pc, #64]	; (8002934 <prvAddNewTaskToReadyList+0xec>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d1d6      	bne.n	80028a6 <prvAddNewTaskToReadyList+0x5e>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80028f8:	6823      	ldr	r3, [r4, #0]
 80028fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028fc:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 80028fe:	429a      	cmp	r2, r3
 8002900:	d8d1      	bhi.n	80028a6 <prvAddNewTaskToReadyList+0x5e>
					pxCurrentTCB = pxNewTCB;
 8002902:	6026      	str	r6, [r4, #0]
 8002904:	e7cf      	b.n	80028a6 <prvAddNewTaskToReadyList+0x5e>
 8002906:	bf00      	nop
 8002908:	20023d48 	.word	0x20023d48
 800290c:	20023cb0 	.word	0x20023cb0
 8002910:	20023cbc 	.word	0x20023cbc
 8002914:	20023d74 	.word	0x20023d74
 8002918:	20023d90 	.word	0x20023d90
 800291c:	20023dbc 	.word	0x20023dbc
 8002920:	20023da8 	.word	0x20023da8
 8002924:	20023cb4 	.word	0x20023cb4
 8002928:	20023cb8 	.word	0x20023cb8
 800292c:	20023d58 	.word	0x20023d58
 8002930:	20023d5c 	.word	0x20023d5c
 8002934:	20023da4 	.word	0x20023da4
 8002938:	e000ed04 	.word	0xe000ed04
 800293c:	20023d60 	.word	0x20023d60

08002940 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002940:	4a06      	ldr	r2, [pc, #24]	; (800295c <prvResetNextTaskUnblockTime+0x1c>)
 8002942:	6813      	ldr	r3, [r2, #0]
 8002944:	6819      	ldr	r1, [r3, #0]
 8002946:	4b06      	ldr	r3, [pc, #24]	; (8002960 <prvResetNextTaskUnblockTime+0x20>)
 8002948:	b919      	cbnz	r1, 8002952 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800294a:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800294e:	601a      	str	r2, [r3, #0]
 8002950:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002952:	6812      	ldr	r2, [r2, #0]
 8002954:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002956:	68d2      	ldr	r2, [r2, #12]
 8002958:	6852      	ldr	r2, [r2, #4]
 800295a:	e7f8      	b.n	800294e <prvResetNextTaskUnblockTime+0xe>
 800295c:	20023cb4 	.word	0x20023cb4
 8002960:	20023d88 	.word	0x20023d88

08002964 <prvInitialiseNewTask.isra.2>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8002964:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002968:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800296a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800296e:	4680      	mov	r8, r0
 8002970:	4699      	mov	r9, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002972:	3a01      	subs	r2, #1
 8002974:	6b26      	ldr	r6, [r4, #48]	; 0x30
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8002976:	9f09      	ldr	r7, [sp, #36]	; 0x24
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002978:	eb06 0682 	add.w	r6, r6, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800297c:	f026 0607 	bic.w	r6, r6, #7
	if( pcName != NULL )
 8002980:	b391      	cbz	r1, 80029e8 <prvInitialiseNewTask.isra.2+0x84>
 8002982:	1e4b      	subs	r3, r1, #1
 8002984:	f104 0234 	add.w	r2, r4, #52	; 0x34
 8002988:	310f      	adds	r1, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800298a:	7858      	ldrb	r0, [r3, #1]
 800298c:	f802 0b01 	strb.w	r0, [r2], #1
			if( pcName[ x ] == ( char ) 0x00 )
 8002990:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8002994:	b108      	cbz	r0, 800299a <prvInitialiseNewTask.isra.2+0x36>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002996:	428b      	cmp	r3, r1
 8002998:	d1f7      	bne.n	800298a <prvInitialiseNewTask.isra.2+0x26>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800299a:	2300      	movs	r3, #0
 800299c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80029a0:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 80029a2:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80029a6:	1d20      	adds	r0, r4, #4
 80029a8:	2d06      	cmp	r5, #6
		pxNewTCB->uxMutexesHeld = 0;
 80029aa:	f8c4 a048 	str.w	sl, [r4, #72]	; 0x48
 80029ae:	bf28      	it	cs
 80029b0:	2506      	movcs	r5, #6
	pxNewTCB->uxPriority = uxPriority;
 80029b2:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 80029b4:	6465      	str	r5, [r4, #68]	; 0x44
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80029b6:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80029ba:	f7ff fca7 	bl	800230c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80029be:	f104 0018 	add.w	r0, r4, #24
 80029c2:	f7ff fca3 	bl	800230c <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 80029c6:	f8c4 a04c 	str.w	sl, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80029ca:	6124      	str	r4, [r4, #16]
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80029cc:	464a      	mov	r2, r9
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80029ce:	61a5      	str	r5, [r4, #24]
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80029d0:	4641      	mov	r1, r8
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80029d2:	6264      	str	r4, [r4, #36]	; 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80029d4:	4630      	mov	r0, r6
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80029d6:	f884 a050 	strb.w	sl, [r4, #80]	; 0x50
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80029da:	f7ff fd11 	bl	8002400 <pxPortInitialiseStack>
 80029de:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 80029e0:	b107      	cbz	r7, 80029e4 <prvInitialiseNewTask.isra.2+0x80>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80029e2:	603c      	str	r4, [r7, #0]
 80029e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80029e8:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
 80029ec:	e7d8      	b.n	80029a0 <prvInitialiseNewTask.isra.2+0x3c>

080029ee <prvDeleteTCB>:
	{
 80029ee:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80029f0:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
	{
 80029f4:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80029f6:	b93b      	cbnz	r3, 8002a08 <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 80029f8:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80029fa:	f7ff fee9 	bl	80027d0 <vPortFree>
				vPortFree( pxTCB );
 80029fe:	4620      	mov	r0, r4
	}
 8002a00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8002a04:	f7ff bee4 	b.w	80027d0 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d0f9      	beq.n	8002a00 <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002a0c:	2b02      	cmp	r3, #2
 8002a0e:	d00a      	beq.n	8002a26 <prvDeleteTCB+0x38>
 8002a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a14:	b672      	cpsid	i
 8002a16:	f383 8811 	msr	BASEPRI, r3
 8002a1a:	f3bf 8f6f 	isb	sy
 8002a1e:	f3bf 8f4f 	dsb	sy
 8002a22:	b662      	cpsie	i
 8002a24:	e7fe      	b.n	8002a24 <prvDeleteTCB+0x36>
 8002a26:	bd10      	pop	{r4, pc}

08002a28 <prvIdleTask>:
{
 8002a28:	b580      	push	{r7, lr}
				taskYIELD();
 8002a2a:	f8df 805c 	ldr.w	r8, [pc, #92]	; 8002a88 <prvIdleTask+0x60>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002a2e:	4f12      	ldr	r7, [pc, #72]	; (8002a78 <prvIdleTask+0x50>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002a30:	4c12      	ldr	r4, [pc, #72]	; (8002a7c <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 8002a32:	4d13      	ldr	r5, [pc, #76]	; (8002a80 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002a34:	6823      	ldr	r3, [r4, #0]
 8002a36:	b963      	cbnz	r3, 8002a52 <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002a38:	4b12      	ldr	r3, [pc, #72]	; (8002a84 <prvIdleTask+0x5c>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d9f8      	bls.n	8002a32 <prvIdleTask+0xa>
				taskYIELD();
 8002a40:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002a44:	f8c8 3000 	str.w	r3, [r8]
 8002a48:	f3bf 8f4f 	dsb	sy
 8002a4c:	f3bf 8f6f 	isb	sy
 8002a50:	e7ee      	b.n	8002a30 <prvIdleTask+0x8>
			taskENTER_CRITICAL();
 8002a52:	f7ff fcff 	bl	8002454 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002a5a:	1d30      	adds	r0, r6, #4
 8002a5c:	f7ff fc7c 	bl	8002358 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002a60:	682b      	ldr	r3, [r5, #0]
 8002a62:	3b01      	subs	r3, #1
 8002a64:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002a66:	6823      	ldr	r3, [r4, #0]
 8002a68:	3b01      	subs	r3, #1
 8002a6a:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8002a6c:	f7ff fd18 	bl	80024a0 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8002a70:	4630      	mov	r0, r6
 8002a72:	f7ff ffbc 	bl	80029ee <prvDeleteTCB>
 8002a76:	e7dd      	b.n	8002a34 <prvIdleTask+0xc>
 8002a78:	20023dbc 	.word	0x20023dbc
 8002a7c:	20023d4c 	.word	0x20023d4c
 8002a80:	20023d48 	.word	0x20023d48
 8002a84:	20023cbc 	.word	0x20023cbc
 8002a88:	e000ed04 	.word	0xe000ed04

08002a8c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002a8e:	4b1b      	ldr	r3, [pc, #108]	; (8002afc <prvAddCurrentTaskToDelayedList+0x70>)
{
 8002a90:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002a92:	4e1b      	ldr	r6, [pc, #108]	; (8002b00 <prvAddCurrentTaskToDelayedList+0x74>)
{
 8002a94:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 8002a96:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002a98:	6830      	ldr	r0, [r6, #0]
 8002a9a:	3004      	adds	r0, #4
 8002a9c:	f7ff fc5c 	bl	8002358 <uxListRemove>
 8002aa0:	4633      	mov	r3, r6
 8002aa2:	b940      	cbnz	r0, 8002ab6 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002aa4:	6831      	ldr	r1, [r6, #0]
 8002aa6:	2001      	movs	r0, #1
 8002aa8:	4e16      	ldr	r6, [pc, #88]	; (8002b04 <prvAddCurrentTaskToDelayedList+0x78>)
 8002aaa:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8002aac:	6832      	ldr	r2, [r6, #0]
 8002aae:	4088      	lsls	r0, r1
 8002ab0:	ea22 0200 	bic.w	r2, r2, r0
 8002ab4:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002ab6:	1c62      	adds	r2, r4, #1
 8002ab8:	d107      	bne.n	8002aca <prvAddCurrentTaskToDelayedList+0x3e>
 8002aba:	b137      	cbz	r7, 8002aca <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002abc:	6819      	ldr	r1, [r3, #0]
 8002abe:	4812      	ldr	r0, [pc, #72]	; (8002b08 <prvAddCurrentTaskToDelayedList+0x7c>)
 8002ac0:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002ac2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002ac6:	f7ff bc24 	b.w	8002312 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002aca:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002acc:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 8002ace:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002ad0:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 8002ad2:	d907      	bls.n	8002ae4 <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002ad4:	4a0d      	ldr	r2, [pc, #52]	; (8002b0c <prvAddCurrentTaskToDelayedList+0x80>)
 8002ad6:	6810      	ldr	r0, [r2, #0]
 8002ad8:	6819      	ldr	r1, [r3, #0]
}
 8002ada:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002ade:	3104      	adds	r1, #4
 8002ae0:	f7ff bc23 	b.w	800232a <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002ae4:	4a0a      	ldr	r2, [pc, #40]	; (8002b10 <prvAddCurrentTaskToDelayedList+0x84>)
 8002ae6:	6810      	ldr	r0, [r2, #0]
 8002ae8:	6819      	ldr	r1, [r3, #0]
 8002aea:	3104      	adds	r1, #4
 8002aec:	f7ff fc1d 	bl	800232a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002af0:	4b08      	ldr	r3, [pc, #32]	; (8002b14 <prvAddCurrentTaskToDelayedList+0x88>)
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	4294      	cmp	r4, r2
 8002af6:	d200      	bcs.n	8002afa <prvAddCurrentTaskToDelayedList+0x6e>
					xNextTaskUnblockTime = xTimeToWake;
 8002af8:	601c      	str	r4, [r3, #0]
 8002afa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002afc:	20023dd0 	.word	0x20023dd0
 8002b00:	20023cb0 	.word	0x20023cb0
 8002b04:	20023d5c 	.word	0x20023d5c
 8002b08:	20023da8 	.word	0x20023da8
 8002b0c:	20023cb8 	.word	0x20023cb8
 8002b10:	20023cb4 	.word	0x20023cb4
 8002b14:	20023d88 	.word	0x20023d88

08002b18 <prvTaskIsTaskSuspended.part.0>:
 8002b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b1c:	b672      	cpsid	i
 8002b1e:	f383 8811 	msr	BASEPRI, r3
 8002b22:	f3bf 8f6f 	isb	sy
 8002b26:	f3bf 8f4f 	dsb	sy
 8002b2a:	b662      	cpsie	i
 8002b2c:	e7fe      	b.n	8002b2c <prvTaskIsTaskSuspended.part.0+0x14>

08002b2e <xTaskCreateStatic>:
	{
 8002b2e:	b570      	push	{r4, r5, r6, lr}
 8002b30:	b086      	sub	sp, #24
 8002b32:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8002b34:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 8002b36:	b90d      	cbnz	r5, 8002b3c <xTaskCreateStatic+0xe>
 8002b38:	f7ff ffee 	bl	8002b18 <prvTaskIsTaskSuspended.part.0>
		configASSERT( pxTaskBuffer != NULL );
 8002b3c:	b954      	cbnz	r4, 8002b54 <xTaskCreateStatic+0x26>
 8002b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b42:	b672      	cpsid	i
 8002b44:	f383 8811 	msr	BASEPRI, r3
 8002b48:	f3bf 8f6f 	isb	sy
 8002b4c:	f3bf 8f4f 	dsb	sy
 8002b50:	b662      	cpsie	i
 8002b52:	e7fe      	b.n	8002b52 <xTaskCreateStatic+0x24>
			volatile size_t xSize = sizeof( StaticTask_t );
 8002b54:	2654      	movs	r6, #84	; 0x54
 8002b56:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002b58:	9e05      	ldr	r6, [sp, #20]
 8002b5a:	2e54      	cmp	r6, #84	; 0x54
 8002b5c:	d00a      	beq.n	8002b74 <xTaskCreateStatic+0x46>
 8002b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b62:	b672      	cpsid	i
 8002b64:	f383 8811 	msr	BASEPRI, r3
 8002b68:	f3bf 8f6f 	isb	sy
 8002b6c:	f3bf 8f4f 	dsb	sy
 8002b70:	b662      	cpsie	i
 8002b72:	e7fe      	b.n	8002b72 <xTaskCreateStatic+0x44>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002b74:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002b76:	2502      	movs	r5, #2
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002b78:	9e05      	ldr	r6, [sp, #20]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002b7a:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002b7e:	ad04      	add	r5, sp, #16
 8002b80:	9402      	str	r4, [sp, #8]
 8002b82:	9501      	str	r5, [sp, #4]
 8002b84:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8002b86:	9500      	str	r5, [sp, #0]
 8002b88:	f7ff feec 	bl	8002964 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002b8c:	4620      	mov	r0, r4
 8002b8e:	f7ff fe5b 	bl	8002848 <prvAddNewTaskToReadyList>
	}
 8002b92:	9804      	ldr	r0, [sp, #16]
 8002b94:	b006      	add	sp, #24
 8002b96:	bd70      	pop	{r4, r5, r6, pc}

08002b98 <xTaskCreate>:
	{
 8002b98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002b9c:	4607      	mov	r7, r0
 8002b9e:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002ba0:	0090      	lsls	r0, r2, #2
	{
 8002ba2:	4688      	mov	r8, r1
 8002ba4:	4616      	mov	r6, r2
 8002ba6:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002ba8:	f7ff fd80 	bl	80026ac <pvPortMalloc>
			if( pxStack != NULL )
 8002bac:	4605      	mov	r5, r0
 8002bae:	b1e8      	cbz	r0, 8002bec <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002bb0:	2054      	movs	r0, #84	; 0x54
 8002bb2:	f7ff fd7b 	bl	80026ac <pvPortMalloc>
				if( pxNewTCB != NULL )
 8002bb6:	4604      	mov	r4, r0
 8002bb8:	b1a8      	cbz	r0, 8002be6 <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002bba:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
 8002bbc:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002bbe:	4632      	mov	r2, r6
 8002bc0:	4641      	mov	r1, r8
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002bc2:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002bc6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002bc8:	9002      	str	r0, [sp, #8]
 8002bca:	4638      	mov	r0, r7
 8002bcc:	9301      	str	r3, [sp, #4]
 8002bce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002bd0:	9300      	str	r3, [sp, #0]
 8002bd2:	464b      	mov	r3, r9
 8002bd4:	f7ff fec6 	bl	8002964 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002bd8:	4620      	mov	r0, r4
 8002bda:	f7ff fe35 	bl	8002848 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002bde:	2001      	movs	r0, #1
	}
 8002be0:	b005      	add	sp, #20
 8002be2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8002be6:	4628      	mov	r0, r5
 8002be8:	f7ff fdf2 	bl	80027d0 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002bec:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 8002bf0:	e7f6      	b.n	8002be0 <xTaskCreate+0x48>
	...

08002bf4 <vTaskStartScheduler>:
{
 8002bf4:	b510      	push	{r4, lr}
 8002bf6:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002bf8:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002bfa:	aa07      	add	r2, sp, #28
 8002bfc:	a906      	add	r1, sp, #24
 8002bfe:	a805      	add	r0, sp, #20
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002c00:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002c02:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002c04:	f000 f9b6 	bl	8002f74 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002c08:	9b05      	ldr	r3, [sp, #20]
 8002c0a:	9400      	str	r4, [sp, #0]
 8002c0c:	9302      	str	r3, [sp, #8]
 8002c0e:	9b06      	ldr	r3, [sp, #24]
 8002c10:	9a07      	ldr	r2, [sp, #28]
 8002c12:	9301      	str	r3, [sp, #4]
 8002c14:	4623      	mov	r3, r4
 8002c16:	490e      	ldr	r1, [pc, #56]	; (8002c50 <vTaskStartScheduler+0x5c>)
 8002c18:	480e      	ldr	r0, [pc, #56]	; (8002c54 <vTaskStartScheduler+0x60>)
 8002c1a:	f7ff ff88 	bl	8002b2e <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8002c1e:	b1a0      	cbz	r0, 8002c4a <vTaskStartScheduler+0x56>
 8002c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c24:	b672      	cpsid	i
 8002c26:	f383 8811 	msr	BASEPRI, r3
 8002c2a:	f3bf 8f6f 	isb	sy
 8002c2e:	f3bf 8f4f 	dsb	sy
 8002c32:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
 8002c34:	f04f 32ff 	mov.w	r2, #4294967295
 8002c38:	4b07      	ldr	r3, [pc, #28]	; (8002c58 <vTaskStartScheduler+0x64>)
 8002c3a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	4b07      	ldr	r3, [pc, #28]	; (8002c5c <vTaskStartScheduler+0x68>)
 8002c40:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002c42:	4b07      	ldr	r3, [pc, #28]	; (8002c60 <vTaskStartScheduler+0x6c>)
 8002c44:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8002c46:	f7ff fca7 	bl	8002598 <xPortStartScheduler>
}
 8002c4a:	b008      	add	sp, #32
 8002c4c:	bd10      	pop	{r4, pc}
 8002c4e:	bf00      	nop
 8002c50:	08004465 	.word	0x08004465
 8002c54:	08002a29 	.word	0x08002a29
 8002c58:	20023d88 	.word	0x20023d88
 8002c5c:	20023da4 	.word	0x20023da4
 8002c60:	20023dd0 	.word	0x20023dd0

08002c64 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8002c64:	4a02      	ldr	r2, [pc, #8]	; (8002c70 <vTaskSuspendAll+0xc>)
 8002c66:	6813      	ldr	r3, [r2, #0]
 8002c68:	3301      	adds	r3, #1
 8002c6a:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop
 8002c70:	20023d54 	.word	0x20023d54

08002c74 <xTaskIncrementTick>:
{
 8002c74:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002c78:	4b3d      	ldr	r3, [pc, #244]	; (8002d70 <xTaskIncrementTick+0xfc>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d16f      	bne.n	8002d60 <xTaskIncrementTick+0xec>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002c80:	4b3c      	ldr	r3, [pc, #240]	; (8002d74 <xTaskIncrementTick+0x100>)
 8002c82:	681c      	ldr	r4, [r3, #0]
 8002c84:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8002c86:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002c88:	b9cc      	cbnz	r4, 8002cbe <xTaskIncrementTick+0x4a>
			taskSWITCH_DELAYED_LISTS();
 8002c8a:	4b3b      	ldr	r3, [pc, #236]	; (8002d78 <xTaskIncrementTick+0x104>)
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	6812      	ldr	r2, [r2, #0]
 8002c90:	b152      	cbz	r2, 8002ca8 <xTaskIncrementTick+0x34>
 8002c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c96:	b672      	cpsid	i
 8002c98:	f383 8811 	msr	BASEPRI, r3
 8002c9c:	f3bf 8f6f 	isb	sy
 8002ca0:	f3bf 8f4f 	dsb	sy
 8002ca4:	b662      	cpsie	i
 8002ca6:	e7fe      	b.n	8002ca6 <xTaskIncrementTick+0x32>
 8002ca8:	4a34      	ldr	r2, [pc, #208]	; (8002d7c <xTaskIncrementTick+0x108>)
 8002caa:	6819      	ldr	r1, [r3, #0]
 8002cac:	6810      	ldr	r0, [r2, #0]
 8002cae:	6018      	str	r0, [r3, #0]
 8002cb0:	6011      	str	r1, [r2, #0]
 8002cb2:	4a33      	ldr	r2, [pc, #204]	; (8002d80 <xTaskIncrementTick+0x10c>)
 8002cb4:	6813      	ldr	r3, [r2, #0]
 8002cb6:	3301      	adds	r3, #1
 8002cb8:	6013      	str	r3, [r2, #0]
 8002cba:	f7ff fe41 	bl	8002940 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002cbe:	4d31      	ldr	r5, [pc, #196]	; (8002d84 <xTaskIncrementTick+0x110>)
 8002cc0:	f04f 0b00 	mov.w	fp, #0
 8002cc4:	4f30      	ldr	r7, [pc, #192]	; (8002d88 <xTaskIncrementTick+0x114>)
 8002cc6:	682b      	ldr	r3, [r5, #0]
 8002cc8:	429c      	cmp	r4, r3
 8002cca:	d30a      	bcc.n	8002ce2 <xTaskIncrementTick+0x6e>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002ccc:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 8002d78 <xTaskIncrementTick+0x104>
					prvAddTaskToReadyList( pxTCB );
 8002cd0:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8002d98 <xTaskIncrementTick+0x124>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002cd4:	f8da 2000 	ldr.w	r2, [sl]
 8002cd8:	6812      	ldr	r2, [r2, #0]
 8002cda:	b9a2      	cbnz	r2, 8002d06 <xTaskIncrementTick+0x92>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002cdc:	f04f 32ff 	mov.w	r2, #4294967295
 8002ce0:	602a      	str	r2, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002ce2:	683a      	ldr	r2, [r7, #0]
 8002ce4:	4b29      	ldr	r3, [pc, #164]	; (8002d8c <xTaskIncrementTick+0x118>)
 8002ce6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002ce8:	2214      	movs	r2, #20
 8002cea:	434a      	muls	r2, r1
 8002cec:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 8002cee:	2a02      	cmp	r2, #2
 8002cf0:	bf28      	it	cs
 8002cf2:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 8002cf6:	4a26      	ldr	r2, [pc, #152]	; (8002d90 <xTaskIncrementTick+0x11c>)
 8002cf8:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 8002cfa:	2a00      	cmp	r2, #0
}
 8002cfc:	bf0c      	ite	eq
 8002cfe:	4658      	moveq	r0, fp
 8002d00:	2001      	movne	r0, #1
 8002d02:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d06:	f8da 2000 	ldr.w	r2, [sl]
 8002d0a:	68d2      	ldr	r2, [r2, #12]
 8002d0c:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002d0e:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 8002d10:	428c      	cmp	r4, r1
 8002d12:	d201      	bcs.n	8002d18 <xTaskIncrementTick+0xa4>
						xNextTaskUnblockTime = xItemValue;
 8002d14:	6029      	str	r1, [r5, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002d16:	e7e4      	b.n	8002ce2 <xTaskIncrementTick+0x6e>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002d18:	f106 0804 	add.w	r8, r6, #4
 8002d1c:	4640      	mov	r0, r8
 8002d1e:	f7ff fb1b 	bl	8002358 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002d22:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8002d24:	b119      	cbz	r1, 8002d2e <xTaskIncrementTick+0xba>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002d26:	f106 0018 	add.w	r0, r6, #24
 8002d2a:	f7ff fb15 	bl	8002358 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002d2e:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8002d30:	2201      	movs	r2, #1
 8002d32:	f8d9 3000 	ldr.w	r3, [r9]
 8002d36:	f04f 0e14 	mov.w	lr, #20
 8002d3a:	fa02 f100 	lsl.w	r1, r2, r0
 8002d3e:	4319      	orrs	r1, r3
 8002d40:	4b12      	ldr	r3, [pc, #72]	; (8002d8c <xTaskIncrementTick+0x118>)
 8002d42:	f8c9 1000 	str.w	r1, [r9]
 8002d46:	4641      	mov	r1, r8
 8002d48:	fb0e 3000 	mla	r0, lr, r0, r3
 8002d4c:	f7ff fae1 	bl	8002312 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002d50:	6838      	ldr	r0, [r7, #0]
 8002d52:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8002d54:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8002d56:	4291      	cmp	r1, r2
 8002d58:	bf28      	it	cs
 8002d5a:	f04f 0b01 	movcs.w	fp, #1
 8002d5e:	e7b9      	b.n	8002cd4 <xTaskIncrementTick+0x60>
		++uxPendedTicks;
 8002d60:	4a0c      	ldr	r2, [pc, #48]	; (8002d94 <xTaskIncrementTick+0x120>)
BaseType_t xSwitchRequired = pdFALSE;
 8002d62:	f04f 0b00 	mov.w	fp, #0
		++uxPendedTicks;
 8002d66:	6813      	ldr	r3, [r2, #0]
 8002d68:	3301      	adds	r3, #1
 8002d6a:	6013      	str	r3, [r2, #0]
 8002d6c:	e7c3      	b.n	8002cf6 <xTaskIncrementTick+0x82>
 8002d6e:	bf00      	nop
 8002d70:	20023d54 	.word	0x20023d54
 8002d74:	20023dd0 	.word	0x20023dd0
 8002d78:	20023cb4 	.word	0x20023cb4
 8002d7c:	20023cb8 	.word	0x20023cb8
 8002d80:	20023d8c 	.word	0x20023d8c
 8002d84:	20023d88 	.word	0x20023d88
 8002d88:	20023cb0 	.word	0x20023cb0
 8002d8c:	20023cbc 	.word	0x20023cbc
 8002d90:	20023dd4 	.word	0x20023dd4
 8002d94:	20023d50 	.word	0x20023d50
 8002d98:	20023d5c 	.word	0x20023d5c

08002d9c <xTaskResumeAll>:
{
 8002d9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8002da0:	4c32      	ldr	r4, [pc, #200]	; (8002e6c <xTaskResumeAll+0xd0>)
 8002da2:	6823      	ldr	r3, [r4, #0]
 8002da4:	b953      	cbnz	r3, 8002dbc <xTaskResumeAll+0x20>
 8002da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002daa:	b672      	cpsid	i
 8002dac:	f383 8811 	msr	BASEPRI, r3
 8002db0:	f3bf 8f6f 	isb	sy
 8002db4:	f3bf 8f4f 	dsb	sy
 8002db8:	b662      	cpsie	i
 8002dba:	e7fe      	b.n	8002dba <xTaskResumeAll+0x1e>
	taskENTER_CRITICAL();
 8002dbc:	f7ff fb4a 	bl	8002454 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8002dc0:	6823      	ldr	r3, [r4, #0]
 8002dc2:	3b01      	subs	r3, #1
 8002dc4:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002dc6:	6824      	ldr	r4, [r4, #0]
 8002dc8:	b12c      	cbz	r4, 8002dd6 <xTaskResumeAll+0x3a>
BaseType_t xAlreadyYielded = pdFALSE;
 8002dca:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8002dcc:	f7ff fb68 	bl	80024a0 <vPortExitCritical>
}
 8002dd0:	4620      	mov	r0, r4
 8002dd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002dd6:	4b26      	ldr	r3, [pc, #152]	; (8002e70 <xTaskResumeAll+0xd4>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d0f5      	beq.n	8002dca <xTaskResumeAll+0x2e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002dde:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8002e88 <xTaskResumeAll+0xec>
					prvAddTaskToReadyList( pxTCB );
 8002de2:	4f24      	ldr	r7, [pc, #144]	; (8002e74 <xTaskResumeAll+0xd8>)
 8002de4:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8002e8c <xTaskResumeAll+0xf0>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002de8:	f8d9 3000 	ldr.w	r3, [r9]
 8002dec:	b9e3      	cbnz	r3, 8002e28 <xTaskResumeAll+0x8c>
				if( pxTCB != NULL )
 8002dee:	b10c      	cbz	r4, 8002df4 <xTaskResumeAll+0x58>
					prvResetNextTaskUnblockTime();
 8002df0:	f7ff fda6 	bl	8002940 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002df4:	4d20      	ldr	r5, [pc, #128]	; (8002e78 <xTaskResumeAll+0xdc>)
 8002df6:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002df8:	b144      	cbz	r4, 8002e0c <xTaskResumeAll+0x70>
								xYieldPending = pdTRUE;
 8002dfa:	4e20      	ldr	r6, [pc, #128]	; (8002e7c <xTaskResumeAll+0xe0>)
 8002dfc:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8002dfe:	f7ff ff39 	bl	8002c74 <xTaskIncrementTick>
 8002e02:	b100      	cbz	r0, 8002e06 <xTaskResumeAll+0x6a>
								xYieldPending = pdTRUE;
 8002e04:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002e06:	3c01      	subs	r4, #1
 8002e08:	d1f9      	bne.n	8002dfe <xTaskResumeAll+0x62>
						uxPendedTicks = 0;
 8002e0a:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8002e0c:	4b1b      	ldr	r3, [pc, #108]	; (8002e7c <xTaskResumeAll+0xe0>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d0da      	beq.n	8002dca <xTaskResumeAll+0x2e>
					taskYIELD_IF_USING_PREEMPTION();
 8002e14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e18:	4b19      	ldr	r3, [pc, #100]	; (8002e80 <xTaskResumeAll+0xe4>)
 8002e1a:	601a      	str	r2, [r3, #0]
 8002e1c:	f3bf 8f4f 	dsb	sy
 8002e20:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8002e24:	2401      	movs	r4, #1
 8002e26:	e7d1      	b.n	8002dcc <xTaskResumeAll+0x30>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e28:	f8d9 300c 	ldr.w	r3, [r9, #12]
					prvAddTaskToReadyList( pxTCB );
 8002e2c:	2501      	movs	r5, #1
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e2e:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002e30:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002e32:	f104 0018 	add.w	r0, r4, #24
 8002e36:	f7ff fa8f 	bl	8002358 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002e3a:	4630      	mov	r0, r6
 8002e3c:	f7ff fa8c 	bl	8002358 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002e40:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002e42:	6839      	ldr	r1, [r7, #0]
 8002e44:	2014      	movs	r0, #20
 8002e46:	fa05 f302 	lsl.w	r3, r5, r2
 8002e4a:	fb00 8002 	mla	r0, r0, r2, r8
 8002e4e:	430b      	orrs	r3, r1
 8002e50:	4631      	mov	r1, r6
 8002e52:	603b      	str	r3, [r7, #0]
 8002e54:	f7ff fa5d 	bl	8002312 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002e58:	4b0a      	ldr	r3, [pc, #40]	; (8002e84 <xTaskResumeAll+0xe8>)
 8002e5a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d3c1      	bcc.n	8002de8 <xTaskResumeAll+0x4c>
						xYieldPending = pdTRUE;
 8002e64:	4b05      	ldr	r3, [pc, #20]	; (8002e7c <xTaskResumeAll+0xe0>)
 8002e66:	601d      	str	r5, [r3, #0]
 8002e68:	e7be      	b.n	8002de8 <xTaskResumeAll+0x4c>
 8002e6a:	bf00      	nop
 8002e6c:	20023d54 	.word	0x20023d54
 8002e70:	20023d48 	.word	0x20023d48
 8002e74:	20023d5c 	.word	0x20023d5c
 8002e78:	20023d50 	.word	0x20023d50
 8002e7c:	20023dd4 	.word	0x20023dd4
 8002e80:	e000ed04 	.word	0xe000ed04
 8002e84:	20023cb0 	.word	0x20023cb0
 8002e88:	20023d90 	.word	0x20023d90
 8002e8c:	20023cbc 	.word	0x20023cbc

08002e90 <vTaskDelay>:
	{
 8002e90:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002e92:	b940      	cbnz	r0, 8002ea6 <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8002e94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e98:	4b0e      	ldr	r3, [pc, #56]	; (8002ed4 <vTaskDelay+0x44>)
 8002e9a:	601a      	str	r2, [r3, #0]
 8002e9c:	f3bf 8f4f 	dsb	sy
 8002ea0:	f3bf 8f6f 	isb	sy
 8002ea4:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8002ea6:	4b0c      	ldr	r3, [pc, #48]	; (8002ed8 <vTaskDelay+0x48>)
 8002ea8:	6819      	ldr	r1, [r3, #0]
 8002eaa:	b151      	cbz	r1, 8002ec2 <vTaskDelay+0x32>
 8002eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eb0:	b672      	cpsid	i
 8002eb2:	f383 8811 	msr	BASEPRI, r3
 8002eb6:	f3bf 8f6f 	isb	sy
 8002eba:	f3bf 8f4f 	dsb	sy
 8002ebe:	b662      	cpsie	i
 8002ec0:	e7fe      	b.n	8002ec0 <vTaskDelay+0x30>
			vTaskSuspendAll();
 8002ec2:	f7ff fecf 	bl	8002c64 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002ec6:	f7ff fde1 	bl	8002a8c <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8002eca:	f7ff ff67 	bl	8002d9c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8002ece:	2800      	cmp	r0, #0
 8002ed0:	d0e0      	beq.n	8002e94 <vTaskDelay+0x4>
 8002ed2:	bd08      	pop	{r3, pc}
 8002ed4:	e000ed04 	.word	0xe000ed04
 8002ed8:	20023d54 	.word	0x20023d54

08002edc <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002edc:	4b18      	ldr	r3, [pc, #96]	; (8002f40 <vTaskSwitchContext+0x64>)
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	4b18      	ldr	r3, [pc, #96]	; (8002f44 <vTaskSwitchContext+0x68>)
{
 8002ee2:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002ee4:	b112      	cbz	r2, 8002eec <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8002ee6:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ee8:	601a      	str	r2, [r3, #0]
 8002eea:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 8002eec:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002eee:	4b16      	ldr	r3, [pc, #88]	; (8002f48 <vTaskSwitchContext+0x6c>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002ef2:	fab3 f383 	clz	r3, r3
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	2214      	movs	r2, #20
 8002efa:	4914      	ldr	r1, [pc, #80]	; (8002f4c <vTaskSwitchContext+0x70>)
 8002efc:	f1c3 031f 	rsb	r3, r3, #31
 8002f00:	435a      	muls	r2, r3
 8002f02:	588c      	ldr	r4, [r1, r2]
 8002f04:	1888      	adds	r0, r1, r2
 8002f06:	b954      	cbnz	r4, 8002f1e <vTaskSwitchContext+0x42>
	__asm volatile
 8002f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f0c:	b672      	cpsid	i
 8002f0e:	f383 8811 	msr	BASEPRI, r3
 8002f12:	f3bf 8f6f 	isb	sy
 8002f16:	f3bf 8f4f 	dsb	sy
 8002f1a:	b662      	cpsie	i
 8002f1c:	e7fe      	b.n	8002f1c <vTaskSwitchContext+0x40>
 8002f1e:	6844      	ldr	r4, [r0, #4]
 8002f20:	3208      	adds	r2, #8
 8002f22:	6864      	ldr	r4, [r4, #4]
 8002f24:	440a      	add	r2, r1
 8002f26:	4294      	cmp	r4, r2
 8002f28:	6044      	str	r4, [r0, #4]
 8002f2a:	bf04      	itt	eq
 8002f2c:	6862      	ldreq	r2, [r4, #4]
 8002f2e:	6042      	streq	r2, [r0, #4]
 8002f30:	2214      	movs	r2, #20
 8002f32:	fb02 1303 	mla	r3, r2, r3, r1
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	68da      	ldr	r2, [r3, #12]
 8002f3a:	4b05      	ldr	r3, [pc, #20]	; (8002f50 <vTaskSwitchContext+0x74>)
 8002f3c:	e7d4      	b.n	8002ee8 <vTaskSwitchContext+0xc>
 8002f3e:	bf00      	nop
 8002f40:	20023d54 	.word	0x20023d54
 8002f44:	20023dd4 	.word	0x20023dd4
 8002f48:	20023d5c 	.word	0x20023d5c
 8002f4c:	20023cbc 	.word	0x20023cbc
 8002f50:	20023cb0 	.word	0x20023cb0

08002f54 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8002f54:	4b05      	ldr	r3, [pc, #20]	; (8002f6c <xTaskGetSchedulerState+0x18>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	b133      	cbz	r3, 8002f68 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f5a:	4b05      	ldr	r3, [pc, #20]	; (8002f70 <xTaskGetSchedulerState+0x1c>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 8002f60:	bf0c      	ite	eq
 8002f62:	2002      	moveq	r0, #2
 8002f64:	2000      	movne	r0, #0
 8002f66:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002f68:	2001      	movs	r0, #1
	}
 8002f6a:	4770      	bx	lr
 8002f6c:	20023da4 	.word	0x20023da4
 8002f70:	20023d54 	.word	0x20023d54

08002f74 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002f74:	4b03      	ldr	r3, [pc, #12]	; (8002f84 <vApplicationGetIdleTaskMemory+0x10>)
 8002f76:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002f78:	4b03      	ldr	r3, [pc, #12]	; (8002f88 <vApplicationGetIdleTaskMemory+0x14>)
 8002f7a:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002f7c:	2380      	movs	r3, #128	; 0x80
 8002f7e:	6013      	str	r3, [r2, #0]
 8002f80:	4770      	bx	lr
 8002f82:	bf00      	nop
 8002f84:	20023fd8 	.word	0x20023fd8
 8002f88:	20023dd8 	.word	0x20023dd8

08002f8c <StartDefaultTask>:
{
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  printf("Hellooooooooooooooooooooooooooo\n\r");
 8002f8c:	4c04      	ldr	r4, [pc, #16]	; (8002fa0 <StartDefaultTask+0x14>)
{
 8002f8e:	b508      	push	{r3, lr}
	  printf("Hellooooooooooooooooooooooooooo\n\r");
 8002f90:	4620      	mov	r0, r4
 8002f92:	f000 fb4d 	bl	8003630 <iprintf>
    osDelay(100);
 8002f96:	2064      	movs	r0, #100	; 0x64
 8002f98:	f7ff f9a5 	bl	80022e6 <osDelay>
 8002f9c:	e7f8      	b.n	8002f90 <StartDefaultTask+0x4>
 8002f9e:	bf00      	nop
 8002fa0:	0800446a 	.word	0x0800446a

08002fa4 <__io_putchar>:
{
 8002fa4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  while (HAL_OK != HAL_UART_Transmit(&huart3, (uint8_t *) &ch, 1, 30000))
 8002fa6:	4d08      	ldr	r5, [pc, #32]	; (8002fc8 <__io_putchar+0x24>)
{
 8002fa8:	ac02      	add	r4, sp, #8
 8002faa:	f844 0d04 	str.w	r0, [r4, #-4]!
  while (HAL_OK != HAL_UART_Transmit(&huart3, (uint8_t *) &ch, 1, 30000))
 8002fae:	f247 5330 	movw	r3, #30000	; 0x7530
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	4621      	mov	r1, r4
 8002fb6:	4628      	mov	r0, r5
 8002fb8:	f7fe fee0 	bl	8001d7c <HAL_UART_Transmit>
 8002fbc:	2800      	cmp	r0, #0
 8002fbe:	d1f6      	bne.n	8002fae <__io_putchar+0xa>
}
 8002fc0:	9801      	ldr	r0, [sp, #4]
 8002fc2:	b003      	add	sp, #12
 8002fc4:	bd30      	pop	{r4, r5, pc}
 8002fc6:	bf00      	nop
 8002fc8:	20024040 	.word	0x20024040

08002fcc <__io_getchar>:
{
 8002fcc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t ch = 0;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	ac02      	add	r4, sp, #8
  while (HAL_OK != HAL_UART_Receive(&huart3, (uint8_t *)&ch, 1, 30000))
 8002fd2:	4d08      	ldr	r5, [pc, #32]	; (8002ff4 <__io_getchar+0x28>)
  uint8_t ch = 0;
 8002fd4:	f804 3d01 	strb.w	r3, [r4, #-1]!
  while (HAL_OK != HAL_UART_Receive(&huart3, (uint8_t *)&ch, 1, 30000))
 8002fd8:	f247 5330 	movw	r3, #30000	; 0x7530
 8002fdc:	2201      	movs	r2, #1
 8002fde:	4621      	mov	r1, r4
 8002fe0:	4628      	mov	r0, r5
 8002fe2:	f7fe ff23 	bl	8001e2c <HAL_UART_Receive>
 8002fe6:	2800      	cmp	r0, #0
 8002fe8:	d1f6      	bne.n	8002fd8 <__io_getchar+0xc>
}
 8002fea:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8002fee:	b003      	add	sp, #12
 8002ff0:	bd30      	pop	{r4, r5, pc}
 8002ff2:	bf00      	nop
 8002ff4:	20024040 	.word	0x20024040

08002ff8 <SystemClock_Config>:
{
 8002ff8:	b510      	push	{r4, lr}
 8002ffa:	b0b8      	sub	sp, #224	; 0xe0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002ffc:	2234      	movs	r2, #52	; 0x34
 8002ffe:	2100      	movs	r1, #0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003000:	2402      	movs	r4, #2
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003002:	a807      	add	r0, sp, #28
 8003004:	f000 fb0c 	bl	8003620 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003008:	2214      	movs	r2, #20
 800300a:	2100      	movs	r1, #0
 800300c:	a802      	add	r0, sp, #8
 800300e:	f000 fb07 	bl	8003620 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003012:	2100      	movs	r1, #0
 8003014:	2290      	movs	r2, #144	; 0x90
 8003016:	a814      	add	r0, sp, #80	; 0x50
 8003018:	f000 fb02 	bl	8003620 <memset>
  HAL_PWR_EnableBkUpAccess();
 800301c:	f7fd ff2c 	bl	8000e78 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_PWR_CLK_ENABLE();
 8003020:	4b1f      	ldr	r3, [pc, #124]	; (80030a0 <SystemClock_Config+0xa8>)
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003022:	a807      	add	r0, sp, #28
  __HAL_RCC_PWR_CLK_ENABLE();
 8003024:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003026:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800302a:	641a      	str	r2, [r3, #64]	; 0x40
 800302c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800302e:	4a1d      	ldr	r2, [pc, #116]	; (80030a4 <SystemClock_Config+0xac>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8003030:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003034:	9300      	str	r3, [sp, #0]
 8003036:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003038:	6813      	ldr	r3, [r2, #0]
 800303a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800303e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003042:	6013      	str	r3, [r2, #0]
 8003044:	6813      	ldr	r3, [r2, #0]
  RCC_OscInitStruct.PLL.PLLN = 96;
 8003046:	2260      	movs	r2, #96	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003048:	940d      	str	r4, [sp, #52]	; 0x34
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800304a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
  RCC_OscInitStruct.PLL.PLLN = 96;
 800304e:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003050:	9411      	str	r4, [sp, #68]	; 0x44
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003052:	9301      	str	r3, [sp, #4]
 8003054:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003056:	2301      	movs	r3, #1
 8003058:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800305a:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800305e:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003060:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003064:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003066:	2304      	movs	r3, #4
 8003068:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800306a:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800306c:	f7fd ff44 	bl	8000ef8 <HAL_RCC_OscConfig>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003070:	f7fd ff0a 	bl	8000e88 <HAL_PWREx_EnableOverDrive>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003074:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003076:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003078:	2400      	movs	r4, #0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800307a:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800307c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8003080:	2103      	movs	r1, #3
 8003082:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003084:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003086:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003088:	9406      	str	r4, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800308a:	f7fe f927 	bl	80012dc <HAL_RCC_ClockConfig>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 800308e:	4b06      	ldr	r3, [pc, #24]	; (80030a8 <SystemClock_Config+0xb0>)
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003090:	a814      	add	r0, sp, #80	; 0x50
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003092:	9427      	str	r4, [sp, #156]	; 0x9c
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 8003094:	9314      	str	r3, [sp, #80]	; 0x50
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8003096:	9433      	str	r4, [sp, #204]	; 0xcc
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003098:	f7fe f9e6 	bl	8001468 <HAL_RCCEx_PeriphCLKConfig>
}
 800309c:	b038      	add	sp, #224	; 0xe0
 800309e:	bd10      	pop	{r4, pc}
 80030a0:	40023800 	.word	0x40023800
 80030a4:	40007000 	.word	0x40007000
 80030a8:	00200100 	.word	0x00200100

080030ac <main>:
{
 80030ac:	b500      	push	{lr}
 80030ae:	b08f      	sub	sp, #60	; 0x3c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030b0:	2400      	movs	r4, #0
  HAL_Init();
 80030b2:	f7fd fac1 	bl	8000638 <HAL_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030b6:	2501      	movs	r5, #1
  SystemClock_Config();
 80030b8:	f7ff ff9e 	bl	8002ff8 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030bc:	2214      	movs	r2, #20
 80030be:	2100      	movs	r1, #0
 80030c0:	a807      	add	r0, sp, #28
 80030c2:	f000 faad 	bl	8003620 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80030c6:	4b5d      	ldr	r3, [pc, #372]	; (800323c <main+0x190>)
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80030c8:	f244 0181 	movw	r1, #16513	; 0x4081
 80030cc:	485c      	ldr	r0, [pc, #368]	; (8003240 <main+0x194>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80030ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80030d0:	2680      	movs	r6, #128	; 0x80
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80030d2:	f042 0204 	orr.w	r2, r2, #4
 80030d6:	631a      	str	r2, [r3, #48]	; 0x30
 80030d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030da:	f002 0204 	and.w	r2, r2, #4
 80030de:	9201      	str	r2, [sp, #4]
 80030e0:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80030e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030e4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80030e8:	631a      	str	r2, [r3, #48]	; 0x30
 80030ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030ec:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80030f0:	9202      	str	r2, [sp, #8]
 80030f2:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80030f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030f6:	f042 0201 	orr.w	r2, r2, #1
 80030fa:	631a      	str	r2, [r3, #48]	; 0x30
 80030fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030fe:	f002 0201 	and.w	r2, r2, #1
 8003102:	9203      	str	r2, [sp, #12]
 8003104:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003106:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003108:	f042 0202 	orr.w	r2, r2, #2
 800310c:	631a      	str	r2, [r3, #48]	; 0x30
 800310e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003110:	f002 0202 	and.w	r2, r2, #2
 8003114:	9204      	str	r2, [sp, #16]
 8003116:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003118:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800311a:	f042 0208 	orr.w	r2, r2, #8
 800311e:	631a      	str	r2, [r3, #48]	; 0x30
 8003120:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003122:	f002 0208 	and.w	r2, r2, #8
 8003126:	9205      	str	r2, [sp, #20]
 8003128:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800312a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800312c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003130:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8003132:	2200      	movs	r2, #0
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800313a:	9306      	str	r3, [sp, #24]
 800313c:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800313e:	f7fd fdeb 	bl	8000d18 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8003142:	2200      	movs	r2, #0
 8003144:	2140      	movs	r1, #64	; 0x40
 8003146:	483f      	ldr	r0, [pc, #252]	; (8003244 <main+0x198>)
 8003148:	f7fd fde6 	bl	8000d18 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800314c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8003150:	a907      	add	r1, sp, #28
 8003152:	483d      	ldr	r0, [pc, #244]	; (8003248 <main+0x19c>)
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8003154:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003156:	4b3d      	ldr	r3, [pc, #244]	; (800324c <main+0x1a0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003158:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800315a:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800315c:	f7fd fcf2 	bl	8000b44 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8003160:	f244 0381 	movw	r3, #16513	; 0x4081
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003164:	a907      	add	r1, sp, #28
 8003166:	4836      	ldr	r0, [pc, #216]	; (8003240 <main+0x194>)
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8003168:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800316a:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800316c:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800316e:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003170:	f7fd fce8 	bl	8000b44 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8003174:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8003176:	a907      	add	r1, sp, #28
 8003178:	4832      	ldr	r0, [pc, #200]	; (8003244 <main+0x198>)
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800317a:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800317c:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800317e:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003180:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8003182:	f7fd fcdf 	bl	8000b44 <HAL_GPIO_Init>
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8003186:	a907      	add	r1, sp, #28
 8003188:	482e      	ldr	r0, [pc, #184]	; (8003244 <main+0x198>)
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800318a:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800318c:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800318e:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8003190:	f7fd fcd8 	bl	8000b44 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8003194:	2105      	movs	r1, #5
 8003196:	4622      	mov	r2, r4
 8003198:	2028      	movs	r0, #40	; 0x28
 800319a:	f7fd fa8f 	bl	80006bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800319e:	2028      	movs	r0, #40	; 0x28
 80031a0:	f7fd fac4 	bl	800072c <HAL_NVIC_EnableIRQ>
  heth.Instance = ETH;
 80031a4:	482a      	ldr	r0, [pc, #168]	; (8003250 <main+0x1a4>)
 80031a6:	4b2b      	ldr	r3, [pc, #172]	; (8003254 <main+0x1a8>)
  heth.Init.MACAddr[2] =   0xE1;
 80031a8:	22e1      	movs	r2, #225	; 0xe1
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80031aa:	8204      	strh	r4, [r0, #16]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80031ac:	e880 0028 	stmia.w	r0, {r3, r5}
  heth.Init.MACAddr[0] =   0x00;
 80031b0:	6943      	ldr	r3, [r0, #20]
 80031b2:	701c      	strb	r4, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 80031b4:	6943      	ldr	r3, [r0, #20]
 80031b6:	705e      	strb	r6, [r3, #1]
  heth.Init.MACAddr[2] =   0xE1;
 80031b8:	6943      	ldr	r3, [r0, #20]
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80031ba:	4e27      	ldr	r6, [pc, #156]	; (8003258 <main+0x1ac>)
  heth.Init.MACAddr[2] =   0xE1;
 80031bc:	709a      	strb	r2, [r3, #2]
  heth.Init.MACAddr[3] =   0x00;
 80031be:	6943      	ldr	r3, [r0, #20]
 80031c0:	70dc      	strb	r4, [r3, #3]
  heth.Init.MACAddr[4] =   0x00;
 80031c2:	6943      	ldr	r3, [r0, #20]
 80031c4:	711c      	strb	r4, [r3, #4]
  heth.Init.MACAddr[5] =   0x00;
 80031c6:	6943      	ldr	r3, [r0, #20]
 80031c8:	715c      	strb	r4, [r3, #5]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80031ca:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 80031ce:	6184      	str	r4, [r0, #24]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80031d0:	6203      	str	r3, [r0, #32]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80031d2:	61c4      	str	r4, [r0, #28]
  if (HAL_ETH_Init(&heth) != HAL_OK)
 80031d4:	f7fd fbbc 	bl	8000950 <HAL_ETH_Init>
  huart3.Instance = USART3;
 80031d8:	4820      	ldr	r0, [pc, #128]	; (800325c <main+0x1b0>)
  huart3.Init.BaudRate = 115200;
 80031da:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80031de:	4a20      	ldr	r2, [pc, #128]	; (8003260 <main+0x1b4>)
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80031e0:	6084      	str	r4, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80031e2:	60c4      	str	r4, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80031e4:	6104      	str	r4, [r0, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031e6:	6184      	str	r4, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80031e8:	61c4      	str	r4, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80031ea:	6204      	str	r4, [r0, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80031ec:	6244      	str	r4, [r0, #36]	; 0x24
  huart3.Init.BaudRate = 115200;
 80031ee:	e880 000c 	stmia.w	r0, {r2, r3}
  huart3.Init.Mode = UART_MODE_TX_RX;
 80031f2:	230c      	movs	r3, #12
 80031f4:	6143      	str	r3, [r0, #20]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80031f6:	f7fe febb 	bl	8001f70 <HAL_UART_Init>
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80031fa:	481a      	ldr	r0, [pc, #104]	; (8003264 <main+0x1b8>)
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80031fc:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 8003200:	2306      	movs	r3, #6
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8003202:	61c5      	str	r5, [r0, #28]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8003204:	62c5      	str	r5, [r0, #44]	; 0x2c
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8003206:	ad07      	add	r5, sp, #28
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8003208:	6104      	str	r4, [r0, #16]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800320a:	6204      	str	r4, [r0, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800320c:	6244      	str	r4, [r0, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800320e:	6304      	str	r4, [r0, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8003210:	e880 000a 	stmia.w	r0, {r1, r3}
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8003214:	2302      	movs	r3, #2
 8003216:	60c3      	str	r3, [r0, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8003218:	6183      	str	r3, [r0, #24]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800321a:	f7fd fd8f 	bl	8000d3c <HAL_PCD_Init>
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800321e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003220:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003222:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8003226:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800322a:	4621      	mov	r1, r4
 800322c:	a807      	add	r0, sp, #28
 800322e:	f7ff f832 	bl	8002296 <osThreadCreate>
 8003232:	4b0d      	ldr	r3, [pc, #52]	; (8003268 <main+0x1bc>)
 8003234:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8003236:	f7ff f829 	bl	800228c <osKernelStart>
 800323a:	e7fe      	b.n	800323a <main+0x18e>
 800323c:	40023800 	.word	0x40023800
 8003240:	40020400 	.word	0x40020400
 8003244:	40021800 	.word	0x40021800
 8003248:	40020800 	.word	0x40020800
 800324c:	10110000 	.word	0x10110000
 8003250:	200244c4 	.word	0x200244c4
 8003254:	40028000 	.word	0x40028000
 8003258:	08004438 	.word	0x08004438
 800325c:	20024040 	.word	0x20024040
 8003260:	40004800 	.word	0x40004800
 8003264:	200240c0 	.word	0x200240c0
 8003268:	2002403c 	.word	0x2002403c

0800326c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800326c:	4b0e      	ldr	r3, [pc, #56]	; (80032a8 <HAL_MspInit+0x3c>)
{
 800326e:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8003270:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  __HAL_RCC_SYSCFG_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003272:	210f      	movs	r1, #15
 8003274:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 8003278:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800327c:	641a      	str	r2, [r3, #64]	; 0x40
 800327e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003280:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8003284:	9200      	str	r2, [sp, #0]
 8003286:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003288:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800328a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800328e:	645a      	str	r2, [r3, #68]	; 0x44
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003290:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003292:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003294:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003298:	9301      	str	r3, [sp, #4]
 800329a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800329c:	f7fd fa0e 	bl	80006bc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80032a0:	b003      	add	sp, #12
 80032a2:	f85d fb04 	ldr.w	pc, [sp], #4
 80032a6:	bf00      	nop
 80032a8:	40023800 	.word	0x40023800

080032ac <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80032ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032ae:	b08d      	sub	sp, #52	; 0x34
 80032b0:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032b2:	2214      	movs	r2, #20
 80032b4:	2100      	movs	r1, #0
 80032b6:	a807      	add	r0, sp, #28
 80032b8:	f000 f9b2 	bl	8003620 <memset>
  if(heth->Instance==ETH)
 80032bc:	6822      	ldr	r2, [r4, #0]
 80032be:	4b39      	ldr	r3, [pc, #228]	; (80033a4 <HAL_ETH_MspInit+0xf8>)
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d16d      	bne.n	80033a0 <HAL_ETH_MspInit+0xf4>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80032c4:	f5a3 4390 	sub.w	r3, r3, #18432	; 0x4800
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032c8:	2602      	movs	r6, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032ca:	2503      	movs	r5, #3
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80032cc:	240b      	movs	r4, #11
    __HAL_RCC_ETH_CLK_ENABLE();
 80032ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032d0:	a907      	add	r1, sp, #28
 80032d2:	4835      	ldr	r0, [pc, #212]	; (80033a8 <HAL_ETH_MspInit+0xfc>)

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032d4:	2700      	movs	r7, #0
    __HAL_RCC_ETH_CLK_ENABLE();
 80032d6:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80032da:	631a      	str	r2, [r3, #48]	; 0x30
 80032dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032de:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 80032e2:	9200      	str	r2, [sp, #0]
 80032e4:	9a00      	ldr	r2, [sp, #0]
 80032e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032e8:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80032ec:	631a      	str	r2, [r3, #48]	; 0x30
 80032ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032f0:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 80032f4:	9201      	str	r2, [sp, #4]
 80032f6:	9a01      	ldr	r2, [sp, #4]
 80032f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032fa:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 80032fe:	631a      	str	r2, [r3, #48]	; 0x30
 8003300:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003302:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003306:	9202      	str	r2, [sp, #8]
 8003308:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800330a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800330c:	f042 0204 	orr.w	r2, r2, #4
 8003310:	631a      	str	r2, [r3, #48]	; 0x30
 8003312:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003314:	f002 0204 	and.w	r2, r2, #4
 8003318:	9203      	str	r2, [sp, #12]
 800331a:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800331c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800331e:	f042 0201 	orr.w	r2, r2, #1
 8003322:	631a      	str	r2, [r3, #48]	; 0x30
 8003324:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003326:	f002 0201 	and.w	r2, r2, #1
 800332a:	9204      	str	r2, [sp, #16]
 800332c:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800332e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003330:	f042 0202 	orr.w	r2, r2, #2
 8003334:	631a      	str	r2, [r3, #48]	; 0x30
 8003336:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003338:	f002 0202 	and.w	r2, r2, #2
 800333c:	9205      	str	r2, [sp, #20]
 800333e:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003340:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003342:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003346:	631a      	str	r2, [r3, #48]	; 0x30
 8003348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800334a:	9608      	str	r6, [sp, #32]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800334c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003350:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003352:	940b      	str	r4, [sp, #44]	; 0x2c
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003354:	9306      	str	r3, [sp, #24]
 8003356:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8003358:	2332      	movs	r3, #50	; 0x32
 800335a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800335c:	f7fd fbf2 	bl	8000b44 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8003360:	2386      	movs	r3, #134	; 0x86
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003362:	a907      	add	r1, sp, #28
 8003364:	4811      	ldr	r0, [pc, #68]	; (80033ac <HAL_ETH_MspInit+0x100>)
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8003366:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003368:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800336a:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800336c:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800336e:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003370:	f7fd fbe8 	bl	8000b44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8003374:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8003378:	a907      	add	r1, sp, #28
 800337a:	480d      	ldr	r0, [pc, #52]	; (80033b0 <HAL_ETH_MspInit+0x104>)
    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800337c:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800337e:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003380:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003382:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003384:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8003386:	f7fd fbdd 	bl	8000b44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800338a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800338e:	a907      	add	r1, sp, #28
 8003390:	4808      	ldr	r0, [pc, #32]	; (80033b4 <HAL_ETH_MspInit+0x108>)
    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8003392:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003394:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003396:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003398:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800339a:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800339c:	f7fd fbd2 	bl	8000b44 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80033a0:	b00d      	add	sp, #52	; 0x34
 80033a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033a4:	40028000 	.word	0x40028000
 80033a8:	40020800 	.word	0x40020800
 80033ac:	40020000 	.word	0x40020000
 80033b0:	40020400 	.word	0x40020400
 80033b4:	40021800 	.word	0x40021800

080033b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80033b8:	b510      	push	{r4, lr}
 80033ba:	b088      	sub	sp, #32
 80033bc:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033be:	2214      	movs	r2, #20
 80033c0:	2100      	movs	r1, #0
 80033c2:	a803      	add	r0, sp, #12
 80033c4:	f000 f92c 	bl	8003620 <memset>
  if(huart->Instance==USART3)
 80033c8:	6822      	ldr	r2, [r4, #0]
 80033ca:	4b13      	ldr	r3, [pc, #76]	; (8003418 <HAL_UART_MspInit+0x60>)
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d120      	bne.n	8003412 <HAL_UART_MspInit+0x5a>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80033d0:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80033d4:	a903      	add	r1, sp, #12
 80033d6:	4811      	ldr	r0, [pc, #68]	; (800341c <HAL_UART_MspInit+0x64>)
    __HAL_RCC_USART3_CLK_ENABLE();
 80033d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033da:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80033de:	641a      	str	r2, [r3, #64]	; 0x40
 80033e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033e2:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 80033e6:	9201      	str	r2, [sp, #4]
 80033e8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80033ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033ec:	f042 0208 	orr.w	r2, r2, #8
 80033f0:	631a      	str	r2, [r3, #48]	; 0x30
 80033f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f4:	f003 0308 	and.w	r3, r3, #8
 80033f8:	9302      	str	r3, [sp, #8]
 80033fa:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80033fc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003400:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003402:	2302      	movs	r3, #2
 8003404:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003406:	2303      	movs	r3, #3
 8003408:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800340a:	2307      	movs	r3, #7
 800340c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800340e:	f7fd fb99 	bl	8000b44 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003412:	b008      	add	sp, #32
 8003414:	bd10      	pop	{r4, pc}
 8003416:	bf00      	nop
 8003418:	40004800 	.word	0x40004800
 800341c:	40020c00 	.word	0x40020c00

08003420 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8003420:	b510      	push	{r4, lr}
 8003422:	b088      	sub	sp, #32
 8003424:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003426:	2214      	movs	r2, #20
 8003428:	2100      	movs	r1, #0
 800342a:	a803      	add	r0, sp, #12
 800342c:	f000 f8f8 	bl	8003620 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8003430:	6823      	ldr	r3, [r4, #0]
 8003432:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003436:	d132      	bne.n	800349e <HAL_PCD_MspInit+0x7e>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003438:	4c1a      	ldr	r4, [pc, #104]	; (80034a4 <HAL_PCD_MspInit+0x84>)
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800343a:	a903      	add	r1, sp, #12
 800343c:	481a      	ldr	r0, [pc, #104]	; (80034a8 <HAL_PCD_MspInit+0x88>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800343e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003440:	f043 0301 	orr.w	r3, r3, #1
 8003444:	6323      	str	r3, [r4, #48]	; 0x30
 8003446:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003448:	f003 0301 	and.w	r3, r3, #1
 800344c:	9300      	str	r3, [sp, #0]
 800344e:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8003450:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8003454:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003456:	2302      	movs	r3, #2
 8003458:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800345a:	2303      	movs	r3, #3
 800345c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800345e:	230a      	movs	r3, #10
 8003460:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003462:	f7fd fb6f 	bl	8000b44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8003466:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800346a:	a903      	add	r1, sp, #12
 800346c:	480e      	ldr	r0, [pc, #56]	; (80034a8 <HAL_PCD_MspInit+0x88>)
    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800346e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003470:	2300      	movs	r3, #0
 8003472:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003474:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8003476:	f7fd fb65 	bl	8000b44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800347a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800347c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003480:	6363      	str	r3, [r4, #52]	; 0x34
 8003482:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003484:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003488:	9301      	str	r3, [sp, #4]
 800348a:	9b01      	ldr	r3, [sp, #4]
 800348c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800348e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003492:	6463      	str	r3, [r4, #68]	; 0x44
 8003494:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003496:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800349a:	9302      	str	r3, [sp, #8]
 800349c:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800349e:	b008      	add	sp, #32
 80034a0:	bd10      	pop	{r4, pc}
 80034a2:	bf00      	nop
 80034a4:	40023800 	.word	0x40023800
 80034a8:	40020000 	.word	0x40020000

080034ac <NMI_Handler>:
 80034ac:	4770      	bx	lr

080034ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80034ae:	e7fe      	b.n	80034ae <HardFault_Handler>

080034b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80034b0:	e7fe      	b.n	80034b0 <MemManage_Handler>

080034b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80034b2:	e7fe      	b.n	80034b2 <BusFault_Handler>

080034b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80034b4:	e7fe      	b.n	80034b4 <UsageFault_Handler>

080034b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80034b6:	4770      	bx	lr

080034b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80034b8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80034ba:	f7fd f8c9 	bl	8000650 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80034be:	f7ff fd49 	bl	8002f54 <xTaskGetSchedulerState>
 80034c2:	2801      	cmp	r0, #1
 80034c4:	d003      	beq.n	80034ce <SysTick_Handler+0x16>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80034c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  xPortSysTickHandler();
 80034ca:	f7ff b833 	b.w	8002534 <xPortSysTickHandler>
 80034ce:	bd08      	pop	{r3, pc}

080034d0 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80034d0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80034d4:	f7fd bc26 	b.w	8000d24 <HAL_GPIO_EXTI_IRQHandler>

080034d8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80034d8:	b570      	push	{r4, r5, r6, lr}
 80034da:	460e      	mov	r6, r1
 80034dc:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034de:	460c      	mov	r4, r1
 80034e0:	1ba3      	subs	r3, r4, r6
 80034e2:	429d      	cmp	r5, r3
 80034e4:	dc01      	bgt.n	80034ea <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 80034e6:	4628      	mov	r0, r5
 80034e8:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 80034ea:	f7ff fd6f 	bl	8002fcc <__io_getchar>
 80034ee:	f804 0b01 	strb.w	r0, [r4], #1
 80034f2:	e7f5      	b.n	80034e0 <_read+0x8>

080034f4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80034f4:	b570      	push	{r4, r5, r6, lr}
 80034f6:	460e      	mov	r6, r1
 80034f8:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034fa:	460c      	mov	r4, r1
 80034fc:	1ba3      	subs	r3, r4, r6
 80034fe:	429d      	cmp	r5, r3
 8003500:	dc01      	bgt.n	8003506 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8003502:	4628      	mov	r0, r5
 8003504:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8003506:	f814 0b01 	ldrb.w	r0, [r4], #1
 800350a:	f7ff fd4b 	bl	8002fa4 <__io_putchar>
 800350e:	e7f5      	b.n	80034fc <_write+0x8>

08003510 <_sbrk>:

caddr_t _sbrk(int incr)
{
 8003510:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003512:	4b0a      	ldr	r3, [pc, #40]	; (800353c <_sbrk+0x2c>)
{
 8003514:	4602      	mov	r2, r0
	if (heap_end == 0)
 8003516:	6819      	ldr	r1, [r3, #0]
 8003518:	b909      	cbnz	r1, 800351e <_sbrk+0xe>
		heap_end = &end;
 800351a:	4909      	ldr	r1, [pc, #36]	; (8003540 <_sbrk+0x30>)
 800351c:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 800351e:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8003520:	4669      	mov	r1, sp
 8003522:	4402      	add	r2, r0
 8003524:	428a      	cmp	r2, r1
 8003526:	d906      	bls.n	8003536 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8003528:	f000 f850 	bl	80035cc <__errno>
 800352c:	230c      	movs	r3, #12
 800352e:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8003530:	f04f 30ff 	mov.w	r0, #4294967295
 8003534:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8003536:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8003538:	bd08      	pop	{r3, pc}
 800353a:	bf00      	nop
 800353c:	2002402c 	.word	0x2002402c
 8003540:	20024510 	.word	0x20024510

08003544 <_close>:

int _close(int file)
{
	return -1;
}
 8003544:	f04f 30ff 	mov.w	r0, #4294967295
 8003548:	4770      	bx	lr

0800354a <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800354a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 800354e:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8003550:	604b      	str	r3, [r1, #4]
}
 8003552:	4770      	bx	lr

08003554 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8003554:	2001      	movs	r0, #1
 8003556:	4770      	bx	lr

08003558 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8003558:	2000      	movs	r0, #0
 800355a:	4770      	bx	lr

0800355c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800355c:	4b05      	ldr	r3, [pc, #20]	; (8003574 <SystemInit+0x18>)
 800355e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003562:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8003566:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800356a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800356e:	609a      	str	r2, [r3, #8]
 8003570:	4770      	bx	lr
 8003572:	bf00      	nop
 8003574:	e000ed00 	.word	0xe000ed00

08003578 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003578:	f8df d034 	ldr.w	sp, [pc, #52]	; 80035b0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800357c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800357e:	e003      	b.n	8003588 <LoopCopyDataInit>

08003580 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003580:	4b0c      	ldr	r3, [pc, #48]	; (80035b4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003582:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003584:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003586:	3104      	adds	r1, #4

08003588 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003588:	480b      	ldr	r0, [pc, #44]	; (80035b8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800358a:	4b0c      	ldr	r3, [pc, #48]	; (80035bc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800358c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800358e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003590:	d3f6      	bcc.n	8003580 <CopyDataInit>
  ldr  r2, =_sbss
 8003592:	4a0b      	ldr	r2, [pc, #44]	; (80035c0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003594:	e002      	b.n	800359c <LoopFillZerobss>

08003596 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003596:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003598:	f842 3b04 	str.w	r3, [r2], #4

0800359c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800359c:	4b09      	ldr	r3, [pc, #36]	; (80035c4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800359e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80035a0:	d3f9      	bcc.n	8003596 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80035a2:	f7ff ffdb 	bl	800355c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80035a6:	f000 f817 	bl	80035d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80035aa:	f7ff fd7f 	bl	80030ac <main>
  bx  lr    
 80035ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80035b0:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 80035b4:	08004558 	.word	0x08004558
  ldr  r0, =_sdata
 80035b8:	20020000 	.word	0x20020000
  ldr  r3, =_edata
 80035bc:	20020074 	.word	0x20020074
  ldr  r2, =_sbss
 80035c0:	20020074 	.word	0x20020074
  ldr  r3, = _ebss
 80035c4:	20024510 	.word	0x20024510

080035c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80035c8:	e7fe      	b.n	80035c8 <ADC_IRQHandler>
	...

080035cc <__errno>:
 80035cc:	4b01      	ldr	r3, [pc, #4]	; (80035d4 <__errno+0x8>)
 80035ce:	6818      	ldr	r0, [r3, #0]
 80035d0:	4770      	bx	lr
 80035d2:	bf00      	nop
 80035d4:	20020010 	.word	0x20020010

080035d8 <__libc_init_array>:
 80035d8:	b570      	push	{r4, r5, r6, lr}
 80035da:	4e0d      	ldr	r6, [pc, #52]	; (8003610 <__libc_init_array+0x38>)
 80035dc:	4c0d      	ldr	r4, [pc, #52]	; (8003614 <__libc_init_array+0x3c>)
 80035de:	1ba4      	subs	r4, r4, r6
 80035e0:	10a4      	asrs	r4, r4, #2
 80035e2:	2500      	movs	r5, #0
 80035e4:	42a5      	cmp	r5, r4
 80035e6:	d109      	bne.n	80035fc <__libc_init_array+0x24>
 80035e8:	4e0b      	ldr	r6, [pc, #44]	; (8003618 <__libc_init_array+0x40>)
 80035ea:	4c0c      	ldr	r4, [pc, #48]	; (800361c <__libc_init_array+0x44>)
 80035ec:	f000 ff18 	bl	8004420 <_init>
 80035f0:	1ba4      	subs	r4, r4, r6
 80035f2:	10a4      	asrs	r4, r4, #2
 80035f4:	2500      	movs	r5, #0
 80035f6:	42a5      	cmp	r5, r4
 80035f8:	d105      	bne.n	8003606 <__libc_init_array+0x2e>
 80035fa:	bd70      	pop	{r4, r5, r6, pc}
 80035fc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003600:	4798      	blx	r3
 8003602:	3501      	adds	r5, #1
 8003604:	e7ee      	b.n	80035e4 <__libc_init_array+0xc>
 8003606:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800360a:	4798      	blx	r3
 800360c:	3501      	adds	r5, #1
 800360e:	e7f2      	b.n	80035f6 <__libc_init_array+0x1e>
 8003610:	08004550 	.word	0x08004550
 8003614:	08004550 	.word	0x08004550
 8003618:	08004550 	.word	0x08004550
 800361c:	08004554 	.word	0x08004554

08003620 <memset>:
 8003620:	4402      	add	r2, r0
 8003622:	4603      	mov	r3, r0
 8003624:	4293      	cmp	r3, r2
 8003626:	d100      	bne.n	800362a <memset+0xa>
 8003628:	4770      	bx	lr
 800362a:	f803 1b01 	strb.w	r1, [r3], #1
 800362e:	e7f9      	b.n	8003624 <memset+0x4>

08003630 <iprintf>:
 8003630:	b40f      	push	{r0, r1, r2, r3}
 8003632:	4b0a      	ldr	r3, [pc, #40]	; (800365c <iprintf+0x2c>)
 8003634:	b513      	push	{r0, r1, r4, lr}
 8003636:	681c      	ldr	r4, [r3, #0]
 8003638:	b124      	cbz	r4, 8003644 <iprintf+0x14>
 800363a:	69a3      	ldr	r3, [r4, #24]
 800363c:	b913      	cbnz	r3, 8003644 <iprintf+0x14>
 800363e:	4620      	mov	r0, r4
 8003640:	f000 f84e 	bl	80036e0 <__sinit>
 8003644:	ab05      	add	r3, sp, #20
 8003646:	9a04      	ldr	r2, [sp, #16]
 8003648:	68a1      	ldr	r1, [r4, #8]
 800364a:	9301      	str	r3, [sp, #4]
 800364c:	4620      	mov	r0, r4
 800364e:	f000 f959 	bl	8003904 <_vfiprintf_r>
 8003652:	b002      	add	sp, #8
 8003654:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003658:	b004      	add	sp, #16
 800365a:	4770      	bx	lr
 800365c:	20020010 	.word	0x20020010

08003660 <_cleanup_r>:
 8003660:	4901      	ldr	r1, [pc, #4]	; (8003668 <_cleanup_r+0x8>)
 8003662:	f000 b8a9 	b.w	80037b8 <_fwalk_reent>
 8003666:	bf00      	nop
 8003668:	080041d9 	.word	0x080041d9

0800366c <std.isra.0>:
 800366c:	2300      	movs	r3, #0
 800366e:	b510      	push	{r4, lr}
 8003670:	4604      	mov	r4, r0
 8003672:	6003      	str	r3, [r0, #0]
 8003674:	6043      	str	r3, [r0, #4]
 8003676:	6083      	str	r3, [r0, #8]
 8003678:	8181      	strh	r1, [r0, #12]
 800367a:	6643      	str	r3, [r0, #100]	; 0x64
 800367c:	81c2      	strh	r2, [r0, #14]
 800367e:	6103      	str	r3, [r0, #16]
 8003680:	6143      	str	r3, [r0, #20]
 8003682:	6183      	str	r3, [r0, #24]
 8003684:	4619      	mov	r1, r3
 8003686:	2208      	movs	r2, #8
 8003688:	305c      	adds	r0, #92	; 0x5c
 800368a:	f7ff ffc9 	bl	8003620 <memset>
 800368e:	4b05      	ldr	r3, [pc, #20]	; (80036a4 <std.isra.0+0x38>)
 8003690:	6263      	str	r3, [r4, #36]	; 0x24
 8003692:	4b05      	ldr	r3, [pc, #20]	; (80036a8 <std.isra.0+0x3c>)
 8003694:	62a3      	str	r3, [r4, #40]	; 0x28
 8003696:	4b05      	ldr	r3, [pc, #20]	; (80036ac <std.isra.0+0x40>)
 8003698:	62e3      	str	r3, [r4, #44]	; 0x2c
 800369a:	4b05      	ldr	r3, [pc, #20]	; (80036b0 <std.isra.0+0x44>)
 800369c:	6224      	str	r4, [r4, #32]
 800369e:	6323      	str	r3, [r4, #48]	; 0x30
 80036a0:	bd10      	pop	{r4, pc}
 80036a2:	bf00      	nop
 80036a4:	08003e7d 	.word	0x08003e7d
 80036a8:	08003e9f 	.word	0x08003e9f
 80036ac:	08003ed7 	.word	0x08003ed7
 80036b0:	08003efb 	.word	0x08003efb

080036b4 <__sfmoreglue>:
 80036b4:	b570      	push	{r4, r5, r6, lr}
 80036b6:	1e4a      	subs	r2, r1, #1
 80036b8:	2568      	movs	r5, #104	; 0x68
 80036ba:	4355      	muls	r5, r2
 80036bc:	460e      	mov	r6, r1
 80036be:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80036c2:	f000 f897 	bl	80037f4 <_malloc_r>
 80036c6:	4604      	mov	r4, r0
 80036c8:	b140      	cbz	r0, 80036dc <__sfmoreglue+0x28>
 80036ca:	2100      	movs	r1, #0
 80036cc:	e880 0042 	stmia.w	r0, {r1, r6}
 80036d0:	300c      	adds	r0, #12
 80036d2:	60a0      	str	r0, [r4, #8]
 80036d4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80036d8:	f7ff ffa2 	bl	8003620 <memset>
 80036dc:	4620      	mov	r0, r4
 80036de:	bd70      	pop	{r4, r5, r6, pc}

080036e0 <__sinit>:
 80036e0:	6983      	ldr	r3, [r0, #24]
 80036e2:	b510      	push	{r4, lr}
 80036e4:	4604      	mov	r4, r0
 80036e6:	bb33      	cbnz	r3, 8003736 <__sinit+0x56>
 80036e8:	6483      	str	r3, [r0, #72]	; 0x48
 80036ea:	64c3      	str	r3, [r0, #76]	; 0x4c
 80036ec:	6503      	str	r3, [r0, #80]	; 0x50
 80036ee:	4b12      	ldr	r3, [pc, #72]	; (8003738 <__sinit+0x58>)
 80036f0:	4a12      	ldr	r2, [pc, #72]	; (800373c <__sinit+0x5c>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	6282      	str	r2, [r0, #40]	; 0x28
 80036f6:	4298      	cmp	r0, r3
 80036f8:	bf04      	itt	eq
 80036fa:	2301      	moveq	r3, #1
 80036fc:	6183      	streq	r3, [r0, #24]
 80036fe:	f000 f81f 	bl	8003740 <__sfp>
 8003702:	6060      	str	r0, [r4, #4]
 8003704:	4620      	mov	r0, r4
 8003706:	f000 f81b 	bl	8003740 <__sfp>
 800370a:	60a0      	str	r0, [r4, #8]
 800370c:	4620      	mov	r0, r4
 800370e:	f000 f817 	bl	8003740 <__sfp>
 8003712:	2200      	movs	r2, #0
 8003714:	60e0      	str	r0, [r4, #12]
 8003716:	2104      	movs	r1, #4
 8003718:	6860      	ldr	r0, [r4, #4]
 800371a:	f7ff ffa7 	bl	800366c <std.isra.0>
 800371e:	2201      	movs	r2, #1
 8003720:	2109      	movs	r1, #9
 8003722:	68a0      	ldr	r0, [r4, #8]
 8003724:	f7ff ffa2 	bl	800366c <std.isra.0>
 8003728:	2202      	movs	r2, #2
 800372a:	2112      	movs	r1, #18
 800372c:	68e0      	ldr	r0, [r4, #12]
 800372e:	f7ff ff9d 	bl	800366c <std.isra.0>
 8003732:	2301      	movs	r3, #1
 8003734:	61a3      	str	r3, [r4, #24]
 8003736:	bd10      	pop	{r4, pc}
 8003738:	080044b0 	.word	0x080044b0
 800373c:	08003661 	.word	0x08003661

08003740 <__sfp>:
 8003740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003742:	4b1c      	ldr	r3, [pc, #112]	; (80037b4 <__sfp+0x74>)
 8003744:	681e      	ldr	r6, [r3, #0]
 8003746:	69b3      	ldr	r3, [r6, #24]
 8003748:	4607      	mov	r7, r0
 800374a:	b913      	cbnz	r3, 8003752 <__sfp+0x12>
 800374c:	4630      	mov	r0, r6
 800374e:	f7ff ffc7 	bl	80036e0 <__sinit>
 8003752:	3648      	adds	r6, #72	; 0x48
 8003754:	68b4      	ldr	r4, [r6, #8]
 8003756:	6873      	ldr	r3, [r6, #4]
 8003758:	3b01      	subs	r3, #1
 800375a:	d503      	bpl.n	8003764 <__sfp+0x24>
 800375c:	6833      	ldr	r3, [r6, #0]
 800375e:	b133      	cbz	r3, 800376e <__sfp+0x2e>
 8003760:	6836      	ldr	r6, [r6, #0]
 8003762:	e7f7      	b.n	8003754 <__sfp+0x14>
 8003764:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003768:	b16d      	cbz	r5, 8003786 <__sfp+0x46>
 800376a:	3468      	adds	r4, #104	; 0x68
 800376c:	e7f4      	b.n	8003758 <__sfp+0x18>
 800376e:	2104      	movs	r1, #4
 8003770:	4638      	mov	r0, r7
 8003772:	f7ff ff9f 	bl	80036b4 <__sfmoreglue>
 8003776:	6030      	str	r0, [r6, #0]
 8003778:	2800      	cmp	r0, #0
 800377a:	d1f1      	bne.n	8003760 <__sfp+0x20>
 800377c:	230c      	movs	r3, #12
 800377e:	603b      	str	r3, [r7, #0]
 8003780:	4604      	mov	r4, r0
 8003782:	4620      	mov	r0, r4
 8003784:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003786:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800378a:	81e3      	strh	r3, [r4, #14]
 800378c:	2301      	movs	r3, #1
 800378e:	81a3      	strh	r3, [r4, #12]
 8003790:	6665      	str	r5, [r4, #100]	; 0x64
 8003792:	6025      	str	r5, [r4, #0]
 8003794:	60a5      	str	r5, [r4, #8]
 8003796:	6065      	str	r5, [r4, #4]
 8003798:	6125      	str	r5, [r4, #16]
 800379a:	6165      	str	r5, [r4, #20]
 800379c:	61a5      	str	r5, [r4, #24]
 800379e:	2208      	movs	r2, #8
 80037a0:	4629      	mov	r1, r5
 80037a2:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80037a6:	f7ff ff3b 	bl	8003620 <memset>
 80037aa:	6365      	str	r5, [r4, #52]	; 0x34
 80037ac:	63a5      	str	r5, [r4, #56]	; 0x38
 80037ae:	64a5      	str	r5, [r4, #72]	; 0x48
 80037b0:	64e5      	str	r5, [r4, #76]	; 0x4c
 80037b2:	e7e6      	b.n	8003782 <__sfp+0x42>
 80037b4:	080044b0 	.word	0x080044b0

080037b8 <_fwalk_reent>:
 80037b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80037bc:	4680      	mov	r8, r0
 80037be:	4689      	mov	r9, r1
 80037c0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80037c4:	2600      	movs	r6, #0
 80037c6:	b914      	cbnz	r4, 80037ce <_fwalk_reent+0x16>
 80037c8:	4630      	mov	r0, r6
 80037ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80037ce:	68a5      	ldr	r5, [r4, #8]
 80037d0:	6867      	ldr	r7, [r4, #4]
 80037d2:	3f01      	subs	r7, #1
 80037d4:	d501      	bpl.n	80037da <_fwalk_reent+0x22>
 80037d6:	6824      	ldr	r4, [r4, #0]
 80037d8:	e7f5      	b.n	80037c6 <_fwalk_reent+0xe>
 80037da:	89ab      	ldrh	r3, [r5, #12]
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d907      	bls.n	80037f0 <_fwalk_reent+0x38>
 80037e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80037e4:	3301      	adds	r3, #1
 80037e6:	d003      	beq.n	80037f0 <_fwalk_reent+0x38>
 80037e8:	4629      	mov	r1, r5
 80037ea:	4640      	mov	r0, r8
 80037ec:	47c8      	blx	r9
 80037ee:	4306      	orrs	r6, r0
 80037f0:	3568      	adds	r5, #104	; 0x68
 80037f2:	e7ee      	b.n	80037d2 <_fwalk_reent+0x1a>

080037f4 <_malloc_r>:
 80037f4:	b570      	push	{r4, r5, r6, lr}
 80037f6:	1ccd      	adds	r5, r1, #3
 80037f8:	f025 0503 	bic.w	r5, r5, #3
 80037fc:	3508      	adds	r5, #8
 80037fe:	2d0c      	cmp	r5, #12
 8003800:	bf38      	it	cc
 8003802:	250c      	movcc	r5, #12
 8003804:	2d00      	cmp	r5, #0
 8003806:	4606      	mov	r6, r0
 8003808:	db01      	blt.n	800380e <_malloc_r+0x1a>
 800380a:	42a9      	cmp	r1, r5
 800380c:	d903      	bls.n	8003816 <_malloc_r+0x22>
 800380e:	230c      	movs	r3, #12
 8003810:	6033      	str	r3, [r6, #0]
 8003812:	2000      	movs	r0, #0
 8003814:	bd70      	pop	{r4, r5, r6, pc}
 8003816:	f000 fd7f 	bl	8004318 <__malloc_lock>
 800381a:	4a23      	ldr	r2, [pc, #140]	; (80038a8 <_malloc_r+0xb4>)
 800381c:	6814      	ldr	r4, [r2, #0]
 800381e:	4621      	mov	r1, r4
 8003820:	b991      	cbnz	r1, 8003848 <_malloc_r+0x54>
 8003822:	4c22      	ldr	r4, [pc, #136]	; (80038ac <_malloc_r+0xb8>)
 8003824:	6823      	ldr	r3, [r4, #0]
 8003826:	b91b      	cbnz	r3, 8003830 <_malloc_r+0x3c>
 8003828:	4630      	mov	r0, r6
 800382a:	f000 fb17 	bl	8003e5c <_sbrk_r>
 800382e:	6020      	str	r0, [r4, #0]
 8003830:	4629      	mov	r1, r5
 8003832:	4630      	mov	r0, r6
 8003834:	f000 fb12 	bl	8003e5c <_sbrk_r>
 8003838:	1c43      	adds	r3, r0, #1
 800383a:	d126      	bne.n	800388a <_malloc_r+0x96>
 800383c:	230c      	movs	r3, #12
 800383e:	6033      	str	r3, [r6, #0]
 8003840:	4630      	mov	r0, r6
 8003842:	f000 fd6a 	bl	800431a <__malloc_unlock>
 8003846:	e7e4      	b.n	8003812 <_malloc_r+0x1e>
 8003848:	680b      	ldr	r3, [r1, #0]
 800384a:	1b5b      	subs	r3, r3, r5
 800384c:	d41a      	bmi.n	8003884 <_malloc_r+0x90>
 800384e:	2b0b      	cmp	r3, #11
 8003850:	d90f      	bls.n	8003872 <_malloc_r+0x7e>
 8003852:	600b      	str	r3, [r1, #0]
 8003854:	50cd      	str	r5, [r1, r3]
 8003856:	18cc      	adds	r4, r1, r3
 8003858:	4630      	mov	r0, r6
 800385a:	f000 fd5e 	bl	800431a <__malloc_unlock>
 800385e:	f104 000b 	add.w	r0, r4, #11
 8003862:	1d23      	adds	r3, r4, #4
 8003864:	f020 0007 	bic.w	r0, r0, #7
 8003868:	1ac3      	subs	r3, r0, r3
 800386a:	d01b      	beq.n	80038a4 <_malloc_r+0xb0>
 800386c:	425a      	negs	r2, r3
 800386e:	50e2      	str	r2, [r4, r3]
 8003870:	bd70      	pop	{r4, r5, r6, pc}
 8003872:	428c      	cmp	r4, r1
 8003874:	bf0d      	iteet	eq
 8003876:	6863      	ldreq	r3, [r4, #4]
 8003878:	684b      	ldrne	r3, [r1, #4]
 800387a:	6063      	strne	r3, [r4, #4]
 800387c:	6013      	streq	r3, [r2, #0]
 800387e:	bf18      	it	ne
 8003880:	460c      	movne	r4, r1
 8003882:	e7e9      	b.n	8003858 <_malloc_r+0x64>
 8003884:	460c      	mov	r4, r1
 8003886:	6849      	ldr	r1, [r1, #4]
 8003888:	e7ca      	b.n	8003820 <_malloc_r+0x2c>
 800388a:	1cc4      	adds	r4, r0, #3
 800388c:	f024 0403 	bic.w	r4, r4, #3
 8003890:	42a0      	cmp	r0, r4
 8003892:	d005      	beq.n	80038a0 <_malloc_r+0xac>
 8003894:	1a21      	subs	r1, r4, r0
 8003896:	4630      	mov	r0, r6
 8003898:	f000 fae0 	bl	8003e5c <_sbrk_r>
 800389c:	3001      	adds	r0, #1
 800389e:	d0cd      	beq.n	800383c <_malloc_r+0x48>
 80038a0:	6025      	str	r5, [r4, #0]
 80038a2:	e7d9      	b.n	8003858 <_malloc_r+0x64>
 80038a4:	bd70      	pop	{r4, r5, r6, pc}
 80038a6:	bf00      	nop
 80038a8:	20024030 	.word	0x20024030
 80038ac:	20024034 	.word	0x20024034

080038b0 <__sfputc_r>:
 80038b0:	6893      	ldr	r3, [r2, #8]
 80038b2:	3b01      	subs	r3, #1
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	b410      	push	{r4}
 80038b8:	6093      	str	r3, [r2, #8]
 80038ba:	da09      	bge.n	80038d0 <__sfputc_r+0x20>
 80038bc:	6994      	ldr	r4, [r2, #24]
 80038be:	42a3      	cmp	r3, r4
 80038c0:	db02      	blt.n	80038c8 <__sfputc_r+0x18>
 80038c2:	b2cb      	uxtb	r3, r1
 80038c4:	2b0a      	cmp	r3, #10
 80038c6:	d103      	bne.n	80038d0 <__sfputc_r+0x20>
 80038c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80038cc:	f000 bb1a 	b.w	8003f04 <__swbuf_r>
 80038d0:	6813      	ldr	r3, [r2, #0]
 80038d2:	1c58      	adds	r0, r3, #1
 80038d4:	6010      	str	r0, [r2, #0]
 80038d6:	7019      	strb	r1, [r3, #0]
 80038d8:	b2c8      	uxtb	r0, r1
 80038da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80038de:	4770      	bx	lr

080038e0 <__sfputs_r>:
 80038e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038e2:	4606      	mov	r6, r0
 80038e4:	460f      	mov	r7, r1
 80038e6:	4614      	mov	r4, r2
 80038e8:	18d5      	adds	r5, r2, r3
 80038ea:	42ac      	cmp	r4, r5
 80038ec:	d101      	bne.n	80038f2 <__sfputs_r+0x12>
 80038ee:	2000      	movs	r0, #0
 80038f0:	e007      	b.n	8003902 <__sfputs_r+0x22>
 80038f2:	463a      	mov	r2, r7
 80038f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80038f8:	4630      	mov	r0, r6
 80038fa:	f7ff ffd9 	bl	80038b0 <__sfputc_r>
 80038fe:	1c43      	adds	r3, r0, #1
 8003900:	d1f3      	bne.n	80038ea <__sfputs_r+0xa>
 8003902:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003904 <_vfiprintf_r>:
 8003904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003908:	b09d      	sub	sp, #116	; 0x74
 800390a:	460c      	mov	r4, r1
 800390c:	4617      	mov	r7, r2
 800390e:	9303      	str	r3, [sp, #12]
 8003910:	4606      	mov	r6, r0
 8003912:	b118      	cbz	r0, 800391c <_vfiprintf_r+0x18>
 8003914:	6983      	ldr	r3, [r0, #24]
 8003916:	b90b      	cbnz	r3, 800391c <_vfiprintf_r+0x18>
 8003918:	f7ff fee2 	bl	80036e0 <__sinit>
 800391c:	4b7c      	ldr	r3, [pc, #496]	; (8003b10 <_vfiprintf_r+0x20c>)
 800391e:	429c      	cmp	r4, r3
 8003920:	d157      	bne.n	80039d2 <_vfiprintf_r+0xce>
 8003922:	6874      	ldr	r4, [r6, #4]
 8003924:	89a3      	ldrh	r3, [r4, #12]
 8003926:	0718      	lsls	r0, r3, #28
 8003928:	d55d      	bpl.n	80039e6 <_vfiprintf_r+0xe2>
 800392a:	6923      	ldr	r3, [r4, #16]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d05a      	beq.n	80039e6 <_vfiprintf_r+0xe2>
 8003930:	2300      	movs	r3, #0
 8003932:	9309      	str	r3, [sp, #36]	; 0x24
 8003934:	2320      	movs	r3, #32
 8003936:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800393a:	2330      	movs	r3, #48	; 0x30
 800393c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003940:	f04f 0b01 	mov.w	fp, #1
 8003944:	46b8      	mov	r8, r7
 8003946:	4645      	mov	r5, r8
 8003948:	f815 3b01 	ldrb.w	r3, [r5], #1
 800394c:	2b00      	cmp	r3, #0
 800394e:	d155      	bne.n	80039fc <_vfiprintf_r+0xf8>
 8003950:	ebb8 0a07 	subs.w	sl, r8, r7
 8003954:	d00b      	beq.n	800396e <_vfiprintf_r+0x6a>
 8003956:	4653      	mov	r3, sl
 8003958:	463a      	mov	r2, r7
 800395a:	4621      	mov	r1, r4
 800395c:	4630      	mov	r0, r6
 800395e:	f7ff ffbf 	bl	80038e0 <__sfputs_r>
 8003962:	3001      	adds	r0, #1
 8003964:	f000 80c4 	beq.w	8003af0 <_vfiprintf_r+0x1ec>
 8003968:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800396a:	4453      	add	r3, sl
 800396c:	9309      	str	r3, [sp, #36]	; 0x24
 800396e:	f898 3000 	ldrb.w	r3, [r8]
 8003972:	2b00      	cmp	r3, #0
 8003974:	f000 80bc 	beq.w	8003af0 <_vfiprintf_r+0x1ec>
 8003978:	2300      	movs	r3, #0
 800397a:	f04f 32ff 	mov.w	r2, #4294967295
 800397e:	9304      	str	r3, [sp, #16]
 8003980:	9307      	str	r3, [sp, #28]
 8003982:	9205      	str	r2, [sp, #20]
 8003984:	9306      	str	r3, [sp, #24]
 8003986:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800398a:	931a      	str	r3, [sp, #104]	; 0x68
 800398c:	2205      	movs	r2, #5
 800398e:	7829      	ldrb	r1, [r5, #0]
 8003990:	4860      	ldr	r0, [pc, #384]	; (8003b14 <_vfiprintf_r+0x210>)
 8003992:	f7fc fc55 	bl	8000240 <memchr>
 8003996:	f105 0801 	add.w	r8, r5, #1
 800399a:	9b04      	ldr	r3, [sp, #16]
 800399c:	2800      	cmp	r0, #0
 800399e:	d131      	bne.n	8003a04 <_vfiprintf_r+0x100>
 80039a0:	06d9      	lsls	r1, r3, #27
 80039a2:	bf44      	itt	mi
 80039a4:	2220      	movmi	r2, #32
 80039a6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80039aa:	071a      	lsls	r2, r3, #28
 80039ac:	bf44      	itt	mi
 80039ae:	222b      	movmi	r2, #43	; 0x2b
 80039b0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80039b4:	782a      	ldrb	r2, [r5, #0]
 80039b6:	2a2a      	cmp	r2, #42	; 0x2a
 80039b8:	d02c      	beq.n	8003a14 <_vfiprintf_r+0x110>
 80039ba:	9a07      	ldr	r2, [sp, #28]
 80039bc:	2100      	movs	r1, #0
 80039be:	200a      	movs	r0, #10
 80039c0:	46a8      	mov	r8, r5
 80039c2:	3501      	adds	r5, #1
 80039c4:	f898 3000 	ldrb.w	r3, [r8]
 80039c8:	3b30      	subs	r3, #48	; 0x30
 80039ca:	2b09      	cmp	r3, #9
 80039cc:	d96d      	bls.n	8003aaa <_vfiprintf_r+0x1a6>
 80039ce:	b371      	cbz	r1, 8003a2e <_vfiprintf_r+0x12a>
 80039d0:	e026      	b.n	8003a20 <_vfiprintf_r+0x11c>
 80039d2:	4b51      	ldr	r3, [pc, #324]	; (8003b18 <_vfiprintf_r+0x214>)
 80039d4:	429c      	cmp	r4, r3
 80039d6:	d101      	bne.n	80039dc <_vfiprintf_r+0xd8>
 80039d8:	68b4      	ldr	r4, [r6, #8]
 80039da:	e7a3      	b.n	8003924 <_vfiprintf_r+0x20>
 80039dc:	4b4f      	ldr	r3, [pc, #316]	; (8003b1c <_vfiprintf_r+0x218>)
 80039de:	429c      	cmp	r4, r3
 80039e0:	bf08      	it	eq
 80039e2:	68f4      	ldreq	r4, [r6, #12]
 80039e4:	e79e      	b.n	8003924 <_vfiprintf_r+0x20>
 80039e6:	4621      	mov	r1, r4
 80039e8:	4630      	mov	r0, r6
 80039ea:	f000 faef 	bl	8003fcc <__swsetup_r>
 80039ee:	2800      	cmp	r0, #0
 80039f0:	d09e      	beq.n	8003930 <_vfiprintf_r+0x2c>
 80039f2:	f04f 30ff 	mov.w	r0, #4294967295
 80039f6:	b01d      	add	sp, #116	; 0x74
 80039f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039fc:	2b25      	cmp	r3, #37	; 0x25
 80039fe:	d0a7      	beq.n	8003950 <_vfiprintf_r+0x4c>
 8003a00:	46a8      	mov	r8, r5
 8003a02:	e7a0      	b.n	8003946 <_vfiprintf_r+0x42>
 8003a04:	4a43      	ldr	r2, [pc, #268]	; (8003b14 <_vfiprintf_r+0x210>)
 8003a06:	1a80      	subs	r0, r0, r2
 8003a08:	fa0b f000 	lsl.w	r0, fp, r0
 8003a0c:	4318      	orrs	r0, r3
 8003a0e:	9004      	str	r0, [sp, #16]
 8003a10:	4645      	mov	r5, r8
 8003a12:	e7bb      	b.n	800398c <_vfiprintf_r+0x88>
 8003a14:	9a03      	ldr	r2, [sp, #12]
 8003a16:	1d11      	adds	r1, r2, #4
 8003a18:	6812      	ldr	r2, [r2, #0]
 8003a1a:	9103      	str	r1, [sp, #12]
 8003a1c:	2a00      	cmp	r2, #0
 8003a1e:	db01      	blt.n	8003a24 <_vfiprintf_r+0x120>
 8003a20:	9207      	str	r2, [sp, #28]
 8003a22:	e004      	b.n	8003a2e <_vfiprintf_r+0x12a>
 8003a24:	4252      	negs	r2, r2
 8003a26:	f043 0302 	orr.w	r3, r3, #2
 8003a2a:	9207      	str	r2, [sp, #28]
 8003a2c:	9304      	str	r3, [sp, #16]
 8003a2e:	f898 3000 	ldrb.w	r3, [r8]
 8003a32:	2b2e      	cmp	r3, #46	; 0x2e
 8003a34:	d110      	bne.n	8003a58 <_vfiprintf_r+0x154>
 8003a36:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003a3a:	2b2a      	cmp	r3, #42	; 0x2a
 8003a3c:	f108 0101 	add.w	r1, r8, #1
 8003a40:	d137      	bne.n	8003ab2 <_vfiprintf_r+0x1ae>
 8003a42:	9b03      	ldr	r3, [sp, #12]
 8003a44:	1d1a      	adds	r2, r3, #4
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	9203      	str	r2, [sp, #12]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	bfb8      	it	lt
 8003a4e:	f04f 33ff 	movlt.w	r3, #4294967295
 8003a52:	f108 0802 	add.w	r8, r8, #2
 8003a56:	9305      	str	r3, [sp, #20]
 8003a58:	4d31      	ldr	r5, [pc, #196]	; (8003b20 <_vfiprintf_r+0x21c>)
 8003a5a:	f898 1000 	ldrb.w	r1, [r8]
 8003a5e:	2203      	movs	r2, #3
 8003a60:	4628      	mov	r0, r5
 8003a62:	f7fc fbed 	bl	8000240 <memchr>
 8003a66:	b140      	cbz	r0, 8003a7a <_vfiprintf_r+0x176>
 8003a68:	2340      	movs	r3, #64	; 0x40
 8003a6a:	1b40      	subs	r0, r0, r5
 8003a6c:	fa03 f000 	lsl.w	r0, r3, r0
 8003a70:	9b04      	ldr	r3, [sp, #16]
 8003a72:	4303      	orrs	r3, r0
 8003a74:	9304      	str	r3, [sp, #16]
 8003a76:	f108 0801 	add.w	r8, r8, #1
 8003a7a:	f898 1000 	ldrb.w	r1, [r8]
 8003a7e:	4829      	ldr	r0, [pc, #164]	; (8003b24 <_vfiprintf_r+0x220>)
 8003a80:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003a84:	2206      	movs	r2, #6
 8003a86:	f108 0701 	add.w	r7, r8, #1
 8003a8a:	f7fc fbd9 	bl	8000240 <memchr>
 8003a8e:	2800      	cmp	r0, #0
 8003a90:	d034      	beq.n	8003afc <_vfiprintf_r+0x1f8>
 8003a92:	4b25      	ldr	r3, [pc, #148]	; (8003b28 <_vfiprintf_r+0x224>)
 8003a94:	bb03      	cbnz	r3, 8003ad8 <_vfiprintf_r+0x1d4>
 8003a96:	9b03      	ldr	r3, [sp, #12]
 8003a98:	3307      	adds	r3, #7
 8003a9a:	f023 0307 	bic.w	r3, r3, #7
 8003a9e:	3308      	adds	r3, #8
 8003aa0:	9303      	str	r3, [sp, #12]
 8003aa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003aa4:	444b      	add	r3, r9
 8003aa6:	9309      	str	r3, [sp, #36]	; 0x24
 8003aa8:	e74c      	b.n	8003944 <_vfiprintf_r+0x40>
 8003aaa:	fb00 3202 	mla	r2, r0, r2, r3
 8003aae:	2101      	movs	r1, #1
 8003ab0:	e786      	b.n	80039c0 <_vfiprintf_r+0xbc>
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	9305      	str	r3, [sp, #20]
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	250a      	movs	r5, #10
 8003aba:	4688      	mov	r8, r1
 8003abc:	3101      	adds	r1, #1
 8003abe:	f898 2000 	ldrb.w	r2, [r8]
 8003ac2:	3a30      	subs	r2, #48	; 0x30
 8003ac4:	2a09      	cmp	r2, #9
 8003ac6:	d903      	bls.n	8003ad0 <_vfiprintf_r+0x1cc>
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d0c5      	beq.n	8003a58 <_vfiprintf_r+0x154>
 8003acc:	9005      	str	r0, [sp, #20]
 8003ace:	e7c3      	b.n	8003a58 <_vfiprintf_r+0x154>
 8003ad0:	fb05 2000 	mla	r0, r5, r0, r2
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e7f0      	b.n	8003aba <_vfiprintf_r+0x1b6>
 8003ad8:	ab03      	add	r3, sp, #12
 8003ada:	9300      	str	r3, [sp, #0]
 8003adc:	4622      	mov	r2, r4
 8003ade:	4b13      	ldr	r3, [pc, #76]	; (8003b2c <_vfiprintf_r+0x228>)
 8003ae0:	a904      	add	r1, sp, #16
 8003ae2:	4630      	mov	r0, r6
 8003ae4:	f3af 8000 	nop.w
 8003ae8:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003aec:	4681      	mov	r9, r0
 8003aee:	d1d8      	bne.n	8003aa2 <_vfiprintf_r+0x19e>
 8003af0:	89a3      	ldrh	r3, [r4, #12]
 8003af2:	065b      	lsls	r3, r3, #25
 8003af4:	f53f af7d 	bmi.w	80039f2 <_vfiprintf_r+0xee>
 8003af8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003afa:	e77c      	b.n	80039f6 <_vfiprintf_r+0xf2>
 8003afc:	ab03      	add	r3, sp, #12
 8003afe:	9300      	str	r3, [sp, #0]
 8003b00:	4622      	mov	r2, r4
 8003b02:	4b0a      	ldr	r3, [pc, #40]	; (8003b2c <_vfiprintf_r+0x228>)
 8003b04:	a904      	add	r1, sp, #16
 8003b06:	4630      	mov	r0, r6
 8003b08:	f000 f888 	bl	8003c1c <_printf_i>
 8003b0c:	e7ec      	b.n	8003ae8 <_vfiprintf_r+0x1e4>
 8003b0e:	bf00      	nop
 8003b10:	080044d4 	.word	0x080044d4
 8003b14:	08004514 	.word	0x08004514
 8003b18:	080044f4 	.word	0x080044f4
 8003b1c:	080044b4 	.word	0x080044b4
 8003b20:	0800451a 	.word	0x0800451a
 8003b24:	0800451e 	.word	0x0800451e
 8003b28:	00000000 	.word	0x00000000
 8003b2c:	080038e1 	.word	0x080038e1

08003b30 <_printf_common>:
 8003b30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b34:	4691      	mov	r9, r2
 8003b36:	461f      	mov	r7, r3
 8003b38:	688a      	ldr	r2, [r1, #8]
 8003b3a:	690b      	ldr	r3, [r1, #16]
 8003b3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003b40:	4293      	cmp	r3, r2
 8003b42:	bfb8      	it	lt
 8003b44:	4613      	movlt	r3, r2
 8003b46:	f8c9 3000 	str.w	r3, [r9]
 8003b4a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003b4e:	4606      	mov	r6, r0
 8003b50:	460c      	mov	r4, r1
 8003b52:	b112      	cbz	r2, 8003b5a <_printf_common+0x2a>
 8003b54:	3301      	adds	r3, #1
 8003b56:	f8c9 3000 	str.w	r3, [r9]
 8003b5a:	6823      	ldr	r3, [r4, #0]
 8003b5c:	0699      	lsls	r1, r3, #26
 8003b5e:	bf42      	ittt	mi
 8003b60:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003b64:	3302      	addmi	r3, #2
 8003b66:	f8c9 3000 	strmi.w	r3, [r9]
 8003b6a:	6825      	ldr	r5, [r4, #0]
 8003b6c:	f015 0506 	ands.w	r5, r5, #6
 8003b70:	d107      	bne.n	8003b82 <_printf_common+0x52>
 8003b72:	f104 0a19 	add.w	sl, r4, #25
 8003b76:	68e3      	ldr	r3, [r4, #12]
 8003b78:	f8d9 2000 	ldr.w	r2, [r9]
 8003b7c:	1a9b      	subs	r3, r3, r2
 8003b7e:	429d      	cmp	r5, r3
 8003b80:	db29      	blt.n	8003bd6 <_printf_common+0xa6>
 8003b82:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003b86:	6822      	ldr	r2, [r4, #0]
 8003b88:	3300      	adds	r3, #0
 8003b8a:	bf18      	it	ne
 8003b8c:	2301      	movne	r3, #1
 8003b8e:	0692      	lsls	r2, r2, #26
 8003b90:	d42e      	bmi.n	8003bf0 <_printf_common+0xc0>
 8003b92:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003b96:	4639      	mov	r1, r7
 8003b98:	4630      	mov	r0, r6
 8003b9a:	47c0      	blx	r8
 8003b9c:	3001      	adds	r0, #1
 8003b9e:	d021      	beq.n	8003be4 <_printf_common+0xb4>
 8003ba0:	6823      	ldr	r3, [r4, #0]
 8003ba2:	68e5      	ldr	r5, [r4, #12]
 8003ba4:	f8d9 2000 	ldr.w	r2, [r9]
 8003ba8:	f003 0306 	and.w	r3, r3, #6
 8003bac:	2b04      	cmp	r3, #4
 8003bae:	bf08      	it	eq
 8003bb0:	1aad      	subeq	r5, r5, r2
 8003bb2:	68a3      	ldr	r3, [r4, #8]
 8003bb4:	6922      	ldr	r2, [r4, #16]
 8003bb6:	bf0c      	ite	eq
 8003bb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003bbc:	2500      	movne	r5, #0
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	bfc4      	itt	gt
 8003bc2:	1a9b      	subgt	r3, r3, r2
 8003bc4:	18ed      	addgt	r5, r5, r3
 8003bc6:	f04f 0900 	mov.w	r9, #0
 8003bca:	341a      	adds	r4, #26
 8003bcc:	454d      	cmp	r5, r9
 8003bce:	d11b      	bne.n	8003c08 <_printf_common+0xd8>
 8003bd0:	2000      	movs	r0, #0
 8003bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	4652      	mov	r2, sl
 8003bda:	4639      	mov	r1, r7
 8003bdc:	4630      	mov	r0, r6
 8003bde:	47c0      	blx	r8
 8003be0:	3001      	adds	r0, #1
 8003be2:	d103      	bne.n	8003bec <_printf_common+0xbc>
 8003be4:	f04f 30ff 	mov.w	r0, #4294967295
 8003be8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bec:	3501      	adds	r5, #1
 8003bee:	e7c2      	b.n	8003b76 <_printf_common+0x46>
 8003bf0:	18e1      	adds	r1, r4, r3
 8003bf2:	1c5a      	adds	r2, r3, #1
 8003bf4:	2030      	movs	r0, #48	; 0x30
 8003bf6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003bfa:	4422      	add	r2, r4
 8003bfc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003c00:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003c04:	3302      	adds	r3, #2
 8003c06:	e7c4      	b.n	8003b92 <_printf_common+0x62>
 8003c08:	2301      	movs	r3, #1
 8003c0a:	4622      	mov	r2, r4
 8003c0c:	4639      	mov	r1, r7
 8003c0e:	4630      	mov	r0, r6
 8003c10:	47c0      	blx	r8
 8003c12:	3001      	adds	r0, #1
 8003c14:	d0e6      	beq.n	8003be4 <_printf_common+0xb4>
 8003c16:	f109 0901 	add.w	r9, r9, #1
 8003c1a:	e7d7      	b.n	8003bcc <_printf_common+0x9c>

08003c1c <_printf_i>:
 8003c1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003c20:	4617      	mov	r7, r2
 8003c22:	7e0a      	ldrb	r2, [r1, #24]
 8003c24:	b085      	sub	sp, #20
 8003c26:	2a6e      	cmp	r2, #110	; 0x6e
 8003c28:	4698      	mov	r8, r3
 8003c2a:	4606      	mov	r6, r0
 8003c2c:	460c      	mov	r4, r1
 8003c2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003c30:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8003c34:	f000 80bc 	beq.w	8003db0 <_printf_i+0x194>
 8003c38:	d81a      	bhi.n	8003c70 <_printf_i+0x54>
 8003c3a:	2a63      	cmp	r2, #99	; 0x63
 8003c3c:	d02e      	beq.n	8003c9c <_printf_i+0x80>
 8003c3e:	d80a      	bhi.n	8003c56 <_printf_i+0x3a>
 8003c40:	2a00      	cmp	r2, #0
 8003c42:	f000 80c8 	beq.w	8003dd6 <_printf_i+0x1ba>
 8003c46:	2a58      	cmp	r2, #88	; 0x58
 8003c48:	f000 808a 	beq.w	8003d60 <_printf_i+0x144>
 8003c4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c50:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8003c54:	e02a      	b.n	8003cac <_printf_i+0x90>
 8003c56:	2a64      	cmp	r2, #100	; 0x64
 8003c58:	d001      	beq.n	8003c5e <_printf_i+0x42>
 8003c5a:	2a69      	cmp	r2, #105	; 0x69
 8003c5c:	d1f6      	bne.n	8003c4c <_printf_i+0x30>
 8003c5e:	6821      	ldr	r1, [r4, #0]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003c66:	d023      	beq.n	8003cb0 <_printf_i+0x94>
 8003c68:	1d11      	adds	r1, r2, #4
 8003c6a:	6019      	str	r1, [r3, #0]
 8003c6c:	6813      	ldr	r3, [r2, #0]
 8003c6e:	e027      	b.n	8003cc0 <_printf_i+0xa4>
 8003c70:	2a73      	cmp	r2, #115	; 0x73
 8003c72:	f000 80b4 	beq.w	8003dde <_printf_i+0x1c2>
 8003c76:	d808      	bhi.n	8003c8a <_printf_i+0x6e>
 8003c78:	2a6f      	cmp	r2, #111	; 0x6f
 8003c7a:	d02a      	beq.n	8003cd2 <_printf_i+0xb6>
 8003c7c:	2a70      	cmp	r2, #112	; 0x70
 8003c7e:	d1e5      	bne.n	8003c4c <_printf_i+0x30>
 8003c80:	680a      	ldr	r2, [r1, #0]
 8003c82:	f042 0220 	orr.w	r2, r2, #32
 8003c86:	600a      	str	r2, [r1, #0]
 8003c88:	e003      	b.n	8003c92 <_printf_i+0x76>
 8003c8a:	2a75      	cmp	r2, #117	; 0x75
 8003c8c:	d021      	beq.n	8003cd2 <_printf_i+0xb6>
 8003c8e:	2a78      	cmp	r2, #120	; 0x78
 8003c90:	d1dc      	bne.n	8003c4c <_printf_i+0x30>
 8003c92:	2278      	movs	r2, #120	; 0x78
 8003c94:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8003c98:	496e      	ldr	r1, [pc, #440]	; (8003e54 <_printf_i+0x238>)
 8003c9a:	e064      	b.n	8003d66 <_printf_i+0x14a>
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8003ca2:	1d11      	adds	r1, r2, #4
 8003ca4:	6019      	str	r1, [r3, #0]
 8003ca6:	6813      	ldr	r3, [r2, #0]
 8003ca8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003cac:	2301      	movs	r3, #1
 8003cae:	e0a3      	b.n	8003df8 <_printf_i+0x1dc>
 8003cb0:	f011 0f40 	tst.w	r1, #64	; 0x40
 8003cb4:	f102 0104 	add.w	r1, r2, #4
 8003cb8:	6019      	str	r1, [r3, #0]
 8003cba:	d0d7      	beq.n	8003c6c <_printf_i+0x50>
 8003cbc:	f9b2 3000 	ldrsh.w	r3, [r2]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	da03      	bge.n	8003ccc <_printf_i+0xb0>
 8003cc4:	222d      	movs	r2, #45	; 0x2d
 8003cc6:	425b      	negs	r3, r3
 8003cc8:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003ccc:	4962      	ldr	r1, [pc, #392]	; (8003e58 <_printf_i+0x23c>)
 8003cce:	220a      	movs	r2, #10
 8003cd0:	e017      	b.n	8003d02 <_printf_i+0xe6>
 8003cd2:	6820      	ldr	r0, [r4, #0]
 8003cd4:	6819      	ldr	r1, [r3, #0]
 8003cd6:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003cda:	d003      	beq.n	8003ce4 <_printf_i+0xc8>
 8003cdc:	1d08      	adds	r0, r1, #4
 8003cde:	6018      	str	r0, [r3, #0]
 8003ce0:	680b      	ldr	r3, [r1, #0]
 8003ce2:	e006      	b.n	8003cf2 <_printf_i+0xd6>
 8003ce4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003ce8:	f101 0004 	add.w	r0, r1, #4
 8003cec:	6018      	str	r0, [r3, #0]
 8003cee:	d0f7      	beq.n	8003ce0 <_printf_i+0xc4>
 8003cf0:	880b      	ldrh	r3, [r1, #0]
 8003cf2:	4959      	ldr	r1, [pc, #356]	; (8003e58 <_printf_i+0x23c>)
 8003cf4:	2a6f      	cmp	r2, #111	; 0x6f
 8003cf6:	bf14      	ite	ne
 8003cf8:	220a      	movne	r2, #10
 8003cfa:	2208      	moveq	r2, #8
 8003cfc:	2000      	movs	r0, #0
 8003cfe:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8003d02:	6865      	ldr	r5, [r4, #4]
 8003d04:	60a5      	str	r5, [r4, #8]
 8003d06:	2d00      	cmp	r5, #0
 8003d08:	f2c0 809c 	blt.w	8003e44 <_printf_i+0x228>
 8003d0c:	6820      	ldr	r0, [r4, #0]
 8003d0e:	f020 0004 	bic.w	r0, r0, #4
 8003d12:	6020      	str	r0, [r4, #0]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d13f      	bne.n	8003d98 <_printf_i+0x17c>
 8003d18:	2d00      	cmp	r5, #0
 8003d1a:	f040 8095 	bne.w	8003e48 <_printf_i+0x22c>
 8003d1e:	4675      	mov	r5, lr
 8003d20:	2a08      	cmp	r2, #8
 8003d22:	d10b      	bne.n	8003d3c <_printf_i+0x120>
 8003d24:	6823      	ldr	r3, [r4, #0]
 8003d26:	07da      	lsls	r2, r3, #31
 8003d28:	d508      	bpl.n	8003d3c <_printf_i+0x120>
 8003d2a:	6923      	ldr	r3, [r4, #16]
 8003d2c:	6862      	ldr	r2, [r4, #4]
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	bfde      	ittt	le
 8003d32:	2330      	movle	r3, #48	; 0x30
 8003d34:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003d38:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003d3c:	ebae 0305 	sub.w	r3, lr, r5
 8003d40:	6123      	str	r3, [r4, #16]
 8003d42:	f8cd 8000 	str.w	r8, [sp]
 8003d46:	463b      	mov	r3, r7
 8003d48:	aa03      	add	r2, sp, #12
 8003d4a:	4621      	mov	r1, r4
 8003d4c:	4630      	mov	r0, r6
 8003d4e:	f7ff feef 	bl	8003b30 <_printf_common>
 8003d52:	3001      	adds	r0, #1
 8003d54:	d155      	bne.n	8003e02 <_printf_i+0x1e6>
 8003d56:	f04f 30ff 	mov.w	r0, #4294967295
 8003d5a:	b005      	add	sp, #20
 8003d5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003d60:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8003d64:	493c      	ldr	r1, [pc, #240]	; (8003e58 <_printf_i+0x23c>)
 8003d66:	6822      	ldr	r2, [r4, #0]
 8003d68:	6818      	ldr	r0, [r3, #0]
 8003d6a:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003d6e:	f100 0504 	add.w	r5, r0, #4
 8003d72:	601d      	str	r5, [r3, #0]
 8003d74:	d001      	beq.n	8003d7a <_printf_i+0x15e>
 8003d76:	6803      	ldr	r3, [r0, #0]
 8003d78:	e002      	b.n	8003d80 <_printf_i+0x164>
 8003d7a:	0655      	lsls	r5, r2, #25
 8003d7c:	d5fb      	bpl.n	8003d76 <_printf_i+0x15a>
 8003d7e:	8803      	ldrh	r3, [r0, #0]
 8003d80:	07d0      	lsls	r0, r2, #31
 8003d82:	bf44      	itt	mi
 8003d84:	f042 0220 	orrmi.w	r2, r2, #32
 8003d88:	6022      	strmi	r2, [r4, #0]
 8003d8a:	b91b      	cbnz	r3, 8003d94 <_printf_i+0x178>
 8003d8c:	6822      	ldr	r2, [r4, #0]
 8003d8e:	f022 0220 	bic.w	r2, r2, #32
 8003d92:	6022      	str	r2, [r4, #0]
 8003d94:	2210      	movs	r2, #16
 8003d96:	e7b1      	b.n	8003cfc <_printf_i+0xe0>
 8003d98:	4675      	mov	r5, lr
 8003d9a:	fbb3 f0f2 	udiv	r0, r3, r2
 8003d9e:	fb02 3310 	mls	r3, r2, r0, r3
 8003da2:	5ccb      	ldrb	r3, [r1, r3]
 8003da4:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003da8:	4603      	mov	r3, r0
 8003daa:	2800      	cmp	r0, #0
 8003dac:	d1f5      	bne.n	8003d9a <_printf_i+0x17e>
 8003dae:	e7b7      	b.n	8003d20 <_printf_i+0x104>
 8003db0:	6808      	ldr	r0, [r1, #0]
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	6949      	ldr	r1, [r1, #20]
 8003db6:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003dba:	d004      	beq.n	8003dc6 <_printf_i+0x1aa>
 8003dbc:	1d10      	adds	r0, r2, #4
 8003dbe:	6018      	str	r0, [r3, #0]
 8003dc0:	6813      	ldr	r3, [r2, #0]
 8003dc2:	6019      	str	r1, [r3, #0]
 8003dc4:	e007      	b.n	8003dd6 <_printf_i+0x1ba>
 8003dc6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003dca:	f102 0004 	add.w	r0, r2, #4
 8003dce:	6018      	str	r0, [r3, #0]
 8003dd0:	6813      	ldr	r3, [r2, #0]
 8003dd2:	d0f6      	beq.n	8003dc2 <_printf_i+0x1a6>
 8003dd4:	8019      	strh	r1, [r3, #0]
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	6123      	str	r3, [r4, #16]
 8003dda:	4675      	mov	r5, lr
 8003ddc:	e7b1      	b.n	8003d42 <_printf_i+0x126>
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	1d11      	adds	r1, r2, #4
 8003de2:	6019      	str	r1, [r3, #0]
 8003de4:	6815      	ldr	r5, [r2, #0]
 8003de6:	6862      	ldr	r2, [r4, #4]
 8003de8:	2100      	movs	r1, #0
 8003dea:	4628      	mov	r0, r5
 8003dec:	f7fc fa28 	bl	8000240 <memchr>
 8003df0:	b108      	cbz	r0, 8003df6 <_printf_i+0x1da>
 8003df2:	1b40      	subs	r0, r0, r5
 8003df4:	6060      	str	r0, [r4, #4]
 8003df6:	6863      	ldr	r3, [r4, #4]
 8003df8:	6123      	str	r3, [r4, #16]
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e00:	e79f      	b.n	8003d42 <_printf_i+0x126>
 8003e02:	6923      	ldr	r3, [r4, #16]
 8003e04:	462a      	mov	r2, r5
 8003e06:	4639      	mov	r1, r7
 8003e08:	4630      	mov	r0, r6
 8003e0a:	47c0      	blx	r8
 8003e0c:	3001      	adds	r0, #1
 8003e0e:	d0a2      	beq.n	8003d56 <_printf_i+0x13a>
 8003e10:	6823      	ldr	r3, [r4, #0]
 8003e12:	079b      	lsls	r3, r3, #30
 8003e14:	d507      	bpl.n	8003e26 <_printf_i+0x20a>
 8003e16:	2500      	movs	r5, #0
 8003e18:	f104 0919 	add.w	r9, r4, #25
 8003e1c:	68e3      	ldr	r3, [r4, #12]
 8003e1e:	9a03      	ldr	r2, [sp, #12]
 8003e20:	1a9b      	subs	r3, r3, r2
 8003e22:	429d      	cmp	r5, r3
 8003e24:	db05      	blt.n	8003e32 <_printf_i+0x216>
 8003e26:	68e0      	ldr	r0, [r4, #12]
 8003e28:	9b03      	ldr	r3, [sp, #12]
 8003e2a:	4298      	cmp	r0, r3
 8003e2c:	bfb8      	it	lt
 8003e2e:	4618      	movlt	r0, r3
 8003e30:	e793      	b.n	8003d5a <_printf_i+0x13e>
 8003e32:	2301      	movs	r3, #1
 8003e34:	464a      	mov	r2, r9
 8003e36:	4639      	mov	r1, r7
 8003e38:	4630      	mov	r0, r6
 8003e3a:	47c0      	blx	r8
 8003e3c:	3001      	adds	r0, #1
 8003e3e:	d08a      	beq.n	8003d56 <_printf_i+0x13a>
 8003e40:	3501      	adds	r5, #1
 8003e42:	e7eb      	b.n	8003e1c <_printf_i+0x200>
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d1a7      	bne.n	8003d98 <_printf_i+0x17c>
 8003e48:	780b      	ldrb	r3, [r1, #0]
 8003e4a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003e4e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e52:	e765      	b.n	8003d20 <_printf_i+0x104>
 8003e54:	08004536 	.word	0x08004536
 8003e58:	08004525 	.word	0x08004525

08003e5c <_sbrk_r>:
 8003e5c:	b538      	push	{r3, r4, r5, lr}
 8003e5e:	4c06      	ldr	r4, [pc, #24]	; (8003e78 <_sbrk_r+0x1c>)
 8003e60:	2300      	movs	r3, #0
 8003e62:	4605      	mov	r5, r0
 8003e64:	4608      	mov	r0, r1
 8003e66:	6023      	str	r3, [r4, #0]
 8003e68:	f7ff fb52 	bl	8003510 <_sbrk>
 8003e6c:	1c43      	adds	r3, r0, #1
 8003e6e:	d102      	bne.n	8003e76 <_sbrk_r+0x1a>
 8003e70:	6823      	ldr	r3, [r4, #0]
 8003e72:	b103      	cbz	r3, 8003e76 <_sbrk_r+0x1a>
 8003e74:	602b      	str	r3, [r5, #0]
 8003e76:	bd38      	pop	{r3, r4, r5, pc}
 8003e78:	2002450c 	.word	0x2002450c

08003e7c <__sread>:
 8003e7c:	b510      	push	{r4, lr}
 8003e7e:	460c      	mov	r4, r1
 8003e80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e84:	f000 fa98 	bl	80043b8 <_read_r>
 8003e88:	2800      	cmp	r0, #0
 8003e8a:	bfab      	itete	ge
 8003e8c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003e8e:	89a3      	ldrhlt	r3, [r4, #12]
 8003e90:	181b      	addge	r3, r3, r0
 8003e92:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003e96:	bfac      	ite	ge
 8003e98:	6563      	strge	r3, [r4, #84]	; 0x54
 8003e9a:	81a3      	strhlt	r3, [r4, #12]
 8003e9c:	bd10      	pop	{r4, pc}

08003e9e <__swrite>:
 8003e9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ea2:	461f      	mov	r7, r3
 8003ea4:	898b      	ldrh	r3, [r1, #12]
 8003ea6:	05db      	lsls	r3, r3, #23
 8003ea8:	4605      	mov	r5, r0
 8003eaa:	460c      	mov	r4, r1
 8003eac:	4616      	mov	r6, r2
 8003eae:	d505      	bpl.n	8003ebc <__swrite+0x1e>
 8003eb0:	2302      	movs	r3, #2
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003eb8:	f000 f9b8 	bl	800422c <_lseek_r>
 8003ebc:	89a3      	ldrh	r3, [r4, #12]
 8003ebe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003ec2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ec6:	81a3      	strh	r3, [r4, #12]
 8003ec8:	4632      	mov	r2, r6
 8003eca:	463b      	mov	r3, r7
 8003ecc:	4628      	mov	r0, r5
 8003ece:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003ed2:	f000 b869 	b.w	8003fa8 <_write_r>

08003ed6 <__sseek>:
 8003ed6:	b510      	push	{r4, lr}
 8003ed8:	460c      	mov	r4, r1
 8003eda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ede:	f000 f9a5 	bl	800422c <_lseek_r>
 8003ee2:	1c43      	adds	r3, r0, #1
 8003ee4:	89a3      	ldrh	r3, [r4, #12]
 8003ee6:	bf15      	itete	ne
 8003ee8:	6560      	strne	r0, [r4, #84]	; 0x54
 8003eea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003eee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003ef2:	81a3      	strheq	r3, [r4, #12]
 8003ef4:	bf18      	it	ne
 8003ef6:	81a3      	strhne	r3, [r4, #12]
 8003ef8:	bd10      	pop	{r4, pc}

08003efa <__sclose>:
 8003efa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003efe:	f000 b8d3 	b.w	80040a8 <_close_r>
	...

08003f04 <__swbuf_r>:
 8003f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f06:	460e      	mov	r6, r1
 8003f08:	4614      	mov	r4, r2
 8003f0a:	4605      	mov	r5, r0
 8003f0c:	b118      	cbz	r0, 8003f16 <__swbuf_r+0x12>
 8003f0e:	6983      	ldr	r3, [r0, #24]
 8003f10:	b90b      	cbnz	r3, 8003f16 <__swbuf_r+0x12>
 8003f12:	f7ff fbe5 	bl	80036e0 <__sinit>
 8003f16:	4b21      	ldr	r3, [pc, #132]	; (8003f9c <__swbuf_r+0x98>)
 8003f18:	429c      	cmp	r4, r3
 8003f1a:	d12a      	bne.n	8003f72 <__swbuf_r+0x6e>
 8003f1c:	686c      	ldr	r4, [r5, #4]
 8003f1e:	69a3      	ldr	r3, [r4, #24]
 8003f20:	60a3      	str	r3, [r4, #8]
 8003f22:	89a3      	ldrh	r3, [r4, #12]
 8003f24:	071a      	lsls	r2, r3, #28
 8003f26:	d52e      	bpl.n	8003f86 <__swbuf_r+0x82>
 8003f28:	6923      	ldr	r3, [r4, #16]
 8003f2a:	b363      	cbz	r3, 8003f86 <__swbuf_r+0x82>
 8003f2c:	6923      	ldr	r3, [r4, #16]
 8003f2e:	6820      	ldr	r0, [r4, #0]
 8003f30:	1ac0      	subs	r0, r0, r3
 8003f32:	6963      	ldr	r3, [r4, #20]
 8003f34:	b2f6      	uxtb	r6, r6
 8003f36:	4298      	cmp	r0, r3
 8003f38:	4637      	mov	r7, r6
 8003f3a:	db04      	blt.n	8003f46 <__swbuf_r+0x42>
 8003f3c:	4621      	mov	r1, r4
 8003f3e:	4628      	mov	r0, r5
 8003f40:	f000 f94a 	bl	80041d8 <_fflush_r>
 8003f44:	bb28      	cbnz	r0, 8003f92 <__swbuf_r+0x8e>
 8003f46:	68a3      	ldr	r3, [r4, #8]
 8003f48:	3b01      	subs	r3, #1
 8003f4a:	60a3      	str	r3, [r4, #8]
 8003f4c:	6823      	ldr	r3, [r4, #0]
 8003f4e:	1c5a      	adds	r2, r3, #1
 8003f50:	6022      	str	r2, [r4, #0]
 8003f52:	701e      	strb	r6, [r3, #0]
 8003f54:	6963      	ldr	r3, [r4, #20]
 8003f56:	3001      	adds	r0, #1
 8003f58:	4298      	cmp	r0, r3
 8003f5a:	d004      	beq.n	8003f66 <__swbuf_r+0x62>
 8003f5c:	89a3      	ldrh	r3, [r4, #12]
 8003f5e:	07db      	lsls	r3, r3, #31
 8003f60:	d519      	bpl.n	8003f96 <__swbuf_r+0x92>
 8003f62:	2e0a      	cmp	r6, #10
 8003f64:	d117      	bne.n	8003f96 <__swbuf_r+0x92>
 8003f66:	4621      	mov	r1, r4
 8003f68:	4628      	mov	r0, r5
 8003f6a:	f000 f935 	bl	80041d8 <_fflush_r>
 8003f6e:	b190      	cbz	r0, 8003f96 <__swbuf_r+0x92>
 8003f70:	e00f      	b.n	8003f92 <__swbuf_r+0x8e>
 8003f72:	4b0b      	ldr	r3, [pc, #44]	; (8003fa0 <__swbuf_r+0x9c>)
 8003f74:	429c      	cmp	r4, r3
 8003f76:	d101      	bne.n	8003f7c <__swbuf_r+0x78>
 8003f78:	68ac      	ldr	r4, [r5, #8]
 8003f7a:	e7d0      	b.n	8003f1e <__swbuf_r+0x1a>
 8003f7c:	4b09      	ldr	r3, [pc, #36]	; (8003fa4 <__swbuf_r+0xa0>)
 8003f7e:	429c      	cmp	r4, r3
 8003f80:	bf08      	it	eq
 8003f82:	68ec      	ldreq	r4, [r5, #12]
 8003f84:	e7cb      	b.n	8003f1e <__swbuf_r+0x1a>
 8003f86:	4621      	mov	r1, r4
 8003f88:	4628      	mov	r0, r5
 8003f8a:	f000 f81f 	bl	8003fcc <__swsetup_r>
 8003f8e:	2800      	cmp	r0, #0
 8003f90:	d0cc      	beq.n	8003f2c <__swbuf_r+0x28>
 8003f92:	f04f 37ff 	mov.w	r7, #4294967295
 8003f96:	4638      	mov	r0, r7
 8003f98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f9a:	bf00      	nop
 8003f9c:	080044d4 	.word	0x080044d4
 8003fa0:	080044f4 	.word	0x080044f4
 8003fa4:	080044b4 	.word	0x080044b4

08003fa8 <_write_r>:
 8003fa8:	b538      	push	{r3, r4, r5, lr}
 8003faa:	4c07      	ldr	r4, [pc, #28]	; (8003fc8 <_write_r+0x20>)
 8003fac:	4605      	mov	r5, r0
 8003fae:	4608      	mov	r0, r1
 8003fb0:	4611      	mov	r1, r2
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	6022      	str	r2, [r4, #0]
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	f7ff fa9c 	bl	80034f4 <_write>
 8003fbc:	1c43      	adds	r3, r0, #1
 8003fbe:	d102      	bne.n	8003fc6 <_write_r+0x1e>
 8003fc0:	6823      	ldr	r3, [r4, #0]
 8003fc2:	b103      	cbz	r3, 8003fc6 <_write_r+0x1e>
 8003fc4:	602b      	str	r3, [r5, #0]
 8003fc6:	bd38      	pop	{r3, r4, r5, pc}
 8003fc8:	2002450c 	.word	0x2002450c

08003fcc <__swsetup_r>:
 8003fcc:	4b32      	ldr	r3, [pc, #200]	; (8004098 <__swsetup_r+0xcc>)
 8003fce:	b570      	push	{r4, r5, r6, lr}
 8003fd0:	681d      	ldr	r5, [r3, #0]
 8003fd2:	4606      	mov	r6, r0
 8003fd4:	460c      	mov	r4, r1
 8003fd6:	b125      	cbz	r5, 8003fe2 <__swsetup_r+0x16>
 8003fd8:	69ab      	ldr	r3, [r5, #24]
 8003fda:	b913      	cbnz	r3, 8003fe2 <__swsetup_r+0x16>
 8003fdc:	4628      	mov	r0, r5
 8003fde:	f7ff fb7f 	bl	80036e0 <__sinit>
 8003fe2:	4b2e      	ldr	r3, [pc, #184]	; (800409c <__swsetup_r+0xd0>)
 8003fe4:	429c      	cmp	r4, r3
 8003fe6:	d10f      	bne.n	8004008 <__swsetup_r+0x3c>
 8003fe8:	686c      	ldr	r4, [r5, #4]
 8003fea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003fee:	b29a      	uxth	r2, r3
 8003ff0:	0715      	lsls	r5, r2, #28
 8003ff2:	d42c      	bmi.n	800404e <__swsetup_r+0x82>
 8003ff4:	06d0      	lsls	r0, r2, #27
 8003ff6:	d411      	bmi.n	800401c <__swsetup_r+0x50>
 8003ff8:	2209      	movs	r2, #9
 8003ffa:	6032      	str	r2, [r6, #0]
 8003ffc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004000:	81a3      	strh	r3, [r4, #12]
 8004002:	f04f 30ff 	mov.w	r0, #4294967295
 8004006:	bd70      	pop	{r4, r5, r6, pc}
 8004008:	4b25      	ldr	r3, [pc, #148]	; (80040a0 <__swsetup_r+0xd4>)
 800400a:	429c      	cmp	r4, r3
 800400c:	d101      	bne.n	8004012 <__swsetup_r+0x46>
 800400e:	68ac      	ldr	r4, [r5, #8]
 8004010:	e7eb      	b.n	8003fea <__swsetup_r+0x1e>
 8004012:	4b24      	ldr	r3, [pc, #144]	; (80040a4 <__swsetup_r+0xd8>)
 8004014:	429c      	cmp	r4, r3
 8004016:	bf08      	it	eq
 8004018:	68ec      	ldreq	r4, [r5, #12]
 800401a:	e7e6      	b.n	8003fea <__swsetup_r+0x1e>
 800401c:	0751      	lsls	r1, r2, #29
 800401e:	d512      	bpl.n	8004046 <__swsetup_r+0x7a>
 8004020:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004022:	b141      	cbz	r1, 8004036 <__swsetup_r+0x6a>
 8004024:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004028:	4299      	cmp	r1, r3
 800402a:	d002      	beq.n	8004032 <__swsetup_r+0x66>
 800402c:	4630      	mov	r0, r6
 800402e:	f000 f975 	bl	800431c <_free_r>
 8004032:	2300      	movs	r3, #0
 8004034:	6363      	str	r3, [r4, #52]	; 0x34
 8004036:	89a3      	ldrh	r3, [r4, #12]
 8004038:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800403c:	81a3      	strh	r3, [r4, #12]
 800403e:	2300      	movs	r3, #0
 8004040:	6063      	str	r3, [r4, #4]
 8004042:	6923      	ldr	r3, [r4, #16]
 8004044:	6023      	str	r3, [r4, #0]
 8004046:	89a3      	ldrh	r3, [r4, #12]
 8004048:	f043 0308 	orr.w	r3, r3, #8
 800404c:	81a3      	strh	r3, [r4, #12]
 800404e:	6923      	ldr	r3, [r4, #16]
 8004050:	b94b      	cbnz	r3, 8004066 <__swsetup_r+0x9a>
 8004052:	89a3      	ldrh	r3, [r4, #12]
 8004054:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004058:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800405c:	d003      	beq.n	8004066 <__swsetup_r+0x9a>
 800405e:	4621      	mov	r1, r4
 8004060:	4630      	mov	r0, r6
 8004062:	f000 f919 	bl	8004298 <__smakebuf_r>
 8004066:	89a2      	ldrh	r2, [r4, #12]
 8004068:	f012 0301 	ands.w	r3, r2, #1
 800406c:	d00c      	beq.n	8004088 <__swsetup_r+0xbc>
 800406e:	2300      	movs	r3, #0
 8004070:	60a3      	str	r3, [r4, #8]
 8004072:	6963      	ldr	r3, [r4, #20]
 8004074:	425b      	negs	r3, r3
 8004076:	61a3      	str	r3, [r4, #24]
 8004078:	6923      	ldr	r3, [r4, #16]
 800407a:	b953      	cbnz	r3, 8004092 <__swsetup_r+0xc6>
 800407c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004080:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004084:	d1ba      	bne.n	8003ffc <__swsetup_r+0x30>
 8004086:	bd70      	pop	{r4, r5, r6, pc}
 8004088:	0792      	lsls	r2, r2, #30
 800408a:	bf58      	it	pl
 800408c:	6963      	ldrpl	r3, [r4, #20]
 800408e:	60a3      	str	r3, [r4, #8]
 8004090:	e7f2      	b.n	8004078 <__swsetup_r+0xac>
 8004092:	2000      	movs	r0, #0
 8004094:	e7f7      	b.n	8004086 <__swsetup_r+0xba>
 8004096:	bf00      	nop
 8004098:	20020010 	.word	0x20020010
 800409c:	080044d4 	.word	0x080044d4
 80040a0:	080044f4 	.word	0x080044f4
 80040a4:	080044b4 	.word	0x080044b4

080040a8 <_close_r>:
 80040a8:	b538      	push	{r3, r4, r5, lr}
 80040aa:	4c06      	ldr	r4, [pc, #24]	; (80040c4 <_close_r+0x1c>)
 80040ac:	2300      	movs	r3, #0
 80040ae:	4605      	mov	r5, r0
 80040b0:	4608      	mov	r0, r1
 80040b2:	6023      	str	r3, [r4, #0]
 80040b4:	f7ff fa46 	bl	8003544 <_close>
 80040b8:	1c43      	adds	r3, r0, #1
 80040ba:	d102      	bne.n	80040c2 <_close_r+0x1a>
 80040bc:	6823      	ldr	r3, [r4, #0]
 80040be:	b103      	cbz	r3, 80040c2 <_close_r+0x1a>
 80040c0:	602b      	str	r3, [r5, #0]
 80040c2:	bd38      	pop	{r3, r4, r5, pc}
 80040c4:	2002450c 	.word	0x2002450c

080040c8 <__sflush_r>:
 80040c8:	898a      	ldrh	r2, [r1, #12]
 80040ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040ce:	4605      	mov	r5, r0
 80040d0:	0710      	lsls	r0, r2, #28
 80040d2:	460c      	mov	r4, r1
 80040d4:	d45a      	bmi.n	800418c <__sflush_r+0xc4>
 80040d6:	684b      	ldr	r3, [r1, #4]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	dc05      	bgt.n	80040e8 <__sflush_r+0x20>
 80040dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80040de:	2b00      	cmp	r3, #0
 80040e0:	dc02      	bgt.n	80040e8 <__sflush_r+0x20>
 80040e2:	2000      	movs	r0, #0
 80040e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80040e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80040ea:	2e00      	cmp	r6, #0
 80040ec:	d0f9      	beq.n	80040e2 <__sflush_r+0x1a>
 80040ee:	2300      	movs	r3, #0
 80040f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80040f4:	682f      	ldr	r7, [r5, #0]
 80040f6:	602b      	str	r3, [r5, #0]
 80040f8:	d033      	beq.n	8004162 <__sflush_r+0x9a>
 80040fa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80040fc:	89a3      	ldrh	r3, [r4, #12]
 80040fe:	075a      	lsls	r2, r3, #29
 8004100:	d505      	bpl.n	800410e <__sflush_r+0x46>
 8004102:	6863      	ldr	r3, [r4, #4]
 8004104:	1ac0      	subs	r0, r0, r3
 8004106:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004108:	b10b      	cbz	r3, 800410e <__sflush_r+0x46>
 800410a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800410c:	1ac0      	subs	r0, r0, r3
 800410e:	2300      	movs	r3, #0
 8004110:	4602      	mov	r2, r0
 8004112:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004114:	6a21      	ldr	r1, [r4, #32]
 8004116:	4628      	mov	r0, r5
 8004118:	47b0      	blx	r6
 800411a:	1c43      	adds	r3, r0, #1
 800411c:	89a3      	ldrh	r3, [r4, #12]
 800411e:	d106      	bne.n	800412e <__sflush_r+0x66>
 8004120:	6829      	ldr	r1, [r5, #0]
 8004122:	291d      	cmp	r1, #29
 8004124:	d84b      	bhi.n	80041be <__sflush_r+0xf6>
 8004126:	4a2b      	ldr	r2, [pc, #172]	; (80041d4 <__sflush_r+0x10c>)
 8004128:	40ca      	lsrs	r2, r1
 800412a:	07d6      	lsls	r6, r2, #31
 800412c:	d547      	bpl.n	80041be <__sflush_r+0xf6>
 800412e:	2200      	movs	r2, #0
 8004130:	6062      	str	r2, [r4, #4]
 8004132:	04d9      	lsls	r1, r3, #19
 8004134:	6922      	ldr	r2, [r4, #16]
 8004136:	6022      	str	r2, [r4, #0]
 8004138:	d504      	bpl.n	8004144 <__sflush_r+0x7c>
 800413a:	1c42      	adds	r2, r0, #1
 800413c:	d101      	bne.n	8004142 <__sflush_r+0x7a>
 800413e:	682b      	ldr	r3, [r5, #0]
 8004140:	b903      	cbnz	r3, 8004144 <__sflush_r+0x7c>
 8004142:	6560      	str	r0, [r4, #84]	; 0x54
 8004144:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004146:	602f      	str	r7, [r5, #0]
 8004148:	2900      	cmp	r1, #0
 800414a:	d0ca      	beq.n	80040e2 <__sflush_r+0x1a>
 800414c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004150:	4299      	cmp	r1, r3
 8004152:	d002      	beq.n	800415a <__sflush_r+0x92>
 8004154:	4628      	mov	r0, r5
 8004156:	f000 f8e1 	bl	800431c <_free_r>
 800415a:	2000      	movs	r0, #0
 800415c:	6360      	str	r0, [r4, #52]	; 0x34
 800415e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004162:	6a21      	ldr	r1, [r4, #32]
 8004164:	2301      	movs	r3, #1
 8004166:	4628      	mov	r0, r5
 8004168:	47b0      	blx	r6
 800416a:	1c41      	adds	r1, r0, #1
 800416c:	d1c6      	bne.n	80040fc <__sflush_r+0x34>
 800416e:	682b      	ldr	r3, [r5, #0]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d0c3      	beq.n	80040fc <__sflush_r+0x34>
 8004174:	2b1d      	cmp	r3, #29
 8004176:	d001      	beq.n	800417c <__sflush_r+0xb4>
 8004178:	2b16      	cmp	r3, #22
 800417a:	d101      	bne.n	8004180 <__sflush_r+0xb8>
 800417c:	602f      	str	r7, [r5, #0]
 800417e:	e7b0      	b.n	80040e2 <__sflush_r+0x1a>
 8004180:	89a3      	ldrh	r3, [r4, #12]
 8004182:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004186:	81a3      	strh	r3, [r4, #12]
 8004188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800418c:	690f      	ldr	r7, [r1, #16]
 800418e:	2f00      	cmp	r7, #0
 8004190:	d0a7      	beq.n	80040e2 <__sflush_r+0x1a>
 8004192:	0793      	lsls	r3, r2, #30
 8004194:	680e      	ldr	r6, [r1, #0]
 8004196:	bf08      	it	eq
 8004198:	694b      	ldreq	r3, [r1, #20]
 800419a:	600f      	str	r7, [r1, #0]
 800419c:	bf18      	it	ne
 800419e:	2300      	movne	r3, #0
 80041a0:	eba6 0807 	sub.w	r8, r6, r7
 80041a4:	608b      	str	r3, [r1, #8]
 80041a6:	f1b8 0f00 	cmp.w	r8, #0
 80041aa:	dd9a      	ble.n	80040e2 <__sflush_r+0x1a>
 80041ac:	4643      	mov	r3, r8
 80041ae:	463a      	mov	r2, r7
 80041b0:	6a21      	ldr	r1, [r4, #32]
 80041b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80041b4:	4628      	mov	r0, r5
 80041b6:	47b0      	blx	r6
 80041b8:	2800      	cmp	r0, #0
 80041ba:	dc07      	bgt.n	80041cc <__sflush_r+0x104>
 80041bc:	89a3      	ldrh	r3, [r4, #12]
 80041be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041c2:	81a3      	strh	r3, [r4, #12]
 80041c4:	f04f 30ff 	mov.w	r0, #4294967295
 80041c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80041cc:	4407      	add	r7, r0
 80041ce:	eba8 0800 	sub.w	r8, r8, r0
 80041d2:	e7e8      	b.n	80041a6 <__sflush_r+0xde>
 80041d4:	20400001 	.word	0x20400001

080041d8 <_fflush_r>:
 80041d8:	b538      	push	{r3, r4, r5, lr}
 80041da:	690b      	ldr	r3, [r1, #16]
 80041dc:	4605      	mov	r5, r0
 80041de:	460c      	mov	r4, r1
 80041e0:	b1db      	cbz	r3, 800421a <_fflush_r+0x42>
 80041e2:	b118      	cbz	r0, 80041ec <_fflush_r+0x14>
 80041e4:	6983      	ldr	r3, [r0, #24]
 80041e6:	b90b      	cbnz	r3, 80041ec <_fflush_r+0x14>
 80041e8:	f7ff fa7a 	bl	80036e0 <__sinit>
 80041ec:	4b0c      	ldr	r3, [pc, #48]	; (8004220 <_fflush_r+0x48>)
 80041ee:	429c      	cmp	r4, r3
 80041f0:	d109      	bne.n	8004206 <_fflush_r+0x2e>
 80041f2:	686c      	ldr	r4, [r5, #4]
 80041f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80041f8:	b17b      	cbz	r3, 800421a <_fflush_r+0x42>
 80041fa:	4621      	mov	r1, r4
 80041fc:	4628      	mov	r0, r5
 80041fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004202:	f7ff bf61 	b.w	80040c8 <__sflush_r>
 8004206:	4b07      	ldr	r3, [pc, #28]	; (8004224 <_fflush_r+0x4c>)
 8004208:	429c      	cmp	r4, r3
 800420a:	d101      	bne.n	8004210 <_fflush_r+0x38>
 800420c:	68ac      	ldr	r4, [r5, #8]
 800420e:	e7f1      	b.n	80041f4 <_fflush_r+0x1c>
 8004210:	4b05      	ldr	r3, [pc, #20]	; (8004228 <_fflush_r+0x50>)
 8004212:	429c      	cmp	r4, r3
 8004214:	bf08      	it	eq
 8004216:	68ec      	ldreq	r4, [r5, #12]
 8004218:	e7ec      	b.n	80041f4 <_fflush_r+0x1c>
 800421a:	2000      	movs	r0, #0
 800421c:	bd38      	pop	{r3, r4, r5, pc}
 800421e:	bf00      	nop
 8004220:	080044d4 	.word	0x080044d4
 8004224:	080044f4 	.word	0x080044f4
 8004228:	080044b4 	.word	0x080044b4

0800422c <_lseek_r>:
 800422c:	b538      	push	{r3, r4, r5, lr}
 800422e:	4c07      	ldr	r4, [pc, #28]	; (800424c <_lseek_r+0x20>)
 8004230:	4605      	mov	r5, r0
 8004232:	4608      	mov	r0, r1
 8004234:	4611      	mov	r1, r2
 8004236:	2200      	movs	r2, #0
 8004238:	6022      	str	r2, [r4, #0]
 800423a:	461a      	mov	r2, r3
 800423c:	f7ff f98c 	bl	8003558 <_lseek>
 8004240:	1c43      	adds	r3, r0, #1
 8004242:	d102      	bne.n	800424a <_lseek_r+0x1e>
 8004244:	6823      	ldr	r3, [r4, #0]
 8004246:	b103      	cbz	r3, 800424a <_lseek_r+0x1e>
 8004248:	602b      	str	r3, [r5, #0]
 800424a:	bd38      	pop	{r3, r4, r5, pc}
 800424c:	2002450c 	.word	0x2002450c

08004250 <__swhatbuf_r>:
 8004250:	b570      	push	{r4, r5, r6, lr}
 8004252:	460e      	mov	r6, r1
 8004254:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004258:	2900      	cmp	r1, #0
 800425a:	b090      	sub	sp, #64	; 0x40
 800425c:	4614      	mov	r4, r2
 800425e:	461d      	mov	r5, r3
 8004260:	da07      	bge.n	8004272 <__swhatbuf_r+0x22>
 8004262:	2300      	movs	r3, #0
 8004264:	602b      	str	r3, [r5, #0]
 8004266:	89b3      	ldrh	r3, [r6, #12]
 8004268:	061a      	lsls	r2, r3, #24
 800426a:	d410      	bmi.n	800428e <__swhatbuf_r+0x3e>
 800426c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004270:	e00e      	b.n	8004290 <__swhatbuf_r+0x40>
 8004272:	aa01      	add	r2, sp, #4
 8004274:	f000 f8b2 	bl	80043dc <_fstat_r>
 8004278:	2800      	cmp	r0, #0
 800427a:	dbf2      	blt.n	8004262 <__swhatbuf_r+0x12>
 800427c:	9a02      	ldr	r2, [sp, #8]
 800427e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004282:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004286:	425a      	negs	r2, r3
 8004288:	415a      	adcs	r2, r3
 800428a:	602a      	str	r2, [r5, #0]
 800428c:	e7ee      	b.n	800426c <__swhatbuf_r+0x1c>
 800428e:	2340      	movs	r3, #64	; 0x40
 8004290:	2000      	movs	r0, #0
 8004292:	6023      	str	r3, [r4, #0]
 8004294:	b010      	add	sp, #64	; 0x40
 8004296:	bd70      	pop	{r4, r5, r6, pc}

08004298 <__smakebuf_r>:
 8004298:	898b      	ldrh	r3, [r1, #12]
 800429a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800429c:	079d      	lsls	r5, r3, #30
 800429e:	4606      	mov	r6, r0
 80042a0:	460c      	mov	r4, r1
 80042a2:	d507      	bpl.n	80042b4 <__smakebuf_r+0x1c>
 80042a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80042a8:	6023      	str	r3, [r4, #0]
 80042aa:	6123      	str	r3, [r4, #16]
 80042ac:	2301      	movs	r3, #1
 80042ae:	6163      	str	r3, [r4, #20]
 80042b0:	b002      	add	sp, #8
 80042b2:	bd70      	pop	{r4, r5, r6, pc}
 80042b4:	ab01      	add	r3, sp, #4
 80042b6:	466a      	mov	r2, sp
 80042b8:	f7ff ffca 	bl	8004250 <__swhatbuf_r>
 80042bc:	9900      	ldr	r1, [sp, #0]
 80042be:	4605      	mov	r5, r0
 80042c0:	4630      	mov	r0, r6
 80042c2:	f7ff fa97 	bl	80037f4 <_malloc_r>
 80042c6:	b948      	cbnz	r0, 80042dc <__smakebuf_r+0x44>
 80042c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80042cc:	059a      	lsls	r2, r3, #22
 80042ce:	d4ef      	bmi.n	80042b0 <__smakebuf_r+0x18>
 80042d0:	f023 0303 	bic.w	r3, r3, #3
 80042d4:	f043 0302 	orr.w	r3, r3, #2
 80042d8:	81a3      	strh	r3, [r4, #12]
 80042da:	e7e3      	b.n	80042a4 <__smakebuf_r+0xc>
 80042dc:	4b0d      	ldr	r3, [pc, #52]	; (8004314 <__smakebuf_r+0x7c>)
 80042de:	62b3      	str	r3, [r6, #40]	; 0x28
 80042e0:	89a3      	ldrh	r3, [r4, #12]
 80042e2:	6020      	str	r0, [r4, #0]
 80042e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042e8:	81a3      	strh	r3, [r4, #12]
 80042ea:	9b00      	ldr	r3, [sp, #0]
 80042ec:	6163      	str	r3, [r4, #20]
 80042ee:	9b01      	ldr	r3, [sp, #4]
 80042f0:	6120      	str	r0, [r4, #16]
 80042f2:	b15b      	cbz	r3, 800430c <__smakebuf_r+0x74>
 80042f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80042f8:	4630      	mov	r0, r6
 80042fa:	f000 f881 	bl	8004400 <_isatty_r>
 80042fe:	b128      	cbz	r0, 800430c <__smakebuf_r+0x74>
 8004300:	89a3      	ldrh	r3, [r4, #12]
 8004302:	f023 0303 	bic.w	r3, r3, #3
 8004306:	f043 0301 	orr.w	r3, r3, #1
 800430a:	81a3      	strh	r3, [r4, #12]
 800430c:	89a3      	ldrh	r3, [r4, #12]
 800430e:	431d      	orrs	r5, r3
 8004310:	81a5      	strh	r5, [r4, #12]
 8004312:	e7cd      	b.n	80042b0 <__smakebuf_r+0x18>
 8004314:	08003661 	.word	0x08003661

08004318 <__malloc_lock>:
 8004318:	4770      	bx	lr

0800431a <__malloc_unlock>:
 800431a:	4770      	bx	lr

0800431c <_free_r>:
 800431c:	b538      	push	{r3, r4, r5, lr}
 800431e:	4605      	mov	r5, r0
 8004320:	2900      	cmp	r1, #0
 8004322:	d045      	beq.n	80043b0 <_free_r+0x94>
 8004324:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004328:	1f0c      	subs	r4, r1, #4
 800432a:	2b00      	cmp	r3, #0
 800432c:	bfb8      	it	lt
 800432e:	18e4      	addlt	r4, r4, r3
 8004330:	f7ff fff2 	bl	8004318 <__malloc_lock>
 8004334:	4a1f      	ldr	r2, [pc, #124]	; (80043b4 <_free_r+0x98>)
 8004336:	6813      	ldr	r3, [r2, #0]
 8004338:	4610      	mov	r0, r2
 800433a:	b933      	cbnz	r3, 800434a <_free_r+0x2e>
 800433c:	6063      	str	r3, [r4, #4]
 800433e:	6014      	str	r4, [r2, #0]
 8004340:	4628      	mov	r0, r5
 8004342:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004346:	f7ff bfe8 	b.w	800431a <__malloc_unlock>
 800434a:	42a3      	cmp	r3, r4
 800434c:	d90c      	bls.n	8004368 <_free_r+0x4c>
 800434e:	6821      	ldr	r1, [r4, #0]
 8004350:	1862      	adds	r2, r4, r1
 8004352:	4293      	cmp	r3, r2
 8004354:	bf04      	itt	eq
 8004356:	681a      	ldreq	r2, [r3, #0]
 8004358:	685b      	ldreq	r3, [r3, #4]
 800435a:	6063      	str	r3, [r4, #4]
 800435c:	bf04      	itt	eq
 800435e:	1852      	addeq	r2, r2, r1
 8004360:	6022      	streq	r2, [r4, #0]
 8004362:	6004      	str	r4, [r0, #0]
 8004364:	e7ec      	b.n	8004340 <_free_r+0x24>
 8004366:	4613      	mov	r3, r2
 8004368:	685a      	ldr	r2, [r3, #4]
 800436a:	b10a      	cbz	r2, 8004370 <_free_r+0x54>
 800436c:	42a2      	cmp	r2, r4
 800436e:	d9fa      	bls.n	8004366 <_free_r+0x4a>
 8004370:	6819      	ldr	r1, [r3, #0]
 8004372:	1858      	adds	r0, r3, r1
 8004374:	42a0      	cmp	r0, r4
 8004376:	d10b      	bne.n	8004390 <_free_r+0x74>
 8004378:	6820      	ldr	r0, [r4, #0]
 800437a:	4401      	add	r1, r0
 800437c:	1858      	adds	r0, r3, r1
 800437e:	4282      	cmp	r2, r0
 8004380:	6019      	str	r1, [r3, #0]
 8004382:	d1dd      	bne.n	8004340 <_free_r+0x24>
 8004384:	6810      	ldr	r0, [r2, #0]
 8004386:	6852      	ldr	r2, [r2, #4]
 8004388:	605a      	str	r2, [r3, #4]
 800438a:	4401      	add	r1, r0
 800438c:	6019      	str	r1, [r3, #0]
 800438e:	e7d7      	b.n	8004340 <_free_r+0x24>
 8004390:	d902      	bls.n	8004398 <_free_r+0x7c>
 8004392:	230c      	movs	r3, #12
 8004394:	602b      	str	r3, [r5, #0]
 8004396:	e7d3      	b.n	8004340 <_free_r+0x24>
 8004398:	6820      	ldr	r0, [r4, #0]
 800439a:	1821      	adds	r1, r4, r0
 800439c:	428a      	cmp	r2, r1
 800439e:	bf04      	itt	eq
 80043a0:	6811      	ldreq	r1, [r2, #0]
 80043a2:	6852      	ldreq	r2, [r2, #4]
 80043a4:	6062      	str	r2, [r4, #4]
 80043a6:	bf04      	itt	eq
 80043a8:	1809      	addeq	r1, r1, r0
 80043aa:	6021      	streq	r1, [r4, #0]
 80043ac:	605c      	str	r4, [r3, #4]
 80043ae:	e7c7      	b.n	8004340 <_free_r+0x24>
 80043b0:	bd38      	pop	{r3, r4, r5, pc}
 80043b2:	bf00      	nop
 80043b4:	20024030 	.word	0x20024030

080043b8 <_read_r>:
 80043b8:	b538      	push	{r3, r4, r5, lr}
 80043ba:	4c07      	ldr	r4, [pc, #28]	; (80043d8 <_read_r+0x20>)
 80043bc:	4605      	mov	r5, r0
 80043be:	4608      	mov	r0, r1
 80043c0:	4611      	mov	r1, r2
 80043c2:	2200      	movs	r2, #0
 80043c4:	6022      	str	r2, [r4, #0]
 80043c6:	461a      	mov	r2, r3
 80043c8:	f7ff f886 	bl	80034d8 <_read>
 80043cc:	1c43      	adds	r3, r0, #1
 80043ce:	d102      	bne.n	80043d6 <_read_r+0x1e>
 80043d0:	6823      	ldr	r3, [r4, #0]
 80043d2:	b103      	cbz	r3, 80043d6 <_read_r+0x1e>
 80043d4:	602b      	str	r3, [r5, #0]
 80043d6:	bd38      	pop	{r3, r4, r5, pc}
 80043d8:	2002450c 	.word	0x2002450c

080043dc <_fstat_r>:
 80043dc:	b538      	push	{r3, r4, r5, lr}
 80043de:	4c07      	ldr	r4, [pc, #28]	; (80043fc <_fstat_r+0x20>)
 80043e0:	2300      	movs	r3, #0
 80043e2:	4605      	mov	r5, r0
 80043e4:	4608      	mov	r0, r1
 80043e6:	4611      	mov	r1, r2
 80043e8:	6023      	str	r3, [r4, #0]
 80043ea:	f7ff f8ae 	bl	800354a <_fstat>
 80043ee:	1c43      	adds	r3, r0, #1
 80043f0:	d102      	bne.n	80043f8 <_fstat_r+0x1c>
 80043f2:	6823      	ldr	r3, [r4, #0]
 80043f4:	b103      	cbz	r3, 80043f8 <_fstat_r+0x1c>
 80043f6:	602b      	str	r3, [r5, #0]
 80043f8:	bd38      	pop	{r3, r4, r5, pc}
 80043fa:	bf00      	nop
 80043fc:	2002450c 	.word	0x2002450c

08004400 <_isatty_r>:
 8004400:	b538      	push	{r3, r4, r5, lr}
 8004402:	4c06      	ldr	r4, [pc, #24]	; (800441c <_isatty_r+0x1c>)
 8004404:	2300      	movs	r3, #0
 8004406:	4605      	mov	r5, r0
 8004408:	4608      	mov	r0, r1
 800440a:	6023      	str	r3, [r4, #0]
 800440c:	f7ff f8a2 	bl	8003554 <_isatty>
 8004410:	1c43      	adds	r3, r0, #1
 8004412:	d102      	bne.n	800441a <_isatty_r+0x1a>
 8004414:	6823      	ldr	r3, [r4, #0]
 8004416:	b103      	cbz	r3, 800441a <_isatty_r+0x1a>
 8004418:	602b      	str	r3, [r5, #0]
 800441a:	bd38      	pop	{r3, r4, r5, pc}
 800441c:	2002450c 	.word	0x2002450c

08004420 <_init>:
 8004420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004422:	bf00      	nop
 8004424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004426:	bc08      	pop	{r3}
 8004428:	469e      	mov	lr, r3
 800442a:	4770      	bx	lr

0800442c <_fini>:
 800442c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800442e:	bf00      	nop
 8004430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004432:	bc08      	pop	{r3}
 8004434:	469e      	mov	lr, r3
 8004436:	4770      	bx	lr
