
First_project_h.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006684  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000560  08006924  08006924  00016924  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006e84  08006e84  00016e84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006e8c  08006e8c  00016e8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006e90  08006e90  00016e90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000009c  20000000  08006e94  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .sram_d1      00000000  24000000  24000000  0002009c  2**0
                  CONTENTS
  8 .sram_d2      00000000  30000000  30000000  0002009c  2**0
                  CONTENTS
  9 .sram_d3      00000000  38000000  38000000  0002009c  2**0
                  CONTENTS
 10 .bss          00000734  2000009c  2000009c  0002009c  2**2
                  ALLOC
 11 ._user_heap_stack 00000800  200007d0  200007d0  0002009c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000240cc  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00003c0b  00000000  00000000  00044198  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000098f3  00000000  00000000  00047da3  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00000f30  00000000  00000000  00051698  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001190  00000000  00000000  000525c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00008b55  00000000  00000000  00053758  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00006ee3  00000000  00000000  0005c2ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007c  00000000  00000000  00063190  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000335c  00000000  00000000  0006320c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2000009c 	.word	0x2000009c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800690c 	.word	0x0800690c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	200000a0 	.word	0x200000a0
 80002dc:	0800690c 	.word	0x0800690c

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b97a 	b.w	800069c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	468c      	mov	ip, r1
 80003c6:	460d      	mov	r5, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	9e08      	ldr	r6, [sp, #32]
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d151      	bne.n	8000474 <__udivmoddi4+0xb4>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d96d      	bls.n	80004b2 <__udivmoddi4+0xf2>
 80003d6:	fab2 fe82 	clz	lr, r2
 80003da:	f1be 0f00 	cmp.w	lr, #0
 80003de:	d00b      	beq.n	80003f8 <__udivmoddi4+0x38>
 80003e0:	f1ce 0c20 	rsb	ip, lr, #32
 80003e4:	fa01 f50e 	lsl.w	r5, r1, lr
 80003e8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003ec:	fa02 f70e 	lsl.w	r7, r2, lr
 80003f0:	ea4c 0c05 	orr.w	ip, ip, r5
 80003f4:	fa00 f40e 	lsl.w	r4, r0, lr
 80003f8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80003fc:	0c25      	lsrs	r5, r4, #16
 80003fe:	fbbc f8fa 	udiv	r8, ip, sl
 8000402:	fa1f f987 	uxth.w	r9, r7
 8000406:	fb0a cc18 	mls	ip, sl, r8, ip
 800040a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800040e:	fb08 f309 	mul.w	r3, r8, r9
 8000412:	42ab      	cmp	r3, r5
 8000414:	d90a      	bls.n	800042c <__udivmoddi4+0x6c>
 8000416:	19ed      	adds	r5, r5, r7
 8000418:	f108 32ff 	add.w	r2, r8, #4294967295
 800041c:	f080 8123 	bcs.w	8000666 <__udivmoddi4+0x2a6>
 8000420:	42ab      	cmp	r3, r5
 8000422:	f240 8120 	bls.w	8000666 <__udivmoddi4+0x2a6>
 8000426:	f1a8 0802 	sub.w	r8, r8, #2
 800042a:	443d      	add	r5, r7
 800042c:	1aed      	subs	r5, r5, r3
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb5 f0fa 	udiv	r0, r5, sl
 8000434:	fb0a 5510 	mls	r5, sl, r0, r5
 8000438:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800043c:	fb00 f909 	mul.w	r9, r0, r9
 8000440:	45a1      	cmp	r9, r4
 8000442:	d909      	bls.n	8000458 <__udivmoddi4+0x98>
 8000444:	19e4      	adds	r4, r4, r7
 8000446:	f100 33ff 	add.w	r3, r0, #4294967295
 800044a:	f080 810a 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800044e:	45a1      	cmp	r9, r4
 8000450:	f240 8107 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000454:	3802      	subs	r0, #2
 8000456:	443c      	add	r4, r7
 8000458:	eba4 0409 	sub.w	r4, r4, r9
 800045c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000460:	2100      	movs	r1, #0
 8000462:	2e00      	cmp	r6, #0
 8000464:	d061      	beq.n	800052a <__udivmoddi4+0x16a>
 8000466:	fa24 f40e 	lsr.w	r4, r4, lr
 800046a:	2300      	movs	r3, #0
 800046c:	6034      	str	r4, [r6, #0]
 800046e:	6073      	str	r3, [r6, #4]
 8000470:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000474:	428b      	cmp	r3, r1
 8000476:	d907      	bls.n	8000488 <__udivmoddi4+0xc8>
 8000478:	2e00      	cmp	r6, #0
 800047a:	d054      	beq.n	8000526 <__udivmoddi4+0x166>
 800047c:	2100      	movs	r1, #0
 800047e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000482:	4608      	mov	r0, r1
 8000484:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000488:	fab3 f183 	clz	r1, r3
 800048c:	2900      	cmp	r1, #0
 800048e:	f040 808e 	bne.w	80005ae <__udivmoddi4+0x1ee>
 8000492:	42ab      	cmp	r3, r5
 8000494:	d302      	bcc.n	800049c <__udivmoddi4+0xdc>
 8000496:	4282      	cmp	r2, r0
 8000498:	f200 80fa 	bhi.w	8000690 <__udivmoddi4+0x2d0>
 800049c:	1a84      	subs	r4, r0, r2
 800049e:	eb65 0503 	sbc.w	r5, r5, r3
 80004a2:	2001      	movs	r0, #1
 80004a4:	46ac      	mov	ip, r5
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	d03f      	beq.n	800052a <__udivmoddi4+0x16a>
 80004aa:	e886 1010 	stmia.w	r6, {r4, ip}
 80004ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b2:	b912      	cbnz	r2, 80004ba <__udivmoddi4+0xfa>
 80004b4:	2701      	movs	r7, #1
 80004b6:	fbb7 f7f2 	udiv	r7, r7, r2
 80004ba:	fab7 fe87 	clz	lr, r7
 80004be:	f1be 0f00 	cmp.w	lr, #0
 80004c2:	d134      	bne.n	800052e <__udivmoddi4+0x16e>
 80004c4:	1beb      	subs	r3, r5, r7
 80004c6:	0c3a      	lsrs	r2, r7, #16
 80004c8:	fa1f fc87 	uxth.w	ip, r7
 80004cc:	2101      	movs	r1, #1
 80004ce:	fbb3 f8f2 	udiv	r8, r3, r2
 80004d2:	0c25      	lsrs	r5, r4, #16
 80004d4:	fb02 3318 	mls	r3, r2, r8, r3
 80004d8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004dc:	fb0c f308 	mul.w	r3, ip, r8
 80004e0:	42ab      	cmp	r3, r5
 80004e2:	d907      	bls.n	80004f4 <__udivmoddi4+0x134>
 80004e4:	19ed      	adds	r5, r5, r7
 80004e6:	f108 30ff 	add.w	r0, r8, #4294967295
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0x132>
 80004ec:	42ab      	cmp	r3, r5
 80004ee:	f200 80d1 	bhi.w	8000694 <__udivmoddi4+0x2d4>
 80004f2:	4680      	mov	r8, r0
 80004f4:	1aed      	subs	r5, r5, r3
 80004f6:	b2a3      	uxth	r3, r4
 80004f8:	fbb5 f0f2 	udiv	r0, r5, r2
 80004fc:	fb02 5510 	mls	r5, r2, r0, r5
 8000500:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000504:	fb0c fc00 	mul.w	ip, ip, r0
 8000508:	45a4      	cmp	ip, r4
 800050a:	d907      	bls.n	800051c <__udivmoddi4+0x15c>
 800050c:	19e4      	adds	r4, r4, r7
 800050e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000512:	d202      	bcs.n	800051a <__udivmoddi4+0x15a>
 8000514:	45a4      	cmp	ip, r4
 8000516:	f200 80b8 	bhi.w	800068a <__udivmoddi4+0x2ca>
 800051a:	4618      	mov	r0, r3
 800051c:	eba4 040c 	sub.w	r4, r4, ip
 8000520:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000524:	e79d      	b.n	8000462 <__udivmoddi4+0xa2>
 8000526:	4631      	mov	r1, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052e:	f1ce 0420 	rsb	r4, lr, #32
 8000532:	fa05 f30e 	lsl.w	r3, r5, lr
 8000536:	fa07 f70e 	lsl.w	r7, r7, lr
 800053a:	fa20 f804 	lsr.w	r8, r0, r4
 800053e:	0c3a      	lsrs	r2, r7, #16
 8000540:	fa25 f404 	lsr.w	r4, r5, r4
 8000544:	ea48 0803 	orr.w	r8, r8, r3
 8000548:	fbb4 f1f2 	udiv	r1, r4, r2
 800054c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000550:	fb02 4411 	mls	r4, r2, r1, r4
 8000554:	fa1f fc87 	uxth.w	ip, r7
 8000558:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800055c:	fb01 f30c 	mul.w	r3, r1, ip
 8000560:	42ab      	cmp	r3, r5
 8000562:	fa00 f40e 	lsl.w	r4, r0, lr
 8000566:	d909      	bls.n	800057c <__udivmoddi4+0x1bc>
 8000568:	19ed      	adds	r5, r5, r7
 800056a:	f101 30ff 	add.w	r0, r1, #4294967295
 800056e:	f080 808a 	bcs.w	8000686 <__udivmoddi4+0x2c6>
 8000572:	42ab      	cmp	r3, r5
 8000574:	f240 8087 	bls.w	8000686 <__udivmoddi4+0x2c6>
 8000578:	3902      	subs	r1, #2
 800057a:	443d      	add	r5, r7
 800057c:	1aeb      	subs	r3, r5, r3
 800057e:	fa1f f588 	uxth.w	r5, r8
 8000582:	fbb3 f0f2 	udiv	r0, r3, r2
 8000586:	fb02 3310 	mls	r3, r2, r0, r3
 800058a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800058e:	fb00 f30c 	mul.w	r3, r0, ip
 8000592:	42ab      	cmp	r3, r5
 8000594:	d907      	bls.n	80005a6 <__udivmoddi4+0x1e6>
 8000596:	19ed      	adds	r5, r5, r7
 8000598:	f100 38ff 	add.w	r8, r0, #4294967295
 800059c:	d26f      	bcs.n	800067e <__udivmoddi4+0x2be>
 800059e:	42ab      	cmp	r3, r5
 80005a0:	d96d      	bls.n	800067e <__udivmoddi4+0x2be>
 80005a2:	3802      	subs	r0, #2
 80005a4:	443d      	add	r5, r7
 80005a6:	1aeb      	subs	r3, r5, r3
 80005a8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80005ac:	e78f      	b.n	80004ce <__udivmoddi4+0x10e>
 80005ae:	f1c1 0720 	rsb	r7, r1, #32
 80005b2:	fa22 f807 	lsr.w	r8, r2, r7
 80005b6:	408b      	lsls	r3, r1
 80005b8:	fa05 f401 	lsl.w	r4, r5, r1
 80005bc:	ea48 0303 	orr.w	r3, r8, r3
 80005c0:	fa20 fe07 	lsr.w	lr, r0, r7
 80005c4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80005c8:	40fd      	lsrs	r5, r7
 80005ca:	ea4e 0e04 	orr.w	lr, lr, r4
 80005ce:	fbb5 f9fc 	udiv	r9, r5, ip
 80005d2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80005d6:	fb0c 5519 	mls	r5, ip, r9, r5
 80005da:	fa1f f883 	uxth.w	r8, r3
 80005de:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80005e2:	fb09 f408 	mul.w	r4, r9, r8
 80005e6:	42ac      	cmp	r4, r5
 80005e8:	fa02 f201 	lsl.w	r2, r2, r1
 80005ec:	fa00 fa01 	lsl.w	sl, r0, r1
 80005f0:	d908      	bls.n	8000604 <__udivmoddi4+0x244>
 80005f2:	18ed      	adds	r5, r5, r3
 80005f4:	f109 30ff 	add.w	r0, r9, #4294967295
 80005f8:	d243      	bcs.n	8000682 <__udivmoddi4+0x2c2>
 80005fa:	42ac      	cmp	r4, r5
 80005fc:	d941      	bls.n	8000682 <__udivmoddi4+0x2c2>
 80005fe:	f1a9 0902 	sub.w	r9, r9, #2
 8000602:	441d      	add	r5, r3
 8000604:	1b2d      	subs	r5, r5, r4
 8000606:	fa1f fe8e 	uxth.w	lr, lr
 800060a:	fbb5 f0fc 	udiv	r0, r5, ip
 800060e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000612:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000616:	fb00 f808 	mul.w	r8, r0, r8
 800061a:	45a0      	cmp	r8, r4
 800061c:	d907      	bls.n	800062e <__udivmoddi4+0x26e>
 800061e:	18e4      	adds	r4, r4, r3
 8000620:	f100 35ff 	add.w	r5, r0, #4294967295
 8000624:	d229      	bcs.n	800067a <__udivmoddi4+0x2ba>
 8000626:	45a0      	cmp	r8, r4
 8000628:	d927      	bls.n	800067a <__udivmoddi4+0x2ba>
 800062a:	3802      	subs	r0, #2
 800062c:	441c      	add	r4, r3
 800062e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000632:	eba4 0408 	sub.w	r4, r4, r8
 8000636:	fba0 8902 	umull	r8, r9, r0, r2
 800063a:	454c      	cmp	r4, r9
 800063c:	46c6      	mov	lr, r8
 800063e:	464d      	mov	r5, r9
 8000640:	d315      	bcc.n	800066e <__udivmoddi4+0x2ae>
 8000642:	d012      	beq.n	800066a <__udivmoddi4+0x2aa>
 8000644:	b156      	cbz	r6, 800065c <__udivmoddi4+0x29c>
 8000646:	ebba 030e 	subs.w	r3, sl, lr
 800064a:	eb64 0405 	sbc.w	r4, r4, r5
 800064e:	fa04 f707 	lsl.w	r7, r4, r7
 8000652:	40cb      	lsrs	r3, r1
 8000654:	431f      	orrs	r7, r3
 8000656:	40cc      	lsrs	r4, r1
 8000658:	6037      	str	r7, [r6, #0]
 800065a:	6074      	str	r4, [r6, #4]
 800065c:	2100      	movs	r1, #0
 800065e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000662:	4618      	mov	r0, r3
 8000664:	e6f8      	b.n	8000458 <__udivmoddi4+0x98>
 8000666:	4690      	mov	r8, r2
 8000668:	e6e0      	b.n	800042c <__udivmoddi4+0x6c>
 800066a:	45c2      	cmp	sl, r8
 800066c:	d2ea      	bcs.n	8000644 <__udivmoddi4+0x284>
 800066e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000672:	eb69 0503 	sbc.w	r5, r9, r3
 8000676:	3801      	subs	r0, #1
 8000678:	e7e4      	b.n	8000644 <__udivmoddi4+0x284>
 800067a:	4628      	mov	r0, r5
 800067c:	e7d7      	b.n	800062e <__udivmoddi4+0x26e>
 800067e:	4640      	mov	r0, r8
 8000680:	e791      	b.n	80005a6 <__udivmoddi4+0x1e6>
 8000682:	4681      	mov	r9, r0
 8000684:	e7be      	b.n	8000604 <__udivmoddi4+0x244>
 8000686:	4601      	mov	r1, r0
 8000688:	e778      	b.n	800057c <__udivmoddi4+0x1bc>
 800068a:	3802      	subs	r0, #2
 800068c:	443c      	add	r4, r7
 800068e:	e745      	b.n	800051c <__udivmoddi4+0x15c>
 8000690:	4608      	mov	r0, r1
 8000692:	e708      	b.n	80004a6 <__udivmoddi4+0xe6>
 8000694:	f1a8 0802 	sub.w	r8, r8, #2
 8000698:	443d      	add	r5, r7
 800069a:	e72b      	b.n	80004f4 <__udivmoddi4+0x134>

0800069c <__aeabi_idiv0>:
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop

080006a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006a0:	b538      	push	{r3, r4, r5, lr}
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80006a2:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <HAL_InitTick+0x40>)
{
 80006a4:	4605      	mov	r5, r0
  if((uint32_t)uwTickFreq == 0UL)
 80006a6:	7818      	ldrb	r0, [r3, #0]
 80006a8:	b908      	cbnz	r0, 80006ae <HAL_InitTick+0xe>
  {
    return HAL_ERROR;
 80006aa:	2001      	movs	r0, #1
 80006ac:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
    }
  }
#else
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80006ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006b2:	4a0c      	ldr	r2, [pc, #48]	; (80006e4 <HAL_InitTick+0x44>)
 80006b4:	fbb3 f3f0 	udiv	r3, r3, r0
 80006b8:	6810      	ldr	r0, [r2, #0]
 80006ba:	fbb0 f0f3 	udiv	r0, r0, r3
 80006be:	f000 f8c5 	bl	800084c <HAL_SYSTICK_Config>
 80006c2:	4604      	mov	r4, r0
 80006c4:	2800      	cmp	r0, #0
 80006c6:	d1f0      	bne.n	80006aa <HAL_InitTick+0xa>
    return HAL_ERROR;
  }
#endif

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006c8:	2d0f      	cmp	r5, #15
 80006ca:	d8ee      	bhi.n	80006aa <HAL_InitTick+0xa>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006cc:	4602      	mov	r2, r0
 80006ce:	4629      	mov	r1, r5
 80006d0:	f04f 30ff 	mov.w	r0, #4294967295
 80006d4:	f000 f874 	bl	80007c0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006d8:	4b03      	ldr	r3, [pc, #12]	; (80006e8 <HAL_InitTick+0x48>)
 80006da:	4620      	mov	r0, r4
 80006dc:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80006de:	bd38      	pop	{r3, r4, r5, pc}
 80006e0:	20000000 	.word	0x20000000
 80006e4:	20000030 	.word	0x20000030
 80006e8:	20000004 	.word	0x20000004

080006ec <HAL_Init>:
{
 80006ec:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006ee:	2003      	movs	r0, #3
 80006f0:	f000 f854 	bl	800079c <HAL_NVIC_SetPriorityGrouping>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80006f4:	f000 fcda 	bl	80010ac <HAL_RCC_GetSysClockFreq>
 80006f8:	490f      	ldr	r1, [pc, #60]	; (8000738 <HAL_Init+0x4c>)
 80006fa:	4a10      	ldr	r2, [pc, #64]	; (800073c <HAL_Init+0x50>)
 80006fc:	698b      	ldr	r3, [r1, #24]
 80006fe:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8000702:	5cd3      	ldrb	r3, [r2, r3]
 8000704:	f003 031f 	and.w	r3, r3, #31
 8000708:	40d8      	lsrs	r0, r3
 800070a:	4b0d      	ldr	r3, [pc, #52]	; (8000740 <HAL_Init+0x54>)
 800070c:	6018      	str	r0, [r3, #0]
  SystemD2Clock = (SystemCoreClock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800070e:	698b      	ldr	r3, [r1, #24]
 8000710:	f003 030f 	and.w	r3, r3, #15
 8000714:	5cd3      	ldrb	r3, [r2, r3]
 8000716:	f003 031f 	and.w	r3, r3, #31
 800071a:	40d8      	lsrs	r0, r3
 800071c:	4b09      	ldr	r3, [pc, #36]	; (8000744 <HAL_Init+0x58>)
 800071e:	6018      	str	r0, [r3, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000720:	2000      	movs	r0, #0
 8000722:	f7ff ffbd 	bl	80006a0 <HAL_InitTick>
 8000726:	4604      	mov	r4, r0
 8000728:	b918      	cbnz	r0, 8000732 <HAL_Init+0x46>
  HAL_MspInit();
 800072a:	f004 fdd1 	bl	80052d0 <HAL_MspInit>
}
 800072e:	4620      	mov	r0, r4
 8000730:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000732:	2401      	movs	r4, #1
 8000734:	e7fb      	b.n	800072e <HAL_Init+0x42>
 8000736:	bf00      	nop
 8000738:	58024400 	.word	0x58024400
 800073c:	08006dda 	.word	0x08006dda
 8000740:	20000030 	.word	0x20000030
 8000744:	20000034 	.word	0x20000034

08000748 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8000748:	4a03      	ldr	r2, [pc, #12]	; (8000758 <HAL_IncTick+0x10>)
 800074a:	4b04      	ldr	r3, [pc, #16]	; (800075c <HAL_IncTick+0x14>)
 800074c:	6811      	ldr	r1, [r2, #0]
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	440b      	add	r3, r1
 8000752:	6013      	str	r3, [r2, #0]
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop
 8000758:	200001e8 	.word	0x200001e8
 800075c:	20000000 	.word	0x20000000

08000760 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000760:	4b01      	ldr	r3, [pc, #4]	; (8000768 <HAL_GetTick+0x8>)
 8000762:	6818      	ldr	r0, [r3, #0]
}
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop
 8000768:	200001e8 	.word	0x200001e8

0800076c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800076c:	b538      	push	{r3, r4, r5, lr}
 800076e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000770:	f7ff fff6 	bl	8000760 <HAL_GetTick>
 8000774:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000776:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000778:	bf1e      	ittt	ne
 800077a:	4b04      	ldrne	r3, [pc, #16]	; (800078c <HAL_Delay+0x20>)
 800077c:	781b      	ldrbne	r3, [r3, #0]
 800077e:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000780:	f7ff ffee 	bl	8000760 <HAL_GetTick>
 8000784:	1b40      	subs	r0, r0, r5
 8000786:	4284      	cmp	r4, r0
 8000788:	d8fa      	bhi.n	8000780 <HAL_Delay+0x14>
  {
  }
}
 800078a:	bd38      	pop	{r3, r4, r5, pc}
 800078c:	20000000 	.word	0x20000000

08000790 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8000790:	4b01      	ldr	r3, [pc, #4]	; (8000798 <HAL_GetREVID+0x8>)
 8000792:	6818      	ldr	r0, [r3, #0]
}
 8000794:	0c00      	lsrs	r0, r0, #16
 8000796:	4770      	bx	lr
 8000798:	5c001000 	.word	0x5c001000

0800079c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800079c:	4a07      	ldr	r2, [pc, #28]	; (80007bc <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800079e:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007a0:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007a2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007a6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80007aa:	041b      	lsls	r3, r3, #16
 80007ac:	0c1b      	lsrs	r3, r3, #16
 80007ae:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80007b6:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80007b8:	60d3      	str	r3, [r2, #12]
 80007ba:	4770      	bx	lr
 80007bc:	e000ed00 	.word	0xe000ed00

080007c0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007c0:	4b19      	ldr	r3, [pc, #100]	; (8000828 <HAL_NVIC_SetPriority+0x68>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007c2:	b530      	push	{r4, r5, lr}
 80007c4:	68dc      	ldr	r4, [r3, #12]
 80007c6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007ca:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007ce:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007d0:	2b04      	cmp	r3, #4
 80007d2:	bf28      	it	cs
 80007d4:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007d6:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007d8:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007dc:	bf8c      	ite	hi
 80007de:	3c03      	subhi	r4, #3
 80007e0:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007e2:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
 80007e6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007e8:	f103 33ff 	add.w	r3, r3, #4294967295
 80007ec:	ea01 0103 	and.w	r1, r1, r3
 80007f0:	fa01 f104 	lsl.w	r1, r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007f4:	fa05 f404 	lsl.w	r4, r5, r4
 80007f8:	f104 34ff 	add.w	r4, r4, #4294967295
 80007fc:	ea02 0204 	and.w	r2, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000800:	ea42 0201 	orr.w	r2, r2, r1
 8000804:	ea4f 1202 	mov.w	r2, r2, lsl #4
  if ((int32_t)(IRQn) >= 0)
 8000808:	db07      	blt.n	800081a <HAL_NVIC_SetPriority+0x5a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800080a:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800080e:	b2d2      	uxtb	r2, r2
 8000810:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000814:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
 8000818:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800081a:	f000 000f 	and.w	r0, r0, #15
 800081e:	b2d2      	uxtb	r2, r2
 8000820:	4b02      	ldr	r3, [pc, #8]	; (800082c <HAL_NVIC_SetPriority+0x6c>)
 8000822:	541a      	strb	r2, [r3, r0]
 8000824:	bd30      	pop	{r4, r5, pc}
 8000826:	bf00      	nop
 8000828:	e000ed00 	.word	0xe000ed00
 800082c:	e000ed14 	.word	0xe000ed14

08000830 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000830:	2800      	cmp	r0, #0
 8000832:	db08      	blt.n	8000846 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000834:	0942      	lsrs	r2, r0, #5
 8000836:	2301      	movs	r3, #1
 8000838:	f000 001f 	and.w	r0, r0, #31
 800083c:	fa03 f000 	lsl.w	r0, r3, r0
 8000840:	4b01      	ldr	r3, [pc, #4]	; (8000848 <HAL_NVIC_EnableIRQ+0x18>)
 8000842:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000846:	4770      	bx	lr
 8000848:	e000e100 	.word	0xe000e100

0800084c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800084c:	3801      	subs	r0, #1
 800084e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000852:	d20a      	bcs.n	800086a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000854:	4b06      	ldr	r3, [pc, #24]	; (8000870 <HAL_SYSTICK_Config+0x24>)
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000856:	21f0      	movs	r1, #240	; 0xf0
 8000858:	4a06      	ldr	r2, [pc, #24]	; (8000874 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800085a:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800085c:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800085e:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000862:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000864:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000866:	601a      	str	r2, [r3, #0]
 8000868:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800086a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	e000e010 	.word	0xe000e010
 8000874:	e000ed00 	.word	0xe000ed00

08000878 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800087c:	680b      	ldr	r3, [r1, #0]
{
 800087e:	b085      	sub	sp, #20
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000880:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8000a44 <HAL_GPIO_Init+0x1cc>
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000884:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000888:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00U;
 800088a:	2300      	movs	r3, #0
        temp = EXTI_CurrentCPU->IMR1;
 800088c:	f8df c1b8 	ldr.w	ip, [pc, #440]	; 8000a48 <HAL_GPIO_Init+0x1d0>
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000890:	9a01      	ldr	r2, [sp, #4]
 8000892:	40da      	lsrs	r2, r3
 8000894:	d102      	bne.n	800089c <HAL_GPIO_Init+0x24>
      }
    }

    position++;
  }
}
 8000896:	b005      	add	sp, #20
 8000898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800089c:	2701      	movs	r7, #1
    if (iocurrent != 0x00U)
 800089e:	9a01      	ldr	r2, [sp, #4]
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80008a0:	409f      	lsls	r7, r3
    if (iocurrent != 0x00U)
 80008a2:	ea12 0507 	ands.w	r5, r2, r7
 80008a6:	f000 80b7 	beq.w	8000a18 <HAL_GPIO_Init+0x1a0>
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008aa:	684a      	ldr	r2, [r1, #4]
 80008ac:	f022 0610 	bic.w	r6, r2, #16
 80008b0:	2e02      	cmp	r6, #2
 80008b2:	d116      	bne.n	80008e2 <HAL_GPIO_Init+0x6a>
        temp = GPIOx->AFR[position >> 3U];
 80008b4:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80008b8:	f003 0b07 	and.w	fp, r3, #7
 80008bc:	f04f 0e0f 	mov.w	lr, #15
 80008c0:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 80008c4:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 80008c8:	f8da 4020 	ldr.w	r4, [sl, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80008cc:	fa0e fe0b 	lsl.w	lr, lr, fp
 80008d0:	ea24 0e0e 	bic.w	lr, r4, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80008d4:	690c      	ldr	r4, [r1, #16]
 80008d6:	fa04 f40b 	lsl.w	r4, r4, fp
 80008da:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3U] = temp;
 80008de:	f8ca 4020 	str.w	r4, [sl, #32]
 80008e2:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80008e6:	2403      	movs	r4, #3
      temp = GPIOx->MODER;
 80008e8:	f8d0 b000 	ldr.w	fp, [r0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80008ec:	f002 0e03 	and.w	lr, r2, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80008f0:	fa04 f40a 	lsl.w	r4, r4, sl
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008f4:	3e01      	subs	r6, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80008f6:	fa0e fe0a 	lsl.w	lr, lr, sl
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80008fa:	43e4      	mvns	r4, r4
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008fc:	2e01      	cmp	r6, #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80008fe:	ea0b 0b04 	and.w	fp, fp, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000902:	ea4e 0e0b 	orr.w	lr, lr, fp
      GPIOx->MODER = temp;
 8000906:	f8c0 e000 	str.w	lr, [r0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800090a:	d810      	bhi.n	800092e <HAL_GPIO_Init+0xb6>
        temp = GPIOx->OSPEEDR;
 800090c:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800090e:	ea06 0b04 	and.w	fp, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000912:	68ce      	ldr	r6, [r1, #12]
 8000914:	fa06 fe0a 	lsl.w	lr, r6, sl
 8000918:	ea4e 060b 	orr.w	r6, lr, fp
        GPIOx->OSPEEDR = temp;
 800091c:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 800091e:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000920:	ea26 0707 	bic.w	r7, r6, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000924:	f3c2 1600 	ubfx	r6, r2, #4, #1
 8000928:	409e      	lsls	r6, r3
 800092a:	4337      	orrs	r7, r6
        GPIOx->OTYPER = temp;
 800092c:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 800092e:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000930:	4034      	ands	r4, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000932:	688e      	ldr	r6, [r1, #8]
 8000934:	fa06 f60a 	lsl.w	r6, r6, sl
 8000938:	4334      	orrs	r4, r6
      GPIOx->PUPDR = temp;
 800093a:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800093c:	00d4      	lsls	r4, r2, #3
 800093e:	d56b      	bpl.n	8000a18 <HAL_GPIO_Init+0x1a0>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000940:	f8d8 40f4 	ldr.w	r4, [r8, #244]	; 0xf4
 8000944:	f023 0603 	bic.w	r6, r3, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000948:	f003 0703 	and.w	r7, r3, #3
 800094c:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000950:	f044 0402 	orr.w	r4, r4, #2
 8000954:	f106 46b0 	add.w	r6, r6, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000958:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800095a:	f8c8 40f4 	str.w	r4, [r8, #244]	; 0xf4
 800095e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000962:	f8d8 40f4 	ldr.w	r4, [r8, #244]	; 0xf4
 8000966:	f004 0402 	and.w	r4, r4, #2
 800096a:	9403      	str	r4, [sp, #12]
 800096c:	9c03      	ldr	r4, [sp, #12]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800096e:	fa0e f407 	lsl.w	r4, lr, r7
        temp = SYSCFG->EXTICR[position >> 2U];
 8000972:	f8d6 a008 	ldr.w	sl, [r6, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000976:	ea2a 0e04 	bic.w	lr, sl, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800097a:	4c31      	ldr	r4, [pc, #196]	; (8000a40 <HAL_GPIO_Init+0x1c8>)
 800097c:	42a0      	cmp	r0, r4
 800097e:	d04d      	beq.n	8000a1c <HAL_GPIO_Init+0x1a4>
 8000980:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000984:	42a0      	cmp	r0, r4
 8000986:	d04b      	beq.n	8000a20 <HAL_GPIO_Init+0x1a8>
 8000988:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800098c:	42a0      	cmp	r0, r4
 800098e:	d049      	beq.n	8000a24 <HAL_GPIO_Init+0x1ac>
 8000990:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000994:	42a0      	cmp	r0, r4
 8000996:	d047      	beq.n	8000a28 <HAL_GPIO_Init+0x1b0>
 8000998:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800099c:	42a0      	cmp	r0, r4
 800099e:	d045      	beq.n	8000a2c <HAL_GPIO_Init+0x1b4>
 80009a0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80009a4:	42a0      	cmp	r0, r4
 80009a6:	d043      	beq.n	8000a30 <HAL_GPIO_Init+0x1b8>
 80009a8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80009ac:	42a0      	cmp	r0, r4
 80009ae:	d041      	beq.n	8000a34 <HAL_GPIO_Init+0x1bc>
 80009b0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80009b4:	42a0      	cmp	r0, r4
 80009b6:	d03f      	beq.n	8000a38 <HAL_GPIO_Init+0x1c0>
 80009b8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80009bc:	42a0      	cmp	r0, r4
 80009be:	d03d      	beq.n	8000a3c <HAL_GPIO_Init+0x1c4>
 80009c0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80009c4:	42a0      	cmp	r0, r4
 80009c6:	bf14      	ite	ne
 80009c8:	240a      	movne	r4, #10
 80009ca:	2409      	moveq	r4, #9
 80009cc:	40bc      	lsls	r4, r7
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80009ce:	03d7      	lsls	r7, r2, #15
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80009d0:	ea44 040e 	orr.w	r4, r4, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 80009d4:	60b4      	str	r4, [r6, #8]
        temp &= ~(iocurrent);
 80009d6:	ea6f 0605 	mvn.w	r6, r5
        temp = EXTI_CurrentCPU->IMR1;
 80009da:	f8dc 4000 	ldr.w	r4, [ip]
        temp &= ~(iocurrent);
 80009de:	bf54      	ite	pl
 80009e0:	4034      	andpl	r4, r6
          temp |= iocurrent;
 80009e2:	432c      	orrmi	r4, r5
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80009e4:	0397      	lsls	r7, r2, #14
        EXTI_CurrentCPU->IMR1 = temp;
 80009e6:	f8cc 4000 	str.w	r4, [ip]
        temp = EXTI_CurrentCPU->EMR1;
 80009ea:	f8dc 4004 	ldr.w	r4, [ip, #4]
        temp &= ~(iocurrent);
 80009ee:	bf54      	ite	pl
 80009f0:	4034      	andpl	r4, r6
          temp |= iocurrent;
 80009f2:	432c      	orrmi	r4, r5
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80009f4:	02d7      	lsls	r7, r2, #11
        EXTI->RTSR1 = temp;
 80009f6:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
        EXTI_CurrentCPU->EMR1 = temp;
 80009fa:	f8cc 4004 	str.w	r4, [ip, #4]
        temp = EXTI->RTSR1;
 80009fe:	f8d9 4000 	ldr.w	r4, [r9]
        temp &= ~(iocurrent);
 8000a02:	bf54      	ite	pl
 8000a04:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8000a06:	432c      	orrmi	r4, r5
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a08:	0292      	lsls	r2, r2, #10
        EXTI->RTSR1 = temp;
 8000a0a:	603c      	str	r4, [r7, #0]
        temp = EXTI->FTSR1;
 8000a0c:	687c      	ldr	r4, [r7, #4]
        temp &= ~(iocurrent);
 8000a0e:	bf54      	ite	pl
 8000a10:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8000a12:	432c      	orrmi	r4, r5
        EXTI->FTSR1 = temp;
 8000a14:	f8c9 4004 	str.w	r4, [r9, #4]
    position++;
 8000a18:	3301      	adds	r3, #1
 8000a1a:	e739      	b.n	8000890 <HAL_GPIO_Init+0x18>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000a1c:	2400      	movs	r4, #0
 8000a1e:	e7d5      	b.n	80009cc <HAL_GPIO_Init+0x154>
 8000a20:	2401      	movs	r4, #1
 8000a22:	e7d3      	b.n	80009cc <HAL_GPIO_Init+0x154>
 8000a24:	2402      	movs	r4, #2
 8000a26:	e7d1      	b.n	80009cc <HAL_GPIO_Init+0x154>
 8000a28:	2403      	movs	r4, #3
 8000a2a:	e7cf      	b.n	80009cc <HAL_GPIO_Init+0x154>
 8000a2c:	2404      	movs	r4, #4
 8000a2e:	e7cd      	b.n	80009cc <HAL_GPIO_Init+0x154>
 8000a30:	2405      	movs	r4, #5
 8000a32:	e7cb      	b.n	80009cc <HAL_GPIO_Init+0x154>
 8000a34:	2406      	movs	r4, #6
 8000a36:	e7c9      	b.n	80009cc <HAL_GPIO_Init+0x154>
 8000a38:	2407      	movs	r4, #7
 8000a3a:	e7c7      	b.n	80009cc <HAL_GPIO_Init+0x154>
 8000a3c:	2408      	movs	r4, #8
 8000a3e:	e7c5      	b.n	80009cc <HAL_GPIO_Init+0x154>
 8000a40:	58020000 	.word	0x58020000
 8000a44:	58024400 	.word	0x58024400
 8000a48:	58000080 	.word	0x58000080

08000a4c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000a4c:	b10a      	cbz	r2, 8000a52 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000a4e:	6181      	str	r1, [r0, #24]
 8000a50:	4770      	bx	lr
 8000a52:	0409      	lsls	r1, r1, #16
 8000a54:	e7fb      	b.n	8000a4e <HAL_GPIO_WritePin+0x2>

08000a56 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000a56:	4770      	bx	lr

08000a58 <HAL_GPIO_EXTI_IRQHandler>:
{
 8000a58:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8000a5a:	4b04      	ldr	r3, [pc, #16]	; (8000a6c <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8000a5c:	6899      	ldr	r1, [r3, #8]
 8000a5e:	4201      	tst	r1, r0
 8000a60:	d002      	beq.n	8000a68 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000a62:	6098      	str	r0, [r3, #8]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000a64:	f7ff fff7 	bl	8000a56 <HAL_GPIO_EXTI_Callback>
 8000a68:	bd08      	pop	{r3, pc}
 8000a6a:	bf00      	nop
 8000a6c:	58000080 	.word	0x58000080

08000a70 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000a70:	b5f0      	push	{r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000a72:	4604      	mov	r4, r0
{
 8000a74:	b08b      	sub	sp, #44	; 0x2c
  if (hpcd == NULL)
 8000a76:	b360      	cbz	r0, 8000ad2 <HAL_PCD_Init+0x62>
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000a78:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
  USBx = hpcd->Instance;
 8000a7c:	6805      	ldr	r5, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000a7e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000a82:	b91b      	cbnz	r3, 8000a8c <HAL_PCD_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000a84:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000a88:	f004 fca4 	bl	80053d4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000a8c:	2303      	movs	r3, #3

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000a8e:	466e      	mov	r6, sp
 8000a90:	1d27      	adds	r7, r4, #4
  hpcd->State = HAL_PCD_STATE_BUSY;
 8000a92:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000a96:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  __HAL_PCD_DISABLE(hpcd);
 8000a98:	4625      	mov	r5, r4
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000a9a:	f413 7380 	ands.w	r3, r3, #256	; 0x100
  __HAL_PCD_DISABLE(hpcd);
 8000a9e:	f855 0b10 	ldr.w	r0, [r5], #16
    hpcd->Init.dma_enable = 0U;
 8000aa2:	bf08      	it	eq
 8000aa4:	6123      	streq	r3, [r4, #16]
  __HAL_PCD_DISABLE(hpcd);
 8000aa6:	f003 fb5a 	bl	800415e <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000aaa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000aac:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000aae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ab0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000ab2:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000ab6:	4625      	mov	r5, r4
 8000ab8:	e886 0003 	stmia.w	r6, {r0, r1}
 8000abc:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8000ac0:	f855 0b10 	ldr.w	r0, [r5], #16
 8000ac4:	f003 fb0a 	bl	80040dc <USB_CoreInit>
 8000ac8:	4606      	mov	r6, r0
 8000aca:	b120      	cbz	r0, 8000ad6 <HAL_PCD_Init+0x66>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000acc:	2302      	movs	r3, #2
 8000ace:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
    return HAL_ERROR;
 8000ad2:	2501      	movs	r5, #1
 8000ad4:	e054      	b.n	8000b80 <HAL_PCD_Init+0x110>
    return HAL_ERROR;
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000ad6:	4601      	mov	r1, r0
 8000ad8:	6820      	ldr	r0, [r4, #0]
 8000ada:	f003 fb46 	bl	800416a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ade:	4630      	mov	r0, r6
 8000ae0:	f8d4 e004 	ldr.w	lr, [r4, #4]
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000ae4:	261c      	movs	r6, #28
 8000ae6:	f04f 0c01 	mov.w	ip, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000aea:	4601      	mov	r1, r0
 8000aec:	b2c2      	uxtb	r2, r0
 8000aee:	3001      	adds	r0, #1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000af0:	4596      	cmp	lr, r2
 8000af2:	d81b      	bhi.n	8000b2c <HAL_PCD_Init+0xbc>
 8000af4:	2300      	movs	r3, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000af6:	261c      	movs	r6, #28
 8000af8:	4619      	mov	r1, r3
 8000afa:	b2d8      	uxtb	r0, r3
 8000afc:	3301      	adds	r3, #1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000afe:	4586      	cmp	lr, r0
 8000b00:	d822      	bhi.n	8000b48 <HAL_PCD_Init+0xd8>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000b02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b04:	466e      	mov	r6, sp
 8000b06:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000b08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b0a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000b0c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000b10:	e886 0003 	stmia.w	r6, {r0, r1}
 8000b14:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8000b18:	6820      	ldr	r0, [r4, #0]
 8000b1a:	f003 fb67 	bl	80041ec <USB_DevInit>
 8000b1e:	2301      	movs	r3, #1
 8000b20:	4605      	mov	r5, r0
 8000b22:	b300      	cbz	r0, 8000b66 <HAL_PCD_Init+0xf6>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000b24:	2202      	movs	r2, #2
 8000b26:	f884 23bd 	strb.w	r2, [r4, #957]	; 0x3bd
 8000b2a:	e7d2      	b.n	8000ad2 <HAL_PCD_Init+0x62>
    hpcd->IN_ep[i].is_in = 1U;
 8000b2c:	fb06 4302 	mla	r3, r6, r2, r4
 8000b30:	f883 c03d 	strb.w	ip, [r3, #61]	; 0x3d
    hpcd->IN_ep[i].num = i;
 8000b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000b38:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000b3c:	f883 103f 	strb.w	r1, [r3, #63]	; 0x3f
    hpcd->IN_ep[i].maxpacket = 0U;
 8000b40:	6459      	str	r1, [r3, #68]	; 0x44
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000b42:	6499      	str	r1, [r3, #72]	; 0x48
    hpcd->IN_ep[i].xfer_len = 0U;
 8000b44:	6519      	str	r1, [r3, #80]	; 0x50
 8000b46:	e7d1      	b.n	8000aec <HAL_PCD_Init+0x7c>
    hpcd->OUT_ep[i].is_in = 0U;
 8000b48:	fb06 4200 	mla	r2, r6, r0, r4
 8000b4c:	f882 11fd 	strb.w	r1, [r2, #509]	; 0x1fd
    hpcd->OUT_ep[i].num = i;
 8000b50:	f882 01fc 	strb.w	r0, [r2, #508]	; 0x1fc
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000b54:	f882 11ff 	strb.w	r1, [r2, #511]	; 0x1ff
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000b58:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000b5c:	f8c2 1208 	str.w	r1, [r2, #520]	; 0x208
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000b60:	f8c2 1210 	str.w	r1, [r2, #528]	; 0x210
 8000b64:	e7c9      	b.n	8000afa <HAL_PCD_Init+0x8a>
    return HAL_ERROR;
  }

  hpcd->USB_Address = 0U;
 8000b66:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8000b6a:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8000b6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000b70:	2b01      	cmp	r3, #1
 8000b72:	d102      	bne.n	8000b7a <HAL_PCD_Init+0x10a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000b74:	4620      	mov	r0, r4
 8000b76:	f000 f806 	bl	8000b86 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8000b7a:	6820      	ldr	r0, [r4, #0]
 8000b7c:	f003 fbf6 	bl	800436c <USB_DevDisconnect>

  return HAL_OK;
}
 8000b80:	4628      	mov	r0, r5
 8000b82:	b00b      	add	sp, #44	; 0x2c
 8000b84:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000b86 <HAL_PCDEx_ActivateLPM>:
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;

  hpcd->lpm_active = 1U;
 8000b86:	2101      	movs	r1, #1
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000b88:	6802      	ldr	r2, [r0, #0]
{
 8000b8a:	4603      	mov	r3, r0
  hpcd->lpm_active = 1U;
 8000b8c:	f8c0 13fc 	str.w	r1, [r0, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8000b90:	2000      	movs	r0, #0
 8000b92:	f883 03f4 	strb.w	r0, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8000b96:	6993      	ldr	r3, [r2, #24]
 8000b98:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000b9c:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8000b9e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8000ba0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ba4:	f043 0303 	orr.w	r3, r3, #3
 8000ba8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
}
 8000baa:	4770      	bx	lr

08000bac <HAL_PWREx_ConfigSupply>:
  *            @arg PWR_EXTERNAL_SOURCE_SUPPLY          The LDO regulator is Bypassed.
  *                                                     The Vcore Power Domains are supplied from external source.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8000bac:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  if(!__HAL_PWR_GET_FLAG(PWR_FLAG_SCUEN))
 8000bae:	4b11      	ldr	r3, [pc, #68]	; (8000bf4 <HAL_PWREx_ConfigSupply+0x48>)
 8000bb0:	68da      	ldr	r2, [r3, #12]
 8000bb2:	f012 0f04 	tst.w	r2, #4
 8000bb6:	461a      	mov	r2, r3
 8000bb8:	d104      	bne.n	8000bc4 <HAL_PWREx_ConfigSupply+0x18>
  {
    if((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8000bba:	68db      	ldr	r3, [r3, #12]
 8000bbc:	f003 0307 	and.w	r3, r3, #7
 8000bc0:	4283      	cmp	r3, r0
 8000bc2:	d115      	bne.n	8000bf0 <HAL_PWREx_ConfigSupply+0x44>
      return HAL_ERROR;
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG(PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8000bc4:	68d3      	ldr	r3, [r2, #12]

  /* Get tick */
  tickstart = HAL_GetTick();

  /* Wait till voltage level flag is set */
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 8000bc6:	4c0b      	ldr	r4, [pc, #44]	; (8000bf4 <HAL_PWREx_ConfigSupply+0x48>)
  MODIFY_REG(PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8000bc8:	f023 0307 	bic.w	r3, r3, #7
 8000bcc:	4318      	orrs	r0, r3
 8000bce:	60d0      	str	r0, [r2, #12]
  tickstart = HAL_GetTick();
 8000bd0:	f7ff fdc6 	bl	8000760 <HAL_GetTick>
 8000bd4:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 8000bd6:	6863      	ldr	r3, [r4, #4]
 8000bd8:	049b      	lsls	r3, r3, #18
 8000bda:	d501      	bpl.n	8000be0 <HAL_PWREx_ConfigSupply+0x34>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8000bdc:	2000      	movs	r0, #0
 8000bde:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY_US)
 8000be0:	f7ff fdbe 	bl	8000760 <HAL_GetTick>
 8000be4:	1b40      	subs	r0, r0, r5
 8000be6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000bea:	d9f4      	bls.n	8000bd6 <HAL_PWREx_ConfigSupply+0x2a>
      return HAL_TIMEOUT;
 8000bec:	2003      	movs	r0, #3
}
 8000bee:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8000bf0:	2001      	movs	r0, #1
 8000bf2:	bd38      	pop	{r3, r4, r5, pc}
 8000bf4:	58024800 	.word	0x58024800

08000bf8 <HAL_PWREx_EnableUSBVoltageDetector>:
  * @retval None
  */
void HAL_PWREx_EnableUSBVoltageDetector(void)
{
  /* Enable the USB voltage detector */
  SET_BIT(PWR->CR3, PWR_CR3_USB33DEN);
 8000bf8:	4a02      	ldr	r2, [pc, #8]	; (8000c04 <HAL_PWREx_EnableUSBVoltageDetector+0xc>)
 8000bfa:	68d3      	ldr	r3, [r2, #12]
 8000bfc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000c00:	60d3      	str	r3, [r2, #12]
 8000c02:	4770      	bx	lr
 8000c04:	58024800 	.word	0x58024800

08000c08 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c0a:	4605      	mov	r5, r0
 8000c0c:	b908      	cbnz	r0, 8000c12 <HAL_RCC_OscConfig+0xa>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8000c0e:	2001      	movs	r0, #1
 8000c10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c12:	6803      	ldr	r3, [r0, #0]
 8000c14:	07d9      	lsls	r1, r3, #31
 8000c16:	d45a      	bmi.n	8000cce <HAL_RCC_OscConfig+0xc6>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c18:	682b      	ldr	r3, [r5, #0]
 8000c1a:	079a      	lsls	r2, r3, #30
 8000c1c:	f100 80a7 	bmi.w	8000d6e <HAL_RCC_OscConfig+0x166>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8000c20:	682b      	ldr	r3, [r5, #0]
 8000c22:	06da      	lsls	r2, r3, #27
 8000c24:	d523      	bpl.n	8000c6e <HAL_RCC_OscConfig+0x66>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000c26:	4ba8      	ldr	r3, [pc, #672]	; (8000ec8 <HAL_RCC_OscConfig+0x2c0>)
 8000c28:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000c2a:	6a99      	ldr	r1, [r3, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000c2c:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8000c30:	2a08      	cmp	r2, #8
 8000c32:	d007      	beq.n	8000c44 <HAL_RCC_OscConfig+0x3c>
 8000c34:	2a18      	cmp	r2, #24
 8000c36:	f040 80f9 	bne.w	8000e2c <HAL_RCC_OscConfig+0x224>
 8000c3a:	f001 0203 	and.w	r2, r1, #3
 8000c3e:	2a01      	cmp	r2, #1
 8000c40:	f040 80f4 	bne.w	8000e2c <HAL_RCC_OscConfig+0x224>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	05db      	lsls	r3, r3, #23
 8000c48:	d502      	bpl.n	8000c50 <HAL_RCC_OscConfig+0x48>
 8000c4a:	69eb      	ldr	r3, [r5, #28]
 8000c4c:	2b80      	cmp	r3, #128	; 0x80
 8000c4e:	d1de      	bne.n	8000c0e <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8000c50:	f7ff fd9e 	bl	8000790 <HAL_GetREVID>
 8000c54:	f241 0303 	movw	r3, #4099	; 0x1003
 8000c58:	4a9b      	ldr	r2, [pc, #620]	; (8000ec8 <HAL_RCC_OscConfig+0x2c0>)
 8000c5a:	4298      	cmp	r0, r3
 8000c5c:	6a29      	ldr	r1, [r5, #32]
 8000c5e:	f200 80de 	bhi.w	8000e1e <HAL_RCC_OscConfig+0x216>
 8000c62:	6853      	ldr	r3, [r2, #4]
 8000c64:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8000c68:	ea43 6381 	orr.w	r3, r3, r1, lsl #26
 8000c6c:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000c6e:	682b      	ldr	r3, [r5, #0]
 8000c70:	0719      	lsls	r1, r3, #28
 8000c72:	f100 8114 	bmi.w	8000e9e <HAL_RCC_OscConfig+0x296>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000c76:	682b      	ldr	r3, [r5, #0]
 8000c78:	069a      	lsls	r2, r3, #26
 8000c7a:	f100 813a 	bmi.w	8000ef2 <HAL_RCC_OscConfig+0x2ea>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000c7e:	682b      	ldr	r3, [r5, #0]
 8000c80:	075c      	lsls	r4, r3, #29
 8000c82:	d51e      	bpl.n	8000cc2 <HAL_RCC_OscConfig+0xba>
    PWR->CR1 |= PWR_CR1_DBP;
 8000c84:	4c91      	ldr	r4, [pc, #580]	; (8000ecc <HAL_RCC_OscConfig+0x2c4>)
 8000c86:	6823      	ldr	r3, [r4, #0]
 8000c88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c8c:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8000c8e:	f7ff fd67 	bl	8000760 <HAL_GetTick>
 8000c92:	4606      	mov	r6, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8000c94:	6823      	ldr	r3, [r4, #0]
 8000c96:	05da      	lsls	r2, r3, #23
 8000c98:	f140 8150 	bpl.w	8000f3c <HAL_RCC_OscConfig+0x334>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c9c:	68ab      	ldr	r3, [r5, #8]
 8000c9e:	4c8a      	ldr	r4, [pc, #552]	; (8000ec8 <HAL_RCC_OscConfig+0x2c0>)
 8000ca0:	2b01      	cmp	r3, #1
 8000ca2:	f040 8152 	bne.w	8000f4a <HAL_RCC_OscConfig+0x342>
 8000ca6:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8000ca8:	f043 0301 	orr.w	r3, r3, #1
 8000cac:	6723      	str	r3, [r4, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000cae:	f241 3488 	movw	r4, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000cb2:	f7ff fd55 	bl	8000760 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000cb6:	4e84      	ldr	r6, [pc, #528]	; (8000ec8 <HAL_RCC_OscConfig+0x2c0>)
      tickstart = HAL_GetTick();
 8000cb8:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000cba:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8000cbc:	079b      	lsls	r3, r3, #30
 8000cbe:	f140 816a 	bpl.w	8000f96 <HAL_RCC_OscConfig+0x38e>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000cc2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	f040 816d 	bne.w	8000fa4 <HAL_RCC_OscConfig+0x39c>
    }
  }
  return HAL_OK;
 8000cca:	2000      	movs	r0, #0
 8000ccc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000cce:	4b7e      	ldr	r3, [pc, #504]	; (8000ec8 <HAL_RCC_OscConfig+0x2c0>)
 8000cd0:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000cd2:	6a99      	ldr	r1, [r3, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000cd4:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8000cd8:	2a10      	cmp	r2, #16
 8000cda:	d005      	beq.n	8000ce8 <HAL_RCC_OscConfig+0xe0>
 8000cdc:	2a18      	cmp	r2, #24
 8000cde:	d10a      	bne.n	8000cf6 <HAL_RCC_OscConfig+0xee>
 8000ce0:	f001 0203 	and.w	r2, r1, #3
 8000ce4:	2a02      	cmp	r2, #2
 8000ce6:	d106      	bne.n	8000cf6 <HAL_RCC_OscConfig+0xee>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	039b      	lsls	r3, r3, #14
 8000cec:	d594      	bpl.n	8000c18 <HAL_RCC_OscConfig+0x10>
 8000cee:	686b      	ldr	r3, [r5, #4]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d191      	bne.n	8000c18 <HAL_RCC_OscConfig+0x10>
 8000cf4:	e78b      	b.n	8000c0e <HAL_RCC_OscConfig+0x6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cf6:	686b      	ldr	r3, [r5, #4]
 8000cf8:	4c73      	ldr	r4, [pc, #460]	; (8000ec8 <HAL_RCC_OscConfig+0x2c0>)
 8000cfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cfe:	d111      	bne.n	8000d24 <HAL_RCC_OscConfig+0x11c>
 8000d00:	6823      	ldr	r3, [r4, #0]
 8000d02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d06:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000d08:	f7ff fd2a 	bl	8000760 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000d0c:	4c6e      	ldr	r4, [pc, #440]	; (8000ec8 <HAL_RCC_OscConfig+0x2c0>)
        tickstart = HAL_GetTick();
 8000d0e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000d10:	6823      	ldr	r3, [r4, #0]
 8000d12:	039f      	lsls	r7, r3, #14
 8000d14:	d480      	bmi.n	8000c18 <HAL_RCC_OscConfig+0x10>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d16:	f7ff fd23 	bl	8000760 <HAL_GetTick>
 8000d1a:	1b80      	subs	r0, r0, r6
 8000d1c:	2864      	cmp	r0, #100	; 0x64
 8000d1e:	d9f7      	bls.n	8000d10 <HAL_RCC_OscConfig+0x108>
            return HAL_TIMEOUT;
 8000d20:	2003      	movs	r0, #3
 8000d22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d24:	b9a3      	cbnz	r3, 8000d50 <HAL_RCC_OscConfig+0x148>
 8000d26:	6823      	ldr	r3, [r4, #0]
 8000d28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d2c:	6023      	str	r3, [r4, #0]
 8000d2e:	6823      	ldr	r3, [r4, #0]
 8000d30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d34:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000d36:	f7ff fd13 	bl	8000760 <HAL_GetTick>
 8000d3a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000d3c:	6823      	ldr	r3, [r4, #0]
 8000d3e:	0398      	lsls	r0, r3, #14
 8000d40:	f57f af6a 	bpl.w	8000c18 <HAL_RCC_OscConfig+0x10>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d44:	f7ff fd0c 	bl	8000760 <HAL_GetTick>
 8000d48:	1b80      	subs	r0, r0, r6
 8000d4a:	2864      	cmp	r0, #100	; 0x64
 8000d4c:	d9f6      	bls.n	8000d3c <HAL_RCC_OscConfig+0x134>
 8000d4e:	e7e7      	b.n	8000d20 <HAL_RCC_OscConfig+0x118>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d54:	6823      	ldr	r3, [r4, #0]
 8000d56:	d103      	bne.n	8000d60 <HAL_RCC_OscConfig+0x158>
 8000d58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d5c:	6023      	str	r3, [r4, #0]
 8000d5e:	e7cf      	b.n	8000d00 <HAL_RCC_OscConfig+0xf8>
 8000d60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d64:	6023      	str	r3, [r4, #0]
 8000d66:	6823      	ldr	r3, [r4, #0]
 8000d68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d6c:	e7cb      	b.n	8000d06 <HAL_RCC_OscConfig+0xfe>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000d6e:	4b56      	ldr	r3, [pc, #344]	; (8000ec8 <HAL_RCC_OscConfig+0x2c0>)
 8000d70:	68ea      	ldr	r2, [r5, #12]
 8000d72:	6919      	ldr	r1, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000d74:	6a98      	ldr	r0, [r3, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8000d76:	f011 0138 	ands.w	r1, r1, #56	; 0x38
 8000d7a:	d003      	beq.n	8000d84 <HAL_RCC_OscConfig+0x17c>
 8000d7c:	2918      	cmp	r1, #24
 8000d7e:	d12b      	bne.n	8000dd8 <HAL_RCC_OscConfig+0x1d0>
 8000d80:	0781      	lsls	r1, r0, #30
 8000d82:	d129      	bne.n	8000dd8 <HAL_RCC_OscConfig+0x1d0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	075b      	lsls	r3, r3, #29
 8000d88:	d502      	bpl.n	8000d90 <HAL_RCC_OscConfig+0x188>
 8000d8a:	2a00      	cmp	r2, #0
 8000d8c:	f43f af3f 	beq.w	8000c0e <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8000d90:	4c4d      	ldr	r4, [pc, #308]	; (8000ec8 <HAL_RCC_OscConfig+0x2c0>)
 8000d92:	6823      	ldr	r3, [r4, #0]
 8000d94:	f023 0319 	bic.w	r3, r3, #25
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000d9c:	f7ff fce0 	bl	8000760 <HAL_GetTick>
 8000da0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000da2:	6823      	ldr	r3, [r4, #0]
 8000da4:	075f      	lsls	r7, r3, #29
 8000da6:	d511      	bpl.n	8000dcc <HAL_RCC_OscConfig+0x1c4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000da8:	f7ff fcf2 	bl	8000790 <HAL_GetREVID>
 8000dac:	f241 0303 	movw	r3, #4099	; 0x1003
 8000db0:	692a      	ldr	r2, [r5, #16]
 8000db2:	4298      	cmp	r0, r3
 8000db4:	6863      	ldr	r3, [r4, #4]
 8000db6:	bf95      	itete	ls
 8000db8:	f423 337c 	bicls.w	r3, r3, #258048	; 0x3f000
 8000dbc:	f023 43fe 	bichi.w	r3, r3, #2130706432	; 0x7f000000
 8000dc0:	ea43 3302 	orrls.w	r3, r3, r2, lsl #12
 8000dc4:	ea43 6302 	orrhi.w	r3, r3, r2, lsl #24
 8000dc8:	6063      	str	r3, [r4, #4]
 8000dca:	e729      	b.n	8000c20 <HAL_RCC_OscConfig+0x18>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000dcc:	f7ff fcc8 	bl	8000760 <HAL_GetTick>
 8000dd0:	1b80      	subs	r0, r0, r6
 8000dd2:	2802      	cmp	r0, #2
 8000dd4:	d9e5      	bls.n	8000da2 <HAL_RCC_OscConfig+0x19a>
 8000dd6:	e7a3      	b.n	8000d20 <HAL_RCC_OscConfig+0x118>
 8000dd8:	4c3b      	ldr	r4, [pc, #236]	; (8000ec8 <HAL_RCC_OscConfig+0x2c0>)
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8000dda:	6823      	ldr	r3, [r4, #0]
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000ddc:	b17a      	cbz	r2, 8000dfe <HAL_RCC_OscConfig+0x1f6>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8000dde:	f023 0319 	bic.w	r3, r3, #25
 8000de2:	4313      	orrs	r3, r2
 8000de4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000de6:	f7ff fcbb 	bl	8000760 <HAL_GetTick>
 8000dea:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000dec:	6823      	ldr	r3, [r4, #0]
 8000dee:	0758      	lsls	r0, r3, #29
 8000df0:	d4da      	bmi.n	8000da8 <HAL_RCC_OscConfig+0x1a0>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000df2:	f7ff fcb5 	bl	8000760 <HAL_GetTick>
 8000df6:	1b80      	subs	r0, r0, r6
 8000df8:	2802      	cmp	r0, #2
 8000dfa:	d9f7      	bls.n	8000dec <HAL_RCC_OscConfig+0x1e4>
 8000dfc:	e790      	b.n	8000d20 <HAL_RCC_OscConfig+0x118>
        __HAL_RCC_HSI_DISABLE();
 8000dfe:	f023 0301 	bic.w	r3, r3, #1
 8000e02:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000e04:	f7ff fcac 	bl	8000760 <HAL_GetTick>
 8000e08:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000e0a:	6823      	ldr	r3, [r4, #0]
 8000e0c:	0759      	lsls	r1, r3, #29
 8000e0e:	f57f af07 	bpl.w	8000c20 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e12:	f7ff fca5 	bl	8000760 <HAL_GetTick>
 8000e16:	1b80      	subs	r0, r0, r6
 8000e18:	2802      	cmp	r0, #2
 8000e1a:	d9f6      	bls.n	8000e0a <HAL_RCC_OscConfig+0x202>
 8000e1c:	e780      	b.n	8000d20 <HAL_RCC_OscConfig+0x118>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8000e1e:	68d3      	ldr	r3, [r2, #12]
 8000e20:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8000e24:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8000e28:	60d3      	str	r3, [r2, #12]
 8000e2a:	e720      	b.n	8000c6e <HAL_RCC_OscConfig+0x66>
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8000e2c:	69eb      	ldr	r3, [r5, #28]
 8000e2e:	4c26      	ldr	r4, [pc, #152]	; (8000ec8 <HAL_RCC_OscConfig+0x2c0>)
 8000e30:	b323      	cbz	r3, 8000e7c <HAL_RCC_OscConfig+0x274>
        __HAL_RCC_CSI_ENABLE();
 8000e32:	6823      	ldr	r3, [r4, #0]
 8000e34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e38:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000e3a:	f7ff fc91 	bl	8000760 <HAL_GetTick>
 8000e3e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8000e40:	6823      	ldr	r3, [r4, #0]
 8000e42:	05df      	lsls	r7, r3, #23
 8000e44:	d50d      	bpl.n	8000e62 <HAL_RCC_OscConfig+0x25a>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8000e46:	f7ff fca3 	bl	8000790 <HAL_GetREVID>
 8000e4a:	f241 0303 	movw	r3, #4099	; 0x1003
 8000e4e:	6a2a      	ldr	r2, [r5, #32]
 8000e50:	4298      	cmp	r0, r3
 8000e52:	d80c      	bhi.n	8000e6e <HAL_RCC_OscConfig+0x266>
 8000e54:	6863      	ldr	r3, [r4, #4]
 8000e56:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8000e5a:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 8000e5e:	6063      	str	r3, [r4, #4]
 8000e60:	e705      	b.n	8000c6e <HAL_RCC_OscConfig+0x66>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8000e62:	f7ff fc7d 	bl	8000760 <HAL_GetTick>
 8000e66:	1b80      	subs	r0, r0, r6
 8000e68:	2802      	cmp	r0, #2
 8000e6a:	d9e9      	bls.n	8000e40 <HAL_RCC_OscConfig+0x238>
 8000e6c:	e758      	b.n	8000d20 <HAL_RCC_OscConfig+0x118>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8000e6e:	68e3      	ldr	r3, [r4, #12]
 8000e70:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8000e74:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000e78:	60e3      	str	r3, [r4, #12]
 8000e7a:	e6f8      	b.n	8000c6e <HAL_RCC_OscConfig+0x66>
        __HAL_RCC_CSI_DISABLE();
 8000e7c:	6823      	ldr	r3, [r4, #0]
 8000e7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000e82:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000e84:	f7ff fc6c 	bl	8000760 <HAL_GetTick>
 8000e88:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8000e8a:	6823      	ldr	r3, [r4, #0]
 8000e8c:	05d8      	lsls	r0, r3, #23
 8000e8e:	f57f aeee 	bpl.w	8000c6e <HAL_RCC_OscConfig+0x66>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8000e92:	f7ff fc65 	bl	8000760 <HAL_GetTick>
 8000e96:	1b80      	subs	r0, r0, r6
 8000e98:	2802      	cmp	r0, #2
 8000e9a:	d9f6      	bls.n	8000e8a <HAL_RCC_OscConfig+0x282>
 8000e9c:	e740      	b.n	8000d20 <HAL_RCC_OscConfig+0x118>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000e9e:	696b      	ldr	r3, [r5, #20]
 8000ea0:	4c09      	ldr	r4, [pc, #36]	; (8000ec8 <HAL_RCC_OscConfig+0x2c0>)
 8000ea2:	b1ab      	cbz	r3, 8000ed0 <HAL_RCC_OscConfig+0x2c8>
      __HAL_RCC_LSI_ENABLE();
 8000ea4:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8000ea6:	f043 0301 	orr.w	r3, r3, #1
 8000eaa:	6763      	str	r3, [r4, #116]	; 0x74
      tickstart = HAL_GetTick();
 8000eac:	f7ff fc58 	bl	8000760 <HAL_GetTick>
 8000eb0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000eb2:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8000eb4:	079b      	lsls	r3, r3, #30
 8000eb6:	f53f aede 	bmi.w	8000c76 <HAL_RCC_OscConfig+0x6e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000eba:	f7ff fc51 	bl	8000760 <HAL_GetTick>
 8000ebe:	1b80      	subs	r0, r0, r6
 8000ec0:	2802      	cmp	r0, #2
 8000ec2:	d9f6      	bls.n	8000eb2 <HAL_RCC_OscConfig+0x2aa>
 8000ec4:	e72c      	b.n	8000d20 <HAL_RCC_OscConfig+0x118>
 8000ec6:	bf00      	nop
 8000ec8:	58024400 	.word	0x58024400
 8000ecc:	58024800 	.word	0x58024800
      __HAL_RCC_LSI_DISABLE();
 8000ed0:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8000ed2:	f023 0301 	bic.w	r3, r3, #1
 8000ed6:	6763      	str	r3, [r4, #116]	; 0x74
      tickstart = HAL_GetTick();
 8000ed8:	f7ff fc42 	bl	8000760 <HAL_GetTick>
 8000edc:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8000ede:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8000ee0:	079f      	lsls	r7, r3, #30
 8000ee2:	f57f aec8 	bpl.w	8000c76 <HAL_RCC_OscConfig+0x6e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ee6:	f7ff fc3b 	bl	8000760 <HAL_GetTick>
 8000eea:	1b80      	subs	r0, r0, r6
 8000eec:	2802      	cmp	r0, #2
 8000eee:	d9f6      	bls.n	8000ede <HAL_RCC_OscConfig+0x2d6>
 8000ef0:	e716      	b.n	8000d20 <HAL_RCC_OscConfig+0x118>
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8000ef2:	69ab      	ldr	r3, [r5, #24]
 8000ef4:	4c6c      	ldr	r4, [pc, #432]	; (80010a8 <HAL_RCC_OscConfig+0x4a0>)
 8000ef6:	b183      	cbz	r3, 8000f1a <HAL_RCC_OscConfig+0x312>
      __HAL_RCC_HSI48_ENABLE();
 8000ef8:	6823      	ldr	r3, [r4, #0]
 8000efa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000efe:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 8000f00:	f7ff fc2e 	bl	8000760 <HAL_GetTick>
 8000f04:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8000f06:	6823      	ldr	r3, [r4, #0]
 8000f08:	0498      	lsls	r0, r3, #18
 8000f0a:	f53f aeb8 	bmi.w	8000c7e <HAL_RCC_OscConfig+0x76>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8000f0e:	f7ff fc27 	bl	8000760 <HAL_GetTick>
 8000f12:	1b80      	subs	r0, r0, r6
 8000f14:	2802      	cmp	r0, #2
 8000f16:	d9f6      	bls.n	8000f06 <HAL_RCC_OscConfig+0x2fe>
 8000f18:	e702      	b.n	8000d20 <HAL_RCC_OscConfig+0x118>
      __HAL_RCC_HSI48_DISABLE();
 8000f1a:	6823      	ldr	r3, [r4, #0]
 8000f1c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000f20:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 8000f22:	f7ff fc1d 	bl	8000760 <HAL_GetTick>
 8000f26:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8000f28:	6823      	ldr	r3, [r4, #0]
 8000f2a:	0499      	lsls	r1, r3, #18
 8000f2c:	f57f aea7 	bpl.w	8000c7e <HAL_RCC_OscConfig+0x76>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8000f30:	f7ff fc16 	bl	8000760 <HAL_GetTick>
 8000f34:	1b80      	subs	r0, r0, r6
 8000f36:	2802      	cmp	r0, #2
 8000f38:	d9f6      	bls.n	8000f28 <HAL_RCC_OscConfig+0x320>
 8000f3a:	e6f1      	b.n	8000d20 <HAL_RCC_OscConfig+0x118>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8000f3c:	f7ff fc10 	bl	8000760 <HAL_GetTick>
 8000f40:	1b80      	subs	r0, r0, r6
 8000f42:	2864      	cmp	r0, #100	; 0x64
 8000f44:	f67f aea6 	bls.w	8000c94 <HAL_RCC_OscConfig+0x8c>
 8000f48:	e6ea      	b.n	8000d20 <HAL_RCC_OscConfig+0x118>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f4a:	b9b3      	cbnz	r3, 8000f7a <HAL_RCC_OscConfig+0x372>
 8000f4c:	6f23      	ldr	r3, [r4, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f4e:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f52:	f023 0301 	bic.w	r3, r3, #1
 8000f56:	6723      	str	r3, [r4, #112]	; 0x70
 8000f58:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8000f5a:	f023 0304 	bic.w	r3, r3, #4
 8000f5e:	6723      	str	r3, [r4, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000f60:	f7ff fbfe 	bl	8000760 <HAL_GetTick>
 8000f64:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8000f66:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8000f68:	0798      	lsls	r0, r3, #30
 8000f6a:	f57f aeaa 	bpl.w	8000cc2 <HAL_RCC_OscConfig+0xba>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f6e:	f7ff fbf7 	bl	8000760 <HAL_GetTick>
 8000f72:	1b80      	subs	r0, r0, r6
 8000f74:	42b8      	cmp	r0, r7
 8000f76:	d9f6      	bls.n	8000f66 <HAL_RCC_OscConfig+0x35e>
 8000f78:	e6d2      	b.n	8000d20 <HAL_RCC_OscConfig+0x118>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f7a:	2b05      	cmp	r3, #5
 8000f7c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8000f7e:	d103      	bne.n	8000f88 <HAL_RCC_OscConfig+0x380>
 8000f80:	f043 0304 	orr.w	r3, r3, #4
 8000f84:	6723      	str	r3, [r4, #112]	; 0x70
 8000f86:	e68e      	b.n	8000ca6 <HAL_RCC_OscConfig+0x9e>
 8000f88:	f023 0301 	bic.w	r3, r3, #1
 8000f8c:	6723      	str	r3, [r4, #112]	; 0x70
 8000f8e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8000f90:	f023 0304 	bic.w	r3, r3, #4
 8000f94:	e68a      	b.n	8000cac <HAL_RCC_OscConfig+0xa4>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f96:	f7ff fbe3 	bl	8000760 <HAL_GetTick>
 8000f9a:	1bc0      	subs	r0, r0, r7
 8000f9c:	42a0      	cmp	r0, r4
 8000f9e:	f67f ae8c 	bls.w	8000cba <HAL_RCC_OscConfig+0xb2>
 8000fa2:	e6bd      	b.n	8000d20 <HAL_RCC_OscConfig+0x118>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8000fa4:	4c40      	ldr	r4, [pc, #256]	; (80010a8 <HAL_RCC_OscConfig+0x4a0>)
 8000fa6:	6923      	ldr	r3, [r4, #16]
 8000fa8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000fac:	2b18      	cmp	r3, #24
 8000fae:	f43f ae2e 	beq.w	8000c0e <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_PLL_DISABLE();
 8000fb2:	6823      	ldr	r3, [r4, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000fb4:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000fb6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000fba:	6023      	str	r3, [r4, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000fbc:	d167      	bne.n	800108e <HAL_RCC_OscConfig+0x486>
        tickstart = HAL_GetTick();
 8000fbe:	f7ff fbcf 	bl	8000760 <HAL_GetTick>
 8000fc2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8000fc4:	6823      	ldr	r3, [r4, #0]
 8000fc6:	0199      	lsls	r1, r3, #6
 8000fc8:	d45b      	bmi.n	8001082 <HAL_RCC_OscConfig+0x47a>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000fca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000fcc:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8000fce:	f423 737c 	bic.w	r3, r3, #1008	; 0x3f0
 8000fd2:	f023 0303 	bic.w	r3, r3, #3
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8000fda:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8000fde:	62a3      	str	r3, [r4, #40]	; 0x28
 8000fe0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000fe2:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8000fe4:	3b01      	subs	r3, #1
 8000fe6:	3a01      	subs	r2, #1
 8000fe8:	025b      	lsls	r3, r3, #9
 8000fea:	0412      	lsls	r2, r2, #16
 8000fec:	b29b      	uxth	r3, r3
 8000fee:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8000ff6:	3a01      	subs	r2, #1
 8000ff8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8001000:	3a01      	subs	r2, #1
 8001002:	0612      	lsls	r2, r2, #24
 8001004:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8001008:	4313      	orrs	r3, r2
 800100a:	6323      	str	r3, [r4, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 800100c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800100e:	f023 0301 	bic.w	r3, r3, #1
 8001012:	62e3      	str	r3, [r4, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001014:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001016:	6caa      	ldr	r2, [r5, #72]	; 0x48
 8001018:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800101c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001020:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001024:	6363      	str	r3, [r4, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001026:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001028:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 800102a:	f023 030c 	bic.w	r3, r3, #12
 800102e:	4313      	orrs	r3, r2
 8001030:	62e3      	str	r3, [r4, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001032:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001034:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 8001036:	f023 0302 	bic.w	r3, r3, #2
 800103a:	4313      	orrs	r3, r2
 800103c:	62e3      	str	r3, [r4, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800103e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001040:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001044:	62e3      	str	r3, [r4, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001046:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001048:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800104c:	62e3      	str	r3, [r4, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800104e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001050:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001054:	62e3      	str	r3, [r4, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 8001056:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001058:	f043 0301 	orr.w	r3, r3, #1
 800105c:	62e3      	str	r3, [r4, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 800105e:	6823      	ldr	r3, [r4, #0]
 8001060:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001064:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001066:	f7ff fb7b 	bl	8000760 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800106a:	4c0f      	ldr	r4, [pc, #60]	; (80010a8 <HAL_RCC_OscConfig+0x4a0>)
        tickstart = HAL_GetTick();
 800106c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800106e:	6823      	ldr	r3, [r4, #0]
 8001070:	019a      	lsls	r2, r3, #6
 8001072:	f53f ae2a 	bmi.w	8000cca <HAL_RCC_OscConfig+0xc2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001076:	f7ff fb73 	bl	8000760 <HAL_GetTick>
 800107a:	1b40      	subs	r0, r0, r5
 800107c:	2802      	cmp	r0, #2
 800107e:	d9f6      	bls.n	800106e <HAL_RCC_OscConfig+0x466>
 8001080:	e64e      	b.n	8000d20 <HAL_RCC_OscConfig+0x118>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001082:	f7ff fb6d 	bl	8000760 <HAL_GetTick>
 8001086:	1b80      	subs	r0, r0, r6
 8001088:	2802      	cmp	r0, #2
 800108a:	d99b      	bls.n	8000fc4 <HAL_RCC_OscConfig+0x3bc>
 800108c:	e648      	b.n	8000d20 <HAL_RCC_OscConfig+0x118>
        tickstart = HAL_GetTick();
 800108e:	f7ff fb67 	bl	8000760 <HAL_GetTick>
 8001092:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001094:	6823      	ldr	r3, [r4, #0]
 8001096:	019b      	lsls	r3, r3, #6
 8001098:	f57f ae17 	bpl.w	8000cca <HAL_RCC_OscConfig+0xc2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800109c:	f7ff fb60 	bl	8000760 <HAL_GetTick>
 80010a0:	1b40      	subs	r0, r0, r5
 80010a2:	2802      	cmp	r0, #2
 80010a4:	d9f6      	bls.n	8001094 <HAL_RCC_OscConfig+0x48c>
 80010a6:	e63b      	b.n	8000d20 <HAL_RCC_OscConfig+0x118>
 80010a8:	58024400 	.word	0x58024400

080010ac <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80010ac:	4b48      	ldr	r3, [pc, #288]	; (80011d0 <HAL_RCC_GetSysClockFreq+0x124>)
 80010ae:	691a      	ldr	r2, [r3, #16]
 80010b0:	f002 0238 	and.w	r2, r2, #56	; 0x38
 80010b4:	2a10      	cmp	r2, #16
{
 80010b6:	b510      	push	{r4, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80010b8:	d00e      	beq.n	80010d8 <HAL_RCC_GetSysClockFreq+0x2c>
 80010ba:	2a18      	cmp	r2, #24
 80010bc:	d00e      	beq.n	80010dc <HAL_RCC_GetSysClockFreq+0x30>
 80010be:	2a00      	cmp	r2, #0
 80010c0:	f040 8083 	bne.w	80011ca <HAL_RCC_GetSysClockFreq+0x11e>
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	4843      	ldr	r0, [pc, #268]	; (80011d4 <HAL_RCC_GetSysClockFreq+0x128>)
 80010c8:	f012 0f20 	tst.w	r2, #32
 80010cc:	d07e      	beq.n	80011cc <HAL_RCC_GetSysClockFreq+0x120>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80010d4:	40d8      	lsrs	r0, r3
 80010d6:	bd10      	pop	{r4, pc}
  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
    break;

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80010d8:	483f      	ldr	r0, [pc, #252]	; (80011d8 <HAL_RCC_GetSysClockFreq+0x12c>)
 80010da:	bd10      	pop	{r4, pc}
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80010dc:	6a99      	ldr	r1, [r3, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80010de:	6a98      	ldr	r0, [r3, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80010e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80010e2:	f3c0 1005 	ubfx	r0, r0, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80010e6:	6b5c      	ldr	r4, [r3, #52]	; 0x34

    if (pllm != 0U)
 80010e8:	2800      	cmp	r0, #0
 80010ea:	d06f      	beq.n	80011cc <HAL_RCC_GetSysClockFreq+0x120>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80010ec:	f3c4 04cc 	ubfx	r4, r4, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80010f0:	f002 0201 	and.w	r2, r2, #1
 80010f4:	ed9f 5a39 	vldr	s10, [pc, #228]	; 80011dc <HAL_RCC_GetSysClockFreq+0x130>
 80010f8:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80010fc:	4362      	muls	r2, r4
 80010fe:	ee07 2a90 	vmov	s15, r2
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001102:	f001 0203 	and.w	r2, r1, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8001106:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
    {
      switch (pllsource)
 800110a:	2a01      	cmp	r2, #1
 800110c:	ee07 0a90 	vmov	s15, r0
 8001110:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001114:	d002      	beq.n	800111c <HAL_RCC_GetSysClockFreq+0x70>
 8001116:	d30f      	bcc.n	8001138 <HAL_RCC_GetSysClockFreq+0x8c>
 8001118:	2a02      	cmp	r2, #2
 800111a:	d048      	beq.n	80011ae <HAL_RCC_GetSysClockFreq+0x102>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001122:	ee07 3a90 	vmov	s15, r3
 8001126:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800112a:	eee6 7a05 	vfma.f32	s15, s12, s10
 800112e:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 80011e0 <HAL_RCC_GetSysClockFreq+0x134>
 8001132:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8001136:	e037      	b.n	80011a8 <HAL_RCC_GetSysClockFreq+0xfc>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	0692      	lsls	r2, r2, #26
 800113c:	d527      	bpl.n	800118e <HAL_RCC_GetSysClockFreq+0xe2>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800113e:	6819      	ldr	r1, [r3, #0]
 8001140:	4a24      	ldr	r2, [pc, #144]	; (80011d4 <HAL_RCC_GetSysClockFreq+0x128>)
 8001142:	f3c1 01c1 	ubfx	r1, r1, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001148:	40ca      	lsrs	r2, r1
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800114a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800114e:	ee07 2a90 	vmov	s15, r2
 8001152:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001156:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800115a:	ee07 3a90 	vmov	s15, r3
 800115e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001162:	eee6 7a05 	vfma.f32	s15, s12, s10
 8001166:	ee77 7aa5 	vadd.f32	s15, s15, s11
        break;
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800116a:	4b19      	ldr	r3, [pc, #100]	; (80011d0 <HAL_RCC_GetSysClockFreq+0x124>)
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800116c:	ee67 7a87 	vmul.f32	s15, s15, s14
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8001176:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8001178:	ee07 3a10 	vmov	s14, r3
 800117c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8001180:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001184:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8001188:	ee17 0a90 	vmov	r0, s15
 800118c:	bd10      	pop	{r4, pc}
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800118e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001190:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001194:	ee07 3a90 	vmov	s15, r3
 8001198:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800119c:	eee6 7a05 	vfma.f32	s15, s12, s10
 80011a0:	ed9f 6a10 	vldr	s12, [pc, #64]	; 80011e4 <HAL_RCC_GetSysClockFreq+0x138>
 80011a4:	ee77 7aa5 	vadd.f32	s15, s15, s11
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80011a8:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80011ac:	e7dd      	b.n	800116a <HAL_RCC_GetSysClockFreq+0xbe>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80011ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80011b4:	ee07 3a90 	vmov	s15, r3
 80011b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011bc:	eee6 7a05 	vfma.f32	s15, s12, s10
 80011c0:	ed9f 6a09 	vldr	s12, [pc, #36]	; 80011e8 <HAL_RCC_GetSysClockFreq+0x13c>
 80011c4:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80011c8:	e7ee      	b.n	80011a8 <HAL_RCC_GetSysClockFreq+0xfc>
    sysclockfreq = CSI_VALUE;
 80011ca:	4808      	ldr	r0, [pc, #32]	; (80011ec <HAL_RCC_GetSysClockFreq+0x140>)
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 80011cc:	bd10      	pop	{r4, pc}
 80011ce:	bf00      	nop
 80011d0:	58024400 	.word	0x58024400
 80011d4:	03d09000 	.word	0x03d09000
 80011d8:	007a1200 	.word	0x007a1200
 80011dc:	39000000 	.word	0x39000000
 80011e0:	4a742400 	.word	0x4a742400
 80011e4:	4c742400 	.word	0x4c742400
 80011e8:	4af42400 	.word	0x4af42400
 80011ec:	003d0900 	.word	0x003d0900

080011f0 <HAL_RCC_ClockConfig>:
{
 80011f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80011f4:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80011f6:	4604      	mov	r4, r0
 80011f8:	b910      	cbnz	r0, 8001200 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80011fa:	2001      	movs	r0, #1
 80011fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001200:	4a84      	ldr	r2, [pc, #528]	; (8001414 <HAL_RCC_ClockConfig+0x224>)
 8001202:	6813      	ldr	r3, [r2, #0]
 8001204:	f003 030f 	and.w	r3, r3, #15
 8001208:	428b      	cmp	r3, r1
 800120a:	f0c0 8089 	bcc.w	8001320 <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800120e:	6823      	ldr	r3, [r4, #0]
 8001210:	075f      	lsls	r7, r3, #29
 8001212:	f100 8091 	bmi.w	8001338 <HAL_RCC_ClockConfig+0x148>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001216:	071e      	lsls	r6, r3, #28
 8001218:	d50b      	bpl.n	8001232 <HAL_RCC_ClockConfig+0x42>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800121a:	497f      	ldr	r1, [pc, #508]	; (8001418 <HAL_RCC_ClockConfig+0x228>)
 800121c:	6966      	ldr	r6, [r4, #20]
 800121e:	69c8      	ldr	r0, [r1, #28]
 8001220:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8001224:	4286      	cmp	r6, r0
 8001226:	d904      	bls.n	8001232 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001228:	69ca      	ldr	r2, [r1, #28]
 800122a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800122e:	4332      	orrs	r2, r6
 8001230:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001232:	06d8      	lsls	r0, r3, #27
 8001234:	d50b      	bpl.n	800124e <HAL_RCC_ClockConfig+0x5e>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001236:	4978      	ldr	r1, [pc, #480]	; (8001418 <HAL_RCC_ClockConfig+0x228>)
 8001238:	69a6      	ldr	r6, [r4, #24]
 800123a:	69c8      	ldr	r0, [r1, #28]
 800123c:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8001240:	4286      	cmp	r6, r0
 8001242:	d904      	bls.n	800124e <HAL_RCC_ClockConfig+0x5e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001244:	69ca      	ldr	r2, [r1, #28]
 8001246:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800124a:	4332      	orrs	r2, r6
 800124c:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800124e:	0699      	lsls	r1, r3, #26
 8001250:	d50b      	bpl.n	800126a <HAL_RCC_ClockConfig+0x7a>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001252:	4971      	ldr	r1, [pc, #452]	; (8001418 <HAL_RCC_ClockConfig+0x228>)
 8001254:	69e6      	ldr	r6, [r4, #28]
 8001256:	6a08      	ldr	r0, [r1, #32]
 8001258:	f000 0070 	and.w	r0, r0, #112	; 0x70
 800125c:	4286      	cmp	r6, r0
 800125e:	d904      	bls.n	800126a <HAL_RCC_ClockConfig+0x7a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001260:	6a0a      	ldr	r2, [r1, #32]
 8001262:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001266:	4332      	orrs	r2, r6
 8001268:	620a      	str	r2, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800126a:	079a      	lsls	r2, r3, #30
 800126c:	d50b      	bpl.n	8001286 <HAL_RCC_ClockConfig+0x96>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800126e:	496a      	ldr	r1, [pc, #424]	; (8001418 <HAL_RCC_ClockConfig+0x228>)
 8001270:	68e6      	ldr	r6, [r4, #12]
 8001272:	6988      	ldr	r0, [r1, #24]
 8001274:	f000 000f 	and.w	r0, r0, #15
 8001278:	4286      	cmp	r6, r0
 800127a:	d904      	bls.n	8001286 <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800127c:	698a      	ldr	r2, [r1, #24]
 800127e:	f022 020f 	bic.w	r2, r2, #15
 8001282:	4332      	orrs	r2, r6
 8001284:	618a      	str	r2, [r1, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001286:	07df      	lsls	r7, r3, #31
 8001288:	d464      	bmi.n	8001354 <HAL_RCC_ClockConfig+0x164>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800128a:	6823      	ldr	r3, [r4, #0]
 800128c:	079e      	lsls	r6, r3, #30
 800128e:	f100 8098 	bmi.w	80013c2 <HAL_RCC_ClockConfig+0x1d2>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001292:	4960      	ldr	r1, [pc, #384]	; (8001414 <HAL_RCC_ClockConfig+0x224>)
 8001294:	680a      	ldr	r2, [r1, #0]
 8001296:	f002 020f 	and.w	r2, r2, #15
 800129a:	4295      	cmp	r5, r2
 800129c:	f0c0 809f 	bcc.w	80013de <HAL_RCC_ClockConfig+0x1ee>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80012a0:	0758      	lsls	r0, r3, #29
 80012a2:	f100 80a8 	bmi.w	80013f6 <HAL_RCC_ClockConfig+0x206>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012a6:	0719      	lsls	r1, r3, #28
 80012a8:	d50b      	bpl.n	80012c2 <HAL_RCC_ClockConfig+0xd2>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80012aa:	495b      	ldr	r1, [pc, #364]	; (8001418 <HAL_RCC_ClockConfig+0x228>)
 80012ac:	6965      	ldr	r5, [r4, #20]
 80012ae:	69c8      	ldr	r0, [r1, #28]
 80012b0:	f000 0070 	and.w	r0, r0, #112	; 0x70
 80012b4:	4285      	cmp	r5, r0
 80012b6:	d204      	bcs.n	80012c2 <HAL_RCC_ClockConfig+0xd2>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80012b8:	69ca      	ldr	r2, [r1, #28]
 80012ba:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80012be:	432a      	orrs	r2, r5
 80012c0:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012c2:	06da      	lsls	r2, r3, #27
 80012c4:	d50b      	bpl.n	80012de <HAL_RCC_ClockConfig+0xee>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80012c6:	4954      	ldr	r1, [pc, #336]	; (8001418 <HAL_RCC_ClockConfig+0x228>)
 80012c8:	69a5      	ldr	r5, [r4, #24]
 80012ca:	69c8      	ldr	r0, [r1, #28]
 80012cc:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 80012d0:	4285      	cmp	r5, r0
 80012d2:	d204      	bcs.n	80012de <HAL_RCC_ClockConfig+0xee>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80012d4:	69ca      	ldr	r2, [r1, #28]
 80012d6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80012da:	432a      	orrs	r2, r5
 80012dc:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80012de:	069b      	lsls	r3, r3, #26
 80012e0:	d50b      	bpl.n	80012fa <HAL_RCC_ClockConfig+0x10a>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80012e2:	4a4d      	ldr	r2, [pc, #308]	; (8001418 <HAL_RCC_ClockConfig+0x228>)
 80012e4:	69e0      	ldr	r0, [r4, #28]
 80012e6:	6a11      	ldr	r1, [r2, #32]
 80012e8:	f001 0170 	and.w	r1, r1, #112	; 0x70
 80012ec:	4288      	cmp	r0, r1
 80012ee:	d204      	bcs.n	80012fa <HAL_RCC_ClockConfig+0x10a>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80012f0:	6a13      	ldr	r3, [r2, #32]
 80012f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80012f6:	4303      	orrs	r3, r0
 80012f8:	6213      	str	r3, [r2, #32]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80012fa:	f7ff fed7 	bl	80010ac <HAL_RCC_GetSysClockFreq>
 80012fe:	4b46      	ldr	r3, [pc, #280]	; (8001418 <HAL_RCC_ClockConfig+0x228>)
 8001300:	4a46      	ldr	r2, [pc, #280]	; (800141c <HAL_RCC_ClockConfig+0x22c>)
 8001302:	699b      	ldr	r3, [r3, #24]
 8001304:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8001308:	5cd3      	ldrb	r3, [r2, r3]
 800130a:	f003 031f 	and.w	r3, r3, #31
 800130e:	40d8      	lsrs	r0, r3
 8001310:	4b43      	ldr	r3, [pc, #268]	; (8001420 <HAL_RCC_ClockConfig+0x230>)
 8001312:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick (uwTickPrio);
 8001314:	4b43      	ldr	r3, [pc, #268]	; (8001424 <HAL_RCC_ClockConfig+0x234>)
}
 8001316:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick (uwTickPrio);
 800131a:	6818      	ldr	r0, [r3, #0]
 800131c:	f7ff b9c0 	b.w	80006a0 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001320:	6813      	ldr	r3, [r2, #0]
 8001322:	f023 030f 	bic.w	r3, r3, #15
 8001326:	430b      	orrs	r3, r1
 8001328:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800132a:	6813      	ldr	r3, [r2, #0]
 800132c:	f003 030f 	and.w	r3, r3, #15
 8001330:	4299      	cmp	r1, r3
 8001332:	f47f af62 	bne.w	80011fa <HAL_RCC_ClockConfig+0xa>
 8001336:	e76a      	b.n	800120e <HAL_RCC_ClockConfig+0x1e>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001338:	4937      	ldr	r1, [pc, #220]	; (8001418 <HAL_RCC_ClockConfig+0x228>)
 800133a:	6926      	ldr	r6, [r4, #16]
 800133c:	6988      	ldr	r0, [r1, #24]
 800133e:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8001342:	4286      	cmp	r6, r0
 8001344:	f67f af67 	bls.w	8001216 <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001348:	698a      	ldr	r2, [r1, #24]
 800134a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800134e:	4332      	orrs	r2, r6
 8001350:	618a      	str	r2, [r1, #24]
 8001352:	e760      	b.n	8001216 <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001354:	4b30      	ldr	r3, [pc, #192]	; (8001418 <HAL_RCC_ClockConfig+0x228>)
 8001356:	68a1      	ldr	r1, [r4, #8]
 8001358:	699a      	ldr	r2, [r3, #24]
 800135a:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 800135e:	430a      	orrs	r2, r1
 8001360:	619a      	str	r2, [r3, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001362:	6861      	ldr	r1, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001364:	681a      	ldr	r2, [r3, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001366:	2902      	cmp	r1, #2
 8001368:	d11e      	bne.n	80013a8 <HAL_RCC_ClockConfig+0x1b8>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800136a:	f412 3f00 	tst.w	r2, #131072	; 0x20000
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800136e:	f43f af44 	beq.w	80011fa <HAL_RCC_ClockConfig+0xa>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001372:	691a      	ldr	r2, [r3, #16]
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001374:	f241 3888 	movw	r8, #5000	; 0x1388
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001378:	4e27      	ldr	r6, [pc, #156]	; (8001418 <HAL_RCC_ClockConfig+0x228>)
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800137a:	f022 0207 	bic.w	r2, r2, #7
 800137e:	430a      	orrs	r2, r1
 8001380:	611a      	str	r2, [r3, #16]
      tickstart = HAL_GetTick();
 8001382:	f7ff f9ed 	bl	8000760 <HAL_GetTick>
 8001386:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001388:	6933      	ldr	r3, [r6, #16]
 800138a:	6862      	ldr	r2, [r4, #4]
 800138c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001390:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8001394:	f43f af79 	beq.w	800128a <HAL_RCC_ClockConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001398:	f7ff f9e2 	bl	8000760 <HAL_GetTick>
 800139c:	1bc0      	subs	r0, r0, r7
 800139e:	4540      	cmp	r0, r8
 80013a0:	d9f2      	bls.n	8001388 <HAL_RCC_ClockConfig+0x198>
            return HAL_TIMEOUT;
 80013a2:	2003      	movs	r0, #3
}
 80013a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80013a8:	2903      	cmp	r1, #3
 80013aa:	d102      	bne.n	80013b2 <HAL_RCC_ClockConfig+0x1c2>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80013ac:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80013b0:	e7dd      	b.n	800136e <HAL_RCC_ClockConfig+0x17e>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80013b2:	2901      	cmp	r1, #1
 80013b4:	d102      	bne.n	80013bc <HAL_RCC_ClockConfig+0x1cc>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80013b6:	f412 7f80 	tst.w	r2, #256	; 0x100
 80013ba:	e7d8      	b.n	800136e <HAL_RCC_ClockConfig+0x17e>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80013bc:	f012 0f04 	tst.w	r2, #4
 80013c0:	e7d5      	b.n	800136e <HAL_RCC_ClockConfig+0x17e>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80013c2:	4915      	ldr	r1, [pc, #84]	; (8001418 <HAL_RCC_ClockConfig+0x228>)
 80013c4:	68e6      	ldr	r6, [r4, #12]
 80013c6:	6988      	ldr	r0, [r1, #24]
 80013c8:	f000 000f 	and.w	r0, r0, #15
 80013cc:	4286      	cmp	r6, r0
 80013ce:	f4bf af60 	bcs.w	8001292 <HAL_RCC_ClockConfig+0xa2>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013d2:	698a      	ldr	r2, [r1, #24]
 80013d4:	f022 020f 	bic.w	r2, r2, #15
 80013d8:	4332      	orrs	r2, r6
 80013da:	618a      	str	r2, [r1, #24]
 80013dc:	e759      	b.n	8001292 <HAL_RCC_ClockConfig+0xa2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013de:	680a      	ldr	r2, [r1, #0]
 80013e0:	f022 020f 	bic.w	r2, r2, #15
 80013e4:	432a      	orrs	r2, r5
 80013e6:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013e8:	680a      	ldr	r2, [r1, #0]
 80013ea:	f002 020f 	and.w	r2, r2, #15
 80013ee:	4295      	cmp	r5, r2
 80013f0:	f47f af03 	bne.w	80011fa <HAL_RCC_ClockConfig+0xa>
 80013f4:	e754      	b.n	80012a0 <HAL_RCC_ClockConfig+0xb0>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80013f6:	4908      	ldr	r1, [pc, #32]	; (8001418 <HAL_RCC_ClockConfig+0x228>)
 80013f8:	6925      	ldr	r5, [r4, #16]
 80013fa:	6988      	ldr	r0, [r1, #24]
 80013fc:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8001400:	4285      	cmp	r5, r0
 8001402:	f4bf af50 	bcs.w	80012a6 <HAL_RCC_ClockConfig+0xb6>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001406:	698a      	ldr	r2, [r1, #24]
 8001408:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800140c:	432a      	orrs	r2, r5
 800140e:	618a      	str	r2, [r1, #24]
 8001410:	e749      	b.n	80012a6 <HAL_RCC_ClockConfig+0xb6>
 8001412:	bf00      	nop
 8001414:	52002000 	.word	0x52002000
 8001418:	58024400 	.word	0x58024400
 800141c:	08006dda 	.word	0x08006dda
 8001420:	20000030 	.word	0x20000030
 8001424:	20000004 	.word	0x20000004

08001428 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001428:	b508      	push	{r3, lr}
  SystemD2Clock = (HAL_RCCEx_GetD1SysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800142a:	f000 fee9 	bl	8002200 <HAL_RCCEx_GetD1SysClockFreq>
 800142e:	4b06      	ldr	r3, [pc, #24]	; (8001448 <HAL_RCC_GetHCLKFreq+0x20>)
 8001430:	4a06      	ldr	r2, [pc, #24]	; (800144c <HAL_RCC_GetHCLKFreq+0x24>)
 8001432:	699b      	ldr	r3, [r3, #24]
 8001434:	f003 030f 	and.w	r3, r3, #15
 8001438:	5cd3      	ldrb	r3, [r2, r3]
 800143a:	f003 031f 	and.w	r3, r3, #31
 800143e:	40d8      	lsrs	r0, r3
 8001440:	4b03      	ldr	r3, [pc, #12]	; (8001450 <HAL_RCC_GetHCLKFreq+0x28>)
 8001442:	6018      	str	r0, [r3, #0]
  return SystemD2Clock;
}
 8001444:	bd08      	pop	{r3, pc}
 8001446:	bf00      	nop
 8001448:	58024400 	.word	0x58024400
 800144c:	08006dda 	.word	0x08006dda
 8001450:	20000034 	.word	0x20000034

08001454 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001454:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8001456:	f7ff ffe7 	bl	8001428 <HAL_RCC_GetHCLKFreq>
 800145a:	4b05      	ldr	r3, [pc, #20]	; (8001470 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800145c:	4a05      	ldr	r2, [pc, #20]	; (8001474 <HAL_RCC_GetPCLK1Freq+0x20>)
 800145e:	69db      	ldr	r3, [r3, #28]
 8001460:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8001464:	5cd3      	ldrb	r3, [r2, r3]
 8001466:	f003 031f 	and.w	r3, r3, #31
}
 800146a:	40d8      	lsrs	r0, r3
 800146c:	bd08      	pop	{r3, pc}
 800146e:	bf00      	nop
 8001470:	58024400 	.word	0x58024400
 8001474:	08006dda 	.word	0x08006dda

08001478 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001478:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800147a:	f7ff ffd5 	bl	8001428 <HAL_RCC_GetHCLKFreq>
 800147e:	4b05      	ldr	r3, [pc, #20]	; (8001494 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001480:	4a05      	ldr	r2, [pc, #20]	; (8001498 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001482:	69db      	ldr	r3, [r3, #28]
 8001484:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001488:	5cd3      	ldrb	r3, [r2, r3]
 800148a:	f003 031f 	and.w	r3, r3, #31
}
 800148e:	40d8      	lsrs	r0, r3
 8001490:	bd08      	pop	{r3, pc}
 8001492:	bf00      	nop
 8001494:	58024400 	.word	0x58024400
 8001498:	08006dda 	.word	0x08006dda

0800149c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800149c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800149e:	4c3a      	ldr	r4, [pc, #232]	; (8001588 <RCCEx_PLL2_Config+0xec>)
{
 80014a0:	4606      	mov	r6, r0
 80014a2:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80014a4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80014a6:	f003 0303 	and.w	r3, r3, #3
 80014aa:	2b03      	cmp	r3, #3
 80014ac:	d069      	beq.n	8001582 <RCCEx_PLL2_Config+0xe6>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80014ae:	6823      	ldr	r3, [r4, #0]
 80014b0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80014b4:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80014b6:	f7ff f953 	bl	8000760 <HAL_GetTick>
 80014ba:	4607      	mov	r7, r0

    /* Wait till PLL is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80014bc:	6823      	ldr	r3, [r4, #0]
 80014be:	011a      	lsls	r2, r3, #4
 80014c0:	d44b      	bmi.n	800155a <RCCEx_PLL2_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80014c2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80014c4:	6832      	ldr	r2, [r6, #0]
 80014c6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80014ca:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 80014ce:	62a3      	str	r3, [r4, #40]	; 0x28
 80014d0:	68b3      	ldr	r3, [r6, #8]
 80014d2:	68f2      	ldr	r2, [r6, #12]
 80014d4:	3b01      	subs	r3, #1
 80014d6:	3a01      	subs	r2, #1
 80014d8:	025b      	lsls	r3, r3, #9
 80014da:	0412      	lsls	r2, r2, #16
 80014dc:	b29b      	uxth	r3, r3
 80014de:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80014e2:	4313      	orrs	r3, r2
 80014e4:	6872      	ldr	r2, [r6, #4]
 80014e6:	3a01      	subs	r2, #1
 80014e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80014ec:	4313      	orrs	r3, r2
 80014ee:	6932      	ldr	r2, [r6, #16]
 80014f0:	3a01      	subs	r2, #1
 80014f2:	0612      	lsls	r2, r2, #24
 80014f4:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80014f8:	4313      	orrs	r3, r2
 80014fa:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80014fc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80014fe:	6972      	ldr	r2, [r6, #20]
 8001500:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001504:	4313      	orrs	r3, r2
 8001506:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8001508:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800150a:	69b2      	ldr	r2, [r6, #24]
 800150c:	f023 0320 	bic.w	r3, r3, #32
 8001510:	4313      	orrs	r3, r2
 8001512:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8001514:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001516:	f023 0310 	bic.w	r3, r3, #16
 800151a:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800151c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800151e:	69f2      	ldr	r2, [r6, #28]
 8001520:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001524:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001528:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800152c:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800152e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001530:	f043 0310 	orr.w	r3, r3, #16
 8001534:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8001536:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8001538:	b9b5      	cbnz	r5, 8001568 <RCCEx_PLL2_Config+0xcc>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800153a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800153e:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8001540:	4c11      	ldr	r4, [pc, #68]	; (8001588 <RCCEx_PLL2_Config+0xec>)
 8001542:	6823      	ldr	r3, [r4, #0]
 8001544:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001548:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800154a:	f7ff f909 	bl	8000760 <HAL_GetTick>
 800154e:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8001550:	6823      	ldr	r3, [r4, #0]
 8001552:	011b      	lsls	r3, r3, #4
 8001554:	d50f      	bpl.n	8001576 <RCCEx_PLL2_Config+0xda>
    }

  }


  return status;
 8001556:	2000      	movs	r0, #0
 8001558:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800155a:	f7ff f901 	bl	8000760 <HAL_GetTick>
 800155e:	1bc0      	subs	r0, r0, r7
 8001560:	2802      	cmp	r0, #2
 8001562:	d9ab      	bls.n	80014bc <RCCEx_PLL2_Config+0x20>
        return HAL_TIMEOUT;
 8001564:	2003      	movs	r0, #3
 8001566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(Divider == DIVIDER_Q_UPDATE)
 8001568:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800156a:	bf0c      	ite	eq
 800156c:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8001570:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 8001574:	e7e3      	b.n	800153e <RCCEx_PLL2_Config+0xa2>
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8001576:	f7ff f8f3 	bl	8000760 <HAL_GetTick>
 800157a:	1b40      	subs	r0, r0, r5
 800157c:	2802      	cmp	r0, #2
 800157e:	d9e7      	bls.n	8001550 <RCCEx_PLL2_Config+0xb4>
 8001580:	e7f0      	b.n	8001564 <RCCEx_PLL2_Config+0xc8>
    return HAL_ERROR;
 8001582:	2001      	movs	r0, #1
}
 8001584:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001586:	bf00      	nop
 8001588:	58024400 	.word	0x58024400

0800158c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800158c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800158e:	4c3a      	ldr	r4, [pc, #232]	; (8001678 <RCCEx_PLL3_Config+0xec>)
{
 8001590:	4606      	mov	r6, r0
 8001592:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8001594:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001596:	f003 0303 	and.w	r3, r3, #3
 800159a:	2b03      	cmp	r3, #3
 800159c:	d069      	beq.n	8001672 <RCCEx_PLL3_Config+0xe6>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800159e:	6823      	ldr	r3, [r4, #0]
 80015a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015a4:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80015a6:	f7ff f8db 	bl	8000760 <HAL_GetTick>
 80015aa:	4607      	mov	r7, r0
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80015ac:	6823      	ldr	r3, [r4, #0]
 80015ae:	009a      	lsls	r2, r3, #2
 80015b0:	d44b      	bmi.n	800164a <RCCEx_PLL3_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80015b2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80015b4:	6832      	ldr	r2, [r6, #0]
 80015b6:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 80015ba:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 80015be:	62a3      	str	r3, [r4, #40]	; 0x28
 80015c0:	68b3      	ldr	r3, [r6, #8]
 80015c2:	68f2      	ldr	r2, [r6, #12]
 80015c4:	3b01      	subs	r3, #1
 80015c6:	3a01      	subs	r2, #1
 80015c8:	025b      	lsls	r3, r3, #9
 80015ca:	0412      	lsls	r2, r2, #16
 80015cc:	b29b      	uxth	r3, r3
 80015ce:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80015d2:	4313      	orrs	r3, r2
 80015d4:	6872      	ldr	r2, [r6, #4]
 80015d6:	3a01      	subs	r2, #1
 80015d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80015dc:	4313      	orrs	r3, r2
 80015de:	6932      	ldr	r2, [r6, #16]
 80015e0:	3a01      	subs	r2, #1
 80015e2:	0612      	lsls	r2, r2, #24
 80015e4:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80015e8:	4313      	orrs	r3, r2
 80015ea:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80015ec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80015ee:	6972      	ldr	r2, [r6, #20]
 80015f0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80015f4:	4313      	orrs	r3, r2
 80015f6:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80015f8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80015fa:	69b2      	ldr	r2, [r6, #24]
 80015fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001600:	4313      	orrs	r3, r2
 8001602:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8001604:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001606:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800160a:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800160c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800160e:	69f2      	ldr	r2, [r6, #28]
 8001610:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001614:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001618:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800161c:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800161e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001620:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001624:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8001626:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8001628:	b9b5      	cbnz	r5, 8001658 <RCCEx_PLL3_Config+0xcc>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800162a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800162e:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8001630:	4c11      	ldr	r4, [pc, #68]	; (8001678 <RCCEx_PLL3_Config+0xec>)
 8001632:	6823      	ldr	r3, [r4, #0]
 8001634:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001638:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800163a:	f7ff f891 	bl	8000760 <HAL_GetTick>
 800163e:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8001640:	6823      	ldr	r3, [r4, #0]
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	d50f      	bpl.n	8001666 <RCCEx_PLL3_Config+0xda>
    }

  }


  return status;
 8001646:	2000      	movs	r0, #0
 8001648:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800164a:	f7ff f889 	bl	8000760 <HAL_GetTick>
 800164e:	1bc0      	subs	r0, r0, r7
 8001650:	2802      	cmp	r0, #2
 8001652:	d9ab      	bls.n	80015ac <RCCEx_PLL3_Config+0x20>
        return HAL_TIMEOUT;
 8001654:	2003      	movs	r0, #3
 8001656:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(Divider == DIVIDER_Q_UPDATE)
 8001658:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800165a:	bf0c      	ite	eq
 800165c:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8001660:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 8001664:	e7e3      	b.n	800162e <RCCEx_PLL3_Config+0xa2>
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8001666:	f7ff f87b 	bl	8000760 <HAL_GetTick>
 800166a:	1b40      	subs	r0, r0, r5
 800166c:	2802      	cmp	r0, #2
 800166e:	d9e7      	bls.n	8001640 <RCCEx_PLL3_Config+0xb4>
 8001670:	e7f0      	b.n	8001654 <RCCEx_PLL3_Config+0xc8>
    return HAL_ERROR;
 8001672:	2001      	movs	r0, #1
}
 8001674:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001676:	bf00      	nop
 8001678:	58024400 	.word	0x58024400

0800167c <HAL_RCCEx_PeriphCLKConfig>:
{
 800167c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001680:	6806      	ldr	r6, [r0, #0]
{
 8001682:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001684:	f016 6600 	ands.w	r6, r6, #134217728	; 0x8000000
 8001688:	d023      	beq.n	80016d2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    switch(PeriphClkInit->SpdifrxClockSelection)
 800168a:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800168c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001690:	d018      	beq.n	80016c4 <HAL_RCCEx_PeriphCLKConfig+0x48>
 8001692:	d802      	bhi.n	800169a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001694:	b183      	cbz	r3, 80016b8 <HAL_RCCEx_PeriphCLKConfig+0x3c>
      ret = HAL_ERROR;
 8001696:	2601      	movs	r6, #1
 8001698:	e01b      	b.n	80016d2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    switch(PeriphClkInit->SpdifrxClockSelection)
 800169a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800169e:	d023      	beq.n	80016e8 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 80016a0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80016a4:	d1f7      	bne.n	8001696 <HAL_RCCEx_PeriphCLKConfig+0x1a>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80016a6:	4a9f      	ldr	r2, [pc, #636]	; (8001924 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80016a8:	2600      	movs	r6, #0
 80016aa:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80016ac:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80016ae:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80016b2:	430b      	orrs	r3, r1
 80016b4:	6513      	str	r3, [r2, #80]	; 0x50
 80016b6:	e00c      	b.n	80016d2 <HAL_RCCEx_PeriphCLKConfig+0x56>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80016b8:	4a9a      	ldr	r2, [pc, #616]	; (8001924 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80016ba:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80016bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016c0:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 80016c2:	e7f0      	b.n	80016a6 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80016c4:	2102      	movs	r1, #2
 80016c6:	3004      	adds	r0, #4
 80016c8:	f7ff fee8 	bl	800149c <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80016cc:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 80016ce:	2800      	cmp	r0, #0
 80016d0:	d0e9      	beq.n	80016a6 <HAL_RCCEx_PeriphCLKConfig+0x2a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80016d2:	6823      	ldr	r3, [r4, #0]
 80016d4:	05dd      	lsls	r5, r3, #23
 80016d6:	d534      	bpl.n	8001742 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    switch(PeriphClkInit->Sai1ClockSelection)
 80016d8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80016da:	2b04      	cmp	r3, #4
 80016dc:	d830      	bhi.n	8001740 <HAL_RCCEx_PeriphCLKConfig+0xc4>
 80016de:	e8df f003 	tbb	[pc, r3]
 80016e2:	0f08      	.short	0x0f08
 80016e4:	0d29      	.short	0x0d29
 80016e6:	0d          	.byte	0x0d
 80016e7:	00          	.byte	0x00
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80016e8:	2102      	movs	r1, #2
 80016ea:	3024      	adds	r0, #36	; 0x24
 80016ec:	f7ff ff4e 	bl	800158c <RCCEx_PLL3_Config>
 80016f0:	e7ec      	b.n	80016cc <HAL_RCCEx_PeriphCLKConfig+0x50>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80016f2:	4a8c      	ldr	r2, [pc, #560]	; (8001924 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80016f4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80016f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016fa:	62d3      	str	r3, [r2, #44]	; 0x2c
    switch(PeriphClkInit->Sai1ClockSelection)
 80016fc:	4635      	mov	r5, r6
 80016fe:	e004      	b.n	800170a <HAL_RCCEx_PeriphCLKConfig+0x8e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8001700:	2100      	movs	r1, #0
 8001702:	1d20      	adds	r0, r4, #4
 8001704:	f7ff feca 	bl	800149c <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8001708:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800170a:	b9e5      	cbnz	r5, 8001746 <HAL_RCCEx_PeriphCLKConfig+0xca>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800170c:	4a85      	ldr	r2, [pc, #532]	; (8001924 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 800170e:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8001710:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8001712:	f023 0307 	bic.w	r3, r3, #7
 8001716:	430b      	orrs	r3, r1
 8001718:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800171a:	6823      	ldr	r3, [r4, #0]
 800171c:	0598      	lsls	r0, r3, #22
 800171e:	d521      	bpl.n	8001764 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    switch(PeriphClkInit->Sai23ClockSelection)
 8001720:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001722:	2b80      	cmp	r3, #128	; 0x80
 8001724:	d03b      	beq.n	800179e <HAL_RCCEx_PeriphCLKConfig+0x122>
 8001726:	d810      	bhi.n	800174a <HAL_RCCEx_PeriphCLKConfig+0xce>
 8001728:	b36b      	cbz	r3, 8001786 <HAL_RCCEx_PeriphCLKConfig+0x10a>
 800172a:	2b40      	cmp	r3, #64	; 0x40
 800172c:	d031      	beq.n	8001792 <HAL_RCCEx_PeriphCLKConfig+0x116>
      ret = HAL_ERROR;
 800172e:	2601      	movs	r6, #1
 8001730:	4635      	mov	r5, r6
 8001732:	e017      	b.n	8001764 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8001734:	2100      	movs	r1, #0
 8001736:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800173a:	f7ff ff27 	bl	800158c <RCCEx_PLL3_Config>
 800173e:	e7e3      	b.n	8001708 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      ret = HAL_ERROR;
 8001740:	2601      	movs	r6, #1
 8001742:	4635      	mov	r5, r6
 8001744:	e7e9      	b.n	800171a <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8001746:	462e      	mov	r6, r5
 8001748:	e7e7      	b.n	800171a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    switch(PeriphClkInit->Sai23ClockSelection)
 800174a:	2bc0      	cmp	r3, #192	; 0xc0
 800174c:	d002      	beq.n	8001754 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 800174e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001752:	d1ec      	bne.n	800172e <HAL_RCCEx_PeriphCLKConfig+0xb2>
    if(ret == HAL_OK)
 8001754:	bb4d      	cbnz	r5, 80017aa <HAL_RCCEx_PeriphCLKConfig+0x12e>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8001756:	4a73      	ldr	r2, [pc, #460]	; (8001924 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8001758:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800175a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800175c:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 8001760:	430b      	orrs	r3, r1
 8001762:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8001764:	6823      	ldr	r3, [r4, #0]
 8001766:	0559      	lsls	r1, r3, #21
 8001768:	d530      	bpl.n	80017cc <HAL_RCCEx_PeriphCLKConfig+0x150>
    switch(PeriphClkInit->Sai4AClockSelection)
 800176a:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 800176e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001772:	d047      	beq.n	8001804 <HAL_RCCEx_PeriphCLKConfig+0x188>
 8001774:	d81b      	bhi.n	80017ae <HAL_RCCEx_PeriphCLKConfig+0x132>
 8001776:	2b00      	cmp	r3, #0
 8001778:	d038      	beq.n	80017ec <HAL_RCCEx_PeriphCLKConfig+0x170>
 800177a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800177e:	d03b      	beq.n	80017f8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
      ret = HAL_ERROR;
 8001780:	2601      	movs	r6, #1
 8001782:	4635      	mov	r5, r6
 8001784:	e022      	b.n	80017cc <HAL_RCCEx_PeriphCLKConfig+0x150>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001786:	4a67      	ldr	r2, [pc, #412]	; (8001924 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8001788:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800178a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800178e:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8001790:	e7e0      	b.n	8001754 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8001792:	2100      	movs	r1, #0
 8001794:	1d20      	adds	r0, r4, #4
 8001796:	f7ff fe81 	bl	800149c <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800179a:	4605      	mov	r5, r0
      break;
 800179c:	e7da      	b.n	8001754 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800179e:	2100      	movs	r1, #0
 80017a0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80017a4:	f7ff fef2 	bl	800158c <RCCEx_PLL3_Config>
 80017a8:	e7f7      	b.n	800179a <HAL_RCCEx_PeriphCLKConfig+0x11e>
 80017aa:	462e      	mov	r6, r5
 80017ac:	e7da      	b.n	8001764 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    switch(PeriphClkInit->Sai4AClockSelection)
 80017ae:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80017b2:	d002      	beq.n	80017ba <HAL_RCCEx_PeriphCLKConfig+0x13e>
 80017b4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80017b8:	d1e2      	bne.n	8001780 <HAL_RCCEx_PeriphCLKConfig+0x104>
    if(ret == HAL_OK)
 80017ba:	bb4d      	cbnz	r5, 8001810 <HAL_RCCEx_PeriphCLKConfig+0x194>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80017bc:	4a59      	ldr	r2, [pc, #356]	; (8001924 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80017be:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 80017c2:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80017c4:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 80017c8:	430b      	orrs	r3, r1
 80017ca:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80017cc:	6823      	ldr	r3, [r4, #0]
 80017ce:	051a      	lsls	r2, r3, #20
 80017d0:	d52f      	bpl.n	8001832 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    switch(PeriphClkInit->Sai4BClockSelection)
 80017d2:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 80017d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80017da:	d041      	beq.n	8001860 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80017dc:	d81a      	bhi.n	8001814 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80017de:	b39b      	cbz	r3, 8001848 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80017e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017e4:	d036      	beq.n	8001854 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      ret = HAL_ERROR;
 80017e6:	2601      	movs	r6, #1
 80017e8:	4635      	mov	r5, r6
 80017ea:	e022      	b.n	8001832 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80017ec:	4a4d      	ldr	r2, [pc, #308]	; (8001924 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80017ee:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80017f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017f4:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 80017f6:	e7e0      	b.n	80017ba <HAL_RCCEx_PeriphCLKConfig+0x13e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80017f8:	2100      	movs	r1, #0
 80017fa:	1d20      	adds	r0, r4, #4
 80017fc:	f7ff fe4e 	bl	800149c <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8001800:	4605      	mov	r5, r0
      break;
 8001802:	e7da      	b.n	80017ba <HAL_RCCEx_PeriphCLKConfig+0x13e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8001804:	2100      	movs	r1, #0
 8001806:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800180a:	f7ff febf 	bl	800158c <RCCEx_PLL3_Config>
 800180e:	e7f7      	b.n	8001800 <HAL_RCCEx_PeriphCLKConfig+0x184>
 8001810:	462e      	mov	r6, r5
 8001812:	e7db      	b.n	80017cc <HAL_RCCEx_PeriphCLKConfig+0x150>
    switch(PeriphClkInit->Sai4BClockSelection)
 8001814:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001818:	d002      	beq.n	8001820 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800181a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800181e:	d1e2      	bne.n	80017e6 <HAL_RCCEx_PeriphCLKConfig+0x16a>
    if(ret == HAL_OK)
 8001820:	bb25      	cbnz	r5, 800186c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8001822:	4a40      	ldr	r2, [pc, #256]	; (8001924 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8001824:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 8001828:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800182a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800182e:	430b      	orrs	r3, r1
 8001830:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8001832:	6823      	ldr	r3, [r4, #0]
 8001834:	019b      	lsls	r3, r3, #6
 8001836:	d527      	bpl.n	8001888 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    switch(PeriphClkInit->QspiClockSelection)
 8001838:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800183a:	2b10      	cmp	r3, #16
 800183c:	d033      	beq.n	80018a6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800183e:	d817      	bhi.n	8001870 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
 8001840:	b1d3      	cbz	r3, 8001878 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
      ret = HAL_ERROR;
 8001842:	2601      	movs	r6, #1
 8001844:	4635      	mov	r5, r6
 8001846:	e01f      	b.n	8001888 <HAL_RCCEx_PeriphCLKConfig+0x20c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001848:	4a36      	ldr	r2, [pc, #216]	; (8001924 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 800184a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800184c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001850:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8001852:	e7e5      	b.n	8001820 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8001854:	2100      	movs	r1, #0
 8001856:	1d20      	adds	r0, r4, #4
 8001858:	f7ff fe20 	bl	800149c <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800185c:	4605      	mov	r5, r0
      break;
 800185e:	e7df      	b.n	8001820 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8001860:	2100      	movs	r1, #0
 8001862:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001866:	f7ff fe91 	bl	800158c <RCCEx_PLL3_Config>
 800186a:	e7f7      	b.n	800185c <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 800186c:	462e      	mov	r6, r5
 800186e:	e7e0      	b.n	8001832 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    switch(PeriphClkInit->QspiClockSelection)
 8001870:	2b20      	cmp	r3, #32
 8001872:	d01e      	beq.n	80018b2 <HAL_RCCEx_PeriphCLKConfig+0x236>
 8001874:	2b30      	cmp	r3, #48	; 0x30
 8001876:	d1e4      	bne.n	8001842 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    if(ret == HAL_OK)
 8001878:	bb0d      	cbnz	r5, 80018be <HAL_RCCEx_PeriphCLKConfig+0x242>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800187a:	4a2a      	ldr	r2, [pc, #168]	; (8001924 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 800187c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800187e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8001880:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001884:	430b      	orrs	r3, r1
 8001886:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8001888:	6823      	ldr	r3, [r4, #0]
 800188a:	04df      	lsls	r7, r3, #19
 800188c:	d527      	bpl.n	80018de <HAL_RCCEx_PeriphCLKConfig+0x262>
    switch(PeriphClkInit->Spi123ClockSelection)
 800188e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001890:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001894:	d03e      	beq.n	8001914 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8001896:	d814      	bhi.n	80018c2 <HAL_RCCEx_PeriphCLKConfig+0x246>
 8001898:	b383      	cbz	r3, 80018fc <HAL_RCCEx_PeriphCLKConfig+0x280>
 800189a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800189e:	d033      	beq.n	8001908 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      ret = HAL_ERROR;
 80018a0:	2601      	movs	r6, #1
 80018a2:	4635      	mov	r5, r6
 80018a4:	e01b      	b.n	80018de <HAL_RCCEx_PeriphCLKConfig+0x262>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80018a6:	4a1f      	ldr	r2, [pc, #124]	; (8001924 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80018a8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80018aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018ae:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 80018b0:	e7e2      	b.n	8001878 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80018b2:	2102      	movs	r1, #2
 80018b4:	1d20      	adds	r0, r4, #4
 80018b6:	f7ff fdf1 	bl	800149c <RCCEx_PLL2_Config>
 80018ba:	4605      	mov	r5, r0
      break;
 80018bc:	e7dc      	b.n	8001878 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
 80018be:	462e      	mov	r6, r5
 80018c0:	e7e2      	b.n	8001888 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    switch(PeriphClkInit->Spi123ClockSelection)
 80018c2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80018c6:	d002      	beq.n	80018ce <HAL_RCCEx_PeriphCLKConfig+0x252>
 80018c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80018cc:	d1e8      	bne.n	80018a0 <HAL_RCCEx_PeriphCLKConfig+0x224>
    if(ret == HAL_OK)
 80018ce:	bb3d      	cbnz	r5, 8001920 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80018d0:	4a14      	ldr	r2, [pc, #80]	; (8001924 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80018d2:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80018d4:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80018d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80018da:	430b      	orrs	r3, r1
 80018dc:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80018de:	6823      	ldr	r3, [r4, #0]
 80018e0:	0498      	lsls	r0, r3, #18
 80018e2:	d532      	bpl.n	800194a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    switch(PeriphClkInit->Spi45ClockSelection)
 80018e4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80018e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80018ea:	d044      	beq.n	8001976 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 80018ec:	d81c      	bhi.n	8001928 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 80018ee:	b323      	cbz	r3, 800193a <HAL_RCCEx_PeriphCLKConfig+0x2be>
 80018f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018f4:	d039      	beq.n	800196a <HAL_RCCEx_PeriphCLKConfig+0x2ee>
      ret = HAL_ERROR;
 80018f6:	2601      	movs	r6, #1
 80018f8:	4635      	mov	r5, r6
 80018fa:	e026      	b.n	800194a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80018fc:	4a09      	ldr	r2, [pc, #36]	; (8001924 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80018fe:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001900:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001904:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8001906:	e7e2      	b.n	80018ce <HAL_RCCEx_PeriphCLKConfig+0x252>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8001908:	2100      	movs	r1, #0
 800190a:	1d20      	adds	r0, r4, #4
 800190c:	f7ff fdc6 	bl	800149c <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8001910:	4605      	mov	r5, r0
      break;
 8001912:	e7dc      	b.n	80018ce <HAL_RCCEx_PeriphCLKConfig+0x252>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8001914:	2100      	movs	r1, #0
 8001916:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800191a:	f7ff fe37 	bl	800158c <RCCEx_PLL3_Config>
 800191e:	e7f7      	b.n	8001910 <HAL_RCCEx_PeriphCLKConfig+0x294>
 8001920:	462e      	mov	r6, r5
 8001922:	e7dc      	b.n	80018de <HAL_RCCEx_PeriphCLKConfig+0x262>
 8001924:	58024400 	.word	0x58024400
    switch(PeriphClkInit->Spi45ClockSelection)
 8001928:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800192c:	d005      	beq.n	800193a <HAL_RCCEx_PeriphCLKConfig+0x2be>
 800192e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001932:	d002      	beq.n	800193a <HAL_RCCEx_PeriphCLKConfig+0x2be>
 8001934:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001938:	d1dd      	bne.n	80018f6 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    if(ret == HAL_OK)
 800193a:	bb15      	cbnz	r5, 8001982 <HAL_RCCEx_PeriphCLKConfig+0x306>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800193c:	4aa0      	ldr	r2, [pc, #640]	; (8001bc0 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 800193e:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8001940:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8001942:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8001946:	430b      	orrs	r3, r1
 8001948:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800194a:	6823      	ldr	r3, [r4, #0]
 800194c:	0459      	lsls	r1, r3, #17
 800194e:	d52d      	bpl.n	80019ac <HAL_RCCEx_PeriphCLKConfig+0x330>
    switch(PeriphClkInit->Spi6ClockSelection)
 8001950:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 8001954:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001958:	d04b      	beq.n	80019f2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800195a:	d814      	bhi.n	8001986 <HAL_RCCEx_PeriphCLKConfig+0x30a>
 800195c:	b1e3      	cbz	r3, 8001998 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 800195e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001962:	d040      	beq.n	80019e6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
      ret = HAL_ERROR;
 8001964:	2601      	movs	r6, #1
 8001966:	4635      	mov	r5, r6
 8001968:	e020      	b.n	80019ac <HAL_RCCEx_PeriphCLKConfig+0x330>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800196a:	2101      	movs	r1, #1
 800196c:	1d20      	adds	r0, r4, #4
 800196e:	f7ff fd95 	bl	800149c <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8001972:	4605      	mov	r5, r0
      break;
 8001974:	e7e1      	b.n	800193a <HAL_RCCEx_PeriphCLKConfig+0x2be>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8001976:	2101      	movs	r1, #1
 8001978:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800197c:	f7ff fe06 	bl	800158c <RCCEx_PLL3_Config>
 8001980:	e7f7      	b.n	8001972 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
 8001982:	462e      	mov	r6, r5
 8001984:	e7e1      	b.n	800194a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    switch(PeriphClkInit->Spi6ClockSelection)
 8001986:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800198a:	d005      	beq.n	8001998 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 800198c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001990:	d002      	beq.n	8001998 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8001992:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8001996:	d1e5      	bne.n	8001964 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    if(ret == HAL_OK)
 8001998:	2d00      	cmp	r5, #0
 800199a:	d130      	bne.n	80019fe <HAL_RCCEx_PeriphCLKConfig+0x382>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800199c:	4a88      	ldr	r2, [pc, #544]	; (8001bc0 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 800199e:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 80019a2:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80019a4:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 80019a8:	430b      	orrs	r3, r1
 80019aa:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80019ac:	6823      	ldr	r3, [r4, #0]
 80019ae:	041a      	lsls	r2, r3, #16
 80019b0:	d50f      	bpl.n	80019d2 <HAL_RCCEx_PeriphCLKConfig+0x356>
    switch(PeriphClkInit->FdcanClockSelection)
 80019b2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80019b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80019b8:	d023      	beq.n	8001a02 <HAL_RCCEx_PeriphCLKConfig+0x386>
 80019ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80019be:	d026      	beq.n	8001a0e <HAL_RCCEx_PeriphCLKConfig+0x392>
 80019c0:	bb5b      	cbnz	r3, 8001a1a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    if(ret == HAL_OK)
 80019c2:	bb6d      	cbnz	r5, 8001a20 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80019c4:	4a7e      	ldr	r2, [pc, #504]	; (8001bc0 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 80019c6:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80019c8:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80019ca:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80019ce:	430b      	orrs	r3, r1
 80019d0:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80019d2:	6823      	ldr	r3, [r4, #0]
 80019d4:	01db      	lsls	r3, r3, #7
 80019d6:	d533      	bpl.n	8001a40 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
    switch(PeriphClkInit->FmcClockSelection)
 80019d8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80019da:	2b03      	cmp	r3, #3
 80019dc:	d87d      	bhi.n	8001ada <HAL_RCCEx_PeriphCLKConfig+0x45e>
 80019de:	e8df f003 	tbb	[pc, r3]
 80019e2:	2126      	.short	0x2126
 80019e4:	2676      	.short	0x2676
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80019e6:	2101      	movs	r1, #1
 80019e8:	1d20      	adds	r0, r4, #4
 80019ea:	f7ff fd57 	bl	800149c <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80019ee:	4605      	mov	r5, r0
      break;
 80019f0:	e7d2      	b.n	8001998 <HAL_RCCEx_PeriphCLKConfig+0x31c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80019f2:	2101      	movs	r1, #1
 80019f4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80019f8:	f7ff fdc8 	bl	800158c <RCCEx_PLL3_Config>
 80019fc:	e7f7      	b.n	80019ee <HAL_RCCEx_PeriphCLKConfig+0x372>
 80019fe:	462e      	mov	r6, r5
 8001a00:	e7d4      	b.n	80019ac <HAL_RCCEx_PeriphCLKConfig+0x330>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001a02:	4a6f      	ldr	r2, [pc, #444]	; (8001bc0 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 8001a04:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001a06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a0a:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8001a0c:	e7d9      	b.n	80019c2 <HAL_RCCEx_PeriphCLKConfig+0x346>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8001a0e:	2101      	movs	r1, #1
 8001a10:	1d20      	adds	r0, r4, #4
 8001a12:	f7ff fd43 	bl	800149c <RCCEx_PLL2_Config>
 8001a16:	4605      	mov	r5, r0
      break;
 8001a18:	e7d3      	b.n	80019c2 <HAL_RCCEx_PeriphCLKConfig+0x346>
      ret = HAL_ERROR;
 8001a1a:	2601      	movs	r6, #1
 8001a1c:	4635      	mov	r5, r6
 8001a1e:	e7d8      	b.n	80019d2 <HAL_RCCEx_PeriphCLKConfig+0x356>
 8001a20:	462e      	mov	r6, r5
 8001a22:	e7d6      	b.n	80019d2 <HAL_RCCEx_PeriphCLKConfig+0x356>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001a24:	4a66      	ldr	r2, [pc, #408]	; (8001bc0 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 8001a26:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001a28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a2c:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8001a2e:	2d00      	cmp	r5, #0
 8001a30:	d156      	bne.n	8001ae0 <HAL_RCCEx_PeriphCLKConfig+0x464>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8001a32:	4a63      	ldr	r2, [pc, #396]	; (8001bc0 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 8001a34:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001a36:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8001a38:	f023 0303 	bic.w	r3, r3, #3
 8001a3c:	430b      	orrs	r3, r1
 8001a3e:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001a40:	6823      	ldr	r3, [r4, #0]
 8001a42:	025f      	lsls	r7, r3, #9
 8001a44:	d556      	bpl.n	8001af4 <HAL_RCCEx_PeriphCLKConfig+0x478>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a46:	4f5f      	ldr	r7, [pc, #380]	; (8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a4e:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 8001a50:	f7fe fe86 	bl	8000760 <HAL_GetTick>
 8001a54:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	05d8      	lsls	r0, r3, #23
 8001a5a:	d543      	bpl.n	8001ae4 <HAL_RCCEx_PeriphCLKConfig+0x468>
    if(ret == HAL_OK)
 8001a5c:	2d00      	cmp	r5, #0
 8001a5e:	d161      	bne.n	8001b24 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8001a60:	4b57      	ldr	r3, [pc, #348]	; (8001bc0 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 8001a62:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 8001a66:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001a68:	4042      	eors	r2, r0
 8001a6a:	f412 7f40 	tst.w	r2, #768	; 0x300
 8001a6e:	d00b      	beq.n	8001a88 <HAL_RCCEx_PeriphCLKConfig+0x40c>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001a70:	6f1a      	ldr	r2, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 8001a72:	6f19      	ldr	r1, [r3, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001a74:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8001a78:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8001a7c:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001a7e:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8001a80:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8001a84:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 8001a86:	671a      	str	r2, [r3, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8001a88:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8001a8c:	d108      	bne.n	8001aa0 <HAL_RCCEx_PeriphCLKConfig+0x424>
        tickstart = HAL_GetTick();
 8001a8e:	f7fe fe67 	bl	8000760 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001a92:	4f4b      	ldr	r7, [pc, #300]	; (8001bc0 <HAL_RCCEx_PeriphCLKConfig+0x544>)
        tickstart = HAL_GetTick();
 8001a94:	4680      	mov	r8, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a96:	f241 3988 	movw	r9, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001a9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001a9c:	0799      	lsls	r1, r3, #30
 8001a9e:	d536      	bpl.n	8001b0e <HAL_RCCEx_PeriphCLKConfig+0x492>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001aa0:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8001aa4:	4946      	ldr	r1, [pc, #280]	; (8001bc0 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 8001aa6:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8001aaa:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8001aae:	d135      	bne.n	8001b1c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8001ab0:	6908      	ldr	r0, [r1, #16]
 8001ab2:	4a45      	ldr	r2, [pc, #276]	; (8001bc8 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8001ab4:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
 8001ab8:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 8001abc:	4302      	orrs	r2, r0
 8001abe:	610a      	str	r2, [r1, #16]
 8001ac0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ac4:	4a3e      	ldr	r2, [pc, #248]	; (8001bc0 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 8001ac6:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8001ac8:	430b      	orrs	r3, r1
 8001aca:	6713      	str	r3, [r2, #112]	; 0x70
 8001acc:	e012      	b.n	8001af4 <HAL_RCCEx_PeriphCLKConfig+0x478>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8001ace:	2102      	movs	r1, #2
 8001ad0:	1d20      	adds	r0, r4, #4
 8001ad2:	f7ff fce3 	bl	800149c <RCCEx_PLL2_Config>
 8001ad6:	4605      	mov	r5, r0
      break;
 8001ad8:	e7a9      	b.n	8001a2e <HAL_RCCEx_PeriphCLKConfig+0x3b2>
      ret = HAL_ERROR;
 8001ada:	2601      	movs	r6, #1
 8001adc:	4635      	mov	r5, r6
 8001ade:	e7af      	b.n	8001a40 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 8001ae0:	462e      	mov	r6, r5
 8001ae2:	e7ad      	b.n	8001a40 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ae4:	f7fe fe3c 	bl	8000760 <HAL_GetTick>
 8001ae8:	eba0 0008 	sub.w	r0, r0, r8
 8001aec:	2864      	cmp	r0, #100	; 0x64
 8001aee:	d9b2      	bls.n	8001a56 <HAL_RCCEx_PeriphCLKConfig+0x3da>
        ret = HAL_TIMEOUT;
 8001af0:	2603      	movs	r6, #3
 8001af2:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8001af4:	6823      	ldr	r3, [r4, #0]
 8001af6:	07da      	lsls	r2, r3, #31
 8001af8:	d524      	bpl.n	8001b44 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
    switch(PeriphClkInit->Usart16ClockSelection)
 8001afa:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8001afc:	2b10      	cmp	r3, #16
 8001afe:	d032      	beq.n	8001b66 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
 8001b00:	d812      	bhi.n	8001b28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
 8001b02:	b1bb      	cbz	r3, 8001b34 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
 8001b04:	2b08      	cmp	r3, #8
 8001b06:	d028      	beq.n	8001b5a <HAL_RCCEx_PeriphCLKConfig+0x4de>
      ret = HAL_ERROR;
 8001b08:	2601      	movs	r6, #1
 8001b0a:	4635      	mov	r5, r6
 8001b0c:	e01a      	b.n	8001b44 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b0e:	f7fe fe27 	bl	8000760 <HAL_GetTick>
 8001b12:	eba0 0008 	sub.w	r0, r0, r8
 8001b16:	4548      	cmp	r0, r9
 8001b18:	d9bf      	bls.n	8001a9a <HAL_RCCEx_PeriphCLKConfig+0x41e>
 8001b1a:	e7e9      	b.n	8001af0 <HAL_RCCEx_PeriphCLKConfig+0x474>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001b1c:	690a      	ldr	r2, [r1, #16]
 8001b1e:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8001b22:	e7cc      	b.n	8001abe <HAL_RCCEx_PeriphCLKConfig+0x442>
 8001b24:	462e      	mov	r6, r5
 8001b26:	e7e5      	b.n	8001af4 <HAL_RCCEx_PeriphCLKConfig+0x478>
    switch(PeriphClkInit->Usart16ClockSelection)
 8001b28:	2b20      	cmp	r3, #32
 8001b2a:	d003      	beq.n	8001b34 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
 8001b2c:	2b28      	cmp	r3, #40	; 0x28
 8001b2e:	d001      	beq.n	8001b34 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
 8001b30:	2b18      	cmp	r3, #24
 8001b32:	d1e9      	bne.n	8001b08 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    if(ret == HAL_OK)
 8001b34:	b9ed      	cbnz	r5, 8001b72 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8001b36:	4a22      	ldr	r2, [pc, #136]	; (8001bc0 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 8001b38:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8001b3a:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8001b3c:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8001b40:	430b      	orrs	r3, r1
 8001b42:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8001b44:	6823      	ldr	r3, [r4, #0]
 8001b46:	079b      	lsls	r3, r3, #30
 8001b48:	d522      	bpl.n	8001b90 <HAL_RCCEx_PeriphCLKConfig+0x514>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8001b4a:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8001b4c:	2b05      	cmp	r3, #5
 8001b4e:	d831      	bhi.n	8001bb4 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8001b50:	e8df f003 	tbb	[pc, r3]
 8001b54:	162a1116 	.word	0x162a1116
 8001b58:	1616      	.short	0x1616
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8001b5a:	2101      	movs	r1, #1
 8001b5c:	1d20      	adds	r0, r4, #4
 8001b5e:	f7ff fc9d 	bl	800149c <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8001b62:	4605      	mov	r5, r0
      break;
 8001b64:	e7e6      	b.n	8001b34 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8001b66:	2101      	movs	r1, #1
 8001b68:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001b6c:	f7ff fd0e 	bl	800158c <RCCEx_PLL3_Config>
 8001b70:	e7f7      	b.n	8001b62 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8001b72:	462e      	mov	r6, r5
 8001b74:	e7e6      	b.n	8001b44 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8001b76:	2101      	movs	r1, #1
 8001b78:	1d20      	adds	r0, r4, #4
 8001b7a:	f7ff fc8f 	bl	800149c <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8001b7e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8001b80:	b9dd      	cbnz	r5, 8001bba <HAL_RCCEx_PeriphCLKConfig+0x53e>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8001b82:	4a0f      	ldr	r2, [pc, #60]	; (8001bc0 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 8001b84:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8001b86:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8001b88:	f023 0307 	bic.w	r3, r3, #7
 8001b8c:	430b      	orrs	r3, r1
 8001b8e:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001b90:	6823      	ldr	r3, [r4, #0]
 8001b92:	075f      	lsls	r7, r3, #29
 8001b94:	d528      	bpl.n	8001be8 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8001b96:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001b9a:	2b05      	cmp	r3, #5
 8001b9c:	d83a      	bhi.n	8001c14 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8001b9e:	e8df f003 	tbb	[pc, r3]
 8001ba2:	151a      	.short	0x151a
 8001ba4:	1a1a1a33 	.word	0x1a1a1a33
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8001ba8:	2101      	movs	r1, #1
 8001baa:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001bae:	f7ff fced 	bl	800158c <RCCEx_PLL3_Config>
 8001bb2:	e7e4      	b.n	8001b7e <HAL_RCCEx_PeriphCLKConfig+0x502>
      ret = HAL_ERROR;
 8001bb4:	2601      	movs	r6, #1
 8001bb6:	4635      	mov	r5, r6
 8001bb8:	e7ea      	b.n	8001b90 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8001bba:	462e      	mov	r6, r5
 8001bbc:	e7e8      	b.n	8001b90 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8001bbe:	bf00      	nop
 8001bc0:	58024400 	.word	0x58024400
 8001bc4:	58024800 	.word	0x58024800
 8001bc8:	00ffffcf 	.word	0x00ffffcf
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8001bcc:	2101      	movs	r1, #1
 8001bce:	1d20      	adds	r0, r4, #4
 8001bd0:	f7ff fc64 	bl	800149c <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8001bd4:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8001bd6:	bb05      	cbnz	r5, 8001c1a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001bd8:	4a97      	ldr	r2, [pc, #604]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x7bc>)
 8001bda:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8001bde:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8001be0:	f023 0307 	bic.w	r3, r3, #7
 8001be4:	430b      	orrs	r3, r1
 8001be6:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001be8:	6823      	ldr	r3, [r4, #0]
 8001bea:	0698      	lsls	r0, r3, #26
 8001bec:	d529      	bpl.n	8001c42 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8001bee:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8001bf2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001bf6:	d03a      	beq.n	8001c6e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8001bf8:	d811      	bhi.n	8001c1e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8001bfa:	b1cb      	cbz	r3, 8001c30 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8001bfc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001c00:	d02f      	beq.n	8001c62 <HAL_RCCEx_PeriphCLKConfig+0x5e6>
      ret = HAL_ERROR;
 8001c02:	2601      	movs	r6, #1
 8001c04:	4635      	mov	r5, r6
 8001c06:	e01c      	b.n	8001c42 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8001c08:	2101      	movs	r1, #1
 8001c0a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001c0e:	f7ff fcbd 	bl	800158c <RCCEx_PLL3_Config>
 8001c12:	e7df      	b.n	8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x558>
      ret = HAL_ERROR;
 8001c14:	2601      	movs	r6, #1
 8001c16:	4635      	mov	r5, r6
 8001c18:	e7e6      	b.n	8001be8 <HAL_RCCEx_PeriphCLKConfig+0x56c>
 8001c1a:	462e      	mov	r6, r5
 8001c1c:	e7e4      	b.n	8001be8 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8001c1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c22:	d005      	beq.n	8001c30 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8001c24:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c28:	d002      	beq.n	8001c30 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8001c2a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8001c2e:	d1e8      	bne.n	8001c02 <HAL_RCCEx_PeriphCLKConfig+0x586>
    if(ret == HAL_OK)
 8001c30:	bb1d      	cbnz	r5, 8001c7a <HAL_RCCEx_PeriphCLKConfig+0x5fe>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001c32:	4a81      	ldr	r2, [pc, #516]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x7bc>)
 8001c34:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8001c38:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8001c3a:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8001c3e:	430b      	orrs	r3, r1
 8001c40:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8001c42:	6823      	ldr	r3, [r4, #0]
 8001c44:	0659      	lsls	r1, r3, #25
 8001c46:	d52c      	bpl.n	8001ca2 <HAL_RCCEx_PeriphCLKConfig+0x626>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8001c48:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8001c4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001c50:	d03f      	beq.n	8001cd2 <HAL_RCCEx_PeriphCLKConfig+0x656>
 8001c52:	d814      	bhi.n	8001c7e <HAL_RCCEx_PeriphCLKConfig+0x602>
 8001c54:	b1e3      	cbz	r3, 8001c90 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8001c56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c5a:	d034      	beq.n	8001cc6 <HAL_RCCEx_PeriphCLKConfig+0x64a>
      ret = HAL_ERROR;
 8001c5c:	2601      	movs	r6, #1
 8001c5e:	4635      	mov	r5, r6
 8001c60:	e01f      	b.n	8001ca2 <HAL_RCCEx_PeriphCLKConfig+0x626>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8001c62:	2100      	movs	r1, #0
 8001c64:	1d20      	adds	r0, r4, #4
 8001c66:	f7ff fc19 	bl	800149c <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8001c6a:	4605      	mov	r5, r0
      break;
 8001c6c:	e7e0      	b.n	8001c30 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8001c6e:	2102      	movs	r1, #2
 8001c70:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001c74:	f7ff fc8a 	bl	800158c <RCCEx_PLL3_Config>
 8001c78:	e7f7      	b.n	8001c6a <HAL_RCCEx_PeriphCLKConfig+0x5ee>
 8001c7a:	462e      	mov	r6, r5
 8001c7c:	e7e1      	b.n	8001c42 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8001c7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c82:	d005      	beq.n	8001c90 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8001c84:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8001c88:	d002      	beq.n	8001c90 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8001c8a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8001c8e:	d1e5      	bne.n	8001c5c <HAL_RCCEx_PeriphCLKConfig+0x5e0>
    if(ret == HAL_OK)
 8001c90:	bb2d      	cbnz	r5, 8001cde <HAL_RCCEx_PeriphCLKConfig+0x662>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001c92:	4a69      	ldr	r2, [pc, #420]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x7bc>)
 8001c94:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 8001c98:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8001c9a:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001c9e:	430b      	orrs	r3, r1
 8001ca0:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8001ca2:	6823      	ldr	r3, [r4, #0]
 8001ca4:	061a      	lsls	r2, r3, #24
 8001ca6:	d52f      	bpl.n	8001d08 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8001ca8:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8001cac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001cb0:	f000 8095 	beq.w	8001dde <HAL_RCCEx_PeriphCLKConfig+0x762>
 8001cb4:	d815      	bhi.n	8001ce2 <HAL_RCCEx_PeriphCLKConfig+0x666>
 8001cb6:	b1eb      	cbz	r3, 8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8001cb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001cbc:	f000 8089 	beq.w	8001dd2 <HAL_RCCEx_PeriphCLKConfig+0x756>
      ret = HAL_ERROR;
 8001cc0:	2601      	movs	r6, #1
 8001cc2:	4635      	mov	r5, r6
 8001cc4:	e020      	b.n	8001d08 <HAL_RCCEx_PeriphCLKConfig+0x68c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8001cc6:	2100      	movs	r1, #0
 8001cc8:	1d20      	adds	r0, r4, #4
 8001cca:	f7ff fbe7 	bl	800149c <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8001cce:	4605      	mov	r5, r0
      break;
 8001cd0:	e7de      	b.n	8001c90 <HAL_RCCEx_PeriphCLKConfig+0x614>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8001cd2:	2102      	movs	r1, #2
 8001cd4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001cd8:	f7ff fc58 	bl	800158c <RCCEx_PLL3_Config>
 8001cdc:	e7f7      	b.n	8001cce <HAL_RCCEx_PeriphCLKConfig+0x652>
 8001cde:	462e      	mov	r6, r5
 8001ce0:	e7df      	b.n	8001ca2 <HAL_RCCEx_PeriphCLKConfig+0x626>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8001ce2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ce6:	d005      	beq.n	8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8001ce8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8001cec:	d002      	beq.n	8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8001cee:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8001cf2:	d1e5      	bne.n	8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x644>
    if(ret == HAL_OK)
 8001cf4:	2d00      	cmp	r5, #0
 8001cf6:	d178      	bne.n	8001dea <HAL_RCCEx_PeriphCLKConfig+0x76e>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8001cf8:	4a4f      	ldr	r2, [pc, #316]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x7bc>)
 8001cfa:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 8001cfe:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8001d00:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001d04:	430b      	orrs	r3, r1
 8001d06:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8001d08:	6823      	ldr	r3, [r4, #0]
 8001d0a:	071b      	lsls	r3, r3, #28
 8001d0c:	d50c      	bpl.n	8001d28 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8001d0e:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8001d12:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8001d16:	d16a      	bne.n	8001dee <HAL_RCCEx_PeriphCLKConfig+0x772>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8001d18:	2102      	movs	r1, #2
 8001d1a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001d1e:	f7ff fc35 	bl	800158c <RCCEx_PLL3_Config>
          status = HAL_ERROR;
 8001d22:	2800      	cmp	r0, #0
 8001d24:	bf18      	it	ne
 8001d26:	2601      	movne	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001d28:	6823      	ldr	r3, [r4, #0]
 8001d2a:	06df      	lsls	r7, r3, #27
 8001d2c:	d50c      	bpl.n	8001d48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8001d2e:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 8001d32:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8001d36:	d161      	bne.n	8001dfc <HAL_RCCEx_PeriphCLKConfig+0x780>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8001d38:	2102      	movs	r1, #2
 8001d3a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001d3e:	f7ff fc25 	bl	800158c <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 8001d42:	2800      	cmp	r0, #0
 8001d44:	bf18      	it	ne
 8001d46:	2601      	movne	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001d48:	6823      	ldr	r3, [r4, #0]
 8001d4a:	0318      	lsls	r0, r3, #12
 8001d4c:	d517      	bpl.n	8001d7e <HAL_RCCEx_PeriphCLKConfig+0x702>
    switch(PeriphClkInit->AdcClockSelection)
 8001d4e:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 8001d52:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8001d56:	d058      	beq.n	8001e0a <HAL_RCCEx_PeriphCLKConfig+0x78e>
 8001d58:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8001d5c:	d005      	beq.n	8001d6a <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8001d5e:	2900      	cmp	r1, #0
 8001d60:	d159      	bne.n	8001e16 <HAL_RCCEx_PeriphCLKConfig+0x79a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8001d62:	1d20      	adds	r0, r4, #4
 8001d64:	f7ff fb9a 	bl	800149c <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8001d68:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8001d6a:	2d00      	cmp	r5, #0
 8001d6c:	d156      	bne.n	8001e1c <HAL_RCCEx_PeriphCLKConfig+0x7a0>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001d6e:	4a32      	ldr	r2, [pc, #200]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x7bc>)
 8001d70:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 8001d74:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8001d76:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001d7a:	430b      	orrs	r3, r1
 8001d7c:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001d7e:	6823      	ldr	r3, [r4, #0]
 8001d80:	0359      	lsls	r1, r3, #13
 8001d82:	d519      	bpl.n	8001db8 <HAL_RCCEx_PeriphCLKConfig+0x73c>
    switch(PeriphClkInit->UsbClockSelection)
 8001d84:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8001d88:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001d8c:	d048      	beq.n	8001e20 <HAL_RCCEx_PeriphCLKConfig+0x7a4>
 8001d8e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8001d92:	d007      	beq.n	8001da4 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8001d94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001d98:	d149      	bne.n	8001e2e <HAL_RCCEx_PeriphCLKConfig+0x7b2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001d9a:	4a27      	ldr	r2, [pc, #156]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x7bc>)
 8001d9c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001d9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001da2:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8001da4:	2d00      	cmp	r5, #0
 8001da6:	d145      	bne.n	8001e34 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001da8:	4a23      	ldr	r2, [pc, #140]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x7bc>)
 8001daa:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8001dae:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8001db0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001db4:	430b      	orrs	r3, r1
 8001db6:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8001db8:	6823      	ldr	r3, [r4, #0]
 8001dba:	03da      	lsls	r2, r3, #15
 8001dbc:	d54c      	bpl.n	8001e58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>
    switch(PeriphClkInit->SdmmcClockSelection)
 8001dbe:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d03b      	beq.n	8001e3c <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 8001dc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dc8:	f000 8099 	beq.w	8001efe <HAL_RCCEx_PeriphCLKConfig+0x882>
      ret = HAL_ERROR;
 8001dcc:	2601      	movs	r6, #1
 8001dce:	4635      	mov	r5, r6
 8001dd0:	e042      	b.n	8001e58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8001dd2:	2100      	movs	r1, #0
 8001dd4:	1d20      	adds	r0, r4, #4
 8001dd6:	f7ff fb61 	bl	800149c <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8001dda:	4605      	mov	r5, r0
      break;
 8001ddc:	e78a      	b.n	8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8001dde:	2102      	movs	r1, #2
 8001de0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001de4:	f7ff fbd2 	bl	800158c <RCCEx_PLL3_Config>
 8001de8:	e7f7      	b.n	8001dda <HAL_RCCEx_PeriphCLKConfig+0x75e>
 8001dea:	462e      	mov	r6, r5
 8001dec:	e78c      	b.n	8001d08 <HAL_RCCEx_PeriphCLKConfig+0x68c>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8001dee:	4a12      	ldr	r2, [pc, #72]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x7bc>)
 8001df0:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8001df2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001df6:	430b      	orrs	r3, r1
 8001df8:	6553      	str	r3, [r2, #84]	; 0x54
 8001dfa:	e795      	b.n	8001d28 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001dfc:	4a0e      	ldr	r2, [pc, #56]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x7bc>)
 8001dfe:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8001e00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e04:	430b      	orrs	r3, r1
 8001e06:	6593      	str	r3, [r2, #88]	; 0x58
 8001e08:	e79e      	b.n	8001d48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8001e0a:	2102      	movs	r1, #2
 8001e0c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001e10:	f7ff fbbc 	bl	800158c <RCCEx_PLL3_Config>
 8001e14:	e7a8      	b.n	8001d68 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      ret = HAL_ERROR;
 8001e16:	2601      	movs	r6, #1
 8001e18:	4635      	mov	r5, r6
 8001e1a:	e7b0      	b.n	8001d7e <HAL_RCCEx_PeriphCLKConfig+0x702>
 8001e1c:	462e      	mov	r6, r5
 8001e1e:	e7ae      	b.n	8001d7e <HAL_RCCEx_PeriphCLKConfig+0x702>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8001e20:	2101      	movs	r1, #1
 8001e22:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001e26:	f7ff fbb1 	bl	800158c <RCCEx_PLL3_Config>
 8001e2a:	4605      	mov	r5, r0
      break;
 8001e2c:	e7ba      	b.n	8001da4 <HAL_RCCEx_PeriphCLKConfig+0x728>
      ret = HAL_ERROR;
 8001e2e:	2601      	movs	r6, #1
 8001e30:	4635      	mov	r5, r6
 8001e32:	e7c1      	b.n	8001db8 <HAL_RCCEx_PeriphCLKConfig+0x73c>
 8001e34:	462e      	mov	r6, r5
 8001e36:	e7bf      	b.n	8001db8 <HAL_RCCEx_PeriphCLKConfig+0x73c>
 8001e38:	58024400 	.word	0x58024400
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001e3c:	4a3c      	ldr	r2, [pc, #240]	; (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x8b4>)
 8001e3e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001e40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e44:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8001e46:	2d00      	cmp	r5, #0
 8001e48:	d15f      	bne.n	8001f0a <HAL_RCCEx_PeriphCLKConfig+0x88e>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8001e4a:	4a39      	ldr	r2, [pc, #228]	; (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x8b4>)
 8001e4c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8001e4e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8001e50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e54:	430b      	orrs	r3, r1
 8001e56:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8001e58:	6823      	ldr	r3, [r4, #0]
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	d507      	bpl.n	8001e6e <HAL_RCCEx_PeriphCLKConfig+0x7f2>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8001e5e:	2102      	movs	r1, #2
 8001e60:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001e64:	f7ff fb92 	bl	800158c <RCCEx_PLL3_Config>
      status=HAL_ERROR;
 8001e68:	2800      	cmp	r0, #0
 8001e6a:	bf18      	it	ne
 8001e6c:	2601      	movne	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8001e6e:	6823      	ldr	r3, [r4, #0]
 8001e70:	039f      	lsls	r7, r3, #14
 8001e72:	d50e      	bpl.n	8001e92 <HAL_RCCEx_PeriphCLKConfig+0x816>
    switch(PeriphClkInit->RngClockSelection)
 8001e74:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8001e76:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8001e7a:	d050      	beq.n	8001f1e <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 8001e7c:	d847      	bhi.n	8001f0e <HAL_RCCEx_PeriphCLKConfig+0x892>
 8001e7e:	2900      	cmp	r1, #0
 8001e80:	d14b      	bne.n	8001f1a <HAL_RCCEx_PeriphCLKConfig+0x89e>
    if(ret == HAL_OK)
 8001e82:	2d00      	cmp	r5, #0
 8001e84:	d151      	bne.n	8001f2a <HAL_RCCEx_PeriphCLKConfig+0x8ae>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001e86:	482a      	ldr	r0, [pc, #168]	; (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x8b4>)
 8001e88:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8001e8a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001e8e:	430a      	orrs	r2, r1
 8001e90:	6542      	str	r2, [r0, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8001e92:	02dd      	lsls	r5, r3, #11
 8001e94:	d506      	bpl.n	8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x828>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8001e96:	4926      	ldr	r1, [pc, #152]	; (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x8b4>)
 8001e98:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8001e9a:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8001e9c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001ea0:	4302      	orrs	r2, r0
 8001ea2:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8001ea4:	00d8      	lsls	r0, r3, #3
 8001ea6:	d507      	bpl.n	8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8001ea8:	4921      	ldr	r1, [pc, #132]	; (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x8b4>)
 8001eaa:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
 8001eae:	690a      	ldr	r2, [r1, #16]
 8001eb0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001eb4:	4302      	orrs	r2, r0
 8001eb6:	610a      	str	r2, [r1, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001eb8:	0299      	lsls	r1, r3, #10
 8001eba:	d506      	bpl.n	8001eca <HAL_RCCEx_PeriphCLKConfig+0x84e>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001ebc:	491c      	ldr	r1, [pc, #112]	; (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x8b4>)
 8001ebe:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8001ec0:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8001ec2:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8001ec6:	4302      	orrs	r2, r0
 8001ec8:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8001eca:	005a      	lsls	r2, r3, #1
 8001ecc:	d509      	bpl.n	8001ee2 <HAL_RCCEx_PeriphCLKConfig+0x866>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001ece:	4a18      	ldr	r2, [pc, #96]	; (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x8b4>)
 8001ed0:	6911      	ldr	r1, [r2, #16]
 8001ed2:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8001ed6:	6111      	str	r1, [r2, #16]
 8001ed8:	6911      	ldr	r1, [r2, #16]
 8001eda:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 8001ede:	4301      	orrs	r1, r0
 8001ee0:	6111      	str	r1, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	da06      	bge.n	8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x878>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8001ee6:	4a12      	ldr	r2, [pc, #72]	; (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x8b4>)
 8001ee8:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8001eea:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8001eec:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8001ef0:	430b      	orrs	r3, r1
 8001ef2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ef4:	1c30      	adds	r0, r6, #0
 8001ef6:	bf18      	it	ne
 8001ef8:	2001      	movne	r0, #1
}
 8001efa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8001efe:	2102      	movs	r1, #2
 8001f00:	1d20      	adds	r0, r4, #4
 8001f02:	f7ff facb 	bl	800149c <RCCEx_PLL2_Config>
 8001f06:	4605      	mov	r5, r0
      break;
 8001f08:	e79d      	b.n	8001e46 <HAL_RCCEx_PeriphCLKConfig+0x7ca>
 8001f0a:	462e      	mov	r6, r5
 8001f0c:	e7a4      	b.n	8001e58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>
    switch(PeriphClkInit->RngClockSelection)
 8001f0e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8001f12:	d0b6      	beq.n	8001e82 <HAL_RCCEx_PeriphCLKConfig+0x806>
 8001f14:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 8001f18:	d0b3      	beq.n	8001e82 <HAL_RCCEx_PeriphCLKConfig+0x806>
      ret = HAL_ERROR;
 8001f1a:	2601      	movs	r6, #1
 8001f1c:	e7b9      	b.n	8001e92 <HAL_RCCEx_PeriphCLKConfig+0x816>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001f1e:	4804      	ldr	r0, [pc, #16]	; (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x8b4>)
 8001f20:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8001f22:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001f26:	62c2      	str	r2, [r0, #44]	; 0x2c
      break;
 8001f28:	e7ab      	b.n	8001e82 <HAL_RCCEx_PeriphCLKConfig+0x806>
 8001f2a:	462e      	mov	r6, r5
 8001f2c:	e7b1      	b.n	8001e92 <HAL_RCCEx_PeriphCLKConfig+0x816>
 8001f2e:	bf00      	nop
 8001f30:	58024400 	.word	0x58024400

08001f34 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 8001f34:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8001f36:	f7ff fa77 	bl	8001428 <HAL_RCC_GetHCLKFreq>
 8001f3a:	4b05      	ldr	r3, [pc, #20]	; (8001f50 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 8001f3c:	4a05      	ldr	r2, [pc, #20]	; (8001f54 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 8001f3e:	6a1b      	ldr	r3, [r3, #32]
 8001f40:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8001f44:	5cd3      	ldrb	r3, [r2, r3]
 8001f46:	f003 031f 	and.w	r3, r3, #31
}
 8001f4a:	40d8      	lsrs	r0, r3
 8001f4c:	bd08      	pop	{r3, pc}
 8001f4e:	bf00      	nop
 8001f50:	58024400 	.word	0x58024400
 8001f54:	08006dda 	.word	0x08006dda

08001f58 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001f58:	494e      	ldr	r1, [pc, #312]	; (8002094 <HAL_RCCEx_GetPLL2ClockFreq+0x13c>)
{
 8001f5a:	b530      	push	{r4, r5, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001f5c:	6a8c      	ldr	r4, [r1, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12)  ;
 8001f5e:	6a8b      	ldr	r3, [r1, #40]	; 0x28
  pll2fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN;
 8001f60:	6aca      	ldr	r2, [r1, #44]	; 0x2c
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12)  ;
 8001f62:	f3c3 3305 	ubfx	r3, r3, #12, #6
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8001f66:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
  if (pll2m != 0U)
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	f000 808e 	beq.w	800208a <HAL_RCCEx_GetPLL2ClockFreq+0x132>
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8001f6e:	f3c5 05cc 	ubfx	r5, r5, #3, #13
  pll2fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN;
 8001f72:	f002 0210 	and.w	r2, r2, #16
 8001f76:	ed9f 5a48 	vldr	s10, [pc, #288]	; 8002098 <HAL_RCCEx_GetPLL2ClockFreq+0x140>
 8001f7a:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8001f7e:	436a      	muls	r2, r5
 8001f80:	ee07 2a90 	vmov	s15, r2
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001f84:	f004 0203 	and.w	r2, r4, #3
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8001f88:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
    switch (pllsource)
 8001f8c:	2a01      	cmp	r2, #1
 8001f8e:	ee07 3a90 	vmov	s15, r3
 8001f92:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001f96:	d002      	beq.n	8001f9e <HAL_RCCEx_GetPLL2ClockFreq+0x46>
 8001f98:	d30f      	bcc.n	8001fba <HAL_RCCEx_GetPLL2ClockFreq+0x62>
 8001f9a:	2a02      	cmp	r2, #2
 8001f9c:	d067      	beq.n	800206e <HAL_RCCEx_GetPLL2ClockFreq+0x116>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8001f9e:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 8001fa0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fa4:	ee07 3a90 	vmov	s15, r3
 8001fa8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fac:	eee6 7a05 	vfma.f32	s15, s12, s10
 8001fb0:	ed9f 6a3a 	vldr	s12, [pc, #232]	; 800209c <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 8001fb4:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8001fb8:	e056      	b.n	8002068 <HAL_RCCEx_GetPLL2ClockFreq+0x110>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001fba:	680b      	ldr	r3, [r1, #0]
 8001fbc:	069b      	lsls	r3, r3, #26
 8001fbe:	d546      	bpl.n	800204e <HAL_RCCEx_GetPLL2ClockFreq+0xf6>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001fc0:	680a      	ldr	r2, [r1, #0]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8001fc2:	6b8b      	ldr	r3, [r1, #56]	; 0x38
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001fc4:	f3c2 01c1 	ubfx	r1, r2, #3, #2
 8001fc8:	4a35      	ldr	r2, [pc, #212]	; (80020a0 <HAL_RCCEx_GetPLL2ClockFreq+0x148>)
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8001fca:	f3c3 0308 	ubfx	r3, r3, #0, #9
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001fce:	40ca      	lsrs	r2, r1
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8001fd0:	ee07 2a90 	vmov	s15, r2
 8001fd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fd8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001fdc:	ee07 3a90 	vmov	s15, r3
 8001fe0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fe4:	eee6 7a05 	vfma.f32	s15, s12, s10
 8001fe8:	ee77 7aa5 	vadd.f32	s15, s15, s11
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8001fec:	4a29      	ldr	r2, [pc, #164]	; (8002094 <HAL_RCCEx_GetPLL2ClockFreq+0x13c>)
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8001fee:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8001ff2:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8001ff4:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8001ff8:	ee07 3a10 	vmov	s14, r3
 8001ffc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002000:	ee37 7a25 	vadd.f32	s14, s14, s11
 8002004:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002008:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800200c:	edc0 6a00 	vstr	s13, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8002010:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8002012:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8002016:	ee07 3a10 	vmov	s14, r3
 800201a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800201e:	ee37 7a25 	vadd.f32	s14, s14, s11
 8002022:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002026:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800202a:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800202e:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8002030:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8002034:	ee07 3a10 	vmov	s14, r3
 8002038:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800203c:	ee77 5a25 	vadd.f32	s11, s14, s11
 8002040:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 8002044:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8002048:	ed80 7a02 	vstr	s14, [r0, #8]
 800204c:	bd30      	pop	{r4, r5, pc}
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800204e:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 8002050:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002054:	ee07 3a90 	vmov	s15, r3
 8002058:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800205c:	eee6 7a05 	vfma.f32	s15, s12, s10
 8002060:	ed9f 6a10 	vldr	s12, [pc, #64]	; 80020a4 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 8002064:	ee77 7aa5 	vadd.f32	s15, s15, s11
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8002068:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800206c:	e7be      	b.n	8001fec <HAL_RCCEx_GetPLL2ClockFreq+0x94>
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800206e:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 8002070:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002074:	ee07 3a90 	vmov	s15, r3
 8002078:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800207c:	eee6 7a05 	vfma.f32	s15, s12, s10
 8002080:	ed9f 6a09 	vldr	s12, [pc, #36]	; 80020a8 <HAL_RCCEx_GetPLL2ClockFreq+0x150>
 8002084:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8002088:	e7ee      	b.n	8002068 <HAL_RCCEx_GetPLL2ClockFreq+0x110>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800208a:	6003      	str	r3, [r0, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800208c:	6043      	str	r3, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800208e:	6083      	str	r3, [r0, #8]
 8002090:	bd30      	pop	{r4, r5, pc}
 8002092:	bf00      	nop
 8002094:	58024400 	.word	0x58024400
 8002098:	39000000 	.word	0x39000000
 800209c:	4a742400 	.word	0x4a742400
 80020a0:	03d09000 	.word	0x03d09000
 80020a4:	4c742400 	.word	0x4c742400
 80020a8:	4af42400 	.word	0x4af42400

080020ac <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80020ac:	494e      	ldr	r1, [pc, #312]	; (80021e8 <HAL_RCCEx_GetPLL3ClockFreq+0x13c>)
{
 80020ae:	b530      	push	{r4, r5, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80020b0:	6a8c      	ldr	r4, [r1, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80020b2:	6a8b      	ldr	r3, [r1, #40]	; 0x28
  pll3fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN;
 80020b4:	6aca      	ldr	r2, [r1, #44]	; 0x2c
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80020b6:	f3c3 5305 	ubfx	r3, r3, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80020ba:	6c4d      	ldr	r5, [r1, #68]	; 0x44
  if (pll3m != 0U)
 80020bc:	2b00      	cmp	r3, #0
 80020be:	f000 808e 	beq.w	80021de <HAL_RCCEx_GetPLL3ClockFreq+0x132>
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80020c2:	f3c5 05cc 	ubfx	r5, r5, #3, #13
  pll3fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN;
 80020c6:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80020ca:	ed9f 5a48 	vldr	s10, [pc, #288]	; 80021ec <HAL_RCCEx_GetPLL3ClockFreq+0x140>
 80020ce:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80020d2:	436a      	muls	r2, r5
 80020d4:	ee07 2a90 	vmov	s15, r2
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80020d8:	f004 0203 	and.w	r2, r4, #3
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80020dc:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
    switch (pllsource)
 80020e0:	2a01      	cmp	r2, #1
 80020e2:	ee07 3a90 	vmov	s15, r3
 80020e6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80020ea:	d002      	beq.n	80020f2 <HAL_RCCEx_GetPLL3ClockFreq+0x46>
 80020ec:	d30f      	bcc.n	800210e <HAL_RCCEx_GetPLL3ClockFreq+0x62>
 80020ee:	2a02      	cmp	r2, #2
 80020f0:	d067      	beq.n	80021c2 <HAL_RCCEx_GetPLL3ClockFreq+0x116>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80020f2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80020f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020f8:	ee07 3a90 	vmov	s15, r3
 80020fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002100:	eee6 7a05 	vfma.f32	s15, s12, s10
 8002104:	ed9f 6a3a 	vldr	s12, [pc, #232]	; 80021f0 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 8002108:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800210c:	e056      	b.n	80021bc <HAL_RCCEx_GetPLL3ClockFreq+0x110>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800210e:	680b      	ldr	r3, [r1, #0]
 8002110:	069b      	lsls	r3, r3, #26
 8002112:	d546      	bpl.n	80021a2 <HAL_RCCEx_GetPLL3ClockFreq+0xf6>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002114:	680a      	ldr	r2, [r1, #0]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8002116:	6c0b      	ldr	r3, [r1, #64]	; 0x40
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002118:	f3c2 01c1 	ubfx	r1, r2, #3, #2
 800211c:	4a35      	ldr	r2, [pc, #212]	; (80021f4 <HAL_RCCEx_GetPLL3ClockFreq+0x148>)
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800211e:	f3c3 0308 	ubfx	r3, r3, #0, #9
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002122:	40ca      	lsrs	r2, r1
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8002124:	ee07 2a90 	vmov	s15, r2
 8002128:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800212c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002130:	ee07 3a90 	vmov	s15, r3
 8002134:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002138:	eee6 7a05 	vfma.f32	s15, s12, s10
 800213c:	ee77 7aa5 	vadd.f32	s15, s15, s11
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8002140:	4a29      	ldr	r2, [pc, #164]	; (80021e8 <HAL_RCCEx_GetPLL3ClockFreq+0x13c>)
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8002142:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8002146:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002148:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800214c:	ee07 3a10 	vmov	s14, r3
 8002150:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002154:	ee37 7a25 	vadd.f32	s14, s14, s11
 8002158:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800215c:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8002160:	edc0 6a00 	vstr	s13, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8002164:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002166:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800216a:	ee07 3a10 	vmov	s14, r3
 800216e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002172:	ee37 7a25 	vadd.f32	s14, s14, s11
 8002176:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800217a:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800217e:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8002182:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002184:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8002188:	ee07 3a10 	vmov	s14, r3
 800218c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002190:	ee77 5a25 	vadd.f32	s11, s14, s11
 8002194:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 8002198:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800219c:	ed80 7a02 	vstr	s14, [r0, #8]
 80021a0:	bd30      	pop	{r4, r5, pc}
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80021a2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80021a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021a8:	ee07 3a90 	vmov	s15, r3
 80021ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021b0:	eee6 7a05 	vfma.f32	s15, s12, s10
 80021b4:	ed9f 6a10 	vldr	s12, [pc, #64]	; 80021f8 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 80021b8:	ee77 7aa5 	vadd.f32	s15, s15, s11
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80021bc:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80021c0:	e7be      	b.n	8002140 <HAL_RCCEx_GetPLL3ClockFreq+0x94>
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80021c2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80021c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021c8:	ee07 3a90 	vmov	s15, r3
 80021cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021d0:	eee6 7a05 	vfma.f32	s15, s12, s10
 80021d4:	ed9f 6a09 	vldr	s12, [pc, #36]	; 80021fc <HAL_RCCEx_GetPLL3ClockFreq+0x150>
 80021d8:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80021dc:	e7ee      	b.n	80021bc <HAL_RCCEx_GetPLL3ClockFreq+0x110>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80021de:	6003      	str	r3, [r0, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80021e0:	6043      	str	r3, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80021e2:	6083      	str	r3, [r0, #8]
 80021e4:	bd30      	pop	{r4, r5, pc}
 80021e6:	bf00      	nop
 80021e8:	58024400 	.word	0x58024400
 80021ec:	39000000 	.word	0x39000000
 80021f0:	4a742400 	.word	0x4a742400
 80021f4:	03d09000 	.word	0x03d09000
 80021f8:	4c742400 	.word	0x4c742400
 80021fc:	4af42400 	.word	0x4af42400

08002200 <HAL_RCCEx_GetD1SysClockFreq>:
{
 8002200:	b508      	push	{r3, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002202:	f7fe ff53 	bl	80010ac <HAL_RCC_GetSysClockFreq>
 8002206:	4b06      	ldr	r3, [pc, #24]	; (8002220 <HAL_RCCEx_GetD1SysClockFreq+0x20>)
 8002208:	4a06      	ldr	r2, [pc, #24]	; (8002224 <HAL_RCCEx_GetD1SysClockFreq+0x24>)
 800220a:	699b      	ldr	r3, [r3, #24]
 800220c:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8002210:	5cd3      	ldrb	r3, [r2, r3]
 8002212:	f003 031f 	and.w	r3, r3, #31
 8002216:	40d8      	lsrs	r0, r3
 8002218:	4b03      	ldr	r3, [pc, #12]	; (8002228 <HAL_RCCEx_GetD1SysClockFreq+0x28>)
 800221a:	6018      	str	r0, [r3, #0]
}
 800221c:	bd08      	pop	{r3, pc}
 800221e:	bf00      	nop
 8002220:	58024400 	.word	0x58024400
 8002224:	08006dda 	.word	0x08006dda
 8002228:	20000030 	.word	0x20000030

0800222c <SPI_CloseTransfer>:
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
  uint32_t itflag = hspi->Instance->SR;
 800222c:	6803      	ldr	r3, [r0, #0]
 800222e:	6959      	ldr	r1, [r3, #20]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8002230:	699a      	ldr	r2, [r3, #24]
 8002232:	f042 0208 	orr.w	r2, r2, #8
 8002236:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8002238:	699a      	ldr	r2, [r3, #24]
 800223a:	f042 0210 	orr.w	r2, r2, #16
 800223e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	f022 0201 	bic.w	r2, r2, #1
 8002246:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8002248:	691a      	ldr	r2, [r3, #16]
 800224a:	f422 725b 	bic.w	r2, r2, #876	; 0x36c
 800224e:	f022 0203 	bic.w	r2, r2, #3
 8002252:	611a      	str	r2, [r3, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8002254:	689a      	ldr	r2, [r3, #8]
 8002256:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800225a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800225c:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 8002260:	2a04      	cmp	r2, #4
 8002262:	d00b      	beq.n	800227c <SPI_CloseTransfer+0x50>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8002264:	068a      	lsls	r2, r1, #26
 8002266:	d509      	bpl.n	800227c <SPI_CloseTransfer+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8002268:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 800226c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002270:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8002274:	699a      	ldr	r2, [r3, #24]
 8002276:	f042 0220 	orr.w	r2, r2, #32
 800227a:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800227c:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 8002280:	2a03      	cmp	r2, #3
 8002282:	d00b      	beq.n	800229c <SPI_CloseTransfer+0x70>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8002284:	064a      	lsls	r2, r1, #25
 8002286:	d509      	bpl.n	800229c <SPI_CloseTransfer+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002288:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 800228c:	f042 0204 	orr.w	r2, r2, #4
 8002290:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002294:	699a      	ldr	r2, [r3, #24]
 8002296:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800229a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800229c:	058a      	lsls	r2, r1, #22
 800229e:	d509      	bpl.n	80022b4 <SPI_CloseTransfer+0x88>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80022a0:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 80022a4:	f042 0201 	orr.w	r2, r2, #1
 80022a8:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80022ac:	699a      	ldr	r2, [r3, #24]
 80022ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022b2:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80022b4:	05ca      	lsls	r2, r1, #23
 80022b6:	d509      	bpl.n	80022cc <SPI_CloseTransfer+0xa0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80022b8:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 80022bc:	f042 0208 	orr.w	r2, r2, #8
 80022c0:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80022c4:	699a      	ldr	r2, [r3, #24]
 80022c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022ca:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80022cc:	2300      	movs	r3, #0
 80022ce:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80022d2:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
 80022d6:	4770      	bx	lr

080022d8 <HAL_SPI_Init>:
{
 80022d8:	b570      	push	{r4, r5, r6, lr}
  if (hspi == NULL)
 80022da:	4604      	mov	r4, r0
 80022dc:	b908      	cbnz	r0, 80022e2 <HAL_SPI_Init+0xa>
    return HAL_ERROR;
 80022de:	2001      	movs	r0, #1
 80022e0:	bd70      	pop	{r4, r5, r6, pc}
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022e2:	2300      	movs	r3, #0
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80022e4:	6802      	ldr	r2, [r0, #0]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022e6:	6283      	str	r3, [r0, #40]	; 0x28
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80022e8:	4b3f      	ldr	r3, [pc, #252]	; (80023e8 <HAL_SPI_Init+0x110>)
 80022ea:	429a      	cmp	r2, r3
 80022ec:	68c3      	ldr	r3, [r0, #12]
 80022ee:	d008      	beq.n	8002302 <HAL_SPI_Init+0x2a>
 80022f0:	493e      	ldr	r1, [pc, #248]	; (80023ec <HAL_SPI_Init+0x114>)
 80022f2:	428a      	cmp	r2, r1
 80022f4:	d005      	beq.n	8002302 <HAL_SPI_Init+0x2a>
 80022f6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80022fa:	428a      	cmp	r2, r1
 80022fc:	d001      	beq.n	8002302 <HAL_SPI_Init+0x2a>
 80022fe:	2b0f      	cmp	r3, #15
 8002300:	d8ed      	bhi.n	80022de <HAL_SPI_Init+0x6>
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8002302:	6be1      	ldr	r1, [r4, #60]	; 0x3c
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8002304:	3308      	adds	r3, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8002306:	0949      	lsrs	r1, r1, #5
  data_size = (data_size + 7UL) / 8UL;
 8002308:	08db      	lsrs	r3, r3, #3

  return data_size * fifo_threashold;
 800230a:	fb01 3303 	mla	r3, r1, r3, r3
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800230e:	4936      	ldr	r1, [pc, #216]	; (80023e8 <HAL_SPI_Init+0x110>)
 8002310:	428a      	cmp	r2, r1
 8002312:	d066      	beq.n	80023e2 <HAL_SPI_Init+0x10a>
 8002314:	f5a1 4178 	sub.w	r1, r1, #63488	; 0xf800
 8002318:	428a      	cmp	r2, r1
 800231a:	d062      	beq.n	80023e2 <HAL_SPI_Init+0x10a>
 800231c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8002320:	428a      	cmp	r2, r1
 8002322:	d05e      	beq.n	80023e2 <HAL_SPI_Init+0x10a>
 8002324:	2b08      	cmp	r3, #8
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8002326:	d8da      	bhi.n	80022de <HAL_SPI_Init+0x6>
  if (hspi->State == HAL_SPI_STATE_RESET)
 8002328:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 800232c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002330:	b923      	cbnz	r3, 800233c <HAL_SPI_Init+0x64>
    hspi->Lock = HAL_UNLOCKED;
 8002332:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
    HAL_SPI_MspInit(hspi);
 8002336:	4620      	mov	r0, r4
 8002338:	f002 ffdc 	bl	80052f4 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 800233c:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 800233e:	6822      	ldr	r2, [r4, #0]
 8002340:	6861      	ldr	r1, [r4, #4]
  hspi->State = HAL_SPI_STATE_BUSY;
 8002342:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  __HAL_SPI_DISABLE(hspi);
 8002346:	6813      	ldr	r3, [r2, #0]
 8002348:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800234a:	f023 0301 	bic.w	r3, r3, #1
 800234e:	6013      	str	r3, [r2, #0]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 8002350:	69a3      	ldr	r3, [r4, #24]
 8002352:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002356:	d107      	bne.n	8002368 <HAL_SPI_Init+0x90>
 8002358:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 800235c:	d104      	bne.n	8002368 <HAL_SPI_Init+0x90>
 800235e:	b91d      	cbnz	r5, 8002368 <HAL_SPI_Init+0x90>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8002360:	6810      	ldr	r0, [r2, #0]
 8002362:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 8002366:	6010      	str	r0, [r2, #0]
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8002368:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800236a:	69e0      	ldr	r0, [r4, #28]
 800236c:	4330      	orrs	r0, r6
 800236e:	6be6      	ldr	r6, [r4, #60]	; 0x3c
 8002370:	4330      	orrs	r0, r6
 8002372:	68e6      	ldr	r6, [r4, #12]
 8002374:	4330      	orrs	r0, r6
 8002376:	6090      	str	r0, [r2, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8002378:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800237a:	4303      	orrs	r3, r0
 800237c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800237e:	4303      	orrs	r3, r0
 8002380:	6920      	ldr	r0, [r4, #16]
 8002382:	432b      	orrs	r3, r5
 8002384:	4303      	orrs	r3, r0
 8002386:	6960      	ldr	r0, [r4, #20]
 8002388:	4303      	orrs	r3, r0
 800238a:	6a20      	ldr	r0, [r4, #32]
 800238c:	4303      	orrs	r3, r0
 800238e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8002390:	430b      	orrs	r3, r1
 8002392:	4303      	orrs	r3, r0
 8002394:	68a0      	ldr	r0, [r4, #8]
 8002396:	4303      	orrs	r3, r0
 8002398:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800239a:	4303      	orrs	r3, r0
 800239c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800239e:	4303      	orrs	r3, r0
 80023a0:	60d3      	str	r3, [r2, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80023a2:	b959      	cbnz	r1, 80023bc <HAL_SPI_Init+0xe4>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80023a4:	6893      	ldr	r3, [r2, #8]
 80023a6:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80023aa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80023ae:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80023b0:	6893      	ldr	r3, [r2, #8]
 80023b2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80023b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023ba:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80023bc:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80023be:	f023 0301 	bic.w	r3, r3, #1
 80023c2:	6513      	str	r3, [r2, #80]	; 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80023c4:	024b      	lsls	r3, r1, #9
 80023c6:	d505      	bpl.n	80023d4 <HAL_SPI_Init+0xfc>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80023c8:	68d3      	ldr	r3, [r2, #12]
 80023ca:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80023cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80023d0:	430b      	orrs	r3, r1
 80023d2:	60d3      	str	r3, [r2, #12]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80023d4:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 80023d6:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80023d8:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80023dc:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
}
 80023e0:	bd70      	pop	{r4, r5, r6, pc}
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80023e2:	2b10      	cmp	r3, #16
 80023e4:	e79f      	b.n	8002326 <HAL_SPI_Init+0x4e>
 80023e6:	bf00      	nop
 80023e8:	40013000 	.word	0x40013000
 80023ec:	40003800 	.word	0x40003800

080023f0 <HAL_SPI_Transmit>:
{
 80023f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80023f4:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 80023f6:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
{
 80023fa:	4604      	mov	r4, r0
 80023fc:	4688      	mov	r8, r1
  __HAL_LOCK(hspi);
 80023fe:	2b01      	cmp	r3, #1
{
 8002400:	4617      	mov	r7, r2
  __HAL_LOCK(hspi);
 8002402:	d00c      	beq.n	800241e <HAL_SPI_Transmit+0x2e>
 8002404:	2301      	movs	r3, #1
 8002406:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  tickstart = HAL_GetTick();
 800240a:	f7fe f9a9 	bl	8000760 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 800240e:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
  tickstart = HAL_GetTick();
 8002412:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8002414:	2b01      	cmp	r3, #1
 8002416:	d005      	beq.n	8002424 <HAL_SPI_Transmit+0x34>
    __HAL_UNLOCK(hspi);
 8002418:	2300      	movs	r3, #0
 800241a:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  __HAL_LOCK(hspi);
 800241e:	2002      	movs	r0, #2
 8002420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0UL))
 8002424:	f1b8 0f00 	cmp.w	r8, #0
 8002428:	d000      	beq.n	800242c <HAL_SPI_Transmit+0x3c>
 800242a:	b92f      	cbnz	r7, 8002438 <HAL_SPI_Transmit+0x48>
    __HAL_UNLOCK(hspi);
 800242c:	2300      	movs	r3, #0
    return errorcode;
 800242e:	2001      	movs	r0, #1
    __HAL_UNLOCK(hspi);
 8002430:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    return errorcode;
 8002434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002438:	2303      	movs	r3, #3
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800243a:	f8c4 805c 	str.w	r8, [r4, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800243e:	f8a4 7060 	strh.w	r7, [r4, #96]	; 0x60
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002442:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002446:	2300      	movs	r3, #0
 8002448:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  hspi->pRxBuffPtr  = NULL;
 800244c:	6663      	str	r3, [r4, #100]	; 0x64
  hspi->TxXferCount = Size;
 800244e:	f8a4 7062 	strh.w	r7, [r4, #98]	; 0x62
  hspi->RxXferSize  = (uint16_t) 0UL;
 8002452:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8002456:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800245a:	6763      	str	r3, [r4, #116]	; 0x74
  hspi->RxISR       = NULL;
 800245c:	6723      	str	r3, [r4, #112]	; 0x70
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800245e:	68a3      	ldr	r3, [r4, #8]
 8002460:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8002464:	6823      	ldr	r3, [r4, #0]
 8002466:	d103      	bne.n	8002470 <HAL_SPI_Transmit+0x80>
    SPI_1LINE_TX(hspi);
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800246e:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8002470:	6859      	ldr	r1, [r3, #4]
 8002472:	0c09      	lsrs	r1, r1, #16
 8002474:	0409      	lsls	r1, r1, #16
 8002476:	4339      	orrs	r1, r7
 8002478:	6059      	str	r1, [r3, #4]
  __HAL_SPI_ENABLE(hspi);
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	f042 0201 	orr.w	r2, r2, #1
 8002480:	601a      	str	r2, [r3, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002482:	6862      	ldr	r2, [r4, #4]
 8002484:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8002488:	d103      	bne.n	8002492 <HAL_SPI_Transmit+0xa2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002490:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8002492:	68e3      	ldr	r3, [r4, #12]
 8002494:	2b0f      	cmp	r3, #15
 8002496:	d830      	bhi.n	80024fa <HAL_SPI_Transmit+0x10a>
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002498:	2b07      	cmp	r3, #7
 800249a:	d875      	bhi.n	8002588 <HAL_SPI_Transmit+0x198>
    while (hspi->TxXferCount > 0UL)
 800249c:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 80024a0:	b29b      	uxth	r3, r3
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d02e      	beq.n	8002504 <HAL_SPI_Transmit+0x114>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80024a6:	6822      	ldr	r2, [r4, #0]
 80024a8:	6957      	ldr	r7, [r2, #20]
 80024aa:	f017 0702 	ands.w	r7, r7, #2
 80024ae:	f000 809a 	beq.w	80025e6 <HAL_SPI_Transmit+0x1f6>
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80024b2:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 80024b6:	b29b      	uxth	r3, r3
 80024b8:	2b03      	cmp	r3, #3
 80024ba:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80024bc:	d97a      	bls.n	80025b4 <HAL_SPI_Transmit+0x1c4>
 80024be:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80024c0:	2940      	cmp	r1, #64	; 0x40
 80024c2:	d977      	bls.n	80025b4 <HAL_SPI_Transmit+0x1c4>
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80024c4:	f853 1b04 	ldr.w	r1, [r3], #4
 80024c8:	6211      	str	r1, [r2, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80024ca:	65e3      	str	r3, [r4, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 80024cc:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 80024d0:	3b04      	subs	r3, #4
          hspi->TxXferCount -= (uint16_t)2UL;
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
 80024d8:	e7e0      	b.n	800249c <HAL_SPI_Transmit+0xac>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80024da:	6822      	ldr	r2, [r4, #0]
 80024dc:	6957      	ldr	r7, [r2, #20]
 80024de:	f017 0702 	ands.w	r7, r7, #2
 80024e2:	d023      	beq.n	800252c <HAL_SPI_Transmit+0x13c>
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80024e4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80024e6:	f853 1b04 	ldr.w	r1, [r3], #4
 80024ea:	6211      	str	r1, [r2, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80024ec:	65e3      	str	r3, [r4, #92]	; 0x5c
        hspi->TxXferCount--;
 80024ee:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 80024f2:	3b01      	subs	r3, #1
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
    while (hspi->TxXferCount > 0UL)
 80024fa:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 80024fe:	b29b      	uxth	r3, r3
 8002500:	2b00      	cmp	r3, #0
 8002502:	d1ea      	bne.n	80024da <HAL_SPI_Transmit+0xea>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8002504:	6823      	ldr	r3, [r4, #0]
 8002506:	695b      	ldr	r3, [r3, #20]
 8002508:	071b      	lsls	r3, r3, #28
 800250a:	d576      	bpl.n	80025fa <HAL_SPI_Transmit+0x20a>
  SPI_CloseTransfer(hspi);
 800250c:	4620      	mov	r0, r4
 800250e:	f7ff fe8d 	bl	800222c <SPI_CloseTransfer>
  __HAL_UNLOCK(hspi);
 8002512:	2300      	movs	r3, #0
 8002514:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  hspi->State = HAL_SPI_STATE_READY;
 8002518:	2301      	movs	r3, #1
 800251a:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800251e:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
  __HAL_LOCK(hspi);
 8002522:	3000      	adds	r0, #0
 8002524:	bf18      	it	ne
 8002526:	2001      	movne	r0, #1
 8002528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800252c:	f7fe f918 	bl	8000760 <HAL_GetTick>
 8002530:	1b80      	subs	r0, r0, r6
 8002532:	42a8      	cmp	r0, r5
 8002534:	d3e1      	bcc.n	80024fa <HAL_SPI_Transmit+0x10a>
 8002536:	1c6b      	adds	r3, r5, #1
 8002538:	d0df      	beq.n	80024fa <HAL_SPI_Transmit+0x10a>
          SPI_CloseTransfer(hspi);
 800253a:	4620      	mov	r0, r4
 800253c:	f7ff fe76 	bl	800222c <SPI_CloseTransfer>
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8002540:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8002544:	2001      	movs	r0, #1
          __HAL_UNLOCK(hspi);
 8002546:	f884 7080 	strb.w	r7, [r4, #128]	; 0x80
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800254a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800254e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8002552:	f884 0081 	strb.w	r0, [r4, #129]	; 0x81
          return HAL_ERROR;
 8002556:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800255a:	6822      	ldr	r2, [r4, #0]
 800255c:	6957      	ldr	r7, [r2, #20]
 800255e:	f017 0702 	ands.w	r7, r7, #2
 8002562:	d01f      	beq.n	80025a4 <HAL_SPI_Transmit+0x1b4>
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8002564:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8002568:	b29b      	uxth	r3, r3
 800256a:	2b01      	cmp	r3, #1
 800256c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800256e:	d911      	bls.n	8002594 <HAL_SPI_Transmit+0x1a4>
 8002570:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8002572:	b179      	cbz	r1, 8002594 <HAL_SPI_Transmit+0x1a4>
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8002574:	f853 1b04 	ldr.w	r1, [r3], #4
 8002578:	6211      	str	r1, [r2, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800257a:	65e3      	str	r3, [r4, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800257c:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8002580:	3b02      	subs	r3, #2
          hspi->TxXferCount--;
 8002582:	b29b      	uxth	r3, r3
 8002584:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
    while (hspi->TxXferCount > 0UL)
 8002588:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800258c:	b29b      	uxth	r3, r3
 800258e:	2b00      	cmp	r3, #0
 8002590:	d1e3      	bne.n	800255a <HAL_SPI_Transmit+0x16a>
 8002592:	e7b7      	b.n	8002504 <HAL_SPI_Transmit+0x114>
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
 8002594:	f833 1b02 	ldrh.w	r1, [r3], #2
 8002598:	8411      	strh	r1, [r2, #32]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800259a:	65e3      	str	r3, [r4, #92]	; 0x5c
          hspi->TxXferCount--;
 800259c:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 80025a0:	3b01      	subs	r3, #1
 80025a2:	e7ee      	b.n	8002582 <HAL_SPI_Transmit+0x192>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80025a4:	f7fe f8dc 	bl	8000760 <HAL_GetTick>
 80025a8:	1b80      	subs	r0, r0, r6
 80025aa:	4285      	cmp	r5, r0
 80025ac:	d8ec      	bhi.n	8002588 <HAL_SPI_Transmit+0x198>
 80025ae:	1c68      	adds	r0, r5, #1
 80025b0:	d0ea      	beq.n	8002588 <HAL_SPI_Transmit+0x198>
 80025b2:	e7c2      	b.n	800253a <HAL_SPI_Transmit+0x14a>
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80025b4:	f8b4 1062 	ldrh.w	r1, [r4, #98]	; 0x62
 80025b8:	b289      	uxth	r1, r1
 80025ba:	2901      	cmp	r1, #1
 80025bc:	d909      	bls.n	80025d2 <HAL_SPI_Transmit+0x1e2>
 80025be:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80025c0:	b139      	cbz	r1, 80025d2 <HAL_SPI_Transmit+0x1e2>
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
 80025c2:	f833 1b02 	ldrh.w	r1, [r3], #2
 80025c6:	8411      	strh	r1, [r2, #32]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80025c8:	65e3      	str	r3, [r4, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80025ca:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 80025ce:	3b02      	subs	r3, #2
 80025d0:	e77f      	b.n	80024d2 <HAL_SPI_Transmit+0xe2>
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	f882 3020 	strb.w	r3, [r2, #32]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80025d8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80025da:	3301      	adds	r3, #1
 80025dc:	65e3      	str	r3, [r4, #92]	; 0x5c
          hspi->TxXferCount--;
 80025de:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 80025e2:	3b01      	subs	r3, #1
 80025e4:	e775      	b.n	80024d2 <HAL_SPI_Transmit+0xe2>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80025e6:	f7fe f8bb 	bl	8000760 <HAL_GetTick>
 80025ea:	1b80      	subs	r0, r0, r6
 80025ec:	4285      	cmp	r5, r0
 80025ee:	f63f af55 	bhi.w	800249c <HAL_SPI_Transmit+0xac>
 80025f2:	1c69      	adds	r1, r5, #1
 80025f4:	f43f af52 	beq.w	800249c <HAL_SPI_Transmit+0xac>
 80025f8:	e79f      	b.n	800253a <HAL_SPI_Transmit+0x14a>
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80025fa:	f7fe f8b1 	bl	8000760 <HAL_GetTick>
 80025fe:	1b80      	subs	r0, r0, r6
 8002600:	4285      	cmp	r5, r0
 8002602:	f63f af7f 	bhi.w	8002504 <HAL_SPI_Transmit+0x114>
 8002606:	1c6a      	adds	r2, r5, #1
 8002608:	f43f af7c 	beq.w	8002504 <HAL_SPI_Transmit+0x114>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800260c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8002610:	f043 0320 	orr.w	r3, r3, #32
 8002614:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 8002618:	e778      	b.n	800250c <HAL_SPI_Transmit+0x11c>

0800261a <HAL_SPI_TransmitReceive>:
{
 800261a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800261e:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 8002620:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
{
 8002624:	4604      	mov	r4, r0
 8002626:	460e      	mov	r6, r1
  __HAL_LOCK(hspi);
 8002628:	2b01      	cmp	r3, #1
{
 800262a:	4691      	mov	r9, r2
 800262c:	9f08      	ldr	r7, [sp, #32]
  __HAL_LOCK(hspi);
 800262e:	d015      	beq.n	800265c <HAL_SPI_TransmitReceive+0x42>
 8002630:	2301      	movs	r3, #1
 8002632:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  tickstart = HAL_GetTick();
 8002636:	f7fe f893 	bl	8000760 <HAL_GetTick>
  tmp_state           = hspi->State;
 800263a:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
  tickstart = HAL_GetTick();
 800263e:	4680      	mov	r8, r0
  tmp_mode            = hspi->Init.Mode;
 8002640:	6860      	ldr	r0, [r4, #4]
  tmp_state           = hspi->State;
 8002642:	b2db      	uxtb	r3, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002644:	2b01      	cmp	r3, #1
 8002646:	d00c      	beq.n	8002662 <HAL_SPI_TransmitReceive+0x48>
 8002648:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
 800264c:	d103      	bne.n	8002656 <HAL_SPI_TransmitReceive+0x3c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800264e:	68a1      	ldr	r1, [r4, #8]
 8002650:	b909      	cbnz	r1, 8002656 <HAL_SPI_TransmitReceive+0x3c>
 8002652:	2b04      	cmp	r3, #4
 8002654:	d005      	beq.n	8002662 <HAL_SPI_TransmitReceive+0x48>
    __HAL_UNLOCK(hspi);
 8002656:	2300      	movs	r3, #0
 8002658:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  __HAL_LOCK(hspi);
 800265c:	2002      	movs	r0, #2
 800265e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8002662:	b11e      	cbz	r6, 800266c <HAL_SPI_TransmitReceive+0x52>
 8002664:	f1b9 0f00 	cmp.w	r9, #0
 8002668:	d000      	beq.n	800266c <HAL_SPI_TransmitReceive+0x52>
 800266a:	b92d      	cbnz	r5, 8002678 <HAL_SPI_TransmitReceive+0x5e>
    __HAL_UNLOCK(hspi);
 800266c:	2300      	movs	r3, #0
    return errorcode;
 800266e:	2001      	movs	r0, #1
    __HAL_UNLOCK(hspi);
 8002670:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
 8002674:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002678:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 800267c:	2b04      	cmp	r3, #4
 800267e:	d002      	beq.n	8002686 <HAL_SPI_TransmitReceive+0x6c>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002680:	2305      	movs	r3, #5
 8002682:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002686:	2300      	movs	r3, #0
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8002688:	6822      	ldr	r2, [r4, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800268a:	f8c4 9064 	str.w	r9, [r4, #100]	; 0x64
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800268e:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002692:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  hspi->RxISR       = NULL;
 8002696:	6723      	str	r3, [r4, #112]	; 0x70
  hspi->RxXferCount = Size;
 8002698:	f8a4 506a 	strh.w	r5, [r4, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800269c:	6763      	str	r3, [r4, #116]	; 0x74
  hspi->TxXferCount = Size;
 800269e:	f8a4 5062 	strh.w	r5, [r4, #98]	; 0x62
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80026a2:	6853      	ldr	r3, [r2, #4]
  hspi->RxXferSize  = Size;
 80026a4:	f8a4 5068 	strh.w	r5, [r4, #104]	; 0x68
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80026a8:	ea4f 4313 	mov.w	r3, r3, lsr #16
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80026ac:	65e6      	str	r6, [r4, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 80026ae:	f8a4 5060 	strh.w	r5, [r4, #96]	; 0x60
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80026b2:	ea4f 4303 	mov.w	r3, r3, lsl #16
 80026b6:	ea43 0305 	orr.w	r3, r3, r5
 80026ba:	6053      	str	r3, [r2, #4]
  __HAL_SPI_ENABLE(hspi);
 80026bc:	6813      	ldr	r3, [r2, #0]
 80026be:	f043 0301 	orr.w	r3, r3, #1
 80026c2:	6013      	str	r3, [r2, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80026c4:	d103      	bne.n	80026ce <HAL_SPI_TransmitReceive+0xb4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80026c6:	6813      	ldr	r3, [r2, #0]
 80026c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026cc:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80026ce:	68e3      	ldr	r3, [r4, #12]
 80026d0:	2b0f      	cmp	r3, #15
 80026d2:	d947      	bls.n	8002764 <HAL_SPI_TransmitReceive+0x14a>
 80026d4:	4629      	mov	r1, r5
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 80026d6:	f248 0008 	movw	r0, #32776	; 0x8008
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 80026da:	6953      	ldr	r3, [r2, #20]
 80026dc:	079e      	lsls	r6, r3, #30
 80026de:	d50e      	bpl.n	80026fe <HAL_SPI_TransmitReceive+0xe4>
 80026e0:	b16d      	cbz	r5, 80026fe <HAL_SPI_TransmitReceive+0xe4>
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80026e2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80026e4:	f853 5b04 	ldr.w	r5, [r3], #4
 80026e8:	6215      	str	r5, [r2, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80026ea:	65e3      	str	r3, [r4, #92]	; 0x5c
        hspi->TxXferCount --;
 80026ec:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 80026f0:	3b01      	subs	r3, #1
 80026f2:	b29b      	uxth	r3, r3
 80026f4:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80026f8:	f8b4 5062 	ldrh.w	r5, [r4, #98]	; 0x62
 80026fc:	b2ad      	uxth	r5, r5
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 80026fe:	6953      	ldr	r3, [r2, #20]
 8002700:	4203      	tst	r3, r0
 8002702:	d010      	beq.n	8002726 <HAL_SPI_TransmitReceive+0x10c>
 8002704:	2900      	cmp	r1, #0
 8002706:	f000 810d 	beq.w	8002924 <HAL_SPI_TransmitReceive+0x30a>
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800270a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800270c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800270e:	f843 1b04 	str.w	r1, [r3], #4
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8002712:	6663      	str	r3, [r4, #100]	; 0x64
        hspi->RxXferCount --;
 8002714:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8002718:	3b01      	subs	r3, #1
 800271a:	b29b      	uxth	r3, r3
 800271c:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8002720:	f8b4 106a 	ldrh.w	r1, [r4, #106]	; 0x6a
 8002724:	b289      	uxth	r1, r1
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8002726:	2d00      	cmp	r5, #0
 8002728:	d1d7      	bne.n	80026da <HAL_SPI_TransmitReceive+0xc0>
 800272a:	2900      	cmp	r1, #0
 800272c:	d1d5      	bne.n	80026da <HAL_SPI_TransmitReceive+0xc0>
    if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800272e:	f7fe f817 	bl	8000760 <HAL_GetTick>
 8002732:	eba0 0008 	sub.w	r0, r0, r8
 8002736:	4287      	cmp	r7, r0
 8002738:	f200 8093 	bhi.w	8002862 <HAL_SPI_TransmitReceive+0x248>
 800273c:	1c78      	adds	r0, r7, #1
 800273e:	f000 8090 	beq.w	8002862 <HAL_SPI_TransmitReceive+0x248>
        SPI_CloseTransfer(hspi);
 8002742:	4620      	mov	r0, r4
 8002744:	f7ff fd72 	bl	800222c <SPI_CloseTransfer>
        __HAL_UNLOCK(hspi);
 8002748:	2300      	movs	r3, #0
        hspi->State = HAL_SPI_STATE_READY;
 800274a:	2001      	movs	r0, #1
        __HAL_UNLOCK(hspi);
 800274c:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8002750:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8002754:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002758:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800275c:	f884 0081 	strb.w	r0, [r4, #129]	; 0x81
 8002760:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002764:	2b07      	cmp	r3, #7
 8002766:	462e      	mov	r6, r5
 8002768:	d83f      	bhi.n	80027ea <HAL_SPI_TransmitReceive+0x1d0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800276a:	6822      	ldr	r2, [r4, #0]
 800276c:	6953      	ldr	r3, [r2, #20]
 800276e:	0798      	lsls	r0, r3, #30
 8002770:	d515      	bpl.n	800279e <HAL_SPI_TransmitReceive+0x184>
 8002772:	b1a5      	cbz	r5, 800279e <HAL_SPI_TransmitReceive+0x184>
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8002774:	2d03      	cmp	r5, #3
 8002776:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002778:	f240 8097 	bls.w	80028aa <HAL_SPI_TransmitReceive+0x290>
 800277c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800277e:	2940      	cmp	r1, #64	; 0x40
 8002780:	f240 8095 	bls.w	80028ae <HAL_SPI_TransmitReceive+0x294>
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8002784:	f853 1b04 	ldr.w	r1, [r3], #4
 8002788:	6211      	str	r1, [r2, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800278a:	65e3      	str	r3, [r4, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800278c:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8002790:	3b04      	subs	r3, #4
          hspi->TxXferCount--;
 8002792:	b29b      	uxth	r3, r3
 8002794:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8002798:	f8b4 5062 	ldrh.w	r5, [r4, #98]	; 0x62
 800279c:	b2ad      	uxth	r5, r5
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800279e:	6822      	ldr	r2, [r4, #0]
 80027a0:	6953      	ldr	r3, [r2, #20]
 80027a2:	f413 4f60 	tst.w	r3, #57344	; 0xe000
 80027a6:	d013      	beq.n	80027d0 <HAL_SPI_TransmitReceive+0x1b6>
 80027a8:	b196      	cbz	r6, 80027d0 <HAL_SPI_TransmitReceive+0x1b6>
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 80027aa:	6953      	ldr	r3, [r2, #20]
 80027ac:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80027b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80027b2:	f000 8090 	beq.w	80028d6 <HAL_SPI_TransmitReceive+0x2bc>
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80027b6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80027b8:	f843 2b04 	str.w	r2, [r3], #4
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80027bc:	6663      	str	r3, [r4, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 80027be:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 80027c2:	3b04      	subs	r3, #4
          hspi->RxXferCount--;
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80027ca:	f8b4 606a 	ldrh.w	r6, [r4, #106]	; 0x6a
 80027ce:	b2b6      	uxth	r6, r6
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80027d0:	f7fd ffc6 	bl	8000760 <HAL_GetTick>
 80027d4:	eba0 0008 	sub.w	r0, r0, r8
 80027d8:	4287      	cmp	r7, r0
 80027da:	d801      	bhi.n	80027e0 <HAL_SPI_TransmitReceive+0x1c6>
 80027dc:	1c79      	adds	r1, r7, #1
 80027de:	d1b0      	bne.n	8002742 <HAL_SPI_TransmitReceive+0x128>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80027e0:	2d00      	cmp	r5, #0
 80027e2:	d1c2      	bne.n	800276a <HAL_SPI_TransmitReceive+0x150>
 80027e4:	2e00      	cmp	r6, #0
 80027e6:	d1c0      	bne.n	800276a <HAL_SPI_TransmitReceive+0x150>
 80027e8:	e03b      	b.n	8002862 <HAL_SPI_TransmitReceive+0x248>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 80027ea:	6822      	ldr	r2, [r4, #0]
 80027ec:	6953      	ldr	r3, [r2, #20]
 80027ee:	0799      	lsls	r1, r3, #30
 80027f0:	d513      	bpl.n	800281a <HAL_SPI_TransmitReceive+0x200>
 80027f2:	b195      	cbz	r5, 800281a <HAL_SPI_TransmitReceive+0x200>
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80027f4:	2d01      	cmp	r5, #1
 80027f6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80027f8:	d947      	bls.n	800288a <HAL_SPI_TransmitReceive+0x270>
 80027fa:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80027fc:	2900      	cmp	r1, #0
 80027fe:	d044      	beq.n	800288a <HAL_SPI_TransmitReceive+0x270>
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8002800:	f853 1b04 	ldr.w	r1, [r3], #4
 8002804:	6211      	str	r1, [r2, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8002806:	65e3      	str	r3, [r4, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8002808:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800280c:	3b02      	subs	r3, #2
          hspi->TxXferCount--;
 800280e:	b29b      	uxth	r3, r3
 8002810:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8002814:	f8b4 5062 	ldrh.w	r5, [r4, #98]	; 0x62
 8002818:	b2ad      	uxth	r5, r5
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800281a:	6953      	ldr	r3, [r2, #20]
 800281c:	f413 4f60 	tst.w	r3, #57344	; 0xe000
 8002820:	d012      	beq.n	8002848 <HAL_SPI_TransmitReceive+0x22e>
 8002822:	b18e      	cbz	r6, 8002848 <HAL_SPI_TransmitReceive+0x22e>
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8002824:	6953      	ldr	r3, [r2, #20]
 8002826:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800282a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800282c:	d035      	beq.n	800289a <HAL_SPI_TransmitReceive+0x280>
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800282e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002830:	f843 2b04 	str.w	r2, [r3], #4
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8002834:	6663      	str	r3, [r4, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8002836:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800283a:	3b02      	subs	r3, #2
          hspi->RxXferCount--;
 800283c:	b29b      	uxth	r3, r3
 800283e:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8002842:	f8b4 606a 	ldrh.w	r6, [r4, #106]	; 0x6a
 8002846:	b2b6      	uxth	r6, r6
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002848:	f7fd ff8a 	bl	8000760 <HAL_GetTick>
 800284c:	eba0 0008 	sub.w	r0, r0, r8
 8002850:	4287      	cmp	r7, r0
 8002852:	d802      	bhi.n	800285a <HAL_SPI_TransmitReceive+0x240>
 8002854:	1c7b      	adds	r3, r7, #1
 8002856:	f47f af74 	bne.w	8002742 <HAL_SPI_TransmitReceive+0x128>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800285a:	2d00      	cmp	r5, #0
 800285c:	d1c5      	bne.n	80027ea <HAL_SPI_TransmitReceive+0x1d0>
 800285e:	2e00      	cmp	r6, #0
 8002860:	d1c3      	bne.n	80027ea <HAL_SPI_TransmitReceive+0x1d0>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8002862:	6823      	ldr	r3, [r4, #0]
 8002864:	695b      	ldr	r3, [r3, #20]
 8002866:	071b      	lsls	r3, r3, #28
 8002868:	d54d      	bpl.n	8002906 <HAL_SPI_TransmitReceive+0x2ec>
  SPI_CloseTransfer(hspi);
 800286a:	4620      	mov	r0, r4
 800286c:	f7ff fcde 	bl	800222c <SPI_CloseTransfer>
  __HAL_UNLOCK(hspi);
 8002870:	2300      	movs	r3, #0
 8002872:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  hspi->State = HAL_SPI_STATE_READY;
 8002876:	2301      	movs	r3, #1
 8002878:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800287c:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
  __HAL_LOCK(hspi);
 8002880:	3000      	adds	r0, #0
 8002882:	bf18      	it	ne
 8002884:	2001      	movne	r0, #1
 8002886:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
 800288a:	f833 1b02 	ldrh.w	r1, [r3], #2
 800288e:	8411      	strh	r1, [r2, #32]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002890:	65e3      	str	r3, [r4, #92]	; 0x5c
          hspi->TxXferCount--;
 8002892:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8002896:	3b01      	subs	r3, #1
 8002898:	e7b9      	b.n	800280e <HAL_SPI_TransmitReceive+0x1f4>
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
 800289a:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 800289c:	f823 2b02 	strh.w	r2, [r3], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80028a0:	6663      	str	r3, [r4, #100]	; 0x64
          hspi->RxXferCount--;
 80028a2:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 80028a6:	3b01      	subs	r3, #1
 80028a8:	e7c8      	b.n	800283c <HAL_SPI_TransmitReceive+0x222>
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80028aa:	2d01      	cmp	r5, #1
 80028ac:	d009      	beq.n	80028c2 <HAL_SPI_TransmitReceive+0x2a8>
 80028ae:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80028b0:	b139      	cbz	r1, 80028c2 <HAL_SPI_TransmitReceive+0x2a8>
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
 80028b2:	f833 1b02 	ldrh.w	r1, [r3], #2
 80028b6:	8411      	strh	r1, [r2, #32]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80028b8:	65e3      	str	r3, [r4, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80028ba:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 80028be:	3b02      	subs	r3, #2
 80028c0:	e767      	b.n	8002792 <HAL_SPI_TransmitReceive+0x178>
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	f882 3020 	strb.w	r3, [r2, #32]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80028c8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80028ca:	3301      	adds	r3, #1
 80028cc:	65e3      	str	r3, [r4, #92]	; 0x5c
          hspi->TxXferCount--;
 80028ce:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 80028d2:	3b01      	subs	r3, #1
 80028d4:	e75d      	b.n	8002792 <HAL_SPI_TransmitReceive+0x178>
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 80028d6:	6951      	ldr	r1, [r2, #20]
 80028d8:	f401 41c0 	and.w	r1, r1, #24576	; 0x6000
 80028dc:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 80028e0:	d907      	bls.n	80028f2 <HAL_SPI_TransmitReceive+0x2d8>
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
 80028e2:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 80028e4:	f823 2b02 	strh.w	r2, [r3], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80028e8:	6663      	str	r3, [r4, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 80028ea:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 80028ee:	3b02      	subs	r3, #2
 80028f0:	e768      	b.n	80027c4 <HAL_SPI_TransmitReceive+0x1aa>
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80028f2:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 80028f6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80028f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80028fa:	3301      	adds	r3, #1
 80028fc:	6663      	str	r3, [r4, #100]	; 0x64
          hspi->RxXferCount--;
 80028fe:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8002902:	3b01      	subs	r3, #1
 8002904:	e75e      	b.n	80027c4 <HAL_SPI_TransmitReceive+0x1aa>
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002906:	f7fd ff2b 	bl	8000760 <HAL_GetTick>
 800290a:	eba0 0008 	sub.w	r0, r0, r8
 800290e:	4287      	cmp	r7, r0
 8002910:	d8a7      	bhi.n	8002862 <HAL_SPI_TransmitReceive+0x248>
 8002912:	1c7a      	adds	r2, r7, #1
 8002914:	d0a5      	beq.n	8002862 <HAL_SPI_TransmitReceive+0x248>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002916:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800291a:	f043 0320 	orr.w	r3, r3, #32
 800291e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 8002922:	e7a2      	b.n	800286a <HAL_SPI_TransmitReceive+0x250>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8002924:	2d00      	cmp	r5, #0
 8002926:	f47f aed8 	bne.w	80026da <HAL_SPI_TransmitReceive+0xc0>
 800292a:	e700      	b.n	800272e <HAL_SPI_TransmitReceive+0x114>

0800292c <HAL_SPI_Receive>:
{
 800292c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002930:	461e      	mov	r6, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002932:	6843      	ldr	r3, [r0, #4]
{
 8002934:	4604      	mov	r4, r0
 8002936:	4688      	mov	r8, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002938:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
{
 800293c:	4617      	mov	r7, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800293e:	d10c      	bne.n	800295a <HAL_SPI_Receive+0x2e>
 8002940:	6883      	ldr	r3, [r0, #8]
 8002942:	b953      	cbnz	r3, 800295a <HAL_SPI_Receive+0x2e>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002944:	2304      	movs	r3, #4
 8002946:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800294a:	4613      	mov	r3, r2
 800294c:	9600      	str	r6, [sp, #0]
 800294e:	460a      	mov	r2, r1
 8002950:	f7ff fe63 	bl	800261a <HAL_SPI_TransmitReceive>
}
 8002954:	b002      	add	sp, #8
 8002956:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hspi);
 800295a:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
 800295e:	2b01      	cmp	r3, #1
 8002960:	d00c      	beq.n	800297c <HAL_SPI_Receive+0x50>
 8002962:	2301      	movs	r3, #1
 8002964:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  tickstart = HAL_GetTick();
 8002968:	f7fd fefa 	bl	8000760 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 800296c:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
  tickstart = HAL_GetTick();
 8002970:	4605      	mov	r5, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8002972:	2b01      	cmp	r3, #1
 8002974:	d004      	beq.n	8002980 <HAL_SPI_Receive+0x54>
    __HAL_UNLOCK(hspi);
 8002976:	2300      	movs	r3, #0
 8002978:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  __HAL_LOCK(hspi);
 800297c:	2002      	movs	r0, #2
 800297e:	e7e9      	b.n	8002954 <HAL_SPI_Receive+0x28>
  if ((pData == NULL) || (Size == 0UL))
 8002980:	f1b8 0f00 	cmp.w	r8, #0
 8002984:	d000      	beq.n	8002988 <HAL_SPI_Receive+0x5c>
 8002986:	b927      	cbnz	r7, 8002992 <HAL_SPI_Receive+0x66>
    __HAL_UNLOCK(hspi);
 8002988:	2300      	movs	r3, #0
    return errorcode;
 800298a:	2001      	movs	r0, #1
    __HAL_UNLOCK(hspi);
 800298c:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    return errorcode;
 8002990:	e7e0      	b.n	8002954 <HAL_SPI_Receive+0x28>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002992:	2304      	movs	r3, #4
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002994:	f8c4 8064 	str.w	r8, [r4, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8002998:	f8a4 7068 	strh.w	r7, [r4, #104]	; 0x68
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800299c:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80029a0:	2300      	movs	r3, #0
 80029a2:	6821      	ldr	r1, [r4, #0]
 80029a4:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  hspi->pTxBuffPtr  = NULL;
 80029a8:	65e3      	str	r3, [r4, #92]	; 0x5c
  hspi->RxXferCount = Size;
 80029aa:	f8a4 706a 	strh.w	r7, [r4, #106]	; 0x6a
  hspi->TxXferSize  = (uint16_t) 0UL;
 80029ae:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 80029b2:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
  hspi->RxISR       = NULL;
 80029b6:	6723      	str	r3, [r4, #112]	; 0x70
  hspi->TxISR       = NULL;
 80029b8:	6763      	str	r3, [r4, #116]	; 0x74
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029ba:	68a3      	ldr	r3, [r4, #8]
 80029bc:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80029c0:	d103      	bne.n	80029ca <HAL_SPI_Receive+0x9e>
    SPI_1LINE_RX(hspi);
 80029c2:	680b      	ldr	r3, [r1, #0]
 80029c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80029c8:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80029ca:	684b      	ldr	r3, [r1, #4]
 80029cc:	0c1b      	lsrs	r3, r3, #16
 80029ce:	041b      	lsls	r3, r3, #16
 80029d0:	433b      	orrs	r3, r7
 80029d2:	604b      	str	r3, [r1, #4]
  __HAL_SPI_ENABLE(hspi);
 80029d4:	680b      	ldr	r3, [r1, #0]
 80029d6:	f043 0301 	orr.w	r3, r3, #1
 80029da:	600b      	str	r3, [r1, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80029dc:	6863      	ldr	r3, [r4, #4]
 80029de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029e2:	d103      	bne.n	80029ec <HAL_SPI_Receive+0xc0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80029e4:	680b      	ldr	r3, [r1, #0]
 80029e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029ea:	600b      	str	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80029ec:	68e3      	ldr	r3, [r4, #12]
 80029ee:	2b0f      	cmp	r3, #15
 80029f0:	d855      	bhi.n	8002a9e <HAL_SPI_Receive+0x172>
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80029f2:	2b07      	cmp	r3, #7
 80029f4:	d86a      	bhi.n	8002acc <HAL_SPI_Receive+0x1a0>
    while (hspi->RxXferCount > 0UL)
 80029f6:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	b353      	cbz	r3, 8002a54 <HAL_SPI_Receive+0x128>
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 80029fe:	6823      	ldr	r3, [r4, #0]
 8002a00:	695f      	ldr	r7, [r3, #20]
 8002a02:	f417 4760 	ands.w	r7, r7, #57344	; 0xe000
 8002a06:	f000 808f 	beq.w	8002b28 <HAL_SPI_Receive+0x1fc>
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8002a0a:	695a      	ldr	r2, [r3, #20]
 8002a0c:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8002a10:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002a12:	d071      	beq.n	8002af8 <HAL_SPI_Receive+0x1cc>
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8002a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a16:	f842 3b04 	str.w	r3, [r2], #4
          hspi->RxXferCount -= (uint16_t)4UL;
 8002a1a:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8002a1e:	6662      	str	r2, [r4, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8002a20:	3b04      	subs	r3, #4
          hspi->RxXferCount -= (uint16_t)2UL;
 8002a22:	b29b      	uxth	r3, r3
 8002a24:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 8002a28:	e7e5      	b.n	80029f6 <HAL_SPI_Receive+0xca>
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 8002a2a:	6822      	ldr	r2, [r4, #0]
 8002a2c:	6957      	ldr	r7, [r2, #20]
 8002a2e:	ea17 0708 	ands.w	r7, r7, r8
 8002a32:	d01e      	beq.n	8002a72 <HAL_SPI_Receive+0x146>
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8002a34:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002a36:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002a38:	f843 2b04 	str.w	r2, [r3], #4
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8002a3c:	6663      	str	r3, [r4, #100]	; 0x64
        hspi->RxXferCount--;
 8002a3e:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8002a42:	3b01      	subs	r3, #1
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    while (hspi->RxXferCount > 0UL)
 8002a4a:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d1ea      	bne.n	8002a2a <HAL_SPI_Receive+0xfe>
  SPI_CloseTransfer(hspi);
 8002a54:	4620      	mov	r0, r4
 8002a56:	f7ff fbe9 	bl	800222c <SPI_CloseTransfer>
  __HAL_UNLOCK(hspi);
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  hspi->State = HAL_SPI_STATE_READY;
 8002a60:	2301      	movs	r3, #1
 8002a62:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002a66:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002a6a:	3000      	adds	r0, #0
 8002a6c:	bf18      	it	ne
 8002a6e:	2001      	movne	r0, #1
 8002a70:	e770      	b.n	8002954 <HAL_SPI_Receive+0x28>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a72:	f7fd fe75 	bl	8000760 <HAL_GetTick>
 8002a76:	1b40      	subs	r0, r0, r5
 8002a78:	4286      	cmp	r6, r0
 8002a7a:	d8e6      	bhi.n	8002a4a <HAL_SPI_Receive+0x11e>
 8002a7c:	1c71      	adds	r1, r6, #1
 8002a7e:	d0e4      	beq.n	8002a4a <HAL_SPI_Receive+0x11e>
          SPI_CloseTransfer(hspi);
 8002a80:	4620      	mov	r0, r4
 8002a82:	f7ff fbd3 	bl	800222c <SPI_CloseTransfer>
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8002a86:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8002a8a:	2001      	movs	r0, #1
          __HAL_UNLOCK(hspi);
 8002a8c:	f884 7080 	strb.w	r7, [r4, #128]	; 0x80
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8002a90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a94:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8002a98:	f884 0081 	strb.w	r0, [r4, #129]	; 0x81
          return HAL_ERROR;
 8002a9c:	e75a      	b.n	8002954 <HAL_SPI_Receive+0x28>
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 8002a9e:	f248 0808 	movw	r8, #32776	; 0x8008
 8002aa2:	e7d2      	b.n	8002a4a <HAL_SPI_Receive+0x11e>
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 8002aa4:	6821      	ldr	r1, [r4, #0]
 8002aa6:	694f      	ldr	r7, [r1, #20]
 8002aa8:	f417 4760 	ands.w	r7, r7, #57344	; 0xe000
 8002aac:	d01c      	beq.n	8002ae8 <HAL_SPI_Receive+0x1bc>
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8002aae:	694b      	ldr	r3, [r1, #20]
 8002ab0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002ab2:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8002ab6:	d00f      	beq.n	8002ad8 <HAL_SPI_Receive+0x1ac>
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8002ab8:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8002aba:	f842 3b04 	str.w	r3, [r2], #4
          hspi->RxXferCount -= (uint16_t)2UL;
 8002abe:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8002ac2:	6662      	str	r2, [r4, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8002ac4:	3b02      	subs	r3, #2
          hspi->RxXferCount--;
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    while (hspi->RxXferCount > 0UL)
 8002acc:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d1e6      	bne.n	8002aa4 <HAL_SPI_Receive+0x178>
 8002ad6:	e7bd      	b.n	8002a54 <HAL_SPI_Receive+0x128>
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
 8002ad8:	8e0b      	ldrh	r3, [r1, #48]	; 0x30
 8002ada:	f822 3b02 	strh.w	r3, [r2], #2
          hspi->RxXferCount--;
 8002ade:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002ae2:	6662      	str	r2, [r4, #100]	; 0x64
          hspi->RxXferCount--;
 8002ae4:	3b01      	subs	r3, #1
 8002ae6:	e7ee      	b.n	8002ac6 <HAL_SPI_Receive+0x19a>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ae8:	f7fd fe3a 	bl	8000760 <HAL_GetTick>
 8002aec:	1b40      	subs	r0, r0, r5
 8002aee:	4286      	cmp	r6, r0
 8002af0:	d8ec      	bhi.n	8002acc <HAL_SPI_Receive+0x1a0>
 8002af2:	1c72      	adds	r2, r6, #1
 8002af4:	d0ea      	beq.n	8002acc <HAL_SPI_Receive+0x1a0>
 8002af6:	e7c3      	b.n	8002a80 <HAL_SPI_Receive+0x154>
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 8002af8:	6959      	ldr	r1, [r3, #20]
 8002afa:	f401 41c0 	and.w	r1, r1, #24576	; 0x6000
 8002afe:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8002b02:	d907      	bls.n	8002b14 <HAL_SPI_Receive+0x1e8>
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
 8002b04:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002b06:	f822 3b02 	strh.w	r3, [r2], #2
          hspi->RxXferCount -= (uint16_t)2UL;
 8002b0a:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002b0e:	6662      	str	r2, [r4, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8002b10:	3b02      	subs	r3, #2
 8002b12:	e786      	b.n	8002a22 <HAL_SPI_Receive+0xf6>
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8002b14:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002b18:	7013      	strb	r3, [r2, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8002b1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	6663      	str	r3, [r4, #100]	; 0x64
          hspi->RxXferCount--;
 8002b20:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8002b24:	3b01      	subs	r3, #1
 8002b26:	e77c      	b.n	8002a22 <HAL_SPI_Receive+0xf6>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b28:	f7fd fe1a 	bl	8000760 <HAL_GetTick>
 8002b2c:	1b40      	subs	r0, r0, r5
 8002b2e:	4286      	cmp	r6, r0
 8002b30:	f63f af61 	bhi.w	80029f6 <HAL_SPI_Receive+0xca>
 8002b34:	1c73      	adds	r3, r6, #1
 8002b36:	f43f af5e 	beq.w	80029f6 <HAL_SPI_Receive+0xca>
 8002b3a:	e7a1      	b.n	8002a80 <HAL_SPI_Receive+0x154>
 8002b3c:	0000      	movs	r0, r0
	...

08002b40 <UART_SetConfig>:
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8002b40:	6803      	ldr	r3, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002b42:	69c2      	ldr	r2, [r0, #28]
 8002b44:	6881      	ldr	r1, [r0, #8]
{
 8002b46:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002b4a:	4605      	mov	r5, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002b4c:	6900      	ldr	r0, [r0, #16]
  tmpreg |= (uint32_t)huart->FifoMode;
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002b4e:	681c      	ldr	r4, [r3, #0]
{
 8002b50:	b087      	sub	sp, #28
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002b52:	4301      	orrs	r1, r0
 8002b54:	6968      	ldr	r0, [r5, #20]
 8002b56:	4301      	orrs	r1, r0
  tmpreg |= (uint32_t)huart->FifoMode;
 8002b58:	6e68      	ldr	r0, [r5, #100]	; 0x64
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002b5a:	4311      	orrs	r1, r2
  tmpreg |= (uint32_t)huart->FifoMode;
 8002b5c:	4301      	orrs	r1, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002b5e:	48bb      	ldr	r0, [pc, #748]	; (8002e4c <UART_SetConfig+0x30c>)
 8002b60:	4020      	ands	r0, r4
 8002b62:	4301      	orrs	r1, r0

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b64:	68e8      	ldr	r0, [r5, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002b66:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b68:	6859      	ldr	r1, [r3, #4]
 8002b6a:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8002b6e:	4301      	orrs	r1, r0
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002b70:	69a8      	ldr	r0, [r5, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b72:	6059      	str	r1, [r3, #4]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002b74:	49b6      	ldr	r1, [pc, #728]	; (8002e50 <UART_SetConfig+0x310>)
 8002b76:	428b      	cmp	r3, r1
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002b78:	bf1c      	itt	ne
 8002b7a:	6a29      	ldrne	r1, [r5, #32]
 8002b7c:	4308      	orrne	r0, r1
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002b7e:	6899      	ldr	r1, [r3, #8]
 8002b80:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 8002b84:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8002b88:	4301      	orrs	r1, r0

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002b8a:	6a68      	ldr	r0, [r5, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002b8c:	6099      	str	r1, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002b8e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b90:	f021 010f 	bic.w	r1, r1, #15
 8002b94:	4301      	orrs	r1, r0
 8002b96:	62d9      	str	r1, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b98:	49ae      	ldr	r1, [pc, #696]	; (8002e54 <UART_SetConfig+0x314>)
 8002b9a:	428b      	cmp	r3, r1
 8002b9c:	d11d      	bne.n	8002bda <UART_SetConfig+0x9a>
 8002b9e:	4bae      	ldr	r3, [pc, #696]	; (8002e58 <UART_SetConfig+0x318>)
 8002ba0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ba2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ba6:	2b28      	cmp	r3, #40	; 0x28
 8002ba8:	f200 875e 	bhi.w	8003a68 <UART_SetConfig+0xf28>
 8002bac:	49ab      	ldr	r1, [pc, #684]	; (8002e5c <UART_SetConfig+0x31c>)
 8002bae:	5ccc      	ldrb	r4, [r1, r3]
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002bb0:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002bb4:	f040 875f 	bne.w	8003a76 <UART_SetConfig+0xf36>
  {
    switch (clocksource)
 8002bb8:	2c08      	cmp	r4, #8
 8002bba:	f000 84de 	beq.w	800357a <UART_SetConfig+0xa3a>
 8002bbe:	f200 83ba 	bhi.w	8003336 <UART_SetConfig+0x7f6>
 8002bc2:	2c01      	cmp	r4, #1
 8002bc4:	f000 8432 	beq.w	800342c <UART_SetConfig+0x8ec>
 8002bc8:	f0c0 83f4 	bcc.w	80033b4 <UART_SetConfig+0x874>
 8002bcc:	2c04      	cmp	r4, #4
 8002bce:	f000 84af 	beq.w	8003530 <UART_SetConfig+0x9f0>
        break;
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        break;
      default:
        ret = HAL_ERROR;
 8002bd2:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	f000 bc50 	b.w	800347a <UART_SetConfig+0x93a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002bda:	49a1      	ldr	r1, [pc, #644]	; (8002e60 <UART_SetConfig+0x320>)
 8002bdc:	428b      	cmp	r3, r1
 8002bde:	d108      	bne.n	8002bf2 <UART_SetConfig+0xb2>
 8002be0:	4b9d      	ldr	r3, [pc, #628]	; (8002e58 <UART_SetConfig+0x318>)
 8002be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002be4:	f003 0307 	and.w	r3, r3, #7
 8002be8:	2b05      	cmp	r3, #5
 8002bea:	f200 873a 	bhi.w	8003a62 <UART_SetConfig+0xf22>
 8002bee:	499d      	ldr	r1, [pc, #628]	; (8002e64 <UART_SetConfig+0x324>)
 8002bf0:	e7dd      	b.n	8002bae <UART_SetConfig+0x6e>
 8002bf2:	499d      	ldr	r1, [pc, #628]	; (8002e68 <UART_SetConfig+0x328>)
 8002bf4:	428b      	cmp	r3, r1
 8002bf6:	d108      	bne.n	8002c0a <UART_SetConfig+0xca>
 8002bf8:	4b97      	ldr	r3, [pc, #604]	; (8002e58 <UART_SetConfig+0x318>)
 8002bfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bfc:	f003 0307 	and.w	r3, r3, #7
 8002c00:	2b05      	cmp	r3, #5
 8002c02:	f200 872e 	bhi.w	8003a62 <UART_SetConfig+0xf22>
 8002c06:	4999      	ldr	r1, [pc, #612]	; (8002e6c <UART_SetConfig+0x32c>)
 8002c08:	e7d1      	b.n	8002bae <UART_SetConfig+0x6e>
 8002c0a:	4999      	ldr	r1, [pc, #612]	; (8002e70 <UART_SetConfig+0x330>)
 8002c0c:	428b      	cmp	r3, r1
 8002c0e:	d108      	bne.n	8002c22 <UART_SetConfig+0xe2>
 8002c10:	4b91      	ldr	r3, [pc, #580]	; (8002e58 <UART_SetConfig+0x318>)
 8002c12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c14:	f003 0307 	and.w	r3, r3, #7
 8002c18:	2b05      	cmp	r3, #5
 8002c1a:	f200 8722 	bhi.w	8003a62 <UART_SetConfig+0xf22>
 8002c1e:	4995      	ldr	r1, [pc, #596]	; (8002e74 <UART_SetConfig+0x334>)
 8002c20:	e7c5      	b.n	8002bae <UART_SetConfig+0x6e>
 8002c22:	4995      	ldr	r1, [pc, #596]	; (8002e78 <UART_SetConfig+0x338>)
 8002c24:	428b      	cmp	r3, r1
 8002c26:	d108      	bne.n	8002c3a <UART_SetConfig+0xfa>
 8002c28:	4b8b      	ldr	r3, [pc, #556]	; (8002e58 <UART_SetConfig+0x318>)
 8002c2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c2c:	f003 0307 	and.w	r3, r3, #7
 8002c30:	2b05      	cmp	r3, #5
 8002c32:	f200 8716 	bhi.w	8003a62 <UART_SetConfig+0xf22>
 8002c36:	4991      	ldr	r1, [pc, #580]	; (8002e7c <UART_SetConfig+0x33c>)
 8002c38:	e7b9      	b.n	8002bae <UART_SetConfig+0x6e>
 8002c3a:	4991      	ldr	r1, [pc, #580]	; (8002e80 <UART_SetConfig+0x340>)
 8002c3c:	428b      	cmp	r3, r1
 8002c3e:	d108      	bne.n	8002c52 <UART_SetConfig+0x112>
 8002c40:	4b85      	ldr	r3, [pc, #532]	; (8002e58 <UART_SetConfig+0x318>)
 8002c42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c44:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c48:	2b28      	cmp	r3, #40	; 0x28
 8002c4a:	f200 870a 	bhi.w	8003a62 <UART_SetConfig+0xf22>
 8002c4e:	498d      	ldr	r1, [pc, #564]	; (8002e84 <UART_SetConfig+0x344>)
 8002c50:	e7ad      	b.n	8002bae <UART_SetConfig+0x6e>
 8002c52:	498d      	ldr	r1, [pc, #564]	; (8002e88 <UART_SetConfig+0x348>)
 8002c54:	428b      	cmp	r3, r1
 8002c56:	d108      	bne.n	8002c6a <UART_SetConfig+0x12a>
 8002c58:	4b7f      	ldr	r3, [pc, #508]	; (8002e58 <UART_SetConfig+0x318>)
 8002c5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c5c:	f003 0307 	and.w	r3, r3, #7
 8002c60:	2b05      	cmp	r3, #5
 8002c62:	f200 86fe 	bhi.w	8003a62 <UART_SetConfig+0xf22>
 8002c66:	4989      	ldr	r1, [pc, #548]	; (8002e8c <UART_SetConfig+0x34c>)
 8002c68:	e7a1      	b.n	8002bae <UART_SetConfig+0x6e>
 8002c6a:	4989      	ldr	r1, [pc, #548]	; (8002e90 <UART_SetConfig+0x350>)
 8002c6c:	428b      	cmp	r3, r1
 8002c6e:	d108      	bne.n	8002c82 <UART_SetConfig+0x142>
 8002c70:	4b79      	ldr	r3, [pc, #484]	; (8002e58 <UART_SetConfig+0x318>)
 8002c72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c74:	f003 0307 	and.w	r3, r3, #7
 8002c78:	2b05      	cmp	r3, #5
 8002c7a:	f200 86f2 	bhi.w	8003a62 <UART_SetConfig+0xf22>
 8002c7e:	4985      	ldr	r1, [pc, #532]	; (8002e94 <UART_SetConfig+0x354>)
 8002c80:	e795      	b.n	8002bae <UART_SetConfig+0x6e>
 8002c82:	4973      	ldr	r1, [pc, #460]	; (8002e50 <UART_SetConfig+0x310>)
 8002c84:	428b      	cmp	r3, r1
 8002c86:	f040 86ec 	bne.w	8003a62 <UART_SetConfig+0xf22>
 8002c8a:	4b73      	ldr	r3, [pc, #460]	; (8002e58 <UART_SetConfig+0x318>)
 8002c8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c8e:	f003 0307 	and.w	r3, r3, #7
 8002c92:	2b05      	cmp	r3, #5
 8002c94:	d901      	bls.n	8002c9a <UART_SetConfig+0x15a>
        ret = HAL_ERROR;
 8002c96:	2201      	movs	r2, #1
 8002c98:	e0a6      	b.n	8002de8 <UART_SetConfig+0x2a8>
 8002c9a:	4a7f      	ldr	r2, [pc, #508]	; (8002e98 <UART_SetConfig+0x358>)
 8002c9c:	5cd4      	ldrb	r4, [r2, r3]
    switch (clocksource)
 8002c9e:	2c08      	cmp	r4, #8
 8002ca0:	f000 80c8 	beq.w	8002e34 <UART_SetConfig+0x2f4>
 8002ca4:	d82f      	bhi.n	8002d06 <UART_SetConfig+0x1c6>
 8002ca6:	2c02      	cmp	r4, #2
 8002ca8:	d07d      	beq.n	8002da6 <UART_SetConfig+0x266>
 8002caa:	2c04      	cmp	r4, #4
 8002cac:	d1f3      	bne.n	8002c96 <UART_SetConfig+0x156>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8002cae:	4668      	mov	r0, sp
 8002cb0:	f7ff f952 	bl	8001f58 <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002cb4:	9a01      	ldr	r2, [sp, #4]
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002cb6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	f000 80c0 	beq.w	8002e3e <UART_SetConfig+0x2fe>
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	f000 80bf 	beq.w	8002e42 <UART_SetConfig+0x302>
 8002cc4:	2b02      	cmp	r3, #2
 8002cc6:	f000 80be 	beq.w	8002e46 <UART_SetConfig+0x306>
 8002cca:	2b03      	cmp	r3, #3
 8002ccc:	f000 80e8 	beq.w	8002ea0 <UART_SetConfig+0x360>
 8002cd0:	2b04      	cmp	r3, #4
 8002cd2:	f000 80ab 	beq.w	8002e2c <UART_SetConfig+0x2ec>
 8002cd6:	2b05      	cmp	r3, #5
 8002cd8:	f000 80e4 	beq.w	8002ea4 <UART_SetConfig+0x364>
 8002cdc:	2b06      	cmp	r3, #6
 8002cde:	f000 80e3 	beq.w	8002ea8 <UART_SetConfig+0x368>
 8002ce2:	2b07      	cmp	r3, #7
 8002ce4:	f000 80e2 	beq.w	8002eac <UART_SetConfig+0x36c>
 8002ce8:	2b08      	cmp	r3, #8
 8002cea:	f000 80e1 	beq.w	8002eb0 <UART_SetConfig+0x370>
 8002cee:	2b09      	cmp	r3, #9
 8002cf0:	f000 80e0 	beq.w	8002eb4 <UART_SetConfig+0x374>
 8002cf4:	2b0a      	cmp	r3, #10
 8002cf6:	f000 80df 	beq.w	8002eb8 <UART_SetConfig+0x378>
 8002cfa:	2b0b      	cmp	r3, #11
 8002cfc:	bf14      	ite	ne
 8002cfe:	2301      	movne	r3, #1
 8002d00:	f44f 7380 	moveq.w	r3, #256	; 0x100
 8002d04:	e093      	b.n	8002e2e <UART_SetConfig+0x2ee>
    switch (clocksource)
 8002d06:	2c20      	cmp	r4, #32
 8002d08:	f000 810a 	beq.w	8002f20 <UART_SetConfig+0x3e0>
 8002d0c:	2c40      	cmp	r4, #64	; 0x40
 8002d0e:	f000 8121 	beq.w	8002f54 <UART_SetConfig+0x414>
 8002d12:	2c10      	cmp	r4, #16
 8002d14:	d1bf      	bne.n	8002c96 <UART_SetConfig+0x156>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002d16:	4b50      	ldr	r3, [pc, #320]	; (8002e58 <UART_SetConfig+0x318>)
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	0692      	lsls	r2, r2, #26
 8002d1c:	f140 80e4 	bpl.w	8002ee8 <UART_SetConfig+0x3a8>
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	4b5e      	ldr	r3, [pc, #376]	; (8002e9c <UART_SetConfig+0x35c>)
 8002d24:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8002d28:	40d3      	lsrs	r3, r2
 8002d2a:	2800      	cmp	r0, #0
 8002d2c:	f000 80c6 	beq.w	8002ebc <UART_SetConfig+0x37c>
 8002d30:	2801      	cmp	r0, #1
 8002d32:	f000 80c5 	beq.w	8002ec0 <UART_SetConfig+0x380>
 8002d36:	2802      	cmp	r0, #2
 8002d38:	f000 80c4 	beq.w	8002ec4 <UART_SetConfig+0x384>
 8002d3c:	2803      	cmp	r0, #3
 8002d3e:	f000 80c3 	beq.w	8002ec8 <UART_SetConfig+0x388>
 8002d42:	2804      	cmp	r0, #4
 8002d44:	f000 80c2 	beq.w	8002ecc <UART_SetConfig+0x38c>
 8002d48:	2805      	cmp	r0, #5
 8002d4a:	f000 80c1 	beq.w	8002ed0 <UART_SetConfig+0x390>
 8002d4e:	2806      	cmp	r0, #6
 8002d50:	f000 80c0 	beq.w	8002ed4 <UART_SetConfig+0x394>
 8002d54:	2807      	cmp	r0, #7
 8002d56:	f000 80bf 	beq.w	8002ed8 <UART_SetConfig+0x398>
 8002d5a:	2808      	cmp	r0, #8
 8002d5c:	f000 80be 	beq.w	8002edc <UART_SetConfig+0x39c>
 8002d60:	2809      	cmp	r0, #9
 8002d62:	f000 80bd 	beq.w	8002ee0 <UART_SetConfig+0x3a0>
 8002d66:	280a      	cmp	r0, #10
 8002d68:	f000 80bc 	beq.w	8002ee4 <UART_SetConfig+0x3a4>
 8002d6c:	280b      	cmp	r0, #11
 8002d6e:	bf14      	ite	ne
 8002d70:	2001      	movne	r0, #1
 8002d72:	f44f 7080 	moveq.w	r0, #256	; 0x100
 8002d76:	fbb3 f2f0 	udiv	r2, r3, r0
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002d7a:	686e      	ldr	r6, [r5, #4]
 8002d7c:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d888      	bhi.n	8002c96 <UART_SetConfig+0x156>
 8002d84:	ebb2 3f06 	cmp.w	r2, r6, lsl #12
 8002d88:	d885      	bhi.n	8002c96 <UART_SetConfig+0x156>
        switch (clocksource)
 8002d8a:	2c08      	cmp	r4, #8
 8002d8c:	f000 81d2 	beq.w	8003134 <UART_SetConfig+0x5f4>
 8002d90:	f200 8143 	bhi.w	800301a <UART_SetConfig+0x4da>
 8002d94:	2c02      	cmp	r4, #2
 8002d96:	f000 818d 	beq.w	80030b4 <UART_SetConfig+0x574>
 8002d9a:	2c04      	cmp	r4, #4
 8002d9c:	f000 81c5 	beq.w	800312a <UART_SetConfig+0x5ea>
            ret = HAL_ERROR;
 8002da0:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8002da2:	2000      	movs	r0, #0
 8002da4:	e1b8      	b.n	8003118 <UART_SetConfig+0x5d8>
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002da6:	f7ff f8c5 	bl	8001f34 <HAL_RCCEx_GetD3PCLK1Freq>
 8002daa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002dac:	b343      	cbz	r3, 8002e00 <UART_SetConfig+0x2c0>
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d028      	beq.n	8002e04 <UART_SetConfig+0x2c4>
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d028      	beq.n	8002e08 <UART_SetConfig+0x2c8>
 8002db6:	2b03      	cmp	r3, #3
 8002db8:	d028      	beq.n	8002e0c <UART_SetConfig+0x2cc>
 8002dba:	2b04      	cmp	r3, #4
 8002dbc:	d028      	beq.n	8002e10 <UART_SetConfig+0x2d0>
 8002dbe:	2b05      	cmp	r3, #5
 8002dc0:	d028      	beq.n	8002e14 <UART_SetConfig+0x2d4>
 8002dc2:	2b06      	cmp	r3, #6
 8002dc4:	d028      	beq.n	8002e18 <UART_SetConfig+0x2d8>
 8002dc6:	2b07      	cmp	r3, #7
 8002dc8:	d028      	beq.n	8002e1c <UART_SetConfig+0x2dc>
 8002dca:	2b08      	cmp	r3, #8
 8002dcc:	d028      	beq.n	8002e20 <UART_SetConfig+0x2e0>
 8002dce:	2b09      	cmp	r3, #9
 8002dd0:	d028      	beq.n	8002e24 <UART_SetConfig+0x2e4>
 8002dd2:	2b0a      	cmp	r3, #10
 8002dd4:	d028      	beq.n	8002e28 <UART_SetConfig+0x2e8>
 8002dd6:	2b0b      	cmp	r3, #11
 8002dd8:	bf14      	ite	ne
 8002dda:	2301      	movne	r3, #1
 8002ddc:	f44f 7380 	moveq.w	r3, #256	; 0x100
 8002de0:	fbb0 f2f3 	udiv	r2, r0, r3
    if (lpuart_ker_ck_pres != 0U)
 8002de4:	2a00      	cmp	r2, #0
 8002de6:	d1c8      	bne.n	8002d7a <UART_SetConfig+0x23a>
      ret = HAL_ERROR;
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002de8:	2301      	movs	r3, #1
  /* Clear ISR function pointers */
  huart->RxISR = NULL;
  huart->TxISR = NULL;

  return ret;
}
 8002dea:	4610      	mov	r0, r2
  huart->NbTxDataToProcess = 1;
 8002dec:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8002df0:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
  huart->RxISR = NULL;
 8002df4:	2300      	movs	r3, #0
 8002df6:	66eb      	str	r3, [r5, #108]	; 0x6c
  huart->TxISR = NULL;
 8002df8:	672b      	str	r3, [r5, #112]	; 0x70
}
 8002dfa:	b007      	add	sp, #28
 8002dfc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002e00:	2301      	movs	r3, #1
 8002e02:	e7ed      	b.n	8002de0 <UART_SetConfig+0x2a0>
 8002e04:	4623      	mov	r3, r4
 8002e06:	e7eb      	b.n	8002de0 <UART_SetConfig+0x2a0>
 8002e08:	2304      	movs	r3, #4
 8002e0a:	e7e9      	b.n	8002de0 <UART_SetConfig+0x2a0>
 8002e0c:	2306      	movs	r3, #6
 8002e0e:	e7e7      	b.n	8002de0 <UART_SetConfig+0x2a0>
 8002e10:	2308      	movs	r3, #8
 8002e12:	e7e5      	b.n	8002de0 <UART_SetConfig+0x2a0>
 8002e14:	230a      	movs	r3, #10
 8002e16:	e7e3      	b.n	8002de0 <UART_SetConfig+0x2a0>
 8002e18:	230c      	movs	r3, #12
 8002e1a:	e7e1      	b.n	8002de0 <UART_SetConfig+0x2a0>
 8002e1c:	2310      	movs	r3, #16
 8002e1e:	e7df      	b.n	8002de0 <UART_SetConfig+0x2a0>
 8002e20:	2320      	movs	r3, #32
 8002e22:	e7dd      	b.n	8002de0 <UART_SetConfig+0x2a0>
 8002e24:	2340      	movs	r3, #64	; 0x40
 8002e26:	e7db      	b.n	8002de0 <UART_SetConfig+0x2a0>
 8002e28:	2380      	movs	r3, #128	; 0x80
 8002e2a:	e7d9      	b.n	8002de0 <UART_SetConfig+0x2a0>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002e2c:	2308      	movs	r3, #8
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002e2e:	fbb2 f2f3 	udiv	r2, r2, r3
        break;
 8002e32:	e7d7      	b.n	8002de4 <UART_SetConfig+0x2a4>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8002e34:	a803      	add	r0, sp, #12
 8002e36:	f7ff f939 	bl	80020ac <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002e3a:	9a04      	ldr	r2, [sp, #16]
 8002e3c:	e73b      	b.n	8002cb6 <UART_SetConfig+0x176>
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e7f5      	b.n	8002e2e <UART_SetConfig+0x2ee>
 8002e42:	2302      	movs	r3, #2
 8002e44:	e7f3      	b.n	8002e2e <UART_SetConfig+0x2ee>
 8002e46:	2304      	movs	r3, #4
 8002e48:	e7f1      	b.n	8002e2e <UART_SetConfig+0x2ee>
 8002e4a:	bf00      	nop
 8002e4c:	cfff69f3 	.word	0xcfff69f3
 8002e50:	58000c00 	.word	0x58000c00
 8002e54:	40011000 	.word	0x40011000
 8002e58:	58024400 	.word	0x58024400
 8002e5c:	08006924 	.word	0x08006924
 8002e60:	40004400 	.word	0x40004400
 8002e64:	0800694d 	.word	0x0800694d
 8002e68:	40004800 	.word	0x40004800
 8002e6c:	0800694d 	.word	0x0800694d
 8002e70:	40004c00 	.word	0x40004c00
 8002e74:	0800694d 	.word	0x0800694d
 8002e78:	40005000 	.word	0x40005000
 8002e7c:	0800694d 	.word	0x0800694d
 8002e80:	40011400 	.word	0x40011400
 8002e84:	08006924 	.word	0x08006924
 8002e88:	40007800 	.word	0x40007800
 8002e8c:	0800694d 	.word	0x0800694d
 8002e90:	40007c00 	.word	0x40007c00
 8002e94:	0800694d 	.word	0x0800694d
 8002e98:	08006953 	.word	0x08006953
 8002e9c:	03d09000 	.word	0x03d09000
 8002ea0:	2306      	movs	r3, #6
 8002ea2:	e7c4      	b.n	8002e2e <UART_SetConfig+0x2ee>
 8002ea4:	230a      	movs	r3, #10
 8002ea6:	e7c2      	b.n	8002e2e <UART_SetConfig+0x2ee>
 8002ea8:	230c      	movs	r3, #12
 8002eaa:	e7c0      	b.n	8002e2e <UART_SetConfig+0x2ee>
 8002eac:	2310      	movs	r3, #16
 8002eae:	e7be      	b.n	8002e2e <UART_SetConfig+0x2ee>
 8002eb0:	2320      	movs	r3, #32
 8002eb2:	e7bc      	b.n	8002e2e <UART_SetConfig+0x2ee>
 8002eb4:	2340      	movs	r3, #64	; 0x40
 8002eb6:	e7ba      	b.n	8002e2e <UART_SetConfig+0x2ee>
 8002eb8:	2380      	movs	r3, #128	; 0x80
 8002eba:	e7b8      	b.n	8002e2e <UART_SetConfig+0x2ee>
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002ebc:	2001      	movs	r0, #1
 8002ebe:	e75a      	b.n	8002d76 <UART_SetConfig+0x236>
 8002ec0:	2002      	movs	r0, #2
 8002ec2:	e758      	b.n	8002d76 <UART_SetConfig+0x236>
 8002ec4:	2004      	movs	r0, #4
 8002ec6:	e756      	b.n	8002d76 <UART_SetConfig+0x236>
 8002ec8:	2006      	movs	r0, #6
 8002eca:	e754      	b.n	8002d76 <UART_SetConfig+0x236>
 8002ecc:	2008      	movs	r0, #8
 8002ece:	e752      	b.n	8002d76 <UART_SetConfig+0x236>
 8002ed0:	200a      	movs	r0, #10
 8002ed2:	e750      	b.n	8002d76 <UART_SetConfig+0x236>
 8002ed4:	200c      	movs	r0, #12
 8002ed6:	e74e      	b.n	8002d76 <UART_SetConfig+0x236>
 8002ed8:	2010      	movs	r0, #16
 8002eda:	e74c      	b.n	8002d76 <UART_SetConfig+0x236>
 8002edc:	2020      	movs	r0, #32
 8002ede:	e74a      	b.n	8002d76 <UART_SetConfig+0x236>
 8002ee0:	2040      	movs	r0, #64	; 0x40
 8002ee2:	e748      	b.n	8002d76 <UART_SetConfig+0x236>
 8002ee4:	2080      	movs	r0, #128	; 0x80
 8002ee6:	e746      	b.n	8002d76 <UART_SetConfig+0x236>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002ee8:	2800      	cmp	r0, #0
 8002eea:	d04f      	beq.n	8002f8c <UART_SetConfig+0x44c>
 8002eec:	2801      	cmp	r0, #1
 8002eee:	d04f      	beq.n	8002f90 <UART_SetConfig+0x450>
 8002ef0:	2802      	cmp	r0, #2
 8002ef2:	d04f      	beq.n	8002f94 <UART_SetConfig+0x454>
 8002ef4:	2803      	cmp	r0, #3
 8002ef6:	d04f      	beq.n	8002f98 <UART_SetConfig+0x458>
 8002ef8:	2804      	cmp	r0, #4
 8002efa:	d04f      	beq.n	8002f9c <UART_SetConfig+0x45c>
 8002efc:	2805      	cmp	r0, #5
 8002efe:	d04f      	beq.n	8002fa0 <UART_SetConfig+0x460>
 8002f00:	2806      	cmp	r0, #6
 8002f02:	d04f      	beq.n	8002fa4 <UART_SetConfig+0x464>
 8002f04:	2807      	cmp	r0, #7
 8002f06:	d04f      	beq.n	8002fa8 <UART_SetConfig+0x468>
 8002f08:	2808      	cmp	r0, #8
 8002f0a:	d04f      	beq.n	8002fac <UART_SetConfig+0x46c>
 8002f0c:	2809      	cmp	r0, #9
 8002f0e:	d04f      	beq.n	8002fb0 <UART_SetConfig+0x470>
 8002f10:	280a      	cmp	r0, #10
 8002f12:	d051      	beq.n	8002fb8 <UART_SetConfig+0x478>
 8002f14:	4aad      	ldr	r2, [pc, #692]	; (80031cc <UART_SetConfig+0x68c>)
 8002f16:	4bae      	ldr	r3, [pc, #696]	; (80031d0 <UART_SetConfig+0x690>)
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002f18:	280b      	cmp	r0, #11
 8002f1a:	bf18      	it	ne
 8002f1c:	461a      	movne	r2, r3
 8002f1e:	e72c      	b.n	8002d7a <UART_SetConfig+0x23a>
 8002f20:	2800      	cmp	r0, #0
 8002f22:	d041      	beq.n	8002fa8 <UART_SetConfig+0x468>
 8002f24:	2801      	cmp	r0, #1
 8002f26:	d041      	beq.n	8002fac <UART_SetConfig+0x46c>
 8002f28:	2802      	cmp	r0, #2
 8002f2a:	d041      	beq.n	8002fb0 <UART_SetConfig+0x470>
 8002f2c:	2803      	cmp	r0, #3
 8002f2e:	d041      	beq.n	8002fb4 <UART_SetConfig+0x474>
 8002f30:	2804      	cmp	r0, #4
 8002f32:	d041      	beq.n	8002fb8 <UART_SetConfig+0x478>
 8002f34:	2805      	cmp	r0, #5
 8002f36:	d041      	beq.n	8002fbc <UART_SetConfig+0x47c>
 8002f38:	2806      	cmp	r0, #6
 8002f3a:	d041      	beq.n	8002fc0 <UART_SetConfig+0x480>
 8002f3c:	2807      	cmp	r0, #7
 8002f3e:	d041      	beq.n	8002fc4 <UART_SetConfig+0x484>
 8002f40:	2808      	cmp	r0, #8
 8002f42:	d041      	beq.n	8002fc8 <UART_SetConfig+0x488>
 8002f44:	2809      	cmp	r0, #9
 8002f46:	d041      	beq.n	8002fcc <UART_SetConfig+0x48c>
 8002f48:	280a      	cmp	r0, #10
 8002f4a:	d042      	beq.n	8002fd2 <UART_SetConfig+0x492>
 8002f4c:	f643 5209 	movw	r2, #15625	; 0x3d09
 8002f50:	4ba0      	ldr	r3, [pc, #640]	; (80031d4 <UART_SetConfig+0x694>)
 8002f52:	e7e1      	b.n	8002f18 <UART_SetConfig+0x3d8>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002f54:	2800      	cmp	r0, #0
 8002f56:	d03f      	beq.n	8002fd8 <UART_SetConfig+0x498>
 8002f58:	2801      	cmp	r0, #1
 8002f5a:	d040      	beq.n	8002fde <UART_SetConfig+0x49e>
 8002f5c:	2802      	cmp	r0, #2
 8002f5e:	d041      	beq.n	8002fe4 <UART_SetConfig+0x4a4>
 8002f60:	2803      	cmp	r0, #3
 8002f62:	d042      	beq.n	8002fea <UART_SetConfig+0x4aa>
 8002f64:	2804      	cmp	r0, #4
 8002f66:	d043      	beq.n	8002ff0 <UART_SetConfig+0x4b0>
 8002f68:	2805      	cmp	r0, #5
 8002f6a:	d044      	beq.n	8002ff6 <UART_SetConfig+0x4b6>
 8002f6c:	2806      	cmp	r0, #6
 8002f6e:	d045      	beq.n	8002ffc <UART_SetConfig+0x4bc>
 8002f70:	2807      	cmp	r0, #7
 8002f72:	d046      	beq.n	8003002 <UART_SetConfig+0x4c2>
 8002f74:	2808      	cmp	r0, #8
 8002f76:	d047      	beq.n	8003008 <UART_SetConfig+0x4c8>
 8002f78:	2809      	cmp	r0, #9
 8002f7a:	d048      	beq.n	800300e <UART_SetConfig+0x4ce>
 8002f7c:	280a      	cmp	r0, #10
 8002f7e:	d049      	beq.n	8003014 <UART_SetConfig+0x4d4>
 8002f80:	280b      	cmp	r0, #11
 8002f82:	bf0c      	ite	eq
 8002f84:	2280      	moveq	r2, #128	; 0x80
 8002f86:	f44f 4200 	movne.w	r2, #32768	; 0x8000
 8002f8a:	e6f6      	b.n	8002d7a <UART_SetConfig+0x23a>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002f8c:	4a90      	ldr	r2, [pc, #576]	; (80031d0 <UART_SetConfig+0x690>)
 8002f8e:	e6f4      	b.n	8002d7a <UART_SetConfig+0x23a>
 8002f90:	4a91      	ldr	r2, [pc, #580]	; (80031d8 <UART_SetConfig+0x698>)
 8002f92:	e6f2      	b.n	8002d7a <UART_SetConfig+0x23a>
 8002f94:	4a91      	ldr	r2, [pc, #580]	; (80031dc <UART_SetConfig+0x69c>)
 8002f96:	e6f0      	b.n	8002d7a <UART_SetConfig+0x23a>
 8002f98:	4a91      	ldr	r2, [pc, #580]	; (80031e0 <UART_SetConfig+0x6a0>)
 8002f9a:	e6ee      	b.n	8002d7a <UART_SetConfig+0x23a>
 8002f9c:	4a91      	ldr	r2, [pc, #580]	; (80031e4 <UART_SetConfig+0x6a4>)
 8002f9e:	e6ec      	b.n	8002d7a <UART_SetConfig+0x23a>
 8002fa0:	4a91      	ldr	r2, [pc, #580]	; (80031e8 <UART_SetConfig+0x6a8>)
 8002fa2:	e6ea      	b.n	8002d7a <UART_SetConfig+0x23a>
 8002fa4:	4a91      	ldr	r2, [pc, #580]	; (80031ec <UART_SetConfig+0x6ac>)
 8002fa6:	e6e8      	b.n	8002d7a <UART_SetConfig+0x23a>
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002fa8:	4a8a      	ldr	r2, [pc, #552]	; (80031d4 <UART_SetConfig+0x694>)
 8002faa:	e6e6      	b.n	8002d7a <UART_SetConfig+0x23a>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002fac:	4a90      	ldr	r2, [pc, #576]	; (80031f0 <UART_SetConfig+0x6b0>)
 8002fae:	e6e4      	b.n	8002d7a <UART_SetConfig+0x23a>
 8002fb0:	4a90      	ldr	r2, [pc, #576]	; (80031f4 <UART_SetConfig+0x6b4>)
 8002fb2:	e6e2      	b.n	8002d7a <UART_SetConfig+0x23a>
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002fb4:	4a90      	ldr	r2, [pc, #576]	; (80031f8 <UART_SetConfig+0x6b8>)
 8002fb6:	e6e0      	b.n	8002d7a <UART_SetConfig+0x23a>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002fb8:	4a90      	ldr	r2, [pc, #576]	; (80031fc <UART_SetConfig+0x6bc>)
 8002fba:	e6de      	b.n	8002d7a <UART_SetConfig+0x23a>
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002fbc:	4a90      	ldr	r2, [pc, #576]	; (8003200 <UART_SetConfig+0x6c0>)
 8002fbe:	e6dc      	b.n	8002d7a <UART_SetConfig+0x23a>
 8002fc0:	4a90      	ldr	r2, [pc, #576]	; (8003204 <UART_SetConfig+0x6c4>)
 8002fc2:	e6da      	b.n	8002d7a <UART_SetConfig+0x23a>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002fc4:	4a81      	ldr	r2, [pc, #516]	; (80031cc <UART_SetConfig+0x68c>)
 8002fc6:	e6d8      	b.n	8002d7a <UART_SetConfig+0x23a>
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002fc8:	4a8f      	ldr	r2, [pc, #572]	; (8003208 <UART_SetConfig+0x6c8>)
 8002fca:	e6d6      	b.n	8002d7a <UART_SetConfig+0x23a>
 8002fcc:	f24f 4224 	movw	r2, #62500	; 0xf424
 8002fd0:	e6d3      	b.n	8002d7a <UART_SetConfig+0x23a>
 8002fd2:	f647 2212 	movw	r2, #31250	; 0x7a12
 8002fd6:	e6d0      	b.n	8002d7a <UART_SetConfig+0x23a>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002fd8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002fdc:	e6cd      	b.n	8002d7a <UART_SetConfig+0x23a>
 8002fde:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002fe2:	e6ca      	b.n	8002d7a <UART_SetConfig+0x23a>
 8002fe4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002fe8:	e6c7      	b.n	8002d7a <UART_SetConfig+0x23a>
 8002fea:	f241 5255 	movw	r2, #5461	; 0x1555
 8002fee:	e6c4      	b.n	8002d7a <UART_SetConfig+0x23a>
 8002ff0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002ff4:	e6c1      	b.n	8002d7a <UART_SetConfig+0x23a>
 8002ff6:	f640 42cc 	movw	r2, #3276	; 0xccc
 8002ffa:	e6be      	b.n	8002d7a <UART_SetConfig+0x23a>
 8002ffc:	f640 22aa 	movw	r2, #2730	; 0xaaa
 8003000:	e6bb      	b.n	8002d7a <UART_SetConfig+0x23a>
 8003002:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003006:	e6b8      	b.n	8002d7a <UART_SetConfig+0x23a>
 8003008:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800300c:	e6b5      	b.n	8002d7a <UART_SetConfig+0x23a>
 800300e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003012:	e6b2      	b.n	8002d7a <UART_SetConfig+0x23a>
 8003014:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003018:	e6af      	b.n	8002d7a <UART_SetConfig+0x23a>
        switch (clocksource)
 800301a:	2c20      	cmp	r4, #32
 800301c:	f000 811c 	beq.w	8003258 <UART_SetConfig+0x718>
 8003020:	2c40      	cmp	r4, #64	; 0x40
 8003022:	f000 814f 	beq.w	80032c4 <UART_SetConfig+0x784>
 8003026:	2c10      	cmp	r4, #16
 8003028:	f47f aeba 	bne.w	8002da0 <UART_SetConfig+0x260>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800302c:	4a77      	ldr	r2, [pc, #476]	; (800320c <UART_SetConfig+0x6cc>)
 800302e:	0874      	lsrs	r4, r6, #1
 8003030:	6813      	ldr	r3, [r2, #0]
 8003032:	f013 0f20 	tst.w	r3, #32
 8003036:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003038:	f000 80ad 	beq.w	8003196 <UART_SetConfig+0x656>
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800303c:	6812      	ldr	r2, [r2, #0]
 800303e:	4864      	ldr	r0, [pc, #400]	; (80031d0 <UART_SetConfig+0x690>)
 8003040:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8003044:	40d0      	lsrs	r0, r2
 8003046:	2b00      	cmp	r3, #0
 8003048:	f000 80a3 	beq.w	8003192 <UART_SetConfig+0x652>
 800304c:	2b01      	cmp	r3, #1
 800304e:	f000 808c 	beq.w	800316a <UART_SetConfig+0x62a>
 8003052:	2b02      	cmp	r3, #2
 8003054:	f000 808b 	beq.w	800316e <UART_SetConfig+0x62e>
 8003058:	2b03      	cmp	r3, #3
 800305a:	f000 808a 	beq.w	8003172 <UART_SetConfig+0x632>
 800305e:	2b04      	cmp	r3, #4
 8003060:	f000 8089 	beq.w	8003176 <UART_SetConfig+0x636>
 8003064:	2b05      	cmp	r3, #5
 8003066:	f000 8088 	beq.w	800317a <UART_SetConfig+0x63a>
 800306a:	2b06      	cmp	r3, #6
 800306c:	f000 8087 	beq.w	800317e <UART_SetConfig+0x63e>
 8003070:	2b07      	cmp	r3, #7
 8003072:	f000 8086 	beq.w	8003182 <UART_SetConfig+0x642>
 8003076:	2b08      	cmp	r3, #8
 8003078:	f000 8085 	beq.w	8003186 <UART_SetConfig+0x646>
 800307c:	2b09      	cmp	r3, #9
 800307e:	f000 8084 	beq.w	800318a <UART_SetConfig+0x64a>
 8003082:	2b0a      	cmp	r3, #10
 8003084:	f000 8083 	beq.w	800318e <UART_SetConfig+0x64e>
 8003088:	2b0b      	cmp	r3, #11
 800308a:	f040 8082 	bne.w	8003192 <UART_SetConfig+0x652>
 800308e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003092:	2300      	movs	r3, #0
 8003094:	2100      	movs	r1, #0
 8003096:	f7fd f97b 	bl	8000390 <__aeabi_uldivmod>
 800309a:	4632      	mov	r2, r6
 800309c:	ea4f 2901 	mov.w	r9, r1, lsl #8
 80030a0:	2300      	movs	r3, #0
 80030a2:	ea4f 2800 	mov.w	r8, r0, lsl #8
 80030a6:	ea49 6910 	orr.w	r9, r9, r0, lsr #24
 80030aa:	eb18 0004 	adds.w	r0, r8, r4
 80030ae:	f149 0100 	adc.w	r1, r9, #0
 80030b2:	e02e      	b.n	8003112 <UART_SetConfig+0x5d2>
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80030b4:	f7fe ff3e 	bl	8001f34 <HAL_RCCEx_GetD3PCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80030b8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d053      	beq.n	8003166 <UART_SetConfig+0x626>
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d03d      	beq.n	800313e <UART_SetConfig+0x5fe>
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d03d      	beq.n	8003142 <UART_SetConfig+0x602>
 80030c6:	2b03      	cmp	r3, #3
 80030c8:	d03d      	beq.n	8003146 <UART_SetConfig+0x606>
 80030ca:	2b04      	cmp	r3, #4
 80030cc:	d03d      	beq.n	800314a <UART_SetConfig+0x60a>
 80030ce:	2b05      	cmp	r3, #5
 80030d0:	d03d      	beq.n	800314e <UART_SetConfig+0x60e>
 80030d2:	2b06      	cmp	r3, #6
 80030d4:	d03d      	beq.n	8003152 <UART_SetConfig+0x612>
 80030d6:	2b07      	cmp	r3, #7
 80030d8:	d03d      	beq.n	8003156 <UART_SetConfig+0x616>
 80030da:	2b08      	cmp	r3, #8
 80030dc:	d03d      	beq.n	800315a <UART_SetConfig+0x61a>
 80030de:	2b09      	cmp	r3, #9
 80030e0:	d03d      	beq.n	800315e <UART_SetConfig+0x61e>
 80030e2:	2b0a      	cmp	r3, #10
 80030e4:	d03d      	beq.n	8003162 <UART_SetConfig+0x622>
 80030e6:	2b0b      	cmp	r3, #11
 80030e8:	d13d      	bne.n	8003166 <UART_SetConfig+0x626>
 80030ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80030ee:	2300      	movs	r3, #0
 80030f0:	2100      	movs	r1, #0
 80030f2:	f7fd f94d 	bl	8000390 <__aeabi_uldivmod>
 80030f6:	686c      	ldr	r4, [r5, #4]
 80030f8:	020f      	lsls	r7, r1, #8
 80030fa:	2300      	movs	r3, #0
 80030fc:	0206      	lsls	r6, r0, #8
 80030fe:	4622      	mov	r2, r4
 8003100:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 8003104:	0860      	lsrs	r0, r4, #1
 8003106:	eb16 0800 	adds.w	r8, r6, r0
 800310a:	f147 0900 	adc.w	r9, r7, #0
 800310e:	4640      	mov	r0, r8
 8003110:	4649      	mov	r1, r9
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003112:	f7fd f93d 	bl	8000390 <__aeabi_uldivmod>
            break;
 8003116:	2200      	movs	r2, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003118:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 800311c:	4b3c      	ldr	r3, [pc, #240]	; (8003210 <UART_SetConfig+0x6d0>)
 800311e:	4299      	cmp	r1, r3
 8003120:	f63f adb9 	bhi.w	8002c96 <UART_SetConfig+0x156>
          huart->Instance->BRR = usartdiv;
 8003124:	682b      	ldr	r3, [r5, #0]
 8003126:	60d8      	str	r0, [r3, #12]
 8003128:	e65e      	b.n	8002de8 <UART_SetConfig+0x2a8>
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800312a:	4668      	mov	r0, sp
 800312c:	f7fe ff14 	bl	8001f58 <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003130:	9801      	ldr	r0, [sp, #4]
 8003132:	e7c1      	b.n	80030b8 <UART_SetConfig+0x578>
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003134:	a803      	add	r0, sp, #12
 8003136:	f7fe ffb9 	bl	80020ac <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800313a:	9804      	ldr	r0, [sp, #16]
 800313c:	e7bc      	b.n	80030b8 <UART_SetConfig+0x578>
 800313e:	2202      	movs	r2, #2
 8003140:	e7d5      	b.n	80030ee <UART_SetConfig+0x5ae>
 8003142:	2204      	movs	r2, #4
 8003144:	e7d3      	b.n	80030ee <UART_SetConfig+0x5ae>
 8003146:	2206      	movs	r2, #6
 8003148:	e7d1      	b.n	80030ee <UART_SetConfig+0x5ae>
 800314a:	2208      	movs	r2, #8
 800314c:	e7cf      	b.n	80030ee <UART_SetConfig+0x5ae>
 800314e:	220a      	movs	r2, #10
 8003150:	e7cd      	b.n	80030ee <UART_SetConfig+0x5ae>
 8003152:	220c      	movs	r2, #12
 8003154:	e7cb      	b.n	80030ee <UART_SetConfig+0x5ae>
 8003156:	2210      	movs	r2, #16
 8003158:	e7c9      	b.n	80030ee <UART_SetConfig+0x5ae>
 800315a:	2220      	movs	r2, #32
 800315c:	e7c7      	b.n	80030ee <UART_SetConfig+0x5ae>
 800315e:	2240      	movs	r2, #64	; 0x40
 8003160:	e7c5      	b.n	80030ee <UART_SetConfig+0x5ae>
 8003162:	2280      	movs	r2, #128	; 0x80
 8003164:	e7c3      	b.n	80030ee <UART_SetConfig+0x5ae>
 8003166:	2201      	movs	r2, #1
 8003168:	e7c1      	b.n	80030ee <UART_SetConfig+0x5ae>
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800316a:	2202      	movs	r2, #2
 800316c:	e791      	b.n	8003092 <UART_SetConfig+0x552>
 800316e:	2204      	movs	r2, #4
 8003170:	e78f      	b.n	8003092 <UART_SetConfig+0x552>
 8003172:	2206      	movs	r2, #6
 8003174:	e78d      	b.n	8003092 <UART_SetConfig+0x552>
 8003176:	2208      	movs	r2, #8
 8003178:	e78b      	b.n	8003092 <UART_SetConfig+0x552>
 800317a:	220a      	movs	r2, #10
 800317c:	e789      	b.n	8003092 <UART_SetConfig+0x552>
 800317e:	220c      	movs	r2, #12
 8003180:	e787      	b.n	8003092 <UART_SetConfig+0x552>
 8003182:	2210      	movs	r2, #16
 8003184:	e785      	b.n	8003092 <UART_SetConfig+0x552>
 8003186:	2220      	movs	r2, #32
 8003188:	e783      	b.n	8003092 <UART_SetConfig+0x552>
 800318a:	2240      	movs	r2, #64	; 0x40
 800318c:	e781      	b.n	8003092 <UART_SetConfig+0x552>
 800318e:	2280      	movs	r2, #128	; 0x80
 8003190:	e77f      	b.n	8003092 <UART_SetConfig+0x552>
 8003192:	2201      	movs	r2, #1
 8003194:	e77d      	b.n	8003092 <UART_SetConfig+0x552>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003196:	2b00      	cmp	r3, #0
 8003198:	d05b      	beq.n	8003252 <UART_SetConfig+0x712>
 800319a:	2b01      	cmp	r3, #1
 800319c:	d03a      	beq.n	8003214 <UART_SetConfig+0x6d4>
 800319e:	2b02      	cmp	r3, #2
 80031a0:	d041      	beq.n	8003226 <UART_SetConfig+0x6e6>
 80031a2:	2b03      	cmp	r3, #3
 80031a4:	d041      	beq.n	800322a <UART_SetConfig+0x6ea>
 80031a6:	2b04      	cmp	r3, #4
 80031a8:	d043      	beq.n	8003232 <UART_SetConfig+0x6f2>
 80031aa:	2b05      	cmp	r3, #5
 80031ac:	d043      	beq.n	8003236 <UART_SetConfig+0x6f6>
 80031ae:	2b06      	cmp	r3, #6
 80031b0:	d043      	beq.n	800323a <UART_SetConfig+0x6fa>
 80031b2:	2b07      	cmp	r3, #7
 80031b4:	d045      	beq.n	8003242 <UART_SetConfig+0x702>
 80031b6:	2b08      	cmp	r3, #8
 80031b8:	d045      	beq.n	8003246 <UART_SetConfig+0x706>
 80031ba:	2b09      	cmp	r3, #9
 80031bc:	d045      	beq.n	800324a <UART_SetConfig+0x70a>
 80031be:	2b0a      	cmp	r3, #10
 80031c0:	d045      	beq.n	800324e <UART_SetConfig+0x70e>
 80031c2:	2b0b      	cmp	r3, #11
 80031c4:	d145      	bne.n	8003252 <UART_SetConfig+0x712>
 80031c6:	4802      	ldr	r0, [pc, #8]	; (80031d0 <UART_SetConfig+0x690>)
 80031c8:	2100      	movs	r1, #0
 80031ca:	e025      	b.n	8003218 <UART_SetConfig+0x6d8>
 80031cc:	0003d090 	.word	0x0003d090
 80031d0:	03d09000 	.word	0x03d09000
 80031d4:	003d0900 	.word	0x003d0900
 80031d8:	01e84800 	.word	0x01e84800
 80031dc:	00f42400 	.word	0x00f42400
 80031e0:	00a2c2aa 	.word	0x00a2c2aa
 80031e4:	007a1200 	.word	0x007a1200
 80031e8:	0061a800 	.word	0x0061a800
 80031ec:	00516155 	.word	0x00516155
 80031f0:	001e8480 	.word	0x001e8480
 80031f4:	000f4240 	.word	0x000f4240
 80031f8:	000a2c2a 	.word	0x000a2c2a
 80031fc:	0007a120 	.word	0x0007a120
 8003200:	00061a80 	.word	0x00061a80
 8003204:	00051615 	.word	0x00051615
 8003208:	0001e848 	.word	0x0001e848
 800320c:	58024400 	.word	0x58024400
 8003210:	000ffcff 	.word	0x000ffcff
 8003214:	48ae      	ldr	r0, [pc, #696]	; (80034d0 <UART_SetConfig+0x990>)
 8003216:	2101      	movs	r1, #1
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003218:	1900      	adds	r0, r0, r4
 800321a:	4632      	mov	r2, r6
 800321c:	f04f 0300 	mov.w	r3, #0
 8003220:	f141 0100 	adc.w	r1, r1, #0
 8003224:	e775      	b.n	8003112 <UART_SetConfig+0x5d2>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003226:	48ab      	ldr	r0, [pc, #684]	; (80034d4 <UART_SetConfig+0x994>)
 8003228:	e7ce      	b.n	80031c8 <UART_SetConfig+0x688>
 800322a:	a1a1      	add	r1, pc, #644	; (adr r1, 80034b0 <UART_SetConfig+0x970>)
 800322c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003230:	e7f2      	b.n	8003218 <UART_SetConfig+0x6d8>
 8003232:	48a9      	ldr	r0, [pc, #676]	; (80034d8 <UART_SetConfig+0x998>)
 8003234:	e7c8      	b.n	80031c8 <UART_SetConfig+0x688>
 8003236:	48a9      	ldr	r0, [pc, #676]	; (80034dc <UART_SetConfig+0x99c>)
 8003238:	e7c6      	b.n	80031c8 <UART_SetConfig+0x688>
 800323a:	a19f      	add	r1, pc, #636	; (adr r1, 80034b8 <UART_SetConfig+0x978>)
 800323c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003240:	e7ea      	b.n	8003218 <UART_SetConfig+0x6d8>
 8003242:	48a7      	ldr	r0, [pc, #668]	; (80034e0 <UART_SetConfig+0x9a0>)
 8003244:	e7c0      	b.n	80031c8 <UART_SetConfig+0x688>
 8003246:	48a7      	ldr	r0, [pc, #668]	; (80034e4 <UART_SetConfig+0x9a4>)
 8003248:	e7be      	b.n	80031c8 <UART_SetConfig+0x688>
 800324a:	48a7      	ldr	r0, [pc, #668]	; (80034e8 <UART_SetConfig+0x9a8>)
 800324c:	e7bc      	b.n	80031c8 <UART_SetConfig+0x688>
 800324e:	48a7      	ldr	r0, [pc, #668]	; (80034ec <UART_SetConfig+0x9ac>)
 8003250:	e7ba      	b.n	80031c8 <UART_SetConfig+0x688>
 8003252:	48a7      	ldr	r0, [pc, #668]	; (80034f0 <UART_SetConfig+0x9b0>)
 8003254:	2103      	movs	r1, #3
 8003256:	e7df      	b.n	8003218 <UART_SetConfig+0x6d8>
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003258:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800325a:	b38b      	cbz	r3, 80032c0 <UART_SetConfig+0x780>
 800325c:	2b01      	cmp	r3, #1
 800325e:	d016      	beq.n	800328e <UART_SetConfig+0x74e>
 8003260:	2b02      	cmp	r3, #2
 8003262:	d016      	beq.n	8003292 <UART_SetConfig+0x752>
 8003264:	2b03      	cmp	r3, #3
 8003266:	d016      	beq.n	8003296 <UART_SetConfig+0x756>
 8003268:	2b04      	cmp	r3, #4
 800326a:	d019      	beq.n	80032a0 <UART_SetConfig+0x760>
 800326c:	2b05      	cmp	r3, #5
 800326e:	d019      	beq.n	80032a4 <UART_SetConfig+0x764>
 8003270:	2b06      	cmp	r3, #6
 8003272:	d019      	beq.n	80032a8 <UART_SetConfig+0x768>
 8003274:	2b07      	cmp	r3, #7
 8003276:	d01b      	beq.n	80032b0 <UART_SetConfig+0x770>
 8003278:	2b08      	cmp	r3, #8
 800327a:	d01b      	beq.n	80032b4 <UART_SetConfig+0x774>
 800327c:	2b09      	cmp	r3, #9
 800327e:	d01b      	beq.n	80032b8 <UART_SetConfig+0x778>
 8003280:	2b0a      	cmp	r3, #10
 8003282:	d01b      	beq.n	80032bc <UART_SetConfig+0x77c>
 8003284:	2b0b      	cmp	r3, #11
 8003286:	d11b      	bne.n	80032c0 <UART_SetConfig+0x780>
 8003288:	489a      	ldr	r0, [pc, #616]	; (80034f4 <UART_SetConfig+0x9b4>)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800328a:	2100      	movs	r1, #0
 800328c:	e006      	b.n	800329c <UART_SetConfig+0x75c>
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800328e:	4895      	ldr	r0, [pc, #596]	; (80034e4 <UART_SetConfig+0x9a4>)
 8003290:	e7fb      	b.n	800328a <UART_SetConfig+0x74a>
 8003292:	4895      	ldr	r0, [pc, #596]	; (80034e8 <UART_SetConfig+0x9a8>)
 8003294:	e7f9      	b.n	800328a <UART_SetConfig+0x74a>
 8003296:	a18a      	add	r1, pc, #552	; (adr r1, 80034c0 <UART_SetConfig+0x980>)
 8003298:	e9d1 0100 	ldrd	r0, r1, [r1]
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800329c:	0874      	lsrs	r4, r6, #1
 800329e:	e7bb      	b.n	8003218 <UART_SetConfig+0x6d8>
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80032a0:	4892      	ldr	r0, [pc, #584]	; (80034ec <UART_SetConfig+0x9ac>)
 80032a2:	e7f2      	b.n	800328a <UART_SetConfig+0x74a>
 80032a4:	4894      	ldr	r0, [pc, #592]	; (80034f8 <UART_SetConfig+0x9b8>)
 80032a6:	e7f0      	b.n	800328a <UART_SetConfig+0x74a>
 80032a8:	a187      	add	r1, pc, #540	; (adr r1, 80034c8 <UART_SetConfig+0x988>)
 80032aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80032ae:	e7f5      	b.n	800329c <UART_SetConfig+0x75c>
 80032b0:	4892      	ldr	r0, [pc, #584]	; (80034fc <UART_SetConfig+0x9bc>)
 80032b2:	e7ea      	b.n	800328a <UART_SetConfig+0x74a>
 80032b4:	4892      	ldr	r0, [pc, #584]	; (8003500 <UART_SetConfig+0x9c0>)
 80032b6:	e7e8      	b.n	800328a <UART_SetConfig+0x74a>
 80032b8:	4892      	ldr	r0, [pc, #584]	; (8003504 <UART_SetConfig+0x9c4>)
 80032ba:	e7e6      	b.n	800328a <UART_SetConfig+0x74a>
 80032bc:	4892      	ldr	r0, [pc, #584]	; (8003508 <UART_SetConfig+0x9c8>)
 80032be:	e7e4      	b.n	800328a <UART_SetConfig+0x74a>
 80032c0:	4887      	ldr	r0, [pc, #540]	; (80034e0 <UART_SetConfig+0x9a0>)
 80032c2:	e7e2      	b.n	800328a <UART_SetConfig+0x74a>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80032c4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80032c6:	b39b      	cbz	r3, 8003330 <UART_SetConfig+0x7f0>
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d016      	beq.n	80032fa <UART_SetConfig+0x7ba>
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d017      	beq.n	8003300 <UART_SetConfig+0x7c0>
 80032d0:	2b03      	cmp	r3, #3
 80032d2:	d018      	beq.n	8003306 <UART_SetConfig+0x7c6>
 80032d4:	2b04      	cmp	r3, #4
 80032d6:	d018      	beq.n	800330a <UART_SetConfig+0x7ca>
 80032d8:	2b05      	cmp	r3, #5
 80032da:	d019      	beq.n	8003310 <UART_SetConfig+0x7d0>
 80032dc:	2b06      	cmp	r3, #6
 80032de:	d019      	beq.n	8003314 <UART_SetConfig+0x7d4>
 80032e0:	2b07      	cmp	r3, #7
 80032e2:	d019      	beq.n	8003318 <UART_SetConfig+0x7d8>
 80032e4:	2b08      	cmp	r3, #8
 80032e6:	d01a      	beq.n	800331e <UART_SetConfig+0x7de>
 80032e8:	2b09      	cmp	r3, #9
 80032ea:	d01b      	beq.n	8003324 <UART_SetConfig+0x7e4>
 80032ec:	2b0a      	cmp	r3, #10
 80032ee:	d01c      	beq.n	800332a <UART_SetConfig+0x7ea>
 80032f0:	2b0b      	cmp	r3, #11
 80032f2:	d11d      	bne.n	8003330 <UART_SetConfig+0x7f0>
 80032f4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80032f8:	e7c7      	b.n	800328a <UART_SetConfig+0x74a>
 80032fa:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80032fe:	e7c4      	b.n	800328a <UART_SetConfig+0x74a>
 8003300:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8003304:	e7c1      	b.n	800328a <UART_SetConfig+0x74a>
 8003306:	4881      	ldr	r0, [pc, #516]	; (800350c <UART_SetConfig+0x9cc>)
 8003308:	e7bf      	b.n	800328a <UART_SetConfig+0x74a>
 800330a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800330e:	e7bc      	b.n	800328a <UART_SetConfig+0x74a>
 8003310:	487f      	ldr	r0, [pc, #508]	; (8003510 <UART_SetConfig+0x9d0>)
 8003312:	e7ba      	b.n	800328a <UART_SetConfig+0x74a>
 8003314:	487f      	ldr	r0, [pc, #508]	; (8003514 <UART_SetConfig+0x9d4>)
 8003316:	e7b8      	b.n	800328a <UART_SetConfig+0x74a>
 8003318:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800331c:	e7b5      	b.n	800328a <UART_SetConfig+0x74a>
 800331e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8003322:	e7b2      	b.n	800328a <UART_SetConfig+0x74a>
 8003324:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8003328:	e7af      	b.n	800328a <UART_SetConfig+0x74a>
 800332a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800332e:	e7ac      	b.n	800328a <UART_SetConfig+0x74a>
 8003330:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8003334:	e7a9      	b.n	800328a <UART_SetConfig+0x74a>
    switch (clocksource)
 8003336:	2c20      	cmp	r4, #32
 8003338:	f000 818e 	beq.w	8003658 <UART_SetConfig+0xb18>
 800333c:	2c40      	cmp	r4, #64	; 0x40
 800333e:	f000 81c4 	beq.w	80036ca <UART_SetConfig+0xb8a>
 8003342:	2c10      	cmp	r4, #16
 8003344:	f47f ac45 	bne.w	8002bd2 <UART_SetConfig+0x92>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003348:	4b73      	ldr	r3, [pc, #460]	; (8003518 <UART_SetConfig+0x9d8>)
 800334a:	6869      	ldr	r1, [r5, #4]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	f012 0f20 	tst.w	r2, #32
 8003352:	f000 814b 	beq.w	80035ec <UART_SetConfig+0xaac>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a68      	ldr	r2, [pc, #416]	; (80034fc <UART_SetConfig+0x9bc>)
 800335a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800335e:	fa22 f303 	lsr.w	r3, r2, r3
 8003362:	2800      	cmp	r0, #0
 8003364:	f000 812c 	beq.w	80035c0 <UART_SetConfig+0xa80>
 8003368:	2801      	cmp	r0, #1
 800336a:	f000 812b 	beq.w	80035c4 <UART_SetConfig+0xa84>
 800336e:	2802      	cmp	r0, #2
 8003370:	f000 812a 	beq.w	80035c8 <UART_SetConfig+0xa88>
 8003374:	2803      	cmp	r0, #3
 8003376:	f000 8129 	beq.w	80035cc <UART_SetConfig+0xa8c>
 800337a:	2804      	cmp	r0, #4
 800337c:	f000 8128 	beq.w	80035d0 <UART_SetConfig+0xa90>
 8003380:	2805      	cmp	r0, #5
 8003382:	f000 8127 	beq.w	80035d4 <UART_SetConfig+0xa94>
 8003386:	2806      	cmp	r0, #6
 8003388:	f000 8126 	beq.w	80035d8 <UART_SetConfig+0xa98>
 800338c:	2807      	cmp	r0, #7
 800338e:	f000 8125 	beq.w	80035dc <UART_SetConfig+0xa9c>
 8003392:	2808      	cmp	r0, #8
 8003394:	f000 8124 	beq.w	80035e0 <UART_SetConfig+0xaa0>
 8003398:	2809      	cmp	r0, #9
 800339a:	f000 8123 	beq.w	80035e4 <UART_SetConfig+0xaa4>
 800339e:	280a      	cmp	r0, #10
 80033a0:	f000 8122 	beq.w	80035e8 <UART_SetConfig+0xaa8>
 80033a4:	280b      	cmp	r0, #11
 80033a6:	bf14      	ite	ne
 80033a8:	2201      	movne	r2, #1
 80033aa:	f44f 7280 	moveq.w	r2, #256	; 0x100
 80033ae:	fbb3 f2f2 	udiv	r2, r3, r2
 80033b2:	e01f      	b.n	80033f4 <UART_SetConfig+0x8b4>
        pclk = HAL_RCC_GetPCLK1Freq();
 80033b4:	f7fe f84e 	bl	8001454 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80033b8:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80033ba:	b309      	cbz	r1, 8003400 <UART_SetConfig+0x8c0>
 80033bc:	2901      	cmp	r1, #1
 80033be:	d021      	beq.n	8003404 <UART_SetConfig+0x8c4>
 80033c0:	2902      	cmp	r1, #2
 80033c2:	d021      	beq.n	8003408 <UART_SetConfig+0x8c8>
 80033c4:	2903      	cmp	r1, #3
 80033c6:	d021      	beq.n	800340c <UART_SetConfig+0x8cc>
 80033c8:	2904      	cmp	r1, #4
 80033ca:	d021      	beq.n	8003410 <UART_SetConfig+0x8d0>
 80033cc:	2905      	cmp	r1, #5
 80033ce:	d021      	beq.n	8003414 <UART_SetConfig+0x8d4>
 80033d0:	2906      	cmp	r1, #6
 80033d2:	d021      	beq.n	8003418 <UART_SetConfig+0x8d8>
 80033d4:	2907      	cmp	r1, #7
 80033d6:	d021      	beq.n	800341c <UART_SetConfig+0x8dc>
 80033d8:	2908      	cmp	r1, #8
 80033da:	d021      	beq.n	8003420 <UART_SetConfig+0x8e0>
 80033dc:	2909      	cmp	r1, #9
 80033de:	d021      	beq.n	8003424 <UART_SetConfig+0x8e4>
 80033e0:	290a      	cmp	r1, #10
 80033e2:	d021      	beq.n	8003428 <UART_SetConfig+0x8e8>
 80033e4:	290b      	cmp	r1, #11
 80033e6:	bf14      	ite	ne
 80033e8:	2201      	movne	r2, #1
 80033ea:	f44f 7280 	moveq.w	r2, #256	; 0x100
 80033ee:	6869      	ldr	r1, [r5, #4]
 80033f0:	fbb0 f2f2 	udiv	r2, r0, r2
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80033f4:	084b      	lsrs	r3, r1, #1
 80033f6:	eb03 0342 	add.w	r3, r3, r2, lsl #1
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80033fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80033fe:	e03a      	b.n	8003476 <UART_SetConfig+0x936>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003400:	2201      	movs	r2, #1
 8003402:	e7f4      	b.n	80033ee <UART_SetConfig+0x8ae>
 8003404:	2202      	movs	r2, #2
 8003406:	e7f2      	b.n	80033ee <UART_SetConfig+0x8ae>
 8003408:	2204      	movs	r2, #4
 800340a:	e7f0      	b.n	80033ee <UART_SetConfig+0x8ae>
 800340c:	2206      	movs	r2, #6
 800340e:	e7ee      	b.n	80033ee <UART_SetConfig+0x8ae>
 8003410:	2208      	movs	r2, #8
 8003412:	e7ec      	b.n	80033ee <UART_SetConfig+0x8ae>
 8003414:	220a      	movs	r2, #10
 8003416:	e7ea      	b.n	80033ee <UART_SetConfig+0x8ae>
 8003418:	220c      	movs	r2, #12
 800341a:	e7e8      	b.n	80033ee <UART_SetConfig+0x8ae>
 800341c:	2210      	movs	r2, #16
 800341e:	e7e6      	b.n	80033ee <UART_SetConfig+0x8ae>
 8003420:	2220      	movs	r2, #32
 8003422:	e7e4      	b.n	80033ee <UART_SetConfig+0x8ae>
 8003424:	2240      	movs	r2, #64	; 0x40
 8003426:	e7e2      	b.n	80033ee <UART_SetConfig+0x8ae>
 8003428:	2280      	movs	r2, #128	; 0x80
 800342a:	e7e0      	b.n	80033ee <UART_SetConfig+0x8ae>
        pclk = HAL_RCC_GetPCLK2Freq();
 800342c:	f7fe f824 	bl	8001478 <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003430:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8003432:	b1c2      	cbz	r2, 8003466 <UART_SetConfig+0x926>
 8003434:	2a01      	cmp	r2, #1
 8003436:	d02f      	beq.n	8003498 <UART_SetConfig+0x958>
 8003438:	2a02      	cmp	r2, #2
 800343a:	d02f      	beq.n	800349c <UART_SetConfig+0x95c>
 800343c:	2a03      	cmp	r2, #3
 800343e:	d02f      	beq.n	80034a0 <UART_SetConfig+0x960>
 8003440:	2a04      	cmp	r2, #4
 8003442:	d02f      	beq.n	80034a4 <UART_SetConfig+0x964>
 8003444:	2a05      	cmp	r2, #5
 8003446:	d02f      	beq.n	80034a8 <UART_SetConfig+0x968>
 8003448:	2a06      	cmp	r2, #6
 800344a:	d067      	beq.n	800351c <UART_SetConfig+0x9dc>
 800344c:	2a07      	cmp	r2, #7
 800344e:	d067      	beq.n	8003520 <UART_SetConfig+0x9e0>
 8003450:	2a08      	cmp	r2, #8
 8003452:	d067      	beq.n	8003524 <UART_SetConfig+0x9e4>
 8003454:	2a09      	cmp	r2, #9
 8003456:	d067      	beq.n	8003528 <UART_SetConfig+0x9e8>
 8003458:	2a0a      	cmp	r2, #10
 800345a:	d067      	beq.n	800352c <UART_SetConfig+0x9ec>
 800345c:	2a0b      	cmp	r2, #11
 800345e:	bf14      	ite	ne
 8003460:	2401      	movne	r4, #1
 8003462:	f44f 7480 	moveq.w	r4, #256	; 0x100
 8003466:	686a      	ldr	r2, [r5, #4]
 8003468:	fbb0 f4f4 	udiv	r4, r0, r4
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800346c:	0853      	lsrs	r3, r2, #1
 800346e:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8003472:	fbb3 f3f2 	udiv	r3, r3, r2
 8003476:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8003478:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800347a:	f1a3 0010 	sub.w	r0, r3, #16
 800347e:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8003482:	4288      	cmp	r0, r1
 8003484:	f63f ac07 	bhi.w	8002c96 <UART_SetConfig+0x156>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003488:	f023 010f 	bic.w	r1, r3, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800348c:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 8003490:	6828      	ldr	r0, [r5, #0]
 8003492:	430b      	orrs	r3, r1
 8003494:	60c3      	str	r3, [r0, #12]
 8003496:	e4a7      	b.n	8002de8 <UART_SetConfig+0x2a8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003498:	2402      	movs	r4, #2
 800349a:	e7e4      	b.n	8003466 <UART_SetConfig+0x926>
 800349c:	2404      	movs	r4, #4
 800349e:	e7e2      	b.n	8003466 <UART_SetConfig+0x926>
 80034a0:	2406      	movs	r4, #6
 80034a2:	e7e0      	b.n	8003466 <UART_SetConfig+0x926>
 80034a4:	2408      	movs	r4, #8
 80034a6:	e7de      	b.n	8003466 <UART_SetConfig+0x926>
 80034a8:	240a      	movs	r4, #10
 80034aa:	e7dc      	b.n	8003466 <UART_SetConfig+0x926>
 80034ac:	f3af 8000 	nop.w
 80034b0:	a2c2aa00 	.word	0xa2c2aa00
 80034b4:	00000000 	.word	0x00000000
 80034b8:	51615500 	.word	0x51615500
 80034bc:	00000000 	.word	0x00000000
 80034c0:	0a2c2a00 	.word	0x0a2c2a00
 80034c4:	00000000 	.word	0x00000000
 80034c8:	05161500 	.word	0x05161500
 80034cc:	00000000 	.word	0x00000000
 80034d0:	e8480000 	.word	0xe8480000
 80034d4:	f4240000 	.word	0xf4240000
 80034d8:	7a120000 	.word	0x7a120000
 80034dc:	61a80000 	.word	0x61a80000
 80034e0:	3d090000 	.word	0x3d090000
 80034e4:	1e848000 	.word	0x1e848000
 80034e8:	0f424000 	.word	0x0f424000
 80034ec:	07a12000 	.word	0x07a12000
 80034f0:	d0900000 	.word	0xd0900000
 80034f4:	003d0900 	.word	0x003d0900
 80034f8:	061a8000 	.word	0x061a8000
 80034fc:	03d09000 	.word	0x03d09000
 8003500:	01e84800 	.word	0x01e84800
 8003504:	00f42400 	.word	0x00f42400
 8003508:	007a1200 	.word	0x007a1200
 800350c:	00155500 	.word	0x00155500
 8003510:	000ccc00 	.word	0x000ccc00
 8003514:	000aaa00 	.word	0x000aaa00
 8003518:	58024400 	.word	0x58024400
 800351c:	240c      	movs	r4, #12
 800351e:	e7a2      	b.n	8003466 <UART_SetConfig+0x926>
 8003520:	2410      	movs	r4, #16
 8003522:	e7a0      	b.n	8003466 <UART_SetConfig+0x926>
 8003524:	2420      	movs	r4, #32
 8003526:	e79e      	b.n	8003466 <UART_SetConfig+0x926>
 8003528:	2440      	movs	r4, #64	; 0x40
 800352a:	e79c      	b.n	8003466 <UART_SetConfig+0x926>
 800352c:	2480      	movs	r4, #128	; 0x80
 800352e:	e79a      	b.n	8003466 <UART_SetConfig+0x926>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003530:	4668      	mov	r0, sp
 8003532:	f7fe fd11 	bl	8001f58 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003536:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8003538:	9b01      	ldr	r3, [sp, #4]
 800353a:	b36a      	cbz	r2, 8003598 <UART_SetConfig+0xa58>
 800353c:	2a01      	cmp	r2, #1
 800353e:	d02d      	beq.n	800359c <UART_SetConfig+0xa5c>
 8003540:	2a02      	cmp	r2, #2
 8003542:	d016      	beq.n	8003572 <UART_SetConfig+0xa32>
 8003544:	2a03      	cmp	r2, #3
 8003546:	d02d      	beq.n	80035a4 <UART_SetConfig+0xa64>
 8003548:	2a04      	cmp	r2, #4
 800354a:	d011      	beq.n	8003570 <UART_SetConfig+0xa30>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800354c:	2a05      	cmp	r2, #5
 800354e:	d02b      	beq.n	80035a8 <UART_SetConfig+0xa68>
 8003550:	2a06      	cmp	r2, #6
 8003552:	d02b      	beq.n	80035ac <UART_SetConfig+0xa6c>
 8003554:	2a07      	cmp	r2, #7
 8003556:	d02b      	beq.n	80035b0 <UART_SetConfig+0xa70>
 8003558:	2a08      	cmp	r2, #8
 800355a:	d02b      	beq.n	80035b4 <UART_SetConfig+0xa74>
 800355c:	2a09      	cmp	r2, #9
 800355e:	d02b      	beq.n	80035b8 <UART_SetConfig+0xa78>
 8003560:	2a0a      	cmp	r2, #10
 8003562:	d02b      	beq.n	80035bc <UART_SetConfig+0xa7c>
 8003564:	2a0b      	cmp	r2, #11
 8003566:	bf14      	ite	ne
 8003568:	2401      	movne	r4, #1
 800356a:	f44f 7480 	moveq.w	r4, #256	; 0x100
 800356e:	e000      	b.n	8003572 <UART_SetConfig+0xa32>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003570:	2408      	movs	r4, #8
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003572:	686a      	ldr	r2, [r5, #4]
 8003574:	fbb3 f4f4 	udiv	r4, r3, r4
 8003578:	e778      	b.n	800346c <UART_SetConfig+0x92c>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800357a:	a803      	add	r0, sp, #12
 800357c:	f7fe fd96 	bl	80020ac <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003580:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8003582:	9b04      	ldr	r3, [sp, #16]
 8003584:	b142      	cbz	r2, 8003598 <UART_SetConfig+0xa58>
 8003586:	2a01      	cmp	r2, #1
 8003588:	d008      	beq.n	800359c <UART_SetConfig+0xa5c>
 800358a:	2a02      	cmp	r2, #2
 800358c:	d008      	beq.n	80035a0 <UART_SetConfig+0xa60>
 800358e:	2a03      	cmp	r2, #3
 8003590:	d008      	beq.n	80035a4 <UART_SetConfig+0xa64>
 8003592:	2a04      	cmp	r2, #4
 8003594:	d1da      	bne.n	800354c <UART_SetConfig+0xa0c>
 8003596:	e7ec      	b.n	8003572 <UART_SetConfig+0xa32>
 8003598:	2401      	movs	r4, #1
 800359a:	e7ea      	b.n	8003572 <UART_SetConfig+0xa32>
 800359c:	2402      	movs	r4, #2
 800359e:	e7e8      	b.n	8003572 <UART_SetConfig+0xa32>
 80035a0:	2404      	movs	r4, #4
 80035a2:	e7e6      	b.n	8003572 <UART_SetConfig+0xa32>
 80035a4:	2406      	movs	r4, #6
 80035a6:	e7e4      	b.n	8003572 <UART_SetConfig+0xa32>
 80035a8:	240a      	movs	r4, #10
 80035aa:	e7e2      	b.n	8003572 <UART_SetConfig+0xa32>
 80035ac:	240c      	movs	r4, #12
 80035ae:	e7e0      	b.n	8003572 <UART_SetConfig+0xa32>
 80035b0:	2410      	movs	r4, #16
 80035b2:	e7de      	b.n	8003572 <UART_SetConfig+0xa32>
 80035b4:	2420      	movs	r4, #32
 80035b6:	e7dc      	b.n	8003572 <UART_SetConfig+0xa32>
 80035b8:	2440      	movs	r4, #64	; 0x40
 80035ba:	e7da      	b.n	8003572 <UART_SetConfig+0xa32>
 80035bc:	2480      	movs	r4, #128	; 0x80
 80035be:	e7d8      	b.n	8003572 <UART_SetConfig+0xa32>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80035c0:	2201      	movs	r2, #1
 80035c2:	e6f4      	b.n	80033ae <UART_SetConfig+0x86e>
 80035c4:	2202      	movs	r2, #2
 80035c6:	e6f2      	b.n	80033ae <UART_SetConfig+0x86e>
 80035c8:	2204      	movs	r2, #4
 80035ca:	e6f0      	b.n	80033ae <UART_SetConfig+0x86e>
 80035cc:	2206      	movs	r2, #6
 80035ce:	e6ee      	b.n	80033ae <UART_SetConfig+0x86e>
 80035d0:	2208      	movs	r2, #8
 80035d2:	e6ec      	b.n	80033ae <UART_SetConfig+0x86e>
 80035d4:	220a      	movs	r2, #10
 80035d6:	e6ea      	b.n	80033ae <UART_SetConfig+0x86e>
 80035d8:	220c      	movs	r2, #12
 80035da:	e6e8      	b.n	80033ae <UART_SetConfig+0x86e>
 80035dc:	2210      	movs	r2, #16
 80035de:	e6e6      	b.n	80033ae <UART_SetConfig+0x86e>
 80035e0:	2220      	movs	r2, #32
 80035e2:	e6e4      	b.n	80033ae <UART_SetConfig+0x86e>
 80035e4:	2240      	movs	r2, #64	; 0x40
 80035e6:	e6e2      	b.n	80033ae <UART_SetConfig+0x86e>
 80035e8:	2280      	movs	r2, #128	; 0x80
 80035ea:	e6e0      	b.n	80033ae <UART_SetConfig+0x86e>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80035ec:	b1f0      	cbz	r0, 800362c <UART_SetConfig+0xaec>
 80035ee:	2801      	cmp	r0, #1
 80035f0:	d01e      	beq.n	8003630 <UART_SetConfig+0xaf0>
 80035f2:	2802      	cmp	r0, #2
 80035f4:	d01e      	beq.n	8003634 <UART_SetConfig+0xaf4>
 80035f6:	2803      	cmp	r0, #3
 80035f8:	d01e      	beq.n	8003638 <UART_SetConfig+0xaf8>
 80035fa:	2804      	cmp	r0, #4
 80035fc:	d01e      	beq.n	800363c <UART_SetConfig+0xafc>
 80035fe:	2805      	cmp	r0, #5
 8003600:	d01e      	beq.n	8003640 <UART_SetConfig+0xb00>
 8003602:	2806      	cmp	r0, #6
 8003604:	d01e      	beq.n	8003644 <UART_SetConfig+0xb04>
 8003606:	2807      	cmp	r0, #7
 8003608:	d01e      	beq.n	8003648 <UART_SetConfig+0xb08>
 800360a:	2808      	cmp	r0, #8
 800360c:	d01e      	beq.n	800364c <UART_SetConfig+0xb0c>
 800360e:	2809      	cmp	r0, #9
 8003610:	d01e      	beq.n	8003650 <UART_SetConfig+0xb10>
 8003612:	280a      	cmp	r0, #10
 8003614:	d01e      	beq.n	8003654 <UART_SetConfig+0xb14>
 8003616:	4ba3      	ldr	r3, [pc, #652]	; (80038a4 <UART_SetConfig+0xd64>)
 8003618:	4aa3      	ldr	r2, [pc, #652]	; (80038a8 <UART_SetConfig+0xd68>)
 800361a:	280b      	cmp	r0, #11
 800361c:	bf14      	ite	ne
 800361e:	4610      	movne	r0, r2
 8003620:	4618      	moveq	r0, r3
 8003622:	eb00 0051 	add.w	r0, r0, r1, lsr #1
 8003626:	fbb0 f3f1 	udiv	r3, r0, r1
 800362a:	e724      	b.n	8003476 <UART_SetConfig+0x936>
 800362c:	489e      	ldr	r0, [pc, #632]	; (80038a8 <UART_SetConfig+0xd68>)
 800362e:	e7f8      	b.n	8003622 <UART_SetConfig+0xae2>
 8003630:	489e      	ldr	r0, [pc, #632]	; (80038ac <UART_SetConfig+0xd6c>)
 8003632:	e7f6      	b.n	8003622 <UART_SetConfig+0xae2>
 8003634:	489e      	ldr	r0, [pc, #632]	; (80038b0 <UART_SetConfig+0xd70>)
 8003636:	e7f4      	b.n	8003622 <UART_SetConfig+0xae2>
 8003638:	489e      	ldr	r0, [pc, #632]	; (80038b4 <UART_SetConfig+0xd74>)
 800363a:	e7f2      	b.n	8003622 <UART_SetConfig+0xae2>
 800363c:	489e      	ldr	r0, [pc, #632]	; (80038b8 <UART_SetConfig+0xd78>)
 800363e:	e7f0      	b.n	8003622 <UART_SetConfig+0xae2>
 8003640:	489e      	ldr	r0, [pc, #632]	; (80038bc <UART_SetConfig+0xd7c>)
 8003642:	e7ee      	b.n	8003622 <UART_SetConfig+0xae2>
 8003644:	489e      	ldr	r0, [pc, #632]	; (80038c0 <UART_SetConfig+0xd80>)
 8003646:	e7ec      	b.n	8003622 <UART_SetConfig+0xae2>
 8003648:	489e      	ldr	r0, [pc, #632]	; (80038c4 <UART_SetConfig+0xd84>)
 800364a:	e7ea      	b.n	8003622 <UART_SetConfig+0xae2>
 800364c:	489e      	ldr	r0, [pc, #632]	; (80038c8 <UART_SetConfig+0xd88>)
 800364e:	e7e8      	b.n	8003622 <UART_SetConfig+0xae2>
 8003650:	489e      	ldr	r0, [pc, #632]	; (80038cc <UART_SetConfig+0xd8c>)
 8003652:	e7e6      	b.n	8003622 <UART_SetConfig+0xae2>
 8003654:	489e      	ldr	r0, [pc, #632]	; (80038d0 <UART_SetConfig+0xd90>)
 8003656:	e7e4      	b.n	8003622 <UART_SetConfig+0xae2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003658:	b300      	cbz	r0, 800369c <UART_SetConfig+0xb5c>
 800365a:	2801      	cmp	r0, #1
 800365c:	d020      	beq.n	80036a0 <UART_SetConfig+0xb60>
 800365e:	2802      	cmp	r0, #2
 8003660:	d020      	beq.n	80036a4 <UART_SetConfig+0xb64>
 8003662:	2803      	cmp	r0, #3
 8003664:	d020      	beq.n	80036a8 <UART_SetConfig+0xb68>
 8003666:	2804      	cmp	r0, #4
 8003668:	d020      	beq.n	80036ac <UART_SetConfig+0xb6c>
 800366a:	2805      	cmp	r0, #5
 800366c:	d020      	beq.n	80036b0 <UART_SetConfig+0xb70>
 800366e:	2806      	cmp	r0, #6
 8003670:	d020      	beq.n	80036b4 <UART_SetConfig+0xb74>
 8003672:	2807      	cmp	r0, #7
 8003674:	d020      	beq.n	80036b8 <UART_SetConfig+0xb78>
 8003676:	2808      	cmp	r0, #8
 8003678:	d020      	beq.n	80036bc <UART_SetConfig+0xb7c>
 800367a:	2809      	cmp	r0, #9
 800367c:	d020      	beq.n	80036c0 <UART_SetConfig+0xb80>
 800367e:	280a      	cmp	r0, #10
 8003680:	d020      	beq.n	80036c4 <UART_SetConfig+0xb84>
 8003682:	f647 2212 	movw	r2, #31250	; 0x7a12
 8003686:	4b8f      	ldr	r3, [pc, #572]	; (80038c4 <UART_SetConfig+0xd84>)
 8003688:	280b      	cmp	r0, #11
 800368a:	bf14      	ite	ne
 800368c:	4618      	movne	r0, r3
 800368e:	4610      	moveq	r0, r2
 8003690:	686b      	ldr	r3, [r5, #4]
 8003692:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8003696:	fbb0 f3f3 	udiv	r3, r0, r3
 800369a:	e6ec      	b.n	8003476 <UART_SetConfig+0x936>
 800369c:	4889      	ldr	r0, [pc, #548]	; (80038c4 <UART_SetConfig+0xd84>)
 800369e:	e7f7      	b.n	8003690 <UART_SetConfig+0xb50>
 80036a0:	4889      	ldr	r0, [pc, #548]	; (80038c8 <UART_SetConfig+0xd88>)
 80036a2:	e7f5      	b.n	8003690 <UART_SetConfig+0xb50>
 80036a4:	4889      	ldr	r0, [pc, #548]	; (80038cc <UART_SetConfig+0xd8c>)
 80036a6:	e7f3      	b.n	8003690 <UART_SetConfig+0xb50>
 80036a8:	488a      	ldr	r0, [pc, #552]	; (80038d4 <UART_SetConfig+0xd94>)
 80036aa:	e7f1      	b.n	8003690 <UART_SetConfig+0xb50>
 80036ac:	4888      	ldr	r0, [pc, #544]	; (80038d0 <UART_SetConfig+0xd90>)
 80036ae:	e7ef      	b.n	8003690 <UART_SetConfig+0xb50>
 80036b0:	4889      	ldr	r0, [pc, #548]	; (80038d8 <UART_SetConfig+0xd98>)
 80036b2:	e7ed      	b.n	8003690 <UART_SetConfig+0xb50>
 80036b4:	4889      	ldr	r0, [pc, #548]	; (80038dc <UART_SetConfig+0xd9c>)
 80036b6:	e7eb      	b.n	8003690 <UART_SetConfig+0xb50>
 80036b8:	487a      	ldr	r0, [pc, #488]	; (80038a4 <UART_SetConfig+0xd64>)
 80036ba:	e7e9      	b.n	8003690 <UART_SetConfig+0xb50>
 80036bc:	4888      	ldr	r0, [pc, #544]	; (80038e0 <UART_SetConfig+0xda0>)
 80036be:	e7e7      	b.n	8003690 <UART_SetConfig+0xb50>
 80036c0:	4888      	ldr	r0, [pc, #544]	; (80038e4 <UART_SetConfig+0xda4>)
 80036c2:	e7e5      	b.n	8003690 <UART_SetConfig+0xb50>
 80036c4:	f24f 4024 	movw	r0, #62500	; 0xf424
 80036c8:	e7e2      	b.n	8003690 <UART_SetConfig+0xb50>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80036ca:	b1e8      	cbz	r0, 8003708 <UART_SetConfig+0xbc8>
 80036cc:	2801      	cmp	r0, #1
 80036ce:	d017      	beq.n	8003700 <UART_SetConfig+0xbc0>
 80036d0:	2802      	cmp	r0, #2
 80036d2:	d01c      	beq.n	800370e <UART_SetConfig+0xbce>
 80036d4:	2803      	cmp	r0, #3
 80036d6:	d01d      	beq.n	8003714 <UART_SetConfig+0xbd4>
 80036d8:	2804      	cmp	r0, #4
 80036da:	d01e      	beq.n	800371a <UART_SetConfig+0xbda>
 80036dc:	2805      	cmp	r0, #5
 80036de:	d01f      	beq.n	8003720 <UART_SetConfig+0xbe0>
 80036e0:	2806      	cmp	r0, #6
 80036e2:	d020      	beq.n	8003726 <UART_SetConfig+0xbe6>
 80036e4:	2807      	cmp	r0, #7
 80036e6:	d021      	beq.n	800372c <UART_SetConfig+0xbec>
 80036e8:	2808      	cmp	r0, #8
 80036ea:	d022      	beq.n	8003732 <UART_SetConfig+0xbf2>
 80036ec:	2809      	cmp	r0, #9
 80036ee:	d023      	beq.n	8003738 <UART_SetConfig+0xbf8>
 80036f0:	280a      	cmp	r0, #10
 80036f2:	d024      	beq.n	800373e <UART_SetConfig+0xbfe>
 80036f4:	280b      	cmp	r0, #11
 80036f6:	bf14      	ite	ne
 80036f8:	f44f 3280 	movne.w	r2, #65536	; 0x10000
 80036fc:	f44f 7280 	moveq.w	r2, #256	; 0x100
 8003700:	6869      	ldr	r1, [r5, #4]
 8003702:	eb02 0351 	add.w	r3, r2, r1, lsr #1
 8003706:	e678      	b.n	80033fa <UART_SetConfig+0x8ba>
 8003708:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800370c:	e7f8      	b.n	8003700 <UART_SetConfig+0xbc0>
 800370e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003712:	e7f5      	b.n	8003700 <UART_SetConfig+0xbc0>
 8003714:	f642 22aa 	movw	r2, #10922	; 0x2aaa
 8003718:	e7f2      	b.n	8003700 <UART_SetConfig+0xbc0>
 800371a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800371e:	e7ef      	b.n	8003700 <UART_SetConfig+0xbc0>
 8003720:	f641 1298 	movw	r2, #6552	; 0x1998
 8003724:	e7ec      	b.n	8003700 <UART_SetConfig+0xbc0>
 8003726:	f241 5254 	movw	r2, #5460	; 0x1554
 800372a:	e7e9      	b.n	8003700 <UART_SetConfig+0xbc0>
 800372c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003730:	e7e6      	b.n	8003700 <UART_SetConfig+0xbc0>
 8003732:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003736:	e7e3      	b.n	8003700 <UART_SetConfig+0xbc0>
 8003738:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800373c:	e7e0      	b.n	8003700 <UART_SetConfig+0xbc0>
 800373e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003742:	e7dd      	b.n	8003700 <UART_SetConfig+0xbc0>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003744:	f7fd fe86 	bl	8001454 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003748:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800374a:	b363      	cbz	r3, 80037a6 <UART_SetConfig+0xc66>
 800374c:	2b01      	cmp	r3, #1
 800374e:	d02c      	beq.n	80037aa <UART_SetConfig+0xc6a>
 8003750:	2b02      	cmp	r3, #2
 8003752:	d02c      	beq.n	80037ae <UART_SetConfig+0xc6e>
 8003754:	2b03      	cmp	r3, #3
 8003756:	d02c      	beq.n	80037b2 <UART_SetConfig+0xc72>
 8003758:	2b04      	cmp	r3, #4
 800375a:	d02c      	beq.n	80037b6 <UART_SetConfig+0xc76>
 800375c:	2b05      	cmp	r3, #5
 800375e:	d02c      	beq.n	80037ba <UART_SetConfig+0xc7a>
 8003760:	2b06      	cmp	r3, #6
 8003762:	d02c      	beq.n	80037be <UART_SetConfig+0xc7e>
 8003764:	2b07      	cmp	r3, #7
 8003766:	d02c      	beq.n	80037c2 <UART_SetConfig+0xc82>
 8003768:	2b08      	cmp	r3, #8
 800376a:	d02c      	beq.n	80037c6 <UART_SetConfig+0xc86>
 800376c:	2b09      	cmp	r3, #9
 800376e:	d02c      	beq.n	80037ca <UART_SetConfig+0xc8a>
 8003770:	2b0a      	cmp	r3, #10
 8003772:	d02c      	beq.n	80037ce <UART_SetConfig+0xc8e>
 8003774:	2b0b      	cmp	r3, #11
 8003776:	bf14      	ite	ne
 8003778:	2301      	movne	r3, #1
 800377a:	f44f 7380 	moveq.w	r3, #256	; 0x100
 800377e:	686a      	ldr	r2, [r5, #4]
 8003780:	fbb0 f3f3 	udiv	r3, r0, r3
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003784:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8003788:	fbb3 f3f2 	udiv	r3, r3, r2
 800378c:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800378e:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003790:	f1a3 0010 	sub.w	r0, r3, #16
 8003794:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8003798:	4288      	cmp	r0, r1
 800379a:	f63f aa7c 	bhi.w	8002c96 <UART_SetConfig+0x156>
      huart->Instance->BRR = usartdiv;
 800379e:	6829      	ldr	r1, [r5, #0]
 80037a0:	60cb      	str	r3, [r1, #12]
 80037a2:	f7ff bb21 	b.w	8002de8 <UART_SetConfig+0x2a8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80037a6:	2301      	movs	r3, #1
 80037a8:	e7e9      	b.n	800377e <UART_SetConfig+0xc3e>
 80037aa:	2302      	movs	r3, #2
 80037ac:	e7e7      	b.n	800377e <UART_SetConfig+0xc3e>
 80037ae:	2304      	movs	r3, #4
 80037b0:	e7e5      	b.n	800377e <UART_SetConfig+0xc3e>
 80037b2:	2306      	movs	r3, #6
 80037b4:	e7e3      	b.n	800377e <UART_SetConfig+0xc3e>
 80037b6:	2308      	movs	r3, #8
 80037b8:	e7e1      	b.n	800377e <UART_SetConfig+0xc3e>
 80037ba:	230a      	movs	r3, #10
 80037bc:	e7df      	b.n	800377e <UART_SetConfig+0xc3e>
 80037be:	230c      	movs	r3, #12
 80037c0:	e7dd      	b.n	800377e <UART_SetConfig+0xc3e>
 80037c2:	2310      	movs	r3, #16
 80037c4:	e7db      	b.n	800377e <UART_SetConfig+0xc3e>
 80037c6:	2320      	movs	r3, #32
 80037c8:	e7d9      	b.n	800377e <UART_SetConfig+0xc3e>
 80037ca:	2340      	movs	r3, #64	; 0x40
 80037cc:	e7d7      	b.n	800377e <UART_SetConfig+0xc3e>
 80037ce:	2380      	movs	r3, #128	; 0x80
 80037d0:	e7d5      	b.n	800377e <UART_SetConfig+0xc3e>
        pclk = HAL_RCC_GetPCLK2Freq();
 80037d2:	f7fd fe51 	bl	8001478 <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80037d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80037d8:	b1c3      	cbz	r3, 800380c <UART_SetConfig+0xccc>
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d01a      	beq.n	8003814 <UART_SetConfig+0xcd4>
 80037de:	2b02      	cmp	r3, #2
 80037e0:	d01a      	beq.n	8003818 <UART_SetConfig+0xcd8>
 80037e2:	2b03      	cmp	r3, #3
 80037e4:	d01a      	beq.n	800381c <UART_SetConfig+0xcdc>
 80037e6:	2b04      	cmp	r3, #4
 80037e8:	d01a      	beq.n	8003820 <UART_SetConfig+0xce0>
 80037ea:	2b05      	cmp	r3, #5
 80037ec:	d01a      	beq.n	8003824 <UART_SetConfig+0xce4>
 80037ee:	2b06      	cmp	r3, #6
 80037f0:	d01a      	beq.n	8003828 <UART_SetConfig+0xce8>
 80037f2:	2b07      	cmp	r3, #7
 80037f4:	d01a      	beq.n	800382c <UART_SetConfig+0xcec>
 80037f6:	2b08      	cmp	r3, #8
 80037f8:	d01a      	beq.n	8003830 <UART_SetConfig+0xcf0>
 80037fa:	2b09      	cmp	r3, #9
 80037fc:	d01a      	beq.n	8003834 <UART_SetConfig+0xcf4>
 80037fe:	2b0a      	cmp	r3, #10
 8003800:	d01a      	beq.n	8003838 <UART_SetConfig+0xcf8>
 8003802:	2b0b      	cmp	r3, #11
 8003804:	bf14      	ite	ne
 8003806:	2401      	movne	r4, #1
 8003808:	f44f 7480 	moveq.w	r4, #256	; 0x100
 800380c:	686a      	ldr	r2, [r5, #4]
 800380e:	fbb0 f3f4 	udiv	r3, r0, r4
 8003812:	e7b7      	b.n	8003784 <UART_SetConfig+0xc44>
 8003814:	2402      	movs	r4, #2
 8003816:	e7f9      	b.n	800380c <UART_SetConfig+0xccc>
 8003818:	2404      	movs	r4, #4
 800381a:	e7f7      	b.n	800380c <UART_SetConfig+0xccc>
 800381c:	2406      	movs	r4, #6
 800381e:	e7f5      	b.n	800380c <UART_SetConfig+0xccc>
 8003820:	2408      	movs	r4, #8
 8003822:	e7f3      	b.n	800380c <UART_SetConfig+0xccc>
 8003824:	240a      	movs	r4, #10
 8003826:	e7f1      	b.n	800380c <UART_SetConfig+0xccc>
 8003828:	240c      	movs	r4, #12
 800382a:	e7ef      	b.n	800380c <UART_SetConfig+0xccc>
 800382c:	2410      	movs	r4, #16
 800382e:	e7ed      	b.n	800380c <UART_SetConfig+0xccc>
 8003830:	2420      	movs	r4, #32
 8003832:	e7eb      	b.n	800380c <UART_SetConfig+0xccc>
 8003834:	2440      	movs	r4, #64	; 0x40
 8003836:	e7e9      	b.n	800380c <UART_SetConfig+0xccc>
 8003838:	2480      	movs	r4, #128	; 0x80
 800383a:	e7e7      	b.n	800380c <UART_SetConfig+0xccc>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800383c:	2408      	movs	r4, #8
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800383e:	6868      	ldr	r0, [r5, #4]
 8003840:	fbb3 f3f4 	udiv	r3, r3, r4
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003844:	eb03 0350 	add.w	r3, r3, r0, lsr #1
 8003848:	fbb3 f3f0 	udiv	r3, r3, r0
 800384c:	e79e      	b.n	800378c <UART_SetConfig+0xc4c>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800384e:	a803      	add	r0, sp, #12
 8003850:	f7fe fc2c 	bl	80020ac <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003854:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8003856:	9b04      	ldr	r3, [sp, #16]
 8003858:	b14a      	cbz	r2, 800386e <UART_SetConfig+0xd2e>
 800385a:	2a01      	cmp	r2, #1
 800385c:	d009      	beq.n	8003872 <UART_SetConfig+0xd32>
 800385e:	2a02      	cmp	r2, #2
 8003860:	d009      	beq.n	8003876 <UART_SetConfig+0xd36>
 8003862:	2a03      	cmp	r2, #3
 8003864:	d009      	beq.n	800387a <UART_SetConfig+0xd3a>
 8003866:	2a04      	cmp	r2, #4
 8003868:	f040 8125 	bne.w	8003ab6 <UART_SetConfig+0xf76>
 800386c:	e7e7      	b.n	800383e <UART_SetConfig+0xcfe>
 800386e:	2401      	movs	r4, #1
 8003870:	e7e5      	b.n	800383e <UART_SetConfig+0xcfe>
 8003872:	2402      	movs	r4, #2
 8003874:	e7e3      	b.n	800383e <UART_SetConfig+0xcfe>
 8003876:	2404      	movs	r4, #4
 8003878:	e7e1      	b.n	800383e <UART_SetConfig+0xcfe>
 800387a:	2406      	movs	r4, #6
 800387c:	e7df      	b.n	800383e <UART_SetConfig+0xcfe>
 800387e:	240a      	movs	r4, #10
 8003880:	e7dd      	b.n	800383e <UART_SetConfig+0xcfe>
 8003882:	240c      	movs	r4, #12
 8003884:	e7db      	b.n	800383e <UART_SetConfig+0xcfe>
 8003886:	2410      	movs	r4, #16
 8003888:	e7d9      	b.n	800383e <UART_SetConfig+0xcfe>
 800388a:	2420      	movs	r4, #32
 800388c:	e7d7      	b.n	800383e <UART_SetConfig+0xcfe>
 800388e:	2440      	movs	r4, #64	; 0x40
 8003890:	e7d5      	b.n	800383e <UART_SetConfig+0xcfe>
 8003892:	2480      	movs	r4, #128	; 0x80
 8003894:	e7d3      	b.n	800383e <UART_SetConfig+0xcfe>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003896:	2201      	movs	r2, #1
 8003898:	e160      	b.n	8003b5c <UART_SetConfig+0x101c>
 800389a:	2202      	movs	r2, #2
 800389c:	e15e      	b.n	8003b5c <UART_SetConfig+0x101c>
 800389e:	2204      	movs	r2, #4
 80038a0:	e15c      	b.n	8003b5c <UART_SetConfig+0x101c>
 80038a2:	bf00      	nop
 80038a4:	0007a120 	.word	0x0007a120
 80038a8:	07a12000 	.word	0x07a12000
 80038ac:	03d09000 	.word	0x03d09000
 80038b0:	01e84800 	.word	0x01e84800
 80038b4:	01458554 	.word	0x01458554
 80038b8:	00f42400 	.word	0x00f42400
 80038bc:	00c35000 	.word	0x00c35000
 80038c0:	00a2c2aa 	.word	0x00a2c2aa
 80038c4:	007a1200 	.word	0x007a1200
 80038c8:	003d0900 	.word	0x003d0900
 80038cc:	001e8480 	.word	0x001e8480
 80038d0:	000f4240 	.word	0x000f4240
 80038d4:	00145854 	.word	0x00145854
 80038d8:	000c3500 	.word	0x000c3500
 80038dc:	000a2c2a 	.word	0x000a2c2a
 80038e0:	0003d090 	.word	0x0003d090
 80038e4:	0001e848 	.word	0x0001e848
 80038e8:	2206      	movs	r2, #6
 80038ea:	e137      	b.n	8003b5c <UART_SetConfig+0x101c>
 80038ec:	2208      	movs	r2, #8
 80038ee:	e135      	b.n	8003b5c <UART_SetConfig+0x101c>
 80038f0:	220a      	movs	r2, #10
 80038f2:	e133      	b.n	8003b5c <UART_SetConfig+0x101c>
 80038f4:	220c      	movs	r2, #12
 80038f6:	e131      	b.n	8003b5c <UART_SetConfig+0x101c>
 80038f8:	2210      	movs	r2, #16
 80038fa:	e12f      	b.n	8003b5c <UART_SetConfig+0x101c>
 80038fc:	2220      	movs	r2, #32
 80038fe:	e12d      	b.n	8003b5c <UART_SetConfig+0x101c>
 8003900:	2240      	movs	r2, #64	; 0x40
 8003902:	e12b      	b.n	8003b5c <UART_SetConfig+0x101c>
 8003904:	2280      	movs	r2, #128	; 0x80
 8003906:	e129      	b.n	8003b5c <UART_SetConfig+0x101c>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003908:	b1f0      	cbz	r0, 8003948 <UART_SetConfig+0xe08>
 800390a:	2801      	cmp	r0, #1
 800390c:	d01e      	beq.n	800394c <UART_SetConfig+0xe0c>
 800390e:	2802      	cmp	r0, #2
 8003910:	d01e      	beq.n	8003950 <UART_SetConfig+0xe10>
 8003912:	2803      	cmp	r0, #3
 8003914:	d01e      	beq.n	8003954 <UART_SetConfig+0xe14>
 8003916:	2804      	cmp	r0, #4
 8003918:	d01e      	beq.n	8003958 <UART_SetConfig+0xe18>
 800391a:	2805      	cmp	r0, #5
 800391c:	d01e      	beq.n	800395c <UART_SetConfig+0xe1c>
 800391e:	2806      	cmp	r0, #6
 8003920:	d01e      	beq.n	8003960 <UART_SetConfig+0xe20>
 8003922:	2807      	cmp	r0, #7
 8003924:	d01e      	beq.n	8003964 <UART_SetConfig+0xe24>
 8003926:	2808      	cmp	r0, #8
 8003928:	d01e      	beq.n	8003968 <UART_SetConfig+0xe28>
 800392a:	2809      	cmp	r0, #9
 800392c:	d01e      	beq.n	800396c <UART_SetConfig+0xe2c>
 800392e:	280a      	cmp	r0, #10
 8003930:	d01e      	beq.n	8003970 <UART_SetConfig+0xe30>
 8003932:	4b8e      	ldr	r3, [pc, #568]	; (8003b6c <UART_SetConfig+0x102c>)
 8003934:	4a8e      	ldr	r2, [pc, #568]	; (8003b70 <UART_SetConfig+0x1030>)
 8003936:	280b      	cmp	r0, #11
 8003938:	bf14      	ite	ne
 800393a:	4610      	movne	r0, r2
 800393c:	4618      	moveq	r0, r3
 800393e:	eb00 0051 	add.w	r0, r0, r1, lsr #1
 8003942:	fbb0 f3f1 	udiv	r3, r0, r1
 8003946:	e721      	b.n	800378c <UART_SetConfig+0xc4c>
 8003948:	4889      	ldr	r0, [pc, #548]	; (8003b70 <UART_SetConfig+0x1030>)
 800394a:	e7f8      	b.n	800393e <UART_SetConfig+0xdfe>
 800394c:	4889      	ldr	r0, [pc, #548]	; (8003b74 <UART_SetConfig+0x1034>)
 800394e:	e7f6      	b.n	800393e <UART_SetConfig+0xdfe>
 8003950:	4889      	ldr	r0, [pc, #548]	; (8003b78 <UART_SetConfig+0x1038>)
 8003952:	e7f4      	b.n	800393e <UART_SetConfig+0xdfe>
 8003954:	4889      	ldr	r0, [pc, #548]	; (8003b7c <UART_SetConfig+0x103c>)
 8003956:	e7f2      	b.n	800393e <UART_SetConfig+0xdfe>
 8003958:	4889      	ldr	r0, [pc, #548]	; (8003b80 <UART_SetConfig+0x1040>)
 800395a:	e7f0      	b.n	800393e <UART_SetConfig+0xdfe>
 800395c:	4889      	ldr	r0, [pc, #548]	; (8003b84 <UART_SetConfig+0x1044>)
 800395e:	e7ee      	b.n	800393e <UART_SetConfig+0xdfe>
 8003960:	4889      	ldr	r0, [pc, #548]	; (8003b88 <UART_SetConfig+0x1048>)
 8003962:	e7ec      	b.n	800393e <UART_SetConfig+0xdfe>
 8003964:	4889      	ldr	r0, [pc, #548]	; (8003b8c <UART_SetConfig+0x104c>)
 8003966:	e7ea      	b.n	800393e <UART_SetConfig+0xdfe>
 8003968:	4889      	ldr	r0, [pc, #548]	; (8003b90 <UART_SetConfig+0x1050>)
 800396a:	e7e8      	b.n	800393e <UART_SetConfig+0xdfe>
 800396c:	4889      	ldr	r0, [pc, #548]	; (8003b94 <UART_SetConfig+0x1054>)
 800396e:	e7e6      	b.n	800393e <UART_SetConfig+0xdfe>
 8003970:	4889      	ldr	r0, [pc, #548]	; (8003b98 <UART_SetConfig+0x1058>)
 8003972:	e7e4      	b.n	800393e <UART_SetConfig+0xdfe>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003974:	b300      	cbz	r0, 80039b8 <UART_SetConfig+0xe78>
 8003976:	2801      	cmp	r0, #1
 8003978:	d020      	beq.n	80039bc <UART_SetConfig+0xe7c>
 800397a:	2802      	cmp	r0, #2
 800397c:	d020      	beq.n	80039c0 <UART_SetConfig+0xe80>
 800397e:	2803      	cmp	r0, #3
 8003980:	d020      	beq.n	80039c4 <UART_SetConfig+0xe84>
 8003982:	2804      	cmp	r0, #4
 8003984:	d020      	beq.n	80039c8 <UART_SetConfig+0xe88>
 8003986:	2805      	cmp	r0, #5
 8003988:	d020      	beq.n	80039cc <UART_SetConfig+0xe8c>
 800398a:	2806      	cmp	r0, #6
 800398c:	d020      	beq.n	80039d0 <UART_SetConfig+0xe90>
 800398e:	2807      	cmp	r0, #7
 8003990:	d020      	beq.n	80039d4 <UART_SetConfig+0xe94>
 8003992:	2808      	cmp	r0, #8
 8003994:	d020      	beq.n	80039d8 <UART_SetConfig+0xe98>
 8003996:	2809      	cmp	r0, #9
 8003998:	d020      	beq.n	80039dc <UART_SetConfig+0xe9c>
 800399a:	280a      	cmp	r0, #10
 800399c:	d021      	beq.n	80039e2 <UART_SetConfig+0xea2>
 800399e:	f643 5209 	movw	r2, #15625	; 0x3d09
 80039a2:	4b7a      	ldr	r3, [pc, #488]	; (8003b8c <UART_SetConfig+0x104c>)
 80039a4:	280b      	cmp	r0, #11
 80039a6:	bf14      	ite	ne
 80039a8:	4618      	movne	r0, r3
 80039aa:	4610      	moveq	r0, r2
 80039ac:	686b      	ldr	r3, [r5, #4]
 80039ae:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80039b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80039b6:	e6e9      	b.n	800378c <UART_SetConfig+0xc4c>
 80039b8:	4874      	ldr	r0, [pc, #464]	; (8003b8c <UART_SetConfig+0x104c>)
 80039ba:	e7f7      	b.n	80039ac <UART_SetConfig+0xe6c>
 80039bc:	4874      	ldr	r0, [pc, #464]	; (8003b90 <UART_SetConfig+0x1050>)
 80039be:	e7f5      	b.n	80039ac <UART_SetConfig+0xe6c>
 80039c0:	4874      	ldr	r0, [pc, #464]	; (8003b94 <UART_SetConfig+0x1054>)
 80039c2:	e7f3      	b.n	80039ac <UART_SetConfig+0xe6c>
 80039c4:	4875      	ldr	r0, [pc, #468]	; (8003b9c <UART_SetConfig+0x105c>)
 80039c6:	e7f1      	b.n	80039ac <UART_SetConfig+0xe6c>
 80039c8:	4873      	ldr	r0, [pc, #460]	; (8003b98 <UART_SetConfig+0x1058>)
 80039ca:	e7ef      	b.n	80039ac <UART_SetConfig+0xe6c>
 80039cc:	4874      	ldr	r0, [pc, #464]	; (8003ba0 <UART_SetConfig+0x1060>)
 80039ce:	e7ed      	b.n	80039ac <UART_SetConfig+0xe6c>
 80039d0:	4874      	ldr	r0, [pc, #464]	; (8003ba4 <UART_SetConfig+0x1064>)
 80039d2:	e7eb      	b.n	80039ac <UART_SetConfig+0xe6c>
 80039d4:	4865      	ldr	r0, [pc, #404]	; (8003b6c <UART_SetConfig+0x102c>)
 80039d6:	e7e9      	b.n	80039ac <UART_SetConfig+0xe6c>
 80039d8:	4873      	ldr	r0, [pc, #460]	; (8003ba8 <UART_SetConfig+0x1068>)
 80039da:	e7e7      	b.n	80039ac <UART_SetConfig+0xe6c>
 80039dc:	f24f 4024 	movw	r0, #62500	; 0xf424
 80039e0:	e7e4      	b.n	80039ac <UART_SetConfig+0xe6c>
 80039e2:	f647 2012 	movw	r0, #31250	; 0x7a12
 80039e6:	e7e1      	b.n	80039ac <UART_SetConfig+0xe6c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80039e8:	b1d0      	cbz	r0, 8003a20 <UART_SetConfig+0xee0>
 80039ea:	2801      	cmp	r0, #1
 80039ec:	d01b      	beq.n	8003a26 <UART_SetConfig+0xee6>
 80039ee:	2802      	cmp	r0, #2
 80039f0:	d01c      	beq.n	8003a2c <UART_SetConfig+0xeec>
 80039f2:	2803      	cmp	r0, #3
 80039f4:	d01d      	beq.n	8003a32 <UART_SetConfig+0xef2>
 80039f6:	2804      	cmp	r0, #4
 80039f8:	d01e      	beq.n	8003a38 <UART_SetConfig+0xef8>
 80039fa:	2805      	cmp	r0, #5
 80039fc:	d01f      	beq.n	8003a3e <UART_SetConfig+0xefe>
 80039fe:	2806      	cmp	r0, #6
 8003a00:	d020      	beq.n	8003a44 <UART_SetConfig+0xf04>
 8003a02:	2807      	cmp	r0, #7
 8003a04:	d021      	beq.n	8003a4a <UART_SetConfig+0xf0a>
 8003a06:	2808      	cmp	r0, #8
 8003a08:	d022      	beq.n	8003a50 <UART_SetConfig+0xf10>
 8003a0a:	2809      	cmp	r0, #9
 8003a0c:	d023      	beq.n	8003a56 <UART_SetConfig+0xf16>
 8003a0e:	280a      	cmp	r0, #10
 8003a10:	d024      	beq.n	8003a5c <UART_SetConfig+0xf1c>
 8003a12:	280b      	cmp	r0, #11
 8003a14:	bf14      	ite	ne
 8003a16:	f44f 4300 	movne.w	r3, #32768	; 0x8000
 8003a1a:	2380      	moveq	r3, #128	; 0x80
 8003a1c:	6868      	ldr	r0, [r5, #4]
 8003a1e:	e711      	b.n	8003844 <UART_SetConfig+0xd04>
 8003a20:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a24:	e7fa      	b.n	8003a1c <UART_SetConfig+0xedc>
 8003a26:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003a2a:	e7f7      	b.n	8003a1c <UART_SetConfig+0xedc>
 8003a2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003a30:	e7f4      	b.n	8003a1c <UART_SetConfig+0xedc>
 8003a32:	f241 5355 	movw	r3, #5461	; 0x1555
 8003a36:	e7f1      	b.n	8003a1c <UART_SetConfig+0xedc>
 8003a38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a3c:	e7ee      	b.n	8003a1c <UART_SetConfig+0xedc>
 8003a3e:	f640 43cc 	movw	r3, #3276	; 0xccc
 8003a42:	e7eb      	b.n	8003a1c <UART_SetConfig+0xedc>
 8003a44:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8003a48:	e7e8      	b.n	8003a1c <UART_SetConfig+0xedc>
 8003a4a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003a4e:	e7e5      	b.n	8003a1c <UART_SetConfig+0xedc>
 8003a50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a54:	e7e2      	b.n	8003a1c <UART_SetConfig+0xedc>
 8003a56:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a5a:	e7df      	b.n	8003a1c <UART_SetConfig+0xedc>
 8003a5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a60:	e7dc      	b.n	8003a1c <UART_SetConfig+0xedc>
 8003a62:	2480      	movs	r4, #128	; 0x80
 8003a64:	f7ff b8a4 	b.w	8002bb0 <UART_SetConfig+0x70>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a68:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8003a6c:	f43f a8b1 	beq.w	8002bd2 <UART_SetConfig+0x92>
        ret = HAL_ERROR;
 8003a70:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8003a72:	2300      	movs	r3, #0
 8003a74:	e68c      	b.n	8003790 <UART_SetConfig+0xc50>
    switch (clocksource)
 8003a76:	2c08      	cmp	r4, #8
 8003a78:	f43f aee9 	beq.w	800384e <UART_SetConfig+0xd0e>
 8003a7c:	d833      	bhi.n	8003ae6 <UART_SetConfig+0xfa6>
 8003a7e:	2c01      	cmp	r4, #1
 8003a80:	f43f aea7 	beq.w	80037d2 <UART_SetConfig+0xc92>
 8003a84:	f4ff ae5e 	bcc.w	8003744 <UART_SetConfig+0xc04>
 8003a88:	2c04      	cmp	r4, #4
 8003a8a:	f47f a904 	bne.w	8002c96 <UART_SetConfig+0x156>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003a8e:	4668      	mov	r0, sp
 8003a90:	f7fe fa62 	bl	8001f58 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003a94:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8003a96:	9b01      	ldr	r3, [sp, #4]
 8003a98:	2a00      	cmp	r2, #0
 8003a9a:	f43f aee8 	beq.w	800386e <UART_SetConfig+0xd2e>
 8003a9e:	2a01      	cmp	r2, #1
 8003aa0:	f43f aee7 	beq.w	8003872 <UART_SetConfig+0xd32>
 8003aa4:	2a02      	cmp	r2, #2
 8003aa6:	f43f aeca 	beq.w	800383e <UART_SetConfig+0xcfe>
 8003aaa:	2a03      	cmp	r2, #3
 8003aac:	f43f aee5 	beq.w	800387a <UART_SetConfig+0xd3a>
 8003ab0:	2a04      	cmp	r2, #4
 8003ab2:	f43f aec3 	beq.w	800383c <UART_SetConfig+0xcfc>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003ab6:	2a05      	cmp	r2, #5
 8003ab8:	f43f aee1 	beq.w	800387e <UART_SetConfig+0xd3e>
 8003abc:	2a06      	cmp	r2, #6
 8003abe:	f43f aee0 	beq.w	8003882 <UART_SetConfig+0xd42>
 8003ac2:	2a07      	cmp	r2, #7
 8003ac4:	f43f aedf 	beq.w	8003886 <UART_SetConfig+0xd46>
 8003ac8:	2a08      	cmp	r2, #8
 8003aca:	f43f aede 	beq.w	800388a <UART_SetConfig+0xd4a>
 8003ace:	2a09      	cmp	r2, #9
 8003ad0:	f43f aedd 	beq.w	800388e <UART_SetConfig+0xd4e>
 8003ad4:	2a0a      	cmp	r2, #10
 8003ad6:	f43f aedc 	beq.w	8003892 <UART_SetConfig+0xd52>
 8003ada:	2a0b      	cmp	r2, #11
 8003adc:	bf14      	ite	ne
 8003ade:	2401      	movne	r4, #1
 8003ae0:	f44f 7480 	moveq.w	r4, #256	; 0x100
 8003ae4:	e6ab      	b.n	800383e <UART_SetConfig+0xcfe>
    switch (clocksource)
 8003ae6:	2c20      	cmp	r4, #32
 8003ae8:	f43f af44 	beq.w	8003974 <UART_SetConfig+0xe34>
 8003aec:	2c40      	cmp	r4, #64	; 0x40
 8003aee:	f43f af7b 	beq.w	80039e8 <UART_SetConfig+0xea8>
 8003af2:	2c10      	cmp	r4, #16
 8003af4:	f47f a8cf 	bne.w	8002c96 <UART_SetConfig+0x156>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003af8:	4b2c      	ldr	r3, [pc, #176]	; (8003bac <UART_SetConfig+0x106c>)
 8003afa:	6869      	ldr	r1, [r5, #4]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	f012 0f20 	tst.w	r2, #32
 8003b02:	f43f af01 	beq.w	8003908 <UART_SetConfig+0xdc8>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	4b19      	ldr	r3, [pc, #100]	; (8003b70 <UART_SetConfig+0x1030>)
 8003b0a:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8003b0e:	40d3      	lsrs	r3, r2
 8003b10:	2800      	cmp	r0, #0
 8003b12:	f43f aec0 	beq.w	8003896 <UART_SetConfig+0xd56>
 8003b16:	2801      	cmp	r0, #1
 8003b18:	f43f aebf 	beq.w	800389a <UART_SetConfig+0xd5a>
 8003b1c:	2802      	cmp	r0, #2
 8003b1e:	f43f aebe 	beq.w	800389e <UART_SetConfig+0xd5e>
 8003b22:	2803      	cmp	r0, #3
 8003b24:	f43f aee0 	beq.w	80038e8 <UART_SetConfig+0xda8>
 8003b28:	2804      	cmp	r0, #4
 8003b2a:	f43f aedf 	beq.w	80038ec <UART_SetConfig+0xdac>
 8003b2e:	2805      	cmp	r0, #5
 8003b30:	f43f aede 	beq.w	80038f0 <UART_SetConfig+0xdb0>
 8003b34:	2806      	cmp	r0, #6
 8003b36:	f43f aedd 	beq.w	80038f4 <UART_SetConfig+0xdb4>
 8003b3a:	2807      	cmp	r0, #7
 8003b3c:	f43f aedc 	beq.w	80038f8 <UART_SetConfig+0xdb8>
 8003b40:	2808      	cmp	r0, #8
 8003b42:	f43f aedb 	beq.w	80038fc <UART_SetConfig+0xdbc>
 8003b46:	2809      	cmp	r0, #9
 8003b48:	f43f aeda 	beq.w	8003900 <UART_SetConfig+0xdc0>
 8003b4c:	280a      	cmp	r0, #10
 8003b4e:	f43f aed9 	beq.w	8003904 <UART_SetConfig+0xdc4>
 8003b52:	280b      	cmp	r0, #11
 8003b54:	bf14      	ite	ne
 8003b56:	2201      	movne	r2, #1
 8003b58:	f44f 7280 	moveq.w	r2, #256	; 0x100
 8003b5c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003b60:	eb03 0351 	add.w	r3, r3, r1, lsr #1
 8003b64:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b68:	e610      	b.n	800378c <UART_SetConfig+0xc4c>
 8003b6a:	bf00      	nop
 8003b6c:	0003d090 	.word	0x0003d090
 8003b70:	03d09000 	.word	0x03d09000
 8003b74:	01e84800 	.word	0x01e84800
 8003b78:	00f42400 	.word	0x00f42400
 8003b7c:	00a2c2aa 	.word	0x00a2c2aa
 8003b80:	007a1200 	.word	0x007a1200
 8003b84:	0061a800 	.word	0x0061a800
 8003b88:	00516155 	.word	0x00516155
 8003b8c:	003d0900 	.word	0x003d0900
 8003b90:	001e8480 	.word	0x001e8480
 8003b94:	000f4240 	.word	0x000f4240
 8003b98:	0007a120 	.word	0x0007a120
 8003b9c:	000a2c2a 	.word	0x000a2c2a
 8003ba0:	00061a80 	.word	0x00061a80
 8003ba4:	00051615 	.word	0x00051615
 8003ba8:	0001e848 	.word	0x0001e848
 8003bac:	58024400 	.word	0x58024400

08003bb0 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003bb0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003bb2:	07da      	lsls	r2, r3, #31
{
 8003bb4:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003bb6:	d506      	bpl.n	8003bc6 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003bb8:	6801      	ldr	r1, [r0, #0]
 8003bba:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8003bbc:	684a      	ldr	r2, [r1, #4]
 8003bbe:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8003bc2:	4322      	orrs	r2, r4
 8003bc4:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003bc6:	079c      	lsls	r4, r3, #30
 8003bc8:	d506      	bpl.n	8003bd8 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003bca:	6801      	ldr	r1, [r0, #0]
 8003bcc:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8003bce:	684a      	ldr	r2, [r1, #4]
 8003bd0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003bd4:	4322      	orrs	r2, r4
 8003bd6:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003bd8:	0759      	lsls	r1, r3, #29
 8003bda:	d506      	bpl.n	8003bea <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003bdc:	6801      	ldr	r1, [r0, #0]
 8003bde:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8003be0:	684a      	ldr	r2, [r1, #4]
 8003be2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003be6:	4322      	orrs	r2, r4
 8003be8:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003bea:	071a      	lsls	r2, r3, #28
 8003bec:	d506      	bpl.n	8003bfc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003bee:	6801      	ldr	r1, [r0, #0]
 8003bf0:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8003bf2:	684a      	ldr	r2, [r1, #4]
 8003bf4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003bf8:	4322      	orrs	r2, r4
 8003bfa:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003bfc:	06dc      	lsls	r4, r3, #27
 8003bfe:	d506      	bpl.n	8003c0e <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003c00:	6801      	ldr	r1, [r0, #0]
 8003c02:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8003c04:	688a      	ldr	r2, [r1, #8]
 8003c06:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003c0a:	4322      	orrs	r2, r4
 8003c0c:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003c0e:	0699      	lsls	r1, r3, #26
 8003c10:	d506      	bpl.n	8003c20 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003c12:	6801      	ldr	r1, [r0, #0]
 8003c14:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8003c16:	688a      	ldr	r2, [r1, #8]
 8003c18:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c1c:	4322      	orrs	r2, r4
 8003c1e:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c20:	065a      	lsls	r2, r3, #25
 8003c22:	d510      	bpl.n	8003c46 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c24:	6801      	ldr	r1, [r0, #0]
 8003c26:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8003c28:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c2a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c2e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8003c32:	ea42 0204 	orr.w	r2, r2, r4
 8003c36:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c38:	d105      	bne.n	8003c46 <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c3a:	684a      	ldr	r2, [r1, #4]
 8003c3c:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8003c3e:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8003c42:	4322      	orrs	r2, r4
 8003c44:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003c46:	061b      	lsls	r3, r3, #24
 8003c48:	d506      	bpl.n	8003c58 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003c4a:	6802      	ldr	r2, [r0, #0]
 8003c4c:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8003c4e:	6853      	ldr	r3, [r2, #4]
 8003c50:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8003c54:	430b      	orrs	r3, r1
 8003c56:	6053      	str	r3, [r2, #4]
 8003c58:	bd10      	pop	{r4, pc}

08003c5a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003c5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c5e:	9d06      	ldr	r5, [sp, #24]
 8003c60:	4604      	mov	r4, r0
 8003c62:	460f      	mov	r7, r1
 8003c64:	4616      	mov	r6, r2
 8003c66:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c68:	6821      	ldr	r1, [r4, #0]
 8003c6a:	69ca      	ldr	r2, [r1, #28]
 8003c6c:	ea37 0302 	bics.w	r3, r7, r2
 8003c70:	bf0c      	ite	eq
 8003c72:	2201      	moveq	r2, #1
 8003c74:	2200      	movne	r2, #0
 8003c76:	42b2      	cmp	r2, r6
 8003c78:	d002      	beq.n	8003c80 <UART_WaitOnFlagUntilTimeout+0x26>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8003c7a:	2000      	movs	r0, #0
}
 8003c7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8003c80:	1c68      	adds	r0, r5, #1
 8003c82:	d0f2      	beq.n	8003c6a <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c84:	f7fc fd6c 	bl	8000760 <HAL_GetTick>
 8003c88:	eba0 0008 	sub.w	r0, r0, r8
 8003c8c:	4285      	cmp	r5, r0
 8003c8e:	6820      	ldr	r0, [r4, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003c90:	6803      	ldr	r3, [r0, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c92:	d300      	bcc.n	8003c96 <UART_WaitOnFlagUntilTimeout+0x3c>
 8003c94:	b98d      	cbnz	r5, 8003cba <UART_WaitOnFlagUntilTimeout+0x60>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003c96:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003c9a:	6003      	str	r3, [r0, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c9c:	6883      	ldr	r3, [r0, #8]
 8003c9e:	f023 0301 	bic.w	r3, r3, #1
 8003ca2:	6083      	str	r3, [r0, #8]
        huart->gState = HAL_UART_STATE_READY;
 8003ca4:	2320      	movs	r3, #32
 8003ca6:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8003caa:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          __HAL_UNLOCK(huart);
 8003cae:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 8003cb0:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 8003cb2:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
          return HAL_TIMEOUT;
 8003cb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003cba:	075a      	lsls	r2, r3, #29
 8003cbc:	d5d4      	bpl.n	8003c68 <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003cbe:	69c3      	ldr	r3, [r0, #28]
 8003cc0:	051b      	lsls	r3, r3, #20
 8003cc2:	d5d1      	bpl.n	8003c68 <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003cc4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003cc8:	6203      	str	r3, [r0, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003cca:	6803      	ldr	r3, [r0, #0]
 8003ccc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003cd0:	6003      	str	r3, [r0, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cd2:	6883      	ldr	r3, [r0, #8]
 8003cd4:	f023 0301 	bic.w	r3, r3, #1
 8003cd8:	6083      	str	r3, [r0, #8]
          huart->gState = HAL_UART_STATE_READY;
 8003cda:	2320      	movs	r3, #32
 8003cdc:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8003ce0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003ce4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8003ce8:	e7e1      	b.n	8003cae <UART_WaitOnFlagUntilTimeout+0x54>

08003cea <HAL_UART_Transmit>:
{
 8003cea:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003cee:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8003cf0:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
{
 8003cf4:	4604      	mov	r4, r0
 8003cf6:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 8003cf8:	2b20      	cmp	r3, #32
{
 8003cfa:	4691      	mov	r9, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8003cfc:	d14e      	bne.n	8003d9c <HAL_UART_Transmit+0xb2>
    if ((pData == NULL) || (Size == 0U))
 8003cfe:	2900      	cmp	r1, #0
 8003d00:	d04a      	beq.n	8003d98 <HAL_UART_Transmit+0xae>
 8003d02:	2a00      	cmp	r2, #0
 8003d04:	d048      	beq.n	8003d98 <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 8003d06:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d046      	beq.n	8003d9c <HAL_UART_Transmit+0xb2>
 8003d0e:	2301      	movs	r3, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d10:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 8003d12:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d16:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d18:	f8c0 5088 	str.w	r5, [r0, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d1c:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
    tickstart = HAL_GetTick();
 8003d20:	f7fc fd1e 	bl	8000760 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d24:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8003d26:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 8003d28:	f8a4 9054 	strh.w	r9, [r4, #84]	; 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferCount = Size;
 8003d30:	f8a4 9056 	strh.w	r9, [r4, #86]	; 0x56
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d34:	d103      	bne.n	8003d3e <HAL_UART_Transmit+0x54>
 8003d36:	6923      	ldr	r3, [r4, #16]
 8003d38:	b90b      	cbnz	r3, 8003d3e <HAL_UART_Transmit+0x54>
 8003d3a:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8003d3c:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 8003d3e:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d42:	463b      	mov	r3, r7
 8003d44:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 8003d48:	b292      	uxth	r2, r2
 8003d4a:	b952      	cbnz	r2, 8003d62 <HAL_UART_Transmit+0x78>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d4c:	2140      	movs	r1, #64	; 0x40
 8003d4e:	4620      	mov	r0, r4
 8003d50:	f7ff ff83 	bl	8003c5a <UART_WaitOnFlagUntilTimeout>
 8003d54:	b958      	cbnz	r0, 8003d6e <HAL_UART_Transmit+0x84>
    huart->gState = HAL_UART_STATE_READY;
 8003d56:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8003d58:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_READY;
 8003d5c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    return HAL_OK;
 8003d60:	e006      	b.n	8003d70 <HAL_UART_Transmit+0x86>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d62:	2200      	movs	r2, #0
 8003d64:	2180      	movs	r1, #128	; 0x80
 8003d66:	4620      	mov	r0, r4
 8003d68:	f7ff ff77 	bl	8003c5a <UART_WaitOnFlagUntilTimeout>
 8003d6c:	b118      	cbz	r0, 8003d76 <HAL_UART_Transmit+0x8c>
        return HAL_TIMEOUT;
 8003d6e:	2003      	movs	r0, #3
}
 8003d70:	b003      	add	sp, #12
 8003d72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003d76:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8003d78:	b95e      	cbnz	r6, 8003d92 <HAL_UART_Transmit+0xa8>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d7a:	f835 3b02 	ldrh.w	r3, [r5], #2
 8003d7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d82:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8003d84:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
 8003d88:	3b01      	subs	r3, #1
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 8003d90:	e7d5      	b.n	8003d3e <HAL_UART_Transmit+0x54>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d92:	f816 3b01 	ldrb.w	r3, [r6], #1
 8003d96:	e7f4      	b.n	8003d82 <HAL_UART_Transmit+0x98>
      return  HAL_ERROR;
 8003d98:	2001      	movs	r0, #1
 8003d9a:	e7e9      	b.n	8003d70 <HAL_UART_Transmit+0x86>
    return HAL_BUSY;
 8003d9c:	2002      	movs	r0, #2
 8003d9e:	e7e7      	b.n	8003d70 <HAL_UART_Transmit+0x86>

08003da0 <HAL_UART_Receive>:
{
 8003da0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003da4:	4699      	mov	r9, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 8003da6:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
{
 8003daa:	4604      	mov	r4, r0
 8003dac:	460d      	mov	r5, r1
  if (huart->RxState == HAL_UART_STATE_READY)
 8003dae:	2b20      	cmp	r3, #32
{
 8003db0:	4616      	mov	r6, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 8003db2:	d166      	bne.n	8003e82 <HAL_UART_Receive+0xe2>
    if ((pData == NULL) || (Size == 0U))
 8003db4:	2900      	cmp	r1, #0
 8003db6:	d062      	beq.n	8003e7e <HAL_UART_Receive+0xde>
 8003db8:	2a00      	cmp	r2, #0
 8003dba:	d060      	beq.n	8003e7e <HAL_UART_Receive+0xde>
    __HAL_LOCK(huart);
 8003dbc:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d05e      	beq.n	8003e82 <HAL_UART_Receive+0xe2>
 8003dc4:	2301      	movs	r3, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dc6:	2700      	movs	r7, #0
    __HAL_LOCK(huart);
 8003dc8:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003dcc:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dce:	f8c0 7088 	str.w	r7, [r0, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003dd2:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    tickstart = HAL_GetTick();
 8003dd6:	f7fc fcc3 	bl	8000760 <HAL_GetTick>
    UART_MASK_COMPUTATION(huart);
 8003dda:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8003ddc:	4680      	mov	r8, r0
    huart->RxXferSize  = Size;
 8003dde:	f8a4 605c 	strh.w	r6, [r4, #92]	; 0x5c
    UART_MASK_COMPUTATION(huart);
 8003de2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->RxXferCount = Size;
 8003de6:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
    UART_MASK_COMPUTATION(huart);
 8003dea:	d11c      	bne.n	8003e26 <HAL_UART_Receive+0x86>
 8003dec:	6922      	ldr	r2, [r4, #16]
 8003dee:	b9c2      	cbnz	r2, 8003e22 <HAL_UART_Receive+0x82>
 8003df0:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003df4:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003df8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    uhMask = huart->Mask;
 8003dfc:	f8b4 7060 	ldrh.w	r7, [r4, #96]	; 0x60
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e00:	d122      	bne.n	8003e48 <HAL_UART_Receive+0xa8>
 8003e02:	6923      	ldr	r3, [r4, #16]
 8003e04:	bb03      	cbnz	r3, 8003e48 <HAL_UART_Receive+0xa8>
 8003e06:	462e      	mov	r6, r5
      pdata8bits  = NULL;
 8003e08:	461d      	mov	r5, r3
    while (huart->RxXferCount > 0U)
 8003e0a:	f8b4 005e 	ldrh.w	r0, [r4, #94]	; 0x5e
 8003e0e:	b280      	uxth	r0, r0
 8003e10:	b9e0      	cbnz	r0, 8003e4c <HAL_UART_Receive+0xac>
    huart->RxState = HAL_UART_STATE_READY;
 8003e12:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8003e14:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_READY;
 8003e18:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
}
 8003e1c:	b003      	add	sp, #12
 8003e1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    UART_MASK_COMPUTATION(huart);
 8003e22:	22ff      	movs	r2, #255	; 0xff
 8003e24:	e7e6      	b.n	8003df4 <HAL_UART_Receive+0x54>
 8003e26:	b923      	cbnz	r3, 8003e32 <HAL_UART_Receive+0x92>
 8003e28:	6922      	ldr	r2, [r4, #16]
 8003e2a:	2a00      	cmp	r2, #0
 8003e2c:	d0f9      	beq.n	8003e22 <HAL_UART_Receive+0x82>
 8003e2e:	227f      	movs	r2, #127	; 0x7f
 8003e30:	e7e0      	b.n	8003df4 <HAL_UART_Receive+0x54>
 8003e32:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e36:	d104      	bne.n	8003e42 <HAL_UART_Receive+0xa2>
 8003e38:	6922      	ldr	r2, [r4, #16]
 8003e3a:	2a00      	cmp	r2, #0
 8003e3c:	d0f7      	beq.n	8003e2e <HAL_UART_Receive+0x8e>
 8003e3e:	223f      	movs	r2, #63	; 0x3f
 8003e40:	e7d8      	b.n	8003df4 <HAL_UART_Receive+0x54>
 8003e42:	f8a4 7060 	strh.w	r7, [r4, #96]	; 0x60
 8003e46:	e7d7      	b.n	8003df8 <HAL_UART_Receive+0x58>
      pdata16bits = NULL;
 8003e48:	2600      	movs	r6, #0
 8003e4a:	e7de      	b.n	8003e0a <HAL_UART_Receive+0x6a>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003e4c:	f8cd 9000 	str.w	r9, [sp]
 8003e50:	4643      	mov	r3, r8
 8003e52:	2200      	movs	r2, #0
 8003e54:	2120      	movs	r1, #32
 8003e56:	4620      	mov	r0, r4
 8003e58:	f7ff feff 	bl	8003c5a <UART_WaitOnFlagUntilTimeout>
 8003e5c:	b998      	cbnz	r0, 8003e86 <HAL_UART_Receive+0xe6>
 8003e5e:	6823      	ldr	r3, [r4, #0]
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e62:	403b      	ands	r3, r7
      if (pdata8bits == NULL)
 8003e64:	b945      	cbnz	r5, 8003e78 <HAL_UART_Receive+0xd8>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003e66:	f826 3b02 	strh.w	r3, [r6], #2
      huart->RxXferCount--;
 8003e6a:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8003e6e:	3b01      	subs	r3, #1
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 8003e76:	e7c8      	b.n	8003e0a <HAL_UART_Receive+0x6a>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003e78:	f805 3b01 	strb.w	r3, [r5], #1
 8003e7c:	e7f5      	b.n	8003e6a <HAL_UART_Receive+0xca>
      return  HAL_ERROR;
 8003e7e:	2001      	movs	r0, #1
 8003e80:	e7cc      	b.n	8003e1c <HAL_UART_Receive+0x7c>
    return HAL_BUSY;
 8003e82:	2002      	movs	r0, #2
 8003e84:	e7ca      	b.n	8003e1c <HAL_UART_Receive+0x7c>
        return HAL_TIMEOUT;
 8003e86:	2003      	movs	r0, #3
 8003e88:	e7c8      	b.n	8003e1c <HAL_UART_Receive+0x7c>

08003e8a <UART_CheckIdleState>:
{
 8003e8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e8c:	2600      	movs	r6, #0
{
 8003e8e:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e90:	f8c0 6088 	str.w	r6, [r0, #136]	; 0x88
  tickstart = HAL_GetTick();
 8003e94:	f7fc fc64 	bl	8000760 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e98:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8003e9a:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	071a      	lsls	r2, r3, #28
 8003ea0:	d417      	bmi.n	8003ed2 <UART_CheckIdleState+0x48>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003ea2:	6823      	ldr	r3, [r4, #0]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	075b      	lsls	r3, r3, #29
 8003ea8:	d50a      	bpl.n	8003ec0 <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003eaa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003eb4:	4620      	mov	r0, r4
 8003eb6:	9300      	str	r3, [sp, #0]
 8003eb8:	462b      	mov	r3, r5
 8003eba:	f7ff fece 	bl	8003c5a <UART_WaitOnFlagUntilTimeout>
 8003ebe:	b9a0      	cbnz	r0, 8003eea <UART_CheckIdleState+0x60>
  huart->gState = HAL_UART_STATE_READY;
 8003ec0:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8003ec2:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8003ec4:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  __HAL_UNLOCK(huart);
 8003ec8:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003ecc:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  return HAL_OK;
 8003ed0:	e00c      	b.n	8003eec <UART_CheckIdleState+0x62>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ed2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ed6:	4632      	mov	r2, r6
 8003ed8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003edc:	9300      	str	r3, [sp, #0]
 8003ede:	4603      	mov	r3, r0
 8003ee0:	4620      	mov	r0, r4
 8003ee2:	f7ff feba 	bl	8003c5a <UART_WaitOnFlagUntilTimeout>
 8003ee6:	2800      	cmp	r0, #0
 8003ee8:	d0db      	beq.n	8003ea2 <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 8003eea:	2003      	movs	r0, #3
}
 8003eec:	b002      	add	sp, #8
 8003eee:	bd70      	pop	{r4, r5, r6, pc}

08003ef0 <HAL_UART_Init>:
{
 8003ef0:	b510      	push	{r4, lr}
  if (huart == NULL)
 8003ef2:	4604      	mov	r4, r0
 8003ef4:	b350      	cbz	r0, 8003f4c <HAL_UART_Init+0x5c>
  if (huart->gState == HAL_UART_STATE_RESET)
 8003ef6:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8003efa:	b91b      	cbnz	r3, 8003f04 <HAL_UART_Init+0x14>
    huart->Lock = HAL_UNLOCKED;
 8003efc:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    HAL_UART_MspInit(huart);
 8003f00:	f001 fa30 	bl	8005364 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8003f04:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003f06:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f08:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 8003f0a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  __HAL_UART_DISABLE(huart);
 8003f0e:	6813      	ldr	r3, [r2, #0]
 8003f10:	f023 0301 	bic.w	r3, r3, #1
 8003f14:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f16:	f7fe fe13 	bl	8002b40 <UART_SetConfig>
 8003f1a:	2801      	cmp	r0, #1
 8003f1c:	d016      	beq.n	8003f4c <HAL_UART_Init+0x5c>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f1e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003f20:	b113      	cbz	r3, 8003f28 <HAL_UART_Init+0x38>
    UART_AdvFeatureConfig(huart);
 8003f22:	4620      	mov	r0, r4
 8003f24:	f7ff fe44 	bl	8003bb0 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f28:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8003f2a:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f2c:	685a      	ldr	r2, [r3, #4]
 8003f2e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f32:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f34:	689a      	ldr	r2, [r3, #8]
 8003f36:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f3a:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	f042 0201 	orr.w	r2, r2, #1
}
 8003f42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 8003f46:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8003f48:	f7ff bf9f 	b.w	8003e8a <UART_CheckIdleState>
}
 8003f4c:	2001      	movs	r0, #1
 8003f4e:	bd10      	pop	{r4, pc}

08003f50 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003f50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8003f52:	2203      	movs	r2, #3
 8003f54:	2301      	movs	r3, #1
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8003f56:	2104      	movs	r1, #4
 8003f58:	2402      	movs	r4, #2
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8003f5a:	f88d 2003 	strb.w	r2, [sp, #3]
 8003f5e:	2207      	movs	r2, #7
 8003f60:	f88d 3000 	strb.w	r3, [sp]
 8003f64:	f88d 2004 	strb.w	r2, [sp, #4]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	f88d 3001 	strb.w	r3, [sp, #1]
 8003f6e:	f88d 2006 	strb.w	r2, [sp, #6]
 8003f72:	f88d 2007 	strb.w	r2, [sp, #7]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8003f76:	2208      	movs	r2, #8
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8003f78:	f88d 3002 	strb.w	r3, [sp, #2]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8003f7c:	f88d 2008 	strb.w	r2, [sp, #8]
 8003f80:	f88d 200c 	strb.w	r2, [sp, #12]

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003f84:	6e42      	ldr	r2, [r0, #100]	; 0x64
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8003f86:	f88d 3005 	strb.w	r3, [sp, #5]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8003f8a:	f88d 1009 	strb.w	r1, [sp, #9]
 8003f8e:	f88d 400a 	strb.w	r4, [sp, #10]
 8003f92:	f88d 100b 	strb.w	r1, [sp, #11]
 8003f96:	f88d 300d 	strb.w	r3, [sp, #13]
 8003f9a:	f88d 300e 	strb.w	r3, [sp, #14]
 8003f9e:	f88d 300f 	strb.w	r3, [sp, #15]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003fa2:	b92a      	cbnz	r2, 8003fb0 <UARTEx_SetNbDataToProcess+0x60>
  {
    huart->NbTxDataToProcess = 1U;
 8003fa4:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8003fa8:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  }
}
 8003fac:	b004      	add	sp, #16
 8003fae:	bd10      	pop	{r4, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003fb0:	6802      	ldr	r2, [r0, #0]
 8003fb2:	6893      	ldr	r3, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003fb4:	6891      	ldr	r1, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8003fb6:	aa04      	add	r2, sp, #16
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8003fb8:	f3c3 6342 	ubfx	r3, r3, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8003fbc:	eb02 7151 	add.w	r1, r2, r1, lsr #29
 8003fc0:	f811 2c10 	ldrb.w	r2, [r1, #-16]
 8003fc4:	f811 1c08 	ldrb.w	r1, [r1, #-8]
 8003fc8:	00d2      	lsls	r2, r2, #3
 8003fca:	fb92 f2f1 	sdiv	r2, r2, r1
 8003fce:	f8a0 206a 	strh.w	r2, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8003fd2:	aa04      	add	r2, sp, #16
 8003fd4:	4413      	add	r3, r2
 8003fd6:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8003fda:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8003fde:	00d2      	lsls	r2, r2, #3
 8003fe0:	fb92 f3f3 	sdiv	r3, r2, r3
 8003fe4:	e7e0      	b.n	8003fa8 <UARTEx_SetNbDataToProcess+0x58>

08003fe6 <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 8003fe6:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d014      	beq.n	8004018 <HAL_UARTEx_DisableFifoMode+0x32>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003fee:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003ff0:	2324      	movs	r3, #36	; 0x24
 8003ff2:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003ff6:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8003ff8:	6813      	ldr	r3, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003ffa:	f021 5100 	bic.w	r1, r1, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 8003ffe:	f023 0301 	bic.w	r3, r3, #1
 8004002:	6013      	str	r3, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004004:	2300      	movs	r3, #0
 8004006:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004008:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 800400a:	2220      	movs	r2, #32
  __HAL_UNLOCK(huart);
 800400c:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_READY;
 8004010:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
  return HAL_OK;
 8004014:	4618      	mov	r0, r3
 8004016:	4770      	bx	lr
  __HAL_LOCK(huart);
 8004018:	2002      	movs	r0, #2
}
 800401a:	4770      	bx	lr

0800401c <HAL_UARTEx_SetTxFifoThreshold>:
{
 800401c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 800401e:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
{
 8004022:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8004024:	2b01      	cmp	r3, #1
 8004026:	d01b      	beq.n	8004060 <HAL_UARTEx_SetTxFifoThreshold+0x44>
 8004028:	2301      	movs	r3, #1
 800402a:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_BUSY;
 800402e:	2324      	movs	r3, #36	; 0x24
 8004030:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004034:	6803      	ldr	r3, [r0, #0]
 8004036:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	f022 0201 	bic.w	r2, r2, #1
 800403e:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004040:	689a      	ldr	r2, [r3, #8]
 8004042:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 8004046:	4311      	orrs	r1, r2
 8004048:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 800404a:	f7ff ff81 	bl	8003f50 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800404e:	6803      	ldr	r3, [r0, #0]
 8004050:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8004052:	2320      	movs	r3, #32
 8004054:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  __HAL_UNLOCK(huart);
 8004058:	2000      	movs	r0, #0
 800405a:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
  return HAL_OK;
 800405e:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8004060:	2002      	movs	r0, #2
}
 8004062:	bd38      	pop	{r3, r4, r5, pc}

08004064 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8004064:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8004066:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
{
 800406a:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 800406c:	2b01      	cmp	r3, #1
 800406e:	d01b      	beq.n	80040a8 <HAL_UARTEx_SetRxFifoThreshold+0x44>
 8004070:	2301      	movs	r3, #1
 8004072:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_BUSY;
 8004076:	2324      	movs	r3, #36	; 0x24
 8004078:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800407c:	6803      	ldr	r3, [r0, #0]
 800407e:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	f022 0201 	bic.w	r2, r2, #1
 8004086:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004088:	689a      	ldr	r2, [r3, #8]
 800408a:	f022 6260 	bic.w	r2, r2, #234881024	; 0xe000000
 800408e:	4311      	orrs	r1, r2
 8004090:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 8004092:	f7ff ff5d 	bl	8003f50 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004096:	6803      	ldr	r3, [r0, #0]
 8004098:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800409a:	2320      	movs	r3, #32
 800409c:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  __HAL_UNLOCK(huart);
 80040a0:	2000      	movs	r0, #0
 80040a2:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
  return HAL_OK;
 80040a6:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 80040a8:	2002      	movs	r0, #2
}
 80040aa:	bd38      	pop	{r3, r4, r5, pc}

080040ac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80040ac:	4b0a      	ldr	r3, [pc, #40]	; (80040d8 <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80040ae:	3b01      	subs	r3, #1
 80040b0:	d101      	bne.n	80040b6 <USB_CoreReset+0xa>
    {
      return HAL_TIMEOUT;
 80040b2:	2003      	movs	r0, #3
 80040b4:	4770      	bx	lr
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80040b6:	6902      	ldr	r2, [r0, #16]
 80040b8:	2a00      	cmp	r2, #0
 80040ba:	daf8      	bge.n	80040ae <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80040bc:	6903      	ldr	r3, [r0, #16]
 80040be:	4a06      	ldr	r2, [pc, #24]	; (80040d8 <USB_CoreReset+0x2c>)
 80040c0:	f043 0301 	orr.w	r3, r3, #1
 80040c4:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 80040c6:	3a01      	subs	r2, #1
 80040c8:	d0f3      	beq.n	80040b2 <USB_CoreReset+0x6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80040ca:	6903      	ldr	r3, [r0, #16]
 80040cc:	f013 0301 	ands.w	r3, r3, #1
 80040d0:	d1f9      	bne.n	80040c6 <USB_CoreReset+0x1a>

  return HAL_OK;
 80040d2:	4618      	mov	r0, r3
}
 80040d4:	4770      	bx	lr
 80040d6:	bf00      	nop
 80040d8:	00030d41 	.word	0x00030d41

080040dc <USB_CoreInit>:
{
 80040dc:	b084      	sub	sp, #16
 80040de:	b538      	push	{r3, r4, r5, lr}
 80040e0:	ad05      	add	r5, sp, #20
 80040e2:	4604      	mov	r4, r0
 80040e4:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80040e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d126      	bne.n	800413c <USB_CoreInit+0x60>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80040ee:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80040f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040f4:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80040f6:	68c3      	ldr	r3, [r0, #12]
 80040f8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80040fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004100:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004102:	68c3      	ldr	r3, [r0, #12]
 8004104:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004108:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 800410a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800410c:	2b01      	cmp	r3, #1
 800410e:	d103      	bne.n	8004118 <USB_CoreInit+0x3c>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004110:	68c3      	ldr	r3, [r0, #12]
 8004112:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004116:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 8004118:	4620      	mov	r0, r4
 800411a:	f7ff ffc7 	bl	80040ac <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 800411e:	9b08      	ldr	r3, [sp, #32]
 8004120:	2b01      	cmp	r3, #1
 8004122:	d107      	bne.n	8004134 <USB_CoreInit+0x58>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004124:	68a3      	ldr	r3, [r4, #8]
 8004126:	f043 0308 	orr.w	r3, r3, #8
 800412a:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800412c:	68a3      	ldr	r3, [r4, #8]
 800412e:	f043 0320 	orr.w	r3, r3, #32
 8004132:	60a3      	str	r3, [r4, #8]
}
 8004134:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004138:	b004      	add	sp, #16
 800413a:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800413c:	68c3      	ldr	r3, [r0, #12]
 800413e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004142:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 8004144:	f7ff ffb2 	bl	80040ac <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 8004148:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800414a:	b923      	cbnz	r3, 8004156 <USB_CoreInit+0x7a>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800414c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800414e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004152:	63a3      	str	r3, [r4, #56]	; 0x38
 8004154:	e7e3      	b.n	800411e <USB_CoreInit+0x42>
 8004156:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004158:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800415c:	e7f9      	b.n	8004152 <USB_CoreInit+0x76>

0800415e <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800415e:	6883      	ldr	r3, [r0, #8]
 8004160:	f023 0301 	bic.w	r3, r3, #1
 8004164:	6083      	str	r3, [r0, #8]
}
 8004166:	2000      	movs	r0, #0
 8004168:	4770      	bx	lr

0800416a <USB_SetCurrentMode>:
{
 800416a:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800416c:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800416e:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004170:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004174:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8004176:	d108      	bne.n	800418a <USB_SetCurrentMode+0x20>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004178:	68c3      	ldr	r3, [r0, #12]
 800417a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800417e:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 8004180:	2032      	movs	r0, #50	; 0x32
 8004182:	f7fc faf3 	bl	800076c <HAL_Delay>
  return HAL_OK;
 8004186:	2000      	movs	r0, #0
 8004188:	bd08      	pop	{r3, pc}
  else if (mode == USB_DEVICE_MODE)
 800418a:	b919      	cbnz	r1, 8004194 <USB_SetCurrentMode+0x2a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800418c:	68c3      	ldr	r3, [r0, #12]
 800418e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004192:	e7f4      	b.n	800417e <USB_SetCurrentMode+0x14>
    return HAL_ERROR;
 8004194:	2001      	movs	r0, #1
}
 8004196:	bd08      	pop	{r3, pc}

08004198 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004198:	0189      	lsls	r1, r1, #6
 800419a:	4a07      	ldr	r2, [pc, #28]	; (80041b8 <USB_FlushTxFifo+0x20>)
 800419c:	f041 0120 	orr.w	r1, r1, #32
 80041a0:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 80041a2:	3a01      	subs	r2, #1
 80041a4:	d005      	beq.n	80041b2 <USB_FlushTxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80041a6:	6903      	ldr	r3, [r0, #16]
 80041a8:	f013 0320 	ands.w	r3, r3, #32
 80041ac:	d1f9      	bne.n	80041a2 <USB_FlushTxFifo+0xa>
  return HAL_OK;
 80041ae:	4618      	mov	r0, r3
 80041b0:	4770      	bx	lr
      return HAL_TIMEOUT;
 80041b2:	2003      	movs	r0, #3
}
 80041b4:	4770      	bx	lr
 80041b6:	bf00      	nop
 80041b8:	00030d41 	.word	0x00030d41

080041bc <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80041bc:	2310      	movs	r3, #16
 80041be:	4a06      	ldr	r2, [pc, #24]	; (80041d8 <USB_FlushRxFifo+0x1c>)
 80041c0:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
 80041c2:	3a01      	subs	r2, #1
 80041c4:	d005      	beq.n	80041d2 <USB_FlushRxFifo+0x16>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80041c6:	6903      	ldr	r3, [r0, #16]
 80041c8:	f013 0310 	ands.w	r3, r3, #16
 80041cc:	d1f9      	bne.n	80041c2 <USB_FlushRxFifo+0x6>
  return HAL_OK;
 80041ce:	4618      	mov	r0, r3
 80041d0:	4770      	bx	lr
      return HAL_TIMEOUT;
 80041d2:	2003      	movs	r0, #3
}
 80041d4:	4770      	bx	lr
 80041d6:	bf00      	nop
 80041d8:	00030d41 	.word	0x00030d41

080041dc <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 80041dc:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 80041e0:	4319      	orrs	r1, r3
 80041e2:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 80041e6:	2000      	movs	r0, #0
 80041e8:	4770      	bx	lr
	...

080041ec <USB_DevInit>:
{
 80041ec:	b084      	sub	sp, #16
 80041ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041f2:	4604      	mov	r4, r0
 80041f4:	a809      	add	r0, sp, #36	; 0x24
 80041f6:	4688      	mov	r8, r1
 80041f8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 80041fc:	2300      	movs	r3, #0
 80041fe:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8004200:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    USBx->DIEPTXF[i] = 0U;
 8004202:	4619      	mov	r1, r3
 8004204:	f103 0240 	add.w	r2, r3, #64	; 0x40
  for (i = 0U; i < 15U; i++)
 8004208:	3301      	adds	r3, #1
    USBx->DIEPTXF[i] = 0U;
 800420a:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  for (i = 0U; i < 15U; i++)
 800420e:	2b0f      	cmp	r3, #15
    USBx->DIEPTXF[i] = 0U;
 8004210:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 8004212:	d1f7      	bne.n	8004204 <USB_DevInit+0x18>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004214:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  if (cfg.vbus_sensing_enable == 0U)
 8004216:	2e00      	cmp	r6, #0
 8004218:	d172      	bne.n	8004300 <USB_DevInit+0x114>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800421a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800421e:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004220:	6823      	ldr	r3, [r4, #0]
 8004222:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004226:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004228:	6823      	ldr	r3, [r4, #0]
 800422a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800422e:	6023      	str	r3, [r4, #0]
  USBx_PCGCCTL = 0U;
 8004230:	2300      	movs	r3, #0
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004232:	f504 6500 	add.w	r5, r4, #2048	; 0x800
  USBx_PCGCCTL = 0U;
 8004236:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800423a:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 800423e:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004242:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004244:	2b01      	cmp	r3, #1
 8004246:	d161      	bne.n	800430c <USB_DevInit+0x120>
    if (cfg.speed == USBD_HS_SPEED)
 8004248:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800424a:	2900      	cmp	r1, #0
 800424c:	d15c      	bne.n	8004308 <USB_DevInit+0x11c>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800424e:	4620      	mov	r0, r4
 8004250:	f7ff ffc4 	bl	80041dc <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004254:	2110      	movs	r1, #16
 8004256:	4620      	mov	r0, r4
 8004258:	f7ff ff9e 	bl	8004198 <USB_FlushTxFifo>
 800425c:	4601      	mov	r1, r0
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800425e:	4620      	mov	r0, r4
 8004260:	f7ff ffac 	bl	80041bc <USB_FlushRxFifo>
 8004264:	2800      	cmp	r0, #0
 8004266:	d153      	bne.n	8004310 <USB_DevInit+0x124>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004268:	1c08      	adds	r0, r1, #0
 800426a:	bf18      	it	ne
 800426c:	2001      	movne	r0, #1
  USBx_DEVICE->DIEPMSK = 0U;
 800426e:	2300      	movs	r3, #0
 8004270:	f504 6210 	add.w	r2, r4, #2304	; 0x900
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004274:	f04f 4e90 	mov.w	lr, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004278:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
      USBx_INEP(i)->DIEPCTL = 0U;
 800427c:	4619      	mov	r1, r3
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800427e:	f64f 397f 	movw	r9, #64383	; 0xfb7f
  USBx_DEVICE->DIEPMSK = 0U;
 8004282:	612b      	str	r3, [r5, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004284:	616b      	str	r3, [r5, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004286:	61eb      	str	r3, [r5, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004288:	4543      	cmp	r3, r8
 800428a:	d143      	bne.n	8004314 <USB_DevInit+0x128>
 800428c:	2100      	movs	r1, #0
 800428e:	f504 6230 	add.w	r2, r4, #2816	; 0xb00
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004292:	f04f 4c90 	mov.w	ip, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004296:	f04f 6800 	mov.w	r8, #134217728	; 0x8000000
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800429a:	468e      	mov	lr, r1
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800429c:	f64f 397f 	movw	r9, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80042a0:	428b      	cmp	r3, r1
 80042a2:	d14a      	bne.n	800433a <USB_DevInit+0x14e>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80042a4:	692b      	ldr	r3, [r5, #16]
  if (cfg.dma_enable == 1U)
 80042a6:	2f01      	cmp	r7, #1
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80042a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80042ac:	612b      	str	r3, [r5, #16]
  if (cfg.dma_enable == 1U)
 80042ae:	d107      	bne.n	80042c0 <USB_DevInit+0xd4>
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 80042b0:	4b2c      	ldr	r3, [pc, #176]	; (8004364 <USB_DevInit+0x178>)
 80042b2:	632b      	str	r3, [r5, #48]	; 0x30
    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 80042b4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80042b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042ba:	f043 0303 	orr.w	r3, r3, #3
 80042be:	632b      	str	r3, [r5, #48]	; 0x30
  USBx->GINTMSK = 0U;
 80042c0:	2300      	movs	r3, #0
 80042c2:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 80042c4:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 80042c8:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == 0U)
 80042ca:	b91f      	cbnz	r7, 80042d4 <USB_DevInit+0xe8>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80042cc:	69a3      	ldr	r3, [r4, #24]
 80042ce:	f043 0310 	orr.w	r3, r3, #16
 80042d2:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80042d4:	69a2      	ldr	r2, [r4, #24]
 80042d6:	4b24      	ldr	r3, [pc, #144]	; (8004368 <USB_DevInit+0x17c>)
 80042d8:	4313      	orrs	r3, r2
 80042da:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 80042dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80042de:	b11b      	cbz	r3, 80042e8 <USB_DevInit+0xfc>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80042e0:	69a3      	ldr	r3, [r4, #24]
 80042e2:	f043 0308 	orr.w	r3, r3, #8
 80042e6:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 80042e8:	2e01      	cmp	r6, #1
 80042ea:	d105      	bne.n	80042f8 <USB_DevInit+0x10c>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80042ec:	69a3      	ldr	r3, [r4, #24]
 80042ee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80042f2:	f043 0304 	orr.w	r3, r3, #4
 80042f6:	61a3      	str	r3, [r4, #24]
}
 80042f8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042fc:	b004      	add	sp, #16
 80042fe:	4770      	bx	lr
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004300:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004304:	63a3      	str	r3, [r4, #56]	; 0x38
 8004306:	e793      	b.n	8004230 <USB_DevInit+0x44>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004308:	4619      	mov	r1, r3
 800430a:	e7a0      	b.n	800424e <USB_DevInit+0x62>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800430c:	2103      	movs	r1, #3
 800430e:	e79e      	b.n	800424e <USB_DevInit+0x62>
 8004310:	2001      	movs	r0, #1
 8004312:	e7ac      	b.n	800426e <USB_DevInit+0x82>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004314:	f8d2 a000 	ldr.w	sl, [r2]
 8004318:	f1ba 0f00 	cmp.w	sl, #0
 800431c:	da0b      	bge.n	8004336 <USB_DevInit+0x14a>
      if (i == 0U)
 800431e:	b93b      	cbnz	r3, 8004330 <USB_DevInit+0x144>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004320:	f8c2 c000 	str.w	ip, [r2]
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004324:	6111      	str	r1, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004326:	3301      	adds	r3, #1
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004328:	f8c2 9008 	str.w	r9, [r2, #8]
 800432c:	3220      	adds	r2, #32
 800432e:	e7ab      	b.n	8004288 <USB_DevInit+0x9c>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004330:	f8c2 e000 	str.w	lr, [r2]
 8004334:	e7f6      	b.n	8004324 <USB_DevInit+0x138>
      USBx_INEP(i)->DIEPCTL = 0U;
 8004336:	6011      	str	r1, [r2, #0]
 8004338:	e7f4      	b.n	8004324 <USB_DevInit+0x138>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800433a:	f8d2 a000 	ldr.w	sl, [r2]
 800433e:	f1ba 0f00 	cmp.w	sl, #0
 8004342:	da0c      	bge.n	800435e <USB_DevInit+0x172>
      if (i == 0U)
 8004344:	b941      	cbnz	r1, 8004358 <USB_DevInit+0x16c>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004346:	f8c2 8000 	str.w	r8, [r2]
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800434a:	f8c2 e010 	str.w	lr, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800434e:	3101      	adds	r1, #1
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004350:	f8c2 9008 	str.w	r9, [r2, #8]
 8004354:	3220      	adds	r2, #32
 8004356:	e7a3      	b.n	80042a0 <USB_DevInit+0xb4>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004358:	f8c2 c000 	str.w	ip, [r2]
 800435c:	e7f5      	b.n	800434a <USB_DevInit+0x15e>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800435e:	f8c2 e000 	str.w	lr, [r2]
 8004362:	e7f2      	b.n	800434a <USB_DevInit+0x15e>
 8004364:	00800100 	.word	0x00800100
 8004368:	803c3800 	.word	0x803c3800

0800436c <USB_DevDisconnect>:
{
 800436c:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800436e:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8004372:	f043 0302 	orr.w	r3, r3, #2
 8004376:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 800437a:	2003      	movs	r0, #3
 800437c:	f7fc f9f6 	bl	800076c <HAL_Delay>
}
 8004380:	2000      	movs	r0, #0
 8004382:	bd08      	pop	{r3, pc}

08004384 <NRF24_csn.part.0>:
}

//1. Chip Select function
void NRF24_csn(int state)
{
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 8004384:	4b03      	ldr	r3, [pc, #12]	; (8004394 <NRF24_csn.part.0+0x10>)
 8004386:	2201      	movs	r2, #1
 8004388:	8819      	ldrh	r1, [r3, #0]
 800438a:	4b03      	ldr	r3, [pc, #12]	; (8004398 <NRF24_csn.part.0+0x14>)
 800438c:	6818      	ldr	r0, [r3, #0]
 800438e:	f7fc bb5d 	b.w	8000a4c <HAL_GPIO_WritePin>
 8004392:	bf00      	nop
 8004394:	200000bc 	.word	0x200000bc
 8004398:	200000c0 	.word	0x200000c0

0800439c <NRF24_ce.part.1>:
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
//2. Chip Enable
void NRF24_ce(int state)
{
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 800439c:	4b03      	ldr	r3, [pc, #12]	; (80043ac <NRF24_ce.part.1+0x10>)
 800439e:	2201      	movs	r2, #1
 80043a0:	8819      	ldrh	r1, [r3, #0]
 80043a2:	4b03      	ldr	r3, [pc, #12]	; (80043b0 <NRF24_ce.part.1+0x14>)
 80043a4:	6818      	ldr	r0, [r3, #0]
 80043a6:	f7fc bb51 	b.w	8000a4c <HAL_GPIO_WritePin>
 80043aa:	bf00      	nop
 80043ac:	200000ba 	.word	0x200000ba
 80043b0:	200000c0 	.word	0x200000c0

080043b4 <NRF24_csn>:
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 80043b4:	4602      	mov	r2, r0
 80043b6:	b108      	cbz	r0, 80043bc <NRF24_csn+0x8>
 80043b8:	f7ff bfe4 	b.w	8004384 <NRF24_csn.part.0>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 80043bc:	4b02      	ldr	r3, [pc, #8]	; (80043c8 <NRF24_csn+0x14>)
 80043be:	8819      	ldrh	r1, [r3, #0]
 80043c0:	4b02      	ldr	r3, [pc, #8]	; (80043cc <NRF24_csn+0x18>)
 80043c2:	6818      	ldr	r0, [r3, #0]
 80043c4:	f7fc bb42 	b.w	8000a4c <HAL_GPIO_WritePin>
 80043c8:	200000bc 	.word	0x200000bc
 80043cc:	200000c0 	.word	0x200000c0

080043d0 <NRF24_ce>:
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 80043d0:	4602      	mov	r2, r0
 80043d2:	b108      	cbz	r0, 80043d8 <NRF24_ce+0x8>
 80043d4:	f7ff bfe2 	b.w	800439c <NRF24_ce.part.1>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 80043d8:	4b02      	ldr	r3, [pc, #8]	; (80043e4 <NRF24_ce+0x14>)
 80043da:	8819      	ldrh	r1, [r3, #0]
 80043dc:	4b02      	ldr	r3, [pc, #8]	; (80043e8 <NRF24_ce+0x18>)
 80043de:	6818      	ldr	r0, [r3, #0]
 80043e0:	f7fc bb34 	b.w	8000a4c <HAL_GPIO_WritePin>
 80043e4:	200000ba 	.word	0x200000ba
 80043e8:	200000c0 	.word	0x200000c0

080043ec <NRF24_read_register>:
}
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 80043ec:	b513      	push	{r0, r1, r4, lr}
 80043ee:	4604      	mov	r4, r0
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 80043f0:	2000      	movs	r0, #0
 80043f2:	f7ff ffdf 	bl	80043b4 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 80043f6:	a902      	add	r1, sp, #8
 80043f8:	f004 041f 	and.w	r4, r4, #31
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80043fc:	2364      	movs	r3, #100	; 0x64
 80043fe:	2201      	movs	r2, #1
	spiBuf[0] = reg&0x1F;
 8004400:	f801 4d04 	strb.w	r4, [r1, #-4]!
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8004404:	4c08      	ldr	r4, [pc, #32]	; (8004428 <NRF24_read_register+0x3c>)
 8004406:	4620      	mov	r0, r4
 8004408:	f7fd fff2 	bl	80023f0 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 800440c:	2364      	movs	r3, #100	; 0x64
 800440e:	2201      	movs	r2, #1
 8004410:	f10d 0105 	add.w	r1, sp, #5
 8004414:	4620      	mov	r0, r4
 8004416:	f7fe fa89 	bl	800292c <HAL_SPI_Receive>
	retData = spiBuf[1];
 800441a:	f89d 4005 	ldrb.w	r4, [sp, #5]
 800441e:	f7ff ffb1 	bl	8004384 <NRF24_csn.part.0>
	//Bring CSN high
	NRF24_csn(1);
	return retData;
}
 8004422:	4620      	mov	r0, r4
 8004424:	b002      	add	sp, #8
 8004426:	bd10      	pop	{r4, pc}
 8004428:	200000c4 	.word	0x200000c4

0800442c <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 800442c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800442e:	4604      	mov	r4, r0
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8004430:	2000      	movs	r0, #0
{
 8004432:	460d      	mov	r5, r1
 8004434:	4616      	mov	r6, r2
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8004436:	f004 041f 	and.w	r4, r4, #31
	NRF24_csn(0);
 800443a:	f7ff ffbb 	bl	80043b4 <NRF24_csn>
	spiBuf[0] = reg&0x1F;
 800443e:	a902      	add	r1, sp, #8
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8004440:	2364      	movs	r3, #100	; 0x64
 8004442:	2201      	movs	r2, #1
	spiBuf[0] = reg&0x1F;
 8004444:	f801 4d04 	strb.w	r4, [r1, #-4]!
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8004448:	4c06      	ldr	r4, [pc, #24]	; (8004464 <NRF24_read_registerN+0x38>)
 800444a:	4620      	mov	r0, r4
 800444c:	f7fd ffd0 	bl	80023f0 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 8004450:	2364      	movs	r3, #100	; 0x64
 8004452:	4632      	mov	r2, r6
 8004454:	4629      	mov	r1, r5
 8004456:	4620      	mov	r0, r4
 8004458:	f7fe fa68 	bl	800292c <HAL_SPI_Receive>
 800445c:	f7ff ff92 	bl	8004384 <NRF24_csn.part.0>
	//Bring CSN high
	NRF24_csn(1);
}
 8004460:	b002      	add	sp, #8
 8004462:	bd70      	pop	{r4, r5, r6, pc}
 8004464:	200000c4 	.word	0x200000c4

08004468 <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 8004468:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800446a:	4604      	mov	r4, r0
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 800446c:	2000      	movs	r0, #0
{
 800446e:	460d      	mov	r5, r1
	NRF24_csn(0);
 8004470:	f7ff ffa0 	bl	80043b4 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8004474:	f044 0420 	orr.w	r4, r4, #32
	spiBuf[1] = value;
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 8004478:	2364      	movs	r3, #100	; 0x64
 800447a:	2202      	movs	r2, #2
 800447c:	a901      	add	r1, sp, #4
 800447e:	4805      	ldr	r0, [pc, #20]	; (8004494 <NRF24_write_register+0x2c>)
	spiBuf[0] = reg|0x20;
 8004480:	f88d 4004 	strb.w	r4, [sp, #4]
	spiBuf[1] = value;
 8004484:	f88d 5005 	strb.w	r5, [sp, #5]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 8004488:	f7fd ffb2 	bl	80023f0 <HAL_SPI_Transmit>
 800448c:	f7ff ff7a 	bl	8004384 <NRF24_csn.part.0>
	//Bring CSN high
	NRF24_csn(1);
}
 8004490:	b003      	add	sp, #12
 8004492:	bd30      	pop	{r4, r5, pc}
 8004494:	200000c4 	.word	0x200000c4

08004498 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8004498:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800449a:	4604      	mov	r4, r0
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 800449c:	2000      	movs	r0, #0
{
 800449e:	460d      	mov	r5, r1
 80044a0:	4616      	mov	r6, r2
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 80044a2:	f044 0420 	orr.w	r4, r4, #32
	NRF24_csn(0);
 80044a6:	f7ff ff85 	bl	80043b4 <NRF24_csn>
	spiBuf[0] = reg|0x20;
 80044aa:	a902      	add	r1, sp, #8
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80044ac:	2364      	movs	r3, #100	; 0x64
 80044ae:	2201      	movs	r2, #1
	spiBuf[0] = reg|0x20;
 80044b0:	f801 4d04 	strb.w	r4, [r1, #-4]!
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80044b4:	4c06      	ldr	r4, [pc, #24]	; (80044d0 <NRF24_write_registerN+0x38>)
 80044b6:	4620      	mov	r0, r4
 80044b8:	f7fd ff9a 	bl	80023f0 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 80044bc:	2364      	movs	r3, #100	; 0x64
 80044be:	4632      	mov	r2, r6
 80044c0:	4629      	mov	r1, r5
 80044c2:	4620      	mov	r0, r4
 80044c4:	f7fd ff94 	bl	80023f0 <HAL_SPI_Transmit>
 80044c8:	f7ff ff5c 	bl	8004384 <NRF24_csn.part.0>
	//Bring CSN high
	NRF24_csn(1);
}
 80044cc:	b002      	add	sp, #8
 80044ce:	bd70      	pop	{r4, r5, r6, pc}
 80044d0:	200000c4 	.word	0x200000c4

080044d4 <NRF24_write_payload>:
//7. Write transmit payload
void NRF24_write_payload(const void* buf, uint8_t len)
{
 80044d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80044d6:	4605      	mov	r5, r0
	uint8_t wrPayloadCmd;
	//Bring CSN low
	NRF24_csn(0);
 80044d8:	2000      	movs	r0, #0
{
 80044da:	460e      	mov	r6, r1
	//Send Write Tx payload command followed by pbuf data
	wrPayloadCmd = CMD_W_TX_PAYLOAD;
	HAL_SPI_Transmit(&nrf24_hspi, &wrPayloadCmd, 1, 100);
 80044dc:	4c0a      	ldr	r4, [pc, #40]	; (8004508 <NRF24_write_payload+0x34>)
	NRF24_csn(0);
 80044de:	f7ff ff69 	bl	80043b4 <NRF24_csn>
	wrPayloadCmd = CMD_W_TX_PAYLOAD;
 80044e2:	a902      	add	r1, sp, #8
 80044e4:	23a0      	movs	r3, #160	; 0xa0
	HAL_SPI_Transmit(&nrf24_hspi, &wrPayloadCmd, 1, 100);
 80044e6:	2201      	movs	r2, #1
 80044e8:	4620      	mov	r0, r4
	wrPayloadCmd = CMD_W_TX_PAYLOAD;
 80044ea:	f801 3d01 	strb.w	r3, [r1, #-1]!
	HAL_SPI_Transmit(&nrf24_hspi, &wrPayloadCmd, 1, 100);
 80044ee:	2364      	movs	r3, #100	; 0x64
 80044f0:	f7fd ff7e 	bl	80023f0 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t *)buf, len, 100);
 80044f4:	2364      	movs	r3, #100	; 0x64
 80044f6:	4632      	mov	r2, r6
 80044f8:	4629      	mov	r1, r5
 80044fa:	4620      	mov	r0, r4
 80044fc:	f7fd ff78 	bl	80023f0 <HAL_SPI_Transmit>
 8004500:	f7ff ff40 	bl	8004384 <NRF24_csn.part.0>
	//Bring CSN high
	NRF24_csn(1);
}
 8004504:	b002      	add	sp, #8
 8004506:	bd70      	pop	{r4, r5, r6, pc}
 8004508:	200000c4 	.word	0x200000c4

0800450c <NRF24_flush_tx>:
}

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 800450c:	21ff      	movs	r1, #255	; 0xff
 800450e:	20e1      	movs	r0, #225	; 0xe1
 8004510:	f7ff bfaa 	b.w	8004468 <NRF24_write_register>

08004514 <NRF24_flush_rx>:
}
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8004514:	21ff      	movs	r1, #255	; 0xff
 8004516:	20e2      	movs	r0, #226	; 0xe2
 8004518:	f7ff bfa6 	b.w	8004468 <NRF24_write_register>

0800451c <NRF24_get_status>:
}
//11. Get status register value
uint8_t NRF24_get_status(void)
{
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 800451c:	2007      	movs	r0, #7
 800451e:	f7ff bf65 	b.w	80043ec <NRF24_read_register>

08004522 <NRF24_stopListening>:
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
}
//14. Stop listening (essential before any write operation)
void NRF24_stopListening(void)
{
 8004522:	b508      	push	{r3, lr}
	NRF24_ce(0);
 8004524:	2000      	movs	r0, #0
 8004526:	f7ff ff53 	bl	80043d0 <NRF24_ce>
	NRF24_flush_tx();
 800452a:	f7ff ffef 	bl	800450c <NRF24_flush_tx>
	NRF24_flush_rx();
}
 800452e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	NRF24_flush_rx();
 8004532:	f7ff bfef 	b.w	8004514 <NRF24_flush_rx>
	...

08004538 <NRF24_openWritingPipe>:
	NRF24_getDynamicPayloadSize();
	return rxStatus;
}
//18. Open Tx pipe for writing (Cannot perform this while Listenning, has to call NRF24_stopListening)
void NRF24_openWritingPipe(uint64_t address)
{
 8004538:	b513      	push	{r0, r1, r4, lr}
 800453a:	ac02      	add	r4, sp, #8
	NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&address), 5);
 800453c:	2205      	movs	r2, #5
{
 800453e:	e964 0102 	strd	r0, r1, [r4, #-8]!
	NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&address), 5);
 8004542:	200a      	movs	r0, #10
 8004544:	4621      	mov	r1, r4
 8004546:	f7ff ffa7 	bl	8004498 <NRF24_write_registerN>
  NRF24_write_registerN(REG_TX_ADDR, (uint8_t *)(&address), 5);
 800454a:	2205      	movs	r2, #5
 800454c:	4621      	mov	r1, r4
 800454e:	2010      	movs	r0, #16
 8004550:	f7ff ffa2 	bl	8004498 <NRF24_write_registerN>
	
	const uint8_t max_payload_size = 32;
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
 8004554:	4b04      	ldr	r3, [pc, #16]	; (8004568 <NRF24_openWritingPipe+0x30>)
 8004556:	2011      	movs	r0, #17
 8004558:	7819      	ldrb	r1, [r3, #0]
 800455a:	2920      	cmp	r1, #32
 800455c:	bf28      	it	cs
 800455e:	2120      	movcs	r1, #32
 8004560:	f7ff ff82 	bl	8004468 <NRF24_write_register>
}
 8004564:	b002      	add	sp, #8
 8004566:	bd10      	pop	{r4, pc}
 8004568:	200001d8 	.word	0x200001d8

0800456c <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
	const uint8_t max_channel = 127;
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 800456c:	287f      	cmp	r0, #127	; 0x7f
 800456e:	4601      	mov	r1, r0
 8004570:	f04f 0005 	mov.w	r0, #5
 8004574:	bf28      	it	cs
 8004576:	217f      	movcs	r1, #127	; 0x7f
 8004578:	f7ff bf76 	b.w	8004468 <NRF24_write_register>

0800457c <NRF24_setPayloadSize>:
}
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
	const uint8_t max_payload_size = 32;
  payload_size = MIN(size,max_payload_size);
 800457c:	2820      	cmp	r0, #32
 800457e:	4b02      	ldr	r3, [pc, #8]	; (8004588 <NRF24_setPayloadSize+0xc>)
 8004580:	bf28      	it	cs
 8004582:	2020      	movcs	r0, #32
 8004584:	7018      	strb	r0, [r3, #0]
 8004586:	4770      	bx	lr
 8004588:	200001d8 	.word	0x200001d8

0800458c <NRF24_getDynamicPayloadSize>:
	return payload_size;
}
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
	return NRF24_read_register(CMD_R_RX_PL_WID);
 800458c:	2060      	movs	r0, #96	; 0x60
 800458e:	f7ff bf2d 	b.w	80043ec <NRF24_read_register>

08004592 <NRF24_disableDynamicPayloads>:
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
  dynamic_payloads_enabled = true;
	
}
void NRF24_disableDynamicPayloads(void)
{
 8004592:	b508      	push	{r3, lr}
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8004594:	201d      	movs	r0, #29
 8004596:	f7ff ff29 	bl	80043ec <NRF24_read_register>
 800459a:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 800459e:	201d      	movs	r0, #29
 80045a0:	f7ff ff62 	bl	8004468 <NRF24_write_register>
	//Disable for all pipes 
	NRF24_write_register(REG_DYNPD,0);
 80045a4:	2100      	movs	r1, #0
 80045a6:	201c      	movs	r0, #28
	dynamic_payloads_enabled = false;
}
 80045a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	NRF24_write_register(REG_DYNPD,0);
 80045ac:	f7ff bf5c 	b.w	8004468 <NRF24_write_register>

080045b0 <NRF24_setAutoAck>:
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
	if ( enable )
 80045b0:	4601      	mov	r1, r0
 80045b2:	b100      	cbz	r0, 80045b6 <NRF24_setAutoAck+0x6>
    NRF24_write_register(REG_EN_AA, 0x3F);
 80045b4:	213f      	movs	r1, #63	; 0x3f
  else
    NRF24_write_register(REG_EN_AA, 0x00);
 80045b6:	2001      	movs	r0, #1
 80045b8:	f7ff bf56 	b.w	8004468 <NRF24_write_register>

080045bc <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 80045bc:	b510      	push	{r4, lr}
 80045be:	4604      	mov	r4, r0
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 80045c0:	2006      	movs	r0, #6
 80045c2:	f7ff ff13 	bl	80043ec <NRF24_read_register>
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80045c6:	f000 01f9 	and.w	r1, r0, #249	; 0xf9

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 80045ca:	2c03      	cmp	r4, #3
 80045cc:	d102      	bne.n	80045d4 <NRF24_setPALevel+0x18>
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80045ce:	f041 0106 	orr.w	r1, r1, #6
 80045d2:	e003      	b.n	80045dc <NRF24_setPALevel+0x20>
  else if ( level == RF24_PA_m6dB )
 80045d4:	2c02      	cmp	r4, #2
 80045d6:	d106      	bne.n	80045e6 <NRF24_setPALevel+0x2a>
    setup |= _BV(RF_PWR_HIGH) ;
 80045d8:	f041 0104 	orr.w	r1, r1, #4
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 80045dc:	2006      	movs	r0, #6
}
 80045de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  NRF24_write_register( REG_RF_SETUP, setup ) ;
 80045e2:	f7ff bf41 	b.w	8004468 <NRF24_write_register>
  else if ( level == RF24_PA_m12dB )
 80045e6:	2c01      	cmp	r4, #1
 80045e8:	d102      	bne.n	80045f0 <NRF24_setPALevel+0x34>
    setup |= _BV(RF_PWR_LOW);
 80045ea:	f041 0102 	orr.w	r1, r1, #2
 80045ee:	e7f5      	b.n	80045dc <NRF24_setPALevel+0x20>
  else if ( level == RF24_PA_ERROR )
 80045f0:	2c04      	cmp	r4, #4
 80045f2:	d1f3      	bne.n	80045dc <NRF24_setPALevel+0x20>
 80045f4:	e7eb      	b.n	80045ce <NRF24_setPALevel+0x12>

080045f6 <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 80045f6:	b538      	push	{r3, r4, r5, lr}
 80045f8:	4605      	mov	r5, r0
	bool result = false;
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 80045fa:	2006      	movs	r0, #6
 80045fc:	f7ff fef6 	bl	80043ec <NRF24_read_register>

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8004600:	f000 04d7 	and.w	r4, r0, #215	; 0xd7
  if( speed == RF24_250KBPS )
 8004604:	2d02      	cmp	r5, #2
 8004606:	d10c      	bne.n	8004622 <NRF24_setDataRate+0x2c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
    setup |= _BV( RF_DR_LOW ) ;
 8004608:	f044 0420 	orr.w	r4, r4, #32
    {
      // 1Mbs
      wide_band = false ;
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 800460c:	4621      	mov	r1, r4
 800460e:	2006      	movs	r0, #6
 8004610:	f7ff ff2a 	bl	8004468 <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8004614:	2006      	movs	r0, #6
 8004616:	f7ff fee9 	bl	80043ec <NRF24_read_register>
  {
    wide_band = false;
  }

  return result;
}
 800461a:	1a23      	subs	r3, r4, r0
 800461c:	4258      	negs	r0, r3
 800461e:	4158      	adcs	r0, r3
 8004620:	bd38      	pop	{r3, r4, r5, pc}
    if ( speed == RF24_2MBPS )
 8004622:	2d01      	cmp	r5, #1
      setup |= _BV(RF_DR_HIGH);
 8004624:	bf08      	it	eq
 8004626:	f044 0408 	orreq.w	r4, r4, #8
 800462a:	e7ef      	b.n	800460c <NRF24_setDataRate+0x16>

0800462c <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 800462c:	b510      	push	{r4, lr}
 800462e:	4604      	mov	r4, r0
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8004630:	2000      	movs	r0, #0
 8004632:	f7ff fedb 	bl	80043ec <NRF24_read_register>
 8004636:	f000 01f3 	and.w	r1, r0, #243	; 0xf3
  
  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 800463a:	b12c      	cbz	r4, 8004648 <NRF24_setCRCLength+0x1c>
  {
    // Do nothing, we turned it off above. 
  }
  else if ( length == RF24_CRC_8 )
 800463c:	2c01      	cmp	r4, #1
  {
    config |= _BV(BIT_EN_CRC);
 800463e:	bf0c      	ite	eq
 8004640:	f041 0108 	orreq.w	r1, r1, #8
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
    config |= _BV( BIT_CRCO );
 8004644:	f041 010c 	orrne.w	r1, r1, #12
  }
  NRF24_write_register( REG_CONFIG, config );
 8004648:	2000      	movs	r0, #0
}
 800464a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  NRF24_write_register( REG_CONFIG, config );
 800464e:	f7ff bf0b 	b.w	8004468 <NRF24_write_register>

08004652 <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 8004652:	b508      	push	{r3, lr}
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8004654:	2000      	movs	r0, #0
 8004656:	f7ff fec9 	bl	80043ec <NRF24_read_register>
 800465a:	f000 01fd 	and.w	r1, r0, #253	; 0xfd
 800465e:	2000      	movs	r0, #0
}
 8004660:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8004664:	f7ff bf00 	b.w	8004468 <NRF24_write_register>

08004668 <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 8004668:	b570      	push	{r4, r5, r6, lr}
 800466a:	4605      	mov	r5, r0
	uint8_t status = NRF24_get_status();
 800466c:	f7ff ff56 	bl	800451c <NRF24_get_status>
 8004670:	f000 0340 	and.w	r3, r0, #64	; 0x40
 8004674:	4604      	mov	r4, r0

  bool result = ( status & _BV(BIT_RX_DR) );
 8004676:	2b00      	cmp	r3, #0
 8004678:	bf14      	ite	ne
 800467a:	2601      	movne	r6, #1
 800467c:	2600      	moveq	r6, #0

  if (result)
 800467e:	d00d      	beq.n	800469c <NRF24_availablePipe+0x34>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 8004680:	b115      	cbz	r5, 8004688 <NRF24_availablePipe+0x20>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 8004682:	f3c0 0342 	ubfx	r3, r0, #1, #3
 8004686:	702b      	strb	r3, [r5, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 8004688:	2140      	movs	r1, #64	; 0x40
 800468a:	2007      	movs	r0, #7
 800468c:	f7ff feec 	bl	8004468 <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 8004690:	06a3      	lsls	r3, r4, #26
 8004692:	d503      	bpl.n	800469c <NRF24_availablePipe+0x34>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 8004694:	2120      	movs	r1, #32
 8004696:	2007      	movs	r0, #7
 8004698:	f7ff fee6 	bl	8004468 <NRF24_write_register>
    }
  }
  return result;
}
 800469c:	4630      	mov	r0, r6
 800469e:	bd70      	pop	{r4, r5, r6, pc}

080046a0 <NRF24_available>:
	return NRF24_availablePipe(NULL);
 80046a0:	2000      	movs	r0, #0
 80046a2:	f7ff bfe1 	b.w	8004668 <NRF24_availablePipe>

080046a6 <NRF24_startWrite>:
//40. Start write (for IRQ mode)
void NRF24_startWrite( const void* buf, uint8_t len )
{
 80046a6:	b538      	push	{r3, r4, r5, lr}
 80046a8:	4604      	mov	r4, r0
	// Transmitter power-up
  NRF24_write_register(REG_CONFIG, ( NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP) ) & ~_BV(BIT_PRIM_RX) );
 80046aa:	2000      	movs	r0, #0
{
 80046ac:	460d      	mov	r5, r1
  NRF24_write_register(REG_CONFIG, ( NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP) ) & ~_BV(BIT_PRIM_RX) );
 80046ae:	f7ff fe9d 	bl	80043ec <NRF24_read_register>
 80046b2:	f000 01fc 	and.w	r1, r0, #252	; 0xfc
 80046b6:	2000      	movs	r0, #0
 80046b8:	f041 0102 	orr.w	r1, r1, #2
 80046bc:	f7ff fed4 	bl	8004468 <NRF24_write_register>
	SystemCoreClockUpdate();
 80046c0:	f000 ff56 	bl	8005570 <SystemCoreClockUpdate>
  NRF24_DelayMicroSeconds(150);

  // Send the payload
  NRF24_write_payload( buf, len );
 80046c4:	4620      	mov	r0, r4
 80046c6:	4629      	mov	r1, r5
 80046c8:	f7ff ff04 	bl	80044d4 <NRF24_write_payload>
 80046cc:	f7ff fe66 	bl	800439c <NRF24_ce.part.1>
	SystemCoreClockUpdate();
 80046d0:	f000 ff4e 	bl	8005570 <SystemCoreClockUpdate>

  // Enable Tx for 15usec
  NRF24_ce(1);
  NRF24_DelayMicroSeconds(15);
  NRF24_ce(0);
 80046d4:	2000      	movs	r0, #0
}
 80046d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  NRF24_ce(0);
 80046da:	f7ff be79 	b.w	80043d0 <NRF24_ce>

080046de <NRF24_whatHappened>:
  ack_payload_available = false;
  return result;
}
//43. Check interrupt flags
void NRF24_whatHappened(bool *tx_ok,bool *tx_fail,bool *rx_ready)
{
 80046de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046e0:	4605      	mov	r5, r0
 80046e2:	460f      	mov	r7, r1
 80046e4:	4616      	mov	r6, r2
	uint8_t status = NRF24_get_status();
 80046e6:	f7ff ff19 	bl	800451c <NRF24_get_status>
	*tx_ok = 0;
 80046ea:	2300      	movs	r3, #0
	uint8_t status = NRF24_get_status();
 80046ec:	4604      	mov	r4, r0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 80046ee:	2170      	movs	r1, #112	; 0x70
 80046f0:	2007      	movs	r0, #7
	*tx_ok = 0;
 80046f2:	702b      	strb	r3, [r5, #0]
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 80046f4:	f7ff feb8 	bl	8004468 <NRF24_write_register>
  // Report to the user what happened
  *tx_ok = status & _BV(BIT_TX_DS);
 80046f8:	f3c4 1340 	ubfx	r3, r4, #5, #1
 80046fc:	702b      	strb	r3, [r5, #0]
  *tx_fail = status & _BV(BIT_MAX_RT);
 80046fe:	f3c4 1300 	ubfx	r3, r4, #4, #1
  *rx_ready = status & _BV(BIT_RX_DR);
 8004702:	f3c4 1480 	ubfx	r4, r4, #6, #1
  *tx_fail = status & _BV(BIT_MAX_RT);
 8004706:	703b      	strb	r3, [r7, #0]
  *rx_ready = status & _BV(BIT_RX_DR);
 8004708:	7034      	strb	r4, [r6, #0]
 800470a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800470c <NRF24_resetStatus>:
}

//46. Reset Status
void NRF24_resetStatus(void)
{
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 800470c:	2170      	movs	r1, #112	; 0x70
 800470e:	2007      	movs	r0, #7
 8004710:	f7ff beaa 	b.w	8004468 <NRF24_write_register>

08004714 <NRF24_write>:
{
 8004714:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004716:	4604      	mov	r4, r0
 8004718:	460d      	mov	r5, r1
	NRF24_resetStatus();
 800471a:	f7ff fff7 	bl	800470c <NRF24_resetStatus>
	NRF24_startWrite(buf,len);
 800471e:	4620      	mov	r0, r4
 8004720:	4629      	mov	r1, r5
 8004722:	f7ff ffc0 	bl	80046a6 <NRF24_startWrite>
  uint32_t sent_at = HAL_GetTick();
 8004726:	f7fc f81b 	bl	8000760 <HAL_GetTick>
 800472a:	4604      	mov	r4, r0
    NRF24_read_registerN(REG_OBSERVE_TX,&observe_tx,1);
 800472c:	2201      	movs	r2, #1
 800472e:	f10d 0105 	add.w	r1, sp, #5
 8004732:	2008      	movs	r0, #8
 8004734:	f7ff fe7a 	bl	800442c <NRF24_read_registerN>
		status = NRF24_get_status();
 8004738:	f7ff fef0 	bl	800451c <NRF24_get_status>
  while( ! ( status & ( _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) ) ) && ( HAL_GetTick() - sent_at < timeout ) );
 800473c:	f010 0f30 	tst.w	r0, #48	; 0x30
 8004740:	d016      	beq.n	8004770 <NRF24_write+0x5c>
  NRF24_whatHappened(&tx_ok,&tx_fail, &ack_payload_available);
 8004742:	4c0e      	ldr	r4, [pc, #56]	; (800477c <NRF24_write+0x68>)
 8004744:	f10d 0107 	add.w	r1, sp, #7
 8004748:	f10d 0006 	add.w	r0, sp, #6
 800474c:	4622      	mov	r2, r4
 800474e:	f7ff ffc6 	bl	80046de <NRF24_whatHappened>
	if ( ack_payload_available )
 8004752:	7823      	ldrb	r3, [r4, #0]
	retStatus = tx_ok;
 8004754:	f89d 5006 	ldrb.w	r5, [sp, #6]
	if ( ack_payload_available )
 8004758:	b11b      	cbz	r3, 8004762 <NRF24_write+0x4e>
    ack_payload_length = NRF24_getDynamicPayloadSize();
 800475a:	f7ff ff17 	bl	800458c <NRF24_getDynamicPayloadSize>
 800475e:	4b08      	ldr	r3, [pc, #32]	; (8004780 <NRF24_write+0x6c>)
 8004760:	7018      	strb	r0, [r3, #0]
	NRF24_available();
 8004762:	f7ff ff9d 	bl	80046a0 <NRF24_available>
	NRF24_flush_tx();
 8004766:	f7ff fed1 	bl	800450c <NRF24_flush_tx>
}
 800476a:	4628      	mov	r0, r5
 800476c:	b003      	add	sp, #12
 800476e:	bd30      	pop	{r4, r5, pc}
  while( ! ( status & ( _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) ) ) && ( HAL_GetTick() - sent_at < timeout ) );
 8004770:	f7fb fff6 	bl	8000760 <HAL_GetTick>
 8004774:	1b00      	subs	r0, r0, r4
 8004776:	2809      	cmp	r0, #9
 8004778:	d9d8      	bls.n	800472c <NRF24_write+0x18>
 800477a:	e7e2      	b.n	8004742 <NRF24_write+0x2e>
 800477c:	200000b8 	.word	0x200000b8
 8004780:	200000b9 	.word	0x200000b9

08004784 <NRF24_ACTIVATE_cmd>:
}

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 8004784:	b507      	push	{r0, r1, r2, lr}
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8004786:	2000      	movs	r0, #0
 8004788:	f7ff fe14 	bl	80043b4 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 800478c:	2350      	movs	r3, #80	; 0x50
	cmdRxBuf[1] = 0x73;
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 800478e:	2202      	movs	r2, #2
 8004790:	a901      	add	r1, sp, #4
	cmdRxBuf[0] = CMD_ACTIVATE;
 8004792:	f88d 3004 	strb.w	r3, [sp, #4]
	cmdRxBuf[1] = 0x73;
 8004796:	2373      	movs	r3, #115	; 0x73
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8004798:	4805      	ldr	r0, [pc, #20]	; (80047b0 <NRF24_ACTIVATE_cmd+0x2c>)
	cmdRxBuf[1] = 0x73;
 800479a:	f88d 3005 	strb.w	r3, [sp, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 800479e:	2364      	movs	r3, #100	; 0x64
 80047a0:	f7fd fe26 	bl	80023f0 <HAL_SPI_Transmit>
 80047a4:	f7ff fdee 	bl	8004384 <NRF24_csn.part.0>
	NRF24_csn(1);
}
 80047a8:	b003      	add	sp, #12
 80047aa:	f85d fb04 	ldr.w	pc, [sp], #4
 80047ae:	bf00      	nop
 80047b0:	200000c4 	.word	0x200000c4

080047b4 <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 80047b4:	b510      	push	{r4, lr}
 80047b6:	b0a0      	sub	sp, #128	; 0x80
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 80047b8:	49bc      	ldr	r1, [pc, #752]	; (8004aac <printRadioSettings+0x2f8>)
 80047ba:	a807      	add	r0, sp, #28
 80047bc:	f001 f824 	bl	8005808 <strcpy>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80047c0:	a807      	add	r0, sp, #28
 80047c2:	f7fb fd8d 	bl	80002e0 <strlen>
 80047c6:	230a      	movs	r3, #10
 80047c8:	b282      	uxth	r2, r0
 80047ca:	a907      	add	r1, sp, #28
 80047cc:	48b8      	ldr	r0, [pc, #736]	; (8004ab0 <printRadioSettings+0x2fc>)
 80047ce:	f7ff fa8c 	bl	8003cea <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 80047d2:	2000      	movs	r0, #0
 80047d4:	f7ff fe0a 	bl	80043ec <NRF24_read_register>
	if(reg8Val & (1 << 3))
 80047d8:	0704      	lsls	r4, r0, #28
 80047da:	f140 8230 	bpl.w	8004c3e <printRadioSettings+0x48a>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 80047de:	0740      	lsls	r0, r0, #29
 80047e0:	bf4c      	ite	mi
 80047e2:	49b4      	ldrmi	r1, [pc, #720]	; (8004ab4 <printRadioSettings+0x300>)
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");	
 80047e4:	49b4      	ldrpl	r1, [pc, #720]	; (8004ab8 <printRadioSettings+0x304>)
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 80047e6:	a807      	add	r0, sp, #28
 80047e8:	f001 f80e 	bl	8005808 <strcpy>
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80047ec:	a807      	add	r0, sp, #28
 80047ee:	f7fb fd77 	bl	80002e0 <strlen>
 80047f2:	230a      	movs	r3, #10
 80047f4:	b282      	uxth	r2, r0
 80047f6:	a907      	add	r1, sp, #28
 80047f8:	48ad      	ldr	r0, [pc, #692]	; (8004ab0 <printRadioSettings+0x2fc>)
 80047fa:	f7ff fa76 	bl	8003cea <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 80047fe:	2001      	movs	r0, #1
 8004800:	f7ff fdf4 	bl	80043ec <NRF24_read_register>
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8004804:	f3c0 1340 	ubfx	r3, r0, #5, #1
 8004808:	f000 0201 	and.w	r2, r0, #1
 800480c:	49ab      	ldr	r1, [pc, #684]	; (8004abc <printRadioSettings+0x308>)
 800480e:	9303      	str	r3, [sp, #12]
 8004810:	f3c0 1300 	ubfx	r3, r0, #4, #1
 8004814:	9302      	str	r3, [sp, #8]
 8004816:	f3c0 03c0 	ubfx	r3, r0, #3, #1
 800481a:	9301      	str	r3, [sp, #4]
 800481c:	f3c0 0380 	ubfx	r3, r0, #2, #1
 8004820:	9300      	str	r3, [sp, #0]
 8004822:	f3c0 0340 	ubfx	r3, r0, #1, #1
 8004826:	a807      	add	r0, sp, #28
 8004828:	f000 ffca 	bl	80057c0 <siprintf>
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800482c:	a807      	add	r0, sp, #28
 800482e:	f7fb fd57 	bl	80002e0 <strlen>
 8004832:	230a      	movs	r3, #10
 8004834:	b282      	uxth	r2, r0
 8004836:	a907      	add	r1, sp, #28
 8004838:	489d      	ldr	r0, [pc, #628]	; (8004ab0 <printRadioSettings+0x2fc>)
 800483a:	f7ff fa56 	bl	8003cea <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 800483e:	2002      	movs	r0, #2
 8004840:	f7ff fdd4 	bl	80043ec <NRF24_read_register>
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8004844:	f3c0 1340 	ubfx	r3, r0, #5, #1
 8004848:	f000 0201 	and.w	r2, r0, #1
 800484c:	499c      	ldr	r1, [pc, #624]	; (8004ac0 <printRadioSettings+0x30c>)
 800484e:	9303      	str	r3, [sp, #12]
 8004850:	f3c0 1300 	ubfx	r3, r0, #4, #1
 8004854:	9302      	str	r3, [sp, #8]
 8004856:	f3c0 03c0 	ubfx	r3, r0, #3, #1
 800485a:	9301      	str	r3, [sp, #4]
 800485c:	f3c0 0380 	ubfx	r3, r0, #2, #1
 8004860:	9300      	str	r3, [sp, #0]
 8004862:	f3c0 0340 	ubfx	r3, r0, #1, #1
 8004866:	a807      	add	r0, sp, #28
 8004868:	f000 ffaa 	bl	80057c0 <siprintf>
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800486c:	a807      	add	r0, sp, #28
 800486e:	f7fb fd37 	bl	80002e0 <strlen>
 8004872:	230a      	movs	r3, #10
 8004874:	b282      	uxth	r2, r0
 8004876:	a907      	add	r1, sp, #28
 8004878:	488d      	ldr	r0, [pc, #564]	; (8004ab0 <printRadioSettings+0x2fc>)
 800487a:	f7ff fa36 	bl	8003cea <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 800487e:	2003      	movs	r0, #3
 8004880:	f7ff fdb4 	bl	80043ec <NRF24_read_register>
 8004884:	f000 0203 	and.w	r2, r0, #3
	reg8Val +=2;
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 8004888:	498e      	ldr	r1, [pc, #568]	; (8004ac4 <printRadioSettings+0x310>)
 800488a:	a807      	add	r0, sp, #28
 800488c:	3202      	adds	r2, #2
 800488e:	f000 ff97 	bl	80057c0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004892:	a807      	add	r0, sp, #28
 8004894:	f7fb fd24 	bl	80002e0 <strlen>
 8004898:	230a      	movs	r3, #10
 800489a:	b282      	uxth	r2, r0
 800489c:	a907      	add	r1, sp, #28
 800489e:	4884      	ldr	r0, [pc, #528]	; (8004ab0 <printRadioSettings+0x2fc>)
 80048a0:	f7ff fa23 	bl	8003cea <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 80048a4:	2005      	movs	r0, #5
 80048a6:	f7ff fda1 	bl	80043ec <NRF24_read_register>
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 80048aa:	4987      	ldr	r1, [pc, #540]	; (8004ac8 <printRadioSettings+0x314>)
 80048ac:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 80048b0:	a807      	add	r0, sp, #28
 80048b2:	f000 ff85 	bl	80057c0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80048b6:	a807      	add	r0, sp, #28
 80048b8:	f7fb fd12 	bl	80002e0 <strlen>
 80048bc:	a907      	add	r1, sp, #28
 80048be:	b282      	uxth	r2, r0
 80048c0:	230a      	movs	r3, #10
 80048c2:	487b      	ldr	r0, [pc, #492]	; (8004ab0 <printRadioSettings+0x2fc>)
 80048c4:	f7ff fa11 	bl	8003cea <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 80048c8:	2006      	movs	r0, #6
 80048ca:	f7ff fd8f 	bl	80043ec <NRF24_read_register>
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 80048ce:	0701      	lsls	r1, r0, #28
	reg8Val = NRF24_read_register(0x06);
 80048d0:	4604      	mov	r4, r0
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 80048d2:	a807      	add	r0, sp, #28
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 80048d4:	bf4c      	ite	mi
 80048d6:	497d      	ldrmi	r1, [pc, #500]	; (8004acc <printRadioSettings+0x318>)
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 80048d8:	497d      	ldrpl	r1, [pc, #500]	; (8004ad0 <printRadioSettings+0x31c>)
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
	reg8Val &= (3 << 1);
	reg8Val = (reg8Val>>1);
 80048da:	f3c4 0441 	ubfx	r4, r4, #1, #2
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 80048de:	f000 ff93 	bl	8005808 <strcpy>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80048e2:	a807      	add	r0, sp, #28
 80048e4:	f7fb fcfc 	bl	80002e0 <strlen>
 80048e8:	230a      	movs	r3, #10
 80048ea:	b282      	uxth	r2, r0
 80048ec:	a907      	add	r1, sp, #28
 80048ee:	4870      	ldr	r0, [pc, #448]	; (8004ab0 <printRadioSettings+0x2fc>)
 80048f0:	f7ff f9fb 	bl	8003cea <HAL_UART_Transmit>
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 80048f4:	2c00      	cmp	r4, #0
 80048f6:	f040 81a4 	bne.w	8004c42 <printRadioSettings+0x48e>
 80048fa:	4976      	ldr	r1, [pc, #472]	; (8004ad4 <printRadioSettings+0x320>)
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 80048fc:	a807      	add	r0, sp, #28
 80048fe:	f000 ff83 	bl	8005808 <strcpy>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004902:	a807      	add	r0, sp, #28
 8004904:	f7fb fcec 	bl	80002e0 <strlen>
 8004908:	230a      	movs	r3, #10
 800490a:	b282      	uxth	r2, r0
 800490c:	a907      	add	r1, sp, #28
 800490e:	4868      	ldr	r0, [pc, #416]	; (8004ab0 <printRadioSettings+0x2fc>)
 8004910:	f7ff f9eb 	bl	8003cea <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 8004914:	a905      	add	r1, sp, #20
 8004916:	2205      	movs	r2, #5
 8004918:	200a      	movs	r0, #10
 800491a:	f7ff fd87 	bl	800442c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 800491e:	f89d 1014 	ldrb.w	r1, [sp, #20]
 8004922:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8004926:	a807      	add	r0, sp, #28
 8004928:	9102      	str	r1, [sp, #8]
 800492a:	f89d 1015 	ldrb.w	r1, [sp, #21]
 800492e:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8004932:	9101      	str	r1, [sp, #4]
 8004934:	f89d 1016 	ldrb.w	r1, [sp, #22]
 8004938:	9100      	str	r1, [sp, #0]
 800493a:	4967      	ldr	r1, [pc, #412]	; (8004ad8 <printRadioSettings+0x324>)
 800493c:	f000 ff40 	bl	80057c0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004940:	a807      	add	r0, sp, #28
 8004942:	f7fb fccd 	bl	80002e0 <strlen>
 8004946:	230a      	movs	r3, #10
 8004948:	b282      	uxth	r2, r0
 800494a:	a907      	add	r1, sp, #28
 800494c:	4858      	ldr	r0, [pc, #352]	; (8004ab0 <printRadioSettings+0x2fc>)
 800494e:	f7ff f9cc 	bl	8003cea <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 8004952:	a905      	add	r1, sp, #20
 8004954:	2205      	movs	r2, #5
 8004956:	200b      	movs	r0, #11
 8004958:	f7ff fd68 	bl	800442c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 800495c:	f89d 1014 	ldrb.w	r1, [sp, #20]
 8004960:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8004964:	a807      	add	r0, sp, #28
 8004966:	9102      	str	r1, [sp, #8]
 8004968:	f89d 1015 	ldrb.w	r1, [sp, #21]
 800496c:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8004970:	9101      	str	r1, [sp, #4]
 8004972:	f89d 1016 	ldrb.w	r1, [sp, #22]
 8004976:	9100      	str	r1, [sp, #0]
 8004978:	4958      	ldr	r1, [pc, #352]	; (8004adc <printRadioSettings+0x328>)
 800497a:	f000 ff21 	bl	80057c0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800497e:	a807      	add	r0, sp, #28
 8004980:	f7fb fcae 	bl	80002e0 <strlen>
 8004984:	230a      	movs	r3, #10
 8004986:	b282      	uxth	r2, r0
 8004988:	a907      	add	r1, sp, #28
 800498a:	4849      	ldr	r0, [pc, #292]	; (8004ab0 <printRadioSettings+0x2fc>)
 800498c:	f7ff f9ad 	bl	8003cea <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 8004990:	a905      	add	r1, sp, #20
 8004992:	2201      	movs	r2, #1
 8004994:	200c      	movs	r0, #12
 8004996:	f7ff fd49 	bl	800442c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800499a:	f89d 2014 	ldrb.w	r2, [sp, #20]
 800499e:	4950      	ldr	r1, [pc, #320]	; (8004ae0 <printRadioSettings+0x32c>)
 80049a0:	a807      	add	r0, sp, #28
 80049a2:	f000 ff0d 	bl	80057c0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80049a6:	a807      	add	r0, sp, #28
 80049a8:	f7fb fc9a 	bl	80002e0 <strlen>
 80049ac:	230a      	movs	r3, #10
 80049ae:	b282      	uxth	r2, r0
 80049b0:	a907      	add	r1, sp, #28
 80049b2:	483f      	ldr	r0, [pc, #252]	; (8004ab0 <printRadioSettings+0x2fc>)
 80049b4:	f7ff f999 	bl	8003cea <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 80049b8:	a905      	add	r1, sp, #20
 80049ba:	2201      	movs	r2, #1
 80049bc:	200d      	movs	r0, #13
 80049be:	f7ff fd35 	bl	800442c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80049c2:	f89d 2014 	ldrb.w	r2, [sp, #20]
 80049c6:	4947      	ldr	r1, [pc, #284]	; (8004ae4 <printRadioSettings+0x330>)
 80049c8:	a807      	add	r0, sp, #28
 80049ca:	f000 fef9 	bl	80057c0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80049ce:	a807      	add	r0, sp, #28
 80049d0:	f7fb fc86 	bl	80002e0 <strlen>
 80049d4:	230a      	movs	r3, #10
 80049d6:	b282      	uxth	r2, r0
 80049d8:	a907      	add	r1, sp, #28
 80049da:	4835      	ldr	r0, [pc, #212]	; (8004ab0 <printRadioSettings+0x2fc>)
 80049dc:	f7ff f985 	bl	8003cea <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 80049e0:	a905      	add	r1, sp, #20
 80049e2:	2201      	movs	r2, #1
 80049e4:	200e      	movs	r0, #14
 80049e6:	f7ff fd21 	bl	800442c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80049ea:	f89d 2014 	ldrb.w	r2, [sp, #20]
 80049ee:	493e      	ldr	r1, [pc, #248]	; (8004ae8 <printRadioSettings+0x334>)
 80049f0:	a807      	add	r0, sp, #28
 80049f2:	f000 fee5 	bl	80057c0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80049f6:	a807      	add	r0, sp, #28
 80049f8:	f7fb fc72 	bl	80002e0 <strlen>
 80049fc:	230a      	movs	r3, #10
 80049fe:	b282      	uxth	r2, r0
 8004a00:	a907      	add	r1, sp, #28
 8004a02:	482b      	ldr	r0, [pc, #172]	; (8004ab0 <printRadioSettings+0x2fc>)
 8004a04:	f7ff f971 	bl	8003cea <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 8004a08:	a905      	add	r1, sp, #20
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	200f      	movs	r0, #15
 8004a0e:	f7ff fd0d 	bl	800442c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8004a12:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8004a16:	4935      	ldr	r1, [pc, #212]	; (8004aec <printRadioSettings+0x338>)
 8004a18:	a807      	add	r0, sp, #28
 8004a1a:	f000 fed1 	bl	80057c0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004a1e:	a807      	add	r0, sp, #28
 8004a20:	f7fb fc5e 	bl	80002e0 <strlen>
 8004a24:	230a      	movs	r3, #10
 8004a26:	b282      	uxth	r2, r0
 8004a28:	a907      	add	r1, sp, #28
 8004a2a:	4821      	ldr	r0, [pc, #132]	; (8004ab0 <printRadioSettings+0x2fc>)
 8004a2c:	f7ff f95d 	bl	8003cea <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 8004a30:	a905      	add	r1, sp, #20
 8004a32:	2205      	movs	r2, #5
 8004a34:	2010      	movs	r0, #16
 8004a36:	f7ff fcf9 	bl	800442c <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8004a3a:	f89d 1014 	ldrb.w	r1, [sp, #20]
 8004a3e:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8004a42:	a807      	add	r0, sp, #28
 8004a44:	9102      	str	r1, [sp, #8]
 8004a46:	f89d 1015 	ldrb.w	r1, [sp, #21]
 8004a4a:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8004a4e:	9101      	str	r1, [sp, #4]
 8004a50:	f89d 1016 	ldrb.w	r1, [sp, #22]
 8004a54:	9100      	str	r1, [sp, #0]
 8004a56:	4926      	ldr	r1, [pc, #152]	; (8004af0 <printRadioSettings+0x33c>)
 8004a58:	f000 feb2 	bl	80057c0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004a5c:	a807      	add	r0, sp, #28
 8004a5e:	f7fb fc3f 	bl	80002e0 <strlen>
 8004a62:	230a      	movs	r3, #10
 8004a64:	b282      	uxth	r2, r0
 8004a66:	a907      	add	r1, sp, #28
 8004a68:	4811      	ldr	r0, [pc, #68]	; (8004ab0 <printRadioSettings+0x2fc>)
 8004a6a:	f7ff f93e 	bl	8003cea <HAL_UART_Transmit>
	
	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 8004a6e:	2011      	movs	r0, #17
 8004a70:	f7ff fcbc 	bl	80043ec <NRF24_read_register>
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8004a74:	491f      	ldr	r1, [pc, #124]	; (8004af4 <printRadioSettings+0x340>)
 8004a76:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 8004a7a:	a807      	add	r0, sp, #28
 8004a7c:	f000 fea0 	bl	80057c0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004a80:	a807      	add	r0, sp, #28
 8004a82:	f7fb fc2d 	bl	80002e0 <strlen>
 8004a86:	230a      	movs	r3, #10
 8004a88:	b282      	uxth	r2, r0
 8004a8a:	a907      	add	r1, sp, #28
 8004a8c:	4808      	ldr	r0, [pc, #32]	; (8004ab0 <printRadioSettings+0x2fc>)
 8004a8e:	f7ff f92c 	bl	8003cea <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+1);
 8004a92:	2012      	movs	r0, #18
 8004a94:	f7ff fcaa 	bl	80043ec <NRF24_read_register>
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8004a98:	4917      	ldr	r1, [pc, #92]	; (8004af8 <printRadioSettings+0x344>)
 8004a9a:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 8004a9e:	a807      	add	r0, sp, #28
 8004aa0:	f000 fe8e 	bl	80057c0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004aa4:	a807      	add	r0, sp, #28
 8004aa6:	f7fb fc1b 	bl	80002e0 <strlen>
 8004aaa:	e027      	b.n	8004afc <printRadioSettings+0x348>
 8004aac:	08006959 	.word	0x08006959
 8004ab0:	2000014c 	.word	0x2000014c
 8004ab4:	0800698c 	.word	0x0800698c
 8004ab8:	080069a8 	.word	0x080069a8
 8004abc:	080069d7 	.word	0x080069d7
 8004ac0:	08006a1b 	.word	0x08006a1b
 8004ac4:	08006a64 	.word	0x08006a64
 8004ac8:	08006a7d 	.word	0x08006a7d
 8004acc:	08006a90 	.word	0x08006a90
 8004ad0:	08006aa7 	.word	0x08006aa7
 8004ad4:	08006abe 	.word	0x08006abe
 8004ad8:	08006b0b 	.word	0x08006b0b
 8004adc:	08006b3b 	.word	0x08006b3b
 8004ae0:	08006b6b 	.word	0x08006b6b
 8004ae4:	08006b93 	.word	0x08006b93
 8004ae8:	08006bbb 	.word	0x08006bbb
 8004aec:	08006be3 	.word	0x08006be3
 8004af0:	08006c0b 	.word	0x08006c0b
 8004af4:	08006c35 	.word	0x08006c35
 8004af8:	08006c4e 	.word	0x08006c4e
 8004afc:	230a      	movs	r3, #10
 8004afe:	b282      	uxth	r2, r0
 8004b00:	a907      	add	r1, sp, #28
 8004b02:	4854      	ldr	r0, [pc, #336]	; (8004c54 <printRadioSettings+0x4a0>)
 8004b04:	f7ff f8f1 	bl	8003cea <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+2);
 8004b08:	2013      	movs	r0, #19
 8004b0a:	f7ff fc6f 	bl	80043ec <NRF24_read_register>
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8004b0e:	4952      	ldr	r1, [pc, #328]	; (8004c58 <printRadioSettings+0x4a4>)
 8004b10:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 8004b14:	a807      	add	r0, sp, #28
 8004b16:	f000 fe53 	bl	80057c0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004b1a:	a807      	add	r0, sp, #28
 8004b1c:	f7fb fbe0 	bl	80002e0 <strlen>
 8004b20:	230a      	movs	r3, #10
 8004b22:	b282      	uxth	r2, r0
 8004b24:	a907      	add	r1, sp, #28
 8004b26:	484b      	ldr	r0, [pc, #300]	; (8004c54 <printRadioSettings+0x4a0>)
 8004b28:	f7ff f8df 	bl	8003cea <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+3);
 8004b2c:	2014      	movs	r0, #20
 8004b2e:	f7ff fc5d 	bl	80043ec <NRF24_read_register>
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8004b32:	494a      	ldr	r1, [pc, #296]	; (8004c5c <printRadioSettings+0x4a8>)
 8004b34:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 8004b38:	a807      	add	r0, sp, #28
 8004b3a:	f000 fe41 	bl	80057c0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004b3e:	a807      	add	r0, sp, #28
 8004b40:	f7fb fbce 	bl	80002e0 <strlen>
 8004b44:	230a      	movs	r3, #10
 8004b46:	b282      	uxth	r2, r0
 8004b48:	a907      	add	r1, sp, #28
 8004b4a:	4842      	ldr	r0, [pc, #264]	; (8004c54 <printRadioSettings+0x4a0>)
 8004b4c:	f7ff f8cd 	bl	8003cea <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+4);
 8004b50:	2015      	movs	r0, #21
 8004b52:	f7ff fc4b 	bl	80043ec <NRF24_read_register>
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8004b56:	4942      	ldr	r1, [pc, #264]	; (8004c60 <printRadioSettings+0x4ac>)
 8004b58:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 8004b5c:	a807      	add	r0, sp, #28
 8004b5e:	f000 fe2f 	bl	80057c0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004b62:	a807      	add	r0, sp, #28
 8004b64:	f7fb fbbc 	bl	80002e0 <strlen>
 8004b68:	230a      	movs	r3, #10
 8004b6a:	b282      	uxth	r2, r0
 8004b6c:	a907      	add	r1, sp, #28
 8004b6e:	4839      	ldr	r0, [pc, #228]	; (8004c54 <printRadioSettings+0x4a0>)
 8004b70:	f7ff f8bb 	bl	8003cea <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+5);
 8004b74:	2016      	movs	r0, #22
 8004b76:	f7ff fc39 	bl	80043ec <NRF24_read_register>
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8004b7a:	493a      	ldr	r1, [pc, #232]	; (8004c64 <printRadioSettings+0x4b0>)
 8004b7c:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 8004b80:	a807      	add	r0, sp, #28
 8004b82:	f000 fe1d 	bl	80057c0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004b86:	a807      	add	r0, sp, #28
 8004b88:	f7fb fbaa 	bl	80002e0 <strlen>
 8004b8c:	a907      	add	r1, sp, #28
 8004b8e:	b282      	uxth	r2, r0
 8004b90:	230a      	movs	r3, #10
 8004b92:	4830      	ldr	r0, [pc, #192]	; (8004c54 <printRadioSettings+0x4a0>)
 8004b94:	f7ff f8a9 	bl	8003cea <HAL_UART_Transmit>
	
	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 8004b98:	201c      	movs	r0, #28
 8004b9a:	f7ff fc27 	bl	80043ec <NRF24_read_register>
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8004b9e:	f3c0 1340 	ubfx	r3, r0, #5, #1
 8004ba2:	f000 0201 	and.w	r2, r0, #1
 8004ba6:	4930      	ldr	r1, [pc, #192]	; (8004c68 <printRadioSettings+0x4b4>)
 8004ba8:	9303      	str	r3, [sp, #12]
 8004baa:	f3c0 1300 	ubfx	r3, r0, #4, #1
 8004bae:	9302      	str	r3, [sp, #8]
 8004bb0:	f3c0 03c0 	ubfx	r3, r0, #3, #1
 8004bb4:	9301      	str	r3, [sp, #4]
 8004bb6:	f3c0 0380 	ubfx	r3, r0, #2, #1
 8004bba:	9300      	str	r3, [sp, #0]
 8004bbc:	f3c0 0340 	ubfx	r3, r0, #1, #1
 8004bc0:	a807      	add	r0, sp, #28
 8004bc2:	f000 fdfd 	bl	80057c0 <siprintf>
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004bc6:	a807      	add	r0, sp, #28
 8004bc8:	f7fb fb8a 	bl	80002e0 <strlen>
 8004bcc:	a907      	add	r1, sp, #28
 8004bce:	b282      	uxth	r2, r0
 8004bd0:	230a      	movs	r3, #10
 8004bd2:	4820      	ldr	r0, [pc, #128]	; (8004c54 <printRadioSettings+0x4a0>)
 8004bd4:	f7ff f889 	bl	8003cea <HAL_UART_Transmit>
	
	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 8004bd8:	201d      	movs	r0, #29
 8004bda:	f7ff fc07 	bl	80043ec <NRF24_read_register>
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 8004bde:	0742      	lsls	r2, r0, #29
	reg8Val = NRF24_read_register(0x1d);
 8004be0:	4604      	mov	r4, r0
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 8004be2:	a807      	add	r0, sp, #28
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 8004be4:	bf4c      	ite	mi
 8004be6:	4921      	ldrmi	r1, [pc, #132]	; (8004c6c <printRadioSettings+0x4b8>)
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 8004be8:	4921      	ldrpl	r1, [pc, #132]	; (8004c70 <printRadioSettings+0x4bc>)
 8004bea:	f000 fe0d 	bl	8005808 <strcpy>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004bee:	a807      	add	r0, sp, #28
 8004bf0:	f7fb fb76 	bl	80002e0 <strlen>
 8004bf4:	a907      	add	r1, sp, #28
 8004bf6:	230a      	movs	r3, #10
 8004bf8:	b282      	uxth	r2, r0
 8004bfa:	4816      	ldr	r0, [pc, #88]	; (8004c54 <printRadioSettings+0x4a0>)
 8004bfc:	f7ff f875 	bl	8003cea <HAL_UART_Transmit>
	
	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 8004c00:	07a3      	lsls	r3, r4, #30
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 8004c02:	a807      	add	r0, sp, #28
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 8004c04:	bf4c      	ite	mi
 8004c06:	491b      	ldrmi	r1, [pc, #108]	; (8004c74 <printRadioSettings+0x4c0>)
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 8004c08:	491b      	ldrpl	r1, [pc, #108]	; (8004c78 <printRadioSettings+0x4c4>)
 8004c0a:	f000 fdfd 	bl	8005808 <strcpy>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004c0e:	a807      	add	r0, sp, #28
 8004c10:	f7fb fb66 	bl	80002e0 <strlen>
 8004c14:	230a      	movs	r3, #10
 8004c16:	b282      	uxth	r2, r0
 8004c18:	a907      	add	r1, sp, #28
 8004c1a:	480e      	ldr	r0, [pc, #56]	; (8004c54 <printRadioSettings+0x4a0>)
 8004c1c:	f7ff f865 	bl	8003cea <HAL_UART_Transmit>
	
	
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8004c20:	4916      	ldr	r1, [pc, #88]	; (8004c7c <printRadioSettings+0x4c8>)
 8004c22:	a807      	add	r0, sp, #28
 8004c24:	f000 fdf0 	bl	8005808 <strcpy>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004c28:	a807      	add	r0, sp, #28
 8004c2a:	f7fb fb59 	bl	80002e0 <strlen>
 8004c2e:	230a      	movs	r3, #10
 8004c30:	b282      	uxth	r2, r0
 8004c32:	a907      	add	r1, sp, #28
 8004c34:	4807      	ldr	r0, [pc, #28]	; (8004c54 <printRadioSettings+0x4a0>)
 8004c36:	f7ff f858 	bl	8003cea <HAL_UART_Transmit>
}
 8004c3a:	b020      	add	sp, #128	; 0x80
 8004c3c:	bd10      	pop	{r4, pc}
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 8004c3e:	4910      	ldr	r1, [pc, #64]	; (8004c80 <printRadioSettings+0x4cc>)
 8004c40:	e5d1      	b.n	80047e6 <printRadioSettings+0x32>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 8004c42:	2c01      	cmp	r4, #1
 8004c44:	d101      	bne.n	8004c4a <printRadioSettings+0x496>
 8004c46:	490f      	ldr	r1, [pc, #60]	; (8004c84 <printRadioSettings+0x4d0>)
 8004c48:	e658      	b.n	80048fc <printRadioSettings+0x148>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 8004c4a:	2c02      	cmp	r4, #2
 8004c4c:	bf0c      	ite	eq
 8004c4e:	490e      	ldreq	r1, [pc, #56]	; (8004c88 <printRadioSettings+0x4d4>)
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 8004c50:	490e      	ldrne	r1, [pc, #56]	; (8004c8c <printRadioSettings+0x4d8>)
 8004c52:	e653      	b.n	80048fc <printRadioSettings+0x148>
 8004c54:	2000014c 	.word	0x2000014c
 8004c58:	08006c67 	.word	0x08006c67
 8004c5c:	08006c80 	.word	0x08006c80
 8004c60:	08006c99 	.word	0x08006c99
 8004c64:	08006cb2 	.word	0x08006cb2
 8004c68:	08006ccb 	.word	0x08006ccb
 8004c6c:	08006d15 	.word	0x08006d15
 8004c70:	08006d2b 	.word	0x08006d2b
 8004c74:	08006d42 	.word	0x08006d42
 8004c78:	08006d5c 	.word	0x08006d5c
 8004c7c:	08006959 	.word	0x08006959
 8004c80:	080069c3 	.word	0x080069c3
 8004c84:	08006ad2 	.word	0x08006ad2
 8004c88:	08006ae6 	.word	0x08006ae6
 8004c8c:	08006af9 	.word	0x08006af9

08004c90 <NRF24_begin>:
{
 8004c90:	b082      	sub	sp, #8
 8004c92:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004c94:	460d      	mov	r5, r1
 8004c96:	a906      	add	r1, sp, #24
 8004c98:	4606      	mov	r6, r0
 8004c9a:	4614      	mov	r4, r2
 8004c9c:	f841 3f04 	str.w	r3, [r1, #4]!
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 8004ca0:	2288      	movs	r2, #136	; 0x88
 8004ca2:	485f      	ldr	r0, [pc, #380]	; (8004e20 <NRF24_begin+0x190>)
 8004ca4:	f000 fd60 	bl	8005768 <memcpy>
	nrf24_PORT = nrf24PORT;
 8004ca8:	4b5e      	ldr	r3, [pc, #376]	; (8004e24 <NRF24_begin+0x194>)
 8004caa:	601e      	str	r6, [r3, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 8004cac:	4b5e      	ldr	r3, [pc, #376]	; (8004e28 <NRF24_begin+0x198>)
 8004cae:	801d      	strh	r5, [r3, #0]
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 8004cb0:	ad02      	add	r5, sp, #8
	nrf24_CE_PIN = nrfCE_Pin;
 8004cb2:	4b5e      	ldr	r3, [pc, #376]	; (8004e2c <NRF24_begin+0x19c>)
 8004cb4:	801c      	strh	r4, [r3, #0]
 8004cb6:	f7ff fb65 	bl	8004384 <NRF24_csn.part.0>
	NRF24_ce(0);
 8004cba:	2000      	movs	r0, #0
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 8004cbc:	24e7      	movs	r4, #231	; 0xe7
	NRF24_ce(0);
 8004cbe:	f7ff fb87 	bl	80043d0 <NRF24_ce>
	HAL_Delay(5);
 8004cc2:	2005      	movs	r0, #5
 8004cc4:	f7fb fd52 	bl	800076c <HAL_Delay>
	NRF24_write_register(0x00, 0x08);
 8004cc8:	2108      	movs	r1, #8
 8004cca:	2000      	movs	r0, #0
 8004ccc:	f7ff fbcc 	bl	8004468 <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 8004cd0:	213f      	movs	r1, #63	; 0x3f
 8004cd2:	2001      	movs	r0, #1
 8004cd4:	f7ff fbc8 	bl	8004468 <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 8004cd8:	2103      	movs	r1, #3
 8004cda:	2002      	movs	r0, #2
 8004cdc:	f7ff fbc4 	bl	8004468 <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 8004ce0:	2103      	movs	r1, #3
 8004ce2:	4608      	mov	r0, r1
 8004ce4:	f7ff fbc0 	bl	8004468 <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 8004ce8:	2103      	movs	r1, #3
 8004cea:	2004      	movs	r0, #4
 8004cec:	f7ff fbbc 	bl	8004468 <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 8004cf0:	2102      	movs	r1, #2
 8004cf2:	2005      	movs	r0, #5
 8004cf4:	f7ff fbb8 	bl	8004468 <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 8004cf8:	210f      	movs	r1, #15
 8004cfa:	2006      	movs	r0, #6
 8004cfc:	f7ff fbb4 	bl	8004468 <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 8004d00:	210e      	movs	r1, #14
 8004d02:	2007      	movs	r0, #7
 8004d04:	f7ff fbb0 	bl	8004468 <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 8004d08:	2100      	movs	r1, #0
 8004d0a:	2008      	movs	r0, #8
 8004d0c:	f7ff fbac 	bl	8004468 <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 8004d10:	2100      	movs	r1, #0
 8004d12:	2009      	movs	r0, #9
 8004d14:	f7ff fba8 	bl	8004468 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 8004d18:	f805 4d08 	strb.w	r4, [r5, #-8]!
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 8004d1c:	2205      	movs	r2, #5
 8004d1e:	4629      	mov	r1, r5
 8004d20:	200a      	movs	r0, #10
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 8004d22:	f88d 4004 	strb.w	r4, [sp, #4]
 8004d26:	f88d 4003 	strb.w	r4, [sp, #3]
 8004d2a:	f88d 4002 	strb.w	r4, [sp, #2]
 8004d2e:	f88d 4001 	strb.w	r4, [sp, #1]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 8004d32:	f7ff fbb1 	bl	8004498 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2; 
 8004d36:	23c2      	movs	r3, #194	; 0xc2
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 8004d38:	2205      	movs	r2, #5
 8004d3a:	4629      	mov	r1, r5
 8004d3c:	200b      	movs	r0, #11
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2; 
 8004d3e:	f88d 3004 	strb.w	r3, [sp, #4]
 8004d42:	f88d 3003 	strb.w	r3, [sp, #3]
 8004d46:	f88d 3002 	strb.w	r3, [sp, #2]
 8004d4a:	f88d 3001 	strb.w	r3, [sp, #1]
 8004d4e:	f88d 3000 	strb.w	r3, [sp]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 8004d52:	f7ff fba1 	bl	8004498 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 8004d56:	21c3      	movs	r1, #195	; 0xc3
 8004d58:	200c      	movs	r0, #12
 8004d5a:	f7ff fb85 	bl	8004468 <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 8004d5e:	21c4      	movs	r1, #196	; 0xc4
 8004d60:	200d      	movs	r0, #13
 8004d62:	f7ff fb81 	bl	8004468 <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 8004d66:	21c5      	movs	r1, #197	; 0xc5
 8004d68:	200e      	movs	r0, #14
 8004d6a:	f7ff fb7d 	bl	8004468 <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 8004d6e:	21c6      	movs	r1, #198	; 0xc6
 8004d70:	200f      	movs	r0, #15
 8004d72:	f7ff fb79 	bl	8004468 <NRF24_write_register>
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8004d76:	2205      	movs	r2, #5
 8004d78:	4629      	mov	r1, r5
 8004d7a:	2010      	movs	r0, #16
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 8004d7c:	f88d 4004 	strb.w	r4, [sp, #4]
 8004d80:	f88d 4003 	strb.w	r4, [sp, #3]
 8004d84:	f88d 4002 	strb.w	r4, [sp, #2]
 8004d88:	f88d 4001 	strb.w	r4, [sp, #1]
 8004d8c:	f88d 4000 	strb.w	r4, [sp]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8004d90:	f7ff fb82 	bl	8004498 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 8004d94:	2100      	movs	r1, #0
 8004d96:	2011      	movs	r0, #17
 8004d98:	f7ff fb66 	bl	8004468 <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 8004d9c:	2100      	movs	r1, #0
 8004d9e:	2012      	movs	r0, #18
 8004da0:	f7ff fb62 	bl	8004468 <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 8004da4:	2100      	movs	r1, #0
 8004da6:	2013      	movs	r0, #19
 8004da8:	f7ff fb5e 	bl	8004468 <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 8004dac:	2100      	movs	r1, #0
 8004dae:	2014      	movs	r0, #20
 8004db0:	f7ff fb5a 	bl	8004468 <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 8004db4:	2100      	movs	r1, #0
 8004db6:	2015      	movs	r0, #21
 8004db8:	f7ff fb56 	bl	8004468 <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 8004dbc:	2100      	movs	r1, #0
 8004dbe:	2016      	movs	r0, #22
 8004dc0:	f7ff fb52 	bl	8004468 <NRF24_write_register>
	NRF24_ACTIVATE_cmd();
 8004dc4:	f7ff fcde 	bl	8004784 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 8004dc8:	2100      	movs	r1, #0
 8004dca:	201c      	movs	r0, #28
 8004dcc:	f7ff fb4c 	bl	8004468 <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 8004dd0:	2100      	movs	r1, #0
 8004dd2:	201d      	movs	r0, #29
 8004dd4:	f7ff fb48 	bl	8004468 <NRF24_write_register>
	printRadioSettings();
 8004dd8:	f7ff fcec 	bl	80047b4 <printRadioSettings>
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8004ddc:	21ff      	movs	r1, #255	; 0xff
 8004dde:	2004      	movs	r0, #4
 8004de0:	f7ff fb42 	bl	8004468 <NRF24_write_register>
	NRF24_setPALevel(RF24_PA_0dB);
 8004de4:	2003      	movs	r0, #3
 8004de6:	f7ff fbe9 	bl	80045bc <NRF24_setPALevel>
	NRF24_setDataRate(RF24_2MBPS);
 8004dea:	2001      	movs	r0, #1
 8004dec:	f7ff fc03 	bl	80045f6 <NRF24_setDataRate>
	NRF24_setCRCLength(RF24_CRC_16);
 8004df0:	2002      	movs	r0, #2
 8004df2:	f7ff fc1b 	bl	800462c <NRF24_setCRCLength>
	NRF24_disableDynamicPayloads();
 8004df6:	f7ff fbcc 	bl	8004592 <NRF24_disableDynamicPayloads>
  payload_size = MIN(size,max_payload_size);
 8004dfa:	2220      	movs	r2, #32
 8004dfc:	4b0c      	ldr	r3, [pc, #48]	; (8004e30 <NRF24_begin+0x1a0>)
 8004dfe:	701a      	strb	r2, [r3, #0]
	NRF24_resetStatus();
 8004e00:	f7ff fc84 	bl	800470c <NRF24_resetStatus>
	NRF24_setChannel(76);
 8004e04:	204c      	movs	r0, #76	; 0x4c
 8004e06:	f7ff fbb1 	bl	800456c <NRF24_setChannel>
	NRF24_flush_tx();
 8004e0a:	f7ff fb7f 	bl	800450c <NRF24_flush_tx>
	NRF24_flush_rx();
 8004e0e:	f7ff fb81 	bl	8004514 <NRF24_flush_rx>
	NRF24_powerDown();
 8004e12:	f7ff fc1e 	bl	8004652 <NRF24_powerDown>
}
 8004e16:	b002      	add	sp, #8
 8004e18:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004e1c:	b002      	add	sp, #8
 8004e1e:	4770      	bx	lr
 8004e20:	200000c4 	.word	0x200000c4
 8004e24:	200000c0 	.word	0x200000c0
 8004e28:	200000bc 	.word	0x200000bc
 8004e2c:	200000ba 	.word	0x200000ba
 8004e30:	200001d8 	.word	0x200001d8

08004e34 <nrf24_DebugUART_Init>:
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
}

//4. Init Variables
void nrf24_DebugUART_Init(UART_HandleTypeDef nrf24Uart)
{
 8004e34:	b084      	sub	sp, #16
 8004e36:	b508      	push	{r3, lr}
 8004e38:	f10d 0e08 	add.w	lr, sp, #8
 8004e3c:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
	memcpy(&nrf24_huart, &nrf24Uart, sizeof(nrf24Uart));
 8004e40:	4671      	mov	r1, lr
 8004e42:	228c      	movs	r2, #140	; 0x8c
 8004e44:	4803      	ldr	r0, [pc, #12]	; (8004e54 <nrf24_DebugUART_Init+0x20>)
 8004e46:	f000 fc8f 	bl	8005768 <memcpy>
}
 8004e4a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004e4e:	b004      	add	sp, #16
 8004e50:	4770      	bx	lr
 8004e52:	bf00      	nop
 8004e54:	2000014c 	.word	0x2000014c

08004e58 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8004e58:	b537      	push	{r0, r1, r2, r4, r5, lr}
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  while (HAL_OK != HAL_UART_Transmit(&huart3, (uint8_t *) &ch, 1, 30000))
 8004e5a:	4d08      	ldr	r5, [pc, #32]	; (8004e7c <__io_putchar+0x24>)
{
 8004e5c:	ac02      	add	r4, sp, #8
 8004e5e:	f844 0d04 	str.w	r0, [r4, #-4]!
  while (HAL_OK != HAL_UART_Transmit(&huart3, (uint8_t *) &ch, 1, 30000))
 8004e62:	f247 5330 	movw	r3, #30000	; 0x7530
 8004e66:	2201      	movs	r2, #1
 8004e68:	4621      	mov	r1, r4
 8004e6a:	4628      	mov	r0, r5
 8004e6c:	f7fe ff3d 	bl	8003cea <HAL_UART_Transmit>
 8004e70:	2800      	cmp	r0, #0
 8004e72:	d1f6      	bne.n	8004e62 <__io_putchar+0xa>
  {
    ;
  }
  return ch;
}
 8004e74:	9801      	ldr	r0, [sp, #4]
 8004e76:	b003      	add	sp, #12
 8004e78:	bd30      	pop	{r4, r5, pc}
 8004e7a:	bf00      	nop
 8004e7c:	2000020c 	.word	0x2000020c

08004e80 <__io_getchar>:
  * @brief  Retargets the C library scanf function to the USART.
  * @param  None
  * @retval None
  */
GETCHAR_PROTOTYPE
{
 8004e80:	b537      	push	{r0, r1, r2, r4, r5, lr}
  /* Place your implementation of fgetc here */
  /* e.g. read a character on USART and loop until the end of read */
  uint8_t ch = 0;
 8004e82:	2300      	movs	r3, #0
 8004e84:	ac02      	add	r4, sp, #8
  while (HAL_OK != HAL_UART_Receive(&huart3, (uint8_t *)&ch, 1, 30000))
 8004e86:	4d08      	ldr	r5, [pc, #32]	; (8004ea8 <__io_getchar+0x28>)
  uint8_t ch = 0;
 8004e88:	f804 3d01 	strb.w	r3, [r4, #-1]!
  while (HAL_OK != HAL_UART_Receive(&huart3, (uint8_t *)&ch, 1, 30000))
 8004e8c:	f247 5330 	movw	r3, #30000	; 0x7530
 8004e90:	2201      	movs	r2, #1
 8004e92:	4621      	mov	r1, r4
 8004e94:	4628      	mov	r0, r5
 8004e96:	f7fe ff83 	bl	8003da0 <HAL_UART_Receive>
 8004e9a:	2800      	cmp	r0, #0
 8004e9c:	d1f6      	bne.n	8004e8c <__io_getchar+0xc>
  {
    ;
  }
  return ch;
}
 8004e9e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8004ea2:	b003      	add	sp, #12
 8004ea4:	bd30      	pop	{r4, r5, pc}
 8004ea6:	bf00      	nop
 8004ea8:	2000020c 	.word	0x2000020c

08004eac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004eac:	b510      	push	{r4, lr}
 8004eae:	b0cc      	sub	sp, #304	; 0x130
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004eb0:	224c      	movs	r2, #76	; 0x4c
 8004eb2:	2100      	movs	r1, #0
 8004eb4:	a80a      	add	r0, sp, #40	; 0x28
 8004eb6:	f000 fc62 	bl	800577e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004eba:	2220      	movs	r2, #32
 8004ebc:	2100      	movs	r1, #0
 8004ebe:	a802      	add	r0, sp, #8
 8004ec0:	f000 fc5d 	bl	800577e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004ec4:	22bc      	movs	r2, #188	; 0xbc
 8004ec6:	2100      	movs	r1, #0
 8004ec8:	a81d      	add	r0, sp, #116	; 0x74
 8004eca:	f000 fc58 	bl	800577e <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8004ece:	2002      	movs	r0, #2
 8004ed0:	f7fb fe6c 	bl	8000bac <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	9301      	str	r3, [sp, #4]
 8004ed8:	4b25      	ldr	r3, [pc, #148]	; (8004f70 <SystemClock_Config+0xc4>)
 8004eda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004edc:	f022 0201 	bic.w	r2, r2, #1
 8004ee0:	62da      	str	r2, [r3, #44]	; 0x2c
 8004ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ee4:	f003 0301 	and.w	r3, r3, #1
 8004ee8:	9301      	str	r3, [sp, #4]
 8004eea:	4b22      	ldr	r3, [pc, #136]	; (8004f74 <SystemClock_Config+0xc8>)
 8004eec:	699a      	ldr	r2, [r3, #24]
 8004eee:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8004ef2:	619a      	str	r2, [r3, #24]
 8004ef4:	699a      	ldr	r2, [r3, #24]
 8004ef6:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8004efa:	9201      	str	r2, [sp, #4]
 8004efc:	9a01      	ldr	r2, [sp, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8004efe:	699a      	ldr	r2, [r3, #24]
 8004f00:	0492      	lsls	r2, r2, #18
 8004f02:	d5fc      	bpl.n	8004efe <SystemClock_Config+0x52>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004f04:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004f06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLN = 60;
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 10;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8004f0a:	2400      	movs	r4, #0
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004f0c:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004f0e:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004f10:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004f12:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLM = 1;
 8004f14:	9215      	str	r2, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 60;
 8004f16:	223c      	movs	r2, #60	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004f18:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004f1a:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 8004f1c:	9216      	str	r2, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 10;
 8004f1e:	220a      	movs	r2, #10
  RCC_OscInitStruct.PLL.PLLP = 2;
 8004f20:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8004f22:	9319      	str	r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8004f24:	230c      	movs	r3, #12
  RCC_OscInitStruct.PLL.PLLQ = 10;
 8004f26:	9218      	str	r2, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8004f28:	931a      	str	r3, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8004f2a:	941b      	str	r4, [sp, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8004f2c:	941c      	str	r4, [sp, #112]	; 0x70
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004f2e:	f7fb fe6b 	bl	8000c08 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004f32:	233f      	movs	r3, #63	; 0x3f
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8004f34:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004f38:	2104      	movs	r1, #4
 8004f3a:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004f3c:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004f3e:	2303      	movs	r3, #3
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8004f40:	9208      	str	r2, [sp, #32]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004f42:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8004f44:	2340      	movs	r3, #64	; 0x40
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8004f46:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8004f48:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8004f4a:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8004f4c:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8004f4e:	9405      	str	r4, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004f50:	f7fc f94e 	bl	80011f0 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_SPI4
 8004f54:	4b08      	ldr	r3, [pc, #32]	; (8004f78 <SystemClock_Config+0xcc>)
                              |RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004f56:	a81d      	add	r0, sp, #116	; 0x74
  PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8004f58:	9435      	str	r4, [sp, #212]	; 0xd4
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_SPI4
 8004f5a:	931d      	str	r3, [sp, #116]	; 0x74
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8004f5c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8004f60:	943a      	str	r4, [sp, #232]	; 0xe8
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8004f62:	933e      	str	r3, [sp, #248]	; 0xf8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004f64:	f7fc fb8a 	bl	800167c <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
  /** Enable USB Voltage detector 
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 8004f68:	f7fb fe46 	bl	8000bf8 <HAL_PWREx_EnableUSBVoltageDetector>
}
 8004f6c:	b04c      	add	sp, #304	; 0x130
 8004f6e:	bd10      	pop	{r4, pc}
 8004f70:	58000400 	.word	0x58000400
 8004f74:	58024800 	.word	0x58024800
 8004f78:	00042002 	.word	0x00042002

08004f7c <main>:
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b0be      	sub	sp, #248	; 0xf8
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004f80:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004f84:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8004f88:	4bbc      	ldr	r3, [pc, #752]	; (800527c <main+0x300>)
 8004f8a:	2100      	movs	r1, #0
 8004f8c:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8004f90:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004f94:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8004f98:	695a      	ldr	r2, [r3, #20]
 8004f9a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004f9e:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8004fa0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004fa4:	f3bf 8f6f 	isb	sy
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8004fa8:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8004fac:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8004fb0:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8004fb4:	f643 76e0 	movw	r6, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8004fb8:	f3c2 04c9 	ubfx	r4, r2, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8004fbc:	f3c2 324e 	ubfx	r2, r2, #13, #15
 8004fc0:	07a5      	lsls	r5, r4, #30
 8004fc2:	0152      	lsls	r2, r2, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8004fc4:	ea02 0e06 	and.w	lr, r2, r6
 8004fc8:	4628      	mov	r0, r5
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8004fca:	4621      	mov	r1, r4
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8004fcc:	ea40 070e 	orr.w	r7, r0, lr
      } while (ways-- != 0U);
 8004fd0:	3901      	subs	r1, #1
 8004fd2:	f100 4040 	add.w	r0, r0, #3221225472	; 0xc0000000
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8004fd6:	f8c3 7260 	str.w	r7, [r3, #608]	; 0x260
      } while (ways-- != 0U);
 8004fda:	1c4f      	adds	r7, r1, #1
 8004fdc:	d1f6      	bne.n	8004fcc <main+0x50>
 8004fde:	3a20      	subs	r2, #32
    } while(sets-- != 0U);
 8004fe0:	f112 0f20 	cmn.w	r2, #32
 8004fe4:	d1ee      	bne.n	8004fc4 <main+0x48>
 8004fe6:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8004fea:	695a      	ldr	r2, [r3, #20]
 8004fec:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004ff0:	615a      	str	r2, [r3, #20]
 8004ff2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004ff6:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8004ffa:	f7fb fb77 	bl	80006ec <HAL_Init>
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ffe:	2400      	movs	r4, #0
  SystemClock_Config();
 8005000:	f7ff ff54 	bl	8004eac <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005004:	2214      	movs	r2, #20
 8005006:	2100      	movs	r1, #0
 8005008:	a82a      	add	r0, sp, #168	; 0xa8
 800500a:	f000 fbb8 	bl	800577e <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800500e:	4b9c      	ldr	r3, [pc, #624]	; (8005280 <main+0x304>)
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8005010:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8005014:	489b      	ldr	r0, [pc, #620]	; (8005284 <main+0x308>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005016:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800501a:	2501      	movs	r5, #1
  huart3.Instance = USART3;
 800501c:	4e9a      	ldr	r6, [pc, #616]	; (8005288 <main+0x30c>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800501e:	f042 0210 	orr.w	r2, r2, #16
 8005022:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8005026:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800502a:	f002 0210 	and.w	r2, r2, #16
 800502e:	9223      	str	r2, [sp, #140]	; 0x8c
 8005030:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005032:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005036:	f042 0204 	orr.w	r2, r2, #4
 800503a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800503e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005042:	f002 0204 	and.w	r2, r2, #4
 8005046:	9224      	str	r2, [sp, #144]	; 0x90
 8005048:	9a24      	ldr	r2, [sp, #144]	; 0x90
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800504a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800504e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005052:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8005056:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800505a:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800505e:	9225      	str	r2, [sp, #148]	; 0x94
 8005060:	9a25      	ldr	r2, [sp, #148]	; 0x94
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005062:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005066:	f042 0201 	orr.w	r2, r2, #1
 800506a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800506e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005072:	f002 0201 	and.w	r2, r2, #1
 8005076:	9226      	str	r2, [sp, #152]	; 0x98
 8005078:	9a26      	ldr	r2, [sp, #152]	; 0x98
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800507a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800507e:	f042 0202 	orr.w	r2, r2, #2
 8005082:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8005086:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800508a:	f002 0202 	and.w	r2, r2, #2
 800508e:	9227      	str	r2, [sp, #156]	; 0x9c
 8005090:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005092:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005096:	f042 0208 	orr.w	r2, r2, #8
 800509a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800509e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80050a2:	f002 0208 	and.w	r2, r2, #8
 80050a6:	9228      	str	r2, [sp, #160]	; 0xa0
 80050a8:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80050aa:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80050ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050b2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80050b6:	2200      	movs	r2, #0
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80050b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80050bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050c0:	9329      	str	r3, [sp, #164]	; 0xa4
 80050c2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80050c4:	f7fb fcc2 	bl	8000a4c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80050c8:	2200      	movs	r2, #0
 80050ca:	2140      	movs	r1, #64	; 0x40
 80050cc:	486f      	ldr	r0, [pc, #444]	; (800528c <main+0x310>)
 80050ce:	f7fb fcbd 	bl	8000a4c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80050d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80050d6:	a92a      	add	r1, sp, #168	; 0xa8
 80050d8:	486d      	ldr	r0, [pc, #436]	; (8005290 <main+0x314>)
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80050da:	932a      	str	r3, [sp, #168]	; 0xa8
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80050dc:	4b6d      	ldr	r3, [pc, #436]	; (8005294 <main+0x318>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050de:	942c      	str	r4, [sp, #176]	; 0xb0
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80050e0:	932b      	str	r3, [sp, #172]	; 0xac
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80050e2:	f7fb fbc9 	bl	8000878 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80050e6:	f44f 4381 	mov.w	r3, #16512	; 0x4080
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80050ea:	a92a      	add	r1, sp, #168	; 0xa8
 80050ec:	4865      	ldr	r0, [pc, #404]	; (8005284 <main+0x308>)
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80050ee:	932a      	str	r3, [sp, #168]	; 0xa8
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80050f0:	952b      	str	r5, [sp, #172]	; 0xac
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050f2:	942c      	str	r4, [sp, #176]	; 0xb0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050f4:	942d      	str	r4, [sp, #180]	; 0xb4
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80050f6:	f7fb fbbf 	bl	8000878 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80050fa:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80050fc:	a92a      	add	r1, sp, #168	; 0xa8
 80050fe:	4863      	ldr	r0, [pc, #396]	; (800528c <main+0x310>)
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8005100:	932a      	str	r3, [sp, #168]	; 0xa8
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005102:	952b      	str	r5, [sp, #172]	; 0xac
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005104:	942c      	str	r4, [sp, #176]	; 0xb0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005106:	942d      	str	r4, [sp, #180]	; 0xb4
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8005108:	f7fb fbb6 	bl	8000878 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800510c:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800510e:	a92a      	add	r1, sp, #168	; 0xa8
 8005110:	485e      	ldr	r0, [pc, #376]	; (800528c <main+0x310>)
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8005112:	932a      	str	r3, [sp, #168]	; 0xa8
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005114:	942b      	str	r4, [sp, #172]	; 0xac
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005116:	942c      	str	r4, [sp, #176]	; 0xb0
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8005118:	f7fb fbae 	bl	8000878 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800511c:	4621      	mov	r1, r4
 800511e:	4622      	mov	r2, r4
 8005120:	2028      	movs	r0, #40	; 0x28
 8005122:	f7fb fb4d 	bl	80007c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8005126:	2028      	movs	r0, #40	; 0x28
 8005128:	f7fb fb82 	bl	8000830 <HAL_NVIC_EnableIRQ>
  huart3.Init.BaudRate = 115200;
 800512c:	4a5a      	ldr	r2, [pc, #360]	; (8005298 <main+0x31c>)
 800512e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005132:	4630      	mov	r0, r6
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005134:	60b4      	str	r4, [r6, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005136:	60f4      	str	r4, [r6, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8005138:	6134      	str	r4, [r6, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800513a:	61b4      	str	r4, [r6, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800513c:	61f4      	str	r4, [r6, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800513e:	6234      	str	r4, [r6, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005140:	6274      	str	r4, [r6, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005142:	62b4      	str	r4, [r6, #40]	; 0x28
  huart3.Init.BaudRate = 115200;
 8005144:	e886 000c 	stmia.w	r6, {r2, r3}
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005148:	230c      	movs	r3, #12
 800514a:	6173      	str	r3, [r6, #20]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800514c:	f7fe fed0 	bl	8003ef0 <HAL_UART_Init>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005150:	4621      	mov	r1, r4
 8005152:	4630      	mov	r0, r6
 8005154:	f7fe ff62 	bl	800401c <HAL_UARTEx_SetTxFifoThreshold>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005158:	4621      	mov	r1, r4
 800515a:	4630      	mov	r0, r6
 800515c:	f7fe ff82 	bl	8004064 <HAL_UARTEx_SetRxFifoThreshold>
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8005160:	4630      	mov	r0, r6
 8005162:	f7fe ff40 	bl	8003fe6 <HAL_UARTEx_DisableFifoMode>
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8005166:	484d      	ldr	r0, [pc, #308]	; (800529c <main+0x320>)
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8005168:	494d      	ldr	r1, [pc, #308]	; (80052a0 <main+0x324>)
 800516a:	2309      	movs	r3, #9
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800516c:	6104      	str	r4, [r0, #16]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800516e:	61c5      	str	r5, [r0, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8005170:	6204      	str	r4, [r0, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8005172:	6244      	str	r4, [r0, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8005174:	6285      	str	r5, [r0, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8005176:	62c5      	str	r5, [r0, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8005178:	6304      	str	r4, [r0, #48]	; 0x30
  hspi4.Instance = SPI4;
 800517a:	4d4a      	ldr	r5, [pc, #296]	; (80052a4 <main+0x328>)
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800517c:	e880 000a 	stmia.w	r0, {r1, r3}
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8005180:	2302      	movs	r3, #2
 8005182:	60c3      	str	r3, [r0, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8005184:	6183      	str	r3, [r0, #24]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8005186:	f7fb fc73 	bl	8000a70 <HAL_PCD_Init>
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800518a:	4847      	ldr	r0, [pc, #284]	; (80052a8 <main+0x32c>)
 800518c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8005190:	60ac      	str	r4, [r5, #8]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005192:	612c      	str	r4, [r5, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005194:	616c      	str	r4, [r5, #20]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005196:	622c      	str	r4, [r5, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8005198:	626c      	str	r4, [r5, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800519a:	62ac      	str	r4, [r5, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 800519c:	62ec      	str	r4, [r5, #44]	; 0x2c
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800519e:	63ac      	str	r4, [r5, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80051a0:	63ec      	str	r4, [r5, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80051a2:	642c      	str	r4, [r5, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80051a4:	646c      	str	r4, [r5, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80051a6:	64ac      	str	r4, [r5, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80051a8:	64ec      	str	r4, [r5, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80051aa:	652c      	str	r4, [r5, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80051ac:	656c      	str	r4, [r5, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80051ae:	65ac      	str	r4, [r5, #88]	; 0x58
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80051b0:	e885 0009 	stmia.w	r5, {r0, r3}
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 80051b4:	2303      	movs	r3, #3
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80051b6:	4628      	mov	r0, r5
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 80051b8:	60eb      	str	r3, [r5, #12]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80051ba:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80051be:	61ab      	str	r3, [r5, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80051c0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80051c4:	61eb      	str	r3, [r5, #28]
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80051c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80051ca:	636b      	str	r3, [r5, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80051cc:	f7fd f884 	bl	80022d8 <HAL_SPI_Init>
  printf("Initiate \n\r");
 80051d0:	4836      	ldr	r0, [pc, #216]	; (80052ac <main+0x330>)
 80051d2:	f000 fadd 	bl	8005790 <iprintf>
  NRF24_begin(CE_GPIO_Port,CSN_Pin,CE_Pin,hspi4);
 80051d6:	1d29      	adds	r1, r5, #4
 80051d8:	2284      	movs	r2, #132	; 0x84
 80051da:	4668      	mov	r0, sp
 80051dc:	f000 fac4 	bl	8005768 <memcpy>
 80051e0:	682b      	ldr	r3, [r5, #0]
 80051e2:	2210      	movs	r2, #16
 80051e4:	2108      	movs	r1, #8
 80051e6:	4832      	ldr	r0, [pc, #200]	; (80052b0 <main+0x334>)
 80051e8:	f7ff fd52 	bl	8004c90 <NRF24_begin>
  nrf24_DebugUART_Init(huart3);
 80051ec:	f106 0110 	add.w	r1, r6, #16
 80051f0:	227c      	movs	r2, #124	; 0x7c
 80051f2:	4668      	mov	r0, sp
 80051f4:	f000 fab8 	bl	8005768 <memcpy>
		if(NRF24_write(myTxData, 32))
 80051f8:	4d2e      	ldr	r5, [pc, #184]	; (80052b4 <main+0x338>)
  nrf24_DebugUART_Init(huart3);
 80051fa:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80051fe:	f7ff fe19 	bl	8004e34 <nrf24_DebugUART_Init>
  HAL_Delay(1000);
 8005202:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005206:	f7fb fab1 	bl	800076c <HAL_Delay>
			HAL_UART_Transmit(&huart3, (uint8_t *)"Transmitted Successfully\r\n", strlen("Transmitted Successfully\r\n"), 10);
 800520a:	4e2b      	ldr	r6, [pc, #172]	; (80052b8 <main+0x33c>)
  printRadioSettings();
 800520c:	f7ff fad2 	bl	80047b4 <printRadioSettings>
	NRF24_stopListening();
 8005210:	f7ff f987 	bl	8004522 <NRF24_stopListening>
	NRF24_openWritingPipe(TxpipeAddrs);
 8005214:	4b29      	ldr	r3, [pc, #164]	; (80052bc <main+0x340>)
 8005216:	e9d3 0100 	ldrd	r0, r1, [r3]
 800521a:	f7ff f98d 	bl	8004538 <NRF24_openWritingPipe>
	NRF24_setAutoAck(false);
 800521e:	4620      	mov	r0, r4
 8005220:	f7ff f9c6 	bl	80045b0 <NRF24_setAutoAck>
	NRF24_setChannel(76);
 8005224:	204c      	movs	r0, #76	; 0x4c
 8005226:	f7ff f9a1 	bl	800456c <NRF24_setChannel>
	  printf("start sending \n\r");
 800522a:	4c25      	ldr	r4, [pc, #148]	; (80052c0 <main+0x344>)
	NRF24_setPayloadSize(32);
 800522c:	2020      	movs	r0, #32
 800522e:	f7ff f9a5 	bl	800457c <NRF24_setPayloadSize>
	printf("finish configuration \n\r");
 8005232:	4824      	ldr	r0, [pc, #144]	; (80052c4 <main+0x348>)
 8005234:	f000 faac 	bl	8005790 <iprintf>
	  printf("start sending \n\r");
 8005238:	4620      	mov	r0, r4
 800523a:	f000 faa9 	bl	8005790 <iprintf>
		if(NRF24_write(myTxData, 32))
 800523e:	2120      	movs	r1, #32
 8005240:	4628      	mov	r0, r5
 8005242:	f7ff fa67 	bl	8004714 <NRF24_write>
 8005246:	b198      	cbz	r0, 8005270 <main+0x2f4>
			HAL_UART_Transmit(&huart3, (uint8_t *)"Transmitted Successfully\r\n", strlen("Transmitted Successfully\r\n"), 10);
 8005248:	230a      	movs	r3, #10
 800524a:	221a      	movs	r2, #26
 800524c:	4631      	mov	r1, r6
 800524e:	480e      	ldr	r0, [pc, #56]	; (8005288 <main+0x30c>)
 8005250:	f7fe fd4b 	bl	8003cea <HAL_UART_Transmit>
			sprintf(myDataack, "AckPayload:  %s \r\n", AckPayload);
 8005254:	4a1c      	ldr	r2, [pc, #112]	; (80052c8 <main+0x34c>)
 8005256:	491d      	ldr	r1, [pc, #116]	; (80052cc <main+0x350>)
 8005258:	a82a      	add	r0, sp, #168	; 0xa8
 800525a:	f000 fab1 	bl	80057c0 <siprintf>
			HAL_UART_Transmit(&huart3, (uint8_t *)myDataack, strlen(myDataack), 10);
 800525e:	a82a      	add	r0, sp, #168	; 0xa8
 8005260:	f7fb f83e 	bl	80002e0 <strlen>
 8005264:	230a      	movs	r3, #10
 8005266:	b282      	uxth	r2, r0
 8005268:	a92a      	add	r1, sp, #168	; 0xa8
 800526a:	4807      	ldr	r0, [pc, #28]	; (8005288 <main+0x30c>)
 800526c:	f7fe fd3d 	bl	8003cea <HAL_UART_Transmit>
		HAL_Delay(1000);
 8005270:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005274:	f7fb fa7a 	bl	800076c <HAL_Delay>
	  printf("start sending \n\r");
 8005278:	e7de      	b.n	8005238 <main+0x2bc>
 800527a:	bf00      	nop
 800527c:	e000ed00 	.word	0xe000ed00
 8005280:	58024400 	.word	0x58024400
 8005284:	58020400 	.word	0x58020400
 8005288:	2000020c 	.word	0x2000020c
 800528c:	58021800 	.word	0x58021800
 8005290:	58020800 	.word	0x58020800
 8005294:	11110000 	.word	0x11110000
 8005298:	40004800 	.word	0x40004800
 800529c:	20000298 	.word	0x20000298
 80052a0:	40080000 	.word	0x40080000
 80052a4:	200006a0 	.word	0x200006a0
 80052a8:	40013400 	.word	0x40013400
 80052ac:	08006d77 	.word	0x08006d77
 80052b0:	58021000 	.word	0x58021000
 80052b4:	20000010 	.word	0x20000010
 80052b8:	08006dac 	.word	0x08006dac
 80052bc:	20000008 	.word	0x20000008
 80052c0:	08006d9b 	.word	0x08006d9b
 80052c4:	08006d83 	.word	0x08006d83
 80052c8:	200001ec 	.word	0x200001ec
 80052cc:	08006dc7 	.word	0x08006dc7

080052d0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80052d0:	4b07      	ldr	r3, [pc, #28]	; (80052f0 <HAL_MspInit+0x20>)
{
 80052d2:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80052d4:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 80052d8:	f042 0202 	orr.w	r2, r2, #2
 80052dc:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 80052e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80052e4:	f003 0302 	and.w	r3, r3, #2
 80052e8:	9301      	str	r3, [sp, #4]
 80052ea:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80052ec:	b002      	add	sp, #8
 80052ee:	4770      	bx	lr
 80052f0:	58024400 	.word	0x58024400

080052f4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80052f4:	b510      	push	{r4, lr}
 80052f6:	b088      	sub	sp, #32
 80052f8:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052fa:	2214      	movs	r2, #20
 80052fc:	2100      	movs	r1, #0
 80052fe:	a803      	add	r0, sp, #12
 8005300:	f000 fa3d 	bl	800577e <memset>
  if(hspi->Instance==SPI4)
 8005304:	6822      	ldr	r2, [r4, #0]
 8005306:	4b14      	ldr	r3, [pc, #80]	; (8005358 <HAL_SPI_MspInit+0x64>)
 8005308:	429a      	cmp	r2, r3
 800530a:	d122      	bne.n	8005352 <HAL_SPI_MspInit+0x5e>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 800530c:	4b13      	ldr	r3, [pc, #76]	; (800535c <HAL_SPI_MspInit+0x68>)
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800530e:	a903      	add	r1, sp, #12
 8005310:	4813      	ldr	r0, [pc, #76]	; (8005360 <HAL_SPI_MspInit+0x6c>)
    __HAL_RCC_SPI4_CLK_ENABLE();
 8005312:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8005316:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800531a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 800531e:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8005322:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005326:	9201      	str	r2, [sp, #4]
 8005328:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800532a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800532e:	f042 0210 	orr.w	r2, r2, #16
 8005332:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8005336:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800533a:	f003 0310 	and.w	r3, r3, #16
 800533e:	9302      	str	r3, [sp, #8]
 8005340:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8005342:	2364      	movs	r3, #100	; 0x64
 8005344:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005346:	2302      	movs	r3, #2
 8005348:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800534a:	2305      	movs	r3, #5
 800534c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800534e:	f7fb fa93 	bl	8000878 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8005352:	b008      	add	sp, #32
 8005354:	bd10      	pop	{r4, pc}
 8005356:	bf00      	nop
 8005358:	40013400 	.word	0x40013400
 800535c:	58024400 	.word	0x58024400
 8005360:	58021000 	.word	0x58021000

08005364 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005364:	b510      	push	{r4, lr}
 8005366:	b088      	sub	sp, #32
 8005368:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800536a:	2214      	movs	r2, #20
 800536c:	2100      	movs	r1, #0
 800536e:	a803      	add	r0, sp, #12
 8005370:	f000 fa05 	bl	800577e <memset>
  if(huart->Instance==USART3)
 8005374:	6822      	ldr	r2, [r4, #0]
 8005376:	4b14      	ldr	r3, [pc, #80]	; (80053c8 <HAL_UART_MspInit+0x64>)
 8005378:	429a      	cmp	r2, r3
 800537a:	d123      	bne.n	80053c4 <HAL_UART_MspInit+0x60>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800537c:	4b13      	ldr	r3, [pc, #76]	; (80053cc <HAL_UART_MspInit+0x68>)
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800537e:	a903      	add	r1, sp, #12
 8005380:	4813      	ldr	r0, [pc, #76]	; (80053d0 <HAL_UART_MspInit+0x6c>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8005382:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8005386:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800538a:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 800538e:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8005392:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8005396:	9201      	str	r2, [sp, #4]
 8005398:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800539a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800539e:	f042 0208 	orr.w	r2, r2, #8
 80053a2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80053a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80053aa:	f003 0308 	and.w	r3, r3, #8
 80053ae:	9302      	str	r3, [sp, #8]
 80053b0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80053b2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80053b6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053b8:	2302      	movs	r3, #2
 80053ba:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80053bc:	2307      	movs	r3, #7
 80053be:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80053c0:	f7fb fa5a 	bl	8000878 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80053c4:	b008      	add	sp, #32
 80053c6:	bd10      	pop	{r4, pc}
 80053c8:	40004800 	.word	0x40004800
 80053cc:	58024400 	.word	0x58024400
 80053d0:	58020c00 	.word	0x58020c00

080053d4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80053d4:	b510      	push	{r4, lr}
 80053d6:	b088      	sub	sp, #32
 80053d8:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053da:	2214      	movs	r2, #20
 80053dc:	2100      	movs	r1, #0
 80053de:	a803      	add	r0, sp, #12
 80053e0:	f000 f9cd 	bl	800577e <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80053e4:	6822      	ldr	r2, [r4, #0]
 80053e6:	4b19      	ldr	r3, [pc, #100]	; (800544c <HAL_PCD_MspInit+0x78>)
 80053e8:	429a      	cmp	r2, r3
 80053ea:	d12d      	bne.n	8005448 <HAL_PCD_MspInit+0x74>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80053ec:	4c18      	ldr	r4, [pc, #96]	; (8005450 <HAL_PCD_MspInit+0x7c>)
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053ee:	a903      	add	r1, sp, #12
 80053f0:	4818      	ldr	r0, [pc, #96]	; (8005454 <HAL_PCD_MspInit+0x80>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80053f2:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80053f6:	f043 0301 	orr.w	r3, r3, #1
 80053fa:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 80053fe:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8005402:	f003 0301 	and.w	r3, r3, #1
 8005406:	9301      	str	r3, [sp, #4]
 8005408:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800540a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800540e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005410:	2302      	movs	r3, #2
 8005412:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8005414:	230a      	movs	r3, #10
 8005416:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005418:	f7fb fa2e 	bl	8000878 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800541c:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8005420:	a903      	add	r1, sp, #12
 8005422:	480c      	ldr	r0, [pc, #48]	; (8005454 <HAL_PCD_MspInit+0x80>)
    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8005424:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005426:	2300      	movs	r3, #0
 8005428:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800542a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800542c:	f7fb fa24 	bl	8000878 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8005430:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 8005434:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005438:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 800543c:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 8005440:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005444:	9302      	str	r3, [sp, #8]
 8005446:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8005448:	b008      	add	sp, #32
 800544a:	bd10      	pop	{r4, pc}
 800544c:	40080000 	.word	0x40080000
 8005450:	58024400 	.word	0x58024400
 8005454:	58020000 	.word	0x58020000

08005458 <NMI_Handler>:
 8005458:	4770      	bx	lr

0800545a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800545a:	e7fe      	b.n	800545a <HardFault_Handler>

0800545c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800545c:	e7fe      	b.n	800545c <MemManage_Handler>

0800545e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800545e:	e7fe      	b.n	800545e <BusFault_Handler>

08005460 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005460:	e7fe      	b.n	8005460 <UsageFault_Handler>

08005462 <SVC_Handler>:
 8005462:	4770      	bx	lr

08005464 <DebugMon_Handler>:
 8005464:	4770      	bx	lr

08005466 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005466:	4770      	bx	lr

08005468 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005468:	f7fb b96e 	b.w	8000748 <HAL_IncTick>

0800546c <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800546c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8005470:	f7fb baf2 	b.w	8000a58 <HAL_GPIO_EXTI_IRQHandler>

08005474 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005474:	b570      	push	{r4, r5, r6, lr}
 8005476:	460e      	mov	r6, r1
 8005478:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800547a:	460c      	mov	r4, r1
 800547c:	1ba3      	subs	r3, r4, r6
 800547e:	429d      	cmp	r5, r3
 8005480:	dc01      	bgt.n	8005486 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8005482:	4628      	mov	r0, r5
 8005484:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8005486:	f7ff fcfb 	bl	8004e80 <__io_getchar>
 800548a:	f804 0b01 	strb.w	r0, [r4], #1
 800548e:	e7f5      	b.n	800547c <_read+0x8>

08005490 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005490:	b570      	push	{r4, r5, r6, lr}
 8005492:	460e      	mov	r6, r1
 8005494:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005496:	460c      	mov	r4, r1
 8005498:	1ba3      	subs	r3, r4, r6
 800549a:	429d      	cmp	r5, r3
 800549c:	dc01      	bgt.n	80054a2 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 800549e:	4628      	mov	r0, r5
 80054a0:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 80054a2:	f814 0b01 	ldrb.w	r0, [r4], #1
 80054a6:	f7ff fcd7 	bl	8004e58 <__io_putchar>
 80054aa:	e7f5      	b.n	8005498 <_write+0x8>

080054ac <_sbrk>:

caddr_t _sbrk(int incr)
{
 80054ac:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80054ae:	4b0a      	ldr	r3, [pc, #40]	; (80054d8 <_sbrk+0x2c>)
{
 80054b0:	4602      	mov	r2, r0
	if (heap_end == 0)
 80054b2:	6819      	ldr	r1, [r3, #0]
 80054b4:	b909      	cbnz	r1, 80054ba <_sbrk+0xe>
		heap_end = &end;
 80054b6:	4909      	ldr	r1, [pc, #36]	; (80054dc <_sbrk+0x30>)
 80054b8:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 80054ba:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 80054bc:	4669      	mov	r1, sp
 80054be:	4402      	add	r2, r0
 80054c0:	428a      	cmp	r2, r1
 80054c2:	d906      	bls.n	80054d2 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80054c4:	f000 f926 	bl	8005714 <__errno>
 80054c8:	230c      	movs	r3, #12
 80054ca:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80054cc:	f04f 30ff 	mov.w	r0, #4294967295
 80054d0:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 80054d2:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 80054d4:	bd08      	pop	{r3, pc}
 80054d6:	bf00      	nop
 80054d8:	200001dc 	.word	0x200001dc
 80054dc:	200007d0 	.word	0x200007d0

080054e0 <_close>:

int _close(int file)
{
	return -1;
}
 80054e0:	f04f 30ff 	mov.w	r0, #4294967295
 80054e4:	4770      	bx	lr

080054e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80054e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 80054ea:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 80054ec:	604b      	str	r3, [r1, #4]
}
 80054ee:	4770      	bx	lr

080054f0 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80054f0:	2001      	movs	r0, #1
 80054f2:	4770      	bx	lr

080054f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80054f4:	2000      	movs	r0, #0
 80054f6:	4770      	bx	lr

080054f8 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80054f8:	4918      	ldr	r1, [pc, #96]	; (800555c <SystemInit+0x64>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80054fa:	4819      	ldr	r0, [pc, #100]	; (8005560 <SystemInit+0x68>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80054fc:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8005500:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
{
 8005504:	b510      	push	{r4, lr}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005506:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= RCC_CR_HSION;
 800550a:	4b16      	ldr	r3, [pc, #88]	; (8005564 <SystemInit+0x6c>)
 800550c:	681a      	ldr	r2, [r3, #0]
 800550e:	f042 0201 	orr.w	r2, r2, #1
 8005512:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8005514:	2200      	movs	r2, #0
 8005516:	611a      	str	r2, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 8005518:	681c      	ldr	r4, [r3, #0]
 800551a:	4020      	ands	r0, r4
 800551c:	6018      	str	r0, [r3, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800551e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8005520:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8005522:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8005524:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8005526:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8005528:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800552a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 800552c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800552e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8005530:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8005532:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005534:	6818      	ldr	r0, [r3, #0]
 8005536:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 800553a:	6018      	str	r0, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800553c:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800553e:	4b0a      	ldr	r3, [pc, #40]	; (8005568 <SystemInit+0x70>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	0c1b      	lsrs	r3, r3, #16
 8005544:	041b      	lsls	r3, r3, #16
 8005546:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800554a:	d202      	bcs.n	8005552 <SystemInit+0x5a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800554c:	2201      	movs	r2, #1
 800554e:	4b07      	ldr	r3, [pc, #28]	; (800556c <SystemInit+0x74>)
 8005550:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005552:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005556:	608b      	str	r3, [r1, #8]
 8005558:	bd10      	pop	{r4, pc}
 800555a:	bf00      	nop
 800555c:	e000ed00 	.word	0xe000ed00
 8005560:	eaf6ed7f 	.word	0xeaf6ed7f
 8005564:	58024400 	.word	0x58024400
 8005568:	5c001000 	.word	0x5c001000
 800556c:	51008108 	.word	0x51008108

08005570 <SystemCoreClockUpdate>:
  uint32_t pllp, pllsource, pllm, pllfracen, hsivalue, tmp;
  float_t fracn1, pllvco;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005570:	4b49      	ldr	r3, [pc, #292]	; (8005698 <SystemCoreClockUpdate+0x128>)
 8005572:	484a      	ldr	r0, [pc, #296]	; (800569c <SystemCoreClockUpdate+0x12c>)
 8005574:	691a      	ldr	r2, [r3, #16]
 8005576:	f002 0238 	and.w	r2, r2, #56	; 0x38
 800557a:	2a08      	cmp	r2, #8
{
 800557c:	b530      	push	{r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800557e:	d001      	beq.n	8005584 <SystemCoreClockUpdate+0x14>
 8005580:	d802      	bhi.n	8005588 <SystemCoreClockUpdate+0x18>
 8005582:	b39a      	cbz	r2, 80055ec <SystemCoreClockUpdate+0x7c>
      SystemCoreClock = 0U;
    }
    break;

  default:
    SystemCoreClock = CSI_VALUE;
 8005584:	4b46      	ldr	r3, [pc, #280]	; (80056a0 <SystemCoreClockUpdate+0x130>)
 8005586:	e036      	b.n	80055f6 <SystemCoreClockUpdate+0x86>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005588:	2a10      	cmp	r2, #16
 800558a:	d036      	beq.n	80055fa <SystemCoreClockUpdate+0x8a>
 800558c:	2a18      	cmp	r2, #24
 800558e:	d1f9      	bne.n	8005584 <SystemCoreClockUpdate+0x14>
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005590:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005592:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    pllfracen = ((RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005594:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005596:	f3c2 1205 	ubfx	r2, r2, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800559a:	6b5d      	ldr	r5, [r3, #52]	; 0x34
    if (pllm != 0U)
 800559c:	2a00      	cmp	r2, #0
 800559e:	d078      	beq.n	8005692 <SystemCoreClockUpdate+0x122>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80055a0:	f3c5 05cc 	ubfx	r5, r5, #3, #13
    pllfracen = ((RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80055a4:	f001 0101 	and.w	r1, r1, #1
 80055a8:	eddf 4a3e 	vldr	s9, [pc, #248]	; 80056a4 <SystemCoreClockUpdate+0x134>
 80055ac:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80055b0:	4369      	muls	r1, r5
 80055b2:	ee07 1a90 	vmov	s15, r1
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80055b6:	f004 0103 	and.w	r1, r4, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80055ba:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
      switch (pllsource)
 80055be:	2901      	cmp	r1, #1
 80055c0:	ee07 2a90 	vmov	s15, r2
 80055c4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80055c8:	d002      	beq.n	80055d0 <SystemCoreClockUpdate+0x60>
 80055ca:	d318      	bcc.n	80055fe <SystemCoreClockUpdate+0x8e>
 80055cc:	2902      	cmp	r1, #2
 80055ce:	d050      	beq.n	8005672 <SystemCoreClockUpdate+0x102>
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80055d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055d6:	ee07 3a90 	vmov	s15, r3
 80055da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80055de:	eee6 7a24 	vfma.f32	s15, s12, s9
 80055e2:	ed9f 6a31 	vldr	s12, [pc, #196]	; 80056a8 <SystemCoreClockUpdate+0x138>
 80055e6:	ee77 7a85 	vadd.f32	s15, s15, s10
 80055ea:	e04f      	b.n	800568c <SystemCoreClockUpdate+0x11c>
    SystemCoreClock = (uint32_t) (HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV)>> 3));
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	4b2f      	ldr	r3, [pc, #188]	; (80056ac <SystemCoreClockUpdate+0x13c>)
 80055f0:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 80055f4:	40d3      	lsrs	r3, r2
    SystemCoreClock = CSI_VALUE;
 80055f6:	6003      	str	r3, [r0, #0]
    break;
 80055f8:	e028      	b.n	800564c <SystemCoreClockUpdate+0xdc>
    SystemCoreClock = HSE_VALUE;
 80055fa:	4b2d      	ldr	r3, [pc, #180]	; (80056b0 <SystemCoreClockUpdate+0x140>)
 80055fc:	e7fb      	b.n	80055f6 <SystemCoreClockUpdate+0x86>
        hsivalue = (HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV)>> 3)) ;
 80055fe:	6819      	ldr	r1, [r3, #0]
 8005600:	4a2a      	ldr	r2, [pc, #168]	; (80056ac <SystemCoreClockUpdate+0x13c>)
 8005602:	f3c1 01c1 	ubfx	r1, r1, #3, #2
        pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        hsivalue = (HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV)>> 3)) ;
 8005608:	40ca      	lsrs	r2, r1
        pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800560a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800560e:	ee07 2a90 	vmov	s15, r2
 8005612:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8005616:	ee07 3a90 	vmov	s15, r3
 800561a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800561e:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 8005622:	eee6 7a24 	vfma.f32	s15, s12, s9
 8005626:	ee77 7a85 	vadd.f32	s15, s15, s10
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800562a:	4b1b      	ldr	r3, [pc, #108]	; (8005698 <SystemCoreClockUpdate+0x128>)
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800562c:	ee67 7a87 	vmul.f32	s15, s15, s14
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005632:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8005636:	3301      	adds	r3, #1
      SystemCoreClock =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8005638:	ee07 3a10 	vmov	s14, r3
 800563c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005640:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005644:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8005648:	edc0 6a00 	vstr	s13, [r0]
  }

  /* Compute SystemClock frequency --------------------------------------------------*/
  tmp = D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos];
 800564c:	4a12      	ldr	r2, [pc, #72]	; (8005698 <SystemCoreClockUpdate+0x128>)
 800564e:	4919      	ldr	r1, [pc, #100]	; (80056b4 <SystemCoreClockUpdate+0x144>)
 8005650:	6993      	ldr	r3, [r2, #24]
 8005652:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8005656:	5ccc      	ldrb	r4, [r1, r3]

  /* SystemCoreClock frequency : CM7 CPU frequency  */
  SystemCoreClock >>= tmp;
 8005658:	6803      	ldr	r3, [r0, #0]
 800565a:	40e3      	lsrs	r3, r4
 800565c:	6003      	str	r3, [r0, #0]

  /* SystemD2Clock frequency : CM4 CPU, AXI and AHBs Clock frequency  */
  SystemD2Clock = (SystemCoreClock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800565e:	6992      	ldr	r2, [r2, #24]
 8005660:	f002 020f 	and.w	r2, r2, #15
 8005664:	5c8a      	ldrb	r2, [r1, r2]
 8005666:	f002 021f 	and.w	r2, r2, #31
 800566a:	40d3      	lsrs	r3, r2
 800566c:	4a12      	ldr	r2, [pc, #72]	; (80056b8 <SystemCoreClockUpdate+0x148>)
 800566e:	6013      	str	r3, [r2, #0]
 8005670:	bd30      	pop	{r4, r5, pc}
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005674:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005678:	ee07 3a90 	vmov	s15, r3
 800567c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005680:	eee6 7a24 	vfma.f32	s15, s12, s9
 8005684:	ed9f 6a0d 	vldr	s12, [pc, #52]	; 80056bc <SystemCoreClockUpdate+0x14c>
 8005688:	ee77 7a85 	vadd.f32	s15, s15, s10
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800568c:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8005690:	e7cb      	b.n	800562a <SystemCoreClockUpdate+0xba>
      SystemCoreClock = 0U;
 8005692:	6002      	str	r2, [r0, #0]
 8005694:	e7da      	b.n	800564c <SystemCoreClockUpdate+0xdc>
 8005696:	bf00      	nop
 8005698:	58024400 	.word	0x58024400
 800569c:	20000030 	.word	0x20000030
 80056a0:	003d0900 	.word	0x003d0900
 80056a4:	39000000 	.word	0x39000000
 80056a8:	4a742400 	.word	0x4a742400
 80056ac:	03d09000 	.word	0x03d09000
 80056b0:	007a1200 	.word	0x007a1200
 80056b4:	08006dda 	.word	0x08006dda
 80056b8:	20000034 	.word	0x20000034
 80056bc:	4af42400 	.word	0x4af42400

080056c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80056c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80056f8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80056c4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80056c6:	e003      	b.n	80056d0 <LoopCopyDataInit>

080056c8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80056c8:	4b0c      	ldr	r3, [pc, #48]	; (80056fc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80056ca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80056cc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80056ce:	3104      	adds	r1, #4

080056d0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80056d0:	480b      	ldr	r0, [pc, #44]	; (8005700 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80056d2:	4b0c      	ldr	r3, [pc, #48]	; (8005704 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80056d4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80056d6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80056d8:	d3f6      	bcc.n	80056c8 <CopyDataInit>
  ldr  r2, =_sbss
 80056da:	4a0b      	ldr	r2, [pc, #44]	; (8005708 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80056dc:	e002      	b.n	80056e4 <LoopFillZerobss>

080056de <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80056de:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80056e0:	f842 3b04 	str.w	r3, [r2], #4

080056e4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80056e4:	4b09      	ldr	r3, [pc, #36]	; (800570c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80056e6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80056e8:	d3f9      	bcc.n	80056de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80056ea:	f7ff ff05 	bl	80054f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80056ee:	f000 f817 	bl	8005720 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80056f2:	f7ff fc43 	bl	8004f7c <main>
  bx  lr    
 80056f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80056f8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80056fc:	08006e94 	.word	0x08006e94
  ldr  r0, =_sdata
 8005700:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005704:	2000009c 	.word	0x2000009c
  ldr  r2, =_sbss
 8005708:	2000009c 	.word	0x2000009c
  ldr  r3, = _ebss
 800570c:	200007d0 	.word	0x200007d0

08005710 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005710:	e7fe      	b.n	8005710 <ADC3_IRQHandler>
	...

08005714 <__errno>:
 8005714:	4b01      	ldr	r3, [pc, #4]	; (800571c <__errno+0x8>)
 8005716:	6818      	ldr	r0, [r3, #0]
 8005718:	4770      	bx	lr
 800571a:	bf00      	nop
 800571c:	20000038 	.word	0x20000038

08005720 <__libc_init_array>:
 8005720:	b570      	push	{r4, r5, r6, lr}
 8005722:	4e0d      	ldr	r6, [pc, #52]	; (8005758 <__libc_init_array+0x38>)
 8005724:	4c0d      	ldr	r4, [pc, #52]	; (800575c <__libc_init_array+0x3c>)
 8005726:	1ba4      	subs	r4, r4, r6
 8005728:	10a4      	asrs	r4, r4, #2
 800572a:	2500      	movs	r5, #0
 800572c:	42a5      	cmp	r5, r4
 800572e:	d109      	bne.n	8005744 <__libc_init_array+0x24>
 8005730:	4e0b      	ldr	r6, [pc, #44]	; (8005760 <__libc_init_array+0x40>)
 8005732:	4c0c      	ldr	r4, [pc, #48]	; (8005764 <__libc_init_array+0x44>)
 8005734:	f001 f8ea 	bl	800690c <_init>
 8005738:	1ba4      	subs	r4, r4, r6
 800573a:	10a4      	asrs	r4, r4, #2
 800573c:	2500      	movs	r5, #0
 800573e:	42a5      	cmp	r5, r4
 8005740:	d105      	bne.n	800574e <__libc_init_array+0x2e>
 8005742:	bd70      	pop	{r4, r5, r6, pc}
 8005744:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005748:	4798      	blx	r3
 800574a:	3501      	adds	r5, #1
 800574c:	e7ee      	b.n	800572c <__libc_init_array+0xc>
 800574e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005752:	4798      	blx	r3
 8005754:	3501      	adds	r5, #1
 8005756:	e7f2      	b.n	800573e <__libc_init_array+0x1e>
 8005758:	08006e8c 	.word	0x08006e8c
 800575c:	08006e8c 	.word	0x08006e8c
 8005760:	08006e8c 	.word	0x08006e8c
 8005764:	08006e90 	.word	0x08006e90

08005768 <memcpy>:
 8005768:	b510      	push	{r4, lr}
 800576a:	1e43      	subs	r3, r0, #1
 800576c:	440a      	add	r2, r1
 800576e:	4291      	cmp	r1, r2
 8005770:	d100      	bne.n	8005774 <memcpy+0xc>
 8005772:	bd10      	pop	{r4, pc}
 8005774:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005778:	f803 4f01 	strb.w	r4, [r3, #1]!
 800577c:	e7f7      	b.n	800576e <memcpy+0x6>

0800577e <memset>:
 800577e:	4402      	add	r2, r0
 8005780:	4603      	mov	r3, r0
 8005782:	4293      	cmp	r3, r2
 8005784:	d100      	bne.n	8005788 <memset+0xa>
 8005786:	4770      	bx	lr
 8005788:	f803 1b01 	strb.w	r1, [r3], #1
 800578c:	e7f9      	b.n	8005782 <memset+0x4>
	...

08005790 <iprintf>:
 8005790:	b40f      	push	{r0, r1, r2, r3}
 8005792:	4b0a      	ldr	r3, [pc, #40]	; (80057bc <iprintf+0x2c>)
 8005794:	b513      	push	{r0, r1, r4, lr}
 8005796:	681c      	ldr	r4, [r3, #0]
 8005798:	b124      	cbz	r4, 80057a4 <iprintf+0x14>
 800579a:	69a3      	ldr	r3, [r4, #24]
 800579c:	b913      	cbnz	r3, 80057a4 <iprintf+0x14>
 800579e:	4620      	mov	r0, r4
 80057a0:	f000 f87a 	bl	8005898 <__sinit>
 80057a4:	ab05      	add	r3, sp, #20
 80057a6:	9a04      	ldr	r2, [sp, #16]
 80057a8:	68a1      	ldr	r1, [r4, #8]
 80057aa:	9301      	str	r3, [sp, #4]
 80057ac:	4620      	mov	r0, r4
 80057ae:	f000 fad5 	bl	8005d5c <_vfiprintf_r>
 80057b2:	b002      	add	sp, #8
 80057b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80057b8:	b004      	add	sp, #16
 80057ba:	4770      	bx	lr
 80057bc:	20000038 	.word	0x20000038

080057c0 <siprintf>:
 80057c0:	b40e      	push	{r1, r2, r3}
 80057c2:	b500      	push	{lr}
 80057c4:	b09c      	sub	sp, #112	; 0x70
 80057c6:	f44f 7102 	mov.w	r1, #520	; 0x208
 80057ca:	ab1d      	add	r3, sp, #116	; 0x74
 80057cc:	f8ad 1014 	strh.w	r1, [sp, #20]
 80057d0:	9002      	str	r0, [sp, #8]
 80057d2:	9006      	str	r0, [sp, #24]
 80057d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80057d8:	480a      	ldr	r0, [pc, #40]	; (8005804 <siprintf+0x44>)
 80057da:	9104      	str	r1, [sp, #16]
 80057dc:	9107      	str	r1, [sp, #28]
 80057de:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80057e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80057e6:	f8ad 1016 	strh.w	r1, [sp, #22]
 80057ea:	6800      	ldr	r0, [r0, #0]
 80057ec:	9301      	str	r3, [sp, #4]
 80057ee:	a902      	add	r1, sp, #8
 80057f0:	f000 f996 	bl	8005b20 <_svfiprintf_r>
 80057f4:	9b02      	ldr	r3, [sp, #8]
 80057f6:	2200      	movs	r2, #0
 80057f8:	701a      	strb	r2, [r3, #0]
 80057fa:	b01c      	add	sp, #112	; 0x70
 80057fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8005800:	b003      	add	sp, #12
 8005802:	4770      	bx	lr
 8005804:	20000038 	.word	0x20000038

08005808 <strcpy>:
 8005808:	4603      	mov	r3, r0
 800580a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800580e:	f803 2b01 	strb.w	r2, [r3], #1
 8005812:	2a00      	cmp	r2, #0
 8005814:	d1f9      	bne.n	800580a <strcpy+0x2>
 8005816:	4770      	bx	lr

08005818 <_cleanup_r>:
 8005818:	4901      	ldr	r1, [pc, #4]	; (8005820 <_cleanup_r+0x8>)
 800581a:	f000 b8a9 	b.w	8005970 <_fwalk_reent>
 800581e:	bf00      	nop
 8005820:	08006631 	.word	0x08006631

08005824 <std.isra.0>:
 8005824:	2300      	movs	r3, #0
 8005826:	b510      	push	{r4, lr}
 8005828:	4604      	mov	r4, r0
 800582a:	6003      	str	r3, [r0, #0]
 800582c:	6043      	str	r3, [r0, #4]
 800582e:	6083      	str	r3, [r0, #8]
 8005830:	8181      	strh	r1, [r0, #12]
 8005832:	6643      	str	r3, [r0, #100]	; 0x64
 8005834:	81c2      	strh	r2, [r0, #14]
 8005836:	6103      	str	r3, [r0, #16]
 8005838:	6143      	str	r3, [r0, #20]
 800583a:	6183      	str	r3, [r0, #24]
 800583c:	4619      	mov	r1, r3
 800583e:	2208      	movs	r2, #8
 8005840:	305c      	adds	r0, #92	; 0x5c
 8005842:	f7ff ff9c 	bl	800577e <memset>
 8005846:	4b05      	ldr	r3, [pc, #20]	; (800585c <std.isra.0+0x38>)
 8005848:	6263      	str	r3, [r4, #36]	; 0x24
 800584a:	4b05      	ldr	r3, [pc, #20]	; (8005860 <std.isra.0+0x3c>)
 800584c:	62a3      	str	r3, [r4, #40]	; 0x28
 800584e:	4b05      	ldr	r3, [pc, #20]	; (8005864 <std.isra.0+0x40>)
 8005850:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005852:	4b05      	ldr	r3, [pc, #20]	; (8005868 <std.isra.0+0x44>)
 8005854:	6224      	str	r4, [r4, #32]
 8005856:	6323      	str	r3, [r4, #48]	; 0x30
 8005858:	bd10      	pop	{r4, pc}
 800585a:	bf00      	nop
 800585c:	080062d5 	.word	0x080062d5
 8005860:	080062f7 	.word	0x080062f7
 8005864:	0800632f 	.word	0x0800632f
 8005868:	08006353 	.word	0x08006353

0800586c <__sfmoreglue>:
 800586c:	b570      	push	{r4, r5, r6, lr}
 800586e:	1e4a      	subs	r2, r1, #1
 8005870:	2568      	movs	r5, #104	; 0x68
 8005872:	4355      	muls	r5, r2
 8005874:	460e      	mov	r6, r1
 8005876:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800587a:	f000 f897 	bl	80059ac <_malloc_r>
 800587e:	4604      	mov	r4, r0
 8005880:	b140      	cbz	r0, 8005894 <__sfmoreglue+0x28>
 8005882:	2100      	movs	r1, #0
 8005884:	e880 0042 	stmia.w	r0, {r1, r6}
 8005888:	300c      	adds	r0, #12
 800588a:	60a0      	str	r0, [r4, #8]
 800588c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005890:	f7ff ff75 	bl	800577e <memset>
 8005894:	4620      	mov	r0, r4
 8005896:	bd70      	pop	{r4, r5, r6, pc}

08005898 <__sinit>:
 8005898:	6983      	ldr	r3, [r0, #24]
 800589a:	b510      	push	{r4, lr}
 800589c:	4604      	mov	r4, r0
 800589e:	bb33      	cbnz	r3, 80058ee <__sinit+0x56>
 80058a0:	6483      	str	r3, [r0, #72]	; 0x48
 80058a2:	64c3      	str	r3, [r0, #76]	; 0x4c
 80058a4:	6503      	str	r3, [r0, #80]	; 0x50
 80058a6:	4b12      	ldr	r3, [pc, #72]	; (80058f0 <__sinit+0x58>)
 80058a8:	4a12      	ldr	r2, [pc, #72]	; (80058f4 <__sinit+0x5c>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	6282      	str	r2, [r0, #40]	; 0x28
 80058ae:	4298      	cmp	r0, r3
 80058b0:	bf04      	itt	eq
 80058b2:	2301      	moveq	r3, #1
 80058b4:	6183      	streq	r3, [r0, #24]
 80058b6:	f000 f81f 	bl	80058f8 <__sfp>
 80058ba:	6060      	str	r0, [r4, #4]
 80058bc:	4620      	mov	r0, r4
 80058be:	f000 f81b 	bl	80058f8 <__sfp>
 80058c2:	60a0      	str	r0, [r4, #8]
 80058c4:	4620      	mov	r0, r4
 80058c6:	f000 f817 	bl	80058f8 <__sfp>
 80058ca:	2200      	movs	r2, #0
 80058cc:	60e0      	str	r0, [r4, #12]
 80058ce:	2104      	movs	r1, #4
 80058d0:	6860      	ldr	r0, [r4, #4]
 80058d2:	f7ff ffa7 	bl	8005824 <std.isra.0>
 80058d6:	2201      	movs	r2, #1
 80058d8:	2109      	movs	r1, #9
 80058da:	68a0      	ldr	r0, [r4, #8]
 80058dc:	f7ff ffa2 	bl	8005824 <std.isra.0>
 80058e0:	2202      	movs	r2, #2
 80058e2:	2112      	movs	r1, #18
 80058e4:	68e0      	ldr	r0, [r4, #12]
 80058e6:	f7ff ff9d 	bl	8005824 <std.isra.0>
 80058ea:	2301      	movs	r3, #1
 80058ec:	61a3      	str	r3, [r4, #24]
 80058ee:	bd10      	pop	{r4, pc}
 80058f0:	08006dec 	.word	0x08006dec
 80058f4:	08005819 	.word	0x08005819

080058f8 <__sfp>:
 80058f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058fa:	4b1c      	ldr	r3, [pc, #112]	; (800596c <__sfp+0x74>)
 80058fc:	681e      	ldr	r6, [r3, #0]
 80058fe:	69b3      	ldr	r3, [r6, #24]
 8005900:	4607      	mov	r7, r0
 8005902:	b913      	cbnz	r3, 800590a <__sfp+0x12>
 8005904:	4630      	mov	r0, r6
 8005906:	f7ff ffc7 	bl	8005898 <__sinit>
 800590a:	3648      	adds	r6, #72	; 0x48
 800590c:	68b4      	ldr	r4, [r6, #8]
 800590e:	6873      	ldr	r3, [r6, #4]
 8005910:	3b01      	subs	r3, #1
 8005912:	d503      	bpl.n	800591c <__sfp+0x24>
 8005914:	6833      	ldr	r3, [r6, #0]
 8005916:	b133      	cbz	r3, 8005926 <__sfp+0x2e>
 8005918:	6836      	ldr	r6, [r6, #0]
 800591a:	e7f7      	b.n	800590c <__sfp+0x14>
 800591c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005920:	b16d      	cbz	r5, 800593e <__sfp+0x46>
 8005922:	3468      	adds	r4, #104	; 0x68
 8005924:	e7f4      	b.n	8005910 <__sfp+0x18>
 8005926:	2104      	movs	r1, #4
 8005928:	4638      	mov	r0, r7
 800592a:	f7ff ff9f 	bl	800586c <__sfmoreglue>
 800592e:	6030      	str	r0, [r6, #0]
 8005930:	2800      	cmp	r0, #0
 8005932:	d1f1      	bne.n	8005918 <__sfp+0x20>
 8005934:	230c      	movs	r3, #12
 8005936:	603b      	str	r3, [r7, #0]
 8005938:	4604      	mov	r4, r0
 800593a:	4620      	mov	r0, r4
 800593c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800593e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005942:	81e3      	strh	r3, [r4, #14]
 8005944:	2301      	movs	r3, #1
 8005946:	81a3      	strh	r3, [r4, #12]
 8005948:	6665      	str	r5, [r4, #100]	; 0x64
 800594a:	6025      	str	r5, [r4, #0]
 800594c:	60a5      	str	r5, [r4, #8]
 800594e:	6065      	str	r5, [r4, #4]
 8005950:	6125      	str	r5, [r4, #16]
 8005952:	6165      	str	r5, [r4, #20]
 8005954:	61a5      	str	r5, [r4, #24]
 8005956:	2208      	movs	r2, #8
 8005958:	4629      	mov	r1, r5
 800595a:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800595e:	f7ff ff0e 	bl	800577e <memset>
 8005962:	6365      	str	r5, [r4, #52]	; 0x34
 8005964:	63a5      	str	r5, [r4, #56]	; 0x38
 8005966:	64a5      	str	r5, [r4, #72]	; 0x48
 8005968:	64e5      	str	r5, [r4, #76]	; 0x4c
 800596a:	e7e6      	b.n	800593a <__sfp+0x42>
 800596c:	08006dec 	.word	0x08006dec

08005970 <_fwalk_reent>:
 8005970:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005974:	4680      	mov	r8, r0
 8005976:	4689      	mov	r9, r1
 8005978:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800597c:	2600      	movs	r6, #0
 800597e:	b914      	cbnz	r4, 8005986 <_fwalk_reent+0x16>
 8005980:	4630      	mov	r0, r6
 8005982:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005986:	68a5      	ldr	r5, [r4, #8]
 8005988:	6867      	ldr	r7, [r4, #4]
 800598a:	3f01      	subs	r7, #1
 800598c:	d501      	bpl.n	8005992 <_fwalk_reent+0x22>
 800598e:	6824      	ldr	r4, [r4, #0]
 8005990:	e7f5      	b.n	800597e <_fwalk_reent+0xe>
 8005992:	89ab      	ldrh	r3, [r5, #12]
 8005994:	2b01      	cmp	r3, #1
 8005996:	d907      	bls.n	80059a8 <_fwalk_reent+0x38>
 8005998:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800599c:	3301      	adds	r3, #1
 800599e:	d003      	beq.n	80059a8 <_fwalk_reent+0x38>
 80059a0:	4629      	mov	r1, r5
 80059a2:	4640      	mov	r0, r8
 80059a4:	47c8      	blx	r9
 80059a6:	4306      	orrs	r6, r0
 80059a8:	3568      	adds	r5, #104	; 0x68
 80059aa:	e7ee      	b.n	800598a <_fwalk_reent+0x1a>

080059ac <_malloc_r>:
 80059ac:	b570      	push	{r4, r5, r6, lr}
 80059ae:	1ccd      	adds	r5, r1, #3
 80059b0:	f025 0503 	bic.w	r5, r5, #3
 80059b4:	3508      	adds	r5, #8
 80059b6:	2d0c      	cmp	r5, #12
 80059b8:	bf38      	it	cc
 80059ba:	250c      	movcc	r5, #12
 80059bc:	2d00      	cmp	r5, #0
 80059be:	4606      	mov	r6, r0
 80059c0:	db01      	blt.n	80059c6 <_malloc_r+0x1a>
 80059c2:	42a9      	cmp	r1, r5
 80059c4:	d903      	bls.n	80059ce <_malloc_r+0x22>
 80059c6:	230c      	movs	r3, #12
 80059c8:	6033      	str	r3, [r6, #0]
 80059ca:	2000      	movs	r0, #0
 80059cc:	bd70      	pop	{r4, r5, r6, pc}
 80059ce:	f000 fee9 	bl	80067a4 <__malloc_lock>
 80059d2:	4a23      	ldr	r2, [pc, #140]	; (8005a60 <_malloc_r+0xb4>)
 80059d4:	6814      	ldr	r4, [r2, #0]
 80059d6:	4621      	mov	r1, r4
 80059d8:	b991      	cbnz	r1, 8005a00 <_malloc_r+0x54>
 80059da:	4c22      	ldr	r4, [pc, #136]	; (8005a64 <_malloc_r+0xb8>)
 80059dc:	6823      	ldr	r3, [r4, #0]
 80059de:	b91b      	cbnz	r3, 80059e8 <_malloc_r+0x3c>
 80059e0:	4630      	mov	r0, r6
 80059e2:	f000 fc67 	bl	80062b4 <_sbrk_r>
 80059e6:	6020      	str	r0, [r4, #0]
 80059e8:	4629      	mov	r1, r5
 80059ea:	4630      	mov	r0, r6
 80059ec:	f000 fc62 	bl	80062b4 <_sbrk_r>
 80059f0:	1c43      	adds	r3, r0, #1
 80059f2:	d126      	bne.n	8005a42 <_malloc_r+0x96>
 80059f4:	230c      	movs	r3, #12
 80059f6:	6033      	str	r3, [r6, #0]
 80059f8:	4630      	mov	r0, r6
 80059fa:	f000 fed4 	bl	80067a6 <__malloc_unlock>
 80059fe:	e7e4      	b.n	80059ca <_malloc_r+0x1e>
 8005a00:	680b      	ldr	r3, [r1, #0]
 8005a02:	1b5b      	subs	r3, r3, r5
 8005a04:	d41a      	bmi.n	8005a3c <_malloc_r+0x90>
 8005a06:	2b0b      	cmp	r3, #11
 8005a08:	d90f      	bls.n	8005a2a <_malloc_r+0x7e>
 8005a0a:	600b      	str	r3, [r1, #0]
 8005a0c:	50cd      	str	r5, [r1, r3]
 8005a0e:	18cc      	adds	r4, r1, r3
 8005a10:	4630      	mov	r0, r6
 8005a12:	f000 fec8 	bl	80067a6 <__malloc_unlock>
 8005a16:	f104 000b 	add.w	r0, r4, #11
 8005a1a:	1d23      	adds	r3, r4, #4
 8005a1c:	f020 0007 	bic.w	r0, r0, #7
 8005a20:	1ac3      	subs	r3, r0, r3
 8005a22:	d01b      	beq.n	8005a5c <_malloc_r+0xb0>
 8005a24:	425a      	negs	r2, r3
 8005a26:	50e2      	str	r2, [r4, r3]
 8005a28:	bd70      	pop	{r4, r5, r6, pc}
 8005a2a:	428c      	cmp	r4, r1
 8005a2c:	bf0d      	iteet	eq
 8005a2e:	6863      	ldreq	r3, [r4, #4]
 8005a30:	684b      	ldrne	r3, [r1, #4]
 8005a32:	6063      	strne	r3, [r4, #4]
 8005a34:	6013      	streq	r3, [r2, #0]
 8005a36:	bf18      	it	ne
 8005a38:	460c      	movne	r4, r1
 8005a3a:	e7e9      	b.n	8005a10 <_malloc_r+0x64>
 8005a3c:	460c      	mov	r4, r1
 8005a3e:	6849      	ldr	r1, [r1, #4]
 8005a40:	e7ca      	b.n	80059d8 <_malloc_r+0x2c>
 8005a42:	1cc4      	adds	r4, r0, #3
 8005a44:	f024 0403 	bic.w	r4, r4, #3
 8005a48:	42a0      	cmp	r0, r4
 8005a4a:	d005      	beq.n	8005a58 <_malloc_r+0xac>
 8005a4c:	1a21      	subs	r1, r4, r0
 8005a4e:	4630      	mov	r0, r6
 8005a50:	f000 fc30 	bl	80062b4 <_sbrk_r>
 8005a54:	3001      	adds	r0, #1
 8005a56:	d0cd      	beq.n	80059f4 <_malloc_r+0x48>
 8005a58:	6025      	str	r5, [r4, #0]
 8005a5a:	e7d9      	b.n	8005a10 <_malloc_r+0x64>
 8005a5c:	bd70      	pop	{r4, r5, r6, pc}
 8005a5e:	bf00      	nop
 8005a60:	200001e0 	.word	0x200001e0
 8005a64:	200001e4 	.word	0x200001e4

08005a68 <__ssputs_r>:
 8005a68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a6c:	688e      	ldr	r6, [r1, #8]
 8005a6e:	429e      	cmp	r6, r3
 8005a70:	4682      	mov	sl, r0
 8005a72:	460c      	mov	r4, r1
 8005a74:	4691      	mov	r9, r2
 8005a76:	4698      	mov	r8, r3
 8005a78:	d835      	bhi.n	8005ae6 <__ssputs_r+0x7e>
 8005a7a:	898a      	ldrh	r2, [r1, #12]
 8005a7c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005a80:	d031      	beq.n	8005ae6 <__ssputs_r+0x7e>
 8005a82:	6825      	ldr	r5, [r4, #0]
 8005a84:	6909      	ldr	r1, [r1, #16]
 8005a86:	1a6f      	subs	r7, r5, r1
 8005a88:	6965      	ldr	r5, [r4, #20]
 8005a8a:	2302      	movs	r3, #2
 8005a8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005a90:	fb95 f5f3 	sdiv	r5, r5, r3
 8005a94:	f108 0301 	add.w	r3, r8, #1
 8005a98:	443b      	add	r3, r7
 8005a9a:	429d      	cmp	r5, r3
 8005a9c:	bf38      	it	cc
 8005a9e:	461d      	movcc	r5, r3
 8005aa0:	0553      	lsls	r3, r2, #21
 8005aa2:	d531      	bpl.n	8005b08 <__ssputs_r+0xa0>
 8005aa4:	4629      	mov	r1, r5
 8005aa6:	f7ff ff81 	bl	80059ac <_malloc_r>
 8005aaa:	4606      	mov	r6, r0
 8005aac:	b950      	cbnz	r0, 8005ac4 <__ssputs_r+0x5c>
 8005aae:	230c      	movs	r3, #12
 8005ab0:	f8ca 3000 	str.w	r3, [sl]
 8005ab4:	89a3      	ldrh	r3, [r4, #12]
 8005ab6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005aba:	81a3      	strh	r3, [r4, #12]
 8005abc:	f04f 30ff 	mov.w	r0, #4294967295
 8005ac0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ac4:	463a      	mov	r2, r7
 8005ac6:	6921      	ldr	r1, [r4, #16]
 8005ac8:	f7ff fe4e 	bl	8005768 <memcpy>
 8005acc:	89a3      	ldrh	r3, [r4, #12]
 8005ace:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005ad2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ad6:	81a3      	strh	r3, [r4, #12]
 8005ad8:	6126      	str	r6, [r4, #16]
 8005ada:	6165      	str	r5, [r4, #20]
 8005adc:	443e      	add	r6, r7
 8005ade:	1bed      	subs	r5, r5, r7
 8005ae0:	6026      	str	r6, [r4, #0]
 8005ae2:	60a5      	str	r5, [r4, #8]
 8005ae4:	4646      	mov	r6, r8
 8005ae6:	4546      	cmp	r6, r8
 8005ae8:	bf28      	it	cs
 8005aea:	4646      	movcs	r6, r8
 8005aec:	4632      	mov	r2, r6
 8005aee:	4649      	mov	r1, r9
 8005af0:	6820      	ldr	r0, [r4, #0]
 8005af2:	f000 fe3d 	bl	8006770 <memmove>
 8005af6:	68a3      	ldr	r3, [r4, #8]
 8005af8:	1b9b      	subs	r3, r3, r6
 8005afa:	60a3      	str	r3, [r4, #8]
 8005afc:	6823      	ldr	r3, [r4, #0]
 8005afe:	441e      	add	r6, r3
 8005b00:	6026      	str	r6, [r4, #0]
 8005b02:	2000      	movs	r0, #0
 8005b04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b08:	462a      	mov	r2, r5
 8005b0a:	f000 fe9b 	bl	8006844 <_realloc_r>
 8005b0e:	4606      	mov	r6, r0
 8005b10:	2800      	cmp	r0, #0
 8005b12:	d1e1      	bne.n	8005ad8 <__ssputs_r+0x70>
 8005b14:	6921      	ldr	r1, [r4, #16]
 8005b16:	4650      	mov	r0, sl
 8005b18:	f000 fe46 	bl	80067a8 <_free_r>
 8005b1c:	e7c7      	b.n	8005aae <__ssputs_r+0x46>
	...

08005b20 <_svfiprintf_r>:
 8005b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b24:	b09d      	sub	sp, #116	; 0x74
 8005b26:	4680      	mov	r8, r0
 8005b28:	9303      	str	r3, [sp, #12]
 8005b2a:	898b      	ldrh	r3, [r1, #12]
 8005b2c:	061c      	lsls	r4, r3, #24
 8005b2e:	460d      	mov	r5, r1
 8005b30:	4616      	mov	r6, r2
 8005b32:	d50f      	bpl.n	8005b54 <_svfiprintf_r+0x34>
 8005b34:	690b      	ldr	r3, [r1, #16]
 8005b36:	b96b      	cbnz	r3, 8005b54 <_svfiprintf_r+0x34>
 8005b38:	2140      	movs	r1, #64	; 0x40
 8005b3a:	f7ff ff37 	bl	80059ac <_malloc_r>
 8005b3e:	6028      	str	r0, [r5, #0]
 8005b40:	6128      	str	r0, [r5, #16]
 8005b42:	b928      	cbnz	r0, 8005b50 <_svfiprintf_r+0x30>
 8005b44:	230c      	movs	r3, #12
 8005b46:	f8c8 3000 	str.w	r3, [r8]
 8005b4a:	f04f 30ff 	mov.w	r0, #4294967295
 8005b4e:	e0c5      	b.n	8005cdc <_svfiprintf_r+0x1bc>
 8005b50:	2340      	movs	r3, #64	; 0x40
 8005b52:	616b      	str	r3, [r5, #20]
 8005b54:	2300      	movs	r3, #0
 8005b56:	9309      	str	r3, [sp, #36]	; 0x24
 8005b58:	2320      	movs	r3, #32
 8005b5a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005b5e:	2330      	movs	r3, #48	; 0x30
 8005b60:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005b64:	f04f 0b01 	mov.w	fp, #1
 8005b68:	4637      	mov	r7, r6
 8005b6a:	463c      	mov	r4, r7
 8005b6c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d13c      	bne.n	8005bee <_svfiprintf_r+0xce>
 8005b74:	ebb7 0a06 	subs.w	sl, r7, r6
 8005b78:	d00b      	beq.n	8005b92 <_svfiprintf_r+0x72>
 8005b7a:	4653      	mov	r3, sl
 8005b7c:	4632      	mov	r2, r6
 8005b7e:	4629      	mov	r1, r5
 8005b80:	4640      	mov	r0, r8
 8005b82:	f7ff ff71 	bl	8005a68 <__ssputs_r>
 8005b86:	3001      	adds	r0, #1
 8005b88:	f000 80a3 	beq.w	8005cd2 <_svfiprintf_r+0x1b2>
 8005b8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b8e:	4453      	add	r3, sl
 8005b90:	9309      	str	r3, [sp, #36]	; 0x24
 8005b92:	783b      	ldrb	r3, [r7, #0]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	f000 809c 	beq.w	8005cd2 <_svfiprintf_r+0x1b2>
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	f04f 32ff 	mov.w	r2, #4294967295
 8005ba0:	9304      	str	r3, [sp, #16]
 8005ba2:	9307      	str	r3, [sp, #28]
 8005ba4:	9205      	str	r2, [sp, #20]
 8005ba6:	9306      	str	r3, [sp, #24]
 8005ba8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005bac:	931a      	str	r3, [sp, #104]	; 0x68
 8005bae:	2205      	movs	r2, #5
 8005bb0:	7821      	ldrb	r1, [r4, #0]
 8005bb2:	4850      	ldr	r0, [pc, #320]	; (8005cf4 <_svfiprintf_r+0x1d4>)
 8005bb4:	f7fa fb9c 	bl	80002f0 <memchr>
 8005bb8:	1c67      	adds	r7, r4, #1
 8005bba:	9b04      	ldr	r3, [sp, #16]
 8005bbc:	b9d8      	cbnz	r0, 8005bf6 <_svfiprintf_r+0xd6>
 8005bbe:	06d9      	lsls	r1, r3, #27
 8005bc0:	bf44      	itt	mi
 8005bc2:	2220      	movmi	r2, #32
 8005bc4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005bc8:	071a      	lsls	r2, r3, #28
 8005bca:	bf44      	itt	mi
 8005bcc:	222b      	movmi	r2, #43	; 0x2b
 8005bce:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005bd2:	7822      	ldrb	r2, [r4, #0]
 8005bd4:	2a2a      	cmp	r2, #42	; 0x2a
 8005bd6:	d016      	beq.n	8005c06 <_svfiprintf_r+0xe6>
 8005bd8:	9a07      	ldr	r2, [sp, #28]
 8005bda:	2100      	movs	r1, #0
 8005bdc:	200a      	movs	r0, #10
 8005bde:	4627      	mov	r7, r4
 8005be0:	3401      	adds	r4, #1
 8005be2:	783b      	ldrb	r3, [r7, #0]
 8005be4:	3b30      	subs	r3, #48	; 0x30
 8005be6:	2b09      	cmp	r3, #9
 8005be8:	d951      	bls.n	8005c8e <_svfiprintf_r+0x16e>
 8005bea:	b1c9      	cbz	r1, 8005c20 <_svfiprintf_r+0x100>
 8005bec:	e011      	b.n	8005c12 <_svfiprintf_r+0xf2>
 8005bee:	2b25      	cmp	r3, #37	; 0x25
 8005bf0:	d0c0      	beq.n	8005b74 <_svfiprintf_r+0x54>
 8005bf2:	4627      	mov	r7, r4
 8005bf4:	e7b9      	b.n	8005b6a <_svfiprintf_r+0x4a>
 8005bf6:	4a3f      	ldr	r2, [pc, #252]	; (8005cf4 <_svfiprintf_r+0x1d4>)
 8005bf8:	1a80      	subs	r0, r0, r2
 8005bfa:	fa0b f000 	lsl.w	r0, fp, r0
 8005bfe:	4318      	orrs	r0, r3
 8005c00:	9004      	str	r0, [sp, #16]
 8005c02:	463c      	mov	r4, r7
 8005c04:	e7d3      	b.n	8005bae <_svfiprintf_r+0x8e>
 8005c06:	9a03      	ldr	r2, [sp, #12]
 8005c08:	1d11      	adds	r1, r2, #4
 8005c0a:	6812      	ldr	r2, [r2, #0]
 8005c0c:	9103      	str	r1, [sp, #12]
 8005c0e:	2a00      	cmp	r2, #0
 8005c10:	db01      	blt.n	8005c16 <_svfiprintf_r+0xf6>
 8005c12:	9207      	str	r2, [sp, #28]
 8005c14:	e004      	b.n	8005c20 <_svfiprintf_r+0x100>
 8005c16:	4252      	negs	r2, r2
 8005c18:	f043 0302 	orr.w	r3, r3, #2
 8005c1c:	9207      	str	r2, [sp, #28]
 8005c1e:	9304      	str	r3, [sp, #16]
 8005c20:	783b      	ldrb	r3, [r7, #0]
 8005c22:	2b2e      	cmp	r3, #46	; 0x2e
 8005c24:	d10e      	bne.n	8005c44 <_svfiprintf_r+0x124>
 8005c26:	787b      	ldrb	r3, [r7, #1]
 8005c28:	2b2a      	cmp	r3, #42	; 0x2a
 8005c2a:	f107 0101 	add.w	r1, r7, #1
 8005c2e:	d132      	bne.n	8005c96 <_svfiprintf_r+0x176>
 8005c30:	9b03      	ldr	r3, [sp, #12]
 8005c32:	1d1a      	adds	r2, r3, #4
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	9203      	str	r2, [sp, #12]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	bfb8      	it	lt
 8005c3c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005c40:	3702      	adds	r7, #2
 8005c42:	9305      	str	r3, [sp, #20]
 8005c44:	4c2c      	ldr	r4, [pc, #176]	; (8005cf8 <_svfiprintf_r+0x1d8>)
 8005c46:	7839      	ldrb	r1, [r7, #0]
 8005c48:	2203      	movs	r2, #3
 8005c4a:	4620      	mov	r0, r4
 8005c4c:	f7fa fb50 	bl	80002f0 <memchr>
 8005c50:	b138      	cbz	r0, 8005c62 <_svfiprintf_r+0x142>
 8005c52:	2340      	movs	r3, #64	; 0x40
 8005c54:	1b00      	subs	r0, r0, r4
 8005c56:	fa03 f000 	lsl.w	r0, r3, r0
 8005c5a:	9b04      	ldr	r3, [sp, #16]
 8005c5c:	4303      	orrs	r3, r0
 8005c5e:	9304      	str	r3, [sp, #16]
 8005c60:	3701      	adds	r7, #1
 8005c62:	7839      	ldrb	r1, [r7, #0]
 8005c64:	4825      	ldr	r0, [pc, #148]	; (8005cfc <_svfiprintf_r+0x1dc>)
 8005c66:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005c6a:	2206      	movs	r2, #6
 8005c6c:	1c7e      	adds	r6, r7, #1
 8005c6e:	f7fa fb3f 	bl	80002f0 <memchr>
 8005c72:	2800      	cmp	r0, #0
 8005c74:	d035      	beq.n	8005ce2 <_svfiprintf_r+0x1c2>
 8005c76:	4b22      	ldr	r3, [pc, #136]	; (8005d00 <_svfiprintf_r+0x1e0>)
 8005c78:	b9fb      	cbnz	r3, 8005cba <_svfiprintf_r+0x19a>
 8005c7a:	9b03      	ldr	r3, [sp, #12]
 8005c7c:	3307      	adds	r3, #7
 8005c7e:	f023 0307 	bic.w	r3, r3, #7
 8005c82:	3308      	adds	r3, #8
 8005c84:	9303      	str	r3, [sp, #12]
 8005c86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c88:	444b      	add	r3, r9
 8005c8a:	9309      	str	r3, [sp, #36]	; 0x24
 8005c8c:	e76c      	b.n	8005b68 <_svfiprintf_r+0x48>
 8005c8e:	fb00 3202 	mla	r2, r0, r2, r3
 8005c92:	2101      	movs	r1, #1
 8005c94:	e7a3      	b.n	8005bde <_svfiprintf_r+0xbe>
 8005c96:	2300      	movs	r3, #0
 8005c98:	9305      	str	r3, [sp, #20]
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	240a      	movs	r4, #10
 8005c9e:	460f      	mov	r7, r1
 8005ca0:	3101      	adds	r1, #1
 8005ca2:	783a      	ldrb	r2, [r7, #0]
 8005ca4:	3a30      	subs	r2, #48	; 0x30
 8005ca6:	2a09      	cmp	r2, #9
 8005ca8:	d903      	bls.n	8005cb2 <_svfiprintf_r+0x192>
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d0ca      	beq.n	8005c44 <_svfiprintf_r+0x124>
 8005cae:	9005      	str	r0, [sp, #20]
 8005cb0:	e7c8      	b.n	8005c44 <_svfiprintf_r+0x124>
 8005cb2:	fb04 2000 	mla	r0, r4, r0, r2
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	e7f1      	b.n	8005c9e <_svfiprintf_r+0x17e>
 8005cba:	ab03      	add	r3, sp, #12
 8005cbc:	9300      	str	r3, [sp, #0]
 8005cbe:	462a      	mov	r2, r5
 8005cc0:	4b10      	ldr	r3, [pc, #64]	; (8005d04 <_svfiprintf_r+0x1e4>)
 8005cc2:	a904      	add	r1, sp, #16
 8005cc4:	4640      	mov	r0, r8
 8005cc6:	f3af 8000 	nop.w
 8005cca:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005cce:	4681      	mov	r9, r0
 8005cd0:	d1d9      	bne.n	8005c86 <_svfiprintf_r+0x166>
 8005cd2:	89ab      	ldrh	r3, [r5, #12]
 8005cd4:	065b      	lsls	r3, r3, #25
 8005cd6:	f53f af38 	bmi.w	8005b4a <_svfiprintf_r+0x2a>
 8005cda:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005cdc:	b01d      	add	sp, #116	; 0x74
 8005cde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ce2:	ab03      	add	r3, sp, #12
 8005ce4:	9300      	str	r3, [sp, #0]
 8005ce6:	462a      	mov	r2, r5
 8005ce8:	4b06      	ldr	r3, [pc, #24]	; (8005d04 <_svfiprintf_r+0x1e4>)
 8005cea:	a904      	add	r1, sp, #16
 8005cec:	4640      	mov	r0, r8
 8005cee:	f000 f9c1 	bl	8006074 <_printf_i>
 8005cf2:	e7ea      	b.n	8005cca <_svfiprintf_r+0x1aa>
 8005cf4:	08006e50 	.word	0x08006e50
 8005cf8:	08006e56 	.word	0x08006e56
 8005cfc:	08006e5a 	.word	0x08006e5a
 8005d00:	00000000 	.word	0x00000000
 8005d04:	08005a69 	.word	0x08005a69

08005d08 <__sfputc_r>:
 8005d08:	6893      	ldr	r3, [r2, #8]
 8005d0a:	3b01      	subs	r3, #1
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	b410      	push	{r4}
 8005d10:	6093      	str	r3, [r2, #8]
 8005d12:	da09      	bge.n	8005d28 <__sfputc_r+0x20>
 8005d14:	6994      	ldr	r4, [r2, #24]
 8005d16:	42a3      	cmp	r3, r4
 8005d18:	db02      	blt.n	8005d20 <__sfputc_r+0x18>
 8005d1a:	b2cb      	uxtb	r3, r1
 8005d1c:	2b0a      	cmp	r3, #10
 8005d1e:	d103      	bne.n	8005d28 <__sfputc_r+0x20>
 8005d20:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d24:	f000 bb1a 	b.w	800635c <__swbuf_r>
 8005d28:	6813      	ldr	r3, [r2, #0]
 8005d2a:	1c58      	adds	r0, r3, #1
 8005d2c:	6010      	str	r0, [r2, #0]
 8005d2e:	7019      	strb	r1, [r3, #0]
 8005d30:	b2c8      	uxtb	r0, r1
 8005d32:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d36:	4770      	bx	lr

08005d38 <__sfputs_r>:
 8005d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d3a:	4606      	mov	r6, r0
 8005d3c:	460f      	mov	r7, r1
 8005d3e:	4614      	mov	r4, r2
 8005d40:	18d5      	adds	r5, r2, r3
 8005d42:	42ac      	cmp	r4, r5
 8005d44:	d101      	bne.n	8005d4a <__sfputs_r+0x12>
 8005d46:	2000      	movs	r0, #0
 8005d48:	e007      	b.n	8005d5a <__sfputs_r+0x22>
 8005d4a:	463a      	mov	r2, r7
 8005d4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d50:	4630      	mov	r0, r6
 8005d52:	f7ff ffd9 	bl	8005d08 <__sfputc_r>
 8005d56:	1c43      	adds	r3, r0, #1
 8005d58:	d1f3      	bne.n	8005d42 <__sfputs_r+0xa>
 8005d5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005d5c <_vfiprintf_r>:
 8005d5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d60:	b09d      	sub	sp, #116	; 0x74
 8005d62:	460c      	mov	r4, r1
 8005d64:	4617      	mov	r7, r2
 8005d66:	9303      	str	r3, [sp, #12]
 8005d68:	4606      	mov	r6, r0
 8005d6a:	b118      	cbz	r0, 8005d74 <_vfiprintf_r+0x18>
 8005d6c:	6983      	ldr	r3, [r0, #24]
 8005d6e:	b90b      	cbnz	r3, 8005d74 <_vfiprintf_r+0x18>
 8005d70:	f7ff fd92 	bl	8005898 <__sinit>
 8005d74:	4b7c      	ldr	r3, [pc, #496]	; (8005f68 <_vfiprintf_r+0x20c>)
 8005d76:	429c      	cmp	r4, r3
 8005d78:	d157      	bne.n	8005e2a <_vfiprintf_r+0xce>
 8005d7a:	6874      	ldr	r4, [r6, #4]
 8005d7c:	89a3      	ldrh	r3, [r4, #12]
 8005d7e:	0718      	lsls	r0, r3, #28
 8005d80:	d55d      	bpl.n	8005e3e <_vfiprintf_r+0xe2>
 8005d82:	6923      	ldr	r3, [r4, #16]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d05a      	beq.n	8005e3e <_vfiprintf_r+0xe2>
 8005d88:	2300      	movs	r3, #0
 8005d8a:	9309      	str	r3, [sp, #36]	; 0x24
 8005d8c:	2320      	movs	r3, #32
 8005d8e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005d92:	2330      	movs	r3, #48	; 0x30
 8005d94:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005d98:	f04f 0b01 	mov.w	fp, #1
 8005d9c:	46b8      	mov	r8, r7
 8005d9e:	4645      	mov	r5, r8
 8005da0:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d155      	bne.n	8005e54 <_vfiprintf_r+0xf8>
 8005da8:	ebb8 0a07 	subs.w	sl, r8, r7
 8005dac:	d00b      	beq.n	8005dc6 <_vfiprintf_r+0x6a>
 8005dae:	4653      	mov	r3, sl
 8005db0:	463a      	mov	r2, r7
 8005db2:	4621      	mov	r1, r4
 8005db4:	4630      	mov	r0, r6
 8005db6:	f7ff ffbf 	bl	8005d38 <__sfputs_r>
 8005dba:	3001      	adds	r0, #1
 8005dbc:	f000 80c4 	beq.w	8005f48 <_vfiprintf_r+0x1ec>
 8005dc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005dc2:	4453      	add	r3, sl
 8005dc4:	9309      	str	r3, [sp, #36]	; 0x24
 8005dc6:	f898 3000 	ldrb.w	r3, [r8]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	f000 80bc 	beq.w	8005f48 <_vfiprintf_r+0x1ec>
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	f04f 32ff 	mov.w	r2, #4294967295
 8005dd6:	9304      	str	r3, [sp, #16]
 8005dd8:	9307      	str	r3, [sp, #28]
 8005dda:	9205      	str	r2, [sp, #20]
 8005ddc:	9306      	str	r3, [sp, #24]
 8005dde:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005de2:	931a      	str	r3, [sp, #104]	; 0x68
 8005de4:	2205      	movs	r2, #5
 8005de6:	7829      	ldrb	r1, [r5, #0]
 8005de8:	4860      	ldr	r0, [pc, #384]	; (8005f6c <_vfiprintf_r+0x210>)
 8005dea:	f7fa fa81 	bl	80002f0 <memchr>
 8005dee:	f105 0801 	add.w	r8, r5, #1
 8005df2:	9b04      	ldr	r3, [sp, #16]
 8005df4:	2800      	cmp	r0, #0
 8005df6:	d131      	bne.n	8005e5c <_vfiprintf_r+0x100>
 8005df8:	06d9      	lsls	r1, r3, #27
 8005dfa:	bf44      	itt	mi
 8005dfc:	2220      	movmi	r2, #32
 8005dfe:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005e02:	071a      	lsls	r2, r3, #28
 8005e04:	bf44      	itt	mi
 8005e06:	222b      	movmi	r2, #43	; 0x2b
 8005e08:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005e0c:	782a      	ldrb	r2, [r5, #0]
 8005e0e:	2a2a      	cmp	r2, #42	; 0x2a
 8005e10:	d02c      	beq.n	8005e6c <_vfiprintf_r+0x110>
 8005e12:	9a07      	ldr	r2, [sp, #28]
 8005e14:	2100      	movs	r1, #0
 8005e16:	200a      	movs	r0, #10
 8005e18:	46a8      	mov	r8, r5
 8005e1a:	3501      	adds	r5, #1
 8005e1c:	f898 3000 	ldrb.w	r3, [r8]
 8005e20:	3b30      	subs	r3, #48	; 0x30
 8005e22:	2b09      	cmp	r3, #9
 8005e24:	d96d      	bls.n	8005f02 <_vfiprintf_r+0x1a6>
 8005e26:	b371      	cbz	r1, 8005e86 <_vfiprintf_r+0x12a>
 8005e28:	e026      	b.n	8005e78 <_vfiprintf_r+0x11c>
 8005e2a:	4b51      	ldr	r3, [pc, #324]	; (8005f70 <_vfiprintf_r+0x214>)
 8005e2c:	429c      	cmp	r4, r3
 8005e2e:	d101      	bne.n	8005e34 <_vfiprintf_r+0xd8>
 8005e30:	68b4      	ldr	r4, [r6, #8]
 8005e32:	e7a3      	b.n	8005d7c <_vfiprintf_r+0x20>
 8005e34:	4b4f      	ldr	r3, [pc, #316]	; (8005f74 <_vfiprintf_r+0x218>)
 8005e36:	429c      	cmp	r4, r3
 8005e38:	bf08      	it	eq
 8005e3a:	68f4      	ldreq	r4, [r6, #12]
 8005e3c:	e79e      	b.n	8005d7c <_vfiprintf_r+0x20>
 8005e3e:	4621      	mov	r1, r4
 8005e40:	4630      	mov	r0, r6
 8005e42:	f000 faef 	bl	8006424 <__swsetup_r>
 8005e46:	2800      	cmp	r0, #0
 8005e48:	d09e      	beq.n	8005d88 <_vfiprintf_r+0x2c>
 8005e4a:	f04f 30ff 	mov.w	r0, #4294967295
 8005e4e:	b01d      	add	sp, #116	; 0x74
 8005e50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e54:	2b25      	cmp	r3, #37	; 0x25
 8005e56:	d0a7      	beq.n	8005da8 <_vfiprintf_r+0x4c>
 8005e58:	46a8      	mov	r8, r5
 8005e5a:	e7a0      	b.n	8005d9e <_vfiprintf_r+0x42>
 8005e5c:	4a43      	ldr	r2, [pc, #268]	; (8005f6c <_vfiprintf_r+0x210>)
 8005e5e:	1a80      	subs	r0, r0, r2
 8005e60:	fa0b f000 	lsl.w	r0, fp, r0
 8005e64:	4318      	orrs	r0, r3
 8005e66:	9004      	str	r0, [sp, #16]
 8005e68:	4645      	mov	r5, r8
 8005e6a:	e7bb      	b.n	8005de4 <_vfiprintf_r+0x88>
 8005e6c:	9a03      	ldr	r2, [sp, #12]
 8005e6e:	1d11      	adds	r1, r2, #4
 8005e70:	6812      	ldr	r2, [r2, #0]
 8005e72:	9103      	str	r1, [sp, #12]
 8005e74:	2a00      	cmp	r2, #0
 8005e76:	db01      	blt.n	8005e7c <_vfiprintf_r+0x120>
 8005e78:	9207      	str	r2, [sp, #28]
 8005e7a:	e004      	b.n	8005e86 <_vfiprintf_r+0x12a>
 8005e7c:	4252      	negs	r2, r2
 8005e7e:	f043 0302 	orr.w	r3, r3, #2
 8005e82:	9207      	str	r2, [sp, #28]
 8005e84:	9304      	str	r3, [sp, #16]
 8005e86:	f898 3000 	ldrb.w	r3, [r8]
 8005e8a:	2b2e      	cmp	r3, #46	; 0x2e
 8005e8c:	d110      	bne.n	8005eb0 <_vfiprintf_r+0x154>
 8005e8e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8005e92:	2b2a      	cmp	r3, #42	; 0x2a
 8005e94:	f108 0101 	add.w	r1, r8, #1
 8005e98:	d137      	bne.n	8005f0a <_vfiprintf_r+0x1ae>
 8005e9a:	9b03      	ldr	r3, [sp, #12]
 8005e9c:	1d1a      	adds	r2, r3, #4
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	9203      	str	r2, [sp, #12]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	bfb8      	it	lt
 8005ea6:	f04f 33ff 	movlt.w	r3, #4294967295
 8005eaa:	f108 0802 	add.w	r8, r8, #2
 8005eae:	9305      	str	r3, [sp, #20]
 8005eb0:	4d31      	ldr	r5, [pc, #196]	; (8005f78 <_vfiprintf_r+0x21c>)
 8005eb2:	f898 1000 	ldrb.w	r1, [r8]
 8005eb6:	2203      	movs	r2, #3
 8005eb8:	4628      	mov	r0, r5
 8005eba:	f7fa fa19 	bl	80002f0 <memchr>
 8005ebe:	b140      	cbz	r0, 8005ed2 <_vfiprintf_r+0x176>
 8005ec0:	2340      	movs	r3, #64	; 0x40
 8005ec2:	1b40      	subs	r0, r0, r5
 8005ec4:	fa03 f000 	lsl.w	r0, r3, r0
 8005ec8:	9b04      	ldr	r3, [sp, #16]
 8005eca:	4303      	orrs	r3, r0
 8005ecc:	9304      	str	r3, [sp, #16]
 8005ece:	f108 0801 	add.w	r8, r8, #1
 8005ed2:	f898 1000 	ldrb.w	r1, [r8]
 8005ed6:	4829      	ldr	r0, [pc, #164]	; (8005f7c <_vfiprintf_r+0x220>)
 8005ed8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005edc:	2206      	movs	r2, #6
 8005ede:	f108 0701 	add.w	r7, r8, #1
 8005ee2:	f7fa fa05 	bl	80002f0 <memchr>
 8005ee6:	2800      	cmp	r0, #0
 8005ee8:	d034      	beq.n	8005f54 <_vfiprintf_r+0x1f8>
 8005eea:	4b25      	ldr	r3, [pc, #148]	; (8005f80 <_vfiprintf_r+0x224>)
 8005eec:	bb03      	cbnz	r3, 8005f30 <_vfiprintf_r+0x1d4>
 8005eee:	9b03      	ldr	r3, [sp, #12]
 8005ef0:	3307      	adds	r3, #7
 8005ef2:	f023 0307 	bic.w	r3, r3, #7
 8005ef6:	3308      	adds	r3, #8
 8005ef8:	9303      	str	r3, [sp, #12]
 8005efa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005efc:	444b      	add	r3, r9
 8005efe:	9309      	str	r3, [sp, #36]	; 0x24
 8005f00:	e74c      	b.n	8005d9c <_vfiprintf_r+0x40>
 8005f02:	fb00 3202 	mla	r2, r0, r2, r3
 8005f06:	2101      	movs	r1, #1
 8005f08:	e786      	b.n	8005e18 <_vfiprintf_r+0xbc>
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	9305      	str	r3, [sp, #20]
 8005f0e:	4618      	mov	r0, r3
 8005f10:	250a      	movs	r5, #10
 8005f12:	4688      	mov	r8, r1
 8005f14:	3101      	adds	r1, #1
 8005f16:	f898 2000 	ldrb.w	r2, [r8]
 8005f1a:	3a30      	subs	r2, #48	; 0x30
 8005f1c:	2a09      	cmp	r2, #9
 8005f1e:	d903      	bls.n	8005f28 <_vfiprintf_r+0x1cc>
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d0c5      	beq.n	8005eb0 <_vfiprintf_r+0x154>
 8005f24:	9005      	str	r0, [sp, #20]
 8005f26:	e7c3      	b.n	8005eb0 <_vfiprintf_r+0x154>
 8005f28:	fb05 2000 	mla	r0, r5, r0, r2
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	e7f0      	b.n	8005f12 <_vfiprintf_r+0x1b6>
 8005f30:	ab03      	add	r3, sp, #12
 8005f32:	9300      	str	r3, [sp, #0]
 8005f34:	4622      	mov	r2, r4
 8005f36:	4b13      	ldr	r3, [pc, #76]	; (8005f84 <_vfiprintf_r+0x228>)
 8005f38:	a904      	add	r1, sp, #16
 8005f3a:	4630      	mov	r0, r6
 8005f3c:	f3af 8000 	nop.w
 8005f40:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005f44:	4681      	mov	r9, r0
 8005f46:	d1d8      	bne.n	8005efa <_vfiprintf_r+0x19e>
 8005f48:	89a3      	ldrh	r3, [r4, #12]
 8005f4a:	065b      	lsls	r3, r3, #25
 8005f4c:	f53f af7d 	bmi.w	8005e4a <_vfiprintf_r+0xee>
 8005f50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005f52:	e77c      	b.n	8005e4e <_vfiprintf_r+0xf2>
 8005f54:	ab03      	add	r3, sp, #12
 8005f56:	9300      	str	r3, [sp, #0]
 8005f58:	4622      	mov	r2, r4
 8005f5a:	4b0a      	ldr	r3, [pc, #40]	; (8005f84 <_vfiprintf_r+0x228>)
 8005f5c:	a904      	add	r1, sp, #16
 8005f5e:	4630      	mov	r0, r6
 8005f60:	f000 f888 	bl	8006074 <_printf_i>
 8005f64:	e7ec      	b.n	8005f40 <_vfiprintf_r+0x1e4>
 8005f66:	bf00      	nop
 8005f68:	08006e10 	.word	0x08006e10
 8005f6c:	08006e50 	.word	0x08006e50
 8005f70:	08006e30 	.word	0x08006e30
 8005f74:	08006df0 	.word	0x08006df0
 8005f78:	08006e56 	.word	0x08006e56
 8005f7c:	08006e5a 	.word	0x08006e5a
 8005f80:	00000000 	.word	0x00000000
 8005f84:	08005d39 	.word	0x08005d39

08005f88 <_printf_common>:
 8005f88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f8c:	4691      	mov	r9, r2
 8005f8e:	461f      	mov	r7, r3
 8005f90:	688a      	ldr	r2, [r1, #8]
 8005f92:	690b      	ldr	r3, [r1, #16]
 8005f94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	bfb8      	it	lt
 8005f9c:	4613      	movlt	r3, r2
 8005f9e:	f8c9 3000 	str.w	r3, [r9]
 8005fa2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005fa6:	4606      	mov	r6, r0
 8005fa8:	460c      	mov	r4, r1
 8005faa:	b112      	cbz	r2, 8005fb2 <_printf_common+0x2a>
 8005fac:	3301      	adds	r3, #1
 8005fae:	f8c9 3000 	str.w	r3, [r9]
 8005fb2:	6823      	ldr	r3, [r4, #0]
 8005fb4:	0699      	lsls	r1, r3, #26
 8005fb6:	bf42      	ittt	mi
 8005fb8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005fbc:	3302      	addmi	r3, #2
 8005fbe:	f8c9 3000 	strmi.w	r3, [r9]
 8005fc2:	6825      	ldr	r5, [r4, #0]
 8005fc4:	f015 0506 	ands.w	r5, r5, #6
 8005fc8:	d107      	bne.n	8005fda <_printf_common+0x52>
 8005fca:	f104 0a19 	add.w	sl, r4, #25
 8005fce:	68e3      	ldr	r3, [r4, #12]
 8005fd0:	f8d9 2000 	ldr.w	r2, [r9]
 8005fd4:	1a9b      	subs	r3, r3, r2
 8005fd6:	429d      	cmp	r5, r3
 8005fd8:	db29      	blt.n	800602e <_printf_common+0xa6>
 8005fda:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005fde:	6822      	ldr	r2, [r4, #0]
 8005fe0:	3300      	adds	r3, #0
 8005fe2:	bf18      	it	ne
 8005fe4:	2301      	movne	r3, #1
 8005fe6:	0692      	lsls	r2, r2, #26
 8005fe8:	d42e      	bmi.n	8006048 <_printf_common+0xc0>
 8005fea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005fee:	4639      	mov	r1, r7
 8005ff0:	4630      	mov	r0, r6
 8005ff2:	47c0      	blx	r8
 8005ff4:	3001      	adds	r0, #1
 8005ff6:	d021      	beq.n	800603c <_printf_common+0xb4>
 8005ff8:	6823      	ldr	r3, [r4, #0]
 8005ffa:	68e5      	ldr	r5, [r4, #12]
 8005ffc:	f8d9 2000 	ldr.w	r2, [r9]
 8006000:	f003 0306 	and.w	r3, r3, #6
 8006004:	2b04      	cmp	r3, #4
 8006006:	bf08      	it	eq
 8006008:	1aad      	subeq	r5, r5, r2
 800600a:	68a3      	ldr	r3, [r4, #8]
 800600c:	6922      	ldr	r2, [r4, #16]
 800600e:	bf0c      	ite	eq
 8006010:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006014:	2500      	movne	r5, #0
 8006016:	4293      	cmp	r3, r2
 8006018:	bfc4      	itt	gt
 800601a:	1a9b      	subgt	r3, r3, r2
 800601c:	18ed      	addgt	r5, r5, r3
 800601e:	f04f 0900 	mov.w	r9, #0
 8006022:	341a      	adds	r4, #26
 8006024:	454d      	cmp	r5, r9
 8006026:	d11b      	bne.n	8006060 <_printf_common+0xd8>
 8006028:	2000      	movs	r0, #0
 800602a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800602e:	2301      	movs	r3, #1
 8006030:	4652      	mov	r2, sl
 8006032:	4639      	mov	r1, r7
 8006034:	4630      	mov	r0, r6
 8006036:	47c0      	blx	r8
 8006038:	3001      	adds	r0, #1
 800603a:	d103      	bne.n	8006044 <_printf_common+0xbc>
 800603c:	f04f 30ff 	mov.w	r0, #4294967295
 8006040:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006044:	3501      	adds	r5, #1
 8006046:	e7c2      	b.n	8005fce <_printf_common+0x46>
 8006048:	18e1      	adds	r1, r4, r3
 800604a:	1c5a      	adds	r2, r3, #1
 800604c:	2030      	movs	r0, #48	; 0x30
 800604e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006052:	4422      	add	r2, r4
 8006054:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006058:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800605c:	3302      	adds	r3, #2
 800605e:	e7c4      	b.n	8005fea <_printf_common+0x62>
 8006060:	2301      	movs	r3, #1
 8006062:	4622      	mov	r2, r4
 8006064:	4639      	mov	r1, r7
 8006066:	4630      	mov	r0, r6
 8006068:	47c0      	blx	r8
 800606a:	3001      	adds	r0, #1
 800606c:	d0e6      	beq.n	800603c <_printf_common+0xb4>
 800606e:	f109 0901 	add.w	r9, r9, #1
 8006072:	e7d7      	b.n	8006024 <_printf_common+0x9c>

08006074 <_printf_i>:
 8006074:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006078:	4617      	mov	r7, r2
 800607a:	7e0a      	ldrb	r2, [r1, #24]
 800607c:	b085      	sub	sp, #20
 800607e:	2a6e      	cmp	r2, #110	; 0x6e
 8006080:	4698      	mov	r8, r3
 8006082:	4606      	mov	r6, r0
 8006084:	460c      	mov	r4, r1
 8006086:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006088:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 800608c:	f000 80bc 	beq.w	8006208 <_printf_i+0x194>
 8006090:	d81a      	bhi.n	80060c8 <_printf_i+0x54>
 8006092:	2a63      	cmp	r2, #99	; 0x63
 8006094:	d02e      	beq.n	80060f4 <_printf_i+0x80>
 8006096:	d80a      	bhi.n	80060ae <_printf_i+0x3a>
 8006098:	2a00      	cmp	r2, #0
 800609a:	f000 80c8 	beq.w	800622e <_printf_i+0x1ba>
 800609e:	2a58      	cmp	r2, #88	; 0x58
 80060a0:	f000 808a 	beq.w	80061b8 <_printf_i+0x144>
 80060a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80060a8:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80060ac:	e02a      	b.n	8006104 <_printf_i+0x90>
 80060ae:	2a64      	cmp	r2, #100	; 0x64
 80060b0:	d001      	beq.n	80060b6 <_printf_i+0x42>
 80060b2:	2a69      	cmp	r2, #105	; 0x69
 80060b4:	d1f6      	bne.n	80060a4 <_printf_i+0x30>
 80060b6:	6821      	ldr	r1, [r4, #0]
 80060b8:	681a      	ldr	r2, [r3, #0]
 80060ba:	f011 0f80 	tst.w	r1, #128	; 0x80
 80060be:	d023      	beq.n	8006108 <_printf_i+0x94>
 80060c0:	1d11      	adds	r1, r2, #4
 80060c2:	6019      	str	r1, [r3, #0]
 80060c4:	6813      	ldr	r3, [r2, #0]
 80060c6:	e027      	b.n	8006118 <_printf_i+0xa4>
 80060c8:	2a73      	cmp	r2, #115	; 0x73
 80060ca:	f000 80b4 	beq.w	8006236 <_printf_i+0x1c2>
 80060ce:	d808      	bhi.n	80060e2 <_printf_i+0x6e>
 80060d0:	2a6f      	cmp	r2, #111	; 0x6f
 80060d2:	d02a      	beq.n	800612a <_printf_i+0xb6>
 80060d4:	2a70      	cmp	r2, #112	; 0x70
 80060d6:	d1e5      	bne.n	80060a4 <_printf_i+0x30>
 80060d8:	680a      	ldr	r2, [r1, #0]
 80060da:	f042 0220 	orr.w	r2, r2, #32
 80060de:	600a      	str	r2, [r1, #0]
 80060e0:	e003      	b.n	80060ea <_printf_i+0x76>
 80060e2:	2a75      	cmp	r2, #117	; 0x75
 80060e4:	d021      	beq.n	800612a <_printf_i+0xb6>
 80060e6:	2a78      	cmp	r2, #120	; 0x78
 80060e8:	d1dc      	bne.n	80060a4 <_printf_i+0x30>
 80060ea:	2278      	movs	r2, #120	; 0x78
 80060ec:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80060f0:	496e      	ldr	r1, [pc, #440]	; (80062ac <_printf_i+0x238>)
 80060f2:	e064      	b.n	80061be <_printf_i+0x14a>
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80060fa:	1d11      	adds	r1, r2, #4
 80060fc:	6019      	str	r1, [r3, #0]
 80060fe:	6813      	ldr	r3, [r2, #0]
 8006100:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006104:	2301      	movs	r3, #1
 8006106:	e0a3      	b.n	8006250 <_printf_i+0x1dc>
 8006108:	f011 0f40 	tst.w	r1, #64	; 0x40
 800610c:	f102 0104 	add.w	r1, r2, #4
 8006110:	6019      	str	r1, [r3, #0]
 8006112:	d0d7      	beq.n	80060c4 <_printf_i+0x50>
 8006114:	f9b2 3000 	ldrsh.w	r3, [r2]
 8006118:	2b00      	cmp	r3, #0
 800611a:	da03      	bge.n	8006124 <_printf_i+0xb0>
 800611c:	222d      	movs	r2, #45	; 0x2d
 800611e:	425b      	negs	r3, r3
 8006120:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006124:	4962      	ldr	r1, [pc, #392]	; (80062b0 <_printf_i+0x23c>)
 8006126:	220a      	movs	r2, #10
 8006128:	e017      	b.n	800615a <_printf_i+0xe6>
 800612a:	6820      	ldr	r0, [r4, #0]
 800612c:	6819      	ldr	r1, [r3, #0]
 800612e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8006132:	d003      	beq.n	800613c <_printf_i+0xc8>
 8006134:	1d08      	adds	r0, r1, #4
 8006136:	6018      	str	r0, [r3, #0]
 8006138:	680b      	ldr	r3, [r1, #0]
 800613a:	e006      	b.n	800614a <_printf_i+0xd6>
 800613c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006140:	f101 0004 	add.w	r0, r1, #4
 8006144:	6018      	str	r0, [r3, #0]
 8006146:	d0f7      	beq.n	8006138 <_printf_i+0xc4>
 8006148:	880b      	ldrh	r3, [r1, #0]
 800614a:	4959      	ldr	r1, [pc, #356]	; (80062b0 <_printf_i+0x23c>)
 800614c:	2a6f      	cmp	r2, #111	; 0x6f
 800614e:	bf14      	ite	ne
 8006150:	220a      	movne	r2, #10
 8006152:	2208      	moveq	r2, #8
 8006154:	2000      	movs	r0, #0
 8006156:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800615a:	6865      	ldr	r5, [r4, #4]
 800615c:	60a5      	str	r5, [r4, #8]
 800615e:	2d00      	cmp	r5, #0
 8006160:	f2c0 809c 	blt.w	800629c <_printf_i+0x228>
 8006164:	6820      	ldr	r0, [r4, #0]
 8006166:	f020 0004 	bic.w	r0, r0, #4
 800616a:	6020      	str	r0, [r4, #0]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d13f      	bne.n	80061f0 <_printf_i+0x17c>
 8006170:	2d00      	cmp	r5, #0
 8006172:	f040 8095 	bne.w	80062a0 <_printf_i+0x22c>
 8006176:	4675      	mov	r5, lr
 8006178:	2a08      	cmp	r2, #8
 800617a:	d10b      	bne.n	8006194 <_printf_i+0x120>
 800617c:	6823      	ldr	r3, [r4, #0]
 800617e:	07da      	lsls	r2, r3, #31
 8006180:	d508      	bpl.n	8006194 <_printf_i+0x120>
 8006182:	6923      	ldr	r3, [r4, #16]
 8006184:	6862      	ldr	r2, [r4, #4]
 8006186:	429a      	cmp	r2, r3
 8006188:	bfde      	ittt	le
 800618a:	2330      	movle	r3, #48	; 0x30
 800618c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006190:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006194:	ebae 0305 	sub.w	r3, lr, r5
 8006198:	6123      	str	r3, [r4, #16]
 800619a:	f8cd 8000 	str.w	r8, [sp]
 800619e:	463b      	mov	r3, r7
 80061a0:	aa03      	add	r2, sp, #12
 80061a2:	4621      	mov	r1, r4
 80061a4:	4630      	mov	r0, r6
 80061a6:	f7ff feef 	bl	8005f88 <_printf_common>
 80061aa:	3001      	adds	r0, #1
 80061ac:	d155      	bne.n	800625a <_printf_i+0x1e6>
 80061ae:	f04f 30ff 	mov.w	r0, #4294967295
 80061b2:	b005      	add	sp, #20
 80061b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80061b8:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80061bc:	493c      	ldr	r1, [pc, #240]	; (80062b0 <_printf_i+0x23c>)
 80061be:	6822      	ldr	r2, [r4, #0]
 80061c0:	6818      	ldr	r0, [r3, #0]
 80061c2:	f012 0f80 	tst.w	r2, #128	; 0x80
 80061c6:	f100 0504 	add.w	r5, r0, #4
 80061ca:	601d      	str	r5, [r3, #0]
 80061cc:	d001      	beq.n	80061d2 <_printf_i+0x15e>
 80061ce:	6803      	ldr	r3, [r0, #0]
 80061d0:	e002      	b.n	80061d8 <_printf_i+0x164>
 80061d2:	0655      	lsls	r5, r2, #25
 80061d4:	d5fb      	bpl.n	80061ce <_printf_i+0x15a>
 80061d6:	8803      	ldrh	r3, [r0, #0]
 80061d8:	07d0      	lsls	r0, r2, #31
 80061da:	bf44      	itt	mi
 80061dc:	f042 0220 	orrmi.w	r2, r2, #32
 80061e0:	6022      	strmi	r2, [r4, #0]
 80061e2:	b91b      	cbnz	r3, 80061ec <_printf_i+0x178>
 80061e4:	6822      	ldr	r2, [r4, #0]
 80061e6:	f022 0220 	bic.w	r2, r2, #32
 80061ea:	6022      	str	r2, [r4, #0]
 80061ec:	2210      	movs	r2, #16
 80061ee:	e7b1      	b.n	8006154 <_printf_i+0xe0>
 80061f0:	4675      	mov	r5, lr
 80061f2:	fbb3 f0f2 	udiv	r0, r3, r2
 80061f6:	fb02 3310 	mls	r3, r2, r0, r3
 80061fa:	5ccb      	ldrb	r3, [r1, r3]
 80061fc:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006200:	4603      	mov	r3, r0
 8006202:	2800      	cmp	r0, #0
 8006204:	d1f5      	bne.n	80061f2 <_printf_i+0x17e>
 8006206:	e7b7      	b.n	8006178 <_printf_i+0x104>
 8006208:	6808      	ldr	r0, [r1, #0]
 800620a:	681a      	ldr	r2, [r3, #0]
 800620c:	6949      	ldr	r1, [r1, #20]
 800620e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8006212:	d004      	beq.n	800621e <_printf_i+0x1aa>
 8006214:	1d10      	adds	r0, r2, #4
 8006216:	6018      	str	r0, [r3, #0]
 8006218:	6813      	ldr	r3, [r2, #0]
 800621a:	6019      	str	r1, [r3, #0]
 800621c:	e007      	b.n	800622e <_printf_i+0x1ba>
 800621e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006222:	f102 0004 	add.w	r0, r2, #4
 8006226:	6018      	str	r0, [r3, #0]
 8006228:	6813      	ldr	r3, [r2, #0]
 800622a:	d0f6      	beq.n	800621a <_printf_i+0x1a6>
 800622c:	8019      	strh	r1, [r3, #0]
 800622e:	2300      	movs	r3, #0
 8006230:	6123      	str	r3, [r4, #16]
 8006232:	4675      	mov	r5, lr
 8006234:	e7b1      	b.n	800619a <_printf_i+0x126>
 8006236:	681a      	ldr	r2, [r3, #0]
 8006238:	1d11      	adds	r1, r2, #4
 800623a:	6019      	str	r1, [r3, #0]
 800623c:	6815      	ldr	r5, [r2, #0]
 800623e:	6862      	ldr	r2, [r4, #4]
 8006240:	2100      	movs	r1, #0
 8006242:	4628      	mov	r0, r5
 8006244:	f7fa f854 	bl	80002f0 <memchr>
 8006248:	b108      	cbz	r0, 800624e <_printf_i+0x1da>
 800624a:	1b40      	subs	r0, r0, r5
 800624c:	6060      	str	r0, [r4, #4]
 800624e:	6863      	ldr	r3, [r4, #4]
 8006250:	6123      	str	r3, [r4, #16]
 8006252:	2300      	movs	r3, #0
 8006254:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006258:	e79f      	b.n	800619a <_printf_i+0x126>
 800625a:	6923      	ldr	r3, [r4, #16]
 800625c:	462a      	mov	r2, r5
 800625e:	4639      	mov	r1, r7
 8006260:	4630      	mov	r0, r6
 8006262:	47c0      	blx	r8
 8006264:	3001      	adds	r0, #1
 8006266:	d0a2      	beq.n	80061ae <_printf_i+0x13a>
 8006268:	6823      	ldr	r3, [r4, #0]
 800626a:	079b      	lsls	r3, r3, #30
 800626c:	d507      	bpl.n	800627e <_printf_i+0x20a>
 800626e:	2500      	movs	r5, #0
 8006270:	f104 0919 	add.w	r9, r4, #25
 8006274:	68e3      	ldr	r3, [r4, #12]
 8006276:	9a03      	ldr	r2, [sp, #12]
 8006278:	1a9b      	subs	r3, r3, r2
 800627a:	429d      	cmp	r5, r3
 800627c:	db05      	blt.n	800628a <_printf_i+0x216>
 800627e:	68e0      	ldr	r0, [r4, #12]
 8006280:	9b03      	ldr	r3, [sp, #12]
 8006282:	4298      	cmp	r0, r3
 8006284:	bfb8      	it	lt
 8006286:	4618      	movlt	r0, r3
 8006288:	e793      	b.n	80061b2 <_printf_i+0x13e>
 800628a:	2301      	movs	r3, #1
 800628c:	464a      	mov	r2, r9
 800628e:	4639      	mov	r1, r7
 8006290:	4630      	mov	r0, r6
 8006292:	47c0      	blx	r8
 8006294:	3001      	adds	r0, #1
 8006296:	d08a      	beq.n	80061ae <_printf_i+0x13a>
 8006298:	3501      	adds	r5, #1
 800629a:	e7eb      	b.n	8006274 <_printf_i+0x200>
 800629c:	2b00      	cmp	r3, #0
 800629e:	d1a7      	bne.n	80061f0 <_printf_i+0x17c>
 80062a0:	780b      	ldrb	r3, [r1, #0]
 80062a2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80062a6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80062aa:	e765      	b.n	8006178 <_printf_i+0x104>
 80062ac:	08006e72 	.word	0x08006e72
 80062b0:	08006e61 	.word	0x08006e61

080062b4 <_sbrk_r>:
 80062b4:	b538      	push	{r3, r4, r5, lr}
 80062b6:	4c06      	ldr	r4, [pc, #24]	; (80062d0 <_sbrk_r+0x1c>)
 80062b8:	2300      	movs	r3, #0
 80062ba:	4605      	mov	r5, r0
 80062bc:	4608      	mov	r0, r1
 80062be:	6023      	str	r3, [r4, #0]
 80062c0:	f7ff f8f4 	bl	80054ac <_sbrk>
 80062c4:	1c43      	adds	r3, r0, #1
 80062c6:	d102      	bne.n	80062ce <_sbrk_r+0x1a>
 80062c8:	6823      	ldr	r3, [r4, #0]
 80062ca:	b103      	cbz	r3, 80062ce <_sbrk_r+0x1a>
 80062cc:	602b      	str	r3, [r5, #0]
 80062ce:	bd38      	pop	{r3, r4, r5, pc}
 80062d0:	200007cc 	.word	0x200007cc

080062d4 <__sread>:
 80062d4:	b510      	push	{r4, lr}
 80062d6:	460c      	mov	r4, r1
 80062d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062dc:	f000 fad8 	bl	8006890 <_read_r>
 80062e0:	2800      	cmp	r0, #0
 80062e2:	bfab      	itete	ge
 80062e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80062e6:	89a3      	ldrhlt	r3, [r4, #12]
 80062e8:	181b      	addge	r3, r3, r0
 80062ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80062ee:	bfac      	ite	ge
 80062f0:	6563      	strge	r3, [r4, #84]	; 0x54
 80062f2:	81a3      	strhlt	r3, [r4, #12]
 80062f4:	bd10      	pop	{r4, pc}

080062f6 <__swrite>:
 80062f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062fa:	461f      	mov	r7, r3
 80062fc:	898b      	ldrh	r3, [r1, #12]
 80062fe:	05db      	lsls	r3, r3, #23
 8006300:	4605      	mov	r5, r0
 8006302:	460c      	mov	r4, r1
 8006304:	4616      	mov	r6, r2
 8006306:	d505      	bpl.n	8006314 <__swrite+0x1e>
 8006308:	2302      	movs	r3, #2
 800630a:	2200      	movs	r2, #0
 800630c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006310:	f000 f9b8 	bl	8006684 <_lseek_r>
 8006314:	89a3      	ldrh	r3, [r4, #12]
 8006316:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800631a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800631e:	81a3      	strh	r3, [r4, #12]
 8006320:	4632      	mov	r2, r6
 8006322:	463b      	mov	r3, r7
 8006324:	4628      	mov	r0, r5
 8006326:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800632a:	f000 b869 	b.w	8006400 <_write_r>

0800632e <__sseek>:
 800632e:	b510      	push	{r4, lr}
 8006330:	460c      	mov	r4, r1
 8006332:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006336:	f000 f9a5 	bl	8006684 <_lseek_r>
 800633a:	1c43      	adds	r3, r0, #1
 800633c:	89a3      	ldrh	r3, [r4, #12]
 800633e:	bf15      	itete	ne
 8006340:	6560      	strne	r0, [r4, #84]	; 0x54
 8006342:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006346:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800634a:	81a3      	strheq	r3, [r4, #12]
 800634c:	bf18      	it	ne
 800634e:	81a3      	strhne	r3, [r4, #12]
 8006350:	bd10      	pop	{r4, pc}

08006352 <__sclose>:
 8006352:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006356:	f000 b8d3 	b.w	8006500 <_close_r>
	...

0800635c <__swbuf_r>:
 800635c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800635e:	460e      	mov	r6, r1
 8006360:	4614      	mov	r4, r2
 8006362:	4605      	mov	r5, r0
 8006364:	b118      	cbz	r0, 800636e <__swbuf_r+0x12>
 8006366:	6983      	ldr	r3, [r0, #24]
 8006368:	b90b      	cbnz	r3, 800636e <__swbuf_r+0x12>
 800636a:	f7ff fa95 	bl	8005898 <__sinit>
 800636e:	4b21      	ldr	r3, [pc, #132]	; (80063f4 <__swbuf_r+0x98>)
 8006370:	429c      	cmp	r4, r3
 8006372:	d12a      	bne.n	80063ca <__swbuf_r+0x6e>
 8006374:	686c      	ldr	r4, [r5, #4]
 8006376:	69a3      	ldr	r3, [r4, #24]
 8006378:	60a3      	str	r3, [r4, #8]
 800637a:	89a3      	ldrh	r3, [r4, #12]
 800637c:	071a      	lsls	r2, r3, #28
 800637e:	d52e      	bpl.n	80063de <__swbuf_r+0x82>
 8006380:	6923      	ldr	r3, [r4, #16]
 8006382:	b363      	cbz	r3, 80063de <__swbuf_r+0x82>
 8006384:	6923      	ldr	r3, [r4, #16]
 8006386:	6820      	ldr	r0, [r4, #0]
 8006388:	1ac0      	subs	r0, r0, r3
 800638a:	6963      	ldr	r3, [r4, #20]
 800638c:	b2f6      	uxtb	r6, r6
 800638e:	4298      	cmp	r0, r3
 8006390:	4637      	mov	r7, r6
 8006392:	db04      	blt.n	800639e <__swbuf_r+0x42>
 8006394:	4621      	mov	r1, r4
 8006396:	4628      	mov	r0, r5
 8006398:	f000 f94a 	bl	8006630 <_fflush_r>
 800639c:	bb28      	cbnz	r0, 80063ea <__swbuf_r+0x8e>
 800639e:	68a3      	ldr	r3, [r4, #8]
 80063a0:	3b01      	subs	r3, #1
 80063a2:	60a3      	str	r3, [r4, #8]
 80063a4:	6823      	ldr	r3, [r4, #0]
 80063a6:	1c5a      	adds	r2, r3, #1
 80063a8:	6022      	str	r2, [r4, #0]
 80063aa:	701e      	strb	r6, [r3, #0]
 80063ac:	6963      	ldr	r3, [r4, #20]
 80063ae:	3001      	adds	r0, #1
 80063b0:	4298      	cmp	r0, r3
 80063b2:	d004      	beq.n	80063be <__swbuf_r+0x62>
 80063b4:	89a3      	ldrh	r3, [r4, #12]
 80063b6:	07db      	lsls	r3, r3, #31
 80063b8:	d519      	bpl.n	80063ee <__swbuf_r+0x92>
 80063ba:	2e0a      	cmp	r6, #10
 80063bc:	d117      	bne.n	80063ee <__swbuf_r+0x92>
 80063be:	4621      	mov	r1, r4
 80063c0:	4628      	mov	r0, r5
 80063c2:	f000 f935 	bl	8006630 <_fflush_r>
 80063c6:	b190      	cbz	r0, 80063ee <__swbuf_r+0x92>
 80063c8:	e00f      	b.n	80063ea <__swbuf_r+0x8e>
 80063ca:	4b0b      	ldr	r3, [pc, #44]	; (80063f8 <__swbuf_r+0x9c>)
 80063cc:	429c      	cmp	r4, r3
 80063ce:	d101      	bne.n	80063d4 <__swbuf_r+0x78>
 80063d0:	68ac      	ldr	r4, [r5, #8]
 80063d2:	e7d0      	b.n	8006376 <__swbuf_r+0x1a>
 80063d4:	4b09      	ldr	r3, [pc, #36]	; (80063fc <__swbuf_r+0xa0>)
 80063d6:	429c      	cmp	r4, r3
 80063d8:	bf08      	it	eq
 80063da:	68ec      	ldreq	r4, [r5, #12]
 80063dc:	e7cb      	b.n	8006376 <__swbuf_r+0x1a>
 80063de:	4621      	mov	r1, r4
 80063e0:	4628      	mov	r0, r5
 80063e2:	f000 f81f 	bl	8006424 <__swsetup_r>
 80063e6:	2800      	cmp	r0, #0
 80063e8:	d0cc      	beq.n	8006384 <__swbuf_r+0x28>
 80063ea:	f04f 37ff 	mov.w	r7, #4294967295
 80063ee:	4638      	mov	r0, r7
 80063f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80063f2:	bf00      	nop
 80063f4:	08006e10 	.word	0x08006e10
 80063f8:	08006e30 	.word	0x08006e30
 80063fc:	08006df0 	.word	0x08006df0

08006400 <_write_r>:
 8006400:	b538      	push	{r3, r4, r5, lr}
 8006402:	4c07      	ldr	r4, [pc, #28]	; (8006420 <_write_r+0x20>)
 8006404:	4605      	mov	r5, r0
 8006406:	4608      	mov	r0, r1
 8006408:	4611      	mov	r1, r2
 800640a:	2200      	movs	r2, #0
 800640c:	6022      	str	r2, [r4, #0]
 800640e:	461a      	mov	r2, r3
 8006410:	f7ff f83e 	bl	8005490 <_write>
 8006414:	1c43      	adds	r3, r0, #1
 8006416:	d102      	bne.n	800641e <_write_r+0x1e>
 8006418:	6823      	ldr	r3, [r4, #0]
 800641a:	b103      	cbz	r3, 800641e <_write_r+0x1e>
 800641c:	602b      	str	r3, [r5, #0]
 800641e:	bd38      	pop	{r3, r4, r5, pc}
 8006420:	200007cc 	.word	0x200007cc

08006424 <__swsetup_r>:
 8006424:	4b32      	ldr	r3, [pc, #200]	; (80064f0 <__swsetup_r+0xcc>)
 8006426:	b570      	push	{r4, r5, r6, lr}
 8006428:	681d      	ldr	r5, [r3, #0]
 800642a:	4606      	mov	r6, r0
 800642c:	460c      	mov	r4, r1
 800642e:	b125      	cbz	r5, 800643a <__swsetup_r+0x16>
 8006430:	69ab      	ldr	r3, [r5, #24]
 8006432:	b913      	cbnz	r3, 800643a <__swsetup_r+0x16>
 8006434:	4628      	mov	r0, r5
 8006436:	f7ff fa2f 	bl	8005898 <__sinit>
 800643a:	4b2e      	ldr	r3, [pc, #184]	; (80064f4 <__swsetup_r+0xd0>)
 800643c:	429c      	cmp	r4, r3
 800643e:	d10f      	bne.n	8006460 <__swsetup_r+0x3c>
 8006440:	686c      	ldr	r4, [r5, #4]
 8006442:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006446:	b29a      	uxth	r2, r3
 8006448:	0715      	lsls	r5, r2, #28
 800644a:	d42c      	bmi.n	80064a6 <__swsetup_r+0x82>
 800644c:	06d0      	lsls	r0, r2, #27
 800644e:	d411      	bmi.n	8006474 <__swsetup_r+0x50>
 8006450:	2209      	movs	r2, #9
 8006452:	6032      	str	r2, [r6, #0]
 8006454:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006458:	81a3      	strh	r3, [r4, #12]
 800645a:	f04f 30ff 	mov.w	r0, #4294967295
 800645e:	bd70      	pop	{r4, r5, r6, pc}
 8006460:	4b25      	ldr	r3, [pc, #148]	; (80064f8 <__swsetup_r+0xd4>)
 8006462:	429c      	cmp	r4, r3
 8006464:	d101      	bne.n	800646a <__swsetup_r+0x46>
 8006466:	68ac      	ldr	r4, [r5, #8]
 8006468:	e7eb      	b.n	8006442 <__swsetup_r+0x1e>
 800646a:	4b24      	ldr	r3, [pc, #144]	; (80064fc <__swsetup_r+0xd8>)
 800646c:	429c      	cmp	r4, r3
 800646e:	bf08      	it	eq
 8006470:	68ec      	ldreq	r4, [r5, #12]
 8006472:	e7e6      	b.n	8006442 <__swsetup_r+0x1e>
 8006474:	0751      	lsls	r1, r2, #29
 8006476:	d512      	bpl.n	800649e <__swsetup_r+0x7a>
 8006478:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800647a:	b141      	cbz	r1, 800648e <__swsetup_r+0x6a>
 800647c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006480:	4299      	cmp	r1, r3
 8006482:	d002      	beq.n	800648a <__swsetup_r+0x66>
 8006484:	4630      	mov	r0, r6
 8006486:	f000 f98f 	bl	80067a8 <_free_r>
 800648a:	2300      	movs	r3, #0
 800648c:	6363      	str	r3, [r4, #52]	; 0x34
 800648e:	89a3      	ldrh	r3, [r4, #12]
 8006490:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006494:	81a3      	strh	r3, [r4, #12]
 8006496:	2300      	movs	r3, #0
 8006498:	6063      	str	r3, [r4, #4]
 800649a:	6923      	ldr	r3, [r4, #16]
 800649c:	6023      	str	r3, [r4, #0]
 800649e:	89a3      	ldrh	r3, [r4, #12]
 80064a0:	f043 0308 	orr.w	r3, r3, #8
 80064a4:	81a3      	strh	r3, [r4, #12]
 80064a6:	6923      	ldr	r3, [r4, #16]
 80064a8:	b94b      	cbnz	r3, 80064be <__swsetup_r+0x9a>
 80064aa:	89a3      	ldrh	r3, [r4, #12]
 80064ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80064b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064b4:	d003      	beq.n	80064be <__swsetup_r+0x9a>
 80064b6:	4621      	mov	r1, r4
 80064b8:	4630      	mov	r0, r6
 80064ba:	f000 f919 	bl	80066f0 <__smakebuf_r>
 80064be:	89a2      	ldrh	r2, [r4, #12]
 80064c0:	f012 0301 	ands.w	r3, r2, #1
 80064c4:	d00c      	beq.n	80064e0 <__swsetup_r+0xbc>
 80064c6:	2300      	movs	r3, #0
 80064c8:	60a3      	str	r3, [r4, #8]
 80064ca:	6963      	ldr	r3, [r4, #20]
 80064cc:	425b      	negs	r3, r3
 80064ce:	61a3      	str	r3, [r4, #24]
 80064d0:	6923      	ldr	r3, [r4, #16]
 80064d2:	b953      	cbnz	r3, 80064ea <__swsetup_r+0xc6>
 80064d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064d8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80064dc:	d1ba      	bne.n	8006454 <__swsetup_r+0x30>
 80064de:	bd70      	pop	{r4, r5, r6, pc}
 80064e0:	0792      	lsls	r2, r2, #30
 80064e2:	bf58      	it	pl
 80064e4:	6963      	ldrpl	r3, [r4, #20]
 80064e6:	60a3      	str	r3, [r4, #8]
 80064e8:	e7f2      	b.n	80064d0 <__swsetup_r+0xac>
 80064ea:	2000      	movs	r0, #0
 80064ec:	e7f7      	b.n	80064de <__swsetup_r+0xba>
 80064ee:	bf00      	nop
 80064f0:	20000038 	.word	0x20000038
 80064f4:	08006e10 	.word	0x08006e10
 80064f8:	08006e30 	.word	0x08006e30
 80064fc:	08006df0 	.word	0x08006df0

08006500 <_close_r>:
 8006500:	b538      	push	{r3, r4, r5, lr}
 8006502:	4c06      	ldr	r4, [pc, #24]	; (800651c <_close_r+0x1c>)
 8006504:	2300      	movs	r3, #0
 8006506:	4605      	mov	r5, r0
 8006508:	4608      	mov	r0, r1
 800650a:	6023      	str	r3, [r4, #0]
 800650c:	f7fe ffe8 	bl	80054e0 <_close>
 8006510:	1c43      	adds	r3, r0, #1
 8006512:	d102      	bne.n	800651a <_close_r+0x1a>
 8006514:	6823      	ldr	r3, [r4, #0]
 8006516:	b103      	cbz	r3, 800651a <_close_r+0x1a>
 8006518:	602b      	str	r3, [r5, #0]
 800651a:	bd38      	pop	{r3, r4, r5, pc}
 800651c:	200007cc 	.word	0x200007cc

08006520 <__sflush_r>:
 8006520:	898a      	ldrh	r2, [r1, #12]
 8006522:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006526:	4605      	mov	r5, r0
 8006528:	0710      	lsls	r0, r2, #28
 800652a:	460c      	mov	r4, r1
 800652c:	d45a      	bmi.n	80065e4 <__sflush_r+0xc4>
 800652e:	684b      	ldr	r3, [r1, #4]
 8006530:	2b00      	cmp	r3, #0
 8006532:	dc05      	bgt.n	8006540 <__sflush_r+0x20>
 8006534:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006536:	2b00      	cmp	r3, #0
 8006538:	dc02      	bgt.n	8006540 <__sflush_r+0x20>
 800653a:	2000      	movs	r0, #0
 800653c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006540:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006542:	2e00      	cmp	r6, #0
 8006544:	d0f9      	beq.n	800653a <__sflush_r+0x1a>
 8006546:	2300      	movs	r3, #0
 8006548:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800654c:	682f      	ldr	r7, [r5, #0]
 800654e:	602b      	str	r3, [r5, #0]
 8006550:	d033      	beq.n	80065ba <__sflush_r+0x9a>
 8006552:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006554:	89a3      	ldrh	r3, [r4, #12]
 8006556:	075a      	lsls	r2, r3, #29
 8006558:	d505      	bpl.n	8006566 <__sflush_r+0x46>
 800655a:	6863      	ldr	r3, [r4, #4]
 800655c:	1ac0      	subs	r0, r0, r3
 800655e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006560:	b10b      	cbz	r3, 8006566 <__sflush_r+0x46>
 8006562:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006564:	1ac0      	subs	r0, r0, r3
 8006566:	2300      	movs	r3, #0
 8006568:	4602      	mov	r2, r0
 800656a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800656c:	6a21      	ldr	r1, [r4, #32]
 800656e:	4628      	mov	r0, r5
 8006570:	47b0      	blx	r6
 8006572:	1c43      	adds	r3, r0, #1
 8006574:	89a3      	ldrh	r3, [r4, #12]
 8006576:	d106      	bne.n	8006586 <__sflush_r+0x66>
 8006578:	6829      	ldr	r1, [r5, #0]
 800657a:	291d      	cmp	r1, #29
 800657c:	d84b      	bhi.n	8006616 <__sflush_r+0xf6>
 800657e:	4a2b      	ldr	r2, [pc, #172]	; (800662c <__sflush_r+0x10c>)
 8006580:	40ca      	lsrs	r2, r1
 8006582:	07d6      	lsls	r6, r2, #31
 8006584:	d547      	bpl.n	8006616 <__sflush_r+0xf6>
 8006586:	2200      	movs	r2, #0
 8006588:	6062      	str	r2, [r4, #4]
 800658a:	04d9      	lsls	r1, r3, #19
 800658c:	6922      	ldr	r2, [r4, #16]
 800658e:	6022      	str	r2, [r4, #0]
 8006590:	d504      	bpl.n	800659c <__sflush_r+0x7c>
 8006592:	1c42      	adds	r2, r0, #1
 8006594:	d101      	bne.n	800659a <__sflush_r+0x7a>
 8006596:	682b      	ldr	r3, [r5, #0]
 8006598:	b903      	cbnz	r3, 800659c <__sflush_r+0x7c>
 800659a:	6560      	str	r0, [r4, #84]	; 0x54
 800659c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800659e:	602f      	str	r7, [r5, #0]
 80065a0:	2900      	cmp	r1, #0
 80065a2:	d0ca      	beq.n	800653a <__sflush_r+0x1a>
 80065a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80065a8:	4299      	cmp	r1, r3
 80065aa:	d002      	beq.n	80065b2 <__sflush_r+0x92>
 80065ac:	4628      	mov	r0, r5
 80065ae:	f000 f8fb 	bl	80067a8 <_free_r>
 80065b2:	2000      	movs	r0, #0
 80065b4:	6360      	str	r0, [r4, #52]	; 0x34
 80065b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065ba:	6a21      	ldr	r1, [r4, #32]
 80065bc:	2301      	movs	r3, #1
 80065be:	4628      	mov	r0, r5
 80065c0:	47b0      	blx	r6
 80065c2:	1c41      	adds	r1, r0, #1
 80065c4:	d1c6      	bne.n	8006554 <__sflush_r+0x34>
 80065c6:	682b      	ldr	r3, [r5, #0]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d0c3      	beq.n	8006554 <__sflush_r+0x34>
 80065cc:	2b1d      	cmp	r3, #29
 80065ce:	d001      	beq.n	80065d4 <__sflush_r+0xb4>
 80065d0:	2b16      	cmp	r3, #22
 80065d2:	d101      	bne.n	80065d8 <__sflush_r+0xb8>
 80065d4:	602f      	str	r7, [r5, #0]
 80065d6:	e7b0      	b.n	800653a <__sflush_r+0x1a>
 80065d8:	89a3      	ldrh	r3, [r4, #12]
 80065da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065de:	81a3      	strh	r3, [r4, #12]
 80065e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065e4:	690f      	ldr	r7, [r1, #16]
 80065e6:	2f00      	cmp	r7, #0
 80065e8:	d0a7      	beq.n	800653a <__sflush_r+0x1a>
 80065ea:	0793      	lsls	r3, r2, #30
 80065ec:	680e      	ldr	r6, [r1, #0]
 80065ee:	bf08      	it	eq
 80065f0:	694b      	ldreq	r3, [r1, #20]
 80065f2:	600f      	str	r7, [r1, #0]
 80065f4:	bf18      	it	ne
 80065f6:	2300      	movne	r3, #0
 80065f8:	eba6 0807 	sub.w	r8, r6, r7
 80065fc:	608b      	str	r3, [r1, #8]
 80065fe:	f1b8 0f00 	cmp.w	r8, #0
 8006602:	dd9a      	ble.n	800653a <__sflush_r+0x1a>
 8006604:	4643      	mov	r3, r8
 8006606:	463a      	mov	r2, r7
 8006608:	6a21      	ldr	r1, [r4, #32]
 800660a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800660c:	4628      	mov	r0, r5
 800660e:	47b0      	blx	r6
 8006610:	2800      	cmp	r0, #0
 8006612:	dc07      	bgt.n	8006624 <__sflush_r+0x104>
 8006614:	89a3      	ldrh	r3, [r4, #12]
 8006616:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800661a:	81a3      	strh	r3, [r4, #12]
 800661c:	f04f 30ff 	mov.w	r0, #4294967295
 8006620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006624:	4407      	add	r7, r0
 8006626:	eba8 0800 	sub.w	r8, r8, r0
 800662a:	e7e8      	b.n	80065fe <__sflush_r+0xde>
 800662c:	20400001 	.word	0x20400001

08006630 <_fflush_r>:
 8006630:	b538      	push	{r3, r4, r5, lr}
 8006632:	690b      	ldr	r3, [r1, #16]
 8006634:	4605      	mov	r5, r0
 8006636:	460c      	mov	r4, r1
 8006638:	b1db      	cbz	r3, 8006672 <_fflush_r+0x42>
 800663a:	b118      	cbz	r0, 8006644 <_fflush_r+0x14>
 800663c:	6983      	ldr	r3, [r0, #24]
 800663e:	b90b      	cbnz	r3, 8006644 <_fflush_r+0x14>
 8006640:	f7ff f92a 	bl	8005898 <__sinit>
 8006644:	4b0c      	ldr	r3, [pc, #48]	; (8006678 <_fflush_r+0x48>)
 8006646:	429c      	cmp	r4, r3
 8006648:	d109      	bne.n	800665e <_fflush_r+0x2e>
 800664a:	686c      	ldr	r4, [r5, #4]
 800664c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006650:	b17b      	cbz	r3, 8006672 <_fflush_r+0x42>
 8006652:	4621      	mov	r1, r4
 8006654:	4628      	mov	r0, r5
 8006656:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800665a:	f7ff bf61 	b.w	8006520 <__sflush_r>
 800665e:	4b07      	ldr	r3, [pc, #28]	; (800667c <_fflush_r+0x4c>)
 8006660:	429c      	cmp	r4, r3
 8006662:	d101      	bne.n	8006668 <_fflush_r+0x38>
 8006664:	68ac      	ldr	r4, [r5, #8]
 8006666:	e7f1      	b.n	800664c <_fflush_r+0x1c>
 8006668:	4b05      	ldr	r3, [pc, #20]	; (8006680 <_fflush_r+0x50>)
 800666a:	429c      	cmp	r4, r3
 800666c:	bf08      	it	eq
 800666e:	68ec      	ldreq	r4, [r5, #12]
 8006670:	e7ec      	b.n	800664c <_fflush_r+0x1c>
 8006672:	2000      	movs	r0, #0
 8006674:	bd38      	pop	{r3, r4, r5, pc}
 8006676:	bf00      	nop
 8006678:	08006e10 	.word	0x08006e10
 800667c:	08006e30 	.word	0x08006e30
 8006680:	08006df0 	.word	0x08006df0

08006684 <_lseek_r>:
 8006684:	b538      	push	{r3, r4, r5, lr}
 8006686:	4c07      	ldr	r4, [pc, #28]	; (80066a4 <_lseek_r+0x20>)
 8006688:	4605      	mov	r5, r0
 800668a:	4608      	mov	r0, r1
 800668c:	4611      	mov	r1, r2
 800668e:	2200      	movs	r2, #0
 8006690:	6022      	str	r2, [r4, #0]
 8006692:	461a      	mov	r2, r3
 8006694:	f7fe ff2e 	bl	80054f4 <_lseek>
 8006698:	1c43      	adds	r3, r0, #1
 800669a:	d102      	bne.n	80066a2 <_lseek_r+0x1e>
 800669c:	6823      	ldr	r3, [r4, #0]
 800669e:	b103      	cbz	r3, 80066a2 <_lseek_r+0x1e>
 80066a0:	602b      	str	r3, [r5, #0]
 80066a2:	bd38      	pop	{r3, r4, r5, pc}
 80066a4:	200007cc 	.word	0x200007cc

080066a8 <__swhatbuf_r>:
 80066a8:	b570      	push	{r4, r5, r6, lr}
 80066aa:	460e      	mov	r6, r1
 80066ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066b0:	2900      	cmp	r1, #0
 80066b2:	b090      	sub	sp, #64	; 0x40
 80066b4:	4614      	mov	r4, r2
 80066b6:	461d      	mov	r5, r3
 80066b8:	da07      	bge.n	80066ca <__swhatbuf_r+0x22>
 80066ba:	2300      	movs	r3, #0
 80066bc:	602b      	str	r3, [r5, #0]
 80066be:	89b3      	ldrh	r3, [r6, #12]
 80066c0:	061a      	lsls	r2, r3, #24
 80066c2:	d410      	bmi.n	80066e6 <__swhatbuf_r+0x3e>
 80066c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80066c8:	e00e      	b.n	80066e8 <__swhatbuf_r+0x40>
 80066ca:	aa01      	add	r2, sp, #4
 80066cc:	f000 f8f2 	bl	80068b4 <_fstat_r>
 80066d0:	2800      	cmp	r0, #0
 80066d2:	dbf2      	blt.n	80066ba <__swhatbuf_r+0x12>
 80066d4:	9a02      	ldr	r2, [sp, #8]
 80066d6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80066da:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80066de:	425a      	negs	r2, r3
 80066e0:	415a      	adcs	r2, r3
 80066e2:	602a      	str	r2, [r5, #0]
 80066e4:	e7ee      	b.n	80066c4 <__swhatbuf_r+0x1c>
 80066e6:	2340      	movs	r3, #64	; 0x40
 80066e8:	2000      	movs	r0, #0
 80066ea:	6023      	str	r3, [r4, #0]
 80066ec:	b010      	add	sp, #64	; 0x40
 80066ee:	bd70      	pop	{r4, r5, r6, pc}

080066f0 <__smakebuf_r>:
 80066f0:	898b      	ldrh	r3, [r1, #12]
 80066f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80066f4:	079d      	lsls	r5, r3, #30
 80066f6:	4606      	mov	r6, r0
 80066f8:	460c      	mov	r4, r1
 80066fa:	d507      	bpl.n	800670c <__smakebuf_r+0x1c>
 80066fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006700:	6023      	str	r3, [r4, #0]
 8006702:	6123      	str	r3, [r4, #16]
 8006704:	2301      	movs	r3, #1
 8006706:	6163      	str	r3, [r4, #20]
 8006708:	b002      	add	sp, #8
 800670a:	bd70      	pop	{r4, r5, r6, pc}
 800670c:	ab01      	add	r3, sp, #4
 800670e:	466a      	mov	r2, sp
 8006710:	f7ff ffca 	bl	80066a8 <__swhatbuf_r>
 8006714:	9900      	ldr	r1, [sp, #0]
 8006716:	4605      	mov	r5, r0
 8006718:	4630      	mov	r0, r6
 800671a:	f7ff f947 	bl	80059ac <_malloc_r>
 800671e:	b948      	cbnz	r0, 8006734 <__smakebuf_r+0x44>
 8006720:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006724:	059a      	lsls	r2, r3, #22
 8006726:	d4ef      	bmi.n	8006708 <__smakebuf_r+0x18>
 8006728:	f023 0303 	bic.w	r3, r3, #3
 800672c:	f043 0302 	orr.w	r3, r3, #2
 8006730:	81a3      	strh	r3, [r4, #12]
 8006732:	e7e3      	b.n	80066fc <__smakebuf_r+0xc>
 8006734:	4b0d      	ldr	r3, [pc, #52]	; (800676c <__smakebuf_r+0x7c>)
 8006736:	62b3      	str	r3, [r6, #40]	; 0x28
 8006738:	89a3      	ldrh	r3, [r4, #12]
 800673a:	6020      	str	r0, [r4, #0]
 800673c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006740:	81a3      	strh	r3, [r4, #12]
 8006742:	9b00      	ldr	r3, [sp, #0]
 8006744:	6163      	str	r3, [r4, #20]
 8006746:	9b01      	ldr	r3, [sp, #4]
 8006748:	6120      	str	r0, [r4, #16]
 800674a:	b15b      	cbz	r3, 8006764 <__smakebuf_r+0x74>
 800674c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006750:	4630      	mov	r0, r6
 8006752:	f000 f8c1 	bl	80068d8 <_isatty_r>
 8006756:	b128      	cbz	r0, 8006764 <__smakebuf_r+0x74>
 8006758:	89a3      	ldrh	r3, [r4, #12]
 800675a:	f023 0303 	bic.w	r3, r3, #3
 800675e:	f043 0301 	orr.w	r3, r3, #1
 8006762:	81a3      	strh	r3, [r4, #12]
 8006764:	89a3      	ldrh	r3, [r4, #12]
 8006766:	431d      	orrs	r5, r3
 8006768:	81a5      	strh	r5, [r4, #12]
 800676a:	e7cd      	b.n	8006708 <__smakebuf_r+0x18>
 800676c:	08005819 	.word	0x08005819

08006770 <memmove>:
 8006770:	4288      	cmp	r0, r1
 8006772:	b510      	push	{r4, lr}
 8006774:	eb01 0302 	add.w	r3, r1, r2
 8006778:	d803      	bhi.n	8006782 <memmove+0x12>
 800677a:	1e42      	subs	r2, r0, #1
 800677c:	4299      	cmp	r1, r3
 800677e:	d10c      	bne.n	800679a <memmove+0x2a>
 8006780:	bd10      	pop	{r4, pc}
 8006782:	4298      	cmp	r0, r3
 8006784:	d2f9      	bcs.n	800677a <memmove+0xa>
 8006786:	1881      	adds	r1, r0, r2
 8006788:	1ad2      	subs	r2, r2, r3
 800678a:	42d3      	cmn	r3, r2
 800678c:	d100      	bne.n	8006790 <memmove+0x20>
 800678e:	bd10      	pop	{r4, pc}
 8006790:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006794:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006798:	e7f7      	b.n	800678a <memmove+0x1a>
 800679a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800679e:	f802 4f01 	strb.w	r4, [r2, #1]!
 80067a2:	e7eb      	b.n	800677c <memmove+0xc>

080067a4 <__malloc_lock>:
 80067a4:	4770      	bx	lr

080067a6 <__malloc_unlock>:
 80067a6:	4770      	bx	lr

080067a8 <_free_r>:
 80067a8:	b538      	push	{r3, r4, r5, lr}
 80067aa:	4605      	mov	r5, r0
 80067ac:	2900      	cmp	r1, #0
 80067ae:	d045      	beq.n	800683c <_free_r+0x94>
 80067b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067b4:	1f0c      	subs	r4, r1, #4
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	bfb8      	it	lt
 80067ba:	18e4      	addlt	r4, r4, r3
 80067bc:	f7ff fff2 	bl	80067a4 <__malloc_lock>
 80067c0:	4a1f      	ldr	r2, [pc, #124]	; (8006840 <_free_r+0x98>)
 80067c2:	6813      	ldr	r3, [r2, #0]
 80067c4:	4610      	mov	r0, r2
 80067c6:	b933      	cbnz	r3, 80067d6 <_free_r+0x2e>
 80067c8:	6063      	str	r3, [r4, #4]
 80067ca:	6014      	str	r4, [r2, #0]
 80067cc:	4628      	mov	r0, r5
 80067ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80067d2:	f7ff bfe8 	b.w	80067a6 <__malloc_unlock>
 80067d6:	42a3      	cmp	r3, r4
 80067d8:	d90c      	bls.n	80067f4 <_free_r+0x4c>
 80067da:	6821      	ldr	r1, [r4, #0]
 80067dc:	1862      	adds	r2, r4, r1
 80067de:	4293      	cmp	r3, r2
 80067e0:	bf04      	itt	eq
 80067e2:	681a      	ldreq	r2, [r3, #0]
 80067e4:	685b      	ldreq	r3, [r3, #4]
 80067e6:	6063      	str	r3, [r4, #4]
 80067e8:	bf04      	itt	eq
 80067ea:	1852      	addeq	r2, r2, r1
 80067ec:	6022      	streq	r2, [r4, #0]
 80067ee:	6004      	str	r4, [r0, #0]
 80067f0:	e7ec      	b.n	80067cc <_free_r+0x24>
 80067f2:	4613      	mov	r3, r2
 80067f4:	685a      	ldr	r2, [r3, #4]
 80067f6:	b10a      	cbz	r2, 80067fc <_free_r+0x54>
 80067f8:	42a2      	cmp	r2, r4
 80067fa:	d9fa      	bls.n	80067f2 <_free_r+0x4a>
 80067fc:	6819      	ldr	r1, [r3, #0]
 80067fe:	1858      	adds	r0, r3, r1
 8006800:	42a0      	cmp	r0, r4
 8006802:	d10b      	bne.n	800681c <_free_r+0x74>
 8006804:	6820      	ldr	r0, [r4, #0]
 8006806:	4401      	add	r1, r0
 8006808:	1858      	adds	r0, r3, r1
 800680a:	4282      	cmp	r2, r0
 800680c:	6019      	str	r1, [r3, #0]
 800680e:	d1dd      	bne.n	80067cc <_free_r+0x24>
 8006810:	6810      	ldr	r0, [r2, #0]
 8006812:	6852      	ldr	r2, [r2, #4]
 8006814:	605a      	str	r2, [r3, #4]
 8006816:	4401      	add	r1, r0
 8006818:	6019      	str	r1, [r3, #0]
 800681a:	e7d7      	b.n	80067cc <_free_r+0x24>
 800681c:	d902      	bls.n	8006824 <_free_r+0x7c>
 800681e:	230c      	movs	r3, #12
 8006820:	602b      	str	r3, [r5, #0]
 8006822:	e7d3      	b.n	80067cc <_free_r+0x24>
 8006824:	6820      	ldr	r0, [r4, #0]
 8006826:	1821      	adds	r1, r4, r0
 8006828:	428a      	cmp	r2, r1
 800682a:	bf04      	itt	eq
 800682c:	6811      	ldreq	r1, [r2, #0]
 800682e:	6852      	ldreq	r2, [r2, #4]
 8006830:	6062      	str	r2, [r4, #4]
 8006832:	bf04      	itt	eq
 8006834:	1809      	addeq	r1, r1, r0
 8006836:	6021      	streq	r1, [r4, #0]
 8006838:	605c      	str	r4, [r3, #4]
 800683a:	e7c7      	b.n	80067cc <_free_r+0x24>
 800683c:	bd38      	pop	{r3, r4, r5, pc}
 800683e:	bf00      	nop
 8006840:	200001e0 	.word	0x200001e0

08006844 <_realloc_r>:
 8006844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006846:	4607      	mov	r7, r0
 8006848:	4614      	mov	r4, r2
 800684a:	460e      	mov	r6, r1
 800684c:	b921      	cbnz	r1, 8006858 <_realloc_r+0x14>
 800684e:	4611      	mov	r1, r2
 8006850:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006854:	f7ff b8aa 	b.w	80059ac <_malloc_r>
 8006858:	b922      	cbnz	r2, 8006864 <_realloc_r+0x20>
 800685a:	f7ff ffa5 	bl	80067a8 <_free_r>
 800685e:	4625      	mov	r5, r4
 8006860:	4628      	mov	r0, r5
 8006862:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006864:	f000 f848 	bl	80068f8 <_malloc_usable_size_r>
 8006868:	4284      	cmp	r4, r0
 800686a:	d90f      	bls.n	800688c <_realloc_r+0x48>
 800686c:	4621      	mov	r1, r4
 800686e:	4638      	mov	r0, r7
 8006870:	f7ff f89c 	bl	80059ac <_malloc_r>
 8006874:	4605      	mov	r5, r0
 8006876:	2800      	cmp	r0, #0
 8006878:	d0f2      	beq.n	8006860 <_realloc_r+0x1c>
 800687a:	4631      	mov	r1, r6
 800687c:	4622      	mov	r2, r4
 800687e:	f7fe ff73 	bl	8005768 <memcpy>
 8006882:	4631      	mov	r1, r6
 8006884:	4638      	mov	r0, r7
 8006886:	f7ff ff8f 	bl	80067a8 <_free_r>
 800688a:	e7e9      	b.n	8006860 <_realloc_r+0x1c>
 800688c:	4635      	mov	r5, r6
 800688e:	e7e7      	b.n	8006860 <_realloc_r+0x1c>

08006890 <_read_r>:
 8006890:	b538      	push	{r3, r4, r5, lr}
 8006892:	4c07      	ldr	r4, [pc, #28]	; (80068b0 <_read_r+0x20>)
 8006894:	4605      	mov	r5, r0
 8006896:	4608      	mov	r0, r1
 8006898:	4611      	mov	r1, r2
 800689a:	2200      	movs	r2, #0
 800689c:	6022      	str	r2, [r4, #0]
 800689e:	461a      	mov	r2, r3
 80068a0:	f7fe fde8 	bl	8005474 <_read>
 80068a4:	1c43      	adds	r3, r0, #1
 80068a6:	d102      	bne.n	80068ae <_read_r+0x1e>
 80068a8:	6823      	ldr	r3, [r4, #0]
 80068aa:	b103      	cbz	r3, 80068ae <_read_r+0x1e>
 80068ac:	602b      	str	r3, [r5, #0]
 80068ae:	bd38      	pop	{r3, r4, r5, pc}
 80068b0:	200007cc 	.word	0x200007cc

080068b4 <_fstat_r>:
 80068b4:	b538      	push	{r3, r4, r5, lr}
 80068b6:	4c07      	ldr	r4, [pc, #28]	; (80068d4 <_fstat_r+0x20>)
 80068b8:	2300      	movs	r3, #0
 80068ba:	4605      	mov	r5, r0
 80068bc:	4608      	mov	r0, r1
 80068be:	4611      	mov	r1, r2
 80068c0:	6023      	str	r3, [r4, #0]
 80068c2:	f7fe fe10 	bl	80054e6 <_fstat>
 80068c6:	1c43      	adds	r3, r0, #1
 80068c8:	d102      	bne.n	80068d0 <_fstat_r+0x1c>
 80068ca:	6823      	ldr	r3, [r4, #0]
 80068cc:	b103      	cbz	r3, 80068d0 <_fstat_r+0x1c>
 80068ce:	602b      	str	r3, [r5, #0]
 80068d0:	bd38      	pop	{r3, r4, r5, pc}
 80068d2:	bf00      	nop
 80068d4:	200007cc 	.word	0x200007cc

080068d8 <_isatty_r>:
 80068d8:	b538      	push	{r3, r4, r5, lr}
 80068da:	4c06      	ldr	r4, [pc, #24]	; (80068f4 <_isatty_r+0x1c>)
 80068dc:	2300      	movs	r3, #0
 80068de:	4605      	mov	r5, r0
 80068e0:	4608      	mov	r0, r1
 80068e2:	6023      	str	r3, [r4, #0]
 80068e4:	f7fe fe04 	bl	80054f0 <_isatty>
 80068e8:	1c43      	adds	r3, r0, #1
 80068ea:	d102      	bne.n	80068f2 <_isatty_r+0x1a>
 80068ec:	6823      	ldr	r3, [r4, #0]
 80068ee:	b103      	cbz	r3, 80068f2 <_isatty_r+0x1a>
 80068f0:	602b      	str	r3, [r5, #0]
 80068f2:	bd38      	pop	{r3, r4, r5, pc}
 80068f4:	200007cc 	.word	0x200007cc

080068f8 <_malloc_usable_size_r>:
 80068f8:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80068fc:	2800      	cmp	r0, #0
 80068fe:	f1a0 0004 	sub.w	r0, r0, #4
 8006902:	bfbc      	itt	lt
 8006904:	580b      	ldrlt	r3, [r1, r0]
 8006906:	18c0      	addlt	r0, r0, r3
 8006908:	4770      	bx	lr
	...

0800690c <_init>:
 800690c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800690e:	bf00      	nop
 8006910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006912:	bc08      	pop	{r3}
 8006914:	469e      	mov	lr, r3
 8006916:	4770      	bx	lr

08006918 <_fini>:
 8006918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800691a:	bf00      	nop
 800691c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800691e:	bc08      	pop	{r3}
 8006920:	469e      	mov	lr, r3
 8006922:	4770      	bx	lr
