
401_nrf_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ea8  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  0800203c  0800203c  0001203c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08002070  08002070  00012070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08002078  08002078  00012078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800207c  0800207c  0001207c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  08002080  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
  8 .bss          000004dc  2000000c  2000000c  0002000c  2**2
                  ALLOC
  9 ._user_heap_stack 00000400  200004e8  200004e8  0002000c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 11 .debug_info   0000b10e  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00001b20  00000000  00000000  0002b14a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000046c7  00000000  00000000  0002cc6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000007d0  00000000  00000000  00031338  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009e0  00000000  00000000  00031b08  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00003b30  00000000  00000000  000324e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00002cff  00000000  00000000  00036018  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  00038d17  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00001738  00000000  00000000  00038d94  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08002024 	.word	0x08002024

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08002024 	.word	0x08002024

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <__aeabi_uldivmod>:
 80001e4:	b953      	cbnz	r3, 80001fc <__aeabi_uldivmod+0x18>
 80001e6:	b94a      	cbnz	r2, 80001fc <__aeabi_uldivmod+0x18>
 80001e8:	2900      	cmp	r1, #0
 80001ea:	bf08      	it	eq
 80001ec:	2800      	cmpeq	r0, #0
 80001ee:	bf1c      	itt	ne
 80001f0:	f04f 31ff 	movne.w	r1, #4294967295
 80001f4:	f04f 30ff 	movne.w	r0, #4294967295
 80001f8:	f000 b97a 	b.w	80004f0 <__aeabi_idiv0>
 80001fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000200:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000204:	f000 f806 	bl	8000214 <__udivmoddi4>
 8000208:	f8dd e004 	ldr.w	lr, [sp, #4]
 800020c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000210:	b004      	add	sp, #16
 8000212:	4770      	bx	lr

08000214 <__udivmoddi4>:
 8000214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000218:	468c      	mov	ip, r1
 800021a:	460d      	mov	r5, r1
 800021c:	4604      	mov	r4, r0
 800021e:	9e08      	ldr	r6, [sp, #32]
 8000220:	2b00      	cmp	r3, #0
 8000222:	d151      	bne.n	80002c8 <__udivmoddi4+0xb4>
 8000224:	428a      	cmp	r2, r1
 8000226:	4617      	mov	r7, r2
 8000228:	d96d      	bls.n	8000306 <__udivmoddi4+0xf2>
 800022a:	fab2 fe82 	clz	lr, r2
 800022e:	f1be 0f00 	cmp.w	lr, #0
 8000232:	d00b      	beq.n	800024c <__udivmoddi4+0x38>
 8000234:	f1ce 0c20 	rsb	ip, lr, #32
 8000238:	fa01 f50e 	lsl.w	r5, r1, lr
 800023c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000240:	fa02 f70e 	lsl.w	r7, r2, lr
 8000244:	ea4c 0c05 	orr.w	ip, ip, r5
 8000248:	fa00 f40e 	lsl.w	r4, r0, lr
 800024c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000250:	0c25      	lsrs	r5, r4, #16
 8000252:	fbbc f8fa 	udiv	r8, ip, sl
 8000256:	fa1f f987 	uxth.w	r9, r7
 800025a:	fb0a cc18 	mls	ip, sl, r8, ip
 800025e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000262:	fb08 f309 	mul.w	r3, r8, r9
 8000266:	42ab      	cmp	r3, r5
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x6c>
 800026a:	19ed      	adds	r5, r5, r7
 800026c:	f108 32ff 	add.w	r2, r8, #4294967295
 8000270:	f080 8123 	bcs.w	80004ba <__udivmoddi4+0x2a6>
 8000274:	42ab      	cmp	r3, r5
 8000276:	f240 8120 	bls.w	80004ba <__udivmoddi4+0x2a6>
 800027a:	f1a8 0802 	sub.w	r8, r8, #2
 800027e:	443d      	add	r5, r7
 8000280:	1aed      	subs	r5, r5, r3
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb5 f0fa 	udiv	r0, r5, sl
 8000288:	fb0a 5510 	mls	r5, sl, r0, r5
 800028c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000290:	fb00 f909 	mul.w	r9, r0, r9
 8000294:	45a1      	cmp	r9, r4
 8000296:	d909      	bls.n	80002ac <__udivmoddi4+0x98>
 8000298:	19e4      	adds	r4, r4, r7
 800029a:	f100 33ff 	add.w	r3, r0, #4294967295
 800029e:	f080 810a 	bcs.w	80004b6 <__udivmoddi4+0x2a2>
 80002a2:	45a1      	cmp	r9, r4
 80002a4:	f240 8107 	bls.w	80004b6 <__udivmoddi4+0x2a2>
 80002a8:	3802      	subs	r0, #2
 80002aa:	443c      	add	r4, r7
 80002ac:	eba4 0409 	sub.w	r4, r4, r9
 80002b0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002b4:	2100      	movs	r1, #0
 80002b6:	2e00      	cmp	r6, #0
 80002b8:	d061      	beq.n	800037e <__udivmoddi4+0x16a>
 80002ba:	fa24 f40e 	lsr.w	r4, r4, lr
 80002be:	2300      	movs	r3, #0
 80002c0:	6034      	str	r4, [r6, #0]
 80002c2:	6073      	str	r3, [r6, #4]
 80002c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xc8>
 80002cc:	2e00      	cmp	r6, #0
 80002ce:	d054      	beq.n	800037a <__udivmoddi4+0x166>
 80002d0:	2100      	movs	r1, #0
 80002d2:	e886 0021 	stmia.w	r6, {r0, r5}
 80002d6:	4608      	mov	r0, r1
 80002d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002dc:	fab3 f183 	clz	r1, r3
 80002e0:	2900      	cmp	r1, #0
 80002e2:	f040 808e 	bne.w	8000402 <__udivmoddi4+0x1ee>
 80002e6:	42ab      	cmp	r3, r5
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xdc>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80fa 	bhi.w	80004e4 <__udivmoddi4+0x2d0>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb65 0503 	sbc.w	r5, r5, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	46ac      	mov	ip, r5
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d03f      	beq.n	800037e <__udivmoddi4+0x16a>
 80002fe:	e886 1010 	stmia.w	r6, {r4, ip}
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	b912      	cbnz	r2, 800030e <__udivmoddi4+0xfa>
 8000308:	2701      	movs	r7, #1
 800030a:	fbb7 f7f2 	udiv	r7, r7, r2
 800030e:	fab7 fe87 	clz	lr, r7
 8000312:	f1be 0f00 	cmp.w	lr, #0
 8000316:	d134      	bne.n	8000382 <__udivmoddi4+0x16e>
 8000318:	1beb      	subs	r3, r5, r7
 800031a:	0c3a      	lsrs	r2, r7, #16
 800031c:	fa1f fc87 	uxth.w	ip, r7
 8000320:	2101      	movs	r1, #1
 8000322:	fbb3 f8f2 	udiv	r8, r3, r2
 8000326:	0c25      	lsrs	r5, r4, #16
 8000328:	fb02 3318 	mls	r3, r2, r8, r3
 800032c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000330:	fb0c f308 	mul.w	r3, ip, r8
 8000334:	42ab      	cmp	r3, r5
 8000336:	d907      	bls.n	8000348 <__udivmoddi4+0x134>
 8000338:	19ed      	adds	r5, r5, r7
 800033a:	f108 30ff 	add.w	r0, r8, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x132>
 8000340:	42ab      	cmp	r3, r5
 8000342:	f200 80d1 	bhi.w	80004e8 <__udivmoddi4+0x2d4>
 8000346:	4680      	mov	r8, r0
 8000348:	1aed      	subs	r5, r5, r3
 800034a:	b2a3      	uxth	r3, r4
 800034c:	fbb5 f0f2 	udiv	r0, r5, r2
 8000350:	fb02 5510 	mls	r5, r2, r0, r5
 8000354:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000358:	fb0c fc00 	mul.w	ip, ip, r0
 800035c:	45a4      	cmp	ip, r4
 800035e:	d907      	bls.n	8000370 <__udivmoddi4+0x15c>
 8000360:	19e4      	adds	r4, r4, r7
 8000362:	f100 33ff 	add.w	r3, r0, #4294967295
 8000366:	d202      	bcs.n	800036e <__udivmoddi4+0x15a>
 8000368:	45a4      	cmp	ip, r4
 800036a:	f200 80b8 	bhi.w	80004de <__udivmoddi4+0x2ca>
 800036e:	4618      	mov	r0, r3
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000378:	e79d      	b.n	80002b6 <__udivmoddi4+0xa2>
 800037a:	4631      	mov	r1, r6
 800037c:	4630      	mov	r0, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	f1ce 0420 	rsb	r4, lr, #32
 8000386:	fa05 f30e 	lsl.w	r3, r5, lr
 800038a:	fa07 f70e 	lsl.w	r7, r7, lr
 800038e:	fa20 f804 	lsr.w	r8, r0, r4
 8000392:	0c3a      	lsrs	r2, r7, #16
 8000394:	fa25 f404 	lsr.w	r4, r5, r4
 8000398:	ea48 0803 	orr.w	r8, r8, r3
 800039c:	fbb4 f1f2 	udiv	r1, r4, r2
 80003a0:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003a4:	fb02 4411 	mls	r4, r2, r1, r4
 80003a8:	fa1f fc87 	uxth.w	ip, r7
 80003ac:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003b0:	fb01 f30c 	mul.w	r3, r1, ip
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	fa00 f40e 	lsl.w	r4, r0, lr
 80003ba:	d909      	bls.n	80003d0 <__udivmoddi4+0x1bc>
 80003bc:	19ed      	adds	r5, r5, r7
 80003be:	f101 30ff 	add.w	r0, r1, #4294967295
 80003c2:	f080 808a 	bcs.w	80004da <__udivmoddi4+0x2c6>
 80003c6:	42ab      	cmp	r3, r5
 80003c8:	f240 8087 	bls.w	80004da <__udivmoddi4+0x2c6>
 80003cc:	3902      	subs	r1, #2
 80003ce:	443d      	add	r5, r7
 80003d0:	1aeb      	subs	r3, r5, r3
 80003d2:	fa1f f588 	uxth.w	r5, r8
 80003d6:	fbb3 f0f2 	udiv	r0, r3, r2
 80003da:	fb02 3310 	mls	r3, r2, r0, r3
 80003de:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003e2:	fb00 f30c 	mul.w	r3, r0, ip
 80003e6:	42ab      	cmp	r3, r5
 80003e8:	d907      	bls.n	80003fa <__udivmoddi4+0x1e6>
 80003ea:	19ed      	adds	r5, r5, r7
 80003ec:	f100 38ff 	add.w	r8, r0, #4294967295
 80003f0:	d26f      	bcs.n	80004d2 <__udivmoddi4+0x2be>
 80003f2:	42ab      	cmp	r3, r5
 80003f4:	d96d      	bls.n	80004d2 <__udivmoddi4+0x2be>
 80003f6:	3802      	subs	r0, #2
 80003f8:	443d      	add	r5, r7
 80003fa:	1aeb      	subs	r3, r5, r3
 80003fc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000400:	e78f      	b.n	8000322 <__udivmoddi4+0x10e>
 8000402:	f1c1 0720 	rsb	r7, r1, #32
 8000406:	fa22 f807 	lsr.w	r8, r2, r7
 800040a:	408b      	lsls	r3, r1
 800040c:	fa05 f401 	lsl.w	r4, r5, r1
 8000410:	ea48 0303 	orr.w	r3, r8, r3
 8000414:	fa20 fe07 	lsr.w	lr, r0, r7
 8000418:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 800041c:	40fd      	lsrs	r5, r7
 800041e:	ea4e 0e04 	orr.w	lr, lr, r4
 8000422:	fbb5 f9fc 	udiv	r9, r5, ip
 8000426:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800042a:	fb0c 5519 	mls	r5, ip, r9, r5
 800042e:	fa1f f883 	uxth.w	r8, r3
 8000432:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000436:	fb09 f408 	mul.w	r4, r9, r8
 800043a:	42ac      	cmp	r4, r5
 800043c:	fa02 f201 	lsl.w	r2, r2, r1
 8000440:	fa00 fa01 	lsl.w	sl, r0, r1
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x244>
 8000446:	18ed      	adds	r5, r5, r3
 8000448:	f109 30ff 	add.w	r0, r9, #4294967295
 800044c:	d243      	bcs.n	80004d6 <__udivmoddi4+0x2c2>
 800044e:	42ac      	cmp	r4, r5
 8000450:	d941      	bls.n	80004d6 <__udivmoddi4+0x2c2>
 8000452:	f1a9 0902 	sub.w	r9, r9, #2
 8000456:	441d      	add	r5, r3
 8000458:	1b2d      	subs	r5, r5, r4
 800045a:	fa1f fe8e 	uxth.w	lr, lr
 800045e:	fbb5 f0fc 	udiv	r0, r5, ip
 8000462:	fb0c 5510 	mls	r5, ip, r0, r5
 8000466:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800046a:	fb00 f808 	mul.w	r8, r0, r8
 800046e:	45a0      	cmp	r8, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x26e>
 8000472:	18e4      	adds	r4, r4, r3
 8000474:	f100 35ff 	add.w	r5, r0, #4294967295
 8000478:	d229      	bcs.n	80004ce <__udivmoddi4+0x2ba>
 800047a:	45a0      	cmp	r8, r4
 800047c:	d927      	bls.n	80004ce <__udivmoddi4+0x2ba>
 800047e:	3802      	subs	r0, #2
 8000480:	441c      	add	r4, r3
 8000482:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000486:	eba4 0408 	sub.w	r4, r4, r8
 800048a:	fba0 8902 	umull	r8, r9, r0, r2
 800048e:	454c      	cmp	r4, r9
 8000490:	46c6      	mov	lr, r8
 8000492:	464d      	mov	r5, r9
 8000494:	d315      	bcc.n	80004c2 <__udivmoddi4+0x2ae>
 8000496:	d012      	beq.n	80004be <__udivmoddi4+0x2aa>
 8000498:	b156      	cbz	r6, 80004b0 <__udivmoddi4+0x29c>
 800049a:	ebba 030e 	subs.w	r3, sl, lr
 800049e:	eb64 0405 	sbc.w	r4, r4, r5
 80004a2:	fa04 f707 	lsl.w	r7, r4, r7
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431f      	orrs	r7, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	6037      	str	r7, [r6, #0]
 80004ae:	6074      	str	r4, [r6, #4]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b6:	4618      	mov	r0, r3
 80004b8:	e6f8      	b.n	80002ac <__udivmoddi4+0x98>
 80004ba:	4690      	mov	r8, r2
 80004bc:	e6e0      	b.n	8000280 <__udivmoddi4+0x6c>
 80004be:	45c2      	cmp	sl, r8
 80004c0:	d2ea      	bcs.n	8000498 <__udivmoddi4+0x284>
 80004c2:	ebb8 0e02 	subs.w	lr, r8, r2
 80004c6:	eb69 0503 	sbc.w	r5, r9, r3
 80004ca:	3801      	subs	r0, #1
 80004cc:	e7e4      	b.n	8000498 <__udivmoddi4+0x284>
 80004ce:	4628      	mov	r0, r5
 80004d0:	e7d7      	b.n	8000482 <__udivmoddi4+0x26e>
 80004d2:	4640      	mov	r0, r8
 80004d4:	e791      	b.n	80003fa <__udivmoddi4+0x1e6>
 80004d6:	4681      	mov	r9, r0
 80004d8:	e7be      	b.n	8000458 <__udivmoddi4+0x244>
 80004da:	4601      	mov	r1, r0
 80004dc:	e778      	b.n	80003d0 <__udivmoddi4+0x1bc>
 80004de:	3802      	subs	r0, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	e745      	b.n	8000370 <__udivmoddi4+0x15c>
 80004e4:	4608      	mov	r0, r1
 80004e6:	e708      	b.n	80002fa <__udivmoddi4+0xe6>
 80004e8:	f1a8 0802 	sub.w	r8, r8, #2
 80004ec:	443d      	add	r5, r7
 80004ee:	e72b      	b.n	8000348 <__udivmoddi4+0x134>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004f4:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004f6:	4a0e      	ldr	r2, [pc, #56]	; (8000530 <HAL_InitTick+0x3c>)
 80004f8:	4b0e      	ldr	r3, [pc, #56]	; (8000534 <HAL_InitTick+0x40>)
{
 80004fa:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004fc:	7818      	ldrb	r0, [r3, #0]
 80004fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000502:	fbb3 f3f0 	udiv	r3, r3, r0
 8000506:	6810      	ldr	r0, [r2, #0]
 8000508:	fbb0 f0f3 	udiv	r0, r0, r3
 800050c:	f000 f8aa 	bl	8000664 <HAL_SYSTICK_Config>
 8000510:	4604      	mov	r4, r0
 8000512:	b958      	cbnz	r0, 800052c <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000514:	2d0f      	cmp	r5, #15
 8000516:	d809      	bhi.n	800052c <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000518:	4602      	mov	r2, r0
 800051a:	4629      	mov	r1, r5
 800051c:	f04f 30ff 	mov.w	r0, #4294967295
 8000520:	f000 f85e 	bl	80005e0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000524:	4b04      	ldr	r3, [pc, #16]	; (8000538 <HAL_InitTick+0x44>)
 8000526:	4620      	mov	r0, r4
 8000528:	601d      	str	r5, [r3, #0]
 800052a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800052c:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800052e:	bd38      	pop	{r3, r4, r5, pc}
 8000530:	20000008 	.word	0x20000008
 8000534:	20000000 	.word	0x20000000
 8000538:	20000004 	.word	0x20000004

0800053c <HAL_Init>:
{
 800053c:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800053e:	4b0b      	ldr	r3, [pc, #44]	; (800056c <HAL_Init+0x30>)
 8000540:	681a      	ldr	r2, [r3, #0]
 8000542:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000546:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000548:	681a      	ldr	r2, [r3, #0]
 800054a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800054e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000550:	681a      	ldr	r2, [r3, #0]
 8000552:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000556:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000558:	2003      	movs	r0, #3
 800055a:	f000 f82f 	bl	80005bc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800055e:	2000      	movs	r0, #0
 8000560:	f7ff ffc8 	bl	80004f4 <HAL_InitTick>
  HAL_MspInit();
 8000564:	f001 fc42 	bl	8001dec <HAL_MspInit>
}
 8000568:	2000      	movs	r0, #0
 800056a:	bd08      	pop	{r3, pc}
 800056c:	40023c00 	.word	0x40023c00

08000570 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000570:	4a03      	ldr	r2, [pc, #12]	; (8000580 <HAL_IncTick+0x10>)
 8000572:	4b04      	ldr	r3, [pc, #16]	; (8000584 <HAL_IncTick+0x14>)
 8000574:	6811      	ldr	r1, [r2, #0]
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	440b      	add	r3, r1
 800057a:	6013      	str	r3, [r2, #0]
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop
 8000580:	20000028 	.word	0x20000028
 8000584:	20000000 	.word	0x20000000

08000588 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000588:	4b01      	ldr	r3, [pc, #4]	; (8000590 <HAL_GetTick+0x8>)
 800058a:	6818      	ldr	r0, [r3, #0]
}
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop
 8000590:	20000028 	.word	0x20000028

08000594 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000594:	b538      	push	{r3, r4, r5, lr}
 8000596:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000598:	f7ff fff6 	bl	8000588 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800059c:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800059e:	bf1c      	itt	ne
 80005a0:	4b05      	ldrne	r3, [pc, #20]	; (80005b8 <HAL_Delay+0x24>)
 80005a2:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 80005a4:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 80005a6:	bf18      	it	ne
 80005a8:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005aa:	f7ff ffed 	bl	8000588 <HAL_GetTick>
 80005ae:	1b40      	subs	r0, r0, r5
 80005b0:	4284      	cmp	r4, r0
 80005b2:	d8fa      	bhi.n	80005aa <HAL_Delay+0x16>
  {
  }
}
 80005b4:	bd38      	pop	{r3, r4, r5, pc}
 80005b6:	bf00      	nop
 80005b8:	20000000 	.word	0x20000000

080005bc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005bc:	4a07      	ldr	r2, [pc, #28]	; (80005dc <HAL_NVIC_SetPriorityGrouping+0x20>)
 80005be:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005c0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80005c4:	041b      	lsls	r3, r3, #16
 80005c6:	0c1b      	lsrs	r3, r3, #16
 80005c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005cc:	0200      	lsls	r0, r0, #8
 80005ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005d2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80005d6:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80005d8:	60d3      	str	r3, [r2, #12]
 80005da:	4770      	bx	lr
 80005dc:	e000ed00 	.word	0xe000ed00

080005e0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005e0:	4b17      	ldr	r3, [pc, #92]	; (8000640 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80005e2:	b530      	push	{r4, r5, lr}
 80005e4:	68dc      	ldr	r4, [r3, #12]
 80005e6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005ea:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005ee:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005f0:	2b04      	cmp	r3, #4
 80005f2:	bf28      	it	cs
 80005f4:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005f6:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005f8:	f04f 0501 	mov.w	r5, #1
 80005fc:	fa05 f303 	lsl.w	r3, r5, r3
 8000600:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000604:	bf8c      	ite	hi
 8000606:	3c03      	subhi	r4, #3
 8000608:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800060a:	4019      	ands	r1, r3
 800060c:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800060e:	fa05 f404 	lsl.w	r4, r5, r4
 8000612:	3c01      	subs	r4, #1
 8000614:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8000616:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000618:	ea42 0201 	orr.w	r2, r2, r1
 800061c:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000620:	bfad      	iteet	ge
 8000622:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000626:	f000 000f 	andlt.w	r0, r0, #15
 800062a:	4b06      	ldrlt	r3, [pc, #24]	; (8000644 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800062c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000630:	bfb5      	itete	lt
 8000632:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000634:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000636:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000638:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 800063c:	bd30      	pop	{r4, r5, pc}
 800063e:	bf00      	nop
 8000640:	e000ed00 	.word	0xe000ed00
 8000644:	e000ed14 	.word	0xe000ed14

08000648 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000648:	2800      	cmp	r0, #0
 800064a:	db08      	blt.n	800065e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800064c:	0942      	lsrs	r2, r0, #5
 800064e:	2301      	movs	r3, #1
 8000650:	f000 001f 	and.w	r0, r0, #31
 8000654:	fa03 f000 	lsl.w	r0, r3, r0
 8000658:	4b01      	ldr	r3, [pc, #4]	; (8000660 <HAL_NVIC_EnableIRQ+0x18>)
 800065a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800065e:	4770      	bx	lr
 8000660:	e000e100 	.word	0xe000e100

08000664 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000664:	3801      	subs	r0, #1
 8000666:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800066a:	d20a      	bcs.n	8000682 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800066c:	4b06      	ldr	r3, [pc, #24]	; (8000688 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800066e:	4a07      	ldr	r2, [pc, #28]	; (800068c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000670:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000672:	21f0      	movs	r1, #240	; 0xf0
 8000674:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000678:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800067a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800067c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000682:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop
 8000688:	e000e010 	.word	0xe000e010
 800068c:	e000ed00 	.word	0xe000ed00

08000690 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000694:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000696:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000698:	f8df 818c 	ldr.w	r8, [pc, #396]	; 8000828 <HAL_GPIO_Init+0x198>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800069c:	4a60      	ldr	r2, [pc, #384]	; (8000820 <HAL_GPIO_Init+0x190>)
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800069e:	9301      	str	r3, [sp, #4]
    ioposition = 0x01U << position;
 80006a0:	f04f 0901 	mov.w	r9, #1
  for(position = 0U; position < GPIO_NUMBER; position++)
 80006a4:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006a6:	9d01      	ldr	r5, [sp, #4]
    ioposition = 0x01U << position;
 80006a8:	fa09 f403 	lsl.w	r4, r9, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006ac:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 80006ae:	42ac      	cmp	r4, r5
 80006b0:	f040 80a6 	bne.w	8000800 <HAL_GPIO_Init+0x170>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006b4:	684c      	ldr	r4, [r1, #4]
 80006b6:	f024 0c10 	bic.w	ip, r4, #16
 80006ba:	f10c 36ff 	add.w	r6, ip, #4294967295
 80006be:	2e01      	cmp	r6, #1
 80006c0:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80006c4:	d812      	bhi.n	80006ec <HAL_GPIO_Init+0x5c>
        temp = GPIOx->OSPEEDR; 
 80006c6:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80006c8:	2603      	movs	r6, #3
 80006ca:	fa06 f60e 	lsl.w	r6, r6, lr
 80006ce:	ea27 0706 	bic.w	r7, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 80006d2:	68ce      	ldr	r6, [r1, #12]
 80006d4:	fa06 f60e 	lsl.w	r6, r6, lr
 80006d8:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 80006da:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 80006dc:	6847      	ldr	r7, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80006de:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80006e2:	ea27 0705 	bic.w	r7, r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80006e6:	409e      	lsls	r6, r3
 80006e8:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 80006ea:	6046      	str	r6, [r0, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80006ec:	2603      	movs	r6, #3
      temp = GPIOx->PUPDR;
 80006ee:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80006f0:	fa06 f60e 	lsl.w	r6, r6, lr
 80006f4:	43f6      	mvns	r6, r6
 80006f6:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80006fa:	688f      	ldr	r7, [r1, #8]
 80006fc:	fa07 f70e 	lsl.w	r7, r7, lr
 8000700:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000704:	f1bc 0f02 	cmp.w	ip, #2
      GPIOx->PUPDR = temp;
 8000708:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800070a:	d116      	bne.n	800073a <HAL_GPIO_Init+0xaa>
        temp = GPIOx->AFR[position >> 3U];
 800070c:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000710:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000714:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000718:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800071c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000720:	f04f 0c0f 	mov.w	ip, #15
 8000724:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000728:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800072c:	690f      	ldr	r7, [r1, #16]
 800072e:	fa07 f70b 	lsl.w	r7, r7, fp
 8000732:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3U] = temp;
 8000736:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 800073a:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800073c:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800073e:	f004 0703 	and.w	r7, r4, #3
 8000742:	fa07 fe0e 	lsl.w	lr, r7, lr
 8000746:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 800074a:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800074c:	00e6      	lsls	r6, r4, #3
 800074e:	d557      	bpl.n	8000800 <HAL_GPIO_Init+0x170>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000750:	f04f 0b00 	mov.w	fp, #0
 8000754:	f8cd b00c 	str.w	fp, [sp, #12]
 8000758:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800075c:	4e31      	ldr	r6, [pc, #196]	; (8000824 <HAL_GPIO_Init+0x194>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800075e:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000762:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000766:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 800076a:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 800076e:	9703      	str	r7, [sp, #12]
 8000770:	9f03      	ldr	r7, [sp, #12]
 8000772:	f023 0703 	bic.w	r7, r3, #3
 8000776:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 800077a:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800077e:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000782:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000786:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800078a:	f04f 0e0f 	mov.w	lr, #15
 800078e:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000792:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000794:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000798:	d039      	beq.n	800080e <HAL_GPIO_Init+0x17e>
 800079a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800079e:	42b0      	cmp	r0, r6
 80007a0:	d037      	beq.n	8000812 <HAL_GPIO_Init+0x182>
 80007a2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80007a6:	42b0      	cmp	r0, r6
 80007a8:	d035      	beq.n	8000816 <HAL_GPIO_Init+0x186>
 80007aa:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80007ae:	42b0      	cmp	r0, r6
 80007b0:	d033      	beq.n	800081a <HAL_GPIO_Init+0x18a>
 80007b2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80007b6:	42b0      	cmp	r0, r6
 80007b8:	bf14      	ite	ne
 80007ba:	2607      	movne	r6, #7
 80007bc:	2604      	moveq	r6, #4
 80007be:	fa06 f60c 	lsl.w	r6, r6, ip
 80007c2:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 80007c6:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 80007c8:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80007ca:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80007cc:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80007d0:	bf0c      	ite	eq
 80007d2:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80007d4:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 80007d6:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 80007d8:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80007da:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80007de:	bf0c      	ite	eq
 80007e0:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80007e2:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 80007e4:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80007e6:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80007e8:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80007ec:	bf0c      	ite	eq
 80007ee:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80007f0:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 80007f2:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 80007f4:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80007f6:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80007f8:	bf54      	ite	pl
 80007fa:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 80007fc:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 80007fe:	60d6      	str	r6, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000800:	3301      	adds	r3, #1
 8000802:	2b10      	cmp	r3, #16
 8000804:	f47f af4f 	bne.w	80006a6 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000808:	b005      	add	sp, #20
 800080a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800080e:	465e      	mov	r6, fp
 8000810:	e7d5      	b.n	80007be <HAL_GPIO_Init+0x12e>
 8000812:	2601      	movs	r6, #1
 8000814:	e7d3      	b.n	80007be <HAL_GPIO_Init+0x12e>
 8000816:	2602      	movs	r6, #2
 8000818:	e7d1      	b.n	80007be <HAL_GPIO_Init+0x12e>
 800081a:	2603      	movs	r6, #3
 800081c:	e7cf      	b.n	80007be <HAL_GPIO_Init+0x12e>
 800081e:	bf00      	nop
 8000820:	40013c00 	.word	0x40013c00
 8000824:	40020000 	.word	0x40020000
 8000828:	40023800 	.word	0x40023800

0800082c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800082c:	b10a      	cbz	r2, 8000832 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800082e:	6181      	str	r1, [r0, #24]
 8000830:	4770      	bx	lr
 8000832:	0409      	lsls	r1, r1, #16
 8000834:	e7fb      	b.n	800082e <HAL_GPIO_WritePin+0x2>

08000836 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000836:	6943      	ldr	r3, [r0, #20]
 8000838:	ea31 0303 	bics.w	r3, r1, r3
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800083c:	bf08      	it	eq
 800083e:	0409      	lsleq	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 8000840:	6181      	str	r1, [r0, #24]
 8000842:	4770      	bx	lr

08000844 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000844:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000846:	4b04      	ldr	r3, [pc, #16]	; (8000858 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8000848:	6959      	ldr	r1, [r3, #20]
 800084a:	4201      	tst	r1, r0
 800084c:	d002      	beq.n	8000854 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800084e:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000850:	f000 fe94 	bl	800157c <HAL_GPIO_EXTI_Callback>
 8000854:	bd08      	pop	{r3, pc}
 8000856:	bf00      	nop
 8000858:	40013c00 	.word	0x40013c00

0800085c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800085c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000860:	4604      	mov	r4, r0
 8000862:	b908      	cbnz	r0, 8000868 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8000864:	2001      	movs	r0, #1
 8000866:	e03f      	b.n	80008e8 <HAL_RCC_OscConfig+0x8c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000868:	6803      	ldr	r3, [r0, #0]
 800086a:	07dd      	lsls	r5, r3, #31
 800086c:	d410      	bmi.n	8000890 <HAL_RCC_OscConfig+0x34>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800086e:	6823      	ldr	r3, [r4, #0]
 8000870:	0798      	lsls	r0, r3, #30
 8000872:	d45a      	bmi.n	800092a <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000874:	6823      	ldr	r3, [r4, #0]
 8000876:	071a      	lsls	r2, r3, #28
 8000878:	f100 809c 	bmi.w	80009b4 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800087c:	6823      	ldr	r3, [r4, #0]
 800087e:	075b      	lsls	r3, r3, #29
 8000880:	f100 80ba 	bmi.w	80009f8 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000884:	69a0      	ldr	r0, [r4, #24]
 8000886:	2800      	cmp	r0, #0
 8000888:	f040 811b 	bne.w	8000ac2 <HAL_RCC_OscConfig+0x266>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 800088c:	2000      	movs	r0, #0
 800088e:	e02b      	b.n	80008e8 <HAL_RCC_OscConfig+0x8c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000890:	4ba4      	ldr	r3, [pc, #656]	; (8000b24 <HAL_RCC_OscConfig+0x2c8>)
 8000892:	689a      	ldr	r2, [r3, #8]
 8000894:	f002 020c 	and.w	r2, r2, #12
 8000898:	2a04      	cmp	r2, #4
 800089a:	d007      	beq.n	80008ac <HAL_RCC_OscConfig+0x50>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800089c:	689a      	ldr	r2, [r3, #8]
 800089e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80008a2:	2a08      	cmp	r2, #8
 80008a4:	d10a      	bne.n	80008bc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80008a6:	685b      	ldr	r3, [r3, #4]
 80008a8:	0259      	lsls	r1, r3, #9
 80008aa:	d507      	bpl.n	80008bc <HAL_RCC_OscConfig+0x60>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80008ac:	4b9d      	ldr	r3, [pc, #628]	; (8000b24 <HAL_RCC_OscConfig+0x2c8>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	039a      	lsls	r2, r3, #14
 80008b2:	d5dc      	bpl.n	800086e <HAL_RCC_OscConfig+0x12>
 80008b4:	6863      	ldr	r3, [r4, #4]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d1d9      	bne.n	800086e <HAL_RCC_OscConfig+0x12>
 80008ba:	e7d3      	b.n	8000864 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008bc:	6863      	ldr	r3, [r4, #4]
 80008be:	4d99      	ldr	r5, [pc, #612]	; (8000b24 <HAL_RCC_OscConfig+0x2c8>)
 80008c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80008c4:	d113      	bne.n	80008ee <HAL_RCC_OscConfig+0x92>
 80008c6:	682b      	ldr	r3, [r5, #0]
 80008c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008cc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80008ce:	f7ff fe5b 	bl	8000588 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008d2:	4d94      	ldr	r5, [pc, #592]	; (8000b24 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 80008d4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008d6:	682b      	ldr	r3, [r5, #0]
 80008d8:	039b      	lsls	r3, r3, #14
 80008da:	d4c8      	bmi.n	800086e <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80008dc:	f7ff fe54 	bl	8000588 <HAL_GetTick>
 80008e0:	1b80      	subs	r0, r0, r6
 80008e2:	2864      	cmp	r0, #100	; 0x64
 80008e4:	d9f7      	bls.n	80008d6 <HAL_RCC_OscConfig+0x7a>
            return HAL_TIMEOUT;
 80008e6:	2003      	movs	r0, #3
}
 80008e8:	b002      	add	sp, #8
 80008ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008ee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80008f2:	d104      	bne.n	80008fe <HAL_RCC_OscConfig+0xa2>
 80008f4:	682b      	ldr	r3, [r5, #0]
 80008f6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008fa:	602b      	str	r3, [r5, #0]
 80008fc:	e7e3      	b.n	80008c6 <HAL_RCC_OscConfig+0x6a>
 80008fe:	682a      	ldr	r2, [r5, #0]
 8000900:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000904:	602a      	str	r2, [r5, #0]
 8000906:	682a      	ldr	r2, [r5, #0]
 8000908:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800090c:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800090e:	2b00      	cmp	r3, #0
 8000910:	d1dd      	bne.n	80008ce <HAL_RCC_OscConfig+0x72>
        tickstart = HAL_GetTick();
 8000912:	f7ff fe39 	bl	8000588 <HAL_GetTick>
 8000916:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000918:	682b      	ldr	r3, [r5, #0]
 800091a:	039f      	lsls	r7, r3, #14
 800091c:	d5a7      	bpl.n	800086e <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800091e:	f7ff fe33 	bl	8000588 <HAL_GetTick>
 8000922:	1b80      	subs	r0, r0, r6
 8000924:	2864      	cmp	r0, #100	; 0x64
 8000926:	d9f7      	bls.n	8000918 <HAL_RCC_OscConfig+0xbc>
 8000928:	e7dd      	b.n	80008e6 <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800092a:	4b7e      	ldr	r3, [pc, #504]	; (8000b24 <HAL_RCC_OscConfig+0x2c8>)
 800092c:	689a      	ldr	r2, [r3, #8]
 800092e:	f012 0f0c 	tst.w	r2, #12
 8000932:	d007      	beq.n	8000944 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000934:	689a      	ldr	r2, [r3, #8]
 8000936:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800093a:	2a08      	cmp	r2, #8
 800093c:	d111      	bne.n	8000962 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800093e:	685b      	ldr	r3, [r3, #4]
 8000940:	025e      	lsls	r6, r3, #9
 8000942:	d40e      	bmi.n	8000962 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000944:	4b77      	ldr	r3, [pc, #476]	; (8000b24 <HAL_RCC_OscConfig+0x2c8>)
 8000946:	681a      	ldr	r2, [r3, #0]
 8000948:	0795      	lsls	r5, r2, #30
 800094a:	d502      	bpl.n	8000952 <HAL_RCC_OscConfig+0xf6>
 800094c:	68e2      	ldr	r2, [r4, #12]
 800094e:	2a01      	cmp	r2, #1
 8000950:	d188      	bne.n	8000864 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000952:	681a      	ldr	r2, [r3, #0]
 8000954:	6921      	ldr	r1, [r4, #16]
 8000956:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800095a:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800095e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000960:	e788      	b.n	8000874 <HAL_RCC_OscConfig+0x18>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000962:	68e2      	ldr	r2, [r4, #12]
 8000964:	4b70      	ldr	r3, [pc, #448]	; (8000b28 <HAL_RCC_OscConfig+0x2cc>)
 8000966:	b1b2      	cbz	r2, 8000996 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8000968:	2201      	movs	r2, #1
 800096a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800096c:	f7ff fe0c 	bl	8000588 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000970:	4d6c      	ldr	r5, [pc, #432]	; (8000b24 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8000972:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000974:	682b      	ldr	r3, [r5, #0]
 8000976:	0798      	lsls	r0, r3, #30
 8000978:	d507      	bpl.n	800098a <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800097a:	682b      	ldr	r3, [r5, #0]
 800097c:	6922      	ldr	r2, [r4, #16]
 800097e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000982:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000986:	602b      	str	r3, [r5, #0]
 8000988:	e774      	b.n	8000874 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800098a:	f7ff fdfd 	bl	8000588 <HAL_GetTick>
 800098e:	1b80      	subs	r0, r0, r6
 8000990:	2802      	cmp	r0, #2
 8000992:	d9ef      	bls.n	8000974 <HAL_RCC_OscConfig+0x118>
 8000994:	e7a7      	b.n	80008e6 <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_HSI_DISABLE();
 8000996:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000998:	f7ff fdf6 	bl	8000588 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800099c:	4d61      	ldr	r5, [pc, #388]	; (8000b24 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 800099e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80009a0:	682b      	ldr	r3, [r5, #0]
 80009a2:	0799      	lsls	r1, r3, #30
 80009a4:	f57f af66 	bpl.w	8000874 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80009a8:	f7ff fdee 	bl	8000588 <HAL_GetTick>
 80009ac:	1b80      	subs	r0, r0, r6
 80009ae:	2802      	cmp	r0, #2
 80009b0:	d9f6      	bls.n	80009a0 <HAL_RCC_OscConfig+0x144>
 80009b2:	e798      	b.n	80008e6 <HAL_RCC_OscConfig+0x8a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80009b4:	6962      	ldr	r2, [r4, #20]
 80009b6:	4b5d      	ldr	r3, [pc, #372]	; (8000b2c <HAL_RCC_OscConfig+0x2d0>)
 80009b8:	b17a      	cbz	r2, 80009da <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 80009ba:	2201      	movs	r2, #1
 80009bc:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80009be:	f7ff fde3 	bl	8000588 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009c2:	4d58      	ldr	r5, [pc, #352]	; (8000b24 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 80009c4:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009c6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80009c8:	079f      	lsls	r7, r3, #30
 80009ca:	f53f af57 	bmi.w	800087c <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80009ce:	f7ff fddb 	bl	8000588 <HAL_GetTick>
 80009d2:	1b80      	subs	r0, r0, r6
 80009d4:	2802      	cmp	r0, #2
 80009d6:	d9f6      	bls.n	80009c6 <HAL_RCC_OscConfig+0x16a>
 80009d8:	e785      	b.n	80008e6 <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_LSI_DISABLE();
 80009da:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80009dc:	f7ff fdd4 	bl	8000588 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009e0:	4d50      	ldr	r5, [pc, #320]	; (8000b24 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 80009e2:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009e4:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80009e6:	0798      	lsls	r0, r3, #30
 80009e8:	f57f af48 	bpl.w	800087c <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80009ec:	f7ff fdcc 	bl	8000588 <HAL_GetTick>
 80009f0:	1b80      	subs	r0, r0, r6
 80009f2:	2802      	cmp	r0, #2
 80009f4:	d9f6      	bls.n	80009e4 <HAL_RCC_OscConfig+0x188>
 80009f6:	e776      	b.n	80008e6 <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80009f8:	4b4a      	ldr	r3, [pc, #296]	; (8000b24 <HAL_RCC_OscConfig+0x2c8>)
 80009fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009fc:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8000a00:	d128      	bne.n	8000a54 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000a02:	9201      	str	r2, [sp, #4]
 8000a04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a06:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000a0a:	641a      	str	r2, [r3, #64]	; 0x40
 8000a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a12:	9301      	str	r3, [sp, #4]
 8000a14:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000a16:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a18:	4d45      	ldr	r5, [pc, #276]	; (8000b30 <HAL_RCC_OscConfig+0x2d4>)
 8000a1a:	682b      	ldr	r3, [r5, #0]
 8000a1c:	05d9      	lsls	r1, r3, #23
 8000a1e:	d51b      	bpl.n	8000a58 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a20:	68a3      	ldr	r3, [r4, #8]
 8000a22:	4d40      	ldr	r5, [pc, #256]	; (8000b24 <HAL_RCC_OscConfig+0x2c8>)
 8000a24:	2b01      	cmp	r3, #1
 8000a26:	d127      	bne.n	8000a78 <HAL_RCC_OscConfig+0x21c>
 8000a28:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000a2a:	f043 0301 	orr.w	r3, r3, #1
 8000a2e:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000a30:	f7ff fdaa 	bl	8000588 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a34:	4d3b      	ldr	r5, [pc, #236]	; (8000b24 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8000a36:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a38:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a3c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000a3e:	079b      	lsls	r3, r3, #30
 8000a40:	d539      	bpl.n	8000ab6 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8000a42:	2e00      	cmp	r6, #0
 8000a44:	f43f af1e 	beq.w	8000884 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000a48:	4a36      	ldr	r2, [pc, #216]	; (8000b24 <HAL_RCC_OscConfig+0x2c8>)
 8000a4a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000a4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000a50:	6413      	str	r3, [r2, #64]	; 0x40
 8000a52:	e717      	b.n	8000884 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8000a54:	2600      	movs	r6, #0
 8000a56:	e7df      	b.n	8000a18 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000a58:	682b      	ldr	r3, [r5, #0]
 8000a5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a5e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000a60:	f7ff fd92 	bl	8000588 <HAL_GetTick>
 8000a64:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a66:	682b      	ldr	r3, [r5, #0]
 8000a68:	05da      	lsls	r2, r3, #23
 8000a6a:	d4d9      	bmi.n	8000a20 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000a6c:	f7ff fd8c 	bl	8000588 <HAL_GetTick>
 8000a70:	1bc0      	subs	r0, r0, r7
 8000a72:	2802      	cmp	r0, #2
 8000a74:	d9f7      	bls.n	8000a66 <HAL_RCC_OscConfig+0x20a>
 8000a76:	e736      	b.n	80008e6 <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a78:	2b05      	cmp	r3, #5
 8000a7a:	d104      	bne.n	8000a86 <HAL_RCC_OscConfig+0x22a>
 8000a7c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000a7e:	f043 0304 	orr.w	r3, r3, #4
 8000a82:	672b      	str	r3, [r5, #112]	; 0x70
 8000a84:	e7d0      	b.n	8000a28 <HAL_RCC_OscConfig+0x1cc>
 8000a86:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000a88:	f022 0201 	bic.w	r2, r2, #1
 8000a8c:	672a      	str	r2, [r5, #112]	; 0x70
 8000a8e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000a90:	f022 0204 	bic.w	r2, r2, #4
 8000a94:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d1ca      	bne.n	8000a30 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8000a9a:	f7ff fd75 	bl	8000588 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a9e:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000aa2:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000aa4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000aa6:	0798      	lsls	r0, r3, #30
 8000aa8:	d5cb      	bpl.n	8000a42 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000aaa:	f7ff fd6d 	bl	8000588 <HAL_GetTick>
 8000aae:	1bc0      	subs	r0, r0, r7
 8000ab0:	4540      	cmp	r0, r8
 8000ab2:	d9f7      	bls.n	8000aa4 <HAL_RCC_OscConfig+0x248>
 8000ab4:	e717      	b.n	80008e6 <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ab6:	f7ff fd67 	bl	8000588 <HAL_GetTick>
 8000aba:	1bc0      	subs	r0, r0, r7
 8000abc:	4540      	cmp	r0, r8
 8000abe:	d9bd      	bls.n	8000a3c <HAL_RCC_OscConfig+0x1e0>
 8000ac0:	e711      	b.n	80008e6 <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000ac2:	4d18      	ldr	r5, [pc, #96]	; (8000b24 <HAL_RCC_OscConfig+0x2c8>)
 8000ac4:	68ab      	ldr	r3, [r5, #8]
 8000ac6:	f003 030c 	and.w	r3, r3, #12
 8000aca:	2b08      	cmp	r3, #8
 8000acc:	d047      	beq.n	8000b5e <HAL_RCC_OscConfig+0x302>
 8000ace:	4e19      	ldr	r6, [pc, #100]	; (8000b34 <HAL_RCC_OscConfig+0x2d8>)
 8000ad0:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ad2:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8000ad4:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ad6:	d135      	bne.n	8000b44 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8000ad8:	f7ff fd56 	bl	8000588 <HAL_GetTick>
 8000adc:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000ade:	682b      	ldr	r3, [r5, #0]
 8000ae0:	0199      	lsls	r1, r3, #6
 8000ae2:	d429      	bmi.n	8000b38 <HAL_RCC_OscConfig+0x2dc>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000ae4:	6a22      	ldr	r2, [r4, #32]
 8000ae6:	69e3      	ldr	r3, [r4, #28]
 8000ae8:	4313      	orrs	r3, r2
 8000aea:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000aec:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000af0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000af2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000af6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000af8:	4c0a      	ldr	r4, [pc, #40]	; (8000b24 <HAL_RCC_OscConfig+0x2c8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000afa:	0852      	lsrs	r2, r2, #1
 8000afc:	3a01      	subs	r2, #1
 8000afe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b02:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000b04:	2301      	movs	r3, #1
 8000b06:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000b08:	f7ff fd3e 	bl	8000588 <HAL_GetTick>
 8000b0c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000b0e:	6823      	ldr	r3, [r4, #0]
 8000b10:	019a      	lsls	r2, r3, #6
 8000b12:	f53f aebb 	bmi.w	800088c <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b16:	f7ff fd37 	bl	8000588 <HAL_GetTick>
 8000b1a:	1b40      	subs	r0, r0, r5
 8000b1c:	2802      	cmp	r0, #2
 8000b1e:	d9f6      	bls.n	8000b0e <HAL_RCC_OscConfig+0x2b2>
 8000b20:	e6e1      	b.n	80008e6 <HAL_RCC_OscConfig+0x8a>
 8000b22:	bf00      	nop
 8000b24:	40023800 	.word	0x40023800
 8000b28:	42470000 	.word	0x42470000
 8000b2c:	42470e80 	.word	0x42470e80
 8000b30:	40007000 	.word	0x40007000
 8000b34:	42470060 	.word	0x42470060
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b38:	f7ff fd26 	bl	8000588 <HAL_GetTick>
 8000b3c:	1bc0      	subs	r0, r0, r7
 8000b3e:	2802      	cmp	r0, #2
 8000b40:	d9cd      	bls.n	8000ade <HAL_RCC_OscConfig+0x282>
 8000b42:	e6d0      	b.n	80008e6 <HAL_RCC_OscConfig+0x8a>
        tickstart = HAL_GetTick();
 8000b44:	f7ff fd20 	bl	8000588 <HAL_GetTick>
 8000b48:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000b4a:	682b      	ldr	r3, [r5, #0]
 8000b4c:	019b      	lsls	r3, r3, #6
 8000b4e:	f57f ae9d 	bpl.w	800088c <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b52:	f7ff fd19 	bl	8000588 <HAL_GetTick>
 8000b56:	1b00      	subs	r0, r0, r4
 8000b58:	2802      	cmp	r0, #2
 8000b5a:	d9f6      	bls.n	8000b4a <HAL_RCC_OscConfig+0x2ee>
 8000b5c:	e6c3      	b.n	80008e6 <HAL_RCC_OscConfig+0x8a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000b5e:	2801      	cmp	r0, #1
 8000b60:	f43f aec2 	beq.w	80008e8 <HAL_RCC_OscConfig+0x8c>
        pll_config = RCC->CFGR;
 8000b64:	68a8      	ldr	r0, [r5, #8]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000b66:	69e3      	ldr	r3, [r4, #28]
 8000b68:	f400 0280 	and.w	r2, r0, #4194304	; 0x400000
 8000b6c:	429a      	cmp	r2, r3
 8000b6e:	f47f ae79 	bne.w	8000864 <HAL_RCC_OscConfig+0x8>
 8000b72:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000b74:	f000 033f 	and.w	r3, r0, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000b78:	4293      	cmp	r3, r2
 8000b7a:	f47f ae73 	bne.w	8000864 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000b7e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000b80:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000b84:	4003      	ands	r3, r0
 8000b86:	4293      	cmp	r3, r2
 8000b88:	f47f ae6c 	bne.w	8000864 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8000b8c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000b8e:	f400 3340 	and.w	r3, r0, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8000b92:	4293      	cmp	r3, r2
 8000b94:	f47f ae66 	bne.w	8000864 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000b98:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8000b9a:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
    return HAL_ERROR;
 8000b9e:	1ac0      	subs	r0, r0, r3
 8000ba0:	bf18      	it	ne
 8000ba2:	2001      	movne	r0, #1
 8000ba4:	e6a0      	b.n	80008e8 <HAL_RCC_OscConfig+0x8c>
 8000ba6:	bf00      	nop

08000ba8 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000ba8:	4913      	ldr	r1, [pc, #76]	; (8000bf8 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000baa:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000bac:	688b      	ldr	r3, [r1, #8]
 8000bae:	f003 030c 	and.w	r3, r3, #12
 8000bb2:	2b04      	cmp	r3, #4
 8000bb4:	d003      	beq.n	8000bbe <HAL_RCC_GetSysClockFreq+0x16>
 8000bb6:	2b08      	cmp	r3, #8
 8000bb8:	d003      	beq.n	8000bc2 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000bba:	4810      	ldr	r0, [pc, #64]	; (8000bfc <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000bbc:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8000bbe:	4810      	ldr	r0, [pc, #64]	; (8000c00 <HAL_RCC_GetSysClockFreq+0x58>)
 8000bc0:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000bc2:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000bc4:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000bc6:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000bc8:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000bcc:	bf14      	ite	ne
 8000bce:	480c      	ldrne	r0, [pc, #48]	; (8000c00 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000bd0:	480a      	ldreq	r0, [pc, #40]	; (8000bfc <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000bd2:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000bd6:	bf18      	it	ne
 8000bd8:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000bda:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000bde:	fba1 0100 	umull	r0, r1, r1, r0
 8000be2:	f7ff faff 	bl	80001e4 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000be6:	4b04      	ldr	r3, [pc, #16]	; (8000bf8 <HAL_RCC_GetSysClockFreq+0x50>)
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000bee:	3301      	adds	r3, #1
 8000bf0:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8000bf2:	fbb0 f0f3 	udiv	r0, r0, r3
 8000bf6:	bd08      	pop	{r3, pc}
 8000bf8:	40023800 	.word	0x40023800
 8000bfc:	00f42400 	.word	0x00f42400
 8000c00:	007a1200 	.word	0x007a1200

08000c04 <HAL_RCC_ClockConfig>:
{
 8000c04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c08:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000c0a:	4604      	mov	r4, r0
 8000c0c:	b910      	cbnz	r0, 8000c14 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000c0e:	2001      	movs	r0, #1
 8000c10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000c14:	4b44      	ldr	r3, [pc, #272]	; (8000d28 <HAL_RCC_ClockConfig+0x124>)
 8000c16:	681a      	ldr	r2, [r3, #0]
 8000c18:	f002 020f 	and.w	r2, r2, #15
 8000c1c:	428a      	cmp	r2, r1
 8000c1e:	d329      	bcc.n	8000c74 <HAL_RCC_ClockConfig+0x70>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000c20:	6821      	ldr	r1, [r4, #0]
 8000c22:	078f      	lsls	r7, r1, #30
 8000c24:	d42e      	bmi.n	8000c84 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000c26:	07c8      	lsls	r0, r1, #31
 8000c28:	d441      	bmi.n	8000cae <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000c2a:	4b3f      	ldr	r3, [pc, #252]	; (8000d28 <HAL_RCC_ClockConfig+0x124>)
 8000c2c:	681a      	ldr	r2, [r3, #0]
 8000c2e:	f002 020f 	and.w	r2, r2, #15
 8000c32:	4295      	cmp	r5, r2
 8000c34:	d367      	bcc.n	8000d06 <HAL_RCC_ClockConfig+0x102>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c36:	6822      	ldr	r2, [r4, #0]
 8000c38:	0751      	lsls	r1, r2, #29
 8000c3a:	d46d      	bmi.n	8000d18 <HAL_RCC_ClockConfig+0x114>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c3c:	0713      	lsls	r3, r2, #28
 8000c3e:	d507      	bpl.n	8000c50 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000c40:	4a3a      	ldr	r2, [pc, #232]	; (8000d2c <HAL_RCC_ClockConfig+0x128>)
 8000c42:	6921      	ldr	r1, [r4, #16]
 8000c44:	6893      	ldr	r3, [r2, #8]
 8000c46:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000c4a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000c4e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000c50:	f7ff ffaa 	bl	8000ba8 <HAL_RCC_GetSysClockFreq>
 8000c54:	4b35      	ldr	r3, [pc, #212]	; (8000d2c <HAL_RCC_ClockConfig+0x128>)
 8000c56:	4a36      	ldr	r2, [pc, #216]	; (8000d30 <HAL_RCC_ClockConfig+0x12c>)
 8000c58:	689b      	ldr	r3, [r3, #8]
 8000c5a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000c5e:	5cd3      	ldrb	r3, [r2, r3]
 8000c60:	40d8      	lsrs	r0, r3
 8000c62:	4b34      	ldr	r3, [pc, #208]	; (8000d34 <HAL_RCC_ClockConfig+0x130>)
 8000c64:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8000c66:	4b34      	ldr	r3, [pc, #208]	; (8000d38 <HAL_RCC_ClockConfig+0x134>)
 8000c68:	6818      	ldr	r0, [r3, #0]
 8000c6a:	f7ff fc43 	bl	80004f4 <HAL_InitTick>
  return HAL_OK;
 8000c6e:	2000      	movs	r0, #0
 8000c70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c74:	b2ca      	uxtb	r2, r1
 8000c76:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	f003 030f 	and.w	r3, r3, #15
 8000c7e:	4299      	cmp	r1, r3
 8000c80:	d1c5      	bne.n	8000c0e <HAL_RCC_ClockConfig+0xa>
 8000c82:	e7cd      	b.n	8000c20 <HAL_RCC_ClockConfig+0x1c>
 8000c84:	4b29      	ldr	r3, [pc, #164]	; (8000d2c <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c86:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000c8a:	bf1e      	ittt	ne
 8000c8c:	689a      	ldrne	r2, [r3, #8]
 8000c8e:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8000c92:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c94:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000c96:	bf42      	ittt	mi
 8000c98:	689a      	ldrmi	r2, [r3, #8]
 8000c9a:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8000c9e:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000ca0:	689a      	ldr	r2, [r3, #8]
 8000ca2:	68a0      	ldr	r0, [r4, #8]
 8000ca4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000ca8:	4302      	orrs	r2, r0
 8000caa:	609a      	str	r2, [r3, #8]
 8000cac:	e7bb      	b.n	8000c26 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000cae:	6862      	ldr	r2, [r4, #4]
 8000cb0:	4b1e      	ldr	r3, [pc, #120]	; (8000d2c <HAL_RCC_ClockConfig+0x128>)
 8000cb2:	2a01      	cmp	r2, #1
 8000cb4:	d11d      	bne.n	8000cf2 <HAL_RCC_ClockConfig+0xee>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cbc:	d0a7      	beq.n	8000c0e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000cbe:	4e1b      	ldr	r6, [pc, #108]	; (8000d2c <HAL_RCC_ClockConfig+0x128>)
 8000cc0:	68b3      	ldr	r3, [r6, #8]
 8000cc2:	f023 0303 	bic.w	r3, r3, #3
 8000cc6:	4313      	orrs	r3, r2
 8000cc8:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000cca:	f7ff fc5d 	bl	8000588 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000cce:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000cd2:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000cd4:	68b3      	ldr	r3, [r6, #8]
 8000cd6:	6862      	ldr	r2, [r4, #4]
 8000cd8:	f003 030c 	and.w	r3, r3, #12
 8000cdc:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000ce0:	d0a3      	beq.n	8000c2a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ce2:	f7ff fc51 	bl	8000588 <HAL_GetTick>
 8000ce6:	1bc0      	subs	r0, r0, r7
 8000ce8:	4540      	cmp	r0, r8
 8000cea:	d9f3      	bls.n	8000cd4 <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 8000cec:	2003      	movs	r0, #3
}
 8000cee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000cf2:	1e91      	subs	r1, r2, #2
 8000cf4:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000cf6:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000cf8:	d802      	bhi.n	8000d00 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000cfa:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000cfe:	e7dd      	b.n	8000cbc <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d00:	f013 0f02 	tst.w	r3, #2
 8000d04:	e7da      	b.n	8000cbc <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d06:	b2ea      	uxtb	r2, r5
 8000d08:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	f003 030f 	and.w	r3, r3, #15
 8000d10:	429d      	cmp	r5, r3
 8000d12:	f47f af7c 	bne.w	8000c0e <HAL_RCC_ClockConfig+0xa>
 8000d16:	e78e      	b.n	8000c36 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000d18:	4904      	ldr	r1, [pc, #16]	; (8000d2c <HAL_RCC_ClockConfig+0x128>)
 8000d1a:	68e0      	ldr	r0, [r4, #12]
 8000d1c:	688b      	ldr	r3, [r1, #8]
 8000d1e:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000d22:	4303      	orrs	r3, r0
 8000d24:	608b      	str	r3, [r1, #8]
 8000d26:	e789      	b.n	8000c3c <HAL_RCC_ClockConfig+0x38>
 8000d28:	40023c00 	.word	0x40023c00
 8000d2c:	40023800 	.word	0x40023800
 8000d30:	08002056 	.word	0x08002056
 8000d34:	20000008 	.word	0x20000008
 8000d38:	20000004 	.word	0x20000004

08000d3c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000d3c:	4b04      	ldr	r3, [pc, #16]	; (8000d50 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000d3e:	4a05      	ldr	r2, [pc, #20]	; (8000d54 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000d40:	689b      	ldr	r3, [r3, #8]
 8000d42:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8000d46:	5cd3      	ldrb	r3, [r2, r3]
 8000d48:	4a03      	ldr	r2, [pc, #12]	; (8000d58 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000d4a:	6810      	ldr	r0, [r2, #0]
}
 8000d4c:	40d8      	lsrs	r0, r3
 8000d4e:	4770      	bx	lr
 8000d50:	40023800 	.word	0x40023800
 8000d54:	08002066 	.word	0x08002066
 8000d58:	20000008 	.word	0x20000008

08000d5c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000d5c:	4b04      	ldr	r3, [pc, #16]	; (8000d70 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000d5e:	4a05      	ldr	r2, [pc, #20]	; (8000d74 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000d60:	689b      	ldr	r3, [r3, #8]
 8000d62:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8000d66:	5cd3      	ldrb	r3, [r2, r3]
 8000d68:	4a03      	ldr	r2, [pc, #12]	; (8000d78 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000d6a:	6810      	ldr	r0, [r2, #0]
}
 8000d6c:	40d8      	lsrs	r0, r3
 8000d6e:	4770      	bx	lr
 8000d70:	40023800 	.word	0x40023800
 8000d74:	08002066 	.word	0x08002066
 8000d78:	20000008 	.word	0x20000008

08000d7c <SPI_WaitFlagStateUntilTimeout.constprop.9>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8000d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d7e:	4604      	mov	r4, r0
 8000d80:	460e      	mov	r6, r1
 8000d82:	4615      	mov	r5, r2
 8000d84:	461f      	mov	r7, r3
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8000d86:	6821      	ldr	r1, [r4, #0]
 8000d88:	688a      	ldr	r2, [r1, #8]
 8000d8a:	ea36 0302 	bics.w	r3, r6, r2
 8000d8e:	d001      	beq.n	8000d94 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x18>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8000d90:	2000      	movs	r0, #0
}
 8000d92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 8000d94:	1c6b      	adds	r3, r5, #1
 8000d96:	d0f7      	beq.n	8000d88 <SPI_WaitFlagStateUntilTimeout.constprop.9+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8000d98:	f7ff fbf6 	bl	8000588 <HAL_GetTick>
 8000d9c:	1bc0      	subs	r0, r0, r7
 8000d9e:	4285      	cmp	r5, r0
 8000da0:	d8f1      	bhi.n	8000d86 <SPI_WaitFlagStateUntilTimeout.constprop.9+0xa>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8000da2:	6823      	ldr	r3, [r4, #0]
 8000da4:	685a      	ldr	r2, [r3, #4]
 8000da6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8000daa:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000dac:	6862      	ldr	r2, [r4, #4]
 8000dae:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8000db2:	d10a      	bne.n	8000dca <SPI_WaitFlagStateUntilTimeout.constprop.9+0x4e>
 8000db4:	68a2      	ldr	r2, [r4, #8]
 8000db6:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8000dba:	d002      	beq.n	8000dc2 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x46>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8000dbc:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8000dc0:	d103      	bne.n	8000dca <SPI_WaitFlagStateUntilTimeout.constprop.9+0x4e>
          __HAL_SPI_DISABLE(hspi);
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000dc8:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8000dca:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000dcc:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8000dd0:	d107      	bne.n	8000de2 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x66>
          SPI_RESET_CRC(hspi);
 8000dd2:	681a      	ldr	r2, [r3, #0]
 8000dd4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000dd8:	601a      	str	r2, [r3, #0]
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000de0:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8000de2:	2301      	movs	r3, #1
 8000de4:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8000de8:	2300      	movs	r3, #0
 8000dea:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8000dee:	2003      	movs	r0, #3
 8000df0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000df4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8000df4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000df6:	4613      	mov	r3, r2
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8000df8:	4a13      	ldr	r2, [pc, #76]	; (8000e48 <SPI_EndRxTxTransaction+0x54>)
 8000dfa:	4e14      	ldr	r6, [pc, #80]	; (8000e4c <SPI_EndRxTxTransaction+0x58>)
 8000dfc:	6815      	ldr	r5, [r2, #0]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8000dfe:	6842      	ldr	r2, [r0, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8000e00:	fbb5 f6f6 	udiv	r6, r5, r6
 8000e04:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8000e08:	4375      	muls	r5, r6
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8000e0a:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
{
 8000e0e:	4604      	mov	r4, r0
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8000e10:	9501      	str	r5, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8000e12:	d10d      	bne.n	8000e30 <SPI_EndRxTxTransaction+0x3c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8000e14:	460a      	mov	r2, r1
 8000e16:	2180      	movs	r1, #128	; 0x80
 8000e18:	f7ff ffb0 	bl	8000d7c <SPI_WaitFlagStateUntilTimeout.constprop.9>
 8000e1c:	b910      	cbnz	r0, 8000e24 <SPI_EndRxTxTransaction+0x30>
      }
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
  }

  return HAL_OK;
 8000e1e:	2000      	movs	r0, #0
}
 8000e20:	b002      	add	sp, #8
 8000e22:	bd70      	pop	{r4, r5, r6, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8000e24:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000e26:	f043 0320 	orr.w	r3, r3, #32
 8000e2a:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8000e2c:	2003      	movs	r0, #3
 8000e2e:	e7f7      	b.n	8000e20 <SPI_EndRxTxTransaction+0x2c>
      if (count == 0U)
 8000e30:	9b01      	ldr	r3, [sp, #4]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d0f3      	beq.n	8000e1e <SPI_EndRxTxTransaction+0x2a>
      count--;
 8000e36:	9b01      	ldr	r3, [sp, #4]
 8000e38:	3b01      	subs	r3, #1
 8000e3a:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8000e3c:	6823      	ldr	r3, [r4, #0]
 8000e3e:	689b      	ldr	r3, [r3, #8]
 8000e40:	061b      	lsls	r3, r3, #24
 8000e42:	d4f5      	bmi.n	8000e30 <SPI_EndRxTxTransaction+0x3c>
 8000e44:	e7eb      	b.n	8000e1e <SPI_EndRxTxTransaction+0x2a>
 8000e46:	bf00      	nop
 8000e48:	20000008 	.word	0x20000008
 8000e4c:	016e3600 	.word	0x016e3600

08000e50 <HAL_SPI_Init>:
{
 8000e50:	b510      	push	{r4, lr}
  if (hspi == NULL)
 8000e52:	4604      	mov	r4, r0
 8000e54:	2800      	cmp	r0, #0
 8000e56:	d036      	beq.n	8000ec6 <HAL_SPI_Init+0x76>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8000e5c:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8000e60:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000e64:	b91b      	cbnz	r3, 8000e6e <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 8000e66:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8000e6a:	f000 ffdf 	bl	8001e2c <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8000e6e:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000e70:	68a0      	ldr	r0, [r4, #8]
 8000e72:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 8000e74:	2302      	movs	r3, #2
 8000e76:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8000e7a:	680b      	ldr	r3, [r1, #0]
 8000e7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000e80:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000e82:	6863      	ldr	r3, [r4, #4]
 8000e84:	4303      	orrs	r3, r0
 8000e86:	68e0      	ldr	r0, [r4, #12]
 8000e88:	4303      	orrs	r3, r0
 8000e8a:	6920      	ldr	r0, [r4, #16]
 8000e8c:	4303      	orrs	r3, r0
 8000e8e:	6960      	ldr	r0, [r4, #20]
 8000e90:	4303      	orrs	r3, r0
 8000e92:	69e0      	ldr	r0, [r4, #28]
 8000e94:	4303      	orrs	r3, r0
 8000e96:	6a20      	ldr	r0, [r4, #32]
 8000e98:	4303      	orrs	r3, r0
 8000e9a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8000e9c:	4303      	orrs	r3, r0
 8000e9e:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8000ea2:	4303      	orrs	r3, r0
 8000ea4:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8000ea6:	0c12      	lsrs	r2, r2, #16
 8000ea8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000eaa:	f002 0204 	and.w	r2, r2, #4
 8000eae:	431a      	orrs	r2, r3
 8000eb0:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000eb2:	69cb      	ldr	r3, [r1, #28]
 8000eb4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000eb8:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000eba:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8000ebc:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000ebe:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8000ec0:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  return HAL_OK;
 8000ec4:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000ec6:	2001      	movs	r0, #1
}
 8000ec8:	bd10      	pop	{r4, pc}

08000eca <HAL_SPI_TransmitReceive>:
{
 8000eca:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8000ece:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8000ed0:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8000ed4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 8000ed6:	2b01      	cmp	r3, #1
{
 8000ed8:	4604      	mov	r4, r0
 8000eda:	460d      	mov	r5, r1
 8000edc:	4691      	mov	r9, r2
  __HAL_LOCK(hspi);
 8000ede:	f000 80e2 	beq.w	80010a6 <HAL_SPI_TransmitReceive+0x1dc>
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8000ee8:	f7ff fb4e 	bl	8000588 <HAL_GetTick>
  tmp_state           = hspi->State;
 8000eec:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tmp_mode            = hspi->Init.Mode;
 8000ef0:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 8000ef2:	b2db      	uxtb	r3, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8000ef4:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8000ef6:	4680      	mov	r8, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8000ef8:	d00a      	beq.n	8000f10 <HAL_SPI_TransmitReceive+0x46>
 8000efa:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8000efe:	f040 80d0 	bne.w	80010a2 <HAL_SPI_TransmitReceive+0x1d8>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8000f02:	68a0      	ldr	r0, [r4, #8]
 8000f04:	2800      	cmp	r0, #0
 8000f06:	f040 80cc 	bne.w	80010a2 <HAL_SPI_TransmitReceive+0x1d8>
 8000f0a:	2b04      	cmp	r3, #4
 8000f0c:	f040 80c9 	bne.w	80010a2 <HAL_SPI_TransmitReceive+0x1d8>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8000f10:	2d00      	cmp	r5, #0
 8000f12:	f000 80c4 	beq.w	800109e <HAL_SPI_TransmitReceive+0x1d4>
 8000f16:	f1b9 0f00 	cmp.w	r9, #0
 8000f1a:	f000 80c0 	beq.w	800109e <HAL_SPI_TransmitReceive+0x1d4>
 8000f1e:	2e00      	cmp	r6, #0
 8000f20:	f000 80bd 	beq.w	800109e <HAL_SPI_TransmitReceive+0x1d4>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8000f24:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8000f28:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8000f2c:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8000f2e:	bf1c      	itt	ne
 8000f30:	2305      	movne	r3, #5
 8000f32:	f884 3051 	strbne.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000f36:	2300      	movs	r3, #0
 8000f38:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 8000f3a:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8000f3c:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8000f3e:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8000f40:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 8000f42:	86e6      	strh	r6, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8000f44:	681a      	ldr	r2, [r3, #0]
  hspi->RxXferSize  = Size;
 8000f46:	87a6      	strh	r6, [r4, #60]	; 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8000f48:	0650      	lsls	r0, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8000f4a:	bf58      	it	pl
 8000f4c:	681a      	ldrpl	r2, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8000f4e:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 8000f50:	bf58      	it	pl
 8000f52:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
  hspi->TxXferSize  = Size;
 8000f56:	86a6      	strh	r6, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 8000f58:	bf58      	it	pl
 8000f5a:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8000f5c:	68e2      	ldr	r2, [r4, #12]
 8000f5e:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8000f62:	d158      	bne.n	8001016 <HAL_SPI_TransmitReceive+0x14c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8000f64:	b109      	cbz	r1, 8000f6a <HAL_SPI_TransmitReceive+0xa0>
 8000f66:	2e01      	cmp	r6, #1
 8000f68:	d107      	bne.n	8000f7a <HAL_SPI_TransmitReceive+0xb0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8000f6a:	f835 2b02 	ldrh.w	r2, [r5], #2
 8000f6e:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8000f70:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8000f72:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8000f74:	3b01      	subs	r3, #1
 8000f76:	b29b      	uxth	r3, r3
 8000f78:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8000f7a:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8000f7c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000f7e:	b29b      	uxth	r3, r3
 8000f80:	b9ab      	cbnz	r3, 8000fae <HAL_SPI_TransmitReceive+0xe4>
 8000f82:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000f84:	b29b      	uxth	r3, r3
 8000f86:	b993      	cbnz	r3, 8000fae <HAL_SPI_TransmitReceive+0xe4>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8000f88:	4642      	mov	r2, r8
 8000f8a:	4639      	mov	r1, r7
 8000f8c:	4620      	mov	r0, r4
 8000f8e:	f7ff ff31 	bl	8000df4 <SPI_EndRxTxTransaction>
 8000f92:	2800      	cmp	r0, #0
 8000f94:	f040 8081 	bne.w	800109a <HAL_SPI_TransmitReceive+0x1d0>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8000f98:	68a3      	ldr	r3, [r4, #8]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d132      	bne.n	8001004 <HAL_SPI_TransmitReceive+0x13a>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8000f9e:	6823      	ldr	r3, [r4, #0]
 8000fa0:	9001      	str	r0, [sp, #4]
 8000fa2:	68da      	ldr	r2, [r3, #12]
 8000fa4:	9201      	str	r2, [sp, #4]
 8000fa6:	689b      	ldr	r3, [r3, #8]
 8000fa8:	9301      	str	r3, [sp, #4]
 8000faa:	9b01      	ldr	r3, [sp, #4]
 8000fac:	e02a      	b.n	8001004 <HAL_SPI_TransmitReceive+0x13a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8000fae:	6822      	ldr	r2, [r4, #0]
 8000fb0:	6893      	ldr	r3, [r2, #8]
 8000fb2:	0799      	lsls	r1, r3, #30
 8000fb4:	d50d      	bpl.n	8000fd2 <HAL_SPI_TransmitReceive+0x108>
 8000fb6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000fb8:	b29b      	uxth	r3, r3
 8000fba:	b153      	cbz	r3, 8000fd2 <HAL_SPI_TransmitReceive+0x108>
 8000fbc:	b14d      	cbz	r5, 8000fd2 <HAL_SPI_TransmitReceive+0x108>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8000fbe:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000fc0:	f833 1b02 	ldrh.w	r1, [r3], #2
 8000fc4:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8000fc6:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8000fc8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000fca:	3b01      	subs	r3, #1
 8000fcc:	b29b      	uxth	r3, r3
 8000fce:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8000fd0:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8000fd2:	6893      	ldr	r3, [r2, #8]
 8000fd4:	07db      	lsls	r3, r3, #31
 8000fd6:	d50c      	bpl.n	8000ff2 <HAL_SPI_TransmitReceive+0x128>
 8000fd8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000fda:	b29b      	uxth	r3, r3
 8000fdc:	b14b      	cbz	r3, 8000ff2 <HAL_SPI_TransmitReceive+0x128>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8000fde:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000fe0:	68d2      	ldr	r2, [r2, #12]
 8000fe2:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8000fe6:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8000fe8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000fea:	3b01      	subs	r3, #1
 8000fec:	b29b      	uxth	r3, r3
 8000fee:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8000ff0:	2501      	movs	r5, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8000ff2:	f7ff fac9 	bl	8000588 <HAL_GetTick>
 8000ff6:	eba0 0008 	sub.w	r0, r0, r8
 8000ffa:	4287      	cmp	r7, r0
 8000ffc:	d8be      	bhi.n	8000f7c <HAL_SPI_TransmitReceive+0xb2>
 8000ffe:	1c7e      	adds	r6, r7, #1
 8001000:	d0bc      	beq.n	8000f7c <HAL_SPI_TransmitReceive+0xb2>
        errorcode = HAL_TIMEOUT;
 8001002:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8001004:	2301      	movs	r3, #1
 8001006:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800100a:	2300      	movs	r3, #0
 800100c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8001010:	b003      	add	sp, #12
 8001012:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001016:	b109      	cbz	r1, 800101c <HAL_SPI_TransmitReceive+0x152>
 8001018:	2e01      	cmp	r6, #1
 800101a:	d108      	bne.n	800102e <HAL_SPI_TransmitReceive+0x164>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800101c:	782a      	ldrb	r2, [r5, #0]
 800101e:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001020:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001022:	3301      	adds	r3, #1
 8001024:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8001026:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001028:	3b01      	subs	r3, #1
 800102a:	b29b      	uxth	r3, r3
 800102c:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 800102e:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001030:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001032:	b29b      	uxth	r3, r3
 8001034:	b91b      	cbnz	r3, 800103e <HAL_SPI_TransmitReceive+0x174>
 8001036:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001038:	b29b      	uxth	r3, r3
 800103a:	2b00      	cmp	r3, #0
 800103c:	d0a4      	beq.n	8000f88 <HAL_SPI_TransmitReceive+0xbe>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800103e:	6822      	ldr	r2, [r4, #0]
 8001040:	6893      	ldr	r3, [r2, #8]
 8001042:	0798      	lsls	r0, r3, #30
 8001044:	d50e      	bpl.n	8001064 <HAL_SPI_TransmitReceive+0x19a>
 8001046:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001048:	b29b      	uxth	r3, r3
 800104a:	b15b      	cbz	r3, 8001064 <HAL_SPI_TransmitReceive+0x19a>
 800104c:	b155      	cbz	r5, 8001064 <HAL_SPI_TransmitReceive+0x19a>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800104e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 8001054:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001056:	3301      	adds	r3, #1
 8001058:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800105a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800105c:	3b01      	subs	r3, #1
 800105e:	b29b      	uxth	r3, r3
 8001060:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8001062:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001064:	6822      	ldr	r2, [r4, #0]
 8001066:	6893      	ldr	r3, [r2, #8]
 8001068:	07d9      	lsls	r1, r3, #31
 800106a:	d50d      	bpl.n	8001088 <HAL_SPI_TransmitReceive+0x1be>
 800106c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800106e:	b29b      	uxth	r3, r3
 8001070:	b153      	cbz	r3, 8001088 <HAL_SPI_TransmitReceive+0x1be>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001072:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001074:	68d2      	ldr	r2, [r2, #12]
 8001076:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001078:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800107a:	3301      	adds	r3, #1
 800107c:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800107e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001080:	3b01      	subs	r3, #1
 8001082:	b29b      	uxth	r3, r3
 8001084:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8001086:	2501      	movs	r5, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001088:	f7ff fa7e 	bl	8000588 <HAL_GetTick>
 800108c:	eba0 0008 	sub.w	r0, r0, r8
 8001090:	4287      	cmp	r7, r0
 8001092:	d8cd      	bhi.n	8001030 <HAL_SPI_TransmitReceive+0x166>
 8001094:	1c7b      	adds	r3, r7, #1
 8001096:	d0cb      	beq.n	8001030 <HAL_SPI_TransmitReceive+0x166>
 8001098:	e7b3      	b.n	8001002 <HAL_SPI_TransmitReceive+0x138>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800109a:	2320      	movs	r3, #32
 800109c:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 800109e:	2001      	movs	r0, #1
 80010a0:	e7b0      	b.n	8001004 <HAL_SPI_TransmitReceive+0x13a>
    errorcode = HAL_BUSY;
 80010a2:	2002      	movs	r0, #2
 80010a4:	e7ae      	b.n	8001004 <HAL_SPI_TransmitReceive+0x13a>
  __HAL_LOCK(hspi);
 80010a6:	2002      	movs	r0, #2
 80010a8:	e7b2      	b.n	8001010 <HAL_SPI_TransmitReceive+0x146>
	...

080010ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80010ac:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80010ae:	6803      	ldr	r3, [r0, #0]
 80010b0:	68c1      	ldr	r1, [r0, #12]
 80010b2:	691a      	ldr	r2, [r3, #16]
{
 80010b4:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80010b6:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80010ba:	430a      	orrs	r2, r1
 80010bc:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80010be:	6925      	ldr	r5, [r4, #16]
 80010c0:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1,
 80010c2:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80010c4:	69c0      	ldr	r0, [r0, #28]
 80010c6:	432a      	orrs	r2, r5
 80010c8:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 80010ca:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80010ce:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 80010d0:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80010d4:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 80010d6:	430a      	orrs	r2, r1
 80010d8:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80010da:	695a      	ldr	r2, [r3, #20]
 80010dc:	69a1      	ldr	r1, [r4, #24]
 80010de:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80010e2:	430a      	orrs	r2, r1

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80010e4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80010e8:	615a      	str	r2, [r3, #20]
 80010ea:	4a25      	ldr	r2, [pc, #148]	; (8001180 <UART_SetConfig+0xd4>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80010ec:	d129      	bne.n	8001142 <UART_SetConfig+0x96>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d003      	beq.n	80010fa <UART_SetConfig+0x4e>
 80010f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d120      	bne.n	800113c <UART_SetConfig+0x90>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80010fa:	f7ff fe2f 	bl	8000d5c <HAL_RCC_GetPCLK2Freq>
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80010fe:	6862      	ldr	r2, [r4, #4]
 8001100:	6825      	ldr	r5, [r4, #0]
 8001102:	1892      	adds	r2, r2, r2
 8001104:	f04f 0300 	mov.w	r3, #0
 8001108:	f04f 0119 	mov.w	r1, #25
 800110c:	415b      	adcs	r3, r3
 800110e:	fba0 0101 	umull	r0, r1, r0, r1
 8001112:	f7ff f867 	bl	80001e4 <__aeabi_uldivmod>
 8001116:	2164      	movs	r1, #100	; 0x64
 8001118:	fbb0 f4f1 	udiv	r4, r0, r1
 800111c:	fb01 0314 	mls	r3, r1, r4, r0
 8001120:	00db      	lsls	r3, r3, #3
 8001122:	3332      	adds	r3, #50	; 0x32
 8001124:	fbb3 f3f1 	udiv	r3, r3, r1
 8001128:	f003 0207 	and.w	r2, r3, #7
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 8001132:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001136:	4413      	add	r3, r2
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001138:	60ab      	str	r3, [r5, #8]
 800113a:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 800113c:	f7ff fdfe 	bl	8000d3c <HAL_RCC_GetPCLK1Freq>
 8001140:	e7dd      	b.n	80010fe <UART_SetConfig+0x52>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001142:	4293      	cmp	r3, r2
 8001144:	d002      	beq.n	800114c <UART_SetConfig+0xa0>
 8001146:	4a0f      	ldr	r2, [pc, #60]	; (8001184 <UART_SetConfig+0xd8>)
 8001148:	4293      	cmp	r3, r2
 800114a:	d116      	bne.n	800117a <UART_SetConfig+0xce>
      pclk = HAL_RCC_GetPCLK2Freq();
 800114c:	f7ff fe06 	bl	8000d5c <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001150:	6863      	ldr	r3, [r4, #4]
 8001152:	6825      	ldr	r5, [r4, #0]
 8001154:	2119      	movs	r1, #25
 8001156:	009a      	lsls	r2, r3, #2
 8001158:	fba0 0101 	umull	r0, r1, r0, r1
 800115c:	0f9b      	lsrs	r3, r3, #30
 800115e:	f7ff f841 	bl	80001e4 <__aeabi_uldivmod>
 8001162:	2264      	movs	r2, #100	; 0x64
 8001164:	fbb0 f1f2 	udiv	r1, r0, r2
 8001168:	fb02 0311 	mls	r3, r2, r1, r0
 800116c:	011b      	lsls	r3, r3, #4
 800116e:	3332      	adds	r3, #50	; 0x32
 8001170:	fbb3 f3f2 	udiv	r3, r3, r2
 8001174:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8001178:	e7de      	b.n	8001138 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK1Freq();
 800117a:	f7ff fddf 	bl	8000d3c <HAL_RCC_GetPCLK1Freq>
 800117e:	e7e7      	b.n	8001150 <UART_SetConfig+0xa4>
 8001180:	40011000 	.word	0x40011000
 8001184:	40011400 	.word	0x40011400

08001188 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8001188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800118a:	4604      	mov	r4, r0
 800118c:	460e      	mov	r6, r1
 800118e:	4617      	mov	r7, r2
 8001190:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001192:	6821      	ldr	r1, [r4, #0]
 8001194:	680b      	ldr	r3, [r1, #0]
 8001196:	ea36 0303 	bics.w	r3, r6, r3
 800119a:	d101      	bne.n	80011a0 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 800119c:	2000      	movs	r0, #0
}
 800119e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 80011a0:	1c6b      	adds	r3, r5, #1
 80011a2:	d0f7      	beq.n	8001194 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80011a4:	b995      	cbnz	r5, 80011cc <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80011a6:	6823      	ldr	r3, [r4, #0]
 80011a8:	68da      	ldr	r2, [r3, #12]
 80011aa:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80011ae:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80011b0:	695a      	ldr	r2, [r3, #20]
 80011b2:	f022 0201 	bic.w	r2, r2, #1
 80011b6:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 80011b8:	2320      	movs	r3, #32
 80011ba:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80011be:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 80011c2:	2300      	movs	r3, #0
 80011c4:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 80011c8:	2003      	movs	r0, #3
 80011ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80011cc:	f7ff f9dc 	bl	8000588 <HAL_GetTick>
 80011d0:	1bc0      	subs	r0, r0, r7
 80011d2:	4285      	cmp	r5, r0
 80011d4:	d2dd      	bcs.n	8001192 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 80011d6:	e7e6      	b.n	80011a6 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

080011d8 <HAL_UART_Init>:
{
 80011d8:	b510      	push	{r4, lr}
  if (huart == NULL)
 80011da:	4604      	mov	r4, r0
 80011dc:	b340      	cbz	r0, 8001230 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 80011de:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80011e2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80011e6:	b91b      	cbnz	r3, 80011f0 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80011e8:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80011ec:	f000 fe6c 	bl	8001ec8 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80011f0:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80011f2:	2324      	movs	r3, #36	; 0x24
 80011f4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80011f8:	68d3      	ldr	r3, [r2, #12]
 80011fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80011fe:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001200:	4620      	mov	r0, r4
 8001202:	f7ff ff53 	bl	80010ac <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001206:	6823      	ldr	r3, [r4, #0]
 8001208:	691a      	ldr	r2, [r3, #16]
 800120a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800120e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001210:	695a      	ldr	r2, [r3, #20]
 8001212:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001216:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001218:	68da      	ldr	r2, [r3, #12]
 800121a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800121e:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001220:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8001222:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001224:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001226:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800122a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 800122e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001230:	2001      	movs	r0, #1
}
 8001232:	bd10      	pop	{r4, pc}

08001234 <HAL_UART_Transmit>:
{
 8001234:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001238:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800123a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800123e:	2b20      	cmp	r3, #32
{
 8001240:	4604      	mov	r4, r0
 8001242:	460d      	mov	r5, r1
 8001244:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8001246:	d151      	bne.n	80012ec <HAL_UART_Transmit+0xb8>
    if ((pData == NULL) || (Size == 0U))
 8001248:	2900      	cmp	r1, #0
 800124a:	d04c      	beq.n	80012e6 <HAL_UART_Transmit+0xb2>
 800124c:	2a00      	cmp	r2, #0
 800124e:	d04a      	beq.n	80012e6 <HAL_UART_Transmit+0xb2>
    __HAL_LOCK(huart);
 8001250:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001254:	2b01      	cmp	r3, #1
 8001256:	d049      	beq.n	80012ec <HAL_UART_Transmit+0xb8>
 8001258:	2301      	movs	r3, #1
 800125a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800125e:	f04f 0900 	mov.w	r9, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001262:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001264:	f8c0 903c 	str.w	r9, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001268:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 800126c:	f7ff f98c 	bl	8000588 <HAL_GetTick>
    huart->TxXferSize = Size;
 8001270:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 8001274:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8001276:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    __HAL_UNLOCK(huart);
 800127a:	f884 9038 	strb.w	r9, [r4, #56]	; 0x38
    while (huart->TxXferCount > 0U)
 800127e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001280:	b29b      	uxth	r3, r3
 8001282:	b95b      	cbnz	r3, 800129c <HAL_UART_Transmit+0x68>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001284:	463b      	mov	r3, r7
 8001286:	4632      	mov	r2, r6
 8001288:	2140      	movs	r1, #64	; 0x40
 800128a:	4620      	mov	r0, r4
 800128c:	f7ff ff7c 	bl	8001188 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001290:	b9a0      	cbnz	r0, 80012bc <HAL_UART_Transmit+0x88>
    huart->gState = HAL_UART_STATE_READY;
 8001292:	2320      	movs	r3, #32
 8001294:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8001298:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      huart->TxXferCount--;
 800129c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800129e:	3b01      	subs	r3, #1
 80012a0:	b29b      	uxth	r3, r3
 80012a2:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80012a4:	68a3      	ldr	r3, [r4, #8]
 80012a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80012aa:	4632      	mov	r2, r6
 80012ac:	463b      	mov	r3, r7
 80012ae:	f04f 0180 	mov.w	r1, #128	; 0x80
 80012b2:	4620      	mov	r0, r4
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80012b4:	d10e      	bne.n	80012d4 <HAL_UART_Transmit+0xa0>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80012b6:	f7ff ff67 	bl	8001188 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80012ba:	b110      	cbz	r0, 80012c2 <HAL_UART_Transmit+0x8e>
          return HAL_TIMEOUT;
 80012bc:	2003      	movs	r0, #3
 80012be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80012c2:	882b      	ldrh	r3, [r5, #0]
 80012c4:	6822      	ldr	r2, [r4, #0]
 80012c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80012ca:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80012cc:	6923      	ldr	r3, [r4, #16]
 80012ce:	b943      	cbnz	r3, 80012e2 <HAL_UART_Transmit+0xae>
          pData += 2U;
 80012d0:	3502      	adds	r5, #2
 80012d2:	e7d4      	b.n	800127e <HAL_UART_Transmit+0x4a>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80012d4:	f7ff ff58 	bl	8001188 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80012d8:	2800      	cmp	r0, #0
 80012da:	d1ef      	bne.n	80012bc <HAL_UART_Transmit+0x88>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80012dc:	6823      	ldr	r3, [r4, #0]
 80012de:	782a      	ldrb	r2, [r5, #0]
 80012e0:	605a      	str	r2, [r3, #4]
 80012e2:	3501      	adds	r5, #1
 80012e4:	e7cb      	b.n	800127e <HAL_UART_Transmit+0x4a>
      return  HAL_ERROR;
 80012e6:	2001      	movs	r0, #1
 80012e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 80012ec:	2002      	movs	r0, #2
}
 80012ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

080012f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012f4:	b530      	push	{r4, r5, lr}
 80012f6:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012f8:	2230      	movs	r2, #48	; 0x30
 80012fa:	2100      	movs	r1, #0
 80012fc:	a808      	add	r0, sp, #32
 80012fe:	f000 fe81 	bl	8002004 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001302:	2100      	movs	r1, #0
 8001304:	2214      	movs	r2, #20
 8001306:	a803      	add	r0, sp, #12
 8001308:	f000 fe7c 	bl	8002004 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800130c:	2400      	movs	r4, #0
 800130e:	4b1c      	ldr	r3, [pc, #112]	; (8001380 <SystemClock_Config+0x8c>)
 8001310:	9401      	str	r4, [sp, #4]
 8001312:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001314:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001318:	641a      	str	r2, [r3, #64]	; 0x40
 800131a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800131c:	4a19      	ldr	r2, [pc, #100]	; (8001384 <SystemClock_Config+0x90>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800131e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001322:	9301      	str	r3, [sp, #4]
 8001324:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001326:	9402      	str	r4, [sp, #8]
 8001328:	6813      	ldr	r3, [r2, #0]
 800132a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800132e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001332:	6013      	str	r3, [r2, #0]
 8001334:	6813      	ldr	r3, [r2, #0]
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001336:	940f      	str	r4, [sp, #60]	; 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001338:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800133c:	9302      	str	r3, [sp, #8]
 800133e:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001340:	2301      	movs	r3, #1
 8001342:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001344:	2310      	movs	r3, #16
 8001346:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001348:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800134a:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800134e:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001350:	2304      	movs	r3, #4
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001352:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001354:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001356:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001358:	2307      	movs	r3, #7
 800135a:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800135c:	9508      	str	r5, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800135e:	950e      	str	r5, [sp, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001360:	f7ff fa7c 	bl	800085c <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001364:	230f      	movs	r3, #15
 8001366:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001368:	4629      	mov	r1, r5
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800136a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800136e:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001370:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001372:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001374:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001376:	9407      	str	r4, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001378:	f7ff fc44 	bl	8000c04 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 800137c:	b015      	add	sp, #84	; 0x54
 800137e:	bd30      	pop	{r4, r5, pc}
 8001380:	40023800 	.word	0x40023800
 8001384:	40007000 	.word	0x40007000

08001388 <main>:
{
 8001388:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 800138c:	b093      	sub	sp, #76	; 0x4c
  HAL_Init();
 800138e:	f7ff f8d5 	bl	800053c <HAL_Init>
  SystemClock_Config();
 8001392:	f7ff ffaf 	bl	80012f4 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001396:	2214      	movs	r2, #20
 8001398:	2100      	movs	r1, #0
 800139a:	eb0d 0002 	add.w	r0, sp, r2

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800139e:	2400      	movs	r4, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a0:	f000 fe30 	bl	8002004 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013a4:	4b68      	ldr	r3, [pc, #416]	; (8001548 <main+0x1c0>)
 80013a6:	9401      	str	r4, [sp, #4]
 80013a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_Pin|CE_Pin, GPIO_PIN_RESET);
 80013aa:	4f68      	ldr	r7, [pc, #416]	; (800154c <main+0x1c4>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80013ac:	4e68      	ldr	r6, [pc, #416]	; (8001550 <main+0x1c8>)

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013ae:	4d69      	ldr	r5, [pc, #420]	; (8001554 <main+0x1cc>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013b0:	f042 0204 	orr.w	r2, r2, #4
 80013b4:	631a      	str	r2, [r3, #48]	; 0x30
 80013b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013b8:	f002 0204 	and.w	r2, r2, #4
 80013bc:	9201      	str	r2, [sp, #4]
 80013be:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013c0:	9402      	str	r4, [sp, #8]
 80013c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013c4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80013c8:	631a      	str	r2, [r3, #48]	; 0x30
 80013ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013cc:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80013d0:	9202      	str	r2, [sp, #8]
 80013d2:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d4:	9403      	str	r4, [sp, #12]
 80013d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013d8:	f042 0201 	orr.w	r2, r2, #1
 80013dc:	631a      	str	r2, [r3, #48]	; 0x30
 80013de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013e0:	f002 0201 	and.w	r2, r2, #1
 80013e4:	9203      	str	r2, [sp, #12]
 80013e6:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013e8:	9404      	str	r4, [sp, #16]
 80013ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013ec:	f042 0202 	orr.w	r2, r2, #2
 80013f0:	631a      	str	r2, [r3, #48]	; 0x30
 80013f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f4:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(GPIOC, CS_Pin|CE_Pin, GPIO_PIN_RESET);
 80013f8:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013fa:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOC, CS_Pin|CE_Pin, GPIO_PIN_RESET);
 80013fc:	2103      	movs	r1, #3
 80013fe:	4638      	mov	r0, r7
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001400:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOC, CS_Pin|CE_Pin, GPIO_PIN_RESET);
 8001402:	f7ff fa13 	bl	800082c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001406:	4622      	mov	r2, r4
 8001408:	2120      	movs	r1, #32
 800140a:	4630      	mov	r0, r6
 800140c:	f7ff fa0e 	bl	800082c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 8001410:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001414:	a905      	add	r1, sp, #20
 8001416:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = B1_Pin;
 8001418:	9305      	str	r3, [sp, #20]

  /*Configure GPIO pins : CS_Pin CE_Pin */
  GPIO_InitStruct.Pin = CS_Pin|CE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800141a:	f04f 0801 	mov.w	r8, #1
  GPIO_InitStruct.Pin = CS_Pin|CE_Pin;
 800141e:	f04f 0903 	mov.w	r9, #3
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001422:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001424:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001426:	f7ff f933 	bl	8000690 <HAL_GPIO_Init>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800142a:	a905      	add	r1, sp, #20
 800142c:	4638      	mov	r0, r7
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142e:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001430:	9408      	str	r4, [sp, #32]

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001432:	f04f 0a10 	mov.w	sl, #16
  GPIO_InitStruct.Pin = CS_Pin|CE_Pin;
 8001436:	f8cd 9014 	str.w	r9, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800143a:	f8cd 8018 	str.w	r8, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800143e:	f7ff f927 	bl	8000690 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001442:	a905      	add	r1, sp, #20
 8001444:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001446:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001448:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800144a:	f8cd a014 	str.w	sl, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800144e:	f7ff f91f 	bl	8000690 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001452:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001454:	a905      	add	r1, sp, #20
 8001456:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = LD2_Pin;
 8001458:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145a:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145c:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800145e:	f8cd 8018 	str.w	r8, [sp, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001462:	f7ff f915 	bl	8000690 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 1);
 8001466:	4621      	mov	r1, r4
 8001468:	4642      	mov	r2, r8
 800146a:	200a      	movs	r0, #10
 800146c:	f7ff f8b8 	bl	80005e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001470:	200a      	movs	r0, #10
 8001472:	f7ff f8e9 	bl	8000648 <HAL_NVIC_EnableIRQ>
  huart2.Instance = USART2;
 8001476:	4838      	ldr	r0, [pc, #224]	; (8001558 <main+0x1d0>)
  huart2.Init.BaudRate = 115200;
 8001478:	4a38      	ldr	r2, [pc, #224]	; (800155c <main+0x1d4>)
  hspi2.Instance = SPI2;
 800147a:	4d39      	ldr	r5, [pc, #228]	; (8001560 <main+0x1d8>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800147c:	6084      	str	r4, [r0, #8]
  huart2.Init.BaudRate = 115200;
 800147e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001482:	e880 000c 	stmia.w	r0, {r2, r3}
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001486:	230c      	movs	r3, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001488:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800148a:	6104      	str	r4, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800148c:	6143      	str	r3, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800148e:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001490:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001492:	f7ff fea1 	bl	80011d8 <HAL_UART_Init>
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001496:	4933      	ldr	r1, [pc, #204]	; (8001564 <main+0x1dc>)
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001498:	60ac      	str	r4, [r5, #8]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800149a:	f44f 7382 	mov.w	r3, #260	; 0x104
 800149e:	e885 000a 	stmia.w	r5, {r1, r3}
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80014a2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80014a6:	61ab      	str	r3, [r5, #24]
  hspi2.Init.CRCPolynomial = 10;
 80014a8:	f04f 0b0a 	mov.w	fp, #10
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80014ac:	2318      	movs	r3, #24
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80014ae:	4628      	mov	r0, r5
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80014b0:	60ec      	str	r4, [r5, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014b2:	612c      	str	r4, [r5, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014b4:	616c      	str	r4, [r5, #20]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80014b6:	61eb      	str	r3, [r5, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014b8:	622c      	str	r4, [r5, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80014ba:	626c      	str	r4, [r5, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014bc:	62ac      	str	r4, [r5, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80014be:	f8c5 b02c 	str.w	fp, [r5, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80014c2:	f7ff fcc5 	bl	8000e50 <HAL_SPI_Init>
      config.payload_length   = 4;    // maximum is 32 bytes
 80014c6:	2304      	movs	r3, #4
 80014c8:	f88d 3018 	strb.w	r3, [sp, #24]
      config.retransmit_count = 15;   // maximum is 15 times
 80014cc:	230f      	movs	r3, #15
 80014ce:	f88d 3019 	strb.w	r3, [sp, #25]
      config.retransmit_delay = 0x0F; // 4000us, LSB:250us
 80014d2:	f88d 301a 	strb.w	r3, [sp, #26]
      config.rx_address       = rx_address;
 80014d6:	4b24      	ldr	r3, [pc, #144]	; (8001568 <main+0x1e0>)
 80014d8:	9307      	str	r3, [sp, #28]
      config.tx_address       = tx_address;
 80014da:	4b24      	ldr	r3, [pc, #144]	; (800156c <main+0x1e4>)
 80014dc:	9308      	str	r3, [sp, #32]
      config.rx_buffer        = (uint8_t*)&rx_data;
 80014de:	4b24      	ldr	r3, [pc, #144]	; (8001570 <main+0x1e8>)
 80014e0:	9309      	str	r3, [sp, #36]	; 0x24
      nrf_init(&nrf, &config);
 80014e2:	a905      	add	r1, sp, #20
      config.ce_pin      = CE_Pin;
 80014e4:	2302      	movs	r3, #2
      nrf_init(&nrf, &config);
 80014e6:	4823      	ldr	r0, [pc, #140]	; (8001574 <main+0x1ec>)
      config.data_rate        = NRF_DATA_RATE_1MBPS;
 80014e8:	f88d 4014 	strb.w	r4, [sp, #20]
      config.crc_width        = NRF_CRC_WIDTH_1B;
 80014ec:	f88d 4016 	strb.w	r4, [sp, #22]
      config.rf_channel       = 0;
 80014f0:	f88d 401b 	strb.w	r4, [sp, #27]
      config.ce_pin      = CE_Pin;
 80014f4:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
      config.tx_power         = NRF_TX_PWR_0dBm;
 80014f8:	f88d 9015 	strb.w	r9, [sp, #21]
      config.addr_width       = NRF_ADDR_WIDTH_5;
 80014fc:	f88d 9017 	strb.w	r9, [sp, #23]
      config.spi         = &hspi2;
 8001500:	950a      	str	r5, [sp, #40]	; 0x28
      config.spi_timeout = 10; // milliseconds
 8001502:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
      config.ce_port     = CE_GPIO_Port;
 8001506:	970e      	str	r7, [sp, #56]	; 0x38
      config.csn_pin     = CS_Pin;
 8001508:	f8ad 8034 	strh.w	r8, [sp, #52]	; 0x34
      config.csn_port    = CS_GPIO_Port;
 800150c:	970c      	str	r7, [sp, #48]	; 0x30
      config.irq_port    = NRF_IRQ_GPIO_Port;
 800150e:	9610      	str	r6, [sp, #64]	; 0x40
      config.irq_pin     = NRF_IRQ_Pin;
 8001510:	f8ad a044 	strh.w	sl, [sp, #68]	; 0x44
      nrf_init(&nrf, &config);
 8001514:	f000 fbd5 	bl	8001cc2 <nrf_init>
  uint32_t tx_data = 0xDEADBEEF;
 8001518:	4b17      	ldr	r3, [pc, #92]	; (8001578 <main+0x1f0>)
  nrf_send_packet_noack(&nrf, (uint8_t*)&tx_data);
 800151a:	4816      	ldr	r0, [pc, #88]	; (8001574 <main+0x1ec>)
  uint32_t tx_data = 0xDEADBEEF;
 800151c:	9305      	str	r3, [sp, #20]
  nrf_send_packet_noack(&nrf, (uint8_t*)&tx_data);
 800151e:	a905      	add	r1, sp, #20
 8001520:	f000 fc49 	bl	8001db6 <nrf_send_packet_noack>
	            nrf_send_packet_noack(&nrf, (uint8_t*)&tx_data);
 8001524:	4c13      	ldr	r4, [pc, #76]	; (8001574 <main+0x1ec>)
	            HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001526:	2120      	movs	r1, #32
 8001528:	4630      	mov	r0, r6
 800152a:	f7ff f984 	bl	8000836 <HAL_GPIO_TogglePin>
	            HAL_Delay(500);
 800152e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001532:	f7ff f82f 	bl	8000594 <HAL_Delay>
	            HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001536:	4630      	mov	r0, r6
 8001538:	2120      	movs	r1, #32
 800153a:	f7ff f97c 	bl	8000836 <HAL_GPIO_TogglePin>
	            nrf_send_packet_noack(&nrf, (uint8_t*)&tx_data);
 800153e:	a905      	add	r1, sp, #20
 8001540:	4620      	mov	r0, r4
 8001542:	f000 fc38 	bl	8001db6 <nrf_send_packet_noack>
 8001546:	e7ee      	b.n	8001526 <main+0x19e>
 8001548:	40023800 	.word	0x40023800
 800154c:	40020800 	.word	0x40020800
 8001550:	40020000 	.word	0x40020000
 8001554:	10210000 	.word	0x10210000
 8001558:	200000c0 	.word	0x200000c0
 800155c:	40004400 	.word	0x40004400
 8001560:	2000002c 	.word	0x2000002c
 8001564:	40003800 	.word	0x40003800
 8001568:	0800204c 	.word	0x0800204c
 800156c:	08002051 	.word	0x08002051
 8001570:	200000bc 	.word	0x200000bc
 8001574:	20000084 	.word	0x20000084
 8001578:	deadbeef 	.word	0xdeadbeef

0800157c <HAL_GPIO_EXTI_Callback>:
}

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
	if(GPIO_Pin==NRF_IRQ_Pin){
 800157c:	2810      	cmp	r0, #16
{
 800157e:	b508      	push	{r3, lr}
	if(GPIO_Pin==NRF_IRQ_Pin){
 8001580:	d112      	bne.n	80015a8 <HAL_GPIO_EXTI_Callback+0x2c>
	    sprintf(buffer,"IRQ triggired\n\r");
 8001582:	490a      	ldr	r1, [pc, #40]	; (80015ac <HAL_GPIO_EXTI_Callback+0x30>)
 8001584:	480a      	ldr	r0, [pc, #40]	; (80015b0 <HAL_GPIO_EXTI_Callback+0x34>)
 8001586:	f000 fd45 	bl	8002014 <strcpy>
	    HAL_UART_Transmit(&huart2,buffer,strlen(buffer),1000);
 800158a:	4809      	ldr	r0, [pc, #36]	; (80015b0 <HAL_GPIO_EXTI_Callback+0x34>)
 800158c:	f7fe fe22 	bl	80001d4 <strlen>
 8001590:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001594:	b282      	uxth	r2, r0
 8001596:	4906      	ldr	r1, [pc, #24]	; (80015b0 <HAL_GPIO_EXTI_Callback+0x34>)
 8001598:	4806      	ldr	r0, [pc, #24]	; (80015b4 <HAL_GPIO_EXTI_Callback+0x38>)
 800159a:	f7ff fe4b 	bl	8001234 <HAL_UART_Transmit>
	    nrf_irq_handler(&nrf);
 800159e:	4806      	ldr	r0, [pc, #24]	; (80015b8 <HAL_GPIO_EXTI_Callback+0x3c>)
	}
}
 80015a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	    nrf_irq_handler(&nrf);
 80015a4:	f000 ba4b 	b.w	8001a3e <nrf_irq_handler>
 80015a8:	bd08      	pop	{r3, pc}
 80015aa:	bf00      	nop
 80015ac:	0800203c 	.word	0x0800203c
 80015b0:	20000100 	.word	0x20000100
 80015b4:	200000c0 	.word	0x200000c0
 80015b8:	20000084 	.word	0x20000084

080015bc <ce_reset>:
static void ce_set(nrf24l01* dev) {
    HAL_GPIO_WritePin(dev->config.ce_port, dev->config.ce_pin, GPIO_PIN_SET);
}

static void ce_reset(nrf24l01* dev) {
    HAL_GPIO_WritePin(dev->config.ce_port, dev->config.ce_pin, GPIO_PIN_RESET);
 80015bc:	8d01      	ldrh	r1, [r0, #40]	; 0x28
 80015be:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80015c0:	2200      	movs	r2, #0
 80015c2:	f7ff b933 	b.w	800082c <HAL_GPIO_WritePin>

080015c6 <ce_set>:
    HAL_GPIO_WritePin(dev->config.ce_port, dev->config.ce_pin, GPIO_PIN_SET);
 80015c6:	8d01      	ldrh	r1, [r0, #40]	; 0x28
 80015c8:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80015ca:	2201      	movs	r2, #1
 80015cc:	f7ff b92e 	b.w	800082c <HAL_GPIO_WritePin>

080015d0 <nrf_send_command>:

    return NRF_OK;
}

NRF_RESULT nrf_send_command(nrf24l01* dev, NRF_COMMAND cmd, const uint8_t* tx,
                            uint8_t* rx, uint8_t len) {
 80015d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80015d4:	b082      	sub	sp, #8
 80015d6:	af02      	add	r7, sp, #8
 80015d8:	461e      	mov	r6, r3
 80015da:	f897 a020 	ldrb.w	sl, [r7, #32]
    uint8_t myTX[len + 1];
 80015de:	f10a 0308 	add.w	r3, sl, #8
 80015e2:	f023 0307 	bic.w	r3, r3, #7
 80015e6:	ebad 0d03 	sub.w	sp, sp, r3
 80015ea:	f10d 0908 	add.w	r9, sp, #8
    uint8_t myRX[len + 1];
 80015ee:	ebad 0d03 	sub.w	sp, sp, r3
    myTX[0] = cmd;
 80015f2:	464b      	mov	r3, r9
 80015f4:	f10a 38ff 	add.w	r8, sl, #4294967295
                            uint8_t* rx, uint8_t len) {
 80015f8:	4604      	mov	r4, r0
    myTX[0] = cmd;
 80015fa:	f803 1b01 	strb.w	r1, [r3], #1
    uint8_t myRX[len + 1];
 80015fe:	ad02      	add	r5, sp, #8
 8001600:	1e51      	subs	r1, r2, #1
 8001602:	f10d 0007 	add.w	r0, sp, #7
 8001606:	4442      	add	r2, r8

    int i = 0;
    for (i = 0; i < len; i++) {
        myTX[1 + i] = tx[i];
        myRX[i]     = 0;
 8001608:	f04f 0e00 	mov.w	lr, #0
    for (i = 0; i < len; i++) {
 800160c:	4291      	cmp	r1, r2
 800160e:	d11c      	bne.n	800164a <nrf_send_command+0x7a>
    HAL_GPIO_WritePin(dev->config.csn_port, dev->config.csn_pin,
 8001610:	2200      	movs	r2, #0
 8001612:	8c21      	ldrh	r1, [r4, #32]
 8001614:	69e0      	ldr	r0, [r4, #28]
 8001616:	f7ff f909 	bl	800082c <HAL_GPIO_WritePin>
    }

    csn_reset(dev);

    if (HAL_SPI_TransmitReceive(dev->config.spi, myTX, myRX, 1 + len,
 800161a:	69a3      	ldr	r3, [r4, #24]
 800161c:	9300      	str	r3, [sp, #0]
 800161e:	462a      	mov	r2, r5
 8001620:	f10a 0301 	add.w	r3, sl, #1
 8001624:	4649      	mov	r1, r9
 8001626:	6960      	ldr	r0, [r4, #20]
 8001628:	f7ff fc4f 	bl	8000eca <HAL_SPI_TransmitReceive>
 800162c:	b9c8      	cbnz	r0, 8001662 <nrf_send_command+0x92>
 800162e:	1e73      	subs	r3, r6, #1
 8001630:	3501      	adds	r5, #1
 8001632:	4446      	add	r6, r8
                                dev->config.spi_timeout) != HAL_OK) {
        return NRF_ERROR;
    }

    for (i = 0; i < len; i++) { rx[i] = myRX[1 + i]; }
 8001634:	42b3      	cmp	r3, r6
 8001636:	d10f      	bne.n	8001658 <nrf_send_command+0x88>
    HAL_GPIO_WritePin(dev->config.csn_port, dev->config.csn_pin, GPIO_PIN_SET);
 8001638:	69e0      	ldr	r0, [r4, #28]
 800163a:	8c21      	ldrh	r1, [r4, #32]
 800163c:	2201      	movs	r2, #1
 800163e:	f7ff f8f5 	bl	800082c <HAL_GPIO_WritePin>

    csn_set(dev);

    return NRF_OK;
 8001642:	2000      	movs	r0, #0
}
 8001644:	46bd      	mov	sp, r7
 8001646:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        myTX[1 + i] = tx[i];
 800164a:	f811 cf01 	ldrb.w	ip, [r1, #1]!
 800164e:	f803 cb01 	strb.w	ip, [r3], #1
        myRX[i]     = 0;
 8001652:	f800 ef01 	strb.w	lr, [r0, #1]!
 8001656:	e7d9      	b.n	800160c <nrf_send_command+0x3c>
    for (i = 0; i < len; i++) { rx[i] = myRX[1 + i]; }
 8001658:	f815 2b01 	ldrb.w	r2, [r5], #1
 800165c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001660:	e7e8      	b.n	8001634 <nrf_send_command+0x64>
        return NRF_ERROR;
 8001662:	2001      	movs	r0, #1
 8001664:	e7ee      	b.n	8001644 <nrf_send_command+0x74>

08001666 <nrf_read_register>:
void nrf_packet_received_callback(nrf24l01* dev, uint8_t* data) {
    // default implementation (__weak) is used in favor of nrf_receive_packet
    dev->rx_busy = 0;
}

NRF_RESULT nrf_read_register(nrf24l01* dev, uint8_t reg, uint8_t* data) {
 8001666:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint8_t tx = 0;
 8001668:	ac04      	add	r4, sp, #16
 800166a:	2300      	movs	r3, #0
 800166c:	f804 3d01 	strb.w	r3, [r4, #-1]!
    if (nrf_send_command(dev, NRF_CMD_R_REGISTER | reg, &tx, data, 1) !=
 8001670:	2301      	movs	r3, #1
 8001672:	9300      	str	r3, [sp, #0]
 8001674:	4613      	mov	r3, r2
 8001676:	4622      	mov	r2, r4
 8001678:	f7ff ffaa 	bl	80015d0 <nrf_send_command>
        NRF_OK) {
        return NRF_ERROR;
    }
    return NRF_OK;
}
 800167c:	3000      	adds	r0, #0
 800167e:	bf18      	it	ne
 8001680:	2001      	movne	r0, #1
 8001682:	b004      	add	sp, #16
 8001684:	bd10      	pop	{r4, pc}

08001686 <nrf_write_register>:

NRF_RESULT nrf_write_register(nrf24l01* dev, uint8_t reg, uint8_t* data) {
 8001686:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint8_t rx = 0;
 8001688:	ab04      	add	r3, sp, #16
 800168a:	2400      	movs	r4, #0
 800168c:	f803 4d01 	strb.w	r4, [r3, #-1]!
    if (nrf_send_command(dev, NRF_CMD_W_REGISTER | reg, data, &rx, 1) !=
 8001690:	2401      	movs	r4, #1
 8001692:	9400      	str	r4, [sp, #0]
 8001694:	f041 0120 	orr.w	r1, r1, #32
 8001698:	f7ff ff9a 	bl	80015d0 <nrf_send_command>
        NRF_OK) {
        return NRF_ERROR;
    }
    return NRF_OK;
}
 800169c:	3000      	adds	r0, #0
 800169e:	bf18      	it	ne
 80016a0:	2001      	movne	r0, #1
 80016a2:	b004      	add	sp, #16
 80016a4:	bd10      	pop	{r4, pc}

080016a6 <nrf_read_rx_payload>:

NRF_RESULT nrf_read_rx_payload(nrf24l01* dev, uint8_t* data) {
 80016a6:	b580      	push	{r7, lr}
 80016a8:	b082      	sub	sp, #8
    uint8_t tx[dev->config.payload_length];
 80016aa:	7902      	ldrb	r2, [r0, #4]
 80016ac:	1dd3      	adds	r3, r2, #7
 80016ae:	f023 0307 	bic.w	r3, r3, #7
NRF_RESULT nrf_read_rx_payload(nrf24l01* dev, uint8_t* data) {
 80016b2:	af02      	add	r7, sp, #8
    uint8_t tx[dev->config.payload_length];
 80016b4:	ebad 0d03 	sub.w	sp, sp, r3
    if (nrf_send_command(dev, NRF_CMD_R_RX_PAYLOAD, tx, data,
 80016b8:	460b      	mov	r3, r1
 80016ba:	9200      	str	r2, [sp, #0]
 80016bc:	2161      	movs	r1, #97	; 0x61
 80016be:	aa02      	add	r2, sp, #8
 80016c0:	f7ff ff86 	bl	80015d0 <nrf_send_command>
                         dev->config.payload_length) != NRF_OK) {
        return NRF_ERROR;
    }
    return NRF_OK;
}
 80016c4:	3000      	adds	r0, #0
 80016c6:	bf18      	it	ne
 80016c8:	2001      	movne	r0, #1
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}

080016ce <nrf_write_tx_payload_noack>:
        return NRF_ERROR;
    }
    return NRF_OK;
}

NRF_RESULT nrf_write_tx_payload_noack(nrf24l01* dev, const uint8_t* data) {
 80016ce:	b580      	push	{r7, lr}
 80016d0:	b082      	sub	sp, #8
    uint8_t rx[dev->config.payload_length];
 80016d2:	7902      	ldrb	r2, [r0, #4]
 80016d4:	1dd3      	adds	r3, r2, #7
 80016d6:	f023 0307 	bic.w	r3, r3, #7
NRF_RESULT nrf_write_tx_payload_noack(nrf24l01* dev, const uint8_t* data) {
 80016da:	af02      	add	r7, sp, #8
    uint8_t rx[dev->config.payload_length];
 80016dc:	ebad 0d03 	sub.w	sp, sp, r3
    if (nrf_send_command(dev, NRF_CMD_W_TX_PAYLOAD_NOACK, data, rx,
 80016e0:	ab02      	add	r3, sp, #8
 80016e2:	9200      	str	r2, [sp, #0]
 80016e4:	460a      	mov	r2, r1
 80016e6:	21b0      	movs	r1, #176	; 0xb0
 80016e8:	f7ff ff72 	bl	80015d0 <nrf_send_command>
                         dev->config.payload_length) != NRF_OK) {
        return NRF_ERROR;
    }
    return NRF_OK;
}
 80016ec:	3000      	adds	r0, #0
 80016ee:	bf18      	it	ne
 80016f0:	2001      	movne	r0, #1
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}

080016f6 <nrf_flush_tx>:

NRF_RESULT nrf_flush_tx(nrf24l01* dev) {
 80016f6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint8_t rx = 0;
 80016f8:	2300      	movs	r3, #0
 80016fa:	f88d 300e 	strb.w	r3, [sp, #14]
    uint8_t tx = 0;
 80016fe:	f88d 300f 	strb.w	r3, [sp, #15]
    if (nrf_send_command(dev, NRF_CMD_FLUSH_TX, &tx, &rx, 0) != NRF_OK) {
 8001702:	9300      	str	r3, [sp, #0]
 8001704:	f10d 020f 	add.w	r2, sp, #15
 8001708:	f10d 030e 	add.w	r3, sp, #14
 800170c:	21e1      	movs	r1, #225	; 0xe1
 800170e:	f7ff ff5f 	bl	80015d0 <nrf_send_command>
        return NRF_ERROR;
    }
    return NRF_OK;
}
 8001712:	3000      	adds	r0, #0
 8001714:	bf18      	it	ne
 8001716:	2001      	movne	r0, #1
 8001718:	b005      	add	sp, #20
 800171a:	f85d fb04 	ldr.w	pc, [sp], #4

0800171e <nrf_flush_rx>:

NRF_RESULT nrf_flush_rx(nrf24l01* dev) {
 800171e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint8_t rx = 0;
 8001720:	2300      	movs	r3, #0
 8001722:	f88d 300e 	strb.w	r3, [sp, #14]
    uint8_t tx = 0;
 8001726:	f88d 300f 	strb.w	r3, [sp, #15]
    if (nrf_send_command(dev, NRF_CMD_FLUSH_RX, &tx, &rx, 0) != NRF_OK) {
 800172a:	9300      	str	r3, [sp, #0]
 800172c:	f10d 020f 	add.w	r2, sp, #15
 8001730:	f10d 030e 	add.w	r3, sp, #14
 8001734:	21e2      	movs	r1, #226	; 0xe2
 8001736:	f7ff ff4b 	bl	80015d0 <nrf_send_command>
        return NRF_ERROR;
    }
    return NRF_OK;
}
 800173a:	3000      	adds	r0, #0
 800173c:	bf18      	it	ne
 800173e:	2001      	movne	r0, #1
 8001740:	b005      	add	sp, #20
 8001742:	f85d fb04 	ldr.w	pc, [sp], #4

08001746 <nrf_set_data_rate>:

NRF_RESULT nrf_set_data_rate(nrf24l01* dev, NRF_DATA_RATE rate) {
 8001746:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint8_t reg = 0;
 8001748:	ac02      	add	r4, sp, #8
 800174a:	2300      	movs	r3, #0
 800174c:	f804 3d01 	strb.w	r3, [r4, #-1]!
NRF_RESULT nrf_set_data_rate(nrf24l01* dev, NRF_DATA_RATE rate) {
 8001750:	460e      	mov	r6, r1
    if (nrf_read_register(dev, NRF_RF_SETUP, &reg) != NRF_OK) {
 8001752:	4622      	mov	r2, r4
 8001754:	2106      	movs	r1, #6
NRF_RESULT nrf_set_data_rate(nrf24l01* dev, NRF_DATA_RATE rate) {
 8001756:	4605      	mov	r5, r0
    if (nrf_read_register(dev, NRF_RF_SETUP, &reg) != NRF_OK) {
 8001758:	f7ff ff85 	bl	8001666 <nrf_read_register>
 800175c:	b110      	cbz	r0, 8001764 <nrf_set_data_rate+0x1e>
        return NRF_ERROR;
 800175e:	2001      	movs	r0, #1
    if (nrf_write_register(dev, NRF_RF_SETUP, &reg) != NRF_OK) {
        return NRF_ERROR;
    }
    dev->config.data_rate = rate;
    return NRF_OK;
}
 8001760:	b002      	add	sp, #8
 8001762:	bd70      	pop	{r4, r5, r6, pc}
 8001764:	f89d 3007 	ldrb.w	r3, [sp, #7]
    if (rate & 1) { // low bit set
 8001768:	f016 0f01 	tst.w	r6, #1
        reg |= 1 << 5;
 800176c:	bf14      	ite	ne
 800176e:	f043 0320 	orrne.w	r3, r3, #32
        reg &= ~(1 << 5);
 8001772:	f023 0320 	biceq.w	r3, r3, #32
 8001776:	f88d 3007 	strb.w	r3, [sp, #7]
 800177a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    if (rate & 2) { // high bit set
 800177e:	f016 0f02 	tst.w	r6, #2
        reg |= 1 << 3;
 8001782:	bf14      	ite	ne
 8001784:	f043 0308 	orrne.w	r3, r3, #8
        reg &= ~(1 << 3);
 8001788:	f023 0308 	biceq.w	r3, r3, #8
    if (nrf_write_register(dev, NRF_RF_SETUP, &reg) != NRF_OK) {
 800178c:	4622      	mov	r2, r4
 800178e:	2106      	movs	r1, #6
 8001790:	4628      	mov	r0, r5
        reg &= ~(1 << 3);
 8001792:	f88d 3007 	strb.w	r3, [sp, #7]
    if (nrf_write_register(dev, NRF_RF_SETUP, &reg) != NRF_OK) {
 8001796:	f7ff ff76 	bl	8001686 <nrf_write_register>
 800179a:	2800      	cmp	r0, #0
 800179c:	d1df      	bne.n	800175e <nrf_set_data_rate+0x18>
    dev->config.data_rate = rate;
 800179e:	702e      	strb	r6, [r5, #0]
    return NRF_OK;
 80017a0:	e7de      	b.n	8001760 <nrf_set_data_rate+0x1a>

080017a2 <nrf_clear_interrupts>:
        return NRF_ERROR;
    }
    return NRF_OK;
}

NRF_RESULT nrf_clear_interrupts(nrf24l01* dev) {
 80017a2:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint8_t reg = 0;
 80017a4:	ac02      	add	r4, sp, #8
 80017a6:	2300      	movs	r3, #0
 80017a8:	f804 3d01 	strb.w	r3, [r4, #-1]!
    if (nrf_read_register(dev, NRF_STATUS, &reg) != NRF_OK) {
 80017ac:	2107      	movs	r1, #7
 80017ae:	4622      	mov	r2, r4
NRF_RESULT nrf_clear_interrupts(nrf24l01* dev) {
 80017b0:	4605      	mov	r5, r0
    if (nrf_read_register(dev, NRF_STATUS, &reg) != NRF_OK) {
 80017b2:	f7ff ff58 	bl	8001666 <nrf_read_register>
 80017b6:	b978      	cbnz	r0, 80017d8 <nrf_clear_interrupts+0x36>
        return NRF_ERROR;
    }

    reg |= 7 << 4; // setting bits 4,5,6
 80017b8:	f89d 3007 	ldrb.w	r3, [sp, #7]

    if (nrf_write_register(dev, NRF_STATUS, &reg) != NRF_OK) {
 80017bc:	4622      	mov	r2, r4
    reg |= 7 << 4; // setting bits 4,5,6
 80017be:	f043 0370 	orr.w	r3, r3, #112	; 0x70
    if (nrf_write_register(dev, NRF_STATUS, &reg) != NRF_OK) {
 80017c2:	2107      	movs	r1, #7
 80017c4:	4628      	mov	r0, r5
    reg |= 7 << 4; // setting bits 4,5,6
 80017c6:	f88d 3007 	strb.w	r3, [sp, #7]
    if (nrf_write_register(dev, NRF_STATUS, &reg) != NRF_OK) {
 80017ca:	f7ff ff5c 	bl	8001686 <nrf_write_register>
        return NRF_ERROR;
 80017ce:	3000      	adds	r0, #0
 80017d0:	bf18      	it	ne
 80017d2:	2001      	movne	r0, #1
        return NRF_ERROR;
    }
    return NRF_OK;
}
 80017d4:	b003      	add	sp, #12
 80017d6:	bd30      	pop	{r4, r5, pc}
        return NRF_ERROR;
 80017d8:	2001      	movs	r0, #1
 80017da:	e7fb      	b.n	80017d4 <nrf_clear_interrupts+0x32>

080017dc <nrf_set_rf_channel>:

NRF_RESULT nrf_set_rf_channel(nrf24l01* dev, uint8_t ch) {
 80017dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    ch &= 0x7F;
    uint8_t reg = 0;
 80017de:	ad02      	add	r5, sp, #8
 80017e0:	2300      	movs	r3, #0
 80017e2:	f805 3d01 	strb.w	r3, [r5, #-1]!
NRF_RESULT nrf_set_rf_channel(nrf24l01* dev, uint8_t ch) {
 80017e6:	460c      	mov	r4, r1
    if (nrf_read_register(dev, NRF_RF_CH, &reg) != NRF_OK) { return NRF_ERROR; }
 80017e8:	462a      	mov	r2, r5
 80017ea:	2105      	movs	r1, #5
NRF_RESULT nrf_set_rf_channel(nrf24l01* dev, uint8_t ch) {
 80017ec:	4606      	mov	r6, r0
    if (nrf_read_register(dev, NRF_RF_CH, &reg) != NRF_OK) { return NRF_ERROR; }
 80017ee:	f7ff ff3a 	bl	8001666 <nrf_read_register>
 80017f2:	b110      	cbz	r0, 80017fa <nrf_set_rf_channel+0x1e>
 80017f4:	2001      	movs	r0, #1
    if (nrf_write_register(dev, NRF_RF_CH, &reg) != NRF_OK) {
        return NRF_ERROR;
    }
    dev->config.rf_channel = ch;
    return NRF_OK;
}
 80017f6:	b002      	add	sp, #8
 80017f8:	bd70      	pop	{r4, r5, r6, pc}
    reg |= ch; // setting channel
 80017fa:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ch &= 0x7F;
 80017fe:	f004 047f 	and.w	r4, r4, #127	; 0x7f
    reg |= ch; // setting channel
 8001802:	4323      	orrs	r3, r4
    if (nrf_write_register(dev, NRF_RF_CH, &reg) != NRF_OK) {
 8001804:	462a      	mov	r2, r5
 8001806:	2105      	movs	r1, #5
 8001808:	4630      	mov	r0, r6
    reg |= ch; // setting channel
 800180a:	f88d 3007 	strb.w	r3, [sp, #7]
    if (nrf_write_register(dev, NRF_RF_CH, &reg) != NRF_OK) {
 800180e:	f7ff ff3a 	bl	8001686 <nrf_write_register>
 8001812:	2800      	cmp	r0, #0
 8001814:	d1ee      	bne.n	80017f4 <nrf_set_rf_channel+0x18>
    dev->config.rf_channel = ch;
 8001816:	71f4      	strb	r4, [r6, #7]
    return NRF_OK;
 8001818:	e7ed      	b.n	80017f6 <nrf_set_rf_channel+0x1a>

0800181a <nrf_set_retransmittion_count>:

NRF_RESULT nrf_set_retransmittion_count(nrf24l01* dev, uint8_t count) {
 800181a:	b573      	push	{r0, r1, r4, r5, r6, lr}
    count &= 0x0F;
    uint8_t reg = 0;
 800181c:	ad02      	add	r5, sp, #8
 800181e:	2300      	movs	r3, #0
 8001820:	f805 3d01 	strb.w	r3, [r5, #-1]!
NRF_RESULT nrf_set_retransmittion_count(nrf24l01* dev, uint8_t count) {
 8001824:	460c      	mov	r4, r1
    if (nrf_read_register(dev, NRF_SETUP_RETR, &reg) != NRF_OK) {
 8001826:	462a      	mov	r2, r5
 8001828:	2104      	movs	r1, #4
NRF_RESULT nrf_set_retransmittion_count(nrf24l01* dev, uint8_t count) {
 800182a:	4606      	mov	r6, r0
    if (nrf_read_register(dev, NRF_SETUP_RETR, &reg) != NRF_OK) {
 800182c:	f7ff ff1b 	bl	8001666 <nrf_read_register>
 8001830:	b110      	cbz	r0, 8001838 <nrf_set_retransmittion_count+0x1e>
        return NRF_ERROR;
 8001832:	2001      	movs	r0, #1
    if (nrf_write_register(dev, NRF_SETUP_RETR, &reg) != NRF_OK) {
        return NRF_ERROR;
    }
    dev->config.retransmit_count = count;
    return NRF_OK;
}
 8001834:	b002      	add	sp, #8
 8001836:	bd70      	pop	{r4, r5, r6, pc}
    reg &= 0xF0;  // clearing bits 0,1,2,3
 8001838:	f89d 3007 	ldrb.w	r3, [sp, #7]
    count &= 0x0F;
 800183c:	f004 040f 	and.w	r4, r4, #15
    reg &= 0xF0;  // clearing bits 0,1,2,3
 8001840:	f023 030f 	bic.w	r3, r3, #15
    reg |= count; // setting count
 8001844:	4323      	orrs	r3, r4
    if (nrf_write_register(dev, NRF_SETUP_RETR, &reg) != NRF_OK) {
 8001846:	462a      	mov	r2, r5
 8001848:	2104      	movs	r1, #4
 800184a:	4630      	mov	r0, r6
    reg |= count; // setting count
 800184c:	f88d 3007 	strb.w	r3, [sp, #7]
    if (nrf_write_register(dev, NRF_SETUP_RETR, &reg) != NRF_OK) {
 8001850:	f7ff ff19 	bl	8001686 <nrf_write_register>
 8001854:	2800      	cmp	r0, #0
 8001856:	d1ec      	bne.n	8001832 <nrf_set_retransmittion_count+0x18>
    dev->config.retransmit_count = count;
 8001858:	7174      	strb	r4, [r6, #5]
    return NRF_OK;
 800185a:	e7eb      	b.n	8001834 <nrf_set_retransmittion_count+0x1a>

0800185c <nrf_set_retransmittion_delay>:

NRF_RESULT nrf_set_retransmittion_delay(nrf24l01* dev, uint8_t delay) {
 800185c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    delay &= 0x0F;
    uint8_t reg = 0;
 800185e:	ad02      	add	r5, sp, #8
 8001860:	2300      	movs	r3, #0
 8001862:	f805 3d01 	strb.w	r3, [r5, #-1]!
NRF_RESULT nrf_set_retransmittion_delay(nrf24l01* dev, uint8_t delay) {
 8001866:	460c      	mov	r4, r1
    if (nrf_read_register(dev, NRF_SETUP_RETR, &reg) != NRF_OK) {
 8001868:	462a      	mov	r2, r5
 800186a:	2104      	movs	r1, #4
NRF_RESULT nrf_set_retransmittion_delay(nrf24l01* dev, uint8_t delay) {
 800186c:	4606      	mov	r6, r0
    if (nrf_read_register(dev, NRF_SETUP_RETR, &reg) != NRF_OK) {
 800186e:	f7ff fefa 	bl	8001666 <nrf_read_register>
 8001872:	b110      	cbz	r0, 800187a <nrf_set_retransmittion_delay+0x1e>
        return NRF_ERROR;
 8001874:	2001      	movs	r0, #1
    if (nrf_write_register(dev, NRF_SETUP_RETR, &reg) != NRF_OK) {
        return NRF_ERROR;
    }
    dev->config.retransmit_delay = delay;
    return NRF_OK;
}
 8001876:	b002      	add	sp, #8
 8001878:	bd70      	pop	{r4, r5, r6, pc}
    reg &= 0x0F;       // clearing bits 1,2,6,7
 800187a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    delay &= 0x0F;
 800187e:	f004 040f 	and.w	r4, r4, #15
    reg &= 0x0F;       // clearing bits 1,2,6,7
 8001882:	f003 030f 	and.w	r3, r3, #15
    reg |= delay << 4; // setting delay
 8001886:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    if (nrf_write_register(dev, NRF_SETUP_RETR, &reg) != NRF_OK) {
 800188a:	462a      	mov	r2, r5
 800188c:	2104      	movs	r1, #4
 800188e:	4630      	mov	r0, r6
    reg |= delay << 4; // setting delay
 8001890:	f88d 3007 	strb.w	r3, [sp, #7]
    if (nrf_write_register(dev, NRF_SETUP_RETR, &reg) != NRF_OK) {
 8001894:	f7ff fef7 	bl	8001686 <nrf_write_register>
 8001898:	2800      	cmp	r0, #0
 800189a:	d1eb      	bne.n	8001874 <nrf_set_retransmittion_delay+0x18>
    dev->config.retransmit_delay = delay;
 800189c:	71b4      	strb	r4, [r6, #6]
    return NRF_OK;
 800189e:	e7ea      	b.n	8001876 <nrf_set_retransmittion_delay+0x1a>

080018a0 <nrf_set_address_width>:

NRF_RESULT nrf_set_address_width(nrf24l01* dev, NRF_ADDR_WIDTH width) {
 80018a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint8_t reg = 0;
 80018a2:	ac02      	add	r4, sp, #8
 80018a4:	2300      	movs	r3, #0
 80018a6:	f804 3d01 	strb.w	r3, [r4, #-1]!
NRF_RESULT nrf_set_address_width(nrf24l01* dev, NRF_ADDR_WIDTH width) {
 80018aa:	460e      	mov	r6, r1
    if (nrf_read_register(dev, NRF_SETUP_AW, &reg) != NRF_OK) {
 80018ac:	4622      	mov	r2, r4
 80018ae:	2103      	movs	r1, #3
NRF_RESULT nrf_set_address_width(nrf24l01* dev, NRF_ADDR_WIDTH width) {
 80018b0:	4605      	mov	r5, r0
    if (nrf_read_register(dev, NRF_SETUP_AW, &reg) != NRF_OK) {
 80018b2:	f7ff fed8 	bl	8001666 <nrf_read_register>
 80018b6:	b110      	cbz	r0, 80018be <nrf_set_address_width+0x1e>
        return NRF_ERROR;
 80018b8:	2001      	movs	r0, #1
    if (nrf_write_register(dev, NRF_SETUP_AW, &reg) != NRF_OK) {
        return NRF_ERROR;
    }
    dev->config.addr_width = width;
    return NRF_OK;
}
 80018ba:	b002      	add	sp, #8
 80018bc:	bd70      	pop	{r4, r5, r6, pc}
    reg &= 0x03;  // clearing bits 0,1
 80018be:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80018c2:	f003 0303 	and.w	r3, r3, #3
    reg |= width; // setting delay
 80018c6:	4333      	orrs	r3, r6
    if (nrf_write_register(dev, NRF_SETUP_AW, &reg) != NRF_OK) {
 80018c8:	4622      	mov	r2, r4
 80018ca:	2103      	movs	r1, #3
 80018cc:	4628      	mov	r0, r5
    reg |= width; // setting delay
 80018ce:	f88d 3007 	strb.w	r3, [sp, #7]
    if (nrf_write_register(dev, NRF_SETUP_AW, &reg) != NRF_OK) {
 80018d2:	f7ff fed8 	bl	8001686 <nrf_write_register>
 80018d6:	2800      	cmp	r0, #0
 80018d8:	d1ee      	bne.n	80018b8 <nrf_set_address_width+0x18>
    dev->config.addr_width = width;
 80018da:	70ee      	strb	r6, [r5, #3]
    return NRF_OK;
 80018dc:	e7ed      	b.n	80018ba <nrf_set_address_width+0x1a>

080018de <nrf_set_rx_pipes>:

NRF_RESULT nrf_set_rx_pipes(nrf24l01* dev, uint8_t pipes) {
 80018de:	b507      	push	{r0, r1, r2, lr}
 80018e0:	aa02      	add	r2, sp, #8
 80018e2:	f802 1d01 	strb.w	r1, [r2, #-1]!
    if (nrf_write_register(dev, NRF_EN_RXADDR, &pipes) != NRF_OK) {
 80018e6:	2102      	movs	r1, #2
 80018e8:	f7ff fecd 	bl	8001686 <nrf_write_register>
        return NRF_ERROR;
    }
    return NRF_OK;
}
 80018ec:	3000      	adds	r0, #0
 80018ee:	bf18      	it	ne
 80018f0:	2001      	movne	r0, #1
 80018f2:	b003      	add	sp, #12
 80018f4:	f85d fb04 	ldr.w	pc, [sp], #4

080018f8 <nrf_enable_auto_ack>:

NRF_RESULT nrf_enable_auto_ack(nrf24l01* dev, uint8_t pipe) {
 80018f8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint8_t reg = 0;
 80018fa:	ad02      	add	r5, sp, #8
 80018fc:	2300      	movs	r3, #0
 80018fe:	f805 3d01 	strb.w	r3, [r5, #-1]!
NRF_RESULT nrf_enable_auto_ack(nrf24l01* dev, uint8_t pipe) {
 8001902:	460c      	mov	r4, r1
    if (nrf_read_register(dev, NRF_EN_AA, &reg) != NRF_OK) { return NRF_ERROR; }
 8001904:	462a      	mov	r2, r5
 8001906:	2101      	movs	r1, #1
NRF_RESULT nrf_enable_auto_ack(nrf24l01* dev, uint8_t pipe) {
 8001908:	4606      	mov	r6, r0
    if (nrf_read_register(dev, NRF_EN_AA, &reg) != NRF_OK) { return NRF_ERROR; }
 800190a:	f7ff feac 	bl	8001666 <nrf_read_register>
 800190e:	2101      	movs	r1, #1
 8001910:	b978      	cbnz	r0, 8001932 <nrf_enable_auto_ack+0x3a>

    reg |= 1 << pipe;
 8001912:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001916:	fa01 f404 	lsl.w	r4, r1, r4
 800191a:	431c      	orrs	r4, r3

    if (nrf_write_register(dev, NRF_EN_AA, &reg) != NRF_OK) {
 800191c:	462a      	mov	r2, r5
 800191e:	4630      	mov	r0, r6
    reg |= 1 << pipe;
 8001920:	f88d 4007 	strb.w	r4, [sp, #7]
    if (nrf_write_register(dev, NRF_EN_AA, &reg) != NRF_OK) {
 8001924:	f7ff feaf 	bl	8001686 <nrf_write_register>
    if (nrf_read_register(dev, NRF_EN_AA, &reg) != NRF_OK) { return NRF_ERROR; }
 8001928:	3000      	adds	r0, #0
 800192a:	bf18      	it	ne
 800192c:	2001      	movne	r0, #1
        return NRF_ERROR;
    }
    return NRF_OK;
}
 800192e:	b002      	add	sp, #8
 8001930:	bd70      	pop	{r4, r5, r6, pc}
    if (nrf_read_register(dev, NRF_EN_AA, &reg) != NRF_OK) { return NRF_ERROR; }
 8001932:	4608      	mov	r0, r1
 8001934:	e7fb      	b.n	800192e <nrf_enable_auto_ack+0x36>

08001936 <nrf_enable_crc>:

NRF_RESULT nrf_enable_crc(nrf24l01* dev, bool activate) {
 8001936:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint8_t reg = 0;
 8001938:	ac02      	add	r4, sp, #8
NRF_RESULT nrf_enable_crc(nrf24l01* dev, bool activate) {
 800193a:	460e      	mov	r6, r1
    uint8_t reg = 0;
 800193c:	2100      	movs	r1, #0
 800193e:	f804 1d01 	strb.w	r1, [r4, #-1]!
    if (nrf_read_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8001942:	4622      	mov	r2, r4
NRF_RESULT nrf_enable_crc(nrf24l01* dev, bool activate) {
 8001944:	4605      	mov	r5, r0
    if (nrf_read_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8001946:	f7ff fe8e 	bl	8001666 <nrf_read_register>
 800194a:	b998      	cbnz	r0, 8001974 <nrf_enable_crc+0x3e>
 800194c:	f89d 3007 	ldrb.w	r3, [sp, #7]
        return NRF_ERROR;
    }

    if (activate) {
 8001950:	b16e      	cbz	r6, 800196e <nrf_enable_crc+0x38>
        reg |= 1 << 3;
 8001952:	f043 0308 	orr.w	r3, r3, #8
    } else {
        reg &= ~(1 << 3);
    }

    if (nrf_write_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8001956:	4622      	mov	r2, r4
 8001958:	2100      	movs	r1, #0
 800195a:	4628      	mov	r0, r5
        reg &= ~(1 << 3);
 800195c:	f88d 3007 	strb.w	r3, [sp, #7]
    if (nrf_write_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8001960:	f7ff fe91 	bl	8001686 <nrf_write_register>
        return NRF_ERROR;
 8001964:	3000      	adds	r0, #0
 8001966:	bf18      	it	ne
 8001968:	2001      	movne	r0, #1
        return NRF_ERROR;
    }
    return NRF_OK;
}
 800196a:	b002      	add	sp, #8
 800196c:	bd70      	pop	{r4, r5, r6, pc}
        reg &= ~(1 << 3);
 800196e:	f023 0308 	bic.w	r3, r3, #8
 8001972:	e7f0      	b.n	8001956 <nrf_enable_crc+0x20>
        return NRF_ERROR;
 8001974:	2001      	movs	r0, #1
 8001976:	e7f8      	b.n	800196a <nrf_enable_crc+0x34>

08001978 <nrf_set_crc_width>:

NRF_RESULT nrf_set_crc_width(nrf24l01* dev, NRF_CRC_WIDTH width) {
 8001978:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint8_t reg = 0;
 800197a:	ac02      	add	r4, sp, #8
NRF_RESULT nrf_set_crc_width(nrf24l01* dev, NRF_CRC_WIDTH width) {
 800197c:	460e      	mov	r6, r1
    uint8_t reg = 0;
 800197e:	2100      	movs	r1, #0
 8001980:	f804 1d01 	strb.w	r1, [r4, #-1]!
    if (nrf_read_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8001984:	4622      	mov	r2, r4
NRF_RESULT nrf_set_crc_width(nrf24l01* dev, NRF_CRC_WIDTH width) {
 8001986:	4605      	mov	r5, r0
    if (nrf_read_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8001988:	f7ff fe6d 	bl	8001666 <nrf_read_register>
 800198c:	b110      	cbz	r0, 8001994 <nrf_set_crc_width+0x1c>
        return NRF_ERROR;
 800198e:	2001      	movs	r0, #1
    if (nrf_write_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
        return NRF_ERROR;
    }
    dev->config.crc_width = width;
    return NRF_OK;
}
 8001990:	b002      	add	sp, #8
 8001992:	bd70      	pop	{r4, r5, r6, pc}
 8001994:	f89d 3007 	ldrb.w	r3, [sp, #7]
    if (width == NRF_CRC_WIDTH_2B) {
 8001998:	2e01      	cmp	r6, #1
        reg |= 1 << 2;
 800199a:	bf0c      	ite	eq
 800199c:	f043 0304 	orreq.w	r3, r3, #4
        reg &= ~(1 << 3);
 80019a0:	f023 0308 	bicne.w	r3, r3, #8
    if (nrf_write_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 80019a4:	4622      	mov	r2, r4
 80019a6:	2100      	movs	r1, #0
 80019a8:	4628      	mov	r0, r5
        reg &= ~(1 << 3);
 80019aa:	f88d 3007 	strb.w	r3, [sp, #7]
    if (nrf_write_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 80019ae:	f7ff fe6a 	bl	8001686 <nrf_write_register>
 80019b2:	2800      	cmp	r0, #0
 80019b4:	d1eb      	bne.n	800198e <nrf_set_crc_width+0x16>
    dev->config.crc_width = width;
 80019b6:	70ae      	strb	r6, [r5, #2]
    return NRF_OK;
 80019b8:	e7ea      	b.n	8001990 <nrf_set_crc_width+0x18>

080019ba <nrf_power_up>:

NRF_RESULT nrf_power_up(nrf24l01* dev, bool power_up) {
 80019ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint8_t reg = 0;
 80019bc:	ac02      	add	r4, sp, #8
NRF_RESULT nrf_power_up(nrf24l01* dev, bool power_up) {
 80019be:	460e      	mov	r6, r1
    uint8_t reg = 0;
 80019c0:	2100      	movs	r1, #0
 80019c2:	f804 1d01 	strb.w	r1, [r4, #-1]!
    if (nrf_read_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 80019c6:	4622      	mov	r2, r4
NRF_RESULT nrf_power_up(nrf24l01* dev, bool power_up) {
 80019c8:	4605      	mov	r5, r0
    if (nrf_read_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 80019ca:	f7ff fe4c 	bl	8001666 <nrf_read_register>
 80019ce:	b998      	cbnz	r0, 80019f8 <nrf_power_up+0x3e>
 80019d0:	f89d 3007 	ldrb.w	r3, [sp, #7]
        return NRF_ERROR;
    }

    if (power_up) {
 80019d4:	b16e      	cbz	r6, 80019f2 <nrf_power_up+0x38>
        reg |= 1 << 1;
 80019d6:	f043 0302 	orr.w	r3, r3, #2
    } else {
        reg &= ~(1 << 1);
    }

    if (nrf_write_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 80019da:	4622      	mov	r2, r4
 80019dc:	2100      	movs	r1, #0
 80019de:	4628      	mov	r0, r5
        reg &= ~(1 << 1);
 80019e0:	f88d 3007 	strb.w	r3, [sp, #7]
    if (nrf_write_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 80019e4:	f7ff fe4f 	bl	8001686 <nrf_write_register>
        return NRF_ERROR;
 80019e8:	3000      	adds	r0, #0
 80019ea:	bf18      	it	ne
 80019ec:	2001      	movne	r0, #1
        return NRF_ERROR;
    }
    return NRF_OK;
}
 80019ee:	b002      	add	sp, #8
 80019f0:	bd70      	pop	{r4, r5, r6, pc}
        reg &= ~(1 << 1);
 80019f2:	f023 0302 	bic.w	r3, r3, #2
 80019f6:	e7f0      	b.n	80019da <nrf_power_up+0x20>
        return NRF_ERROR;
 80019f8:	2001      	movs	r0, #1
 80019fa:	e7f8      	b.n	80019ee <nrf_power_up+0x34>

080019fc <nrf_rx_tx_control>:

NRF_RESULT nrf_rx_tx_control(nrf24l01* dev, NRF_TXRX_STATE rx) {
 80019fc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint8_t reg = 0;
 80019fe:	ac02      	add	r4, sp, #8
NRF_RESULT nrf_rx_tx_control(nrf24l01* dev, NRF_TXRX_STATE rx) {
 8001a00:	460e      	mov	r6, r1
    uint8_t reg = 0;
 8001a02:	2100      	movs	r1, #0
 8001a04:	f804 1d01 	strb.w	r1, [r4, #-1]!
    if (nrf_read_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8001a08:	4622      	mov	r2, r4
NRF_RESULT nrf_rx_tx_control(nrf24l01* dev, NRF_TXRX_STATE rx) {
 8001a0a:	4605      	mov	r5, r0
    if (nrf_read_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8001a0c:	f7ff fe2b 	bl	8001666 <nrf_read_register>
 8001a10:	b998      	cbnz	r0, 8001a3a <nrf_rx_tx_control+0x3e>
 8001a12:	f89d 3007 	ldrb.w	r3, [sp, #7]
        return NRF_ERROR;
    }

    if (rx) {
 8001a16:	b16e      	cbz	r6, 8001a34 <nrf_rx_tx_control+0x38>
        reg |= 1;
 8001a18:	f043 0301 	orr.w	r3, r3, #1
    } else {
        reg &= ~(1);
    }

    if (nrf_write_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8001a1c:	4622      	mov	r2, r4
 8001a1e:	2100      	movs	r1, #0
 8001a20:	4628      	mov	r0, r5
        reg &= ~(1);
 8001a22:	f88d 3007 	strb.w	r3, [sp, #7]
    if (nrf_write_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8001a26:	f7ff fe2e 	bl	8001686 <nrf_write_register>
        return NRF_ERROR;
 8001a2a:	3000      	adds	r0, #0
 8001a2c:	bf18      	it	ne
 8001a2e:	2001      	movne	r0, #1
        return NRF_ERROR;
    }
    return NRF_OK;
}
 8001a30:	b002      	add	sp, #8
 8001a32:	bd70      	pop	{r4, r5, r6, pc}
        reg &= ~(1);
 8001a34:	f023 0301 	bic.w	r3, r3, #1
 8001a38:	e7f0      	b.n	8001a1c <nrf_rx_tx_control+0x20>
        return NRF_ERROR;
 8001a3a:	2001      	movs	r0, #1
 8001a3c:	e7f8      	b.n	8001a30 <nrf_rx_tx_control+0x34>

08001a3e <nrf_irq_handler>:
void nrf_irq_handler(nrf24l01* dev) {
 8001a3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint8_t status = 0;
 8001a40:	ad02      	add	r5, sp, #8
 8001a42:	2300      	movs	r3, #0
 8001a44:	f805 3d02 	strb.w	r3, [r5, #-2]!
    if (nrf_read_register(dev, NRF_STATUS, &status) != NRF_OK) { return; }
 8001a48:	2107      	movs	r1, #7
 8001a4a:	462a      	mov	r2, r5
void nrf_irq_handler(nrf24l01* dev) {
 8001a4c:	4604      	mov	r4, r0
    if (nrf_read_register(dev, NRF_STATUS, &status) != NRF_OK) { return; }
 8001a4e:	f7ff fe0a 	bl	8001666 <nrf_read_register>
 8001a52:	2800      	cmp	r0, #0
 8001a54:	d175      	bne.n	8001b42 <nrf_irq_handler+0x104>
    if ((status & (1 << 6))) { // RX FIFO Interrupt
 8001a56:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8001a5a:	065e      	lsls	r6, r3, #25
 8001a5c:	d528      	bpl.n	8001ab0 <nrf_irq_handler+0x72>
        uint8_t fifo_status = 0;
 8001a5e:	ae02      	add	r6, sp, #8
 8001a60:	f806 0d01 	strb.w	r0, [r6, #-1]!
        ce_reset(dev);
 8001a64:	4620      	mov	r0, r4
 8001a66:	f7ff fda9 	bl	80015bc <ce_reset>
        nrf_write_register(dev, NRF_STATUS, &status);
 8001a6a:	462a      	mov	r2, r5
 8001a6c:	2107      	movs	r1, #7
 8001a6e:	4620      	mov	r0, r4
 8001a70:	f7ff fe09 	bl	8001686 <nrf_write_register>
        nrf_read_register(dev, NRF_FIFO_STATUS, &fifo_status);
 8001a74:	4632      	mov	r2, r6
 8001a76:	2117      	movs	r1, #23
 8001a78:	4620      	mov	r0, r4
 8001a7a:	f7ff fdf4 	bl	8001666 <nrf_read_register>
        if ((fifo_status & 1) == 0) {
 8001a7e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001a82:	f013 0601 	ands.w	r6, r3, #1
 8001a86:	d110      	bne.n	8001aaa <nrf_irq_handler+0x6c>
            nrf_read_rx_payload(dev, rx_buffer);
 8001a88:	6921      	ldr	r1, [r4, #16]
 8001a8a:	4620      	mov	r0, r4
 8001a8c:	f7ff fe0b 	bl	80016a6 <nrf_read_rx_payload>
            status |= 1 << 6;
 8001a90:	f89d 3006 	ldrb.w	r3, [sp, #6]
            nrf_write_register(dev, NRF_STATUS, &status);
 8001a94:	462a      	mov	r2, r5
            status |= 1 << 6;
 8001a96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
            nrf_write_register(dev, NRF_STATUS, &status);
 8001a9a:	2107      	movs	r1, #7
 8001a9c:	4620      	mov	r0, r4
            status |= 1 << 6;
 8001a9e:	f88d 3006 	strb.w	r3, [sp, #6]
            nrf_write_register(dev, NRF_STATUS, &status);
 8001aa2:	f7ff fdf0 	bl	8001686 <nrf_write_register>
    dev->rx_busy = 0;
 8001aa6:	f884 6036 	strb.w	r6, [r4, #54]	; 0x36
        ce_set(dev);
 8001aaa:	4620      	mov	r0, r4
 8001aac:	f7ff fd8b 	bl	80015c6 <ce_set>
    if ((status & (1 << 5))) { // TX Data Sent Interrupt
 8001ab0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8001ab4:	0699      	lsls	r1, r3, #26
 8001ab6:	d51a      	bpl.n	8001aee <nrf_irq_handler+0xb0>
        status |= 1 << 5;      // clear the interrupt flag
 8001ab8:	f043 0320 	orr.w	r3, r3, #32
        ce_reset(dev);
 8001abc:	4620      	mov	r0, r4
        status |= 1 << 5;      // clear the interrupt flag
 8001abe:	f88d 3006 	strb.w	r3, [sp, #6]
        ce_reset(dev);
 8001ac2:	f7ff fd7b 	bl	80015bc <ce_reset>
        nrf_rx_tx_control(dev, NRF_STATE_RX);
 8001ac6:	2101      	movs	r1, #1
 8001ac8:	4620      	mov	r0, r4
 8001aca:	f7ff ff97 	bl	80019fc <nrf_rx_tx_control>
        dev->state = NRF_STATE_RX;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
        ce_set(dev);
 8001ad4:	4620      	mov	r0, r4
 8001ad6:	f7ff fd76 	bl	80015c6 <ce_set>
        nrf_write_register(dev, NRF_STATUS, &status);
 8001ada:	462a      	mov	r2, r5
 8001adc:	2107      	movs	r1, #7
 8001ade:	4620      	mov	r0, r4
 8001ae0:	f7ff fdd1 	bl	8001686 <nrf_write_register>
        dev->tx_result = NRF_OK;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        dev->tx_busy   = 0;
 8001aea:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if ((status & (1 << 4))) { // MaxRetransmits reached
 8001aee:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8001af2:	06da      	lsls	r2, r3, #27
 8001af4:	d525      	bpl.n	8001b42 <nrf_irq_handler+0x104>
        status |= 1 << 4;
 8001af6:	f043 0310 	orr.w	r3, r3, #16
        nrf_flush_tx(dev);
 8001afa:	4620      	mov	r0, r4
        status |= 1 << 4;
 8001afc:	f88d 3006 	strb.w	r3, [sp, #6]
        nrf_flush_tx(dev);
 8001b00:	f7ff fdf9 	bl	80016f6 <nrf_flush_tx>
        nrf_power_up(dev, 0); // power down
 8001b04:	2100      	movs	r1, #0
 8001b06:	4620      	mov	r0, r4
 8001b08:	f7ff ff57 	bl	80019ba <nrf_power_up>
        nrf_power_up(dev, 1); // power up
 8001b0c:	2101      	movs	r1, #1
 8001b0e:	4620      	mov	r0, r4
 8001b10:	f7ff ff53 	bl	80019ba <nrf_power_up>
        ce_reset(dev);
 8001b14:	4620      	mov	r0, r4
 8001b16:	f7ff fd51 	bl	80015bc <ce_reset>
        dev->state = NRF_STATE_RX;
 8001b1a:	2601      	movs	r6, #1
        nrf_rx_tx_control(dev, NRF_STATE_RX);
 8001b1c:	2101      	movs	r1, #1
 8001b1e:	4620      	mov	r0, r4
 8001b20:	f7ff ff6c 	bl	80019fc <nrf_rx_tx_control>
        ce_set(dev);
 8001b24:	4620      	mov	r0, r4
        dev->state = NRF_STATE_RX;
 8001b26:	f884 6037 	strb.w	r6, [r4, #55]	; 0x37
        ce_set(dev);
 8001b2a:	f7ff fd4c 	bl	80015c6 <ce_set>
        nrf_write_register(dev, NRF_STATUS, &status);
 8001b2e:	462a      	mov	r2, r5
 8001b30:	2107      	movs	r1, #7
 8001b32:	4620      	mov	r0, r4
 8001b34:	f7ff fda7 	bl	8001686 <nrf_write_register>
        dev->tx_busy   = 0;
 8001b38:	2300      	movs	r3, #0
        dev->tx_result = NRF_ERROR;
 8001b3a:	f884 6035 	strb.w	r6, [r4, #53]	; 0x35
        dev->tx_busy   = 0;
 8001b3e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8001b42:	b002      	add	sp, #8
 8001b44:	bd70      	pop	{r4, r5, r6, pc}

08001b46 <nrf_enable_rx_data_ready_irq>:

NRF_RESULT nrf_enable_rx_data_ready_irq(nrf24l01* dev, bool activate) {
 8001b46:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint8_t reg = 0;
 8001b48:	ac02      	add	r4, sp, #8
NRF_RESULT nrf_enable_rx_data_ready_irq(nrf24l01* dev, bool activate) {
 8001b4a:	460e      	mov	r6, r1
    uint8_t reg = 0;
 8001b4c:	2100      	movs	r1, #0
 8001b4e:	f804 1d01 	strb.w	r1, [r4, #-1]!
    if (nrf_read_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8001b52:	4622      	mov	r2, r4
NRF_RESULT nrf_enable_rx_data_ready_irq(nrf24l01* dev, bool activate) {
 8001b54:	4605      	mov	r5, r0
    if (nrf_read_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8001b56:	f7ff fd86 	bl	8001666 <nrf_read_register>
 8001b5a:	b998      	cbnz	r0, 8001b84 <nrf_enable_rx_data_ready_irq+0x3e>
 8001b5c:	f89d 3007 	ldrb.w	r3, [sp, #7]
        return NRF_ERROR;
    }

    if (!activate) {
 8001b60:	b96e      	cbnz	r6, 8001b7e <nrf_enable_rx_data_ready_irq+0x38>
        reg |= 1 << 6;
 8001b62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    } else {
        reg &= ~(1 << 6);
    }

    if (nrf_write_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8001b66:	4622      	mov	r2, r4
 8001b68:	2100      	movs	r1, #0
 8001b6a:	4628      	mov	r0, r5
        reg &= ~(1 << 6);
 8001b6c:	f88d 3007 	strb.w	r3, [sp, #7]
    if (nrf_write_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8001b70:	f7ff fd89 	bl	8001686 <nrf_write_register>
        return NRF_ERROR;
 8001b74:	3000      	adds	r0, #0
 8001b76:	bf18      	it	ne
 8001b78:	2001      	movne	r0, #1
        return NRF_ERROR;
    }
    return NRF_OK;
}
 8001b7a:	b002      	add	sp, #8
 8001b7c:	bd70      	pop	{r4, r5, r6, pc}
        reg &= ~(1 << 6);
 8001b7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001b82:	e7f0      	b.n	8001b66 <nrf_enable_rx_data_ready_irq+0x20>
        return NRF_ERROR;
 8001b84:	2001      	movs	r0, #1
 8001b86:	e7f8      	b.n	8001b7a <nrf_enable_rx_data_ready_irq+0x34>

08001b88 <nrf_enable_tx_data_sent_irq>:

NRF_RESULT nrf_enable_tx_data_sent_irq(nrf24l01* dev, bool activate) {
 8001b88:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint8_t reg = 0;
 8001b8a:	ac02      	add	r4, sp, #8
NRF_RESULT nrf_enable_tx_data_sent_irq(nrf24l01* dev, bool activate) {
 8001b8c:	460e      	mov	r6, r1
    uint8_t reg = 0;
 8001b8e:	2100      	movs	r1, #0
 8001b90:	f804 1d01 	strb.w	r1, [r4, #-1]!
    if (nrf_read_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8001b94:	4622      	mov	r2, r4
NRF_RESULT nrf_enable_tx_data_sent_irq(nrf24l01* dev, bool activate) {
 8001b96:	4605      	mov	r5, r0
    if (nrf_read_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8001b98:	f7ff fd65 	bl	8001666 <nrf_read_register>
 8001b9c:	b998      	cbnz	r0, 8001bc6 <nrf_enable_tx_data_sent_irq+0x3e>
 8001b9e:	f89d 3007 	ldrb.w	r3, [sp, #7]
        return NRF_ERROR;
    }
    if (!activate) {
 8001ba2:	b96e      	cbnz	r6, 8001bc0 <nrf_enable_tx_data_sent_irq+0x38>
        reg |= 1 << 5;
 8001ba4:	f043 0320 	orr.w	r3, r3, #32
    } else {
        reg &= ~(1 << 5);
    }
    if (nrf_write_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8001ba8:	4622      	mov	r2, r4
 8001baa:	2100      	movs	r1, #0
 8001bac:	4628      	mov	r0, r5
        reg &= ~(1 << 5);
 8001bae:	f88d 3007 	strb.w	r3, [sp, #7]
    if (nrf_write_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8001bb2:	f7ff fd68 	bl	8001686 <nrf_write_register>
        return NRF_ERROR;
 8001bb6:	3000      	adds	r0, #0
 8001bb8:	bf18      	it	ne
 8001bba:	2001      	movne	r0, #1
        return NRF_ERROR;
    }
    return NRF_OK;
}
 8001bbc:	b002      	add	sp, #8
 8001bbe:	bd70      	pop	{r4, r5, r6, pc}
        reg &= ~(1 << 5);
 8001bc0:	f023 0320 	bic.w	r3, r3, #32
 8001bc4:	e7f0      	b.n	8001ba8 <nrf_enable_tx_data_sent_irq+0x20>
        return NRF_ERROR;
 8001bc6:	2001      	movs	r0, #1
 8001bc8:	e7f8      	b.n	8001bbc <nrf_enable_tx_data_sent_irq+0x34>

08001bca <nrf_enable_max_retransmit_irq>:

NRF_RESULT nrf_enable_max_retransmit_irq(nrf24l01* dev, bool activate) {
 8001bca:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint8_t reg = 0;
 8001bcc:	ac02      	add	r4, sp, #8
NRF_RESULT nrf_enable_max_retransmit_irq(nrf24l01* dev, bool activate) {
 8001bce:	460e      	mov	r6, r1
    uint8_t reg = 0;
 8001bd0:	2100      	movs	r1, #0
 8001bd2:	f804 1d01 	strb.w	r1, [r4, #-1]!
    if (nrf_read_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8001bd6:	4622      	mov	r2, r4
NRF_RESULT nrf_enable_max_retransmit_irq(nrf24l01* dev, bool activate) {
 8001bd8:	4605      	mov	r5, r0
    if (nrf_read_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8001bda:	f7ff fd44 	bl	8001666 <nrf_read_register>
 8001bde:	b998      	cbnz	r0, 8001c08 <nrf_enable_max_retransmit_irq+0x3e>
 8001be0:	f89d 3007 	ldrb.w	r3, [sp, #7]
        return NRF_ERROR;
    }
    if (!activate) {
 8001be4:	b96e      	cbnz	r6, 8001c02 <nrf_enable_max_retransmit_irq+0x38>
        reg |= 1 << 4;
 8001be6:	f043 0310 	orr.w	r3, r3, #16
    } else {
        reg &= ~(1 << 4);
    }
    if (nrf_write_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8001bea:	4622      	mov	r2, r4
 8001bec:	2100      	movs	r1, #0
 8001bee:	4628      	mov	r0, r5
        reg &= ~(1 << 4);
 8001bf0:	f88d 3007 	strb.w	r3, [sp, #7]
    if (nrf_write_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8001bf4:	f7ff fd47 	bl	8001686 <nrf_write_register>
        return NRF_ERROR;
 8001bf8:	3000      	adds	r0, #0
 8001bfa:	bf18      	it	ne
 8001bfc:	2001      	movne	r0, #1
        return NRF_ERROR;
    }
    return NRF_OK;
}
 8001bfe:	b002      	add	sp, #8
 8001c00:	bd70      	pop	{r4, r5, r6, pc}
        reg &= ~(1 << 4);
 8001c02:	f023 0310 	bic.w	r3, r3, #16
 8001c06:	e7f0      	b.n	8001bea <nrf_enable_max_retransmit_irq+0x20>
        return NRF_ERROR;
 8001c08:	2001      	movs	r0, #1
 8001c0a:	e7f8      	b.n	8001bfe <nrf_enable_max_retransmit_irq+0x34>

08001c0c <nrf_set_rx_address_p0>:

NRF_RESULT nrf_set_rx_address_p0(nrf24l01* dev, const uint8_t* address) {
 8001c0c:	b530      	push	{r4, r5, lr}
 8001c0e:	b085      	sub	sp, #20
    uint8_t rx[5];
    if (nrf_send_command(dev, NRF_CMD_W_REGISTER | NRF_RX_ADDR_P0, address, rx,
 8001c10:	2305      	movs	r3, #5
NRF_RESULT nrf_set_rx_address_p0(nrf24l01* dev, const uint8_t* address) {
 8001c12:	460c      	mov	r4, r1
    if (nrf_send_command(dev, NRF_CMD_W_REGISTER | NRF_RX_ADDR_P0, address, rx,
 8001c14:	9300      	str	r3, [sp, #0]
 8001c16:	460a      	mov	r2, r1
 8001c18:	ab02      	add	r3, sp, #8
 8001c1a:	212a      	movs	r1, #42	; 0x2a
NRF_RESULT nrf_set_rx_address_p0(nrf24l01* dev, const uint8_t* address) {
 8001c1c:	4605      	mov	r5, r0
    if (nrf_send_command(dev, NRF_CMD_W_REGISTER | NRF_RX_ADDR_P0, address, rx,
 8001c1e:	f7ff fcd7 	bl	80015d0 <nrf_send_command>
 8001c22:	b910      	cbnz	r0, 8001c2a <nrf_set_rx_address_p0+0x1e>
                         5) != NRF_OK) {
        return NRF_ERROR;
    }
    dev->config.rx_address = address;
 8001c24:	60ac      	str	r4, [r5, #8]
    return NRF_OK;
}
 8001c26:	b005      	add	sp, #20
 8001c28:	bd30      	pop	{r4, r5, pc}
        return NRF_ERROR;
 8001c2a:	2001      	movs	r0, #1
 8001c2c:	e7fb      	b.n	8001c26 <nrf_set_rx_address_p0+0x1a>

08001c2e <nrf_set_rx_address_p1>:

NRF_RESULT nrf_set_rx_address_p1(nrf24l01* dev, const uint8_t* address) {
 8001c2e:	b530      	push	{r4, r5, lr}
 8001c30:	b085      	sub	sp, #20
    uint8_t rx[5];
    if (nrf_send_command(dev, NRF_CMD_W_REGISTER | NRF_RX_ADDR_P1, address, rx,
 8001c32:	2305      	movs	r3, #5
NRF_RESULT nrf_set_rx_address_p1(nrf24l01* dev, const uint8_t* address) {
 8001c34:	460c      	mov	r4, r1
    if (nrf_send_command(dev, NRF_CMD_W_REGISTER | NRF_RX_ADDR_P1, address, rx,
 8001c36:	9300      	str	r3, [sp, #0]
 8001c38:	460a      	mov	r2, r1
 8001c3a:	ab02      	add	r3, sp, #8
 8001c3c:	212b      	movs	r1, #43	; 0x2b
NRF_RESULT nrf_set_rx_address_p1(nrf24l01* dev, const uint8_t* address) {
 8001c3e:	4605      	mov	r5, r0
    if (nrf_send_command(dev, NRF_CMD_W_REGISTER | NRF_RX_ADDR_P1, address, rx,
 8001c40:	f7ff fcc6 	bl	80015d0 <nrf_send_command>
 8001c44:	b910      	cbnz	r0, 8001c4c <nrf_set_rx_address_p1+0x1e>
                         5) != NRF_OK) {
        return NRF_ERROR;
    }
    dev->config.rx_address = address;
 8001c46:	60ac      	str	r4, [r5, #8]
    return NRF_OK;
}
 8001c48:	b005      	add	sp, #20
 8001c4a:	bd30      	pop	{r4, r5, pc}
        return NRF_ERROR;
 8001c4c:	2001      	movs	r0, #1
 8001c4e:	e7fb      	b.n	8001c48 <nrf_set_rx_address_p1+0x1a>

08001c50 <nrf_set_tx_address>:

NRF_RESULT nrf_set_tx_address(nrf24l01* dev, const uint8_t* address) {
 8001c50:	b530      	push	{r4, r5, lr}
 8001c52:	b085      	sub	sp, #20
    uint8_t rx[5];
    if (nrf_send_command(dev, NRF_CMD_W_REGISTER | NRF_TX_ADDR, address, rx,
 8001c54:	2305      	movs	r3, #5
NRF_RESULT nrf_set_tx_address(nrf24l01* dev, const uint8_t* address) {
 8001c56:	460c      	mov	r4, r1
    if (nrf_send_command(dev, NRF_CMD_W_REGISTER | NRF_TX_ADDR, address, rx,
 8001c58:	9300      	str	r3, [sp, #0]
 8001c5a:	460a      	mov	r2, r1
 8001c5c:	ab02      	add	r3, sp, #8
 8001c5e:	2130      	movs	r1, #48	; 0x30
NRF_RESULT nrf_set_tx_address(nrf24l01* dev, const uint8_t* address) {
 8001c60:	4605      	mov	r5, r0
    if (nrf_send_command(dev, NRF_CMD_W_REGISTER | NRF_TX_ADDR, address, rx,
 8001c62:	f7ff fcb5 	bl	80015d0 <nrf_send_command>
 8001c66:	b910      	cbnz	r0, 8001c6e <nrf_set_tx_address+0x1e>
                         5) != NRF_OK) {
        return NRF_ERROR;
    }
    dev->config.tx_address = address;
 8001c68:	60ec      	str	r4, [r5, #12]
    return NRF_OK;
}
 8001c6a:	b005      	add	sp, #20
 8001c6c:	bd30      	pop	{r4, r5, pc}
        return NRF_ERROR;
 8001c6e:	2001      	movs	r0, #1
 8001c70:	e7fb      	b.n	8001c6a <nrf_set_tx_address+0x1a>

08001c72 <nrf_set_rx_payload_width_p0>:

NRF_RESULT nrf_set_rx_payload_width_p0(nrf24l01* dev, uint8_t width) {
 8001c72:	b513      	push	{r0, r1, r4, lr}
    width &= 0x3F;
 8001c74:	aa02      	add	r2, sp, #8
 8001c76:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8001c7a:	f802 1d01 	strb.w	r1, [r2, #-1]!
    if (nrf_write_register(dev, NRF_RX_PW_P0, &width) != NRF_OK) {
 8001c7e:	2111      	movs	r1, #17
NRF_RESULT nrf_set_rx_payload_width_p0(nrf24l01* dev, uint8_t width) {
 8001c80:	4604      	mov	r4, r0
    if (nrf_write_register(dev, NRF_RX_PW_P0, &width) != NRF_OK) {
 8001c82:	f7ff fd00 	bl	8001686 <nrf_write_register>
 8001c86:	b120      	cbz	r0, 8001c92 <nrf_set_rx_payload_width_p0+0x20>
        dev->config.payload_length = 0;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	7123      	strb	r3, [r4, #4]
        return NRF_ERROR;
 8001c8c:	2001      	movs	r0, #1
    }
    dev->config.payload_length = width;
    return NRF_OK;
}
 8001c8e:	b002      	add	sp, #8
 8001c90:	bd10      	pop	{r4, pc}
    dev->config.payload_length = width;
 8001c92:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001c96:	7123      	strb	r3, [r4, #4]
    return NRF_OK;
 8001c98:	e7f9      	b.n	8001c8e <nrf_set_rx_payload_width_p0+0x1c>

08001c9a <nrf_set_rx_payload_width_p1>:

NRF_RESULT nrf_set_rx_payload_width_p1(nrf24l01* dev, uint8_t width) {
 8001c9a:	b513      	push	{r0, r1, r4, lr}
    width &= 0x3F;
 8001c9c:	aa02      	add	r2, sp, #8
 8001c9e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8001ca2:	f802 1d01 	strb.w	r1, [r2, #-1]!
    if (nrf_write_register(dev, NRF_RX_PW_P1, &width) != NRF_OK) {
 8001ca6:	2112      	movs	r1, #18
NRF_RESULT nrf_set_rx_payload_width_p1(nrf24l01* dev, uint8_t width) {
 8001ca8:	4604      	mov	r4, r0
    if (nrf_write_register(dev, NRF_RX_PW_P1, &width) != NRF_OK) {
 8001caa:	f7ff fcec 	bl	8001686 <nrf_write_register>
 8001cae:	b120      	cbz	r0, 8001cba <nrf_set_rx_payload_width_p1+0x20>
        dev->config.payload_length = 0;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	7123      	strb	r3, [r4, #4]
        return NRF_ERROR;
 8001cb4:	2001      	movs	r0, #1
    }
    dev->config.payload_length = width;
    return NRF_OK;
}
 8001cb6:	b002      	add	sp, #8
 8001cb8:	bd10      	pop	{r4, pc}
    dev->config.payload_length = width;
 8001cba:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001cbe:	7123      	strb	r3, [r4, #4]
    return NRF_OK;
 8001cc0:	e7f9      	b.n	8001cb6 <nrf_set_rx_payload_width_p1+0x1c>

08001cc2 <nrf_init>:
NRF_RESULT nrf_init(nrf24l01* dev, nrf24l01_config* config) {
 8001cc2:	b573      	push	{r0, r1, r4, r5, r6, lr}
    dev->config = *config;
 8001cc4:	460e      	mov	r6, r1
NRF_RESULT nrf_init(nrf24l01* dev, nrf24l01_config* config) {
 8001cc6:	4604      	mov	r4, r0
    dev->config = *config;
 8001cc8:	4605      	mov	r5, r0
 8001cca:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001ccc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cce:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001cd0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cd2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001cd4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cd6:	6833      	ldr	r3, [r6, #0]
 8001cd8:	602b      	str	r3, [r5, #0]
    ce_reset(dev);
 8001cda:	4620      	mov	r0, r4
 8001cdc:	f7ff fc6e 	bl	80015bc <ce_reset>
    HAL_GPIO_WritePin(dev->config.csn_port, dev->config.csn_pin,
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	8c21      	ldrh	r1, [r4, #32]
 8001ce4:	69e0      	ldr	r0, [r4, #28]
 8001ce6:	f7fe fda1 	bl	800082c <HAL_GPIO_WritePin>
    uint8_t config_reg = 0;
 8001cea:	ad02      	add	r5, sp, #8
    nrf_power_up(dev, true);
 8001cec:	2101      	movs	r1, #1
 8001cee:	4620      	mov	r0, r4
 8001cf0:	f7ff fe63 	bl	80019ba <nrf_power_up>
    uint8_t config_reg = 0;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	f805 3d01 	strb.w	r3, [r5, #-1]!
    while ((config_reg & 2) == 0) { // wait for powerup
 8001cfa:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8001cfe:	f011 0102 	ands.w	r1, r1, #2
 8001d02:	d053      	beq.n	8001dac <nrf_init+0xea>
    nrf_set_rx_payload_width_p0(dev, dev->config.payload_length);
 8001d04:	7921      	ldrb	r1, [r4, #4]
 8001d06:	4620      	mov	r0, r4
 8001d08:	f7ff ffb3 	bl	8001c72 <nrf_set_rx_payload_width_p0>
    nrf_set_rx_payload_width_p1(dev, dev->config.payload_length);
 8001d0c:	7921      	ldrb	r1, [r4, #4]
 8001d0e:	4620      	mov	r0, r4
 8001d10:	f7ff ffc3 	bl	8001c9a <nrf_set_rx_payload_width_p1>
    nrf_set_rx_address_p1(dev, dev->config.rx_address);
 8001d14:	68a1      	ldr	r1, [r4, #8]
 8001d16:	4620      	mov	r0, r4
 8001d18:	f7ff ff89 	bl	8001c2e <nrf_set_rx_address_p1>
    nrf_set_rx_address_p0(dev, dev->config.tx_address);
 8001d1c:	68e1      	ldr	r1, [r4, #12]
 8001d1e:	4620      	mov	r0, r4
 8001d20:	f7ff ff74 	bl	8001c0c <nrf_set_rx_address_p0>
    nrf_set_tx_address(dev, dev->config.tx_address);
 8001d24:	68e1      	ldr	r1, [r4, #12]
 8001d26:	4620      	mov	r0, r4
 8001d28:	f7ff ff92 	bl	8001c50 <nrf_set_tx_address>
    nrf_enable_rx_data_ready_irq(dev, 1);
 8001d2c:	2101      	movs	r1, #1
 8001d2e:	4620      	mov	r0, r4
 8001d30:	f7ff ff09 	bl	8001b46 <nrf_enable_rx_data_ready_irq>
    nrf_enable_tx_data_sent_irq(dev, 1);
 8001d34:	2101      	movs	r1, #1
 8001d36:	4620      	mov	r0, r4
 8001d38:	f7ff ff26 	bl	8001b88 <nrf_enable_tx_data_sent_irq>
    nrf_enable_max_retransmit_irq(dev, 1);
 8001d3c:	2101      	movs	r1, #1
 8001d3e:	4620      	mov	r0, r4
 8001d40:	f7ff ff43 	bl	8001bca <nrf_enable_max_retransmit_irq>
    nrf_enable_crc(dev, 1);
 8001d44:	2101      	movs	r1, #1
 8001d46:	4620      	mov	r0, r4
 8001d48:	f7ff fdf5 	bl	8001936 <nrf_enable_crc>
    nrf_set_crc_width(dev, dev->config.crc_width);
 8001d4c:	78a1      	ldrb	r1, [r4, #2]
 8001d4e:	4620      	mov	r0, r4
 8001d50:	f7ff fe12 	bl	8001978 <nrf_set_crc_width>
    nrf_set_address_width(dev, dev->config.addr_width);
 8001d54:	78e1      	ldrb	r1, [r4, #3]
 8001d56:	4620      	mov	r0, r4
 8001d58:	f7ff fda2 	bl	80018a0 <nrf_set_address_width>
    nrf_set_rf_channel(dev, dev->config.rf_channel);
 8001d5c:	79e1      	ldrb	r1, [r4, #7]
 8001d5e:	4620      	mov	r0, r4
 8001d60:	f7ff fd3c 	bl	80017dc <nrf_set_rf_channel>
    nrf_set_data_rate(dev, dev->config.data_rate);
 8001d64:	7821      	ldrb	r1, [r4, #0]
 8001d66:	4620      	mov	r0, r4
 8001d68:	f7ff fced 	bl	8001746 <nrf_set_data_rate>
    nrf_set_retransmittion_count(dev, dev->config.retransmit_count);
 8001d6c:	7961      	ldrb	r1, [r4, #5]
 8001d6e:	4620      	mov	r0, r4
 8001d70:	f7ff fd53 	bl	800181a <nrf_set_retransmittion_count>
    nrf_set_retransmittion_delay(dev, dev->config.retransmit_delay);
 8001d74:	79a1      	ldrb	r1, [r4, #6]
 8001d76:	4620      	mov	r0, r4
 8001d78:	f7ff fd70 	bl	800185c <nrf_set_retransmittion_delay>
    nrf_set_rx_pipes(dev, 0x03);
 8001d7c:	2103      	movs	r1, #3
 8001d7e:	4620      	mov	r0, r4
 8001d80:	f7ff fdad 	bl	80018de <nrf_set_rx_pipes>
    nrf_enable_auto_ack(dev, 0);
 8001d84:	2100      	movs	r1, #0
 8001d86:	4620      	mov	r0, r4
 8001d88:	f7ff fdb6 	bl	80018f8 <nrf_enable_auto_ack>
    nrf_clear_interrupts(dev);
 8001d8c:	4620      	mov	r0, r4
 8001d8e:	f7ff fd08 	bl	80017a2 <nrf_clear_interrupts>
    nrf_rx_tx_control(dev, NRF_STATE_RX);
 8001d92:	2101      	movs	r1, #1
 8001d94:	4620      	mov	r0, r4
 8001d96:	f7ff fe31 	bl	80019fc <nrf_rx_tx_control>
    nrf_flush_rx(dev);
 8001d9a:	4620      	mov	r0, r4
 8001d9c:	f7ff fcbf 	bl	800171e <nrf_flush_rx>
    ce_set(dev);
 8001da0:	4620      	mov	r0, r4
 8001da2:	f7ff fc10 	bl	80015c6 <ce_set>
}
 8001da6:	2000      	movs	r0, #0
 8001da8:	b002      	add	sp, #8
 8001daa:	bd70      	pop	{r4, r5, r6, pc}
        nrf_read_register(dev, NRF_CONFIG, &config_reg);
 8001dac:	462a      	mov	r2, r5
 8001dae:	4620      	mov	r0, r4
 8001db0:	f7ff fc59 	bl	8001666 <nrf_read_register>
 8001db4:	e7a1      	b.n	8001cfa <nrf_init+0x38>

08001db6 <nrf_send_packet_noack>:
    } // wait for end of transmittion

    return dev->tx_result;
}

NRF_RESULT nrf_send_packet_noack(nrf24l01* dev, const uint8_t* data) {
 8001db6:	b538      	push	{r3, r4, r5, lr}
    dev->tx_busy = 1;
 8001db8:	2301      	movs	r3, #1
NRF_RESULT nrf_send_packet_noack(nrf24l01* dev, const uint8_t* data) {
 8001dba:	4604      	mov	r4, r0
    dev->tx_busy = 1;
 8001dbc:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
NRF_RESULT nrf_send_packet_noack(nrf24l01* dev, const uint8_t* data) {
 8001dc0:	460d      	mov	r5, r1

    ce_reset(dev);
 8001dc2:	f7ff fbfb 	bl	80015bc <ce_reset>
    nrf_rx_tx_control(dev, NRF_STATE_TX);
 8001dc6:	2100      	movs	r1, #0
 8001dc8:	4620      	mov	r0, r4
 8001dca:	f7ff fe17 	bl	80019fc <nrf_rx_tx_control>
    nrf_write_tx_payload_noack(dev, data);
 8001dce:	4629      	mov	r1, r5
 8001dd0:	4620      	mov	r0, r4
 8001dd2:	f7ff fc7c 	bl	80016ce <nrf_write_tx_payload_noack>
    ce_set(dev);
 8001dd6:	4620      	mov	r0, r4
 8001dd8:	f7ff fbf5 	bl	80015c6 <ce_set>

    while (dev->tx_busy == 1) {} // wait for end of transmittion
 8001ddc:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d0fb      	beq.n	8001ddc <nrf_send_packet_noack+0x26>

    return dev->tx_result;
 8001de4:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
}
 8001de8:	bd38      	pop	{r3, r4, r5, pc}
	...

08001dec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dec:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dee:	4b0e      	ldr	r3, [pc, #56]	; (8001e28 <HAL_MspInit+0x3c>)
 8001df0:	2100      	movs	r1, #0
 8001df2:	9100      	str	r1, [sp, #0]
 8001df4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001df6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001dfa:	645a      	str	r2, [r3, #68]	; 0x44
 8001dfc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001dfe:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001e02:	9200      	str	r2, [sp, #0]
 8001e04:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e06:	9101      	str	r1, [sp, #4]
 8001e08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e0a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001e0e:	641a      	str	r2, [r3, #64]	; 0x40
 8001e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e16:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001e18:	2007      	movs	r0, #7
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e1a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001e1c:	f7fe fbce 	bl	80005bc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e20:	b003      	add	sp, #12
 8001e22:	f85d fb04 	ldr.w	pc, [sp], #4
 8001e26:	bf00      	nop
 8001e28:	40023800 	.word	0x40023800

08001e2c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e2e:	4604      	mov	r4, r0
 8001e30:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e32:	2214      	movs	r2, #20
 8001e34:	2100      	movs	r1, #0
 8001e36:	a803      	add	r0, sp, #12
 8001e38:	f000 f8e4 	bl	8002004 <memset>
  if(hspi->Instance==SPI2)
 8001e3c:	6822      	ldr	r2, [r4, #0]
 8001e3e:	4b1f      	ldr	r3, [pc, #124]	; (8001ebc <HAL_SPI_MspInit+0x90>)
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d138      	bne.n	8001eb6 <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001e44:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8001e48:	2400      	movs	r4, #0
 8001e4a:	9400      	str	r4, [sp, #0]
 8001e4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e4e:	481c      	ldr	r0, [pc, #112]	; (8001ec0 <HAL_SPI_MspInit+0x94>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001e50:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001e54:	641a      	str	r2, [r3, #64]	; 0x40
 8001e56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e58:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001e5c:	9200      	str	r2, [sp, #0]
 8001e5e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e60:	9401      	str	r4, [sp, #4]
 8001e62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e64:	f042 0204 	orr.w	r2, r2, #4
 8001e68:	631a      	str	r2, [r3, #48]	; 0x30
 8001e6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e6c:	f002 0204 	and.w	r2, r2, #4
 8001e70:	9201      	str	r2, [sp, #4]
 8001e72:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e74:	9402      	str	r4, [sp, #8]
 8001e76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e78:	f042 0202 	orr.w	r2, r2, #2
 8001e7c:	631a      	str	r2, [r3, #48]	; 0x30
 8001e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e80:	f003 0302 	and.w	r3, r3, #2
 8001e84:	9302      	str	r3, [sp, #8]
 8001e86:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001e88:	230c      	movs	r3, #12
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e8a:	eb0d 0103 	add.w	r1, sp, r3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e8e:	2702      	movs	r7, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e90:	2603      	movs	r6, #3
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001e92:	2505      	movs	r5, #5
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001e94:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e96:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e98:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001e9a:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e9c:	f7fe fbf8 	bl	8000690 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8001ea0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ea4:	a903      	add	r1, sp, #12
 8001ea6:	4807      	ldr	r0, [pc, #28]	; (8001ec4 <HAL_SPI_MspInit+0x98>)
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8001ea8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eaa:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eac:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eae:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001eb0:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eb2:	f7fe fbed 	bl	8000690 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001eb6:	b009      	add	sp, #36	; 0x24
 8001eb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	40003800 	.word	0x40003800
 8001ec0:	40020800 	.word	0x40020800
 8001ec4:	40020400 	.word	0x40020400

08001ec8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ec8:	b510      	push	{r4, lr}
 8001eca:	4604      	mov	r4, r0
 8001ecc:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ece:	2214      	movs	r2, #20
 8001ed0:	2100      	movs	r1, #0
 8001ed2:	a803      	add	r0, sp, #12
 8001ed4:	f000 f896 	bl	8002004 <memset>
  if(huart->Instance==USART2)
 8001ed8:	6822      	ldr	r2, [r4, #0]
 8001eda:	4b13      	ldr	r3, [pc, #76]	; (8001f28 <HAL_UART_MspInit+0x60>)
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d120      	bne.n	8001f22 <HAL_UART_MspInit+0x5a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ee0:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8001ee4:	2100      	movs	r1, #0
 8001ee6:	9101      	str	r1, [sp, #4]
 8001ee8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eea:	4810      	ldr	r0, [pc, #64]	; (8001f2c <HAL_UART_MspInit+0x64>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8001eec:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001ef0:	641a      	str	r2, [r3, #64]	; 0x40
 8001ef2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ef4:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001ef8:	9201      	str	r2, [sp, #4]
 8001efa:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001efc:	9102      	str	r1, [sp, #8]
 8001efe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f00:	f042 0201 	orr.w	r2, r2, #1
 8001f04:	631a      	str	r2, [r3, #48]	; 0x30
 8001f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f08:	f003 0301 	and.w	r3, r3, #1
 8001f0c:	9302      	str	r3, [sp, #8]
 8001f0e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001f10:	230c      	movs	r3, #12
 8001f12:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f14:	2302      	movs	r3, #2
 8001f16:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f18:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f1a:	2307      	movs	r3, #7
 8001f1c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f1e:	f7fe fbb7 	bl	8000690 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001f22:	b008      	add	sp, #32
 8001f24:	bd10      	pop	{r4, pc}
 8001f26:	bf00      	nop
 8001f28:	40004400 	.word	0x40004400
 8001f2c:	40020000 	.word	0x40020000

08001f30 <NMI_Handler>:
 8001f30:	4770      	bx	lr

08001f32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f32:	e7fe      	b.n	8001f32 <HardFault_Handler>

08001f34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f34:	e7fe      	b.n	8001f34 <MemManage_Handler>

08001f36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f36:	e7fe      	b.n	8001f36 <BusFault_Handler>

08001f38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f38:	e7fe      	b.n	8001f38 <UsageFault_Handler>

08001f3a <SVC_Handler>:
 8001f3a:	4770      	bx	lr

08001f3c <DebugMon_Handler>:
 8001f3c:	4770      	bx	lr

08001f3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f3e:	4770      	bx	lr

08001f40 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f40:	f7fe bb16 	b.w	8000570 <HAL_IncTick>

08001f44 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001f44:	2010      	movs	r0, #16
 8001f46:	f7fe bc7d 	b.w	8000844 <HAL_GPIO_EXTI_IRQHandler>
	...

08001f4c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f4c:	4b05      	ldr	r3, [pc, #20]	; (8001f64 <SystemInit+0x18>)
 8001f4e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001f52:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8001f56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001f5a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f5e:	609a      	str	r2, [r3, #8]
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	e000ed00 	.word	0xe000ed00

08001f68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fa0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001f6c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001f6e:	e003      	b.n	8001f78 <LoopCopyDataInit>

08001f70 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001f70:	4b0c      	ldr	r3, [pc, #48]	; (8001fa4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001f72:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001f74:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001f76:	3104      	adds	r1, #4

08001f78 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001f78:	480b      	ldr	r0, [pc, #44]	; (8001fa8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001f7a:	4b0c      	ldr	r3, [pc, #48]	; (8001fac <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001f7c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001f7e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001f80:	d3f6      	bcc.n	8001f70 <CopyDataInit>
  ldr  r2, =_sbss
 8001f82:	4a0b      	ldr	r2, [pc, #44]	; (8001fb0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001f84:	e002      	b.n	8001f8c <LoopFillZerobss>

08001f86 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001f86:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001f88:	f842 3b04 	str.w	r3, [r2], #4

08001f8c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001f8c:	4b09      	ldr	r3, [pc, #36]	; (8001fb4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001f8e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001f90:	d3f9      	bcc.n	8001f86 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001f92:	f7ff ffdb 	bl	8001f4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f96:	f000 f811 	bl	8001fbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f9a:	f7ff f9f5 	bl	8001388 <main>
  bx  lr    
 8001f9e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001fa0:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8001fa4:	08002080 	.word	0x08002080
  ldr  r0, =_sdata
 8001fa8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001fac:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8001fb0:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8001fb4:	200004e8 	.word	0x200004e8

08001fb8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fb8:	e7fe      	b.n	8001fb8 <ADC_IRQHandler>
	...

08001fbc <__libc_init_array>:
 8001fbc:	b570      	push	{r4, r5, r6, lr}
 8001fbe:	4e0d      	ldr	r6, [pc, #52]	; (8001ff4 <__libc_init_array+0x38>)
 8001fc0:	4c0d      	ldr	r4, [pc, #52]	; (8001ff8 <__libc_init_array+0x3c>)
 8001fc2:	1ba4      	subs	r4, r4, r6
 8001fc4:	10a4      	asrs	r4, r4, #2
 8001fc6:	2500      	movs	r5, #0
 8001fc8:	42a5      	cmp	r5, r4
 8001fca:	d109      	bne.n	8001fe0 <__libc_init_array+0x24>
 8001fcc:	4e0b      	ldr	r6, [pc, #44]	; (8001ffc <__libc_init_array+0x40>)
 8001fce:	4c0c      	ldr	r4, [pc, #48]	; (8002000 <__libc_init_array+0x44>)
 8001fd0:	f000 f828 	bl	8002024 <_init>
 8001fd4:	1ba4      	subs	r4, r4, r6
 8001fd6:	10a4      	asrs	r4, r4, #2
 8001fd8:	2500      	movs	r5, #0
 8001fda:	42a5      	cmp	r5, r4
 8001fdc:	d105      	bne.n	8001fea <__libc_init_array+0x2e>
 8001fde:	bd70      	pop	{r4, r5, r6, pc}
 8001fe0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001fe4:	4798      	blx	r3
 8001fe6:	3501      	adds	r5, #1
 8001fe8:	e7ee      	b.n	8001fc8 <__libc_init_array+0xc>
 8001fea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001fee:	4798      	blx	r3
 8001ff0:	3501      	adds	r5, #1
 8001ff2:	e7f2      	b.n	8001fda <__libc_init_array+0x1e>
 8001ff4:	08002078 	.word	0x08002078
 8001ff8:	08002078 	.word	0x08002078
 8001ffc:	08002078 	.word	0x08002078
 8002000:	0800207c 	.word	0x0800207c

08002004 <memset>:
 8002004:	4402      	add	r2, r0
 8002006:	4603      	mov	r3, r0
 8002008:	4293      	cmp	r3, r2
 800200a:	d100      	bne.n	800200e <memset+0xa>
 800200c:	4770      	bx	lr
 800200e:	f803 1b01 	strb.w	r1, [r3], #1
 8002012:	e7f9      	b.n	8002008 <memset+0x4>

08002014 <strcpy>:
 8002014:	4603      	mov	r3, r0
 8002016:	f811 2b01 	ldrb.w	r2, [r1], #1
 800201a:	f803 2b01 	strb.w	r2, [r3], #1
 800201e:	2a00      	cmp	r2, #0
 8002020:	d1f9      	bne.n	8002016 <strcpy+0x2>
 8002022:	4770      	bx	lr

08002024 <_init>:
 8002024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002026:	bf00      	nop
 8002028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800202a:	bc08      	pop	{r3}
 800202c:	469e      	mov	lr, r3
 800202e:	4770      	bx	lr

08002030 <_fini>:
 8002030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002032:	bf00      	nop
 8002034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002036:	bc08      	pop	{r3}
 8002038:	469e      	mov	lr, r3
 800203a:	4770      	bx	lr
